{"buggy_code": ["# Changelog\n\n### Major Changes - Version 4\n\n**New Functions**\n\n- `chassis()`: chassis information\n\n**Breaking Changes**\n\n- `networkStats()`: will provide an **array** of stats for all given interfaces. In previous versions only one interface was provided as a parameter. Pass '*' for all interfaces\n- `networkStats()`: `rx` and `tx` changed to `rx_bytes` and `tx_bytes`\n- `dockerContainerStats()`: will provide an **array** of stats for all given docker containers. In previous versions only one interface was provided as a parameter. Pass '*' for all docker containers\n\n**Other Changes**\n\n- `system()` optimized system detection (e.g. new Raspberry Pi models, ...)\n- `system()`, `bios()`, `baseboard()` information also as non-root (linux)\n- `graphics()` better controller and display detection, fixes\n- `versions()` optimization, fixes\n- `networkInterfaces()` added `operstate`, `type`, `duplex`, `mtu`, `speed`, `carrierChanges`\n- `networkStats()` added stats for `errors`, `dropped`\n- added TypeScript definitions\n\n**Be aware**, that the new version 4.x is **NOT fully backward compatible** to version 3.x ...\n\nFor major (breaking) changes - version 3 and 2 see end of page.\n\n## Version history\n\n| Version        | Date           | Comment  |\n| -------------- | -------------- | -------- |\n| 4.30.4         | 2020-11-25     | reverted Object.freeze because it broke some projects |\n| 4.30.3         | 2020-11-25     | security update (prototype pollution prevention) Object.freeze |\n| 4.30.2         | 2020-11-25     | security update (prototype pollution prevention) |\n| 4.30.1         | 2020-11-12     | updated docs |\n| 4.30.0         | 2020-11-12     | `get()` possibility to provide params |\n| 4.29.3         | 2020-11-09     | `blockdevices()` catch errors adapted for just one line |\n| 4.29.2         | 2020-11-09     | `blockdevices()` catch errors |\n| 4.29.1         | 2020-11-08     | `cpu()`, `system()` better parsing Raspberry Pi revision codes |\n| 4.29.0         | 2020-11-08     | `fsSize()` correct fs type detection macOS (HFS, APFS, NFS) |\n| 4.28.1         | 2020-11-05     | code cleanup, removing debug console.log() |\n| 4.28.0         | 2020-11-04     | `graphics()` added deviceName (windows) |\n| 4.27.11        | 2020-10-26     | `inetChecksite()` fixed vulnerability: command injection |\n| 4.27.10        | 2020-10-16     | `dockerContainers()` resolved hanging issue |\n| 4.27.9         | 2020-10-13     | `networkInterfaces()` loopback internal detection (windows) |\n| 4.27.8         | 2020-10-08     | windows codepages partial fix |\n| 4.27.7         | 2020-10-05     | updated typescript typings, minor fixes |\n| 4.27.6         | 2020-10-02     | `get()` fixed when results are in arrays |\n| 4.27.5         | 2020-09-18     | `cpuTemperature()` fix try catch (linux) |\n| 4.27.4         | 2020-09-16     | `networkInterfaceDefault()` optimization (macOS) |\n| 4.27.3         | 2020-08-26     | updated typescript typings |\n| 4.27.2         | 2020-08-26     | fixed issue breaking node v4 compatibility |\n| 4.27.1         | 2020-08-25     | `networkStats()` fixed packages dropped (linux) |\n| 4.27.0         | 2020-08-24     | `observe()` added function to observe/watch system parameters |\n| 4.26.12        | 2020-08-21     | `versions()` fixed issue windows |\n| 4.26.11        | 2020-08-20     | `cpuTemperature()` fixed issue windows |\n| 4.26.10        | 2020-07-16     | `networkStats()` fixed issue blocking windows |\n| 4.26.9         | 2020-06-06     | `networkStats()` fixed comparison issue windows |\n| 4.26.8         | 2020-06-06     | `networkInterfaces()` fixed caching issue |\n| 4.26.7         | 2020-06-06     | `cpuTemperature()` fixed raspberry pi sensors issue |\n| 4.26.6         | 2020-06-03     | `diskLayout()` fixed issue linux |\n| 4.26.5         | 2020-05-27     | `cpuTemperature()` optimizes scanning AMD linux sensors |\n| 4.26.4         | 2020-05-21     | `cpuTemperature()` fix (BSD), code cleanup |\n| 4.26.3         | 2020-05-20     | updated documentation (macOS temperature) |\n| 4.26.2         | 2020-05-19     | `processes()` memory leak fix |\n| 4.26.1         | 2020-05-13     | code cleanup |\n| 4.26.0         | 2020-05-12     | `diskLayout()` added full smart data where supported |\n| 4.25.2         | 2020-05-12     | `getDynamicData()` added wifiNetworks() |\n| 4.25.1         | 2020-05-07     | `get()` minor bounds test fix, updated docs |\n| 4.25.0         | 2020-05-07     | `get()` added function to get partial system info |\n| 4.24.2         | 2020-05-06     | `cpu()` fix (BSD), `networkStats()` fix BSD |\n| 4.24.1         | 2020-05-03     | `processes()` fix parsing command and params |\n| 4.24.0         | 2020-05-01     | `networkInterfaces()` added subnet mask ip4 and ip6 |\n| 4.23.10        | 2020-05-01     | `cpuTemperature()` optimized parsing linux |\n| 4.23.9         | 2020-04-29     | `currentLoad()` workarround for no os.cpus info |\n| 4.23.8         | 2020-04-26     | `getMacAddresses()` fix added try catch |\n| 4.23.7         | 2020-04-26     | `getCpuCurrentSpeedSync()` workarround fix |\n| 4.23.6         | 2020-04-25     | `networkGatewayDefault()` bug fix no interfaces |\n| 4.23.5         | 2020-04-20     | updated docs |\n| 4.23.4         | 2020-04-20     | `users()` optimized parseDateTime function |\n| 4.23.3         | 2020-04-09     | refactored to avoid `cat` |\n| 4.23.2         | 2020-04-08     | `cpu()` fixed getting base frequency for AMD Ryzen |\n| 4.23.1         | 2020-03-11     | `diskLayout()` optimized detection linux |\n| 4.23.0         | 2020-03-08     | `versions()` added param to specify which program/lib versions to detect |\n| 4.22.7         | 2020-03-08     | `diskLayout()` fixed linux |\n| 4.22.6         | 2020-03-08     | `network()` fixed DHCP linux|\n| 4.22.5         | 2020-03-04     | `graphics()` fixed vram macOS |\n| 4.22.4         | 2020-03-01     | `versions()` added dotnet, typings fix |\n| 4.22.3         | 2020-02-20     | `memLayout()` code cleanup |\n| 4.22.2         | 2020-02-19     | `memLayout()` raspberry PI mem voltage fix |\n| 4.22.1         | 2020-02-17     | `memLayout()` raspberry PI support |\n| 4.22.0         | 2020-02-17     | `services()` added pids (windows) |\n| 4.21.3         | 2020-02-16     | `versions()` fixed mysql version (macOS) |\n| 4.21.2         | 2020-02-11     | `networkConnections()` fixed linux (debian) issue |\n| 4.21.1         | 2020-01-31     | `networkGatewayDefault()` fixed windows 7 issue |\n| 4.21.0         | 2020-01-27     | `npx` compatibility |\n| 4.20.1         | 2020-01-26     | `battery()` code refactoring, cleanup, updated docs |\n| 4.20.1         | 2020-01-26     | `battery()` code refactoring, cleanup, updated docs |\n| 4.20.0         | 2020-01-25     | `battery()` added designcapacity, voltage, unit |\n| 4.19.4         | 2020-01-24     | `mem()` prevent log messages, `memgetDefaultNetworkInterface()` catch errors |\n| 4.19.3         | 2020-01-24     | `memLayout()` bank info fix macOS |\n| 4.19.2         | 2020-01-19     | `cpu()` muli-processor fix windows |\n| 4.19.1         | 2020-01-14     | `osInfo()` uefi fix windows |\n| 4.19.0         | 2020-01-12     | `osInfo()` added uefi |\n| 4.18.3         | 2020-01-10     | `fsSize()` fix excluding loop/snap devices |\n| 4.18.2         | 2020-01-10     | `memLayout()` fix memsize linux (modules >= 32 GB) |\n| 4.18.1         | 2020-01-07     | updated docs |\n| 4.18.0         | 2020-01-07     | `networkInterfaces()` added dhcp for mac os, added dhcp linux fallback |\n| 4.17.3         | 2020-01-05     | code cleanup |\n| 4.17.2         | 2020-01-05     | `cpu().speed` AMD base frequency and fix (0.00) |\n| 4.17.1         | 2020-01-04     | `fsSize()` alpine linux support |\n| 4.17.0         | 2020-01-04     | `networkInterfaces()` added dhcp, dnsSuffix, ieee8021xAuth, ieee8021xState |\n| 4.16.1         | 2020-01-02     | `networkInterfaces()` bug fix (osx) |\n| 4.16.0         | 2019-11-27     | `networkGatewayDefault()` added |\n| 4.15.3         | 2019-11-10     | type definitions and docs update |\n| 4.15.2         | 2019-11-10     | `mem()` improved calculation linux |\n| 4.15.1         | 2019-11-10     | `diskLayout()` added support for older lsblk versions (linux) |\n| 4.15.0         | 2019-11-10     | `cpu()` added governor (linux) |\n| 4.14.17        | 2019-10-22     | `graphics()` improved display detection (windows) |\n| 4.14.16        | 2019-10-19     | `graphics()` improved display detection (windows) |\n| 4.14.15        | 2019-10-18     | `graphics()` fallback display detection (windows) |\n| 4.14.14        | 2019-10-18     | `powerShell()` fixed error handling (windows) |\n| 4.14.13        | 2019-10-15     | `networkConnections()` fixed parsing (linux) |\n| 4.14.12        | 2019-10-14     | `getCpu()` fixed multi socket detection (linux) |\n| 4.14.11        | 2019-10-01     | type definitions fix dockerInfo |\n| 4.14.10        | 2019-10-01     | type definitions fix memLayout |\n| 4.14.9         | 2019-10-01     | `processLoad()` fix windows |\n| 4.14.8         | 2019-08-22     | `parseDateTime()` fix coding error |\n| 4.14.7         | 2019-08-22     | `battery()` windows acconnected improvement |\n| 4.14.6         | 2019-08-22     | `users()` improved date time parsing |\n| 4.14.5         | 2019-08-22     | `fsSize()` fix windows result as number |\n| 4.14.4         | 2019-07-20     | `verions()` fix pip, pip3 |\n| 4.14.3         | 2019-07-09     | `system()` sku fix windows |\n| 4.14.2         | 2019-07-07     | `networkConnections()` pid linux fix NAN |\n| 4.14.1         | 2019-07-04     | `graphics()` added display position windows |\n| 4.14.0         | 2019-07-03     | `processes()` added process path and params |\n| 4.13.2         | 2019-07-02     | `versions()` fix getting all versions |\n| 4.13.1         | 2019-07-01     | `versions()` gcc fix macos |\n| 4.13.0         | 2019-07-01     | `networkConnections()` added PID and process |\n| 4.12.2         | 2019-06-24     | `system()` added Raspberry PI 4 detection |\n| 4.12.1         | 2019-06-24     | `networkInterface()` virtual interfaces macos, `networkInterfaceDefault()` |\n| 4.12.0         | 2019-06-21     | `networkInterface()` added property virtual |\n| 4.11.6         | 2019-06-19     | `util` bug fix |\n| 4.11.5         | 2019-06-19     | `dockerAll()` bug fix |\n| 4.11.4         | 2019-06-17     | type definitions bug fix |\n| 4.11.3         | 2019-06-16     | `graphics()` optimization windows |\n| 4.11.2         | 2019-06-16     | `wifiNetworks()` bug fixes |\n| 4.11.1         | 2019-06-15     | updated docs |\n| 4.11.0         | 2019-06-14     | `wifiNetworks()` added available wifi networks |\n| 4.10.0         | 2019-06-14     | `graphics()` windows multiple display support |\n| 4.9.2          | 2019-06-12     | type definitions bug fix |\n| 4.9.1          | 2019-06-11     | `networkStats()` bug fix windows |\n| 4.9.0          | 2019-06-03     | `graphics()` added vendor, refresh rate, current res |\n| 4.8.4          | 2019-06-03     | `vboxInfo()` fixed call parameters |\n| 4.8.3          | 2019-06-01     | `vboxInfo()` added stoppedSince, started, stopped |\n| 4.8.2          | 2019-05-31     | `dockerInfo()` changed property naming style |\n| 4.8.1          | 2019-05-31     | updated docs |\n| 4.8.0          | 2019-05-31     | added `vboxInfo()` detailed virtual box info |\n| 4.7.3          | 2019-05-30     | updated typescript typings |\n| 4.7.2          | 2019-05-30     | `versions()` added virtualbox, java popup fix macos |\n| 4.7.1          | 2019-05-29     | `memLayout()` fix macos mojave  |\n| 4.7.0          | 2019-05-29     | partial netBSD support  |\n| 4.6.1          | 2019-05-29     | get wmic path - fic windows  |\n| 4.6.0          | 2019-05-27     | added `dockerInfo()` |\n| 4.5.1          | 2019-05-17     | updated docs |\n| 4.5.0          | 2019-05-17     | `fsOpenFiles()` added open file descriptor count |\n| 4.4.1          | 2019-05-11     | updated docs |\n| 4.4.0          | 2019-05-11     | `dockerContainers()` added started, finished time |\n| 4.3.0          | 2019-05-09     | `dockerContainers()` `dockerStats()` added restartCount |\n| 4.2.1          | 2019-05-09     | `networkInterfaceDefault()` time delay fix (linux) |\n| 4.2.0          | 2019-05-09     | `osInfo()` extended service pack version (windows) |\n| 4.1.8          | 2019-05-09     | `graphics()` resolve on error (windows) |\n| 4.1.7          | 2019-05-09     | `users()` parsing fix (windows) |\n| 4.1.6          | 2019-04-24     | `memory()` swap used fix (linux) |\n| 4.1.5          | 2019-04-19     | refactored `wmic` calls to work also on Windows XP |\n| 4.1.4          | 2019-03-26     | `networkInterfaces()` speed bug (windows) |\n| 4.1.3          | 2019-03-24     | wmic path detection (windows) |\n| 4.1.2          | 2019-03-23     | updated docs |\n| 4.1.1          | 2019-03-13     | updated typescript typings |\n| 4.1.0          | 2019-03-13     | `versions()` added pip, pip3 |\n| 4.0.16         | 2019-03-12     | Happy birthday - 5th aniversary |\n| 4.0.15         | 2019-03-02     | `versions()` added java, python3, optimized gcc |\n| 4.0.14         | 2019-03-01     | updated typescript typings |\n| 4.0.13         | 2019-03-01     | `diskLayout()` added device (/dev/sda...) linux, mac |\n| 4.0.12         | 2019-03-01     | `diskLayout()` linux rewritten - better detection |\n| 4.0.11         | 2019-02-23     | `users()` fix windows (time), added @ts-check |\n| 4.0.10         | 2019-02-10     | `networkInterfaceDefault()` fix windows  |\n| 4.0.9          | 2019-02-08     | `cpu()` fix, code cleanup  |\n| 4.0.8          | 2019-02-05     | `inetLatency()` Windows fix parse chinese output |\n| 4.0.7          | 2019-02-05     | `inetLatency()` Windows fix |\n| 4.0.6          | 2019-02-04     | powershell catch error |\n| 4.0.5          | 2019-02-03     | updated docs |\n| 4.0.4          | 2019-02-03     | code cleanup, updated docs |\n| 4.0.3          | 2019-02-03     | `networkInterfaces(), chassis()` fixed two more issues |\n| 4.0.2          | 2019-02-03     | `networkInterfaces(), chassis()` fixed smaller issues |\n| 4.0.1          | 2019-02-02     | updated docs |\n| 4.0.0          | 2019-02-02     | new major version |\n| 3.54.0         | 2018-12-30     | added TypeScript type definitions |\n| 3.53.1         | 2018-12-29     | `versions()` bug fix nginx version |\n| 3.53.0         | 2018-12-29     | `versions()` added perl, python, gcc |\n| 3.52.7         | 2018-12-29     | `versions()` bug fix macOS detection |\n| 3.52.6         | 2018-12-28     | `versions()` bug fix macOS |\n| 3.52.5         | 2018-12-28     | preparing automated tests, travis-ci integration, added dev-dependencies |\n| 3.52.4         | 2018-12-27     | `graphics().controllers` bugfix linux |\n| 3.52.3         | 2018-12-27     | `os().codepage` bugfix |\n| 3.52.2         | 2018-12-17     | code cleanup |\n| 3.52.1         | 2018-12-17     | `inetChecksite()` bugfix windows |\n| 3.52.0         | 2018-12-15     | `cpu()` added physical cores, processors, socket type |\n| 3.51.4         | 2018-12-05     | `versions()` bugfix, optimization postgres |\n| 3.51.3         | 2018-11-27     | `mem()` refactoring parsing linux, code cleanup |\n| 3.51.2         | 2018-11-26     | `mem()` bugfix parsing `free` output linux |\n| 3.51.1         | 2018-11-26     | `processLoad()` bugfix windows |\n| 3.51.0         | 2018-11-25     | `processLoad()` added for windows |\n| 3.50.3         | 2018-11-25     | `processLoad()`, `services()` fixed cpu data (linux) |\n| 3.50.2         | 2018-11-23     | network mac adresses: ip support fix |\n| 3.50.1         | 2018-11-23     | `services()` added possibility to specify ALL services \"*\" for win |\n| 3.50.0         | 2018-11-23     | `services()` added possibility to specify ALL services \"*\" for linux |\n| 3.49.4         | 2018-11-21     | `battery()` timeremaining optimization (linux) thanks to Jorai Rijsdijk |\n| 3.49.3         | 2018-11-20     | `memLayout()` optimized parsing (win) |\n| 3.49.2         | 2018-11-19     | code cleanup |\n| 3.49.1         | 2018-11-19     | `cpu().brand` removed extra spaces, tabs |\n| 3.49.0         | 2018-11-19     | added system `uuid()` (os specific), `versions()` added postgresql |\n| 3.48.4         | 2018-11-18     | windows: garbled output because of codepage |\n| 3.48.3         | 2018-11-18     | `dockerContainerStats()` fixed issue `cpu_percent` win |\n| 3.48.2         | 2018-11-18     | `dockerContainerStats()` fixed issue `cpu_percent`, win exec |\n| 3.48.1         | 2018-11-17     | `docker...()` fixed issue parsing docker socket JSON |\n| 3.48.0         | 2018-11-17     | `diskLayout()` better interface detection (WIN), `osInfo()` added build, serial |\n| 3.47.0         | 2018-11-06     | `versions()` added docker, postfix |\n| 3.46.0         | 2018-11-05     | fixed issue `versions()`, added system openssl version |\n| 3.45.10        | 2018-11-03     | fixed issue `battery()`, modified `package.json` - files |\n| 3.45.9         | 2018-10-22     | fixed node 4 incompatibility |\n| 3.45.8         | 2018-10-22     | `system()` fix Raspberry Pi detection |\n| 3.45.7         | 2018-10-05     | fixed typos |\n| 3.45.6         | 2018-09-12     | `mem()` bug parsing linux in other languages |\n| 3.45.5         | 2018-09-07     | `diskLayout()` tiny bug S.M.A.R.T status windows |\n| 3.45.4         | 2018-09-06     | added icon to README.md |\n| 3.45.3         | 2018-09-06     | `diskLayout()` optimized media type detection (HD, SSD) on Windows |\n| 3.45.2         | 2018-09-05     | updated imags shields icons |\n| 3.45.1         | 2018-09-05     | updated documentation |\n| 3.45.0         | 2018-09-04     | `diskLayout()` added smartStatus |\n| 3.44.2         | 2018-08-28     | added code quality badges |\n| 3.44.1         | 2018-08-28     | code cleanup |\n| 3.44.0         | 2018-08-25     | `battery()` bugfix & added type, model, manufacturer, serial |\n| 3.43.0         | 2018-08-25     | `cpuCurrentspeed()` added cpu speed for all cores |\n| 3.42.10        | 2018-08-25     | `processes()` optimized start time parsing |\n| 3.42.9         | 2018-08-08     | `cpuTemperature()` optimized parsing |\n| 3.42.8         | 2018-08-03     | updated docs |\n| 3.42.7         | 2018-08-03     | `processes()` optimized parsing ps name |\n| 3.42.6         | 2018-08-03     | `processes()` bugfix parsing ps linux |\n| 3.42.5         | 2018-08-03     | `processes()` bugfix parsing ps linux |\n| 3.42.4         | 2018-07-09     | `cpuTemperature()` bugfix parsing negative values |\n| 3.42.3         | 2018-07-05     | `services()` bugfix not finding services with capital letters |\n| 3.42.2         | 2018-07-03     | `users()` optimized results if lack of permissions |\n| 3.42.1         | 2018-07-03     | `versions()` bugfix git version macOS |\n| 3.42.0         | 2018-06-01     | `processes()` added parent process PID |\n| 3.41.4         | 2018-05-28     | windows exec WMIC path detection (windows) in try catch |\n| 3.41.3         | 2018-05-13     | improved SunOS support `getStaticData()`, `getDynamicData()` |\n| 3.41.2         | 2018-05-13     | bugfix `system()` and `flags()` Raspberry Pi |\n| 3.41.1         | 2018-05-11     | updated docs |\n| 3.41.0         | 2018-05-11     | `system()` Raspberry Pi bugfix and extended detection, added partial `SunOS` support |\n| 3.40.1         | 2018-05-10     | bugfix `system().sku` (windows) |\n| 3.40.0         | 2018-04-29     | extended `versions()` (php, redis, mongodb) |\n| 3.39.0         | 2018-04-29     | added `versions().mysql` and `versions().nginx`, starting `SunOS` support (untested) |\n| 3.38.0         | 2018-04-06     | added `battery().acconnected` |\n| 3.37.12        | 2018-04-05     | another optimization `battery().ischarging` for macOS |\n| 3.37.11        | 2018-04-05     | another optimization `battery().ischarging` for macOS |\n| 3.37.10        | 2018-04-05     | `battery().ischarging` optimized for macOS |\n| 3.37.9         | 2018-04-03     | optimized `processes()`, bugfix `networkInterfaceDefault()` |\n| 3.37.8         | 2018-03-25     | optimized `networkDefaultInterface()` detection, fixed network `operstate` MacOS |\n| 3.37.7         | 2018-03-13     | celebrating 4th birthday |\n| 3.37.6         | 2018-03-12     | updated docs: fixed `diskLayout`and `mamlayout` |\n| 3.37.5         | 2018-03-12     | added support for `ip` instead of `ifconfig` |\n| 3.37.4         | 2018-02-22     | bugfix windows `processes()`, `disklayout()` |\n| 3.37.3         | 2018-02-19     | added windows exec `windowsHide` option |\n| 3.37.2         | 2018-02-15     | fixed bug `battery().percent` for macOS |\n| 3.37.1         | 2018-02-13     | fixed bug `battery().ischarging` for macOS |\n| 3.37.0         | 2018-02-11     | extended FreeBSD support `networkStats()` |\n| 3.36.0         | 2018-02-11     | extended FreeBSD support `networkConnections()` |\n| 3.35.0         | 2018-02-11     | extended FreeBSD support `processLoad()` |\n| 3.34.1         | 2018-02-11     | updated docs |\n| 3.34.0         | 2018-02-10     | first partial FreeBSD support |\n| 3.33.15        | 2018-01-21     | optimized OSX battery |\n| 3.33.14        | 2018-01-17     | bugfix `diskLayout()` (Windows) |\n| 3.33.13        | 2018-01-12     | bugfix `memLayout()` (Windows) |\n| 3.33.12        | 2017-12-25     | fixed typos |\n| 3.33.11        | 2017-12-17     | updated docs |\n| 3.33.10        | 2017-12-14     | bugfix WMIC path detection (windows) blockDevice parse (Windows 7) |\n| 3.33.9         | 2017-12-14     | bugfix WMIC path detection (windows) not found (Windows) |\n| 3.33.8         | 2017-12-02     | bugfix diskLayout().size (OSX) |\n| 3.33.7         | 2017-11-28     | bugfix diskLayout().size |\n| 3.33.6         | 2017-11-16     | bugfix diskLayout().size |\n| 3.33.5         | 2017-11-09     | code cleanup |\n| 3.33.4         | 2017-11-09     | bugfix graphics controller win (bytes) |\n| 3.33.3         | 2017-11-08     | bugfix cpu speed arm - type |\n| 3.33.2         | 2017-11-08     | bugfix cpu speed arm |\n| 3.33.1         | 2017-11-07     | improved bios and main board information |\n| 3.33.0         | 2017-11-07     | added bios and main board information |\n| 3.32.4         | 2017-11-02     | AMD cpu base frequencies table also for windows |\n| 3.32.3         | 2017-11-02     | code cleanup, AMD cpu base frequencies table |\n| 3.32.2         | 2017-11-01     | bugfix JSON.parse error `blockDevices()` |\n| 3.32.1         | 2017-10-23     | updated docs |\n| 3.32.0         | 2017-10-23     | extended `memLayout()` - added manufacturer |\n| 3.31.4         | 2017-10-21     | updated `README.md` |\n| 3.31.3         | 2017-10-21     | bugfix `graphics()`, fixed typo `README.md` |\n| 3.31.2         | 2017-10-16     | bugfix `graphics()` vendor and model parsing linux VGA/3D |\n| 3.31.1         | 2017-10-16     | bugfix `graphics()` vendor and model parsing linux |\n| 3.31.0         | 2017-10-15     | extended windows support `cpuFlags()` (partially) |\n| 3.30.6         | 2017-10-05     | updated community profile |\n| 3.30.5         | 2017-10-05     | bugfix `users()` - parsing values on windows |\n| 3.30.4         | 2017-10-03     | bugfix `cpuTemperature()` - parsing values on windows |\n| 3.30.3         | 2017-10-03     | bugfix `cpuTemperature()` - max value on windows |\n| 3.30.2         | 2017-09-26     | bugfix `networkInterfaces()` - optimized ip6 address selection |\n| 3.30.1         | 2017-09-21     | bugfix/typo `inetChecksite()` |\n| 3.30.0         | 2017-09-21     | extended `versions()` (added `yarn`, `gulp`, `grunt`, `tsc`, `git`) |\n| 3.29.0         | 2017-09-15     | extended windows support `services()`, optimized `diskLayout()` (OSX), bugfixes |\n| 3.28.0         | 2017-09-14     | extended windows support `processes()` |\n| 3.27.1         | 2017-09-13     | updated Raspberry version detection `system()` (Pi 3, Zero) |\n| 3.27.0         | 2017-09-12     | added raw data to `currentLoad()`, fixed `networkInterfaces()` MAC problem node 8.x |\n| 3.26.2         | 2017-09-01     | removed redundant code |\n| 3.26.1         | 2017-08-23     | fixed `cpu().speed` windows / AMD, updated docs |\n| 3.26.0         | 2017-08-21     | extended `getDynamicData()` (windows), updated docs |\n| 3.25.1         | 2017-08-07     | updated docs  |\n| 3.25.0         | 2017-08-07     | improved windows support `networkStats()`, `cpuCache()`, bug fix `getStaticData()` |\n| 3.24.0         | 2017-08-05     | extended windows support `networkStats()`, `networkConnections()` |\n| 3.23.7         | 2017-07-11     | bug fix `diskLayout()` |\n| 3.23.6         | 2017-07-11     | added `cpuFlags()` to `getStaticData()`, bug fix `graphics()` (Win) |\n| 3.23.5         | 2017-06-29     | bug fix `inetChecksite()` |\n| 3.23.4         | 2017-06-24     | bug fix `getDynamicData(), getAllData() - mem` |\n| 3.23.3         | 2017-06-23     | updated docs |\n| 3.23.2         | 2017-06-23     | bug fix `battery` (windows) |\n| 3.23.1         | 2017-06-22     | updated docs |\n| 3.23.0         | 2017-06-22     | added `memLayout`, `diskLayout`, extended windows support (`inetChecksite`)|\n| 3.22.0         | 2017-06-19     | extended windows support (`users`, `inetLatency`) |\n| 3.21.0         | 2017-06-18     | extended time (timezone), extended windows support (battery, getAll...) |\n| 3.20.1         | 2017-06-17     | updated docs |\n| 3.20.0         | 2017-06-16     | extend WIN support (cpu, cpuCache, cpuCurrentspeed, mem, networkInterfaces, docker) |\n| 3.19.0         | 2017-06-12     | OSX temperature now an optional dependency  |\n| 3.18.0         | 2017-05-27     | extended `cpu` info (vendor, family, model, stepping, revision, cache, speedmin/max) |\n| 3.17.3         | 2017-04-29     | minor fix (blockDevices data array, Windows) |\n| 3.17.2         | 2017-04-24     | minor fix (removed console.log) |\n| 3.17.1         | 2017-04-23     | fixed bugs fsSize(win), si.processes (command), si.osinfo(win) |\n| 3.17.0         | 2017-02-19     | windows support for some first functions, extended process list (linux)|\n| 3.16.0         | 2017-01-19     | blockDevices: added removable attribute + fix |\n| 3.15.1         | 2017-01-17     | minor cpuTemperature fix (OSX) |\n| 3.15.0         | 2017-01-15     | added cpuTemperature also for OSX |\n| 3.14.0         | 2017-01-14     | added currentLoad per cpu/core, cpu cache and cpu flags |\n| 3.13.0         | 2016-11-23     | added shell (returns standard shell) |\n| 3.12.0         | 2016-11-17     | refactoring and extended currentLoad |\n| 3.11.2         | 2016-11-16     | blockDevices: improved for older lsblk versions |\n| 3.11.1         | 2016-11-16     | fixed small bug in blockDevices |\n| 3.11.0         | 2016-11-15     | blockDevices for OSX and extended blockDevices |\n| 3.10.2         | 2016-11-14     | bug fix fsSize on OSX |\n| 3.10.1         | 2016-11-14     | optimization fsStats, disksIO, networkStats |\n| 3.10.0         | 2016-11-12     | added blockDevices, fixed fsSize, added file system type |\n| 3.9.0          | 2016-11-11     | added MAC address to networkInterfaces, fixed currentLoad |\n| 3.8.1          | 2016-11-04     | updated docs |\n| 3.8.0          | 2016-11-04     | added dockerContainerProcesses |\n| 3.7.1          | 2016-11-03     | code refactoring |\n| 3.7.0          | 2016-11-02     | extended docker stats, and no longer relying on curl |\n| 3.6.0          | 2016-09-14     | added versions (kernel, ssl, node, npm, pm2, ...) |\n| 3.5.1          | 2016-09-14     | bugfix graphics info |\n| 3.5.0          | 2016-09-14     | added graphics info (controller, display) |\n| 3.4.4          | 2016-09-02     | tiny fixes system.model, getDefaultNetworkInterface |\n| 3.4.3          | 2016-09-02     | tiny bug fix fsStats, disksIO OSX |\n| 3.4.2          | 2016-09-01     | improved default network interface |\n| 3.4.1          | 2016-08-30     | updated docs |\n| 3.4.0          | 2016-08-30     | rewritten processes current cpu usage |\n| 3.3.0          | 2016-08-24     | process list added to processes |\n| 3.2.1          | 2016-08-19     | updated docs, improvement system |\n| 3.2.0          | 2016-08-19     | added battery information |\n| 3.1.1          | 2016-08-18     | improved system and os detection (vm, ...), bugfix disksIO |\n| 3.1.0          | 2016-08-18     | added Docker stats |\n| 3.0.1          | 2016-08-17     | Bug-Fix disksIO, users, updated docs |\n| 3.0.0          | 2016-08-03     | new major version 3.0 |\n| 2.0.5          | 2016-03-02     | changed .gitignore |\n| 2.0.4          | 2016-02-22     | tiny correction - removed double quotes CPU brand, ... |\n| 2.0.3          | 2016-02-22     | optimized cpuCurrentspeed |\n| 2.0.2          | 2016-02-22     | added CoreOS identification |\n| 2.0.1          | 2016-01-07     | minor patch |\n| 2.0.0          | 2016-01-07     | new major version 2.0 |\n| 1.0.7          | 2015-11-27     | fixed: si.network_speed() |\n| 1.0.6          | 2015-09-17     | fixed: si.users() |\n| 1.0.5          | 2015-09-14     | updated dependencies |\n| 1.0.4          | 2015-07-18     | updated docs |\n| 1.0.3          | 2015-07-18     | bugfix cpu cores |\n| 1.0.2          | 2015-07-18     | bugfix cpu_currentspeed, cpu_temperature |\n| 1.0.1          | 2015-07-18     | documentation update |\n| 1.0.0          | 2015-07-18     | bug-fixes, version bump, published as npm component |\n| 0.0.3          | 2014-04-14     | bug-fix (cpu_speed) |\n| 0.0.2          | 2014-03-14     | Optimization FS-Speed & CPU current speed |\n| 0.0.1          | 2014-03-13     | initial release |\n\n### Major (breaking) Changes - Version 3\n\n- works only with [node.js][nodejs-url] **v4.0.0** and above (using now internal ES6 promise function, arrow functions, ...)\n- **Promises**. As you can see in the documentation, you can now also use it in a promise oriented way. But callbacks are still supported.\n- **Async/Await**. Due to the promises support, systeminformation also works perfectly with the `async/await` pattern (available in [node.js][nodejs-url] **v7.6.0** and above). See example in the docs.\n- `cpuCurrentspeed`: now returns an object with current minimal, maximal and average CPU frequencies of all cores.\n- `mem`: now supports also newer versions of `free` (Version 3.3.10 and above); extended information `avaliable` (potentially available memory)\n- `fsStats`: added information sum bytes read + write (tx) and sum transfer rate/sec (tx_sec)\n- `networkInterfaces`: now providing one more detail: internal - true if this is an internal interface like \"lo\"\n- `networkConnections`: instead of only counting sockets, you now get an array of objects with connection details for each socket (protocol, local and peer address, state)\n- `users`: now provides an array of objects with users online including detailed session information (login date/time, ip address, terminal, command)\n- `inetLatency`: now you can provide a host against which you want to test latency (default is 8.8.8.8)\n- `getDynamicData`: changed order of parameters (callback - if provided - is now the last one): `getDynamicData(srv, network, callback)`\n- `getAllData`: changed order of parameters (callback - if provided - is now the last one): `getAllData(srv, network, callback)`\n\nNew Functions\n\n- FreeBSD support: for some basic functions (new in version 3.34 ff)\n- `diskLayout`: returns hard disk layout (new in version 3.23)\n- `memLayout`: returns memory chip layout (new in version 3.23)\n- Windows support: for some basic functions (new in version 3.17 ff)\n- `cpuCache`: returns CPU cache (L1, L2, L3) sizes (new in version 3.14)\n- `cpuFlags`: returns CPU flags (new in version 3.14)\n- `currentLoad.cpus`: returns current load per cpu/core in an array (new in version 3.14)\n- `shell`: returns standard shell e.g. /bin/bash (new in version 3.13)\n- `blockDevices`: returns array of block devices like disks, partitions, raids, roms (new in version 3.10)\n- `dockerContainerProcesses`: returns processes for a specific docker container (new in version 3.8)\n- `versions`: returns object of versions - kernel, ssl, node, npm, ...(new in version 3.6)\n- `graphics`: returns arrays of graphics controllers and displays (new in version 3.5)\n- `networkInterfaceDefault`: returns default network interface (new in version 3.4)\n- `processes`: now returns also a process list with all process details (new in version 3.3)\n- `battery`: retrieves battery status and charging level (new in version 3.2)\n- `dockerContainers`: returns a list of all docker containers (new in version 3.1)\n- `dockerContainerStats`: returns statistics for a specific docker container (new in version 3.1)\n- `dockerAll`: returns a list of all docker containers including their stats (new in version 3.1)\n- `disksIO`: returns overall diskIO and IOPS values for all mounted volumes (new in version 3.0)\n\nBug Fixes / improvements\n\n- improvement `cpuTemperature` - works now also on Raspberry Pi\n- bugfix `disksIO` - on OSX read and write got mixed up\n- several bug fixes (like assess errors in `cpuCurrentspeed`, potentially incorrect results in `users`, ...)\n- testet on even more platforms and linux distributions\n\n**Be aware**, that the new version 3.x is **NOT fully backward compatible** to version 2.x ...\n\n### Major (breaking) Changes - Version 2\n\nThere had been a lot of changes in version 2 of systeminformation! Here is a quick overview (for those who come from version 1):\n\nNew Functions\n\n- `version`: returns systeminformation version (semver) of this library\n- `system`: hardware info (manufacturer, product/model name, version, serial, uuid)\n- `networkConnections`: number of active connections\n- `inetLatency`: latency in ms to external resource (internet)\n- `getStaticData`: returns on json object with static data at once (OS, CPU, Network Interfaces - they should not change until restarted)\n- `getDynamicData`: returns on json object with all dynamic data at once (e.g. for monitoring agents)\n- `getAllData`: returns on json object with all data (static and dynamic) at once\n\nRenamed Functions (now all camelCase)\n\n- `osinfo`: renamed to `osInfo`\n- `cpu_currentspeed`: renamed to `cpuCurrentspeed`\n- `cpu_temperature`: renamed to `cpuTemperature`\n- `fs_size`: renamed to `fsSize`\n- `fs_speed`: renamed to `fsStats`\n- `network_interfaces`: renamed to `networkInterfaces`\n- `network_speed`: renamed to `networkStats`\n- `network_connections`: renamed to `networkConnections`\n- `currentload`: renamed to `currentLoad`\n- `fullload`: renamed to `fullLoad`\n- `processload`: renamed to `processLoad`\n- `checksite`: renamed to `inetChecksite`\n\nFunction Changes\n\n- `cpu_temperature`/`cpuTemperature`: -1 is new default (and indicates that non sensors are installed)\n- `cpu_temperature`/`cpuTemperature`: new result `max` which returns max temperature of all cores\n- `cpu_currentspeed`/`cpuCurrentspeed`: now in GHz\n- `cpu`: splitted `manufacturer` (e.g. Intel) and `brand` (e.g. Core 2 Duo)\n- `network_speed`/`networkStats`: now better support for OS X (also support for `operstate`)\n- `network_speed`/`networkStats`: overall received and transferred bytes (rx, tx)\n- `mem`: now better support for OS X (also support for `swaptotal`, `swapused`, `swapfree`)\n- `fs_size`/`fsSize`: use-values now in % (0 - 100% instead of 0 - 1)\n- `fs_speed`/`fsStats`: now also full support for OS X\n- `checksite`/`inetChecksite`: new result structure - see command reference\n- `checksite`/`inetChecksite`: ms (former `response_ms`): -1 if not ok\n\nOther changes\n\n- osx-temperature-sensor: now added as an optional dependency\n- no more external dependencies: `request` is not longer needed\n- where possible results are now integer or float values (instead of strings) because it is easier to calculate with numbers ;-)\n\n[nodejs-url]: https://nodejs.org/en/\n", "<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <!-- Required meta tags -->\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n  <!-- CSS -->\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"https://pro.fontawesome.com/releases/v5.6.3/css/all.css\" integrity=\"sha384-LRlmVvLKVApDVGuspQFnRQJjkv0P7/YFrw84YYQtmYG4nK8c+M+NlmYDCv0rKWpG\" crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  <script src=\"main.js\"></script>\n\n  <!-- Favicon -->\n  <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"/assets/android-icon-192x192.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/assets/favicon-32x32.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"/assets/favicon-96x96.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/assets/favicon-16x16.png\">\n\n  <title>systeminformation</title>\n\n</head>\n\n<body>\n  <nav class=\"nav\">\n    <div class=\"container\">\n      <a href=\".\"><img class=\"logo float-left\" src=\"assets/logo.png\">\n        <div class=\"title float-left\">systeminformation</div>\n      </a>\n      <div class=\"text float-right github\"><a href=\"https://github.com/sebhildebrandt/systeminformation\">View on Github <i class=\"fab fa-github\"></i></a></div>\n      <div class=\"text float-right todocs\"><a href=\"./#docs\">Docs Overview</a></div>\n    </div>\n  </nav>\n\n  <section class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-12 col-md-4 col-lg-3 col-xl-2 menu\" id=\"menu\">\n      </div>\n      <div class=\"col-12 col-md-8 col-lg-9 col-xl-10 content\">\n        <div class=\"row\">\n          <div class=\"col-12 sectionheader\">\n            <div class=\"title\">Version History</div>\n            <div class=\"text\">\n              <h3>Major Changes - Version 4</h3>\n              <h4>New Functions</h4>\n              <ul>\n                <li><span class=\"code\">chassis()</span> chassis information</li>\n                <li><span class=\"code\">vboxInfo()</span> detailed virtualBox VM information</li>\n                <li><span class=\"code\">wifiNetworks()</span> detailed information about available wifi networks</li>\n              </ul>\n              <h4>Breaking Changes</h4>\n              <ul>\n                <li><span class=\"code\">networkStats()</span>: will provide an <strong>array</strong> of stats for all given interfaces. In previous versions only one interface was provided as a parameter. Pass '*' for all interfaces</li>\n                <li><span class=\"code\">networkStats()</span>: <span class=\"code\">rx</span> and <span class=\"code\">tx</span> changed to <span class=\"code\">rx_bytes</span> and <span class=\"code\">tx_bytes</span></li>\n                <li><span class=\"code\">dockerContainerStats()</span> will provide an <strong>array</strong> of stats for all given docker containers. In previous versions only one interface was provided as a parameter. Pass '*' for all docker containers</li>\n              </ul>\n              <h4>Other Changes</h4>\n              <ul>\n                <li><span class=\"code\">system()</span>: optimized system detection (e.g. new Raspberry Pi models, ...)</li>\n                <li><span class=\"code\">system(), bios(), baseboard()</span>: information also as non-root (linux)</li>\n                <li><span class=\"code\">graphics()</span>: added pip, pip3, virtualBox, </li>\n                <li><span class=\"code\">versions()</span>: better controller and display detection, fixes</li>\n                <li><span class=\"code\">networkInterfaces()</span>: optimization, fixes</li>\n                <li><span class=\"code\">networkStats()</span> added <span class=\"code\">operstate</span>, <span class=\"code\">type</span>, <span class=\"code\">duplex</span>, <span class=\"code\">mtu</span>, <span class=\"code\">speed</span>, <span class=\"code\">carrierChanges</span></li>\n                <li>added TypeScript definitions </li>\n              </ul>\n              <p><strong>Be aware</strong>, that the new version 4.x is <strong>NOT fully backward compatible</strong> to version 3.x ...</p>\n\n              <h3>Major (breaking) Changes - Version 3</h3>\n              <ul>\n                <li>works only with <span class=\"code\">node.js</span> v4.0.0 and above (using now internal ES6 promise function, arrow functions, ...)</li>\n                <li><strong>Promises</strong>. As you can see in the documentation, you can now also use it in a promise oriented way. But callbacks are still supported.</li>\n                <li><strong>Async/Await</strong>. Due to the promises support, systeminformation also works perfectly with the `async/await` pattern (available in <span class=\"code\">node.js</span> <strong>v7.6.0</strong> and above). See example in the docs.</li>\n              </ul>\n              <h3>Full version history</h3>\n              <table class=\"table table-sm table-bordered table-striped\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Version</th>\n                    <th scope=\"col\">Date</th>\n                    <th scope=\"col\">Comment</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <th scope=\"row\">4.30.4</th>\n                    <td>2020-11-25</td>\n                    <td>reverted Object.freeze because it broke some projects</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.30.3</th>\n                    <td>2020-11-25</td>\n                    <td>security update (prototype pollution prevention) Object.freeze</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.30.2</th>\n                    <td>2020-11-25</td>\n                    <td>security update (prototype pollution prevention)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.30.1</th>\n                    <td>2020-11-12</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.30.0</th>\n                    <td>2020-11-11</td>\n                    <td><span class=\"code\">get()</span> added possibility to provide parameters</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.29.3</th>\n                    <td>2020-11-09</td>\n                    <td><span class=\"code\">blockdevices()</span> catch error adapted</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.29.2</th>\n                    <td>2020-11-09</td>\n                    <td><span class=\"code\">blockdevices()</span> catch error</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.29.1</th>\n                    <td>2020-11-08</td>\n                    <td><span class=\"code\">system()</span> better parsing Raspberry Pi revision codes</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.29.0</th>\n                    <td>2020-11-08</td>\n                    <td><span class=\"code\">fsSize()</span> correct fs type detection macOS (HFS, APFS, NFS)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.28.1</th>\n                    <td>2020-11-05</td>\n                    <td>code cleanup, removing debug console.log()</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.28.0</th>\n                    <td>2020-11-04</td>\n                    <td><span class=\"code\">graphics()</span> added deviceName (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.11</th>\n                    <td>2020-10-26</td>\n                    <td><span class=\"code\">inetChecksite()</span> fixed vulnerability: command injection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.10</th>\n                    <td>2020-10-16</td>\n                    <td><span class=\"code\">dockerContainers()</span> resolved hanging issue</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.9</th>\n                    <td>2020-10-13</td>\n                    <td><span class=\"code\">networkInterfaces()</span> loopback internal detection (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.8</th>\n                    <td>2020-10-08</td>\n                    <td>windows codepages partial fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.7</th>\n                    <td>2020-10-05</td>\n                    <td>updated typescript typings, minor fixes</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.6</th>\n                    <td>2020-10-02</td>\n                    <td><span class=\"code\">get()</span> fixed when results are in arrays</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.5</th>\n                    <td>2020-09-18</td>\n                    <td><span class=\"code\">cpuTemperature()</span> fixed try catch (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.4</th>\n                    <td>2020-09-16</td>\n                    <td><span class=\"code\">networkInterfaceDefault()</span> optimization (macOS)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.3</th>\n                    <td>2020-08-26</td>\n                    <td>updated typescript typings</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.2</th>\n                    <td>2020-08-26</td>\n                    <td>fixed issue breaking node v4 compatibility</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.1</th>\n                    <td>2020-08-25</td>\n                    <td><span class=\"code\">networkStats()</span> fixed packages dropped (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.0</th>\n                    <td>2020-08-24</td>\n                    <td><span class=\"code\">observe()</span> added function to observe/watch system parameters</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.12</th>\n                    <td>2020-08-21</td>\n                    <td><span class=\"code\">versions()</span> fixed issue windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.11</th>\n                    <td>2020-08-20</td>\n                    <td><span class=\"code\">cpuTemperature()</span> fixed issue windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.10</th>\n                    <td>2020-07-16</td>\n                    <td><span class=\"code\">networkStats()</span> fixed issue blocking windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.9</th>\n                    <td>2020-06-06</td>\n                    <td><span class=\"code\">networkStats()</span> fixed comparison issue windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.8</th>\n                    <td>2020-06-06</td>\n                    <td><span class=\"code\">networkInterfaces()</span> fixed caching</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.7</th>\n                    <td>2020-06-06</td>\n                    <td><span class=\"code\">cpuTemperature()</span> fixed raspberry pi sensors issue</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.6</th>\n                    <td>2020-06-03</td>\n                    <td><span class=\"code\">diskLayout()</span> fixed issue</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.5</th>\n                    <td>2020-05-27</td>\n                    <td><span class=\"code\">cpuTemperature()</span> optimizes scanning AMD linux sensors</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.4</th>\n                    <td>2020-05-21</td>\n                    <td><span class=\"code\">cpuTemperature()</span> fix (BSD), code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.3</th>\n                    <td>2020-05-20</td>\n                    <td>Updated documentation</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.2</th>\n                    <td>2020-05-19</td>\n                    <td><span class=\"code\">processes()</span> memory leak fix, security issue fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.1</th>\n                    <td>2020-05-13</td>\n                    <td>code cleanup </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.0</th>\n                    <td>2020-05-12</td>\n                    <td><span class=\"code\">diskLayout()</span> added full smart data (where supported) </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.25.2</th>\n                    <td>2020-05-12</td>\n                    <td><span class=\"code\">getDynamicData()</span> added wifiNetworks() </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.25.1</th>\n                    <td>2020-05-07</td>\n                    <td><span class=\"code\">get()</span> minor bounds test fix, updated docs </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.25.0</th>\n                    <td>2020-05-07</td>\n                    <td><span class=\"code\">get()</span> added function to get partial system info </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.24.2</th>\n                    <td>2020-05-06</td>\n                    <td><span class=\"code\">cpu()</span> fix BSD, <span class=\"code\">networkStats()</span> fix BSD </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.24.1</th>\n                    <td>2020-05-03</td>\n                    <td><span class=\"code\">processes()</span> fix parsing command and params (linux, macOS) </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.24.0</th>\n                    <td>2020-05-01</td>\n                    <td><span class=\"code\">networkInterfaces()</span> added netmask ip4 and ip6</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.10</th>\n                    <td>2020-05-01</td>\n                    <td><span class=\"code\">cpuTemperature()</span> optimized parsing linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.9</th>\n                    <td>2020-04-29</td>\n                    <td><span class=\"code\">currentLoad()</span> workarround for no os.cpus info</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.8</th>\n                    <td>2020-04-26</td>\n                    <td><span class=\"code\">getMacAddresses()</span> fix added try catch</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.7</th>\n                    <td>2020-04-26</td>\n                    <td><span class=\"code\">getCpuCurrentSpeedSync()</span> workarround fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.6</th>\n                    <td>2020-04-25</td>\n                    <td><span class=\"code\">networkGatewayDefault()</span> bugfix no interfaces</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.5</th>\n                    <td>2020-20-04</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.4</th>\n                    <td>2020-04-20</td>\n                    <td><span class=\"code\">users()</span> optimized parseDateTime function</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.3</th>\n                    <td>2020-04-09</td>\n                    <td>refactored to avoid <span class=\"code\">cat</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.2</th>\n                    <td>2020-04-08</td>\n                    <td><span class=\"code\">cpu()</span> fixed getting base speed Ryzen CPUs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.1</th>\n                    <td>2020-03-11</td>\n                    <td><span class=\"code\">diskLayout()</span> optimized detection (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.0</th>\n                    <td>2020-03-08</td>\n                    <td><span class=\"code\">versions()</span> added param to specify which program/lib versions to detect</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.7</th>\n                    <td>2020-03-08</td>\n                    <td><span class=\"code\">diskLayout()</span> fixed detection (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.6</th>\n                    <td>2020-03-08</td>\n                    <td><span class=\"code\">network()</span> fixed DHCP detection (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.5</th>\n                    <td>2020-03-04</td>\n                    <td><span class=\"code\">graphics()</span> fixed vram (macOS)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.4</th>\n                    <td>2020-03-01</td>\n                    <td><span class=\"code\">versions()</span> added dotnet, fix typings</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.3</th>\n                    <td>2020-02-20</td>\n                    <td><span class=\"code\">memLayout()</span> code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.2</th>\n                    <td>2020-02-19</td>\n                    <td><span class=\"code\">memLayout()</span> raspberry PI mem voltage fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.1</th>\n                    <td>2020-02-17</td>\n                    <td><span class=\"code\">memLayout()</span> raspberry PI support</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.0</th>\n                    <td>2020-02-17</td>\n                    <td><span class=\"code\">services()</span> added pids (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.21.3</th>\n                    <td>2020-02-16</td>\n                    <td><span class=\"code\">versions()</span> fixed versions mysql (macOS)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.21.2</th>\n                    <td>2020-02-11</td>\n                    <td><span class=\"code\">networkConnections()</span> fixed linux (debian) issue</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.21.1</th>\n                    <td>2020-01-31</td>\n                    <td><span class=\"code\">networkGatewayDefault()</span> fixed windows 7 issue</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.21.0</th>\n                    <td>2020-01-27</td>\n                    <td>added <span class=\"code\">npx</span> compatibility</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.20.1</th>\n                    <td>2020-01-26</td>\n                    <td><span class=\"code\">battery()</span> code refactoring, cleanup, updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.20.0</th>\n                    <td>2020-01-25</td>\n                    <td><span class=\"code\">battery()</span> added designcapacity, voltage, unit</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.19.4</th>\n                    <td>2020-01-24</td>\n                    <td><span class=\"code\">mem()</span> prevent log messages</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.19.3</th>\n                    <td>2020-01-24</td>\n                    <td><span class=\"code\">memLayout()</span> bank info fix macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.19.2</th>\n                    <td>2020-01-19</td>\n                    <td><span class=\"code\">cpu()</span> multi-processor fix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.19.1</th>\n                    <td>2020-01-14</td>\n                    <td><span class=\"code\">osInfo()</span> uefi fix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.19.0</th>\n                    <td>2020-01-12</td>\n                    <td><span class=\"code\">osInfo()</span> uefi (OS uses UEFI on startup)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.18.3</th>\n                    <td>2020-01-10</td>\n                    <td><span class=\"code\">fsSize()</span> fix excluding loop/snap devices</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.18.2</th>\n                    <td>2020-01-10</td>\n                    <td><span class=\"code\">memLayout()</span> fix memsize linux (modules >= 32 GB)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.18.1</th>\n                    <td>2020-01-07</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.18.0</th>\n                    <td>2020-01-07</td>\n                    <td><span class=\"code\">networkInterfaces()</span> added dhcp for mac OS, added dhcp linux fallback</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.17.3</th>\n                    <td>2020-01-05</td>\n                    <td>code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.17.2</th>\n                    <td>2020-01-05</td>\n                    <td><span class=\"code\">cpu().speed</span> AMD base frequency and fix (0.00)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.17.1</th>\n                    <td>2020-01-04</td>\n                    <td><span class=\"code\">fsSize()</span> alpine linux support</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.17.0</th>\n                    <td>2020-01-04</td>\n                    <td><span class=\"code\">networkInterfaces()</span> added dhcp, dnsSuffix, ieee8021xAuth, ieee8021xState</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.16.1</th>\n                    <td>2020-01-01</td>\n                    <td><span class=\"code\">networkInterfaces()</span> bug fix (mac OS)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.16.0</th>\n                    <td>2019-11-27</td>\n                    <td><span class=\"code\">networkGatewayDefault()</span> added</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.15.3</th>\n                    <td>2019-11-10</td>\n                    <td><span class=\"code\">type definitions</span> and docs update</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.15.2</th>\n                    <td>2019-11-10</td>\n                    <td><span class=\"code\">mem()</span> improved calculation linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.15.1</th>\n                    <td>2019-11-10</td>\n                    <td><span class=\"code\">diskLayout()</span> added support for older lsblk versions (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.15.0</th>\n                    <td>2019-11-10</td>\n                    <td><span class=\"code\">cpu()</span> added governor (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.17</th>\n                    <td>2019-10-22</td>\n                    <td><span class=\"code\">graphics()</span> improved display detection (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.16</th>\n                    <td>2019-10-19</td>\n                    <td><span class=\"code\">graphics()</span> improved display detection (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.15</th>\n                    <td>2019-10-18</td>\n                    <td><span class=\"code\">graphics()</span> fallback display detection (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.14</th>\n                    <td>2019-10-18</td>\n                    <td><span class=\"code\">powershell()</span> fixed error handling (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.13</th>\n                    <td>2019-10-15</td>\n                    <td><span class=\"code\">networkConnections()</span> fixed parsing (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.12</th>\n                    <td>2019-10-14</td>\n                    <td><span class=\"code\">getCpu()</span> fixed multi socket detection (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.11</th>\n                    <td>2019-10-01</td>\n                    <td><span class=\"code\">type definitions</span> bug dockerInfo</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.10</th>\n                    <td>2019-10-01</td>\n                    <td><span class=\"code\">type definitions</span> bug fix memLayout</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.9</th>\n                    <td>2019-10-01</td>\n                    <td><span class=\"code\">processLoad()</span> fix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.8</th>\n                    <td>2019-08-23</td>\n                    <td><span class=\"code\">parseDateTime()</span> fix coding error</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.7</th>\n                    <td>2019-08-22</td>\n                    <td><span class=\"code\">battery()</span> windows acconnected improvement</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.6</th>\n                    <td>2019-08-22</td>\n                    <td><span class=\"code\">users()</span> improved date time parsing</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.5</th>\n                    <td>2019-08-22</td>\n                    <td><span class=\"code\">fsSize()</span> fix windows size as number</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.4</th>\n                    <td>2019-07-20</td>\n                    <td><span class=\"code\">versions()</span> fix pip, pip3</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.3</th>\n                    <td>2019-07-09</td>\n                    <td><span class=\"code\">system()</span> sku fix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.2</th>\n                    <td>2019-07-07</td>\n                    <td><span class=\"code\">networkConnections()</span> pid linux fix NAN</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.1</th>\n                    <td>2019-07-04</td>\n                    <td><span class=\"code\">graphics()</span> added display position windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.0</th>\n                    <td>2019-07-03</td>\n                    <td><span class=\"code\">processes()</span> added process params and path</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.13.2</th>\n                    <td>2019-07-02</td>\n                    <td><span class=\"code\">versions()</span> fix getting all versions</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.13.1</th>\n                    <td>2019-07-01</td>\n                    <td><span class=\"code\">versions()</span> gcc fix mac OS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.13.0</th>\n                    <td>2019-07-01</td>\n                    <td><span class=\"code\">networkConnections()</span> added PID, process</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.12.2</th>\n                    <td>2019-06-24</td>\n                    <td><span class=\"code\">system()</span> added Raspberry PI 4 detection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.12.1</th>\n                    <td>2019-06-24</td>\n                    <td><span class=\"code\">networkInterface()</span> virtual interfaces mac OS<br>\n                      <span class=\"code\">networkInterfaceDefault()</span> optimization windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.12.0</th>\n                    <td>2019-06-21</td>\n                    <td><span class=\"code\">networkInterface()</span> added property virtual</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.6</th>\n                    <td>2019-06-19</td>\n                    <td><span class=\"code\">util</span> bug fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.5</th>\n                    <td>2019-06-19</td>\n                    <td><span class=\"code\">dockerAll()</span> bug fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.4</th>\n                    <td>2019-06-17</td>\n                    <td><span class=\"code\">type definitions</span> bug fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.3</th>\n                    <td>2019-06-16</td>\n                    <td><span class=\"code\">graphics()</span> optimization windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.2</th>\n                    <td>2019-06-16</td>\n                    <td><span class=\"code\">wifiNetworks()</span> bug fixes</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.1</th>\n                    <td>2019-06-15</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.0</th>\n                    <td>2019-06-14</td>\n                    <td><span class=\"code\">wifiNetworks()</span> added available wifi networks</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.10.0</th>\n                    <td>2019-06-14</td>\n                    <td><span class=\"code\">graphics()</span> rewrite windows, added featues</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.9.2</th>\n                    <td>2019-06-12</td>\n                    <td><span class=\"code\">type definitions</span> bug fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.9.1</th>\n                    <td>2019-06-11</td>\n                    <td><span class=\"code\">networkStats()</span> bugfix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.9.0</th>\n                    <td>2019-06-03</td>\n                    <td><span class=\"code\">graphics()</span> added vendor, refresh rate, current resolution</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.8.4</th>\n                    <td>2019-06-03</td>\n                    <td><span class=\"code\">vboxInfo()</span> fixed call parameters</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.8.3</th>\n                    <td>2019-05-31</td>\n                    <td><span class=\"code\">vboxInfo()</span> added stoppedSince, started, stopped</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.8.2</th>\n                    <td>2019-05-31</td>\n                    <td><span class=\"code\">dockerInfo()</span> changed property naming style</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.8.1</th>\n                    <td>2019-05-31</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.8.0</th>\n                    <td>2019-05-31</td>\n                    <td><span class=\"code\">vboxInfo()</span> added virtualbox detailed VM info</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.7.3</th>\n                    <td>2019-05-30</td>\n                    <td>updated typescript typings</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.7.2</th>\n                    <td>2019-05-30</td>\n                    <td><span class=\"code\">versions()</span> added virtualbox</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.7.1</th>\n                    <td>2019-05-29</td>\n                    <td><span class=\"code\">memLayout()</span> fix mac OS mojave</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.7.0</th>\n                    <td>2019-05-29</td>\n                    <td>partial NetBSD support</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.6.1</th>\n                    <td>2019-05-29</td>\n                    <td><span class=\"code\">wmic</span> path fix - windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.6.0</th>\n                    <td>2019-05-27</td>\n                    <td><span class=\"code\">dockerInfo()</span> added dockerInfo</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.5.1</th>\n                    <td>2019-05-17</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.5.0</th>\n                    <td>2019-05-17</td>\n                    <td><span class=\"code\">fsOpenFiles()</span> added open file descriptor count</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.4.1</th>\n                    <td>2019-05-11</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.4.0</th>\n                    <td>2019-05-11</td>\n                    <td><span class=\"code\">dockerContainers()</span> added started, finished time</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.3.0</th>\n                    <td>2019-05-09</td>\n                    <td><span class=\"code\">dockerContainers() dockerStats()</span> added restartCount</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.2.1</th>\n                    <td>2019-05-09</td>\n                    <td><span class=\"code\">networkInterfaceDefault()</span> time delay fix (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.2.0</th>\n                    <td>2019-05-09</td>\n                    <td><span class=\"code\">osInfo()</span> extended service pack version (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.8</th>\n                    <td>2019-05-09</td>\n                    <td><span class=\"code\">graphics()</span> resolve on error (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.7</th>\n                    <td>2019-05-09</td>\n                    <td><span class=\"code\">users()</span> parsing fix (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.6</th>\n                    <td>2019-04-24</td>\n                    <td><span class=\"code\">memory()</span> swap used fix (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.5</th>\n                    <td>2019-04-19</td>\n                    <td>refactored <span class=\"code\">wmic</span> calls to work also on Windows XP</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.4</th>\n                    <td>2019-03-26</td>\n                    <td><span class=\"code\">networkInterfaces()</span> speed bug (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.3</th>\n                    <td>2019-03-24</td>\n                    <td>wmic path detection (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.2</th>\n                    <td>2019-03-23</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.1</th>\n                    <td>2019-03-13</td>\n                    <td>updated typescript typings</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.0</th>\n                    <td>2019-03-13</td>\n                    <td><span class=\"code\">versions()</span>added pip, pip3</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.16</th>\n                    <td>2019-03-12</td>\n                    <td>Happy birthday - 5th aniversary</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.15</th>\n                    <td>2019-03-02</td>\n                    <td><span class=\"code\">versions()</span>added java, python3, optimized gcc</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.14</th>\n                    <td>2019-03-01</td>\n                    <td>updated typescript typings</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.13</th>\n                    <td>2019-03-01</td>\n                    <td><span class=\"code\">diskLayout()</span> added device (/dev/sda...) linux, mac</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.12</th>\n                    <td>2019-03-01</td>\n                    <td><span class=\"code\">diskLayout()</span> linux rewritten - better detection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.11</th>\n                    <td>2019-02-23</td>\n                    <td><span class=\"code\">users()</span> fix windows (time), added @ts-check</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.10</th>\n                    <td>2019-02-10</td>\n                    <td><span class=\"code\">networkInterfaceDefault()</span> fix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.9</th>\n                    <td>2019-02-08</td>\n                    <td><span class=\"code\">cpu()</span> fix, code clean up</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.8</th>\n                    <td>2019-02-05</td>\n                    <td><span class=\"code\">inetLatency()</span> latency fix parse chinese output</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.7</th>\n                    <td>2019-02-05</td>\n                    <td><span class=\"code\">inetLatency()</span> latency Windows fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.6</th>\n                    <td>2019-02-04</td>\n                    <td>powershell catch error</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.5</th>\n                    <td>2019-02-03</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.4</th>\n                    <td>2019-02-03</td>\n                    <td>code cleanup, updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.3</th>\n                    <td>2019-02-03</td>\n                    <td><span class=\"code\">networkInterfaces(), chassis()</span> fixed two more issues</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.2</th>\n                    <td>2019-02-03</td>\n                    <td><span class=\"code\">networkInterfaces(), chassis()</span> fixed smaller issues</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.1</th>\n                    <td>2019-02-02</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.0</th>\n                    <td>2019-02-02</td>\n                    <td>new major version 4</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.54.0</th>\n                    <td>2018-12-30</td>\n                    <td>added TypeScript type definitions</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.53.1</th>\n                    <td>2018-12-29</td>\n                    <td><span class=\"code\">versions()</span> bug fix nginx version</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.53.0</th>\n                    <td>2018-12-29</td>\n                    <td><span class=\"code\">versions()</span> added perl, python, gcc</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.7</th>\n                    <td>2018-12-29</td>\n                    <td><span class=\"code\">versions()</span> bug fix macOS detection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.6</th>\n                    <td>2018-12-28</td>\n                    <td><span class=\"code\">versions()</span> bug fix macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.5</th>\n                    <td>2018-12-28</td>\n                    <td>preparing automated tests, travis-ci integration, added dev-dependencies</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.4</th>\n                    <td>2018-12-27</td>\n                    <td><span class=\"code\">graphics().controllers</span> bugfix linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.3</th>\n                    <td>2018-12-27</td>\n                    <td><span class=\"code\">os().codepage</span> bugfix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.2</th>\n                    <td>2018-12-17</td>\n                    <td>code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.1</th>\n                    <td>2018-12-17</td>\n                    <td><span class=\"code\">inetChecksite()</span> bugfix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.0</th>\n                    <td>2018-12-15</td>\n                    <td><span class=\"code\">cpu()</span> added physical cores, processors, socket type</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.51.4</th>\n                    <td>2018-12-05</td>\n                    <td><span class=\"code\">versions()</span> bugfix, optimization postgres</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.51.3</th>\n                    <td>2018-11-27</td>\n                    <td><span class=\"code\">mem()</span> refactoring parsing linux, code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.51.2</th>\n                    <td>2018-11-26</td>\n                    <td><span class=\"code\">mem()</span> bugfix parsing <span class=\"code\">free</span> output linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.51.1</th>\n                    <td>2018-11-26</td>\n                    <td><span class=\"code\">processLoad()</span> bugfix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.51.0</th>\n                    <td>2018-11-25</td>\n                    <td><span class=\"code\">processLoad()</span> added for windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.50.3</th>\n                    <td>2018-11-25</td>\n                    <td><span class=\"code\">processLoad()</span>, <span class=\"code\">services()</span> fixed cpu data (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.50.2</th>\n                    <td>2018-11-23</td>\n                    <td>network mac adresses: ip support fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.50.1</th>\n                    <td>2018-11-23</td>\n                    <td><span class=\"code\">services()</span> added possibility to specify ALL services \"*\" for win</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.50.0</th>\n                    <td>2018-11-23</td>\n                    <td><span class=\"code\">services()</span> added possibility to specify ALL services \"*\" for linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.49.4</th>\n                    <td>2018-11-21</td>\n                    <td><span class=\"code\">battery()</span> timeremaining optimization (linux) thanks to Jorai Rijsdijk</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.49.3</th>\n                    <td>2018-11-20</td>\n                    <td><span class=\"code\">memLayout()</span> optimized parsing (win)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.49.2</th>\n                    <td>2018-11-19</td>\n                    <td>code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.49.1</th>\n                    <td>2018-11-19</td>\n                    <td><span class=\"code\">cpu().brand</span> removed extra spaces, tabs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.49.0</th>\n                    <td>2018-11-19</td>\n                    <td>added system <span class=\"code\">uuid()</span> (os specific), <span class=\"code\">versions()</span> added postgresql</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.48.4</th>\n                    <td>2018-11-18</td>\n                    <td>windows: garbled output because of codepage</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.48.3</th>\n                    <td>2018-11-18</td>\n                    <td><span class=\"code\">dockerContainerStats()</span> fixed issue <span class=\"code\">cpu_percent</span> win</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.48.2</th>\n                    <td>2018-11-18</td>\n                    <td><span class=\"code\">dockerContainerStats()</span> fixed issue <span class=\"code\">cpu_percent</span>, win exec</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.48.1</th>\n                    <td>2018-11-17</td>\n                    <td><span class=\"code\">docker...()</span> fixed issue parsing docker socket JSON</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.48.0</th>\n                    <td>2018-11-17</td>\n                    <td><span class=\"code\">diskLayout()</span> better interface detection (WIN), <span class=\"code\">osInfo()</span> added build, serial</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.47.0</th>\n                    <td>2018-11-06</td>\n                    <td><span class=\"code\">versions()</span> added docker, postfix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.46.0</th>\n                    <td>2018-11-05</td>\n                    <td>fixed issue <span class=\"code\">versions()</span>, added system openssl version</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.10</th>\n                    <td>2018-11-03</td>\n                    <td>fixed issue <span class=\"code\">battery()</span>, modified <span class=\"code\">package.json</span> - files</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.9</th>\n                    <td>2018-10-22</td>\n                    <td>fixed node 4 incompatibility</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.8</th>\n                    <td>2018-10-22</td>\n                    <td><span class=\"code\">system()</span> fix Raspberry Pi detection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.7</th>\n                    <td>2018-10-05</td>\n                    <td>fixed typos</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.6</th>\n                    <td>2018-09-12</td>\n                    <td><span class=\"code\">mem()</span> bug parsing linux in other languages</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.5</th>\n                    <td>2018-09-07</td>\n                    <td><span class=\"code\">diskLayout()</span> tiny bug S.M.A.R.T status windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.4</th>\n                    <td>2018-09-06</td>\n                    <td>added icon to README.md</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.3</th>\n                    <td>2018-09-06</td>\n                    <td><span class=\"code\">diskLayout()</span> optimized media type detection (HD, SSD) on Windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.2</th>\n                    <td>2018-09-05</td>\n                    <td>updated imags shields icons</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.1</th>\n                    <td>2018-09-05</td>\n                    <td>updated documentation</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.0</th>\n                    <td>2018-09-04</td>\n                    <td><span class=\"code\">diskLayout()</span> added smartStatus</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.44.2</th>\n                    <td>2018-08-28</td>\n                    <td>added code quality badges</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.44.1</th>\n                    <td>2018-08-28</td>\n                    <td>code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.44.0</th>\n                    <td>2018-08-25</td>\n                    <td><span class=\"code\">battery()</span> bugfix & added type, model, manufacturer, serial</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.43.0</th>\n                    <td>2018-08-25</td>\n                    <td><span class=\"code\">cpuCurrentspeed()</span> added cpu speed for all cores</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.10</th>\n                    <td>2018-08-25</td>\n                    <td><span class=\"code\">processes()</span> optimized start time parsing</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.9</th>\n                    <td>2018-08-08</td>\n                    <td><span class=\"code\">cpuTemperature()</span> optimized parsing</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.8</th>\n                    <td>2018-08-03</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.7</th>\n                    <td>2018-08-03</td>\n                    <td><span class=\"code\">processes()</span> optimized parsing ps name</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.6</th>\n                    <td>2018-08-03</td>\n                    <td><span class=\"code\">processes()</span> bugfix parsing ps linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.5</th>\n                    <td>2018-08-03</td>\n                    <td><span class=\"code\">processes()</span> bugfix parsing ps linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.4</th>\n                    <td>2018-07-09</td>\n                    <td><span class=\"code\">cpuTemperature()</span> bugfix parsing negative values</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.3</th>\n                    <td>2018-07-05</td>\n                    <td><span class=\"code\">services()</span> bugfix not finding services with capital letters</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.2</th>\n                    <td>2018-07-03</td>\n                    <td><span class=\"code\">users()</span> optimized results if lack of permissions</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.1</th>\n                    <td>2018-07-03</td>\n                    <td><span class=\"code\">versions()</span> bugfix git version macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.0</th>\n                    <td>2018-06-01</td>\n                    <td><span class=\"code\">processes()</span> added parent process PID</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.41.4</th>\n                    <td>2018-05-28</td>\n                    <td>windows exec WMIC in try catch</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.41.3</th>\n                    <td>2018-05-13</td>\n                    <td>improved SunOS support <span class=\"code\">getStaticData()</span>, <span class=\"code\">getDynamicData()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.41.2</th>\n                    <td>2018-05-13</td>\n                    <td>bugfix <span class=\"code\">system()</span> and <span class=\"code\">flags()</span> Raspberry Pi</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.41.1</th>\n                    <td>2018-05-11</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.41.0</th>\n                    <td>2018-05-11</td>\n                    <td><span class=\"code\">system()</span> Raspberry Pi bugfix and extended detection, added partial <span class=\"code\">SunOS</span> support</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.40.1</th>\n                    <td>2018-05-10</td>\n                    <td>bugfix <span class=\"code\">system().sku</span> (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.40.0</th>\n                    <td>2018-04-29</td>\n                    <td>extended <span class=\"code\">versions()</span> (php, redis, mongodb)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.39.0</th>\n                    <td>2018-04-29</td>\n                    <td>added <span class=\"code\">versions().mysql</span> and <span class=\"code\">versions().nginx</span>, starting <span class=\"code\">SunOS</span>> support (untested)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.38.0</th>\n                    <td>2018-04-06</td>\n                    <td>added <span class=\"code\">battery().acconnected</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.12</th>\n                    <td>2018-04-05</td>\n                    <td>another optimization <span class=\"code\">battery().ischarging</span> for macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.11</th>\n                    <td>2018-04-05</td>\n                    <td>another optimization <span class=\"code\">battery().ischarging</span> for macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.10</th>\n                    <td>2018-04-05</td>\n                    <td><span class=\"code\">battery().ischarging</span> optimized for macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.9</th>\n                    <td>2018-04-03</td>\n                    <td>optimized <span class=\"code\">processes()</span>, bugfix <span class=\"code\">networkInterfaceDefault()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.8</th>\n                    <td>2018-03-25</td>\n                    <td>optimized <span class=\"code\">networkDefaultInterface()</span> detection, fixed network <span class=\"code\">operstate</span>> MacOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.7</th>\n                    <td>2018-03-13</td>\n                    <td>celebrating 4th birthday</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.6</th>\n                    <td>2018-03-12</td>\n                    <td>updated docs: fixed <span class=\"code\">diskLayout</span>>and <span class=\"code\">mamlayout</span>></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.5</th>\n                    <td>2018-03-12</td>\n                    <td>added support for <span class=\"code\">ip</span>> instead of <span class=\"code\">ifconfig</span>></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.4</th>\n                    <td>2018-02-22</td>\n                    <td>bugfix windows <span class=\"code\">processes()</span>, <span class=\"code\">disklayout()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.3</th>\n                    <td>2018-02-19</td>\n                    <td>added windows exec <span class=\"code\">windowsHide</span> option</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.2</th>\n                    <td>2018-02-15</td>\n                    <td>fixed bug <span class=\"code\">battery().percent</span> for macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.1</th>\n                    <td>2018-02-13</td>\n                    <td>fixed bug <span class=\"code\">battery().ischarging</span> for macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.0</th>\n                    <td>2018-02-11</td>\n                    <td>extended FreeBSD support <span class=\"code\">networkStats()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.36.0</th>\n                    <td>2018-02-11</td>\n                    <td>extended FreeBSD support <span class=\"code\">networkConnections()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.35.0</th>\n                    <td>2018-02-11</td>\n                    <td>extended FreeBSD support <span class=\"code\">processLoad()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.34.1</th>\n                    <td>2018-02-11</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.34.0</th>\n                    <td>2018-02-10</td>\n                    <td>first partial FreeBSD support</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.15</th>\n                    <td>2018-01-21</td>\n                    <td>optimized OSX battery</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.14</th>\n                    <td>2018-01-17</td>\n                    <td>bugfix <span class=\"code\">diskLayout()</span> (Windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.13</th>\n                    <td>2018-01-12</td>\n                    <td>bugfix <span class=\"code\">memLayout()</span> (Windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.12</th>\n                    <td>2017-12-25</td>\n                    <td>fixed typos</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.11</th>\n                    <td>2017-12-17</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.10</th>\n                    <td>2017-12-14</td>\n                    <td>bugfix WMIC blockDevice parse (Windows 7)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.9</th>\n                    <td>2017-12-14</td>\n                    <td>bugfix WMIC not found (Windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.8</th>\n                    <td>2017-12-02</td>\n                    <td>bugfix diskLayout().size (OSX)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.7</th>\n                    <td>2017-11-28</td>\n                    <td>bugfix diskLayout().size</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.6</th>\n                    <td>2017-11-16</td>\n                    <td>bugfix diskLayout().size</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.5</th>\n                    <td>2017-11-09</td>\n                    <td>code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.4</th>\n                    <td>2017-11-09</td>\n                    <td>bugfix graphics controller win (bytes)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.3</th>\n                    <td>2017-11-08</td>\n                    <td>bugfix cpu speed arm - type</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.2</th>\n                    <td>2017-11-08</td>\n                    <td>bugfix cpu speed arm</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.1</th>\n                    <td>2017-11-07</td>\n                    <td>improved bios and main board information</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.0</th>\n                    <td>2017-11-07</td>\n                    <td>added bios and main board information</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.32.4</th>\n                    <td>2017-11-02</td>\n                    <td>AMD cpu base frequencies table also for windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.32.3</th>\n                    <td>2017-11-02</td>\n                    <td>code cleanup, AMD cpu base frequencies table</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.32.2</th>\n                    <td>2017-11-01</td>\n                    <td>bugfix JSON.parse error <span class=\"code\">blockDevices()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.32.1</th>\n                    <td>2017-10-23</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.32.0</th>\n                    <td>2017-10-23</td>\n                    <td>extended <span class=\"code\">memLayout()</span> - added manufacturer</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.31.4</th>\n                    <td>2017-10-21</td>\n                    <td>updated <span class=\"code\">README.md</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.31.3</th>\n                    <td>2017-10-21</td>\n                    <td>bugfix <span class=\"code\">graphics()</span>, fixed typo <span class=\"code\">README.md</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.31.2</th>\n                    <td>2017-10-16</td>\n                    <td>bugfix <span class=\"code\">graphics()</span> vendor and model parsing linux VGA/3D</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.31.1</th>\n                    <td>2017-10-16</td>\n                    <td>bugfix <span class=\"code\">graphics()</span> vendor and model parsing linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.31.0</th>\n                    <td>2017-10-15</td>\n                    <td>extended windows support <span class=\"code\">cpuFlags()</span> (partially)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.6</th>\n                    <td>2017-10-05</td>\n                    <td>updated community profile</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.5</th>\n                    <td>2017-10-05</td>\n                    <td>bugfix <span class=\"code\">users()</span> - parsing values on windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.4</th>\n                    <td>2017-10-03</td>\n                    <td>bugfix <span class=\"code\">cpuTemperature()</span> - parsing values on windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.3</th>\n                    <td>2017-10-03</td>\n                    <td>bugfix <span class=\"code\">cpuTemperature()</span> - max value on windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.2</th>\n                    <td>2017-09-26</td>\n                    <td>bugfix <span class=\"code\">networkInterfaces()</span> - optimized ip6 address selection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.1</th>\n                    <td>2017-09-21</td>\n                    <td>bugfix/typo <span class=\"code\">inetChecksite()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.0</th>\n                    <td>2017-09-21</td>\n                    <td>extended <span class=\"code\">versions()</span> (added <span class=\"code\">yarn</span>, <span class=\"code\">gulp</span>, <span class=\"code\">grunt</span>, <span class=\"code\">tsc</span>, <span class=\"code\">git</span>)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.29.0</th>\n                    <td>2017-09-15</td>\n                    <td>extended windows support <span class=\"code\">services()</span>, optimized <span class=\"code\">diskLayout()</span> (OSX), bugfixes</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.28.0</th>\n                    <td>2017-09-14</td>\n                    <td>extended windows support <span class=\"code\">processes()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.27.1</th>\n                    <td>2017-09-13</td>\n                    <td>updated Raspberry version detection <span class=\"code\">system()</span> (Pi 3, Zero)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.27.0</th>\n                    <td>2017-09-12</td>\n                    <td>added raw data to <span class=\"code\">currentLoad()</span>, fixed <span class=\"code\">networkInterfaces()</span> MAC problem node 8.x</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.26.2</th>\n                    <td>2017-09-01</td>\n                    <td>removed redundant code</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.26.1</th>\n                    <td>2017-08-23</td>\n                    <td>fixed <span class=\"code\">cpu().speed</span> windows / AMD, updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.26.0</th>\n                    <td>2017-08-21</td>\n                    <td>extended <span class=\"code\">getDynamicData()</span> (windows), updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.25.1</th>\n                    <td>2017-08-07</td>\n                    <td>updated docs </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.25.0</th>\n                    <td>2017-08-07</td>\n                    <td>improved windows support <span class=\"code\">networkStats()</span>, <span class=\"code\">cpuCache()</span>, bug fix <span class=\"code\">getStaticData()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.24.0</th>\n                    <td>2017-08-05</td>\n                    <td>extended windows support <span class=\"code\">networkStats()</span>, <span class=\"code\">networkConnections()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.7</th>\n                    <td>2017-07-11</td>\n                    <td>bug fix <span class=\"code\">diskLayout()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.6</th>\n                    <td>2017-07-11</td>\n                    <td>added <span class=\"code\">cpuFlags()</span> to <span class=\"code\">getStaticData()</span>, bug fix <span class=\"code\">graphics()</span> (Win)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.5</th>\n                    <td>2017-06-29</td>\n                    <td>bug fix <span class=\"code\">inetChecksite()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.4</th>\n                    <td>2017-06-24</td>\n                    <td>bug fix <span class=\"code\">getDynamicData(), getAllData() - mem</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.3</th>\n                    <td>2017-06-23</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.2</th>\n                    <td>2017-06-23</td>\n                    <td>bug fix <span class=\"code\">battery</span> (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.1</th>\n                    <td>2017-06-22</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.0</th>\n                    <td>2017-06-22</td>\n                    <td>added <span class=\"code\">memLayout</span>, <span class=\"code\">diskLayout</span>, extended windows support (<span class=\"code\">inetChecksite<span class=\"code\"></span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.22.0</th>\n                    <td>2017-06-19</td>\n                    <td>extended windows support (<span class=\"code\">users<span class=\"code\">, <span class=\"code\">inetLatency</span>)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.21.0</th>\n                    <td>2017-06-18</td>\n                    <td>extended time (timezone), extended windows support (battery, getAll...)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.20.1</th>\n                    <td>2017-06-17</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.20.0</th>\n                    <td>2017-06-16</td>\n                    <td>extend WIN support (cpu, cpuCache, cpuCurrentspeed, mem, networkInterfaces, docker)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.19.0</th>\n                    <td>2017-06-12</td>\n                    <td>OSX temperature now an optional dependency </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.18.0</th>\n                    <td>2017-05-27</td>\n                    <td>extended <span class=\"code\">cpu</span> info (vendor, family, model, stepping, revision, cache, speedmin/max)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.17.3</th>\n                    <td>2017-04-29</td>\n                    <td>minor fix (blockDevices data array, Windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.17.2</th>\n                    <td>2017-04-24</td>\n                    <td>minor fix (removed console.log)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.17.1</th>\n                    <td>2017-04-23</td>\n                    <td>fixed bugs fsSize(win), si.processes (command), si.osinfo(win)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.17.0</th>\n                    <td>2017-02-19</td>\n                    <td>windows support for some first functions, extended process list (linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.16.0</th>\n                    <td>2017-01-19</td>\n                    <td>blockDevices: added removable attribute + fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.15.1</th>\n                    <td>2017-01-17</td>\n                    <td>minor cpuTemperature fix (OSX)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.15.0</th>\n                    <td>2017-01-15</td>\n                    <td>added cpuTemperature also for OSX</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.14.0</th>\n                    <td>2017-01-14</td>\n                    <td>added currentLoad per cpu/core, cpu cache and cpu flags</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.13.0</th>\n                    <td>2016-11-23</td>\n                    <td>added shell (returns standard shell)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.12.0</th>\n                    <td>2016-11-17</td>\n                    <td>refactoring and extended currentLoad</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.11.2</th>\n                    <td>2016-11-16</td>\n                    <td>blockDevices: improved for older lsblk versions</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.11.1</th>\n                    <td>2016-11-16</td>\n                    <td>fixed small bug in blockDevices</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.11.0</th>\n                    <td>2016-11-15</td>\n                    <td>blockDevices for OSX and extended blockDevices</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.10.2</th>\n                    <td>2016-11-14</td>\n                    <td>bug fix fsSize on OSX</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.10.1</th>\n                    <td>2016-11-14</td>\n                    <td>optimization fsStats, disksIO, networkStats</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.10.0</th>\n                    <td>2016-11-12</td>\n                    <td>added blockDevices, fixed fsSize, added file system type</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.9.0</th>\n                    <td>2016-11-11</td>\n                    <td>added MAC address to networkInterfaces, fixed currentLoad</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.8.1</th>\n                    <td>2016-11-04</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.8.0</th>\n                    <td>2016-11-04</td>\n                    <td>added dockerContainerProcesses</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.7.1</th>\n                    <td>2016-11-03</td>\n                    <td>code refactoring</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.7.0</th>\n                    <td>2016-11-02</td>\n                    <td>extended docker stats, and no longer relying on curl</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.6.0</th>\n                    <td>2016-09-14</td>\n                    <td>added versions (kernel, ssl, node, npm, pm2, ...)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.5.1</th>\n                    <td>2016-09-14</td>\n                    <td>bugfix graphics info</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.5.0</th>\n                    <td>2016-09-14</td>\n                    <td>added graphics info (controller, display)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.4.4</th>\n                    <td>2016-09-02</td>\n                    <td>tiny fixes system.model, getDefaultNetworkInterface</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.4.3</th>\n                    <td>2016-09-02</td>\n                    <td>tiny bug fix fsStats, disksIO OSX</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.4.2</th>\n                    <td>2016-09-01</td>\n                    <td>improved default network interface</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.4.1</th>\n                    <td>2016-08-30</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.4.0</th>\n                    <td>2016-08-30</td>\n                    <td>rewritten processes current cpu usage</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.3.0</th>\n                    <td>2016-08-24</td>\n                    <td>process list added to processes</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.2.1</th>\n                    <td>2016-08-19</td>\n                    <td>updated docs, improvement system</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.2.0</th>\n                    <td>2016-08-19</td>\n                    <td>added battery information</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.1.1</th>\n                    <td>2016-08-18</td>\n                    <td>improved system and os detection (vm, ...), bugfix disksIO</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.1.0</th>\n                    <td>2016-08-18</td>\n                    <td>added Docker stats</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.0.1</th>\n                    <td>2016-08-17</td>\n                    <td>Bug-Fix disksIO, users, updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.0.0</th>\n                    <td>2016-08-03</td>\n                    <td>new major version 3.0</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.5</th>\n                    <td>2016-03-02</td>\n                    <td>changed .gitignore</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.4</th>\n                    <td>2016-02-22</td>\n                    <td>tiny correction - removed double quotes CPU brand, ...</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.3</th>\n                    <td>2016-02-22</td>\n                    <td>optimized cpuCurrentspeed</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.2</th>\n                    <td>2016-02-22</td>\n                    <td>added CoreOS identification</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.1</th>\n                    <td>2016-01-07</td>\n                    <td>minor patch</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.0</th>\n                    <td>2016-01-07</td>\n                    <td>new major version 2.0</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.7</th>\n                    <td>2015-11-27</td>\n                    <td>fixed: si.network_speed()</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.6</th>\n                    <td>2015-09-17</td>\n                    <td>fixed: si.users()</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.5</th>\n                    <td>2015-09-14</td>\n                    <td>updated dependencies</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.4</th>\n                    <td>2015-07-18</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.3</th>\n                    <td>2015-07-18</td>\n                    <td>bugfix cpu cores</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.2</th>\n                    <td>2015-07-18</td>\n                    <td>bugfix cpu_currentspeed, cpu_temperature</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.1</th>\n                    <td>2015-07-18</td>\n                    <td>documentation update</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.0</th>\n                    <td>2015-07-18</td>\n                    <td>bug-fixes, version bump, published as npm component</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">0.0.3</th>\n                    <td>2014-04-14</td>\n                    <td>bug-fix (cpu_speed)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">0.0.2</th>\n                    <td>2014-03-14</td>\n                    <td>Optimization FS-Speed & CPU current speed</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">0.0.1</th>\n                    <td>2014-03-13</td>\n                    <td>initial release</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    </div>\n  </section>\n  <footer class=\"container-fluid\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\".\">Home</a></li>\n            <li><a href=\"https://github.com/sebhildebrandt/systeminformation\">Github <i class=\"fab fa-github\"></i></a></li>\n            <li><a href=\"contributors.html\">Contributors</a></li>\n            <li><a href=\"https://buymeacoff.ee/systeminfo\">Buy me a coffee</a></li>\n          </ul>\n        </div>\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\"gettingstarted.html\">Quick Start</a></li>\n            <li><a href=\"issues.html\">Known Issues</a></li>\n            <li><a href=\"statsfunctions.html\">Stats Functions</a></li>\n            <li><a href=\"history.html\">Version history</a></li>\n          </ul>\n        </div>\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\"https://www.plus-innovations.com\">&copy; 2020 Sebastian Hildebrandt, +innovations</a></li>\n            <li><a href=\"copyright.html\">Copyright &amp; License</a></li>\n            <li><a href=\"trademarks.html\">Trademarks</a></li>\n            <li><a href=\"https://github.com/sebhildebrandt/systeminformation/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" alt=\"MIT license\" /></a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n  </footer>\n\n  <script>\n    window.onload = function (e) {\n      createMenu();\n    }\n  </script>\n\n</body>\n\n</html>\n", "<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <!-- Required meta tags -->\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n  <!-- CSS -->\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"https://pro.fontawesome.com/releases/v5.6.3/css/all.css\" integrity=\"sha384-LRlmVvLKVApDVGuspQFnRQJjkv0P7/YFrw84YYQtmYG4nK8c+M+NlmYDCv0rKWpG\" crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"styles.css\">\n\n  <!-- Favicon -->\n  <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"/assets/android-icon-192x192.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/assets/favicon-32x32.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"/assets/favicon-96x96.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/assets/favicon-16x16.png\">\n\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/typed.js/2.0.9/typed.min.js\"></script>\n\n  <title>systeminformation</title>\n  <script>\n    let vh = window.innerHeight * 0.01;\n    // Then we set the value in the --vh custom property to the root of the document\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n\n    // We listen to the resize event\n    // window.addEventListener('resize', () => {\n    //   // We execute the same script as before\n    //   let vh = window.innerHeight * 0.01;\n    //   document.documentElement.style.setProperty('--vh', `${vh}px`);\n    // });\n    function init() {\n      typed();\n      document.querySelector('.down').addEventListener('click', function () {\n        scrollIt(\n          document.querySelector('.quickstart'),\n          600,\n          'easeOutQuad',\n          function () {\n            console.log('READY')\n          }\n        );\n      });\n      getDownloads();\n    }\n    function numberWithCommas(x) {\n      return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    function getDownloads() {\n      var xhttp = new XMLHttpRequest();\n      xhttp.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {\n          var downloads = JSON.parse(this.responseText);\n          document.getElementById(\"downloads\").innerHTML = numberWithCommas(downloads.downloads);\n        }\n      };\n      xhttp.open(\"GET\", \"https://api.npmjs.org/downloads/point/last-month/systeminformation\", true);\n      xhttp.send();\n    }\n    function getVersion() {\n      var xhttp = new XMLHttpRequest();\n      xhttp.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {\n          var package = JSON.parse(this.responseText);\n          document.getElementById(\"version\").innerHTML = package.version;\n        }\n      };\n      xhttp.open(\"GET\", \"https://registry.npmjs.org/systeminformation/latest\", true);\n      xhttp.send();\n    }\n    function typed() {\n      var options = {\n        strings: [\"System and OS information library for node.js\", \"Get detailed hardware, system &amp; OS information.\", \"For Linux, macOS, Windows, FreeBSD, OpenBSD, NetBSD, SunOS\"],\n        typeSpeed: 60,\n        loop: false,\n        backDelay: 1200,\n\n      }\n      var typed = new Typed('#typed', options);\n    }\n    function scrollIt(destination, duration = 200, easing = 'linear', callback) {\n\n      const easings = {\n        linear(t) {\n          return t;\n        },\n        easeInQuad(t) {\n          return t * t;\n        },\n        easeOutQuad(t) {\n          return t * (2 - t);\n        },\n        easeInOutQuad(t) {\n          return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n        },\n        easeInCubic(t) {\n          return t * t * t;\n        },\n        easeOutCubic(t) {\n          return (--t) * t * t + 1;\n        },\n        easeInOutCubic(t) {\n          return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n        },\n        easeInQuart(t) {\n          return t * t * t * t;\n        },\n        easeOutQuart(t) {\n          return 1 - (--t) * t * t * t;\n        },\n        easeInOutQuart(t) {\n          return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\n        },\n        easeInQuint(t) {\n          return t * t * t * t * t;\n        },\n        easeOutQuint(t) {\n          return 1 + (--t) * t * t * t * t;\n        },\n        easeInOutQuint(t) {\n          return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t;\n        }\n      };\n\n      const start = window.pageYOffset;\n      const startTime = 'now' in window.performance ? performance.now() : new Date().getTime();\n\n      const documentHeight = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\n      const windowHeight = window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight;\n      const destinationOffset = typeof destination === 'number' ? destination : destination.offsetTop;\n      const destinationOffsetToScroll = Math.round(documentHeight - destinationOffset < windowHeight ? documentHeight - windowHeight : destinationOffset);\n\n      if ('requestAnimationFrame' in window === false) {\n        window.scroll(0, destinationOffsetToScroll);\n        if (callback) {\n          callback();\n        }\n        return;\n      }\n\n      function scroll() {\n        const now = 'now' in window.performance ? performance.now() : new Date().getTime();\n        const time = Math.min(1, ((now - startTime) / duration));\n        const timeFunction = easings[easing](time);\n        window.scroll(0, Math.ceil((timeFunction * (destinationOffsetToScroll - start)) + start));\n\n        if (window.pageYOffset === destinationOffsetToScroll) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n\n        requestAnimationFrame(scroll);\n      }\n\n      scroll();\n    }\n  </script>\n\n</head>\n\n<body>\n  <header class=\"bg-image-full\">\n    <div class=\"container\">\n      <img class=\"logo\" src=\"assets/logo.png\">\n      <div class=\"title\">systeminformation</div>\n      <div class=\"subtitle\"><span id=\"typed\"></span></div>\n      <div class=\"version\">Current Version: <span id=\"version\">4.30.4</span></div>\n      <button class=\"btn btn-light\" onclick=\"location.href='https://github.com/sebhildebrandt/systeminformation'\">View on Github <i class=\" fab fa-github\"></i></button>\n    </div>\n    <div class=\"down\">\n      <button class=\"btn btn-primary mb-2\" onclick=\"location.href='https://www.buymeacoffee.com/systeminfo'\">Buy me a coffee&nbsp;&nbsp;<i class=\"far fa-mug-hot\"></i></button>\n      <br>Read Documentation<br>\n      <i class=\"fal fa-caret-down caret\"></i>\n    </div>\n  </header>\n\n  <section class=\"container quickstart\">\n    <div class=\"row\">\n      <div class=\"col-12 sectionheader index\">\n        <div class=\"title\">Overview</div>\n        <div class=\"subtitle\">Lightweight collection of 40+ functions to retrieve detailed hardware, system and OS information. For Linux, macOS, partial Windows, FreeBSD, OpenBSD, NetBSD and SunOS support</div>\n        <div class=\"npmicons\">\n          <a href=\"https://npmjs.org/package/systeminformation\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/df25636cbefadf18ca1532e3bdcd0d2794235e19/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f73797374656d696e666f726d6174696f6e2e7376673f7374796c653d666c61742d737175617265\" alt=\"NPM Version\" data-canonical-src=\"https://img.shields.io/npm/v/systeminformation.svg?style=flat-square\" style=\"max-width:100%;\"></a>\n          <a href=\"https://david-dm.org/sebhildebrandt/systeminformation\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/69739c043c2be3a38545f105b89381a2a6310f59/68747470733a2f2f696d672e736869656c64732e696f2f64617669642f73656268696c64656272616e64742f73797374656d696e666f726d6174696f6e2e7376673f7374796c653d666c61742d737175617265\" alt=\"deps status\" data-canonical-src=\"https://img.shields.io/david/sebhildebrandt/systeminformation.svg?style=flat-square\" style=\"max-width:100%;\"></a>\n          <a href=\"https://lgtm.com/projects/g/sebhildebrandt/systeminformation/context:javascript\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/08409d6fb3794545416e1a40ca75172b54d34692/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6a6176617363726970742f672f73656268696c64656272616e64742f73797374656d696e666f726d6174696f6e2e7376673f7374796c653d666c61742d737175617265\" alt=\"Code Quality: Javascript\" data-canonical-src=\"https://img.shields.io/lgtm/grade/javascript/g/sebhildebrandt/systeminformation.svg?style=flat-square\" style=\"max-width:100%;\"></a>\n          <a href=\"https://lgtm.com/projects/g/sebhildebrandt/systeminformation/alerts\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/66428127fdde80fc8247a0c1df4c651f3a6b1c0a/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f672f73656268696c64656272616e64742f73797374656d696e666f726d6174696f6e2e7376673f7374796c653d666c61742d737175617265\" alt=\"Total alerts\" data-canonical-src=\"https://img.shields.io/lgtm/alerts/g/sebhildebrandt/systeminformation.svg?style=flat-square\" style=\"max-width:100%;\"></a>\n          <a href=\"https://github.com/sebhildebrandt/systeminformation/blob/master/LICENSE\"><img src=\"https://camo.githubusercontent.com/4b5966a2a252ee0f241a1e03b13417178eb4964f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265\" alt=\"MIT license\" data-canonical-src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" style=\"max-width:100%;\"></a>\n        </div>\n      </div>\n    </div>\n    <div class=\"row justify-content-center sectionheader index\">\n      <div class=\"col-8\">\n        <hr>\n      </div>\n    </div>\n    <div class=\"row number-section\">\n      <div class=\"col-xl-4 col-lg-4 col-md-4 col-12\">\n        <div class=\"numbers\">10,943</div>\n        <div class=\"title\">Lines of code</div>\n      </div>\n      <div class=\"col-xl-4 col-lg-4 col-md-4 col-12\">\n        <div id=\"downloads\" class=\"numbers\">...</div>\n        <div class=\"title\">Downloads last month</div>\n      </div>\n      <div class=\"col-xl-4 col-lg-4 col-md-4 col-12\">\n        <div class=\"numbers\">359</div>\n        <div class=\"title\">Dependents</div>\n      </div>\n    </div>\n    <div class=\"row justify-content-center sectionheader index\">\n      <div class=\"col-8\">\n        <hr>\n      </div>\n    </div>\n    <div class=\"row\" id=\"docs\">\n      <div class=\"col-12 sectionheader index\">\n        <div class=\"title\">Documentation</div>\n        <div class=\"subtitle\">Detailed documentation and reference for Version 4.x.x</div>\n      </div>\n    </div>\n    <div class=\"row index\">\n      <a href=\"gettingstarted.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-download\"></i></div>\n          <div class=\"icontitle\">Getting Started</div>\n        </div>\n      </a>\n      <a href=\"general.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-th-list\"></i></div>\n          <div class=\"icontitle\">General</div>\n        </div>\n      </a>\n      <a href=\"system.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-server\"></i></div>\n          <div class=\"icontitle\">System</div>\n        </div>\n      </a>\n      <a href=\"cpu.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-microchip\"></i></div>\n          <div class=\"icontitle\">CPU</div>\n        </div>\n      </a>\n      <a href=\"memory.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-memory\"></i></div>\n          <div class=\"icontitle\">Memory</div>\n        </div>\n      </a>\n      <a href=\"battery.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-battery-half\"></i></div>\n          <div class=\"icontitle\">Battery</div>\n        </div>\n      </a>\n      <a href=\"graphics.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-desktop\"></i></div>\n          <div class=\"icontitle\">Graphics</div>\n        </div>\n      </a>\n      <a href=\"os.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-window\"></i></div>\n          <div class=\"icontitle\">OS</div>\n        </div>\n      </a>\n      <a href=\"processes.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-chart-line\"></i></div>\n          <div class=\"icontitle\">Process/Service</div>\n        </div>\n      </a>\n      <a href=\"filesystem.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-hdd\"></i></div>\n          <div class=\"icontitle\">Disks / FS</div>\n        </div>\n      </a>\n      <a href=\"network.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-network-wired\"></i></div>\n          <div class=\"icontitle\">Network</div>\n        </div>\n      </a>\n      <a href=\"wifi.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-wifi\"></i></div>\n          <div class=\"icontitle\">Wifi</div>\n        </div>\n      </a>\n      <a href=\"docker.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fab fa-docker\"></i></div>\n          <div class=\"icontitle\">Docker</div>\n        </div>\n      </a>\n      <a href=\"vbox.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-box-open\"></i></div>\n          <div class=\"icontitle\">Virtual Box</div>\n        </div>\n      </a>\n    </div>\n    <div class=\"row justify-content-center sectionheader index\">\n      <div class=\"col-8\">\n        <hr>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12 sectionheader index\">\n        <div class=\"title-small\">Issues</div>\n        <div class=\"text\">If you run into problems, please check out <a href=\"issues.html\">known issues page</a> first. If you still have problems, please feel free to open an issue on our <a href=\"https://github.com/sebhildebrandt/systeminformation/issues\">github page</a></div>\n        <div class=\"title-small\">Upcoming ...</div>\n        <div class=\"text\"><span class=\"bold\">MacOS on ARM, Windows on ARM</span> - we will have a closer look on that! As soon as we have the new hardware here, will work on support for those platforms. We are also planning a new major version <span class=\"bold\">Version 5</span> with some minor breaking changes and some additional features. We will try to make this available Q1 of 2021.<br /><br /></div>\n      </div>\n    </div>\n  </section>\n  <footer class=\"container-fluid\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\".\">Home</a></li>\n            <li><a href=\"https://github.com/sebhildebrandt/systeminformation\">Github <i class=\"fab fa-github\"></i></a></li>\n            <li><a href=\"contributors.html\">Contributors</a></li>\n            <li><a href=\"https://buymeacoff.ee/systeminfo\">Buy me a coffee</a></li>\n          </ul>\n        </div>\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\"gettingstarted.html\">Quick Start</a></li>\n            <li><a href=\"issues.html\">Known Issues</a></li>\n            <li><a href=\"statsfunctions.html\">Stats Functions</a></li>\n            <li><a href=\"history.html\">Version history</a></li>\n          </ul>\n        </div>\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\"https://www.plus-innovations.com\">&copy; 2020 Sebastian Hildebrandt, +innovations</a></li>\n            <li><a href=\"copyright.html\">Copyright &amp; License</a></li>\n            <li><a href=\"trademarks.html\">Trademarks</a></li>\n            <li><a href=\"https://github.com/sebhildebrandt/systeminformation/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" alt=\"MIT license\" /></a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n  </footer>\n\n  <!-- Optional JavaScript -->\n  <!-- jQuery first, then Popper.js, then Bootstrap JS -->\n  <script>\n    window.onload = function (e) {\n      init();\n    }\n  </script>\n</body>\n\n</html>\n", "'use strict';\n// @ts-check\n// ==================================================================================\n// index.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// Contributors:  Guillaume Legrain (https://github.com/glegrain)\n//                Riccardo Novaglia (https://github.com/richy24)\n//                Quentin Busuttil (https://github.com/Buzut)\n//                Lapsio (https://github.com/lapsio)\n//                csy (https://github.com/csy1983)\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n\n// ----------------------------------------------------------------------------------\n// Dependencies\n// ----------------------------------------------------------------------------------\n\n// Object.freeze(String.prototype);\n// Object.freeze(Object.prototype);\n\nconst lib_version = require('../package.json').version;\nconst util = require('./util');\nconst system = require('./system');\nconst osInfo = require('./osinfo');\nconst cpu = require('./cpu');\nconst memory = require('./memory');\nconst battery = require('./battery');\nconst graphics = require('./graphics');\nconst filesystem = require('./filesystem');\nconst network = require('./network');\nconst wifi = require('./wifi');\nconst processes = require('./processes');\nconst users = require('./users');\nconst internet = require('./internet');\nconst docker = require('./docker');\nconst vbox = require('./virtualbox');\n\nlet _platform = process.platform;\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\n// ----------------------------------------------------------------------------------\n// init\n// ----------------------------------------------------------------------------------\n\nif (_windows) {\n  util.getCodepage();\n}\n\n// ----------------------------------------------------------------------------------\n// General\n// ----------------------------------------------------------------------------------\n\nfunction version() {\n  return lib_version;\n}\n\n// ----------------------------------------------------------------------------------\n// Get static and dynamic data (all)\n// ----------------------------------------------------------------------------------\n\n// --------------------------\n// get static data - they should not change until restarted\n\nfunction getStaticData(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let data = {};\n\n      data.version = version();\n\n      Promise.all([\n        system.system(),\n        system.bios(),\n        system.baseboard(),\n        system.chassis(),\n        osInfo.osInfo(),\n        osInfo.uuid(),\n        osInfo.versions(),\n        cpu.cpu(),\n        cpu.cpuFlags(),\n        graphics.graphics(),\n        network.networkInterfaces(),\n        memory.memLayout(),\n        filesystem.diskLayout()\n      ]).then(res => {\n        data.system = res[0];\n        data.bios = res[1];\n        data.baseboard = res[2];\n        data.chassis = res[3];\n        data.os = res[4];\n        data.uuid = res[5];\n        data.versions = res[6];\n        data.cpu = res[7];\n        data.cpu.flags = res[8];\n        data.graphics = res[9];\n        data.net = res[10];\n        data.memLayout = res[11];\n        data.diskLayout = res[12];\n        if (callback) { callback(data); }\n        resolve(data);\n      });\n    });\n  });\n}\n\n\n// --------------------------\n// get all dynamic data - e.g. for monitoring agents\n// may take some seconds to get all data\n// --------------------------\n// 2 additional parameters needed\n// - srv: \t\tcomma separated list of services to monitor e.g. \"mysql, apache, postgresql\"\n// - iface:\tdefine network interface for which you like to monitor network speed e.g. \"eth0\"\n\nfunction getDynamicData(srv, iface, callback) {\n\n  if (util.isFunction(iface)) {\n    callback = iface;\n    iface = '';\n  }\n  if (util.isFunction(srv)) {\n    callback = srv;\n    srv = '';\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      iface = iface || network.getDefaultNetworkInterface();\n      srv = srv || '';\n\n      // use closure to track \u0192 completion\n      let functionProcessed = (function () {\n        let totalFunctions = 15;\n        if (_windows) totalFunctions = 11;\n        if (_freebsd || _openbsd || _netbsd) totalFunctions = 11;\n        if (_sunos) totalFunctions = 6;\n\n        return function () {\n          if (--totalFunctions === 0) {\n            if (callback) {\n              callback(data);\n            }\n            resolve(data);\n          }\n        };\n      })();\n\n      // var totalFunctions = 14;\n      // function functionProcessed() {\n      //   if (--totalFunctions === 0) {\n      //     if (callback) { callback(data) }\n      //     resolve(data);\n      //   }\n      // }\n\n      let data = {};\n\n      // get time\n      data.time = osInfo.time();\n\n      /**\n       * @namespace\n       * @property {Object}  versions\n       * @property {string}  versions.node\n       * @property {string}  versions.v8\n       */\n      data.node = process.versions.node;\n      data.v8 = process.versions.v8;\n\n      cpu.cpuCurrentspeed().then(res => {\n        data.cpuCurrentspeed = res;\n        functionProcessed();\n      });\n\n      users.users().then(res => {\n        data.users = res;\n        functionProcessed();\n      });\n\n      if (!_windows) {\n        processes.processes().then(res => {\n          data.processes = res;\n          functionProcessed();\n        });\n      }\n\n      cpu.currentLoad().then(res => {\n        data.currentLoad = res;\n        functionProcessed();\n      });\n\n      if (!_sunos) {\n        cpu.cpuTemperature().then(res => {\n          data.temp = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        network.networkStats(iface).then(res => {\n          data.networkStats = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_sunos) {\n        network.networkConnections().then(res => {\n          data.networkConnections = res;\n          functionProcessed();\n        });\n      }\n\n      memory.mem().then(res => {\n        data.mem = res;\n        functionProcessed();\n      });\n\n      if (!_sunos) {\n        battery().then(res => {\n          data.battery = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_sunos) {\n        processes.services(srv).then(res => {\n          data.services = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_sunos) {\n        filesystem.fsSize().then(res => {\n          data.fsSize = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        filesystem.fsStats().then(res => {\n          data.fsStats = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        filesystem.disksIO().then(res => {\n          data.disksIO = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        wifi.wifiNetworks().then(res => {\n          data.wifiNetworks = res;\n          functionProcessed();\n        });\n      }\n\n      internet.inetLatency().then(res => {\n        data.inetLatency = res;\n        functionProcessed();\n      });\n    });\n  });\n}\n\n// --------------------------\n// get all data at once\n// --------------------------\n// 2 additional parameters needed\n// - srv: \t\tcomma separated list of services to monitor e.g. \"mysql, apache, postgresql\"\n// - iface:\tdefine network interface for which you like to monitor network speed e.g. \"eth0\"\n\nfunction getAllData(srv, iface, callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let data = {};\n\n      if (iface && util.isFunction(iface) && !callback) {\n        callback = iface;\n        iface = '';\n      }\n\n      if (srv && util.isFunction(srv) && !iface && !callback) {\n        callback = srv;\n        srv = '';\n        iface = '';\n      }\n\n      getStaticData().then(res => {\n        data = res;\n        getDynamicData(srv, iface).then(res => {\n          for (let key in res) {\n            if ({}.hasOwnProperty.call(res, key)) {\n              data[key] = res[key];\n            }\n          }\n          if (callback) { callback(data); }\n          resolve(data);\n        });\n      });\n    });\n  });\n}\n\nfunction get(valueObject, callback) {\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      const allPromises = Object.keys(valueObject)\n        .filter(func => ({}.hasOwnProperty.call(exports, func)))\n        .map(func => {\n          const params = valueObject[func].substring(valueObject[func].lastIndexOf('(') + 1, valueObject[func].lastIndexOf(')'));\n          const funcWithoutParams = func.split('(')[0];\n          if (params) {\n            return exports[funcWithoutParams](params)\n          } else {\n            return exports[funcWithoutParams]('')\n          }\n        });\n\n      Promise.all(allPromises).then(data => {\n        const result = {};\n        let i = 0;\n        for (let key in valueObject) {\n          if ({}.hasOwnProperty.call(valueObject, key) && {}.hasOwnProperty.call(exports, key) && data.length > i) {\n            if (valueObject[key] === '*' || valueObject[key] === 'all') {\n              result[key] = data[i];\n            } else {\n              const keys = valueObject[key].replace(/,/g, ' ').replace(/ +/g, ' ').split(' ');\n              if (data[i]) {\n                if (Array.isArray(data[i])) {\n                  // result is in an array, go through all elements of array and pick only the right ones\n                  const partialArray = [];\n                  data[i].forEach(element => {\n                    const partialRes = {};\n                    keys.forEach(k => {\n                      if ({}.hasOwnProperty.call(element, k)) {\n                        partialRes[k] = element[k];\n                      }\n                    });\n                    partialArray.push(partialRes);\n                  });\n                  result[key] = partialArray;\n                } else {\n                  const partialRes = {};\n                  keys.forEach(k => {\n                    if ({}.hasOwnProperty.call(data[i], k)) {\n                      partialRes[k] = data[i][k];\n                    }\n                  });\n                  result[key] = partialRes;\n                }\n              } else {\n                result[key] = {};\n              }\n            }\n            i++;\n          }\n        }\n        if (callback) { callback(result); }\n        resolve(result);\n      });\n    });\n  });\n}\n\nfunction observe(valueObject, interval, callback) {\n  let _data = null;\n\n  const result = setInterval(() => {\n    get(valueObject).then(data => {\n      if (JSON.stringify(_data) !== JSON.stringify(data)) {\n        _data = Object.assign({}, data);\n        callback(data);\n      }\n    });\n  }, interval);\n  return result;\n}\n\n// ----------------------------------------------------------------------------------\n// export all libs\n// ----------------------------------------------------------------------------------\n\nexports.version = version;\nexports.system = system.system;\nexports.bios = system.bios;\nexports.baseboard = system.baseboard;\nexports.chassis = system.chassis;\n\nexports.time = osInfo.time;\nexports.osInfo = osInfo.osInfo;\nexports.versions = osInfo.versions;\nexports.shell = osInfo.shell;\nexports.uuid = osInfo.uuid;\n\nexports.cpu = cpu.cpu;\nexports.cpuFlags = cpu.cpuFlags;\nexports.cpuCache = cpu.cpuCache;\nexports.cpuCurrentspeed = cpu.cpuCurrentspeed;\nexports.cpuTemperature = cpu.cpuTemperature;\nexports.currentLoad = cpu.currentLoad;\nexports.fullLoad = cpu.fullLoad;\n\nexports.mem = memory.mem;\nexports.memLayout = memory.memLayout;\n\nexports.battery = battery;\n\nexports.graphics = graphics.graphics;\n\nexports.fsSize = filesystem.fsSize;\nexports.fsOpenFiles = filesystem.fsOpenFiles;\nexports.blockDevices = filesystem.blockDevices;\nexports.fsStats = filesystem.fsStats;\nexports.disksIO = filesystem.disksIO;\nexports.diskLayout = filesystem.diskLayout;\n\nexports.networkInterfaceDefault = network.networkInterfaceDefault;\nexports.networkGatewayDefault = network.networkGatewayDefault;\nexports.networkInterfaces = network.networkInterfaces;\nexports.networkStats = network.networkStats;\nexports.networkConnections = network.networkConnections;\n\nexports.wifiNetworks = wifi.wifiNetworks;\n\nexports.services = processes.services;\nexports.processes = processes.processes;\nexports.processLoad = processes.processLoad;\n\nexports.users = users.users;\n\nexports.inetChecksite = internet.inetChecksite;\nexports.inetLatency = internet.inetLatency;\n\nexports.dockerInfo = docker.dockerInfo;\nexports.dockerContainers = docker.dockerContainers;\nexports.dockerContainerStats = docker.dockerContainerStats;\nexports.dockerContainerProcesses = docker.dockerContainerProcesses;\nexports.dockerAll = docker.dockerAll;\n\nexports.vboxInfo = vbox.vboxInfo;\n\nexports.getStaticData = getStaticData;\nexports.getDynamicData = getDynamicData;\nexports.getAllData = getAllData;\nexports.get = get;\nexports.observe = observe;\n\n", "'use strict';\n// @ts-check\n// ==================================================================================\n// internet.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 12. Internet\n// ----------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\n// --------------------------\n// check if external site is available\n\nfunction inetChecksite(url, callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let urlSanitized = '';\n      const s = util.sanitizeShellString(url);\n      for (let i = 0; i <= 2000; i++) {\n        if (!(s[i] === undefined ||\n          s[i] === ' ' ||\n          s[i] === '{' ||\n          s[i] === '}')) {\n          const sl = s[i].toLowerCase();\n          if (sl && sl[0] && !sl[1]) {\n            urlSanitized = urlSanitized + sl[0];\n          }\n        }\n      }\n      let result = {\n        url: urlSanitized,\n        ok: false,\n        status: 404,\n        ms: -1\n      };\n      try {\n        if (urlSanitized && !util.isPrototypePolluted()) {\n          let t = Date.now();\n          if (_linux || _freebsd || _openbsd || _netbsd || _darwin || _sunos) {\n            let args = ' -I --connect-timeout 5 -m 5 ' + urlSanitized + ' 2>/dev/null | head -n 1 | cut -d \" \" -f2';\n            let cmd = 'curl';\n            exec(cmd + args, function (error, stdout) {\n              let statusCode = parseInt(stdout.toString());\n              result.status = statusCode || 404;\n              result.ok = !error && (statusCode === 200 || statusCode === 301 || statusCode === 302 || statusCode === 304);\n              result.ms = (result.ok ? Date.now() - t : -1);\n              if (callback) { callback(result); }\n              resolve(result);\n            });\n          }\n          if (_windows) {   // if this is stable, this can be used for all OS types\n            const http = (urlSanitized.startsWith('https:') ? require('https') : require('http'));\n            try {\n              http.get(urlSanitized, (res) => {\n                const statusCode = res.statusCode;\n\n                result.status = statusCode || 404;\n                result.ok = (statusCode === 200 || statusCode === 301 || statusCode === 302 || statusCode === 304);\n\n                if (statusCode !== 200) {\n                  res.resume();\n                  result.ms = (result.ok ? Date.now() - t : -1);\n                  if (callback) { callback(result); }\n                  resolve(result);\n                } else {\n                  res.on('data', () => { });\n                  res.on('end', () => {\n                    result.ms = (result.ok ? Date.now() - t : -1);\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  });\n                }\n              }).on('error', () => {\n                if (callback) { callback(result); }\n                resolve(result);\n              });\n            } catch (err) {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          }\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      } catch (err) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.inetChecksite = inetChecksite;\n\n// --------------------------\n// check inet latency\n\nfunction inetLatency(host, callback) {\n\n  // fallback - if only callback is given\n  if (util.isFunction(host) && !callback) {\n    callback = host;\n    host = '';\n  }\n\n  host = host || '8.8.8.8';\n  const hostSanitized = util.isPrototypePolluted() ? '8.8.8.8' : util.sanitizeShellString(host);\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let cmd;\n      if (_linux || _freebsd || _openbsd || _netbsd || _darwin) {\n        if (_linux) {\n          cmd = 'ping -c 2 -w 3 ' + hostSanitized + ' | grep rtt';\n        }\n        if (_freebsd || _openbsd || _netbsd) {\n          cmd = 'ping -c 2 -t 3 ' + hostSanitized + ' | grep round-trip';\n        }\n        if (_darwin) {\n          cmd = 'ping -c 2 -t 3 ' + hostSanitized + ' | grep avg';\n        }\n\n        exec(cmd, function (error, stdout) {\n          let result = -1;\n          if (!error) {\n            const line = stdout.toString().split('=');\n            if (line.length > 1) {\n              const parts = line[1].split('/');\n              if (parts.length > 1) {\n                result = parseFloat(parts[1]);\n              }\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        exec('ping -s -a ' + hostSanitized + ' 56 2 | grep avg', { timeout: 3000 }, function (error, stdout) {\n          let result = -1;\n          if (!error) {\n            const line = stdout.toString().split('=');\n            if (line.length > 1) {\n              const parts = line[1].split('/');\n              if (parts.length > 1) {\n                result = parseFloat(parts[1].replace(',', '.'));\n              }\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_windows) {\n        let result = -1;\n        try {\n          exec('ping ' + hostSanitized + ' -n 1', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n              lines.shift();\n              lines.forEach(function (line) {\n                if ((line.toLowerCase().match(/ms/g) || []).length === 3) {\n                  let l = line.replace(/ +/g, ' ').split(' ');\n                  if (l.length > 6) {\n                    result = parseFloat(l[l.length - 1]);\n                  }\n                }\n              });\n            }\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.inetLatency = inetLatency;\n", "'use strict';\n// @ts-check\n// ==================================================================================\n// network.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 9. Network\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\nconst fs = require('fs');\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nlet _network = {};\nlet _default_iface = '';\nlet _ifaces = {};\nlet _dhcpNics = [];\nlet _networkInterfaces = [];\nlet _mac = {};\nlet pathToIp;\n\nfunction getDefaultNetworkInterface() {\n\n  let ifaces = os.networkInterfaces();\n  let ifacename = '';\n  let ifacenameFirst = '';\n\n  let scopeid = 9999;\n\n  // fallback - \"first\" external interface (sorted by scopeid)\n  for (let dev in ifaces) {\n    if ({}.hasOwnProperty.call(ifaces, dev)) {\n      ifaces[dev].forEach(function (details) {\n        if (details && details.internal === false) {\n          ifacenameFirst = ifacenameFirst || dev; // fallback if no scopeid\n          if (details.scopeid && details.scopeid < scopeid) {\n            ifacename = dev;\n            scopeid = details.scopeid;\n          }\n        }\n      });\n    }\n  }\n  ifacename = ifacename || ifacenameFirst || '';\n\n  try {\n    if (_windows) {\n      // https://www.inetdaemon.com/tutorials/internet/ip/routing/default_route.shtml\n      let defaultIp = '';\n      const cmd = 'netstat -r';\n      const result = execSync(cmd);\n      const lines = result.toString().split(os.EOL);\n      lines.forEach(line => {\n        line = line.replace(/\\s+/g, ' ').trim();\n        if (line.indexOf('0.0.0.0 0.0.0.0') > -1 && !(/[a-zA-Z]/.test(line))) {\n          const parts = line.split(' ');\n          if (parts.length >= 5) {\n            defaultIp = parts[parts.length - 2];\n          }\n        }\n      });\n      if (defaultIp) {\n        for (let dev in ifaces) {\n          if ({}.hasOwnProperty.call(ifaces, dev)) {\n            ifaces[dev].forEach(function (details) {\n              if (details && details.address && details.address === defaultIp) {\n                ifacename = dev;\n              }\n            });\n          }\n        }\n      }\n    }\n    if (_linux) {\n      let cmd = 'ip route 2> /dev/null | grep default';\n      let result = execSync(cmd);\n      let parts = result.toString().split('\\n')[0].split(/\\s+/);\n      if (parts[0] === 'none' && parts[5]) {\n        ifacename = parts[5];\n      } else if (parts[4]) {\n        ifacename = parts[4];\n      }\n\n      if (ifacename.indexOf(':') > -1) {\n        ifacename = ifacename.split(':')[1].trim();\n      }\n    }\n    if (_darwin || _freebsd || _openbsd || _netbsd || _sunos) {\n      let cmd = '';\n      if (_linux) cmd = 'ip route 2> /dev/null | grep default | awk \\'{print $5}\\'';\n      if (_darwin) cmd = 'route -n get default 2>/dev/null | grep interface: | awk \\'{print $2}\\'';\n      if (_freebsd || _openbsd || _netbsd || _sunos) cmd = 'route get 0.0.0.0 | grep interface:';\n      let result = execSync(cmd);\n      ifacename = result.toString().split('\\n')[0];\n      if (ifacename.indexOf(':') > -1) {\n        ifacename = ifacename.split(':')[1].trim();\n      }\n    }\n  } catch (e) {\n    util.noop();\n  }\n  if (ifacename) _default_iface = ifacename;\n  return _default_iface;\n}\n\nexports.getDefaultNetworkInterface = getDefaultNetworkInterface;\n\nfunction getMacAddresses() {\n  let iface = '';\n  let mac = '';\n  let result = {};\n  if (_linux || _freebsd || _openbsd || _netbsd) {\n    if (typeof pathToIp === 'undefined') {\n      try {\n        const lines = execSync('which ip').toString().split('\\n');\n        if (lines.length && lines[0].indexOf(':') === -1 && lines[0].indexOf('/') === 0) {\n          pathToIp = lines[0];\n        } else {\n          pathToIp = '';\n        }\n      } catch (e) {\n        pathToIp = '';\n      }\n    }\n    try {\n      const cmd = 'export LC_ALL=C; ' + ((pathToIp) ? pathToIp + ' link show up' : '/sbin/ifconfig') + '; unset LC_ALL';\n      let res = execSync(cmd);\n      const lines = res.toString().split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i] && lines[i][0] !== ' ') {\n          if (pathToIp) {\n            let nextline = lines[i + 1].trim().split(' ');\n            if (nextline[0] === 'link/ether') {\n              iface = lines[i].split(' ')[1];\n              iface = iface.slice(0, iface.length - 1);\n              mac = nextline[1];\n            }\n          } else {\n            iface = lines[i].split(' ')[0];\n            mac = lines[i].split('HWaddr ')[1];\n          }\n\n          if (iface && mac) {\n            result[iface] = mac.trim();\n            iface = '';\n            mac = '';\n          }\n        }\n      }\n    } catch (e) {\n      util.noop();\n    }\n  }\n  if (_darwin) {\n    try {\n      const cmd = '/sbin/ifconfig';\n      let res = execSync(cmd);\n      const lines = res.toString().split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i] && lines[i][0] !== '\\t' && lines[i].indexOf(':') > 0) {\n          iface = lines[i].split(':')[0];\n        } else if (lines[i].indexOf('\\tether ') === 0) {\n          mac = lines[i].split('\\tether ')[1];\n          if (iface && mac) {\n            result[iface] = mac.trim();\n            iface = '';\n            mac = '';\n          }\n        }\n      }\n    } catch (e) {\n      util.noop();\n    }\n  }\n  return result;\n}\n\nfunction networkInterfaceDefault(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = getDefaultNetworkInterface();\n      if (callback) { callback(result); }\n      resolve(result);\n    });\n  });\n}\n\nexports.networkInterfaceDefault = networkInterfaceDefault;\n\n// --------------------------\n// NET - interfaces\n\nfunction parseLinesWindowsNics(sections, nconfigsections) {\n  let nics = [];\n  for (let i in sections) {\n    if ({}.hasOwnProperty.call(sections, i)) {\n\n      if (sections[i].trim() !== '') {\n\n        let lines = sections[i].trim().split('\\r\\n');\n        let linesNicConfig = nconfigsections[i].trim().split('\\r\\n');\n        let netEnabled = util.getValue(lines, 'NetEnabled', '=');\n\n        if (netEnabled !== '') {\n          const speed = parseInt(util.getValue(lines, 'speed', '=').trim(), 10) / 1000000;\n          nics.push({\n            mac: util.getValue(lines, 'MACAddress', '=').toLowerCase(),\n            dhcp: util.getValue(linesNicConfig, 'dhcpEnabled', '=').toLowerCase(),\n            name: util.getValue(lines, 'Name', '=').replace(/\\]/g, ')').replace(/\\[/g, '('),\n            netEnabled: netEnabled === 'TRUE',\n            speed: isNaN(speed) ? -1 : speed,\n            operstate: util.getValue(lines, 'NetConnectionStatus', '=') === '2' ? 'up' : 'down',\n            type: util.getValue(lines, 'AdapterTypeID', '=') === '9' ? 'wireless' : 'wired'\n          });\n        }\n      }\n    }\n  }\n  return nics;\n}\n\nfunction getWindowsNics() {\n  const cmd = util.getWmic() + ' nic get MACAddress, name, NetEnabled, Speed, NetConnectionStatus, AdapterTypeId /value';\n  const cmdnicconfig = util.getWmic() + ' nicconfig get dhcpEnabled /value';\n  try {\n    const nsections = execSync(cmd, util.execOptsWin).split(/\\n\\s*\\n/);\n    const nconfigsections = execSync(cmdnicconfig, util.execOptsWin).split(/\\n\\s*\\n/);\n    return (parseLinesWindowsNics(nsections, nconfigsections));\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getWindowsDNSsuffixes() {\n\n  let iface = {};\n\n  let dnsSuffixes = {\n    primaryDNS: '',\n    exitCode: 0,\n    ifaces: [],\n  };\n\n  try {\n    const ipconfig = execSync('ipconfig /all', util.execOptsWin);\n    const ipconfigArray = ipconfig.split('\\r\\n\\r\\n');\n\n    ipconfigArray.forEach((element, index) => {\n\n      if (index == 1) {\n        const longPrimaryDNS = element.split('\\r\\n').filter((element) => {\n          return element.toUpperCase().includes('DNS');\n        });\n        const primaryDNS = longPrimaryDNS[0].substring(longPrimaryDNS[0].lastIndexOf(':') + 1);\n        dnsSuffixes.primaryDNS = primaryDNS.trim();\n        if (!dnsSuffixes.primaryDNS) dnsSuffixes.primaryDNS = 'Not defined';\n      }\n      if (index > 1) {\n        if (index % 2 == 0) {\n          const name = element.substring(element.lastIndexOf(' ') + 1).replace(':', '');\n          iface.name = name;\n        } else {\n          const connectionSpecificDNS = element.split('\\r\\n').filter((element) => {\n            return element.toUpperCase().includes('DNS');\n          });\n          const dnsSuffix = connectionSpecificDNS[0].substring(connectionSpecificDNS[0].lastIndexOf(':') + 1);\n          iface.dnsSuffix = dnsSuffix.trim();\n          dnsSuffixes.ifaces.push(iface);\n          iface = {};\n        }\n      }\n    });\n\n    return dnsSuffixes;\n  } catch (error) {\n    // console.log('An error occurred trying to bring the Connection-specific DNS suffix', error.message);\n    return {\n      primaryDNS: '',\n      exitCode: 0,\n      ifaces: [],\n    };\n  }\n}\n\nfunction getWindowsIfaceDNSsuffix(ifaces, ifacename) {\n  let dnsSuffix = '';\n  // Adding (.) to ensure ifacename compatibility when duplicated iface-names\n  const interfaceName = ifacename + '.';\n  try {\n    const connectionDnsSuffix = ifaces.filter((iface) => {\n      return interfaceName.includes(iface.name + '.');\n    }).map((iface) => iface.dnsSuffix);\n    if (connectionDnsSuffix[0]) {\n      dnsSuffix = connectionDnsSuffix[0];\n    }\n    if (!dnsSuffix) dnsSuffix = '';\n    return dnsSuffix;\n  } catch (error) {\n    // console.log('Error getting Connection-specific DNS suffix: ', error.message);\n    return 'Unknown';\n  }\n}\n\nfunction getWindowsWiredProfilesInformation() {\n  try {\n    const result = execSync('netsh lan show profiles', util.execOptsWin);\n    const profileList = result.split('\\r\\nProfile on interface');\n    return profileList;\n  } catch (error) {\n    if (error.status === 1 && error.stdout.includes('AutoConfig')) {\n      return 'Disabled';\n    }\n    return [];\n  }\n}\n\nfunction getWindowsWirelessIfaceSSID(interfaceName) {\n  try {\n    const result = execSync(`netsh wlan show  interface name=\"${interfaceName}\" | findstr \"SSID\"`, util.execOptsWin);\n    const SSID = result.split('\\r\\n').shift();\n    const parseSSID = SSID.split(':').pop();\n    return parseSSID;\n  } catch (error) {\n    return 'Unknown';\n  }\n}\nfunction getWindowsIEEE8021x(connectionType, iface, ifaces) {\n  let i8021x = {\n    state: 'Unknown',\n    protocol: 'Unknown',\n  };\n\n  if (ifaces === 'Disabled') {\n    i8021x.state = 'Disabled';\n    i8021x.protocol = 'Not defined';\n    return i8021x;\n  }\n\n  if (connectionType == 'wired' && ifaces.length > 0) {\n    try {\n      // Get 802.1x information by interface name\n      const iface8021xInfo = ifaces.find((element) => {\n        return element.includes(iface + '\\r\\n');\n      });\n      const arrayIface8021xInfo = iface8021xInfo.split('\\r\\n');\n      const state8021x = arrayIface8021xInfo.find((element) => {\n        return element.includes('802.1x');\n      });\n\n      if (state8021x.includes('Disabled')) {\n        i8021x.state = 'Disabled';\n        i8021x.protocol = 'Not defined';\n      } else if (state8021x.includes('Enabled')) {\n        const protocol8021x = arrayIface8021xInfo.find((element) => {\n          return element.includes('EAP');\n        });\n        i8021x.protocol = protocol8021x.split(':').pop();\n        i8021x.state = 'Enabled';\n      }\n    } catch (error) {\n      // console.log('Error getting wired information:', error);\n      return i8021x;\n    }\n  } else if (connectionType == 'wireless') {\n\n    let i8021xState = '';\n    let i8021xProtocol = '';\n\n\n\n    try {\n      const SSID = getWindowsWirelessIfaceSSID(iface);\n      if (SSID !== 'Unknown') {\n        i8021xState = execSync(`netsh wlan show profiles \"${SSID}\" | findstr \"802.1X\"`, util.execOptsWin);\n        i8021xProtocol = execSync(`netsh wlan show profiles \"${SSID}\" | findstr \"EAP\"`, util.execOptsWin);\n      }\n\n      if (i8021xState.includes(':') && i8021xProtocol.includes(':')) {\n        i8021x.state = i8021xState.split(':').pop();\n        i8021x.protocol = i8021xProtocol.split(':').pop();\n      }\n    } catch (error) {\n      // console.log('Error getting wireless information:', error);\n      if (error.status === 1 && error.stdout.includes('AutoConfig')) {\n        i8021x.state = 'Disabled';\n        i8021x.protocol = 'Not defined';\n      }\n      return i8021x;\n    }\n  }\n\n  return i8021x;\n}\n\nfunction splitSectionsNics(lines) {\n  const result = [];\n  let section = [];\n  lines.forEach(function (line) {\n    if (!line.startsWith('\\t') && !line.startsWith(' ')) {\n      if (section.length) {\n        result.push(section);\n        section = [];\n      }\n    }\n    section.push(line);\n  });\n  if (section.length) {\n    result.push(section);\n  }\n  return result;\n}\n\nfunction parseLinesDarwinNics(sections) {\n  let nics = [];\n  sections.forEach(section => {\n    let nic = {\n      iface: '',\n      mtu: -1,\n      mac: '',\n      ip6: '',\n      ip4: '',\n      speed: -1,\n      type: '',\n      operstate: '',\n      duplex: '',\n      internal: false\n    };\n    const first = section[0];\n    nic.iface = first.split(':')[0].trim();\n    let parts = first.split('> mtu');\n    nic.mtu = parts.length > 1 ? parseInt(parts[1], 10) : -1;\n    if (isNaN(nic.mtu)) {\n      nic.mtu = -1;\n    }\n    nic.internal = parts[0].toLowerCase().indexOf('loopback') > -1;\n    section.forEach(line => {\n      if (line.trim().startsWith('ether ')) {\n        nic.mac = line.split('ether ')[1].toLowerCase().trim();\n      }\n      if (line.trim().startsWith('inet6 ') && !nic.ip6) {\n        nic.ip6 = line.split('inet6 ')[1].toLowerCase().split('%')[0].split(' ')[0];\n      }\n      if (line.trim().startsWith('inet ') && !nic.ip4) {\n        nic.ip4 = line.split('inet ')[1].toLowerCase().split(' ')[0];\n      }\n    });\n    let speed = util.getValue(section, 'link rate');\n    nic.speed = speed ? parseFloat(speed) : -1;\n    if (nic.speed === -1) {\n      speed = util.getValue(section, 'uplink rate');\n      nic.speed = speed ? parseFloat(speed) : -1;\n      if (nic.speed > -1 && speed.toLowerCase().indexOf('gbps') >= 0) {\n        nic.speed = nic.speed * 1000;\n      }\n    } else {\n      if (speed.toLowerCase().indexOf('gbps') >= 0) {\n        nic.speed = nic.speed * 1000;\n      }\n    }\n    nic.type = util.getValue(section, 'type').toLowerCase().indexOf('wi-fi') > -1 ? 'wireless' : 'wired';\n    nic.operstate = util.getValue(section, 'status').toLowerCase().indexOf('active') > -1 ? 'up' : 'down';\n    nic.duplex = util.getValue(section, 'media').toLowerCase().indexOf('half-duplex') > -1 ? 'half' : 'full';\n    if (nic.ip6 || nic.ip4 || nic.mac) {\n      nics.push(nic);\n    }\n  });\n  return nics;\n}\n\nfunction getDarwinNics() {\n  const cmd = '/sbin/ifconfig -v';\n  try {\n    const lines = execSync(cmd, { maxBuffer: 1024 * 20000 }).toString().split('\\n');\n    const nsections = splitSectionsNics(lines);\n    return (parseLinesDarwinNics(nsections));\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getLinuxIfaceConnectionName(interfaceName) {\n  const cmd = `nmcli device status 2>/dev/null | grep ${interfaceName}`;\n\n  try {\n    const result = execSync(cmd).toString();\n    const resultFormat = result.replace(/\\s+/g, ' ').trim();\n    const connectionNameLines = resultFormat.split(' ').slice(3);\n    const connectionName = connectionNameLines.join(' ');\n    return connectionName != '--' ? connectionName : '';\n  } catch (e) {\n    return '';\n  }\n}\n\nfunction checkLinuxDCHPInterfaces(file) {\n  let result = [];\n  try {\n    let cmd = `cat ${file} 2> /dev/null | grep 'iface\\\\|source'`;\n    const lines = execSync(cmd, { maxBuffer: 1024 * 20000 }).toString().split('\\n');\n\n    lines.forEach(line => {\n      const parts = line.replace(/\\s+/g, ' ').trim().split(' ');\n      if (parts.length >= 4) {\n        if (line.toLowerCase().indexOf(' inet ') >= 0 && line.toLowerCase().indexOf('dhcp') >= 0) {\n          result.push(parts[1]);\n        }\n      }\n      if (line.toLowerCase().includes('source')) {\n        let file = line.split(' ')[1];\n        result = result.concat(checkLinuxDCHPInterfaces(file));\n      }\n    });\n  } catch (e) {\n    util.noop();\n  }\n  return result;\n}\n\nfunction getLinuxDHCPNics() {\n  // alternate methods getting interfaces using DHCP\n  let cmd = 'ip a 2> /dev/null';\n  let result = [];\n  try {\n    const lines = execSync(cmd, { maxBuffer: 1024 * 20000 }).toString().split('\\n');\n    const nsections = splitSectionsNics(lines);\n    result = (parseLinuxDHCPNics(nsections));\n  } catch (e) {\n    util.noop();\n  }\n  try {\n    result = checkLinuxDCHPInterfaces('/etc/network/interfaces');\n  } catch (e) {\n    util.noop();\n  }\n  return result;\n}\n\nfunction parseLinuxDHCPNics(sections) {\n  const result = [];\n  if (sections && sections.length) {\n    sections.forEach(lines => {\n      if (lines && lines.length) {\n        const parts = lines[0].split(':');\n        if (parts.length > 2) {\n          for (let line of lines) {\n            if (line.indexOf(' inet ') >= 0 && line.indexOf(' dynamic ') >= 0) {\n              const parts2 = line.split(' ');\n              const nic = parts2[parts2.length - 1].trim();\n              result.push(nic);\n              break;\n            }\n          }\n        }\n      }\n    });\n  }\n  return result;\n}\n\nfunction getLinuxIfaceDHCPstatus(iface, connectionName, DHCPNics) {\n  let result = false;\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep ipv4.method;`;\n    try {\n      const lines = execSync(cmd).toString();\n      const resultFormat = lines.replace(/\\s+/g, ' ').trim();\n\n      let dhcStatus = resultFormat.split(' ').slice(1).toString();\n      switch (dhcStatus) {\n        case 'auto':\n          result = true;\n          break;\n\n        default:\n          result = false;\n          break;\n      }\n      return result;\n    } catch (e) {\n      return (DHCPNics.indexOf(iface) >= 0);\n    }\n  } else {\n    return (DHCPNics.indexOf(iface) >= 0);\n  }\n}\n\nfunction getDarwinIfaceDHCPstatus(iface) {\n  let result = false;\n  const cmd = `ipconfig getpacket \"${iface}\" 2>/dev/null \\| grep lease_time;`;\n  try {\n    const lines = execSync(cmd).toString().split('\\n');\n    if (lines.length && lines[0].startsWith('lease_time')) {\n      result = true;\n    }\n  } catch (e) {\n    util.noop();\n  }\n  return result;\n}\n\nfunction getLinuxIfaceDNSsuffix(connectionName) {\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep ipv4.dns-search;`;\n    try {\n      const result = execSync(cmd).toString();\n      const resultFormat = result.replace(/\\s+/g, ' ').trim();\n      const dnsSuffix = resultFormat.split(' ').slice(1).toString();\n      return dnsSuffix == '--' ? 'Not defined' : dnsSuffix;\n    } catch (e) {\n      return 'Unknown';\n    }\n  } else {\n    return 'Unknown';\n  }\n}\n\nfunction getLinuxIfaceIEEE8021xAuth(connectionName) {\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep 802-1x.eap;`;\n    try {\n      const result = execSync(cmd).toString();\n      const resultFormat = result.replace(/\\s+/g, ' ').trim();\n      const authenticationProtocol = resultFormat.split(' ').slice(1).toString();\n\n\n      return authenticationProtocol == '--' ? '' : authenticationProtocol;\n    } catch (e) {\n      return 'Not defined';\n    }\n  } else {\n    return 'Not defined';\n  }\n}\n\nfunction getLinuxIfaceIEEE8021xState(authenticationProtocol) {\n  if (authenticationProtocol) {\n    if (authenticationProtocol == 'Not defined') {\n      return 'Disabled';\n    }\n    return 'Enabled';\n  } else {\n    return 'Unknown';\n  }\n}\n\nfunction testVirtualNic(iface, ifaceName, mac) {\n  const virtualMacs = ['00:00:00:00:00:00', '00:03:FF', '00:05:69', '00:0C:29', '00:0F:4B', '00:0F:4B', '00:13:07', '00:13:BE', '00:15:5d', '00:16:3E', '00:1C:42', '00:21:F6', '00:21:F6', '00:24:0B', '00:24:0B', '00:50:56', '00:A0:B1', '00:E0:C8', '08:00:27', '0A:00:27', '18:92:2C', '16:DF:49', '3C:F3:92', '54:52:00', 'FC:15:97'];\n  if (mac) {\n    return virtualMacs.filter(item => { return mac.toUpperCase().toUpperCase().startsWith(item.substr(0, mac.length)); }).length > 0 ||\n      iface.toLowerCase().indexOf(' virtual ') > -1 ||\n      ifaceName.toLowerCase().indexOf(' virtual ') > -1 ||\n      iface.toLowerCase().indexOf('vethernet ') > -1 ||\n      ifaceName.toLowerCase().indexOf('vethernet ') > -1 ||\n      iface.toLowerCase().startsWith('veth') ||\n      ifaceName.toLowerCase().startsWith('veth') ||\n      iface.toLowerCase().startsWith('vboxnet') ||\n      ifaceName.toLowerCase().startsWith('vboxnet');\n  } else return false;\n}\n\nfunction networkInterfaces(callback, rescan = true) {\n\n  if (typeof callback === 'boolean') {\n    rescan = callback;\n    callback = null;\n  }\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let ifaces = os.networkInterfaces();\n\n      let result = [];\n      let nics = [];\n      let dnsSuffixes = [];\n      let nics8021xInfo = [];\n      // seperate handling in OSX\n      if (_darwin || _freebsd || _openbsd || _netbsd) {\n        nics = getDarwinNics();\n\n\n        nics.forEach(nic => {\n\n          if ({}.hasOwnProperty.call(ifaces, nic.iface)) {\n            ifaces[nic.iface].forEach(function (details) {\n              if (details.family === 'IPv4') {\n                nic.ip4subnet = details.netmask;\n              }\n              if (details.family === 'IPv6') {\n                nic.ip6subnet = details.netmask;\n              }\n            });\n          }\n\n          result.push({\n            iface: nic.iface,\n            ifaceName: nic.iface,\n            ip4: nic.ip4,\n            ip4subnet: nic.ip4subnet || '',\n            ip6: nic.ip6,\n            ip6subnet: nic.ip6subnet || '',\n            mac: nic.mac,\n            internal: nic.internal,\n            virtual: nic.internal ? false : testVirtualNic(nic.iface, nic.iface, nic.mac),\n            operstate: nic.operstate,\n            type: nic.type,\n            duplex: nic.duplex,\n            mtu: nic.mtu,\n            speed: nic.speed,\n            dhcp: getDarwinIfaceDHCPstatus(nic.iface),\n            dnsSuffix: '',\n            ieee8021xAuth: '',\n            ieee8021xState: '',\n            carrierChanges: 0\n          });\n        });\n        _networkInterfaces = result;\n        if (callback) { callback(result); }\n        resolve(result);\n      } else {\n        if ((JSON.stringify(ifaces) === JSON.stringify(_ifaces)) && !rescan) {\n          // no changes - just return object\n          result = _networkInterfaces;\n\n          if (callback) { callback(result); }\n          resolve(result);\n        } else {\n          _ifaces = Object.assign({}, ifaces);\n\n          if (_windows) {\n            nics = getWindowsNics();\n            nics.forEach(nic => {\n              let found = false;\n              Object.keys(ifaces).forEach(key => {\n                if (!found) {\n                  ifaces[key].forEach(value => {\n                    if (Object.keys(value).indexOf('mac') >= 0) {\n                      found = value['mac'] === nic.mac;\n                    }\n                  });\n                }\n              });\n\n              if (!found) {\n                ifaces[nic.name] = [{ mac: nic.mac }];\n              }\n            });\n\n            nics8021xInfo = getWindowsWiredProfilesInformation();\n            dnsSuffixes = getWindowsDNSsuffixes();\n          }\n          if (_linux) {\n            _dhcpNics = getLinuxDHCPNics();\n          }\n          for (let dev in ifaces) {\n            let ip4 = '';\n            let ip4subnet = '';\n            let ip6 = '';\n            let ip6subnet = '';\n            let mac = '';\n            let duplex = '';\n            let mtu = '';\n            let speed = -1;\n            let carrierChanges = 0;\n            let operstate = 'down';\n            let dhcp = false;\n            let dnsSuffix = '';\n            let ieee8021xAuth = '';\n            let ieee8021xState = '';\n            let type = '';\n\n            if ({}.hasOwnProperty.call(ifaces, dev)) {\n              let ifaceName = dev;\n              ifaces[dev].forEach(function (details) {\n                if (details.family === 'IPv4') {\n                  ip4 = details.address;\n                  ip4subnet = details.netmask;\n                }\n                if (details.family === 'IPv6') {\n                  if (!ip6 || ip6.match(/^fe80::/i)) {\n                    ip6 = details.address;\n                    ip6subnet = details.netmask;\n                  }\n                }\n                mac = details.mac;\n                // fallback due to https://github.com/nodejs/node/issues/13581 (node 8.1 - node 8.2)\n                if (mac.indexOf('00:00:0') > -1 && (_linux || _darwin) && parseInt(process.versions.node.split('.'), 10) === 8) {\n                  if (Object.keys(_mac).length === 0) {\n                    _mac = getMacAddresses();\n                  }\n                  mac = _mac[dev] || '';\n                }\n              });\n              if (_linux) {\n                let iface = dev.split(':')[0].trim().toLowerCase();\n                const cmd = `echo -n \"addr_assign_type: \"; cat /sys/class/net/${iface}/addr_assign_type 2>/dev/null; echo;\n            echo -n \"address: \"; cat /sys/class/net/${iface}/address 2>/dev/null; echo;\n            echo -n \"addr_len: \"; cat /sys/class/net/${iface}/addr_len 2>/dev/null; echo;\n            echo -n \"broadcast: \"; cat /sys/class/net/${iface}/broadcast 2>/dev/null; echo;\n            echo -n \"carrier: \"; cat /sys/class/net/${iface}/carrier 2>/dev/null; echo;\n            echo -n \"carrier_changes: \"; cat /sys/class/net/${iface}/carrier_changes 2>/dev/null; echo;\n            echo -n \"dev_id: \"; cat /sys/class/net/${iface}/dev_id 2>/dev/null; echo;\n            echo -n \"dev_port: \"; cat /sys/class/net/${iface}/dev_port 2>/dev/null; echo;\n            echo -n \"dormant: \"; cat /sys/class/net/${iface}/dormant 2>/dev/null; echo;\n            echo -n \"duplex: \"; cat /sys/class/net/${iface}/duplex 2>/dev/null; echo;\n            echo -n \"flags: \"; cat /sys/class/net/${iface}/flags 2>/dev/null; echo;\n            echo -n \"gro_flush_timeout: \"; cat /sys/class/net/${iface}/gro_flush_timeout 2>/dev/null; echo;\n            echo -n \"ifalias: \"; cat /sys/class/net/${iface}/ifalias 2>/dev/null; echo;\n            echo -n \"ifindex: \"; cat /sys/class/net/${iface}/ifindex 2>/dev/null; echo;\n            echo -n \"iflink: \"; cat /sys/class/net/${iface}/iflink 2>/dev/null; echo;\n            echo -n \"link_mode: \"; cat /sys/class/net/${iface}/link_mode 2>/dev/null; echo;\n            echo -n \"mtu: \"; cat /sys/class/net/${iface}/mtu 2>/dev/null; echo;\n            echo -n \"netdev_group: \"; cat /sys/class/net/${iface}/netdev_group 2>/dev/null; echo;\n            echo -n \"operstate: \"; cat /sys/class/net/${iface}/operstate 2>/dev/null; echo;\n            echo -n \"proto_down: \"; cat /sys/class/net/${iface}/proto_down 2>/dev/null; echo;\n            echo -n \"speed: \"; cat /sys/class/net/${iface}/speed 2>/dev/null; echo;\n            echo -n \"tx_queue_len: \"; cat /sys/class/net/${iface}/tx_queue_len 2>/dev/null; echo;\n            echo -n \"type: \"; cat /sys/class/net/${iface}/type 2>/dev/null; echo;\n            echo -n \"wireless: \"; cat /proc/net/wireless 2>/dev/null \\| grep ${iface}; echo;\n            echo -n \"wirelessspeed: \"; iw dev ${iface} link 2>&1 \\| grep bitrate; echo;`;\n\n                let lines = [];\n                try {\n                  lines = execSync(cmd).toString().split('\\n');\n                  const connectionName = getLinuxIfaceConnectionName(iface);\n                  dhcp = getLinuxIfaceDHCPstatus(iface, connectionName, _dhcpNics);\n                  dnsSuffix = getLinuxIfaceDNSsuffix(connectionName);\n                  ieee8021xAuth = getLinuxIfaceIEEE8021xAuth(connectionName);\n                  ieee8021xState = getLinuxIfaceIEEE8021xState(ieee8021xAuth);\n                } catch (e) {\n                  util.noop();\n                }\n                duplex = util.getValue(lines, 'duplex');\n                duplex = duplex.startsWith('cat') ? '' : duplex;\n                mtu = parseInt(util.getValue(lines, 'mtu'), 10);\n                let myspeed = parseInt(util.getValue(lines, 'speed'), 10);\n                speed = isNaN(myspeed) ? -1 : myspeed;\n                let wirelessspeed = util.getValue(lines, 'wirelessspeed').split('tx bitrate: ');\n                if (speed === -1 && wirelessspeed.length === 2) {\n                  myspeed = parseFloat(wirelessspeed[1]);\n                  speed = isNaN(myspeed) ? -1 : myspeed;\n                }\n                carrierChanges = parseInt(util.getValue(lines, 'carrier_changes'), 10);\n                operstate = util.getValue(lines, 'operstate');\n                type = operstate === 'up' ? (util.getValue(lines, 'wireless').trim() ? 'wireless' : 'wired') : 'unknown';\n                if (iface === 'lo' || iface.startsWith('bond')) { type = 'virtual'; }\n              }\n              if (_windows) {\n\n\n                dnsSuffix = getWindowsIfaceDNSsuffix(dnsSuffixes.ifaces, dev);\n                nics.forEach(detail => {\n                  if (detail.mac === mac) {\n                    ifaceName = detail.name;\n                    dhcp = detail.dhcp;\n                    operstate = detail.operstate;\n                    speed = detail.speed;\n                    type = detail.type;\n                  }\n                });\n\n                if (dev.toLowerCase().indexOf('wlan') >= 0 || ifaceName.toLowerCase().indexOf('wlan') >= 0 || ifaceName.toLowerCase().indexOf('802.11n') >= 0 || ifaceName.toLowerCase().indexOf('wireless') >= 0 || ifaceName.toLowerCase().indexOf('wi-fi') >= 0 || ifaceName.toLowerCase().indexOf('wifi') >= 0) {\n                  type = 'wireless';\n                }\n\n                const IEEE8021x = getWindowsIEEE8021x(type, dev, nics8021xInfo);\n                ieee8021xAuth = IEEE8021x.protocol;\n                ieee8021xState = IEEE8021x.state;\n              }\n              let internal = (ifaces[dev] && ifaces[dev][0]) ? ifaces[dev][0].internal : false;\n              if (dev.toLowerCase().indexOf('loopback') > -1 || ifaceName.toLowerCase().indexOf('loopback') > -1) {\n                internal = true;\n              }\n              const virtual = internal ? false : testVirtualNic(dev, ifaceName, mac);\n              result.push({\n                iface: dev,\n                ifaceName,\n                ip4,\n                ip4subnet,\n                ip6,\n                ip6subnet,\n                mac,\n                internal,\n                virtual,\n                operstate,\n                type,\n                duplex,\n                mtu,\n                speed,\n                dhcp,\n                dnsSuffix,\n                ieee8021xAuth,\n                ieee8021xState,\n                carrierChanges,\n              });\n            }\n          }\n          _networkInterfaces = result;\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkInterfaces = networkInterfaces;\n\n// --------------------------\n// NET - Speed\n\nfunction calcNetworkSpeed(iface, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors) {\n  let result = {\n    iface,\n    operstate,\n    rx_bytes,\n    rx_dropped,\n    rx_errors,\n    tx_bytes,\n    tx_dropped,\n    tx_errors,\n    rx_sec: -1,\n    tx_sec: -1,\n    ms: 0\n  };\n\n  if (_network[iface] && _network[iface].ms) {\n    result.ms = Date.now() - _network[iface].ms;\n    result.rx_sec = (rx_bytes - _network[iface].rx_bytes) >= 0 ? (rx_bytes - _network[iface].rx_bytes) / (result.ms / 1000) : 0;\n    result.tx_sec = (tx_bytes - _network[iface].tx_bytes) >= 0 ? (tx_bytes - _network[iface].tx_bytes) / (result.ms / 1000) : 0;\n    _network[iface].rx_bytes = rx_bytes;\n    _network[iface].tx_bytes = tx_bytes;\n    _network[iface].rx_sec = result.rx_sec;\n    _network[iface].tx_sec = result.tx_sec;\n    _network[iface].ms = Date.now();\n    _network[iface].last_ms = result.ms;\n    _network[iface].operstate = operstate;\n  } else {\n    if (!_network[iface]) _network[iface] = {};\n    _network[iface].rx_bytes = rx_bytes;\n    _network[iface].tx_bytes = tx_bytes;\n    _network[iface].rx_sec = -1;\n    _network[iface].tx_sec = -1;\n    _network[iface].ms = Date.now();\n    _network[iface].last_ms = 0;\n    _network[iface].operstate = operstate;\n  }\n  return result;\n}\n\nfunction networkStats(ifaces, callback) {\n\n  let ifacesArray = [];\n  // fallback - if only callback is given\n  if (util.isFunction(ifaces) && !callback) {\n    callback = ifaces;\n    ifacesArray = [getDefaultNetworkInterface()];\n  } else {\n    ifaces = ifaces || getDefaultNetworkInterface();\n    ifaces = ifaces.trim().toLowerCase().replace(/,+/g, '|');\n    ifacesArray = ifaces.split('|');\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      const result = [];\n\n      const workload = [];\n      if (ifacesArray.length && ifacesArray[0].trim() === '*') {\n        ifacesArray = [];\n        networkInterfaces(false).then(allIFaces => {\n          for (let iface of allIFaces) {\n            ifacesArray.push(iface.iface);\n          }\n          networkStats(ifacesArray.join(',')).then(result => {\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        });\n      } else {\n        for (let iface of ifacesArray) {\n          workload.push(networkStatsSingle(iface.trim()));\n        }\n        if (workload.length) {\n          Promise.all(\n            workload\n          ).then(data => {\n            if (callback) { callback(data); }\n            resolve(data);\n          });\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nfunction networkStatsSingle(iface) {\n\n  function parseLinesWindowsPerfData(sections) {\n    let perfData = [];\n    for (let i in sections) {\n      if ({}.hasOwnProperty.call(sections, i)) {\n        if (sections[i].trim() !== '') {\n          let lines = sections[i].trim().split('\\r\\n');\n          perfData.push({\n            name: util.getValue(lines, 'Name', '=').replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase(),\n            rx_bytes: parseInt(util.getValue(lines, 'BytesReceivedPersec', '='), 10),\n            rx_errors: parseInt(util.getValue(lines, 'PacketsReceivedErrors', '='), 10),\n            rx_dropped: parseInt(util.getValue(lines, 'PacketsReceivedDiscarded', '='), 10),\n            tx_bytes: parseInt(util.getValue(lines, 'BytesSentPersec', '='), 10),\n            tx_errors: parseInt(util.getValue(lines, 'PacketsOutboundErrors', '='), 10),\n            tx_dropped: parseInt(util.getValue(lines, 'PacketsOutboundDiscarded', '='), 10)\n          });\n        }\n      }\n    }\n    return perfData;\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      const ifaceSanitized = util.isPrototypePolluted() ? '---' : util.sanitizeShellString(iface);\n\n      let result = {\n        iface: ifaceSanitized,\n        operstate: 'unknown',\n        rx_bytes: 0,\n        rx_dropped: 0,\n        rx_errors: 0,\n        tx_bytes: 0,\n        tx_dropped: 0,\n        tx_errors: 0,\n        rx_sec: -1,\n        tx_sec: -1,\n        ms: 0\n      };\n\n      let operstate = 'unknown';\n      let rx_bytes = 0;\n      let tx_bytes = 0;\n      let rx_dropped = 0;\n      let rx_errors = 0;\n      let tx_dropped = 0;\n      let tx_errors = 0;\n\n      let cmd, lines, stats;\n      if (!_network[ifaceSanitized] || (_network[ifaceSanitized] && !_network[ifaceSanitized].ms) || (_network[ifaceSanitized] && _network[ifaceSanitized].ms && Date.now() - _network[ifaceSanitized].ms >= 500)) {\n        if (_linux) {\n          if (fs.existsSync('/sys/class/net/' + ifaceSanitized)) {\n            cmd =\n              'cat /sys/class/net/' + ifaceSanitized + '/operstate; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_bytes; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_bytes; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_dropped; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_errors; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_dropped; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_errors; ';\n            exec(cmd, function (error, stdout) {\n              if (!error) {\n                lines = stdout.toString().split('\\n');\n                operstate = lines[0].trim();\n                rx_bytes = parseInt(lines[1], 10);\n                tx_bytes = parseInt(lines[2], 10);\n                rx_dropped = parseInt(lines[3], 10);\n                rx_errors = parseInt(lines[4], 10);\n                tx_dropped = parseInt(lines[5], 10);\n                tx_errors = parseInt(lines[6], 10);\n\n                result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n\n              }\n              resolve(result);\n            });\n          } else {\n            resolve(result);\n          }\n        }\n        if (_freebsd || _openbsd || _netbsd) {\n          cmd = 'netstat -ibndI ' + ifaceSanitized;\n          exec(cmd, function (error, stdout) {\n            if (!error) {\n              lines = stdout.toString().split('\\n');\n              for (let i = 1; i < lines.length; i++) {\n                const line = lines[i].replace(/ +/g, ' ').split(' ');\n                if (line && line[0] && line[7] && line[10]) {\n                  rx_bytes = rx_bytes + parseInt(line[7]);\n                  if (line[6].trim() !== '-') { rx_dropped = rx_dropped + parseInt(line[6]); }\n                  if (line[5].trim() !== '-') { rx_errors = rx_errors + parseInt(line[5]); }\n                  tx_bytes = tx_bytes + parseInt(line[10]);\n                  if (line[12].trim() !== '-') { tx_dropped = tx_dropped + parseInt(line[12]); }\n                  if (line[9].trim() !== '-') { tx_errors = tx_errors + parseInt(line[9]); }\n                  operstate = 'up';\n                }\n              }\n              result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n            }\n            resolve(result);\n          });\n        }\n        if (_darwin) {\n          cmd = 'ifconfig ' + ifaceSanitized + ' | grep \"status\"';\n          exec(cmd, function (error, stdout) {\n            result.operstate = (stdout.toString().split(':')[1] || '').trim();\n            result.operstate = (result.operstate || '').toLowerCase();\n            result.operstate = (result.operstate === 'active' ? 'up' : (result.operstate === 'inactive' ? 'down' : 'unknown'));\n            cmd = 'netstat -bdI ' + ifaceSanitized;\n            exec(cmd, function (error, stdout) {\n              if (!error) {\n                lines = stdout.toString().split('\\n');\n                // if there is less than 2 lines, no information for this interface was found\n                if (lines.length > 1 && lines[1].trim() !== '') {\n                  // skip header line\n                  // use the second line because it is tied to the NIC instead of the ipv4 or ipv6 address\n                  stats = lines[1].replace(/ +/g, ' ').split(' ');\n                  const offset = stats.length > 11 ? 1 : 0;\n                  rx_bytes = parseInt(stats[offset + 5]);\n                  rx_dropped = parseInt(stats[offset + 10]);\n                  rx_errors = parseInt(stats[offset + 4]);\n                  tx_bytes = parseInt(stats[offset + 8]);\n                  tx_dropped = parseInt(stats[offset + 10]);\n                  tx_errors = parseInt(stats[offset + 7]);\n                  result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, result.operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n                }\n              }\n              resolve(result);\n            });\n          });\n        }\n        if (_windows) {\n          let perfData = [];\n          let ifaceName = ifaceSanitized;\n\n          // Performance Data\n          util.wmic('path Win32_PerfRawData_Tcpip_NetworkInterface Get name,BytesReceivedPersec,BytesSentPersec,BytesTotalPersec,PacketsOutboundDiscarded,PacketsOutboundErrors,PacketsReceivedDiscarded,PacketsReceivedErrors /value').then((stdout, error) => {\n            if (!error) {\n              const psections = stdout.toString().split(/\\n\\s*\\n/);\n              perfData = parseLinesWindowsPerfData(psections);\n            }\n\n            // Network Interfaces\n            networkInterfaces(false).then(interfaces => {\n              // get bytes sent, received from perfData by name\n              rx_bytes = 0;\n              tx_bytes = 0;\n              perfData.forEach(detail => {\n                interfaces.forEach(det => {\n                  if ((det.iface.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.mac.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.ip4.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.ip6.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.ifaceName.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase() === ifaceSanitized.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase()) &&\n                    (det.ifaceName.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase() === detail.name)) {\n                    ifaceName = det.iface;\n                    rx_bytes = detail.rx_bytes;\n                    rx_dropped = detail.rx_dropped;\n                    rx_errors = detail.rx_errors;\n                    tx_bytes = detail.tx_bytes;\n                    tx_dropped = detail.tx_dropped;\n                    tx_errors = detail.tx_errors;\n                    operstate = det.operstate;\n                  }\n                });\n              });\n              if (rx_bytes && tx_bytes) {\n                result = calcNetworkSpeed(ifaceName, parseInt(rx_bytes), parseInt(tx_bytes), operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n              }\n              resolve(result);\n            });\n          });\n        }\n      } else {\n        result.rx_bytes = _network[ifaceSanitized].rx_bytes;\n        result.tx_bytes = _network[ifaceSanitized].tx_bytes;\n        result.rx_sec = _network[ifaceSanitized].rx_sec;\n        result.tx_sec = _network[ifaceSanitized].tx_sec;\n        result.ms = _network[ifaceSanitized].last_ms;\n        result.operstate = _network[ifaceSanitized].operstate;\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.networkStats = networkStats;\n\n// --------------------------\n// NET - connections (sockets)\n\nfunction networkConnections(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = [];\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        let cmd = 'export LC_ALL=C; netstat -tunap | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"; unset LC_ALL';\n        if (_freebsd || _openbsd || _netbsd) cmd = 'export LC_ALL=C; netstat -na | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"; unset LC_ALL';\n        exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          if (!error && (lines.length > 1 || lines[0] != '')) {\n            lines.forEach(function (line) {\n              line = line.replace(/ +/g, ' ').split(' ');\n              if (line.length >= 7) {\n                let localip = line[3];\n                let localport = '';\n                let localaddress = line[3].split(':');\n                if (localaddress.length > 1) {\n                  localport = localaddress[localaddress.length - 1];\n                  localaddress.pop();\n                  localip = localaddress.join(':');\n                }\n                let peerip = line[4];\n                let peerport = '';\n                let peeraddress = line[4].split(':');\n                if (peeraddress.length > 1) {\n                  peerport = peeraddress[peeraddress.length - 1];\n                  peeraddress.pop();\n                  peerip = peeraddress.join(':');\n                }\n                let connstate = line[5];\n                // if (connstate === 'VERBUNDEN') connstate = 'ESTABLISHED';\n                let proc = line[6].split('/');\n\n                if (connstate) {\n                  result.push({\n                    protocol: line[0],\n                    localaddress: localip,\n                    localport: localport,\n                    peeraddress: peerip,\n                    peerport: peerport,\n                    state: connstate,\n                    pid: proc[0] && proc[0] !== '-' ? parseInt(proc[0], 10) : -1,\n                    process: proc[1] ? proc[1].split(' ')[0] : ''\n                  });\n                }\n              }\n            });\n            if (callback) {\n              callback(result);\n            }\n            resolve(result);\n          } else {\n            cmd = 'ss -tunap | grep \"ESTAB\\\\|SYN-SENT\\\\|SYN-RECV\\\\|FIN-WAIT1\\\\|FIN-WAIT2\\\\|TIME-WAIT\\\\|CLOSE\\\\|CLOSE-WAIT\\\\|LAST-ACK\\\\|LISTEN\\\\|CLOSING\"';\n            exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n\n              if (!error) {\n                let lines = stdout.toString().split('\\n');\n                lines.forEach(function (line) {\n                  line = line.replace(/ +/g, ' ').split(' ');\n                  if (line.length >= 6) {\n                    let localip = line[4];\n                    let localport = '';\n                    let localaddress = line[4].split(':');\n                    if (localaddress.length > 1) {\n                      localport = localaddress[localaddress.length - 1];\n                      localaddress.pop();\n                      localip = localaddress.join(':');\n                    }\n                    let peerip = line[5];\n                    let peerport = '';\n                    let peeraddress = line[5].split(':');\n                    if (peeraddress.length > 1) {\n                      peerport = peeraddress[peeraddress.length - 1];\n                      peeraddress.pop();\n                      peerip = peeraddress.join(':');\n                    }\n                    let connstate = line[1];\n                    if (connstate === 'ESTAB') connstate = 'ESTABLISHED';\n                    if (connstate === 'TIME-WAIT') connstate = 'TIME_WAIT';\n                    let pid = -1;\n                    let process = '';\n                    if (line.length >= 7 && line[6].indexOf('users:') > -1) {\n                      let proc = line[6].replace('users:((\"', '').replace(/\"/g, '').split(',');\n                      if (proc.length > 2) {\n                        process = proc[0].split(' ')[0];\n                        pid = parseInt(proc[1], 10);\n                      }\n                    }\n                    if (connstate) {\n                      result.push({\n                        protocol: line[0],\n                        localaddress: localip,\n                        localport: localport,\n                        peeraddress: peerip,\n                        peerport: peerport,\n                        state: connstate,\n                        pid,\n                        process\n                      });\n                    }\n                  }\n                });\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n          }\n        });\n      }\n      if (_darwin) {\n        let cmd = 'netstat -natv | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"';\n        exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n          if (!error) {\n\n            let lines = stdout.toString().split('\\n');\n\n            lines.forEach(function (line) {\n              line = line.replace(/ +/g, ' ').split(' ');\n              if (line.length >= 8) {\n                let localip = line[3];\n                let localport = '';\n                let localaddress = line[3].split('.');\n                if (localaddress.length > 1) {\n                  localport = localaddress[localaddress.length - 1];\n                  localaddress.pop();\n                  localip = localaddress.join('.');\n                }\n                let peerip = line[4];\n                let peerport = '';\n                let peeraddress = line[4].split('.');\n                if (peeraddress.length > 1) {\n                  peerport = peeraddress[peeraddress.length - 1];\n                  peeraddress.pop();\n                  peerip = peeraddress.join('.');\n                }\n                let connstate = line[5];\n                let pid = parseInt(line[8], 10);\n                if (connstate) {\n                  result.push({\n                    protocol: line[0],\n                    localaddress: localip,\n                    localport: localport,\n                    peeraddress: peerip,\n                    peerport: peerport,\n                    state: connstate,\n                    pid: pid,\n                    process: ''\n                  });\n                }\n              }\n            });\n            if (callback) {\n              callback(result);\n            }\n            resolve(result);\n          }\n        });\n      }\n      if (_windows) {\n        let cmd = 'netstat -nao';\n        try {\n          exec(cmd, util.execOptsWin, function (error, stdout) {\n            if (!error) {\n\n              let lines = stdout.toString().split('\\r\\n');\n\n              lines.forEach(function (line) {\n                line = line.trim().replace(/ +/g, ' ').split(' ');\n                if (line.length >= 4) {\n                  let localip = line[1];\n                  let localport = '';\n                  let localaddress = line[1].split(':');\n                  if (localaddress.length > 1) {\n                    localport = localaddress[localaddress.length - 1];\n                    localaddress.pop();\n                    localip = localaddress.join(':');\n                  }\n                  let peerip = line[2];\n                  let peerport = '';\n                  let peeraddress = line[2].split(':');\n                  if (peeraddress.length > 1) {\n                    peerport = peeraddress[peeraddress.length - 1];\n                    peeraddress.pop();\n                    peerip = peeraddress.join(':');\n                  }\n                  let pid = line[4];\n                  let connstate = line[3];\n                  if (connstate === 'HERGESTELLT') connstate = 'ESTABLISHED';\n                  if (connstate.startsWith('ABH')) connstate = 'LISTEN';\n                  if (connstate === 'SCHLIESSEN_WARTEN') connstate = 'CLOSE_WAIT';\n                  if (connstate === 'WARTEND') connstate = 'TIME_WAIT';\n                  if (connstate === 'SYN_GESENDET') connstate = 'SYN_SENT';\n\n                  if (connstate === 'LISTENING') connstate = 'LISTEN';\n                  if (connstate === 'SYN_RECEIVED') connstate = 'SYN_RECV';\n                  if (connstate === 'FIN_WAIT_1') connstate = 'FIN_WAIT1';\n                  if (connstate === 'FIN_WAIT_2') connstate = 'FIN_WAIT2';\n                  if (connstate) {\n                    result.push({\n                      protocol: line[0].toLowerCase(),\n                      localaddress: localip,\n                      localport: localport,\n                      peeraddress: peerip,\n                      peerport: peerport,\n                      state: connstate,\n                      pid,\n                      process: ''\n                    });\n                  }\n                }\n              });\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkConnections = networkConnections;\n\nfunction networkGatewayDefault(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = '';\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        let cmd = 'ip route get 1';\n        try {\n          exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              const line = lines && lines[0] ? lines[0] : '';\n              let parts = line.split(' via ');\n              if (parts && parts[1]) {\n                parts = parts[1].split(' ');\n                result = parts[0];\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            } else {\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_darwin) {\n        let cmd = 'route -n get default';\n        try {\n          exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n').map(line => line.trim());\n              result = util.getValue(lines, 'gateway');\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            } else {\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_windows) {\n        try {\n          exec('netstat -r', util.execOptsWin, function (error, stdout) {\n            const lines = stdout.toString().split(os.EOL);\n            lines.forEach(line => {\n              line = line.replace(/\\s+/g, ' ').trim();\n              if (line.indexOf('0.0.0.0 0.0.0.0') > -1 && !(/[a-zA-Z]/.test(line))) {\n                const parts = line.split(' ');\n                if (parts.length >= 5 && (parts[parts.length - 3]).indexOf('.') > -1) {\n                  result = parts[parts.length - 3];\n                }\n              }\n            });\n            if (!result) {\n              util.powerShell('Get-CimInstance -ClassName Win32_IP4RouteTable | Where-Object { $_.Destination -eq \\'0.0.0.0\\' -and $_.Mask -eq \\'0.0.0.0\\' }')\n                .then(data => {\n                  let lines = data.toString().split('\\r\\n');\n                  if (lines.length > 1 && !result) {\n                    result = util.getValue(lines, 'NextHop');\n                    if (callback) {\n                      callback(result);\n                    }\n                    resolve(result);\n                    // } else {\n                    //   exec('ipconfig', util.execOptsWin, function (error, stdout) {\n                    //     let lines = stdout.toString().split('\\r\\n');\n                    //     lines.forEach(function (line) {\n                    //       line = line.trim().replace(/\\. /g, '');\n                    //       line = line.trim().replace(/ +/g, '');\n                    //       const parts = line.split(':');\n                    //       if ((parts[0].toLowerCase().startsWith('standardgate') || parts[0].toLowerCase().indexOf('gateway') > -1 || parts[0].toLowerCase().indexOf('enlace') > -1) && parts[1]) {\n                    //         result = parts[1];\n                    //       }\n                    //     });\n                    //     if (callback) { callback(result); }\n                    //     resolve(result);\n                    //   });\n                  }\n                });\n            } else {\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkGatewayDefault = networkGatewayDefault;\n", "'use strict';\n// @ts-check\n// ==================================================================================\n// processes.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 10. Processes\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst fs = require('fs');\nconst path = require('path');\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nconst _processes_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\nconst _services_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\nconst _process_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\n\nconst _winStatusValues = {\n  '0': 'unknown',\n  '1': 'other',\n  '2': 'ready',\n  '3': 'running',\n  '4': 'blocked',\n  '5': 'suspended blocked',\n  '6': 'suspended ready',\n  '7': 'terminated',\n  '8': 'stopped',\n  '9': 'growing',\n};\n\n\nfunction parseTimeWin(time) {\n  time = time || '';\n  if (time) {\n    return (time.substr(0, 4) + '-' + time.substr(4, 2) + '-' + time.substr(6, 2) + ' ' + time.substr(8, 2) + ':' + time.substr(10, 2) + ':' + time.substr(12, 2));\n  } else {\n    return '';\n  }\n}\n\nfunction parseTimeUnix(time) {\n  let result = time;\n  let parts = time.replace(/ +/g, ' ').split(' ');\n  if (parts.length === 5) {\n    result = parts[4] + '-' + ('0' + ('JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'.indexOf(parts[1].toUpperCase()) / 3 + 1)).slice(-2) + '-' + ('0' + parts[2]).slice(-2) + ' ' + parts[3];\n  }\n  return result;\n}\n\n// --------------------------\n// PS - services\n// pass a comma separated string with services to check (mysql, apache, postgresql, ...)\n// this function gives an array back, if the services are running.\n\nfunction services(srv, callback) {\n\n  // fallback - if only callback is given\n  if (util.isFunction(srv) && !callback) {\n    callback = srv;\n    srv = '';\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      if (srv) {\n        let srvString = util.sanitizeShellString(srv);\n        srvString = srvString.trim().toLowerCase().replace(/, /g, '|').replace(/,+/g, '|');\n        if (srvString === '') {\n          srvString = '*';\n        }\n        if (util.isPrototypePolluted() && srvString !== '*') {\n          srvString = '------';\n        }\n        let srvs = srvString.split('|');\n        let result = [];\n        let dataSrv = [];\n        let allSrv = [];\n\n        if (_linux || _freebsd || _openbsd || _netbsd || _darwin) {\n          if ((_linux || _freebsd || _openbsd || _netbsd) && srvString === '*') {\n            srvString = '';\n            let tmpsrv = execSync('service --status-all 2> /dev/null').toString().split('\\n');\n            for (const s of tmpsrv) {\n              const parts = s.split(']');\n              if (parts.length === 2) {\n                srvString += (srvString !== '' ? '|' : '') + parts[1].trim();\n                allSrv.push({ name: parts[1].trim(), running: parts[0].indexOf('+') > 0 });\n              }\n            }\n            srvs = srvString.split('|');\n          }\n          let comm = (_darwin) ? 'ps -caxo pcpu,pmem,pid,command' : 'ps -axo pcpu,pmem,pid,command';\n          if (srvString !== '' && srvs.length > 0) {\n            exec(comm + ' | grep -v grep | grep -iE \"' + srvString + '\"', { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n              if (!error) {\n                let lines = stdout.toString().replace(/ +/g, ' ').replace(/,+/g, '.').split('\\n');\n                srvs.forEach(function (srv) {\n                  let ps;\n                  if (_darwin) {\n                    ps = lines.filter(function (e) {\n                      return (e.toLowerCase().indexOf(srv) !== -1);\n                    });\n\n                  } else {\n                    ps = lines.filter(function (e) {\n                      return (e.toLowerCase().indexOf(' ' + srv + ':') !== -1) || (e.toLowerCase().indexOf('/' + srv) !== -1);\n                    });\n                  }\n                  let singleSrv = allSrv.filter(item => { return item.name === srv; });\n                  const pids = [];\n                  for (const p of ps) {\n                    const pid = p.trim().split(' ')[2];\n                    if (pid) {\n                      pids.push(parseInt(pid, 10));\n                    }\n                  }\n                  result.push({\n                    name: srv,\n                    running: (allSrv.length && singleSrv.length ? singleSrv[0].running : ps.length > 0),\n                    startmode: '',\n                    pids: pids,\n                    pcpu: parseFloat((ps.reduce(function (pv, cv) {\n                      return pv + parseFloat(cv.trim().split(' ')[0]);\n                    }, 0)).toFixed(2)),\n                    pmem: parseFloat((ps.reduce(function (pv, cv) {\n                      return pv + parseFloat(cv.trim().split(' ')[1]);\n                    }, 0)).toFixed(2))\n                  });\n                });\n                if (_linux) {\n                  // calc process_cpu - ps is not accurate in linux!\n                  let cmd = 'cat /proc/stat | grep \"cpu \"';\n                  for (let i in result) {\n                    for (let j in result[i].pids) {\n                      cmd += (';cat /proc/' + result[i].pids[j] + '/stat');\n                    }\n                  }\n                  exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                    let curr_processes = stdout.toString().split('\\n');\n\n                    // first line (all - /proc/stat)\n                    let all = parseProcStat(curr_processes.shift());\n\n                    // process\n                    let list_new = {};\n                    let resultProcess = {};\n                    for (let i = 0; i < curr_processes.length; i++) {\n                      resultProcess = calcProcStatLinux(curr_processes[i], all, _services_cpu);\n\n                      if (resultProcess.pid) {\n                        let listPos = -1;\n                        for (let i in result) {\n                          for (let j in result[i].pids) {\n                            if (parseInt(result[i].pids[j]) === parseInt(resultProcess.pid)) {\n                              listPos = i;\n                            }\n                          }\n                        }\n                        if (listPos >= 0) {\n                          result[listPos].pcpu += resultProcess.pcpuu + resultProcess.pcpus;\n                        }\n\n                        // save new values\n                        list_new[resultProcess.pid] = {\n                          pcpuu: resultProcess.pcpuu,\n                          pcpus: resultProcess.pcpus,\n                          utime: resultProcess.utime,\n                          stime: resultProcess.stime,\n                          cutime: resultProcess.cutime,\n                          cstime: resultProcess.cstime\n                        };\n                      }\n                    }\n\n                    // store old values\n                    _services_cpu.all = all;\n                    // _services_cpu.list = list_new;\n                    _services_cpu.list = Object.assign({}, list_new);\n                    _services_cpu.ms = Date.now() - _services_cpu.ms;\n                    // _services_cpu.result = result;\n                    _services_cpu.result = Object.assign({}, result);\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  });\n                } else {\n                  if (callback) { callback(result); }\n                  resolve(result);\n                }\n              } else {\n                exec('ps -o comm | grep -v grep | egrep \"' + srvString + '\"', { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                  if (!error) {\n                    let lines = stdout.toString().replace(/ +/g, ' ').replace(/,+/g, '.').split('\\n');\n                    srvs.forEach(function (srv) {\n                      let ps = lines.filter(function (e) {\n                        return e.indexOf(srv) !== -1;\n                      });\n                      result.push({\n                        name: srv,\n                        running: ps.length > 0,\n                        startmode: '',\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                    });\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  } else {\n                    srvs.forEach(function (srv) {\n                      result.push({\n                        name: srv,\n                        running: false,\n                        startmode: '',\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                    });\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  }\n                });\n              }\n            });\n          } else {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        }\n        if (_windows) {\n          try {\n            util.wmic('service get /value').then((stdout, error) => {\n              if (!error) {\n                let serviceSections = stdout.split(/\\n\\s*\\n/);\n                for (let i = 0; i < serviceSections.length; i++) {\n                  if (serviceSections[i].trim() !== '') {\n                    let lines = serviceSections[i].trim().split('\\r\\n');\n                    let srvName = util.getValue(lines, 'Name', '=', true).toLowerCase();\n                    let started = util.getValue(lines, 'Started', '=', true);\n                    let startMode = util.getValue(lines, 'StartMode', '=', true);\n                    let pid = util.getValue(lines, 'ProcessId', '=', true);\n                    if (srvString === '*' || srvs.indexOf(srvName) >= 0) {\n                      result.push({\n                        name: srvName,\n                        running: (started === 'TRUE'),\n                        startmode: startMode,\n                        pids: [pid],\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                      dataSrv.push(srvName);\n                    }\n                  }\n                }\n                if (srvString !== '*') {\n                  let srvsMissing = srvs.filter(function (e) {\n                    return dataSrv.indexOf(e) === -1;\n                  });\n                  srvsMissing.forEach(function (srvName) {\n                    result.push({\n                      name: srvName,\n                      running: false,\n                      startmode: '',\n                      pids: [],\n                      pcpu: 0,\n                      pmem: 0\n                    });\n                  });\n                }\n                if (callback) { callback(result); }\n                resolve(result);\n              } else {\n                srvs.forEach(function (srvName) {\n                  result.push({\n                    name: srvName,\n                    running: false,\n                    startmode: '',\n                    pcpu: 0,\n                    pmem: 0\n                  });\n                });\n                if (callback) { callback(result); }\n                resolve(result);\n              }\n            });\n          } catch (e) {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        }\n      } else {\n        if (callback) { callback({}); }\n        resolve({});\n      }\n    });\n  });\n}\n\nexports.services = services;\n\nfunction parseProcStat(line) {\n  let parts = line.replace(/ +/g, ' ').split(' ');\n  let user = (parts.length >= 2 ? parseInt(parts[1]) : 0);\n  let nice = (parts.length >= 3 ? parseInt(parts[2]) : 0);\n  let system = (parts.length >= 4 ? parseInt(parts[3]) : 0);\n  let idle = (parts.length >= 5 ? parseInt(parts[4]) : 0);\n  let iowait = (parts.length >= 6 ? parseInt(parts[5]) : 0);\n  let irq = (parts.length >= 7 ? parseInt(parts[6]) : 0);\n  let softirq = (parts.length >= 8 ? parseInt(parts[7]) : 0);\n  let steal = (parts.length >= 9 ? parseInt(parts[8]) : 0);\n  let guest = (parts.length >= 10 ? parseInt(parts[9]) : 0);\n  let guest_nice = (parts.length >= 11 ? parseInt(parts[10]) : 0);\n  return user + nice + system + idle + iowait + irq + softirq + steal + guest + guest_nice;\n}\n\nfunction calcProcStatLinux(line, all, _cpu_old) {\n  let statparts = line.replace(/ +/g, ' ').split(')');\n  if (statparts.length >= 2) {\n    let parts = statparts[1].split(' ');\n    if (parts.length >= 16) {\n      let pid = parseInt(statparts[0].split(' ')[0]);\n      let utime = parseInt(parts[12]);\n      let stime = parseInt(parts[13]);\n      let cutime = parseInt(parts[14]);\n      let cstime = parseInt(parts[15]);\n\n      // calc\n      let pcpuu = 0;\n      let pcpus = 0;\n      if (_cpu_old.all > 0 && _cpu_old.list[pid]) {\n        pcpuu = (utime + cutime - _cpu_old.list[pid].utime - _cpu_old.list[pid].cutime) / (all - _cpu_old.all) * 100; // user\n        pcpus = (stime + cstime - _cpu_old.list[pid].stime - _cpu_old.list[pid].cstime) / (all - _cpu_old.all) * 100; // system\n      } else {\n        pcpuu = (utime + cutime) / (all) * 100; // user\n        pcpus = (stime + cstime) / (all) * 100; // system\n      }\n      return {\n        pid: pid,\n        utime: utime,\n        stime: stime,\n        cutime: cutime,\n        cstime: cstime,\n        pcpuu: pcpuu,\n        pcpus: pcpus\n      };\n    } else {\n      return {\n        pid: 0,\n        utime: 0,\n        stime: 0,\n        cutime: 0,\n        cstime: 0,\n        pcpuu: 0,\n        pcpus: 0\n      };\n    }\n  } else {\n    return {\n      pid: 0,\n      utime: 0,\n      stime: 0,\n      cutime: 0,\n      cstime: 0,\n      pcpuu: 0,\n      pcpus: 0\n    };\n  }\n}\n\nfunction calcProcStatWin(procStat, all, _cpu_old) {\n  // calc\n  let pcpuu = 0;\n  let pcpus = 0;\n  if (_cpu_old.all > 0 && _cpu_old.list[procStat.pid]) {\n    pcpuu = (procStat.utime - _cpu_old.list[procStat.pid].utime) / (all - _cpu_old.all) * 100; // user\n    pcpus = (procStat.stime - _cpu_old.list[procStat.pid].stime) / (all - _cpu_old.all) * 100; // system\n  } else {\n    pcpuu = (procStat.utime) / (all) * 100; // user\n    pcpus = (procStat.stime) / (all) * 100; // system\n  }\n  return {\n    pid: procStat.pid,\n    utime: procStat.utime,\n    stime: procStat.stime,\n    pcpuu: pcpuu,\n    pcpus: pcpus\n  };\n}\n\n\n\n// --------------------------\n// running processes\n\nfunction processes(callback) {\n\n  let parsedhead = [];\n\n  function getName(command) {\n    command = command || '';\n    let result = command.split(' ')[0];\n    if (result.substr(-1) === ':') {\n      result = result.substr(0, result.length - 1);\n    }\n    if (result.substr(0, 1) !== '[') {\n      let parts = result.split('/');\n      if (isNaN(parseInt(parts[parts.length - 1]))) {\n        result = parts[parts.length - 1];\n      } else {\n        result = parts[0];\n      }\n    }\n    return result;\n  }\n\n  function parseLine(line) {\n\n    let offset = 0;\n    let offset2 = 0;\n\n    function checkColumn(i) {\n      offset = offset2;\n      offset2 = line.substring(parsedhead[i].to + offset, 1000).indexOf(' ');\n    }\n\n    checkColumn(0);\n    const pid = parseInt(line.substring(parsedhead[0].from + offset, parsedhead[0].to + offset2));\n    checkColumn(1);\n    const ppid = parseInt(line.substring(parsedhead[1].from + offset, parsedhead[1].to + offset2));\n    checkColumn(2);\n    const pcpu = parseFloat(line.substring(parsedhead[2].from + offset, parsedhead[2].to + offset2).replace(/,/g, '.'));\n    checkColumn(3);\n    const pmem = parseFloat(line.substring(parsedhead[3].from + offset, parsedhead[3].to + offset2).replace(/,/g, '.'));\n    checkColumn(4);\n    const priority = parseInt(line.substring(parsedhead[4].from + offset, parsedhead[4].to + offset2));\n    checkColumn(5);\n    const vsz = parseInt(line.substring(parsedhead[5].from + offset, parsedhead[5].to + offset2));\n    checkColumn(6);\n    const rss = parseInt(line.substring(parsedhead[6].from + offset, parsedhead[6].to + offset2));\n    checkColumn(7);\n    const nice = parseInt(line.substring(parsedhead[7].from + offset, parsedhead[7].to + offset2)) || 0;\n    checkColumn(8);\n    const started = parseTimeUnix(line.substring(parsedhead[8].from + offset, parsedhead[8].to + offset2).trim());\n    checkColumn(9);\n    let state = line.substring(parsedhead[9].from + offset, parsedhead[9].to + offset2).trim();\n    state = (state[0] === 'R' ? 'running' : (state[0] === 'S' ? 'sleeping' : (state[0] === 'T' ? 'stopped' : (state[0] === 'W' ? 'paging' : (state[0] === 'X' ? 'dead' : (state[0] === 'Z' ? 'zombie' : ((state[0] === 'D' || state[0] === 'U') ? 'blocked' : 'unknown')))))));\n    checkColumn(10);\n    let tty = line.substring(parsedhead[10].from + offset, parsedhead[10].to + offset2).trim();\n    if (tty === '?' || tty === '??') tty = '';\n    checkColumn(11);\n    const user = line.substring(parsedhead[11].from + offset, parsedhead[11].to + offset2).trim();\n    checkColumn(12);\n    const fullcommand = line.substring(parsedhead[12].from + offset, parsedhead[12].to + offset2).trim().replace(/\\[/g, '').replace(/]/g, '');\n    let cmdPath = '';\n    let command = '';\n    let params = '';\n    // try to figure out where parameter starts\n    let firstParamPos = fullcommand.indexOf(' -');\n    let firstParamPathPos = fullcommand.indexOf(' /');\n    firstParamPos = (firstParamPos >= 0 ? firstParamPos : 10000);\n    firstParamPathPos = (firstParamPathPos >= 0 ? firstParamPathPos : 10000);\n    const firstPos = Math.min(firstParamPos, firstParamPathPos);\n    let tmpCommand = fullcommand.substr(0, firstPos);\n    const tmpParams = fullcommand.substr(firstPos);\n    const lastSlashPos = tmpCommand.lastIndexOf('/');\n    if (lastSlashPos >= 0) {\n      cmdPath = tmpCommand.substr(0, lastSlashPos);\n      tmpCommand = tmpCommand.substr(lastSlashPos + 1);\n    }\n\n    if (firstPos === 10000 && tmpCommand.indexOf(' ') > -1) {\n      const parts = tmpCommand.split(' ');\n      if (fs.existsSync(path.join(cmdPath, parts[0]))) {\n        command = parts.shift();\n        params = (parts.join(' ') + ' ' + tmpParams).trim();\n      } else {\n        command = tmpCommand.trim();\n        params = tmpParams.trim();\n      }\n    } else {\n      command = tmpCommand.trim();\n      params = tmpParams.trim();\n    }\n\n    return ({\n      pid: pid,\n      parentPid: ppid,\n      name: _linux ? getName(command) : command,\n      pcpu: pcpu,\n      pcpuu: 0,\n      pcpus: 0,\n      pmem: pmem,\n      priority: priority,\n      mem_vsz: vsz,\n      mem_rss: rss,\n      nice: nice,\n      started: started,\n      state: state,\n      tty: tty,\n      user: user,\n      command: command,\n      params: params,\n      path: cmdPath\n    });\n  }\n\n  function parseProcesses(lines) {\n    let result = [];\n    if (lines.length > 1) {\n      let head = lines[0];\n      parsedhead = util.parseHead(head, 8);\n      lines.shift();\n      lines.forEach(function (line) {\n        if (line.trim() !== '') {\n          result.push(parseLine(line));\n        }\n      });\n    }\n    return result;\n  }\n  function parseProcesses2(lines) {\n\n    function formatDateTime(time) {\n      const month = ('0' + (time.getMonth() + 1).toString()).substr(-2);\n      const year = time.getFullYear().toString();\n      const day = ('0' + time.getDay().toString()).substr(-2);\n      const hours = time.getHours().toString();\n      const mins = time.getMinutes().toString();\n      const secs = ('0' + time.getSeconds().toString()).substr(-2);\n\n      return (year + '-' + month + '-' + day + ' ' + hours + ':' + mins + ':' + secs);\n    }\n\n    let result = [];\n    lines.forEach(function (line) {\n      if (line.trim() !== '') {\n        line = line.trim().replace(/ +/g, ' ').replace(/,+/g, '.');\n        const parts = line.split(' ');\n        const command = parts.slice(9).join(' ');\n        const pmem = parseFloat((1.0 * parseInt(parts[3]) * 1024 / os.totalmem()).toFixed(1));\n        const elapsed_parts = parts[5].split(':');\n        const started = formatDateTime(new Date(Date.now() - (elapsed_parts.length > 1 ? (elapsed_parts[0] * 60 + elapsed_parts[1]) * 1000 : elapsed_parts[0] * 1000)));\n\n        result.push({\n          pid: parseInt(parts[0]),\n          parentPid: parseInt(parts[1]),\n          name: getName(command),\n          pcpu: 0,\n          pcpuu: 0,\n          pcpus: 0,\n          pmem: pmem,\n          priority: 0,\n          mem_vsz: parseInt(parts[2]),\n          mem_rss: parseInt(parts[3]),\n          nice: parseInt(parts[4]),\n          started: started,\n          state: (parts[6] === 'R' ? 'running' : (parts[6] === 'S' ? 'sleeping' : (parts[6] === 'T' ? 'stopped' : (parts[6] === 'W' ? 'paging' : (parts[6] === 'X' ? 'dead' : (parts[6] === 'Z' ? 'zombie' : ((parts[6] === 'D' || parts[6] === 'U') ? 'blocked' : 'unknown'))))))),\n          tty: parts[7],\n          user: parts[8],\n          command: command\n        });\n      }\n    });\n    return result;\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = {\n        all: 0,\n        running: 0,\n        blocked: 0,\n        sleeping: 0,\n        unknown: 0,\n        list: []\n      };\n\n      let cmd = '';\n\n      if ((_processes_cpu.ms && Date.now() - _processes_cpu.ms >= 500) || _processes_cpu.ms === 0) {\n        if (_linux || _freebsd || _openbsd || _netbsd || _darwin || _sunos) {\n          if (_linux) cmd = 'export LC_ALL=C; ps -axo pid:11,ppid:11,pcpu:6,pmem:6,pri:5,vsz:11,rss:11,ni:5,lstart:30,state:5,tty:15,user:20,command; unset LC_ALL';\n          if (_freebsd || _openbsd || _netbsd) cmd = 'export LC_ALL=C; ps -axo pid,ppid,pcpu,pmem,pri,vsz,rss,ni,lstart,state,tty,user,command; unset LC_ALL';\n          if (_darwin) cmd = 'export LC_ALL=C; ps -axo pid,ppid,pcpu,pmem,pri,vsz,rss,nice,lstart,state,tty,user,command -r; unset LC_ALL';\n          if (_sunos) cmd = 'ps -Ao pid,ppid,pcpu,pmem,pri,vsz,rss,nice,stime,s,tty,user,comm';\n          exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              result.list = (parseProcesses(stdout.toString().split('\\n'))).slice();\n              result.all = result.list.length;\n              result.running = result.list.filter(function (e) {\n                return e.state === 'running';\n              }).length;\n              result.blocked = result.list.filter(function (e) {\n                return e.state === 'blocked';\n              }).length;\n              result.sleeping = result.list.filter(function (e) {\n                return e.state === 'sleeping';\n              }).length;\n\n              if (_linux) {\n                // calc process_cpu - ps is not accurate in linux!\n                cmd = 'cat /proc/stat | grep \"cpu \"';\n                for (let i = 0; i < result.list.length; i++) {\n                  cmd += (';cat /proc/' + result.list[i].pid + '/stat');\n                }\n                exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                  let curr_processes = stdout.toString().split('\\n');\n\n                  // first line (all - /proc/stat)\n                  let all = parseProcStat(curr_processes.shift());\n\n                  // process\n                  let list_new = {};\n                  let resultProcess = {};\n                  for (let i = 0; i < curr_processes.length; i++) {\n                    resultProcess = calcProcStatLinux(curr_processes[i], all, _processes_cpu);\n\n                    if (resultProcess.pid) {\n\n                      // store pcpu in outer array\n                      let listPos = result.list.map(function (e) { return e.pid; }).indexOf(resultProcess.pid);\n                      if (listPos >= 0) {\n                        result.list[listPos].pcpu = resultProcess.pcpuu + resultProcess.pcpus;\n                        result.list[listPos].pcpuu = resultProcess.pcpuu;\n                        result.list[listPos].pcpus = resultProcess.pcpus;\n                      }\n\n                      // save new values\n                      list_new[resultProcess.pid] = {\n                        pcpuu: resultProcess.pcpuu,\n                        pcpus: resultProcess.pcpus,\n                        utime: resultProcess.utime,\n                        stime: resultProcess.stime,\n                        cutime: resultProcess.cutime,\n                        cstime: resultProcess.cstime\n                      };\n                    }\n                  }\n\n                  // store old values\n                  _processes_cpu.all = all;\n                  // _processes_cpu.list = list_new;\n                  _processes_cpu.list = Object.assign({}, list_new);\n                  _processes_cpu.ms = Date.now() - _processes_cpu.ms;\n                  // _processes_cpu.result = result;\n                  _processes_cpu.result = Object.assign({}, result);\n                  if (callback) { callback(result); }\n                  resolve(result);\n                });\n              } else {\n                if (callback) { callback(result); }\n                resolve(result);\n              }\n            } else {\n              cmd = 'ps -o pid,ppid,vsz,rss,nice,etime,stat,tty,user,comm';\n              if (_sunos) {\n                cmd = 'ps -o pid,ppid,vsz,rss,nice,etime,s,tty,user,comm';\n              }\n              exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                if (!error) {\n                  let lines = stdout.toString().split('\\n');\n                  lines.shift();\n\n                  result.list = parseProcesses2(lines).slice();\n                  result.all = result.list.length;\n                  result.running = result.list.filter(function (e) {\n                    return e.state === 'running';\n                  }).length;\n                  result.blocked = result.list.filter(function (e) {\n                    return e.state === 'blocked';\n                  }).length;\n                  result.sleeping = result.list.filter(function (e) {\n                    return e.state === 'sleeping';\n                  }).length;\n                  if (callback) { callback(result); }\n                  resolve(result);\n                } else {\n                  if (callback) { callback(result); }\n                  resolve(result);\n                }\n              });\n            }\n          });\n        } else if (_windows) {\n          try {\n            util.wmic('process get /value').then((stdout, error) => {\n              if (!error) {\n                let processSections = stdout.split(/\\n\\s*\\n/);\n                let procs = [];\n                let procStats = [];\n                let list_new = {};\n                let allcpuu = 0;\n                let allcpus = 0;\n                for (let i = 0; i < processSections.length; i++) {\n                  if (processSections[i].trim() !== '') {\n                    let lines = processSections[i].trim().split('\\r\\n');\n                    let pid = parseInt(util.getValue(lines, 'ProcessId', '=', true), 10);\n                    let parentPid = parseInt(util.getValue(lines, 'ParentProcessId', '=', true), 10);\n                    let statusValue = util.getValue(lines, 'ExecutionState', '=');\n                    let name = util.getValue(lines, 'Caption', '=', true);\n                    let commandLine = util.getValue(lines, 'CommandLine', '=', true);\n                    let commandPath = util.getValue(lines, 'ExecutablePath', '=', true);\n                    let utime = parseInt(util.getValue(lines, 'UserModeTime', '=', true), 10);\n                    let stime = parseInt(util.getValue(lines, 'KernelModeTime', '=', true), 10);\n                    let mem = parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10);\n                    allcpuu = allcpuu + utime;\n                    allcpus = allcpus + stime;\n                    result.all++;\n                    if (!statusValue) { result.unknown++; }\n                    if (statusValue === '3') { result.running++; }\n                    if (statusValue === '4' || statusValue === '5') { result.blocked++; }\n\n                    procStats.push({\n                      pid: pid,\n                      utime: utime,\n                      stime: stime,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0,\n                    });\n                    procs.push({\n                      pid: pid,\n                      parentPid: parentPid,\n                      name: name,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0,\n                      pmem: mem / os.totalmem() * 100,\n                      priority: parseInt(util.getValue(lines, 'Priority', '=', true), 10),\n                      mem_vsz: parseInt(util.getValue(lines, 'PageFileUsage', '=', true), 10),\n                      mem_rss: Math.floor(parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10) / 1024),\n                      nice: 0,\n                      started: parseTimeWin(util.getValue(lines, 'CreationDate', '=', true)),\n                      state: (!statusValue ? _winStatusValues[0] : _winStatusValues[statusValue]),\n                      tty: '',\n                      user: '',\n                      command: commandLine || name,\n                      path: commandPath,\n                      params: ''\n                    });\n                  }\n                }\n                result.sleeping = result.all - result.running - result.blocked - result.unknown;\n                result.list = procs;\n                for (let i = 0; i < procStats.length; i++) {\n                  let resultProcess = calcProcStatWin(procStats[i], allcpuu + allcpus, _processes_cpu);\n\n                  // store pcpu in outer array\n                  let listPos = result.list.map(function (e) { return e.pid; }).indexOf(resultProcess.pid);\n                  if (listPos >= 0) {\n                    result.list[listPos].pcpu = resultProcess.pcpuu + resultProcess.pcpus;\n                    result.list[listPos].pcpuu = resultProcess.pcpuu;\n                    result.list[listPos].pcpus = resultProcess.pcpus;\n                  }\n\n                  // save new values\n                  list_new[resultProcess.pid] = {\n                    pcpuu: resultProcess.pcpuu,\n                    pcpus: resultProcess.pcpus,\n                    utime: resultProcess.utime,\n                    stime: resultProcess.stime\n                  };\n                }\n                // store old values\n                _processes_cpu.all = allcpuu + allcpus;\n                // _processes_cpu.list = list_new;\n                _processes_cpu.list = Object.assign({}, list_new);\n                _processes_cpu.ms = Date.now() - _processes_cpu.ms;\n                // _processes_cpu.result = result;\n                _processes_cpu.result = Object.assign({}, result);\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n          } catch (e) {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      } else {\n        if (callback) { callback(_processes_cpu.result); }\n        resolve(_processes_cpu.result);\n      }\n    });\n  });\n}\n\nexports.processes = processes;\n\n// --------------------------\n// PS - process load\n// get detailed information about a certain process\n// (PID, CPU-Usage %, Mem-Usage %)\n\nfunction processLoad(proc, callback) {\n\n  // fallback - if only callback is given\n  if (util.isFunction(proc) && !callback) {\n    callback = proc;\n    proc = '';\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      const procSanitized = util.isPrototypePolluted() ? '' : util.sanitizeShellString(proc);\n\n      let result = {\n        'proc': procSanitized,\n        'pid': -1,\n        'cpu': 0,\n        'mem': 0\n      };\n\n      if (procSanitized) {\n        if (_windows) {\n          try {\n            util.wmic('process get /value').then((stdout, error) => {\n              if (!error) {\n                let processSections = stdout.split(/\\n\\s*\\n/);\n                let procStats = [];\n                let list_new = {};\n                let allcpuu = 0;\n                let allcpus = 0;\n                for (let i = 0; i < processSections.length; i++) {\n                  if (processSections[i].trim() !== '') {\n                    let lines = processSections[i].trim().split('\\r\\n');\n                    let pid = parseInt(util.getValue(lines, 'ProcessId', '=', true), 10);\n                    let name = util.getValue(lines, 'Caption', '=', true);\n                    let utime = parseInt(util.getValue(lines, 'UserModeTime', '=', true), 10);\n                    let stime = parseInt(util.getValue(lines, 'KernelModeTime', '=', true), 10);\n                    let mem = parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10);\n                    allcpuu = allcpuu + utime;\n                    allcpus = allcpus + stime;\n\n                    procStats.push({\n                      pid: pid,\n                      utime: utime,\n                      stime: stime,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0,\n                    });\n                    if (name.toLowerCase().indexOf(procSanitized.toLowerCase()) >= 0) {\n                      if (result.pid === -1) {\n                        result = {\n                          proc: name,\n                          pid: pid,\n                          pids: [pid],\n                          cpu: 0,\n                          mem: mem / os.totalmem() * 100\n                        };\n                      } else {\n                        result.pids.push(pid);\n                        result.mem += mem / os.totalmem() * 100;\n                      }\n                    }\n                  }\n                }\n                for (let i = 0; i < procStats.length; i++) {\n                  let resultProcess = calcProcStatWin(procStats[i], allcpuu + allcpus, _process_cpu);\n\n                  // store pcpu in outer array\n                  if (result && result.pids && result.pids.length > 0) {\n                    let listPos = result.pids.indexOf(resultProcess.pid);\n                    if (listPos >= 0) {\n                      result.cpu = resultProcess.pcpuu + resultProcess.pcpus;\n                    }\n                  }\n\n                  // save new values\n                  list_new[resultProcess.pid] = {\n                    pcpuu: resultProcess.pcpuu,\n                    pcpus: resultProcess.pcpus,\n                    utime: resultProcess.utime,\n                    stime: resultProcess.stime\n                  };\n                }\n                // store old values\n                _process_cpu.all = allcpuu + allcpus;\n                // _process_cpu.list = list_new;\n                _process_cpu.list = Object.assign({}, list_new);\n                _process_cpu.ms = Date.now() - _process_cpu.ms;\n                // _process_cpu.result = result;\n                _process_cpu.result = Object.assign({}, result);\n                if (callback) {\n                  callback(result);\n                }\n                resolve(result);\n              }\n            });\n          } catch (e) {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        }\n\n        if (_darwin || _linux) {\n          exec('ps -axo pid,pcpu,pmem,comm | grep -i ' + procSanitized + ' | grep -v grep', { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n\n              let pid = 0;\n              let pids = [];\n              let cpu = 0;\n              let mem = 0;\n\n              lines.forEach(function (line) {\n                let data = line.trim().replace(/ +/g, ' ').split(' ');\n                if (data.length > 3) {\n                  pid = (!pid ? parseInt(data[0]) : 0);\n                  pids.push(parseInt(data[0], 10));\n                  cpu = cpu + parseFloat(data[1].replace(',', '.'));\n                  mem = mem + parseFloat(data[2].replace(',', '.'));\n                }\n              });\n\n              result = {\n                'proc': procSanitized,\n                'pid': pid,\n                'pids': pids,\n                'cpu': parseFloat((cpu / lines.length).toFixed(2)),\n                'mem': parseFloat((mem / lines.length).toFixed(2))\n              };\n              if (_linux) {\n                // calc process_cpu - ps is not accurate in linux!\n                let cmd = 'cat /proc/stat | grep \"cpu \"';\n                for (let i = 0; i < result.pids.length; i++) {\n                  cmd += (';cat /proc/' + result.pids[i] + '/stat');\n                }\n\n                exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                  let curr_processes = stdout.toString().split('\\n');\n\n                  // first line (all - /proc/stat)\n                  let all = parseProcStat(curr_processes.shift());\n\n                  // process\n                  let list_new = {};\n                  let resultProcess = {};\n                  result.cpu = 0;\n                  for (let i = 0; i < curr_processes.length; i++) {\n                    resultProcess = calcProcStatLinux(curr_processes[i], all, _process_cpu);\n\n                    if (resultProcess.pid) {\n\n                      // store pcpu in outer result\n                      result.cpu += resultProcess.pcpuu + resultProcess.pcpus;\n\n                      // save new values\n                      list_new[resultProcess.pid] = {\n                        pcpuu: resultProcess.pcpuu,\n                        pcpus: resultProcess.pcpus,\n                        utime: resultProcess.utime,\n                        stime: resultProcess.stime,\n                        cutime: resultProcess.cutime,\n                        cstime: resultProcess.cstime\n                      };\n                    }\n                  }\n\n                  result.cpu = Math.round(result.cpu * 100) / 100;\n\n                  _process_cpu.all = all;\n                  // _process_cpu.list = list_new;\n                  _process_cpu.list = Object.assign({}, list_new);\n                  _process_cpu.ms = Date.now() - _process_cpu.ms;\n                  // _process_cpu.result = result;\n                  _process_cpu.result = Object.assign({}, result);\n                  if (callback) { callback(result); }\n                  resolve(result);\n                });\n              } else {\n                if (callback) { callback(result); }\n                resolve(result);\n              }\n            } else {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          });\n        }\n      }\n    });\n  });\n}\n\nexports.processLoad = processLoad;\n", "'use strict';\n// @ts-check\n// ==================================================================================\n// utils.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 0. helper functions\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst fs = require('fs');\nconst spawn = require('child_process').spawn;\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\nconst util = require('util');\n\nlet _platform = process.platform;\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\n// const _sunos = (_platform === 'sunos');\n\nlet _cores = 0;\nlet wmicPath = '';\nlet codepage = '';\n\nconst execOptsWin = {\n  windowsHide: true,\n  maxBuffer: 1024 * 20000,\n  encoding: 'UTF-8',\n  env: util._extend({}, process.env, { LANG: 'en_US.UTF-8' })\n};\n\nfunction toInt(value) {\n  let result = parseInt(value, 10);\n  if (isNaN(result)) {\n    result = 0;\n  }\n  return result;\n}\n\nfunction isFunction(functionToCheck) {\n  let getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\nfunction unique(obj) {\n  let uniques = [];\n  let stringify = {};\n  for (let i = 0; i < obj.length; i++) {\n    let keys = Object.keys(obj[i]);\n    keys.sort(function (a, b) { return a - b; });\n    let str = '';\n    for (let j = 0; j < keys.length; j++) {\n      str += JSON.stringify(keys[j]);\n      str += JSON.stringify(obj[i][keys[j]]);\n    }\n    if (!{}.hasOwnProperty.call(stringify, str)) {\n      uniques.push(obj[i]);\n      stringify[str] = true;\n    }\n  }\n  return uniques;\n}\n\nfunction sortByKey(array, keys) {\n  return array.sort(function (a, b) {\n    let x = '';\n    let y = '';\n    keys.forEach(function (key) {\n      x = x + a[key]; y = y + b[key];\n    });\n    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n  });\n}\n\nfunction cores() {\n  if (_cores === 0) {\n    _cores = os.cpus().length;\n  }\n  return _cores;\n}\n\nfunction getValue(lines, property, separator, trimmed) {\n  separator = separator || ':';\n  property = property.toLowerCase();\n  trimmed = trimmed || false;\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i].toLowerCase().replace(/\\t/g, '');\n    if (trimmed) {\n      line = line.trim();\n    }\n    if (line.startsWith(property)) {\n      const parts = lines[i].split(separator);\n      if (parts.length >= 2) {\n        parts.shift();\n        return parts.join(separator).trim();\n      } else {\n        return '';\n      }\n    }\n  }\n  return '';\n}\n\nfunction decodeEscapeSequence(str, base) {\n  base = base || 16;\n  return str.replace(/\\\\x([0-9A-Fa-f]{2})/g, function () {\n    return String.fromCharCode(parseInt(arguments[1], base));\n  });\n}\n\nfunction detectSplit(str) {\n  let seperator = '';\n  let part = 0;\n  str.split('').forEach(element => {\n    if (element >= '0' && element <= '9') {\n      if (part === 1) { part++; }\n    } else {\n      if (part === 0) { part++; }\n      if (part === 1) {\n        seperator += element;\n      }\n    }\n  });\n  return seperator;\n}\n\nfunction parseTime(t, pmDesignator) {\n  pmDesignator = pmDesignator || '';\n  t = t.toUpperCase();\n  let hour = 0;\n  let min = 0;\n  let splitter = detectSplit(t);\n  let parts = t.split(splitter);\n  if (parts.length >= 2) {\n    if (parts[2]) {\n      parts[1] += parts[2];\n    }\n    let isPM = (parts[1] && (parts[1].toLowerCase().indexOf('pm') > -1) || (parts[1].toLowerCase().indexOf('p.m.') > -1) || (parts[1].toLowerCase().indexOf('p. m.') > -1) || (parts[1].toLowerCase().indexOf('n') > -1) || (parts[1].toLowerCase().indexOf('ch') > -1) || (parts[1].toLowerCase().indexOf('\u00f6s') > -1) || (pmDesignator && parts[1].toLowerCase().indexOf(pmDesignator) > -1));\n    hour = parseInt(parts[0], 10);\n    min = parseInt(parts[1], 10);\n    hour = isPM && hour < 12 ? hour + 12 : hour;\n    return ('0' + hour).substr(-2) + ':' + ('0' + min).substr(-2);\n  }\n}\n\nfunction parseDateTime(dt, culture) {\n  const result = {\n    date: '',\n    time: ''\n  };\n  culture = culture || {};\n  let dateFormat = (culture.dateFormat || '').toLowerCase();\n  let pmDesignator = (culture.pmDesignator || '');\n\n  const parts = dt.split(' ');\n  if (parts[0]) {\n    if (parts[0].indexOf('/') >= 0) {\n      // Dateformat: mm/dd/yyyy or dd/mm/yyyy or dd/mm/yy or yyyy/mm/dd\n      const dtparts = parts[0].split('/');\n      if (dtparts.length === 3) {\n        if (dtparts[0].length === 4) {\n          // Dateformat: yyyy/mm/dd\n          result.date = dtparts[0] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[2]).substr(-2);\n        } else if (dtparts[2].length === 2) {\n          if ((dateFormat.indexOf('/d/') > -1 || dateFormat.indexOf('/dd/') > -1)) {\n            // Dateformat: mm/dd/yy\n            result.date = '20' + dtparts[2] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[0]).substr(-2);\n          } else {\n            // Dateformat: dd/mm/yy\n            result.date = '20' + dtparts[2] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[0]).substr(-2);\n          }\n        } else {\n          // Dateformat: mm/dd/yyyy or dd/mm/yyyy\n          const isEN = ((dt.toLowerCase().indexOf('pm') > -1) || (dt.toLowerCase().indexOf('p.m.') > -1) || (dt.toLowerCase().indexOf('p. m.') > -1) || (dt.toLowerCase().indexOf('am') > -1) || (dt.toLowerCase().indexOf('a.m.') > -1) || (dt.toLowerCase().indexOf('a. m.') > -1));\n          if ((isEN || dateFormat.indexOf('/d/') > -1 || dateFormat.indexOf('/dd/') > -1) && dateFormat.indexOf('dd/') !== 0) {\n            // Dateformat: mm/dd/yyyy\n            result.date = dtparts[2] + '-' + ('0' + dtparts[0]).substr(-2) + '-' + ('0' + dtparts[1]).substr(-2);\n          } else {\n            // Dateformat: dd/mm/yyyy\n            result.date = dtparts[2] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[0]).substr(-2);\n          }\n        }\n      }\n    }\n    if (parts[0].indexOf('.') >= 0) {\n      const dtparts = parts[0].split('.');\n      if (dtparts.length === 3) {\n        if (dateFormat.indexOf('.d.') > -1 || dateFormat.indexOf('.dd.') > -1) {\n          // Dateformat: mm.dd.yyyy\n          result.date = dtparts[2] + '-' + ('0' + dtparts[0]).substr(-2) + '-' + ('0' + dtparts[1]).substr(-2);\n        } else {\n          // Dateformat: dd.mm.yyyy\n          result.date = dtparts[2] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[0]).substr(-2);\n        }\n      }\n    }\n    if (parts[0].indexOf('-') >= 0) {\n      // Dateformat: yyyy-mm-dd\n      const dtparts = parts[0].split('-');\n      if (dtparts.length === 3) {\n        result.date = dtparts[0] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[2]).substr(-2);\n      }\n    }\n  }\n  if (parts[1]) {\n    parts.shift();\n    let time = parts.join(' ');\n    result.time = parseTime(time, pmDesignator);\n  }\n  return result;\n}\n\nfunction parseHead(head, rights) {\n  let space = (rights > 0);\n  let count = 1;\n  let from = 0;\n  let to = 0;\n  let result = [];\n  for (let i = 0; i < head.length; i++) {\n    if (count <= rights) {\n      // if (head[i] === ' ' && !space) {\n      if (/\\s/.test(head[i]) && !space) {\n        to = i - 1;\n        result.push({\n          from: from,\n          to: to + 1,\n          cap: head.substring(from, to + 1)\n        });\n        from = to + 2;\n        count++;\n      }\n      space = head[i] === ' ';\n    } else {\n      if (!/\\s/.test(head[i]) && space) {\n        to = i - 1;\n        if (from < to) {\n          result.push({\n            from: from,\n            to: to,\n            cap: head.substring(from, to)\n          });\n        }\n        from = to + 1;\n        count++;\n      }\n      space = head[i] === ' ';\n    }\n  }\n  to = 1000;\n  result.push({\n    from: from,\n    to: to,\n    cap: head.substring(from, to)\n  });\n  let len = result.length;\n  for (var i = 0; i < len; i++) {\n    if (result[i].cap.replace(/\\s/g, '').length === 0) {\n      if (i + 1 < len) {\n        result[i].to = result[i + 1].to;\n        result[i].cap = result[i].cap + result[i + 1].cap;\n        result.splice(i + 1, 1);\n        len = len - 1;\n      }\n    }\n  }\n  return result;\n}\n\nfunction findObjectByKey(array, key, value) {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i][key] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction getWmic() {\n  if (os.type() === 'Windows_NT' && !wmicPath) {\n    wmicPath = process.env.WINDIR + '\\\\system32\\\\wbem\\\\wmic.exe';\n    if (!fs.existsSync(wmicPath)) {\n      try {\n        const wmicPathArray = execSync('WHERE WMIC').toString().split('\\r\\n');\n        if (wmicPathArray && wmicPathArray.length) {\n          wmicPath = wmicPathArray[0];\n        } else {\n          wmicPath = 'wmic';\n        }\n      } catch (e) {\n        wmicPath = 'wmic';\n      }\n    }\n  }\n  return wmicPath;\n}\n\nfunction wmic(command, options) {\n  options = options || execOptsWin;\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      try {\n        exec(process.env.WINDIR + '\\\\system32\\\\chcp.com 65001 | ' + getWmic() + ' ' + command, options, function (error, stdout) {\n          resolve(stdout, error);\n        }).stdin.end();\n      } catch (e) {\n        resolve('', e);\n      }\n    });\n  });\n}\n\nfunction getVboxmanage() {\n  return _windows ? process.env.VBOX_INSTALL_PATH || process.env.VBOX_MSI_INSTALL_PATH + '\\\\VBoxManage.exe' + '\" ' : 'vboxmanage';\n}\n\nfunction powerShell(cmd) {\n\n  let result = '';\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      try {\n        const child = spawn('powershell.exe', ['-NoLogo', '-InputFormat', 'Text', '-NoExit', '-ExecutionPolicy', 'Unrestricted', '-Command', '-'], {\n          stdio: 'pipe',\n          windowsHide: true,\n          maxBuffer: 1024 * 20000,\n          encoding: 'UTF-8',\n          env: util._extend({}, process.env, { LANG: 'en_US.UTF-8' })\n        });\n\n        if (child && !child.pid) {\n          child.on('error', function () {\n            resolve(result);\n          });\n        }\n        if (child && child.pid) {\n          child.stdout.on('data', function (data) {\n            result = result + data.toString('utf8');\n          });\n          child.stderr.on('data', function () {\n            child.kill();\n            resolve(result);\n          });\n          child.on('close', function () {\n            child.kill();\n            resolve(result);\n          });\n          child.on('error', function () {\n            child.kill();\n            resolve(result);\n          });\n          try {\n            child.stdin.write(cmd + os.EOL);\n            child.stdin.write('exit' + os.EOL);\n            child.stdin.end();\n          } catch (e) {\n            child.kill();\n            resolve(result);\n          }\n        } else {\n          resolve(result);\n        }\n      } catch (e) {\n        resolve(result);\n      }\n    });\n  });\n}\n\nfunction getCodepage() {\n  if (_windows) {\n    if (!codepage) {\n      try {\n        const stdout = execSync('chcp');\n        const lines = stdout.toString().split('\\r\\n');\n        const parts = lines[0].split(':');\n        codepage = parts.length > 1 ? parts[1].replace('.', '') : '';\n      } catch (err) {\n        codepage = '437';\n      }\n    }\n    return codepage;\n  }\n  if (_linux || _darwin || _freebsd || _openbsd || _netbsd) {\n    if (!codepage) {\n      try {\n        const stdout = execSync('echo $LANG');\n        const lines = stdout.toString().split('\\r\\n');\n        const parts = lines[0].split('.');\n        codepage = parts.length > 1 ? parts[1].trim() : '';\n        if (!codepage) {\n          codepage = 'UTF-8';\n        }\n      } catch (err) {\n        codepage = 'UTF-8';\n      }\n    }\n    return codepage;\n  }\n}\n\nfunction isRaspberry() {\n  const PI_MODEL_NO = [\n    'BCM2708',\n    'BCM2709',\n    'BCM2710',\n    'BCM2835',\n    'BCM2837B0'\n  ];\n  let cpuinfo = [];\n  try {\n    cpuinfo = fs.readFileSync('/proc/cpuinfo', { encoding: 'utf8' }).split('\\n');\n  } catch (e) {\n    return false;\n  }\n  const hardware = getValue(cpuinfo, 'hardware');\n  return (hardware && PI_MODEL_NO.indexOf(hardware) > -1);\n}\n\nfunction isRaspbian() {\n  let osrelease = [];\n  try {\n    osrelease = fs.readFileSync('/etc/os-release', { encoding: 'utf8' }).split('\\n');\n  } catch (e) {\n    return false;\n  }\n  const id = getValue(osrelease, 'id');\n  return (id && id.indexOf('raspbian') > -1);\n}\n\nfunction execWin(cmd, opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = execOptsWin;\n  }\n  let newCmd = 'chcp 65001 > nul && cmd /C ' + cmd + ' && chcp ' + codepage + ' > nul';\n  exec(newCmd, opts, function (error, stdout) {\n    callback(error, stdout);\n  });\n}\n\nfunction darwinXcodeExists() {\n  const cmdLineToolsExists = fs.existsSync('/Library/Developer/CommandLineTools/usr/bin/');\n  const xcodeAppExists = fs.existsSync('/Applications/Xcode.app/Contents/Developer/Tools');\n  const xcodeExists = fs.existsSync('/Library/Developer/Xcode/');\n  return (cmdLineToolsExists || xcodeExists || xcodeAppExists);\n}\n\nfunction nanoSeconds() {\n  const time = process.hrtime();\n  if (!Array.isArray(time) || time.length !== 2) {\n    return 0;\n  }\n  return +time[0] * 1e9 + +time[1];\n}\n\nfunction countUniqueLines(lines, startingWith) {\n  startingWith = startingWith || '';\n  const uniqueLines = [];\n  lines.forEach(line => {\n    if (line.startsWith(startingWith)) {\n      if (uniqueLines.indexOf(line) === -1) {\n        uniqueLines.push(line);\n      }\n    }\n  });\n  return uniqueLines.length;\n}\n\nfunction countLines(lines, startingWith) {\n  startingWith = startingWith || '';\n  const uniqueLines = [];\n  lines.forEach(line => {\n    if (line.startsWith(startingWith)) {\n      uniqueLines.push(line);\n    }\n  });\n  return uniqueLines.length;\n}\n\nfunction sanitizeShellString(str) {\n  const s = str || '';\n  let result = '';\n  for (let i = 0; i <= 2000; i++) {\n    if (!(s[i] === undefined ||\n      s[i] === '>' ||\n      s[i] === '<' ||\n      s[i] === '*' ||\n      s[i] === '?' ||\n      s[i] === '[' ||\n      s[i] === ']' ||\n      s[i] === '|' ||\n      s[i] === '\u02da' ||\n      s[i] === '$' ||\n      s[i] === ';' ||\n      s[i] === '&' ||\n      s[i] === '(' ||\n      s[i] === ')' ||\n      s[i] === ']' ||\n      s[i] === '#' ||\n      s[i] === '\\\\' ||\n      s[i] === '\\t' ||\n      s[i] === '\\n' ||\n      s[i] === '\"')) {\n      result = result + s[i];\n    }\n  }\n  return result;\n}\n\nfunction isPrototypePolluted() {\n  const s = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let notPolluted = true;\n  let st = '';\n  notPolluted = notPolluted || !(s.length === 62)\n  const ms = Date.now();\n  if (typeof ms === 'number' && ms > 1600000000000) {\n    const l = ms % 100 + 15;\n    for (let i = 0; i < l; i++) {\n      const r = Math.random() * 61.99999999 + 1;\n      const rs = parseInt(Math.floor(r).toString(), 10)\n      const rs2 = parseInt(r.toString().split('.')[0], 10);\n      const q = Math.random() * 61.99999999 + 1;\n      const qs = parseInt(Math.floor(q).toString(), 10)\n      const qs2 = parseInt(q.toString().split('.')[0], 10);\n      notPolluted = notPolluted && !(r === q);\n      notPolluted = notPolluted && rs === rs2 && qs === qs2;\n      st += s[rs - 1];\n    }\n    notPolluted = notPolluted && st.length === l;\n    // string manipulation\n    let p = Math.random() * l * 0.9999999999;\n    let stm = st.substr(0, p) + ' ' + st.substr(p, 2000);\n    let sto = stm.replace(/ /g, '');\n    notPolluted = notPolluted && st === sto;\n    p = Math.random() * l * 0.9999999999;\n    stm = st.substr(0, p) + '{' + st.substr(p, 2000);\n    sto = stm.replace(/{/g, '');\n    notPolluted = notPolluted && st === sto;\n    p = Math.random() * l * 0.9999999999;\n    stm = st.substr(0, p) + '*' + st.substr(p, 2000);\n    sto = stm.replace(/\\*/g, '');\n    notPolluted = notPolluted && st === sto;\n    p = Math.random() * l * 0.9999999999;\n    stm = st.substr(0, p) + '$' + st.substr(p, 2000);\n    sto = stm.replace(/\\$/g, '');\n    notPolluted = notPolluted && st === sto;\n\n    // lower\n    const stl = st.toLowerCase();\n    notPolluted = notPolluted && (stl.length === l) && stl[l - 1] && !(stl[l])\n    for (let i = 0; i < l; i++) {\n      const s1 = st[i];\n      const s2 = stl ? stl[i] : '';\n      const s1l = s1.toLowerCase();\n      notPolluted = notPolluted && s1l[0] === s2 && s1l[0] && !(s1l[1]);\n    }\n  }\n  return !notPolluted;\n}\n\nfunction hex2bin(hex) {\n  return (\"00000000\" + (parseInt(hex, 16)).toString(2)).substr(-8);\n}\n\nfunction decodePiCpuinfo(lines) {\n\n  // https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md\n\n  const oldRevisionCodes = {\n    '0002': {\n      type: 'B',\n      revision: '1.0',\n      memory: 256,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '0003': {\n      type: 'B',\n      revision: '1.0',\n      memory: 256,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '0004': {\n      type: 'B',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '0005': {\n      type: 'B',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Qisda',\n      processor: 'BCM2835'\n    },\n    '0006': {\n      type: 'B',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '0007': {\n      type: 'A',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '0008': {\n      type: 'A',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '0009': {\n      type: 'A',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Qisda',\n      processor: 'BCM2835'\n    },\n    '000d': {\n      type: 'B',\n      revision: '2.0',\n      memory: 512,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '000e': {\n      type: 'B',\n      revision: '2.0',\n      memory: 512,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '000f': {\n      type: 'B',\n      revision: '2.0',\n      memory: 512,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '0010': {\n      type: 'B+',\n      revision: '1.2',\n      memory: 512,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '0011': {\n      type: 'CM1',\n      revision: '1.0',\n      memory: 512,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '0012': {\n      type: 'A+',\n      revision: '1.1',\n      memory: 256,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '0013': {\n      type: 'B+',\n      revision: '1.2',\n      memory: 512,\n      manufacturer: 'Embest',\n      processor: 'BCM2835'\n    },\n    '0014': {\n      type: 'CM1',\n      revision: '1.0',\n      memory: 512,\n      manufacturer: 'Embest',\n      processor: 'BCM2835'\n    },\n    '0015': {\n      type: 'A+',\n      revision: '1.1',\n      memory: 256,\n      manufacturer: '512MB\tEmbest',\n      processor: 'BCM2835'\n    }\n  }\n\n  const processorList = [\n    'BMC2835',\n    'BMC2836',\n    'BMC2837',\n    'BMC2711',\n  ];\n  const manufacturerList = [\n    'Sony UK',\n    'Egoman',\n    'Embest',\n    'Sony Japan',\n    'Embest',\n    'Stadium'\n  ];\n  const typeList = {\n    '00': 'A',\n    '01': 'B',\n    '02': 'A+',\n    '03': 'B+',\n    '04': '2B',\n    '05': 'Alpha (early prototype)',\n    '06': 'CM1',\n    '08': '3B',\n    '09': 'Zero',\n    '0a': 'CM3',\n    '0c': 'Zero W',\n    '0d': '3B+',\n    '0e': '3A+',\n    '0f': 'Internal use only',\n    '10': 'CM3+',\n    '11': '4B',\n    '13': '400',\n    '14': 'CM4'\n  };\n\n  const revisionCode = getValue(lines, 'revision', ':', true);\n  const model = getValue(lines, 'model:', ':', true);\n  const serial = getValue(lines, 'serial', ':', true);\n\n  let result = {};\n  if (oldRevisionCodes.hasOwnProperty(revisionCode)) {\n    // old revision codes\n    result = {\n      model,\n      serial,\n      revisionCode,\n      memory: oldRevisionCodes[revisionCode].memory,\n      manufacturer: oldRevisionCodes[revisionCode].manufacturer,\n      processor: oldRevisionCodes[revisionCode].processor,\n      type: oldRevisionCodes[revisionCode].type,\n      revision: oldRevisionCodes[revisionCode].revision,\n    }\n\n  } else {\n    // new revision code\n    const revision = ('00000000' + getValue(lines, 'revision', ':', true).toLowerCase()).substr(-8);\n    // const revisionStyleNew = hex2bin(revision.substr(2, 1)).substr(4, 1) === '1';\n    const memSizeCode = parseInt(hex2bin(revision.substr(2, 1)).substr(5, 3), 2) || 0;\n    const manufacturer = manufacturerList[parseInt(revision.substr(3, 1), 10)];\n    const processor = processorList[parseInt(revision.substr(4, 1), 10)];\n    const typeCode = revision.substr(5, 2);\n\n\n    result = {\n      model,\n      serial,\n      revisionCode,\n      memory: 256 * Math.pow(2, memSizeCode),\n      manufacturer,\n      processor,\n      type: typeList.hasOwnProperty(typeCode) ? typeList[typeCode] : '',\n      revision: '1.' + revision.substr(7, 1),\n    }\n  }\n  return result;\n}\n\nfunction noop() { }\n\nexports.toInt = toInt;\nexports.execOptsWin = execOptsWin;\nexports.getCodepage = getCodepage;\nexports.execWin = execWin;\nexports.isFunction = isFunction;\nexports.unique = unique;\nexports.sortByKey = sortByKey;\nexports.cores = cores;\nexports.getValue = getValue;\nexports.decodeEscapeSequence = decodeEscapeSequence;\nexports.parseDateTime = parseDateTime;\nexports.parseHead = parseHead;\nexports.findObjectByKey = findObjectByKey;\nexports.getWmic = getWmic;\nexports.wmic = wmic;\nexports.darwinXcodeExists = darwinXcodeExists;\nexports.getVboxmanage = getVboxmanage;\nexports.powerShell = powerShell;\nexports.nanoSeconds = nanoSeconds;\nexports.countUniqueLines = countUniqueLines;\nexports.countLines = countLines;\nexports.noop = noop;\nexports.isRaspberry = isRaspberry;\nexports.isRaspbian = isRaspbian;\nexports.sanitizeShellString = sanitizeShellString;\nexports.isPrototypePolluted = isPrototypePolluted;\nexports.decodePiCpuinfo = decodePiCpuinfo;\n"], "fixing_code": ["# Changelog\n\n### Major Changes - Version 4\n\n**New Functions**\n\n- `chassis()`: chassis information\n\n**Breaking Changes**\n\n- `networkStats()`: will provide an **array** of stats for all given interfaces. In previous versions only one interface was provided as a parameter. Pass '*' for all interfaces\n- `networkStats()`: `rx` and `tx` changed to `rx_bytes` and `tx_bytes`\n- `dockerContainerStats()`: will provide an **array** of stats for all given docker containers. In previous versions only one interface was provided as a parameter. Pass '*' for all docker containers\n\n**Other Changes**\n\n- `system()` optimized system detection (e.g. new Raspberry Pi models, ...)\n- `system()`, `bios()`, `baseboard()` information also as non-root (linux)\n- `graphics()` better controller and display detection, fixes\n- `versions()` optimization, fixes\n- `networkInterfaces()` added `operstate`, `type`, `duplex`, `mtu`, `speed`, `carrierChanges`\n- `networkStats()` added stats for `errors`, `dropped`\n- added TypeScript definitions\n\n**Be aware**, that the new version 4.x is **NOT fully backward compatible** to version 3.x ...\n\nFor major (breaking) changes - version 3 and 2 see end of page.\n\n## Version history\n\n| Version        | Date           | Comment  |\n| -------------- | -------------- | -------- |\n| 4.30.5         | 2020-11-26     | adapted security update (prototype pollution prevention) |\n| 4.30.4         | 2020-11-25     | reverted Object.freeze because it broke some projects |\n| 4.30.3         | 2020-11-25     | security update (prototype pollution prevention) Object.freeze |\n| 4.30.2         | 2020-11-25     | security update (prototype pollution prevention) |\n| 4.30.1         | 2020-11-12     | updated docs |\n| 4.30.0         | 2020-11-12     | `get()` possibility to provide params |\n| 4.29.3         | 2020-11-09     | `blockdevices()` catch errors adapted for just one line |\n| 4.29.2         | 2020-11-09     | `blockdevices()` catch errors |\n| 4.29.1         | 2020-11-08     | `cpu()`, `system()` better parsing Raspberry Pi revision codes |\n| 4.29.0         | 2020-11-08     | `fsSize()` correct fs type detection macOS (HFS, APFS, NFS) |\n| 4.28.1         | 2020-11-05     | code cleanup, removing debug console.log() |\n| 4.28.0         | 2020-11-04     | `graphics()` added deviceName (windows) |\n| 4.27.11        | 2020-10-26     | `inetChecksite()` fixed vulnerability: command injection |\n| 4.27.10        | 2020-10-16     | `dockerContainers()` resolved hanging issue |\n| 4.27.9         | 2020-10-13     | `networkInterfaces()` loopback internal detection (windows) |\n| 4.27.8         | 2020-10-08     | windows codepages partial fix |\n| 4.27.7         | 2020-10-05     | updated typescript typings, minor fixes |\n| 4.27.6         | 2020-10-02     | `get()` fixed when results are in arrays |\n| 4.27.5         | 2020-09-18     | `cpuTemperature()` fix try catch (linux) |\n| 4.27.4         | 2020-09-16     | `networkInterfaceDefault()` optimization (macOS) |\n| 4.27.3         | 2020-08-26     | updated typescript typings |\n| 4.27.2         | 2020-08-26     | fixed issue breaking node v4 compatibility |\n| 4.27.1         | 2020-08-25     | `networkStats()` fixed packages dropped (linux) |\n| 4.27.0         | 2020-08-24     | `observe()` added function to observe/watch system parameters |\n| 4.26.12        | 2020-08-21     | `versions()` fixed issue windows |\n| 4.26.11        | 2020-08-20     | `cpuTemperature()` fixed issue windows |\n| 4.26.10        | 2020-07-16     | `networkStats()` fixed issue blocking windows |\n| 4.26.9         | 2020-06-06     | `networkStats()` fixed comparison issue windows |\n| 4.26.8         | 2020-06-06     | `networkInterfaces()` fixed caching issue |\n| 4.26.7         | 2020-06-06     | `cpuTemperature()` fixed raspberry pi sensors issue |\n| 4.26.6         | 2020-06-03     | `diskLayout()` fixed issue linux |\n| 4.26.5         | 2020-05-27     | `cpuTemperature()` optimizes scanning AMD linux sensors |\n| 4.26.4         | 2020-05-21     | `cpuTemperature()` fix (BSD), code cleanup |\n| 4.26.3         | 2020-05-20     | updated documentation (macOS temperature) |\n| 4.26.2         | 2020-05-19     | `processes()` memory leak fix |\n| 4.26.1         | 2020-05-13     | code cleanup |\n| 4.26.0         | 2020-05-12     | `diskLayout()` added full smart data where supported |\n| 4.25.2         | 2020-05-12     | `getDynamicData()` added wifiNetworks() |\n| 4.25.1         | 2020-05-07     | `get()` minor bounds test fix, updated docs |\n| 4.25.0         | 2020-05-07     | `get()` added function to get partial system info |\n| 4.24.2         | 2020-05-06     | `cpu()` fix (BSD), `networkStats()` fix BSD |\n| 4.24.1         | 2020-05-03     | `processes()` fix parsing command and params |\n| 4.24.0         | 2020-05-01     | `networkInterfaces()` added subnet mask ip4 and ip6 |\n| 4.23.10        | 2020-05-01     | `cpuTemperature()` optimized parsing linux |\n| 4.23.9         | 2020-04-29     | `currentLoad()` workarround for no os.cpus info |\n| 4.23.8         | 2020-04-26     | `getMacAddresses()` fix added try catch |\n| 4.23.7         | 2020-04-26     | `getCpuCurrentSpeedSync()` workarround fix |\n| 4.23.6         | 2020-04-25     | `networkGatewayDefault()` bug fix no interfaces |\n| 4.23.5         | 2020-04-20     | updated docs |\n| 4.23.4         | 2020-04-20     | `users()` optimized parseDateTime function |\n| 4.23.3         | 2020-04-09     | refactored to avoid `cat` |\n| 4.23.2         | 2020-04-08     | `cpu()` fixed getting base frequency for AMD Ryzen |\n| 4.23.1         | 2020-03-11     | `diskLayout()` optimized detection linux |\n| 4.23.0         | 2020-03-08     | `versions()` added param to specify which program/lib versions to detect |\n| 4.22.7         | 2020-03-08     | `diskLayout()` fixed linux |\n| 4.22.6         | 2020-03-08     | `network()` fixed DHCP linux|\n| 4.22.5         | 2020-03-04     | `graphics()` fixed vram macOS |\n| 4.22.4         | 2020-03-01     | `versions()` added dotnet, typings fix |\n| 4.22.3         | 2020-02-20     | `memLayout()` code cleanup |\n| 4.22.2         | 2020-02-19     | `memLayout()` raspberry PI mem voltage fix |\n| 4.22.1         | 2020-02-17     | `memLayout()` raspberry PI support |\n| 4.22.0         | 2020-02-17     | `services()` added pids (windows) |\n| 4.21.3         | 2020-02-16     | `versions()` fixed mysql version (macOS) |\n| 4.21.2         | 2020-02-11     | `networkConnections()` fixed linux (debian) issue |\n| 4.21.1         | 2020-01-31     | `networkGatewayDefault()` fixed windows 7 issue |\n| 4.21.0         | 2020-01-27     | `npx` compatibility |\n| 4.20.1         | 2020-01-26     | `battery()` code refactoring, cleanup, updated docs |\n| 4.20.1         | 2020-01-26     | `battery()` code refactoring, cleanup, updated docs |\n| 4.20.0         | 2020-01-25     | `battery()` added designcapacity, voltage, unit |\n| 4.19.4         | 2020-01-24     | `mem()` prevent log messages, `memgetDefaultNetworkInterface()` catch errors |\n| 4.19.3         | 2020-01-24     | `memLayout()` bank info fix macOS |\n| 4.19.2         | 2020-01-19     | `cpu()` muli-processor fix windows |\n| 4.19.1         | 2020-01-14     | `osInfo()` uefi fix windows |\n| 4.19.0         | 2020-01-12     | `osInfo()` added uefi |\n| 4.18.3         | 2020-01-10     | `fsSize()` fix excluding loop/snap devices |\n| 4.18.2         | 2020-01-10     | `memLayout()` fix memsize linux (modules >= 32 GB) |\n| 4.18.1         | 2020-01-07     | updated docs |\n| 4.18.0         | 2020-01-07     | `networkInterfaces()` added dhcp for mac os, added dhcp linux fallback |\n| 4.17.3         | 2020-01-05     | code cleanup |\n| 4.17.2         | 2020-01-05     | `cpu().speed` AMD base frequency and fix (0.00) |\n| 4.17.1         | 2020-01-04     | `fsSize()` alpine linux support |\n| 4.17.0         | 2020-01-04     | `networkInterfaces()` added dhcp, dnsSuffix, ieee8021xAuth, ieee8021xState |\n| 4.16.1         | 2020-01-02     | `networkInterfaces()` bug fix (osx) |\n| 4.16.0         | 2019-11-27     | `networkGatewayDefault()` added |\n| 4.15.3         | 2019-11-10     | type definitions and docs update |\n| 4.15.2         | 2019-11-10     | `mem()` improved calculation linux |\n| 4.15.1         | 2019-11-10     | `diskLayout()` added support for older lsblk versions (linux) |\n| 4.15.0         | 2019-11-10     | `cpu()` added governor (linux) |\n| 4.14.17        | 2019-10-22     | `graphics()` improved display detection (windows) |\n| 4.14.16        | 2019-10-19     | `graphics()` improved display detection (windows) |\n| 4.14.15        | 2019-10-18     | `graphics()` fallback display detection (windows) |\n| 4.14.14        | 2019-10-18     | `powerShell()` fixed error handling (windows) |\n| 4.14.13        | 2019-10-15     | `networkConnections()` fixed parsing (linux) |\n| 4.14.12        | 2019-10-14     | `getCpu()` fixed multi socket detection (linux) |\n| 4.14.11        | 2019-10-01     | type definitions fix dockerInfo |\n| 4.14.10        | 2019-10-01     | type definitions fix memLayout |\n| 4.14.9         | 2019-10-01     | `processLoad()` fix windows |\n| 4.14.8         | 2019-08-22     | `parseDateTime()` fix coding error |\n| 4.14.7         | 2019-08-22     | `battery()` windows acconnected improvement |\n| 4.14.6         | 2019-08-22     | `users()` improved date time parsing |\n| 4.14.5         | 2019-08-22     | `fsSize()` fix windows result as number |\n| 4.14.4         | 2019-07-20     | `verions()` fix pip, pip3 |\n| 4.14.3         | 2019-07-09     | `system()` sku fix windows |\n| 4.14.2         | 2019-07-07     | `networkConnections()` pid linux fix NAN |\n| 4.14.1         | 2019-07-04     | `graphics()` added display position windows |\n| 4.14.0         | 2019-07-03     | `processes()` added process path and params |\n| 4.13.2         | 2019-07-02     | `versions()` fix getting all versions |\n| 4.13.1         | 2019-07-01     | `versions()` gcc fix macos |\n| 4.13.0         | 2019-07-01     | `networkConnections()` added PID and process |\n| 4.12.2         | 2019-06-24     | `system()` added Raspberry PI 4 detection |\n| 4.12.1         | 2019-06-24     | `networkInterface()` virtual interfaces macos, `networkInterfaceDefault()` |\n| 4.12.0         | 2019-06-21     | `networkInterface()` added property virtual |\n| 4.11.6         | 2019-06-19     | `util` bug fix |\n| 4.11.5         | 2019-06-19     | `dockerAll()` bug fix |\n| 4.11.4         | 2019-06-17     | type definitions bug fix |\n| 4.11.3         | 2019-06-16     | `graphics()` optimization windows |\n| 4.11.2         | 2019-06-16     | `wifiNetworks()` bug fixes |\n| 4.11.1         | 2019-06-15     | updated docs |\n| 4.11.0         | 2019-06-14     | `wifiNetworks()` added available wifi networks |\n| 4.10.0         | 2019-06-14     | `graphics()` windows multiple display support |\n| 4.9.2          | 2019-06-12     | type definitions bug fix |\n| 4.9.1          | 2019-06-11     | `networkStats()` bug fix windows |\n| 4.9.0          | 2019-06-03     | `graphics()` added vendor, refresh rate, current res |\n| 4.8.4          | 2019-06-03     | `vboxInfo()` fixed call parameters |\n| 4.8.3          | 2019-06-01     | `vboxInfo()` added stoppedSince, started, stopped |\n| 4.8.2          | 2019-05-31     | `dockerInfo()` changed property naming style |\n| 4.8.1          | 2019-05-31     | updated docs |\n| 4.8.0          | 2019-05-31     | added `vboxInfo()` detailed virtual box info |\n| 4.7.3          | 2019-05-30     | updated typescript typings |\n| 4.7.2          | 2019-05-30     | `versions()` added virtualbox, java popup fix macos |\n| 4.7.1          | 2019-05-29     | `memLayout()` fix macos mojave  |\n| 4.7.0          | 2019-05-29     | partial netBSD support  |\n| 4.6.1          | 2019-05-29     | get wmic path - fic windows  |\n| 4.6.0          | 2019-05-27     | added `dockerInfo()` |\n| 4.5.1          | 2019-05-17     | updated docs |\n| 4.5.0          | 2019-05-17     | `fsOpenFiles()` added open file descriptor count |\n| 4.4.1          | 2019-05-11     | updated docs |\n| 4.4.0          | 2019-05-11     | `dockerContainers()` added started, finished time |\n| 4.3.0          | 2019-05-09     | `dockerContainers()` `dockerStats()` added restartCount |\n| 4.2.1          | 2019-05-09     | `networkInterfaceDefault()` time delay fix (linux) |\n| 4.2.0          | 2019-05-09     | `osInfo()` extended service pack version (windows) |\n| 4.1.8          | 2019-05-09     | `graphics()` resolve on error (windows) |\n| 4.1.7          | 2019-05-09     | `users()` parsing fix (windows) |\n| 4.1.6          | 2019-04-24     | `memory()` swap used fix (linux) |\n| 4.1.5          | 2019-04-19     | refactored `wmic` calls to work also on Windows XP |\n| 4.1.4          | 2019-03-26     | `networkInterfaces()` speed bug (windows) |\n| 4.1.3          | 2019-03-24     | wmic path detection (windows) |\n| 4.1.2          | 2019-03-23     | updated docs |\n| 4.1.1          | 2019-03-13     | updated typescript typings |\n| 4.1.0          | 2019-03-13     | `versions()` added pip, pip3 |\n| 4.0.16         | 2019-03-12     | Happy birthday - 5th aniversary |\n| 4.0.15         | 2019-03-02     | `versions()` added java, python3, optimized gcc |\n| 4.0.14         | 2019-03-01     | updated typescript typings |\n| 4.0.13         | 2019-03-01     | `diskLayout()` added device (/dev/sda...) linux, mac |\n| 4.0.12         | 2019-03-01     | `diskLayout()` linux rewritten - better detection |\n| 4.0.11         | 2019-02-23     | `users()` fix windows (time), added @ts-check |\n| 4.0.10         | 2019-02-10     | `networkInterfaceDefault()` fix windows  |\n| 4.0.9          | 2019-02-08     | `cpu()` fix, code cleanup  |\n| 4.0.8          | 2019-02-05     | `inetLatency()` Windows fix parse chinese output |\n| 4.0.7          | 2019-02-05     | `inetLatency()` Windows fix |\n| 4.0.6          | 2019-02-04     | powershell catch error |\n| 4.0.5          | 2019-02-03     | updated docs |\n| 4.0.4          | 2019-02-03     | code cleanup, updated docs |\n| 4.0.3          | 2019-02-03     | `networkInterfaces(), chassis()` fixed two more issues |\n| 4.0.2          | 2019-02-03     | `networkInterfaces(), chassis()` fixed smaller issues |\n| 4.0.1          | 2019-02-02     | updated docs |\n| 4.0.0          | 2019-02-02     | new major version |\n| 3.54.0         | 2018-12-30     | added TypeScript type definitions |\n| 3.53.1         | 2018-12-29     | `versions()` bug fix nginx version |\n| 3.53.0         | 2018-12-29     | `versions()` added perl, python, gcc |\n| 3.52.7         | 2018-12-29     | `versions()` bug fix macOS detection |\n| 3.52.6         | 2018-12-28     | `versions()` bug fix macOS |\n| 3.52.5         | 2018-12-28     | preparing automated tests, travis-ci integration, added dev-dependencies |\n| 3.52.4         | 2018-12-27     | `graphics().controllers` bugfix linux |\n| 3.52.3         | 2018-12-27     | `os().codepage` bugfix |\n| 3.52.2         | 2018-12-17     | code cleanup |\n| 3.52.1         | 2018-12-17     | `inetChecksite()` bugfix windows |\n| 3.52.0         | 2018-12-15     | `cpu()` added physical cores, processors, socket type |\n| 3.51.4         | 2018-12-05     | `versions()` bugfix, optimization postgres |\n| 3.51.3         | 2018-11-27     | `mem()` refactoring parsing linux, code cleanup |\n| 3.51.2         | 2018-11-26     | `mem()` bugfix parsing `free` output linux |\n| 3.51.1         | 2018-11-26     | `processLoad()` bugfix windows |\n| 3.51.0         | 2018-11-25     | `processLoad()` added for windows |\n| 3.50.3         | 2018-11-25     | `processLoad()`, `services()` fixed cpu data (linux) |\n| 3.50.2         | 2018-11-23     | network mac adresses: ip support fix |\n| 3.50.1         | 2018-11-23     | `services()` added possibility to specify ALL services \"*\" for win |\n| 3.50.0         | 2018-11-23     | `services()` added possibility to specify ALL services \"*\" for linux |\n| 3.49.4         | 2018-11-21     | `battery()` timeremaining optimization (linux) thanks to Jorai Rijsdijk |\n| 3.49.3         | 2018-11-20     | `memLayout()` optimized parsing (win) |\n| 3.49.2         | 2018-11-19     | code cleanup |\n| 3.49.1         | 2018-11-19     | `cpu().brand` removed extra spaces, tabs |\n| 3.49.0         | 2018-11-19     | added system `uuid()` (os specific), `versions()` added postgresql |\n| 3.48.4         | 2018-11-18     | windows: garbled output because of codepage |\n| 3.48.3         | 2018-11-18     | `dockerContainerStats()` fixed issue `cpu_percent` win |\n| 3.48.2         | 2018-11-18     | `dockerContainerStats()` fixed issue `cpu_percent`, win exec |\n| 3.48.1         | 2018-11-17     | `docker...()` fixed issue parsing docker socket JSON |\n| 3.48.0         | 2018-11-17     | `diskLayout()` better interface detection (WIN), `osInfo()` added build, serial |\n| 3.47.0         | 2018-11-06     | `versions()` added docker, postfix |\n| 3.46.0         | 2018-11-05     | fixed issue `versions()`, added system openssl version |\n| 3.45.10        | 2018-11-03     | fixed issue `battery()`, modified `package.json` - files |\n| 3.45.9         | 2018-10-22     | fixed node 4 incompatibility |\n| 3.45.8         | 2018-10-22     | `system()` fix Raspberry Pi detection |\n| 3.45.7         | 2018-10-05     | fixed typos |\n| 3.45.6         | 2018-09-12     | `mem()` bug parsing linux in other languages |\n| 3.45.5         | 2018-09-07     | `diskLayout()` tiny bug S.M.A.R.T status windows |\n| 3.45.4         | 2018-09-06     | added icon to README.md |\n| 3.45.3         | 2018-09-06     | `diskLayout()` optimized media type detection (HD, SSD) on Windows |\n| 3.45.2         | 2018-09-05     | updated imags shields icons |\n| 3.45.1         | 2018-09-05     | updated documentation |\n| 3.45.0         | 2018-09-04     | `diskLayout()` added smartStatus |\n| 3.44.2         | 2018-08-28     | added code quality badges |\n| 3.44.1         | 2018-08-28     | code cleanup |\n| 3.44.0         | 2018-08-25     | `battery()` bugfix & added type, model, manufacturer, serial |\n| 3.43.0         | 2018-08-25     | `cpuCurrentspeed()` added cpu speed for all cores |\n| 3.42.10        | 2018-08-25     | `processes()` optimized start time parsing |\n| 3.42.9         | 2018-08-08     | `cpuTemperature()` optimized parsing |\n| 3.42.8         | 2018-08-03     | updated docs |\n| 3.42.7         | 2018-08-03     | `processes()` optimized parsing ps name |\n| 3.42.6         | 2018-08-03     | `processes()` bugfix parsing ps linux |\n| 3.42.5         | 2018-08-03     | `processes()` bugfix parsing ps linux |\n| 3.42.4         | 2018-07-09     | `cpuTemperature()` bugfix parsing negative values |\n| 3.42.3         | 2018-07-05     | `services()` bugfix not finding services with capital letters |\n| 3.42.2         | 2018-07-03     | `users()` optimized results if lack of permissions |\n| 3.42.1         | 2018-07-03     | `versions()` bugfix git version macOS |\n| 3.42.0         | 2018-06-01     | `processes()` added parent process PID |\n| 3.41.4         | 2018-05-28     | windows exec WMIC path detection (windows) in try catch |\n| 3.41.3         | 2018-05-13     | improved SunOS support `getStaticData()`, `getDynamicData()` |\n| 3.41.2         | 2018-05-13     | bugfix `system()` and `flags()` Raspberry Pi |\n| 3.41.1         | 2018-05-11     | updated docs |\n| 3.41.0         | 2018-05-11     | `system()` Raspberry Pi bugfix and extended detection, added partial `SunOS` support |\n| 3.40.1         | 2018-05-10     | bugfix `system().sku` (windows) |\n| 3.40.0         | 2018-04-29     | extended `versions()` (php, redis, mongodb) |\n| 3.39.0         | 2018-04-29     | added `versions().mysql` and `versions().nginx`, starting `SunOS` support (untested) |\n| 3.38.0         | 2018-04-06     | added `battery().acconnected` |\n| 3.37.12        | 2018-04-05     | another optimization `battery().ischarging` for macOS |\n| 3.37.11        | 2018-04-05     | another optimization `battery().ischarging` for macOS |\n| 3.37.10        | 2018-04-05     | `battery().ischarging` optimized for macOS |\n| 3.37.9         | 2018-04-03     | optimized `processes()`, bugfix `networkInterfaceDefault()` |\n| 3.37.8         | 2018-03-25     | optimized `networkDefaultInterface()` detection, fixed network `operstate` MacOS |\n| 3.37.7         | 2018-03-13     | celebrating 4th birthday |\n| 3.37.6         | 2018-03-12     | updated docs: fixed `diskLayout`and `mamlayout` |\n| 3.37.5         | 2018-03-12     | added support for `ip` instead of `ifconfig` |\n| 3.37.4         | 2018-02-22     | bugfix windows `processes()`, `disklayout()` |\n| 3.37.3         | 2018-02-19     | added windows exec `windowsHide` option |\n| 3.37.2         | 2018-02-15     | fixed bug `battery().percent` for macOS |\n| 3.37.1         | 2018-02-13     | fixed bug `battery().ischarging` for macOS |\n| 3.37.0         | 2018-02-11     | extended FreeBSD support `networkStats()` |\n| 3.36.0         | 2018-02-11     | extended FreeBSD support `networkConnections()` |\n| 3.35.0         | 2018-02-11     | extended FreeBSD support `processLoad()` |\n| 3.34.1         | 2018-02-11     | updated docs |\n| 3.34.0         | 2018-02-10     | first partial FreeBSD support |\n| 3.33.15        | 2018-01-21     | optimized OSX battery |\n| 3.33.14        | 2018-01-17     | bugfix `diskLayout()` (Windows) |\n| 3.33.13        | 2018-01-12     | bugfix `memLayout()` (Windows) |\n| 3.33.12        | 2017-12-25     | fixed typos |\n| 3.33.11        | 2017-12-17     | updated docs |\n| 3.33.10        | 2017-12-14     | bugfix WMIC path detection (windows) blockDevice parse (Windows 7) |\n| 3.33.9         | 2017-12-14     | bugfix WMIC path detection (windows) not found (Windows) |\n| 3.33.8         | 2017-12-02     | bugfix diskLayout().size (OSX) |\n| 3.33.7         | 2017-11-28     | bugfix diskLayout().size |\n| 3.33.6         | 2017-11-16     | bugfix diskLayout().size |\n| 3.33.5         | 2017-11-09     | code cleanup |\n| 3.33.4         | 2017-11-09     | bugfix graphics controller win (bytes) |\n| 3.33.3         | 2017-11-08     | bugfix cpu speed arm - type |\n| 3.33.2         | 2017-11-08     | bugfix cpu speed arm |\n| 3.33.1         | 2017-11-07     | improved bios and main board information |\n| 3.33.0         | 2017-11-07     | added bios and main board information |\n| 3.32.4         | 2017-11-02     | AMD cpu base frequencies table also for windows |\n| 3.32.3         | 2017-11-02     | code cleanup, AMD cpu base frequencies table |\n| 3.32.2         | 2017-11-01     | bugfix JSON.parse error `blockDevices()` |\n| 3.32.1         | 2017-10-23     | updated docs |\n| 3.32.0         | 2017-10-23     | extended `memLayout()` - added manufacturer |\n| 3.31.4         | 2017-10-21     | updated `README.md` |\n| 3.31.3         | 2017-10-21     | bugfix `graphics()`, fixed typo `README.md` |\n| 3.31.2         | 2017-10-16     | bugfix `graphics()` vendor and model parsing linux VGA/3D |\n| 3.31.1         | 2017-10-16     | bugfix `graphics()` vendor and model parsing linux |\n| 3.31.0         | 2017-10-15     | extended windows support `cpuFlags()` (partially) |\n| 3.30.6         | 2017-10-05     | updated community profile |\n| 3.30.5         | 2017-10-05     | bugfix `users()` - parsing values on windows |\n| 3.30.4         | 2017-10-03     | bugfix `cpuTemperature()` - parsing values on windows |\n| 3.30.3         | 2017-10-03     | bugfix `cpuTemperature()` - max value on windows |\n| 3.30.2         | 2017-09-26     | bugfix `networkInterfaces()` - optimized ip6 address selection |\n| 3.30.1         | 2017-09-21     | bugfix/typo `inetChecksite()` |\n| 3.30.0         | 2017-09-21     | extended `versions()` (added `yarn`, `gulp`, `grunt`, `tsc`, `git`) |\n| 3.29.0         | 2017-09-15     | extended windows support `services()`, optimized `diskLayout()` (OSX), bugfixes |\n| 3.28.0         | 2017-09-14     | extended windows support `processes()` |\n| 3.27.1         | 2017-09-13     | updated Raspberry version detection `system()` (Pi 3, Zero) |\n| 3.27.0         | 2017-09-12     | added raw data to `currentLoad()`, fixed `networkInterfaces()` MAC problem node 8.x |\n| 3.26.2         | 2017-09-01     | removed redundant code |\n| 3.26.1         | 2017-08-23     | fixed `cpu().speed` windows / AMD, updated docs |\n| 3.26.0         | 2017-08-21     | extended `getDynamicData()` (windows), updated docs |\n| 3.25.1         | 2017-08-07     | updated docs  |\n| 3.25.0         | 2017-08-07     | improved windows support `networkStats()`, `cpuCache()`, bug fix `getStaticData()` |\n| 3.24.0         | 2017-08-05     | extended windows support `networkStats()`, `networkConnections()` |\n| 3.23.7         | 2017-07-11     | bug fix `diskLayout()` |\n| 3.23.6         | 2017-07-11     | added `cpuFlags()` to `getStaticData()`, bug fix `graphics()` (Win) |\n| 3.23.5         | 2017-06-29     | bug fix `inetChecksite()` |\n| 3.23.4         | 2017-06-24     | bug fix `getDynamicData(), getAllData() - mem` |\n| 3.23.3         | 2017-06-23     | updated docs |\n| 3.23.2         | 2017-06-23     | bug fix `battery` (windows) |\n| 3.23.1         | 2017-06-22     | updated docs |\n| 3.23.0         | 2017-06-22     | added `memLayout`, `diskLayout`, extended windows support (`inetChecksite`)|\n| 3.22.0         | 2017-06-19     | extended windows support (`users`, `inetLatency`) |\n| 3.21.0         | 2017-06-18     | extended time (timezone), extended windows support (battery, getAll...) |\n| 3.20.1         | 2017-06-17     | updated docs |\n| 3.20.0         | 2017-06-16     | extend WIN support (cpu, cpuCache, cpuCurrentspeed, mem, networkInterfaces, docker) |\n| 3.19.0         | 2017-06-12     | OSX temperature now an optional dependency  |\n| 3.18.0         | 2017-05-27     | extended `cpu` info (vendor, family, model, stepping, revision, cache, speedmin/max) |\n| 3.17.3         | 2017-04-29     | minor fix (blockDevices data array, Windows) |\n| 3.17.2         | 2017-04-24     | minor fix (removed console.log) |\n| 3.17.1         | 2017-04-23     | fixed bugs fsSize(win), si.processes (command), si.osinfo(win) |\n| 3.17.0         | 2017-02-19     | windows support for some first functions, extended process list (linux)|\n| 3.16.0         | 2017-01-19     | blockDevices: added removable attribute + fix |\n| 3.15.1         | 2017-01-17     | minor cpuTemperature fix (OSX) |\n| 3.15.0         | 2017-01-15     | added cpuTemperature also for OSX |\n| 3.14.0         | 2017-01-14     | added currentLoad per cpu/core, cpu cache and cpu flags |\n| 3.13.0         | 2016-11-23     | added shell (returns standard shell) |\n| 3.12.0         | 2016-11-17     | refactoring and extended currentLoad |\n| 3.11.2         | 2016-11-16     | blockDevices: improved for older lsblk versions |\n| 3.11.1         | 2016-11-16     | fixed small bug in blockDevices |\n| 3.11.0         | 2016-11-15     | blockDevices for OSX and extended blockDevices |\n| 3.10.2         | 2016-11-14     | bug fix fsSize on OSX |\n| 3.10.1         | 2016-11-14     | optimization fsStats, disksIO, networkStats |\n| 3.10.0         | 2016-11-12     | added blockDevices, fixed fsSize, added file system type |\n| 3.9.0          | 2016-11-11     | added MAC address to networkInterfaces, fixed currentLoad |\n| 3.8.1          | 2016-11-04     | updated docs |\n| 3.8.0          | 2016-11-04     | added dockerContainerProcesses |\n| 3.7.1          | 2016-11-03     | code refactoring |\n| 3.7.0          | 2016-11-02     | extended docker stats, and no longer relying on curl |\n| 3.6.0          | 2016-09-14     | added versions (kernel, ssl, node, npm, pm2, ...) |\n| 3.5.1          | 2016-09-14     | bugfix graphics info |\n| 3.5.0          | 2016-09-14     | added graphics info (controller, display) |\n| 3.4.4          | 2016-09-02     | tiny fixes system.model, getDefaultNetworkInterface |\n| 3.4.3          | 2016-09-02     | tiny bug fix fsStats, disksIO OSX |\n| 3.4.2          | 2016-09-01     | improved default network interface |\n| 3.4.1          | 2016-08-30     | updated docs |\n| 3.4.0          | 2016-08-30     | rewritten processes current cpu usage |\n| 3.3.0          | 2016-08-24     | process list added to processes |\n| 3.2.1          | 2016-08-19     | updated docs, improvement system |\n| 3.2.0          | 2016-08-19     | added battery information |\n| 3.1.1          | 2016-08-18     | improved system and os detection (vm, ...), bugfix disksIO |\n| 3.1.0          | 2016-08-18     | added Docker stats |\n| 3.0.1          | 2016-08-17     | Bug-Fix disksIO, users, updated docs |\n| 3.0.0          | 2016-08-03     | new major version 3.0 |\n| 2.0.5          | 2016-03-02     | changed .gitignore |\n| 2.0.4          | 2016-02-22     | tiny correction - removed double quotes CPU brand, ... |\n| 2.0.3          | 2016-02-22     | optimized cpuCurrentspeed |\n| 2.0.2          | 2016-02-22     | added CoreOS identification |\n| 2.0.1          | 2016-01-07     | minor patch |\n| 2.0.0          | 2016-01-07     | new major version 2.0 |\n| 1.0.7          | 2015-11-27     | fixed: si.network_speed() |\n| 1.0.6          | 2015-09-17     | fixed: si.users() |\n| 1.0.5          | 2015-09-14     | updated dependencies |\n| 1.0.4          | 2015-07-18     | updated docs |\n| 1.0.3          | 2015-07-18     | bugfix cpu cores |\n| 1.0.2          | 2015-07-18     | bugfix cpu_currentspeed, cpu_temperature |\n| 1.0.1          | 2015-07-18     | documentation update |\n| 1.0.0          | 2015-07-18     | bug-fixes, version bump, published as npm component |\n| 0.0.3          | 2014-04-14     | bug-fix (cpu_speed) |\n| 0.0.2          | 2014-03-14     | Optimization FS-Speed & CPU current speed |\n| 0.0.1          | 2014-03-13     | initial release |\n\n### Major (breaking) Changes - Version 3\n\n- works only with [node.js][nodejs-url] **v4.0.0** and above (using now internal ES6 promise function, arrow functions, ...)\n- **Promises**. As you can see in the documentation, you can now also use it in a promise oriented way. But callbacks are still supported.\n- **Async/Await**. Due to the promises support, systeminformation also works perfectly with the `async/await` pattern (available in [node.js][nodejs-url] **v7.6.0** and above). See example in the docs.\n- `cpuCurrentspeed`: now returns an object with current minimal, maximal and average CPU frequencies of all cores.\n- `mem`: now supports also newer versions of `free` (Version 3.3.10 and above); extended information `avaliable` (potentially available memory)\n- `fsStats`: added information sum bytes read + write (tx) and sum transfer rate/sec (tx_sec)\n- `networkInterfaces`: now providing one more detail: internal - true if this is an internal interface like \"lo\"\n- `networkConnections`: instead of only counting sockets, you now get an array of objects with connection details for each socket (protocol, local and peer address, state)\n- `users`: now provides an array of objects with users online including detailed session information (login date/time, ip address, terminal, command)\n- `inetLatency`: now you can provide a host against which you want to test latency (default is 8.8.8.8)\n- `getDynamicData`: changed order of parameters (callback - if provided - is now the last one): `getDynamicData(srv, network, callback)`\n- `getAllData`: changed order of parameters (callback - if provided - is now the last one): `getAllData(srv, network, callback)`\n\nNew Functions\n\n- FreeBSD support: for some basic functions (new in version 3.34 ff)\n- `diskLayout`: returns hard disk layout (new in version 3.23)\n- `memLayout`: returns memory chip layout (new in version 3.23)\n- Windows support: for some basic functions (new in version 3.17 ff)\n- `cpuCache`: returns CPU cache (L1, L2, L3) sizes (new in version 3.14)\n- `cpuFlags`: returns CPU flags (new in version 3.14)\n- `currentLoad.cpus`: returns current load per cpu/core in an array (new in version 3.14)\n- `shell`: returns standard shell e.g. /bin/bash (new in version 3.13)\n- `blockDevices`: returns array of block devices like disks, partitions, raids, roms (new in version 3.10)\n- `dockerContainerProcesses`: returns processes for a specific docker container (new in version 3.8)\n- `versions`: returns object of versions - kernel, ssl, node, npm, ...(new in version 3.6)\n- `graphics`: returns arrays of graphics controllers and displays (new in version 3.5)\n- `networkInterfaceDefault`: returns default network interface (new in version 3.4)\n- `processes`: now returns also a process list with all process details (new in version 3.3)\n- `battery`: retrieves battery status and charging level (new in version 3.2)\n- `dockerContainers`: returns a list of all docker containers (new in version 3.1)\n- `dockerContainerStats`: returns statistics for a specific docker container (new in version 3.1)\n- `dockerAll`: returns a list of all docker containers including their stats (new in version 3.1)\n- `disksIO`: returns overall diskIO and IOPS values for all mounted volumes (new in version 3.0)\n\nBug Fixes / improvements\n\n- improvement `cpuTemperature` - works now also on Raspberry Pi\n- bugfix `disksIO` - on OSX read and write got mixed up\n- several bug fixes (like assess errors in `cpuCurrentspeed`, potentially incorrect results in `users`, ...)\n- testet on even more platforms and linux distributions\n\n**Be aware**, that the new version 3.x is **NOT fully backward compatible** to version 2.x ...\n\n### Major (breaking) Changes - Version 2\n\nThere had been a lot of changes in version 2 of systeminformation! Here is a quick overview (for those who come from version 1):\n\nNew Functions\n\n- `version`: returns systeminformation version (semver) of this library\n- `system`: hardware info (manufacturer, product/model name, version, serial, uuid)\n- `networkConnections`: number of active connections\n- `inetLatency`: latency in ms to external resource (internet)\n- `getStaticData`: returns on json object with static data at once (OS, CPU, Network Interfaces - they should not change until restarted)\n- `getDynamicData`: returns on json object with all dynamic data at once (e.g. for monitoring agents)\n- `getAllData`: returns on json object with all data (static and dynamic) at once\n\nRenamed Functions (now all camelCase)\n\n- `osinfo`: renamed to `osInfo`\n- `cpu_currentspeed`: renamed to `cpuCurrentspeed`\n- `cpu_temperature`: renamed to `cpuTemperature`\n- `fs_size`: renamed to `fsSize`\n- `fs_speed`: renamed to `fsStats`\n- `network_interfaces`: renamed to `networkInterfaces`\n- `network_speed`: renamed to `networkStats`\n- `network_connections`: renamed to `networkConnections`\n- `currentload`: renamed to `currentLoad`\n- `fullload`: renamed to `fullLoad`\n- `processload`: renamed to `processLoad`\n- `checksite`: renamed to `inetChecksite`\n\nFunction Changes\n\n- `cpu_temperature`/`cpuTemperature`: -1 is new default (and indicates that non sensors are installed)\n- `cpu_temperature`/`cpuTemperature`: new result `max` which returns max temperature of all cores\n- `cpu_currentspeed`/`cpuCurrentspeed`: now in GHz\n- `cpu`: splitted `manufacturer` (e.g. Intel) and `brand` (e.g. Core 2 Duo)\n- `network_speed`/`networkStats`: now better support for OS X (also support for `operstate`)\n- `network_speed`/`networkStats`: overall received and transferred bytes (rx, tx)\n- `mem`: now better support for OS X (also support for `swaptotal`, `swapused`, `swapfree`)\n- `fs_size`/`fsSize`: use-values now in % (0 - 100% instead of 0 - 1)\n- `fs_speed`/`fsStats`: now also full support for OS X\n- `checksite`/`inetChecksite`: new result structure - see command reference\n- `checksite`/`inetChecksite`: ms (former `response_ms`): -1 if not ok\n\nOther changes\n\n- osx-temperature-sensor: now added as an optional dependency\n- no more external dependencies: `request` is not longer needed\n- where possible results are now integer or float values (instead of strings) because it is easier to calculate with numbers ;-)\n\n[nodejs-url]: https://nodejs.org/en/\n", "<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <!-- Required meta tags -->\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n  <!-- CSS -->\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"https://pro.fontawesome.com/releases/v5.6.3/css/all.css\" integrity=\"sha384-LRlmVvLKVApDVGuspQFnRQJjkv0P7/YFrw84YYQtmYG4nK8c+M+NlmYDCv0rKWpG\" crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  <script src=\"main.js\"></script>\n\n  <!-- Favicon -->\n  <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"/assets/android-icon-192x192.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/assets/favicon-32x32.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"/assets/favicon-96x96.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/assets/favicon-16x16.png\">\n\n  <title>systeminformation</title>\n\n</head>\n\n<body>\n  <nav class=\"nav\">\n    <div class=\"container\">\n      <a href=\".\"><img class=\"logo float-left\" src=\"assets/logo.png\">\n        <div class=\"title float-left\">systeminformation</div>\n      </a>\n      <div class=\"text float-right github\"><a href=\"https://github.com/sebhildebrandt/systeminformation\">View on Github <i class=\"fab fa-github\"></i></a></div>\n      <div class=\"text float-right todocs\"><a href=\"./#docs\">Docs Overview</a></div>\n    </div>\n  </nav>\n\n  <section class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-12 col-md-4 col-lg-3 col-xl-2 menu\" id=\"menu\">\n      </div>\n      <div class=\"col-12 col-md-8 col-lg-9 col-xl-10 content\">\n        <div class=\"row\">\n          <div class=\"col-12 sectionheader\">\n            <div class=\"title\">Version History</div>\n            <div class=\"text\">\n              <h3>Major Changes - Version 4</h3>\n              <h4>New Functions</h4>\n              <ul>\n                <li><span class=\"code\">chassis()</span> chassis information</li>\n                <li><span class=\"code\">vboxInfo()</span> detailed virtualBox VM information</li>\n                <li><span class=\"code\">wifiNetworks()</span> detailed information about available wifi networks</li>\n              </ul>\n              <h4>Breaking Changes</h4>\n              <ul>\n                <li><span class=\"code\">networkStats()</span>: will provide an <strong>array</strong> of stats for all given interfaces. In previous versions only one interface was provided as a parameter. Pass '*' for all interfaces</li>\n                <li><span class=\"code\">networkStats()</span>: <span class=\"code\">rx</span> and <span class=\"code\">tx</span> changed to <span class=\"code\">rx_bytes</span> and <span class=\"code\">tx_bytes</span></li>\n                <li><span class=\"code\">dockerContainerStats()</span> will provide an <strong>array</strong> of stats for all given docker containers. In previous versions only one interface was provided as a parameter. Pass '*' for all docker containers</li>\n              </ul>\n              <h4>Other Changes</h4>\n              <ul>\n                <li><span class=\"code\">system()</span>: optimized system detection (e.g. new Raspberry Pi models, ...)</li>\n                <li><span class=\"code\">system(), bios(), baseboard()</span>: information also as non-root (linux)</li>\n                <li><span class=\"code\">graphics()</span>: added pip, pip3, virtualBox, </li>\n                <li><span class=\"code\">versions()</span>: better controller and display detection, fixes</li>\n                <li><span class=\"code\">networkInterfaces()</span>: optimization, fixes</li>\n                <li><span class=\"code\">networkStats()</span> added <span class=\"code\">operstate</span>, <span class=\"code\">type</span>, <span class=\"code\">duplex</span>, <span class=\"code\">mtu</span>, <span class=\"code\">speed</span>, <span class=\"code\">carrierChanges</span></li>\n                <li>added TypeScript definitions </li>\n              </ul>\n              <p><strong>Be aware</strong>, that the new version 4.x is <strong>NOT fully backward compatible</strong> to version 3.x ...</p>\n\n              <h3>Major (breaking) Changes - Version 3</h3>\n              <ul>\n                <li>works only with <span class=\"code\">node.js</span> v4.0.0 and above (using now internal ES6 promise function, arrow functions, ...)</li>\n                <li><strong>Promises</strong>. As you can see in the documentation, you can now also use it in a promise oriented way. But callbacks are still supported.</li>\n                <li><strong>Async/Await</strong>. Due to the promises support, systeminformation also works perfectly with the `async/await` pattern (available in <span class=\"code\">node.js</span> <strong>v7.6.0</strong> and above). See example in the docs.</li>\n              </ul>\n              <h3>Full version history</h3>\n              <table class=\"table table-sm table-bordered table-striped\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Version</th>\n                    <th scope=\"col\">Date</th>\n                    <th scope=\"col\">Comment</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <th scope=\"row\">4.30.5</th>\n                    <td>2020-11-26</td>\n                    <td>adapted security update (prototype pollution prevention)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.30.4</th>\n                    <td>2020-11-25</td>\n                    <td>reverted Object.freeze because it broke some projects</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.30.3</th>\n                    <td>2020-11-25</td>\n                    <td>security update (prototype pollution prevention) Object.freeze</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.30.2</th>\n                    <td>2020-11-25</td>\n                    <td>security update (prototype pollution prevention)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.30.1</th>\n                    <td>2020-11-12</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.30.0</th>\n                    <td>2020-11-11</td>\n                    <td><span class=\"code\">get()</span> added possibility to provide parameters</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.29.3</th>\n                    <td>2020-11-09</td>\n                    <td><span class=\"code\">blockdevices()</span> catch error adapted</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.29.2</th>\n                    <td>2020-11-09</td>\n                    <td><span class=\"code\">blockdevices()</span> catch error</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.29.1</th>\n                    <td>2020-11-08</td>\n                    <td><span class=\"code\">system()</span> better parsing Raspberry Pi revision codes</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.29.0</th>\n                    <td>2020-11-08</td>\n                    <td><span class=\"code\">fsSize()</span> correct fs type detection macOS (HFS, APFS, NFS)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.28.1</th>\n                    <td>2020-11-05</td>\n                    <td>code cleanup, removing debug console.log()</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.28.0</th>\n                    <td>2020-11-04</td>\n                    <td><span class=\"code\">graphics()</span> added deviceName (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.11</th>\n                    <td>2020-10-26</td>\n                    <td><span class=\"code\">inetChecksite()</span> fixed vulnerability: command injection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.10</th>\n                    <td>2020-10-16</td>\n                    <td><span class=\"code\">dockerContainers()</span> resolved hanging issue</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.9</th>\n                    <td>2020-10-13</td>\n                    <td><span class=\"code\">networkInterfaces()</span> loopback internal detection (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.8</th>\n                    <td>2020-10-08</td>\n                    <td>windows codepages partial fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.7</th>\n                    <td>2020-10-05</td>\n                    <td>updated typescript typings, minor fixes</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.6</th>\n                    <td>2020-10-02</td>\n                    <td><span class=\"code\">get()</span> fixed when results are in arrays</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.5</th>\n                    <td>2020-09-18</td>\n                    <td><span class=\"code\">cpuTemperature()</span> fixed try catch (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.4</th>\n                    <td>2020-09-16</td>\n                    <td><span class=\"code\">networkInterfaceDefault()</span> optimization (macOS)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.3</th>\n                    <td>2020-08-26</td>\n                    <td>updated typescript typings</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.2</th>\n                    <td>2020-08-26</td>\n                    <td>fixed issue breaking node v4 compatibility</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.1</th>\n                    <td>2020-08-25</td>\n                    <td><span class=\"code\">networkStats()</span> fixed packages dropped (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.27.0</th>\n                    <td>2020-08-24</td>\n                    <td><span class=\"code\">observe()</span> added function to observe/watch system parameters</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.12</th>\n                    <td>2020-08-21</td>\n                    <td><span class=\"code\">versions()</span> fixed issue windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.11</th>\n                    <td>2020-08-20</td>\n                    <td><span class=\"code\">cpuTemperature()</span> fixed issue windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.10</th>\n                    <td>2020-07-16</td>\n                    <td><span class=\"code\">networkStats()</span> fixed issue blocking windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.9</th>\n                    <td>2020-06-06</td>\n                    <td><span class=\"code\">networkStats()</span> fixed comparison issue windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.8</th>\n                    <td>2020-06-06</td>\n                    <td><span class=\"code\">networkInterfaces()</span> fixed caching</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.7</th>\n                    <td>2020-06-06</td>\n                    <td><span class=\"code\">cpuTemperature()</span> fixed raspberry pi sensors issue</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.6</th>\n                    <td>2020-06-03</td>\n                    <td><span class=\"code\">diskLayout()</span> fixed issue</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.5</th>\n                    <td>2020-05-27</td>\n                    <td><span class=\"code\">cpuTemperature()</span> optimizes scanning AMD linux sensors</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.4</th>\n                    <td>2020-05-21</td>\n                    <td><span class=\"code\">cpuTemperature()</span> fix (BSD), code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.3</th>\n                    <td>2020-05-20</td>\n                    <td>Updated documentation</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.2</th>\n                    <td>2020-05-19</td>\n                    <td><span class=\"code\">processes()</span> memory leak fix, security issue fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.1</th>\n                    <td>2020-05-13</td>\n                    <td>code cleanup </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.26.0</th>\n                    <td>2020-05-12</td>\n                    <td><span class=\"code\">diskLayout()</span> added full smart data (where supported) </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.25.2</th>\n                    <td>2020-05-12</td>\n                    <td><span class=\"code\">getDynamicData()</span> added wifiNetworks() </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.25.1</th>\n                    <td>2020-05-07</td>\n                    <td><span class=\"code\">get()</span> minor bounds test fix, updated docs </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.25.0</th>\n                    <td>2020-05-07</td>\n                    <td><span class=\"code\">get()</span> added function to get partial system info </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.24.2</th>\n                    <td>2020-05-06</td>\n                    <td><span class=\"code\">cpu()</span> fix BSD, <span class=\"code\">networkStats()</span> fix BSD </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.24.1</th>\n                    <td>2020-05-03</td>\n                    <td><span class=\"code\">processes()</span> fix parsing command and params (linux, macOS) </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.24.0</th>\n                    <td>2020-05-01</td>\n                    <td><span class=\"code\">networkInterfaces()</span> added netmask ip4 and ip6</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.10</th>\n                    <td>2020-05-01</td>\n                    <td><span class=\"code\">cpuTemperature()</span> optimized parsing linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.9</th>\n                    <td>2020-04-29</td>\n                    <td><span class=\"code\">currentLoad()</span> workarround for no os.cpus info</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.8</th>\n                    <td>2020-04-26</td>\n                    <td><span class=\"code\">getMacAddresses()</span> fix added try catch</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.7</th>\n                    <td>2020-04-26</td>\n                    <td><span class=\"code\">getCpuCurrentSpeedSync()</span> workarround fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.6</th>\n                    <td>2020-04-25</td>\n                    <td><span class=\"code\">networkGatewayDefault()</span> bugfix no interfaces</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.5</th>\n                    <td>2020-20-04</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.4</th>\n                    <td>2020-04-20</td>\n                    <td><span class=\"code\">users()</span> optimized parseDateTime function</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.3</th>\n                    <td>2020-04-09</td>\n                    <td>refactored to avoid <span class=\"code\">cat</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.2</th>\n                    <td>2020-04-08</td>\n                    <td><span class=\"code\">cpu()</span> fixed getting base speed Ryzen CPUs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.1</th>\n                    <td>2020-03-11</td>\n                    <td><span class=\"code\">diskLayout()</span> optimized detection (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.23.0</th>\n                    <td>2020-03-08</td>\n                    <td><span class=\"code\">versions()</span> added param to specify which program/lib versions to detect</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.7</th>\n                    <td>2020-03-08</td>\n                    <td><span class=\"code\">diskLayout()</span> fixed detection (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.6</th>\n                    <td>2020-03-08</td>\n                    <td><span class=\"code\">network()</span> fixed DHCP detection (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.5</th>\n                    <td>2020-03-04</td>\n                    <td><span class=\"code\">graphics()</span> fixed vram (macOS)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.4</th>\n                    <td>2020-03-01</td>\n                    <td><span class=\"code\">versions()</span> added dotnet, fix typings</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.3</th>\n                    <td>2020-02-20</td>\n                    <td><span class=\"code\">memLayout()</span> code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.2</th>\n                    <td>2020-02-19</td>\n                    <td><span class=\"code\">memLayout()</span> raspberry PI mem voltage fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.1</th>\n                    <td>2020-02-17</td>\n                    <td><span class=\"code\">memLayout()</span> raspberry PI support</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.22.0</th>\n                    <td>2020-02-17</td>\n                    <td><span class=\"code\">services()</span> added pids (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.21.3</th>\n                    <td>2020-02-16</td>\n                    <td><span class=\"code\">versions()</span> fixed versions mysql (macOS)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.21.2</th>\n                    <td>2020-02-11</td>\n                    <td><span class=\"code\">networkConnections()</span> fixed linux (debian) issue</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.21.1</th>\n                    <td>2020-01-31</td>\n                    <td><span class=\"code\">networkGatewayDefault()</span> fixed windows 7 issue</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.21.0</th>\n                    <td>2020-01-27</td>\n                    <td>added <span class=\"code\">npx</span> compatibility</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.20.1</th>\n                    <td>2020-01-26</td>\n                    <td><span class=\"code\">battery()</span> code refactoring, cleanup, updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.20.0</th>\n                    <td>2020-01-25</td>\n                    <td><span class=\"code\">battery()</span> added designcapacity, voltage, unit</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.19.4</th>\n                    <td>2020-01-24</td>\n                    <td><span class=\"code\">mem()</span> prevent log messages</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.19.3</th>\n                    <td>2020-01-24</td>\n                    <td><span class=\"code\">memLayout()</span> bank info fix macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.19.2</th>\n                    <td>2020-01-19</td>\n                    <td><span class=\"code\">cpu()</span> multi-processor fix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.19.1</th>\n                    <td>2020-01-14</td>\n                    <td><span class=\"code\">osInfo()</span> uefi fix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.19.0</th>\n                    <td>2020-01-12</td>\n                    <td><span class=\"code\">osInfo()</span> uefi (OS uses UEFI on startup)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.18.3</th>\n                    <td>2020-01-10</td>\n                    <td><span class=\"code\">fsSize()</span> fix excluding loop/snap devices</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.18.2</th>\n                    <td>2020-01-10</td>\n                    <td><span class=\"code\">memLayout()</span> fix memsize linux (modules >= 32 GB)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.18.1</th>\n                    <td>2020-01-07</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.18.0</th>\n                    <td>2020-01-07</td>\n                    <td><span class=\"code\">networkInterfaces()</span> added dhcp for mac OS, added dhcp linux fallback</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.17.3</th>\n                    <td>2020-01-05</td>\n                    <td>code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.17.2</th>\n                    <td>2020-01-05</td>\n                    <td><span class=\"code\">cpu().speed</span> AMD base frequency and fix (0.00)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.17.1</th>\n                    <td>2020-01-04</td>\n                    <td><span class=\"code\">fsSize()</span> alpine linux support</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.17.0</th>\n                    <td>2020-01-04</td>\n                    <td><span class=\"code\">networkInterfaces()</span> added dhcp, dnsSuffix, ieee8021xAuth, ieee8021xState</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.16.1</th>\n                    <td>2020-01-01</td>\n                    <td><span class=\"code\">networkInterfaces()</span> bug fix (mac OS)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.16.0</th>\n                    <td>2019-11-27</td>\n                    <td><span class=\"code\">networkGatewayDefault()</span> added</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.15.3</th>\n                    <td>2019-11-10</td>\n                    <td><span class=\"code\">type definitions</span> and docs update</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.15.2</th>\n                    <td>2019-11-10</td>\n                    <td><span class=\"code\">mem()</span> improved calculation linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.15.1</th>\n                    <td>2019-11-10</td>\n                    <td><span class=\"code\">diskLayout()</span> added support for older lsblk versions (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.15.0</th>\n                    <td>2019-11-10</td>\n                    <td><span class=\"code\">cpu()</span> added governor (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.17</th>\n                    <td>2019-10-22</td>\n                    <td><span class=\"code\">graphics()</span> improved display detection (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.16</th>\n                    <td>2019-10-19</td>\n                    <td><span class=\"code\">graphics()</span> improved display detection (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.15</th>\n                    <td>2019-10-18</td>\n                    <td><span class=\"code\">graphics()</span> fallback display detection (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.14</th>\n                    <td>2019-10-18</td>\n                    <td><span class=\"code\">powershell()</span> fixed error handling (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.13</th>\n                    <td>2019-10-15</td>\n                    <td><span class=\"code\">networkConnections()</span> fixed parsing (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.12</th>\n                    <td>2019-10-14</td>\n                    <td><span class=\"code\">getCpu()</span> fixed multi socket detection (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.11</th>\n                    <td>2019-10-01</td>\n                    <td><span class=\"code\">type definitions</span> bug dockerInfo</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.10</th>\n                    <td>2019-10-01</td>\n                    <td><span class=\"code\">type definitions</span> bug fix memLayout</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.9</th>\n                    <td>2019-10-01</td>\n                    <td><span class=\"code\">processLoad()</span> fix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.8</th>\n                    <td>2019-08-23</td>\n                    <td><span class=\"code\">parseDateTime()</span> fix coding error</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.7</th>\n                    <td>2019-08-22</td>\n                    <td><span class=\"code\">battery()</span> windows acconnected improvement</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.6</th>\n                    <td>2019-08-22</td>\n                    <td><span class=\"code\">users()</span> improved date time parsing</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.5</th>\n                    <td>2019-08-22</td>\n                    <td><span class=\"code\">fsSize()</span> fix windows size as number</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.4</th>\n                    <td>2019-07-20</td>\n                    <td><span class=\"code\">versions()</span> fix pip, pip3</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.3</th>\n                    <td>2019-07-09</td>\n                    <td><span class=\"code\">system()</span> sku fix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.2</th>\n                    <td>2019-07-07</td>\n                    <td><span class=\"code\">networkConnections()</span> pid linux fix NAN</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.1</th>\n                    <td>2019-07-04</td>\n                    <td><span class=\"code\">graphics()</span> added display position windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.14.0</th>\n                    <td>2019-07-03</td>\n                    <td><span class=\"code\">processes()</span> added process params and path</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.13.2</th>\n                    <td>2019-07-02</td>\n                    <td><span class=\"code\">versions()</span> fix getting all versions</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.13.1</th>\n                    <td>2019-07-01</td>\n                    <td><span class=\"code\">versions()</span> gcc fix mac OS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.13.0</th>\n                    <td>2019-07-01</td>\n                    <td><span class=\"code\">networkConnections()</span> added PID, process</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.12.2</th>\n                    <td>2019-06-24</td>\n                    <td><span class=\"code\">system()</span> added Raspberry PI 4 detection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.12.1</th>\n                    <td>2019-06-24</td>\n                    <td><span class=\"code\">networkInterface()</span> virtual interfaces mac OS<br>\n                      <span class=\"code\">networkInterfaceDefault()</span> optimization windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.12.0</th>\n                    <td>2019-06-21</td>\n                    <td><span class=\"code\">networkInterface()</span> added property virtual</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.6</th>\n                    <td>2019-06-19</td>\n                    <td><span class=\"code\">util</span> bug fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.5</th>\n                    <td>2019-06-19</td>\n                    <td><span class=\"code\">dockerAll()</span> bug fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.4</th>\n                    <td>2019-06-17</td>\n                    <td><span class=\"code\">type definitions</span> bug fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.3</th>\n                    <td>2019-06-16</td>\n                    <td><span class=\"code\">graphics()</span> optimization windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.2</th>\n                    <td>2019-06-16</td>\n                    <td><span class=\"code\">wifiNetworks()</span> bug fixes</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.1</th>\n                    <td>2019-06-15</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.11.0</th>\n                    <td>2019-06-14</td>\n                    <td><span class=\"code\">wifiNetworks()</span> added available wifi networks</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.10.0</th>\n                    <td>2019-06-14</td>\n                    <td><span class=\"code\">graphics()</span> rewrite windows, added featues</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.9.2</th>\n                    <td>2019-06-12</td>\n                    <td><span class=\"code\">type definitions</span> bug fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.9.1</th>\n                    <td>2019-06-11</td>\n                    <td><span class=\"code\">networkStats()</span> bugfix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.9.0</th>\n                    <td>2019-06-03</td>\n                    <td><span class=\"code\">graphics()</span> added vendor, refresh rate, current resolution</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.8.4</th>\n                    <td>2019-06-03</td>\n                    <td><span class=\"code\">vboxInfo()</span> fixed call parameters</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.8.3</th>\n                    <td>2019-05-31</td>\n                    <td><span class=\"code\">vboxInfo()</span> added stoppedSince, started, stopped</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.8.2</th>\n                    <td>2019-05-31</td>\n                    <td><span class=\"code\">dockerInfo()</span> changed property naming style</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.8.1</th>\n                    <td>2019-05-31</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.8.0</th>\n                    <td>2019-05-31</td>\n                    <td><span class=\"code\">vboxInfo()</span> added virtualbox detailed VM info</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.7.3</th>\n                    <td>2019-05-30</td>\n                    <td>updated typescript typings</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.7.2</th>\n                    <td>2019-05-30</td>\n                    <td><span class=\"code\">versions()</span> added virtualbox</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.7.1</th>\n                    <td>2019-05-29</td>\n                    <td><span class=\"code\">memLayout()</span> fix mac OS mojave</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.7.0</th>\n                    <td>2019-05-29</td>\n                    <td>partial NetBSD support</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.6.1</th>\n                    <td>2019-05-29</td>\n                    <td><span class=\"code\">wmic</span> path fix - windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.6.0</th>\n                    <td>2019-05-27</td>\n                    <td><span class=\"code\">dockerInfo()</span> added dockerInfo</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.5.1</th>\n                    <td>2019-05-17</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.5.0</th>\n                    <td>2019-05-17</td>\n                    <td><span class=\"code\">fsOpenFiles()</span> added open file descriptor count</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.4.1</th>\n                    <td>2019-05-11</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.4.0</th>\n                    <td>2019-05-11</td>\n                    <td><span class=\"code\">dockerContainers()</span> added started, finished time</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.3.0</th>\n                    <td>2019-05-09</td>\n                    <td><span class=\"code\">dockerContainers() dockerStats()</span> added restartCount</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.2.1</th>\n                    <td>2019-05-09</td>\n                    <td><span class=\"code\">networkInterfaceDefault()</span> time delay fix (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.2.0</th>\n                    <td>2019-05-09</td>\n                    <td><span class=\"code\">osInfo()</span> extended service pack version (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.8</th>\n                    <td>2019-05-09</td>\n                    <td><span class=\"code\">graphics()</span> resolve on error (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.7</th>\n                    <td>2019-05-09</td>\n                    <td><span class=\"code\">users()</span> parsing fix (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.6</th>\n                    <td>2019-04-24</td>\n                    <td><span class=\"code\">memory()</span> swap used fix (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.5</th>\n                    <td>2019-04-19</td>\n                    <td>refactored <span class=\"code\">wmic</span> calls to work also on Windows XP</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.4</th>\n                    <td>2019-03-26</td>\n                    <td><span class=\"code\">networkInterfaces()</span> speed bug (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.3</th>\n                    <td>2019-03-24</td>\n                    <td>wmic path detection (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.2</th>\n                    <td>2019-03-23</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.1</th>\n                    <td>2019-03-13</td>\n                    <td>updated typescript typings</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.1.0</th>\n                    <td>2019-03-13</td>\n                    <td><span class=\"code\">versions()</span>added pip, pip3</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.16</th>\n                    <td>2019-03-12</td>\n                    <td>Happy birthday - 5th aniversary</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.15</th>\n                    <td>2019-03-02</td>\n                    <td><span class=\"code\">versions()</span>added java, python3, optimized gcc</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.14</th>\n                    <td>2019-03-01</td>\n                    <td>updated typescript typings</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.13</th>\n                    <td>2019-03-01</td>\n                    <td><span class=\"code\">diskLayout()</span> added device (/dev/sda...) linux, mac</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.12</th>\n                    <td>2019-03-01</td>\n                    <td><span class=\"code\">diskLayout()</span> linux rewritten - better detection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.11</th>\n                    <td>2019-02-23</td>\n                    <td><span class=\"code\">users()</span> fix windows (time), added @ts-check</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.10</th>\n                    <td>2019-02-10</td>\n                    <td><span class=\"code\">networkInterfaceDefault()</span> fix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.9</th>\n                    <td>2019-02-08</td>\n                    <td><span class=\"code\">cpu()</span> fix, code clean up</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.8</th>\n                    <td>2019-02-05</td>\n                    <td><span class=\"code\">inetLatency()</span> latency fix parse chinese output</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.7</th>\n                    <td>2019-02-05</td>\n                    <td><span class=\"code\">inetLatency()</span> latency Windows fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.6</th>\n                    <td>2019-02-04</td>\n                    <td>powershell catch error</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.5</th>\n                    <td>2019-02-03</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.4</th>\n                    <td>2019-02-03</td>\n                    <td>code cleanup, updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.3</th>\n                    <td>2019-02-03</td>\n                    <td><span class=\"code\">networkInterfaces(), chassis()</span> fixed two more issues</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.2</th>\n                    <td>2019-02-03</td>\n                    <td><span class=\"code\">networkInterfaces(), chassis()</span> fixed smaller issues</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.1</th>\n                    <td>2019-02-02</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">4.0.0</th>\n                    <td>2019-02-02</td>\n                    <td>new major version 4</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.54.0</th>\n                    <td>2018-12-30</td>\n                    <td>added TypeScript type definitions</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.53.1</th>\n                    <td>2018-12-29</td>\n                    <td><span class=\"code\">versions()</span> bug fix nginx version</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.53.0</th>\n                    <td>2018-12-29</td>\n                    <td><span class=\"code\">versions()</span> added perl, python, gcc</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.7</th>\n                    <td>2018-12-29</td>\n                    <td><span class=\"code\">versions()</span> bug fix macOS detection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.6</th>\n                    <td>2018-12-28</td>\n                    <td><span class=\"code\">versions()</span> bug fix macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.5</th>\n                    <td>2018-12-28</td>\n                    <td>preparing automated tests, travis-ci integration, added dev-dependencies</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.4</th>\n                    <td>2018-12-27</td>\n                    <td><span class=\"code\">graphics().controllers</span> bugfix linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.3</th>\n                    <td>2018-12-27</td>\n                    <td><span class=\"code\">os().codepage</span> bugfix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.2</th>\n                    <td>2018-12-17</td>\n                    <td>code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.1</th>\n                    <td>2018-12-17</td>\n                    <td><span class=\"code\">inetChecksite()</span> bugfix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.52.0</th>\n                    <td>2018-12-15</td>\n                    <td><span class=\"code\">cpu()</span> added physical cores, processors, socket type</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.51.4</th>\n                    <td>2018-12-05</td>\n                    <td><span class=\"code\">versions()</span> bugfix, optimization postgres</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.51.3</th>\n                    <td>2018-11-27</td>\n                    <td><span class=\"code\">mem()</span> refactoring parsing linux, code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.51.2</th>\n                    <td>2018-11-26</td>\n                    <td><span class=\"code\">mem()</span> bugfix parsing <span class=\"code\">free</span> output linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.51.1</th>\n                    <td>2018-11-26</td>\n                    <td><span class=\"code\">processLoad()</span> bugfix windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.51.0</th>\n                    <td>2018-11-25</td>\n                    <td><span class=\"code\">processLoad()</span> added for windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.50.3</th>\n                    <td>2018-11-25</td>\n                    <td><span class=\"code\">processLoad()</span>, <span class=\"code\">services()</span> fixed cpu data (linux)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.50.2</th>\n                    <td>2018-11-23</td>\n                    <td>network mac adresses: ip support fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.50.1</th>\n                    <td>2018-11-23</td>\n                    <td><span class=\"code\">services()</span> added possibility to specify ALL services \"*\" for win</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.50.0</th>\n                    <td>2018-11-23</td>\n                    <td><span class=\"code\">services()</span> added possibility to specify ALL services \"*\" for linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.49.4</th>\n                    <td>2018-11-21</td>\n                    <td><span class=\"code\">battery()</span> timeremaining optimization (linux) thanks to Jorai Rijsdijk</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.49.3</th>\n                    <td>2018-11-20</td>\n                    <td><span class=\"code\">memLayout()</span> optimized parsing (win)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.49.2</th>\n                    <td>2018-11-19</td>\n                    <td>code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.49.1</th>\n                    <td>2018-11-19</td>\n                    <td><span class=\"code\">cpu().brand</span> removed extra spaces, tabs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.49.0</th>\n                    <td>2018-11-19</td>\n                    <td>added system <span class=\"code\">uuid()</span> (os specific), <span class=\"code\">versions()</span> added postgresql</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.48.4</th>\n                    <td>2018-11-18</td>\n                    <td>windows: garbled output because of codepage</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.48.3</th>\n                    <td>2018-11-18</td>\n                    <td><span class=\"code\">dockerContainerStats()</span> fixed issue <span class=\"code\">cpu_percent</span> win</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.48.2</th>\n                    <td>2018-11-18</td>\n                    <td><span class=\"code\">dockerContainerStats()</span> fixed issue <span class=\"code\">cpu_percent</span>, win exec</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.48.1</th>\n                    <td>2018-11-17</td>\n                    <td><span class=\"code\">docker...()</span> fixed issue parsing docker socket JSON</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.48.0</th>\n                    <td>2018-11-17</td>\n                    <td><span class=\"code\">diskLayout()</span> better interface detection (WIN), <span class=\"code\">osInfo()</span> added build, serial</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.47.0</th>\n                    <td>2018-11-06</td>\n                    <td><span class=\"code\">versions()</span> added docker, postfix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.46.0</th>\n                    <td>2018-11-05</td>\n                    <td>fixed issue <span class=\"code\">versions()</span>, added system openssl version</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.10</th>\n                    <td>2018-11-03</td>\n                    <td>fixed issue <span class=\"code\">battery()</span>, modified <span class=\"code\">package.json</span> - files</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.9</th>\n                    <td>2018-10-22</td>\n                    <td>fixed node 4 incompatibility</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.8</th>\n                    <td>2018-10-22</td>\n                    <td><span class=\"code\">system()</span> fix Raspberry Pi detection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.7</th>\n                    <td>2018-10-05</td>\n                    <td>fixed typos</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.6</th>\n                    <td>2018-09-12</td>\n                    <td><span class=\"code\">mem()</span> bug parsing linux in other languages</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.5</th>\n                    <td>2018-09-07</td>\n                    <td><span class=\"code\">diskLayout()</span> tiny bug S.M.A.R.T status windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.4</th>\n                    <td>2018-09-06</td>\n                    <td>added icon to README.md</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.3</th>\n                    <td>2018-09-06</td>\n                    <td><span class=\"code\">diskLayout()</span> optimized media type detection (HD, SSD) on Windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.2</th>\n                    <td>2018-09-05</td>\n                    <td>updated imags shields icons</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.1</th>\n                    <td>2018-09-05</td>\n                    <td>updated documentation</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.45.0</th>\n                    <td>2018-09-04</td>\n                    <td><span class=\"code\">diskLayout()</span> added smartStatus</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.44.2</th>\n                    <td>2018-08-28</td>\n                    <td>added code quality badges</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.44.1</th>\n                    <td>2018-08-28</td>\n                    <td>code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.44.0</th>\n                    <td>2018-08-25</td>\n                    <td><span class=\"code\">battery()</span> bugfix & added type, model, manufacturer, serial</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.43.0</th>\n                    <td>2018-08-25</td>\n                    <td><span class=\"code\">cpuCurrentspeed()</span> added cpu speed for all cores</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.10</th>\n                    <td>2018-08-25</td>\n                    <td><span class=\"code\">processes()</span> optimized start time parsing</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.9</th>\n                    <td>2018-08-08</td>\n                    <td><span class=\"code\">cpuTemperature()</span> optimized parsing</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.8</th>\n                    <td>2018-08-03</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.7</th>\n                    <td>2018-08-03</td>\n                    <td><span class=\"code\">processes()</span> optimized parsing ps name</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.6</th>\n                    <td>2018-08-03</td>\n                    <td><span class=\"code\">processes()</span> bugfix parsing ps linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.5</th>\n                    <td>2018-08-03</td>\n                    <td><span class=\"code\">processes()</span> bugfix parsing ps linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.4</th>\n                    <td>2018-07-09</td>\n                    <td><span class=\"code\">cpuTemperature()</span> bugfix parsing negative values</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.3</th>\n                    <td>2018-07-05</td>\n                    <td><span class=\"code\">services()</span> bugfix not finding services with capital letters</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.2</th>\n                    <td>2018-07-03</td>\n                    <td><span class=\"code\">users()</span> optimized results if lack of permissions</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.1</th>\n                    <td>2018-07-03</td>\n                    <td><span class=\"code\">versions()</span> bugfix git version macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.42.0</th>\n                    <td>2018-06-01</td>\n                    <td><span class=\"code\">processes()</span> added parent process PID</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.41.4</th>\n                    <td>2018-05-28</td>\n                    <td>windows exec WMIC in try catch</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.41.3</th>\n                    <td>2018-05-13</td>\n                    <td>improved SunOS support <span class=\"code\">getStaticData()</span>, <span class=\"code\">getDynamicData()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.41.2</th>\n                    <td>2018-05-13</td>\n                    <td>bugfix <span class=\"code\">system()</span> and <span class=\"code\">flags()</span> Raspberry Pi</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.41.1</th>\n                    <td>2018-05-11</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.41.0</th>\n                    <td>2018-05-11</td>\n                    <td><span class=\"code\">system()</span> Raspberry Pi bugfix and extended detection, added partial <span class=\"code\">SunOS</span> support</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.40.1</th>\n                    <td>2018-05-10</td>\n                    <td>bugfix <span class=\"code\">system().sku</span> (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.40.0</th>\n                    <td>2018-04-29</td>\n                    <td>extended <span class=\"code\">versions()</span> (php, redis, mongodb)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.39.0</th>\n                    <td>2018-04-29</td>\n                    <td>added <span class=\"code\">versions().mysql</span> and <span class=\"code\">versions().nginx</span>, starting <span class=\"code\">SunOS</span>> support (untested)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.38.0</th>\n                    <td>2018-04-06</td>\n                    <td>added <span class=\"code\">battery().acconnected</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.12</th>\n                    <td>2018-04-05</td>\n                    <td>another optimization <span class=\"code\">battery().ischarging</span> for macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.11</th>\n                    <td>2018-04-05</td>\n                    <td>another optimization <span class=\"code\">battery().ischarging</span> for macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.10</th>\n                    <td>2018-04-05</td>\n                    <td><span class=\"code\">battery().ischarging</span> optimized for macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.9</th>\n                    <td>2018-04-03</td>\n                    <td>optimized <span class=\"code\">processes()</span>, bugfix <span class=\"code\">networkInterfaceDefault()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.8</th>\n                    <td>2018-03-25</td>\n                    <td>optimized <span class=\"code\">networkDefaultInterface()</span> detection, fixed network <span class=\"code\">operstate</span>> MacOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.7</th>\n                    <td>2018-03-13</td>\n                    <td>celebrating 4th birthday</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.6</th>\n                    <td>2018-03-12</td>\n                    <td>updated docs: fixed <span class=\"code\">diskLayout</span>>and <span class=\"code\">mamlayout</span>></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.5</th>\n                    <td>2018-03-12</td>\n                    <td>added support for <span class=\"code\">ip</span>> instead of <span class=\"code\">ifconfig</span>></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.4</th>\n                    <td>2018-02-22</td>\n                    <td>bugfix windows <span class=\"code\">processes()</span>, <span class=\"code\">disklayout()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.3</th>\n                    <td>2018-02-19</td>\n                    <td>added windows exec <span class=\"code\">windowsHide</span> option</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.2</th>\n                    <td>2018-02-15</td>\n                    <td>fixed bug <span class=\"code\">battery().percent</span> for macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.1</th>\n                    <td>2018-02-13</td>\n                    <td>fixed bug <span class=\"code\">battery().ischarging</span> for macOS</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.37.0</th>\n                    <td>2018-02-11</td>\n                    <td>extended FreeBSD support <span class=\"code\">networkStats()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.36.0</th>\n                    <td>2018-02-11</td>\n                    <td>extended FreeBSD support <span class=\"code\">networkConnections()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.35.0</th>\n                    <td>2018-02-11</td>\n                    <td>extended FreeBSD support <span class=\"code\">processLoad()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.34.1</th>\n                    <td>2018-02-11</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.34.0</th>\n                    <td>2018-02-10</td>\n                    <td>first partial FreeBSD support</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.15</th>\n                    <td>2018-01-21</td>\n                    <td>optimized OSX battery</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.14</th>\n                    <td>2018-01-17</td>\n                    <td>bugfix <span class=\"code\">diskLayout()</span> (Windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.13</th>\n                    <td>2018-01-12</td>\n                    <td>bugfix <span class=\"code\">memLayout()</span> (Windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.12</th>\n                    <td>2017-12-25</td>\n                    <td>fixed typos</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.11</th>\n                    <td>2017-12-17</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.10</th>\n                    <td>2017-12-14</td>\n                    <td>bugfix WMIC blockDevice parse (Windows 7)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.9</th>\n                    <td>2017-12-14</td>\n                    <td>bugfix WMIC not found (Windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.8</th>\n                    <td>2017-12-02</td>\n                    <td>bugfix diskLayout().size (OSX)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.7</th>\n                    <td>2017-11-28</td>\n                    <td>bugfix diskLayout().size</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.6</th>\n                    <td>2017-11-16</td>\n                    <td>bugfix diskLayout().size</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.5</th>\n                    <td>2017-11-09</td>\n                    <td>code cleanup</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.4</th>\n                    <td>2017-11-09</td>\n                    <td>bugfix graphics controller win (bytes)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.3</th>\n                    <td>2017-11-08</td>\n                    <td>bugfix cpu speed arm - type</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.2</th>\n                    <td>2017-11-08</td>\n                    <td>bugfix cpu speed arm</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.1</th>\n                    <td>2017-11-07</td>\n                    <td>improved bios and main board information</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.33.0</th>\n                    <td>2017-11-07</td>\n                    <td>added bios and main board information</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.32.4</th>\n                    <td>2017-11-02</td>\n                    <td>AMD cpu base frequencies table also for windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.32.3</th>\n                    <td>2017-11-02</td>\n                    <td>code cleanup, AMD cpu base frequencies table</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.32.2</th>\n                    <td>2017-11-01</td>\n                    <td>bugfix JSON.parse error <span class=\"code\">blockDevices()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.32.1</th>\n                    <td>2017-10-23</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.32.0</th>\n                    <td>2017-10-23</td>\n                    <td>extended <span class=\"code\">memLayout()</span> - added manufacturer</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.31.4</th>\n                    <td>2017-10-21</td>\n                    <td>updated <span class=\"code\">README.md</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.31.3</th>\n                    <td>2017-10-21</td>\n                    <td>bugfix <span class=\"code\">graphics()</span>, fixed typo <span class=\"code\">README.md</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.31.2</th>\n                    <td>2017-10-16</td>\n                    <td>bugfix <span class=\"code\">graphics()</span> vendor and model parsing linux VGA/3D</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.31.1</th>\n                    <td>2017-10-16</td>\n                    <td>bugfix <span class=\"code\">graphics()</span> vendor and model parsing linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.31.0</th>\n                    <td>2017-10-15</td>\n                    <td>extended windows support <span class=\"code\">cpuFlags()</span> (partially)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.6</th>\n                    <td>2017-10-05</td>\n                    <td>updated community profile</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.5</th>\n                    <td>2017-10-05</td>\n                    <td>bugfix <span class=\"code\">users()</span> - parsing values on windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.4</th>\n                    <td>2017-10-03</td>\n                    <td>bugfix <span class=\"code\">cpuTemperature()</span> - parsing values on windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.3</th>\n                    <td>2017-10-03</td>\n                    <td>bugfix <span class=\"code\">cpuTemperature()</span> - max value on windows</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.2</th>\n                    <td>2017-09-26</td>\n                    <td>bugfix <span class=\"code\">networkInterfaces()</span> - optimized ip6 address selection</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.1</th>\n                    <td>2017-09-21</td>\n                    <td>bugfix/typo <span class=\"code\">inetChecksite()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.30.0</th>\n                    <td>2017-09-21</td>\n                    <td>extended <span class=\"code\">versions()</span> (added <span class=\"code\">yarn</span>, <span class=\"code\">gulp</span>, <span class=\"code\">grunt</span>, <span class=\"code\">tsc</span>, <span class=\"code\">git</span>)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.29.0</th>\n                    <td>2017-09-15</td>\n                    <td>extended windows support <span class=\"code\">services()</span>, optimized <span class=\"code\">diskLayout()</span> (OSX), bugfixes</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.28.0</th>\n                    <td>2017-09-14</td>\n                    <td>extended windows support <span class=\"code\">processes()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.27.1</th>\n                    <td>2017-09-13</td>\n                    <td>updated Raspberry version detection <span class=\"code\">system()</span> (Pi 3, Zero)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.27.0</th>\n                    <td>2017-09-12</td>\n                    <td>added raw data to <span class=\"code\">currentLoad()</span>, fixed <span class=\"code\">networkInterfaces()</span> MAC problem node 8.x</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.26.2</th>\n                    <td>2017-09-01</td>\n                    <td>removed redundant code</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.26.1</th>\n                    <td>2017-08-23</td>\n                    <td>fixed <span class=\"code\">cpu().speed</span> windows / AMD, updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.26.0</th>\n                    <td>2017-08-21</td>\n                    <td>extended <span class=\"code\">getDynamicData()</span> (windows), updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.25.1</th>\n                    <td>2017-08-07</td>\n                    <td>updated docs </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.25.0</th>\n                    <td>2017-08-07</td>\n                    <td>improved windows support <span class=\"code\">networkStats()</span>, <span class=\"code\">cpuCache()</span>, bug fix <span class=\"code\">getStaticData()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.24.0</th>\n                    <td>2017-08-05</td>\n                    <td>extended windows support <span class=\"code\">networkStats()</span>, <span class=\"code\">networkConnections()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.7</th>\n                    <td>2017-07-11</td>\n                    <td>bug fix <span class=\"code\">diskLayout()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.6</th>\n                    <td>2017-07-11</td>\n                    <td>added <span class=\"code\">cpuFlags()</span> to <span class=\"code\">getStaticData()</span>, bug fix <span class=\"code\">graphics()</span> (Win)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.5</th>\n                    <td>2017-06-29</td>\n                    <td>bug fix <span class=\"code\">inetChecksite()</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.4</th>\n                    <td>2017-06-24</td>\n                    <td>bug fix <span class=\"code\">getDynamicData(), getAllData() - mem</span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.3</th>\n                    <td>2017-06-23</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.2</th>\n                    <td>2017-06-23</td>\n                    <td>bug fix <span class=\"code\">battery</span> (windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.1</th>\n                    <td>2017-06-22</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.23.0</th>\n                    <td>2017-06-22</td>\n                    <td>added <span class=\"code\">memLayout</span>, <span class=\"code\">diskLayout</span>, extended windows support (<span class=\"code\">inetChecksite<span class=\"code\"></span></td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.22.0</th>\n                    <td>2017-06-19</td>\n                    <td>extended windows support (<span class=\"code\">users<span class=\"code\">, <span class=\"code\">inetLatency</span>)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.21.0</th>\n                    <td>2017-06-18</td>\n                    <td>extended time (timezone), extended windows support (battery, getAll...)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.20.1</th>\n                    <td>2017-06-17</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.20.0</th>\n                    <td>2017-06-16</td>\n                    <td>extend WIN support (cpu, cpuCache, cpuCurrentspeed, mem, networkInterfaces, docker)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.19.0</th>\n                    <td>2017-06-12</td>\n                    <td>OSX temperature now an optional dependency </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.18.0</th>\n                    <td>2017-05-27</td>\n                    <td>extended <span class=\"code\">cpu</span> info (vendor, family, model, stepping, revision, cache, speedmin/max)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.17.3</th>\n                    <td>2017-04-29</td>\n                    <td>minor fix (blockDevices data array, Windows)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.17.2</th>\n                    <td>2017-04-24</td>\n                    <td>minor fix (removed console.log)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.17.1</th>\n                    <td>2017-04-23</td>\n                    <td>fixed bugs fsSize(win), si.processes (command), si.osinfo(win)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.17.0</th>\n                    <td>2017-02-19</td>\n                    <td>windows support for some first functions, extended process list (linux</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.16.0</th>\n                    <td>2017-01-19</td>\n                    <td>blockDevices: added removable attribute + fix</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.15.1</th>\n                    <td>2017-01-17</td>\n                    <td>minor cpuTemperature fix (OSX)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.15.0</th>\n                    <td>2017-01-15</td>\n                    <td>added cpuTemperature also for OSX</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.14.0</th>\n                    <td>2017-01-14</td>\n                    <td>added currentLoad per cpu/core, cpu cache and cpu flags</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.13.0</th>\n                    <td>2016-11-23</td>\n                    <td>added shell (returns standard shell)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.12.0</th>\n                    <td>2016-11-17</td>\n                    <td>refactoring and extended currentLoad</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.11.2</th>\n                    <td>2016-11-16</td>\n                    <td>blockDevices: improved for older lsblk versions</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.11.1</th>\n                    <td>2016-11-16</td>\n                    <td>fixed small bug in blockDevices</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.11.0</th>\n                    <td>2016-11-15</td>\n                    <td>blockDevices for OSX and extended blockDevices</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.10.2</th>\n                    <td>2016-11-14</td>\n                    <td>bug fix fsSize on OSX</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.10.1</th>\n                    <td>2016-11-14</td>\n                    <td>optimization fsStats, disksIO, networkStats</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.10.0</th>\n                    <td>2016-11-12</td>\n                    <td>added blockDevices, fixed fsSize, added file system type</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.9.0</th>\n                    <td>2016-11-11</td>\n                    <td>added MAC address to networkInterfaces, fixed currentLoad</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.8.1</th>\n                    <td>2016-11-04</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.8.0</th>\n                    <td>2016-11-04</td>\n                    <td>added dockerContainerProcesses</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.7.1</th>\n                    <td>2016-11-03</td>\n                    <td>code refactoring</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.7.0</th>\n                    <td>2016-11-02</td>\n                    <td>extended docker stats, and no longer relying on curl</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.6.0</th>\n                    <td>2016-09-14</td>\n                    <td>added versions (kernel, ssl, node, npm, pm2, ...)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.5.1</th>\n                    <td>2016-09-14</td>\n                    <td>bugfix graphics info</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.5.0</th>\n                    <td>2016-09-14</td>\n                    <td>added graphics info (controller, display)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.4.4</th>\n                    <td>2016-09-02</td>\n                    <td>tiny fixes system.model, getDefaultNetworkInterface</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.4.3</th>\n                    <td>2016-09-02</td>\n                    <td>tiny bug fix fsStats, disksIO OSX</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.4.2</th>\n                    <td>2016-09-01</td>\n                    <td>improved default network interface</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.4.1</th>\n                    <td>2016-08-30</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.4.0</th>\n                    <td>2016-08-30</td>\n                    <td>rewritten processes current cpu usage</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.3.0</th>\n                    <td>2016-08-24</td>\n                    <td>process list added to processes</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.2.1</th>\n                    <td>2016-08-19</td>\n                    <td>updated docs, improvement system</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.2.0</th>\n                    <td>2016-08-19</td>\n                    <td>added battery information</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.1.1</th>\n                    <td>2016-08-18</td>\n                    <td>improved system and os detection (vm, ...), bugfix disksIO</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.1.0</th>\n                    <td>2016-08-18</td>\n                    <td>added Docker stats</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.0.1</th>\n                    <td>2016-08-17</td>\n                    <td>Bug-Fix disksIO, users, updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3.0.0</th>\n                    <td>2016-08-03</td>\n                    <td>new major version 3.0</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.5</th>\n                    <td>2016-03-02</td>\n                    <td>changed .gitignore</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.4</th>\n                    <td>2016-02-22</td>\n                    <td>tiny correction - removed double quotes CPU brand, ...</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.3</th>\n                    <td>2016-02-22</td>\n                    <td>optimized cpuCurrentspeed</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.2</th>\n                    <td>2016-02-22</td>\n                    <td>added CoreOS identification</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.1</th>\n                    <td>2016-01-07</td>\n                    <td>minor patch</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2.0.0</th>\n                    <td>2016-01-07</td>\n                    <td>new major version 2.0</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.7</th>\n                    <td>2015-11-27</td>\n                    <td>fixed: si.network_speed()</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.6</th>\n                    <td>2015-09-17</td>\n                    <td>fixed: si.users()</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.5</th>\n                    <td>2015-09-14</td>\n                    <td>updated dependencies</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.4</th>\n                    <td>2015-07-18</td>\n                    <td>updated docs</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.3</th>\n                    <td>2015-07-18</td>\n                    <td>bugfix cpu cores</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.2</th>\n                    <td>2015-07-18</td>\n                    <td>bugfix cpu_currentspeed, cpu_temperature</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.1</th>\n                    <td>2015-07-18</td>\n                    <td>documentation update</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">1.0.0</th>\n                    <td>2015-07-18</td>\n                    <td>bug-fixes, version bump, published as npm component</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">0.0.3</th>\n                    <td>2014-04-14</td>\n                    <td>bug-fix (cpu_speed)</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">0.0.2</th>\n                    <td>2014-03-14</td>\n                    <td>Optimization FS-Speed & CPU current speed</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">0.0.1</th>\n                    <td>2014-03-13</td>\n                    <td>initial release</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    </div>\n  </section>\n  <footer class=\"container-fluid\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\".\">Home</a></li>\n            <li><a href=\"https://github.com/sebhildebrandt/systeminformation\">Github <i class=\"fab fa-github\"></i></a></li>\n            <li><a href=\"contributors.html\">Contributors</a></li>\n            <li><a href=\"https://buymeacoff.ee/systeminfo\">Buy me a coffee</a></li>\n          </ul>\n        </div>\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\"gettingstarted.html\">Quick Start</a></li>\n            <li><a href=\"issues.html\">Known Issues</a></li>\n            <li><a href=\"statsfunctions.html\">Stats Functions</a></li>\n            <li><a href=\"history.html\">Version history</a></li>\n          </ul>\n        </div>\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\"https://www.plus-innovations.com\">&copy; 2020 Sebastian Hildebrandt, +innovations</a></li>\n            <li><a href=\"copyright.html\">Copyright &amp; License</a></li>\n            <li><a href=\"trademarks.html\">Trademarks</a></li>\n            <li><a href=\"https://github.com/sebhildebrandt/systeminformation/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" alt=\"MIT license\" /></a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n  </footer>\n\n  <script>\n    window.onload = function (e) {\n      createMenu();\n    }\n  </script>\n\n</body>\n\n</html>\n", "<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <!-- Required meta tags -->\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n  <!-- CSS -->\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"https://pro.fontawesome.com/releases/v5.6.3/css/all.css\" integrity=\"sha384-LRlmVvLKVApDVGuspQFnRQJjkv0P7/YFrw84YYQtmYG4nK8c+M+NlmYDCv0rKWpG\" crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"styles.css\">\n\n  <!-- Favicon -->\n  <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"/assets/android-icon-192x192.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/assets/favicon-32x32.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"/assets/favicon-96x96.png\">\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/assets/favicon-16x16.png\">\n\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/typed.js/2.0.9/typed.min.js\"></script>\n\n  <title>systeminformation</title>\n  <script>\n    let vh = window.innerHeight * 0.01;\n    // Then we set the value in the --vh custom property to the root of the document\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n\n    // We listen to the resize event\n    // window.addEventListener('resize', () => {\n    //   // We execute the same script as before\n    //   let vh = window.innerHeight * 0.01;\n    //   document.documentElement.style.setProperty('--vh', `${vh}px`);\n    // });\n    function init() {\n      typed();\n      document.querySelector('.down').addEventListener('click', function () {\n        scrollIt(\n          document.querySelector('.quickstart'),\n          600,\n          'easeOutQuad',\n          function () {\n            console.log('READY')\n          }\n        );\n      });\n      getDownloads();\n    }\n    function numberWithCommas(x) {\n      return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    function getDownloads() {\n      var xhttp = new XMLHttpRequest();\n      xhttp.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {\n          var downloads = JSON.parse(this.responseText);\n          document.getElementById(\"downloads\").innerHTML = numberWithCommas(downloads.downloads);\n        }\n      };\n      xhttp.open(\"GET\", \"https://api.npmjs.org/downloads/point/last-month/systeminformation\", true);\n      xhttp.send();\n    }\n    function getVersion() {\n      var xhttp = new XMLHttpRequest();\n      xhttp.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {\n          var package = JSON.parse(this.responseText);\n          document.getElementById(\"version\").innerHTML = package.version;\n        }\n      };\n      xhttp.open(\"GET\", \"https://registry.npmjs.org/systeminformation/latest\", true);\n      xhttp.send();\n    }\n    function typed() {\n      var options = {\n        strings: [\"System and OS information library for node.js\", \"Get detailed hardware, system &amp; OS information.\", \"For Linux, macOS, Windows, FreeBSD, OpenBSD, NetBSD, SunOS\"],\n        typeSpeed: 60,\n        loop: false,\n        backDelay: 1200,\n\n      }\n      var typed = new Typed('#typed', options);\n    }\n    function scrollIt(destination, duration = 200, easing = 'linear', callback) {\n\n      const easings = {\n        linear(t) {\n          return t;\n        },\n        easeInQuad(t) {\n          return t * t;\n        },\n        easeOutQuad(t) {\n          return t * (2 - t);\n        },\n        easeInOutQuad(t) {\n          return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n        },\n        easeInCubic(t) {\n          return t * t * t;\n        },\n        easeOutCubic(t) {\n          return (--t) * t * t + 1;\n        },\n        easeInOutCubic(t) {\n          return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n        },\n        easeInQuart(t) {\n          return t * t * t * t;\n        },\n        easeOutQuart(t) {\n          return 1 - (--t) * t * t * t;\n        },\n        easeInOutQuart(t) {\n          return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\n        },\n        easeInQuint(t) {\n          return t * t * t * t * t;\n        },\n        easeOutQuint(t) {\n          return 1 + (--t) * t * t * t * t;\n        },\n        easeInOutQuint(t) {\n          return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t;\n        }\n      };\n\n      const start = window.pageYOffset;\n      const startTime = 'now' in window.performance ? performance.now() : new Date().getTime();\n\n      const documentHeight = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\n      const windowHeight = window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight;\n      const destinationOffset = typeof destination === 'number' ? destination : destination.offsetTop;\n      const destinationOffsetToScroll = Math.round(documentHeight - destinationOffset < windowHeight ? documentHeight - windowHeight : destinationOffset);\n\n      if ('requestAnimationFrame' in window === false) {\n        window.scroll(0, destinationOffsetToScroll);\n        if (callback) {\n          callback();\n        }\n        return;\n      }\n\n      function scroll() {\n        const now = 'now' in window.performance ? performance.now() : new Date().getTime();\n        const time = Math.min(1, ((now - startTime) / duration));\n        const timeFunction = easings[easing](time);\n        window.scroll(0, Math.ceil((timeFunction * (destinationOffsetToScroll - start)) + start));\n\n        if (window.pageYOffset === destinationOffsetToScroll) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n\n        requestAnimationFrame(scroll);\n      }\n\n      scroll();\n    }\n  </script>\n\n</head>\n\n<body>\n  <header class=\"bg-image-full\">\n    <div class=\"container\">\n      <img class=\"logo\" src=\"assets/logo.png\">\n      <div class=\"title\">systeminformation</div>\n      <div class=\"subtitle\"><span id=\"typed\"></span></div>\n      <div class=\"version\">Current Version: <span id=\"version\">4.30.5</span></div>\n      <button class=\"btn btn-light\" onclick=\"location.href='https://github.com/sebhildebrandt/systeminformation'\">View on Github <i class=\" fab fa-github\"></i></button>\n    </div>\n    <div class=\"down\">\n      <button class=\"btn btn-primary mb-2\" onclick=\"location.href='https://www.buymeacoffee.com/systeminfo'\">Buy me a coffee&nbsp;&nbsp;<i class=\"far fa-mug-hot\"></i></button>\n      <br>Read Documentation<br>\n      <i class=\"fal fa-caret-down caret\"></i>\n    </div>\n  </header>\n\n  <section class=\"container quickstart\">\n    <div class=\"row\">\n      <div class=\"col-12 sectionheader index\">\n        <div class=\"title\">Overview</div>\n        <div class=\"subtitle\">Lightweight collection of 40+ functions to retrieve detailed hardware, system and OS information. For Linux, macOS, partial Windows, FreeBSD, OpenBSD, NetBSD and SunOS support</div>\n        <div class=\"npmicons\">\n          <a href=\"https://npmjs.org/package/systeminformation\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/df25636cbefadf18ca1532e3bdcd0d2794235e19/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f73797374656d696e666f726d6174696f6e2e7376673f7374796c653d666c61742d737175617265\" alt=\"NPM Version\" data-canonical-src=\"https://img.shields.io/npm/v/systeminformation.svg?style=flat-square\" style=\"max-width:100%;\"></a>\n          <a href=\"https://david-dm.org/sebhildebrandt/systeminformation\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/69739c043c2be3a38545f105b89381a2a6310f59/68747470733a2f2f696d672e736869656c64732e696f2f64617669642f73656268696c64656272616e64742f73797374656d696e666f726d6174696f6e2e7376673f7374796c653d666c61742d737175617265\" alt=\"deps status\" data-canonical-src=\"https://img.shields.io/david/sebhildebrandt/systeminformation.svg?style=flat-square\" style=\"max-width:100%;\"></a>\n          <a href=\"https://lgtm.com/projects/g/sebhildebrandt/systeminformation/context:javascript\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/08409d6fb3794545416e1a40ca75172b54d34692/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6a6176617363726970742f672f73656268696c64656272616e64742f73797374656d696e666f726d6174696f6e2e7376673f7374796c653d666c61742d737175617265\" alt=\"Code Quality: Javascript\" data-canonical-src=\"https://img.shields.io/lgtm/grade/javascript/g/sebhildebrandt/systeminformation.svg?style=flat-square\" style=\"max-width:100%;\"></a>\n          <a href=\"https://lgtm.com/projects/g/sebhildebrandt/systeminformation/alerts\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/66428127fdde80fc8247a0c1df4c651f3a6b1c0a/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f672f73656268696c64656272616e64742f73797374656d696e666f726d6174696f6e2e7376673f7374796c653d666c61742d737175617265\" alt=\"Total alerts\" data-canonical-src=\"https://img.shields.io/lgtm/alerts/g/sebhildebrandt/systeminformation.svg?style=flat-square\" style=\"max-width:100%;\"></a>\n          <a href=\"https://github.com/sebhildebrandt/systeminformation/blob/master/LICENSE\"><img src=\"https://camo.githubusercontent.com/4b5966a2a252ee0f241a1e03b13417178eb4964f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265\" alt=\"MIT license\" data-canonical-src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" style=\"max-width:100%;\"></a>\n        </div>\n      </div>\n    </div>\n    <div class=\"row justify-content-center sectionheader index\">\n      <div class=\"col-8\">\n        <hr>\n      </div>\n    </div>\n    <div class=\"row number-section\">\n      <div class=\"col-xl-4 col-lg-4 col-md-4 col-12\">\n        <div class=\"numbers\">10,943</div>\n        <div class=\"title\">Lines of code</div>\n      </div>\n      <div class=\"col-xl-4 col-lg-4 col-md-4 col-12\">\n        <div id=\"downloads\" class=\"numbers\">...</div>\n        <div class=\"title\">Downloads last month</div>\n      </div>\n      <div class=\"col-xl-4 col-lg-4 col-md-4 col-12\">\n        <div class=\"numbers\">359</div>\n        <div class=\"title\">Dependents</div>\n      </div>\n    </div>\n    <div class=\"row justify-content-center sectionheader index\">\n      <div class=\"col-8\">\n        <hr>\n      </div>\n    </div>\n    <div class=\"row\" id=\"docs\">\n      <div class=\"col-12 sectionheader index\">\n        <div class=\"title\">Documentation</div>\n        <div class=\"subtitle\">Detailed documentation and reference for Version 4.x.x</div>\n      </div>\n    </div>\n    <div class=\"row index\">\n      <a href=\"gettingstarted.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-download\"></i></div>\n          <div class=\"icontitle\">Getting Started</div>\n        </div>\n      </a>\n      <a href=\"general.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-th-list\"></i></div>\n          <div class=\"icontitle\">General</div>\n        </div>\n      </a>\n      <a href=\"system.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-server\"></i></div>\n          <div class=\"icontitle\">System</div>\n        </div>\n      </a>\n      <a href=\"cpu.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-microchip\"></i></div>\n          <div class=\"icontitle\">CPU</div>\n        </div>\n      </a>\n      <a href=\"memory.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-memory\"></i></div>\n          <div class=\"icontitle\">Memory</div>\n        </div>\n      </a>\n      <a href=\"battery.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-battery-half\"></i></div>\n          <div class=\"icontitle\">Battery</div>\n        </div>\n      </a>\n      <a href=\"graphics.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-desktop\"></i></div>\n          <div class=\"icontitle\">Graphics</div>\n        </div>\n      </a>\n      <a href=\"os.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-window\"></i></div>\n          <div class=\"icontitle\">OS</div>\n        </div>\n      </a>\n      <a href=\"processes.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-chart-line\"></i></div>\n          <div class=\"icontitle\">Process/Service</div>\n        </div>\n      </a>\n      <a href=\"filesystem.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-hdd\"></i></div>\n          <div class=\"icontitle\">Disks / FS</div>\n        </div>\n      </a>\n      <a href=\"network.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-network-wired\"></i></div>\n          <div class=\"icontitle\">Network</div>\n        </div>\n      </a>\n      <a href=\"wifi.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-wifi\"></i></div>\n          <div class=\"icontitle\">Wifi</div>\n        </div>\n      </a>\n      <a href=\"docker.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fab fa-docker\"></i></div>\n          <div class=\"icontitle\">Docker</div>\n        </div>\n      </a>\n      <a href=\"vbox.html\" class=\"col-xl-3 col-lg-3 col-md-4 col-6 features\">\n        <div class=\"inner\">\n          <div class=\"icons\"><i class=\"fal fa-box-open\"></i></div>\n          <div class=\"icontitle\">Virtual Box</div>\n        </div>\n      </a>\n    </div>\n    <div class=\"row justify-content-center sectionheader index\">\n      <div class=\"col-8\">\n        <hr>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12 sectionheader index\">\n        <div class=\"title-small\">Issues</div>\n        <div class=\"text\">If you run into problems, please check out <a href=\"issues.html\">known issues page</a> first. If you still have problems, please feel free to open an issue on our <a href=\"https://github.com/sebhildebrandt/systeminformation/issues\">github page</a></div>\n        <div class=\"title-small\">Upcoming ...</div>\n        <div class=\"text\"><span class=\"bold\">MacOS on ARM, Windows on ARM</span> - we will have a closer look on that! As soon as we have the new hardware here, will work on support for those platforms. We are also planning a new major version <span class=\"bold\">Version 5</span> with some minor breaking changes and some additional features. We will try to make this available Q1 of 2021.<br /><br /></div>\n      </div>\n    </div>\n  </section>\n  <footer class=\"container-fluid\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\".\">Home</a></li>\n            <li><a href=\"https://github.com/sebhildebrandt/systeminformation\">Github <i class=\"fab fa-github\"></i></a></li>\n            <li><a href=\"contributors.html\">Contributors</a></li>\n            <li><a href=\"https://buymeacoff.ee/systeminfo\">Buy me a coffee</a></li>\n          </ul>\n        </div>\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\"gettingstarted.html\">Quick Start</a></li>\n            <li><a href=\"issues.html\">Known Issues</a></li>\n            <li><a href=\"statsfunctions.html\">Stats Functions</a></li>\n            <li><a href=\"history.html\">Version history</a></li>\n          </ul>\n        </div>\n        <div class=\"col-lg-4 col-12\">\n          <ul class=\"list-unstyled\">\n            <li><a href=\"https://www.plus-innovations.com\">&copy; 2020 Sebastian Hildebrandt, +innovations</a></li>\n            <li><a href=\"copyright.html\">Copyright &amp; License</a></li>\n            <li><a href=\"trademarks.html\">Trademarks</a></li>\n            <li><a href=\"https://github.com/sebhildebrandt/systeminformation/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" alt=\"MIT license\" /></a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n  </footer>\n\n  <!-- Optional JavaScript -->\n  <!-- jQuery first, then Popper.js, then Bootstrap JS -->\n  <script>\n    window.onload = function (e) {\n      init();\n    }\n  </script>\n</body>\n\n</html>\n", "'use strict';\n// @ts-check\n// ==================================================================================\n// index.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// Contributors:  Guillaume Legrain (https://github.com/glegrain)\n//                Riccardo Novaglia (https://github.com/richy24)\n//                Quentin Busuttil (https://github.com/Buzut)\n//                Lapsio (https://github.com/lapsio)\n//                csy (https://github.com/csy1983)\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n\n// ----------------------------------------------------------------------------------\n// Dependencies\n// ----------------------------------------------------------------------------------\n\nconst lib_version = require('../package.json').version;\nconst util = require('./util');\nconst system = require('./system');\nconst osInfo = require('./osinfo');\nconst cpu = require('./cpu');\nconst memory = require('./memory');\nconst battery = require('./battery');\nconst graphics = require('./graphics');\nconst filesystem = require('./filesystem');\nconst network = require('./network');\nconst wifi = require('./wifi');\nconst processes = require('./processes');\nconst users = require('./users');\nconst internet = require('./internet');\nconst docker = require('./docker');\nconst vbox = require('./virtualbox');\n\nlet _platform = process.platform;\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\n// ----------------------------------------------------------------------------------\n// init\n// ----------------------------------------------------------------------------------\n\nif (_windows) {\n  util.getCodepage();\n}\n\n// ----------------------------------------------------------------------------------\n// General\n// ----------------------------------------------------------------------------------\n\nfunction version() {\n  return lib_version;\n}\n\n// ----------------------------------------------------------------------------------\n// Get static and dynamic data (all)\n// ----------------------------------------------------------------------------------\n\n// --------------------------\n// get static data - they should not change until restarted\n\nfunction getStaticData(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let data = {};\n\n      data.version = version();\n\n      Promise.all([\n        system.system(),\n        system.bios(),\n        system.baseboard(),\n        system.chassis(),\n        osInfo.osInfo(),\n        osInfo.uuid(),\n        osInfo.versions(),\n        cpu.cpu(),\n        cpu.cpuFlags(),\n        graphics.graphics(),\n        network.networkInterfaces(),\n        memory.memLayout(),\n        filesystem.diskLayout()\n      ]).then(res => {\n        data.system = res[0];\n        data.bios = res[1];\n        data.baseboard = res[2];\n        data.chassis = res[3];\n        data.os = res[4];\n        data.uuid = res[5];\n        data.versions = res[6];\n        data.cpu = res[7];\n        data.cpu.flags = res[8];\n        data.graphics = res[9];\n        data.net = res[10];\n        data.memLayout = res[11];\n        data.diskLayout = res[12];\n        if (callback) { callback(data); }\n        resolve(data);\n      });\n    });\n  });\n}\n\n\n// --------------------------\n// get all dynamic data - e.g. for monitoring agents\n// may take some seconds to get all data\n// --------------------------\n// 2 additional parameters needed\n// - srv: \t\tcomma separated list of services to monitor e.g. \"mysql, apache, postgresql\"\n// - iface:\tdefine network interface for which you like to monitor network speed e.g. \"eth0\"\n\nfunction getDynamicData(srv, iface, callback) {\n\n  if (util.isFunction(iface)) {\n    callback = iface;\n    iface = '';\n  }\n  if (util.isFunction(srv)) {\n    callback = srv;\n    srv = '';\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      iface = iface || network.getDefaultNetworkInterface();\n      srv = srv || '';\n\n      // use closure to track \u0192 completion\n      let functionProcessed = (function () {\n        let totalFunctions = 15;\n        if (_windows) totalFunctions = 11;\n        if (_freebsd || _openbsd || _netbsd) totalFunctions = 11;\n        if (_sunos) totalFunctions = 6;\n\n        return function () {\n          if (--totalFunctions === 0) {\n            if (callback) {\n              callback(data);\n            }\n            resolve(data);\n          }\n        };\n      })();\n\n      // var totalFunctions = 14;\n      // function functionProcessed() {\n      //   if (--totalFunctions === 0) {\n      //     if (callback) { callback(data) }\n      //     resolve(data);\n      //   }\n      // }\n\n      let data = {};\n\n      // get time\n      data.time = osInfo.time();\n\n      /**\n       * @namespace\n       * @property {Object}  versions\n       * @property {string}  versions.node\n       * @property {string}  versions.v8\n       */\n      data.node = process.versions.node;\n      data.v8 = process.versions.v8;\n\n      cpu.cpuCurrentspeed().then(res => {\n        data.cpuCurrentspeed = res;\n        functionProcessed();\n      });\n\n      users.users().then(res => {\n        data.users = res;\n        functionProcessed();\n      });\n\n      if (!_windows) {\n        processes.processes().then(res => {\n          data.processes = res;\n          functionProcessed();\n        });\n      }\n\n      cpu.currentLoad().then(res => {\n        data.currentLoad = res;\n        functionProcessed();\n      });\n\n      if (!_sunos) {\n        cpu.cpuTemperature().then(res => {\n          data.temp = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        network.networkStats(iface).then(res => {\n          data.networkStats = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_sunos) {\n        network.networkConnections().then(res => {\n          data.networkConnections = res;\n          functionProcessed();\n        });\n      }\n\n      memory.mem().then(res => {\n        data.mem = res;\n        functionProcessed();\n      });\n\n      if (!_sunos) {\n        battery().then(res => {\n          data.battery = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_sunos) {\n        processes.services(srv).then(res => {\n          data.services = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_sunos) {\n        filesystem.fsSize().then(res => {\n          data.fsSize = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        filesystem.fsStats().then(res => {\n          data.fsStats = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        filesystem.disksIO().then(res => {\n          data.disksIO = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        wifi.wifiNetworks().then(res => {\n          data.wifiNetworks = res;\n          functionProcessed();\n        });\n      }\n\n      internet.inetLatency().then(res => {\n        data.inetLatency = res;\n        functionProcessed();\n      });\n    });\n  });\n}\n\n// --------------------------\n// get all data at once\n// --------------------------\n// 2 additional parameters needed\n// - srv: \t\tcomma separated list of services to monitor e.g. \"mysql, apache, postgresql\"\n// - iface:\tdefine network interface for which you like to monitor network speed e.g. \"eth0\"\n\nfunction getAllData(srv, iface, callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let data = {};\n\n      if (iface && util.isFunction(iface) && !callback) {\n        callback = iface;\n        iface = '';\n      }\n\n      if (srv && util.isFunction(srv) && !iface && !callback) {\n        callback = srv;\n        srv = '';\n        iface = '';\n      }\n\n      getStaticData().then(res => {\n        data = res;\n        getDynamicData(srv, iface).then(res => {\n          for (let key in res) {\n            if ({}.hasOwnProperty.call(res, key)) {\n              data[key] = res[key];\n            }\n          }\n          if (callback) { callback(data); }\n          resolve(data);\n        });\n      });\n    });\n  });\n}\n\nfunction get(valueObject, callback) {\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      const allPromises = Object.keys(valueObject)\n        .filter(func => ({}.hasOwnProperty.call(exports, func)))\n        .map(func => {\n          const params = valueObject[func].substring(valueObject[func].lastIndexOf('(') + 1, valueObject[func].lastIndexOf(')'));\n          const funcWithoutParams = func.split('(')[0];\n          if (params) {\n            return exports[funcWithoutParams](params)\n          } else {\n            return exports[funcWithoutParams]('')\n          }\n        });\n\n      Promise.all(allPromises).then(data => {\n        const result = {};\n        let i = 0;\n        for (let key in valueObject) {\n          if ({}.hasOwnProperty.call(valueObject, key) && {}.hasOwnProperty.call(exports, key) && data.length > i) {\n            if (valueObject[key] === '*' || valueObject[key] === 'all') {\n              result[key] = data[i];\n            } else {\n              const keys = valueObject[key].replace(/,/g, ' ').replace(/ +/g, ' ').split(' ');\n              if (data[i]) {\n                if (Array.isArray(data[i])) {\n                  // result is in an array, go through all elements of array and pick only the right ones\n                  const partialArray = [];\n                  data[i].forEach(element => {\n                    const partialRes = {};\n                    keys.forEach(k => {\n                      if ({}.hasOwnProperty.call(element, k)) {\n                        partialRes[k] = element[k];\n                      }\n                    });\n                    partialArray.push(partialRes);\n                  });\n                  result[key] = partialArray;\n                } else {\n                  const partialRes = {};\n                  keys.forEach(k => {\n                    if ({}.hasOwnProperty.call(data[i], k)) {\n                      partialRes[k] = data[i][k];\n                    }\n                  });\n                  result[key] = partialRes;\n                }\n              } else {\n                result[key] = {};\n              }\n            }\n            i++;\n          }\n        }\n        if (callback) { callback(result); }\n        resolve(result);\n      });\n    });\n  });\n}\n\nfunction observe(valueObject, interval, callback) {\n  let _data = null;\n\n  const result = setInterval(() => {\n    get(valueObject).then(data => {\n      if (JSON.stringify(_data) !== JSON.stringify(data)) {\n        _data = Object.assign({}, data);\n        callback(data);\n      }\n    });\n  }, interval);\n  return result;\n}\n\n// ----------------------------------------------------------------------------------\n// export all libs\n// ----------------------------------------------------------------------------------\n\nexports.version = version;\nexports.system = system.system;\nexports.bios = system.bios;\nexports.baseboard = system.baseboard;\nexports.chassis = system.chassis;\n\nexports.time = osInfo.time;\nexports.osInfo = osInfo.osInfo;\nexports.versions = osInfo.versions;\nexports.shell = osInfo.shell;\nexports.uuid = osInfo.uuid;\n\nexports.cpu = cpu.cpu;\nexports.cpuFlags = cpu.cpuFlags;\nexports.cpuCache = cpu.cpuCache;\nexports.cpuCurrentspeed = cpu.cpuCurrentspeed;\nexports.cpuTemperature = cpu.cpuTemperature;\nexports.currentLoad = cpu.currentLoad;\nexports.fullLoad = cpu.fullLoad;\n\nexports.mem = memory.mem;\nexports.memLayout = memory.memLayout;\n\nexports.battery = battery;\n\nexports.graphics = graphics.graphics;\n\nexports.fsSize = filesystem.fsSize;\nexports.fsOpenFiles = filesystem.fsOpenFiles;\nexports.blockDevices = filesystem.blockDevices;\nexports.fsStats = filesystem.fsStats;\nexports.disksIO = filesystem.disksIO;\nexports.diskLayout = filesystem.diskLayout;\n\nexports.networkInterfaceDefault = network.networkInterfaceDefault;\nexports.networkGatewayDefault = network.networkGatewayDefault;\nexports.networkInterfaces = network.networkInterfaces;\nexports.networkStats = network.networkStats;\nexports.networkConnections = network.networkConnections;\n\nexports.wifiNetworks = wifi.wifiNetworks;\n\nexports.services = processes.services;\nexports.processes = processes.processes;\nexports.processLoad = processes.processLoad;\n\nexports.users = users.users;\n\nexports.inetChecksite = internet.inetChecksite;\nexports.inetLatency = internet.inetLatency;\n\nexports.dockerInfo = docker.dockerInfo;\nexports.dockerContainers = docker.dockerContainers;\nexports.dockerContainerStats = docker.dockerContainerStats;\nexports.dockerContainerProcesses = docker.dockerContainerProcesses;\nexports.dockerAll = docker.dockerAll;\n\nexports.vboxInfo = vbox.vboxInfo;\n\nexports.getStaticData = getStaticData;\nexports.getDynamicData = getDynamicData;\nexports.getAllData = getAllData;\nexports.get = get;\nexports.observe = observe;\n\n", "'use strict';\n// @ts-check\n// ==================================================================================\n// internet.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 12. Internet\n// ----------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\n// --------------------------\n// check if external site is available\n\nfunction inetChecksite(url, callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let urlSanitized = '';\n      const s = util.sanitizeShellString(url);\n      for (let i = 0; i <= 2000; i++) {\n        if (!(s[i] === undefined ||\n          s[i] === ' ' ||\n          s[i] === '{' ||\n          s[i] === '}')) {\n          s[i].__proto__.toLowerCase = util.stringToLower;\n          const sl = s[i].toLowerCase();\n          if (sl && sl[0] && !sl[1]) {\n            urlSanitized = urlSanitized + sl[0];\n          }\n        }\n      }\n      let result = {\n        url: urlSanitized,\n        ok: false,\n        status: 404,\n        ms: -1\n      };\n      try {\n        if (urlSanitized && !util.isPrototypePolluted()) {\n          let t = Date.now();\n          if (_linux || _freebsd || _openbsd || _netbsd || _darwin || _sunos) {\n            let args = ' -I --connect-timeout 5 -m 5 ' + urlSanitized + ' 2>/dev/null | head -n 1 | cut -d \" \" -f2';\n            let cmd = 'curl';\n            exec(cmd + args, function (error, stdout) {\n              let statusCode = parseInt(stdout.toString());\n              result.status = statusCode || 404;\n              result.ok = !error && (statusCode === 200 || statusCode === 301 || statusCode === 302 || statusCode === 304);\n              result.ms = (result.ok ? Date.now() - t : -1);\n              if (callback) { callback(result); }\n              resolve(result);\n            });\n          }\n          if (_windows) {   // if this is stable, this can be used for all OS types\n            const http = (urlSanitized.startsWith('https:') ? require('https') : require('http'));\n            try {\n              http.get(urlSanitized, (res) => {\n                const statusCode = res.statusCode;\n\n                result.status = statusCode || 404;\n                result.ok = (statusCode === 200 || statusCode === 301 || statusCode === 302 || statusCode === 304);\n\n                if (statusCode !== 200) {\n                  res.resume();\n                  result.ms = (result.ok ? Date.now() - t : -1);\n                  if (callback) { callback(result); }\n                  resolve(result);\n                } else {\n                  res.on('data', () => { });\n                  res.on('end', () => {\n                    result.ms = (result.ok ? Date.now() - t : -1);\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  });\n                }\n              }).on('error', () => {\n                if (callback) { callback(result); }\n                resolve(result);\n              });\n            } catch (err) {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          }\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      } catch (err) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.inetChecksite = inetChecksite;\n\n// --------------------------\n// check inet latency\n\nfunction inetLatency(host, callback) {\n\n  // fallback - if only callback is given\n  if (util.isFunction(host) && !callback) {\n    callback = host;\n    host = '';\n  }\n\n  host = host || '8.8.8.8';\n  const hostSanitized = util.isPrototypePolluted() ? '8.8.8.8' : util.sanitizeShellString(host);\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let cmd;\n      if (_linux || _freebsd || _openbsd || _netbsd || _darwin) {\n        if (_linux) {\n          cmd = 'ping -c 2 -w 3 ' + hostSanitized + ' | grep rtt';\n        }\n        if (_freebsd || _openbsd || _netbsd) {\n          cmd = 'ping -c 2 -t 3 ' + hostSanitized + ' | grep round-trip';\n        }\n        if (_darwin) {\n          cmd = 'ping -c 2 -t 3 ' + hostSanitized + ' | grep avg';\n        }\n\n        exec(cmd, function (error, stdout) {\n          let result = -1;\n          if (!error) {\n            const line = stdout.toString().split('=');\n            if (line.length > 1) {\n              const parts = line[1].split('/');\n              if (parts.length > 1) {\n                result = parseFloat(parts[1]);\n              }\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        exec('ping -s -a ' + hostSanitized + ' 56 2 | grep avg', { timeout: 3000 }, function (error, stdout) {\n          let result = -1;\n          if (!error) {\n            const line = stdout.toString().split('=');\n            if (line.length > 1) {\n              const parts = line[1].split('/');\n              if (parts.length > 1) {\n                result = parseFloat(parts[1].replace(',', '.'));\n              }\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_windows) {\n        let result = -1;\n        try {\n          exec('ping ' + hostSanitized + ' -n 1', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n              lines.shift();\n              lines.forEach(function (line) {\n                if ((line.toLowerCase().match(/ms/g) || []).length === 3) {\n                  let l = line.replace(/ +/g, ' ').split(' ');\n                  if (l.length > 6) {\n                    result = parseFloat(l[l.length - 1]);\n                  }\n                }\n              });\n            }\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.inetLatency = inetLatency;\n", "'use strict';\n// @ts-check\n// ==================================================================================\n// network.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 9. Network\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\nconst fs = require('fs');\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nlet _network = {};\nlet _default_iface = '';\nlet _ifaces = {};\nlet _dhcpNics = [];\nlet _networkInterfaces = [];\nlet _mac = {};\nlet pathToIp;\n\nfunction getDefaultNetworkInterface() {\n\n  let ifaces = os.networkInterfaces();\n  let ifacename = '';\n  let ifacenameFirst = '';\n\n  let scopeid = 9999;\n\n  // fallback - \"first\" external interface (sorted by scopeid)\n  for (let dev in ifaces) {\n    if ({}.hasOwnProperty.call(ifaces, dev)) {\n      ifaces[dev].forEach(function (details) {\n        if (details && details.internal === false) {\n          ifacenameFirst = ifacenameFirst || dev; // fallback if no scopeid\n          if (details.scopeid && details.scopeid < scopeid) {\n            ifacename = dev;\n            scopeid = details.scopeid;\n          }\n        }\n      });\n    }\n  }\n  ifacename = ifacename || ifacenameFirst || '';\n\n  try {\n    if (_windows) {\n      // https://www.inetdaemon.com/tutorials/internet/ip/routing/default_route.shtml\n      let defaultIp = '';\n      const cmd = 'netstat -r';\n      const result = execSync(cmd);\n      const lines = result.toString().split(os.EOL);\n      lines.forEach(line => {\n        line = line.replace(/\\s+/g, ' ').trim();\n        if (line.indexOf('0.0.0.0 0.0.0.0') > -1 && !(/[a-zA-Z]/.test(line))) {\n          const parts = line.split(' ');\n          if (parts.length >= 5) {\n            defaultIp = parts[parts.length - 2];\n          }\n        }\n      });\n      if (defaultIp) {\n        for (let dev in ifaces) {\n          if ({}.hasOwnProperty.call(ifaces, dev)) {\n            ifaces[dev].forEach(function (details) {\n              if (details && details.address && details.address === defaultIp) {\n                ifacename = dev;\n              }\n            });\n          }\n        }\n      }\n    }\n    if (_linux) {\n      let cmd = 'ip route 2> /dev/null | grep default';\n      let result = execSync(cmd);\n      let parts = result.toString().split('\\n')[0].split(/\\s+/);\n      if (parts[0] === 'none' && parts[5]) {\n        ifacename = parts[5];\n      } else if (parts[4]) {\n        ifacename = parts[4];\n      }\n\n      if (ifacename.indexOf(':') > -1) {\n        ifacename = ifacename.split(':')[1].trim();\n      }\n    }\n    if (_darwin || _freebsd || _openbsd || _netbsd || _sunos) {\n      let cmd = '';\n      if (_linux) cmd = 'ip route 2> /dev/null | grep default | awk \\'{print $5}\\'';\n      if (_darwin) cmd = 'route -n get default 2>/dev/null | grep interface: | awk \\'{print $2}\\'';\n      if (_freebsd || _openbsd || _netbsd || _sunos) cmd = 'route get 0.0.0.0 | grep interface:';\n      let result = execSync(cmd);\n      ifacename = result.toString().split('\\n')[0];\n      if (ifacename.indexOf(':') > -1) {\n        ifacename = ifacename.split(':')[1].trim();\n      }\n    }\n  } catch (e) {\n    util.noop();\n  }\n  if (ifacename) _default_iface = ifacename;\n  return _default_iface;\n}\n\nexports.getDefaultNetworkInterface = getDefaultNetworkInterface;\n\nfunction getMacAddresses() {\n  let iface = '';\n  let mac = '';\n  let result = {};\n  if (_linux || _freebsd || _openbsd || _netbsd) {\n    if (typeof pathToIp === 'undefined') {\n      try {\n        const lines = execSync('which ip').toString().split('\\n');\n        if (lines.length && lines[0].indexOf(':') === -1 && lines[0].indexOf('/') === 0) {\n          pathToIp = lines[0];\n        } else {\n          pathToIp = '';\n        }\n      } catch (e) {\n        pathToIp = '';\n      }\n    }\n    try {\n      const cmd = 'export LC_ALL=C; ' + ((pathToIp) ? pathToIp + ' link show up' : '/sbin/ifconfig') + '; unset LC_ALL';\n      let res = execSync(cmd);\n      const lines = res.toString().split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i] && lines[i][0] !== ' ') {\n          if (pathToIp) {\n            let nextline = lines[i + 1].trim().split(' ');\n            if (nextline[0] === 'link/ether') {\n              iface = lines[i].split(' ')[1];\n              iface = iface.slice(0, iface.length - 1);\n              mac = nextline[1];\n            }\n          } else {\n            iface = lines[i].split(' ')[0];\n            mac = lines[i].split('HWaddr ')[1];\n          }\n\n          if (iface && mac) {\n            result[iface] = mac.trim();\n            iface = '';\n            mac = '';\n          }\n        }\n      }\n    } catch (e) {\n      util.noop();\n    }\n  }\n  if (_darwin) {\n    try {\n      const cmd = '/sbin/ifconfig';\n      let res = execSync(cmd);\n      const lines = res.toString().split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i] && lines[i][0] !== '\\t' && lines[i].indexOf(':') > 0) {\n          iface = lines[i].split(':')[0];\n        } else if (lines[i].indexOf('\\tether ') === 0) {\n          mac = lines[i].split('\\tether ')[1];\n          if (iface && mac) {\n            result[iface] = mac.trim();\n            iface = '';\n            mac = '';\n          }\n        }\n      }\n    } catch (e) {\n      util.noop();\n    }\n  }\n  return result;\n}\n\nfunction networkInterfaceDefault(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = getDefaultNetworkInterface();\n      if (callback) { callback(result); }\n      resolve(result);\n    });\n  });\n}\n\nexports.networkInterfaceDefault = networkInterfaceDefault;\n\n// --------------------------\n// NET - interfaces\n\nfunction parseLinesWindowsNics(sections, nconfigsections) {\n  let nics = [];\n  for (let i in sections) {\n    if ({}.hasOwnProperty.call(sections, i)) {\n\n      if (sections[i].trim() !== '') {\n\n        let lines = sections[i].trim().split('\\r\\n');\n        let linesNicConfig = nconfigsections[i].trim().split('\\r\\n');\n        let netEnabled = util.getValue(lines, 'NetEnabled', '=');\n\n        if (netEnabled !== '') {\n          const speed = parseInt(util.getValue(lines, 'speed', '=').trim(), 10) / 1000000;\n          nics.push({\n            mac: util.getValue(lines, 'MACAddress', '=').toLowerCase(),\n            dhcp: util.getValue(linesNicConfig, 'dhcpEnabled', '=').toLowerCase(),\n            name: util.getValue(lines, 'Name', '=').replace(/\\]/g, ')').replace(/\\[/g, '('),\n            netEnabled: netEnabled === 'TRUE',\n            speed: isNaN(speed) ? -1 : speed,\n            operstate: util.getValue(lines, 'NetConnectionStatus', '=') === '2' ? 'up' : 'down',\n            type: util.getValue(lines, 'AdapterTypeID', '=') === '9' ? 'wireless' : 'wired'\n          });\n        }\n      }\n    }\n  }\n  return nics;\n}\n\nfunction getWindowsNics() {\n  const cmd = util.getWmic() + ' nic get MACAddress, name, NetEnabled, Speed, NetConnectionStatus, AdapterTypeId /value';\n  const cmdnicconfig = util.getWmic() + ' nicconfig get dhcpEnabled /value';\n  try {\n    const nsections = execSync(cmd, util.execOptsWin).split(/\\n\\s*\\n/);\n    const nconfigsections = execSync(cmdnicconfig, util.execOptsWin).split(/\\n\\s*\\n/);\n    return (parseLinesWindowsNics(nsections, nconfigsections));\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getWindowsDNSsuffixes() {\n\n  let iface = {};\n\n  let dnsSuffixes = {\n    primaryDNS: '',\n    exitCode: 0,\n    ifaces: [],\n  };\n\n  try {\n    const ipconfig = execSync('ipconfig /all', util.execOptsWin);\n    const ipconfigArray = ipconfig.split('\\r\\n\\r\\n');\n\n    ipconfigArray.forEach((element, index) => {\n\n      if (index == 1) {\n        const longPrimaryDNS = element.split('\\r\\n').filter((element) => {\n          return element.toUpperCase().includes('DNS');\n        });\n        const primaryDNS = longPrimaryDNS[0].substring(longPrimaryDNS[0].lastIndexOf(':') + 1);\n        dnsSuffixes.primaryDNS = primaryDNS.trim();\n        if (!dnsSuffixes.primaryDNS) dnsSuffixes.primaryDNS = 'Not defined';\n      }\n      if (index > 1) {\n        if (index % 2 == 0) {\n          const name = element.substring(element.lastIndexOf(' ') + 1).replace(':', '');\n          iface.name = name;\n        } else {\n          const connectionSpecificDNS = element.split('\\r\\n').filter((element) => {\n            return element.toUpperCase().includes('DNS');\n          });\n          const dnsSuffix = connectionSpecificDNS[0].substring(connectionSpecificDNS[0].lastIndexOf(':') + 1);\n          iface.dnsSuffix = dnsSuffix.trim();\n          dnsSuffixes.ifaces.push(iface);\n          iface = {};\n        }\n      }\n    });\n\n    return dnsSuffixes;\n  } catch (error) {\n    // console.log('An error occurred trying to bring the Connection-specific DNS suffix', error.message);\n    return {\n      primaryDNS: '',\n      exitCode: 0,\n      ifaces: [],\n    };\n  }\n}\n\nfunction getWindowsIfaceDNSsuffix(ifaces, ifacename) {\n  let dnsSuffix = '';\n  // Adding (.) to ensure ifacename compatibility when duplicated iface-names\n  const interfaceName = ifacename + '.';\n  try {\n    const connectionDnsSuffix = ifaces.filter((iface) => {\n      return interfaceName.includes(iface.name + '.');\n    }).map((iface) => iface.dnsSuffix);\n    if (connectionDnsSuffix[0]) {\n      dnsSuffix = connectionDnsSuffix[0];\n    }\n    if (!dnsSuffix) dnsSuffix = '';\n    return dnsSuffix;\n  } catch (error) {\n    // console.log('Error getting Connection-specific DNS suffix: ', error.message);\n    return 'Unknown';\n  }\n}\n\nfunction getWindowsWiredProfilesInformation() {\n  try {\n    const result = execSync('netsh lan show profiles', util.execOptsWin);\n    const profileList = result.split('\\r\\nProfile on interface');\n    return profileList;\n  } catch (error) {\n    if (error.status === 1 && error.stdout.includes('AutoConfig')) {\n      return 'Disabled';\n    }\n    return [];\n  }\n}\n\nfunction getWindowsWirelessIfaceSSID(interfaceName) {\n  try {\n    const result = execSync(`netsh wlan show  interface name=\"${interfaceName}\" | findstr \"SSID\"`, util.execOptsWin);\n    const SSID = result.split('\\r\\n').shift();\n    const parseSSID = SSID.split(':').pop();\n    return parseSSID;\n  } catch (error) {\n    return 'Unknown';\n  }\n}\nfunction getWindowsIEEE8021x(connectionType, iface, ifaces) {\n  let i8021x = {\n    state: 'Unknown',\n    protocol: 'Unknown',\n  };\n\n  if (ifaces === 'Disabled') {\n    i8021x.state = 'Disabled';\n    i8021x.protocol = 'Not defined';\n    return i8021x;\n  }\n\n  if (connectionType == 'wired' && ifaces.length > 0) {\n    try {\n      // Get 802.1x information by interface name\n      const iface8021xInfo = ifaces.find((element) => {\n        return element.includes(iface + '\\r\\n');\n      });\n      const arrayIface8021xInfo = iface8021xInfo.split('\\r\\n');\n      const state8021x = arrayIface8021xInfo.find((element) => {\n        return element.includes('802.1x');\n      });\n\n      if (state8021x.includes('Disabled')) {\n        i8021x.state = 'Disabled';\n        i8021x.protocol = 'Not defined';\n      } else if (state8021x.includes('Enabled')) {\n        const protocol8021x = arrayIface8021xInfo.find((element) => {\n          return element.includes('EAP');\n        });\n        i8021x.protocol = protocol8021x.split(':').pop();\n        i8021x.state = 'Enabled';\n      }\n    } catch (error) {\n      // console.log('Error getting wired information:', error);\n      return i8021x;\n    }\n  } else if (connectionType == 'wireless') {\n\n    let i8021xState = '';\n    let i8021xProtocol = '';\n\n\n\n    try {\n      const SSID = getWindowsWirelessIfaceSSID(iface);\n      if (SSID !== 'Unknown') {\n        i8021xState = execSync(`netsh wlan show profiles \"${SSID}\" | findstr \"802.1X\"`, util.execOptsWin);\n        i8021xProtocol = execSync(`netsh wlan show profiles \"${SSID}\" | findstr \"EAP\"`, util.execOptsWin);\n      }\n\n      if (i8021xState.includes(':') && i8021xProtocol.includes(':')) {\n        i8021x.state = i8021xState.split(':').pop();\n        i8021x.protocol = i8021xProtocol.split(':').pop();\n      }\n    } catch (error) {\n      // console.log('Error getting wireless information:', error);\n      if (error.status === 1 && error.stdout.includes('AutoConfig')) {\n        i8021x.state = 'Disabled';\n        i8021x.protocol = 'Not defined';\n      }\n      return i8021x;\n    }\n  }\n\n  return i8021x;\n}\n\nfunction splitSectionsNics(lines) {\n  const result = [];\n  let section = [];\n  lines.forEach(function (line) {\n    if (!line.startsWith('\\t') && !line.startsWith(' ')) {\n      if (section.length) {\n        result.push(section);\n        section = [];\n      }\n    }\n    section.push(line);\n  });\n  if (section.length) {\n    result.push(section);\n  }\n  return result;\n}\n\nfunction parseLinesDarwinNics(sections) {\n  let nics = [];\n  sections.forEach(section => {\n    let nic = {\n      iface: '',\n      mtu: -1,\n      mac: '',\n      ip6: '',\n      ip4: '',\n      speed: -1,\n      type: '',\n      operstate: '',\n      duplex: '',\n      internal: false\n    };\n    const first = section[0];\n    nic.iface = first.split(':')[0].trim();\n    let parts = first.split('> mtu');\n    nic.mtu = parts.length > 1 ? parseInt(parts[1], 10) : -1;\n    if (isNaN(nic.mtu)) {\n      nic.mtu = -1;\n    }\n    nic.internal = parts[0].toLowerCase().indexOf('loopback') > -1;\n    section.forEach(line => {\n      if (line.trim().startsWith('ether ')) {\n        nic.mac = line.split('ether ')[1].toLowerCase().trim();\n      }\n      if (line.trim().startsWith('inet6 ') && !nic.ip6) {\n        nic.ip6 = line.split('inet6 ')[1].toLowerCase().split('%')[0].split(' ')[0];\n      }\n      if (line.trim().startsWith('inet ') && !nic.ip4) {\n        nic.ip4 = line.split('inet ')[1].toLowerCase().split(' ')[0];\n      }\n    });\n    let speed = util.getValue(section, 'link rate');\n    nic.speed = speed ? parseFloat(speed) : -1;\n    if (nic.speed === -1) {\n      speed = util.getValue(section, 'uplink rate');\n      nic.speed = speed ? parseFloat(speed) : -1;\n      if (nic.speed > -1 && speed.toLowerCase().indexOf('gbps') >= 0) {\n        nic.speed = nic.speed * 1000;\n      }\n    } else {\n      if (speed.toLowerCase().indexOf('gbps') >= 0) {\n        nic.speed = nic.speed * 1000;\n      }\n    }\n    nic.type = util.getValue(section, 'type').toLowerCase().indexOf('wi-fi') > -1 ? 'wireless' : 'wired';\n    nic.operstate = util.getValue(section, 'status').toLowerCase().indexOf('active') > -1 ? 'up' : 'down';\n    nic.duplex = util.getValue(section, 'media').toLowerCase().indexOf('half-duplex') > -1 ? 'half' : 'full';\n    if (nic.ip6 || nic.ip4 || nic.mac) {\n      nics.push(nic);\n    }\n  });\n  return nics;\n}\n\nfunction getDarwinNics() {\n  const cmd = '/sbin/ifconfig -v';\n  try {\n    const lines = execSync(cmd, { maxBuffer: 1024 * 20000 }).toString().split('\\n');\n    const nsections = splitSectionsNics(lines);\n    return (parseLinesDarwinNics(nsections));\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getLinuxIfaceConnectionName(interfaceName) {\n  const cmd = `nmcli device status 2>/dev/null | grep ${interfaceName}`;\n\n  try {\n    const result = execSync(cmd).toString();\n    const resultFormat = result.replace(/\\s+/g, ' ').trim();\n    const connectionNameLines = resultFormat.split(' ').slice(3);\n    const connectionName = connectionNameLines.join(' ');\n    return connectionName != '--' ? connectionName : '';\n  } catch (e) {\n    return '';\n  }\n}\n\nfunction checkLinuxDCHPInterfaces(file) {\n  let result = [];\n  try {\n    let cmd = `cat ${file} 2> /dev/null | grep 'iface\\\\|source'`;\n    const lines = execSync(cmd, { maxBuffer: 1024 * 20000 }).toString().split('\\n');\n\n    lines.forEach(line => {\n      const parts = line.replace(/\\s+/g, ' ').trim().split(' ');\n      if (parts.length >= 4) {\n        if (line.toLowerCase().indexOf(' inet ') >= 0 && line.toLowerCase().indexOf('dhcp') >= 0) {\n          result.push(parts[1]);\n        }\n      }\n      if (line.toLowerCase().includes('source')) {\n        let file = line.split(' ')[1];\n        result = result.concat(checkLinuxDCHPInterfaces(file));\n      }\n    });\n  } catch (e) {\n    util.noop();\n  }\n  return result;\n}\n\nfunction getLinuxDHCPNics() {\n  // alternate methods getting interfaces using DHCP\n  let cmd = 'ip a 2> /dev/null';\n  let result = [];\n  try {\n    const lines = execSync(cmd, { maxBuffer: 1024 * 20000 }).toString().split('\\n');\n    const nsections = splitSectionsNics(lines);\n    result = (parseLinuxDHCPNics(nsections));\n  } catch (e) {\n    util.noop();\n  }\n  try {\n    result = checkLinuxDCHPInterfaces('/etc/network/interfaces');\n  } catch (e) {\n    util.noop();\n  }\n  return result;\n}\n\nfunction parseLinuxDHCPNics(sections) {\n  const result = [];\n  if (sections && sections.length) {\n    sections.forEach(lines => {\n      if (lines && lines.length) {\n        const parts = lines[0].split(':');\n        if (parts.length > 2) {\n          for (let line of lines) {\n            if (line.indexOf(' inet ') >= 0 && line.indexOf(' dynamic ') >= 0) {\n              const parts2 = line.split(' ');\n              const nic = parts2[parts2.length - 1].trim();\n              result.push(nic);\n              break;\n            }\n          }\n        }\n      }\n    });\n  }\n  return result;\n}\n\nfunction getLinuxIfaceDHCPstatus(iface, connectionName, DHCPNics) {\n  let result = false;\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep ipv4.method;`;\n    try {\n      const lines = execSync(cmd).toString();\n      const resultFormat = lines.replace(/\\s+/g, ' ').trim();\n\n      let dhcStatus = resultFormat.split(' ').slice(1).toString();\n      switch (dhcStatus) {\n        case 'auto':\n          result = true;\n          break;\n\n        default:\n          result = false;\n          break;\n      }\n      return result;\n    } catch (e) {\n      return (DHCPNics.indexOf(iface) >= 0);\n    }\n  } else {\n    return (DHCPNics.indexOf(iface) >= 0);\n  }\n}\n\nfunction getDarwinIfaceDHCPstatus(iface) {\n  let result = false;\n  const cmd = `ipconfig getpacket \"${iface}\" 2>/dev/null \\| grep lease_time;`;\n  try {\n    const lines = execSync(cmd).toString().split('\\n');\n    if (lines.length && lines[0].startsWith('lease_time')) {\n      result = true;\n    }\n  } catch (e) {\n    util.noop();\n  }\n  return result;\n}\n\nfunction getLinuxIfaceDNSsuffix(connectionName) {\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep ipv4.dns-search;`;\n    try {\n      const result = execSync(cmd).toString();\n      const resultFormat = result.replace(/\\s+/g, ' ').trim();\n      const dnsSuffix = resultFormat.split(' ').slice(1).toString();\n      return dnsSuffix == '--' ? 'Not defined' : dnsSuffix;\n    } catch (e) {\n      return 'Unknown';\n    }\n  } else {\n    return 'Unknown';\n  }\n}\n\nfunction getLinuxIfaceIEEE8021xAuth(connectionName) {\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep 802-1x.eap;`;\n    try {\n      const result = execSync(cmd).toString();\n      const resultFormat = result.replace(/\\s+/g, ' ').trim();\n      const authenticationProtocol = resultFormat.split(' ').slice(1).toString();\n\n\n      return authenticationProtocol == '--' ? '' : authenticationProtocol;\n    } catch (e) {\n      return 'Not defined';\n    }\n  } else {\n    return 'Not defined';\n  }\n}\n\nfunction getLinuxIfaceIEEE8021xState(authenticationProtocol) {\n  if (authenticationProtocol) {\n    if (authenticationProtocol == 'Not defined') {\n      return 'Disabled';\n    }\n    return 'Enabled';\n  } else {\n    return 'Unknown';\n  }\n}\n\nfunction testVirtualNic(iface, ifaceName, mac) {\n  const virtualMacs = ['00:00:00:00:00:00', '00:03:FF', '00:05:69', '00:0C:29', '00:0F:4B', '00:0F:4B', '00:13:07', '00:13:BE', '00:15:5d', '00:16:3E', '00:1C:42', '00:21:F6', '00:21:F6', '00:24:0B', '00:24:0B', '00:50:56', '00:A0:B1', '00:E0:C8', '08:00:27', '0A:00:27', '18:92:2C', '16:DF:49', '3C:F3:92', '54:52:00', 'FC:15:97'];\n  if (mac) {\n    return virtualMacs.filter(item => { return mac.toUpperCase().toUpperCase().startsWith(item.substr(0, mac.length)); }).length > 0 ||\n      iface.toLowerCase().indexOf(' virtual ') > -1 ||\n      ifaceName.toLowerCase().indexOf(' virtual ') > -1 ||\n      iface.toLowerCase().indexOf('vethernet ') > -1 ||\n      ifaceName.toLowerCase().indexOf('vethernet ') > -1 ||\n      iface.toLowerCase().startsWith('veth') ||\n      ifaceName.toLowerCase().startsWith('veth') ||\n      iface.toLowerCase().startsWith('vboxnet') ||\n      ifaceName.toLowerCase().startsWith('vboxnet');\n  } else return false;\n}\n\nfunction networkInterfaces(callback, rescan = true) {\n\n  if (typeof callback === 'boolean') {\n    rescan = callback;\n    callback = null;\n  }\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let ifaces = os.networkInterfaces();\n\n      let result = [];\n      let nics = [];\n      let dnsSuffixes = [];\n      let nics8021xInfo = [];\n      // seperate handling in OSX\n      if (_darwin || _freebsd || _openbsd || _netbsd) {\n        nics = getDarwinNics();\n\n\n        nics.forEach(nic => {\n\n          if ({}.hasOwnProperty.call(ifaces, nic.iface)) {\n            ifaces[nic.iface].forEach(function (details) {\n              if (details.family === 'IPv4') {\n                nic.ip4subnet = details.netmask;\n              }\n              if (details.family === 'IPv6') {\n                nic.ip6subnet = details.netmask;\n              }\n            });\n          }\n\n          result.push({\n            iface: nic.iface,\n            ifaceName: nic.iface,\n            ip4: nic.ip4,\n            ip4subnet: nic.ip4subnet || '',\n            ip6: nic.ip6,\n            ip6subnet: nic.ip6subnet || '',\n            mac: nic.mac,\n            internal: nic.internal,\n            virtual: nic.internal ? false : testVirtualNic(nic.iface, nic.iface, nic.mac),\n            operstate: nic.operstate,\n            type: nic.type,\n            duplex: nic.duplex,\n            mtu: nic.mtu,\n            speed: nic.speed,\n            dhcp: getDarwinIfaceDHCPstatus(nic.iface),\n            dnsSuffix: '',\n            ieee8021xAuth: '',\n            ieee8021xState: '',\n            carrierChanges: 0\n          });\n        });\n        _networkInterfaces = result;\n        if (callback) { callback(result); }\n        resolve(result);\n      } else {\n        if ((JSON.stringify(ifaces) === JSON.stringify(_ifaces)) && !rescan) {\n          // no changes - just return object\n          result = _networkInterfaces;\n\n          if (callback) { callback(result); }\n          resolve(result);\n        } else {\n          _ifaces = Object.assign({}, ifaces);\n\n          if (_windows) {\n            nics = getWindowsNics();\n            nics.forEach(nic => {\n              let found = false;\n              Object.keys(ifaces).forEach(key => {\n                if (!found) {\n                  ifaces[key].forEach(value => {\n                    if (Object.keys(value).indexOf('mac') >= 0) {\n                      found = value['mac'] === nic.mac;\n                    }\n                  });\n                }\n              });\n\n              if (!found) {\n                ifaces[nic.name] = [{ mac: nic.mac }];\n              }\n            });\n\n            nics8021xInfo = getWindowsWiredProfilesInformation();\n            dnsSuffixes = getWindowsDNSsuffixes();\n          }\n          if (_linux) {\n            _dhcpNics = getLinuxDHCPNics();\n          }\n          for (let dev in ifaces) {\n            let ip4 = '';\n            let ip4subnet = '';\n            let ip6 = '';\n            let ip6subnet = '';\n            let mac = '';\n            let duplex = '';\n            let mtu = '';\n            let speed = -1;\n            let carrierChanges = 0;\n            let operstate = 'down';\n            let dhcp = false;\n            let dnsSuffix = '';\n            let ieee8021xAuth = '';\n            let ieee8021xState = '';\n            let type = '';\n\n            if ({}.hasOwnProperty.call(ifaces, dev)) {\n              let ifaceName = dev;\n              ifaces[dev].forEach(function (details) {\n                if (details.family === 'IPv4') {\n                  ip4 = details.address;\n                  ip4subnet = details.netmask;\n                }\n                if (details.family === 'IPv6') {\n                  if (!ip6 || ip6.match(/^fe80::/i)) {\n                    ip6 = details.address;\n                    ip6subnet = details.netmask;\n                  }\n                }\n                mac = details.mac;\n                // fallback due to https://github.com/nodejs/node/issues/13581 (node 8.1 - node 8.2)\n                if (mac.indexOf('00:00:0') > -1 && (_linux || _darwin) && parseInt(process.versions.node.split('.'), 10) === 8) {\n                  if (Object.keys(_mac).length === 0) {\n                    _mac = getMacAddresses();\n                  }\n                  mac = _mac[dev] || '';\n                }\n              });\n              if (_linux) {\n                let iface = dev.split(':')[0].trim().toLowerCase();\n                const cmd = `echo -n \"addr_assign_type: \"; cat /sys/class/net/${iface}/addr_assign_type 2>/dev/null; echo;\n            echo -n \"address: \"; cat /sys/class/net/${iface}/address 2>/dev/null; echo;\n            echo -n \"addr_len: \"; cat /sys/class/net/${iface}/addr_len 2>/dev/null; echo;\n            echo -n \"broadcast: \"; cat /sys/class/net/${iface}/broadcast 2>/dev/null; echo;\n            echo -n \"carrier: \"; cat /sys/class/net/${iface}/carrier 2>/dev/null; echo;\n            echo -n \"carrier_changes: \"; cat /sys/class/net/${iface}/carrier_changes 2>/dev/null; echo;\n            echo -n \"dev_id: \"; cat /sys/class/net/${iface}/dev_id 2>/dev/null; echo;\n            echo -n \"dev_port: \"; cat /sys/class/net/${iface}/dev_port 2>/dev/null; echo;\n            echo -n \"dormant: \"; cat /sys/class/net/${iface}/dormant 2>/dev/null; echo;\n            echo -n \"duplex: \"; cat /sys/class/net/${iface}/duplex 2>/dev/null; echo;\n            echo -n \"flags: \"; cat /sys/class/net/${iface}/flags 2>/dev/null; echo;\n            echo -n \"gro_flush_timeout: \"; cat /sys/class/net/${iface}/gro_flush_timeout 2>/dev/null; echo;\n            echo -n \"ifalias: \"; cat /sys/class/net/${iface}/ifalias 2>/dev/null; echo;\n            echo -n \"ifindex: \"; cat /sys/class/net/${iface}/ifindex 2>/dev/null; echo;\n            echo -n \"iflink: \"; cat /sys/class/net/${iface}/iflink 2>/dev/null; echo;\n            echo -n \"link_mode: \"; cat /sys/class/net/${iface}/link_mode 2>/dev/null; echo;\n            echo -n \"mtu: \"; cat /sys/class/net/${iface}/mtu 2>/dev/null; echo;\n            echo -n \"netdev_group: \"; cat /sys/class/net/${iface}/netdev_group 2>/dev/null; echo;\n            echo -n \"operstate: \"; cat /sys/class/net/${iface}/operstate 2>/dev/null; echo;\n            echo -n \"proto_down: \"; cat /sys/class/net/${iface}/proto_down 2>/dev/null; echo;\n            echo -n \"speed: \"; cat /sys/class/net/${iface}/speed 2>/dev/null; echo;\n            echo -n \"tx_queue_len: \"; cat /sys/class/net/${iface}/tx_queue_len 2>/dev/null; echo;\n            echo -n \"type: \"; cat /sys/class/net/${iface}/type 2>/dev/null; echo;\n            echo -n \"wireless: \"; cat /proc/net/wireless 2>/dev/null \\| grep ${iface}; echo;\n            echo -n \"wirelessspeed: \"; iw dev ${iface} link 2>&1 \\| grep bitrate; echo;`;\n\n                let lines = [];\n                try {\n                  lines = execSync(cmd).toString().split('\\n');\n                  const connectionName = getLinuxIfaceConnectionName(iface);\n                  dhcp = getLinuxIfaceDHCPstatus(iface, connectionName, _dhcpNics);\n                  dnsSuffix = getLinuxIfaceDNSsuffix(connectionName);\n                  ieee8021xAuth = getLinuxIfaceIEEE8021xAuth(connectionName);\n                  ieee8021xState = getLinuxIfaceIEEE8021xState(ieee8021xAuth);\n                } catch (e) {\n                  util.noop();\n                }\n                duplex = util.getValue(lines, 'duplex');\n                duplex = duplex.startsWith('cat') ? '' : duplex;\n                mtu = parseInt(util.getValue(lines, 'mtu'), 10);\n                let myspeed = parseInt(util.getValue(lines, 'speed'), 10);\n                speed = isNaN(myspeed) ? -1 : myspeed;\n                let wirelessspeed = util.getValue(lines, 'wirelessspeed').split('tx bitrate: ');\n                if (speed === -1 && wirelessspeed.length === 2) {\n                  myspeed = parseFloat(wirelessspeed[1]);\n                  speed = isNaN(myspeed) ? -1 : myspeed;\n                }\n                carrierChanges = parseInt(util.getValue(lines, 'carrier_changes'), 10);\n                operstate = util.getValue(lines, 'operstate');\n                type = operstate === 'up' ? (util.getValue(lines, 'wireless').trim() ? 'wireless' : 'wired') : 'unknown';\n                if (iface === 'lo' || iface.startsWith('bond')) { type = 'virtual'; }\n              }\n              if (_windows) {\n\n\n                dnsSuffix = getWindowsIfaceDNSsuffix(dnsSuffixes.ifaces, dev);\n                nics.forEach(detail => {\n                  if (detail.mac === mac) {\n                    ifaceName = detail.name;\n                    dhcp = detail.dhcp;\n                    operstate = detail.operstate;\n                    speed = detail.speed;\n                    type = detail.type;\n                  }\n                });\n\n                if (dev.toLowerCase().indexOf('wlan') >= 0 || ifaceName.toLowerCase().indexOf('wlan') >= 0 || ifaceName.toLowerCase().indexOf('802.11n') >= 0 || ifaceName.toLowerCase().indexOf('wireless') >= 0 || ifaceName.toLowerCase().indexOf('wi-fi') >= 0 || ifaceName.toLowerCase().indexOf('wifi') >= 0) {\n                  type = 'wireless';\n                }\n\n                const IEEE8021x = getWindowsIEEE8021x(type, dev, nics8021xInfo);\n                ieee8021xAuth = IEEE8021x.protocol;\n                ieee8021xState = IEEE8021x.state;\n              }\n              let internal = (ifaces[dev] && ifaces[dev][0]) ? ifaces[dev][0].internal : false;\n              if (dev.toLowerCase().indexOf('loopback') > -1 || ifaceName.toLowerCase().indexOf('loopback') > -1) {\n                internal = true;\n              }\n              const virtual = internal ? false : testVirtualNic(dev, ifaceName, mac);\n              result.push({\n                iface: dev,\n                ifaceName,\n                ip4,\n                ip4subnet,\n                ip6,\n                ip6subnet,\n                mac,\n                internal,\n                virtual,\n                operstate,\n                type,\n                duplex,\n                mtu,\n                speed,\n                dhcp,\n                dnsSuffix,\n                ieee8021xAuth,\n                ieee8021xState,\n                carrierChanges,\n              });\n            }\n          }\n          _networkInterfaces = result;\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkInterfaces = networkInterfaces;\n\n// --------------------------\n// NET - Speed\n\nfunction calcNetworkSpeed(iface, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors) {\n  let result = {\n    iface,\n    operstate,\n    rx_bytes,\n    rx_dropped,\n    rx_errors,\n    tx_bytes,\n    tx_dropped,\n    tx_errors,\n    rx_sec: -1,\n    tx_sec: -1,\n    ms: 0\n  };\n\n  if (_network[iface] && _network[iface].ms) {\n    result.ms = Date.now() - _network[iface].ms;\n    result.rx_sec = (rx_bytes - _network[iface].rx_bytes) >= 0 ? (rx_bytes - _network[iface].rx_bytes) / (result.ms / 1000) : 0;\n    result.tx_sec = (tx_bytes - _network[iface].tx_bytes) >= 0 ? (tx_bytes - _network[iface].tx_bytes) / (result.ms / 1000) : 0;\n    _network[iface].rx_bytes = rx_bytes;\n    _network[iface].tx_bytes = tx_bytes;\n    _network[iface].rx_sec = result.rx_sec;\n    _network[iface].tx_sec = result.tx_sec;\n    _network[iface].ms = Date.now();\n    _network[iface].last_ms = result.ms;\n    _network[iface].operstate = operstate;\n  } else {\n    if (!_network[iface]) _network[iface] = {};\n    _network[iface].rx_bytes = rx_bytes;\n    _network[iface].tx_bytes = tx_bytes;\n    _network[iface].rx_sec = -1;\n    _network[iface].tx_sec = -1;\n    _network[iface].ms = Date.now();\n    _network[iface].last_ms = 0;\n    _network[iface].operstate = operstate;\n  }\n  return result;\n}\n\nfunction networkStats(ifaces, callback) {\n\n  let ifacesArray = [];\n  // fallback - if only callback is given\n  if (util.isFunction(ifaces) && !callback) {\n    callback = ifaces;\n    ifacesArray = [getDefaultNetworkInterface()];\n  } else {\n    ifaces = ifaces || getDefaultNetworkInterface();\n    ifaces = ifaces.trim().toLowerCase().replace(/,+/g, '|');\n    ifacesArray = ifaces.split('|');\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      const result = [];\n\n      const workload = [];\n      if (ifacesArray.length && ifacesArray[0].trim() === '*') {\n        ifacesArray = [];\n        networkInterfaces(false).then(allIFaces => {\n          for (let iface of allIFaces) {\n            ifacesArray.push(iface.iface);\n          }\n          networkStats(ifacesArray.join(',')).then(result => {\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        });\n      } else {\n        for (let iface of ifacesArray) {\n          workload.push(networkStatsSingle(iface.trim()));\n        }\n        if (workload.length) {\n          Promise.all(\n            workload\n          ).then(data => {\n            if (callback) { callback(data); }\n            resolve(data);\n          });\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nfunction networkStatsSingle(iface) {\n\n  function parseLinesWindowsPerfData(sections) {\n    let perfData = [];\n    for (let i in sections) {\n      if ({}.hasOwnProperty.call(sections, i)) {\n        if (sections[i].trim() !== '') {\n          let lines = sections[i].trim().split('\\r\\n');\n          perfData.push({\n            name: util.getValue(lines, 'Name', '=').replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase(),\n            rx_bytes: parseInt(util.getValue(lines, 'BytesReceivedPersec', '='), 10),\n            rx_errors: parseInt(util.getValue(lines, 'PacketsReceivedErrors', '='), 10),\n            rx_dropped: parseInt(util.getValue(lines, 'PacketsReceivedDiscarded', '='), 10),\n            tx_bytes: parseInt(util.getValue(lines, 'BytesSentPersec', '='), 10),\n            tx_errors: parseInt(util.getValue(lines, 'PacketsOutboundErrors', '='), 10),\n            tx_dropped: parseInt(util.getValue(lines, 'PacketsOutboundDiscarded', '='), 10)\n          });\n        }\n      }\n    }\n    return perfData;\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let ifaceSanitized = '';\n      const s = util.isPrototypePolluted() ? '---' : util.sanitizeShellString(iface);\n      for (let i = 0; i <= 2000; i++) {\n        if (!(s[i] === undefined)) {\n          ifaceSanitized = ifaceSanitized + s[i];\n        }\n      }\n\n      let result = {\n        iface: ifaceSanitized,\n        operstate: 'unknown',\n        rx_bytes: 0,\n        rx_dropped: 0,\n        rx_errors: 0,\n        tx_bytes: 0,\n        tx_dropped: 0,\n        tx_errors: 0,\n        rx_sec: -1,\n        tx_sec: -1,\n        ms: 0\n      };\n\n      let operstate = 'unknown';\n      let rx_bytes = 0;\n      let tx_bytes = 0;\n      let rx_dropped = 0;\n      let rx_errors = 0;\n      let tx_dropped = 0;\n      let tx_errors = 0;\n\n      let cmd, lines, stats;\n      if (!_network[ifaceSanitized] || (_network[ifaceSanitized] && !_network[ifaceSanitized].ms) || (_network[ifaceSanitized] && _network[ifaceSanitized].ms && Date.now() - _network[ifaceSanitized].ms >= 500)) {\n        if (_linux) {\n          if (fs.existsSync('/sys/class/net/' + ifaceSanitized)) {\n            cmd =\n              'cat /sys/class/net/' + ifaceSanitized + '/operstate; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_bytes; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_bytes; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_dropped; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_errors; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_dropped; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_errors; ';\n            exec(cmd, function (error, stdout) {\n              if (!error) {\n                lines = stdout.toString().split('\\n');\n                operstate = lines[0].trim();\n                rx_bytes = parseInt(lines[1], 10);\n                tx_bytes = parseInt(lines[2], 10);\n                rx_dropped = parseInt(lines[3], 10);\n                rx_errors = parseInt(lines[4], 10);\n                tx_dropped = parseInt(lines[5], 10);\n                tx_errors = parseInt(lines[6], 10);\n\n                result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n\n              }\n              resolve(result);\n            });\n          } else {\n            resolve(result);\n          }\n        }\n        if (_freebsd || _openbsd || _netbsd) {\n          cmd = 'netstat -ibndI ' + ifaceSanitized;\n          exec(cmd, function (error, stdout) {\n            if (!error) {\n              lines = stdout.toString().split('\\n');\n              for (let i = 1; i < lines.length; i++) {\n                const line = lines[i].replace(/ +/g, ' ').split(' ');\n                if (line && line[0] && line[7] && line[10]) {\n                  rx_bytes = rx_bytes + parseInt(line[7]);\n                  if (line[6].trim() !== '-') { rx_dropped = rx_dropped + parseInt(line[6]); }\n                  if (line[5].trim() !== '-') { rx_errors = rx_errors + parseInt(line[5]); }\n                  tx_bytes = tx_bytes + parseInt(line[10]);\n                  if (line[12].trim() !== '-') { tx_dropped = tx_dropped + parseInt(line[12]); }\n                  if (line[9].trim() !== '-') { tx_errors = tx_errors + parseInt(line[9]); }\n                  operstate = 'up';\n                }\n              }\n              result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n            }\n            resolve(result);\n          });\n        }\n        if (_darwin) {\n          cmd = 'ifconfig ' + ifaceSanitized + ' | grep \"status\"';\n          exec(cmd, function (error, stdout) {\n            result.operstate = (stdout.toString().split(':')[1] || '').trim();\n            result.operstate = (result.operstate || '').toLowerCase();\n            result.operstate = (result.operstate === 'active' ? 'up' : (result.operstate === 'inactive' ? 'down' : 'unknown'));\n            cmd = 'netstat -bdI ' + ifaceSanitized;\n            exec(cmd, function (error, stdout) {\n              if (!error) {\n                lines = stdout.toString().split('\\n');\n                // if there is less than 2 lines, no information for this interface was found\n                if (lines.length > 1 && lines[1].trim() !== '') {\n                  // skip header line\n                  // use the second line because it is tied to the NIC instead of the ipv4 or ipv6 address\n                  stats = lines[1].replace(/ +/g, ' ').split(' ');\n                  const offset = stats.length > 11 ? 1 : 0;\n                  rx_bytes = parseInt(stats[offset + 5]);\n                  rx_dropped = parseInt(stats[offset + 10]);\n                  rx_errors = parseInt(stats[offset + 4]);\n                  tx_bytes = parseInt(stats[offset + 8]);\n                  tx_dropped = parseInt(stats[offset + 10]);\n                  tx_errors = parseInt(stats[offset + 7]);\n                  result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, result.operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n                }\n              }\n              resolve(result);\n            });\n          });\n        }\n        if (_windows) {\n          let perfData = [];\n          let ifaceName = ifaceSanitized;\n\n          // Performance Data\n          util.wmic('path Win32_PerfRawData_Tcpip_NetworkInterface Get name,BytesReceivedPersec,BytesSentPersec,BytesTotalPersec,PacketsOutboundDiscarded,PacketsOutboundErrors,PacketsReceivedDiscarded,PacketsReceivedErrors /value').then((stdout, error) => {\n            if (!error) {\n              const psections = stdout.toString().split(/\\n\\s*\\n/);\n              perfData = parseLinesWindowsPerfData(psections);\n            }\n\n            // Network Interfaces\n            networkInterfaces(false).then(interfaces => {\n              // get bytes sent, received from perfData by name\n              rx_bytes = 0;\n              tx_bytes = 0;\n              perfData.forEach(detail => {\n                interfaces.forEach(det => {\n                  if ((det.iface.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.mac.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.ip4.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.ip6.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.ifaceName.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase() === ifaceSanitized.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase()) &&\n                    (det.ifaceName.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase() === detail.name)) {\n                    ifaceName = det.iface;\n                    rx_bytes = detail.rx_bytes;\n                    rx_dropped = detail.rx_dropped;\n                    rx_errors = detail.rx_errors;\n                    tx_bytes = detail.tx_bytes;\n                    tx_dropped = detail.tx_dropped;\n                    tx_errors = detail.tx_errors;\n                    operstate = det.operstate;\n                  }\n                });\n              });\n              if (rx_bytes && tx_bytes) {\n                result = calcNetworkSpeed(ifaceName, parseInt(rx_bytes), parseInt(tx_bytes), operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n              }\n              resolve(result);\n            });\n          });\n        }\n      } else {\n        result.rx_bytes = _network[ifaceSanitized].rx_bytes;\n        result.tx_bytes = _network[ifaceSanitized].tx_bytes;\n        result.rx_sec = _network[ifaceSanitized].rx_sec;\n        result.tx_sec = _network[ifaceSanitized].tx_sec;\n        result.ms = _network[ifaceSanitized].last_ms;\n        result.operstate = _network[ifaceSanitized].operstate;\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.networkStats = networkStats;\n\n// --------------------------\n// NET - connections (sockets)\n\nfunction networkConnections(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = [];\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        let cmd = 'export LC_ALL=C; netstat -tunap | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"; unset LC_ALL';\n        if (_freebsd || _openbsd || _netbsd) cmd = 'export LC_ALL=C; netstat -na | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"; unset LC_ALL';\n        exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          if (!error && (lines.length > 1 || lines[0] != '')) {\n            lines.forEach(function (line) {\n              line = line.replace(/ +/g, ' ').split(' ');\n              if (line.length >= 7) {\n                let localip = line[3];\n                let localport = '';\n                let localaddress = line[3].split(':');\n                if (localaddress.length > 1) {\n                  localport = localaddress[localaddress.length - 1];\n                  localaddress.pop();\n                  localip = localaddress.join(':');\n                }\n                let peerip = line[4];\n                let peerport = '';\n                let peeraddress = line[4].split(':');\n                if (peeraddress.length > 1) {\n                  peerport = peeraddress[peeraddress.length - 1];\n                  peeraddress.pop();\n                  peerip = peeraddress.join(':');\n                }\n                let connstate = line[5];\n                // if (connstate === 'VERBUNDEN') connstate = 'ESTABLISHED';\n                let proc = line[6].split('/');\n\n                if (connstate) {\n                  result.push({\n                    protocol: line[0],\n                    localaddress: localip,\n                    localport: localport,\n                    peeraddress: peerip,\n                    peerport: peerport,\n                    state: connstate,\n                    pid: proc[0] && proc[0] !== '-' ? parseInt(proc[0], 10) : -1,\n                    process: proc[1] ? proc[1].split(' ')[0] : ''\n                  });\n                }\n              }\n            });\n            if (callback) {\n              callback(result);\n            }\n            resolve(result);\n          } else {\n            cmd = 'ss -tunap | grep \"ESTAB\\\\|SYN-SENT\\\\|SYN-RECV\\\\|FIN-WAIT1\\\\|FIN-WAIT2\\\\|TIME-WAIT\\\\|CLOSE\\\\|CLOSE-WAIT\\\\|LAST-ACK\\\\|LISTEN\\\\|CLOSING\"';\n            exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n\n              if (!error) {\n                let lines = stdout.toString().split('\\n');\n                lines.forEach(function (line) {\n                  line = line.replace(/ +/g, ' ').split(' ');\n                  if (line.length >= 6) {\n                    let localip = line[4];\n                    let localport = '';\n                    let localaddress = line[4].split(':');\n                    if (localaddress.length > 1) {\n                      localport = localaddress[localaddress.length - 1];\n                      localaddress.pop();\n                      localip = localaddress.join(':');\n                    }\n                    let peerip = line[5];\n                    let peerport = '';\n                    let peeraddress = line[5].split(':');\n                    if (peeraddress.length > 1) {\n                      peerport = peeraddress[peeraddress.length - 1];\n                      peeraddress.pop();\n                      peerip = peeraddress.join(':');\n                    }\n                    let connstate = line[1];\n                    if (connstate === 'ESTAB') connstate = 'ESTABLISHED';\n                    if (connstate === 'TIME-WAIT') connstate = 'TIME_WAIT';\n                    let pid = -1;\n                    let process = '';\n                    if (line.length >= 7 && line[6].indexOf('users:') > -1) {\n                      let proc = line[6].replace('users:((\"', '').replace(/\"/g, '').split(',');\n                      if (proc.length > 2) {\n                        process = proc[0].split(' ')[0];\n                        pid = parseInt(proc[1], 10);\n                      }\n                    }\n                    if (connstate) {\n                      result.push({\n                        protocol: line[0],\n                        localaddress: localip,\n                        localport: localport,\n                        peeraddress: peerip,\n                        peerport: peerport,\n                        state: connstate,\n                        pid,\n                        process\n                      });\n                    }\n                  }\n                });\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n          }\n        });\n      }\n      if (_darwin) {\n        let cmd = 'netstat -natv | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"';\n        exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n          if (!error) {\n\n            let lines = stdout.toString().split('\\n');\n\n            lines.forEach(function (line) {\n              line = line.replace(/ +/g, ' ').split(' ');\n              if (line.length >= 8) {\n                let localip = line[3];\n                let localport = '';\n                let localaddress = line[3].split('.');\n                if (localaddress.length > 1) {\n                  localport = localaddress[localaddress.length - 1];\n                  localaddress.pop();\n                  localip = localaddress.join('.');\n                }\n                let peerip = line[4];\n                let peerport = '';\n                let peeraddress = line[4].split('.');\n                if (peeraddress.length > 1) {\n                  peerport = peeraddress[peeraddress.length - 1];\n                  peeraddress.pop();\n                  peerip = peeraddress.join('.');\n                }\n                let connstate = line[5];\n                let pid = parseInt(line[8], 10);\n                if (connstate) {\n                  result.push({\n                    protocol: line[0],\n                    localaddress: localip,\n                    localport: localport,\n                    peeraddress: peerip,\n                    peerport: peerport,\n                    state: connstate,\n                    pid: pid,\n                    process: ''\n                  });\n                }\n              }\n            });\n            if (callback) {\n              callback(result);\n            }\n            resolve(result);\n          }\n        });\n      }\n      if (_windows) {\n        let cmd = 'netstat -nao';\n        try {\n          exec(cmd, util.execOptsWin, function (error, stdout) {\n            if (!error) {\n\n              let lines = stdout.toString().split('\\r\\n');\n\n              lines.forEach(function (line) {\n                line = line.trim().replace(/ +/g, ' ').split(' ');\n                if (line.length >= 4) {\n                  let localip = line[1];\n                  let localport = '';\n                  let localaddress = line[1].split(':');\n                  if (localaddress.length > 1) {\n                    localport = localaddress[localaddress.length - 1];\n                    localaddress.pop();\n                    localip = localaddress.join(':');\n                  }\n                  let peerip = line[2];\n                  let peerport = '';\n                  let peeraddress = line[2].split(':');\n                  if (peeraddress.length > 1) {\n                    peerport = peeraddress[peeraddress.length - 1];\n                    peeraddress.pop();\n                    peerip = peeraddress.join(':');\n                  }\n                  let pid = line[4];\n                  let connstate = line[3];\n                  if (connstate === 'HERGESTELLT') connstate = 'ESTABLISHED';\n                  if (connstate.startsWith('ABH')) connstate = 'LISTEN';\n                  if (connstate === 'SCHLIESSEN_WARTEN') connstate = 'CLOSE_WAIT';\n                  if (connstate === 'WARTEND') connstate = 'TIME_WAIT';\n                  if (connstate === 'SYN_GESENDET') connstate = 'SYN_SENT';\n\n                  if (connstate === 'LISTENING') connstate = 'LISTEN';\n                  if (connstate === 'SYN_RECEIVED') connstate = 'SYN_RECV';\n                  if (connstate === 'FIN_WAIT_1') connstate = 'FIN_WAIT1';\n                  if (connstate === 'FIN_WAIT_2') connstate = 'FIN_WAIT2';\n                  if (connstate) {\n                    result.push({\n                      protocol: line[0].toLowerCase(),\n                      localaddress: localip,\n                      localport: localport,\n                      peeraddress: peerip,\n                      peerport: peerport,\n                      state: connstate,\n                      pid,\n                      process: ''\n                    });\n                  }\n                }\n              });\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkConnections = networkConnections;\n\nfunction networkGatewayDefault(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = '';\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        let cmd = 'ip route get 1';\n        try {\n          exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              const line = lines && lines[0] ? lines[0] : '';\n              let parts = line.split(' via ');\n              if (parts && parts[1]) {\n                parts = parts[1].split(' ');\n                result = parts[0];\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            } else {\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_darwin) {\n        let cmd = 'route -n get default';\n        try {\n          exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n').map(line => line.trim());\n              result = util.getValue(lines, 'gateway');\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            } else {\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_windows) {\n        try {\n          exec('netstat -r', util.execOptsWin, function (error, stdout) {\n            const lines = stdout.toString().split(os.EOL);\n            lines.forEach(line => {\n              line = line.replace(/\\s+/g, ' ').trim();\n              if (line.indexOf('0.0.0.0 0.0.0.0') > -1 && !(/[a-zA-Z]/.test(line))) {\n                const parts = line.split(' ');\n                if (parts.length >= 5 && (parts[parts.length - 3]).indexOf('.') > -1) {\n                  result = parts[parts.length - 3];\n                }\n              }\n            });\n            if (!result) {\n              util.powerShell('Get-CimInstance -ClassName Win32_IP4RouteTable | Where-Object { $_.Destination -eq \\'0.0.0.0\\' -and $_.Mask -eq \\'0.0.0.0\\' }')\n                .then(data => {\n                  let lines = data.toString().split('\\r\\n');\n                  if (lines.length > 1 && !result) {\n                    result = util.getValue(lines, 'NextHop');\n                    if (callback) {\n                      callback(result);\n                    }\n                    resolve(result);\n                    // } else {\n                    //   exec('ipconfig', util.execOptsWin, function (error, stdout) {\n                    //     let lines = stdout.toString().split('\\r\\n');\n                    //     lines.forEach(function (line) {\n                    //       line = line.trim().replace(/\\. /g, '');\n                    //       line = line.trim().replace(/ +/g, '');\n                    //       const parts = line.split(':');\n                    //       if ((parts[0].toLowerCase().startsWith('standardgate') || parts[0].toLowerCase().indexOf('gateway') > -1 || parts[0].toLowerCase().indexOf('enlace') > -1) && parts[1]) {\n                    //         result = parts[1];\n                    //       }\n                    //     });\n                    //     if (callback) { callback(result); }\n                    //     resolve(result);\n                    //   });\n                  }\n                });\n            } else {\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkGatewayDefault = networkGatewayDefault;\n", "'use strict';\n// @ts-check\n// ==================================================================================\n// processes.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 10. Processes\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst fs = require('fs');\nconst path = require('path');\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nconst _processes_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\nconst _services_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\nconst _process_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\n\nconst _winStatusValues = {\n  '0': 'unknown',\n  '1': 'other',\n  '2': 'ready',\n  '3': 'running',\n  '4': 'blocked',\n  '5': 'suspended blocked',\n  '6': 'suspended ready',\n  '7': 'terminated',\n  '8': 'stopped',\n  '9': 'growing',\n};\n\n\nfunction parseTimeWin(time) {\n  time = time || '';\n  if (time) {\n    return (time.substr(0, 4) + '-' + time.substr(4, 2) + '-' + time.substr(6, 2) + ' ' + time.substr(8, 2) + ':' + time.substr(10, 2) + ':' + time.substr(12, 2));\n  } else {\n    return '';\n  }\n}\n\nfunction parseTimeUnix(time) {\n  let result = time;\n  let parts = time.replace(/ +/g, ' ').split(' ');\n  if (parts.length === 5) {\n    result = parts[4] + '-' + ('0' + ('JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'.indexOf(parts[1].toUpperCase()) / 3 + 1)).slice(-2) + '-' + ('0' + parts[2]).slice(-2) + ' ' + parts[3];\n  }\n  return result;\n}\n\n// --------------------------\n// PS - services\n// pass a comma separated string with services to check (mysql, apache, postgresql, ...)\n// this function gives an array back, if the services are running.\n\nfunction services(srv, callback) {\n\n  // fallback - if only callback is given\n  if (util.isFunction(srv) && !callback) {\n    callback = srv;\n    srv = '';\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      if (srv) {\n        let srvString = '';\n        srvString.__proto__.toLowerCase = util.stringToLower;\n        srvString.__proto__.replace = util.stringReplace;\n        srvString.__proto__.trim = util.stringTrim;\n\n        const s = util.sanitizeShellString(srv);\n        for (let i = 0; i <= 2000; i++) {\n          if (!(s[i] === undefined)) {\n            srvString = srvString + s[i];\n          }\n        }\n\n        srvString = srvString.trim().toLowerCase().replace(/, /g, '|').replace(/,+/g, '|');\n        if (srvString === '') {\n          srvString = '*';\n        }\n        if (util.isPrototypePolluted() && srvString !== '*') {\n          srvString = '------';\n        }\n        let srvs = srvString.split('|');\n        let result = [];\n        let dataSrv = [];\n        let allSrv = [];\n\n        if (_linux || _freebsd || _openbsd || _netbsd || _darwin) {\n          if ((_linux || _freebsd || _openbsd || _netbsd) && srvString === '*') {\n            srvString = '';\n            let tmpsrv = execSync('service --status-all 2> /dev/null').toString().split('\\n');\n            for (const s of tmpsrv) {\n              const parts = s.split(']');\n              if (parts.length === 2) {\n                srvString += (srvString !== '' ? '|' : '') + parts[1].trim();\n                allSrv.push({ name: parts[1].trim(), running: parts[0].indexOf('+') > 0 });\n              }\n            }\n            srvs = srvString.split('|');\n          }\n          let comm = (_darwin) ? 'ps -caxo pcpu,pmem,pid,command' : 'ps -axo pcpu,pmem,pid,command';\n          if (srvString !== '' && srvs.length > 0) {\n            exec(comm + ' | grep -v grep | grep -iE \"' + srvString + '\"', { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n              if (!error) {\n                let lines = stdout.toString().replace(/ +/g, ' ').replace(/,+/g, '.').split('\\n');\n                srvs.forEach(function (srv) {\n                  let ps;\n                  if (_darwin) {\n                    ps = lines.filter(function (e) {\n                      return (e.toLowerCase().indexOf(srv) !== -1);\n                    });\n\n                  } else {\n                    ps = lines.filter(function (e) {\n                      return (e.toLowerCase().indexOf(' ' + srv + ':') !== -1) || (e.toLowerCase().indexOf('/' + srv) !== -1);\n                    });\n                  }\n                  let singleSrv = allSrv.filter(item => { return item.name === srv; });\n                  const pids = [];\n                  for (const p of ps) {\n                    const pid = p.trim().split(' ')[2];\n                    if (pid) {\n                      pids.push(parseInt(pid, 10));\n                    }\n                  }\n                  result.push({\n                    name: srv,\n                    running: (allSrv.length && singleSrv.length ? singleSrv[0].running : ps.length > 0),\n                    startmode: '',\n                    pids: pids,\n                    pcpu: parseFloat((ps.reduce(function (pv, cv) {\n                      return pv + parseFloat(cv.trim().split(' ')[0]);\n                    }, 0)).toFixed(2)),\n                    pmem: parseFloat((ps.reduce(function (pv, cv) {\n                      return pv + parseFloat(cv.trim().split(' ')[1]);\n                    }, 0)).toFixed(2))\n                  });\n                });\n                if (_linux) {\n                  // calc process_cpu - ps is not accurate in linux!\n                  let cmd = 'cat /proc/stat | grep \"cpu \"';\n                  for (let i in result) {\n                    for (let j in result[i].pids) {\n                      cmd += (';cat /proc/' + result[i].pids[j] + '/stat');\n                    }\n                  }\n                  exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                    let curr_processes = stdout.toString().split('\\n');\n\n                    // first line (all - /proc/stat)\n                    let all = parseProcStat(curr_processes.shift());\n\n                    // process\n                    let list_new = {};\n                    let resultProcess = {};\n                    for (let i = 0; i < curr_processes.length; i++) {\n                      resultProcess = calcProcStatLinux(curr_processes[i], all, _services_cpu);\n\n                      if (resultProcess.pid) {\n                        let listPos = -1;\n                        for (let i in result) {\n                          for (let j in result[i].pids) {\n                            if (parseInt(result[i].pids[j]) === parseInt(resultProcess.pid)) {\n                              listPos = i;\n                            }\n                          }\n                        }\n                        if (listPos >= 0) {\n                          result[listPos].pcpu += resultProcess.pcpuu + resultProcess.pcpus;\n                        }\n\n                        // save new values\n                        list_new[resultProcess.pid] = {\n                          pcpuu: resultProcess.pcpuu,\n                          pcpus: resultProcess.pcpus,\n                          utime: resultProcess.utime,\n                          stime: resultProcess.stime,\n                          cutime: resultProcess.cutime,\n                          cstime: resultProcess.cstime\n                        };\n                      }\n                    }\n\n                    // store old values\n                    _services_cpu.all = all;\n                    // _services_cpu.list = list_new;\n                    _services_cpu.list = Object.assign({}, list_new);\n                    _services_cpu.ms = Date.now() - _services_cpu.ms;\n                    // _services_cpu.result = result;\n                    _services_cpu.result = Object.assign({}, result);\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  });\n                } else {\n                  if (callback) { callback(result); }\n                  resolve(result);\n                }\n              } else {\n                exec('ps -o comm | grep -v grep | egrep \"' + srvString + '\"', { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                  if (!error) {\n                    let lines = stdout.toString().replace(/ +/g, ' ').replace(/,+/g, '.').split('\\n');\n                    srvs.forEach(function (srv) {\n                      let ps = lines.filter(function (e) {\n                        return e.indexOf(srv) !== -1;\n                      });\n                      result.push({\n                        name: srv,\n                        running: ps.length > 0,\n                        startmode: '',\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                    });\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  } else {\n                    srvs.forEach(function (srv) {\n                      result.push({\n                        name: srv,\n                        running: false,\n                        startmode: '',\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                    });\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  }\n                });\n              }\n            });\n          } else {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        }\n        if (_windows) {\n          try {\n            util.wmic('service get /value').then((stdout, error) => {\n              if (!error) {\n                let serviceSections = stdout.split(/\\n\\s*\\n/);\n                for (let i = 0; i < serviceSections.length; i++) {\n                  if (serviceSections[i].trim() !== '') {\n                    let lines = serviceSections[i].trim().split('\\r\\n');\n                    let srvName = util.getValue(lines, 'Name', '=', true).toLowerCase();\n                    let started = util.getValue(lines, 'Started', '=', true);\n                    let startMode = util.getValue(lines, 'StartMode', '=', true);\n                    let pid = util.getValue(lines, 'ProcessId', '=', true);\n                    if (srvString === '*' || srvs.indexOf(srvName) >= 0) {\n                      result.push({\n                        name: srvName,\n                        running: (started === 'TRUE'),\n                        startmode: startMode,\n                        pids: [pid],\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                      dataSrv.push(srvName);\n                    }\n                  }\n                }\n                if (srvString !== '*') {\n                  let srvsMissing = srvs.filter(function (e) {\n                    return dataSrv.indexOf(e) === -1;\n                  });\n                  srvsMissing.forEach(function (srvName) {\n                    result.push({\n                      name: srvName,\n                      running: false,\n                      startmode: '',\n                      pids: [],\n                      pcpu: 0,\n                      pmem: 0\n                    });\n                  });\n                }\n                if (callback) { callback(result); }\n                resolve(result);\n              } else {\n                srvs.forEach(function (srvName) {\n                  result.push({\n                    name: srvName,\n                    running: false,\n                    startmode: '',\n                    pcpu: 0,\n                    pmem: 0\n                  });\n                });\n                if (callback) { callback(result); }\n                resolve(result);\n              }\n            });\n          } catch (e) {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        }\n      } else {\n        if (callback) { callback({}); }\n        resolve({});\n      }\n    });\n  });\n}\n\nexports.services = services;\n\nfunction parseProcStat(line) {\n  let parts = line.replace(/ +/g, ' ').split(' ');\n  let user = (parts.length >= 2 ? parseInt(parts[1]) : 0);\n  let nice = (parts.length >= 3 ? parseInt(parts[2]) : 0);\n  let system = (parts.length >= 4 ? parseInt(parts[3]) : 0);\n  let idle = (parts.length >= 5 ? parseInt(parts[4]) : 0);\n  let iowait = (parts.length >= 6 ? parseInt(parts[5]) : 0);\n  let irq = (parts.length >= 7 ? parseInt(parts[6]) : 0);\n  let softirq = (parts.length >= 8 ? parseInt(parts[7]) : 0);\n  let steal = (parts.length >= 9 ? parseInt(parts[8]) : 0);\n  let guest = (parts.length >= 10 ? parseInt(parts[9]) : 0);\n  let guest_nice = (parts.length >= 11 ? parseInt(parts[10]) : 0);\n  return user + nice + system + idle + iowait + irq + softirq + steal + guest + guest_nice;\n}\n\nfunction calcProcStatLinux(line, all, _cpu_old) {\n  let statparts = line.replace(/ +/g, ' ').split(')');\n  if (statparts.length >= 2) {\n    let parts = statparts[1].split(' ');\n    if (parts.length >= 16) {\n      let pid = parseInt(statparts[0].split(' ')[0]);\n      let utime = parseInt(parts[12]);\n      let stime = parseInt(parts[13]);\n      let cutime = parseInt(parts[14]);\n      let cstime = parseInt(parts[15]);\n\n      // calc\n      let pcpuu = 0;\n      let pcpus = 0;\n      if (_cpu_old.all > 0 && _cpu_old.list[pid]) {\n        pcpuu = (utime + cutime - _cpu_old.list[pid].utime - _cpu_old.list[pid].cutime) / (all - _cpu_old.all) * 100; // user\n        pcpus = (stime + cstime - _cpu_old.list[pid].stime - _cpu_old.list[pid].cstime) / (all - _cpu_old.all) * 100; // system\n      } else {\n        pcpuu = (utime + cutime) / (all) * 100; // user\n        pcpus = (stime + cstime) / (all) * 100; // system\n      }\n      return {\n        pid: pid,\n        utime: utime,\n        stime: stime,\n        cutime: cutime,\n        cstime: cstime,\n        pcpuu: pcpuu,\n        pcpus: pcpus\n      };\n    } else {\n      return {\n        pid: 0,\n        utime: 0,\n        stime: 0,\n        cutime: 0,\n        cstime: 0,\n        pcpuu: 0,\n        pcpus: 0\n      };\n    }\n  } else {\n    return {\n      pid: 0,\n      utime: 0,\n      stime: 0,\n      cutime: 0,\n      cstime: 0,\n      pcpuu: 0,\n      pcpus: 0\n    };\n  }\n}\n\nfunction calcProcStatWin(procStat, all, _cpu_old) {\n  // calc\n  let pcpuu = 0;\n  let pcpus = 0;\n  if (_cpu_old.all > 0 && _cpu_old.list[procStat.pid]) {\n    pcpuu = (procStat.utime - _cpu_old.list[procStat.pid].utime) / (all - _cpu_old.all) * 100; // user\n    pcpus = (procStat.stime - _cpu_old.list[procStat.pid].stime) / (all - _cpu_old.all) * 100; // system\n  } else {\n    pcpuu = (procStat.utime) / (all) * 100; // user\n    pcpus = (procStat.stime) / (all) * 100; // system\n  }\n  return {\n    pid: procStat.pid,\n    utime: procStat.utime,\n    stime: procStat.stime,\n    pcpuu: pcpuu,\n    pcpus: pcpus\n  };\n}\n\n\n\n// --------------------------\n// running processes\n\nfunction processes(callback) {\n\n  let parsedhead = [];\n\n  function getName(command) {\n    command = command || '';\n    let result = command.split(' ')[0];\n    if (result.substr(-1) === ':') {\n      result = result.substr(0, result.length - 1);\n    }\n    if (result.substr(0, 1) !== '[') {\n      let parts = result.split('/');\n      if (isNaN(parseInt(parts[parts.length - 1]))) {\n        result = parts[parts.length - 1];\n      } else {\n        result = parts[0];\n      }\n    }\n    return result;\n  }\n\n  function parseLine(line) {\n\n    let offset = 0;\n    let offset2 = 0;\n\n    function checkColumn(i) {\n      offset = offset2;\n      offset2 = line.substring(parsedhead[i].to + offset, 1000).indexOf(' ');\n    }\n\n    checkColumn(0);\n    const pid = parseInt(line.substring(parsedhead[0].from + offset, parsedhead[0].to + offset2));\n    checkColumn(1);\n    const ppid = parseInt(line.substring(parsedhead[1].from + offset, parsedhead[1].to + offset2));\n    checkColumn(2);\n    const pcpu = parseFloat(line.substring(parsedhead[2].from + offset, parsedhead[2].to + offset2).replace(/,/g, '.'));\n    checkColumn(3);\n    const pmem = parseFloat(line.substring(parsedhead[3].from + offset, parsedhead[3].to + offset2).replace(/,/g, '.'));\n    checkColumn(4);\n    const priority = parseInt(line.substring(parsedhead[4].from + offset, parsedhead[4].to + offset2));\n    checkColumn(5);\n    const vsz = parseInt(line.substring(parsedhead[5].from + offset, parsedhead[5].to + offset2));\n    checkColumn(6);\n    const rss = parseInt(line.substring(parsedhead[6].from + offset, parsedhead[6].to + offset2));\n    checkColumn(7);\n    const nice = parseInt(line.substring(parsedhead[7].from + offset, parsedhead[7].to + offset2)) || 0;\n    checkColumn(8);\n    const started = parseTimeUnix(line.substring(parsedhead[8].from + offset, parsedhead[8].to + offset2).trim());\n    checkColumn(9);\n    let state = line.substring(parsedhead[9].from + offset, parsedhead[9].to + offset2).trim();\n    state = (state[0] === 'R' ? 'running' : (state[0] === 'S' ? 'sleeping' : (state[0] === 'T' ? 'stopped' : (state[0] === 'W' ? 'paging' : (state[0] === 'X' ? 'dead' : (state[0] === 'Z' ? 'zombie' : ((state[0] === 'D' || state[0] === 'U') ? 'blocked' : 'unknown')))))));\n    checkColumn(10);\n    let tty = line.substring(parsedhead[10].from + offset, parsedhead[10].to + offset2).trim();\n    if (tty === '?' || tty === '??') tty = '';\n    checkColumn(11);\n    const user = line.substring(parsedhead[11].from + offset, parsedhead[11].to + offset2).trim();\n    checkColumn(12);\n    const fullcommand = line.substring(parsedhead[12].from + offset, parsedhead[12].to + offset2).trim().replace(/\\[/g, '').replace(/]/g, '');\n    let cmdPath = '';\n    let command = '';\n    let params = '';\n    // try to figure out where parameter starts\n    let firstParamPos = fullcommand.indexOf(' -');\n    let firstParamPathPos = fullcommand.indexOf(' /');\n    firstParamPos = (firstParamPos >= 0 ? firstParamPos : 10000);\n    firstParamPathPos = (firstParamPathPos >= 0 ? firstParamPathPos : 10000);\n    const firstPos = Math.min(firstParamPos, firstParamPathPos);\n    let tmpCommand = fullcommand.substr(0, firstPos);\n    const tmpParams = fullcommand.substr(firstPos);\n    const lastSlashPos = tmpCommand.lastIndexOf('/');\n    if (lastSlashPos >= 0) {\n      cmdPath = tmpCommand.substr(0, lastSlashPos);\n      tmpCommand = tmpCommand.substr(lastSlashPos + 1);\n    }\n\n    if (firstPos === 10000 && tmpCommand.indexOf(' ') > -1) {\n      const parts = tmpCommand.split(' ');\n      if (fs.existsSync(path.join(cmdPath, parts[0]))) {\n        command = parts.shift();\n        params = (parts.join(' ') + ' ' + tmpParams).trim();\n      } else {\n        command = tmpCommand.trim();\n        params = tmpParams.trim();\n      }\n    } else {\n      command = tmpCommand.trim();\n      params = tmpParams.trim();\n    }\n\n    return ({\n      pid: pid,\n      parentPid: ppid,\n      name: _linux ? getName(command) : command,\n      pcpu: pcpu,\n      pcpuu: 0,\n      pcpus: 0,\n      pmem: pmem,\n      priority: priority,\n      mem_vsz: vsz,\n      mem_rss: rss,\n      nice: nice,\n      started: started,\n      state: state,\n      tty: tty,\n      user: user,\n      command: command,\n      params: params,\n      path: cmdPath\n    });\n  }\n\n  function parseProcesses(lines) {\n    let result = [];\n    if (lines.length > 1) {\n      let head = lines[0];\n      parsedhead = util.parseHead(head, 8);\n      lines.shift();\n      lines.forEach(function (line) {\n        if (line.trim() !== '') {\n          result.push(parseLine(line));\n        }\n      });\n    }\n    return result;\n  }\n  function parseProcesses2(lines) {\n\n    function formatDateTime(time) {\n      const month = ('0' + (time.getMonth() + 1).toString()).substr(-2);\n      const year = time.getFullYear().toString();\n      const day = ('0' + time.getDay().toString()).substr(-2);\n      const hours = time.getHours().toString();\n      const mins = time.getMinutes().toString();\n      const secs = ('0' + time.getSeconds().toString()).substr(-2);\n\n      return (year + '-' + month + '-' + day + ' ' + hours + ':' + mins + ':' + secs);\n    }\n\n    let result = [];\n    lines.forEach(function (line) {\n      if (line.trim() !== '') {\n        line = line.trim().replace(/ +/g, ' ').replace(/,+/g, '.');\n        const parts = line.split(' ');\n        const command = parts.slice(9).join(' ');\n        const pmem = parseFloat((1.0 * parseInt(parts[3]) * 1024 / os.totalmem()).toFixed(1));\n        const elapsed_parts = parts[5].split(':');\n        const started = formatDateTime(new Date(Date.now() - (elapsed_parts.length > 1 ? (elapsed_parts[0] * 60 + elapsed_parts[1]) * 1000 : elapsed_parts[0] * 1000)));\n\n        result.push({\n          pid: parseInt(parts[0]),\n          parentPid: parseInt(parts[1]),\n          name: getName(command),\n          pcpu: 0,\n          pcpuu: 0,\n          pcpus: 0,\n          pmem: pmem,\n          priority: 0,\n          mem_vsz: parseInt(parts[2]),\n          mem_rss: parseInt(parts[3]),\n          nice: parseInt(parts[4]),\n          started: started,\n          state: (parts[6] === 'R' ? 'running' : (parts[6] === 'S' ? 'sleeping' : (parts[6] === 'T' ? 'stopped' : (parts[6] === 'W' ? 'paging' : (parts[6] === 'X' ? 'dead' : (parts[6] === 'Z' ? 'zombie' : ((parts[6] === 'D' || parts[6] === 'U') ? 'blocked' : 'unknown'))))))),\n          tty: parts[7],\n          user: parts[8],\n          command: command\n        });\n      }\n    });\n    return result;\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = {\n        all: 0,\n        running: 0,\n        blocked: 0,\n        sleeping: 0,\n        unknown: 0,\n        list: []\n      };\n\n      let cmd = '';\n\n      if ((_processes_cpu.ms && Date.now() - _processes_cpu.ms >= 500) || _processes_cpu.ms === 0) {\n        if (_linux || _freebsd || _openbsd || _netbsd || _darwin || _sunos) {\n          if (_linux) cmd = 'export LC_ALL=C; ps -axo pid:11,ppid:11,pcpu:6,pmem:6,pri:5,vsz:11,rss:11,ni:5,lstart:30,state:5,tty:15,user:20,command; unset LC_ALL';\n          if (_freebsd || _openbsd || _netbsd) cmd = 'export LC_ALL=C; ps -axo pid,ppid,pcpu,pmem,pri,vsz,rss,ni,lstart,state,tty,user,command; unset LC_ALL';\n          if (_darwin) cmd = 'export LC_ALL=C; ps -axo pid,ppid,pcpu,pmem,pri,vsz,rss,nice,lstart,state,tty,user,command -r; unset LC_ALL';\n          if (_sunos) cmd = 'ps -Ao pid,ppid,pcpu,pmem,pri,vsz,rss,nice,stime,s,tty,user,comm';\n          exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              result.list = (parseProcesses(stdout.toString().split('\\n'))).slice();\n              result.all = result.list.length;\n              result.running = result.list.filter(function (e) {\n                return e.state === 'running';\n              }).length;\n              result.blocked = result.list.filter(function (e) {\n                return e.state === 'blocked';\n              }).length;\n              result.sleeping = result.list.filter(function (e) {\n                return e.state === 'sleeping';\n              }).length;\n\n              if (_linux) {\n                // calc process_cpu - ps is not accurate in linux!\n                cmd = 'cat /proc/stat | grep \"cpu \"';\n                for (let i = 0; i < result.list.length; i++) {\n                  cmd += (';cat /proc/' + result.list[i].pid + '/stat');\n                }\n                exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                  let curr_processes = stdout.toString().split('\\n');\n\n                  // first line (all - /proc/stat)\n                  let all = parseProcStat(curr_processes.shift());\n\n                  // process\n                  let list_new = {};\n                  let resultProcess = {};\n                  for (let i = 0; i < curr_processes.length; i++) {\n                    resultProcess = calcProcStatLinux(curr_processes[i], all, _processes_cpu);\n\n                    if (resultProcess.pid) {\n\n                      // store pcpu in outer array\n                      let listPos = result.list.map(function (e) { return e.pid; }).indexOf(resultProcess.pid);\n                      if (listPos >= 0) {\n                        result.list[listPos].pcpu = resultProcess.pcpuu + resultProcess.pcpus;\n                        result.list[listPos].pcpuu = resultProcess.pcpuu;\n                        result.list[listPos].pcpus = resultProcess.pcpus;\n                      }\n\n                      // save new values\n                      list_new[resultProcess.pid] = {\n                        pcpuu: resultProcess.pcpuu,\n                        pcpus: resultProcess.pcpus,\n                        utime: resultProcess.utime,\n                        stime: resultProcess.stime,\n                        cutime: resultProcess.cutime,\n                        cstime: resultProcess.cstime\n                      };\n                    }\n                  }\n\n                  // store old values\n                  _processes_cpu.all = all;\n                  // _processes_cpu.list = list_new;\n                  _processes_cpu.list = Object.assign({}, list_new);\n                  _processes_cpu.ms = Date.now() - _processes_cpu.ms;\n                  // _processes_cpu.result = result;\n                  _processes_cpu.result = Object.assign({}, result);\n                  if (callback) { callback(result); }\n                  resolve(result);\n                });\n              } else {\n                if (callback) { callback(result); }\n                resolve(result);\n              }\n            } else {\n              cmd = 'ps -o pid,ppid,vsz,rss,nice,etime,stat,tty,user,comm';\n              if (_sunos) {\n                cmd = 'ps -o pid,ppid,vsz,rss,nice,etime,s,tty,user,comm';\n              }\n              exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                if (!error) {\n                  let lines = stdout.toString().split('\\n');\n                  lines.shift();\n\n                  result.list = parseProcesses2(lines).slice();\n                  result.all = result.list.length;\n                  result.running = result.list.filter(function (e) {\n                    return e.state === 'running';\n                  }).length;\n                  result.blocked = result.list.filter(function (e) {\n                    return e.state === 'blocked';\n                  }).length;\n                  result.sleeping = result.list.filter(function (e) {\n                    return e.state === 'sleeping';\n                  }).length;\n                  if (callback) { callback(result); }\n                  resolve(result);\n                } else {\n                  if (callback) { callback(result); }\n                  resolve(result);\n                }\n              });\n            }\n          });\n        } else if (_windows) {\n          try {\n            util.wmic('process get /value').then((stdout, error) => {\n              if (!error) {\n                let processSections = stdout.split(/\\n\\s*\\n/);\n                let procs = [];\n                let procStats = [];\n                let list_new = {};\n                let allcpuu = 0;\n                let allcpus = 0;\n                for (let i = 0; i < processSections.length; i++) {\n                  if (processSections[i].trim() !== '') {\n                    let lines = processSections[i].trim().split('\\r\\n');\n                    let pid = parseInt(util.getValue(lines, 'ProcessId', '=', true), 10);\n                    let parentPid = parseInt(util.getValue(lines, 'ParentProcessId', '=', true), 10);\n                    let statusValue = util.getValue(lines, 'ExecutionState', '=');\n                    let name = util.getValue(lines, 'Caption', '=', true);\n                    let commandLine = util.getValue(lines, 'CommandLine', '=', true);\n                    let commandPath = util.getValue(lines, 'ExecutablePath', '=', true);\n                    let utime = parseInt(util.getValue(lines, 'UserModeTime', '=', true), 10);\n                    let stime = parseInt(util.getValue(lines, 'KernelModeTime', '=', true), 10);\n                    let mem = parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10);\n                    allcpuu = allcpuu + utime;\n                    allcpus = allcpus + stime;\n                    result.all++;\n                    if (!statusValue) { result.unknown++; }\n                    if (statusValue === '3') { result.running++; }\n                    if (statusValue === '4' || statusValue === '5') { result.blocked++; }\n\n                    procStats.push({\n                      pid: pid,\n                      utime: utime,\n                      stime: stime,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0,\n                    });\n                    procs.push({\n                      pid: pid,\n                      parentPid: parentPid,\n                      name: name,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0,\n                      pmem: mem / os.totalmem() * 100,\n                      priority: parseInt(util.getValue(lines, 'Priority', '=', true), 10),\n                      mem_vsz: parseInt(util.getValue(lines, 'PageFileUsage', '=', true), 10),\n                      mem_rss: Math.floor(parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10) / 1024),\n                      nice: 0,\n                      started: parseTimeWin(util.getValue(lines, 'CreationDate', '=', true)),\n                      state: (!statusValue ? _winStatusValues[0] : _winStatusValues[statusValue]),\n                      tty: '',\n                      user: '',\n                      command: commandLine || name,\n                      path: commandPath,\n                      params: ''\n                    });\n                  }\n                }\n                result.sleeping = result.all - result.running - result.blocked - result.unknown;\n                result.list = procs;\n                for (let i = 0; i < procStats.length; i++) {\n                  let resultProcess = calcProcStatWin(procStats[i], allcpuu + allcpus, _processes_cpu);\n\n                  // store pcpu in outer array\n                  let listPos = result.list.map(function (e) { return e.pid; }).indexOf(resultProcess.pid);\n                  if (listPos >= 0) {\n                    result.list[listPos].pcpu = resultProcess.pcpuu + resultProcess.pcpus;\n                    result.list[listPos].pcpuu = resultProcess.pcpuu;\n                    result.list[listPos].pcpus = resultProcess.pcpus;\n                  }\n\n                  // save new values\n                  list_new[resultProcess.pid] = {\n                    pcpuu: resultProcess.pcpuu,\n                    pcpus: resultProcess.pcpus,\n                    utime: resultProcess.utime,\n                    stime: resultProcess.stime\n                  };\n                }\n                // store old values\n                _processes_cpu.all = allcpuu + allcpus;\n                // _processes_cpu.list = list_new;\n                _processes_cpu.list = Object.assign({}, list_new);\n                _processes_cpu.ms = Date.now() - _processes_cpu.ms;\n                // _processes_cpu.result = result;\n                _processes_cpu.result = Object.assign({}, result);\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n          } catch (e) {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      } else {\n        if (callback) { callback(_processes_cpu.result); }\n        resolve(_processes_cpu.result);\n      }\n    });\n  });\n}\n\nexports.processes = processes;\n\n// --------------------------\n// PS - process load\n// get detailed information about a certain process\n// (PID, CPU-Usage %, Mem-Usage %)\n\nfunction processLoad(proc, callback) {\n\n  // fallback - if only callback is given\n  if (util.isFunction(proc) && !callback) {\n    callback = proc;\n    proc = '';\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      const procSanitized = util.isPrototypePolluted() ? '' : util.sanitizeShellString(proc);\n\n      let result = {\n        'proc': procSanitized,\n        'pid': -1,\n        'cpu': 0,\n        'mem': 0\n      };\n\n      if (procSanitized) {\n        if (_windows) {\n          try {\n            util.wmic('process get /value').then((stdout, error) => {\n              if (!error) {\n                let processSections = stdout.split(/\\n\\s*\\n/);\n                let procStats = [];\n                let list_new = {};\n                let allcpuu = 0;\n                let allcpus = 0;\n                for (let i = 0; i < processSections.length; i++) {\n                  if (processSections[i].trim() !== '') {\n                    let lines = processSections[i].trim().split('\\r\\n');\n                    let pid = parseInt(util.getValue(lines, 'ProcessId', '=', true), 10);\n                    let name = util.getValue(lines, 'Caption', '=', true);\n                    let utime = parseInt(util.getValue(lines, 'UserModeTime', '=', true), 10);\n                    let stime = parseInt(util.getValue(lines, 'KernelModeTime', '=', true), 10);\n                    let mem = parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10);\n                    allcpuu = allcpuu + utime;\n                    allcpus = allcpus + stime;\n\n                    procStats.push({\n                      pid: pid,\n                      utime: utime,\n                      stime: stime,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0,\n                    });\n                    if (name.toLowerCase().indexOf(procSanitized.toLowerCase()) >= 0) {\n                      if (result.pid === -1) {\n                        result = {\n                          proc: name,\n                          pid: pid,\n                          pids: [pid],\n                          cpu: 0,\n                          mem: mem / os.totalmem() * 100\n                        };\n                      } else {\n                        result.pids.push(pid);\n                        result.mem += mem / os.totalmem() * 100;\n                      }\n                    }\n                  }\n                }\n                for (let i = 0; i < procStats.length; i++) {\n                  let resultProcess = calcProcStatWin(procStats[i], allcpuu + allcpus, _process_cpu);\n\n                  // store pcpu in outer array\n                  if (result && result.pids && result.pids.length > 0) {\n                    let listPos = result.pids.indexOf(resultProcess.pid);\n                    if (listPos >= 0) {\n                      result.cpu = resultProcess.pcpuu + resultProcess.pcpus;\n                    }\n                  }\n\n                  // save new values\n                  list_new[resultProcess.pid] = {\n                    pcpuu: resultProcess.pcpuu,\n                    pcpus: resultProcess.pcpus,\n                    utime: resultProcess.utime,\n                    stime: resultProcess.stime\n                  };\n                }\n                // store old values\n                _process_cpu.all = allcpuu + allcpus;\n                // _process_cpu.list = list_new;\n                _process_cpu.list = Object.assign({}, list_new);\n                _process_cpu.ms = Date.now() - _process_cpu.ms;\n                // _process_cpu.result = result;\n                _process_cpu.result = Object.assign({}, result);\n                if (callback) {\n                  callback(result);\n                }\n                resolve(result);\n              }\n            });\n          } catch (e) {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        }\n\n        if (_darwin || _linux) {\n          exec('ps -axo pid,pcpu,pmem,comm | grep -i ' + procSanitized + ' | grep -v grep', { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n\n              let pid = 0;\n              let pids = [];\n              let cpu = 0;\n              let mem = 0;\n\n              lines.forEach(function (line) {\n                let data = line.trim().replace(/ +/g, ' ').split(' ');\n                if (data.length > 3) {\n                  pid = (!pid ? parseInt(data[0]) : 0);\n                  pids.push(parseInt(data[0], 10));\n                  cpu = cpu + parseFloat(data[1].replace(',', '.'));\n                  mem = mem + parseFloat(data[2].replace(',', '.'));\n                }\n              });\n\n              result = {\n                'proc': procSanitized,\n                'pid': pid,\n                'pids': pids,\n                'cpu': parseFloat((cpu / lines.length).toFixed(2)),\n                'mem': parseFloat((mem / lines.length).toFixed(2))\n              };\n              if (_linux) {\n                // calc process_cpu - ps is not accurate in linux!\n                let cmd = 'cat /proc/stat | grep \"cpu \"';\n                for (let i = 0; i < result.pids.length; i++) {\n                  cmd += (';cat /proc/' + result.pids[i] + '/stat');\n                }\n\n                exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                  let curr_processes = stdout.toString().split('\\n');\n\n                  // first line (all - /proc/stat)\n                  let all = parseProcStat(curr_processes.shift());\n\n                  // process\n                  let list_new = {};\n                  let resultProcess = {};\n                  result.cpu = 0;\n                  for (let i = 0; i < curr_processes.length; i++) {\n                    resultProcess = calcProcStatLinux(curr_processes[i], all, _process_cpu);\n\n                    if (resultProcess.pid) {\n\n                      // store pcpu in outer result\n                      result.cpu += resultProcess.pcpuu + resultProcess.pcpus;\n\n                      // save new values\n                      list_new[resultProcess.pid] = {\n                        pcpuu: resultProcess.pcpuu,\n                        pcpus: resultProcess.pcpus,\n                        utime: resultProcess.utime,\n                        stime: resultProcess.stime,\n                        cutime: resultProcess.cutime,\n                        cstime: resultProcess.cstime\n                      };\n                    }\n                  }\n\n                  result.cpu = Math.round(result.cpu * 100) / 100;\n\n                  _process_cpu.all = all;\n                  // _process_cpu.list = list_new;\n                  _process_cpu.list = Object.assign({}, list_new);\n                  _process_cpu.ms = Date.now() - _process_cpu.ms;\n                  // _process_cpu.result = result;\n                  _process_cpu.result = Object.assign({}, result);\n                  if (callback) { callback(result); }\n                  resolve(result);\n                });\n              } else {\n                if (callback) { callback(result); }\n                resolve(result);\n              }\n            } else {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          });\n        }\n      }\n    });\n  });\n}\n\nexports.processLoad = processLoad;\n", "'use strict';\n// @ts-check\n// ==================================================================================\n// utils.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 0. helper functions\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst fs = require('fs');\nconst spawn = require('child_process').spawn;\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\nconst util = require('util');\n\nlet _platform = process.platform;\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\n// const _sunos = (_platform === 'sunos');\n\nlet _cores = 0;\nlet wmicPath = '';\nlet codepage = '';\n\nconst execOptsWin = {\n  windowsHide: true,\n  maxBuffer: 1024 * 20000,\n  encoding: 'UTF-8',\n  env: util._extend({}, process.env, { LANG: 'en_US.UTF-8' })\n};\n\nfunction toInt(value) {\n  let result = parseInt(value, 10);\n  if (isNaN(result)) {\n    result = 0;\n  }\n  return result;\n}\n\n\nconst stringReplace = new String().replace;\nconst stringToLower = new String().toLowerCase;\nconst stringToString = new String().toString;\nconst stringSubstr = new String().substr;\nconst stringTrim = new String().trim;\n\nfunction isFunction(functionToCheck) {\n  let getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\nfunction unique(obj) {\n  let uniques = [];\n  let stringify = {};\n  for (let i = 0; i < obj.length; i++) {\n    let keys = Object.keys(obj[i]);\n    keys.sort(function (a, b) { return a - b; });\n    let str = '';\n    for (let j = 0; j < keys.length; j++) {\n      str += JSON.stringify(keys[j]);\n      str += JSON.stringify(obj[i][keys[j]]);\n    }\n    if (!{}.hasOwnProperty.call(stringify, str)) {\n      uniques.push(obj[i]);\n      stringify[str] = true;\n    }\n  }\n  return uniques;\n}\n\nfunction sortByKey(array, keys) {\n  return array.sort(function (a, b) {\n    let x = '';\n    let y = '';\n    keys.forEach(function (key) {\n      x = x + a[key]; y = y + b[key];\n    });\n    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n  });\n}\n\nfunction cores() {\n  if (_cores === 0) {\n    _cores = os.cpus().length;\n  }\n  return _cores;\n}\n\nfunction getValue(lines, property, separator, trimmed) {\n  separator = separator || ':';\n  property = property.toLowerCase();\n  trimmed = trimmed || false;\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i].toLowerCase().replace(/\\t/g, '');\n    if (trimmed) {\n      line = line.trim();\n    }\n    if (line.startsWith(property)) {\n      const parts = lines[i].split(separator);\n      if (parts.length >= 2) {\n        parts.shift();\n        return parts.join(separator).trim();\n      } else {\n        return '';\n      }\n    }\n  }\n  return '';\n}\n\nfunction decodeEscapeSequence(str, base) {\n  base = base || 16;\n  return str.replace(/\\\\x([0-9A-Fa-f]{2})/g, function () {\n    return String.fromCharCode(parseInt(arguments[1], base));\n  });\n}\n\nfunction detectSplit(str) {\n  let seperator = '';\n  let part = 0;\n  str.split('').forEach(element => {\n    if (element >= '0' && element <= '9') {\n      if (part === 1) { part++; }\n    } else {\n      if (part === 0) { part++; }\n      if (part === 1) {\n        seperator += element;\n      }\n    }\n  });\n  return seperator;\n}\n\nfunction parseTime(t, pmDesignator) {\n  pmDesignator = pmDesignator || '';\n  t = t.toUpperCase();\n  let hour = 0;\n  let min = 0;\n  let splitter = detectSplit(t);\n  let parts = t.split(splitter);\n  if (parts.length >= 2) {\n    if (parts[2]) {\n      parts[1] += parts[2];\n    }\n    let isPM = (parts[1] && (parts[1].toLowerCase().indexOf('pm') > -1) || (parts[1].toLowerCase().indexOf('p.m.') > -1) || (parts[1].toLowerCase().indexOf('p. m.') > -1) || (parts[1].toLowerCase().indexOf('n') > -1) || (parts[1].toLowerCase().indexOf('ch') > -1) || (parts[1].toLowerCase().indexOf('\u00f6s') > -1) || (pmDesignator && parts[1].toLowerCase().indexOf(pmDesignator) > -1));\n    hour = parseInt(parts[0], 10);\n    min = parseInt(parts[1], 10);\n    hour = isPM && hour < 12 ? hour + 12 : hour;\n    return ('0' + hour).substr(-2) + ':' + ('0' + min).substr(-2);\n  }\n}\n\nfunction parseDateTime(dt, culture) {\n  const result = {\n    date: '',\n    time: ''\n  };\n  culture = culture || {};\n  let dateFormat = (culture.dateFormat || '').toLowerCase();\n  let pmDesignator = (culture.pmDesignator || '');\n\n  const parts = dt.split(' ');\n  if (parts[0]) {\n    if (parts[0].indexOf('/') >= 0) {\n      // Dateformat: mm/dd/yyyy or dd/mm/yyyy or dd/mm/yy or yyyy/mm/dd\n      const dtparts = parts[0].split('/');\n      if (dtparts.length === 3) {\n        if (dtparts[0].length === 4) {\n          // Dateformat: yyyy/mm/dd\n          result.date = dtparts[0] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[2]).substr(-2);\n        } else if (dtparts[2].length === 2) {\n          if ((dateFormat.indexOf('/d/') > -1 || dateFormat.indexOf('/dd/') > -1)) {\n            // Dateformat: mm/dd/yy\n            result.date = '20' + dtparts[2] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[0]).substr(-2);\n          } else {\n            // Dateformat: dd/mm/yy\n            result.date = '20' + dtparts[2] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[0]).substr(-2);\n          }\n        } else {\n          // Dateformat: mm/dd/yyyy or dd/mm/yyyy\n          const isEN = ((dt.toLowerCase().indexOf('pm') > -1) || (dt.toLowerCase().indexOf('p.m.') > -1) || (dt.toLowerCase().indexOf('p. m.') > -1) || (dt.toLowerCase().indexOf('am') > -1) || (dt.toLowerCase().indexOf('a.m.') > -1) || (dt.toLowerCase().indexOf('a. m.') > -1));\n          if ((isEN || dateFormat.indexOf('/d/') > -1 || dateFormat.indexOf('/dd/') > -1) && dateFormat.indexOf('dd/') !== 0) {\n            // Dateformat: mm/dd/yyyy\n            result.date = dtparts[2] + '-' + ('0' + dtparts[0]).substr(-2) + '-' + ('0' + dtparts[1]).substr(-2);\n          } else {\n            // Dateformat: dd/mm/yyyy\n            result.date = dtparts[2] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[0]).substr(-2);\n          }\n        }\n      }\n    }\n    if (parts[0].indexOf('.') >= 0) {\n      const dtparts = parts[0].split('.');\n      if (dtparts.length === 3) {\n        if (dateFormat.indexOf('.d.') > -1 || dateFormat.indexOf('.dd.') > -1) {\n          // Dateformat: mm.dd.yyyy\n          result.date = dtparts[2] + '-' + ('0' + dtparts[0]).substr(-2) + '-' + ('0' + dtparts[1]).substr(-2);\n        } else {\n          // Dateformat: dd.mm.yyyy\n          result.date = dtparts[2] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[0]).substr(-2);\n        }\n      }\n    }\n    if (parts[0].indexOf('-') >= 0) {\n      // Dateformat: yyyy-mm-dd\n      const dtparts = parts[0].split('-');\n      if (dtparts.length === 3) {\n        result.date = dtparts[0] + '-' + ('0' + dtparts[1]).substr(-2) + '-' + ('0' + dtparts[2]).substr(-2);\n      }\n    }\n  }\n  if (parts[1]) {\n    parts.shift();\n    let time = parts.join(' ');\n    result.time = parseTime(time, pmDesignator);\n  }\n  return result;\n}\n\nfunction parseHead(head, rights) {\n  let space = (rights > 0);\n  let count = 1;\n  let from = 0;\n  let to = 0;\n  let result = [];\n  for (let i = 0; i < head.length; i++) {\n    if (count <= rights) {\n      // if (head[i] === ' ' && !space) {\n      if (/\\s/.test(head[i]) && !space) {\n        to = i - 1;\n        result.push({\n          from: from,\n          to: to + 1,\n          cap: head.substring(from, to + 1)\n        });\n        from = to + 2;\n        count++;\n      }\n      space = head[i] === ' ';\n    } else {\n      if (!/\\s/.test(head[i]) && space) {\n        to = i - 1;\n        if (from < to) {\n          result.push({\n            from: from,\n            to: to,\n            cap: head.substring(from, to)\n          });\n        }\n        from = to + 1;\n        count++;\n      }\n      space = head[i] === ' ';\n    }\n  }\n  to = 1000;\n  result.push({\n    from: from,\n    to: to,\n    cap: head.substring(from, to)\n  });\n  let len = result.length;\n  for (var i = 0; i < len; i++) {\n    if (result[i].cap.replace(/\\s/g, '').length === 0) {\n      if (i + 1 < len) {\n        result[i].to = result[i + 1].to;\n        result[i].cap = result[i].cap + result[i + 1].cap;\n        result.splice(i + 1, 1);\n        len = len - 1;\n      }\n    }\n  }\n  return result;\n}\n\nfunction findObjectByKey(array, key, value) {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i][key] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction getWmic() {\n  if (os.type() === 'Windows_NT' && !wmicPath) {\n    wmicPath = process.env.WINDIR + '\\\\system32\\\\wbem\\\\wmic.exe';\n    if (!fs.existsSync(wmicPath)) {\n      try {\n        const wmicPathArray = execSync('WHERE WMIC').toString().split('\\r\\n');\n        if (wmicPathArray && wmicPathArray.length) {\n          wmicPath = wmicPathArray[0];\n        } else {\n          wmicPath = 'wmic';\n        }\n      } catch (e) {\n        wmicPath = 'wmic';\n      }\n    }\n  }\n  return wmicPath;\n}\n\nfunction wmic(command, options) {\n  options = options || execOptsWin;\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      try {\n        exec(process.env.WINDIR + '\\\\system32\\\\chcp.com 65001 | ' + getWmic() + ' ' + command, options, function (error, stdout) {\n          resolve(stdout, error);\n        }).stdin.end();\n      } catch (e) {\n        resolve('', e);\n      }\n    });\n  });\n}\n\nfunction getVboxmanage() {\n  return _windows ? process.env.VBOX_INSTALL_PATH || process.env.VBOX_MSI_INSTALL_PATH + '\\\\VBoxManage.exe' + '\" ' : 'vboxmanage';\n}\n\nfunction powerShell(cmd) {\n\n  let result = '';\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      try {\n        const child = spawn('powershell.exe', ['-NoLogo', '-InputFormat', 'Text', '-NoExit', '-ExecutionPolicy', 'Unrestricted', '-Command', '-'], {\n          stdio: 'pipe',\n          windowsHide: true,\n          maxBuffer: 1024 * 20000,\n          encoding: 'UTF-8',\n          env: util._extend({}, process.env, { LANG: 'en_US.UTF-8' })\n        });\n\n        if (child && !child.pid) {\n          child.on('error', function () {\n            resolve(result);\n          });\n        }\n        if (child && child.pid) {\n          child.stdout.on('data', function (data) {\n            result = result + data.toString('utf8');\n          });\n          child.stderr.on('data', function () {\n            child.kill();\n            resolve(result);\n          });\n          child.on('close', function () {\n            child.kill();\n            resolve(result);\n          });\n          child.on('error', function () {\n            child.kill();\n            resolve(result);\n          });\n          try {\n            child.stdin.write(cmd + os.EOL);\n            child.stdin.write('exit' + os.EOL);\n            child.stdin.end();\n          } catch (e) {\n            child.kill();\n            resolve(result);\n          }\n        } else {\n          resolve(result);\n        }\n      } catch (e) {\n        resolve(result);\n      }\n    });\n  });\n}\n\nfunction getCodepage() {\n  if (_windows) {\n    if (!codepage) {\n      try {\n        const stdout = execSync('chcp');\n        const lines = stdout.toString().split('\\r\\n');\n        const parts = lines[0].split(':');\n        codepage = parts.length > 1 ? parts[1].replace('.', '') : '';\n      } catch (err) {\n        codepage = '437';\n      }\n    }\n    return codepage;\n  }\n  if (_linux || _darwin || _freebsd || _openbsd || _netbsd) {\n    if (!codepage) {\n      try {\n        const stdout = execSync('echo $LANG');\n        const lines = stdout.toString().split('\\r\\n');\n        const parts = lines[0].split('.');\n        codepage = parts.length > 1 ? parts[1].trim() : '';\n        if (!codepage) {\n          codepage = 'UTF-8';\n        }\n      } catch (err) {\n        codepage = 'UTF-8';\n      }\n    }\n    return codepage;\n  }\n}\n\nfunction isRaspberry() {\n  const PI_MODEL_NO = [\n    'BCM2708',\n    'BCM2709',\n    'BCM2710',\n    'BCM2835',\n    'BCM2837B0'\n  ];\n  let cpuinfo = [];\n  try {\n    cpuinfo = fs.readFileSync('/proc/cpuinfo', { encoding: 'utf8' }).split('\\n');\n  } catch (e) {\n    return false;\n  }\n  const hardware = getValue(cpuinfo, 'hardware');\n  return (hardware && PI_MODEL_NO.indexOf(hardware) > -1);\n}\n\nfunction isRaspbian() {\n  let osrelease = [];\n  try {\n    osrelease = fs.readFileSync('/etc/os-release', { encoding: 'utf8' }).split('\\n');\n  } catch (e) {\n    return false;\n  }\n  const id = getValue(osrelease, 'id');\n  return (id && id.indexOf('raspbian') > -1);\n}\n\nfunction execWin(cmd, opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = execOptsWin;\n  }\n  let newCmd = 'chcp 65001 > nul && cmd /C ' + cmd + ' && chcp ' + codepage + ' > nul';\n  exec(newCmd, opts, function (error, stdout) {\n    callback(error, stdout);\n  });\n}\n\nfunction darwinXcodeExists() {\n  const cmdLineToolsExists = fs.existsSync('/Library/Developer/CommandLineTools/usr/bin/');\n  const xcodeAppExists = fs.existsSync('/Applications/Xcode.app/Contents/Developer/Tools');\n  const xcodeExists = fs.existsSync('/Library/Developer/Xcode/');\n  return (cmdLineToolsExists || xcodeExists || xcodeAppExists);\n}\n\nfunction nanoSeconds() {\n  const time = process.hrtime();\n  if (!Array.isArray(time) || time.length !== 2) {\n    return 0;\n  }\n  return +time[0] * 1e9 + +time[1];\n}\n\nfunction countUniqueLines(lines, startingWith) {\n  startingWith = startingWith || '';\n  const uniqueLines = [];\n  lines.forEach(line => {\n    if (line.startsWith(startingWith)) {\n      if (uniqueLines.indexOf(line) === -1) {\n        uniqueLines.push(line);\n      }\n    }\n  });\n  return uniqueLines.length;\n}\n\nfunction countLines(lines, startingWith) {\n  startingWith = startingWith || '';\n  const uniqueLines = [];\n  lines.forEach(line => {\n    if (line.startsWith(startingWith)) {\n      uniqueLines.push(line);\n    }\n  });\n  return uniqueLines.length;\n}\n\nfunction sanitizeShellString(str) {\n  const s = str || '';\n  let result = '';\n  for (let i = 0; i <= 2000; i++) {\n    if (!(s[i] === undefined ||\n      s[i] === '>' ||\n      s[i] === '<' ||\n      s[i] === '*' ||\n      s[i] === '?' ||\n      s[i] === '[' ||\n      s[i] === ']' ||\n      s[i] === '|' ||\n      s[i] === '\u02da' ||\n      s[i] === '$' ||\n      s[i] === ';' ||\n      s[i] === '&' ||\n      s[i] === '(' ||\n      s[i] === ')' ||\n      s[i] === ']' ||\n      s[i] === '#' ||\n      s[i] === '\\\\' ||\n      s[i] === '\\t' ||\n      s[i] === '\\n' ||\n      s[i] === '\"')) {\n      result = result + s[i];\n    }\n  }\n  return result;\n}\n\nfunction isPrototypePolluted() {\n  const s = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let notPolluted = true;\n  let st = '';\n\n  st.__proto__.replace = stringReplace;\n  st.__proto__.toLowerCase = stringToLower;\n  st.__proto__.toString = stringToString;\n  st.__proto__.substr = stringSubstr;\n\n  notPolluted = notPolluted || !(s.length === 62)\n  const ms = Date.now();\n  if (typeof ms === 'number' && ms > 1600000000000) {\n    const l = ms % 100 + 15;\n    for (let i = 0; i < l; i++) {\n      const r = Math.random() * 61.99999999 + 1;\n      const rs = parseInt(Math.floor(r).toString(), 10)\n      const rs2 = parseInt(r.toString().split('.')[0], 10);\n      const q = Math.random() * 61.99999999 + 1;\n      const qs = parseInt(Math.floor(q).toString(), 10)\n      const qs2 = parseInt(q.toString().split('.')[0], 10);\n      notPolluted = notPolluted && !(r === q);\n      notPolluted = notPolluted && rs === rs2 && qs === qs2;\n      st += s[rs - 1];\n    }\n    notPolluted = notPolluted && st.length === l;\n    // string manipulation\n    let p = Math.random() * l * 0.9999999999;\n    let stm = st.substr(0, p) + ' ' + st.substr(p, 2000);\n    stm.__proto__.replace = stringReplace;\n    let sto = stm.replace(/ /g, '');\n    notPolluted = notPolluted && st === sto;\n    p = Math.random() * l * 0.9999999999;\n    stm = st.substr(0, p) + '{' + st.substr(p, 2000);\n    sto = stm.replace(/{/g, '');\n    notPolluted = notPolluted && st === sto;\n    p = Math.random() * l * 0.9999999999;\n    stm = st.substr(0, p) + '*' + st.substr(p, 2000);\n    sto = stm.replace(/\\*/g, '');\n    notPolluted = notPolluted && st === sto;\n    p = Math.random() * l * 0.9999999999;\n    stm = st.substr(0, p) + '$' + st.substr(p, 2000);\n    sto = stm.replace(/\\$/g, '');\n    notPolluted = notPolluted && st === sto;\n\n    // lower\n    const stl = st.toLowerCase();\n    notPolluted = notPolluted && (stl.length === l) && stl[l - 1] && !(stl[l])\n    for (let i = 0; i < l; i++) {\n      const s1 = st[i];\n      s1.__proto__.toLowerCase = stringToLower;\n      const s2 = stl ? stl[i] : '';\n      const s1l = s1.toLowerCase();\n      notPolluted = notPolluted && s1l[0] === s2 && s1l[0] && !(s1l[1]);\n    }\n  }\n  return !notPolluted;\n}\n\nfunction hex2bin(hex) {\n  return (\"00000000\" + (parseInt(hex, 16)).toString(2)).substr(-8);\n}\n\nfunction decodePiCpuinfo(lines) {\n\n  // https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md\n\n  const oldRevisionCodes = {\n    '0002': {\n      type: 'B',\n      revision: '1.0',\n      memory: 256,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '0003': {\n      type: 'B',\n      revision: '1.0',\n      memory: 256,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '0004': {\n      type: 'B',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '0005': {\n      type: 'B',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Qisda',\n      processor: 'BCM2835'\n    },\n    '0006': {\n      type: 'B',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '0007': {\n      type: 'A',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '0008': {\n      type: 'A',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '0009': {\n      type: 'A',\n      revision: '2.0',\n      memory: 256,\n      manufacturer: 'Qisda',\n      processor: 'BCM2835'\n    },\n    '000d': {\n      type: 'B',\n      revision: '2.0',\n      memory: 512,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '000e': {\n      type: 'B',\n      revision: '2.0',\n      memory: 512,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '000f': {\n      type: 'B',\n      revision: '2.0',\n      memory: 512,\n      manufacturer: 'Egoman',\n      processor: 'BCM2835'\n    },\n    '0010': {\n      type: 'B+',\n      revision: '1.2',\n      memory: 512,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '0011': {\n      type: 'CM1',\n      revision: '1.0',\n      memory: 512,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '0012': {\n      type: 'A+',\n      revision: '1.1',\n      memory: 256,\n      manufacturer: 'Sony UK',\n      processor: 'BCM2835'\n    },\n    '0013': {\n      type: 'B+',\n      revision: '1.2',\n      memory: 512,\n      manufacturer: 'Embest',\n      processor: 'BCM2835'\n    },\n    '0014': {\n      type: 'CM1',\n      revision: '1.0',\n      memory: 512,\n      manufacturer: 'Embest',\n      processor: 'BCM2835'\n    },\n    '0015': {\n      type: 'A+',\n      revision: '1.1',\n      memory: 256,\n      manufacturer: '512MB\tEmbest',\n      processor: 'BCM2835'\n    }\n  }\n\n  const processorList = [\n    'BMC2835',\n    'BMC2836',\n    'BMC2837',\n    'BMC2711',\n  ];\n  const manufacturerList = [\n    'Sony UK',\n    'Egoman',\n    'Embest',\n    'Sony Japan',\n    'Embest',\n    'Stadium'\n  ];\n  const typeList = {\n    '00': 'A',\n    '01': 'B',\n    '02': 'A+',\n    '03': 'B+',\n    '04': '2B',\n    '05': 'Alpha (early prototype)',\n    '06': 'CM1',\n    '08': '3B',\n    '09': 'Zero',\n    '0a': 'CM3',\n    '0c': 'Zero W',\n    '0d': '3B+',\n    '0e': '3A+',\n    '0f': 'Internal use only',\n    '10': 'CM3+',\n    '11': '4B',\n    '13': '400',\n    '14': 'CM4'\n  };\n\n  const revisionCode = getValue(lines, 'revision', ':', true);\n  const model = getValue(lines, 'model:', ':', true);\n  const serial = getValue(lines, 'serial', ':', true);\n\n  let result = {};\n  if (oldRevisionCodes.hasOwnProperty(revisionCode)) {\n    // old revision codes\n    result = {\n      model,\n      serial,\n      revisionCode,\n      memory: oldRevisionCodes[revisionCode].memory,\n      manufacturer: oldRevisionCodes[revisionCode].manufacturer,\n      processor: oldRevisionCodes[revisionCode].processor,\n      type: oldRevisionCodes[revisionCode].type,\n      revision: oldRevisionCodes[revisionCode].revision,\n    }\n\n  } else {\n    // new revision code\n    const revision = ('00000000' + getValue(lines, 'revision', ':', true).toLowerCase()).substr(-8);\n    // const revisionStyleNew = hex2bin(revision.substr(2, 1)).substr(4, 1) === '1';\n    const memSizeCode = parseInt(hex2bin(revision.substr(2, 1)).substr(5, 3), 2) || 0;\n    const manufacturer = manufacturerList[parseInt(revision.substr(3, 1), 10)];\n    const processor = processorList[parseInt(revision.substr(4, 1), 10)];\n    const typeCode = revision.substr(5, 2);\n\n\n    result = {\n      model,\n      serial,\n      revisionCode,\n      memory: 256 * Math.pow(2, memSizeCode),\n      manufacturer,\n      processor,\n      type: typeList.hasOwnProperty(typeCode) ? typeList[typeCode] : '',\n      revision: '1.' + revision.substr(7, 1),\n    }\n  }\n  return result;\n}\n\nfunction noop() { }\n\nexports.toInt = toInt;\nexports.execOptsWin = execOptsWin;\nexports.getCodepage = getCodepage;\nexports.execWin = execWin;\nexports.isFunction = isFunction;\nexports.unique = unique;\nexports.sortByKey = sortByKey;\nexports.cores = cores;\nexports.getValue = getValue;\nexports.decodeEscapeSequence = decodeEscapeSequence;\nexports.parseDateTime = parseDateTime;\nexports.parseHead = parseHead;\nexports.findObjectByKey = findObjectByKey;\nexports.getWmic = getWmic;\nexports.wmic = wmic;\nexports.darwinXcodeExists = darwinXcodeExists;\nexports.getVboxmanage = getVboxmanage;\nexports.powerShell = powerShell;\nexports.nanoSeconds = nanoSeconds;\nexports.countUniqueLines = countUniqueLines;\nexports.countLines = countLines;\nexports.noop = noop;\nexports.isRaspberry = isRaspberry;\nexports.isRaspbian = isRaspbian;\nexports.sanitizeShellString = sanitizeShellString;\nexports.isPrototypePolluted = isPrototypePolluted;\nexports.decodePiCpuinfo = decodePiCpuinfo;\nexports.stringReplace = stringReplace;\nexports.stringToLower = stringToLower;\nexports.stringToString = stringToString;\nexports.stringSubstr = stringSubstr;\nexports.stringTrim = stringTrim;\n"], "filenames": ["CHANGELOG.md", "docs/history.html", "docs/index.html", "lib/index.js", "lib/internet.js", "lib/network.js", "lib/processes.js", "lib/util.js"], "buggy_code_start_loc": [32, 86, 171, 23, 42, 1043, 101, 49], "buggy_code_end_loc": [32, 86, 172, 26, 42, 1045, 102, 808], "fixing_code_start_loc": [33, 87, 171, 22, 43, 1043, 101, 50], "fixing_code_end_loc": [34, 92, 172, 22, 44, 1050, 113, 829], "type": "CWE-78", "message": "npm package systeminformation before version 4.30.5 is vulnerable to Prototype Pollution leading to Command Injection. The issue was fixed with a rewrite of shell sanitations to avoid prototyper pollution problems. The issue is fixed in version 4.30.5. If you cannot upgrade, be sure to check or sanitize service parameter strings that are passed to si.inetChecksite().", "other": {"cve": {"id": "CVE-2020-26245", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-27T20:15:10.963", "lastModified": "2020-12-03T20:12:40.647", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "npm package systeminformation before version 4.30.5 is vulnerable to Prototype Pollution leading to Command Injection. The issue was fixed with a rewrite of shell sanitations to avoid prototyper pollution problems. The issue is fixed in version 4.30.5. If you cannot upgrade, be sure to check or sanitize service parameter strings that are passed to si.inetChecksite()."}, {"lang": "es", "value": "npm package systeminformation anterior a versi\u00f3n 4.30.5, es vulnerable a una Contaminaci\u00f3n de Prototipos conllevando a una Inyecci\u00f3n de Comandos. El problema se solucion\u00f3 con una reescritura de saneamiento de shell para evitar problemas de contaminaci\u00f3n del prototipo. Este problema es corregido en la versi\u00f3n 4.30.5. Si no puede actualizar, aseg\u00farese de comprobar o sanear las cadenas de par\u00e1metros de servicio que son pasadas a la funci\u00f3n si.inetChecksite()"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.3}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-471"}, {"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:systeminformation:systeminformation:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "4.30.5", "matchCriteriaId": "DD6E1AF2-3DC2-4CAD-B3BF-5D90A7E34CDE"}]}]}], "references": [{"url": "https://github.com/sebhildebrandt/systeminformation/commit/8113ff0e87b2f422a5756c48f1057575e73af016", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/sebhildebrandt/systeminformation/security/advisories/GHSA-4v2w-h9jm-mqjg", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sebhildebrandt/systeminformation/commit/8113ff0e87b2f422a5756c48f1057575e73af016"}}