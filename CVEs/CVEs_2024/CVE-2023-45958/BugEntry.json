{"buggy_code": ["<?php\n/**\n * 2007-2016 PrestaShop\n *\n * thirty bees is an extension to the PrestaShop e-commerce software developed by PrestaShop SA\n * Copyright (C) 2017-2018 thirty bees\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@thirtybees.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.thirtybees.com for more information.\n *\n * @author    thirty bees <contact@thirtybees.com>\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2017-2018 thirty bees\n * @copyright 2007-2016 PrestaShop SA\n * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n *  PrestaShop is an internationally registered trademark & property of PrestaShop SA\n */\n\nuse Thirtybees\\Core\\Error\\ErrorUtils;\nuse Thirtybees\\Core\\Error\\Response\\JSendErrorResponse;\n\n/**\n * Class AdminControllerCore\n */\nclass AdminControllerCore extends Controller\n{\n    const LEVEL_VIEW = 1;\n    const LEVEL_EDIT = 2;\n    const LEVEL_ADD = 3;\n    const LEVEL_DELETE = 4;\n    const DEFAULT_VIEW_TEMPLATE = 'content.tpl';\n\n    // Cache file to make errors/warnings/informations/confirmations\n    // survive redirects.\n    const MESSAGE_CACHE_PATH = 'AdminControllerMessages.php';\n\n    /** @var string */\n    public static $currentIndex;\n    /** @var array Cache for translations */\n    public static $cache_lang = [];\n    /** @var string */\n    public $path;\n    /** @var string|string[] */\n    public $content;\n    /** @var array */\n    public $warnings = [];\n    /** @var array */\n    public $informations = [];\n    /** @var array */\n    public $confirmations = [];\n    /** @var string|false */\n    public $shopShareDatas = false;\n    /** @var array */\n    public $_languages = [];\n    /** @var int */\n    public $default_form_language;\n    /** @var int */\n    public $allow_employee_form_lang;\n    /** @var string */\n    public $layout = 'layout.tpl';\n    /** @var bool */\n    public $bootstrap = false;\n    /** @var string */\n    public $template = 'content.tpl';\n    /** @var string Associated table name */\n    public $table = 'configuration';\n    /** @var string */\n    public $list_id;\n    /** @var string Associated object class name */\n    public $className;\n    /** @var array */\n    public $tabAccess;\n    /** @var int Tab id */\n    public $id = -1;\n    /** @var bool */\n    public $required_database = false;\n    /** @var string Security token */\n    public $token;\n    /** @var string \"shop\" or \"group_shop\" */\n    public $shopLinkType;\n    /** @var array */\n    public $tpl_form_vars = [];\n    /** @var array */\n    public $tpl_list_vars = [];\n    /** @var array */\n    public $tpl_delete_link_vars = [];\n    /** @var array */\n    public $tpl_option_vars = [];\n    /** @var array */\n    public $tpl_view_vars = [];\n    /** @var array */\n    public $tpl_required_fields_vars = [];\n    /** @var string|null */\n    public $base_tpl_view = null;\n    /** @var string|null */\n    public $base_tpl_form = null;\n    /** @var bool If you want more fieldsets in the form */\n    public $multiple_fieldsets = false;\n    /** @var array */\n    public $fields_value = [];\n    /** @var bool Automatically join language table if true */\n    public $lang = false;\n    /** @var array Required_fields to display in the Required Fields form */\n    public $required_fields = [];\n    /** @var string */\n    public $tpl_folder;\n    /** @var string  */\n    public $override_folder;\n    /** @var array Name and directory where class image are located */\n    public $fieldImageSettings = [];\n    /** @var string Image type */\n    public $imageType = 'jpg';\n    /** @var string Current controller name without suffix */\n    public $controller_name;\n    /** @var int */\n    public $multishop_context = -1;\n    /** @var false */\n    public $multishop_context_group = true;\n    /** @var bool Bootstrap variable */\n    public $show_page_header_toolbar = false;\n    /** @var string Bootstrap variable */\n    public $page_header_toolbar_title;\n    /** @var array|Traversable Bootstrap variable */\n    public $page_header_toolbar_btn = [];\n    /** @var bool Bootstrap variable */\n    public $show_form_cancel_button;\n    /** @var string */\n    public $admin_webpath;\n    /** @var array */\n    public $modals = [];\n    /** @var array */\n    public $ajax_params = [];\n    /** @var string|array */\n    protected $meta_title = [];\n    /** @var string|false Object identifier inside the associated table */\n    protected $identifier = false;\n    /** @var string */\n    protected $identifier_name = 'name';\n    /** @var string Default ORDER BY clause when $_orderBy is not defined */\n    protected $_defaultOrderBy = false;\n    /** @var string */\n    protected $_defaultOrderWay = 'ASC';\n    /** @var bool Define if the header of the list contains filter and sorting links or not */\n    protected $list_simple_header;\n    /** @var array List to be generated */\n    protected $fields_list;\n    /** @var array Modules list filters */\n    protected $filter_modules_list = null;\n    /** @var array Modules list filters */\n    protected $modules_list = [];\n    /** @var array Edit form to be generated */\n    protected $fields_form;\n    /** @var array Override of $fields_form */\n    protected $fields_form_override;\n    /** @var string Override form action */\n    protected $submit_action;\n    /** @var array List of option forms to be generated */\n    protected $fields_options = [];\n    /** @var string */\n    protected $shopLink;\n    /** @var string SQL query */\n    protected $_listsql = '';\n    /** @var array Cache for query results */\n    protected $_list = [];\n    /** @var string|null */\n    protected $_list_error;\n    /** @var string|array Toolbar title */\n    protected $toolbar_title;\n    /** @var array List of toolbar buttons */\n    protected $toolbar_btn = null;\n    /** @var bool Scrolling toolbar */\n    protected $toolbar_scroll = true;\n    /** @var bool Set to false to hide toolbar and page title */\n    protected $show_toolbar = true;\n    /** @var bool Set to true to show toolbar and page title for options */\n    protected $show_toolbar_options = false;\n    /** @var int Number of results in list */\n    protected $_listTotal = 0;\n    /** @var string|false WHERE clause determined by filter fields */\n    protected $_filter;\n    /** @var string */\n    protected $_filterHaving;\n    /** @var array Temporary SQL table WHERE clause determined by filter fields */\n    protected $_tmpTableFilter = '';\n    /** @var array Number of results in list per page (used in select field) */\n    protected $_pagination = [20, 50, 100, 300, 1000];\n    /** @var int Default number of results in list per page */\n    protected $_default_pagination = 50;\n    /** @var string ORDER BY clause determined by field/arrows in list header */\n    protected $_orderBy;\n    /** @var string Order way (ASC, DESC) determined by arrows in list header */\n    protected $_orderWay;\n    /** @var array List of available actions for each list row - default actions are view, edit, delete, duplicate */\n    protected $actions_available = ['view', 'edit', 'duplicate', 'delete'];\n    /** @var array List of required actions for each list row */\n    protected $actions = [];\n    /** @var array List of row ids associated with a given action for witch this action have to not be available */\n    protected $list_skip_actions = [];\n    /* @var bool Don't show header & footer */\n    protected $lite_display = false;\n    /** @var bool List content lines are clickable if true */\n    protected $list_no_link = false;\n    /** @var bool */\n    protected $allow_export = false;\n    /** @var HelperList */\n    protected $helper;\n    /**\n     * Actions to execute on multiple selections.\n     *\n     * Usage:\n     *\n     * [\n     *      'actionName'    => [\n     *      'text'          => $this->l('Message displayed on the submit button (mandatory)'),\n     *      'confirm'       => $this->l('If set, this confirmation message will pop-up (optional)')),\n     *      'anotherAction' => [...]\n     * ];\n     *\n     * If your action is named 'actionName', you need to have a method named bulkactionName() that will be executed when the button is clicked.\n     *\n     * @var array\n     */\n    protected $bulk_actions;\n    /* @var array Ids of the rows selected */\n    protected $boxes;\n    /** @var string Do not automatically select * anymore but select only what is necessary */\n    protected $explicitSelect = false;\n    /** @var string Add fields into data query to display list */\n    protected $_select;\n    /** @var string Join tables into data query to display list */\n    protected $_join;\n    /** @var string Add conditions into data query to display list */\n    protected $_where;\n    /** @var string Group rows into data query to display list */\n    protected $_group;\n    /** @var string Having rows into data query to display list */\n    protected $_having;\n    /** @var string Use SQL_CALC_FOUND_ROWS / FOUND_ROWS to count the number of records */\n    protected $_use_found_rows = true;\n    /** @var bool */\n    protected $is_cms = false;\n    /** @var string Identifier to use for changing positions in lists (can be omitted if positions cannot be changed) */\n    protected $position_identifier;\n    /** @var string|int */\n    protected $position_group_identifier;\n    /** @var bool Table records are not deleted but marked as deleted if set to true */\n    protected $deleted = false;\n    /**  @var bool Is a list filter set */\n    protected $filter;\n    /** @var bool */\n    protected $noLink;\n    /** @var bool|string|null */\n    protected $specificConfirmDelete = null;\n    /** @var bool */\n    protected $colorOnBackground;\n    /** @var bool If true, activates color on hover */\n    protected $row_hover = true;\n    /** @var string Action to perform : 'edit', 'view', 'add', ... */\n    protected $action;\n    /** @var string */\n    protected $display;\n    /** @var bool */\n    protected $_includeContainer = true;\n    /** @var array */\n    protected $tab_modules_list = ['default_list' => [], 'slider_list' => []];\n    /** @var string */\n    protected $bo_theme;\n    /** @var bool Redirect or not after a creation */\n    protected $_redirect = true;\n    /** @var ObjectModel|null Instantiation of the class associated with the AdminController */\n    protected $object;\n    /** @var int Current object ID */\n    protected $id_object;\n    /** @var array Current breadcrumb position as an array of tab names */\n    protected $breadcrumbs;\n    /** @var array */\n    protected $list_natives_modules = [];\n    /** @var array */\n    protected $list_partners_modules = [];\n    /** @var bool if logged employee has access to AdminImport */\n    protected $can_import = false;\n    /** @var array */\n    protected $translationsTab = [];\n    /** @var bool $isThirtybeesUp */\n    public static $isThirtybeesUp = true;\n    /** @var float */\n    protected $timer_start;\n    /** @var string */\n    protected $bo_css;\n    /** @var array */\n    protected array $_conf = [];\n\n    /**\n     * If set to true, any exception throws in postProcess() phase will be converted to error message. Otherwise,\n     * exceptions will cause error page response\n     *\n     * @var bool\n     */\n    protected $postProcessHandleExceptions = true;\n\n    /**\n     * AdminControllerCore constructor.\n     *\n     * @throws PrestaShopException\n     */\n    public function __construct()\n    {\n        global $timer_start;\n        global $token;\n\n        $this->timer_start = $timer_start;\n\n        $messageCachePath = _PS_CACHE_DIR_.'/'.static::MESSAGE_CACHE_PATH\n                            .'-'.Tools::getValue('token');\n        if (is_readable($messageCachePath)) {\n            include $messageCachePath;\n            unlink($messageCachePath);\n        }\n\n        $this->controller_type = 'admin';\n        $this->controller_name = get_class($this);\n        if (strpos($this->controller_name, 'Controller')) {\n            $this->controller_name = substr($this->controller_name, 0, -10);\n        }\n        parent::__construct();\n\n        if ($this->multishop_context == -1) {\n            $this->multishop_context = Shop::CONTEXT_ALL | Shop::CONTEXT_GROUP | Shop::CONTEXT_SHOP;\n        }\n\n        $defaultThemeName = 'default';\n\n        if (defined('_PS_BO_DEFAULT_THEME_') && _PS_BO_DEFAULT_THEME_\n            && @filemtime(_PS_BO_ALL_THEMES_DIR_._PS_BO_DEFAULT_THEME_.DIRECTORY_SEPARATOR.'template')\n        ) {\n            $defaultThemeName = _PS_BO_DEFAULT_THEME_;\n        }\n\n        $this->bo_theme = ((Validate::isLoadedObject($this->context->employee)\n            && $this->context->employee->bo_theme) ? $this->context->employee->bo_theme : $defaultThemeName);\n\n        if (!@filemtime(_PS_BO_ALL_THEMES_DIR_.$this->bo_theme.DIRECTORY_SEPARATOR.'template')) {\n            $this->bo_theme = $defaultThemeName;\n        }\n\n        $this->bo_css = ((Validate::isLoadedObject($this->context->employee)\n            && $this->context->employee->bo_css) ? $this->context->employee->bo_css : 'admin-theme.css');\n\n        if (!@filemtime(_PS_BO_ALL_THEMES_DIR_.$this->bo_theme.DIRECTORY_SEPARATOR.'css'.DIRECTORY_SEPARATOR.$this->bo_css)) {\n            $this->bo_css = 'admin-theme.css';\n        }\n\n        $this->context->smarty->setTemplateDir(\n            [\n                _PS_BO_ALL_THEMES_DIR_.$this->bo_theme.DIRECTORY_SEPARATOR.'template',\n                _PS_OVERRIDE_DIR_.'controllers'.DIRECTORY_SEPARATOR.'admin'.DIRECTORY_SEPARATOR.'templates',\n            ]\n        );\n\n        $this->id = Tab::getIdFromClassName($this->controller_name);\n        $this->token = Tools::getAdminToken($this->controller_name.(int) $this->id.(int) $this->context->employee->id);\n\n        $token = $this->token;\n\n        $this->_conf = [\n            1  => $this->l('Successful deletion'),\n            2  => $this->l('The selection has been successfully deleted.'),\n            3  => $this->l('Successful creation'),\n            4  => $this->l('Successful update'),\n            5  => $this->l('The status has been successfully updated.'),\n            6  => $this->l('The settings have been successfully updated.'),\n            7  => $this->l('The image was successfully deleted.'),\n            8  => $this->l('The module was successfully downloaded.'),\n            9  => $this->l('The thumbnails were successfully regenerated.'),\n            10 => $this->l('The message was successfully sent to the customer.'),\n            11 => $this->l('Comment successfully added'),\n            12 => $this->l('Module(s) installed successfully.'),\n            13 => $this->l('Module(s) uninstalled successfully.'),\n            14 => $this->l('The translation was successfully copied.'),\n            15 => $this->l('The translations have been successfully added.'),\n            16 => $this->l('The module transplanted successfully to the hook.'),\n            17 => $this->l('The module was successfully removed from the hook.'),\n            18 => $this->l('Successful upload'),\n            19 => $this->l('Duplication was completed successfully.'),\n            20 => $this->l('The translation was added successfully, but the language has not been created.'),\n            21 => $this->l('Module reset successfully.'),\n            22 => $this->l('Module deleted successfully.'),\n            23 => $this->l('Localization pack imported successfully.'),\n            24 => $this->l('Localization pack imported successfully.'),\n            25 => $this->l('The selected images have successfully been moved.'),\n            26 => $this->l('Your cover image selection has been saved.'),\n            27 => $this->l('The image\\'s shop association has been modified.'),\n            28 => $this->l('A zone has been assigned to the selection successfully.'),\n            29 => $this->l('Successful upgrade'),\n            30 => $this->l('A partial refund was successfully created.'),\n            31 => $this->l('The discount was successfully generated.'),\n            32 => $this->l('Successfully signed in'),\n        ];\n\n        if (!$this->identifier) {\n            $this->identifier = 'id_'.$this->table;\n        }\n        if (!$this->_defaultOrderBy) {\n            $this->_defaultOrderBy = $this->identifier;\n        }\n        $this->tabAccess = Profile::getProfileAccess($this->context->employee->id_profile, $this->id);\n\n        if (!Shop::isFeatureActive()) {\n            $this->shopLinkType = '';\n        }\n\n        //$this->base_template_folder = _PS_BO_ALL_THEMES_DIR_.$this->bo_theme.'/template';\n        $this->override_folder = Tools::toUnderscoreCase(substr($this->controller_name, 5)).'/';\n        // Get the name of the folder containing the custom tpl files\n        $this->tpl_folder = Tools::toUnderscoreCase(substr($this->controller_name, 5)).'/';\n\n        $this->initShopContext();\n\n        $this->context->currency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n\n        $this->admin_webpath = str_ireplace(_PS_CORE_DIR_, '', _PS_ADMIN_DIR_);\n        $this->admin_webpath = preg_replace('/^'.preg_quote(DIRECTORY_SEPARATOR, '/').'/', '', $this->admin_webpath);\n\n        $this->can_import = $this->context->employee->hasAccess(AdminImportController::class, Profile::PERMISSION_VIEW);\n        $this->context->smarty->assign('can_import', $this->can_import);\n    }\n\n    /**\n     * Non-static method which uses AdminController::translate()\n     *\n     * @param string $string Term or expression in english\n     * @param string|null $class Name of the class\n     * @param bool $addslashes If set to true, the return value will pass through addslashes(). Otherwise, stripslashes().\n     * @param bool $htmlentities If set to true(default), the return value will pass through htmlentities($string, ENT_QUOTES, 'utf-8')\n     *\n     * @return string The translation if available, or the english default text.\n     */\n    protected function l($string, $class = null, $addslashes = false, $htmlentities = true)\n    {\n        if ($class === null || $class == 'AdminTab') {\n            $class = substr(get_class($this), 0, -10);\n        } elseif (strtolower(substr($class, -10)) == 'controller') {\n            /* classname has changed, from AdminXXX to AdminXXXController, so we remove 10 characters and we keep same keys */\n            $class = substr($class, 0, -10);\n        }\n\n        return Translate::getAdminTranslation($string, $class, $addslashes, $htmlentities);\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    public function initShopContext()\n    {\n        if (!$this->context->employee->isLoggedBack()) {\n            return;\n        }\n\n        // Change shop context ?\n        if (Shop::isFeatureActive() && Tools::getValue('setShopContext') !== false) {\n            $this->context->cookie->shopContext = Tools::getValue('setShopContext');\n            $url = parse_url($_SERVER['REQUEST_URI']);\n            $query = (isset($url['query'])) ? $url['query'] : '';\n            parse_str($query, $parseQuery);\n            unset($parseQuery['setShopContext'], $parseQuery['conf']);\n            $this->redirect_after = $url['path'].'?'.http_build_query($parseQuery, '', '&');\n        } elseif (!Shop::isFeatureActive()) {\n            $this->context->cookie->shopContext = 's-'.(int) Configuration::get('PS_SHOP_DEFAULT');\n        } elseif (Shop::getTotalShops(false, null) < 2) {\n            $this->context->cookie->shopContext = 's-'.(int) $this->context->employee->getDefaultShopID();\n        }\n\n        $idShop = '';\n        Shop::setContext(Shop::CONTEXT_ALL);\n        if ($this->context->cookie->shopContext) {\n            $split = explode('-', $this->context->cookie->shopContext);\n            if (count($split) == 2) {\n                if ($split[0] == 'g') {\n                    if ($this->context->employee->hasAuthOnShopGroup((int) $split[1])) {\n                        Shop::setContext(Shop::CONTEXT_GROUP, (int) $split[1]);\n                    } else {\n                        $idShop = (int) $this->context->employee->getDefaultShopID();\n                        Shop::setContext(Shop::CONTEXT_SHOP, $idShop);\n                    }\n                } elseif (Shop::getShop($split[1]) && $this->context->employee->hasAuthOnShop($split[1])) {\n                    $idShop = (int) $split[1];\n                    Shop::setContext(Shop::CONTEXT_SHOP, $idShop);\n                } else {\n                    $idShop = (int) $this->context->employee->getDefaultShopID();\n                    Shop::setContext(Shop::CONTEXT_SHOP, $idShop);\n                }\n            }\n        }\n\n        // Check multishop context and set right context if need\n        if (!($this->multishop_context & Shop::getContext())) {\n            if (Shop::getContext() == Shop::CONTEXT_SHOP && !($this->multishop_context & Shop::CONTEXT_SHOP)) {\n                Shop::setContext(Shop::CONTEXT_GROUP, Shop::getContextShopGroupID());\n            }\n            if (Shop::getContext() == Shop::CONTEXT_GROUP && !($this->multishop_context & Shop::CONTEXT_GROUP)) {\n                Shop::setContext(Shop::CONTEXT_ALL);\n            }\n        }\n\n        // Replace existing shop if necessary\n        if (!$idShop) {\n            $this->context->shop = new Shop((int) Configuration::get('PS_SHOP_DEFAULT'));\n        } elseif ($this->context->shop->id != $idShop) {\n            $this->context->shop = new Shop((int) $idShop);\n        }\n\n        if ($this->context->shop->id_theme != $this->context->theme->id) {\n            $this->context->theme = new Theme((int) $this->context->shop->id_theme);\n        }\n\n        // Replace current default country\n        $this->context->country = new Country((int) Configuration::get('PS_COUNTRY_DEFAULT'));\n    }\n\n    /**\n     * @return false|mixed\n     *\n     * @throws PrestaShopException\n     */\n    public function postProcess()\n    {\n        try {\n            if ($this->ajax) {\n                // from ajax-tab.php\n                $action = Tools::getValue('action');\n                // no need to use displayConf() here\n                if (!empty($action) && method_exists($this, 'ajaxProcess'.Tools::toCamelCase($action))) {\n                    Hook::triggerEvent('actionAdmin'.ucfirst($action).'Before', ['controller' => $this]);\n                    Hook::triggerEvent('action'.get_class($this).ucfirst($action).'Before', ['controller' => $this]);\n\n                    $return = $this->{'ajaxProcess'.Tools::toCamelCase($action)}();\n\n                    Hook::triggerEvent('actionAdmin'.ucfirst($action).'After', ['controller' => $this, 'return' => $return]);\n                    Hook::triggerEvent('action'.get_class($this).ucfirst($action).'After', ['controller' => $this, 'return' => $return]);\n\n                    return $return;\n                } elseif (!empty($action) && $this->controller_name == 'AdminModules' && Tools::getIsset('configure')) {\n                    $moduleObj = Module::getInstanceByName(Tools::getValue('configure'));\n                    if (Validate::isLoadedObject($moduleObj) && method_exists($moduleObj, 'ajaxProcess'.$action)) {\n                        return $moduleObj->{'ajaxProcess'.$action}();\n                    }\n                } elseif (method_exists($this, 'ajaxProcess')) {\n                    return $this->ajaxProcess();\n                }\n            } else {\n                // Process list filtering\n                if ($this->filter && $this->action != 'reset_filters') {\n                    $this->processFilter();\n                }\n\n                if (isset($_POST) && count($_POST) && Tools::getIntValue('submitFilter'.$this->list_id) || Tools::isSubmit('submitReset'.$this->list_id)) {\n                    $this->setRedirectAfter(static::$currentIndex.'&token='.$this->token.(Tools::isSubmit('submitFilter'.$this->list_id) ? '&submitFilter'.$this->list_id.'='.Tools::getIntValue('submitFilter'.$this->list_id) : '').(isset($_GET['id_'.$this->list_id]) ? '&id_'.$this->list_id.'='.(int) $_GET['id_'.$this->list_id] : ''));\n\n                    if (!empty(Tools::getValue('id_'.$this->list_id.'_category'))) {\n                        $this->setRedirectAfter($this->redirect_after.'&id_'.$this->list_id.'_category='.Tools::getValue('id_'.$this->list_id.'_category'));\n                    }\n                }\n\n                // If the method named after the action exists, call \"before\" hooks, then call action method, then call \"after\" hooks\n                if (!empty($this->action) && method_exists($this, 'process'.ucfirst(Tools::toCamelCase($this->action)))) {\n                    // Hook before action\n                    Hook::triggerEvent('actionAdmin'.ucfirst($this->action).'Before', ['controller' => $this]);\n                    Hook::triggerEvent('action'.get_class($this).ucfirst($this->action).'Before', ['controller' => $this]);\n                    // Call process\n                    $return = $this->{'process'.Tools::toCamelCase($this->action)}();\n                    // Hook After Action\n                    Hook::triggerEvent('actionAdmin'.ucfirst($this->action).'After', ['controller' => $this, 'return' => $return]);\n                    Hook::triggerEvent('action'.get_class($this).ucfirst($this->action).'After', ['controller' => $this, 'return' => $return]);\n\n                    return $return;\n                }\n            }\n        } catch (Throwable $e) {\n            if ($this->postProcessHandleExceptions) {\n                static::getErrorHandler()->logFatalError(ErrorUtils::describeException($e));\n                $this->errors[] = $e->getMessage();\n            } else {\n                if ($e instanceof PrestaShopException) {\n                    throw $e;\n                } else {\n                    throw new PrestaShopException($e->getMessage(), 0, $e);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function processFilter()\n    {\n        Hook::triggerEvent('action'.$this->controller_name.'ListingFieldsModifier', ['fields' => &$this->fields_list]);\n\n        $this->ensureListIdDefinition();\n\n        $prefix = $this->getCookieFilterPrefix();\n\n        // Reset current filter, if forced filter was applied\n        if (Tools::isSubmit('submitFilterForced')) {\n            $this->processResetFilters();\n            $_POST['submitFilter'.$this->list_id] = true;\n        }\n\n        if (isset($this->list_id)) {\n            foreach ($_POST as $key => $value) {\n                if ($value === '') {\n                    unset($this->context->cookie->{$prefix.$key});\n                } elseif (stripos($key, $this->list_id.'Filter_') === 0) {\n                    $this->context->cookie->{$prefix.$key} = !is_array($value) ? $value : json_encode($value);\n                } elseif (stripos($key, 'submitFilter') === 0) {\n                    $this->context->cookie->$key = !is_array($value) ? $value : json_encode($value);\n                }\n            }\n\n            foreach ($_GET as $key => $value) {\n\n                // Handle forced filtering parameter by url\n                if (stripos($key, 'list_idFilter_') === 0) {\n                    $key = preg_replace('/list_id/', $this->list_id, $key, 1);\n                }\n\n                if (stripos($key, $this->list_id.'Filter_') === 0) {\n                    $this->context->cookie->{$prefix.$key} = !is_array($value) ? $value : json_encode($value);\n                } elseif (stripos($key, 'submitFilter') === 0) {\n                    $this->context->cookie->$key = !is_array($value) ? $value : json_encode($value);\n                }\n                if (stripos($key, $this->list_id.'Orderby') === 0 && Validate::isOrderBy($value)) {\n                    if ($value === '' || $value == $this->_defaultOrderBy) {\n                        unset($this->context->cookie->{$prefix.$key});\n                    } else {\n                        $this->context->cookie->{$prefix.$key} = $value;\n                    }\n                } elseif (stripos($key, $this->list_id.'Orderway') === 0 && Validate::isOrderWay($value)) {\n                    if ($value === '' || $value == $this->_defaultOrderWay) {\n                        unset($this->context->cookie->{$prefix.$key});\n                    } else {\n                        $this->context->cookie->{$prefix.$key} = $value;\n                    }\n                }\n            }\n        }\n\n        $filters = $this->context->cookie->getFamily($prefix.$this->list_id.'Filter_');\n        $definition = false;\n        if (isset($this->className) && $this->className) {\n            $definition = ObjectModel::getDefinition($this->className);\n        }\n\n        foreach ($filters as $key => $value) {\n            /* Extracting filters from $_POST on key filter_ */\n            if ($value != null && !strncmp($key, $prefix.$this->list_id.'Filter_', 7 + mb_strlen($prefix.$this->list_id))) {\n                $key = mb_substr($key, 7 + mb_strlen($prefix.$this->list_id));\n                /* Table alias could be specified using a ! eg. alias!field */\n                $tmpTab = explode('!', $key);\n                $filter = count($tmpTab) > 1 ? $tmpTab[1] : $tmpTab[0];\n\n                if ($field = $this->filterToField($key, $filter)) {\n                    $type = (array_key_exists('filter_type', $field) ? $field['filter_type'] : (array_key_exists('type', $field) ? $field['type'] : false));\n                    if (($type == 'date' || $type == 'datetime') && is_string($value)) {\n                        $value = json_decode($value, true);\n                    }\n                    $key = isset($tmpTab[1]) ? $tmpTab[0].'.`'.$tmpTab[1].'`' : '`'.$tmpTab[0].'`';\n\n                    // Assignment by reference\n                    if (array_key_exists('tmpTableFilter', $field)) {\n                        $sqlFilter = &$this->_tmpTableFilter;\n                    } elseif (array_key_exists('havingFilter', $field)) {\n                        $sqlFilter = &$this->_filterHaving;\n                    } else {\n                        $sqlFilter = &$this->_filter;\n                    }\n\n                    /* Only for date filtering (from, to) */\n                    if (is_array($value)) {\n                        if (isset($value[0]) && !empty($value[0])) {\n                            if (!Validate::isDate($value[0])) {\n                                $this->errors[] = Tools::displayError('The \\'From\\' date format is invalid (YYYY-MM-DD)');\n                            } else {\n                                $sqlFilter .= ' AND '.pSQL($key).' >= \\''.pSQL(Tools::dateFrom($value[0])).'\\'';\n                            }\n                        }\n\n                        if (isset($value[1]) && !empty($value[1])) {\n                            if (!Validate::isDate($value[1])) {\n                                $this->errors[] = Tools::displayError('The \\'To\\' date format is invalid (YYYY-MM-DD)');\n                            } else {\n                                $sqlFilter .= ' AND '.pSQL($key).' <= \\''.pSQL(Tools::dateTo($value[1])).'\\'';\n                            }\n                        }\n                    } else {\n                        $sqlFilter .= ' AND ';\n                        $checkKey = ($key == $this->identifier || $key == '`'.$this->identifier.'`');\n                        $alias = ($definition && !empty($definition['fields'][$filter]['shop'])) ? 'sa' : 'a';\n\n                        if ($type == 'int' || $type == 'bool') {\n                            $sqlFilter .= (($checkKey || $key == '`active`') ? $alias.'.' : '').pSQL($key).' = '.(int) $value.' ';\n                        } elseif ($type == 'decimal' || $type == 'price') {\n                            $value = Tools::parseNumber($value);\n                            $sqlFilter .= ($checkKey ? $alias.'.' : '').pSQL($key).' = '. $value.' ';\n                        } elseif ($type == 'select') {\n                            $sqlFilter .= ($checkKey ? $alias.'.' : '').pSQL($key).' = \\''.pSQL($value).'\\' ';\n                        } else {\n                            $sqlFilter .= ($checkKey ? $alias.'.' : '').pSQL($key).' LIKE \\'%'.pSQL(trim($value)).'%\\' ';\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @return void\n     */\n    protected function ensureListIdDefinition()\n    {\n        if (!isset($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n    }\n\n    /**\n     * Return the type of authorization on permissions page and option.\n     *\n     * @return int(integer)\n     */\n    public function authorizationLevel()\n    {\n        if ($this->hasDeletePermission()) {\n            return AdminController::LEVEL_DELETE;\n        } elseif ($this->hasAddPermission()) {\n            return AdminController::LEVEL_ADD;\n        } elseif ($this->hasEditPermission()) {\n            return AdminController::LEVEL_EDIT;\n        } elseif ($this->hasViewPermission()) {\n            return AdminController::LEVEL_VIEW;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Set the filters used for the list display\n     *\n     * @return string\n     */\n    protected function getCookieFilterPrefix()\n    {\n        return str_replace(['admin', 'controller'], '', mb_strtolower(get_class($this)));\n    }\n\n    /**\n     * @param string $key\n     * @param string $filter\n     *\n     * @return array|false\n     */\n    protected function filterToField($key, $filter)\n    {\n        if (!isset($this->fields_list)) {\n            return false;\n        }\n\n        foreach ($this->fields_list as $field) {\n            if (array_key_exists('filter_key', $field) && $field['filter_key'] == $key) {\n                return $field;\n            }\n        }\n        if (array_key_exists($filter, $this->fields_list)) {\n            return $this->fields_list[$filter];\n        }\n\n        return false;\n    }\n\n    /**\n     * Object Delete images\n     *\n     * @return ObjectModel|false\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function processDeleteImage()\n    {\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            if (($object->deleteImage())) {\n                $redirect = static::$currentIndex.'&update'.$this->table.'&'.$this->identifier.'='.Tools::getValue($this->identifier).'&conf=7&token='.$this->token;\n                if (!$this->ajax) {\n                    $this->redirect_after = $redirect;\n                } else {\n                    $this->content = 'ok';\n                }\n            }\n        }\n        $this->errors[] = Tools::displayError('An error occurred while attempting to delete the image. (cannot load object).');\n\n        return $object;\n    }\n\n    /**\n     * Load class object using identifier in $_GET (if possible)\n     * otherwise return an empty object, or die\n     *\n     * @param bool $opt Return an empty object if load fail\n     *\n     * @return ObjectModel|bool\n     */\n    protected function loadObject($opt = false)\n    {\n        // return object that was already instantiated\n        if ($this->object) {\n            return $this->object;\n        }\n\n        if (empty($this->className)) {\n            return true;\n        }\n\n        $id = Tools::getIntValue($this->identifier);\n        if ($id && Validate::isUnsignedId($id)) {\n            $this->object = new $this->className($id);\n            if (Validate::isLoadedObject($this->object)) {\n                return $this->object;\n            }\n            // throw exception\n            $this->errors[] = Tools::displayError('The object cannot be loaded (or found)');\n\n            return false;\n        } elseif ($opt) {\n            $this->object = new $this->className();\n            return $this->object;\n        } else {\n            $this->errors[] = Tools::displayError('The object cannot be loaded (the identifier is missing or invalid)');\n\n            return false;\n        }\n    }\n\n    /**\n     * @param string $textDelimiter\n     *\n     * @return void\n     *\n     * @throws PrestaShopException\n     */\n    public function processExport($textDelimiter = '\"')\n    {\n        // clean buffer\n        if (ob_get_level() && ob_get_length() > 0) {\n            ob_clean();\n        }\n        $this->getList($this->context->language->id, null, null, 0, false);\n        if (!count($this->_list)) {\n            return;\n        }\n\n        header('Content-type: text/csv');\n        header('Content-Type: application/force-download; charset=UTF-8');\n        header('Cache-Control: no-store, no-cache');\n        header('Content-disposition: attachment; filename=\"'.$this->table.'_'.date('Y-m-d_His').'.csv\"');\n\n        $headers = [];\n        foreach ($this->fields_list as $key => $datas) {\n            if ($datas['title'] === 'PDF') {\n                unset($this->fields_list[$key]);\n            } else {\n                if ($datas['title'] === 'ID') {\n                    $headers[] = strtolower(Tools::htmlentitiesDecodeUTF8($datas['title']));\n                } else {\n                    $headers[] = Tools::htmlentitiesDecodeUTF8($datas['title']);\n                }\n            }\n        }\n        $content = [];\n        foreach ($this->_list as $i => $row) {\n            $content[$i] = [];\n//            $pathToImage = false;\n            foreach ($this->fields_list as $key => $params) {\n                $fieldValue = isset($row[$key]) ? Tools::htmlentitiesDecodeUTF8(Tools::nl2br($row[$key])) : '';\n                if ($key == 'image') {\n                    if ($params['image'] != 'p') {\n                        $pathToImage = Tools::getShopDomain(true)._PS_IMG_.$params['image'].'/'.$row['id_'.$this->table].(isset($row['id_image']) ? '-'.(int) $row['id_image'] : '').'.'.$this->imageType;\n                    } else {\n                        $pathToImage = Tools::getShopDomain(true)._PS_IMG_.$params['image'].'/'.Image::getImgFolderStatic($row['id_image']).(int) $row['id_image'].'.'.$this->imageType;\n                    }\n                    if ($pathToImage) {\n                        $fieldValue = $pathToImage;\n                    }\n                }\n                if (isset($params['callback'])) {\n                    $callbackObj = (isset($params['callback_object'])) ? $params['callback_object'] : $this->context->controller;\n                    if (!preg_match('/<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)/ism', call_user_func_array([$callbackObj, $params['callback']], [$fieldValue, $row]))) {\n                        $fieldValue = call_user_func_array([$callbackObj, $params['callback']], [$fieldValue, $row]);\n                    }\n                }\n                $content[$i][] = $fieldValue;\n            }\n        }\n\n        $fieldDelimiter = (Configuration::get('TB_EXPORT_FIELD_DELIMITER') ? Configuration::get('TB_EXPORT_FIELD_DELIMITER') : ',');\n        $this->context->smarty->assign(\n            [\n                'export_precontent' => \"\",\n                'export_headers'    => $headers,\n                'export_content'    => $content,\n                'text_delimiter'    => $textDelimiter,\n                'field_delimiter'   => $fieldDelimiter,\n            ]\n        );\n\n        $this->layout = 'layout-export.tpl';\n    }\n\n    /**\n     * Get the current objects' list form the database\n     *\n     * @param int $idLang Language used for display\n     * @param string|null $orderBy ORDER BY clause\n     * @param string|null $orderWay Order way (ASC, DESC)\n     * @param int $start Offset in LIMIT clause\n     * @param int|false|null $limit Row count in LIMIT clause\n     * @param int|bool $idLangShop\n     *\n     * @throws PrestaShopException\n     */\n    public function getList(\n        $idLang,\n        $orderBy = null,\n        $orderWay = null,\n        $start = 0,\n        $limit = null,\n        $idLangShop = false\n    ) {\n        $this->dispatchFieldsListingModifierEvent();\n\n        $this->ensureListIdDefinition();\n\n        /* Manage default params values */\n        $useLimit = true;\n        if ($limit === false) {\n            $useLimit = false;\n        } elseif (empty($limit)) {\n            if (isset($this->context->cookie->{$this->list_id.'_pagination'}) && $this->context->cookie->{$this->list_id.'_pagination'}) {\n                $limit = (int)$this->context->cookie->{$this->list_id.'_pagination'};\n            } else {\n                $limit = (int)$this->_default_pagination;\n            }\n        }\n\n        if (!Validate::isTableOrIdentifier($this->table)) {\n            throw new PrestaShopException(sprintf('Table name %s is invalid:', $this->table));\n        }\n\n        $orderBy = $this->resolveOrderBy($orderBy);\n        $orderWay = $this->resolveOrderWay($orderWay);\n\n        $limit = Tools::getIntValue($this->list_id.'_pagination', $limit);\n        if (in_array($limit, $this->_pagination) && $limit != $this->_default_pagination) {\n            $this->context->cookie->{$this->list_id.'_pagination'} = $limit;\n        } else {\n            unset($this->context->cookie->{$this->list_id.'_pagination'});\n        }\n\n        /* Check params validity */\n        if (!Validate::isOrderBy($orderBy) || !Validate::isOrderWay($orderWay)) {\n            throw new PrestaShopException(sprintf(Tools::displayError('Invalid ordering parameters: orderBy=[%s] orderWay=[%s]'), $orderBy, $orderWay));\n        }\n        if (!is_numeric($start) || !is_numeric($limit) || !Validate::isUnsignedId($idLang)) {\n            throw new PrestaShopException(sprintf(Tools::displayError('getList params is not valid: start=[%s] limit=[%s] idLang=[%s]'), $start, $limit, $idLang));\n        }\n\n        if (!isset($this->fields_list[$orderBy]['order_key']) && isset($this->fields_list[$orderBy]['filter_key'])) {\n            $this->fields_list[$orderBy]['order_key'] = $this->fields_list[$orderBy]['filter_key'];\n        }\n\n        if (isset($this->fields_list[$orderBy]['order_key'])) {\n            $orderBy = $this->fields_list[$orderBy]['order_key'];\n        }\n\n        /* Determine offset from current page */\n        $start = 0;\n        if (Tools::getIntValue('submitFilter'.$this->list_id)) {\n            $start = (Tools::getIntValue('submitFilter'.$this->list_id) - 1) * $limit;\n        } elseif (empty($start) && isset($this->context->cookie->{$this->list_id.'_start'}) && Tools::isSubmit('export'.$this->table)) {\n            $start = $this->context->cookie->{$this->list_id.'_start'};\n        }\n\n        // Either save or reset the offset in the cookie\n        if ($start) {\n            $this->context->cookie->{$this->list_id.'_start'} = $start;\n        } elseif (isset($this->context->cookie->{$this->list_id.'_start'})) {\n            unset($this->context->cookie->{$this->list_id.'_start'});\n        }\n\n        $this->_orderBy = $orderBy;\n\n        if (preg_match('/[.!]/', $orderBy)) {\n            $orderBySplit = preg_split('/[.!]/', $orderBy);\n            $orderBy = bqSQL($orderBySplit[0]).'.`'.bqSQL($orderBySplit[1]).'`';\n        } elseif ($orderBy) {\n            $orderBy = '`'.bqSQL($orderBy).'`';\n        }\n\n        $this->_orderWay = mb_strtoupper($orderWay);\n\n        /* SQL table : orders, but class name is Order */\n        $sqlTable = $this->table == 'order' ? 'orders' : $this->table;\n\n        // Add SQL shop restriction\n        $selectShop = $joinShop = $whereShop = '';\n        if ($this->shopLinkType) {\n            $selectShop = ', shop.name as shop_name ';\n            $joinShop = ' LEFT JOIN '._DB_PREFIX_.$this->shopLinkType.' shop\n\t\t\t\t\t\t\tON a.id_'.$this->shopLinkType.' = shop.id_'.$this->shopLinkType;\n            $whereShop = Shop::addSqlRestriction($this->shopShareDatas, 'a');\n        }\n\n        if ($this->multishop_context && Shop::isTableAssociated($this->table) && !empty($this->className)) {\n            if (Shop::getContext() != Shop::CONTEXT_ALL || !$this->context->employee->isSuperAdmin()) {\n                $testJoin = !preg_match('#`?'.preg_quote(_DB_PREFIX_.$this->table.'_shop').'`? *sa#', $this->_join ?? '');\n                if (Shop::isFeatureActive() && $testJoin && Shop::isTableAssociated($this->table)) {\n                    $this->_where .= ' AND EXISTS (\n\t\t\t\t\t\tSELECT 1\n\t\t\t\t\t\tFROM `'._DB_PREFIX_.$this->table.'_shop` sa\n\t\t\t\t\t\tWHERE a.'.$this->identifier.' = sa.'.$this->identifier.' AND sa.id_shop IN ('.implode(', ', Shop::getContextListShopID()).')\n\t\t\t\t\t)';\n                }\n            }\n        }\n\n        /* Query in order to get results with all fields */\n        $langJoin = '';\n        if ($this->lang) {\n            $langJoin = 'LEFT JOIN `'._DB_PREFIX_.$this->table.'_lang` b ON (b.`'.$this->identifier.'` = a.`'.$this->identifier.'` AND b.`id_lang` = '.(int) $idLang;\n            if ($idLangShop) {\n                if (!Shop::isFeatureActive()) {\n                    $langJoin .= ' AND b.`id_shop` = '.(int) Configuration::get('PS_SHOP_DEFAULT');\n                } elseif (Shop::getContext() == Shop::CONTEXT_SHOP) {\n                    $langJoin .= ' AND b.`id_shop` = '.(int) $idLangShop;\n                } else {\n                    $langJoin .= ' AND b.`id_shop` = a.id_shop_default';\n                }\n            }\n            $langJoin .= ')';\n        }\n\n        $havingClause = '';\n        if (isset($this->_filterHaving) || isset($this->_having)) {\n            $havingClause = ' HAVING ';\n            if (isset($this->_filterHaving)) {\n                $havingClause .= ltrim($this->_filterHaving, ' AND ');\n            }\n            if (isset($this->_having)) {\n                $havingClause .= $this->_having.' ';\n            }\n        }\n\n        do {\n            $this->_listsql = '';\n\n            if ($this->explicitSelect) {\n                foreach ($this->fields_list as $key => $arrayValue) {\n                    // Add it only if it is not already in $this->_select\n                    if (isset($this->_select) && preg_match('/[\\s]`?'.preg_quote($key, '/').'`?\\s*,/', $this->_select)) {\n                        continue;\n                    }\n\n                    if (isset($arrayValue['filter_key'])) {\n                        $this->_listsql .= str_replace('!', '.`', $arrayValue['filter_key']).'` AS `'.$key.'`, ';\n                    } elseif ($key == 'id_'.$this->table) {\n                        $this->_listsql .= 'a.`'.bqSQL($key).'`, ';\n                    } elseif ($key != 'image' && !preg_match('/'.preg_quote($key, '/').'/i', $this->_select ?? '')) {\n                        $this->_listsql .= '`'.bqSQL($key).'`, ';\n                    }\n                }\n                $this->_listsql = rtrim(trim($this->_listsql), ',');\n            } else {\n                $this->_listsql .= ($this->lang ? 'b.*,' : '').' a.*';\n            }\n\n            $this->_listsql .= '\n\t\t\t'.(isset($this->_select) ? ', '.rtrim($this->_select, ', ') : '').$selectShop;\n\n            $sqlFrom = '\n\t\t\tFROM `'._DB_PREFIX_.$sqlTable.'` a ';\n            $sqlJoin = '\n\t\t\t'.$langJoin.'\n\t\t\t'.(isset($this->_join) ? $this->_join.' ' : '').'\n\t\t\t'.$joinShop;\n            $sqlWhere = ' '.(isset($this->_where) ? $this->_where.' ' : '').($this->deleted ? 'AND a.`deleted` = 0 ' : '').\n                (isset($this->_filter) ? $this->_filter : '').$whereShop.'\n\t\t\t'.(isset($this->_group) ? $this->_group.' ' : '').'\n\t\t\t'.$havingClause;\n            $sqlOrderBy = ' ORDER BY '.((str_replace('`', '', $orderBy) == $this->identifier) ? 'a.' : '').$orderBy.' '.pSQL($orderWay).\n                ($this->_tmpTableFilter ? ') tmpTable WHERE 1'.$this->_tmpTableFilter : '');\n            $sqlLimit = ' '.(($useLimit === true) ? ' LIMIT '.(int) $start.', '.(int) $limit : '');\n\n            if ($this->_use_found_rows || isset($this->_filterHaving) || isset($this->_having)) {\n                $this->_listsql = 'SELECT SQL_CALC_FOUND_ROWS\n\t\t\t\t\t\t\t\t'.($this->_tmpTableFilter ? ' * FROM (SELECT ' : '').$this->_listsql.$sqlFrom.$sqlJoin.' WHERE 1 '.$sqlWhere.\n                    $sqlOrderBy.$sqlLimit;\n                $listCount = 'SELECT FOUND_ROWS() AS `'._DB_PREFIX_.$this->table.'`';\n            } else {\n                $this->_listsql = 'SELECT\n\t\t\t\t\t\t\t\t'.($this->_tmpTableFilter ? ' * FROM (SELECT ' : '').$this->_listsql.$sqlFrom.$sqlJoin.' WHERE 1 '.$sqlWhere.\n                    $sqlOrderBy.$sqlLimit;\n                if ($this->_group) {\n                    $listCount = 'SELECT COUNT(*) AS `'._DB_PREFIX_.$this->table.'` FROM (SELECT 1 '.$sqlFrom.$sqlJoin.' WHERE 1 '.$sqlWhere.') AS `inner`';\n                } else {\n                    $listCount = 'SELECT COUNT(*) AS `'._DB_PREFIX_.$this->table.'` '.$sqlFrom.$sqlJoin.' WHERE 1 '.$sqlWhere;\n                }\n            }\n\n            $conn = Db::readOnly();\n            $this->_list = $conn->getArray($this->_listsql);\n            $this->_listTotal = $conn->getValue($listCount);\n\n            if ($useLimit === true) {\n                $start = (int) $start - (int) $limit;\n                if ($start < 0) {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } while (empty($this->_list));\n\n        Hook::triggerEvent(\n            'action'.$this->controller_name.'ListingResultsModifier', [\n                'list'       => &$this->_list,\n                'list_total' => &$this->_listTotal,\n            ]\n        );\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    protected function dispatchFieldsListingModifierEvent()\n    {\n        Hook::triggerEvent(\n            'action'.$this->controller_name.'ListingFieldsModifier', [\n                'select'    => &$this->_select,\n                'join'      => &$this->_join,\n                'where'     => &$this->_where,\n                'group_by'  => &$this->_group,\n                'order_by'  => &$this->_orderBy,\n                'order_way' => &$this->_orderWay,\n                'fields'    => &$this->fields_list,\n            ]\n        );\n    }\n\n    /**\n     * Object Delete\n     *\n     * @return ObjectModel|false\n     * @throws PrestaShopException\n     */\n    public function processDelete()\n    {\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            $res = true;\n            //check if some ids are in list_skip_actions and forbid deletion\n            if (array_key_exists('delete', $this->list_skip_actions) && in_array($object->id, $this->list_skip_actions['delete'])) {\n                $this->errors[] = Tools::displayError('You cannot delete this item.');\n            } else {\n                if ($this->deleted) {\n                    if (!empty($this->fieldImageSettings)) {\n                        $res = $object->deleteImage();\n                    }\n\n                    if (!$res) {\n                        $this->errors[] = Tools::displayError('Unable to delete associated images.');\n                    }\n\n                    $object->deleted = 1;\n                    if ($res = $object->update()) {\n                        $this->redirect_after = static::$currentIndex.'&conf=1&token='.$this->token;\n                    }\n                } elseif ($res = $object->delete()) {\n                    $this->redirect_after = static::$currentIndex.'&conf=1&token='.$this->token;\n                } else {\n                    $this->errors[] = Tools::displayError('An error occurred during deletion.');\n                }\n                if ($res) {\n                    Logger::addLog(sprintf($this->l('%s deletion', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $this->object->id, true, (int) $this->context->employee->id);\n                }\n            }\n        } else {\n            $this->errors[] = Tools::displayError('An error occurred while deleting the object.').' <b>'.$this->table.'</b> '.Tools::displayError('(cannot load object)');\n        }\n\n        return $object;\n    }\n\n    /**\n     * Call the right method for creating or updating object\n     *\n     * @return ObjectModel|false\n     *\n     * @throws PrestaShopException\n     */\n    public function processSave()\n    {\n        if ($this->id_object) {\n            $this->loadObject();\n            return $this->processUpdate();\n        } else {\n            return $this->processAdd();\n        }\n    }\n\n    /**\n     * Object update\n     *\n     * @return ObjectModel|false\n     * @throws PrestaShopException\n     */\n    public function processUpdate()\n    {\n        /* Checking fields validity */\n        $this->validateRules();\n        if (empty($this->errors)) {\n            $id = Tools::getIntValue($this->identifier);\n\n            /* Object update */\n            if ($id) {\n                /** @var ObjectModel $object */\n                $object = new $this->className($id);\n                if (Validate::isLoadedObject($object)) {\n                    /* Specific to objects which must not be deleted */\n                    if ($this->deleted && $this->beforeDelete($object)) {\n                        // Create new one with old objet values\n                        /** @var ObjectModel $objectNew */\n                        $objectNew = $object->duplicateObject();\n                        if (Validate::isLoadedObject($objectNew)) {\n                            // Update old object to deleted\n                            $object->deleted = 1;\n                            $object->update();\n\n                            // Update new object with post values\n                            $this->copyFromPost($objectNew, $this->table);\n                            $result = $objectNew->update();\n                            if (Validate::isLoadedObject($objectNew)) {\n                                $this->afterDelete($objectNew, $object->id);\n                            }\n                        }\n                    } else {\n                        $this->copyFromPost($object, $this->table);\n                        $result = $object->update();\n                        $this->afterUpdate($object);\n                    }\n\n                    if ($object->id) {\n                        $this->updateAssoShop($object->id);\n                    }\n\n                    if (!isset($result) || !$result) {\n                        $this->errors[] = Tools::displayError('An error occurred while updating an object.').' <b>'.$this->table.'</b> ('.Db::getInstance()->getMsgError().')';\n                    } elseif ($this->postImage($object->id) && !count($this->errors) && $this->_redirect) {\n                        $parentId = Tools::getIntValue('id_parent', 1);\n                        // Specific back redirect\n                        if ($back = Tools::getValue('back')) {\n                            $this->redirect_after = urldecode($back).'&conf=4';\n                        }\n                        // Specific scene feature\n                        // @todo change stay_here submit name (not clear for redirect to scene ... )\n                        if (Tools::getValue('stay_here') == 'on' || Tools::getValue('stay_here') == 'true' || Tools::getValue('stay_here') == '1') {\n                            $this->redirect_after = static::$currentIndex.'&'.$this->identifier.'='.$object->id.'&conf=4&updatescene&token='.$this->token;\n                        }\n                        // Save and stay on same form\n                        // @todo on the to following if, we may prefer to avoid override redirect_after previous value\n                        if (Tools::isSubmit('submitAdd'.$this->table.'AndStay')) {\n                            $this->redirect_after = static::$currentIndex.'&'.$this->identifier.'='.$object->id.'&conf=4&update'.$this->table.'&token='.$this->token;\n                        }\n                        // Save and back to parent\n                        if (Tools::isSubmit('submitAdd'.$this->table.'AndBackToParent')) {\n                            $this->redirect_after = static::$currentIndex.'&'.$this->identifier.'='.$parentId.'&conf=4&token='.$this->token;\n                        }\n\n                        // Default behavior (save and back)\n                        if (empty($this->redirect_after) && $this->redirect_after !== false) {\n                            $this->redirect_after = static::$currentIndex.($parentId ? '&'.$this->identifier.'='.$object->id : '').'&conf=4&token='.$this->token;\n                        }\n                    }\n                    Logger::addLog(sprintf($this->l('%s modification', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $object->id, true, (int) $this->context->employee->id);\n                } else {\n                    $this->errors[] = Tools::displayError('An error occurred while updating an object.').' <b>'.$this->table.'</b> '.Tools::displayError('(cannot load object)');\n                }\n            }\n        }\n        $this->errors = array_unique($this->errors);\n        if (!empty($this->errors)) {\n            // if we have errors, we stay on the form instead of going back to the list\n            $this->display = 'edit';\n\n            return false;\n        }\n\n        if (isset($object)) {\n            return $object;\n        }\n\n        return false;\n    }\n\n    /**\n     * Manage page display (form, list...)\n     *\n     * @param string|bool $className Allow to validate a different class than the current one\n     *\n     * @throws PrestaShopException\n     */\n    public function validateRules($className = false)\n    {\n        if (!$className) {\n            $className = $this->className;\n        }\n\n        /** @var ObjectModel $object */\n        $object = new $className();\n\n        if (method_exists($this, 'getValidationRules')) {\n            $definition = $this->getValidationRules();\n        } else {\n            $definition = ObjectModel::getDefinition($className);\n        }\n\n        $defaultLanguage = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $languages = Language::getLanguages(false);\n\n        foreach ($definition['fields'] as $field => $def) {\n            $skip = [];\n            if (in_array($field, ['passwd', 'no-picture'])) {\n                $skip = ['required'];\n            }\n\n            if (isset($def['lang']) && $def['lang']) {\n                if (isset($def['required']) && $def['required']) {\n                    $value = Tools::getValue($field.'_'.$defaultLanguage->id);\n                    if ($value === false || $value === '') {\n                        $this->errors[$field.'_'.$defaultLanguage->id] = sprintf(\n                            Tools::displayError('The field %1$s is required at least in %2$s.'),\n                            $object->displayFieldName($field, $className),\n                            $defaultLanguage->name\n                        );\n                    }\n                }\n\n                foreach ($languages as $language) {\n                    $value = Tools::getValue($field.'_'.$language['id_lang']);\n                    if (!empty($value)) {\n                        if (($error = $object->validateField($field, $value, $language['id_lang'], $skip, true)) !== true) {\n                            $this->errors[$field.'_'.$language['id_lang']] = $error;\n                        }\n                    }\n                }\n            } elseif (($error = $object->validateField($field, Tools::getValue($field), null, $skip, true)) !== true) {\n                $this->errors[$field] = $error;\n            }\n        }\n\n        /* Overload this method for custom checking */\n        $this->_childValidation();\n    }\n\n    /**\n     * Overload this method for custom checking\n     *\n     * @return void\n     */\n    protected function _childValidation()\n    {\n    }\n\n    /**\n     * Called before deletion\n     *\n     * @param ObjectModel $object Object\n     *\n     * @return bool\n     */\n    protected function beforeDelete($object)\n    {\n        return false;\n    }\n\n    /**\n     * Copy data values from $_POST to object\n     *\n     * @param ObjectModel &$object Object\n     * @param string $table Object table\n     *\n     * @throws PrestaShopException\n     */\n    protected function copyFromPost(&$object, $table)\n    {\n        /* Classical fields */\n        foreach ($_POST as $key => $value) {\n            if (property_exists($object, $key) && $key != 'id_'.$table) {\n                /* Do not take care of password field if empty */\n                if ($key == 'passwd' && Tools::getValue('id_'.$table) && empty($value)) {\n                    continue;\n                }\n                /* Automatically hash password */\n                if ($key == 'passwd' && !empty($value)) {\n                    $value = Tools::hash($value);\n                }\n                if ($key === 'email') {\n                    if (mb_detect_encoding($value, 'UTF-8', true) && mb_strpos($value, '@') > -1) {\n                        // Convert to IDN\n                        list ($local, $domain) = explode('@', $value, 2);\n                        $domain = Tools::utf8ToIdn($domain);\n                        $value = \"$local@$domain\";\n                    }\n                }\n                $object->{$key} = $value;\n            }\n        }\n\n        /* Multilingual fields */\n        $classVars = get_class_vars(get_class($object));\n        $fields = [];\n        if (isset($classVars['definition']['fields'])) {\n            $fields = $classVars['definition']['fields'];\n        }\n\n        foreach ($fields as $field => $params) {\n            if (array_key_exists('lang', $params) && $params['lang']) {\n                foreach (Language::getIDs(false) as $idLang) {\n                    if (Tools::isSubmit($field.'_'.(int) $idLang)) {\n                        if (!isset($object->{$field}) || !is_array($object->{$field})) {\n                            $object->{$field} = [];\n                        }\n                        $object->{$field}[(int) $idLang] = Tools::getValue($field.'_'.(int) $idLang);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Called before deletion\n     *\n     * @param ObjectModel $object Object\n     * @param int $oldId\n     */\n    protected function afterDelete($object, $oldId)\n    {\n    }\n\n    /**\n     * @param ObjectModel $object\n     */\n    protected function afterUpdate($object)\n    {\n    }\n\n    /**\n     * Update the associations of shops\n     *\n     * @param int $idObject\n     *\n     * @return bool|void\n     * @throws PrestaShopDatabaseException\n     *\n     * @throws PrestaShopException\n     */\n    protected function updateAssoShop($idObject)\n    {\n        if (!Shop::isFeatureActive()) {\n            return;\n        }\n\n        if (!Shop::isTableAssociated($this->table)) {\n            return;\n        }\n\n        $assosData = $this->getSelectedAssoShop($this->table);\n\n        // Get list of shop id we want to exclude from asso deletion\n        $excludeIds = $assosData;\n        $conn = Db::getInstance();\n        foreach ($conn->getArray('SELECT id_shop FROM '._DB_PREFIX_.'shop') as $row) {\n            if (!$this->context->employee->hasAuthOnShop($row['id_shop'])) {\n                $excludeIds[] = $row['id_shop'];\n            }\n        }\n        $conn->delete($this->table.'_shop', '`'.bqSQL($this->identifier).'` = '.(int) $idObject.($excludeIds ? ' AND id_shop NOT IN ('.implode(', ', array_map('intval', $excludeIds)).')' : ''));\n\n        $insert = [];\n        foreach ($assosData as $idShop) {\n            $insert[] = [\n                $this->identifier => (int) $idObject,\n                'id_shop'         => (int) $idShop,\n            ];\n        }\n\n        return $conn->insert($this->table.'_shop', $insert, false, true, Db::INSERT_IGNORE);\n    }\n\n    /**\n     * Returns an array with selected shops and type (group or boutique shop)\n     *\n     * @param string $table\n     *\n     * @return array\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    protected function getSelectedAssoShop($table)\n    {\n        if (!Shop::isFeatureActive() || !Shop::isTableAssociated($table)) {\n            return [];\n        }\n\n        $shops = Shop::getShops(true, null, true);\n        if (count($shops) == 1 && isset($shops[0])) {\n            return [$shops[0], 'shop'];\n        }\n\n        $assos = [];\n        if (Tools::isSubmit('checkBoxShopAsso_'.$table)) {\n            foreach (Tools::getArrayValue('checkBoxShopAsso_'.$table) as $idShop => $value) {\n                $assos[] = (int) $idShop;\n            }\n        } elseif (Shop::getTotalShops(false) == 1) {\n            // if we do not have the checkBox multishop, we can have an admin with only one shop and being in multishop\n            $assos[] = (int) Shop::getContextShopID();\n        }\n\n        return $assos;\n    }\n\n    /**\n     * Overload this method for custom checking\n     *\n     * @param int $id Object id used for deleting images\n     *\n     * @return bool\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    protected function postImage($id)\n    {\n        if (isset($this->fieldImageSettings['name']) && isset($this->fieldImageSettings['dir'])) {\n            return $this->uploadImage($id, $this->fieldImageSettings['name'], $this->fieldImageSettings['dir'].'/');\n        } elseif (!empty($this->fieldImageSettings)) {\n            foreach ($this->fieldImageSettings as $image) {\n                if (isset($image['name']) && isset($image['dir'])) {\n                    $this->uploadImage($id, $image['name'], $image['dir'].'/');\n                }\n            }\n        }\n\n        return !count($this->errors) ? true : false;\n    }\n\n    /**\n     * @param int $id\n     * @param string $name\n     * @param string $dir\n     * @param string|bool $ext\n     * @param int|null $width\n     * @param int|null $height\n     *\n     * @return bool\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    protected function uploadImage($id, $name, $dir, $ext = false, $width = null, $height = null)\n    {\n        if (isset($_FILES[$name]['tmp_name']) && !empty($_FILES[$name]['tmp_name'])) {\n            // Delete old image\n            if (Validate::isLoadedObject($object = $this->loadObject())) {\n                $object->deleteImage();\n            } else {\n                return false;\n            }\n\n            // Check image validity\n            $maxSize = isset($this->max_image_size) ? $this->max_image_size : 0;\n            if ($error = ImageManager::validateUpload($_FILES[$name], Tools::getMaxUploadSize($maxSize))) {\n                $this->errors[] = $error;\n            }\n\n            $tmpName = tempnam(_PS_TMP_IMG_DIR_, 'PS');\n            if (!$tmpName) {\n                return false;\n            }\n\n            if (!move_uploaded_file($_FILES[$name]['tmp_name'], $tmpName)) {\n                return false;\n            }\n\n            // Evaluate the memory required to resize the image: if it's too much, you can't resize it.\n            if (!ImageManager::checkImageMemoryLimit($tmpName)) {\n                $this->errors[] = Tools::displayError('Due to memory limit restrictions, this image cannot be loaded. Please increase your memory_limit value via your server\\'s configuration settings. ');\n            }\n\n            // Copy new image\n            if (empty($this->errors) && !ImageManager::resize($tmpName, _PS_IMG_DIR_.$dir.$id.'.'.$this->imageType, (int) $width, (int) $height, ($ext ? $ext : $this->imageType))) {\n                $this->errors[] = Tools::displayError('An error occurred while uploading the image.');\n            }\n\n            if (count($this->errors)) {\n                return false;\n            }\n            if ($this->afterImageUpload()) {\n                unlink($tmpName);\n\n                return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check rights to view the current tab\n     *\n     * @return bool\n     */\n    protected function afterImageUpload()\n    {\n        return true;\n    }\n\n    /**\n     * Object creation\n     *\n     * @return ObjectModel|false\n     * @throws PrestaShopException\n     */\n    public function processAdd()\n    {\n        if (empty($this->className)) {\n            return false;\n        }\n\n        $this->validateRules();\n        if (count($this->errors) <= 0) {\n            $this->object = new $this->className();\n\n            $this->copyFromPost($this->object, $this->table);\n            $this->beforeAdd($this->object);\n            if (method_exists($this->object, 'add') && !$this->object->add()) {\n                $this->errors[] = Tools::displayError('An error occurred while creating an object.').' <strong>'.$this->table.' ('.Db::getInstance()->getMsgError().')</strong>';\n            } elseif (($_POST[$this->identifier] = $this->object->id /* voluntary do affectation here */) && $this->postImage($this->object->id) && !count($this->errors) && $this->_redirect) {\n                Logger::addLog(sprintf($this->l('%s addition', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $this->object->id, true, (int) $this->context->employee->id);\n                $parentId = Tools::getIntValue('id_parent', 1);\n                $this->afterAdd($this->object);\n                $this->updateAssoShop($this->object->id);\n                // Save and stay on same form\n                if (empty($this->redirect_after) && $this->redirect_after !== false && Tools::isSubmit('submitAdd'.$this->table.'AndStay')) {\n                    $this->redirect_after = static::$currentIndex.'&'.$this->identifier.'='.$this->object->id.'&conf=3&update'.$this->table.'&token='.$this->token;\n                }\n                // Save and back to parent\n                if (empty($this->redirect_after) && $this->redirect_after !== false && Tools::isSubmit('submitAdd'.$this->table.'AndBackToParent')) {\n                    $this->redirect_after = static::$currentIndex.'&'.$this->identifier.'='.$parentId.'&conf=3&token='.$this->token;\n                }\n                // Default behavior (save and back)\n                if (empty($this->redirect_after) && $this->redirect_after !== false) {\n                    $this->redirect_after = static::$currentIndex.($parentId ? '&'.$this->identifier.'='.$this->object->id : '').'&conf=3&token='.$this->token;\n                }\n            }\n        }\n\n        $this->errors = array_unique($this->errors);\n        if (!empty($this->errors)) {\n            // if we have errors, we stay on the form instead of going back to the list\n            $this->display = 'edit';\n\n            return false;\n        }\n\n        return $this->object;\n    }\n\n    /**\n     * Called before Add\n     *\n     * @param ObjectModel $object Object\n     *\n     * @return void\n     */\n    protected function beforeAdd($object)\n    {\n    }\n\n    /**\n     * @param ObjectModel $object\n     *\n     * @return void\n     */\n    protected function afterAdd($object)\n    {\n    }\n\n    /**\n     * Change object required fields\n     *\n     * @return ObjectModel\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function processUpdateFields()\n    {\n        $fields = Tools::getArrayValue('fieldsBox');\n\n        /** @var ObjectModel $object */\n        $object = new $this->className();\n\n        if (!$object->addFieldsRequiredDatabase($fields)) {\n            $this->errors[] = Tools::displayError('An error occurred when attempting to update the required fields.');\n        } else {\n            $this->redirect_after = static::$currentIndex.'&conf=4&token='.$this->token;\n        }\n\n        return $object;\n    }\n\n    /**\n     * Change object status (active, inactive)\n     *\n     * @return ObjectModel|false\n     * @throws PrestaShopException\n     */\n    public function processStatus()\n    {\n        /** @var ObjectModel $object */\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            if (property_exists($object, 'active') && $object->toggleStatus()) {\n                Logger::addLog(\n                    sprintf($this->l('%s status switched to %s', 'AdminTab', false, false), $this->className, $object->active ? 'enable' : 'disable'),\n                    1,\n                    null,\n                    $this->className,\n                    (int) $object->id,\n                    true,\n                    (int) $this->context->employee->id\n                );\n                $matches = [];\n                $referer = Tools::getHttpReferer();\n                if (preg_match('/[\\?|&]controller=([^&]*)/', $referer, $matches) !== false &&\n                    strtolower($matches[1]) != strtolower(preg_replace('/controller/i', '', get_class($this)))\n                ) {\n                    $this->redirect_after = preg_replace('/[\\?|&]conf=([^&]*)/i', '', $referer);\n                } else {\n                    $this->redirect_after = static::$currentIndex.'&token='.$this->token;\n                }\n\n                $idCategory = (($idCategory = Tools::getIntValue('id_category')) && Tools::getIntValue('id_product')) ? '&id_category='.$idCategory : '';\n\n                $page = Tools::getIntValue('page');\n                $page = $page > 1 ? '&submitFilter'.$this->table.'='.(int) $page : '';\n                $this->redirect_after .= '&conf=5'.$idCategory.$page;\n            } else {\n                $this->errors[] = Tools::displayError('An error occurred while updating the status.');\n            }\n        } else {\n            $this->errors[] = Tools::displayError('An error occurred while updating the status for an object.').\n                ' <b>'.$this->table.'</b> '.\n                Tools::displayError('(cannot load object)');\n        }\n\n        return $object;\n    }\n\n    /**\n     * Change object position\n     *\n     * @return ObjectModel|false\n     */\n    public function processPosition()\n    {\n        if (!Validate::isLoadedObject($object = $this->loadObject())) {\n            $this->errors[] = Tools::displayError('An error occurred while updating the status for an object.').\n                ' <b>'.$this->table.'</b> '.Tools::displayError('(cannot load object)');\n        } elseif (!$object->updatePosition(Tools::getIntValue('way'), Tools::getIntValue('position'))) {\n            $this->errors[] = Tools::displayError('Failed to update the position.');\n        } else {\n            $idIdentifierStr = ($idIdentifier = Tools::getIntValue($this->identifier)) ? '&'.$this->identifier.'='.$idIdentifier : '';\n            $redirect = static::$currentIndex.'&'.$this->table.'Orderby=position&'.$this->table.'Orderway=asc&conf=5'.$idIdentifierStr.'&token='.$this->token;\n            $this->redirect_after = $redirect;\n        }\n\n        return $object;\n    }\n\n    /**\n     * Cancel all filters for this tab\n     *\n     * @param int|null $listId\n     */\n    public function processResetFilters($listId = null)\n    {\n        if ($listId === null) {\n            $listId = isset($this->list_id) ? $this->list_id : $this->table;\n        }\n\n        $prefix = $this->getCookieFilterPrefix();\n        $filters = $this->context->cookie->getFamily($prefix.$listId.'Filter_');\n        foreach ($filters as $cookieKey => $filter) {\n            if (strncmp($cookieKey, $prefix.$listId.'Filter_', 7 + mb_strlen($prefix.$listId)) == 0) {\n                $key = substr($cookieKey, 7 + mb_strlen($prefix.$listId));\n                if (is_array($this->fields_list) && array_key_exists($key, $this->fields_list)) {\n                    $this->context->cookie->$cookieKey = null;\n                }\n                unset($this->context->cookie->$cookieKey);\n            }\n        }\n\n        if (isset($this->context->cookie->{'submitFilter'.$listId})) {\n            unset($this->context->cookie->{'submitFilter'.$listId});\n        }\n        if (isset($this->context->cookie->{$prefix.$listId.'Orderby'})) {\n            unset($this->context->cookie->{$prefix.$listId.'Orderby'});\n        }\n        if (isset($this->context->cookie->{$prefix.$listId.'Orderway'})) {\n            unset($this->context->cookie->{$prefix.$listId.'Orderway'});\n        }\n\n        $_POST = [];\n        $this->_filter = false;\n        unset($this->_filterHaving);\n        unset($this->_having);\n    }\n\n    /**\n     * Check if the token is valid, else display a warning page\n     *\n     * @return bool\n     *\n     * @throws PrestaShopException\n     */\n    public function checkAccess()\n    {\n        if (!$this->checkToken()) {\n            // If this is an XSS attempt, then we should only display a simple, secure page\n            // ${1} in the replacement string of the regexp is required,\n            // because the token may begin with a number and mix up with it (e.g. $17)\n            $url = preg_replace('/([&?]token=)[^&]*(&.*)?$/', '${1}'.$this->token.'$2', $_SERVER['REQUEST_URI']);\n            if (false === strpos($url, '?token=') && false === strpos($url, '&token=')) {\n                $url .= '&token='.$this->token;\n            }\n            if (strpos($url, '?') === false) {\n                $url = str_replace('&token', '?controller=AdminDashboard&token', $url);\n            }\n\n            $this->context->smarty->assign('url', htmlentities($url));\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check for security token\n     *\n     * @return bool\n     *\n     * @throws PrestaShopException\n     */\n    public function checkToken()\n    {\n        // if token is provided it must match the expected token\n        $token = Tools::getValue('token');\n        if ($token) {\n            return $token === $this->token;\n        }\n\n        // token was not provided. It is required, if security was explicitly strengthened\n        $forceToken = (bool)Configuration::getGlobalValue(Configuration::BO_FORCE_TOKEN);\n        if ($forceToken) {\n            return false;\n        }\n\n        // if there are any POST parameters, token is required\n        if (count($_POST)) {\n            return false;\n        }\n\n        // if there are any GET parameters, token is required as well\n        foreach ($_GET as $key => $value) {\n            if (! in_array($key, ['controller', 'controllerUri'])) {\n                return false;\n            }\n            if ($key === 'controller' && !Validate::isControllerName($value)) {\n                return false;\n            }\n        }\n\n        // for backwards compatibility reasons\n        return true;\n    }\n\n    /**\n     * @return void\n     *\n     * @throws SmartyException\n     * @throws PrestaShopException\n     */\n    public function displayAjax()\n    {\n        if ($this->json) {\n            $this->context->smarty->assign(\n                [\n                    'json'   => true,\n                    'status' => $this->status,\n                ]\n            );\n        }\n        $this->layout = 'layout-ajax.tpl';\n        $this->display_header = false;\n        $this->display_header_javascript = false;\n        $this->display_footer = false;\n\n        $this->display();\n    }\n\n    /**\n     * @return void\n     * @throws SmartyException\n     * @throws PrestaShopException\n     */\n    public function display()\n    {\n        $this->context->smarty->assign(\n            [\n                'display_header'            => $this->display_header,\n                'display_header_javascript' => $this->display_header_javascript,\n                'display_footer'            => $this->display_footer,\n                'js_def'                    => Media::getJsDef(),\n            ]\n        );\n\n        // Use page title from meta_title if it has been set else from the breadcrumbs array\n        if (!$this->meta_title) {\n            $this->meta_title = $this->toolbar_title;\n        }\n        if (is_array($this->meta_title)) {\n            $this->meta_title = strip_tags(implode(' '.Configuration::get('PS_NAVIGATION_PIPE').' ', $this->meta_title));\n        }\n        $this->context->smarty->assign('meta_title', $this->meta_title);\n\n        $templateDirs = $this->context->smarty->getTemplateDir();\n\n        // Check if header/footer have been overriden\n        $dir = $this->context->smarty->getTemplateDir(0).'controllers'.DIRECTORY_SEPARATOR.trim($this->override_folder, '\\\\/').DIRECTORY_SEPARATOR;\n\n        $headerTpl = file_exists($dir.'header.tpl') ? $dir.'header.tpl' : 'header.tpl';\n        $pageHeaderToolbar = file_exists($dir.'page_header_toolbar.tpl') ? $dir.'page_header_toolbar.tpl' : 'page_header_toolbar.tpl';\n        $footerTpl = file_exists($dir.'footer.tpl') ? $dir.'footer.tpl' : 'footer.tpl';\n        $tplAction = $this->tpl_folder.$this->display.'.tpl';\n\n        // Check if action template has been overriden\n        foreach ($templateDirs as $template_dir) {\n            if (file_exists($template_dir.DIRECTORY_SEPARATOR.$tplAction) && $this->display != 'view' && $this->display != 'options') {\n                if (method_exists($this, $this->display.Tools::toCamelCase($this->className))) {\n                    $this->{$this->display.Tools::toCamelCase($this->className)}();\n                }\n                $this->context->smarty->assign('content', $this->context->smarty->fetch($tplAction));\n                break;\n            }\n        }\n\n        if (!$this->ajax) {\n            $template = $this->createTemplate($this->template);\n            $page = $template->fetch();\n        } else {\n            $page = $this->content;\n        }\n\n        if ($conf = Tools::getValue('conf')) {\n            $this->context->smarty->assign('conf', $this->json ? json_encode($this->_conf[(int) $conf]) : $this->_conf[(int) $conf]);\n        }\n\n        foreach (['errors', 'warnings', 'informations', 'confirmations'] as $type) {\n            if (!is_array($this->$type)) {\n                $this->$type = (array) $this->$type;\n            }\n            $this->context->smarty->assign($type, $this->json ? json_encode(array_unique($this->$type)) : array_unique($this->$type));\n        }\n\n        if ($this->show_page_header_toolbar && !$this->lite_display) {\n            $this->context->smarty->assign(\n                [\n                    'page_header_toolbar' => $this->context->smarty->fetch($pageHeaderToolbar),\n                ]\n            );\n        }\n\n        $messages = static::getErrorMessages();\n        if ($messages) {\n            $this->context->smarty->assign('php_errors', $messages);\n        }\n\n        $this->context->smarty->assign(\n            [\n                'page'   => $this->json ? json_encode($page) : $page,\n                'header' => $this->context->smarty->fetch($headerTpl),\n                'footer' => $this->context->smarty->fetch($footerTpl),\n            ]\n        );\n\n        $this->smartyOutputContent($this->layout);\n    }\n\n    /**\n     * Create a template from the override file, else from the base file.\n     *\n     * @param string $tplName filename\n     *\n     * @return Smarty_Internal_Template\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function createTemplate($tplName)\n    {\n        $smarty = $this->context->smarty;\n        $templateDir = $smarty->getTemplateDir(0);\n        if ($this->viewAccess()) {\n            if ($this->override_folder) {\n                // Use override tpl if it exists\n                $overrideTemplateDir = $smarty->getTemplateDir(1);\n                if (!Configuration::get('PS_DISABLE_OVERRIDES') && file_exists($overrideTemplateDir. DIRECTORY_SEPARATOR . $this->override_folder . $tplName)) {\n                    return $smarty->createTemplate($this->override_folder . $tplName, $smarty);\n                }\n                if (file_exists($templateDir . 'controllers' . DIRECTORY_SEPARATOR . $this->override_folder . $tplName)) {\n                    return $smarty->createTemplate('controllers' . DIRECTORY_SEPARATOR . $this->override_folder . $tplName, $smarty);\n                }\n            }\n            return $smarty->createTemplate($templateDir.$tplName, $smarty);\n        } else {\n            // If view access is denied, we want to use the default template that will be used to display an error\n            return $smarty->createTemplate($templateDir . static::DEFAULT_VIEW_TEMPLATE, $smarty);\n        }\n    }\n\n    /**\n     * Check rights to view the current tab\n     *\n     * @param bool $disable\n     *\n     * @return bool\n     */\n    public function viewAccess($disable = false)\n    {\n        if ($disable) {\n            return true;\n        }\n\n        return $this->hasViewPermission();\n    }\n\n    /**\n     * Assign smarty variables for the header\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function initHeader()\n    {\n        header('Cache-Control: no-store, no-cache');\n\n        // Multishop\n        $isMultishop = Shop::isFeatureActive();\n\n        // Quick access\n        if ((int) $this->context->employee->id) {\n            $quickAccess = QuickAccess::getQuickAccesses($this->context->language->id);\n            foreach ($quickAccess as $index => $quick) {\n                if ($quick['link'] == '../' && Shop::getContext() == Shop::CONTEXT_SHOP) {\n                    $url = $this->context->shop->getBaseURL();\n                    if (!$url) {\n                        unset($quickAccess[$index]);\n                        continue;\n                    }\n                    $quickAccess[$index]['link'] = $url;\n                } else {\n                    preg_match('/controller=(.+)(&.+)?$/', $quick['link'], $adminTab);\n                    if (isset($adminTab[1])) {\n                        if (strpos($adminTab[1], '&')) {\n                            $adminTab[1] = substr($adminTab[1], 0, strpos($adminTab[1], '&'));\n                        }\n\n                        $token = Tools::getAdminToken($adminTab[1].(int) Tab::getIdFromClassName($adminTab[1]).(int) $this->context->employee->id);\n                        $quickAccess[$index]['target'] = $adminTab[1];\n                        $quickAccess[$index]['link'] .= '&token='.$token;\n                    }\n                }\n            }\n        }\n\n        // Tab list\n        $tabs = Tab::getTabs($this->context->language->id, 0);\n        $currentId = Tab::getCurrentParentId();\n        foreach ($tabs as $index => $tab) {\n            if (!Tab::checkTabRights($tab['id_tab'])\n                || ($tab['class_name'] == 'AdminStock' && Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') == 0)\n                || $tab['class_name'] == 'AdminCarrierWizard'\n            ) {\n                unset($tabs[$index]);\n                continue;\n            }\n\n            $tabs[$index]['current'] = ($tab['class_name'].'Controller' == get_class($this)) || ($currentId == $tab['id_tab']);\n            $tabs[$index]['href'] = $this->context->link->getAdminLink($tab['class_name']);\n\n            $subTabs = Tab::getTabs($this->context->language->id, $tab['id_tab']);\n            foreach ($subTabs as $index2 => $subTab) {\n                //check if module is enable and\n                if (isset($subTab['module']) && !empty($subTab['module'])) {\n\n                    $moduleId = Module::getModuleIdByName($subTab['module']) ;\n                    if (!$moduleId || !Module::isEnabledForShops($moduleId, Shop::getContextListShopID())) {\n                        unset($subTabs[$index2]);\n                        continue;\n                    }\n                }\n\n                // class_name is the name of the class controller\n                if (Tab::checkTabRights($subTab['id_tab']) === true && $subTab['active'] && $subTab['class_name'] != 'AdminCarrierWizard') {\n                    $subTabs[$index2]['href'] = $this->context->link->getAdminLink($subTab['class_name']);\n                    $subTabs[$index2]['current'] = ($subTab['class_name'].'Controller' == get_class($this) || $subTab['class_name'] == Tools::getValue('controller'));\n                } elseif ($subTab['class_name'] == 'AdminCarrierWizard' && $subTab['class_name'].'Controller' == get_class($this)) {\n                    foreach ($subTabs as $i => $tab) {\n                        if ($tab['class_name'] == 'AdminCarriers') {\n                            break;\n                        }\n                    }\n\n                    $subTabs[$i]['current'] = true;\n                    unset($subTabs[$index2]);\n                } else {\n                    unset($subTabs[$index2]);\n                }\n            }\n            $tabs[$index]['sub_tabs'] = array_values($subTabs);\n        }\n\n        if (Validate::isLoadedObject($this->context->employee)) {\n            $notification = $this->context->employee->getNotification();\n            $helperShop = new HelperShop();\n            /* Hooks are voluntary out the initialize array (need those variables already assigned) */\n            $boColor = empty($this->context->employee->bo_color) ? '#FFFFFF' : $this->context->employee->bo_color;\n            $this->context->smarty->assign(\n                [\n                    'autorefresh_notifications' => false, Configuration::get('PS_ADMINREFRESH_NOTIFICATION'),\n                    'notificationTypes'         => $notification->getTypes(),\n                    'help_box'                  => Configuration::get('PS_HELPBOX'),\n                    'round_mode'                => Configuration::get('PS_PRICE_ROUND_MODE'),\n                    'brightness'                => Tools::getBrightness($boColor) < 128 ? 'white' : '#383838',\n                    'bo_width'                  => (int) $this->context->employee->bo_width,\n                    'bo_color'                  => isset($this->context->employee->bo_color) ? Tools::htmlentitiesUTF8($this->context->employee->bo_color) : null,\n                    'employee'                  => $this->context->employee,\n                    'search_type'               => Tools::getValue('bo_search_type'),\n                    'bo_query'                  => Tools::safeOutput(Tools::getValue('bo_query')),\n                    'quick_access'              => $quickAccess,\n                    'multi_shop'                => Shop::isFeatureActive(),\n                    'shop_list'                 => $helperShop->getRenderedShopList(),\n                    'shop'                      => $this->context->shop,\n                    'shop_group'                => new ShopGroup((int) Shop::getContextShopGroupID()),\n                    'is_multishop'              => $isMultishop,\n                    'multishop_context'         => $this->multishop_context,\n                    'default_tab_link'          => $this->context->link->getAdminLink(Tab::getClassNameById((int) $this->context->employee->default_tab)),\n                    'login_link'                => $this->context->link->getAdminLink('AdminLogin'),\n                    'collapse_menu'             => isset($this->context->cookie->collapse_menu) ? (int) $this->context->cookie->collapse_menu : 0,\n                ]\n            );\n        } else {\n            $this->context->smarty->assign('default_tab_link', $this->context->link->getAdminLink('AdminDashboard'));\n        }\n\n        // Shop::initialize() in config.php may empty $this->context->shop->virtual_uri so using a new shop instance for getBaseUrl()\n        $this->context->shop = new Shop((int) $this->context->shop->id);\n\n        switch (Shop::getContext()) {\n            case Shop::CONTEXT_ALL:\n                $shopContext = 'all';\n                break;\n            case Shop::CONTEXT_GROUP:\n                $shopContext = 'group-' . Shop::getContextShopGroupID(false);\n                break;\n            case Shop::CONTEXT_SHOP:\n            default:\n                $shopContext = 'shop-' . Shop::getContextShopID(false);\n        }\n\n        $this->context->smarty->assign(\n            [\n                'img_dir'                   => _PS_IMG_,\n                'iso'                       => $this->context->language->iso_code,\n                'class_name'                => $this->className,\n                'iso_user'                  => $this->context->language->iso_code,\n                'country_iso_code'          => $this->context->country->iso_code,\n                'version'                   => _TB_VERSION_,\n                'lang_iso'                  => $this->context->language->iso_code,\n                'full_language_code'        => $this->context->language->language_code,\n                'link'                      => $this->context->link,\n                'shop_name'                 => Configuration::get('PS_SHOP_NAME'),\n                'base_url'                  => $this->context->shop->getBaseURL(),\n                'tab'                       => isset($tab) ? $tab : null, // Deprecated, this tab is declared in the foreach, so it's the last tab in the foreach\n                'current_parent_id'         => (int) Tab::getCurrentParentId(),\n                'tabs'                      => $tabs,\n                'install_dir_exists'        => file_exists(_PS_ADMIN_DIR_.'/../install'),\n                'pic_dir'                   => _THEME_PROD_PIC_DIR_,\n                'controller_name'           => htmlentities(Tools::getValue('controller')),\n                'currentIndex'              => static::$currentIndex,\n                'maintenance_mode'          => !Configuration::get('PS_SHOP_ENABLE'),\n                'bootstrap'                 => $this->bootstrap,\n                'default_language'          => (int) Configuration::get('PS_LANG_DEFAULT'),\n                'shopContext'               => $shopContext,\n            ]\n        );\n\n        /** @var ThemeConfigurator|false $module */\n        $module = Module::getInstanceByName('themeconfigurator');\n        if (is_object($module) && $module->active && (int) Configuration::get('PS_TC_ACTIVE') == 1 && $this->context->shop->getBaseURL()) {\n            $request =\n                'live_configurator_token='.$module->getLiveConfiguratorToken()\n                .'&id_employee='.(int) $this->context->employee->id\n                .'&id_shop='.(int) $this->context->shop->id\n                .(Configuration::get('PS_TC_THEME') != '' ? '&theme='.Configuration::get('PS_TC_THEME') : '')\n                .(Configuration::get('PS_TC_FONT') != '' ? '&theme_font='.Configuration::get('PS_TC_FONT') : '');\n            $this->context->smarty->assign('base_url_tc', $this->context->link->getPageLink('index', null, null, $request));\n        }\n    }\n\n    /**\n     * Declare an action to use for each row in the list\n     *\n     * @param string $action\n     */\n    public function addRowAction($action)\n    {\n        $action = strtolower($action);\n        $this->actions[] = $action;\n    }\n\n    /**\n     * Add an action to use for each row in the list\n     *\n     * @param string $action\n     * @param array $list\n     */\n    public function addRowActionSkipList($action, $list)\n    {\n        $action = strtolower($action);\n        $list = (array) $list;\n\n        if (array_key_exists($action, $this->list_skip_actions)) {\n            $this->list_skip_actions[$action] = array_merge($this->list_skip_actions[$action], $list);\n        } else {\n            $this->list_skip_actions[$action] = $list;\n        }\n    }\n\n    /**\n     * Assign smarty variables for all default views, list and form, then call other init functions\n     *\n     * @return void\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     * @throws PrestaShopException\n     */\n    public function initContent()\n    {\n        if (!$this->viewAccess()) {\n            $this->errors[] = Tools::displayError('You do not have permission to view this.');\n\n            return;\n        }\n\n        $this->getLanguages();\n        $this->initToolbar();\n        $this->initPageHeaderToolbar();\n\n        if ($this->display == 'edit' || $this->display == 'add') {\n            if ($this->className) {\n                if (!$this->loadObject(true)) {\n                    return;\n                }\n            }\n\n            $this->content .= $this->renderForm();\n        } elseif ($this->display == 'view') {\n            // Some controllers use the view action without an object\n            if ($this->className) {\n                $this->loadObject(true);\n            }\n            $this->content .= $this->renderView();\n        } elseif ($this->display == 'details') {\n            $this->content .= $this->renderDetails();\n        } elseif (!$this->ajax) {\n            $this->content .= $this->renderKpis();\n            $this->content .= $this->renderList();\n            $this->content .= $this->renderOptions();\n\n            // if we have to display the required fields form\n            if ($this->required_database) {\n                $this->content .= $this->displayRequiredFields();\n            }\n        }\n\n        $this->context->smarty->assign(\n            [\n                'maintenance_mode'          => !Configuration::get('PS_SHOP_ENABLE'),\n                'content'                   => $this->content,\n                'lite_display'              => $this->lite_display,\n                'url_post'                  => static::$currentIndex.'&token='.$this->token,\n                'show_page_header_toolbar'  => $this->show_page_header_toolbar,\n                'page_header_toolbar_title' => $this->page_header_toolbar_title,\n                'title'                     => $this->page_header_toolbar_title,\n                'toolbar_btn'               => $this->page_header_toolbar_btn,\n                'page_header_toolbar_btn'   => $this->page_header_toolbar_btn,\n            ]\n        );\n    }\n\n    /**\n     * @param int $defaultFormLanguage\n     *\n     * @return array\n     * @throws PrestaShopException\n     */\n    protected static function resolveFormLanguages(int $defaultFormLanguage): array\n    {\n        $languages = Language::getLanguages(false);\n        foreach ($languages as &$language) {\n            $isDefault = $defaultFormLanguage === (int)$language['id_lang'];\n            $language['is_default'] = $isDefault ? 1 : 0;\n        }\n        return $languages;\n    }\n\n    /**\n     * @return array\n     *\n     * @throws PrestaShopException\n     */\n    public function getLanguages()\n    {\n        if (! $this->_languages) {\n            $this->_languages = static::resolveFormLanguages($this->getDefaultFormLanguage());\n        }\n        return $this->_languages;\n    }\n\n    /**\n     * @param Cookie $cookie\n     * @param int $allowEmployeeLang\n     *\n     * @return int\n     * @throws PrestaShopException\n     */\n    protected static function resolveDefaultFormLanguage(Cookie $cookie, int $allowEmployeeLang): int\n    {\n        $languageIds = Language::getLanguages(false, false, true);\n        if ($languageIds) {\n\n            // first check last used employee language\n            if ($allowEmployeeLang) {\n                if (isset($cookie->employee_form_lang)) {\n                    $employeeLang = (int)$cookie->employee_form_lang;\n                    if (in_array($employeeLang, $languageIds)) {\n                        return $employeeLang;\n                    }\n                }\n            }\n            if (isset($cookie->employee_form_lang)) {\n                unset($cookie->employee_form_lang);\n            }\n\n            // try default language\n            $defaultLang = (int)Configuration::get('PS_LANG_DEFAULT');\n            if (in_array($defaultLang, $languageIds)) {\n                return $defaultLang;\n            }\n\n            // fallback to first language in the list\n            return $languageIds[0];\n        }\n        return 0;\n    }\n\n    /**\n     * @return int\n     *\n     * @throws PrestaShopException\n     */\n    protected function getDefaultFormLanguage(): int\n    {\n        if (is_null($this->default_form_language)) {\n            $this->default_form_language = static::resolveDefaultFormLanguage($this->context->cookie, $this->getAllowEmployeeFormLanguage());\n        }\n        return (int)$this->default_form_language;\n    }\n\n    /**\n     * @return int\n     *\n     * @throws PrestaShopException\n     */\n    protected function getAllowEmployeeFormLanguage(): int\n    {\n        if (is_null($this->allow_employee_form_lang)) {\n            $this->allow_employee_form_lang = (int)Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG');\n        }\n        return (int)$this->allow_employee_form_lang;\n    }\n\n    /**\n     * assign default action in toolbar_btn smarty var, if they are not set.\n     * uses override to specifically add, modify or remove items\n     *\n     * @throws PrestaShopException\n     */\n    public function initToolbar()\n    {\n        switch ($this->display) {\n            case 'add':\n            case 'edit':\n                // Default save button - action dynamically handled in javascript\n                $this->toolbar_btn['save'] = [\n                    'href' => '#',\n                    'desc' => $this->l('Save'),\n                ];\n                if (!$this->lite_display) {\n                    $this->toolbar_btn['cancel'] = [\n                        'href' => $this->getBackUrlParameter(),\n                        'desc' => $this->l('Cancel'),\n                    ];\n                }\n                break;\n            case 'view':\n                if (!$this->lite_display) {\n                    $this->toolbar_btn['back'] = [\n                        'href' => $this->getBackUrlParameter(),\n                        'desc' => $this->l('Back to list'),\n                    ];\n                }\n                break;\n            case 'options':\n                $this->toolbar_btn['save'] = [\n                    'href' => '#',\n                    'desc' => $this->l('Save'),\n                ];\n                break;\n            default: // list\n                $this->toolbar_btn['new'] = [\n                    'href' => static::$currentIndex.'&add'.$this->table.'&token='.$this->token,\n                    'desc' => $this->l('Add new'),\n                ];\n                if ($this->allow_export) {\n                    $this->toolbar_btn['export'] = [\n                        'href' => static::$currentIndex.'&export'.$this->table.'&token='.$this->token,\n                        'desc' => $this->l('Export'),\n                    ];\n                }\n        }\n    }\n\n    /**\n     * @return void\n     */\n    protected function addToolBarModulesListButton()\n    {\n    }\n\n    /**\n     * @return void\n     */\n    protected function filterTabModuleList()\n    {\n    }\n\n    /**\n     * Init tab modules list and add button in toolbar\n     *\n     * @deprecated 1.5.0\n     */\n    protected function initTabModuleList()\n    {\n    }\n\n    /**\n     * @param string $file\n     * @param int $timeout\n     *\n     * @return bool\n     */\n    public function isFresh($file, $timeout = 604800)\n    {\n        $path = _PS_ROOT_DIR_.$file;\n        if (file_exists($path) && filesize($path) > 0) {\n            return ((time() - filemtime($path)) < $timeout);\n        }\n\n        return false;\n    }\n\n    /**\n     * @return void\n     */\n    protected function addPageHeaderToolBarModulesListButton()\n    {\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    public function initPageHeaderToolbar()\n    {\n        if (empty($this->toolbar_title)) {\n            $this->initToolbarTitle();\n        }\n\n        if (!is_array($this->toolbar_title)) {\n            $this->toolbar_title = [$this->toolbar_title];\n        }\n\n        switch ($this->display) {\n            case 'view':\n                // Default cancel button - like old back link\n                if (!$this->lite_display) {\n                    $this->page_header_toolbar_btn['back'] = [\n                        'href' => $this->getBackUrlParameter(),\n                        'desc' => $this->l('Back to list'),\n                    ];\n                }\n                $obj = $this->loadObject(true);\n                if (Validate::isLoadedObject($obj) && isset($obj->{$this->identifier_name}) && !empty($obj->{$this->identifier_name})) {\n                    array_pop($this->toolbar_title);\n                    array_pop($this->meta_title);\n                    $this->toolbar_title[] = is_array($obj->{$this->identifier_name}) ? $obj->{$this->identifier_name}[$this->context->employee->id_lang] : $obj->{$this->identifier_name};\n                    $this->addMetaTitle($this->toolbar_title[count($this->toolbar_title) - 1]);\n                }\n                break;\n            case 'edit':\n                $obj = $this->loadObject(true);\n                if (Validate::isLoadedObject($obj) && isset($obj->{$this->identifier_name}) && !empty($obj->{$this->identifier_name})) {\n                    array_pop($this->toolbar_title);\n                    array_pop($this->meta_title);\n                    $this->toolbar_title[] = sprintf($this->l('Edit: %s'), (is_array($obj->{$this->identifier_name}) && isset($obj->{$this->identifier_name}[$this->context->employee->id_lang])) ? $obj->{$this->identifier_name}[$this->context->employee->id_lang] : $obj->{$this->identifier_name});\n                    $this->addMetaTitle($this->toolbar_title[count($this->toolbar_title) - 1]);\n                }\n                break;\n        }\n\n        if (empty($this->page_header_toolbar_title) && $this->toolbar_title) {\n            if (is_array($this->toolbar_title)) {\n                $size = count($this->toolbar_title);\n                $this->page_header_toolbar_title = $this->toolbar_title[$size - 1];\n            } else {\n                $this->page_header_toolbar_title = $this->toolbar_title;\n            }\n        }\n\n        if (is_array($this->page_header_toolbar_btn)\n            || ($this->page_header_toolbar_btn instanceof Traversable)\n            || $this->page_header_toolbar_title\n        ) {\n            $this->show_page_header_toolbar = true;\n        }\n\n        $this->context->smarty->assign('help_link', '');\n    }\n\n    /**\n     * Set default toolbar_title to admin breadcrumb\n     *\n     * @return void\n     */\n    public function initToolbarTitle()\n    {\n        $this->toolbar_title = is_array($this->breadcrumbs) ? array_unique($this->breadcrumbs) : [$this->breadcrumbs];\n\n        switch ($this->display) {\n            case 'edit':\n                $this->toolbar_title[] = $this->l('Edit', null, null, false);\n                $this->addMetaTitle($this->l('Edit', null, null, false));\n                break;\n\n            case 'add':\n                $this->toolbar_title[] = $this->l('Add new', null, null, false);\n                $this->addMetaTitle($this->l('Add new', null, null, false));\n                break;\n\n            case 'view':\n                $this->toolbar_title[] = $this->l('View', null, null, false);\n                $this->addMetaTitle($this->l('View', null, null, false));\n                break;\n        }\n\n        if ($filter = $this->addFiltersToBreadcrumbs()) {\n            $this->toolbar_title[] = $filter;\n        }\n    }\n\n    /**\n     * Add an entry to the meta title.\n     *\n     * @param string $entry New entry.\n     */\n    public function addMetaTitle($entry)\n    {\n        // Only add entry if the meta title was not forced.\n        if (is_array($this->meta_title)) {\n            $this->meta_title[] = $entry;\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function addFiltersToBreadcrumbs()\n    {\n        if ($this->filter && is_array($this->fields_list)) {\n            $filters = [];\n\n            foreach ($this->fields_list as $field => $t) {\n                if (isset($t['filter_key'])) {\n                    $field = $t['filter_key'];\n                }\n\n                $val = $this->getListFieldFilterValue($field);\n\n                if (! is_null($val)) {\n                    $filterValue = '';\n                    if (!is_array($val)) {\n                        if (isset($t['type']) && $t['type'] == 'bool') {\n                            $filterValue = ($val)\n                                ? $this->l('yes')\n                                : $this->l('no');\n                        } elseif (isset($t['type']) && $t['type'] == 'date' || isset($t['type']) && $t['type'] == 'datetime') {\n                            $date = json_decode($val, true);\n                            if (isset($date[0]) && $ts=strtotime($date[0])) {\n                                $filterValue = (string)date('Y-m-d', $ts);\n                                if (isset($date[1]) && !empty($date[1]) && $ts=strtotime($date[1])) {\n                                    $filterValue .= ' - '. date('Y-m-d', $ts);\n                                }\n                            }\n                        } elseif (is_string($val)) {\n                            $filterValue = htmlspecialchars($val, ENT_QUOTES, 'UTF-8');\n                        }\n                    } else {\n                        foreach ($val as $v) {\n                            if (is_string($v)) {\n                                $v = trim($v);\n                                if ($v !== '') {\n                                    $filterValue .= ' - '.htmlspecialchars($v, ENT_QUOTES, 'UTF-8');\n                                }\n                            }\n                        }\n                        $filterValue = ltrim($filterValue, ' -');\n                    }\n                    if ($filterValue !== '') {\n                        $filters[] = sprintf($this->l('%s: %s'), $t['title'], $filterValue);\n                    }\n                }\n            }\n\n            if (count($filters)) {\n                return sprintf($this->l('filter by %s'), implode(', ', $filters));\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Function used to render the form for this controller\n     *\n     * @return string\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderForm()\n    {\n        $this->getLanguages();\n\n        if (Tools::getValue('submitFormAjax')) {\n            $this->content .= $this->context->smarty->fetch('form_submit_ajax.tpl');\n        }\n\n        if ($this->fields_form && is_array($this->fields_form)) {\n            if (!$this->multiple_fieldsets) {\n                $this->fields_form = [['form' => $this->fields_form]];\n            }\n\n            // For add a fields via an override of $fields_form, use $fields_form_override\n            if (is_array($this->fields_form_override) && !empty($this->fields_form_override)) {\n                $this->fields_form[0]['form']['input'] = array_merge($this->fields_form[0]['form']['input'], $this->fields_form_override);\n            }\n\n            $fieldsValue = $this->getFieldsValue($this->object);\n\n            Hook::triggerEvent(\n                'action'.$this->controller_name.'FormModifier', [\n                    'fields'       => &$this->fields_form,\n                    'fields_value' => &$fieldsValue,\n                    'form_vars'    => &$this->tpl_form_vars,\n                ]\n            );\n\n            $helper = new HelperForm();\n            $this->setHelperDisplay($helper);\n            $helper->fields_value = $fieldsValue;\n            $helper->submit_action = $this->submit_action;\n            $helper->tpl_vars = $this->getTemplateFormVars();\n            $helper->show_cancel_button = (isset($this->show_form_cancel_button)) ? $this->show_form_cancel_button : ($this->display == 'add' || $this->display == 'edit');\n\n            $helper->back_url = $this->getBackUrlParameter();\n            if ($this->base_tpl_form) {\n                $helper->base_tpl = $this->base_tpl_form;\n            }\n            if ($this->hasViewPermission()) {\n                if (Tools::getValue('back')) {\n                    $helper->tpl_vars['back'] = Tools::safeOutput(Tools::getValue('back'));\n                } else {\n                    $helper->tpl_vars['back'] = Tools::safeOutput(Tools::getValue(static::$currentIndex.'&token='.$this->token));\n                }\n            }\n            $form = $helper->generateForm($this->fields_form);\n\n            return $form;\n        }\n    }\n\n    /**\n     * Return the list of fields value\n     *\n     * @param ObjectModel $obj Object\n     *\n     * @return array\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function getFieldsValue($obj)\n    {\n        foreach ($this->fields_form as $fieldset) {\n            if (isset($fieldset['form']['input'])) {\n                foreach ($fieldset['form']['input'] as $input) {\n                    if (!isset($this->fields_value[$input['name']])) {\n                        if (isset($input['type']) && $input['type'] == 'shop') {\n                            if ($obj->id) {\n                                $result = Shop::getShopById((int) $obj->id, $this->identifier, $this->table);\n                                foreach ($result as $row) {\n                                    $this->fields_value['shop'][$row['id_'.$input['type']]][] = $row['id_shop'];\n                                }\n                            }\n                        } elseif (isset($input['lang']) && $input['lang']) {\n                            foreach ($this->getLanguages() as $language) {\n                                $fieldValue = $this->getFieldValue($obj, $input['name'], $language['id_lang']);\n                                if (empty($fieldValue)) {\n                                    if (isset($input['default_value'][$language['id_lang']]) && is_array($input['default_value'])) {\n                                        $fieldValue = $input['default_value'][$language['id_lang']];\n                                    } elseif (isset($input['default_value'])) {\n                                        $fieldValue = $input['default_value'];\n                                    }\n                                }\n                                $this->fields_value[$input['name']][$language['id_lang']] = $fieldValue;\n                            }\n                        } else {\n                            $fieldValue = $this->getFieldValue($obj, $input['name']);\n                            if ($fieldValue === false && isset($input['default_value'])) {\n                                $fieldValue = $input['default_value'];\n                            }\n                            $this->fields_value[$input['name']] = $fieldValue;\n                        }\n                    }\n                }\n            }\n        }\n\n        return $this->fields_value;\n    }\n\n    /**\n     * Return field value if possible (both classical and multilingual fields)\n     *\n     * Case 1 : Return value if present in $_POST / $_GET\n     * Case 2 : Return object value\n     *\n     * @param ObjectModel|null $obj Object\n     * @param string $key Field name\n     * @param int|null $idLang Language id (optional)\n     *\n     * @return array|bool|float|int|string|null\n     */\n    public function getFieldValue($obj, $key, $idLang = null)\n    {\n        if (is_object($obj) && property_exists($obj, $key)) {\n            if ($idLang) {\n                $defaultValue = (isset($obj->id) && $obj->id && isset($obj->{$key}[$idLang])) ? $obj->{$key}[$idLang] : false;\n            } else {\n                $defaultValue = $obj->{$key} ?? false;\n            }\n        } else {\n            $defaultValue = false;\n        }\n\n        return Tools::getValue($key.($idLang ? '_'.$idLang : ''), $defaultValue);\n    }\n\n    /**\n     * This function sets various display options for helper list\n     *\n     * @param Helper $helper\n     *\n     * @throws PrestaShopException\n     */\n    public function setHelperDisplay(Helper $helper)\n    {\n        if (empty($this->toolbar_title)) {\n            $this->initToolbarTitle();\n        }\n\n        if ($helper instanceof HelperList) {\n            $this->setHelperListDisplay($helper);\n        } elseif ($helper instanceof HelperView) {\n            $this->setHelperViewDisplay($helper);\n        } elseif ($helper instanceof HelperForm) {\n            $this->setHelperFormDisplay($helper);\n        } elseif ($helper instanceof HelperOptions) {\n            $this->setHelperOptionsDisplay($helper);\n        } elseif ($helper instanceof HelperKpi) {\n            $this->setHelperKpiDisplay($helper);\n        } elseif ($helper instanceof HelperKpiRow) {\n            $this->setHelperKpiRowDisplay($helper);\n        } elseif ($helper instanceof HelperShop) {\n            $this->setHelperShopDisplay($helper);\n        } elseif ($helper instanceof HelperCalendar) {\n            $this->setHelperCalendarDisplay($helper);\n        } else {\n            $this->setHelperCommonDisplay($helper);\n        }\n        $this->helper = $helper;\n    }\n\n    /**\n     * @param Helper $helper\n     * @throws PrestaShopException\n     */\n    public function setHelperCommonDisplay(Helper $helper)\n    {\n        $helper->title = is_array($this->toolbar_title) ? implode(' '.Configuration::get('PS_NAVIGATION_PIPE').' ', $this->toolbar_title) : $this->toolbar_title;\n        $helper->toolbar_btn = $this->toolbar_btn;\n        $helper->show_toolbar = $this->show_toolbar;\n        $helper->toolbar_scroll = $this->toolbar_scroll;\n        $helper->override_folder = $this->tpl_folder;\n        $helper->currentIndex = static::$currentIndex;\n        $helper->table = $this->table;\n        $helper->identifier = $this->identifier;\n        $helper->token = $this->token;\n        $helper->bootstrap = $this->bootstrap;\n    }\n\n    /**\n     * @param HelperList $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperListDisplay(HelperList $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n        $helper->actions = $this->actions;\n        $helper->simple_header = $this->list_simple_header;\n        $helper->bulk_actions = $this->bulk_actions;\n        $helper->orderBy = $this->_orderBy;\n        $helper->orderWay = $this->_orderWay;\n        $helper->listTotal = $this->_listTotal;\n        $helper->specificConfirmDelete = $this->specificConfirmDelete;\n        $helper->no_link = $this->list_no_link;\n        $helper->colorOnBackground = $this->colorOnBackground;\n        $helper->shopLinkType = $this->shopLinkType;\n        $helper->imageType = $this->imageType;\n        $helper->ajax_params = $this->ajax_params;\n        $helper->row_hover = $this->row_hover;\n        $helper->position_identifier = $this->position_identifier;\n        $helper->position_group_identifier = $this->position_group_identifier;\n        $helper->controller_name = $this->controller_name;\n        $helper->list_id = $this->list_id ?? $this->table;\n        $helper->list_skip_actions = $this->list_skip_actions;\n    }\n\n    /**\n     * @param HelperForm $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperFormDisplay(HelperForm $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n        if ($this->object && $this->object->id) {\n            $helper->id = $this->object->id;\n        }\n        $helper->name_controller = Tools::getValue('controller');\n        $helper->languages = $this->getLanguages();\n        $helper->default_form_language = $this->getDefaultFormLanguage();\n        $helper->allow_employee_form_lang = $this->getAllowEmployeeFormLanguage();\n    }\n\n    /**\n     * @param HelperView $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperViewDisplay(HelperView $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n        if ($this->object && $this->object->id) {\n            $helper->id = $this->object->id;\n        }\n    }\n\n    /**\n     * @param HelperOptions $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperOptionsDisplay(HelperOptions $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n        if ($this->object && $this->object->id) {\n            $helper->id = $this->object->id;\n        }\n    }\n\n    /**\n     * @param HelperKpi $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperKpiDisplay(HelperKpi $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n        if ($this->object && $this->object->id) {\n            $helper->id = $this->object->id;\n        }\n    }\n\n    /**\n     * @param HelperKpiRow $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperKpiRowDisplay(HelperKpiRow $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n    }\n\n    /**\n     * @param HelperCalendar $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperCalendarDisplay(HelperCalendar $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n    }\n\n    /**\n     * @param HelperShop $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperShopDisplay(HelperShop $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n    }\n\n\n    /**\n     * @return array\n     */\n    public function getTemplateFormVars()\n    {\n        return $this->tpl_form_vars;\n    }\n\n    /**\n     * Override to render the view page\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderView()\n    {\n        $helper = new HelperView();\n        $this->setHelperDisplay($helper);\n        $helper->tpl_vars = $this->getTemplateViewVars();\n        if (!is_null($this->base_tpl_view)) {\n            $helper->base_tpl = $this->base_tpl_view;\n        }\n        $view = $helper->generateView();\n\n        return $view;\n    }\n\n    /**\n     * @return array\n     */\n    public function getTemplateViewVars()\n    {\n        return $this->tpl_view_vars;\n    }\n\n    /**\n     * Override to render the view page\n     *\n     * @return string|false\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderDetails()\n    {\n        return $this->renderList();\n    }\n\n    /**\n     * Function used to render the list to display for this controller\n     *\n     * @return string|false\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderList()\n    {\n        if (!($this->fields_list && is_array($this->fields_list))) {\n            return false;\n        }\n        $this->getList($this->context->language->id);\n\n        // If list has 'active' field, we automatically create bulk action\n        if (isset($this->fields_list) && is_array($this->fields_list) && array_key_exists('active', $this->fields_list)\n            && !empty($this->fields_list['active'])\n        ) {\n            if (!is_array($this->bulk_actions)) {\n                $this->bulk_actions = [];\n            }\n\n            $this->bulk_actions = array_merge(\n                [\n                    'enableSelection'  => [\n                        'text' => $this->l('Enable selection'),\n                        'icon' => 'icon-power-off text-success',\n                    ],\n                    'disableSelection' => [\n                        'text' => $this->l('Disable selection'),\n                        'icon' => 'icon-power-off text-danger',\n                    ],\n                    'divider'          => [\n                        'text' => 'divider',\n                    ],\n                ],\n                $this->bulk_actions\n            );\n        }\n\n        $helper = new HelperList();\n\n        // Empty list is ok\n        if (!is_array($this->_list)) {\n            $this->displayWarning($this->l('Bad SQL query', 'Helper').'<br />'.htmlspecialchars($this->_list_error));\n\n            return false;\n        }\n\n        $this->setHelperDisplay($helper);\n        $helper->_default_pagination = $this->_default_pagination;\n        $helper->_pagination = $this->_pagination;\n        $helper->tpl_vars = $this->getTemplateListVars();\n        $helper->tpl_delete_link_vars = $this->tpl_delete_link_vars;\n\n        // For compatibility reasons, we have to check standard actions in class attributes\n        foreach ($this->actions_available as $action) {\n            if (!in_array($action, $this->actions) && isset($this->$action) && $this->$action) {\n                $this->actions[] = $action;\n            }\n        }\n\n        $helper->is_cms = $this->is_cms;\n        $helper->sql = $this->_listsql;\n        $list = $helper->generateList($this->_list, $this->fields_list);\n\n        return $list;\n    }\n\n    /**\n     * Add a warning message to display at the top of the page\n     *\n     * @param string $msg\n     */\n    protected function displayWarning($msg)\n    {\n        $this->warnings[] = $msg;\n    }\n\n    /**\n     * @return array\n     */\n    public function getTemplateListVars()\n    {\n        return $this->tpl_list_vars;\n    }\n\n    /**\n     * @return void\n     */\n    public function renderModulesList()\n    {\n    }\n\n    /**\n     * @param array|string $filterModulesList\n     *\n     * @return bool\n     * @throws PrestaShopException\n     */\n    public function getModulesList($filterModulesList)\n    {\n        if (!is_array($filterModulesList) && !is_null($filterModulesList)) {\n            $filterModulesList = [$filterModulesList];\n        }\n\n        if (is_null($filterModulesList) || !count($filterModulesList)) {\n            return false;\n        } //if there is no modules to display just return false;\n\n        $allModules = Module::getModulesOnDisk(true);\n        $this->modules_list = [];\n        foreach ($allModules as $module) {\n            if ($module->id) {\n                $perm = Module::getPermissionStatic($module->id, 'configure');\n            } else {\n                $perm = $this->context->employee->hasAccess(AdminModulesController::class, Profile::PERMISSION_EDIT);\n            }\n\n            if (in_array($module->name, $filterModulesList) && $perm) {\n                $this->fillModuleData($module);\n                $this->modules_list[array_search($module->name, $filterModulesList)] = $module;\n            }\n        }\n        ksort($this->modules_list);\n\n        if (count($this->modules_list)) {\n            return true;\n        }\n\n        return false; //no module found on disk just return false;\n    }\n\n    /**\n     * @param string $fileToRefresh\n     * @param string $externalFile\n     *\n     * @return bool\n     * @throws PrestaShopException\n     */\n    public function refresh($fileToRefresh, $externalFile)\n    {\n        $guzzle = new GuzzleHttp\\Client([\n            'timeout' => 5,\n            'verify' => Configuration::getSslTrustStore(),\n        ]);\n\n        if (static::$isThirtybeesUp) {\n            try {\n                $content = (string) $guzzle->get($externalFile)->getBody();\n\n                return (bool) file_put_contents(_PS_ROOT_DIR_.$fileToRefresh, $content);\n            } catch (Throwable $e) {\n                static::$isThirtybeesUp = false;\n\n                return false;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param stdClass $module\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function fillModuleData(&$module)\n    {\n\n        // Fill module data\n        $module->logo = '../../img/questionmark.png';\n\n        if (file_exists(_PS_ROOT_DIR_.DIRECTORY_SEPARATOR.basename(_PS_MODULE_DIR_).DIRECTORY_SEPARATOR.$module->name.DIRECTORY_SEPARATOR.'logo.gif')) {\n            $module->logo = 'logo.gif';\n        }\n        if (file_exists(_PS_ROOT_DIR_.DIRECTORY_SEPARATOR.basename(_PS_MODULE_DIR_).DIRECTORY_SEPARATOR.$module->name.DIRECTORY_SEPARATOR.'logo.png')) {\n            $module->logo = 'logo.png';\n        }\n\n        $linkAdminModules = $this->context->link->getAdminLink('AdminModules', true);\n\n        $module->options['install_url'] = $linkAdminModules.'&install='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.$module->name.'&anchor='.ucfirst($module->name);\n        $module->options['update_url'] = $linkAdminModules.'&update='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.$module->name.'&anchor='.ucfirst($module->name);\n        $module->options['uninstall_url'] = $linkAdminModules.'&uninstall='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.$module->name.'&anchor='.ucfirst($module->name);\n\n        $module->optionsHtml = $this->displayModuleOptions($module);\n\n        if ((Tools::getValue('module_name') == $module->name || in_array($module->name, explode('|', Tools::getValue('modules_list')))) && Tools::getIntValue('conf') > 0) {\n            $module->message = $this->_conf[Tools::getIntValue('conf')];\n        }\n    }\n\n    /**\n     * Display modules list\n     *\n     * @param stdClass $module\n     *\n     * @return array\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function displayModuleOptions($module)\n    {\n        if (!isset($module->enable_device)) {\n            $module->enable_device = Context::DEVICE_COMPUTER | Context::DEVICE_TABLET | Context::DEVICE_MOBILE;\n        }\n\n        $this->translationsTab['confirm_uninstall_popup'] = isset($module->confirmUninstall) && $module->confirmUninstall\n            ? $module->confirmUninstall\n            : $this->l('Do you really want to uninstall this module? All its data will be lost!');\n\n        if (!isset($this->translationsTab['Disable this module'])) {\n            $this->translationsTab['Disable this module'] = $this->l('Disable this module');\n            $this->translationsTab['Enable this module for all shops'] = $this->l('Enable this module for all shops');\n            $this->translationsTab['Disable'] = $this->l('Disable');\n            $this->translationsTab['Enable'] = $this->l('Enable');\n            $this->translationsTab['Disable on mobiles'] = $this->l('Disable on mobiles');\n            $this->translationsTab['Disable on tablets'] = $this->l('Disable on tablets');\n            $this->translationsTab['Disable on computers'] = $this->l('Disable on computers');\n            $this->translationsTab['Display on mobiles'] = $this->l('Display on mobiles');\n            $this->translationsTab['Display on tablets'] = $this->l('Display on tablets');\n            $this->translationsTab['Display on computers'] = $this->l('Display on computers');\n            $this->translationsTab['Reset'] = $this->l('Reset');\n            $this->translationsTab['Configure'] = $this->l('Configure');\n            $this->translationsTab['Delete'] = $this->l('Delete');\n            $this->translationsTab['Install'] = $this->l('Install');\n            $this->translationsTab['Uninstall'] = $this->l('Uninstall');\n            $this->translationsTab['Would you like to delete the content related to this module ?'] = $this->l('Would you like to delete the content related to this module ?');\n            $this->translationsTab['This action will permanently remove the module from the server. Are you sure you want to do this?'] = $this->l('This action will permanently remove the module from the server. Are you sure you want to do this?');\n            $this->translationsTab['Remove from Favorites'] = $this->l('Remove from Favorites');\n            $this->translationsTab['Mark as Favorite'] = $this->l('Mark as Favorite');\n        }\n\n        $linkAdminModules = $this->context->link->getAdminLink('AdminModules', true);\n        $modulesOptions = [];\n\n        $hasReset = false;\n        $onclickOptions = [\n            'desactive' => '',\n            'reset' => '',\n            'configure' => '',\n            'delete' => 'return confirm(\\''.$this->translationsTab['This action will permanently remove the module from the server. Are you sure you want to do this?'].'\\');',\n            'uninstall' =>  'return confirm(\\''.$this->translationsTab['confirm_uninstall_popup'].'\\');',\n        ];\n\n        if (Validate::isModuleName($module->name) && Module::isEnabled($module->name)) {\n            $instance = Module::getInstanceByName($module->name);\n            if ($instance) {\n                // check if module has reset capability\n                if (method_exists($instance, 'reset')) {\n                    $hasReset = true;\n                }\n\n                // check if module provides custom onclick handlers\n                if (method_exists($instance, 'onclickOption')) {\n                    $href = Context::getContext()->link->getAdminLink('Module', true) . '&module_name=' . $instance->name . '&tab_module=' . $instance->tab;\n                    foreach (array_keys($onclickOptions) as $opt) {\n                        $onClick = $instance->onclickOption($opt, $href);\n                        if ($onClick) {\n                            $onclickOptions[$opt] = $onClick;\n                        }\n                    }\n                }\n            }\n        }\n\n        $configureModule = [\n            'href'    => $linkAdminModules.'&configure='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.urlencode($module->name),\n            'onclick' => $onclickOptions['configure'],\n            'title'   => '',\n            'text'    => $this->translationsTab['Configure'],\n            'cond'    => $module->id && $module->is_configurable,\n            'icon'    => 'wrench',\n        ];\n\n        $deactivateModule = [\n            'href'    => $linkAdminModules.'&module_name='.urlencode($module->name).'&'.($module->active ? 'enable=0' : 'enable=1').'&tab_module='.$module->tab,\n            'onclick' => $module->active ? $onclickOptions['desactive'] : '',\n            'title'   => Shop::isFeatureActive() ? htmlspecialchars($module->active ? $this->translationsTab['Disable this module'] : $this->translationsTab['Enable this module for all shops']) : '',\n            'text'    => $module->active ? $this->translationsTab['Disable'] : $this->translationsTab['Enable'],\n            'cond'    => $module->id,\n            'icon'    => 'off',\n        ];\n        $linkResetModule = $linkAdminModules.'&module_name='.urlencode($module->name).'&reset&tab_module='.$module->tab;\n\n\n\n        $resetModule = [\n            'href'    => $linkResetModule,\n            'onclick' => $onclickOptions['reset'],\n            'title'   => '',\n            'text'    => $this->translationsTab['Reset'],\n            'cond'    => $module->id && $module->active,\n            'icon'    => 'undo',\n            'class'   => ($hasReset ? 'reset_ready' : ''),\n        ];\n\n        $deleteModule = [\n            'href'    => $linkAdminModules.'&delete='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.urlencode($module->name),\n            'onclick' => $onclickOptions['delete'],\n            'title'   => '',\n            'text'    => $this->translationsTab['Delete'],\n            'cond'    => file_exists(_PS_MODULE_DIR_ . $module->name) && is_dir(_PS_MODULE_DIR_ . $module->name),\n            'icon'    => 'trash',\n            'class'   => 'text-danger',\n        ];\n\n        $displayMobile = [\n            'href'    => $linkAdminModules.'&module_name='.urlencode($module->name).'&'.($module->enable_device & Context::DEVICE_MOBILE ? 'disable_device' : 'enable_device').'='.Context::DEVICE_MOBILE.'&tab_module='.$module->tab,\n            'onclick' => '',\n            'title'   => htmlspecialchars($module->enable_device & Context::DEVICE_MOBILE ? $this->translationsTab['Disable on mobiles'] : $this->translationsTab['Display on mobiles']),\n            'text'    => $module->enable_device & Context::DEVICE_MOBILE ? $this->translationsTab['Disable on mobiles'] : $this->translationsTab['Display on mobiles'],\n            'cond'    => $module->id,\n            'icon'    => 'mobile',\n        ];\n\n        $displayTablet = [\n            'href'    => $linkAdminModules.'&module_name='.urlencode($module->name).'&'.($module->enable_device & Context::DEVICE_TABLET ? 'disable_device' : 'enable_device').'='.Context::DEVICE_TABLET.'&tab_module='.$module->tab,\n            'onclick' => '',\n            'title'   => htmlspecialchars($module->enable_device & Context::DEVICE_TABLET ? $this->translationsTab['Disable on tablets'] : $this->translationsTab['Display on tablets']),\n            'text'    => $module->enable_device & Context::DEVICE_TABLET ? $this->translationsTab['Disable on tablets'] : $this->translationsTab['Display on tablets'],\n            'cond'    => $module->id,\n            'icon'    => 'tablet',\n        ];\n\n        $displayComputer = [\n            'href'    => $linkAdminModules.'&module_name='.urlencode($module->name).'&'.($module->enable_device & Context::DEVICE_COMPUTER ? 'disable_device' : 'enable_device').'='.Context::DEVICE_COMPUTER.'&tab_module='.$module->tab,\n            'onclick' => '',\n            'title'   => htmlspecialchars($module->enable_device & Context::DEVICE_COMPUTER ? $this->translationsTab['Disable on computers'] : $this->translationsTab['Display on computers']),\n            'text'    => $module->enable_device & Context::DEVICE_COMPUTER ? $this->translationsTab['Disable on computers'] : $this->translationsTab['Display on computers'],\n            'cond'    => $module->id,\n            'icon'    => 'desktop',\n        ];\n\n        $install = [\n            'href'    => $linkAdminModules.'&install='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.$module->name.'&anchor='.ucfirst($module->name),\n            'onclick' => '',\n            'title'   => $this->translationsTab['Install'],\n            'text'    => $this->translationsTab['Install'],\n            'cond'    => $module->id,\n            'icon'    => 'plus-sign-alt',\n        ];\n\n        $uninstall = [\n            'href'    => $linkAdminModules.'&uninstall='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.$module->name.'&anchor='.ucfirst($module->name),\n            'onclick' => $onclickOptions['uninstall'],\n            'title'   => $this->translationsTab['Uninstall'],\n            'text'    => $this->translationsTab['Uninstall'],\n            'cond'    => $module->id,\n            'icon'    => 'minus-sign-alt',\n        ];\n\n        $removeFromFavorite = [\n            'href'        => '#',\n            'class'       => 'action_unfavorite toggle_favorite',\n            'onclick'     => '',\n            'title'       => $this->translationsTab['Remove from Favorites'],\n            'text'        => $this->translationsTab['Remove from Favorites'],\n            'cond'        => $module->id,\n            'icon'        => 'star',\n            'data-value'  => '0',\n            'data-module' => $module->name,\n        ];\n\n        $markAsFavorite = [\n            'href'        => '#',\n            'class'       => 'action_favorite toggle_favorite',\n            'onclick'     => '',\n            'title'       => $this->translationsTab['Mark as Favorite'],\n            'text'        => $this->translationsTab['Mark as Favorite'],\n            'cond'        => $module->id,\n            'icon'        => 'star',\n            'data-value'  => '1',\n            'data-module' => $module->name,\n        ];\n\n        $update = [\n            'href'    => $module->options['update_url'],\n            'onclick' => '',\n            'title'   => 'Update it!',\n            'text'    => 'Update it!',\n            'icon'    => 'refresh',\n            'cond'    => $module->id,\n        ];\n\n        $url = [\n            'href' => $module->url ?? '',\n            'onclick' => '',\n            'target'  => '_blank',\n            'title'   => $this->l('Visit module page'),\n            'text'    => $this->l('Visit module page'),\n            'cond'    => isset($module->url) && $module->url,\n            'icon'    => 'link',\n        ];\n\n        $divider = [\n            'href'    => '#',\n            'onclick' => '',\n            'title'   => 'divider',\n            'text'    => 'divider',\n            'cond'    => $module->id,\n        ];\n\n        if (isset($module->version_addons) && $module->version_addons) {\n            $modulesOptions[] = $update;\n        }\n\n        if ($module->active) {\n            $modulesOptions[] = $configureModule;\n            $modulesOptions[] = $deactivateModule;\n            $modulesOptions[] = $displayMobile;\n            $modulesOptions[] = $displayTablet;\n            $modulesOptions[] = $displayComputer;\n        } else {\n            $modulesOptions[] = $deactivateModule;\n            $modulesOptions[] = $configureModule;\n        }\n\n        $modulesOptions[] = $resetModule;\n\n\n        if ($module->id) {\n            $modulesOptions[] = $uninstall;\n        }\n\n        if (isset($module->preferences['favorite']) && $module->preferences['favorite'] == 1) {\n            $removeFromFavorite['style'] = '';\n            $markAsFavorite['style'] = 'display:none;';\n            $modulesOptions[] = $removeFromFavorite;\n            $modulesOptions[] = $markAsFavorite;\n        } else {\n            $markAsFavorite['style'] = '';\n            $removeFromFavorite['style'] = 'display:none;';\n            $modulesOptions[] = $removeFromFavorite;\n            $modulesOptions[] = $markAsFavorite;\n        }\n\n        if ($module->id == 0) {\n            $install['cond'] = 1;\n            $install['flag_install'] = 1;\n            $modulesOptions[] = $install;\n        }\n        $modulesOptions[] = $url;\n        $modulesOptions[] = $divider;\n        $modulesOptions[] = $deleteModule;\n\n        $return = [];\n        foreach ($modulesOptions as $option) {\n            if ($option['cond']) {\n\n                $html = '<a class=\"';\n\n                $isInstall = isset($option['flag_install']);\n\n                if (isset($option['class'])) {\n                    $html .= $option['class'];\n                }\n                if ($isInstall) {\n                    $html .= ' btn btn-success';\n                }\n                if (!$isInstall && count($return) == 0) {\n                    $html .= ' btn btn-default';\n                }\n\n                $html .= '\"';\n\n                if (isset($option['data-value'])) {\n                    $html .= ' data-value=\"'.$option['data-value'].'\"';\n                }\n\n                if (isset($option['data-module'])) {\n                    $html .= ' data-module=\"'.$option['data-module'].'\"';\n                }\n\n                if (isset($option['style'])) {\n                    $html .= ' style=\"'.$option['style'].'\"';\n                }\n\n                if (isset($option['target'])) {\n                    $html .= ' target=\"'.$option['target'].'\"';\n                }\n\n                $html .= ' href=\"'.htmlentities($option['href']).'\" onclick=\"'.$option['onclick'].'\"  title=\"'.$option['title'].'\"><i class=\"icon-'.(isset($option['icon']) && $option['icon'] ? $option['icon'] : 'cog').'\"></i> '.$option['text'].'</a>';\n                $return[] = $html;\n            }\n        }\n\n        return $return;\n    }\n\n    /**\n     * @return void\n     */\n    public function renderKpis()\n    {\n    }\n\n    /**\n     * Function used to render the options for this controller\n     *\n     * @return string\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderOptions()\n    {\n        Hook::triggerEvent(\n            'action'.$this->controller_name.'OptionsModifier', [\n                'options'     => &$this->fields_options,\n                'option_vars' => &$this->tpl_option_vars,\n            ]\n        );\n\n        if ($this->fields_options && is_array($this->fields_options)) {\n            if (isset($this->display) && $this->display != 'options' && $this->display != 'list') {\n                $this->show_toolbar = false;\n            } else {\n                $this->display = 'options';\n            }\n\n            unset($this->toolbar_btn);\n            $this->initToolbar();\n            $helper = new HelperOptions();\n            $this->setHelperDisplay($helper);\n            $helper->id = $this->id;\n            $helper->tpl_vars = $this->tpl_option_vars;\n            $options = $helper->generateOptions($this->fields_options);\n\n            return $options;\n        }\n    }\n\n    /**\n     * Prepare the view to display the required fields form\n     *\n     * @return string|void\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayRequiredFields()\n    {\n        if (!$this->hasAddPermission() || !$this->hasDeletePermission() || !$this->required_database) {\n            return;\n        }\n\n        $helper = new Helper();\n        $helper->currentIndex = static::$currentIndex;\n        $helper->token = $this->token;\n        $helper->override_folder = $this->override_folder;\n\n        return $helper->renderRequiredFields($this->className, $this->identifier, $this->required_fields);\n    }\n\n    /**\n     * Initialize the invalid doom page of death\n     *\n     * @return void\n     */\n    public function initCursedPage()\n    {\n        $this->layout = 'invalid_token.tpl';\n    }\n\n    /**\n     * Assign smarty variables for the footer\n     *\n     * @throws SmartyException\n     * @throws PrestaShopException\n     */\n    public function initFooter()\n    {\n        //RTL Support\n        //rtl.js overrides inline styles\n        //iso_code.css overrides default fonts for every language (optional)\n        if ($this->context->language->is_rtl) {\n            $this->addJS(_PS_JS_DIR_.'rtl.js');\n            $this->addCSS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/css/'.$this->context->language->iso_code.'.css', 'all', false);\n        }\n\n        // We assign js and css files on the last step before display template, because controller can add many js and css files\n        $this->context->smarty->assign('css_files', $this->css_files);\n        $this->context->smarty->assign('js_files', array_unique($this->js_files));\n\n        $supporter = Configuration::getSupporterInfo();\n        $this->context->smarty->assign(\n            [\n                'ps_version'   => _TB_VERSION_,\n                'timer_start'  => $this->timer_start,\n                'iso_is_fr'    => strtoupper($this->context->language->iso_code) == 'FR',\n                'modals'       => $this->renderModal(),\n                'showBecomeSupporterButton' => !$supporter,\n                'becomeSupporterUrl' => Configuration::getBecomeSupporterUrl(),\n            ]\n        );\n    }\n\n    /**\n     * @return string\n     * @throws SmartyException\n     */\n    public function renderModal()\n    {\n        $modal_render = '';\n        if (is_array($this->modals) && count($this->modals)) {\n            foreach ($this->modals as $modal) {\n                $this->context->smarty->assign($modal);\n                $modal_render .= $this->context->smarty->fetch('modal.tpl');\n            }\n        }\n\n        return $modal_render;\n    }\n\n    /**\n     * @deprecated\n     */\n    public function setDeprecatedMedia()\n    {\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    public function setMedia()\n    {\n        //Bootstrap\n        $this->addCSS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/css/'.$this->bo_css, 'all', 0);\n        $this->addCSS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/css/overrides.css', 'all', PHP_INT_MAX);\n\n        $this->addJquery();\n        $this->addjQueryPlugin(['scrollTo', 'alerts', 'chosen', 'autosize', 'fancybox']);\n        $this->addjQueryPlugin('growl', null, false);\n        $this->addJqueryUI(['ui.slider', 'ui.datepicker']);\n\n        Media::addJsDef(['currencyFormatters' => Currency::getJavascriptFormatters()]);\n\n        $this->addJS(\n            [\n                _PS_JS_DIR_.'admin.js',\n                _PS_JS_DIR_.'tools.js',\n                _PS_JS_DIR_.'jquery/plugins/timepicker/jquery-ui-timepicker-addon.js',\n            ]\n        );\n\n        //loads specific javascripts for the admin theme\n        $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/vendor/bootstrap.min.js');\n        $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/vendor/modernizr.min.js');\n        $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/vendor/enquire.min.js');\n        $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/vendor/moment-with-langs.min.js');\n        $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/admin-theme.js');\n\n        if (!$this->lite_display) {\n            $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/help.js');\n        }\n\n        if (!Tools::getValue('submitFormAjax')) {\n            $this->addJS(_PS_JS_DIR_.'admin/notifications.js');\n        }\n\n        $this->addSyntheticSchedulerJs();\n\n        // Execute Hook AdminController SetMedia\n        Hook::triggerEvent('actionAdminControllerSetMedia');\n    }\n\n    /**\n     * Init context and dependencies, handles POST and GET\n     *\n     * @throws PrestaShopException\n     */\n    public function init()\n    {\n        // Has to be removed for the next Prestashop version\n        global $currentIndex;\n\n        parent::init();\n\n        if (Tools::getValue('ajax')) {\n            $this->ajax = '1';\n        }\n\n        /* Server Params */\n        $protocol_link = (Tools::usingSecureMode() && Configuration::get('PS_SSL_ENABLED')) ? 'https://' : 'http://';\n        $protocol_content = (Tools::usingSecureMode() && Configuration::get('PS_SSL_ENABLED')) ? 'https://' : 'http://';\n\n        $this->context->link = new Link($protocol_link, $protocol_content);\n\n        if (isset($_GET['logout'])) {\n            $this->context->employee->logout();\n        }\n\n        if (isset($this->context->cookie->last_activity)) {\n            $shortExpire = defined('_TB_COOKIE_SHORT_EXPIRE_') ? _TB_COOKIE_SHORT_EXPIRE_ : 900;\n            if ((int) $this->context->cookie->last_activity + (int) $shortExpire < time()) {\n                $this->context->employee->logout();\n            } else {\n                $this->context->cookie->last_activity = time();\n            }\n        }\n\n        if ($this->controller_name != 'AdminLogin' && (!isset($this->context->employee) || !$this->context->employee->isLoggedBack())) {\n            if (isset($this->context->employee)) {\n                $this->context->employee->logout();\n            }\n\n            $email = false;\n            if (Tools::getValue('email') && Validate::isEmail(Tools::getValue('email'))) {\n                $email = Tools::getValue('email');\n            }\n\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminLogin').((!isset($_GET['logout']) && $this->controller_name != 'AdminNotFound' && Tools::getValue('controller')) ? '&redirect='.$this->controller_name : '').($email ? '&email='.$email : ''));\n        }\n\n        // Set current index\n        $current_index = 'index.php'.(($controller = Tools::getValue('controller')) ? '?controller='.$controller : '');\n        if ($back = Tools::getValue('back')) {\n            $current_index .= '&back='.urlencode($back);\n        }\n        static::$currentIndex = $current_index;\n        $currentIndex = $current_index;\n\n        if (Tools::getIntValue('liteDisplaying')) {\n            $this->display_header = false;\n            $this->display_header_javascript = true;\n            $this->display_footer = false;\n            $this->content_only = false;\n            $this->lite_display = true;\n        }\n\n        if ($this->ajax && method_exists($this, 'ajaxPreprocess')) {\n            $this->ajaxPreProcess();\n        }\n\n        $this->context->smarty->assign(\n            [\n                'table'            => $this->table,\n                'current'          => static::$currentIndex,\n                'token'            => $this->token,\n                'stock_management' => (int) Configuration::get('PS_STOCK_MANAGEMENT'),\n            ]\n        );\n\n        if ($this->display_header) {\n            $this->context->smarty->assign('displayBackOfficeHeader', Hook::displayHook('displayBackOfficeHeader'));\n        }\n\n        $this->context->smarty->assign(\n            [\n                'displayBackOfficeTop' => Hook::displayHook('displayBackOfficeTop'),\n                'submit_form_ajax'     => Tools::getIntValue('submitFormAjax'),\n            ]\n        );\n\n        Employee::setLastConnectionDate($this->context->employee->id);\n\n        $this->initProcess();\n        $this->initBreadcrumbs();\n        $this->initModal();\n    }\n\n    /**\n     * Retrieve GET and POST value and translate them to actions\n     *\n     * @return void\n     */\n    public function initProcess()\n    {\n        $this->ensureListIdDefinition();\n\n        // Manage list filtering\n        if (Tools::isSubmit('submitFilter'.$this->list_id)\n            || $this->context->cookie->{'submitFilter'.$this->list_id} !== false\n            || Tools::getValue($this->list_id.'Orderby')\n            || Tools::getValue($this->list_id.'Orderway')\n            || Tools::isSubmit('submitFilterForced')\n        ) {\n            $this->filter = true;\n        }\n\n        $this->id_object = Tools::getIntValue($this->identifier);\n\n        /* Delete object image */\n        if (isset($_GET['deleteImage'])) {\n            if ($this->hasDeletePermission()) {\n                $this->action = 'delete_image';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to delete this.');\n            }\n        } elseif (isset($_GET['delete'.$this->table])) {\n            /* Delete object */\n            if ($this->hasDeletePermission()) {\n                $this->action = 'delete';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to delete this.');\n            }\n        } elseif ((isset($_GET['status'.$this->table]) || isset($_GET['status'])) && Tools::getValue($this->identifier)) {\n            /* Change object statuts (active, inactive) */\n            if ($this->hasEditPermission()) {\n                $this->action = 'status';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n            }\n        } elseif (isset($_GET['position'])) {\n            /* Move an object */\n            if ($this->hasEditPermission()) {\n                $this->action = 'position';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n            }\n        } elseif (Tools::isSubmit('submitAdd'.$this->table)\n            || Tools::isSubmit('submitAdd'.$this->table.'AndStay')\n            || Tools::isSubmit('submitAdd'.$this->table.'AndPreview')\n            || Tools::isSubmit('submitAdd'.$this->table.'AndBackToParent')\n        ) {\n            // case 1: updating existing entry\n            if ($this->id_object) {\n                if ($this->hasEditPermission()) {\n                    $this->action = 'save';\n                    if (Tools::isSubmit('submitAdd'.$this->table.'AndStay')) {\n                        $this->display = 'edit';\n                    } else {\n                        $this->display = 'list';\n                    }\n                } else {\n                    $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n                }\n            } else {\n                // case 2: creating new entry\n                if ($this->hasAddPermission()) {\n                    $this->action = 'save';\n                    if (Tools::isSubmit('submitAdd'.$this->table.'AndStay')) {\n                        $this->display = 'edit';\n                    } else {\n                        $this->display = 'list';\n                    }\n                } else {\n                    $this->errors[] = Tools::displayError('You do not have permission to add this.');\n                }\n            }\n        } elseif (isset($_GET['add'.$this->table])) {\n            if ($this->hasAddPermission()) {\n                $this->action = 'new';\n                $this->display = 'add';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to add this.');\n            }\n        } elseif (isset($_GET['update'.$this->table]) && isset($_GET[$this->identifier])) {\n            $this->display = 'edit';\n            if (! $this->hasEditPermission()) {\n                $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n            }\n        } elseif (isset($_GET['view'.$this->table])) {\n            if ($this->hasViewPermission()) {\n                $this->display = 'view';\n                $this->action = 'view';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to view this.');\n            }\n        } elseif (isset($_GET['details'.$this->table])) {\n            if ($this->hasViewPermission()) {\n                $this->display = 'details';\n                $this->action = 'details';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to view this.');\n            }\n        } elseif (isset($_GET['export'.$this->table])) {\n            if ($this->hasViewPermission()) {\n                $this->action = 'export';\n            }\n        } elseif (isset($_POST['submitReset'.$this->list_id])) {\n            /* Cancel all filters for this tab */\n            $this->action = 'reset_filters';\n        } elseif (Tools::isSubmit('submitOptions'.$this->table) || Tools::isSubmit('submitOptions')) {\n            /* Submit options list */\n            $this->display = 'options';\n            if ($this->hasEditPermission()) {\n                $this->action = 'update_options';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n            }\n        } elseif (Tools::getValue('action') && method_exists($this, 'process'.ucfirst(Tools::toCamelCase(Tools::getValue('action'))))) {\n            $this->action = Tools::getValue('action');\n        } elseif (Tools::isSubmit('submitFields') && $this->required_database && $this->hasAddPermission() && $this->hasDeletePermission()) {\n            $this->action = 'update_fields';\n        } elseif (is_array($this->bulk_actions)) {\n            $submit_bulk_actions = array_merge(\n                [\n                    'enableSelection'  => [\n                        'text' => $this->l('Enable selection'),\n                        'icon' => 'icon-power-off text-success',\n                    ],\n                    'disableSelection' => [\n                        'text' => $this->l('Disable selection'),\n                        'icon' => 'icon-power-off text-danger',\n                    ],\n                ], $this->bulk_actions\n            );\n            foreach ($submit_bulk_actions as $bulk_action => $params) {\n                if (Tools::isSubmit('submitBulk'.$bulk_action.$this->table) || Tools::isSubmit('submitBulk'.$bulk_action)) {\n                    if ($bulk_action === 'delete') {\n                        if ($this->hasDeletePermission()) {\n                            $this->action = 'bulk'.$bulk_action;\n                            $this->boxes = Tools::getArrayValue($this->table.'Box');\n                            if (empty($this->boxes) && $this->table == 'attribute') {\n                                $this->boxes = Tools::getArrayValue($this->table.'_valuesBox');\n                            }\n                        } else {\n                            $this->errors[] = Tools::displayError('You do not have permission to delete this.');\n                        }\n                        break;\n                    } elseif ($this->hasEditPermission()) {\n                        $this->action = 'bulk'.$bulk_action;\n                        $this->boxes = Tools::getArrayValue($this->table.'Box');\n                    } else {\n                        $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n                    }\n                    break;\n                } elseif (Tools::isSubmit('submitBulk')) {\n                    if ($bulk_action === 'delete') {\n                        if ($this->hasDeletePermission()) {\n                            $this->action = 'bulk'.$bulk_action;\n                            $this->boxes = Tools::getArrayValue($this->table.'Box');\n                        } else {\n                            $this->errors[] = Tools::displayError('You do not have permission to delete this.');\n                        }\n                        break;\n                    } elseif ($this->hasEditPermission()) {\n                        $this->action = 'bulk'.Tools::getValue('select_submitBulk');\n                        $this->boxes = Tools::getArrayValue($this->table.'Box');\n                    } else {\n                        $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n                    }\n                    break;\n                }\n            }\n        } elseif (!empty($this->fields_options) && empty($this->fields_list)) {\n            $this->display = 'options';\n        }\n    }\n\n    /**\n     * Set breadcrumbs array for the controller page\n     *\n     * @param int|null $tabId\n     * @param array|null $tabs\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function initBreadcrumbs($tabId = null, $tabs = null)\n    {\n        if (is_null($tabId)) {\n            $tabId = $this->id;\n        }\n\n        $tabs = Tab::recursiveTab($tabId);\n\n        $dummy = ['name' => '', 'href' => '', 'icon' => ''];\n        $breadcrumbs2 = [\n            'container' => $dummy,\n            'tab'       => $dummy,\n            'action'    => $dummy,\n        ];\n        if (isset($tabs[0])) {\n            $this->addMetaTitle($tabs[0]['name']);\n            $breadcrumbs2['tab']['name'] = $tabs[0]['name'];\n            $breadcrumbs2['tab']['href'] = __PS_BASE_URI__.basename(_PS_ADMIN_DIR_).'/'.$this->context->link->getAdminLink($tabs[0]['class_name']);\n            if (!isset($tabs[1])) {\n                $breadcrumbs2['tab']['icon'] = 'icon-'.$tabs[0]['class_name'];\n            }\n        }\n        if (isset($tabs[1])) {\n            $breadcrumbs2['container']['name'] = $tabs[1]['name'];\n            $breadcrumbs2['container']['href'] = __PS_BASE_URI__.basename(_PS_ADMIN_DIR_).'/'.$this->context->link->getAdminLink($tabs[1]['class_name']);\n            $breadcrumbs2['container']['icon'] = 'icon-'.$tabs[1]['class_name'];\n        }\n\n        /* content, edit, list, add, details, options, view */\n        switch ($this->display) {\n            case 'add':\n                $breadcrumbs2['action']['name'] = $this->l('Add', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-plus';\n                break;\n            case 'edit':\n                $breadcrumbs2['action']['name'] = $this->l('Edit', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-pencil';\n                break;\n            case '':\n            case 'list':\n                $breadcrumbs2['action']['name'] = $this->l('List', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-th-list';\n                break;\n            case 'details':\n            case 'view':\n                $breadcrumbs2['action']['name'] = $this->l('View details', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-zoom-in';\n                break;\n            case 'options':\n                $breadcrumbs2['action']['name'] = $this->l('Options', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-cogs';\n                break;\n            case 'generator':\n                $breadcrumbs2['action']['name'] = $this->l('Generator', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-flask';\n                break;\n        }\n\n        $this->context->smarty->assign(\n            [\n                'breadcrumbs2'                   => $breadcrumbs2,\n                'quick_access_current_link_name' => $breadcrumbs2['tab']['name'].(isset($breadcrumbs2['action']) ? ' - '.$breadcrumbs2['action']['name'] : ''),\n                'quick_access_current_link_icon' => $breadcrumbs2['container']['icon'],\n            ]\n        );\n\n        /* BEGIN - Backward compatibility < 1.6.0.3 */\n        if (isset($tabs[0])) {\n            $this->breadcrumbs[] = $tabs[0]['name'];\n        }\n        $navigationPipe = (Configuration::get('PS_NAVIGATION_PIPE') ? Configuration::get('PS_NAVIGATION_PIPE') : '>');\n        $this->context->smarty->assign('navigationPipe', $navigationPipe);\n        /* END - Backward compatibility < 1.6.0.3 */\n    }\n\n    /**\n     * @return void\n     */\n    public function initModal()\n    {\n        $this->context->smarty->assign(\n            [\n                'check_url_fopen'             => (ini_get('allow_url_fopen') ? 'ok' : 'ko'),\n                'check_openssl'               => (extension_loaded('openssl') ? 'ok' : 'ko'),\n                'add_permission'              => 1,\n            ]\n        );\n    }\n\n    /**\n     * Display object details\n     *\n     * @return void\n     */\n    public function viewDetails()\n    {\n    }\n\n    /**\n     * Shortcut to set up a json success payload\n     *\n     * @param string $message Success message\n     */\n    public function jsonConfirmation($message)\n    {\n        $this->json = true;\n        $this->confirmations[] = $message;\n        if ($this->status === '') {\n            $this->status = 'ok';\n        }\n    }\n\n    /**\n     * Shortcut to set up a json error payload\n     *\n     * @param string $message Error message\n     */\n    public function jsonError($message)\n    {\n        $this->json = true;\n        $this->errors[] = $message;\n        if ($this->status === '') {\n            $this->status = 'error';\n        }\n    }\n\n    /**\n     * @deprecated 1.5.0\n     */\n    public function ajaxProcessGetModuleQuickView()\n    {\n        Tools::displayAsDeprecated();\n    }\n\n    /**\n     * Update options and preferences\n     *\n     * @throws PrestaShopException\n     */\n    protected function processUpdateOptions()\n    {\n        $this->beforeUpdateOptions();\n\n        $languages = Language::getLanguages(false);\n\n        $hideMultishopCheckbox = (Shop::getTotalShops(false, null) < 2) ? true : false;\n        foreach ($this->fields_options as $categoryData) {\n            if (!isset($categoryData['fields'])) {\n                continue;\n            }\n\n            $fields = $categoryData['fields'];\n\n            foreach ($fields as $field => $values) {\n                if (isset($values['type']) && $values['type'] == 'selectLang') {\n                    foreach ($languages as $lang) {\n                        if (Tools::getValue($field.'_'.strtoupper($lang['iso_code']))) {\n                            $fields[$field.'_'.strtoupper($lang['iso_code'])] = [\n                                'type'       => 'select',\n                                'cast'       => 'strval',\n                                'identifier' => 'mode',\n                                'list'       => $values['list'],\n                            ];\n                        }\n                    }\n                }\n            }\n\n            // Cast and validate fields.\n            foreach ($fields as $field => $values) {\n\n                // ignore doNotProcess fields\n                if (isset($options['doNotProcess']) && $options['doNotProcess']) {\n                    continue;\n                }\n\n                // We don't validate fields with no visibility\n                if (!$hideMultishopCheckbox && Shop::isFeatureActive() && isset($values['visibility']) && $values['visibility'] > Shop::getContext()) {\n                    continue;\n                }\n\n                // Apply cast before validating.\n                if (array_key_exists('cast', $values)) {\n                    $cast = $values['cast'];\n                    if (array_key_exists('type', $values)\n                        && in_array($values['type'], [\n                            'textLang',\n                            'textareaLang',\n                        ])) {\n                        foreach ($languages as $language) {\n                            $langField = $field . '_' . $language['id_lang'];\n                            $_POST[$langField] = Tools::castInput($cast, Tools::getValue($langField));\n                        }\n                    } else {\n                        $_POST[$field] = Tools::castInput($cast, Tools::getValue($field));\n                    }\n                }\n\n                // Check if field is required\n                if ((!Shop::isFeatureActive() && isset($values['required']) && $values['required'])\n                    || (Shop::isFeatureActive() && isset($_POST['multishopOverrideOption'][$field]) && isset($values['required']) && $values['required'])\n                ) {\n                    if (isset($values['type']) && $values['type'] == 'textLang') {\n                        foreach ($languages as $language) {\n                            if (($value = Tools::getValue($field.'_'.$language['id_lang'])) == false && (string) $value != '0') {\n                                $this->errors[] = sprintf(Tools::displayError('field %s is required.'), $values['title']);\n                            }\n                        }\n                    } elseif (($value = Tools::getValue($field)) == false && (string) $value != '0') {\n                        $this->errors[] = sprintf(Tools::displayError('field %s is required.'), $values['title']);\n                    }\n                }\n\n                // Check field validator\n                if (isset($values['type']) && $values['type'] == 'textLang') {\n                    foreach ($languages as $language) {\n                        if (Tools::getValue($field.'_'.$language['id_lang']) && isset($values['validation'])) {\n                            $valuesValidation = $values['validation'];\n                            if (!Validate::$valuesValidation(Tools::getValue($field.'_'.$language['id_lang']))) {\n                                $this->errors[] = sprintf(Tools::displayError('field %s is invalid.'), $values['title']);\n                            }\n                        }\n                    }\n                } elseif (Tools::getValue($field) && isset($values['validation'])) {\n                    $valuesValidation = $values['validation'];\n                    if (!Validate::$valuesValidation(Tools::getValue($field))) {\n                        $this->errors[] = sprintf(Tools::displayError('field %s is invalid.'), $values['title']);\n                    }\n                }\n\n                // Set default value\n                if (Tools::getValue($field) === false && isset($values['default'])) {\n                    $_POST[$field] = $values['default'];\n                }\n            }\n\n            if (!count($this->errors)) {\n                foreach ($fields as $key => $options) {\n\n                    // ignore doNotProcess fields\n                    if (isset($options['doNotProcess']) && $options['doNotProcess']) {\n                        continue;\n                    }\n\n                    if (Shop::isFeatureActive() && isset($options['visibility']) && $options['visibility'] > Shop::getContext()) {\n                        continue;\n                    }\n\n                    if (!$hideMultishopCheckbox && Shop::isFeatureActive() && Shop::getContext() != Shop::CONTEXT_ALL && empty($options['no_multishop_checkbox']) && empty($_POST['multishopOverrideOption'][$key])) {\n                        Configuration::deleteFromContext($key);\n                        continue;\n                    }\n\n                    // check if a method updateOptionFieldName is available\n                    $methodName = 'updateOption'.Tools::toCamelCase($key, true);\n                    if (method_exists($this, $methodName)) {\n                        $this->$methodName(Tools::getValue($key));\n                    } elseif (isset($options['type']) && in_array($options['type'], ['textLang', 'textareaLang'])) {\n                        $list = [];\n                        foreach ($languages as $language) {\n                            $val = Tools::getValue($key.'_'.$language['id_lang']);\n                            if ($this->validateField($val, $options)) {\n                                if (Validate::isCleanHtml($val)) {\n                                    $list[$language['id_lang']] = $val;\n                                } else {\n                                    $this->errors[] = Tools::displayError('Can not add configuration '.$key.' for lang '.Language::getIsoById((int) $language['id_lang']));\n                                }\n                            }\n                        }\n                        Configuration::updateValue($key, $list, isset($values['validation']) && isset($options['validation']) && $options['validation'] == 'isCleanHtml' ? true : false);\n                    } else {\n                        $isCodeField = $options['type'] === 'code';\n                        $val = $isCodeField ? Tools::getValueRaw($key) : Tools::getValue($key);\n                        if ($this->validateField($val, $options)) {\n                            if ($isCodeField) {\n                                Configuration::updateValueRaw($key, $val);\n                            } elseif (Validate::isCleanHtml($val)) {\n                                Configuration::updateValue($key, $val);\n                            } else {\n                                $this->errors[] = Tools::displayError('Can not add configuration '.$key);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        $this->display = 'list';\n        if (empty($this->errors)) {\n            $this->confirmations[] = $this->_conf[6];\n        }\n    }\n\n    /**\n     * Can be overridden\n     *\n     * @return void\n     */\n    public function beforeUpdateOptions()\n    {\n    }\n\n    /**\n     * @param mixed $value\n     * @param array $field\n     *\n     * @return bool\n     */\n    protected function validateField($value, $field)\n    {\n        if (isset($field['validation'])) {\n            $valid_method_exists = method_exists('Validate', $field['validation']);\n            if ((!isset($field['empty']) || !$field['empty'] || $value) && $valid_method_exists) {\n                $field_validation = $field['validation'];\n                if (!Validate::$field_validation($value)) {\n                    $this->errors[] = Tools::displayError($field['title'].' : Incorrect value');\n\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @return void\n     */\n    protected function redirect()\n    {\n        if ($this->errors || $this->warnings\n            || $this->informations || $this->confirmations) {\n            $token = Tools::getValue('token');\n            $messageCachePath = _PS_CACHE_DIR_.'/'.static::MESSAGE_CACHE_PATH\n                                .'-'.$token;\n\n            file_put_contents($messageCachePath, '<?php\n                $this->errors = '.var_export($this->errors, true).';\n                $this->warnings = '.var_export($this->warnings, true).';\n                $this->informations = '.var_export($this->informations, true).';\n                $this->confirmations = '.var_export($this->confirmations, true).';\n            ');\n            if (function_exists('opcache_invalidate')) {\n                opcache_invalidate($messageCachePath);\n            }\n        }\n\n        Tools::redirectAdmin($this->redirect_after);\n    }\n\n    /**\n     * Add a info message to display at the top of the page\n     *\n     * @param string $msg\n     */\n    protected function displayInformation($msg)\n    {\n        $this->informations[] = $msg;\n    }\n\n    /**\n     * Delete multiple items\n     *\n     * @return bool true if success\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    protected function processBulkDelete()\n    {\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            $result = true;\n            foreach ($this->boxes as $id) {\n                $id = (int)$id;\n                /** @var ObjectModel $objectToDelete */\n                $objectToDelete = new $this->className($id);\n                if (Validate::isLoadedObject($objectToDelete)) {\n                    if ($this->deleted && property_exists($objectToDelete, 'deleted')) {\n                        $objectToDelete->deleted = 1;\n                        $deleted = $objectToDelete->update();\n                    } else {\n                        $deleted = $objectToDelete->delete();\n                    }\n                } else {\n                    $deleted = false;\n                }\n\n                if ($deleted) {\n                    Logger::addLog(sprintf($this->l('%s deletion', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int)$objectToDelete->id, true, (int)$this->context->employee->id);\n                } else {\n                    $result = false;\n                    $this->errors[] = sprintf(Tools::displayError('Can\\'t delete #%d'), $id);\n                }\n            }\n            if ($result) {\n                $this->redirect_after = static::$currentIndex . '&conf=2&token=' . $this->token;\n            } else {\n                $this->errors[] = Tools::displayError('An error occurred while deleting this selection.');\n            }\n        } else {\n            $this->errors[] = Tools::displayError('You must select at least one element to delete.');\n        }\n\n        if (isset($result)) {\n            return $result;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    protected function ajaxProcessOpenHelp()\n    {\n        $help_class_name = $_GET['controller'];\n        $popup_content = \"<!doctype html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta charset='UTF-8'>\n\t\t\t\t<title>thirty bees Help</title>\n\t\t\t\t<link href='//help.thirtybees.com/css/help.css' rel='stylesheet'>\n\t\t\t\t<link href='//fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet'>\n\t\t\t\t<script src='\"._PS_JS_DIR_.\"jquery/jquery-1.11.0.min.js'></script>\n\t\t\t\t<script src='\"._PS_JS_DIR_.\"admin.js'></script>\n\t\t\t\t<script src='\"._PS_JS_DIR_.\"tools.js'></script>\n\t\t\t\t<script>\n\t\t\t\t\thelp_class_name='\".addslashes($help_class_name).\"';\n\t\t\t\t\tiso_user = '\".addslashes($this->context->language->iso_code).\"'\n\t\t\t\t</script>\n\t\t\t\t<script src='themes/default/js/help.js'></script>\n\t\t\t\t<script>\n\t\t\t\t\t$(function(){\n\t\t\t\t\t\tinitHelp();\n\t\t\t\t\t});\n\t\t\t\t</script>\n\t\t\t</head>\n\t\t\t<body><div id='help-container' class='help-popup'></div></body>\n\t\t</html>\";\n        $this->ajaxDie($popup_content);\n    }\n\n    /**\n     * Enable multiple items\n     *\n     * @return bool true if success\n     *\n     * @throws PrestaShopException\n     */\n    protected function processBulkEnableSelection()\n    {\n        return $this->processBulkStatusSelection(1);\n    }\n\n    /**\n     * Toggle status of multiple items\n     *\n     * @param bool $status\n     *\n     * @return bool true if success\n     *\n     * @throws PrestaShopException\n     */\n    protected function processBulkStatusSelection($status)\n    {\n        $result = true;\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            foreach ($this->boxes as $id) {\n                /** @var ObjectModel $object */\n                $object = new $this->className((int) $id);\n                if (property_exists($object, 'active')) {\n                    $object->setFieldsToUpdate(['active' => true]);\n                    $object->active = (int)$status;\n                    $result = $object->update() && $result;\n                } else {\n                    throw new PrestaShopException('property \"active\" is missing in object '.$this->className);\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Disable multiple items\n     *\n     * @return bool true if success\n     *\n     * @throws PrestaShopException\n     */\n    protected function processBulkDisableSelection()\n    {\n        return $this->processBulkStatusSelection(0);\n    }\n\n    /**\n     * @return bool\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    protected function processBulkAffectZone()\n    {\n        $result = false;\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            /** @var Country|State $object */\n            $object = new $this->className();\n            $result = $object->affectZoneToSelection(Tools::getArrayValue($this->table.'Box'), Tools::getIntValue('zone_to_affect'));\n\n            if ($result) {\n                $this->redirect_after = static::$currentIndex.'&conf=28&token='.$this->token;\n            }\n            $this->errors[] = Tools::displayError('An error occurred while assigning a zone to the selection.');\n        } else {\n            $this->errors[] = Tools::displayError('You must select at least one element to assign a new zone.');\n        }\n\n        return $result;\n    }\n\n    /**\n     * Adds javascript URI to list of javascript files included in page header\n     *\n     * @param string $uri uri to javascript file\n     * @param boolean $checkPath if true, system will check if the javascript file exits on filesystem\n     */\n    public function addJavascriptUri($uri, $checkPath)\n    {\n        parent::addJavascriptUri(Media::getUriWithVersion($uri), $checkPath);\n    }\n\n    /**\n     * Adds a new stylesheet(s) to the page header.\n     *\n     * @param string|array $cssUri Path to CSS file, or list of css files like this : array(array(uri => media_type), ...)\n     * @param string $cssMediaType\n     * @param int|null $offset\n     * @param bool $checkPath\n     *\n     * @return bool\n     */\n    public function addCSS($cssUri, $cssMediaType = 'all', $offset = null, $checkPath = true)\n    {\n        if (!is_array($cssUri)) {\n            $cssUri = [$cssUri => $cssMediaType];\n        }\n\n        $converted = [];\n        foreach ($cssUri as $cssFile => $media) {\n            if (is_string($cssFile) && strlen($cssFile) > 1) {\n                $converted[Media::getUriWithVersion($cssFile)] = $media;\n            } else {\n                $converted[Media::getUriWithVersion($media)] = $cssMediaType;\n            }\n        }\n        return parent::addCSS($converted, $cssMediaType, $offset, $checkPath);\n    }\n\n    /**\n     * Method that allows controllers to define their own custom permissions. To be overridden by subclasses\n\n     * Returns array of permission definitions. Example entry:\n     *\n     *  [\n     *       ...\n     *      [\n     *          \"permission\" => 'action-buttons\",\n     *          \"name\" => \"Buttons available to employee\"\n     *          \"description\" => \"Here you can choose what action buttons can employee use\"\n     *          \"levels\" => [\n     *              ...\n     *              'none' => 'No buttons available',\n     *              'invoice' => 'Employee can generate invoice',\n     *              'send_email' => 'Employee can send email'\n     *              'all' => 'Employee can use all buttons'\n     *              ...\n     *          ],\n     *          \"defaultLevel\" => 'all'\n     *      ]\n     *      ...\n     *  ]\n     *\n     * Controllers are responsible for enforcing selected permissions -- permission levels for current employee\n     * can be retrieved by calling method getPermLevels\n     *\n     * @return array\n     */\n    public function getPermDefinitions()\n    {\n        return [];\n    }\n\n    /**\n     * Returns permission levels for current employee. Returns map: permission -> level\n     *\n     * @return array\n     * @throws PrestaShopException\n     */\n    public function getPermLevels()\n    {\n        $perms = $this->getPermDefinitions();\n        $levels = [];\n        if ($perms) {\n            $profileId = $this->context->employee->id_profile;\n            $group = preg_replace(\"#Controller$#\", \"\", preg_replace(\"#Core$#\", \"\", get_class($this)));\n            foreach ($perms as $def) {\n                $permission = $def['permission'];\n                $level = Profile::getProfilePermission($profileId, $group, $permission);\n                if ($level === false) {\n                    $levels[$permission] = $def['defaultLevel'];\n                } else {\n                    $levels[$permission] = $level;\n                }\n            }\n        }\n        return $levels;\n    }\n\n    /**\n     * Extracts information about custom permissions from all admin controllers\n     *\n     * This method iterates over all php files in /controllers/admin directory, and use reflection to checks\n     * if controller overrides method AdminControllerCore::getPermissions()\n     *\n     * For every controller that overrides permission, new instance is created and this method is called to retrieve\n     * list of additional permissions\n     *\n     * @throws PrestaShopException\n     */\n    public static function getControllersPermissions()\n    {\n        $permissions = [];\n        $iterator = new FilesystemIterator(_PS_ADMIN_CONTROLLER_DIR_);\n        foreach ($iterator as $file) {\n            /** @var SplFileInfo $file */\n            if ($file->isFile() && preg_match('#(.*)Controller\\.php$#', $file->getFilename(), $matches)) {\n                $controllerName = $matches[1];\n                $className = $controllerName . 'Controller';\n                try {\n                    $reflection = new ReflectionMethod($className, 'getPermDefinitions');\n                    if ($reflection->getDeclaringClass()->getName() != AdminControllerCore::class) {\n                        /** @var AdminControllerCore $instance - subclass of admin controller */\n                        $instance = new $className();\n                        $permissions[$controllerName] = $instance->getPermDefinitions();\n                    }\n                } catch (ReflectionException $e) {\n                    throw new PrestaShopException(\"Failed to resolve permissions for admin controller \" . $controllerName, 0, $e);\n                }\n            }\n        }\n        return $permissions;\n    }\n\n    /**\n     * @return string\n     * @throws PrestaShopException\n     */\n    protected function getBackUrlParameter(): string\n    {\n        $back = Tools::safeOutput(Tools::getValue('back', ''));\n        if (empty($back)) {\n            $back = static::$currentIndex . '&token=' . $this->token;\n        }\n        if (!Validate::isCleanHtml($back)) {\n            throw new PrestaShopException(Tools::displayError('Parameter $back is invalid'));\n        }\n        return $back;\n    }\n\n    /**\n     * @return bool\n     */\n    protected function hasDeletePermission()\n    {\n        return $this->hasPermission(Profile::PERMISSION_DELETE);\n    }\n\n    /**\n     * Returns true, if current employee can create new records\n     *\n     * @return bool\n     */\n    protected function hasAddPermission()\n    {\n        return $this->hasPermission(Profile::PERMISSION_ADD);\n    }\n\n    /**\n     * Returns true, if current employee has view permissions\n     *\n     * @return bool\n     */\n    protected function hasViewPermission()\n    {\n        return $this->hasPermission(Profile::PERMISSION_VIEW);\n    }\n\n    /**\n     * Returns true, if current employee can edit existing records\n     *\n     * @return bool\n     */\n    protected function hasEditPermission()\n    {\n        return $this->hasPermission(Profile::PERMISSION_EDIT);\n    }\n\n    /**\n     * Returns true, if current employee has permission level\n     *\n     * @param string $permission\n     *\n     * @return bool\n     */\n    protected function hasPermission($permission)\n    {\n        if (! Profile::isValidPermission($permission)) {\n            return false;\n        }\n        if (! isset($this->tabAccess[$permission])) {\n            return false;\n        }\n        return (bool)$this->tabAccess[$permission];\n    }\n\n    /**\n     * @param string|null $orderBy\n     *\n     * @return string|null\n     */\n    protected function resolveOrderBy(?string $orderBy)\n    {\n        if (! empty($orderBy)) {\n            return $orderBy;\n        }\n        $prefix = $this->getCookieFilterPrefix();\n        if ($this->context->cookie->{$prefix . $this->list_id . 'Orderby'}) {\n            return $this->context->cookie->{$prefix . $this->list_id . 'Orderby'};\n        }\n        if ($this->_orderBy) {\n            return $this->_orderBy;\n        }\n        return $this->_defaultOrderBy;\n    }\n\n    /**\n     * @param string|null $orderWay\n     *\n     * @return string|null\n     */\n    protected function resolveOrderWay(?string $orderWay)\n    {\n        if (! empty($orderWay)) {\n            return $orderWay;\n        }\n        $prefix = $this->getCookieFilterPrefix();\n        if ($this->context->cookie->{$prefix.$this->list_id.'Orderway'}) {\n            return $this->context->cookie->{$prefix.$this->list_id.'Orderway'};\n        }\n        if ($this->_orderWay) {\n            return $this->_orderWay;\n        }\n        return $this->_defaultOrderWay;\n    }\n\n    /**\n     * @param string $field\n     *\n     * @return array|bool|float|int|string|null\n     */\n    protected function getListFieldFilterValue($field)\n    {\n        $filterName = $this->table . 'Filter_' . $field;\n        if (Tools::getIsset($filterName)) {\n            return Tools::getValue($filterName);\n        }\n        $cookieFilterName = $this->getCookieFilterPrefix() . $filterName;\n        if (isset($this->context->cookie->$cookieFilterName)) {\n            return $this->context->cookie->$cookieFilterName;\n        }\n        return null;\n    }\n\n    /**\n     * @return void\n     */\n    protected function setJSendErrorHandling()\n    {\n        $this->postProcessHandleExceptions = false;\n        static::getErrorHandler()->setErrorResponseHandler(new JSendErrorResponse(_PS_MODE_DEV_));\n    }\n}\n", "<?php\n/**\n * 2007-2016 PrestaShop\n *\n * thirty bees is an extension to the PrestaShop e-commerce software developed by PrestaShop SA\n * Copyright (C) 2017-2018 thirty bees\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@thirtybees.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.thirtybees.com for more information.\n *\n * @author    thirty bees <contact@thirtybees.com>\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2017-2018 thirty bees\n * @copyright 2007-2016 PrestaShop SA\n * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n *  PrestaShop is an internationally registered trademark & property of PrestaShop SA\n */\n\n/**\n * Class HelperListCore\n */\nclass HelperListCore extends Helper\n{\n    /**\n     * @var array $cache_lang use to cache texts in current language\n     */\n    public static $cache_lang = [];\n\n    /**\n     * @var int Number of results in list\n     */\n    public $listTotal = 0;\n\n    /**\n     * @var array Number of results in list per page (used in select field)\n     */\n    public $_pagination = [20, 50, 100, 300, 1000];\n\n    /**\n     * @var int Default number of results in list per page\n     */\n    public $_default_pagination = 50;\n\n    /**\n     * @var string ORDER BY clause determined by field/arrows in list header\n     */\n    public $orderBy;\n\n    /**\n     * @var string Default ORDER BY clause when $orderBy is not defined\n     */\n    public $_defaultOrderBy = false;\n\n    /**\n     * @var array : list of vars for button delete\n     */\n    public $tpl_delete_link_vars = [];\n\n    /**\n     * @var string Order way (ASC, DESC) determined by arrows in list header\n     */\n    public $orderWay;\n\n    /**\n     * @var string\n     */\n    public $identifier;\n\n    /**\n     * @var bool $is_cms\n     */\n    public $is_cms = false;\n\n    /**\n     * @var string\n     */\n    public $position_identifier;\n\n    /**\n     * @var string | int\n     */\n    public $position_group_identifier;\n\n    /**\n     * @var string\n     */\n    public $table_id;\n\n    /**\n     * @var bool Content line is clickable if true\n     */\n    public $no_link = false;\n\n    /**\n     * @var string\n     */\n    public $list_id;\n\n    /**\n     * @var string\n     */\n    public $controller_name;\n\n    /**\n     * @var string\n     */\n    public $imageType;\n\n    /**\n     * @var array list of required actions for each list row\n     */\n    public $actions = [];\n\n    /**\n     * @var array list of row ids associated with a given action for witch this action have to not be available\n     */\n    public $list_skip_actions = [];\n\n    /**\n     * @var array\n     */\n    public $bulk_actions = [];\n\n    /**\n     * @var bool\n     */\n    public $force_show_bulk_actions = false;\n\n    /**\n     * @var string\n     */\n    public $specificConfirmDelete = null;\n\n    /**\n     * @var bool\n     */\n    public $colorOnBackground;\n\n    /**\n     * @var bool If true, activates color on hover\n     */\n    public $row_hover = true;\n\n    /**\n     * @var string|null If not null, a title will be added on that list\n     */\n    public $title = null;\n\n    /**\n     * @var bool ask for simple header : no filters, no paginations and no sorting\n     */\n    public $simple_header = false;\n\n    /**\n     * @var array\n     */\n    public $ajax_params = [];\n\n    /**\n     * @var int\n     */\n    public $page;\n\n    /**\n     * @var string\n     */\n    public $sql;\n\n    /**\n     * @var array Cache for query results\n     */\n    protected $_list = [];\n\n    /**\n     * @var array WHERE clause determined by filter fields\n     */\n    protected $_filter;\n\n    /**\n     * @var int $deleted\n     */\n    protected $deleted = 0;\n\n    /**\n     * @var array Customize list display\n     *\n     * align  : determine value alignment\n     * prefix : displayed before value\n     * suffix : displayed after value\n     * image  : object image\n     * icon   : icon determined by values\n     * active : allow to toggle status\n     */\n    protected $fields_list;\n\n    /**\n     * @var Smarty_Internal_Template|string\n     */\n    protected $header_tpl = 'list_header.tpl';\n\n    /**\n     * @var Smarty_Internal_Template|string\n     */\n    protected $content_tpl = 'list_content.tpl';\n\n    /**\n     * @var Smarty_Internal_Template|string\n     */\n    protected $footer_tpl = 'list_footer.tpl';\n\n    /**\n     * @var string $shopLinkType\n     */\n    public $shopLinkType;\n\n    /**\n     * @var callable method used to generate link\n     */\n    public $linkUrlCallback;\n\n    /**\n     * @var string target window for drilldown link\n     */\n    public $linkUrlTarget = '_self';\n\n    /**\n     * HelperListCore constructor.\n     */\n    public function __construct()\n    {\n        $this->base_folder = 'helpers/list/';\n        $this->base_tpl = 'list.tpl';\n\n        parent::__construct();\n    }\n\n    /**\n     * Return an html list given the data to fill it up\n     *\n     * @param array $list entries to display (rows)\n     * @param array $fieldsDisplay fields (cols)\n     *\n     * @return string html\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function generateList($list, $fieldsDisplay)\n    {\n        // Append when we get a syntax error in SQL query\n        if ($list === false) {\n            $this->getController()->warnings[] = $this->l('Bad SQL query');\n\n            return false;\n        }\n\n        $this->tpl = $this->createTemplate($this->base_tpl);\n        $this->header_tpl = $this->createTemplate($this->header_tpl);\n        $this->content_tpl = $this->createTemplate($this->content_tpl);\n        $this->footer_tpl = $this->createTemplate($this->footer_tpl);\n\n        $this->_list = $list;\n        $this->fields_list = $fieldsDisplay;\n\n        $this->orderBy = preg_replace('/^([a-z _]*!)/Ui', '', $this->orderBy ?? '');\n        $this->orderWay = preg_replace('/^([a-z _]*!)/Ui', '', $this->orderWay ?? '');\n\n        $this->tpl->assign(\n            [\n                'header'  => $this->displayListHeader(), // Display list header (filtering, pagination and column names)\n                'content' => $this->displayListContent(), // Show the content of the table\n                'footer'  => $this->displayListFooter(), // Close list table and submit button\n            ]\n        );\n\n        return parent::generate();\n    }\n\n    /**\n     * Display list header (filtering, pagination and column names)\n     *\n     * @return string\n     *\n     * @throws SmartyException\n     */\n    public function displayListHeader()\n    {\n        if (is_null($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n\n        $idCat = Tools::getIntValue('id_'.($this->is_cms ? 'cms_' : '').'category');\n\n        if (empty($token)) {\n            $token = $this->token;\n        }\n\n        /* Determine total page number */\n        $pagination = $this->_default_pagination;\n        $cookie = $this->context->cookie;\n        if (in_array(Tools::getIntValue($this->list_id.'_pagination'), $this->_pagination)) {\n            $pagination = Tools::getIntValue($this->list_id.'_pagination');\n        } elseif (isset($cookie->{$this->list_id.'_pagination'}) && $cookie->{$this->list_id.'_pagination'}) {\n            $pagination = $cookie->{$this->list_id.'_pagination'};\n        }\n\n        $totalPages = max(1, ceil($this->listTotal / $pagination));\n\n        $identifier = Tools::getIsset($this->identifier) ? '&'.$this->identifier.'='.Tools::getIntValue($this->identifier) : '';\n//        $order = '';\n//        if (Tools::getIsset($this->table.'Orderby')) {\n//            $order = '&'.$this->table.'Orderby='.urlencode($this->orderBy).'&'.$this->table.'Orderway='.urlencode(strtolower($this->orderWay));\n//        }\n\n        $action = $this->currentIndex.$identifier.'&token='.$token.'#'.$this->list_id;\n\n        /* Determine current page number */\n        $page = Tools::getIntValue('submitFilter'.$this->list_id);\n\n        if (!$page) {\n            $page = 1;\n        }\n\n        if ($page > $totalPages) {\n            $page = $totalPages;\n        }\n\n        $this->page = (int) $page;\n\n        /* Choose number of results per page */\n        $selectedPagination = Tools::getValue(\n            $this->list_id.'_pagination',\n            $cookie->{$this->list_id . '_pagination'} ?? $this->_default_pagination\n        );\n\n        if (is_null($this->table_id) && $this->position_identifier && Tools::getIntValue($this->position_identifier, 1)) {\n            $this->table_id = substr($this->identifier, 3, strlen($this->identifier));\n        }\n\n        if ($this->position_identifier && ($this->orderBy == 'position' && $this->orderWay != 'DESC')) {\n            $tableDnd = true;\n        }\n\n        $prefix = str_replace(['admin', 'controller'], '', mb_strtolower((string)$this->controller_name));\n        $ajax = false;\n        $controller = $this->getController();\n        foreach ($this->fields_list as $key => $params) {\n            if (!isset($params['type'])) {\n                $params['type'] = 'text';\n            }\n\n            $valueKey = $prefix.$this->list_id.'Filter_'.(array_key_exists('filter_key', $params) ? $params['filter_key'] : $key);\n            if ($key == 'active' && strpos($key, '!') !== false) {\n                $keys = explode('!', $params['filter_key']);\n                $valueKey = $keys[1];\n            }\n            $value = $cookie->{$valueKey};\n            if (!$value && Tools::getIsset($valueKey)) {\n                $value = Tools::getValue($valueKey);\n            }\n\n            switch ($params['type']) {\n                case 'bool':\n                    if (isset($params['ajax']) && $params['ajax']) {\n                        $ajax = true;\n                    }\n                    break;\n\n                case 'date':\n                case 'datetime':\n                    if ($value) {\n                        if (is_string($value)) {\n                            $value = json_decode($value, true);\n                        }\n                        if (!Validate::isCleanHtml($value[0]) || !Validate::isCleanHtml($value[1])) {\n                            $value = '';\n                        }\n                    }\n                    $name = $this->list_id.'Filter_'.($params['filter_key'] ?? $key);\n                    $nameId = str_replace('!', '__', $name);\n\n                    $params['id_date'] = $nameId;\n                    $params['name_date'] = $name;\n\n                    $controller->addJqueryUI('ui.datepicker');\n                    break;\n\n                case 'select':\n                    foreach ($params['list'] as $optionValue => $optionDisplay) {\n                        if (isset($cookie->{$prefix.$this->list_id.'Filter_'.$params['filter_key']})\n                            && $cookie->{$prefix.$this->list_id.'Filter_'.$params['filter_key']} == $optionValue\n                            && $cookie->{$prefix.$this->list_id.'Filter_'.$params['filter_key']} != ''\n                        ) {\n                            $this->fields_list[$key]['select'][$optionValue]['selected'] = 'selected';\n                        }\n                    }\n                    break;\n\n                case 'text':\n                    if (!Validate::isCleanHtml($value)) {\n                        $value = '';\n                    }\n            }\n\n            $params['value'] = $value;\n            $this->fields_list[$key] = $params;\n        }\n\n        $hasValue = false;\n        $hasSearchField = false;\n\n        foreach ($this->fields_list as $field) {\n            if (isset($field['value']) && $field['value'] !== false && $field['value'] !== '') {\n                if (is_array($field['value']) && trim(implode('', $field['value'])) == '') {\n                    continue;\n                }\n\n                $hasValue = true;\n                break;\n            }\n            if (!(isset($field['search']) && $field['search'] === false)) {\n                $hasSearchField = true;\n            }\n        }\n\n        $this->context->smarty->assign(\n            [\n                'page'                => $page,\n                'simple_header'       => $this->simple_header,\n                'total_pages'         => $totalPages,\n                'selected_pagination' => $selectedPagination,\n                'pagination'          => $this->_pagination,\n                'list_total'          => $this->listTotal,\n                'sql'                 => str_replace('\\n', ' ', str_replace('\\r', '', (string)$this->sql)),\n                'table'               => $this->table,\n                'bulk_actions'        => $this->bulk_actions,\n                'show_toolbar'        => $this->show_toolbar,\n                'toolbar_scroll'      => $this->toolbar_scroll,\n                'toolbar_btn'         => $this->toolbar_btn,\n                'has_bulk_actions'    => $this->hasBulkActions($hasValue),\n                'filters_has_value'   => (bool) $hasValue,\n            ]\n        );\n\n        // Include dnd javascript if list contains position update functionality\n        if ($this->position_identifier && $this->orderBy === 'position') {\n            $controller->addJqueryPlugin('tablednd');\n            $controller->addJS(_PS_JS_DIR_ . 'admin/dnd.js');\n            Media::addJsDef([\n                'come_from' => $this->list_id ?? $this->table,\n                'alternate' => $this->orderWay === 'DESC'\n            ]);\n        }\n\n        $this->header_tpl->assign(\n            array_merge(\n                [\n                    'ajax'              => $ajax,\n                    'title'             => array_key_exists('title', $this->tpl_vars) ? $this->tpl_vars['title'] : $this->title,\n                    'show_filters'      => ((count($this->_list) > 1 && $hasSearchField) || $hasValue),\n                    'currentIndex'      => $this->currentIndex,\n                    'action'            => $action,\n                    'order_way'         => $this->orderWay,\n                    'order_by'          => $this->orderBy,\n                    'fields_display'    => $this->fields_list,\n                    'delete'            => in_array('delete', $this->actions),\n                    'identifier'        => $this->identifier,\n                    'id_cat'            => $idCat,\n                    'shop_link_type'    => $this->shopLinkType,\n                    'has_actions'       => !empty($this->actions),\n                    'table_id'          => $this->table_id ?? null,\n                    'table_dnd'         => $tableDnd ?? null,\n                    'name'              => $name ?? null,\n                    'name_id'           => $nameId ?? null,\n                    'row_hover'         => $this->row_hover,\n                    'list_id'           => $this->list_id ?? $this->table,\n                    'token'             => $this->token,\n                ],\n                $this->tpl_vars\n            )\n        );\n\n        return $this->header_tpl->fetch();\n    }\n\n    /**\n     * @param bool $hasValue\n     *\n     * @return bool\n     */\n    public function hasBulkActions($hasValue = false)\n    {\n        if ($this->force_show_bulk_actions) {\n            return true;\n        }\n\n        if (count($this->_list) === 0 && !$hasValue) {\n            return false;\n        }\n\n        if (is_array($this->list_skip_actions) && count($this->list_skip_actions)\n            && is_array($this->bulk_actions) && count($this->bulk_actions)\n        ) {\n            foreach ($this->bulk_actions as $action => $data) {\n                if (array_key_exists($action, $this->list_skip_actions)) {\n                    foreach ($this->_list as $row) {\n                        if (!in_array($row[$this->identifier], $this->list_skip_actions[$action])) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                }\n            }\n        }\n\n        return !empty($this->bulk_actions);\n    }\n\n    /**\n     * @return false|string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayListContent()\n    {\n        $positionGroupIdentifier = 0;\n        if (isset($this->fields_list['position'])) {\n            if ($this->position_identifier) {\n                if (! is_null($this->position_group_identifier)) {\n                    $positionGroupIdentifier = Tools::getIsset($this->position_group_identifier)\n                        ? Tools::getValue($this->position_group_identifier)\n                        : $this->position_group_identifier;\n                } else {\n                    if ($this->is_cms) {\n                        $parameter = 'id_cms_category';\n                        $defaultId = 1;\n                    } else {\n                        $parameter = 'id_category';\n                        $defaultId = (int)Category::getRootCategory()->id;\n                    }\n                    $positionGroupIdentifier = Tools::getIntValue($parameter, $defaultId);\n                }\n            } else {\n                $positionGroupIdentifier = Category::getRootCategory()->id;\n            }\n\n            $positions = array_map(function ($elem) {\n                return (int) $elem['position'];\n            }, $this->_list);\n            sort($positions);\n        }\n\n        // key_to_get is used to display the correct product category or cms category after a position change\n        $identifier = in_array($this->identifier, ['id_category', 'id_cms_category']) ? '_parent' : '';\n        if ($identifier) {\n            $keyToGet = 'id_'.($this->is_cms ? 'cms_' : '').'category'.$identifier;\n        }\n\n        foreach ($this->_list as $index => $tr) {\n            $id = null;\n            if (isset($tr[$this->identifier])) {\n                $id = $tr[$this->identifier];\n            }\n            $name = $tr['name'] ?? null;\n\n            if ($this->shopLinkType) {\n                $this->_list[$index]['short_shop_name'] = mb_strlen($tr['shop_name']) > 15 ? mb_substr($tr['shop_name'], 0, 15).'...' : $tr['shop_name'];\n            }\n\n            $isFirst = true;\n            // Check all available actions to add to the current list row\n            $controller = $this->getController();\n            foreach ($this->actions as $action) {\n                //Check if the action is available for the current row\n                if (!array_key_exists($action, $this->list_skip_actions) || !in_array($id, $this->list_skip_actions[$action])) {\n                    $methodName = 'display'.ucfirst($action).'Link';\n\n                    if (method_exists($controller, $methodName)) {\n                        $this->_list[$index][$action] = $controller->$methodName($this->token, $id, $name);\n                    } elseif ($this->module instanceof Module && method_exists($this->module, $methodName)) {\n                        $this->_list[$index][$action] = $this->module->$methodName($this->token, $id, $name);\n                    } elseif (method_exists($this, $methodName)) {\n                        $this->_list[$index][$action] = $this->$methodName($this->token, $id, $name);\n                    }\n                }\n\n                if ($isFirst && isset($this->_list[$index][$action])) {\n                    $isFirst = false;\n\n                    if (!preg_match('/a\\s*.*class/', $this->_list[$index][$action])) {\n                        $this->_list[$index][$action] = preg_replace(\n                            '/href\\s*=\\s*\\\"([^\\\"]*)\\\"/',\n                            'href=\"$1\" class=\"btn btn-default\"',\n                            $this->_list[$index][$action]\n                        );\n                    } elseif (!preg_match('/a\\s*.*class\\s*=\\s*\\\".*btn.*\\\"/', $this->_list[$index][$action])) {\n                        $this->_list[$index][$action] = preg_replace(\n                            '/a(\\s*.*)class\\s*=\\s*\\\"(.*)\\\"/',\n                            'a $1 class=\"$2 btn btn-default\"',\n                            $this->_list[$index][$action]\n                        );\n                    }\n                }\n            }\n\n            // @todo skip action for bulk actions\n            // $this->_list[$index]['has_bulk_actions'] = true;\n            foreach ($this->fields_list as $key => $params) {\n                $tmp = explode('!', $key);\n                $key = $tmp[1] ?? $tmp[0];\n                $dataValue = $tr[$key] ?? null;\n\n                if (isset($params['active'])) {\n                    // If method is defined in calling controller, use it instead of the Helper method\n                    if (method_exists($controller, 'displayEnableLink')) {\n                        $callingObj = $controller;\n                    } elseif ($this->module && method_exists($this->module, 'displayEnableLink')) {\n                        $callingObj = $this->module;\n                    } else {\n                        $callingObj = $this;\n                    }\n\n                    if (!isset($params['ajax'])) {\n                        $params['ajax'] = false;\n                    }\n                    $this->_list[$index][$key] = $callingObj->displayEnableLink(\n                        $this->token,\n                        $id,\n                        $dataValue,\n                        $params['active'],\n                        Tools::getIntValue('id_category'),\n                        Tools::getIntValue('id_product'),\n                        $params['ajax']\n                    );\n                } elseif (isset($params['activeVisu'])) {\n                    $this->_list[$index][$key] = (bool) $dataValue;\n                } elseif (isset($params['position'])) {\n                    $this->_list[$index][$key] = [\n                        'position'          => $dataValue,\n                        'position_url_down' => $this->currentIndex.\n                            (isset($keyToGet) ? '&'.$keyToGet.'='.(int) $positionGroupIdentifier : '').\n                            '&'.$this->position_identifier.'='.$id.\n                            '&way=1&position='.((int) $tr['position'] + 1).'&token='.$this->token,\n                        'position_url_up'   => $this->currentIndex.\n                            (isset($keyToGet) ? '&'.$keyToGet.'='.(int) $positionGroupIdentifier : '').\n                            '&'.$this->position_identifier.'='.$id.\n                            '&way=0&position='.((int) $tr['position'] - 1).'&token='.$this->token,\n                    ];\n                } elseif (isset($params['image'])) {\n                    // item_id is the product id in a product image context, else it is the image id.\n                    $itemId = isset($params['image_id']) ? $tr[$params['image_id']] : $id;\n                    if ($params['image'] != 'p') {\n                        $pathToImage = _PS_IMG_DIR_.$params['image'].'/'.$itemId.(isset($tr['id_image']) ? '-'.(int) $tr['id_image'] : '').'.'.$this->imageType;\n                        $this->_list[$index][$key] = ImageManager::thumbnail($pathToImage, $this->table.'_mini_'.$itemId.'_'.$this->context->shop->id.'.'.$this->imageType, 45, $this->imageType);\n                    } else {\n                        $this->_list[$index][$key] = ImageManager::getProductImageThumbnailTag($tr['id_image']);\n                    }\n                } elseif (isset($params['icon']) && (isset($params['icon'][$dataValue]) || isset($params['icon']['default']))) {\n                    $defaultIcon = 'unknown.gif';\n                    if (isset($params['icon']['default'])) {\n                        if (is_array($params['icon']['default'])) {\n                            $defaultIcon = $params['icon']['default']['src'];\n                        } else {\n                            $defaultIcon = $params['icon']['default'];\n                        }\n                    }\n                    $iconValue = $params['icon'][$dataValue] ?? $defaultIcon;\n                    if (is_array($iconValue)) {\n                        $this->_list[$index][$key] = $iconValue;\n                    } else {\n                        $this->_list[$index][$key] = [\n                            'src' => $iconValue,\n                            'alt' => sprintf($this->l(\"Value: %s\"), $dataValue),\n                        ];\n                    }\n                    // backwards compatibility for build-in icon files stored in img/admin directory\n                    if (isset($this->_list[$index][$key]['src'])) {\n                        $iconFile = $this->_list[$index][$key]['src'];\n                        if (file_exists(_PS_IMG_DIR_.'admin/'.$iconFile)) {\n                            $this->_list[$index][$key]['src'] =_PS_ADMIN_IMG_.$iconFile;\n                        }\n                    }\n                } elseif (isset($params['type']) && $params['type'] == 'float') {\n                    $this->_list[$index][$key] = rtrim(rtrim($dataValue, '0'), '.');\n                } elseif (isset($dataValue)) {\n                    if (isset($params['callback'])) {\n                        $callbackObj = (isset($params['callback_object'])) ? $params['callback_object'] : $controller;\n                        $this->_list[$index][$key] = call_user_func_array([$callbackObj, $params['callback']], [$dataValue, $tr]);\n                    } else {\n                        $this->_list[$index][$key] = $dataValue;\n                    }\n                }\n            }\n        }\n\n        $this->content_tpl->assign(\n            array_merge(\n                $this->tpl_vars,\n                [\n                    'shop_link_type'            => $this->shopLinkType,\n                    'name'                      => $name ?? null,\n                    'position_identifier'       => $this->position_identifier,\n                    'identifier'                => $this->identifier,\n                    'table'                     => $this->table,\n                    'token'                     => $this->token,\n                    'color_on_bg'               => $this->colorOnBackground,\n                    'position_group_identifier' => $positionGroupIdentifier ?? false,\n                    'bulk_actions'              => $this->bulk_actions,\n                    'positions'                 => $positions ?? null,\n                    'order_by'                  => $this->orderBy,\n                    'order_way'                 => $this->orderWay,\n                    'is_cms'                    => $this->is_cms,\n                    'fields_display'            => $this->fields_list,\n                    'list'                      => $this->_list,\n                    'actions'                   => $this->actions,\n                    'no_link'                   => $this->no_link,\n                    'current_index'             => $this->currentIndex,\n                    'linkUrlCallback'           => is_callable($this->linkUrlCallback) ? $this->linkUrlCallback : null,\n                    'linkUrlTarget'             => $this->linkUrlTarget,\n                    'view'                      => in_array('view', $this->actions),\n                    'edit'                      => in_array('edit', $this->actions),\n                    'has_actions'               => !empty($this->actions),\n                    'list_skip_actions'         => $this->list_skip_actions,\n                    'row_hover'                 => $this->row_hover,\n                    'list_id'                   => $this->list_id ?? $this->table,\n                    'checked_boxes'             => Tools::getArrayValue(($this->list_id ?? $this->table).'Box'),\n                ]\n            )\n        );\n\n        return $this->content_tpl->fetch();\n    }\n\n    /**\n     * Fetch the template for action enable\n     *\n     * @param string $token\n     * @param string $id\n     * @param bool $value state enabled or not\n     * @param string $active status\n     * @param int|null $idCategory\n     * @param int|null $idProduct\n     * @param bool $ajax\n     *\n     * @return string\n     *\n     * @throws SmartyException\n     * @throws PrestaShopException\n     */\n    public function displayEnableLink($token, $id, $value, $active, $idCategory = null, $idProduct = null, $ajax = false)\n    {\n        $tplEnable = $this->createTemplate('list_action_enable.tpl');\n        $tplEnable->assign(\n            [\n                'ajax'       => $ajax,\n                'enabled'    => (bool) $value,\n                'url_enable' => $this->currentIndex.'&'.$this->identifier.'='.$id.'&'.$active.$this->table.($ajax ? '&action='.$active.$this->table.'&ajax='.(int) $ajax : '').((int) $idCategory && (int) $idProduct ? '&id_category='.(int) $idCategory : '').($this->page && $this->page > 1 ? '&page='.(int) $this->page : '').'&token='.($token != null ? $token : $this->token),\n            ]\n        );\n\n        return $tplEnable->fetch();\n    }\n\n    /**\n     * Close list table and submit button\n     *\n     * @throws SmartyException\n     */\n    public function displayListFooter()\n    {\n        if (is_null($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n\n        $this->footer_tpl->assign(\n            array_merge(\n                $this->tpl_vars,\n                [\n                    'current' => $this->currentIndex,\n                    'list_id' => $this->list_id,\n                    'token'   => $this->token,\n                ]\n            )\n        );\n\n        return $this->footer_tpl->fetch();\n    }\n\n    /**\n     * Display duplicate action link\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayDuplicateLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_duplicate.tpl');\n        if (!array_key_exists('Bad SQL query', static::$cache_lang)) {\n            static::$cache_lang['Duplicate'] = $this->l('Duplicate');\n        }\n\n        if (!array_key_exists('Copy images too?', static::$cache_lang)) {\n            static::$cache_lang['Copy images too?'] = $this->l('This will copy the images too. If you wish to proceed, click \"Yes\". If not, click \"No\".');\n        }\n\n        $duplicate = $this->currentIndex.'&'.$this->identifier.'='.$id.'&duplicate'.$this->table;\n\n        $confirm = static::$cache_lang['Copy images too?'];\n\n        if (($this->table == 'product') && !Image::hasImages($this->context->language->id, (int) $id)) {\n            $confirm = '';\n        }\n\n        $tpl->assign(\n            [\n                'href'        => $this->currentIndex.'&'.$this->identifier.'='.$id.'&view'.$this->table.'&token='.($token != null ? $token : $this->token),\n                'action'      => static::$cache_lang['Duplicate'],\n                'confirm'     => $confirm,\n                'location_ok' => $duplicate.'&token='.($token != null ? $token : $this->token),\n                'location_ko' => $duplicate.'&noimage=1&token='.($token ? $token : $this->token),\n            ]\n        );\n\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * Display action show details of a table row\n     * This action need an ajax request with a return like this:\n     *   {\n     *     use_parent_structure: true // If false, data need to be an html\n     *     data:\n     *       [\n     *         {field_name: 'value'}\n     *       ],\n     *     fields_display: // attribute $fields_list of the admin controller\n     *   }\n     * or somethins like this:\n     *   {\n     *     use_parent_structure: false // If false, data need to be an html\n     *     data:\n     *       '<p>My html content</p>',\n     *     fields_display: // attribute $fields_list of the admin controller\n     *   }\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayDetailsLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_details.tpl');\n        if (!array_key_exists('Details', static::$cache_lang)) {\n            static::$cache_lang['Details'] = $this->l('Details');\n        }\n\n        $ajaxParams = $this->ajax_params;\n        if (!is_array($ajaxParams) || !isset($ajaxParams['action'])) {\n            $ajaxParams['action'] = 'details';\n        }\n\n        $tpl->assign(\n            [\n                'id'          => $id,\n                'href'        => $this->currentIndex.'&'.$this->identifier.'='.$id.'&details'.$this->table.'&token='.($token != null ? $token : $this->token),\n                'controller'  => str_replace('Controller', '', get_class($this->getController())),\n                'token'       => $token != null ? $token : $this->token,\n                'action'      => static::$cache_lang['Details'],\n                'params'      => $ajaxParams,\n                'json_params' => json_encode($ajaxParams),\n            ]\n        );\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * Display view action link\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayViewLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_view.tpl');\n        if (!array_key_exists('View', static::$cache_lang)) {\n            static::$cache_lang['View'] = $this->l('View');\n        }\n        $tpl->assign(\n            [\n                'href'   => $this->currentIndex.'&'.$this->identifier.'='.$id.'&view'.$this->table.'&token='.($token != null ? $token : $this->token),\n                'action' => static::$cache_lang['View'],\n            ]\n        );\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * Display edit action link\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayEditLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_edit.tpl');\n        if (!array_key_exists('Edit', static::$cache_lang)) {\n            static::$cache_lang['Edit'] = $this->l('Edit');\n        }\n        $tpl->assign(\n            [\n                'href'   => $this->currentIndex.'&'.$this->identifier.'='.$id.'&update'.$this->table.($this->page && $this->page > 1 ? '&page='.(int) $this->page : '').'&token='.($token != null ? $token : $this->token),\n                'action' => static::$cache_lang['Edit'],\n                'id'     => $id,\n            ]\n        );\n        return $tpl->fetch();\n    }\n\n    /**\n     * Display delete action link\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayDeleteLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_delete.tpl');\n\n        if (!array_key_exists('Delete', static::$cache_lang)) {\n            static::$cache_lang['Delete'] = $this->l('Delete');\n        }\n        if (!array_key_exists('DeleteItem', static::$cache_lang)) {\n            static::$cache_lang['DeleteItem'] = $this->l('Delete selected item?', 'Helper', true, false);\n        }\n        if (!array_key_exists('Name', static::$cache_lang)) {\n            static::$cache_lang['Name'] = $this->l('Name:', 'Helper', true, false);\n        }\n        if (!is_null($name)) {\n            $name = addcslashes('\\n\\n'.static::$cache_lang['Name'].' '.$name, '\\'');\n        }\n        $data = [\n            $this->identifier => $id,\n            'href'            => $this->currentIndex.'&'.$this->identifier.'='.$id.'&delete'.$this->table.'&token='.($token != null ? $token : $this->token),\n            'action'          => static::$cache_lang['Delete'],\n        ];\n        if ($this->specificConfirmDelete !== false) {\n            $data['confirm'] = !is_null($this->specificConfirmDelete)\n                ? '\\r'.$this->specificConfirmDelete\n                : Tools::safeOutput(static::$cache_lang['DeleteItem'].$name);\n        }\n        $tpl->assign(array_merge($this->tpl_delete_link_vars, $data));\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * Display default action link\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayDefaultLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_default.tpl');\n        if (!array_key_exists('Default', static::$cache_lang)) {\n            static::$cache_lang['Default'] = $this->l('Default');\n        }\n        $tpl->assign(\n            [\n                'href'   => $this->currentIndex.'&'.$this->identifier.'='.(int) $id.'&default'.$this->table.'&token='.($token != null ? $token : $this->token),\n                'action' => static::$cache_lang['Default'],\n                'name'   => $name,\n            ]\n        );\n\n        return $tpl->fetch();\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2016 PrestaShop\n *\n * thirty bees is an extension to the PrestaShop e-commerce software developed by PrestaShop SA\n * Copyright (C) 2017-2018 thirty bees\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@thirtybees.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.thirtybees.com for more information.\n *\n * @author    thirty bees <contact@thirtybees.com>\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2017-2018 thirty bees\n * @copyright 2007-2016 PrestaShop SA\n * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n *  PrestaShop is an internationally registered trademark & property of PrestaShop SA\n */\n\nuse Thirtybees\\Core\\Error\\ErrorUtils;\nuse Thirtybees\\Core\\Error\\Response\\JSendErrorResponse;\n\n/**\n * Class AdminControllerCore\n */\nclass AdminControllerCore extends Controller\n{\n    const LEVEL_VIEW = 1;\n    const LEVEL_EDIT = 2;\n    const LEVEL_ADD = 3;\n    const LEVEL_DELETE = 4;\n    const DEFAULT_VIEW_TEMPLATE = 'content.tpl';\n\n    // Cache file to make errors/warnings/informations/confirmations\n    // survive redirects.\n    const MESSAGE_CACHE_PATH = 'AdminControllerMessages.php';\n\n    /** @var string */\n    public static $currentIndex;\n    /** @var array Cache for translations */\n    public static $cache_lang = [];\n    /** @var string */\n    public $path;\n    /** @var string|string[] */\n    public $content;\n    /** @var array */\n    public $warnings = [];\n    /** @var array */\n    public $informations = [];\n    /** @var array */\n    public $confirmations = [];\n    /** @var string|false */\n    public $shopShareDatas = false;\n    /** @var array */\n    public $_languages = [];\n    /** @var int */\n    public $default_form_language;\n    /** @var int */\n    public $allow_employee_form_lang;\n    /** @var string */\n    public $layout = 'layout.tpl';\n    /** @var bool */\n    public $bootstrap = false;\n    /** @var string */\n    public $template = 'content.tpl';\n    /** @var string Associated table name */\n    public $table = 'configuration';\n    /** @var string */\n    public $list_id;\n    /** @var string Associated object class name */\n    public $className;\n    /** @var array */\n    public $tabAccess;\n    /** @var int Tab id */\n    public $id = -1;\n    /** @var bool */\n    public $required_database = false;\n    /** @var string Security token */\n    public $token;\n    /** @var string \"shop\" or \"group_shop\" */\n    public $shopLinkType;\n    /** @var array */\n    public $tpl_form_vars = [];\n    /** @var array */\n    public $tpl_list_vars = [];\n    /** @var array */\n    public $tpl_delete_link_vars = [];\n    /** @var array */\n    public $tpl_option_vars = [];\n    /** @var array */\n    public $tpl_view_vars = [];\n    /** @var array */\n    public $tpl_required_fields_vars = [];\n    /** @var string|null */\n    public $base_tpl_view = null;\n    /** @var string|null */\n    public $base_tpl_form = null;\n    /** @var bool If you want more fieldsets in the form */\n    public $multiple_fieldsets = false;\n    /** @var array */\n    public $fields_value = [];\n    /** @var bool Automatically join language table if true */\n    public $lang = false;\n    /** @var array Required_fields to display in the Required Fields form */\n    public $required_fields = [];\n    /** @var string */\n    public $tpl_folder;\n    /** @var string  */\n    public $override_folder;\n    /** @var array Name and directory where class image are located */\n    public $fieldImageSettings = [];\n    /** @var string Image type */\n    public $imageType = 'jpg';\n    /** @var string Current controller name without suffix */\n    public $controller_name;\n    /** @var int */\n    public $multishop_context = -1;\n    /** @var false */\n    public $multishop_context_group = true;\n    /** @var bool Bootstrap variable */\n    public $show_page_header_toolbar = false;\n    /** @var string Bootstrap variable */\n    public $page_header_toolbar_title;\n    /** @var array|Traversable Bootstrap variable */\n    public $page_header_toolbar_btn = [];\n    /** @var bool Bootstrap variable */\n    public $show_form_cancel_button;\n    /** @var string */\n    public $admin_webpath;\n    /** @var array */\n    public $modals = [];\n    /** @var array */\n    public $ajax_params = [];\n    /** @var string|array */\n    protected $meta_title = [];\n    /** @var string|false Object identifier inside the associated table */\n    protected $identifier = false;\n    /** @var string */\n    protected $identifier_name = 'name';\n    /** @var string Default ORDER BY clause when $_orderBy is not defined */\n    protected $_defaultOrderBy = false;\n    /** @var string */\n    protected $_defaultOrderWay = 'ASC';\n    /** @var bool Define if the header of the list contains filter and sorting links or not */\n    protected $list_simple_header;\n    /** @var array List to be generated */\n    protected $fields_list;\n    /** @var array Modules list filters */\n    protected $filter_modules_list = null;\n    /** @var array Modules list filters */\n    protected $modules_list = [];\n    /** @var array Edit form to be generated */\n    protected $fields_form;\n    /** @var array Override of $fields_form */\n    protected $fields_form_override;\n    /** @var string Override form action */\n    protected $submit_action;\n    /** @var array List of option forms to be generated */\n    protected $fields_options = [];\n    /** @var string */\n    protected $shopLink;\n    /** @var string SQL query */\n    protected $_listsql = '';\n    /** @var array Cache for query results */\n    protected $_list = [];\n    /** @var string|null */\n    protected $_list_error;\n    /** @var string|array Toolbar title */\n    protected $toolbar_title;\n    /** @var array List of toolbar buttons */\n    protected $toolbar_btn = null;\n    /** @var bool Scrolling toolbar */\n    protected $toolbar_scroll = true;\n    /** @var bool Set to false to hide toolbar and page title */\n    protected $show_toolbar = true;\n    /** @var bool Set to true to show toolbar and page title for options */\n    protected $show_toolbar_options = false;\n    /** @var int Number of results in list */\n    protected $_listTotal = 0;\n    /** @var string|false WHERE clause determined by filter fields */\n    protected $_filter;\n    /** @var string */\n    protected $_filterHaving;\n    /** @var array Temporary SQL table WHERE clause determined by filter fields */\n    protected $_tmpTableFilter = '';\n    /** @var array Number of results in list per page (used in select field) */\n    protected $_pagination = [20, 50, 100, 300, 1000];\n    /** @var int Default number of results in list per page */\n    protected $_default_pagination = 50;\n    /** @var string ORDER BY clause determined by field/arrows in list header */\n    protected $_orderBy;\n    /** @var string Order way (ASC, DESC) determined by arrows in list header */\n    protected $_orderWay;\n    /** @var array List of available actions for each list row - default actions are view, edit, delete, duplicate */\n    protected $actions_available = ['view', 'edit', 'duplicate', 'delete'];\n    /** @var array List of required actions for each list row */\n    protected $actions = [];\n    /** @var array List of row ids associated with a given action for witch this action have to not be available */\n    protected $list_skip_actions = [];\n    /* @var bool Don't show header & footer */\n    protected $lite_display = false;\n    /** @var bool List content lines are clickable if true */\n    protected $list_no_link = false;\n    /** @var bool */\n    protected $allow_export = false;\n    /** @var HelperList */\n    protected $helper;\n    /**\n     * Actions to execute on multiple selections.\n     *\n     * Usage:\n     *\n     * [\n     *      'actionName'    => [\n     *      'text'          => $this->l('Message displayed on the submit button (mandatory)'),\n     *      'confirm'       => $this->l('If set, this confirmation message will pop-up (optional)')),\n     *      'anotherAction' => [...]\n     * ];\n     *\n     * If your action is named 'actionName', you need to have a method named bulkactionName() that will be executed when the button is clicked.\n     *\n     * @var array\n     */\n    protected $bulk_actions;\n    /* @var array Ids of the rows selected */\n    protected $boxes;\n    /** @var string Do not automatically select * anymore but select only what is necessary */\n    protected $explicitSelect = false;\n    /** @var string Add fields into data query to display list */\n    protected $_select;\n    /** @var string Join tables into data query to display list */\n    protected $_join;\n    /** @var string Add conditions into data query to display list */\n    protected $_where;\n    /** @var string Group rows into data query to display list */\n    protected $_group;\n    /** @var string Having rows into data query to display list */\n    protected $_having;\n    /** @var string Use SQL_CALC_FOUND_ROWS / FOUND_ROWS to count the number of records */\n    protected $_use_found_rows = true;\n    /** @var bool */\n    protected $is_cms = false;\n    /** @var string Identifier to use for changing positions in lists (can be omitted if positions cannot be changed) */\n    protected $position_identifier;\n    /** @var string|int */\n    protected $position_group_identifier;\n    /** @var bool Table records are not deleted but marked as deleted if set to true */\n    protected $deleted = false;\n    /**  @var bool Is a list filter set */\n    protected $filter;\n    /** @var bool */\n    protected $noLink;\n    /** @var bool|string|null */\n    protected $specificConfirmDelete = null;\n    /** @var bool */\n    protected $colorOnBackground;\n    /** @var bool If true, activates color on hover */\n    protected $row_hover = true;\n    /** @var string Action to perform : 'edit', 'view', 'add', ... */\n    protected $action;\n    /** @var string */\n    protected $display;\n    /** @var bool */\n    protected $_includeContainer = true;\n    /** @var array */\n    protected $tab_modules_list = ['default_list' => [], 'slider_list' => []];\n    /** @var string */\n    protected $bo_theme;\n    /** @var bool Redirect or not after a creation */\n    protected $_redirect = true;\n    /** @var ObjectModel|null Instantiation of the class associated with the AdminController */\n    protected $object;\n    /** @var int Current object ID */\n    protected $id_object;\n    /** @var array Current breadcrumb position as an array of tab names */\n    protected $breadcrumbs;\n    /** @var array */\n    protected $list_natives_modules = [];\n    /** @var array */\n    protected $list_partners_modules = [];\n    /** @var bool if logged employee has access to AdminImport */\n    protected $can_import = false;\n    /** @var array */\n    protected $translationsTab = [];\n    /** @var bool $isThirtybeesUp */\n    public static $isThirtybeesUp = true;\n    /** @var float */\n    protected $timer_start;\n    /** @var string */\n    protected $bo_css;\n    /** @var array */\n    protected array $_conf = [];\n\n    /**\n     * If set to true, any exception throws in postProcess() phase will be converted to error message. Otherwise,\n     * exceptions will cause error page response\n     *\n     * @var bool\n     */\n    protected $postProcessHandleExceptions = true;\n\n    /**\n     * AdminControllerCore constructor.\n     *\n     * @throws PrestaShopException\n     */\n    public function __construct()\n    {\n        global $timer_start;\n        global $token;\n\n        $this->timer_start = $timer_start;\n\n        $messageCachePath = _PS_CACHE_DIR_.'/'.static::MESSAGE_CACHE_PATH\n                            .'-'.Tools::getValue('token');\n        if (is_readable($messageCachePath)) {\n            include $messageCachePath;\n            unlink($messageCachePath);\n        }\n\n        $this->controller_type = 'admin';\n        $this->controller_name = get_class($this);\n        if (strpos($this->controller_name, 'Controller')) {\n            $this->controller_name = substr($this->controller_name, 0, -10);\n        }\n        parent::__construct();\n\n        if ($this->multishop_context == -1) {\n            $this->multishop_context = Shop::CONTEXT_ALL | Shop::CONTEXT_GROUP | Shop::CONTEXT_SHOP;\n        }\n\n        $defaultThemeName = 'default';\n\n        if (defined('_PS_BO_DEFAULT_THEME_') && _PS_BO_DEFAULT_THEME_\n            && @filemtime(_PS_BO_ALL_THEMES_DIR_._PS_BO_DEFAULT_THEME_.DIRECTORY_SEPARATOR.'template')\n        ) {\n            $defaultThemeName = _PS_BO_DEFAULT_THEME_;\n        }\n\n        $this->bo_theme = ((Validate::isLoadedObject($this->context->employee)\n            && $this->context->employee->bo_theme) ? $this->context->employee->bo_theme : $defaultThemeName);\n\n        if (!@filemtime(_PS_BO_ALL_THEMES_DIR_.$this->bo_theme.DIRECTORY_SEPARATOR.'template')) {\n            $this->bo_theme = $defaultThemeName;\n        }\n\n        $this->bo_css = ((Validate::isLoadedObject($this->context->employee)\n            && $this->context->employee->bo_css) ? $this->context->employee->bo_css : 'admin-theme.css');\n\n        if (!@filemtime(_PS_BO_ALL_THEMES_DIR_.$this->bo_theme.DIRECTORY_SEPARATOR.'css'.DIRECTORY_SEPARATOR.$this->bo_css)) {\n            $this->bo_css = 'admin-theme.css';\n        }\n\n        $this->context->smarty->setTemplateDir(\n            [\n                _PS_BO_ALL_THEMES_DIR_.$this->bo_theme.DIRECTORY_SEPARATOR.'template',\n                _PS_OVERRIDE_DIR_.'controllers'.DIRECTORY_SEPARATOR.'admin'.DIRECTORY_SEPARATOR.'templates',\n            ]\n        );\n\n        $this->id = Tab::getIdFromClassName($this->controller_name);\n        $this->token = Tools::getAdminToken($this->controller_name.(int) $this->id.(int) $this->context->employee->id);\n\n        $token = $this->token;\n\n        $this->_conf = [\n            1  => $this->l('Successful deletion'),\n            2  => $this->l('The selection has been successfully deleted.'),\n            3  => $this->l('Successful creation'),\n            4  => $this->l('Successful update'),\n            5  => $this->l('The status has been successfully updated.'),\n            6  => $this->l('The settings have been successfully updated.'),\n            7  => $this->l('The image was successfully deleted.'),\n            8  => $this->l('The module was successfully downloaded.'),\n            9  => $this->l('The thumbnails were successfully regenerated.'),\n            10 => $this->l('The message was successfully sent to the customer.'),\n            11 => $this->l('Comment successfully added'),\n            12 => $this->l('Module(s) installed successfully.'),\n            13 => $this->l('Module(s) uninstalled successfully.'),\n            14 => $this->l('The translation was successfully copied.'),\n            15 => $this->l('The translations have been successfully added.'),\n            16 => $this->l('The module transplanted successfully to the hook.'),\n            17 => $this->l('The module was successfully removed from the hook.'),\n            18 => $this->l('Successful upload'),\n            19 => $this->l('Duplication was completed successfully.'),\n            20 => $this->l('The translation was added successfully, but the language has not been created.'),\n            21 => $this->l('Module reset successfully.'),\n            22 => $this->l('Module deleted successfully.'),\n            23 => $this->l('Localization pack imported successfully.'),\n            24 => $this->l('Localization pack imported successfully.'),\n            25 => $this->l('The selected images have successfully been moved.'),\n            26 => $this->l('Your cover image selection has been saved.'),\n            27 => $this->l('The image\\'s shop association has been modified.'),\n            28 => $this->l('A zone has been assigned to the selection successfully.'),\n            29 => $this->l('Successful upgrade'),\n            30 => $this->l('A partial refund was successfully created.'),\n            31 => $this->l('The discount was successfully generated.'),\n            32 => $this->l('Successfully signed in'),\n        ];\n\n        if (!$this->identifier) {\n            $this->identifier = 'id_'.$this->table;\n        }\n        if (!$this->_defaultOrderBy) {\n            $this->_defaultOrderBy = $this->identifier;\n        }\n        $this->tabAccess = Profile::getProfileAccess($this->context->employee->id_profile, $this->id);\n\n        if (!Shop::isFeatureActive()) {\n            $this->shopLinkType = '';\n        }\n\n        //$this->base_template_folder = _PS_BO_ALL_THEMES_DIR_.$this->bo_theme.'/template';\n        $this->override_folder = Tools::toUnderscoreCase(substr($this->controller_name, 5)).'/';\n        // Get the name of the folder containing the custom tpl files\n        $this->tpl_folder = Tools::toUnderscoreCase(substr($this->controller_name, 5)).'/';\n\n        $this->initShopContext();\n\n        $this->context->currency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n\n        $this->admin_webpath = str_ireplace(_PS_CORE_DIR_, '', _PS_ADMIN_DIR_);\n        $this->admin_webpath = preg_replace('/^'.preg_quote(DIRECTORY_SEPARATOR, '/').'/', '', $this->admin_webpath);\n\n        $this->can_import = $this->context->employee->hasAccess(AdminImportController::class, Profile::PERMISSION_VIEW);\n        $this->context->smarty->assign('can_import', $this->can_import);\n    }\n\n    /**\n     * Non-static method which uses AdminController::translate()\n     *\n     * @param string $string Term or expression in english\n     * @param string|null $class Name of the class\n     * @param bool $addslashes If set to true, the return value will pass through addslashes(). Otherwise, stripslashes().\n     * @param bool $htmlentities If set to true(default), the return value will pass through htmlentities($string, ENT_QUOTES, 'utf-8')\n     *\n     * @return string The translation if available, or the english default text.\n     */\n    protected function l($string, $class = null, $addslashes = false, $htmlentities = true)\n    {\n        if ($class === null || $class == 'AdminTab') {\n            $class = substr(get_class($this), 0, -10);\n        } elseif (strtolower(substr($class, -10)) == 'controller') {\n            /* classname has changed, from AdminXXX to AdminXXXController, so we remove 10 characters and we keep same keys */\n            $class = substr($class, 0, -10);\n        }\n\n        return Translate::getAdminTranslation($string, $class, $addslashes, $htmlentities);\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    public function initShopContext()\n    {\n        if (!$this->context->employee->isLoggedBack()) {\n            return;\n        }\n\n        // Change shop context ?\n        if (Shop::isFeatureActive() && Tools::getValue('setShopContext') !== false) {\n            $this->context->cookie->shopContext = Tools::getValue('setShopContext');\n            $url = parse_url($_SERVER['REQUEST_URI']);\n            $query = (isset($url['query'])) ? $url['query'] : '';\n            parse_str($query, $parseQuery);\n            unset($parseQuery['setShopContext'], $parseQuery['conf']);\n            $this->redirect_after = $url['path'].'?'.http_build_query($parseQuery, '', '&');\n        } elseif (!Shop::isFeatureActive()) {\n            $this->context->cookie->shopContext = 's-'.(int) Configuration::get('PS_SHOP_DEFAULT');\n        } elseif (Shop::getTotalShops(false, null) < 2) {\n            $this->context->cookie->shopContext = 's-'.(int) $this->context->employee->getDefaultShopID();\n        }\n\n        $idShop = '';\n        Shop::setContext(Shop::CONTEXT_ALL);\n        if ($this->context->cookie->shopContext) {\n            $split = explode('-', $this->context->cookie->shopContext);\n            if (count($split) == 2) {\n                if ($split[0] == 'g') {\n                    if ($this->context->employee->hasAuthOnShopGroup((int) $split[1])) {\n                        Shop::setContext(Shop::CONTEXT_GROUP, (int) $split[1]);\n                    } else {\n                        $idShop = (int) $this->context->employee->getDefaultShopID();\n                        Shop::setContext(Shop::CONTEXT_SHOP, $idShop);\n                    }\n                } elseif (Shop::getShop($split[1]) && $this->context->employee->hasAuthOnShop($split[1])) {\n                    $idShop = (int) $split[1];\n                    Shop::setContext(Shop::CONTEXT_SHOP, $idShop);\n                } else {\n                    $idShop = (int) $this->context->employee->getDefaultShopID();\n                    Shop::setContext(Shop::CONTEXT_SHOP, $idShop);\n                }\n            }\n        }\n\n        // Check multishop context and set right context if need\n        if (!($this->multishop_context & Shop::getContext())) {\n            if (Shop::getContext() == Shop::CONTEXT_SHOP && !($this->multishop_context & Shop::CONTEXT_SHOP)) {\n                Shop::setContext(Shop::CONTEXT_GROUP, Shop::getContextShopGroupID());\n            }\n            if (Shop::getContext() == Shop::CONTEXT_GROUP && !($this->multishop_context & Shop::CONTEXT_GROUP)) {\n                Shop::setContext(Shop::CONTEXT_ALL);\n            }\n        }\n\n        // Replace existing shop if necessary\n        if (!$idShop) {\n            $this->context->shop = new Shop((int) Configuration::get('PS_SHOP_DEFAULT'));\n        } elseif ($this->context->shop->id != $idShop) {\n            $this->context->shop = new Shop((int) $idShop);\n        }\n\n        if ($this->context->shop->id_theme != $this->context->theme->id) {\n            $this->context->theme = new Theme((int) $this->context->shop->id_theme);\n        }\n\n        // Replace current default country\n        $this->context->country = new Country((int) Configuration::get('PS_COUNTRY_DEFAULT'));\n    }\n\n    /**\n     * @return false|mixed\n     *\n     * @throws PrestaShopException\n     */\n    public function postProcess()\n    {\n        try {\n            if ($this->ajax) {\n                // from ajax-tab.php\n                $action = Tools::getValue('action');\n                // no need to use displayConf() here\n                if (!empty($action) && method_exists($this, 'ajaxProcess'.Tools::toCamelCase($action))) {\n                    Hook::triggerEvent('actionAdmin'.ucfirst($action).'Before', ['controller' => $this]);\n                    Hook::triggerEvent('action'.get_class($this).ucfirst($action).'Before', ['controller' => $this]);\n\n                    $return = $this->{'ajaxProcess'.Tools::toCamelCase($action)}();\n\n                    Hook::triggerEvent('actionAdmin'.ucfirst($action).'After', ['controller' => $this, 'return' => $return]);\n                    Hook::triggerEvent('action'.get_class($this).ucfirst($action).'After', ['controller' => $this, 'return' => $return]);\n\n                    return $return;\n                } elseif (!empty($action) && $this->controller_name == 'AdminModules' && Tools::getIsset('configure')) {\n                    $moduleObj = Module::getInstanceByName(Tools::getValue('configure'));\n                    if (Validate::isLoadedObject($moduleObj) && method_exists($moduleObj, 'ajaxProcess'.$action)) {\n                        return $moduleObj->{'ajaxProcess'.$action}();\n                    }\n                } elseif (method_exists($this, 'ajaxProcess')) {\n                    return $this->ajaxProcess();\n                }\n            } else {\n                // Process list filtering\n                if ($this->filter && $this->action != 'reset_filters') {\n                    $this->processFilter();\n                }\n\n                if (isset($_POST) && count($_POST) && Tools::getIntValue('submitFilter'.$this->list_id) || Tools::isSubmit('submitReset'.$this->list_id)) {\n                    $this->setRedirectAfter(static::$currentIndex.'&token='.$this->token.(Tools::isSubmit('submitFilter'.$this->list_id) ? '&submitFilter'.$this->list_id.'='.Tools::getIntValue('submitFilter'.$this->list_id) : '').(isset($_GET['id_'.$this->list_id]) ? '&id_'.$this->list_id.'='.(int) $_GET['id_'.$this->list_id] : ''));\n\n                    if (!empty(Tools::getValue('id_'.$this->list_id.'_category'))) {\n                        $this->setRedirectAfter($this->redirect_after.'&id_'.$this->list_id.'_category='.Tools::getValue('id_'.$this->list_id.'_category'));\n                    }\n                }\n\n                // If the method named after the action exists, call \"before\" hooks, then call action method, then call \"after\" hooks\n                if (!empty($this->action) && method_exists($this, 'process'.ucfirst(Tools::toCamelCase($this->action)))) {\n                    // Hook before action\n                    Hook::triggerEvent('actionAdmin'.ucfirst($this->action).'Before', ['controller' => $this]);\n                    Hook::triggerEvent('action'.get_class($this).ucfirst($this->action).'Before', ['controller' => $this]);\n                    // Call process\n                    $return = $this->{'process'.Tools::toCamelCase($this->action)}();\n                    // Hook After Action\n                    Hook::triggerEvent('actionAdmin'.ucfirst($this->action).'After', ['controller' => $this, 'return' => $return]);\n                    Hook::triggerEvent('action'.get_class($this).ucfirst($this->action).'After', ['controller' => $this, 'return' => $return]);\n\n                    return $return;\n                }\n            }\n        } catch (Throwable $e) {\n            if ($this->postProcessHandleExceptions) {\n                static::getErrorHandler()->logFatalError(ErrorUtils::describeException($e));\n                $this->errors[] = $e->getMessage();\n            } else {\n                if ($e instanceof PrestaShopException) {\n                    throw $e;\n                } else {\n                    throw new PrestaShopException($e->getMessage(), 0, $e);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function processFilter()\n    {\n        Hook::triggerEvent('action'.$this->controller_name.'ListingFieldsModifier', ['fields' => &$this->fields_list]);\n\n        $this->ensureListIdDefinition();\n\n        $prefix = $this->getCookieFilterPrefix();\n\n        // Reset current filter, if forced filter was applied\n        if (Tools::isSubmit('submitFilterForced')) {\n            $this->processResetFilters();\n            $_POST['submitFilter'.$this->list_id] = true;\n        }\n\n        if (isset($this->list_id)) {\n            foreach ($_POST as $key => $value) {\n                if ($value === '') {\n                    unset($this->context->cookie->{$prefix.$key});\n                } elseif (stripos($key, $this->list_id.'Filter_') === 0) {\n                    $this->context->cookie->{$prefix.$key} = !is_array($value) ? $value : json_encode($value);\n                } elseif (stripos($key, 'submitFilter') === 0) {\n                    $this->context->cookie->$key = !is_array($value) ? $value : json_encode($value);\n                }\n            }\n\n            foreach ($_GET as $key => $value) {\n\n                // Handle forced filtering parameter by url\n                if (stripos($key, 'list_idFilter_') === 0) {\n                    $key = preg_replace('/list_id/', $this->list_id, $key, 1);\n                }\n\n                if (stripos($key, $this->list_id.'Filter_') === 0) {\n                    $this->context->cookie->{$prefix.$key} = !is_array($value) ? $value : json_encode($value);\n                } elseif (stripos($key, 'submitFilter') === 0) {\n                    $this->context->cookie->$key = !is_array($value) ? $value : json_encode($value);\n                }\n                if (stripos($key, $this->list_id.'Orderby') === 0 && Validate::isOrderBy($value)) {\n                    if ($value === '' || $value == $this->_defaultOrderBy) {\n                        unset($this->context->cookie->{$prefix.$key});\n                    } else {\n                        $this->context->cookie->{$prefix.$key} = $value;\n                    }\n                } elseif (stripos($key, $this->list_id.'Orderway') === 0 && Validate::isOrderWay($value)) {\n                    if ($value === '' || $value == $this->_defaultOrderWay) {\n                        unset($this->context->cookie->{$prefix.$key});\n                    } else {\n                        $this->context->cookie->{$prefix.$key} = $value;\n                    }\n                }\n            }\n        }\n\n        $filters = $this->context->cookie->getFamily($prefix.$this->list_id.'Filter_');\n        $definition = false;\n        if (isset($this->className) && $this->className) {\n            $definition = ObjectModel::getDefinition($this->className);\n        }\n\n        foreach ($filters as $key => $value) {\n            /* Extracting filters from $_POST on key filter_ */\n            if ($value != null && !strncmp($key, $prefix.$this->list_id.'Filter_', 7 + mb_strlen($prefix.$this->list_id))) {\n                $key = mb_substr($key, 7 + mb_strlen($prefix.$this->list_id));\n                /* Table alias could be specified using a ! eg. alias!field */\n                $tmpTab = explode('!', $key);\n                $filter = count($tmpTab) > 1 ? $tmpTab[1] : $tmpTab[0];\n\n                if ($field = $this->filterToField($key, $filter)) {\n                    $type = (array_key_exists('filter_type', $field) ? $field['filter_type'] : (array_key_exists('type', $field) ? $field['type'] : false));\n                    if (($type == 'date' || $type == 'datetime') && is_string($value)) {\n                        $value = json_decode($value, true);\n                    }\n                    $key = isset($tmpTab[1]) ? $tmpTab[0].'.`'.$tmpTab[1].'`' : '`'.$tmpTab[0].'`';\n\n                    // Assignment by reference\n                    if (array_key_exists('tmpTableFilter', $field)) {\n                        $sqlFilter = &$this->_tmpTableFilter;\n                    } elseif (array_key_exists('havingFilter', $field)) {\n                        $sqlFilter = &$this->_filterHaving;\n                    } else {\n                        $sqlFilter = &$this->_filter;\n                    }\n\n                    /* Only for date filtering (from, to) */\n                    if (is_array($value)) {\n                        if (isset($value[0]) && !empty($value[0])) {\n                            if (!Validate::isDate($value[0])) {\n                                $this->errors[] = Tools::displayError('The \\'From\\' date format is invalid (YYYY-MM-DD)');\n                            } else {\n                                $sqlFilter .= ' AND '.pSQL($key).' >= \\''.pSQL(Tools::dateFrom($value[0])).'\\'';\n                            }\n                        }\n\n                        if (isset($value[1]) && !empty($value[1])) {\n                            if (!Validate::isDate($value[1])) {\n                                $this->errors[] = Tools::displayError('The \\'To\\' date format is invalid (YYYY-MM-DD)');\n                            } else {\n                                $sqlFilter .= ' AND '.pSQL($key).' <= \\''.pSQL(Tools::dateTo($value[1])).'\\'';\n                            }\n                        }\n                    } else {\n                        $sqlFilter .= ' AND ';\n                        $checkKey = ($key == $this->identifier || $key == '`'.$this->identifier.'`');\n                        $alias = ($definition && !empty($definition['fields'][$filter]['shop'])) ? 'sa' : 'a';\n\n                        if ($type == 'int' || $type == 'bool') {\n                            $sqlFilter .= (($checkKey || $key == '`active`') ? $alias.'.' : '').pSQL($key).' = '.(int) $value.' ';\n                        } elseif ($type == 'decimal' || $type == 'price') {\n                            $value = Tools::parseNumber($value);\n                            $sqlFilter .= ($checkKey ? $alias.'.' : '').pSQL($key).' = '. $value.' ';\n                        } elseif ($type == 'select') {\n                            $sqlFilter .= ($checkKey ? $alias.'.' : '').pSQL($key).' = \\''.pSQL($value).'\\' ';\n                        } else {\n                            $sqlFilter .= ($checkKey ? $alias.'.' : '').pSQL($key).' LIKE \\'%'.pSQL(trim($value)).'%\\' ';\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @return void\n     */\n    protected function ensureListIdDefinition()\n    {\n        if (!isset($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n    }\n\n    /**\n     * Return the type of authorization on permissions page and option.\n     *\n     * @return int(integer)\n     */\n    public function authorizationLevel()\n    {\n        if ($this->hasDeletePermission()) {\n            return AdminController::LEVEL_DELETE;\n        } elseif ($this->hasAddPermission()) {\n            return AdminController::LEVEL_ADD;\n        } elseif ($this->hasEditPermission()) {\n            return AdminController::LEVEL_EDIT;\n        } elseif ($this->hasViewPermission()) {\n            return AdminController::LEVEL_VIEW;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Set the filters used for the list display\n     *\n     * @return string\n     */\n    protected function getCookieFilterPrefix()\n    {\n        return str_replace(['admin', 'controller'], '', mb_strtolower(get_class($this)));\n    }\n\n    /**\n     * @param string $key\n     * @param string $filter\n     *\n     * @return array|false\n     */\n    protected function filterToField($key, $filter)\n    {\n        if (!isset($this->fields_list)) {\n            return false;\n        }\n\n        foreach ($this->fields_list as $field) {\n            if (array_key_exists('filter_key', $field) && $field['filter_key'] == $key) {\n                return $field;\n            }\n        }\n        if (array_key_exists($filter, $this->fields_list)) {\n            return $this->fields_list[$filter];\n        }\n\n        return false;\n    }\n\n    /**\n     * Object Delete images\n     *\n     * @return ObjectModel|false\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function processDeleteImage()\n    {\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            if (($object->deleteImage())) {\n                $redirect = static::$currentIndex.'&update'.$this->table.'&'.$this->identifier.'='.Tools::getValue($this->identifier).'&conf=7&token='.$this->token;\n                if (!$this->ajax) {\n                    $this->redirect_after = $redirect;\n                } else {\n                    $this->content = 'ok';\n                }\n            }\n        }\n        $this->errors[] = Tools::displayError('An error occurred while attempting to delete the image. (cannot load object).');\n\n        return $object;\n    }\n\n    /**\n     * Load class object using identifier in $_GET (if possible)\n     * otherwise return an empty object, or die\n     *\n     * @param bool $opt Return an empty object if load fail\n     *\n     * @return ObjectModel|bool\n     */\n    protected function loadObject($opt = false)\n    {\n        // return object that was already instantiated\n        if ($this->object) {\n            return $this->object;\n        }\n\n        if (empty($this->className)) {\n            return true;\n        }\n\n        $id = Tools::getIntValue($this->identifier);\n        if ($id && Validate::isUnsignedId($id)) {\n            $this->object = new $this->className($id);\n            if (Validate::isLoadedObject($this->object)) {\n                return $this->object;\n            }\n            // throw exception\n            $this->errors[] = Tools::displayError('The object cannot be loaded (or found)');\n\n            return false;\n        } elseif ($opt) {\n            $this->object = new $this->className();\n            return $this->object;\n        } else {\n            $this->errors[] = Tools::displayError('The object cannot be loaded (the identifier is missing or invalid)');\n\n            return false;\n        }\n    }\n\n    /**\n     * @param string $textDelimiter\n     *\n     * @return void\n     *\n     * @throws PrestaShopException\n     */\n    public function processExport($textDelimiter = '\"')\n    {\n        // clean buffer\n        if (ob_get_level() && ob_get_length() > 0) {\n            ob_clean();\n        }\n        $this->getList($this->context->language->id, null, null, 0, false);\n        if (!count($this->_list)) {\n            return;\n        }\n\n        header('Content-type: text/csv');\n        header('Content-Type: application/force-download; charset=UTF-8');\n        header('Cache-Control: no-store, no-cache');\n        header('Content-disposition: attachment; filename=\"'.$this->table.'_'.date('Y-m-d_His').'.csv\"');\n\n        $headers = [];\n        foreach ($this->fields_list as $key => $datas) {\n            if ($datas['title'] === 'PDF') {\n                unset($this->fields_list[$key]);\n            } else {\n                if ($datas['title'] === 'ID') {\n                    $headers[] = strtolower(Tools::htmlentitiesDecodeUTF8($datas['title']));\n                } else {\n                    $headers[] = Tools::htmlentitiesDecodeUTF8($datas['title']);\n                }\n            }\n        }\n        $content = [];\n        foreach ($this->_list as $i => $row) {\n            $content[$i] = [];\n//            $pathToImage = false;\n            foreach ($this->fields_list as $key => $params) {\n                $fieldValue = isset($row[$key]) ? Tools::htmlentitiesDecodeUTF8(Tools::nl2br($row[$key])) : '';\n                if ($key == 'image') {\n                    if ($params['image'] != 'p') {\n                        $pathToImage = Tools::getShopDomain(true)._PS_IMG_.$params['image'].'/'.$row['id_'.$this->table].(isset($row['id_image']) ? '-'.(int) $row['id_image'] : '').'.'.$this->imageType;\n                    } else {\n                        $pathToImage = Tools::getShopDomain(true)._PS_IMG_.$params['image'].'/'.Image::getImgFolderStatic($row['id_image']).(int) $row['id_image'].'.'.$this->imageType;\n                    }\n                    if ($pathToImage) {\n                        $fieldValue = $pathToImage;\n                    }\n                }\n                if (isset($params['callback'])) {\n                    $callbackObj = (isset($params['callback_object'])) ? $params['callback_object'] : $this->context->controller;\n                    if (!preg_match('/<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)/ism', call_user_func_array([$callbackObj, $params['callback']], [$fieldValue, $row]))) {\n                        $fieldValue = call_user_func_array([$callbackObj, $params['callback']], [$fieldValue, $row]);\n                    }\n                }\n                $content[$i][] = $fieldValue;\n            }\n        }\n\n        $fieldDelimiter = (Configuration::get('TB_EXPORT_FIELD_DELIMITER') ? Configuration::get('TB_EXPORT_FIELD_DELIMITER') : ',');\n        $this->context->smarty->assign(\n            [\n                'export_precontent' => \"\",\n                'export_headers'    => $headers,\n                'export_content'    => $content,\n                'text_delimiter'    => $textDelimiter,\n                'field_delimiter'   => $fieldDelimiter,\n            ]\n        );\n\n        $this->layout = 'layout-export.tpl';\n    }\n\n    /**\n     * Get the current objects' list form the database\n     *\n     * @param int $idLang Language used for display\n     * @param string|null $orderBy ORDER BY clause\n     * @param string|null $orderWay Order way (ASC, DESC)\n     * @param int $start Offset in LIMIT clause\n     * @param int|false|null $limit Row count in LIMIT clause\n     * @param int|bool $idLangShop\n     *\n     * @throws PrestaShopException\n     */\n    public function getList(\n        $idLang,\n        $orderBy = null,\n        $orderWay = null,\n        $start = 0,\n        $limit = null,\n        $idLangShop = false\n    ) {\n        $this->dispatchFieldsListingModifierEvent();\n\n        $this->ensureListIdDefinition();\n\n        /* Manage default params values */\n        if ($limit === false) {\n            $useLimit = false;\n        } else {\n            $useLimit = true;\n            $limit = HelperList::resolvePagination($this->list_id, $this->context->cookie, $this->_pagination, $this->_default_pagination);\n            if ($limit !== $this->_default_pagination) {\n                $this->context->cookie->{$this->list_id.'_pagination'} = $limit;\n            } else {\n                unset($this->context->cookie->{$this->list_id.'_pagination'});\n            }\n        }\n\n        if (!Validate::isTableOrIdentifier($this->table)) {\n            throw new PrestaShopException(sprintf('Table name %s is invalid:', $this->table));\n        }\n\n        $orderBy = $this->resolveOrderBy($orderBy);\n        $orderWay = $this->resolveOrderWay($orderWay);\n\n\n\n        /* Check params validity */\n        if (!Validate::isOrderBy($orderBy) || !Validate::isOrderWay($orderWay)) {\n            throw new PrestaShopException(sprintf(Tools::displayError('Invalid ordering parameters: orderBy=[%s] orderWay=[%s]'), $orderBy, $orderWay));\n        }\n        if (!is_numeric($start) || !is_numeric($limit) || !Validate::isUnsignedId($idLang)) {\n            throw new PrestaShopException(sprintf(Tools::displayError('getList params is not valid: start=[%s] limit=[%s] idLang=[%s]'), $start, $limit, $idLang));\n        }\n\n        if (!isset($this->fields_list[$orderBy]['order_key']) && isset($this->fields_list[$orderBy]['filter_key'])) {\n            $this->fields_list[$orderBy]['order_key'] = $this->fields_list[$orderBy]['filter_key'];\n        }\n\n        if (isset($this->fields_list[$orderBy]['order_key'])) {\n            $orderBy = $this->fields_list[$orderBy]['order_key'];\n        }\n\n        /* Determine offset from current page */\n        $start = 0;\n        if (Tools::getIntValue('submitFilter'.$this->list_id)) {\n            $start = (Tools::getIntValue('submitFilter'.$this->list_id) - 1) * $limit;\n        } elseif (empty($start) && isset($this->context->cookie->{$this->list_id.'_start'}) && Tools::isSubmit('export'.$this->table)) {\n            $start = $this->context->cookie->{$this->list_id.'_start'};\n        }\n\n        // Either save or reset the offset in the cookie\n        if ($start) {\n            $this->context->cookie->{$this->list_id.'_start'} = $start;\n        } elseif (isset($this->context->cookie->{$this->list_id.'_start'})) {\n            unset($this->context->cookie->{$this->list_id.'_start'});\n        }\n\n        $this->_orderBy = $orderBy;\n\n        if (preg_match('/[.!]/', $orderBy)) {\n            $orderBySplit = preg_split('/[.!]/', $orderBy);\n            $orderBy = bqSQL($orderBySplit[0]).'.`'.bqSQL($orderBySplit[1]).'`';\n        } elseif ($orderBy) {\n            $orderBy = '`'.bqSQL($orderBy).'`';\n        }\n\n        $this->_orderWay = mb_strtoupper($orderWay);\n\n        /* SQL table : orders, but class name is Order */\n        $sqlTable = $this->table == 'order' ? 'orders' : $this->table;\n\n        // Add SQL shop restriction\n        $selectShop = $joinShop = $whereShop = '';\n        if ($this->shopLinkType) {\n            $selectShop = ', shop.name as shop_name ';\n            $joinShop = ' LEFT JOIN '._DB_PREFIX_.$this->shopLinkType.' shop\n\t\t\t\t\t\t\tON a.id_'.$this->shopLinkType.' = shop.id_'.$this->shopLinkType;\n            $whereShop = Shop::addSqlRestriction($this->shopShareDatas, 'a');\n        }\n\n        if ($this->multishop_context && Shop::isTableAssociated($this->table) && !empty($this->className)) {\n            if (Shop::getContext() != Shop::CONTEXT_ALL || !$this->context->employee->isSuperAdmin()) {\n                $testJoin = !preg_match('#`?'.preg_quote(_DB_PREFIX_.$this->table.'_shop').'`? *sa#', $this->_join ?? '');\n                if (Shop::isFeatureActive() && $testJoin && Shop::isTableAssociated($this->table)) {\n                    $this->_where .= ' AND EXISTS (\n\t\t\t\t\t\tSELECT 1\n\t\t\t\t\t\tFROM `'._DB_PREFIX_.$this->table.'_shop` sa\n\t\t\t\t\t\tWHERE a.'.$this->identifier.' = sa.'.$this->identifier.' AND sa.id_shop IN ('.implode(', ', Shop::getContextListShopID()).')\n\t\t\t\t\t)';\n                }\n            }\n        }\n\n        /* Query in order to get results with all fields */\n        $langJoin = '';\n        if ($this->lang) {\n            $langJoin = 'LEFT JOIN `'._DB_PREFIX_.$this->table.'_lang` b ON (b.`'.$this->identifier.'` = a.`'.$this->identifier.'` AND b.`id_lang` = '.(int) $idLang;\n            if ($idLangShop) {\n                if (!Shop::isFeatureActive()) {\n                    $langJoin .= ' AND b.`id_shop` = '.(int) Configuration::get('PS_SHOP_DEFAULT');\n                } elseif (Shop::getContext() == Shop::CONTEXT_SHOP) {\n                    $langJoin .= ' AND b.`id_shop` = '.(int) $idLangShop;\n                } else {\n                    $langJoin .= ' AND b.`id_shop` = a.id_shop_default';\n                }\n            }\n            $langJoin .= ')';\n        }\n\n        $havingClause = '';\n        if (isset($this->_filterHaving) || isset($this->_having)) {\n            $havingClause = ' HAVING ';\n            if (isset($this->_filterHaving)) {\n                $havingClause .= ltrim($this->_filterHaving, ' AND ');\n            }\n            if (isset($this->_having)) {\n                $havingClause .= $this->_having.' ';\n            }\n        }\n\n        do {\n            $this->_listsql = '';\n\n            if ($this->explicitSelect) {\n                foreach ($this->fields_list as $key => $arrayValue) {\n                    // Add it only if it is not already in $this->_select\n                    if (isset($this->_select) && preg_match('/[\\s]`?'.preg_quote($key, '/').'`?\\s*,/', $this->_select)) {\n                        continue;\n                    }\n\n                    if (isset($arrayValue['filter_key'])) {\n                        $this->_listsql .= str_replace('!', '.`', $arrayValue['filter_key']).'` AS `'.$key.'`, ';\n                    } elseif ($key == 'id_'.$this->table) {\n                        $this->_listsql .= 'a.`'.bqSQL($key).'`, ';\n                    } elseif ($key != 'image' && !preg_match('/'.preg_quote($key, '/').'/i', $this->_select ?? '')) {\n                        $this->_listsql .= '`'.bqSQL($key).'`, ';\n                    }\n                }\n                $this->_listsql = rtrim(trim($this->_listsql), ',');\n            } else {\n                $this->_listsql .= ($this->lang ? 'b.*,' : '').' a.*';\n            }\n\n            $this->_listsql .= '\n\t\t\t'.(isset($this->_select) ? ', '.rtrim($this->_select, ', ') : '').$selectShop;\n\n            $sqlFrom = '\n\t\t\tFROM `'._DB_PREFIX_.$sqlTable.'` a ';\n            $sqlJoin = '\n\t\t\t'.$langJoin.'\n\t\t\t'.(isset($this->_join) ? $this->_join.' ' : '').'\n\t\t\t'.$joinShop;\n            $sqlWhere = ' '.(isset($this->_where) ? $this->_where.' ' : '').($this->deleted ? 'AND a.`deleted` = 0 ' : '').\n                (isset($this->_filter) ? $this->_filter : '').$whereShop.'\n\t\t\t'.(isset($this->_group) ? $this->_group.' ' : '').'\n\t\t\t'.$havingClause;\n            $sqlOrderBy = ' ORDER BY '.((str_replace('`', '', $orderBy) == $this->identifier) ? 'a.' : '').$orderBy.' '.pSQL($orderWay).\n                ($this->_tmpTableFilter ? ') tmpTable WHERE 1'.$this->_tmpTableFilter : '');\n            $sqlLimit = ' '.(($useLimit === true) ? ' LIMIT '.(int) $start.', '.(int) $limit : '');\n\n            if ($this->_use_found_rows || isset($this->_filterHaving) || isset($this->_having)) {\n                $this->_listsql = 'SELECT SQL_CALC_FOUND_ROWS\n\t\t\t\t\t\t\t\t'.($this->_tmpTableFilter ? ' * FROM (SELECT ' : '').$this->_listsql.$sqlFrom.$sqlJoin.' WHERE 1 '.$sqlWhere.\n                    $sqlOrderBy.$sqlLimit;\n                $listCount = 'SELECT FOUND_ROWS() AS `'._DB_PREFIX_.$this->table.'`';\n            } else {\n                $this->_listsql = 'SELECT\n\t\t\t\t\t\t\t\t'.($this->_tmpTableFilter ? ' * FROM (SELECT ' : '').$this->_listsql.$sqlFrom.$sqlJoin.' WHERE 1 '.$sqlWhere.\n                    $sqlOrderBy.$sqlLimit;\n                if ($this->_group) {\n                    $listCount = 'SELECT COUNT(*) AS `'._DB_PREFIX_.$this->table.'` FROM (SELECT 1 '.$sqlFrom.$sqlJoin.' WHERE 1 '.$sqlWhere.') AS `inner`';\n                } else {\n                    $listCount = 'SELECT COUNT(*) AS `'._DB_PREFIX_.$this->table.'` '.$sqlFrom.$sqlJoin.' WHERE 1 '.$sqlWhere;\n                }\n            }\n\n            $conn = Db::readOnly();\n            $this->_list = $conn->getArray($this->_listsql);\n            $this->_listTotal = $conn->getValue($listCount);\n\n            if ($useLimit === true) {\n                $start = (int) $start - (int) $limit;\n                if ($start < 0) {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } while (empty($this->_list));\n\n        Hook::triggerEvent(\n            'action'.$this->controller_name.'ListingResultsModifier', [\n                'list'       => &$this->_list,\n                'list_total' => &$this->_listTotal,\n            ]\n        );\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    protected function dispatchFieldsListingModifierEvent()\n    {\n        Hook::triggerEvent(\n            'action'.$this->controller_name.'ListingFieldsModifier', [\n                'select'    => &$this->_select,\n                'join'      => &$this->_join,\n                'where'     => &$this->_where,\n                'group_by'  => &$this->_group,\n                'order_by'  => &$this->_orderBy,\n                'order_way' => &$this->_orderWay,\n                'fields'    => &$this->fields_list,\n            ]\n        );\n    }\n\n    /**\n     * Object Delete\n     *\n     * @return ObjectModel|false\n     * @throws PrestaShopException\n     */\n    public function processDelete()\n    {\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            $res = true;\n            //check if some ids are in list_skip_actions and forbid deletion\n            if (array_key_exists('delete', $this->list_skip_actions) && in_array($object->id, $this->list_skip_actions['delete'])) {\n                $this->errors[] = Tools::displayError('You cannot delete this item.');\n            } else {\n                if ($this->deleted) {\n                    if (!empty($this->fieldImageSettings)) {\n                        $res = $object->deleteImage();\n                    }\n\n                    if (!$res) {\n                        $this->errors[] = Tools::displayError('Unable to delete associated images.');\n                    }\n\n                    $object->deleted = 1;\n                    if ($res = $object->update()) {\n                        $this->redirect_after = static::$currentIndex.'&conf=1&token='.$this->token;\n                    }\n                } elseif ($res = $object->delete()) {\n                    $this->redirect_after = static::$currentIndex.'&conf=1&token='.$this->token;\n                } else {\n                    $this->errors[] = Tools::displayError('An error occurred during deletion.');\n                }\n                if ($res) {\n                    Logger::addLog(sprintf($this->l('%s deletion', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $this->object->id, true, (int) $this->context->employee->id);\n                }\n            }\n        } else {\n            $this->errors[] = Tools::displayError('An error occurred while deleting the object.').' <b>'.$this->table.'</b> '.Tools::displayError('(cannot load object)');\n        }\n\n        return $object;\n    }\n\n    /**\n     * Call the right method for creating or updating object\n     *\n     * @return ObjectModel|false\n     *\n     * @throws PrestaShopException\n     */\n    public function processSave()\n    {\n        if ($this->id_object) {\n            $this->loadObject();\n            return $this->processUpdate();\n        } else {\n            return $this->processAdd();\n        }\n    }\n\n    /**\n     * Object update\n     *\n     * @return ObjectModel|false\n     * @throws PrestaShopException\n     */\n    public function processUpdate()\n    {\n        /* Checking fields validity */\n        $this->validateRules();\n        if (empty($this->errors)) {\n            $id = Tools::getIntValue($this->identifier);\n\n            /* Object update */\n            if ($id) {\n                /** @var ObjectModel $object */\n                $object = new $this->className($id);\n                if (Validate::isLoadedObject($object)) {\n                    /* Specific to objects which must not be deleted */\n                    if ($this->deleted && $this->beforeDelete($object)) {\n                        // Create new one with old objet values\n                        /** @var ObjectModel $objectNew */\n                        $objectNew = $object->duplicateObject();\n                        if (Validate::isLoadedObject($objectNew)) {\n                            // Update old object to deleted\n                            $object->deleted = 1;\n                            $object->update();\n\n                            // Update new object with post values\n                            $this->copyFromPost($objectNew, $this->table);\n                            $result = $objectNew->update();\n                            if (Validate::isLoadedObject($objectNew)) {\n                                $this->afterDelete($objectNew, $object->id);\n                            }\n                        }\n                    } else {\n                        $this->copyFromPost($object, $this->table);\n                        $result = $object->update();\n                        $this->afterUpdate($object);\n                    }\n\n                    if ($object->id) {\n                        $this->updateAssoShop($object->id);\n                    }\n\n                    if (!isset($result) || !$result) {\n                        $this->errors[] = Tools::displayError('An error occurred while updating an object.').' <b>'.$this->table.'</b> ('.Db::getInstance()->getMsgError().')';\n                    } elseif ($this->postImage($object->id) && !count($this->errors) && $this->_redirect) {\n                        $parentId = Tools::getIntValue('id_parent', 1);\n                        // Specific back redirect\n                        if ($back = Tools::getValue('back')) {\n                            $this->redirect_after = urldecode($back).'&conf=4';\n                        }\n                        // Specific scene feature\n                        // @todo change stay_here submit name (not clear for redirect to scene ... )\n                        if (Tools::getValue('stay_here') == 'on' || Tools::getValue('stay_here') == 'true' || Tools::getValue('stay_here') == '1') {\n                            $this->redirect_after = static::$currentIndex.'&'.$this->identifier.'='.$object->id.'&conf=4&updatescene&token='.$this->token;\n                        }\n                        // Save and stay on same form\n                        // @todo on the to following if, we may prefer to avoid override redirect_after previous value\n                        if (Tools::isSubmit('submitAdd'.$this->table.'AndStay')) {\n                            $this->redirect_after = static::$currentIndex.'&'.$this->identifier.'='.$object->id.'&conf=4&update'.$this->table.'&token='.$this->token;\n                        }\n                        // Save and back to parent\n                        if (Tools::isSubmit('submitAdd'.$this->table.'AndBackToParent')) {\n                            $this->redirect_after = static::$currentIndex.'&'.$this->identifier.'='.$parentId.'&conf=4&token='.$this->token;\n                        }\n\n                        // Default behavior (save and back)\n                        if (empty($this->redirect_after) && $this->redirect_after !== false) {\n                            $this->redirect_after = static::$currentIndex.($parentId ? '&'.$this->identifier.'='.$object->id : '').'&conf=4&token='.$this->token;\n                        }\n                    }\n                    Logger::addLog(sprintf($this->l('%s modification', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $object->id, true, (int) $this->context->employee->id);\n                } else {\n                    $this->errors[] = Tools::displayError('An error occurred while updating an object.').' <b>'.$this->table.'</b> '.Tools::displayError('(cannot load object)');\n                }\n            }\n        }\n        $this->errors = array_unique($this->errors);\n        if (!empty($this->errors)) {\n            // if we have errors, we stay on the form instead of going back to the list\n            $this->display = 'edit';\n\n            return false;\n        }\n\n        if (isset($object)) {\n            return $object;\n        }\n\n        return false;\n    }\n\n    /**\n     * Manage page display (form, list...)\n     *\n     * @param string|bool $className Allow to validate a different class than the current one\n     *\n     * @throws PrestaShopException\n     */\n    public function validateRules($className = false)\n    {\n        if (!$className) {\n            $className = $this->className;\n        }\n\n        /** @var ObjectModel $object */\n        $object = new $className();\n\n        if (method_exists($this, 'getValidationRules')) {\n            $definition = $this->getValidationRules();\n        } else {\n            $definition = ObjectModel::getDefinition($className);\n        }\n\n        $defaultLanguage = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $languages = Language::getLanguages(false);\n\n        foreach ($definition['fields'] as $field => $def) {\n            $skip = [];\n            if (in_array($field, ['passwd', 'no-picture'])) {\n                $skip = ['required'];\n            }\n\n            if (isset($def['lang']) && $def['lang']) {\n                if (isset($def['required']) && $def['required']) {\n                    $value = Tools::getValue($field.'_'.$defaultLanguage->id);\n                    if ($value === false || $value === '') {\n                        $this->errors[$field.'_'.$defaultLanguage->id] = sprintf(\n                            Tools::displayError('The field %1$s is required at least in %2$s.'),\n                            $object->displayFieldName($field, $className),\n                            $defaultLanguage->name\n                        );\n                    }\n                }\n\n                foreach ($languages as $language) {\n                    $value = Tools::getValue($field.'_'.$language['id_lang']);\n                    if (!empty($value)) {\n                        if (($error = $object->validateField($field, $value, $language['id_lang'], $skip, true)) !== true) {\n                            $this->errors[$field.'_'.$language['id_lang']] = $error;\n                        }\n                    }\n                }\n            } elseif (($error = $object->validateField($field, Tools::getValue($field), null, $skip, true)) !== true) {\n                $this->errors[$field] = $error;\n            }\n        }\n\n        /* Overload this method for custom checking */\n        $this->_childValidation();\n    }\n\n    /**\n     * Overload this method for custom checking\n     *\n     * @return void\n     */\n    protected function _childValidation()\n    {\n    }\n\n    /**\n     * Called before deletion\n     *\n     * @param ObjectModel $object Object\n     *\n     * @return bool\n     */\n    protected function beforeDelete($object)\n    {\n        return false;\n    }\n\n    /**\n     * Copy data values from $_POST to object\n     *\n     * @param ObjectModel &$object Object\n     * @param string $table Object table\n     *\n     * @throws PrestaShopException\n     */\n    protected function copyFromPost(&$object, $table)\n    {\n        /* Classical fields */\n        foreach ($_POST as $key => $value) {\n            if (property_exists($object, $key) && $key != 'id_'.$table) {\n                /* Do not take care of password field if empty */\n                if ($key == 'passwd' && Tools::getValue('id_'.$table) && empty($value)) {\n                    continue;\n                }\n                /* Automatically hash password */\n                if ($key == 'passwd' && !empty($value)) {\n                    $value = Tools::hash($value);\n                }\n                if ($key === 'email') {\n                    if (mb_detect_encoding($value, 'UTF-8', true) && mb_strpos($value, '@') > -1) {\n                        // Convert to IDN\n                        list ($local, $domain) = explode('@', $value, 2);\n                        $domain = Tools::utf8ToIdn($domain);\n                        $value = \"$local@$domain\";\n                    }\n                }\n                $object->{$key} = $value;\n            }\n        }\n\n        /* Multilingual fields */\n        $classVars = get_class_vars(get_class($object));\n        $fields = [];\n        if (isset($classVars['definition']['fields'])) {\n            $fields = $classVars['definition']['fields'];\n        }\n\n        foreach ($fields as $field => $params) {\n            if (array_key_exists('lang', $params) && $params['lang']) {\n                foreach (Language::getIDs(false) as $idLang) {\n                    if (Tools::isSubmit($field.'_'.(int) $idLang)) {\n                        if (!isset($object->{$field}) || !is_array($object->{$field})) {\n                            $object->{$field} = [];\n                        }\n                        $object->{$field}[(int) $idLang] = Tools::getValue($field.'_'.(int) $idLang);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Called before deletion\n     *\n     * @param ObjectModel $object Object\n     * @param int $oldId\n     */\n    protected function afterDelete($object, $oldId)\n    {\n    }\n\n    /**\n     * @param ObjectModel $object\n     */\n    protected function afterUpdate($object)\n    {\n    }\n\n    /**\n     * Update the associations of shops\n     *\n     * @param int $idObject\n     *\n     * @return bool|void\n     * @throws PrestaShopDatabaseException\n     *\n     * @throws PrestaShopException\n     */\n    protected function updateAssoShop($idObject)\n    {\n        if (!Shop::isFeatureActive()) {\n            return;\n        }\n\n        if (!Shop::isTableAssociated($this->table)) {\n            return;\n        }\n\n        $assosData = $this->getSelectedAssoShop($this->table);\n\n        // Get list of shop id we want to exclude from asso deletion\n        $excludeIds = $assosData;\n        $conn = Db::getInstance();\n        foreach ($conn->getArray('SELECT id_shop FROM '._DB_PREFIX_.'shop') as $row) {\n            if (!$this->context->employee->hasAuthOnShop($row['id_shop'])) {\n                $excludeIds[] = $row['id_shop'];\n            }\n        }\n        $conn->delete($this->table.'_shop', '`'.bqSQL($this->identifier).'` = '.(int) $idObject.($excludeIds ? ' AND id_shop NOT IN ('.implode(', ', array_map('intval', $excludeIds)).')' : ''));\n\n        $insert = [];\n        foreach ($assosData as $idShop) {\n            $insert[] = [\n                $this->identifier => (int) $idObject,\n                'id_shop'         => (int) $idShop,\n            ];\n        }\n\n        return $conn->insert($this->table.'_shop', $insert, false, true, Db::INSERT_IGNORE);\n    }\n\n    /**\n     * Returns an array with selected shops and type (group or boutique shop)\n     *\n     * @param string $table\n     *\n     * @return array\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    protected function getSelectedAssoShop($table)\n    {\n        if (!Shop::isFeatureActive() || !Shop::isTableAssociated($table)) {\n            return [];\n        }\n\n        $shops = Shop::getShops(true, null, true);\n        if (count($shops) == 1 && isset($shops[0])) {\n            return [$shops[0], 'shop'];\n        }\n\n        $assos = [];\n        if (Tools::isSubmit('checkBoxShopAsso_'.$table)) {\n            foreach (Tools::getArrayValue('checkBoxShopAsso_'.$table) as $idShop => $value) {\n                $assos[] = (int) $idShop;\n            }\n        } elseif (Shop::getTotalShops(false) == 1) {\n            // if we do not have the checkBox multishop, we can have an admin with only one shop and being in multishop\n            $assos[] = (int) Shop::getContextShopID();\n        }\n\n        return $assos;\n    }\n\n    /**\n     * Overload this method for custom checking\n     *\n     * @param int $id Object id used for deleting images\n     *\n     * @return bool\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    protected function postImage($id)\n    {\n        if (isset($this->fieldImageSettings['name']) && isset($this->fieldImageSettings['dir'])) {\n            return $this->uploadImage($id, $this->fieldImageSettings['name'], $this->fieldImageSettings['dir'].'/');\n        } elseif (!empty($this->fieldImageSettings)) {\n            foreach ($this->fieldImageSettings as $image) {\n                if (isset($image['name']) && isset($image['dir'])) {\n                    $this->uploadImage($id, $image['name'], $image['dir'].'/');\n                }\n            }\n        }\n\n        return !count($this->errors) ? true : false;\n    }\n\n    /**\n     * @param int $id\n     * @param string $name\n     * @param string $dir\n     * @param string|bool $ext\n     * @param int|null $width\n     * @param int|null $height\n     *\n     * @return bool\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    protected function uploadImage($id, $name, $dir, $ext = false, $width = null, $height = null)\n    {\n        if (isset($_FILES[$name]['tmp_name']) && !empty($_FILES[$name]['tmp_name'])) {\n            // Delete old image\n            if (Validate::isLoadedObject($object = $this->loadObject())) {\n                $object->deleteImage();\n            } else {\n                return false;\n            }\n\n            // Check image validity\n            $maxSize = isset($this->max_image_size) ? $this->max_image_size : 0;\n            if ($error = ImageManager::validateUpload($_FILES[$name], Tools::getMaxUploadSize($maxSize))) {\n                $this->errors[] = $error;\n            }\n\n            $tmpName = tempnam(_PS_TMP_IMG_DIR_, 'PS');\n            if (!$tmpName) {\n                return false;\n            }\n\n            if (!move_uploaded_file($_FILES[$name]['tmp_name'], $tmpName)) {\n                return false;\n            }\n\n            // Evaluate the memory required to resize the image: if it's too much, you can't resize it.\n            if (!ImageManager::checkImageMemoryLimit($tmpName)) {\n                $this->errors[] = Tools::displayError('Due to memory limit restrictions, this image cannot be loaded. Please increase your memory_limit value via your server\\'s configuration settings. ');\n            }\n\n            // Copy new image\n            if (empty($this->errors) && !ImageManager::resize($tmpName, _PS_IMG_DIR_.$dir.$id.'.'.$this->imageType, (int) $width, (int) $height, ($ext ? $ext : $this->imageType))) {\n                $this->errors[] = Tools::displayError('An error occurred while uploading the image.');\n            }\n\n            if (count($this->errors)) {\n                return false;\n            }\n            if ($this->afterImageUpload()) {\n                unlink($tmpName);\n\n                return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check rights to view the current tab\n     *\n     * @return bool\n     */\n    protected function afterImageUpload()\n    {\n        return true;\n    }\n\n    /**\n     * Object creation\n     *\n     * @return ObjectModel|false\n     * @throws PrestaShopException\n     */\n    public function processAdd()\n    {\n        if (empty($this->className)) {\n            return false;\n        }\n\n        $this->validateRules();\n        if (count($this->errors) <= 0) {\n            $this->object = new $this->className();\n\n            $this->copyFromPost($this->object, $this->table);\n            $this->beforeAdd($this->object);\n            if (method_exists($this->object, 'add') && !$this->object->add()) {\n                $this->errors[] = Tools::displayError('An error occurred while creating an object.').' <strong>'.$this->table.' ('.Db::getInstance()->getMsgError().')</strong>';\n            } elseif (($_POST[$this->identifier] = $this->object->id /* voluntary do affectation here */) && $this->postImage($this->object->id) && !count($this->errors) && $this->_redirect) {\n                Logger::addLog(sprintf($this->l('%s addition', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $this->object->id, true, (int) $this->context->employee->id);\n                $parentId = Tools::getIntValue('id_parent', 1);\n                $this->afterAdd($this->object);\n                $this->updateAssoShop($this->object->id);\n                // Save and stay on same form\n                if (empty($this->redirect_after) && $this->redirect_after !== false && Tools::isSubmit('submitAdd'.$this->table.'AndStay')) {\n                    $this->redirect_after = static::$currentIndex.'&'.$this->identifier.'='.$this->object->id.'&conf=3&update'.$this->table.'&token='.$this->token;\n                }\n                // Save and back to parent\n                if (empty($this->redirect_after) && $this->redirect_after !== false && Tools::isSubmit('submitAdd'.$this->table.'AndBackToParent')) {\n                    $this->redirect_after = static::$currentIndex.'&'.$this->identifier.'='.$parentId.'&conf=3&token='.$this->token;\n                }\n                // Default behavior (save and back)\n                if (empty($this->redirect_after) && $this->redirect_after !== false) {\n                    $this->redirect_after = static::$currentIndex.($parentId ? '&'.$this->identifier.'='.$this->object->id : '').'&conf=3&token='.$this->token;\n                }\n            }\n        }\n\n        $this->errors = array_unique($this->errors);\n        if (!empty($this->errors)) {\n            // if we have errors, we stay on the form instead of going back to the list\n            $this->display = 'edit';\n\n            return false;\n        }\n\n        return $this->object;\n    }\n\n    /**\n     * Called before Add\n     *\n     * @param ObjectModel $object Object\n     *\n     * @return void\n     */\n    protected function beforeAdd($object)\n    {\n    }\n\n    /**\n     * @param ObjectModel $object\n     *\n     * @return void\n     */\n    protected function afterAdd($object)\n    {\n    }\n\n    /**\n     * Change object required fields\n     *\n     * @return ObjectModel\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function processUpdateFields()\n    {\n        $fields = Tools::getArrayValue('fieldsBox');\n\n        /** @var ObjectModel $object */\n        $object = new $this->className();\n\n        if (!$object->addFieldsRequiredDatabase($fields)) {\n            $this->errors[] = Tools::displayError('An error occurred when attempting to update the required fields.');\n        } else {\n            $this->redirect_after = static::$currentIndex.'&conf=4&token='.$this->token;\n        }\n\n        return $object;\n    }\n\n    /**\n     * Change object status (active, inactive)\n     *\n     * @return ObjectModel|false\n     * @throws PrestaShopException\n     */\n    public function processStatus()\n    {\n        /** @var ObjectModel $object */\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            if (property_exists($object, 'active') && $object->toggleStatus()) {\n                Logger::addLog(\n                    sprintf($this->l('%s status switched to %s', 'AdminTab', false, false), $this->className, $object->active ? 'enable' : 'disable'),\n                    1,\n                    null,\n                    $this->className,\n                    (int) $object->id,\n                    true,\n                    (int) $this->context->employee->id\n                );\n                $matches = [];\n                $referer = Tools::getHttpReferer();\n                if (preg_match('/[\\?|&]controller=([^&]*)/', $referer, $matches) !== false &&\n                    strtolower($matches[1]) != strtolower(preg_replace('/controller/i', '', get_class($this)))\n                ) {\n                    $this->redirect_after = preg_replace('/[\\?|&]conf=([^&]*)/i', '', $referer);\n                } else {\n                    $this->redirect_after = static::$currentIndex.'&token='.$this->token;\n                }\n\n                $idCategory = (($idCategory = Tools::getIntValue('id_category')) && Tools::getIntValue('id_product')) ? '&id_category='.$idCategory : '';\n\n                $page = Tools::getIntValue('page');\n                $page = $page > 1 ? '&submitFilter'.$this->table.'='.(int) $page : '';\n                $this->redirect_after .= '&conf=5'.$idCategory.$page;\n            } else {\n                $this->errors[] = Tools::displayError('An error occurred while updating the status.');\n            }\n        } else {\n            $this->errors[] = Tools::displayError('An error occurred while updating the status for an object.').\n                ' <b>'.$this->table.'</b> '.\n                Tools::displayError('(cannot load object)');\n        }\n\n        return $object;\n    }\n\n    /**\n     * Change object position\n     *\n     * @return ObjectModel|false\n     */\n    public function processPosition()\n    {\n        if (!Validate::isLoadedObject($object = $this->loadObject())) {\n            $this->errors[] = Tools::displayError('An error occurred while updating the status for an object.').\n                ' <b>'.$this->table.'</b> '.Tools::displayError('(cannot load object)');\n        } elseif (!$object->updatePosition(Tools::getIntValue('way'), Tools::getIntValue('position'))) {\n            $this->errors[] = Tools::displayError('Failed to update the position.');\n        } else {\n            $idIdentifierStr = ($idIdentifier = Tools::getIntValue($this->identifier)) ? '&'.$this->identifier.'='.$idIdentifier : '';\n            $redirect = static::$currentIndex.'&'.$this->table.'Orderby=position&'.$this->table.'Orderway=asc&conf=5'.$idIdentifierStr.'&token='.$this->token;\n            $this->redirect_after = $redirect;\n        }\n\n        return $object;\n    }\n\n    /**\n     * Cancel all filters for this tab\n     *\n     * @param int|null $listId\n     */\n    public function processResetFilters($listId = null)\n    {\n        if ($listId === null) {\n            $listId = isset($this->list_id) ? $this->list_id : $this->table;\n        }\n\n        $prefix = $this->getCookieFilterPrefix();\n        $filters = $this->context->cookie->getFamily($prefix.$listId.'Filter_');\n        foreach ($filters as $cookieKey => $filter) {\n            if (strncmp($cookieKey, $prefix.$listId.'Filter_', 7 + mb_strlen($prefix.$listId)) == 0) {\n                $key = substr($cookieKey, 7 + mb_strlen($prefix.$listId));\n                if (is_array($this->fields_list) && array_key_exists($key, $this->fields_list)) {\n                    $this->context->cookie->$cookieKey = null;\n                }\n                unset($this->context->cookie->$cookieKey);\n            }\n        }\n\n        if (isset($this->context->cookie->{'submitFilter'.$listId})) {\n            unset($this->context->cookie->{'submitFilter'.$listId});\n        }\n        if (isset($this->context->cookie->{$prefix.$listId.'Orderby'})) {\n            unset($this->context->cookie->{$prefix.$listId.'Orderby'});\n        }\n        if (isset($this->context->cookie->{$prefix.$listId.'Orderway'})) {\n            unset($this->context->cookie->{$prefix.$listId.'Orderway'});\n        }\n\n        $_POST = [];\n        $this->_filter = false;\n        unset($this->_filterHaving);\n        unset($this->_having);\n    }\n\n    /**\n     * Check if the token is valid, else display a warning page\n     *\n     * @return bool\n     *\n     * @throws PrestaShopException\n     */\n    public function checkAccess()\n    {\n        if (!$this->checkToken()) {\n            // If this is an XSS attempt, then we should only display a simple, secure page\n            // ${1} in the replacement string of the regexp is required,\n            // because the token may begin with a number and mix up with it (e.g. $17)\n            $url = preg_replace('/([&?]token=)[^&]*(&.*)?$/', '${1}'.$this->token.'$2', $_SERVER['REQUEST_URI']);\n            if (false === strpos($url, '?token=') && false === strpos($url, '&token=')) {\n                $url .= '&token='.$this->token;\n            }\n            if (strpos($url, '?') === false) {\n                $url = str_replace('&token', '?controller=AdminDashboard&token', $url);\n            }\n\n            $this->context->smarty->assign('url', htmlentities($url));\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check for security token\n     *\n     * @return bool\n     *\n     * @throws PrestaShopException\n     */\n    public function checkToken()\n    {\n        // if token is provided it must match the expected token\n        $token = Tools::getValue('token');\n        if ($token) {\n            return $token === $this->token;\n        }\n\n        // token was not provided. It is required, if security was explicitly strengthened\n        $forceToken = (bool)Configuration::getGlobalValue(Configuration::BO_FORCE_TOKEN);\n        if ($forceToken) {\n            return false;\n        }\n\n        // if there are any POST parameters, token is required\n        if (count($_POST)) {\n            return false;\n        }\n\n        // if there are any GET parameters, token is required as well\n        foreach ($_GET as $key => $value) {\n            if (! in_array($key, ['controller', 'controllerUri'])) {\n                return false;\n            }\n            if ($key === 'controller' && !Validate::isControllerName($value)) {\n                return false;\n            }\n        }\n\n        // for backwards compatibility reasons\n        return true;\n    }\n\n    /**\n     * @return void\n     *\n     * @throws SmartyException\n     * @throws PrestaShopException\n     */\n    public function displayAjax()\n    {\n        if ($this->json) {\n            $this->context->smarty->assign(\n                [\n                    'json'   => true,\n                    'status' => $this->status,\n                ]\n            );\n        }\n        $this->layout = 'layout-ajax.tpl';\n        $this->display_header = false;\n        $this->display_header_javascript = false;\n        $this->display_footer = false;\n\n        $this->display();\n    }\n\n    /**\n     * @return void\n     * @throws SmartyException\n     * @throws PrestaShopException\n     */\n    public function display()\n    {\n        $this->context->smarty->assign(\n            [\n                'display_header'            => $this->display_header,\n                'display_header_javascript' => $this->display_header_javascript,\n                'display_footer'            => $this->display_footer,\n                'js_def'                    => Media::getJsDef(),\n            ]\n        );\n\n        // Use page title from meta_title if it has been set else from the breadcrumbs array\n        if (!$this->meta_title) {\n            $this->meta_title = $this->toolbar_title;\n        }\n        if (is_array($this->meta_title)) {\n            $this->meta_title = strip_tags(implode(' '.Configuration::get('PS_NAVIGATION_PIPE').' ', $this->meta_title));\n        }\n        $this->context->smarty->assign('meta_title', $this->meta_title);\n\n        $templateDirs = $this->context->smarty->getTemplateDir();\n\n        // Check if header/footer have been overriden\n        $dir = $this->context->smarty->getTemplateDir(0).'controllers'.DIRECTORY_SEPARATOR.trim($this->override_folder, '\\\\/').DIRECTORY_SEPARATOR;\n\n        $headerTpl = file_exists($dir.'header.tpl') ? $dir.'header.tpl' : 'header.tpl';\n        $pageHeaderToolbar = file_exists($dir.'page_header_toolbar.tpl') ? $dir.'page_header_toolbar.tpl' : 'page_header_toolbar.tpl';\n        $footerTpl = file_exists($dir.'footer.tpl') ? $dir.'footer.tpl' : 'footer.tpl';\n        $tplAction = $this->tpl_folder.$this->display.'.tpl';\n\n        // Check if action template has been overriden\n        foreach ($templateDirs as $template_dir) {\n            if (file_exists($template_dir.DIRECTORY_SEPARATOR.$tplAction) && $this->display != 'view' && $this->display != 'options') {\n                if (method_exists($this, $this->display.Tools::toCamelCase($this->className))) {\n                    $this->{$this->display.Tools::toCamelCase($this->className)}();\n                }\n                $this->context->smarty->assign('content', $this->context->smarty->fetch($tplAction));\n                break;\n            }\n        }\n\n        if (!$this->ajax) {\n            $template = $this->createTemplate($this->template);\n            $page = $template->fetch();\n        } else {\n            $page = $this->content;\n        }\n\n        if ($conf = Tools::getValue('conf')) {\n            $this->context->smarty->assign('conf', $this->json ? json_encode($this->_conf[(int) $conf]) : $this->_conf[(int) $conf]);\n        }\n\n        foreach (['errors', 'warnings', 'informations', 'confirmations'] as $type) {\n            if (!is_array($this->$type)) {\n                $this->$type = (array) $this->$type;\n            }\n            $this->context->smarty->assign($type, $this->json ? json_encode(array_unique($this->$type)) : array_unique($this->$type));\n        }\n\n        if ($this->show_page_header_toolbar && !$this->lite_display) {\n            $this->context->smarty->assign(\n                [\n                    'page_header_toolbar' => $this->context->smarty->fetch($pageHeaderToolbar),\n                ]\n            );\n        }\n\n        $messages = static::getErrorMessages();\n        if ($messages) {\n            $this->context->smarty->assign('php_errors', $messages);\n        }\n\n        $this->context->smarty->assign(\n            [\n                'page'   => $this->json ? json_encode($page) : $page,\n                'header' => $this->context->smarty->fetch($headerTpl),\n                'footer' => $this->context->smarty->fetch($footerTpl),\n            ]\n        );\n\n        $this->smartyOutputContent($this->layout);\n    }\n\n    /**\n     * Create a template from the override file, else from the base file.\n     *\n     * @param string $tplName filename\n     *\n     * @return Smarty_Internal_Template\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function createTemplate($tplName)\n    {\n        $smarty = $this->context->smarty;\n        $templateDir = $smarty->getTemplateDir(0);\n        if ($this->viewAccess()) {\n            if ($this->override_folder) {\n                // Use override tpl if it exists\n                $overrideTemplateDir = $smarty->getTemplateDir(1);\n                if (!Configuration::get('PS_DISABLE_OVERRIDES') && file_exists($overrideTemplateDir. DIRECTORY_SEPARATOR . $this->override_folder . $tplName)) {\n                    return $smarty->createTemplate($this->override_folder . $tplName, $smarty);\n                }\n                if (file_exists($templateDir . 'controllers' . DIRECTORY_SEPARATOR . $this->override_folder . $tplName)) {\n                    return $smarty->createTemplate('controllers' . DIRECTORY_SEPARATOR . $this->override_folder . $tplName, $smarty);\n                }\n            }\n            return $smarty->createTemplate($templateDir.$tplName, $smarty);\n        } else {\n            // If view access is denied, we want to use the default template that will be used to display an error\n            return $smarty->createTemplate($templateDir . static::DEFAULT_VIEW_TEMPLATE, $smarty);\n        }\n    }\n\n    /**\n     * Check rights to view the current tab\n     *\n     * @param bool $disable\n     *\n     * @return bool\n     */\n    public function viewAccess($disable = false)\n    {\n        if ($disable) {\n            return true;\n        }\n\n        return $this->hasViewPermission();\n    }\n\n    /**\n     * Assign smarty variables for the header\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function initHeader()\n    {\n        header('Cache-Control: no-store, no-cache');\n\n        // Multishop\n        $isMultishop = Shop::isFeatureActive();\n\n        // Quick access\n        if ((int) $this->context->employee->id) {\n            $quickAccess = QuickAccess::getQuickAccesses($this->context->language->id);\n            foreach ($quickAccess as $index => $quick) {\n                if ($quick['link'] == '../' && Shop::getContext() == Shop::CONTEXT_SHOP) {\n                    $url = $this->context->shop->getBaseURL();\n                    if (!$url) {\n                        unset($quickAccess[$index]);\n                        continue;\n                    }\n                    $quickAccess[$index]['link'] = $url;\n                } else {\n                    preg_match('/controller=(.+)(&.+)?$/', $quick['link'], $adminTab);\n                    if (isset($adminTab[1])) {\n                        if (strpos($adminTab[1], '&')) {\n                            $adminTab[1] = substr($adminTab[1], 0, strpos($adminTab[1], '&'));\n                        }\n\n                        $token = Tools::getAdminToken($adminTab[1].(int) Tab::getIdFromClassName($adminTab[1]).(int) $this->context->employee->id);\n                        $quickAccess[$index]['target'] = $adminTab[1];\n                        $quickAccess[$index]['link'] .= '&token='.$token;\n                    }\n                }\n            }\n        }\n\n        // Tab list\n        $tabs = Tab::getTabs($this->context->language->id, 0);\n        $currentId = Tab::getCurrentParentId();\n        foreach ($tabs as $index => $tab) {\n            if (!Tab::checkTabRights($tab['id_tab'])\n                || ($tab['class_name'] == 'AdminStock' && Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') == 0)\n                || $tab['class_name'] == 'AdminCarrierWizard'\n            ) {\n                unset($tabs[$index]);\n                continue;\n            }\n\n            $tabs[$index]['current'] = ($tab['class_name'].'Controller' == get_class($this)) || ($currentId == $tab['id_tab']);\n            $tabs[$index]['href'] = $this->context->link->getAdminLink($tab['class_name']);\n\n            $subTabs = Tab::getTabs($this->context->language->id, $tab['id_tab']);\n            foreach ($subTabs as $index2 => $subTab) {\n                //check if module is enable and\n                if (isset($subTab['module']) && !empty($subTab['module'])) {\n\n                    $moduleId = Module::getModuleIdByName($subTab['module']) ;\n                    if (!$moduleId || !Module::isEnabledForShops($moduleId, Shop::getContextListShopID())) {\n                        unset($subTabs[$index2]);\n                        continue;\n                    }\n                }\n\n                // class_name is the name of the class controller\n                if (Tab::checkTabRights($subTab['id_tab']) === true && $subTab['active'] && $subTab['class_name'] != 'AdminCarrierWizard') {\n                    $subTabs[$index2]['href'] = $this->context->link->getAdminLink($subTab['class_name']);\n                    $subTabs[$index2]['current'] = ($subTab['class_name'].'Controller' == get_class($this) || $subTab['class_name'] == Tools::getValue('controller'));\n                } elseif ($subTab['class_name'] == 'AdminCarrierWizard' && $subTab['class_name'].'Controller' == get_class($this)) {\n                    foreach ($subTabs as $i => $tab) {\n                        if ($tab['class_name'] == 'AdminCarriers') {\n                            break;\n                        }\n                    }\n\n                    $subTabs[$i]['current'] = true;\n                    unset($subTabs[$index2]);\n                } else {\n                    unset($subTabs[$index2]);\n                }\n            }\n            $tabs[$index]['sub_tabs'] = array_values($subTabs);\n        }\n\n        if (Validate::isLoadedObject($this->context->employee)) {\n            $notification = $this->context->employee->getNotification();\n            $helperShop = new HelperShop();\n            /* Hooks are voluntary out the initialize array (need those variables already assigned) */\n            $boColor = empty($this->context->employee->bo_color) ? '#FFFFFF' : $this->context->employee->bo_color;\n            $this->context->smarty->assign(\n                [\n                    'autorefresh_notifications' => false, Configuration::get('PS_ADMINREFRESH_NOTIFICATION'),\n                    'notificationTypes'         => $notification->getTypes(),\n                    'help_box'                  => Configuration::get('PS_HELPBOX'),\n                    'round_mode'                => Configuration::get('PS_PRICE_ROUND_MODE'),\n                    'brightness'                => Tools::getBrightness($boColor) < 128 ? 'white' : '#383838',\n                    'bo_width'                  => (int) $this->context->employee->bo_width,\n                    'bo_color'                  => isset($this->context->employee->bo_color) ? Tools::htmlentitiesUTF8($this->context->employee->bo_color) : null,\n                    'employee'                  => $this->context->employee,\n                    'search_type'               => Tools::getValue('bo_search_type'),\n                    'bo_query'                  => Tools::safeOutput(Tools::getValue('bo_query')),\n                    'quick_access'              => $quickAccess,\n                    'multi_shop'                => Shop::isFeatureActive(),\n                    'shop_list'                 => $helperShop->getRenderedShopList(),\n                    'shop'                      => $this->context->shop,\n                    'shop_group'                => new ShopGroup((int) Shop::getContextShopGroupID()),\n                    'is_multishop'              => $isMultishop,\n                    'multishop_context'         => $this->multishop_context,\n                    'default_tab_link'          => $this->context->link->getAdminLink(Tab::getClassNameById((int) $this->context->employee->default_tab)),\n                    'login_link'                => $this->context->link->getAdminLink('AdminLogin'),\n                    'collapse_menu'             => isset($this->context->cookie->collapse_menu) ? (int) $this->context->cookie->collapse_menu : 0,\n                ]\n            );\n        } else {\n            $this->context->smarty->assign('default_tab_link', $this->context->link->getAdminLink('AdminDashboard'));\n        }\n\n        // Shop::initialize() in config.php may empty $this->context->shop->virtual_uri so using a new shop instance for getBaseUrl()\n        $this->context->shop = new Shop((int) $this->context->shop->id);\n\n        switch (Shop::getContext()) {\n            case Shop::CONTEXT_ALL:\n                $shopContext = 'all';\n                break;\n            case Shop::CONTEXT_GROUP:\n                $shopContext = 'group-' . Shop::getContextShopGroupID(false);\n                break;\n            case Shop::CONTEXT_SHOP:\n            default:\n                $shopContext = 'shop-' . Shop::getContextShopID(false);\n        }\n\n        $this->context->smarty->assign(\n            [\n                'img_dir'                   => _PS_IMG_,\n                'iso'                       => $this->context->language->iso_code,\n                'class_name'                => $this->className,\n                'iso_user'                  => $this->context->language->iso_code,\n                'country_iso_code'          => $this->context->country->iso_code,\n                'version'                   => _TB_VERSION_,\n                'lang_iso'                  => $this->context->language->iso_code,\n                'full_language_code'        => $this->context->language->language_code,\n                'link'                      => $this->context->link,\n                'shop_name'                 => Configuration::get('PS_SHOP_NAME'),\n                'base_url'                  => $this->context->shop->getBaseURL(),\n                'tab'                       => isset($tab) ? $tab : null, // Deprecated, this tab is declared in the foreach, so it's the last tab in the foreach\n                'current_parent_id'         => (int) Tab::getCurrentParentId(),\n                'tabs'                      => $tabs,\n                'install_dir_exists'        => file_exists(_PS_ADMIN_DIR_.'/../install'),\n                'pic_dir'                   => _THEME_PROD_PIC_DIR_,\n                'controller_name'           => htmlentities(Tools::getValue('controller')),\n                'currentIndex'              => static::$currentIndex,\n                'maintenance_mode'          => !Configuration::get('PS_SHOP_ENABLE'),\n                'bootstrap'                 => $this->bootstrap,\n                'default_language'          => (int) Configuration::get('PS_LANG_DEFAULT'),\n                'shopContext'               => $shopContext,\n            ]\n        );\n\n        /** @var ThemeConfigurator|false $module */\n        $module = Module::getInstanceByName('themeconfigurator');\n        if (is_object($module) && $module->active && (int) Configuration::get('PS_TC_ACTIVE') == 1 && $this->context->shop->getBaseURL()) {\n            $request =\n                'live_configurator_token='.$module->getLiveConfiguratorToken()\n                .'&id_employee='.(int) $this->context->employee->id\n                .'&id_shop='.(int) $this->context->shop->id\n                .(Configuration::get('PS_TC_THEME') != '' ? '&theme='.Configuration::get('PS_TC_THEME') : '')\n                .(Configuration::get('PS_TC_FONT') != '' ? '&theme_font='.Configuration::get('PS_TC_FONT') : '');\n            $this->context->smarty->assign('base_url_tc', $this->context->link->getPageLink('index', null, null, $request));\n        }\n    }\n\n    /**\n     * Declare an action to use for each row in the list\n     *\n     * @param string $action\n     */\n    public function addRowAction($action)\n    {\n        $action = strtolower($action);\n        $this->actions[] = $action;\n    }\n\n    /**\n     * Add an action to use for each row in the list\n     *\n     * @param string $action\n     * @param array $list\n     */\n    public function addRowActionSkipList($action, $list)\n    {\n        $action = strtolower($action);\n        $list = (array) $list;\n\n        if (array_key_exists($action, $this->list_skip_actions)) {\n            $this->list_skip_actions[$action] = array_merge($this->list_skip_actions[$action], $list);\n        } else {\n            $this->list_skip_actions[$action] = $list;\n        }\n    }\n\n    /**\n     * Assign smarty variables for all default views, list and form, then call other init functions\n     *\n     * @return void\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     * @throws PrestaShopException\n     */\n    public function initContent()\n    {\n        if (!$this->viewAccess()) {\n            $this->errors[] = Tools::displayError('You do not have permission to view this.');\n\n            return;\n        }\n\n        $this->getLanguages();\n        $this->initToolbar();\n        $this->initPageHeaderToolbar();\n\n        if ($this->display == 'edit' || $this->display == 'add') {\n            if ($this->className) {\n                if (!$this->loadObject(true)) {\n                    return;\n                }\n            }\n\n            $this->content .= $this->renderForm();\n        } elseif ($this->display == 'view') {\n            // Some controllers use the view action without an object\n            if ($this->className) {\n                $this->loadObject(true);\n            }\n            $this->content .= $this->renderView();\n        } elseif ($this->display == 'details') {\n            $this->content .= $this->renderDetails();\n        } elseif (!$this->ajax) {\n            $this->content .= $this->renderKpis();\n            $this->content .= $this->renderList();\n            $this->content .= $this->renderOptions();\n\n            // if we have to display the required fields form\n            if ($this->required_database) {\n                $this->content .= $this->displayRequiredFields();\n            }\n        }\n\n        $this->context->smarty->assign(\n            [\n                'maintenance_mode'          => !Configuration::get('PS_SHOP_ENABLE'),\n                'content'                   => $this->content,\n                'lite_display'              => $this->lite_display,\n                'url_post'                  => static::$currentIndex.'&token='.$this->token,\n                'show_page_header_toolbar'  => $this->show_page_header_toolbar,\n                'page_header_toolbar_title' => $this->page_header_toolbar_title,\n                'title'                     => $this->page_header_toolbar_title,\n                'toolbar_btn'               => $this->page_header_toolbar_btn,\n                'page_header_toolbar_btn'   => $this->page_header_toolbar_btn,\n            ]\n        );\n    }\n\n    /**\n     * @param int $defaultFormLanguage\n     *\n     * @return array\n     * @throws PrestaShopException\n     */\n    protected static function resolveFormLanguages(int $defaultFormLanguage): array\n    {\n        $languages = Language::getLanguages(false);\n        foreach ($languages as &$language) {\n            $isDefault = $defaultFormLanguage === (int)$language['id_lang'];\n            $language['is_default'] = $isDefault ? 1 : 0;\n        }\n        return $languages;\n    }\n\n    /**\n     * @return array\n     *\n     * @throws PrestaShopException\n     */\n    public function getLanguages()\n    {\n        if (! $this->_languages) {\n            $this->_languages = static::resolveFormLanguages($this->getDefaultFormLanguage());\n        }\n        return $this->_languages;\n    }\n\n    /**\n     * @param Cookie $cookie\n     * @param int $allowEmployeeLang\n     *\n     * @return int\n     * @throws PrestaShopException\n     */\n    protected static function resolveDefaultFormLanguage(Cookie $cookie, int $allowEmployeeLang): int\n    {\n        $languageIds = Language::getLanguages(false, false, true);\n        if ($languageIds) {\n\n            // first check last used employee language\n            if ($allowEmployeeLang) {\n                if (isset($cookie->employee_form_lang)) {\n                    $employeeLang = (int)$cookie->employee_form_lang;\n                    if (in_array($employeeLang, $languageIds)) {\n                        return $employeeLang;\n                    }\n                }\n            }\n            if (isset($cookie->employee_form_lang)) {\n                unset($cookie->employee_form_lang);\n            }\n\n            // try default language\n            $defaultLang = (int)Configuration::get('PS_LANG_DEFAULT');\n            if (in_array($defaultLang, $languageIds)) {\n                return $defaultLang;\n            }\n\n            // fallback to first language in the list\n            return $languageIds[0];\n        }\n        return 0;\n    }\n\n    /**\n     * @return int\n     *\n     * @throws PrestaShopException\n     */\n    protected function getDefaultFormLanguage(): int\n    {\n        if (is_null($this->default_form_language)) {\n            $this->default_form_language = static::resolveDefaultFormLanguage($this->context->cookie, $this->getAllowEmployeeFormLanguage());\n        }\n        return (int)$this->default_form_language;\n    }\n\n    /**\n     * @return int\n     *\n     * @throws PrestaShopException\n     */\n    protected function getAllowEmployeeFormLanguage(): int\n    {\n        if (is_null($this->allow_employee_form_lang)) {\n            $this->allow_employee_form_lang = (int)Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG');\n        }\n        return (int)$this->allow_employee_form_lang;\n    }\n\n    /**\n     * assign default action in toolbar_btn smarty var, if they are not set.\n     * uses override to specifically add, modify or remove items\n     *\n     * @throws PrestaShopException\n     */\n    public function initToolbar()\n    {\n        switch ($this->display) {\n            case 'add':\n            case 'edit':\n                // Default save button - action dynamically handled in javascript\n                $this->toolbar_btn['save'] = [\n                    'href' => '#',\n                    'desc' => $this->l('Save'),\n                ];\n                if (!$this->lite_display) {\n                    $this->toolbar_btn['cancel'] = [\n                        'href' => $this->getBackUrlParameter(),\n                        'desc' => $this->l('Cancel'),\n                    ];\n                }\n                break;\n            case 'view':\n                if (!$this->lite_display) {\n                    $this->toolbar_btn['back'] = [\n                        'href' => $this->getBackUrlParameter(),\n                        'desc' => $this->l('Back to list'),\n                    ];\n                }\n                break;\n            case 'options':\n                $this->toolbar_btn['save'] = [\n                    'href' => '#',\n                    'desc' => $this->l('Save'),\n                ];\n                break;\n            default: // list\n                $this->toolbar_btn['new'] = [\n                    'href' => static::$currentIndex.'&add'.$this->table.'&token='.$this->token,\n                    'desc' => $this->l('Add new'),\n                ];\n                if ($this->allow_export) {\n                    $this->toolbar_btn['export'] = [\n                        'href' => static::$currentIndex.'&export'.$this->table.'&token='.$this->token,\n                        'desc' => $this->l('Export'),\n                    ];\n                }\n        }\n    }\n\n    /**\n     * @return void\n     */\n    protected function addToolBarModulesListButton()\n    {\n    }\n\n    /**\n     * @return void\n     */\n    protected function filterTabModuleList()\n    {\n    }\n\n    /**\n     * Init tab modules list and add button in toolbar\n     *\n     * @deprecated 1.5.0\n     */\n    protected function initTabModuleList()\n    {\n    }\n\n    /**\n     * @param string $file\n     * @param int $timeout\n     *\n     * @return bool\n     */\n    public function isFresh($file, $timeout = 604800)\n    {\n        $path = _PS_ROOT_DIR_.$file;\n        if (file_exists($path) && filesize($path) > 0) {\n            return ((time() - filemtime($path)) < $timeout);\n        }\n\n        return false;\n    }\n\n    /**\n     * @return void\n     */\n    protected function addPageHeaderToolBarModulesListButton()\n    {\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    public function initPageHeaderToolbar()\n    {\n        if (empty($this->toolbar_title)) {\n            $this->initToolbarTitle();\n        }\n\n        if (!is_array($this->toolbar_title)) {\n            $this->toolbar_title = [$this->toolbar_title];\n        }\n\n        switch ($this->display) {\n            case 'view':\n                // Default cancel button - like old back link\n                if (!$this->lite_display) {\n                    $this->page_header_toolbar_btn['back'] = [\n                        'href' => $this->getBackUrlParameter(),\n                        'desc' => $this->l('Back to list'),\n                    ];\n                }\n                $obj = $this->loadObject(true);\n                if (Validate::isLoadedObject($obj) && isset($obj->{$this->identifier_name}) && !empty($obj->{$this->identifier_name})) {\n                    array_pop($this->toolbar_title);\n                    array_pop($this->meta_title);\n                    $this->toolbar_title[] = is_array($obj->{$this->identifier_name}) ? $obj->{$this->identifier_name}[$this->context->employee->id_lang] : $obj->{$this->identifier_name};\n                    $this->addMetaTitle($this->toolbar_title[count($this->toolbar_title) - 1]);\n                }\n                break;\n            case 'edit':\n                $obj = $this->loadObject(true);\n                if (Validate::isLoadedObject($obj) && isset($obj->{$this->identifier_name}) && !empty($obj->{$this->identifier_name})) {\n                    array_pop($this->toolbar_title);\n                    array_pop($this->meta_title);\n                    $this->toolbar_title[] = sprintf($this->l('Edit: %s'), (is_array($obj->{$this->identifier_name}) && isset($obj->{$this->identifier_name}[$this->context->employee->id_lang])) ? $obj->{$this->identifier_name}[$this->context->employee->id_lang] : $obj->{$this->identifier_name});\n                    $this->addMetaTitle($this->toolbar_title[count($this->toolbar_title) - 1]);\n                }\n                break;\n        }\n\n        if (empty($this->page_header_toolbar_title) && $this->toolbar_title) {\n            if (is_array($this->toolbar_title)) {\n                $size = count($this->toolbar_title);\n                $this->page_header_toolbar_title = $this->toolbar_title[$size - 1];\n            } else {\n                $this->page_header_toolbar_title = $this->toolbar_title;\n            }\n        }\n\n        if (is_array($this->page_header_toolbar_btn)\n            || ($this->page_header_toolbar_btn instanceof Traversable)\n            || $this->page_header_toolbar_title\n        ) {\n            $this->show_page_header_toolbar = true;\n        }\n\n        $this->context->smarty->assign('help_link', '');\n    }\n\n    /**\n     * Set default toolbar_title to admin breadcrumb\n     *\n     * @return void\n     */\n    public function initToolbarTitle()\n    {\n        $this->toolbar_title = is_array($this->breadcrumbs) ? array_unique($this->breadcrumbs) : [$this->breadcrumbs];\n\n        switch ($this->display) {\n            case 'edit':\n                $this->toolbar_title[] = $this->l('Edit', null, null, false);\n                $this->addMetaTitle($this->l('Edit', null, null, false));\n                break;\n\n            case 'add':\n                $this->toolbar_title[] = $this->l('Add new', null, null, false);\n                $this->addMetaTitle($this->l('Add new', null, null, false));\n                break;\n\n            case 'view':\n                $this->toolbar_title[] = $this->l('View', null, null, false);\n                $this->addMetaTitle($this->l('View', null, null, false));\n                break;\n        }\n\n        if ($filter = $this->addFiltersToBreadcrumbs()) {\n            $this->toolbar_title[] = $filter;\n        }\n    }\n\n    /**\n     * Add an entry to the meta title.\n     *\n     * @param string $entry New entry.\n     */\n    public function addMetaTitle($entry)\n    {\n        // Only add entry if the meta title was not forced.\n        if (is_array($this->meta_title)) {\n            $this->meta_title[] = $entry;\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function addFiltersToBreadcrumbs()\n    {\n        if ($this->filter && is_array($this->fields_list)) {\n            $filters = [];\n\n            foreach ($this->fields_list as $field => $t) {\n                if (isset($t['filter_key'])) {\n                    $field = $t['filter_key'];\n                }\n\n                $val = $this->getListFieldFilterValue($field);\n\n                if (! is_null($val)) {\n                    $filterValue = '';\n                    if (!is_array($val)) {\n                        if (isset($t['type']) && $t['type'] == 'bool') {\n                            $filterValue = ($val)\n                                ? $this->l('yes')\n                                : $this->l('no');\n                        } elseif (isset($t['type']) && $t['type'] == 'date' || isset($t['type']) && $t['type'] == 'datetime') {\n                            $date = json_decode($val, true);\n                            if (isset($date[0]) && $ts=strtotime($date[0])) {\n                                $filterValue = (string)date('Y-m-d', $ts);\n                                if (isset($date[1]) && !empty($date[1]) && $ts=strtotime($date[1])) {\n                                    $filterValue .= ' - '. date('Y-m-d', $ts);\n                                }\n                            }\n                        } elseif (is_string($val)) {\n                            $filterValue = htmlspecialchars($val, ENT_QUOTES, 'UTF-8');\n                        }\n                    } else {\n                        foreach ($val as $v) {\n                            if (is_string($v)) {\n                                $v = trim($v);\n                                if ($v !== '') {\n                                    $filterValue .= ' - '.htmlspecialchars($v, ENT_QUOTES, 'UTF-8');\n                                }\n                            }\n                        }\n                        $filterValue = ltrim($filterValue, ' -');\n                    }\n                    if ($filterValue !== '') {\n                        $filters[] = sprintf($this->l('%s: %s'), $t['title'], $filterValue);\n                    }\n                }\n            }\n\n            if (count($filters)) {\n                return sprintf($this->l('filter by %s'), implode(', ', $filters));\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Function used to render the form for this controller\n     *\n     * @return string\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderForm()\n    {\n        $this->getLanguages();\n\n        if (Tools::getValue('submitFormAjax')) {\n            $this->content .= $this->context->smarty->fetch('form_submit_ajax.tpl');\n        }\n\n        if ($this->fields_form && is_array($this->fields_form)) {\n            if (!$this->multiple_fieldsets) {\n                $this->fields_form = [['form' => $this->fields_form]];\n            }\n\n            // For add a fields via an override of $fields_form, use $fields_form_override\n            if (is_array($this->fields_form_override) && !empty($this->fields_form_override)) {\n                $this->fields_form[0]['form']['input'] = array_merge($this->fields_form[0]['form']['input'], $this->fields_form_override);\n            }\n\n            $fieldsValue = $this->getFieldsValue($this->object);\n\n            Hook::triggerEvent(\n                'action'.$this->controller_name.'FormModifier', [\n                    'fields'       => &$this->fields_form,\n                    'fields_value' => &$fieldsValue,\n                    'form_vars'    => &$this->tpl_form_vars,\n                ]\n            );\n\n            $helper = new HelperForm();\n            $this->setHelperDisplay($helper);\n            $helper->fields_value = $fieldsValue;\n            $helper->submit_action = $this->submit_action;\n            $helper->tpl_vars = $this->getTemplateFormVars();\n            $helper->show_cancel_button = (isset($this->show_form_cancel_button)) ? $this->show_form_cancel_button : ($this->display == 'add' || $this->display == 'edit');\n\n            $helper->back_url = $this->getBackUrlParameter();\n            if ($this->base_tpl_form) {\n                $helper->base_tpl = $this->base_tpl_form;\n            }\n            if ($this->hasViewPermission()) {\n                if (Tools::getValue('back')) {\n                    $helper->tpl_vars['back'] = Tools::safeOutput(Tools::getValue('back'));\n                } else {\n                    $helper->tpl_vars['back'] = Tools::safeOutput(Tools::getValue(static::$currentIndex.'&token='.$this->token));\n                }\n            }\n            $form = $helper->generateForm($this->fields_form);\n\n            return $form;\n        }\n    }\n\n    /**\n     * Return the list of fields value\n     *\n     * @param ObjectModel $obj Object\n     *\n     * @return array\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function getFieldsValue($obj)\n    {\n        foreach ($this->fields_form as $fieldset) {\n            if (isset($fieldset['form']['input'])) {\n                foreach ($fieldset['form']['input'] as $input) {\n                    if (!isset($this->fields_value[$input['name']])) {\n                        if (isset($input['type']) && $input['type'] == 'shop') {\n                            if ($obj->id) {\n                                $result = Shop::getShopById((int) $obj->id, $this->identifier, $this->table);\n                                foreach ($result as $row) {\n                                    $this->fields_value['shop'][$row['id_'.$input['type']]][] = $row['id_shop'];\n                                }\n                            }\n                        } elseif (isset($input['lang']) && $input['lang']) {\n                            foreach ($this->getLanguages() as $language) {\n                                $fieldValue = $this->getFieldValue($obj, $input['name'], $language['id_lang']);\n                                if (empty($fieldValue)) {\n                                    if (isset($input['default_value'][$language['id_lang']]) && is_array($input['default_value'])) {\n                                        $fieldValue = $input['default_value'][$language['id_lang']];\n                                    } elseif (isset($input['default_value'])) {\n                                        $fieldValue = $input['default_value'];\n                                    }\n                                }\n                                $this->fields_value[$input['name']][$language['id_lang']] = $fieldValue;\n                            }\n                        } else {\n                            $fieldValue = $this->getFieldValue($obj, $input['name']);\n                            if ($fieldValue === false && isset($input['default_value'])) {\n                                $fieldValue = $input['default_value'];\n                            }\n                            $this->fields_value[$input['name']] = $fieldValue;\n                        }\n                    }\n                }\n            }\n        }\n\n        return $this->fields_value;\n    }\n\n    /**\n     * Return field value if possible (both classical and multilingual fields)\n     *\n     * Case 1 : Return value if present in $_POST / $_GET\n     * Case 2 : Return object value\n     *\n     * @param ObjectModel|null $obj Object\n     * @param string $key Field name\n     * @param int|null $idLang Language id (optional)\n     *\n     * @return array|bool|float|int|string|null\n     */\n    public function getFieldValue($obj, $key, $idLang = null)\n    {\n        if (is_object($obj) && property_exists($obj, $key)) {\n            if ($idLang) {\n                $defaultValue = (isset($obj->id) && $obj->id && isset($obj->{$key}[$idLang])) ? $obj->{$key}[$idLang] : false;\n            } else {\n                $defaultValue = $obj->{$key} ?? false;\n            }\n        } else {\n            $defaultValue = false;\n        }\n\n        return Tools::getValue($key.($idLang ? '_'.$idLang : ''), $defaultValue);\n    }\n\n    /**\n     * This function sets various display options for helper list\n     *\n     * @param Helper $helper\n     *\n     * @throws PrestaShopException\n     */\n    public function setHelperDisplay(Helper $helper)\n    {\n        if (empty($this->toolbar_title)) {\n            $this->initToolbarTitle();\n        }\n\n        if ($helper instanceof HelperList) {\n            $this->setHelperListDisplay($helper);\n        } elseif ($helper instanceof HelperView) {\n            $this->setHelperViewDisplay($helper);\n        } elseif ($helper instanceof HelperForm) {\n            $this->setHelperFormDisplay($helper);\n        } elseif ($helper instanceof HelperOptions) {\n            $this->setHelperOptionsDisplay($helper);\n        } elseif ($helper instanceof HelperKpi) {\n            $this->setHelperKpiDisplay($helper);\n        } elseif ($helper instanceof HelperKpiRow) {\n            $this->setHelperKpiRowDisplay($helper);\n        } elseif ($helper instanceof HelperShop) {\n            $this->setHelperShopDisplay($helper);\n        } elseif ($helper instanceof HelperCalendar) {\n            $this->setHelperCalendarDisplay($helper);\n        } else {\n            $this->setHelperCommonDisplay($helper);\n        }\n        $this->helper = $helper;\n    }\n\n    /**\n     * @param Helper $helper\n     * @throws PrestaShopException\n     */\n    public function setHelperCommonDisplay(Helper $helper)\n    {\n        $helper->title = is_array($this->toolbar_title) ? implode(' '.Configuration::get('PS_NAVIGATION_PIPE').' ', $this->toolbar_title) : $this->toolbar_title;\n        $helper->toolbar_btn = $this->toolbar_btn;\n        $helper->show_toolbar = $this->show_toolbar;\n        $helper->toolbar_scroll = $this->toolbar_scroll;\n        $helper->override_folder = $this->tpl_folder;\n        $helper->currentIndex = static::$currentIndex;\n        $helper->table = $this->table;\n        $helper->identifier = $this->identifier;\n        $helper->token = $this->token;\n        $helper->bootstrap = $this->bootstrap;\n    }\n\n    /**\n     * @param HelperList $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperListDisplay(HelperList $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n        $helper->actions = $this->actions;\n        $helper->simple_header = $this->list_simple_header;\n        $helper->bulk_actions = $this->bulk_actions;\n        $helper->orderBy = $this->_orderBy;\n        $helper->orderWay = $this->_orderWay;\n        $helper->listTotal = $this->_listTotal;\n        $helper->specificConfirmDelete = $this->specificConfirmDelete;\n        $helper->no_link = $this->list_no_link;\n        $helper->colorOnBackground = $this->colorOnBackground;\n        $helper->shopLinkType = $this->shopLinkType;\n        $helper->imageType = $this->imageType;\n        $helper->ajax_params = $this->ajax_params;\n        $helper->row_hover = $this->row_hover;\n        $helper->position_identifier = $this->position_identifier;\n        $helper->position_group_identifier = $this->position_group_identifier;\n        $helper->controller_name = $this->controller_name;\n        $helper->list_id = $this->list_id ?? $this->table;\n        $helper->list_skip_actions = $this->list_skip_actions;\n    }\n\n    /**\n     * @param HelperForm $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperFormDisplay(HelperForm $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n        if ($this->object && $this->object->id) {\n            $helper->id = $this->object->id;\n        }\n        $helper->name_controller = Tools::getValue('controller');\n        $helper->languages = $this->getLanguages();\n        $helper->default_form_language = $this->getDefaultFormLanguage();\n        $helper->allow_employee_form_lang = $this->getAllowEmployeeFormLanguage();\n    }\n\n    /**\n     * @param HelperView $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperViewDisplay(HelperView $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n        if ($this->object && $this->object->id) {\n            $helper->id = $this->object->id;\n        }\n    }\n\n    /**\n     * @param HelperOptions $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperOptionsDisplay(HelperOptions $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n        if ($this->object && $this->object->id) {\n            $helper->id = $this->object->id;\n        }\n    }\n\n    /**\n     * @param HelperKpi $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperKpiDisplay(HelperKpi $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n        if ($this->object && $this->object->id) {\n            $helper->id = $this->object->id;\n        }\n    }\n\n    /**\n     * @param HelperKpiRow $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperKpiRowDisplay(HelperKpiRow $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n    }\n\n    /**\n     * @param HelperCalendar $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperCalendarDisplay(HelperCalendar $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n    }\n\n    /**\n     * @param HelperShop $helper\n     * @return void\n     * @throws PrestaShopException\n     */\n    public function setHelperShopDisplay(HelperShop $helper)\n    {\n        $this->setHelperCommonDisplay($helper);\n    }\n\n\n    /**\n     * @return array\n     */\n    public function getTemplateFormVars()\n    {\n        return $this->tpl_form_vars;\n    }\n\n    /**\n     * Override to render the view page\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderView()\n    {\n        $helper = new HelperView();\n        $this->setHelperDisplay($helper);\n        $helper->tpl_vars = $this->getTemplateViewVars();\n        if (!is_null($this->base_tpl_view)) {\n            $helper->base_tpl = $this->base_tpl_view;\n        }\n        $view = $helper->generateView();\n\n        return $view;\n    }\n\n    /**\n     * @return array\n     */\n    public function getTemplateViewVars()\n    {\n        return $this->tpl_view_vars;\n    }\n\n    /**\n     * Override to render the view page\n     *\n     * @return string|false\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderDetails()\n    {\n        return $this->renderList();\n    }\n\n    /**\n     * Function used to render the list to display for this controller\n     *\n     * @return string|false\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderList()\n    {\n        if (!($this->fields_list && is_array($this->fields_list))) {\n            return false;\n        }\n        $this->getList($this->context->language->id);\n\n        // If list has 'active' field, we automatically create bulk action\n        if (isset($this->fields_list) && is_array($this->fields_list) && array_key_exists('active', $this->fields_list)\n            && !empty($this->fields_list['active'])\n        ) {\n            if (!is_array($this->bulk_actions)) {\n                $this->bulk_actions = [];\n            }\n\n            $this->bulk_actions = array_merge(\n                [\n                    'enableSelection'  => [\n                        'text' => $this->l('Enable selection'),\n                        'icon' => 'icon-power-off text-success',\n                    ],\n                    'disableSelection' => [\n                        'text' => $this->l('Disable selection'),\n                        'icon' => 'icon-power-off text-danger',\n                    ],\n                    'divider'          => [\n                        'text' => 'divider',\n                    ],\n                ],\n                $this->bulk_actions\n            );\n        }\n\n        $helper = new HelperList();\n\n        // Empty list is ok\n        if (!is_array($this->_list)) {\n            $this->displayWarning($this->l('Bad SQL query', 'Helper').'<br />'.htmlspecialchars($this->_list_error));\n\n            return false;\n        }\n\n        $this->setHelperDisplay($helper);\n        $helper->_default_pagination = $this->_default_pagination;\n        $helper->_pagination = $this->_pagination;\n        $helper->tpl_vars = $this->getTemplateListVars();\n        $helper->tpl_delete_link_vars = $this->tpl_delete_link_vars;\n\n        // For compatibility reasons, we have to check standard actions in class attributes\n        foreach ($this->actions_available as $action) {\n            if (!in_array($action, $this->actions) && isset($this->$action) && $this->$action) {\n                $this->actions[] = $action;\n            }\n        }\n\n        $helper->is_cms = $this->is_cms;\n        $helper->sql = $this->_listsql;\n        $list = $helper->generateList($this->_list, $this->fields_list);\n\n        return $list;\n    }\n\n    /**\n     * Add a warning message to display at the top of the page\n     *\n     * @param string $msg\n     */\n    protected function displayWarning($msg)\n    {\n        $this->warnings[] = $msg;\n    }\n\n    /**\n     * @return array\n     */\n    public function getTemplateListVars()\n    {\n        return $this->tpl_list_vars;\n    }\n\n    /**\n     * @return void\n     */\n    public function renderModulesList()\n    {\n    }\n\n    /**\n     * @param array|string $filterModulesList\n     *\n     * @return bool\n     * @throws PrestaShopException\n     */\n    public function getModulesList($filterModulesList)\n    {\n        if (!is_array($filterModulesList) && !is_null($filterModulesList)) {\n            $filterModulesList = [$filterModulesList];\n        }\n\n        if (is_null($filterModulesList) || !count($filterModulesList)) {\n            return false;\n        } //if there is no modules to display just return false;\n\n        $allModules = Module::getModulesOnDisk(true);\n        $this->modules_list = [];\n        foreach ($allModules as $module) {\n            if ($module->id) {\n                $perm = Module::getPermissionStatic($module->id, 'configure');\n            } else {\n                $perm = $this->context->employee->hasAccess(AdminModulesController::class, Profile::PERMISSION_EDIT);\n            }\n\n            if (in_array($module->name, $filterModulesList) && $perm) {\n                $this->fillModuleData($module);\n                $this->modules_list[array_search($module->name, $filterModulesList)] = $module;\n            }\n        }\n        ksort($this->modules_list);\n\n        if (count($this->modules_list)) {\n            return true;\n        }\n\n        return false; //no module found on disk just return false;\n    }\n\n    /**\n     * @param string $fileToRefresh\n     * @param string $externalFile\n     *\n     * @return bool\n     * @throws PrestaShopException\n     */\n    public function refresh($fileToRefresh, $externalFile)\n    {\n        $guzzle = new GuzzleHttp\\Client([\n            'timeout' => 5,\n            'verify' => Configuration::getSslTrustStore(),\n        ]);\n\n        if (static::$isThirtybeesUp) {\n            try {\n                $content = (string) $guzzle->get($externalFile)->getBody();\n\n                return (bool) file_put_contents(_PS_ROOT_DIR_.$fileToRefresh, $content);\n            } catch (Throwable $e) {\n                static::$isThirtybeesUp = false;\n\n                return false;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param stdClass $module\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function fillModuleData(&$module)\n    {\n\n        // Fill module data\n        $module->logo = '../../img/questionmark.png';\n\n        if (file_exists(_PS_ROOT_DIR_.DIRECTORY_SEPARATOR.basename(_PS_MODULE_DIR_).DIRECTORY_SEPARATOR.$module->name.DIRECTORY_SEPARATOR.'logo.gif')) {\n            $module->logo = 'logo.gif';\n        }\n        if (file_exists(_PS_ROOT_DIR_.DIRECTORY_SEPARATOR.basename(_PS_MODULE_DIR_).DIRECTORY_SEPARATOR.$module->name.DIRECTORY_SEPARATOR.'logo.png')) {\n            $module->logo = 'logo.png';\n        }\n\n        $linkAdminModules = $this->context->link->getAdminLink('AdminModules', true);\n\n        $module->options['install_url'] = $linkAdminModules.'&install='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.$module->name.'&anchor='.ucfirst($module->name);\n        $module->options['update_url'] = $linkAdminModules.'&update='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.$module->name.'&anchor='.ucfirst($module->name);\n        $module->options['uninstall_url'] = $linkAdminModules.'&uninstall='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.$module->name.'&anchor='.ucfirst($module->name);\n\n        $module->optionsHtml = $this->displayModuleOptions($module);\n\n        if ((Tools::getValue('module_name') == $module->name || in_array($module->name, explode('|', Tools::getValue('modules_list')))) && Tools::getIntValue('conf') > 0) {\n            $module->message = $this->_conf[Tools::getIntValue('conf')];\n        }\n    }\n\n    /**\n     * Display modules list\n     *\n     * @param stdClass $module\n     *\n     * @return array\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function displayModuleOptions($module)\n    {\n        if (!isset($module->enable_device)) {\n            $module->enable_device = Context::DEVICE_COMPUTER | Context::DEVICE_TABLET | Context::DEVICE_MOBILE;\n        }\n\n        $this->translationsTab['confirm_uninstall_popup'] = isset($module->confirmUninstall) && $module->confirmUninstall\n            ? $module->confirmUninstall\n            : $this->l('Do you really want to uninstall this module? All its data will be lost!');\n\n        if (!isset($this->translationsTab['Disable this module'])) {\n            $this->translationsTab['Disable this module'] = $this->l('Disable this module');\n            $this->translationsTab['Enable this module for all shops'] = $this->l('Enable this module for all shops');\n            $this->translationsTab['Disable'] = $this->l('Disable');\n            $this->translationsTab['Enable'] = $this->l('Enable');\n            $this->translationsTab['Disable on mobiles'] = $this->l('Disable on mobiles');\n            $this->translationsTab['Disable on tablets'] = $this->l('Disable on tablets');\n            $this->translationsTab['Disable on computers'] = $this->l('Disable on computers');\n            $this->translationsTab['Display on mobiles'] = $this->l('Display on mobiles');\n            $this->translationsTab['Display on tablets'] = $this->l('Display on tablets');\n            $this->translationsTab['Display on computers'] = $this->l('Display on computers');\n            $this->translationsTab['Reset'] = $this->l('Reset');\n            $this->translationsTab['Configure'] = $this->l('Configure');\n            $this->translationsTab['Delete'] = $this->l('Delete');\n            $this->translationsTab['Install'] = $this->l('Install');\n            $this->translationsTab['Uninstall'] = $this->l('Uninstall');\n            $this->translationsTab['Would you like to delete the content related to this module ?'] = $this->l('Would you like to delete the content related to this module ?');\n            $this->translationsTab['This action will permanently remove the module from the server. Are you sure you want to do this?'] = $this->l('This action will permanently remove the module from the server. Are you sure you want to do this?');\n            $this->translationsTab['Remove from Favorites'] = $this->l('Remove from Favorites');\n            $this->translationsTab['Mark as Favorite'] = $this->l('Mark as Favorite');\n        }\n\n        $linkAdminModules = $this->context->link->getAdminLink('AdminModules', true);\n        $modulesOptions = [];\n\n        $hasReset = false;\n        $onclickOptions = [\n            'desactive' => '',\n            'reset' => '',\n            'configure' => '',\n            'delete' => 'return confirm(\\''.$this->translationsTab['This action will permanently remove the module from the server. Are you sure you want to do this?'].'\\');',\n            'uninstall' =>  'return confirm(\\''.$this->translationsTab['confirm_uninstall_popup'].'\\');',\n        ];\n\n        if (Validate::isModuleName($module->name) && Module::isEnabled($module->name)) {\n            $instance = Module::getInstanceByName($module->name);\n            if ($instance) {\n                // check if module has reset capability\n                if (method_exists($instance, 'reset')) {\n                    $hasReset = true;\n                }\n\n                // check if module provides custom onclick handlers\n                if (method_exists($instance, 'onclickOption')) {\n                    $href = Context::getContext()->link->getAdminLink('Module', true) . '&module_name=' . $instance->name . '&tab_module=' . $instance->tab;\n                    foreach (array_keys($onclickOptions) as $opt) {\n                        $onClick = $instance->onclickOption($opt, $href);\n                        if ($onClick) {\n                            $onclickOptions[$opt] = $onClick;\n                        }\n                    }\n                }\n            }\n        }\n\n        $configureModule = [\n            'href'    => $linkAdminModules.'&configure='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.urlencode($module->name),\n            'onclick' => $onclickOptions['configure'],\n            'title'   => '',\n            'text'    => $this->translationsTab['Configure'],\n            'cond'    => $module->id && $module->is_configurable,\n            'icon'    => 'wrench',\n        ];\n\n        $deactivateModule = [\n            'href'    => $linkAdminModules.'&module_name='.urlencode($module->name).'&'.($module->active ? 'enable=0' : 'enable=1').'&tab_module='.$module->tab,\n            'onclick' => $module->active ? $onclickOptions['desactive'] : '',\n            'title'   => Shop::isFeatureActive() ? htmlspecialchars($module->active ? $this->translationsTab['Disable this module'] : $this->translationsTab['Enable this module for all shops']) : '',\n            'text'    => $module->active ? $this->translationsTab['Disable'] : $this->translationsTab['Enable'],\n            'cond'    => $module->id,\n            'icon'    => 'off',\n        ];\n        $linkResetModule = $linkAdminModules.'&module_name='.urlencode($module->name).'&reset&tab_module='.$module->tab;\n\n\n\n        $resetModule = [\n            'href'    => $linkResetModule,\n            'onclick' => $onclickOptions['reset'],\n            'title'   => '',\n            'text'    => $this->translationsTab['Reset'],\n            'cond'    => $module->id && $module->active,\n            'icon'    => 'undo',\n            'class'   => ($hasReset ? 'reset_ready' : ''),\n        ];\n\n        $deleteModule = [\n            'href'    => $linkAdminModules.'&delete='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.urlencode($module->name),\n            'onclick' => $onclickOptions['delete'],\n            'title'   => '',\n            'text'    => $this->translationsTab['Delete'],\n            'cond'    => file_exists(_PS_MODULE_DIR_ . $module->name) && is_dir(_PS_MODULE_DIR_ . $module->name),\n            'icon'    => 'trash',\n            'class'   => 'text-danger',\n        ];\n\n        $displayMobile = [\n            'href'    => $linkAdminModules.'&module_name='.urlencode($module->name).'&'.($module->enable_device & Context::DEVICE_MOBILE ? 'disable_device' : 'enable_device').'='.Context::DEVICE_MOBILE.'&tab_module='.$module->tab,\n            'onclick' => '',\n            'title'   => htmlspecialchars($module->enable_device & Context::DEVICE_MOBILE ? $this->translationsTab['Disable on mobiles'] : $this->translationsTab['Display on mobiles']),\n            'text'    => $module->enable_device & Context::DEVICE_MOBILE ? $this->translationsTab['Disable on mobiles'] : $this->translationsTab['Display on mobiles'],\n            'cond'    => $module->id,\n            'icon'    => 'mobile',\n        ];\n\n        $displayTablet = [\n            'href'    => $linkAdminModules.'&module_name='.urlencode($module->name).'&'.($module->enable_device & Context::DEVICE_TABLET ? 'disable_device' : 'enable_device').'='.Context::DEVICE_TABLET.'&tab_module='.$module->tab,\n            'onclick' => '',\n            'title'   => htmlspecialchars($module->enable_device & Context::DEVICE_TABLET ? $this->translationsTab['Disable on tablets'] : $this->translationsTab['Display on tablets']),\n            'text'    => $module->enable_device & Context::DEVICE_TABLET ? $this->translationsTab['Disable on tablets'] : $this->translationsTab['Display on tablets'],\n            'cond'    => $module->id,\n            'icon'    => 'tablet',\n        ];\n\n        $displayComputer = [\n            'href'    => $linkAdminModules.'&module_name='.urlencode($module->name).'&'.($module->enable_device & Context::DEVICE_COMPUTER ? 'disable_device' : 'enable_device').'='.Context::DEVICE_COMPUTER.'&tab_module='.$module->tab,\n            'onclick' => '',\n            'title'   => htmlspecialchars($module->enable_device & Context::DEVICE_COMPUTER ? $this->translationsTab['Disable on computers'] : $this->translationsTab['Display on computers']),\n            'text'    => $module->enable_device & Context::DEVICE_COMPUTER ? $this->translationsTab['Disable on computers'] : $this->translationsTab['Display on computers'],\n            'cond'    => $module->id,\n            'icon'    => 'desktop',\n        ];\n\n        $install = [\n            'href'    => $linkAdminModules.'&install='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.$module->name.'&anchor='.ucfirst($module->name),\n            'onclick' => '',\n            'title'   => $this->translationsTab['Install'],\n            'text'    => $this->translationsTab['Install'],\n            'cond'    => $module->id,\n            'icon'    => 'plus-sign-alt',\n        ];\n\n        $uninstall = [\n            'href'    => $linkAdminModules.'&uninstall='.urlencode($module->name).'&tab_module='.$module->tab.'&module_name='.$module->name.'&anchor='.ucfirst($module->name),\n            'onclick' => $onclickOptions['uninstall'],\n            'title'   => $this->translationsTab['Uninstall'],\n            'text'    => $this->translationsTab['Uninstall'],\n            'cond'    => $module->id,\n            'icon'    => 'minus-sign-alt',\n        ];\n\n        $removeFromFavorite = [\n            'href'        => '#',\n            'class'       => 'action_unfavorite toggle_favorite',\n            'onclick'     => '',\n            'title'       => $this->translationsTab['Remove from Favorites'],\n            'text'        => $this->translationsTab['Remove from Favorites'],\n            'cond'        => $module->id,\n            'icon'        => 'star',\n            'data-value'  => '0',\n            'data-module' => $module->name,\n        ];\n\n        $markAsFavorite = [\n            'href'        => '#',\n            'class'       => 'action_favorite toggle_favorite',\n            'onclick'     => '',\n            'title'       => $this->translationsTab['Mark as Favorite'],\n            'text'        => $this->translationsTab['Mark as Favorite'],\n            'cond'        => $module->id,\n            'icon'        => 'star',\n            'data-value'  => '1',\n            'data-module' => $module->name,\n        ];\n\n        $update = [\n            'href'    => $module->options['update_url'],\n            'onclick' => '',\n            'title'   => 'Update it!',\n            'text'    => 'Update it!',\n            'icon'    => 'refresh',\n            'cond'    => $module->id,\n        ];\n\n        $url = [\n            'href' => $module->url ?? '',\n            'onclick' => '',\n            'target'  => '_blank',\n            'title'   => $this->l('Visit module page'),\n            'text'    => $this->l('Visit module page'),\n            'cond'    => isset($module->url) && $module->url,\n            'icon'    => 'link',\n        ];\n\n        $divider = [\n            'href'    => '#',\n            'onclick' => '',\n            'title'   => 'divider',\n            'text'    => 'divider',\n            'cond'    => $module->id,\n        ];\n\n        if (isset($module->version_addons) && $module->version_addons) {\n            $modulesOptions[] = $update;\n        }\n\n        if ($module->active) {\n            $modulesOptions[] = $configureModule;\n            $modulesOptions[] = $deactivateModule;\n            $modulesOptions[] = $displayMobile;\n            $modulesOptions[] = $displayTablet;\n            $modulesOptions[] = $displayComputer;\n        } else {\n            $modulesOptions[] = $deactivateModule;\n            $modulesOptions[] = $configureModule;\n        }\n\n        $modulesOptions[] = $resetModule;\n\n\n        if ($module->id) {\n            $modulesOptions[] = $uninstall;\n        }\n\n        if (isset($module->preferences['favorite']) && $module->preferences['favorite'] == 1) {\n            $removeFromFavorite['style'] = '';\n            $markAsFavorite['style'] = 'display:none;';\n            $modulesOptions[] = $removeFromFavorite;\n            $modulesOptions[] = $markAsFavorite;\n        } else {\n            $markAsFavorite['style'] = '';\n            $removeFromFavorite['style'] = 'display:none;';\n            $modulesOptions[] = $removeFromFavorite;\n            $modulesOptions[] = $markAsFavorite;\n        }\n\n        if ($module->id == 0) {\n            $install['cond'] = 1;\n            $install['flag_install'] = 1;\n            $modulesOptions[] = $install;\n        }\n        $modulesOptions[] = $url;\n        $modulesOptions[] = $divider;\n        $modulesOptions[] = $deleteModule;\n\n        $return = [];\n        foreach ($modulesOptions as $option) {\n            if ($option['cond']) {\n\n                $html = '<a class=\"';\n\n                $isInstall = isset($option['flag_install']);\n\n                if (isset($option['class'])) {\n                    $html .= $option['class'];\n                }\n                if ($isInstall) {\n                    $html .= ' btn btn-success';\n                }\n                if (!$isInstall && count($return) == 0) {\n                    $html .= ' btn btn-default';\n                }\n\n                $html .= '\"';\n\n                if (isset($option['data-value'])) {\n                    $html .= ' data-value=\"'.$option['data-value'].'\"';\n                }\n\n                if (isset($option['data-module'])) {\n                    $html .= ' data-module=\"'.$option['data-module'].'\"';\n                }\n\n                if (isset($option['style'])) {\n                    $html .= ' style=\"'.$option['style'].'\"';\n                }\n\n                if (isset($option['target'])) {\n                    $html .= ' target=\"'.$option['target'].'\"';\n                }\n\n                $html .= ' href=\"'.htmlentities($option['href']).'\" onclick=\"'.$option['onclick'].'\"  title=\"'.$option['title'].'\"><i class=\"icon-'.(isset($option['icon']) && $option['icon'] ? $option['icon'] : 'cog').'\"></i> '.$option['text'].'</a>';\n                $return[] = $html;\n            }\n        }\n\n        return $return;\n    }\n\n    /**\n     * @return void\n     */\n    public function renderKpis()\n    {\n    }\n\n    /**\n     * Function used to render the options for this controller\n     *\n     * @return string\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderOptions()\n    {\n        Hook::triggerEvent(\n            'action'.$this->controller_name.'OptionsModifier', [\n                'options'     => &$this->fields_options,\n                'option_vars' => &$this->tpl_option_vars,\n            ]\n        );\n\n        if ($this->fields_options && is_array($this->fields_options)) {\n            if (isset($this->display) && $this->display != 'options' && $this->display != 'list') {\n                $this->show_toolbar = false;\n            } else {\n                $this->display = 'options';\n            }\n\n            unset($this->toolbar_btn);\n            $this->initToolbar();\n            $helper = new HelperOptions();\n            $this->setHelperDisplay($helper);\n            $helper->id = $this->id;\n            $helper->tpl_vars = $this->tpl_option_vars;\n            $options = $helper->generateOptions($this->fields_options);\n\n            return $options;\n        }\n    }\n\n    /**\n     * Prepare the view to display the required fields form\n     *\n     * @return string|void\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayRequiredFields()\n    {\n        if (!$this->hasAddPermission() || !$this->hasDeletePermission() || !$this->required_database) {\n            return;\n        }\n\n        $helper = new Helper();\n        $helper->currentIndex = static::$currentIndex;\n        $helper->token = $this->token;\n        $helper->override_folder = $this->override_folder;\n\n        return $helper->renderRequiredFields($this->className, $this->identifier, $this->required_fields);\n    }\n\n    /**\n     * Initialize the invalid doom page of death\n     *\n     * @return void\n     */\n    public function initCursedPage()\n    {\n        $this->layout = 'invalid_token.tpl';\n    }\n\n    /**\n     * Assign smarty variables for the footer\n     *\n     * @throws SmartyException\n     * @throws PrestaShopException\n     */\n    public function initFooter()\n    {\n        //RTL Support\n        //rtl.js overrides inline styles\n        //iso_code.css overrides default fonts for every language (optional)\n        if ($this->context->language->is_rtl) {\n            $this->addJS(_PS_JS_DIR_.'rtl.js');\n            $this->addCSS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/css/'.$this->context->language->iso_code.'.css', 'all', false);\n        }\n\n        // We assign js and css files on the last step before display template, because controller can add many js and css files\n        $this->context->smarty->assign('css_files', $this->css_files);\n        $this->context->smarty->assign('js_files', array_unique($this->js_files));\n\n        $supporter = Configuration::getSupporterInfo();\n        $this->context->smarty->assign(\n            [\n                'ps_version'   => _TB_VERSION_,\n                'timer_start'  => $this->timer_start,\n                'iso_is_fr'    => strtoupper($this->context->language->iso_code) == 'FR',\n                'modals'       => $this->renderModal(),\n                'showBecomeSupporterButton' => !$supporter,\n                'becomeSupporterUrl' => Configuration::getBecomeSupporterUrl(),\n            ]\n        );\n    }\n\n    /**\n     * @return string\n     * @throws SmartyException\n     */\n    public function renderModal()\n    {\n        $modal_render = '';\n        if (is_array($this->modals) && count($this->modals)) {\n            foreach ($this->modals as $modal) {\n                $this->context->smarty->assign($modal);\n                $modal_render .= $this->context->smarty->fetch('modal.tpl');\n            }\n        }\n\n        return $modal_render;\n    }\n\n    /**\n     * @deprecated\n     */\n    public function setDeprecatedMedia()\n    {\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    public function setMedia()\n    {\n        //Bootstrap\n        $this->addCSS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/css/'.$this->bo_css, 'all', 0);\n        $this->addCSS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/css/overrides.css', 'all', PHP_INT_MAX);\n\n        $this->addJquery();\n        $this->addjQueryPlugin(['scrollTo', 'alerts', 'chosen', 'autosize', 'fancybox']);\n        $this->addjQueryPlugin('growl', null, false);\n        $this->addJqueryUI(['ui.slider', 'ui.datepicker']);\n\n        Media::addJsDef(['currencyFormatters' => Currency::getJavascriptFormatters()]);\n\n        $this->addJS(\n            [\n                _PS_JS_DIR_.'admin.js',\n                _PS_JS_DIR_.'tools.js',\n                _PS_JS_DIR_.'jquery/plugins/timepicker/jquery-ui-timepicker-addon.js',\n            ]\n        );\n\n        //loads specific javascripts for the admin theme\n        $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/vendor/bootstrap.min.js');\n        $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/vendor/modernizr.min.js');\n        $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/vendor/enquire.min.js');\n        $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/vendor/moment-with-langs.min.js');\n        $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/admin-theme.js');\n\n        if (!$this->lite_display) {\n            $this->addJS(__PS_BASE_URI__.$this->admin_webpath.'/themes/'.$this->bo_theme.'/js/help.js');\n        }\n\n        if (!Tools::getValue('submitFormAjax')) {\n            $this->addJS(_PS_JS_DIR_.'admin/notifications.js');\n        }\n\n        $this->addSyntheticSchedulerJs();\n\n        // Execute Hook AdminController SetMedia\n        Hook::triggerEvent('actionAdminControllerSetMedia');\n    }\n\n    /**\n     * Init context and dependencies, handles POST and GET\n     *\n     * @throws PrestaShopException\n     */\n    public function init()\n    {\n        // Has to be removed for the next Prestashop version\n        global $currentIndex;\n\n        parent::init();\n\n        if (Tools::getValue('ajax')) {\n            $this->ajax = '1';\n        }\n\n        /* Server Params */\n        $protocol_link = (Tools::usingSecureMode() && Configuration::get('PS_SSL_ENABLED')) ? 'https://' : 'http://';\n        $protocol_content = (Tools::usingSecureMode() && Configuration::get('PS_SSL_ENABLED')) ? 'https://' : 'http://';\n\n        $this->context->link = new Link($protocol_link, $protocol_content);\n\n        if (isset($_GET['logout'])) {\n            $this->context->employee->logout();\n        }\n\n        if (isset($this->context->cookie->last_activity)) {\n            $shortExpire = defined('_TB_COOKIE_SHORT_EXPIRE_') ? _TB_COOKIE_SHORT_EXPIRE_ : 900;\n            if ((int) $this->context->cookie->last_activity + (int) $shortExpire < time()) {\n                $this->context->employee->logout();\n            } else {\n                $this->context->cookie->last_activity = time();\n            }\n        }\n\n        if ($this->controller_name != 'AdminLogin' && (!isset($this->context->employee) || !$this->context->employee->isLoggedBack())) {\n            if (isset($this->context->employee)) {\n                $this->context->employee->logout();\n            }\n\n            $email = false;\n            if (Tools::getValue('email') && Validate::isEmail(Tools::getValue('email'))) {\n                $email = Tools::getValue('email');\n            }\n\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminLogin').((!isset($_GET['logout']) && $this->controller_name != 'AdminNotFound' && Tools::getValue('controller')) ? '&redirect='.$this->controller_name : '').($email ? '&email='.$email : ''));\n        }\n\n        // Set current index\n        $current_index = 'index.php'.(($controller = Tools::getValue('controller')) ? '?controller='.$controller : '');\n        if ($back = Tools::getValue('back')) {\n            $current_index .= '&back='.urlencode($back);\n        }\n        static::$currentIndex = $current_index;\n        $currentIndex = $current_index;\n\n        if (Tools::getIntValue('liteDisplaying')) {\n            $this->display_header = false;\n            $this->display_header_javascript = true;\n            $this->display_footer = false;\n            $this->content_only = false;\n            $this->lite_display = true;\n        }\n\n        if ($this->ajax && method_exists($this, 'ajaxPreprocess')) {\n            $this->ajaxPreProcess();\n        }\n\n        $this->context->smarty->assign(\n            [\n                'table'            => $this->table,\n                'current'          => static::$currentIndex,\n                'token'            => $this->token,\n                'stock_management' => (int) Configuration::get('PS_STOCK_MANAGEMENT'),\n            ]\n        );\n\n        if ($this->display_header) {\n            $this->context->smarty->assign('displayBackOfficeHeader', Hook::displayHook('displayBackOfficeHeader'));\n        }\n\n        $this->context->smarty->assign(\n            [\n                'displayBackOfficeTop' => Hook::displayHook('displayBackOfficeTop'),\n                'submit_form_ajax'     => Tools::getIntValue('submitFormAjax'),\n            ]\n        );\n\n        Employee::setLastConnectionDate($this->context->employee->id);\n\n        $this->initProcess();\n        $this->initBreadcrumbs();\n        $this->initModal();\n    }\n\n    /**\n     * Retrieve GET and POST value and translate them to actions\n     *\n     * @return void\n     */\n    public function initProcess()\n    {\n        $this->ensureListIdDefinition();\n\n        // Manage list filtering\n        if (Tools::isSubmit('submitFilter'.$this->list_id)\n            || $this->context->cookie->{'submitFilter'.$this->list_id} !== false\n            || Tools::getValue($this->list_id.'Orderby')\n            || Tools::getValue($this->list_id.'Orderway')\n            || Tools::isSubmit('submitFilterForced')\n        ) {\n            $this->filter = true;\n        }\n\n        $this->id_object = Tools::getIntValue($this->identifier);\n\n        /* Delete object image */\n        if (isset($_GET['deleteImage'])) {\n            if ($this->hasDeletePermission()) {\n                $this->action = 'delete_image';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to delete this.');\n            }\n        } elseif (isset($_GET['delete'.$this->table])) {\n            /* Delete object */\n            if ($this->hasDeletePermission()) {\n                $this->action = 'delete';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to delete this.');\n            }\n        } elseif ((isset($_GET['status'.$this->table]) || isset($_GET['status'])) && Tools::getValue($this->identifier)) {\n            /* Change object statuts (active, inactive) */\n            if ($this->hasEditPermission()) {\n                $this->action = 'status';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n            }\n        } elseif (isset($_GET['position'])) {\n            /* Move an object */\n            if ($this->hasEditPermission()) {\n                $this->action = 'position';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n            }\n        } elseif (Tools::isSubmit('submitAdd'.$this->table)\n            || Tools::isSubmit('submitAdd'.$this->table.'AndStay')\n            || Tools::isSubmit('submitAdd'.$this->table.'AndPreview')\n            || Tools::isSubmit('submitAdd'.$this->table.'AndBackToParent')\n        ) {\n            // case 1: updating existing entry\n            if ($this->id_object) {\n                if ($this->hasEditPermission()) {\n                    $this->action = 'save';\n                    if (Tools::isSubmit('submitAdd'.$this->table.'AndStay')) {\n                        $this->display = 'edit';\n                    } else {\n                        $this->display = 'list';\n                    }\n                } else {\n                    $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n                }\n            } else {\n                // case 2: creating new entry\n                if ($this->hasAddPermission()) {\n                    $this->action = 'save';\n                    if (Tools::isSubmit('submitAdd'.$this->table.'AndStay')) {\n                        $this->display = 'edit';\n                    } else {\n                        $this->display = 'list';\n                    }\n                } else {\n                    $this->errors[] = Tools::displayError('You do not have permission to add this.');\n                }\n            }\n        } elseif (isset($_GET['add'.$this->table])) {\n            if ($this->hasAddPermission()) {\n                $this->action = 'new';\n                $this->display = 'add';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to add this.');\n            }\n        } elseif (isset($_GET['update'.$this->table]) && isset($_GET[$this->identifier])) {\n            $this->display = 'edit';\n            if (! $this->hasEditPermission()) {\n                $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n            }\n        } elseif (isset($_GET['view'.$this->table])) {\n            if ($this->hasViewPermission()) {\n                $this->display = 'view';\n                $this->action = 'view';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to view this.');\n            }\n        } elseif (isset($_GET['details'.$this->table])) {\n            if ($this->hasViewPermission()) {\n                $this->display = 'details';\n                $this->action = 'details';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to view this.');\n            }\n        } elseif (isset($_GET['export'.$this->table])) {\n            if ($this->hasViewPermission()) {\n                $this->action = 'export';\n            }\n        } elseif (isset($_POST['submitReset'.$this->list_id])) {\n            /* Cancel all filters for this tab */\n            $this->action = 'reset_filters';\n        } elseif (Tools::isSubmit('submitOptions'.$this->table) || Tools::isSubmit('submitOptions')) {\n            /* Submit options list */\n            $this->display = 'options';\n            if ($this->hasEditPermission()) {\n                $this->action = 'update_options';\n            } else {\n                $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n            }\n        } elseif (Tools::getValue('action') && method_exists($this, 'process'.ucfirst(Tools::toCamelCase(Tools::getValue('action'))))) {\n            $this->action = Tools::getValue('action');\n        } elseif (Tools::isSubmit('submitFields') && $this->required_database && $this->hasAddPermission() && $this->hasDeletePermission()) {\n            $this->action = 'update_fields';\n        } elseif (is_array($this->bulk_actions)) {\n            $submit_bulk_actions = array_merge(\n                [\n                    'enableSelection'  => [\n                        'text' => $this->l('Enable selection'),\n                        'icon' => 'icon-power-off text-success',\n                    ],\n                    'disableSelection' => [\n                        'text' => $this->l('Disable selection'),\n                        'icon' => 'icon-power-off text-danger',\n                    ],\n                ], $this->bulk_actions\n            );\n            foreach ($submit_bulk_actions as $bulk_action => $params) {\n                if (Tools::isSubmit('submitBulk'.$bulk_action.$this->table) || Tools::isSubmit('submitBulk'.$bulk_action)) {\n                    if ($bulk_action === 'delete') {\n                        if ($this->hasDeletePermission()) {\n                            $this->action = 'bulk'.$bulk_action;\n                            $this->boxes = Tools::getArrayValue($this->table.'Box');\n                            if (empty($this->boxes) && $this->table == 'attribute') {\n                                $this->boxes = Tools::getArrayValue($this->table.'_valuesBox');\n                            }\n                        } else {\n                            $this->errors[] = Tools::displayError('You do not have permission to delete this.');\n                        }\n                        break;\n                    } elseif ($this->hasEditPermission()) {\n                        $this->action = 'bulk'.$bulk_action;\n                        $this->boxes = Tools::getArrayValue($this->table.'Box');\n                    } else {\n                        $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n                    }\n                    break;\n                } elseif (Tools::isSubmit('submitBulk')) {\n                    if ($bulk_action === 'delete') {\n                        if ($this->hasDeletePermission()) {\n                            $this->action = 'bulk'.$bulk_action;\n                            $this->boxes = Tools::getArrayValue($this->table.'Box');\n                        } else {\n                            $this->errors[] = Tools::displayError('You do not have permission to delete this.');\n                        }\n                        break;\n                    } elseif ($this->hasEditPermission()) {\n                        $this->action = 'bulk'.Tools::getValue('select_submitBulk');\n                        $this->boxes = Tools::getArrayValue($this->table.'Box');\n                    } else {\n                        $this->errors[] = Tools::displayError('You do not have permission to edit this.');\n                    }\n                    break;\n                }\n            }\n        } elseif (!empty($this->fields_options) && empty($this->fields_list)) {\n            $this->display = 'options';\n        }\n    }\n\n    /**\n     * Set breadcrumbs array for the controller page\n     *\n     * @param int|null $tabId\n     * @param array|null $tabs\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function initBreadcrumbs($tabId = null, $tabs = null)\n    {\n        if (is_null($tabId)) {\n            $tabId = $this->id;\n        }\n\n        $tabs = Tab::recursiveTab($tabId);\n\n        $dummy = ['name' => '', 'href' => '', 'icon' => ''];\n        $breadcrumbs2 = [\n            'container' => $dummy,\n            'tab'       => $dummy,\n            'action'    => $dummy,\n        ];\n        if (isset($tabs[0])) {\n            $this->addMetaTitle($tabs[0]['name']);\n            $breadcrumbs2['tab']['name'] = $tabs[0]['name'];\n            $breadcrumbs2['tab']['href'] = __PS_BASE_URI__.basename(_PS_ADMIN_DIR_).'/'.$this->context->link->getAdminLink($tabs[0]['class_name']);\n            if (!isset($tabs[1])) {\n                $breadcrumbs2['tab']['icon'] = 'icon-'.$tabs[0]['class_name'];\n            }\n        }\n        if (isset($tabs[1])) {\n            $breadcrumbs2['container']['name'] = $tabs[1]['name'];\n            $breadcrumbs2['container']['href'] = __PS_BASE_URI__.basename(_PS_ADMIN_DIR_).'/'.$this->context->link->getAdminLink($tabs[1]['class_name']);\n            $breadcrumbs2['container']['icon'] = 'icon-'.$tabs[1]['class_name'];\n        }\n\n        /* content, edit, list, add, details, options, view */\n        switch ($this->display) {\n            case 'add':\n                $breadcrumbs2['action']['name'] = $this->l('Add', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-plus';\n                break;\n            case 'edit':\n                $breadcrumbs2['action']['name'] = $this->l('Edit', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-pencil';\n                break;\n            case '':\n            case 'list':\n                $breadcrumbs2['action']['name'] = $this->l('List', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-th-list';\n                break;\n            case 'details':\n            case 'view':\n                $breadcrumbs2['action']['name'] = $this->l('View details', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-zoom-in';\n                break;\n            case 'options':\n                $breadcrumbs2['action']['name'] = $this->l('Options', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-cogs';\n                break;\n            case 'generator':\n                $breadcrumbs2['action']['name'] = $this->l('Generator', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-flask';\n                break;\n        }\n\n        $this->context->smarty->assign(\n            [\n                'breadcrumbs2'                   => $breadcrumbs2,\n                'quick_access_current_link_name' => $breadcrumbs2['tab']['name'].(isset($breadcrumbs2['action']) ? ' - '.$breadcrumbs2['action']['name'] : ''),\n                'quick_access_current_link_icon' => $breadcrumbs2['container']['icon'],\n            ]\n        );\n\n        /* BEGIN - Backward compatibility < 1.6.0.3 */\n        if (isset($tabs[0])) {\n            $this->breadcrumbs[] = $tabs[0]['name'];\n        }\n        $navigationPipe = (Configuration::get('PS_NAVIGATION_PIPE') ? Configuration::get('PS_NAVIGATION_PIPE') : '>');\n        $this->context->smarty->assign('navigationPipe', $navigationPipe);\n        /* END - Backward compatibility < 1.6.0.3 */\n    }\n\n    /**\n     * @return void\n     */\n    public function initModal()\n    {\n        $this->context->smarty->assign(\n            [\n                'check_url_fopen'             => (ini_get('allow_url_fopen') ? 'ok' : 'ko'),\n                'check_openssl'               => (extension_loaded('openssl') ? 'ok' : 'ko'),\n                'add_permission'              => 1,\n            ]\n        );\n    }\n\n    /**\n     * Display object details\n     *\n     * @return void\n     */\n    public function viewDetails()\n    {\n    }\n\n    /**\n     * Shortcut to set up a json success payload\n     *\n     * @param string $message Success message\n     */\n    public function jsonConfirmation($message)\n    {\n        $this->json = true;\n        $this->confirmations[] = $message;\n        if ($this->status === '') {\n            $this->status = 'ok';\n        }\n    }\n\n    /**\n     * Shortcut to set up a json error payload\n     *\n     * @param string $message Error message\n     */\n    public function jsonError($message)\n    {\n        $this->json = true;\n        $this->errors[] = $message;\n        if ($this->status === '') {\n            $this->status = 'error';\n        }\n    }\n\n    /**\n     * @deprecated 1.5.0\n     */\n    public function ajaxProcessGetModuleQuickView()\n    {\n        Tools::displayAsDeprecated();\n    }\n\n    /**\n     * Update options and preferences\n     *\n     * @throws PrestaShopException\n     */\n    protected function processUpdateOptions()\n    {\n        $this->beforeUpdateOptions();\n\n        $languages = Language::getLanguages(false);\n\n        $hideMultishopCheckbox = (Shop::getTotalShops(false, null) < 2) ? true : false;\n        foreach ($this->fields_options as $categoryData) {\n            if (!isset($categoryData['fields'])) {\n                continue;\n            }\n\n            $fields = $categoryData['fields'];\n\n            foreach ($fields as $field => $values) {\n                if (isset($values['type']) && $values['type'] == 'selectLang') {\n                    foreach ($languages as $lang) {\n                        if (Tools::getValue($field.'_'.strtoupper($lang['iso_code']))) {\n                            $fields[$field.'_'.strtoupper($lang['iso_code'])] = [\n                                'type'       => 'select',\n                                'cast'       => 'strval',\n                                'identifier' => 'mode',\n                                'list'       => $values['list'],\n                            ];\n                        }\n                    }\n                }\n            }\n\n            // Cast and validate fields.\n            foreach ($fields as $field => $values) {\n\n                // ignore doNotProcess fields\n                if (isset($options['doNotProcess']) && $options['doNotProcess']) {\n                    continue;\n                }\n\n                // We don't validate fields with no visibility\n                if (!$hideMultishopCheckbox && Shop::isFeatureActive() && isset($values['visibility']) && $values['visibility'] > Shop::getContext()) {\n                    continue;\n                }\n\n                // Apply cast before validating.\n                if (array_key_exists('cast', $values)) {\n                    $cast = $values['cast'];\n                    if (array_key_exists('type', $values)\n                        && in_array($values['type'], [\n                            'textLang',\n                            'textareaLang',\n                        ])) {\n                        foreach ($languages as $language) {\n                            $langField = $field . '_' . $language['id_lang'];\n                            $_POST[$langField] = Tools::castInput($cast, Tools::getValue($langField));\n                        }\n                    } else {\n                        $_POST[$field] = Tools::castInput($cast, Tools::getValue($field));\n                    }\n                }\n\n                // Check if field is required\n                if ((!Shop::isFeatureActive() && isset($values['required']) && $values['required'])\n                    || (Shop::isFeatureActive() && isset($_POST['multishopOverrideOption'][$field]) && isset($values['required']) && $values['required'])\n                ) {\n                    if (isset($values['type']) && $values['type'] == 'textLang') {\n                        foreach ($languages as $language) {\n                            if (($value = Tools::getValue($field.'_'.$language['id_lang'])) == false && (string) $value != '0') {\n                                $this->errors[] = sprintf(Tools::displayError('field %s is required.'), $values['title']);\n                            }\n                        }\n                    } elseif (($value = Tools::getValue($field)) == false && (string) $value != '0') {\n                        $this->errors[] = sprintf(Tools::displayError('field %s is required.'), $values['title']);\n                    }\n                }\n\n                // Check field validator\n                if (isset($values['type']) && $values['type'] == 'textLang') {\n                    foreach ($languages as $language) {\n                        if (Tools::getValue($field.'_'.$language['id_lang']) && isset($values['validation'])) {\n                            $valuesValidation = $values['validation'];\n                            if (!Validate::$valuesValidation(Tools::getValue($field.'_'.$language['id_lang']))) {\n                                $this->errors[] = sprintf(Tools::displayError('field %s is invalid.'), $values['title']);\n                            }\n                        }\n                    }\n                } elseif (Tools::getValue($field) && isset($values['validation'])) {\n                    $valuesValidation = $values['validation'];\n                    if (!Validate::$valuesValidation(Tools::getValue($field))) {\n                        $this->errors[] = sprintf(Tools::displayError('field %s is invalid.'), $values['title']);\n                    }\n                }\n\n                // Set default value\n                if (Tools::getValue($field) === false && isset($values['default'])) {\n                    $_POST[$field] = $values['default'];\n                }\n            }\n\n            if (!count($this->errors)) {\n                foreach ($fields as $key => $options) {\n\n                    // ignore doNotProcess fields\n                    if (isset($options['doNotProcess']) && $options['doNotProcess']) {\n                        continue;\n                    }\n\n                    if (Shop::isFeatureActive() && isset($options['visibility']) && $options['visibility'] > Shop::getContext()) {\n                        continue;\n                    }\n\n                    if (!$hideMultishopCheckbox && Shop::isFeatureActive() && Shop::getContext() != Shop::CONTEXT_ALL && empty($options['no_multishop_checkbox']) && empty($_POST['multishopOverrideOption'][$key])) {\n                        Configuration::deleteFromContext($key);\n                        continue;\n                    }\n\n                    // check if a method updateOptionFieldName is available\n                    $methodName = 'updateOption'.Tools::toCamelCase($key, true);\n                    if (method_exists($this, $methodName)) {\n                        $this->$methodName(Tools::getValue($key));\n                    } elseif (isset($options['type']) && in_array($options['type'], ['textLang', 'textareaLang'])) {\n                        $list = [];\n                        foreach ($languages as $language) {\n                            $val = Tools::getValue($key.'_'.$language['id_lang']);\n                            if ($this->validateField($val, $options)) {\n                                if (Validate::isCleanHtml($val)) {\n                                    $list[$language['id_lang']] = $val;\n                                } else {\n                                    $this->errors[] = Tools::displayError('Can not add configuration '.$key.' for lang '.Language::getIsoById((int) $language['id_lang']));\n                                }\n                            }\n                        }\n                        Configuration::updateValue($key, $list, isset($values['validation']) && isset($options['validation']) && $options['validation'] == 'isCleanHtml' ? true : false);\n                    } else {\n                        $isCodeField = $options['type'] === 'code';\n                        $val = $isCodeField ? Tools::getValueRaw($key) : Tools::getValue($key);\n                        if ($this->validateField($val, $options)) {\n                            if ($isCodeField) {\n                                Configuration::updateValueRaw($key, $val);\n                            } elseif (Validate::isCleanHtml($val)) {\n                                Configuration::updateValue($key, $val);\n                            } else {\n                                $this->errors[] = Tools::displayError('Can not add configuration '.$key);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        $this->display = 'list';\n        if (empty($this->errors)) {\n            $this->confirmations[] = $this->_conf[6];\n        }\n    }\n\n    /**\n     * Can be overridden\n     *\n     * @return void\n     */\n    public function beforeUpdateOptions()\n    {\n    }\n\n    /**\n     * @param mixed $value\n     * @param array $field\n     *\n     * @return bool\n     */\n    protected function validateField($value, $field)\n    {\n        if (isset($field['validation'])) {\n            $valid_method_exists = method_exists('Validate', $field['validation']);\n            if ((!isset($field['empty']) || !$field['empty'] || $value) && $valid_method_exists) {\n                $field_validation = $field['validation'];\n                if (!Validate::$field_validation($value)) {\n                    $this->errors[] = Tools::displayError($field['title'].' : Incorrect value');\n\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @return void\n     */\n    protected function redirect()\n    {\n        if ($this->errors || $this->warnings\n            || $this->informations || $this->confirmations) {\n            $token = Tools::getValue('token');\n            $messageCachePath = _PS_CACHE_DIR_.'/'.static::MESSAGE_CACHE_PATH\n                                .'-'.$token;\n\n            file_put_contents($messageCachePath, '<?php\n                $this->errors = '.var_export($this->errors, true).';\n                $this->warnings = '.var_export($this->warnings, true).';\n                $this->informations = '.var_export($this->informations, true).';\n                $this->confirmations = '.var_export($this->confirmations, true).';\n            ');\n            if (function_exists('opcache_invalidate')) {\n                opcache_invalidate($messageCachePath);\n            }\n        }\n\n        Tools::redirectAdmin($this->redirect_after);\n    }\n\n    /**\n     * Add a info message to display at the top of the page\n     *\n     * @param string $msg\n     */\n    protected function displayInformation($msg)\n    {\n        $this->informations[] = $msg;\n    }\n\n    /**\n     * Delete multiple items\n     *\n     * @return bool true if success\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    protected function processBulkDelete()\n    {\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            $result = true;\n            foreach ($this->boxes as $id) {\n                $id = (int)$id;\n                /** @var ObjectModel $objectToDelete */\n                $objectToDelete = new $this->className($id);\n                if (Validate::isLoadedObject($objectToDelete)) {\n                    if ($this->deleted && property_exists($objectToDelete, 'deleted')) {\n                        $objectToDelete->deleted = 1;\n                        $deleted = $objectToDelete->update();\n                    } else {\n                        $deleted = $objectToDelete->delete();\n                    }\n                } else {\n                    $deleted = false;\n                }\n\n                if ($deleted) {\n                    Logger::addLog(sprintf($this->l('%s deletion', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int)$objectToDelete->id, true, (int)$this->context->employee->id);\n                } else {\n                    $result = false;\n                    $this->errors[] = sprintf(Tools::displayError('Can\\'t delete #%d'), $id);\n                }\n            }\n            if ($result) {\n                $this->redirect_after = static::$currentIndex . '&conf=2&token=' . $this->token;\n            } else {\n                $this->errors[] = Tools::displayError('An error occurred while deleting this selection.');\n            }\n        } else {\n            $this->errors[] = Tools::displayError('You must select at least one element to delete.');\n        }\n\n        if (isset($result)) {\n            return $result;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    protected function ajaxProcessOpenHelp()\n    {\n        $help_class_name = $_GET['controller'];\n        $popup_content = \"<!doctype html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta charset='UTF-8'>\n\t\t\t\t<title>thirty bees Help</title>\n\t\t\t\t<link href='//help.thirtybees.com/css/help.css' rel='stylesheet'>\n\t\t\t\t<link href='//fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet'>\n\t\t\t\t<script src='\"._PS_JS_DIR_.\"jquery/jquery-1.11.0.min.js'></script>\n\t\t\t\t<script src='\"._PS_JS_DIR_.\"admin.js'></script>\n\t\t\t\t<script src='\"._PS_JS_DIR_.\"tools.js'></script>\n\t\t\t\t<script>\n\t\t\t\t\thelp_class_name='\".addslashes($help_class_name).\"';\n\t\t\t\t\tiso_user = '\".addslashes($this->context->language->iso_code).\"'\n\t\t\t\t</script>\n\t\t\t\t<script src='themes/default/js/help.js'></script>\n\t\t\t\t<script>\n\t\t\t\t\t$(function(){\n\t\t\t\t\t\tinitHelp();\n\t\t\t\t\t});\n\t\t\t\t</script>\n\t\t\t</head>\n\t\t\t<body><div id='help-container' class='help-popup'></div></body>\n\t\t</html>\";\n        $this->ajaxDie($popup_content);\n    }\n\n    /**\n     * Enable multiple items\n     *\n     * @return bool true if success\n     *\n     * @throws PrestaShopException\n     */\n    protected function processBulkEnableSelection()\n    {\n        return $this->processBulkStatusSelection(1);\n    }\n\n    /**\n     * Toggle status of multiple items\n     *\n     * @param bool $status\n     *\n     * @return bool true if success\n     *\n     * @throws PrestaShopException\n     */\n    protected function processBulkStatusSelection($status)\n    {\n        $result = true;\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            foreach ($this->boxes as $id) {\n                /** @var ObjectModel $object */\n                $object = new $this->className((int) $id);\n                if (property_exists($object, 'active')) {\n                    $object->setFieldsToUpdate(['active' => true]);\n                    $object->active = (int)$status;\n                    $result = $object->update() && $result;\n                } else {\n                    throw new PrestaShopException('property \"active\" is missing in object '.$this->className);\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Disable multiple items\n     *\n     * @return bool true if success\n     *\n     * @throws PrestaShopException\n     */\n    protected function processBulkDisableSelection()\n    {\n        return $this->processBulkStatusSelection(0);\n    }\n\n    /**\n     * @return bool\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    protected function processBulkAffectZone()\n    {\n        $result = false;\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            /** @var Country|State $object */\n            $object = new $this->className();\n            $result = $object->affectZoneToSelection(Tools::getArrayValue($this->table.'Box'), Tools::getIntValue('zone_to_affect'));\n\n            if ($result) {\n                $this->redirect_after = static::$currentIndex.'&conf=28&token='.$this->token;\n            }\n            $this->errors[] = Tools::displayError('An error occurred while assigning a zone to the selection.');\n        } else {\n            $this->errors[] = Tools::displayError('You must select at least one element to assign a new zone.');\n        }\n\n        return $result;\n    }\n\n    /**\n     * Adds javascript URI to list of javascript files included in page header\n     *\n     * @param string $uri uri to javascript file\n     * @param boolean $checkPath if true, system will check if the javascript file exits on filesystem\n     */\n    public function addJavascriptUri($uri, $checkPath)\n    {\n        parent::addJavascriptUri(Media::getUriWithVersion($uri), $checkPath);\n    }\n\n    /**\n     * Adds a new stylesheet(s) to the page header.\n     *\n     * @param string|array $cssUri Path to CSS file, or list of css files like this : array(array(uri => media_type), ...)\n     * @param string $cssMediaType\n     * @param int|null $offset\n     * @param bool $checkPath\n     *\n     * @return bool\n     */\n    public function addCSS($cssUri, $cssMediaType = 'all', $offset = null, $checkPath = true)\n    {\n        if (!is_array($cssUri)) {\n            $cssUri = [$cssUri => $cssMediaType];\n        }\n\n        $converted = [];\n        foreach ($cssUri as $cssFile => $media) {\n            if (is_string($cssFile) && strlen($cssFile) > 1) {\n                $converted[Media::getUriWithVersion($cssFile)] = $media;\n            } else {\n                $converted[Media::getUriWithVersion($media)] = $cssMediaType;\n            }\n        }\n        return parent::addCSS($converted, $cssMediaType, $offset, $checkPath);\n    }\n\n    /**\n     * Method that allows controllers to define their own custom permissions. To be overridden by subclasses\n\n     * Returns array of permission definitions. Example entry:\n     *\n     *  [\n     *       ...\n     *      [\n     *          \"permission\" => 'action-buttons\",\n     *          \"name\" => \"Buttons available to employee\"\n     *          \"description\" => \"Here you can choose what action buttons can employee use\"\n     *          \"levels\" => [\n     *              ...\n     *              'none' => 'No buttons available',\n     *              'invoice' => 'Employee can generate invoice',\n     *              'send_email' => 'Employee can send email'\n     *              'all' => 'Employee can use all buttons'\n     *              ...\n     *          ],\n     *          \"defaultLevel\" => 'all'\n     *      ]\n     *      ...\n     *  ]\n     *\n     * Controllers are responsible for enforcing selected permissions -- permission levels for current employee\n     * can be retrieved by calling method getPermLevels\n     *\n     * @return array\n     */\n    public function getPermDefinitions()\n    {\n        return [];\n    }\n\n    /**\n     * Returns permission levels for current employee. Returns map: permission -> level\n     *\n     * @return array\n     * @throws PrestaShopException\n     */\n    public function getPermLevels()\n    {\n        $perms = $this->getPermDefinitions();\n        $levels = [];\n        if ($perms) {\n            $profileId = $this->context->employee->id_profile;\n            $group = preg_replace(\"#Controller$#\", \"\", preg_replace(\"#Core$#\", \"\", get_class($this)));\n            foreach ($perms as $def) {\n                $permission = $def['permission'];\n                $level = Profile::getProfilePermission($profileId, $group, $permission);\n                if ($level === false) {\n                    $levels[$permission] = $def['defaultLevel'];\n                } else {\n                    $levels[$permission] = $level;\n                }\n            }\n        }\n        return $levels;\n    }\n\n    /**\n     * Extracts information about custom permissions from all admin controllers\n     *\n     * This method iterates over all php files in /controllers/admin directory, and use reflection to checks\n     * if controller overrides method AdminControllerCore::getPermissions()\n     *\n     * For every controller that overrides permission, new instance is created and this method is called to retrieve\n     * list of additional permissions\n     *\n     * @throws PrestaShopException\n     */\n    public static function getControllersPermissions()\n    {\n        $permissions = [];\n        $iterator = new FilesystemIterator(_PS_ADMIN_CONTROLLER_DIR_);\n        foreach ($iterator as $file) {\n            /** @var SplFileInfo $file */\n            if ($file->isFile() && preg_match('#(.*)Controller\\.php$#', $file->getFilename(), $matches)) {\n                $controllerName = $matches[1];\n                $className = $controllerName . 'Controller';\n                try {\n                    $reflection = new ReflectionMethod($className, 'getPermDefinitions');\n                    if ($reflection->getDeclaringClass()->getName() != AdminControllerCore::class) {\n                        /** @var AdminControllerCore $instance - subclass of admin controller */\n                        $instance = new $className();\n                        $permissions[$controllerName] = $instance->getPermDefinitions();\n                    }\n                } catch (ReflectionException $e) {\n                    throw new PrestaShopException(\"Failed to resolve permissions for admin controller \" . $controllerName, 0, $e);\n                }\n            }\n        }\n        return $permissions;\n    }\n\n    /**\n     * @return string\n     * @throws PrestaShopException\n     */\n    protected function getBackUrlParameter(): string\n    {\n        $back = Tools::safeOutput(Tools::getValue('back', ''));\n        if (empty($back)) {\n            $back = static::$currentIndex . '&token=' . $this->token;\n        }\n        if (!Validate::isCleanHtml($back)) {\n            throw new PrestaShopException(Tools::displayError('Parameter $back is invalid'));\n        }\n        return $back;\n    }\n\n    /**\n     * @return bool\n     */\n    protected function hasDeletePermission()\n    {\n        return $this->hasPermission(Profile::PERMISSION_DELETE);\n    }\n\n    /**\n     * Returns true, if current employee can create new records\n     *\n     * @return bool\n     */\n    protected function hasAddPermission()\n    {\n        return $this->hasPermission(Profile::PERMISSION_ADD);\n    }\n\n    /**\n     * Returns true, if current employee has view permissions\n     *\n     * @return bool\n     */\n    protected function hasViewPermission()\n    {\n        return $this->hasPermission(Profile::PERMISSION_VIEW);\n    }\n\n    /**\n     * Returns true, if current employee can edit existing records\n     *\n     * @return bool\n     */\n    protected function hasEditPermission()\n    {\n        return $this->hasPermission(Profile::PERMISSION_EDIT);\n    }\n\n    /**\n     * Returns true, if current employee has permission level\n     *\n     * @param string $permission\n     *\n     * @return bool\n     */\n    protected function hasPermission($permission)\n    {\n        if (! Profile::isValidPermission($permission)) {\n            return false;\n        }\n        if (! isset($this->tabAccess[$permission])) {\n            return false;\n        }\n        return (bool)$this->tabAccess[$permission];\n    }\n\n    /**\n     * @param string|null $orderBy\n     *\n     * @return string|null\n     */\n    protected function resolveOrderBy(?string $orderBy)\n    {\n        if (! empty($orderBy)) {\n            return $orderBy;\n        }\n        $prefix = $this->getCookieFilterPrefix();\n        if ($this->context->cookie->{$prefix . $this->list_id . 'Orderby'}) {\n            return $this->context->cookie->{$prefix . $this->list_id . 'Orderby'};\n        }\n        if ($this->_orderBy) {\n            return $this->_orderBy;\n        }\n        return $this->_defaultOrderBy;\n    }\n\n    /**\n     * @param string|null $orderWay\n     *\n     * @return string|null\n     */\n    protected function resolveOrderWay(?string $orderWay)\n    {\n        if (! empty($orderWay)) {\n            return $orderWay;\n        }\n        $prefix = $this->getCookieFilterPrefix();\n        if ($this->context->cookie->{$prefix.$this->list_id.'Orderway'}) {\n            return $this->context->cookie->{$prefix.$this->list_id.'Orderway'};\n        }\n        if ($this->_orderWay) {\n            return $this->_orderWay;\n        }\n        return $this->_defaultOrderWay;\n    }\n\n    /**\n     * @param string $field\n     *\n     * @return array|bool|float|int|string|null\n     */\n    protected function getListFieldFilterValue($field)\n    {\n        $filterName = $this->table . 'Filter_' . $field;\n        if (Tools::getIsset($filterName)) {\n            return Tools::getValue($filterName);\n        }\n        $cookieFilterName = $this->getCookieFilterPrefix() . $filterName;\n        if (isset($this->context->cookie->$cookieFilterName)) {\n            return $this->context->cookie->$cookieFilterName;\n        }\n        return null;\n    }\n\n    /**\n     * @return void\n     */\n    protected function setJSendErrorHandling()\n    {\n        $this->postProcessHandleExceptions = false;\n        static::getErrorHandler()->setErrorResponseHandler(new JSendErrorResponse(_PS_MODE_DEV_));\n    }\n}\n", "<?php\n/**\n * 2007-2016 PrestaShop\n *\n * thirty bees is an extension to the PrestaShop e-commerce software developed by PrestaShop SA\n * Copyright (C) 2017-2018 thirty bees\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@thirtybees.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.thirtybees.com for more information.\n *\n * @author    thirty bees <contact@thirtybees.com>\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2017-2018 thirty bees\n * @copyright 2007-2016 PrestaShop SA\n * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n *  PrestaShop is an internationally registered trademark & property of PrestaShop SA\n */\n\n/**\n * Class HelperListCore\n */\nclass HelperListCore extends Helper\n{\n    /**\n     * @var array $cache_lang use to cache texts in current language\n     */\n    public static $cache_lang = [];\n\n    /**\n     * @var int Number of results in list\n     */\n    public $listTotal = 0;\n\n    /**\n     * @var array Number of results in list per page (used in select field)\n     */\n    public $_pagination = [20, 50, 100, 300, 1000];\n\n    /**\n     * @var int Default number of results in list per page\n     */\n    public $_default_pagination = 50;\n\n    /**\n     * @var string ORDER BY clause determined by field/arrows in list header\n     */\n    public $orderBy;\n\n    /**\n     * @var string Default ORDER BY clause when $orderBy is not defined\n     */\n    public $_defaultOrderBy = false;\n\n    /**\n     * @var array : list of vars for button delete\n     */\n    public $tpl_delete_link_vars = [];\n\n    /**\n     * @var string Order way (ASC, DESC) determined by arrows in list header\n     */\n    public $orderWay;\n\n    /**\n     * @var string\n     */\n    public $identifier;\n\n    /**\n     * @var bool $is_cms\n     */\n    public $is_cms = false;\n\n    /**\n     * @var string\n     */\n    public $position_identifier;\n\n    /**\n     * @var string | int\n     */\n    public $position_group_identifier;\n\n    /**\n     * @var string\n     */\n    public $table_id;\n\n    /**\n     * @var bool Content line is clickable if true\n     */\n    public $no_link = false;\n\n    /**\n     * @var string\n     */\n    public $list_id;\n\n    /**\n     * @var string\n     */\n    public $controller_name;\n\n    /**\n     * @var string\n     */\n    public $imageType;\n\n    /**\n     * @var array list of required actions for each list row\n     */\n    public $actions = [];\n\n    /**\n     * @var array list of row ids associated with a given action for witch this action have to not be available\n     */\n    public $list_skip_actions = [];\n\n    /**\n     * @var array\n     */\n    public $bulk_actions = [];\n\n    /**\n     * @var bool\n     */\n    public $force_show_bulk_actions = false;\n\n    /**\n     * @var string\n     */\n    public $specificConfirmDelete = null;\n\n    /**\n     * @var bool\n     */\n    public $colorOnBackground;\n\n    /**\n     * @var bool If true, activates color on hover\n     */\n    public $row_hover = true;\n\n    /**\n     * @var string|null If not null, a title will be added on that list\n     */\n    public $title = null;\n\n    /**\n     * @var bool ask for simple header : no filters, no paginations and no sorting\n     */\n    public $simple_header = false;\n\n    /**\n     * @var array\n     */\n    public $ajax_params = [];\n\n    /**\n     * @var int\n     */\n    public $page;\n\n    /**\n     * @var string\n     */\n    public $sql;\n\n    /**\n     * @var array Cache for query results\n     */\n    protected $_list = [];\n\n    /**\n     * @var array WHERE clause determined by filter fields\n     */\n    protected $_filter;\n\n    /**\n     * @var int $deleted\n     */\n    protected $deleted = 0;\n\n    /**\n     * @var array Customize list display\n     *\n     * align  : determine value alignment\n     * prefix : displayed before value\n     * suffix : displayed after value\n     * image  : object image\n     * icon   : icon determined by values\n     * active : allow to toggle status\n     */\n    protected $fields_list;\n\n    /**\n     * @var Smarty_Internal_Template|string\n     */\n    protected $header_tpl = 'list_header.tpl';\n\n    /**\n     * @var Smarty_Internal_Template|string\n     */\n    protected $content_tpl = 'list_content.tpl';\n\n    /**\n     * @var Smarty_Internal_Template|string\n     */\n    protected $footer_tpl = 'list_footer.tpl';\n\n    /**\n     * @var string $shopLinkType\n     */\n    public $shopLinkType;\n\n    /**\n     * @var callable method used to generate link\n     */\n    public $linkUrlCallback;\n\n    /**\n     * @var string target window for drilldown link\n     */\n    public $linkUrlTarget = '_self';\n\n    /**\n     * HelperListCore constructor.\n     */\n    public function __construct()\n    {\n        $this->base_folder = 'helpers/list/';\n        $this->base_tpl = 'list.tpl';\n\n        parent::__construct();\n    }\n\n    /**\n     * Return an html list given the data to fill it up\n     *\n     * @param array $list entries to display (rows)\n     * @param array $fieldsDisplay fields (cols)\n     *\n     * @return string html\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function generateList($list, $fieldsDisplay)\n    {\n        // Append when we get a syntax error in SQL query\n        if ($list === false) {\n            $this->getController()->warnings[] = $this->l('Bad SQL query');\n\n            return false;\n        }\n\n        $this->tpl = $this->createTemplate($this->base_tpl);\n        $this->header_tpl = $this->createTemplate($this->header_tpl);\n        $this->content_tpl = $this->createTemplate($this->content_tpl);\n        $this->footer_tpl = $this->createTemplate($this->footer_tpl);\n\n        $this->_list = $list;\n        $this->fields_list = $fieldsDisplay;\n\n        $this->orderBy = preg_replace('/^([a-z _]*!)/Ui', '', $this->orderBy ?? '');\n        $this->orderWay = preg_replace('/^([a-z _]*!)/Ui', '', $this->orderWay ?? '');\n\n        $this->tpl->assign(\n            [\n                'header'  => $this->displayListHeader(), // Display list header (filtering, pagination and column names)\n                'content' => $this->displayListContent(), // Show the content of the table\n                'footer'  => $this->displayListFooter(), // Close list table and submit button\n            ]\n        );\n\n        return parent::generate();\n    }\n\n    /**\n     * Display list header (filtering, pagination and column names)\n     *\n     * @return string\n     *\n     * @throws SmartyException\n     */\n    public function displayListHeader()\n    {\n        if (is_null($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n\n        $idCat = Tools::getIntValue('id_'.($this->is_cms ? 'cms_' : '').'category');\n\n        if (empty($token)) {\n            $token = $this->token;\n        }\n\n        /* Determine total page number */\n        $pagination = $this->getSelectedPagination();\n        $totalPages = max(1, ceil($this->listTotal / $pagination));\n\n        $identifier = Tools::getIsset($this->identifier) ? '&'.$this->identifier.'='.Tools::getIntValue($this->identifier) : '';\n\n        $action = $this->currentIndex.$identifier.'&token='.$token.'#'.$this->list_id;\n\n        /* Determine current page number */\n        $page = Tools::getIntValue('submitFilter'.$this->list_id);\n        if ($page <= 0) {\n            $page = 1;\n        }\n        if ($page > $totalPages) {\n            $page = $totalPages;\n        }\n        $this->page = (int)$page;\n\n        if (is_null($this->table_id) && $this->position_identifier && Tools::getIntValue($this->position_identifier, 1)) {\n            $this->table_id = substr($this->identifier, 3, strlen($this->identifier));\n        }\n\n        if ($this->position_identifier && ($this->orderBy == 'position' && $this->orderWay != 'DESC')) {\n            $tableDnd = true;\n        }\n\n        $prefix = str_replace(['admin', 'controller'], '', mb_strtolower((string)$this->controller_name));\n        $ajax = false;\n        $controller = $this->getController();\n        $cookie = $this->context->cookie;\n        foreach ($this->fields_list as $key => $params) {\n            if (!isset($params['type'])) {\n                $params['type'] = 'text';\n            }\n\n            $valueKey = $prefix.$this->list_id.'Filter_'.(array_key_exists('filter_key', $params) ? $params['filter_key'] : $key);\n            if ($key == 'active' && strpos($key, '!') !== false) {\n                $keys = explode('!', $params['filter_key']);\n                $valueKey = $keys[1];\n            }\n            $value = $cookie->{$valueKey};\n            if (!$value && Tools::getIsset($valueKey)) {\n                $value = Tools::getValue($valueKey);\n            }\n\n            switch ($params['type']) {\n                case 'bool':\n                    if (isset($params['ajax']) && $params['ajax']) {\n                        $ajax = true;\n                    }\n                    break;\n\n                case 'date':\n                case 'datetime':\n                    if ($value) {\n                        if (is_string($value)) {\n                            $value = json_decode($value, true);\n                        }\n                        if (!Validate::isCleanHtml($value[0]) || !Validate::isCleanHtml($value[1])) {\n                            $value = '';\n                        }\n                    }\n                    $name = $this->list_id.'Filter_'.($params['filter_key'] ?? $key);\n                    $nameId = str_replace('!', '__', $name);\n\n                    $params['id_date'] = $nameId;\n                    $params['name_date'] = $name;\n\n                    $controller->addJqueryUI('ui.datepicker');\n                    break;\n\n                case 'select':\n                    foreach ($params['list'] as $optionValue => $optionDisplay) {\n                        if (isset($cookie->{$prefix.$this->list_id.'Filter_'.$params['filter_key']})\n                            && $cookie->{$prefix.$this->list_id.'Filter_'.$params['filter_key']} == $optionValue\n                            && $cookie->{$prefix.$this->list_id.'Filter_'.$params['filter_key']} != ''\n                        ) {\n                            $this->fields_list[$key]['select'][$optionValue]['selected'] = 'selected';\n                        }\n                    }\n                    break;\n\n                case 'text':\n                    if (!Validate::isCleanHtml($value)) {\n                        $value = '';\n                    }\n            }\n\n            $params['value'] = $value;\n            $this->fields_list[$key] = $params;\n        }\n\n        $hasValue = false;\n        $hasSearchField = false;\n\n        foreach ($this->fields_list as $field) {\n            if (isset($field['value']) && $field['value'] !== false && $field['value'] !== '') {\n                if (is_array($field['value']) && trim(implode('', $field['value'])) == '') {\n                    continue;\n                }\n\n                $hasValue = true;\n                break;\n            }\n            if (!(isset($field['search']) && $field['search'] === false)) {\n                $hasSearchField = true;\n            }\n        }\n\n        $this->context->smarty->assign(\n            [\n                'page'                => $page,\n                'simple_header'       => $this->simple_header,\n                'total_pages'         => $totalPages,\n                'selected_pagination' => $this->getSelectedPagination(),\n                'pagination'          => $this->_pagination,\n                'list_total'          => $this->listTotal,\n                'sql'                 => str_replace('\\n', ' ', str_replace('\\r', '', (string)$this->sql)),\n                'table'               => $this->table,\n                'bulk_actions'        => $this->bulk_actions,\n                'show_toolbar'        => $this->show_toolbar,\n                'toolbar_scroll'      => $this->toolbar_scroll,\n                'toolbar_btn'         => $this->toolbar_btn,\n                'has_bulk_actions'    => $this->hasBulkActions($hasValue),\n                'filters_has_value'   => (bool) $hasValue,\n            ]\n        );\n\n        // Include dnd javascript if list contains position update functionality\n        if ($this->position_identifier && $this->orderBy === 'position') {\n            $controller->addJqueryPlugin('tablednd');\n            $controller->addJS(_PS_JS_DIR_ . 'admin/dnd.js');\n            Media::addJsDef([\n                'come_from' => $this->list_id ?? $this->table,\n                'alternate' => $this->orderWay === 'DESC'\n            ]);\n        }\n\n        $this->header_tpl->assign(\n            array_merge(\n                [\n                    'ajax'              => $ajax,\n                    'title'             => array_key_exists('title', $this->tpl_vars) ? $this->tpl_vars['title'] : $this->title,\n                    'show_filters'      => ((count($this->_list) > 1 && $hasSearchField) || $hasValue),\n                    'currentIndex'      => $this->currentIndex,\n                    'action'            => $action,\n                    'order_way'         => $this->orderWay,\n                    'order_by'          => $this->orderBy,\n                    'fields_display'    => $this->fields_list,\n                    'delete'            => in_array('delete', $this->actions),\n                    'identifier'        => $this->identifier,\n                    'id_cat'            => $idCat,\n                    'shop_link_type'    => $this->shopLinkType,\n                    'has_actions'       => !empty($this->actions),\n                    'table_id'          => $this->table_id ?? null,\n                    'table_dnd'         => $tableDnd ?? null,\n                    'name'              => $name ?? null,\n                    'name_id'           => $nameId ?? null,\n                    'row_hover'         => $this->row_hover,\n                    'list_id'           => $this->list_id ?? $this->table,\n                    'token'             => $this->token,\n                ],\n                $this->tpl_vars\n            )\n        );\n\n        return $this->header_tpl->fetch();\n    }\n\n    /**\n     * @param bool $hasValue\n     *\n     * @return bool\n     */\n    public function hasBulkActions($hasValue = false)\n    {\n        if ($this->force_show_bulk_actions) {\n            return true;\n        }\n\n        if (count($this->_list) === 0 && !$hasValue) {\n            return false;\n        }\n\n        if (is_array($this->list_skip_actions) && count($this->list_skip_actions)\n            && is_array($this->bulk_actions) && count($this->bulk_actions)\n        ) {\n            foreach ($this->bulk_actions as $action => $data) {\n                if (array_key_exists($action, $this->list_skip_actions)) {\n                    foreach ($this->_list as $row) {\n                        if (!in_array($row[$this->identifier], $this->list_skip_actions[$action])) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                }\n            }\n        }\n\n        return !empty($this->bulk_actions);\n    }\n\n    /**\n     * @return false|string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayListContent()\n    {\n        $positionGroupIdentifier = 0;\n        if (isset($this->fields_list['position'])) {\n            if ($this->position_identifier) {\n                if (! is_null($this->position_group_identifier)) {\n                    $positionGroupIdentifier = Tools::getIsset($this->position_group_identifier)\n                        ? Tools::getValue($this->position_group_identifier)\n                        : $this->position_group_identifier;\n                } else {\n                    if ($this->is_cms) {\n                        $parameter = 'id_cms_category';\n                        $defaultId = 1;\n                    } else {\n                        $parameter = 'id_category';\n                        $defaultId = (int)Category::getRootCategory()->id;\n                    }\n                    $positionGroupIdentifier = Tools::getIntValue($parameter, $defaultId);\n                }\n            } else {\n                $positionGroupIdentifier = Category::getRootCategory()->id;\n            }\n\n            $positions = array_map(function ($elem) {\n                return (int) $elem['position'];\n            }, $this->_list);\n            sort($positions);\n        }\n\n        // key_to_get is used to display the correct product category or cms category after a position change\n        $identifier = in_array($this->identifier, ['id_category', 'id_cms_category']) ? '_parent' : '';\n        if ($identifier) {\n            $keyToGet = 'id_'.($this->is_cms ? 'cms_' : '').'category'.$identifier;\n        }\n\n        foreach ($this->_list as $index => $tr) {\n            $id = null;\n            if (isset($tr[$this->identifier])) {\n                $id = $tr[$this->identifier];\n            }\n            $name = $tr['name'] ?? null;\n\n            if ($this->shopLinkType) {\n                $this->_list[$index]['short_shop_name'] = mb_strlen($tr['shop_name']) > 15 ? mb_substr($tr['shop_name'], 0, 15).'...' : $tr['shop_name'];\n            }\n\n            $isFirst = true;\n            // Check all available actions to add to the current list row\n            $controller = $this->getController();\n            foreach ($this->actions as $action) {\n                //Check if the action is available for the current row\n                if (!array_key_exists($action, $this->list_skip_actions) || !in_array($id, $this->list_skip_actions[$action])) {\n                    $methodName = 'display'.ucfirst($action).'Link';\n\n                    if (method_exists($controller, $methodName)) {\n                        $this->_list[$index][$action] = $controller->$methodName($this->token, $id, $name);\n                    } elseif ($this->module instanceof Module && method_exists($this->module, $methodName)) {\n                        $this->_list[$index][$action] = $this->module->$methodName($this->token, $id, $name);\n                    } elseif (method_exists($this, $methodName)) {\n                        $this->_list[$index][$action] = $this->$methodName($this->token, $id, $name);\n                    }\n                }\n\n                if ($isFirst && isset($this->_list[$index][$action])) {\n                    $isFirst = false;\n\n                    if (!preg_match('/a\\s*.*class/', $this->_list[$index][$action])) {\n                        $this->_list[$index][$action] = preg_replace(\n                            '/href\\s*=\\s*\\\"([^\\\"]*)\\\"/',\n                            'href=\"$1\" class=\"btn btn-default\"',\n                            $this->_list[$index][$action]\n                        );\n                    } elseif (!preg_match('/a\\s*.*class\\s*=\\s*\\\".*btn.*\\\"/', $this->_list[$index][$action])) {\n                        $this->_list[$index][$action] = preg_replace(\n                            '/a(\\s*.*)class\\s*=\\s*\\\"(.*)\\\"/',\n                            'a $1 class=\"$2 btn btn-default\"',\n                            $this->_list[$index][$action]\n                        );\n                    }\n                }\n            }\n\n            // @todo skip action for bulk actions\n            // $this->_list[$index]['has_bulk_actions'] = true;\n            foreach ($this->fields_list as $key => $params) {\n                $tmp = explode('!', $key);\n                $key = $tmp[1] ?? $tmp[0];\n                $dataValue = $tr[$key] ?? null;\n\n                if (isset($params['active'])) {\n                    // If method is defined in calling controller, use it instead of the Helper method\n                    if (method_exists($controller, 'displayEnableLink')) {\n                        $callingObj = $controller;\n                    } elseif ($this->module && method_exists($this->module, 'displayEnableLink')) {\n                        $callingObj = $this->module;\n                    } else {\n                        $callingObj = $this;\n                    }\n\n                    if (!isset($params['ajax'])) {\n                        $params['ajax'] = false;\n                    }\n                    $this->_list[$index][$key] = $callingObj->displayEnableLink(\n                        $this->token,\n                        $id,\n                        $dataValue,\n                        $params['active'],\n                        Tools::getIntValue('id_category'),\n                        Tools::getIntValue('id_product'),\n                        $params['ajax']\n                    );\n                } elseif (isset($params['activeVisu'])) {\n                    $this->_list[$index][$key] = (bool) $dataValue;\n                } elseif (isset($params['position'])) {\n                    $this->_list[$index][$key] = [\n                        'position'          => $dataValue,\n                        'position_url_down' => $this->currentIndex.\n                            (isset($keyToGet) ? '&'.$keyToGet.'='.(int) $positionGroupIdentifier : '').\n                            '&'.$this->position_identifier.'='.$id.\n                            '&way=1&position='.((int) $tr['position'] + 1).'&token='.$this->token,\n                        'position_url_up'   => $this->currentIndex.\n                            (isset($keyToGet) ? '&'.$keyToGet.'='.(int) $positionGroupIdentifier : '').\n                            '&'.$this->position_identifier.'='.$id.\n                            '&way=0&position='.((int) $tr['position'] - 1).'&token='.$this->token,\n                    ];\n                } elseif (isset($params['image'])) {\n                    // item_id is the product id in a product image context, else it is the image id.\n                    $itemId = isset($params['image_id']) ? $tr[$params['image_id']] : $id;\n                    if ($params['image'] != 'p') {\n                        $pathToImage = _PS_IMG_DIR_.$params['image'].'/'.$itemId.(isset($tr['id_image']) ? '-'.(int) $tr['id_image'] : '').'.'.$this->imageType;\n                        $this->_list[$index][$key] = ImageManager::thumbnail($pathToImage, $this->table.'_mini_'.$itemId.'_'.$this->context->shop->id.'.'.$this->imageType, 45, $this->imageType);\n                    } else {\n                        $this->_list[$index][$key] = ImageManager::getProductImageThumbnailTag($tr['id_image']);\n                    }\n                } elseif (isset($params['icon']) && (isset($params['icon'][$dataValue]) || isset($params['icon']['default']))) {\n                    $defaultIcon = 'unknown.gif';\n                    if (isset($params['icon']['default'])) {\n                        if (is_array($params['icon']['default'])) {\n                            $defaultIcon = $params['icon']['default']['src'];\n                        } else {\n                            $defaultIcon = $params['icon']['default'];\n                        }\n                    }\n                    $iconValue = $params['icon'][$dataValue] ?? $defaultIcon;\n                    if (is_array($iconValue)) {\n                        $this->_list[$index][$key] = $iconValue;\n                    } else {\n                        $this->_list[$index][$key] = [\n                            'src' => $iconValue,\n                            'alt' => sprintf($this->l(\"Value: %s\"), $dataValue),\n                        ];\n                    }\n                    // backwards compatibility for build-in icon files stored in img/admin directory\n                    if (isset($this->_list[$index][$key]['src'])) {\n                        $iconFile = $this->_list[$index][$key]['src'];\n                        if (file_exists(_PS_IMG_DIR_.'admin/'.$iconFile)) {\n                            $this->_list[$index][$key]['src'] =_PS_ADMIN_IMG_.$iconFile;\n                        }\n                    }\n                } elseif (isset($params['type']) && $params['type'] == 'float') {\n                    $this->_list[$index][$key] = rtrim(rtrim($dataValue, '0'), '.');\n                } elseif (isset($dataValue)) {\n                    if (isset($params['callback'])) {\n                        $callbackObj = (isset($params['callback_object'])) ? $params['callback_object'] : $controller;\n                        $this->_list[$index][$key] = call_user_func_array([$callbackObj, $params['callback']], [$dataValue, $tr]);\n                    } else {\n                        $this->_list[$index][$key] = $dataValue;\n                    }\n                }\n            }\n        }\n\n        $this->content_tpl->assign(\n            array_merge(\n                $this->tpl_vars,\n                [\n                    'shop_link_type'            => $this->shopLinkType,\n                    'name'                      => $name ?? null,\n                    'position_identifier'       => $this->position_identifier,\n                    'identifier'                => $this->identifier,\n                    'table'                     => $this->table,\n                    'token'                     => $this->token,\n                    'color_on_bg'               => $this->colorOnBackground,\n                    'position_group_identifier' => $positionGroupIdentifier ?? false,\n                    'bulk_actions'              => $this->bulk_actions,\n                    'positions'                 => $positions ?? null,\n                    'order_by'                  => $this->orderBy,\n                    'order_way'                 => $this->orderWay,\n                    'is_cms'                    => $this->is_cms,\n                    'fields_display'            => $this->fields_list,\n                    'list'                      => $this->_list,\n                    'actions'                   => $this->actions,\n                    'no_link'                   => $this->no_link,\n                    'current_index'             => $this->currentIndex,\n                    'linkUrlCallback'           => is_callable($this->linkUrlCallback) ? $this->linkUrlCallback : null,\n                    'linkUrlTarget'             => $this->linkUrlTarget,\n                    'view'                      => in_array('view', $this->actions),\n                    'edit'                      => in_array('edit', $this->actions),\n                    'has_actions'               => !empty($this->actions),\n                    'list_skip_actions'         => $this->list_skip_actions,\n                    'row_hover'                 => $this->row_hover,\n                    'list_id'                   => $this->list_id ?? $this->table,\n                    'checked_boxes'             => Tools::getArrayValue(($this->list_id ?? $this->table).'Box'),\n                ]\n            )\n        );\n\n        return $this->content_tpl->fetch();\n    }\n\n    /**\n     * Fetch the template for action enable\n     *\n     * @param string $token\n     * @param string $id\n     * @param bool $value state enabled or not\n     * @param string $active status\n     * @param int|null $idCategory\n     * @param int|null $idProduct\n     * @param bool $ajax\n     *\n     * @return string\n     *\n     * @throws SmartyException\n     * @throws PrestaShopException\n     */\n    public function displayEnableLink($token, $id, $value, $active, $idCategory = null, $idProduct = null, $ajax = false)\n    {\n        $tplEnable = $this->createTemplate('list_action_enable.tpl');\n        $tplEnable->assign(\n            [\n                'ajax'       => $ajax,\n                'enabled'    => (bool) $value,\n                'url_enable' => $this->currentIndex.'&'.$this->identifier.'='.$id.'&'.$active.$this->table.($ajax ? '&action='.$active.$this->table.'&ajax='.(int) $ajax : '').((int) $idCategory && (int) $idProduct ? '&id_category='.(int) $idCategory : '').($this->page && $this->page > 1 ? '&page='.(int) $this->page : '').'&token='.($token != null ? $token : $this->token),\n            ]\n        );\n\n        return $tplEnable->fetch();\n    }\n\n    /**\n     * Close list table and submit button\n     *\n     * @throws SmartyException\n     */\n    public function displayListFooter()\n    {\n        if (is_null($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n\n        $this->footer_tpl->assign(\n            array_merge(\n                $this->tpl_vars,\n                [\n                    'current' => $this->currentIndex,\n                    'list_id' => $this->list_id,\n                    'token'   => $this->token,\n                ]\n            )\n        );\n\n        return $this->footer_tpl->fetch();\n    }\n\n    /**\n     * Display duplicate action link\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayDuplicateLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_duplicate.tpl');\n        if (!array_key_exists('Bad SQL query', static::$cache_lang)) {\n            static::$cache_lang['Duplicate'] = $this->l('Duplicate');\n        }\n\n        if (!array_key_exists('Copy images too?', static::$cache_lang)) {\n            static::$cache_lang['Copy images too?'] = $this->l('This will copy the images too. If you wish to proceed, click \"Yes\". If not, click \"No\".');\n        }\n\n        $duplicate = $this->currentIndex.'&'.$this->identifier.'='.$id.'&duplicate'.$this->table;\n\n        $confirm = static::$cache_lang['Copy images too?'];\n\n        if (($this->table == 'product') && !Image::hasImages($this->context->language->id, (int) $id)) {\n            $confirm = '';\n        }\n\n        $tpl->assign(\n            [\n                'href'        => $this->currentIndex.'&'.$this->identifier.'='.$id.'&view'.$this->table.'&token='.($token != null ? $token : $this->token),\n                'action'      => static::$cache_lang['Duplicate'],\n                'confirm'     => $confirm,\n                'location_ok' => $duplicate.'&token='.($token != null ? $token : $this->token),\n                'location_ko' => $duplicate.'&noimage=1&token='.($token ? $token : $this->token),\n            ]\n        );\n\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * Display action show details of a table row\n     * This action need an ajax request with a return like this:\n     *   {\n     *     use_parent_structure: true // If false, data need to be an html\n     *     data:\n     *       [\n     *         {field_name: 'value'}\n     *       ],\n     *     fields_display: // attribute $fields_list of the admin controller\n     *   }\n     * or somethins like this:\n     *   {\n     *     use_parent_structure: false // If false, data need to be an html\n     *     data:\n     *       '<p>My html content</p>',\n     *     fields_display: // attribute $fields_list of the admin controller\n     *   }\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayDetailsLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_details.tpl');\n        if (!array_key_exists('Details', static::$cache_lang)) {\n            static::$cache_lang['Details'] = $this->l('Details');\n        }\n\n        $ajaxParams = $this->ajax_params;\n        if (!is_array($ajaxParams) || !isset($ajaxParams['action'])) {\n            $ajaxParams['action'] = 'details';\n        }\n\n        $tpl->assign(\n            [\n                'id'          => $id,\n                'href'        => $this->currentIndex.'&'.$this->identifier.'='.$id.'&details'.$this->table.'&token='.($token != null ? $token : $this->token),\n                'controller'  => str_replace('Controller', '', get_class($this->getController())),\n                'token'       => $token != null ? $token : $this->token,\n                'action'      => static::$cache_lang['Details'],\n                'params'      => $ajaxParams,\n                'json_params' => json_encode($ajaxParams),\n            ]\n        );\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * Display view action link\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayViewLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_view.tpl');\n        if (!array_key_exists('View', static::$cache_lang)) {\n            static::$cache_lang['View'] = $this->l('View');\n        }\n        $tpl->assign(\n            [\n                'href'   => $this->currentIndex.'&'.$this->identifier.'='.$id.'&view'.$this->table.'&token='.($token != null ? $token : $this->token),\n                'action' => static::$cache_lang['View'],\n            ]\n        );\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * Display edit action link\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayEditLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_edit.tpl');\n        if (!array_key_exists('Edit', static::$cache_lang)) {\n            static::$cache_lang['Edit'] = $this->l('Edit');\n        }\n        $tpl->assign(\n            [\n                'href'   => $this->currentIndex.'&'.$this->identifier.'='.$id.'&update'.$this->table.($this->page && $this->page > 1 ? '&page='.(int) $this->page : '').'&token='.($token != null ? $token : $this->token),\n                'action' => static::$cache_lang['Edit'],\n                'id'     => $id,\n            ]\n        );\n        return $tpl->fetch();\n    }\n\n    /**\n     * Display delete action link\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayDeleteLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_delete.tpl');\n\n        if (!array_key_exists('Delete', static::$cache_lang)) {\n            static::$cache_lang['Delete'] = $this->l('Delete');\n        }\n        if (!array_key_exists('DeleteItem', static::$cache_lang)) {\n            static::$cache_lang['DeleteItem'] = $this->l('Delete selected item?', 'Helper', true, false);\n        }\n        if (!array_key_exists('Name', static::$cache_lang)) {\n            static::$cache_lang['Name'] = $this->l('Name:', 'Helper', true, false);\n        }\n        if (!is_null($name)) {\n            $name = addcslashes('\\n\\n'.static::$cache_lang['Name'].' '.$name, '\\'');\n        }\n        $data = [\n            $this->identifier => $id,\n            'href'            => $this->currentIndex.'&'.$this->identifier.'='.$id.'&delete'.$this->table.'&token='.($token != null ? $token : $this->token),\n            'action'          => static::$cache_lang['Delete'],\n        ];\n        if ($this->specificConfirmDelete !== false) {\n            $data['confirm'] = !is_null($this->specificConfirmDelete)\n                ? '\\r'.$this->specificConfirmDelete\n                : Tools::safeOutput(static::$cache_lang['DeleteItem'].$name);\n        }\n        $tpl->assign(array_merge($this->tpl_delete_link_vars, $data));\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * Display default action link\n     *\n     * @param string|null $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayDefaultLink($token, $id, $name = null)\n    {\n        $tpl = $this->createTemplate('list_action_default.tpl');\n        if (!array_key_exists('Default', static::$cache_lang)) {\n            static::$cache_lang['Default'] = $this->l('Default');\n        }\n        $tpl->assign(\n            [\n                'href'   => $this->currentIndex.'&'.$this->identifier.'='.(int) $id.'&default'.$this->table.'&token='.($token != null ? $token : $this->token),\n                'action' => static::$cache_lang['Default'],\n                'name'   => $name,\n            ]\n        );\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * @return int\n     */\n    protected function getSelectedPagination()\n    {\n        return static::resolvePagination($this->list_id, $this->context->cookie, $this->_pagination, $this->_default_pagination);\n    }\n\n    /**\n     * @param string $listId\n     * @param Cookie $cookie\n     * @param array $pagination\n     * @param int $defaultPagination\n     *\n     * @return int\n     */\n    public static function resolvePagination(string $listId, Cookie $cookie, array $pagination, int $defaultPagination)\n    {\n        if ($pagination) {\n            $value = static::resolvePaginationValue($listId, $cookie, $defaultPagination);\n            if (in_array($value, $pagination)) {\n                return $value;\n            }\n            if (in_array($defaultPagination, $pagination)) {\n                return $defaultPagination;\n            }\n            return $pagination[0];\n        } else {\n            trigger_error(\"Pagination not set for list $listId\", E_USER_WARNING);\n            return 20;\n        }\n    }\n\n    /**\n     * @param string $listId\n     * @param Cookie $cookie\n     * @param int $defaultPagination\n     *\n     * @return int\n     */\n    protected static function resolvePaginationValue(string $listId, Cookie $cookie, int $defaultPagination)\n    {\n        $paginationKey = $listId.'_pagination';\n        $pagination = Tools::getIntValue($paginationKey);\n        if ($pagination > 0) {\n            return $pagination;\n        }\n        if (isset($cookie->{$paginationKey})) {\n            $pagination = (int)$cookie->{$paginationKey};\n            if ($pagination > 0) {\n                return $pagination;\n            }\n        }\n        return $defaultPagination;\n    }\n}\n"], "filenames": ["classes/controller/AdminController.php", "classes/helper/HelperList.php"], "buggy_code_start_loc": [960, 312], "buggy_code_end_loc": [984, 1024], "fixing_code_start_loc": [959, 312], "fixing_code_end_loc": [980, 1062], "type": "CWE-79", "message": "Thirty Bees Core v1.4.0 was discovered to contain a reflected cross-site scripting (XSS) vulnerability via the backup_pagination parameter at /controller/AdminController.php. This vulnerability allows attackers to execute arbitrary JavaScript in the web browser of a user via a crafted payload.", "other": {"cve": {"id": "CVE-2023-45958", "sourceIdentifier": "cve@mitre.org", "published": "2023-10-18T22:15:09.573", "lastModified": "2023-10-25T15:02:45.697", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Thirty Bees Core v1.4.0 was discovered to contain a reflected cross-site scripting (XSS) vulnerability via the backup_pagination parameter at /controller/AdminController.php. This vulnerability allows attackers to execute arbitrary JavaScript in the web browser of a user via a crafted payload."}, {"lang": "es", "value": "Se descubri\u00f3 que Thirty Bees Core v1.4.0 contiene una vulnerabilidad de Cross-Site Scripting (XSS) reflejada a trav\u00e9s del par\u00e1metro backup_pagination en /controller/AdminController.php. Esta vulnerabilidad permite a los atacantes ejecutar JavaScript arbitrario en el navegador web de un usuario mediante un payload manipulado."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thirtybees:thirty_bees:1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "81B78C2D-BAB7-4573-B8E0-2B7D3BC1963D"}]}]}], "references": [{"url": "https://github.com/thirtybees/thirtybees/commit/2c99464376ad7b3c95f220163a2411e35274c3ba", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://zigrin.com/advisories/thirty-bees-reflected-cross-site-scripting-xss/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thirtybees/thirtybees/commit/2c99464376ad7b3c95f220163a2411e35274c3ba"}}