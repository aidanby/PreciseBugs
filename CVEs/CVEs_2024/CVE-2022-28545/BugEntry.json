{"buggy_code": ["<?php\n/**\n* copyright            : (C) 2001-2013 Advanced Internet Designs Inc.\n* email                : forum@prohost.org\n* $Id$\n*\n* This program is free software; you can redistribute it and/or modify it\n* under the terms of the GNU General Public License as published by the\n* Free Software Foundation; version 2 of the License.\n**/\n\nfunction safe_attachment_copy($source, $id, $ext)\n{\n\t$loc = $GLOBALS['FILE_STORE'] . $id .'.atch';\n\tif (!$ext && !move_uploaded_file($source, $loc)) {\n\t\terror_dialog('Unable to move uploaded file', 'From: '. $source .' To: '. $loc, 'LOG&RETURN');\n\t} else if ($ext && !copy($source, $loc)) {\n\t\terror_dialog('Unable to handle file attachment', 'From: '. $source .' To: '. $loc, 'LOG&RETURN');\n\t}\n\t@unlink($source);\n\n\t@chmod($loc, ($GLOBALS['FUD_OPT_2'] & 8388608 ? 0600 : 0644));\n\n\treturn $loc;\n}\n\nfunction attach_add($at, $owner, $attach_opt=0, $ext=0)\n{\n\t$id = db_qid('INSERT INTO {SQL_TABLE_PREFIX}attach (location, message_id, original_name, owner, attach_opt, mime_type,fsize) '.\n\t\tq_limit('SELECT null AS location, 0 AS message_id, '. _esc($at['name']) .' AS original_name, '. $owner .' AS owner, '. $attach_opt .' AS attach_opt, id AS mime_type, '. $at['size'] .' AS fsize \n\t\t\tFROM {SQL_TABLE_PREFIX}mime WHERE fl_ext IN(\\'*\\', '. _esc(strtolower(substr(strrchr($at['name'], '.'), 1))) .')\n\t\t\tORDER BY fl_ext DESC'\n\t\t, 1)\n\t);\n\n\tsafe_attachment_copy($at['tmp_name'], $id, $ext);\n\n\treturn $id;\n}\n\nfunction attach_finalize($attach_list, $mid, $attach_opt=0)\n{\n\t$id_list = '';\n\t$attach_count = 0;\n\n\t$tbl = !$attach_opt ? 'msg' : 'pmsg';\n\n\tforeach ($attach_list as $key => $val) {\n\t\tif (!$val) {\n\t\t\t@unlink($GLOBALS['FILE_STORE'] . (int)$key .'.atch');\n\t\t} else {\n\t\t\t$attach_count++;\n\t\t\t$id_list .= (int)$key .',';\n\t\t}\n\t}\n\n\tif ($id_list) {\n\t\t$id_list = substr($id_list, 0, -1);\n\t\t$cc = q_concat(_esc($GLOBALS['FILE_STORE']), 'id', _esc('.atch'));\n\t\tq('UPDATE {SQL_TABLE_PREFIX}attach SET location='. $cc .', message_id='. $mid .' WHERE id IN('. $id_list .') AND attach_opt='. $attach_opt);\n\t\t$id_list = ' AND id NOT IN('. $id_list .')';\n\t} else {\n\t\t$id_list = '';\n\t}\n\n\t/* Delete any unneeded (removed, temporary) attachments. */\n\tq('DELETE FROM {SQL_TABLE_PREFIX}attach WHERE message_id='. $mid .' '. $id_list);\n\n\tif (!$attach_opt && ($atl = attach_rebuild_cache($mid))) {\n\t\tq('UPDATE {SQL_TABLE_PREFIX}msg SET attach_cnt='. $attach_count .', attach_cache='. _esc(serialize($atl)) .' WHERE id='. $mid);\n\t}\n\n\tif (!empty($GLOBALS['usr']->sid)) {\n\t\tses_putvar((int)$GLOBALS['usr']->sid, null);\n\t}\n}\n\nfunction attach_rebuild_cache($id)\n{\n\t$ret = array();\n\t$c = uq('SELECT a.id, a.original_name, a.fsize, a.dlcount, COALESCE(m.icon, \\'unknown.gif\\') FROM {SQL_TABLE_PREFIX}attach a LEFT JOIN {SQL_TABLE_PREFIX}mime m ON a.mime_type=m.id WHERE message_id='. $id .' AND attach_opt=0');\n\twhile ($r = db_rowarr($c)) {\n\t\t$ret[] = $r;\n\t}\n\tunset($c);\n\treturn $ret;\n}\n\n/* Increment download counter for an attachment. */\nfunction attach_inc_dl_count($id, $mid)\n{\n\tq('UPDATE {SQL_TABLE_PREFIX}attach SET dlcount=dlcount+1 WHERE id='. $id);\n\tif (($a = attach_rebuild_cache($mid))) {\n\t\tq('UPDATE {SQL_TABLE_PREFIX}msg SET attach_cache='. _esc(serialize($a)) .' WHERE id='. $mid);\n\t}\n}\n?>\n"], "fixing_code": ["<?php\n/**\n* copyright            : (C) 2001-2022 Advanced Internet Designs Inc.\n* email                : forum@prohost.org\n* $Id$\n*\n* This program is free software; you can redistribute it and/or modify it\n* under the terms of the GNU General Public License as published by the\n* Free Software Foundation; version 2 of the License.\n**/\n\nfunction safe_attachment_copy($source, $id, $ext)\n{\n\t$loc = $GLOBALS['FILE_STORE'] . $id .'.atch';\n\tif (!$ext && !move_uploaded_file($source, $loc)) {\n\t\terror_dialog('Unable to move uploaded file', 'From: '. $source .' To: '. $loc, 'LOG&RETURN');\n\t} else if ($ext && !copy($source, $loc)) {\n\t\terror_dialog('Unable to handle file attachment', 'From: '. $source .' To: '. $loc, 'LOG&RETURN');\n\t}\n\t@unlink($source);\n\n\t@chmod($loc, ($GLOBALS['FUD_OPT_2'] & 8388608 ? 0600 : 0644));\n\n\treturn $loc;\n}\n\nfunction attach_add($at, $owner, $attach_opt=0, $ext=0)\n{\n\t$id = db_qid('INSERT INTO {SQL_TABLE_PREFIX}attach (location, message_id, original_name, owner, attach_opt, mime_type, fsize) '.\n\t\tq_limit('SELECT null AS location, 0 AS message_id, '. _esc(htmlspecialchars($at['name'])) .' AS original_name, '. $owner .' AS owner, '. $attach_opt .' AS attach_opt, id AS mime_type, '. $at['size'] .' AS fsize \n\t\t\tFROM {SQL_TABLE_PREFIX}mime WHERE fl_ext IN(\\'*\\', '. _esc(strtolower(substr(strrchr($at['name'], '.'), 1))) .')\n\t\t\tORDER BY fl_ext DESC'\n\t\t, 1)\n\t);\n\n\tsafe_attachment_copy($at['tmp_name'], $id, $ext);\n\n\treturn $id;\n}\n\nfunction attach_finalize($attach_list, $mid, $attach_opt=0)\n{\n\t$id_list = '';\n\t$attach_count = 0;\n\n\t$tbl = !$attach_opt ? 'msg' : 'pmsg';\n\n\tforeach ($attach_list as $key => $val) {\n\t\tif (!$val) {\n\t\t\t@unlink($GLOBALS['FILE_STORE'] . (int)$key .'.atch');\n\t\t} else {\n\t\t\t$attach_count++;\n\t\t\t$id_list .= (int)$key .',';\n\t\t}\n\t}\n\n\tif ($id_list) {\n\t\t$id_list = substr($id_list, 0, -1);\n\t\t$cc = q_concat(_esc($GLOBALS['FILE_STORE']), 'id', _esc('.atch'));\n\t\tq('UPDATE {SQL_TABLE_PREFIX}attach SET location='. $cc .', message_id='. $mid .' WHERE id IN('. $id_list .') AND attach_opt='. $attach_opt);\n\t\t$id_list = ' AND id NOT IN('. $id_list .')';\n\t} else {\n\t\t$id_list = '';\n\t}\n\n\t/* Delete any unneeded (removed, temporary) attachments. */\n\tq('DELETE FROM {SQL_TABLE_PREFIX}attach WHERE message_id='. $mid .' '. $id_list);\n\n\tif (!$attach_opt && ($atl = attach_rebuild_cache($mid))) {\n\t\tq('UPDATE {SQL_TABLE_PREFIX}msg SET attach_cnt='. $attach_count .', attach_cache='. _esc(serialize($atl)) .' WHERE id='. $mid);\n\t}\n\n\tif (!empty($GLOBALS['usr']->sid)) {\n\t\tses_putvar((int)$GLOBALS['usr']->sid, null);\n\t}\n}\n\nfunction attach_rebuild_cache($id)\n{\n\t$ret = array();\n\t$c = uq('SELECT a.id, a.original_name, a.fsize, a.dlcount, COALESCE(m.icon, \\'unknown.gif\\') FROM {SQL_TABLE_PREFIX}attach a LEFT JOIN {SQL_TABLE_PREFIX}mime m ON a.mime_type=m.id WHERE message_id='. $id .' AND attach_opt=0');\n\twhile ($r = db_rowarr($c)) {\n\t\t$ret[] = $r;\n\t}\n\tunset($c);\n\treturn $ret;\n}\n\n/* Increment download counter for an attachment. */\nfunction attach_inc_dl_count($id, $mid)\n{\n\tq('UPDATE {SQL_TABLE_PREFIX}attach SET dlcount=dlcount+1 WHERE id='. $id);\n\tif (($a = attach_rebuild_cache($mid))) {\n\t\tq('UPDATE {SQL_TABLE_PREFIX}msg SET attach_cache='. _esc(serialize($a)) .' WHERE id='. $mid);\n\t}\n}\n?>\n"], "filenames": ["install/forum_data/src/attach.inc.t"], "buggy_code_start_loc": [3], "buggy_code_end_loc": [31], "fixing_code_start_loc": [3], "fixing_code_end_loc": [31], "type": "CWE-79", "message": "FUDforum 3.1.1 is vulnerable to Stored XSS.", "other": {"cve": {"id": "CVE-2022-28545", "sourceIdentifier": "cve@mitre.org", "published": "2022-05-06T17:15:09.107", "lastModified": "2022-05-16T15:45:58.603", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "FUDforum 3.1.1 is vulnerable to Stored XSS."}, {"lang": "es", "value": "FUDforum versi\u00f3n 3.1.1, es vulnerable a un ataque de tipo XSS Almacenado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fudforum:fudforum:3.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "7FB5EB78-E470-455D-933E-118BB6986F9D"}]}]}], "references": [{"url": "https://github.com/fudforum/FUDforum/commit/8ff446881932a45ce538b84a76f833d44eada93b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/fudforum/FUDforum/commit/aed69661b6f876c916abec9ca4fcf5035b8e2390", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fudforum/FUDforum/commit/8ff446881932a45ce538b84a76f833d44eada93b"}}