{"buggy_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/array_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <limits>\n\n#include <vector>\n#include \"tensorflow/core/common_runtime/device.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/lib/gtl/edit_distance.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/util/sparse/sparse_tensor.h\"\n\nnamespace tensorflow {\n\nnamespace {\n\nStatus ValidateShapes(OpKernelContext* ctx, const Tensor& hypothesis_indices,\n                      const Tensor& hypothesis_values,\n                      const Tensor& hypothesis_shape,\n                      const Tensor& truth_indices, const Tensor& truth_values,\n                      const Tensor& truth_shape) {\n  if (!TensorShapeUtils::IsMatrix(hypothesis_indices.shape()))\n    return errors::InvalidArgument(\n        \"hypothesis_indices should be a matrix, but got shape: \",\n        hypothesis_indices.shape().DebugString());\n  if (!TensorShapeUtils::IsMatrix(truth_indices.shape()))\n    return errors::InvalidArgument(\n        \"truth_indices should be a matrix, but got shape: \",\n        truth_indices.shape().DebugString());\n  if (!TensorShapeUtils::IsVector(hypothesis_values.shape()))\n    return errors::InvalidArgument(\n        \"hypothesis_values should be a vector, but got shape: \",\n        hypothesis_values.shape().DebugString());\n  if (!TensorShapeUtils::IsVector(truth_values.shape()))\n    return errors::InvalidArgument(\n        \"truth_values should be a vector, but got shape: \",\n        truth_values.shape().DebugString());\n  if (!TensorShapeUtils::IsVector(hypothesis_shape.shape()))\n    return errors::InvalidArgument(\n        \"hypothesis_shape should be a vector, but got shape: \",\n        hypothesis_shape.shape().DebugString());\n  if (!TensorShapeUtils::IsVector(truth_shape.shape()))\n    return errors::InvalidArgument(\n        \"truth_shape should be a vector, but got shape: \",\n        truth_shape.shape().DebugString());\n  if (hypothesis_values.NumElements() != hypothesis_indices.dim_size(0))\n    return errors::InvalidArgument(\n        \"Expected hypothesis_values.NumElements == \"\n        \"#rows(hypothesis_indices), their shapes are: \",\n        hypothesis_values.shape().DebugString(), \" and \",\n        hypothesis_indices.shape().DebugString());\n  if (hypothesis_shape.NumElements() != hypothesis_indices.dim_size(1))\n    return errors::InvalidArgument(\n        \"Expected hypothesis_shape.NumElements == \"\n        \"#cols(hypothesis_indices), their shapes are: \",\n        hypothesis_shape.shape().DebugString(), \" and \",\n        hypothesis_indices.shape().DebugString());\n  if (truth_shape.NumElements() < 2)\n    return errors::InvalidArgument(\n        \"Input SparseTensors must have rank at least 2, but truth_shape \"\n        \"rank is: \",\n        truth_shape.NumElements());\n  if (truth_values.NumElements() != truth_indices.dim_size(0))\n    return errors::InvalidArgument(\n        \"Expected truth_values.NumElements == \"\n        \"#rows(truth_indices), their shapes are: \",\n        truth_values.shape().DebugString(), \" and \",\n        truth_indices.shape().DebugString());\n  if (truth_shape.NumElements() != truth_indices.dim_size(1))\n    return errors::InvalidArgument(\n        \"Expected truth_shape.NumElements == \"\n        \"#cols(truth_indices), their shapes are: \",\n        truth_shape.shape().DebugString(), \" and \",\n        truth_indices.shape().DebugString());\n  if (truth_shape.NumElements() != hypothesis_shape.NumElements())\n    return errors::InvalidArgument(\n        \"Expected truth and hypothesis to have matching ranks, but \"\n        \"their shapes are: \",\n        truth_shape.shape().DebugString(), \" and \",\n        hypothesis_shape.shape().DebugString());\n\n  return Status::OK();\n}\n\n}  // namespace\n\ntemplate <typename T>\nclass EditDistanceOp : public OpKernel {\n public:\n  explicit EditDistanceOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"normalize\", &normalize_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor* hypothesis_indices;\n    const Tensor* hypothesis_values;\n    const Tensor* hypothesis_shape;\n    const Tensor* truth_indices;\n    const Tensor* truth_values;\n    const Tensor* truth_shape;\n    OP_REQUIRES_OK(ctx, ctx->input(\"hypothesis_indices\", &hypothesis_indices));\n    OP_REQUIRES_OK(ctx, ctx->input(\"hypothesis_values\", &hypothesis_values));\n    OP_REQUIRES_OK(ctx, ctx->input(\"hypothesis_shape\", &hypothesis_shape));\n    OP_REQUIRES_OK(ctx, ctx->input(\"truth_indices\", &truth_indices));\n    OP_REQUIRES_OK(ctx, ctx->input(\"truth_values\", &truth_values));\n    OP_REQUIRES_OK(ctx, ctx->input(\"truth_shape\", &truth_shape));\n\n    OP_REQUIRES_OK(\n        ctx, ValidateShapes(ctx, *hypothesis_indices, *hypothesis_values,\n                            *hypothesis_shape, *truth_indices, *truth_values,\n                            *truth_shape));\n\n    TensorShape hypothesis_st_shape;\n    OP_REQUIRES_OK(ctx,\n                   TensorShapeUtils::MakeShape(\n                       hypothesis_shape->vec<int64_t>().data(),\n                       hypothesis_shape->NumElements(), &hypothesis_st_shape));\n    TensorShape truth_st_shape;\n    OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(\n                            truth_shape->vec<int64_t>().data(),\n                            truth_shape->NumElements(), &truth_st_shape));\n\n    // Assume indices are sorted in row-major order.\n    std::vector<int64_t> sorted_order(truth_st_shape.dims());\n    std::iota(sorted_order.begin(), sorted_order.end(), 0);\n\n    sparse::SparseTensor hypothesis;\n    OP_REQUIRES_OK(ctx, sparse::SparseTensor::Create(\n                            *hypothesis_indices, *hypothesis_values,\n                            hypothesis_st_shape, sorted_order, &hypothesis));\n\n    sparse::SparseTensor truth;\n    OP_REQUIRES_OK(ctx, sparse::SparseTensor::Create(\n                            *truth_indices, *truth_values, truth_st_shape,\n                            sorted_order, &truth));\n\n    // Group dims 0, 1, ..., RANK - 1.  The very last dim is assumed\n    // to store the variable length sequences.\n    std::vector<int64_t> group_dims(truth_st_shape.dims() - 1);\n    std::iota(group_dims.begin(), group_dims.end(), 0);\n\n    TensorShape output_shape;\n    for (int d = 0; d < static_cast<int>(group_dims.size()); ++d) {\n      output_shape.AddDim(std::max(hypothesis_st_shape.dim_size(d),\n                                   truth_st_shape.dim_size(d)));\n    }\n    const auto output_elements = output_shape.num_elements();\n    OP_REQUIRES(\n        ctx, output_elements > 0,\n        errors::InvalidArgument(\"Got output shape \", output_shape.DebugString(),\n                                \" which has 0 elements\"));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(\"output\", output_shape, &output));\n    auto output_t = output->flat<float>();\n    output_t.setZero();\n\n    std::vector<int64_t> output_strides(output_shape.dims());\n    output_strides[output_shape.dims() - 1] = 1;\n    for (int d = output_shape.dims() - 2; d >= 0; --d) {\n      output_strides[d] = output_strides[d + 1] * output_shape.dim_size(d + 1);\n    }\n\n    auto hypothesis_grouper = hypothesis.group(group_dims);\n    auto truth_grouper = truth.group(group_dims);\n\n    auto hypothesis_iter = hypothesis_grouper.begin();\n    auto truth_iter = truth_grouper.begin();\n\n    auto cmp = std::equal_to<T>();\n\n    while (hypothesis_iter != hypothesis_grouper.end() &&\n           truth_iter != truth_grouper.end()) {\n      sparse::Group truth_i = *truth_iter;\n      sparse::Group hypothesis_j = *hypothesis_iter;\n      std::vector<int64_t> g_truth = truth_i.group();\n      std::vector<int64_t> g_hypothesis = hypothesis_j.group();\n      auto truth_seq = truth_i.values<T>();\n      auto hypothesis_seq = hypothesis_j.values<T>();\n\n      if (g_truth == g_hypothesis) {\n        auto loc = std::inner_product(g_truth.begin(), g_truth.end(),\n                                      output_strides.begin(), int64_t{0});\n        OP_REQUIRES(\n            ctx, loc < output_elements,\n            errors::Internal(\"Got an inner product \", loc,\n                             \" which would require in writing to outside of \"\n                             \"the buffer for the output tensor (max elements \",\n                             output_elements, \")\"));\n        output_t(loc) =\n            gtl::LevenshteinDistance<T>(truth_seq, hypothesis_seq, cmp);\n        if (normalize_) output_t(loc) /= truth_seq.size();\n\n        ++hypothesis_iter;\n        ++truth_iter;\n      } else if (g_truth > g_hypothesis) {  // zero-length truth\n        auto loc = std::inner_product(g_hypothesis.begin(), g_hypothesis.end(),\n                                      output_strides.begin(), int64_t{0});\n        OP_REQUIRES(\n            ctx, loc < output_elements,\n            errors::Internal(\"Got an inner product \", loc,\n                             \" which would require in writing to outside of \"\n                             \"the buffer for the output tensor (max elements \",\n                             output_elements, \")\"));\n        output_t(loc) = hypothesis_seq.size();\n        if (normalize_ && output_t(loc) != 0.0f) {\n          output_t(loc) = std::numeric_limits<float>::infinity();\n        }\n        ++hypothesis_iter;\n      } else {  // zero-length hypothesis\n        auto loc = std::inner_product(g_truth.begin(), g_truth.end(),\n                                      output_strides.begin(), int64_t{0});\n        OP_REQUIRES(\n            ctx, loc < output_elements,\n            errors::Internal(\"Got an inner product \", loc,\n                             \" which would require in writing to outside of \"\n                             \"the buffer for the output tensor (max elements \",\n                             output_elements, \")\"));\n        output_t(loc) = (normalize_) ? 1.0 : truth_seq.size();\n        ++truth_iter;\n      }\n    }\n    while (hypothesis_iter != hypothesis_grouper.end()) {  // zero-length truths\n      sparse::Group hypothesis_j = *hypothesis_iter;\n      std::vector<int64_t> g_hypothesis = hypothesis_j.group();\n      auto hypothesis_seq = hypothesis_j.values<T>();\n      auto loc = std::inner_product(g_hypothesis.begin(), g_hypothesis.end(),\n                                    output_strides.begin(), int64_t{0});\n      OP_REQUIRES(\n          ctx, loc < output_elements,\n          errors::Internal(\"Got an inner product \", loc,\n                           \" which would require in writing to outside of the \"\n                           \"buffer for the output tensor (max elements \",\n                           output_elements, \")\"));\n      output_t(loc) = hypothesis_seq.size();\n      if (normalize_ && output_t(loc) != 0.0f) {\n        output_t(loc) = std::numeric_limits<float>::infinity();\n      }\n      ++hypothesis_iter;\n    }\n    while (truth_iter != truth_grouper.end()) {  // missing hypotheses\n      sparse::Group truth_i = *truth_iter;\n      std::vector<int64_t> g_truth = truth_i.group();\n      auto truth_seq = truth_i.values<T>();\n      auto loc = std::inner_product(g_truth.begin(), g_truth.end(),\n                                    output_strides.begin(), int64_t{0});\n      OP_REQUIRES(\n          ctx, loc < output_elements,\n          errors::Internal(\"Got an inner product \", loc,\n                           \" which would require in writing to outside of the \"\n                           \"buffer for the output tensor (max elements \",\n                           output_elements, \")\"));\n      output_t(loc) = (normalize_) ? 1.0 : truth_seq.size();\n      ++truth_iter;\n    }\n  }\n\n private:\n  bool normalize_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(EditDistanceOp);\n};\n\n#define REGISTER_CPU_KERNEL(T)                                        \\\n  REGISTER_KERNEL_BUILDER(                                            \\\n      Name(\"EditDistance\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      EditDistanceOp<T>);\n\nTF_CALL_POD_STRING_TYPES(REGISTER_CPU_KERNEL);\n\n#undef REGISTER_CPU_KERNEL\n\n}  // end namespace tensorflow\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tensorflow.kernels.edit_distance_op.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import sparse_tensor\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.platform import test\n\n\ndef ConstantOf(x):\n  x = np.asarray(x)\n  # Convert to int64 if it's not a string or unicode\n  if x.dtype.char not in \"SU\":\n    x = np.asarray(x, dtype=np.int64)\n  return constant_op.constant(x)\n\n\nclass EditDistanceTest(test.TestCase):\n\n  def _testEditDistanceST(self,\n                          hypothesis_st,\n                          truth_st,\n                          normalize,\n                          expected_output,\n                          expected_shape,\n                          expected_err_re=None):\n    edit_distance = array_ops.edit_distance(\n        hypothesis=hypothesis_st, truth=truth_st, normalize=normalize)\n\n    if expected_err_re is None:\n      self.assertEqual(edit_distance.get_shape(), expected_shape)\n      output = self.evaluate(edit_distance)\n      self.assertAllClose(output, expected_output)\n    else:\n      with self.assertRaisesOpError(expected_err_re):\n        self.evaluate(edit_distance)\n\n  def _testEditDistance(self,\n                        hypothesis,\n                        truth,\n                        normalize,\n                        expected_output,\n                        expected_err_re=None):\n    # Shape inference figures out the shape from the shape variables\n    # Explicit tuple() needed since zip returns an iterator in Python 3.\n    expected_shape = [\n        max(h, t) for h, t in tuple(zip(hypothesis[2], truth[2]))[:-1]\n    ]\n\n    # SparseTensorValue inputs.\n    with ops.Graph().as_default() as g, self.session(g):\n      # hypothesis and truth are (index, value, shape) tuples\n      self._testEditDistanceST(\n          hypothesis_st=sparse_tensor.SparseTensorValue(\n              *[ConstantOf(x) for x in hypothesis]),\n          truth_st=sparse_tensor.SparseTensorValue(\n              *[ConstantOf(x) for x in truth]),\n          normalize=normalize,\n          expected_output=expected_output,\n          expected_shape=expected_shape,\n          expected_err_re=expected_err_re)\n\n    # SparseTensor inputs.\n    with ops.Graph().as_default() as g, self.session(g):\n      # hypothesis and truth are (index, value, shape) tuples\n      self._testEditDistanceST(\n          hypothesis_st=sparse_tensor.SparseTensor(\n              *[ConstantOf(x) for x in hypothesis]),\n          truth_st=sparse_tensor.SparseTensor(*[ConstantOf(x) for x in truth]),\n          normalize=normalize,\n          expected_output=expected_output,\n          expected_shape=expected_shape,\n          expected_err_re=expected_err_re)\n\n  def testEditDistanceNormalized(self):\n    hypothesis_indices = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    hypothesis_values = [0, 1, 1, -1]\n    hypothesis_shape = [2, 2]\n    truth_indices = [[0, 0], [1, 0], [1, 1]]\n    truth_values = [0, 1, 1]\n    truth_shape = [2, 2]\n    expected_output = [1.0, 0.5]\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_output)\n\n  def testEditDistanceUnnormalized(self):\n    hypothesis_indices = [[0, 0], [1, 0], [1, 1]]\n    hypothesis_values = [10, 10, 11]\n    hypothesis_shape = [2, 2]\n    truth_indices = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    truth_values = [1, 2, 1, -1]\n    truth_shape = [2, 3]\n    expected_output = [2.0, 2.0]\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=False,\n        expected_output=expected_output)\n\n  def testEditDistanceProperDistance(self):\n    # In this case, the values are individual characters stored in the\n    # SparseTensor (type DT_STRING)\n    hypothesis_indices = ([[0, i] for i, _ in enumerate(\"algorithm\")] +\n                          [[1, i] for i, _ in enumerate(\"altruistic\")])\n    hypothesis_values = [x for x in \"algorithm\"] + [x for x in \"altruistic\"]\n    hypothesis_shape = [2, 11]\n    truth_indices = ([[0, i] for i, _ in enumerate(\"altruistic\")] +\n                     [[1, i] for i, _ in enumerate(\"algorithm\")])\n    truth_values = [x for x in \"altruistic\"] + [x for x in \"algorithm\"]\n    truth_shape = [2, 11]\n    expected_unnormalized = [6.0, 6.0]\n    expected_normalized = [6.0 / len(\"altruistic\"), 6.0 / len(\"algorithm\")]\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=False,\n        expected_output=expected_unnormalized)\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_normalized)\n\n  def testEditDistance3D(self):\n    hypothesis_indices = [[0, 0, 0], [1, 0, 0]]\n    hypothesis_values = [0, 1]\n    hypothesis_shape = [2, 1, 1]\n    truth_indices = [[0, 1, 0], [1, 0, 0], [1, 1, 0]]\n    truth_values = [0, 1, 1]\n    truth_shape = [2, 2, 1]\n    expected_output = [\n        [np.inf, 1.0],  # (0,0): no truth, (0,1): no hypothesis\n        [0.0, 1.0]\n    ]  # (1,0): match,    (1,1): no hypothesis\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_output)\n\n  def testEditDistanceZeroLengthHypothesis(self):\n    hypothesis_indices = np.empty((0, 2), dtype=np.int64)\n    hypothesis_values = []\n    hypothesis_shape = [1, 0]\n    truth_indices = [[0, 0]]\n    truth_values = [0]\n    truth_shape = [1, 1]\n    expected_output = [1.0]\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_output)\n\n  def testEditDistanceZeroLengthTruth(self):\n    hypothesis_indices = [[0, 0]]\n    hypothesis_values = [0]\n    hypothesis_shape = [1, 1]\n    truth_indices = np.empty((0, 2), dtype=np.int64)\n    truth_values = []\n    truth_shape = [1, 0]\n    expected_output = [np.inf]  # Normalized, loss is 1/0 = inf\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_output)\n\n  def testEditDistanceZeroLengthHypothesisAndTruth(self):\n    hypothesis_indices = np.empty((0, 2), dtype=np.int64)\n    hypothesis_values = []\n    hypothesis_shape = [1, 0]\n    truth_indices = np.empty((0, 2), dtype=np.int64)\n    truth_values = []\n    truth_shape = [1, 0]\n    expected_output = [0]  # Normalized is 0 because of exact match\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_output)\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "fixing_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/array_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <limits>\n\n#include <vector>\n#include \"tensorflow/core/common_runtime/device.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/lib/gtl/edit_distance.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/util/sparse/sparse_tensor.h\"\n\nnamespace tensorflow {\n\nnamespace {\n\nStatus ValidateShapes(OpKernelContext* ctx, const Tensor& hypothesis_indices,\n                      const Tensor& hypothesis_values,\n                      const Tensor& hypothesis_shape,\n                      const Tensor& truth_indices, const Tensor& truth_values,\n                      const Tensor& truth_shape) {\n  if (!TensorShapeUtils::IsMatrix(hypothesis_indices.shape()))\n    return errors::InvalidArgument(\n        \"hypothesis_indices should be a matrix, but got shape: \",\n        hypothesis_indices.shape().DebugString());\n  if (!TensorShapeUtils::IsMatrix(truth_indices.shape()))\n    return errors::InvalidArgument(\n        \"truth_indices should be a matrix, but got shape: \",\n        truth_indices.shape().DebugString());\n  if (!TensorShapeUtils::IsVector(hypothesis_values.shape()))\n    return errors::InvalidArgument(\n        \"hypothesis_values should be a vector, but got shape: \",\n        hypothesis_values.shape().DebugString());\n  if (!TensorShapeUtils::IsVector(truth_values.shape()))\n    return errors::InvalidArgument(\n        \"truth_values should be a vector, but got shape: \",\n        truth_values.shape().DebugString());\n  if (!TensorShapeUtils::IsVector(hypothesis_shape.shape()))\n    return errors::InvalidArgument(\n        \"hypothesis_shape should be a vector, but got shape: \",\n        hypothesis_shape.shape().DebugString());\n  if (!TensorShapeUtils::IsVector(truth_shape.shape()))\n    return errors::InvalidArgument(\n        \"truth_shape should be a vector, but got shape: \",\n        truth_shape.shape().DebugString());\n  if (hypothesis_values.NumElements() != hypothesis_indices.dim_size(0))\n    return errors::InvalidArgument(\n        \"Expected hypothesis_values.NumElements == \"\n        \"#rows(hypothesis_indices), their shapes are: \",\n        hypothesis_values.shape().DebugString(), \" and \",\n        hypothesis_indices.shape().DebugString());\n  if (hypothesis_shape.NumElements() != hypothesis_indices.dim_size(1))\n    return errors::InvalidArgument(\n        \"Expected hypothesis_shape.NumElements == \"\n        \"#cols(hypothesis_indices), their shapes are: \",\n        hypothesis_shape.shape().DebugString(), \" and \",\n        hypothesis_indices.shape().DebugString());\n  if (truth_shape.NumElements() < 2)\n    return errors::InvalidArgument(\n        \"Input SparseTensors must have rank at least 2, but truth_shape \"\n        \"rank is: \",\n        truth_shape.NumElements());\n  if (truth_values.NumElements() != truth_indices.dim_size(0))\n    return errors::InvalidArgument(\n        \"Expected truth_values.NumElements == \"\n        \"#rows(truth_indices), their shapes are: \",\n        truth_values.shape().DebugString(), \" and \",\n        truth_indices.shape().DebugString());\n  if (truth_shape.NumElements() != truth_indices.dim_size(1))\n    return errors::InvalidArgument(\n        \"Expected truth_shape.NumElements == \"\n        \"#cols(truth_indices), their shapes are: \",\n        truth_shape.shape().DebugString(), \" and \",\n        truth_indices.shape().DebugString());\n  if (truth_shape.NumElements() != hypothesis_shape.NumElements())\n    return errors::InvalidArgument(\n        \"Expected truth and hypothesis to have matching ranks, but \"\n        \"their shapes are: \",\n        truth_shape.shape().DebugString(), \" and \",\n        hypothesis_shape.shape().DebugString());\n\n  return Status::OK();\n}\n\n}  // namespace\n\ntemplate <typename T>\nclass EditDistanceOp : public OpKernel {\n public:\n  explicit EditDistanceOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"normalize\", &normalize_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor* hypothesis_indices;\n    const Tensor* hypothesis_values;\n    const Tensor* hypothesis_shape;\n    const Tensor* truth_indices;\n    const Tensor* truth_values;\n    const Tensor* truth_shape;\n    OP_REQUIRES_OK(ctx, ctx->input(\"hypothesis_indices\", &hypothesis_indices));\n    OP_REQUIRES_OK(ctx, ctx->input(\"hypothesis_values\", &hypothesis_values));\n    OP_REQUIRES_OK(ctx, ctx->input(\"hypothesis_shape\", &hypothesis_shape));\n    OP_REQUIRES_OK(ctx, ctx->input(\"truth_indices\", &truth_indices));\n    OP_REQUIRES_OK(ctx, ctx->input(\"truth_values\", &truth_values));\n    OP_REQUIRES_OK(ctx, ctx->input(\"truth_shape\", &truth_shape));\n\n    OP_REQUIRES_OK(\n        ctx, ValidateShapes(ctx, *hypothesis_indices, *hypothesis_values,\n                            *hypothesis_shape, *truth_indices, *truth_values,\n                            *truth_shape));\n\n    TensorShape hypothesis_st_shape;\n    OP_REQUIRES_OK(ctx,\n                   TensorShapeUtils::MakeShape(\n                       hypothesis_shape->vec<int64_t>().data(),\n                       hypothesis_shape->NumElements(), &hypothesis_st_shape));\n    TensorShape truth_st_shape;\n    OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(\n                            truth_shape->vec<int64_t>().data(),\n                            truth_shape->NumElements(), &truth_st_shape));\n\n    // Assume indices are sorted in row-major order.\n    std::vector<int64_t> sorted_order(truth_st_shape.dims());\n    std::iota(sorted_order.begin(), sorted_order.end(), 0);\n\n    sparse::SparseTensor hypothesis;\n    OP_REQUIRES_OK(ctx, sparse::SparseTensor::Create(\n                            *hypothesis_indices, *hypothesis_values,\n                            hypothesis_st_shape, sorted_order, &hypothesis));\n\n    sparse::SparseTensor truth;\n    OP_REQUIRES_OK(ctx, sparse::SparseTensor::Create(\n                            *truth_indices, *truth_values, truth_st_shape,\n                            sorted_order, &truth));\n\n    // Group dims 0, 1, ..., RANK - 1.  The very last dim is assumed\n    // to store the variable length sequences.\n    std::vector<int64_t> group_dims(truth_st_shape.dims() - 1);\n    std::iota(group_dims.begin(), group_dims.end(), 0);\n\n    TensorShape output_shape;\n    for (int d = 0; d < static_cast<int>(group_dims.size()); ++d) {\n      output_shape.AddDim(std::max(hypothesis_st_shape.dim_size(d),\n                                   truth_st_shape.dim_size(d)));\n    }\n    const auto output_elements = output_shape.num_elements();\n    OP_REQUIRES(\n        ctx, output_elements > 0,\n        errors::InvalidArgument(\"Got output shape \", output_shape.DebugString(),\n                                \" which has 0 elements\"));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(\"output\", output_shape, &output));\n    auto output_t = output->flat<float>();\n    output_t.setZero();\n\n    std::vector<int64_t> output_strides(output_shape.dims());\n    output_strides[output_shape.dims() - 1] = 1;\n    for (int d = output_shape.dims() - 2; d >= 0; --d) {\n      output_strides[d] = output_strides[d + 1] * output_shape.dim_size(d + 1);\n    }\n\n    auto hypothesis_grouper = hypothesis.group(group_dims);\n    auto truth_grouper = truth.group(group_dims);\n\n    auto hypothesis_iter = hypothesis_grouper.begin();\n    auto truth_iter = truth_grouper.begin();\n\n    auto cmp = std::equal_to<T>();\n\n    while (hypothesis_iter != hypothesis_grouper.end() &&\n           truth_iter != truth_grouper.end()) {\n      sparse::Group truth_i = *truth_iter;\n      sparse::Group hypothesis_j = *hypothesis_iter;\n      std::vector<int64_t> g_truth = truth_i.group();\n      std::vector<int64_t> g_hypothesis = hypothesis_j.group();\n      auto truth_seq = truth_i.values<T>();\n      auto hypothesis_seq = hypothesis_j.values<T>();\n\n      if (g_truth == g_hypothesis) {\n        auto loc = std::inner_product(g_truth.begin(), g_truth.end(),\n                                      output_strides.begin(), int64_t{0});\n        OP_REQUIRES(\n            ctx, 0 <= loc && loc < output_elements,\n            errors::Internal(\"Got an inner product \", loc,\n                             \" which would require writing to outside of \"\n                             \"the buffer for the output tensor (max elements \",\n                             output_elements, \")\"));\n        output_t(loc) =\n            gtl::LevenshteinDistance<T>(truth_seq, hypothesis_seq, cmp);\n        if (normalize_) output_t(loc) /= truth_seq.size();\n\n        ++hypothesis_iter;\n        ++truth_iter;\n      } else if (g_truth > g_hypothesis) {  // zero-length truth\n        auto loc = std::inner_product(g_hypothesis.begin(), g_hypothesis.end(),\n                                      output_strides.begin(), int64_t{0});\n        OP_REQUIRES(\n            ctx, 0 <= loc && loc < output_elements,\n            errors::Internal(\"Got an inner product \", loc,\n                             \" which would require writing to outside of \"\n                             \"the buffer for the output tensor (max elements \",\n                             output_elements, \")\"));\n        output_t(loc) = hypothesis_seq.size();\n        if (normalize_ && output_t(loc) != 0.0f) {\n          output_t(loc) = std::numeric_limits<float>::infinity();\n        }\n        ++hypothesis_iter;\n      } else {  // zero-length hypothesis\n        auto loc = std::inner_product(g_truth.begin(), g_truth.end(),\n                                      output_strides.begin(), int64_t{0});\n        OP_REQUIRES(\n            ctx, 0 <= loc && loc < output_elements,\n            errors::Internal(\"Got an inner product \", loc,\n                             \" which would require writing to outside of \"\n                             \"the buffer for the output tensor (max elements \",\n                             output_elements, \")\"));\n        output_t(loc) = (normalize_) ? 1.0 : truth_seq.size();\n        ++truth_iter;\n      }\n    }\n    while (hypothesis_iter != hypothesis_grouper.end()) {  // zero-length truths\n      sparse::Group hypothesis_j = *hypothesis_iter;\n      std::vector<int64_t> g_hypothesis = hypothesis_j.group();\n      auto hypothesis_seq = hypothesis_j.values<T>();\n      auto loc = std::inner_product(g_hypothesis.begin(), g_hypothesis.end(),\n                                    output_strides.begin(), int64_t{0});\n      OP_REQUIRES(\n          ctx, 0 <= loc && loc < output_elements,\n          errors::Internal(\"Got an inner product \", loc,\n                           \" which would require writing to outside of the \"\n                           \"buffer for the output tensor (max elements \",\n                           output_elements, \")\"));\n      output_t(loc) = hypothesis_seq.size();\n      if (normalize_ && output_t(loc) != 0.0f) {\n        output_t(loc) = std::numeric_limits<float>::infinity();\n      }\n      ++hypothesis_iter;\n    }\n    while (truth_iter != truth_grouper.end()) {  // missing hypotheses\n      sparse::Group truth_i = *truth_iter;\n      std::vector<int64_t> g_truth = truth_i.group();\n      auto truth_seq = truth_i.values<T>();\n      auto loc = std::inner_product(g_truth.begin(), g_truth.end(),\n                                    output_strides.begin(), int64_t{0});\n      OP_REQUIRES(\n          ctx, 0 <= loc && loc < output_elements,\n          errors::Internal(\"Got an inner product \", loc,\n                           \" which would require writing to outside of the \"\n                           \"buffer for the output tensor (max elements \",\n                           output_elements, \")\"));\n      output_t(loc) = (normalize_) ? 1.0 : truth_seq.size();\n      ++truth_iter;\n    }\n  }\n\n private:\n  bool normalize_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(EditDistanceOp);\n};\n\n#define REGISTER_CPU_KERNEL(T)                                        \\\n  REGISTER_KERNEL_BUILDER(                                            \\\n      Name(\"EditDistance\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      EditDistanceOp<T>);\n\nTF_CALL_POD_STRING_TYPES(REGISTER_CPU_KERNEL);\n\n#undef REGISTER_CPU_KERNEL\n\n}  // end namespace tensorflow\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tensorflow.kernels.edit_distance_op.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import sparse_tensor\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.platform import test\n\n\ndef ConstantOf(x):\n  x = np.asarray(x)\n  # Convert to int64 if it's not a string or unicode\n  if x.dtype.char not in \"SU\":\n    x = np.asarray(x, dtype=np.int64)\n  return constant_op.constant(x)\n\n\nclass EditDistanceTest(test.TestCase):\n\n  def _testEditDistanceST(self,\n                          hypothesis_st,\n                          truth_st,\n                          normalize,\n                          expected_output,\n                          expected_shape,\n                          expected_err_re=None):\n    edit_distance = array_ops.edit_distance(\n        hypothesis=hypothesis_st, truth=truth_st, normalize=normalize)\n\n    if expected_err_re is None:\n      self.assertEqual(edit_distance.get_shape(), expected_shape)\n      output = self.evaluate(edit_distance)\n      self.assertAllClose(output, expected_output)\n    else:\n      with self.assertRaisesOpError(expected_err_re):\n        self.evaluate(edit_distance)\n\n  def _testEditDistance(self,\n                        hypothesis,\n                        truth,\n                        normalize,\n                        expected_output,\n                        expected_err_re=None):\n    # Shape inference figures out the shape from the shape variables\n    # Explicit tuple() needed since zip returns an iterator in Python 3.\n    expected_shape = [\n        max(h, t) for h, t in tuple(zip(hypothesis[2], truth[2]))[:-1]\n    ]\n\n    # SparseTensorValue inputs.\n    with ops.Graph().as_default() as g, self.session(g):\n      # hypothesis and truth are (index, value, shape) tuples\n      self._testEditDistanceST(\n          hypothesis_st=sparse_tensor.SparseTensorValue(\n              *[ConstantOf(x) for x in hypothesis]),\n          truth_st=sparse_tensor.SparseTensorValue(\n              *[ConstantOf(x) for x in truth]),\n          normalize=normalize,\n          expected_output=expected_output,\n          expected_shape=expected_shape,\n          expected_err_re=expected_err_re)\n\n    # SparseTensor inputs.\n    with ops.Graph().as_default() as g, self.session(g):\n      # hypothesis and truth are (index, value, shape) tuples\n      self._testEditDistanceST(\n          hypothesis_st=sparse_tensor.SparseTensor(\n              *[ConstantOf(x) for x in hypothesis]),\n          truth_st=sparse_tensor.SparseTensor(*[ConstantOf(x) for x in truth]),\n          normalize=normalize,\n          expected_output=expected_output,\n          expected_shape=expected_shape,\n          expected_err_re=expected_err_re)\n\n  def testEditDistanceNormalized(self):\n    hypothesis_indices = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    hypothesis_values = [0, 1, 1, -1]\n    hypothesis_shape = [2, 2]\n    truth_indices = [[0, 0], [1, 0], [1, 1]]\n    truth_values = [0, 1, 1]\n    truth_shape = [2, 2]\n    expected_output = [1.0, 0.5]\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_output)\n\n  def testEditDistanceUnnormalized(self):\n    hypothesis_indices = [[0, 0], [1, 0], [1, 1]]\n    hypothesis_values = [10, 10, 11]\n    hypothesis_shape = [2, 2]\n    truth_indices = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    truth_values = [1, 2, 1, -1]\n    truth_shape = [2, 3]\n    expected_output = [2.0, 2.0]\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=False,\n        expected_output=expected_output)\n\n  def testEditDistanceProperDistance(self):\n    # In this case, the values are individual characters stored in the\n    # SparseTensor (type DT_STRING)\n    hypothesis_indices = ([[0, i] for i, _ in enumerate(\"algorithm\")] +\n                          [[1, i] for i, _ in enumerate(\"altruistic\")])\n    hypothesis_values = [x for x in \"algorithm\"] + [x for x in \"altruistic\"]\n    hypothesis_shape = [2, 11]\n    truth_indices = ([[0, i] for i, _ in enumerate(\"altruistic\")] +\n                     [[1, i] for i, _ in enumerate(\"algorithm\")])\n    truth_values = [x for x in \"altruistic\"] + [x for x in \"algorithm\"]\n    truth_shape = [2, 11]\n    expected_unnormalized = [6.0, 6.0]\n    expected_normalized = [6.0 / len(\"altruistic\"), 6.0 / len(\"algorithm\")]\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=False,\n        expected_output=expected_unnormalized)\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_normalized)\n\n  def testEditDistance3D(self):\n    hypothesis_indices = [[0, 0, 0], [1, 0, 0]]\n    hypothesis_values = [0, 1]\n    hypothesis_shape = [2, 1, 1]\n    truth_indices = [[0, 1, 0], [1, 0, 0], [1, 1, 0]]\n    truth_values = [0, 1, 1]\n    truth_shape = [2, 2, 1]\n    expected_output = [\n        [np.inf, 1.0],  # (0,0): no truth, (0,1): no hypothesis\n        [0.0, 1.0]\n    ]  # (1,0): match,    (1,1): no hypothesis\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_output)\n\n  def testEditDistanceZeroLengthHypothesis(self):\n    hypothesis_indices = np.empty((0, 2), dtype=np.int64)\n    hypothesis_values = []\n    hypothesis_shape = [1, 0]\n    truth_indices = [[0, 0]]\n    truth_values = [0]\n    truth_shape = [1, 1]\n    expected_output = [1.0]\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_output)\n\n  def testEditDistanceZeroLengthTruth(self):\n    hypothesis_indices = [[0, 0]]\n    hypothesis_values = [0]\n    hypothesis_shape = [1, 1]\n    truth_indices = np.empty((0, 2), dtype=np.int64)\n    truth_values = []\n    truth_shape = [1, 0]\n    expected_output = [np.inf]  # Normalized, loss is 1/0 = inf\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_output)\n\n  def testEditDistanceZeroLengthHypothesisAndTruth(self):\n    hypothesis_indices = np.empty((0, 2), dtype=np.int64)\n    hypothesis_values = []\n    hypothesis_shape = [1, 0]\n    truth_indices = np.empty((0, 2), dtype=np.int64)\n    truth_values = []\n    truth_shape = [1, 0]\n    expected_output = [0]  # Normalized is 0 because of exact match\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=True,\n        expected_output=expected_output)\n\n  def testEditDistanceBadIndices(self):\n    hypothesis_indices = np.full((3, 3), -1250999896764, dtype=np.int64)\n    hypothesis_values = np.empty(3, dtype=np.int64)\n    hypothesis_shape = np.empty(3, dtype=np.int64)\n    truth_indices = np.full((3, 3), -1250999896764, dtype=np.int64)\n    truth_values = np.full([3], 2, dtype=np.int64)\n    truth_shape = np.full([3], 2, dtype=np.int64)\n    expected_output = []  # dummy; ignored\n\n    self._testEditDistance(\n        hypothesis=(hypothesis_indices, hypothesis_values, hypothesis_shape),\n        truth=(truth_indices, truth_values, truth_shape),\n        normalize=False,\n        expected_output=expected_output,\n        expected_err_re=(r\"inner product -\\d+ which would require writing \"\n                         \"to outside of the buffer for the output tensor\")\n    )\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/edit_distance_op.cc", "tensorflow/python/kernel_tests/array_ops/edit_distance_op_test.py"], "buggy_code_start_loc": [206, 209], "buggy_code_end_loc": [272, 209], "fixing_code_start_loc": [206, 210], "fixing_code_end_loc": [272, 228], "type": "CWE-787", "message": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.EditDistance` has incomplete validation. Users can pass negative values to cause a segmentation fault based denial of service. In multiple places throughout the code, one may compute an index for a write operation. However, the existing validation only checks against the upper bound of the array. Hence, it is possible to write before the array by massaging the input to generate negative values for `loc`. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.", "other": {"cve": {"id": "CVE-2022-29208", "sourceIdentifier": "security-advisories@github.com", "published": "2022-05-20T23:15:45.150", "lastModified": "2022-06-03T02:02:54.007", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.EditDistance` has incomplete validation. Users can pass negative values to cause a segmentation fault based denial of service. In multiple places throughout the code, one may compute an index for a write operation. However, the existing validation only checks against the upper bound of the array. Hence, it is possible to write before the array by massaging the input to generate negative values for `loc`. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto para el aprendizaje autom\u00e1tico. En versiones anteriores a 2.9.0, 2.8.1, 2.7.2 y 2.6.4, la implementaci\u00f3n de \"tf.raw_ops.EditDistance\" presenta una comprobaci\u00f3n incompleta. Los usuarios pueden pasar valores negativos para causar una denegaci\u00f3n de servicio basada en un fallo de segmentaci\u00f3n. En m\u00faltiples lugares a lo largo del c\u00f3digo, puede calcularse un \u00edndice para una operaci\u00f3n de escritura. Sin embargo, la comprobaci\u00f3n existente s\u00f3lo comprueba el l\u00edmite superior del array. Por lo tanto, es posible escribir antes de la matriz al masajear la entrada para generar valores negativos para \"loc\". Las versiones 2.9.0, 2.8.1, 2.7.2 y 2.6.4 contienen un parche para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 3.6}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.6.4", "matchCriteriaId": "D9359D32-D090-44CF-AC43-2046084A28BB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.7.0", "versionEndExcluding": "2.7.2", "matchCriteriaId": "C4DFBF2D-5283-42F6-8800-D653BFA5CE82"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:rc0:*:*:*:*:*:*", "matchCriteriaId": "A58EDA5C-66D6-46F1-962E-60AFB7C784A7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "89522760-C2DF-400D-9624-626D8F160CBA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.8.0:-:*:*:*:*:*:*", "matchCriteriaId": "E9EA1898-ACAA-4699-8BAE-54D62C1819FB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.8.0:rc0:*:*:*:*:*:*", "matchCriteriaId": "130DE3C9-6842-456F-A259-BF8FF8457217"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.8.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "BBF2FCEF-989C-409D-9F4C-81418C65B972"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.9.0:rc0:*:*:*:*:*:*", "matchCriteriaId": "9CFB1CFC-579D-4647-A472-6DE8BE1951DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.9.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "F3F3F37E-D27F-4060-830C-0AFF16150777"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/30721cf564cb029d34535446d6a5a6357bebc8e7", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.6.4", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.7.2", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.8.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.9.0", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2r2f-g8mw-9gvr", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/30721cf564cb029d34535446d6a5a6357bebc8e7"}}