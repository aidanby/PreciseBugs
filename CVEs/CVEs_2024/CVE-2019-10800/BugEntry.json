{"buggy_code": ["#!/usr/bin/python\n\nimport os\nimport re\nimport sys\nimport glob\nimport requests\nimport argparse\nfrom time import sleep\nfrom json import loads\n\ntry:\n    from urllib.parse import urlencode\nexcept ImportError:  # pragma: no cover\n    from urllib import urlencode\n\ntry:\n    from shlex import quote\nexcept ImportError: # pragma: no cover\n    from pipes import quote\n\nimport subprocess\n\n# https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning\nimport logging\nlogging.captureWarnings(True)\n\n\nversion = VERSION = __version__ = '2.0.15'\n\nCOLOR = True\n\nis_merge_commit = re.compile(r'^Merge\\s\\w{40}\\sinto\\s\\w{40}$')\n\nremove_token = re.compile(r'token=[^\\&]+').sub\n\nignored_path = re.compile(r'(/vendor)|'\n                          r'(/js/generated/coverage)|'\n                          r'(/__pycache__)|'\n                          r'(/coverage/instrumented)|'\n                          r'(/build/lib)|'\n                          r'(/htmlcov)|'\n                          r'(/node_modules)|'\n                          r'(/\\.yarn-cache)|'\n                          r'(\\.egg-info)|'\n                          r'(/\\.git)|'\n                          r'(/\\.hg)|'\n                          r'(/\\.tox)|'\n                          r'(/\\.?v?(irtual)?envs?)', re.I).search\n\nignored_report = re.compile('.*('\n                            r'(/\\.coverage.*)|'\n                            r'(\\.coveragerc)|'\n                            r'(\\.egg)|'\n                            r'(\\.gif)|'\n                            r'(\\.ini)|'\n                            r'(\\.less)|'\n                            r'(\\.jpeg)|'\n                            r'(\\.jpg)|'\n                            r'(\\.md)|'\n                            r'(\\.png)|'\n                            r'(\\.p?sql)|'\n                            r'(\\.whl)|'\n                            r'(\\.cpp)|'\n                            r'(\\.pyc?)|'\n                            r'(\\.cfg)|'\n                            r'(\\.class)|'\n                            r'(\\.js)|'\n                            r'(\\.html)|'\n                            r'(\\.sh)|'\n                            r'(\\.tar\\.gz)|'\n                            r'(\\.yml)|'\n                            r'(\\.xcconfig)|'\n                            r'(\\.data)|'\n                            r'(coverage\\.db)|'\n                            r'(\\.?codecov\\.yml)|'\n                            r'(coverage\\.jade)|'\n                            r'(include\\.lst)|'\n                            r'(inputFiles\\.lst)|'\n                            r'(createdFiles\\.lst)|'\n                            r'(scoverage\\.measurements\\..*)|'\n                            r'(test_.*_coverage\\.txt)|'\n                            r'(conftest_.*\\.c\\.gcov)'\n                            ')$', re.I).match\n\nis_report = re.compile('.*('\n                       r'([^/]*coverage[^/]*)|'\n                       r'(\\.gcov)|'\n                       r'(\\.lcov)|'\n                       r'(\\.lst)|'\n                       r'(clover\\.xml)|'\n                       r'(cobertura\\.xml)|'\n                       r'(coverage-final\\.json)|'\n                       r'(coverage-summary\\.json)|'\n                       r'(gcov\\.info)|'\n                       r'(([^/]*\\.)?codecov\\.[^/]*)|'\n                       r'(jacoco[^/]*\\.xml)|'\n                       r'(lcov\\.info)|'\n                       r'(luacov\\.report\\.out)|'\n                       r'(nosetests\\.xml)|'\n                       r'(report\\.xml)'\n                       ')$', re.I).match\n\nopj = os.path.join  # for faster access\n\n\ndef write(text, color=None):\n    global COLOR\n    if COLOR:\n        text = text.replace('==>', '\\033[90m==>\\033[0m')\n        text = text.replace('    +', '    \\033[32m+\\033[0m')\n        text = text.replace('XX>', '\\033[31mXX>\\033[0m')\n        if text[:6] == 'Error:':\n            text = '\\033[41mError:\\033[0m\\033[91m%s\\033[0m' % text[6:]\n        elif text[:4] == 'Tip:':\n            text = '\\033[42mTip:\\033[0m\\033[32m%s\\033[0m' % text[4:]\n        elif text.strip()[:4] == 'http':\n            text = '\\033[92m%s\\033[0m' % text\n        elif text[:7] == 'Codecov':\n            text = \"\"\"\n      _____          _\n     / ____|        | |\n    | |     ___   __| | ___  ___ _____   __\n    | |    / _ \\ / _  |/ _ \\/ __/ _ \\ \\ / /\n    | |___| (_) | (_| |  __/ (_| (_) \\ V /\n     \\_____\\___/ \\____|\\___|\\___\\___/ \\_/\n                                    %s\\n\"\"\" % text.split(' ')[1]\n        elif color == 'red':\n            text = '\\033[91m%s\\033[0m' % text\n        elif color == 'green':\n            text = '\\033[92m%s\\033[0m' % text\n\n    sys.stdout.write(text + '\\n')\n\n\ndef fopen(path):\n    try:\n        if sys.version_info < (3, 0):\n            with open(path, 'r') as f:\n                return f.read()\n        else:\n            try:\n                with open(path, 'r', encoding='utf-8') as f:\n                    return f.read()\n            except UnicodeDecodeError:\n                with open(path, 'r', encoding='ISO-8859-1') as f:\n                    return f.read()\n    except Exception as e:\n        # on none of that works. just print the issue and continue\n        write('    - Ignored: ' + str(e))\n\n\ndef read(filepath):\n    try:\n        report = fopen(filepath)\n        if report is None:\n            return\n        write('    + %s bytes=%d' % (filepath, os.path.getsize(filepath)))\n        return '# path=' + filepath + '\\n' + report\n    except Exception as e:\n        # Ex: No such file or directory, skip them\n        write('    - Ignored: ' + str(e))\n\n\ndef check_output(cmd, **popen_args):\n    from subprocess import Popen, PIPE, CalledProcessError\n    process = Popen(cmd, stdout=PIPE, **popen_args)\n    output, _ = process.communicate()\n    if process.returncode:\n        raise CalledProcessError(process.returncode, cmd)\n    else:\n        assert process.returncode == 0\n        return output.decode('utf-8')\n\n\ndef try_to_run(cmd, shell=True):\n    try:\n        return check_output(cmd, shell=shell)\n    except subprocess.CalledProcessError as e:\n        write('    Error running `%s`: %s' % (cmd, e.output or str(e)))\n\ndef run_python_coverage(args):\n    \"\"\"Run the Python coverage tool\n    \n    If it's importable in this Python, launch it using 'python -m'.\n    Otherwise, look it up on PATH like any other command.\n    \"\"\"\n    try:\n        import coverage\n    except ImportError:\n        # Coverage is not installed on this Python. Hope it's on PATH.\n        try_to_run(['coverage'] + args, shell=False)\n    else:\n        # Coverage is installed on this Python. Run it as a module.\n        try_to_run([sys.executable, '-m', 'coverage'] + args, shell=False)\n\ndef remove_non_ascii(data):\n    try:\n        return data.decode('utf8') + ''\n    except:\n        return ''.join([i if ord(i) < 128 else '' for i in data])\n\n\ndef _add_env_if_not_empty(lst, value):\n    if os.getenv(value) is not None:\n        lst.add(value)\n\n\ndef main(*argv, **kwargs):\n    root = os.getcwd()\n\n    # Build Parser\n    # ------------\n    parser = argparse.ArgumentParser(prog='codecov', add_help=True,\n                                     formatter_class=argparse.RawDescriptionHelpFormatter,\n                                     epilog=\"\"\"Upload reports to Codecov\"\"\")\n    basics = parser.add_argument_group('======================== Basics ========================')\n    basics.add_argument('--version', action='version', version='Codecov py-v'+version+\" - https://codecov.io/\")\n    basics.add_argument('--token', '-t', default=os.getenv(\"CODECOV_TOKEN\"), help=\"Private repository token or @filename for file containing the token. Defaults to $CODECOV_TOKEN. Not required for public repositories on Travis CI, CircleCI and AppVeyor\")\n    basics.add_argument('--file', '-f', nargs=\"*\", default=None, help=\"Target a specific file for uploading\")\n    basics.add_argument('--flags', '-F', nargs=\"*\", default=None, help=\"Flag these uploaded files with custom labels\")\n    basics.add_argument('--env', '-e', nargs=\"*\", default=None, help=\"Store environment variables to help distinguish CI builds.\")\n    basics.add_argument('--required', action=\"store_true\", default=False, help=\"If Codecov fails it will exit 1 - possibly failing the CI build.\")\n    basics.add_argument('--name', '-n', default=None, help=\"Custom defined name of the upload. Visible in Codecov UI.\")\n\n    gcov = parser.add_argument_group('======================== gcov ========================')\n    gcov.add_argument('--gcov-root', default=None, help=\"Project root directory when preparing gcov\")\n    gcov.add_argument('--gcov-glob', nargs=\"*\", default=[], help=\"Paths to ignore during gcov gathering\")\n    gcov.add_argument('--gcov-exec', default='gcov', help=\"gcov executable to run. Defaults to 'gcov'\")\n    gcov.add_argument('--gcov-args', default='', help=\"extra arguments to pass to gcov\")\n\n    advanced = parser.add_argument_group('======================== Advanced ========================')\n    advanced.add_argument('-X', '--disable', nargs=\"*\", default=[], help=\"Disable features. Accepting **search** to disable crawling through directories, **detect** to disable detecting CI provider, **gcov** disable gcov commands, `pycov` disables running python `coverage xml`, **fix** to disable report adjustments https://docs.codecov.io/docs/fixing-reports\")\n    advanced.add_argument('--root', default=None, help=\"Project directory. Default: current direcory or provided in CI environment variables\")\n    advanced.add_argument('--commit', '-c', default=None, help=\"Commit SHA, set automatically\")\n    advanced.add_argument('--prefix', '-P', default=None, help=\"Prefix network paths to help resolve paths: https://github.com/codecov/support/issues/472\")\n    advanced.add_argument('--branch', '-b', default=None, help=\"Branch name\")\n    advanced.add_argument('--build', default=None, help=\"Specify a custom build number to distinguish CI jobs, provided automatically for supported CI companies\")\n    advanced.add_argument('--pr', default=None, help=\"Specify a custom pr number, provided automatically for supported CI companies\")\n    advanced.add_argument('--tag', default=None, help=\"Git tag\")\n\n    enterprise = parser.add_argument_group('======================== Enterprise ========================')\n    enterprise.add_argument('--slug', '-r', default=os.getenv(\"CODECOV_SLUG\"), help=\"Specify repository slug for Enterprise ex. owner/repo\")\n    enterprise.add_argument('--url', '-u', default=os.getenv(\"CODECOV_URL\", \"https://codecov.io\"), help=\"Your Codecov endpoint\")\n    enterprise.add_argument('--cacert', default=os.getenv(\"CODECOV_CACERT\", os.getenv(\"CURL_CA_BUNDLE\")), help=\"Certificate pem bundle used to verify with your Codecov instance\")\n\n    debugging = parser.add_argument_group('======================== Debugging ========================')\n    debugging.add_argument('--dump', action=\"store_true\", help=\"Dump collected data and do not send to Codecov\")\n    debugging.add_argument('-v', '--verbose', action=\"store_true\", help=\"Be verbose, e.g. dump the collected data\")\n    debugging.add_argument('--no-color', action=\"store_true\", help=\"Do not output with color\")\n\n    # Parse Arguments\n    # ---------------\n    if argv:\n        codecov = parser.parse_args(argv)\n    else:\n        codecov = parser.parse_args()\n\n    global COLOR\n    COLOR = not codecov.no_color\n\n    include_env = set()\n\n    # add from cli\n    if codecov.env:\n        # -e VAR1,VAR2 or -e VAR1 -e VAR2\n        for env in codecov.env:\n            for e in env.split(','):\n                include_env.add(e.strip())\n\n    # add from env\n    if os.getenv(\"CODECOV_ENV\"):\n        for env in os.getenv(\"CODECOV_ENV\").split(','):\n            include_env.add(env.strip())\n\n    write('Codecov v'+version)\n    query = dict(commit='', branch='', job='', pr='', build_url='',\n                 token=codecov.token)\n    language = None\n\n    if os.getenv('TOXENV'):\n        _add_env_if_not_empty(include_env, 'TOXENV')\n\n    # Detect CI\n    # ---------\n    if 'detect' in codecov.disable:\n        write('XX> Detecting CI provider disabled.')\n\n    else:\n        write('==> Detecting CI provider')\n        # -------\n        # Jenkins\n        # -------\n        if os.getenv('JENKINS_URL'):\n            # https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project\n            # https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin#GitHubpullrequestbuilderplugin-EnvironmentVariables\n            query.update(dict(branch=os.getenv('ghprbSourceBranch') or os.getenv('GIT_BRANCH') or os.getenv('BRANCH_NAME'),\n                              service='jenkins',\n                              commit=os.getenv('ghprbActualCommit') or os.getenv('GIT_COMMIT'),\n                              pr=os.getenv('ghprbPullId') or os.getenv('CHANGE_ID'),\n                              build=os.getenv('BUILD_NUMBER'),\n                              build_url=os.getenv('BUILD_URL')))\n            root = os.getenv('WORKSPACE') or root\n            write('    Jenkins Detected')\n\n        # ---------\n        # Travis CI\n        # ---------\n        elif os.getenv('CI') == 'true' and os.getenv('TRAVIS') == \"true\" and os.getenv('SHIPPABLE') != 'true':\n            # http://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables\n            query.update(dict(branch=os.getenv('TRAVIS_BRANCH'),\n                              service='travis',\n                              build=os.getenv('TRAVIS_JOB_NUMBER'),\n                              pr=os.getenv('TRAVIS_PULL_REQUEST'),\n                              job=os.getenv('TRAVIS_JOB_ID'),\n                              tag=os.getenv('TRAVIS_TAG'),\n                              slug=os.getenv('TRAVIS_REPO_SLUG'),\n                              commit=os.getenv('TRAVIS_COMMIT')))\n            root = os.getenv('TRAVIS_BUILD_DIR') or root\n            write('    Travis Detected')\n            language = (list(filter(lambda l: os.getenv('TRAVIS_%s_VERSION' % l.upper()),\n                                    ('dart', 'go', 'haxe', 'jdk', 'julia', 'node', 'otp', 'xcode',\n                                     'perl', 'php', 'python', 'r', 'ruby', 'rust', 'scala'))) + [''])[0]\n\n            _add_env_if_not_empty(include_env, 'TRAVIS_OS_NAME')\n            if language:\n                _add_env_if_not_empty(include_env, 'TRAVIS_%s_VERSION' % language.upper())\n\n        # --------\n        # Codeship\n        # --------\n        elif os.getenv('CI') == 'true' and os.getenv('CI_NAME') == 'codeship':\n            # https://www.codeship.io/documentation/continuous-integration/set-environment-variables/\n            query.update(dict(branch=os.getenv('CI_BRANCH'),\n                              service='codeship',\n                              build=os.getenv('CI_BUILD_NUMBER'),\n                              build_url=os.getenv('CI_BUILD_URL'),\n                              commit=os.getenv('CI_COMMIT_ID')))\n            write('    Codeship Detected')\n\n        # ---------\n        # Buildkite\n        # ---------\n        elif os.getenv('CI') == 'true' and os.getenv('BUILDKITE') == 'true':\n            # https://buildkite.com/docs/guides/environment-variables\n            query.update(dict(branch=os.getenv('BUILDKITE_BRANCH'),\n                              service='buildkite',\n                              build=os.getenv('BUILDKITE_BUILD_NUMBER') + '.' + os.getenv('BUILDKITE_JOB_ID'),\n                              slug=os.getenv('BUILDKITE_PROJECT_SLUG'),\n                              build_url=os.getenv('BUILDKITE_BUILD_URL'),\n                              commit=os.getenv('BUILDKITE_COMMIT')))\n            write('    Buildkite Detected')\n\n        # ---------\n        # Circle CI\n        # ---------\n        elif os.getenv('CI') == 'true' and os.getenv('CIRCLECI') == 'true':\n            # https://circleci.com/docs/environment-variables\n            query.update(dict(branch=os.getenv('CIRCLE_BRANCH'),\n                              service='circleci',\n                              build=os.getenv('CIRCLE_BUILD_NUM') + \".\" + os.getenv('CIRCLE_NODE_INDEX'),\n                              job=os.getenv('CIRCLE_BUILD_NUM') + \".\" + os.getenv('CIRCLE_NODE_INDEX'),\n                              pr=os.getenv('CIRCLE_PR_NUMBER'),\n                              slug=os.getenv('CIRCLE_PROJECT_USERNAME') + \"/\" + os.getenv('CIRCLE_PROJECT_REPONAME'),\n                              commit=os.getenv('CIRCLE_SHA1')))\n            write('    Circle CI Detected')\n\n        # ---------\n        # Semaphore\n        # ---------\n        elif os.getenv('CI') == 'true' and os.getenv('SEMAPHORE') == 'true':\n            # https://semaphoreapp.com/docs/available-environment-variables.html\n            query.update(dict(branch=os.getenv('BRANCH_NAME'),\n                              service='semaphore',\n                              build=os.getenv('SEMAPHORE_BUILD_NUMBER') + '.' + os.getenv('SEMAPHORE_CURRENT_THREAD'),\n                              slug=os.getenv('SEMAPHORE_REPO_SLUG'),\n                              commit=os.getenv('REVISION')))\n            write('    Semaphore Detected')\n\n        # ----------\n        # Greenhouse\n        # ----------\n        elif os.getenv('GREENHOUSE') == 'true':\n            # http://docs.greenhouseci.com/docs/environment-variables-files\n            query.update(dict(branch=os.getenv('GREENHOUSE_BRANCH'),\n                              service='greenhouse',\n                              build=os.getenv('GREENHOUSE_BUILD_NUMBER'),\n                              build_url=os.getenv('GREENHOUSE_BUILD_URL'),\n                              pr=os.getenv('GREENHOUSE_PULL_REQUEST'),\n                              commit=os.getenv('GREENHOUSE_COMMIT')))\n            write('    Greenhouse Detected')\n\n        # --------\n        # drone.io\n        # --------\n        elif os.getenv('CI') == \"drone\" and os.getenv('DRONE') == \"true\":\n            # http://docs.drone.io/env.html\n            query.update(dict(branch=os.getenv('DRONE_BRANCH'),\n                              service='drone.io',\n                              build=os.getenv('DRONE_BUILD_NUMBER'),\n                              build_url=os.getenv('DRONE_BUILD_LINK')))\n            root = os.getenv('DRONE_BUILD_DIR') or root\n            write('    Drone Detected')\n\n        # --------\n        # TeamCity\n        # --------\n        elif os.getenv('TEAMCITY_VERSION'):\n            # https://confluence.jetbrains.com/plugins/servlet/mobile#content/view/74847298\n            query.update(dict(service='teamcity',\n                              build=os.getenv('BUILD_NUMBER'),\n                              commit=os.getenv('BUILD_VCS_NUMBER')))\n            write('    TeamCity CI Detected')\n\n        # --------\n        # AppVeyor\n        # --------\n        elif os.getenv('CI', 'false').lower() == 'true' and os.getenv('APPVEYOR', 'false').lower() == 'true':\n            # http://www.appveyor.com/docs/environment-variables\n            query.update(dict(branch=os.getenv('APPVEYOR_REPO_BRANCH'),\n                              service=\"appveyor\",\n                              job='/'.join((os.getenv('APPVEYOR_ACCOUNT_NAME'), os.getenv('APPVEYOR_PROJECT_SLUG'), os.getenv('APPVEYOR_BUILD_VERSION'))),\n                              build=os.getenv('APPVEYOR_JOB_ID'),\n                              pr=os.getenv('APPVEYOR_PULL_REQUEST_NUMBER'),\n                              slug=os.getenv('APPVEYOR_REPO_NAME'),\n                              commit=os.getenv('APPVEYOR_REPO_COMMIT')))\n            write('    AppVeyor Detected')\n            codecov.disable.append('search')\n\n        # -------\n        # Wercker\n        # -------\n        elif os.getenv('CI') == \"true\" and os.getenv('WERCKER_GIT_BRANCH'):\n            # http://devcenter.wercker.com/articles/steps/variables.html\n            query.update(dict(branch=os.getenv('WERCKER_GIT_BRANCH'),\n                              service=\"wercker\",\n                              build=os.getenv('WERCKER_MAIN_PIPELINE_STARTED'),\n                              slug=os.getenv('WERCKER_GIT_OWNER') + '/' + os.getenv('WERCKER_GIT_REPOSITORY'),\n                              commit=os.getenv('WERCKER_GIT_COMMIT')))\n            write('    Wercker Detected')\n\n        # ------\n        # Magnum\n        # ------\n        elif os.getenv('CI') == \"true\" and os.getenv('MAGNUM') == 'true':\n            # https://magnum-ci.com/docs/environment\n            query.update(dict(service=\"magnum\",\n                              branch=os.getenv('CI_BRANCH'),\n                              build=os.getenv('CI_BUILD_NUMBER'),\n                              commit=os.getenv('CI_COMMIT')))\n            write('    Magnum Detected')\n\n        # ---------\n        # Shippable\n        # ---------\n        elif os.getenv('SHIPPABLE') == \"true\":\n            # http://docs.shippable.com/en/latest/config.html#common-environment-variables\n            query.update(dict(branch=os.getenv('BRANCH'),\n                              service='shippable',\n                              build=os.getenv('BUILD_NUMBER'),\n                              build_url=os.getenv('BUILD_URL'),\n                              pr=os.getenv('PULL_REQUEST'),\n                              slug=os.getenv('REPO_NAME'),\n                              commit=os.getenv('COMMIT')))\n            write('    Shippable Detected')\n\n        # ---------\n        # Gitlab CI\n        # ---------\n        elif os.getenv('CI_SERVER_NAME', '').startswith(\"GitLab\"):\n            # http://doc.gitlab.com/ci/examples/README.html#environmental-variables\n            # https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/lib/build.rb#L96\n            query.update(dict(service='gitlab',\n                              branch=os.getenv('CI_BUILD_REF_NAME'),\n                              build=os.getenv('CI_BUILD_ID'),\n                              commit=os.getenv('CI_BUILD_REF')))\n            if os.getenv('CI_PROJECT_DIR', '').startswith('/'):\n                root = os.getenv('CI_PROJECT_DIR')\n            else:\n                root = os.getenv('HOME') + '/' + os.getenv('CI_PROJECT_DIR', '')\n\n            if os.getenv('CI_BUILD_REPO'):\n                query['slug'] = os.getenv('CI_BUILD_REPO').split('/', 3)[-1].replace('.git', '')\n            elif os.getenv('CI_REPOSITORY_URL'):\n                query['slug'] = os.getenv('CI_REPOSITORY_URL').split('/', 3)[-1].replace('.git', '')\n\n            write('    Gitlab CI Detected')\n\n        else:\n            query.update(dict(commit=os.getenv('VCS_COMMIT_ID', ''),\n                              branch=os.getenv('VCS_BRANCH_NAME', ''),\n                              pr=os.getenv('VCS_PULL_REQUEST', ''),\n                              slug=os.getenv('VCS_SLUG', ''),\n                              build_url=os.getenv('CI_BUILD_URL', ''),\n                              build=os.getenv('CI_BUILD_ID', '')))\n\n        # ------\n        # git/hg\n        # ------\n        if not query.get('branch'):\n            try:\n                # find branch, commit, repo from git command\n                branch = try_to_run('git rev-parse --abbrev-ref HEAD || hg branch')\n                query['branch'] = branch if branch != 'HEAD' else ''\n                write('  -> Got branch from git/hg')\n\n            except:\n                write('  x> Failed to get branch from git/hg')\n\n        if not query.get('commit'):\n            try:\n                query['commit'] = try_to_run(\"git rev-parse HEAD || hg id -i --debug | tr -d '+'\")\n                write('  -> Got sha from git/hg')\n\n            except:  # pragma: no cover\n                write('  x> Failed to get sha from git/hg')\n\n    # Update Query\n    # ------------\n    if codecov.name:\n        query['name'] = codecov.name\n\n    if codecov.flags:\n        query['flags'] = ','.join(codecov.flags)\n\n    if codecov.build:\n        query['build'] = codecov.build\n\n    if codecov.pr:\n        query['pr'] = codecov.pr\n\n    if codecov.commit:\n        query['commit'] = codecov.commit\n\n    elif query['pr'] and query['pr'] != 'false':\n        # Merge Commits\n        # -------------\n        res = try_to_run('git log -1 --pretty=%B')\n        if res and is_merge_commit.match(res.strip()):\n            query['commit'] = res.split(' ')[1]\n            write('    Fixing merge commit SHA')\n\n    if codecov.slug:\n        query['slug'] = codecov.slug\n\n    if codecov.branch:\n        query['branch'] = codecov.branch\n\n    if codecov.tag:\n        query['tag'] = codecov.tag\n\n    if codecov.root:\n        root = codecov.root\n\n    root = quote(root)\n\n    # Upload\n    # ------\n    try:\n        write('==> Preparing upload')\n\n        # Read token from file\n        # --------------------\n        if query.get('token') and query.get('token')[0] == '@':\n            write('    Reading token from file')\n            query['token'] = fopen(opj(os.getcwd(), query['token'][1:])).strip()\n\n        assert query.get('commit') not in ('', None), \"Commit sha is missing. Please specify via --commit=:sha\"\n\n        # Build TOC\n        # ---------\n        toc = str((try_to_run('cd %s && git ls-files' % root) or\n                   try_to_run('git ls-files') or\n                   try_to_run('cd %s && hg locate' % root) or\n                   try_to_run('hg locate') or '').strip())\n\n        if codecov.prefix:\n            prefix = codecov.prefix.strip('/')\n            toc = '{}/{}'.format(\n                prefix,\n                toc.replace('\\n', '\\n{}/'.format(prefix))\n            )\n\n        # Detect codecov.yml location\n        yaml_location = re.search(\n            r'\\.?codecov\\.ya?ml$',\n            toc,\n            re.M\n        )\n        if yaml_location:\n            yaml_location = yaml_location.group()\n            yaml_path = opj(root, yaml_location)\n            if os.path.exists(yaml_path):\n                query['yaml'] = yaml_location\n                yaml = fopen(yaml_path)\n                _token = re.search(\n                    r'token: (\\'|\\\")?([0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{12})',\n                    yaml,\n                    re.M\n                )\n                if _token:\n                    query['token'] = _token.groups()[1]\n\n                _slug = re.search(\n                    r'slug: (\\'|\\\")?([\\w\\-\\.\\+]+\\/[\\w\\-\\.\\+]+)',\n                    yaml,\n                    re.M\n                )\n                if _slug:\n                    query['slug'] = _slug.groups()[1]\n\n        assert query.get('job') or query.get('token'), \"Missing repository upload token\"\n\n        # Processing gcov\n        # ---------------\n        if 'gcov' in codecov.disable:\n            write('XX> Skip processing gcov')\n\n        else:\n            dont_search_here = (\n                \"-not -path './bower_components/**' \"\n                \"-not -path './node_modules/**' \"\n                \"-not -path './vendor/**'\"\n            )\n            write('==> Processing gcov (disable by -X gcov)')\n            cmd = \"find %s %s -type f -name '*.gcno' %s -exec %s -pb %s {} +\" % (\n                  (codecov.gcov_root or root),\n                  dont_search_here,\n                  \" \".join(map(lambda a: \"-not -path '%s'\" % a, codecov.gcov_glob)),\n                  (codecov.gcov_exec or ''),\n                  (codecov.gcov_args or ''))\n            write('    Executing gcov (%s)' % cmd)\n            try_to_run(cmd)\n\n        # Collect Reports\n        # ---------------\n        write('==> Collecting reports')\n        reports = []\n\n        if 'search' in codecov.disable:\n            write('XX> Searching for reports disabled')\n        else:\n\n            # Detect .bowerrc\n            # ---------------\n            bower_components = '/bower_components'\n            bowerrc = opj(root, '.bowerrc')\n            if os.path.exists(bowerrc):\n                write('    Detecting .bowerrc file')\n                try:\n                    bower_components = '/' + (loads(fopen(bowerrc)).get('directory') or 'bower_components').replace('./', '').strip('/')\n                    write('    .bowerrc detected, ignoring ' + bower_components)\n                except Exception as e:\n                    write('    .bowerrc parsing error: ' + str(e))\n\n            # Find reports\n            # ------------\n            for _root, dirs, files in os.walk(root):\n                # need to replace('\\\\', '/') for Windows\n                if not ignored_path(_root.replace('\\\\', '/')) and bower_components not in _root.replace('\\\\', '/'):\n                    # add data to tboc\n                    for filepath in files:\n                        fullpath = opj(_root, filepath)\n                        if not codecov.file and is_report(fullpath.replace('\\\\', '/')) and not ignored_report(fullpath.replace('\\\\', '/')):\n                            # found report\n                            reports.append(read(fullpath))\n\n        # Read Reports\n        # ------------\n        if codecov.file:\n            write('    Targeting specific files')\n            reports.extend(filter(bool, map(read, codecov.file)))\n\n        elif 'pycov' not in codecov.disable:\n            # Call `coverage xml` when .coverage exists\n            # -----------------------------------------\n            # Ran from current directory\n            if glob.glob(opj(os.getcwd(), '.coverage.*')):\n                write('    Merging coverage reports')\n                # The `-a` option is mandatory here. If we\n                # have a `.coverage` in the current directory, calling\n                # without the option would delete the previous data\n                run_python_coverage(['combine', '-a'])\n\n            if os.path.exists(opj(os.getcwd(), '.coverage')) and not os.path.exists(opj(os.getcwd(), 'coverage.xml')):\n                write('    Generating coverage xml reports for Python')\n                # using `-i` to ignore \"No source for code\" error\n                run_python_coverage(['xml', '-i'])\n                reports.append(read(opj(os.getcwd(), 'coverage.xml')))\n\n        reports = list(filter(bool, reports))\n        assert len(reports) > 0, \"No coverage report found\"\n\n        # Storing Environment\n        # -------------------\n        env = ''\n        if include_env:\n            write('==> Appending environment variables')\n            for k in include_env:\n                if k:\n                    write('    + ' + k)\n\n            env = '\\n'.join([\"%s=%s\" % (k, os.getenv(k, '')) for k in include_env if k]) + '\\n<<<<<< ENV'\n\n        # join reports together\n        reports = '\\n'.join((env, (toc or ''), '<<<<<< network',\n                             '\\n<<<<<< EOF\\n'.join(reports),\n                             '<<<<<< EOF'))\n\n        query['package'] = \"py\" + VERSION\n        urlargs = (urlencode(dict([(k, v.strip()) for k, v in query.items() if v not in ('', None)]))).replace(\"+\", \"%20\")\n\n        result = ''\n        if codecov.dump:\n            write('-------------------- Debug --------------------')\n            write('    .url ' + codecov.url)\n            write('    .query ' + remove_token('token=<secret>', urlargs))\n            write(reports)\n            write('--------------------  EOF  --------------------')\n        else:\n            write('==> Uploading')\n            write('    .url ' + codecov.url)\n            write('    .query ' + remove_token('token=<secret>', urlargs))\n            if codecov.verbose:\n                write('-------------------- Reports --------------------')\n                write(reports)\n                write('-------------------------------------------------')\n\n            s3 = None\n            trys = 0\n            while trys < 3:\n                trys += 1\n                if 's3' not in codecov.disable:\n                    try:\n                        write('    Pinging Codecov...')\n                        res = requests.post('%s/upload/v4?%s' % (codecov.url, urlargs),\n                                            verify=codecov.cacert,\n                                            headers={'Accept': 'text/plain',\n                                                     'X-Reduced-Redundancy': 'false'})\n                        if res.status_code in (400, 406):\n                            raise Exception(res.text)\n\n                        elif res.status_code < 500:\n                            assert res.status_code == 200\n                            res = res.text.strip().split()\n                            result, upload_url = res[0], res[1]\n\n                            # Handle reports encoding for Python 2 and 3\n                            if not isinstance(reports, bytes):\n                                reports = reports.encode('utf-8')\n\n                            write('    Uploading to S3...')\n                            s3 = requests.put(upload_url, data=reports,\n                                              headers={'Content-Type': 'text/plain',\n                                                       'x-amz-acl': 'public-read'})\n                            s3.raise_for_status()\n                            assert s3.status_code == 200\n                            write('    ' + result)\n                            break\n                        else:\n                            # try again\n                            continue\n\n                    except AssertionError:\n                        write('    Direct to s3 failed. Using backup v2 endpoint.')\n\n                write('    Uploading to Codecov...')\n                # just incase, try traditional upload\n                res = requests.post('%s/upload/v2?%s' % (codecov.url, urlargs),\n                                    verify=codecov.cacert,\n                                    data='\\n'.join((reports, s3.reason if s3 else '', s3.text if s3 else '')),\n                                    headers={\"Accept\": \"text/plain\"})\n                if res.status_code < 500:\n                    write('    ' + res.text)\n                    res.raise_for_status()\n                    result = res.text\n                    return\n\n                write('    Retrying... in %ds' % (trys * 30))\n                sleep(trys * 30)\n\n    except Exception as e:\n        write('Error: ' + str(e))\n        if kwargs.get('debug'):\n            raise\n\n        write('')\n        # detect language\n        if language:\n            write('Tip: See an example %s repo: https://github.com/codecov/example-%s' % (language, language))\n        else:\n            write('Tip: See all example repositories: https://github.com/codecov?query=example')\n\n        write('Support channels:', 'green')\n        write('  Email:   hello@codecov.io\\n'\n              '  IRC:     #codecov\\n'\n              '  Gitter:  https://gitter.im/codecov/support\\n'\n              '  Twitter: @codecov\\n')\n        sys.exit(1 if codecov.required else 0)\n\n    else:\n        if kwargs.get('debug'):\n            return dict(reports=reports, codecov=codecov, query=query, urlargs=urlargs, result=result)\n\n\nif __name__ == '__main__':\n    main()\n", "import os\nimport sys\nimport pickle\nimport itertools\nfrom ddt import ddt, data\nfrom mock import patch, Mock\nimport unittest\n\nimport subprocess\n\nimport codecov\n\n\n@ddt\nclass TestUploader(unittest.TestCase):\n    maxDiff = None\n    here = os.path.dirname(__file__)\n    bowerrc = os.path.join(os.path.dirname(__file__), '../.bowerrc')\n    token = os.path.join(os.path.dirname(__file__), '../.token')\n    jacoco = os.path.join(os.path.dirname(__file__), '../jacoco.xml')\n    filepath = os.path.join(os.path.dirname(__file__), 'coverage.xml')\n    coverage = os.path.join(os.path.dirname(__file__), '../.coverage')\n    defaults = dict(commit='a', branch='a', token='a')\n\n    @classmethod\n    def setUpClass(self):\n        self._env = os.environ.copy()\n\n    @classmethod\n    def tearDownClass(self):\n        os.environ = self._env\n\n    def setUp(self):\n        # set all environ back\n        os.environ['CI'] = \"true\"\n        for key in (\"TRAVIS\", \"TRAVIS_BRANCH\", \"TRAVIS_COMMIT\", \"TRAVIS_BUILD_DIR\", \"TRAVIS_JOB_ID\", \"TRAVIS_PULL_REQUEST\",\n                    \"CI_NAME\", \"CI_BRANCH\", \"CI_COMMIT_ID\", \"SHIPPABLE\",\n                    \"CI_BUILD_NUMBER\", \"MAGNUM\", \"CI_COMMIT\", \"APPVEYOR_ACCOUNT_NAME\", \"APPVEYOR_PROJECT_SLUG\", \"APPVEYOR_PULL_REQUEST_NUMBER\",\n                    \"CIRCLECI\", \"CIRCLE_BRANCH\", \"CIRCLE_ARTIFACTS\", \"CIRCLE_SHA1\", \"CIRCLE_NODE_INDEX\", \"CIRCLE_PR_NUMBER\",\n                    \"SEMAPHORE\", \"BRANCH_NAME\", \"SEMAPHORE_PROJECT_DIR\", \"REVISION\",\n                    \"BUILDKITE\", \"BUILDKITE_BUILD_NUMBER\", \"BUILDKITE_JOB_ID\", \"BUILDKITE_BRANCH\", \"BUILDKITE_PROJECT_SLUG\", \"BUILDKITE_COMMIT\",\n                    \"DRONE\", \"DRONE_BRANCH\", \"DRONE_BUILD_DIR\", \"JENKINS_URL\", \"TRAVIS_TAG\",\n                    \"GIT_BRANCH\", \"GIT_COMMIT\", \"WORKSPACE\", \"BUILD_NUMBER\", \"CI_BUILD_URL\", \"SEMAPHORE_REPO_SLUG\", \"SEMAPHORE_CURRENT_THREAD\",\n                    \"DRONE_BUILD_LINK\", \"TRAVIS_REPO_SLUG\", \"CODECOV_TOKEN\", \"APPVEYOR\", \"APPVEYOR_REPO_BRANCH\",\n                    \"APPVEYOR_BUILD_VERSION\", \"APPVEYOR_JOB_ID\", \"APPVEYOR_REPO_NAME\", \"APPVEYOR_REPO_COMMIT\", \"WERCKER_GIT_BRANCH\",\n                    \"WERCKER_MAIN_PIPELINE_STARTED\", \"WERCKER_GIT_OWNER\", \"WERCKER_GIT_REPOSITORY\",\n                    \"CI_BUILD_REF_NAME\", \"CI_BUILD_ID\", \"CI_BUILD_REPO\", \"CI_PROJECT_DIR\", \"CI_BUILD_REF\", \"CI_SERVER_NAME\",\n                    \"ghprbActualCommit\", \"ghprbSourceBranch\", \"ghprbPullId\", \"WERCKER_GIT_COMMIT\", \"CHANGE_ID\"):\n            os.environ[key] = \"\"\n\n    def tearDown(self):\n        self.delete(self.filepath, self.coverage, self.jacoco, self.bowerrc)\n        self.delete('hello', 'hello.c', 'hello.gcda', 'hello.c.gcov', 'hello.gcno')\n\n    def set_env(self, **kwargs):\n        for key in kwargs:\n            os.environ[key] = str(kwargs[key])\n\n    def run_cli(self, dump=True, *args, **kwargs):\n        inline = list(itertools.chain(*[['--%s' % key, str(value)] for key, value in kwargs.items() if value]))\n        if dump:\n            inline.append('--dump')\n        inline.extend(args)\n        return codecov.main(*inline, debug=True)\n\n    def fake_report(self):\n        with open(self.filepath, 'w+') as f:\n            f.write('__data__')\n\n    def delete(self, *paths):\n        for path in paths:\n            if os.path.exists(path):\n                os.remove(path)\n            path = os.path.join(os.path.dirname(__file__), '../', path)\n            if os.path.exists(path):\n                os.remove(path)\n\n    @data('vendor', 'node_modules', 'js/generated/coverage', '__pycache__', 'coverage/instrumented',\n          'build/lib', 'htmlcov', '.egg-info', '.git', '.tox', 'venv', '.venv-python-2.7')\n    def test_ignored_path(self, path):\n        self.assertTrue(bool(codecov.ignored_path('/home/ubuntu/' + path)), path + ' should be ignored')\n        self.assertTrue(bool(codecov.ignored_path('/home/ubuntu/' + path + '/more paths')), path + ' should be ignored')\n\n    @data('coverage.xml', 'jacoco.xml', 'jacocoTestResults.xml', 'coverage.txt',\n          'gcov.lst', 'cov.gcov', 'info.lcov', 'clover.xml', 'cobertura.xml',\n          'luacov.report.out', 'gcov.info', 'nosetests.xml')\n    def test_is_report(self, path):\n        self.assertFalse(bool(codecov.ignored_report('/home/file/' + path)), path + ' should not be ignored')\n        self.assertTrue(bool(codecov.is_report('/home/file/' + path)), path + ' should be a report')\n\n    @data('.coverage.worker10', 'coverage.jade', 'include.lst', 'inputFiles.lst',\n          'createdFiles.lst', 'scoverage.measurements.blackandwhite.xml', 'test_hello_coverage.txt',\n          'conftest_blackwhite.c.gcov')\n    def test_ignore_report(self, path):\n        self.assertTrue(bool(codecov.ignored_report('/home/file/' + path)), path + ' should be ignored')\n\n    def test_command(self):\n        try:\n            self.run_cli(True, '--help')\n        except SystemExit as e:\n            self.assertEqual(str(e), '0')\n        else:\n            raise Exception(\"help not shown\")\n\n    def test_exits_0(self):\n        try:\n            sys.argv = ['']\n            codecov.main()\n        except SystemExit as e:\n            self.assertEqual(str(e), '0')\n        else:\n            raise Exception(\"did not exit\")\n\n    def test_exits_1(self):\n        try:\n            sys.argv = ['']\n            codecov.main('--required')\n        except SystemExit as e:\n            self.assertEqual(str(e), '1')\n        else:\n            raise Exception(\"did not exit\")\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_returns_none(self):\n        with patch('requests.post') as post:\n            with patch('requests.put') as put:\n                post.return_value = Mock(status_code=200, text='target\\ns3')\n                put.return_value = Mock(status_code=200)\n                with open(self.filepath, 'w+') as f:\n                    f.write('coverage data')\n                sys.argv = ['', '--commit=8ed84d96bc225deff66605486180cd555366806b',\n                            '--branch=master',\n                            '--token=473c8c5b-10ee-4d83-86c6-bfd72a185a27']\n                self.assertEqual(codecov.main(), None)\n                assert post.called and put.called\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_send(self):\n        with patch('requests.post') as post:\n            with patch('requests.put') as put:\n                post.return_value = Mock(status_code=200, text='target\\ns3')\n                put.return_value = Mock(status_code=200)\n                with open(self.filepath, 'w+') as f:\n                    f.write('coverage data')\n                res = self.run_cli(False, commit='a'*40, branch='master', token='<token>')\n                self.assertEqual(res['result'].strip(), 'target')\n                assert 'https://codecov.io/upload/v4?' in post.call_args[0][0]\n                assert 'commit=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' in post.call_args[0][0]\n                assert 'token=%3Ctoken%3E' in post.call_args[0][0]\n                assert 'branch=master' in post.call_args[0][0]\n                assert u'tests/test.py'.encode(\"utf-8\") in put.call_args[1]['data']\n\n    def test_send_error(self):\n        with patch('requests.post') as post:\n            post.return_value = Mock(status_code=400, text='error')\n            with open(self.filepath, 'w+') as f:\n                f.write('coverage data')\n            try:\n                self.run_cli(False, token='not-a-token', commit='a'*40, branch='master')\n            except Exception:\n                pass\n            else:\n                raise Exception('400 never raised')\n\n    @data((dict(commit='sha'), 'Missing repository upload token'), )\n    def test_require_branch(self, dd):\n        (kwargs, reason) = dd\n        # this is so we dont get branch for local git\n        self.set_env(JENKINS_URL='hello')\n        try:\n            self.run_cli(**kwargs)\n        except AssertionError as e:\n            self.assertEqual(str(e), reason)\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_read_token_file(self):\n        with open(self.token, 'w+') as f:\n            f.write('a')\n        with open(self.filepath, 'w+') as f:\n            f.write('coverage data')\n        res = self.run_cli(token='@'+self.token, commit='a', branch='b')\n        self.assertIn('token=a', res['urlargs'])\n\n    def test_bowerrc(self):\n        with open(self.bowerrc, 'w+') as f:\n            f.write('{\"directory\": \"tests\"}')\n        with open(self.filepath, 'w+') as f:\n            f.write('coverage data')\n        try:\n            self.run_cli(**self.defaults)\n        except AssertionError as e:\n            self.assertEqual(str(e),  \"No coverage report found\")\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    def test_disable_search(self):\n        self.fake_report()\n        try:\n            self.run_cli(disable='search', token='a', branch='b', commit='c')\n        except AssertionError as e:\n            self.assertEqual(str(e), \"No coverage report found\")\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_prefix(self):\n        self.fake_report()\n        res = self.run_cli(prefix='/foo/bar/', dump=True, token='a', branch='b', commit='c')\n        assert '\\nfoo/bar/.gitignore' in res['reports']\n\n    def write_c(self):\n        c = '\\n'.join(('#include <stdio.h>',\n                       'static int t = 1;'\n                       'int main()', '{',\n                       'if (t)', 'printf(\"on this line\\\\n\");',\n                       'else', 'printf(\"but not here\\\\n\");',\n                       'return 0;', '}'))\n        with open(os.path.join(os.path.dirname(__file__), '../hello.c'), 'w+') as f:\n            f.write(c)\n        codecov.try_to_run('clang -coverage -O0 hello.c -o hello && ./hello')\n\n    def test_disable_gcov(self):\n        if self._env.get('TRAVIS') == 'true':\n            self.write_c()\n            try:\n                self.run_cli(disable='gcov', token='a', branch='b', commit='c')\n            except AssertionError as e:\n                self.assertEqual(os.path.exists('hello.c.gcov'), False)\n                self.assertEqual(str(e), \"No coverage report found\")\n            else:\n                raise Exception(\"Did not raise AssertionError\")\n        else:\n            self.skipTest(\"Skipped, works on Travis only.\")\n\n    def test_gcov(self):\n        self.skipTest(\"Need to fix this test...\")\n        # if self._env.get('TRAVIS') == 'true':\n        #     self.write_c()\n        #     output = self.run_cli(token='a', branch='b', commit='c')\n        #     self.assertEqual(os.path.exists('hello.c.gcov'), True)\n        #     report = output['reports'].split('<<<<<< network\\n')[1].splitlines()\n        #     self.assertIn('hello.c.gcov', report[0])\n        # else:\n        #     self.skipTest(\"Skipped, works on Travis only.\")\n\n    def test_disable_detect(self):\n        self.set_env(JENKINS_URL='a', GIT_BRANCH='b', GIT_COMMIT='c', CODECOV_TOKEN='d')\n        self.fake_report()\n        try:\n            self.run_cli(disable='detect')\n        except AssertionError as e:\n            self.assertEqual(str(e), \"Commit sha is missing. Please specify via --commit=:sha\")\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_bowerrc_none(self):\n        with open(self.bowerrc, 'w+') as f:\n            f.write('{\"other_key\": \"tests\"}')\n        with open(self.filepath, 'w+') as f:\n            f.write('coverage data')\n        res = self.run_cli(**self.defaults)\n        self.assertIn('tests/test.py', res['reports'])\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_discovers(self):\n        with open(self.jacoco, 'w+') as f:\n            f.write('<jacoco></jacoco>')\n        with open(self.filepath, 'w+') as f:\n            f.write('coverage data')\n        res = self.run_cli(**self.defaults)\n        self.assertIn('coverage.xml', res['reports'])\n        self.assertIn('coverage data', res['reports'])\n        self.assertIn('jacoco.xml', res['reports'])\n        self.assertIn('<jacoco></jacoco>', res['reports'])\n\n    def test_not_jacoco(self):\n        with open(self.filepath, 'w+') as f:\n            f.write('<data>')\n        res = self.run_cli(file='tests/coverage.xml', **self.defaults)\n        res = res['reports'].split('<<<<<< network\\n')[1].splitlines()\n        self.assertEqual(res[0], '# path=tests/coverage.xml')\n        self.assertEqual(res[1], '<data>')\n\n    def test_run_coverage(self):\n        self.skipTest('Not sure how to pull off atm')\n        with open(self.coverage, 'w+') as f:\n            f.write(pickle.dumps())\n        res = self.run_cli(**self.defaults)\n        self.assertIn('<?xml version=\"1.0\" ?>', res['reports'])\n\n    def test_run_coverage_fails(self):\n        with open(self.coverage, 'w+') as f:\n            f.write('bad data')\n        try:\n            self.run_cli(**self.defaults)\n        except AssertionError as e:\n            self.assertEqual(str(e), 'No coverage report found')\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    def test_include_env(self):\n        self.set_env(HELLO='WORLD')\n        self.fake_report()\n        res = self.run_cli(env='HELLO', file=self.filepath, **self.defaults)\n        self.assertIn('HELLO=WORLD', res['reports'])\n\n    def test_none_found(self):\n        try:\n            self.run_cli(**self.defaults)\n        except AssertionError as e:\n            self.assertEqual(str(e), \"No coverage report found\")\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    @unittest.skipUnless(os.getenv('JENKINS_URL'), 'Skip Jenkins CI test')\n    def test_ci_jenkins(self):\n        self.set_env(BUILD_URL='https://....',\n                     JENKINS_URL='https://....',\n                     GIT_BRANCH='master',\n                     GIT_COMMIT='c739768fcac68144a3a6d82305b9c4106934d31a',\n                     BUILD_NUMBER='41',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'jenkins')\n        self.assertEqual(res['query']['commit'], 'c739768fcac68144a3a6d82305b9c4106934d31a')\n        self.assertEqual(res['query']['build'], '41')\n        self.assertEqual(res['query']['build_url'], 'https://....')\n        self.assertEqual(res['query']['pr'], '')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('JENKINS_URL'), 'Skip Jenkins CI test')\n    def test_ci_jenkins_env(self):\n        self.set_env(JENKINS_URL='https://....',\n                     BUILD_URL='https://....',\n                     ghprbSourceBranch='master',\n                     ghprbActualCommit='c739768fcac68144a3a6d82305b9c4106934d31a',\n                     ghprbPullId='1',\n                     BUILD_NUMBER='41',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'jenkins')\n        self.assertEqual(res['query']['commit'], 'c739768fcac68144a3a6d82305b9c4106934d31a')\n        self.assertEqual(res['query']['build'], '41')\n        self.assertEqual(res['query']['build_url'], 'https://....')\n        self.assertEqual(res['query']['pr'], '1')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('JENKINS_URL'), 'Skip Jenkins CI test')\n    def test_ci_jenkins_blue_ocean(self):\n        self.set_env(JENKINS_URL='https://....',\n                     BUILD_URL='https://....',\n                     BRANCH_NAME='master',\n                     CHANGE_ID='1',\n                     BUILD_NUMBER='41',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'jenkins')\n        self.assertEqual(res['query']['commit'], codecov.check_output((\"git\", \"rev-parse\", \"HEAD\")))\n        self.assertEqual(res['query']['build'], '41')\n        self.assertEqual(res['query']['build_url'], 'https://....')\n        self.assertEqual(res['query']['pr'], '1')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI') == 'true'\n                         and os.getenv('TRAVIS') == \"true\"\n                         and os.getenv('SHIPPABLE') != 'true',\n                         'Skip Travis CI test')\n    def test_ci_travis(self):\n        self.set_env(TRAVIS=\"true\",\n                     TRAVIS_BRANCH=\"master\",\n                     TRAVIS_COMMIT=\"c739768fcac68144a3a6d82305b9c4106934d31a\",\n                     TRAVIS_REPO_SLUG='owner/repo',\n                     TRAVIS_JOB_ID=\"33116958\",\n                     TRAVIS_TAG=\"v1.1.1\",\n                     TRAVIS_JOB_NUMBER=\"4.1\")\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'travis')\n        self.assertEqual(res['query']['commit'], 'c739768fcac68144a3a6d82305b9c4106934d31a')\n        self.assertEqual(res['query']['build'], '4.1')\n        self.assertEqual(res['query']['pr'], '')\n        self.assertEqual(res['query']['tag'], 'v1.1.1')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, '')\n\n    @unittest.skipUnless(os.getenv('CI') == 'true' and os.getenv('CI_NAME') == 'codeship', 'Skip Codeship CI test')\n    def test_ci_codeship(self):\n        self.set_env(CI_NAME='codeship',\n                     CI_BRANCH='master',\n                     CI_BUILD_NUMBER='20',\n                     CI_BUILD_URL='https://codeship.io/build/1',\n                     CI_COMMIT_ID='743b04806ea677403aa2ff26c6bdeb85005de658',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'codeship')\n        self.assertEqual(res['query']['commit'], '743b04806ea677403aa2ff26c6bdeb85005de658')\n        self.assertEqual(res['query']['build'], '20')\n        self.assertEqual(res['query']['build_url'], 'https://codeship.io/build/1')\n        self.assertEqual(res['query']['pr'], '')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI') == 'true' and os.getenv('CIRCLECI') == 'true', 'Skip Circle CI test')\n    def test_ci_circleci(self):\n        self.set_env(CIRCLECI='true',\n                     CIRCLE_BUILD_NUM='57',\n                     CIRCLE_NODE_INDEX='1',\n                     CIRCLE_PR_NUMBER='1',\n                     CIRCLE_BRANCH='master',\n                     CIRCLE_PROJECT_USERNAME='owner',\n                     CIRCLE_PROJECT_REPONAME='repo',\n                     CIRCLE_SHA1='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'circleci')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '57.1')\n        self.assertEqual(res['query']['pr'], '1')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['branch'], 'master')\n\n    @unittest.skipUnless(os.getenv('CI') == 'true' and os.getenv('BUILDKITE') == 'true', 'Skip BuildKit CI test')\n    def test_ci_buildkite(self):\n        self.set_env(CI='true',\n                     BUILDKITE='true',\n                     BUILDKITE_BUILD_NUMBER='57',\n                     BUILDKITE_JOB_ID='1',\n                     BUILDKITE_BRANCH='master',\n                     BUILDKITE_PROJECT_SLUG='owner/repo',\n                     BUILDKITE_COMMIT='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'buildkite')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '57.1')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI') == 'true' and os.getenv('SEMAPHORE') == 'true', 'Skip Semaphore CI test')\n    def test_ci_semaphore(self):\n        self.set_env(SEMAPHORE='true',\n                     BRANCH_NAME='master',\n                     SEMAPHORE_BUILD_NUMBER='10',\n                     SEMAPHORE_CURRENT_THREAD='1',\n                     SEMAPHORE_REPO_SLUG='owner/repo',\n                     REVISION='743b04806ea677403aa2ff26c6bdeb85005de658',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'semaphore')\n        self.assertEqual(res['query']['commit'], '743b04806ea677403aa2ff26c6bdeb85005de658')\n        self.assertEqual(res['query']['build'], '10.1')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['branch'], 'master')\n\n    @unittest.skipUnless(os.getenv('CI') == \"drone\" and os.getenv('DRONE') == \"true\", 'Skip Drone CI test')\n    def test_ci_drone(self):\n        self.set_env(CI='drone',\n                     DRONE='true',\n                     DRONE_BUILD_NUMBER='10',\n                     DRONE_BRANCH='master',\n                     DRONE_BUILD_LINK='https://drone.io/github/builds/1',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'drone.io')\n        self.assertEqual(res['query']['commit'], codecov.check_output((\"git\", \"rev-parse\", \"HEAD\")))\n        self.assertEqual(res['query']['build'], '10')\n        self.assertEqual(res['query']['build_url'], 'https://drone.io/github/builds/1')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('SHIPPABLE') == \"true\", 'Skip Shippable CI test')\n    def test_ci_shippable(self):\n        self.set_env(SHIPPABLE='true',\n                     BUILD_NUMBER='10',\n                     REPO_NAME='owner/repo',\n                     BRANCH='master',\n                     BUILD_URL='https://shippable.com/...',\n                     COMMIT='743b04806ea677403aa2ff26c6bdeb85005de658',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'shippable')\n        self.assertEqual(res['query']['commit'], '743b04806ea677403aa2ff26c6bdeb85005de658')\n        self.assertEqual(res['query']['build'], '10')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['build_url'], 'https://shippable.com/...')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    # @unittest.skipUnless(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    @unittest.skip('Skip AppVeyor test')\n    def test_ci_appveyor(self):\n        self.set_env(APPVEYOR='True',\n                     CI='True',\n                     APPVEYOR_JOB_ID='9r2qufuu8',\n                     APPVEYOR_BUILD_VERSION='1.2.3',\n                     APPVEYOR_ACCOUNT_NAME='owner',\n                     APPVEYOR_PROJECT_SLUG='repo',\n                     APPVEYOR_PULL_REQUEST_NUMBER='1',\n                     APPVEYOR_REPO_BRANCH='master',\n                     APPVEYOR_REPO_NAME='owner/repo',\n                     APPVEYOR_REPO_COMMIT='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli(file=self.filepath)\n        self.assertEqual(res['query']['service'], 'appveyor')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['job'], 'owner/repo/1.2.3')\n        self.assertEqual(res['query']['build'], '9r2qufuu8')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['pr'], '1')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI') == \"true\" and os.getenv('WERCKER_GIT_BRANCH'), 'Skip Wercker CI test')\n    def test_ci_wercker(self):\n        self.set_env(WERCKER_GIT_BRANCH='master',\n                     WERCKER_MAIN_PIPELINE_STARTED='1399372237',\n                     WERCKER_GIT_OWNER='owner',\n                     WERCKER_GIT_REPOSITORY='repo',\n                     WERCKER_GIT_COMMIT='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'wercker')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '1399372237')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI') == \"true\" and os.getenv('MAGNUM') == 'true', 'Skip Magnum CI test')\n    def test_ci_magnum(self):\n        self.set_env(CI_BRANCH='master',\n                     CI_BUILD_NUMBER='1399372237',\n                     MAGNUM='true',\n                     CI='true',\n                     CI_COMMIT='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'magnum')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '1399372237')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI_SERVER_NAME', '').startswith(\"GitLab\"), 'Skip GitLab CI test')\n    def test_ci_gitlab(self):\n        self.set_env(CI_BUILD_REF_NAME='master',\n                     CI_BUILD_ID='1399372237',\n                     CI_BUILD_REPO='https://gitlab.com/owner/repo.git',\n                     CI_SERVER_NAME='GitLab CI',\n                     CI_BUILD_REF='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                     HOME='/',\n                     CI_PROJECT_DIR=os.getcwd().strip('/'),\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'gitlab')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '1399372237')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skip('Skip CI None')\n    def test_ci_none(self):\n        self.set_env(CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli(build=10,\n                           commit='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                           slug='owner/repo',\n                           token='token')\n        self.assertEqual(res['query'].get('service'), None)\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '10')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['codecov'].token, 'token')\n"], "fixing_code": ["#!/usr/bin/python\n\nimport os\nimport re\nimport sys\nimport glob\nimport requests\nimport argparse\nfrom time import sleep\nfrom json import loads\n\ntry:\n    from urllib.parse import urlencode\nexcept ImportError:  # pragma: no cover\n    from urllib import urlencode\n\ntry:\n    from shlex import quote\nexcept ImportError: # pragma: no cover\n    from pipes import quote\n\nimport subprocess\n\n# https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning\nimport logging\nlogging.captureWarnings(True)\n\n\nversion = VERSION = __version__ = '2.0.15'\n\nCOLOR = True\n\nis_merge_commit = re.compile(r'^Merge\\s\\w{40}\\sinto\\s\\w{40}$')\n\nremove_token = re.compile(r'token=[^\\&]+').sub\n\ndef sanitize_arg(replacement, arg):\n    return re.sub(r'[\\&]+', replacement, arg, 0, re.MULTILINE)\n\n\nignored_path = re.compile(r'(/vendor)|'\n                          r'(/js/generated/coverage)|'\n                          r'(/__pycache__)|'\n                          r'(/coverage/instrumented)|'\n                          r'(/build/lib)|'\n                          r'(/htmlcov)|'\n                          r'(/node_modules)|'\n                          r'(/\\.yarn-cache)|'\n                          r'(\\.egg-info)|'\n                          r'(/\\.git)|'\n                          r'(/\\.hg)|'\n                          r'(/\\.tox)|'\n                          r'(/\\.?v?(irtual)?envs?)', re.I).search\n\nignored_report = re.compile('.*('\n                            r'(/\\.coverage.*)|'\n                            r'(\\.coveragerc)|'\n                            r'(\\.egg)|'\n                            r'(\\.gif)|'\n                            r'(\\.ini)|'\n                            r'(\\.less)|'\n                            r'(\\.jpeg)|'\n                            r'(\\.jpg)|'\n                            r'(\\.md)|'\n                            r'(\\.png)|'\n                            r'(\\.p?sql)|'\n                            r'(\\.whl)|'\n                            r'(\\.cpp)|'\n                            r'(\\.pyc?)|'\n                            r'(\\.cfg)|'\n                            r'(\\.class)|'\n                            r'(\\.js)|'\n                            r'(\\.html)|'\n                            r'(\\.sh)|'\n                            r'(\\.tar\\.gz)|'\n                            r'(\\.yml)|'\n                            r'(\\.xcconfig)|'\n                            r'(\\.data)|'\n                            r'(coverage\\.db)|'\n                            r'(\\.?codecov\\.yml)|'\n                            r'(coverage\\.jade)|'\n                            r'(include\\.lst)|'\n                            r'(inputFiles\\.lst)|'\n                            r'(createdFiles\\.lst)|'\n                            r'(scoverage\\.measurements\\..*)|'\n                            r'(test_.*_coverage\\.txt)|'\n                            r'(conftest_.*\\.c\\.gcov)'\n                            ')$', re.I).match\n\nis_report = re.compile('.*('\n                       r'([^/]*coverage[^/]*)|'\n                       r'(\\.gcov)|'\n                       r'(\\.lcov)|'\n                       r'(\\.lst)|'\n                       r'(clover\\.xml)|'\n                       r'(cobertura\\.xml)|'\n                       r'(coverage-final\\.json)|'\n                       r'(coverage-summary\\.json)|'\n                       r'(gcov\\.info)|'\n                       r'(([^/]*\\.)?codecov\\.[^/]*)|'\n                       r'(jacoco[^/]*\\.xml)|'\n                       r'(lcov\\.info)|'\n                       r'(luacov\\.report\\.out)|'\n                       r'(nosetests\\.xml)|'\n                       r'(report\\.xml)'\n                       ')$', re.I).match\n\nopj = os.path.join  # for faster access\n\n\ndef write(text, color=None):\n    global COLOR\n    if COLOR:\n        text = text.replace('==>', '\\033[90m==>\\033[0m')\n        text = text.replace('    +', '    \\033[32m+\\033[0m')\n        text = text.replace('XX>', '\\033[31mXX>\\033[0m')\n        if text[:6] == 'Error:':\n            text = '\\033[41mError:\\033[0m\\033[91m%s\\033[0m' % text[6:]\n        elif text[:4] == 'Tip:':\n            text = '\\033[42mTip:\\033[0m\\033[32m%s\\033[0m' % text[4:]\n        elif text.strip()[:4] == 'http':\n            text = '\\033[92m%s\\033[0m' % text\n        elif text[:7] == 'Codecov':\n            text = \"\"\"\n      _____          _\n     / ____|        | |\n    | |     ___   __| | ___  ___ _____   __\n    | |    / _ \\ / _  |/ _ \\/ __/ _ \\ \\ / /\n    | |___| (_) | (_| |  __/ (_| (_) \\ V /\n     \\_____\\___/ \\____|\\___|\\___\\___/ \\_/\n                                    %s\\n\"\"\" % text.split(' ')[1]\n        elif color == 'red':\n            text = '\\033[91m%s\\033[0m' % text\n        elif color == 'green':\n            text = '\\033[92m%s\\033[0m' % text\n\n    sys.stdout.write(text + '\\n')\n\n\ndef fopen(path):\n    try:\n        if sys.version_info < (3, 0):\n            with open(path, 'r') as f:\n                return f.read()\n        else:\n            try:\n                with open(path, 'r', encoding='utf-8') as f:\n                    return f.read()\n            except UnicodeDecodeError:\n                with open(path, 'r', encoding='ISO-8859-1') as f:\n                    return f.read()\n    except Exception as e:\n        # on none of that works. just print the issue and continue\n        write('    - Ignored: ' + str(e))\n\n\ndef read(filepath):\n    try:\n        report = fopen(filepath)\n        if report is None:\n            return\n        write('    + %s bytes=%d' % (filepath, os.path.getsize(filepath)))\n        return '# path=' + filepath + '\\n' + report\n    except Exception as e:\n        # Ex: No such file or directory, skip them\n        write('    - Ignored: ' + str(e))\n\n\ndef check_output(cmd, **popen_args):\n    from subprocess import Popen, PIPE, CalledProcessError\n    process = Popen(cmd, stdout=PIPE, **popen_args)\n    output, _ = process.communicate()\n    if process.returncode:\n        raise CalledProcessError(process.returncode, cmd)\n    else:\n        assert process.returncode == 0\n        return output.decode('utf-8')\n\n\ndef try_to_run(cmd, shell=True):\n    try:\n        return check_output(cmd, shell=shell)\n    except subprocess.CalledProcessError as e:\n        write('    Error running `%s`: %s' % (cmd, e.output or str(e)))\n\ndef run_python_coverage(args):\n    \"\"\"Run the Python coverage tool\n    \n    If it's importable in this Python, launch it using 'python -m'.\n    Otherwise, look it up on PATH like any other command.\n    \"\"\"\n    try:\n        import coverage\n    except ImportError:\n        # Coverage is not installed on this Python. Hope it's on PATH.\n        try_to_run(['coverage'] + args, shell=False)\n    else:\n        # Coverage is installed on this Python. Run it as a module.\n        try_to_run([sys.executable, '-m', 'coverage'] + args, shell=False)\n\ndef remove_non_ascii(data):\n    try:\n        return data.decode('utf8') + ''\n    except:\n        return ''.join([i if ord(i) < 128 else '' for i in data])\n\n\ndef _add_env_if_not_empty(lst, value):\n    if os.getenv(value) is not None:\n        lst.add(value)\n\n\ndef main(*argv, **kwargs):\n    root = os.getcwd()\n\n    # Build Parser\n    # ------------\n    parser = argparse.ArgumentParser(prog='codecov', add_help=True,\n                                     formatter_class=argparse.RawDescriptionHelpFormatter,\n                                     epilog=\"\"\"Upload reports to Codecov\"\"\")\n    basics = parser.add_argument_group('======================== Basics ========================')\n    basics.add_argument('--version', action='version', version='Codecov py-v'+version+\" - https://codecov.io/\")\n    basics.add_argument('--token', '-t', default=os.getenv(\"CODECOV_TOKEN\"), help=\"Private repository token or @filename for file containing the token. Defaults to $CODECOV_TOKEN. Not required for public repositories on Travis CI, CircleCI and AppVeyor\")\n    basics.add_argument('--file', '-f', nargs=\"*\", default=None, help=\"Target a specific file for uploading\")\n    basics.add_argument('--flags', '-F', nargs=\"*\", default=None, help=\"Flag these uploaded files with custom labels\")\n    basics.add_argument('--env', '-e', nargs=\"*\", default=None, help=\"Store environment variables to help distinguish CI builds.\")\n    basics.add_argument('--required', action=\"store_true\", default=False, help=\"If Codecov fails it will exit 1 - possibly failing the CI build.\")\n    basics.add_argument('--name', '-n', default=None, help=\"Custom defined name of the upload. Visible in Codecov UI.\")\n\n    gcov = parser.add_argument_group('======================== gcov ========================')\n    gcov.add_argument('--gcov-root', default=None, help=\"Project root directory when preparing gcov\")\n    gcov.add_argument('--gcov-glob', nargs=\"*\", default=[], help=\"Paths to ignore during gcov gathering\")\n    gcov.add_argument('--gcov-exec', default='gcov', help=\"gcov executable to run. Defaults to 'gcov'\")\n    gcov.add_argument('--gcov-args', default='', help=\"extra arguments to pass to gcov\")\n\n    advanced = parser.add_argument_group('======================== Advanced ========================')\n    advanced.add_argument('-X', '--disable', nargs=\"*\", default=[], help=\"Disable features. Accepting **search** to disable crawling through directories, **detect** to disable detecting CI provider, **gcov** disable gcov commands, `pycov` disables running python `coverage xml`, **fix** to disable report adjustments https://docs.codecov.io/docs/fixing-reports\")\n    advanced.add_argument('--root', default=None, help=\"Project directory. Default: current direcory or provided in CI environment variables\")\n    advanced.add_argument('--commit', '-c', default=None, help=\"Commit SHA, set automatically\")\n    advanced.add_argument('--prefix', '-P', default=None, help=\"Prefix network paths to help resolve paths: https://github.com/codecov/support/issues/472\")\n    advanced.add_argument('--branch', '-b', default=None, help=\"Branch name\")\n    advanced.add_argument('--build', default=None, help=\"Specify a custom build number to distinguish CI jobs, provided automatically for supported CI companies\")\n    advanced.add_argument('--pr', default=None, help=\"Specify a custom pr number, provided automatically for supported CI companies\")\n    advanced.add_argument('--tag', default=None, help=\"Git tag\")\n\n    enterprise = parser.add_argument_group('======================== Enterprise ========================')\n    enterprise.add_argument('--slug', '-r', default=os.getenv(\"CODECOV_SLUG\"), help=\"Specify repository slug for Enterprise ex. owner/repo\")\n    enterprise.add_argument('--url', '-u', default=os.getenv(\"CODECOV_URL\", \"https://codecov.io\"), help=\"Your Codecov endpoint\")\n    enterprise.add_argument('--cacert', default=os.getenv(\"CODECOV_CACERT\", os.getenv(\"CURL_CA_BUNDLE\")), help=\"Certificate pem bundle used to verify with your Codecov instance\")\n\n    debugging = parser.add_argument_group('======================== Debugging ========================')\n    debugging.add_argument('--dump', action=\"store_true\", help=\"Dump collected data and do not send to Codecov\")\n    debugging.add_argument('-v', '--verbose', action=\"store_true\", help=\"Be verbose, e.g. dump the collected data\")\n    debugging.add_argument('--no-color', action=\"store_true\", help=\"Do not output with color\")\n\n    # Parse Arguments\n    # ---------------\n    if argv:\n        codecov = parser.parse_args(argv)\n    else:\n        codecov = parser.parse_args()\n\n    global COLOR\n    COLOR = not codecov.no_color\n\n    include_env = set()\n\n    # add from cli\n    if codecov.env:\n        # -e VAR1,VAR2 or -e VAR1 -e VAR2\n        for env in codecov.env:\n            for e in env.split(','):\n                include_env.add(e.strip())\n\n    # add from env\n    if os.getenv(\"CODECOV_ENV\"):\n        for env in os.getenv(\"CODECOV_ENV\").split(','):\n            include_env.add(env.strip())\n\n    write('Codecov v'+version)\n    query = dict(commit='', branch='', job='', pr='', build_url='',\n                 token=codecov.token)\n    language = None\n\n    if os.getenv('TOXENV'):\n        _add_env_if_not_empty(include_env, 'TOXENV')\n\n    # Detect CI\n    # ---------\n    if 'detect' in codecov.disable:\n        write('XX> Detecting CI provider disabled.')\n\n    else:\n        write('==> Detecting CI provider')\n        # -------\n        # Jenkins\n        # -------\n        if os.getenv('JENKINS_URL'):\n            # https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project\n            # https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin#GitHubpullrequestbuilderplugin-EnvironmentVariables\n            query.update(dict(branch=os.getenv('ghprbSourceBranch') or os.getenv('GIT_BRANCH') or os.getenv('BRANCH_NAME'),\n                              service='jenkins',\n                              commit=os.getenv('ghprbActualCommit') or os.getenv('GIT_COMMIT'),\n                              pr=os.getenv('ghprbPullId') or os.getenv('CHANGE_ID'),\n                              build=os.getenv('BUILD_NUMBER'),\n                              build_url=os.getenv('BUILD_URL')))\n            root = os.getenv('WORKSPACE') or root\n            write('    Jenkins Detected')\n\n        # ---------\n        # Travis CI\n        # ---------\n        elif os.getenv('CI') == 'true' and os.getenv('TRAVIS') == \"true\" and os.getenv('SHIPPABLE') != 'true':\n            # http://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables\n            query.update(dict(branch=os.getenv('TRAVIS_BRANCH'),\n                              service='travis',\n                              build=os.getenv('TRAVIS_JOB_NUMBER'),\n                              pr=os.getenv('TRAVIS_PULL_REQUEST'),\n                              job=os.getenv('TRAVIS_JOB_ID'),\n                              tag=os.getenv('TRAVIS_TAG'),\n                              slug=os.getenv('TRAVIS_REPO_SLUG'),\n                              commit=os.getenv('TRAVIS_COMMIT')))\n            root = os.getenv('TRAVIS_BUILD_DIR') or root\n            write('    Travis Detected')\n            language = (list(filter(lambda l: os.getenv('TRAVIS_%s_VERSION' % l.upper()),\n                                    ('dart', 'go', 'haxe', 'jdk', 'julia', 'node', 'otp', 'xcode',\n                                     'perl', 'php', 'python', 'r', 'ruby', 'rust', 'scala'))) + [''])[0]\n\n            _add_env_if_not_empty(include_env, 'TRAVIS_OS_NAME')\n            if language:\n                _add_env_if_not_empty(include_env, 'TRAVIS_%s_VERSION' % language.upper())\n\n        # --------\n        # Codeship\n        # --------\n        elif os.getenv('CI') == 'true' and os.getenv('CI_NAME') == 'codeship':\n            # https://www.codeship.io/documentation/continuous-integration/set-environment-variables/\n            query.update(dict(branch=os.getenv('CI_BRANCH'),\n                              service='codeship',\n                              build=os.getenv('CI_BUILD_NUMBER'),\n                              build_url=os.getenv('CI_BUILD_URL'),\n                              commit=os.getenv('CI_COMMIT_ID')))\n            write('    Codeship Detected')\n\n        # ---------\n        # Buildkite\n        # ---------\n        elif os.getenv('CI') == 'true' and os.getenv('BUILDKITE') == 'true':\n            # https://buildkite.com/docs/guides/environment-variables\n            query.update(dict(branch=os.getenv('BUILDKITE_BRANCH'),\n                              service='buildkite',\n                              build=os.getenv('BUILDKITE_BUILD_NUMBER') + '.' + os.getenv('BUILDKITE_JOB_ID'),\n                              slug=os.getenv('BUILDKITE_PROJECT_SLUG'),\n                              build_url=os.getenv('BUILDKITE_BUILD_URL'),\n                              commit=os.getenv('BUILDKITE_COMMIT')))\n            write('    Buildkite Detected')\n\n        # ---------\n        # Circle CI\n        # ---------\n        elif os.getenv('CI') == 'true' and os.getenv('CIRCLECI') == 'true':\n            # https://circleci.com/docs/environment-variables\n            query.update(dict(branch=os.getenv('CIRCLE_BRANCH'),\n                              service='circleci',\n                              build=os.getenv('CIRCLE_BUILD_NUM') + \".\" + os.getenv('CIRCLE_NODE_INDEX'),\n                              job=os.getenv('CIRCLE_BUILD_NUM') + \".\" + os.getenv('CIRCLE_NODE_INDEX'),\n                              pr=os.getenv('CIRCLE_PR_NUMBER'),\n                              slug=os.getenv('CIRCLE_PROJECT_USERNAME') + \"/\" + os.getenv('CIRCLE_PROJECT_REPONAME'),\n                              commit=os.getenv('CIRCLE_SHA1')))\n            write('    Circle CI Detected')\n\n        # ---------\n        # Semaphore\n        # ---------\n        elif os.getenv('CI') == 'true' and os.getenv('SEMAPHORE') == 'true':\n            # https://semaphoreapp.com/docs/available-environment-variables.html\n            query.update(dict(branch=os.getenv('BRANCH_NAME'),\n                              service='semaphore',\n                              build=os.getenv('SEMAPHORE_BUILD_NUMBER') + '.' + os.getenv('SEMAPHORE_CURRENT_THREAD'),\n                              slug=os.getenv('SEMAPHORE_REPO_SLUG'),\n                              commit=os.getenv('REVISION')))\n            write('    Semaphore Detected')\n\n        # ----------\n        # Greenhouse\n        # ----------\n        elif os.getenv('GREENHOUSE') == 'true':\n            # http://docs.greenhouseci.com/docs/environment-variables-files\n            query.update(dict(branch=os.getenv('GREENHOUSE_BRANCH'),\n                              service='greenhouse',\n                              build=os.getenv('GREENHOUSE_BUILD_NUMBER'),\n                              build_url=os.getenv('GREENHOUSE_BUILD_URL'),\n                              pr=os.getenv('GREENHOUSE_PULL_REQUEST'),\n                              commit=os.getenv('GREENHOUSE_COMMIT')))\n            write('    Greenhouse Detected')\n\n        # --------\n        # drone.io\n        # --------\n        elif os.getenv('CI') == \"drone\" and os.getenv('DRONE') == \"true\":\n            # http://docs.drone.io/env.html\n            query.update(dict(branch=os.getenv('DRONE_BRANCH'),\n                              service='drone.io',\n                              build=os.getenv('DRONE_BUILD_NUMBER'),\n                              build_url=os.getenv('DRONE_BUILD_LINK')))\n            root = os.getenv('DRONE_BUILD_DIR') or root\n            write('    Drone Detected')\n\n        # --------\n        # TeamCity\n        # --------\n        elif os.getenv('TEAMCITY_VERSION'):\n            # https://confluence.jetbrains.com/plugins/servlet/mobile#content/view/74847298\n            query.update(dict(service='teamcity',\n                              build=os.getenv('BUILD_NUMBER'),\n                              commit=os.getenv('BUILD_VCS_NUMBER')))\n            write('    TeamCity CI Detected')\n\n        # --------\n        # AppVeyor\n        # --------\n        elif os.getenv('CI', 'false').lower() == 'true' and os.getenv('APPVEYOR', 'false').lower() == 'true':\n            # http://www.appveyor.com/docs/environment-variables\n            query.update(dict(branch=os.getenv('APPVEYOR_REPO_BRANCH'),\n                              service=\"appveyor\",\n                              job='/'.join((os.getenv('APPVEYOR_ACCOUNT_NAME'), os.getenv('APPVEYOR_PROJECT_SLUG'), os.getenv('APPVEYOR_BUILD_VERSION'))),\n                              build=os.getenv('APPVEYOR_JOB_ID'),\n                              pr=os.getenv('APPVEYOR_PULL_REQUEST_NUMBER'),\n                              slug=os.getenv('APPVEYOR_REPO_NAME'),\n                              commit=os.getenv('APPVEYOR_REPO_COMMIT')))\n            write('    AppVeyor Detected')\n            codecov.disable.append('search')\n\n        # -------\n        # Wercker\n        # -------\n        elif os.getenv('CI') == \"true\" and os.getenv('WERCKER_GIT_BRANCH'):\n            # http://devcenter.wercker.com/articles/steps/variables.html\n            query.update(dict(branch=os.getenv('WERCKER_GIT_BRANCH'),\n                              service=\"wercker\",\n                              build=os.getenv('WERCKER_MAIN_PIPELINE_STARTED'),\n                              slug=os.getenv('WERCKER_GIT_OWNER') + '/' + os.getenv('WERCKER_GIT_REPOSITORY'),\n                              commit=os.getenv('WERCKER_GIT_COMMIT')))\n            write('    Wercker Detected')\n\n        # ------\n        # Magnum\n        # ------\n        elif os.getenv('CI') == \"true\" and os.getenv('MAGNUM') == 'true':\n            # https://magnum-ci.com/docs/environment\n            query.update(dict(service=\"magnum\",\n                              branch=os.getenv('CI_BRANCH'),\n                              build=os.getenv('CI_BUILD_NUMBER'),\n                              commit=os.getenv('CI_COMMIT')))\n            write('    Magnum Detected')\n\n        # ---------\n        # Shippable\n        # ---------\n        elif os.getenv('SHIPPABLE') == \"true\":\n            # http://docs.shippable.com/en/latest/config.html#common-environment-variables\n            query.update(dict(branch=os.getenv('BRANCH'),\n                              service='shippable',\n                              build=os.getenv('BUILD_NUMBER'),\n                              build_url=os.getenv('BUILD_URL'),\n                              pr=os.getenv('PULL_REQUEST'),\n                              slug=os.getenv('REPO_NAME'),\n                              commit=os.getenv('COMMIT')))\n            write('    Shippable Detected')\n\n        # ---------\n        # Gitlab CI\n        # ---------\n        elif os.getenv('CI_SERVER_NAME', '').startswith(\"GitLab\"):\n            # http://doc.gitlab.com/ci/examples/README.html#environmental-variables\n            # https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/lib/build.rb#L96\n            query.update(dict(service='gitlab',\n                              branch=os.getenv('CI_BUILD_REF_NAME'),\n                              build=os.getenv('CI_BUILD_ID'),\n                              commit=os.getenv('CI_BUILD_REF')))\n            if os.getenv('CI_PROJECT_DIR', '').startswith('/'):\n                root = os.getenv('CI_PROJECT_DIR')\n            else:\n                root = os.getenv('HOME') + '/' + os.getenv('CI_PROJECT_DIR', '')\n\n            if os.getenv('CI_BUILD_REPO'):\n                query['slug'] = os.getenv('CI_BUILD_REPO').split('/', 3)[-1].replace('.git', '')\n            elif os.getenv('CI_REPOSITORY_URL'):\n                query['slug'] = os.getenv('CI_REPOSITORY_URL').split('/', 3)[-1].replace('.git', '')\n\n            write('    Gitlab CI Detected')\n\n        else:\n            query.update(dict(commit=os.getenv('VCS_COMMIT_ID', ''),\n                              branch=os.getenv('VCS_BRANCH_NAME', ''),\n                              pr=os.getenv('VCS_PULL_REQUEST', ''),\n                              slug=os.getenv('VCS_SLUG', ''),\n                              build_url=os.getenv('CI_BUILD_URL', ''),\n                              build=os.getenv('CI_BUILD_ID', '')))\n\n        # ------\n        # git/hg\n        # ------\n        if not query.get('branch'):\n            try:\n                # find branch, commit, repo from git command\n                branch = try_to_run('git rev-parse --abbrev-ref HEAD || hg branch')\n                query['branch'] = branch if branch != 'HEAD' else ''\n                write('  -> Got branch from git/hg')\n\n            except:\n                write('  x> Failed to get branch from git/hg')\n\n        if not query.get('commit'):\n            try:\n                query['commit'] = try_to_run(\"git rev-parse HEAD || hg id -i --debug | tr -d '+'\")\n                write('  -> Got sha from git/hg')\n\n            except:  # pragma: no cover\n                write('  x> Failed to get sha from git/hg')\n\n    # Update Query\n    # ------------\n    if codecov.name:\n        query['name'] = codecov.name\n\n    if codecov.flags:\n        query['flags'] = ','.join(codecov.flags)\n\n    if codecov.build:\n        query['build'] = codecov.build\n\n    if codecov.pr:\n        query['pr'] = codecov.pr\n\n    if codecov.commit:\n        query['commit'] = codecov.commit\n\n    elif query['pr'] and query['pr'] != 'false':\n        # Merge Commits\n        # -------------\n        res = try_to_run('git log -1 --pretty=%B')\n        if res and is_merge_commit.match(res.strip()):\n            query['commit'] = res.split(' ')[1]\n            write('    Fixing merge commit SHA')\n\n    if codecov.slug:\n        query['slug'] = codecov.slug\n\n    if codecov.branch:\n        query['branch'] = codecov.branch\n\n    if codecov.tag:\n        query['tag'] = codecov.tag\n\n    if codecov.root:\n        root = codecov.root\n\n    root = quote(root)\n\n    # Upload\n    # ------\n    try:\n        write('==> Preparing upload')\n\n        # Read token from file\n        # --------------------\n        if query.get('token') and query.get('token')[0] == '@':\n            write('    Reading token from file')\n            query['token'] = fopen(opj(os.getcwd(), query['token'][1:])).strip()\n\n        assert query.get('commit') not in ('', None), \"Commit sha is missing. Please specify via --commit=:sha\"\n\n        # Build TOC\n        # ---------\n        toc = str((try_to_run('cd %s && git ls-files' % root) or\n                   try_to_run('git ls-files') or\n                   try_to_run('cd %s && hg locate' % root) or\n                   try_to_run('hg locate') or '').strip())\n\n        if codecov.prefix:\n            prefix = codecov.prefix.strip('/')\n            toc = '{}/{}'.format(\n                prefix,\n                toc.replace('\\n', '\\n{}/'.format(prefix))\n            )\n\n        # Detect codecov.yml location\n        yaml_location = re.search(\n            r'\\.?codecov\\.ya?ml$',\n            toc,\n            re.M\n        )\n        if yaml_location:\n            yaml_location = yaml_location.group()\n            yaml_path = opj(root, yaml_location)\n            if os.path.exists(yaml_path):\n                query['yaml'] = yaml_location\n                yaml = fopen(yaml_path)\n                _token = re.search(\n                    r'token: (\\'|\\\")?([0-9a-f]{8}(-?[0-9a-f]{4}){3}-?[0-9a-f]{12})',\n                    yaml,\n                    re.M\n                )\n                if _token:\n                    query['token'] = _token.groups()[1]\n\n                _slug = re.search(\n                    r'slug: (\\'|\\\")?([\\w\\-\\.\\+]+\\/[\\w\\-\\.\\+]+)',\n                    yaml,\n                    re.M\n                )\n                if _slug:\n                    query['slug'] = _slug.groups()[1]\n\n        assert query.get('job') or query.get('token'), \"Missing repository upload token\"\n\n        # Processing gcov\n        # ---------------\n        if 'gcov' in codecov.disable:\n            write('XX> Skip processing gcov')\n\n        else:\n            dont_search_here = (\n                \"-not -path './bower_components/**' \"\n                \"-not -path './node_modules/**' \"\n                \"-not -path './vendor/**'\"\n            )\n            write('==> Processing gcov (disable by -X gcov)')\n            cmd = \"find %s %s -type f -name '*.gcno' %s -exec %s -pb %s {} +\" % (\n                  (sanitize_arg('', codecov.gcov_root or root)),\n                  dont_search_here,\n                  \" \".join(map(lambda a: \"-not -path '%s'\" % a, codecov.gcov_glob)),\n                  (sanitize_arg('', codecov.gcov_exec or '')),\n                  (sanitize_arg('', codecov.gcov_args or '')))\n            write('    Executing gcov (%s)' % cmd)\n            try_to_run(cmd)\n\n        # Collect Reports\n        # ---------------\n        write('==> Collecting reports')\n        reports = []\n\n        if 'search' in codecov.disable:\n            write('XX> Searching for reports disabled')\n        else:\n\n            # Detect .bowerrc\n            # ---------------\n            bower_components = '/bower_components'\n            bowerrc = opj(root, '.bowerrc')\n            if os.path.exists(bowerrc):\n                write('    Detecting .bowerrc file')\n                try:\n                    bower_components = '/' + (loads(fopen(bowerrc)).get('directory') or 'bower_components').replace('./', '').strip('/')\n                    write('    .bowerrc detected, ignoring ' + bower_components)\n                except Exception as e:\n                    write('    .bowerrc parsing error: ' + str(e))\n\n            # Find reports\n            # ------------\n            for _root, dirs, files in os.walk(root):\n                # need to replace('\\\\', '/') for Windows\n                if not ignored_path(_root.replace('\\\\', '/')) and bower_components not in _root.replace('\\\\', '/'):\n                    # add data to tboc\n                    for filepath in files:\n                        fullpath = opj(_root, filepath)\n                        if not codecov.file and is_report(fullpath.replace('\\\\', '/')) and not ignored_report(fullpath.replace('\\\\', '/')):\n                            # found report\n                            reports.append(read(fullpath))\n\n        # Read Reports\n        # ------------\n        if codecov.file:\n            write('    Targeting specific files')\n            reports.extend(filter(bool, map(read, codecov.file)))\n\n        elif 'pycov' not in codecov.disable:\n            # Call `coverage xml` when .coverage exists\n            # -----------------------------------------\n            # Ran from current directory\n            if glob.glob(opj(os.getcwd(), '.coverage.*')):\n                write('    Merging coverage reports')\n                # The `-a` option is mandatory here. If we\n                # have a `.coverage` in the current directory, calling\n                # without the option would delete the previous data\n                run_python_coverage(['combine', '-a'])\n\n            if os.path.exists(opj(os.getcwd(), '.coverage')) and not os.path.exists(opj(os.getcwd(), 'coverage.xml')):\n                write('    Generating coverage xml reports for Python')\n                # using `-i` to ignore \"No source for code\" error\n                run_python_coverage(['xml', '-i'])\n                reports.append(read(opj(os.getcwd(), 'coverage.xml')))\n\n        reports = list(filter(bool, reports))\n        assert len(reports) > 0, \"No coverage report found\"\n\n        # Storing Environment\n        # -------------------\n        env = ''\n        if include_env:\n            write('==> Appending environment variables')\n            for k in include_env:\n                if k:\n                    write('    + ' + k)\n\n            env = '\\n'.join([\"%s=%s\" % (k, os.getenv(k, '')) for k in include_env if k]) + '\\n<<<<<< ENV'\n\n        # join reports together\n        reports = '\\n'.join((env, (toc or ''), '<<<<<< network',\n                             '\\n<<<<<< EOF\\n'.join(reports),\n                             '<<<<<< EOF'))\n\n        query['package'] = \"py\" + VERSION\n        urlargs = (urlencode(dict([(k, v.strip()) for k, v in query.items() if v not in ('', None)]))).replace(\"+\", \"%20\")\n\n        result = ''\n        if codecov.dump:\n            write('-------------------- Debug --------------------')\n            write('    .url ' + codecov.url)\n            write('    .query ' + remove_token('token=<secret>', urlargs))\n            write(reports)\n            write('--------------------  EOF  --------------------')\n        else:\n            write('==> Uploading')\n            write('    .url ' + codecov.url)\n            write('    .query ' + remove_token('token=<secret>', urlargs))\n            if codecov.verbose:\n                write('-------------------- Reports --------------------')\n                write(reports)\n                write('-------------------------------------------------')\n\n            s3 = None\n            trys = 0\n            while trys < 3:\n                trys += 1\n                if 's3' not in codecov.disable:\n                    try:\n                        write('    Pinging Codecov...')\n                        res = requests.post('%s/upload/v4?%s' % (codecov.url, urlargs),\n                                            verify=codecov.cacert,\n                                            headers={'Accept': 'text/plain',\n                                                     'X-Reduced-Redundancy': 'false'})\n                        if res.status_code in (400, 406):\n                            raise Exception(res.text)\n\n                        elif res.status_code < 500:\n                            assert res.status_code == 200\n                            res = res.text.strip().split()\n                            result, upload_url = res[0], res[1]\n\n                            # Handle reports encoding for Python 2 and 3\n                            if not isinstance(reports, bytes):\n                                reports = reports.encode('utf-8')\n\n                            write('    Uploading to S3...')\n                            s3 = requests.put(upload_url, data=reports,\n                                              headers={'Content-Type': 'text/plain',\n                                                       'x-amz-acl': 'public-read'})\n                            s3.raise_for_status()\n                            assert s3.status_code == 200\n                            write('    ' + result)\n                            break\n                        else:\n                            # try again\n                            continue\n\n                    except AssertionError:\n                        write('    Direct to s3 failed. Using backup v2 endpoint.')\n\n                write('    Uploading to Codecov...')\n                # just incase, try traditional upload\n                res = requests.post('%s/upload/v2?%s' % (codecov.url, urlargs),\n                                    verify=codecov.cacert,\n                                    data='\\n'.join((reports, s3.reason if s3 else '', s3.text if s3 else '')),\n                                    headers={\"Accept\": \"text/plain\"})\n                if res.status_code < 500:\n                    write('    ' + res.text)\n                    res.raise_for_status()\n                    result = res.text\n                    return\n\n                write('    Retrying... in %ds' % (trys * 30))\n                sleep(trys * 30)\n\n    except Exception as e:\n        write('Error: ' + str(e))\n        if kwargs.get('debug'):\n            raise\n\n        write('')\n        # detect language\n        if language:\n            write('Tip: See an example %s repo: https://github.com/codecov/example-%s' % (language, language))\n        else:\n            write('Tip: See all example repositories: https://github.com/codecov?query=example')\n\n        write('Support channels:', 'green')\n        write('  Email:   hello@codecov.io\\n'\n              '  IRC:     #codecov\\n'\n              '  Gitter:  https://gitter.im/codecov/support\\n'\n              '  Twitter: @codecov\\n')\n        sys.exit(1 if codecov.required else 0)\n\n    else:\n        if kwargs.get('debug'):\n            return dict(reports=reports, codecov=codecov, query=query, urlargs=urlargs, result=result)\n\n\nif __name__ == '__main__':\n    main()\n", "import os\nimport sys\nimport pickle\nimport itertools\nfrom ddt import ddt, data\nfrom mock import patch, Mock\nimport unittest\n\nimport subprocess\n\nimport codecov\n\n\n@ddt\nclass TestUploader(unittest.TestCase):\n    maxDiff = None\n    here = os.path.dirname(__file__)\n    bowerrc = os.path.join(os.path.dirname(__file__), '../.bowerrc')\n    token = os.path.join(os.path.dirname(__file__), '../.token')\n    jacoco = os.path.join(os.path.dirname(__file__), '../jacoco.xml')\n    filepath = os.path.join(os.path.dirname(__file__), 'coverage.xml')\n    coverage = os.path.join(os.path.dirname(__file__), '../.coverage')\n    defaults = dict(commit='a', branch='a', token='a')\n\n    @classmethod\n    def setUpClass(self):\n        self._env = os.environ.copy()\n\n    @classmethod\n    def tearDownClass(self):\n        os.environ = self._env\n\n    def setUp(self):\n        # set all environ back\n        os.environ['CI'] = \"true\"\n        for key in (\"TRAVIS\", \"TRAVIS_BRANCH\", \"TRAVIS_COMMIT\", \"TRAVIS_BUILD_DIR\", \"TRAVIS_JOB_ID\", \"TRAVIS_PULL_REQUEST\",\n                    \"CI_NAME\", \"CI_BRANCH\", \"CI_COMMIT_ID\", \"SHIPPABLE\",\n                    \"CI_BUILD_NUMBER\", \"MAGNUM\", \"CI_COMMIT\", \"APPVEYOR_ACCOUNT_NAME\", \"APPVEYOR_PROJECT_SLUG\", \"APPVEYOR_PULL_REQUEST_NUMBER\",\n                    \"CIRCLECI\", \"CIRCLE_BRANCH\", \"CIRCLE_ARTIFACTS\", \"CIRCLE_SHA1\", \"CIRCLE_NODE_INDEX\", \"CIRCLE_PR_NUMBER\",\n                    \"SEMAPHORE\", \"BRANCH_NAME\", \"SEMAPHORE_PROJECT_DIR\", \"REVISION\",\n                    \"BUILDKITE\", \"BUILDKITE_BUILD_NUMBER\", \"BUILDKITE_JOB_ID\", \"BUILDKITE_BRANCH\", \"BUILDKITE_PROJECT_SLUG\", \"BUILDKITE_COMMIT\",\n                    \"DRONE\", \"DRONE_BRANCH\", \"DRONE_BUILD_DIR\", \"JENKINS_URL\", \"TRAVIS_TAG\",\n                    \"GIT_BRANCH\", \"GIT_COMMIT\", \"WORKSPACE\", \"BUILD_NUMBER\", \"CI_BUILD_URL\", \"SEMAPHORE_REPO_SLUG\", \"SEMAPHORE_CURRENT_THREAD\",\n                    \"DRONE_BUILD_LINK\", \"TRAVIS_REPO_SLUG\", \"CODECOV_TOKEN\", \"APPVEYOR\", \"APPVEYOR_REPO_BRANCH\",\n                    \"APPVEYOR_BUILD_VERSION\", \"APPVEYOR_JOB_ID\", \"APPVEYOR_REPO_NAME\", \"APPVEYOR_REPO_COMMIT\", \"WERCKER_GIT_BRANCH\",\n                    \"WERCKER_MAIN_PIPELINE_STARTED\", \"WERCKER_GIT_OWNER\", \"WERCKER_GIT_REPOSITORY\",\n                    \"CI_BUILD_REF_NAME\", \"CI_BUILD_ID\", \"CI_BUILD_REPO\", \"CI_PROJECT_DIR\", \"CI_BUILD_REF\", \"CI_SERVER_NAME\",\n                    \"ghprbActualCommit\", \"ghprbSourceBranch\", \"ghprbPullId\", \"WERCKER_GIT_COMMIT\", \"CHANGE_ID\"):\n            os.environ[key] = \"\"\n\n    def tearDown(self):\n        self.delete(self.filepath, self.coverage, self.jacoco, self.bowerrc)\n        self.delete('hello', 'hello.c', 'hello.gcda', 'hello.c.gcov', 'hello.gcno')\n\n    def set_env(self, **kwargs):\n        for key in kwargs:\n            os.environ[key] = str(kwargs[key])\n\n    def run_cli(self, dump=True, *args, **kwargs):\n        inline = list(itertools.chain(*[['--%s' % key, str(value)] for key, value in kwargs.items() if value]))\n        if dump:\n            inline.append('--dump')\n        inline.extend(args)\n        return codecov.main(*inline, debug=True)\n\n    def fake_report(self):\n        with open(self.filepath, 'w+') as f:\n            f.write('__data__')\n\n    def delete(self, *paths):\n        for path in paths:\n            if os.path.exists(path):\n                os.remove(path)\n            path = os.path.join(os.path.dirname(__file__), '../', path)\n            if os.path.exists(path):\n                os.remove(path)\n\n    @data('vendor', 'node_modules', 'js/generated/coverage', '__pycache__', 'coverage/instrumented',\n          'build/lib', 'htmlcov', '.egg-info', '.git', '.tox', 'venv', '.venv-python-2.7')\n    def test_ignored_path(self, path):\n        self.assertTrue(bool(codecov.ignored_path('/home/ubuntu/' + path)), path + ' should be ignored')\n        self.assertTrue(bool(codecov.ignored_path('/home/ubuntu/' + path + '/more paths')), path + ' should be ignored')\n\n    @data('coverage.xml', 'jacoco.xml', 'jacocoTestResults.xml', 'coverage.txt',\n          'gcov.lst', 'cov.gcov', 'info.lcov', 'clover.xml', 'cobertura.xml',\n          'luacov.report.out', 'gcov.info', 'nosetests.xml')\n    def test_is_report(self, path):\n        self.assertFalse(bool(codecov.ignored_report('/home/file/' + path)), path + ' should not be ignored')\n        self.assertTrue(bool(codecov.is_report('/home/file/' + path)), path + ' should be a report')\n\n    @data('.coverage.worker10', 'coverage.jade', 'include.lst', 'inputFiles.lst',\n          'createdFiles.lst', 'scoverage.measurements.blackandwhite.xml', 'test_hello_coverage.txt',\n          'conftest_blackwhite.c.gcov')\n    def test_ignore_report(self, path):\n        self.assertTrue(bool(codecov.ignored_report('/home/file/' + path)), path + ' should be ignored')\n\n    def test_command(self):\n        try:\n            self.run_cli(True, '--help')\n        except SystemExit as e:\n            self.assertEqual(str(e), '0')\n        else:\n            raise Exception(\"help not shown\")\n\n    def test_exits_0(self):\n        try:\n            sys.argv = ['']\n            codecov.main()\n        except SystemExit as e:\n            self.assertEqual(str(e), '0')\n        else:\n            raise Exception(\"did not exit\")\n\n    def test_exits_1(self):\n        try:\n            sys.argv = ['']\n            codecov.main('--required')\n        except SystemExit as e:\n            self.assertEqual(str(e), '1')\n        else:\n            raise Exception(\"did not exit\")\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_returns_none(self):\n        with patch('requests.post') as post:\n            with patch('requests.put') as put:\n                post.return_value = Mock(status_code=200, text='target\\ns3')\n                put.return_value = Mock(status_code=200)\n                with open(self.filepath, 'w+') as f:\n                    f.write('coverage data')\n                sys.argv = ['', '--commit=8ed84d96bc225deff66605486180cd555366806b',\n                            '--branch=master',\n                            '--token=473c8c5b-10ee-4d83-86c6-bfd72a185a27']\n                self.assertEqual(codecov.main(), None)\n                assert post.called and put.called\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_send(self):\n        with patch('requests.post') as post:\n            with patch('requests.put') as put:\n                post.return_value = Mock(status_code=200, text='target\\ns3')\n                put.return_value = Mock(status_code=200)\n                with open(self.filepath, 'w+') as f:\n                    f.write('coverage data')\n                res = self.run_cli(False, commit='a'*40, branch='master', token='<token>')\n                self.assertEqual(res['result'].strip(), 'target')\n                assert 'https://codecov.io/upload/v4?' in post.call_args[0][0]\n                assert 'commit=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' in post.call_args[0][0]\n                assert 'token=%3Ctoken%3E' in post.call_args[0][0]\n                assert 'branch=master' in post.call_args[0][0]\n                assert u'tests/test.py'.encode(\"utf-8\") in put.call_args[1]['data']\n\n    def test_send_error(self):\n        with patch('requests.post') as post:\n            post.return_value = Mock(status_code=400, text='error')\n            with open(self.filepath, 'w+') as f:\n                f.write('coverage data')\n            try:\n                self.run_cli(False, token='not-a-token', commit='a'*40, branch='master')\n            except Exception:\n                pass\n            else:\n                raise Exception('400 never raised')\n\n    @data((dict(commit='sha'), 'Missing repository upload token'), )\n    def test_require_branch(self, dd):\n        (kwargs, reason) = dd\n        # this is so we dont get branch for local git\n        self.set_env(JENKINS_URL='hello')\n        try:\n            self.run_cli(**kwargs)\n        except AssertionError as e:\n            self.assertEqual(str(e), reason)\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_read_token_file(self):\n        with open(self.token, 'w+') as f:\n            f.write('a')\n        with open(self.filepath, 'w+') as f:\n            f.write('coverage data')\n        res = self.run_cli(token='@'+self.token, commit='a', branch='b')\n        self.assertIn('token=a', res['urlargs'])\n\n    def test_bowerrc(self):\n        with open(self.bowerrc, 'w+') as f:\n            f.write('{\"directory\": \"tests\"}')\n        with open(self.filepath, 'w+') as f:\n            f.write('coverage data')\n        try:\n            self.run_cli(**self.defaults)\n        except AssertionError as e:\n            self.assertEqual(str(e),  \"No coverage report found\")\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    def test_disable_search(self):\n        self.fake_report()\n        try:\n            self.run_cli(disable='search', token='a', branch='b', commit='c')\n        except AssertionError as e:\n            self.assertEqual(str(e), \"No coverage report found\")\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_prefix(self):\n        self.fake_report()\n        res = self.run_cli(prefix='/foo/bar/', dump=True, token='a', branch='b', commit='c')\n        assert '\\nfoo/bar/.gitignore' in res['reports']\n\n    def write_c(self):\n        c = '\\n'.join(('#include <stdio.h>',\n                       'static int t = 1;'\n                       'int main()', '{',\n                       'if (t)', 'printf(\"on this line\\\\n\");',\n                       'else', 'printf(\"but not here\\\\n\");',\n                       'return 0;', '}'))\n        with open(os.path.join(os.path.dirname(__file__), '../hello.c'), 'w+') as f:\n            f.write(c)\n        codecov.try_to_run('clang -coverage -O0 hello.c -o hello && ./hello')\n\n    def test_disable_gcov(self):\n        if self._env.get('TRAVIS') == 'true':\n            self.write_c()\n            try:\n                self.run_cli(disable='gcov', token='a', branch='b', commit='c')\n            except AssertionError as e:\n                self.assertEqual(os.path.exists('hello.c.gcov'), False)\n                self.assertEqual(str(e), \"No coverage report found\")\n            else:\n                raise Exception(\"Did not raise AssertionError\")\n        else:\n            self.skipTest(\"Skipped, works on Travis only.\")\n\n    def test_gcov(self):\n        self.skipTest(\"Need to fix this test...\")\n        # if self._env.get('TRAVIS') == 'true':\n        #     self.write_c()\n        #     output = self.run_cli(token='a', branch='b', commit='c')\n        #     self.assertEqual(os.path.exists('hello.c.gcov'), True)\n        #     report = output['reports'].split('<<<<<< network\\n')[1].splitlines()\n        #     self.assertIn('hello.c.gcov', report[0])\n        # else:\n        #     self.skipTest(\"Skipped, works on Travis only.\")\n\n    def test_disable_detect(self):\n        self.set_env(JENKINS_URL='a', GIT_BRANCH='b', GIT_COMMIT='c', CODECOV_TOKEN='d')\n        self.fake_report()\n        try:\n            self.run_cli(disable='detect')\n        except AssertionError as e:\n            self.assertEqual(str(e), \"Commit sha is missing. Please specify via --commit=:sha\")\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_bowerrc_none(self):\n        with open(self.bowerrc, 'w+') as f:\n            f.write('{\"other_key\": \"tests\"}')\n        with open(self.filepath, 'w+') as f:\n            f.write('coverage data')\n        res = self.run_cli(**self.defaults)\n        self.assertIn('tests/test.py', res['reports'])\n\n    @unittest.skipIf(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    def test_discovers(self):\n        with open(self.jacoco, 'w+') as f:\n            f.write('<jacoco></jacoco>')\n        with open(self.filepath, 'w+') as f:\n            f.write('coverage data')\n        res = self.run_cli(**self.defaults)\n        self.assertIn('coverage.xml', res['reports'])\n        self.assertIn('coverage data', res['reports'])\n        self.assertIn('jacoco.xml', res['reports'])\n        self.assertIn('<jacoco></jacoco>', res['reports'])\n\n    def test_not_jacoco(self):\n        with open(self.filepath, 'w+') as f:\n            f.write('<data>')\n        res = self.run_cli(file='tests/coverage.xml', **self.defaults)\n        res = res['reports'].split('<<<<<< network\\n')[1].splitlines()\n        self.assertEqual(res[0], '# path=tests/coverage.xml')\n        self.assertEqual(res[1], '<data>')\n\n    def test_run_coverage(self):\n        self.skipTest('Not sure how to pull off atm')\n        with open(self.coverage, 'w+') as f:\n            f.write(pickle.dumps())\n        res = self.run_cli(**self.defaults)\n        self.assertIn('<?xml version=\"1.0\" ?>', res['reports'])\n\n    def test_run_coverage_fails(self):\n        with open(self.coverage, 'w+') as f:\n            f.write('bad data')\n        try:\n            self.run_cli(**self.defaults)\n        except AssertionError as e:\n            self.assertEqual(str(e), 'No coverage report found')\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    def test_include_env(self):\n        self.set_env(HELLO='WORLD')\n        self.fake_report()\n        res = self.run_cli(env='HELLO', file=self.filepath, **self.defaults)\n        self.assertIn('HELLO=WORLD', res['reports'])\n\n    def test_none_found(self):\n        try:\n            self.run_cli(**self.defaults)\n        except AssertionError as e:\n            self.assertEqual(str(e), \"No coverage report found\")\n        else:\n            raise Exception(\"Did not raise AssertionError\")\n\n    def test_sanitize_arg(self):\n        self.assertEqual(codecov.sanitize_arg('', '& echo test > vuln1.txt'), ' echo test > vuln1.txt')\n\n    @unittest.skipUnless(os.getenv('JENKINS_URL'), 'Skip Jenkins CI test')\n    def test_ci_jenkins(self):\n        self.set_env(BUILD_URL='https://....',\n                     JENKINS_URL='https://....',\n                     GIT_BRANCH='master',\n                     GIT_COMMIT='c739768fcac68144a3a6d82305b9c4106934d31a',\n                     BUILD_NUMBER='41',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'jenkins')\n        self.assertEqual(res['query']['commit'], 'c739768fcac68144a3a6d82305b9c4106934d31a')\n        self.assertEqual(res['query']['build'], '41')\n        self.assertEqual(res['query']['build_url'], 'https://....')\n        self.assertEqual(res['query']['pr'], '')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('JENKINS_URL'), 'Skip Jenkins CI test')\n    def test_ci_jenkins_env(self):\n        self.set_env(JENKINS_URL='https://....',\n                     BUILD_URL='https://....',\n                     ghprbSourceBranch='master',\n                     ghprbActualCommit='c739768fcac68144a3a6d82305b9c4106934d31a',\n                     ghprbPullId='1',\n                     BUILD_NUMBER='41',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'jenkins')\n        self.assertEqual(res['query']['commit'], 'c739768fcac68144a3a6d82305b9c4106934d31a')\n        self.assertEqual(res['query']['build'], '41')\n        self.assertEqual(res['query']['build_url'], 'https://....')\n        self.assertEqual(res['query']['pr'], '1')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('JENKINS_URL'), 'Skip Jenkins CI test')\n    def test_ci_jenkins_blue_ocean(self):\n        self.set_env(JENKINS_URL='https://....',\n                     BUILD_URL='https://....',\n                     BRANCH_NAME='master',\n                     CHANGE_ID='1',\n                     BUILD_NUMBER='41',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'jenkins')\n        self.assertEqual(res['query']['commit'], codecov.check_output((\"git\", \"rev-parse\", \"HEAD\")))\n        self.assertEqual(res['query']['build'], '41')\n        self.assertEqual(res['query']['build_url'], 'https://....')\n        self.assertEqual(res['query']['pr'], '1')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI') == 'true'\n                         and os.getenv('TRAVIS') == \"true\"\n                         and os.getenv('SHIPPABLE') != 'true',\n                         'Skip Travis CI test')\n    def test_ci_travis(self):\n        self.set_env(TRAVIS=\"true\",\n                     TRAVIS_BRANCH=\"master\",\n                     TRAVIS_COMMIT=\"c739768fcac68144a3a6d82305b9c4106934d31a\",\n                     TRAVIS_REPO_SLUG='owner/repo',\n                     TRAVIS_JOB_ID=\"33116958\",\n                     TRAVIS_TAG=\"v1.1.1\",\n                     TRAVIS_JOB_NUMBER=\"4.1\")\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'travis')\n        self.assertEqual(res['query']['commit'], 'c739768fcac68144a3a6d82305b9c4106934d31a')\n        self.assertEqual(res['query']['build'], '4.1')\n        self.assertEqual(res['query']['pr'], '')\n        self.assertEqual(res['query']['tag'], 'v1.1.1')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, '')\n\n    @unittest.skipUnless(os.getenv('CI') == 'true' and os.getenv('CI_NAME') == 'codeship', 'Skip Codeship CI test')\n    def test_ci_codeship(self):\n        self.set_env(CI_NAME='codeship',\n                     CI_BRANCH='master',\n                     CI_BUILD_NUMBER='20',\n                     CI_BUILD_URL='https://codeship.io/build/1',\n                     CI_COMMIT_ID='743b04806ea677403aa2ff26c6bdeb85005de658',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'codeship')\n        self.assertEqual(res['query']['commit'], '743b04806ea677403aa2ff26c6bdeb85005de658')\n        self.assertEqual(res['query']['build'], '20')\n        self.assertEqual(res['query']['build_url'], 'https://codeship.io/build/1')\n        self.assertEqual(res['query']['pr'], '')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI') == 'true' and os.getenv('CIRCLECI') == 'true', 'Skip Circle CI test')\n    def test_ci_circleci(self):\n        self.set_env(CIRCLECI='true',\n                     CIRCLE_BUILD_NUM='57',\n                     CIRCLE_NODE_INDEX='1',\n                     CIRCLE_PR_NUMBER='1',\n                     CIRCLE_BRANCH='master',\n                     CIRCLE_PROJECT_USERNAME='owner',\n                     CIRCLE_PROJECT_REPONAME='repo',\n                     CIRCLE_SHA1='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'circleci')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '57.1')\n        self.assertEqual(res['query']['pr'], '1')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['branch'], 'master')\n\n    @unittest.skipUnless(os.getenv('CI') == 'true' and os.getenv('BUILDKITE') == 'true', 'Skip BuildKit CI test')\n    def test_ci_buildkite(self):\n        self.set_env(CI='true',\n                     BUILDKITE='true',\n                     BUILDKITE_BUILD_NUMBER='57',\n                     BUILDKITE_JOB_ID='1',\n                     BUILDKITE_BRANCH='master',\n                     BUILDKITE_PROJECT_SLUG='owner/repo',\n                     BUILDKITE_COMMIT='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'buildkite')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '57.1')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['branch'], 'master')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI') == 'true' and os.getenv('SEMAPHORE') == 'true', 'Skip Semaphore CI test')\n    def test_ci_semaphore(self):\n        self.set_env(SEMAPHORE='true',\n                     BRANCH_NAME='master',\n                     SEMAPHORE_BUILD_NUMBER='10',\n                     SEMAPHORE_CURRENT_THREAD='1',\n                     SEMAPHORE_REPO_SLUG='owner/repo',\n                     REVISION='743b04806ea677403aa2ff26c6bdeb85005de658',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'semaphore')\n        self.assertEqual(res['query']['commit'], '743b04806ea677403aa2ff26c6bdeb85005de658')\n        self.assertEqual(res['query']['build'], '10.1')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['branch'], 'master')\n\n    @unittest.skipUnless(os.getenv('CI') == \"drone\" and os.getenv('DRONE') == \"true\", 'Skip Drone CI test')\n    def test_ci_drone(self):\n        self.set_env(CI='drone',\n                     DRONE='true',\n                     DRONE_BUILD_NUMBER='10',\n                     DRONE_BRANCH='master',\n                     DRONE_BUILD_LINK='https://drone.io/github/builds/1',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'drone.io')\n        self.assertEqual(res['query']['commit'], codecov.check_output((\"git\", \"rev-parse\", \"HEAD\")))\n        self.assertEqual(res['query']['build'], '10')\n        self.assertEqual(res['query']['build_url'], 'https://drone.io/github/builds/1')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('SHIPPABLE') == \"true\", 'Skip Shippable CI test')\n    def test_ci_shippable(self):\n        self.set_env(SHIPPABLE='true',\n                     BUILD_NUMBER='10',\n                     REPO_NAME='owner/repo',\n                     BRANCH='master',\n                     BUILD_URL='https://shippable.com/...',\n                     COMMIT='743b04806ea677403aa2ff26c6bdeb85005de658',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'shippable')\n        self.assertEqual(res['query']['commit'], '743b04806ea677403aa2ff26c6bdeb85005de658')\n        self.assertEqual(res['query']['build'], '10')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['build_url'], 'https://shippable.com/...')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    # @unittest.skipUnless(os.getenv('CI') == \"True\" and os.getenv('APPVEYOR') == 'True', 'Skip AppVeyor CI test')\n    @unittest.skip('Skip AppVeyor test')\n    def test_ci_appveyor(self):\n        self.set_env(APPVEYOR='True',\n                     CI='True',\n                     APPVEYOR_JOB_ID='9r2qufuu8',\n                     APPVEYOR_BUILD_VERSION='1.2.3',\n                     APPVEYOR_ACCOUNT_NAME='owner',\n                     APPVEYOR_PROJECT_SLUG='repo',\n                     APPVEYOR_PULL_REQUEST_NUMBER='1',\n                     APPVEYOR_REPO_BRANCH='master',\n                     APPVEYOR_REPO_NAME='owner/repo',\n                     APPVEYOR_REPO_COMMIT='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli(file=self.filepath)\n        self.assertEqual(res['query']['service'], 'appveyor')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['job'], 'owner/repo/1.2.3')\n        self.assertEqual(res['query']['build'], '9r2qufuu8')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['query']['pr'], '1')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI') == \"true\" and os.getenv('WERCKER_GIT_BRANCH'), 'Skip Wercker CI test')\n    def test_ci_wercker(self):\n        self.set_env(WERCKER_GIT_BRANCH='master',\n                     WERCKER_MAIN_PIPELINE_STARTED='1399372237',\n                     WERCKER_GIT_OWNER='owner',\n                     WERCKER_GIT_REPOSITORY='repo',\n                     WERCKER_GIT_COMMIT='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'wercker')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '1399372237')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI') == \"true\" and os.getenv('MAGNUM') == 'true', 'Skip Magnum CI test')\n    def test_ci_magnum(self):\n        self.set_env(CI_BRANCH='master',\n                     CI_BUILD_NUMBER='1399372237',\n                     MAGNUM='true',\n                     CI='true',\n                     CI_COMMIT='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'magnum')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '1399372237')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skipUnless(os.getenv('CI_SERVER_NAME', '').startswith(\"GitLab\"), 'Skip GitLab CI test')\n    def test_ci_gitlab(self):\n        self.set_env(CI_BUILD_REF_NAME='master',\n                     CI_BUILD_ID='1399372237',\n                     CI_BUILD_REPO='https://gitlab.com/owner/repo.git',\n                     CI_SERVER_NAME='GitLab CI',\n                     CI_BUILD_REF='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                     HOME='/',\n                     CI_PROJECT_DIR=os.getcwd().strip('/'),\n                     CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli()\n        self.assertEqual(res['query']['service'], 'gitlab')\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '1399372237')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['codecov'].token, 'token')\n\n    @unittest.skip('Skip CI None')\n    def test_ci_none(self):\n        self.set_env(CODECOV_TOKEN='token')\n        self.fake_report()\n        res = self.run_cli(build=10,\n                           commit='d653b934ed59c1a785cc1cc79d08c9aaa4eba73b',\n                           slug='owner/repo',\n                           token='token')\n        self.assertEqual(res['query'].get('service'), None)\n        self.assertEqual(res['query']['commit'], 'd653b934ed59c1a785cc1cc79d08c9aaa4eba73b')\n        self.assertEqual(res['query']['build'], '10')\n        self.assertEqual(res['query']['slug'], 'owner/repo')\n        self.assertEqual(res['codecov'].token, 'token')\n"], "filenames": ["codecov/__init__.py", "tests/test.py"], "buggy_code_start_loc": [35, 317], "buggy_code_end_loc": [632, 317], "fixing_code_start_loc": [36, 318], "fixing_code_end_loc": [636, 321], "type": "CWE-88", "message": "This affects the package codecov before 2.0.16. The vulnerability occurs due to not sanitizing gcov arguments before being being provided to the popen method.", "other": {"cve": {"id": "CVE-2019-10800", "sourceIdentifier": "report@snyk.io", "published": "2022-07-13T12:15:08.150", "lastModified": "2022-11-08T03:09:17.037", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package codecov before 2.0.16. The vulnerability occurs due to not sanitizing gcov arguments before being being provided to the popen method."}, {"lang": "es", "value": "Esto afecta al paquete codecov versiones anteriores a 2.0.16. La vulnerabilidad es producida debido a que no son saneados los argumentos de gcov antes de ser proporcionados al m\u00e9todo popen"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-88"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:codecov:codecov-python:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.16", "matchCriteriaId": "2F99FFF5-0477-4713-8BBB-0A3113209F50"}]}]}], "references": [{"url": "https://github.com/codecov/codecov-python/commit/2a80aa434f74feb31242b6f213b75ce63ae97902", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-PYTHON-CODECOV-552149", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/codecov/codecov-python/commit/2a80aa434f74feb31242b6f213b75ce63ae97902"}}