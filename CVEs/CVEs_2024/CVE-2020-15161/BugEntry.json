{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * Class MailCore.\n */\nclass MailCore extends ObjectModel\n{\n    public $id;\n\n    /** @var string Recipient */\n    public $recipient;\n\n    /** @var string Template */\n    public $template;\n\n    /** @var string Subject */\n    public $subject;\n\n    /** @var int Language ID */\n    public $id_lang;\n\n    /** @var int Timestamp */\n    public $date_add;\n\n    /**\n     * @see ObjectModel::$definition\n     */\n    public static $definition = [\n        'table' => 'mail',\n        'primary' => 'id_mail',\n        'fields' => [\n            'recipient' => [\n                'type' => self::TYPE_STRING,\n                'validate' => 'isEmail',\n                'copy_post' => false,\n                'required' => true,\n                'size' => 255,\n            ],\n            'template' => [\n                'type' => self::TYPE_STRING,\n                'validate' => 'isTplName',\n                'copy_post' => false,\n                'required' => true,\n                'size' => 62,\n            ],\n            'subject' => [\n                'type' => self::TYPE_STRING,\n                'validate' => 'isMailSubject',\n                'copy_post' => false,\n                'required' => true,\n                'size' => 255,\n            ],\n            'id_lang' => [\n                'type' => self::TYPE_INT,\n                'validate' => 'isUnsignedId',\n                'copy_post' => false,\n                'required' => true,\n            ],\n            'date_add' => [\n                'type' => self::TYPE_DATE,\n                'validate' => 'isDate',\n                'copy_post' => false,\n                'required' => true,\n            ],\n        ],\n    ];\n\n    /**\n     * Mail content type.\n     */\n    const TYPE_HTML = 1;\n    const TYPE_TEXT = 2;\n    const TYPE_BOTH = 3;\n\n    /**\n     * Send mail under SMTP server.\n     */\n    const METHOD_SMTP = 2;\n\n    /**\n     * Disable mail, will return immediately after calling send method.\n     */\n    const METHOD_DISABLE = 3;\n\n    /**\n     * Send Email.\n     *\n     * @param int $idLang Language ID of the email (to translate the template)\n     * @param string $template Template: the name of template not be a var but a string !\n     * @param string $subject Subject of the email\n     * @param string $templateVars Template variables for the email\n     * @param string $to To email\n     * @param string $toName To name\n     * @param string $from From email\n     * @param string $fromName To email\n     * @param array $fileAttachment array with three parameters (content, mime and name).\n     *                              You can use an array of array to attach multiple files\n     * @param bool $mode_smtp SMTP mode (deprecated)\n     * @param string $templatePath Template path\n     * @param bool $die Die after error\n     * @param int $idShop Shop ID\n     * @param string $bcc Bcc recipient address. You can use an array of array to send to multiple recipients\n     * @param string $replyTo Reply-To recipient address\n     * @param string $replyToName Reply-To recipient name\n     *\n     * @return bool|int Whether sending was successful. If not at all, false, otherwise amount of recipients succeeded.\n     */\n    public static function send(\n        $idLang,\n        $template,\n        $subject,\n        $templateVars,\n        $to,\n        $toName = null,\n        $from = null,\n        $fromName = null,\n        $fileAttachment = null,\n        $mode_smtp = null,\n        $templatePath = _PS_MAIL_DIR_,\n        $die = false,\n        $idShop = null,\n        $bcc = null,\n        $replyTo = null,\n        $replyToName = null\n    ) {\n        if (!$idShop) {\n            $idShop = Context::getContext()->shop->id;\n        }\n\n        $hookBeforeEmailResult = Hook::exec(\n            'actionEmailSendBefore',\n            [\n                'idLang' => &$idLang,\n                'template' => &$template,\n                'subject' => &$subject,\n                'templateVars' => &$templateVars,\n                'to' => &$to,\n                'toName' => &$toName,\n                'from' => &$from,\n                'fromName' => &$fromName,\n                'fileAttachment' => &$fileAttachment,\n                'mode_smtp' => &$mode_smtp,\n                'templatePath' => &$templatePath,\n                'die' => &$die,\n                'idShop' => &$idShop,\n                'bcc' => &$bcc,\n                'replyTo' => &$replyTo,\n            ],\n            null,\n            true\n        );\n\n        if ($hookBeforeEmailResult === null) {\n            $keepGoing = false;\n        } else {\n            $keepGoing = array_reduce(\n                $hookBeforeEmailResult,\n                function ($carry, $item) {\n                    return ($item === false) ? false : $carry;\n                },\n                true\n            );\n        }\n\n        if (!$keepGoing) {\n            return true;\n        }\n\n        if (is_numeric($idShop) && $idShop) {\n            $shop = new Shop((int) $idShop);\n        }\n\n        $configuration = Configuration::getMultiple(\n            [\n                'PS_SHOP_EMAIL',\n                'PS_MAIL_METHOD',\n                'PS_MAIL_SERVER',\n                'PS_MAIL_USER',\n                'PS_MAIL_PASSWD',\n                'PS_SHOP_NAME',\n                'PS_MAIL_SMTP_ENCRYPTION',\n                'PS_MAIL_SMTP_PORT',\n                'PS_MAIL_TYPE',\n            ],\n            null,\n            null,\n            $idShop\n        );\n\n        // Returns immediately if emails are deactivated\n        if ($configuration['PS_MAIL_METHOD'] == self::METHOD_DISABLE) {\n            return true;\n        }\n\n        // Hook to alter template vars\n        Hook::exec(\n            'sendMailAlterTemplateVars',\n            [\n                'template' => $template,\n                'template_vars' => &$templateVars,\n            ]\n        );\n\n        if (!isset($configuration['PS_MAIL_SMTP_ENCRYPTION']) ||\n            Tools::strtolower($configuration['PS_MAIL_SMTP_ENCRYPTION']) === 'off'\n        ) {\n            $configuration['PS_MAIL_SMTP_ENCRYPTION'] = false;\n        }\n\n        if (!isset($configuration['PS_MAIL_SMTP_PORT'])) {\n            $configuration['PS_MAIL_SMTP_PORT'] = 'default';\n        }\n\n        /*\n         * Sending an e-mail can be of vital importance for the merchant, when his password\n         * is lost for example, so we must not die but do our best to send the e-mail.\n         */\n        if (!isset($from) || !Validate::isEmail($from)) {\n            $from = $configuration['PS_SHOP_EMAIL'];\n        }\n\n        if (!Validate::isEmail($from)) {\n            $from = null;\n        }\n\n        // $from_name is not that important, no need to die if it is not valid\n        if (!isset($fromName) || !Validate::isMailName($fromName)) {\n            $fromName = $configuration['PS_SHOP_NAME'];\n        }\n\n        if (!Validate::isMailName($fromName)) {\n            $fromName = null;\n        }\n\n        /*\n         * It would be difficult to send an e-mail if the e-mail is not valid,\n         * so this time we can die if there is a problem.\n         */\n        if (!is_array($to) && !Validate::isEmail($to)) {\n            self::dieOrLog($die, 'Error: parameter \"to\" is corrupted');\n\n            return false;\n        }\n\n        // if bcc is not null, make sure it's a vaild e-mail\n        if (null !== $bcc && !is_array($bcc) && !Validate::isEmail($bcc)) {\n            self::dieOrLog($die, 'Error: parameter \"bcc\" is corrupted');\n            $bcc = null;\n        }\n\n        if (!is_array($templateVars)) {\n            $templateVars = [];\n        }\n\n        // Do not crash for this error, that may be a complicated customer name\n        if (is_string($toName) && !empty($toName) && !Validate::isMailName($toName)) {\n            $toName = null;\n        }\n\n        if (!Validate::isTplName($template)) {\n            self::dieOrLog($die, 'Error: invalid e-mail template');\n\n            return false;\n        }\n\n        if (!Validate::isMailSubject($subject)) {\n            self::dieOrLog($die, 'Error: invalid e-mail subject');\n\n            return false;\n        }\n\n        /* Construct multiple recipients list if needed */\n        $message = \\Swift_Message::newInstance();\n        if (is_array($to) && isset($to)) {\n            foreach ($to as $key => $addr) {\n                $addr = trim($addr);\n                if (!Validate::isEmail($addr)) {\n                    self::dieOrLog($die, 'Error: invalid e-mail address');\n\n                    return false;\n                }\n\n                if (is_array($toName) && isset($toName[$key])) {\n                    $addrName = $toName[$key];\n                } else {\n                    $addrName = $toName;\n                }\n\n                $addrName = ($addrName == null || $addrName == $addr || !Validate::isGenericName($addrName)) ?\n                          '' :\n                          self::mimeEncode($addrName);\n                $message->addTo(self::toPunycode($addr), $addrName);\n            }\n            $toPlugin = $to[0];\n        } else {\n            /* Simple recipient, one address */\n            $toPlugin = $to;\n            $toName = (($toName == null || $toName == $to) ? '' : self::mimeEncode($toName));\n            $message->addTo(self::toPunycode($to), $toName);\n        }\n\n        if (isset($bcc) && is_array($bcc)) {\n            foreach ($bcc as $addr) {\n                $addr = trim($addr);\n                if (!Validate::isEmail($addr)) {\n                    self::dieOrLog($die, 'Error: invalid e-mail address');\n\n                    return false;\n                }\n\n                $message->addBcc(self::toPunycode($addr));\n            }\n        } elseif (isset($bcc)) {\n            $message->addBcc(self::toPunycode($bcc));\n        }\n\n        try {\n            /* Connect with the appropriate configuration */\n            if ($configuration['PS_MAIL_METHOD'] == self::METHOD_SMTP) {\n                if (empty($configuration['PS_MAIL_SERVER']) || empty($configuration['PS_MAIL_SMTP_PORT'])) {\n                    self::dieOrLog($die, 'Error: invalid SMTP server or SMTP port');\n\n                    return false;\n                }\n\n                $connection = \\Swift_SmtpTransport::newInstance(\n                    $configuration['PS_MAIL_SERVER'],\n                    $configuration['PS_MAIL_SMTP_PORT'],\n                    $configuration['PS_MAIL_SMTP_ENCRYPTION']\n                )\n                    ->setUsername($configuration['PS_MAIL_USER'])\n                    ->setPassword($configuration['PS_MAIL_PASSWD']);\n            } else {\n                $connection = \\Swift_MailTransport::newInstance();\n            }\n\n            if (!$connection) {\n                return false;\n            }\n\n            $swift = \\Swift_Mailer::newInstance($connection);\n            /* Get templates content */\n            $iso = Language::getIsoById((int) $idLang);\n            $isoDefault = Language::getIsoById((int) Configuration::get('PS_LANG_DEFAULT'));\n            $isoArray = [];\n            if ($iso) {\n                $isoArray[] = $iso;\n            }\n\n            if ($isoDefault && $iso !== $isoDefault) {\n                $isoArray[] = $isoDefault;\n            }\n\n            if (!in_array('en', $isoArray)) {\n                $isoArray[] = 'en';\n            }\n\n            $moduleName = false;\n\n            // get templatePath\n            if (preg_match('#' . $shop->physical_uri . 'modules/#', str_replace(DIRECTORY_SEPARATOR, '/', $templatePath)) &&\n                preg_match('#modules/([a-z0-9_-]+)/#ui', str_replace(DIRECTORY_SEPARATOR, '/', $templatePath), $res)\n            ) {\n                $moduleName = $res[1];\n            }\n\n            foreach ($isoArray as $isoCode) {\n                $isoTemplate = $isoCode . '/' . $template;\n                $templatePath = self::getTemplateBasePath($isoTemplate, $moduleName, $shop->theme);\n\n                if (!file_exists($templatePath . $isoTemplate . '.txt') &&\n                    (\n                        $configuration['PS_MAIL_TYPE'] == Mail::TYPE_BOTH ||\n                        $configuration['PS_MAIL_TYPE'] == Mail::TYPE_TEXT\n                    )\n                ) {\n                    PrestaShopLogger::addLog(\n                        Context::getContext()->getTranslator()->trans(\n                            'Error - The following e-mail template is missing: %s',\n                            [$templatePath . $isoTemplate . '.txt'],\n                            'Admin.Advparameters.Notification'\n                        )\n                    );\n                } elseif (!file_exists($templatePath . $isoTemplate . '.html') &&\n                          (\n                              $configuration['PS_MAIL_TYPE'] == Mail::TYPE_BOTH ||\n                              $configuration['PS_MAIL_TYPE'] == Mail::TYPE_HTML\n                          )\n                ) {\n                    PrestaShopLogger::addLog(\n                        Context::getContext()->getTranslator()->trans(\n                            'Error - The following e-mail template is missing: %s',\n                            [$templatePath . $isoTemplate . '.html'],\n                            'Admin.Advparameters.Notification'\n                        )\n                    );\n                } else {\n                    $templatePathExists = true;\n\n                    break;\n                }\n            }\n\n            if (empty($templatePathExists)) {\n                self::dieOrLog($die, 'Error - The following e-mail template is missing: %s', [$template]);\n\n                return false;\n            }\n\n            $templateHtml = '';\n            $templateTxt = '';\n            Hook::exec(\n                'actionEmailAddBeforeContent',\n                [\n                    'template' => $template,\n                    'template_html' => &$templateHtml,\n                    'template_txt' => &$templateTxt,\n                    'id_lang' => (int) $idLang,\n                ],\n                null,\n                true\n            );\n            $templateHtml .= Tools::file_get_contents($templatePath . $isoTemplate . '.html');\n            $templateTxt .= strip_tags(\n                html_entity_decode(\n                    Tools::file_get_contents($templatePath . $isoTemplate . '.txt'),\n                    null,\n                    'utf-8'\n                )\n            );\n            Hook::exec(\n                'actionEmailAddAfterContent',\n                [\n                    'template' => $template,\n                    'template_html' => &$templateHtml,\n                    'template_txt' => &$templateTxt,\n                    'id_lang' => (int) $idLang,\n                ],\n                null,\n                true\n            );\n\n            /* Create mail and attach differents parts */\n            $subject = '[' . strip_tags($configuration['PS_SHOP_NAME']) . '] ' . $subject;\n            $message->setSubject($subject);\n\n            $message->setCharset('utf-8');\n\n            /* Set Message-ID - getmypid() is blocked on some hosting */\n            $message->setId(Mail::generateId());\n\n            if (!($replyTo && Validate::isEmail($replyTo))) {\n                $replyTo = $from;\n            }\n\n            if (isset($replyTo) && $replyTo) {\n                $message->setReplyTo($replyTo, ($replyToName !== '' ? $replyToName : null));\n            }\n\n            $templateVars = array_map(['Tools', 'htmlentitiesDecodeUTF8'], $templateVars);\n            $templateVars = array_map(['Tools', 'stripslashes'], $templateVars);\n\n            if (false !== Configuration::get('PS_LOGO_MAIL') &&\n                file_exists(_PS_IMG_DIR_ . Configuration::get('PS_LOGO_MAIL', null, null, $idShop))\n            ) {\n                $logo = _PS_IMG_DIR_ . Configuration::get('PS_LOGO_MAIL', null, null, $idShop);\n            } else {\n                if (file_exists(_PS_IMG_DIR_ . Configuration::get('PS_LOGO', null, null, $idShop))) {\n                    $logo = _PS_IMG_DIR_ . Configuration::get('PS_LOGO', null, null, $idShop);\n                } else {\n                    $templateVars['{shop_logo}'] = '';\n                }\n            }\n            ShopUrl::cacheMainDomainForShop((int) $idShop);\n            /* don't attach the logo as */\n            if (isset($logo)) {\n                $templateVars['{shop_logo}'] = $message->embed(\\Swift_Image::fromPath($logo));\n            }\n\n            if ((Context::getContext()->link instanceof Link) === false) {\n                Context::getContext()->link = new Link();\n            }\n\n            $templateVars['{shop_name}'] = Tools::safeOutput($configuration['PS_SHOP_NAME']);\n            $templateVars['{shop_url}'] = Context::getContext()->link->getPageLink(\n                'index',\n                true,\n                $idLang,\n                null,\n                false,\n                $idShop\n            );\n            $templateVars['{my_account_url}'] = Context::getContext()->link->getPageLink(\n                'my-account',\n                true,\n                $idLang,\n                null,\n                false,\n                $idShop\n            );\n            $templateVars['{guest_tracking_url}'] = Context::getContext()->link->getPageLink(\n                'guest-tracking',\n                true,\n                $idLang,\n                null,\n                false,\n                $idShop\n            );\n            $templateVars['{history_url}'] = Context::getContext()->link->getPageLink(\n                'history',\n                true,\n                $idLang,\n                null,\n                false,\n                $idShop\n            );\n            $templateVars['{color}'] = Tools::safeOutput(Configuration::get('PS_MAIL_COLOR', null, null, $idShop));\n            // Get extra template_vars\n            $extraTemplateVars = [];\n            Hook::exec(\n                'actionGetExtraMailTemplateVars',\n                [\n                    'template' => $template,\n                    'template_vars' => $templateVars,\n                    'extra_template_vars' => &$extraTemplateVars,\n                    'id_lang' => (int) $idLang,\n                ],\n                null,\n                true\n            );\n            $templateVars = array_merge($templateVars, $extraTemplateVars);\n            $swift->registerPlugin(new \\Swift_Plugins_DecoratorPlugin(array($toPlugin => $templateVars)));\n            if ($configuration['PS_MAIL_TYPE'] == Mail::TYPE_BOTH ||\n                $configuration['PS_MAIL_TYPE'] == Mail::TYPE_TEXT\n            ) {\n                $message->addPart($templateTxt, 'text/plain', 'utf-8');\n            }\n            if ($configuration['PS_MAIL_TYPE'] == Mail::TYPE_BOTH ||\n                $configuration['PS_MAIL_TYPE'] == Mail::TYPE_HTML\n            ) {\n                $message->addPart($templateHtml, 'text/html', 'utf-8');\n            }\n\n            if ($fileAttachment && !empty($fileAttachment)) {\n                // Multiple attachments?\n                if (!is_array(current($fileAttachment))) {\n                    $fileAttachment = array($fileAttachment);\n                }\n\n                foreach ($fileAttachment as $attachment) {\n                    if (isset($attachment['content'], $attachment['name'], $attachment['mime'])) {\n                        $message->attach(\n                            \\Swift_Attachment::newInstance()->setFilename(\n                                $attachment['name']\n                            )->setContentType($attachment['mime'])\n                            ->setBody($attachment['content'])\n                        );\n                    }\n                }\n            }\n            /* Send mail */\n            $message->setFrom(array($from => $fromName));\n\n            // Hook to alter Swift Message before sending mail\n            Hook::exec('actionMailAlterMessageBeforeSend', [\n                'message' => &$message,\n            ]);\n\n            $send = $swift->send($message);\n\n            ShopUrl::resetMainDomainCache();\n\n            if ($send && Configuration::get('PS_LOG_EMAILS')) {\n                $mail = new Mail();\n                $mail->template = Tools::substr($template, 0, 62);\n                $mail->subject = Tools::substr($subject, 0, 255);\n                $mail->id_lang = (int) $idLang;\n                $recipientsTo = $message->getTo();\n                $recipientsCc = $message->getCc();\n                $recipientsBcc = $message->getBcc();\n                if (!is_array($recipientsTo)) {\n                    $recipientsTo = [];\n                }\n                if (!is_array($recipientsCc)) {\n                    $recipientsCc = [];\n                }\n                if (!is_array($recipientsBcc)) {\n                    $recipientsBcc = [];\n                }\n                foreach (array_merge($recipientsTo, $recipientsCc, $recipientsBcc) as $email => $recipient_name) {\n                    /* @var Swift_Address $recipient */\n                    $mail->id = null;\n                    $mail->recipient = Tools::substr($email, 0, 255);\n                    $mail->add();\n                }\n            }\n\n            return $send;\n        } catch (\\Swift_SwiftException $e) {\n            PrestaShopLogger::addLog(\n                'Swift Error: ' . $e->getMessage(),\n                3,\n                null,\n                'Swift_Message'\n            );\n\n            return false;\n        }\n    }\n\n    protected static function getTemplateBasePath($isoTemplate, $moduleName, $theme)\n    {\n        $basePathList = [\n            _PS_ROOT_DIR_ . '/themes/' . $theme->getName() . '/',\n            _PS_ROOT_DIR_ . '/themes/' . $theme->get('parent') . '/',\n            _PS_ROOT_DIR_,\n        ];\n\n        if ($moduleName !== false) {\n            $templateRelativePath = '/modules/' . $moduleName . '/mails/';\n        } else {\n            $templateRelativePath = '/mails/';\n        }\n\n        foreach ($basePathList as $base) {\n            $templatePath = $base . $templateRelativePath;\n            if (file_exists($templatePath . $isoTemplate . '.txt') || file_exists($templatePath . $isoTemplate . '.html')) {\n                return $templatePath;\n            }\n        }\n\n        return '';\n    }\n\n    /**\n     * @param $idMail Mail ID\n     *\n     * @return bool Whether removal succeeded\n     */\n    public static function eraseLog($idMail)\n    {\n        return Db::getInstance()->delete('mail', 'id_mail = ' . (int) $idMail);\n    }\n\n    /**\n     * @return bool\n     */\n    public static function eraseAllLogs()\n    {\n        return Db::getInstance()->execute('TRUNCATE TABLE ' . _DB_PREFIX_ . 'mail');\n    }\n\n    /**\n     * Send a test email.\n     *\n     * @param bool $smtpChecked Is SMTP checked?\n     * @param string $smtp_server SMTP Server hostname\n     * @param string $content Content of the email\n     * @param string $subject Subject of the email\n     * @param bool $type Deprecated\n     * @param string $to To email address\n     * @param string $from From email address\n     * @param string $smtpLogin SMTP login name\n     * @param string $smtpPassword SMTP password\n     * @param int $smtpPort SMTP Port\n     * @param bool|string $smtpEncryption Encryption type. \"off\" or false disable encryption.\n     *\n     * @return bool|string True if succeeded, otherwise the error message\n     */\n    public static function sendMailTest(\n        $smtpChecked,\n        $smtp_server,\n        $content,\n        $subject,\n        $type,\n        $to,\n        $from,\n        $smtpLogin,\n        $smtpPassword,\n        $smtpPort,\n        $smtpEncryption\n    ) {\n        $result = false;\n\n        try {\n            if ($smtpChecked) {\n                if (Tools::strtolower($smtpEncryption) === 'off') {\n                    $smtpEncryption = false;\n                }\n                $smtp = \\Swift_SmtpTransport::newInstance($smtp_server, $smtpPort, $smtpEncryption)\n                    ->setUsername($smtpLogin)\n                    ->setPassword($smtpPassword);\n                $swift = \\Swift_Mailer::newInstance($smtp);\n            } else {\n                $swift = \\Swift_Mailer::newInstance(\\Swift_MailTransport::newInstance());\n            }\n\n            $message = \\Swift_Message::newInstance();\n\n            $message\n                ->setFrom($from)\n                ->setTo($to)\n                ->setSubject($subject)\n                ->setBody($content);\n\n            if ($swift->send($message)) {\n                $result = true;\n            }\n        } catch (\\Swift_SwiftException $e) {\n            $result = $e->getMessage();\n        }\n\n        return $result;\n    }\n\n    /**\n     * This method is used to get the translation for email Object.\n     * For an object is forbidden to use htmlentities,\n     * we have to return a sentence with accents.\n     *\n     * @param string $string raw sentence (write directly in file)\n     *\n     * @return mixed\n     */\n    public static function l($string, $idLang = null, Context $context = null)\n    {\n        global $_LANGMAIL;\n\n        if (!$context) {\n            $context = Context::getContext();\n        }\n\n        if ($idLang === null) {\n            $idLang = (!isset($context->language) || !is_object($context->language)) ?\n                    (int) Configuration::get('PS_LANG_DEFAULT') :\n                    (int) $context->language->id;\n        }\n\n        $isoCode = Language::getIsoById((int) $idLang);\n\n        $file_core = _PS_ROOT_DIR_ . '/mails/' . $isoCode . '/lang.php';\n        if (Tools::file_exists_cache($file_core) && empty($_LANGMAIL)) {\n            include $file_core;\n        }\n\n        $fileTheme = _PS_THEME_DIR_ . 'mails/' . $isoCode . '/lang.php';\n        if (Tools::file_exists_cache($fileTheme)) {\n            include $fileTheme;\n        }\n\n        if (!is_array($_LANGMAIL)) {\n            return str_replace('\"', '&quot;', $string);\n        }\n\n        $key = str_replace('\\'', '\\\\\\'', $string);\n\n        return str_replace(\n            '\"',\n            '&quot;',\n            Tools::stripslashes(\n                (array_key_exists($key, $_LANGMAIL) && !empty($_LANGMAIL[$key])) ? $_LANGMAIL[$key] : $string\n            )\n        );\n    }\n\n    /* Rewrite of Swift_Message::generateId() without getmypid() */\n    protected static function generateId($idstring = null)\n    {\n        $midparams = [\n            'utctime' => gmstrftime('%Y%m%d%H%M%S'),\n            'randint' => mt_rand(),\n            'customstr' => (preg_match('/^(?<!\\\\.)[a-z0-9\\\\.]+(?!\\\\.)$/iD', $idstring) ? $idstring : 'swift'),\n            'hostname' => !empty($_SERVER['SERVER_NAME']) ? $_SERVER['SERVER_NAME'] : php_uname('n'),\n        ];\n\n        return vsprintf('%s.%d.%s@%s', $midparams);\n    }\n\n    /**\n     * Check if a multibyte character set is used for the data.\n     *\n     * @param string $data Data\n     *\n     * @return bool Whether the string uses a multibyte character set\n     */\n    public static function isMultibyte($data)\n    {\n        $length = Tools::strlen($data);\n        for ($i = 0; $i < $length; ++$i) {\n            if (ord(($data[$i])) > 128) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * MIME encode the string.\n     *\n     * @param string $string The string to encode\n     * @param string $charset The character set to use\n     * @param string $newline The newline character(s)\n     *\n     * @return mixed|string MIME encoded string\n     */\n    public static function mimeEncode($string, $charset = 'UTF-8', $newline = \"\\r\\n\")\n    {\n        if (!self::isMultibyte($string) && Tools::strlen($string) < 75) {\n            return $string;\n        }\n\n        $charset = Tools::strtoupper($charset);\n        $start = '=?' . $charset . '?B?';\n        $end = '?=';\n        $sep = $end . $newline . ' ' . $start;\n        $length = 75 - Tools::strlen($start) - Tools::strlen($end);\n        $length = $length - ($length % 4);\n\n        if ($charset === 'UTF-8') {\n            $parts = [];\n            $maxchars = floor(($length * 3) / 4);\n            $stringLength = Tools::strlen($string);\n\n            while ($stringLength > $maxchars) {\n                $i = (int) $maxchars;\n                $result = ord($string[$i]);\n\n                while ($result >= 128 && $result <= 191) {\n                    $result = ord($string[--$i]);\n                }\n\n                $parts[] = base64_encode(Tools::substr($string, 0, $i));\n                $string = Tools::substr($string, $i);\n                $stringLength = Tools::strlen($string);\n            }\n\n            $parts[] = base64_encode($string);\n            $string = implode($sep, $parts);\n        } else {\n            $string = chunk_split(base64_encode($string), $length, $sep);\n            $string = preg_replace('/' . preg_quote($sep) . '$/', '', $string);\n        }\n\n        return $start . $string . $end;\n    }\n\n    /**\n     * Automatically convert email to Punycode.\n     *\n     * Try to use INTL_IDNA_VARIANT_UTS46 only if defined, else use INTL_IDNA_VARIANT_2003\n     * See https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003\n     *\n     * @param string $to Email address\n     *\n     * @return string\n     */\n    public static function toPunycode($to)\n    {\n        $address = explode('@', $to);\n        if (empty($address[0]) || empty($address[1])) {\n            return $to;\n        }\n\n        if (defined('INTL_IDNA_VARIANT_UTS46')) {\n            return $address[0] . '@' . idn_to_ascii($address[1], 0, INTL_IDNA_VARIANT_UTS46);\n        }\n\n        /*\n         * INTL_IDNA_VARIANT_2003 const will be removed in PHP 8.\n         * See https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003\n         */\n        if (defined('INTL_IDNA_VARIANT_2003')) {\n            return $address[0] . '@' . idn_to_ascii($address[1], 0, INTL_IDNA_VARIANT_2003);\n        }\n\n        return $address[0] . '@' . idn_to_ascii($address[1]);\n    }\n\n    /**\n     * Generic function to dieOrLog with translations.\n     *\n     * @param bool $die Should die\n     * @param string $message Message\n     * @param array $templates Templates list\n     * @param string $domain Translation domain\n     */\n    protected static function dieOrLog(\n        $die,\n        $message,\n        $templates = [],\n        $domain = 'Admin.Advparameters.Notification'\n    ) {\n        Tools::dieOrLog(\n            Context::getContext()->getTranslator()->trans(\n                $message,\n                $templates,\n                $domain\n            ),\n            $die\n        );\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * @property CustomerThread $object\n */\nclass AdminCustomerThreadsControllerCore extends AdminController\n{\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->context = Context::getContext();\n        $this->table = 'customer_thread';\n        $this->className = 'CustomerThread';\n        $this->lang = false;\n\n        $contact_array = array();\n        $contacts = Contact::getContacts($this->context->language->id);\n\n        foreach ($contacts as $contact) {\n            $contact_array[$contact['id_contact']] = $contact['name'];\n        }\n\n        $language_array = array();\n        $languages = Language::getLanguages();\n        foreach ($languages as $language) {\n            $language_array[$language['id_lang']] = $language['name'];\n        }\n\n        parent::__construct();\n\n        $icon_array = array(\n            'open' => array('class' => 'icon-circle text-success', 'alt' => $this->trans('Open', array(), 'Admin.Catalog.Feature')),\n            'closed' => array('class' => 'icon-circle text-danger', 'alt' => $this->trans('Closed', array(), 'Admin.Catalog.Feature')),\n            'pending1' => array('class' => 'icon-circle text-warning', 'alt' => $this->trans('Pending 1', array(), 'Admin.Catalog.Feature')),\n            'pending2' => array('class' => 'icon-circle text-warning', 'alt' => $this->trans('Pending 2', array(), 'Admin.Catalog.Feature')),\n        );\n\n        $status_array = array();\n        foreach ($icon_array as $k => $v) {\n            $status_array[$k] = $v['alt'];\n        }\n\n        $this->fields_list = array(\n            'id_customer_thread' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'align' => 'center',\n                'class' => 'fixed-width-xs',\n            ),\n            'customer' => array(\n                'title' => $this->trans('Customer', array(), 'Admin.Global'),\n                'filter_key' => 'customer',\n                'tmpTableFilter' => true,\n            ),\n            'email' => array(\n                'title' => $this->trans('Email', array(), 'Admin.Global'),\n                'filter_key' => 'a!email',\n            ),\n            'contact' => array(\n                'title' => $this->trans('Type', array(), 'Admin.Catalog.Feature'),\n                'type' => 'select',\n                'list' => $contact_array,\n                'filter_key' => 'cl!id_contact',\n                'filter_type' => 'int',\n            ),\n            'language' => array(\n                'title' => $this->trans('Language', array(), 'Admin.Global'),\n                'type' => 'select',\n                'list' => $language_array,\n                'filter_key' => 'l!id_lang',\n                'filter_type' => 'int',\n            ),\n            'status' => array(\n                'title' => $this->trans('Status', array(), 'Admin.Global'),\n                'type' => 'select',\n                'list' => $status_array,\n                'icon' => $icon_array,\n                'align' => 'center',\n                'filter_key' => 'a!status',\n                'filter_type' => 'string',\n            ),\n            'employee' => array(\n                'title' => $this->trans('Employee', array(), 'Admin.Global'),\n                'filter_key' => 'employee',\n                'tmpTableFilter' => true,\n            ),\n            'messages' => array(\n                'title' => $this->trans('Messages', array(), 'Admin.Catalog.Feature'),\n                'filter_key' => 'messages',\n                'tmpTableFilter' => true,\n                'maxlength' => 40,\n            ),\n            'private' => array(\n                'title' => $this->trans('Private', array(), 'Admin.Catalog.Feature'),\n                'type' => 'select',\n                'filter_key' => 'private',\n                'align' => 'center',\n                'cast' => 'intval',\n                'callback' => 'printOptinIcon',\n                'list' => array(\n                    '0' => $this->trans('No', array(), 'Admin.Global'),\n                    '1' => $this->trans('Yes', array(), 'Admin.Global'),\n                ),\n            ),\n            'date_upd' => array(\n                'title' => $this->trans('Last message', array(), 'Admin.Catalog.Feature'),\n                'havingFilter' => true,\n                'type' => 'datetime',\n            ),\n        );\n\n        $this->bulk_actions = array(\n            'delete' => array(\n                'text' => $this->trans('Delete selected', array(), 'Admin.Actions'),\n                'confirm' => $this->trans('Delete selected items?', array(), 'Admin.Notifications.Warning'),\n                'icon' => 'icon-trash',\n            ),\n        );\n\n        $this->shopLinkType = 'shop';\n\n        $this->fields_options = array(\n            'contact' => array(\n                'title' => $this->trans('Contact options', array(), 'Admin.Catalog.Feature'),\n                'fields' => array(\n                    'PS_CUSTOMER_SERVICE_FILE_UPLOAD' => array(\n                        'title' => $this->trans('Allow file uploading', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Allow customers to upload files using the contact page.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'bool',\n                    ),\n                    'PS_CUSTOMER_SERVICE_SIGNATURE' => array(\n                        'title' => $this->trans('Default message', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Please fill out the message fields that appear by default when you answer a thread on the customer service page.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'textareaLang',\n                        'lang' => true,\n                    ),\n                ),\n                'submit' => array('title' => $this->trans('Save', array(), 'Admin.Actions')),\n            ),\n            'general' => array(\n                'title' => $this->trans('Customer service options', array(), 'Admin.Catalog.Feature'),\n                'fields' => array(\n                    'PS_SAV_IMAP_URL' => array(\n                        'title' => $this->trans('IMAP URL', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('URL for your IMAP server (ie.: mail.server.com).', array(), 'Admin.Catalog.Help'),\n                        'type' => 'text',\n                        'validation' => 'isValidImapUrl',\n                    ),\n                    'PS_SAV_IMAP_PORT' => array(\n                        'title' => $this->trans('IMAP port', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Port to use to connect to your IMAP server.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'text',\n                        'defaultValue' => 143,\n                    ),\n                    'PS_SAV_IMAP_USER' => array(\n                        'title' => $this->trans('IMAP user', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('User to use to connect to your IMAP server.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'text',\n                    ),\n                    'PS_SAV_IMAP_PWD' => array(\n                        'title' => $this->trans('IMAP password', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Password to use to connect your IMAP server.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'text',\n                    ),\n                    'PS_SAV_IMAP_DELETE_MSG' => array(\n                        'title' => $this->trans('Delete messages', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Delete messages after synchronization. If you do not enable this option, the synchronization will take more time.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'bool',\n                    ),\n                    'PS_SAV_IMAP_CREATE_THREADS' => array(\n                        'title' => $this->trans('Create new threads', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Create new threads for unrecognized emails.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'bool',\n                    ),\n                    'PS_SAV_IMAP_OPT_POP3' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/pop3)',\n                        'hint' => $this->trans('Use POP3 instead of IMAP.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'bool',\n                    ),\n                    'PS_SAV_IMAP_OPT_NORSH' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/norsh)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Do not use RSH or SSH to establish a preauthenticated IMAP sessions.', array(), 'Admin.Catalog.Help'),\n                    ),\n                    'PS_SAV_IMAP_OPT_SSL' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/ssl)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Use the Secure Socket Layer (TLS/SSL) to encrypt the session.', array(), 'Admin.Catalog.Help'),\n                    ),\n                    'PS_SAV_IMAP_OPT_VALIDATE-CERT' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/validate-cert)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Validate certificates from the TLS/SSL server.', array(), 'Admin.Catalog.Help'),\n                    ),\n                    'PS_SAV_IMAP_OPT_NOVALIDATE-CERT' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/novalidate-cert)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Do not validate certificates from the TLS/SSL server. This is only needed if a server uses self-signed certificates.', array(), 'Admin.Catalog.Help'),\n                    ),\n                    'PS_SAV_IMAP_OPT_TLS' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/tls)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Force use of start-TLS to encrypt the session, and reject connection to servers that do not support it.', array(), 'Admin.Catalog.Help'),\n                    ),\n                    'PS_SAV_IMAP_OPT_NOTLS' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/notls)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Do not use start-TLS to encrypt the session, even with servers that support it.', array(), 'Admin.Catalog.Help'),\n                    ),\n                ),\n                'submit' => array('title' => $this->trans('Save', array(), 'Admin.Actions')),\n            ),\n        );\n    }\n\n    public function renderList()\n    {\n        // Check the new IMAP messages before rendering the list\n        $this->renderProcessSyncImap();\n\n        $this->addRowAction('view');\n        $this->addRowAction('delete');\n\n        $this->_select = '\n\t\t\tCONCAT(c.`firstname`,\" \",c.`lastname`) as customer, cl.`name` as contact, l.`name` as language, group_concat(cm.`message`) as messages, cm.private,\n\t\t\t(\n\t\t\t\tSELECT IFNULL(CONCAT(LEFT(e.`firstname`, 1),\". \",e.`lastname`), \"--\")\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'customer_message` cm2\n\t\t\t\tINNER JOIN ' . _DB_PREFIX_ . 'employee e\n\t\t\t\t\tON e.`id_employee` = cm2.`id_employee`\n\t\t\t\tWHERE cm2.id_employee > 0\n\t\t\t\t\tAND cm2.`id_customer_thread` = a.`id_customer_thread`\n\t\t\t\tORDER BY cm2.`date_add` DESC LIMIT 1\n\t\t\t) as employee';\n\n        $this->_join = '\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer` c\n\t\t\t\tON c.`id_customer` = a.`id_customer`\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer_message` cm\n\t\t\t\tON cm.`id_customer_thread` = a.`id_customer_thread`\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'lang` l\n\t\t\t\tON l.`id_lang` = a.`id_lang`\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'contact_lang` cl\n\t\t\t\tON (cl.`id_contact` = a.`id_contact` AND cl.`id_lang` = ' . (int) $this->context->language->id . ')';\n\n        if ($id_order = Tools::getValue('id_order')) {\n            $this->_where .= ' AND id_order = ' . (int) $id_order;\n        }\n\n        $this->_group = 'GROUP BY cm.id_customer_thread';\n        $this->_orderBy = 'id_customer_thread';\n        $this->_orderWay = 'DESC';\n\n        $contacts = CustomerThread::getContacts();\n\n        $categories = Contact::getCategoriesContacts();\n\n        $params = array(\n            $this->trans('Total threads', array(), 'Admin.Catalog.Feature') => $all = CustomerThread::getTotalCustomerThreads(),\n            $this->trans('Threads pending', array(), 'Admin.Catalog.Feature') => $pending = CustomerThread::getTotalCustomerThreads('status LIKE \"%pending%\"'),\n            $this->trans('Total number of customer messages', array(), 'Admin.Catalog.Feature') => CustomerMessage::getTotalCustomerMessages('id_employee = 0'),\n            $this->trans('Total number of employee messages', array(), 'Admin.Catalog.Feature') => CustomerMessage::getTotalCustomerMessages('id_employee != 0'),\n            $this->trans('Unread threads', array(), 'Admin.Catalog.Feature') => $unread = CustomerThread::getTotalCustomerThreads('status = \"open\"'),\n            $this->trans('Closed threads', array(), 'Admin.Catalog.Feature') => $all - ($unread + $pending),\n        );\n\n        $this->tpl_list_vars = array(\n            'contacts' => $contacts,\n            'categories' => $categories,\n            'params' => $params,\n        );\n\n        return parent::renderList();\n    }\n\n    public function initToolbar()\n    {\n        parent::initToolbar();\n        unset($this->toolbar_btn['new']);\n    }\n\n    public function printOptinIcon($value, $customer)\n    {\n        return $value ? '<i class=\"icon-check\"></i>' : '<i class=\"icon-remove\"></i>';\n    }\n\n    public function postProcess()\n    {\n        if ($id_customer_thread = (int) Tools::getValue('id_customer_thread')) {\n            if (($id_contact = (int) Tools::getValue('id_contact'))) {\n                $result = Db::getInstance()->execute(\n                    '\n\t\t\t\t\tUPDATE ' . _DB_PREFIX_ . 'customer_thread\n\t\t\t\t\tSET id_contact = ' . $id_contact . '\n\t\t\t\t\tWHERE id_customer_thread = ' . $id_customer_thread\n                );\n                if ($result) {\n                    $this->object->id_contact = $id_contact;\n                }\n            }\n            if ($id_status = (int) Tools::getValue('setstatus')) {\n                $status_array = array(1 => 'open', 2 => 'closed', 3 => 'pending1', 4 => 'pending2');\n                $result = Db::getInstance()->execute('\n\t\t\t\t\tUPDATE ' . _DB_PREFIX_ . 'customer_thread\n\t\t\t\t\tSET status = \"' . $status_array[$id_status] . '\"\n\t\t\t\t\tWHERE id_customer_thread = ' . $id_customer_thread . ' LIMIT 1\n\t\t\t\t');\n                if ($result) {\n                    $this->object->status = $status_array[$id_status];\n                }\n            }\n            if (isset($_POST['id_employee_forward'])) {\n                $messages = Db::getInstance()->getRow('\n\t\t\t\t\tSELECT ct.*, cm.*, cl.name subject, CONCAT(e.firstname, \\' \\', e.lastname) employee_name,\n\t\t\t\t\t\tCONCAT(c.firstname, \\' \\', c.lastname) customer_name, c.firstname\n\t\t\t\t\tFROM ' . _DB_PREFIX_ . 'customer_thread ct\n\t\t\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'customer_message cm\n\t\t\t\t\t\tON (ct.id_customer_thread = cm.id_customer_thread)\n\t\t\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'contact_lang cl\n\t\t\t\t\t\tON (cl.id_contact = ct.id_contact AND cl.id_lang = ' . (int) $this->context->language->id . ')\n\t\t\t\t\tLEFT OUTER JOIN ' . _DB_PREFIX_ . 'employee e\n\t\t\t\t\t\tON e.id_employee = cm.id_employee\n\t\t\t\t\tLEFT OUTER JOIN ' . _DB_PREFIX_ . 'customer c\n\t\t\t\t\t\tON (c.email = ct.email)\n\t\t\t\t\tWHERE ct.id_customer_thread = ' . (int) Tools::getValue('id_customer_thread') . '\n\t\t\t\t\tORDER BY cm.date_add DESC\n\t\t\t\t');\n                $output = $this->displayMessage($messages, true, (int) Tools::getValue('id_employee_forward'));\n                $cm = new CustomerMessage();\n                $cm->id_employee = (int) $this->context->employee->id;\n                $cm->id_customer_thread = (int) Tools::getValue('id_customer_thread');\n                $cm->ip_address = (int) ip2long(Tools::getRemoteAddr());\n                $current_employee = $this->context->employee;\n                $id_employee = (int) Tools::getValue('id_employee_forward');\n                $employee = new Employee($id_employee);\n                $email = Tools::getValue('email');\n                $message = Tools::getValue('message_forward');\n                if (($error = $cm->validateField('message', $message, null, array(), true)) !== true) {\n                    $this->errors[] = $error;\n                } elseif ($id_employee && $employee && Validate::isLoadedObject($employee)) {\n                    $params = array(\n                        '{messages}' => stripslashes($output),\n                        '{employee}' => $current_employee->firstname . ' ' . $current_employee->lastname,\n                        '{comment}' => stripslashes(Tools::nl2br($_POST['message_forward'])),\n                        '{firstname}' => $employee->firstname,\n                        '{lastname}' => $employee->lastname,\n                    );\n\n                    if (Mail::Send(\n                        $this->context->language->id,\n                        'forward_msg',\n                        $this->trans(\n                            'Fwd: Customer message',\n                            array(),\n                            'Emails.Subject',\n                            $this->context->language->locale\n                        ),\n                        $params,\n                        $employee->email,\n                        $employee->firstname . ' ' . $employee->lastname,\n                        $current_employee->email,\n                        $current_employee->firstname . ' ' . $current_employee->lastname,\n                        null,\n                        null,\n                        _PS_MAIL_DIR_,\n                        true\n                    )) {\n                        $cm->private = 1;\n                        $cm->message = $this->trans('Message forwarded to', array(), 'Admin.Catalog.Feature') . ' ' . $employee->firstname . ' ' . $employee->lastname . \"\\n\" . $this->trans('Comment:') . ' ' . $message;\n                        $cm->add();\n                    }\n                } elseif ($email && Validate::isEmail($email)) {\n                    $params = array(\n                        '{messages}' => Tools::nl2br(stripslashes($output)),\n                        '{employee}' => $current_employee->firstname . ' ' . $current_employee->lastname,\n                        '{comment}' => stripslashes($_POST['message_forward']),\n                        '{firstname}' => '',\n                        '{lastname}' => '',\n                    );\n\n                    if (Mail::Send(\n                        $this->context->language->id,\n                        'forward_msg',\n                        $this->trans(\n                            'Fwd: Customer message',\n                            array(),\n                            'Emails.Subject',\n                            $this->context->language->locale\n                        ),\n                        $params,\n                        $email,\n                        null,\n                        $current_employee->email,\n                        $current_employee->firstname . ' ' . $current_employee->lastname,\n                        null,\n                        null,\n                        _PS_MAIL_DIR_,\n                        true\n                    )) {\n                        $cm->message = $this->trans('Message forwarded to', array(), 'Admin.Catalog.Feature') . ' ' . $email . \"\\n\" . $this->trans('Comment:') . ' ' . $message;\n                        $cm->add();\n                    }\n                } else {\n                    $this->errors[] = '<div class=\"alert error\">' . $this->trans('The email address is invalid.', array(), 'Admin.Notifications.Error') . '</div>';\n                }\n            }\n            if (Tools::isSubmit('submitReply')) {\n                $ct = new CustomerThread($id_customer_thread);\n\n                ShopUrl::cacheMainDomainForShop((int) $ct->id_shop);\n\n                $cm = new CustomerMessage();\n                $cm->id_employee = (int) $this->context->employee->id;\n                $cm->id_customer_thread = $ct->id;\n                $cm->ip_address = (int) ip2long(Tools::getRemoteAddr());\n                $cm->message = Tools::getValue('reply_message');\n                if (($error = $cm->validateField('message', $cm->message, null, array(), true)) !== true) {\n                    $this->errors[] = $error;\n                } elseif (isset($_FILES) && !empty($_FILES['joinFile']['name']) && $_FILES['joinFile']['error'] != 0) {\n                    $this->errors[] = $this->trans('An error occurred during the file upload process.', array(), 'Admin.Notifications.Error');\n                } elseif ($cm->add()) {\n                    $file_attachment = null;\n                    if (!empty($_FILES['joinFile']['name'])) {\n                        $file_attachment['content'] = file_get_contents($_FILES['joinFile']['tmp_name']);\n                        $file_attachment['name'] = $_FILES['joinFile']['name'];\n                        $file_attachment['mime'] = $_FILES['joinFile']['type'];\n                    }\n                    $customer = new Customer($ct->id_customer);\n                    $params = array(\n                        '{reply}' => Tools::nl2br(Tools::getValue('reply_message')),\n                        '{link}' => Tools::url(\n                            $this->context->link->getPageLink('contact', true, null, null, false, $ct->id_shop),\n                            'id_customer_thread=' . (int) $ct->id . '&token=' . $ct->token\n                        ),\n                        '{firstname}' => $customer->firstname,\n                        '{lastname}' => $customer->lastname,\n                    );\n                    //#ct == id_customer_thread    #tc == token of thread   <== used in the synchronization imap\n                    $contact = new Contact((int) $ct->id_contact, (int) $ct->id_lang);\n\n                    if (Validate::isLoadedObject($contact)) {\n                        $from_name = $contact->name;\n                        $from_email = $contact->email;\n                    } else {\n                        $from_name = null;\n                        $from_email = null;\n                    }\n\n                    $language = new Language((int) $ct->id_lang);\n\n                    if (Mail::Send(\n                        (int) $ct->id_lang,\n                        'reply_msg',\n                        $this->trans(\n                            'An answer to your message is available #ct%thread_id% #tc%thread_token%',\n                            array(\n                                '%thread_id%' => $ct->id,\n                                '%thread_token%' => $ct->token,\n                            ),\n                            'Emails.Subject',\n                            $language->locale\n                        ),\n                        $params,\n                        Tools::getValue('msg_email'),\n                        null,\n                        $from_email,\n                        $from_name,\n                        $file_attachment,\n                        null,\n                        _PS_MAIL_DIR_,\n                        true,\n                        $ct->id_shop\n                    )) {\n                        $ct->status = 'closed';\n                        $ct->update();\n                    }\n                    Tools::redirectAdmin(\n                        self::$currentIndex . '&id_customer_thread=' . (int) $id_customer_thread . '&viewcustomer_thread&token=' . Tools::getValue('token')\n                    );\n                } else {\n                    $this->errors[] = $this->trans('An error occurred. Your message was not sent. Please contact your system administrator.', array(), 'Admin.Orderscustomers.Notification');\n                }\n            }\n        }\n\n        return parent::postProcess();\n    }\n\n    public function initContent()\n    {\n        if (isset($_GET['filename']) && file_exists(_PS_UPLOAD_DIR_ . $_GET['filename']) && Validate::isFileName($_GET['filename'])) {\n            AdminCustomerThreadsController::openUploadedFile();\n        }\n\n        return parent::initContent();\n    }\n\n    protected function openUploadedFile()\n    {\n        $filename = $_GET['filename'];\n\n        $extensions = array(\n            '.txt' => 'text/plain',\n            '.rtf' => 'application/rtf',\n            '.doc' => 'application/msword',\n            '.docx' => 'application/msword',\n            '.pdf' => 'application/pdf',\n            '.zip' => 'multipart/x-zip',\n            '.png' => 'image/png',\n            '.jpeg' => 'image/jpeg',\n            '.gif' => 'image/gif',\n            '.jpg' => 'image/jpeg',\n        );\n\n        $extension = false;\n        foreach ($extensions as $key => $val) {\n            if (substr(Tools::strtolower($filename), -4) == $key || substr(Tools::strtolower($filename), -5) == $key) {\n                $extension = $val;\n\n                break;\n            }\n        }\n\n        if (!$extension || !Validate::isFileName($filename)) {\n            die(Tools::displayError());\n        }\n\n        if (ob_get_level() && ob_get_length() > 0) {\n            ob_end_clean();\n        }\n        header('Content-Type: ' . $extension);\n        header('Content-Disposition:attachment;filename=\"' . $filename . '\"');\n        readfile(_PS_UPLOAD_DIR_ . $filename);\n        die;\n    }\n\n    public function renderKpis()\n    {\n        $time = time();\n        $kpis = array();\n\n        /* The data generation is located in AdminStatsControllerCore */\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-pending-messages';\n        $helper->icon = 'icon-envelope';\n        $helper->color = 'color1';\n        $helper->href = $this->context->link->getAdminLink('AdminCustomerThreads');\n        $helper->title = $this->trans('Pending Discussion Threads', array(), 'Admin.Catalog.Feature');\n        if (ConfigurationKPI::get('PENDING_MESSAGES') !== false) {\n            $helper->value = ConfigurationKPI::get('PENDING_MESSAGES');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=pending_messages';\n        $helper->refresh = (bool) (ConfigurationKPI::get('PENDING_MESSAGES_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-age';\n        $helper->icon = 'icon-time';\n        $helper->color = 'color2';\n        $helper->title = $this->trans('Average Response Time', array(), 'Admin.Catalog.Feature');\n        $helper->subtitle = $this->trans('30 days', array(), 'Admin.Global');\n        if (ConfigurationKPI::get('AVG_MSG_RESPONSE_TIME') !== false) {\n            $helper->value = ConfigurationKPI::get('AVG_MSG_RESPONSE_TIME');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=avg_msg_response_time';\n        $helper->refresh = (bool) (ConfigurationKPI::get('AVG_MSG_RESPONSE_TIME_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-messages-per-thread';\n        $helper->icon = 'icon-copy';\n        $helper->color = 'color3';\n        $helper->title = $this->trans('Messages per Thread', array(), 'Admin.Catalog.Feature');\n        $helper->subtitle = $this->trans('30 day', array(), 'Admin.Global');\n        if (ConfigurationKPI::get('MESSAGES_PER_THREAD') !== false) {\n            $helper->value = ConfigurationKPI::get('MESSAGES_PER_THREAD');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=messages_per_thread';\n        $helper->refresh = (bool) (ConfigurationKPI::get('MESSAGES_PER_THREAD_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpiRow();\n        $helper->kpis = $kpis;\n\n        return $helper->generate();\n    }\n\n    public function renderView()\n    {\n        if (!$id_customer_thread = (int) Tools::getValue('id_customer_thread')) {\n            return;\n        }\n\n        $this->context = Context::getContext();\n        if (!($thread = $this->loadObject())) {\n            return;\n        }\n        $this->context->cookie->{'customer_threadFilter_cl!id_contact'} = $thread->id_contact;\n\n        $employees = Employee::getEmployees();\n\n        $messages = CustomerThread::getMessageCustomerThreads($id_customer_thread);\n\n        foreach ($messages as $key => $mess) {\n            if ($mess['id_employee']) {\n                $employee = new Employee($mess['id_employee']);\n                $messages[$key]['employee_image'] = $employee->getImage();\n            }\n            if (isset($mess['file_name']) && $mess['file_name'] != '') {\n                $messages[$key]['file_name'] = _THEME_PROD_PIC_DIR_ . $mess['file_name'];\n            } else {\n                unset($messages[$key]['file_name']);\n            }\n\n            if ($mess['id_product']) {\n                $product = new Product((int) $mess['id_product'], false, $this->context->language->id);\n                if (Validate::isLoadedObject($product)) {\n                    $messages[$key]['product_name'] = $product->name;\n                    $messages[$key]['product_link'] = $this->context->link->getAdminLink('AdminProducts') . '&updateproduct&id_product=' . (int) $product->id;\n                }\n            }\n        }\n\n        $next_thread = CustomerThread::getNextThread((int) $thread->id);\n\n        $contacts = Contact::getContacts($this->context->language->id);\n\n        $actions = array();\n\n        if ($next_thread) {\n            $next_thread = array(\n                'href' => self::$currentIndex . '&id_customer_thread=' . (int) $next_thread . '&viewcustomer_thread&token=' . $this->token,\n                'name' => $this->trans('Reply to the next unanswered message in this thread', array(), 'Admin.Catalog.Feature'),\n            );\n        }\n\n        if ($thread->status != 'closed') {\n            $actions['closed'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=2&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Mark as \"handled\"', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 2,\n            );\n        } else {\n            $actions['open'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=1&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Re-open', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 1,\n            );\n        }\n\n        if ($thread->status != 'pending1') {\n            $actions['pending1'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=3&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Mark as \"pending 1\" (will be answered later)', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 3,\n            );\n        } else {\n            $actions['pending1'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=1&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Disable pending status', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 1,\n            );\n        }\n\n        if ($thread->status != 'pending2') {\n            $actions['pending2'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=4&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Mark as \"pending 2\" (will be answered later)', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 4,\n            );\n        } else {\n            $actions['pending2'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=1&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Disable pending status', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 1,\n            );\n        }\n\n        if ($thread->id_customer) {\n            $customer = new Customer($thread->id_customer);\n            $orders = Order::getCustomerOrders($customer->id);\n            if ($orders && count($orders)) {\n                $total_ok = 0;\n                $orders_ok = array();\n                foreach ($orders as $key => $order) {\n                    if ($order['valid']) {\n                        $orders_ok[] = $order;\n                        $total_ok += $order['total_paid_real'] / $order['conversion_rate'];\n                    }\n                    $orders[$key]['date_add'] = Tools::displayDate($order['date_add']);\n                    $orders[$key]['total_paid_real'] = Tools::displayPrice($order['total_paid_real'], new Currency((int) $order['id_currency']));\n                }\n            }\n\n            $products = $customer->getBoughtProducts();\n            if ($products && count($products)) {\n                foreach ($products as $key => $product) {\n                    $products[$key]['date_add'] = Tools::displayDate($product['date_add'], null, true);\n                }\n            }\n        }\n        $timeline_items = $this->getTimeline($messages, $thread->id_order);\n        $first_message = $messages[0];\n\n        if (!$messages[0]['id_employee']) {\n            unset($messages[0]);\n        }\n\n        $contact = '';\n        foreach ($contacts as $c) {\n            if ($c['id_contact'] == $thread->id_contact) {\n                $contact = $c['name'];\n            }\n        }\n\n        $this->tpl_view_vars = array(\n            'id_customer_thread' => $id_customer_thread,\n            'thread' => $thread,\n            'actions' => $actions,\n            'employees' => $employees,\n            'current_employee' => $this->context->employee,\n            'messages' => $messages,\n            'first_message' => $first_message,\n            'contact' => $contact,\n            'next_thread' => $next_thread,\n            'orders' => isset($orders) ? $orders : false,\n            'customer' => isset($customer) ? $customer : false,\n            'products' => isset($products) ? $products : false,\n            'total_ok' => isset($total_ok) ? Tools::displayPrice($total_ok, $this->context->currency) : false,\n            'orders_ok' => isset($orders_ok) ? $orders_ok : false,\n            'count_ok' => isset($orders_ok) ? count($orders_ok) : false,\n            'PS_CUSTOMER_SERVICE_SIGNATURE' => str_replace('\\r\\n', \"\\n\", Configuration::get('PS_CUSTOMER_SERVICE_SIGNATURE', (int) $thread->id_lang)),\n            'timeline_items' => $timeline_items,\n        );\n\n        if ($next_thread) {\n            $this->tpl_view_vars['next_thread'] = $next_thread;\n        }\n\n        return parent::renderView();\n    }\n\n    public function getTimeline($messages, $id_order)\n    {\n        $timeline = array();\n        foreach ($messages as $message) {\n            $product = new Product((int) $message['id_product'], false, $this->context->language->id);\n            $link_product = $this->context->link->getAdminLink('AdminOrders') . '&vieworder&id_order=' . (int) $product->id;\n\n            $content = '';\n            if (!$message['private']) {\n                $content .= $this->trans('Message to: ', array(), 'Admin.Catalog.Feature') . ' <span class=\"badge\">' . (!$message['id_employee'] ? $message['subject'] : $message['customer_name']) . '</span><br/>';\n            }\n            if (Validate::isLoadedObject($product)) {\n                $content .= '<br/>' . $this->trans('Product: ', array(), 'Admin.Catalog.Feature') . '<span class=\"label label-info\">' . $product->name . '</span><br/><br/>';\n            }\n            $content .= Tools::safeOutput($message['message']);\n\n            $timeline[$message['date_add']][] = array(\n                'arrow' => 'left',\n                'background_color' => '',\n                'icon' => 'icon-envelope',\n                'content' => $content,\n                'date' => $message['date_add'],\n            );\n        }\n\n        $order = new Order((int) $id_order);\n        if (Validate::isLoadedObject($order)) {\n            $order_history = $order->getHistory($this->context->language->id);\n            foreach ($order_history as $history) {\n                $link_order = $this->context->link->getAdminLink('AdminOrders') . '&vieworder&id_order=' . (int) $order->id;\n\n                $content = '<a class=\"badge\" target=\"_blank\" href=\"' . Tools::safeOutput($link_order) . '\">' . $this->trans('Order', array(), 'Admin.Global') . ' #' . (int) $order->id . '</a><br/><br/>';\n\n                $content .= '<span>' . $this->trans('Status:', array(), 'Admin.Catalog.Feature') . ' ' . $history['ostate_name'] . '</span>';\n\n                $timeline[$history['date_add']][] = array(\n                    'arrow' => 'right',\n                    'alt' => true,\n                    'background_color' => $history['color'],\n                    'icon' => 'icon-credit-card',\n                    'content' => $content,\n                    'date' => $history['date_add'],\n                    'see_more_link' => $link_order,\n                );\n            }\n        }\n        krsort($timeline);\n\n        return $timeline;\n    }\n\n    protected function displayMessage($message, $email = false, $id_employee = null)\n    {\n        $tpl = $this->createTemplate('message.tpl');\n\n        $contacts = Contact::getContacts($this->context->language->id);\n        foreach ($contacts as $contact) {\n            $contact_array[$contact['id_contact']] = array('id_contact' => $contact['id_contact'], 'name' => $contact['name']);\n        }\n        $contacts = $contact_array;\n\n        if (!$email) {\n            if (!empty($message['id_product']) && empty($message['employee_name'])) {\n                $id_order_product = Order::getIdOrderProduct((int) $message['id_customer'], (int) $message['id_product']);\n            }\n        }\n        $message['date_add'] = Tools::displayDate($message['date_add'], null, true);\n        $message['user_agent'] = strip_tags($message['user_agent']);\n        $message['message'] = preg_replace(\n            '/(https?:\\/\\/[a-z0-9#%&_=\\(\\)\\.\\? \\+\\-@\\/]{6,1000})([\\s\\n<])/Uui',\n            '<a href=\"\\1\">\\1</a>\\2',\n            html_entity_decode(\n                $message['message'],\n            ENT_QUOTES,\n                'UTF-8'\n            )\n        );\n\n        $is_valid_order_id = true;\n        $order = new Order((int) $message['id_order']);\n\n        if (!Validate::isLoadedObject($order)) {\n            $is_valid_order_id = false;\n        }\n\n        $tpl->assign(array(\n            'thread_url' => Tools::getAdminUrl(basename(_PS_ADMIN_DIR_) . '/' .\n                $this->context->link->getAdminLink('AdminCustomerThreads') . '&amp;id_customer_thread='\n                . (int) $message['id_customer_thread'] . '&amp;viewcustomer_thread=1'),\n            'link' => Context::getContext()->link,\n            'current' => self::$currentIndex,\n            'token' => $this->token,\n            'message' => $message,\n            'id_order_product' => isset($id_order_product) ? $id_order_product : null,\n            'email' => $email,\n            'id_employee' => $id_employee,\n            'PS_SHOP_NAME' => Configuration::get('PS_SHOP_NAME'),\n            'file_name' => file_exists(_PS_UPLOAD_DIR_ . $message['file_name']),\n            'contacts' => $contacts,\n            'is_valid_order_id' => $is_valid_order_id,\n        ));\n\n        return $tpl->fetch();\n    }\n\n    protected function displayButton($content)\n    {\n        return '<div><p>' . $content . '</p></div>';\n    }\n\n    public function renderOptions()\n    {\n        if (Configuration::get('PS_SAV_IMAP_URL')\n        && Configuration::get('PS_SAV_IMAP_PORT')\n        && Configuration::get('PS_SAV_IMAP_USER')\n        && Configuration::get('PS_SAV_IMAP_PWD')) {\n            $this->tpl_option_vars['use_sync'] = true;\n        } else {\n            $this->tpl_option_vars['use_sync'] = false;\n        }\n\n        return parent::renderOptions();\n    }\n\n    /**\n     * AdminController::getList() override.\n     *\n     * @see AdminController::getList()\n     *\n     * @param int $id_lang\n     * @param string|null $order_by\n     * @param string|null $order_way\n     * @param int $start\n     * @param int|null $limit\n     * @param int|bool $id_lang_shop\n     *\n     * @throws PrestaShopException\n     */\n    public function getList($id_lang, $order_by = null, $order_way = null, $start = 0, $limit = null, $id_lang_shop = false)\n    {\n        parent::getList($id_lang, $order_by, $order_way, $start, $limit, $id_lang_shop);\n\n        $nb_items = count($this->_list);\n        for ($i = 0; $i < $nb_items; ++$i) {\n            if (isset($this->_list[$i]['messages'])) {\n                $this->_list[$i]['messages'] = Tools::htmlentitiesDecodeUTF8($this->_list[$i]['messages']);\n            }\n        }\n    }\n\n    public function updateOptionPsSavImapOpt($value)\n    {\n        if ($this->access('edit') != '1') {\n            throw new PrestaShopException($this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error'));\n        }\n\n        if (!$this->errors && $value) {\n            Configuration::updateValue('PS_SAV_IMAP_OPT', implode('', $value));\n        }\n    }\n\n    public function ajaxProcessMarkAsRead()\n    {\n        if ($this->access('edit') != '1') {\n            throw new PrestaShopException($this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error'));\n        }\n\n        $id_thread = Tools::getValue('id_thread');\n        $messages = CustomerThread::getMessageCustomerThreads($id_thread);\n        if (count($messages)) {\n            Db::getInstance()->execute('UPDATE `' . _DB_PREFIX_ . 'customer_message` set `read` = 1 WHERE `id_employee` = ' . (int) $this->context->employee->id . ' AND `id_customer_thread` = ' . (int) $id_thread);\n        }\n    }\n\n    /**\n     * Call the IMAP synchronization during an AJAX process.\n     *\n     * @throws PrestaShopException\n     */\n    public function ajaxProcessSyncImap()\n    {\n        if ($this->access('edit') != '1') {\n            throw new PrestaShopException($this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error'));\n        }\n\n        if (Tools::isSubmit('syncImapMail')) {\n            die(json_encode($this->syncImap()));\n        }\n    }\n\n    /**\n     * Call the IMAP synchronization during the render process.\n     */\n    public function renderProcessSyncImap()\n    {\n        // To avoid an error if the IMAP isn't configured, we check the configuration here, like during\n        // the synchronization. All parameters will exists.\n        if (!(Configuration::get('PS_SAV_IMAP_URL')\n            || Configuration::get('PS_SAV_IMAP_PORT')\n            || Configuration::get('PS_SAV_IMAP_USER')\n            || Configuration::get('PS_SAV_IMAP_PWD'))) {\n            return;\n        }\n\n        // Executes the IMAP synchronization.\n        $sync_errors = $this->syncImap();\n\n        // Show the errors.\n        if (isset($sync_errors['hasError']) && $sync_errors['hasError']) {\n            if (isset($sync_errors['errors'])) {\n                foreach ($sync_errors['errors'] as &$error) {\n                    $this->displayWarning($error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Imap synchronization method.\n     *\n     * @return array errors list\n     */\n    public function syncImap()\n    {\n        if (!($url = Configuration::get('PS_SAV_IMAP_URL'))\n            || !($port = Configuration::get('PS_SAV_IMAP_PORT'))\n            || !($user = Configuration::get('PS_SAV_IMAP_USER'))\n            || !($password = Configuration::get('PS_SAV_IMAP_PWD'))) {\n            return array('hasError' => true, 'errors' => array('IMAP configuration is not correct'));\n        }\n\n        $conf = Configuration::getMultiple(array(\n            'PS_SAV_IMAP_OPT_POP3', 'PS_SAV_IMAP_OPT_NORSH', 'PS_SAV_IMAP_OPT_SSL',\n            'PS_SAV_IMAP_OPT_VALIDATE-CERT', 'PS_SAV_IMAP_OPT_NOVALIDATE-CERT',\n            'PS_SAV_IMAP_OPT_TLS', 'PS_SAV_IMAP_OPT_NOTLS', ));\n\n        $conf_str = '';\n        if ($conf['PS_SAV_IMAP_OPT_POP3']) {\n            $conf_str .= '/pop3';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_NORSH']) {\n            $conf_str .= '/norsh';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_SSL']) {\n            $conf_str .= '/ssl';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_VALIDATE-CERT']) {\n            $conf_str .= '/validate-cert';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_NOVALIDATE-CERT']) {\n            $conf_str .= '/novalidate-cert';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_TLS']) {\n            $conf_str .= '/tls';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_NOTLS']) {\n            $conf_str .= '/notls';\n        }\n\n        if (!function_exists('imap_open')) {\n            return array('hasError' => true, 'errors' => array('imap is not installed on this server'));\n        }\n\n        $mbox = @imap_open('{' . $url . ':' . $port . $conf_str . '}', $user, $password);\n\n        //checks if there is no error when connecting imap server\n        $errors = imap_errors();\n        if (is_array($errors)) {\n            $errors = array_unique($errors);\n        }\n        $str_errors = '';\n        $str_error_delete = '';\n\n        if (count($errors) && is_array($errors)) {\n            $str_errors = '';\n            foreach ($errors as $error) {\n                $str_errors .= $error . ', ';\n            }\n            $str_errors = rtrim(trim($str_errors), ',');\n        }\n        //checks if imap connexion is active\n        if (!$mbox) {\n            return array('hasError' => true, 'errors' => array('Cannot connect to the mailbox :<br />' . ($str_errors)));\n        }\n\n        //Returns information about the current mailbox. Returns FALSE on failure.\n        $check = imap_check($mbox);\n        if (!$check) {\n            return array('hasError' => true, 'errors' => array('Fail to get information about the current mailbox'));\n        }\n\n        if ($check->Nmsgs == 0) {\n            return array('hasError' => true, 'errors' => array('NO message to sync'));\n        }\n\n        $result = imap_fetch_overview($mbox, \"1:{$check->Nmsgs}\", 0);\n        $message_errors = array();\n        foreach ($result as $overview) {\n            //check if message exist in database\n            if (isset($overview->subject)) {\n                $subject = $overview->subject;\n            } else {\n                $subject = '';\n            }\n            //Creating an md5 to check if message has been allready processed\n            $md5 = md5($overview->date . $overview->from . $subject . $overview->msgno);\n            $exist = Db::getInstance()->getValue(\n                'SELECT `md5_header`\n\t\t\t\t\t\t FROM `' . _DB_PREFIX_ . 'customer_message_sync_imap`\n\t\t\t\t\t\t WHERE `md5_header` = \\'' . pSQL($md5) . '\\''\n            );\n            if ($exist) {\n                if (Configuration::get('PS_SAV_IMAP_DELETE_MSG')) {\n                    if (!imap_delete($mbox, $overview->msgno)) {\n                        $str_error_delete = ', Fail to delete message';\n                    }\n                }\n            } else {\n                //check if subject has id_order\n                preg_match('/\\#ct([0-9]*)/', $subject, $matches1);\n                preg_match('/\\#tc([0-9-a-z-A-Z]*)/', $subject, $matches2);\n                $match_found = false;\n                if (isset($matches1[1], $matches2[1])) {\n                    $match_found = true;\n                }\n\n                $new_ct = (Configuration::get('PS_SAV_IMAP_CREATE_THREADS') && !$match_found && (strpos($subject, '[no_sync]') == false));\n\n                $fetch_succeed = true;\n                if ($match_found || $new_ct) {\n                    if ($new_ct) {\n                        // parse from attribute and fix it if needed\n                        $from_parsed = array();\n                        if (!isset($overview->from)\n                            || (!preg_match('/<(' . Tools::cleanNonUnicodeSupport('[a-z\\p{L}0-9!#$%&\\'*+\\/=?^`{}|~_-]+[.a-z\\p{L}0-9!#$%&\\'*+\\/=?^`{}|~_-]*@[a-z\\p{L}0-9]+[._a-z\\p{L}0-9-]*\\.[a-z0-9]+') . ')>/', $overview->from, $from_parsed)\n                            && !Validate::isEmail($overview->from))) {\n                            $message_errors[] = $this->trans('Cannot create message in a new thread.', array(), 'Admin.Orderscustomers.Notification');\n\n                            continue;\n                        }\n\n                        // fix email format: from \"Mr Sanders <sanders@blueforest.com>\" to \"sanders@blueforest.com\"\n                        $from = $overview->from;\n                        if (isset($from_parsed[1])) {\n                            $from = $from_parsed[1];\n                        }\n\n                        // we want to assign unrecognized mails to the right contact category\n                        $contacts = Contact::getContacts($this->context->language->id);\n                        if (!$contacts) {\n                            continue;\n                        }\n\n                        foreach ($contacts as $contact) {\n                            if (isset($overview->to) && strpos($overview->to, $contact['email']) !== false) {\n                                $id_contact = $contact['id_contact'];\n                            }\n                        }\n\n                        if (!isset($id_contact)) { // if not use the default contact category\n                            $id_contact = $contacts[0]['id_contact'];\n                        }\n\n                        $customer = new Customer();\n                        $client = $customer->getByEmail($from); //check if we already have a customer with this email\n                        $ct = new CustomerThread();\n                        if (isset($client->id)) { //if mail is owned by a customer assign to him\n                            $ct->id_customer = $client->id;\n                        }\n                        $ct->email = $from;\n                        $ct->id_contact = $id_contact;\n                        $ct->id_lang = (int) Configuration::get('PS_LANG_DEFAULT');\n                        $ct->id_shop = $this->context->shop->id; //new customer threads for unrecognized mails are not shown without shop id\n                        $ct->status = 'open';\n                        $ct->token = Tools::passwdGen(12);\n                        $ct->add();\n                    } else {\n                        $ct = new CustomerThread((int) $matches1[1]);\n                    } //check if order exist in database\n\n                    if (Validate::isLoadedObject($ct) && ((isset($matches2[1]) && $ct->token == $matches2[1]) || $new_ct)) {\n                        $structure = imap_bodystruct($mbox, $overview->msgno, '1');\n                        if ($structure->type == 0) {\n                            $message = imap_fetchbody($mbox, $overview->msgno, '1');\n                        } elseif ($structure->type == 1) {\n                            $structure = imap_bodystruct($mbox, $overview->msgno, '1.1');\n                            $message = imap_fetchbody($mbox, $overview->msgno, '1.1');\n                        } else {\n                            continue;\n                        }\n\n                        switch ($structure->encoding) {\n                            case 3:\n                                $message = imap_base64($message);\n\n                                break;\n                            case 4:\n                                $message = imap_qprint($message);\n\n                                break;\n                        }\n                        $message = iconv($this->getEncoding($structure), 'utf-8', $message);\n                        $message = nl2br($message);\n                        if (!$message || strlen($message) == 0) {\n                            $message_errors[] = $this->trans('The message body is empty, cannot import it.', array(), 'Admin.Orderscustomers.Notification');\n                            $fetch_succeed = false;\n\n                            continue;\n                        }\n                        $cm = new CustomerMessage();\n                        $cm->id_customer_thread = $ct->id;\n                        if (empty($message) || !Validate::isCleanHtml($message)) {\n                            $str_errors .= $this->trans('Invalid message content for subject: %s', array($subject), 'Admin.Orderscustomers.Notification');\n                        } else {\n                            try {\n                                $cm->message = $message;\n                                $cm->add();\n                            } catch (PrestaShopException $pse) {\n                                $message_errors[] = $this->trans('The message content is not valid, cannot import it.', array(), 'Admin.Orderscustomers.Notification');\n                                $fetch_succeed = false;\n\n                                continue;\n                            }\n                        }\n                    }\n                }\n                if ($fetch_succeed) {\n                    Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'customer_message_sync_imap` (`md5_header`) VALUES (\\'' . pSQL($md5) . '\\')');\n                }\n            }\n        }\n        imap_expunge($mbox);\n        imap_close($mbox);\n        if (count($message_errors) > 0) {\n            if (($more_error = $str_errors . $str_error_delete) && strlen($more_error) > 0) {\n                $message_errors = array_merge(array($more_error), $message_errors);\n            }\n\n            return array('hasError' => true, 'errors' => $message_errors);\n        }\n        if ($str_errors . $str_error_delete) {\n            return array('hasError' => true, 'errors' => array($str_errors . $str_error_delete));\n        } else {\n            return array('hasError' => false, 'errors' => '');\n        }\n    }\n\n    protected function getEncoding($structure)\n    {\n        foreach ($structure->parameters as $parameter) {\n            if ($parameter->attribute == 'CHARSET') {\n                return $parameter->value;\n            }\n        }\n\n        return 'utf-8';\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Adapter\\StockManager;\nuse PrestaShop\\PrestaShop\\Adapter\\SymfonyContainer;\n\n/**\n * @property Order $object\n */\nclass AdminOrdersControllerCore extends AdminController\n{\n    public $toolbar_title;\n\n    protected $statuses_array = array();\n\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->table = 'order';\n        $this->className = 'Order';\n        $this->lang = false;\n        $this->addRowAction('view');\n        $this->explicitSelect = true;\n        $this->allow_export = true;\n        $this->deleted = false;\n\n        parent::__construct();\n\n        $this->_select = '\n\t\ta.id_currency,\n\t\ta.id_order AS id_pdf,\n\t\tCONCAT(LEFT(c.`firstname`, 1), \\'. \\', c.`lastname`) AS `customer`,\n\t\tosl.`name` AS `osname`,\n\t\tos.`color`,\n\t\tIF((SELECT so.id_order FROM `' . _DB_PREFIX_ . 'orders` so WHERE so.id_customer = a.id_customer AND so.id_order < a.id_order LIMIT 1) > 0, 0, 1) as new,\n\t\tcountry_lang.name as cname,\n\t\tIF(a.valid, 1, 0) badge_success';\n\n        $this->_join = '\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer` c ON (c.`id_customer` = a.`id_customer`)\n\t\tINNER JOIN `' . _DB_PREFIX_ . 'address` address ON address.id_address = a.id_address_delivery\n\t\tINNER JOIN `' . _DB_PREFIX_ . 'country` country ON address.id_country = country.id_country\n\t\tINNER JOIN `' . _DB_PREFIX_ . 'country_lang` country_lang ON (country.`id_country` = country_lang.`id_country` AND country_lang.`id_lang` = ' . (int) $this->context->language->id . ')\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON (os.`id_order_state` = a.`current_state`)\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state_lang` osl ON (os.`id_order_state` = osl.`id_order_state` AND osl.`id_lang` = ' . (int) $this->context->language->id . ')';\n        $this->_orderBy = 'id_order';\n        $this->_orderWay = 'DESC';\n        $this->_use_found_rows = true;\n\n        $statuses = OrderState::getOrderStates((int) $this->context->language->id);\n        foreach ($statuses as $status) {\n            $this->statuses_array[$status['id_order_state']] = $status['name'];\n        }\n\n        $this->fields_list = array(\n            'id_order' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'align' => 'text-center',\n                'class' => 'fixed-width-xs',\n            ),\n            'reference' => array(\n                'title' => $this->trans('Reference', array(), 'Admin.Global'),\n            ),\n            'new' => array(\n                'title' => $this->trans('New client', array(), 'Admin.Orderscustomers.Feature'),\n                'align' => 'text-center',\n                'type' => 'bool',\n                'tmpTableFilter' => true,\n                'orderby' => false,\n            ),\n            'customer' => array(\n                'title' => $this->trans('Customer', array(), 'Admin.Global'),\n                'havingFilter' => true,\n            ),\n        );\n\n        if (Configuration::get('PS_B2B_ENABLE')) {\n            $this->fields_list = array_merge($this->fields_list, array(\n                'company' => array(\n                    'title' => $this->trans('Company', array(), 'Admin.Global'),\n                    'filter_key' => 'c!company',\n                ),\n            ));\n        }\n\n        $this->fields_list = array_merge($this->fields_list, array(\n            'total_paid_tax_incl' => array(\n                'title' => $this->trans('Total', array(), 'Admin.Global'),\n                'align' => 'text-right',\n                'type' => 'price',\n                'currency' => true,\n                'callback' => 'setOrderCurrency',\n                'badge_success' => true,\n            ),\n            'payment' => array(\n                'title' => $this->trans('Payment', array(), 'Admin.Global'),\n            ),\n            'osname' => array(\n                'title' => $this->trans('Status', array(), 'Admin.Global'),\n                'type' => 'select',\n                'color' => 'color',\n                'list' => $this->statuses_array,\n                'filter_key' => 'os!id_order_state',\n                'filter_type' => 'int',\n                'order_key' => 'osname',\n            ),\n            'date_add' => array(\n                'title' => $this->trans('Date', array(), 'Admin.Global'),\n                'align' => 'text-right',\n                'type' => 'datetime',\n                'filter_key' => 'a!date_add',\n            ),\n            'id_pdf' => array(\n                'title' => $this->trans('PDF', array(), 'Admin.Global'),\n                'align' => 'text-center',\n                'callback' => 'printPDFIcons',\n                'orderby' => false,\n                'search' => false,\n                'remove_onclick' => true,\n            ),\n        ));\n\n        if (Country::isCurrentlyUsed('country', true)) {\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS('\n\t\t\tSELECT DISTINCT c.id_country, cl.`name`\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\t' . Shop::addSqlAssociation('orders', 'o') . '\n\t\t\tINNER JOIN `' . _DB_PREFIX_ . 'address` a ON a.id_address = o.id_address_delivery\n\t\t\tINNER JOIN `' . _DB_PREFIX_ . 'country` c ON a.id_country = c.id_country\n\t\t\tINNER JOIN `' . _DB_PREFIX_ . 'country_lang` cl ON (c.`id_country` = cl.`id_country` AND cl.`id_lang` = ' . (int) $this->context->language->id . ')\n\t\t\tORDER BY cl.name ASC');\n\n            $country_array = array();\n            foreach ($result as $row) {\n                $country_array[$row['id_country']] = $row['name'];\n            }\n\n            $part1 = array_slice($this->fields_list, 0, 3);\n            $part2 = array_slice($this->fields_list, 3);\n            $part1['cname'] = array(\n                'title' => $this->trans('Delivery', array(), 'Admin.Global'),\n                'type' => 'select',\n                'list' => $country_array,\n                'filter_key' => 'country!id_country',\n                'filter_type' => 'int',\n                'order_key' => 'cname',\n            );\n            $this->fields_list = array_merge($part1, $part2);\n        }\n\n        $this->shopLinkType = 'shop';\n        $this->shopShareDatas = Shop::SHARE_ORDER;\n\n        if (Tools::isSubmit('id_order')) {\n            // Save context (in order to apply cart rule)\n            $order = new Order((int) Tools::getValue('id_order'));\n            $this->context->cart = new Cart($order->id_cart);\n            $this->context->customer = new Customer($order->id_customer);\n        }\n\n        $this->bulk_actions = array(\n            'updateOrderStatus' => array('text' => $this->trans('Change Order Status', array(), 'Admin.Orderscustomers.Feature'), 'icon' => 'icon-refresh'),\n        );\n    }\n\n    public static function setOrderCurrency($echo, $tr)\n    {\n        if (!empty($tr['id_currency'])) {\n            $idCurrency = (int) $tr['id_currency'];\n        } else {\n            $order = new Order($tr['id_order']);\n            $idCurrency = (int) $order->id_currency;\n        }\n\n        return Tools::displayPrice($echo, $idCurrency);\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        parent::initPageHeaderToolbar();\n\n        if (empty($this->display)) {\n            $this->page_header_toolbar_btn['new_order'] = array(\n                'href' => self::$currentIndex . '&addorder&token=' . $this->token,\n                'desc' => $this->trans('Add new order', array(), 'Admin.Orderscustomers.Feature'),\n                'icon' => 'process-icon-new',\n            );\n        }\n\n        if ($this->display == 'add') {\n            unset($this->page_header_toolbar_btn['save']);\n        }\n\n        if (Context::getContext()->shop->getContext() != Shop::CONTEXT_SHOP && isset($this->page_header_toolbar_btn['new_order'])\n            && Shop::isFeatureActive()) {\n            unset($this->page_header_toolbar_btn['new_order']);\n        }\n    }\n\n    public function renderForm()\n    {\n        if (Context::getContext()->shop->getContext() != Shop::CONTEXT_SHOP && Shop::isFeatureActive()) {\n            $this->errors[] = $this->trans('You have to select a shop before creating new orders.', array(), 'Admin.Orderscustomers.Notification');\n        }\n\n        $id_cart = (int) Tools::getValue('id_cart');\n        $cart = new Cart((int) $id_cart);\n        if ($id_cart && !Validate::isLoadedObject($cart)) {\n            $this->errors[] = $this->trans('This cart does not exists', array(), 'Admin.Orderscustomers.Notification');\n        }\n        if ($id_cart && Validate::isLoadedObject($cart) && !$cart->id_customer) {\n            $this->errors[] = $this->trans('The cart must have a customer', array(), 'Admin.Orderscustomers.Notification');\n        }\n        if (count($this->errors)) {\n            return false;\n        }\n\n        parent::renderForm();\n        unset($this->toolbar_btn['save']);\n        $this->addJqueryPlugin(array('autocomplete', 'fancybox', 'typewatch', 'highlight'));\n\n        $defaults_order_state = array('cheque' => (int) Configuration::get('PS_OS_CHEQUE'),\n            'bankwire' => (int) Configuration::get('PS_OS_BANKWIRE'),\n            'cashondelivery' => Configuration::get('PS_OS_COD_VALIDATION') ? (int) Configuration::get('PS_OS_COD_VALIDATION') : (int) Configuration::get('PS_OS_PREPARATION'),\n            'other' => (int) Configuration::get('PS_OS_PAYMENT'),\n        );\n        $payment_modules = array();\n        foreach (PaymentModule::getInstalledPaymentModules() as $p_module) {\n            $payment_modules[] = Module::getInstanceById((int) $p_module['id_module']);\n        }\n\n        $this->context->smarty->assign(array(\n            'customersSearchUrl' => SymfonyContainer::getInstance()->get('router')->generate('admin_customers_search'),\n            'recyclable_pack' => (int) Configuration::get('PS_RECYCLABLE_PACK'),\n            'gift_wrapping' => (int) Configuration::get('PS_GIFT_WRAPPING'),\n            'cart' => $cart,\n            'currencies' => Currency::getCurrenciesByIdShop(Context::getContext()->shop->id),\n            'langs' => Language::getLanguages(true, Context::getContext()->shop->id),\n            'payment_modules' => $payment_modules,\n            'order_states' => OrderState::getOrderStates((int) Context::getContext()->language->id),\n            'defaults_order_state' => $defaults_order_state,\n            'show_toolbar' => $this->show_toolbar,\n            'toolbar_btn' => $this->toolbar_btn,\n            'toolbar_scroll' => $this->toolbar_scroll,\n            'PS_CATALOG_MODE' => Configuration::get('PS_CATALOG_MODE'),\n            'title' => array($this->trans('Orders', array(), 'Admin.Orderscustomers.Feature'), $this->trans('Create order', array(), 'Admin.Orderscustomers.Feature')),\n        ));\n        $this->content .= $this->createTemplate('form.tpl')->fetch();\n    }\n\n    public function initToolbar()\n    {\n        if ($this->display == 'view') {\n            /** @var Order $order */\n            $order = $this->loadObject();\n            $customer = $this->context->customer;\n\n            if (!Validate::isLoadedObject($order)) {\n                Tools::redirectAdmin($this->context->link->getAdminLink('AdminOrders'));\n            }\n\n            $this->toolbar_title[] = $this->trans(\n                'Order %reference% from %firstname% %lastname%',\n                array(\n                    '%reference%' => $order->reference,\n                    '%firstname%' => $customer->firstname,\n                    '%lastname%' => $customer->lastname,\n                ),\n                'Admin.Orderscustomers.Feature'\n            );\n            $this->addMetaTitle($this->toolbar_title[count($this->toolbar_title) - 1]);\n\n            if ($order->hasBeenShipped()) {\n                $type = $this->trans('Return products', array(), 'Admin.Orderscustomers.Feature');\n            } elseif ($order->hasBeenPaid()) {\n                $type = $this->trans('Standard refund', array(), 'Admin.Orderscustomers.Feature');\n            } else {\n                $type = $this->trans('Cancel products', array(), 'Admin.Orderscustomers.Feature');\n            }\n\n            if (!$order->hasBeenShipped() && !$this->lite_display) {\n                $this->toolbar_btn['new'] = array(\n                    'short' => 'Create',\n                    'href' => '#',\n                    'desc' => $this->trans('Add a product', array(), 'Admin.Orderscustomers.Feature'),\n                    'class' => 'add_product',\n                );\n            }\n\n            if (Configuration::get('PS_ORDER_RETURN') && !$this->lite_display) {\n                $this->toolbar_btn['standard_refund'] = array(\n                    'short' => 'Create',\n                    'href' => '',\n                    'desc' => $type,\n                    'class' => 'process-icon-standardRefund',\n                );\n            }\n\n            if ($order->hasInvoice() && !$this->lite_display) {\n                $this->toolbar_btn['partial_refund'] = array(\n                    'short' => 'Create',\n                    'href' => '',\n                    'desc' => $this->trans('Partial refund', array(), 'Admin.Orderscustomers.Feature'),\n                    'class' => 'process-icon-partialRefund',\n                );\n            }\n        }\n        $res = parent::initToolbar();\n        if (Context::getContext()->shop->getContext() != Shop::CONTEXT_SHOP && isset($this->toolbar_btn['new']) && Shop::isFeatureActive()) {\n            unset($this->toolbar_btn['new']);\n        }\n\n        return $res;\n    }\n\n    public function setMedia($isNewTheme = false)\n    {\n        parent::setMedia($isNewTheme);\n\n        $this->addJqueryUI('ui.datepicker');\n        $this->addJS(_PS_JS_DIR_ . 'vendor/d3.v3.min.js');\n        $this->addJS('https://maps.googleapis.com/maps/api/js?v=3.exp');\n\n        if ($this->access('edit') && $this->display == 'view') {\n            $this->addJS(_PS_JS_DIR_ . 'admin/orders.js');\n            $this->addJS(_PS_JS_DIR_ . 'tools.js');\n            $this->addJqueryPlugin('autocomplete');\n        }\n    }\n\n    public function printPDFIcons($id_order, $tr)\n    {\n        static $valid_order_state = array();\n\n        $order = new Order($id_order);\n        if (!Validate::isLoadedObject($order)) {\n            return '';\n        }\n\n        if (!isset($valid_order_state[$order->current_state])) {\n            $valid_order_state[$order->current_state] = Validate::isLoadedObject($order->getCurrentOrderState());\n        }\n\n        if (!$valid_order_state[$order->current_state]) {\n            return '';\n        }\n\n        $this->context->smarty->assign(array(\n            'order' => $order,\n            'tr' => $tr,\n        ));\n\n        return $this->createTemplate('_print_pdf_icon.tpl')->fetch();\n    }\n\n    public function processBulkUpdateOrderStatus()\n    {\n        if (Tools::isSubmit('submitUpdateOrderStatus')\n            && ($id_order_state = (int) Tools::getValue('id_order_state'))) {\n            if (true !== $this->access('edit')) {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            } else {\n                $order_state = new OrderState($id_order_state);\n\n                if (!Validate::isLoadedObject($order_state)) {\n                    $this->errors[] = $this->trans('Order status #%id% cannot be loaded', array('%id%' => $id_order_state), 'Admin.Orderscustomers.Notification');\n                } else {\n                    foreach (Tools::getValue('orderBox') as $id_order) {\n                        $order = new Order((int) $id_order);\n                        if (!Validate::isLoadedObject($order)) {\n                            $this->errors[] = $this->trans('Order #%d cannot be loaded', array('#%d' => $id_order), 'Admin.Orderscustomers.Notification');\n                        } else {\n                            $current_order_state = $order->getCurrentOrderState();\n                            if ($current_order_state->id == $order_state->id) {\n                                $this->errors[] = $this->trans('Order #%d has already been assigned this status.', array('#%d' => $id_order), 'Admin.Orderscustomers.Notification');\n                            } else {\n                                $history = new OrderHistory();\n                                $history->id_order = $order->id;\n                                $history->id_employee = (int) $this->context->employee->id;\n\n                                $use_existings_payment = !$order->hasInvoice();\n                                $history->changeIdOrderState((int) $order_state->id, $order, $use_existings_payment);\n\n                                $carrier = new Carrier($order->id_carrier, $order->id_lang);\n                                $templateVars = array();\n                                if ($history->id_order_state == Configuration::get('PS_OS_SHIPPING') && $order->shipping_number) {\n                                    $templateVars = array('{followup}' => str_replace('@', $order->shipping_number, $carrier->url));\n                                }\n\n                                if ($history->addWithemail(true, $templateVars)) {\n                                    if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')) {\n                                        foreach ($order->getProducts() as $product) {\n                                            if (StockAvailable::dependsOnStock($product['product_id'])) {\n                                                StockAvailable::synchronize($product['product_id'], (int) $product['id_shop']);\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    $this->errors[] = $this->trans(\n                                        'An error occurred while changing the status for order #%d, or we were unable to send an email to the customer.',\n                                        array(\n                                            '#%d' => $id_order,\n                                        ),\n                                        'Admin.Orderscustomers.Notification'\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (!count($this->errors)) {\n                Tools::redirectAdmin(self::$currentIndex . '&conf=4&token=' . $this->token);\n            }\n        }\n    }\n\n    public function renderList()\n    {\n        if (Tools::isSubmit('submitBulkupdateOrderStatus' . $this->table)) {\n            if (Tools::getIsset('cancel')) {\n                Tools::redirectAdmin(self::$currentIndex . '&token=' . $this->token);\n            }\n\n            $this->tpl_list_vars['updateOrderStatus_mode'] = true;\n            $this->tpl_list_vars['order_statuses'] = $this->statuses_array;\n            $this->tpl_list_vars['REQUEST_URI'] = $_SERVER['REQUEST_URI'];\n            $this->tpl_list_vars['POST'] = $_POST;\n        }\n\n        return parent::renderList();\n    }\n\n    public function postProcess()\n    {\n        // If id_order is sent, we instanciate a new Order object\n        if (Tools::isSubmit('id_order') && Tools::getValue('id_order') > 0) {\n            $order = new Order(Tools::getValue('id_order'));\n            if (!Validate::isLoadedObject($order)) {\n                $this->errors[] = $this->trans('The order cannot be found within your database.', array(), 'Admin.Orderscustomers.Notification');\n            }\n            ShopUrl::cacheMainDomainForShop((int) $order->id_shop);\n        }\n\n        /* Update shipping number and carrier */\n        if (Tools::isSubmit('submitShippingNumber') && isset($order)) {\n            if ($this->access('edit')) {\n                $tracking_number = Tools::getValue('shipping_tracking_number');\n                $id_carrier = Tools::getValue('shipping_carrier');\n                $old_tracking_number = $order->shipping_number;\n\n                $order_carrier = new OrderCarrier(Tools::getValue('id_order_carrier'));\n                if (!Validate::isLoadedObject($order_carrier)) {\n                    $this->errors[] = $this->trans('The order carrier ID is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!empty($tracking_number) && !Validate::isTrackingNumber($tracking_number)) {\n                    $this->errors[] = $this->trans('The tracking number is incorrect.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    //update carrier - ONLY if changed - then refresh shipping cost\n                    $old_id_carrier = $order_carrier->id_carrier;\n                    if (!empty($id_carrier) && $old_id_carrier != $id_carrier) {\n                        $order->id_carrier = (int) $id_carrier;\n                        $order_carrier->id_carrier = (int) $id_carrier;\n                        $order_carrier->update();\n                        $order->refreshShippingCost();\n                    }\n\n                    //load fresh order carrier because updated just before\n                    $order_carrier = new OrderCarrier((int) Tools::getValue('id_order_carrier'));\n\n                    // update shipping number\n                    // Keep these two following lines for backward compatibility, remove on 1.6 version\n                    $order->shipping_number = $tracking_number;\n                    $order->update();\n\n                    // Update order_carrier\n                    $order_carrier->tracking_number = pSQL($tracking_number);\n                    if ($order_carrier->update()) {\n                        //send mail only if tracking number is different AND not empty\n                        if (!empty($tracking_number) && $old_tracking_number != $tracking_number) {\n                            if ($order_carrier->sendInTransitEmail($order)) {\n                                $customer = new Customer((int) $order->id_customer);\n                                $carrier = new Carrier((int) $order->id_carrier, $order->id_lang);\n\n                                Hook::exec('actionAdminOrdersTrackingNumberUpdate', array(\n                                    'order' => $order,\n                                    'customer' => $customer,\n                                    'carrier' => $carrier,\n                                ), null, false, true, false, $order->id_shop);\n\n                                Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n                            } else {\n                                $this->errors[] = $this->trans('An error occurred while sending an email to the customer.', array(), 'Admin.Orderscustomers.Notification');\n                            }\n                        }\n                    } else {\n                        $this->errors[] = $this->trans('The order carrier cannot be updated.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitState') && isset($order)) {\n            /* Change order status, add a new entry in order history and send an e-mail to the customer if needed */\n            if ($this->access('edit')) {\n                $order_state = new OrderState(Tools::getValue('id_order_state'));\n\n                if (!Validate::isLoadedObject($order_state)) {\n                    $this->errors[] = $this->trans('The new order status is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    $current_order_state = $order->getCurrentOrderState();\n                    if ($current_order_state->id != $order_state->id) {\n                        // Create new OrderHistory\n                        $history = new OrderHistory();\n                        $history->id_order = $order->id;\n                        $history->id_employee = (int) $this->context->employee->id;\n\n                        $use_existings_payment = false;\n                        if (!$order->hasInvoice()) {\n                            $use_existings_payment = true;\n                        }\n                        $history->changeIdOrderState((int) $order_state->id, $order, $use_existings_payment);\n\n                        $carrier = new Carrier($order->id_carrier, $order->id_lang);\n                        $templateVars = array();\n                        if ($history->id_order_state == Configuration::get('PS_OS_SHIPPING') && $order->shipping_number) {\n                            $templateVars = array('{followup}' => str_replace('@', $order->shipping_number, $carrier->url));\n                        }\n\n                        // Save all changes\n                        if ($history->addWithemail(true, $templateVars)) {\n                            // synchronizes quantities if needed..\n                            if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')) {\n                                foreach ($order->getProducts() as $product) {\n                                    if (StockAvailable::dependsOnStock($product['product_id'])) {\n                                        StockAvailable::synchronize($product['product_id'], (int) $product['id_shop']);\n                                    }\n                                }\n                            }\n\n                            Tools::redirectAdmin(self::$currentIndex . '&id_order=' . (int) $order->id . '&vieworder&token=' . $this->token);\n                        }\n                        $this->errors[] = $this->trans('An error occurred while changing order status, or we were unable to send an email to the customer.', array(), 'Admin.Orderscustomers.Notification');\n                    } else {\n                        $this->errors[] = $this->trans('The order has already been assigned this status.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitMessage') && isset($order)) {\n            // Add a new message for the current order and send an e-mail to the customer if needed\n            if ($this->access('edit')) {\n                $customer = new Customer(Tools::getValue('id_customer'));\n                if (!Validate::isLoadedObject($customer)) {\n                    $this->errors[] = $this->trans('The customer is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Tools::getValue('message')) {\n                    $this->errors[] = $this->trans('The message cannot be blank.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    /* Get message rules and and check fields validity */\n                    $rules = call_user_func(array('Message', 'getValidationRules'), 'Message');\n                    foreach ($rules['required'] as $field) {\n                        if (($value = Tools::getValue($field)) == false && (string) $value != '0') {\n                            if (!Tools::getValue('id_' . $this->table) || $field != 'passwd') {\n                                $this->errors[] = $this->trans('field %s is required.', array('%s' => $field), 'Admin.Orderscustomers.Notification');\n                            }\n                        }\n                    }\n                    foreach ($rules['size'] as $field => $maxLength) {\n                        if (Tools::getValue($field) && Tools::strlen(Tools::getValue($field)) > $maxLength) {\n                            $this->errors[] = $this->trans(\n                                'The %1$s field is too long (%2$d chars max).',\n                                array(\n                                    '%1$s' => $field,\n                                    '%2$d' => $maxLength,\n                                ),\n                                'Admin.Notifications.Error'\n                            );\n                        }\n                    }\n                    foreach ($rules['validate'] as $field => $function) {\n                        if (Tools::getValue($field)) {\n                            if (!Validate::$function(htmlentities(Tools::getValue($field), ENT_COMPAT, 'UTF-8'))) {\n                                $this->errors[] = $this->trans('The %s field is invalid.', array('%s' => $field), 'Admin.Notifications.Error');\n                            }\n                        }\n                    }\n\n                    if (!count($this->errors)) {\n                        //check if a thread already exist\n                        $id_customer_thread = CustomerThread::getIdCustomerThreadByEmailAndIdOrder($customer->email, $order->id);\n                        if (!$id_customer_thread) {\n                            $customer_thread = new CustomerThread();\n                            $customer_thread->id_contact = 0;\n                            $customer_thread->id_customer = (int) $order->id_customer;\n                            $customer_thread->id_shop = (int) $this->context->shop->id;\n                            $customer_thread->id_order = (int) $order->id;\n                            $customer_thread->id_lang = (int) $this->context->language->id;\n                            $customer_thread->email = $customer->email;\n                            $customer_thread->status = 'open';\n                            $customer_thread->token = Tools::passwdGen(12);\n                            $customer_thread->add();\n                        } else {\n                            $customer_thread = new CustomerThread((int) $id_customer_thread);\n                        }\n\n                        $customer_message = new CustomerMessage();\n                        $customer_message->id_customer_thread = $customer_thread->id;\n                        $customer_message->id_employee = (int) $this->context->employee->id;\n                        $customer_message->message = Tools::getValue('message');\n                        $customer_message->private = Tools::getValue('visibility');\n\n                        if (!$customer_message->add()) {\n                            $this->errors[] = $this->trans('An error occurred while saving the message.', array(), 'Admin.Notifications.Error');\n                        } elseif ($customer_message->private) {\n                            Tools::redirectAdmin(self::$currentIndex . '&id_order=' . (int) $order->id . '&vieworder&conf=11&token=' . $this->token);\n                        } else {\n                            $message = $customer_message->message;\n                            if (Configuration::get('PS_MAIL_TYPE', null, null, $order->id_shop) != Mail::TYPE_TEXT) {\n                                $message = Tools::nl2br($customer_message->message);\n                            }\n\n                            $orderLanguage = new Language((int) $order->id_lang);\n                            $varsTpl = array(\n                                '{lastname}' => $customer->lastname,\n                                '{firstname}' => $customer->firstname,\n                                '{id_order}' => $order->id,\n                                '{order_name}' => $order->getUniqReference(),\n                                '{message}' => $message,\n                            );\n\n                            if (\n                                @Mail::Send(\n                                    (int) $order->id_lang,\n                                    'order_merchant_comment',\n                                    $this->trans(\n                                        'New message regarding your order',\n                                        array(),\n                                        'Emails.Subject',\n                                        $orderLanguage->locale\n                                    ),\n                                    $varsTpl,\n                                    $customer->email,\n                                    $customer->firstname . ' ' . $customer->lastname,\n                                    null,\n                                    null,\n                                    null,\n                                    null,\n                                    _PS_MAIL_DIR_,\n                                    true,\n                                    (int) $order->id_shop\n                                )\n                            ) {\n                                Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=11' . '&token=' . $this->token);\n                            }\n                        }\n                        $this->errors[] = $this->trans('An error occurred while sending an email to the customer.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('partialRefund') && isset($order)) {\n            // Partial refund from order\n            if ($this->access('edit')) {\n                if (Tools::isSubmit('partialRefundProduct') && ($refunds = Tools::getValue('partialRefundProduct')) && is_array($refunds)) {\n                    $amount = 0;\n                    $order_detail_list = array();\n                    $full_quantity_list = array();\n                    foreach ($refunds as $id_order_detail => $amount_detail) {\n                        $quantity = Tools::getValue('partialRefundProductQuantity');\n                        if (!$quantity[$id_order_detail]) {\n                            continue;\n                        }\n\n                        $full_quantity_list[$id_order_detail] = (int) $quantity[$id_order_detail];\n\n                        $order_detail_list[$id_order_detail] = array(\n                            'quantity' => (int) $quantity[$id_order_detail],\n                            'id_order_detail' => (int) $id_order_detail,\n                        );\n\n                        $order_detail = new OrderDetail((int) $id_order_detail);\n                        if (empty($amount_detail)) {\n                            $order_detail_list[$id_order_detail]['unit_price'] = (!Tools::getValue('TaxMethod') ? $order_detail->unit_price_tax_excl : $order_detail->unit_price_tax_incl);\n                            $order_detail_list[$id_order_detail]['amount'] = $order_detail->unit_price_tax_incl * $order_detail_list[$id_order_detail]['quantity'];\n                        } else {\n                            $order_detail_list[$id_order_detail]['amount'] = (float) str_replace(',', '.', $amount_detail);\n                            $order_detail_list[$id_order_detail]['unit_price'] = $order_detail_list[$id_order_detail]['amount'] / $order_detail_list[$id_order_detail]['quantity'];\n                        }\n                        $amount += $order_detail_list[$id_order_detail]['amount'];\n                        if (!$order->hasBeenDelivered() || ($order->hasBeenDelivered() && Tools::isSubmit('reinjectQuantities')) && $order_detail_list[$id_order_detail]['quantity'] > 0) {\n                            $this->reinjectQuantity($order_detail, $order_detail_list[$id_order_detail]['quantity']);\n                        }\n                    }\n\n                    $shipping_cost_amount = (float) str_replace(',', '.', Tools::getValue('partialRefundShippingCost')) ? (float) str_replace(',', '.', Tools::getValue('partialRefundShippingCost')) : false;\n\n                    if ($amount == 0 && $shipping_cost_amount == 0) {\n                        if (!empty($refunds)) {\n                            $this->errors[] = $this->trans('Please enter a quantity to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');\n                        } else {\n                            $this->errors[] = $this->trans('Please enter an amount to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');\n                        }\n\n                        return false;\n                    }\n\n                    $choosen = false;\n                    $voucher = 0;\n\n                    if ((int) Tools::getValue('refund_voucher_off') == 1) {\n                        $amount -= $voucher = (float) Tools::getValue('order_discount_price');\n                    } elseif ((int) Tools::getValue('refund_voucher_off') == 2) {\n                        $choosen = true;\n                        $amount = $voucher = (float) Tools::getValue('refund_voucher_choose');\n                    }\n\n                    if ($shipping_cost_amount > 0) {\n                        if (!Tools::getValue('TaxMethod')) {\n                            $tax = new Tax();\n                            $tax->rate = $order->carrier_tax_rate;\n                            $tax_calculator = new TaxCalculator(array($tax));\n                            $amount += $tax_calculator->addTaxes($shipping_cost_amount);\n                        } else {\n                            $amount += $shipping_cost_amount;\n                        }\n                    }\n\n                    $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n                    if (Validate::isLoadedObject($order_carrier)) {\n                        $order_carrier->weight = (float) $order->getTotalWeight();\n                        if ($order_carrier->update()) {\n                            $order->weight = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $order_carrier->weight);\n                        }\n                    }\n\n                    if ($amount >= 0) {\n                        if (!OrderSlip::create(\n                            $order,\n                            $order_detail_list,\n                            $shipping_cost_amount,\n                            $voucher,\n                            $choosen,\n                            (Tools::getValue('TaxMethod') ? false : true)\n                        )) {\n                            $this->errors[] = $this->trans('You cannot generate a partial credit slip.', array(), 'Admin.Orderscustomers.Notification');\n                        } else {\n                            Hook::exec('actionOrderSlipAdd', array('order' => $order, 'productList' => $order_detail_list, 'qtyList' => $full_quantity_list), null, false, true, false, $order->id_shop);\n                            $customer = new Customer((int) ($order->id_customer));\n                            $params['{lastname}'] = $customer->lastname;\n                            $params['{firstname}'] = $customer->firstname;\n                            $params['{id_order}'] = $order->id;\n                            $params['{order_name}'] = $order->getUniqReference();\n                            $orderLanguage = new Language((int) $order->id_lang);\n                            @Mail::Send(\n                                (int) $order->id_lang,\n                                'credit_slip',\n                                $this->trans(\n                                    'New credit slip regarding your order',\n                                    array(),\n                                    'Emails.Subject',\n                                    $orderLanguage->locale\n                                ),\n                                $params,\n                                $customer->email,\n                                $customer->firstname . ' ' . $customer->lastname,\n                                null,\n                                null,\n                                null,\n                                null,\n                                _PS_MAIL_DIR_,\n                                true,\n                                (int) $order->id_shop\n                            );\n                        }\n\n                        foreach ($order_detail_list as &$product) {\n                            $order_detail = new OrderDetail((int) $product['id_order_detail']);\n                            if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')) {\n                                StockAvailable::synchronize($order_detail->product_id);\n                            }\n                        }\n\n                        // Generate voucher\n                        if (Tools::isSubmit('generateDiscountRefund') && !count($this->errors) && $amount > 0) {\n                            $cart_rule = new CartRule();\n                            $cart_rule->description = $this->trans('Credit slip for order #%d', array('#%d' => $order->id), 'Admin.Orderscustomers.Feature');\n                            $language_ids = Language::getIDs(false);\n                            foreach ($language_ids as $id_lang) {\n                                // Define a temporary name\n                                $cart_rule->name[$id_lang] = sprintf('V0C%1$dO%2$d', $order->id_customer, $order->id);\n                            }\n\n                            // Define a temporary code\n                            $cart_rule->code = sprintf('V0C%1$dO%2$d', $order->id_customer, $order->id);\n                            $cart_rule->quantity = 1;\n                            $cart_rule->quantity_per_user = 1;\n\n                            // Specific to the customer\n                            $cart_rule->id_customer = $order->id_customer;\n                            $now = time();\n                            $cart_rule->date_from = date('Y-m-d H:i:s', $now);\n                            $cart_rule->date_to = date('Y-m-d H:i:s', strtotime('+1 year'));\n                            $cart_rule->partial_use = 1;\n                            $cart_rule->active = 1;\n\n                            $cart_rule->reduction_amount = $amount;\n                            $cart_rule->reduction_tax = $order->getTaxCalculationMethod() != PS_TAX_EXC;\n                            $cart_rule->minimum_amount_currency = $order->id_currency;\n                            $cart_rule->reduction_currency = $order->id_currency;\n\n                            if (!$cart_rule->add()) {\n                                $this->errors[] = $this->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');\n                            } else {\n                                // Update the voucher code and name\n                                foreach ($language_ids as $id_lang) {\n                                    $cart_rule->name[$id_lang] = sprintf('V%1$dC%2$dO%3$d', $cart_rule->id, $order->id_customer, $order->id);\n                                }\n                                $cart_rule->code = sprintf('V%1$dC%2$dO%3$d', $cart_rule->id, $order->id_customer, $order->id);\n\n                                if (!$cart_rule->update()) {\n                                    $this->errors[] = $this->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');\n                                } else {\n                                    $currency = $this->context->currency;\n                                    $customer = new Customer((int) ($order->id_customer));\n                                    $params['{lastname}'] = $customer->lastname;\n                                    $params['{firstname}'] = $customer->firstname;\n                                    $params['{id_order}'] = $order->id;\n                                    $params['{order_name}'] = $order->getUniqReference();\n                                    $params['{voucher_amount}'] = Tools::displayPrice($cart_rule->reduction_amount, $currency, false);\n                                    $params['{voucher_num}'] = $cart_rule->code;\n                                    $orderLanguage = new Language((int) $order->id_lang);\n                                    @Mail::Send(\n                                        (int) $order->id_lang,\n                                        'voucher',\n                                        $this->trans(\n                                            'New voucher for your order #%s',\n                                            array($order->reference),\n                                            'Emails.Subject',\n                                            $orderLanguage->locale\n                                        ),\n                                        $params,\n                                        $customer->email,\n                                        $customer->firstname . ' ' . $customer->lastname,\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        _PS_MAIL_DIR_,\n                                        true,\n                                        (int) $order->id_shop\n                                    );\n                                }\n                            }\n                        }\n                    } else {\n                        if (!empty($refunds)) {\n                            $this->errors[] = $this->trans('Please enter a quantity to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');\n                        } else {\n                            $this->errors[] = $this->trans('Please enter an amount to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');\n                        }\n                    }\n\n                    // Redirect if no errors\n                    if (!count($this->errors)) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=30&token=' . $this->token);\n                    }\n                } else {\n                    $this->errors[] = $this->trans('The partial refund data is incorrect.', array(), 'Admin.Orderscustomers.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('cancelProduct') && isset($order)) {\n            // Cancel product from order\n            if ($this->access('delete')) {\n                if (!Tools::isSubmit('id_order_detail') && !Tools::isSubmit('id_customization')) {\n                    $this->errors[] = $this->trans('You must select a product.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Tools::isSubmit('cancelQuantity') && !Tools::isSubmit('cancelCustomizationQuantity')) {\n                    $this->errors[] = $this->trans('You must enter a quantity.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    $productList = Tools::getValue('id_order_detail');\n                    if ($productList) {\n                        $productList = array_map('intval', $productList);\n                    }\n\n                    $customizationList = Tools::getValue('id_customization');\n                    if ($customizationList) {\n                        $customizationList = array_map('intval', $customizationList);\n                    }\n\n                    $qtyList = Tools::getValue('cancelQuantity');\n                    if ($qtyList) {\n                        $qtyList = array_map('intval', $qtyList);\n                    }\n\n                    $customizationQtyList = Tools::getValue('cancelCustomizationQuantity');\n                    if ($customizationQtyList) {\n                        $customizationQtyList = array_map('intval', $customizationQtyList);\n                    }\n\n                    $full_product_list = $productList;\n                    $full_quantity_list = $qtyList;\n\n                    if ($customizationList) {\n                        foreach ($customizationList as $key => $id_order_detail) {\n                            $full_product_list[(int) $id_order_detail] = $id_order_detail;\n                            if (isset($customizationQtyList[$key])) {\n                                $full_quantity_list[(int) $id_order_detail] += $customizationQtyList[$key];\n                            }\n                        }\n                    }\n\n                    if ($productList || $customizationList) {\n                        if ($productList) {\n                            $id_cart = Cart::getCartIdByOrderId($order->id);\n                            $customization_quantities = Customization::countQuantityByCart($id_cart);\n\n                            foreach ($productList as $key => $id_order_detail) {\n                                $qtyCancelProduct = abs($qtyList[$key]);\n                                if (!$qtyCancelProduct) {\n                                    $this->errors[] = $this->trans('No quantity has been selected for this product.', array(), 'Admin.Orderscustomers.Notification');\n                                }\n\n                                $order_detail = new OrderDetail($id_order_detail);\n                                $customization_quantity = 0;\n                                if (array_key_exists($order_detail->product_id, $customization_quantities) && array_key_exists($order_detail->product_attribute_id, $customization_quantities[$order_detail->product_id])) {\n                                    $customization_quantity = (int) $customization_quantities[$order_detail->product_id][$order_detail->product_attribute_id];\n                                }\n\n                                if (($order_detail->product_quantity - $customization_quantity - $order_detail->product_quantity_refunded - $order_detail->product_quantity_return) < $qtyCancelProduct) {\n                                    $this->errors[] = $this->trans('An invalid quantity was selected for this product.', array(), 'Admin.Orderscustomers.Notification');\n                                }\n                            }\n                        }\n                        if ($customizationList) {\n                            $customization_quantities = Customization::retrieveQuantitiesFromIds(array_keys($customizationList));\n\n                            foreach ($customizationList as $id_customization => $id_order_detail) {\n                                $qtyCancelProduct = abs($customizationQtyList[$id_customization]);\n                                $customization_quantity = $customization_quantities[$id_customization];\n\n                                if (!$qtyCancelProduct) {\n                                    $this->errors[] = $this->trans('No quantity has been selected for this product.', array(), 'Admin.Orderscustomers.Notification');\n                                }\n\n                                if ($qtyCancelProduct > ($customization_quantity['quantity'] - ($customization_quantity['quantity_refunded'] + $customization_quantity['quantity_returned']))) {\n                                    $this->errors[] = $this->trans('An invalid quantity was selected for this product.', array(), 'Admin.Orderscustomers.Notification');\n                                }\n                            }\n                        }\n\n                        if (!count($this->errors) && $productList) {\n                            foreach ($productList as $key => $id_order_detail) {\n                                $qty_cancel_product = abs($qtyList[$key]);\n                                $order_detail = new OrderDetail((int) ($id_order_detail));\n\n                                if (!$order->hasBeenDelivered() || ($order->hasBeenDelivered() && Tools::isSubmit('reinjectQuantities')) && $qty_cancel_product > 0) {\n                                    $this->reinjectQuantity($order_detail, $qty_cancel_product);\n                                }\n\n                                // Delete product\n                                $order_detail = new OrderDetail((int) $id_order_detail);\n                                if (!$order->deleteProduct($order, $order_detail, $qty_cancel_product)) {\n                                    $this->errors[] = $this->trans('An error occurred while attempting to delete the product.', array(), 'Admin.Orderscustomers.Notification') . ' <span class=\"bold\">' . $order_detail->product_name . '</span>';\n                                }\n                                // Update weight SUM\n                                $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n                                if (Validate::isLoadedObject($order_carrier)) {\n                                    $order_carrier->weight = (float) $order->getTotalWeight();\n                                    if ($order_carrier->update()) {\n                                        $order->weight = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $order_carrier->weight);\n                                    }\n                                }\n\n                                if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && StockAvailable::dependsOnStock($order_detail->product_id)) {\n                                    StockAvailable::synchronize($order_detail->product_id);\n                                }\n                                Hook::exec('actionProductCancel', array('order' => $order, 'id_order_detail' => (int) $id_order_detail), null, false, true, false, $order->id_shop);\n                            }\n                        }\n                        if (!count($this->errors) && $customizationList) {\n                            foreach ($customizationList as $id_customization => $id_order_detail) {\n                                $order_detail = new OrderDetail((int) ($id_order_detail));\n                                $qtyCancelProduct = abs($customizationQtyList[$id_customization]);\n                                if (!$order->deleteCustomization($id_customization, $qtyCancelProduct, $order_detail)) {\n                                    $this->errors[] = $this->trans('An error occurred while attempting to delete product customization.', array(), 'Admin.Orderscustomers.Notification') . ' ' . $id_customization;\n                                }\n                            }\n                        }\n                        // E-mail params\n                        if ((Tools::isSubmit('generateCreditSlip') || Tools::isSubmit('generateDiscount')) && !count($this->errors)) {\n                            $customer = new Customer((int) ($order->id_customer));\n                            $params['{lastname}'] = $customer->lastname;\n                            $params['{firstname}'] = $customer->firstname;\n                            $params['{id_order}'] = $order->id;\n                            $params['{order_name}'] = $order->getUniqReference();\n                        }\n\n                        // Generate credit slip\n                        if (Tools::isSubmit('generateCreditSlip') && !count($this->errors)) {\n                            $product_list = array();\n                            $amount = $order_detail->unit_price_tax_incl * $full_quantity_list[$id_order_detail];\n\n                            $choosen = false;\n                            if ((int) Tools::getValue('refund_total_voucher_off') == 1) {\n                                $amount -= $voucher = (float) Tools::getValue('order_discount_price');\n                            } elseif ((int) Tools::getValue('refund_total_voucher_off') == 2) {\n                                $choosen = true;\n                                $amount = $voucher = (float) Tools::getValue('refund_total_voucher_choose');\n                            }\n                            foreach ($full_product_list as $id_order_detail) {\n                                $order_detail = new OrderDetail((int) $id_order_detail);\n                                $product_list[$id_order_detail] = array(\n                                    'id_order_detail' => $id_order_detail,\n                                    'quantity' => $full_quantity_list[$id_order_detail],\n                                    'unit_price' => $order_detail->unit_price_tax_excl,\n                                    'amount' => isset($amount) ? $amount : $order_detail->unit_price_tax_incl * $full_quantity_list[$id_order_detail],\n                                );\n                            }\n\n                            $shipping = Tools::isSubmit('shippingBack') ? null : false;\n\n                            if (!OrderSlip::create($order, $product_list, $shipping, $voucher, $choosen)) {\n                                $this->errors[] = $this->trans('A credit slip cannot be generated.', array(), 'Admin.Orderscustomers.Notification');\n                            } else {\n                                Hook::exec('actionOrderSlipAdd', array('order' => $order, 'productList' => $full_product_list, 'qtyList' => $full_quantity_list), null, false, true, false, $order->id_shop);\n                                $orderLanguage = new Language((int) $order->id_lang);\n                                @Mail::Send(\n                                    (int) $order->id_lang,\n                                    'credit_slip',\n                                    $this->trans(\n                                        'New credit slip regarding your order',\n                                        array(),\n                                        'Emails.Subject',\n                                        $orderLanguage->locale\n                                    ),\n                                    $params,\n                                    $customer->email,\n                                    $customer->firstname . ' ' . $customer->lastname,\n                                    null,\n                                    null,\n                                    null,\n                                    null,\n                                    _PS_MAIL_DIR_,\n                                    true,\n                                    (int) $order->id_shop\n                                );\n                            }\n                        }\n\n                        // Generate voucher\n                        if (Tools::isSubmit('generateDiscount') && !count($this->errors)) {\n                            $cartrule = new CartRule();\n                            $language_ids = Language::getIDs((bool) $order);\n                            $cartrule->description = $this->trans('Credit card slip for order #%d', array('#%d' => $order->id), 'Admin.Orderscustomers.Feature');\n                            foreach ($language_ids as $id_lang) {\n                                // Define a temporary name\n                                $cartrule->name[$id_lang] = 'V0C' . (int) ($order->id_customer) . 'O' . (int) ($order->id);\n                            }\n                            // Define a temporary code\n                            $cartrule->code = 'V0C' . (int) ($order->id_customer) . 'O' . (int) ($order->id);\n\n                            $cartrule->quantity = 1;\n                            $cartrule->quantity_per_user = 1;\n                            // Specific to the customer\n                            $cartrule->id_customer = $order->id_customer;\n                            $now = time();\n                            $cartrule->date_from = date('Y-m-d H:i:s', $now);\n                            $cartrule->date_to = date('Y-m-d H:i:s', $now + (3600 * 24 * 365.25)); /* 1 year */\n                            $cartrule->active = 1;\n\n                            $products = $order->getProducts(false, $full_product_list, $full_quantity_list);\n\n                            $total = 0;\n                            foreach ($products as $product) {\n                                $total += $product['unit_price_tax_incl'] * $product['product_quantity'];\n                            }\n\n                            if (Tools::isSubmit('shippingBack')) {\n                                $total += $order->total_shipping;\n                            }\n\n                            if ((int) Tools::getValue('refund_total_voucher_off') == 1) {\n                                $total -= (float) Tools::getValue('order_discount_price');\n                            } elseif ((int) Tools::getValue('refund_total_voucher_off') == 2) {\n                                $total = (float) Tools::getValue('refund_total_voucher_choose');\n                            }\n\n                            $cartrule->reduction_amount = $total;\n                            $cartrule->reduction_tax = true;\n                            $cartrule->minimum_amount_currency = $order->id_currency;\n                            $cartrule->reduction_currency = $order->id_currency;\n\n                            if (!$cartrule->add()) {\n                                $this->errors[] = $this->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');\n                            } else {\n                                // Update the voucher code and name\n                                foreach ($language_ids as $id_lang) {\n                                    $cartrule->name[$id_lang] = 'V' . (int) ($cartrule->id) . 'C' . (int) ($order->id_customer) . 'O' . $order->id;\n                                }\n                                $cartrule->code = 'V' . (int) ($cartrule->id) . 'C' . (int) ($order->id_customer) . 'O' . $order->id;\n                                if (!$cartrule->update()) {\n                                    $this->errors[] = $this->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');\n                                } else {\n                                    $currency = $this->context->currency;\n                                    $params['{voucher_amount}'] = Tools::displayPrice($cartrule->reduction_amount, $currency, false);\n                                    $params['{voucher_num}'] = $cartrule->code;\n                                    $orderLanguage = new Language((int) $order->id_lang);\n                                    @Mail::Send(\n                                        (int) $order->id_lang,\n                                        'voucher',\n                                        $this->trans(\n                                            'New voucher for your order #%s',\n                                            array($order->reference),\n                                            'Emails.Subject',\n                                            $orderLanguage->locale\n                                        ),\n                                        $params,\n                                        $customer->email,\n                                        $customer->firstname . ' ' . $customer->lastname,\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        _PS_MAIL_DIR_,\n                                        true,\n                                        (int) $order->id_shop\n                                    );\n                                }\n                            }\n                        }\n                    } else {\n                        $this->errors[] = $this->trans('No product or quantity has been selected.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n\n                    // Redirect if no errors\n                    if (!count($this->errors)) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=31&token=' . $this->token);\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('messageReaded')) {\n            Message::markAsReaded(Tools::getValue('messageReaded'), $this->context->employee->id);\n        } elseif (Tools::isSubmit('submitAddPayment') && isset($order)) {\n            if ($this->access('edit')) {\n                $amount = str_replace(',', '.', Tools::getValue('payment_amount'));\n                $currency = new Currency(Tools::getValue('payment_currency'));\n                $order_has_invoice = $order->hasInvoice();\n                if ($order_has_invoice) {\n                    $order_invoice = new OrderInvoice(Tools::getValue('payment_invoice'));\n                } else {\n                    $order_invoice = null;\n                }\n\n                if (!Validate::isLoadedObject($order)) {\n                    $this->errors[] = $this->trans('The order cannot be found', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Validate::isNegativePrice($amount) || !(float) $amount) {\n                    $this->errors[] = $this->trans('The amount is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Validate::isGenericName(Tools::getValue('payment_method'))) {\n                    $this->errors[] = $this->trans('The selected payment method is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Validate::isString(Tools::getValue('payment_transaction_id'))) {\n                    $this->errors[] = $this->trans('The transaction ID is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Validate::isLoadedObject($currency)) {\n                    $this->errors[] = $this->trans('The selected currency is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif ($order_has_invoice && !Validate::isLoadedObject($order_invoice)) {\n                    $this->errors[] = $this->trans('The invoice is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Validate::isDate(Tools::getValue('payment_date'))) {\n                    $this->errors[] = $this->trans('The date is invalid', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    if (!$order->addOrderPayment($amount, Tools::getValue('payment_method'), Tools::getValue('payment_transaction_id'), $currency, Tools::getValue('payment_date'), $order_invoice)) {\n                        $this->errors[] = $this->trans('An error occurred during payment.', array(), 'Admin.Orderscustomers.Notification');\n                    } else {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitEditNote')) {\n            $note = Tools::getValue('note');\n            $order_invoice = new OrderInvoice((int) Tools::getValue('id_order_invoice'));\n            if (Validate::isLoadedObject($order_invoice) && Validate::isCleanHtml($note)) {\n                if ($this->access('edit')) {\n                    $order_invoice->note = $note;\n                    if ($order_invoice->save()) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order_invoice->id_order . '&vieworder&conf=4&token=' . $this->token);\n                    } else {\n                        $this->errors[] = $this->trans('The invoice note was not saved.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n                }\n            } else {\n                $this->errors[] = $this->trans('Failed to upload the invoice and edit its note.', array(), 'Admin.Orderscustomers.Notification');\n            }\n        } elseif (Tools::isSubmit('submitAddOrder') && ($id_cart = Tools::getValue('id_cart')) &&\n            ($module_name = Tools::getValue('payment_module_name')) &&\n            ($id_order_state = Tools::getValue('id_order_state')) && Validate::isModuleName($module_name)) {\n            if ($this->access('edit')) {\n                if (!Configuration::get('PS_CATALOG_MODE')) {\n                    $payment_module = Module::getInstanceByName($module_name);\n                } else {\n                    $payment_module = new BoOrder();\n                }\n\n                $cart = new Cart((int) $id_cart);\n                Context::getContext()->currency = new Currency((int) $cart->id_currency);\n                Context::getContext()->customer = new Customer((int) $cart->id_customer);\n\n                $bad_delivery = false;\n                if (($bad_delivery = (bool) !Address::isCountryActiveById((int) $cart->id_address_delivery))\n                    || !Address::isCountryActiveById((int) $cart->id_address_invoice)) {\n                    if ($bad_delivery) {\n                        $this->errors[] = $this->trans('This delivery address country is not active.', array(), 'Admin.Orderscustomers.Notification');\n                    } else {\n                        $this->errors[] = $this->trans('This invoice address country is not active.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                } else {\n                    $employee = new Employee((int) Context::getContext()->cookie->id_employee);\n                    $payment_module->validateOrder(\n                        (int) $cart->id,\n                        (int) $id_order_state,\n                        $cart->getOrderTotal(true, Cart::BOTH),\n                        $payment_module->displayName,\n                        $this->trans('Manual order -- Employee:', array(), 'Admin.Orderscustomers.Feature') . ' ' .\n                        substr($employee->firstname, 0, 1) . '. ' . $employee->lastname,\n                        array(),\n                        null,\n                        false,\n                        $cart->secure_key\n                    );\n                    if ($payment_module->currentOrder) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $payment_module->currentOrder . '&vieworder' . '&token=' . $this->token);\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to add this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif ((Tools::isSubmit('submitAddressShipping') || Tools::isSubmit('submitAddressInvoice')) && isset($order)) {\n            if ($this->access('edit')) {\n                $address = new Address(Tools::getValue('id_address'));\n                $cart = Cart::getCartByOrderId($order->id);\n                if (Validate::isLoadedObject($address)) {\n                    // Update the address on order and cart\n                    if (Tools::isSubmit('submitAddressShipping')) {\n                        $order->id_address_delivery = $address->id;\n                        $cart->id_address_delivery = $address->id;\n                    } elseif (Tools::isSubmit('submitAddressInvoice')) {\n                        $order->id_address_invoice = $address->id;\n                        $cart->id_address_invoice = $address->id;\n                    }\n                    $order->update();\n                    $order->refreshShippingCost();\n                    $cart->update();\n\n                    Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n                } else {\n                    $this->errors[] = $this->trans('This address can\\'t be loaded', array(), 'Admin.Orderscustomers.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitChangeCurrency') && isset($order)) {\n            if ($this->access('edit')) {\n                if (Tools::getValue('new_currency') != $order->id_currency && !$order->valid) {\n                    $old_currency = new Currency($order->id_currency);\n                    $currency = new Currency(Tools::getValue('new_currency'));\n                    if (!Validate::isLoadedObject($currency)) {\n                        throw new PrestaShopException('Can\\'t load Currency object');\n                    }\n\n                    // Update order detail amount\n                    foreach ($order->getOrderDetailList() as $row) {\n                        $order_detail = new OrderDetail($row['id_order_detail']);\n                        $fields = array(\n                            'ecotax',\n                            'product_price',\n                            'reduction_amount',\n                            'total_shipping_price_tax_excl',\n                            'total_shipping_price_tax_incl',\n                            'total_price_tax_incl',\n                            'total_price_tax_excl',\n                            'product_quantity_discount',\n                            'purchase_supplier_price',\n                            'reduction_amount',\n                            'reduction_amount_tax_incl',\n                            'reduction_amount_tax_excl',\n                            'unit_price_tax_incl',\n                            'unit_price_tax_excl',\n                            'original_product_price',\n                        );\n                        foreach ($fields as $field) {\n                            $order_detail->{$field} = Tools::convertPriceFull($order_detail->{$field}, $old_currency, $currency);\n                        }\n\n                        $order_detail->update();\n                        $order_detail->updateTaxAmount($order);\n                    }\n\n                    foreach ($order->getCartRules() as $cartRule) {\n                        $orderCartRule = new OrderCartRule((int) $cartRule['id_order_cart_rule']);\n                        if ($cartRule['value'] > 0) {\n                            $orderCartRule->value = Tools::convertPriceFull(\n                                (float) $cartRule['value'],\n                                $old_currency,\n                                $currency\n                            );\n                        }\n                        if ($cartRule['value_tax_excl'] > 0) {\n                            $orderCartRule->value_tax_excl = Tools::convertPriceFull(\n                                (float) $cartRule['value_tax_excl'],\n                                $old_currency,\n                                $currency\n                            );\n                        }\n                        $orderCartRule->update();\n                    }\n\n                    $id_order_carrier = (int) $order->getIdOrderCarrier();\n                    if ($id_order_carrier) {\n                        $order_carrier = $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n                        $order_carrier->shipping_cost_tax_excl = (float) Tools::convertPriceFull($order_carrier->shipping_cost_tax_excl, $old_currency, $currency);\n                        $order_carrier->shipping_cost_tax_incl = (float) Tools::convertPriceFull($order_carrier->shipping_cost_tax_incl, $old_currency, $currency);\n                        $order_carrier->update();\n                    }\n\n                    // Update order && order_invoice amount\n                    $fields = array(\n                        'total_discounts',\n                        'total_discounts_tax_incl',\n                        'total_discounts_tax_excl',\n                        'total_discount_tax_excl',\n                        'total_discount_tax_incl',\n                        'total_paid',\n                        'total_paid_tax_incl',\n                        'total_paid_tax_excl',\n                        'total_paid_real',\n                        'total_products',\n                        'total_products_wt',\n                        'total_shipping',\n                        'total_shipping_tax_incl',\n                        'total_shipping_tax_excl',\n                        'total_wrapping',\n                        'total_wrapping_tax_incl',\n                        'total_wrapping_tax_excl',\n                    );\n\n                    $invoices = $order->getInvoicesCollection();\n                    if ($invoices) {\n                        foreach ($invoices as $invoice) {\n                            foreach ($fields as $field) {\n                                if (isset($invoice->$field)) {\n                                    $invoice->{$field} = Tools::convertPriceFull($invoice->{$field}, $old_currency, $currency);\n                                }\n                            }\n                            $invoice->save();\n                        }\n                    }\n\n                    foreach ($fields as $field) {\n                        if (isset($order->$field)) {\n                            $order->{$field} = Tools::convertPriceFull($order->{$field}, $old_currency, $currency);\n                        }\n                    }\n\n                    // Update currency in order\n                    $order->id_currency = $currency->id;\n                    // Update exchange rate\n                    $order->conversion_rate = (float) $currency->conversion_rate;\n                    $order->update();\n                } else {\n                    $this->errors[] = $this->trans('You cannot change the currency.', array(), 'Admin.Orderscustomers.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitGenerateInvoice') && isset($order)) {\n            if (!Configuration::get('PS_INVOICE', null, null, $order->id_shop)) {\n                $this->errors[] = $this->trans('Invoice management has been disabled.', array(), 'Admin.Orderscustomers.Notification');\n            } elseif ($order->hasInvoice()) {\n                $this->errors[] = $this->trans('This order already has an invoice.', array(), 'Admin.Orderscustomers.Notification');\n            } else {\n                $order->setInvoice(true);\n                Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n            }\n        } elseif (Tools::isSubmit('submitDeleteVoucher') && isset($order)) {\n            if ($this->access('edit')) {\n                $order_cart_rule = new OrderCartRule(Tools::getValue('id_order_cart_rule'));\n                if (Validate::isLoadedObject($order_cart_rule) && $order_cart_rule->id_order == $order->id) {\n                    if ($order_cart_rule->id_order_invoice) {\n                        $order_invoice = new OrderInvoice($order_cart_rule->id_order_invoice);\n                        if (!Validate::isLoadedObject($order_invoice)) {\n                            throw new PrestaShopException('Can\\'t load Order Invoice object');\n                        }\n\n                        // Update amounts of Order Invoice\n                        $order_invoice->total_discount_tax_excl -= $order_cart_rule->value_tax_excl;\n                        $order_invoice->total_discount_tax_incl -= $order_cart_rule->value;\n\n                        $order_invoice->total_paid_tax_excl += $order_cart_rule->value_tax_excl;\n                        $order_invoice->total_paid_tax_incl += $order_cart_rule->value;\n\n                        // Update Order Invoice\n                        $order_invoice->update();\n                    }\n\n                    // Update amounts of order\n                    $order->total_discounts -= $order_cart_rule->value;\n                    $order->total_discounts_tax_incl -= $order_cart_rule->value;\n                    $order->total_discounts_tax_excl -= $order_cart_rule->value_tax_excl;\n\n                    $order->total_paid += $order_cart_rule->value;\n                    $order->total_paid_tax_incl += $order_cart_rule->value;\n                    $order->total_paid_tax_excl += $order_cart_rule->value_tax_excl;\n\n                    // Delete Order Cart Rule and update Order\n                    $order_cart_rule->delete();\n                    $order->update();\n                    Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n                } else {\n                    $this->errors[] = $this->trans('You cannot edit this cart rule.', array(), 'Admin.Orderscustomers.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitNewVoucher') && isset($order)) {\n            if ($this->access('edit')) {\n                if (!Tools::getValue('discount_name')) {\n                    $this->errors[] = $this->trans('You must specify a name in order to create a new discount.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    if ($order->hasInvoice()) {\n                        // If the discount is for only one invoice\n                        if (!Tools::isSubmit('discount_all_invoices')) {\n                            $order_invoice = new OrderInvoice(Tools::getValue('discount_invoice'));\n                            if (!Validate::isLoadedObject($order_invoice)) {\n                                throw new PrestaShopException('Can\\'t load Order Invoice object');\n                            }\n                        }\n                    }\n\n                    $cart_rules = array();\n                    $discount_value = (float) str_replace(',', '.', Tools::getValue('discount_value'));\n                    switch (Tools::getValue('discount_type')) {\n                        // Percent type\n                        case 1:\n                            if ($discount_value < 100) {\n                                if (isset($order_invoice)) {\n                                    $cart_rules[$order_invoice->id]['value_tax_incl'] = Tools::ps_round($order_invoice->total_paid_tax_incl * $discount_value / 100, 2);\n                                    $cart_rules[$order_invoice->id]['value_tax_excl'] = Tools::ps_round($order_invoice->total_paid_tax_excl * $discount_value / 100, 2);\n\n                                    // Update OrderInvoice\n                                    $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                } elseif ($order->hasInvoice()) {\n                                    $order_invoices_collection = $order->getInvoicesCollection();\n                                    foreach ($order_invoices_collection as $order_invoice) {\n                                        /* @var OrderInvoice $order_invoice */\n                                        $cart_rules[$order_invoice->id]['value_tax_incl'] = Tools::ps_round($order_invoice->total_paid_tax_incl * $discount_value / 100, 2);\n                                        $cart_rules[$order_invoice->id]['value_tax_excl'] = Tools::ps_round($order_invoice->total_paid_tax_excl * $discount_value / 100, 2);\n\n                                        // Update OrderInvoice\n                                        $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                    }\n                                } else {\n                                    $cart_rules[0]['value_tax_incl'] = Tools::ps_round($order->total_paid_tax_incl * $discount_value / 100, 2);\n                                    $cart_rules[0]['value_tax_excl'] = Tools::ps_round($order->total_paid_tax_excl * $discount_value / 100, 2);\n                                }\n                            } else {\n                                $this->errors[] = $this->trans('The discount value is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                            }\n\n                            break;\n                        // Amount type\n                        case 2:\n                            if (isset($order_invoice)) {\n                                if ($discount_value > $order_invoice->total_paid_tax_incl) {\n                                    $this->errors[] = $this->trans('The discount value is greater than the order invoice total.', array(), 'Admin.Orderscustomers.Notification');\n                                } else {\n                                    $cart_rules[$order_invoice->id]['value_tax_incl'] = Tools::ps_round($discount_value, 2);\n                                    $cart_rules[$order_invoice->id]['value_tax_excl'] = Tools::ps_round($discount_value / (1 + ($order->getTaxesAverageUsed() / 100)), 2);\n\n                                    // Update OrderInvoice\n                                    $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                }\n                            } elseif ($order->hasInvoice()) {\n                                $order_invoices_collection = $order->getInvoicesCollection();\n                                foreach ($order_invoices_collection as $order_invoice) {\n                                    /** @var OrderInvoice $order_invoice */\n                                    if ($discount_value > $order_invoice->total_paid_tax_incl) {\n                                        $this->errors[] = $this->trans('The discount value is greater than the order invoice total.', array(), 'Admin.Orderscustomers.Notification') . $order_invoice->getInvoiceNumberFormatted(Context::getContext()->language->id, (int) $order->id_shop) . ')';\n                                    } else {\n                                        $cart_rules[$order_invoice->id]['value_tax_incl'] = Tools::ps_round($discount_value, 2);\n                                        $cart_rules[$order_invoice->id]['value_tax_excl'] = Tools::ps_round($discount_value / (1 + ($order->getTaxesAverageUsed() / 100)), 2);\n\n                                        // Update OrderInvoice\n                                        $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                    }\n                                }\n                            } else {\n                                if ($discount_value > $order->total_paid_tax_incl) {\n                                    $this->errors[] = $this->trans('The discount value is greater than the order total.', array(), 'Admin.Orderscustomers.Notification');\n                                } else {\n                                    $cart_rules[0]['value_tax_incl'] = Tools::ps_round($discount_value, 2);\n                                    $cart_rules[0]['value_tax_excl'] = Tools::ps_round($discount_value / (1 + ($order->getTaxesAverageUsed() / 100)), 2);\n                                }\n                            }\n\n                            break;\n                        // Free shipping type\n                        case 3:\n                            if (isset($order_invoice)) {\n                                if ($order_invoice->total_shipping_tax_incl > 0) {\n                                    $cart_rules[$order_invoice->id]['value_tax_incl'] = $order_invoice->total_shipping_tax_incl;\n                                    $cart_rules[$order_invoice->id]['value_tax_excl'] = $order_invoice->total_shipping_tax_excl;\n\n                                    // Update OrderInvoice\n                                    $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                }\n                            } elseif ($order->hasInvoice()) {\n                                $order_invoices_collection = $order->getInvoicesCollection();\n                                foreach ($order_invoices_collection as $order_invoice) {\n                                    /** @var OrderInvoice $order_invoice */\n                                    if ($order_invoice->total_shipping_tax_incl <= 0) {\n                                        continue;\n                                    }\n                                    $cart_rules[$order_invoice->id]['value_tax_incl'] = $order_invoice->total_shipping_tax_incl;\n                                    $cart_rules[$order_invoice->id]['value_tax_excl'] = $order_invoice->total_shipping_tax_excl;\n\n                                    // Update OrderInvoice\n                                    $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                }\n                            } else {\n                                $cart_rules[0]['value_tax_incl'] = $order->total_shipping_tax_incl;\n                                $cart_rules[0]['value_tax_excl'] = $order->total_shipping_tax_excl;\n                            }\n\n                            break;\n                        default:\n                            $this->errors[] = $this->trans('The discount type is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n\n                    $res = true;\n                    foreach ($cart_rules as &$cart_rule) {\n                        $cartRuleObj = new CartRule();\n                        $cartRuleObj->date_from = date('Y-m-d H:i:s', strtotime('-1 hour', strtotime($order->date_add)));\n                        $cartRuleObj->date_to = date('Y-m-d H:i:s', strtotime('+1 hour'));\n                        $cartRuleObj->name[Configuration::get('PS_LANG_DEFAULT')] = Tools::getValue('discount_name');\n                        $cartRuleObj->quantity = 0;\n                        $cartRuleObj->quantity_per_user = 1;\n                        if (Tools::getValue('discount_type') == 1) {\n                            $cartRuleObj->reduction_percent = $discount_value;\n                        } elseif (Tools::getValue('discount_type') == 2) {\n                            $cartRuleObj->reduction_amount = $cart_rule['value_tax_excl'];\n                        } elseif (Tools::getValue('discount_type') == 3) {\n                            $cartRuleObj->free_shipping = 1;\n                        }\n                        $cartRuleObj->active = 0;\n                        if ($res = $cartRuleObj->add()) {\n                            $cart_rule['id'] = $cartRuleObj->id;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    if ($res) {\n                        foreach ($cart_rules as $id_order_invoice => $cart_rule) {\n                            // Create OrderCartRule\n                            $order_cart_rule = new OrderCartRule();\n                            $order_cart_rule->id_order = $order->id;\n                            $order_cart_rule->id_cart_rule = $cart_rule['id'];\n                            $order_cart_rule->id_order_invoice = $id_order_invoice;\n                            $order_cart_rule->name = Tools::getValue('discount_name');\n                            $order_cart_rule->value = $cart_rule['value_tax_incl'];\n                            $order_cart_rule->value_tax_excl = $cart_rule['value_tax_excl'];\n                            $res &= $order_cart_rule->add();\n\n                            $order->total_discounts += $order_cart_rule->value;\n                            $order->total_discounts_tax_incl += $order_cart_rule->value;\n                            $order->total_discounts_tax_excl += $order_cart_rule->value_tax_excl;\n                            $order->total_paid -= $order_cart_rule->value;\n                            $order->total_paid_tax_incl -= $order_cart_rule->value;\n                            $order->total_paid_tax_excl -= $order_cart_rule->value_tax_excl;\n                        }\n\n                        // Update Order\n                        $res &= $order->update();\n                    }\n\n                    if ($res) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n                    } else {\n                        $this->errors[] = $this->trans('An error occurred during the OrderCartRule creation', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('sendStateEmail') && Tools::getValue('sendStateEmail') > 0 && Tools::getValue('id_order') > 0) {\n            if ($this->access('edit')) {\n                $order_state = new OrderState((int) Tools::getValue('sendStateEmail'));\n\n                if (!Validate::isLoadedObject($order_state)) {\n                    $this->errors[] = $this->trans('An error occurred while loading order status.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    $history = new OrderHistory((int) Tools::getValue('id_order_history'));\n\n                    $carrier = new Carrier($order->id_carrier, $order->id_lang);\n                    $templateVars = array();\n                    if ($order_state->id == Configuration::get('PS_OS_SHIPPING') && $order->shipping_number) {\n                        $templateVars = array('{followup}' => str_replace('@', $order->shipping_number, $carrier->url));\n                    }\n\n                    if ($history->sendEmail($order, $templateVars)) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=10&token=' . $this->token);\n                    } else {\n                        $this->errors[] = $this->trans('An error occurred while sending the e-mail to the customer.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        }\n\n        parent::postProcess();\n    }\n\n    public function renderKpis()\n    {\n        $time = time();\n        $kpis = array();\n\n        /* The data generation is located in AdminStatsControllerCore */\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-conversion-rate';\n        $helper->icon = 'icon-sort-by-attributes-alt';\n        //$helper->chart = true;\n        $helper->color = 'color1';\n        $helper->title = $this->trans('Conversion Rate', array(), 'Admin.Global');\n        $helper->subtitle = $this->trans('30 days', array(), 'Admin.Global');\n        if (ConfigurationKPI::get('CONVERSION_RATE') !== false) {\n            $helper->value = ConfigurationKPI::get('CONVERSION_RATE');\n        }\n        if (ConfigurationKPI::get('CONVERSION_RATE_CHART') !== false) {\n            $helper->data = ConfigurationKPI::get('CONVERSION_RATE_CHART');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=conversion_rate';\n        $helper->refresh = (bool) (ConfigurationKPI::get('CONVERSION_RATE_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-carts';\n        $helper->icon = 'icon-shopping-cart';\n        $helper->color = 'color2';\n        $helper->title = $this->trans('Abandoned Carts', array(), 'Admin.Global');\n        $helper->subtitle = $this->trans('Today', array(), 'Admin.Global');\n        $helper->href = $this->context->link->getAdminLink('AdminCarts') . '&action=filterOnlyAbandonedCarts';\n        if (ConfigurationKPI::get('ABANDONED_CARTS') !== false) {\n            $helper->value = ConfigurationKPI::get('ABANDONED_CARTS');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=abandoned_cart';\n        $helper->refresh = (bool) (ConfigurationKPI::get('ABANDONED_CARTS_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-average-order';\n        $helper->icon = 'icon-money';\n        $helper->color = 'color3';\n        $helper->title = $this->trans('Average Order Value', array(), 'Admin.Global');\n        $helper->subtitle = $this->trans('30 days', array(), 'Admin.Global');\n        if (ConfigurationKPI::get('AVG_ORDER_VALUE') !== false) {\n            $helper->value = $this->trans('%amount% tax excl.', array('%amount%' => ConfigurationKPI::get('AVG_ORDER_VALUE')), 'Admin.Orderscustomers.Feature');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=average_order_value';\n        $helper->refresh = (bool) (ConfigurationKPI::get('AVG_ORDER_VALUE_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-net-profit-visit';\n        $helper->icon = 'icon-user';\n        $helper->color = 'color4';\n        $helper->title = $this->trans('Net Profit per Visit', array(), 'Admin.Orderscustomers.Feature');\n        $helper->subtitle = $this->trans('30 days', array(), 'Admin.Orderscustomers.Feature');\n        if (ConfigurationKPI::get('NETPROFIT_VISIT') !== false) {\n            $helper->value = ConfigurationKPI::get('NETPROFIT_VISIT');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=netprofit_visit';\n        $helper->refresh = (bool) (ConfigurationKPI::get('NETPROFIT_VISIT_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpiRow();\n        $helper->kpis = $kpis;\n\n        return $helper->generate();\n    }\n\n    public function renderView()\n    {\n        $order = new Order(Tools::getValue('id_order'));\n        if (!Validate::isLoadedObject($order)) {\n            $this->errors[] = $this->trans('The order cannot be found within your database.', array(), 'Admin.Orderscustomers.Notification');\n        }\n\n        $customer = new Customer($order->id_customer);\n        $carrier = new Carrier($order->id_carrier);\n        $products = $this->getProducts($order);\n        $currency = new Currency((int) $order->id_currency);\n        // Carrier module call\n        $carrier_module_call = null;\n        if ($carrier->is_module) {\n            $module = Module::getInstanceByName($carrier->external_module_name);\n            if (method_exists($module, 'displayInfoByCart')) {\n                $carrier_module_call = call_user_func(array($module, 'displayInfoByCart'), $order->id_cart);\n            }\n        }\n\n        // Retrieve addresses information\n        $addressInvoice = new Address($order->id_address_invoice, $this->context->language->id);\n        if (Validate::isLoadedObject($addressInvoice) && $addressInvoice->id_state) {\n            $invoiceState = new State((int) $addressInvoice->id_state);\n        }\n\n        if ($order->id_address_invoice == $order->id_address_delivery) {\n            $addressDelivery = $addressInvoice;\n            if (isset($invoiceState)) {\n                $deliveryState = $invoiceState;\n            }\n        } else {\n            $addressDelivery = new Address($order->id_address_delivery, $this->context->language->id);\n            if (Validate::isLoadedObject($addressDelivery) && $addressDelivery->id_state) {\n                $deliveryState = new State((int) ($addressDelivery->id_state));\n            }\n        }\n\n        $this->toolbar_title = $this->trans(\n            'Order #%id% (%ref%) - %firstname% %lastname%',\n            array(\n                '%id%' => $order->id,\n                '%ref%' => $order->reference,\n                '%firstname%' => $customer->firstname,\n                '%lastname%' => $customer->lastname,\n            ),\n            'Admin.Orderscustomers.Feature'\n        );\n        if (Shop::isFeatureActive()) {\n            $shop = new Shop((int) $order->id_shop);\n            $this->toolbar_title .= ' - ' . $this->trans('Shop: %shop_name%', array('%shop_name%' => $shop->name), 'Admin.Orderscustomers.Feature');\n        }\n\n        // gets warehouses to ship products, if and only if advanced stock management is activated\n        $warehouse_list = null;\n\n        $order_details = $order->getOrderDetailList();\n        foreach ($order_details as $order_detail) {\n            $product = new Product($order_detail['product_id']);\n\n            if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')\n                && $product->advanced_stock_management) {\n                $warehouses = Warehouse::getWarehousesByProductId($order_detail['product_id'], $order_detail['product_attribute_id']);\n                foreach ($warehouses as $warehouse) {\n                    if (!isset($warehouse_list[$warehouse['id_warehouse']])) {\n                        $warehouse_list[$warehouse['id_warehouse']] = $warehouse;\n                    }\n                }\n            }\n        }\n\n        $payment_methods = array();\n        foreach (PaymentModule::getInstalledPaymentModules() as $payment) {\n            $module = Module::getInstanceByName($payment['name']);\n            if (Validate::isLoadedObject($module) && $module->active) {\n                $payment_methods[] = $module->displayName;\n            }\n        }\n\n        // display warning if there are products out of stock\n        $display_out_of_stock_warning = false;\n        $current_order_state = $order->getCurrentOrderState();\n        if (Configuration::get('PS_STOCK_MANAGEMENT') && (!Validate::isLoadedObject($current_order_state) || ($current_order_state->delivery != 1 && $current_order_state->shipped != 1))) {\n            $display_out_of_stock_warning = true;\n        }\n\n        // products current stock informations (from stock_available)\n        $stockLocationIsAvailable = false;\n        foreach ($products as &$product) {\n            // Get total customized quantity for current product\n            $customized_product_quantity = 0;\n\n            if (is_array($product['customizedDatas'])) {\n                foreach ($product['customizedDatas'] as $customizationPerAddress) {\n                    foreach ($customizationPerAddress as $customizationId => $customization) {\n                        $customized_product_quantity += (int) $customization['quantity'];\n                    }\n                }\n            }\n\n            $product['customized_product_quantity'] = $customized_product_quantity;\n            $product['current_stock'] = StockAvailable::getQuantityAvailableByProduct($product['product_id'], $product['product_attribute_id'], $product['id_shop']);\n            $resume = OrderSlip::getProductSlipResume($product['id_order_detail']);\n            $product['quantity_refundable'] = $product['product_quantity'] - $resume['product_quantity'];\n            $product['amount_refundable'] = $product['total_price_tax_excl'] - $resume['amount_tax_excl'];\n            $product['amount_refundable_tax_incl'] = $product['total_price_tax_incl'] - $resume['amount_tax_incl'];\n            $product['amount_refund'] = $order->getTaxCalculationMethod() ? Tools::displayPrice($resume['amount_tax_excl'], $currency) : Tools::displayPrice($resume['amount_tax_incl'], $currency);\n            $product['refund_history'] = OrderSlip::getProductSlipDetail($product['id_order_detail']);\n            $product['return_history'] = OrderReturn::getProductReturnDetail($product['id_order_detail']);\n\n            // if the current stock requires a warning\n            if ($product['current_stock'] <= 0 && $display_out_of_stock_warning) {\n                $this->displayWarning($this->trans('This product is out of stock: ', array(), 'Admin.Orderscustomers.Notification') . ' ' . $product['product_name']);\n            }\n            if ($product['id_warehouse'] != 0) {\n                $warehouse = new Warehouse((int) $product['id_warehouse']);\n                $product['warehouse_name'] = $warehouse->name;\n                $warehouse_location = WarehouseProductLocation::getProductLocation($product['product_id'], $product['product_attribute_id'], $product['id_warehouse']);\n                if (!empty($warehouse_location)) {\n                    $product['warehouse_location'] = $warehouse_location;\n                } else {\n                    $product['warehouse_location'] = false;\n                }\n            } else {\n                $product['warehouse_name'] = '--';\n                $product['warehouse_location'] = false;\n            }\n\n            if (!empty($product['location'])) {\n                $stockLocationIsAvailable = true;\n            }\n        }\n\n        // Package management for order\n        foreach ($products as &$product) {\n            $pack_items = $product['cache_is_pack'] ? Pack::getItemTable($product['id_product'], $this->context->language->id, true) : array();\n            foreach ($pack_items as &$pack_item) {\n                $pack_item['current_stock'] = StockAvailable::getQuantityAvailableByProduct($pack_item['id_product'], $pack_item['id_product_attribute'], $pack_item['id_shop']);\n                // if the current stock requires a warning\n                if ($product['current_stock'] <= 0 && $display_out_of_stock_warning) {\n                    $this->displayWarning($this->trans('This product, included in package (' . $product['product_name'] . ') is out of stock: ', array(), 'Admin.Orderscustomers.Notification') . ' ' . $pack_item['product_name']);\n                }\n                $this->setProductImageInformations($pack_item);\n                if ($pack_item['image'] != null) {\n                    $name = 'product_mini_' . (int) $pack_item['id_product'] . (isset($pack_item['id_product_attribute']) ? '_' . (int) $pack_item['id_product_attribute'] : '') . '.jpg';\n                    // generate image cache, only for back office\n                    $pack_item['image_tag'] = ImageManager::thumbnail(_PS_IMG_DIR_ . 'p/' . $pack_item['image']->getExistingImgPath() . '.jpg', $name, 45, 'jpg');\n                    if (file_exists(_PS_TMP_IMG_DIR_ . $name)) {\n                        $pack_item['image_size'] = getimagesize(_PS_TMP_IMG_DIR_ . $name);\n                    } else {\n                        $pack_item['image_size'] = false;\n                    }\n                }\n            }\n            $product['pack_items'] = $pack_items;\n        }\n\n        $gender = new Gender((int) $customer->id_gender, $this->context->language->id);\n\n        $history = $order->getHistory($this->context->language->id);\n\n        foreach ($history as &$order_state) {\n            $order_state['text-color'] = Tools::getBrightness($order_state['color']) < 128 ? 'white' : 'black';\n        }\n\n        $shipping_refundable_tax_excl = $order->total_shipping_tax_excl;\n        $shipping_refundable_tax_incl = $order->total_shipping_tax_incl;\n        $slips = OrderSlip::getOrdersSlip($customer->id, $order->id);\n        foreach ($slips as $slip) {\n            $shipping_refundable_tax_excl -= $slip['total_shipping_tax_excl'];\n            $shipping_refundable_tax_incl -= $slip['total_shipping_tax_incl'];\n        }\n        $shipping_refundable_tax_excl = max(0, $shipping_refundable_tax_excl);\n        $shipping_refundable_tax_incl = max(0, $shipping_refundable_tax_incl);\n\n        // Smarty assign\n        $this->tpl_view_vars = array(\n            'order' => $order,\n            'cart' => new Cart($order->id_cart),\n            'customer' => $customer,\n            'gender' => $gender,\n            'customer_addresses' => $customer->getAddresses($this->context->language->id),\n            'addresses' => array(\n                'delivery' => $addressDelivery,\n                'deliveryState' => isset($deliveryState) ? $deliveryState : null,\n                'invoice' => $addressInvoice,\n                'invoiceState' => isset($invoiceState) ? $invoiceState : null,\n            ),\n            'customerStats' => $customer->getStats(),\n            'products' => $products,\n            'discounts' => $order->getCartRules(),\n            'orders_total_paid_tax_incl' => $order->getOrdersTotalPaid(), // Get the sum of total_paid_tax_incl of the order with similar reference\n            'total_paid' => $order->getTotalPaid(),\n            'returns' => OrderReturn::getOrdersReturn($order->id_customer, $order->id),\n            'shipping_refundable_tax_excl' => $shipping_refundable_tax_excl,\n            'shipping_refundable_tax_incl' => $shipping_refundable_tax_incl,\n            'customer_thread_message' => CustomerThread::getCustomerMessages($order->id_customer, null, $order->id),\n            'orderMessages' => OrderMessage::getOrderMessages($order->id_lang),\n            'messages' => CustomerThread::getCustomerMessagesOrder($order->id_customer, $order->id),\n            'carrier' => new Carrier($order->id_carrier),\n            'history' => $history,\n            'states' => OrderState::getOrderStates($this->context->language->id),\n            'warehouse_list' => $warehouse_list,\n            'sources' => ConnectionsSource::getOrderSources($order->id),\n            'currentState' => $order->getCurrentOrderState(),\n            'currency' => new Currency($order->id_currency),\n            'currencies' => Currency::getCurrenciesByIdShop($order->id_shop),\n            'previousOrder' => $order->getPreviousOrderId(),\n            'nextOrder' => $order->getNextOrderId(),\n            'current_index' => self::$currentIndex,\n            'carrierModuleCall' => $carrier_module_call,\n            'iso_code_lang' => $this->context->language->iso_code,\n            'id_lang' => $this->context->language->id,\n            'can_edit' => ($this->access('edit')),\n            'current_id_lang' => $this->context->language->id,\n            'invoices_collection' => $order->getInvoicesCollection(),\n            'not_paid_invoices_collection' => $order->getNotPaidInvoicesCollection(),\n            'payment_methods' => $payment_methods,\n            'invoice_management_active' => Configuration::get('PS_INVOICE', null, null, $order->id_shop),\n            'display_warehouse' => (int) Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT'),\n            'carrier_list' => $this->getCarrierList($order),\n            'recalculate_shipping_cost' => (int) Configuration::get('PS_ORDER_RECALCULATE_SHIPPING'),\n            'stock_location_is_available' => $stockLocationIsAvailable,\n            'HOOK_CONTENT_ORDER' => Hook::exec(\n                'displayAdminOrderContentOrder',\n                array(\n                    'order' => $order,\n                    'products' => $products,\n                    'customer' => $customer, )\n            ),\n            'HOOK_CONTENT_SHIP' => Hook::exec(\n                'displayAdminOrderContentShip',\n                array(\n                    'order' => $order,\n                    'products' => $products,\n                    'customer' => $customer, )\n            ),\n            'HOOK_TAB_ORDER' => Hook::exec(\n                'displayAdminOrderTabOrder',\n                array(\n                    'order' => $order,\n                    'products' => $products,\n                    'customer' => $customer, )\n            ),\n            'HOOK_TAB_SHIP' => Hook::exec(\n                'displayAdminOrderTabShip',\n                array(\n                    'order' => $order,\n                    'products' => $products,\n                    'customer' => $customer, )\n            ),\n        );\n\n        return parent::renderView();\n    }\n\n    public function ajaxProcessSearchProducts()\n    {\n        Context::getContext()->customer = new Customer((int) Tools::getValue('id_customer'));\n        $currency = new Currency((int) Tools::getValue('id_currency'));\n        if ($products = Product::searchByName((int) $this->context->language->id, pSQL(Tools::getValue('product_search')))) {\n            foreach ($products as &$product) {\n                // Formatted price\n                $product['formatted_price'] = Tools::displayPrice(Tools::convertPrice($product['price_tax_incl'], $currency), $currency);\n                // Concret price\n                $product['price_tax_incl'] = Tools::ps_round(Tools::convertPrice($product['price_tax_incl'], $currency), 2);\n                $product['price_tax_excl'] = Tools::ps_round(Tools::convertPrice($product['price_tax_excl'], $currency), 2);\n                $productObj = new Product((int) $product['id_product'], false, (int) $this->context->language->id);\n                $combinations = array();\n                $attributes = $productObj->getAttributesGroups((int) $this->context->language->id);\n\n                // Tax rate for this customer\n                if (Tools::isSubmit('id_address')) {\n                    $product['tax_rate'] = $productObj->getTaxesRate(new Address(Tools::getValue('id_address')));\n                }\n\n                $product['warehouse_list'] = array();\n\n                foreach ($attributes as $attribute) {\n                    if (!isset($combinations[$attribute['id_product_attribute']]['attributes'])) {\n                        $combinations[$attribute['id_product_attribute']]['attributes'] = '';\n                    }\n                    $combinations[$attribute['id_product_attribute']]['attributes'] .= $attribute['attribute_name'] . ' - ';\n                    $combinations[$attribute['id_product_attribute']]['id_product_attribute'] = $attribute['id_product_attribute'];\n                    $combinations[$attribute['id_product_attribute']]['default_on'] = $attribute['default_on'];\n                    if (!isset($combinations[$attribute['id_product_attribute']]['price'])) {\n                        $price_tax_incl = Product::getPriceStatic((int) $product['id_product'], true, $attribute['id_product_attribute']);\n                        $price_tax_excl = Product::getPriceStatic((int) $product['id_product'], false, $attribute['id_product_attribute']);\n                        $combinations[$attribute['id_product_attribute']]['price_tax_incl'] = Tools::ps_round(Tools::convertPrice($price_tax_incl, $currency), 2);\n                        $combinations[$attribute['id_product_attribute']]['price_tax_excl'] = Tools::ps_round(Tools::convertPrice($price_tax_excl, $currency), 2);\n                        $combinations[$attribute['id_product_attribute']]['formatted_price'] = Tools::displayPrice(Tools::convertPrice($price_tax_excl, $currency), $currency);\n                    }\n                    if (!isset($combinations[$attribute['id_product_attribute']]['qty_in_stock'])) {\n                        $combinations[$attribute['id_product_attribute']]['qty_in_stock'] = StockAvailable::getQuantityAvailableByProduct((int) $product['id_product'], $attribute['id_product_attribute'], (int) $this->context->shop->id);\n                    }\n\n                    if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && (int) $product['advanced_stock_management'] == 1) {\n                        $product['warehouse_list'][$attribute['id_product_attribute']] = Warehouse::getProductWarehouseList($product['id_product'], $attribute['id_product_attribute']);\n                    } else {\n                        $product['warehouse_list'][$attribute['id_product_attribute']] = array();\n                    }\n\n                    $product['stock'][$attribute['id_product_attribute']] = Product::getRealQuantity($product['id_product'], $attribute['id_product_attribute']);\n                }\n\n                if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && (int) $product['advanced_stock_management'] == 1) {\n                    $product['warehouse_list'][0] = Warehouse::getProductWarehouseList($product['id_product']);\n                } else {\n                    $product['warehouse_list'][0] = array();\n                }\n\n                $product['stock'][0] = StockAvailable::getQuantityAvailableByProduct((int) $product['id_product'], 0, (int) $this->context->shop->id);\n\n                foreach ($combinations as &$combination) {\n                    $combination['attributes'] = rtrim($combination['attributes'], ' - ');\n                }\n                $product['combinations'] = $combinations;\n\n                if ($product['customizable']) {\n                    $product_instance = new Product((int) $product['id_product']);\n                    $product['customization_fields'] = $product_instance->getCustomizationFields($this->context->language->id);\n                }\n            }\n\n            $to_return = array(\n                'products' => $products,\n                'found' => true,\n            );\n        } else {\n            $to_return = array('found' => false);\n        }\n\n        $this->content = json_encode($to_return);\n    }\n\n    public function ajaxProcessSendMailValidateOrder()\n    {\n        if ($this->access('edit')) {\n            $cart = new Cart((int) Tools::getValue('id_cart'));\n            if (Validate::isLoadedObject($cart)) {\n                $customer = new Customer((int) $cart->id_customer);\n                if (Validate::isLoadedObject($customer)) {\n                    $mailVars = array(\n                        '{order_link}' => Context::getContext()->link->getPageLink('order', false, (int) $cart->id_lang, 'step=3&recover_cart=' . (int) $cart->id . '&token_cart=' . md5(_COOKIE_KEY_ . 'recover_cart_' . (int) $cart->id)),\n                        '{firstname}' => $customer->firstname,\n                        '{lastname}' => $customer->lastname,\n                    );\n                    $cartLanguage = new Language((int) $cart->id_lang);\n                    if (\n                        Mail::Send(\n                            (int) $cart->id_lang,\n                            'backoffice_order',\n                            $this->trans(\n                                'Process the payment of your order',\n                                array(),\n                                'Emails.Subject',\n                                $cartLanguage->locale\n                            ),\n                            $mailVars,\n                            $customer->email,\n                            $customer->firstname . ' ' . $customer->lastname,\n                            null,\n                            null,\n                            null,\n                            null,\n                            _PS_MAIL_DIR_,\n                            true,\n                            $cart->id_shop\n                        )\n                    ) {\n                        die(json_encode(array('errors' => false, 'result' => $this->trans('The email was sent to your customer.', array(), 'Admin.Orderscustomers.Notification'))));\n                    }\n                }\n            }\n            $this->content = json_encode(array('errors' => true, 'result' => $this->trans('Error in sending the email to your customer.', array(), 'Admin.Orderscustomers.Notification')));\n        }\n    }\n\n    public function ajaxProcessAddProductOnOrder()\n    {\n        // Load object\n        $order = new Order((int) Tools::getValue('id_order'));\n        if (!Validate::isLoadedObject($order)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The order object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        $old_cart_rules = Context::getContext()->cart->getCartRules();\n\n        if ($order->hasBeenShipped()) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot add products to delivered orders.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        $product_informations = $_POST['add_product'];\n        if (isset($_POST['add_invoice'])) {\n            $invoice_informations = $_POST['add_invoice'];\n        } else {\n            $invoice_informations = array();\n        }\n        $product = new Product($product_informations['product_id'], false, $order->id_lang);\n        if (!Validate::isLoadedObject($product)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The product object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (isset($product_informations['product_attribute_id']) && $product_informations['product_attribute_id']) {\n            $combination = new Combination($product_informations['product_attribute_id']);\n            if (!Validate::isLoadedObject($combination)) {\n                die(json_encode(array(\n                    'result' => false,\n                    'error' => $this->trans('The combination object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n                )));\n            }\n        }\n\n        // Total method\n        $total_method = Cart::BOTH_WITHOUT_SHIPPING;\n\n        // Create new cart\n        $cart = new Cart();\n        $cart->id_shop_group = $order->id_shop_group;\n        $cart->id_shop = $order->id_shop;\n        $cart->id_customer = $order->id_customer;\n        $cart->id_carrier = $order->id_carrier;\n        $cart->id_address_delivery = $order->id_address_delivery;\n        $cart->id_address_invoice = $order->id_address_invoice;\n        $cart->id_currency = $order->id_currency;\n        $cart->id_lang = $order->id_lang;\n        $cart->secure_key = $order->secure_key;\n\n        // Save new cart\n        $cart->add();\n\n        // Save context (in order to apply cart rule)\n        $this->context->cart = $cart;\n        $this->context->customer = new Customer($order->id_customer);\n\n        // always add taxes even if there are not displayed to the customer\n        $use_taxes = true;\n\n        $initial_product_price_tax_incl = Product::getPriceStatic(\n            $product->id,\n            $use_taxes,\n            isset($combination) ? $combination->id : null,\n            2,\n            null,\n            false,\n            true,\n            1,\n            false,\n            $order->id_customer,\n            $cart->id,\n            $order->{Configuration::get('PS_TAX_ADDRESS_TYPE', null, null, $order->id_shop)}\n        );\n\n        // Creating specific price if needed\n        if ($product_informations['product_price_tax_incl'] != $initial_product_price_tax_incl) {\n            $specific_price = new SpecificPrice();\n            $specific_price->id_shop = 0;\n            $specific_price->id_shop_group = 0;\n            $specific_price->id_currency = 0;\n            $specific_price->id_country = 0;\n            $specific_price->id_group = 0;\n            $specific_price->id_customer = $order->id_customer;\n            $specific_price->id_product = $product->id;\n            if (isset($combination)) {\n                $specific_price->id_product_attribute = $combination->id;\n            } else {\n                $specific_price->id_product_attribute = 0;\n            }\n            $specific_price->price = $product_informations['product_price_tax_excl'];\n            $specific_price->from_quantity = 1;\n            $specific_price->reduction = 0;\n            $specific_price->reduction_type = 'amount';\n            $specific_price->reduction_tax = 0;\n            $specific_price->from = '0000-00-00 00:00:00';\n            $specific_price->to = '0000-00-00 00:00:00';\n            $specific_price->add();\n        }\n\n        // Add product to cart\n        $update_quantity = $cart->updateQty(\n            $product_informations['product_quantity'],\n            $product->id,\n            isset($product_informations['product_attribute_id']) ? $product_informations['product_attribute_id'] : null,\n            isset($combination) ? $combination->id : null,\n            'up',\n            0,\n            new Shop($cart->id_shop)\n        );\n\n        if ($update_quantity < 0) {\n            // If product has attribute, minimal quantity is set with minimal quantity of attribute\n            $minimal_quantity = ($product_informations['product_attribute_id']) ? Attribute::getAttributeMinimalQty($product_informations['product_attribute_id']) : $product->minimal_quantity;\n            die(json_encode(array('error' => $this->trans('You must add %d minimum quantity', array('%d' => $minimal_quantity), 'Admin.Orderscustomers.Notification'))));\n        } elseif (!$update_quantity) {\n            die(json_encode(array('error' => $this->trans('You already have the maximum quantity available for this product.', array(), 'Admin.Orderscustomers.Notification'))));\n        }\n\n        // If order is valid, we can create a new invoice or edit an existing invoice\n        if ($order->hasInvoice()) {\n            $order_invoice = new OrderInvoice($product_informations['invoice']);\n            // Create new invoice\n            if ($order_invoice->id == 0) {\n                // If we create a new invoice, we calculate shipping cost\n                $total_method = Cart::BOTH;\n                // Create Cart rule in order to make free shipping\n                if (isset($invoice_informations['free_shipping']) && $invoice_informations['free_shipping']) {\n                    $cart_rule = new CartRule();\n                    $cart_rule->id_customer = $order->id_customer;\n                    $cart_rule->name = array(\n                        Configuration::get('PS_LANG_DEFAULT') => $this->trans('[Generated] CartRule for Free Shipping', array(), 'Admin.Orderscustomers.Notification'),\n                    );\n                    $cart_rule->date_from = date('Y-m-d H:i:s', time());\n                    $cart_rule->date_to = date('Y-m-d H:i:s', time() + 24 * 3600);\n                    $cart_rule->quantity = 1;\n                    $cart_rule->quantity_per_user = 1;\n                    $cart_rule->minimum_amount_currency = $order->id_currency;\n                    $cart_rule->reduction_currency = $order->id_currency;\n                    $cart_rule->free_shipping = true;\n                    $cart_rule->active = 1;\n                    $cart_rule->add();\n\n                    // Add cart rule to cart and in order\n                    $cart->addCartRule($cart_rule->id);\n                    $values = array(\n                        'tax_incl' => $cart_rule->getContextualValue(true),\n                        'tax_excl' => $cart_rule->getContextualValue(false),\n                    );\n                    $order->addCartRule($cart_rule->id, $cart_rule->name[Configuration::get('PS_LANG_DEFAULT')], $values);\n                }\n\n                $order_invoice->id_order = $order->id;\n                if ($order_invoice->number) {\n                    Configuration::updateValue('PS_INVOICE_START_NUMBER', false, false, null, $order->id_shop);\n                } else {\n                    $order_invoice->number = Order::getLastInvoiceNumber() + 1;\n                }\n\n                $invoice_address = new Address((int) $order->{Configuration::get('PS_TAX_ADDRESS_TYPE', null, null, $order->id_shop)});\n                $carrier = new Carrier((int) $order->id_carrier);\n                $tax_calculator = $carrier->getTaxCalculator($invoice_address);\n\n                $order_invoice->total_paid_tax_excl = Tools::ps_round((float) $cart->getOrderTotal(false, $total_method), 2);\n                $order_invoice->total_paid_tax_incl = Tools::ps_round((float) $cart->getOrderTotal($use_taxes, $total_method), 2);\n                $order_invoice->total_products = (float) $cart->getOrderTotal(false, Cart::ONLY_PRODUCTS);\n                $order_invoice->total_products_wt = (float) $cart->getOrderTotal($use_taxes, Cart::ONLY_PRODUCTS);\n                $order_invoice->total_shipping_tax_excl = (float) $cart->getTotalShippingCost(null, false);\n                $order_invoice->total_shipping_tax_incl = (float) $cart->getTotalShippingCost();\n\n                $order_invoice->total_wrapping_tax_excl = abs($cart->getOrderTotal(false, Cart::ONLY_WRAPPING));\n                $order_invoice->total_wrapping_tax_incl = abs($cart->getOrderTotal($use_taxes, Cart::ONLY_WRAPPING));\n                $order_invoice->shipping_tax_computation_method = (int) $tax_calculator->computation_method;\n\n                // Update current order field, only shipping because other field is updated later\n                $order->total_shipping += $order_invoice->total_shipping_tax_incl;\n                $order->total_shipping_tax_excl += $order_invoice->total_shipping_tax_excl;\n                $order->total_shipping_tax_incl += ($use_taxes) ? $order_invoice->total_shipping_tax_incl : $order_invoice->total_shipping_tax_excl;\n\n                $order->total_wrapping += abs($cart->getOrderTotal($use_taxes, Cart::ONLY_WRAPPING));\n                $order->total_wrapping_tax_excl += abs($cart->getOrderTotal(false, Cart::ONLY_WRAPPING));\n                $order->total_wrapping_tax_incl += abs($cart->getOrderTotal($use_taxes, Cart::ONLY_WRAPPING));\n                $order_invoice->add();\n\n                $order_invoice->saveCarrierTaxCalculator($tax_calculator->getTaxesAmount($order_invoice->total_shipping_tax_excl));\n\n                $order_carrier = new OrderCarrier();\n                $order_carrier->id_order = (int) $order->id;\n                $order_carrier->id_carrier = (int) $order->id_carrier;\n                $order_carrier->id_order_invoice = (int) $order_invoice->id;\n                $order_carrier->weight = (float) $cart->getTotalWeight();\n                $order_carrier->shipping_cost_tax_excl = (float) $order_invoice->total_shipping_tax_excl;\n                $order_carrier->shipping_cost_tax_incl = ($use_taxes) ? (float) $order_invoice->total_shipping_tax_incl : (float) $order_invoice->total_shipping_tax_excl;\n                $order_carrier->add();\n            } else {\n                // Update current invoice\n                $order_invoice->total_paid_tax_excl += Tools::ps_round((float) ($cart->getOrderTotal(false, $total_method)), 2);\n                $order_invoice->total_paid_tax_incl += Tools::ps_round((float) ($cart->getOrderTotal($use_taxes, $total_method)), 2);\n                $order_invoice->total_products += (float) $cart->getOrderTotal(false, Cart::ONLY_PRODUCTS);\n                $order_invoice->total_products_wt += (float) $cart->getOrderTotal($use_taxes, Cart::ONLY_PRODUCTS);\n                $order_invoice->update();\n            }\n        }\n\n        // Create Order detail information\n        $order_detail = new OrderDetail();\n        $order_detail->createList($order, $cart, $order->getCurrentOrderState(), $cart->getProducts(), (isset($order_invoice) ? $order_invoice->id : 0), $use_taxes, (int) Tools::getValue('add_product_warehouse'));\n\n        // update totals amount of order\n        $order->total_products += (float) $cart->getOrderTotal(false, Cart::ONLY_PRODUCTS);\n        $order->total_products_wt += (float) $cart->getOrderTotal($use_taxes, Cart::ONLY_PRODUCTS);\n\n        $order->total_paid += Tools::ps_round((float) ($cart->getOrderTotal(true, $total_method)), 2);\n        $order->total_paid_tax_excl += Tools::ps_round((float) ($cart->getOrderTotal(false, $total_method)), 2);\n        $order->total_paid_tax_incl += Tools::ps_round((float) ($cart->getOrderTotal($use_taxes, $total_method)), 2);\n\n        if (isset($order_invoice) && Validate::isLoadedObject($order_invoice)) {\n            $order->total_shipping = $order_invoice->total_shipping_tax_incl;\n            $order->total_shipping_tax_incl = $order_invoice->total_shipping_tax_incl;\n            $order->total_shipping_tax_excl = $order_invoice->total_shipping_tax_excl;\n        }\n        // discount\n        $order->total_discounts += (float) abs($cart->getOrderTotal(true, Cart::ONLY_DISCOUNTS));\n        $order->total_discounts_tax_excl += (float) abs($cart->getOrderTotal(false, Cart::ONLY_DISCOUNTS));\n        $order->total_discounts_tax_incl += (float) abs($cart->getOrderTotal(true, Cart::ONLY_DISCOUNTS));\n\n        // Save changes of order\n        $order->update();\n\n        StockAvailable::synchronize($product->id);\n\n        // Update weight SUM\n        $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n        if (Validate::isLoadedObject($order_carrier)) {\n            $order_carrier->weight = (float) $order->getTotalWeight();\n            if ($order_carrier->update()) {\n                $order->weight = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $order_carrier->weight);\n            }\n        }\n\n        // Update Tax lines\n        $order_detail->updateTaxAmount($order);\n\n        // Delete specific price if exists\n        if (isset($specific_price)) {\n            $specific_price->delete();\n        }\n\n        $products = $this->getProducts($order);\n\n        // Get the last product\n        $product = end($products);\n        $resume = OrderSlip::getProductSlipResume((int) $product['id_order_detail']);\n        $product['quantity_refundable'] = $product['product_quantity'] - $resume['product_quantity'];\n        $product['amount_refundable'] = $product['total_price_tax_excl'] - $resume['amount_tax_excl'];\n        $product['amount_refund'] = Tools::displayPrice($resume['amount_tax_incl']);\n        $product['return_history'] = OrderReturn::getProductReturnDetail((int) $product['id_order_detail']);\n        $product['refund_history'] = OrderSlip::getProductSlipDetail((int) $product['id_order_detail']);\n        if ($product['id_warehouse'] != 0) {\n            $warehouse = new Warehouse((int) $product['id_warehouse']);\n            $product['warehouse_name'] = $warehouse->name;\n            $warehouse_location = WarehouseProductLocation::getProductLocation($product['product_id'], $product['product_attribute_id'], $product['id_warehouse']);\n            if (!empty($warehouse_location)) {\n                $product['warehouse_location'] = $warehouse_location;\n            } else {\n                $product['warehouse_location'] = false;\n            }\n        } else {\n            $product['warehouse_name'] = '--';\n            $product['warehouse_location'] = false;\n        }\n\n        // Get invoices collection\n        $invoice_collection = $order->getInvoicesCollection();\n\n        $invoice_array = array();\n        foreach ($invoice_collection as $invoice) {\n            /* @var OrderInvoice $invoice */\n            $invoice->name = $invoice->getInvoiceNumberFormatted(Context::getContext()->language->id, (int) $order->id_shop);\n            $invoice_array[] = $invoice;\n        }\n\n        $order = $order->refreshShippingCost();\n\n        // Assign to smarty informations in order to show the new product line\n        $this->context->smarty->assign(array(\n            'product' => $product,\n            'order' => $order,\n            'currency' => new Currency($order->id_currency),\n            'can_edit' => $this->access('edit'),\n            'invoices_collection' => $invoice_collection,\n            'current_id_lang' => Context::getContext()->language->id,\n            'link' => Context::getContext()->link,\n            'current_index' => self::$currentIndex,\n            'display_warehouse' => (int) Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT'),\n        ));\n\n        $this->sendChangedNotification($order);\n        $new_cart_rules = Context::getContext()->cart->getCartRules();\n        sort($old_cart_rules);\n        sort($new_cart_rules);\n        $result = array_diff($new_cart_rules, $old_cart_rules);\n        $refresh = false;\n\n        $res = true;\n        foreach ($result as $cart_rule) {\n            $refresh = true;\n            // Create OrderCartRule\n            $rule = new CartRule($cart_rule['id_cart_rule']);\n            $values = array(\n                'tax_incl' => $rule->getContextualValue(true),\n                'tax_excl' => $rule->getContextualValue(false),\n            );\n            $order_cart_rule = new OrderCartRule();\n            $order_cart_rule->id_order = $order->id;\n            $order_cart_rule->id_cart_rule = $cart_rule['id_cart_rule'];\n            $order_cart_rule->id_order_invoice = $order_invoice->id;\n            $order_cart_rule->name = $cart_rule['name'];\n            $order_cart_rule->value = $values['tax_incl'];\n            $order_cart_rule->value_tax_excl = $values['tax_excl'];\n            $res &= $order_cart_rule->add();\n\n            $order->total_discounts += $order_cart_rule->value;\n            $order->total_discounts_tax_incl += $order_cart_rule->value;\n            $order->total_discounts_tax_excl += $order_cart_rule->value_tax_excl;\n            $order->total_paid -= $order_cart_rule->value;\n            $order->total_paid_tax_incl -= $order_cart_rule->value;\n            $order->total_paid_tax_excl -= $order_cart_rule->value_tax_excl;\n        }\n\n        // Update Order\n        $res &= $order->update();\n\n        die(json_encode(array(\n            'result' => true,\n            'view' => $this->createTemplate('_product_line.tpl')->fetch(),\n            'can_edit' => $this->access('add'),\n            'order' => $order,\n            'invoices' => $invoice_array,\n            'documents_html' => $this->createTemplate('_documents.tpl')->fetch(),\n            'shipping_html' => $this->createTemplate('_shipping.tpl')->fetch(),\n            'discount_form_html' => $this->createTemplate('_discount_form.tpl')->fetch(),\n            'refresh' => $refresh,\n        )));\n    }\n\n    public function sendChangedNotification(Order $order = null)\n    {\n        if (null === $order) {\n            $order = new Order(Tools::getValue('id_order'));\n        }\n\n        Hook::exec('actionOrderEdited', array('order' => $order));\n    }\n\n    public function ajaxProcessLoadProductInformation()\n    {\n        $order_detail = new OrderDetail(Tools::getValue('id_order_detail'));\n        if (!Validate::isLoadedObject($order_detail)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The OrderDetail object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        $product = new Product($order_detail->product_id);\n        if (!Validate::isLoadedObject($product)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The product object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        $address = new Address(Tools::getValue('id_address'));\n        if (!Validate::isLoadedObject($address)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The address object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        die(json_encode(array(\n            'result' => true,\n            'product' => $product,\n            'tax_rate' => $product->getTaxesRate($address),\n            'price_tax_incl' => Product::getPriceStatic($product->id, true, $order_detail->product_attribute_id, 2),\n            'price_tax_excl' => Product::getPriceStatic($product->id, false, $order_detail->product_attribute_id, 2),\n            'reduction_percent' => $order_detail->reduction_percent,\n        )));\n    }\n\n    public function ajaxProcessEditProductOnOrder()\n    {\n        // Return value\n        $res = true;\n\n        $order = new Order((int) Tools::getValue('id_order'));\n        $order_detail = new OrderDetail((int) Tools::getValue('product_id_order_detail'));\n        if (Tools::isSubmit('product_invoice')) {\n            $order_invoice = new OrderInvoice((int) Tools::getValue('product_invoice'));\n        }\n\n        // Check fields validity\n        $this->doEditProductValidation($order_detail, $order, isset($order_invoice) ? $order_invoice : null);\n\n        // If multiple product_quantity, the order details concern a product customized\n        $product_quantity = 0;\n        if (is_array(Tools::getValue('product_quantity'))) {\n            foreach (Tools::getValue('product_quantity') as $id_customization => $qty) {\n                // Update quantity of each customization\n                Db::getInstance()->update('customization', array('quantity' => (int) $qty), 'id_customization = ' . (int) $id_customization);\n                // Calculate the real quantity of the product\n                $product_quantity += $qty;\n            }\n        } else {\n            $product_quantity = Tools::getValue('product_quantity');\n        }\n\n        $product_price_tax_incl = Tools::ps_round(Tools::getValue('product_price_tax_incl'), 2);\n        $product_price_tax_excl = Tools::ps_round(Tools::getValue('product_price_tax_excl'), 2);\n        $total_products_tax_incl = $product_price_tax_incl * $product_quantity;\n        $total_products_tax_excl = $product_price_tax_excl * $product_quantity;\n\n        // Calculate differences of price (Before / After)\n        $diff_price_tax_incl = $total_products_tax_incl - $order_detail->total_price_tax_incl;\n        $diff_price_tax_excl = $total_products_tax_excl - $order_detail->total_price_tax_excl;\n\n        // Apply change on OrderInvoice\n        if (isset($order_invoice)) {\n            // If OrderInvoice to use is different, we update the old invoice and new invoice\n            if ($order_detail->id_order_invoice != $order_invoice->id) {\n                $old_order_invoice = new OrderInvoice($order_detail->id_order_invoice);\n                // We remove cost of products\n                $old_order_invoice->total_products -= $order_detail->total_price_tax_excl;\n                $old_order_invoice->total_products_wt -= $order_detail->total_price_tax_incl;\n\n                $old_order_invoice->total_paid_tax_excl -= $order_detail->total_price_tax_excl;\n                $old_order_invoice->total_paid_tax_incl -= $order_detail->total_price_tax_incl;\n\n                $res &= $old_order_invoice->update();\n\n                $order_invoice->total_products += $order_detail->total_price_tax_excl;\n                $order_invoice->total_products_wt += $order_detail->total_price_tax_incl;\n\n                $order_invoice->total_paid_tax_excl += $order_detail->total_price_tax_excl;\n                $order_invoice->total_paid_tax_incl += $order_detail->total_price_tax_incl;\n\n                $order_detail->id_order_invoice = $order_invoice->id;\n            }\n        }\n\n        if ($diff_price_tax_incl != 0 && $diff_price_tax_excl != 0) {\n            $order_detail->unit_price_tax_excl = $product_price_tax_excl;\n            $order_detail->unit_price_tax_incl = $product_price_tax_incl;\n\n            $order_detail->total_price_tax_incl += $diff_price_tax_incl;\n            $order_detail->total_price_tax_excl += $diff_price_tax_excl;\n\n            if (isset($order_invoice)) {\n                // Apply changes on OrderInvoice\n                $order_invoice->total_products += $diff_price_tax_excl;\n                $order_invoice->total_products_wt += $diff_price_tax_incl;\n\n                $order_invoice->total_paid_tax_excl += $diff_price_tax_excl;\n                $order_invoice->total_paid_tax_incl += $diff_price_tax_incl;\n            }\n\n            // Apply changes on Order\n            $order = new Order($order_detail->id_order);\n            $order->total_products += $diff_price_tax_excl;\n            $order->total_products_wt += $diff_price_tax_incl;\n\n            $order->total_paid += $diff_price_tax_incl;\n            $order->total_paid_tax_excl += $diff_price_tax_excl;\n            $order->total_paid_tax_incl += $diff_price_tax_incl;\n\n            $res &= $order->update();\n        }\n\n        $old_quantity = $order_detail->product_quantity;\n\n        $order_detail->product_quantity = $product_quantity;\n        $order_detail->reduction_percent = 0;\n\n        // update taxes\n        $res &= $order_detail->updateTaxAmount($order);\n\n        // Save order detail\n        $res &= $order_detail->update();\n\n        // Update weight SUM\n        $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n        if (Validate::isLoadedObject($order_carrier)) {\n            $order_carrier->weight = (float) $order->getTotalWeight();\n            $res &= $order_carrier->update();\n            if ($res) {\n                $order->weight = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $order_carrier->weight);\n            }\n        }\n\n        // Save order invoice\n        if (isset($order_invoice)) {\n            $res &= $order_invoice->update();\n        }\n\n        // Update product available quantity\n        StockAvailable::updateQuantity($order_detail->product_id, $order_detail->product_attribute_id, ($old_quantity - $order_detail->product_quantity), $order->id_shop);\n\n        $products = $this->getProducts($order);\n        // Get the last product\n        $product = $products[$order_detail->id];\n        $resume = OrderSlip::getProductSlipResume($order_detail->id);\n        $product['quantity_refundable'] = $product['product_quantity'] - $resume['product_quantity'];\n        $product['amount_refundable'] = $product['total_price_tax_excl'] - $resume['amount_tax_excl'];\n        $product['amount_refund'] = Tools::displayPrice($resume['amount_tax_incl']);\n        $product['refund_history'] = OrderSlip::getProductSlipDetail($order_detail->id);\n        if ($product['id_warehouse'] != 0) {\n            $warehouse = new Warehouse((int) $product['id_warehouse']);\n            $product['warehouse_name'] = $warehouse->name;\n            $warehouse_location = WarehouseProductLocation::getProductLocation($product['product_id'], $product['product_attribute_id'], $product['id_warehouse']);\n            if (!empty($warehouse_location)) {\n                $product['warehouse_location'] = $warehouse_location;\n            } else {\n                $product['warehouse_location'] = false;\n            }\n        } else {\n            $product['warehouse_name'] = '--';\n            $product['warehouse_location'] = false;\n        }\n\n        // Get invoices collection\n        $invoice_collection = $order->getInvoicesCollection();\n\n        $invoice_array = array();\n        foreach ($invoice_collection as $invoice) {\n            /* @var OrderInvoice $invoice */\n            $invoice->name = $invoice->getInvoiceNumberFormatted(Context::getContext()->language->id, (int) $order->id_shop);\n            $invoice_array[] = $invoice;\n        }\n\n        $order = $order->refreshShippingCost();\n\n        $stockLocationIsAvailable = false;\n        foreach ($products as $currentProduct) {\n            if (!empty($currentProduct['location'])) {\n                $stockLocationIsAvailable = true;\n\n                break;\n            }\n        }\n\n        // Assign to smarty informations in order to show the new product line\n        $this->context->smarty->assign(array(\n            'product' => $product,\n            'order' => $order,\n            'currency' => new Currency($order->id_currency),\n            'can_edit' => $this->access('edit'),\n            'invoices_collection' => $invoice_collection,\n            'current_id_lang' => Context::getContext()->language->id,\n            'link' => Context::getContext()->link,\n            'current_index' => self::$currentIndex,\n            'display_warehouse' => (int) Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT'),\n            'stock_location_is_available' => $stockLocationIsAvailable,\n        ));\n\n        if (!$res) {\n            die(json_encode(array(\n                'result' => $res,\n                'error' => $this->trans('An error occurred while editing the product line.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (is_array(Tools::getValue('product_quantity'))) {\n            $view = $this->createTemplate('_customized_data.tpl')->fetch();\n        } else {\n            $view = $this->createTemplate('_product_line.tpl')->fetch();\n        }\n\n        $this->sendChangedNotification($order);\n\n        die(json_encode(array(\n            'result' => $res,\n            'view' => $view,\n            'can_edit' => $this->access('add'),\n            'invoices_collection' => $invoice_collection,\n            'order' => $order,\n            'invoices' => $invoice_array,\n            'documents_html' => $this->createTemplate('_documents.tpl')->fetch(),\n            'shipping_html' => $this->createTemplate('_shipping.tpl')->fetch(),\n            'customized_product' => is_array(Tools::getValue('product_quantity')),\n        )));\n    }\n\n    public function ajaxProcessDeleteProductLine()\n    {\n        $res = true;\n\n        $order_detail = new OrderDetail((int) Tools::getValue('id_order_detail'));\n        $order = new Order((int) Tools::getValue('id_order'));\n\n        $this->doDeleteProductLineValidation($order_detail, $order);\n\n        // Update OrderInvoice of this OrderDetail\n        if ($order_detail->id_order_invoice != 0) {\n            $order_invoice = new OrderInvoice($order_detail->id_order_invoice);\n            $order_invoice->total_paid_tax_excl -= $order_detail->total_price_tax_excl;\n            $order_invoice->total_paid_tax_incl -= $order_detail->total_price_tax_incl;\n            $order_invoice->total_products -= $order_detail->total_price_tax_excl;\n            $order_invoice->total_products_wt -= $order_detail->total_price_tax_incl;\n            $res &= $order_invoice->update();\n        }\n\n        // Update Order\n        $order->total_paid -= $order_detail->total_price_tax_incl;\n        $order->total_paid_tax_incl -= $order_detail->total_price_tax_incl;\n        $order->total_paid_tax_excl -= $order_detail->total_price_tax_excl;\n        $order->total_products -= $order_detail->total_price_tax_excl;\n        $order->total_products_wt -= $order_detail->total_price_tax_incl;\n\n        $res &= $order->update();\n\n        // Reinject quantity in stock\n        $this->reinjectQuantity($order_detail, $order_detail->product_quantity, true);\n\n        // Update weight SUM\n        $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n        if (Validate::isLoadedObject($order_carrier)) {\n            $order_carrier->weight = (float) $order->getTotalWeight();\n            $res &= $order_carrier->update();\n            if ($res) {\n                $order->weight = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $order_carrier->weight);\n            }\n        }\n\n        if (!$res) {\n            die(json_encode(array(\n                'result' => $res,\n                'error' => $this->trans('An error occurred while attempting to delete the product line.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        // Get invoices collection\n        $invoice_collection = $order->getInvoicesCollection();\n\n        $invoice_array = array();\n        foreach ($invoice_collection as $invoice) {\n            /* @var OrderInvoice $invoice */\n            $invoice->name = $invoice->getInvoiceNumberFormatted(Context::getContext()->language->id, (int) $order->id_shop);\n            $invoice_array[] = $invoice;\n        }\n\n        $order = $order->refreshShippingCost();\n\n        // Assign to smarty informations in order to show the new product line\n        $this->context->smarty->assign(array(\n            'order' => $order,\n            'currency' => new Currency($order->id_currency),\n            'invoices_collection' => $invoice_collection,\n            'current_id_lang' => Context::getContext()->language->id,\n            'link' => Context::getContext()->link,\n            'current_index' => self::$currentIndex,\n        ));\n\n        $this->sendChangedNotification($order);\n\n        die(json_encode(array(\n            'result' => $res,\n            'order' => $order,\n            'invoices' => $invoice_array,\n            'documents_html' => $this->createTemplate('_documents.tpl')->fetch(),\n            'shipping_html' => $this->createTemplate('_shipping.tpl')->fetch(),\n        )));\n    }\n\n    protected function doEditProductValidation(OrderDetail $order_detail, Order $order, OrderInvoice $order_invoice = null)\n    {\n        if (!Validate::isLoadedObject($order_detail)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The Order Detail object could not be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (!empty($order_invoice) && !Validate::isLoadedObject($order_invoice)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The invoice object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (!Validate::isLoadedObject($order)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The order object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if ($order_detail->id_order != $order->id) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot edit the order detail for this order.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        // We can't edit a delivered order\n        if ($order->hasBeenDelivered()) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot edit a delivered order.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (!empty($order_invoice) && $order_invoice->id_order != Tools::getValue('id_order')) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot use this invoice for the order', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        // Clean price\n        $product_price_tax_incl = str_replace(',', '.', Tools::getValue('product_price_tax_incl'));\n        $product_price_tax_excl = str_replace(',', '.', Tools::getValue('product_price_tax_excl'));\n\n        if (!Validate::isPrice($product_price_tax_incl) || !Validate::isPrice($product_price_tax_excl)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('Invalid price', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (!is_array(Tools::getValue('product_quantity')) && !Validate::isUnsignedInt(Tools::getValue('product_quantity'))) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('Invalid quantity', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        } elseif (is_array(Tools::getValue('product_quantity'))) {\n            foreach (Tools::getValue('product_quantity') as $qty) {\n                if (!Validate::isUnsignedInt($qty)) {\n                    die(json_encode(array(\n                        'result' => false,\n                        'error' => $this->trans('Invalid quantity', array(), 'Admin.Orderscustomers.Notification'),\n                    )));\n                }\n            }\n        }\n    }\n\n    protected function doDeleteProductLineValidation(OrderDetail $order_detail, Order $order)\n    {\n        if (!Validate::isLoadedObject($order_detail)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The Order Detail object could not be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (!Validate::isLoadedObject($order)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The order object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if ($order_detail->id_order != $order->id) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot delete the order detail.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        // We can't edit a delivered order\n        if ($order->hasBeenDelivered()) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot edit a delivered order.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n    }\n\n    /**\n     * @param Order $order\n     *\n     * @return array\n     */\n    protected function getProducts($order)\n    {\n        $products = $order->getProducts();\n\n        foreach ($products as &$product) {\n            if ($product['image'] != null) {\n                $name = 'product_mini_' . (int) $product['product_id'] . (isset($product['product_attribute_id']) ? '_' . (int) $product['product_attribute_id'] : '') . '.jpg';\n                // generate image cache, only for back office\n                $product['image_tag'] = ImageManager::thumbnail(_PS_IMG_DIR_ . 'p/' . $product['image']->getExistingImgPath() . '.jpg', $name, 45, 'jpg');\n                if (file_exists(_PS_TMP_IMG_DIR_ . $name)) {\n                    $product['image_size'] = getimagesize(_PS_TMP_IMG_DIR_ . $name);\n                } else {\n                    $product['image_size'] = false;\n                }\n            }\n        }\n\n        ksort($products);\n\n        return $products;\n    }\n\n    /**\n     * @param OrderDetail $order_detail\n     * @param int $qty_cancel_product\n     * @param bool $delete\n     */\n    protected function reinjectQuantity($order_detail, $qty_cancel_product, $delete = false)\n    {\n        // Reinject product\n        $reinjectable_quantity = (int) $order_detail->product_quantity - (int) $order_detail->product_quantity_reinjected;\n        $quantity_to_reinject = $qty_cancel_product > $reinjectable_quantity ? $reinjectable_quantity : $qty_cancel_product;\n        /** @since 1.5.0 : Advanced Stock Management */\n        $product_to_inject = new Product($order_detail->product_id, false, (int) $this->context->language->id, (int) $order_detail->id_shop);\n\n        $product = new Product($order_detail->product_id, false, (int) $this->context->language->id, (int) $order_detail->id_shop);\n\n        if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && $product->advanced_stock_management && $order_detail->id_warehouse != 0) {\n            $manager = StockManagerFactory::getManager();\n            $movements = StockMvt::getNegativeStockMvts(\n                                $order_detail->id_order,\n                                $order_detail->product_id,\n                                $order_detail->product_attribute_id,\n                                $quantity_to_reinject\n                            );\n            $left_to_reinject = $quantity_to_reinject;\n            foreach ($movements as $movement) {\n                if ($left_to_reinject > $movement['physical_quantity']) {\n                    $quantity_to_reinject = $movement['physical_quantity'];\n                }\n\n                $left_to_reinject -= $quantity_to_reinject;\n                if (Pack::isPack((int) $product->id)) {\n                    // Gets items\n                    if ($product->pack_stock_type == Pack::STOCK_TYPE_PRODUCTS_ONLY\n                        || $product->pack_stock_type == Pack::STOCK_TYPE_PACK_BOTH\n                        || ($product->pack_stock_type == Pack::STOCK_TYPE_DEFAULT\n                            && Configuration::get('PS_PACK_STOCK_TYPE') > 0)\n                    ) {\n                        $products_pack = Pack::getItems((int) $product->id, (int) Configuration::get('PS_LANG_DEFAULT'));\n                        // Foreach item\n                        foreach ($products_pack as $product_pack) {\n                            if ($product_pack->advanced_stock_management == 1) {\n                                $manager->addProduct(\n                                    $product_pack->id,\n                                    $product_pack->id_pack_product_attribute,\n                                    new Warehouse($movement['id_warehouse']),\n                                    $product_pack->pack_quantity * $quantity_to_reinject,\n                                    null,\n                                    $movement['price_te'],\n                                    true\n                                );\n                            }\n                        }\n                    }\n\n                    if ($product->pack_stock_type == Pack::STOCK_TYPE_PACK_ONLY\n                        || $product->pack_stock_type == Pack::STOCK_TYPE_PACK_BOTH\n                        || (\n                            $product->pack_stock_type == Pack::STOCK_TYPE_DEFAULT\n                            && (Configuration::get('PS_PACK_STOCK_TYPE') == Pack::STOCK_TYPE_PACK_ONLY\n                                || Configuration::get('PS_PACK_STOCK_TYPE') == Pack::STOCK_TYPE_PACK_BOTH)\n                        )\n                    ) {\n                        $manager->addProduct(\n                                $order_detail->product_id,\n                                $order_detail->product_attribute_id,\n                                new Warehouse($movement['id_warehouse']),\n                                $quantity_to_reinject,\n                                null,\n                                $movement['price_te'],\n                                true\n                            );\n                    }\n                } else {\n                    $manager->addProduct(\n                            $order_detail->product_id,\n                            $order_detail->product_attribute_id,\n                            new Warehouse($movement['id_warehouse']),\n                            $quantity_to_reinject,\n                            null,\n                            $movement['price_te'],\n                            true\n                        );\n                }\n            }\n\n            $id_product = $order_detail->product_id;\n            if ($delete) {\n                $order_detail->delete();\n            }\n            StockAvailable::synchronize($id_product);\n        } elseif ($order_detail->id_warehouse == 0) {\n            StockAvailable::updateQuantity(\n                $order_detail->product_id,\n                $order_detail->product_attribute_id,\n                $quantity_to_reinject,\n                $order_detail->id_shop,\n                true,\n                array(\n                    'id_order' => $order_detail->id_order,\n                    'id_stock_mvt_reason' => Configuration::get('PS_STOCK_CUSTOMER_RETURN_REASON'),\n                )\n            );\n\n            // sync all stock\n            (new StockManager())->updatePhysicalProductQuantity(\n                (int) $order_detail->id_shop,\n                (int) Configuration::get('PS_OS_ERROR'),\n                (int) Configuration::get('PS_OS_CANCELED'),\n                null,\n                (int) $order_detail->id_order\n            );\n\n            if ($delete) {\n                $order_detail->delete();\n            }\n        } else {\n            $this->errors[] = $this->trans('This product cannot be re-stocked.', array(), 'Admin.Orderscustomers.Notification');\n        }\n    }\n\n    /**\n     * @param OrderInvoice $order_invoice\n     * @param float $value_tax_incl\n     * @param float $value_tax_excl\n     */\n    protected function applyDiscountOnInvoice($order_invoice, $value_tax_incl, $value_tax_excl)\n    {\n        // Update OrderInvoice\n        $order_invoice->total_discount_tax_incl += $value_tax_incl;\n        $order_invoice->total_discount_tax_excl += $value_tax_excl;\n        $order_invoice->total_paid_tax_incl -= $value_tax_incl;\n        $order_invoice->total_paid_tax_excl -= $value_tax_excl;\n        $order_invoice->update();\n    }\n\n    public function ajaxProcessChangePaymentMethod()\n    {\n        $customer = new Customer(Tools::getValue('id_customer'));\n        $modules = Module::getAuthorizedModules($customer->id_default_group, array($customer->id_shop));\n        $authorized_modules = array();\n\n        if (!Validate::isLoadedObject($customer) || !is_array($modules)) {\n            die(json_encode(array('result' => false)));\n        }\n\n        foreach ($modules as $module) {\n            $authorized_modules[] = (int) $module['id_module'];\n        }\n\n        $payment_modules = array();\n\n        foreach (PaymentModule::getInstalledPaymentModules() as $p_module) {\n            if (in_array((int) $p_module['id_module'], $authorized_modules)) {\n                $payment_modules[] = Module::getInstanceById((int) $p_module['id_module']);\n            }\n        }\n\n        $this->context->smarty->assign(array(\n            'payment_modules' => $payment_modules,\n        ));\n\n        die(json_encode(array(\n            'result' => true,\n            'view' => $this->createTemplate('_select_payment.tpl')->fetch(),\n        )));\n    }\n\n    /**\n     * This method allow to add image information on a package detail.\n     *\n     * @param array &pack_item\n     */\n    protected function setProductImageInformations(&$pack_item)\n    {\n        if (isset($pack_item['id_product_attribute']) && $pack_item['id_product_attribute']) {\n            $id_image = Db::getInstance()->getValue('\n                SELECT `image_shop`.id_image\n                FROM `' . _DB_PREFIX_ . 'product_attribute_image` pai' .\n                Shop::addSqlAssociation('image', 'pai', true) . '\n                WHERE id_product_attribute = ' . (int) $pack_item['id_product_attribute']);\n        }\n\n        if (!isset($id_image) || !$id_image) {\n            $id_image = Db::getInstance()->getValue(\n                '\n                SELECT `image_shop`.id_image\n                FROM `' . _DB_PREFIX_ . 'image` i' .\n                Shop::addSqlAssociation('image', 'i', true, 'image_shop.cover=1') . '\n                WHERE i.id_product = ' . (int) $pack_item['id_product']\n            );\n        }\n\n        $pack_item['image'] = null;\n        $pack_item['image_size'] = null;\n\n        if ($id_image) {\n            $pack_item['image'] = new Image($id_image);\n        }\n    }\n\n    /**\n     * Get available carrier list for an order.\n     *\n     * @param object $order\n     *\n     * @return array $delivery_option_list_formated\n     */\n    protected function getCarrierList($order)\n    {\n        $cart = $this->context->cart;\n        $groups = Customer::getGroupsStatic((int) $cart->id_customer);\n        $address = new Address((int) $cart->id_address_delivery);\n\n        return Carrier::getCarriersForOrder(Address::getZoneById((int) $address->id), $groups, $cart);\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Adapter\\Presenter\\Order\\OrderPresenter;\n\nclass OrderDetailControllerCore extends FrontController\n{\n    public $php_self = 'order-detail';\n    public $auth = true;\n    public $authRedirection = 'history';\n    public $ssl = true;\n\n    protected $order_to_display;\n\n    /**\n     * Start forms process.\n     *\n     * @see FrontController::postProcess()\n     */\n    public function postProcess()\n    {\n        if (Tools::isSubmit('submitMessage')) {\n            $idOrder = (int) Tools::getValue('id_order');\n            $msgText = Tools::getValue('msgText');\n\n            if (!$idOrder || !Validate::isUnsignedId($idOrder)) {\n                $this->errors[] = $this->trans('The order is no longer valid.', array(), 'Shop.Notifications.Error');\n            } elseif (empty($msgText)) {\n                $this->errors[] = $this->trans('The message cannot be blank.', array(), 'Shop.Notifications.Error');\n            } elseif (!Validate::isMessage($msgText)) {\n                $this->errors[] = $this->trans('This message is invalid (HTML is not allowed).', array(), 'Shop.Notifications.Error');\n            }\n            if (!count($this->errors)) {\n                $order = new Order($idOrder);\n                if (Validate::isLoadedObject($order) && $order->id_customer == $this->context->customer->id) {\n                    //check if a thread already exist\n                    $id_customer_thread = CustomerThread::getIdCustomerThreadByEmailAndIdOrder($this->context->customer->email, $order->id);\n                    $id_product = (int) Tools::getValue('id_product');\n                    $cm = new CustomerMessage();\n                    if (!$id_customer_thread) {\n                        $ct = new CustomerThread();\n                        $ct->id_contact = 0;\n                        $ct->id_customer = (int) $order->id_customer;\n                        $ct->id_shop = (int) $this->context->shop->id;\n                        if ($id_product && $order->orderContainProduct($id_product)) {\n                            $ct->id_product = $id_product;\n                        }\n                        $ct->id_order = (int) $order->id;\n                        $ct->id_lang = (int) $this->context->language->id;\n                        $ct->email = $this->context->customer->email;\n                        $ct->status = 'open';\n                        $ct->token = Tools::passwdGen(12);\n                        $ct->add();\n                    } else {\n                        $ct = new CustomerThread((int) $id_customer_thread);\n                        $ct->status = 'open';\n                        $ct->update();\n                    }\n\n                    $cm->id_customer_thread = $ct->id;\n                    $cm->message = $msgText;\n                    $client_ip_address = Tools::getRemoteAddr();\n                    $cm->ip_address = (int) ip2long($client_ip_address);\n                    $cm->add();\n\n                    if (!Configuration::get('PS_MAIL_EMAIL_MESSAGE')) {\n                        $to = (string) Configuration::get('PS_SHOP_EMAIL');\n                    } else {\n                        $to = new Contact((int) Configuration::get('PS_MAIL_EMAIL_MESSAGE'));\n                        $to = (string) $to->email;\n                    }\n                    $toName = (string) Configuration::get('PS_SHOP_NAME');\n                    $customer = $this->context->customer;\n\n                    $product = new Product($id_product);\n                    $product_name = '';\n                    if (Validate::isLoadedObject($product) && isset($product->name[(int) $this->context->language->id])) {\n                        $product_name = $product->name[(int) $this->context->language->id];\n                    }\n\n                    if (Validate::isLoadedObject($customer)) {\n                        Mail::Send(\n                            $this->context->language->id,\n                            'order_customer_comment',\n                            $this->trans(\n                                'Message from a customer',\n                                array(),\n                                'Emails.Subject'\n                            ),\n                            array(\n                                '{lastname}' => $customer->lastname,\n                                '{firstname}' => $customer->firstname,\n                                '{email}' => $customer->email,\n                                '{id_order}' => (int) $order->id,\n                                '{order_name}' => $order->getUniqReference(),\n                                '{message}' => Tools::nl2br($msgText),\n                                '{product_name}' => $product_name,\n                            ),\n                            $to,\n                            $toName,\n                            (string) Configuration::get('PS_SHOP_EMAIL'),\n                            $customer->firstname . ' ' . $customer->lastname,\n                            null,\n                            null,\n                            _PS_MAIL_DIR_,\n                            false,\n                            null,\n                            null,\n                            $customer->email\n                        );\n                    }\n\n                    Tools::redirect('index.php?controller=order-detail&id_order=' . $idOrder . '&messagesent');\n                } else {\n                    $this->redirect_after = '404';\n                    $this->redirect();\n                }\n            }\n        }\n    }\n\n    /**\n     * Assign template vars related to page content.\n     *\n     * @see FrontController::initContent()\n     */\n    public function initContent()\n    {\n        if (Configuration::isCatalogMode()) {\n            Tools::redirect('index.php');\n        }\n\n        $id_order = (int) Tools::getValue('id_order');\n        $id_order = $id_order && Validate::isUnsignedId($id_order) ? $id_order : false;\n\n        if (!$id_order) {\n            $reference = Tools::getValue('reference');\n            $reference = $reference && Validate::isReference($reference) ? $reference : false;\n            $order = $reference ? Order::getByReference($reference)->getFirst() : false;\n            $id_order = $order ? $order->id : false;\n        }\n\n        if (!$id_order) {\n            $this->redirect_after = '404';\n            $this->redirect();\n        } else {\n            if (Tools::getIsset('errorQuantity')) {\n                $this->errors[] = $this->trans('You do not have enough products to request an additional merchandise return.', array(), 'Shop.Notifications.Error');\n            } elseif (Tools::getIsset('errorMsg')) {\n                $this->errors[] = $this->trans('Please provide an explanation for your RMA.', array(), 'Shop.Notifications.Error');\n            } elseif (Tools::getIsset('errorDetail1')) {\n                $this->errors[] = $this->trans('Please check at least one product you would like to return.', array(), 'Shop.Notifications.Error');\n            } elseif (Tools::getIsset('errorDetail2')) {\n                $this->errors[] = $this->trans('For each product you wish to add, please specify the desired quantity.', array(), 'Shop.Notifications.Error');\n            } elseif (Tools::getIsset('errorNotReturnable')) {\n                $this->errors[] = $this->trans('This order cannot be returned', array(), 'Shop.Notifications.Error');\n            } elseif (Tools::getIsset('messagesent')) {\n                $this->success[] = $this->trans('Message successfully sent', array(), 'Shop.Notifications.Success');\n            }\n\n            $order = new Order($id_order);\n            if (Validate::isLoadedObject($order) && $order->id_customer == $this->context->customer->id) {\n                $this->order_to_display = (new OrderPresenter())->present($order);\n\n                $this->context->smarty->assign([\n                    'order' => $this->order_to_display,\n                    'HOOK_DISPLAYORDERDETAIL' => Hook::exec('displayOrderDetail', ['order' => $order]),\n                ]);\n            } else {\n                $this->redirect_after = '404';\n                $this->redirect();\n            }\n            unset($order);\n        }\n\n        parent::initContent();\n        $this->setTemplate('customer/order-detail');\n    }\n\n    public function getBreadcrumbLinks()\n    {\n        $breadcrumb = parent::getBreadcrumbLinks();\n\n        $breadcrumb['links'][] = $this->addMyAccountToBreadcrumb();\n        $breadcrumb['links'][] = array(\n            'title' => $this->trans('Order history', array(), 'Shop.Theme.Customeraccount'),\n            'url' => $this->context->link->getPageLink('history'),\n        );\n\n        return $breadcrumb;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * Class MailCore.\n */\nclass MailCore extends ObjectModel\n{\n    public $id;\n\n    /** @var string Recipient */\n    public $recipient;\n\n    /** @var string Template */\n    public $template;\n\n    /** @var string Subject */\n    public $subject;\n\n    /** @var int Language ID */\n    public $id_lang;\n\n    /** @var int Timestamp */\n    public $date_add;\n\n    /**\n     * @see ObjectModel::$definition\n     */\n    public static $definition = [\n        'table' => 'mail',\n        'primary' => 'id_mail',\n        'fields' => [\n            'recipient' => [\n                'type' => self::TYPE_STRING,\n                'validate' => 'isEmail',\n                'copy_post' => false,\n                'required' => true,\n                'size' => 255,\n            ],\n            'template' => [\n                'type' => self::TYPE_STRING,\n                'validate' => 'isTplName',\n                'copy_post' => false,\n                'required' => true,\n                'size' => 62,\n            ],\n            'subject' => [\n                'type' => self::TYPE_STRING,\n                'validate' => 'isMailSubject',\n                'copy_post' => false,\n                'required' => true,\n                'size' => 255,\n            ],\n            'id_lang' => [\n                'type' => self::TYPE_INT,\n                'validate' => 'isUnsignedId',\n                'copy_post' => false,\n                'required' => true,\n            ],\n            'date_add' => [\n                'type' => self::TYPE_DATE,\n                'validate' => 'isDate',\n                'copy_post' => false,\n                'required' => true,\n            ],\n        ],\n    ];\n\n    /**\n     * Mail content type.\n     */\n    const TYPE_HTML = 1;\n    const TYPE_TEXT = 2;\n    const TYPE_BOTH = 3;\n\n    /**\n     * Send mail under SMTP server.\n     */\n    const METHOD_SMTP = 2;\n\n    /**\n     * Disable mail, will return immediately after calling send method.\n     */\n    const METHOD_DISABLE = 3;\n\n    /**\n     * Send Email.\n     *\n     * @param int $idLang Language ID of the email (to translate the template)\n     * @param string $template Template: the name of template not be a var but a string !\n     * @param string $subject Subject of the email\n     * @param string $templateVars Template variables for the email\n     * @param string $to To email\n     * @param string $toName To name\n     * @param string $from From email\n     * @param string $fromName To email\n     * @param array $fileAttachment array with three parameters (content, mime and name).\n     *                              You can use an array of array to attach multiple files\n     * @param bool $mode_smtp SMTP mode (deprecated)\n     * @param string $templatePath Template path\n     * @param bool $die Die after error\n     * @param int $idShop Shop ID\n     * @param string $bcc Bcc recipient address. You can use an array of array to send to multiple recipients\n     * @param string $replyTo Reply-To recipient address\n     * @param string $replyToName Reply-To recipient name\n     *\n     * @return bool|int Whether sending was successful. If not at all, false, otherwise amount of recipients succeeded.\n     */\n    public static function send(\n        $idLang,\n        $template,\n        $subject,\n        $templateVars,\n        $to,\n        $toName = null,\n        $from = null,\n        $fromName = null,\n        $fileAttachment = null,\n        $mode_smtp = null,\n        $templatePath = _PS_MAIL_DIR_,\n        $die = false,\n        $idShop = null,\n        $bcc = null,\n        $replyTo = null,\n        $replyToName = null\n    ) {\n        if (!$idShop) {\n            $idShop = Context::getContext()->shop->id;\n        }\n\n        $hookBeforeEmailResult = Hook::exec(\n            'actionEmailSendBefore',\n            [\n                'idLang' => &$idLang,\n                'template' => &$template,\n                'subject' => &$subject,\n                'templateVars' => &$templateVars,\n                'to' => &$to,\n                'toName' => &$toName,\n                'from' => &$from,\n                'fromName' => &$fromName,\n                'fileAttachment' => &$fileAttachment,\n                'mode_smtp' => &$mode_smtp,\n                'templatePath' => &$templatePath,\n                'die' => &$die,\n                'idShop' => &$idShop,\n                'bcc' => &$bcc,\n                'replyTo' => &$replyTo,\n            ],\n            null,\n            true\n        );\n\n        if ($hookBeforeEmailResult === null) {\n            $keepGoing = false;\n        } else {\n            $keepGoing = array_reduce(\n                $hookBeforeEmailResult,\n                function ($carry, $item) {\n                    return ($item === false) ? false : $carry;\n                },\n                true\n            );\n        }\n\n        if (!$keepGoing) {\n            return true;\n        }\n\n        if (is_numeric($idShop) && $idShop) {\n            $shop = new Shop((int) $idShop);\n        }\n\n        $configuration = Configuration::getMultiple(\n            [\n                'PS_SHOP_EMAIL',\n                'PS_MAIL_METHOD',\n                'PS_MAIL_SERVER',\n                'PS_MAIL_USER',\n                'PS_MAIL_PASSWD',\n                'PS_SHOP_NAME',\n                'PS_MAIL_SMTP_ENCRYPTION',\n                'PS_MAIL_SMTP_PORT',\n                'PS_MAIL_TYPE',\n            ],\n            null,\n            null,\n            $idShop\n        );\n\n        // Returns immediately if emails are deactivated\n        if ($configuration['PS_MAIL_METHOD'] == self::METHOD_DISABLE) {\n            return true;\n        }\n\n        // Hook to alter template vars\n        Hook::exec(\n            'sendMailAlterTemplateVars',\n            [\n                'template' => $template,\n                'template_vars' => &$templateVars,\n            ]\n        );\n\n        if (!isset($configuration['PS_MAIL_SMTP_ENCRYPTION']) ||\n            Tools::strtolower($configuration['PS_MAIL_SMTP_ENCRYPTION']) === 'off'\n        ) {\n            $configuration['PS_MAIL_SMTP_ENCRYPTION'] = false;\n        }\n\n        if (!isset($configuration['PS_MAIL_SMTP_PORT'])) {\n            $configuration['PS_MAIL_SMTP_PORT'] = 'default';\n        }\n\n        /*\n         * Sending an e-mail can be of vital importance for the merchant, when his password\n         * is lost for example, so we must not die but do our best to send the e-mail.\n         */\n        if (!isset($from) || !Validate::isEmail($from)) {\n            $from = $configuration['PS_SHOP_EMAIL'];\n        }\n\n        if (!Validate::isEmail($from)) {\n            $from = null;\n        }\n\n        // $from_name is not that important, no need to die if it is not valid\n        if (!isset($fromName) || !Validate::isMailName($fromName)) {\n            $fromName = $configuration['PS_SHOP_NAME'];\n        }\n\n        if (!Validate::isMailName($fromName)) {\n            $fromName = null;\n        }\n\n        /*\n         * It would be difficult to send an e-mail if the e-mail is not valid,\n         * so this time we can die if there is a problem.\n         */\n        if (!is_array($to) && !Validate::isEmail($to)) {\n            self::dieOrLog($die, 'Error: parameter \"to\" is corrupted');\n\n            return false;\n        }\n\n        // if bcc is not null, make sure it's a vaild e-mail\n        if (null !== $bcc && !is_array($bcc) && !Validate::isEmail($bcc)) {\n            self::dieOrLog($die, 'Error: parameter \"bcc\" is corrupted');\n            $bcc = null;\n        }\n\n        if (!is_array($templateVars)) {\n            $templateVars = [];\n        }\n\n        // Do not crash for this error, that may be a complicated customer name\n        if (is_string($toName) && !empty($toName) && !Validate::isMailName($toName)) {\n            $toName = null;\n        }\n\n        if (!Validate::isTplName($template)) {\n            self::dieOrLog($die, 'Error: invalid e-mail template');\n\n            return false;\n        }\n\n        if (!Validate::isMailSubject($subject)) {\n            self::dieOrLog($die, 'Error: invalid e-mail subject');\n\n            return false;\n        }\n\n        /* Construct multiple recipients list if needed */\n        $message = \\Swift_Message::newInstance();\n        if (is_array($to) && isset($to)) {\n            foreach ($to as $key => $addr) {\n                $addr = trim($addr);\n                if (!Validate::isEmail($addr)) {\n                    self::dieOrLog($die, 'Error: invalid e-mail address');\n\n                    return false;\n                }\n\n                if (is_array($toName) && isset($toName[$key])) {\n                    $addrName = $toName[$key];\n                } else {\n                    $addrName = $toName;\n                }\n\n                $addrName = ($addrName == null || $addrName == $addr || !Validate::isGenericName($addrName)) ?\n                          '' :\n                          self::mimeEncode($addrName);\n                $message->addTo(self::toPunycode($addr), $addrName);\n            }\n            $toPlugin = $to[0];\n        } else {\n            /* Simple recipient, one address */\n            $toPlugin = $to;\n            $toName = (($toName == null || $toName == $to) ? '' : self::mimeEncode($toName));\n            $message->addTo(self::toPunycode($to), $toName);\n        }\n\n        if (isset($bcc) && is_array($bcc)) {\n            foreach ($bcc as $addr) {\n                $addr = trim($addr);\n                if (!Validate::isEmail($addr)) {\n                    self::dieOrLog($die, 'Error: invalid e-mail address');\n\n                    return false;\n                }\n\n                $message->addBcc(self::toPunycode($addr));\n            }\n        } elseif (isset($bcc)) {\n            $message->addBcc(self::toPunycode($bcc));\n        }\n\n        try {\n            /* Connect with the appropriate configuration */\n            if ($configuration['PS_MAIL_METHOD'] == self::METHOD_SMTP) {\n                if (empty($configuration['PS_MAIL_SERVER']) || empty($configuration['PS_MAIL_SMTP_PORT'])) {\n                    self::dieOrLog($die, 'Error: invalid SMTP server or SMTP port');\n\n                    return false;\n                }\n\n                $connection = \\Swift_SmtpTransport::newInstance(\n                    $configuration['PS_MAIL_SERVER'],\n                    $configuration['PS_MAIL_SMTP_PORT'],\n                    $configuration['PS_MAIL_SMTP_ENCRYPTION']\n                )\n                    ->setUsername($configuration['PS_MAIL_USER'])\n                    ->setPassword($configuration['PS_MAIL_PASSWD']);\n            } else {\n                $connection = \\Swift_MailTransport::newInstance();\n            }\n\n            if (!$connection) {\n                return false;\n            }\n\n            $swift = \\Swift_Mailer::newInstance($connection);\n            /* Get templates content */\n            $iso = Language::getIsoById((int) $idLang);\n            $isoDefault = Language::getIsoById((int) Configuration::get('PS_LANG_DEFAULT'));\n            $isoArray = [];\n            if ($iso) {\n                $isoArray[] = $iso;\n            }\n\n            if ($isoDefault && $iso !== $isoDefault) {\n                $isoArray[] = $isoDefault;\n            }\n\n            if (!in_array('en', $isoArray)) {\n                $isoArray[] = 'en';\n            }\n\n            $moduleName = false;\n\n            // get templatePath\n            if (preg_match('#' . $shop->physical_uri . 'modules/#', str_replace(DIRECTORY_SEPARATOR, '/', $templatePath)) &&\n                preg_match('#modules/([a-z0-9_-]+)/#ui', str_replace(DIRECTORY_SEPARATOR, '/', $templatePath), $res)\n            ) {\n                $moduleName = $res[1];\n            }\n\n            foreach ($isoArray as $isoCode) {\n                $isoTemplate = $isoCode . '/' . $template;\n                $templatePath = self::getTemplateBasePath($isoTemplate, $moduleName, $shop->theme);\n\n                if (!file_exists($templatePath . $isoTemplate . '.txt') &&\n                    (\n                        $configuration['PS_MAIL_TYPE'] == Mail::TYPE_BOTH ||\n                        $configuration['PS_MAIL_TYPE'] == Mail::TYPE_TEXT\n                    )\n                ) {\n                    PrestaShopLogger::addLog(\n                        Context::getContext()->getTranslator()->trans(\n                            'Error - The following e-mail template is missing: %s',\n                            [$templatePath . $isoTemplate . '.txt'],\n                            'Admin.Advparameters.Notification'\n                        )\n                    );\n                } elseif (!file_exists($templatePath . $isoTemplate . '.html') &&\n                          (\n                              $configuration['PS_MAIL_TYPE'] == Mail::TYPE_BOTH ||\n                              $configuration['PS_MAIL_TYPE'] == Mail::TYPE_HTML\n                          )\n                ) {\n                    PrestaShopLogger::addLog(\n                        Context::getContext()->getTranslator()->trans(\n                            'Error - The following e-mail template is missing: %s',\n                            [$templatePath . $isoTemplate . '.html'],\n                            'Admin.Advparameters.Notification'\n                        )\n                    );\n                } else {\n                    $templatePathExists = true;\n\n                    break;\n                }\n            }\n\n            if (empty($templatePathExists)) {\n                self::dieOrLog($die, 'Error - The following e-mail template is missing: %s', [$template]);\n\n                return false;\n            }\n\n            $templateHtml = '';\n            $templateTxt = '';\n            Hook::exec(\n                'actionEmailAddBeforeContent',\n                [\n                    'template' => $template,\n                    'template_html' => &$templateHtml,\n                    'template_txt' => &$templateTxt,\n                    'id_lang' => (int) $idLang,\n                ],\n                null,\n                true\n            );\n            $templateHtml .= Tools::file_get_contents($templatePath . $isoTemplate . '.html');\n            $templateTxt .= strip_tags(\n                html_entity_decode(\n                    Tools::file_get_contents($templatePath . $isoTemplate . '.txt'),\n                    null,\n                    'utf-8'\n                )\n            );\n            Hook::exec(\n                'actionEmailAddAfterContent',\n                [\n                    'template' => $template,\n                    'template_html' => &$templateHtml,\n                    'template_txt' => &$templateTxt,\n                    'id_lang' => (int) $idLang,\n                ],\n                null,\n                true\n            );\n\n            /* Create mail and attach differents parts */\n            $subject = '[' . strip_tags($configuration['PS_SHOP_NAME']) . '] ' . $subject;\n            $message->setSubject($subject);\n\n            $message->setCharset('utf-8');\n\n            /* Set Message-ID - getmypid() is blocked on some hosting */\n            $message->setId(Mail::generateId());\n\n            if (!($replyTo && Validate::isEmail($replyTo))) {\n                $replyTo = $from;\n            }\n\n            if (isset($replyTo) && $replyTo) {\n                $message->setReplyTo($replyTo, ($replyToName !== '' ? $replyToName : null));\n            }\n\n            if (false !== Configuration::get('PS_LOGO_MAIL') &&\n                file_exists(_PS_IMG_DIR_ . Configuration::get('PS_LOGO_MAIL', null, null, $idShop))\n            ) {\n                $logo = _PS_IMG_DIR_ . Configuration::get('PS_LOGO_MAIL', null, null, $idShop);\n            } else {\n                if (file_exists(_PS_IMG_DIR_ . Configuration::get('PS_LOGO', null, null, $idShop))) {\n                    $logo = _PS_IMG_DIR_ . Configuration::get('PS_LOGO', null, null, $idShop);\n                } else {\n                    $templateVars['{shop_logo}'] = '';\n                }\n            }\n            ShopUrl::cacheMainDomainForShop((int) $idShop);\n            /* don't attach the logo as */\n            if (isset($logo)) {\n                $templateVars['{shop_logo}'] = $message->embed(\\Swift_Image::fromPath($logo));\n            }\n\n            if ((Context::getContext()->link instanceof Link) === false) {\n                Context::getContext()->link = new Link();\n            }\n\n            $templateVars['{shop_name}'] = Tools::safeOutput($configuration['PS_SHOP_NAME']);\n            $templateVars['{shop_url}'] = Context::getContext()->link->getPageLink(\n                'index',\n                true,\n                $idLang,\n                null,\n                false,\n                $idShop\n            );\n            $templateVars['{my_account_url}'] = Context::getContext()->link->getPageLink(\n                'my-account',\n                true,\n                $idLang,\n                null,\n                false,\n                $idShop\n            );\n            $templateVars['{guest_tracking_url}'] = Context::getContext()->link->getPageLink(\n                'guest-tracking',\n                true,\n                $idLang,\n                null,\n                false,\n                $idShop\n            );\n            $templateVars['{history_url}'] = Context::getContext()->link->getPageLink(\n                'history',\n                true,\n                $idLang,\n                null,\n                false,\n                $idShop\n            );\n            $templateVars['{color}'] = Tools::safeOutput(Configuration::get('PS_MAIL_COLOR', null, null, $idShop));\n            // Get extra template_vars\n            $extraTemplateVars = [];\n            Hook::exec(\n                'actionGetExtraMailTemplateVars',\n                [\n                    'template' => $template,\n                    'template_vars' => $templateVars,\n                    'extra_template_vars' => &$extraTemplateVars,\n                    'id_lang' => (int) $idLang,\n                ],\n                null,\n                true\n            );\n            $templateVars = array_merge($templateVars, $extraTemplateVars);\n            $swift->registerPlugin(new \\Swift_Plugins_DecoratorPlugin(array($toPlugin => $templateVars)));\n            if ($configuration['PS_MAIL_TYPE'] == Mail::TYPE_BOTH ||\n                $configuration['PS_MAIL_TYPE'] == Mail::TYPE_TEXT\n            ) {\n                $message->addPart($templateTxt, 'text/plain', 'utf-8');\n            }\n            if ($configuration['PS_MAIL_TYPE'] == Mail::TYPE_BOTH ||\n                $configuration['PS_MAIL_TYPE'] == Mail::TYPE_HTML\n            ) {\n                $message->addPart($templateHtml, 'text/html', 'utf-8');\n            }\n\n            if ($fileAttachment && !empty($fileAttachment)) {\n                // Multiple attachments?\n                if (!is_array(current($fileAttachment))) {\n                    $fileAttachment = array($fileAttachment);\n                }\n\n                foreach ($fileAttachment as $attachment) {\n                    if (isset($attachment['content'], $attachment['name'], $attachment['mime'])) {\n                        $message->attach(\n                            \\Swift_Attachment::newInstance()->setFilename(\n                                $attachment['name']\n                            )->setContentType($attachment['mime'])\n                            ->setBody($attachment['content'])\n                        );\n                    }\n                }\n            }\n            /* Send mail */\n            $message->setFrom(array($from => $fromName));\n\n            // Hook to alter Swift Message before sending mail\n            Hook::exec('actionMailAlterMessageBeforeSend', [\n                'message' => &$message,\n            ]);\n\n            $send = $swift->send($message);\n\n            ShopUrl::resetMainDomainCache();\n\n            if ($send && Configuration::get('PS_LOG_EMAILS')) {\n                $mail = new Mail();\n                $mail->template = Tools::substr($template, 0, 62);\n                $mail->subject = Tools::substr($subject, 0, 255);\n                $mail->id_lang = (int) $idLang;\n                $recipientsTo = $message->getTo();\n                $recipientsCc = $message->getCc();\n                $recipientsBcc = $message->getBcc();\n                if (!is_array($recipientsTo)) {\n                    $recipientsTo = [];\n                }\n                if (!is_array($recipientsCc)) {\n                    $recipientsCc = [];\n                }\n                if (!is_array($recipientsBcc)) {\n                    $recipientsBcc = [];\n                }\n                foreach (array_merge($recipientsTo, $recipientsCc, $recipientsBcc) as $email => $recipient_name) {\n                    /* @var Swift_Address $recipient */\n                    $mail->id = null;\n                    $mail->recipient = Tools::substr($email, 0, 255);\n                    $mail->add();\n                }\n            }\n\n            return $send;\n        } catch (\\Swift_SwiftException $e) {\n            PrestaShopLogger::addLog(\n                'Swift Error: ' . $e->getMessage(),\n                3,\n                null,\n                'Swift_Message'\n            );\n\n            return false;\n        }\n    }\n\n    protected static function getTemplateBasePath($isoTemplate, $moduleName, $theme)\n    {\n        $basePathList = [\n            _PS_ROOT_DIR_ . '/themes/' . $theme->getName() . '/',\n            _PS_ROOT_DIR_ . '/themes/' . $theme->get('parent') . '/',\n            _PS_ROOT_DIR_,\n        ];\n\n        if ($moduleName !== false) {\n            $templateRelativePath = '/modules/' . $moduleName . '/mails/';\n        } else {\n            $templateRelativePath = '/mails/';\n        }\n\n        foreach ($basePathList as $base) {\n            $templatePath = $base . $templateRelativePath;\n            if (file_exists($templatePath . $isoTemplate . '.txt') || file_exists($templatePath . $isoTemplate . '.html')) {\n                return $templatePath;\n            }\n        }\n\n        return '';\n    }\n\n    /**\n     * @param $idMail Mail ID\n     *\n     * @return bool Whether removal succeeded\n     */\n    public static function eraseLog($idMail)\n    {\n        return Db::getInstance()->delete('mail', 'id_mail = ' . (int) $idMail);\n    }\n\n    /**\n     * @return bool\n     */\n    public static function eraseAllLogs()\n    {\n        return Db::getInstance()->execute('TRUNCATE TABLE ' . _DB_PREFIX_ . 'mail');\n    }\n\n    /**\n     * Send a test email.\n     *\n     * @param bool $smtpChecked Is SMTP checked?\n     * @param string $smtp_server SMTP Server hostname\n     * @param string $content Content of the email\n     * @param string $subject Subject of the email\n     * @param bool $type Deprecated\n     * @param string $to To email address\n     * @param string $from From email address\n     * @param string $smtpLogin SMTP login name\n     * @param string $smtpPassword SMTP password\n     * @param int $smtpPort SMTP Port\n     * @param bool|string $smtpEncryption Encryption type. \"off\" or false disable encryption.\n     *\n     * @return bool|string True if succeeded, otherwise the error message\n     */\n    public static function sendMailTest(\n        $smtpChecked,\n        $smtp_server,\n        $content,\n        $subject,\n        $type,\n        $to,\n        $from,\n        $smtpLogin,\n        $smtpPassword,\n        $smtpPort,\n        $smtpEncryption\n    ) {\n        $result = false;\n\n        try {\n            if ($smtpChecked) {\n                if (Tools::strtolower($smtpEncryption) === 'off') {\n                    $smtpEncryption = false;\n                }\n                $smtp = \\Swift_SmtpTransport::newInstance($smtp_server, $smtpPort, $smtpEncryption)\n                    ->setUsername($smtpLogin)\n                    ->setPassword($smtpPassword);\n                $swift = \\Swift_Mailer::newInstance($smtp);\n            } else {\n                $swift = \\Swift_Mailer::newInstance(\\Swift_MailTransport::newInstance());\n            }\n\n            $message = \\Swift_Message::newInstance();\n\n            $message\n                ->setFrom($from)\n                ->setTo($to)\n                ->setSubject($subject)\n                ->setBody($content);\n\n            if ($swift->send($message)) {\n                $result = true;\n            }\n        } catch (\\Swift_SwiftException $e) {\n            $result = $e->getMessage();\n        }\n\n        return $result;\n    }\n\n    /**\n     * This method is used to get the translation for email Object.\n     * For an object is forbidden to use htmlentities,\n     * we have to return a sentence with accents.\n     *\n     * @param string $string raw sentence (write directly in file)\n     *\n     * @return mixed\n     */\n    public static function l($string, $idLang = null, Context $context = null)\n    {\n        global $_LANGMAIL;\n\n        if (!$context) {\n            $context = Context::getContext();\n        }\n\n        if ($idLang === null) {\n            $idLang = (!isset($context->language) || !is_object($context->language)) ?\n                    (int) Configuration::get('PS_LANG_DEFAULT') :\n                    (int) $context->language->id;\n        }\n\n        $isoCode = Language::getIsoById((int) $idLang);\n\n        $file_core = _PS_ROOT_DIR_ . '/mails/' . $isoCode . '/lang.php';\n        if (Tools::file_exists_cache($file_core) && empty($_LANGMAIL)) {\n            include $file_core;\n        }\n\n        $fileTheme = _PS_THEME_DIR_ . 'mails/' . $isoCode . '/lang.php';\n        if (Tools::file_exists_cache($fileTheme)) {\n            include $fileTheme;\n        }\n\n        if (!is_array($_LANGMAIL)) {\n            return str_replace('\"', '&quot;', $string);\n        }\n\n        $key = str_replace('\\'', '\\\\\\'', $string);\n\n        return str_replace(\n            '\"',\n            '&quot;',\n            Tools::stripslashes(\n                (array_key_exists($key, $_LANGMAIL) && !empty($_LANGMAIL[$key])) ? $_LANGMAIL[$key] : $string\n            )\n        );\n    }\n\n    /* Rewrite of Swift_Message::generateId() without getmypid() */\n    protected static function generateId($idstring = null)\n    {\n        $midparams = [\n            'utctime' => gmstrftime('%Y%m%d%H%M%S'),\n            'randint' => mt_rand(),\n            'customstr' => (preg_match('/^(?<!\\\\.)[a-z0-9\\\\.]+(?!\\\\.)$/iD', $idstring) ? $idstring : 'swift'),\n            'hostname' => !empty($_SERVER['SERVER_NAME']) ? $_SERVER['SERVER_NAME'] : php_uname('n'),\n        ];\n\n        return vsprintf('%s.%d.%s@%s', $midparams);\n    }\n\n    /**\n     * Check if a multibyte character set is used for the data.\n     *\n     * @param string $data Data\n     *\n     * @return bool Whether the string uses a multibyte character set\n     */\n    public static function isMultibyte($data)\n    {\n        $length = Tools::strlen($data);\n        for ($i = 0; $i < $length; ++$i) {\n            if (ord(($data[$i])) > 128) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * MIME encode the string.\n     *\n     * @param string $string The string to encode\n     * @param string $charset The character set to use\n     * @param string $newline The newline character(s)\n     *\n     * @return mixed|string MIME encoded string\n     */\n    public static function mimeEncode($string, $charset = 'UTF-8', $newline = \"\\r\\n\")\n    {\n        if (!self::isMultibyte($string) && Tools::strlen($string) < 75) {\n            return $string;\n        }\n\n        $charset = Tools::strtoupper($charset);\n        $start = '=?' . $charset . '?B?';\n        $end = '?=';\n        $sep = $end . $newline . ' ' . $start;\n        $length = 75 - Tools::strlen($start) - Tools::strlen($end);\n        $length = $length - ($length % 4);\n\n        if ($charset === 'UTF-8') {\n            $parts = [];\n            $maxchars = floor(($length * 3) / 4);\n            $stringLength = Tools::strlen($string);\n\n            while ($stringLength > $maxchars) {\n                $i = (int) $maxchars;\n                $result = ord($string[$i]);\n\n                while ($result >= 128 && $result <= 191) {\n                    $result = ord($string[--$i]);\n                }\n\n                $parts[] = base64_encode(Tools::substr($string, 0, $i));\n                $string = Tools::substr($string, $i);\n                $stringLength = Tools::strlen($string);\n            }\n\n            $parts[] = base64_encode($string);\n            $string = implode($sep, $parts);\n        } else {\n            $string = chunk_split(base64_encode($string), $length, $sep);\n            $string = preg_replace('/' . preg_quote($sep) . '$/', '', $string);\n        }\n\n        return $start . $string . $end;\n    }\n\n    /**\n     * Automatically convert email to Punycode.\n     *\n     * Try to use INTL_IDNA_VARIANT_UTS46 only if defined, else use INTL_IDNA_VARIANT_2003\n     * See https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003\n     *\n     * @param string $to Email address\n     *\n     * @return string\n     */\n    public static function toPunycode($to)\n    {\n        $address = explode('@', $to);\n        if (empty($address[0]) || empty($address[1])) {\n            return $to;\n        }\n\n        if (defined('INTL_IDNA_VARIANT_UTS46')) {\n            return $address[0] . '@' . idn_to_ascii($address[1], 0, INTL_IDNA_VARIANT_UTS46);\n        }\n\n        /*\n         * INTL_IDNA_VARIANT_2003 const will be removed in PHP 8.\n         * See https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003\n         */\n        if (defined('INTL_IDNA_VARIANT_2003')) {\n            return $address[0] . '@' . idn_to_ascii($address[1], 0, INTL_IDNA_VARIANT_2003);\n        }\n\n        return $address[0] . '@' . idn_to_ascii($address[1]);\n    }\n\n    /**\n     * Generic function to dieOrLog with translations.\n     *\n     * @param bool $die Should die\n     * @param string $message Message\n     * @param array $templates Templates list\n     * @param string $domain Translation domain\n     */\n    protected static function dieOrLog(\n        $die,\n        $message,\n        $templates = [],\n        $domain = 'Admin.Advparameters.Notification'\n    ) {\n        Tools::dieOrLog(\n            Context::getContext()->getTranslator()->trans(\n                $message,\n                $templates,\n                $domain\n            ),\n            $die\n        );\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * @property CustomerThread $object\n */\nclass AdminCustomerThreadsControllerCore extends AdminController\n{\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->context = Context::getContext();\n        $this->table = 'customer_thread';\n        $this->className = 'CustomerThread';\n        $this->lang = false;\n\n        $contact_array = array();\n        $contacts = Contact::getContacts($this->context->language->id);\n\n        foreach ($contacts as $contact) {\n            $contact_array[$contact['id_contact']] = $contact['name'];\n        }\n\n        $language_array = array();\n        $languages = Language::getLanguages();\n        foreach ($languages as $language) {\n            $language_array[$language['id_lang']] = $language['name'];\n        }\n\n        parent::__construct();\n\n        $icon_array = array(\n            'open' => array('class' => 'icon-circle text-success', 'alt' => $this->trans('Open', array(), 'Admin.Catalog.Feature')),\n            'closed' => array('class' => 'icon-circle text-danger', 'alt' => $this->trans('Closed', array(), 'Admin.Catalog.Feature')),\n            'pending1' => array('class' => 'icon-circle text-warning', 'alt' => $this->trans('Pending 1', array(), 'Admin.Catalog.Feature')),\n            'pending2' => array('class' => 'icon-circle text-warning', 'alt' => $this->trans('Pending 2', array(), 'Admin.Catalog.Feature')),\n        );\n\n        $status_array = array();\n        foreach ($icon_array as $k => $v) {\n            $status_array[$k] = $v['alt'];\n        }\n\n        $this->fields_list = array(\n            'id_customer_thread' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'align' => 'center',\n                'class' => 'fixed-width-xs',\n            ),\n            'customer' => array(\n                'title' => $this->trans('Customer', array(), 'Admin.Global'),\n                'filter_key' => 'customer',\n                'tmpTableFilter' => true,\n            ),\n            'email' => array(\n                'title' => $this->trans('Email', array(), 'Admin.Global'),\n                'filter_key' => 'a!email',\n            ),\n            'contact' => array(\n                'title' => $this->trans('Type', array(), 'Admin.Catalog.Feature'),\n                'type' => 'select',\n                'list' => $contact_array,\n                'filter_key' => 'cl!id_contact',\n                'filter_type' => 'int',\n            ),\n            'language' => array(\n                'title' => $this->trans('Language', array(), 'Admin.Global'),\n                'type' => 'select',\n                'list' => $language_array,\n                'filter_key' => 'l!id_lang',\n                'filter_type' => 'int',\n            ),\n            'status' => array(\n                'title' => $this->trans('Status', array(), 'Admin.Global'),\n                'type' => 'select',\n                'list' => $status_array,\n                'icon' => $icon_array,\n                'align' => 'center',\n                'filter_key' => 'a!status',\n                'filter_type' => 'string',\n            ),\n            'employee' => array(\n                'title' => $this->trans('Employee', array(), 'Admin.Global'),\n                'filter_key' => 'employee',\n                'tmpTableFilter' => true,\n            ),\n            'messages' => array(\n                'title' => $this->trans('Messages', array(), 'Admin.Catalog.Feature'),\n                'filter_key' => 'messages',\n                'tmpTableFilter' => true,\n                'maxlength' => 40,\n            ),\n            'private' => array(\n                'title' => $this->trans('Private', array(), 'Admin.Catalog.Feature'),\n                'type' => 'select',\n                'filter_key' => 'private',\n                'align' => 'center',\n                'cast' => 'intval',\n                'callback' => 'printOptinIcon',\n                'list' => array(\n                    '0' => $this->trans('No', array(), 'Admin.Global'),\n                    '1' => $this->trans('Yes', array(), 'Admin.Global'),\n                ),\n            ),\n            'date_upd' => array(\n                'title' => $this->trans('Last message', array(), 'Admin.Catalog.Feature'),\n                'havingFilter' => true,\n                'type' => 'datetime',\n            ),\n        );\n\n        $this->bulk_actions = array(\n            'delete' => array(\n                'text' => $this->trans('Delete selected', array(), 'Admin.Actions'),\n                'confirm' => $this->trans('Delete selected items?', array(), 'Admin.Notifications.Warning'),\n                'icon' => 'icon-trash',\n            ),\n        );\n\n        $this->shopLinkType = 'shop';\n\n        $this->fields_options = array(\n            'contact' => array(\n                'title' => $this->trans('Contact options', array(), 'Admin.Catalog.Feature'),\n                'fields' => array(\n                    'PS_CUSTOMER_SERVICE_FILE_UPLOAD' => array(\n                        'title' => $this->trans('Allow file uploading', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Allow customers to upload files using the contact page.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'bool',\n                    ),\n                    'PS_CUSTOMER_SERVICE_SIGNATURE' => array(\n                        'title' => $this->trans('Default message', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Please fill out the message fields that appear by default when you answer a thread on the customer service page.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'textareaLang',\n                        'lang' => true,\n                    ),\n                ),\n                'submit' => array('title' => $this->trans('Save', array(), 'Admin.Actions')),\n            ),\n            'general' => array(\n                'title' => $this->trans('Customer service options', array(), 'Admin.Catalog.Feature'),\n                'fields' => array(\n                    'PS_SAV_IMAP_URL' => array(\n                        'title' => $this->trans('IMAP URL', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('URL for your IMAP server (ie.: mail.server.com).', array(), 'Admin.Catalog.Help'),\n                        'type' => 'text',\n                        'validation' => 'isValidImapUrl',\n                    ),\n                    'PS_SAV_IMAP_PORT' => array(\n                        'title' => $this->trans('IMAP port', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Port to use to connect to your IMAP server.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'text',\n                        'defaultValue' => 143,\n                    ),\n                    'PS_SAV_IMAP_USER' => array(\n                        'title' => $this->trans('IMAP user', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('User to use to connect to your IMAP server.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'text',\n                    ),\n                    'PS_SAV_IMAP_PWD' => array(\n                        'title' => $this->trans('IMAP password', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Password to use to connect your IMAP server.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'text',\n                    ),\n                    'PS_SAV_IMAP_DELETE_MSG' => array(\n                        'title' => $this->trans('Delete messages', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Delete messages after synchronization. If you do not enable this option, the synchronization will take more time.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'bool',\n                    ),\n                    'PS_SAV_IMAP_CREATE_THREADS' => array(\n                        'title' => $this->trans('Create new threads', array(), 'Admin.Catalog.Feature'),\n                        'hint' => $this->trans('Create new threads for unrecognized emails.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'bool',\n                    ),\n                    'PS_SAV_IMAP_OPT_POP3' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/pop3)',\n                        'hint' => $this->trans('Use POP3 instead of IMAP.', array(), 'Admin.Catalog.Help'),\n                        'type' => 'bool',\n                    ),\n                    'PS_SAV_IMAP_OPT_NORSH' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/norsh)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Do not use RSH or SSH to establish a preauthenticated IMAP sessions.', array(), 'Admin.Catalog.Help'),\n                    ),\n                    'PS_SAV_IMAP_OPT_SSL' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/ssl)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Use the Secure Socket Layer (TLS/SSL) to encrypt the session.', array(), 'Admin.Catalog.Help'),\n                    ),\n                    'PS_SAV_IMAP_OPT_VALIDATE-CERT' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/validate-cert)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Validate certificates from the TLS/SSL server.', array(), 'Admin.Catalog.Help'),\n                    ),\n                    'PS_SAV_IMAP_OPT_NOVALIDATE-CERT' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/novalidate-cert)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Do not validate certificates from the TLS/SSL server. This is only needed if a server uses self-signed certificates.', array(), 'Admin.Catalog.Help'),\n                    ),\n                    'PS_SAV_IMAP_OPT_TLS' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/tls)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Force use of start-TLS to encrypt the session, and reject connection to servers that do not support it.', array(), 'Admin.Catalog.Help'),\n                    ),\n                    'PS_SAV_IMAP_OPT_NOTLS' => array(\n                        'title' => $this->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/notls)',\n                        'type' => 'bool',\n                        'hint' => $this->trans('Do not use start-TLS to encrypt the session, even with servers that support it.', array(), 'Admin.Catalog.Help'),\n                    ),\n                ),\n                'submit' => array('title' => $this->trans('Save', array(), 'Admin.Actions')),\n            ),\n        );\n    }\n\n    public function renderList()\n    {\n        // Check the new IMAP messages before rendering the list\n        $this->renderProcessSyncImap();\n\n        $this->addRowAction('view');\n        $this->addRowAction('delete');\n\n        $this->_select = '\n\t\t\tCONCAT(c.`firstname`,\" \",c.`lastname`) as customer, cl.`name` as contact, l.`name` as language, group_concat(cm.`message`) as messages, cm.private,\n\t\t\t(\n\t\t\t\tSELECT IFNULL(CONCAT(LEFT(e.`firstname`, 1),\". \",e.`lastname`), \"--\")\n\t\t\t\tFROM `' . _DB_PREFIX_ . 'customer_message` cm2\n\t\t\t\tINNER JOIN ' . _DB_PREFIX_ . 'employee e\n\t\t\t\t\tON e.`id_employee` = cm2.`id_employee`\n\t\t\t\tWHERE cm2.id_employee > 0\n\t\t\t\t\tAND cm2.`id_customer_thread` = a.`id_customer_thread`\n\t\t\t\tORDER BY cm2.`date_add` DESC LIMIT 1\n\t\t\t) as employee';\n\n        $this->_join = '\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer` c\n\t\t\t\tON c.`id_customer` = a.`id_customer`\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer_message` cm\n\t\t\t\tON cm.`id_customer_thread` = a.`id_customer_thread`\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'lang` l\n\t\t\t\tON l.`id_lang` = a.`id_lang`\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'contact_lang` cl\n\t\t\t\tON (cl.`id_contact` = a.`id_contact` AND cl.`id_lang` = ' . (int) $this->context->language->id . ')';\n\n        if ($id_order = Tools::getValue('id_order')) {\n            $this->_where .= ' AND id_order = ' . (int) $id_order;\n        }\n\n        $this->_group = 'GROUP BY cm.id_customer_thread';\n        $this->_orderBy = 'id_customer_thread';\n        $this->_orderWay = 'DESC';\n\n        $contacts = CustomerThread::getContacts();\n\n        $categories = Contact::getCategoriesContacts();\n\n        $params = array(\n            $this->trans('Total threads', array(), 'Admin.Catalog.Feature') => $all = CustomerThread::getTotalCustomerThreads(),\n            $this->trans('Threads pending', array(), 'Admin.Catalog.Feature') => $pending = CustomerThread::getTotalCustomerThreads('status LIKE \"%pending%\"'),\n            $this->trans('Total number of customer messages', array(), 'Admin.Catalog.Feature') => CustomerMessage::getTotalCustomerMessages('id_employee = 0'),\n            $this->trans('Total number of employee messages', array(), 'Admin.Catalog.Feature') => CustomerMessage::getTotalCustomerMessages('id_employee != 0'),\n            $this->trans('Unread threads', array(), 'Admin.Catalog.Feature') => $unread = CustomerThread::getTotalCustomerThreads('status = \"open\"'),\n            $this->trans('Closed threads', array(), 'Admin.Catalog.Feature') => $all - ($unread + $pending),\n        );\n\n        $this->tpl_list_vars = array(\n            'contacts' => $contacts,\n            'categories' => $categories,\n            'params' => $params,\n        );\n\n        return parent::renderList();\n    }\n\n    public function initToolbar()\n    {\n        parent::initToolbar();\n        unset($this->toolbar_btn['new']);\n    }\n\n    public function printOptinIcon($value, $customer)\n    {\n        return $value ? '<i class=\"icon-check\"></i>' : '<i class=\"icon-remove\"></i>';\n    }\n\n    public function postProcess()\n    {\n        if ($id_customer_thread = (int) Tools::getValue('id_customer_thread')) {\n            if (($id_contact = (int) Tools::getValue('id_contact'))) {\n                $result = Db::getInstance()->execute(\n                    '\n\t\t\t\t\tUPDATE ' . _DB_PREFIX_ . 'customer_thread\n\t\t\t\t\tSET id_contact = ' . $id_contact . '\n\t\t\t\t\tWHERE id_customer_thread = ' . $id_customer_thread\n                );\n                if ($result) {\n                    $this->object->id_contact = $id_contact;\n                }\n            }\n            if ($id_status = (int) Tools::getValue('setstatus')) {\n                $status_array = array(1 => 'open', 2 => 'closed', 3 => 'pending1', 4 => 'pending2');\n                $result = Db::getInstance()->execute('\n\t\t\t\t\tUPDATE ' . _DB_PREFIX_ . 'customer_thread\n\t\t\t\t\tSET status = \"' . $status_array[$id_status] . '\"\n\t\t\t\t\tWHERE id_customer_thread = ' . $id_customer_thread . ' LIMIT 1\n\t\t\t\t');\n                if ($result) {\n                    $this->object->status = $status_array[$id_status];\n                }\n            }\n            if (isset($_POST['id_employee_forward'])) {\n                $messages = Db::getInstance()->getRow('\n\t\t\t\t\tSELECT ct.*, cm.*, cl.name subject, CONCAT(e.firstname, \\' \\', e.lastname) employee_name,\n\t\t\t\t\t\tCONCAT(c.firstname, \\' \\', c.lastname) customer_name, c.firstname\n\t\t\t\t\tFROM ' . _DB_PREFIX_ . 'customer_thread ct\n\t\t\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'customer_message cm\n\t\t\t\t\t\tON (ct.id_customer_thread = cm.id_customer_thread)\n\t\t\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'contact_lang cl\n\t\t\t\t\t\tON (cl.id_contact = ct.id_contact AND cl.id_lang = ' . (int) $this->context->language->id . ')\n\t\t\t\t\tLEFT OUTER JOIN ' . _DB_PREFIX_ . 'employee e\n\t\t\t\t\t\tON e.id_employee = cm.id_employee\n\t\t\t\t\tLEFT OUTER JOIN ' . _DB_PREFIX_ . 'customer c\n\t\t\t\t\t\tON (c.email = ct.email)\n\t\t\t\t\tWHERE ct.id_customer_thread = ' . (int) Tools::getValue('id_customer_thread') . '\n\t\t\t\t\tORDER BY cm.date_add DESC\n\t\t\t\t');\n                $output = $this->displayMessage($messages, true, (int) Tools::getValue('id_employee_forward'));\n                $cm = new CustomerMessage();\n                $cm->id_employee = (int) $this->context->employee->id;\n                $cm->id_customer_thread = (int) Tools::getValue('id_customer_thread');\n                $cm->ip_address = (int) ip2long(Tools::getRemoteAddr());\n                $current_employee = $this->context->employee;\n                $id_employee = (int) Tools::getValue('id_employee_forward');\n                $employee = new Employee($id_employee);\n                $email = Tools::getValue('email');\n                $message = Tools::getValue('message_forward');\n                if (($error = $cm->validateField('message', $message, null, array(), true)) !== true) {\n                    $this->errors[] = $error;\n                } elseif ($id_employee && $employee && Validate::isLoadedObject($employee)) {\n                    $params = [\n                        '{messages}' => Tools::stripslashes($output),\n                        '{employee}' => $current_employee->firstname . ' ' . $current_employee->lastname,\n                        '{comment}' => Tools::stripslashes(Tools::nl2br($_POST['message_forward'])),\n                        '{firstname}' => $employee->firstname,\n                        '{lastname}' => $employee->lastname,\n                    ];\n\n                    if (Mail::Send(\n                        $this->context->language->id,\n                        'forward_msg',\n                        $this->trans(\n                            'Fwd: Customer message',\n                            array(),\n                            'Emails.Subject',\n                            $this->context->language->locale\n                        ),\n                        $params,\n                        $employee->email,\n                        $employee->firstname . ' ' . $employee->lastname,\n                        $current_employee->email,\n                        $current_employee->firstname . ' ' . $current_employee->lastname,\n                        null,\n                        null,\n                        _PS_MAIL_DIR_,\n                        true\n                    )) {\n                        $cm->private = 1;\n                        $cm->message = $this->trans('Message forwarded to', array(), 'Admin.Catalog.Feature') . ' ' . $employee->firstname . ' ' . $employee->lastname . \"\\n\" . $this->trans('Comment:') . ' ' . $message;\n                        $cm->add();\n                    }\n                } elseif ($email && Validate::isEmail($email)) {\n                    $params = [\n                        '{messages}' => Tools::nl2br(Tools::stripslashes($output)),\n                        '{employee}' => $current_employee->firstname . ' ' . $current_employee->lastname,\n                        '{comment}' => Tools::stripslashes($_POST['message_forward']),\n                        '{firstname}' => '',\n                        '{lastname}' => '',\n                    ];\n\n                    if (Mail::Send(\n                        $this->context->language->id,\n                        'forward_msg',\n                        $this->trans(\n                            'Fwd: Customer message',\n                            array(),\n                            'Emails.Subject',\n                            $this->context->language->locale\n                        ),\n                        $params,\n                        $email,\n                        null,\n                        $current_employee->email,\n                        $current_employee->firstname . ' ' . $current_employee->lastname,\n                        null,\n                        null,\n                        _PS_MAIL_DIR_,\n                        true\n                    )) {\n                        $cm->message = $this->trans('Message forwarded to', array(), 'Admin.Catalog.Feature') . ' ' . $email . \"\\n\" . $this->trans('Comment:') . ' ' . $message;\n                        $cm->add();\n                    }\n                } else {\n                    $this->errors[] = '<div class=\"alert error\">' . $this->trans('The email address is invalid.', array(), 'Admin.Notifications.Error') . '</div>';\n                }\n            }\n            if (Tools::isSubmit('submitReply')) {\n                $ct = new CustomerThread($id_customer_thread);\n\n                ShopUrl::cacheMainDomainForShop((int) $ct->id_shop);\n\n                $cm = new CustomerMessage();\n                $cm->id_employee = (int) $this->context->employee->id;\n                $cm->id_customer_thread = $ct->id;\n                $cm->ip_address = (int) ip2long(Tools::getRemoteAddr());\n                $cm->message = Tools::getValue('reply_message');\n                if (($error = $cm->validateField('message', $cm->message, null, array(), true)) !== true) {\n                    $this->errors[] = $error;\n                } elseif (isset($_FILES) && !empty($_FILES['joinFile']['name']) && $_FILES['joinFile']['error'] != 0) {\n                    $this->errors[] = $this->trans('An error occurred during the file upload process.', array(), 'Admin.Notifications.Error');\n                } elseif ($cm->add()) {\n                    $file_attachment = null;\n                    if (!empty($_FILES['joinFile']['name'])) {\n                        $file_attachment['content'] = file_get_contents($_FILES['joinFile']['tmp_name']);\n                        $file_attachment['name'] = $_FILES['joinFile']['name'];\n                        $file_attachment['mime'] = $_FILES['joinFile']['type'];\n                    }\n                    $customer = new Customer($ct->id_customer);\n\n                    $params = [\n                        '{reply}' => Tools::nl2br(Tools::htmlentitiesUTF8(Tools::getValue('reply_message'))),\n                        '{link}' => Tools::url(\n                            $this->context->link->getPageLink('contact', true, null, null, false, $ct->id_shop),\n                            'id_customer_thread=' . (int) $ct->id . '&token=' . $ct->token\n                        ),\n                        '{firstname}' => $customer->firstname,\n                        '{lastname}' => $customer->lastname,\n                    ];\n                    //#ct == id_customer_thread    #tc == token of thread   <== used in the synchronization imap\n                    $contact = new Contact((int) $ct->id_contact, (int) $ct->id_lang);\n\n                    if (Validate::isLoadedObject($contact)) {\n                        $from_name = $contact->name;\n                        $from_email = $contact->email;\n                    } else {\n                        $from_name = null;\n                        $from_email = null;\n                    }\n\n                    $language = new Language((int) $ct->id_lang);\n\n                    if (Mail::Send(\n                        (int) $ct->id_lang,\n                        'reply_msg',\n                        $this->trans(\n                            'An answer to your message is available #ct%thread_id% #tc%thread_token%',\n                            array(\n                                '%thread_id%' => $ct->id,\n                                '%thread_token%' => $ct->token,\n                            ),\n                            'Emails.Subject',\n                            $language->locale\n                        ),\n                        $params,\n                        Tools::getValue('msg_email'),\n                        null,\n                        $from_email,\n                        $from_name,\n                        $file_attachment,\n                        null,\n                        _PS_MAIL_DIR_,\n                        true,\n                        $ct->id_shop\n                    )) {\n                        $ct->status = 'closed';\n                        $ct->update();\n                    }\n                    Tools::redirectAdmin(\n                        self::$currentIndex . '&id_customer_thread=' . (int) $id_customer_thread . '&viewcustomer_thread&token=' . Tools::getValue('token')\n                    );\n                } else {\n                    $this->errors[] = $this->trans('An error occurred. Your message was not sent. Please contact your system administrator.', array(), 'Admin.Orderscustomers.Notification');\n                }\n            }\n        }\n\n        return parent::postProcess();\n    }\n\n    public function initContent()\n    {\n        if (isset($_GET['filename']) && file_exists(_PS_UPLOAD_DIR_ . $_GET['filename']) && Validate::isFileName($_GET['filename'])) {\n            AdminCustomerThreadsController::openUploadedFile();\n        }\n\n        return parent::initContent();\n    }\n\n    protected function openUploadedFile()\n    {\n        $filename = $_GET['filename'];\n\n        $extensions = array(\n            '.txt' => 'text/plain',\n            '.rtf' => 'application/rtf',\n            '.doc' => 'application/msword',\n            '.docx' => 'application/msword',\n            '.pdf' => 'application/pdf',\n            '.zip' => 'multipart/x-zip',\n            '.png' => 'image/png',\n            '.jpeg' => 'image/jpeg',\n            '.gif' => 'image/gif',\n            '.jpg' => 'image/jpeg',\n        );\n\n        $extension = false;\n        foreach ($extensions as $key => $val) {\n            if (substr(Tools::strtolower($filename), -4) == $key || substr(Tools::strtolower($filename), -5) == $key) {\n                $extension = $val;\n\n                break;\n            }\n        }\n\n        if (!$extension || !Validate::isFileName($filename)) {\n            die(Tools::displayError());\n        }\n\n        if (ob_get_level() && ob_get_length() > 0) {\n            ob_end_clean();\n        }\n        header('Content-Type: ' . $extension);\n        header('Content-Disposition:attachment;filename=\"' . $filename . '\"');\n        readfile(_PS_UPLOAD_DIR_ . $filename);\n        die;\n    }\n\n    public function renderKpis()\n    {\n        $time = time();\n        $kpis = array();\n\n        /* The data generation is located in AdminStatsControllerCore */\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-pending-messages';\n        $helper->icon = 'icon-envelope';\n        $helper->color = 'color1';\n        $helper->href = $this->context->link->getAdminLink('AdminCustomerThreads');\n        $helper->title = $this->trans('Pending Discussion Threads', array(), 'Admin.Catalog.Feature');\n        if (ConfigurationKPI::get('PENDING_MESSAGES') !== false) {\n            $helper->value = ConfigurationKPI::get('PENDING_MESSAGES');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=pending_messages';\n        $helper->refresh = (bool) (ConfigurationKPI::get('PENDING_MESSAGES_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-age';\n        $helper->icon = 'icon-time';\n        $helper->color = 'color2';\n        $helper->title = $this->trans('Average Response Time', array(), 'Admin.Catalog.Feature');\n        $helper->subtitle = $this->trans('30 days', array(), 'Admin.Global');\n        if (ConfigurationKPI::get('AVG_MSG_RESPONSE_TIME') !== false) {\n            $helper->value = ConfigurationKPI::get('AVG_MSG_RESPONSE_TIME');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=avg_msg_response_time';\n        $helper->refresh = (bool) (ConfigurationKPI::get('AVG_MSG_RESPONSE_TIME_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-messages-per-thread';\n        $helper->icon = 'icon-copy';\n        $helper->color = 'color3';\n        $helper->title = $this->trans('Messages per Thread', array(), 'Admin.Catalog.Feature');\n        $helper->subtitle = $this->trans('30 day', array(), 'Admin.Global');\n        if (ConfigurationKPI::get('MESSAGES_PER_THREAD') !== false) {\n            $helper->value = ConfigurationKPI::get('MESSAGES_PER_THREAD');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=messages_per_thread';\n        $helper->refresh = (bool) (ConfigurationKPI::get('MESSAGES_PER_THREAD_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpiRow();\n        $helper->kpis = $kpis;\n\n        return $helper->generate();\n    }\n\n    public function renderView()\n    {\n        if (!$id_customer_thread = (int) Tools::getValue('id_customer_thread')) {\n            return;\n        }\n\n        $this->context = Context::getContext();\n        if (!($thread = $this->loadObject())) {\n            return;\n        }\n        $this->context->cookie->{'customer_threadFilter_cl!id_contact'} = $thread->id_contact;\n\n        $employees = Employee::getEmployees();\n\n        $messages = CustomerThread::getMessageCustomerThreads($id_customer_thread);\n\n        foreach ($messages as $key => $mess) {\n            if ($mess['id_employee']) {\n                $employee = new Employee($mess['id_employee']);\n                $messages[$key]['employee_image'] = $employee->getImage();\n            }\n            if (isset($mess['file_name']) && $mess['file_name'] != '') {\n                $messages[$key]['file_name'] = _THEME_PROD_PIC_DIR_ . $mess['file_name'];\n            } else {\n                unset($messages[$key]['file_name']);\n            }\n\n            if ($mess['id_product']) {\n                $product = new Product((int) $mess['id_product'], false, $this->context->language->id);\n                if (Validate::isLoadedObject($product)) {\n                    $messages[$key]['product_name'] = $product->name;\n                    $messages[$key]['product_link'] = $this->context->link->getAdminLink('AdminProducts') . '&updateproduct&id_product=' . (int) $product->id;\n                }\n            }\n        }\n\n        $next_thread = CustomerThread::getNextThread((int) $thread->id);\n\n        $contacts = Contact::getContacts($this->context->language->id);\n\n        $actions = array();\n\n        if ($next_thread) {\n            $next_thread = array(\n                'href' => self::$currentIndex . '&id_customer_thread=' . (int) $next_thread . '&viewcustomer_thread&token=' . $this->token,\n                'name' => $this->trans('Reply to the next unanswered message in this thread', array(), 'Admin.Catalog.Feature'),\n            );\n        }\n\n        if ($thread->status != 'closed') {\n            $actions['closed'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=2&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Mark as \"handled\"', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 2,\n            );\n        } else {\n            $actions['open'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=1&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Re-open', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 1,\n            );\n        }\n\n        if ($thread->status != 'pending1') {\n            $actions['pending1'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=3&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Mark as \"pending 1\" (will be answered later)', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 3,\n            );\n        } else {\n            $actions['pending1'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=1&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Disable pending status', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 1,\n            );\n        }\n\n        if ($thread->status != 'pending2') {\n            $actions['pending2'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=4&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Mark as \"pending 2\" (will be answered later)', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 4,\n            );\n        } else {\n            $actions['pending2'] = array(\n                'href' => self::$currentIndex . '&viewcustomer_thread&setstatus=1&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $this->token,\n                'label' => $this->trans('Disable pending status', array(), 'Admin.Catalog.Feature'),\n                'name' => 'setstatus',\n                'value' => 1,\n            );\n        }\n\n        if ($thread->id_customer) {\n            $customer = new Customer($thread->id_customer);\n            $orders = Order::getCustomerOrders($customer->id);\n            if ($orders && count($orders)) {\n                $total_ok = 0;\n                $orders_ok = array();\n                foreach ($orders as $key => $order) {\n                    if ($order['valid']) {\n                        $orders_ok[] = $order;\n                        $total_ok += $order['total_paid_real'] / $order['conversion_rate'];\n                    }\n                    $orders[$key]['date_add'] = Tools::displayDate($order['date_add']);\n                    $orders[$key]['total_paid_real'] = Tools::displayPrice($order['total_paid_real'], new Currency((int) $order['id_currency']));\n                }\n            }\n\n            $products = $customer->getBoughtProducts();\n            if ($products && count($products)) {\n                foreach ($products as $key => $product) {\n                    $products[$key]['date_add'] = Tools::displayDate($product['date_add'], null, true);\n                }\n            }\n        }\n        $timeline_items = $this->getTimeline($messages, $thread->id_order);\n        $first_message = $messages[0];\n\n        if (!$messages[0]['id_employee']) {\n            unset($messages[0]);\n        }\n\n        $contact = '';\n        foreach ($contacts as $c) {\n            if ($c['id_contact'] == $thread->id_contact) {\n                $contact = $c['name'];\n            }\n        }\n\n        $this->tpl_view_vars = array(\n            'id_customer_thread' => $id_customer_thread,\n            'thread' => $thread,\n            'actions' => $actions,\n            'employees' => $employees,\n            'current_employee' => $this->context->employee,\n            'messages' => $messages,\n            'first_message' => $first_message,\n            'contact' => $contact,\n            'next_thread' => $next_thread,\n            'orders' => isset($orders) ? $orders : false,\n            'customer' => isset($customer) ? $customer : false,\n            'products' => isset($products) ? $products : false,\n            'total_ok' => isset($total_ok) ? Tools::displayPrice($total_ok, $this->context->currency) : false,\n            'orders_ok' => isset($orders_ok) ? $orders_ok : false,\n            'count_ok' => isset($orders_ok) ? count($orders_ok) : false,\n            'PS_CUSTOMER_SERVICE_SIGNATURE' => str_replace('\\r\\n', \"\\n\", Configuration::get('PS_CUSTOMER_SERVICE_SIGNATURE', (int) $thread->id_lang)),\n            'timeline_items' => $timeline_items,\n        );\n\n        if ($next_thread) {\n            $this->tpl_view_vars['next_thread'] = $next_thread;\n        }\n\n        return parent::renderView();\n    }\n\n    public function getTimeline($messages, $id_order)\n    {\n        $timeline = array();\n        foreach ($messages as $message) {\n            $product = new Product((int) $message['id_product'], false, $this->context->language->id);\n            $link_product = $this->context->link->getAdminLink('AdminOrders') . '&vieworder&id_order=' . (int) $product->id;\n\n            $content = '';\n            if (!$message['private']) {\n                $content .= $this->trans('Message to: ', array(), 'Admin.Catalog.Feature') . ' <span class=\"badge\">' . (!$message['id_employee'] ? $message['subject'] : $message['customer_name']) . '</span><br/>';\n            }\n            if (Validate::isLoadedObject($product)) {\n                $content .= '<br/>' . $this->trans('Product: ', array(), 'Admin.Catalog.Feature') . '<span class=\"label label-info\">' . $product->name . '</span><br/><br/>';\n            }\n            $content .= Tools::safeOutput($message['message']);\n\n            $timeline[$message['date_add']][] = array(\n                'arrow' => 'left',\n                'background_color' => '',\n                'icon' => 'icon-envelope',\n                'content' => $content,\n                'date' => $message['date_add'],\n            );\n        }\n\n        $order = new Order((int) $id_order);\n        if (Validate::isLoadedObject($order)) {\n            $order_history = $order->getHistory($this->context->language->id);\n            foreach ($order_history as $history) {\n                $link_order = $this->context->link->getAdminLink('AdminOrders') . '&vieworder&id_order=' . (int) $order->id;\n\n                $content = '<a class=\"badge\" target=\"_blank\" href=\"' . Tools::safeOutput($link_order) . '\">' . $this->trans('Order', array(), 'Admin.Global') . ' #' . (int) $order->id . '</a><br/><br/>';\n\n                $content .= '<span>' . $this->trans('Status:', array(), 'Admin.Catalog.Feature') . ' ' . $history['ostate_name'] . '</span>';\n\n                $timeline[$history['date_add']][] = array(\n                    'arrow' => 'right',\n                    'alt' => true,\n                    'background_color' => $history['color'],\n                    'icon' => 'icon-credit-card',\n                    'content' => $content,\n                    'date' => $history['date_add'],\n                    'see_more_link' => $link_order,\n                );\n            }\n        }\n        krsort($timeline);\n\n        return $timeline;\n    }\n\n    protected function displayMessage($message, $email = false, $id_employee = null)\n    {\n        $tpl = $this->createTemplate('message.tpl');\n\n        $contacts = Contact::getContacts($this->context->language->id);\n        foreach ($contacts as $contact) {\n            $contact_array[$contact['id_contact']] = array('id_contact' => $contact['id_contact'], 'name' => $contact['name']);\n        }\n        $contacts = $contact_array;\n\n        if (!$email) {\n            if (!empty($message['id_product']) && empty($message['employee_name'])) {\n                $id_order_product = Order::getIdOrderProduct((int) $message['id_customer'], (int) $message['id_product']);\n            }\n        }\n        $message['date_add'] = Tools::displayDate($message['date_add'], null, true);\n        $message['user_agent'] = strip_tags($message['user_agent']);\n        $message['message'] = preg_replace(\n            '/(https?:\\/\\/[a-z0-9#%&_=\\(\\)\\.\\? \\+\\-@\\/]{6,1000})([\\s\\n<])/Uui',\n            '<a href=\"\\1\">\\1</a>\\2',\n            html_entity_decode(\n                $message['message'],\n            ENT_QUOTES,\n                'UTF-8'\n            )\n        );\n\n        $is_valid_order_id = true;\n        $order = new Order((int) $message['id_order']);\n\n        if (!Validate::isLoadedObject($order)) {\n            $is_valid_order_id = false;\n        }\n\n        $tpl->assign(array(\n            'thread_url' => Tools::getAdminUrl(basename(_PS_ADMIN_DIR_) . '/' .\n                $this->context->link->getAdminLink('AdminCustomerThreads') . '&amp;id_customer_thread='\n                . (int) $message['id_customer_thread'] . '&amp;viewcustomer_thread=1'),\n            'link' => Context::getContext()->link,\n            'current' => self::$currentIndex,\n            'token' => $this->token,\n            'message' => $message,\n            'id_order_product' => isset($id_order_product) ? $id_order_product : null,\n            'email' => $email,\n            'id_employee' => $id_employee,\n            'PS_SHOP_NAME' => Configuration::get('PS_SHOP_NAME'),\n            'file_name' => file_exists(_PS_UPLOAD_DIR_ . $message['file_name']),\n            'contacts' => $contacts,\n            'is_valid_order_id' => $is_valid_order_id,\n        ));\n\n        return $tpl->fetch();\n    }\n\n    protected function displayButton($content)\n    {\n        return '<div><p>' . $content . '</p></div>';\n    }\n\n    public function renderOptions()\n    {\n        if (Configuration::get('PS_SAV_IMAP_URL')\n        && Configuration::get('PS_SAV_IMAP_PORT')\n        && Configuration::get('PS_SAV_IMAP_USER')\n        && Configuration::get('PS_SAV_IMAP_PWD')) {\n            $this->tpl_option_vars['use_sync'] = true;\n        } else {\n            $this->tpl_option_vars['use_sync'] = false;\n        }\n\n        return parent::renderOptions();\n    }\n\n    public function updateOptionPsSavImapOpt($value)\n    {\n        if ($this->access('edit') != '1') {\n            throw new PrestaShopException($this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error'));\n        }\n\n        if (!$this->errors && $value) {\n            Configuration::updateValue('PS_SAV_IMAP_OPT', implode('', $value));\n        }\n    }\n\n    public function ajaxProcessMarkAsRead()\n    {\n        if ($this->access('edit') != '1') {\n            throw new PrestaShopException($this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error'));\n        }\n\n        $id_thread = Tools::getValue('id_thread');\n        $messages = CustomerThread::getMessageCustomerThreads($id_thread);\n        if (count($messages)) {\n            Db::getInstance()->execute('UPDATE `' . _DB_PREFIX_ . 'customer_message` set `read` = 1 WHERE `id_employee` = ' . (int) $this->context->employee->id . ' AND `id_customer_thread` = ' . (int) $id_thread);\n        }\n    }\n\n    /**\n     * Call the IMAP synchronization during an AJAX process.\n     *\n     * @throws PrestaShopException\n     */\n    public function ajaxProcessSyncImap()\n    {\n        if ($this->access('edit') != '1') {\n            throw new PrestaShopException($this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error'));\n        }\n\n        if (Tools::isSubmit('syncImapMail')) {\n            die(json_encode($this->syncImap()));\n        }\n    }\n\n    /**\n     * Call the IMAP synchronization during the render process.\n     */\n    public function renderProcessSyncImap()\n    {\n        // To avoid an error if the IMAP isn't configured, we check the configuration here, like during\n        // the synchronization. All parameters will exists.\n        if (!(Configuration::get('PS_SAV_IMAP_URL')\n            || Configuration::get('PS_SAV_IMAP_PORT')\n            || Configuration::get('PS_SAV_IMAP_USER')\n            || Configuration::get('PS_SAV_IMAP_PWD'))) {\n            return;\n        }\n\n        // Executes the IMAP synchronization.\n        $sync_errors = $this->syncImap();\n\n        // Show the errors.\n        if (isset($sync_errors['hasError']) && $sync_errors['hasError']) {\n            if (isset($sync_errors['errors'])) {\n                foreach ($sync_errors['errors'] as &$error) {\n                    $this->displayWarning($error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Imap synchronization method.\n     *\n     * @return array errors list\n     */\n    public function syncImap()\n    {\n        if (!($url = Configuration::get('PS_SAV_IMAP_URL'))\n            || !($port = Configuration::get('PS_SAV_IMAP_PORT'))\n            || !($user = Configuration::get('PS_SAV_IMAP_USER'))\n            || !($password = Configuration::get('PS_SAV_IMAP_PWD'))) {\n            return array('hasError' => true, 'errors' => array('IMAP configuration is not correct'));\n        }\n\n        $conf = Configuration::getMultiple(array(\n            'PS_SAV_IMAP_OPT_POP3', 'PS_SAV_IMAP_OPT_NORSH', 'PS_SAV_IMAP_OPT_SSL',\n            'PS_SAV_IMAP_OPT_VALIDATE-CERT', 'PS_SAV_IMAP_OPT_NOVALIDATE-CERT',\n            'PS_SAV_IMAP_OPT_TLS', 'PS_SAV_IMAP_OPT_NOTLS', ));\n\n        $conf_str = '';\n        if ($conf['PS_SAV_IMAP_OPT_POP3']) {\n            $conf_str .= '/pop3';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_NORSH']) {\n            $conf_str .= '/norsh';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_SSL']) {\n            $conf_str .= '/ssl';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_VALIDATE-CERT']) {\n            $conf_str .= '/validate-cert';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_NOVALIDATE-CERT']) {\n            $conf_str .= '/novalidate-cert';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_TLS']) {\n            $conf_str .= '/tls';\n        }\n        if ($conf['PS_SAV_IMAP_OPT_NOTLS']) {\n            $conf_str .= '/notls';\n        }\n\n        if (!function_exists('imap_open')) {\n            return array('hasError' => true, 'errors' => array('imap is not installed on this server'));\n        }\n\n        $mbox = @imap_open('{' . $url . ':' . $port . $conf_str . '}', $user, $password);\n\n        //checks if there is no error when connecting imap server\n        $errors = imap_errors();\n        if (is_array($errors)) {\n            $errors = array_unique($errors);\n        }\n        $str_errors = '';\n        $str_error_delete = '';\n\n        if (count($errors) && is_array($errors)) {\n            $str_errors = '';\n            foreach ($errors as $error) {\n                $str_errors .= $error . ', ';\n            }\n            $str_errors = rtrim(trim($str_errors), ',');\n        }\n        //checks if imap connexion is active\n        if (!$mbox) {\n            return array('hasError' => true, 'errors' => array('Cannot connect to the mailbox :<br />' . ($str_errors)));\n        }\n\n        //Returns information about the current mailbox. Returns FALSE on failure.\n        $check = imap_check($mbox);\n        if (!$check) {\n            return array('hasError' => true, 'errors' => array('Fail to get information about the current mailbox'));\n        }\n\n        if ($check->Nmsgs == 0) {\n            return array('hasError' => true, 'errors' => array('NO message to sync'));\n        }\n\n        $result = imap_fetch_overview($mbox, \"1:{$check->Nmsgs}\", 0);\n        $message_errors = array();\n        foreach ($result as $overview) {\n            //check if message exist in database\n            if (isset($overview->subject)) {\n                $subject = $overview->subject;\n            } else {\n                $subject = '';\n            }\n            //Creating an md5 to check if message has been allready processed\n            $md5 = md5($overview->date . $overview->from . $subject . $overview->msgno);\n            $exist = Db::getInstance()->getValue(\n                'SELECT `md5_header`\n\t\t\t\t\t\t FROM `' . _DB_PREFIX_ . 'customer_message_sync_imap`\n\t\t\t\t\t\t WHERE `md5_header` = \\'' . pSQL($md5) . '\\''\n            );\n            if ($exist) {\n                if (Configuration::get('PS_SAV_IMAP_DELETE_MSG')) {\n                    if (!imap_delete($mbox, $overview->msgno)) {\n                        $str_error_delete = ', Fail to delete message';\n                    }\n                }\n            } else {\n                //check if subject has id_order\n                preg_match('/\\#ct([0-9]*)/', $subject, $matches1);\n                preg_match('/\\#tc([0-9-a-z-A-Z]*)/', $subject, $matches2);\n                $match_found = false;\n                if (isset($matches1[1], $matches2[1])) {\n                    $match_found = true;\n                }\n\n                $new_ct = (Configuration::get('PS_SAV_IMAP_CREATE_THREADS') && !$match_found && (strpos($subject, '[no_sync]') == false));\n\n                $fetch_succeed = true;\n                if ($match_found || $new_ct) {\n                    if ($new_ct) {\n                        // parse from attribute and fix it if needed\n                        $from_parsed = array();\n                        if (!isset($overview->from)\n                            || (!preg_match('/<(' . Tools::cleanNonUnicodeSupport('[a-z\\p{L}0-9!#$%&\\'*+\\/=?^`{}|~_-]+[.a-z\\p{L}0-9!#$%&\\'*+\\/=?^`{}|~_-]*@[a-z\\p{L}0-9]+[._a-z\\p{L}0-9-]*\\.[a-z0-9]+') . ')>/', $overview->from, $from_parsed)\n                            && !Validate::isEmail($overview->from))) {\n                            $message_errors[] = $this->trans('Cannot create message in a new thread.', array(), 'Admin.Orderscustomers.Notification');\n\n                            continue;\n                        }\n\n                        // fix email format: from \"Mr Sanders <sanders@blueforest.com>\" to \"sanders@blueforest.com\"\n                        $from = $overview->from;\n                        if (isset($from_parsed[1])) {\n                            $from = $from_parsed[1];\n                        }\n\n                        // we want to assign unrecognized mails to the right contact category\n                        $contacts = Contact::getContacts($this->context->language->id);\n                        if (!$contacts) {\n                            continue;\n                        }\n\n                        foreach ($contacts as $contact) {\n                            if (isset($overview->to) && strpos($overview->to, $contact['email']) !== false) {\n                                $id_contact = $contact['id_contact'];\n                            }\n                        }\n\n                        if (!isset($id_contact)) { // if not use the default contact category\n                            $id_contact = $contacts[0]['id_contact'];\n                        }\n\n                        $customer = new Customer();\n                        $client = $customer->getByEmail($from); //check if we already have a customer with this email\n                        $ct = new CustomerThread();\n                        if (isset($client->id)) { //if mail is owned by a customer assign to him\n                            $ct->id_customer = $client->id;\n                        }\n                        $ct->email = $from;\n                        $ct->id_contact = $id_contact;\n                        $ct->id_lang = (int) Configuration::get('PS_LANG_DEFAULT');\n                        $ct->id_shop = $this->context->shop->id; //new customer threads for unrecognized mails are not shown without shop id\n                        $ct->status = 'open';\n                        $ct->token = Tools::passwdGen(12);\n                        $ct->add();\n                    } else {\n                        $ct = new CustomerThread((int) $matches1[1]);\n                    } //check if order exist in database\n\n                    if (Validate::isLoadedObject($ct) && ((isset($matches2[1]) && $ct->token == $matches2[1]) || $new_ct)) {\n                        $structure = imap_bodystruct($mbox, $overview->msgno, '1');\n                        if ($structure->type == 0) {\n                            $message = imap_fetchbody($mbox, $overview->msgno, '1');\n                        } elseif ($structure->type == 1) {\n                            $structure = imap_bodystruct($mbox, $overview->msgno, '1.1');\n                            $message = imap_fetchbody($mbox, $overview->msgno, '1.1');\n                        } else {\n                            continue;\n                        }\n\n                        switch ($structure->encoding) {\n                            case 3:\n                                $message = imap_base64($message);\n\n                                break;\n                            case 4:\n                                $message = imap_qprint($message);\n\n                                break;\n                        }\n                        $message = iconv($this->getEncoding($structure), 'utf-8', $message);\n                        $message = nl2br($message);\n                        if (!$message || strlen($message) == 0) {\n                            $message_errors[] = $this->trans('The message body is empty, cannot import it.', array(), 'Admin.Orderscustomers.Notification');\n                            $fetch_succeed = false;\n\n                            continue;\n                        }\n                        $cm = new CustomerMessage();\n                        $cm->id_customer_thread = $ct->id;\n                        if (empty($message) || !Validate::isCleanHtml($message)) {\n                            $str_errors .= $this->trans('Invalid message content for subject: %s', array($subject), 'Admin.Orderscustomers.Notification');\n                        } else {\n                            try {\n                                $cm->message = $message;\n                                $cm->add();\n                            } catch (PrestaShopException $pse) {\n                                $message_errors[] = $this->trans('The message content is not valid, cannot import it.', array(), 'Admin.Orderscustomers.Notification');\n                                $fetch_succeed = false;\n\n                                continue;\n                            }\n                        }\n                    }\n                }\n                if ($fetch_succeed) {\n                    Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'customer_message_sync_imap` (`md5_header`) VALUES (\\'' . pSQL($md5) . '\\')');\n                }\n            }\n        }\n        imap_expunge($mbox);\n        imap_close($mbox);\n        if (count($message_errors) > 0) {\n            if (($more_error = $str_errors . $str_error_delete) && strlen($more_error) > 0) {\n                $message_errors = array_merge(array($more_error), $message_errors);\n            }\n\n            return array('hasError' => true, 'errors' => $message_errors);\n        }\n        if ($str_errors . $str_error_delete) {\n            return array('hasError' => true, 'errors' => array($str_errors . $str_error_delete));\n        } else {\n            return array('hasError' => false, 'errors' => '');\n        }\n    }\n\n    protected function getEncoding($structure)\n    {\n        foreach ($structure->parameters as $parameter) {\n            if ($parameter->attribute == 'CHARSET') {\n                return $parameter->value;\n            }\n        }\n\n        return 'utf-8';\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Adapter\\StockManager;\nuse PrestaShop\\PrestaShop\\Adapter\\SymfonyContainer;\n\n/**\n * @property Order $object\n */\nclass AdminOrdersControllerCore extends AdminController\n{\n    public $toolbar_title;\n\n    protected $statuses_array = array();\n\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->table = 'order';\n        $this->className = 'Order';\n        $this->lang = false;\n        $this->addRowAction('view');\n        $this->explicitSelect = true;\n        $this->allow_export = true;\n        $this->deleted = false;\n\n        parent::__construct();\n\n        $this->_select = '\n\t\ta.id_currency,\n\t\ta.id_order AS id_pdf,\n\t\tCONCAT(LEFT(c.`firstname`, 1), \\'. \\', c.`lastname`) AS `customer`,\n\t\tosl.`name` AS `osname`,\n\t\tos.`color`,\n\t\tIF((SELECT so.id_order FROM `' . _DB_PREFIX_ . 'orders` so WHERE so.id_customer = a.id_customer AND so.id_order < a.id_order LIMIT 1) > 0, 0, 1) as new,\n\t\tcountry_lang.name as cname,\n\t\tIF(a.valid, 1, 0) badge_success';\n\n        $this->_join = '\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer` c ON (c.`id_customer` = a.`id_customer`)\n\t\tINNER JOIN `' . _DB_PREFIX_ . 'address` address ON address.id_address = a.id_address_delivery\n\t\tINNER JOIN `' . _DB_PREFIX_ . 'country` country ON address.id_country = country.id_country\n\t\tINNER JOIN `' . _DB_PREFIX_ . 'country_lang` country_lang ON (country.`id_country` = country_lang.`id_country` AND country_lang.`id_lang` = ' . (int) $this->context->language->id . ')\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state` os ON (os.`id_order_state` = a.`current_state`)\n\t\tLEFT JOIN `' . _DB_PREFIX_ . 'order_state_lang` osl ON (os.`id_order_state` = osl.`id_order_state` AND osl.`id_lang` = ' . (int) $this->context->language->id . ')';\n        $this->_orderBy = 'id_order';\n        $this->_orderWay = 'DESC';\n        $this->_use_found_rows = true;\n\n        $statuses = OrderState::getOrderStates((int) $this->context->language->id);\n        foreach ($statuses as $status) {\n            $this->statuses_array[$status['id_order_state']] = $status['name'];\n        }\n\n        $this->fields_list = array(\n            'id_order' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'align' => 'text-center',\n                'class' => 'fixed-width-xs',\n            ),\n            'reference' => array(\n                'title' => $this->trans('Reference', array(), 'Admin.Global'),\n            ),\n            'new' => array(\n                'title' => $this->trans('New client', array(), 'Admin.Orderscustomers.Feature'),\n                'align' => 'text-center',\n                'type' => 'bool',\n                'tmpTableFilter' => true,\n                'orderby' => false,\n            ),\n            'customer' => array(\n                'title' => $this->trans('Customer', array(), 'Admin.Global'),\n                'havingFilter' => true,\n            ),\n        );\n\n        if (Configuration::get('PS_B2B_ENABLE')) {\n            $this->fields_list = array_merge($this->fields_list, array(\n                'company' => array(\n                    'title' => $this->trans('Company', array(), 'Admin.Global'),\n                    'filter_key' => 'c!company',\n                ),\n            ));\n        }\n\n        $this->fields_list = array_merge($this->fields_list, array(\n            'total_paid_tax_incl' => array(\n                'title' => $this->trans('Total', array(), 'Admin.Global'),\n                'align' => 'text-right',\n                'type' => 'price',\n                'currency' => true,\n                'callback' => 'setOrderCurrency',\n                'badge_success' => true,\n            ),\n            'payment' => array(\n                'title' => $this->trans('Payment', array(), 'Admin.Global'),\n            ),\n            'osname' => array(\n                'title' => $this->trans('Status', array(), 'Admin.Global'),\n                'type' => 'select',\n                'color' => 'color',\n                'list' => $this->statuses_array,\n                'filter_key' => 'os!id_order_state',\n                'filter_type' => 'int',\n                'order_key' => 'osname',\n            ),\n            'date_add' => array(\n                'title' => $this->trans('Date', array(), 'Admin.Global'),\n                'align' => 'text-right',\n                'type' => 'datetime',\n                'filter_key' => 'a!date_add',\n            ),\n            'id_pdf' => array(\n                'title' => $this->trans('PDF', array(), 'Admin.Global'),\n                'align' => 'text-center',\n                'callback' => 'printPDFIcons',\n                'orderby' => false,\n                'search' => false,\n                'remove_onclick' => true,\n            ),\n        ));\n\n        if (Country::isCurrentlyUsed('country', true)) {\n            $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS('\n\t\t\tSELECT DISTINCT c.id_country, cl.`name`\n\t\t\tFROM `' . _DB_PREFIX_ . 'orders` o\n\t\t\t' . Shop::addSqlAssociation('orders', 'o') . '\n\t\t\tINNER JOIN `' . _DB_PREFIX_ . 'address` a ON a.id_address = o.id_address_delivery\n\t\t\tINNER JOIN `' . _DB_PREFIX_ . 'country` c ON a.id_country = c.id_country\n\t\t\tINNER JOIN `' . _DB_PREFIX_ . 'country_lang` cl ON (c.`id_country` = cl.`id_country` AND cl.`id_lang` = ' . (int) $this->context->language->id . ')\n\t\t\tORDER BY cl.name ASC');\n\n            $country_array = array();\n            foreach ($result as $row) {\n                $country_array[$row['id_country']] = $row['name'];\n            }\n\n            $part1 = array_slice($this->fields_list, 0, 3);\n            $part2 = array_slice($this->fields_list, 3);\n            $part1['cname'] = array(\n                'title' => $this->trans('Delivery', array(), 'Admin.Global'),\n                'type' => 'select',\n                'list' => $country_array,\n                'filter_key' => 'country!id_country',\n                'filter_type' => 'int',\n                'order_key' => 'cname',\n            );\n            $this->fields_list = array_merge($part1, $part2);\n        }\n\n        $this->shopLinkType = 'shop';\n        $this->shopShareDatas = Shop::SHARE_ORDER;\n\n        if (Tools::isSubmit('id_order')) {\n            // Save context (in order to apply cart rule)\n            $order = new Order((int) Tools::getValue('id_order'));\n            $this->context->cart = new Cart($order->id_cart);\n            $this->context->customer = new Customer($order->id_customer);\n        }\n\n        $this->bulk_actions = array(\n            'updateOrderStatus' => array('text' => $this->trans('Change Order Status', array(), 'Admin.Orderscustomers.Feature'), 'icon' => 'icon-refresh'),\n        );\n    }\n\n    public static function setOrderCurrency($echo, $tr)\n    {\n        if (!empty($tr['id_currency'])) {\n            $idCurrency = (int) $tr['id_currency'];\n        } else {\n            $order = new Order($tr['id_order']);\n            $idCurrency = (int) $order->id_currency;\n        }\n\n        return Tools::displayPrice($echo, $idCurrency);\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        parent::initPageHeaderToolbar();\n\n        if (empty($this->display)) {\n            $this->page_header_toolbar_btn['new_order'] = array(\n                'href' => self::$currentIndex . '&addorder&token=' . $this->token,\n                'desc' => $this->trans('Add new order', array(), 'Admin.Orderscustomers.Feature'),\n                'icon' => 'process-icon-new',\n            );\n        }\n\n        if ($this->display == 'add') {\n            unset($this->page_header_toolbar_btn['save']);\n        }\n\n        if (Context::getContext()->shop->getContext() != Shop::CONTEXT_SHOP && isset($this->page_header_toolbar_btn['new_order'])\n            && Shop::isFeatureActive()) {\n            unset($this->page_header_toolbar_btn['new_order']);\n        }\n    }\n\n    public function renderForm()\n    {\n        if (Context::getContext()->shop->getContext() != Shop::CONTEXT_SHOP && Shop::isFeatureActive()) {\n            $this->errors[] = $this->trans('You have to select a shop before creating new orders.', array(), 'Admin.Orderscustomers.Notification');\n        }\n\n        $id_cart = (int) Tools::getValue('id_cart');\n        $cart = new Cart((int) $id_cart);\n        if ($id_cart && !Validate::isLoadedObject($cart)) {\n            $this->errors[] = $this->trans('This cart does not exists', array(), 'Admin.Orderscustomers.Notification');\n        }\n        if ($id_cart && Validate::isLoadedObject($cart) && !$cart->id_customer) {\n            $this->errors[] = $this->trans('The cart must have a customer', array(), 'Admin.Orderscustomers.Notification');\n        }\n        if (count($this->errors)) {\n            return false;\n        }\n\n        parent::renderForm();\n        unset($this->toolbar_btn['save']);\n        $this->addJqueryPlugin(array('autocomplete', 'fancybox', 'typewatch', 'highlight'));\n\n        $defaults_order_state = array('cheque' => (int) Configuration::get('PS_OS_CHEQUE'),\n            'bankwire' => (int) Configuration::get('PS_OS_BANKWIRE'),\n            'cashondelivery' => Configuration::get('PS_OS_COD_VALIDATION') ? (int) Configuration::get('PS_OS_COD_VALIDATION') : (int) Configuration::get('PS_OS_PREPARATION'),\n            'other' => (int) Configuration::get('PS_OS_PAYMENT'),\n        );\n        $payment_modules = array();\n        foreach (PaymentModule::getInstalledPaymentModules() as $p_module) {\n            $payment_modules[] = Module::getInstanceById((int) $p_module['id_module']);\n        }\n\n        $this->context->smarty->assign(array(\n            'customersSearchUrl' => SymfonyContainer::getInstance()->get('router')->generate('admin_customers_search'),\n            'recyclable_pack' => (int) Configuration::get('PS_RECYCLABLE_PACK'),\n            'gift_wrapping' => (int) Configuration::get('PS_GIFT_WRAPPING'),\n            'cart' => $cart,\n            'currencies' => Currency::getCurrenciesByIdShop(Context::getContext()->shop->id),\n            'langs' => Language::getLanguages(true, Context::getContext()->shop->id),\n            'payment_modules' => $payment_modules,\n            'order_states' => OrderState::getOrderStates((int) Context::getContext()->language->id),\n            'defaults_order_state' => $defaults_order_state,\n            'show_toolbar' => $this->show_toolbar,\n            'toolbar_btn' => $this->toolbar_btn,\n            'toolbar_scroll' => $this->toolbar_scroll,\n            'PS_CATALOG_MODE' => Configuration::get('PS_CATALOG_MODE'),\n            'title' => array($this->trans('Orders', array(), 'Admin.Orderscustomers.Feature'), $this->trans('Create order', array(), 'Admin.Orderscustomers.Feature')),\n        ));\n        $this->content .= $this->createTemplate('form.tpl')->fetch();\n    }\n\n    public function initToolbar()\n    {\n        if ($this->display == 'view') {\n            /** @var Order $order */\n            $order = $this->loadObject();\n            $customer = $this->context->customer;\n\n            if (!Validate::isLoadedObject($order)) {\n                Tools::redirectAdmin($this->context->link->getAdminLink('AdminOrders'));\n            }\n\n            $this->toolbar_title[] = $this->trans(\n                'Order %reference% from %firstname% %lastname%',\n                array(\n                    '%reference%' => $order->reference,\n                    '%firstname%' => $customer->firstname,\n                    '%lastname%' => $customer->lastname,\n                ),\n                'Admin.Orderscustomers.Feature'\n            );\n            $this->addMetaTitle($this->toolbar_title[count($this->toolbar_title) - 1]);\n\n            if ($order->hasBeenShipped()) {\n                $type = $this->trans('Return products', array(), 'Admin.Orderscustomers.Feature');\n            } elseif ($order->hasBeenPaid()) {\n                $type = $this->trans('Standard refund', array(), 'Admin.Orderscustomers.Feature');\n            } else {\n                $type = $this->trans('Cancel products', array(), 'Admin.Orderscustomers.Feature');\n            }\n\n            if (!$order->hasBeenShipped() && !$this->lite_display) {\n                $this->toolbar_btn['new'] = array(\n                    'short' => 'Create',\n                    'href' => '#',\n                    'desc' => $this->trans('Add a product', array(), 'Admin.Orderscustomers.Feature'),\n                    'class' => 'add_product',\n                );\n            }\n\n            if (Configuration::get('PS_ORDER_RETURN') && !$this->lite_display) {\n                $this->toolbar_btn['standard_refund'] = array(\n                    'short' => 'Create',\n                    'href' => '',\n                    'desc' => $type,\n                    'class' => 'process-icon-standardRefund',\n                );\n            }\n\n            if ($order->hasInvoice() && !$this->lite_display) {\n                $this->toolbar_btn['partial_refund'] = array(\n                    'short' => 'Create',\n                    'href' => '',\n                    'desc' => $this->trans('Partial refund', array(), 'Admin.Orderscustomers.Feature'),\n                    'class' => 'process-icon-partialRefund',\n                );\n            }\n        }\n        $res = parent::initToolbar();\n        if (Context::getContext()->shop->getContext() != Shop::CONTEXT_SHOP && isset($this->toolbar_btn['new']) && Shop::isFeatureActive()) {\n            unset($this->toolbar_btn['new']);\n        }\n\n        return $res;\n    }\n\n    public function setMedia($isNewTheme = false)\n    {\n        parent::setMedia($isNewTheme);\n\n        $this->addJqueryUI('ui.datepicker');\n        $this->addJS(_PS_JS_DIR_ . 'vendor/d3.v3.min.js');\n        $this->addJS('https://maps.googleapis.com/maps/api/js?v=3.exp');\n\n        if ($this->access('edit') && $this->display == 'view') {\n            $this->addJS(_PS_JS_DIR_ . 'admin/orders.js');\n            $this->addJS(_PS_JS_DIR_ . 'tools.js');\n            $this->addJqueryPlugin('autocomplete');\n        }\n    }\n\n    public function printPDFIcons($id_order, $tr)\n    {\n        static $valid_order_state = array();\n\n        $order = new Order($id_order);\n        if (!Validate::isLoadedObject($order)) {\n            return '';\n        }\n\n        if (!isset($valid_order_state[$order->current_state])) {\n            $valid_order_state[$order->current_state] = Validate::isLoadedObject($order->getCurrentOrderState());\n        }\n\n        if (!$valid_order_state[$order->current_state]) {\n            return '';\n        }\n\n        $this->context->smarty->assign(array(\n            'order' => $order,\n            'tr' => $tr,\n        ));\n\n        return $this->createTemplate('_print_pdf_icon.tpl')->fetch();\n    }\n\n    public function processBulkUpdateOrderStatus()\n    {\n        if (Tools::isSubmit('submitUpdateOrderStatus')\n            && ($id_order_state = (int) Tools::getValue('id_order_state'))) {\n            if (true !== $this->access('edit')) {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            } else {\n                $order_state = new OrderState($id_order_state);\n\n                if (!Validate::isLoadedObject($order_state)) {\n                    $this->errors[] = $this->trans('Order status #%id% cannot be loaded', array('%id%' => $id_order_state), 'Admin.Orderscustomers.Notification');\n                } else {\n                    foreach (Tools::getValue('orderBox') as $id_order) {\n                        $order = new Order((int) $id_order);\n                        if (!Validate::isLoadedObject($order)) {\n                            $this->errors[] = $this->trans('Order #%d cannot be loaded', array('#%d' => $id_order), 'Admin.Orderscustomers.Notification');\n                        } else {\n                            $current_order_state = $order->getCurrentOrderState();\n                            if ($current_order_state->id == $order_state->id) {\n                                $this->errors[] = $this->trans('Order #%d has already been assigned this status.', array('#%d' => $id_order), 'Admin.Orderscustomers.Notification');\n                            } else {\n                                $history = new OrderHistory();\n                                $history->id_order = $order->id;\n                                $history->id_employee = (int) $this->context->employee->id;\n\n                                $use_existings_payment = !$order->hasInvoice();\n                                $history->changeIdOrderState((int) $order_state->id, $order, $use_existings_payment);\n\n                                $carrier = new Carrier($order->id_carrier, $order->id_lang);\n                                $templateVars = array();\n                                if ($history->id_order_state == Configuration::get('PS_OS_SHIPPING') && $order->shipping_number) {\n                                    $templateVars = array('{followup}' => str_replace('@', $order->shipping_number, $carrier->url));\n                                }\n\n                                if ($history->addWithemail(true, $templateVars)) {\n                                    if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')) {\n                                        foreach ($order->getProducts() as $product) {\n                                            if (StockAvailable::dependsOnStock($product['product_id'])) {\n                                                StockAvailable::synchronize($product['product_id'], (int) $product['id_shop']);\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    $this->errors[] = $this->trans(\n                                        'An error occurred while changing the status for order #%d, or we were unable to send an email to the customer.',\n                                        array(\n                                            '#%d' => $id_order,\n                                        ),\n                                        'Admin.Orderscustomers.Notification'\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (!count($this->errors)) {\n                Tools::redirectAdmin(self::$currentIndex . '&conf=4&token=' . $this->token);\n            }\n        }\n    }\n\n    public function renderList()\n    {\n        if (Tools::isSubmit('submitBulkupdateOrderStatus' . $this->table)) {\n            if (Tools::getIsset('cancel')) {\n                Tools::redirectAdmin(self::$currentIndex . '&token=' . $this->token);\n            }\n\n            $this->tpl_list_vars['updateOrderStatus_mode'] = true;\n            $this->tpl_list_vars['order_statuses'] = $this->statuses_array;\n            $this->tpl_list_vars['REQUEST_URI'] = $_SERVER['REQUEST_URI'];\n            $this->tpl_list_vars['POST'] = $_POST;\n        }\n\n        return parent::renderList();\n    }\n\n    public function postProcess()\n    {\n        // If id_order is sent, we instanciate a new Order object\n        if (Tools::isSubmit('id_order') && Tools::getValue('id_order') > 0) {\n            $order = new Order(Tools::getValue('id_order'));\n            if (!Validate::isLoadedObject($order)) {\n                $this->errors[] = $this->trans('The order cannot be found within your database.', array(), 'Admin.Orderscustomers.Notification');\n            }\n            ShopUrl::cacheMainDomainForShop((int) $order->id_shop);\n        }\n\n        /* Update shipping number and carrier */\n        if (Tools::isSubmit('submitShippingNumber') && isset($order)) {\n            if ($this->access('edit')) {\n                $tracking_number = Tools::getValue('shipping_tracking_number');\n                $id_carrier = Tools::getValue('shipping_carrier');\n                $old_tracking_number = $order->shipping_number;\n\n                $order_carrier = new OrderCarrier(Tools::getValue('id_order_carrier'));\n                if (!Validate::isLoadedObject($order_carrier)) {\n                    $this->errors[] = $this->trans('The order carrier ID is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!empty($tracking_number) && !Validate::isTrackingNumber($tracking_number)) {\n                    $this->errors[] = $this->trans('The tracking number is incorrect.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    //update carrier - ONLY if changed - then refresh shipping cost\n                    $old_id_carrier = $order_carrier->id_carrier;\n                    if (!empty($id_carrier) && $old_id_carrier != $id_carrier) {\n                        $order->id_carrier = (int) $id_carrier;\n                        $order_carrier->id_carrier = (int) $id_carrier;\n                        $order_carrier->update();\n                        $order->refreshShippingCost();\n                    }\n\n                    //load fresh order carrier because updated just before\n                    $order_carrier = new OrderCarrier((int) Tools::getValue('id_order_carrier'));\n\n                    // update shipping number\n                    // Keep these two following lines for backward compatibility, remove on 1.6 version\n                    $order->shipping_number = $tracking_number;\n                    $order->update();\n\n                    // Update order_carrier\n                    $order_carrier->tracking_number = pSQL($tracking_number);\n                    if ($order_carrier->update()) {\n                        //send mail only if tracking number is different AND not empty\n                        if (!empty($tracking_number) && $old_tracking_number != $tracking_number) {\n                            if ($order_carrier->sendInTransitEmail($order)) {\n                                $customer = new Customer((int) $order->id_customer);\n                                $carrier = new Carrier((int) $order->id_carrier, $order->id_lang);\n\n                                Hook::exec('actionAdminOrdersTrackingNumberUpdate', array(\n                                    'order' => $order,\n                                    'customer' => $customer,\n                                    'carrier' => $carrier,\n                                ), null, false, true, false, $order->id_shop);\n\n                                Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n                            } else {\n                                $this->errors[] = $this->trans('An error occurred while sending an email to the customer.', array(), 'Admin.Orderscustomers.Notification');\n                            }\n                        }\n                    } else {\n                        $this->errors[] = $this->trans('The order carrier cannot be updated.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitState') && isset($order)) {\n            /* Change order status, add a new entry in order history and send an e-mail to the customer if needed */\n            if ($this->access('edit')) {\n                $order_state = new OrderState(Tools::getValue('id_order_state'));\n\n                if (!Validate::isLoadedObject($order_state)) {\n                    $this->errors[] = $this->trans('The new order status is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    $current_order_state = $order->getCurrentOrderState();\n                    if ($current_order_state->id != $order_state->id) {\n                        // Create new OrderHistory\n                        $history = new OrderHistory();\n                        $history->id_order = $order->id;\n                        $history->id_employee = (int) $this->context->employee->id;\n\n                        $use_existings_payment = false;\n                        if (!$order->hasInvoice()) {\n                            $use_existings_payment = true;\n                        }\n                        $history->changeIdOrderState((int) $order_state->id, $order, $use_existings_payment);\n\n                        $carrier = new Carrier($order->id_carrier, $order->id_lang);\n                        $templateVars = array();\n                        if ($history->id_order_state == Configuration::get('PS_OS_SHIPPING') && $order->shipping_number) {\n                            $templateVars = array('{followup}' => str_replace('@', $order->shipping_number, $carrier->url));\n                        }\n\n                        // Save all changes\n                        if ($history->addWithemail(true, $templateVars)) {\n                            // synchronizes quantities if needed..\n                            if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')) {\n                                foreach ($order->getProducts() as $product) {\n                                    if (StockAvailable::dependsOnStock($product['product_id'])) {\n                                        StockAvailable::synchronize($product['product_id'], (int) $product['id_shop']);\n                                    }\n                                }\n                            }\n\n                            Tools::redirectAdmin(self::$currentIndex . '&id_order=' . (int) $order->id . '&vieworder&token=' . $this->token);\n                        }\n                        $this->errors[] = $this->trans('An error occurred while changing order status, or we were unable to send an email to the customer.', array(), 'Admin.Orderscustomers.Notification');\n                    } else {\n                        $this->errors[] = $this->trans('The order has already been assigned this status.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitMessage') && isset($order)) {\n            // Add a new message for the current order and send an e-mail to the customer if needed\n            if ($this->access('edit')) {\n                $customer = new Customer(Tools::getValue('id_customer'));\n                if (!Validate::isLoadedObject($customer)) {\n                    $this->errors[] = $this->trans('The customer is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Tools::getValue('message')) {\n                    $this->errors[] = $this->trans('The message cannot be blank.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    /* Get message rules and and check fields validity */\n                    $rules = call_user_func(array('Message', 'getValidationRules'), 'Message');\n                    foreach ($rules['required'] as $field) {\n                        if (($value = Tools::getValue($field)) == false && (string) $value != '0') {\n                            if (!Tools::getValue('id_' . $this->table) || $field != 'passwd') {\n                                $this->errors[] = $this->trans('field %s is required.', array('%s' => $field), 'Admin.Orderscustomers.Notification');\n                            }\n                        }\n                    }\n                    foreach ($rules['size'] as $field => $maxLength) {\n                        if (Tools::getValue($field) && Tools::strlen(Tools::getValue($field)) > $maxLength) {\n                            $this->errors[] = $this->trans(\n                                'The %1$s field is too long (%2$d chars max).',\n                                array(\n                                    '%1$s' => $field,\n                                    '%2$d' => $maxLength,\n                                ),\n                                'Admin.Notifications.Error'\n                            );\n                        }\n                    }\n                    foreach ($rules['validate'] as $field => $function) {\n                        if (Tools::getValue($field)) {\n                            if (!Validate::$function(htmlentities(Tools::getValue($field), ENT_COMPAT, 'UTF-8'))) {\n                                $this->errors[] = $this->trans('The %s field is invalid.', array('%s' => $field), 'Admin.Notifications.Error');\n                            }\n                        }\n                    }\n\n                    if (!count($this->errors)) {\n                        //check if a thread already exist\n                        $id_customer_thread = CustomerThread::getIdCustomerThreadByEmailAndIdOrder($customer->email, $order->id);\n                        if (!$id_customer_thread) {\n                            $customer_thread = new CustomerThread();\n                            $customer_thread->id_contact = 0;\n                            $customer_thread->id_customer = (int) $order->id_customer;\n                            $customer_thread->id_shop = (int) $this->context->shop->id;\n                            $customer_thread->id_order = (int) $order->id;\n                            $customer_thread->id_lang = (int) $this->context->language->id;\n                            $customer_thread->email = $customer->email;\n                            $customer_thread->status = 'open';\n                            $customer_thread->token = Tools::passwdGen(12);\n                            $customer_thread->add();\n                        } else {\n                            $customer_thread = new CustomerThread((int) $id_customer_thread);\n                        }\n\n                        $customer_message = new CustomerMessage();\n                        $customer_message->id_customer_thread = $customer_thread->id;\n                        $customer_message->id_employee = (int) $this->context->employee->id;\n                        $customer_message->message = Tools::getValue('message');\n                        $customer_message->private = Tools::getValue('visibility');\n\n                        if (!$customer_message->add()) {\n                            $this->errors[] = $this->trans('An error occurred while saving the message.', array(), 'Admin.Notifications.Error');\n                        } elseif ($customer_message->private) {\n                            Tools::redirectAdmin(self::$currentIndex . '&id_order=' . (int) $order->id . '&vieworder&conf=11&token=' . $this->token);\n                        } else {\n                            $message = $customer_message->message;\n                            if (Configuration::get('PS_MAIL_TYPE', null, null, $order->id_shop) != Mail::TYPE_TEXT) {\n                                $message = Tools::nl2br(Tools::htmlentitiesUTF8($customer_message->message));\n                            }\n\n                            $orderLanguage = new Language((int) $order->id_lang);\n                            $varsTpl = array(\n                                '{lastname}' => $customer->lastname,\n                                '{firstname}' => $customer->firstname,\n                                '{id_order}' => $order->id,\n                                '{order_name}' => $order->getUniqReference(),\n                                '{message}' => $message,\n                            );\n\n                            if (\n                                @Mail::Send(\n                                    (int) $order->id_lang,\n                                    'order_merchant_comment',\n                                    $this->trans(\n                                        'New message regarding your order',\n                                        array(),\n                                        'Emails.Subject',\n                                        $orderLanguage->locale\n                                    ),\n                                    $varsTpl,\n                                    $customer->email,\n                                    $customer->firstname . ' ' . $customer->lastname,\n                                    null,\n                                    null,\n                                    null,\n                                    null,\n                                    _PS_MAIL_DIR_,\n                                    true,\n                                    (int) $order->id_shop\n                                )\n                            ) {\n                                Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=11' . '&token=' . $this->token);\n                            }\n                        }\n                        $this->errors[] = $this->trans('An error occurred while sending an email to the customer.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('partialRefund') && isset($order)) {\n            // Partial refund from order\n            if ($this->access('edit')) {\n                if (Tools::isSubmit('partialRefundProduct') && ($refunds = Tools::getValue('partialRefundProduct')) && is_array($refunds)) {\n                    $amount = 0;\n                    $order_detail_list = array();\n                    $full_quantity_list = array();\n                    foreach ($refunds as $id_order_detail => $amount_detail) {\n                        $quantity = Tools::getValue('partialRefundProductQuantity');\n                        if (!$quantity[$id_order_detail]) {\n                            continue;\n                        }\n\n                        $full_quantity_list[$id_order_detail] = (int) $quantity[$id_order_detail];\n\n                        $order_detail_list[$id_order_detail] = array(\n                            'quantity' => (int) $quantity[$id_order_detail],\n                            'id_order_detail' => (int) $id_order_detail,\n                        );\n\n                        $order_detail = new OrderDetail((int) $id_order_detail);\n                        if (empty($amount_detail)) {\n                            $order_detail_list[$id_order_detail]['unit_price'] = (!Tools::getValue('TaxMethod') ? $order_detail->unit_price_tax_excl : $order_detail->unit_price_tax_incl);\n                            $order_detail_list[$id_order_detail]['amount'] = $order_detail->unit_price_tax_incl * $order_detail_list[$id_order_detail]['quantity'];\n                        } else {\n                            $order_detail_list[$id_order_detail]['amount'] = (float) str_replace(',', '.', $amount_detail);\n                            $order_detail_list[$id_order_detail]['unit_price'] = $order_detail_list[$id_order_detail]['amount'] / $order_detail_list[$id_order_detail]['quantity'];\n                        }\n                        $amount += $order_detail_list[$id_order_detail]['amount'];\n                        if (!$order->hasBeenDelivered() || ($order->hasBeenDelivered() && Tools::isSubmit('reinjectQuantities')) && $order_detail_list[$id_order_detail]['quantity'] > 0) {\n                            $this->reinjectQuantity($order_detail, $order_detail_list[$id_order_detail]['quantity']);\n                        }\n                    }\n\n                    $shipping_cost_amount = (float) str_replace(',', '.', Tools::getValue('partialRefundShippingCost')) ? (float) str_replace(',', '.', Tools::getValue('partialRefundShippingCost')) : false;\n\n                    if ($amount == 0 && $shipping_cost_amount == 0) {\n                        if (!empty($refunds)) {\n                            $this->errors[] = $this->trans('Please enter a quantity to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');\n                        } else {\n                            $this->errors[] = $this->trans('Please enter an amount to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');\n                        }\n\n                        return false;\n                    }\n\n                    $choosen = false;\n                    $voucher = 0;\n\n                    if ((int) Tools::getValue('refund_voucher_off') == 1) {\n                        $amount -= $voucher = (float) Tools::getValue('order_discount_price');\n                    } elseif ((int) Tools::getValue('refund_voucher_off') == 2) {\n                        $choosen = true;\n                        $amount = $voucher = (float) Tools::getValue('refund_voucher_choose');\n                    }\n\n                    if ($shipping_cost_amount > 0) {\n                        if (!Tools::getValue('TaxMethod')) {\n                            $tax = new Tax();\n                            $tax->rate = $order->carrier_tax_rate;\n                            $tax_calculator = new TaxCalculator(array($tax));\n                            $amount += $tax_calculator->addTaxes($shipping_cost_amount);\n                        } else {\n                            $amount += $shipping_cost_amount;\n                        }\n                    }\n\n                    $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n                    if (Validate::isLoadedObject($order_carrier)) {\n                        $order_carrier->weight = (float) $order->getTotalWeight();\n                        if ($order_carrier->update()) {\n                            $order->weight = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $order_carrier->weight);\n                        }\n                    }\n\n                    if ($amount >= 0) {\n                        if (!OrderSlip::create(\n                            $order,\n                            $order_detail_list,\n                            $shipping_cost_amount,\n                            $voucher,\n                            $choosen,\n                            (Tools::getValue('TaxMethod') ? false : true)\n                        )) {\n                            $this->errors[] = $this->trans('You cannot generate a partial credit slip.', array(), 'Admin.Orderscustomers.Notification');\n                        } else {\n                            Hook::exec('actionOrderSlipAdd', array('order' => $order, 'productList' => $order_detail_list, 'qtyList' => $full_quantity_list), null, false, true, false, $order->id_shop);\n                            $customer = new Customer((int) ($order->id_customer));\n                            $params['{lastname}'] = $customer->lastname;\n                            $params['{firstname}'] = $customer->firstname;\n                            $params['{id_order}'] = $order->id;\n                            $params['{order_name}'] = $order->getUniqReference();\n                            $orderLanguage = new Language((int) $order->id_lang);\n                            @Mail::Send(\n                                (int) $order->id_lang,\n                                'credit_slip',\n                                $this->trans(\n                                    'New credit slip regarding your order',\n                                    array(),\n                                    'Emails.Subject',\n                                    $orderLanguage->locale\n                                ),\n                                $params,\n                                $customer->email,\n                                $customer->firstname . ' ' . $customer->lastname,\n                                null,\n                                null,\n                                null,\n                                null,\n                                _PS_MAIL_DIR_,\n                                true,\n                                (int) $order->id_shop\n                            );\n                        }\n\n                        foreach ($order_detail_list as &$product) {\n                            $order_detail = new OrderDetail((int) $product['id_order_detail']);\n                            if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')) {\n                                StockAvailable::synchronize($order_detail->product_id);\n                            }\n                        }\n\n                        // Generate voucher\n                        if (Tools::isSubmit('generateDiscountRefund') && !count($this->errors) && $amount > 0) {\n                            $cart_rule = new CartRule();\n                            $cart_rule->description = $this->trans('Credit slip for order #%d', array('#%d' => $order->id), 'Admin.Orderscustomers.Feature');\n                            $language_ids = Language::getIDs(false);\n                            foreach ($language_ids as $id_lang) {\n                                // Define a temporary name\n                                $cart_rule->name[$id_lang] = sprintf('V0C%1$dO%2$d', $order->id_customer, $order->id);\n                            }\n\n                            // Define a temporary code\n                            $cart_rule->code = sprintf('V0C%1$dO%2$d', $order->id_customer, $order->id);\n                            $cart_rule->quantity = 1;\n                            $cart_rule->quantity_per_user = 1;\n\n                            // Specific to the customer\n                            $cart_rule->id_customer = $order->id_customer;\n                            $now = time();\n                            $cart_rule->date_from = date('Y-m-d H:i:s', $now);\n                            $cart_rule->date_to = date('Y-m-d H:i:s', strtotime('+1 year'));\n                            $cart_rule->partial_use = 1;\n                            $cart_rule->active = 1;\n\n                            $cart_rule->reduction_amount = $amount;\n                            $cart_rule->reduction_tax = $order->getTaxCalculationMethod() != PS_TAX_EXC;\n                            $cart_rule->minimum_amount_currency = $order->id_currency;\n                            $cart_rule->reduction_currency = $order->id_currency;\n\n                            if (!$cart_rule->add()) {\n                                $this->errors[] = $this->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');\n                            } else {\n                                // Update the voucher code and name\n                                foreach ($language_ids as $id_lang) {\n                                    $cart_rule->name[$id_lang] = sprintf('V%1$dC%2$dO%3$d', $cart_rule->id, $order->id_customer, $order->id);\n                                }\n                                $cart_rule->code = sprintf('V%1$dC%2$dO%3$d', $cart_rule->id, $order->id_customer, $order->id);\n\n                                if (!$cart_rule->update()) {\n                                    $this->errors[] = $this->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');\n                                } else {\n                                    $currency = $this->context->currency;\n                                    $customer = new Customer((int) ($order->id_customer));\n                                    $params['{lastname}'] = $customer->lastname;\n                                    $params['{firstname}'] = $customer->firstname;\n                                    $params['{id_order}'] = $order->id;\n                                    $params['{order_name}'] = $order->getUniqReference();\n                                    $params['{voucher_amount}'] = Tools::displayPrice($cart_rule->reduction_amount, $currency, false);\n                                    $params['{voucher_num}'] = $cart_rule->code;\n                                    $orderLanguage = new Language((int) $order->id_lang);\n                                    @Mail::Send(\n                                        (int) $order->id_lang,\n                                        'voucher',\n                                        $this->trans(\n                                            'New voucher for your order #%s',\n                                            array($order->reference),\n                                            'Emails.Subject',\n                                            $orderLanguage->locale\n                                        ),\n                                        $params,\n                                        $customer->email,\n                                        $customer->firstname . ' ' . $customer->lastname,\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        _PS_MAIL_DIR_,\n                                        true,\n                                        (int) $order->id_shop\n                                    );\n                                }\n                            }\n                        }\n                    } else {\n                        if (!empty($refunds)) {\n                            $this->errors[] = $this->trans('Please enter a quantity to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');\n                        } else {\n                            $this->errors[] = $this->trans('Please enter an amount to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');\n                        }\n                    }\n\n                    // Redirect if no errors\n                    if (!count($this->errors)) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=30&token=' . $this->token);\n                    }\n                } else {\n                    $this->errors[] = $this->trans('The partial refund data is incorrect.', array(), 'Admin.Orderscustomers.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('cancelProduct') && isset($order)) {\n            // Cancel product from order\n            if ($this->access('delete')) {\n                if (!Tools::isSubmit('id_order_detail') && !Tools::isSubmit('id_customization')) {\n                    $this->errors[] = $this->trans('You must select a product.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Tools::isSubmit('cancelQuantity') && !Tools::isSubmit('cancelCustomizationQuantity')) {\n                    $this->errors[] = $this->trans('You must enter a quantity.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    $productList = Tools::getValue('id_order_detail');\n                    if ($productList) {\n                        $productList = array_map('intval', $productList);\n                    }\n\n                    $customizationList = Tools::getValue('id_customization');\n                    if ($customizationList) {\n                        $customizationList = array_map('intval', $customizationList);\n                    }\n\n                    $qtyList = Tools::getValue('cancelQuantity');\n                    if ($qtyList) {\n                        $qtyList = array_map('intval', $qtyList);\n                    }\n\n                    $customizationQtyList = Tools::getValue('cancelCustomizationQuantity');\n                    if ($customizationQtyList) {\n                        $customizationQtyList = array_map('intval', $customizationQtyList);\n                    }\n\n                    $full_product_list = $productList;\n                    $full_quantity_list = $qtyList;\n\n                    if ($customizationList) {\n                        foreach ($customizationList as $key => $id_order_detail) {\n                            $full_product_list[(int) $id_order_detail] = $id_order_detail;\n                            if (isset($customizationQtyList[$key])) {\n                                $full_quantity_list[(int) $id_order_detail] += $customizationQtyList[$key];\n                            }\n                        }\n                    }\n\n                    if ($productList || $customizationList) {\n                        if ($productList) {\n                            $id_cart = Cart::getCartIdByOrderId($order->id);\n                            $customization_quantities = Customization::countQuantityByCart($id_cart);\n\n                            foreach ($productList as $key => $id_order_detail) {\n                                $qtyCancelProduct = abs($qtyList[$key]);\n                                if (!$qtyCancelProduct) {\n                                    $this->errors[] = $this->trans('No quantity has been selected for this product.', array(), 'Admin.Orderscustomers.Notification');\n                                }\n\n                                $order_detail = new OrderDetail($id_order_detail);\n                                $customization_quantity = 0;\n                                if (array_key_exists($order_detail->product_id, $customization_quantities) && array_key_exists($order_detail->product_attribute_id, $customization_quantities[$order_detail->product_id])) {\n                                    $customization_quantity = (int) $customization_quantities[$order_detail->product_id][$order_detail->product_attribute_id];\n                                }\n\n                                if (($order_detail->product_quantity - $customization_quantity - $order_detail->product_quantity_refunded - $order_detail->product_quantity_return) < $qtyCancelProduct) {\n                                    $this->errors[] = $this->trans('An invalid quantity was selected for this product.', array(), 'Admin.Orderscustomers.Notification');\n                                }\n                            }\n                        }\n                        if ($customizationList) {\n                            $customization_quantities = Customization::retrieveQuantitiesFromIds(array_keys($customizationList));\n\n                            foreach ($customizationList as $id_customization => $id_order_detail) {\n                                $qtyCancelProduct = abs($customizationQtyList[$id_customization]);\n                                $customization_quantity = $customization_quantities[$id_customization];\n\n                                if (!$qtyCancelProduct) {\n                                    $this->errors[] = $this->trans('No quantity has been selected for this product.', array(), 'Admin.Orderscustomers.Notification');\n                                }\n\n                                if ($qtyCancelProduct > ($customization_quantity['quantity'] - ($customization_quantity['quantity_refunded'] + $customization_quantity['quantity_returned']))) {\n                                    $this->errors[] = $this->trans('An invalid quantity was selected for this product.', array(), 'Admin.Orderscustomers.Notification');\n                                }\n                            }\n                        }\n\n                        if (!count($this->errors) && $productList) {\n                            foreach ($productList as $key => $id_order_detail) {\n                                $qty_cancel_product = abs($qtyList[$key]);\n                                $order_detail = new OrderDetail((int) ($id_order_detail));\n\n                                if (!$order->hasBeenDelivered() || ($order->hasBeenDelivered() && Tools::isSubmit('reinjectQuantities')) && $qty_cancel_product > 0) {\n                                    $this->reinjectQuantity($order_detail, $qty_cancel_product);\n                                }\n\n                                // Delete product\n                                $order_detail = new OrderDetail((int) $id_order_detail);\n                                if (!$order->deleteProduct($order, $order_detail, $qty_cancel_product)) {\n                                    $this->errors[] = $this->trans('An error occurred while attempting to delete the product.', array(), 'Admin.Orderscustomers.Notification') . ' <span class=\"bold\">' . $order_detail->product_name . '</span>';\n                                }\n                                // Update weight SUM\n                                $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n                                if (Validate::isLoadedObject($order_carrier)) {\n                                    $order_carrier->weight = (float) $order->getTotalWeight();\n                                    if ($order_carrier->update()) {\n                                        $order->weight = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $order_carrier->weight);\n                                    }\n                                }\n\n                                if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && StockAvailable::dependsOnStock($order_detail->product_id)) {\n                                    StockAvailable::synchronize($order_detail->product_id);\n                                }\n                                Hook::exec('actionProductCancel', array('order' => $order, 'id_order_detail' => (int) $id_order_detail), null, false, true, false, $order->id_shop);\n                            }\n                        }\n                        if (!count($this->errors) && $customizationList) {\n                            foreach ($customizationList as $id_customization => $id_order_detail) {\n                                $order_detail = new OrderDetail((int) ($id_order_detail));\n                                $qtyCancelProduct = abs($customizationQtyList[$id_customization]);\n                                if (!$order->deleteCustomization($id_customization, $qtyCancelProduct, $order_detail)) {\n                                    $this->errors[] = $this->trans('An error occurred while attempting to delete product customization.', array(), 'Admin.Orderscustomers.Notification') . ' ' . $id_customization;\n                                }\n                            }\n                        }\n                        // E-mail params\n                        if ((Tools::isSubmit('generateCreditSlip') || Tools::isSubmit('generateDiscount')) && !count($this->errors)) {\n                            $customer = new Customer((int) ($order->id_customer));\n                            $params['{lastname}'] = $customer->lastname;\n                            $params['{firstname}'] = $customer->firstname;\n                            $params['{id_order}'] = $order->id;\n                            $params['{order_name}'] = $order->getUniqReference();\n                        }\n\n                        // Generate credit slip\n                        if (Tools::isSubmit('generateCreditSlip') && !count($this->errors)) {\n                            $product_list = array();\n                            $amount = $order_detail->unit_price_tax_incl * $full_quantity_list[$id_order_detail];\n\n                            $choosen = false;\n                            if ((int) Tools::getValue('refund_total_voucher_off') == 1) {\n                                $amount -= $voucher = (float) Tools::getValue('order_discount_price');\n                            } elseif ((int) Tools::getValue('refund_total_voucher_off') == 2) {\n                                $choosen = true;\n                                $amount = $voucher = (float) Tools::getValue('refund_total_voucher_choose');\n                            }\n                            foreach ($full_product_list as $id_order_detail) {\n                                $order_detail = new OrderDetail((int) $id_order_detail);\n                                $product_list[$id_order_detail] = array(\n                                    'id_order_detail' => $id_order_detail,\n                                    'quantity' => $full_quantity_list[$id_order_detail],\n                                    'unit_price' => $order_detail->unit_price_tax_excl,\n                                    'amount' => isset($amount) ? $amount : $order_detail->unit_price_tax_incl * $full_quantity_list[$id_order_detail],\n                                );\n                            }\n\n                            $shipping = Tools::isSubmit('shippingBack') ? null : false;\n\n                            if (!OrderSlip::create($order, $product_list, $shipping, $voucher, $choosen)) {\n                                $this->errors[] = $this->trans('A credit slip cannot be generated.', array(), 'Admin.Orderscustomers.Notification');\n                            } else {\n                                Hook::exec('actionOrderSlipAdd', array('order' => $order, 'productList' => $full_product_list, 'qtyList' => $full_quantity_list), null, false, true, false, $order->id_shop);\n                                $orderLanguage = new Language((int) $order->id_lang);\n                                @Mail::Send(\n                                    (int) $order->id_lang,\n                                    'credit_slip',\n                                    $this->trans(\n                                        'New credit slip regarding your order',\n                                        array(),\n                                        'Emails.Subject',\n                                        $orderLanguage->locale\n                                    ),\n                                    $params,\n                                    $customer->email,\n                                    $customer->firstname . ' ' . $customer->lastname,\n                                    null,\n                                    null,\n                                    null,\n                                    null,\n                                    _PS_MAIL_DIR_,\n                                    true,\n                                    (int) $order->id_shop\n                                );\n                            }\n                        }\n\n                        // Generate voucher\n                        if (Tools::isSubmit('generateDiscount') && !count($this->errors)) {\n                            $cartrule = new CartRule();\n                            $language_ids = Language::getIDs((bool) $order);\n                            $cartrule->description = $this->trans('Credit card slip for order #%d', array('#%d' => $order->id), 'Admin.Orderscustomers.Feature');\n                            foreach ($language_ids as $id_lang) {\n                                // Define a temporary name\n                                $cartrule->name[$id_lang] = 'V0C' . (int) ($order->id_customer) . 'O' . (int) ($order->id);\n                            }\n                            // Define a temporary code\n                            $cartrule->code = 'V0C' . (int) ($order->id_customer) . 'O' . (int) ($order->id);\n\n                            $cartrule->quantity = 1;\n                            $cartrule->quantity_per_user = 1;\n                            // Specific to the customer\n                            $cartrule->id_customer = $order->id_customer;\n                            $now = time();\n                            $cartrule->date_from = date('Y-m-d H:i:s', $now);\n                            $cartrule->date_to = date('Y-m-d H:i:s', $now + (3600 * 24 * 365.25)); /* 1 year */\n                            $cartrule->active = 1;\n\n                            $products = $order->getProducts(false, $full_product_list, $full_quantity_list);\n\n                            $total = 0;\n                            foreach ($products as $product) {\n                                $total += $product['unit_price_tax_incl'] * $product['product_quantity'];\n                            }\n\n                            if (Tools::isSubmit('shippingBack')) {\n                                $total += $order->total_shipping;\n                            }\n\n                            if ((int) Tools::getValue('refund_total_voucher_off') == 1) {\n                                $total -= (float) Tools::getValue('order_discount_price');\n                            } elseif ((int) Tools::getValue('refund_total_voucher_off') == 2) {\n                                $total = (float) Tools::getValue('refund_total_voucher_choose');\n                            }\n\n                            $cartrule->reduction_amount = $total;\n                            $cartrule->reduction_tax = true;\n                            $cartrule->minimum_amount_currency = $order->id_currency;\n                            $cartrule->reduction_currency = $order->id_currency;\n\n                            if (!$cartrule->add()) {\n                                $this->errors[] = $this->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');\n                            } else {\n                                // Update the voucher code and name\n                                foreach ($language_ids as $id_lang) {\n                                    $cartrule->name[$id_lang] = 'V' . (int) ($cartrule->id) . 'C' . (int) ($order->id_customer) . 'O' . $order->id;\n                                }\n                                $cartrule->code = 'V' . (int) ($cartrule->id) . 'C' . (int) ($order->id_customer) . 'O' . $order->id;\n                                if (!$cartrule->update()) {\n                                    $this->errors[] = $this->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');\n                                } else {\n                                    $currency = $this->context->currency;\n                                    $params['{voucher_amount}'] = Tools::displayPrice($cartrule->reduction_amount, $currency, false);\n                                    $params['{voucher_num}'] = $cartrule->code;\n                                    $orderLanguage = new Language((int) $order->id_lang);\n                                    @Mail::Send(\n                                        (int) $order->id_lang,\n                                        'voucher',\n                                        $this->trans(\n                                            'New voucher for your order #%s',\n                                            array($order->reference),\n                                            'Emails.Subject',\n                                            $orderLanguage->locale\n                                        ),\n                                        $params,\n                                        $customer->email,\n                                        $customer->firstname . ' ' . $customer->lastname,\n                                        null,\n                                        null,\n                                        null,\n                                        null,\n                                        _PS_MAIL_DIR_,\n                                        true,\n                                        (int) $order->id_shop\n                                    );\n                                }\n                            }\n                        }\n                    } else {\n                        $this->errors[] = $this->trans('No product or quantity has been selected.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n\n                    // Redirect if no errors\n                    if (!count($this->errors)) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=31&token=' . $this->token);\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('messageReaded')) {\n            Message::markAsReaded(Tools::getValue('messageReaded'), $this->context->employee->id);\n        } elseif (Tools::isSubmit('submitAddPayment') && isset($order)) {\n            if ($this->access('edit')) {\n                $amount = str_replace(',', '.', Tools::getValue('payment_amount'));\n                $currency = new Currency(Tools::getValue('payment_currency'));\n                $order_has_invoice = $order->hasInvoice();\n                if ($order_has_invoice) {\n                    $order_invoice = new OrderInvoice(Tools::getValue('payment_invoice'));\n                } else {\n                    $order_invoice = null;\n                }\n\n                if (!Validate::isLoadedObject($order)) {\n                    $this->errors[] = $this->trans('The order cannot be found', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Validate::isNegativePrice($amount) || !(float) $amount) {\n                    $this->errors[] = $this->trans('The amount is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Validate::isGenericName(Tools::getValue('payment_method'))) {\n                    $this->errors[] = $this->trans('The selected payment method is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Validate::isString(Tools::getValue('payment_transaction_id'))) {\n                    $this->errors[] = $this->trans('The transaction ID is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Validate::isLoadedObject($currency)) {\n                    $this->errors[] = $this->trans('The selected currency is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif ($order_has_invoice && !Validate::isLoadedObject($order_invoice)) {\n                    $this->errors[] = $this->trans('The invoice is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                } elseif (!Validate::isDate(Tools::getValue('payment_date'))) {\n                    $this->errors[] = $this->trans('The date is invalid', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    if (!$order->addOrderPayment($amount, Tools::getValue('payment_method'), Tools::getValue('payment_transaction_id'), $currency, Tools::getValue('payment_date'), $order_invoice)) {\n                        $this->errors[] = $this->trans('An error occurred during payment.', array(), 'Admin.Orderscustomers.Notification');\n                    } else {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitEditNote')) {\n            $note = Tools::getValue('note');\n            $order_invoice = new OrderInvoice((int) Tools::getValue('id_order_invoice'));\n            if (Validate::isLoadedObject($order_invoice) && Validate::isCleanHtml($note)) {\n                if ($this->access('edit')) {\n                    $order_invoice->note = $note;\n                    if ($order_invoice->save()) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order_invoice->id_order . '&vieworder&conf=4&token=' . $this->token);\n                    } else {\n                        $this->errors[] = $this->trans('The invoice note was not saved.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n                }\n            } else {\n                $this->errors[] = $this->trans('Failed to upload the invoice and edit its note.', array(), 'Admin.Orderscustomers.Notification');\n            }\n        } elseif (Tools::isSubmit('submitAddOrder') && ($id_cart = Tools::getValue('id_cart')) &&\n            ($module_name = Tools::getValue('payment_module_name')) &&\n            ($id_order_state = Tools::getValue('id_order_state')) && Validate::isModuleName($module_name)) {\n            if ($this->access('edit')) {\n                if (!Configuration::get('PS_CATALOG_MODE')) {\n                    $payment_module = Module::getInstanceByName($module_name);\n                } else {\n                    $payment_module = new BoOrder();\n                }\n\n                $cart = new Cart((int) $id_cart);\n                Context::getContext()->currency = new Currency((int) $cart->id_currency);\n                Context::getContext()->customer = new Customer((int) $cart->id_customer);\n\n                $bad_delivery = false;\n                if (($bad_delivery = (bool) !Address::isCountryActiveById((int) $cart->id_address_delivery))\n                    || !Address::isCountryActiveById((int) $cart->id_address_invoice)) {\n                    if ($bad_delivery) {\n                        $this->errors[] = $this->trans('This delivery address country is not active.', array(), 'Admin.Orderscustomers.Notification');\n                    } else {\n                        $this->errors[] = $this->trans('This invoice address country is not active.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                } else {\n                    $employee = new Employee((int) Context::getContext()->cookie->id_employee);\n                    $payment_module->validateOrder(\n                        (int) $cart->id,\n                        (int) $id_order_state,\n                        $cart->getOrderTotal(true, Cart::BOTH),\n                        $payment_module->displayName,\n                        $this->trans('Manual order -- Employee:', array(), 'Admin.Orderscustomers.Feature') . ' ' .\n                        substr($employee->firstname, 0, 1) . '. ' . $employee->lastname,\n                        array(),\n                        null,\n                        false,\n                        $cart->secure_key\n                    );\n                    if ($payment_module->currentOrder) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $payment_module->currentOrder . '&vieworder' . '&token=' . $this->token);\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to add this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif ((Tools::isSubmit('submitAddressShipping') || Tools::isSubmit('submitAddressInvoice')) && isset($order)) {\n            if ($this->access('edit')) {\n                $address = new Address(Tools::getValue('id_address'));\n                $cart = Cart::getCartByOrderId($order->id);\n                if (Validate::isLoadedObject($address)) {\n                    // Update the address on order and cart\n                    if (Tools::isSubmit('submitAddressShipping')) {\n                        $order->id_address_delivery = $address->id;\n                        $cart->id_address_delivery = $address->id;\n                    } elseif (Tools::isSubmit('submitAddressInvoice')) {\n                        $order->id_address_invoice = $address->id;\n                        $cart->id_address_invoice = $address->id;\n                    }\n                    $order->update();\n                    $order->refreshShippingCost();\n                    $cart->update();\n\n                    Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n                } else {\n                    $this->errors[] = $this->trans('This address can\\'t be loaded', array(), 'Admin.Orderscustomers.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitChangeCurrency') && isset($order)) {\n            if ($this->access('edit')) {\n                if (Tools::getValue('new_currency') != $order->id_currency && !$order->valid) {\n                    $old_currency = new Currency($order->id_currency);\n                    $currency = new Currency(Tools::getValue('new_currency'));\n                    if (!Validate::isLoadedObject($currency)) {\n                        throw new PrestaShopException('Can\\'t load Currency object');\n                    }\n\n                    // Update order detail amount\n                    foreach ($order->getOrderDetailList() as $row) {\n                        $order_detail = new OrderDetail($row['id_order_detail']);\n                        $fields = array(\n                            'ecotax',\n                            'product_price',\n                            'reduction_amount',\n                            'total_shipping_price_tax_excl',\n                            'total_shipping_price_tax_incl',\n                            'total_price_tax_incl',\n                            'total_price_tax_excl',\n                            'product_quantity_discount',\n                            'purchase_supplier_price',\n                            'reduction_amount',\n                            'reduction_amount_tax_incl',\n                            'reduction_amount_tax_excl',\n                            'unit_price_tax_incl',\n                            'unit_price_tax_excl',\n                            'original_product_price',\n                        );\n                        foreach ($fields as $field) {\n                            $order_detail->{$field} = Tools::convertPriceFull($order_detail->{$field}, $old_currency, $currency);\n                        }\n\n                        $order_detail->update();\n                        $order_detail->updateTaxAmount($order);\n                    }\n\n                    foreach ($order->getCartRules() as $cartRule) {\n                        $orderCartRule = new OrderCartRule((int) $cartRule['id_order_cart_rule']);\n                        if ($cartRule['value'] > 0) {\n                            $orderCartRule->value = Tools::convertPriceFull(\n                                (float) $cartRule['value'],\n                                $old_currency,\n                                $currency\n                            );\n                        }\n                        if ($cartRule['value_tax_excl'] > 0) {\n                            $orderCartRule->value_tax_excl = Tools::convertPriceFull(\n                                (float) $cartRule['value_tax_excl'],\n                                $old_currency,\n                                $currency\n                            );\n                        }\n                        $orderCartRule->update();\n                    }\n\n                    $id_order_carrier = (int) $order->getIdOrderCarrier();\n                    if ($id_order_carrier) {\n                        $order_carrier = $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n                        $order_carrier->shipping_cost_tax_excl = (float) Tools::convertPriceFull($order_carrier->shipping_cost_tax_excl, $old_currency, $currency);\n                        $order_carrier->shipping_cost_tax_incl = (float) Tools::convertPriceFull($order_carrier->shipping_cost_tax_incl, $old_currency, $currency);\n                        $order_carrier->update();\n                    }\n\n                    // Update order && order_invoice amount\n                    $fields = array(\n                        'total_discounts',\n                        'total_discounts_tax_incl',\n                        'total_discounts_tax_excl',\n                        'total_discount_tax_excl',\n                        'total_discount_tax_incl',\n                        'total_paid',\n                        'total_paid_tax_incl',\n                        'total_paid_tax_excl',\n                        'total_paid_real',\n                        'total_products',\n                        'total_products_wt',\n                        'total_shipping',\n                        'total_shipping_tax_incl',\n                        'total_shipping_tax_excl',\n                        'total_wrapping',\n                        'total_wrapping_tax_incl',\n                        'total_wrapping_tax_excl',\n                    );\n\n                    $invoices = $order->getInvoicesCollection();\n                    if ($invoices) {\n                        foreach ($invoices as $invoice) {\n                            foreach ($fields as $field) {\n                                if (isset($invoice->$field)) {\n                                    $invoice->{$field} = Tools::convertPriceFull($invoice->{$field}, $old_currency, $currency);\n                                }\n                            }\n                            $invoice->save();\n                        }\n                    }\n\n                    foreach ($fields as $field) {\n                        if (isset($order->$field)) {\n                            $order->{$field} = Tools::convertPriceFull($order->{$field}, $old_currency, $currency);\n                        }\n                    }\n\n                    // Update currency in order\n                    $order->id_currency = $currency->id;\n                    // Update exchange rate\n                    $order->conversion_rate = (float) $currency->conversion_rate;\n                    $order->update();\n                } else {\n                    $this->errors[] = $this->trans('You cannot change the currency.', array(), 'Admin.Orderscustomers.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitGenerateInvoice') && isset($order)) {\n            if (!Configuration::get('PS_INVOICE', null, null, $order->id_shop)) {\n                $this->errors[] = $this->trans('Invoice management has been disabled.', array(), 'Admin.Orderscustomers.Notification');\n            } elseif ($order->hasInvoice()) {\n                $this->errors[] = $this->trans('This order already has an invoice.', array(), 'Admin.Orderscustomers.Notification');\n            } else {\n                $order->setInvoice(true);\n                Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n            }\n        } elseif (Tools::isSubmit('submitDeleteVoucher') && isset($order)) {\n            if ($this->access('edit')) {\n                $order_cart_rule = new OrderCartRule(Tools::getValue('id_order_cart_rule'));\n                if (Validate::isLoadedObject($order_cart_rule) && $order_cart_rule->id_order == $order->id) {\n                    if ($order_cart_rule->id_order_invoice) {\n                        $order_invoice = new OrderInvoice($order_cart_rule->id_order_invoice);\n                        if (!Validate::isLoadedObject($order_invoice)) {\n                            throw new PrestaShopException('Can\\'t load Order Invoice object');\n                        }\n\n                        // Update amounts of Order Invoice\n                        $order_invoice->total_discount_tax_excl -= $order_cart_rule->value_tax_excl;\n                        $order_invoice->total_discount_tax_incl -= $order_cart_rule->value;\n\n                        $order_invoice->total_paid_tax_excl += $order_cart_rule->value_tax_excl;\n                        $order_invoice->total_paid_tax_incl += $order_cart_rule->value;\n\n                        // Update Order Invoice\n                        $order_invoice->update();\n                    }\n\n                    // Update amounts of order\n                    $order->total_discounts -= $order_cart_rule->value;\n                    $order->total_discounts_tax_incl -= $order_cart_rule->value;\n                    $order->total_discounts_tax_excl -= $order_cart_rule->value_tax_excl;\n\n                    $order->total_paid += $order_cart_rule->value;\n                    $order->total_paid_tax_incl += $order_cart_rule->value;\n                    $order->total_paid_tax_excl += $order_cart_rule->value_tax_excl;\n\n                    // Delete Order Cart Rule and update Order\n                    $order_cart_rule->delete();\n                    $order->update();\n                    Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n                } else {\n                    $this->errors[] = $this->trans('You cannot edit this cart rule.', array(), 'Admin.Orderscustomers.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitNewVoucher') && isset($order)) {\n            if ($this->access('edit')) {\n                if (!Tools::getValue('discount_name')) {\n                    $this->errors[] = $this->trans('You must specify a name in order to create a new discount.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    if ($order->hasInvoice()) {\n                        // If the discount is for only one invoice\n                        if (!Tools::isSubmit('discount_all_invoices')) {\n                            $order_invoice = new OrderInvoice(Tools::getValue('discount_invoice'));\n                            if (!Validate::isLoadedObject($order_invoice)) {\n                                throw new PrestaShopException('Can\\'t load Order Invoice object');\n                            }\n                        }\n                    }\n\n                    $cart_rules = array();\n                    $discount_value = (float) str_replace(',', '.', Tools::getValue('discount_value'));\n                    switch (Tools::getValue('discount_type')) {\n                        // Percent type\n                        case 1:\n                            if ($discount_value < 100) {\n                                if (isset($order_invoice)) {\n                                    $cart_rules[$order_invoice->id]['value_tax_incl'] = Tools::ps_round($order_invoice->total_paid_tax_incl * $discount_value / 100, 2);\n                                    $cart_rules[$order_invoice->id]['value_tax_excl'] = Tools::ps_round($order_invoice->total_paid_tax_excl * $discount_value / 100, 2);\n\n                                    // Update OrderInvoice\n                                    $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                } elseif ($order->hasInvoice()) {\n                                    $order_invoices_collection = $order->getInvoicesCollection();\n                                    foreach ($order_invoices_collection as $order_invoice) {\n                                        /* @var OrderInvoice $order_invoice */\n                                        $cart_rules[$order_invoice->id]['value_tax_incl'] = Tools::ps_round($order_invoice->total_paid_tax_incl * $discount_value / 100, 2);\n                                        $cart_rules[$order_invoice->id]['value_tax_excl'] = Tools::ps_round($order_invoice->total_paid_tax_excl * $discount_value / 100, 2);\n\n                                        // Update OrderInvoice\n                                        $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                    }\n                                } else {\n                                    $cart_rules[0]['value_tax_incl'] = Tools::ps_round($order->total_paid_tax_incl * $discount_value / 100, 2);\n                                    $cart_rules[0]['value_tax_excl'] = Tools::ps_round($order->total_paid_tax_excl * $discount_value / 100, 2);\n                                }\n                            } else {\n                                $this->errors[] = $this->trans('The discount value is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                            }\n\n                            break;\n                        // Amount type\n                        case 2:\n                            if (isset($order_invoice)) {\n                                if ($discount_value > $order_invoice->total_paid_tax_incl) {\n                                    $this->errors[] = $this->trans('The discount value is greater than the order invoice total.', array(), 'Admin.Orderscustomers.Notification');\n                                } else {\n                                    $cart_rules[$order_invoice->id]['value_tax_incl'] = Tools::ps_round($discount_value, 2);\n                                    $cart_rules[$order_invoice->id]['value_tax_excl'] = Tools::ps_round($discount_value / (1 + ($order->getTaxesAverageUsed() / 100)), 2);\n\n                                    // Update OrderInvoice\n                                    $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                }\n                            } elseif ($order->hasInvoice()) {\n                                $order_invoices_collection = $order->getInvoicesCollection();\n                                foreach ($order_invoices_collection as $order_invoice) {\n                                    /** @var OrderInvoice $order_invoice */\n                                    if ($discount_value > $order_invoice->total_paid_tax_incl) {\n                                        $this->errors[] = $this->trans('The discount value is greater than the order invoice total.', array(), 'Admin.Orderscustomers.Notification') . $order_invoice->getInvoiceNumberFormatted(Context::getContext()->language->id, (int) $order->id_shop) . ')';\n                                    } else {\n                                        $cart_rules[$order_invoice->id]['value_tax_incl'] = Tools::ps_round($discount_value, 2);\n                                        $cart_rules[$order_invoice->id]['value_tax_excl'] = Tools::ps_round($discount_value / (1 + ($order->getTaxesAverageUsed() / 100)), 2);\n\n                                        // Update OrderInvoice\n                                        $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                    }\n                                }\n                            } else {\n                                if ($discount_value > $order->total_paid_tax_incl) {\n                                    $this->errors[] = $this->trans('The discount value is greater than the order total.', array(), 'Admin.Orderscustomers.Notification');\n                                } else {\n                                    $cart_rules[0]['value_tax_incl'] = Tools::ps_round($discount_value, 2);\n                                    $cart_rules[0]['value_tax_excl'] = Tools::ps_round($discount_value / (1 + ($order->getTaxesAverageUsed() / 100)), 2);\n                                }\n                            }\n\n                            break;\n                        // Free shipping type\n                        case 3:\n                            if (isset($order_invoice)) {\n                                if ($order_invoice->total_shipping_tax_incl > 0) {\n                                    $cart_rules[$order_invoice->id]['value_tax_incl'] = $order_invoice->total_shipping_tax_incl;\n                                    $cart_rules[$order_invoice->id]['value_tax_excl'] = $order_invoice->total_shipping_tax_excl;\n\n                                    // Update OrderInvoice\n                                    $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                }\n                            } elseif ($order->hasInvoice()) {\n                                $order_invoices_collection = $order->getInvoicesCollection();\n                                foreach ($order_invoices_collection as $order_invoice) {\n                                    /** @var OrderInvoice $order_invoice */\n                                    if ($order_invoice->total_shipping_tax_incl <= 0) {\n                                        continue;\n                                    }\n                                    $cart_rules[$order_invoice->id]['value_tax_incl'] = $order_invoice->total_shipping_tax_incl;\n                                    $cart_rules[$order_invoice->id]['value_tax_excl'] = $order_invoice->total_shipping_tax_excl;\n\n                                    // Update OrderInvoice\n                                    $this->applyDiscountOnInvoice($order_invoice, $cart_rules[$order_invoice->id]['value_tax_incl'], $cart_rules[$order_invoice->id]['value_tax_excl']);\n                                }\n                            } else {\n                                $cart_rules[0]['value_tax_incl'] = $order->total_shipping_tax_incl;\n                                $cart_rules[0]['value_tax_excl'] = $order->total_shipping_tax_excl;\n                            }\n\n                            break;\n                        default:\n                            $this->errors[] = $this->trans('The discount type is invalid.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n\n                    $res = true;\n                    foreach ($cart_rules as &$cart_rule) {\n                        $cartRuleObj = new CartRule();\n                        $cartRuleObj->date_from = date('Y-m-d H:i:s', strtotime('-1 hour', strtotime($order->date_add)));\n                        $cartRuleObj->date_to = date('Y-m-d H:i:s', strtotime('+1 hour'));\n                        $cartRuleObj->name[Configuration::get('PS_LANG_DEFAULT')] = Tools::getValue('discount_name');\n                        $cartRuleObj->quantity = 0;\n                        $cartRuleObj->quantity_per_user = 1;\n                        if (Tools::getValue('discount_type') == 1) {\n                            $cartRuleObj->reduction_percent = $discount_value;\n                        } elseif (Tools::getValue('discount_type') == 2) {\n                            $cartRuleObj->reduction_amount = $cart_rule['value_tax_excl'];\n                        } elseif (Tools::getValue('discount_type') == 3) {\n                            $cartRuleObj->free_shipping = 1;\n                        }\n                        $cartRuleObj->active = 0;\n                        if ($res = $cartRuleObj->add()) {\n                            $cart_rule['id'] = $cartRuleObj->id;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    if ($res) {\n                        foreach ($cart_rules as $id_order_invoice => $cart_rule) {\n                            // Create OrderCartRule\n                            $order_cart_rule = new OrderCartRule();\n                            $order_cart_rule->id_order = $order->id;\n                            $order_cart_rule->id_cart_rule = $cart_rule['id'];\n                            $order_cart_rule->id_order_invoice = $id_order_invoice;\n                            $order_cart_rule->name = Tools::getValue('discount_name');\n                            $order_cart_rule->value = $cart_rule['value_tax_incl'];\n                            $order_cart_rule->value_tax_excl = $cart_rule['value_tax_excl'];\n                            $res &= $order_cart_rule->add();\n\n                            $order->total_discounts += $order_cart_rule->value;\n                            $order->total_discounts_tax_incl += $order_cart_rule->value;\n                            $order->total_discounts_tax_excl += $order_cart_rule->value_tax_excl;\n                            $order->total_paid -= $order_cart_rule->value;\n                            $order->total_paid_tax_incl -= $order_cart_rule->value;\n                            $order->total_paid_tax_excl -= $order_cart_rule->value_tax_excl;\n                        }\n\n                        // Update Order\n                        $res &= $order->update();\n                    }\n\n                    if ($res) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=4&token=' . $this->token);\n                    } else {\n                        $this->errors[] = $this->trans('An error occurred during the OrderCartRule creation', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('sendStateEmail') && Tools::getValue('sendStateEmail') > 0 && Tools::getValue('id_order') > 0) {\n            if ($this->access('edit')) {\n                $order_state = new OrderState((int) Tools::getValue('sendStateEmail'));\n\n                if (!Validate::isLoadedObject($order_state)) {\n                    $this->errors[] = $this->trans('An error occurred while loading order status.', array(), 'Admin.Orderscustomers.Notification');\n                } else {\n                    $history = new OrderHistory((int) Tools::getValue('id_order_history'));\n\n                    $carrier = new Carrier($order->id_carrier, $order->id_lang);\n                    $templateVars = array();\n                    if ($order_state->id == Configuration::get('PS_OS_SHIPPING') && $order->shipping_number) {\n                        $templateVars = array('{followup}' => str_replace('@', $order->shipping_number, $carrier->url));\n                    }\n\n                    if ($history->sendEmail($order, $templateVars)) {\n                        Tools::redirectAdmin(self::$currentIndex . '&id_order=' . $order->id . '&vieworder&conf=10&token=' . $this->token);\n                    } else {\n                        $this->errors[] = $this->trans('An error occurred while sending the e-mail to the customer.', array(), 'Admin.Orderscustomers.Notification');\n                    }\n                }\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        }\n\n        parent::postProcess();\n    }\n\n    public function renderKpis()\n    {\n        $time = time();\n        $kpis = array();\n\n        /* The data generation is located in AdminStatsControllerCore */\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-conversion-rate';\n        $helper->icon = 'icon-sort-by-attributes-alt';\n        //$helper->chart = true;\n        $helper->color = 'color1';\n        $helper->title = $this->trans('Conversion Rate', array(), 'Admin.Global');\n        $helper->subtitle = $this->trans('30 days', array(), 'Admin.Global');\n        if (ConfigurationKPI::get('CONVERSION_RATE') !== false) {\n            $helper->value = ConfigurationKPI::get('CONVERSION_RATE');\n        }\n        if (ConfigurationKPI::get('CONVERSION_RATE_CHART') !== false) {\n            $helper->data = ConfigurationKPI::get('CONVERSION_RATE_CHART');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=conversion_rate';\n        $helper->refresh = (bool) (ConfigurationKPI::get('CONVERSION_RATE_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-carts';\n        $helper->icon = 'icon-shopping-cart';\n        $helper->color = 'color2';\n        $helper->title = $this->trans('Abandoned Carts', array(), 'Admin.Global');\n        $helper->subtitle = $this->trans('Today', array(), 'Admin.Global');\n        $helper->href = $this->context->link->getAdminLink('AdminCarts') . '&action=filterOnlyAbandonedCarts';\n        if (ConfigurationKPI::get('ABANDONED_CARTS') !== false) {\n            $helper->value = ConfigurationKPI::get('ABANDONED_CARTS');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=abandoned_cart';\n        $helper->refresh = (bool) (ConfigurationKPI::get('ABANDONED_CARTS_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-average-order';\n        $helper->icon = 'icon-money';\n        $helper->color = 'color3';\n        $helper->title = $this->trans('Average Order Value', array(), 'Admin.Global');\n        $helper->subtitle = $this->trans('30 days', array(), 'Admin.Global');\n        if (ConfigurationKPI::get('AVG_ORDER_VALUE') !== false) {\n            $helper->value = $this->trans('%amount% tax excl.', array('%amount%' => ConfigurationKPI::get('AVG_ORDER_VALUE')), 'Admin.Orderscustomers.Feature');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=average_order_value';\n        $helper->refresh = (bool) (ConfigurationKPI::get('AVG_ORDER_VALUE_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-net-profit-visit';\n        $helper->icon = 'icon-user';\n        $helper->color = 'color4';\n        $helper->title = $this->trans('Net Profit per Visit', array(), 'Admin.Orderscustomers.Feature');\n        $helper->subtitle = $this->trans('30 days', array(), 'Admin.Orderscustomers.Feature');\n        if (ConfigurationKPI::get('NETPROFIT_VISIT') !== false) {\n            $helper->value = ConfigurationKPI::get('NETPROFIT_VISIT');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=netprofit_visit';\n        $helper->refresh = (bool) (ConfigurationKPI::get('NETPROFIT_VISIT_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpiRow();\n        $helper->kpis = $kpis;\n\n        return $helper->generate();\n    }\n\n    public function renderView()\n    {\n        $order = new Order(Tools::getValue('id_order'));\n        if (!Validate::isLoadedObject($order)) {\n            $this->errors[] = $this->trans('The order cannot be found within your database.', array(), 'Admin.Orderscustomers.Notification');\n        }\n\n        $customer = new Customer($order->id_customer);\n        $carrier = new Carrier($order->id_carrier);\n        $products = $this->getProducts($order);\n        $currency = new Currency((int) $order->id_currency);\n        // Carrier module call\n        $carrier_module_call = null;\n        if ($carrier->is_module) {\n            $module = Module::getInstanceByName($carrier->external_module_name);\n            if (method_exists($module, 'displayInfoByCart')) {\n                $carrier_module_call = call_user_func(array($module, 'displayInfoByCart'), $order->id_cart);\n            }\n        }\n\n        // Retrieve addresses information\n        $addressInvoice = new Address($order->id_address_invoice, $this->context->language->id);\n        if (Validate::isLoadedObject($addressInvoice) && $addressInvoice->id_state) {\n            $invoiceState = new State((int) $addressInvoice->id_state);\n        }\n\n        if ($order->id_address_invoice == $order->id_address_delivery) {\n            $addressDelivery = $addressInvoice;\n            if (isset($invoiceState)) {\n                $deliveryState = $invoiceState;\n            }\n        } else {\n            $addressDelivery = new Address($order->id_address_delivery, $this->context->language->id);\n            if (Validate::isLoadedObject($addressDelivery) && $addressDelivery->id_state) {\n                $deliveryState = new State((int) ($addressDelivery->id_state));\n            }\n        }\n\n        $this->toolbar_title = $this->trans(\n            'Order #%id% (%ref%) - %firstname% %lastname%',\n            array(\n                '%id%' => $order->id,\n                '%ref%' => $order->reference,\n                '%firstname%' => $customer->firstname,\n                '%lastname%' => $customer->lastname,\n            ),\n            'Admin.Orderscustomers.Feature'\n        );\n        if (Shop::isFeatureActive()) {\n            $shop = new Shop((int) $order->id_shop);\n            $this->toolbar_title .= ' - ' . $this->trans('Shop: %shop_name%', array('%shop_name%' => $shop->name), 'Admin.Orderscustomers.Feature');\n        }\n\n        // gets warehouses to ship products, if and only if advanced stock management is activated\n        $warehouse_list = null;\n\n        $order_details = $order->getOrderDetailList();\n        foreach ($order_details as $order_detail) {\n            $product = new Product($order_detail['product_id']);\n\n            if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')\n                && $product->advanced_stock_management) {\n                $warehouses = Warehouse::getWarehousesByProductId($order_detail['product_id'], $order_detail['product_attribute_id']);\n                foreach ($warehouses as $warehouse) {\n                    if (!isset($warehouse_list[$warehouse['id_warehouse']])) {\n                        $warehouse_list[$warehouse['id_warehouse']] = $warehouse;\n                    }\n                }\n            }\n        }\n\n        $payment_methods = array();\n        foreach (PaymentModule::getInstalledPaymentModules() as $payment) {\n            $module = Module::getInstanceByName($payment['name']);\n            if (Validate::isLoadedObject($module) && $module->active) {\n                $payment_methods[] = $module->displayName;\n            }\n        }\n\n        // display warning if there are products out of stock\n        $display_out_of_stock_warning = false;\n        $current_order_state = $order->getCurrentOrderState();\n        if (Configuration::get('PS_STOCK_MANAGEMENT') && (!Validate::isLoadedObject($current_order_state) || ($current_order_state->delivery != 1 && $current_order_state->shipped != 1))) {\n            $display_out_of_stock_warning = true;\n        }\n\n        // products current stock informations (from stock_available)\n        $stockLocationIsAvailable = false;\n        foreach ($products as &$product) {\n            // Get total customized quantity for current product\n            $customized_product_quantity = 0;\n\n            if (is_array($product['customizedDatas'])) {\n                foreach ($product['customizedDatas'] as $customizationPerAddress) {\n                    foreach ($customizationPerAddress as $customizationId => $customization) {\n                        $customized_product_quantity += (int) $customization['quantity'];\n                    }\n                }\n            }\n\n            $product['customized_product_quantity'] = $customized_product_quantity;\n            $product['current_stock'] = StockAvailable::getQuantityAvailableByProduct($product['product_id'], $product['product_attribute_id'], $product['id_shop']);\n            $resume = OrderSlip::getProductSlipResume($product['id_order_detail']);\n            $product['quantity_refundable'] = $product['product_quantity'] - $resume['product_quantity'];\n            $product['amount_refundable'] = $product['total_price_tax_excl'] - $resume['amount_tax_excl'];\n            $product['amount_refundable_tax_incl'] = $product['total_price_tax_incl'] - $resume['amount_tax_incl'];\n            $product['amount_refund'] = $order->getTaxCalculationMethod() ? Tools::displayPrice($resume['amount_tax_excl'], $currency) : Tools::displayPrice($resume['amount_tax_incl'], $currency);\n            $product['refund_history'] = OrderSlip::getProductSlipDetail($product['id_order_detail']);\n            $product['return_history'] = OrderReturn::getProductReturnDetail($product['id_order_detail']);\n\n            // if the current stock requires a warning\n            if ($product['current_stock'] <= 0 && $display_out_of_stock_warning) {\n                $this->displayWarning($this->trans('This product is out of stock: ', array(), 'Admin.Orderscustomers.Notification') . ' ' . $product['product_name']);\n            }\n            if ($product['id_warehouse'] != 0) {\n                $warehouse = new Warehouse((int) $product['id_warehouse']);\n                $product['warehouse_name'] = $warehouse->name;\n                $warehouse_location = WarehouseProductLocation::getProductLocation($product['product_id'], $product['product_attribute_id'], $product['id_warehouse']);\n                if (!empty($warehouse_location)) {\n                    $product['warehouse_location'] = $warehouse_location;\n                } else {\n                    $product['warehouse_location'] = false;\n                }\n            } else {\n                $product['warehouse_name'] = '--';\n                $product['warehouse_location'] = false;\n            }\n\n            if (!empty($product['location'])) {\n                $stockLocationIsAvailable = true;\n            }\n        }\n\n        // Package management for order\n        foreach ($products as &$product) {\n            $pack_items = $product['cache_is_pack'] ? Pack::getItemTable($product['id_product'], $this->context->language->id, true) : array();\n            foreach ($pack_items as &$pack_item) {\n                $pack_item['current_stock'] = StockAvailable::getQuantityAvailableByProduct($pack_item['id_product'], $pack_item['id_product_attribute'], $pack_item['id_shop']);\n                // if the current stock requires a warning\n                if ($product['current_stock'] <= 0 && $display_out_of_stock_warning) {\n                    $this->displayWarning($this->trans('This product, included in package (' . $product['product_name'] . ') is out of stock: ', array(), 'Admin.Orderscustomers.Notification') . ' ' . $pack_item['product_name']);\n                }\n                $this->setProductImageInformations($pack_item);\n                if ($pack_item['image'] != null) {\n                    $name = 'product_mini_' . (int) $pack_item['id_product'] . (isset($pack_item['id_product_attribute']) ? '_' . (int) $pack_item['id_product_attribute'] : '') . '.jpg';\n                    // generate image cache, only for back office\n                    $pack_item['image_tag'] = ImageManager::thumbnail(_PS_IMG_DIR_ . 'p/' . $pack_item['image']->getExistingImgPath() . '.jpg', $name, 45, 'jpg');\n                    if (file_exists(_PS_TMP_IMG_DIR_ . $name)) {\n                        $pack_item['image_size'] = getimagesize(_PS_TMP_IMG_DIR_ . $name);\n                    } else {\n                        $pack_item['image_size'] = false;\n                    }\n                }\n            }\n            $product['pack_items'] = $pack_items;\n        }\n\n        $gender = new Gender((int) $customer->id_gender, $this->context->language->id);\n\n        $history = $order->getHistory($this->context->language->id);\n\n        foreach ($history as &$order_state) {\n            $order_state['text-color'] = Tools::getBrightness($order_state['color']) < 128 ? 'white' : 'black';\n        }\n\n        $shipping_refundable_tax_excl = $order->total_shipping_tax_excl;\n        $shipping_refundable_tax_incl = $order->total_shipping_tax_incl;\n        $slips = OrderSlip::getOrdersSlip($customer->id, $order->id);\n        foreach ($slips as $slip) {\n            $shipping_refundable_tax_excl -= $slip['total_shipping_tax_excl'];\n            $shipping_refundable_tax_incl -= $slip['total_shipping_tax_incl'];\n        }\n        $shipping_refundable_tax_excl = max(0, $shipping_refundable_tax_excl);\n        $shipping_refundable_tax_incl = max(0, $shipping_refundable_tax_incl);\n\n        // Smarty assign\n        $this->tpl_view_vars = array(\n            'order' => $order,\n            'cart' => new Cart($order->id_cart),\n            'customer' => $customer,\n            'gender' => $gender,\n            'customer_addresses' => $customer->getAddresses($this->context->language->id),\n            'addresses' => array(\n                'delivery' => $addressDelivery,\n                'deliveryState' => isset($deliveryState) ? $deliveryState : null,\n                'invoice' => $addressInvoice,\n                'invoiceState' => isset($invoiceState) ? $invoiceState : null,\n            ),\n            'customerStats' => $customer->getStats(),\n            'products' => $products,\n            'discounts' => $order->getCartRules(),\n            'orders_total_paid_tax_incl' => $order->getOrdersTotalPaid(), // Get the sum of total_paid_tax_incl of the order with similar reference\n            'total_paid' => $order->getTotalPaid(),\n            'returns' => OrderReturn::getOrdersReturn($order->id_customer, $order->id),\n            'shipping_refundable_tax_excl' => $shipping_refundable_tax_excl,\n            'shipping_refundable_tax_incl' => $shipping_refundable_tax_incl,\n            'customer_thread_message' => CustomerThread::getCustomerMessages($order->id_customer, null, $order->id),\n            'orderMessages' => OrderMessage::getOrderMessages($order->id_lang),\n            'messages' => CustomerThread::getCustomerMessagesOrder($order->id_customer, $order->id),\n            'carrier' => new Carrier($order->id_carrier),\n            'history' => $history,\n            'states' => OrderState::getOrderStates($this->context->language->id),\n            'warehouse_list' => $warehouse_list,\n            'sources' => ConnectionsSource::getOrderSources($order->id),\n            'currentState' => $order->getCurrentOrderState(),\n            'currency' => new Currency($order->id_currency),\n            'currencies' => Currency::getCurrenciesByIdShop($order->id_shop),\n            'previousOrder' => $order->getPreviousOrderId(),\n            'nextOrder' => $order->getNextOrderId(),\n            'current_index' => self::$currentIndex,\n            'carrierModuleCall' => $carrier_module_call,\n            'iso_code_lang' => $this->context->language->iso_code,\n            'id_lang' => $this->context->language->id,\n            'can_edit' => ($this->access('edit')),\n            'current_id_lang' => $this->context->language->id,\n            'invoices_collection' => $order->getInvoicesCollection(),\n            'not_paid_invoices_collection' => $order->getNotPaidInvoicesCollection(),\n            'payment_methods' => $payment_methods,\n            'invoice_management_active' => Configuration::get('PS_INVOICE', null, null, $order->id_shop),\n            'display_warehouse' => (int) Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT'),\n            'carrier_list' => $this->getCarrierList($order),\n            'recalculate_shipping_cost' => (int) Configuration::get('PS_ORDER_RECALCULATE_SHIPPING'),\n            'stock_location_is_available' => $stockLocationIsAvailable,\n            'HOOK_CONTENT_ORDER' => Hook::exec(\n                'displayAdminOrderContentOrder',\n                array(\n                    'order' => $order,\n                    'products' => $products,\n                    'customer' => $customer, )\n            ),\n            'HOOK_CONTENT_SHIP' => Hook::exec(\n                'displayAdminOrderContentShip',\n                array(\n                    'order' => $order,\n                    'products' => $products,\n                    'customer' => $customer, )\n            ),\n            'HOOK_TAB_ORDER' => Hook::exec(\n                'displayAdminOrderTabOrder',\n                array(\n                    'order' => $order,\n                    'products' => $products,\n                    'customer' => $customer, )\n            ),\n            'HOOK_TAB_SHIP' => Hook::exec(\n                'displayAdminOrderTabShip',\n                array(\n                    'order' => $order,\n                    'products' => $products,\n                    'customer' => $customer, )\n            ),\n        );\n\n        return parent::renderView();\n    }\n\n    public function ajaxProcessSearchProducts()\n    {\n        Context::getContext()->customer = new Customer((int) Tools::getValue('id_customer'));\n        $currency = new Currency((int) Tools::getValue('id_currency'));\n        if ($products = Product::searchByName((int) $this->context->language->id, pSQL(Tools::getValue('product_search')))) {\n            foreach ($products as &$product) {\n                // Formatted price\n                $product['formatted_price'] = Tools::displayPrice(Tools::convertPrice($product['price_tax_incl'], $currency), $currency);\n                // Concret price\n                $product['price_tax_incl'] = Tools::ps_round(Tools::convertPrice($product['price_tax_incl'], $currency), 2);\n                $product['price_tax_excl'] = Tools::ps_round(Tools::convertPrice($product['price_tax_excl'], $currency), 2);\n                $productObj = new Product((int) $product['id_product'], false, (int) $this->context->language->id);\n                $combinations = array();\n                $attributes = $productObj->getAttributesGroups((int) $this->context->language->id);\n\n                // Tax rate for this customer\n                if (Tools::isSubmit('id_address')) {\n                    $product['tax_rate'] = $productObj->getTaxesRate(new Address(Tools::getValue('id_address')));\n                }\n\n                $product['warehouse_list'] = array();\n\n                foreach ($attributes as $attribute) {\n                    if (!isset($combinations[$attribute['id_product_attribute']]['attributes'])) {\n                        $combinations[$attribute['id_product_attribute']]['attributes'] = '';\n                    }\n                    $combinations[$attribute['id_product_attribute']]['attributes'] .= $attribute['attribute_name'] . ' - ';\n                    $combinations[$attribute['id_product_attribute']]['id_product_attribute'] = $attribute['id_product_attribute'];\n                    $combinations[$attribute['id_product_attribute']]['default_on'] = $attribute['default_on'];\n                    if (!isset($combinations[$attribute['id_product_attribute']]['price'])) {\n                        $price_tax_incl = Product::getPriceStatic((int) $product['id_product'], true, $attribute['id_product_attribute']);\n                        $price_tax_excl = Product::getPriceStatic((int) $product['id_product'], false, $attribute['id_product_attribute']);\n                        $combinations[$attribute['id_product_attribute']]['price_tax_incl'] = Tools::ps_round(Tools::convertPrice($price_tax_incl, $currency), 2);\n                        $combinations[$attribute['id_product_attribute']]['price_tax_excl'] = Tools::ps_round(Tools::convertPrice($price_tax_excl, $currency), 2);\n                        $combinations[$attribute['id_product_attribute']]['formatted_price'] = Tools::displayPrice(Tools::convertPrice($price_tax_excl, $currency), $currency);\n                    }\n                    if (!isset($combinations[$attribute['id_product_attribute']]['qty_in_stock'])) {\n                        $combinations[$attribute['id_product_attribute']]['qty_in_stock'] = StockAvailable::getQuantityAvailableByProduct((int) $product['id_product'], $attribute['id_product_attribute'], (int) $this->context->shop->id);\n                    }\n\n                    if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && (int) $product['advanced_stock_management'] == 1) {\n                        $product['warehouse_list'][$attribute['id_product_attribute']] = Warehouse::getProductWarehouseList($product['id_product'], $attribute['id_product_attribute']);\n                    } else {\n                        $product['warehouse_list'][$attribute['id_product_attribute']] = array();\n                    }\n\n                    $product['stock'][$attribute['id_product_attribute']] = Product::getRealQuantity($product['id_product'], $attribute['id_product_attribute']);\n                }\n\n                if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && (int) $product['advanced_stock_management'] == 1) {\n                    $product['warehouse_list'][0] = Warehouse::getProductWarehouseList($product['id_product']);\n                } else {\n                    $product['warehouse_list'][0] = array();\n                }\n\n                $product['stock'][0] = StockAvailable::getQuantityAvailableByProduct((int) $product['id_product'], 0, (int) $this->context->shop->id);\n\n                foreach ($combinations as &$combination) {\n                    $combination['attributes'] = rtrim($combination['attributes'], ' - ');\n                }\n                $product['combinations'] = $combinations;\n\n                if ($product['customizable']) {\n                    $product_instance = new Product((int) $product['id_product']);\n                    $product['customization_fields'] = $product_instance->getCustomizationFields($this->context->language->id);\n                }\n            }\n\n            $to_return = array(\n                'products' => $products,\n                'found' => true,\n            );\n        } else {\n            $to_return = array('found' => false);\n        }\n\n        $this->content = json_encode($to_return);\n    }\n\n    public function ajaxProcessSendMailValidateOrder()\n    {\n        if ($this->access('edit')) {\n            $cart = new Cart((int) Tools::getValue('id_cart'));\n            if (Validate::isLoadedObject($cart)) {\n                $customer = new Customer((int) $cart->id_customer);\n                if (Validate::isLoadedObject($customer)) {\n                    $mailVars = array(\n                        '{order_link}' => Context::getContext()->link->getPageLink('order', false, (int) $cart->id_lang, 'step=3&recover_cart=' . (int) $cart->id . '&token_cart=' . md5(_COOKIE_KEY_ . 'recover_cart_' . (int) $cart->id)),\n                        '{firstname}' => $customer->firstname,\n                        '{lastname}' => $customer->lastname,\n                    );\n                    $cartLanguage = new Language((int) $cart->id_lang);\n                    if (\n                        Mail::Send(\n                            (int) $cart->id_lang,\n                            'backoffice_order',\n                            $this->trans(\n                                'Process the payment of your order',\n                                array(),\n                                'Emails.Subject',\n                                $cartLanguage->locale\n                            ),\n                            $mailVars,\n                            $customer->email,\n                            $customer->firstname . ' ' . $customer->lastname,\n                            null,\n                            null,\n                            null,\n                            null,\n                            _PS_MAIL_DIR_,\n                            true,\n                            $cart->id_shop\n                        )\n                    ) {\n                        die(json_encode(array('errors' => false, 'result' => $this->trans('The email was sent to your customer.', array(), 'Admin.Orderscustomers.Notification'))));\n                    }\n                }\n            }\n            $this->content = json_encode(array('errors' => true, 'result' => $this->trans('Error in sending the email to your customer.', array(), 'Admin.Orderscustomers.Notification')));\n        }\n    }\n\n    public function ajaxProcessAddProductOnOrder()\n    {\n        // Load object\n        $order = new Order((int) Tools::getValue('id_order'));\n        if (!Validate::isLoadedObject($order)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The order object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        $old_cart_rules = Context::getContext()->cart->getCartRules();\n\n        if ($order->hasBeenShipped()) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot add products to delivered orders.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        $product_informations = $_POST['add_product'];\n        if (isset($_POST['add_invoice'])) {\n            $invoice_informations = $_POST['add_invoice'];\n        } else {\n            $invoice_informations = array();\n        }\n        $product = new Product($product_informations['product_id'], false, $order->id_lang);\n        if (!Validate::isLoadedObject($product)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The product object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (isset($product_informations['product_attribute_id']) && $product_informations['product_attribute_id']) {\n            $combination = new Combination($product_informations['product_attribute_id']);\n            if (!Validate::isLoadedObject($combination)) {\n                die(json_encode(array(\n                    'result' => false,\n                    'error' => $this->trans('The combination object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n                )));\n            }\n        }\n\n        // Total method\n        $total_method = Cart::BOTH_WITHOUT_SHIPPING;\n\n        // Create new cart\n        $cart = new Cart();\n        $cart->id_shop_group = $order->id_shop_group;\n        $cart->id_shop = $order->id_shop;\n        $cart->id_customer = $order->id_customer;\n        $cart->id_carrier = $order->id_carrier;\n        $cart->id_address_delivery = $order->id_address_delivery;\n        $cart->id_address_invoice = $order->id_address_invoice;\n        $cart->id_currency = $order->id_currency;\n        $cart->id_lang = $order->id_lang;\n        $cart->secure_key = $order->secure_key;\n\n        // Save new cart\n        $cart->add();\n\n        // Save context (in order to apply cart rule)\n        $this->context->cart = $cart;\n        $this->context->customer = new Customer($order->id_customer);\n\n        // always add taxes even if there are not displayed to the customer\n        $use_taxes = true;\n\n        $initial_product_price_tax_incl = Product::getPriceStatic(\n            $product->id,\n            $use_taxes,\n            isset($combination) ? $combination->id : null,\n            2,\n            null,\n            false,\n            true,\n            1,\n            false,\n            $order->id_customer,\n            $cart->id,\n            $order->{Configuration::get('PS_TAX_ADDRESS_TYPE', null, null, $order->id_shop)}\n        );\n\n        // Creating specific price if needed\n        if ($product_informations['product_price_tax_incl'] != $initial_product_price_tax_incl) {\n            $specific_price = new SpecificPrice();\n            $specific_price->id_shop = 0;\n            $specific_price->id_shop_group = 0;\n            $specific_price->id_currency = 0;\n            $specific_price->id_country = 0;\n            $specific_price->id_group = 0;\n            $specific_price->id_customer = $order->id_customer;\n            $specific_price->id_product = $product->id;\n            if (isset($combination)) {\n                $specific_price->id_product_attribute = $combination->id;\n            } else {\n                $specific_price->id_product_attribute = 0;\n            }\n            $specific_price->price = $product_informations['product_price_tax_excl'];\n            $specific_price->from_quantity = 1;\n            $specific_price->reduction = 0;\n            $specific_price->reduction_type = 'amount';\n            $specific_price->reduction_tax = 0;\n            $specific_price->from = '0000-00-00 00:00:00';\n            $specific_price->to = '0000-00-00 00:00:00';\n            $specific_price->add();\n        }\n\n        // Add product to cart\n        $update_quantity = $cart->updateQty(\n            $product_informations['product_quantity'],\n            $product->id,\n            isset($product_informations['product_attribute_id']) ? $product_informations['product_attribute_id'] : null,\n            isset($combination) ? $combination->id : null,\n            'up',\n            0,\n            new Shop($cart->id_shop)\n        );\n\n        if ($update_quantity < 0) {\n            // If product has attribute, minimal quantity is set with minimal quantity of attribute\n            $minimal_quantity = ($product_informations['product_attribute_id']) ? Attribute::getAttributeMinimalQty($product_informations['product_attribute_id']) : $product->minimal_quantity;\n            die(json_encode(array('error' => $this->trans('You must add %d minimum quantity', array('%d' => $minimal_quantity), 'Admin.Orderscustomers.Notification'))));\n        } elseif (!$update_quantity) {\n            die(json_encode(array('error' => $this->trans('You already have the maximum quantity available for this product.', array(), 'Admin.Orderscustomers.Notification'))));\n        }\n\n        // If order is valid, we can create a new invoice or edit an existing invoice\n        if ($order->hasInvoice()) {\n            $order_invoice = new OrderInvoice($product_informations['invoice']);\n            // Create new invoice\n            if ($order_invoice->id == 0) {\n                // If we create a new invoice, we calculate shipping cost\n                $total_method = Cart::BOTH;\n                // Create Cart rule in order to make free shipping\n                if (isset($invoice_informations['free_shipping']) && $invoice_informations['free_shipping']) {\n                    $cart_rule = new CartRule();\n                    $cart_rule->id_customer = $order->id_customer;\n                    $cart_rule->name = array(\n                        Configuration::get('PS_LANG_DEFAULT') => $this->trans('[Generated] CartRule for Free Shipping', array(), 'Admin.Orderscustomers.Notification'),\n                    );\n                    $cart_rule->date_from = date('Y-m-d H:i:s', time());\n                    $cart_rule->date_to = date('Y-m-d H:i:s', time() + 24 * 3600);\n                    $cart_rule->quantity = 1;\n                    $cart_rule->quantity_per_user = 1;\n                    $cart_rule->minimum_amount_currency = $order->id_currency;\n                    $cart_rule->reduction_currency = $order->id_currency;\n                    $cart_rule->free_shipping = true;\n                    $cart_rule->active = 1;\n                    $cart_rule->add();\n\n                    // Add cart rule to cart and in order\n                    $cart->addCartRule($cart_rule->id);\n                    $values = array(\n                        'tax_incl' => $cart_rule->getContextualValue(true),\n                        'tax_excl' => $cart_rule->getContextualValue(false),\n                    );\n                    $order->addCartRule($cart_rule->id, $cart_rule->name[Configuration::get('PS_LANG_DEFAULT')], $values);\n                }\n\n                $order_invoice->id_order = $order->id;\n                if ($order_invoice->number) {\n                    Configuration::updateValue('PS_INVOICE_START_NUMBER', false, false, null, $order->id_shop);\n                } else {\n                    $order_invoice->number = Order::getLastInvoiceNumber() + 1;\n                }\n\n                $invoice_address = new Address((int) $order->{Configuration::get('PS_TAX_ADDRESS_TYPE', null, null, $order->id_shop)});\n                $carrier = new Carrier((int) $order->id_carrier);\n                $tax_calculator = $carrier->getTaxCalculator($invoice_address);\n\n                $order_invoice->total_paid_tax_excl = Tools::ps_round((float) $cart->getOrderTotal(false, $total_method), 2);\n                $order_invoice->total_paid_tax_incl = Tools::ps_round((float) $cart->getOrderTotal($use_taxes, $total_method), 2);\n                $order_invoice->total_products = (float) $cart->getOrderTotal(false, Cart::ONLY_PRODUCTS);\n                $order_invoice->total_products_wt = (float) $cart->getOrderTotal($use_taxes, Cart::ONLY_PRODUCTS);\n                $order_invoice->total_shipping_tax_excl = (float) $cart->getTotalShippingCost(null, false);\n                $order_invoice->total_shipping_tax_incl = (float) $cart->getTotalShippingCost();\n\n                $order_invoice->total_wrapping_tax_excl = abs($cart->getOrderTotal(false, Cart::ONLY_WRAPPING));\n                $order_invoice->total_wrapping_tax_incl = abs($cart->getOrderTotal($use_taxes, Cart::ONLY_WRAPPING));\n                $order_invoice->shipping_tax_computation_method = (int) $tax_calculator->computation_method;\n\n                // Update current order field, only shipping because other field is updated later\n                $order->total_shipping += $order_invoice->total_shipping_tax_incl;\n                $order->total_shipping_tax_excl += $order_invoice->total_shipping_tax_excl;\n                $order->total_shipping_tax_incl += ($use_taxes) ? $order_invoice->total_shipping_tax_incl : $order_invoice->total_shipping_tax_excl;\n\n                $order->total_wrapping += abs($cart->getOrderTotal($use_taxes, Cart::ONLY_WRAPPING));\n                $order->total_wrapping_tax_excl += abs($cart->getOrderTotal(false, Cart::ONLY_WRAPPING));\n                $order->total_wrapping_tax_incl += abs($cart->getOrderTotal($use_taxes, Cart::ONLY_WRAPPING));\n                $order_invoice->add();\n\n                $order_invoice->saveCarrierTaxCalculator($tax_calculator->getTaxesAmount($order_invoice->total_shipping_tax_excl));\n\n                $order_carrier = new OrderCarrier();\n                $order_carrier->id_order = (int) $order->id;\n                $order_carrier->id_carrier = (int) $order->id_carrier;\n                $order_carrier->id_order_invoice = (int) $order_invoice->id;\n                $order_carrier->weight = (float) $cart->getTotalWeight();\n                $order_carrier->shipping_cost_tax_excl = (float) $order_invoice->total_shipping_tax_excl;\n                $order_carrier->shipping_cost_tax_incl = ($use_taxes) ? (float) $order_invoice->total_shipping_tax_incl : (float) $order_invoice->total_shipping_tax_excl;\n                $order_carrier->add();\n            } else {\n                // Update current invoice\n                $order_invoice->total_paid_tax_excl += Tools::ps_round((float) ($cart->getOrderTotal(false, $total_method)), 2);\n                $order_invoice->total_paid_tax_incl += Tools::ps_round((float) ($cart->getOrderTotal($use_taxes, $total_method)), 2);\n                $order_invoice->total_products += (float) $cart->getOrderTotal(false, Cart::ONLY_PRODUCTS);\n                $order_invoice->total_products_wt += (float) $cart->getOrderTotal($use_taxes, Cart::ONLY_PRODUCTS);\n                $order_invoice->update();\n            }\n        }\n\n        // Create Order detail information\n        $order_detail = new OrderDetail();\n        $order_detail->createList($order, $cart, $order->getCurrentOrderState(), $cart->getProducts(), (isset($order_invoice) ? $order_invoice->id : 0), $use_taxes, (int) Tools::getValue('add_product_warehouse'));\n\n        // update totals amount of order\n        $order->total_products += (float) $cart->getOrderTotal(false, Cart::ONLY_PRODUCTS);\n        $order->total_products_wt += (float) $cart->getOrderTotal($use_taxes, Cart::ONLY_PRODUCTS);\n\n        $order->total_paid += Tools::ps_round((float) ($cart->getOrderTotal(true, $total_method)), 2);\n        $order->total_paid_tax_excl += Tools::ps_round((float) ($cart->getOrderTotal(false, $total_method)), 2);\n        $order->total_paid_tax_incl += Tools::ps_round((float) ($cart->getOrderTotal($use_taxes, $total_method)), 2);\n\n        if (isset($order_invoice) && Validate::isLoadedObject($order_invoice)) {\n            $order->total_shipping = $order_invoice->total_shipping_tax_incl;\n            $order->total_shipping_tax_incl = $order_invoice->total_shipping_tax_incl;\n            $order->total_shipping_tax_excl = $order_invoice->total_shipping_tax_excl;\n        }\n        // discount\n        $order->total_discounts += (float) abs($cart->getOrderTotal(true, Cart::ONLY_DISCOUNTS));\n        $order->total_discounts_tax_excl += (float) abs($cart->getOrderTotal(false, Cart::ONLY_DISCOUNTS));\n        $order->total_discounts_tax_incl += (float) abs($cart->getOrderTotal(true, Cart::ONLY_DISCOUNTS));\n\n        // Save changes of order\n        $order->update();\n\n        StockAvailable::synchronize($product->id);\n\n        // Update weight SUM\n        $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n        if (Validate::isLoadedObject($order_carrier)) {\n            $order_carrier->weight = (float) $order->getTotalWeight();\n            if ($order_carrier->update()) {\n                $order->weight = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $order_carrier->weight);\n            }\n        }\n\n        // Update Tax lines\n        $order_detail->updateTaxAmount($order);\n\n        // Delete specific price if exists\n        if (isset($specific_price)) {\n            $specific_price->delete();\n        }\n\n        $products = $this->getProducts($order);\n\n        // Get the last product\n        $product = end($products);\n        $resume = OrderSlip::getProductSlipResume((int) $product['id_order_detail']);\n        $product['quantity_refundable'] = $product['product_quantity'] - $resume['product_quantity'];\n        $product['amount_refundable'] = $product['total_price_tax_excl'] - $resume['amount_tax_excl'];\n        $product['amount_refund'] = Tools::displayPrice($resume['amount_tax_incl']);\n        $product['return_history'] = OrderReturn::getProductReturnDetail((int) $product['id_order_detail']);\n        $product['refund_history'] = OrderSlip::getProductSlipDetail((int) $product['id_order_detail']);\n        if ($product['id_warehouse'] != 0) {\n            $warehouse = new Warehouse((int) $product['id_warehouse']);\n            $product['warehouse_name'] = $warehouse->name;\n            $warehouse_location = WarehouseProductLocation::getProductLocation($product['product_id'], $product['product_attribute_id'], $product['id_warehouse']);\n            if (!empty($warehouse_location)) {\n                $product['warehouse_location'] = $warehouse_location;\n            } else {\n                $product['warehouse_location'] = false;\n            }\n        } else {\n            $product['warehouse_name'] = '--';\n            $product['warehouse_location'] = false;\n        }\n\n        // Get invoices collection\n        $invoice_collection = $order->getInvoicesCollection();\n\n        $invoice_array = array();\n        foreach ($invoice_collection as $invoice) {\n            /* @var OrderInvoice $invoice */\n            $invoice->name = $invoice->getInvoiceNumberFormatted(Context::getContext()->language->id, (int) $order->id_shop);\n            $invoice_array[] = $invoice;\n        }\n\n        $order = $order->refreshShippingCost();\n\n        // Assign to smarty informations in order to show the new product line\n        $this->context->smarty->assign(array(\n            'product' => $product,\n            'order' => $order,\n            'currency' => new Currency($order->id_currency),\n            'can_edit' => $this->access('edit'),\n            'invoices_collection' => $invoice_collection,\n            'current_id_lang' => Context::getContext()->language->id,\n            'link' => Context::getContext()->link,\n            'current_index' => self::$currentIndex,\n            'display_warehouse' => (int) Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT'),\n        ));\n\n        $this->sendChangedNotification($order);\n        $new_cart_rules = Context::getContext()->cart->getCartRules();\n        sort($old_cart_rules);\n        sort($new_cart_rules);\n        $result = array_diff($new_cart_rules, $old_cart_rules);\n        $refresh = false;\n\n        $res = true;\n        foreach ($result as $cart_rule) {\n            $refresh = true;\n            // Create OrderCartRule\n            $rule = new CartRule($cart_rule['id_cart_rule']);\n            $values = array(\n                'tax_incl' => $rule->getContextualValue(true),\n                'tax_excl' => $rule->getContextualValue(false),\n            );\n            $order_cart_rule = new OrderCartRule();\n            $order_cart_rule->id_order = $order->id;\n            $order_cart_rule->id_cart_rule = $cart_rule['id_cart_rule'];\n            $order_cart_rule->id_order_invoice = $order_invoice->id;\n            $order_cart_rule->name = $cart_rule['name'];\n            $order_cart_rule->value = $values['tax_incl'];\n            $order_cart_rule->value_tax_excl = $values['tax_excl'];\n            $res &= $order_cart_rule->add();\n\n            $order->total_discounts += $order_cart_rule->value;\n            $order->total_discounts_tax_incl += $order_cart_rule->value;\n            $order->total_discounts_tax_excl += $order_cart_rule->value_tax_excl;\n            $order->total_paid -= $order_cart_rule->value;\n            $order->total_paid_tax_incl -= $order_cart_rule->value;\n            $order->total_paid_tax_excl -= $order_cart_rule->value_tax_excl;\n        }\n\n        // Update Order\n        $res &= $order->update();\n\n        die(json_encode(array(\n            'result' => true,\n            'view' => $this->createTemplate('_product_line.tpl')->fetch(),\n            'can_edit' => $this->access('add'),\n            'order' => $order,\n            'invoices' => $invoice_array,\n            'documents_html' => $this->createTemplate('_documents.tpl')->fetch(),\n            'shipping_html' => $this->createTemplate('_shipping.tpl')->fetch(),\n            'discount_form_html' => $this->createTemplate('_discount_form.tpl')->fetch(),\n            'refresh' => $refresh,\n        )));\n    }\n\n    public function sendChangedNotification(Order $order = null)\n    {\n        if (null === $order) {\n            $order = new Order(Tools::getValue('id_order'));\n        }\n\n        Hook::exec('actionOrderEdited', array('order' => $order));\n    }\n\n    public function ajaxProcessLoadProductInformation()\n    {\n        $order_detail = new OrderDetail(Tools::getValue('id_order_detail'));\n        if (!Validate::isLoadedObject($order_detail)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The OrderDetail object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        $product = new Product($order_detail->product_id);\n        if (!Validate::isLoadedObject($product)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The product object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        $address = new Address(Tools::getValue('id_address'));\n        if (!Validate::isLoadedObject($address)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The address object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        die(json_encode(array(\n            'result' => true,\n            'product' => $product,\n            'tax_rate' => $product->getTaxesRate($address),\n            'price_tax_incl' => Product::getPriceStatic($product->id, true, $order_detail->product_attribute_id, 2),\n            'price_tax_excl' => Product::getPriceStatic($product->id, false, $order_detail->product_attribute_id, 2),\n            'reduction_percent' => $order_detail->reduction_percent,\n        )));\n    }\n\n    public function ajaxProcessEditProductOnOrder()\n    {\n        // Return value\n        $res = true;\n\n        $order = new Order((int) Tools::getValue('id_order'));\n        $order_detail = new OrderDetail((int) Tools::getValue('product_id_order_detail'));\n        if (Tools::isSubmit('product_invoice')) {\n            $order_invoice = new OrderInvoice((int) Tools::getValue('product_invoice'));\n        }\n\n        // Check fields validity\n        $this->doEditProductValidation($order_detail, $order, isset($order_invoice) ? $order_invoice : null);\n\n        // If multiple product_quantity, the order details concern a product customized\n        $product_quantity = 0;\n        if (is_array(Tools::getValue('product_quantity'))) {\n            foreach (Tools::getValue('product_quantity') as $id_customization => $qty) {\n                // Update quantity of each customization\n                Db::getInstance()->update('customization', array('quantity' => (int) $qty), 'id_customization = ' . (int) $id_customization);\n                // Calculate the real quantity of the product\n                $product_quantity += $qty;\n            }\n        } else {\n            $product_quantity = Tools::getValue('product_quantity');\n        }\n\n        $product_price_tax_incl = Tools::ps_round(Tools::getValue('product_price_tax_incl'), 2);\n        $product_price_tax_excl = Tools::ps_round(Tools::getValue('product_price_tax_excl'), 2);\n        $total_products_tax_incl = $product_price_tax_incl * $product_quantity;\n        $total_products_tax_excl = $product_price_tax_excl * $product_quantity;\n\n        // Calculate differences of price (Before / After)\n        $diff_price_tax_incl = $total_products_tax_incl - $order_detail->total_price_tax_incl;\n        $diff_price_tax_excl = $total_products_tax_excl - $order_detail->total_price_tax_excl;\n\n        // Apply change on OrderInvoice\n        if (isset($order_invoice)) {\n            // If OrderInvoice to use is different, we update the old invoice and new invoice\n            if ($order_detail->id_order_invoice != $order_invoice->id) {\n                $old_order_invoice = new OrderInvoice($order_detail->id_order_invoice);\n                // We remove cost of products\n                $old_order_invoice->total_products -= $order_detail->total_price_tax_excl;\n                $old_order_invoice->total_products_wt -= $order_detail->total_price_tax_incl;\n\n                $old_order_invoice->total_paid_tax_excl -= $order_detail->total_price_tax_excl;\n                $old_order_invoice->total_paid_tax_incl -= $order_detail->total_price_tax_incl;\n\n                $res &= $old_order_invoice->update();\n\n                $order_invoice->total_products += $order_detail->total_price_tax_excl;\n                $order_invoice->total_products_wt += $order_detail->total_price_tax_incl;\n\n                $order_invoice->total_paid_tax_excl += $order_detail->total_price_tax_excl;\n                $order_invoice->total_paid_tax_incl += $order_detail->total_price_tax_incl;\n\n                $order_detail->id_order_invoice = $order_invoice->id;\n            }\n        }\n\n        if ($diff_price_tax_incl != 0 && $diff_price_tax_excl != 0) {\n            $order_detail->unit_price_tax_excl = $product_price_tax_excl;\n            $order_detail->unit_price_tax_incl = $product_price_tax_incl;\n\n            $order_detail->total_price_tax_incl += $diff_price_tax_incl;\n            $order_detail->total_price_tax_excl += $diff_price_tax_excl;\n\n            if (isset($order_invoice)) {\n                // Apply changes on OrderInvoice\n                $order_invoice->total_products += $diff_price_tax_excl;\n                $order_invoice->total_products_wt += $diff_price_tax_incl;\n\n                $order_invoice->total_paid_tax_excl += $diff_price_tax_excl;\n                $order_invoice->total_paid_tax_incl += $diff_price_tax_incl;\n            }\n\n            // Apply changes on Order\n            $order = new Order($order_detail->id_order);\n            $order->total_products += $diff_price_tax_excl;\n            $order->total_products_wt += $diff_price_tax_incl;\n\n            $order->total_paid += $diff_price_tax_incl;\n            $order->total_paid_tax_excl += $diff_price_tax_excl;\n            $order->total_paid_tax_incl += $diff_price_tax_incl;\n\n            $res &= $order->update();\n        }\n\n        $old_quantity = $order_detail->product_quantity;\n\n        $order_detail->product_quantity = $product_quantity;\n        $order_detail->reduction_percent = 0;\n\n        // update taxes\n        $res &= $order_detail->updateTaxAmount($order);\n\n        // Save order detail\n        $res &= $order_detail->update();\n\n        // Update weight SUM\n        $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n        if (Validate::isLoadedObject($order_carrier)) {\n            $order_carrier->weight = (float) $order->getTotalWeight();\n            $res &= $order_carrier->update();\n            if ($res) {\n                $order->weight = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $order_carrier->weight);\n            }\n        }\n\n        // Save order invoice\n        if (isset($order_invoice)) {\n            $res &= $order_invoice->update();\n        }\n\n        // Update product available quantity\n        StockAvailable::updateQuantity($order_detail->product_id, $order_detail->product_attribute_id, ($old_quantity - $order_detail->product_quantity), $order->id_shop);\n\n        $products = $this->getProducts($order);\n        // Get the last product\n        $product = $products[$order_detail->id];\n        $resume = OrderSlip::getProductSlipResume($order_detail->id);\n        $product['quantity_refundable'] = $product['product_quantity'] - $resume['product_quantity'];\n        $product['amount_refundable'] = $product['total_price_tax_excl'] - $resume['amount_tax_excl'];\n        $product['amount_refund'] = Tools::displayPrice($resume['amount_tax_incl']);\n        $product['refund_history'] = OrderSlip::getProductSlipDetail($order_detail->id);\n        if ($product['id_warehouse'] != 0) {\n            $warehouse = new Warehouse((int) $product['id_warehouse']);\n            $product['warehouse_name'] = $warehouse->name;\n            $warehouse_location = WarehouseProductLocation::getProductLocation($product['product_id'], $product['product_attribute_id'], $product['id_warehouse']);\n            if (!empty($warehouse_location)) {\n                $product['warehouse_location'] = $warehouse_location;\n            } else {\n                $product['warehouse_location'] = false;\n            }\n        } else {\n            $product['warehouse_name'] = '--';\n            $product['warehouse_location'] = false;\n        }\n\n        // Get invoices collection\n        $invoice_collection = $order->getInvoicesCollection();\n\n        $invoice_array = array();\n        foreach ($invoice_collection as $invoice) {\n            /* @var OrderInvoice $invoice */\n            $invoice->name = $invoice->getInvoiceNumberFormatted(Context::getContext()->language->id, (int) $order->id_shop);\n            $invoice_array[] = $invoice;\n        }\n\n        $order = $order->refreshShippingCost();\n\n        $stockLocationIsAvailable = false;\n        foreach ($products as $currentProduct) {\n            if (!empty($currentProduct['location'])) {\n                $stockLocationIsAvailable = true;\n\n                break;\n            }\n        }\n\n        // Assign to smarty informations in order to show the new product line\n        $this->context->smarty->assign(array(\n            'product' => $product,\n            'order' => $order,\n            'currency' => new Currency($order->id_currency),\n            'can_edit' => $this->access('edit'),\n            'invoices_collection' => $invoice_collection,\n            'current_id_lang' => Context::getContext()->language->id,\n            'link' => Context::getContext()->link,\n            'current_index' => self::$currentIndex,\n            'display_warehouse' => (int) Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT'),\n            'stock_location_is_available' => $stockLocationIsAvailable,\n        ));\n\n        if (!$res) {\n            die(json_encode(array(\n                'result' => $res,\n                'error' => $this->trans('An error occurred while editing the product line.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (is_array(Tools::getValue('product_quantity'))) {\n            $view = $this->createTemplate('_customized_data.tpl')->fetch();\n        } else {\n            $view = $this->createTemplate('_product_line.tpl')->fetch();\n        }\n\n        $this->sendChangedNotification($order);\n\n        die(json_encode(array(\n            'result' => $res,\n            'view' => $view,\n            'can_edit' => $this->access('add'),\n            'invoices_collection' => $invoice_collection,\n            'order' => $order,\n            'invoices' => $invoice_array,\n            'documents_html' => $this->createTemplate('_documents.tpl')->fetch(),\n            'shipping_html' => $this->createTemplate('_shipping.tpl')->fetch(),\n            'customized_product' => is_array(Tools::getValue('product_quantity')),\n        )));\n    }\n\n    public function ajaxProcessDeleteProductLine()\n    {\n        $res = true;\n\n        $order_detail = new OrderDetail((int) Tools::getValue('id_order_detail'));\n        $order = new Order((int) Tools::getValue('id_order'));\n\n        $this->doDeleteProductLineValidation($order_detail, $order);\n\n        // Update OrderInvoice of this OrderDetail\n        if ($order_detail->id_order_invoice != 0) {\n            $order_invoice = new OrderInvoice($order_detail->id_order_invoice);\n            $order_invoice->total_paid_tax_excl -= $order_detail->total_price_tax_excl;\n            $order_invoice->total_paid_tax_incl -= $order_detail->total_price_tax_incl;\n            $order_invoice->total_products -= $order_detail->total_price_tax_excl;\n            $order_invoice->total_products_wt -= $order_detail->total_price_tax_incl;\n            $res &= $order_invoice->update();\n        }\n\n        // Update Order\n        $order->total_paid -= $order_detail->total_price_tax_incl;\n        $order->total_paid_tax_incl -= $order_detail->total_price_tax_incl;\n        $order->total_paid_tax_excl -= $order_detail->total_price_tax_excl;\n        $order->total_products -= $order_detail->total_price_tax_excl;\n        $order->total_products_wt -= $order_detail->total_price_tax_incl;\n\n        $res &= $order->update();\n\n        // Reinject quantity in stock\n        $this->reinjectQuantity($order_detail, $order_detail->product_quantity, true);\n\n        // Update weight SUM\n        $order_carrier = new OrderCarrier((int) $order->getIdOrderCarrier());\n        if (Validate::isLoadedObject($order_carrier)) {\n            $order_carrier->weight = (float) $order->getTotalWeight();\n            $res &= $order_carrier->update();\n            if ($res) {\n                $order->weight = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $order_carrier->weight);\n            }\n        }\n\n        if (!$res) {\n            die(json_encode(array(\n                'result' => $res,\n                'error' => $this->trans('An error occurred while attempting to delete the product line.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        // Get invoices collection\n        $invoice_collection = $order->getInvoicesCollection();\n\n        $invoice_array = array();\n        foreach ($invoice_collection as $invoice) {\n            /* @var OrderInvoice $invoice */\n            $invoice->name = $invoice->getInvoiceNumberFormatted(Context::getContext()->language->id, (int) $order->id_shop);\n            $invoice_array[] = $invoice;\n        }\n\n        $order = $order->refreshShippingCost();\n\n        // Assign to smarty informations in order to show the new product line\n        $this->context->smarty->assign(array(\n            'order' => $order,\n            'currency' => new Currency($order->id_currency),\n            'invoices_collection' => $invoice_collection,\n            'current_id_lang' => Context::getContext()->language->id,\n            'link' => Context::getContext()->link,\n            'current_index' => self::$currentIndex,\n        ));\n\n        $this->sendChangedNotification($order);\n\n        die(json_encode(array(\n            'result' => $res,\n            'order' => $order,\n            'invoices' => $invoice_array,\n            'documents_html' => $this->createTemplate('_documents.tpl')->fetch(),\n            'shipping_html' => $this->createTemplate('_shipping.tpl')->fetch(),\n        )));\n    }\n\n    protected function doEditProductValidation(OrderDetail $order_detail, Order $order, OrderInvoice $order_invoice = null)\n    {\n        if (!Validate::isLoadedObject($order_detail)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The Order Detail object could not be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (!empty($order_invoice) && !Validate::isLoadedObject($order_invoice)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The invoice object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (!Validate::isLoadedObject($order)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The order object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if ($order_detail->id_order != $order->id) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot edit the order detail for this order.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        // We can't edit a delivered order\n        if ($order->hasBeenDelivered()) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot edit a delivered order.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (!empty($order_invoice) && $order_invoice->id_order != Tools::getValue('id_order')) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot use this invoice for the order', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        // Clean price\n        $product_price_tax_incl = str_replace(',', '.', Tools::getValue('product_price_tax_incl'));\n        $product_price_tax_excl = str_replace(',', '.', Tools::getValue('product_price_tax_excl'));\n\n        if (!Validate::isPrice($product_price_tax_incl) || !Validate::isPrice($product_price_tax_excl)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('Invalid price', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (!is_array(Tools::getValue('product_quantity')) && !Validate::isUnsignedInt(Tools::getValue('product_quantity'))) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('Invalid quantity', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        } elseif (is_array(Tools::getValue('product_quantity'))) {\n            foreach (Tools::getValue('product_quantity') as $qty) {\n                if (!Validate::isUnsignedInt($qty)) {\n                    die(json_encode(array(\n                        'result' => false,\n                        'error' => $this->trans('Invalid quantity', array(), 'Admin.Orderscustomers.Notification'),\n                    )));\n                }\n            }\n        }\n    }\n\n    protected function doDeleteProductLineValidation(OrderDetail $order_detail, Order $order)\n    {\n        if (!Validate::isLoadedObject($order_detail)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The Order Detail object could not be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if (!Validate::isLoadedObject($order)) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('The order object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        if ($order_detail->id_order != $order->id) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot delete the order detail.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n\n        // We can't edit a delivered order\n        if ($order->hasBeenDelivered()) {\n            die(json_encode(array(\n                'result' => false,\n                'error' => $this->trans('You cannot edit a delivered order.', array(), 'Admin.Orderscustomers.Notification'),\n            )));\n        }\n    }\n\n    /**\n     * @param Order $order\n     *\n     * @return array\n     */\n    protected function getProducts($order)\n    {\n        $products = $order->getProducts();\n\n        foreach ($products as &$product) {\n            if ($product['image'] != null) {\n                $name = 'product_mini_' . (int) $product['product_id'] . (isset($product['product_attribute_id']) ? '_' . (int) $product['product_attribute_id'] : '') . '.jpg';\n                // generate image cache, only for back office\n                $product['image_tag'] = ImageManager::thumbnail(_PS_IMG_DIR_ . 'p/' . $product['image']->getExistingImgPath() . '.jpg', $name, 45, 'jpg');\n                if (file_exists(_PS_TMP_IMG_DIR_ . $name)) {\n                    $product['image_size'] = getimagesize(_PS_TMP_IMG_DIR_ . $name);\n                } else {\n                    $product['image_size'] = false;\n                }\n            }\n        }\n\n        ksort($products);\n\n        return $products;\n    }\n\n    /**\n     * @param OrderDetail $order_detail\n     * @param int $qty_cancel_product\n     * @param bool $delete\n     */\n    protected function reinjectQuantity($order_detail, $qty_cancel_product, $delete = false)\n    {\n        // Reinject product\n        $reinjectable_quantity = (int) $order_detail->product_quantity - (int) $order_detail->product_quantity_reinjected;\n        $quantity_to_reinject = $qty_cancel_product > $reinjectable_quantity ? $reinjectable_quantity : $qty_cancel_product;\n        /** @since 1.5.0 : Advanced Stock Management */\n        $product_to_inject = new Product($order_detail->product_id, false, (int) $this->context->language->id, (int) $order_detail->id_shop);\n\n        $product = new Product($order_detail->product_id, false, (int) $this->context->language->id, (int) $order_detail->id_shop);\n\n        if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && $product->advanced_stock_management && $order_detail->id_warehouse != 0) {\n            $manager = StockManagerFactory::getManager();\n            $movements = StockMvt::getNegativeStockMvts(\n                                $order_detail->id_order,\n                                $order_detail->product_id,\n                                $order_detail->product_attribute_id,\n                                $quantity_to_reinject\n                            );\n            $left_to_reinject = $quantity_to_reinject;\n            foreach ($movements as $movement) {\n                if ($left_to_reinject > $movement['physical_quantity']) {\n                    $quantity_to_reinject = $movement['physical_quantity'];\n                }\n\n                $left_to_reinject -= $quantity_to_reinject;\n                if (Pack::isPack((int) $product->id)) {\n                    // Gets items\n                    if ($product->pack_stock_type == Pack::STOCK_TYPE_PRODUCTS_ONLY\n                        || $product->pack_stock_type == Pack::STOCK_TYPE_PACK_BOTH\n                        || ($product->pack_stock_type == Pack::STOCK_TYPE_DEFAULT\n                            && Configuration::get('PS_PACK_STOCK_TYPE') > 0)\n                    ) {\n                        $products_pack = Pack::getItems((int) $product->id, (int) Configuration::get('PS_LANG_DEFAULT'));\n                        // Foreach item\n                        foreach ($products_pack as $product_pack) {\n                            if ($product_pack->advanced_stock_management == 1) {\n                                $manager->addProduct(\n                                    $product_pack->id,\n                                    $product_pack->id_pack_product_attribute,\n                                    new Warehouse($movement['id_warehouse']),\n                                    $product_pack->pack_quantity * $quantity_to_reinject,\n                                    null,\n                                    $movement['price_te'],\n                                    true\n                                );\n                            }\n                        }\n                    }\n\n                    if ($product->pack_stock_type == Pack::STOCK_TYPE_PACK_ONLY\n                        || $product->pack_stock_type == Pack::STOCK_TYPE_PACK_BOTH\n                        || (\n                            $product->pack_stock_type == Pack::STOCK_TYPE_DEFAULT\n                            && (Configuration::get('PS_PACK_STOCK_TYPE') == Pack::STOCK_TYPE_PACK_ONLY\n                                || Configuration::get('PS_PACK_STOCK_TYPE') == Pack::STOCK_TYPE_PACK_BOTH)\n                        )\n                    ) {\n                        $manager->addProduct(\n                                $order_detail->product_id,\n                                $order_detail->product_attribute_id,\n                                new Warehouse($movement['id_warehouse']),\n                                $quantity_to_reinject,\n                                null,\n                                $movement['price_te'],\n                                true\n                            );\n                    }\n                } else {\n                    $manager->addProduct(\n                            $order_detail->product_id,\n                            $order_detail->product_attribute_id,\n                            new Warehouse($movement['id_warehouse']),\n                            $quantity_to_reinject,\n                            null,\n                            $movement['price_te'],\n                            true\n                        );\n                }\n            }\n\n            $id_product = $order_detail->product_id;\n            if ($delete) {\n                $order_detail->delete();\n            }\n            StockAvailable::synchronize($id_product);\n        } elseif ($order_detail->id_warehouse == 0) {\n            StockAvailable::updateQuantity(\n                $order_detail->product_id,\n                $order_detail->product_attribute_id,\n                $quantity_to_reinject,\n                $order_detail->id_shop,\n                true,\n                array(\n                    'id_order' => $order_detail->id_order,\n                    'id_stock_mvt_reason' => Configuration::get('PS_STOCK_CUSTOMER_RETURN_REASON'),\n                )\n            );\n\n            // sync all stock\n            (new StockManager())->updatePhysicalProductQuantity(\n                (int) $order_detail->id_shop,\n                (int) Configuration::get('PS_OS_ERROR'),\n                (int) Configuration::get('PS_OS_CANCELED'),\n                null,\n                (int) $order_detail->id_order\n            );\n\n            if ($delete) {\n                $order_detail->delete();\n            }\n        } else {\n            $this->errors[] = $this->trans('This product cannot be re-stocked.', array(), 'Admin.Orderscustomers.Notification');\n        }\n    }\n\n    /**\n     * @param OrderInvoice $order_invoice\n     * @param float $value_tax_incl\n     * @param float $value_tax_excl\n     */\n    protected function applyDiscountOnInvoice($order_invoice, $value_tax_incl, $value_tax_excl)\n    {\n        // Update OrderInvoice\n        $order_invoice->total_discount_tax_incl += $value_tax_incl;\n        $order_invoice->total_discount_tax_excl += $value_tax_excl;\n        $order_invoice->total_paid_tax_incl -= $value_tax_incl;\n        $order_invoice->total_paid_tax_excl -= $value_tax_excl;\n        $order_invoice->update();\n    }\n\n    public function ajaxProcessChangePaymentMethod()\n    {\n        $customer = new Customer(Tools::getValue('id_customer'));\n        $modules = Module::getAuthorizedModules($customer->id_default_group, array($customer->id_shop));\n        $authorized_modules = array();\n\n        if (!Validate::isLoadedObject($customer) || !is_array($modules)) {\n            die(json_encode(array('result' => false)));\n        }\n\n        foreach ($modules as $module) {\n            $authorized_modules[] = (int) $module['id_module'];\n        }\n\n        $payment_modules = array();\n\n        foreach (PaymentModule::getInstalledPaymentModules() as $p_module) {\n            if (in_array((int) $p_module['id_module'], $authorized_modules)) {\n                $payment_modules[] = Module::getInstanceById((int) $p_module['id_module']);\n            }\n        }\n\n        $this->context->smarty->assign(array(\n            'payment_modules' => $payment_modules,\n        ));\n\n        die(json_encode(array(\n            'result' => true,\n            'view' => $this->createTemplate('_select_payment.tpl')->fetch(),\n        )));\n    }\n\n    /**\n     * This method allow to add image information on a package detail.\n     *\n     * @param array &pack_item\n     */\n    protected function setProductImageInformations(&$pack_item)\n    {\n        if (isset($pack_item['id_product_attribute']) && $pack_item['id_product_attribute']) {\n            $id_image = Db::getInstance()->getValue('\n                SELECT `image_shop`.id_image\n                FROM `' . _DB_PREFIX_ . 'product_attribute_image` pai' .\n                Shop::addSqlAssociation('image', 'pai', true) . '\n                WHERE id_product_attribute = ' . (int) $pack_item['id_product_attribute']);\n        }\n\n        if (!isset($id_image) || !$id_image) {\n            $id_image = Db::getInstance()->getValue(\n                '\n                SELECT `image_shop`.id_image\n                FROM `' . _DB_PREFIX_ . 'image` i' .\n                Shop::addSqlAssociation('image', 'i', true, 'image_shop.cover=1') . '\n                WHERE i.id_product = ' . (int) $pack_item['id_product']\n            );\n        }\n\n        $pack_item['image'] = null;\n        $pack_item['image_size'] = null;\n\n        if ($id_image) {\n            $pack_item['image'] = new Image($id_image);\n        }\n    }\n\n    /**\n     * Get available carrier list for an order.\n     *\n     * @param object $order\n     *\n     * @return array $delivery_option_list_formated\n     */\n    protected function getCarrierList($order)\n    {\n        $cart = $this->context->cart;\n        $groups = Customer::getGroupsStatic((int) $cart->id_customer);\n        $address = new Address((int) $cart->id_address_delivery);\n\n        return Carrier::getCarriersForOrder(Address::getZoneById((int) $address->id), $groups, $cart);\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Adapter\\Presenter\\Order\\OrderPresenter;\n\nclass OrderDetailControllerCore extends FrontController\n{\n    public $php_self = 'order-detail';\n    public $auth = true;\n    public $authRedirection = 'history';\n    public $ssl = true;\n\n    protected $order_to_display;\n\n    /**\n     * Start forms process.\n     *\n     * @see FrontController::postProcess()\n     */\n    public function postProcess()\n    {\n        if (Tools::isSubmit('submitMessage')) {\n            $idOrder = (int) Tools::getValue('id_order');\n            $msgText = Tools::getValue('msgText');\n\n            if (!$idOrder || !Validate::isUnsignedId($idOrder)) {\n                $this->errors[] = $this->trans('The order is no longer valid.', array(), 'Shop.Notifications.Error');\n            } elseif (empty($msgText)) {\n                $this->errors[] = $this->trans('The message cannot be blank.', array(), 'Shop.Notifications.Error');\n            } elseif (!Validate::isMessage($msgText)) {\n                $this->errors[] = $this->trans('This message is invalid (HTML is not allowed).', array(), 'Shop.Notifications.Error');\n            }\n            if (!count($this->errors)) {\n                $order = new Order($idOrder);\n                if (Validate::isLoadedObject($order) && $order->id_customer == $this->context->customer->id) {\n                    //check if a thread already exist\n                    $id_customer_thread = CustomerThread::getIdCustomerThreadByEmailAndIdOrder($this->context->customer->email, $order->id);\n                    $id_product = (int) Tools::getValue('id_product');\n                    $cm = new CustomerMessage();\n                    if (!$id_customer_thread) {\n                        $ct = new CustomerThread();\n                        $ct->id_contact = 0;\n                        $ct->id_customer = (int) $order->id_customer;\n                        $ct->id_shop = (int) $this->context->shop->id;\n                        if ($id_product && $order->orderContainProduct($id_product)) {\n                            $ct->id_product = $id_product;\n                        }\n                        $ct->id_order = (int) $order->id;\n                        $ct->id_lang = (int) $this->context->language->id;\n                        $ct->email = $this->context->customer->email;\n                        $ct->status = 'open';\n                        $ct->token = Tools::passwdGen(12);\n                        $ct->add();\n                    } else {\n                        $ct = new CustomerThread((int) $id_customer_thread);\n                        $ct->status = 'open';\n                        $ct->update();\n                    }\n\n                    $cm->id_customer_thread = $ct->id;\n                    $cm->message = $msgText;\n                    $client_ip_address = Tools::getRemoteAddr();\n                    $cm->ip_address = (int) ip2long($client_ip_address);\n                    $cm->add();\n\n                    if (!Configuration::get('PS_MAIL_EMAIL_MESSAGE')) {\n                        $to = (string) Configuration::get('PS_SHOP_EMAIL');\n                    } else {\n                        $to = new Contact((int) Configuration::get('PS_MAIL_EMAIL_MESSAGE'));\n                        $to = (string) $to->email;\n                    }\n                    $toName = (string) Configuration::get('PS_SHOP_NAME');\n                    $customer = $this->context->customer;\n\n                    $product = new Product($id_product);\n                    $product_name = '';\n                    if (Validate::isLoadedObject($product) && isset($product->name[(int) $this->context->language->id])) {\n                        $product_name = $product->name[(int) $this->context->language->id];\n                    }\n\n                    if (Validate::isLoadedObject($customer)) {\n                        Mail::Send(\n                            $this->context->language->id,\n                            'order_customer_comment',\n                            $this->trans(\n                                'Message from a customer',\n                                array(),\n                                'Emails.Subject'\n                            ),\n                            array(\n                                '{lastname}' => $customer->lastname,\n                                '{firstname}' => $customer->firstname,\n                                '{email}' => $customer->email,\n                                '{id_order}' => (int) $order->id,\n                                '{order_name}' => $order->getUniqReference(),\n                                '{message}' => Tools::nl2br(Tools::htmlentitiesUTF8($msgText)),\n                                '{product_name}' => $product_name,\n                            ),\n                            $to,\n                            $toName,\n                            (string) Configuration::get('PS_SHOP_EMAIL'),\n                            $customer->firstname . ' ' . $customer->lastname,\n                            null,\n                            null,\n                            _PS_MAIL_DIR_,\n                            false,\n                            null,\n                            null,\n                            $customer->email\n                        );\n                    }\n\n                    Tools::redirect('index.php?controller=order-detail&id_order=' . $idOrder . '&messagesent');\n                } else {\n                    $this->redirect_after = '404';\n                    $this->redirect();\n                }\n            }\n        }\n    }\n\n    /**\n     * Assign template vars related to page content.\n     *\n     * @see FrontController::initContent()\n     */\n    public function initContent()\n    {\n        if (Configuration::isCatalogMode()) {\n            Tools::redirect('index.php');\n        }\n\n        $id_order = (int) Tools::getValue('id_order');\n        $id_order = $id_order && Validate::isUnsignedId($id_order) ? $id_order : false;\n\n        if (!$id_order) {\n            $reference = Tools::getValue('reference');\n            $reference = $reference && Validate::isReference($reference) ? $reference : false;\n            $order = $reference ? Order::getByReference($reference)->getFirst() : false;\n            $id_order = $order ? $order->id : false;\n        }\n\n        if (!$id_order) {\n            $this->redirect_after = '404';\n            $this->redirect();\n        } else {\n            if (Tools::getIsset('errorQuantity')) {\n                $this->errors[] = $this->trans('You do not have enough products to request an additional merchandise return.', array(), 'Shop.Notifications.Error');\n            } elseif (Tools::getIsset('errorMsg')) {\n                $this->errors[] = $this->trans('Please provide an explanation for your RMA.', array(), 'Shop.Notifications.Error');\n            } elseif (Tools::getIsset('errorDetail1')) {\n                $this->errors[] = $this->trans('Please check at least one product you would like to return.', array(), 'Shop.Notifications.Error');\n            } elseif (Tools::getIsset('errorDetail2')) {\n                $this->errors[] = $this->trans('For each product you wish to add, please specify the desired quantity.', array(), 'Shop.Notifications.Error');\n            } elseif (Tools::getIsset('errorNotReturnable')) {\n                $this->errors[] = $this->trans('This order cannot be returned', array(), 'Shop.Notifications.Error');\n            } elseif (Tools::getIsset('messagesent')) {\n                $this->success[] = $this->trans('Message successfully sent', array(), 'Shop.Notifications.Success');\n            }\n\n            $order = new Order($id_order);\n            if (Validate::isLoadedObject($order) && $order->id_customer == $this->context->customer->id) {\n                $this->order_to_display = (new OrderPresenter())->present($order);\n\n                $this->context->smarty->assign([\n                    'order' => $this->order_to_display,\n                    'HOOK_DISPLAYORDERDETAIL' => Hook::exec('displayOrderDetail', ['order' => $order]),\n                ]);\n            } else {\n                $this->redirect_after = '404';\n                $this->redirect();\n            }\n            unset($order);\n        }\n\n        parent::initContent();\n        $this->setTemplate('customer/order-detail');\n    }\n\n    public function getBreadcrumbLinks()\n    {\n        $breadcrumb = parent::getBreadcrumbLinks();\n\n        $breadcrumb['links'][] = $this->addMyAccountToBreadcrumb();\n        $breadcrumb['links'][] = array(\n            'title' => $this->trans('Order history', array(), 'Shop.Theme.Customeraccount'),\n            'url' => $this->context->link->getPageLink('history'),\n        );\n\n        return $breadcrumb;\n    }\n}\n"], "filenames": ["classes/Mail.php", "controllers/admin/AdminCustomerThreadsController.php", "controllers/admin/AdminOrdersController.php", "controllers/front/OrderDetailController.php"], "buggy_code_start_loc": [483, 364, 641, 118], "buggy_code_end_loc": [486, 923, 642, 119], "fixing_code_start_loc": [482, 364, 641, 118], "fixing_code_end_loc": [482, 897, 642, 119], "type": "CWE-79", "message": "In PrestaShop from version 1.6.0.4 and before version 1.7.6.8 an attacker is able to inject javascript while using the contact form. The problem is fixed in 1.7.6.8", "other": {"cve": {"id": "CVE-2020-15161", "sourceIdentifier": "security-advisories@github.com", "published": "2020-09-24T22:15:12.260", "lastModified": "2020-09-30T14:27:56.010", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop from version 1.6.0.4 and before version 1.7.6.8 an attacker is able to inject javascript while using the contact form. The problem is fixed in 1.7.6.8"}, {"lang": "es", "value": "En PrestaShop a partir de la versi\u00f3n 1.6.0.4 y antes de la versi\u00f3n 1.7.6.8 un atacante es capaz de inyectar javascript mientras usa el formulario de contacto. El problema se soluciona en la versi\u00f3n 1.7.6.8"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.6.0.4", "versionEndExcluding": "1.7.6.8", "matchCriteriaId": "5FE30358-223A-4C3B-A366-EEAE463AFBAD"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/562a231fec18a928e4a601860416fe11af274672", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/releases/tag/1.7.6.8", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-5cp2-r794-w37w", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/562a231fec18a928e4a601860416fe11af274672"}}