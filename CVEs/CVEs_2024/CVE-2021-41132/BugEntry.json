{"buggy_code": ["\n5.11.0.rc1 (September 2021)\n---------------------------\n\n## New features\n\n- Plate layout improvements and configuration. See PR for details ([#270](https://github.com/ome/omero-web/pull/270))\n- Configure custom favicon ([#311](https://github.com/ome/omero-web/pull/311))\n- OMERO.table Shapes link to OMERO.iviewer ([#310](https://github.com/ome/omero-web/pull/310))\n- URL /webgateway/table/FILE_ID/query supports col_names filter ([#305](https://github.com/ome/omero-web/pull/305))\n- Improve OMERO.table download usability ([#300](https://github.com/ome/omero-web/pull/300))\n- Configure default user and group for search ([#297](https://github.com/ome/omero-web/pull/297))\n- Add /shape/ID endpoint to JSON API ([#291](https://github.com/ome/omero-web/pull/291))\n\n## Bug fixes\n\n- Fix Shift-click to multi-select Wells ([#296](https://github.com/ome/omero-web/pull/296))\n- Handle parent not found on POST webclient/api/links ([#294](https://github.com/ome/omero-web/pull/294))\n- Display time-stamps in local time ([#303](https://github.com/ome/omero-web/pull/303))\n- Public login button uses configured login page ([#312](https://github.com/ome/omero-web/pull/312))\n\n## Dependencies Updates\n\n- Upgrade Underscore to 1.13.1 ([#317](https://github.com/ome/omero-web/pull/317))\n- Upgrade jquery to 3.5.1, jquery.chosen to 1.8.7, jquery.form to 4.3.0, jquery.ui to 1.12.1, jstree 3.3.10 ([#180](https://github.com/ome/omero-web/pull/180))\n\n5.9.2 (May 2021)\n----------------\n\n## Bug fixes\n\n- Fix invalid Z/T values in webclient render_image URL ([#272](https://github.com/ome/omero-web/pull/272))\n- Active group switch handles invalid group ([#273](https://github.com/ome/omero-web/pull/273))\n- Fix delete of user's photo ([#274](https://github.com/ome/omero-web/pull/274))\n- Don't log missing script params as Error ([#275](https://github.com/ome/omero-web/pull/275))\n- Handle ?show=object-id in invalid group ([#276](https://github.com/ome/omero-web/pull/276))\n- OMERO.table query case insensitive ([#277](https://github.com/ome/omero-web/pull/277))\n- Fix changes that cause bugs in OMERO.mapr ([#282](https://github.com/ome/omero-web/pull/282))\n- Fix User Settings page when in 'All Members' context ([#285](https://github.com/ome/omero-web/pull/285))\n\n## New features\n- Add metadata support to webgateway table endpoint ([#283](https://github.com/ome/omero-web/pull/283))\n\n\n5.9.1 (March 2021)\n------------------\n\n## Bug fixes\n\n- Fix regression introduced in 5.9.0 ([#278](https://github.com/ome/omero-web/pull/278))\n\n5.9.0 (March 2021)\n------------------\n\n## New features\n\n- Webclient UI supports Change Owner ([#149](https://github.com/ome/omero-web/pull/149))\n- Filtering by Key-Value pairs supports autocomplete ([#250](https://github.com/ome/omero-web/pull/250))\n- Support URLs as output from scripts ([#233](https://github.com/ome/omero-web/pull/233))]\n- Improved install info in README ([#239](https://github.com/ome/omero-web/pull/239))]\n- Migrate CI to use GitHub actions ([#240](https://github.com/ome/omero-web/pull/240))]\n- Improve performance of OMERO.table loading ([#243](https://github.com/ome/omero-web/pull/243))\n- OMERO.table ROI column links to ROI in OMERO.iviewer ([#264](https://github.com/ome/omero-web/pull/264))\n- Disable placeholder URL popup on tree ([#257](https://github.com/ome/omero-web/pull/257))\n- Add an option to set SESSION_COOKIE_PATH ([#271]https://github.com/ome/omero-web/pull/271). Thanks to [Andrey Yudin](https://github.com/andreyyudin)\n\n## Bug fixes\n\n- Fix Open_with handling of callbacks in right panel ([#232](https://github.com/ome/omero-web/pull/232))\n- Fix /webgateway/dataset/ID/children/ URL (Thanks to [Johannes Dewender](https://github.com/JonnyJD)) ([#245](https://github.com/ome/omero-web/pull/245))\n- Remove broken 'Create Shares' dialog ([#265](https://github.com/ome/omero-web/pull/265))\n- Fix API ?childCount=true when zero objects found ([#249](https://github.com/ome/omero-web/pull/249))\n- Fix partial loading of annotations ([#256](https://github.com/ome/omero-web/pull/256))\n- Fix ignored limit in webgateway/table endpoint ([#268](https://github.com/ome/omero-web/pull/268))\n\n- Security vulnerability fixes for\n  [2021-SV1](https://www.openmicroscopy.org/security/advisories/2021-SV1),\n  [2021-SV2](https://www.openmicroscopy.org/security/advisories/2021-SV2)\n\n5.8.1 (September 2020)\n----------------------\n\n## Bug fixes\n\n- Restore Python 3.5 compatibility ([#228](https://github.com/ome/omero-web/pull/228))\n\n## Other updates\n\n- Add more details to README for release process ([#220](https://github.com/ome/omero-web/pull/220))\n- Run tox in travis instead of Docker ([#219](https://github.com/ome/omero-web/pull/219))\n- Run black autoformatter, add pre-commit hook ([#218](https://github.com/ome/omero-web/pull/218))\n\n5.8.0 (September 2020)\n----------------------\n\n- webclient:\n   - Disable large zip file creation for data download ([#197](https://github.com/ome/omero-web/pull/197))\n   - Fix 'Move to Group' when data owner not in origin group ([#212](https://github.com/ome/omero-web/pull/212))\n   - History results page supports browse to data ([#206](https://github.com/ome/omero-web/pull/206))\n   - Fix shortening of Companion file names ([#198](https://github.com/ome/omero-web/pull/198))\n   - Fix pagination in history page and omero_table ([#203](https://github.com/ome/omero-web/pull/203))\n   - Link ownership matches child owner ([#199](https://github.com/ome/omero-web/pull/199))\n   - Improve download of OMERO.table as csv performance ([#192](https://github.com/ome/omero-web/pull/192))\n   - Fix display of disk usage for very small percentages ([#211](https://github.com/ome/omero-web/pull/211))\n\n- API changes:\n   - @login_required(doConnectionCleanup=False) will close connection unless streaming ([#191](https://github.com/ome/omero-web/pull/191))\n   - Return 404 for webgateway/imgData/ID if image not found ([#209](https://github.com/ome/omero-web/pull/209))\n\n- Other:\n   - Handle missing config for 'scripts to ignore' ([#195](https://github.com/ome/omero-web/pull/195))\n   - Cap pytest-xdist to avoid psutil Travis failures ([#201](https://github.com/ome/omero-web/pull/201))\n\n5.7.1 (July 2020)\n-----------------\n\n- webgateway\n\n   - Always marshal tile metadata on presence of pyramid ([#193](https://github.com/ome/omero-web/pull/193))\n\n5.7.0 (July 2020)\n-----------------\n\n- webclient:\n   - Preserve whitespace and linebreaks in Comments ([#150](https://github.com/ome/omero-web/pull/150))\n   - Improve filtering Images by numerical Key-Value pairs ([#147](https://github.com/ome/omero-web/pull/147))\n   - Fix editing of 'Shares' in webclient ([#162](https://github.com/ome/omero-web/pull/162))\n   - Fix error when user logged-out and public user configured ([#154](https://github.com/ome/omero-web/pull/154))\n   - No longer ignore the default thumbnail size from the configuration ([#165](https://github.com/ome/omero-web/pull/165))\n   - Fix moving data in webclient tree in Python 3.5 ([#170](https://github.com/ome/omero-web/pull/170))\n   - Handle no 'callback' in request.session ([#186](https://github.com/ome/omero-web/pull/186))\n\n- API changes:\n   - Add ROI support to `paths_to_object` ([#159](https://github.com/ome/omero-web/pull/159))\n   - Add Shape support to `paths_to_object` ([#178](https://github.com/ome/omero-web/pull/178))\n   - Add JSON API support for Experimenters and Groups ([#148](https://github.com/ome/omero-web/pull/148))\n\n- Other:\n   - Fix `render_roi_thumbnail` for unset Z/T index ([#157](https://github.com/ome/omero-web/pull/157))\n   - `omero-web` now requires `omero-py 5.7.0`\n   - Add doc for APPLICATION_SERVER_HOST to settings ([#177](https://github.com/ome/omero-web/pull/177))\n   - Set sign_tags to True by default in .bumpversion.cfg ([#176](https://github.com/ome/omero-web/pull/176))\n   - Fix new flake8 warnings ([#174](https://github.com/ome/omero-web/pull/174))\n   - Add `omero-web-docker` to release process instructions ([#156](https://github.com/ome/omero-web/pull/156))\n\n\n5.6.3 (March 2020)\n------------------\n\n- `omero.web.root_application`: allow \"/\" to be overridden ([#123](https://github.com/ome/omero-web/pull/123))\n- Close sessions where user is anonymous but `is_valid_public_url` is false ([#151](https://github.com/ome/omero-web/pull/151))\n\n5.6.2 (February 2020)\n---------------------\n\n- Fix shape_thumbnail using integer division ([#137](https://github.com/ome/omero-web/pull/137))\n- Use chosen plugin for script UI values ([#135](https://github.com/ome/omero-web/pull/135))\n- Rating post only ([#132](https://github.com/ome/omero-web/pull/132))\n- Fix feedback url encode ([#131](https://github.com/ome/omero-web/pull/131))\n- Script GUI file upload ([#128](https://github.com/ome/omero-web/pull/128))\n- Script upload ([#126](https://github.com/ome/omero-web/pull/126))\n- Fix webadmin search firefox ([#125](https://github.com/ome/omero-web/pull/125))\n- Delete check parent links ([#124](https://github.com/ome/omero-web/pull/124))\n- Map ann parent ID ([#119](https://github.com/ome/omero-web/pull/119))\n- Confine projections to no more than 256MiB of raw data ([#115](https://github.com/ome/omero-web/pull/115))\n- Fix color picker hex input box ([#114](https://github.com/ome/omero-web/pull/114))\n- Fix and expand \"open with\" plugin support ([#113](https://github.com/ome/omero-web/pull/113))\n- Table download ([#3](https://github.com/ome/omero-web/pull/3))\n\n5.6.1 (January 2020)\n--------------------\n\n- Quick fix of the show downloads regex ([#109](https://github.com/ome/omero-web/pull/109))\n\n5.6.0 (January 2020)\n--------------------\n\n- Remove support for Python 2 ([#103](https://github.com/ome/omero-web/pull/103))\n- Remove requirement files ([#107](https://github.com/ome/omero-web/pull/107))\n- Use BytesIO for default Thumbnail ([#104](https://github.com/ome/omero-web/pull/104))\n- omero-web requires OMERODIR ([#100](https://github.com/ome/omero-web/pull/100))\n- Ignore OMERO_HOME in settings.py ([#98](https://github.com/ome/omero-web/pull/98))\n- Better exception handling of custom settings ([#94](https://github.com/ome/omero-web/pull/94))\n- Add support for extra NGINX server configuration ([#90](https://github.com/ome/omero-web/pull/90))\n- Fix ROI maks and thumbnails ([#92](https://github.com/ome/omero-web/pull/92))\n- Fix script result failures ([#87](https://github.com/ome/omero-web/pull/87))\n- Fix download of multiple images in a zip ([#76](https://github.com/ome/omero-web/pull/76))\n- Fix race condition while closing tables ([#25](https://github.com/ome/omero-web/pull/25))\n- Fix `omero_ext.path` import ([#77](https://github.com/ome/omero-web/pull/77))\n- Add `omero.web.nginx_server_extra_config` property ([#80](https://github.com/ome/omero-web/pull/80))\n- Use cached config.xml in `omero.webgateway.getClientSettings` ([#83](https://github.com/ome/omero-web/pull/83))\n- Fix dialogs for thumbnail figure and split-view figure scripts ([#73](https://github.com/ome/omero-web/pull/73))\n- Loosen version checks to support 5.5 with 5.6 ([#32](https://github.com/ome/omero-web/pull/32))\n\n## API changes\n\n- OMERO.web now fails to start when `<app>.urls` fails to import ([#79](https://github.com/ome/omero-web/pull/79))\n- OMERO.web uses Django 1.11, upgraded from Django 1.8.\n- omeroweb.http renamed to omeroweb.httprsp to avoid import name\n  clashes with Django http.\n- URLs must be referenced by `name` not path.to.view.method (previously\n  some webgateway URLS lacked a name). For example, instead of\n  `{% url 'webgateway.views.render_image' image_id theZ theT %}`, use\n  `{% url 'webgateway_render_image' image_id theZ theT %}`.\n\n\n5.5.dev2 (August 2019)\n----------------------\n\n- Improve README\n- Add omeroweb.version\n- Move templates to omeroweb/\n- Bump to omero-py 5.5.1.dev1\n- Extract code from ome/openmicroscopy\n- Make minimal changes for a functioning `python setup.py` ([#1](https://github.com/ome/omero-web/pull/1))\n", "\n            $(\"#free_space\").text(FREE_SPACE.filesizeformat());\n\n            var progressbar = $( \"#progressbar\" ),\n                progressLabel = $( \".progress-label\" );\n\n            progressbar.progressbar({\n              value: 1,\n              change: function() {\n                progressLabel.text( progressbar.progressbar( \"value\" ) + \"%\" );\n              },\n            });\n\n            var fillTable = function(chart_data) {\n\n                var tableRows = [],\n                    rowData, rowId;\n                for(i=0; i<chart_data.length; i++) {\n                    rowData = chart_data[i];\n                    rowId = typeof rowData.userId != 'undefined' ? rowData.userId : rowData.groupId;\n                    tableRows.push('<tr><td class=\"link\">' + rowData.label + '(id:'+ rowId +')</td>');\n                    tableRows.push('<td class=\"link\">' + rowData.data.filesizeformat() + '</td></tr>');\n                }\n                \n                $('#drivespaceTable tbody').html(tableRows.join(\"\"));\n                $('#drivespaceTable').show();\n            };\n\n            var plotJson = function(jsonUrl, options) {\n\n                // show 'loading...'\n                $(\"#status\").html('loading...');\n                $(\"#progress\").show();\n\n                $.getJSON(jsonUrl, function(data) {\n\n                    // hide 'loading...'\n                    $(\"#status\").html('');\n                    $(\"#progress\").hide();\n\n                    // save the data to use for chart click handling etc.\n                    $(\"#placeholder\").data('chart_data', data);\n\n                    fillTable(data);\n\n                    // bin all data > 11 users/groups\n                    var total = 0,\n                        chart_data = [],\n                        MAX_SLICES = 10;\n\n                    for(i=0; i<data.length; i++) {\n                        var slice = data[i];\n                        if(i === MAX_SLICES){\n                            chart_data.push({label:'Others', data:slice.data});\n                        } else if (i > MAX_SLICES) {\n                            chart_data[MAX_SLICES].data = chart_data[MAX_SLICES].data + slice.data;\n                        } else {\n                            chart_data.push(slice);\n                        }\n                        total += slice.data;\n                    }\n\n                    $('#total').text(total.filesizeformat());\n                    var usagePercent = 100 * total/(total + FREE_SPACE);\n                    progressbar.progressbar( \"value\", parseInt(Math.round(usagePercent), 10));\n\n                    $(\"#placeholder\").css('width',700).css('height',300);\n                    $.plot($(\"#placeholder\"), chart_data,\n                    {\n                        series: {\n                            pie: {\n                                show: true,\n                                radius: 1,\n                                label: {\n                                    show: true,\n                                    radius: 0.9,\n                                    formatter: function(label, series){\n                                        return '<div class=\"pieLabel\">'+Math.round(series.percent)+'%</div>';\n                                    },\n                                    background: { opacity: 0 }\n                                }\n                            }\n                        },\n                        legend: {\n                            show: true\n                        },\n                        grid: {\n                            hoverable: true,\n                            clickable: true\n                        },\n                    });\n\n                    if (options && options.success) {\n                        options.success();\n                    }\n                });\n            };\n", "\n\n  // Copyright (C) 2015 University of Dundee & Open Microscopy Environment.\n  // All rights reserved.\n\n  // This program is free software: you can redistribute it and/or modify\n  // it under the terms of the GNU Affero General Public License as\n  // published by the Free Software Foundation, either version 3 of the\n  // License, or (at your option) any later version.\n\n  // This program is distributed in the hope that it will be useful,\n  // but WITHOUT ANY WARRANTY; without even the implied warranty of\n  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  // GNU Affero General Public License for more details.\n\n  // You should have received a copy of the GNU Affero General Public License\n  // along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n$(function() {\n\n    if (typeof window.OME === \"undefined\") { window.OME={}; }\n\n    var webindex_url,\n        static_url,\n        data_owners,\n        chgrp_type,\n        target_type,\n        // gets populated with selected objects and possibly also\n        // Filesets IDs if filesets would be split.\n        dryRunTargetObjects,\n        $chgrpform = $(\"#chgrp-form\"),\n        $group_chooser,\n        $move_group_tree,\n        $newbtn,\n        $okbtn;\n\n\n    // external entry point, called by jsTree right-click menu\n    window.OME.handleChgrp = function(webindex, staticurl) {\n        webindex_url = webindex;\n        static_url = staticurl;\n        // gid, gname, oid\n        $chgrpform.dialog({\"title\": \"Move to Group\",\n            height: 450,\n            width: 400});\n        $chgrpform.dialog('open');\n        $chgrpform.empty();\n\n        // Containers to handle everything after fileset check\n        $group_chooser = $(\"<div id='group_chooser'></div>\").appendTo($chgrpform);\n        $move_group_tree = $(\"<div id='move_group_tree'></div>\").appendTo($chgrpform);\n\n        // first we check filesets...\n        checkFilesetSplit();\n\n        //...while we load groups\n        // Need to find which groups we can move selected objects to.\n        // Object owner must be member of target group.\n        var url = webindex_url + \"load_chgrp_groups/?\" + OME.get_tree_selection();\n        $.getJSON(url, function(data){\n            data_owners = data.owners;  // save for later\n            var ownernames = [];\n            for (var o=0; o<data.owners.length; o++) {ownernames.push(data.owners[o][1]);}\n            var headerTxt = \"<p>Move data owned by \" + ownernames.join(\", \") + \".</p>\" +\n                            \"<h1>Please choose target group below:</h1>\";\n            $group_chooser.append(headerTxt);\n\n            // List the target groups...\n            var html = \"\";\n            for (var i=0; i<data.groups.length; i++){\n                var g = data.groups[i];\n                html += \"<div class='chgrpGroup' data-gid='\"+ g.id + \"'>\";\n                html += \"<img src='\" + permsIcon(g.perms) + \"'/>\";\n                html += g.name + \"<hr></div>\";\n            }\n            // If no target groups found...\n            if (data.groups.length === 0) {\n                html = \"<hr><p>No target groups found</p><hr>\";\n                if (data.owners.length === 1) {\n                    html += \"Owner of the data may only be in 1 group.\";\n                } else {\n                    html += \"Owners of the data may only be in 1 group,\";\n                    html += \"or they are not all in any common groups to move data to.\";\n                }\n            }\n            $group_chooser.append(html);\n        });\n    };\n\n    var permsIcon = function(perms) {\n        if (perms.write) return static_url + \"/image/group_green16.png\";\n        if (perms.annotate) return static_url + \"/image/group_orange16.png\";\n        if (perms.read) return static_url + \"/image/group_red16.png\";\n        return static_url + \"/image/personal16.png\";\n    };\n\n    var checkFilesetSplit = function checkFilesetSplit () {\n        // Check if chgrp will attempt to Split a Fileset. Hidden until user hits 'OK'\n        $group_chooser.hide();                      // hide group_chooser while we wait...\n        var sel = OME.get_tree_selection(),\n            selImages = (sel.indexOf('Image') > -1),\n            dtype = sel.split('=')[0],\n            ids = sel.split('=')[1];\n        dryRunTargetObjects = {};\n        dryRunTargetObjects[dtype] = ids;\n        $.get(webindex_url + \"fileset_check/chgrp/?\" + sel, function(html){\n            html = html.trim();\n            if($('div.split_fileset', html).length > 0) {\n                $(html).appendTo($chgrpform);\n                $('.chgrp_confirm_dialog .ui-dialog-buttonset button:nth-child(2)').text(\"Move All\");\n                var filesetIds = [];\n                $('input[name=\"fileset\"]', html).each(function(){\n                    filesetIds.push(parseInt($(this).val(), 10));\n                });\n                if (selImages) {\n                    OME.select_fileset_images(filesetIds);\n                }\n                dryRunTargetObjects['Fileset'] = filesetIds.join(\",\");\n            } else {\n                $group_chooser.show();\n            }\n        });\n    };\n\n    // We do a chgrp 'dryRun' to check for loss of annotations etc.\n    var dryRun = function(targetObjects, groupId) {\n        var dryRunUrl = webindex_url + \"chgrpDryRun/\",\n            data = $.extend({}, targetObjects, {'group_id': groupId});\n        // Show message and start dry-run\n        var msg = \"<p style='margin-bottom:0'><img alt='Loading' src='\" + static_url + \"../webgateway/img/spinner.gif'> \" +\n                  \"Checking which linked objects will be moved...</p>\";\n        var $dryRunSpinner = $(msg).appendTo($group_chooser);\n        $group_chooser.append('<hr>');\n        $.post(dryRunUrl, data, function(jobId){\n            // keep polling for dry-run completion...\n            var getDryRun = function() {\n                var url = webindex_url + \"activities_json/\",\n                    data = {'jobId': jobId};\n                $.get(url, data, function(dryRunData) {\n                    if (dryRunData.finished) {\n                        // Handle chgrp errors by showing message...\n                        if (dryRunData.error) {\n                            var errMsg = dryRunData.error;\n                            // More assertive error message\n                            errMsg = errMsg.replace(\"may not move\", \"Cannot move\");\n                            var errHtml = \"<img style='vertical-align: middle; position:relative; top:-3px' src='\" +\n                                static_url + \"../webgateway/img/failed.png'> \";\n                            // In messages, replace Image[123] with link to image\n                            var getLinkHtml = function(imageId) {\n                                var id = imageId.replace(\"Image[\", \"\").replace(\"]\", \"\");\n                                return \"<a href='\" + webindex_url + \"?show=image-\" + id + \"'>\" + imageId + \"</a>\";\n                            };\n                            errHtml += errMsg.replace(/Image\\[([0-9]*)\\]/g, getLinkHtml);\n                            $dryRunSpinner.html(errHtml);\n                            $okbtn.hide();\n                            return;\n                        }\n\n                        let html = OME.formatDryRun(dryRunData);\n                        html = \"<b style='font-weight: bold'>Move:</b> \" + html;\n                        $dryRunSpinner.html(html);\n                    } else {\n                        // try again...\n                        setTimeout(getDryRun, 200);\n                    }\n                });\n            };\n            getDryRun();\n        });\n    };\n\n    // Called from \"New...\" button, simply add input to form (and hide tree)\n    var newContainer = function newContainer() {\n\n        if ($(\"input[name='new_container_name']\", $chgrpform).length > 0) {\n            return;     // already clicked 'New'!\n        }\n        var ownerId = data_owners[0][0];\n        $move_group_tree.hide();\n        $(\"<p>New \" + target_type.capitalize() + \" name: <input name='new_container_name'/></p>\")\n                .appendTo($chgrpform).trigger('click');\n        // Hidden input\n        $(\"<input name='new_container_type' value='\" + target_type + \"'/>\")\n                .appendTo($chgrpform).hide();\n    };\n\n\n    // Handle clicking on specific group in chgrp dialog...\n    $chgrpform.on( \"click\", \".chgrpGroup\", function() {\n\n        var $this = $(this),\n            gid = $this.attr('data-gid'),\n            chgrp_target_url = webindex_url + \"load_chgrp_target/\" + gid,\n            dtype,\n            dids;\n\n        // Remove all groups (except the chosen one)\n        $(\".chgrpGroup\").remove();\n        // We remove .chgrpGroup to avoid clicking again on .chgrpGroup\n        $group_chooser.append($this.removeClass('chgrpGroup'));\n\n        // Add hidden inputs to include 'group_id' in the POST data\n        $(\"<input name='group_id' value='\"+ gid +\"'/>\")\n                .appendTo($chgrpform).hide();\n\n        // Add group & selected items to chgrp form\n        var selobjs = OME.get_tree_selection().split(\"&\");  // E.g. Image=1,2&Dataset=3\n        for (var i = 0; i < selobjs.length; i++) {\n            dtype = selobjs[i].split(\"=\")[0];\n            dids = selobjs[i].split(\"=\")[1];\n            $(\"<input name='\"+ dtype +\"' value='\"+ dids +\"'/>\")\n                .appendTo($chgrpform).hide();\n        }\n\n        chgrp_type = dtype;     // This will be the dtype of last object\n        if (chgrp_type == \"Dataset\") target_type = \"project\";\n        else if (chgrp_type == \"Image\") target_type = \"dataset\";\n        else if (chgrp_type == \"Plate\") target_type = \"screen\";\n        chgrp_target_url += \"/\"+target_type+\"/\";\n        chgrp_target_url += \"?owner=\" + data_owners[0][0];  // ID of the (first) owner\n\n\n        if (chgrp_type == \"Project\" || chgrp_type == \"Screen\") {\n            // Don't need to show anything\n        } else {\n            // we load a tree - then give it basic selection / expansion behaviour. jsTree would have been overkill!?\n            $(\"#move_group_tree\").load(chgrp_target_url, function(){\n                var node_click = function(){\n                    $(\"#move_group_tree a\").removeClass(\"jstree-clicked\");\n                    // only allow selection of correct nodes\n                    if ($(this).parent().attr('rel') == target_type) {\n                        $(\"a\" ,$(this).parent()).addClass(\"jstree-clicked\");\n                    }\n                    // toggle any children\n                    $(\"ul\" ,$(this).parent()).toggle();\n                };\n                $(\"#move_group_tree a\").on('click', node_click);\n                $(\"#move_group_tree ins\").on('click', node_click);\n                $newbtn.show();\n            });\n        }\n\n        // Now we know target group, can do dry-run to check lost annotations etc...\n        dryRun(dryRunTargetObjects, gid);\n    });\n\n\n    // After we edit the chgrp dialog to handle Filesets, we need to clean-up\n    var resetChgrpForm = function() {\n        $('span', $okbtn).text(\"OK\");\n        $okbtn.show();\n        $newbtn.hide();\n        $(\"#move_group_tree\").show();\n        $(\".split_filesets_info\", $chgrpform).remove();\n    };\n\n    // set-up the dialog\n    $chgrpform.dialog({\n        dialogClass: 'chgrp_confirm_dialog',\n        autoOpen: false,\n        resizable: true,\n        height: 350,\n        width:520,\n        modal: true,\n        buttons: {\n            \"New...\": function() {\n                newContainer();\n            },\n            \"OK\": function() {\n                var $thisBtn = $('.chgrp_confirm_dialog .ui-dialog-buttonset button:nth-child(2)');\n                // If we have split filesets, first submission is to confirm 'Move All'?\n                // We hide the split_filesets info panel and rename submit button to 'OK'\n                if ($(\".split_filesets_info .split_fileset\", $chgrpform).length > 0 && $thisBtn.text() == 'Move All') {\n                    $(\"#group_chooser\").show();\n                    $(\".split_filesets_info\", $chgrpform).hide();\n                    $thisBtn.text('OK');\n                    return false;\n                }\n                $chgrpform.trigger('submit');\n            },\n            \"Cancel\": function() {\n                resetChgrpForm();\n                // TODO - handle this in new jsTree. Reset to original selection if \"Move All\" has changed selection\n                // var datatree = $.jstree._focused();\n                // datatree.deselect_all();\n                // datatree.reselect();        // revert to previous selection\n                $( this ).dialog( \"close\" );\n            }\n        }\n    });\n\n    $newbtn = $('.chgrp_confirm_dialog .ui-dialog-buttonset button:nth-child(1)');\n    $newbtn.hide();\n    $okbtn = $('.chgrp_confirm_dialog .ui-dialog-buttonset button:nth-child(2)');\n\n    // handle chgrp \n    $chgrpform.ajaxForm({\n        beforeSubmit: function(data, $form){\n            // Don't submit if we haven't populated the form with group etc.\n            if (data.length === 0) {\n                OME.alert_dialog(\"Please choose target group.\");\n                return false;\n            }\n            if ($(\"input[name='group_id']\", $form).length === 0) return false;\n            $chgrpform.dialog(\"close\");\n            var chgrp_target = $(\"#move_group_tree a.jstree-clicked\");\n            if (chgrp_target.length == 1){\n                data.push({'name':'target_id', 'value': chgrp_target.parent().attr('id')});\n            }\n        },\n        success: function(data) {\n            var inst = $.jstree.reference('#dataTree');\n            var remove = data.update.remove;\n            var childless = data.update.childless;\n\n            var removalClosure = [];\n            var unremovedParentClosure;\n            var removeType = function(type, ids) {\n                $.each(ids, function(index, id) {\n                    var removeLocated = inst.locate_node(type + '-' + id);\n                    if (removeLocated) {\n                        $.each(removeLocated, function(index, val) {\n                            if (unremovedParentClosure !== undefined &&\n                                val.id === unremovedParentClosure.id) {\n                                // The new selection is also to be deleted, so select its parent\n                                unremovedParentClosure = inst.get_node(inst.get_parent(val));\n                            }\n                            else if (inst.is_selected(val)) {\n                                // This node was selected, mark its parent to be selected instead\n                                unremovedParentClosure = inst.get_node(inst.get_parent(val));\n                            }\n                        // Accumulate nodes for deletion so the new selection can occur before delete\n                        removalClosure.push(val);\n                        });\n                    }\n                });\n            };\n\n            // Find and remove\n            // This is done in a specific order so that the correct node can be selected\n            var typeOrder = ['image', 'acquisition', 'dataset', 'plate', 'project', 'screen'];\n            $.each(typeOrder, function(index, type) {\n                if (remove.hasOwnProperty(type)) {\n                    removeType(type, remove[type]);\n                }\n            });\n\n            // Select the closest parent that was not part of the chgrp\n            inst.deselect_all(true);\n            inst.select_node(unremovedParentClosure);\n\n            // Update the central panel in case chgrp removes an icon\n            $.each(removalClosure, function(index, node) {\n                inst.delete_node(node);\n                var e = {'type': 'delete_node'};\n                var data = {'node': node,\n                            'old_parent': inst.get_parent(node)};\n                update_thumbnails_panel(e, data);\n            });\n\n            function markChildless(ids, dtype) {\n                $.each(ids, function(index, id) {\n                    var childlessLocated = inst.locate_node(property + '-' + id);\n                    // If some nodes were found, make them childless\n                    if (childlessLocated) {\n                        $.each(childlessLocated, function(index, node) {\n                            node.state.loaded = true;\n                            inst.redraw_node(node);\n                        });\n\n                    }\n                });\n            }\n\n            // Find and mark childless\n            for (var property in childless) {\n                if (childless.hasOwnProperty(property)) {\n                    markChildless(childless[property], property);\n                }\n\n            }\n\n            OME.showActivities();\n        }\n    });\n\n    window.OME.formatDryRun = function (dryRunData, showParents) {\n        var html = \"\",\n            move = [], count,\n            unlink = [];\n        [\"Projects\", \"Datasets\", \"Screens\",\n            \"Plates\", \"Wells\", \"Images\"].forEach(function (otype) {\n                if (otype in dryRunData.includedObjects) {\n                    count = dryRunData.includedObjects[otype].length;\n                    if (count === 1) otype = otype.slice(0, -1);  // remove s\n                    move.push(count + \" \" + otype);\n                }\n            });\n        html += move.join(\", \");\n\n        function formatObjects(item) {\n            otype = item[0];\n            unlinked = item[1];\n            count = unlinked.length;\n            if (count === 0) return '';\n            if (count === 1) otype = otype.slice(0, -1);  // remove s\n            var namesList = [], names;\n            unlinked.forEach(function (u) {\n                namesList.push(u.name);\n            });\n            names = namesList.join(\", \");\n            names = \" <i title='\" + namesList.join(\"\\n\") + \"'>(\" + names.slice(0, 40) + (names.length > 40 ? \"...\" : \"\") + \")</i>\";\n            return count + \" \" + otype + names;\n        }\n\n        if (showParents) {\n            parents = Object.entries(dryRunData.unlinkedParents).map(formatObjects);\n            html += \"<br/><b style='font-weight: bold'>Will be removed from:</b> \" + parents.join(\", \");\n        }\n\n        unlink = Object.entries(dryRunData.unlinkedChildren).map(formatObjects);\n        anns = dryRunData.unlinkedAnnotations;\n        // Format Tags, Files\n        unlink = unlink.concat(Object.entries({'Tags': anns.Tags, 'Files': anns.Files}).map(formatObjects));\n        unlink = unlink.filter(l => l.length > 0);\n\n        if (anns.Comments.length > 0) {\n            count = anns.Comments.length;\n            unlink.push(count + \" Comment\" + (count > 1 ? \"s\" : \"\"));\n        }\n        if (anns.Others > 0) {\n            count = anns.Others;\n            unlink.push(count + \" Other\" + (count > 1 ? \"s\" : \"\"));\n        }\n\n        if (unlink.length > 0) {\n            html += \"<br/><b style='font-weight: bold'>Not included:</b> \" + unlink.join(\", \");\n        }\n        return html;\n    }\n});\n", "\n\n  // Copyright (C) 2020 University of Dundee & Open Microscopy Environment.\n  // All rights reserved.\n\n  // This program is free software: you can redistribute it and/or modify\n  // it under the terms of the GNU Affero General Public License as\n  // published by the Free Software Foundation, either version 3 of the\n  // License, or (at your option) any later version.\n\n  // This program is distributed in the hope that it will be useful,\n  // but WITHOUT ANY WARRANTY; without even the implied warranty of\n  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  // GNU Affero General Public License for more details.\n\n  // You should have received a copy of the GNU Affero General Public License\n  // along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n$(function() {\n\n    if (typeof window.OME === \"undefined\") { window.OME={}; }\n\n    var $chownform = $(\"#chown-form\");\n    var datatree;\n    // Ojbects selected in jsTree\n    var selobjs = [];\n    var dataOwners = [];\n    var loadingExps = false;\n    var exps = [];\n    var dryrunInProgress = false;\n    var dryrunJobId;\n    var $okbtn;\n    var dryrunTimout;\n\n    // template literals not supported on IE 11 (1.3% global browser share)\n    var templateText = `\n        <!-- Hidden fields for objects. e.g. name='Image' value='1,2,3' -->\n        <% _.each(selobjs, function(obj, idx) { %>\n            <input name='<%= obj.split(\"=\")[0] %>' value='<%= obj.split(\"=\")[1] %>' hidden/>\n        <% }) %>\n\n        <!-- List target new owners -->\n\n        <% if (loadingExps) { %>\n            <p>Loading users...</p>\n        <% } else if (exps.length > 0) { %>\n            <h1>Please choose new owner for the selected data:</h1>\n\n            <% _.each(exps, function(exp, idx) { %>\n                <label>\n                    <input name='owner_id' type='radio' value='<%= exp['@id'] %>'/>\n                    <%= exp.FirstName%> <%= exp.LastName %> \n                </label>\n                <br/>\n            <% }) %>\n        <% } else { %>\n            <p>No users found</p>\n        <% } %>\n        <hr/>\n\n        <!-- Show dry-run here -->\n        <div class='dryrun'>\n        <% if (dryrunInProgress) { %>\n            <p style='margin-bottom:0'>\n                <img alt='Loading' src='<%= static_url %>../webgateway/img/spinner.gif' />\n                Checking which objects will be moved...\n                <button title=\"Cancel dry-run\" type=\"button\">Cancel</button>\n            </p>\n        <% } %>\n        </div>\n        <hr/>\n    `\n    var template = _.template(templateText);\n\n    // Update the $chownform with current state\n    function render() {\n\n        var html = template({\n            selobjs: selobjs,\n            exps: exps,\n            loadingExps: loadingExps,\n            dryrunInProgress: dryrunInProgress,\n            static_url: WEBCLIENT.URLS.static_webclient,\n        });\n        $chownform.html(html);\n    }\n\n    // external entry point, called by jsTree right-click menu\n    window.OME.handleChown = function() {\n        // gid, gname, oid\n        $chownform.dialog({\"title\": \"Change Owner\",\n            height: 450,\n            width: 400});\n        $chownform.dialog('open');\n\n        // Add selected items to chown form as hidden inputs\n        selobjs = OME.get_tree_selection().split(\"&\");  // E.g. Image=1,2&Dataset=3\n        datatree = $.jstree.reference('#dataTree');\n        dataOwners = _.uniq(datatree.get_selected(true).map(function(s){return s.data.obj.ownerId}));\n        $okbtn = $('.chown_confirm_dialog .ui-dialog-buttonset button:nth-child(2)');\n\n        loadUsers();    // this will then call dryRun()\n\n        render();\n    };\n\n    function setupEvents() {\n\n        // When user chooses target Owner, do chown dry-run...\n        $chownform.on(\"click\", \".dryrun button\", function (event) {\n            cancelDryRun();\n        });\n    }\n\n    setupEvents();\n\n    function loadUsers() {\n        // Need to find users we can move selected objects to.\n        // Object owner must be member of current group.\n        var gid = WEBCLIENT.active_group_id;\n        var url = WEBCLIENT.URLS.api_base + \"m/experimentergroups/\" + gid + \"/experimenters/\";\n        loadingExps = true;\n        $.getJSON(url, function (data) {\n            loadingExps = false;\n            // Other group members (ignore current owner if just 1)\n            exps = data.data;\n            if (dataOwners.length === 1) {\n                exps = exps.filter(function (exp) {\n                    return exp['@id'] != dataOwners[0];\n                });\n            }\n\n            // we can do dry-run with any user (result is always the same)\n            if (exps.length > 0) {\n                dryRun(exps[0]['@id']);\n            }\n\n            render();\n        });\n    }\n\n    // We do a chown 'dryRun' to check for loss of annotations etc.\n    function dryRun(ownerId) {\n        dryrunInProgress = true;\n        var dryRunUrl = WEBCLIENT.URLS.webindex + \"chownDryRun/\",\n            data = { 'owner_id': ownerId };\n            selobjs.forEach(o => {\n                data[o.split('=')[0]] = o.split(\"=\")[1];\n            });\n\n        $.post(dryRunUrl, data, function (jobId) {\n            dryrunJobId = jobId;\n            // keep polling for dry-run completion...\n            var getDryRun = function () {\n                var url = WEBCLIENT.URLS.webindex + \"activities_json/\",\n                    data = { 'jobId': jobId };\n                $.get(url, data, function (dryRunData) {\n                    if (dryRunData.finished) {\n                        dryrunJobId = undefined;\n                        // Handle chown errors by showing message...\n                        if (dryRunData.error) {\n                            var errMsg = dryRunData.error;\n                            // More assertive error message\n                            errMsg = errMsg.replace(\"may not move\", \"Cannot move\");\n                            var errHtml = \"<img style='vertical-align: middle; position:relative; top:-3px' src='\" +\n                                static_url + \"../webgateway/img/failed.png'> \";\n                            // In messages, replace Image[123] with link to image\n                            var getLinkHtml = function (imageId) {\n                                var id = imageId.replace(\"Image[\", \"\").replace(\"]\", \"\");\n                                return \"<a href='\" + webindex_url + \"?show=image-\" + id + \"'>\" + imageId + \"</a>\";\n                            };\n                            errHtml += errMsg.replace(/Image\\[([0-9]*)\\]/g, getLinkHtml);\n                            $('.dryrun', $chownform).html(errHtml);\n                            $okbtn.hide();\n                            return;\n                        }\n                        dryrunInProgress = false;\n\n                        // formatDryRun is in ome.chgrp.js\n                        var showParents = true;\n                        let html = OME.formatDryRun(dryRunData, showParents);\n                        html = \"<p><b style='font-weight: bold'>Change owner of:</b> \" + html + '</p>';\n                        // replace spinner and 'Cancel' button...\n                        $('.dryrun', $chownform).html(html);\n                    } else {\n                        // try again...\n                        dryrunTimout = setTimeout(getDryRun, 2000);\n                    }\n                });\n            };\n            getDryRun();\n        });\n    };\n\n    function cancelDryRun() {\n        if (dryrunTimout) {\n            clearTimeout(dryrunTimout);\n        }\n        if (!dryrunJobId) return;\n\n        var dryRunUrl = WEBCLIENT.URLS.webindex + \"activities_json/\";\n        $.ajax({\n            url: dryRunUrl,\n            type: 'DELETE',\n            data: JSON.stringify({jobId: dryrunJobId}),\n            success: function (result) {\n                // Do something with the result\n            }\n        });\n    }\n\n    // set-up the dialog\n    $chownform.dialog({\n        dialogClass: 'chown_confirm_dialog',\n        autoOpen: false,\n        resizable: true,\n        height: 350,\n        width:520,\n        modal: true,\n        buttons: {\n            \"Cancel\": function() {\n                cancelDryRun();\n                $( this ).dialog( \"close\" );\n            },\n            \"OK\": function () {\n                $chownform.submit();\n            },\n        },\n        close: function (event, ui) {\n            cancelDryRun();\n        }\n    });\n\n    // handle chown \n    $chownform.ajaxForm({\n        beforeSubmit: function(data, $form){\n            var owner_data = data.filter(d => d.name === 'owner_id');\n            // Don't submit if we haven't populated the form with users etc.\n            if (owner_data.length === 0) {\n                OME.alert_dialog(\"Please choose target user.\");\n                return false;\n            }\n        },\n        success: function(data) {\n            // If we're viewing 'All Members' we don't need to change anything in the tree\n            if (WEBCLIENT.active_user.id != -1) {\n                // Otherwise, we need to remove selected nodes\n                var inst = $.jstree.reference('#dataTree');\n                inst.get_selected(true).forEach(function(node){\n                    inst.delete_node(node);\n                });\n            }\n            $chownform.dialog( \"close\" );\n            OME.showActivities();\n        }\n    });\n\n});\n", "//   Copyright (C) 2016 University of Dundee & Open Microscopy Environment.\n//   All rights reserved.\n\n//   This program is free software: you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as\n//   published by the Free Software Foundation, either version 3 of the\n//   License, or (at your option) any later version.\n\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n\n//   You should have received a copy of the GNU Affero General Public License\n//   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nvar CommentsPane = function CommentsPane($element, opts) {\n\n    var $header = $element.children('h1'),\n        $body = $element.children('div'),\n        $comments_container = $(\"#comments_container\"),\n        objects = opts.selected;\n    var self = this;\n\n    var tmplText = $('#comments_template').html();\n    var commentsTempl = _.template(tmplText);\n\n\n    var initEvents = (function initEvents() {\n\n        $header.on('click', function(){\n            $header.toggleClass('closed');\n            $body.slideToggle();\n\n            var expanded = !$header.hasClass('closed');\n            OME.setPaneExpanded('comments', expanded);\n\n            if (expanded && $comments_container.is(\":empty\")) {\n                this.render();\n            }\n        }.bind(this));\n    }).bind(this);\n\n    // Comment field - show/hide placeholder and submit button.\n    $(\"#add_comment_wrapper label\").inFieldLabels();\n    $(\"#id_comment\")\n        .on('blur', function(event){\n            setTimeout(function(){\n                $(\"#add_comment_form input[type='submit']\").hide();\n            }, 200);    // Delay allows clicking on the submit button!\n        })\n        .on('focus', function(){\n            $(\"#add_comment_form input[type='submit']\").show();\n        });\n\n    // bind removeItem to various [-] buttons\n    $(\"#comments_container\").on(\"click\", \".removeComment\", function(event){\n        var url = $(this).attr('url');\n        var objId = objects.join(\"|\");\n        OME.removeItem(event, \".ann_comment_wrapper\", url, objId);\n        return false;\n    });\n\n    // handle submit of Add Comment form\n    $(\"#add_comment_form\").ajaxForm({\n        beforeSubmit: function(data, $form, options) {\n            var textArea = $('#add_comment_form textarea');\n            if (textArea.val().trim().length === 0) return false;\n            // here we specify what objects are to be annotated\n            objects.forEach(function(o){\n                var dtypeId = o.split(\"-\");\n                data.push({\"name\": dtypeId[0], \"value\": dtypeId[1]});\n            });\n        },\n        success: function(html) {\n            $(\"#id_comment\").val(\"\");\n            self.render();\n        },\n    });\n\n\n    this.render = function render() {\n\n        if ($comments_container.is(\":visible\")) {\n\n            if ($comments_container.is(\":empty\")) {\n                $comments_container.html(\"Loading comments...\");\n            }\n\n            var request = objects.map(function(o){\n                return o.replace(\"-\", \"=\");\n            });\n            request = request.join(\"&\");\n\n            $.getJSON(WEBCLIENT.URLS.webindex + \"api/annotations/?type=comment&\" + request, function(data){\n\n\n                // manipulate data...\n                // make an object of eid: experimenter\n                var experimenters = data.experimenters.reduce(function(prev, exp){\n                    prev[exp.id + \"\"] = exp;\n                    return prev;\n                }, {});\n\n                // Populate experimenters within anns\n                var anns = data.annotations.map(function(ann){\n                    ann.owner = experimenters[ann.owner.id];\n                    if (ann.link && ann.link.owner) {\n                        ann.link.owner = experimenters[ann.link.owner.id];\n                    }\n                    ann.addedBy = [ann.link.owner.id];\n                    ann.textValue = _.escape(ann.textValue);\n                    return ann;\n                });\n\n                // Show most recent comments at the top\n                anns.sort(function(a, b) {\n                    return a.date < b.date ? 1 : -1;\n                });\n\n                // Remove duplicates (same comment on multiple objects)\n                anns = anns.filter(function(ann, idx){\n                    // already sorted, so just compare with last item\n                    return (idx === 0 || anns[idx - 1].id !== ann.id);\n                });\n\n                // Update html...\n                var html = \"\";\n                if (anns.length > 0) {\n                    html = commentsTempl({'anns': anns,\n                                          'static': WEBCLIENT.URLS.static_webclient,\n                                          'webindex': WEBCLIENT.URLS.webindex});\n                }\n                $comments_container.html(html);\n\n                // Finish up...\n                OME.linkify_element($( \".commentText\" ));\n                OME.filterAnnotationsAddedBy();\n                $(\".tooltip\", $comments_container).tooltip_init();\n            });\n        }\n    };\n\n\n    initEvents();\n\n    if (OME.getPaneExpanded('comments')) {\n        $header.toggleClass('closed');\n        $body.show();\n    }\n\n    this.render();\n};", "//   Copyright (C) 2016 University of Dundee & Open Microscopy Environment.\n//   All rights reserved.\n\n//   This program is free software: you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as\n//   published by the Free Software Foundation, either version 3 of the\n//   License, or (at your option) any later version.\n\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n\n//   You should have received a copy of the GNU Affero General Public License\n//   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nvar CustomAnnsPane = function CustomAnnsPane($element, opts) {\n\n    var $header = $element.children('h1'),\n        $body = $element.children('div'),\n        $custom_annotations = $(\"#custom_annotations\"),\n        objects = opts.selected;\n\n    var tmplText = $('#customanns_template').html();\n    var customannsTempl = _.template(tmplText);\n\n\n    var initEvents = (function initEvents() {\n\n        $header.on('click', function(){\n            $header.toggleClass('closed');\n            $body.slideToggle();\n\n            var expanded = !$header.hasClass('closed');\n            OME.setPaneExpanded('others', expanded);\n\n            if (expanded && $custom_annotations.is(\":empty\")) {\n                this.render();\n            }\n        }.bind(this));\n    }).bind(this);\n\n\n    // display xml in a new window      \n    $body.on( \"click\", \".show_xml\", function(event) {\n        var xml = $(event.target).next().html();\n        var newWindow=window.open('','','height=500,width=500,scrollbars=yes, top=50, left=100');\n        newWindow.document.write(xml);\n        newWindow.document.close();\n        return false;\n    });\n\n\n    this.render = function render() {\n\n        if ($custom_annotations.is(\":visible\")) {\n\n            if ($custom_annotations.is(\":empty\")) {\n                $custom_annotations.html(\"Loading other annotations...\");\n            }\n\n            var request = objects.map(function(o){\n                return o.replace(\"-\", \"=\");\n            });\n            request = request.join(\"&\");\n\n            $.getJSON(WEBCLIENT.URLS.webindex + \"api/annotations/?type=custom&\" + request, function(data){\n\n                // manipulate data...\n                // make an object of eid: experimenter\n                var experimenters = data.experimenters.reduce(function(prev, exp){\n                    prev[exp.id + \"\"] = exp;\n                    return prev;\n                }, {});\n\n                // Populate experimenters within anns\n                var anns = data.annotations.map(function(ann){\n                    ann.owner = experimenters[ann.owner.id];\n                    if (ann.link && ann.link.owner) {\n                        ann.link.owner = experimenters[ann.link.owner.id];\n                    }\n\n                    // AddedBy IDs for filtering\n                    ann.addedBy = [ann.link.owner.id];\n                    // convert 'class' to 'type' E.g. XmlAnnotationI to Xml\n                    ann.type = ann.class.replace('AnnotationI', '');\n                    var attrs = ['textValue', 'timeValue', 'termValue', 'longValue', 'doubleValue', 'boolValue'];\n                    attrs.forEach(function(a){\n                        if (ann[a] !== undefined){\n                            ann.value = _.escape(ann[a]);\n                        }\n                    });\n                    if (objects.length > 1) {\n                        ann.parent = {\n                            'class': ann.link.parent.class.slice(0, -1), // slice parent class 'ProjectI' > 'Project'\n                            'id': ann.link.parent.id\n                        };\n                    }\n                    return ann;\n                });\n\n                // Show most recent annotations at the top\n                anns.sort(function(a, b) {\n                    return a.date < b.date;\n                });\n\n                // Update html...\n                var html = \"\";\n                if (anns.length > 0) {\n                    html = customannsTempl({'anns': anns,\n                                          'static': WEBCLIENT.URLS.static_webclient,\n                                          'webindex': WEBCLIENT.URLS.webindex});\n                }\n                $custom_annotations.html(html);\n\n                // Finish up...\n                OME.filterAnnotationsAddedBy();\n                $(\".tooltip\", $custom_annotations).tooltip_init();\n            });\n        }\n    };\n\n\n    initEvents();\n\n    if (OME.getPaneExpanded('others')) {\n        $header.toggleClass('closed');\n        $body.show();\n    }\n\n    this.render();\n};", "//   Copyright (C) 2016 University of Dundee & Open Microscopy Environment.\n//   All rights reserved.\n\n//   This program is free software: you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as\n//   published by the Free Software Foundation, either version 3 of the\n//   License, or (at your option) any later version.\n\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n\n//   You should have received a copy of the GNU Affero General Public License\n//   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nvar FileAnnsPane = function FileAnnsPane($element, opts) {\n\n    var $header = $element.children('h1'),\n        $body = $element.children('div'),\n        $fileanns_container = $(\"#fileanns_container\"),\n        objects = opts.selected;\n    var self = this;\n\n    var tmplText = $('#fileanns_template').html();\n    var filesTempl = _.template(tmplText);\n\n\n    var initEvents = (function initEvents() {\n\n        $header.on('click', function(){\n            $header.toggleClass('closed');\n            $body.slideToggle();\n\n            var expanded = !$header.hasClass('closed');\n            OME.setPaneExpanded('files', expanded);\n\n            if (expanded && $fileanns_container.is(\":empty\")) {\n                this.render();\n            }\n        }.bind(this));\n    }).bind(this);\n\n\n    // set-up the attachment selection form to use AJAX. (requires jquery.form.js plugin)\n    if ($(\"#choose_attachments_form\").length === 0) {\n        $(\"<form id='choose_attachments_form' title='Choose attachments' \" +\n            \"action='\" + WEBCLIENT.URLS.webindex + \"annotate_file/' method='post'></form>\")\n            .hide().appendTo('body');\n    }\n    $('#choose_attachments_form').ajaxForm({\n        beforeSubmit: function(data) {\n            $(\"#batch_attachments_form\").dialog( \"close\" );\n            $(\"#fileann_spinner\").show();\n        },\n        success: function() {\n            $(\"#fileann_spinner\").hide();\n            // update the list of file annotations and bind actions\n            self.render();\n        },\n        error: function(data){\n            $(\"#fileann_spinner\").hide();\n            alert(\"Upload failed [\" + data.status + \" \" + data.statusText + \"]\");\n        }\n    });\n    // prepare dialog for choosing file to attach...\n    $(\"#choose_attachments_form\").dialog({\n        autoOpen: false,\n        resizable: false,\n        height: 420,\n        width:360,\n        modal: true,\n        buttons: {\n            \"Accept\": function() {\n                // simply submit the form (AJAX handling set-up above)\n                $(\"#choose_attachments_form\").trigger('submit');\n                $( this ).dialog( \"close\" );\n            },\n            \"Cancel\": function() {\n                $( this ).dialog( \"close\" );\n            }\n        }\n    });\n    // show dialog for choosing file to attach...\n    $(\"#choose_file_anns\").on('click', function() {\n        // show dialog first, then do the AJAX call to load files...\n        var $attach_form = $( \"#choose_attachments_form\" );\n        $attach_form.dialog( \"open\" );\n        // load form via AJAX...\n        var load_url = $(this).attr('href');\n        $attach_form.html(\"&nbsp<br><img src='\" + WEBCLIENT.URLS.static_webgateway + \"img/spinner.gif' /> Loading attachments\");\n        $attach_form.load(load_url);\n        return false;\n    });\n\n\n    // Show/hide checkboxes beside files to select files for scripts\n    $(\".toolbar input[type=button]\", $body).on('click',\n        OME.toggleFileAnnotationCheckboxes\n    );\n    $(\"#fileanns_container\").on(\n        \"change\", \"li input[type=checkbox]\",\n        OME.fileAnnotationCheckboxChanged\n    );\n\n    $(\"#fileanns_container\").on(\"click\", \".removeFile\", function(event) {\n        var url = $(this).attr('href'),\n            parents = objects.join(\"|\");  // E.g image-123|image-456\n        OME.removeItem(event, \".file_ann_wrapper\", url, parents);\n        return false;\n    });\n\n    // delete action (files)\n    $(\"#fileanns_container\").on(\"click\", \".deleteFile\", function(event) {\n        var url = $(this).attr('href');\n        OME.deleteItem(event, \"file_ann_wrapper\", url);\n    });\n\n\n    var isNotCompanionFile = function isNotCompanionFile(ann) {\n        return ann.ns !== OMERO.constants.namespaces.NSCOMPANIONFILE;\n    };\n\n    var compareParentName = function(a, b){\n        if (!a.parent.name || !b.parent.name) {\n            return 1;\n        }\n        return a.parent.name.toLowerCase() > b.parent.name.toLowerCase() ? 1 : -1;\n    };\n\n\n    this.render = function render() {\n\n        if ($fileanns_container.is(\":visible\")) {\n\n            if ($fileanns_container.is(\":empty\")) {\n                $fileanns_container.html(\"Loading attachments...\");\n            }\n\n            var request = objects.map(function(o){\n                return o.replace(\"-\", \"=\");\n            });\n            request = request.join(\"&\");\n\n            $.getJSON(WEBCLIENT.URLS.webindex + \"api/annotations/?type=file&\" + request, function(data){\n\n                var checkboxesAreVisible = $(\n                    \"#fileanns_container input[type=checkbox]:visible\"\n                ).length > 0;\n\n                // manipulate data...\n                // make an object of eid: experimenter\n                var experimenters = data.experimenters.reduce(function(prev, exp){\n                    prev[exp.id + \"\"] = exp;\n                    return prev;\n                }, {});\n\n                // Populate experimenters within anns\n                var anns = data.annotations.map(function(ann){\n                    ann.owner = experimenters[ann.owner.id];\n                    if (ann.link && ann.link.owner) {\n                        ann.link.owner = experimenters[ann.link.owner.id];\n                    }\n                    // AddedBy IDs for filtering\n                    ann.addedBy = [ann.link.owner.id];\n                    ann.description = _.escape(ann.description);\n                    ann.file.size = ann.file.size !== null ? ann.file.size.filesizeformat() : \"\";\n                    return ann;\n                });\n                // Don't show companion files\n                anns = anns.filter(isNotCompanionFile);\n\n                \n                // If we are batch annotating multiple objects, we show a summary of each tag\n                if (objects.length > 1) {\n\n                    // Map tag.id to summary for that tag\n                    var summary = {};\n                    anns.forEach(function(ann){\n                        var annId = ann.id,\n                            linkOwner = ann.link.owner.id;\n                        if (summary[annId] === undefined) {\n                            ann.canRemove = false;\n                            ann.canRemoveCount = 0;\n                            ann.links = [];\n                            ann.addedBy = [];\n                            summary[annId] = ann;\n                        }\n                        // Add link to list...\n                        var l = ann.link;\n                        // slice parent class 'ProjectI' > 'Project'\n                        l.parent.class = l.parent.class.slice(0, -1);\n                        summary[annId].links.push(l);\n\n                        // ...and summarise other properties on the ann\n                        if (l.permissions.canDelete) {\n                            summary[annId].canRemoveCount += 1;\n                        }\n                        summary[annId].canRemove = summary[annId].canRemove || l.permissions.canDelete;\n                        if (summary[annId].addedBy.indexOf(linkOwner) === -1) {\n                            summary[annId].addedBy.push(linkOwner);\n                        }\n                    });\n\n                    // convert summary back to list of 'anns'\n                    anns = [];\n                    for (var annId in summary) {\n                        if (summary.hasOwnProperty(annId)) {\n                            summary[annId].links.sort(compareParentName);\n                            anns.push(summary[annId]);\n                        }\n                    }\n                }\n\n                // Update html...\n                var html = \"\";\n                if (anns.length > 0) {\n                    html = filesTempl({'anns': anns,\n                                       'webindex': WEBCLIENT.URLS.webindex,\n                                       'userId': WEBCLIENT.USER.id});\n                }\n                $fileanns_container.html(html);\n\n                // Finish up...\n                OME.filterAnnotationsAddedBy();\n                if (checkboxesAreVisible) {\n                    $(\"#fileanns_container input[type=checkbox]:not(:visible)\").toggle();\n                }\n                $(\".tooltip\", $fileanns_container).tooltip_init();\n            });\n            \n        }\n    };\n\n\n    initEvents();\n\n    if (OME.getPaneExpanded('files')) {\n        $header.toggleClass('closed');\n        $body.show();\n    }\n\n    this.render();\n};", "//   Copyright (C) 2016 University of Dundee & Open Microscopy Environment.\n//   All rights reserved.\n\n//   This program is free software: you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as\n//   published by the Free Software Foundation, either version 3 of the\n//   License, or (at your option) any later version.\n\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n\n//   You should have received a copy of the GNU Affero General Public License\n//   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nvar TagPane = function TagPane($element, opts) {\n\n    var $header = $element.children('h1'),\n        $body = $element.children('div'),\n        $tags_container = $(\"#tags_container\"),\n        objects = opts.selected,\n        self = this;\n\n    var tmplText = $('#tags_template').html();\n    var tagTmpl = _.template(tmplText);\n\n\n    var initEvents = (function initEvents() {\n\n        $header.on('click', function(){\n            $header.toggleClass('closed');\n            $body.slideToggle();\n\n            var expanded = !$header.hasClass('closed');\n            OME.setPaneExpanded(\"tags\", expanded);\n\n            if (expanded && $tags_container.is(\":empty\")) {\n                this.render();\n            }\n        }.bind(this));\n    }).bind(this);\n\n\n    if ($(\"#add_tags_form\").length === 0) {\n        $(\"<form id='add_tags_form' title='Tags Selection' action='\" + WEBCLIENT.URLS.webindex + \"annotate_tags/' method='post'>\")\n            .hide().appendTo('body');\n    }\n\n    $(\"#launch_tags_form\").on('click', function(event) {\n        $(\"#add_tags_form\").dialog(\"open\");\n        // load form via AJAX...\n        var load_url = $(this).attr('href');\n        $(\"#add_tags_form\").load(load_url);\n        return false;\n    });\n    // set-up the tags form to use dialog\n\n    $(\"#add_tags_form\").dialog({\n        autoOpen: false,\n        resizable: false,\n        height: 520,\n        width: 780,\n        modal: true,\n        buttons: {\n            \"Save\": function() {\n                // simply submit the form (AJAX handling set-up above)\n                $(\"#add_tags_form\").trigger('prepare-submit').trigger('submit');\n                $( this ).dialog( \"close\" );\n            },\n            \"Cancel\": function() {\n                $( this ).dialog( \"close\" );\n            },\n            \"Reset\": function() {\n                // discard all changes and reload the form\n                $(\"#add_tags_form\").html('').load($(\"#launch_tags_form\").attr('href'));\n            }\n        }\n    });\n    $('#add_tags_form').ajaxForm({\n        beforeSubmit: function(data) {\n            showSpinner();\n        },\n        success: function(data) {\n            // update the list of tags: Re-render tag pane...\n            self.render();\n        },\n        error: function(data) {\n        }\n    });\n\n\n    // bind removeItem to various [-] buttons\n    $(\"#tags_container\").on(\"click\", \".removeTag\", function(event){\n        var url = $(this).attr('url'),\n            parents = objects.join(\"|\");  // E.g image-123|image-456\n        OME.removeItem(event, \".tag_annotation_wrapper\", url, parents);\n        return false;\n    });\n\n    var compareParentName = function(a, b){\n        if (!a.parent.name || !b.parent.name) {\n            return 1;\n        }\n        return a.parent.name.toLowerCase() > b.parent.name.toLowerCase() ? 1 : -1;\n    };\n\n    var showSpinner = function() {\n        // added to $tags_container, so will get removed on render();\n        $tags_container.append('<img src=\"' + WEBCLIENT.URLS.static_webgateway + 'img/spinner.gif\">');\n    };\n\n    this.render = function render() {\n\n        if ($tags_container.is(\":visible\")) {\n\n            if ($tags_container.is(\":empty\")) {\n                $tags_container.html(\"Loading tags...\");\n            }\n\n            var request = objects.map(function(o){\n                return o.replace(\"-\", \"=\");\n            });\n            request = request.join(\"&\");\n\n            var annsUrl = WEBCLIENT.URLS.webindex + \"api/annotations/?type=tag&\" + request\n            $.getJSON(annsUrl, function(data){\n\n                // manipulate data...\n                // make an object of eid: experimenter\n                var experimenters = data.experimenters.reduce(function(prev, exp){\n                    prev[exp.id + \"\"] = exp;\n                    return prev;\n                }, {});\n\n                // Populate experimenters within tags\n                // And do other tag marshalling\n                var tags = data.annotations.map(function(tag){\n                    tag.owner = experimenters[tag.owner.id];\n                    if (tag.link && tag.link.owner) {\n                        tag.link.owner = experimenters[tag.link.owner.id];\n                    }\n                    // AddedBy IDs for filtering\n                    tag.addedBy = [tag.link.owner.id];\n                    tag.textValue = _.escape(tag.textValue);\n                    tag.description = _.escape(tag.description);\n                    tag.canRemove = tag.link.permissions.canDelete;\n                    return tag;\n                });\n\n                // If we are batch annotating multiple objects, we show a summary of each tag\n                if (objects.length > 1) {\n\n                    // Map tag.id to summary for that tag\n                    var summary = {};\n                    tags.forEach(function(tag){\n                        var tagId = tag.id,\n                            linkOwner = tag.link.owner.id;\n                        if (summary[tagId] === undefined) {\n                            summary[tagId] = {'textValue': tag.textValue,\n                                              'id': tag.id,\n                                              'canRemove': false,\n                                              'canRemoveCount': 0,\n                                              'links': [],\n                                              'addedBy': []\n                                             };\n                        }\n                        // Add link to list...\n                        var l = tag.link;\n                        // slice parent class 'ProjectI' > 'Project'\n                        l.parent.class = l.parent.class.slice(0, -1);\n                        summary[tagId].links.push(l);\n\n                        // ...and summarise other properties on the tag\n                        if (l.permissions.canDelete) {\n                            summary[tagId].canRemoveCount += 1;\n                        }\n                        summary[tagId].canRemove = summary[tagId].canRemove || l.permissions.canDelete;\n                        if (summary[tagId].addedBy.indexOf(linkOwner) === -1) {\n                            summary[tagId].addedBy.push(linkOwner);\n                        }\n                    });\n\n                    // convert summary back to list of 'tags'\n                    tags = [];\n                    for (var tagId in summary) {\n                        if (summary.hasOwnProperty(tagId)) {\n                            summary[tagId].links.sort(compareParentName);\n                            tags.push(summary[tagId]);\n                        }\n                    }\n                }\n\n                // Update html...\n                var html = tagTmpl({'tags': tags,\n                                    'webindex': WEBCLIENT.URLS.webindex,\n                                    'userId': WEBCLIENT.USER.id});\n                $tags_container.html(html);\n\n                // Finish up...\n                OME.filterAnnotationsAddedBy();\n                $(\".tooltip\", $tags_container).tooltip_init();\n            });\n            \n        }\n    };\n\n    initEvents();\n\n    if (OME.getPaneExpanded('tags')) {\n        $header.toggleClass('closed');\n        $body.show();\n    }\n\n    this.render();\n};", "/*jshint browser: true, jquery: true, curly: true, maxlen: 80,\n  eqeqeq: true, immed: true, indent: 4, latedef: true,\n  newcap: true, noarg: true, noempty: true,\n  nonew: true, undef: true, unused: true, trailing: true */\n/*global $, setTimeout, clearTimeout, OME, WEBCLIENT */\n/*exported tagging_form */\n//\n// Copyright (C) 2013-2016 University of Dundee & Open Microscopy Environment.\n// All rights reserved.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n\nvar tagging_form = function(\n    selected_tags, formset_prefix, tags_field_id, me, my_name\n    ) {\n\n    var div_all_tags = $(\"#id_all_tags\");\n    var div_selected_tags = $(\"#id_selected_tags\");\n    var tag_input = $(\"#id_tag\");\n    var tag_input_filter = $(\"#id_tag_filter\");\n    var description_input = $(\"#tag_description\");\n\n    var child_tags;\n    var all_tags = {};\n    var owners = {};\n\n    var canceled = false;\n    var loaded = false;\n\n    if ($(\"#add_tags_progress\").length === 0) {\n        $(\"#add_tags_form\").next().append(\n            \"<div id='add_tags_progress' style='display:none;'>\" +\n            \"    <div class='progress-label'></div>\" +\n            \"    <div class='progress-striped animate-stripes'></div>\" +\n            \"    <div class='progress-value'>0%</div>\" +\n            \"</div>\");\n    }\n\n    // progress bar\n    var progressbar = $(\"#add_tags_progress .progress-striped\").progressbar({\n            change: function() {\n                $(\"#add_tags_progress .progress-value\").text(\n                    $(\"#add_tags_progress .progress-striped\")\n                    .progressbar(\"value\") + \"%\");\n            },\n            complete: function() {\n                setTimeout(\n                    function() { $(\"#add_tags_progress\").remove(); }, 2000);\n            },\n            value: -1\n        });\n    var progressbar_label = $(\"#add_tags_progress .progress-label\");\n    $(\"#add_tags_form\").on(\"dialogclose\", function() {\n        $(\"#add_tags_progress\").remove();\n        progressbar_label = progressbar = $();\n        canceled = true;\n    });\n\n    var get_selected_tagset = function() {\n        var selected = $(\".ui-selected\", div_all_tags).not(\".filtered\");\n        if (selected.length === 1 && (\n            selected.hasClass('alltags-tagset') ||\n            selected.hasClass('alltags-childtag'))) {\n            return (selected.hasClass('alltags-tagset') ?\n                selected : selected.prevAll('.alltags-tagset').eq(0));\n        } else {\n            return null;\n        }\n    };\n\n    var tag_click = function(event) {\n        $(this).toggleClass(\n            'ui-selected').siblings('.ui-selected').removeClass('ui-selected');\n        update_selected_labels();\n        event.stopPropagation();\n    };\n\n    $(\".tag_selection_wrapper\").on('click', function() {\n        // when clicking in the blank space of the list, deselect all\n        $(\".ui-selected\", $(this)).removeClass('ui-selected');\n        update_selected_labels();\n    });\n\n    var create_html = function() {\n        var html = \"\";\n        for (var id in all_tags) {\n            var tag = all_tags[id];\n            if (tag && !(id in child_tags)) {\n                html += create_tag_html(tag.t, tag.d, owners[tag.o], tag.i,\n                                        null, tag.s !== 0);\n                tag.sort_key = tag.t.toLowerCase();\n                if (tag.s) {\n                    for (var sid in tag.s) {\n                        var child = all_tags[tag.s[sid]];\n                        if (child) {\n                            child.sort_key = (tag.t.toLowerCase() +\n                                child.t.toLowerCase());\n                            html += create_tag_html(\n                                child.t, child.d, owners[child.o], child.i,\n                                tag.i);\n                        }\n                    }\n                }\n            }\n        }\n        div_all_tags.append(html);\n        // TODO This tooltip application is used until the extra data has loaded\n        // at which point the tooltips are updated and this handler is replaced?\n        $(\".tag_selection div\").on('click', tag_click).tooltip({\n            track: false,\n            show: false,\n            hide: false,\n            items: '[data-content]',\n            content: function() {\n                return $(this).data('content');\n            }\n        });\n    };\n\n    var update_selected_labels = function() {\n        var count = 0;\n        $(\".ui-selected\", div_all_tags).not(\".filtered\").each(function() {\n            var $this = $(this);\n            if ($this.hasClass('alltags-tagset')) {\n                count += $this.nextUntil(\":not(.alltags-childtag)\").not(\n                    \".filtered, .ui-selected\").length;\n            } else {\n                count++;\n            }\n        });\n        $(\"#id_tags_selected\").text(count ? count + \" selected\" : \"\");\n        var tagset = get_selected_tagset();\n        if (tagset) {\n            $(\"#id_selected_tag_set\").html(\n                \"Add a new tag in <span class='tagset-title'>\" +\n                tagset.text() + \"</span> tag set and select it immediately:\");\n        } else {\n            $(\"#id_selected_tag_set\").text(\n                \"Add a new tag and select it immediately:\");\n        }\n    };\n\n    var update_tooltip = function() {\n        var $this = $(this);\n        var tag = all_tags[this.getAttribute(\"data-id\")];\n        var parent_id = all_tags[this.getAttribute(\"data-set\")];\n        var link_owner = null;\n        if ($this.parent().attr(\"id\") === \"id_selected_tags\") {\n            link_owner = this.getAttribute(\"data-linkownername\");\n            if (link_owner && $this.hasClass('owner-tagged')) {\n                link_owner = 'you and ' + link_owner;\n            }\n        }\n        var title = create_tag_title(tag.d, owners[tag.o],\n            parent_id ? parent_id.t : null, link_owner);\n        $this.tooltip({\n            track: false,\n            show: false,\n            hide: false,\n            content: title\n        });\n    };\n\n    var update_html_list = function(list) {\n        $(\"div\", list).each(update_tooltip);\n    };\n\n    var update_html = function() {\n        update_html_list($(\"#id_all_tags\"));\n        update_html_list($(\"#id_selected_tags\"));\n    };\n\n    var loader = function() {   // wrapper function for all data loading code\n\n        var batch_size = 2000;\n        var tag_count;\n        var raw_tags = [];\n        var raw_desc = {};\n        var batch_steps;\n        var step_weight;\n        var num_tag_callbacks = 0;\n        var num_desc_callbacks = 0;\n\n        var load = function(mode, callback, offset, limit) {\n            var url = WEBCLIENT.URLS.webindex + \"marshal_tagging_form_data/\";\n            url = url + \"?jsonmode=\" + mode +\n                        \"&group=\" + WEBCLIENT.active_group_id;\n            if (offset !== undefined && limit !== undefined) {\n                url += \"&offset=\" + offset + \"&limit=\" + limit;\n            }\n            $.ajax({\n                url: url,\n                dataType: 'json',\n                success: callback\n            });\n        };\n\n        $(\":button:contains('Reset'),:button:contains('Save')\",\n            $(\"#add_tags_form\").parent()).prop(\"disabled\", true).addClass(\n            'ui-state-disabled');\n\n        progressbar_label.text(\"Initializing\");\n        progressbar.progressbar(\"value\", 0);\n        $(\"#add_tags_progress\").show();\n\n        var tag_count_callback = function(data) {\n            if (canceled) {\n                return;\n            }\n            tag_count = data.tag_count;\n            if (tag_count > 0) {\n                batch_steps = Math.ceil(tag_count / batch_size);\n                step_weight = 100 / (2 * batch_steps + 1);\n                progressbar_label.text(\"Loading tags\");\n                for (var offset = 0; offset < tag_count; offset += batch_size) {\n                    load('tags', tags_callback, offset, batch_size);\n                }\n            } else {\n                progressbar_label.text(\"Complete\");\n                progressbar.progressbar(\"value\", 100);\n                finalize_load();\n            }\n        };\n\n        var tags_callback = function(data) {\n            if (canceled) {\n                return;\n            }\n            raw_tags = raw_tags.concat(data);\n            /*jsl:ignore*/\n            if (++num_tag_callbacks === batch_steps) {\n            /*jsl:end*/\n                process_tags();\n                progressbar_label.text(\"Loading owners\");\n                load('owners', owners_callback);\n            }\n            progressbar.progressbar(\"value\", Math.ceil(\n                num_tag_callbacks * step_weight));\n        };\n\n        var owners_callback = function(data) {\n            if (canceled) {\n                return;\n            }\n            process_owners(data);\n            progressbar.progressbar(\"value\", Math.ceil((batch_steps + 1) *\n                                                       step_weight));\n            progressbar_label.text(\"Loading descriptions\");\n            for (var offset = 0; offset < tag_count; offset += batch_size) {\n                load('desc', desc_callback, offset, batch_size);\n            }\n        };\n\n        var desc_callback = function(data) {\n            if (canceled) {\n                return;\n            }\n            $.extend(raw_desc, data);\n            /*jsl:ignore*/\n            if (++num_desc_callbacks === batch_steps) {\n            /*jsl:end*/\n                process_desc();\n                progressbar_label.text(\"Complete\");\n                progressbar.progressbar(\"value\", 100);\n            } else {\n                progressbar.progressbar(\"value\", Math.ceil(\n                    (batch_steps + 1 + num_desc_callbacks) * step_weight));\n            }\n        };\n\n        var process_tags = function() {\n            child_tags = {};\n            for (var idx in raw_tags) {\n                var c = raw_tags[idx][3];\n                if (c) {\n                    for (var cidx in c) {\n                        child_tags[c[cidx]] = true;\n                    }\n                }\n            }\n            var tagstruct = function(tag) {\n                return {\n                    i: tag[0],\n                    t: tag[1],\n                    o: tag[2],\n                    s: tag[3]\n                };\n            };\n            for (idx in raw_tags) {\n                var tag = tagstruct(raw_tags[idx]);\n                all_tags[tag.i] = tag;\n            }\n            create_html();\n\n            var others_tags = []; // track ids of tags linked by other users\n            for (idx in selected_tags) {\n                if (!selected_tags[idx][5]) {\n                    others_tags.push(selected_tags[idx][0]);\n                    // link(s) not owned by current user, don't add to list\n                    continue;\n                }\n                var selected_tag = $(\".tag_selection div[data-id=\" +\n                                     selected_tags[idx][0] + \"]\");\n                if (selected_tag.length) { // not yet selected\n                    selected_tag.appendTo(div_selected_tags);\n                    selected_tag.addClass('owner-tagged');\n                }\n            }\n\n            // add others_count to selected tags\n            for (idx in others_tags) {\n                var tag_to_update = $(\".tag_selection div[data-id=\" +\n                                      others_tags[idx] + \"]\");\n                if (tag_to_update.length) {\n                    var others_count = parseInt(\n                        tag_to_update.attr(\"data-others_count\") || \"0\", 10\n                        ) + 1;\n                    tag_to_update.attr(\"data-others_count\", others_count);\n                    tag_to_update.attr(\"data-linkownername\", others_count ?\n                        others_count + \" other user\" +\n                        (others_count > 1 ? \"s\" : \"\") : selected_tags[idx][2]);\n                }\n            }\n\n            update_html_list($(\"#id_selected_tags\"));\n            sort_tag_list(div_all_tags);\n            sort_tag_list(div_selected_tags);\n            update_filter();\n        };\n\n        var process_owners = function(data) {\n            owners = data;\n            update_html();\n        };\n\n        var process_desc = function() {\n            for (var id in all_tags) {\n                all_tags[id].d = raw_desc[id] || \"\";\n            }\n            update_html();\n            finalize_load();\n        };\n\n        var finalize_load = function() {\n            loaded = true;\n            update_add_new_button_state();\n        };\n\n        load('tagcount', tag_count_callback);\n    };\n\n    var enable_buttons = function() {\n        if (loaded) {\n            $(\":button:contains('Reset'),:button:contains('Save')\",\n              $(\"#add_tags_form\").parent()\n              ).prop(\"disabled\", false).removeClass('ui-state-disabled');\n        }\n    };\n\n    var encode_html = function(text) {\n        return $('<div/>').text(text).html();\n    };\n\n    var create_tag_title = function(description, owner, tagset, link_owner) {\n        var title = \"\";\n        if (owner) {\n            title += \"<b>Owner:</b> \" + owner + \"<br />\";\n        }\n        if (link_owner) {\n            title += \"<b>Linked by:</b> \" + link_owner + \"<br />\";\n        }\n        if (description) {\n            title += \"<b>Description:</b> \" + description + \"<br />\";\n        }\n        if (tagset) {\n            title += \"<b>Tag set:</b> \" + tagset + \"<br />\";\n        }\n        return title;\n    };\n\n    var create_tag_html = function(text, description, owner, id, parent_id,\n                                   is_tagset) {\n        var cls = is_tagset ? \"alltags-tagset\" :\n            (parent_id ? \"alltags-childtag\" : \"alltags-tag\");\n        var html = \"<div class='\" + cls + \"' data-id='\" + id + \"'\";\n        var tagset;\n        if (parent_id) {\n            html += \" data-set='\" + parent_id + \"'\";\n            tagset = all_tags[parent_id].t;\n        }\n        if (id < 0) { // new tag, save description\n            html += \" data-description='\" + encode_html(description) + \"'\";\n        }\n        var title = create_tag_title(description, owner, tagset);\n        // Add content even if it is empty\n        // and handle case for no tooltip in the tooltip code\n        html += \" data-content='\" + title.replace(/'/g, \"&#39;\") + \"'\";\n        html += \">\" + encode_html(text) + \"</div>\";\n        return html;\n    };\n\n    var select_tags = function(event) {\n        // clear selections in right box\n        $(\"div.ui-selected\", div_selected_tags).removeClass('ui-selected');\n        // move individual tags first\n        $(\"div.ui-selected.alltags-tag:not(.filtered), \" +\n          \"div.ui-selected.alltags-childtag:not(.filtered)\", div_all_tags).each(\n            function() {\n                $(this).appendTo(div_selected_tags);\n            }).each(update_tooltip);\n        // move whole tag sets\n        $(\"div.ui-selected.alltags-tagset:not(.filtered)\", div_all_tags).each(\n            function() {\n                var tag = $(this).next(\"div.alltags-childtag\");\n                while (tag.length) {\n                    var current = tag;\n                    tag = current.next(\"div.alltags-childtag\");\n                    if (!current.hasClass(\"filtered\")) {\n                        current.addClass(\n                            'ui-selected').appendTo(div_selected_tags).each(\n                                update_tooltip);\n                    }\n                }\n            });\n        sort_tag_list(div_selected_tags);\n        update_filter();\n        // scroll to first selected tag\n        var first_selected = $(\"div.ui-selected\", div_selected_tags);\n        if (first_selected.length > 0) {\n            div_selected_tags.parent().scrollTop(\n                first_selected.offset().top - div_selected_tags.offset().top -\n                40);\n        }\n        enable_buttons();\n        event.preventDefault();\n    };\n\n    tag_input_filter.on('keypress', function(event) {\n        if (event.which === 13) {\n            select_tags(event);\n            tag_input_filter.val('');\n        }\n    });\n\n    var deselect_tags = function(event) {\n        // clear selections in left box\n        $(\"div.ui-selected\", div_all_tags).removeClass('ui-selected');\n        // move tags back to left box\n        $(\"div.ui-selected\", div_selected_tags).each(function() {\n            var tagset = $(this).attr(\"data-set\");\n            if (tagset) {\n                $(this).insertAfter($(\"div[data-id=\" + tagset + \"]\",\n                                      div_all_tags));\n            } else {\n                $(this).appendTo(div_all_tags);\n            }\n        }).each(update_tooltip);\n        sort_tag_list(div_all_tags);\n        update_filter(undefined, true);\n        // scroll to first selected tag\n        var first_selected = $(\"div.ui-selected\", div_all_tags);\n        if (first_selected.length > 0) {\n            div_all_tags.parent().scrollTop(first_selected.offset().top -\n                                            div_all_tags.offset().top - 40);\n        }\n        enable_buttons();\n        event.preventDefault();\n    };\n\n    var update_timeout = null;\n    var update_filter = function(event, keep_selection) {\n        clearTimeout(update_timeout);\n        var filters;\n        var cleanup = function() {\n            // make sure tagsets with unfiltered tags are also not filtered\n            if (!no_filter) {\n                var unfiltered_tagsets = {};\n                $(\"div.alltags-childtag:not(.filtered)\", div_all_tags).each(\n                    function() {\n                        unfiltered_tagsets[\n                            this.getAttribute(\"data-set\")] = true;\n                    });\n                $(\"div.alltags-tagset\", div_all_tags).each(function() {\n                    $(this).toggleClass('filtered', !unfiltered_tagsets[\n                        this.getAttribute(\"data-id\")]);\n                });\n            }\n            if (!keep_selection) {\n                $(\"div.ui-selected\", div_all_tags).removeClass(\"ui-selected\");\n                if (filters !== '') {\n                    $(\"div.alltags-tag,div.alltags-childtag\", div_all_tags).not(\n                        \".filtered\").first().addClass(\"ui-selected\");\n                }\n            }\n            update_selected_labels();\n        };\n        var input = tag_input_filter.val();\n        if (input === tag_input_filter.attr('placeholder')) {\n            input = '';\n        }\n        var owner_mode = $(\n            \"select[name=filter_owner_mode] option:selected\").val();\n        filters = input.trim().toLowerCase();\n        var filters_split = filters.split(/ +/);\n        var no_filter = filters === \"\" && owner_mode === \"any\";\n        if (no_filter) {\n            $(\"div.filtered\", div_all_tags).removeClass('filtered');\n            cleanup();\n        } else {\n            var mode = $(\"select[name=filter_mode] option:selected\").val();\n            var tags = $(\"div.alltags-childtag,div.alltags-tag\", div_all_tags);\n            var dofilter = function(pos) {\n                var endpos = Math.min(pos + 1000, tags.length);\n                for (var idx = pos; idx < endpos; idx++) {\n                    var tag = tags.eq(idx);\n                    var tagobj = all_tags[tag.attr(\"data-id\")];\n                    var match = true;\n                    var text = tagobj.t.toLowerCase().trim();\n                    if (mode === \"any\") {\n                        for (var filter in filters_split) {\n                            match = match && text.indexOf(\n                                filters_split[filter]) >= 0;\n                        }\n                    } else {\n                        match = (text.substr(0, filters.length) === filters);\n                    }\n                    if (match && owner_mode !== \"all\") {\n                        match = ((owner_mode === \"me\" && tagobj.o === me) ||\n                                 (owner_mode === \"others\" && tagobj.o !== me));\n                    }\n                    tag.toggleClass(\"filtered\", !match);\n                }\n                if (endpos < tags.length) {\n                    update_timeout = setTimeout(function() {\n                        dofilter(endpos);\n                    }, 1);\n                } else {\n                    cleanup();\n                }\n            };\n            dofilter(0);\n        }\n    };\n\n    var new_tag_counter = 0;\n\n    var add_new_tag = function(event, force) {\n        event.preventDefault();\n\n        var text = tag_input.val();\n        if (text === tag_input.attr('placeholder')) {\n            text = '';\n        }\n        text = text.trim();\n        var description = description_input.val();\n        if (description === description_input.attr('placeholder')) {\n            description = '';\n        }\n        description = description.trim();\n\n        var tagset = get_selected_tagset();\n        if (text.length > 0) {\n\n            var select_dialog;\n            var confirm_tag_selection = function() {\n                if (select_dialog.data(\"clicked_button\") === \"Yes\") {\n                    $(\"div.ui-selected\", div_all_tags).removeClass(\n                        \"ui-selected\");\n                    $(\"[data-id=\" + id + \"]\", div_all_tags).addClass(\n                        \"ui-selected\").removeClass(\"filtered\");\n                    select_tags(event);\n                    tag_input.val('');\n                    description_input.val('');\n                    enable_buttons();\n                }\n            };\n            var confirm_tag_creation = function() {\n                if (select_dialog.data(\"clicked_button\") === \"Yes\") {\n                    add_new_tag(event, true);\n                    enable_buttons();\n                }\n            };\n\n            // check for tag with same name\n            if (!force) {\n                var lowertext = text.toLowerCase();\n                var lowerdesc = description.toLowerCase();\n                for (var id in all_tags) {\n                    if (all_tags[id].t.toLowerCase() === lowertext) {\n                        if (all_tags[id].d.toLowerCase() === lowerdesc) {\n                            if ($(\"[data-id=\" + id + \"]\",\n                                  div_selected_tags).length > 0) {\n                                OME.alert_dialog(\n                                    \"A tag with the same name and description\" +\n                                    \" already exists and is selected.\");\n                            } else if (all_tags[id].s !== 0) {\n                                OME.alert_dialog(\n                                    \"A tag set with the same name and \" +\n                                    \"description already exists.\");\n                            } else {\n                                select_dialog = OME.confirm_dialog(\n                                    \"A tag with the same name and description\" +\n                                    \" already exists. Would you like to \" +\n                                    \"select the existing tag?\",\n                                    confirm_tag_selection, \"Add new tag\",\n                                    [\"Yes\", \"No\"]);\n                            }\n                        } else {\n                            select_dialog = OME.confirm_dialog(\n                                \"A tag with the same name and a different \" +\n                                \"description already exists. \" +\n                                \"Would you still like to add a new tag?\",\n                                confirm_tag_creation, \"Add new tag\",\n                                [\"Yes\", \"No\"]);\n                        }\n                        return;\n                    }\n                }\n            }\n\n            new_tag_counter -= 1;\n            var tagset_id = (tagset ? parseInt(tagset.attr('data-id'), 10) :\n                             false);\n            owners[me] = owners[me] || my_name;\n            all_tags[new_tag_counter] = {\n                i: new_tag_counter,\n                d: description,\n                t: text,\n                o: me,\n                s: tagset_id,\n                sort_key: (tagset_id ? all_tags[tagset_id].t.toLowerCase() :\n                           '') + text.toLowerCase()\n            };\n            var div = $(create_tag_html(\n                text, description, my_name, new_tag_counter,\n                tagset ? tagset.attr('data-id') : null));\n            div.addClass('ui-selected').on('click', tag_click).tooltip({\n                track: true,\n                show: false,\n                hide: false,\n                items: '[data-content]',\n                content: function() {\n                    return $(this).data('content');\n                }\n            });\n            $(\"div.ui-selected\", div_selected_tags).removeClass('ui-selected');\n            div_selected_tags.append(div);\n            tag_input.val('').trigger('focus');\n            description_input.val('');\n            enable_buttons();\n        }\n        sort_tag_list(div_selected_tags);\n        update_filter();\n        // scroll to first selected tag\n        div_selected_tags.parent().scrollTop(\n            $(\"div.ui-selected\", div_selected_tags).offset().top -\n            div_selected_tags.offset().top - 40);\n        update_add_new_button_state();\n    };\n\n    var add_new_tag_on_enter_key = function(event) {\n        if (event.which === 13 && !$(\"#id_add_new_tag\").prop('disabled')) {\n            add_new_tag(event);\n        }\n    };\n    tag_input.on('keypress', add_new_tag_on_enter_key);\n    description_input.on('keypress', add_new_tag_on_enter_key);\n\n    var save_tags = function() {\n        var existing_tags = [];\n        var new_tags = $(\"#id_\" + formset_prefix + \"-TOTAL_FORMS\");\n        var count = 0;\n        $('div', div_selected_tags).each(function() {\n            var tag_id = this.getAttribute('data-id');\n            if (tag_id[0] === \"-\") { // newly created tag\n                new_tags.after($(\"<input type='hidden' />\").attr(\n                    'name', \"newtags-\" + count + \"-tag\").val($(this).text()));\n                new_tags.after($(\"<input type='hidden' />\").attr(\n                    'name', \"newtags-\" + count + \"-description\").val(\n                        this.getAttribute('data-description')));\n                new_tags.after($(\"<input type='hidden' />\").attr(\n                    'name', \"newtags-\" + count + \"-tagset\").val(\n                        this.getAttribute('data-set')));\n                count += 1;\n            } else {\n                // previously existing tag link owned by current user\n                existing_tags.push(tag_id);\n            }\n        });\n        new_tags.val(count);\n        $(\"#\" + tags_field_id).val(existing_tags.join(','));\n    };\n\n    var sort_tag_list = function(list) {\n        $(\"div\", list).sort(function(a, b) {\n            return (all_tags[a.getAttribute('data-id')].sort_key >\n                    all_tags[b.getAttribute('data-id')].sort_key ? 1 : -1);\n        }).appendTo(list);\n    };\n\n    var update_add_new_button_state = function() {\n        if (loaded && tag_input.val() !== '' &&\n            tag_input.val() !== tag_input.attr('placeholder')) {\n            $(\"#id_add_new_tag\").prop('disabled', false);\n        } else {\n            $(\"#id_add_new_tag\").prop('disabled', true);\n        }\n    };\n\n    $(\"#id_tag_select_button\").on('click', select_tags);\n    $(\"#id_tag_deselect_button\").on('click', deselect_tags);\n    $(\"#id_add_new_tag\").on('click', add_new_tag);\n    $(\"#add_tags_form\").off('prepare-submit').on('prepare-submit', save_tags);\n    tag_input.on('keyup', update_add_new_button_state).on('change',\n        update_add_new_button_state);\n    update_add_new_button_state();\n    tag_input_filter.on('keyup', update_filter).on('change', update_filter);\n    $(\"select[name=filter_mode],select[name=filter_owner_mode]\").on('change',\n        update_filter);\n\n    loader();\n\n    // placeholder fixes - should probably be in a more generic place\n    $('[placeholder]').on('focus', function() {\n        var input = $(this);\n        if (input.val() === input.attr('placeholder')) {\n            input.val('');\n            input.removeClass('placeholder');\n        }\n    }).on('blur', function() {\n        var input = $(this);\n        if (input.val() === '' || input.val() === input.attr('placeholder')) {\n            input.addClass('placeholder');\n            input.val(input.attr('placeholder'));\n        }\n    }).trigger('blur').parents('form').on('submit', function() {\n        $(this).find('[placeholder]').each(function() {\n            var input = $(this);\n            if (input.val() === input.attr('placeholder')) {\n                input.val('');\n            }\n        });\n    });\n};\n", "//\n// Copyright (C) 2013 University of Dundee & Open Microscopy Environment.\n// All rights reserved.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n$(document).ready(function() {\n\n    // Clear selection (only needed on page 'refresh')\n    $(\"#tagChooser option\").prop('selected', false);\n\n\n    // Show / Hide un-tagged images after sorting or checkbox click\n    var updateNotTagged = function() {\n        var show_untagged_images = $(\"input[name=Show_Untagged_Images]\").is(\":checked\");\n        if (show_untagged_images) {\n            $(\".notTagged\").show();\n        } else {\n            $(\".notTagged\").hide();\n        }\n    };\n    $(\"input[name=Show_Untagged_Images]\").on('click', updateNotTagged);\n\n\n    // Add <br> to break up long rows of thumbnails\n    var updateRowCount = function(){\n        var colCount = parseInt($(\"input[name=Max_Columns]\").val(), 10);\n        $(\".thumbnail_set td:has(.img_panel)\").each(function(){\n            var $td = $(this);\n            $(\"br\", $td).remove();  // remove old <br>\n            // $(\":nth-child(\" + colCount + \"n)\", $td).after(\"<br/>\");\n            // <td> may have <div> children that break up child thumbs\n            var i = 1;\n            $td.children().each(function(){\n                var $child = $(this);\n                if (i % colCount === 0) {\n                    $child.after(\"<br/>\")\n                }\n                if (this.nodeName.toLowerCase() == 'div') {\n                    i = 1;      // new row\n                } else {\n                    i++;\n                }\n            });\n        });\n    };\n    $(\"input[name=Max_Columns]\").on('keyup input', updateRowCount);\n\n    updateRowCount();   // initialise layout\n\n\n    // If no tags are chosen, we need to return to initial state\n    var clearTagSorting = function() {\n        $(\".thumbnail_set\").each(function() {\n            var $this = $(this),\n                $toRemove = $('tr:has(.img_panel)', $this);\n\n            $tr = $('<tr><td></td></tr>');\n            $tr.appendTo($this);\n            $td = $('<td></td>').appendTo($tr);\n            $(\".img_panel\", $this).appendTo($td);\n            // now that we've moved the images, we can clean up!\n            $toRemove.remove();\n            updateRowCount();\n        });\n    }\n\n\n    // Initialise the Chosen plugin, handle Adding / Removing of Tags...\n    var $TagIdsInput = $(\"input[name=Tag_IDs]\");\n    var selectedTagIds = [];\n    $(\"#tagChooser\")\n        .chosen({placeholder_text:'Choose Tags'})\n        .on('change', function(evt, data) {\n            if (data.deselected) {\n                var toRemove = data.deselected;\n                selectedTagIds.splice(selectedTagIds.indexOf(toRemove), 1);\n            } else if (data.selected) {\n                selectedTagIds.push(data.selected);\n            }\n            // update input for form submission\n            $TagIdsInput.val(selectedTagIds.join(\",\"));\n\n            if (selectedTagIds.length == 0) {\n                clearTagSorting();\n                return;\n            }\n\n            var tagValues = {};\n            // Have to look-up the Tag names from the UI\n            $(\"#tagChooser option:selected\").each(function(){\n                var $this = $(this);\n                tagValues[$this.attr('value')] = $this.text();\n            });\n\n            // Now we need to sort images by ids....\n            // Let's assign letters to tags in order, so we can use to sort,\n            // E.g. 'Metaphase' == 'a', 'Anaphase' == 'b', 'Dead' == 'c'\n            // Then we can combine: 'Metaphase'+'Dead' ==> 'ac', 'Anaphase'+'Dead' ==> 'bc'\n            // And sort: 'a', 'ab', 'abc', 'b', 'bc', 'c', '' (untagged)\n            var letters = \"abcdefghijklmnopqrstuvwxyz\",\n                tagLetters = {},\n                letterTags = {};    // backwards map to decode\n            for (var t=0; t<selectedTagIds.length; t++){\n                tagLetters[selectedTagIds[t]] = letters[t];\n                letterTags[letters[t]] = selectedTagIds[t];\n            }\n\n            // E.g. 'ac' ==> ['Metaphase', 'Dead']\n            var getTagsFromKey = function(key) {\n                var rv = [];\n                for (var k=0; k<key.length; k++) {\n                    var tagId = letterTags[key[k]];\n                    rv.push(tagValues[tagId]);\n                }\n                return rv;\n            }\n\n            // For each 'Dataset' (or set of Images)...\n            $(\".thumbnail_set\").each(function() {\n                // Make a data structure of image-ids : [tag ids]\n                var $this = $(this),\n                    imageTags = {},\n                    imgIds = [];\n                $(\".img_panel\", $this).each(function(){\n                    var $img = $(this),\n                        iId = $img.attr('data-iId'),\n                        tagString = $img.attr('data-tags');\n                    imageTags[iId] = tagString.split(\",\");\n                    imgIds.push(iId);\n                });\n\n                // Prepare for sorting...\n                sortedImgs = []\n                for (var i=0; i<imgIds.length; i++) {\n                    // Build up a string based on the image's Tags, that can be used to sort\n                    var imgId = imgIds[i],\n                        tagIds = imageTags[imgId],\n                        letterKeys = [];\n                    for (var c=0; c<selectedTagIds.length; c++) {\n                        var tid = selectedTagIds[c];\n                        if (tagIds.indexOf(tid) > -1) {\n                            letterKeys.push(tagLetters[tid]);\n                        }\n                    }\n                    var tagKey = letterKeys.join(\"\");    // E.g. 'a' or 'bc'\n                    sortedImgs.push({'id':imgId, 'tagKey':tagKey});\n                }\n                // Do the Sorting!\n                sortedImgs.sort(function(a, b) {\n                    var x = a['tagKey'], y = b['tagKey'];\n                    if (x.length === 0) return 1;\n                    if (y.length === 0) return -1;\n                    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n                });\n\n                // Group Images with same tags. E.g. all of the with key 'ac'\n                var results = [],        // List of {'tagNames':[], 'imgIds':[]}\n                    rkey = \"\", rIds = [];\n                for (var s=0; s<sortedImgs.length; s++) {\n                    var sImg = sortedImgs[s];\n                    if (sImg.tagKey == rkey) {\n                        rIds.push(sImg.id);\n                    } else {\n                        if (rIds.length > 0) {\n                            results.push({'rkey':rkey, 'tags': getTagsFromKey(rkey), 'imgIds':rIds});\n                        }\n                        rIds = [sImg.id];\n                        rkey = sImg.tagKey;\n                    }\n                }\n                results.push({'rkey':rkey, 'tags': getTagsFromKey(rkey), 'imgIds':rIds});\n\n\n                // Update the UI\n                var $toRemove = $('tr:has(.img_panel)', $this);\n\n                // For each Tag combination... (E.g. 'Metaphase'+'Dead')\n                var topLevelTag = \"\";\n                var $td, $tr;\n                for (var r=0; r<results.length; r++) {\n\n                    var tagData = results[r],\n                        tagsText = tagData.tags.join(\", \");     // 'Metaphase, Dead'\n                    if (tagsText.length === 0) {\n                        tagsText = \"Not Tagged\";\n                    }\n                    if (tagsText.length === 0 || tagData.tags[0] !== topLevelTag) {\n                        // start a new container...\n                        topLevelTag = tagData.tags[0] || tagsText;      // Group under 1st tag (unless we have no tags)\n\n                        $tr = $('<tr><th><h2>' + topLevelTag + '</h2></th></tr>');\n                        $tr.appendTo($this);\n                        $td = $('<td></td>').appendTo($tr);\n                    }\n                    $td.append('<div class=\"subsetLabel\">'+ tagsText + '</div>');\n\n                    if (tagsText === \"Not Tagged\") {\n                        $tr.addClass('notTagged');\n                    }\n\n                    // Add the images (move from previous position)...\n                    for (var i=0; i<tagData.imgIds.length; i++) {\n                        $('#thumbnail-'+tagData.imgIds[i]).appendTo($td);\n                    }\n\n                }\n                // now that we've moved the images, we can clean up!\n                $toRemove.remove();\n\n                // tidy up by hiding subset labels where there is only 1 subset\n                // AND the subset has only 1 Tag\n                $('tr:has(.img_panel)', $this).each(function(){\n                    var $subsetLabels = $(this).find('.subsetLabel');\n                    if (($subsetLabels.length === 1)\n                            && ($subsetLabels.text().split(\", \").length === 1)) {\n                        $subsetLabels.hide();\n                    }\n                });\n\n                updateNotTagged();\n                updateRowCount();\n            });\n\n    });\n\n    // Hacks to make the Chosen plugin to wide enough.\n    $(\".chzn-container\").width('350px');\n    $(\".chzn-container input\").width('300px');\n\n    // Bonus feature - Zoom the preview thumbs with slider\n    // Make a list of styles (for quick access on zoom)\n    var img_panel_styles = [];\n    $(\".img_panel\").each(function(){\n        img_panel_styles.push(this.style);\n    });\n    var setImgSize = function(size) {\n        console.log(size);\n        var i, l = img_panel_styles.length;\n        for (i=0; i<l; i++) {\n            img_panel_styles[i].maxWidth = size + \"px\";\n            img_panel_styles[i].maxHeight = size + \"px\";\n        }\n    };\n    $(\"#img_size_slider\").slider({\n        max: 96,\n        min: 20,\n        value: 50,\n        slide: function(event, ui) {\n            setImgSize(ui.value);\n        }\n    });\n\n});", "<% _.each(anns, function(ann) { %>\n<div class=\"ann_comment_wrapper\" data-added-by=\"<% print (ann.addedBy.join(',')) %>\">\n\n    <div class=\"avatar\">\n        <img src=\"<%= webindex %>avatar/<%= ann.owner.id %>/\"\n        alt=\"<%= ann.owner.firstName %> <%= ann.owner.lastName %>\"\n        title=\"<%= ann.owner.firstName %> <%= ann.owner.lastName %>\" />\n    </div>\n\n    <div class=\"ann_comment_text tooltip\">\n        <div class=\"ann_comment_header\">\n            <strong>\n                <%= ann.owner.firstName %> <%= ann.owner.lastName %>\n            </strong> \n            at\n            <% print(OME.formatDate(ann.link.date)) %>\n        </div>\n    \n        <% if (ann.permissions.canDelete) { %>\n            <img class='removeComment' id=\"<%= ann.id %>-comment\"\n                src=\"<%= static %>image/icon_basic_delete.png\"\n                url='<%= webindex %>action/remove/comment/<%= ann.id %>/' \n                title=\"Delete comment\"/>\n        <% } %>\n\n        <div class='commentText'><%= ann.textValue %></div>\n    </div>\n\n    <% if (ann.ns || ann.description) { %>\n    <span class=\"tooltip_html\" style='display:none'>\n        <b>ID:</b> <%= ann.id %><br />\n        <% if (ann.ns) { %><b>Namespace:</b> <%= ann.ns %><br /><% } %>\n        <% if (ann.description) { %><b>Description:</b> <%= ann.description %><br /><% } %>\n    </span>\n    <% } %>\n\n</div>\n<% }) %>\n", "\n<% _.each(anns, function(ann) { %>\n\n<tr data-added-by=\"<% print (ann.addedBy.join(',')) %>\">\n    <th><%= ann.type %></th>\n    <td>\n        <div class=\"tooltip\">\n        <% if (ann.type === 'Xml') { %>\n            <div><% print((ann.value + \"\").slice(0, 20)) %>...</div>\n            <div class=\"show_xml\">Open in new window</div>\n            <div style=\"display: none\"><%= ann.value %></div>\n        <% } else { %>\n            <div><%= ann.value %></div>\n        <% } %>\n        </div>\n        \n        <span class=\"tooltip_html\" style='display:none'>\n            <b>ID:</b> <%= ann.id %><br />\n            <% if (ann.ns) { %><b>Namespace:</b> <%= ann.ns %><br /><% } %>\n            <% if (ann.description) { %><b>Description:</b> <%= ann.description %><br /><% } %>\n            <b>Owner:</b> <%= ann.owner.firstName %> <%= ann.owner.lastName %><br />\n            <b>Date:</b> <% print(OME.formatDate(ann.date)) %>\n\n            <% if (ann.parent) { %>\n            <br />\n            <b>Linked to:</b> <%= ann.parent.class %> <%= ann.parent.id %>\n            <% } %>\n        </span>\n    </td>\n</tr>\n<% }) %>", "\n<% _.each(anns, function(ann) { %>\n<li class=\"file_ann_wrapper\"\n    id=\"file_ann-<%= ann.id %>\"\n    data-added-by=\"<% print (ann.addedBy.join(',')) %>\">\n\n    <a class='tooltip'\n        href=\"<% if (ann.permissions.canDownload) { print(webindex + 'annotation/' + ann.id)} else {print('#') } %>\">\n        <%= ann.file.name %>\n        <% if (ann.file.size) { %>\n            <span>(<%= ann.file.size %>)</span>\n        <% } %>\n    </a>\n\n    <span class=\"tooltip_html\" style='display:none'>\n        <!-- show different tooltip for batch_annotate panel -->\n        <% if (ann.links) { %>\n            Can remove File from <b><%= ann.canRemoveCount %>\n            object<% if(ann.canRemoveCount !== 1) {print('s')} %></b>:<br/>\n            <% _.each(ann.links, function(link, idx) { %>\n                <div>\n                    <% if (idx < 20) { %>\n                        <b><%= link.parent.class %> <%= link.parent.id %></b>\n                        <% print(_.escape(link.parent.name).slice(0, 28)) %>\n                        <% if (link.owner.id !== userId){\n                            print(\"(\" + link.owner.firstName.slice(0, 1) + \" \" + _.escape(link.owner.lastName) + \")\")\n                        } %>\n                    <% } else if (idx === 20) { %>\n                        and <b><% print(ann.links.length - 20) %></b> other objects...\n                    <% } %>\n                </div>\n            <% }) %>\n        <% } else { %>\n            <b>Annotation ID:</b> <%= ann.id %><br />\n            <b>Owner:</b> <%= ann.owner.firstName %> <%= ann.owner.lastName %><br />\n            <b>Linked by:</b> <%= ann.link.owner.firstName %> <%= ann.link.owner.lastName %><br />\n            <b>On:</b> <% print(OME.formatDate(ann.link.date)) %> <br />\n            <b>Description:</b> <%= ann.description %>\n            <% if (ann.ns){ %>\n                <br/><b>Namespace:</b> <%= ann.ns %>\n            <% } %>\n            <% if (ann.file.mimetype){ %>\n                <br/><b>Mimetype:</b> <%= ann.file.mimetype %>\n            <% } %>\n            <br/><b>File ID:</b> <%= ann.file.id %>\n        <% } %>\n    </span>\n\n    <div class=\"attachment_actions\">\n        <input type=\"checkbox\" style=\"display:none;\"/>\n        <% if ((ann.ns && ann.ns === 'openmicroscopy.org/omero/bulk_annotations') || ann.file.mimetype == 'OMERO.tables' ){ %>\n            <a class='action btn_view' title=\"View OMERO.table\" target=\"_blank\"\n            href='<%= webindex %>omero_table/<%= ann.file.id %>/'>&nbsp;</a>\n        <% } %>\n        <% if (ann.link.permissions.canDelete) { %> <!-- and not ann.isOriginalMetadata -->\n            <a class='removeFile action' id=\"<%= ann.id %>-file\" title=\"Remove File\"\n            href='<%= webindex %>action/remove/file/<%= ann.id %>/'>&#8211</a>\n        <% } %>\n\n        <% if (ann.permissions.canDelete) { %> <!-- and not ann.isOriginalMetadata -->\n            <a id=\"<%= ann.id %>-file\" type=\"image\" class=\"deleteFile action\" title=\"Delete File\"\n                href=\"<%= webindex %>action/delete/file/<%= ann.id %>/\"> &#215 </a>\n        <% } %>\n\n    </div>\n</li>\n\n<% }) %>", "<% _.each(anns, function(ann) { %>\n\n<table <% if (ann.id && ann.addedBy) { %>\n            data-annId=\"<%= ann.id %>\"\n            data-added-by=\"<% print (ann.addedBy.join(',')) %>\"\n        <% } else { %>\n            data-added-by=\"<%= WEBCLIENT.USER.id %>\"\n        <% } %>\n        class=\"keyValueTable\n            <% if (!ann.id || (ann.permissions.canEdit && clientMapAnn)){ %> editableKeyValueTable <% } %>\n            \">\n    <thead>\n      <% if (showNs && ann.ns) { %>\n      <tr title=\"<%= ann.ns %>\">\n          <th colspan=\"2\">\n              <%= ann.ns.slice(0, 50) %>\n          </th>\n      </tr>\n      <% } %>\n      <tr class=\"tooltip\">\n          <th colspan=\"2\">\n            <% if (ann.id) { %>\n                Added by: <%= ann.owner.firstName %> <%= ann.owner.lastName %>\n                <% if (showParent && ann.link.parent.name){ %>\n                  <br>\n                  <% if (ann.parentNames) { %>\n                    <%= ann.parentNames.length %> Annotations linked to:\n                  <% } else { %>\n                    To:\n                  <% } %>\n                  <%= ann.parentNames ? (ann.parentNames.length + \" objects\") : ann.link.parent.name %>\n                <% } %>\n\n                <span class=\"tooltip_html\" style='display:none'>\n                    <% if (ann.parentNames) { %>\n                      You are\n                      <% print (ann.permissions.canEdit && clientMapAnn ? 'editing' : 'viewing') %>\n                      <b><%= ann.parentNames.length %></b> identical Key-Value annotations:\n                    <% } %>\n                    <% if (!ann.parentNames && ann.link) { %>\n                        <!-- If single object show e.g. Image ID: (slice ImageI -> Image) -->\n                        <b><%= ann.link.parent.class.slice(0, ann.link.parent.class.length-1) %>\n                            ID:</b> <%= ann.link.parent.id %><br />\n                    <% } %>\n                    <b>Annotation ID<% if (ann.parentNames) { %>s<% } %>:</b> <%= ann.id %><br />\n                    <% if (ann.parentNames) { %>\n                        <b>Linked to:</b><br>\n                        <% _.each(ann.parentNames, function(pName) { %>\n                            &nbsp <%= pName %><br />\n                        <% }) %>\n                    <% } %>\n                    <% if (ann.owner) { %>\n                        <b>Owner:</b> <%= ann.owner.firstName %> <%= ann.owner.lastName %>\n                    <% } %>\n                    <% if (ann.link) { %>\n                        <br /><b>Linked by:</b> <%= ann.link.owner.firstName %> <%= ann.link.owner.lastName %>\n                        <% if (ann.link.date) { %>\n                            <br /><b>On:</b> <% print(OME.formatDate(ann.link.date)) %>\n                        <% } %>\n                    <% } %>\n                </span>\n            <% } else if (objCount && objCount > 1) { %>\n                Add annotations to <%= objCount %> objects\n                <span class=\"tooltip_html\" style='display:none'>\n                    Identical Key-Value annotations will be added to each selected object.\n                </span>\n            <% } %>\n          </th>\n    </tr>\n    <% if (showTableHead) { %>\n    <tr>\n        <th>Key</th>\n        <th>Value</th>\n    </tr>\n    <% } %>\n\n    </thead>\n\n    <!-- Last row always has empty key & value fields -->\n    <% if (ann.id) { %>\n      <% _.each(ann.values, function(row) { %>\n        <tr>\n            <td><% print(_.escape(row['0'])) %></td>\n            <td><% print(_.escape(row['1'])) %></td>\n        </tr>\n      <% }) %>\n    <% } else { %>\n      <tr class=\"placeholder\">\n          <td>Add Key</td>\n          <td>Add Value</td>\n      </tr>\n    <% } %>\n</table>\n\n<% }) %>\n", "<html>\n{% load i18n %}\n{% load common_filters %}\n{% load common_tags %}\n{% comment %}\n<!--\n  Copyright (C) 2011-2016 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n    <script type=\"text/javascript\">\n        \n        $(document).ready(function()\n            {\n                // This is called once the html for \"General\" tab of right panel has loaded...\n\n                // Delegate to sub-views to handle content of each collapsible panel\n\n                var selectedObjs = [\"{{ manager.obj_type }}-{{ manager.obj_id }}\"];\n                var annPaneData = {\n                    'selected': selectedObjs,\n                    // canAnnotate used by map annotations and ratings panes\n                    'canAnnotate': {% if manager.canAnnotate %}true{% else %}false{% endif %}\n                }\n\n                var tagPane = new TagPane($(\"#tagsPane\"), annPaneData);\n                var fileannsPane = new FileAnnsPane($(\"#fileannsPane\"), annPaneData);\n                var commentsPane = new CommentsPane($(\"#commentsPane\"), annPaneData);\n                var mapAnnsPane = new MapAnnsPane($(\"#mapAnnsPane\"), annPaneData);\n                var ratingsPane = new RatingsPane($(\"#ratingsPane\"), annPaneData);\n                var customAnnsPane = new CustomAnnsPane($(\"#customAnnotationsPane\"), annPaneData);\n\n                \n                // Most panes are expanded and collapsed in the Pane classes above.\n                // Manually add that behaviour for Details\n                $('.can-collapse[data-name=\"details\"]').on('click', function(){\n                    var $this = $(this),\n                        expanded = $this.hasClass('closed');\n                    $this.toggleClass('closed')\n                        .next().slideToggle();\n                    OME.setPaneExpanded('details', expanded);\n                });\n                if (!OME.getPaneExpanded('details')){\n                    $('.can-collapse[data-name=\"details\"]').addClass('closed')\n                        .next().hide();\n                }\n\n\n                {% if manager.canEdit %}\n                $( \"#{{ manager.obj_type }}name-{{ manager.obj_id }} button\" )      // E.g. imagename-123 button\n                    .editable('{% url 'manage_action_containers' \"editname\" manager.obj_type manager.obj_id %}',\n                        '{% url 'manage_action_containers' \"savename\" manager.obj_type manager.obj_id %}',\n                        \"{{ manager.obj_type }}name-{{ manager.obj_id }}\" );\n                $( \"#{{ manager.obj_type }}description-{{ manager.obj_id }} button\" )\n                    .editable('{% url 'manage_action_containers' \"editdescription\" manager.obj_type manager.obj_id %}',\n                        '{% url 'manage_action_containers' \"savedescription\" manager.obj_type manager.obj_id %}',\n                        \"{{ manager.obj_type }}description-{{ manager.obj_id }}\", { post_save: linkify });\n                OME.linkify_element($( \"#{{ manager.obj_type }}description-{{ manager.obj_id }} > p > span\" ));\n                {% else %}\n                OME.linkify_element($( \"#image_desc\" ));\n                {% endif %}\n\n                var acquisition_load = false;\n                var preview_load = false;\n                var hierarchy_load = false;\n\n\n                $(\".tooltip\").parent().children(\"span\").hide(); // hide tool tip source\n                $(\".tooltip\").tooltip_init();\n                \n                {% if manager.image %}\n                // handle loading of image hierarchy by ajax\n                $(\"#hierarchy-link\").on('click', function(e){\n                    var hierarchy_url = $(this).attr('href');\n                    $(\"#hierarchy-spinner\").show();  // waiting...\n                    $(\"#hierarchy-pane\").load(hierarchy_url);\n                    e.preventDefault();\n                    return false;\n                })\n                {% endif %}\n\n                // show a link to the current object\n                $(\"#show_link_btn\").on('click', function(){\n                    $(\"#link_info_popup\").show();\n                    var lnk = location.protocol + \"//\" + location.host + \"{{ webclient_path }}\";\n                    var obj_type = \"{{manager.obj_type}}\";\n                    if (obj_type === \"acquisition\") {\n                        obj_type = \"run\";\n                    }\n                    lnk += \"?show=\" + obj_type + \"-{{ manager.obj_id }}\";\n                    var link_input = $(\"#link_info_popup input\");\n                    link_input.val(lnk);\n                    link_input.get(0).focus();\n                    link_input.get(0).select();\n                });\n                $(\"#link_info_popup img\").on('click', function(){\n                    $(\"#link_info_popup\").hide();\n                });\n\n                // show original file path links for images\n                var original_file_paths_url,\n                    importTransfer;\n                {% if manager.image %}\n                original_file_paths_url = \"{% url 'original_file_paths' manager.image.id %}\";\n                importTransfer = \"{{ manager.image.getInplaceImportCmd }}\";\n                {% elif manager.well.getWellSample.image %}\n                original_file_paths_url = \"{% url 'original_file_paths' manager.well.getWellSample.image.id %}\";\n                importTransfer = \"{{ manager.well.getWellSample.image.getInplaceImportCmd }}\";\n                {% endif %}\n\n                var $toolbar_info_panel = $(\"#toolbar_info_panel\"),\n                        // $panel_textarea = $(\"#toolbar_info_panel textarea\"),\n                        $panel_title = $(\"#toolbar_info_panel .panel_title\"),\n                        $panel_div = $(\"#toolbar_info_panel .panel_div\");\n\n\n                $( \"#toolbar_info_panel\" ).on( \"click\", \".show_more\", function() {\n                    $(this).hide().next().show();\n                    return false;\n                });\n\n                $(\"#show_fs_files_btn\").on('click', function(){\n\n                    // If we're already showing Image file info, toggle hide\n                    if ($toolbar_info_panel.is(\":visible\") && \n                            $panel_title.text().split(\"Image file\").length > 1) {\n                        $toolbar_info_panel.hide();\n                        return;\n                    }\n                    $(\"#toolbar_info_panel\").show();\n                    $panel_title.html(\"Loading...\");\n                    $panel_div.empty();\n                    if (original_file_paths_url) {\n                        $.getJSON(original_file_paths_url,\n                            function(data) {\n                                var repo = data.repo,\n                                    client = data.client,\n                                    html = \"\";\n                                $panel_title.html(repo.length + \" Image file\" + (repo.length>1 ? \"s:\" : \":\"));\n\n                                if (importTransfer) {\n                                    html += \"<p>Imported with <strong>--transfer=\"+ importTransfer;\n                                    html += \"</strong></p><hr/>\";\n                                }\n\n                                html += \"<p>Imported from:</p>\";\n                                html += \"<p class='pathlist'>\" + client.slice(0,2).join(\"<br>\") + \"<br>\";\n                                if (client.length > 2) {\n                                    html += \"<a class='show_more' href='#'> Show more...</a>\";\n                                    html += \"<span style='display:none'>\" + client.slice(2).join(\"<br>\");\n                                    html += \"</span>\";\n                                }\n                                html += \"</p><hr/>\";\n\n                                html += \"<p>Paths on server:</p>\";\n                                html += \"<p class='pathlist'>\" + repo.slice(0,2).join(\"<br>\") + \"<br>\";\n                                if (repo.length > 2) {\n                                    html += \"<a class='show_more' href='#'> Show more...</a>\";\n                                    html += \"<span style='display:none'>\" + repo.slice(2).join(\"<br>\");\n                                    html += \"</span>\";\n                                }\n                                html += \"</p>\";\n                                $panel_div.append(html);\n                            });\n                    }\n                });\n\n                var hierarchy_url;\n                {% if manager.image %}\n                hierarchy_url = \"{% url 'load_metadata_hierarchy' 'image' manager.image.id %}\";\n                {% elif manager.well %}\n                hierarchy_url = \"{% url 'load_metadata_hierarchy' 'well' manager.well.id %}\";\n                {% endif %}\n                \n                // show Image hierarchy Project/Dataset tree.\n                $(\"#show_image_hierarchy\").on('click', function(){\n\n                    // If we're already showing Image file info, toggle hide\n                    if ($toolbar_info_panel.is(\":visible\") && \n                            $panel_title.text().split(\"contained\").length > 1) {\n                        $toolbar_info_panel.hide();\n                        return;\n                    }\n                    $(\"#toolbar_info_panel\").show();\n\n                    $panel_title.html(\"Loading...\");\n                    $panel_div.empty();\n                    if (hierarchy_url) {\n                        $panel_div.load(hierarchy_url);\n                        $panel_div.load(hierarchy_url,\n                            function(data) {\n                                $panel_title.html(\"Image contained in:\");\n                            });\n                    }\n                });\n\n\n                $(\"#toolbar_info_panel img\").on('click', function(){\n                    $(\"#toolbar_info_panel\").hide();\n                });\n\n                // Handle Download actions\n                $(\"#create-ometiff\").on('click', function(e){\n                    \n                    var url = $(this).attr('href');\n                    $(\"#download_dropdown ul\").css('visibility', 'hidden');// hide dropdown menu\n                    var dialog_opts = ['Cancel', 'Create'];\n                    $.ajax({\n                        url: \"{% url 'ome_tiff_info' manager.obj_id %}\",\n                        dataType: 'json',\n                        success: function(data) {\n                            var msg = \"This will create an OME-TIFF file from this Image.\";\n                            if (data.id && data.ago) {\n                                msg += \"<br>Or you can Download one that was created \"+ data.ago +\" ago.\";\n                                var download_ometiff = data.download;\n                                dialog_opts[1] = \"Create New\";\n                                dialog_opts.push(\"Download\");\n                            } else {\n                                msg += \"<br>This will be attached to the Image and available to download.\";\n                            }\n\n                            var confirm_ometiff = OME.confirm_dialog(msg,\n                                function() {\n                                    var btn = confirm_ometiff.data(\"clicked_button\");\n                                    switch (btn) {\n                                        case \"Create\":   // two options for the same button\n                                        case \"Create New\":\n                                            $.post( url, function() {\n                                                OME.showActivities();\n                                            });\n                                            break;\n                                        case \"Download\":\n                                            window.location.href = download_ometiff;\n                                            break;\n                                    }\n                                },\n                                \"Create OME-TIFF?\",\n                                dialog_opts,\n                                null, 200\n                            );\n                        }\n                    });\n                    \n                    e.preventDefault();\n                    return false;\n                });\n\n                // Filtering annotations added by 'me' or 'others' or 'all'\n                $(\"#annotationFilter\").on('change', function(){\n                    OME.filterAnnotationsAddedBy();\n                });\n\n                // Channel name editing\n            {% if manager.image %}\n\n                var $chNameForm = $(\"#channel_names_edit\");\n                // set up form with Parent\n                {% if manager.well %}\n                // TODO - Need to know if image is in Plate!\n                // If we're looking at a well we know parent is plate\n                  var pid = \"plate-{{ manager.well.plate.id.val }}\";\n                {% else %}\n                  // For images in Datasets, we get parent from jsTree, using selected image\n                  // E.g. dataset-123\n                  var pid = OME.getParentId();\n                {% endif %}\n                if (typeof pid === \"undefined\") {\n                    $chNameForm.find(\"button[name=apply]\").hide();  // hide 'apply to all'\n                } else {\n                    var parentType = pid.split(\"-\")[0];\n                    $chNameForm.find(\".ptype\").text( parentType );\n                    $chNameForm.find(\"input[name=parentId]\").val(pid).attr('value', pid);\n                    if (parentType === \"plate\") {\n                        // Plate: only allow 'Apply to All' (all images linked to same Channels)\n                        $chNameForm.find(\"button[name=save]\").remove();\n                    }\n                }\n                var resetChForm = function() {\n                    $chNameForm.find(\".originalButtons\").show();\n                    $chNameForm.find(\".confirmButtons\").hide();\n                    $(\"#channel_names_display\").show();\n                    $(\"#editChannelNames\").show();\n                    $chNameForm.hide();\n                }\n                // Workflow starts by displaying the form\n                $(\"#editChannelNames\").on('click', function(){\n                    $(\"#channel_names_display\").hide();\n                    $(\"#editChannelNames\").hide();\n                    $chNameForm.show();\n                });\n                // Handling of all form buttons. NB: save & apply_confirm buttons submit\n                $chNameForm.find(\"button\").on('click', function(event){\n                    var name = $(this).attr('name');\n                    if (name === \"apply\") {\n                        // Ask users to confirm:\n                        $chNameForm.find(\".originalButtons\").hide();\n                        $chNameForm.find(\".confirmButtons\").show();\n                        event.preventDefault(); // prevent form submission etc\n                        return false;\n                    } else if (name === \"cancel\") {\n                        // cancel - hide and don't submit\n                        resetChForm();\n                    }\n                });\n                // Form handled by AJAX\n                $chNameForm.ajaxForm({\n                    dataType:  'json',\n                    success: function(data) {\n                        var cnames = data.channelNames;\n                        // update the channel names, and ititial values in form\n                        $(\"#channel_names_display span\").each(function(i){\n                            if (cnames.hasOwnProperty(\"channel\"+i)) {\n                                $(this).text(cnames[\"channel\"+i]);\n                            }\n                        });\n                        $chNameForm.find(\"input\").each(function(i){\n                            if (cnames.hasOwnProperty( $(this).attr('name') )) {\n                                $(this).attr('value', cnames[\"channel\"+i]);\n                            }\n                        });\n                        resetChForm();\n                    }\n                });\n\n            {% endif %}\n\n\n                // For wells (or images that may be in a Well), we try to\n                //load Bulk table annotations attached to parent Screen / Plate\n                // loading just the row we need for the current well.\n                {% if manager.well or manager.image %}\n                    {% if manager.well %}\n                    var screenQuery = \"{% url 'webgateway_object_table_query' 'Screen.plateLinks.child.wells' manager.well.id %}\";\n                    var plateQuery = \"{% url 'webgateway_object_table_query' 'Plate.wells' manager.well.id %}\";\n                    var query = \"Well-{{ manager.well.id }}\";\n                    {% elif manager.image %}\n                    var screenQuery = \"{% url 'webgateway_object_table_query' 'Screen.plateLinks.child.wells.wellSamples.image' manager.image.id %}\";\n                    var plateQuery = \"{% url 'webgateway_object_table_query' 'Plate.wells.wellSamples.image' manager.image.id %}\";\n                    var projectQuery = \"{% url 'webgateway_object_table_query' 'Project.datasetLinks.child.imageLinks.child' manager.image.id %}\";\n                    var datasetQuery = \"{% url 'webgateway_object_table_query' 'Dataset.imageLinks.child' manager.image.id %}\";\n                    var query = \"Image-{{ manager.image.id }}\";\n                    {% endif %}\n\n                    var showBulkAnnTooltip = function(data) {\n                        if (!data || !data.id) return;\n                        var bulkAnnTooltip = \"<span class='tooltip_html' style='display:none'>\" +\n                            \"Data from tables file:<br />\" +\n                            \"<b>File ID:</b> \" + data.id + \"<br />\" +\n                            \"<b>Owner:</b> \" + data.owner + \" <br />\" +\n                            \"<b>Annotation ID:</b> \" + data.annId + \"<br />\" +\n                            \"<b>Linked to:</b> \" + data.parentType + \" \" + data.parentId + \"<br />\" +\n                            \"<b>Linked by:</b> \" + data.addedBy + \" <br />\" +\n                            \"<b>On:</b> \" + OME.formatDate(data.addedOn) + \"</span>\";\n                        $(\"#bulk-annotations\").append(bulkAnnTooltip);\n                        $(\"#bulk-annotations\").parent().tooltip({\n                                items: '.bulk_annotation',\n                                content: function() {\n                                    return $(\"span.tooltip_html\", this).html();\n                                },\n                                track: true,\n                                show: false,\n                                hide: false\n                            });\n                    }\n\n                    // If user opens tables tab, also load tables\n                    $('.can-collapse.closed[data-name=\"tables\"]').on('click', function(){\n                        var $header = $(this),\n                            $body = $header.next();\n\n                        $header.toggleClass('closed');\n                        $body.slideToggle();\n\n                        var expanded = !$header.hasClass('closed');\n                        OME.setPaneExpanded('tables', expanded);\n\n                        if (expanded && $(\"#bulk_annotations_table\").is(\":empty\")) {\n                            loadBulkAnnotations(screenQuery, query, showBulkAnnTooltip);\n                            loadBulkAnnotations(plateQuery, query, showBulkAnnTooltip);\n                            {% if manager.image %}\n                                loadBulkAnnotations(projectQuery, query, showBulkAnnTooltip);\n                                loadBulkAnnotations(datasetQuery, query, showBulkAnnTooltip);\n                            {% endif %}\n                        }\n                    });\n\n                    // Load tables if tables tab is open\n                    if (OME.getPaneExpanded(\"tables\")) {\n                        $('.can-collapse.closed[data-name=\"tables\"]')\n                            .toggleClass('closed')\n                            .next().slideToggle();\n                        if ($(\"#bulk_annotations_table\").is(\":empty\")) {\n                            loadBulkAnnotations(screenQuery, query, showBulkAnnTooltip);\n                            loadBulkAnnotations(plateQuery, query, showBulkAnnTooltip);\n                            {% if manager.image %}\n                                loadBulkAnnotations(projectQuery, query, function(data) {\n                                    if (data && data.id) {\n                                        showBulkAnnTooltip(data);\n                                    }\n                                });\n                                loadBulkAnnotations(datasetQuery, query, function(data) {\n                                    if (data && data.id) {\n                                        showBulkAnnTooltip(data);\n                                    }\n                                });\n                            {% endif %}\n                        }\n                    }\n\n                {% endif %}\n\n\n                $('[data-isodate]').each(function() {\n                    $(this).text(OME.formatDate($(this).data('isodate')));\n                });\n\n            });\n            \n    </script>\n\n\n        <!-- This is used by AJAX loading the right panel, to check it matches current selection -->\n        <div id='object-id' style=\"display:none\">{{manager.obj_type}}-{{ manager.obj_id }}</div>\n\n\n        {% if not manager.tag %}\n        \n        \n        <!-- ANNOTATIONS \"General\" -->\n        <div id=\"general_tab\" class=\"right_tab_inner\" >\n           \n        {% if manager.image %}\n\n            {% with image=manager.image canDownload=manager.image.canDownload %}\n                {% include \"webclient/annotations/includes/toolbar.html\" %}\n            {% endwith %}\n\n            <!-- Image Name, ID, owner -->\n            {% with obj=manager.image nameText=manager.image.name %}\n                {% include \"webclient/annotations/includes/name.html\" %}\n            {% endwith %}\n                  \n            <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                Image Details\n            </h1>\n            <div> \n                  \n            <!-- Image Description -->      \n            {% with obj=manager.image %}\n                {% include \"webclient/annotations/includes/description.html\" %}\n            {% endwith %}\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            <!-- Include table of core metadata, Owner, SizeX,Y,Z, Channels etc -->\n            {% with image=manager.image %}\n                {% include \"webclient/annotations/includes/core_metadata.html\" %}\n            {% endwith %}\n\n            </div>\n\n\n        {% else %}\n            {% if manager.dataset %}\n\n                {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n                <!-- Dataset Name, ID, Owner -->\n                {% with obj=manager.dataset nameText=manager.dataset.name %}\n                    {% include \"webclient/annotations/includes/name.html\" %}\n                {% endwith %}\n\n                \n                <!-- Dataset Description -->\n                <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                    Dataset Details\n                </h1>\n                <div> \n                {% with obj=manager.dataset %}\n                    {% include \"webclient/annotations/includes/description.html\" %}\n                {% endwith %}\n                \n                <table>\n                    <tr>\n                        <th>Creation Date:</th>\n                        <td id='creation_date' data-isodate='{{ manager.dataset.getDate|date:\"r\" }}'></td>\n                    </tr>\n                </table>\n                </div>\n            {% else %}\n                {% if manager.project %}\n\n                    {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n                    <!-- Project Name, ID, Owner -->\n                    {% with obj=manager.project nameText=manager.project.name %}\n                        {% include \"webclient/annotations/includes/name.html\" %}\n                    {% endwith %}\n\n                    \n                    <!--Project Description -->\n                    <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                        Project Details\n                    </h1>\n                    <div>\n                    {% with obj=manager.project %}\n                        {% include \"webclient/annotations/includes/description.html\" %}\n                    {% endwith %}\n                    \n                    <table>\n                        <tr>\n                            <th>Creation Date:</th>\n                            <td id='creation_date' data-isodate='{{ manager.project.getDate|date:\"r\" }}'></td>\n                        </tr>\n                    </table>\n                    </div>\n                {% endif %}\n            {% endif %}\n        {% endif %}\n            \n        {% if manager.well %}\n            {% with image=manager.getWellSampleImage %}\n                {% include \"webclient/annotations/includes/toolbar.html\" %}\n            {% endwith %}\n\n            <!-- Well Label (not editable), ID, Owner -->\n            {% with obj=manager.well nameText=manager.well.getWellPos %}\n                {% include \"webclient/annotations/includes/name.html\" %}\n            {% endwith %}\n\n        {% else %}\n            {% if manager.acquisition %}\n\n                {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n                <!-- Acquisition Name -->\n                {% with obj=manager.acquisition nameText=manager.acquisition.name %}\n                    {% include \"webclient/annotations/includes/name.html\" %}\n                {% endwith %}\n\n                \n                <!-- Acquisition Description -->\n                <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                    Run Details\n                </h1>\n                <div>\n                {% with obj=manager.acquisition %}\n                    {% include \"webclient/annotations/includes/description.html\" %}\n                {% endwith %}\n                \n                <table>\n                    <tr>\n                        <th>Creation Date:</th>\n                        <td id='creation_date' data-isodate='{{ manager.acquisition.getDate|date:\"r\" }}'></td>\n                    </tr>\n                    <tr>\n                        <th>Start Time:</th>\n                        <td data-isodate='{{ manager.acquisition.getStartTime|date:\"r\" }}'></td>\n                    </tr>\n                    <tr>\n                        <th>End Time:</th>\n                        <td data-isodate='{{ manager.acquisition.getEndTime|date:\"r\" }}'></td>\n                    </tr>\n                </table>\n                </div>\n\n            {% else %}\n                {% if manager.plate %}\n\n                    {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n                    <!-- Plate Name, ID, Owner -->\n                    {% with obj=manager.plate nameText=manager.plate.name %}\n                        {% include \"webclient/annotations/includes/name.html\" %}\n                    {% endwith %}\n                    \n                    \n                    <!-- Plate Description -->\n                    <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                        Plate Details\n                    </h1>\n                    <div>\n                    {% with obj=manager.plate %}\n                        {% include \"webclient/annotations/includes/description.html\" %}\n                    {% endwith %}\n\n\n                    <table>\n                        <tr>\n                            <th>Creation Date:</th>\n                            <td id='creation_date' data-isodate='{{ manager.plate.getDate|date:\"r\" }}'></td>\n                        </tr>\n                        <!--{% comment %}\n                        <tr>\n                            <th>Well Count:</th>\n                            <td id='child_count'>{{ manager.plate.countChildren }} {% plural manager.plate.countChildren 'well' 'Wells' %}</td>\n                        </tr>\n                        {% endcomment %}-->\n                    </table>\n                    </div>\n                {% else %}\n                    {% if manager.screen %}\n\n                        {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n                        <!-- Screen Name, ID, Owner -->\n                        {% with obj=manager.screen nameText=manager.screen.name %}\n                            {% include \"webclient/annotations/includes/name.html\" %}\n                        {% endwith %}\n                            \n                            \n\n                        <!-- Screen Description -->\n                        <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                            Screen Details\n                        </h1>\n                        <div>\n                        {% with obj=manager.screen %}\n                            {% include \"webclient/annotations/includes/description.html\" %}\n                        {% endwith %}\n\n                        <table>\n                            <tr>\n                                <th>Creation Date:</th>\n                                <td id='creation_date' data-isodate='{{ manager.screen.getDate|date:\"r\" }}'></td>\n                            </tr>\n                            <tr>\n                                <th>Plate Count:</th>\n                                <td id='child_count'>{{ manager.screen.countChildren }} {% plural manager.screen.countChildren 'plate' 'plates' %}</td>\n                            </tr>\n                        </table>\n                        </div>\n                    {% endif %}\n                {% endif %}\n            {% endif %}\n        {% endif %}\n            \n            \n            \n            \n        \n        \n    <!-- ANNOTATIONS -->\n\n        <!-- templates are loaded based on config -->\n        {% for t in ome.metadata_panes|dictsort:\"index\" %}\n            {% with \"webclient/annotations/includes/metadata_general_\"|add:t.name|add:\".html\" as metadata_templates_path %}\n            {% with label=t.label %}\n            {% include metadata_templates_path %}\n            {% endwith %}\n            {% endwith %}\n        {% endfor %}\n\n        </div>\n        {% endif %}\n\n\n        {% if manager.tag %}\n\n        <div id=\"general_tab\" class=\"right_tab_inner\" >\n\n            <!-- Toolbar at the top -->\n            {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n\n                <!-- Tag TextValue, ID, Owner -->\n                {% with obj=manager.tag nameText=manager.tag.getValue %}\n                    {% include \"webclient/annotations/includes/name.html\" %}\n                {% endwith %}\n\n                <hr/>\n\n                <!-- Tag Description -->\n                {% with obj=manager.tag %}\n                    {% include \"webclient/annotations/includes/description.html\" %}\n                {% endwith %}\n        \n                <table>\n                    {% if manager.tag.getNs %}\n                    {% ifnotequal manager.tag.getNs insight_ns %}\n                    <tr>\n                        <th>Name space:</th>\n                        <td id='namespace'>{{ manager.tag.getNs }}</td>\n                    </tr>\n                    {% endifnotequal %}\n                    {% endif %}\n                    <tr>\n                        <th>Owner:</th>\n                        <td id='owner_fullname'>{{ manager.tag.getOwner.getFullName }}</td>\n                    </tr>\n                    <tr>\n                        <th>Creation Date:</th>\n                        <td id='creation_date' data-isodate='{{ manager.tag.getDate|date:\"r\" }}'></td>\n                    </tr>\n                    <tr>\n                        <th>Image Count:</th>\n                        {% if False %}\n                        <td id='child_count'>{{ manager.tag.countChildren }} {% plural manager.tag.countChildren 'tag' 'tags' %}</td>\n                        {% endif %}\n                    </tr>\n                </table>\n        </div>\n        {% endif %}\n</html>\n", "\n<% _.each(tags, function(tag) { %>\n<span class=\"tag_annotation_wrapper\"\n    data-tag-id=\"<%= tag.id %>\"\n    data-added-by=\"<% print (tag.addedBy.join(',')) %>\">\n\t\n    <div class=\"tag\">\n        <a class='tooltip tag_inner' href=\"?show=tag-<%= tag.id %>\" target=\"_top\">\n            <%= tag.textValue %>\n        </a>\n\n        <% if (tag.canRemove) { %>\n        <span class='removeTag' title=\"Remove Tag\" id=\"<%= tag.id %>-tag\"\n                url='<%= webindex %>action/remove/tag/<%= tag.id %>/'>\n                -\n        </span>\n        <% } %>\n\n        <span class=\"tooltip_html\" style='display:none'>\n        <!-- show different tooltip for batch_annotate panel -->\n        <% if (tag.links) { %>\n            Can remove Tag from <b><%= tag.canRemoveCount %> object<% if(tag.canRemoveCount !== 1) {print('s')} %></b>:<br/>\n            <% _.each(tag.links, function(link, idx) { %>\n                <div>\n                    <% if (idx < 20) { %>\n                        <b><%= link.parent.class %> <%= link.parent.id %></b>\n                        <% print(_.escape(link.parent.name).slice(0, 28)) %>\n                        <% if (link.owner.id !== userId){\n                            print(\"(\" + link.owner.firstName.slice(0, 1) + \" \" + _.escape(link.owner.lastName) + \")\")\n                        } %>\n                    <% } else if (idx === 20) { %>\n                        and <b><% print(tag.links.length - 20) %></b> other objects...\n                    <% } %>\n                </div>\n            <% }) %>\n        <% } else { %>\n            <b>ID:</b> <%= tag.id %><br />\n            <b>Owner:</b> <%= tag.owner.firstName %> <%= tag.owner.lastName %><br />\n            <b>Linked by:</b> <%= tag.link.owner.firstName %> <%= tag.link.owner.lastName %><br />\n            <b>On:</b> <% print(OME.formatDate(tag.link.date)) %><br />\n            <b>Description:</b> <%= tag.description %>\n        <% } %>\n        </span>\n    </div>\n    \n</span>\n\n<% }) %>", "\n\n<ul id=\"dataIcons\" class=\"element_sorter <%= layout %>Layout\">\n    <li class=\"thead\"> \n        <div></div> \n        <!-- 'sort-init' will perform sort on this column when element_sorter plugin inits -->\n        <div class='sort-alpha sort-init'>Name</div>\n        <div class='sort-date'>Date</div> \n        <div class='sort-numeric'>Size X</div> \n        <div class='sort-numeric'>Size Y</div> \n        <div class='sort-numeric'>Size Z</div>\n    </li>\n\n    <% _.each(images, function(img) { %>\n        <li class=\"row <% if(img.selected) {print ('ui-selected')} %>\n            <% if(img.fsSelected) {print ('fs-selected')} %> \"\n            id=\"image_icon-<%= img.id %>\"\n            data-fileset=\"<%= img.data.obj.filesetId %>\"\n            data-type=\"image\"\n            data-id=\"<%= img.id %>\"\n            data-perms=\"<%= img.data.obj.permsCss %>\"\n            tabindex=\"0\"\n            <% if(img.shareId) { %> data-share=\"<%= img.shareId %>\" <% }%>\n            data-owned=\"\">\n\n            <div class=\"image\">\n                <!-- we wrap img with <a> so you can right-click -> open link in new tab -->\n                <a href=\"<%= webindex %><% if(img.shareId) {print( img.shareId + '/')} %>img_detail/<%= img.id %>/<% if (dataset) print('?dataset=' + dataset) %>\" >\n                    <img/>\n                </a>\n            </div>\n            <!-- NB: '#image_icon-123 div.desc' etc is used to update name when changed in right panel via \"editinplace\" -->\n            <div class=\"desc\" valign=\"middle\">\n                 <%= img.name %>\n                <span class=\"hidden_sort_text\"> <%= img.name %> </span>\n            </div>\n            <div class=\"date\" valign=\"middle\"><%= img.date %></div>\n            <div class=\"sizeX\" valign=\"middle\"><%= img.data.obj.sizeX %></div>\n            <div class=\"sizeY\" valign=\"middle\"><%= img.data.obj.sizeY %></div>\n            <div class=\"sizeZ\" valign=\"middle\"><%= img.data.obj.sizeZ %></div>\n        </li>\n    <% }) %>\n</ul>\n\n<% if (paging) { %>\n<div class=\"clear\"> </div>\n<div class=\"paging\" id=\"page\" data-page=\"<%= page %>\">\n    <% if (page-1 > 0) { %>\n        <input data-page=\"<%= page-1 %>\" class=\"button_pagination\" type=\"button\" value=\"Previous\" alt=\"Previous\"/>\n    <% } %>\n\n    <% for (var p=1; p<=pageCount; p++) { %>\n        <% if (page === p) { print (p) }\n            else { %>\n                <input data-page=\"<%= p %>\" class=\"button_pagination\" type=\"button\" value=\"<%= p %>\" alt=\"<%= p %>\"/>\n            <% } %>\n    <% } %>\n\n    <% if (page < pageCount) { %>\n        <input data-page=\"<%= page+1 %>\" class=\"button_pagination\" type=\"button\" value=\"Next\" alt=\"Next\"/>\n    <% } %>\n\n</div>\n<div class=\"clear\"> </div>\n<% } %>", "{% load common_filters %}\n\n{% comment %}\n/**\n  Copyright (C) 2012-2016 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n{% endcomment %}\n\n<!-- Include script for filtering center panel -->\n<script src=\"{% static 'webclient/javascript/ome.center_plugin_filter.js'|add:url_suffix %}\" type=\"text/javascript\"></script>\n\n<script>\n/**\n * This script is included in the main containers.html page as well as public.html,\n * adding itself as a selection listener to the jsTree in each case.\n * It loads appropriate data into the middle panel on selection changes in the jsTree.\n * For the main containers.html page, it also responds to switching between 'plugins'\n**/\n\n$(document).ready(function() {\n\n    // Revamp of thumbnail update\n\n    /*\n\n    When should the panel update\n\n    1) The image selection has changed (update)\n    2) The container selection has changed (refresh)\n    3) Something has been deleted or moved out (remove)\n    4) Something has been added (refresh)\n\n    Problems\n\n    An image is moved to another dataset while selected.\n    This causes the view to shift to the new view\n    There will also be a remove attempt (this must do nothing)\n\n    */\n\n    var inst = $.jstree.reference('#dataTree');\n    var parentNode;     // the currently selected node\n    // We compile the underscore templates, ready for rendering\n    var tmplText = $('#icon_thumbnails_template').html();\n    var iconTmpl = _.template(tmplText);\n    var headerText = $('#icon_header_template').html();\n    var headerTmpl = _.template(headerText);\n    // Variables for layout and thumbnail zooming\n    var layout = \"icon\";\n    var icon_styles = [];\n    var li_styles = [];\n    var aspect_ratios = [];\n    var iconSize = 65;\n    var parentId;       // E.g. dataset-1\n\n    var dateFormatOptions = {\n        weekday: \"short\", year: \"numeric\", month: \"short\",\n        day: \"numeric\", hour: \"2-digit\", minute: \"2-digit\"\n    };\n\n    // Start listening for Node Loading events on the tree...\n    // If a node loads and it's selected, update_thumbs...\n    $(\"#dataTree\").on('load_node.jstree', function(event, data){\n        if (data.node.state.selected) {\n            update_thumbnails_panel(event, data);\n        }\n    });\n\n    $(\"#content_details\").on(\"click\", \"input.button_pagination\", function(){\n        var page = $(this).attr('data-page');\n        page = parseInt(page, 10);\n        inst.deselect_all(true);\n        inst.change_page(parentNode, page);\n        // and then reselect the same node again to trigger update\n        inst.select_node(parentNode);\n    });\n\n    // double-click handler on image - launches image viewer\n    $(\"#content_details\").on(\"dblclick\", \"li.row\", function(event) {\n        var $this = $(this),\n            iid = $this.attr('id').split(\"-\")[1],\n            url;\n        // Image only has share ID if user doesn't own the share.\n        if ($this.attr('data-share')) {\n            url = \"{% url 'web_image_viewer' 99 0 %}\".replace('/99/', \"/\" + $this.attr('data-share') + \"/\" );\n        } else {\n            url = \"{% url 'web_image_viewer' 0 %}\";\n        }\n        url = url.replace('/0/', \"/\" + iid + \"/\" );\n        // We try to traverse the jstree, to find parent of selected image\n        var parent = OME.getTreeImageContainerBestGuess(iid);\n        if (parent && parent.data) {\n            if (parent.type === 'dataset') {\n                url += '?' + parent.type + '=' + parent.data.id;\n            }\n        }\n        window.open(url, '_blank');\n    });\n\n    // Set up the centre panel header.\n    var setupDatasetHeader = function() {\n        var html = headerTmpl({'layout': layout, 'staticUrl': '{% static \"webclient/\" %}'});\n        $(\"#content_details\").html(html);\n\n        // single click handler on image (container). Selection then update toolbar & metadata pane\n        $( \"#icon_table\" ).on( \"click\", \"li.row\", function(event) {\n            event.preventDefault();\n            handleClickSelection(event);\n        });\n\n        $(\"#filtersearch label\").inFieldLabels();\n\n        $(\"#thumb_size_slider\").slider({\n            max: 200,\n            min: 30,\n            value: iconSize,\n            slide: function(event, ui) {\n                iconSize = ui.value;\n                setIconSize();\n            }\n        });\n        // handle Radio buttons\n        $(\"#layout_chooser button\").on('click', function(event) {\n            if ($(event.target).attr('id') == 'table_layout') {\n                layout = 'table';\n            } else {\n                layout = 'icon';\n            }\n            setLayout();\n            $(\"#layout_chooser button\").removeClass(\"checked\");\n            $(event.target).addClass(\"checked\");\n        });\n    }\n\n    // This is called directly by various jstree plugins\n    // E.g. omecut_plugin.js as well as the jstree in containers.html\n    window.update_thumbnails_panel = function(event, data) {\n\n        // Get the current selection\n        var selected = inst.get_selected(true);\n\n        if (!$(\"#content_details\").is(\":visible\") || selected.length === 0) {\n            $(\"#content_details\").html(\"\");\n            parentId = undefined;\n            clearThumbnailsPanel();\n            return;\n        }\n        var dtype = selected[0].type;\n        if (selected.length > 1 && dtype !== \"image\") {\n            $(\"#content_details\").html(\"\");\n            parentId = undefined;\n            clearThumbnailsPanel();\n            return;\n        }\n\n        // parent node could be dataset, orphaned, share or tag\n        // see WEBCLIENT.UI.TREE.pagination_nodes and ome.tree.js\n        var parentTypes = WEBCLIENT.UI.TREE.pagination_nodes,\n            imgNodes = [];\n        if (parentTypes.indexOf(dtype) < 0) {\n            parentNode = selected[0];\n        } else if (dtype === \"image\") {\n            parentNode = inst.get_node(inst.get_parent(selected[0]));\n        } else if (dtype === \"plate\" || dtype === \"acquisition\") {\n            parentId = undefined;\n            load_spw(event, data);\n            return;\n        // All other types have blank centre panel\n        } else {\n            parentId = undefined;\n            clearThumbnailsPanel();\n            return;\n        }\n\n        if (!parentNode) {\n            // need this for pagination etc\n            parentNode = inst.get_node(data.node);\n        }\n\n        var newParentId = parentNode.type + \"-\" + parentNode.data.obj.id;\n        if (parentId === newParentId\n                && event.type !== \"copy_node\"\n                && event.type !== \"create_node\"\n                && event.type !== \"load_node\"\n                && event.type !== \"delete_node\"\n                && event.type !== \"refreshThumb\"\n                && event.type !== \"refreshThumbnails\") {\n\n            highlightSelectedThumbs(selected);\n\n            return;\n        }\n        // update single thumbnail, see OME.refreshThumbnails\n        if (event.type === \"refreshThumb\") {\n            OME.load_thumbnail(\n                data.imageId,\n                \"{% url 'webindex' %}get_thumbnail/\"+data.imageId+\"/\",\n                function(thumb) {\n                    $(\"li#image_icon-\"+data.imageId+ \" img\").attr(\"src\", thumb);\n                }\n            );\n            return;\n        }\n\n        parentId = newParentId;\n\n        // clear html and stored data before adding back html\n        clearThumbnailsPanel();\n\n        imgNodes = [];\n        parentNode.children.forEach(function(ch){\n            var childNode = inst.get_node(ch);\n            // Ignore non-images under tags or 'deleted' under shares\n            if (childNode.type == \"image\") {\n                imgNodes.push(childNode);\n            }\n        });\n\n        var imgJson = [],\n            selFileSets = [],\n            shareId = null;\n        // Convert jsTree nodes into json for template\n        imgNodes.forEach(function(node){\n            var d = node.data.obj.date || node.data.obj.acqDate;\n            var date = new Date(d);\n            date = date.toLocaleTimeString(undefined, dateFormatOptions);\n            var iData = {'id': node.data.obj.id,\n                    'name': node.text,\n                    'data': JSON.parse(JSON.stringify(node.data)),\n                    'selected': node.state.selected,\n                    'date': date,\n                };\n            // Note fileset IDs for selected images\n            if (iData.selected) {\n                var fsId = node.data.obj.filesetId;\n                if (fsId) {\n                    selFileSets.push(fsId);\n                }\n            }\n            // If image is in share and share is not owned by user...\n            if (node.data.obj.shareId && !parentNode.data.obj.isOwned) {\n                // share ID will be needed to open image viewer\n                iData.shareId = node.data.obj.shareId;\n                shareId = node.data.obj.shareId;\n            }\n            imgJson.push(iData);\n        });\n\n        // Now we know which filesets are selected, we can\n        // go through all images, adding fs-selection flag if in\n        if (selFileSets.length > 0) {\n            imgJson.forEach(function(img){\n                if (selFileSets.indexOf(img.data.obj.filesetId) > -1) {\n                    img.fsSelected = true;\n                }\n            });\n        }\n\n        if ($(\"#icon_table\").length == 0) {\n            setupDatasetHeader();\n        }\n\n        var json = {'images': imgJson,\n                    'webindex': '{% url \"webindex\" %}',\n                    'layout': layout,\n                    'paging': false}\n        // Add 'dataset':id if we have it\n        json['dataset'] = parentNode.type == 'dataset' ? parentNode.data.obj.id : false;\n\n        var childCount = parentNode.data.obj.childCount;\n        if (PAGE_SIZE < childCount) {\n            json.pageCount = Math.ceil(childCount / PAGE_SIZE);\n            json.paging = true;\n            json.page = inst.get_page(parentNode);\n        }\n\n        var html = iconTmpl(json);\n        $(\"#icon_table\").html(html);\n\n        // load thumbnails in a batches\n        thumbnailsBatch = {{ thumbnails_batch|default:50|json_dumps|safe }};\n        iids = $.map(imgJson, function(img){\n            return img.id;\n        });\n        thumbUrl = \"{% url 'get_thumbnails_json' %}\";\n        if (shareId !== null) {\n          thumbUrl = \"{% url 'get_thumbnails_json' %}\" + shareId + \"/\"\n        }\n\n        // getThumbnailSet() doesn't work with share permissions, so we get\n        // single thumbnails at a time\n        if (parentNode.type === \"share\") {\n            thumbnailsBatch = 1;\n        }\n        OME.load_thumbnails(\n            thumbUrl, iids, thumbnailsBatch,\n            \"{% static 'webgateway/img/image128.png' %}\"\n        );\n\n        // populate arrays etc for speedy icon zooming\n        setupIconZooming();\n\n        // setup quicksearch filtering of images\n        setupFiltering();\n\n        // init the elementsorter plugin\n        setupSorting();\n\n        // plugin to handle drag-select of images (share is single-select only)\n        if (parentNode.type !== \"share\") {\n            setupSelectable();\n        }\n\n        // scroll to selected thumbnail (if any)\n        focusThumbnail();\n\n        return;\n    }\n\n    // Update thumbnails when we switch between plugins\n    $('#center_panel_chooser').on('center_plugin_changed.ome', update_thumbnails_panel);\n\n    // Use selected nodes from tree to indicate thumbnails\n    var highlightSelectedThumbs = function(selected) {\n        $(\"#dataIcons li.row\").removeClass(\"ui-selected\").removeClass(\"fs-selected\");\n        var selFileSets = [];\n        selected.forEach(function(node){\n            if (node.type == \"image\") {\n                $(\"#image_icon-\" + node.data.obj.id).addClass(\"ui-selected\");\n            }\n            var fsId = node.data.obj.filesetId;\n            if (fsId) {\n                selFileSets.push(fsId);\n            }\n        });\n        selFileSets.forEach(function(fsId){\n            $(\"#dataIcons li[data-fileset='\" + fsId + \"']\").addClass(\"fs-selected\");\n        });\n        focusThumbnail();\n    }\n\n    var focusThumbnail = function() {\n        // We focus the thumbnail to make sure it's scrolled into view\n        var $focused = $(':focus');\n        $(\"#dataIcons li.ui-selected\").first().trigger('focus');\n        // Then re-focus the jstree node, so that hot-keys work etc\n        $focused.trigger('focus');\n    }\n\n    var getRandom = function() {\n        return (Math.random() + \"\").slice(2);\n    }\n\n    var setupSelectable = function() {\n        $(\"#dataIcons\").selectable({\n            filter: 'li.row',\n            distance: 2,\n            stop: function() {\n                // Make the same selection in the jstree etc\n                syncTreeSelection();\n            },\n            start: function() {\n                // Remove any fileset selection markings\n                $(\"#dataIcons li.row:visible\")\n                    .removeClass(\"fs-selected\")\n                    .removeClass(\"lastSelected\");\n            }\n        });\n    }\n\n    var setupSorting = function() {\n        // simple emulation of table-sorter for other elements...\n        // performs sort when intialised on 'sort-init' column\n        $(\".element_sorter\").elementsorter({\n            head: '.thead div',             // Selector for the equivalent of 'table head'\n            body: 'li.row',                 // Selector for the equivalent of 'table rows'\n            sort_key: '.hidden_sort_text'   // optional - how to find the text within each child of a 'row'.\n        });\n    }\n\n    var setupFiltering = function() {\n        // All the image filtering functionality setup here...\n        // {'id': {'text': 'name', 'images': [1,2,3]} } for all tags used for filtering\n        var usedTags = {};\n        // {key: {'values':{'imageId': 'val1, val2'}, 'type': 'number'}\n        var usedKeyValues = {};\n        var currentFilterKey;\n        var filter_tag_ids = [];\n\n        var filterObjects = [];\n\n        function doFiltering() {\n            // get image IDs, find which are filtered and update images\n            $(\"#dataIcons li.row\").each(function(){\n                var $this = $(this);\n                var iid = $this.attr(\"data-id\");\n                // check if visible in all filters\n                var visible = true;\n                filterObjects.forEach(function(f){\n                    if (!f.isImageVisible(iid)) {\n                        visible = false;\n                    }\n                });\n                if (visible) {\n                    $this.removeClass('mapFilter_hidden');\n                } else {\n                    $this.addClass('mapFilter_hidden');\n                }\n            });\n            // finally, we de-select hidden\n            deselectFiltered();\n        }\n\n        // Chooser for revealing various filter components\n        $(\"#choosefilter\").on('change', function() {\n            var $this = $(this),\n                filterby = $this.val();\n            // reset chooser\n            $this.val(\"addfilter\");\n\n            // if we're already showing this filter, ignore\n            if ($(\"#filter\" + filterby).is( \":visible\" )) {\n                return;\n            }\n\n            // Handle 'Remove all filters'\n            if (filterby == \"removeAll\") {\n                $(\".imagefilter\").hide();\n                // clear text filter (will also undo fitering)\n                $('#id_search').val('').trigger('keyup');\n                // reset rating to 0\n                $(\"#filterrating img\").attr('src', \"{% static 'webclient/image/rating' %}0.png\");\n                // clear any filtering by rating/unrated\n                $(\"#dataIcons li.row\").removeClass('ratingFilter_hidden');\n                // reset Tag filtering\n                filter_tag_ids = [];\n                renderFilterTags();\n            }\n\n            // Unrated and By rating are mutually exclusive\n            if (filterby === \"unrated\") {\n                // reset 'by rating' filter\n                $(\"#filterrating\").hide().find(\"img\").attr('src', \"{% static 'webclient/image/rating' %}0.png\");\n                // do filtering\n                filterUnrated();\n            } else if (filterby === \"rating\") {\n                $(\"#filterunrated\").hide();\n                $(\"#dataIcons li.row\").removeClass('ratingFilter_hidden');\n            }\n\n            if (filterby === \"tag\") {\n                // Load tags for images\n                var iids = [];\n                $(\"#dataIcons li.row\").each(function(){\n                    iids.push($(this).attr(\"data-id\"));\n                });\n                // Check to ensure images are available for filtering\n                // if (iids.length === 0) {\n                //     // No images to filter\n                //     return;\n                // }\n                var query = \"image=\" + iids.join(\"&image=\");\n                $.getJSON(\"{% url 'api_annotations' %}?type=tag&\" + query, function(data){\n                    // map imageId to rating... rdata = {'iid': hide?}\n                    usedTags = data.annotations.reduce(function(prev, t){\n                        var imgId = t.link.parent.id;\n                        if (!prev[t.id]) {\n                            prev[t.id] = {'textValue': t.textValue, 'images': []};\n                        }\n                        prev[t.id].images.push(imgId);\n                        return prev;\n                    }, {});\n                    renderFilterTags();\n                });\n            }\n\n            if (filterby === \"map\") {\n                // Load map annotations for images\n                var iids = [];\n                $(\"#dataIcons li.row\").each(function(){\n                    iids.push($(this).attr(\"data-id\"));\n                });\n\n                var f = new MapAnnFilter(iids, $('#center_toolbar'), doFiltering, filterObjects);\n                filterObjects.push(f);\n                return;\n            }\n\n            // Show filter\n            if (filterby != \"addfilter\") {\n                $(\"#filter\" + filterby).show();\n            }\n        });\n        // Filters have a 'X' for clearing filter\n        $(\".filtersearch\").on('click', '.removefilter', function(){\n            var $fltr = $(this).parent();\n            var fid = $fltr.attr('id');\n            if (fid === 'filterrating') {\n                $(\"#dataIcons li.row\").removeClass('ratingFilter_hidden');\n                $(\"#filterrating img\").attr('src', \"{% static 'webclient/image/rating' %}0.png\");\n            } else if (fid === 'filterunrated') {\n                $(\"#dataIcons li.row\").removeClass('ratingFilter_hidden');\n                $fltr.hide();\n            } else if ($fltr.attr('data-tagId')) {\n                // Remove a single Tag\n                var tagId = $fltr.attr('data-tagId');\n                filter_tag_ids = filter_tag_ids.filter(function(i){return i !== tagId});\n                renderFilterTags();\n            } else if (fid == 'filtertag') {\n                // Remove ALL tags and hide tag filter\n                $fltr.hide();\n                filter_tag_ids = [];\n                renderFilterTags();\n            }\n        });\n\n        // Handle filtering by text\n        var $filter_input = $('#id_search');\n        var filter_txt = $filter_input.val();\n        $filter_input.quicksearch('#dataIcons li.row', {\n            'delay': 300,\n            'bind': 'keyup',\n            'loader': 'span.loading',\n            'selector': '.hidden_sort_text',\n            onAfter: function(){\n                // onAfter can get triggered without text change, E.g. by tree selection!\n                var new_txt = $filter_input.val();\n                if (filter_txt != new_txt){     // test text has changed\n                    filter_txt = new_txt;\n                    deselectFiltered();\n                }\n            }\n        });\n\n        // filter by unrated\n        var filterUnrated = function(){\n            var iids = [];\n            $(\"#dataIcons li.row\").each(function(){\n                iids.push($(this).attr(\"data-id\"));\n            });\n            // Check to ensure images are available for filtering\n            if (iids.length === 0) {\n                // No images to filter\n                return;\n            }\n            var query = \"image=\" + iids.join(\"&image=\");\n            $.getJSON(\"{% url 'api_annotations' %}?type=rating&\" + query, function(data){\n                // map imageId to rating... rdata = {'iid': hide?}\n                var rdata = data.annotations.reduce(function(prev, r){\n                    var iid = \"\" + r.link.parent.id;\n                    prev[iid] = true;\n                    return prev;\n                }, {});\n                $(\"#dataIcons li.row\").each(function(){\n                    var $this = $(this),\n                        iid = $this.attr(\"data-id\");\n                    if (rdata[iid]) {\n                        // hide\n                        $this.addClass('ratingFilter_hidden');\n                    } else {\n                        // show\n                        $this.removeClass('ratingFilter_hidden');\n                    }\n                });\n                // finally, we de-select hidden\n                deselectFiltered();\n            });\n        };\n\n        // filter by rating\n        $(\"#filterrating img\").on('click', function(event) {\n            var iids = [],\n                $rating = $(this),\n                clickX = event.pageX - $rating.offset().left;\n            var rating = (clickX/ $rating.width()) * 5;\n            rating = parseInt(Math.ceil(rating), 10);\n            var src=\"{% static 'webclient/image/rating' %}\" + rating + \".png\";\n            $rating.attr('src', src);\n            $(\"#dataIcons li.row\").each(function(){\n                iids.push($(this).attr(\"data-id\"));\n            });\n            // Check to ensure images are available for filtering\n            if (iids.length === 0) {\n                // No images to filter\n                return;\n            }\n            var query = \"image=\" + iids.join(\"&image=\");\n            // get ratings...\n            $.getJSON(\"{% url 'api_annotations' %}?type=rating&\" + query, function(data){\n                // map imageId to rating... rdata = {'iid': show?}\n                var rdata = data.annotations.reduce(function(prev, r){\n                    // we don't care who owns the rating/link\n                    var iid = \"\" + r.link.parent.id,\n                        longValue = r.longValue;\n                    if (r.longValue === rating) {\n                        prev[iid] = true;\n                    }\n                    return prev;\n                }, {});\n                $(\"#dataIcons li.row\").each(function() {\n                    var $this = $(this),\n                        iid = $this.attr(\"data-id\");\n                    if (rating === 0 || rdata[iid]) {\n                        $this.removeClass('ratingFilter_hidden');\n                    } else {\n                        $this.addClass('ratingFilter_hidden');\n                    }\n                });\n                // finally, we de-select hidden\n                deselectFiltered();\n            });\n        });\n\n        // Filtering by Tag\n        function renderFilterTags() {\n            // Render Tag filter chooser, without current filter tags\n            var tagList = [];\n\n            for (t in usedTags) {\n                if (usedTags.hasOwnProperty(t)) {\n                    tagList.push({id: t, text: usedTags[t].textValue});\n                }\n            }\n            // sort list of tags\n            tagList.sort(function(a, b){\n                return a.text < b.text ? -1 : 1;\n            });\n            var html = tagList.map(function(t){\n                // don't show tags we're filtering by\n                if (filter_tag_ids.indexOf(t.id) > -1) return \"\";\n                return \"<option value='\" + t.id + \"'>\" + t.text + \"</option>\";\n            }).join(\"\");\n            html = \"<option value='0'>Choose Tag</option>\" + html;\n            $(\"#filter_by_tag\").html(html);\n\n            // hide filtered images \n            $(\"#dataIcons li.row\").each(function() {\n                var $this = $(this),\n                    iid = parseInt($this.attr(\"data-id\"), 10);\n                // Visible if image has ALL filter tags\n                var visible = filter_tag_ids.reduce(function(prev, tid){\n                    return prev && (usedTags[tid].images.indexOf(iid) > -1);\n                }, true);\n                if (visible) {\n                    $this.removeClass('tagFilter_hidden');\n                } else {\n                    $this.addClass('tagFilter_hidden');\n                }\n            });\n            // show tags\n            var html = filter_tag_ids.map(function(tagId){\n                var tagText = usedTags[tagId].textValue;\n                return \"<div class='tag' data-tagId='\" + tagId + \"'><a class='tag_inner' href='#'>\" + tagText + \"</a><span class='removeTag removefilter' title='Remove Tag'>-</span></div>\";\n            }).join(\"\");\n            $(\"#currentFilterTags\").html(html);\n        };\n\n        $(\"#filter_by_tag\").on('change', function(event){\n            var $this = $(event.target);\n            var tagId = $this.val();\n            if (filter_tag_ids.indexOf(tagId) === -1) {\n                filter_tag_ids.push(tagId);\n            }\n\n            renderFilterTags();\n\n            // reset choose\n            $this.val('0');\n\n            // finally, we de-select hidden\n            deselectFiltered();\n        });\n    }\n\n    // When we filter, unselect the hidden icons and update\n    // selections in the jstree\n    var deselectFiltered = function(e, a){\n        // check if any selection change is needed\n        var $filtered = $(\"#dataIcons li.ui-selected:hidden\");\n        if ($filtered.length == 0) return;\n\n        // If we've filtered any selected images, de-select icon\n        $filtered.removeClass(\"ui-selected\");\n\n        var imageId = $filtered.first().data('id');\n        syncTreeSelection(imageId);\n    };\n\n    // handles selection for 'clicks' (not drags)\n    var handleClickSelection = function(event) {\n\n        // It is possible to select the image itself or its individual container\n        // Handle that here\n        var $targetIcon;\n        if (event.target.nodeName.toLowerCase() == 'li') {\n            $targetIcon = $(event.target);\n        } else if (event.target.nodeName.toLowerCase() == 'img') {\n            $targetIcon = $(event.target).parent().parent().parent();\n        } else if (event.target.nodeName.toLowerCase() == 'a') {\n            $targetIcon = $(event.target).parent().parent();\n        } else {\n            $targetIcon = $(event.target).parent();\n        }\n\n        var imageId = $targetIcon.attr('data-id');\n\n        // Add ui-selected class to range of icons etc\n        highlightClickedIcons(event, $targetIcon);\n\n        syncTreeSelection();\n\n    }\n\n\n    var highlightClickedIcons = function(event, $targetIcon) {\n        /***\n         * Based on the icon that was selected and any modifier keys\n         * update the thumbnail selections\n        */\n\n        // Get the visible icons that might need selecting\n        var $visibleIcons = $(\"#dataIcons li.row:visible\");\n\n        // Get the start point for a range select if there is one\n        // and it is visible\n        var $lastSelected = $('#dataIcons .lastSelected:visible');\n        if ($lastSelected.length === 0) {\n            // possible after drag select - just pick selected\n            $lastSelected = $('#dataIcons .ui-selected:visible');\n        }\n\n        // Calculate the index of the last selected item if there was one\n        var lastSelectedIndex = -1;\n        $lastSelected.each(function(index, el) {\n            lastSelectedIndex = $visibleIcons.index(el);\n        });\n\n        // Get the index of the target item\n        var targetIndex = $visibleIcons.index($targetIcon);\n\n        // Remove the starting point as a new one is about to be applied\n        $lastSelected.removeClass('lastSelected');\n\n        // Get the platform specific multi-select key\n        var multiSelectKey = OME.multi_key() + \"Key\";\n\n        var selectedIcons = [];\n        var unselectedIcons = [];\n\n        // If this is a range select\n        if (event.shiftKey && lastSelectedIndex != -1) {\n            // Find the start and end of the range\n            var start = Math.min(lastSelectedIndex, targetIndex);\n            var end = Math.max(lastSelectedIndex, targetIndex);\n\n            // Mark the icons for selection\n            $visibleIcons.slice(start, end+1).each(function(index, el) {\n                $(el).addClass('ui-selected');\n            });\n\n\n        // If this is a multi-select\n        } else if (event[multiSelectKey] && lastSelectedIndex != -1) {\n            if ($targetIcon.hasClass('ui-selected')) {\n                $targetIcon.removeClass('ui-selected');\n            } else {\n                $targetIcon.addClass('ui-selected');\n            }\n\n        // This is a single selection or there was no other selection for the range/multi select\n        } else {\n            // Remove all selections\n            $visibleIcons.removeClass(\"ui-selected fs-selected\");\n            // Add selection for this one item\n            $targetIcon.addClass(\"ui-selected lastSelected\");\n        }\n\n        // Mark the most recent selection\n        $targetIcon.addClass('lastSelected');\n    }\n\n\n    // use IDs of the selected visible thumbnails to sync tree selection\n    var syncTreeSelection = function() {\n\n        var $selectedIcons = $('#dataIcons li.ui-selected');\n        if (parentNode.type == 'share') {\n            // We don't support multi-selection of images in share\n            $selectedIcons.removeClass('ui-selected');\n            $selectedIcons = $selectedIcons.first().addClass('ui-selected');\n        }\n        var imageId = $selectedIcons.first().data('id');\n\n        // Get the node that seems to be the current container\n        // Images only, all that is required for now as center panel only shows images\n        var containerNode;\n        if (imageId) {\n            // don't lookup container if no images selected\n            containerNode = OME.getTreeImageContainerBestGuess(imageId);\n        }\n\n        // Deselect all to begin (supress jstree event)\n        inst.deselect_all(true);\n\n        var fsIds = {};\n        if (containerNode) {\n\n            // Select the selected icons in the tree (supress jstree event)\n            $selectedIcons.each(function(index, el) {\n                var $el = $(el),\n                    fsId = $el.data('fileset');\n                if (fsId != undefined && fsId != '') {\n                    fsIds[fsId] = true;\n                }\n                var selectedNode = inst.locate_node($el.data('type') + '-' + $el.data('id'), containerNode)[0];\n                inst.select_node(selectedNode, true);\n                // we also focus the node, so that hotkey events come from the node\n                if (selectedNode) {\n                    $(\"#\" + selectedNode.id).children('.jstree-anchor').trigger('focus');\n                }\n            });\n        } else {\n            console.log('jstree may need to be refreshed');\n        }\n        // Update thumbnail highlighting of filesets\n        highlightFilesets(fsIds);\n\n        // Since we've suppressed jstree events, we need to manually handle selection change...\n        OME.writeSelectedObjs(undefined, $selectedIcons);\n        // Update the buttons in the jstree\n        if (buttonsShowHide) {\n            buttonsShowHide(inst.get_selected(true), inst);\n        }\n\n        // Tell jsTree how many elements are selected\n        // This event also bubbles up to $(\"body\")\n        $(\"#dataTree\").trigger('selection_change.ome', inst.get_selected(true).length);\n\n        return false;\n    }\n\n    // When an image(s) are selected, also indicate others with the same fileset(s).\n    var highlightFilesets = function(fsIds) {\n        var $selectee = $(\"#dataIcons\").find(\"li.row\");\n        $selectee.removeClass('fs-selected');\n        for (var fsid in fsIds) {\n            $selectee.filter(\"[data-fileset='\"+ fsid + \"']\").addClass('fs-selected');\n        }\n    }\n\n    // Handle zooming of thumbnails with jQuery slider\n    var setupIconZooming = function() {\n        icon_styles = [];\n        li_styles = [];\n        aspect_ratios = [];\n        // manipulate thumbnail styles directly (approx 2x faster than using jQuery)\n        $(\"#dataIcons img\").each(function(){\n            icon_styles.push(this.style);\n        });\n\n        var sizeX, sizeY;\n        $(\"#dataIcons li\").each(function(){\n            if (! $(this).hasClass('thead')) {\n                li_styles.push(this.style);\n                sizeX = $(\".sizeX\", $(this)).text();\n                sizeY = $(\".sizeY\", $(this)).text();\n                aspect_ratios.push(parseFloat(sizeX) / parseFloat(sizeY));\n            }\n        });\n\n        setIconSize();\n    }\n\n    var setIconSize = function(icon_size) {\n        var icon_size = iconSize;\n        for (var s=0; s<icon_styles.length; s++) {\n            if (aspect_ratios[s] < 1) {\n                icon_styles[s].width = Math.round(icon_size * aspect_ratios[s]) + 1 + \"px\";\n                icon_styles[s].height = icon_size + \"px\";\n            } else if (aspect_ratios[s] > 1) {\n                icon_styles[s].height = Math.round(icon_size / aspect_ratios[s]) + 1 + \"px\";\n                icon_styles[s].width = icon_size + \"px\";\n            } else {\n                icon_styles[s].width = icon_size + \"px\";\n                icon_styles[s].height = icon_size + \"px\";\n            }\n            li_styles[s].width = icon_size + \"px\";\n            li_styles[s].height = icon_size + \"px\";\n        }\n    }\n\n    // switch between 'icon' or 'table' layout by switching CSS\n    var setLayout = function() {\n        if (layout == \"icon\"){\n            $(\"#dataIcons\").removeClass(\"tableLayout\");\n            $(\"#dataIcons\").addClass(\"iconLayout\");\n        }\n        else {\n            $(\"#dataIcons\").removeClass(\"iconLayout\");\n            $(\"#dataIcons\").addClass(\"tableLayout\");\n        }\n        // on larger pages, may need to scroll to show selected thumbnail again\n        focusThumbnail();\n    }\n\n\n    // This is called for plates or acquisitions (runs) only.\n    // Was previously used for loading ALL data types but now\n    // images are retrieved from jsTree directly so we only need to\n    // load plates.\n    // TODO: More cleanup needed to remove all non-SPW code\n    var load_spw = function(event, data) {\n        // Get the container that is currently rendered\n        // If any of these are not defined then nothing was selected\n        var $contentDetails = $(\"div#content_details\");\n\n        // Get details about the currently displayed container\n        var currentType = $contentDetails.data('type');\n        var currentId = $contentDetails.data('id');\n        var currentPath = $contentDetails.data('path')\n        var currentNode = false;\n        var currentPage = $(\"div#page\").data('page');\n        var currentField = $contentDetails.data('field');\n\n        if (currentPage === undefined) {\n            currentPage = 1;\n        }\n\n        if (currentField === undefined) {\n            currentField = 0;\n        }\n\n        // Retrieve current container node\n        if (currentType != undefined &&\n            currentId != undefined &&\n            currentPath != undefined) {\n\n            currentPath = JSON.parse(currentPath);\n            currentNode = inst.find_omepath(currentPath);\n        }\n\n        // Get the current selection\n        var selected = inst.get_selected(true);\n\n        // If there are selections then determine if the currently\n        // rendered container is one of them.\n        var containerNode = false;\n        if (currentNode) {\n            $.each(selected, function(index, node) {\n                if (node === currentNode) {\n                    containerNode = node;\n                    // Break out of each\n                    return false;\n                }\n\n            });\n        }\n\n        // If the containerNode is the current container then this is\n        // a selection change within the container or a pagination/field\n        // change\n        if (containerNode) {\n            // This is a page change\n            if (getPageOr1(inst, containerNode) !== currentPage) {\n                loadThumbnailsPanel(containerNode, getPageOr1(inst, containerNode), undefined);\n\n            // Fields are only applicable for acquisitions\n            } else if ((containerNode.type === 'acquisition' || containerNode.type === 'plate') &&\n                       getfieldOr0(inst, containerNode) !== currentField) {\n                loadThumbnailsPanel(containerNode, undefined, getfieldOr0(inst, containerNode));\n            }\n\n            // Return as this was either a page/field change or image\n            // selection only\n            return;\n        }\n\n        // There was no current node or it was not selected\n        // Load the first of the selected nodes\n        containerNode = selected[0];\n\n        // While the new selection may not be the same path as the old one\n        // if it is an equivalent node, we can save a reload and simply update\n        // the recorded path, but only if it is the same page/field\n        if (currentNode &&\n            inst.omecompare(containerNode, currentNode) &&\n            (currentPage === inst.get_page(containerNode || (containerNode.type === 'acquisition' && currentField === inst.get_field(containerNode))))) {\n            $contentDetails.data('path', JSON.stringify(inst.get_omepath(containerNode)));\n            return;\n        }\n\n        // Load the thumbnails for this container with the appropriate page/field\n        // E.g. public.html tree doesn't support pages/fields\n        var nodePage = inst.get_page ? inst.get_page(containerNode) : 1;\n        var nodeField = inst.get_field ? inst.get_field(containerNode) : 0;\n        loadThumbnailsPanel(containerNode, nodePage, nodeField);\n        return;\n    };\n\n        // Load the thumbnails (Will wait until there are no new requests\n    // for 200ms)\n    var loadThumbnailsPanelTimeout = false;\n    var loadThumbnailsPanel = function(node, newPage, newField) {\n        // Reset timeout if within 200ms of the last request\n        if (loadThumbnailsPanelTimeout) {\n            window.clearTimeout(loadThumbnailsPanelTimeout);\n        }\n\n        loadThumbnailsPanelTimeout = window.setTimeout(function() {\n            // Clear the timeout\n            loadThumbnailsPanelTimeout = false;\n\n            // Update the central panel\n            var inst = $.jstree.reference('#dataTree');\n            var url = \"{% url 'webindex' %}\";\n            node = inst.get_node(node);\n            var nodeType = node.type;\n            var nodeId = node.data.obj.id;\n            var show = WEBCLIENT.initially_select.join(\"|\");\n            // clear WEBCLIENT.initially_select so we don't select well next time user loads plate\n            WEBCLIENT.initially_select = [];\n\n            switch(nodeType) {\n                case 'plate':\n                    // Only load plates if it has a single 'Run' (or none)\n                    if (node.children.length < 2) {\n                        url += 'load_plate/' + nodeType + '/' + nodeId + '/?index=' + newField;\n                        if (show) {\n                            url += \"&show=\" + show;\n                        }\n                    } else {\n                        url = undefined;\n                    }\n                    break;\n                case 'acquisition':\n                    url += 'load_plate/' + nodeType + '/' + nodeId + '/?index=' + newField;\n                    if (show) {\n                        url += \"&show=\" + show;\n                    }\n                    break;\n                default:\n                    url = undefined;\n            }\n\n            if (url != undefined) {\n                // Loading screen\n                $(\"div#content_details\").html('<p class=\"loading_center\">Loading... please wait. <img src =\"{% static \"webgateway/img/spinner_big.gif\" %}\"/></p>');\n\n                // Load html from url\n                $(\"div#content_details\").load(url);\n                setThumbnailsPanel(nodeType, nodeId, inst.get_omepath(node), newPage, newField);\n\n            // Or if it's not a container that can be loaded, sometimes display a message\n            } else {\n                // If there are no children of a project node, display a message\n                if (nodeType === 'project' && !inst.is_parent(node)) {\n                    var msg = \"<p class='center_message' title='Create Datasets using toolbar or right-click menu'>No Datasets in Project</a>\";\n                    $(\"div#content_details\").html(msg);\n\n                // If there are no children of a screen node, display a message\n                } else if (nodeType === 'screen' && !inst.is_parent(node)) {\n                    msg = \"<p class='center_message' title='Import Plates using OMERO.insight'>No Plates in Screen</a>\";\n                    $(\"div#content_details\").html(msg);\n                }\n\n                // And ensure the content is empty\n                clearThumbnailsPanel();\n            }\n        }, 200);\n\n    };\n\n    var clearThumbnailsPanel = function() {\n        var $contentDetails = $(\"div#content_details\");\n        $contentDetails.empty();\n        $contentDetails.removeData('type');\n        $contentDetails.removeData('id');\n        $contentDetails.removeData('path');\n        $(\"div#page\").removeData('page');\n        $contentDetails.removeData('field');\n        // empty SPW 'spatial' birds eye view below tree\n        if (OME.emptyWellBirdsEye) {\n            OME.emptyWellBirdsEye();\n        }\n    };\n    // Allows other web apps to access this method\n    OME.clearThumbnailsPanel = clearThumbnailsPanel;\n\n    var setThumbnailsPanel = function(type, id, path, page, field) {\n        var $contentDetails = $(\"div#content_details\");\n        $contentDetails.data('type', type);\n        $contentDetails.data('id', id);\n        $contentDetails.data('path', JSON.stringify(path));\n        $(\"div#page\").data('page', page);\n        $contentDetails.data('field', field);\n    };\n\n    var getPageOr1 = function(inst, node) {\n        if ('get_page' in inst) {\n            return inst.get_page(node);\n        }\n        return 1;\n    };\n\n    var getfieldOr0 = function(inst, node) {\n        if ('get_field' in inst) {\n            return inst.get_field(node);\n        }\n        return 0;\n    };\n\n});\n\n</script>\n", "{% load i18n %}\n{% load common_filters %}\n\n\n{% comment %}\n<!--\n  Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n    \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.plateview.css\"|add:url_suffix %}\" media=\"all\" />\n\n    <script type=\"text/javascript\">\n        \n        $(document).ready(function() {\n\n            // Drag to resize #wellImagesContainer bottom panel\n            $(\".verticalDragHandle\").draggable({ axis: \"y\" })\n            .on(\"dragstart\", function(event, ui) {\n                var wellImgs_h = $(\"#wellImagesContainer\").height();\n                $(this).data({'dragstart': ui.offset.top, 'wellImgs_h': wellImgs_h});\n            })\n            .on(\"drag\", function(event, ui) {\n                var dy = ui.offset.top - $(this).data('dragstart');\n                var newH = $(this).data('wellImgs_h') - dy;\n                $(\"#wellImagesContainer\").css('height', newH + 'px');\n                $(\"#spwContainer\").css('bottom', newH + 'px');\n            })\n            .on(\"dragstop\", function(event, ui) {\n                // Save the current size\n                var dy = ui.offset.top - $(this).data('dragstart');\n                var newH = $(this).data('wellImgs_h') - dy;\n                $('body').data('well_images_panel_height', newH);\n            });\n            // If height has previously been set, apply this...\n            var newH = $('body').data('well_images_panel_height') || 150;\n            $(\"#wellImagesContainer\").css('height', newH + 'px');\n            $(\"#spwContainer\").css('bottom', newH + 'px');\n            $(\"#wellImagesDragHandle\").css('bottom', (newH + 7) + 'px');\n\n            // Resize SPW thumbnails\n            var spw_thumb_size = $('body').data('spw_thumb_size') || 64;\n            $(\"#thumb_size_slider\").slider({\n                max: 130,\n                min: 10,\n                value: spw_thumb_size,\n                slide: function(event, ui) {\n                    // find current centre (as ratio of grid width/height)\n                    let $spw = $(\"#spw\");\n                    let $table = $(\"#spw>table\");\n                    let tableW = $spw.width() / 2;\n                    let tableH = $spw.height() / 2;\n                    let cx = ($spw.scrollLeft() + tableW) / $table.width();\n                    let cy = ($spw.scrollTop() + tableH) / $table.height();\n                    // resize\n                    wpv.setSpwThumbSize(ui.value);\n                    // scroll to recentre\n                    $spw.scrollLeft((cx * $table.width()) - tableW);\n                    $spw.scrollTop((cx * $table.height()) - tableH);\n                },\n                stop: function(event, ui) {\n                    $('body').data('spw_thumb_size', ui.value);\n                }\n            });\n            // Resize Images in Well\n            var well_images_size = $('body').data('well_images_size') || 64;\n            var prev_well_images_size = well_images_size;\n            $(\"#wellImages\").addClass('wellSize' + well_images_size);\n            $(\"#wellImages_size_slider\").slider({\n                max: 130,\n                min: 30,\n                value: well_images_size,\n                slide: function(event, ui) {\n                    $(\"#wellImages\").removeClass('wellSize' + prev_well_images_size).addClass('wellSize' + ui.value);\n                    prev_well_images_size = ui.value;\n                },\n                stop: function(event, ui) {\n                    $('body').data('well_images_size', ui.value);\n                }\n            });\n\n            // Trigger Well Images selected (to update right panel)\n            var triggerWellImagesSelection = function() {\n                var selected_ids = [];\n                $(\"#wellImages li.ui-selected\").each(function(){\n                    selected_ids.push(this.getAttribute('data-imageId'));\n                });\n                // This may be redundant if selection change came from birds eye component\n                wellBirdsEye.setSelected(selected_ids);\n\n                // trigger right panel update etc\n                var selected_objs = selected_ids.map(function(iid){\n                    return {id: 'image-' + iid};\n                })\n                $(\"body\")\n                    .data(\"selected_objects.ome\", selected_objs)\n                    .trigger(\"selection_change.ome\");\n            };\n            // Handle click on Wellsample Images\n            $( '#wellImages' ).on( \"click\", \"a\", function(event) {\n                event.preventDefault();\n                // Update 'ui-selected' on images, handling shift-click etc\n                var $a = $(event.target).parent();\n                OME.handleClickSelection(event, $a, \"#wellImages .wellSize\");\n                triggerWellImagesSelection();\n                return false;\n            });\n            // Listen for double-clicks to open image viewer\n            $( \"#wellImages\").on(\"dblclick\", \"a\", function() {\n                window.open($(this).prop('href'), '_blank');\n            });\n            // Drag selection on WellSample images\n            $('#wellImages').selectable({\n                filter: 'li',\n                distance: 2,\n                stop: function(){\n                    triggerWellImagesSelection();\n                }\n            });\n\n            var syncTreeSelection = function(selected, idx, perms) {\n                // De-select 'Run' from tree, silent 'true' so we don't trigger clear of centre panel\n                var datatree = $.jstree.reference('#dataTree');\n                // Update the buttons in the jstree as if nothing selected.\n                if (buttonsShowHide) {\n                    buttonsShowHide([], datatree);\n                }\n                // Calls to ome.webclient.actions.js\n                OME.well_selection_changed(selected, idx, perms);\n            };\n\n            var staticurl = WEBCLIENT.URLS.static_webgateway;\n            var wpv = $.WeblitzPlateview($('#spw'),\n                { baseurl: '{{ baseurl }}',\n                  width: spw_thumb_size,\n                  staticurl: staticurl,\n                  useParentPrefix: false,\n                  thumbnailsBatch: {{ thumbnails_batch|default:50|json_dumps|safe }},\n                  defaultThumb: \"{% static 'webgateway/img/image128.png' %}\"\n                 });\n            var $selected;\n            // delegated click and dblclick handlers for wells\n            $( '#spw' ).on( \"click\", \"td.well img\", function(event) {\n                OME.handleClickSelection(event, undefined, \"#spw td.well img\");\n                var $selected = $('td.ui-selected', wpv.self);\n                syncTreeSelection($selected, {{ index }}, '{{ manager.getPermsCss }}');\n                showImagesInWell();\n            });\n            $( '#spw' ).on( \"dblclick\", \"td.well img\", function(event) {\n                var url = \"{% url 'web_image_viewer' 0 %}\".replace('/0/', \"/\"+$(this).attr('id').split(\"-\")[1]+\"/\" );\n                window.open(url, '_blank');\n            });\n\n            wpv.self.selectable({\n                filter: 'td.well',\n                distance: 2,\n                stop: function(){  \n                    var $selected = $('td.ui-selected', this);\n                    syncTreeSelection($selected, {{ index }}, '{{ manager.getPermsCss }}');\n                    showImagesInWell();\n                },\n                start: function(){\n                }\n            });\n            {% if select_wells %}\n                wpv.self.on('_resetLoaded', function(){\n                    var sel_well_ids = [{{ select_wells }}],\n                        well_id, $well\n                        selected_wells = $(\"\");\n                    for (var s=0;s<sel_well_ids.length;s++){\n                        well_id = sel_well_ids[s];\n                        if (typeof well_id === \"number\") {\n                            $well = $(\"#well-\"+well_id);\n                            if ($well.length > 0) {\n                                selected_wells = selected_wells.add($well);\n                            }\n                        }\n                    }\n                    if (selected_wells.length > 0) {\n                        OME.handleClickSelection(undefined, $(\"img\", selected_wells), \"#spw td.well img\");\n                        $selected = $('td.ui-selected', wpv.self);\n                        syncTreeSelection($selected, {{ index }}, '{{ manager.getPermsCss }}');\n                        var show = OME.getURLParameter('show');\n                        var imageIds = [];\n                        if (show) {\n                            // handle multiple images: show=image-1|image-2\n                            show = show.split('image-');\n                            if (show.length > 1) {\n                                imageIds = show.slice(1).map(function(iid){return parseInt(iid)});\n                            }\n                        }\n                        showImagesInWell(imageIds);\n                    }\n\n                    var selection = $(\"td.ui-selected\").first();\n                    if (typeof selection !== 'undefined' && selection.length > 0) {\n                        var spwContainer = $(\"#spwContainer\");\n                        var fillSpace = $(\"#spw\");\n                        fillSpace.scrollTop(selection.position().top - (spwContainer.height() / 2) + selection.height() / 2);\n                        fillSpace.scrollLeft(selection.position().left - (spwContainer.width() / 2) + selection.width() / 2);\n                    }\n                });\n            {% endif %}\n\n            // Kick-off loading...\n            wpv.load({{ manager.getPlateId }}, {{ index }});\n\n\n            // Lower panel.....\n\n            // Wrap images to a fixed number per row...\n            $(\"#imagesPerRow\").on('change', function(){\n                var imagesPerRow = parseInt(this.value, 10);\n                var $lists = $(\"#wellImages ul\");\n                // Remove any existing <br>\n                $(\"br\", $lists).remove();\n                if (isNaN(imagesPerRow)) return;\n                // Add <br> after each nth image\n                $(\"li:nth-child(\" + imagesPerRow + \"n)\", $lists).after('<br>');\n            });\n\n            // Callback for the spatial birds eye component\n            var selectImages = function(imageIds) {\n                $(\"#wellImages li\").removeClass('ui-selected');\n                imageIds.forEach(function(iid){\n                    $(\"#wellImages li[data-imageId=\" + iid + \"]\").addClass('ui-selected');\n                });\n                triggerWellImagesSelection();\n            }\n\n            var wellBirdsEye = OME.WellBirdsEye({callback: selectImages});\n            var showImagesInWell = function(selectImageIds) {\n                var $table = $(\"#wellImages table\");\n                var $selected = $('td.ui-selected', wpv.self);\n                $table.empty();\n                wellBirdsEye.clear();\n                $selected.each(function(i, w){\n                    var wellId = w.id.split('-')[1];\n                    var label = $(w).children('.wellLabel').text();\n                    var labelHtml = \"<td class='wellImagesLabel'><h1>\" + label + \"</h1></td>\";\n                    // create placeholders for each Well\n                    $table.append(\"<tr id='wellImages-\" + wellId + \"'>\" + labelHtml + \"</tr>\");\n                    var url = \"{% url 'webgateway' %}well/\" + wellId + \"/children/\";\n                    {% if acquisition %}\n                        url += '?run={{ acquisition }}'\n                    {% endif %}\n                    $.getJSON(url, function(data){\n                        wellBirdsEye.addWell(data);\n                        var imagesPerRow = parseInt($(\"#imagesPerRow\").val(), 10);\n                        var html = data.reduce(function(html, w, idx){\n                            var cls = '';\n                            if (selectImageIds && selectImageIds.indexOf(w.id) > -1) {\n                                cls = 'class=\"ui-selected\"';\n                            }\n                            html += '<li ' + cls + ' title=\"' + w.name + '\" data-imageId=\"' + w.id + '\">';\n                            html += '<a href=\"{% url 'webindex' %}img_detail/' + w.id + '/\">';\n                            html += '<div class=\"wellSize\"><img /></div>';\n                            html += '</a></li>';\n                            if (!isNaN(imagesPerRow) && (idx+1)%imagesPerRow === 0) {\n                                html += '<br>';\n                            }\n                            return html;\n                        }, \"\");\n                        // We use .html() instead of .append() so double-clicks don't give duplicate html\n                        $('#wellImages-' + wellId).html(labelHtml + \"<td><ul>\" + html + \"</ul></td>\");\n                        if (selectImageIds && selectImageIds.length > 0) {\n                            triggerWellImagesSelection();\n                        }\n                        var iids = data.map(function(i){\n                            return i.id;\n                        });\n                        // Load thumbnails\n                        var thumbnailsBatch = {{ thumbnails_batch|default:50|json_dumps|safe }};\n                        OME.load_thumbnails(\"{% url 'get_thumbnails_json' %}\",\n                                            iids, thumbnailsBatch,\n                                            \"{% static 'webgateway/img/image128.png' %}\"\n                        );\n                    });\n                });\n            }\n        });\n\n    </script>\n\n    \n    <!--content-->\n<!-- We add/remove class .showWellImages to #content_details expose #wellImages panel -->\n<div class='fillSpace' style=\"top: 0px; height: 29px\">\n    <div id=\"fields\">\n        <form action=\"\" method=\"POST\" class=\"align_left\">\n        <table>\n          <tbody>\n            {% for field in form_well_index %}\n            <tr><th>{{ field.label_tag }}</th><td class=\"input\">{{ field }}</td><td>{% if field.errors %}{{ field.errors }}{% endif %}{{ field.help_text|safe }}</td></tr>\n            {% endfor %}\n            <div id=\"well_index\" style=\"display:none\">{{ index }}</div>\n          </tbody>\n        </table>\n        </form>\n        <div id=\"toolbar\" class=\"toolbar_noborder\">\n        </div>\n    </div>\n</div>\n<div id=\"spwContainer\" class='fillSpace' style=\"top: 29px; bottom: 150px\">\n\n    <!-- Scrollable container for spw -->\n    <div id=\"spw\" style='position: absolute; left: 0; right: 0; top: 0; bottom: 25px'></div>\n    <div class='fillSpace' style='bottom: 0; height: 25px; border-top: solid 1px #ddd; background: #EFF1F4' >\n        <!-- Slider -->\n        <div style=\"position: absolute; right: 10px; bottom: 0; width: 200px; height: 25px\">\n            <span class=\"zoomLabel\">Zoom:</span>\n            <div id=\"thumb_size_slider\" class=\"thumb_size_slider\" title=\"Zoom Plate\"></div>\n        </div>\n    </div>\n</div>\n<div id=\"wellImagesDragHandle\" class='fillSpace' style=\"bottom: 150px; overflow: visible\">\n    <div class=\"verticalDragHandle\"></div>\n</div>\n<div id=\"wellImagesContainer\" class=\"well-fields wellImages fillSpace\">\n    <div class=\"well-fields__toolbar toolbarBg\">\n        <div class=\"well-fields__toolbar-tools--left\">\n            <div class=\"wrap-images-tool\">\n                <span class=\"text--medium\">wrap</span>\n                <input class=\"wrap-images-tool__input\" id=\"imagesPerRow\" type=\"number\" min=\"0\" max=\"99\"/>\n                <span class=\"text--medium\">images per row</span>\n            </div>\n        </div>\n        <div class=\"well-fields__toolbar-title\">\n            <span class=\"text--medium\">Fields from well</span>\n        </div>\n    </div>\n    <!-- Scrollable container for wellImages -->\n    <div id=\"wellImages\" class=\"well-fields__images fillSpace\">\n        <table style=\"width: 100%\"></table>\n    </div>\n    <div class='fillSpace' style='bottom: 0; height: 25px; border-top: solid 1px #ddd; background: #EFF1F4' >\n        <!-- Slider -->\n        <div style=\"position: absolute; right: 10px; bottom: 0px; width: 200px; height: 25px\">\n            <span class=\"zoomLabel\">Zoom:</span>\n            <div id=\"wellImages_size_slider\" class=\"thumb_size_slider\" title=\"Zoom Plate\"></div>\n        </div>\n    </div>\n</div>", "{% extends \"webgateway/core_html.html\" %}\n{% load i18n %}\n\n{% comment %}\n<!--\n  Copyright (C) 2020 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n{% block title %}\n    Upload Script\n{% endblock %}\n\n\n{% block link %}\n\n    <style type=\"text/css\">\n\n        body {\n            font-family: Arial;\n            background: #eee;\n            margin: 0px;\n            padding: 0px;\n        }\n        div.footer {\n            background: #ddd; \n            position:fixed; \n            bottom:0px; left:0px; right:0px;\n            padding: 7px;\n            border-top: 1px solid #aaa;\n            font-size: 80%;\n        }\n        h3 {\n            margin-top: 0px;\n            padding-bottom: 10px;\n            border-bottom: solid #aaa 1px;\n        }\n        input[type='text'] {\n            border: solid 1px rgba(0,0,0,.2);\n            border-top: solid 1px rgba(0,0,0,.3);\n            box-shadow: 0 1px 0 white, inset 0 1px 1px rgba(0,0,0,.1);\n            border-radius: 2px;\n            padding: 5px;\n        }\n        #spinner {\n            display: none;\n            margin: -2px 0;\n        }\n\n    </style>\n{% endblock %}\n\n\n{% block script %}\n    {{ block.super }}\n    {% include \"webgateway/base/includes/script_src_jquery.html\" %}\n    {% include \"webgateway/base/includes/script_src_popup.html\" %}\n    {% include \"webgateway/base/includes/jquery-ui.html\" %}\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.form-4.3.0.js\" %}\"></script>\n    <link rel=\"stylesheet\" href=\"{% static \"webclient/css/layout.css\"|add:url_suffix %}\" type=\"text/css\" />\n    <link rel=\"stylesheet\" href=\"{% static \"webclient/css/dusty.css\"|add:url_suffix %}\" type=\"text/css\" media=\"screen\"/>\n    <script type=\"text/javascript\">\n\n        $(document).ready(function() {\n\n            // disable submit until file chosen;\n            $('#submit').attr('disabled', 'disabled')\n\n            $('#script_form').ajaxForm({\n                beforeSubmit: function() {\n                    $(\"#submit\").prop(\"value\", \"Uploading...\");\n                    $(\"form label\").css(\"opacity\", 0.5);\n                    $(\"#spinner\").show();\n                    setTimeout(function(){\n                        // Don't disable before submit or data not included\n                        $(\"form input\").prop(\"disabled\", true);\n                        $(\"form select\").prop(\"disabled\", true);\n                    }, 100);\n                },\n                success: function(data) {\n                    // Force reload of scripts on webclient page\n                    window.opener.$(\"#scriptList\").empty();\n                    $(\"#spinner\").hide();\n                    $(\"#submit\").prop(\"value\", \"Done\");\n                    // Close this window on 'OK'\n                    OME.confirm_dialog(\n                        data.Message.replace('\\n', '<br/>'), function(){\n                            self.close();\n                        }, \"Upload Script\",\n                        [\"OK\"], null, 200);\n                }\n            });\n            // Show any error\n            $(document).ajaxError(function(e, req, settings, exception) {\n                $(\"#spinner\").hide();\n                alert(req.responseText);\n            });\n\n            // All existing scripts - to check if we're going to overwrite\n            // populated below...\n            var script_paths = [];\n            var chosen_file = undefined;\n\n            var checkForReplace = function() {\n                if (!chosen_file) {\n                    $('#targetInfo').hide();\n                    $('#submit').attr('disabled', 'disabled');\n                    return;\n                }\n                $('#targetInfo').show();\n                if (!chosen_file.endsWith(\".py\")) {\n                    $(\"#targetMessage\").html(\"File: \" + chosen_file + \" not valid.<br/>File must be Python script (.py)\");\n                    return;\n                }\n\n                $('#submit').prop('disabled', false);\n\n                var folder = $(\"#scriptFolder\").val();\n                if (!folder.endsWith('/')){\n                    folder = folder + '/';\n                };\n                var script_path = folder + chosen_file;\n                $(\"#targetPath\").text(script_path);\n\n                if (script_paths.indexOf(script_path) > -1) {\n                    $(\"#targetMessage\").html(\"Replace script at:\");\n                    $('#submit').attr('value', 'Replace script');\n                } else {\n                    $(\"#targetMessage\").html(\"Upload script to:\");\n                    $('#submit').attr('value', 'Upload script')\n                }\n            }\n\n            $(\"#script_folders\").on('change', function(event){\n                $(\"#scriptFolder\").val(event.target.value);\n                $(this).val('');\n                checkForReplace();\n            });\n\n            $(\"#scriptFolder\").on('keyup', function(event){\n                checkForReplace();\n            });\n\n            $(\"#script_file\").on('change', function(event){\n                var files = document.getElementById('script_file').files;\n                if (files.length > 0){\n                    chosen_file = files[0].name;\n                } else {\n                    chosen_file = undefined;\n                }\n                checkForReplace();\n            })\n\n            // Load existing scripts...\n            $.getJSON(\"{% url 'list_scripts' %}?full_path=true\", function(data){\n                var script_folders = [];\n                \n                var get_folders = function(baseDir, script_data) {\n                    var html = \"\";\n                    for (var i=0; i<script_data.length; i++) {\n                        var li = script_data[i],   // dict of 'name' and 'ul' for menu items OR 'id' for scripts\n                            name = li.name;\n                        if (li.id) {\n                            // we have found a script - add directory to list\n                            if (script_folders.indexOf(baseDir) == -1) {\n                                script_folders.push(baseDir);\n                            }\n                            script_paths.push(baseDir + '/' + li.name);\n                        } else {\n                            get_folders(baseDir + '/' + li.name, li.ul);\n                        }\n                    }\n                    return html;\n                };\n\n                get_folders('', data);\n\n                var select_html = script_folders.map(function(f){\n                    return \"<option value='\" + f + \"'>\" + f + \"</option>\";\n                }).join(\"\");\n                select_html = \"<option value=''>Choose Folder</option>\" + select_html;\n                $(\"#script_folders\").html(select_html);\n            })\n        });\n    </script>\n{% endblock %}\n\n\n{% block body %}\n    <form id='script_form' method=\"post\" action=\"{% url 'script_upload' %}\">{% csrf_token %}\n        <div style=\"padding:10px; margin-bottom:40px\">\n            <h3 id=\"scriptName\">Upload Script</h3>\n\n            <p>\n                <label>Choose script to upload:</label>\n                <input id=\"script_file\" name=\"script_file\" type=\"file\" />\n            </p>\n\n            <p>\n                <label>Upload into folder:</label><br>\n                <input type=\"text\" placeholder=\"/top_menu/sub_menu\" name=\"script_path\" id=\"scriptFolder\" style=\"width:350px\"/>\n                <select id=\"script_folders\" style=\"width:150px\">\n                </select>\n            </p>\n\n            <p id=\"targetInfo\" style=\"display:none\">\n                <span id=\"targetMessage\"></span>\n                <pre><code id=\"targetPath\"></code></pre>\n            </p>\n        </div>\n        <div class=\"footer\">\n            <div style=\"float:right\">\n                <a href=\"#\" tabIndex=\"3\" onClick=\"self.close()\">Close</a>\n                <input id=\"submit\" tabIndex=\"2\" type=\"submit\" value=\"Upload Script\" />\n                <img id=\"spinner\" src =\"{% static \"webgateway/img/spinner.gif\" %}\"/>\n            </div>\n        </div>\n    </form>\n{% endblock %}\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Copyright (C) 2008-2020 University of Dundee & Open Microscopy Environment.\n# All rights reserved.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\" A view functions is simply a Python function that takes a Web request and\nreturns a Web response. This response can be the HTML contents of a Web page,\nor a redirect, or the 404 and 500 error, or an XML document, or an image...\nor anything.\"\"\"\n\nimport copy\nimport os\nimport datetime\nimport Ice\nfrom Ice import Exception as IceException\nimport logging\nimport traceback\nimport json\nimport re\nimport sys\nimport warnings\nfrom past.builtins import unicode\nfrom future.utils import bytes_to_native_str\nfrom django.utils.http import is_safe_url\n\nfrom time import time\n\nfrom omeroweb.version import omeroweb_buildyear as build_year\nfrom omeroweb.version import omeroweb_version as omero_version\n\nimport omero\nimport omero.scripts\nfrom omero.rtypes import wrap, unwrap, rlong, rlist\n\nfrom omero.gateway.utils import toBoolean\n\nfrom django.conf import settings\nfrom django.template import loader as template_loader\nfrom django.http import (\n    Http404,\n    HttpResponse,\n    HttpResponseRedirect,\n    JsonResponse,\n    HttpResponseForbidden,\n)\nfrom django.http import HttpResponseServerError, HttpResponseBadRequest\nfrom django.utils.http import urlencode\nfrom django.core.urlresolvers import reverse, NoReverseMatch\nfrom django.utils.encoding import smart_str\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.http import require_POST\nfrom django.shortcuts import render\n\n\nfrom omeroweb.webclient.webclient_utils import _formatReport, _purgeCallback\nfrom .forms import GlobalSearchForm, ContainerForm\nfrom .forms import ShareForm\nfrom .forms import ContainerNameForm, ContainerDescriptionForm\nfrom .forms import CommentAnnotationForm, TagsAnnotationForm\nfrom .forms import MetadataFilterForm, MetadataDetectorForm\nfrom .forms import MetadataChannelForm, MetadataEnvironmentForm\nfrom .forms import MetadataObjectiveForm, MetadataObjectiveSettingsForm\nfrom .forms import MetadataStageLabelForm, MetadataLightSourceForm\nfrom .forms import MetadataDichroicForm, MetadataMicroscopeForm\nfrom .forms import FilesAnnotationForm, WellIndexForm, NewTagsAnnotationFormSet\n\nfrom .controller.container import BaseContainer\nfrom .controller.history import BaseCalendar\nfrom .controller.search import BaseSearch\nfrom .controller.share import BaseShare\n\nfrom omeroweb.webadmin.forms import LoginForm\n\nfrom omeroweb.webgateway import views as webgateway_views\nfrom omeroweb.webgateway.marshal import graphResponseMarshal\nfrom omeroweb.webgateway.util import get_longs as webgateway_get_longs\n\nfrom omeroweb.feedback.views import handlerInternalError\n\nfrom omeroweb.webclient.decorators import login_required\nfrom omeroweb.webclient.decorators import render_response\nfrom omeroweb.webclient.show import (\n    Show,\n    IncorrectMenuError,\n    paths_to_object,\n    paths_to_tag,\n)\nfrom omeroweb.decorators import (\n    ConnCleaningHttpResponse,\n    parse_url,\n    TableClosingHttpResponse,\n)\nfrom omeroweb.webgateway.util import getIntOrDefault\n\nfrom omero.model import (\n    AnnotationAnnotationLinkI,\n    DatasetI,\n    DatasetImageLinkI,\n    ExperimenterI,\n    ImageI,\n    OriginalFileI,\n    PlateI,\n    ProjectI,\n    ProjectDatasetLinkI,\n    ScreenI,\n    ScreenPlateLinkI,\n    TagAnnotationI,\n)\nfrom omero import ApiUsageException, ServerError, CmdError\nfrom omeroweb.webgateway.views import LoginView\n\nfrom . import tree\n\ntry:\n    import long\nexcept ImportError:\n    long = int\n\nlogger = logging.getLogger(__name__)\n\nlogger.info(\"INIT '%s'\" % os.getpid())\n\n# We want to allow a higher default limit for annotations so we can load\n# all the annotations expected for a PAGE of images\nANNOTATIONS_LIMIT = settings.PAGE * 100\n\n\ndef get_long_or_default(request, name, default):\n    \"\"\"\n    Retrieves a parameter from the request. If the parameter is not present\n    the default is returned\n\n    This does not catch exceptions as it makes sense to throw exceptions if\n    the arguments provided do not pass basic type validation\n    \"\"\"\n    val = None\n    val_raw = request.GET.get(name, default)\n    if val_raw is not None:\n        val = long(val_raw)\n    return val\n\n\ndef get_list(request, name):\n    val = request.GET.getlist(name)\n    return [i for i in val if i != \"\"]\n\n\ndef get_longs(request, name):\n    warnings.warn(\n        \"Deprecated. Use omeroweb.webgateway.util.get_longs()\", DeprecationWarning\n    )\n    return webgateway_get_longs(request, name)\n\n\ndef get_bool_or_default(request, name, default):\n    \"\"\"\n    Retrieves a parameter from the request. If the parameter is not present\n    the default is returned\n\n    This does not catch exceptions as it makes sense to throw exceptions if\n    the arguments provided do not pass basic type validation\n    \"\"\"\n    return toBoolean(request.GET.get(name, default))\n\n\ndef validate_redirect_url(url):\n    \"\"\"\n    Returns a URL is safe to redirect to.\n    If url is a different host, not in settings.REDIRECT_ALLOWED_HOSTS\n    we return webclient index URL.\n    \"\"\"\n    if not is_safe_url(url, allowed_hosts=settings.REDIRECT_ALLOWED_HOSTS):\n        url = reverse(\"webindex\")\n    return url\n\n\n##############################################################################\n# custom index page\n\n\n@never_cache\n@render_response()\ndef custom_index(request, conn=None, **kwargs):\n    context = {\"version\": omero_version, \"build_year\": build_year}\n\n    if settings.INDEX_TEMPLATE is not None:\n        try:\n            template_loader.get_template(settings.INDEX_TEMPLATE)\n            context[\"template\"] = settings.INDEX_TEMPLATE\n        except Exception:\n            context[\"template\"] = \"webclient/index.html\"\n            context[\"error\"] = traceback.format_exception(*sys.exc_info())[-1]\n    else:\n        context[\"template\"] = \"webclient/index.html\"\n\n    return context\n\n\n##############################################################################\n# views\n\n\nclass WebclientLoginView(LoginView):\n    \"\"\"\n    Webclient Login - Customises the superclass LoginView\n    for webclient. Also can be used by other Apps to log in to OMERO. Uses\n    the 'server' id from request to lookup the server-id (index), host and\n    port from settings. E.g. \"localhost\", 4064. Stores these details, along\n    with username, password etc in the request.session. Resets other data\n    parameters in the request.session. Tries to get connection to OMERO and\n    if this works, then we are redirected to the 'index' page or url\n    specified in REQUEST. If we can't connect, the login page is returned\n    with appropriate error messages.\n    \"\"\"\n\n    template = \"webclient/login.html\"\n    useragent = \"OMERO.web\"\n\n    def get(self, request):\n        \"\"\"\n        GET simply returns the login page\n        \"\"\"\n        return self.handle_not_logged_in(request)\n\n    def handle_logged_in(self, request, conn, connector):\n        \"\"\"\n        We override this to provide webclient-specific functionality\n        such as cleaning up any previous sessions (if user didn't logout)\n        and redirect to specified url or webclient index page.\n        \"\"\"\n\n        # webclient has various state that needs cleaning up...\n        # if 'active_group' remains in session from previous\n        # login, check it's valid for this user\n        # NB: we do this for public users in @login_required.get_connection()\n        if request.session.get(\"active_group\"):\n            if (\n                request.session.get(\"active_group\")\n                not in conn.getEventContext().memberOfGroups\n            ):\n                del request.session[\"active_group\"]\n        if request.session.get(\"user_id\"):\n            # always want to revert to logged-in user\n            del request.session[\"user_id\"]\n        if request.session.get(\"server_settings\"):\n            # always clean when logging in\n            del request.session[\"server_settings\"]\n        # do we ned to display server version ?\n        # server_version = conn.getServerVersion()\n        if request.POST.get(\"noredirect\"):\n            return HttpResponse(\"OK\")\n        url = request.GET.get(\"url\")\n        if url is None or len(url) == 0:\n            try:\n                url = parse_url(settings.LOGIN_REDIRECT)\n            except Exception:\n                url = reverse(\"webindex\")\n        else:\n            url = validate_redirect_url(url)\n        return HttpResponseRedirect(url)\n\n    def handle_not_logged_in(self, request, error=None, form=None):\n        \"\"\"\n        Returns a response for failed login.\n        Reason for failure may be due to server 'error' or because\n        of form validation errors.\n\n        @param request:     http request\n        @param error:       Error message\n        @param form:        Instance of Login Form, populated with data\n        \"\"\"\n        if form is None:\n            server_id = request.GET.get(\"server\", request.POST.get(\"server\"))\n            if server_id is not None:\n                initial = {\"server\": unicode(server_id)}\n                form = LoginForm(initial=initial)\n            else:\n                form = LoginForm()\n        context = {\n            \"version\": omero_version,\n            \"build_year\": build_year,\n            \"error\": error,\n            \"form\": form,\n        }\n        url = request.GET.get(\"url\")\n        if url is not None and len(url) != 0:\n            context[\"url\"] = urlencode({\"url\": url})\n\n        if hasattr(settings, \"LOGIN_LOGO\"):\n            context[\"LOGIN_LOGO\"] = settings.LOGIN_LOGO\n\n        if settings.PUBLIC_ENABLED:\n            redirect = reverse(\"webindex\")\n            if settings.PUBLIC_URL_FILTER.search(redirect):\n                context[\"public_enabled\"] = True\n                context[\"public_login_redirect\"] = redirect\n\n        context[\"show_download_links\"] = settings.SHOW_CLIENT_DOWNLOADS\n        if settings.SHOW_CLIENT_DOWNLOADS:\n            ver = re.match(\n                (\n                    r\"(?P<major>\\d+)\\.\"\n                    r\"(?P<minor>\\d+)\\.\"\n                    r\"(?P<patch>\\d+\\.?)?\"\n                    r\"(?P<dev>(dev|a|b|rc)\\d+)?.*\"\n                ),\n                omero_version,\n            )\n            client_download_tag_re = \"^v%s\\\\.%s\\\\.[^-]+$\" % (\n                ver.group(\"major\"),\n                ver.group(\"minor\"),\n            )\n            context[\"client_download_tag_re\"] = client_download_tag_re\n            context[\"client_download_repo\"] = settings.CLIENT_DOWNLOAD_GITHUB_REPO\n\n        return render(request, self.template, context)\n\n\n@login_required(ignore_login_fail=True)\ndef keepalive_ping(request, conn=None, **kwargs):\n    \"\"\"Keeps the OMERO session alive by pinging the server\"\"\"\n\n    # login_required handles ping, timeout etc, so we don't need to do\n    # anything else\n    return HttpResponse(\"OK\")\n\n\n@login_required()\ndef change_active_group(request, conn=None, url=None, **kwargs):\n    \"\"\"\n    Simply changes the request.session['active_group'] which is then used by\n    the @login_required decorator to configure conn for any group-based\n    queries.\n    Finally this redirects to the 'url'.\n    \"\"\"\n    switch_active_group(request)\n    # avoid recursive calls\n    if url is None or url.startswith(reverse(\"change_active_group\")):\n        url = reverse(\"webindex\")\n    url = validate_redirect_url(url)\n    return HttpResponseRedirect(url)\n\n\ndef switch_active_group(request, active_group=None):\n    \"\"\"\n    Simply changes the request.session['active_group'] which is then used by\n    the @login_required decorator to configure conn for any group-based\n    queries.\n    \"\"\"\n    if active_group is None:\n        active_group = get_long_or_default(request, \"active_group\", None)\n    if active_group is None:\n        return\n    active_group = int(active_group)\n    if (\n        \"active_group\" not in request.session\n        or active_group != request.session[\"active_group\"]\n    ):\n        request.session.modified = True\n        request.session[\"active_group\"] = active_group\n\n\ndef fake_experimenter(request, default_name=\"All members\"):\n    \"\"\"\n    Marshal faked experimenter when id is -1\n    Load omero.client.ui.menu.dropdown.everyone.label as username\n    \"\"\"\n    label = (\n        request.session.get(\"server_settings\")\n        .get(\"ui\", {})\n        .get(\"menu\", {})\n        .get(\"dropdown\", {})\n        .get(\"everyone\", {})\n        .get(\"label\", default_name)\n    )\n    return {\n        \"id\": -1,\n        \"omeName\": label,\n        \"firstName\": label,\n        \"lastName\": \"\",\n    }\n\n\n@login_required(login_redirect=\"webindex\")\ndef logout(request, conn=None, **kwargs):\n    \"\"\"\n    Logout of the session and redirects to the homepage (will redirect to\n    login first)\n    \"\"\"\n\n    if request.method == \"POST\":\n        try:\n            try:\n                conn.close()\n            except Exception:\n                logger.error(\"Exception during logout.\", exc_info=True)\n        finally:\n            request.session.flush()\n        return HttpResponseRedirect(reverse(settings.LOGIN_VIEW))\n    else:\n        context = {\"url\": reverse(\"weblogout\"), \"submit\": \"Do you want to log out?\"}\n        template = \"webgateway/base/includes/post_form.html\"\n        return render(request, template, context)\n\n\n###########################################################################\ndef _load_template(request, menu, conn=None, url=None, **kwargs):\n\n    \"\"\"\n    This view handles most of the top-level pages, as specified by 'menu' E.g.\n    userdata, usertags, history, search etc.\n    Query string 'path' that specifies an object to display in the data tree\n    is parsed.\n    We also prepare the list of users in the current group, for the\n    switch-user form. Change-group form is also prepared.\n    \"\"\"\n    request.session.modified = True\n\n    template = kwargs.get(\"template\", None)\n    if template is None:\n        if menu == \"userdata\":\n            template = \"webclient/data/containers.html\"\n        elif menu == \"usertags\":\n            template = \"webclient/data/containers.html\"\n        else:\n            # E.g. search/search.html\n            template = \"webclient/%s/%s.html\" % (menu, menu)\n\n    # tree support\n    show = kwargs.get(\"show\", Show(conn, request, menu))\n    # Constructor does no loading.  Show.first_selected must be called first\n    # in order to set up our initial state correctly.\n    try:\n        first_sel = show.first_selected\n    except IncorrectMenuError as e:\n        return HttpResponseRedirect(e.uri)\n    # We get the owner of the top level object, E.g. Project\n    # Actual api_paths_to_object() is retrieved by jsTree once loaded\n    initially_open_owner = show.initially_open_owner\n\n    # If we failed to find 'show'...\n    if request.GET.get(\"show\", None) is not None and first_sel is None:\n        # and we're logged in as PUBLIC user...\n        if (\n            settings.PUBLIC_ENABLED\n            and settings.PUBLIC_USER == conn.getUser().getOmeName()\n        ):\n            # this is likely a regular user who needs to log in as themselves.\n            # Login then redirect to current url\n            return HttpResponseRedirect(\"%s?url=%s\" % (reverse(\"weblogin\"), url))\n\n    # need to be sure that tree will be correct omero.group\n    if first_sel is not None:\n        group_id = first_sel.details.group.id.val\n        if conn.isValidGroup(group_id):\n            switch_active_group(request, group_id)\n        else:\n            first_sel = None\n\n    # search support\n    init = {}\n    global_search_form = GlobalSearchForm(data=request.GET.copy())\n    if menu == \"search\":\n        if global_search_form.is_valid():\n            init[\"query\"] = global_search_form.cleaned_data[\"search_query\"]\n\n    # get url without request string - used to refresh page after switch\n    # user/group etc\n    url = kwargs.get(\"load_template_url\", None)\n    if url is None:\n        url = reverse(viewname=\"load_template\", args=[menu])\n\n    # validate experimenter is in the active group\n    active_group = request.session.get(\"active_group\") or conn.getEventContext().groupId\n    # prepare members of group...\n    leaders, members = conn.getObject(\"ExperimenterGroup\", active_group).groupSummary()\n    userIds = [u.id for u in leaders]\n    userIds.extend([u.id for u in members])\n\n    # check any change in experimenter...\n    user_id = request.GET.get(\"experimenter\")\n    if initially_open_owner is not None:\n        if request.session.get(\"user_id\", None) != -1:\n            # if we're not already showing 'All Members'...\n            user_id = initially_open_owner\n    try:\n        user_id = long(user_id)\n    except Exception:\n        user_id = None\n    # check if user_id is in a currnt group\n    if user_id is not None:\n        if (\n            user_id\n            not in (\n                set(map(lambda x: x.id, leaders)) | set(map(lambda x: x.id, members))\n            )\n            and user_id != -1\n        ):\n            # All users in group is allowed\n            user_id = None\n    if user_id is None:\n        # ... or check that current user is valid in active group\n        user_id = request.session.get(\"user_id\", None)\n        if user_id is None or int(user_id) not in userIds:\n            if user_id != -1:  # All users in group is allowed\n                user_id = conn.getEventContext().userId\n\n    request.session[\"user_id\"] = user_id\n\n    myGroups = list(conn.getGroupsMemberOf())\n    myGroups.sort(key=lambda x: x.getName().lower())\n    groups = myGroups\n\n    new_container_form = ContainerForm()\n\n    # colleagues required for search.html page only.\n    myColleagues = {}\n    if menu == \"search\":\n        for g in groups:\n            g.loadLeadersAndMembers()\n            for c in g.leaders + g.colleagues:\n                myColleagues[c.id] = c\n        myColleagues = list(myColleagues.values())\n        myColleagues.sort(key=lambda x: x.getLastName().lower())\n\n    context = {\n        \"menu\": menu,\n        \"init\": init,\n        \"myGroups\": myGroups,\n        \"new_container_form\": new_container_form,\n        \"global_search_form\": global_search_form,\n    }\n    context[\"groups\"] = groups\n    context[\"myColleagues\"] = myColleagues\n    context[\"active_group\"] = conn.getObject(\"ExperimenterGroup\", long(active_group))\n    context[\"active_user\"] = conn.getObject(\"Experimenter\", long(user_id))\n    context[\"initially_select\"] = show.initially_select\n    context[\"initially_open\"] = show.initially_open\n    context[\"isLeader\"] = conn.isLeader()\n    context[\"current_url\"] = url\n    context[\"page_size\"] = settings.PAGE\n    context[\"template\"] = template\n    context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n    context[\"current_admin_privileges\"] = conn.getCurrentAdminPrivileges()\n    context[\"leader_of_groups\"] = conn.getEventContext().leaderOfGroups\n    context[\"member_of_groups\"] = conn.getEventContext().memberOfGroups\n    context[\"search_default_user\"] = settings.SEARCH_DEFAULT_USER\n    context[\"search_default_group\"] = settings.SEARCH_DEFAULT_GROUP\n\n    return context\n\n\n@login_required()\n@render_response()\ndef load_template(request, menu, conn=None, url=None, **kwargs):\n    return _load_template(request=request, menu=menu, conn=conn, url=url, **kwargs)\n\n\n@login_required()\n@render_response()\ndef group_user_content(request, url=None, conn=None, **kwargs):\n    \"\"\"\n    Loads html content of the Groups/Users drop-down menu on main webclient\n    pages.\n    Url should be supplied in request, as target for redirect after switching\n    group.\n    \"\"\"\n\n    myGroups = list(conn.getGroupsMemberOf())\n    myGroups.sort(key=lambda x: x.getName().lower())\n    if conn.isAdmin():  # Admin can see all groups\n        system_groups = [\n            conn.getAdminService().getSecurityRoles().userGroupId,\n            conn.getAdminService().getSecurityRoles().guestGroupId,\n        ]\n        groups = conn.getObjects(\"ExperimenterGroup\", opts={\"load_experimenters\": True})\n        groups = [g for g in groups if g.getId() not in system_groups]\n        groups.sort(key=lambda x: x.getName().lower())\n    else:\n        groups = myGroups\n\n    for g in groups:\n        g.loadLeadersAndMembers()  # load leaders / members\n\n    context = {\n        \"template\": \"webclient/base/includes/group_user_content.html\",\n        \"current_url\": url,\n        \"groups\": groups,\n        \"myGroups\": myGroups,\n    }\n    return context\n\n\n@login_required()\ndef api_group_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        member_id = get_long_or_default(request, \"member\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    try:\n        # Get the groups\n        groups = tree.marshal_groups(\n            conn=conn, member_id=member_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"groups\": groups})\n\n\n@login_required()\ndef api_experimenter_detail(request, experimenter_id, conn=None, **kwargs):\n    # Validate parameter\n    try:\n        experimenter_id = long(experimenter_id)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid experimenter id\")\n\n    try:\n        # Get the experimenter\n        if experimenter_id < 0:\n            experimenter = fake_experimenter(request)\n        else:\n            # Get the experimenter\n            experimenter = tree.marshal_experimenter(\n                conn=conn, experimenter_id=experimenter_id\n            )\n            if experimenter is None:\n                raise Http404(\"No Experimenter found with ID %s\" % experimenter_id)\n        return JsonResponse({\"experimenter\": experimenter})\n\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n\n@login_required()\ndef api_container_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        experimenter_id = get_long_or_default(request, \"id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # While this interface does support paging, it does so in a\n    # very odd way. The results per page is enforced per query so this\n    # will actually get the limit for projects, datasets (without\n    # parents), screens and plates (without parents). This is fine for\n    # the first page, but the second page may not be what is expected.\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    r = dict()\n    try:\n        # Get the projects\n        r[\"projects\"] = tree.marshal_projects(\n            conn=conn,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the orphaned datasets (without project parents)\n        r[\"datasets\"] = tree.marshal_datasets(\n            conn=conn,\n            orphaned=True,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the screens for the current user\n        r[\"screens\"] = tree.marshal_screens(\n            conn=conn,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the orphaned plates (without project parents)\n        r[\"plates\"] = tree.marshal_plates(\n            conn=conn,\n            orphaned=True,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n        # Get the orphaned images container\n        try:\n            orph_t = request.session[\"server_settings\"][\"ui\"][\"tree\"][\"orphans\"]\n        except Exception:\n            orph_t = {\"enabled\": True}\n        if (\n            conn.isAdmin()\n            or conn.isLeader(gid=request.session.get(\"active_group\"))\n            or experimenter_id == conn.getUserId()\n            or orph_t.get(\"enabled\", True)\n        ):\n\n            orphaned = tree.marshal_orphaned(\n                conn=conn,\n                group_id=group_id,\n                experimenter_id=experimenter_id,\n                page=page,\n                limit=limit,\n            )\n            orphaned[\"name\"] = orph_t.get(\"name\", \"Orphaned Images\")\n            r[\"orphaned\"] = orphaned\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(r)\n\n\n@login_required()\ndef api_dataset_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        project_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    try:\n        # Get the datasets\n        datasets = tree.marshal_datasets(\n            conn=conn, project_id=project_id, group_id=group_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"datasets\": datasets})\n\n\n@login_required()\ndef api_image_list(request, conn=None, **kwargs):\n    \"\"\"Get a list of images\n    Specifiying dataset_id will return only images in that dataset\n    Specifying experimenter_id will return orpahned images for that\n    user\n    The orphaned images will include images which belong to the user\n    but are not in any dataset belonging to the user\n    Currently specifying both, experimenter_id will be ignored\n\n    \"\"\"\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        dataset_id = get_long_or_default(request, \"id\", None)\n        orphaned = get_bool_or_default(request, \"orphaned\", False)\n        load_pixels = get_bool_or_default(request, \"sizeXYZ\", False)\n        thumb_version = get_bool_or_default(request, \"thumbVersion\", False)\n        date = get_bool_or_default(request, \"date\", False)\n        experimenter_id = get_long_or_default(request, \"experimenter_id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    # Share ID is in kwargs from api/share_images/<id>/ which will create\n    # a share connection in @login_required.\n    # We don't support ?share_id in query string since this would allow a\n    # share connection to be created for ALL urls, instead of just this one.\n    share_id = \"share_id\" in kwargs and long(kwargs[\"share_id\"]) or None\n\n    try:\n        # Get the images\n        images = tree.marshal_images(\n            conn=conn,\n            orphaned=orphaned,\n            experimenter_id=experimenter_id,\n            dataset_id=dataset_id,\n            share_id=share_id,\n            load_pixels=load_pixels,\n            group_id=group_id,\n            page=page,\n            date=date,\n            thumb_version=thumb_version,\n            limit=limit,\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"images\": images})\n\n\n@login_required()\ndef api_plate_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        screen_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    try:\n        # Get the plates\n        plates = tree.marshal_plates(\n            conn=conn, screen_id=screen_id, group_id=group_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"plates\": plates})\n\n\n@login_required()\ndef api_plate_acquisition_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        plate_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # Orphaned PlateAcquisitions are not possible so querying without a\n    # plate is an error\n    if plate_id is None:\n        return HttpResponseBadRequest(\"id (plate) must be specified\")\n\n    try:\n        # Get the plate acquisitions\n        plate_acquisitions = tree.marshal_plate_acquisitions(\n            conn=conn, plate_id=plate_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"acquisitions\": plate_acquisitions})\n\n\ndef get_object_links(conn, parent_type, parent_id, child_type, child_ids):\n    \"\"\"This is just used internally by api_link DELETE below\"\"\"\n    if parent_type == \"orphaned\":\n        return None\n    link_type = None\n    if parent_type == \"experimenter\":\n        if child_type in [\"dataset\", \"plate\", \"tag\"]:\n            # This will be a requested link if a dataset or plate is\n            # moved from the de facto orphaned datasets/plates, it isn't\n            # an error, but no link actually needs removing\n            return None\n    elif parent_type == \"project\":\n        if child_type == \"dataset\":\n            link_type = \"ProjectDatasetLink\"\n    elif parent_type == \"dataset\":\n        if child_type == \"image\":\n            link_type = \"DatasetImageLink\"\n    elif parent_type == \"screen\":\n        if child_type == \"plate\":\n            link_type = \"ScreenPlateLink\"\n    elif parent_type == \"tagset\":\n        if child_type == \"tag\":\n            link_type = \"AnnotationAnnotationLink\"\n    if not link_type:\n        raise Http404(\"json data needs 'parent_type' and 'child_type'\")\n\n    params = omero.sys.ParametersI()\n    params.addIds(child_ids)\n\n    qs = conn.getQueryService()\n    # Need to fetch child and parent, otherwise\n    # AnnotationAnnotationLink is not loaded\n    q = (\n        \"\"\"\n        from %s olink join fetch olink.child join fetch olink.parent\n        where olink.child.id in (:ids)\n        \"\"\"\n        % link_type\n    )\n    if parent_id:\n        params.add(\"pid\", rlong(parent_id))\n        q += \" and olink.parent.id = :pid\"\n\n    res = qs.findAllByQuery(q, params, conn.SERVICE_OPTS)\n\n    if parent_id is not None and len(res) == 0:\n        raise Http404(\n            \"No link found for %s-%s to %s-%s\"\n            % (parent_type, parent_id, child_type, child_ids)\n        )\n    return link_type, res\n\n\ndef create_link(parent_type, parent_id, child_type, child_id):\n    \"\"\"This is just used internally by api_link DELETE below\"\"\"\n    if parent_type == \"experimenter\":\n        if child_type == \"dataset\" or child_type == \"plate\":\n            # This is actually not a link that needs creating, this\n            # dataset/plate is an orphan\n            return \"orphan\"\n    if parent_type == \"project\":\n        project = ProjectI(long(parent_id), False)\n        if child_type == \"dataset\":\n            dataset = DatasetI(long(child_id), False)\n            link = ProjectDatasetLinkI()\n            link.setParent(project)\n            link.setChild(dataset)\n            return link\n    elif parent_type == \"dataset\":\n        dataset = DatasetI(long(parent_id), False)\n        if child_type == \"image\":\n            image = ImageI(long(child_id), False)\n            link = DatasetImageLinkI()\n            link.setParent(dataset)\n            link.setChild(image)\n            return link\n    elif parent_type == \"screen\":\n        screen = ScreenI(long(parent_id), False)\n        if child_type == \"plate\":\n            plate = PlateI(long(child_id), False)\n            link = ScreenPlateLinkI()\n            link.setParent(screen)\n            link.setChild(plate)\n            return link\n    elif parent_type == \"tagset\":\n        if child_type == \"tag\":\n            link = AnnotationAnnotationLinkI()\n            link.setParent(TagAnnotationI(long(parent_id), False))\n            link.setChild(TagAnnotationI(long(child_id), False))\n            return link\n    return None\n\n\ndef get_objects_owners(conn, child_type, child_ids):\n    \"\"\"\n    Returns a dict of child_id: owner_id\n    \"\"\"\n    if child_type == \"tag\":\n        child_type = \"Annotation\"\n    owners = {}\n    for obj in conn.getObjects(child_type, child_ids):\n        owners[obj.id] = obj.details.owner.id.val\n    return owners\n\n\n@login_required()\ndef api_links(request, conn=None, **kwargs):\n    \"\"\"\n    Entry point for the api_links methods.\n    We delegate depending on request method to\n    create or delete links between objects.\n    \"\"\"\n    if request.method not in [\"POST\", \"DELETE\"]:\n        return JsonResponse(\n            {\"Error\": \"Need to POST or DELETE JSON data to update links\"}, status=405\n        )\n    # Handle link creation/deletion\n    try:\n        json_data = json.loads(request.body)\n    except TypeError:\n        # for Python 3.5\n        json_data = json.loads(bytes_to_native_str(request.body))\n\n    if request.method == \"POST\":\n        return _api_links_POST(conn, json_data)\n    elif request.method == \"DELETE\":\n        return _api_links_DELETE(conn, json_data)\n\n\ndef _api_links_POST(conn, json_data, **kwargs):\n    \"\"\"Creates links between objects specified by a json\n    blob in the request body.\n    e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    When creating a link, fails silently if ValidationException\n    (E.g. adding an image to a Dataset that already has that image).\n    \"\"\"\n\n    response = {\"success\": False}\n\n    # json is [parent_type][parent_id][child_type][childIds]\n    # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n\n    linksToSave = []\n    write_owned = \"WriteOwned\" in conn.getCurrentAdminPrivileges()\n    user_id = conn.getUserId()\n    for parent_type, parents in json_data.items():\n        if parent_type in (\"orphaned\", \"experimenter\"):\n            continue\n        for parent_id, children in parents.items():\n            for child_type, child_ids in children.items():\n                # batch look-up owners of all child objects\n                child_owners = get_objects_owners(conn, child_type, child_ids)\n                for child_id in child_ids:\n                    parent_id = int(parent_id)\n                    link = create_link(parent_type, parent_id, child_type, child_id)\n                    if link and link != \"orphan\":\n                        # link owner should match child owner\n                        if write_owned and child_owners[child_id] != user_id:\n                            link.details.owner = ExperimenterI(\n                                child_owners[child_id], False\n                            )\n                        linksToSave.append(link)\n\n    if len(linksToSave) > 0:\n        # Need to set context to correct group (E.g parent group)\n        ptype = parent_type.title()\n        if ptype in [\"Tagset\", \"Tag\"]:\n            ptype = \"TagAnnotation\"\n        try:\n            p = conn.getQueryService().get(ptype, parent_id, conn.SERVICE_OPTS)\n            conn.SERVICE_OPTS.setOmeroGroup(p.details.group.id.val)\n        except omero.ValidationException:\n            return JsonResponse(\n                {\"error\": \"Object of type %s and ID %s not found\" % (ptype, parent_id)},\n                status=404,\n            )\n        logger.info(\"api_link: Saving %s links\" % len(linksToSave))\n\n        try:\n            # We try to save all at once, for speed.\n            conn.saveArray(linksToSave)\n            response[\"success\"] = True\n        except Exception:\n            logger.info(\n                \"api_link: Exception on saveArray with %s links\" % len(linksToSave)\n            )\n            # If this fails, e.g. ValidationException because link\n            # already exists, try to save individual links\n            for link in linksToSave:\n                try:\n                    conn.saveObject(link)\n                except Exception:\n                    pass\n            response[\"success\"] = True\n\n    return JsonResponse(response)\n\n\ndef _api_links_DELETE(conn, json_data):\n    \"\"\"Deletes links between objects specified by a json\n    blob in the request body.\n    e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    \"\"\"\n\n    response = {\"success\": False}\n\n    # json is [parent_type][parent_id][child_type][childIds]\n    # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    for parent_type, parents in json_data.items():\n        if parent_type == \"orphaned\":\n            continue\n        for parent_id, children in parents.items():\n            for child_type, child_ids in children.items():\n                objLnks = get_object_links(\n                    conn, parent_type, parent_id, child_type, child_ids\n                )\n                if objLnks is None:\n                    continue\n                linkType, links = objLnks\n                linkIds = [r.id.val for r in links]\n                logger.info(\"api_link: Deleting %s links\" % len(linkIds))\n                conn.deleteObjects(linkType, linkIds, wait=True)\n                # webclient needs to know what is orphaned\n                linkType, remainingLinks = get_object_links(\n                    conn, parent_type, None, child_type, child_ids\n                )\n                # return remaining links in same format as json above\n                # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n                for rl in remainingLinks:\n                    pid = rl.parent.id.val\n                    cid = rl.child.id.val\n                    # Deleting links still in progress above - ignore these\n                    if pid == int(parent_id):\n                        continue\n                    if parent_type not in response:\n                        response[parent_type] = {}\n                    if pid not in response[parent_type]:\n                        response[parent_type][pid] = {child_type: []}\n                    response[parent_type][pid][child_type].append(cid)\n\n    # If we got here, DELETE was OK\n    response[\"success\"] = True\n\n    return JsonResponse(response)\n\n\n@login_required()\ndef api_parent_links(request, conn=None, **kwargs):\n    \"\"\"\n    Get a list of links as\n    {'data': [{id: 12, child:{type:'image', id:1},\n               parent:{type:'dataset', id:2}] }\n\n    Supports ?image=1,2 and ?image=1&image=2\n    \"\"\"\n    parent_types = {\"image\": \"dataset\", \"dataset\": \"project\", \"plate\": \"screen\"}\n    parents = []\n    for child_type, parent_type in parent_types.items():\n        ids = request.GET.getlist(child_type)\n        if len(ids) == 0:\n            continue\n        # support for ?image=1,2\n        child_ids = []\n        for id in ids:\n            for i in id.split(\",\"):\n                child_ids.append(i)\n\n        link_type, result = get_object_links(\n            conn, parent_type, None, child_type, child_ids\n        )\n        for link in result:\n            parents.append(\n                {\n                    \"id\": link.id.val,\n                    \"parent\": {\"type\": parent_type, \"id\": link.parent.id.val},\n                    \"child\": {\"type\": child_type, \"id\": link.child.id.val},\n                }\n            )\n\n    return JsonResponse({\"data\": parents})\n\n\n@login_required()\ndef api_paths_to_object(request, conn=None, **kwargs):\n    \"\"\"\n    This finds the paths to objects in the hierarchy. It returns only\n    the path, not the object hierarchy itself.\n\n    An example usage is for the 'show' functionality\n    Example to go to the image with id 1 somewhere in the tree.\n    http://localhost:8000/webclient/?show=image-1\n\n    This method can tell the webclient exactly what needs to be\n    dynamically loaded to display this in the jstree.\n    \"\"\"\n\n    try:\n        experimenter_id = get_long_or_default(request, \"experimenter\", None)\n        project_id = get_long_or_default(request, \"project\", None)\n        dataset_id = get_long_or_default(request, \"dataset\", None)\n        image_id = get_long_or_default(request, \"image\", None)\n        screen_id = get_long_or_default(request, \"screen\", None)\n        plate_id = get_long_or_default(request, \"plate\", None)\n        acquisition_id = get_long_or_default(request, \"run\", None)\n        # acquisition will override 'run' if both are specified as they are\n        # the same thing\n        acquisition_id = get_long_or_default(request, \"acquisition\", acquisition_id)\n        well_id = request.GET.get(\"well\", None)\n        tag_id = get_long_or_default(request, \"tag\", None)\n        tagset_id = get_long_or_default(request, \"tagset\", None)\n        roi_id = get_long_or_default(request, \"roi\", None)\n        shape_id = get_long_or_default(request, \"shape\", None)\n        group_id = get_long_or_default(request, \"group\", None)\n        page_size = get_long_or_default(request, \"page_size\", settings.PAGE)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if tag_id is not None or tagset_id is not None:\n        paths = paths_to_tag(conn, experimenter_id, tagset_id, tag_id)\n\n    else:\n        paths = paths_to_object(\n            conn,\n            experimenter_id,\n            project_id,\n            dataset_id,\n            image_id,\n            screen_id,\n            plate_id,\n            acquisition_id,\n            well_id,\n            group_id,\n            page_size,\n            roi_id,\n            shape_id,\n        )\n    return JsonResponse({\"paths\": paths})\n\n\n@login_required()\ndef api_tags_and_tagged_list(request, conn=None, **kwargs):\n    if request.method == \"GET\":\n        return api_tags_and_tagged_list_GET(request, conn, **kwargs)\n    elif request.method == \"DELETE\":\n        return api_tags_and_tagged_list_DELETE(request, conn, **kwargs)\n\n\ndef api_tags_and_tagged_list_GET(request, conn=None, **kwargs):\n    \"\"\"Get a list of tags\n    Specifiying tag_id will return any sub-tags, sub-tagsets and\n    objects tagged with that id\n    If no tagset_id is specifed it will return tags which have no\n    parent\n    \"\"\"\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        tag_id = get_long_or_default(request, \"id\", None)\n        experimenter_id = get_long_or_default(request, \"experimenter_id\", -1)\n        orphaned = get_bool_or_default(request, \"orphaned\", False)\n        load_pixels = get_bool_or_default(request, \"sizeXYZ\", False)\n        date = get_bool_or_default(request, \"date\", False)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    try:\n        # Get ALL data (all owners) under specified tags\n        if tag_id is not None:\n            tagged = tree.marshal_tagged(\n                conn=conn,\n                experimenter_id=experimenter_id,\n                tag_id=tag_id,\n                group_id=group_id,\n                page=page,\n                load_pixels=load_pixels,\n                date=date,\n                limit=limit,\n            )\n        else:\n            tagged = {}\n\n        # Get 'tags' under tag_id\n        tagged[\"tags\"] = tree.marshal_tags(\n            conn=conn,\n            orphaned=orphaned,\n            experimenter_id=experimenter_id,\n            tag_id=tag_id,\n            group_id=group_id,\n            page=page,\n            limit=limit,\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(tagged)\n\n\ndef api_tags_and_tagged_list_DELETE(request, conn=None, **kwargs):\n    \"\"\"Delete the listed tags by ids\"\"\"\n    # Get parameters\n    try:\n        tag_ids = get_longs(request, \"id\")\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    dcs = list()\n\n    handle = None\n    try:\n        for tag_id in tag_ids:\n            dcs.append(omero.cmd.Delete(\"/Annotation\", tag_id))\n        doall = omero.cmd.DoAll()\n        doall.requests = dcs\n        handle = conn.c.sf.submit(doall, conn.SERVICE_OPTS)\n\n        try:\n            conn._waitOnCmd(handle)\n        finally:\n            handle.close()\n\n    except CmdError as e:\n        return HttpResponseBadRequest(e.message)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(\"\")\n\n\n@login_required()\ndef api_annotations(request, conn=None, **kwargs):\n\n    r = request.GET\n    image_ids = get_list(request, \"image\")\n    dataset_ids = get_list(request, \"dataset\")\n    project_ids = get_list(request, \"project\")\n    screen_ids = get_list(request, \"screen\")\n    plate_ids = get_list(request, \"plate\")\n    run_ids = get_list(request, \"acquisition\")\n    well_ids = get_list(request, \"well\")\n    page = get_long_or_default(request, \"page\", 1)\n    limit = get_long_or_default(request, \"limit\", ANNOTATIONS_LIMIT)\n\n    ann_type = r.get(\"type\", None)\n    ns = r.get(\"ns\", None)\n\n    anns, exps = tree.marshal_annotations(\n        conn,\n        project_ids=project_ids,\n        dataset_ids=dataset_ids,\n        image_ids=image_ids,\n        screen_ids=screen_ids,\n        plate_ids=plate_ids,\n        run_ids=run_ids,\n        well_ids=well_ids,\n        ann_type=ann_type,\n        ns=ns,\n        page=page,\n        limit=limit,\n    )\n\n    return JsonResponse({\"annotations\": anns, \"experimenters\": exps})\n\n\n@login_required()\ndef api_share_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        member_id = get_long_or_default(request, \"member_id\", -1)\n        owner_id = get_long_or_default(request, \"owner_id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # Like with api_container_list, this is a combination of\n    # results which will each be able to return up to the limit in page\n    # size\n\n    try:\n        # Get the shares\n        shares = tree.marshal_shares(\n            conn=conn, member_id=member_id, owner_id=owner_id, page=page, limit=limit\n        )\n        # Get the discussions\n        discussions = tree.marshal_discussions(\n            conn=conn, member_id=member_id, owner_id=owner_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"shares\": shares, \"discussions\": discussions})\n\n\n@login_required()\n@render_response()\ndef load_plate(request, o1_type=None, o1_id=None, conn=None, **kwargs):\n    \"\"\"\n    This loads data for the center panel, via AJAX calls.\n    Used for Datasets, Plates & Orphaned Images.\n    \"\"\"\n\n    # get index of the plate\n    index = getIntOrDefault(request, \"index\", 0)\n\n    # prepare data. E.g. kw = {}  or  {'plate': 301L}  or\n    # 'acquisition': 301L}\n    kw = dict()\n    if o1_type is not None:\n        if o1_id is not None and int(o1_id) > 0:\n            kw[str(o1_type)] = long(o1_id)\n\n    try:\n        manager = BaseContainer(conn, **kw)\n    except AttributeError as x:\n        return handlerInternalError(request, x)\n\n    # prepare forms\n    form_well_index = None\n\n    context = {\"manager\": manager, \"form_well_index\": form_well_index, \"index\": index}\n\n    # load data & template\n    template = None\n    if \"plate\" in kw or \"acquisition\" in kw:\n        fields = manager.getNumberOfFields()\n        if fields is not None:\n            form_well_index = WellIndexForm(initial={\"index\": index, \"range\": fields})\n            if index == 0:\n                index = fields[0]\n\n        # Show parameter will be well-1|well-2\n        show = request.GET.get(\"show\")\n        if show is not None:\n            wells_to_select = []\n            for w in show.split(\"|\"):\n                if \"well-\" in w:\n                    wells_to_select.append(w.replace(\"well-\", \"\"))\n            context[\"select_wells\"] = \",\".join(wells_to_select)\n\n        context[\"baseurl\"] = reverse(\"webgateway\").rstrip(\"/\")\n        context[\"form_well_index\"] = form_well_index\n        context[\"index\"] = index\n        context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n        template = \"webclient/data/plate.html\"\n        if o1_type == \"acquisition\":\n            context[\"acquisition\"] = o1_id\n\n    context[\"isLeader\"] = conn.isLeader()\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef load_chgrp_groups(request, conn=None, **kwargs):\n    \"\"\"\n    Get the potential groups we can move selected data to.\n    These will be groups that the owner(s) of selected objects is a member of.\n    Objects are specified by query string like: ?Image=1,2&Dataset=3\n    If no selected objects are specified, simply list the groups that the\n    current user is a member of.\n    Groups list will exclude the 'current' group context.\n    \"\"\"\n\n    ownerIds = []\n    currentGroups = set()\n    groupSets = []\n    groups = {}\n    owners = {}\n    for dtype in (\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"):\n        oids = request.GET.get(dtype, None)\n        if oids is not None:\n            for o in conn.getObjects(dtype, oids.split(\",\")):\n                ownerIds.append(o.getDetails().owner.id.val)\n                currentGroups.add(o.getDetails().group.id.val)\n    ownerIds = list(set(ownerIds))\n    # In case we were passed no objects or they weren't found\n    if len(ownerIds) == 0:\n        ownerIds = [conn.getUserId()]\n    for owner in conn.getObjects(\n        \"Experimenter\", ownerIds, opts={\"load_experimentergroups\": True}\n    ):\n        # Each owner has a set of groups\n        gids = []\n        owners[owner.id] = owner.getFullName()\n        for group in owner.copyGroupExperimenterMap():\n            groups[group.parent.id.val] = group.parent\n            gids.append(group.parent.id.val)\n        groupSets.append(set(gids))\n\n    # Can move to groups that all owners are members of...\n    targetGroupIds = set.intersection(*groupSets)\n    # ...but not 'user' group\n    userGroupId = conn.getAdminService().getSecurityRoles().userGroupId\n    if userGroupId in targetGroupIds:\n        targetGroupIds.remove(userGroupId)\n\n    # if all the Objects are in a single group, exclude it from the target\n    # groups\n    if len(currentGroups) == 1:\n        curr_grp = currentGroups.pop()\n        if curr_grp in targetGroupIds:\n            targetGroupIds.remove(curr_grp)\n\n    def getPerms(group):\n        p = group.getDetails().permissions\n        return {\n            \"write\": p.isGroupWrite(),\n            \"annotate\": p.isGroupAnnotate(),\n            \"read\": p.isGroupRead(),\n        }\n\n    # From groupIds, create a list of group dicts for json\n    targetGroups = []\n    for gid in targetGroupIds:\n        targetGroups.append(\n            {\"id\": gid, \"name\": groups[gid].name.val, \"perms\": getPerms(groups[gid])}\n        )\n    targetGroups.sort(key=lambda x: x[\"name\"])\n\n    owners = [[k, v] for k, v in owners.items()]\n\n    return {\"owners\": owners, \"groups\": targetGroups}\n\n\n@login_required()\n@render_response()\ndef load_chgrp_target(request, group_id, target_type, conn=None, **kwargs):\n    \"\"\"Loads a tree for user to pick target Project, Dataset or Screen\"\"\"\n\n    # filter by group (not switching group)\n    conn.SERVICE_OPTS.setOmeroGroup(int(group_id))\n    owner = getIntOrDefault(request, \"owner\", None)\n\n    manager = BaseContainer(conn)\n    manager.listContainerHierarchy(owner)\n    template = \"webclient/data/chgrp_target_tree.html\"\n\n    context = {\"manager\": manager, \"target_type\": target_type, \"template\": template}\n    return context\n\n\n@login_required()\n@render_response()\ndef load_searching(request, form=None, conn=None, **kwargs):\n    \"\"\"\n    Handles AJAX calls to search\n    \"\"\"\n    manager = BaseSearch(conn)\n\n    foundById = []\n    # form = 'form' if we are searching. Get query from request...\n    r = request.GET\n    if form is not None:\n        query_search = r.get(\"query\", None)\n        if query_search is None:\n            return HttpResponse(\"No search '?query' included\")\n        query_search = query_search.replace(\"+\", \" \")\n        advanced = toBoolean(r.get(\"advanced\"))\n        # If this is an advanced search use 'advanced_search' for query\n        if advanced:\n            query_search = r.get(\"advanced_search\")\n        template = \"webclient/search/search_details.html\"\n\n        onlyTypes = r.getlist(\"datatype\")\n        fields = r.getlist(\"field\")\n        searchGroup = r.get(\"searchGroup\", None)\n        ownedBy = r.get(\"ownedBy\", None)\n\n        useAcquisitionDate = toBoolean(r.get(\"useAcquisitionDate\"))\n        startdate = r.get(\"startdateinput\", None)\n        startdate = startdate is not None and smart_str(startdate) or None\n        enddate = r.get(\"enddateinput\", None)\n        enddate = enddate is not None and smart_str(enddate) or None\n        date = None\n        if startdate is not None:\n            if enddate is None:\n                n = datetime.datetime.now()\n                enddate = \"%s-%02d-%02d\" % (n.year, n.month, n.day)\n            date = \"%s_%s\" % (startdate, enddate)\n\n        # by default, if user has not specified any types:\n        if len(onlyTypes) == 0:\n            onlyTypes = [\"images\"]\n\n        # search is carried out and results are stored in\n        # manager.containers.images etc.\n        manager.search(\n            query_search,\n            onlyTypes,\n            fields,\n            searchGroup,\n            ownedBy,\n            useAcquisitionDate,\n            date,\n            rawQuery=advanced,\n        )\n\n        # if the query is only numbers (separated by commas or spaces)\n        # we search for objects by ID\n        isIds = re.compile(r\"^[\\d ,]+$\")\n        if isIds.search(query_search) is not None:\n            conn.SERVICE_OPTS.setOmeroGroup(-1)\n            idSet = set()\n            for queryId in re.split(\" |,\", query_search):\n                if len(queryId) == 0:\n                    continue\n                try:\n                    searchById = long(queryId)\n                    if searchById in idSet:\n                        continue\n                    idSet.add(searchById)\n                    for t in onlyTypes:\n                        t = t[0:-1]  # remove 's'\n                        if t in (\n                            \"project\",\n                            \"dataset\",\n                            \"image\",\n                            \"screen\",\n                            \"plate\",\n                            \"well\",\n                        ):\n                            obj = conn.getObject(t, searchById)\n                            if obj is not None:\n                                foundById.append({\"otype\": t, \"obj\": obj})\n                except ValueError:\n                    pass\n\n    else:\n        # simply display the search home page.\n        template = \"webclient/search/search.html\"\n\n    context = {\n        \"manager\": manager,\n        \"foundById\": foundById,\n        \"resultCount\": manager.c_size + len(foundById),\n    }\n    context[\"template\"] = template\n    context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_details(request, c_type, c_id, conn=None, share_id=None, **kwargs):\n    \"\"\"\n    This page is the right-hand panel 'general metadata', first tab only.\n    Shown for Projects, Datasets, Images, Screens, Plates, Wells, Tags etc.\n    The data and annotations are loaded by the manager. Display of appropriate\n    data is handled by the template.\n    \"\"\"\n\n    # the index of a field within a well\n    index = getIntOrDefault(request, \"index\", 0)\n\n    context = dict()\n\n    # we only expect a single object, but forms can take multiple objects\n    images = c_type == \"image\" and list(conn.getObjects(\"Image\", [c_id])) or list()\n    datasets = (\n        c_type == \"dataset\" and list(conn.getObjects(\"Dataset\", [c_id])) or list()\n    )\n    projects = (\n        c_type == \"project\" and list(conn.getObjects(\"Project\", [c_id])) or list()\n    )\n    screens = c_type == \"screen\" and list(conn.getObjects(\"Screen\", [c_id])) or list()\n    plates = c_type == \"plate\" and list(conn.getObjects(\"Plate\", [c_id])) or list()\n    acquisitions = (\n        c_type == \"acquisition\"\n        and list(conn.getObjects(\"PlateAcquisition\", [c_id]))\n        or list()\n    )\n    shares = (\n        (c_type == \"share\" or c_type == \"discussion\")\n        and [conn.getShare(c_id)]\n        or list()\n    )\n    wells = c_type == \"well\" and list(conn.getObjects(\"Well\", [c_id])) or list()\n\n    # we simply set up the annotation form, passing the objects to be\n    # annotated.\n    selected = {\n        \"images\": c_type == \"image\" and [c_id] or [],\n        \"datasets\": c_type == \"dataset\" and [c_id] or [],\n        \"projects\": c_type == \"project\" and [c_id] or [],\n        \"screens\": c_type == \"screen\" and [c_id] or [],\n        \"plates\": c_type == \"plate\" and [c_id] or [],\n        \"acquisitions\": c_type == \"acquisition\" and [c_id] or [],\n        \"wells\": c_type == \"well\" and [c_id] or [],\n        \"shares\": ((c_type == \"share\" or c_type == \"discussion\") and [c_id] or []),\n    }\n\n    initial = {\n        \"selected\": selected,\n        \"images\": images,\n        \"datasets\": datasets,\n        \"projects\": projects,\n        \"screens\": screens,\n        \"plates\": plates,\n        \"acquisitions\": acquisitions,\n        \"wells\": wells,\n        \"shares\": shares,\n    }\n\n    form_comment = None\n    figScripts = None\n    if c_type in (\"share\", \"discussion\"):\n        template = \"webclient/annotations/annotations_share.html\"\n        manager = BaseShare(conn, c_id)\n        manager.getAllUsers(c_id)\n        manager.getComments(c_id)\n        form_comment = CommentAnnotationForm(initial=initial)\n    else:\n        try:\n            manager = BaseContainer(conn, **{str(c_type): long(c_id), \"index\": index})\n        except AttributeError as x:\n            return handlerInternalError(request, x)\n        if share_id is not None:\n            template = \"webclient/annotations/annotations_share.html\"\n            context[\"share\"] = BaseShare(conn, share_id)\n        else:\n            template = \"webclient/annotations/metadata_general.html\"\n            context[\"canExportAsJpg\"] = manager.canExportAsJpg(request)\n            context[\"annotationCounts\"] = manager.getAnnotationCounts()\n            figScripts = manager.listFigureScripts()\n    context[\"manager\"] = manager\n\n    if c_type in (\"tag\", \"tagset\"):\n        context[\"insight_ns\"] = omero.rtypes.rstring(\n            omero.constants.metadata.NSINSIGHTTAGSET\n        ).val\n    if form_comment is not None:\n        context[\"form_comment\"] = form_comment\n\n    context[\"figScripts\"] = figScripts\n    context[\"template\"] = template\n    context[\"webclient_path\"] = reverse(\"webindex\")\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_preview(request, c_type, c_id, conn=None, share_id=None, **kwargs):\n    \"\"\"\n    This is the image 'Preview' tab for the right-hand panel.\n    \"\"\"\n    context = {}\n\n    # the index of a field within a well\n    index = getIntOrDefault(request, \"index\", 0)\n\n    manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n    if share_id:\n        context[\"share\"] = BaseShare(conn, share_id)\n    if c_type == \"well\":\n        manager.image = manager.well.getImage(index)\n\n    allRdefs = manager.image.getAllRenderingDefs()\n    rdefs = {}\n    rdefId = manager.image.getRenderingDefId()\n    # remove duplicates per user\n    for r in allRdefs:\n        ownerId = r[\"owner\"][\"id\"]\n        r[\"current\"] = r[\"id\"] == rdefId\n        # if duplicate rdefs for user, pick one with highest ID\n        if ownerId not in rdefs or rdefs[ownerId][\"id\"] < r[\"id\"]:\n            rdefs[ownerId] = r\n    rdefs = rdefs.values()\n    # format into rdef strings,\n    # E.g. {c: '1|3118:35825$FF0000,2|2086:18975$FFFF00', m: 'c'}\n    rdefQueries = []\n    for r in rdefs:\n        chs = []\n        for i, c in enumerate(r[\"c\"]):\n            act = \"-\"\n            if c[\"active\"]:\n                act = \"\"\n            color = c[\"lut\"] if \"lut\" in c else c[\"color\"]\n            reverse = \"r\" if c[\"inverted\"] else \"-r\"\n            chs.append(\n                \"%s%s|%s:%s%s$%s\" % (act, i + 1, c[\"start\"], c[\"end\"], reverse, color)\n            )\n        rdefQueries.append(\n            {\n                \"id\": r[\"id\"],\n                \"owner\": r[\"owner\"],\n                \"c\": \",\".join(chs),\n                \"m\": r[\"model\"] == \"greyscale\" and \"g\" or \"c\",\n            }\n        )\n    max_w, max_h = conn.getMaxPlaneSize()\n    size_x = manager.image.getSizeX()\n    size_y = manager.image.getSizeY()\n\n    context[\"tiledImage\"] = (size_x * size_y) > (max_w * max_h)\n    context[\"manager\"] = manager\n    context[\"rdefsJson\"] = json.dumps(rdefQueries)\n    context[\"rdefs\"] = rdefs\n    context[\"template\"] = \"webclient/annotations/metadata_preview.html\"\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_hierarchy(request, c_type, c_id, conn=None, **kwargs):\n    \"\"\"\n    This loads the ancestors of the specified object and displays them in a\n    static tree.\n    Used by an AJAX call from the metadata_general panel.\n    \"\"\"\n    manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n\n    context = {\"manager\": manager}\n    context[\"template\"] = \"webclient/annotations/metadata_hierarchy.html\"\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_acquisition(\n    request, c_type, c_id, conn=None, share_id=None, **kwargs\n):\n    \"\"\"\n    The acquisition tab of the right-hand panel. Only loaded for images.\n    TODO: urls regex should make sure that c_type is only 'image' OR 'well'\n    \"\"\"\n    try:\n        if c_type in (\"share\", \"discussion\"):\n            template = \"webclient/annotations/annotations_share.html\"\n            manager = BaseShare(conn, c_id)\n            manager.getAllUsers(c_id)\n            manager.getComments(c_id)\n        else:\n            template = \"webclient/annotations/metadata_acquisition.html\"\n            manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n    except AttributeError as x:\n        return handlerInternalError(request, x)\n\n    form_environment = None\n    form_objective = None\n    form_microscope = None\n    form_instrument_objectives = list()\n    form_stageLabel = None\n    form_filters = list()\n    form_dichroics = list()\n    form_detectors = list()\n    form_channels = list()\n    form_lasers = list()\n\n    lasertypes = list(conn.getEnumerationEntries(\"LaserType\"))\n    arctypes = list(conn.getEnumerationEntries(\"ArcType\"))\n    filamenttypes = list(conn.getEnumerationEntries(\"FilamentType\"))\n\n    # various enums we need for the forms (don't load unless needed)\n    mediums = None\n    immersions = None\n    corrections = None\n\n    if c_type == \"image\":\n        if share_id is None:\n            manager.companionFiles()\n        manager.channelMetadata()\n        for theC, ch in enumerate(manager.channel_metadata):\n            logicalChannel = ch.getLogicalChannel()\n            if logicalChannel is not None:\n                channel = dict()\n                channel[\"form\"] = MetadataChannelForm(\n                    initial={\n                        \"logicalChannel\": logicalChannel,\n                        \"exWave\": ch.getExcitationWave(units=True),\n                        \"emWave\": ch.getEmissionWave(units=True),\n                        \"illuminations\": list(\n                            conn.getEnumerationEntries(\"IlluminationI\")\n                        ),\n                        \"contrastMethods\": list(\n                            conn.getEnumerationEntries(\"ContrastMethodI\")\n                        ),\n                        \"modes\": list(conn.getEnumerationEntries(\"AcquisitionModeI\")),\n                    },\n                    auto_id=False,\n                )\n                # 9853 Much metadata is not available to 'shares'\n                if share_id is None:\n                    lightPath = logicalChannel.getLightPath()\n                    if lightPath is not None:\n                        channel[\"form_dichroic\"] = None\n                        channel[\"form_excitation_filters\"] = list()\n                        channel[\"form_emission_filters\"] = list()\n                        lightPathDichroic = lightPath.getDichroic()\n                        if lightPathDichroic is not None:\n                            channel[\"form_dichroic\"] = MetadataDichroicForm(\n                                initial={\"dichroic\": lightPathDichroic}\n                            )\n                        filterTypes = list(conn.getEnumerationEntries(\"FilterTypeI\"))\n                        for f in lightPath.getEmissionFilters():\n                            channel[\"form_emission_filters\"].append(\n                                MetadataFilterForm(\n                                    initial={\"filter\": f, \"types\": filterTypes}\n                                )\n                            )\n                        for f in lightPath.getExcitationFilters():\n                            channel[\"form_excitation_filters\"].append(\n                                MetadataFilterForm(\n                                    initial={\"filter\": f, \"types\": filterTypes}\n                                )\n                            )\n\n                    detectorSettings = logicalChannel.getDetectorSettings()\n                    if (\n                        detectorSettings._obj is not None\n                        and detectorSettings.getDetector()\n                    ):\n                        channel[\"form_detector_settings\"] = MetadataDetectorForm(\n                            initial={\n                                \"detectorSettings\": detectorSettings,\n                                \"detector\": detectorSettings.getDetector(),\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"DetectorTypeI\")\n                                ),\n                                \"binnings\": list(conn.getEnumerationEntries(\"Binning\")),\n                            }\n                        )\n\n                    lightSourceSettings = logicalChannel.getLightSourceSettings()\n                    if (\n                        lightSourceSettings is not None\n                        and lightSourceSettings._obj is not None\n                    ):\n                        lightSrc = lightSourceSettings.getLightSource()\n                        if lightSrc is not None:\n                            lstypes = lasertypes\n                            if lightSrc.OMERO_CLASS == \"Arc\":\n                                lstypes = arctypes\n                            elif lightSrc.OMERO_CLASS == \"Filament\":\n                                lstypes = filamenttypes\n                            channel[\"form_light_source\"] = MetadataLightSourceForm(\n                                initial={\n                                    \"lightSource\": lightSrc,\n                                    \"lightSourceSettings\": lightSourceSettings,\n                                    \"lstypes\": lstypes,\n                                    \"mediums\": list(\n                                        conn.getEnumerationEntries(\"LaserMediumI\")\n                                    ),\n                                    \"pulses\": list(\n                                        conn.getEnumerationEntries(\"PulseI\")\n                                    ),\n                                }\n                            )\n                # TODO: We don't display filter sets here yet since they are\n                # not populated on Import by BioFormats.\n                channel[\"label\"] = ch.getLabel()\n                color = ch.getColor()\n                channel[\"color\"] = color is not None and color.getHtml() or None\n                planeInfo = (\n                    manager.image\n                    and manager.image.getPrimaryPixels().copyPlaneInfo(\n                        theC=theC, theZ=0\n                    )\n                )\n                plane_info = []\n\n                for pi in planeInfo:\n                    deltaT = pi.getDeltaT(units=\"SECOND\")\n                    exposure = pi.getExposureTime(units=\"SECOND\")\n                    if deltaT is None and exposure is None:\n                        continue\n                    if deltaT is not None:\n                        deltaT = deltaT.getValue()\n                    if exposure is not None:\n                        exposure = exposure.getValue()\n                    plane_info.append(\n                        {\"theT\": pi.theT, \"deltaT\": deltaT, \"exposureTime\": exposure}\n                    )\n                channel[\"plane_info\"] = plane_info\n\n                form_channels.append(channel)\n\n        try:\n            image = manager.well.getWellSample().image()\n        except Exception:\n            image = manager.image\n\n        if share_id is None:  # 9853\n            if image.getObjectiveSettings() is not None:\n                # load the enums if needed and create our Objective Form\n                if mediums is None:\n                    mediums = list(conn.getEnumerationEntries(\"MediumI\"))\n                if immersions is None:\n                    immersions = list(conn.getEnumerationEntries(\"ImmersionI\"))\n                if corrections is None:\n                    corrections = list(conn.getEnumerationEntries(\"CorrectionI\"))\n                form_objective = MetadataObjectiveSettingsForm(\n                    initial={\n                        \"objectiveSettings\": image.getObjectiveSettings(),\n                        \"objective\": image.getObjectiveSettings().getObjective(),\n                        \"mediums\": mediums,\n                        \"immersions\": immersions,\n                        \"corrections\": corrections,\n                    }\n                )\n            if image.getImagingEnvironment() is not None:\n                form_environment = MetadataEnvironmentForm(initial={\"image\": image})\n            if image.getStageLabel() is not None:\n                form_stageLabel = MetadataStageLabelForm(initial={\"image\": image})\n\n            instrument = image.getInstrument()\n            if instrument is not None:\n                if instrument.getMicroscope() is not None:\n                    form_microscope = MetadataMicroscopeForm(\n                        initial={\n                            \"microscopeTypes\": list(\n                                conn.getEnumerationEntries(\"MicroscopeTypeI\")\n                            ),\n                            \"microscope\": instrument.getMicroscope(),\n                        }\n                    )\n\n                objectives = instrument.getObjectives()\n                for o in objectives:\n                    # load the enums if needed and create our Objective Form\n                    if mediums is None:\n                        mediums = list(conn.getEnumerationEntries(\"MediumI\"))\n                    if immersions is None:\n                        immersions = list(conn.getEnumerationEntries(\"ImmersionI\"))\n                    if corrections is None:\n                        corrections = list(conn.getEnumerationEntries(\"CorrectionI\"))\n                    obj_form = MetadataObjectiveForm(\n                        initial={\n                            \"objective\": o,\n                            \"mediums\": mediums,\n                            \"immersions\": immersions,\n                            \"corrections\": corrections,\n                        },\n                        auto_id=False,\n                    )\n                    form_instrument_objectives.append(obj_form)\n                filters = list(instrument.getFilters())\n                if len(filters) > 0:\n                    for f in filters:\n                        form_filter = MetadataFilterForm(\n                            initial={\n                                \"filter\": f,\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"FilterTypeI\")\n                                ),\n                            },\n                            auto_id=False,\n                        )\n                        form_filters.append(form_filter)\n\n                dichroics = list(instrument.getDichroics())\n                for d in dichroics:\n                    form_dichroic = MetadataDichroicForm(\n                        initial={\"dichroic\": d}, auto_id=False\n                    )\n                    form_dichroics.append(form_dichroic)\n\n                detectors = list(instrument.getDetectors())\n                if len(detectors) > 0:\n                    for d in detectors:\n                        form_detector = MetadataDetectorForm(\n                            initial={\n                                \"detectorSettings\": None,\n                                \"detector\": d,\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"DetectorTypeI\")\n                                ),\n                            },\n                            auto_id=False,\n                        )\n                        form_detectors.append(form_detector)\n\n                lasers = list(instrument.getLightSources())\n                if len(lasers) > 0:\n                    for laser in lasers:\n                        lstypes = lasertypes\n                        if laser.OMERO_CLASS == \"Arc\":\n                            lstypes = arctypes\n                        elif laser.OMERO_CLASS == \"Filament\":\n                            lstypes = filamenttypes\n                        form_laser = MetadataLightSourceForm(\n                            initial={\n                                \"lightSource\": laser,\n                                \"lstypes\": lstypes,\n                                \"mediums\": list(\n                                    conn.getEnumerationEntries(\"LaserMediumI\")\n                                ),\n                                \"pulses\": list(conn.getEnumerationEntries(\"PulseI\")),\n                            },\n                            auto_id=False,\n                        )\n                        form_lasers.append(form_laser)\n\n    # TODO: remove this 'if' since we should only have c_type = 'image'?\n    context = {\"manager\": manager, \"share_id\": share_id}\n    if c_type not in (\"share\", \"discussion\", \"tag\"):\n        context[\"form_channels\"] = form_channels\n        context[\"form_environment\"] = form_environment\n        context[\"form_objective\"] = form_objective\n        context[\"form_microscope\"] = form_microscope\n        context[\"form_instrument_objectives\"] = form_instrument_objectives\n        context[\"form_filters\"] = form_filters\n        context[\"form_dichroics\"] = form_dichroics\n        context[\"form_detectors\"] = form_detectors\n        context[\"form_lasers\"] = form_lasers\n        context[\"form_stageLabel\"] = form_stageLabel\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef load_original_metadata(request, imageId, conn=None, share_id=None, **kwargs):\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is None:\n        raise Http404(\"No Image found with ID %s\" % imageId)\n\n    context = {\n        \"template\": \"webclient/annotations/original_metadata.html\",\n        \"imageId\": image.getId(),\n    }\n    try:\n        om = image.loadOriginalMetadata()\n        if om is not None:\n            context[\"original_metadata\"] = om[0]\n            context[\"global_metadata\"] = om[1]\n            context[\"series_metadata\"] = om[2]\n    except omero.LockTimeout:\n        # 408 is Request Timeout\n        return HttpResponse(content=\"LockTimeout\", status=408)\n    return context\n\n\n###########################################################################\n# ACTIONS\n\n# Annotation in the right-hand panel is handled the same way for single\n# objects (metadata_general.html)\n# AND for batch annotation (batch_annotate.html) by 4 forms:\n# Comment (this is loaded in the initial page)\n# Tags (the empty form is in the initial page but fields are loaded via AJAX)\n# Local File (this is loaded in the initial page)\n# Existing File (the empty form is in the initial page but field is loaded via\n# AJAX)\n#\n# In each case, the form itself contains hidden fields to specify the\n# object(s) being annotated\n# All forms inherit from a single form that has these fields.\n\n\ndef getObjects(request, conn=None):\n    \"\"\"\n    Prepare objects for use in the annotation forms.\n    These objects are required by the form superclass to populate hidden\n    fields, so we know what we're annotating on submission\n    \"\"\"\n    r = request.GET or request.POST\n    images = (\n        len(r.getlist(\"image\")) > 0\n        and list(conn.getObjects(\"Image\", r.getlist(\"image\")))\n        or list()\n    )\n    datasets = (\n        len(r.getlist(\"dataset\")) > 0\n        and list(conn.getObjects(\"Dataset\", r.getlist(\"dataset\")))\n        or list()\n    )\n    projects = (\n        len(r.getlist(\"project\")) > 0\n        and list(conn.getObjects(\"Project\", r.getlist(\"project\")))\n        or list()\n    )\n    screens = (\n        len(r.getlist(\"screen\")) > 0\n        and list(conn.getObjects(\"Screen\", r.getlist(\"screen\")))\n        or list()\n    )\n    plates = (\n        len(r.getlist(\"plate\")) > 0\n        and list(conn.getObjects(\"Plate\", r.getlist(\"plate\")))\n        or list()\n    )\n    acquisitions = (\n        len(r.getlist(\"acquisition\")) > 0\n        and list(conn.getObjects(\"PlateAcquisition\", r.getlist(\"acquisition\")))\n        or list()\n    )\n    shares = (\n        len(r.getlist(\"share\")) > 0 and [conn.getShare(r.getlist(\"share\")[0])] or list()\n    )\n    wells = (\n        len(r.getlist(\"well\")) > 0\n        and list(conn.getObjects(\"Well\", r.getlist(\"well\")))\n        or list()\n    )\n    return {\n        \"image\": images,\n        \"dataset\": datasets,\n        \"project\": projects,\n        \"screen\": screens,\n        \"plate\": plates,\n        \"acquisition\": acquisitions,\n        \"well\": wells,\n        \"share\": shares,\n    }\n\n\ndef getIds(request):\n    \"\"\"\n    Used by forms to indicate the currently selected objects prepared above\n    \"\"\"\n    r = request.GET or request.POST\n    selected = {\n        \"images\": r.getlist(\"image\"),\n        \"datasets\": r.getlist(\"dataset\"),\n        \"projects\": r.getlist(\"project\"),\n        \"screens\": r.getlist(\"screen\"),\n        \"plates\": r.getlist(\"plate\"),\n        \"acquisitions\": r.getlist(\"acquisition\"),\n        \"wells\": r.getlist(\"well\"),\n        \"shares\": r.getlist(\"share\"),\n    }\n    return selected\n\n\n@login_required()\n@render_response()\ndef batch_annotate(request, conn=None, **kwargs):\n    \"\"\"\n    This page gives a form for batch annotation.\n    Local File form and Comment form are loaded. Other forms are loaded via\n    AJAX\n    \"\"\"\n\n    objs = getObjects(request, conn)\n\n    # get groups for selected objects - setGroup() and create links\n    obj_ids = []\n    obj_labels = []\n    groupIds = set()\n    annotationBlocked = False\n    for key in objs:\n        obj_ids += [\"%s=%s\" % (key, o.id) for o in objs[key]]\n        for o in objs[key]:\n            groupIds.add(o.getDetails().group.id.val)\n            if not o.canAnnotate():\n                annotationBlocked = (\n                    \"Can't add annotations because you don't\" \" have permissions\"\n                )\n            obj_labels.append({\"type\": key.title(), \"id\": o.id, \"name\": o.getName()})\n    obj_string = \"&\".join(obj_ids)\n    link_string = \"|\".join(obj_ids).replace(\"=\", \"-\")\n    if len(groupIds) == 0:\n        # No supported objects found.\n        # If multiple tags / tagsets selected, return placeholder\n        if (\n            len(request.GET.getlist(\"tag\")) > 0\n            or len(request.GET.getlist(\"tagset\")) > 0\n        ):\n            return HttpResponse(\"<h2>Can't batch annotate tags</h2>\")\n        else:\n            return handlerInternalError(request, \"No objects found\")\n    groupId = list(groupIds)[0]\n    conn.SERVICE_OPTS.setOmeroGroup(groupId)\n\n    manager = BaseContainer(conn)\n    figScripts = manager.listFigureScripts(objs)\n    canExportAsJpg = manager.canExportAsJpg(request, objs)\n    filesetInfo = None\n    iids = []\n    if \"image\" in objs and len(objs[\"image\"]) > 0:\n        iids = [i.getId() for i in objs[\"image\"]]\n    if len(iids) > 0:\n        filesetInfo = conn.getFilesetFilesInfo(iids)\n        archivedInfo = conn.getArchivedFilesInfo(iids)\n        filesetInfo[\"count\"] += archivedInfo[\"count\"]\n        filesetInfo[\"size\"] += archivedInfo[\"size\"]\n\n    context = {\n        \"iids\": iids,\n        \"obj_string\": obj_string,\n        \"link_string\": link_string,\n        \"obj_labels\": obj_labels,\n        \"batch_ann\": True,\n        \"figScripts\": figScripts,\n        \"canExportAsJpg\": canExportAsJpg,\n        \"filesetInfo\": filesetInfo,\n        \"annotationBlocked\": annotationBlocked,\n        \"differentGroups\": False,\n    }\n    if len(groupIds) > 1:\n        context[\"annotationBlocked\"] = (\n            \"Can't add annotations because\" \" objects are in different groups\"\n        )\n        context[\"differentGroups\"] = True  # E.g. don't run scripts etc\n    context[\"canDownload\"] = manager.canDownload(objs)\n    context[\"template\"] = \"webclient/annotations/batch_annotate.html\"\n    context[\"webclient_path\"] = reverse(\"webindex\")\n    context[\"annotationCounts\"] = manager.getBatchAnnotationCounts(\n        getObjects(request, conn)\n    )\n    return context\n\n\n@login_required()\n@render_response()\ndef annotate_file(request, conn=None, **kwargs):\n    \"\"\"\n    On 'POST', This handles attaching an existing file-annotation(s) and/or\n    upload of a new file to one or more objects\n    Otherwise it generates the form for choosing file-annotations & local\n    files.\n    \"\"\"\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n    }\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!)\n    for obs in oids.values():\n        if len(obs) > 0:\n            conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n            break\n\n    obj_count = sum([len(selected[types]) for types in selected])\n    if obj_count == 0:\n        raise Http404(\"Need to specify objects via e.g. ?image=1\")\n\n    # Get appropriate manager, either to list available Files to add to single\n    # object, or list ALL Files (multiple objects)\n    manager = None\n    if obj_count == 1:\n        for t in selected:\n            if len(selected[t]) > 0:\n                o_type = t[:-1]  # \"images\" -> \"image\"\n                o_id = selected[t][0]\n                break\n        if o_type in (\n            \"dataset\",\n            \"project\",\n            \"image\",\n            \"screen\",\n            \"plate\",\n            \"acquisition\",\n            \"well\",\n            \"comment\",\n            \"file\",\n            \"tag\",\n            \"tagset\",\n        ):\n            if o_type == \"tagset\":\n                # TODO: this should be handled by the BaseContainer\n                o_type = \"tag\"\n            kw = {}\n            if o_type is not None and int(o_id) > 0:\n                kw[str(o_type)] = int(o_id)\n            try:\n                manager = BaseContainer(conn, **kw)\n            except AttributeError as x:\n                return handlerInternalError(request, x)\n\n    if manager is not None:\n        files = manager.getFilesByObject()\n    else:\n        manager = BaseContainer(conn)\n        for dtype, objs in oids.items():\n            if len(objs) > 0:\n                # NB: we only support a single data-type now. E.g. 'image' OR\n                # 'dataset' etc.\n                files = manager.getFilesByObject(\n                    parent_type=dtype, parent_ids=[o.getId() for o in objs]\n                )\n                break\n\n    initial[\"files\"] = files\n\n    if request.method == \"POST\":\n        # handle form submission\n        form_file = FilesAnnotationForm(initial=initial, data=request.POST.copy())\n        if form_file.is_valid():\n            # Link existing files...\n            files = form_file.cleaned_data[\"files\"]\n            added_files = []\n            if files is not None and len(files) > 0:\n                added_files = manager.createAnnotationsLinks(\"file\", files, oids)\n            # upload new file\n            fileupload = (\n                \"annotation_file\" in request.FILES\n                and request.FILES[\"annotation_file\"]\n                or None\n            )\n            if fileupload is not None and fileupload != \"\":\n                newFileId = manager.createFileAnnotations(fileupload, oids)\n                added_files.append(newFileId)\n            return JsonResponse({\"fileIds\": added_files})\n        else:\n            return HttpResponse(form_file.errors)\n\n    else:\n        form_file = FilesAnnotationForm(initial=initial)\n        context = {\"form_file\": form_file}\n        template = \"webclient/annotations/files_form.html\"\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef annotate_rating(request, conn=None, **kwargs):\n    \"\"\"\n    Handle adding Rating to one or more objects\n    \"\"\"\n    if request.method != \"POST\":\n        raise Http404(\"Only POST supported\")\n    rating = getIntOrDefault(request, \"rating\", 0)\n    oids = getObjects(request, conn)\n\n    # add / update rating\n    for otype, objs in oids.items():\n        for o in objs:\n            o.setRating(rating)\n\n    # return a summary of ratings\n    return JsonResponse({\"success\": True})\n\n\n@login_required()\n@render_response()\ndef annotate_comment(request, conn=None, **kwargs):\n    \"\"\"Handle adding Comments to one or more objects\n    Unbound instance of Comment form not available.\n    If the form has been submitted, a bound instance of the form\n    is created using request.POST\"\"\"\n\n    if request.method != \"POST\":\n        raise Http404(\"Unbound instance of form not available.\")\n\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n        \"shares\": oids[\"share\"],\n    }\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!) this does not aplly to share\n    if len(oids[\"share\"]) < 1:\n        for obs in oids.values():\n            if len(obs) > 0:\n                conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n                break\n\n    # Handle form submission...\n    form_multi = CommentAnnotationForm(initial=initial, data=request.POST.copy())\n    if form_multi.is_valid():\n        # In each case below, we pass the {'object_type': [ids]} map\n        content = form_multi.cleaned_data[\"comment\"]\n        if content is not None and content != \"\":\n            if oids[\"share\"] is not None and len(oids[\"share\"]) > 0:\n                sid = oids[\"share\"][0].id\n                manager = BaseShare(conn, sid)\n                host = \"%s?server=%i\" % (\n                    request.build_absolute_uri(\n                        reverse(\"load_template\", args=[\"public\"])\n                    ),\n                    int(conn.server_id),\n                )\n                textAnn = manager.addComment(host, content)\n                # For shares we need to return html for display...\n                context = {\n                    \"tann\": textAnn,\n                    \"added_by\": conn.getUserId(),\n                    \"template\": \"webclient/annotations/comment.html\",\n                }\n            else:\n                # ...otherwise Comments are re-loaded by AJAX json\n                # so we don't *need* to return anything\n                manager = BaseContainer(conn)\n                annId = manager.createCommentAnnotations(content, oids)\n                context = {\"annId\": annId, \"added_by\": conn.getUserId()}\n            return context\n    else:\n        # TODO: handle invalid form error\n        return HttpResponse(str(form_multi.errors))\n\n\n@login_required()\n@render_response()\ndef annotate_map(request, conn=None, **kwargs):\n    \"\"\"\n    Handle adding Map Annotations to one or more objects\n    POST data \"mapAnnotation\" should be list of ['key':'value'] pairs.\n    \"\"\"\n\n    if request.method != \"POST\":\n        raise Http404(\n            \"Need to POST map annotation data as list of\" \" ['key', 'value'] pairs\"\n        )\n\n    oids = getObjects(request, conn)\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!)\n    # this does not aplly to share\n    if len(oids[\"share\"]) < 1:\n        for obs in oids.values():\n            if len(obs) > 0:\n                conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n                break\n\n    data = request.POST.get(\"mapAnnotation\")\n    data = json.loads(data)\n\n    annIds = request.POST.getlist(\"annId\")\n    ns = request.POST.get(\"ns\", omero.constants.metadata.NSCLIENTMAPANNOTATION)\n\n    # Create a new annotation\n    if len(annIds) == 0 and len(data) > 0:\n        duplicate = request.POST.get(\"duplicate\", \"false\")\n        duplicate.lower() == \"true\"\n        # For 'client' map annotations, we enforce 1 annotation per object\n        if ns == omero.constants.metadata.NSCLIENTMAPANNOTATION:\n            duplicate = True\n        if duplicate:\n            # Create a new Map Annotation for each object:\n            for k, objs in oids.items():\n                for obj in objs:\n                    ann = omero.gateway.MapAnnotationWrapper(conn)\n                    ann.setValue(data)\n                    ann.setNs(ns)\n                    ann.save()\n                    annIds.append(ann.getId())\n                    obj.linkAnnotation(ann)\n        else:\n            # Create single Map Annotation and link to all objects\n            ann = omero.gateway.MapAnnotationWrapper(conn)\n            ann.setValue(data)\n            ann.setNs(ns)\n            ann.save()\n            annIds.append(ann.getId())\n            for k, objs in oids.items():\n                for obj in objs:\n                    obj.linkAnnotation(ann)\n    # Or update existing annotations\n    else:\n        for annId in annIds:\n            ann = conn.getObject(\"MapAnnotation\", annId)\n            if ann is None:\n                continue\n            if len(data) > 0:\n                ann.setValue(data)\n                ann.save()\n            else:\n                # Delete if no data\n                handle = conn.deleteObjects(\"/Annotation\", [annId])\n                try:\n                    conn._waitOnCmd(handle)\n                finally:\n                    handle.close()\n        if len(data) == 0:\n            annIds = None\n\n    return {\"annId\": annIds}\n\n\n@login_required()\n@render_response()\ndef marshal_tagging_form_data(request, conn=None, **kwargs):\n    \"\"\"\n    Provides json data to ome.tagging_form.js\n    \"\"\"\n\n    group = get_long_or_default(request, \"group\", -1)\n    conn.SERVICE_OPTS.setOmeroGroup(str(group))\n    try:\n        offset = int(request.GET.get(\"offset\"))\n        limit = int(request.GET.get(\"limit\", 1000))\n    except Exception:\n        offset = limit = None\n\n    jsonmode = request.GET.get(\"jsonmode\")\n    if jsonmode == \"tagcount\":\n        tag_count = conn.getTagCount()\n        return dict(tag_count=tag_count)\n\n    manager = BaseContainer(conn)\n    manager.loadTagsRecursive(eid=-1, offset=offset, limit=limit)\n    all_tags = manager.tags_recursive\n    all_tags_owners = manager.tags_recursive_owners\n\n    if jsonmode == \"tags\":\n        # send tag information without descriptions\n        r = list((i, t, o, s) for i, d, t, o, s in all_tags)\n        return r\n\n    elif jsonmode == \"desc\":\n        # send descriptions for tags\n        return dict((i, d) for i, d, t, o, s in all_tags)\n\n    elif jsonmode == \"owners\":\n        # send owner information\n        return all_tags_owners\n\n    return HttpResponse()\n\n\n@login_required()\n@render_response()\ndef annotate_tags(request, conn=None, **kwargs):\n    \"\"\"\n    This handles creation AND submission of Tags form, adding new AND/OR\n    existing tags to one or more objects\n    \"\"\"\n\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    obj_count = sum([len(selected[types]) for types in selected])\n\n    # Get appropriate manager, either to list available Tags to add to single\n    # object, or list ALL Tags (multiple objects)\n    manager = None\n    self_id = conn.getEventContext().userId\n\n    tags = []\n\n    # Use the first object we find to set context (assume all objects are\n    # in same group!)\n    for obs in oids.values():\n        if len(obs) > 0:\n            conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n            break\n\n    # Make a list of all current tags\n    # As would be on right column of tagging dialog...\n    taglist, users = tree.marshal_annotations(\n        conn,\n        project_ids=selected[\"projects\"],\n        dataset_ids=selected[\"datasets\"],\n        image_ids=selected[\"images\"],\n        screen_ids=selected[\"screens\"],\n        plate_ids=selected[\"plates\"],\n        run_ids=selected[\"acquisitions\"],\n        well_ids=selected[\"wells\"],\n        ann_type=\"tag\",\n        # If we reach this limit we'll get some tags not removed\n        limit=ANNOTATIONS_LIMIT,\n    )\n\n    userMap = {}\n    for exp in users:\n        userMap[exp[\"id\"]] = exp\n\n    # For batch annotate, only include tags that user has added to all objects\n    if obj_count > 1:\n        # count my links\n        myLinkCount = {}\n        for t in taglist:\n            tid = t[\"id\"]\n            if tid not in myLinkCount:\n                myLinkCount[tid] = 0\n            if t[\"link\"][\"owner\"][\"id\"] == self_id:\n                myLinkCount[tid] += 1\n        # filter\n        taglist = [t for t in taglist if myLinkCount[t[\"id\"]] == obj_count]\n\n    selected_tags = []\n    for tag in taglist:\n        linkOwnerId = tag[\"link\"][\"owner\"][\"id\"]\n        owner = userMap[linkOwnerId]\n        ownerName = \"%s %s\" % (owner[\"firstName\"], owner[\"lastName\"])\n        canDelete = True\n        created = tag[\"link\"][\"date\"]\n        linkOwned = linkOwnerId == self_id\n        selected_tags.append(\n            (tag[\"id\"], self_id, ownerName, canDelete, created, linkOwned)\n        )\n\n    # selected_tags is really a list of tag LINKS.\n    # May be several links per tag.id\n    selected_tags.sort(key=lambda x: x[0])\n\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n    }\n\n    if request.method == \"POST\":\n        # handle form submission\n        form_tags = TagsAnnotationForm(initial=initial, data=request.POST.copy())\n        newtags_formset = NewTagsAnnotationFormSet(\n            prefix=\"newtags\", data=request.POST.copy()\n        )\n        # Create new tags or Link existing tags...\n        if form_tags.is_valid() and newtags_formset.is_valid():\n            # filter down previously selected tags to the ones linked by\n            # current user\n            selected_tag_ids = [stag[0] for stag in selected_tags if stag[5]]\n            # Remove duplicates from tag IDs\n            selected_tag_ids = list(set(selected_tag_ids))\n            post_tags = list(form_tags.cleaned_data[\"tags\"])\n            tags = [tag for tag in post_tags if tag not in selected_tag_ids]\n            removed = [tag for tag in selected_tag_ids if tag not in post_tags]\n            manager = BaseContainer(conn)\n            if tags:\n                manager.createAnnotationsLinks(\"tag\", tags, oids)\n            new_tags = []\n            for form in newtags_formset.forms:\n                new_tags.append(\n                    manager.createTagAnnotations(\n                        form.cleaned_data[\"tag\"],\n                        form.cleaned_data[\"description\"],\n                        oids,\n                        tag_group_id=form.cleaned_data[\"tagset\"],\n                    )\n                )\n            # only remove Tags where the link is owned by self_id\n            for remove in removed:\n                tag_manager = BaseContainer(conn, tag=remove)\n                tag_manager.remove(\n                    [\n                        \"%s-%s\" % (dtype, obj.id)\n                        for dtype, objs in oids.items()\n                        for obj in objs\n                    ],\n                    tag_owner_id=self_id,\n                )\n            return JsonResponse({\"added\": tags, \"removed\": removed, \"new\": new_tags})\n        else:\n            # TODO: handle invalid form error\n            return HttpResponse(str(form_tags.errors))\n\n    else:\n        form_tags = TagsAnnotationForm(initial=initial)\n        newtags_formset = NewTagsAnnotationFormSet(prefix=\"newtags\")\n        context = {\n            \"form_tags\": form_tags,\n            \"newtags_formset\": newtags_formset,\n            \"selected_tags\": selected_tags,\n        }\n        template = \"webclient/annotations/tags_form.html\"\n    context[\"template\"] = template\n    return context\n\n\n@require_POST\n@login_required()\n@render_response()\ndef edit_channel_names(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Edit and save channel names\n    \"\"\"\n    image = conn.getObject(\"Image\", imageId)\n    sizeC = image.getSizeC()\n    channelNames = {}\n    nameDict = {}\n    for i in range(sizeC):\n        cname = request.POST.get(\"channel%d\" % i, None)\n        if cname is not None:\n            cname = smart_str(cname)[:255]  # Truncate to fit in DB\n            channelNames[\"channel%d\" % i] = cname\n            nameDict[i + 1] = cname\n    # If the 'Apply to Dataset' button was used to submit...\n    if request.POST.get(\"confirm_apply\", None) is not None:\n        # plate-123 OR dataset-234\n        parentId = request.POST.get(\"parentId\", None)\n        if parentId is not None:\n            ptype = parentId.split(\"-\")[0].title()\n            pid = long(parentId.split(\"-\")[1])\n            counts = conn.setChannelNames(ptype, [pid], nameDict, channelCount=sizeC)\n    else:\n        counts = conn.setChannelNames(\"Image\", [image.getId()], nameDict)\n    rv = {\"channelNames\": channelNames}\n    if counts:\n        rv[\"imageCount\"] = counts[\"imageCount\"]\n        rv[\"updateCount\"] = counts[\"updateCount\"]\n        return rv\n    else:\n        return {\"error\": \"No parent found to apply Channel Names\"}\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef manage_action_containers(\n    request, action, o_type=None, o_id=None, conn=None, **kwargs\n):\n    \"\"\"\n    Handles many different actions on various objects.\n\n    @param action:      \"addnewcontainer\", (creates a new Project, Dataset,\n                        Screen), \"editname\", \"savename\", \"editdescription\",\n                        \"savedescription\",  (used as GET and POST for in-line\n                        editing),\n                        \"removefromshare\", (tree P/D/I moving etc)\n                        \"delete\", \"deletemany\"      (delete objects)\n                        \"remove\" (remove tag/comment from object)\n    @param o_type:      \"dataset\", \"project\", \"image\", \"screen\", \"plate\",\n                        \"acquisition\", \"well\",\"comment\", \"file\", \"tag\",\n                        \"tagset\",\"share\", \"sharecomment\"\n    \"\"\"\n    template = None\n\n    manager = None\n    if o_type in (\n        \"dataset\",\n        \"project\",\n        \"image\",\n        \"screen\",\n        \"plate\",\n        \"acquisition\",\n        \"well\",\n        \"comment\",\n        \"file\",\n        \"tag\",\n        \"tagset\",\n    ):\n        kw = {}\n        if o_type is not None and int(o_id) > 0:\n            o_id = int(o_id)\n            kw[str(o_type)] = o_id\n        try:\n            manager = BaseContainer(conn, **kw)\n        except AttributeError as x:\n            return handlerInternalError(request, x)\n    elif o_type in (\"share\", \"sharecomment\", \"chat\"):\n        manager = BaseShare(conn, o_id)\n    else:\n        manager = BaseContainer(conn)\n\n    form = None\n    if action == \"addnewcontainer\":\n        # Used within the jsTree to add a new Project, Dataset, Tag,\n        # Tagset etc under a specified parent OR top-level\n        if not request.method == \"POST\":\n            return JsonResponse(\n                {\"Error\": \"Must use POST to create container\"}, status=405\n            )\n\n        form = ContainerForm(data=request.POST.copy())\n        if form.is_valid():\n            logger.debug(\"Create new in %s: %s\" % (o_type, str(form.cleaned_data)))\n            name = form.cleaned_data[\"name\"]\n            description = form.cleaned_data[\"description\"]\n            owner = form.cleaned_data[\"owner\"]\n\n            if o_type == \"project\" and hasattr(manager, o_type) and o_id > 0:\n                oid = manager.createDataset(name, description, owner=owner)\n            elif o_type == \"tagset\" and o_id > 0:\n                oid = manager.createTag(name, description, owner=owner)\n            elif request.POST.get(\"folder_type\") in (\n                \"project\",\n                \"screen\",\n                \"dataset\",\n                \"tag\",\n                \"tagset\",\n            ):\n                # No parent specified. We can create orphaned 'project',\n                # 'dataset' etc.\n                folder_type = request.POST.get(\"folder_type\")\n                if folder_type == \"dataset\":\n                    oid = manager.createDataset(\n                        name,\n                        description,\n                        owner=owner,\n                        img_ids=request.POST.getlist(\"image\", None),\n                    )\n                else:\n                    oid = conn.createContainer(\n                        folder_type, name, description, owner=owner\n                    )\n            else:\n                return HttpResponseServerError(\"Object does not exist\")\n            rdict = {\"bad\": \"false\", \"id\": oid}\n            return JsonResponse(rdict)\n        else:\n            d = dict()\n            for e in form.errors.items():\n                d.update({e[0]: unicode(e[1])})\n            rdict = {\"bad\": \"true\", \"errs\": d}\n            return JsonResponse(rdict)\n\n    elif action == \"edit\":\n        # form for editing Shares only\n        if o_id is None:\n            raise Http404(\"No share ID\")\n        if o_type == \"share\" and int(o_id) > 0:\n            template = \"webclient/public/share_form.html\"\n            manager.getMembers(o_id)\n            manager.getComments(o_id)\n            experimenters = list(conn.getExperimenters())\n            experimenters.sort(key=lambda x: x.getOmeName().lower())\n            initial = {\n                \"message\": manager.share.message,\n                \"expiration\": \"\",\n                \"shareMembers\": manager.membersInShare,\n                \"enable\": manager.share.active,\n                \"experimenters\": experimenters,\n            }\n            if manager.share.getExpireDate() is not None:\n                initial[\"expiration\"] = manager.share.getExpireDate().strftime(\n                    \"%Y-%m-%d\"\n                )\n            form = ShareForm(initial=initial)  # 'guests':share.guestsInShare,\n            context = {\"manager\": manager, \"form\": form}\n    elif action == \"save\":\n        # Handles submission of the 'edit' form above. TODO: not used now?\n        if not request.method == \"POST\":\n            return HttpResponseRedirect(\n                reverse(\"manage_action_containers\", args=[\"edit\", o_type, o_id])\n            )\n        if o_type == \"share\":\n            experimenters = list(conn.getExperimenters())\n            experimenters.sort(key=lambda x: x.getOmeName().lower())\n            form = ShareForm(\n                initial={\"experimenters\": experimenters}, data=request.POST.copy()\n            )\n            if form.is_valid():\n                logger.debug(\"Update share: %s\" % (str(form.cleaned_data)))\n                message = form.cleaned_data[\"message\"]\n                expiration = form.cleaned_data[\"expiration\"]\n                members = form.cleaned_data[\"members\"]\n                # guests = request.POST['guests']\n                enable = form.cleaned_data[\"enable\"]\n                host = \"%s?server=%i\" % (\n                    request.build_absolute_uri(\n                        reverse(\"load_template\", args=[\"public\"])\n                    ),\n                    int(conn.server_id),\n                )\n                manager.updateShareOrDiscussion(\n                    host, message, members, enable, expiration\n                )\n                r = \"enable\" if enable else \"disable\"\n                return HttpResponse(r)\n            else:\n                template = \"webclient/public/share_form.html\"\n                context = {\"share\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"editname\":\n        # start editing 'name' in-line\n        if hasattr(manager, o_type) and o_id > 0:\n            obj = getattr(manager, o_type)\n            template = \"webclient/ajax_form/container_form_ajax.html\"\n            if o_type == \"tag\":\n                txtValue = obj.textValue\n            else:\n                txtValue = obj.getName()\n            form = ContainerNameForm(initial={\"name\": txtValue})\n            context = {\"manager\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"savename\":\n        # Save name edit in-line\n        if not request.method == \"POST\":\n            return HttpResponseRedirect(\n                reverse(\"manage_action_containers\", args=[\"edit\", o_type, o_id])\n            )\n        if hasattr(manager, o_type) and o_id > 0:\n            form = ContainerNameForm(data=request.POST.copy())\n            if form.is_valid():\n                logger.debug(\"Update name form:\" + str(form.cleaned_data))\n                name = form.cleaned_data[\"name\"]\n                rdict = {\"bad\": \"false\", \"o_type\": o_type}\n                manager.updateName(o_type, name)\n                return JsonResponse(rdict)\n            else:\n                d = dict()\n                for e in form.errors.items():\n                    d.update({e[0]: unicode(e[1])})\n                rdict = {\"bad\": \"true\", \"errs\": d}\n                return JsonResponse(rdict)\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"editdescription\":\n        # start editing description in-line\n        if hasattr(manager, o_type) and o_id > 0:\n            obj = getattr(manager, o_type)\n            template = \"webclient/ajax_form/container_form_ajax.html\"\n            form = ContainerDescriptionForm(initial={\"description\": obj.description})\n            context = {\"manager\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"savedescription\":\n        # Save editing of description in-line\n        if not request.method == \"POST\":\n            return HttpResponseServerError(\n                \"Action '%s' on the '%s' id:%s cannot be complited\"\n                % (action, o_type, o_id)\n            )\n        if hasattr(manager, o_type) and o_id > 0:\n            form = ContainerDescriptionForm(data=request.POST.copy())\n            if form.is_valid():\n                logger.debug(\"Update name form:\" + str(form.cleaned_data))\n                description = form.cleaned_data[\"description\"]\n                manager.updateDescription(o_type, description)\n                rdict = {\"bad\": \"false\"}\n                return JsonResponse(rdict)\n            else:\n                d = dict()\n                for e in form.errors.items():\n                    d.update({e[0]: unicode(e[1])})\n                rdict = {\"bad\": \"true\", \"errs\": d}\n                return JsonResponse(rdict)\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"remove\":\n        # Handles removal of comment, tag from\n        # Object etc.\n        # E.g. image-123  or image-1|image-2\n        parents = request.POST[\"parent\"]\n        try:\n            manager.remove(parents.split(\"|\"))\n        except Exception as x:\n            logger.error(traceback.format_exc())\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n            return JsonResponse(rdict)\n\n        rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"removefromshare\":\n        image_id = request.POST.get(\"source\")\n        try:\n            manager.removeImage(image_id)\n        except Exception as x:\n            logger.error(traceback.format_exc())\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n            return JsonResponse(rdict)\n        rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"delete\":\n        # Handles delete of a file attached to object.\n        child = toBoolean(request.POST.get(\"child\"))\n        anns = toBoolean(request.POST.get(\"anns\"))\n        try:\n            handle = manager.deleteItem(child, anns)\n            request.session[\"callback\"][str(handle)] = {\n                \"job_type\": \"delete\",\n                \"delmany\": False,\n                \"did\": o_id,\n                \"dtype\": o_type,\n                \"status\": \"in progress\",\n                \"error\": 0,\n                \"dreport\": _formatReport(handle),\n                \"start_time\": datetime.datetime.now(),\n            }\n            request.session.modified = True\n        except Exception as x:\n            logger.error(\n                \"Failed to delete: %r\" % {\"did\": o_id, \"dtype\": o_type}, exc_info=True\n            )\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n        else:\n            rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"deletemany\":\n        # Handles multi-delete from jsTree.\n        object_ids = {\n            \"Image\": request.POST.getlist(\"image\"),\n            \"Dataset\": request.POST.getlist(\"dataset\"),\n            \"Project\": request.POST.getlist(\"project\"),\n            \"Annotation\": request.POST.getlist(\"tag\"),\n            \"Screen\": request.POST.getlist(\"screen\"),\n            \"Plate\": request.POST.getlist(\"plate\"),\n            \"Well\": request.POST.getlist(\"well\"),\n            \"PlateAcquisition\": request.POST.getlist(\"acquisition\"),\n        }\n        child = toBoolean(request.POST.get(\"child\"))\n        anns = toBoolean(request.POST.get(\"anns\"))\n        logger.debug(\n            \"Delete many: child? %s anns? %s object_ids %s\" % (child, anns, object_ids)\n        )\n        try:\n            for key, ids in object_ids.items():\n                if ids is not None and len(ids) > 0:\n                    handle = manager.deleteObjects(key, ids, child, anns)\n                    if key == \"PlateAcquisition\":\n                        key = \"Plate Run\"  # for nicer user message\n                    dMap = {\n                        \"job_type\": \"delete\",\n                        \"start_time\": datetime.datetime.now(),\n                        \"status\": \"in progress\",\n                        \"error\": 0,\n                        \"dreport\": _formatReport(handle),\n                        \"dtype\": key,\n                    }\n                    if len(ids) > 1:\n                        dMap[\"delmany\"] = len(ids)\n                        dMap[\"did\"] = ids\n                    else:\n                        dMap[\"delmany\"] = False\n                        dMap[\"did\"] = ids[0]\n                    request.session[\"callback\"][str(handle)] = dMap\n            request.session.modified = True\n        except Exception:\n            logger.error(\n                \"Failed to delete: %r\" % {\"did\": ids, \"dtype\": key}, exc_info=True\n            )\n            # Ajax error handling will allow user to submit bug report\n            raise\n        else:\n            rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    context[\"template\"] = template\n    return context\n\n\n@login_required(doConnectionCleanup=False)\ndef get_original_file(request, fileId, download=False, conn=None, **kwargs):\n    \"\"\"\n    Returns the specified original file as an http response. Used for\n    displaying text or png/jpeg etc files in browser\n    \"\"\"\n\n    # May be viewing results of a script run in a different group.\n    conn.SERVICE_OPTS.setOmeroGroup(-1)\n\n    orig_file = conn.getObject(\"OriginalFile\", fileId)\n    if orig_file is None:\n        return handlerInternalError(\n            request, \"Original File does not exist (id:%s).\" % (fileId)\n        )\n\n    rsp = ConnCleaningHttpResponse(orig_file.getFileInChunks(buf=settings.CHUNK_SIZE))\n    rsp.conn = conn\n    mimetype = orig_file.mimetype\n    if mimetype == \"text/x-python\":\n        mimetype = \"text/plain\"  # allows display in browser\n    rsp[\"Content-Type\"] = mimetype\n    rsp[\"Content-Length\"] = orig_file.getSize()\n\n    if download:\n        downloadName = orig_file.name.replace(\" \", \"_\")\n        downloadName = downloadName.replace(\",\", \".\")\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % downloadName\n    return rsp\n\n\n@login_required(doConnectionCleanup=False)\n@render_response()\ndef omero_table(request, file_id, mtype=None, conn=None, **kwargs):\n    \"\"\"\n    Download OMERO.table as CSV (streaming response) or return as HTML or json\n\n    Request parameters:\n    header: 'false' excludes the column names row if mtype is 'csv'\n    offset: table rows offset for pagination\n    limit: table rows limit for pagination\n    query: OMERO.table query for filtering rows\n\n    @param file_id:     OriginalFile ID\n    @param mtype:       None for html table or 'csv' or 'json'\n    @param conn:        BlitzGateway connection\n    \"\"\"\n\n    query = request.GET.get(\"query\", \"*\")\n    offset = get_long_or_default(request, \"offset\", 0)\n    limit = get_long_or_default(request, \"limit\", settings.PAGE)\n    iviewer_url = None\n    try:\n        iviewer_url = reverse(\"omero_iviewer_index\")\n    except NoReverseMatch:\n        pass\n\n    # Check if file exists since _table_query() doesn't check\n    file_id = long(file_id)\n    orig_file = conn.getObject(\"OriginalFile\", file_id)\n    if orig_file is None:\n        raise Http404(\"OriginalFile %s not found\" % file_id)\n\n    lazy = mtype == \"csv\"\n    context = webgateway_views._table_query(\n        request, file_id, conn=conn, query=query, offset=offset, limit=limit, lazy=lazy\n    )\n\n    if context.get(\"error\") or not context.get(\"data\"):\n        return JsonResponse(context)\n\n    # OR, return as csv or html\n    if mtype == \"csv\":\n        table_data = context.get(\"data\")\n        hide_header = request.GET.get(\"header\") == \"false\"\n\n        def csv_gen():\n            if not hide_header:\n                csv_cols = \",\".join(table_data.get(\"columns\"))\n                yield csv_cols\n            for rows in table_data.get(\"lazy_rows\"):\n                yield (\n                    \"\\n\" + \"\\n\".join([\",\".join([str(d) for d in row]) for row in rows])\n                )\n\n        downloadName = orig_file.name.replace(\" \", \"_\").replace(\",\", \".\")\n        downloadName = downloadName + \".csv\"\n\n        rsp = TableClosingHttpResponse(csv_gen(), content_type=\"text/csv\")\n        rsp.conn = conn\n        rsp.table = context.get(\"table\")\n        rsp[\"Content-Type\"] = \"application/force-download\"\n        # rsp['Content-Length'] = ann.getFileSize()\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % downloadName\n        return rsp\n\n    context[\"data\"][\"name\"] = orig_file.name\n    context[\"data\"][\"path\"] = orig_file.path\n    context[\"data\"][\"id\"] = file_id\n    context[\"meta\"][\"query\"] = query\n\n    # check if offset matches an integer page number:\n    if offset == 0 or offset / limit == offset // limit:\n        context[\"meta\"][\"page\"] = (offset // limit) + 1 if offset > 0 else 1\n\n    # pagination links\n    url = reverse(\"omero_table\", args=[file_id])\n    context[\"meta\"][\"url\"] = url\n    url += \"?limit=%s\" % limit\n    if query != \"*\":\n        url += \"&query=%s\" % query\n    if (offset + limit) < context[\"meta\"][\"totalCount\"]:\n        context[\"meta\"][\"next\"] = url + \"&offset=%s\" % (offset + limit)\n    if offset > 0:\n        context[\"meta\"][\"prev\"] = url + \"&offset=%s\" % (max(0, offset - limit))\n\n    # by default, return context as JSON data\n    if mtype is None:\n        context[\"template\"] = \"webclient/annotations/omero_table.html\"\n        context[\"iviewer_url\"] = iviewer_url\n        col_types = context[\"data\"][\"column_types\"]\n        if \"ImageColumn\" in col_types:\n            context[\"image_column_index\"] = col_types.index(\"ImageColumn\")\n        if \"WellColumn\" in col_types:\n            context[\"well_column_index\"] = col_types.index(\"WellColumn\")\n        if \"RoiColumn\" in col_types:\n            context[\"roi_column_index\"] = col_types.index(\"RoiColumn\")\n        # we don't use ShapeColumn type - just check name and LongColumn type...\n        # TODO: when ShapeColumn is supported, add handling to this code\n        cnames = [n.lower() for n in context[\"data\"][\"columns\"]]\n        if \"shape\" in cnames and col_types[cnames.index(\"shape\")] == \"LongColumn\":\n            context[\"shape_column_index\"] = cnames.index(\"shape\")\n        # provide example queries - pick first DoubleColumn...\n        for idx, c_type in enumerate(col_types):\n            if c_type in (\"DoubleColumn\", \"LongColumn\"):\n                col_name = context[\"data\"][\"columns\"][idx]\n                # find first few non-empty cells...\n                vals = []\n                for row in context[\"data\"][\"rows\"]:\n                    if row[idx]:\n                        vals.append(row[idx])\n                    if len(vals) > 3:\n                        break\n                if \" \" in col_name or len(vals) < 2:\n                    # Don't support queries on columns with spaces\n                    continue\n                context[\"example_column\"] = col_name\n                context[\"example_min_value\"] = min(vals)\n                context[\"example_max_value\"] = max(vals)\n                break\n\n    return context\n\n\n@login_required(doConnectionCleanup=False)\ndef download_annotation(request, annId, conn=None, **kwargs):\n    \"\"\"Returns the file annotation as an http response for download\"\"\"\n    ann = conn.getObject(\"FileAnnotation\", annId)\n    if ann is None:\n        return handlerInternalError(\n            request, \"FileAnnotation does not exist (id:%s).\" % (annId)\n        )\n\n    rsp = ConnCleaningHttpResponse(ann.getFileInChunks(buf=settings.CHUNK_SIZE))\n    rsp.conn = conn\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    rsp[\"Content-Length\"] = ann.getFileSize()\n    rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % (\n        ann.getFileName().replace(\" \", \"_\")\n    )\n    return rsp\n\n\n@login_required()\ndef download_orig_metadata(request, imageId, conn=None, **kwargs):\n    \"\"\"Downloads the 'Original Metadata' as a text file\"\"\"\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is None:\n        raise Http404(\"No Image found with ID %s\" % imageId)\n\n    om = image.loadOriginalMetadata()\n\n    txtLines = [\"[Global Metadata]\"]\n    txtLines.extend([\"%s=%s\" % (kv[0], kv[1]) for kv in om[1]])\n\n    txtLines.append(\"[Series Metadata]\")\n    txtLines.extend([\"%s=%s\" % (kv[0], kv[1]) for kv in om[2]])\n    rspText = \"\\n\".join(txtLines)\n\n    rsp = HttpResponse(rspText)\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    rsp[\"Content-Length\"] = len(rspText)\n    rsp[\"Content-Disposition\"] = \"attachment; filename=Original_Metadata.txt\"\n    return rsp\n\n\n@login_required()\n@render_response()\ndef download_placeholder(request, conn=None, **kwargs):\n    \"\"\"\n    Page displays a simple \"Preparing download...\" message and redirects to\n    the 'url'.\n    We construct the url and query string from request: 'url' and 'ids'.\n    \"\"\"\n\n    format = request.GET.get(\"format\", None)\n    if format is not None:\n        download_url = reverse(\"download_as\")\n        zipName = \"Export_as_%s\" % format\n    else:\n        download_url = reverse(\"archived_files\")\n        zipName = \"OriginalFileDownload\"\n    targetIds = request.GET.get(\"ids\")  # E.g. image-1|image-2\n    defaultName = request.GET.get(\"name\", zipName)  # default zip name\n    defaultName = os.path.basename(defaultName)  # remove path\n\n    if targetIds is None:\n        raise Http404(\"No IDs specified. E.g. ?ids=image-1|image-2\")\n\n    ids = targetIds.split(\"|\")\n\n    fileLists = []\n    fileCount = 0\n    filesTotalSize = 0\n    # If we're downloading originals, list original files so user can\n    # download individual files.\n    if format is None:\n        imgIds = []\n        wellIds = []\n        for i in ids:\n            if i.split(\"-\")[0] == \"image\":\n                imgIds.append(i.split(\"-\")[1])\n            elif i.split(\"-\")[0] == \"well\":\n                wellIds.append(i.split(\"-\")[1])\n\n        images = []\n        # Get images...\n        if imgIds:\n            images = list(conn.getObjects(\"Image\", imgIds))\n\n        if len(images) == 0:\n            raise Http404(\"No images found.\")\n\n        # Have a list of files per fileset (or per image without fileset)\n        fsIds = set()\n        fileIds = set()\n        for image in images:\n            fs = image.getFileset()\n            if fs is not None:\n                # Make sure we've not processed this fileset before.\n                if fs.id in fsIds:\n                    continue\n                fsIds.add(fs.id)\n            files = list(image.getImportedImageFiles())\n            fList = []\n            for f in files:\n                if f.id in fileIds:\n                    continue\n                fileIds.add(f.id)\n                fList.append({\"id\": f.id, \"name\": f.name, \"size\": f.getSize()})\n                filesTotalSize += f.getSize()\n            if len(fList) > 0:\n                fileLists.append(fList)\n        fileCount = sum([len(fList) for fList in fileLists])\n    else:\n        # E.g. JPEG/PNG - 1 file per image\n        fileCount = len(ids)\n\n    query = \"&\".join([_id.replace(\"-\", \"=\") for _id in ids])\n    download_url = download_url + \"?\" + query\n    if format is not None:\n        download_url = download_url + \"&format=%s\" % format\n\n    context = {\n        \"template\": \"webclient/annotations/download_placeholder.html\",\n        \"url\": download_url,\n        \"defaultName\": defaultName,\n        \"fileLists\": fileLists,\n        \"fileCount\": fileCount,\n        \"filesTotalSize\": filesTotalSize,\n    }\n    if filesTotalSize > settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE:\n        context[\"downloadTooLarge\"] = settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE\n    return context\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef load_calendar(request, year=None, month=None, conn=None, **kwargs):\n    \"\"\"\n    Loads the calendar which is displayed in the left panel of the history\n    page.\n    Shows current month by default. Filter by experimenter\n    \"\"\"\n\n    template = \"webclient/history/calendar.html\"\n    filter_user_id = request.session.get(\"user_id\")\n\n    if year is not None and month is not None:\n        controller = BaseCalendar(conn=conn, year=year, month=month, eid=filter_user_id)\n    else:\n        today = datetime.datetime.today()\n        controller = BaseCalendar(\n            conn=conn, year=today.year, month=today.month, eid=filter_user_id\n        )\n    controller.create_calendar()\n\n    context = {\"controller\": controller}\n\n    context[\"template\"] = template\n    return context\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef load_history(request, year, month, day, conn=None, **kwargs):\n    \"\"\"The data for a particular date that is loaded into the center panel\"\"\"\n\n    if year is None or month is None or day is None:\n        raise Http404(\"Year, month, and day are required\")\n\n    template = \"webclient/history/history_details.html\"\n\n    # get page\n    page = int(request.GET.get(\"page\", 1))\n\n    filter_user_id = request.session.get(\"user_id\")\n    controller = BaseCalendar(\n        conn=conn, year=year, month=month, day=day, eid=filter_user_id\n    )\n    controller.get_items(page)\n\n    context = {\"controller\": controller}\n    context[\"template\"] = template\n    return context\n\n\ndef getObjectUrl(conn, obj):\n    \"\"\"\n    This provides a url to browse to the specified omero.model.ObjectI P/D/I,\n    S/P, FileAnnotation etc. used to display results from the scripting\n    service\n    E.g webclient/userdata/?path=image-12601\n    If the object is a file annotation, try to browse to the parent P/D/I\n    \"\"\"\n    base_url = reverse(viewname=\"load_template\", args=[\"userdata\"])\n\n    # if we have a File Annotation, then we want our URL to be for the parent\n    # object...\n    if isinstance(obj, omero.model.FileAnnotationI):\n        fa = conn.getObject(\"Annotation\", obj.id.val)\n        for ptype in [\"project\", \"dataset\", \"image\"]:\n            links = list(fa.getParentLinks(ptype))\n            if len(links) > 0:\n                obj = links[0].parent\n                break\n\n    if obj.__class__.__name__ in (\n        \"ImageI\",\n        \"DatasetI\",\n        \"ProjectI\",\n        \"ScreenI\",\n        \"PlateI\",\n        \"WellI\",\n    ):\n        otype = obj.__class__.__name__[:-1].lower()\n        base_url += \"?show=%s-%s\" % (otype, obj.id.val)\n        return base_url\n\n\n######################\n# Activities window & Progressbar\ndef update_callback(request, cbString, **kwargs):\n    \"\"\"Update a callback handle with  key/value pairs\"\"\"\n    for key, value in kwargs.items():\n        request.session[\"callback\"][cbString][key] = value\n\n\n@login_required()\n@render_response()\ndef activities(request, conn=None, **kwargs):\n    \"\"\"\n    This refreshes callback handles (delete, scripts, chgrp etc) and provides\n    html to update Activities window & Progressbar.\n    The returned html contains details for ALL callbacks in web session,\n    regardless of their status.\n    We also add counts of jobs, failures and 'in progress' to update status\n    bar.\n    \"\"\"\n\n    in_progress = 0\n    failure = 0\n    new_results = []\n    _purgeCallback(request)\n\n    # If we have a jobId (not added to request.session) just process it...\n    # ONLY used for chgrp/chown dry-run.\n    jobId = request.GET.get(\"jobId\", None)\n    if jobId is not None:\n        jobId = str(jobId)\n        try:\n            prx = omero.cmd.HandlePrx.checkedCast(conn.c.ic.stringToProxy(jobId))\n            status = prx.getStatus()\n            logger.debug(\"job status: %s\", status)\n            rsp = prx.getResponse()\n            if rsp is not None:\n                rv = graphResponseMarshal(conn, rsp)\n                rv[\"finished\"] = True\n            else:\n                rv = {\"finished\": False}\n            rv[\"status\"] = {\n                \"currentStep\": status.currentStep,\n                \"steps\": status.steps,\n                \"startTime\": status.startTime,\n                \"stopTime\": status.stopTime,\n            }\n        except IceException:\n            rv = {\"finished\": True}\n        return rv\n\n    elif request.method == \"DELETE\":\n        try:\n            json_data = json.loads(request.body)\n        except TypeError:\n            # for Python 3.5\n            json_data = json.loads(bytes_to_native_str(request.body))\n        jobId = json_data.get(\"jobId\", None)\n        if jobId is not None:\n            jobId = str(jobId)\n            rv = {\"jobId\": jobId}\n            try:\n                prx = omero.cmd.HandlePrx.checkedCast(conn.c.ic.stringToProxy(jobId))\n                status = prx.getStatus()\n                logger.debug(\"pre-cancel() job status: %s\", status)\n                rv[\"status\"] = {\n                    \"currentStep\": status.currentStep,\n                    \"steps\": status.steps,\n                    \"startTime\": status.startTime,\n                    \"stopTime\": status.stopTime,\n                }\n                prx.cancel()\n            except omero.LockTimeout:\n                # expected that it will take > 5 seconds to cancel\n                logger.info(\"Timeout on prx.cancel()\")\n        return rv\n\n    # test each callback for failure, errors, completion, results etc\n    for cbString in request.session.get(\"callback\").keys():\n        callbackDict = request.session[\"callback\"][cbString]\n        job_type = callbackDict[\"job_type\"]\n\n        status = callbackDict[\"status\"]\n        if status == \"failed\":\n            failure += 1\n\n        request.session.modified = True\n\n        # update chgrp / chown\n        if job_type in (\"chgrp\", \"chown\"):\n            if status not in (\"failed\", \"finished\"):\n                rsp = None\n                try:\n                    prx = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    rsp = prx.getResponse()\n                    close_handle = False\n                    try:\n                        # if response is None, then we're still in progress,\n                        # otherwise...\n                        if rsp is not None:\n                            close_handle = True\n                            new_results.append(cbString)\n                            if isinstance(rsp, omero.cmd.ERR):\n                                rsp_params = \", \".join(\n                                    [\n                                        \"%s: %s\" % (k, v)\n                                        for k, v in rsp.parameters.items()\n                                    ]\n                                )\n                                logger.error(\n                                    \"%s failed with: %s\" % (job_type, rsp_params)\n                                )\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"failed\",\n                                    report=\"%s %s\" % (rsp.name, rsp_params),\n                                    error=1,\n                                )\n                            elif isinstance(rsp, omero.cmd.OK):\n                                update_callback(request, cbString, status=\"finished\")\n                        else:\n                            in_progress += 1\n                    finally:\n                        prx.close(close_handle)\n                except Exception:\n                    logger.info(\n                        \"Activities %s handle not found: %s\" % (job_type, cbString)\n                    )\n                    continue\n        elif job_type == \"send_email\":\n            if status not in (\"failed\", \"finished\"):\n                rsp = None\n                try:\n                    prx = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    callback = omero.callbacks.CmdCallbackI(\n                        conn.c, prx, foreground_poll=True\n                    )\n                    rsp = callback.getResponse()\n                    close_handle = False\n                    try:\n                        # if response is None, then we're still in progress,\n                        # otherwise...\n                        if rsp is not None:\n                            close_handle = True\n                            new_results.append(cbString)\n\n                            if isinstance(rsp, omero.cmd.ERR):\n                                rsp_params = \", \".join(\n                                    [\n                                        \"%s: %s\" % (k, v)\n                                        for k, v in rsp.parameters.items()\n                                    ]\n                                )\n                                logger.error(\"send_email failed with: %s\" % rsp_params)\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"failed\",\n                                    report={\"error\": rsp_params},\n                                    error=1,\n                                )\n                            else:\n                                total = (\n                                    rsp.success\n                                    + len(rsp.invalidusers)\n                                    + len(rsp.invalidemails)\n                                )\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"finished\",\n                                    rsp={\"success\": rsp.success, \"total\": total},\n                                )\n                                if (\n                                    len(rsp.invalidusers) > 0\n                                    or len(rsp.invalidemails) > 0\n                                ):\n                                    invalidusers = [\n                                        e.getFullName()\n                                        for e in list(\n                                            conn.getObjects(\n                                                \"Experimenter\", rsp.invalidusers\n                                            )\n                                        )\n                                    ]\n                                    update_callback(\n                                        request,\n                                        cbString,\n                                        report={\n                                            \"invalidusers\": invalidusers,\n                                            \"invalidemails\": rsp.invalidemails,\n                                        },\n                                    )\n                        else:\n                            in_progress += 1\n                    finally:\n                        callback.close(close_handle)\n                except Exception:\n                    logger.error(traceback.format_exc())\n                    logger.info(\"Activities send_email handle not found: %s\" % cbString)\n\n        # update delete\n        elif job_type == \"delete\":\n            if status not in (\"failed\", \"finished\"):\n                try:\n                    handle = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    cb = omero.callbacks.CmdCallbackI(\n                        conn.c, handle, foreground_poll=True\n                    )\n                    rsp = cb.getResponse()\n                    close_handle = False\n                    try:\n                        if not rsp:  # Response not available\n                            update_callback(\n                                request,\n                                cbString,\n                                error=0,\n                                status=\"in progress\",\n                                dreport=_formatReport(handle),\n                            )\n                            in_progress += 1\n                        else:  # Response available\n                            close_handle = True\n                            new_results.append(cbString)\n                            rsp = cb.getResponse()\n                            err = isinstance(rsp, omero.cmd.ERR)\n                            if err:\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    error=1,\n                                    status=\"failed\",\n                                    dreport=_formatReport(handle),\n                                )\n                                failure += 1\n                            else:\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    error=0,\n                                    status=\"finished\",\n                                    dreport=_formatReport(handle),\n                                )\n                    finally:\n                        cb.close(close_handle)\n                except Ice.ObjectNotExistException:\n                    update_callback(\n                        request, cbString, error=0, status=\"finished\", dreport=None\n                    )\n                except Exception as x:\n                    logger.error(traceback.format_exc())\n                    logger.error(\"Status job '%s'error:\" % cbString)\n                    update_callback(\n                        request, cbString, error=1, status=\"failed\", dreport=str(x)\n                    )\n                    failure += 1\n\n        # update scripts\n        elif job_type == \"script\":\n            # if error on runScript, the cbString is not a ProcessCallback...\n            if not cbString.startswith(\"ProcessCallback\"):\n                continue  # ignore\n            if status not in (\"failed\", \"finished\"):\n                logger.info(\"Check callback on script: %s\" % cbString)\n                try:\n                    proc = omero.grid.ScriptProcessPrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                except IceException:\n                    update_callback(\n                        request,\n                        cbString,\n                        status=\"failed\",\n                        Message=\"No process found for job\",\n                        error=1,\n                    )\n                    continue\n                cb = omero.scripts.ProcessCallbackI(conn.c, proc)\n                # check if we get something back from the handle...\n                if cb.block(0):  # ms.\n                    cb.close()\n                    try:\n                        # we can only retrieve this ONCE - must save results\n                        results = proc.getResults(0, conn.SERVICE_OPTS)\n                        update_callback(request, cbString, status=\"finished\")\n                        new_results.append(cbString)\n                    except Exception:\n                        update_callback(\n                            request,\n                            cbString,\n                            status=\"finished\",\n                            Message=\"Failed to get results\",\n                        )\n                        logger.info(\"Failed on proc.getResults() for OMERO.script\")\n                        continue\n                    # value could be rstring, rlong, robject\n                    rMap = {}\n                    for key, value in results.items():\n                        v = value.getValue()\n                        if key in (\"stdout\", \"stderr\", \"Message\"):\n                            if key in (\"stderr\", \"stdout\"):\n                                # just save the id of original file\n                                v = v.id.val\n                            update_kwargs = {key: v}\n                            update_callback(request, cbString, **update_kwargs)\n                        else:\n                            if hasattr(v, \"id\"):\n                                # do we have an object (ImageI,\n                                # FileAnnotationI etc)\n                                obj_data = {\n                                    \"id\": v.id.val,\n                                    \"type\": v.__class__.__name__[:-1],\n                                }\n                                obj_data[\"browse_url\"] = getObjectUrl(conn, v)\n                                if v.isLoaded() and hasattr(v, \"file\"):\n                                    # try:\n                                    mimetypes = {\n                                        \"image/png\": \"png\",\n                                        \"image/jpeg\": \"jpeg\",\n                                        \"text/plain\": \"text\",\n                                    }\n                                    if v.file.mimetype.val in mimetypes:\n                                        obj_data[\"fileType\"] = mimetypes[\n                                            v.file.mimetype.val\n                                        ]\n                                        obj_data[\"fileId\"] = v.file.id.val\n                                    obj_data[\"name\"] = v.file.name.val\n                                    # except Exception:\n                                    #    pass\n                                if v.isLoaded() and hasattr(v, \"name\"):\n                                    # E.g Image, OriginalFile etc\n                                    name = unwrap(v.name)\n                                    if name is not None:\n                                        # E.g. FileAnnotation has null name\n                                        obj_data[\"name\"] = name\n                                rMap[key] = obj_data\n                            else:\n                                rMap[key] = unwrap(v)\n                    update_callback(request, cbString, results=rMap)\n                else:\n                    in_progress += 1\n\n    # having updated the request.session, we can now prepare the data for http\n    # response\n    rv = {}\n    for cbString in request.session.get(\"callback\").keys():\n        # make a copy of the map in session, so that we can replace non\n        # json-compatible objects, without modifying session\n        rv[cbString] = copy.copy(request.session[\"callback\"][cbString])\n\n    # return json (used for testing)\n    if \"template\" in kwargs and kwargs[\"template\"] == \"json\":\n        for cbString in request.session.get(\"callback\").keys():\n            rv[cbString][\"start_time\"] = str(\n                request.session[\"callback\"][cbString][\"start_time\"]\n            )\n        rv[\"inprogress\"] = in_progress\n        rv[\"failure\"] = failure\n        rv[\"jobs\"] = len(request.session[\"callback\"])\n        return JsonResponse(rv)  # json\n\n    jobs = []\n    new_errors = False\n    for key, data in rv.items():\n        # E.g. key: ProcessCallback/39f77932-c447-40d8-8f99-910b5a531a25 -t:tcp -h 10.211.55.2 -p 54727:tcp -h 10.37.129.2 -p 54727:tcp -h 10.12.2.21 -p 54727  # noqa\n        # create id we can use as html id,\n        # E.g. 39f77932-c447-40d8-8f99-910b5a531a25\n        if len(key.split(\" \")) > 0:\n            htmlId = key.split(\" \")[0]\n            if len(htmlId.split(\"/\")) > 1:\n                htmlId = htmlId.split(\"/\")[1]\n        rv[key][\"id\"] = htmlId\n        rv[key][\"key\"] = key\n        if key in new_results:\n            rv[key][\"new\"] = True\n            if \"error\" in data and data[\"error\"] > 0:\n                new_errors = True\n        jobs.append(rv[key])\n\n    jobs.sort(key=lambda x: x[\"start_time\"], reverse=True)\n    context = {\n        \"sizeOfJobs\": len(request.session[\"callback\"]),\n        \"jobs\": jobs,\n        \"inprogress\": in_progress,\n        \"new_results\": len(new_results),\n        \"new_errors\": new_errors,\n        \"failure\": failure,\n    }\n\n    context[\"template\"] = \"webclient/activities/activitiesContent.html\"\n    return context\n\n\n@login_required()\ndef activities_update(request, action, **kwargs):\n    \"\"\"\n    If the above 'action' == 'clean' then we clear jobs from\n    request.session['callback'] either a single job (if 'jobKey' is specified\n    in POST) or all jobs (apart from those in progress)\n    \"\"\"\n\n    request.session.modified = True\n\n    if action == \"clean\":\n        if \"jobKey\" in request.POST:\n            jobId = request.POST.get(\"jobKey\")\n            rv = {}\n            if jobId in request.session[\"callback\"]:\n                del request.session[\"callback\"][jobId]\n                request.session.modified = True\n                rv[\"removed\"] = True\n            else:\n                rv[\"removed\"] = False\n            return JsonResponse(rv)\n        else:\n            jobs = list(request.session[\"callback\"].items())\n            for key, data in jobs:\n                if data[\"status\"] != \"in progress\":\n                    del request.session[\"callback\"][key]\n    return HttpResponse(\"OK\")\n\n\n##############################################################################\n# User Photo\n\n\n@login_required()\ndef avatar(request, oid=None, conn=None, **kwargs):\n    \"\"\"Returns the experimenter's photo\"\"\"\n    photo = conn.getExperimenterPhoto(oid)\n    return HttpResponse(photo, content_type=\"image/jpeg\")\n\n\n##############################################################################\n# webgateway extention\n\n\n@login_required()\ndef image_viewer(request, iid, share_id=None, **kwargs):\n    \"\"\"Delegates to webgateway, using share connection if appropriate\"\"\"\n    kwargs[\"viewport_server\"] = (\n        share_id is not None and reverse(\"webindex\") + share_id or reverse(\"webindex\")\n    )\n    # remove any trailing slash\n    kwargs[\"viewport_server\"] = kwargs[\"viewport_server\"].rstrip(\"/\")\n    return webgateway_views.full_viewer(request, iid, **kwargs)\n\n\n##############################################################################\n# scripting service....\n@login_required()\n@render_response()\ndef list_scripts(request, conn=None, **kwargs):\n    \"\"\"\n    List the available scripts - Just officical scripts for now\n\n    If all scripts are under a single top-level directory, this is\n    removed by default. To prevent this, use ?full_path=true\n    \"\"\"\n    scriptService = conn.getScriptService()\n    scripts = scriptService.getScripts()\n\n    # group scripts into 'folders' (path), named by parent folder name\n    scriptMenu = {}\n    scripts_to_ignore = (\n        request.session.get(\"server_settings\", {})\n        .get(\"scripts_to_ignore\", \"\")\n        .split(\",\")\n    )\n    for s in scripts:\n        scriptId = s.id.val\n        path = s.path.val\n        name = s.name.val\n        fullpath = os.path.join(path, name)\n        if fullpath in scripts_to_ignore:\n            logger.info(\"Ignoring script %r\" % fullpath)\n            continue\n\n        # We want to build a hierarchical <ul> <li> structure\n        # Each <ul> is a {}, each <li> is either a script 'name': <id> or\n        # directory 'name': {ul}\n\n        ul = scriptMenu\n        dirs = fullpath.split(os.path.sep)\n        for li, d in enumerate(dirs):\n            if len(d) == 0:\n                continue\n            if d not in ul:\n                # if last component in path:\n                if li + 1 == len(dirs):\n                    ul[d] = scriptId\n                else:\n                    ul[d] = {}\n            ul = ul[d]\n\n    # convert <ul> maps into lists and sort\n\n    def ul_to_list(ul):\n        dir_list = []\n        for name, value in ul.items():\n            if isinstance(value, dict):\n                # value is a directory\n                dir_list.append({\"name\": name, \"ul\": ul_to_list(value)})\n            else:\n                dir_list.append({\"name\": name, \"id\": value})\n        dir_list.sort(key=lambda x: x[\"name\"].lower())\n        return dir_list\n\n    scriptList = ul_to_list(scriptMenu)\n\n    # If we have a single top-level directory, we can skip it\n    if not request.GET.get(\"full_path\") and len(scriptList) == 1:\n        scriptList = scriptList[0][\"ul\"]\n\n    return scriptList\n\n\n@login_required()\n@render_response()\ndef script_ui(request, scriptId, conn=None, **kwargs):\n    \"\"\"\n    Generates an html form for the parameters of a defined script.\n    \"\"\"\n    scriptService = conn.getScriptService()\n\n    try:\n        params = scriptService.getParams(long(scriptId))\n    except Exception as ex:\n        if ex.message.lower().startswith(\"no processor available\"):\n            return {\n                \"template\": \"webclient/scripts/no_processor.html\",\n                \"scriptId\": scriptId,\n            }\n        raise ex\n    if params is None:\n        return HttpResponse()\n\n    paramData = {}\n\n    paramData[\"id\"] = long(scriptId)\n    paramData[\"name\"] = params.name.replace(\"_\", \" \")\n    paramData[\"description\"] = params.description\n    paramData[\"authors\"] = \", \".join([a for a in params.authors])\n    paramData[\"contact\"] = params.contact\n    paramData[\"version\"] = params.version\n    paramData[\"institutions\"] = \", \".join([i for i in params.institutions])\n\n    inputs = []  # use a list so we can sort by 'grouping'\n    Data_TypeParam = None\n    IDsParam = None\n    for key, param in params.inputs.items():\n        i = {}\n        i[\"name\"] = key.replace(\"_\", \" \")\n        i[\"key\"] = key\n        if not param.optional:\n            i[\"required\"] = True\n        i[\"description\"] = param.description\n        if param.min:\n            i[\"min\"] = str(param.min.getValue())\n        if param.max:\n            i[\"max\"] = str(param.max.getValue())\n        if param.values:\n            i[\"options\"] = [v.getValue() for v in param.values.getValue()]\n        if param.useDefault:\n            i[\"default\"] = unwrap(param.prototype)\n            if isinstance(i[\"default\"], omero.model.IObject):\n                i[\"default\"] = None\n        pt = unwrap(param.prototype)\n        if pt.__class__.__name__ == \"dict\":\n            i[\"map\"] = True\n        elif pt.__class__.__name__ == \"list\":\n            i[\"list\"] = True\n            if \"default\" in i:\n                i[\"default\"] = \",\".join([str(d) for d in i[\"default\"]])\n        elif isinstance(pt, bool):\n            i[\"boolean\"] = True\n        elif isinstance(pt, int) or isinstance(pt, long):\n            # will stop the user entering anything other than numbers.\n            i[\"number\"] = \"number\"\n        elif isinstance(pt, float):\n            i[\"number\"] = \"float\"\n\n        # if we got a value for this key in the page request, use this as\n        # default\n        if request.GET.get(key, None) is not None:\n            i[\"default\"] = request.GET.get(key, None)\n\n        # E.g  \"\"  (string) or [0] (int list) or 0.0 (float)\n        i[\"prototype\"] = unwrap(param.prototype)\n        i[\"grouping\"] = param.grouping\n        inputs.append(i)\n\n        if key == \"IDs\":\n            IDsParam = i  # remember these...\n        if key == \"Data_Type\":\n            Data_TypeParam = i\n    inputs.sort(key=lambda i: i[\"grouping\"])\n\n    # if we have Data_Type param - use the request parameters to populate IDs\n    if (\n        Data_TypeParam is not None\n        and IDsParam is not None\n        and \"options\" in Data_TypeParam\n    ):\n        IDsParam[\"default\"] = \"\"\n        for dtype in Data_TypeParam[\"options\"]:\n            if request.GET.get(dtype, None) is not None:\n                Data_TypeParam[\"default\"] = dtype\n                IDsParam[\"default\"] = request.GET.get(dtype, \"\")\n                break  # only use the first match\n        # if we've not found a match, check whether we have \"Well\" selected\n        if len(IDsParam[\"default\"]) == 0 and request.GET.get(\"Well\", None) is not None:\n            if \"Image\" in Data_TypeParam[\"options\"]:\n                wellIds = [long(j) for j in request.GET.get(\"Well\", None).split(\",\")]\n                wellIdx = 0\n                try:\n                    wellIdx = int(request.GET.get(\"Index\", 0))\n                except Exception:\n                    pass\n                wells = conn.getObjects(\"Well\", wellIds)\n                imgIds = [str(w.getImage(wellIdx).getId()) for w in wells]\n                Data_TypeParam[\"default\"] = \"Image\"\n                IDsParam[\"default\"] = \",\".join(imgIds)\n\n    # try to determine hierarchies in the groupings - ONLY handle 1 hierarchy\n    # level now (not recursive!)\n    for i in range(len(inputs)):\n        if len(inputs) <= i:\n            # we may remove items from inputs as we go - need to check\n            break\n        param = inputs[i]\n        grouping = param[\"grouping\"]  # E.g  03\n        param[\"children\"] = list()\n        while len(inputs) > i + 1:\n            nextGrp = inputs[i + 1][\"grouping\"]  # E.g. 03.1\n            if nextGrp.split(\".\")[0] == grouping:\n                param[\"children\"].append(inputs[i + 1])\n                inputs.pop(i + 1)\n            else:\n                break\n\n    paramData[\"inputs\"] = inputs\n\n    return {\n        \"template\": \"webclient/scripts/script_ui.html\",\n        \"paramData\": paramData,\n        \"scriptId\": scriptId,\n    }\n\n\n@login_required()\n@render_response()\ndef figure_script(request, scriptName, conn=None, **kwargs):\n    \"\"\"\n    Show a UI for running figure scripts\n    \"\"\"\n\n    imageIds = request.GET.get(\"Image\", None)  # comma - delimited list\n    datasetIds = request.GET.get(\"Dataset\", None)\n    wellIds = request.GET.get(\"Well\", None)\n\n    if wellIds is not None:\n        wellIds = [long(i) for i in wellIds.split(\",\")]\n        wells = conn.getObjects(\"Well\", wellIds)\n        wellIdx = getIntOrDefault(request, \"Index\", 0)\n        imageIds = [str(w.getImage(wellIdx).getId()) for w in wells]\n        imageIds = \",\".join(imageIds)\n    if imageIds is None and datasetIds is None:\n        return HttpResponse(\n            \"Need to specify /?Image=1,2 or /?Dataset=1,2 or /?Well=1,2\"\n        )\n\n    def validateIds(dtype, ids):\n        ints = [int(oid) for oid in ids.split(\",\")]\n        validObjs = {}\n        for obj in conn.getObjects(dtype, ints):\n            validObjs[obj.id] = obj\n        filteredIds = [iid for iid in ints if iid in validObjs.keys()]\n        if len(filteredIds) == 0:\n            raise Http404(\"No %ss found with IDs %s\" % (dtype, ids))\n        else:\n            # Now we can specify group context - All should be same group\n            gid = list(validObjs.values())[0].getDetails().group.id.val\n            conn.SERVICE_OPTS.setOmeroGroup(gid)\n        return filteredIds, validObjs\n\n    context = {}\n\n    if imageIds is not None:\n        imageIds, validImages = validateIds(\"Image\", imageIds)\n        context[\"idString\"] = \",\".join([str(i) for i in imageIds])\n        context[\"dtype\"] = \"Image\"\n    if datasetIds is not None:\n        datasetIds, validDatasets = validateIds(\"Dataset\", datasetIds)\n        context[\"idString\"] = \",\".join([str(i) for i in datasetIds])\n        context[\"dtype\"] = \"Dataset\"\n\n    if scriptName == \"SplitView\":\n        scriptPath = \"/omero/figure_scripts/Split_View_Figure.py\"\n        template = \"webclient/scripts/split_view_figure.html\"\n        # Lookup Tags & Datasets (for row labels)\n        imgDict = []  # A list of data about each image.\n        for iId in imageIds:\n            data = {\"id\": iId}\n            img = validImages[iId]\n            data[\"name\"] = img.getName()\n            tags = [\n                ann.getTextValue()\n                for ann in img.listAnnotations()\n                if ann._obj.__class__ == omero.model.TagAnnotationI\n            ]\n            data[\"tags\"] = tags\n            data[\"datasets\"] = [d.getName() for d in img.listParents()]\n            imgDict.append(data)\n\n        # Use the first image as a reference\n        image = validImages[imageIds[0]]\n        context[\"imgDict\"] = imgDict\n        context[\"image\"] = image\n        context[\"channels\"] = image.getChannels()\n\n    elif scriptName == \"Thumbnail\":\n        scriptPath = \"/omero/figure_scripts/Thumbnail_Figure.py\"\n        template = \"webclient/scripts/thumbnail_figure.html\"\n\n        def loadImageTags(imageIds):\n            tagLinks = conn.getAnnotationLinks(\"Image\", parent_ids=imageIds)\n            linkMap = {}  # group tags. {imageId: [tags]}\n            tagMap = {}\n            for iId in imageIds:\n                linkMap[iId] = []\n            for link in tagLinks:\n                c = link.getChild()\n                if c._obj.__class__ == omero.model.TagAnnotationI:\n                    tagMap[c.id] = c\n                    linkMap[link.getParent().id].append(c)\n            imageTags = []\n            for iId in imageIds:\n                imageTags.append({\"id\": iId, \"tags\": linkMap[iId]})\n            tags = []\n            for tId, t in tagMap.items():\n                tags.append(t)\n            return imageTags, tags\n\n        thumbSets = []  # multiple collections of images\n        tags = []\n        figureName = \"Thumbnail_Figure\"\n        if datasetIds is not None:\n            for d in conn.getObjects(\"Dataset\", datasetIds):\n                imgIds = [i.id for i in d.listChildren()]\n                imageTags, ts = loadImageTags(imgIds)\n                thumbSets.append({\"name\": d.getName(), \"imageTags\": imageTags})\n                tags.extend(ts)\n            figureName = thumbSets[0][\"name\"]\n        else:\n            imageTags, ts = loadImageTags(imageIds)\n            thumbSets.append({\"name\": \"images\", \"imageTags\": imageTags})\n            tags.extend(ts)\n            parent = conn.getObject(\"Image\", imageIds[0]).getParent()\n            figureName = parent.getName() or \"Thumbnail Figure\"\n            context[\"parent_id\"] = parent.getId()\n        uniqueTagIds = set()  # remove duplicates\n        uniqueTags = []\n        for t in tags:\n            if t.id not in uniqueTagIds:\n                uniqueTags.append(t)\n                uniqueTagIds.add(t.id)\n        uniqueTags.sort(key=lambda x: x.getTextValue().lower())\n        context[\"thumbSets\"] = thumbSets\n        context[\"tags\"] = uniqueTags\n        context[\"figureName\"] = figureName.replace(\" \", \"_\")\n\n    elif scriptName == \"MakeMovie\":\n        scriptPath = \"/omero/export_scripts/Make_Movie.py\"\n        template = \"webclient/scripts/make_movie.html\"\n\n        # expect to run on a single image at a time\n        image = conn.getObject(\"Image\", imageIds[0])\n        # remove extension (if 3 chars or less)\n        movieName = image.getName().rsplit(\".\", 1)\n        if len(movieName) > 1 and len(movieName[1]) > 3:\n            movieName = \".\".join(movieName)\n        else:\n            movieName = movieName[0]\n        # make sure name is not a path\n        context[\"movieName\"] = os.path.basename(movieName)\n        chs = []\n        for c in image.getChannels():\n            chs.append(\n                {\n                    \"active\": c.isActive(),\n                    \"color\": c.getColor().getHtml(),\n                    \"label\": c.getLabel(),\n                }\n            )\n        context[\"channels\"] = chs\n        context[\"sizeT\"] = image.getSizeT()\n        context[\"sizeZ\"] = image.getSizeZ()\n\n    scriptService = conn.getScriptService()\n    scriptId = scriptService.getScriptID(scriptPath)\n    if scriptId < 0:\n        raise AttributeError(\"No script found for path '%s'\" % scriptPath)\n\n    context[\"template\"] = template\n    context[\"scriptId\"] = scriptId\n    return context\n\n\n@login_required()\n@render_response()\ndef fileset_check(request, action, conn=None, **kwargs):\n    \"\"\"\n    Check whether Images / Datasets etc contain partial Multi-image filesets.\n    Used by chgrp or delete dialogs to test whether we can perform this\n    'action'.\n    \"\"\"\n    dtypeIds = {}\n    for dtype in (\"Image\", \"Dataset\", \"Project\"):\n        ids = request.GET.get(dtype, None)\n        if ids is not None:\n            dtypeIds[dtype] = [int(i) for i in ids.split(\",\")]\n    splitFilesets = conn.getContainerService().getImagesBySplitFilesets(\n        dtypeIds, None, conn.SERVICE_OPTS\n    )\n\n    splits = []\n    for fsId, splitIds in splitFilesets.items():\n        splits.append(\n            {\n                \"id\": fsId,\n                \"attempted_iids\": splitIds[True],\n                \"blocking_iids\": splitIds[False],\n            }\n        )\n\n    context = {\"split_filesets\": splits}\n    context[\"action\"] = action\n    if action == \"chgrp\":\n        context[\"action\"] = \"move\"\n    context[\"template\"] = \"webclient/activities/\" \"fileset_check_dialog_content.html\"\n\n    return context\n\n\ndef getAllObjects(\n    conn, project_ids, dataset_ids, image_ids, screen_ids, plate_ids, experimenter_id\n):\n    \"\"\"\n    Given a list of containers and images, calculate all the descendants\n    and necessary siblings (for any filesets)\n    \"\"\"\n    # TODO Handle None inputs, maybe add defaults\n    params = omero.sys.ParametersI()\n    qs = conn.getQueryService()\n\n    project_ids = set(project_ids)\n    dataset_ids = set(dataset_ids)\n    image_ids = set(image_ids)\n    fileset_ids = set([])\n    plate_ids = set(plate_ids)\n    screen_ids = set(screen_ids)\n\n    # Get any datasets for projects\n    if project_ids:\n        params.map = {}\n        params.map[\"pids\"] = rlist([rlong(x) for x in list(project_ids)])\n        q = \"\"\"\n            select pdlink.child.id\n            from ProjectDatasetLink pdlink\n            where pdlink.parent.id in (:pids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            dataset_ids.add(e[0].val)\n\n    # Get any plates for screens\n    if screen_ids:\n        params.map = {}\n        params.map[\"sids\"] = rlist([rlong(x) for x in screen_ids])\n        q = \"\"\"\n            select splink.child.id\n            from ScreenPlateLink splink\n            where splink.parent.id in (:sids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            plate_ids.add(e[0].val)\n\n    # Get any images for datasets\n    if dataset_ids:\n        params.map = {}\n        params.map[\"dids\"] = rlist([rlong(x) for x in dataset_ids])\n        q = \"\"\"\n            select dilink.child.id,\n                   dilink.child.fileset.id\n            from DatasetImageLink dilink\n            where dilink.parent.id in (:dids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n            # Some images in Dataset may not have fileset\n            if e[1] is not None:\n                fileset_ids.add(e[1].val)\n\n    # Get any images for plates\n    # TODO Seemed no need to add the filesets for plates as it isn't possible\n    # to link it from outside of its plate. This may be true for the client,\n    # but it certainly isn't true for the model so maybe allow this to also get\n    # filesets\n    if plate_ids:\n        params.map = {}\n        params.map[\"plids\"] = rlist([rlong(x) for x in plate_ids])\n        q = \"\"\"\n            select ws.image.id\n            from WellSample ws\n            join ws.plateAcquisition pa\n            where pa.plate.id in (:plids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n\n    # Get any extra images due to filesets\n    if fileset_ids:\n        params.map = {}\n        params.map[\"fsids\"] = rlist([rlong(x) for x in fileset_ids])\n        q = \"\"\"\n            select image.id\n            from Image image\n            left outer join image.datasetLinks dilink\n            where image.fileset.id in (select fs.id\n                                       from Image im\n                                       join im.fileset fs\n                                       where fs.id in (:fsids)\n                                       group by fs.id\n                                       having count(im.id)>1)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n\n    # Get any additional datasets that may need updating as their children have\n    # been snatched.\n    # TODO Need to differentiate which orphaned directories need refreshing\n    extra_dataset_ids = set([])\n    extra_orphaned = False\n    if image_ids:\n        params.map = {\n            \"iids\": rlist([rlong(x) for x in image_ids]),\n        }\n\n        exclude_datasets = \"\"\n        if dataset_ids:\n            params.map[\"dids\"] = rlist([rlong(x) for x in dataset_ids])\n            # Make sure to allow parentless results as well as those\n            # that do not match a dataset being removed\n            exclude_datasets = \"\"\"\n                               and (\n                                    dilink.parent.id not in (:dids)\n                                    or dilink.parent.id = null\n                                   )\n                               \"\"\"\n\n        q = (\n            \"\"\"\n            select distinct dilink.parent.id\n            from Image image\n            left outer join image.datasetLinks dilink\n            where image.id in (:iids)\n            %s\n            and (select count(dilink2.child.id)\n                 from DatasetImageLink dilink2\n                 where dilink2.parent.id = dilink.parent.id\n                 and dilink2.child.id not in (:iids)) = 0\n            \"\"\"\n            % exclude_datasets\n        )\n\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            if e:\n                extra_dataset_ids.add(e[0].val)\n            else:\n                extra_orphaned = True\n\n    # Get any additional projects that may need updating as their children have\n    # been snatched. There is no need to check for orphans because if a dataset\n    # is being removed from somewhere else, it can not exist as an orphan.\n    extra_project_ids = set([])\n    if dataset_ids:\n        params.map = {\"dids\": rlist([rlong(x) for x in dataset_ids])}\n\n        exclude_projects = \"\"\n        if project_ids:\n            params.map[\"pids\"] = rlist([rlong(x) for x in project_ids])\n            exclude_projects = \"and pdlink.parent.id not in (:pids)\"\n\n        q = (\n            \"\"\"\n            select distinct pdlink.parent.id\n            from ProjectDatasetLink pdlink\n            where pdlink.child.id in (:dids)\n            %s\n            and (select count(pdlink2.child.id)\n                 from ProjectDatasetLink pdlink2\n                 where pdlink2.parent.id = pdlink.parent.id\n                 and pdlink2.child.id not in (:dids)) = 0\n            \"\"\"\n            % exclude_projects\n        )\n\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            extra_project_ids.add(e[0].val)\n\n    # We now have the complete list of objects that will change group\n    # We also have an additional list of datasets/projects that may have had\n    # snatched children and thus may need updating in the client if the\n    # dataset/project has gone from N to 0 children\n\n    result = {\n        # These objects are completely removed\n        \"remove\": {\n            \"project\": list(project_ids),\n            \"dataset\": list(dataset_ids),\n            \"screen\": list(screen_ids),\n            \"plate\": list(plate_ids),\n            \"image\": list(image_ids),\n        },\n        # These objects now have no children\n        \"childless\": {\n            \"project\": list(extra_project_ids),\n            \"dataset\": list(extra_dataset_ids),\n            \"orphaned\": extra_orphaned,\n        },\n    }\n    return result\n\n\n@require_POST\n@login_required()\ndef chgrpDryRun(request, conn=None, **kwargs):\n    return dryRun(request, action=\"chgrp\", conn=conn, **kwargs)\n\n\n@require_POST\n@login_required()\ndef dryRun(request, action, conn=None, **kwargs):\n    \"\"\"Submit chgrp or chown dry-run\"\"\"\n    targetObjects = {}\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\", \"Fileset\"]\n    for dtype in dtypes:\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            targetObjects[dtype] = obj_ids\n\n    if action == \"chgrp\":\n        target_id = getIntOrDefault(request, \"group_id\", None)\n    elif action == \"chown\":\n        target_id = getIntOrDefault(request, \"owner_id\", None)\n    handle = conn.submitDryRun(action, targetObjects, target_id)\n    jobId = str(handle)\n    return HttpResponse(jobId)\n\n\n@login_required()\ndef chgrp(request, conn=None, **kwargs):\n    \"\"\"\n    Moves data to a new group, using the chgrp queue.\n    Handles submission of chgrp form: all data in POST.\n    Adds the callback handle to the request.session['callback']['jobId']\n    \"\"\"\n    if not request.method == \"POST\":\n        return JsonResponse({\"Error\": \"Need to POST to chgrp\"}, status=405)\n    # Get the target group_id\n    group_id = getIntOrDefault(request, \"group_id\", None)\n    if group_id is None:\n        return JsonResponse({\"Error\": \"chgrp: No group_id specified\"})\n    group_id = long(group_id)\n\n    def getObjectOwnerId(r):\n        for t in [\"Dataset\", \"Image\", \"Plate\"]:\n            ids = r.POST.get(t, None)\n            if ids is not None:\n                for o in list(conn.getObjects(t, ids.split(\",\"))):\n                    return o.getDetails().owner.id.val\n\n    group = conn.getObject(\"ExperimenterGroup\", group_id)\n    new_container_name = request.POST.get(\"new_container_name\", None)\n    new_container_type = request.POST.get(\"new_container_type\", None)\n    container_id = None\n\n    # Context must be set to owner of data, E.g. to create links.\n    ownerId = getObjectOwnerId(request)\n    conn.SERVICE_OPTS.setOmeroUser(ownerId)\n    if (\n        new_container_name is not None\n        and len(new_container_name) > 0\n        and new_container_type is not None\n    ):\n        conn.SERVICE_OPTS.setOmeroGroup(group_id)\n        container_id = conn.createContainer(new_container_type, new_container_name)\n    # No new container, check if target is specified\n    if container_id is None:\n        # E.g. \"dataset-234\"\n        target_id = request.POST.get(\"target_id\", None)\n        container_id = target_id is not None and target_id.split(\"-\")[1] or None\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"]\n    for dtype in dtypes:\n        # Get all requested objects of this type\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            # TODO Doesn't the filesets only apply to images?\n            # if 'filesets' are specified, make sure we move ALL Fileset Images\n            fsIds = request.POST.getlist(\"fileset\")\n            if len(fsIds) > 0:\n                # If a dataset is being moved and there is a split fileset\n                # then those images need to go somewhere in the new\n                if dtype == \"Dataset\":\n                    conn.regroupFilesets(dsIds=obj_ids, fsIds=fsIds)\n                else:\n                    for fs in conn.getObjects(\"Fileset\", fsIds):\n                        obj_ids.extend([i.id for i in fs.copyImages()])\n                    obj_ids = list(set(obj_ids))  # remove duplicates\n            logger.debug(\"chgrp to group:%s %s-%s\" % (group_id, dtype, obj_ids))\n            handle = conn.chgrpObjects(dtype, obj_ids, group_id, container_id)\n            jobId = str(handle)\n            request.session[\"callback\"][jobId] = {\n                \"job_type\": \"chgrp\",\n                \"group\": group.getName(),\n                \"to_group_id\": group_id,\n                \"dtype\": dtype,\n                \"obj_ids\": obj_ids,\n                \"job_name\": \"Change group\",\n                \"start_time\": datetime.datetime.now(),\n                \"status\": \"in progress\",\n            }\n            request.session.modified = True\n\n    # Update contains a list of images/containers that need to be\n    # updated.\n\n    project_ids = request.POST.get(\"Project\", [])\n    dataset_ids = request.POST.get(\"Dataset\", [])\n    image_ids = request.POST.get(\"Image\", [])\n    screen_ids = request.POST.get(\"Screen\", [])\n    plate_ids = request.POST.get(\"Plate\", [])\n\n    if project_ids:\n        project_ids = [long(x) for x in project_ids.split(\",\")]\n    if dataset_ids:\n        dataset_ids = [long(x) for x in dataset_ids.split(\",\")]\n    if image_ids:\n        image_ids = [long(x) for x in image_ids.split(\",\")]\n    if screen_ids:\n        screen_ids = [long(x) for x in screen_ids.split(\",\")]\n    if plate_ids:\n        plate_ids = [long(x) for x in plate_ids.split(\",\")]\n\n    # TODO Change this user_id to be an experimenter_id in the request as it\n    # is possible that a user is chgrping data from another user so it is\n    # that users orphaned that will need updating. Or maybe all orphaned\n    # directories could potentially need updating?\n\n    # Create a list of objects that have been changed by this operation. This\n    # can be used by the client to visually update.\n    update = getAllObjects(\n        conn,\n        project_ids,\n        dataset_ids,\n        image_ids,\n        screen_ids,\n        plate_ids,\n        request.session.get(\"user_id\"),\n    )\n\n    # return HttpResponse(\"OK\")\n    return JsonResponse({\"update\": update})\n\n\n@login_required()\ndef chown(request, conn=None, **kwargs):\n    \"\"\"\n    Moves data to a new owner, using the chown queue.\n    Handles submission of chown form: all data in POST.\n    Adds the callback handle to the request.session['callback']['jobId']\n    \"\"\"\n    if not request.method == \"POST\":\n        return JsonResponse({\"Error\": \"Need to POST to chown\"}, status=405)\n    # Get the target owner_id\n    owner_id = getIntOrDefault(request, \"owner_id\", None)\n    if owner_id is None:\n        return JsonResponse({\"Error\": \"chown: No owner_id specified\"})\n    owner_id = int(owner_id)\n    exp = conn.getObject(\"Experimenter\", owner_id)\n    if exp is None:\n        return JsonResponse({\"Error\": \"chown: Experimenter not found\" % owner_id})\n\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"]\n    jobIds = []\n    for dtype in dtypes:\n        # Get all requested objects of this type\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            logger.debug(\"chown to owner:%s %s-%s\" % (owner_id, dtype, obj_ids))\n            handle = conn.chownObjects(dtype, obj_ids, owner_id)\n            jobId = str(handle)\n            jobIds.append(jobId)\n            request.session[\"callback\"][jobId] = {\n                \"job_type\": \"chown\",\n                \"owner\": exp.getFullName(),\n                \"to_owner_id\": owner_id,\n                \"dtype\": dtype,\n                \"obj_ids\": obj_ids,\n                \"job_name\": \"Change owner\",\n                \"start_time\": datetime.datetime.now(),\n                \"status\": \"in progress\",\n            }\n            request.session.modified = True\n\n    return JsonResponse({\"jobIds\": jobIds})\n\n\n@login_required(setGroupContext=True)\ndef script_run(request, scriptId, conn=None, **kwargs):\n    \"\"\"\n    Runs a script using values in a POST\n    \"\"\"\n    scriptService = conn.getScriptService()\n\n    inputMap = {}\n\n    sId = long(scriptId)\n\n    try:\n        params = scriptService.getParams(sId)\n    except Exception as x:\n        if x.message and x.message.startswith(\"No processor available\"):\n            # Delegate to run_script() for handling 'No processor available'\n            rsp = run_script(request, conn, sId, inputMap, scriptName=\"Script\")\n            return JsonResponse(rsp)\n        else:\n            raise\n    params = scriptService.getParams(sId)\n    scriptName = params.name.replace(\"_\", \" \").replace(\".py\", \"\")\n\n    logger.debug(\"Script: run with request.POST: %s\" % request.POST)\n\n    # upload new file\n    fileupload = (\n        \"file_annotation\" in request.FILES and request.FILES[\"file_annotation\"] or None\n    )\n    fileAnnId = None\n    if fileupload is not None and fileupload != \"\":\n        manager = BaseContainer(conn)\n        fileAnnId = manager.createFileAnnotations(fileupload, [])\n\n    for key, param in params.inputs.items():\n        prototype = param.prototype\n        pclass = prototype.__class__\n\n        if key == \"File_Annotation\" and fileAnnId is not None:\n            inputMap[key] = pclass(str(fileAnnId))\n            continue\n\n        # handle bool separately, since unchecked checkbox will not be in\n        # request.POST\n        if pclass == omero.rtypes.RBoolI:\n            value = key in request.POST\n            inputMap[key] = pclass(value)\n            continue\n\n        if pclass.__name__ == \"RMapI\":\n            keyName = \"%s_key0\" % key\n            valueName = \"%s_value0\" % key\n            row = 0\n            paramMap = {}\n            while keyName in request.POST:\n                # the key and value don't have any data-type defined by\n                # scripts - just use string\n                k = str(request.POST[keyName])\n                v = request.POST[valueName]\n                if len(k) > 0 and len(v) > 0:\n                    paramMap[str(k)] = v\n                row += 1\n                keyName = \"%s_key%d\" % (key, row)\n                valueName = \"%s_value%d\" % (key, row)\n            if len(paramMap) > 0:\n                inputMap[key] = wrap(paramMap)\n            continue\n\n        if key in request.POST:\n            if pclass == omero.rtypes.RListI:\n                values = request.POST.getlist(key)\n                if len(values) == 0:\n                    continue\n                if len(values) == 1:  # process comma-separated list\n                    if len(values[0]) == 0:\n                        continue\n                    values = values[0].split(\",\")\n\n                # try to determine 'type' of values in our list\n                listClass = omero.rtypes.RStringI\n                pval = prototype.val  # list\n                # check if a value type has been set (first item of prototype\n                # list)\n                if len(pval) > 0:\n                    listClass = pval[0].__class__\n                    if listClass == int(1).__class__:\n                        listClass = omero.rtypes.rint\n                    if listClass == long(1).__class__:\n                        listClass = omero.rtypes.rlong\n\n                # construct our list, using appropriate 'type'\n                valueList = []\n                for v in values:\n                    try:\n                        # RStringI() will encode any unicode\n                        obj = listClass(v.strip())\n                    except Exception:\n                        logger.debug(\"Invalid entry for '%s' : %s\" % (key, v))\n                        continue\n                    if isinstance(obj, omero.model.IObject):\n                        valueList.append(omero.rtypes.robject(obj))\n                    else:\n                        valueList.append(obj)\n                inputMap[key] = omero.rtypes.rlist(valueList)\n\n            # Handle other rtypes: String, Long, Int etc.\n            else:\n                value = request.POST[key]\n                if len(value) == 0:\n                    continue\n                try:\n                    inputMap[key] = pclass(value)\n                except Exception:\n                    logger.debug(\"Invalid entry for '%s' : %s\" % (key, value))\n                    continue\n\n    # If we have objects specified via 'IDs' and 'DataType', try to pick\n    # correct group\n    if \"IDs\" in inputMap and \"Data_Type\" in inputMap:\n        gid = conn.SERVICE_OPTS.getOmeroGroup()\n        conn.SERVICE_OPTS.setOmeroGroup(\"-1\")\n        try:\n            firstObj = conn.getObject(\n                inputMap[\"Data_Type\"].val, unwrap(inputMap[\"IDs\"])[0]\n            )\n            newGid = firstObj.getDetails().group.id.val\n            conn.SERVICE_OPTS.setOmeroGroup(newGid)\n        except Exception:\n            logger.debug(traceback.format_exc())\n            # if inputMap values not as expected or firstObj is None\n            conn.SERVICE_OPTS.setOmeroGroup(gid)\n\n    try:\n        # Try/except in case inputs are not serializable, e.g. unicode\n        logger.debug(\"Running script %s with \" \"params %s\" % (scriptName, inputMap))\n    except Exception:\n        pass\n    rsp = run_script(request, conn, sId, inputMap, scriptName)\n    return JsonResponse(rsp)\n\n\n@login_required(isAdmin=True)\n@render_response()\ndef script_upload(request, conn=None, **kwargs):\n    \"\"\"Script upload UI\"\"\"\n\n    if request.method != \"POST\":\n        return {\"template\": \"webclient/scripts/upload_script.html\"}\n\n    # Get script path, name and text\n    script_path = request.POST.get(\"script_path\")\n    script_file = request.FILES[\"script_file\"]\n    script_file.seek(0)\n    script_text = script_file.read().decode(\"utf-8\")\n\n    if not script_path.endswith(\"/\"):\n        script_path = script_path + \"/\"\n    script_path = script_path + script_file.name\n\n    # If script exists, replace. Otherwise upload\n    scriptService = conn.getScriptService()\n    script_id = scriptService.getScriptID(script_path)\n\n    try:\n        if script_id > 0:\n            orig_file = OriginalFileI(script_id, False)\n            scriptService.editScript(orig_file, script_text)\n            message = \"Script Replaced: %s\" % script_file.name\n        else:\n            script_id = scriptService.uploadOfficialScript(script_path, script_text)\n            message = \"Script Uploaded: %s\" % script_file.name\n    except omero.ValidationException as ex:\n        message = str(ex)\n\n    return {\"Message\": message, \"script_id\": script_id}\n\n\n@require_POST\n@login_required()\ndef ome_tiff_script(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Uses the scripting service (Batch Image Export script) to generate\n    OME-TIFF for an image and attach this as a file annotation to the image.\n    Script will show up in the 'Activities' for users to monitor and download\n    result etc.\n    \"\"\"\n\n    scriptService = conn.getScriptService()\n    sId = scriptService.getScriptID(\"/omero/export_scripts/Batch_Image_Export.py\")\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is not None:\n        gid = image.getDetails().group.id.val\n        conn.SERVICE_OPTS.setOmeroGroup(gid)\n    imageIds = [long(imageId)]\n    inputMap = {\n        \"Data_Type\": wrap(\"Image\"),\n        \"IDs\": rlist([rlong(id) for id in imageIds]),\n    }\n    inputMap[\"Format\"] = wrap(\"OME-TIFF\")\n    rsp = run_script(request, conn, sId, inputMap, scriptName=\"Create OME-TIFF\")\n    return JsonResponse(rsp)\n\n\ndef run_script(request, conn, sId, inputMap, scriptName=\"Script\"):\n    \"\"\"\n    Starts running a script, adding details to the request.session so that it\n    shows up in the webclient Activities panel and results are available there\n    etc.\n    \"\"\"\n    request.session.modified = True\n    scriptService = conn.getScriptService()\n    try:\n        handle = scriptService.runScript(sId, inputMap, None, conn.SERVICE_OPTS)\n        # E.g. ProcessCallback/4ab13b23-22c9-4b5f-9318-40f9a1acc4e9 -t:tcp -h  10.37.129.2 -p 53154:tcp -h 10.211.55.2 -p 53154:tcp -h 10.12.1.230 -p 53154 # noqa\n        jobId = str(handle)\n        status = \"in progress\"\n        request.session[\"callback\"][jobId] = {\n            \"job_type\": \"script\",\n            \"job_name\": scriptName,\n            \"start_time\": datetime.datetime.now(),\n            \"status\": status,\n        }\n        request.session.modified = True\n    except Exception as x:\n        jobId = str(time())  # E.g. 1312803670.6076391\n        # handle python 2 or 3 errors\n        message = x.message if hasattr(x, \"message\") else (x.args[0] if x.args else \"\")\n        if message and message.startswith(\"No processor available\"):\n            # omero.ResourceError\n            logger.info(traceback.format_exc())\n            error = \"No Processor Available\"\n            status = \"no processor available\"\n            message = \"\"  # template displays message and link\n        else:\n            # Don't log user mistake as ERROR\n            if isinstance(x, omero.ValidationException):\n                logger.debug(x.message)\n            else:\n                logger.error(traceback.format_exc())\n            error = traceback.format_exc()\n            status = \"failed\"\n            message = x.message\n        # save the error to http session, for display in 'Activities' window\n        request.session[\"callback\"][jobId] = {\n            \"job_type\": \"script\",\n            \"job_name\": scriptName,\n            \"start_time\": datetime.datetime.now(),\n            \"status\": status,\n            \"Message\": message,\n            \"error\": error,\n        }\n        return {\"status\": status, \"error\": error}\n\n    return {\"jobId\": jobId, \"status\": status}\n\n\n@login_required()\n@render_response()\ndef ome_tiff_info(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Query to see if we have an OME-TIFF attached to the image (assume only 1,\n    since Batch Image Export will delete old ones)\n    \"\"\"\n    # Any existing OME-TIFF will appear in list\n    links = list(\n        conn.getAnnotationLinks(\n            \"Image\", [imageId], ns=omero.constants.namespaces.NSOMETIFF\n        )\n    )\n    rv = {}\n    if len(links) > 0:\n        # use highest ID === most recent\n        links.sort(key=lambda x: x.getId(), reverse=True)\n        annlink = links[0]\n        created = annlink.creationEventDate()\n        annId = annlink.getChild().getId()\n        from omeroweb.webgateway.templatetags.common_filters import ago\n\n        download = reverse(\"download_annotation\", args=[annId])\n        rv = {\n            \"created\": str(created),\n            \"ago\": ago(created),\n            \"id\": annId,\n            \"download\": download,\n        }\n    return rv  # will get returned as json by default\n", "/*\n * Copyright (c) 2008-2013 University of Dundee. & Open Microscopy Environment.\n * All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Author: Aleksandra Tarkowska <A(dot)Tarkowska(at)dundee(dot)ac(dot)uk>, 2008.\n */\n\n/*global OME:true */\nif (typeof OME === \"undefined\") {\n    OME = {};\n}\n\n// Use userAgent to detect mobile devices\n// from http://stackoverflow.com/questions/3514784/what-is-the-best-way-to-detect-a-handheld-device-in-jquery\nOME.isMobileDevice = function() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|PlayBook|IEMobile|Opera Mini|Mobile Safari|Silk/i).test(navigator.userAgent);\n};\n\nOME.rgbToHex = function rgbToHex(rgb) {\n    if (rgb.substring(0,1) == '#') {\n        return rgb.substring(1);\n    }\n    var rgbvals = /rgb\\((.+),(.+),(.+)\\)/i.exec(rgb);\n    if (!rgbvals) return rgb;\n    var rval = parseInt(rgbvals[1], 10).toString(16);\n    var gval = parseInt(rgbvals[2], 10).toString(16);\n    var bval = parseInt(rgbvals[3], 10).toString(16);\n    if (rval.length == 1) rval = '0' + rval;\n    if (gval.length == 1) gval = '0' + gval;\n    if (bval.length == 1) bval = '0' + bval;\n    return (\n        rval +\n        gval +\n        bval\n    ).toUpperCase();\n};\n\nOME.hexToRgb = function hexToRgb(hex) {\n    hex = OME.rgbToHex(hex);    // in case 'hex' is actually rgb!\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n};\n\n// Calculate value, saturation and hue as in org.openmicroscopy.shoola.util.ui.colour.HSV\nOME.isDark = function(color) {\n    if (color.endsWith('.lut')) {\n        return false;\n    }\n    var c = OME.hexToRgb(color);\n\n    var min, max, delta;\n    var v, s, h;\n\n    min = Math.min(c.r, c.g, c.b);\n    max = Math.max(c.r, c.g, c.b);\n\n    v = max;\n    delta = max-min;\n\n    if (max !== 0) {\n        s = delta/max;\n    }\n    else {\n        v = 0;\n        s = 0;\n        h = 0;\n    }\n\n    if (c.r==max) {\n        h = (c.g-c.b)/delta;\n    } else if (c.g == max) {\n        h = 2 + (c.b-c.r)/delta;\n    } else {\n        h = 4 +(c.r-c.g)/delta;\n    }\n\n    h = h * 60;\n    if (h < 0) {\n        h += 360;\n    }\n    h = h/360;\n    v = v/255;\n\n    return (v < 0.6 || (h > 0.6 && s > 0.7));\n};\n\nfunction isInt(n){\n    return typeof n== \"number\" && isFinite(n) && n%1===0;\n}\n\nNumber.prototype.filesizeformat = function (round) {\n    /*\n    Formats the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,\n    102 bytes, etc).*/\n    \n    if (round === undefined || !isInt(round)) round = 2;\n    \n    var bytes = this;\n    if (bytes < 1024) {\n        return bytes + ' B';\n    } else if (bytes < (1024*1024)) {\n        return (bytes / 1024).toFixed(round) + ' KB';\n    } else if (bytes < (1024*1024*1024)) {\n        return (bytes / (1024*1024)).toFixed(round) + ' MB';\n    } else if (bytes < (1024*1024*1024*1024)) {\n        return (bytes / (1024*1024*1024)).toFixed(round) + ' GB';\n    } else if (bytes < (1024*1024*1024*1024*1024)) {\n        return (bytes / (1024*1024*1024*1024)).toFixed(round) + ' TB';\n    } else {\n        return (bytes / (1024*1024*1024*1024*1024)).toFixed(round) + ' PB';\n    }\n    \n};\n\nNumber.prototype.lengthformat = function (round) {\n    if (round === undefined || !isInt(round)) round = 2;\n    \n    var length = this;\n    if (length < 0.001) {\n        return (length * 1000 * 1000).toFixed(round) + ' pm';\n    } else if (length < 0.1) {\n        return (length * 1000 * 10).toFixed(round) + ' &#8491;';\n    } else if (length < 1) {\n        return (length * 1000).toFixed(round) + ' nm';\n    } else if (length < 1000) {\n        return length.toFixed(round) + ' &#181m';\n    } else if (length < 1000 * 100) {\n        return (length / 1000).toFixed(round) + ' mm';\n    } else if (length < 1000 * 100 * 10) {\n        return (length / 1000 / 100).toFixed(round) + ' cm';\n    } else if (length < 1000 * 100 * 10 * 100) {\n        return (length / 1000 / 100 / 10).toFixed(round) + ' m';\n    } else {\n        return (length / 1000 / 100 / 10 / 1000).toFixed(round) + ' km';\n    }\n};\n\nString.prototype.escapeHTML = function(){\n    /*\n    HTML Escape Before Inserting Untrusted Data into HTML Element Content\n    https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention\n    _Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into\n    _HTML_Element_Content\n    */\n    var s = this;\n    if (!s) {\n        return \"\";\n    }\n    s = s + \"\";\n    return s.replace(/[\\&\"<>\\\\]/g, function(s) {\n        switch(s) {\n            case \"&\": return \"&amp;\";\n            case \"\\\\\": return \"&#92;\";\n            case '\"': return '\\\"';\n            case \"<\": return \"&lt;\";\n            case \">\": return \"&gt;\";\n            default: return s;\n        }\n    });\n};\n\nString.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\n// IE polyfill from\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\nif (!String.prototype.startsWith) {\n    String.prototype.startsWith = function(search, pos) {\n        return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n    };\n}\n\njQuery.fn.alternateRowColors = function() {\n    var $rows = $(this).children().children('tr');\n    $rows.not('.hidden').filter(':odd').removeClass('even').addClass('odd');\n    $rows.not('.hidden').filter(':even').removeClass('odd').addClass('even');\n  return this;\n};\n\n\n// Call this on an <input> to only allow numbers.\n// I rejects all non-numeric characters but allows paste (then checks value)\n// By default it only allows positive ints.\n// To allow negative or float values use $(\".number\").numbersOnly({negative:true, float:true});\njQuery.fn.numbersOnly = function(options) {\n\n    // First, save the current value (assumed to be valid)\n    this.each(function() {\n        $(this).data('numbersOnly', $(this).val());\n    })\n    .on('keypress', function(event){\n\n        // we allow copy, paste, left or right\n        var allowedChars = [37, 39, 99, 118];\n        if (options && options.negative) {\n            allowedChars.push(45);\n        }\n        if (options && options.float) {\n            allowedChars.push(46);\n        }\n        // Reject keypress if not a number and NOT one of our allowed Chars\n        var charCode = (event.which) ? event.which : event.keyCode;\n        if (charCode > 31 && (charCode < 48 || charCode > 57) && allowedChars.indexOf(charCode) == -1) {\n            return false;\n        }\n\n        // We've allowed keypress (including paste)...\n        //finally check field value after waiting for keypress to update...\n        var $this = $(this);\n        setTimeout(function(){\n            var n = $this.val();\n            var isNumber = function(n) {\n                if (n.length === 0) {\n                    return true;        // empty strings are allowed\n                }\n                return !isNaN(parseFloat(n)) && isFinite(n);\n            };\n            // If so, save to 'data', otherwise revert to 'data'\n            if (isNumber(n)) {\n                $this.data('numbersOnly', n);     // update\n            } else {\n                $this.val( $this.data('numbersOnly') );\n            }\n        }, 10);\n\n        return true;\n    });\n\n    return this;\n};\n\nOME.openPopup = function(url) {\n    // IE8 doesn't support arbitrary text for 'name' 2nd arg.  #6118\n    var owindow = window.open(url, '', 'height=600,width=850,left=50,top=50,toolbar=no,menubar=no,scrollbars=yes,resizable=yes,location=no,directories=no,status=no');\n    if(!owindow.closed) {\n        owindow.focus();\n    }\n    return false;\n};\n\n\nOME.openCenteredWindow = function(url, w, h) {\n    var width = w ? +w : 550;\n    var height = h ? +h : 600;\n    var left = parseInt((screen.availWidth/2) - (width/2), 10);\n    var top = 0;\n    var windowFeatures = \"width=\" + width + \",height=\" + height + \",status=no,resizable=yes,scrollbars=yes,menubar=no,toolbar=no,left=\" + left + \",top=\" + top + \"screenX=\" + left + \",screenY=\" + top;\n    var myWindow = window.open(url, \"\", windowFeatures);\n    if(!myWindow.closed) {\n        myWindow.focus();\n    }\n    return false;\n};\n\n\nOME.openScriptWindow = function(event, width, height) {\n    // open script url, providing Data_Type and IDs params in request\n    var script_url = $(event.target).attr('href');\n    if (script_url == \"#\") return false;\n\n    if (script_url.indexOf('script_upload') > -1) {\n        OME.openCenteredWindow(script_url, width, 300);\n        return;\n    }\n\n    // selected is list of {'id':'image-123'} etc.\n    var selected = $(\"body\").data(\"selected_objects.ome\"),\n        sel_types = {};\n    if (typeof selected !== \"undefined\") {\n        for (var i=0; i<selected.length; i++) {\n            var type = selected[i].id.split(\"-\")[0],\n                oid = selected[i].id.split(\"-\")[1];\n            if (typeof sel_types[type] === \"undefined\") {\n                sel_types[type] = [];\n            }\n            sel_types[type].push(oid);\n        }\n        var args = [];\n        for (var key in sel_types) {\n            // If in SPW with wells selected, handy to know what 'field'\n            if (key === \"well\") {\n                // grab the index select value:\n                if ($(\"#id_index\").length > 0) {\n                    args.push(\"Index=\" + $(\"#id_index\").val());\n                }\n            }\n            if (sel_types.hasOwnProperty(key)){\n                args.push(key.capitalize() + \"=\" + sel_types[key].join(\",\"));\n            }\n        }\n        var fileAnnotationCheckboxes =\n            $(\"#fileanns_container input[type=checkbox]\").filter(\":checked\");\n        if (fileAnnotationCheckboxes.length > 0) {\n            var fileAnnotationIds = [];\n            fileAnnotationCheckboxes.each(function() {\n                var li = $(this).parents(\"li\").first();\n                var oid = li.attr('id').split('-')[1];\n                fileAnnotationIds.push(oid);\n            });\n            args.push(\"File_Annotation=\" + fileAnnotationIds.join(\",\"));\n        }\n        script_url += \"?\" + args.join(\"&\");\n    }\n    OME.openCenteredWindow(script_url, width, height);\n    return false;\n};\n\n\n/*\n *  Returns a string representing the currently selected items in the $.jstree.\n * E.g.     \"Image=23,34,98&Dataset=678\"\n**/\nOME.get_tree_selection = function() {\n    if (typeof $.jstree === \"undefined\") {\n        return \"\";\n    }\n    var datatree = $.jstree.reference('#dataTree');\n    var selected = datatree.get_selected(true);\n\n    var selected_ids = {};\n\n    $.each(selected, function(index, node) {\n        var dtype = node.type;\n        var data_type = dtype.charAt(0).toUpperCase() + dtype.slice(1); // capitalise\n        var data_id = node.data.obj.id;\n        if (data_type in selected_ids) {\n            selected_ids[data_type] += \",\"+data_id;\n        } else {\n            selected_ids[data_type] = data_id;\n        }\n    });\n\n    var ids_list = [];\n    for (var key in selected_ids){\n        ids_list.push(key+\"=\"+selected_ids[key]);\n    }\n    return ids_list.join(\"&\");\n};\n\n\n// we need to know parent for Channels or Rdefs 'apply to all'\nOME.getParentId = function() {\n    if (typeof $.jstree === \"undefined\") {\n        return;\n    }\n    var datatree = $.jstree.reference('#dataTree');\n\n    var selected = datatree.get_selected(true);\n    if (selected.length == 1) {\n        var node = selected[0],\n            parentNode;\n\n        if (node.type === 'acquisition') {\n            parentNode = datatree.get_node(datatree.get_parent(node));\n            return parentNode.type + '-' + parentNode.data.obj.id;\n        } else if (node.type === 'plate') {\n            return node.type + '-' + node.data.obj.id;\n        } else if  (node.type === 'image') {\n            parentNode = datatree.get_node(datatree.get_parent(node));\n            if (parentNode.type === 'dataset') {\n                return parentNode.type + '-' + parentNode.data.obj.id;\n            }\n        }\n    }\n};\n\n\n/*\n * Confirm dialog using jquery-ui dialog. http://jqueryui.com/demos/dialog/\n * This code provides a short-cut that doens't need html elements on the page\n * Basic usage (text only - Default buttons are 'OK' and 'Cancel'):\n *    var OK_dialog = OME.confirm_dialog(\"Can you confirm that you want to proceed?\", function() {\n *        var clicked_button_text = OK_dialog.data(\"clicked_button\");\n *        alert(clicked_button_text);\n *    });\n *\n * Also possible to specify title, buttons, width, height:\n *    var btn_labels = [\"Yes\", \"No\", \"Maybe\", \"Later\"];\n *    var title_dialog = OME.confirm_dialog(\"Can you confirm that you want to proceed?\",\n *          function() { alert( title_dialog.data(\"clicked_button\") },\n *          \"Dialog Title\", btn_labels, 300, 200);\n */\nOME.confirm_dialog = function(dialog_text, callback, title, button_labels, width, height) {\n\n    if ((typeof title == \"undefined\") || (title === null)) {\n        title = \"Confirm\";\n    }\n    if ((typeof width == \"undefined\") || (width === null)) {\n        width = 350;\n    }\n    if ((typeof height == \"undefined\") || (height === null)) {\n        height = 140;\n    }\n\n    var $dialog = $(\"#confirm_dialog\");\n    if ($dialog.length > 0) {       // get rid of any old dialogs\n        $dialog.remove();\n    }\n    $dialog = $(\"<div id='confirm_dialog'></div>\");\n    $('body').append($dialog);\n\n    $dialog.attr(\"title\", title).hide();\n    $dialog.html(\"<p>\"+ dialog_text +\"</p>\");\n\n    if (typeof button_labels == \"undefined\") {\n        button_labels = ['OK', 'Cancel'];\n    }\n    var btns = {};\n    for (var i=0; i<button_labels.length; i++) {\n        var b = button_labels[i];\n        btns[b] = function(event) {\n            var btxt = $(event.target).text();\n            $dialog.data(\"clicked_button\", btxt);\n            $( this ).dialog( \"close\" );\n        };\n    }\n\n    $dialog.dialog({\n        resizable: true,\n        height: height,\n        width: width,\n        modal: true,\n        buttons: btns\n    });\n    if (callback) {\n        $dialog.bind(\"dialogclose\", callback);\n    }\n\n    return $dialog;\n};\n\n// short-cut to simply display a message\nOME.alert_dialog = function(message) {\n    OME.confirm_dialog(message, undefined, \"\", [\"OK\"]);\n};\n\n\n/*\n * A dialog for sending feedback.\n * Loads and submits the feedback form at \"/feedback/feedback\"\n */\nOME.feedback_dialog = function(error, feedbackUrl) {\n\n    var $feedback_dialog = $(\"#feedback_dialog\");\n    if ($feedback_dialog.length > 0) {       // get rid of any old dialogs\n        $feedback_dialog.remove();\n    }\n    $feedback_dialog = $(\"<div id='feedback_dialog'></div>\");\n    $('body').append($feedback_dialog);\n\n    $feedback_dialog.attr(\"title\", \"Send Feedback\").hide();\n    $feedback_dialog.load(feedbackUrl + \" #form-500\", function() {\n        $(\"textarea[name=error]\", $feedback_dialog).val(error);\n        $(\"input[type=submit]\", $feedback_dialog).hide();\n        $(\"form\", $feedback_dialog).ajaxForm({\n            success: function(data) {\n                $feedback_dialog.html(data);\n                $feedback_dialog.dialog(\"option\", \"buttons\", {\n                    \"Close\": function() {\n                        $( this ).dialog( \"close\" );\n                    }\n                });\n            }\n        });\n    });\n\n    $feedback_dialog.dialog({\n        resizable: true,\n        height: 500,\n        width: 700,\n        modal: true,\n        buttons: {\n            \"Cancel\": function() {\n                $( this ).dialog( \"close\" );\n            },\n            \"Send\": function() {\n                $(\"form\", $feedback_dialog).trigger('submit');\n            }\n        }\n    });\n    return $feedback_dialog;\n};\n\n/**\n * Handle jQuery load() errors (E.g. timeout)\n * In this case we simply refresh (will redirect to login page)\n**/\nOME.setupAjaxError = function(feedbackUrl){\n\n    $(document).ajaxError(function(e, req, settings, exception) {\n        var error;\n        if (req.status == 404) {\n            var msg = \"Url: \" + settings.url + \"<br/>\" + req.responseText;\n            OME.confirm_dialog(msg, null, \"404 Error\", [\"OK\"], 360, 200);\n        } else if (req.status == 403) {\n            // Denied (E.g. session timeout) Refresh - will redirect to login page\n            window.location.reload();\n        } else if (req.status == 500) {\n            // Our 500 handler returns only the stack-trace if request.is_json()\n            error = req.responseText;\n            // If the failed request was loading feedback, prevent recursive loading of feedback!\n            if (settings.url.startsWith(feedbackUrl)) {\n                return;\n            }\n            OME.feedback_dialog(error, feedbackUrl);\n        } else if (req.status == 400) {\n            if (req.responseText.indexOf('Request Line is too large') > -1) {\n                // This should be handled by the caller - e.g. loading of right panel\n            } else {\n                // 400 Bad Request. Usually indicates some invalid parameter, e.g. an invalid group id\n                // Usually indicates a problem with the webclient rather than the server as the webclient\n                // requested something invalid\n                error = req.responseText;\n                OME.feedback_dialog(error, feedbackUrl);\n            }\n        }\n    });\n};\n\n\n/*\n * NB: This code is NOT USED currently. Experimental.\n * A dialog for logging-in on the fly (without redirect to login page).\n * On clicking 'Connect' we post username & password to login url and on callback, the callback function is called\n */\nOME.login_dialog = function(login_url, callback) {\n\n    var $dialog = $(\"#login_dialog\");\n    if ($dialog.length > 0) {       // get rid of any old dialogs\n        $dialog.remove();\n    }\n    $dialog = $(\"<div id='login_dialog'></div>\");\n    $('body').append($dialog);\n\n    $dialog.attr(\"title\", \"Login\").hide();\n    $dialog.html(\"<form>Username:<input type='text' name='username' id='login_username' /><br />Password:<input type='text' name='password' id='login_password'/>\");\n\n    $dialog.dialog({\n        resizable: true,\n        height: 200,\n        width: 300,\n        modal: true,\n        buttons: {\n            \"Cancel\": function() {\n                $( this ).dialog( \"close\" );\n            },\n            \"Connect\": function() {\n                var username = $(\"#login_username\").val();\n                var password = $(\"#login_password\").val();\n                $.post(login_url, {'password':password, 'username':username, 'noredirect':'true'},  function(data) {\n                    //console.log(\"logged-in...\");\n                    callback();\n                });\n                $( this ).dialog( \"close\" );\n            }\n        }\n    });\n    $dialog.bind(\"dialogclose\", callback);\n\n    return $dialog;\n};\n\n\n(function ($) {\n\n    // This jQuery plugin is used to init a right-panel webclient-plugin (too many plugins!)\n    // It adds listeners to selection and tab-change events, updating the panel by loading\n    // a url based on the currently selected objects.\n    // Example usage:\n    //\n    //  $(\"#rotation_3d_tab\").omeroweb_right_plugin({           // The tab content element\n    //      plugin_index: 3,                                    // The tab index\n    //      load_plugin_content: function(selected, obj_dtype, obj_id) {    // Url based on selected object(s)\n    //          $(this).load('{% url weblabs_index %}rotation_3d_viewer/'+obj_id);\n    //      },\n    //      supported_obj_types: ['image','dataset'],   // E.g. only support single image/dataset selected\n    //  });\n    $.fn.omeroweb_right_plugin = function (settings) {\n\n        var returnValue = this;\n\n        // Process each jQuery object in array\n        this.each(function(i) {\n            // 'this' is the element we're working with\n            var $this = $(this);\n            var plugin_tab_index = $this.index()-1;\n\n            // store settings\n            // 'load_plugin_content' was called 'load_tab_content' (4.4.9 and earlier). Support both...\n            var load_plugin_content = settings['load_plugin_content'] || settings['load_tab_content'],\n                supported_obj_types = settings['supported_obj_types'],\n                // only used if 'supported_obj_types' undefined. (was called 'tab_enabled' in 4.4.9)\n                plugin_enabled = settings['plugin_enabled'] || settings['tab_enabled'];\n\n            var update_tab_content = function() {\n                // get the selected id etc\n                var selected = $(\"body\").data(\"selected_objects.ome\");\n                if (selected.length === 0) {\n                    return;\n                }\n                var obj_id = selected[0]['id'];     // E.g. image-123\n                var dtype = obj_id.split(\"-\")[0];    // E.g. 'image'\n                var oid = obj_id.split(\"-\")[1];\n\n                // if the tab is visible and not loaded yet...\n                if ($this.is(\":visible\") && $this.is(\":empty\")) {\n                    // we want the context of load_plugin_content to be $this\n                    $.proxy(load_plugin_content, $this)(selected, dtype, oid);\n                }\n            };\n\n            // update tabs when tree selection changes or tabs switch\n            $(\"#annotation_tabs\").on( \"tabsactivate\", function(event, ui){\n                // we get a \"tabsactivate\" event, but need to check if 'this' tab was chosen...\n                if (ui.newTab.index() == plugin_tab_index) {\n                    $this.show();   // sometimes this doesn't get shown until too late\n                    update_tab_content();\n                }\n            });\n\n            // on change of selection in tree, update which tabs are enabled\n            $(\"body\").on(\"selection_change.ome\", function(event) {\n\n                // clear contents of panel\n                $this.empty();\n\n                // get selected objects\n                var selected = $(\"body\").data(\"selected_objects.ome\");\n                if (selected.length === 0) {\n                    $(\"#annotation_tabs\").tabs(\"disable\", plugin_tab_index);\n                    return;\n                }\n                var obj_id = selected[0]['id'];     // E.g. image-123\n                var orel = obj_id.split(\"-\")[0];    // E.g. 'image'\n\n                // we only care about changing selection if this tab is selected...\n                var select_tab = $(\"#annotation_tabs\").tabs( \"option\", \"selected\" );\n                var supported;\n                if (typeof supported_obj_types != 'undefined') {\n                    supported = ($.inArray(orel, supported_obj_types) >-1) && (selected.length == 1);\n                } else {\n                    supported = plugin_enabled ? plugin_enabled(selected) : true;\n                }\n\n                // update enabled & selected state\n                if(!supported) {\n                    if (plugin_tab_index == select_tab) {\n                        // if we're currently selected - switch to first tab\n                        $(\"#annotation_tabs\").tabs(\"select\", 0);\n                    }\n                    $(\"#annotation_tabs\").tabs(\"disable\", plugin_tab_index);\n                } else {\n                    $(\"#annotation_tabs\").tabs(\"enable\", plugin_tab_index);\n                    // update tab content\n                    update_tab_content();\n                }\n            });\n\n        });\n        // return the jquery selection (or if it was a method call that returned a value - the returned value)\n        return returnValue;\n    };\n\n\n    // This plugin is similar to the one above, handling center-panel webclient-plugin init.\n    $.fn.omeroweb_center_plugin = function (settings) {\n\n        var returnValue = this;\n\n        // Process each jQuery object in array\n        this.each(function(i) {\n            // 'this' is the element we're working with\n            var $this = $(this),\n                plugin_index = $this.index() - 1;\n\n            // store settings\n            var load_plugin_content = settings['load_plugin_content'],\n                supported_obj_types = settings['supported_obj_types'],\n                plugin_enabled = settings['plugin_enabled'],      // only used if 'supported_obj_types' undefined\n                empty_on_sel_change = settings['empty_on_sel_change'];\n            if (typeof empty_on_sel_change == 'undefined') {\n                empty_on_sel_change = true;  // TODO use default settings\n            }\n\n            var update_plugin_content = function() {\n                // get the selected id etc\n                var selected = $(\"body\").data(\"selected_objects.ome\");\n                if (selected.length === 0) {\n                    return;\n                }\n                var obj_id = selected[0]['id'];     // E.g. image-123\n                var dtype = obj_id.split(\"-\")[0];    // E.g. 'image'\n                var oid = obj_id.split(\"-\")[1];\n\n                // if the tab is visible...\n                if ($this.is(\":visible\")) {\n                    // we want the context of load_plugin_content to be $this\n                    $.proxy(load_plugin_content,$this)(selected, dtype, oid);\n                }\n            };\n\n\n            $('#center_panel_chooser').on('center_plugin_changed.ome', update_plugin_content);\n\n            // on change of selection in tree, update which tabs are enabled\n            $(\"body\").on(\"selection_change.ome\", function(event) {\n\n                // clear contents of panel\n                if (empty_on_sel_change) {\n                    $this.empty();\n                }\n\n                // get selected objects\n                var selected = $(\"body\").data(\"selected_objects.ome\");\n                if (selected.length === 0) {\n                    OME.set_center_plugin_enabled(plugin_index, false);\n                    return;\n                }\n                var obj_id = selected[0]['id'];     // E.g. image-123\n                var orel = obj_id.split(\"-\")[0];    // E.g. 'image'\n\n                // do we support the data currently selected?\n                var supported;\n                if (typeof supported_obj_types != 'undefined') {\n                    // simply test E.g. if \"image\" is in the supported types\n                    supported = ($.inArray(orel, supported_obj_types) >-1) && (selected.length == 1);\n                } else {\n                    // OR use the user-specified function to check support\n                    supported = plugin_enabled ? plugin_enabled(selected) : true;\n                }\n\n                // update enabled state\n                OME.set_center_plugin_enabled(plugin_index, supported);\n                if(supported) {\n                    update_plugin_content();\n                } else {\n                    $this.empty();\n                }\n            });\n        });\n\n        // return the jquery selection (or if it was a method call that returned a value - the returned value)\n        return returnValue;\n    };\n\n}(jQuery));\n\n\n// jQuery plugin: simple emulation of table-sorter for other elements...\n// Based on code from 'Learning jQuery 1.3 http://book.learningjquery.com/'\n// Called on an element that resembles a table.\n// Example usage:\n//$(\".element_sorter\").elementsorter({\n//    head: '.thead div',             // Selector for the equivalent of 'table head'\n//    body: 'li.row',                 // Selector for the equivalent of 'table rows'\n//    sort_key: '.hidden_sort_text'   // optional - how to find the text within each child of a 'row'.\n//});\n(function ($) {\n\n    \"use strict\";\n\n    var methods = {\n\n    // initialise the plugin\n    init : function (options) {\n\n        if (!options.head || !options.body) {\n            return;\n        }\n\n        return this.each(function(){\n            var $this = $(this),\n                data = $this.data('elementsorter');\n\n            // If the plugin hasn't been initialized yet\n            if ( ! data ) {\n\n                data = options;     // save for later ref (E.g. destroy())\n                \n                var $headers = $(options.head, $this);\n                // for each 'column'...\n                $headers.each(function(column) {\n                    var $header = $(this),\n                        findSortKey;\n                    var findSortText = function($cell) {\n                        if (options.sort_key) {\n                            if ($(options.sort_key, $cell).length > 0) {\n                                return $(options.sort_key, $cell).text();\n                            }\n                        }\n                        return $cell.text();\n                    };\n                    if ($header.is('.sort-alpha')) {\n                        findSortKey = function($cell) {\n                            return findSortText($cell).toLowerCase();\n                        };\n                    } else if ($header.is('.sort-numeric')) {\n                        findSortKey = function($cell) {\n                            var key = findSortText($cell).replace(/^[^\\d.]*/, '');\n                            key = parseFloat(key);\n                            return isNaN(key) ? 0 : key;\n                        };\n                    } else if ($header.is('.sort-date')) {\n                        findSortKey = function($cell) {\n                            var date = Date.parse(findSortText($cell));\n                            return isNaN(date) ? 0 : date;\n                        };\n                    }\n                    if (findSortKey) {\n                        $header\n                            .addClass('clickable')\n                            .on('click', function() {\n                                var sortDirection = 1;\n                                if ($header.is('.sorted-asc')) {\n                                    sortDirection = -1;\n                                }\n                                var rows = $(options.body, $this).get();\n                                // populate each row with current sort key\n                                $.each(rows, function(index, row) {\n                                    var $row = $(row),\n                                        $cell = $row.children().eq(column);\n                                    row.sortKey = findSortKey($cell);\n                                    row.dataId = $row.attr('data-id');\n                                });\n                                // Do the sorting...\n                                rows.sort(function(a, b){\n                                    if (a.sortKey === b.sortKey) {\n                                        return a.dataId <= b.dataId ? -sortDirection : sortDirection;\n                                    }\n                                    return a.sortKey < b.sortKey ? -sortDirection : sortDirection;\n                                });\n                                // add rows to DOM in order\n                                $.each(rows, function(index, row) {\n                                    $this.append(row);\n                                    row.sortKey = null;\n                                });\n                                // clear classes from other headers\n                                $headers.removeClass('sorted-asc')\n                                    .removeClass('sorted-desc');\n                                if (sortDirection == 1) {\n                                    $header.addClass('sorted-asc');\n                                } else {\n                                    $header.addClass('sorted-desc');\n                                }\n                            });\n                        // In this case, we sort by this column during plugin init.\n                        if ($header.is('.sort-init')) {\n                            $header.trigger('click');\n                        }\n                    }\n                });\n\n                $this.data('elementsorter', data);\n                \n            }\n        });\n    },\n\n    destroy: function() {\n        \n        return this.each(function(){\n            //var $this = $(this),\n            //    data = $this.data('elementsorter');\n\n            // all we need to do is remove the click handlers from headers\n            // var $headers = $(data.head, $this);\n        });\n    }\n\n    };\n\n\n    // the plugin definition: either we init or we're calling a named method.\n    $.fn.elementsorter = function( method ) {\n\n        if ( methods[method] ) {\n          return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n        }\n        if ( typeof method === 'object' || ! method ) {\n          return methods.init.apply( this, arguments );\n        }\n        $.error( 'Method ' +  method + ' does not exist on jQuery.src_loader' );\n    };\n\n}(jQuery));\n\n// ** TESTING ONLY **\n// http://remysharp.com/2007/11/01/detect-global-variables/\nif (false) {                    // set to 'true' to run. NB: Need to uncomment 'console.log..' below.\n    setTimeout(function(){      // use timeout to allow all scripts to load etc\n        console.log(\"SHOWING GLOBAL VARIABLES...\");\n        var differences = {},\n            exceptions,\n            globals = {},\n            //ignoreList = (prompt('Ignore filter (comma sep)?', '') || '').split(','),\n            ignoreList = [],    // E.g. [\"function\"]\n            i = ignoreList.length,\n            iframe = document.createElement('iframe');\n        while (i--) {\n          globals[ignoreList[i]] = 1;\n        }\n        for (i in window) {\n          differences[i] = {\n            'type': typeof window[i],\n            'val': window[i]\n          };\n        }\n        iframe.style.display = 'none';\n        document.body.appendChild(iframe);\n        iframe.src = 'about:blank';\n        iframe = iframe.contentWindow || iframe.contentDocument;\n        for (i in differences) {\n          if (typeof iframe[i] != 'undefined') {delete differences[i];}\n          else if (globals[differences[i].type]) {delete differences[i];}\n        }\n        exceptions = 'addEventListener,document,location,navigator,window'.split(',');\n        exceptions.push(\"jQuery\", \"$\");  // Ignore jQuery etc...\n        exceptions.push(\"isClientPhone\", \"callback\", \"isClientTouch\", \"isIE\");      // from panojs/utils.js\n        exceptions.push(\"sanitizeHexColor\", \"toRGB\", \"rgbToHex\", \"parseQuery\", \"downloadLandingDialog\"); // from ome.gs_utils.js\n        // All these from PanoJS\n        exceptions.push(\"PanoJS\", \"PanoControls\", \"BisqueISLevel\", \"BisqueISPyramid\", \"formatInt\");\n        exceptions.push(\"ImgcnvPyramid\", \"ImgcnvLevel\", \"InfoControl\", \"Metadata\", \"OsdControl\", \"ROIControl\", \"ScaleBarControl\");\n        exceptions.push(\"Tile\", \"ZoomifyLevel\", \"ZoomifyPyramid\", \"SvgControl\", \"ThumbnailControl\", \"trim\");\n        i = exceptions.length;\n        while (--i) {\n          delete differences[exceptions[i]];\n        }\n        console.dir(differences);     // comment out to keep jsHint happy!\n    }, 1000);\n}\n", "/**\n*  plugin for displaying ROIs over an image canvas *\n*  Requires Raphael      http://raphaeljs.com/\n*  and scale.raphael.js  http://shapevent.com/scaleraphael/\n*/\n\n$.fn.roi_display = function(options) {\n    return this.each(function(){\n\n        var self = this;\n        var viewerId = this.id;\n\n        var $viewportimg = $(this);\n        var width = $viewportimg.attr('width');   // 0 initially\n        var height = $viewportimg.attr('height');\n\n        var tiles =  (options.tiles ? options.tiles : false);\n\n        var canvas_class = (options.canvas_class ? options.canvas_class : 'weblitz-viewport-roi');\n\n        if (!tiles) {\n            // add our ROI canvas as a sibling to the image plane. Parent is the 'draggable' div\n            var $dragdiv = $viewportimg.parent();\n            var canvas_name = (options.canvas_name ? options.canvas_name : viewerId + '-roi');\n            var $canvas =   $('<div id=\"'+canvas_name+'\" class=\"'+canvas_class+'\">').appendTo($dragdiv);\n        } else {\n            var canvas_name = (options.canvas_name ? options.canvas_name : viewerId + '-tiles-roi');\n            var $canvas = $('#'+viewerId + '-tiles-roi')\n        }\n\n        if (options != null) {\n            var orig_width = options.width;\n            var orig_height = options.height;\n            var webgateway_index = options.webgateway_index;    // base url\n            var json_url = options.json_url;\n        }\n\n        var roi_json = null;              // load ROI data as json when needed\n        var active_rois = {};             // show only the active ROIs\n        var external_rois = null;          // ROIs specified using an external software\n        var original_shapes_backup = {};  // backup of the original configuration of shapes\n        this.theZ = null;\n        this.theT = null;\n        var rois_displayed = false;         // flag to toggle visability.\n        var roi_label_displayed = true;     // show/hide labels within shapes\n\n        var selected_shape_id = null;  // html page is kept in sync with this\n        var selectedClone = null;      // a highlighted shape cloned from currently selected shape\n\n        // for keeping track of objects - E.g. de-select all.\n        var shape_objects = new Array();\n\n        // Creates Raphael canvas. Uses scale.raphael.js to provide paper.scaleAll(ratio);\n        var paper = new ScaleRaphael(canvas_name, orig_width, orig_height);\n\n        // convert given id to a number if possible\n        var resolve_id = function(id) {\n            if(isNaN(parseInt(id)))\n                return id;\n            else\n                return parseInt(id);\n        };\n\n        // break long labels into multiple lines\n        var formatShapeText = function(text_string) {\n            var rows = parseInt(Math.sqrt(text_string.length / 6));     // rough ratio: cols = rows * 6\n            var cols = parseInt(text_string.length/rows) + 1;\n            if (text_string.length > cols) {\n                var lines = [];\n                var full_words = text_string.split(\" \");\n                var words = [];\n                // first handle any words that are too long\n                for (var w=0; w<full_words.length; w++) {\n                    var full_word = full_words[w];\n                    while (full_word.length > cols) {\n                        words.push(full_word.substring(0, cols));\n                        full_word = full_word.substring(cols);\n                    }\n                    words.push(full_word);\n                }\n                // now stitch words back into lines\n                var line = \"\";\n                for (var w=0; w<words.length; w++) {\n                    var word = words[w];\n                    if (line.length == 0) {\n                        line = word;\n                    }\n                    else if (word.length + line.length > cols) {\n                        lines.push(line);\n                        line = word;\n                    }\n                    else {\n                        line += (\" \" + word);\n                    }\n                }\n                // handle the tail end\n                if (line.length > 0)\n                    lines.push(line);\n                return lines.join(\"\\n\");\n            }\n            return text_string;\n        };\n\n        var getArrowPath = function getArrowPath(shape) {\n\n            // We want the arrow tip to be precisely at x2, y2, so we\n            // can't have a fat line at x2, y2. Instead we need to\n            // trace the whole outline of the arrow with a thin line\n            var x1 = shape['x1'],\n                y1 = shape['y1'],\n                x2 = shape['x2'],\n                y2 = shape['y2'],\n                w = shape['strokeWidth'] || 1;\n            w = w * 0.5;\n\n            var arrowStart = shape.markerStart === \"Arrow\";\n            var arrowEnd = shape.markerEnd === \"Arrow\";\n\n            var headSize = (w * 12) + 9,\n                dx = x2 - x1,\n                dy = y2 - y1;\n\n            var lineAngle = Math.atan(dx / dy);\n            var f = (dy < 0 ? 1 : -1);\n\n            // We calculate the 4 corners of the Line (without arrow heads)\n            var lineOffsetX = f * Math.cos(lineAngle) * w,\n                lineOffsetY = f * Math.sin(lineAngle) * w,\n                startLeftX = x1 - lineOffsetX,\n                startLeftY = y1 + lineOffsetY,\n                startRightX = x1 + lineOffsetX,\n                startRightY = y1 - lineOffsetY,\n                endLeftX = x2 - lineOffsetX,\n                endLeftY = y2 + lineOffsetY,\n                endRightX = x2 + lineOffsetX,\n                endRightY = y2 - lineOffsetY;\n\n            var arrowPath = \"\";\n            var arrowPoint1x, arrowPoint1y, arrowPoint2x, arrowPoint2y;\n            // if line starts with arrow...\n            var arrowAngle1 = lineAngle - 0.35;\n            var arrowAngle2 = lineAngle + 0.35;\n            if (arrowStart) {\n                arrowPoint1x = x1 - (f * Math.sin(arrowAngle1) * headSize);\n                arrowPoint1y = y1 - (f * Math.cos(arrowAngle1) * headSize);\n                arrowPoint2x = x1 - (f * Math.sin(arrowAngle2) * headSize);\n                arrowPoint2y = y1 - (f * Math.cos(arrowAngle2) * headSize);\n                var startArrowPointMidx = (arrowPoint1x + arrowPoint2x) / 2,\n                    startArrowPointMidy = (arrowPoint1y + arrowPoint2y) / 2;\n                startLeftX = startArrowPointMidx - lineOffsetX;\n                startLeftY = startArrowPointMidy + lineOffsetY;\n                startRightX = startArrowPointMidx + lineOffsetX;\n                startRightY = startArrowPointMidy - lineOffsetY;\n                // start line with Start Arrow head\n                arrowPath += \" M\" + startRightX + \" \" + startRightY;\n                arrowPath += \" L\" + arrowPoint1x + \" \" + arrowPoint1y + \" L\" + x1 + \" \" + y1;\n                arrowPath += \" L\" + arrowPoint2x + \" \" + arrowPoint2y;\n                arrowPath += \" L\" + startLeftX + \" \" + startLeftY;\n            } else {\n                // ...otherwise, start with plain end of line\n                arrowPath += \" M\" + startRightX + \" \" + startRightY;\n                arrowPath += \" L\" + startLeftX + \" \" + startLeftY;\n            }\n\n            // if line ends with arrow, line end is within arrow point\n            if (arrowEnd) {\n                arrowPoint1x = x2 + (f * Math.sin(arrowAngle1) * headSize);\n                arrowPoint1y = y2 + (f * Math.cos(arrowAngle1) * headSize);\n                arrowPoint2x = x2 + (f * Math.sin(arrowAngle2) * headSize);\n                arrowPoint2y = y2 + (f * Math.cos(arrowAngle2) * headSize);\n                var endArrowPointMidx = (arrowPoint1x + arrowPoint2x) / 2,\n                    endArrowPointMidy = (arrowPoint1y + arrowPoint2y) / 2;\n                endLeftX = endArrowPointMidx - lineOffsetX;\n                endLeftY = endArrowPointMidy + lineOffsetY;\n                endRightX = endArrowPointMidx + lineOffsetX;\n                endRightY = endArrowPointMidy - lineOffsetY;\n                // End line with End Arrow Head\n                arrowPath += \" L\" + endLeftX + \" \" + endLeftY;\n                arrowPath += \" L\" + arrowPoint1x + \" \" + arrowPoint1y + \" L\" + x2 + \" \" + y2;\n                arrowPath += \" L\" + arrowPoint2x + \" \" + arrowPoint2y;\n                arrowPath += \" L\" + endRightX + \" \" + endRightY;\n            } else {\n                // ...otherwise simple line end\n                arrowPath += \" L\" + endLeftX + \" \" + endLeftY;\n                arrowPath += \" L\" + endRightX + \" \" + endRightY;\n            }\n\n            // ...and back to start point\n            arrowPath += \" L\" + startRightX + \" \" + startRightY;\n\n            return arrowPath;\n        };\n\n\n        var draw_shape = function(shape) {\n            console.log(shape['type']);\n            var newShape = null;\n            if (shape['type'] == 'Mask') {\n              var src = webgateway_index + 'render_shape_mask/' + shape['id'] + '/';\n              newShape = paper.image(src, shape['x'], shape['y'], shape['width'], shape['height']);\n            }\n            if (shape['type'] == 'Ellipse') {\n              newShape = paper.ellipse(shape['x'], shape['y'], shape['radiusX'], shape['radiusY']);\n            }\n            else if (shape['type'] == 'Rectangle') {\n              newShape = paper.rect(shape['x'], shape['y'], shape['width'], shape['height']);\n            }\n            else if (shape['type'] == 'Point') {\n              newShape = paper.ellipse( shape['x'], shape['y'], 2, 2);\n            }\n            else if (shape['type'] == 'Line') {\n              // define line as 'path': Move then Line: E.g. \"M10 10L90 90\"\n\n              if (shape.markerStart || shape.markerEnd) {\n                var arrowPath = getArrowPath(shape);\n\n                newShape = paper.path(arrowPath);\n                newShape.attr({'stroke-width': 0});\n                // We don't want to apply strokeWidth later\n                shape['strokeWidth'] = 0;\n                shape['fillColor'] = shape['strokeColor'];\n                shape['fillAlpha'] = shape['strokeAlpha'];\n              } else {\n                newShape = paper.path(\"M\"+ shape['x1'] +\" \"+ shape['y1'] +\"L\"+ shape['x2'] +\" \"+ shape['y2'] );\n              }\n\n            }\n            else if (shape['type'] == 'PolyLine') {\n              newShape = paper.path( shape['points'] );\n            }\n            else if (shape['type'] == 'Polygon') {\n              newShape = paper.path( shape['points'] );\n            }\n            else if (shape['type'] == 'Label') {\n              if (shape['textValue']) {\n                  newShape = paper.text(shape['x'], shape['y'], shape['textValue'].escapeHTML()).attr({'text-anchor':'start'});\n              }\n            }\n            // handle transforms. Insight supports: translate(354.05 83.01) and rotate(0 407.0 79.0)\n            if (shape['transform']) {\n                if (shape['transform'].substr(0, 'translate'.length) === 'translate'){\n                    var tt = shape['transform'].replace('translate(', '').replace(')', '').split(\" \");\n                    var tx = parseInt(tt[0]);   // only int is supported by Raphael\n                    var ty = parseInt(tt[1]);\n                    newShape.translate(tx,ty);\n                }\n                else if (shape['transform'].substr(0, 'rotate'.length) === 'rotate'){\n                    var tt = shape['transform'].replace('rotate(', '').replace(')', '').split(\" \");\n                    var deg = parseFloat(tt[0]);\n                    var rotx = parseFloat(tt[1]);\n                    var roty = parseFloat(tt[2]);\n                    newShape.rotate(deg, rotx, roty);\n                }\n                else if (shape['transform'].substr(0, 'matrix'.length) === 'matrix'){\n                    var tt = shape['transform'].replace('matrix(', '').replace(')', '').split(\" \");\n                    var a1 = parseFloat(tt[0]);\n                    var a2 = parseFloat(tt[1]);\n                    var b1 = parseFloat(tt[2]);\n                    var b2 = parseFloat(tt[3]);\n                    var c1 = parseFloat(tt[4]);\n                    var c2 = parseFloat(tt[5]);\n                    var tmatrix = \"m\"+a1+\",\"+a2+\",\"+b1+\",\"+b2+\",\"+c1+\",\"+c2;\n                    newShape.transform(tmatrix);\n                }\n            }\n            return newShape;\n        }\n\n        var get_tool_tip = function(shape) {\n            var toolTip = \"\";\n            if (shape['type'] == 'Ellipse') {\n              toolTip = \"x:\"+ shape['x'] +\" y:\"+ shape['y'] +\" radiusX:\"+ shape['radiusX'] + \" radiusY: \"+  shape['radiusY'];\n            }\n            else if (shape['type'] == 'Rectangle') {\n              toolTip = \"x:\"+ shape['x'] +\" y:\"+ shape['y'] +\n                \" width:\"+ shape['width'] + \" height: \"+  shape['height'];\n            }\n            else if (shape['type'] == 'Point') {\n              toolTip = \"x:\"+ shape['x'] +\" y:\"+ shape['y'];\n            }\n            else if (shape['type'] == 'Line') {\n              toolTip = \"x1:\"+ shape['x1'] +\" y1:\"+ shape['y1'] +\" x2:\"+ shape['x2'] +\" y2:\"+ shape['y2'];\n            }\n            else if (shape['type'] == 'PolyLine') {\n            }\n            else if (shape['type'] == 'Polygon') {\n            }\n            else if (shape['type'] == 'Label') {\n            }\n            return toolTip;\n        }\n\n        // if the currently selected shape is visible - highlight it\n        display_selected = function() {\n            // *NB: For some reason, can't overlay text with selectedClone.\n            // So, for text shapes, we highlight by editing attributes instead.\n            if ((selectedClone != null) && (selectedClone.type != 'text')) {\n                if (selectedClone.node.parentNode.parentNode) selectedClone.remove();\n            }\n            if (selected_shape_id == null) return;\n\n            selectedClone = null;\n            for (var i=0; i<shape_objects.length; i++) {\n                var s = shape_objects[i];\n                var shape_id = resolve_id(s.id);\n                if (shape_id == selected_shape_id) {\n                    if (s.type == 'text') {\n                        selectedClone = null;\n                        strokeWidth = Math.ceil(s.attr('font-size')/10);\n                        s.attr({'stroke': '#00a8ff', 'stroke-width': strokeWidth});\n                    } else {\n                        strokeWidth = (s.attr('stroke-width') > 0) ? Math.ceil(s.attr('stroke-width')/2) : 1;\n                        selectedClone = s.clone();\n                        selectedClone.attr({'stroke': '#00a8ff', 'stroke-width': strokeWidth,\n                                            'fill-opacity': 0});\n                    }\n                } else {\n                    if (s.type == 'text') {\n                        s.attr({'stroke': null, 'stroke-width': null}); // remove stroke\n                    }\n                }\n            }\n            return selectedClone;\n        }\n\n        this.set_selected_shape = function(shape_id) {\n            selected_shape_id = shape_id;\n            $viewportimg.trigger(\"shape_click\", [shape_id]);\n            var sel_shape = display_selected();\n            var sel_x;\n            var sel_y;\n            // we will only get the shape if currently displayed (current Z/T section)\n            if (sel_shape===null) {\n                // otherwise we have to work it out by drawing it\n                var bb = null;\n                for (var r=0; r<roi_json.length; r++) {\n                    if (bb != null)   break;\n                    var roi = roi_json[r];\n                    var shapes = roi['shapes'];\n                    var shape = null;\n                    for (var s=0; s<shapes.length; s++) {\n                        shape = shapes[s];\n                        if (shape['id'] == selected_shape_id) {\n                            var newShape = draw_shape(shape);\n                            bb = newShape.getBBox();\n                            newShape.remove();\n                            if (shape['type'] == 'Label'){\n                                // bug in BBox for text\n                                sel_x = shape['x'] + (bb.width/2);\n                                sel_y = shape['y'] + (bb.height/2);\n                            } else {\n                                sel_x = bb.x + (bb.width/2);\n                                sel_y = bb.y + (bb.height/2);\n                            }\n                        }\n                    }\n                }\n            } else {\n                var bb = sel_shape.getBBox();\n                sel_x = bb.x + (bb.width/2);\n                sel_y = bb.y + (bb.height/2);\n            }\n            return {'x':sel_x, 'y':sel_y};\n        }\n\n        // called when user clicks on ROI\n        handle_shape_click = function(event) {\n            var shape = this;\n            var shape_id = resolve_id(shape.id);\n            self.set_selected_shape(shape_id);\n        }\n\n        // load the ROIs from json call and display\n        load_rois = function(display_rois, filter, callback) {\n            if (json_url == undefined) return;\n\n            $.getJSON(json_url+'?callback=?', function(data) {\n                roi_json = data;\n\n                // plot the rois\n                if (display_rois) {\n                  rois_displayed = true;\n                  refresh_rois(undefined, undefined, filter);\n                }\n                $viewportimg.trigger(\"rois_loaded\");\n\n                if (callback) {\n                    callback();\n                }\n            });\n        }\n\n        /*\n        If filter is not 'undefined' use the given ROI and shape IDs to build the list of active\n        elements that will be shown by the web viewer.\n        Filter is an associative array like\n          {\n           12: [1,2,3],\n           13: []\n          }\n        where keys are the ID of the ROIs and values lists with IDs of the selected shapes for\n        the given ROIs. If the value of a key is an empty list, all shapes related to that ROI\n        will be considered as active.\n        If the filter is 'undefined' set all ROIs and shapes coming from the DB as active.\n        The active_rois object will be used to determinate which shapes will be displayed by the\n        user interface when a change on the viewport occurs (like changing the Z or the T value).\n         */\n        filter_rois = function (filter) {\n            var global_rois = [];\n            $.merge(global_rois, roi_json);\n            if (external_rois)\n                $.merge(global_rois, external_rois);\n\n            if (filter != undefined) {\n                for (var r=0; r<global_rois.length; r++) {\n                    // check if ROI is in filter\n                    if (filter.hasOwnProperty(global_rois[r].id)) {\n                        if (!active_rois.hasOwnProperty(global_rois[r].id))\n                            active_rois[global_rois[r].id] = [];\n                        // check if one or more shapes of the current ROI are in filter\n                        var shapes = global_rois[r]['shapes'];\n                        for (s=0; s<shapes.length; s++) {\n                            if (filter[global_rois[r].id].indexOf(shapes[s].id) != -1 &&\n                                active_rois[global_rois[r].id].indexOf(shapes[s].id) == -1) {\n                                active_rois[global_rois[r].id].push(shapes[s].id);\n                            }\n                        }\n                    }\n                }\n            } else {\n                for (var r=0; r<global_rois.length; r++) {\n                    if (!active_rois.hasOwnProperty(global_rois[r].id)) {\n                        active_rois[global_rois[r].id] = [];\n                    }\n                    var shapes = global_rois[r]['shapes'];\n                    for (s=0; s<shapes.length; s++) {\n                        if (active_rois[global_rois[r].id].indexOf(shapes[s].id) == -1)\n                            active_rois[global_rois[r].id].push(shapes[s].id);\n                    }\n                }\n            }\n        }\n\n        /*\n        Use active_rois to actually filter and retrieve ROIs and shapes that are going to be\n        visualized in the viewport from the list of ROIs retrieved from the server.\n        The list of ROIs coming from the server, referenced as 'roi_json', won't be modified.\n         */\n        get_active_rois = function () {\n            var act_rois = [];\n\n            // merge ROIs coming from OMERO server and external ROIs\n            var global_rois = [];\n            $.merge(global_rois, roi_json);\n            if (external_rois)\n                $.merge(global_rois, external_rois);\n            for (var r=0; r<global_rois.length; r++) {\n                if (active_rois.hasOwnProperty(global_rois[r].id)) {\n                    var roi = {\"id\": global_rois[r].id};\n                    var shapes = global_rois[r].shapes;\n                    if (active_rois[global_rois[r].id].length == 0) {\n                        // No filter for the shapes, append all of them\n                        roi['shapes'] = shapes;\n                        // Update filter as well, this will make possible to selectively disable shapes\n                        for (s = 0; s < shapes.length; s++) {\n                            active_rois[global_rois[r].id].push(shapes[s].id);\n                        }\n                    }\n                    else {\n                        roi['shapes'] = [];\n                        for (s=0; s<shapes.length; s++) {\n                            // Add only active shapes\n                            if (active_rois[global_rois[r].id].indexOf(shapes[s].id) != -1) {\n                                roi['shapes'].push(shapes[s]);\n                            }\n                        }\n                    }\n                    act_rois.push(roi);\n                }\n            }\n            return act_rois;\n        }\n\n        // get the filter that describes currently active ROIs and shapes\n        this.get_current_rois_filter = function() {\n            if (typeof active_rois != \"undefined\") {\n                if (Object.keys(active_rois).length == 0) {\n                    return undefined;\n                } else {\n                    return active_rois;\n                }\n            } else {\n                return undefined;\n            }\n        }\n\n        // activate ROI with ID 'roi_id' and its related shapes\n        this.activate_roi = function (roi_id) {\n            var roi_id = resolve_id(roi_id);\n            if (!active_rois.hasOwnProperty(roi_id)) {\n                active_rois[roi_id] = [];\n            }\n        }\n\n        // deactivate ROI with ID 'roi_id' and its related shapes\n        this.deactivate_roi = function (roi_id) {\n            var roi_id = resolve_id(roi_id);\n            if (active_rois.hasOwnProperty(roi_id)) {\n                delete active_rois[roi_id];\n            }\n        }\n\n        // activate shape with ID 'shape_id' related to ROI with ID 'roi_id'\n        this.activate_shape = function (roi_id, shape_id) {\n            var roi_id = resolve_id(roi_id);\n            var shape_id = resolve_id(shape_id);\n            if (active_rois.hasOwnProperty(roi_id)) {\n                if (active_rois[roi_id].indexOf(shape_id) == -1)\n                    active_rois[roi_id].push(shape_id);\n            } else {\n                this.activate_roi(roi_id);\n                this.activate_shape(roi_id, shape_id);\n            }\n        }\n\n        // deactivate shape with ID 'shape_id' related to ROI with ID 'roi_id'\n        this.deactivate_shape = function(roi_id, shape_id) {\n            var roi_id = resolve_id(roi_id);\n            var shape_id = resolve_id(shape_id);\n            if (active_rois.hasOwnProperty(roi_id)) {\n                if (active_rois[roi_id].indexOf(shape_id) != -1) {\n                    active_rois[roi_id].splice(active_rois[roi_id].indexOf(shape_id), 1);\n                }\n                // If no shape remains, delete the ROI from active_rois list\n                if (active_rois[roi_id].length == 0) {\n                    this.deactivate_roi(roi_id);\n                }\n            }\n        }\n\n        // returns the ROI data as json. May be null if not yet loaded!\n        this.get_roi_json = function() {\n            return roi_json;\n        }\n\n        // return the data of external ROI as json. May be null if not loaded!\n        this.get_external_rois_json = function() {\n            return external_rois;\n        }\n\n        // get json of all ROI, OME ones and external ones, as a unique list\n        this.get_full_roi_json = function() {\n            if (!roi_json && !external_rois)\n                return null;\n            else if (roi_json && external_rois)\n                return $.merge(roi_json, external_rois);\n            else if (roi_json && !external_rois)\n                return roi_json;\n            else if (!roi_json && external_rois)\n                return external_rois;\n        }\n\n        /*\n        Check if given ROI and SHAPE ID can be used to define a new external ROI.\n        ROI ID is valid if it is not alredy in use by an OME ROI.\n        SHAPE ID is valid if it is not alredy in use by another shape for external ROI with given ROI ID.\n         */\n        var check_ext_shape_id = function(roi_id, shape_id) {\n            // check if ROI ID is already used by one on OMERO's ROIs...\n            for (var rx=0; rx<roi_json.length; rx++) {\n                if (roi_json[rx][\"id\"] == roi_id) {\n                    console.error(\"ID \" + roi_id + \" already used by one of OMERO ROIs\");\n                    return false;\n                }\n            }\n            // ... if roi_id is used by an external ROI, check shape_id\n            for (var rx=0; rx<external_rois.length; rx++) {\n                if (external_rois[rx][\"id\"] == roi_id) {\n                    var shapes = external_rois[rx][\"shapes\"];\n                    for (var sx=0; sx<shapes.length; sx++) {\n                        if (shapes[sx][\"id\"] == shape_id) {\n                            console.error(\"Shape ID \" + shape_id + \" already in use for ROI \" + roi_id);\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n\n        // Check if there is another shape with on the same Z and T planes for this ROI\n        var check_ext_shape_planes = function(roi_id, shape_z, shape_t) {\n            for (var rx=0; rx<external_rois.length; rx++) {\n                if (external_rois[rx][\"id\"] == roi_id) {\n                    var shapes = external_rois[rx][\"shapes\"];\n                    for(var sx=0; sx<shapes.length; sx++) {\n                        if (shapes[sx][\"theZ\"] == shape_z && shapes[sx][\"theT\"] == shape_t) {\n                            console.error(\"Z plane \" + shape_z + \" and T plane \" + shape_t + \" already used\");\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n\n        // configure a shape obtained using function in ome.roiutils.js as a proper shape for OMERO.web viewer\n        var configure_shape = function(shape_id, shape_config) {\n            shape_config[\"id\"] = shape_id;\n        }\n\n        // build a proper ROI definition that can be used by OMERO.web viewer\n        var build_roi_description = function(roi_id, shapes) {\n            return {\n                \"id\": roi_id,\n                \"shapes\": typeof shapes !== \"undefined\" ? shapes : []\n            };\n        }\n\n        // append a shape to ROI with ID roi_id\n        var append_shape = function(roi_id, shape_config, rois_collection) {\n            for (var x=0; x<rois_collection.length; x++) {\n                if (rois_collection[x][\"id\"] == roi_id) {\n                    // ROI with ID roi_id already exists, append shape\n                    rois_collection[x][\"shapes\"].push(shape_config);\n                    return;\n                }\n            }\n            var roi = build_roi_description(roi_id, [shape_config]);\n            rois_collection.push(roi);\n        };\n\n        /*\n        Add a SHAPE definition to OMERO.web viewer. Shape will be associated to ROI with ID roi_id\n        and will obtain ID shape_id. Shape is described using shape_config dictionary.\n        If refresh_rois is TRUE, automatically refresh viewport.\n        If hide_ome_rois is TRUE, hide OME ROI when refreshing viewport.\n         */\n        this.add_external_shape = function(roi_id, shape_id, shape_config, refresh_rois, hide_ome_rois) {\n            if (roi_json == null) {\n                load_rois(false, undefined, function() {\n                    $viewportimg.trigger(\"add_external_shape\",\n                        [roi_id, shape_id, shape_config, refresh_rois, hide_ome_rois]);\n                });\n            } else {\n                $viewportimg.trigger(\"add_external_shape\", [roi_id, shape_id, shape_config, refresh_rois,\n                    hide_ome_rois]);\n            }\n        };\n\n        $viewportimg.on(\"add_external_shape\", function (event, roi_id, shape_id, shape_config,\n                                                        refresh_rois, hide_ome_rois) {\n            var roi_id = resolve_id(roi_id);\n            var shape_id = resolve_id(shape_id);\n\n            // initialize external_rois when used for the first time\n            if (!external_rois) {\n                external_rois = [];\n            }\n\n            var check_shape_id = check_ext_shape_id(roi_id, shape_id);\n            var check_shape_planes = check_ext_shape_planes(roi_id, shape_config['theZ'],\n                shape_config['theT']);\n\n            if (check_shape_id && check_shape_planes) {\n                // add ID to the shape\n                configure_shape(shape_id, shape_config);\n                // append shape to proper ROI\n                append_shape(roi_id, shape_config, external_rois);\n                this.activate_roi(roi_id);\n            }\n\n            // refresh current ROIs (False by default)\n            var refresh = typeof refresh_rois !== \"undefined\" ? refresh_rois : false;\n            if (refresh) {\n                // if hide_ome_rois is true, deactivate all ROIs coming from OMERO before refresh\n                var hide_oroi = typeof hide_ome_rois !== \"undefined\" ? hide_ome_rois : false;\n                if (hide_oroi && active_rois) {\n                    for (var r = 0; r < roi_json.length; r++) {\n                        this.deactivate_roi(roi_json[r][\"id\"]);\n                    }\n                }\n                this.refresh_active_rois();\n            }\n        });\n\n        /*\n        Remove SHAPE with ID shape_id from ROI with ID roi_id from external ROI list.\n        If refresh is TRUE, automatically refresh viewport.\n         */\n        this.remove_external_shape = function(roi_id, shape_id, refresh) {\n            if (! external_rois) {\n                console.warn(\"There are no external ROIs, nothing to do\");\n                return;\n            }\n            for(var r=0; r<external_rois.length; r++) {\n                var roi = external_rois[r];\n                if (roi[\"id\"] == resolve_id(roi_id)) {\n                    for(var s=0; s<roi[\"shapes\"].length; s++) {\n                        var shape = roi[\"shapes\"][s];\n                        if (shape[\"id\"] == resolve_id(shape_id)) {\n                            roi[\"shapes\"].splice(roi[\"shapes\"].indexOf(shape), 1);\n\n                            // If it was the last shape for the current ROI, delete the ROI as well\n                            if(roi[\"shapes\"].length == 0) {\n                                console.warn(\"No shape connected, removing ROI \" + roi_id);\n                                this.remove_roi(roi_id, refresh);\n                            } else {\n                                // refresh ROIs, if needed\n                                var refresh = typeof refresh_rois !== \"undefined\" ? refresh_rois : false;\n                                if (refresh)\n                                    this.refresh_active_rois();\n\n                                return;\n                            }\n                        }\n                    }\n                    console.warn(\"There is no Shape with ID \" + shape_id + \" for ROI \" + roi_id);\n                    return;\n                }\n            }\n            console.warn(\"There is no ROI with ID \" + roi_id);\n        };\n        /*\n        Remove ROI with ID roi_id from external ROI list.\n        If refresh is TRUE, automatically refresh viewport.\n         */\n        this.remove_external_roi = function(roi_id, refresh) {\n            if (! external_rois) {\n                console.warn(\"There are no external ROIs, nothing to do\");\n                return;\n            }\n            for (var r=0; r<external_rois.length; r++) {\n                var roi = external_rois[r];\n                if (roi[\"id\"] == resolve_id(roi_id)) {\n                    external_rois.splice(external_rois.indexOf(roi), 1);\n                    this.deactivate_roi(resolve_id(roi_id));\n\n                    var refresh = typeof refresh !== \"undefined\" ? refresh : false;\n                    if (refresh) {\n                        if (Object.keys(active_rois).length != 0) {\n                            this.refresh_active_rois();\n                        } else {\n                            this.hide_rois();\n                        }\n                    }\n                    return;\n                }\n            }\n            console.warn(\"There is no ROI with ID \" + roi_id);\n        }\n\n        /*\n        Clears paper and draws ROIs (if rois_displayed) for the given T and Z. NB: indexes are 1-based.\n        Only shapes in 'active_rois' are going to be displayed.\n        */\n        this.refresh_rois = function(theZ, theT, rois_filter) {\n\n            if (typeof theZ != 'undefined') this.theZ = theZ;\n            if (typeof theT != 'undefined') this.theT = theT;\n\n            paper.clear();\n            shape_objects.length = 0;\n            if (!rois_displayed) return;\n            // build the filter for active ROIs and shapes\n            filter_rois(rois_filter);\n            // apply the filter and get the description of ROIs and shapes that will be displayed\n            var rois = get_active_rois();\n            if (rois == null) return;\n\n            for (var r=0; r<rois.length; r++) {\n                var roi = rois[r];\n                var shapes = roi['shapes'];\n                var shape = null;\n                for (var s=0; s<shapes.length; s++) {\n                    shape = shapes[s];\n                    if (((shape.theT == this.theT-1)\n                         || typeof shape.theT === \"undefined\")\n                        && ((shape.theZ == this.theZ-1)\n                            || typeof shape.theZ === \"undefined\")) {\n                        var newShape = draw_shape(shape);\n                        var toolTip = get_tool_tip(shape);\n                        // Add text - NB: text is not 'attached' to shape in any way.\n                        if (newShape != null) {\n                            if (shape['type'] == 'PolyLine') {\n                                newShape.attr({'fill-opacity': 0});\n                            }\n                            if ((shape['textValue'] != null) && (shape['textValue'].length > 0)) {\n                                // Show text\n                                if (shape['type'] == 'Label') {\n                                    var txt = newShape; // if shape is label itself, use it\n                                    if (shape['strokeColor']) txt.attr({'fill': shape['strokeColor']}); // this is Insight's behavior\n                                    txt.attr({'stroke': null });\n                                } else if (roi_label_displayed) {\n                                    // otherwise, add a new label in the centre of the shape.\n                                    var bb = newShape.getBBox();\n                                    var textx = bb.x + (bb.width/2);\n                                    var texty = bb.y + (bb.height/2);\n                                    var text_string = formatShapeText(shape['textValue'].escapeHTML())\n                                    var txt = paper.text(textx, texty, text_string);    // draw a 'dummy' paragraph to work out it's dimensions\n                                    var newY = (texty-txt.getBBox().height/2)+9;\n                                    // moving the existing text to newY doesn't seem to work - instead, remove and draw a new one\n                                    txt.remove();\n                                    txt = paper.text(textx, newY, formatShapeText(shape['textValue'].escapeHTML()))\n                                               .attr({'cursor':'default', 'fill': shape['strokeColor']}); // this is Insight's behavior\n                                    txt_box = txt.getBBox();\n                                    var txt_w = txt_box.width*1.3;\n                                    var txt_h = txt_box.height*1.3;\n                                    txt.toFront();\n                                    // clicking the text should do the same as clicking the shape\n                                    txt.id = shape['id'] + \"_shape_text\";\n                                    txt.click(handle_shape_click);\n\n                                }\n\n                                // handle other text-specific attributes...\n                                var txtAttr = {};\n                                if (shape['fontFamily']) {  // model: serif, sans-serif, cursive, fantasy, monospace. #5072\n                                    // raphael supports all these exactly - so we can pass directly.\n                                    txtAttr['font-family'] = shape['fontFamily'];\n                                }\n                                if (shape['fontSize']) {\n                                    txtAttr['font-size'] = shape['fontSize'];\n                                }\n                                if (shape['fontStyle']) { // model: Normal, Italic, Bold, Bolditalic\n                                    var fs = shape['fontStyle'];\n                                    if ((fs == 'Bold') || (fs == 'BoldItalic')) {\n                                        txtAttr['font-weight'] = 'bold';\n                                    }\n                                    if ((fs == 'Italic') || (fs == 'BoldItalic')) {\n                                        txtAttr['font-style'] = 'italic';\n                                    }\n                                }\n                                if (txt) txt.attr(txtAttr);\n                            }\n                            if (shape['type'] != 'Label') {\n                                // these shape attributes are not applied to text\n                                if (shape['fillColor'] && shape['type'] != 'PolyLine') {\n                                    // don't show fills on PolyLines\n                                    newShape.attr({'fill': shape['fillColor']});\n                                    if (shape['fillAlpha']) { newShape.attr({'fill-opacity': shape['fillAlpha']})}\n                                }\n                                else {\n                                    // need *some* fill so that shape is clickable\n                                    newShape.attr({'fill':'#000', 'fill-opacity': 0.01 });\n                                }\n                                if (shape['strokeAlpha']) { newShape.attr({'stroke-opacity': shape['strokeAlpha']}); }\n                                if (shape['strokeColor']) { newShape.attr({'stroke': shape['strokeColor']}); }\n                                else { newShape.attr({'stroke': '#ffffff'}); }  // white is default\n                            }\n                            newShape.attr({'cursor':'default'});\n                            if (shape['strokeWidth']) { newShape.attr({'stroke-width': shape['strokeWidth']}); }\n                            newShape.click(handle_shape_click);\n                            newShape.attr({ title: toolTip });\n                            newShape.id = shape['id'] + \"_shape\";\n                            shape_objects.push(newShape);\n                        }\n\n                    }\n                }\n            }\n            // if the new display includes selected-shape - show it\n            display_selected();\n        }\n\n        // refresh the viewport using 'active_rois' as filter\n        this.refresh_active_rois = function (theZ, theT) {\n            rois_displayed = true;\n            refresh_rois(theZ, theT, active_rois);\n        }\n\n        // loads the ROIs if needed and displays them\n        this.show_rois = function(theZ, theT, filter) {\n            this.theZ = theZ;\n            this.theT = theT;\n          if (roi_json == null) {\n              load_rois(true, filter);      // load and display\n          } else {\n              rois_displayed = true;\n              this.refresh_rois(undefined, undefined, filter);\n          }\n        }\n\n        // hides the ROIs from display\n        this.hide_rois = function(hide_ome_rois, hide_external_rois) {\n            var hide_ome_rois = typeof hide_ome_rois !== \"undefined\" ? hide_ome_rois : true;\n            var hide_external_rois = typeof hide_external_rois !== \"undefined\" ? hide_external_rois : true;\n\n            if (!hide_ome_rois && !hide_external_rois) {\n                console.warn(\"HIDE_OME_ROIS and HIDE_EXTERNAL_ROIS are False, nothing to do\");\n                return;\n            }\n\n            if (hide_ome_rois && hide_external_rois) {\n                rois_displayed = false;\n                active_rois = {};\n                this.refresh_rois();\n            } else {\n                if (!hide_ome_rois) {\n                    for (var r = 0; r < external_rois.length; r++) {\n                        delete(active_rois[external_rois[r].id]);\n                    }\n                }\n                else if (!hide_external_rois) {\n                    for (var r = 0; r < roi_json.length; r++) {\n                        delete(active_rois[roi_json[r].id]);\n                    }\n                }\n                if (Object.keys(active_rois).length == 0) {\n                    rois_displayed = false;\n                    this.refresh_rois();\n                }\n                else {\n                    this.refresh_active_rois();\n                }\n            }\n        }\n\n        // Retrieve shape with ID shape_id from ROI with ID roi_di from roi_list\n        get_shape = function(roi_id, shape_id, roi_list) {\n            for (var rx=0; rx<roi_list.length; rx++) {\n                if (roi_list[rx].id == roi_id) {\n                    var shapes = roi_list[rx].shapes;\n                    for (var sx=0; sx<shapes.length; sx++) {\n                        if (shapes[sx].id == shape_id)\n                            return shapes[sx];\n                    }\n                    console.error(\"ROI with ID \" + roi_id + \"has no shape with ID \" + shape_id);\n                }\n            }\n            return null;\n        }\n\n        // Get backup key for given roi_id and shape_id\n        get_backup_key = function(roi_id, shape_id) {\n            return roi_id + \"::\" + shape_id;\n        }\n\n        /*\n        Save a backup copy of shape_config using shape_id and roi_id to build backup key.\n        If a backup for given shape_id and roi_id already exists, do nothing.\n         */\n        backup_shape = function(roi_id, shape_id, shape_conf) {\n            var backup_key = get_backup_key(roi_id, shape_id);\n            if (!(backup_key in original_shapes_backup)) {\n                // clone the shape_conf object as \"original\" and keep a reference to updated object (used to restore)\n                original_shapes_backup[backup_key] = $.extend({}, shape_conf);\n            }\n        }\n\n        /*\n        Restore from backup SHAPE with ID shape_id for ROI with id roi_id.\n        If refresh_view is TRUE, automatically refresh viewport.\n         */\n        this.restore_shape = function(roi_id, shape_id, refresh_view) {\n            var refresh_view = typeof refresh_view !== \"undefined\" ? refresh_view : true;\n            var backup_key = get_backup_key(roi_id, shape_id);\n            if (backup_key in original_shapes_backup) {\n                var original_shape = original_shapes_backup[backup_key];\n                this.update_shape_text(roi_id, shape_id, original_shape.textValue, original_shape.fontFamily,\n                    original_shape.fontSize, original_shape.fontStyle, false);\n                this.update_shape_config(roi_id, shape_id, original_shape.strokeColor, original_shape.strokeAlpha,\n                    original_shape.strokeWidth, original_shape.fillColor, original_shape.fillAlpha, false);\n                delete original_shapes_backup[backup_key];\n\n                if (refresh_view) {\n                    this.refresh_active_rois();\n                }\n            }\n        }\n\n        // Restore all shapes with a backup\n        this.restore_shapes = function(refresh_view) {\n            var refresh_view = typeof refresh_view !== \"undefined\" ? refresh_view : true;\n\n            for (var bk_key in original_shapes_backup) {\n                var sh_id = bk_key.split(\"::\");\n                this.restore_shape(sh_id[0], sh_id[1], false);\n            }\n\n            if (refresh_view) {\n                this.refresh_active_rois();\n            }\n        }\n\n        /*\n        Update text for SHAPE with ID shape_id related to ROI with ID roi_id.\n        Only input values that are not \"undefined\" will be updated, previuos value will be kept\n        for all values passed as \"undefined\".\n         */\n        this.update_shape_text = function (roi_id, shape_id, text_value, font_family, font_size, font_style,\n                                           refresh_view) {\n            var refresh_view = typeof refresh_view !== \"undefined\" ? refresh_view : true;\n\n            // look for shape in OME ROIs and external ones\n            var sh = get_shape(roi_id, shape_id, roi_json);\n            if (!sh)\n                sh = get_shape(roi_id, shape_id, external_rois);\n\n            if (sh) {\n                backup_shape(roi_id, shape_id, sh);\n\n                sh.textValue = typeof text_value !== \"undefined\" ? text_value : sh.textValue;\n                sh.fontFamily = typeof font_family !== \"undefined\" ? font_family : sh.fontFamily;\n                sh.fontSize = typeof font_size !== \"undefined\" ? font_size : sh.fontSize;\n                sh.fontStyle = typeof font_style !== \"undefined\" ? font_style : sh.fontStyle;\n\n                if(refresh_view) {\n                    this.refresh_active_rois();\n                }\n            } else {\n                console.error(\"Unable to find a shape for ROI ID \" + roi_id + \" and SHAPE ID \" + shape_id);\n            }\n        }\n\n        /*\n        Update shape configuration for SHAPE with ID shape_id related to ROI with ID roi_id.\n        Only input values that are not \"undefined\" will be updated, previuos value will be kept\n        for all values passed as \"undefined\".\n         */\n        this.update_shape_config = function(roi_id, shape_id, stroke_color, stroke_alpha,\n                                            stroke_width, fill_color, fill_alpha, refresh_view) {\n            var refresh_view = typeof refresh_view !== \"undefined\" ? refresh_view : true;\n\n            // look for shape in OME ROIs and external ones\n            var sh = get_shape(roi_id, shape_id, roi_json);\n            if (!sh)\n                sh = get_shape(roi_id, shape_id, external_rois);\n\n            if (sh) {\n                backup_shape(roi_id, shape_id, sh);\n\n                sh.strokeWidth = typeof stroke_width !== \"undefined\" ? stroke_width : sh.strokeWidth;\n                sh.strokeAlpha = typeof stroke_alpha !== \"undefined\" ? stroke_alpha : sh.strokeAlpha;\n                sh.strokeColor = typeof stroke_color !== \"undefined\" ? stroke_color : sh.strokeColor;\n                sh.fillAlpha = typeof fill_alpha !== \"undefined\" ? fill_alpha : sh.fillAlpha;\n                sh.fillColor = typeof fill_color !== \"undefined\" ? fill_color : sh.fillColor;\n\n                if(refresh_view) {\n                    this.refresh_active_rois();\n                }\n            } else {\n                console.error(\"Unable to find a shape for ROI ID \" + roi_id + \" and SHAPE ID \" + shape_id);\n            }\n        }\n\n        this.show_labels = function(visible, filter) {\n            roi_label_displayed = visible;\n            this.refresh_rois(undefined, undefined, filter);\n        }\n\n        // sets the Zoom of the ROI paper (canvas)\n        this.setRoiZoom = function(percent) {\n            paper.scaleAll(percent/100);\n        }\n\n    });\n\n}\n", "\n$(function(){\n\n    if (OME === undefined) {\n        window.OME = {};\n    }\n\n    // Can be called from anywhere, E.g. center_plugin.thumbs\n    OME.emptyWellBirdsEye = function() {\n        $(\"#well_birds_eye\").empty()\n            .off(\"click\");\n    };\n    OME.hideWellBirdsEye = function() {\n        $(\"#tree_details\").css('height', '100%');\n        $(\"#well_details\").css('height', '0').css('display', 'none');\n\n        // Also clear content\n        OME.emptyWellBirdsEye();\n    };\n    $(\"#hide_well_birds_eye\").on('click', OME.hideWellBirdsEye);\n\n\n    OME.WellBirdsEye = function(opts) {\n\n        var $tree_details = $(\"#tree_details\");\n        var $well_details = $(\"#well_details\");\n        var $well_birds_eye = $(\"#well_birds_eye\");\n\n        function selectionChanged() {\n            var imageIds = [];\n            $('.ui-selected', $well_birds_eye).each(function(ws){\n                imageIds.push(parseInt(this.getAttribute('data-imageId'), 10));\n            });\n            if (opts.callback) {\n                opts.callback(imageIds);\n            }\n        };\n\n        // Drag selection on WellSample images\n        $(\"#well_birds_eye_container\").selectable({\n            filter: 'img',\n            distance: 2,\n            stop: function(){\n                selectionChanged();\n            }\n        });\n        // Handle click on image\n        $well_birds_eye.on( \"click\", \"img\", function(event) {\n            if (event.metaKey) {\n                // Ctrl click - simply toggle clicked image\n                $(event.target).toggleClass('ui-selected');\n            } else {\n                // select ONLY clicked image\n                $(\"img\", $well_birds_eye).removeClass('ui-selected');\n                $(event.target).addClass('ui-selected');\n            }\n            selectionChanged();\n        });\n\n        function showPanel() {\n            $tree_details.css('height', '70%');\n            $well_details.css('height', '30%')\n                .css('display', 'block');\n        }\n\n        function getPos(attr) {\n            return function(ws) {\n                return ws.position[attr] ? ws.position[attr].value : undefined;\n            };\n        }\n        function notUndef(p) {\n            return p !== undefined;\n        }\n\n        // 'public' methods returned...\n        return {\n            clear: function() {\n                $well_birds_eye.empty();\n            },\n            setSelected: function(imageIds) {\n                $(\"img\", $well_birds_eye).removeClass('ui-selected');\n                imageIds.forEach(function(iid){\n                    $(\"img[data-imageId=\" + iid + \"]\", $well_birds_eye).addClass('ui-selected');\n                });\n            },\n            addWell: function(data) {\n\n                var minX,\n                    maxX,\n                    minY,\n                    maxY;\n\n                // first filter for well-samples that have positions\n                data = data.filter(function(ws){ return ws.position !== undefined; });\n\n                // Only show panel if we have some data\n                if (data.length > 0) {\n                    showPanel();\n                }\n\n                var xVals = data.map(getPos('x')).filter(notUndef);\n                var yVals = data.map(getPos('y')).filter(notUndef);\n                minX = Math.min.apply(null, xVals);\n                maxX = Math.max.apply(null, xVals);\n                var midX = ((maxX - minX)/2) + minX;\n                minY = Math.min.apply(null, yVals);\n                maxY = Math.max.apply(null, yVals);\n\n                // Resize the well_birds_eye according to extent of field positions...\n                var whRatio = 1;\n                if (maxX !== minX || maxY !== minY) {\n                    whRatio = (maxX - minX) / (maxY - minY);\n                }\n                var width = 200;\n                var height = 200;\n                var top = 4;\n                if (whRatio > 1) {\n                    height = 200/whRatio;\n                    top = ((200 - height) / 2) + 4;\n                } else {\n                    width = whRatio * 200;\n                }\n                $well_birds_eye.css({'width': width + 'px', 'height': height + 'px', 'top': top + 'px'});\n\n                // Add images, positioned by percent...\n                var html = data.map(function(ws){\n                    // check if min===max to avoid zero-division error\n                    var x = (maxX === minX) ? 0.5 : (ws.position.x.value - minX)/(maxX - minX);\n                    var y = (maxY === minY) ? 0.5 : (ws.position.y.value - minY)/(maxY - minY);\n                    return '<img style=\"left: ' + (x * 100) + '%; top: ' + (y * 100) + '%\" title=\"' + ws.name + '\" data-imageId=\"' + ws.id + '\" />';\n                }, \"\");\n                $well_birds_eye.append(html.join(\"\"));\n            }\n        }\n    };\n\n    // Used by WellIndexForm in forms.py\n    window.changeField = function changeField(field) {\n\n        var datatree = $.jstree.reference('#dataTree');\n        var $container = $(\"#content_details\");\n\n        var containerType = $container.data('type');\n        var containerId = $container.data('id');\n        var containerPath = $container.data('path');\n        containerPath = JSON.parse(containerPath);\n        var containerNode = datatree.find_omepath(containerPath);\n\n        if (!containerNode) {\n            console.log('WARNING: Had to guess container');\n            containerNode = OME.getTreeBestGuess(containerType, containerId);\n        }\n\n        // Set the field for that node in the tree and reload the tree section\n        datatree.set_field(containerNode, field);\n\n        // Reselect the same node to trigger update\n        datatree.deselect_all(true);\n        datatree.select_node(containerNode);\n\n        return false;\n    };\n\n    var primaryIndex = -1;\n    OME.handleClickSelection = function (event, target, elementsSelector) {\n        \n        var $clickedImage = target || $(event.target);\n        \n        var thumbs = $(elementsSelector);\n        var selIndex = thumbs.index($clickedImage);\n\n        if (event && event.shiftKey ) {\n            if ( primaryIndex === -1 ) {\n                primaryIndex = selIndex;\n                $clickedImage.parent().parent().addClass(\"ui-selected\");\n                return;\n            }\n            \n            // select range\n            var start = Math.min(primaryIndex,selIndex);\n            var end = Math.max(primaryIndex,selIndex);\n            \n            thumbs.slice(start, end + 1).parent().parent().addClass(\"ui-selected\");\n            \n        }\n        else if (event && event[OME.multi_key() + \"Key\"]) {\n            if ( primaryIndex === -1 ) {\n                primaryIndex = selIndex;\n            }\n            \n            if ($clickedImage.parent().parent().hasClass(\"ui-selected\")) {\n                $clickedImage.parent().parent().removeClass(\"ui-selected\");\n            } else {\n                $clickedImage.parent().parent().addClass(\"ui-selected\");\n            }\n        }\n        else {\n            thumbs.parent().parent().removeClass(\"ui-selected\");\n            $clickedImage.parent().parent().addClass(\"ui-selected\");\n            primaryIndex = selIndex;\n        }\n    };\n\n});\n", "\n\n\n(function(){\n\n    function show_change(obj, val, klass) {\n        if (obj.value != val) {\n            $(obj).addClass(klass);\n        } else {\n            $(obj).removeClass(klass);\n        }\n    }\n    function hidePicker () {\n        if ($(\".picker\").get(0) && $(\".picker\").get(0).hide_picker) {\n            $(\".picker\").get(0).hide_picker();\n        }\n    }\n\n    window.resetRDCW = function (viewport) {\n        viewport.reset_channels();\n        syncRDCW(viewport);\n    };\n\n    window.copyRdefs = function(viewport) {\n        var rdefQry = viewport.getQuery();\n        // also need pixelsType to know if we can manually paste to target\n        var pr = viewport.loadedImg.pixel_range.join(\":\");\n        rdefQry = rdefQry + \"&pixel_range=\" + pr;\n        // Need imageId for 'apply to all'\n        rdefQry = rdefQry + \"&imageId=\" + viewport.loadedImg.id;\n        // save to session\n        var jqxhr = $.getJSON(viewport.viewport_server + \"/copyImgRDef/?\" + rdefQry);\n        jqxhr.always(function() {\n            $(\"#rdef-paste-btn\").prop('disabled', false).removeClass(\"button-disabled\");\n\n            // Optional : only present on webclient app\n            if (window.WEBCLIENT) {\n                WEBCLIENT.HAS_RDEF = true;\n            }\n        });\n    };\n\n    window.pasteRdefs = function (viewport) {\n\n        var doPaste = function(data) {\n            var channels = data.c.split(\",\");       // c=1|3336:38283$FF0000,2|1649:17015$00FF00\n            if (channels.length != viewport.getChannels().length ||\n                data.pixel_range != viewport.loadedImg.pixel_range.join(\":\")) {\n                    // images are not compatible - just 'fail silently'\n                    return;\n            }\n            // only pick what we need\n            var pasteData = {'c': data.c,\n                'm': data.m,\n                'maps': data.maps};\n            viewport.setQuery(pasteData);\n            viewport.doload();        // loads image\n            syncRDCW(viewport);       // update rdef table\n            viewport.channelChange(); // triggers channel btn update\n\n            // add to undo/redo queue and update undo/redo buttons.\n            viewport.save_channels();\n            updateUndoRedo(viewport);\n        };\n\n        // check session via /getImgRDef/ json call\n        $.getJSON(viewport.viewport_server + \"/getImgRDef/\",\n            function(data){\n                if (data.rdef) {\n                    doPaste(data.rdef);\n                }\n            }\n        );\n    };\n\n    window.resetImageDefaults = function (viewport, obj, callback) {\n        viewport.viewportmsg.html(\"Resetting...\").show();\n        $.getJSON(viewport.viewport_server + '/imgData/' + viewport.loadedImg.id + '/?getDefaults=true',\n            function(data){\n                viewport.viewportmsg.hide();\n                viewport.loadedImg._load(data);\n\n                // seems we need to do a lot of work to update UI\n                viewport.doload();        // loads image\n                syncRDCW(viewport);       // update rdef table\n                viewport.channelChange(); // triggers channel btn update\n\n                // add to undo/redo queue and update undo/redo buttons.\n                viewport.save_channels();\n                updateUndoRedo(viewport);\n\n                if (callback) {\n                    callback();\n                }\n            }\n        );\n    };\n\n    window.setImageDefaults = function (viewport, obj, callback, skip_apply) {\n        if (!skip_apply) applyRDCW(viewport);\n        var old = $(obj).html();\n        gs_modalJson(viewport.viewport_server + '/saveImgRDef/'+viewport.loadedImg.id+'/?'+viewport.getQuery(true),\n            {},\n            function(success, rv) {\n                $(obj).html(old).prop('disabled', false);\n                if (!(success && rv)) {\n                    alert('Setting image defaults failed. Success: ' + success + ' Response: ' + rv);\n                }\n                if (callback) {\n                    callback();\n                }\n                viewport.setSaved();\n                updateUndoRedo(viewport);\n            });\n        return false;\n    };\n\n    window.zindex_automator = function(klass, basez, wspace) {\n        if (!wspace) {\n            wspace = $(klass);\n        }\n        var sorter = function (a,b) {\n            return parseInt(a.css('z-index'), 10)-parseInt(b.css('z-index'), 10);\n        };\n        var tofront = function (e) {\n            var self = this;\n            var z = basez;\n            var objs = [];\n            $(klass).each(function () {\n                if (this != self) {\n                    objs.push($(this));\n                }\n            });\n            $.each(objs.sort(sorter), function () {\n                this.css('zIndex', z);\n                z++;\n            });\n            $(self).css('zIndex', z);\n        };\n        $.each(wspace, function () {\n            $(this).on('opening', tofront);\n            $(this).on('mousedown', tofront);\n        });\n    };\n\n    window.channelChange = function (ev, obj, idx, ch) {\n        if (ch.active) {\n            // similar buttons beside image and in rdef table\n            $('#wblitz-ch'+idx).addClass('pressed');\n            $('#rd-wblitz-ch'+idx).addClass('pressed');\n        } else {\n            $('#wblitz-ch'+idx).removeClass('pressed');\n            $('#rd-wblitz-ch'+idx).removeClass('pressed');\n        }\n    };\n\n\n    window.imageChange = function (viewport) {\n        $('#wblitz-t-curr').html(viewport.getTPos());\n        $('#wblitz-z-curr').html(viewport.getZPos());\n        $('#wblitz-t-count').html(viewport.getTCount());\n        $('#wblitz-z-count').html(viewport.getZCount());\n\n        if (viewport.hasLinePlot() || $('#wblitz-lp-enable').prop('checked')) {\n            viewport.refreshPlot();\n        }\n        // Z/T change update Save button\n        updateUndoRedo(viewport);\n    };\n\n    window.syncChannelsActive = function(viewport) {\n        var channels = viewport.getChannels();\n        for (i=0; i<channels.length; i++) {\n            var $chbx = $('#rd-wblitz-ch'+i);\n            if ($chbx.length > 0) {     // in case this is called before UI is built\n                $chbx.get(0).checked = channels[i].active;\n            }\n        }\n    };\n\n    function getLutIndex(lutName) {\n      if (OME && OME.LUTS) {\n        for (var l=0; l<OME.LUTS.length; l++) {\n          if (OME.LUTS[l].name === lutName) {\n            return OME.LUTS[l].png_index;\n          }\n        }\n      }\n      return -1;\n    }\n\n    function getLutBgPos(color, slider) {\n        var png_height = OME.PNG_LUTS.length * 10;\n        var style = {'background-size': '100% ' + (png_height * 3) + 'px'};\n        var yoffset;\n        if (color.endsWith('.lut')) {\n            var lutIndex = getLutIndex(color);\n            if (lutIndex > -1) {\n                yoffset = '-' + (lutIndex * 30 + 7) + 'px';\n            }\n        } else {\n            // Not found - show last bg (black -> transparent gradient)\n            if (slider) {\n                yoffset = '-' + ((OME.LUTS.length) * 30 + 7) + 'px';\n            } else {\n                // For buttons, hide by offsetting\n                yoffset = '100px';\n            }\n        }\n        style['background-position'] = '0px ' + yoffset;\n        return style;\n    }\n\n    window.syncRDCW = function(viewport) {\n        var cb, color;\n        var channels = viewport.getChannels();\n        var lutBgPos, sliderLutBgPos;\n        for (i=0; i<channels.length; i++) {\n            color = channels[i].color;\n            lutBgStyle = getLutBgPos(color);\n            sliderLutBgStyle = getLutBgPos(color, true);\n            if (color.endsWith('.lut')) {\n                color = 'EEEEEE';\n            }\n            // Button beside image in full viewer (not in Preview panel):\n            $('#wblitz-ch' + i).css('background-color', '#' + color)\n                .find('.lutBackground').css(lutBgStyle);\n            // Slider background\n            $('#wblitz-ch'+i+'-cwslider').find('.ui-slider-range').addClass('lutBackground')\n                .css(sliderLutBgStyle)\n                .css({'background-color': '#' + color,\n                      'transform': channels[i].inverted ? 'scaleX(-1)' : ''});\n            // Channel button beside slider\n            $('#rd-wblitz-ch'+i)\n                .css('background-color', '#' + color)\n                .find('.lutBackground').css(lutBgStyle);\n            var w = channels[i].window;\n            $('#wblitz-ch'+i+'-cwslider')\n                .slider( \"option\", \"min\", Math.min(w.min, w.start) )   // extend range if needed\n                .slider( \"option\", \"max\", Math.max(w.max, w.end) );\n            $('#wblitz-ch'+i+'-color').attr('data-color', channels[i].color);\n            $('#wblitz-ch' + i + '-cw-start').val(channels[i].window.start).trigger('change');\n            $('#wblitz-ch' + i + '-cw-end').val(channels[i].window.end).trigger('change');\n        }\n        // Colorpicker buttons store 'reverse-intensity' with .data() to populate colorbtn dialog\n        $(\".picker\").each(function(i, pickerBtn) {\n            $(pickerBtn).data('data-reverse-intensity', channels[i].inverted);\n        });\n        hidePicker();\n\n        updateUndoRedo(viewport);\n        $('#rd-wblitz-rmodel').prop('checked', viewport.isGreyModel());\n        syncChannelsActive(viewport);\n    };\n\n    window.updateUndoRedo = function(viewport) {\n        // update disabled status of undo/redo buttons\n        if (viewport.has_channels_undo()) {\n            $('#rdef-undo-btn').prop('disabled', false).removeClass(\"button-disabled\");\n        } else {\n            $('#rdef-undo-btn').attr(\"disabled\", \"disabled\").addClass(\"button-disabled\");\n        }\n        if (viewport.has_channels_redo()) {\n            $('#rdef-redo-btn').prop('disabled', false).removeClass(\"button-disabled\");\n        } else {\n            $('#rdef-redo-btn').attr(\"disabled\", \"disabled\").addClass(\"button-disabled\");\n        }\n        var canSaveRdef = viewport.loadedImg.perms.canAnnotate;\n        if (viewport.getSaved() || !canSaveRdef) {\n            $(\"#rdef-setdef-btn\").attr(\"disabled\", \"disabled\").addClass(\"button-disabled\");\n        } else {\n            $(\"#rdef-setdef-btn\").prop('disabled', false).removeClass(\"button-disabled\");\n        }\n    };\n\n    var on_batchCopyRDefs = false;\n    // TODO: try not to rely on global variables!\n    window.applyRDCW = function(viewport, final) {\n        if (on_batchCopyRDefs) {\n            return batchCopyRDefs_action('ok');\n        }\n        var revInt, active;\n        for (var i=0; i<viewport.getCCount(); i++) {\n            active = $('#rd-wblitz-ch'+i).get(0).checked;\n            if (active !== viewport.loadedImg.channels[i].active) {\n                viewport.setChannelActive(i, active, true);\n            }\n            viewport.setChannelColor(i, $('#wblitz-ch'+i+'-color').attr('data-color'), true);\n            revInt = $('#wblitz-ch'+i+'-color').data('data-reverse-intensity');\n            if (revInt !== undefined) {viewport.setChannelInverted(i, revInt, true);}\n            var noreload = ((i+1) < viewport.getCCount());    // prevent reload, except on the last loop\n            viewport.setChannelWindow(i, $('#wblitz-ch'+i+'-cw-start').get(0).value, $('#wblitz-ch'+i+'-cw-end').get(0).value, noreload);\n        }\n\n        if (final) {\n            viewport.forget_bookmark_channels();\n            $('#rdef-postit').hide();\n        }\n        viewport.save_channels();\n        syncRDCW(viewport);\n    };\n\n\n    window.setModel = function(viewport, model) {\n        // this may turn channels on/off\n        viewport.setModel(model);\n        viewport.save_channels();\n        syncRDCW(viewport);     // update undo/redo etc\n    };\n\n\n    // This is called on load of viewport in Image viewer, but not preview panel\n    window._load_metadata = function(ev, viewport) {\n\n        /* Image details */\n        var tmp = viewport.getMetadata();\n        $('#wblitz-image-name').html(tmp.imageName);\n        $('#wblitz-image-description-content').html(tmp.imageDescription.replace(/\\n/g, '<br />'));\n        $('#wblitz-image-author').html(tmp.imageAuthor);\n        $('#wblitz-image-pub').html(tmp.projectName);\n        $('#wblitz-image-pubid').html(tmp.projectId);\n        $('#wblitz-image-timestamp').html(tmp.imageTimestamp);\n\n        $(\"#bulk-annotations\").hide();\n        $(\"#bulk-annotations\").next().hide();\n        if (tmp.wellId) {\n\n            var wellsUrl = PLATE_WELLS_URL_999.replace('999', tmp.wellId),\n                linksUrl = PLATE_LINKS_URL_999.replace('999', tmp.wellId);\n            loadBulkAnnotations(wellsUrl, 'Well-' + tmp.wellId);\n            loadBulkAnnotations(linksUrl, 'Well-' + tmp.wellId);\n        }\n    };\n\n\n    // Used in the Image viewer and in metadata general panel\n    window.loadBulkAnnotations = function(url, query, callback) {\n        // Load bulk annotations for screen or plate\n        $.getJSON(url + '?query=' + query + '&callback=?',\n            function(result) {\n                if (result.data && result.data.rows) {\n                    var table = $(\"#bulk-annotations\").show().next().show().children(\"table\");\n                    var html = result.data.columns.map(function(col, colIdx) {\n                        var label = col.escapeHTML();\n                        var values = result.data.rows.map(function(row){\n                            return (\"\" + row[colIdx]).escapeHTML();\n                        });\n                        values = values.join('<br />');\n                        var oddEvenClass = col % 2 == 1 ? 'odd' : 'even';\n                        return '<tr><td class=\"title ' + oddEvenClass + '\">' + label + ':&nbsp;</td><td>' + values + '</td></tr>';\n                    });\n                    table.html(html.join(\"\"));\n                }\n                if (callback) {\n                    callback(result);\n                }\n        });\n    };\n\n    /**\n    * Gets called when an image is initially loaded.\n    * This is the place to sync everything; rendering model, quality, channel buttons, etc.\n    */\n    window._refresh_cb = function (ev, viewport) {\n        /* Sync inputs with initial values */\n\n        $('#wblitz-rmodel').prop('checked', viewport.isGreyModel());\n        $('#wblitz-invaxis').prop('checked', viewport.loadedImg.rdefs.invertAxis);\n\n        var q = viewport.getQuality();\n        if (q) {\n            var qr = $('#wblitz-quality > option[value=\"' + q.toFixed(1) + '\"]');\n            if (qr.length) {\n                qr.prop('selected',true);\n            }\n        }\n\n        /* Prepare the channels box and the rendering definition for the channels */\n        var box = $('#wblitz-channels-box');\n        var channels = viewport.getChannels();\n        box.empty();\n\n        var doToggle = function(index) {\n            return function() {\n                viewport.toggleChannel(index);\n                viewport.save_channels();\n                updateUndoRedo(viewport);\n                viewport.self.trigger('channelToggle', [viewport, index, viewport.loadedImg.channels[index]]);\n            };\n        };\n        for (i=0; i<channels.length; i++) {\n            $('<button id=\"wblitz-ch'+i+\n                '\" class=\"squared' + (channels[i].active?' pressed':'') +\n                '\" style=\"background-color: #'+ channels[i].color +\n                '\" title=\"' + channels[i].label +\n                '\"><div class=\"lutBackground\"></div><div class=\"btnLabel\">'+channels[i].label+'</div></button>')\n            .appendTo(box)\n            .on('click', doToggle(i));\n        }\n\n        // disable 'split' view for single channel images.\n        if (channels.length < 2) {\n            $(\"#wblitz input[value='split']\").prop('disabled', true);\n        }\n\n        // TODO: this used anywhere?\n        // {% block xtra_metadata %}{% endblock %}\n\n        /*$('#wblitz-shortname').attr('title', tmp.imageName).html(gs_text_trim(tmp.imageName, 15, true));*/\n\n        tmp = viewport.getSizes();\n        $('#wblitz-image-width').html(tmp.width);\n        $('#wblitz-image-height').html(tmp.height);\n        $('#wblitz-image-z-count').html(tmp.z);\n        $('#wblitz-image-t-count').html(tmp.t);\n        tmp = viewport.getPixelSizes();\n        $('#wblitz-image-pixel-size-x').html(tmp.x===null?'-':(tmp.x.lengthformat()));\n        $('#wblitz-image-pixel-size-y').html(tmp.y===null?'-':(tmp.y.lengthformat()));\n        $('#wblitz-image-pixel-size-z').html(tmp.z===null?'-':(tmp.z.lengthformat()));\n\n        if (tmp.x!==0) {\n            $(\"#wblitz-scalebar\").prop(\"disabled\", false);\n        }\n        /* Fill in the Rendering Details box */\n\n        $(\".picker\").off('prepared').off('showing').off('hiding');\n        // $('#rdef-postit ul').not('ul:last-child').remove();\n\n        var template = '' +\n          '<tr class=\"$cls rdef-window\">' +\n          '<td><button id=\"rd-wblitz-ch$idx0\" class=\"rd-wblitz-ch squared $class\" style=\"background-color: $col\" ' +\n            'title=\"$label\"><div class=\"lutBackground\"></div><div class=\"btnLabel\">$l</div></button></td>' +\n          '<td><table><tr id=\"wblitz-ch$idx0-cw\" class=\"rangewidget\"></tr></table></td>' +\n          '<td><button id=\"wblitz-ch$idx0-color\" class=\"picker squarred\" title=\"Choose Color\">&nbsp;</button></td>' +\n          '</tr>';\n\n        $('#rdef-postit table').on('focus', '.rangewidget input', function(){\n            // id is wblitz-ch1-cw-start or wblitz-ch1-cw-end\n            var chIdx = this.id.replace('wblitz-ch', '').split('-')[0];\n            chIdx = parseInt(chIdx, 10);\n            viewport.self.trigger('channelFocus', [viewport, chIdx, viewport.loadedImg.channels[i]]);\n        });\n        tmp = $('#rdef-postit table tr:first');\n        tmp.siblings().remove();\n\n        var start_cb = function (i) {\n            return function (e) {\n                var new_start = e.target.value,\n                    $sl = $('#wblitz-ch'+i+'-cwslider'),\n                    end = $sl.slider('values')[1],\n                    min = $sl.slider( \"option\", \"min\" );\n                $sl.slider('values', 0, Math.min(new_start, end));    // ensure start < end\n                $sl.slider( \"option\", \"min\", Math.min(min, new_start) );   // extend range if needed\n            };\n        };\n        var end_cb = function (i) {\n            return function (e) {\n                var new_end = e.target.value,\n                    $sl = $('#wblitz-ch'+i+'-cwslider'),\n                    start = $sl.slider('values')[0],\n                    max = $sl.slider( \"option\", \"max\" );\n                $sl.slider('values', 1, Math.max(new_end, start));    // ensure end > start\n                $sl.slider( \"option\", \"max\", Math.max(max, new_end) );   // extend range if needed\n            };\n        };\n        var slide_start_cb = function() {\n            // Note starting values, so we can tell which handle/value changed\n            // This is for floating point data where ui.values may not be what we set\n            return function(event, ui) {\n                $(this).data('channel_start', ui.values[0])\n                    .data('channel_end', ui.values[1]);\n            };\n        };\n        var slide_cb = function() {\n            return function(event, ui) {\n                // Only update the value that changed\n                var s = $(this).data('channel_start');\n                var e = $(this).data('channel_end');\n                if (ui.values[0] !== s) {\n                    $('#wblitz-ch' + $(event.target).data('channel-idx') + '-cw-start').val(ui.values[0]).trigger('change');\n                } else if (ui.values[1] !== e) {\n                    $('#wblitz-ch'+ $(event.target).data('channel-idx') + '-cw-end').val(ui.values[1]).trigger('change');\n                }\n                viewport.self.trigger(\"channelSlide\", [viewport, $(event.target).data('channel-idx'), ui.values[0], ui.values[1]]);\n            };\n        };\n        var stop_cb = function() {\n            return function(event, ui) {\n                applyRDCW(viewport);\n            };\n        };\n\n        var keyup_cb = function() {\n            return function(event){\n                if (event.keyCode === 13){\n                    applyRDCW(viewport);\n                }\n            };\n        };\n\n        var focusout_cb = function() {\n            return function(event){\n                applyRDCW(viewport);\n            };\n        };\n\n        var init_ch_slider = function(i, channels) {\n            var min = Math.min(channels[i].window.min, channels[i].window.start),  // range may extend outside min/max pixel\n                max = Math.max(channels[i].window.max, channels[i].window.end),\n                start = channels[i].window.start,\n                end = channels[i].window.end,\n                ptype = viewport.loadedImg.meta.pixelsType,\n                step = 1;\n            if (ptype == \"float\") {\n                var STEPS = 100;\n                step = (max - min) / STEPS;\n            }\n\n            $('#wblitz-ch'+i+'-cwslider').slider({\n                range: true,\n                step: step,\n                min: min,\n                max: max,\n                values: [ start, end ],\n                start: slide_start_cb(),\n                slide: slide_cb(),\n                stop: stop_cb(),\n                }).data('channel-idx', i);\n        };\n\n        for (i=channels.length-1; i>=0; i--) {\n\n            var btnClass = channels[i].active?'pressed':'';\n            if (OME.isDark(channels[i].color)) {\n                btnClass += \" fontWhite\";\n            }\n\n            var lbl = channels[i].label;\n            if (lbl.length > 7) {\n                lbl = lbl.slice(0, 5) + \"...\";\n            }\n            tmp.after(template\n                .replace(/\\$class/g, btnClass)\n                .replace(/\\$col/g, '#' + channels[i].color)\n                .replace(/\\$label/g, channels[i].label)\n                .replace(/\\$l/g, lbl)\n                .replace(/\\$idx0/g, i) // Channel Index, 0 based\n                .replace(/\\$idx1/g, i+1) // Channel Index, 1 based\n                .replace(/\\$cwl/g, channels[i].label) // Wavelength\n                .replace(/\\$cls/g, i/2!=parseInt(i/2, 10)?'even':'odd') // class\n            );\n\n            $('#wblitz-ch'+(i)+'-cw').append('<td width=\"10%\"><span class=\"min\" title=\"min: ' + channels[i].window.min + '\"><input type=\"text\" id=\"wblitz-ch' + i + '-cw-start\" /></span></td><td><div class=\"rangeslider\" id=\"wblitz-ch' + i + '-cwslider\"></div></td> <td width=\"10%\"><span class=\"max\" title=\"max: ' + channels[i].window.max + '\"><input type=\"text\" id=\"wblitz-ch' + i + '-cw-end\" /></span></td>');\n            init_ch_slider(i, channels);\n            $('#wblitz-ch'+i+'-cw-start').val(channels[i].window.start).off('change').on('change', start_cb(i));\n            $('#wblitz-ch'+i+'-cw-start').on('keyup', keyup_cb()).on('focusout', focusout_cb());\n            $('#wblitz-ch'+i+'-cw-end').val(channels[i].window.end).off('change').on('change', end_cb(i));\n            $('#wblitz-ch'+i+'-cw-end').on('keyup', keyup_cb()).on('focusout', focusout_cb());\n        }\n\n        // bind clicking on channel checkboxes\n        $(\".rd-wblitz-ch\").each(function(i){\n            $(this).on('click', doToggle(i));\n        });\n\n\n        /* Prepare color picker buttons */\n        $(\".picker\").each(function(i, pickerBtn) {\n            $(pickerBtn).data('data-reverse-intensity', channels[i].inverted);\n        });\n        $(\".picker\")\n            .colorbtn({'server': viewport.viewport_server})\n            .on('showing', function () {\n                var t = $(this).parents('.postit'),\n                    offset;\n                if (t.length) {\n                  offset = t.offset();\n                  offset.left += t.width();\n                } else {\n                  offset = {'top':'300px', 'left': window.innerWidth-250+'px'};\n                }\n                $('#cbpicker-box').css(offset);\n                $('.picker-selected').html('&nbsp;');\n                $(this).parent().siblings('.picker-selected').html('&gt;');\n            })\n            .on('hiding', function () {$(this).parent().siblings('.picker-selected').html('&nbsp;');})\n            .on('prepared', function () {\n                zindex_automator('.postit', 210, $('#cbpicker-box'));\n            })\n            .on('changed', function () {\n                applyRDCW(viewport);\n            });\n\n        // Don't see any obvious bugs when these are removed.\n        // They are both bound to appropriate triggers on viewport.\n        //projectionChange(null,null, true);\n        //modelChange();\n\n        syncRDCW(viewport);\n\n        $('#wblitz-workarea > .box > div.row').show();\n    };\n\n}());\n", "{% extends \"webgateway/core_html.html\" %}\n{% load i18n %}\n{% load common_filters %}\n\n{% comment %}\n<!--\n omero_image - django html template\n\n Copyright (c) 2007-2014 Glencoe Software, Inc. All rights reserved.\n\n This software is distributed under the terms described by the LICENCE file\n you can find at the root of the distribution bundle, which states you are\n free to use it only for non commercial purposes.\n If the file is missing please request a copy by contacting\n jason@glencoesoftware.com.\n-->\n{% endcomment %}\n\n\n\n{% block link %}\n\n    <!-- Make the width fit the mobile viewport -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n\n    {% for href in extra_css %}\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ href }}\" />\n    {% endfor %}\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.viewport.css\"|add:url_suffix %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.toolbar.css\"|add:url_suffix %}\" media=\"all\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.gs_slider.css\"|add:url_suffix %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/base.css\"|add:url_suffix %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.snippet_header_logo.css\"|add:url_suffix %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.postit.css\"|add:url_suffix %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/farbtastic-1.2/farbtastic.css\" %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.colorbtn.css\"|add:url_suffix %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.css\" %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/omero_image.css\"|add:url_suffix %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/panojs-2.0.0/panojs.css\" %}\" media=\"all\" />\n\n{% if opengraph %}\n    <meta name=\"og:title\" content=\"{{ image.getName|escape }}\">\n    <meta name=\"og:type\" content=\"website\">\n    <meta name=\"og:site_name\" content=\"{{ opengraph }}\">\n    <meta name=\"og:description\" content=\"{{ image.getDescription|default:image.getOwner.getName|escape }}\">\n    <meta name=\"og:url\" content=\"{{ page_url }}\">\n    <meta name=\"og:image\" content=\"{{ image_preview }}512/\">\n{% endif %}\n\n{% if twitter %}\n    <meta name=\"twitter:card\" content=\"summary_large_image\">\n    <meta name=\"twitter:site\" content=\"{{ twitter|escape }}\">\n    <meta name=\"twitter:title\" content=\"{{ image.getName|truncateafter:'67'|escape }}\">\n    <meta name=\"twitter:description\" content=\"{{ image.getDescription|default:image.getOwner.getName|truncateafter:'197'|escape }}\">\n    <meta name=\"twitter:creator\" content=\"{{ twitter|escape }}\">\n    <meta name=\"twitter:image\" content=\"{{ image_preview }}280/\">\n{% endif %}\n\n{% endblock %}\n\n{% block script %}\n\n    {% for src in extra_js %}\n    <script type=\"text/javascript\" src=\"{{ src }}\"></script>\n    {% endfor %}\n\n    <!-- jquery -->\n    {% include \"webgateway/base/includes/script_src_jquery.html\" %}\n    {% include \"webgateway/base/includes/script_src_popup.html\" %}\n\n\t<script type=\"text/javascript\" src=\"{% static \"3rdparty/aop-1.3.js\" %}\"></script>\n\n\t<script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.gs_utils.js\"|add:url_suffix %}\"></script>\n\t<script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.viewportImage.js\"|add:url_suffix %}\"></script>\n\t<script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.gs_slider.js\"|add:url_suffix %}\"></script>\n\t<script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.viewport.js\"|add:url_suffix %}\"></script>\n  <script type=\"text/javascript\" src=\"{% static \"webgateway/js/omero_image.js\"|add:url_suffix %}\"></script>\n\n  <!-- jquery-ui -->\n  {% include \"webgateway/base/includes/jquery-ui.html\" %}\n\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.smartdialog.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.colorbtn.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.postit.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.selectboxes-2.2.6.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/farbtastic-1.2/farbtastic.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.gs_utils.js\"|add:url_suffix %}\"></script>\n    \n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.scalebardisplay.js\"|add:url_suffix %}\"></script>\n    <!-- for display of ROIs over the image -->\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.roidisplay.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/raphael-2.1.0/raphael-min.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/raphael-2.1.0/scale.raphael.js\" %}\"></script>\n\n    <script type=\"text/javascript\" src=\"{% static '3rdparty/underscore/underscore-1.13.1-umd-min.js' %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/d3-3.5.17/d3.min.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.histogram.js\"|add:url_suffix %}\"></script>\n\n    <!-- big images -->\n\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/extjs/ext-core.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/utils.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/PanoJS.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/controls.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_Bisque.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_imgcnv.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_Zoomify.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_thumbnail.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_info.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_svg.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_roi.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_scalebar.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.mousewheel-3.0.6.js\" %}\"></script>\n\n    <!-- hammer.js for tablet gestures -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/hammer-2.0.2/hammer.min.js\" %}\"></script>\n    \n{% endblock %}\n\n\n{% block title %}\n    {{ image.getName }}\n{% endblock %}\n\n\n{% block head %}\n    {% block header_content %}\n      <div id=\"header\"></div>\n    {% endblock %}\n    {% block header_menu %}\n    {% endblock %}\n{% endblock %}\n\n\n{% block body %}\n\n{% block full_body %}\n<script type=\"text/javascript\">\n  /* <![CDATA[ */\n\n  var PLATE_LINKS_URL_999 = '{% url 'webgateway_object_table_query' 'Screen.plateLinks.child.wells' 999 %}';\n  var PLATE_WELLS_URL_999 = '{% url 'webgateway_object_table_query' 'Plate.wells' 999 %}';\n\n\n  /**\n   * The viewport object holds the image browsing viewport that has all the logic for connecting to\n   * the supporting ajax server.\n   */\n  var viewport;\n  var on_batchCopyRDefs = false;\n\n  /**\n   * Zoom input box change event handler.\n   */\n  function zoomCheck (i) {\n    var percent = parseFloat($(i).val());\n    if (isNaN(percent)) {\n      percent = 100;\n    }\n    /* Zoom window */\n    viewport.setZoom(percent);\n  }\n\n  function hidePicker () {\n    $(\".picker\").get(0) && $(\".picker\").get(0).hide_picker && $(\".picker\").get(0).hide_picker();\n    /*$('.picker-selected').html('&nbsp;');*/\n  }\n\n  /**\n   * Bound to the window resize, calculates the viewport size and top tool box positions.\n   */\n  var calcResize = function () {\n    var dim = { height: $(window).height(),\n                width: $(window).width()};\n\n    var ts_visible = $('.figure-box').length && $('.figure-box').css('display') != \"none\";\n    var zl = $('#z-axis-legend');\n    var tl = $('#t-axis-legend');\n    /* Resize the viewport */\n    $.extend(dim, viewport.self.offset());\n\n    var h = dim.height - dim.top - 33 - (ts_visible?$('.figure-box').height():0);\n    var w = dim.width - dim.left  - zl.width() - {% block vpRightMargin %}0{% endblock %};\n\n    /* The following is needed as a hack for IE */\n    //TEMP CHANGE, causing extra step of tiling\n    //viewport.viewport.height(10);\n\n    viewport.self\n      .height(h - tl.height())\n      .width(w);\n    viewport.refresh(true);\n\n\n    //ts_visible &&\n    $('.figure-box')\n      .width(dim.width - dim.left - {% block fbCloseBtnWidth %}20{% endblock %} + zl.width())\n      .css('top',viewport.self.height()+15+tl.height());\n\n    zl.css('top', h/2 - (zl.height()/2));\n    tl.css({top: h-tl.height()+15, left: (w/2)+dim.left - (tl.width()/2)});\n  };\n\n  var getMetadata = function () {\n    return viewport.getMetadata();\n  }\n\n  var showChannelWindowHelp = function () {\n    if (!gs_loadBlockUI (showChannelWindowHelp)) {\n      return false;\n    }\n    $.blockUI({\n      timeout: 0,\n      message: $('#channel-window-help'),\n{% if image.canAnnotate %}\n      css: {width: '60%', left: '20%', top: '20%'}\n{% else %}\n      css: {width: '50%', left: '25%', top: '20%'}\n{% endif %}\n    });\n    $('.blockMsg').attr('title','Click to close').on('click', $.unblockUI);\n    $('.blockOverlay').attr('title','Click to close').on('click', $.unblockUI);\n    return false;\n  }\n\n  // for some reason we have to bind 'Color' checkbox click like this\n  var handleModelCheckbox = function (e) {\n    console.log(\"handleModelCheckbox\");\n    // apply change to greyscale immediately\n    setModel(viewport, $(\"#rd-wblitz-rmodel\").get(0).checked?'g':'c');\n  }\n\n\n  /**\n   * Set the projection based on the clicked element name.\n   */\n  var setProjection = function (obj) {\n    viewport.setProjection($(obj).attr('value'));\n  };\n\n  /**\n   * Checks the currently selected rendering projection and applies interface customizations as needed.\n   * Bound to the viewport projectionChange event.\n   */\n  var projectionChange = function (ev, obj, nosync) {\n    var p = viewport.getProjection();\n    if (p) {\n      $('[name=\"wblitz-proj\"]').parent().removeClass('selected');\n      $('[name=\"wblitz-proj\"][value='+p+']').on('click', ).parent().addClass('selected');\n//    if (p) {\n//      var pr = $('#wblitz-proj > [value='+p+']');\n//      if (pr.length) {\n//        pr.prop('selected',true);\n//      }\n      if (p != 'normal') {\n        editLinePlot(false);\n      }\n      // disable line-plot for max projection, split-view etc\n      $('#wblitz-lp-enable').prop('disabled', p != 'normal');\n      //$('#wblitz-channels-box button').prop('disabled', p == 'split');\n    }\n    //nosync || syncRDCW(viewport);\n  };\n\n  /**\n   * Checks the currently selected rendering model and applies interface customizations as needed.\n   * Bound to the viewport modelChange event.\n   */\n  var modelChange = function (ev, obj) {\n    var btns = $('button[id^=wblitz-ch]').not('[id$=color]');\n    if (viewport.isGreyModel()) {\n      btns.addClass('forcegrey');\n    } else {\n      btns.removeClass('forcegrey');\n    }\n    // update both checkboxes to keep in sync.\n    $('#wblitz-rmodel').prop('checked', viewport.isGreyModel());\n    $('#rd-wblitz-rmodel').prop('checked', viewport.isGreyModel());\n    //syncRDCW(viewport);\n  };\n\n  /**\n   *\n   */\n  var linePlotChange = function (ev, show) {\n    if (show) {\n      if (!viewport.hasLinePlot()) {\n        viewport.startPickPos();\n      }\n      var lp = viewport.getLinePlot();\n      $('#wblitz-lp-axis').html(lp.isHorizontal() ? 'Y': 'X');\n      $('#wblitz-lp-enable').prop('checked', 'checked');\n      $('#wblitz-lp-editpos').val(lp.position).show();\n      $('#wblitz-lp-wrap').show();\n      $('#wblitz-lp-btn').html('apply');\n      $('#wblitz-lp-axis-select').selectOptions(lp.isHorizontal() ? 'h': 'v');\n    } else {\n      viewport.stopPickPos();\n      $('#wblitz-lp-enable').prop('checked', false);\n      $('#wblitz-lp-wrap').hide();\n      $('#wblitz-lp-cur').html('');\n    }\n  }\n\n  var editLinePlot = function (show) {\n    if (show) {\n      viewport.prepareLinePlot($('#wblitz-lp-axis-select option[selected]').val() || 'h');\n    } else {\n      viewport.hidePlot();\n    }\n    linePlotChange(null, show);\n  }\n\n  var prepLinePlot = function (val) {\n    viewport.prepareLinePlot(val);\n    $('#wblitz-lp-axis').html(viewport.getLinePlot().isHorizontal() ? 'Y': 'X');\n  }\n\n  var showLinePlot = function () {\n    viewport.loadPlot(parseInt($('#wblitz-lp-editpos').val()));\n    $('#wblitz-lp-cur').html('showing: ' + (viewport.getLinePlot().isHorizontal() ? 'Y': 'X') + ' = ' + parseInt($('#wblitz-lp-editpos').val()));\n  }\n\n\n  var axisChange = function () {\n    if(viewport.loadedImg.rdefs.invertAxis) {\n      $('#z-axis-legend').attr('src', '{% static \"webgateway/img/t_axis_revert.gif\" %}');\n      $('#t-axis-legend').attr('src', '{% static \"webgateway/img/z_axis_revert.gif\" %}');\n    } else {\n      $('#z-axis-legend').attr('src', '{% static \"webgateway/img/z_axis.gif\" %}');\n      $('#t-axis-legend').attr('src', '{% static \"webgateway/img/t_axis.gif\" %}');\n    }\n  }\n\n\n  var show_scalebar = function () {\n    {% if image.getPixelSizeX %}\n    if (!viewport.viewportimg.get(0).show_scalebar) {\n    // if the Scalebar plugin has not been initialised (method not available...) init and load Scalebar...\n        var options = {'pixSizeX': viewport.getPixelSizes().x,\n                       'imageWidth': viewport.getSizes().width};\n        if (viewport.loadedImg.tiles) {\n            options['tiles'] = true;\n        }\n        viewport.viewportimg.scalebar_display(options);\n    }\n    \n    viewport.viewportimg.get(0).setScalebarZoom(viewport.getZoom()/100 );\n    viewport.viewportimg.get(0).show_scalebar();\n    {% endif %}\n  }\n  \n  var hide_scalebar = function () {\n      viewport.viewportimg.get(0).hide_scalebar();\n  }\n  \n  /**\n  *     ROI load & table methods\n  */\n\n  var refresh_rois = function (theZ, theT, rois_filter) {\n      // re-plots the ROIs (if currently shown) for new Z and T position\n      if (viewport.viewportimg.get(0).refresh_rois) {\n          var theT = viewport.getTPos();\n          var theZ = viewport.getZPos();\n          // avoid to clear filter when changing image (changing channels, Z or T)\n          rois_filter = (rois_filter ? rois_filter : viewport.viewportimg.get(0).get_current_rois_filter());\n          viewport.viewportimg.get(0).refresh_rois(theZ, theT, rois_filter);\n      }\n  }\n\n  var show_rois = function (theZ, theT, filter) {\n      var theT = viewport.getTPos();\n      var theZ = viewport.getZPos();\n\n      {% if image %}\n      // if the ROI plugin has not been initialised (method not available...) init and load ROIs...\n      if (!viewport.viewportimg.get(0).show_rois) {\n          var options = {'width':{{ image.getSizeX }},\n                     'height':{{ image.getSizeY }},\n                     'webgateway_index':'{% url \"webgateway\" %}',\n                     'json_url':'{% url 'webgateway_get_rois_json' image.id %}'};\n          if (viewport.loadedImg.tiles) {\n              options['tiles'] = true;\n          }\n          viewport.viewportimg.roi_display(options);\n          viewport.viewportimg.get(0).setRoiZoom(viewport.viewportimg.get(0).getZoom());\n      }\n      {% endif %}\n\n      // Show postit. Table will be built on callback from loading\n      $(\"#roi_table_postit\").show();\n      // Check all ROI visibility buttons\n      $('#toggle_roi_visibility').prop(\"checked\", true);\n      $('[class^=\"shape_visibility\"]').each(function(index, checkbox) {\n        checkbox.checked = true;\n      });\n      // if roi_table_postit is closed using close button, hide ROIs\n      $(\".postit-close-btn\").on(\"click\", function() {hide_rois(); return false;});\n\n      var $show_rois_a = $(\"#show-rois-a\");\n      // Disable the \"Show ROIs\" button ...\n      if ($show_rois_a.attr(\"onclick\") != undefined)\n        $show_rois_a.removeAttr(\"onclick\");\n      else\n        $show_rois_a.off(\"click\");\n      $show_rois_a.removeAttr(\"href\");\n      $show_rois_a.css(\"color\", \"gray\");\n      // ... and enable the \"Hide ROIs\" button\n      $(\"#hide-rois-a\").on(\"click\", function(){hide_rois(); return false;})\n              .attr(\"href\", \"#\")\n              .css(\"color\", \"\");\n\n      // loads ROIs (if needed) and shows.\n      viewport.viewportimg.get(0).show_rois(theZ, theT, filter);\n  }\n\n\n  var hide_rois = function() {\n      // hides the display of ROIs.\n      if (viewport.viewportimg.get(0).hide_rois) {\n          viewport.viewportimg.get(0).hide_rois();\n      }\n\n      // Disable the \"Hide ROIs\" button ...\n      $(\"#hide-rois-a\").off(\"click\")\n              .removeAttr(\"href\")\n              .css(\"color\", \"gray\");\n      // ... and enable the \"Show ROIs\" button\n      $(\"#show-rois-a\").on(\"click\", function () { show_rois(); return false; })\n              .attr(\"href\", \"#\")\n              .css(\"color\", \"\");\n\n      $(\"#roi_table_postit\").hide();\n      $(\".postit-close-btn\").off(\"click\");\n  }\n\n  var NOZT = \"\";\n  // builds an html table of ROI data. All collapsed.\n  var build_roi_table = function() {\n      var $roi_table = $(\"#roi_small_table\");\n      var json = viewport.viewportimg.get(0).get_roi_json();\n\n      $roi_table.find('tbody').remove();\n\n      // give users a small selection of colours for lines on roi_thumbnails\n      var colours = {'red':'#f00', 'white':'#fff', 'black':'#000', 'blue':'#00f', 'green':'#0f0', 'yellow':'#ff0'}\n      var color_picker = \"\";\n      for (var c in colours) {\n          color_picker += \"<div class='color_picker_option' color='\" + colours[c] + \"' style='background: \" + colours[c] + \"'> </div>\";\n      }\n      var toggle_roi_thumbs = \"<input type='checkbox' id='toggle_roi_thumbs' title='Show ROI Previews' />\";\n      var toggle_shape_text = \"<input type='checkbox' id='toggle_shape_text' checked='true' title='Show/Hide ROI text labels' />\";\n      var toggle_roi_visibility = \"<input type='checkbox' id='toggle_roi_visibility' checked='true' title='Show/Hide ROIs and shapes' />\";\n\n      // thead for whole table:\n      var roi_html = \"<thead id='roi_table_head'><tr>\";\n      roi_html += \"<th></th>\";\n      roi_html += \"<th></th>\"; // first shape (count)\n      roi_html += \"<th>ID</th>\";\n      roi_html += \"<th>Z</th>\"; // no Z for ROI\n      roi_html += \"<th>T</th>\"; // no T for ROI\n      roi_html += \"<th>\" + toggle_shape_text + \" Text</th>\";\n      roi_html += \"<th title='Pick color of ROI outlines'><div style='white-space:nowrap;'>\" + toggle_roi_thumbs + \"Preview</div>\"+ color_picker + \"</th>\";\n      roi_html += \"<th>\" + toggle_roi_visibility + \" Show</th>\";\n      roi_html += \"</tr></thead>\";\n      $roi_table.append($(roi_html));\n\n      get_shape_icon_src = function(type, klass) {\n          var shape_icons = {'Line':'line16.png', 'Ellipse':'ellipse16.png',\n            'Polygon':'polygon16.png', 'Rectangle':'rectangle16.png', 'Mask': 'mask16.png',\n            'Point':'point16.png', 'Label':'text16.png', 'PolyLine':'line16.png'}\n          if (type in shape_icons) {\n              return \"<img class='\"+ klass +\"' src='{% static 'webgateway/img/' %}\" + shape_icons[type] + \"' />\";\n          }\n          return \"\";\n      }\n      var truncate_length = 30;\n      truncate_text = function(text_string) {\n          if (text_string.length < truncate_length)\n              return text_string\n          return text_string.substring(0,truncate_length) + \"...\";\n      }\n      // populate table. Cols are: ID, Z, T, Shape, text, visibility\n      for (var r=0; r<json.length; r++) {\n          var roi = json[r];\n          var shapes = roi['shapes'];\n\n          // thumbnail of roi - display small & popup full-size\n          var line_color = 'f00';   // store current line color, used when we 'show' thumbs to get url.\n          var roiThumbHtml = \"<img src='' id='\"+ roi['id'] +\"_roi_thumb' color='\"+ line_color +\"' width=50 height=33 class='roi_thumb'>\";\n\n          // visibility check for ROI, used to turn ON\\OFF all connected shapes\n          var roiVisibilityHtml = \"<input type='checkbox'  id='\" + roi['id'] + \"_visibility' checked='true' \" +\n                  \"class='roi_visibility' roi_id='\"+ roi['id'] +\"'/>\";\n\n          // process the shapes first - note first shape & text\n          var roiIcon = null;\n          var roiText = \"\";\n          var minT = maxT = minZ = maxZ = null;\n          var shapesHtml = '<tbody>';\n          var shape = null;\n          var text, tRange, zRange;\n          for (var s=0; s<shapes.length; s++) {\n              shape = shapes[s];\n              // Handle cases where the shape is on all sections or all\n              // timepoints.\n              if (typeof shape.theT === \"undefined\") {\n                  tRange = NOZT;\n              } else {\n                  if (minT === null || minT > shape.theT) minT = shape.theT;\n                  if (maxT === null || maxT < shape.theT) maxT = shape.theT;\n              }\n              if (typeof shape.theZ === \"undefined\") {\n                  zRange = NOZT;\n              } else {\n                  if (minZ === null || minZ > shape.theZ) minZ = shape.theZ;\n                  if (maxZ === null || maxZ < shape.theZ) maxZ = shape.theZ;\n              }\n              if (shape['textValue'] != null) {\n                  text = shape['textValue'];\n                  if (shapes.length == 1) roiText = text;\n              } else text = \"\";\n              var indent = \" &nbsp&nbsp&nbsp&nbsp\";    // hack to add \"indent\", but not if shape is only-child\n              if (shapes.length == 1) {\n                  indent = \" &nbsp\";\n              }\n              var shapeThumbHtml = \"<img src='' id='\"+ shape['id'] +\"_shape_thumb' color='\"+ line_color +\"' width=50 height=33 class='roi_thumb shape_thumb'>\";\n\n              var shape_id = roi['id'] + '_' + shape['id'] + '_shape_visibility';\n              var shapeVisibilityHtml = \"<input type='checkbox' id='\" + shape_id + \"' checked='true' \" +\n                      \"roi_id='\" + roi['id'] +\"' shape_id='\" + shape['id'] +\"' class='shape_visibility roi_\" + roi['id'] + \"_vis'/>\";\n\n              shapesHtml += \"<tr id='\"+shape['id']+\"_shape' class='shape_row'>\";\n              // clicking on any cell of a shape 'shape_cell' selects it\n              shapesHtml += \"<td></td>\";\n              shapesHtml += \"<td class='shape_cell icon'>\" + indent + get_shape_icon_src(shape['type'], 'shape_icon') + \"</td>\";\n              shapesHtml += \"<td class='shape_cell'>\" + shape['id'] + \"</td>\"\n              var theZ =\n                  typeof shape.theZ === \"undefined\"? NOZT : shape.theZ + 1;\n              shapesHtml += \"<td class='shape_cell'>\" + theZ + \"</td>\";\n              var theT =\n                  typeof shape.theT === \"undefined\"? NOZT : shape.theT + 1;\n              shapesHtml += \"<td class='shape_cell'>\" + theT + \"</td>\";\n              shapesHtml += \"<td class='shape_cell shape_text' title=\\\"\"+ text +\"\\\"><p>\"+ truncate_text(text.escapeHTML()) + \"</p></td>\";\n              shapesHtml += \"<td class='shape_cell'>\" + shapeThumbHtml + \"</td>\";\n              shapesHtml += \"<td class='shape_cell'>\" + shapeVisibilityHtml + \"</td>\";\n              shapesHtml += \"</tr>\";\n              if (roiIcon == null) roiIcon = shape['type'];\n              else if (roiIcon != shape['type']) roiIcon = \"\";    // mixture of shapes - show no icon\n          }\n          if (roiText == null) roiText = \"\";\n          shapesHtml += '</tbody>';\n\n          // new tbody for each ROI\n          if (tRange != NOZT) tRange = \"\" + (minZ+1) + ((maxZ != minZ) && (\"-\"+(maxZ+1)) || (\"\"));\n          if (zRange != NOZT) zRange = \"\" + (minT+1) + ((maxT != minT) && (\"-\"+(maxT+1)) || (\"\"));\n          var roi_html = \"<thead><tr class='roi_row'>\";\n          roi_html += \"<th><img class='expand_arrow' src='{% static \"webgateway/img/arrowRight_grey.png\" %}' /></th>\";\n          roi_html += \"<th align='left'> &nbsp\"+ get_shape_icon_src(roiIcon, 'roi_icon') + \" (\" + shapes.length + \")</th>\"; // first shape (count)\n          roi_html += \"<th>\" + roi['id'] + \"</th>\";\n          roi_html += \"<th style='white-space: nowrap'> \"+ tRange +\" </th>\"; // no Z for ROI\n          roi_html += \"<th style='white-space: nowrap'> \"+ zRange +\" </th>\"; // no T for ROI\n          roi_html += \"<th class='shape_text' title=\\\"\"+ roiText +\"\\\"><p>\"+ truncate_text(roiText) +\"</p></th>\";\n          roi_html += \"<th>\"+ roiThumbHtml +\"</th>\";\n          roi_html += \"<th>\" + roiVisibilityHtml + \"</th>\";\n          roi_html += \"</tr></thead>\";\n\n          var tbody = $(shapesHtml);\n          if (shapes.length > 1) {\n              $roi_table.append($(roi_html));      // add the roi thead\n          } else {\n              tbody.addClass('only_child');\n          }\n          $roi_table.append(tbody);    // add the tbody\n\n          // now bind mouseover\n          var $roi_thumb_popup = $('#roi_thumb_popup');\n          $('.roi_thumb').hover(function(e) {\n              $roi_thumb_popup.attr('src', $(this).attr('src')).show();\n          }, function(e){\n              $roi_thumb_popup.hide();\n          })\n            .hide();    // don't show thumbs initially\n          $('.roi_thumb').mousemove(function(e) {\n                $roi_thumb_popup.css({ 'left': e.pageX+5, 'top': e.pageY+5 })\n          });\n      }\n  }\n\n  // bound to call-back on roi plugin when ROIs loaded\n  var handle_rois_loaded = function(e) {\n      $(\"#rois_loading_message\").hide();\n      build_roi_table();\n      var $roi_table = $(\"#roi_small_table\");\n      $roi_table.find('tbody').hide();  // hides the shapes\n      $roi_table.find('tbody.only_child').show();\n\n  }\n\n  // bound to clicks on shapes in the viewer\n    var handle_shape_selection = function(e, shape_id) {\n        var $roi_table = $(\"#roi_small_table\");\n        // show the rows\n        var $row = $(\"#\"+shape_id+\"_shape\");\n        $roi_table.find('tbody').children().children().css('background-color', '');// all rows white...\n        $row.children().css('background-color', '#d0d0ff');      // ...show this row blue\n        $row.parent().show();   // show this 'tbody' set of shapes\n        var arrow_src = '{% static \"webgateway/img/arrowDown_grey.png\" %}';\n        $row.parent().prev('thead').find('img.expand_arrow').attr('src', arrow_src);\n    }\n\n    // update src of roi_thumbnails, based on colour. If 'null', set no src and hide thumbs\n    var update_roi_thumbs = function(line_color) {\n        // we set visibility based on 'toggle_roi_thumbs' checkbox\n        var vis = ($(\"#toggle_roi_thumbs\").is(\":checked\"));\n        var update_thumbs = function() {\n            var $thmb = $(this);\n            if (vis) {\n                if ((typeof line_color == 'undefined') || (line_color == null)) {\n                    // update src based on color attribute\n                    line_color = $thmb.attr('color');\n                } else {\n                    $thmb.attr('color', line_color);\n                }\n                var thmb_id = parseInt($thmb.attr('id'));\n                var thmb_src = \"{% url 'webgateway_render_roi_thumbnail' 0 %}\"+ thmb_id +\"/?color=\" + line_color;\n                if ($thmb.hasClass('shape_thumb')) {\n                    thmb_src = \"{% url 'webgateway_render_shape_thumbnail' 0 %}\"+ thmb_id +\"/?color=\" + line_color;\n                }\n                $thmb.attr('src', thmb_src);\n                $thmb.show();\n            } else {\n                // hide thumb and remove src (don't load thumbs)\n                $thmb.attr('src', '');\n                $thmb.hide();\n            }2\n        }\n        $('.roi_thumb').each(update_thumbs);\n        //$('.shape_thumb').each(update_thumbs);\n    }\n\n  var linePlotPos = function (ev, obj) {\n    $('#wblitz-lp-editpos').val(obj);\n    showLinePlot();\n  };\n\n  function undoRDCW () {\n    viewport.undo_channels();\n    syncRDCW(viewport);\n  }\n\n  function redoRDCW () {\n    if (on_batchCopyRDefs) {\n      return batchCopyRDefs_action('cancel');\n    }\n    viewport.redo_channels();\n    syncRDCW(viewport);\n  }\n\n\n  function show_image_link() {\n    var link = location.href;\n    if (location.search.length > 0) {\n      link = location.href.split(location.search)[0];   // handle trailing #\n    }\n    link = link.replace(/(.*?\\/)\\d+(?:\\/\\d+)?(?:\\/)#?$/,'$1');\n    link = link + viewport.getCurrentImgUrlPath() + '?' + viewport.getQuery(true, true, true);\n    $('#curr-link input').attr('value', link);\n    return false;\n  }\n\n  function show_tooltip(self, ttid) {\n    var pos = $(self).parents('div').offset();\n    pos.top += $(self).parents('div').height();\n    pos.left += 10;\n    var tooltip = $('#' + ttid);\n    $('.popped').not(tooltip).removeClass('popped');\n    tooltip.css(pos)\n    .toggleClass('popped');\n    if (tooltip.is('.popped')) {\n      var ww = $(window).width() -5;\n      if ((pos.left + tooltip.width()) > ww) {\n        pos.left -= (pos.left + tooltip.width()) - ww;\n        tooltip.css(pos);\n      }\n      if (tooltip.offset().top + tooltip.height() >= $('#footer').offset().top) {\n        pos.top -= tooltip.height() + 20;\n        tooltip.css(pos);\n      }\n      var auto = $('#' + ttid).find('.autoselect').get(0);\n      if (auto) {\n        auto.focus();\n        auto.select();\n      }\n    }\n  }\n\n  function show_change(obj, val, klass) {\n    if (obj.value != val) {\n      $(obj).addClass(klass);\n    } else {\n      $(obj).removeClass(klass);\n    }\n  }\n\n\n\n  /* ]]> */\n</script>\n    <div id=\"channel-window-help\" style=\"display: none;\">\n      <h2>Rendering Details:</h2>\n      <p>Use the \"Rendering Details\" dialog box to change the viewer settings for this image.\n        The changes will be saved when you click the \"Save\" button.</p>\n      <p>To change the color displayed for a channel, click on the color-picker icon at the right to open the \"Choose Color\" dialog box. You can choose the color using the preset colors or color gradients. Alternatively, hexadecimal color codes may be input in the text box. The changes will take effect when you click \"OK\".</p>\n      <p>To change the color intensity, drag the slider handles for the individual channels to the left or right\n        to change the minimum and maximum display values.</p>\n    </div>\n\n    <!-- Floating boxes come on top -->\n    <div id=\"curr-link\" class=\"tooltipbox\">\n      <table cellspacing=\"0\">\n        <tr>\n          <td>\n            Link to this page:\n          </td>\n          <td class=\"left\">\n            <img class=\"popclose\" src=\"{% static \"webgateway/img/close.gif\" %}\" alt=\"close\" />\n          </td>\n        </tr>\n        <tr>\n          <td><input class=\"autoselect\" type=\"text\" size=\"40\" value=\"\" /></td>\n        </tr>\n      </table>\n    </div>\n\n    <img id=\"roi_thumb_popup\" style=\"border: solid #bbb 1px\"/>\n    <div id=\"roi_table_postit\" class=\"postit\">\n        <h1>ROIs</h1>\n        <div id='rois_loading_message'>Loading ROI data...</div>\n        <div id='roi_table_div'>\n            <table id='roi_small_table' cellpadding='0' cellspacing='0'></table>\n        </div>\n    </div>\n\n    <div id=\"metadata-postit\" class=\"postit\">\n      <h1>Image Information</h1>\n      <h3 class=\"can-collapse\">Basic Information</h3>\n      <div>\n        <table cellspacing=\"0\">\n          <tr class=\"odd\"><td class=\"title\">Image name:&nbsp;</td><td id=\"wblitz-image-name\"></td></tr>\n          <tr class=\"even\"><td class=\"title\">Owner:&nbsp;</td><td id=\"wblitz-image-author\"></td></tr>\n          <!--\n          <tr class=\"odd\"><td class=\"title\">Publication:&nbsp;</td><td id=\"wblitz-image-pub\"></td></tr>\n          <tr class=\"even\"><td class=\"title\">Publication ID:&nbsp;</td><td id=\"wblitz-image-pubid\"></td></tr>\n          <tr class=\"odd\"><td class=\"title\">Created on:&nbsp;</td><td id=\"wblitz-image-timestamp\"></td></tr>\n          -->\n        </table>\n      </div>\n      <h3 class=\"can-collapse\"> Dimensions </h3>\n      <div class=\"dimensions\">\n        <table cellspacing=\"0\">\n          <tr>\n            <th colspan=\"2\" width=\"50%\">Image Size</th>\n            <th colspan=\"2\">Pixel Size</th>\n          </tr>\n          <tr class=\"odd\">\n            <td class=\"title\">X:&nbsp;</td><td><span id=\"wblitz-image-width\"></span>px</td>\n            <td class=\"title\">X:&nbsp;</td><td><span id=\"wblitz-image-pixel-size-x\"></span></td>\n          </tr>\n          <tr class=\"even\">\n            <td class=\"title\">Y:&nbsp;</td><td><span id=\"wblitz-image-height\"></span>px</td>\n            <td class=\"title\">Y:&nbsp;</td><td><span id=\"wblitz-image-pixel-size-y\"></span></td>\n          </tr>\n          <tr class=\"odd\">\n            <td class=\"title\">Z:&nbsp;</td><td><span id=\"wblitz-image-z-count\"></span></td>\n            <td class=\"title\">Z:&nbsp;</td><td><span id=\"wblitz-image-pixel-size-z\"></span></td>\n          </tr>\n          <tr class=\"even\">\n            <td class=\"title\">T:&nbsp;</td><td><span id=\"wblitz-image-t-count\"></span></td>\n            <td colspan=\"2\"></td>\n          </tr>\n        </table>\n      </div>\n\n      <h3 class=\"can-collapse\" id=\"bulk-annotations\" style=\"display: none;\">Bulk Annotations</h3>\n      <div style=\"display: none;\">\n        <table cellspacing=\"0\">\n        </table>\n      </div>\n\n      <!--<h3 class=\"can-collapse defclose\"> Legend </h3>\n      <div id=\"wblitz-image-description\"><span id=\"wblitz-image-description-content\"></span></div>-->\n    </div>\n\n    <div id=\"rdef-postit\" class=\"postit\" style=\"width: 480px\">\n      <h1> Rendering Details </h1>\n      <div id=\"rdef-active-area\">\n\n        <ul class=\"toolbar borderless labels\">\n          <li>\n            <button id=\"rdef-setdef-btn\" class=\"button\" disabled=\"disabled\"\n                {% if manager.image.canAnnotate %}\n                  title=\"Save the current settings.\"\n                {% else %}\n                title=\"You don't have permission to save settings.\"\n                {% endif %}\n                >\n              <img src=\"{% static 'webclient/image/icon_save.png' %}\" style=\"position:relative; top:2px\" /><br>\n                Save\n            </button>\n\n          </li>\n\n          <li><button id=\"rdef-undo-btn\" class=\"button button-disabled\"\n              disabled=\"disabled\" title=\"Undo the last changes to settings\"\n              onclick=\"return undoRDCW();\">\n            <img src=\"{% static \"webclient/image/icon_undo16.png\" %}\" /><br>\n            Undo\n          </button> </li>\n          <li><button id=\"rdef-redo-btn\" class=\"button button-disabled\"\n              disabled=\"disabled\" title=\"Redo the last changes to settings\"\n              onclick=\"return redoRDCW();\">\n            <img src=\"{% static \"webclient/image/icon_redo16.png\" %}\" /><br>\n            Redo\n          </button></li>\n\n          <li class=\"seperator\"></li>\n\n          <li><button id=\"rdef-copy-btn\" class=\"button\" title=\"Copy Rendering Settings\">\n            <img src=\"{% static \"webclient/image/icon_toolbar_copy.png\" %}\"/><br>\n            Copy\n          </button></li>\n          <li><button id=\"rdef-paste-btn\" class=\"button button-disabled\"\n             title=\"Paste Rendering Settings\" disabled=\"disabled\">\n            <img src=\"{% static \"webclient/image/icon_toolbar_paste.png\" %}\"/><br>\n            Paste\n          </button></li>\n        </ul>\n\n        <div style=\"clear:both; border-bottom: solid #ddd 1px; margin: 5px 0;\"></div>\n\n        <div style=\"margin-bottom:5px\">\n          <a id=\"rdef-postit-help\" href=\"#\" onclick=\"return showChannelWindowHelp();\"><img src=\"{% static \"webgateway/img/question.png\" %}\" alt=\"Show help on channel window ranges\" /></a>\n          <input id=\"rd-wblitz-rmodel\" type=\"checkbox\" onchange=\"return handleModelCheckbox();\"/>\n          <label for=\"rd-wblitz-rmodel\">Greyscale</label>\n          <div style=\"float: right\">\n            <input type=\"checkbox\" id=\"showhistogram\" />\n            <label>Show Histogram</label>\n          </div>\n          <div id=\"histogram\" style=\"display:none; width: 100%; height: 125px; background:white; border: solid #ccc 1px; margin-bottom: 6px\"></div>\n          <table cellspacing=\"0\">\n            <tr>\n            </tr>\n          </table>\n        </div>\n\n\n        <button id=\"rdef-minmax-btn\" title=\"Each slider will be set to cover the min/max pixel intensities for that channel\">\n          Min/Max\n        </button>\n        <button id=\"rdef-fullrange-btn\" title=\"Each slider will be set to cover the full range of pixel intensities for the image\">\n          Full Range\n        </button>\n        <button id=\"rdef-reset-btn\" title=\"Applies the original imported settings for this image\">\n          Imported\n        </button>\n      </div>\n\n    </div>\n\n    <!-- End floating boxes -->\n    <div id=\"wblitz\">\n      <div id=\"wblitz-workarea\">\n      <!-- Top Toolbox -->\n        <!-- Zoom -->\n        <div class=\"box\">\n            <h1>Viewing Options</h1>\n          <div class=\"even row\">\n              <!-- multiselect hidden for big images in jquery-plugin-viewportImage.js -->\n            <div class=\"multiselect selected\">\n              Normal\n              <input type=\"radio\" value=\"normal\" name=\"wblitz-proj\" checked onclick=\"return setProjection(this);\" />\n            </div>\n            <div class=\"multiselect\">\n              Max Intensity\n              <input type=\"radio\" value=\"intmax\" name=\"wblitz-proj\" onclick=\"return setProjection(this);\" />\n            </div>\n            <div class=\"multiselect\">\n              Split Channel\n              <input type=\"radio\" value=\"split\" name=\"wblitz-proj\" onclick=\"return setProjection(this);\" />\n            </div>\n            <!--select id=\"wblitz-proj\" onchange=\"viewport.setProjection(this.item(this.selectedIndex).value);\">\n              <option value=\"normal\">Normal</option>\n              <option value=\"intmax\">Maximum Intensity</option>\n              <option value=\"split\">Split Channel</option>\n            </select-->\n          </div>\n          <div class=\"odd row\">\n            <label for=\"wblitz-quality\" class=\"odd\">Quality</label>\n            <!-- br /><input type=\"radio\" name=\"wblitz-quality\" value=\"1.0\"> High</input>\n            <br /><input type=\"radio\" name=\"wblitz-quality\" value=\"0.9\" checked=\"checked\"> Normal</input>\n            <br /><input type=\"radio\" name=\"wblitz-quality\" value=\"0.5\"> Low</input -->\n            <select id=\"wblitz-quality\" onchange=\"viewport.setQuality(this.item(this.selectedIndex).value);\">\n              <option value=\"1.0\">High</option>\n              <option value=\"0.9\" selected=\"selected\">Normal</option>\n              <option value=\"0.5\">Low</option>\n            </select>\n          </div>\n          <div class=\"even row\">\n            <label for=\"wblitz-zoom\">Zoom (%)</label><br />\n            <input type=\"text\" class=\"spin-button\" id=\"wblitz-zoom\" value=\"100\" onchange=\"zoomCheck(this)\" size=\"5\" />\n            <button id=\"full-size\"\n                    title=\"Actual size\"\n                    onclick=\"viewport.setZoom(100)\" ></button>\n            <button id=\"full-screen\"\n                    title=\"Zoom image to fit\"\n                    onclick=\"viewport.setZoomToFit()\"></button>\n          </div>\n          <div class=\"odd row\">\n            <label for=\"wblitz-lp-enable\">Line Plot</label> <input id=\"wblitz-lp-enable\" type=\"checkbox\" onclick=\"editLinePlot(this.checked)\" />\n            <div id=\"wblitz-lp-wrap\" style=\"display: none\">\n              <div>Axis:\n                <select id=\"wblitz-lp-axis-select\" onchange=\"prepLinePlot(this.options[this.options.selectedIndex].value)\">\n                  <option value=\"h\" selected=\"selected\">Horizontal</option>\n                  <option value=\"v\">Vertical</option>\n                </select>\n              </div>\n              <span id=\"wblitz-lp-axis\"></span> =\n              <input type=\"text\" id=\"wblitz-lp-editpos\" size=\"4\" />\n              <button id=\"wblitz-lp-btn\" onclick=\"showLinePlot()\"></button>\n              <div id=\"wblitz-lp-cur\"></div>\n            </div>\n          </div>\n          <h1>Rendering Details</h1>\n          <div class=\"odd row\">\n            <label for=\"wblitz-channels-box\">Channels</label> - <a href=\"#\" onclick=\"$('#rdef-postit').toggle(); return false;\">Edit</a><br />\n            <span id=\"wblitz-channels-box\"></span>\n          </div>\n          <div class=\"even row\">\n            <label for=\"wblitz-rmodel\">Grayscale</label>\n            <input id=\"wblitz-rmodel\" type=\"checkbox\" />\n\t    {% comment %}<!-- #8766 {% if not blitzcon.isAnonymous and image.canWrite %}\n\t    <br />\n            <label for=\"wblitz-invaxis\">Invert Z/T Axis</label>\n            <input id=\"wblitz-invaxis\" type=\"checkbox\" onchange=\"viewport.setInvertedAxis(this.checked);\" />\n\t    {% endif %}-->{% endcomment %}\n            <br />\n            <label>Rendering Settings</label><br />\n            <button id=\"rdef-copy-btn-viewer\" class=\"btn silver btn_text\" title=\"Copy Rendering Settings\">\n                <span>Copy</span>\n            </button>\n\n            <button id=\"rdef-paste-btn-viewer\" class=\"btn silver btn_text\" title=\"Paste Rendering Settings\">\n                <span>Paste</span>\n            </button>\n          </div>\n          <div class=\"odd row\">\n            <label for=\"wblitz-interpolate\">Interpolate</label>\n            <input id=\"wblitz-interpolate\" type=\"checkbox\" {% if interpolate %}checked{% endif %}/>\n          </div>\n            <h1>Current Image</h1>\n          <div class=\"even row\">\n            <span style=\"font-size: 0.9em\">\n            <!--<span id=\"wblitz-shortname\" style=\"white-space: nowrap;\"></span><br />-->\n            Z: <span id=\"wblitz-z-curr\">?</span>/<span id=\"wblitz-z-count\">?</span> |\n            T: <span id=\"wblitz-t-curr\">1</span>/<span id=\"wblitz-t-count\">1</span>\n            </span>\n          </div>\n          {% if image.getPixelSizeX %}\n          <div class=\"odd row\">\n            <label for=\"wblitz-scalebar\">Scale bar</label>\n            <input id=\"wblitz-scalebar\" type=\"checkbox\" disabled/>\n          </div>\n          {% endif %}\n          <div class=\"even row\">\n            <a href=\"#\" onclick=\"$('#metadata-postit').toggle(); return false;\">Image Information</a><br />\n          </div>\n          <div class=\"odd row\">\n                      <a href=\"#\" onmouseover=\"this.href=viewport.getUrl('img_detail')\"\n                      onclick=\"show_image_link();\n                        show_tooltip(this, 'curr-link'); return false;\">\n                Image Link\n            </a><br />\n          </div>\n{% block roi_buttons %}\n          <div id=\"roi_controls\">\n                <h1>ROI Count: {{ roiCount }}</h1>\n                {% if roiCount > 0 %}\n                  <!-- 'link is enabled on imageLoad callback -->\n                    <a id=\"show-rois-a\" href=\"#\" style=\"color:gray\"\n                        {% if roiCount > roiLimit  %}\n                            title=\"Cannot display more than {{roiLimit}} ROIs\"\n                        {% endif %}>Show ROIs</a> |\n                    <a id=\"hide-rois-a\" style=\"color:gray\">Hide</a>\n                {% endif %}\n          </div>\n{% endblock roi_buttons %}\n          <div class=\"odd row\">\n             <button id=\"prevImage\" class=\"btn prev_next_image\" title=\"Previous Image\" disabled=\"disabled\">\n                <span>< Prev</span>\n            </button>\n            <button id=\"nextImage\" class=\"btn prev_next_image\" title=\"Next Image\" disabled=\"disabled\">\n                <span>Next ></span>\n            </button>\n          </div>\n          {% block current_image_tools %}{% endblock %}\n        </div>\n\n        <!-- Image Viewport -->\n        <div id=\"weblitz-viewport\"></div>\n        <img id=\"z-axis-legend\" src=\"{% static \"webgateway/img/z_axis.gif\" %}\" />\n        <img id=\"t-axis-legend\" src=\"{% static \"webgateway/img/t_axis.gif\" %}\" />\n        <div class=\"figure-box-holder\">\n        </div>\n      </div>\n    </div>\n    <div id=\"footer\">\n    {% block footer_content %}\n      &copy; 2007-{{ build_year }} Glencoe Software Inc. All rights reserved.\n    {% endblock %}\n    </div>\n{% endblock full_body %}\n\n<script type=\"text/javascript\">\n  /* <![CDATA[ */\n  $(document).ready(function () {\n    $.ajaxSettings.cache = false;\n  });\n{% block content_script %}\n\n  var gs_static_location_prefix='{% static \"\" %}';\n\n  $(document).ready(function () {\n\n    // Load Lookup Tables - need them ASAP\n    $.getJSON(\"{% url 'webgateway_listLuts_json' %}\", function(data){\n      OME.LUTS = data.luts;\n      OME.PNG_LUTS = data.png_luts;\n    });\n\n    /* Prepare the viewport */\n\n\n    viewport = $.WeblitzViewport($('#weblitz-viewport'), '{{ viewport_server }}',{% block viewport_opts %}{'mediaroot': '{{ STATIC_URL }}' }{% endblock %});\n    viewport.bind('imageLoad', _refresh_cb);\n    viewport.bind('imageLoad', _load_metadata);\n\n    /* Bind zoom changes to the zoom button */\n    viewport.bind('zoom', function(e, percent) {\n      $(\"#wblitz-zoom\").val(''+percent);\n      $(\".popped\").removeClass('popped');\n    });\n\n    /* Bind projection changes */\n    viewport.bind('projectionChange', projectionChange);\n    /* Bind model changes */\n    viewport.bind('modelChange', modelChange);\n    /* Bind channel changes */\n    viewport.bind('channelChange', channelChange);\n    viewport.bind('imageChange', function(){\n      syncChannelsActive(viewport);\n    });\n    /* Bind image changes */\n    viewport.bind('imageChange', function(){\n      imageChange(viewport);\n      axisChange();\n    });\n    /* Bind line plot changes */\n    viewport.bind('linePlotChange', linePlotChange);\n    /* Bind line plot position pick */\n    viewport.bind('linePlotPos', linePlotPos);\n\n    // once image loads, check session via /getImgRDef/ to see if we can paste\n    viewport.bind('imageLoad', function() {\n      // disable histogram for big images\n      if (viewport.loadedImg.tiles) {\n        $(\"#showhistogram\").attr('disabled', true)\n          .parent().css('color', '#bbb')\n          .attr('title', 'Histogram not supported for tiled images');\n        $(\"#wblitz-lp-enable\").attr('disabled', true)\n          .parent().css('color', '#bbb')\n          .attr('title', 'Line plot not supported for tiled images');\n      }\n\n      // Enable 'Show ROIs' button\n    {% if roiCount > 0 and roiCount <= roiLimit  %}\n        $(\"#show-rois-a\").on(\"click\", function () { show_rois(); return false; })\n            .attr(\"href\", \"#\").css(\"color\", \"\");\n    {% endif %}\n      $.getJSON(viewport.viewport_server + \"/getImgRDef/\",\n        function(data){\n            if (data.rdef) {\n              var channels = data.rdef.c.split(\",\"); // c=1|3336:38283$FF0000,2|1649:17015$00FF00\n              if (channels.length != viewport.getChannels().length ||\n                data.rdef.pixel_range != viewport.loadedImg.pixel_range.join(\":\")) {\n                  // images are not compatible\n                  $(\"#rdef-paste-btn\")\n                    .attr('title', 'Copied settings are not compatible with this image');\n                  return;\n                }\n                $(\"#rdef-paste-btn\").prop('disabled', false).removeClass(\"button-disabled\");\n            }\n        }\n      );\n\n      // disable 'Full Range' button if pixelsType is 'float' or 'double'\n      if ($.inArray(viewport.loadedImg.meta.pixelsType, [\"float\", \"double\"]) > -1) {\n        $(\"#rdef-fullrange-btn\").attr(\"disabled\", \"disabled\").addClass(\"button-disabled\");\n      }\n\n      var sizes = viewport.getSizes();\n      // Currently relies on `pixel_range` coming from the server being based\n      // on pixel type byte width\n      var bytes_per_pixel = Math.ceil(\n        Math.log2(viewport.loadedImg.pixel_range[1]) / 8.0);\n      var stack_size = sizes.width * sizes.height * sizes.z\n                       * sizes.c * bytes_per_pixel;\n\n      // disable 'Max Intensity' projection for single-Z images or if total\n      // amount of data that might be projected is > 256MiB\n      var disable_intmax = (\n        viewport.loadedImg.rdefs.invertAxis || sizes.z < 2\n        || stack_size > 256 * 1024 * 1024\n      );\n      $('[name=\"wblitz-proj\"][value=intmax]').prop('disabled', disable_intmax);\n    });\n\n    // 'Color' checkbox to left of image\n    $(\"#wblitz-rmodel\").on('click', function(){\n      setModel(viewport, $(this).get(0).checked?'g':'c');\n    });\n\n    /* Prepare pop tools */\n    $(\".popover > h1\")\n      .prepend('<div class=\"drop-img drop-left\"></div><div class=\"drop-img drop-right\"></div>')\n      .on('click', function () {\n        var this_popped = $(this).parent().is('.popped');\n        $(\".popped\").removeClass('popped');\n        if (this_popped) {\n          $(this).parent().removeClass('popped');\n        } else {\n          $(this).parent().addClass('popped');\n        }\n        return false;\n      });\n\n    $(\".popclose\").on('click', function () {\n      $(\".popped\").removeClass('popped');\n    });\n\n    $(\"#weblitz-viewport\").on('click', function () {\n      $(\".popped\").removeClass('popped');\n      return false;\n    })\n    .on(\"imageChange\", function () {\n      $(\".popped\").removeClass('popped');\n    });\n\n//    var pprep = function (t) {\n//    return function () {\n    /* Prepare the post-its */\n    var layout_pos = $(\"#header\").offset(); //$(\"#weblitz-viewport\").offset();\n    $(\".postit\").each(function () {\n      if (this.id == 'metadata-postit') {\n        $(this).postit({noResize: false, resizeTarget: '#wblitz-image-description'});//.css($(\"#weblitz-viewport-vp\").offset());\n      } else if (this.id == 'roi_table_postit') {\n          $(this).postit({noResize: true})\n            .css(layout_pos);\n      } else {\n        layout_pos.left += 20;\n        layout_pos.top += 20;\n        $(this).postit({noResize: true})\n          .css(layout_pos);\n      }\n    });\n\n    // Create Histogram - displayed when #showhistogram checkbox is checked\n    // NB: we do this AFTER the postit init above, otherwise $(\"#showhistogram\").on('click', ) gets unbound!\n    OME.createViewportHistogram(viewport, \"#histogram\", \"#showhistogram\", \"{% url 'webgateway' %}\");\n\n    var legend_open = function () {\n      var d = $(this);\n      d.off('opening', legend_open);\n      /* Calculate the size for legend post-it */\n      var h = $('#weblitz-viewport-vp').height();\n      var w = ($('#weblitz-viewport-vp').width() - h) /2;\n      d.css('width', Math.max(w, 250));\n      if (d.height() > h) {\n        d.css('height', h);\n      }\n      d.trigger('jqResize');\n    };\n    $(\"#legend-postit\").on('opening', legend_open);\n\n    zindex_automator('.postit', 210);\n\n    /* Make (kind of) sure that closing the rendering defs window closes an eventually opened color picker */\n    $(\"#rdef-postit\").on('closed',\n      function () {\n                    hidePicker();\n                  });\n\n    $('.can-collapse').on('click', function () {\n      $(this).toggleClass('closed').next().slideToggle();\n    });\n\n    $('.can-collapse.defclose').each(function () {\n      $(this).removeClass('defclose').toggleClass('closed').next().hide();\n    });\n//    };\n//    setTimeout ( pprep(this), 1000);\n\n    /* Load the selected image into the viewport */\n    var did = '{{ dataset.id }}';\n    viewport.setQuality('0.9');\n    viewport.load({{ image.id }}, did.length ? parseInt(did) : null, location.search);\n\n    /* Bind actions needed on window resize */\n    $(window).on('resize', calcResize);\n\n    $('input[name=wblitz-quality]').on('click', function () {\n      viewport.setQuality(this.value);\n    });\n\n    viewport.bind('imageChange', refresh_rois);\n    viewport.bind('instant_zoom', function(e, percent) {\n        if (viewport.viewportimg.get(0).setRoiZoom) {\n            viewport.viewportimg.get(0).setRoiZoom(percent);\n        }\n        if (viewport.viewportimg.get(0).setScalebarZoom) {\n            viewport.viewportimg.get(0).setScalebarZoom(percent/100);\n        }\n    });\n\n    var copy_paste_rdef_url = \"{% url 'webgateway_copy_image_rdef_json' %}\";\n    // Handle clicks on Copy/paste in toolbar and left of main viewer\n    // NB: Need to use IDs for robot tests\n    $(\"#rdef-copy-btn, #rdef-copy-btn-viewer\").on('click', function() {\n        copyRdefs(viewport);\n    });\n    $(\"#rdef-paste-btn, #rdef-paste-btn-viewer\").on('click', function() {\n        pasteRdefs(viewport);\n    });\n\n    $(\"#wblitz-interpolate\").on('click', function(event){\n      var interpolate = $(this).is(\":checked\");\n      if (viewport) {\n        viewport.setPixelated(!interpolate);\n      }\n    });\n\n    // Reset defaults without saving\n    $(\"#rdef-reset-btn\").on('click', function(){\n      resetImageDefaults(viewport);\n    });\n\n    $(\"#rdef-minmax-btn\").on('click', function(){\n      viewport.setChannelMinMax();\n      syncRDCW(viewport);\n      viewport.save_channels();\n      updateUndoRedo(viewport);\n    });\n\n    $(\"#rdef-fullrange-btn\").on('click', function(){\n      viewport.setChannelFullRange();\n      syncRDCW(viewport);\n      viewport.save_channels();\n      updateUndoRedo(viewport);\n    });\n\n\n    var toggle_th = function($roiThead) {\n        $roiThead.next().toggle(0, function(){\n            var vis = $roiThead.next().is(':visible');\n            var arrow_src = '{% static \"webgateway/img/arrowRight_grey.png\" %}';\n            if (vis) {\n                arrow_src = '{% static \"webgateway/img/arrowDown_grey.png\" %}';\n            }\n            $roiThead.find('img.expand_arrow').attr('src', arrow_src);\n        });\n    }\n\n    var handleShapeRowClick = function($shapeRow){\n        var shape_id = parseInt($shapeRow.attr('id'));      // E.g. id='123_shape'\n        var selected_xy = viewport.viewportimg.get(0).set_selected_shape(shape_id);\n        var vpb = viewport.viewportimg.get(0).getBigImageContainer();\n        if (vpb!= null && viewport.loadedImg.tiles) {\n            var scale = vpb.currentScale();\n            vpb.recenter({x:selected_xy['x']*scale ,y:selected_xy['y']*scale}, true, true);\n        }\n        var z = $shapeRow.find('td:nth-child(4)').text();\n        if (z != NOZT) {\n            viewport.setZPos(parseInt(z));\n        }\n        var t = $shapeRow.find('td:nth-child(5)').text();\n        if (t != NOZT) {\n            viewport.setTPos(parseInt(t));\n        }\n    }\n\n    var check_visibility_column = function() {\n        if ( $('.roi_visibility').is(':checked') || $('.shape_visibility').is(':checked') ) {\n            $('#toggle_roi_visibility').prop('checked', true);\n        } else {\n            $('#toggle_roi_visibility').prop('checked', false);\n        }\n    }\n\n    var check_roi_visibility_checkbox = function(roi_id) {\n        var roi_id = parseInt(roi_id);\n        var roi_checkbox_id = '#' + roi_id + '_visibility';\n        var shape_checkboxes_class = '.roi_' + roi_id + '_vis';\n        if ( $(shape_checkboxes_class).is(':checked') ) {\n            $(roi_checkbox_id).prop('checked', true);\n            $('#toggle_roi_visibility').prop('checked', true);\n        } else {\n            $(roi_checkbox_id).prop('checked', false);\n            check_visibility_column();\n        }\n    }\n\n    $(\"#roi_small_table\").on('click', function(event) {\n        var $target = $(event.target);\n        if ($target.attr('id') == \"toggle_roi_thumbs\") {\n            update_roi_thumbs();\n            return true;\n        } else if ($target.hasClass('color_picker_option')) {\n            // change the colour of lines drawn on roi_thumbs\n            var line_color = $target.attr('color').substring(1);  // '#f00' -> 'f00'\n            update_roi_thumbs(line_color);\n        } else if ($target.attr('id') == \"toggle_shape_text\") {\n            var show_labels = ($(\"#toggle_shape_text\").is( \":checked\" ));\n            viewport.viewportimg.get(0).show_labels(show_labels);\n            return true;\n        } else if ($target.attr('id') == \"toggle_roi_visibility\") {\n            var activate_rois = ($(\"#toggle_roi_visibility\").is(\":checked\"));\n            if (activate_rois) {\n                var theT = viewport.getTPos();\n                var theZ = viewport.getZPos();\n                viewport.viewportimg.get(0).show_rois(theZ, theT, undefined);\n            } else {\n                viewport.viewportimg.get(0).hide_rois();\n            }\n            $('.roi_visibility').prop('checked', activate_rois);\n            $('.shape_visibility').prop('checked', activate_rois);\n            return true;\n        } else if ($target.hasClass('roi_visibility')) {\n            var roi_id = $target.attr('roi_id');\n            var act_roi = $target.is(':checked');\n            if (act_roi) {\n                viewport.viewportimg.get(0).activate_roi(roi_id);\n            } else {\n                viewport.viewportimg.get(0).deactivate_roi(roi_id);\n            }\n            var theZ = viewport.getZPos();\n            var theT = viewport.getTPos();\n            viewport.viewportimg.get(0).refresh_active_rois(theZ, theT);\n            var check_group_id = '.roi_' + roi_id + '_vis';\n            $(check_group_id).prop('checked', act_roi);\n            check_visibility_column();\n            return true;\n        } else if ($target.hasClass('shape_visibility')) {\n            var roi_id = $target.attr('roi_id');\n            var shape_id = $target.attr('shape_id');\n            var act_shape = $target.is(':checked');\n            if (act_shape) {\n                viewport.viewportimg.get(0).activate_shape(roi_id, shape_id);\n            } else {\n                viewport.viewportimg.get(0).deactivate_shape(roi_id, shape_id);\n            }\n            var theZ = viewport.getZPos();\n            var theT = viewport.getTPos();\n            viewport.viewportimg.get(0).refresh_active_rois(theZ, theT);\n            check_roi_visibility_checkbox(roi_id);\n            return true;\n        } else if ($target.hasClass('shape_cell')) {\n            // a shape td click selects the shape.\n            var $shapeRow = $target.parent();\n            handleShapeRowClick($shapeRow);\n        } else if ($target.parent().hasClass('shape_cell')) {\n            // a shape <p> click selects the shape.\n            var $shapeRow = $target.parent().parent();\n            handleShapeRowClick($shapeRow);\n        } else if ($target.hasClass('shape_icon')) {\n            // need to get to the row\n            var $shapeRow = $target.parent().parent();\n            handleShapeRowClick($shapeRow);\n        } else if ($target.get(0).nodeName.toLowerCase() == 'th'){\n            // a ROI (th) click toggles the ROI-shapes 'tbody' below\n            if ($target.parent().hasClass('roi_row')) {\n                var $roiThead = $target.parent().parent();\n                toggle_th($roiThead);\n            }\n        } else if ($target.parent().get(0).nodeName.toLowerCase() == \"th\"){\n            // a ROI (th <p>) click toggles the ROI-shapes 'tbody' below\n            if ($target.parent().parent().hasClass('roi_row')) {\n                var $roiThead = $target.parent().parent().parent();\n                toggle_th($roiThead);\n            }\n        } else if ($target.hasClass('expand_arrow') || $target.hasClass('roi_icon')) {\n            // clicked on the arrow - need to get the (th)\n            var $roiThead = $target.parent().parent().parent();\n            toggle_th($roiThead);\n        } else if ($target.hasClass('roi_thumb')) {\n            // roi thumbnail may be in thead/tr/td (ROI - toggle shapes) or tbody/tr/td (shape - update viewer)\n            var $tableRow = $target.parent().parent();\n            var nodeName = $tableRow.parent().get(0).nodeName.toLowerCase();\n            if (nodeName == 'tbody') {\n                handleShapeRowClick($tableRow);\n            }\n            else if (nodeName == 'thead') {\n                toggle_th($tableRow.parent());\n            }\n        }\n        return false;\n    });\n\n\n    // Check the Parent window for Previous / Next images...\n    parentWindow = false;\n    try {\n      // might get permission exception if window was opened from another website\n      if (window.opener && window.opener.$) {\n        parentWindow = true;\n      }\n    }\n    catch(err) {\n      console.log(\"window.opener not accessible\");\n    }\n    if (parentWindow) {\n      var $currentImg = window.opener && window.opener.$(\"#image_icon-{{ image.id }}\"),\n          prevImgId, nextImgId;\n      if ($currentImg.length === 1) {\n        // Main thumbnails window\n        prevImgId = $currentImg.prevAll(\":visible\").first().attr('id');\n        if (prevImgId) {prevImgId = prevImgId.split('image_icon-')[1]}\n        nextImgId = $currentImg.nextAll(\":visible\").first().attr('id');\n        if (nextImgId) {nextImgId = nextImgId.split('image_icon-')[1]}\n      } else if ($currentImg.length === 0) {\n        // if not found, try \"Search\" results page layout\n        $currentImg = window.opener.$(\"#image-{{ image.id }}\");\n        prevImgId = prevImgId || $currentImg.prevAll(\":visible\").first().attr('id');  // E.g: image-123\n        if (prevImgId) {\n          prevImgId = prevImgId.split('image-')[1];     // will be undefined if E.g: 'dataset-123'\n        }\n        nextImgId = nextImgId || $currentImg.nextAll(\":visible\").first().attr('id');\n        if (nextImgId) {\n          nextImgId = nextImgId.split('image-')[1];\n        }\n      }\n      // Enable Prev / Next buttons if available (disabled by default)\n      if (prevImgId) {\n        $(\"#prevImage\").prop('disabled', false);\n      }\n      if (nextImgId) {\n        $(\"#nextImage\").prop('disabled', false);\n      }\n\n      // Handle Prev / Next button clicks or keys\n      function nextPrevImage(direction) {\n        var id;\n        if( direction == -1 ) {\n          id = prevImgId;\n        } else {\n          id = nextImgId\n        }\n        if( id ) {\n          window.location.href = \"{{ viewport_server }}/img_detail/\" + id\n        }\n      }\n\n      // Prev / Next keys\n      $(document).on('keydown', function(e) {\n\n          // ignore keystrokes on other inputs, sliders etc.\n          if ($(e.target).prop(\"tagName\") !== \"BODY\") return;\n\n          switch(e.which) {\n              case 37: // left\n                   nextPrevImage(-1);\n              break;\n\n              case 39: // right\n                  nextPrevImage(1);\n              break;\n\n              default: return;\n          }\n          e.preventDefault();\n      });\n\n      $(\"#prevImage\").on('click', function(){\n        nextPrevImage(-1);\n      });\n      $(\"#nextImage\").on('click', function(){\n        nextPrevImage(1);\n      });\n    }\n    \n    // we can bind events to viewportimg for roi_display-plugin to trigger (plugin not created yet)\n    viewport.viewportimg.on(\"shape_click\", handle_shape_selection);\n    viewport.viewportimg.on(\"rois_loaded\", handle_rois_loaded);\n    \n    // 'Scalebar' checkbox to left of image\n    $(\"#wblitz-scalebar\").on('change', function() {\n        if(this.checked) {\n            show_scalebar();\n        } else {\n            hide_scalebar();\n        }\n    });\n  \n    // set up handlers for 'Save' button\n    $(\"#rdef-setdef-btn\").on('click', function(){\n      setImageDefaults(viewport, this, function() {\n        if (window.opener && window.opener.OME.refreshThumbnails) {\n            window.opener.OME.refreshThumbnails({'imageId':{{ image.id }},\n            'thumbnail_url': \"{% url 'get_thumbnail_json' image.id %}\" });\n        }\n      });\n    });\n\n    /* And we're done! */\n\n{% block initial_resize %}\n    /* Set Window Initial Size */\n    //if ($(document).width() < 1024 || $(document).height() < 768)\n    //  window.resizeTo(1024,768);\n{% endblock %}\n    calcResize();\n    gs_script_location_prefix=\"{% static \"webgateway/\" %}\";\n  });\n{% endblock content_script %}\n  /* ]]> */\n</script>\n\n{% endblock %}\n"], "fixing_code": ["\n5.11.0 (October 2021)\n---------------------\n\n- Security vulnerability fixes for\n  [2021-SV3](https://www.openmicroscopy.org/security/advisories/2021-SV3)\n\n5.11.0.rc1 (September 2021)\n---------------------------\n\n## New features\n\n- Plate layout improvements and configuration. See PR for details ([#270](https://github.com/ome/omero-web/pull/270))\n- Configure custom favicon ([#311](https://github.com/ome/omero-web/pull/311))\n- OMERO.table Shapes link to OMERO.iviewer ([#310](https://github.com/ome/omero-web/pull/310))\n- URL /webgateway/table/FILE_ID/query supports col_names filter ([#305](https://github.com/ome/omero-web/pull/305))\n- Improve OMERO.table download usability ([#300](https://github.com/ome/omero-web/pull/300))\n- Configure default user and group for search ([#297](https://github.com/ome/omero-web/pull/297))\n- Add /shape/ID endpoint to JSON API ([#291](https://github.com/ome/omero-web/pull/291))\n\n## Bug fixes\n\n- Fix Shift-click to multi-select Wells ([#296](https://github.com/ome/omero-web/pull/296))\n- Handle parent not found on POST webclient/api/links ([#294](https://github.com/ome/omero-web/pull/294))\n- Display time-stamps in local time ([#303](https://github.com/ome/omero-web/pull/303))\n- Public login button uses configured login page ([#312](https://github.com/ome/omero-web/pull/312))\n\n## Dependencies Updates\n\n- Upgrade Underscore to 1.13.1 ([#317](https://github.com/ome/omero-web/pull/317))\n- Upgrade jquery to 3.5.1, jquery.chosen to 1.8.7, jquery.form to 4.3.0, jquery.ui to 1.12.1, jstree 3.3.10 ([#180](https://github.com/ome/omero-web/pull/180))\n\n5.9.2 (May 2021)\n----------------\n\n## Bug fixes\n\n- Fix invalid Z/T values in webclient render_image URL ([#272](https://github.com/ome/omero-web/pull/272))\n- Active group switch handles invalid group ([#273](https://github.com/ome/omero-web/pull/273))\n- Fix delete of user's photo ([#274](https://github.com/ome/omero-web/pull/274))\n- Don't log missing script params as Error ([#275](https://github.com/ome/omero-web/pull/275))\n- Handle ?show=object-id in invalid group ([#276](https://github.com/ome/omero-web/pull/276))\n- OMERO.table query case insensitive ([#277](https://github.com/ome/omero-web/pull/277))\n- Fix changes that cause bugs in OMERO.mapr ([#282](https://github.com/ome/omero-web/pull/282))\n- Fix User Settings page when in 'All Members' context ([#285](https://github.com/ome/omero-web/pull/285))\n\n## New features\n- Add metadata support to webgateway table endpoint ([#283](https://github.com/ome/omero-web/pull/283))\n\n\n5.9.1 (March 2021)\n------------------\n\n## Bug fixes\n\n- Fix regression introduced in 5.9.0 ([#278](https://github.com/ome/omero-web/pull/278))\n\n5.9.0 (March 2021)\n------------------\n\n## New features\n\n- Webclient UI supports Change Owner ([#149](https://github.com/ome/omero-web/pull/149))\n- Filtering by Key-Value pairs supports autocomplete ([#250](https://github.com/ome/omero-web/pull/250))\n- Support URLs as output from scripts ([#233](https://github.com/ome/omero-web/pull/233))]\n- Improved install info in README ([#239](https://github.com/ome/omero-web/pull/239))]\n- Migrate CI to use GitHub actions ([#240](https://github.com/ome/omero-web/pull/240))]\n- Improve performance of OMERO.table loading ([#243](https://github.com/ome/omero-web/pull/243))\n- OMERO.table ROI column links to ROI in OMERO.iviewer ([#264](https://github.com/ome/omero-web/pull/264))\n- Disable placeholder URL popup on tree ([#257](https://github.com/ome/omero-web/pull/257))\n- Add an option to set SESSION_COOKIE_PATH ([#271]https://github.com/ome/omero-web/pull/271). Thanks to [Andrey Yudin](https://github.com/andreyyudin)\n\n## Bug fixes\n\n- Fix Open_with handling of callbacks in right panel ([#232](https://github.com/ome/omero-web/pull/232))\n- Fix /webgateway/dataset/ID/children/ URL (Thanks to [Johannes Dewender](https://github.com/JonnyJD)) ([#245](https://github.com/ome/omero-web/pull/245))\n- Remove broken 'Create Shares' dialog ([#265](https://github.com/ome/omero-web/pull/265))\n- Fix API ?childCount=true when zero objects found ([#249](https://github.com/ome/omero-web/pull/249))\n- Fix partial loading of annotations ([#256](https://github.com/ome/omero-web/pull/256))\n- Fix ignored limit in webgateway/table endpoint ([#268](https://github.com/ome/omero-web/pull/268))\n\n- Security vulnerability fixes for\n  [2021-SV1](https://www.openmicroscopy.org/security/advisories/2021-SV1),\n  [2021-SV2](https://www.openmicroscopy.org/security/advisories/2021-SV2)\n\n5.8.1 (September 2020)\n----------------------\n\n## Bug fixes\n\n- Restore Python 3.5 compatibility ([#228](https://github.com/ome/omero-web/pull/228))\n\n## Other updates\n\n- Add more details to README for release process ([#220](https://github.com/ome/omero-web/pull/220))\n- Run tox in travis instead of Docker ([#219](https://github.com/ome/omero-web/pull/219))\n- Run black autoformatter, add pre-commit hook ([#218](https://github.com/ome/omero-web/pull/218))\n\n5.8.0 (September 2020)\n----------------------\n\n- webclient:\n   - Disable large zip file creation for data download ([#197](https://github.com/ome/omero-web/pull/197))\n   - Fix 'Move to Group' when data owner not in origin group ([#212](https://github.com/ome/omero-web/pull/212))\n   - History results page supports browse to data ([#206](https://github.com/ome/omero-web/pull/206))\n   - Fix shortening of Companion file names ([#198](https://github.com/ome/omero-web/pull/198))\n   - Fix pagination in history page and omero_table ([#203](https://github.com/ome/omero-web/pull/203))\n   - Link ownership matches child owner ([#199](https://github.com/ome/omero-web/pull/199))\n   - Improve download of OMERO.table as csv performance ([#192](https://github.com/ome/omero-web/pull/192))\n   - Fix display of disk usage for very small percentages ([#211](https://github.com/ome/omero-web/pull/211))\n\n- API changes:\n   - @login_required(doConnectionCleanup=False) will close connection unless streaming ([#191](https://github.com/ome/omero-web/pull/191))\n   - Return 404 for webgateway/imgData/ID if image not found ([#209](https://github.com/ome/omero-web/pull/209))\n\n- Other:\n   - Handle missing config for 'scripts to ignore' ([#195](https://github.com/ome/omero-web/pull/195))\n   - Cap pytest-xdist to avoid psutil Travis failures ([#201](https://github.com/ome/omero-web/pull/201))\n\n5.7.1 (July 2020)\n-----------------\n\n- webgateway\n\n   - Always marshal tile metadata on presence of pyramid ([#193](https://github.com/ome/omero-web/pull/193))\n\n5.7.0 (July 2020)\n-----------------\n\n- webclient:\n   - Preserve whitespace and linebreaks in Comments ([#150](https://github.com/ome/omero-web/pull/150))\n   - Improve filtering Images by numerical Key-Value pairs ([#147](https://github.com/ome/omero-web/pull/147))\n   - Fix editing of 'Shares' in webclient ([#162](https://github.com/ome/omero-web/pull/162))\n   - Fix error when user logged-out and public user configured ([#154](https://github.com/ome/omero-web/pull/154))\n   - No longer ignore the default thumbnail size from the configuration ([#165](https://github.com/ome/omero-web/pull/165))\n   - Fix moving data in webclient tree in Python 3.5 ([#170](https://github.com/ome/omero-web/pull/170))\n   - Handle no 'callback' in request.session ([#186](https://github.com/ome/omero-web/pull/186))\n\n- API changes:\n   - Add ROI support to `paths_to_object` ([#159](https://github.com/ome/omero-web/pull/159))\n   - Add Shape support to `paths_to_object` ([#178](https://github.com/ome/omero-web/pull/178))\n   - Add JSON API support for Experimenters and Groups ([#148](https://github.com/ome/omero-web/pull/148))\n\n- Other:\n   - Fix `render_roi_thumbnail` for unset Z/T index ([#157](https://github.com/ome/omero-web/pull/157))\n   - `omero-web` now requires `omero-py 5.7.0`\n   - Add doc for APPLICATION_SERVER_HOST to settings ([#177](https://github.com/ome/omero-web/pull/177))\n   - Set sign_tags to True by default in .bumpversion.cfg ([#176](https://github.com/ome/omero-web/pull/176))\n   - Fix new flake8 warnings ([#174](https://github.com/ome/omero-web/pull/174))\n   - Add `omero-web-docker` to release process instructions ([#156](https://github.com/ome/omero-web/pull/156))\n\n\n5.6.3 (March 2020)\n------------------\n\n- `omero.web.root_application`: allow \"/\" to be overridden ([#123](https://github.com/ome/omero-web/pull/123))\n- Close sessions where user is anonymous but `is_valid_public_url` is false ([#151](https://github.com/ome/omero-web/pull/151))\n\n5.6.2 (February 2020)\n---------------------\n\n- Fix shape_thumbnail using integer division ([#137](https://github.com/ome/omero-web/pull/137))\n- Use chosen plugin for script UI values ([#135](https://github.com/ome/omero-web/pull/135))\n- Rating post only ([#132](https://github.com/ome/omero-web/pull/132))\n- Fix feedback url encode ([#131](https://github.com/ome/omero-web/pull/131))\n- Script GUI file upload ([#128](https://github.com/ome/omero-web/pull/128))\n- Script upload ([#126](https://github.com/ome/omero-web/pull/126))\n- Fix webadmin search firefox ([#125](https://github.com/ome/omero-web/pull/125))\n- Delete check parent links ([#124](https://github.com/ome/omero-web/pull/124))\n- Map ann parent ID ([#119](https://github.com/ome/omero-web/pull/119))\n- Confine projections to no more than 256MiB of raw data ([#115](https://github.com/ome/omero-web/pull/115))\n- Fix color picker hex input box ([#114](https://github.com/ome/omero-web/pull/114))\n- Fix and expand \"open with\" plugin support ([#113](https://github.com/ome/omero-web/pull/113))\n- Table download ([#3](https://github.com/ome/omero-web/pull/3))\n\n5.6.1 (January 2020)\n--------------------\n\n- Quick fix of the show downloads regex ([#109](https://github.com/ome/omero-web/pull/109))\n\n5.6.0 (January 2020)\n--------------------\n\n- Remove support for Python 2 ([#103](https://github.com/ome/omero-web/pull/103))\n- Remove requirement files ([#107](https://github.com/ome/omero-web/pull/107))\n- Use BytesIO for default Thumbnail ([#104](https://github.com/ome/omero-web/pull/104))\n- omero-web requires OMERODIR ([#100](https://github.com/ome/omero-web/pull/100))\n- Ignore OMERO_HOME in settings.py ([#98](https://github.com/ome/omero-web/pull/98))\n- Better exception handling of custom settings ([#94](https://github.com/ome/omero-web/pull/94))\n- Add support for extra NGINX server configuration ([#90](https://github.com/ome/omero-web/pull/90))\n- Fix ROI maks and thumbnails ([#92](https://github.com/ome/omero-web/pull/92))\n- Fix script result failures ([#87](https://github.com/ome/omero-web/pull/87))\n- Fix download of multiple images in a zip ([#76](https://github.com/ome/omero-web/pull/76))\n- Fix race condition while closing tables ([#25](https://github.com/ome/omero-web/pull/25))\n- Fix `omero_ext.path` import ([#77](https://github.com/ome/omero-web/pull/77))\n- Add `omero.web.nginx_server_extra_config` property ([#80](https://github.com/ome/omero-web/pull/80))\n- Use cached config.xml in `omero.webgateway.getClientSettings` ([#83](https://github.com/ome/omero-web/pull/83))\n- Fix dialogs for thumbnail figure and split-view figure scripts ([#73](https://github.com/ome/omero-web/pull/73))\n- Loosen version checks to support 5.5 with 5.6 ([#32](https://github.com/ome/omero-web/pull/32))\n\n## API changes\n\n- OMERO.web now fails to start when `<app>.urls` fails to import ([#79](https://github.com/ome/omero-web/pull/79))\n- OMERO.web uses Django 1.11, upgraded from Django 1.8.\n- omeroweb.http renamed to omeroweb.httprsp to avoid import name\n  clashes with Django http.\n- URLs must be referenced by `name` not path.to.view.method (previously\n  some webgateway URLS lacked a name). For example, instead of\n  `{% url 'webgateway.views.render_image' image_id theZ theT %}`, use\n  `{% url 'webgateway_render_image' image_id theZ theT %}`.\n\n\n5.5.dev2 (August 2019)\n----------------------\n\n- Improve README\n- Add omeroweb.version\n- Move templates to omeroweb/\n- Bump to omero-py 5.5.1.dev1\n- Extract code from ome/openmicroscopy\n- Make minimal changes for a functioning `python setup.py` ([#1](https://github.com/ome/omero-web/pull/1))\n", "\n            $(\"#free_space\").text(FREE_SPACE.filesizeformat());\n\n            var progressbar = $( \"#progressbar\" ),\n                progressLabel = $( \".progress-label\" );\n\n            progressbar.progressbar({\n              value: 1,\n              change: function() {\n                progressLabel.text( progressbar.progressbar( \"value\" ) + \"%\" );\n              },\n            });\n\n            var fillTable = function(chart_data) {\n\n                var tableRows = [],\n                    rowData, rowId;\n                for(i=0; i<chart_data.length; i++) {\n                    rowData = chart_data[i];\n                    rowId = typeof rowData.userId != 'undefined' ? rowData.userId : rowData.groupId;\n                    tableRows.push('<tr><td class=\"link\">' + rowData.label.escapeHTML() + '(id:'+ rowId +')</td>');\n                    tableRows.push('<td class=\"link\">' + rowData.data.filesizeformat() + '</td></tr>');\n                }\n                \n                $('#drivespaceTable tbody').html(tableRows.join(\"\"));\n                $('#drivespaceTable').show();\n            };\n\n            var plotJson = function(jsonUrl, options) {\n\n                // show 'loading...'\n                $(\"#status\").html('loading...');\n                $(\"#progress\").show();\n\n                $.getJSON(jsonUrl, function(data) {\n\n                    // hide 'loading...'\n                    $(\"#status\").html('');\n                    $(\"#progress\").hide();\n\n                    // save the data to use for chart click handling etc.\n                    $(\"#placeholder\").data('chart_data', data);\n\n                    fillTable(data);\n\n                    // bin all data > 11 users/groups\n                    var total = 0,\n                        chart_data = [],\n                        MAX_SLICES = 10;\n\n                    for(i=0; i<data.length; i++) {\n                        var slice = data[i];\n                        slice.label = slice.label.escapeHTML();\n                        if(i === MAX_SLICES){\n                            chart_data.push({label:'Others', data:slice.data});\n                        } else if (i > MAX_SLICES) {\n                            chart_data[MAX_SLICES].data = chart_data[MAX_SLICES].data + slice.data;\n                        } else {\n                            chart_data.push(slice);\n                        }\n                        total += slice.data;\n                    }\n\n                    $('#total').text(total.filesizeformat());\n                    var usagePercent = 100 * total/(total + FREE_SPACE);\n                    progressbar.progressbar( \"value\", parseInt(Math.round(usagePercent), 10));\n\n                    $(\"#placeholder\").css('width',700).css('height',300);\n                    $.plot($(\"#placeholder\"), chart_data,\n                    {\n                        series: {\n                            pie: {\n                                show: true,\n                                radius: 1,\n                                label: {\n                                    show: true,\n                                    radius: 0.9,\n                                    formatter: function(label, series){\n                                        return '<div class=\"pieLabel\">'+Math.round(series.percent)+'%</div>';\n                                    },\n                                    background: { opacity: 0 }\n                                }\n                            }\n                        },\n                        legend: {\n                            show: true\n                        },\n                        grid: {\n                            hoverable: true,\n                            clickable: true\n                        },\n                    });\n\n                    if (options && options.success) {\n                        options.success();\n                    }\n                });\n            };\n", "\n\n  // Copyright (C) 2015 University of Dundee & Open Microscopy Environment.\n  // All rights reserved.\n\n  // This program is free software: you can redistribute it and/or modify\n  // it under the terms of the GNU Affero General Public License as\n  // published by the Free Software Foundation, either version 3 of the\n  // License, or (at your option) any later version.\n\n  // This program is distributed in the hope that it will be useful,\n  // but WITHOUT ANY WARRANTY; without even the implied warranty of\n  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  // GNU Affero General Public License for more details.\n\n  // You should have received a copy of the GNU Affero General Public License\n  // along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n$(function() {\n\n    if (typeof window.OME === \"undefined\") { window.OME={}; }\n\n    var webindex_url,\n        static_url,\n        data_owners,\n        chgrp_type,\n        target_type,\n        // gets populated with selected objects and possibly also\n        // Filesets IDs if filesets would be split.\n        dryRunTargetObjects,\n        $chgrpform = $(\"#chgrp-form\"),\n        $group_chooser,\n        $move_group_tree,\n        $newbtn,\n        $okbtn;\n\n\n    // external entry point, called by jsTree right-click menu\n    window.OME.handleChgrp = function(webindex, staticurl) {\n        webindex_url = webindex;\n        static_url = staticurl;\n        // gid, gname, oid\n        $chgrpform.dialog({\"title\": \"Move to Group\",\n            height: 450,\n            width: 400});\n        $chgrpform.dialog('open');\n        $chgrpform.empty();\n\n        // Containers to handle everything after fileset check\n        $group_chooser = $(\"<div id='group_chooser'></div>\").appendTo($chgrpform);\n        $move_group_tree = $(\"<div id='move_group_tree'></div>\").appendTo($chgrpform);\n\n        // first we check filesets...\n        checkFilesetSplit();\n\n        //...while we load groups\n        // Need to find which groups we can move selected objects to.\n        // Object owner must be member of target group.\n        var url = webindex_url + \"load_chgrp_groups/?\" + OME.get_tree_selection();\n        $.getJSON(url, function(data){\n            data_owners = data.owners;  // save for later\n            var ownernames = [];\n            for (var o=0; o<data.owners.length; o++) {ownernames.push(data.owners[o][1]);}\n            var headerTxt = \"<p>Move data owned by \" + ownernames.join(\", \").escapeHTML() + \".</p>\" +\n                            \"<h1>Please choose target group below:</h1>\";\n            $group_chooser.append(headerTxt);\n\n            // List the target groups...\n            var html = \"\";\n            for (var i=0; i<data.groups.length; i++){\n                var g = data.groups[i];\n                html += \"<div class='chgrpGroup' data-gid='\"+ g.id + \"'>\";\n                html += \"<img src='\" + permsIcon(g.perms) + \"'/>\";\n                html += g.name.escapeHTML() + \"<hr></div>\";\n            }\n            // If no target groups found...\n            if (data.groups.length === 0) {\n                html = \"<hr><p>No target groups found</p><hr>\";\n                if (data.owners.length === 1) {\n                    html += \"Owner of the data may only be in 1 group.\";\n                } else {\n                    html += \"Owners of the data may only be in 1 group,\";\n                    html += \"or they are not all in any common groups to move data to.\";\n                }\n            }\n            $group_chooser.append(html);\n        });\n    };\n\n    var permsIcon = function(perms) {\n        if (perms.write) return static_url + \"/image/group_green16.png\";\n        if (perms.annotate) return static_url + \"/image/group_orange16.png\";\n        if (perms.read) return static_url + \"/image/group_red16.png\";\n        return static_url + \"/image/personal16.png\";\n    };\n\n    var checkFilesetSplit = function checkFilesetSplit () {\n        // Check if chgrp will attempt to Split a Fileset. Hidden until user hits 'OK'\n        $group_chooser.hide();                      // hide group_chooser while we wait...\n        var sel = OME.get_tree_selection(),\n            selImages = (sel.indexOf('Image') > -1),\n            dtype = sel.split('=')[0],\n            ids = sel.split('=')[1];\n        dryRunTargetObjects = {};\n        dryRunTargetObjects[dtype] = ids;\n        $.get(webindex_url + \"fileset_check/chgrp/?\" + sel, function(html){\n            html = html.trim();\n            if($('div.split_fileset', html).length > 0) {\n                $(html).appendTo($chgrpform);\n                $('.chgrp_confirm_dialog .ui-dialog-buttonset button:nth-child(2)').text(\"Move All\");\n                var filesetIds = [];\n                $('input[name=\"fileset\"]', html).each(function(){\n                    filesetIds.push(parseInt($(this).val(), 10));\n                });\n                if (selImages) {\n                    OME.select_fileset_images(filesetIds);\n                }\n                dryRunTargetObjects['Fileset'] = filesetIds.join(\",\");\n            } else {\n                $group_chooser.show();\n            }\n        });\n    };\n\n    // We do a chgrp 'dryRun' to check for loss of annotations etc.\n    var dryRun = function(targetObjects, groupId) {\n        var dryRunUrl = webindex_url + \"chgrpDryRun/\",\n            data = $.extend({}, targetObjects, {'group_id': groupId});\n        // Show message and start dry-run\n        var msg = \"<p style='margin-bottom:0'><img alt='Loading' src='\" + static_url + \"../webgateway/img/spinner.gif'> \" +\n                  \"Checking which linked objects will be moved...</p>\";\n        var $dryRunSpinner = $(msg).appendTo($group_chooser);\n        $group_chooser.append('<hr>');\n        $.post(dryRunUrl, data, function(jobId){\n            // keep polling for dry-run completion...\n            var getDryRun = function() {\n                var url = webindex_url + \"activities_json/\",\n                    data = {'jobId': jobId};\n                $.get(url, data, function(dryRunData) {\n                    if (dryRunData.finished) {\n                        // Handle chgrp errors by showing message...\n                        if (dryRunData.error) {\n                            var errMsg = dryRunData.error;\n                            // More assertive error message\n                            errMsg = errMsg.replace(\"may not move\", \"Cannot move\");\n                            var errHtml = \"<img style='vertical-align: middle; position:relative; top:-3px' src='\" +\n                                static_url + \"../webgateway/img/failed.png'> \";\n                            // In messages, replace Image[123] with link to image\n                            var getLinkHtml = function(imageId) {\n                                var id = imageId.replace(\"Image[\", \"\").replace(\"]\", \"\");\n                                return \"<a href='\" + webindex_url + \"?show=image-\" + id + \"'>\" + imageId + \"</a>\";\n                            };\n                            errHtml += errMsg.replace(/Image\\[([0-9]*)\\]/g, getLinkHtml);\n                            $dryRunSpinner.html(errHtml);\n                            $okbtn.hide();\n                            return;\n                        }\n\n                        let html = OME.formatDryRun(dryRunData);\n                        html = \"<b style='font-weight: bold'>Move:</b> \" + html;\n                        $dryRunSpinner.html(html);\n                    } else {\n                        // try again...\n                        setTimeout(getDryRun, 200);\n                    }\n                });\n            };\n            getDryRun();\n        });\n    };\n\n    // Called from \"New...\" button, simply add input to form (and hide tree)\n    var newContainer = function newContainer() {\n\n        if ($(\"input[name='new_container_name']\", $chgrpform).length > 0) {\n            return;     // already clicked 'New'!\n        }\n        var ownerId = data_owners[0][0];\n        $move_group_tree.hide();\n        $(\"<p>New \" + target_type.capitalize() + \" name: <input name='new_container_name'/></p>\")\n                .appendTo($chgrpform).trigger('click');\n        // Hidden input\n        $(\"<input name='new_container_type' value='\" + target_type + \"'/>\")\n                .appendTo($chgrpform).hide();\n    };\n\n\n    // Handle clicking on specific group in chgrp dialog...\n    $chgrpform.on( \"click\", \".chgrpGroup\", function() {\n\n        var $this = $(this),\n            gid = $this.attr('data-gid'),\n            chgrp_target_url = webindex_url + \"load_chgrp_target/\" + gid,\n            dtype,\n            dids;\n\n        // Remove all groups (except the chosen one)\n        $(\".chgrpGroup\").remove();\n        // We remove .chgrpGroup to avoid clicking again on .chgrpGroup\n        $group_chooser.append($this.removeClass('chgrpGroup'));\n\n        // Add hidden inputs to include 'group_id' in the POST data\n        $(\"<input name='group_id' value='\"+ gid +\"'/>\")\n                .appendTo($chgrpform).hide();\n\n        // Add group & selected items to chgrp form\n        var selobjs = OME.get_tree_selection().split(\"&\");  // E.g. Image=1,2&Dataset=3\n        for (var i = 0; i < selobjs.length; i++) {\n            dtype = selobjs[i].split(\"=\")[0];\n            dids = selobjs[i].split(\"=\")[1];\n            $(\"<input name='\"+ dtype +\"' value='\"+ dids +\"'/>\")\n                .appendTo($chgrpform).hide();\n        }\n\n        chgrp_type = dtype;     // This will be the dtype of last object\n        if (chgrp_type == \"Dataset\") target_type = \"project\";\n        else if (chgrp_type == \"Image\") target_type = \"dataset\";\n        else if (chgrp_type == \"Plate\") target_type = \"screen\";\n        chgrp_target_url += \"/\"+target_type+\"/\";\n        chgrp_target_url += \"?owner=\" + data_owners[0][0];  // ID of the (first) owner\n\n\n        if (chgrp_type == \"Project\" || chgrp_type == \"Screen\") {\n            // Don't need to show anything\n        } else {\n            // we load a tree - then give it basic selection / expansion behaviour. jsTree would have been overkill!?\n            $(\"#move_group_tree\").load(chgrp_target_url, function(){\n                var node_click = function(){\n                    $(\"#move_group_tree a\").removeClass(\"jstree-clicked\");\n                    // only allow selection of correct nodes\n                    if ($(this).parent().attr('rel') == target_type) {\n                        $(\"a\" ,$(this).parent()).addClass(\"jstree-clicked\");\n                    }\n                    // toggle any children\n                    $(\"ul\" ,$(this).parent()).toggle();\n                };\n                $(\"#move_group_tree a\").on('click', node_click);\n                $(\"#move_group_tree ins\").on('click', node_click);\n                $newbtn.show();\n            });\n        }\n\n        // Now we know target group, can do dry-run to check lost annotations etc...\n        dryRun(dryRunTargetObjects, gid);\n    });\n\n\n    // After we edit the chgrp dialog to handle Filesets, we need to clean-up\n    var resetChgrpForm = function() {\n        $('span', $okbtn).text(\"OK\");\n        $okbtn.show();\n        $newbtn.hide();\n        $(\"#move_group_tree\").show();\n        $(\".split_filesets_info\", $chgrpform).remove();\n    };\n\n    // set-up the dialog\n    $chgrpform.dialog({\n        dialogClass: 'chgrp_confirm_dialog',\n        autoOpen: false,\n        resizable: true,\n        height: 350,\n        width:520,\n        modal: true,\n        buttons: {\n            \"New...\": function() {\n                newContainer();\n            },\n            \"OK\": function() {\n                var $thisBtn = $('.chgrp_confirm_dialog .ui-dialog-buttonset button:nth-child(2)');\n                // If we have split filesets, first submission is to confirm 'Move All'?\n                // We hide the split_filesets info panel and rename submit button to 'OK'\n                if ($(\".split_filesets_info .split_fileset\", $chgrpform).length > 0 && $thisBtn.text() == 'Move All') {\n                    $(\"#group_chooser\").show();\n                    $(\".split_filesets_info\", $chgrpform).hide();\n                    $thisBtn.text('OK');\n                    return false;\n                }\n                $chgrpform.trigger('submit');\n            },\n            \"Cancel\": function() {\n                resetChgrpForm();\n                // TODO - handle this in new jsTree. Reset to original selection if \"Move All\" has changed selection\n                // var datatree = $.jstree._focused();\n                // datatree.deselect_all();\n                // datatree.reselect();        // revert to previous selection\n                $( this ).dialog( \"close\" );\n            }\n        }\n    });\n\n    $newbtn = $('.chgrp_confirm_dialog .ui-dialog-buttonset button:nth-child(1)');\n    $newbtn.hide();\n    $okbtn = $('.chgrp_confirm_dialog .ui-dialog-buttonset button:nth-child(2)');\n\n    // handle chgrp \n    $chgrpform.ajaxForm({\n        beforeSubmit: function(data, $form){\n            // Don't submit if we haven't populated the form with group etc.\n            if (data.length === 0) {\n                OME.alert_dialog(\"Please choose target group.\");\n                return false;\n            }\n            if ($(\"input[name='group_id']\", $form).length === 0) return false;\n            $chgrpform.dialog(\"close\");\n            var chgrp_target = $(\"#move_group_tree a.jstree-clicked\");\n            if (chgrp_target.length == 1){\n                data.push({'name':'target_id', 'value': chgrp_target.parent().attr('id')});\n            }\n        },\n        success: function(data) {\n            var inst = $.jstree.reference('#dataTree');\n            var remove = data.update.remove;\n            var childless = data.update.childless;\n\n            var removalClosure = [];\n            var unremovedParentClosure;\n            var removeType = function(type, ids) {\n                $.each(ids, function(index, id) {\n                    var removeLocated = inst.locate_node(type + '-' + id);\n                    if (removeLocated) {\n                        $.each(removeLocated, function(index, val) {\n                            if (unremovedParentClosure !== undefined &&\n                                val.id === unremovedParentClosure.id) {\n                                // The new selection is also to be deleted, so select its parent\n                                unremovedParentClosure = inst.get_node(inst.get_parent(val));\n                            }\n                            else if (inst.is_selected(val)) {\n                                // This node was selected, mark its parent to be selected instead\n                                unremovedParentClosure = inst.get_node(inst.get_parent(val));\n                            }\n                        // Accumulate nodes for deletion so the new selection can occur before delete\n                        removalClosure.push(val);\n                        });\n                    }\n                });\n            };\n\n            // Find and remove\n            // This is done in a specific order so that the correct node can be selected\n            var typeOrder = ['image', 'acquisition', 'dataset', 'plate', 'project', 'screen'];\n            $.each(typeOrder, function(index, type) {\n                if (remove.hasOwnProperty(type)) {\n                    removeType(type, remove[type]);\n                }\n            });\n\n            // Select the closest parent that was not part of the chgrp\n            inst.deselect_all(true);\n            inst.select_node(unremovedParentClosure);\n\n            // Update the central panel in case chgrp removes an icon\n            $.each(removalClosure, function(index, node) {\n                inst.delete_node(node);\n                var e = {'type': 'delete_node'};\n                var data = {'node': node,\n                            'old_parent': inst.get_parent(node)};\n                update_thumbnails_panel(e, data);\n            });\n\n            function markChildless(ids, dtype) {\n                $.each(ids, function(index, id) {\n                    var childlessLocated = inst.locate_node(property + '-' + id);\n                    // If some nodes were found, make them childless\n                    if (childlessLocated) {\n                        $.each(childlessLocated, function(index, node) {\n                            node.state.loaded = true;\n                            inst.redraw_node(node);\n                        });\n\n                    }\n                });\n            }\n\n            // Find and mark childless\n            for (var property in childless) {\n                if (childless.hasOwnProperty(property)) {\n                    markChildless(childless[property], property);\n                }\n\n            }\n\n            OME.showActivities();\n        }\n    });\n\n    window.OME.formatDryRun = function (dryRunData, showParents) {\n        var html = \"\",\n            move = [], count,\n            unlink = [];\n        [\"Projects\", \"Datasets\", \"Screens\",\n            \"Plates\", \"Wells\", \"Images\"].forEach(function (otype) {\n                if (otype in dryRunData.includedObjects) {\n                    count = dryRunData.includedObjects[otype].length;\n                    if (count === 1) otype = otype.slice(0, -1);  // remove s\n                    move.push(count + \" \" + otype);\n                }\n            });\n        html += move.join(\", \");\n\n        function formatObjects(item) {\n            otype = item[0];\n            unlinked = item[1];\n            count = unlinked.length;\n            if (count === 0) return '';\n            if (count === 1) otype = otype.slice(0, -1);  // remove s\n            var namesList = [], names;\n            unlinked.forEach(function (u) {\n                namesList.push(u.name.escapeHTML());\n            });\n            names = namesList.join(\", \");\n            names = \" <i title='\" + namesList.join(\"\\n\") + \"'>(\" + names.slice(0, 40) + (names.length > 40 ? \"...\" : \"\") + \")</i>\";\n            return count + \" \" + otype + names;\n        }\n\n        if (showParents) {\n            parents = Object.entries(dryRunData.unlinkedParents).map(formatObjects);\n            html += \"<br/><b style='font-weight: bold'>Will be removed from:</b> \" + parents.join(\", \");\n        }\n\n        unlink = Object.entries(dryRunData.unlinkedChildren).map(formatObjects);\n        anns = dryRunData.unlinkedAnnotations;\n        // Format Tags, Files\n        unlink = unlink.concat(Object.entries({'Tags': anns.Tags, 'Files': anns.Files}).map(formatObjects));\n        unlink = unlink.filter(l => l.length > 0);\n\n        if (anns.Comments.length > 0) {\n            count = anns.Comments.length;\n            unlink.push(count + \" Comment\" + (count > 1 ? \"s\" : \"\"));\n        }\n        if (anns.Others > 0) {\n            count = anns.Others;\n            unlink.push(count + \" Other\" + (count > 1 ? \"s\" : \"\"));\n        }\n\n        if (unlink.length > 0) {\n            html += \"<br/><b style='font-weight: bold'>Not included:</b> \" + unlink.join(\", \");\n        }\n        return html;\n    }\n});\n", "\n\n  // Copyright (C) 2020 University of Dundee & Open Microscopy Environment.\n  // All rights reserved.\n\n  // This program is free software: you can redistribute it and/or modify\n  // it under the terms of the GNU Affero General Public License as\n  // published by the Free Software Foundation, either version 3 of the\n  // License, or (at your option) any later version.\n\n  // This program is distributed in the hope that it will be useful,\n  // but WITHOUT ANY WARRANTY; without even the implied warranty of\n  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  // GNU Affero General Public License for more details.\n\n  // You should have received a copy of the GNU Affero General Public License\n  // along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n$(function() {\n\n    if (typeof window.OME === \"undefined\") { window.OME={}; }\n\n    var $chownform = $(\"#chown-form\");\n    var datatree;\n    // Ojbects selected in jsTree\n    var selobjs = [];\n    var dataOwners = [];\n    var loadingExps = false;\n    var exps = [];\n    var dryrunInProgress = false;\n    var dryrunJobId;\n    var $okbtn;\n    var dryrunTimout;\n\n    // template literals not supported on IE 11 (1.3% global browser share)\n    var templateText = `\n        <!-- Hidden fields for objects. e.g. name='Image' value='1,2,3' -->\n        <% _.each(selobjs, function(obj, idx) { %>\n            <input name='<%- obj.split(\"=\")[0] %>' value='<%- obj.split(\"=\")[1] %>' hidden/>\n        <% }) %>\n\n        <!-- List target new owners -->\n\n        <% if (loadingExps) { %>\n            <p>Loading users...</p>\n        <% } else if (exps.length > 0) { %>\n            <h1>Please choose new owner for the selected data:</h1>\n\n            <% _.each(exps, function(exp, idx) { %>\n                <label>\n                    <input name='owner_id' type='radio' value='<%= exp['@id'] %>'/>\n                    <%- exp.FirstName%> <%- exp.LastName %>\n                </label>\n                <br/>\n            <% }) %>\n        <% } else { %>\n            <p>No users found</p>\n        <% } %>\n        <hr/>\n\n        <!-- Show dry-run here -->\n        <div class='dryrun'>\n        <% if (dryrunInProgress) { %>\n            <p style='margin-bottom:0'>\n                <img alt='Loading' src='<%= static_url %>../webgateway/img/spinner.gif' />\n                Checking which objects will be moved...\n                <button title=\"Cancel dry-run\" type=\"button\">Cancel</button>\n            </p>\n        <% } %>\n        </div>\n        <hr/>\n    `\n    var template = _.template(templateText);\n\n    // Update the $chownform with current state\n    function render() {\n\n        var html = template({\n            selobjs: selobjs,\n            exps: exps,\n            loadingExps: loadingExps,\n            dryrunInProgress: dryrunInProgress,\n            static_url: WEBCLIENT.URLS.static_webclient,\n        });\n        $chownform.html(html);\n    }\n\n    // external entry point, called by jsTree right-click menu\n    window.OME.handleChown = function() {\n        // gid, gname, oid\n        $chownform.dialog({\"title\": \"Change Owner\",\n            height: 450,\n            width: 400});\n        $chownform.dialog('open');\n\n        // Add selected items to chown form as hidden inputs\n        selobjs = OME.get_tree_selection().split(\"&\");  // E.g. Image=1,2&Dataset=3\n        datatree = $.jstree.reference('#dataTree');\n        dataOwners = _.uniq(datatree.get_selected(true).map(function(s){return s.data.obj.ownerId}));\n        $okbtn = $('.chown_confirm_dialog .ui-dialog-buttonset button:nth-child(2)');\n\n        loadUsers();    // this will then call dryRun()\n\n        render();\n    };\n\n    function setupEvents() {\n\n        // When user chooses target Owner, do chown dry-run...\n        $chownform.on(\"click\", \".dryrun button\", function (event) {\n            cancelDryRun();\n        });\n    }\n\n    setupEvents();\n\n    function loadUsers() {\n        // Need to find users we can move selected objects to.\n        // Object owner must be member of current group.\n        var gid = WEBCLIENT.active_group_id;\n        var url = WEBCLIENT.URLS.api_base + \"m/experimentergroups/\" + gid + \"/experimenters/\";\n        loadingExps = true;\n        $.getJSON(url, function (data) {\n            loadingExps = false;\n            // Other group members (ignore current owner if just 1)\n            exps = data.data;\n            if (dataOwners.length === 1) {\n                exps = exps.filter(function (exp) {\n                    return exp['@id'] != dataOwners[0];\n                });\n            }\n\n            // we can do dry-run with any user (result is always the same)\n            if (exps.length > 0) {\n                dryRun(exps[0]['@id']);\n            }\n\n            render();\n        });\n    }\n\n    // We do a chown 'dryRun' to check for loss of annotations etc.\n    function dryRun(ownerId) {\n        dryrunInProgress = true;\n        var dryRunUrl = WEBCLIENT.URLS.webindex + \"chownDryRun/\",\n            data = { 'owner_id': ownerId };\n            selobjs.forEach(o => {\n                data[o.split('=')[0]] = o.split(\"=\")[1];\n            });\n\n        $.post(dryRunUrl, data, function (jobId) {\n            dryrunJobId = jobId;\n            // keep polling for dry-run completion...\n            var getDryRun = function () {\n                var url = WEBCLIENT.URLS.webindex + \"activities_json/\",\n                    data = { 'jobId': jobId };\n                $.get(url, data, function (dryRunData) {\n                    if (dryRunData.finished) {\n                        dryrunJobId = undefined;\n                        // Handle chown errors by showing message...\n                        if (dryRunData.error) {\n                            var errMsg = dryRunData.error;\n                            // More assertive error message\n                            errMsg = errMsg.replace(\"may not move\", \"Cannot move\");\n                            var errHtml = \"<img style='vertical-align: middle; position:relative; top:-3px' src='\" +\n                                static_url + \"../webgateway/img/failed.png'> \";\n                            // In messages, replace Image[123] with link to image\n                            var getLinkHtml = function (imageId) {\n                                var id = imageId.replace(\"Image[\", \"\").replace(\"]\", \"\");\n                                return \"<a href='\" + webindex_url + \"?show=image-\" + id + \"'>\" + imageId + \"</a>\";\n                            };\n                            errHtml += errMsg.replace(/Image\\[([0-9]*)\\]/g, getLinkHtml);\n                            $('.dryrun', $chownform).html(errHtml);\n                            $okbtn.hide();\n                            return;\n                        }\n                        dryrunInProgress = false;\n\n                        // formatDryRun is in ome.chgrp.js\n                        var showParents = true;\n                        let html = OME.formatDryRun(dryRunData, showParents);\n                        html = \"<p><b style='font-weight: bold'>Change owner of:</b> \" + html + '</p>';\n                        // replace spinner and 'Cancel' button...\n                        $('.dryrun', $chownform).html(html);\n                    } else {\n                        // try again...\n                        dryrunTimout = setTimeout(getDryRun, 2000);\n                    }\n                });\n            };\n            getDryRun();\n        });\n    };\n\n    function cancelDryRun() {\n        if (dryrunTimout) {\n            clearTimeout(dryrunTimout);\n        }\n        if (!dryrunJobId) return;\n\n        var dryRunUrl = WEBCLIENT.URLS.webindex + \"activities_json/\";\n        $.ajax({\n            url: dryRunUrl,\n            type: 'DELETE',\n            data: JSON.stringify({jobId: dryrunJobId}),\n            success: function (result) {\n                // Do something with the result\n            }\n        });\n    }\n\n    // set-up the dialog\n    $chownform.dialog({\n        dialogClass: 'chown_confirm_dialog',\n        autoOpen: false,\n        resizable: true,\n        height: 350,\n        width:520,\n        modal: true,\n        buttons: {\n            \"Cancel\": function() {\n                cancelDryRun();\n                $( this ).dialog( \"close\" );\n            },\n            \"OK\": function () {\n                $chownform.submit();\n            },\n        },\n        close: function (event, ui) {\n            cancelDryRun();\n        }\n    });\n\n    // handle chown \n    $chownform.ajaxForm({\n        beforeSubmit: function(data, $form){\n            var owner_data = data.filter(d => d.name === 'owner_id');\n            // Don't submit if we haven't populated the form with users etc.\n            if (owner_data.length === 0) {\n                OME.alert_dialog(\"Please choose target user.\");\n                return false;\n            }\n        },\n        success: function(data) {\n            // If we're viewing 'All Members' we don't need to change anything in the tree\n            if (WEBCLIENT.active_user.id != -1) {\n                // Otherwise, we need to remove selected nodes\n                var inst = $.jstree.reference('#dataTree');\n                inst.get_selected(true).forEach(function(node){\n                    inst.delete_node(node);\n                });\n            }\n            $chownform.dialog( \"close\" );\n            OME.showActivities();\n        }\n    });\n\n});\n", "//   Copyright (C) 2016 University of Dundee & Open Microscopy Environment.\n//   All rights reserved.\n\n//   This program is free software: you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as\n//   published by the Free Software Foundation, either version 3 of the\n//   License, or (at your option) any later version.\n\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n\n//   You should have received a copy of the GNU Affero General Public License\n//   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nvar CommentsPane = function CommentsPane($element, opts) {\n\n    var $header = $element.children('h1'),\n        $body = $element.children('div'),\n        $comments_container = $(\"#comments_container\"),\n        objects = opts.selected;\n    var self = this;\n\n    var tmplText = $('#comments_template').html();\n    var commentsTempl = _.template(tmplText);\n\n\n    var initEvents = (function initEvents() {\n\n        $header.on('click', function(){\n            $header.toggleClass('closed');\n            $body.slideToggle();\n\n            var expanded = !$header.hasClass('closed');\n            OME.setPaneExpanded('comments', expanded);\n\n            if (expanded && $comments_container.is(\":empty\")) {\n                this.render();\n            }\n        }.bind(this));\n    }).bind(this);\n\n    // Comment field - show/hide placeholder and submit button.\n    $(\"#add_comment_wrapper label\").inFieldLabels();\n    $(\"#id_comment\")\n        .on('blur', function(event){\n            setTimeout(function(){\n                $(\"#add_comment_form input[type='submit']\").hide();\n            }, 200);    // Delay allows clicking on the submit button!\n        })\n        .on('focus', function(){\n            $(\"#add_comment_form input[type='submit']\").show();\n        });\n\n    // bind removeItem to various [-] buttons\n    $(\"#comments_container\").on(\"click\", \".removeComment\", function(event){\n        var url = $(this).attr('url');\n        var objId = objects.join(\"|\");\n        OME.removeItem(event, \".ann_comment_wrapper\", url, objId);\n        return false;\n    });\n\n    // handle submit of Add Comment form\n    $(\"#add_comment_form\").ajaxForm({\n        beforeSubmit: function(data, $form, options) {\n            var textArea = $('#add_comment_form textarea');\n            if (textArea.val().trim().length === 0) return false;\n            // here we specify what objects are to be annotated\n            objects.forEach(function(o){\n                var dtypeId = o.split(\"-\");\n                data.push({\"name\": dtypeId[0], \"value\": dtypeId[1]});\n            });\n        },\n        success: function(html) {\n            $(\"#id_comment\").val(\"\");\n            self.render();\n        },\n    });\n\n\n    this.render = function render() {\n\n        if ($comments_container.is(\":visible\")) {\n\n            if ($comments_container.is(\":empty\")) {\n                $comments_container.html(\"Loading comments...\");\n            }\n\n            var request = objects.map(function(o){\n                return o.replace(\"-\", \"=\");\n            });\n            request = request.join(\"&\");\n\n            $.getJSON(WEBCLIENT.URLS.webindex + \"api/annotations/?type=comment&\" + request, function(data){\n\n\n                // manipulate data...\n                // make an object of eid: experimenter\n                var experimenters = data.experimenters.reduce(function(prev, exp){\n                    prev[exp.id + \"\"] = exp;\n                    return prev;\n                }, {});\n\n                // Populate experimenters within anns\n                var anns = data.annotations.map(function(ann){\n                    ann.owner = experimenters[ann.owner.id];\n                    if (ann.link && ann.link.owner) {\n                        ann.link.owner = experimenters[ann.link.owner.id];\n                    }\n                    ann.addedBy = [ann.link.owner.id];\n                    return ann;\n                });\n\n                // Show most recent comments at the top\n                anns.sort(function(a, b) {\n                    return a.date < b.date ? 1 : -1;\n                });\n\n                // Remove duplicates (same comment on multiple objects)\n                anns = anns.filter(function(ann, idx){\n                    // already sorted, so just compare with last item\n                    return (idx === 0 || anns[idx - 1].id !== ann.id);\n                });\n\n                // Update html...\n                var html = \"\";\n                if (anns.length > 0) {\n                    html = commentsTempl({'anns': anns,\n                                          'static': WEBCLIENT.URLS.static_webclient,\n                                          'webindex': WEBCLIENT.URLS.webindex});\n                }\n                $comments_container.html(html);\n\n                // Finish up...\n                OME.linkify_element($( \".commentText\" ));\n                OME.filterAnnotationsAddedBy();\n                $(\".tooltip\", $comments_container).tooltip_init();\n            });\n        }\n    };\n\n\n    initEvents();\n\n    if (OME.getPaneExpanded('comments')) {\n        $header.toggleClass('closed');\n        $body.show();\n    }\n\n    this.render();\n};", "//   Copyright (C) 2016 University of Dundee & Open Microscopy Environment.\n//   All rights reserved.\n\n//   This program is free software: you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as\n//   published by the Free Software Foundation, either version 3 of the\n//   License, or (at your option) any later version.\n\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n\n//   You should have received a copy of the GNU Affero General Public License\n//   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nvar CustomAnnsPane = function CustomAnnsPane($element, opts) {\n\n    var $header = $element.children('h1'),\n        $body = $element.children('div'),\n        $custom_annotations = $(\"#custom_annotations\"),\n        objects = opts.selected;\n\n    var tmplText = $('#customanns_template').html();\n    var customannsTempl = _.template(tmplText);\n\n\n    var initEvents = (function initEvents() {\n\n        $header.on('click', function(){\n            $header.toggleClass('closed');\n            $body.slideToggle();\n\n            var expanded = !$header.hasClass('closed');\n            OME.setPaneExpanded('others', expanded);\n\n            if (expanded && $custom_annotations.is(\":empty\")) {\n                this.render();\n            }\n        }.bind(this));\n    }).bind(this);\n\n\n    // display xml in a new window      \n    $body.on( \"click\", \".show_xml\", function(event) {\n        var xml = $(event.target).next().html();\n        var newWindow=window.open('','','height=500,width=500,scrollbars=yes, top=50, left=100');\n        newWindow.document.write(xml);\n        newWindow.document.close();\n        return false;\n    });\n\n\n    this.render = function render() {\n\n        if ($custom_annotations.is(\":visible\")) {\n\n            if ($custom_annotations.is(\":empty\")) {\n                $custom_annotations.html(\"Loading other annotations...\");\n            }\n\n            var request = objects.map(function(o){\n                return o.replace(\"-\", \"=\");\n            });\n            request = request.join(\"&\");\n\n            $.getJSON(WEBCLIENT.URLS.webindex + \"api/annotations/?type=custom&\" + request, function(data){\n\n                // manipulate data...\n                // make an object of eid: experimenter\n                var experimenters = data.experimenters.reduce(function(prev, exp){\n                    prev[exp.id + \"\"] = exp;\n                    return prev;\n                }, {});\n\n                // Populate experimenters within anns\n                var anns = data.annotations.map(function(ann){\n                    ann.owner = experimenters[ann.owner.id];\n                    if (ann.link && ann.link.owner) {\n                        ann.link.owner = experimenters[ann.link.owner.id];\n                    }\n\n                    // AddedBy IDs for filtering\n                    ann.addedBy = [ann.link.owner.id];\n                    // convert 'class' to 'type' E.g. XmlAnnotationI to Xml\n                    ann.type = ann.class.replace('AnnotationI', '');\n                    var attrs = ['textValue', 'timeValue', 'termValue', 'longValue', 'doubleValue', 'boolValue'];\n                    attrs.forEach(function(a){\n                        if (ann[a] !== undefined){\n                            ann.value = ann[a];\n                        }\n                    });\n                    if (objects.length > 1) {\n                        ann.parent = {\n                            'class': ann.link.parent.class.slice(0, -1), // slice parent class 'ProjectI' > 'Project'\n                            'id': ann.link.parent.id\n                        };\n                    }\n                    return ann;\n                });\n\n                // Show most recent annotations at the top\n                anns.sort(function(a, b) {\n                    return a.date < b.date;\n                });\n\n                // Update html...\n                var html = \"\";\n                if (anns.length > 0) {\n                    html = customannsTempl({'anns': anns,\n                                          'static': WEBCLIENT.URLS.static_webclient,\n                                          'webindex': WEBCLIENT.URLS.webindex});\n                }\n                $custom_annotations.html(html);\n\n                // Finish up...\n                OME.filterAnnotationsAddedBy();\n                $(\".tooltip\", $custom_annotations).tooltip_init();\n            });\n        }\n    };\n\n\n    initEvents();\n\n    if (OME.getPaneExpanded('others')) {\n        $header.toggleClass('closed');\n        $body.show();\n    }\n\n    this.render();\n};", "//   Copyright (C) 2016 University of Dundee & Open Microscopy Environment.\n//   All rights reserved.\n\n//   This program is free software: you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as\n//   published by the Free Software Foundation, either version 3 of the\n//   License, or (at your option) any later version.\n\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n\n//   You should have received a copy of the GNU Affero General Public License\n//   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nvar FileAnnsPane = function FileAnnsPane($element, opts) {\n\n    var $header = $element.children('h1'),\n        $body = $element.children('div'),\n        $fileanns_container = $(\"#fileanns_container\"),\n        objects = opts.selected;\n    var self = this;\n\n    var tmplText = $('#fileanns_template').html();\n    var filesTempl = _.template(tmplText);\n\n\n    var initEvents = (function initEvents() {\n\n        $header.on('click', function(){\n            $header.toggleClass('closed');\n            $body.slideToggle();\n\n            var expanded = !$header.hasClass('closed');\n            OME.setPaneExpanded('files', expanded);\n\n            if (expanded && $fileanns_container.is(\":empty\")) {\n                this.render();\n            }\n        }.bind(this));\n    }).bind(this);\n\n\n    // set-up the attachment selection form to use AJAX. (requires jquery.form.js plugin)\n    if ($(\"#choose_attachments_form\").length === 0) {\n        $(\"<form id='choose_attachments_form' title='Choose attachments' \" +\n            \"action='\" + WEBCLIENT.URLS.webindex + \"annotate_file/' method='post'></form>\")\n            .hide().appendTo('body');\n    }\n    $('#choose_attachments_form').ajaxForm({\n        beforeSubmit: function(data) {\n            $(\"#batch_attachments_form\").dialog( \"close\" );\n            $(\"#fileann_spinner\").show();\n        },\n        success: function() {\n            $(\"#fileann_spinner\").hide();\n            // update the list of file annotations and bind actions\n            self.render();\n        },\n        error: function(data){\n            $(\"#fileann_spinner\").hide();\n            alert(\"Upload failed [\" + data.status + \" \" + data.statusText + \"]\");\n        }\n    });\n    // prepare dialog for choosing file to attach...\n    $(\"#choose_attachments_form\").dialog({\n        autoOpen: false,\n        resizable: false,\n        height: 420,\n        width:360,\n        modal: true,\n        buttons: {\n            \"Accept\": function() {\n                // simply submit the form (AJAX handling set-up above)\n                $(\"#choose_attachments_form\").trigger('submit');\n                $( this ).dialog( \"close\" );\n            },\n            \"Cancel\": function() {\n                $( this ).dialog( \"close\" );\n            }\n        }\n    });\n    // show dialog for choosing file to attach...\n    $(\"#choose_file_anns\").on('click', function() {\n        // show dialog first, then do the AJAX call to load files...\n        var $attach_form = $( \"#choose_attachments_form\" );\n        $attach_form.dialog( \"open\" );\n        // load form via AJAX...\n        var load_url = $(this).attr('href');\n        $attach_form.html(\"&nbsp<br><img src='\" + WEBCLIENT.URLS.static_webgateway + \"img/spinner.gif' /> Loading attachments\");\n        $attach_form.load(load_url);\n        return false;\n    });\n\n\n    // Show/hide checkboxes beside files to select files for scripts\n    $(\".toolbar input[type=button]\", $body).on('click',\n        OME.toggleFileAnnotationCheckboxes\n    );\n    $(\"#fileanns_container\").on(\n        \"change\", \"li input[type=checkbox]\",\n        OME.fileAnnotationCheckboxChanged\n    );\n\n    $(\"#fileanns_container\").on(\"click\", \".removeFile\", function(event) {\n        var url = $(this).attr('href'),\n            parents = objects.join(\"|\");  // E.g image-123|image-456\n        OME.removeItem(event, \".file_ann_wrapper\", url, parents);\n        return false;\n    });\n\n    // delete action (files)\n    $(\"#fileanns_container\").on(\"click\", \".deleteFile\", function(event) {\n        var url = $(this).attr('href');\n        OME.deleteItem(event, \"file_ann_wrapper\", url);\n    });\n\n\n    var isNotCompanionFile = function isNotCompanionFile(ann) {\n        return ann.ns !== OMERO.constants.namespaces.NSCOMPANIONFILE;\n    };\n\n    var compareParentName = function(a, b){\n        if (!a.parent.name || !b.parent.name) {\n            return 1;\n        }\n        return a.parent.name.toLowerCase() > b.parent.name.toLowerCase() ? 1 : -1;\n    };\n\n\n    this.render = function render() {\n\n        if ($fileanns_container.is(\":visible\")) {\n\n            if ($fileanns_container.is(\":empty\")) {\n                $fileanns_container.html(\"Loading attachments...\");\n            }\n\n            var request = objects.map(function(o){\n                return o.replace(\"-\", \"=\");\n            });\n            request = request.join(\"&\");\n\n            $.getJSON(WEBCLIENT.URLS.webindex + \"api/annotations/?type=file&\" + request, function(data){\n\n                var checkboxesAreVisible = $(\n                    \"#fileanns_container input[type=checkbox]:visible\"\n                ).length > 0;\n\n                // manipulate data...\n                // make an object of eid: experimenter\n                var experimenters = data.experimenters.reduce(function(prev, exp){\n                    prev[exp.id + \"\"] = exp;\n                    return prev;\n                }, {});\n\n                // Populate experimenters within anns\n                var anns = data.annotations.map(function(ann){\n                    ann.owner = experimenters[ann.owner.id];\n                    if (ann.link && ann.link.owner) {\n                        ann.link.owner = experimenters[ann.link.owner.id];\n                    }\n                    // AddedBy IDs for filtering\n                    ann.addedBy = [ann.link.owner.id];\n                    ann.file.size = ann.file.size !== null ? ann.file.size.filesizeformat() : \"\";\n                    return ann;\n                });\n                // Don't show companion files\n                anns = anns.filter(isNotCompanionFile);\n\n                \n                // If we are batch annotating multiple objects, we show a summary of each tag\n                if (objects.length > 1) {\n\n                    // Map tag.id to summary for that tag\n                    var summary = {};\n                    anns.forEach(function(ann){\n                        var annId = ann.id,\n                            linkOwner = ann.link.owner.id;\n                        if (summary[annId] === undefined) {\n                            ann.canRemove = false;\n                            ann.canRemoveCount = 0;\n                            ann.links = [];\n                            ann.addedBy = [];\n                            summary[annId] = ann;\n                        }\n                        // Add link to list...\n                        var l = ann.link;\n                        // slice parent class 'ProjectI' > 'Project'\n                        l.parent.class = l.parent.class.slice(0, -1);\n                        summary[annId].links.push(l);\n\n                        // ...and summarise other properties on the ann\n                        if (l.permissions.canDelete) {\n                            summary[annId].canRemoveCount += 1;\n                        }\n                        summary[annId].canRemove = summary[annId].canRemove || l.permissions.canDelete;\n                        if (summary[annId].addedBy.indexOf(linkOwner) === -1) {\n                            summary[annId].addedBy.push(linkOwner);\n                        }\n                    });\n\n                    // convert summary back to list of 'anns'\n                    anns = [];\n                    for (var annId in summary) {\n                        if (summary.hasOwnProperty(annId)) {\n                            summary[annId].links.sort(compareParentName);\n                            anns.push(summary[annId]);\n                        }\n                    }\n                }\n\n                // Update html...\n                var html = \"\";\n                if (anns.length > 0) {\n                    html = filesTempl({'anns': anns,\n                                       'webindex': WEBCLIENT.URLS.webindex,\n                                       'userId': WEBCLIENT.USER.id});\n                }\n                $fileanns_container.html(html);\n\n                // Finish up...\n                OME.filterAnnotationsAddedBy();\n                if (checkboxesAreVisible) {\n                    $(\"#fileanns_container input[type=checkbox]:not(:visible)\").toggle();\n                }\n                $(\".tooltip\", $fileanns_container).tooltip_init();\n            });\n            \n        }\n    };\n\n\n    initEvents();\n\n    if (OME.getPaneExpanded('files')) {\n        $header.toggleClass('closed');\n        $body.show();\n    }\n\n    this.render();\n};", "//   Copyright (C) 2016 University of Dundee & Open Microscopy Environment.\n//   All rights reserved.\n\n//   This program is free software: you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as\n//   published by the Free Software Foundation, either version 3 of the\n//   License, or (at your option) any later version.\n\n//   This program is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n\n//   You should have received a copy of the GNU Affero General Public License\n//   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nvar TagPane = function TagPane($element, opts) {\n\n    var $header = $element.children('h1'),\n        $body = $element.children('div'),\n        $tags_container = $(\"#tags_container\"),\n        objects = opts.selected,\n        self = this;\n\n    var tmplText = $('#tags_template').html();\n    var tagTmpl = _.template(tmplText);\n\n\n    var initEvents = (function initEvents() {\n\n        $header.on('click', function(){\n            $header.toggleClass('closed');\n            $body.slideToggle();\n\n            var expanded = !$header.hasClass('closed');\n            OME.setPaneExpanded(\"tags\", expanded);\n\n            if (expanded && $tags_container.is(\":empty\")) {\n                this.render();\n            }\n        }.bind(this));\n    }).bind(this);\n\n\n    if ($(\"#add_tags_form\").length === 0) {\n        $(\"<form id='add_tags_form' title='Tags Selection' action='\" + WEBCLIENT.URLS.webindex + \"annotate_tags/' method='post'>\")\n            .hide().appendTo('body');\n    }\n\n    $(\"#launch_tags_form\").on('click', function(event) {\n        $(\"#add_tags_form\").dialog(\"open\");\n        // load form via AJAX...\n        var load_url = $(this).attr('href');\n        $(\"#add_tags_form\").load(load_url);\n        return false;\n    });\n    // set-up the tags form to use dialog\n\n    $(\"#add_tags_form\").dialog({\n        autoOpen: false,\n        resizable: false,\n        height: 520,\n        width: 780,\n        modal: true,\n        buttons: {\n            \"Save\": function() {\n                // simply submit the form (AJAX handling set-up above)\n                $(\"#add_tags_form\").trigger('prepare-submit').trigger('submit');\n                $( this ).dialog( \"close\" );\n            },\n            \"Cancel\": function() {\n                $( this ).dialog( \"close\" );\n            },\n            \"Reset\": function() {\n                // discard all changes and reload the form\n                $(\"#add_tags_form\").html('').load($(\"#launch_tags_form\").attr('href'));\n            }\n        }\n    });\n    $('#add_tags_form').ajaxForm({\n        beforeSubmit: function(data) {\n            showSpinner();\n        },\n        success: function(data) {\n            // update the list of tags: Re-render tag pane...\n            self.render();\n        },\n        error: function(data) {\n        }\n    });\n\n\n    // bind removeItem to various [-] buttons\n    $(\"#tags_container\").on(\"click\", \".removeTag\", function(event){\n        var url = $(this).attr('url'),\n            parents = objects.join(\"|\");  // E.g image-123|image-456\n        OME.removeItem(event, \".tag_annotation_wrapper\", url, parents);\n        return false;\n    });\n\n    var compareParentName = function(a, b){\n        if (!a.parent.name || !b.parent.name) {\n            return 1;\n        }\n        return a.parent.name.toLowerCase() > b.parent.name.toLowerCase() ? 1 : -1;\n    };\n\n    var showSpinner = function() {\n        // added to $tags_container, so will get removed on render();\n        $tags_container.append('<img src=\"' + WEBCLIENT.URLS.static_webgateway + 'img/spinner.gif\">');\n    };\n\n    this.render = function render() {\n\n        if ($tags_container.is(\":visible\")) {\n\n            if ($tags_container.is(\":empty\")) {\n                $tags_container.html(\"Loading tags...\");\n            }\n\n            var request = objects.map(function(o){\n                return o.replace(\"-\", \"=\");\n            });\n            request = request.join(\"&\");\n\n            var annsUrl = WEBCLIENT.URLS.webindex + \"api/annotations/?type=tag&\" + request\n            $.getJSON(annsUrl, function(data){\n\n                // manipulate data...\n                // make an object of eid: experimenter\n                var experimenters = data.experimenters.reduce(function(prev, exp){\n                    prev[exp.id + \"\"] = exp;\n                    return prev;\n                }, {});\n\n                // Populate experimenters within tags\n                // And do other tag marshalling\n                var tags = data.annotations.map(function(tag){\n                    tag.owner = experimenters[tag.owner.id];\n                    if (tag.link && tag.link.owner) {\n                        tag.link.owner = experimenters[tag.link.owner.id];\n                    }\n                    // AddedBy IDs for filtering\n                    tag.addedBy = [tag.link.owner.id];\n                    tag.textValue = tag.textValue;\n                    tag.description = tag.description;\n                    tag.canRemove = tag.link.permissions.canDelete;\n                    return tag;\n                });\n\n                // If we are batch annotating multiple objects, we show a summary of each tag\n                if (objects.length > 1) {\n\n                    // Map tag.id to summary for that tag\n                    var summary = {};\n                    tags.forEach(function(tag){\n                        var tagId = tag.id,\n                            linkOwner = tag.link.owner.id;\n                        if (summary[tagId] === undefined) {\n                            summary[tagId] = {'textValue': _.escape(tag.textValue),\n                                              'id': tag.id,\n                                              'canRemove': false,\n                                              'canRemoveCount': 0,\n                                              'links': [],\n                                              'addedBy': []\n                                             };\n                        }\n                        // Add link to list...\n                        var l = tag.link;\n                        // slice parent class 'ProjectI' > 'Project'\n                        l.parent.class = l.parent.class.slice(0, -1);\n                        summary[tagId].links.push(l);\n\n                        // ...and summarise other properties on the tag\n                        if (l.permissions.canDelete) {\n                            summary[tagId].canRemoveCount += 1;\n                        }\n                        summary[tagId].canRemove = summary[tagId].canRemove || l.permissions.canDelete;\n                        if (summary[tagId].addedBy.indexOf(linkOwner) === -1) {\n                            summary[tagId].addedBy.push(linkOwner);\n                        }\n                    });\n\n                    // convert summary back to list of 'tags'\n                    tags = [];\n                    for (var tagId in summary) {\n                        if (summary.hasOwnProperty(tagId)) {\n                            summary[tagId].links.sort(compareParentName);\n                            tags.push(summary[tagId]);\n                        }\n                    }\n                }\n\n                // Update html...\n                var html = tagTmpl({'tags': tags,\n                                    'webindex': WEBCLIENT.URLS.webindex,\n                                    'userId': WEBCLIENT.USER.id});\n                $tags_container.html(html);\n\n                // Finish up...\n                OME.filterAnnotationsAddedBy();\n                $(\".tooltip\", $tags_container).tooltip_init();\n            });\n            \n        }\n    };\n\n    initEvents();\n\n    if (OME.getPaneExpanded('tags')) {\n        $header.toggleClass('closed');\n        $body.show();\n    }\n\n    this.render();\n};", "/*jshint browser: true, jquery: true, curly: true, maxlen: 80,\n  eqeqeq: true, immed: true, indent: 4, latedef: true,\n  newcap: true, noarg: true, noempty: true,\n  nonew: true, undef: true, unused: true, trailing: true */\n/*global $, setTimeout, clearTimeout, OME, WEBCLIENT */\n/*exported tagging_form */\n//\n// Copyright (C) 2013-2016 University of Dundee & Open Microscopy Environment.\n// All rights reserved.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n\nvar tagging_form = function(\n    selected_tags, formset_prefix, tags_field_id, me, my_name\n    ) {\n\n    var div_all_tags = $(\"#id_all_tags\");\n    var div_selected_tags = $(\"#id_selected_tags\");\n    var tag_input = $(\"#id_tag\");\n    var tag_input_filter = $(\"#id_tag_filter\");\n    var description_input = $(\"#tag_description\");\n\n    var child_tags;\n    var all_tags = {};\n    var owners = {};\n\n    var canceled = false;\n    var loaded = false;\n\n    if ($(\"#add_tags_progress\").length === 0) {\n        $(\"#add_tags_form\").next().append(\n            \"<div id='add_tags_progress' style='display:none;'>\" +\n            \"    <div class='progress-label'></div>\" +\n            \"    <div class='progress-striped animate-stripes'></div>\" +\n            \"    <div class='progress-value'>0%</div>\" +\n            \"</div>\");\n    }\n\n    // progress bar\n    var progressbar = $(\"#add_tags_progress .progress-striped\").progressbar({\n            change: function() {\n                $(\"#add_tags_progress .progress-value\").text(\n                    $(\"#add_tags_progress .progress-striped\")\n                    .progressbar(\"value\") + \"%\");\n            },\n            complete: function() {\n                setTimeout(\n                    function() { $(\"#add_tags_progress\").remove(); }, 2000);\n            },\n            value: -1\n        });\n    var progressbar_label = $(\"#add_tags_progress .progress-label\");\n    $(\"#add_tags_form\").on(\"dialogclose\", function() {\n        $(\"#add_tags_progress\").remove();\n        progressbar_label = progressbar = $();\n        canceled = true;\n    });\n\n    var get_selected_tagset = function() {\n        var selected = $(\".ui-selected\", div_all_tags).not(\".filtered\");\n        if (selected.length === 1 && (\n            selected.hasClass('alltags-tagset') ||\n            selected.hasClass('alltags-childtag'))) {\n            return (selected.hasClass('alltags-tagset') ?\n                selected : selected.prevAll('.alltags-tagset').eq(0));\n        } else {\n            return null;\n        }\n    };\n\n    var tag_click = function(event) {\n        $(this).toggleClass(\n            'ui-selected').siblings('.ui-selected').removeClass('ui-selected');\n        update_selected_labels();\n        event.stopPropagation();\n    };\n\n    $(\".tag_selection_wrapper\").on('click', function() {\n        // when clicking in the blank space of the list, deselect all\n        $(\".ui-selected\", $(this)).removeClass('ui-selected');\n        update_selected_labels();\n    });\n\n    var create_html = function() {\n        var html = \"\";\n        for (var id in all_tags) {\n            var tag = all_tags[id];\n            if (tag && !(id in child_tags)) {\n                html += create_tag_html(\n                    tag.t, tag.d, tag.i, null, tag.s !== 0\n                );\n                tag.sort_key = tag.t.toLowerCase();\n                if (tag.s) {\n                    for (var sid in tag.s) {\n                        var child = all_tags[tag.s[sid]];\n                        if (child) {\n                            child.sort_key = (tag.t.toLowerCase() +\n                                child.t.toLowerCase());\n                            html += create_tag_html(\n                                child.t, child.d, child.i, tag.i\n                            );\n                        }\n                    }\n                }\n            }\n        }\n        div_all_tags.append(html);\n        // TODO This tooltip application is used until the extra data has loaded\n        // at which point the tooltips are updated and this handler is replaced?\n        $(\".tag_selection div\").on('click', tag_click);\n    };\n\n    var update_selected_labels = function() {\n        var count = 0;\n        $(\".ui-selected\", div_all_tags).not(\".filtered\").each(function() {\n            var $this = $(this);\n            if ($this.hasClass('alltags-tagset')) {\n                count += $this.nextUntil(\":not(.alltags-childtag)\").not(\n                    \".filtered, .ui-selected\").length;\n            } else {\n                count++;\n            }\n        });\n        $(\"#id_tags_selected\").text(count ? count + \" selected\" : \"\");\n        var tagset = get_selected_tagset();\n        if (tagset) {\n            $(\"#id_selected_tag_set\").html(\n                \"Add a new tag in <span class='tagset-title'>\" +\n                tagset.text().escapeHTML() + \"</span> tag set and select it immediately:\");\n        } else {\n            $(\"#id_selected_tag_set\").text(\n                \"Add a new tag and select it immediately:\");\n        }\n    };\n\n    var update_tooltip = function() {\n        var $this = $(this);\n        var tag = all_tags[this.getAttribute(\"data-id\")];\n        var parent_id = all_tags[this.getAttribute(\"data-set\")];\n        var link_owner = null;\n        if ($this.parent().attr(\"id\") === \"id_selected_tags\") {\n            link_owner = this.getAttribute(\"data-linkownername\");\n            if (link_owner && $this.hasClass('owner-tagged')) {\n                link_owner = 'you and ' + link_owner;\n            }\n        }\n        var title = create_tag_title(tag.d, owners[tag.o],\n            parent_id ? parent_id.t : null, link_owner);\n        $this.tooltip({\n            track: false,\n            show: false,\n            hide: false,\n            items: '[data-id]',  // Just needs an attribute that exists\n            content: title\n        });\n    };\n\n    var update_html_list = function(list) {\n        $(\"div\", list).each(update_tooltip);\n    };\n\n    var update_html = function() {\n        update_html_list($(\"#id_all_tags\"));\n        update_html_list($(\"#id_selected_tags\"));\n    };\n\n    var loader = function() {   // wrapper function for all data loading code\n\n        var batch_size = 2000;\n        var tag_count;\n        var raw_tags = [];\n        var raw_desc = {};\n        var batch_steps;\n        var step_weight;\n        var num_tag_callbacks = 0;\n        var num_desc_callbacks = 0;\n\n        var load = function(mode, callback, offset, limit) {\n            var url = WEBCLIENT.URLS.webindex + \"marshal_tagging_form_data/\";\n            url = url + \"?jsonmode=\" + mode +\n                        \"&group=\" + WEBCLIENT.active_group_id;\n            if (offset !== undefined && limit !== undefined) {\n                url += \"&offset=\" + offset + \"&limit=\" + limit;\n            }\n            $.ajax({\n                url: url,\n                dataType: 'json',\n                success: callback\n            });\n        };\n\n        $(\":button:contains('Reset'),:button:contains('Save')\",\n            $(\"#add_tags_form\").parent()).prop(\"disabled\", true).addClass(\n            'ui-state-disabled');\n\n        progressbar_label.text(\"Initializing\");\n        progressbar.progressbar(\"value\", 0);\n        $(\"#add_tags_progress\").show();\n\n        var tag_count_callback = function(data) {\n            if (canceled) {\n                return;\n            }\n            tag_count = data.tag_count;\n            if (tag_count > 0) {\n                batch_steps = Math.ceil(tag_count / batch_size);\n                step_weight = 100 / (2 * batch_steps + 1);\n                progressbar_label.text(\"Loading tags\");\n                for (var offset = 0; offset < tag_count; offset += batch_size) {\n                    load('tags', tags_callback, offset, batch_size);\n                }\n            } else {\n                progressbar_label.text(\"Complete\");\n                progressbar.progressbar(\"value\", 100);\n                finalize_load();\n            }\n        };\n\n        var tags_callback = function(data) {\n            if (canceled) {\n                return;\n            }\n            raw_tags = raw_tags.concat(data);\n            /*jsl:ignore*/\n            if (++num_tag_callbacks === batch_steps) {\n            /*jsl:end*/\n                process_tags();\n                progressbar_label.text(\"Loading owners\");\n                load('owners', owners_callback);\n            }\n            progressbar.progressbar(\"value\", Math.ceil(\n                num_tag_callbacks * step_weight));\n        };\n\n        var owners_callback = function(data) {\n            if (canceled) {\n                return;\n            }\n            process_owners(data);\n            progressbar.progressbar(\"value\", Math.ceil((batch_steps + 1) *\n                                                       step_weight));\n            progressbar_label.text(\"Loading descriptions\");\n            for (var offset = 0; offset < tag_count; offset += batch_size) {\n                load('desc', desc_callback, offset, batch_size);\n            }\n        };\n\n        var desc_callback = function(data) {\n            if (canceled) {\n                return;\n            }\n            $.extend(raw_desc, data);\n            /*jsl:ignore*/\n            if (++num_desc_callbacks === batch_steps) {\n            /*jsl:end*/\n                process_desc();\n                progressbar_label.text(\"Complete\");\n                progressbar.progressbar(\"value\", 100);\n            } else {\n                progressbar.progressbar(\"value\", Math.ceil(\n                    (batch_steps + 1 + num_desc_callbacks) * step_weight));\n            }\n        };\n\n        var process_tags = function() {\n            child_tags = {};\n            for (var idx in raw_tags) {\n                var c = raw_tags[idx][3];\n                if (c) {\n                    for (var cidx in c) {\n                        child_tags[c[cidx]] = true;\n                    }\n                }\n            }\n            var tagstruct = function(tag) {\n                return {\n                    i: tag[0],\n                    t: tag[1],\n                    o: tag[2],\n                    s: tag[3]\n                };\n            };\n            for (idx in raw_tags) {\n                var tag = tagstruct(raw_tags[idx]);\n                all_tags[tag.i] = tag;\n            }\n            create_html();\n\n            var others_tags = []; // track ids of tags linked by other users\n            for (idx in selected_tags) {\n                if (!selected_tags[idx][5]) {\n                    others_tags.push(selected_tags[idx][0]);\n                    // link(s) not owned by current user, don't add to list\n                    continue;\n                }\n                var selected_tag = $(\".tag_selection div[data-id=\" +\n                                     selected_tags[idx][0] + \"]\");\n                if (selected_tag.length) { // not yet selected\n                    selected_tag.appendTo(div_selected_tags);\n                    selected_tag.addClass('owner-tagged');\n                }\n            }\n\n            // add others_count to selected tags\n            for (idx in others_tags) {\n                var tag_to_update = $(\".tag_selection div[data-id=\" +\n                                      others_tags[idx] + \"]\");\n                if (tag_to_update.length) {\n                    var others_count = parseInt(\n                        tag_to_update.attr(\"data-others_count\") || \"0\", 10\n                        ) + 1;\n                    tag_to_update.attr(\"data-others_count\", others_count);\n                    tag_to_update.attr(\"data-linkownername\", others_count ?\n                        others_count + \" other user\" +\n                        (others_count > 1 ? \"s\" : \"\") : selected_tags[idx][2]);\n                }\n            }\n\n            update_html_list($(\"#id_selected_tags\"));\n            sort_tag_list(div_all_tags);\n            sort_tag_list(div_selected_tags);\n            update_filter();\n        };\n\n        var process_owners = function(data) {\n            owners = data;\n            update_html();\n        };\n\n        var process_desc = function() {\n            for (var id in all_tags) {\n                all_tags[id].d = raw_desc[id] || \"\";\n            }\n            update_html();\n            finalize_load();\n        };\n\n        var finalize_load = function() {\n            loaded = true;\n            update_add_new_button_state();\n        };\n\n        load('tagcount', tag_count_callback);\n    };\n\n    var enable_buttons = function() {\n        if (loaded) {\n            $(\":button:contains('Reset'),:button:contains('Save')\",\n              $(\"#add_tags_form\").parent()\n              ).prop(\"disabled\", false).removeClass('ui-state-disabled');\n        }\n    };\n\n    var create_tag_title = function(description, owner, tagset, link_owner) {\n        var title = \"\";\n        if (owner) {\n            title += \"<b>Owner:</b> \" + owner.escapeHTML() + \"<br />\";\n        }\n        if (link_owner) {\n            title += \"<b>Linked by:</b> \" + link_owner.escapeHTML() + \"<br />\";\n        }\n        if (description) {\n            title += \"<b>Description:</b> \" + description.escapeHTML() + \"<br />\";\n        }\n        if (tagset) {\n            title += \"<b>Tag set:</b> \" + tagset.escapeHTML() + \"<br />\";\n        }\n        return title;\n    };\n\n    var create_tag_html = function(text, description, id, parent_id,\n                                   is_tagset) {\n        var cls = is_tagset ? \"alltags-tagset\" :\n            (parent_id ? \"alltags-childtag\" : \"alltags-tag\");\n        var html = \"<div class='\" + cls + \"' data-id='\" + id + \"'\";\n        if (parent_id) {\n            html += \" data-set='\" + parent_id + \"'\";\n        }\n        if (id < 0) { // new tag, save description\n            html += \" data-description='\" + description.escapeHTML() + \"'\";\n        }\n        html += \">\" + text.escapeHTML() + \"</div>\";\n        return html;\n    };\n\n    var select_tags = function(event) {\n        // clear selections in right box\n        $(\"div.ui-selected\", div_selected_tags).removeClass('ui-selected');\n        // move individual tags first\n        $(\"div.ui-selected.alltags-tag:not(.filtered), \" +\n          \"div.ui-selected.alltags-childtag:not(.filtered)\", div_all_tags).each(\n            function() {\n                $(this).appendTo(div_selected_tags);\n            }).each(update_tooltip);\n        // move whole tag sets\n        $(\"div.ui-selected.alltags-tagset:not(.filtered)\", div_all_tags).each(\n            function() {\n                var tag = $(this).next(\"div.alltags-childtag\");\n                while (tag.length) {\n                    var current = tag;\n                    tag = current.next(\"div.alltags-childtag\");\n                    if (!current.hasClass(\"filtered\")) {\n                        current.addClass(\n                            'ui-selected').appendTo(div_selected_tags).each(\n                                update_tooltip);\n                    }\n                }\n            });\n        sort_tag_list(div_selected_tags);\n        update_filter();\n        // scroll to first selected tag\n        var first_selected = $(\"div.ui-selected\", div_selected_tags);\n        if (first_selected.length > 0) {\n            div_selected_tags.parent().scrollTop(\n                first_selected.offset().top - div_selected_tags.offset().top -\n                40);\n        }\n        enable_buttons();\n        event.preventDefault();\n    };\n\n    tag_input_filter.on('keypress', function(event) {\n        if (event.which === 13) {\n            select_tags(event);\n            tag_input_filter.val('');\n        }\n    });\n\n    var deselect_tags = function(event) {\n        // clear selections in left box\n        $(\"div.ui-selected\", div_all_tags).removeClass('ui-selected');\n        // move tags back to left box\n        $(\"div.ui-selected\", div_selected_tags).each(function() {\n            var tagset = $(this).attr(\"data-set\");\n            if (tagset) {\n                $(this).insertAfter($(\"div[data-id=\" + tagset + \"]\",\n                                      div_all_tags));\n            } else {\n                $(this).appendTo(div_all_tags);\n            }\n        }).each(update_tooltip);\n        sort_tag_list(div_all_tags);\n        update_filter(undefined, true);\n        // scroll to first selected tag\n        var first_selected = $(\"div.ui-selected\", div_all_tags);\n        if (first_selected.length > 0) {\n            div_all_tags.parent().scrollTop(first_selected.offset().top -\n                                            div_all_tags.offset().top - 40);\n        }\n        enable_buttons();\n        event.preventDefault();\n    };\n\n    var update_timeout = null;\n    var update_filter = function(event, keep_selection) {\n        clearTimeout(update_timeout);\n        var filters;\n        var cleanup = function() {\n            // make sure tagsets with unfiltered tags are also not filtered\n            if (!no_filter) {\n                var unfiltered_tagsets = {};\n                $(\"div.alltags-childtag:not(.filtered)\", div_all_tags).each(\n                    function() {\n                        unfiltered_tagsets[\n                            this.getAttribute(\"data-set\")] = true;\n                    });\n                $(\"div.alltags-tagset\", div_all_tags).each(function() {\n                    $(this).toggleClass('filtered', !unfiltered_tagsets[\n                        this.getAttribute(\"data-id\")]);\n                });\n            }\n            if (!keep_selection) {\n                $(\"div.ui-selected\", div_all_tags).removeClass(\"ui-selected\");\n                if (filters !== '') {\n                    $(\"div.alltags-tag,div.alltags-childtag\", div_all_tags).not(\n                        \".filtered\").first().addClass(\"ui-selected\");\n                }\n            }\n            update_selected_labels();\n        };\n        var input = tag_input_filter.val();\n        if (input === tag_input_filter.attr('placeholder')) {\n            input = '';\n        }\n        var owner_mode = $(\n            \"select[name=filter_owner_mode] option:selected\").val();\n        filters = input.trim().toLowerCase();\n        var filters_split = filters.split(/ +/);\n        var no_filter = filters === \"\" && owner_mode === \"any\";\n        if (no_filter) {\n            $(\"div.filtered\", div_all_tags).removeClass('filtered');\n            cleanup();\n        } else {\n            var mode = $(\"select[name=filter_mode] option:selected\").val();\n            var tags = $(\"div.alltags-childtag,div.alltags-tag\", div_all_tags);\n            var dofilter = function(pos) {\n                var endpos = Math.min(pos + 1000, tags.length);\n                for (var idx = pos; idx < endpos; idx++) {\n                    var tag = tags.eq(idx);\n                    var tagobj = all_tags[tag.attr(\"data-id\")];\n                    var match = true;\n                    var text = tagobj.t.toLowerCase().trim();\n                    if (mode === \"any\") {\n                        for (var filter in filters_split) {\n                            match = match && text.indexOf(\n                                filters_split[filter]) >= 0;\n                        }\n                    } else {\n                        match = (text.substr(0, filters.length) === filters);\n                    }\n                    if (match && owner_mode !== \"all\") {\n                        match = ((owner_mode === \"me\" && tagobj.o === me) ||\n                                 (owner_mode === \"others\" && tagobj.o !== me));\n                    }\n                    tag.toggleClass(\"filtered\", !match);\n                }\n                if (endpos < tags.length) {\n                    update_timeout = setTimeout(function() {\n                        dofilter(endpos);\n                    }, 1);\n                } else {\n                    cleanup();\n                }\n            };\n            dofilter(0);\n        }\n    };\n\n    var new_tag_counter = 0;\n\n    var add_new_tag = function(event, force) {\n        event.preventDefault();\n\n        var text = tag_input.val();\n        if (text === tag_input.attr('placeholder')) {\n            text = '';\n        }\n        text = text.trim();\n        var description = description_input.val();\n        if (description === description_input.attr('placeholder')) {\n            description = '';\n        }\n        description = description.trim();\n\n        var tagset = get_selected_tagset();\n        if (text.length > 0) {\n\n            var select_dialog;\n            var confirm_tag_selection = function() {\n                if (select_dialog.data(\"clicked_button\") === \"Yes\") {\n                    $(\"div.ui-selected\", div_all_tags).removeClass(\n                        \"ui-selected\");\n                    $(\"[data-id=\" + id + \"]\", div_all_tags).addClass(\n                        \"ui-selected\").removeClass(\"filtered\");\n                    select_tags(event);\n                    tag_input.val('');\n                    description_input.val('');\n                    enable_buttons();\n                }\n            };\n            var confirm_tag_creation = function() {\n                if (select_dialog.data(\"clicked_button\") === \"Yes\") {\n                    add_new_tag(event, true);\n                    enable_buttons();\n                }\n            };\n\n            // check for tag with same name\n            if (!force) {\n                var lowertext = text.toLowerCase();\n                var lowerdesc = description.toLowerCase();\n                for (var id in all_tags) {\n                    if (all_tags[id].t.toLowerCase() === lowertext) {\n                        if (all_tags[id].d.toLowerCase() === lowerdesc) {\n                            if ($(\"[data-id=\" + id + \"]\",\n                                  div_selected_tags).length > 0) {\n                                OME.alert_dialog(\n                                    \"A tag with the same name and description\" +\n                                    \" already exists and is selected.\");\n                            } else if (all_tags[id].s !== 0) {\n                                OME.alert_dialog(\n                                    \"A tag set with the same name and \" +\n                                    \"description already exists.\");\n                            } else {\n                                select_dialog = OME.confirm_dialog(\n                                    \"A tag with the same name and description\" +\n                                    \" already exists. Would you like to \" +\n                                    \"select the existing tag?\",\n                                    confirm_tag_selection, \"Add new tag\",\n                                    [\"Yes\", \"No\"]);\n                            }\n                        } else {\n                            select_dialog = OME.confirm_dialog(\n                                \"A tag with the same name and a different \" +\n                                \"description already exists. \" +\n                                \"Would you still like to add a new tag?\",\n                                confirm_tag_creation, \"Add new tag\",\n                                [\"Yes\", \"No\"]);\n                        }\n                        return;\n                    }\n                }\n            }\n\n            new_tag_counter -= 1;\n            var tagset_id = (tagset ? parseInt(tagset.attr('data-id'), 10) :\n                             false);\n            owners[me] = owners[me] || _.unescape(my_name);\n            all_tags[new_tag_counter] = {\n                i: new_tag_counter,\n                d: description,\n                t: text,\n                o: me,\n                s: tagset_id,\n                sort_key: (tagset_id ? all_tags[tagset_id].t.toLowerCase() :\n                           '') + text.toLowerCase()\n            };\n            var div = $(create_tag_html(\n                text, description, new_tag_counter,\n                tagset ? tagset.attr('data-id') : null));\n            var title = create_tag_title(\n                description, _.unescape(my_name),\n                tagset_id? all_tags[tagset_id].t : null\n            );\n            div.addClass('ui-selected').on('click', tag_click).tooltip({\n                track: true,\n                show: false,\n                hide: false,\n                items: '[data-id]',  // Just needs an attribute that exists\n                content: title\n            });\n            $(\"div.ui-selected\", div_selected_tags).removeClass('ui-selected');\n            div_selected_tags.append(div);\n            tag_input.val('').trigger('focus');\n            description_input.val('');\n            enable_buttons();\n        }\n        sort_tag_list(div_selected_tags);\n        update_filter();\n        // scroll to first selected tag\n        div_selected_tags.parent().scrollTop(\n            $(\"div.ui-selected\", div_selected_tags).offset().top -\n            div_selected_tags.offset().top - 40);\n        update_add_new_button_state();\n    };\n\n    var add_new_tag_on_enter_key = function(event) {\n        if (event.which === 13 && !$(\"#id_add_new_tag\").prop('disabled')) {\n            add_new_tag(event);\n        }\n    };\n    tag_input.on('keypress', add_new_tag_on_enter_key);\n    description_input.on('keypress', add_new_tag_on_enter_key);\n\n    var save_tags = function() {\n        var existing_tags = [];\n        var new_tags = $(\"#id_\" + formset_prefix + \"-TOTAL_FORMS\");\n        var count = 0;\n        $('div', div_selected_tags).each(function() {\n            var tag_id = this.getAttribute('data-id');\n            if (tag_id[0] === \"-\") { // newly created tag\n                new_tags.after($(\"<input type='hidden' />\").attr(\n                    'name', \"newtags-\" + count + \"-tag\").val($(this).text()));\n                new_tags.after($(\"<input type='hidden' />\").attr(\n                    'name', \"newtags-\" + count + \"-description\").val(\n                        this.getAttribute('data-description')));\n                new_tags.after($(\"<input type='hidden' />\").attr(\n                    'name', \"newtags-\" + count + \"-tagset\").val(\n                        this.getAttribute('data-set')));\n                count += 1;\n            } else {\n                // previously existing tag link owned by current user\n                existing_tags.push(tag_id);\n            }\n        });\n        new_tags.val(count);\n        $(\"#\" + tags_field_id).val(existing_tags.join(','));\n    };\n\n    var sort_tag_list = function(list) {\n        $(\"div\", list).sort(function(a, b) {\n            return (all_tags[a.getAttribute('data-id')].sort_key >\n                    all_tags[b.getAttribute('data-id')].sort_key ? 1 : -1);\n        }).appendTo(list);\n    };\n\n    var update_add_new_button_state = function() {\n        if (loaded && tag_input.val() !== '' &&\n            tag_input.val() !== tag_input.attr('placeholder')) {\n            $(\"#id_add_new_tag\").prop('disabled', false);\n        } else {\n            $(\"#id_add_new_tag\").prop('disabled', true);\n        }\n    };\n\n    $(\"#id_tag_select_button\").on('click', select_tags);\n    $(\"#id_tag_deselect_button\").on('click', deselect_tags);\n    $(\"#id_add_new_tag\").on('click', add_new_tag);\n    $(\"#add_tags_form\").off('prepare-submit').on('prepare-submit', save_tags);\n    tag_input.on('keyup', update_add_new_button_state).on('change',\n        update_add_new_button_state);\n    update_add_new_button_state();\n    tag_input_filter.on('keyup', update_filter).on('change', update_filter);\n    $(\"select[name=filter_mode],select[name=filter_owner_mode]\").on('change',\n        update_filter);\n\n    loader();\n\n    // placeholder fixes - should probably be in a more generic place\n    $('[placeholder]').on('focus', function() {\n        var input = $(this);\n        if (input.val() === input.attr('placeholder')) {\n            input.val('');\n            input.removeClass('placeholder');\n        }\n    }).on('blur', function() {\n        var input = $(this);\n        if (input.val() === '' || input.val() === input.attr('placeholder')) {\n            input.addClass('placeholder');\n            input.val(input.attr('placeholder'));\n        }\n    }).trigger('blur').parents('form').on('submit', function() {\n        $(this).find('[placeholder]').each(function() {\n            var input = $(this);\n            if (input.val() === input.attr('placeholder')) {\n                input.val('');\n            }\n        });\n    });\n};\n", "//\n// Copyright (C) 2013 University of Dundee & Open Microscopy Environment.\n// All rights reserved.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n$(document).ready(function() {\n\n    // Clear selection (only needed on page 'refresh')\n    $(\"#tagChooser option\").prop('selected', false);\n\n\n    // Show / Hide un-tagged images after sorting or checkbox click\n    var updateNotTagged = function() {\n        var show_untagged_images = $(\"input[name=Show_Untagged_Images]\").is(\":checked\");\n        if (show_untagged_images) {\n            $(\".notTagged\").show();\n        } else {\n            $(\".notTagged\").hide();\n        }\n    };\n    $(\"input[name=Show_Untagged_Images]\").on('click', updateNotTagged);\n\n\n    // Add <br> to break up long rows of thumbnails\n    var updateRowCount = function(){\n        var colCount = parseInt($(\"input[name=Max_Columns]\").val(), 10);\n        $(\".thumbnail_set td:has(.img_panel)\").each(function(){\n            var $td = $(this);\n            $(\"br\", $td).remove();  // remove old <br>\n            // $(\":nth-child(\" + colCount + \"n)\", $td).after(\"<br/>\");\n            // <td> may have <div> children that break up child thumbs\n            var i = 1;\n            $td.children().each(function(){\n                var $child = $(this);\n                if (i % colCount === 0) {\n                    $child.after(\"<br/>\")\n                }\n                if (this.nodeName.toLowerCase() == 'div') {\n                    i = 1;      // new row\n                } else {\n                    i++;\n                }\n            });\n        });\n    };\n    $(\"input[name=Max_Columns]\").on('keyup input', updateRowCount);\n\n    updateRowCount();   // initialise layout\n\n\n    // If no tags are chosen, we need to return to initial state\n    var clearTagSorting = function() {\n        $(\".thumbnail_set\").each(function() {\n            var $this = $(this),\n                $toRemove = $('tr:has(.img_panel)', $this);\n\n            $tr = $('<tr><td></td></tr>');\n            $tr.appendTo($this);\n            $td = $('<td></td>').appendTo($tr);\n            $(\".img_panel\", $this).appendTo($td);\n            // now that we've moved the images, we can clean up!\n            $toRemove.remove();\n            updateRowCount();\n        });\n    }\n\n\n    // Initialise the Chosen plugin, handle Adding / Removing of Tags...\n    var $TagIdsInput = $(\"input[name=Tag_IDs]\");\n    var selectedTagIds = [];\n    $(\"#tagChooser\")\n        .chosen({placeholder_text:'Choose Tags'})\n        .on('change', function(evt, data) {\n            if (data.deselected) {\n                var toRemove = data.deselected;\n                selectedTagIds.splice(selectedTagIds.indexOf(toRemove), 1);\n            } else if (data.selected) {\n                selectedTagIds.push(data.selected);\n            }\n            // update input for form submission\n            $TagIdsInput.val(selectedTagIds.join(\",\"));\n\n            if (selectedTagIds.length == 0) {\n                clearTagSorting();\n                return;\n            }\n\n            var tagValues = {};\n            // Have to look-up the Tag names from the UI\n            $(\"#tagChooser option:selected\").each(function(){\n                var $this = $(this);\n                tagValues[$this.attr('value')] = $this.text();\n            });\n\n            // Now we need to sort images by ids....\n            // Let's assign letters to tags in order, so we can use to sort,\n            // E.g. 'Metaphase' == 'a', 'Anaphase' == 'b', 'Dead' == 'c'\n            // Then we can combine: 'Metaphase'+'Dead' ==> 'ac', 'Anaphase'+'Dead' ==> 'bc'\n            // And sort: 'a', 'ab', 'abc', 'b', 'bc', 'c', '' (untagged)\n            var letters = \"abcdefghijklmnopqrstuvwxyz\",\n                tagLetters = {},\n                letterTags = {};    // backwards map to decode\n            for (var t=0; t<selectedTagIds.length; t++){\n                tagLetters[selectedTagIds[t]] = letters[t];\n                letterTags[letters[t]] = selectedTagIds[t];\n            }\n\n            // E.g. 'ac' ==> ['Metaphase', 'Dead']\n            var getTagsFromKey = function(key) {\n                var rv = [];\n                for (var k=0; k<key.length; k++) {\n                    var tagId = letterTags[key[k]];\n                    rv.push(tagValues[tagId]);\n                }\n                return rv;\n            }\n\n            // For each 'Dataset' (or set of Images)...\n            $(\".thumbnail_set\").each(function() {\n                // Make a data structure of image-ids : [tag ids]\n                var $this = $(this),\n                    imageTags = {},\n                    imgIds = [];\n                $(\".img_panel\", $this).each(function(){\n                    var $img = $(this),\n                        iId = $img.attr('data-iId'),\n                        tagString = $img.attr('data-tags');\n                    imageTags[iId] = tagString.split(\",\");\n                    imgIds.push(iId);\n                });\n\n                // Prepare for sorting...\n                sortedImgs = []\n                for (var i=0; i<imgIds.length; i++) {\n                    // Build up a string based on the image's Tags, that can be used to sort\n                    var imgId = imgIds[i],\n                        tagIds = imageTags[imgId],\n                        letterKeys = [];\n                    for (var c=0; c<selectedTagIds.length; c++) {\n                        var tid = selectedTagIds[c];\n                        if (tagIds.indexOf(tid) > -1) {\n                            letterKeys.push(tagLetters[tid]);\n                        }\n                    }\n                    var tagKey = letterKeys.join(\"\");    // E.g. 'a' or 'bc'\n                    sortedImgs.push({'id':imgId, 'tagKey':tagKey});\n                }\n                // Do the Sorting!\n                sortedImgs.sort(function(a, b) {\n                    var x = a['tagKey'], y = b['tagKey'];\n                    if (x.length === 0) return 1;\n                    if (y.length === 0) return -1;\n                    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n                });\n\n                // Group Images with same tags. E.g. all of the with key 'ac'\n                var results = [],        // List of {'tagNames':[], 'imgIds':[]}\n                    rkey = \"\", rIds = [];\n                for (var s=0; s<sortedImgs.length; s++) {\n                    var sImg = sortedImgs[s];\n                    if (sImg.tagKey == rkey) {\n                        rIds.push(sImg.id);\n                    } else {\n                        if (rIds.length > 0) {\n                            results.push({'rkey':rkey, 'tags': getTagsFromKey(rkey), 'imgIds':rIds});\n                        }\n                        rIds = [sImg.id];\n                        rkey = sImg.tagKey;\n                    }\n                }\n                results.push({'rkey':rkey, 'tags': getTagsFromKey(rkey), 'imgIds':rIds});\n\n\n                // Update the UI\n                var $toRemove = $('tr:has(.img_panel)', $this);\n\n                // For each Tag combination... (E.g. 'Metaphase'+'Dead')\n                var topLevelTag = \"\";\n                var $td, $tr;\n                for (var r=0; r<results.length; r++) {\n\n                    var tagData = results[r],\n                        tagsText = tagData.tags.join(\", \");     // 'Metaphase, Dead'\n                    if (tagsText.length === 0) {\n                        tagsText = \"Not Tagged\";\n                    }\n                    if (tagsText.length === 0 || tagData.tags[0] !== topLevelTag) {\n                        // start a new container...\n                        topLevelTag = tagData.tags[0] || tagsText;      // Group under 1st tag (unless we have no tags)\n\n                        $tr = $('<tr><th><h2>' + topLevelTag.escapeHTML() + '</h2></th></tr>');\n                        $tr.appendTo($this);\n                        $td = $('<td></td>').appendTo($tr);\n                    }\n                    $td.append('<div class=\"subsetLabel\">'+ tagsText + '</div>');\n\n                    if (tagsText === \"Not Tagged\") {\n                        $tr.addClass('notTagged');\n                    }\n\n                    // Add the images (move from previous position)...\n                    for (var i=0; i<tagData.imgIds.length; i++) {\n                        $('#thumbnail-'+tagData.imgIds[i]).appendTo($td);\n                    }\n\n                }\n                // now that we've moved the images, we can clean up!\n                $toRemove.remove();\n\n                // tidy up by hiding subset labels where there is only 1 subset\n                // AND the subset has only 1 Tag\n                $('tr:has(.img_panel)', $this).each(function(){\n                    var $subsetLabels = $(this).find('.subsetLabel');\n                    if (($subsetLabels.length === 1)\n                            && ($subsetLabels.text().split(\", \").length === 1)) {\n                        $subsetLabels.hide();\n                    }\n                });\n\n                updateNotTagged();\n                updateRowCount();\n            });\n\n    });\n\n    // Hacks to make the Chosen plugin to wide enough.\n    $(\".chzn-container\").width('350px');\n    $(\".chzn-container input\").width('300px');\n\n    // Bonus feature - Zoom the preview thumbs with slider\n    // Make a list of styles (for quick access on zoom)\n    var img_panel_styles = [];\n    $(\".img_panel\").each(function(){\n        img_panel_styles.push(this.style);\n    });\n    var setImgSize = function(size) {\n        console.log(size);\n        var i, l = img_panel_styles.length;\n        for (i=0; i<l; i++) {\n            img_panel_styles[i].maxWidth = size + \"px\";\n            img_panel_styles[i].maxHeight = size + \"px\";\n        }\n    };\n    $(\"#img_size_slider\").slider({\n        max: 96,\n        min: 20,\n        value: 50,\n        slide: function(event, ui) {\n            setImgSize(ui.value);\n        }\n    });\n\n});\n", "<% _.each(anns, function(ann) { %>\n<div class=\"ann_comment_wrapper\" data-added-by=\"<% print(_.escape(ann.addedBy.join(','))) %>\">\n\n    <div class=\"avatar\">\n        <img src=\"<%= webindex %>avatar/<%- ann.owner.id %>/\"\n        alt=\"<%- ann.owner.firstName %> <%- ann.owner.lastName %>\"\n        title=\"<%- ann.owner.firstName %> <%- ann.owner.lastName %>\" />\n    </div>\n\n    <div class=\"ann_comment_text tooltip\">\n        <div class=\"ann_comment_header\">\n            <strong>\n                <%- ann.owner.firstName %> <%- ann.owner.lastName %>\n            </strong>\n            at\n            <% print(OME.formatDate(ann.link.date)) %>\n        </div>\n\n        <% if (ann.permissions.canDelete) { %>\n            <img class='removeComment' id=\"<%- ann.id %>-comment\"\n                src=\"<%= static %>image/icon_basic_delete.png\"\n                url='<%= webindex %>action/remove/comment/<%- ann.id %>/'\n                title=\"Delete comment\"/>\n        <% } %>\n\n        <div class='commentText'><%- ann.textValue %></div>\n    </div>\n\n    <% if (ann.ns || ann.description) { %>\n    <span class=\"tooltip_html\" style='display:none'>\n        <b>ID:</b> <%- ann.id %><br />\n        <% if (ann.ns) { %><b>Namespace:</b> <%- ann.ns %><br /><% } %>\n        <% if (ann.description) { %><b>Description:</b> <%- ann.description %><br /><% } %>\n    </span>\n    <% } %>\n\n</div>\n<% }) %>\n", "\n<% _.each(anns, function(ann) { %>\n\n<tr data-added-by=\"<% print(_.escape(ann.addedBy.join(','))) %>\">\n    <th><%- ann.type %></th>\n    <td>\n        <div class=\"tooltip\">\n        <% if (ann.type === 'Xml') { %>\n            <div><% print(_.escape((ann.value + \"\").slice(0, 20))) %>...</div>\n            <div class=\"show_xml\">Open in new window</div>\n            <div style=\"display: none\"><%- ann.value %></div>\n        <% } else { %>\n            <div><%- ann.value %></div>\n        <% } %>\n        </div>\n\n        <span class=\"tooltip_html\" style='display:none'>\n            <b>ID:</b> <%- ann.id %><br />\n            <% if (ann.ns) { %><b>Namespace:</b> <%- ann.ns %><br /><% } %>\n            <% if (ann.description) { %><b>Description:</b> <%- ann.description %><br /><% } %>\n            <b>Owner:</b> <%- ann.owner.firstName %> <%- ann.owner.lastName %><br />\n            <b>Date:</b> <% print(OME.formatDate(ann.date)) %>\n\n            <% if (ann.parent) { %>\n            <br />\n            <b>Linked to:</b> <%- ann.parent.class %> <%- ann.parent.id %>\n            <% } %>\n        </span>\n    </td>\n</tr>\n<% }) %>\n", "\n<% _.each(anns, function(ann) { %>\n<li class=\"file_ann_wrapper\"\n    id=\"file_ann-<%- ann.id %>\"\n    data-added-by=\"<% print(_.escape(ann.addedBy.join(','))) %>\">\n\n    <a class='tooltip'\n        href=\"<% if (ann.permissions.canDownload) { print(webindex + 'annotation/' + ann.id)} else {print('#') } %>\">\n        <%- ann.file.name %>\n        <% if (ann.file.size) { %>\n            <span>(<%- ann.file.size %>)</span>\n        <% } %>\n    </a>\n\n    <span class=\"tooltip_html\" style='display:none'>\n        <!-- show different tooltip for batch_annotate panel -->\n        <% if (ann.links) { %>\n            Can remove File from <b><%- ann.canRemoveCount %>\n            object<% if(ann.canRemoveCount !== 1) {print('s')} %></b>:<br/>\n            <% _.each(ann.links, function(link, idx) { %>\n                <div>\n                    <% if (idx < 20) { %>\n                        <b><%- link.parent.class %> <%- link.parent.id %></b>\n                        <% print(_.escape(link.parent.name).slice(0, 28)) %>\n                        <% if (link.owner.id !== userId){\n                            print(\"(\" + link.owner.firstName.slice(0, 1) + \" \" + _.escape(link.owner.lastName) + \")\")\n                        } %>\n                    <% } else if (idx === 20) { %>\n                        and <b><% print(ann.links.length - 20) %></b> other objects...\n                    <% } %>\n                </div>\n            <% }) %>\n        <% } else { %>\n            <b>Annotation ID:</b> <%- ann.id %><br />\n            <b>Owner:</b> <%- ann.owner.firstName %> <%- ann.owner.lastName %><br />\n            <b>Linked by:</b> <%- ann.link.owner.firstName %> <%- ann.link.owner.lastName %><br />\n            <b>On:</b> <% print(OME.formatDate(ann.link.date)) %> <br />\n            <b>Description:</b> <%- ann.description %>\n            <% if (ann.ns){ %>\n                <br/><b>Namespace:</b> <%- ann.ns %>\n            <% } %>\n            <% if (ann.file.mimetype){ %>\n                <br/><b>Mimetype:</b> <%- ann.file.mimetype %>\n            <% } %>\n            <br/><b>File ID:</b> <%- ann.file.id %>\n        <% } %>\n    </span>\n\n    <div class=\"attachment_actions\">\n        <input type=\"checkbox\" style=\"display:none;\"/>\n        <% if ((ann.ns && ann.ns === 'openmicroscopy.org/omero/bulk_annotations') || ann.file.mimetype == 'OMERO.tables' ){ %>\n            <a class='action btn_view' title=\"View OMERO.table\" target=\"_blank\"\n            href='<%= webindex %>omero_table/<%- ann.file.id %>/'>&nbsp;</a>\n        <% } %>\n        <% if (ann.link.permissions.canDelete) { %> <!-- and not ann.isOriginalMetadata -->\n            <a class='removeFile action' id=\"<%- ann.id %>-file\" title=\"Remove File\"\n            href='<%= webindex %>action/remove/file/<%- ann.id %>/'>&#8211</a>\n        <% } %>\n\n        <% if (ann.permissions.canDelete) { %> <!-- and not ann.isOriginalMetadata -->\n            <a id=\"<%- ann.id %>-file\" type=\"image\" class=\"deleteFile action\" title=\"Delete File\"\n                href=\"<%= webindex %>action/delete/file/<%- ann.id %>/\"> &#215 </a>\n        <% } %>\n\n    </div>\n</li>\n\n<% }) %>\n", "<% _.each(anns, function(ann) { %>\n\n<table <% if (ann.id && ann.addedBy) { %>\n            data-annId=\"<%- ann.id %>\"\n            data-added-by=\"<% print(_.escape(ann.addedBy.join(','))) %>\"\n        <% } else { %>\n            data-added-by=\"<%= WEBCLIENT.USER.id %>\"\n        <% } %>\n        class=\"keyValueTable\n            <% if (!ann.id || (ann.permissions.canEdit && clientMapAnn)){ %> editableKeyValueTable <% } %>\n            \">\n    <thead>\n      <% if (showNs && ann.ns) { %>\n      <tr title=\"<%- ann.ns %>\">\n          <th colspan=\"2\">\n              <%- ann.ns.slice(0, 50) %>\n          </th>\n      </tr>\n      <% } %>\n      <tr class=\"tooltip\">\n          <th colspan=\"2\">\n            <% if (ann.id) { %>\n                Added by: <%- ann.owner.firstName %> <%- ann.owner.lastName %>\n                <% if (showParent && ann.link.parent.name){ %>\n                  <br>\n                  <% if (ann.parentNames) { %>\n                    <%- ann.parentNames.length %> Annotations linked to:\n                  <% } else { %>\n                    To:\n                  <% } %>\n                  <%- ann.parentNames ? (ann.parentNames.length + \" objects\") : ann.link.parent.name %>\n                <% } %>\n\n                <span class=\"tooltip_html\" style='display:none'>\n                    <% if (ann.parentNames) { %>\n                      You are\n                      <% print (ann.permissions.canEdit && clientMapAnn ? 'editing' : 'viewing') %>\n                      <b><%- ann.parentNames.length %></b> identical Key-Value annotations:\n                    <% } %>\n                    <% if (!ann.parentNames && ann.link) { %>\n                        <!-- If single object show e.g. Image ID: (slice ImageI -> Image) -->\n                        <b><%- ann.link.parent.class.slice(0, ann.link.parent.class.length-1) %>\n                            ID:</b> <%- ann.link.parent.id %><br />\n                    <% } %>\n                    <b>Annotation ID<% if (ann.parentNames) { %>s<% } %>:</b> <%= ann.id %><br />\n                    <% if (ann.parentNames) { %>\n                        <b>Linked to:</b><br>\n                        <% _.each(ann.parentNames, function(pName) { %>\n                            &nbsp <%- pName %><br />\n                        <% }) %>\n                    <% } %>\n                    <% if (ann.owner) { %>\n                        <b>Owner:</b> <%- ann.owner.firstName %> <%- ann.owner.lastName %>\n                    <% } %>\n                    <% if (ann.link) { %>\n                        <br /><b>Linked by:</b> <%- ann.link.owner.firstName %> <%- ann.link.owner.lastName %>\n                        <% if (ann.link.date) { %>\n                            <br /><b>On:</b> <% print(OME.formatDate(ann.link.date)) %>\n                        <% } %>\n                    <% } %>\n                </span>\n            <% } else if (objCount && objCount > 1) { %>\n                Add annotations to <%- objCount %> objects\n                <span class=\"tooltip_html\" style='display:none'>\n                    Identical Key-Value annotations will be added to each selected object.\n                </span>\n            <% } %>\n          </th>\n    </tr>\n    <% if (showTableHead) { %>\n    <tr>\n        <th>Key</th>\n        <th>Value</th>\n    </tr>\n    <% } %>\n\n    </thead>\n\n    <!-- Last row always has empty key & value fields -->\n    <% if (ann.id) { %>\n      <% _.each(ann.values, function(row) { %>\n        <tr>\n            <td><%- row['0'] %></td>\n            <td><%- row['1'] %></td>\n        </tr>\n      <% }) %>\n    <% } else { %>\n      <tr class=\"placeholder\">\n          <td>Add Key</td>\n          <td>Add Value</td>\n      </tr>\n    <% } %>\n</table>\n\n<% }) %>\n", "<html>\n{% load i18n %}\n{% load common_filters %}\n{% load common_tags %}\n{% comment %}\n<!--\n  Copyright (C) 2011-2016 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n    <script type=\"text/javascript\">\n        \n        $(document).ready(function()\n            {\n                // This is called once the html for \"General\" tab of right panel has loaded...\n\n                // Delegate to sub-views to handle content of each collapsible panel\n\n                var selectedObjs = [\"{{ manager.obj_type }}-{{ manager.obj_id }}\"];\n                var annPaneData = {\n                    'selected': selectedObjs,\n                    // canAnnotate used by map annotations and ratings panes\n                    'canAnnotate': {% if manager.canAnnotate %}true{% else %}false{% endif %}\n                }\n\n                var tagPane = new TagPane($(\"#tagsPane\"), annPaneData);\n                var fileannsPane = new FileAnnsPane($(\"#fileannsPane\"), annPaneData);\n                var commentsPane = new CommentsPane($(\"#commentsPane\"), annPaneData);\n                var mapAnnsPane = new MapAnnsPane($(\"#mapAnnsPane\"), annPaneData);\n                var ratingsPane = new RatingsPane($(\"#ratingsPane\"), annPaneData);\n                var customAnnsPane = new CustomAnnsPane($(\"#customAnnotationsPane\"), annPaneData);\n\n                \n                // Most panes are expanded and collapsed in the Pane classes above.\n                // Manually add that behaviour for Details\n                $('.can-collapse[data-name=\"details\"]').on('click', function(){\n                    var $this = $(this),\n                        expanded = $this.hasClass('closed');\n                    $this.toggleClass('closed')\n                        .next().slideToggle();\n                    OME.setPaneExpanded('details', expanded);\n                });\n                if (!OME.getPaneExpanded('details')){\n                    $('.can-collapse[data-name=\"details\"]').addClass('closed')\n                        .next().hide();\n                }\n\n\n                {% if manager.canEdit %}\n                $( \"#{{ manager.obj_type }}name-{{ manager.obj_id }} button\" )      // E.g. imagename-123 button\n                    .editable('{% url 'manage_action_containers' \"editname\" manager.obj_type manager.obj_id %}',\n                        '{% url 'manage_action_containers' \"savename\" manager.obj_type manager.obj_id %}',\n                        \"{{ manager.obj_type }}name-{{ manager.obj_id }}\" );\n                $( \"#{{ manager.obj_type }}description-{{ manager.obj_id }} button\" )\n                    .editable('{% url 'manage_action_containers' \"editdescription\" manager.obj_type manager.obj_id %}',\n                        '{% url 'manage_action_containers' \"savedescription\" manager.obj_type manager.obj_id %}',\n                        \"{{ manager.obj_type }}description-{{ manager.obj_id }}\", { post_save: linkify });\n                OME.linkify_element($( \"#{{ manager.obj_type }}description-{{ manager.obj_id }} > p > span\" ));\n                {% else %}\n                OME.linkify_element($( \"#image_desc\" ));\n                {% endif %}\n\n                var acquisition_load = false;\n                var preview_load = false;\n                var hierarchy_load = false;\n\n\n                $(\".tooltip\").parent().children(\"span\").hide(); // hide tool tip source\n                $(\".tooltip\").tooltip_init();\n                \n                {% if manager.image %}\n                // handle loading of image hierarchy by ajax\n                $(\"#hierarchy-link\").on('click', function(e){\n                    var hierarchy_url = $(this).attr('href');\n                    $(\"#hierarchy-spinner\").show();  // waiting...\n                    $(\"#hierarchy-pane\").load(hierarchy_url);\n                    e.preventDefault();\n                    return false;\n                })\n                {% endif %}\n\n                // show a link to the current object\n                $(\"#show_link_btn\").on('click', function(){\n                    $(\"#link_info_popup\").show();\n                    var lnk = location.protocol + \"//\" + location.host + \"{{ webclient_path }}\";\n                    var obj_type = \"{{manager.obj_type}}\";\n                    if (obj_type === \"acquisition\") {\n                        obj_type = \"run\";\n                    }\n                    lnk += \"?show=\" + obj_type + \"-{{ manager.obj_id }}\";\n                    var link_input = $(\"#link_info_popup input\");\n                    link_input.val(lnk);\n                    link_input.get(0).focus();\n                    link_input.get(0).select();\n                });\n                $(\"#link_info_popup img\").on('click', function(){\n                    $(\"#link_info_popup\").hide();\n                });\n\n                // show original file path links for images\n                var original_file_paths_url,\n                    importTransfer;\n                {% if manager.image %}\n                original_file_paths_url = \"{% url 'original_file_paths' manager.image.id %}\";\n                importTransfer = \"{{ manager.image.getInplaceImportCmd }}\";\n                {% elif manager.well.getWellSample.image %}\n                original_file_paths_url = \"{% url 'original_file_paths' manager.well.getWellSample.image.id %}\";\n                importTransfer = \"{{ manager.well.getWellSample.image.getInplaceImportCmd }}\";\n                {% endif %}\n\n                var $toolbar_info_panel = $(\"#toolbar_info_panel\"),\n                        // $panel_textarea = $(\"#toolbar_info_panel textarea\"),\n                        $panel_title = $(\"#toolbar_info_panel .panel_title\"),\n                        $panel_div = $(\"#toolbar_info_panel .panel_div\");\n\n\n                $( \"#toolbar_info_panel\" ).on( \"click\", \".show_more\", function() {\n                    $(this).hide().next().show();\n                    return false;\n                });\n\n                $(\"#show_fs_files_btn\").on('click', function(){\n\n                    // If we're already showing Image file info, toggle hide\n                    if ($toolbar_info_panel.is(\":visible\") && \n                            $panel_title.text().split(\"Image file\").length > 1) {\n                        $toolbar_info_panel.hide();\n                        return;\n                    }\n                    $(\"#toolbar_info_panel\").show();\n                    $panel_title.html(\"Loading...\");\n                    $panel_div.empty();\n                    if (original_file_paths_url) {\n                        $.getJSON(original_file_paths_url,\n                            function(data) {\n                                var repo = data.repo,\n                                    client = data.client,\n                                    html = \"\";\n                                $panel_title.html(repo.length + \" Image file\" + (repo.length>1 ? \"s:\" : \":\"));\n\n                                if (importTransfer) {\n                                    html += \"<p>Imported with <strong>--transfer=\"+ importTransfer;\n                                    html += \"</strong></p><hr/>\";\n                                }\n\n                                html += \"<p>Imported from:</p>\";\n                                html += \"<p class='pathlist'>\" + client.slice(0,2).join(\"<br>\") + \"<br>\";\n                                if (client.length > 2) {\n                                    html += \"<a class='show_more' href='#'> Show more...</a>\";\n                                    html += \"<span style='display:none'>\" + client.slice(2).join(\"<br>\");\n                                    html += \"</span>\";\n                                }\n                                html += \"</p><hr/>\";\n\n                                html += \"<p>Paths on server:</p>\";\n                                html += \"<p class='pathlist'>\" + repo.slice(0,2).join(\"<br>\") + \"<br>\";\n                                if (repo.length > 2) {\n                                    html += \"<a class='show_more' href='#'> Show more...</a>\";\n                                    html += \"<span style='display:none'>\" + repo.slice(2).join(\"<br>\");\n                                    html += \"</span>\";\n                                }\n                                html += \"</p>\";\n                                $panel_div.append(html);\n                            });\n                    }\n                });\n\n                var hierarchy_url;\n                {% if manager.image %}\n                hierarchy_url = \"{% url 'load_metadata_hierarchy' 'image' manager.image.id %}\";\n                {% elif manager.well %}\n                hierarchy_url = \"{% url 'load_metadata_hierarchy' 'well' manager.well.id %}\";\n                {% endif %}\n                \n                // show Image hierarchy Project/Dataset tree.\n                $(\"#show_image_hierarchy\").on('click', function(){\n\n                    // If we're already showing Image file info, toggle hide\n                    if ($toolbar_info_panel.is(\":visible\") && \n                            $panel_title.text().split(\"contained\").length > 1) {\n                        $toolbar_info_panel.hide();\n                        return;\n                    }\n                    $(\"#toolbar_info_panel\").show();\n\n                    $panel_title.html(\"Loading...\");\n                    $panel_div.empty();\n                    if (hierarchy_url) {\n                        $panel_div.load(hierarchy_url);\n                        $panel_div.load(hierarchy_url,\n                            function(data) {\n                                $panel_title.html(\"Image contained in:\");\n                            });\n                    }\n                });\n\n\n                $(\"#toolbar_info_panel img\").on('click', function(){\n                    $(\"#toolbar_info_panel\").hide();\n                });\n\n                // Handle Download actions\n                $(\"#create-ometiff\").on('click', function(e){\n                    \n                    var url = $(this).attr('href');\n                    $(\"#download_dropdown ul\").css('visibility', 'hidden');// hide dropdown menu\n                    var dialog_opts = ['Cancel', 'Create'];\n                    $.ajax({\n                        url: \"{% url 'ome_tiff_info' manager.obj_id %}\",\n                        dataType: 'json',\n                        success: function(data) {\n                            var msg = \"This will create an OME-TIFF file from this Image.\";\n                            if (data.id && data.ago) {\n                                msg += \"<br>Or you can Download one that was created \"+ data.ago +\" ago.\";\n                                var download_ometiff = data.download;\n                                dialog_opts[1] = \"Create New\";\n                                dialog_opts.push(\"Download\");\n                            } else {\n                                msg += \"<br>This will be attached to the Image and available to download.\";\n                            }\n\n                            var confirm_ometiff = OME.confirm_dialog(msg,\n                                function() {\n                                    var btn = confirm_ometiff.data(\"clicked_button\");\n                                    switch (btn) {\n                                        case \"Create\":   // two options for the same button\n                                        case \"Create New\":\n                                            $.post( url, function() {\n                                                OME.showActivities();\n                                            });\n                                            break;\n                                        case \"Download\":\n                                            window.location.href = download_ometiff;\n                                            break;\n                                    }\n                                },\n                                \"Create OME-TIFF?\",\n                                dialog_opts,\n                                null, 200\n                            );\n                        }\n                    });\n                    \n                    e.preventDefault();\n                    return false;\n                });\n\n                // Filtering annotations added by 'me' or 'others' or 'all'\n                $(\"#annotationFilter\").on('change', function(){\n                    OME.filterAnnotationsAddedBy();\n                });\n\n                // Channel name editing\n            {% if manager.image %}\n\n                var $chNameForm = $(\"#channel_names_edit\");\n                // set up form with Parent\n                {% if manager.well %}\n                // TODO - Need to know if image is in Plate!\n                // If we're looking at a well we know parent is plate\n                  var pid = \"plate-{{ manager.well.plate.id.val }}\";\n                {% else %}\n                  // For images in Datasets, we get parent from jsTree, using selected image\n                  // E.g. dataset-123\n                  var pid = OME.getParentId();\n                {% endif %}\n                if (typeof pid === \"undefined\") {\n                    $chNameForm.find(\"button[name=apply]\").hide();  // hide 'apply to all'\n                } else {\n                    var parentType = pid.split(\"-\")[0];\n                    $chNameForm.find(\".ptype\").text( parentType );\n                    $chNameForm.find(\"input[name=parentId]\").val(pid).attr('value', pid);\n                    if (parentType === \"plate\") {\n                        // Plate: only allow 'Apply to All' (all images linked to same Channels)\n                        $chNameForm.find(\"button[name=save]\").remove();\n                    }\n                }\n                var resetChForm = function() {\n                    $chNameForm.find(\".originalButtons\").show();\n                    $chNameForm.find(\".confirmButtons\").hide();\n                    $(\"#channel_names_display\").show();\n                    $(\"#editChannelNames\").show();\n                    $chNameForm.hide();\n                }\n                // Workflow starts by displaying the form\n                $(\"#editChannelNames\").on('click', function(){\n                    $(\"#channel_names_display\").hide();\n                    $(\"#editChannelNames\").hide();\n                    $chNameForm.show();\n                });\n                // Handling of all form buttons. NB: save & apply_confirm buttons submit\n                $chNameForm.find(\"button\").on('click', function(event){\n                    var name = $(this).attr('name');\n                    if (name === \"apply\") {\n                        // Ask users to confirm:\n                        $chNameForm.find(\".originalButtons\").hide();\n                        $chNameForm.find(\".confirmButtons\").show();\n                        event.preventDefault(); // prevent form submission etc\n                        return false;\n                    } else if (name === \"cancel\") {\n                        // cancel - hide and don't submit\n                        resetChForm();\n                    }\n                });\n                // Form handled by AJAX\n                $chNameForm.ajaxForm({\n                    dataType:  'json',\n                    success: function(data) {\n                        var cnames = data.channelNames;\n                        // update the channel names, and ititial values in form\n                        $(\"#channel_names_display span\").each(function(i){\n                            if (cnames.hasOwnProperty(\"channel\"+i)) {\n                                $(this).text(cnames[\"channel\"+i]);\n                            }\n                        });\n                        $chNameForm.find(\"input\").each(function(i){\n                            if (cnames.hasOwnProperty( $(this).attr('name') )) {\n                                $(this).attr('value', cnames[\"channel\"+i]);\n                            }\n                        });\n                        resetChForm();\n                    }\n                });\n\n            {% endif %}\n\n\n                // For wells (or images that may be in a Well), we try to\n                //load Bulk table annotations attached to parent Screen / Plate\n                // loading just the row we need for the current well.\n                {% if manager.well or manager.image %}\n                    {% if manager.well %}\n                    var screenQuery = \"{% url 'webgateway_object_table_query' 'Screen.plateLinks.child.wells' manager.well.id %}\";\n                    var plateQuery = \"{% url 'webgateway_object_table_query' 'Plate.wells' manager.well.id %}\";\n                    var query = \"Well-{{ manager.well.id }}\";\n                    {% elif manager.image %}\n                    var screenQuery = \"{% url 'webgateway_object_table_query' 'Screen.plateLinks.child.wells.wellSamples.image' manager.image.id %}\";\n                    var plateQuery = \"{% url 'webgateway_object_table_query' 'Plate.wells.wellSamples.image' manager.image.id %}\";\n                    var projectQuery = \"{% url 'webgateway_object_table_query' 'Project.datasetLinks.child.imageLinks.child' manager.image.id %}\";\n                    var datasetQuery = \"{% url 'webgateway_object_table_query' 'Dataset.imageLinks.child' manager.image.id %}\";\n                    var query = \"Image-{{ manager.image.id }}\";\n                    {% endif %}\n\n                    var showBulkAnnTooltip = function(data) {\n                        if (!data || !data.id) return;\n                        var bulkAnnTooltip = \"<span class='tooltip_html' style='display:none'>\" +\n                            \"Data from tables file:<br />\" +\n                            \"<b>File ID:</b> \" + data.id + \"<br />\" +\n                            \"<b>Owner:</b> \" + data.owner.escapeHTML() + \" <br />\" +\n                            \"<b>Annotation ID:</b> \" + data.annId + \"<br />\" +\n                            \"<b>Linked to:</b> \" + data.parentType + \" \" + data.parentId + \"<br />\" +\n                            \"<b>Linked by:</b> \" + data.addedBy.escapeHTML() + \" <br />\" +\n                            \"<b>On:</b> \" + OME.formatDate(data.addedOn) + \"</span>\";\n                        $(\"#bulk-annotations\").append(bulkAnnTooltip);\n                        $(\"#bulk-annotations\").parent().tooltip({\n                                items: '.bulk_annotation',\n                                content: function() {\n                                    return $(\"span.tooltip_html\", this).html();\n                                },\n                                track: true,\n                                show: false,\n                                hide: false\n                            });\n                    }\n\n                    // If user opens tables tab, also load tables\n                    $('.can-collapse.closed[data-name=\"tables\"]').on('click', function(){\n                        var $header = $(this),\n                            $body = $header.next();\n\n                        $header.toggleClass('closed');\n                        $body.slideToggle();\n\n                        var expanded = !$header.hasClass('closed');\n                        OME.setPaneExpanded('tables', expanded);\n\n                        if (expanded && $(\"#bulk_annotations_table\").is(\":empty\")) {\n                            loadBulkAnnotations(screenQuery, query, showBulkAnnTooltip);\n                            loadBulkAnnotations(plateQuery, query, showBulkAnnTooltip);\n                            {% if manager.image %}\n                                loadBulkAnnotations(projectQuery, query, showBulkAnnTooltip);\n                                loadBulkAnnotations(datasetQuery, query, showBulkAnnTooltip);\n                            {% endif %}\n                        }\n                    });\n\n                    // Load tables if tables tab is open\n                    if (OME.getPaneExpanded(\"tables\")) {\n                        $('.can-collapse.closed[data-name=\"tables\"]')\n                            .toggleClass('closed')\n                            .next().slideToggle();\n                        if ($(\"#bulk_annotations_table\").is(\":empty\")) {\n                            loadBulkAnnotations(screenQuery, query, showBulkAnnTooltip);\n                            loadBulkAnnotations(plateQuery, query, showBulkAnnTooltip);\n                            {% if manager.image %}\n                                loadBulkAnnotations(projectQuery, query, function(data) {\n                                    if (data && data.id) {\n                                        showBulkAnnTooltip(data);\n                                    }\n                                });\n                                loadBulkAnnotations(datasetQuery, query, function(data) {\n                                    if (data && data.id) {\n                                        showBulkAnnTooltip(data);\n                                    }\n                                });\n                            {% endif %}\n                        }\n                    }\n\n                {% endif %}\n\n\n                $('[data-isodate]').each(function() {\n                    $(this).text(OME.formatDate($(this).data('isodate')));\n                });\n\n            });\n            \n    </script>\n\n\n        <!-- This is used by AJAX loading the right panel, to check it matches current selection -->\n        <div id='object-id' style=\"display:none\">{{manager.obj_type}}-{{ manager.obj_id }}</div>\n\n\n        {% if not manager.tag %}\n        \n        \n        <!-- ANNOTATIONS \"General\" -->\n        <div id=\"general_tab\" class=\"right_tab_inner\" >\n           \n        {% if manager.image %}\n\n            {% with image=manager.image canDownload=manager.image.canDownload %}\n                {% include \"webclient/annotations/includes/toolbar.html\" %}\n            {% endwith %}\n\n            <!-- Image Name, ID, owner -->\n            {% with obj=manager.image nameText=manager.image.name %}\n                {% include \"webclient/annotations/includes/name.html\" %}\n            {% endwith %}\n                  \n            <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                Image Details\n            </h1>\n            <div> \n                  \n            <!-- Image Description -->      \n            {% with obj=manager.image %}\n                {% include \"webclient/annotations/includes/description.html\" %}\n            {% endwith %}\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            <!-- Include table of core metadata, Owner, SizeX,Y,Z, Channels etc -->\n            {% with image=manager.image %}\n                {% include \"webclient/annotations/includes/core_metadata.html\" %}\n            {% endwith %}\n\n            </div>\n\n\n        {% else %}\n            {% if manager.dataset %}\n\n                {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n                <!-- Dataset Name, ID, Owner -->\n                {% with obj=manager.dataset nameText=manager.dataset.name %}\n                    {% include \"webclient/annotations/includes/name.html\" %}\n                {% endwith %}\n\n                \n                <!-- Dataset Description -->\n                <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                    Dataset Details\n                </h1>\n                <div> \n                {% with obj=manager.dataset %}\n                    {% include \"webclient/annotations/includes/description.html\" %}\n                {% endwith %}\n                \n                <table>\n                    <tr>\n                        <th>Creation Date:</th>\n                        <td id='creation_date' data-isodate='{{ manager.dataset.getDate|date:\"r\" }}'></td>\n                    </tr>\n                </table>\n                </div>\n            {% else %}\n                {% if manager.project %}\n\n                    {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n                    <!-- Project Name, ID, Owner -->\n                    {% with obj=manager.project nameText=manager.project.name %}\n                        {% include \"webclient/annotations/includes/name.html\" %}\n                    {% endwith %}\n\n                    \n                    <!--Project Description -->\n                    <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                        Project Details\n                    </h1>\n                    <div>\n                    {% with obj=manager.project %}\n                        {% include \"webclient/annotations/includes/description.html\" %}\n                    {% endwith %}\n                    \n                    <table>\n                        <tr>\n                            <th>Creation Date:</th>\n                            <td id='creation_date' data-isodate='{{ manager.project.getDate|date:\"r\" }}'></td>\n                        </tr>\n                    </table>\n                    </div>\n                {% endif %}\n            {% endif %}\n        {% endif %}\n            \n        {% if manager.well %}\n            {% with image=manager.getWellSampleImage %}\n                {% include \"webclient/annotations/includes/toolbar.html\" %}\n            {% endwith %}\n\n            <!-- Well Label (not editable), ID, Owner -->\n            {% with obj=manager.well nameText=manager.well.getWellPos %}\n                {% include \"webclient/annotations/includes/name.html\" %}\n            {% endwith %}\n\n        {% else %}\n            {% if manager.acquisition %}\n\n                {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n                <!-- Acquisition Name -->\n                {% with obj=manager.acquisition nameText=manager.acquisition.name %}\n                    {% include \"webclient/annotations/includes/name.html\" %}\n                {% endwith %}\n\n                \n                <!-- Acquisition Description -->\n                <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                    Run Details\n                </h1>\n                <div>\n                {% with obj=manager.acquisition %}\n                    {% include \"webclient/annotations/includes/description.html\" %}\n                {% endwith %}\n                \n                <table>\n                    <tr>\n                        <th>Creation Date:</th>\n                        <td id='creation_date' data-isodate='{{ manager.acquisition.getDate|date:\"r\" }}'></td>\n                    </tr>\n                    <tr>\n                        <th>Start Time:</th>\n                        <td data-isodate='{{ manager.acquisition.getStartTime|date:\"r\" }}'></td>\n                    </tr>\n                    <tr>\n                        <th>End Time:</th>\n                        <td data-isodate='{{ manager.acquisition.getEndTime|date:\"r\" }}'></td>\n                    </tr>\n                </table>\n                </div>\n\n            {% else %}\n                {% if manager.plate %}\n\n                    {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n                    <!-- Plate Name, ID, Owner -->\n                    {% with obj=manager.plate nameText=manager.plate.name %}\n                        {% include \"webclient/annotations/includes/name.html\" %}\n                    {% endwith %}\n                    \n                    \n                    <!-- Plate Description -->\n                    <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                        Plate Details\n                    </h1>\n                    <div>\n                    {% with obj=manager.plate %}\n                        {% include \"webclient/annotations/includes/description.html\" %}\n                    {% endwith %}\n\n\n                    <table>\n                        <tr>\n                            <th>Creation Date:</th>\n                            <td id='creation_date' data-isodate='{{ manager.plate.getDate|date:\"r\" }}'></td>\n                        </tr>\n                        <!--{% comment %}\n                        <tr>\n                            <th>Well Count:</th>\n                            <td id='child_count'>{{ manager.plate.countChildren }} {% plural manager.plate.countChildren 'well' 'Wells' %}</td>\n                        </tr>\n                        {% endcomment %}-->\n                    </table>\n                    </div>\n                {% else %}\n                    {% if manager.screen %}\n\n                        {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n                        <!-- Screen Name, ID, Owner -->\n                        {% with obj=manager.screen nameText=manager.screen.name %}\n                            {% include \"webclient/annotations/includes/name.html\" %}\n                        {% endwith %}\n                            \n                            \n\n                        <!-- Screen Description -->\n                        <h1 class=\"can-collapse defclose\" data-name=\"details\">\n                            Screen Details\n                        </h1>\n                        <div>\n                        {% with obj=manager.screen %}\n                            {% include \"webclient/annotations/includes/description.html\" %}\n                        {% endwith %}\n\n                        <table>\n                            <tr>\n                                <th>Creation Date:</th>\n                                <td id='creation_date' data-isodate='{{ manager.screen.getDate|date:\"r\" }}'></td>\n                            </tr>\n                            <tr>\n                                <th>Plate Count:</th>\n                                <td id='child_count'>{{ manager.screen.countChildren }} {% plural manager.screen.countChildren 'plate' 'plates' %}</td>\n                            </tr>\n                        </table>\n                        </div>\n                    {% endif %}\n                {% endif %}\n            {% endif %}\n        {% endif %}\n            \n            \n            \n            \n        \n        \n    <!-- ANNOTATIONS -->\n\n        <!-- templates are loaded based on config -->\n        {% for t in ome.metadata_panes|dictsort:\"index\" %}\n            {% with \"webclient/annotations/includes/metadata_general_\"|add:t.name|add:\".html\" as metadata_templates_path %}\n            {% with label=t.label %}\n            {% include metadata_templates_path %}\n            {% endwith %}\n            {% endwith %}\n        {% endfor %}\n\n        </div>\n        {% endif %}\n\n\n        {% if manager.tag %}\n\n        <div id=\"general_tab\" class=\"right_tab_inner\" >\n\n            <!-- Toolbar at the top -->\n            {% include \"webclient/annotations/includes/toolbar.html\" %}\n\n\n                <!-- Tag TextValue, ID, Owner -->\n                {% with obj=manager.tag nameText=manager.tag.getValue %}\n                    {% include \"webclient/annotations/includes/name.html\" %}\n                {% endwith %}\n\n                <hr/>\n\n                <!-- Tag Description -->\n                {% with obj=manager.tag %}\n                    {% include \"webclient/annotations/includes/description.html\" %}\n                {% endwith %}\n        \n                <table>\n                    {% if manager.tag.getNs %}\n                    {% ifnotequal manager.tag.getNs insight_ns %}\n                    <tr>\n                        <th>Name space:</th>\n                        <td id='namespace'>{{ manager.tag.getNs }}</td>\n                    </tr>\n                    {% endifnotequal %}\n                    {% endif %}\n                    <tr>\n                        <th>Owner:</th>\n                        <td id='owner_fullname'>{{ manager.tag.getOwner.getFullName }}</td>\n                    </tr>\n                    <tr>\n                        <th>Creation Date:</th>\n                        <td id='creation_date' data-isodate='{{ manager.tag.getDate|date:\"r\" }}'></td>\n                    </tr>\n                    <tr>\n                        <th>Image Count:</th>\n                        {% if False %}\n                        <td id='child_count'>{{ manager.tag.countChildren }} {% plural manager.tag.countChildren 'tag' 'tags' %}</td>\n                        {% endif %}\n                    </tr>\n                </table>\n        </div>\n        {% endif %}\n</html>\n", "\n<% _.each(tags, function(tag) { %>\n<span class=\"tag_annotation_wrapper\"\n    data-tag-id=\"<%- tag.id %>\"\n    data-added-by=\"<% print(_.escape(tag.addedBy.join(','))) %>\">\n\n    <div class=\"tag\">\n        <a class='tooltip tag_inner' href=\"?show=tag-<%- tag.id %>\" target=\"_top\">\n            <%- tag.textValue %>\n        </a>\n\n        <% if (tag.canRemove) { %>\n        <span class='removeTag' title=\"Remove Tag\" id=\"<%- tag.id %>-tag\"\n                url='<%= webindex %>action/remove/tag/<%- tag.id %>/'>\n                -\n        </span>\n        <% } %>\n\n        <span class=\"tooltip_html\" style='display:none'>\n        <!-- show different tooltip for batch_annotate panel -->\n        <% if (tag.links) { %>\n            Can remove Tag from <b><%- tag.canRemoveCount %> object<% if(tag.canRemoveCount !== 1) {print('s')} %></b>:<br/>\n            <% _.each(tag.links, function(link, idx) { %>\n                <div>\n                    <% if (idx < 20) { %>\n                        <b><%- link.parent.class %> <%- link.parent.id %></b>\n                        <%- link.parent.name.slice(0, 28) %>\n                        <% if (link.owner.id !== userId) {\n                            print(\"(\" + link.owner.firstName.slice(0, 1) + \" \" + _.escape(link.owner.lastName) + \")\")\n                        } %>\n                    <% } else if (idx === 20) { %>\n                        and <b><% print(tag.links.length - 20) %></b> other objects...\n                    <% } %>\n                </div>\n            <% }) %>\n        <% } else { %>\n            <b>ID:</b> <%- tag.id %><br />\n            <b>Owner:</b> <%- tag.owner.firstName %> <%- tag.owner.lastName %><br />\n            <b>Linked by:</b> <%- tag.link.owner.firstName %> <%- tag.link.owner.lastName %><br />\n            <b>On:</b> <% print(OME.formatDate(tag.link.date)) %><br />\n            <b>Description:</b> <%- tag.description %>\n        <% } %>\n        </span>\n    </div>\n\n</span>\n\n<% }) %>\n", "\n\n<ul id=\"dataIcons\" class=\"element_sorter <%= layout %>Layout\">\n    <li class=\"thead\"> \n        <div></div> \n        <!-- 'sort-init' will perform sort on this column when element_sorter plugin inits -->\n        <div class='sort-alpha sort-init'>Name</div>\n        <div class='sort-date'>Date</div> \n        <div class='sort-numeric'>Size X</div> \n        <div class='sort-numeric'>Size Y</div> \n        <div class='sort-numeric'>Size Z</div>\n    </li>\n\n    <% _.each(images, function(img) { %>\n        <li class=\"row <% if(img.selected) {print ('ui-selected')} %>\n            <% if(img.fsSelected) {print ('fs-selected')} %> \"\n            id=\"image_icon-<%- img.id %>\"\n            data-fileset=\"<%- img.data.obj.filesetId %>\"\n            data-type=\"image\"\n            data-id=\"<%- img.id %>\"\n            data-perms=\"<%= img.data.obj.permsCss %>\"\n            tabindex=\"0\"\n            <% if(img.shareId) { %> data-share=\"<%- img.shareId %>\" <% }%>\n            data-owned=\"\">\n\n            <div class=\"image\">\n                <!-- we wrap img with <a> so you can right-click -> open link in new tab -->\n                <a href=\"<%= webindex %><% if(img.shareId) {print( img.shareId + '/')} %>img_detail/<%- img.id %>/<% if (dataset) print('?dataset=' + dataset) %>\" >\n                    <img/>\n                </a>\n            </div>\n            <!-- NB: '#image_icon-123 div.desc' etc is used to update name when changed in right panel via \"editinplace\" -->\n            <div class=\"desc\" valign=\"middle\">\n                 <%- img.name %>\n                <span class=\"hidden_sort_text\"> <%- img.name %> </span>\n            </div>\n            <div class=\"date\" valign=\"middle\"><%- img.date %></div>\n            <div class=\"sizeX\" valign=\"middle\"><%- img.data.obj.sizeX %></div>\n            <div class=\"sizeY\" valign=\"middle\"><%- img.data.obj.sizeY %></div>\n            <div class=\"sizeZ\" valign=\"middle\"><%- img.data.obj.sizeZ %></div>\n        </li>\n    <% }) %>\n</ul>\n\n<% if (paging) { %>\n<div class=\"clear\"> </div>\n<div class=\"paging\" id=\"page\" data-page=\"<%= page %>\">\n    <% if (page-1 > 0) { %>\n        <input data-page=\"<%= page-1 %>\" class=\"button_pagination\" type=\"button\" value=\"Previous\" alt=\"Previous\"/>\n    <% } %>\n\n    <% for (var p=1; p<=pageCount; p++) { %>\n        <% if (page === p) { print (p) }\n            else { %>\n                <input data-page=\"<%= p %>\" class=\"button_pagination\" type=\"button\" value=\"<%= p %>\" alt=\"<%= p %>\"/>\n            <% } %>\n    <% } %>\n\n    <% if (page < pageCount) { %>\n        <input data-page=\"<%= page+1 %>\" class=\"button_pagination\" type=\"button\" value=\"Next\" alt=\"Next\"/>\n    <% } %>\n\n</div>\n<div class=\"clear\"> </div>\n<% } %>\n", "{% load common_filters %}\n\n{% comment %}\n/**\n  Copyright (C) 2012-2016 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n{% endcomment %}\n\n<!-- Include script for filtering center panel -->\n<script src=\"{% static 'webclient/javascript/ome.center_plugin_filter.js'|add:url_suffix %}\" type=\"text/javascript\"></script>\n\n<script>\n/**\n * This script is included in the main containers.html page as well as public.html,\n * adding itself as a selection listener to the jsTree in each case.\n * It loads appropriate data into the middle panel on selection changes in the jsTree.\n * For the main containers.html page, it also responds to switching between 'plugins'\n**/\n\n$(document).ready(function() {\n\n    // Revamp of thumbnail update\n\n    /*\n\n    When should the panel update\n\n    1) The image selection has changed (update)\n    2) The container selection has changed (refresh)\n    3) Something has been deleted or moved out (remove)\n    4) Something has been added (refresh)\n\n    Problems\n\n    An image is moved to another dataset while selected.\n    This causes the view to shift to the new view\n    There will also be a remove attempt (this must do nothing)\n\n    */\n\n    var inst = $.jstree.reference('#dataTree');\n    var parentNode;     // the currently selected node\n    // We compile the underscore templates, ready for rendering\n    var tmplText = $('#icon_thumbnails_template').html();\n    var iconTmpl = _.template(tmplText);\n    var headerText = $('#icon_header_template').html();\n    var headerTmpl = _.template(headerText);\n    // Variables for layout and thumbnail zooming\n    var layout = \"icon\";\n    var icon_styles = [];\n    var li_styles = [];\n    var aspect_ratios = [];\n    var iconSize = 65;\n    var parentId;       // E.g. dataset-1\n\n    var dateFormatOptions = {\n        weekday: \"short\", year: \"numeric\", month: \"short\",\n        day: \"numeric\", hour: \"2-digit\", minute: \"2-digit\"\n    };\n\n    // Start listening for Node Loading events on the tree...\n    // If a node loads and it's selected, update_thumbs...\n    $(\"#dataTree\").on('load_node.jstree', function(event, data){\n        if (data.node.state.selected) {\n            update_thumbnails_panel(event, data);\n        }\n    });\n\n    $(\"#content_details\").on(\"click\", \"input.button_pagination\", function(){\n        var page = $(this).attr('data-page');\n        page = parseInt(page, 10);\n        inst.deselect_all(true);\n        inst.change_page(parentNode, page);\n        // and then reselect the same node again to trigger update\n        inst.select_node(parentNode);\n    });\n\n    // double-click handler on image - launches image viewer\n    $(\"#content_details\").on(\"dblclick\", \"li.row\", function(event) {\n        var $this = $(this),\n            iid = $this.attr('id').split(\"-\")[1],\n            url;\n        // Image only has share ID if user doesn't own the share.\n        if ($this.attr('data-share')) {\n            url = \"{% url 'web_image_viewer' 99 0 %}\".replace('/99/', \"/\" + $this.attr('data-share') + \"/\" );\n        } else {\n            url = \"{% url 'web_image_viewer' 0 %}\";\n        }\n        url = url.replace('/0/', \"/\" + iid + \"/\" );\n        // We try to traverse the jstree, to find parent of selected image\n        var parent = OME.getTreeImageContainerBestGuess(iid);\n        if (parent && parent.data) {\n            if (parent.type === 'dataset') {\n                url += '?' + parent.type + '=' + parent.data.id;\n            }\n        }\n        window.open(url, '_blank');\n    });\n\n    // Set up the centre panel header.\n    var setupDatasetHeader = function() {\n        var html = headerTmpl({'layout': layout, 'staticUrl': '{% static \"webclient/\" %}'});\n        $(\"#content_details\").html(html);\n\n        // single click handler on image (container). Selection then update toolbar & metadata pane\n        $( \"#icon_table\" ).on( \"click\", \"li.row\", function(event) {\n            event.preventDefault();\n            handleClickSelection(event);\n        });\n\n        $(\"#filtersearch label\").inFieldLabels();\n\n        $(\"#thumb_size_slider\").slider({\n            max: 200,\n            min: 30,\n            value: iconSize,\n            slide: function(event, ui) {\n                iconSize = ui.value;\n                setIconSize();\n            }\n        });\n        // handle Radio buttons\n        $(\"#layout_chooser button\").on('click', function(event) {\n            if ($(event.target).attr('id') == 'table_layout') {\n                layout = 'table';\n            } else {\n                layout = 'icon';\n            }\n            setLayout();\n            $(\"#layout_chooser button\").removeClass(\"checked\");\n            $(event.target).addClass(\"checked\");\n        });\n    }\n\n    // This is called directly by various jstree plugins\n    // E.g. omecut_plugin.js as well as the jstree in containers.html\n    window.update_thumbnails_panel = function(event, data) {\n\n        // Get the current selection\n        var selected = inst.get_selected(true);\n\n        if (!$(\"#content_details\").is(\":visible\") || selected.length === 0) {\n            $(\"#content_details\").html(\"\");\n            parentId = undefined;\n            clearThumbnailsPanel();\n            return;\n        }\n        var dtype = selected[0].type;\n        if (selected.length > 1 && dtype !== \"image\") {\n            $(\"#content_details\").html(\"\");\n            parentId = undefined;\n            clearThumbnailsPanel();\n            return;\n        }\n\n        // parent node could be dataset, orphaned, share or tag\n        // see WEBCLIENT.UI.TREE.pagination_nodes and ome.tree.js\n        var parentTypes = WEBCLIENT.UI.TREE.pagination_nodes,\n            imgNodes = [];\n        if (parentTypes.indexOf(dtype) < 0) {\n            parentNode = selected[0];\n        } else if (dtype === \"image\") {\n            parentNode = inst.get_node(inst.get_parent(selected[0]));\n        } else if (dtype === \"plate\" || dtype === \"acquisition\") {\n            parentId = undefined;\n            load_spw(event, data);\n            return;\n        // All other types have blank centre panel\n        } else {\n            parentId = undefined;\n            clearThumbnailsPanel();\n            return;\n        }\n\n        if (!parentNode) {\n            // need this for pagination etc\n            parentNode = inst.get_node(data.node);\n        }\n\n        var newParentId = parentNode.type + \"-\" + parentNode.data.obj.id;\n        if (parentId === newParentId\n                && event.type !== \"copy_node\"\n                && event.type !== \"create_node\"\n                && event.type !== \"load_node\"\n                && event.type !== \"delete_node\"\n                && event.type !== \"refreshThumb\"\n                && event.type !== \"refreshThumbnails\") {\n\n            highlightSelectedThumbs(selected);\n\n            return;\n        }\n        // update single thumbnail, see OME.refreshThumbnails\n        if (event.type === \"refreshThumb\") {\n            OME.load_thumbnail(\n                data.imageId,\n                \"{% url 'webindex' %}get_thumbnail/\"+data.imageId+\"/\",\n                function(thumb) {\n                    $(\"li#image_icon-\"+data.imageId+ \" img\").attr(\"src\", thumb);\n                }\n            );\n            return;\n        }\n\n        parentId = newParentId;\n\n        // clear html and stored data before adding back html\n        clearThumbnailsPanel();\n\n        imgNodes = [];\n        parentNode.children.forEach(function(ch){\n            var childNode = inst.get_node(ch);\n            // Ignore non-images under tags or 'deleted' under shares\n            if (childNode.type == \"image\") {\n                imgNodes.push(childNode);\n            }\n        });\n\n        var imgJson = [],\n            selFileSets = [],\n            shareId = null;\n        // Convert jsTree nodes into json for template\n        imgNodes.forEach(function(node){\n            var d = node.data.obj.date || node.data.obj.acqDate;\n            var date = new Date(d);\n            date = date.toLocaleTimeString(undefined, dateFormatOptions);\n            var iData = {'id': node.data.obj.id,\n                    'name': node.text,\n                    'data': JSON.parse(JSON.stringify(node.data)),\n                    'selected': node.state.selected,\n                    'date': date,\n                };\n            // Note fileset IDs for selected images\n            if (iData.selected) {\n                var fsId = node.data.obj.filesetId;\n                if (fsId) {\n                    selFileSets.push(fsId);\n                }\n            }\n            // If image is in share and share is not owned by user...\n            if (node.data.obj.shareId && !parentNode.data.obj.isOwned) {\n                // share ID will be needed to open image viewer\n                iData.shareId = node.data.obj.shareId;\n                shareId = node.data.obj.shareId;\n            }\n            imgJson.push(iData);\n        });\n\n        // Now we know which filesets are selected, we can\n        // go through all images, adding fs-selection flag if in\n        if (selFileSets.length > 0) {\n            imgJson.forEach(function(img){\n                if (selFileSets.indexOf(img.data.obj.filesetId) > -1) {\n                    img.fsSelected = true;\n                }\n            });\n        }\n\n        if ($(\"#icon_table\").length == 0) {\n            setupDatasetHeader();\n        }\n\n        var json = {'images': imgJson,\n                    'webindex': '{% url \"webindex\" %}',\n                    'layout': layout,\n                    'paging': false}\n        // Add 'dataset':id if we have it\n        json['dataset'] = parentNode.type == 'dataset' ? parentNode.data.obj.id : false;\n\n        var childCount = parentNode.data.obj.childCount;\n        if (PAGE_SIZE < childCount) {\n            json.pageCount = Math.ceil(childCount / PAGE_SIZE);\n            json.paging = true;\n            json.page = inst.get_page(parentNode);\n        }\n\n        var html = iconTmpl(json);\n        $(\"#icon_table\").html(html);\n\n        // load thumbnails in a batches\n        thumbnailsBatch = {{ thumbnails_batch|default:50|json_dumps|safe }};\n        iids = $.map(imgJson, function(img){\n            return img.id;\n        });\n        thumbUrl = \"{% url 'get_thumbnails_json' %}\";\n        if (shareId !== null) {\n          thumbUrl = \"{% url 'get_thumbnails_json' %}\" + shareId + \"/\"\n        }\n\n        // getThumbnailSet() doesn't work with share permissions, so we get\n        // single thumbnails at a time\n        if (parentNode.type === \"share\") {\n            thumbnailsBatch = 1;\n        }\n        OME.load_thumbnails(\n            thumbUrl, iids, thumbnailsBatch,\n            \"{% static 'webgateway/img/image128.png' %}\"\n        );\n\n        // populate arrays etc for speedy icon zooming\n        setupIconZooming();\n\n        // setup quicksearch filtering of images\n        setupFiltering();\n\n        // init the elementsorter plugin\n        setupSorting();\n\n        // plugin to handle drag-select of images (share is single-select only)\n        if (parentNode.type !== \"share\") {\n            setupSelectable();\n        }\n\n        // scroll to selected thumbnail (if any)\n        focusThumbnail();\n\n        return;\n    }\n\n    // Update thumbnails when we switch between plugins\n    $('#center_panel_chooser').on('center_plugin_changed.ome', update_thumbnails_panel);\n\n    // Use selected nodes from tree to indicate thumbnails\n    var highlightSelectedThumbs = function(selected) {\n        $(\"#dataIcons li.row\").removeClass(\"ui-selected\").removeClass(\"fs-selected\");\n        var selFileSets = [];\n        selected.forEach(function(node){\n            if (node.type == \"image\") {\n                $(\"#image_icon-\" + node.data.obj.id).addClass(\"ui-selected\");\n            }\n            var fsId = node.data.obj.filesetId;\n            if (fsId) {\n                selFileSets.push(fsId);\n            }\n        });\n        selFileSets.forEach(function(fsId){\n            $(\"#dataIcons li[data-fileset='\" + fsId + \"']\").addClass(\"fs-selected\");\n        });\n        focusThumbnail();\n    }\n\n    var focusThumbnail = function() {\n        // We focus the thumbnail to make sure it's scrolled into view\n        var $focused = $(':focus');\n        $(\"#dataIcons li.ui-selected\").first().trigger('focus');\n        // Then re-focus the jstree node, so that hot-keys work etc\n        $focused.trigger('focus');\n    }\n\n    var getRandom = function() {\n        return (Math.random() + \"\").slice(2);\n    }\n\n    var setupSelectable = function() {\n        $(\"#dataIcons\").selectable({\n            filter: 'li.row',\n            distance: 2,\n            stop: function() {\n                // Make the same selection in the jstree etc\n                syncTreeSelection();\n            },\n            start: function() {\n                // Remove any fileset selection markings\n                $(\"#dataIcons li.row:visible\")\n                    .removeClass(\"fs-selected\")\n                    .removeClass(\"lastSelected\");\n            }\n        });\n    }\n\n    var setupSorting = function() {\n        // simple emulation of table-sorter for other elements...\n        // performs sort when intialised on 'sort-init' column\n        $(\".element_sorter\").elementsorter({\n            head: '.thead div',             // Selector for the equivalent of 'table head'\n            body: 'li.row',                 // Selector for the equivalent of 'table rows'\n            sort_key: '.hidden_sort_text'   // optional - how to find the text within each child of a 'row'.\n        });\n    }\n\n    var setupFiltering = function() {\n        // All the image filtering functionality setup here...\n        // {'id': {'text': 'name', 'images': [1,2,3]} } for all tags used for filtering\n        var usedTags = {};\n        // {key: {'values':{'imageId': 'val1, val2'}, 'type': 'number'}\n        var usedKeyValues = {};\n        var currentFilterKey;\n        var filter_tag_ids = [];\n\n        var filterObjects = [];\n\n        function doFiltering() {\n            // get image IDs, find which are filtered and update images\n            $(\"#dataIcons li.row\").each(function(){\n                var $this = $(this);\n                var iid = $this.attr(\"data-id\");\n                // check if visible in all filters\n                var visible = true;\n                filterObjects.forEach(function(f){\n                    if (!f.isImageVisible(iid)) {\n                        visible = false;\n                    }\n                });\n                if (visible) {\n                    $this.removeClass('mapFilter_hidden');\n                } else {\n                    $this.addClass('mapFilter_hidden');\n                }\n            });\n            // finally, we de-select hidden\n            deselectFiltered();\n        }\n\n        // Chooser for revealing various filter components\n        $(\"#choosefilter\").on('change', function() {\n            var $this = $(this),\n                filterby = $this.val();\n            // reset chooser\n            $this.val(\"addfilter\");\n\n            // if we're already showing this filter, ignore\n            if ($(\"#filter\" + filterby).is( \":visible\" )) {\n                return;\n            }\n\n            // Handle 'Remove all filters'\n            if (filterby == \"removeAll\") {\n                $(\".imagefilter\").hide();\n                // clear text filter (will also undo fitering)\n                $('#id_search').val('').trigger('keyup');\n                // reset rating to 0\n                $(\"#filterrating img\").attr('src', \"{% static 'webclient/image/rating' %}0.png\");\n                // clear any filtering by rating/unrated\n                $(\"#dataIcons li.row\").removeClass('ratingFilter_hidden');\n                // reset Tag filtering\n                filter_tag_ids = [];\n                renderFilterTags();\n            }\n\n            // Unrated and By rating are mutually exclusive\n            if (filterby === \"unrated\") {\n                // reset 'by rating' filter\n                $(\"#filterrating\").hide().find(\"img\").attr('src', \"{% static 'webclient/image/rating' %}0.png\");\n                // do filtering\n                filterUnrated();\n            } else if (filterby === \"rating\") {\n                $(\"#filterunrated\").hide();\n                $(\"#dataIcons li.row\").removeClass('ratingFilter_hidden');\n            }\n\n            if (filterby === \"tag\") {\n                // Load tags for images\n                var iids = [];\n                $(\"#dataIcons li.row\").each(function(){\n                    iids.push($(this).attr(\"data-id\"));\n                });\n                // Check to ensure images are available for filtering\n                // if (iids.length === 0) {\n                //     // No images to filter\n                //     return;\n                // }\n                var query = \"image=\" + iids.join(\"&image=\");\n                $.getJSON(\"{% url 'api_annotations' %}?type=tag&\" + query, function(data){\n                    // map imageId to rating... rdata = {'iid': hide?}\n                    usedTags = data.annotations.reduce(function(prev, t){\n                        var imgId = t.link.parent.id;\n                        if (!prev[t.id]) {\n                            prev[t.id] = {'textValue': t.textValue, 'images': []};\n                        }\n                        prev[t.id].images.push(imgId);\n                        return prev;\n                    }, {});\n                    renderFilterTags();\n                });\n            }\n\n            if (filterby === \"map\") {\n                // Load map annotations for images\n                var iids = [];\n                $(\"#dataIcons li.row\").each(function(){\n                    iids.push($(this).attr(\"data-id\"));\n                });\n\n                var f = new MapAnnFilter(iids, $('#center_toolbar'), doFiltering, filterObjects);\n                filterObjects.push(f);\n                return;\n            }\n\n            // Show filter\n            if (filterby != \"addfilter\") {\n                $(\"#filter\" + filterby).show();\n            }\n        });\n        // Filters have a 'X' for clearing filter\n        $(\".filtersearch\").on('click', '.removefilter', function(){\n            var $fltr = $(this).parent();\n            var fid = $fltr.attr('id');\n            if (fid === 'filterrating') {\n                $(\"#dataIcons li.row\").removeClass('ratingFilter_hidden');\n                $(\"#filterrating img\").attr('src', \"{% static 'webclient/image/rating' %}0.png\");\n            } else if (fid === 'filterunrated') {\n                $(\"#dataIcons li.row\").removeClass('ratingFilter_hidden');\n                $fltr.hide();\n            } else if ($fltr.attr('data-tagId')) {\n                // Remove a single Tag\n                var tagId = $fltr.attr('data-tagId');\n                filter_tag_ids = filter_tag_ids.filter(function(i){return i !== tagId});\n                renderFilterTags();\n            } else if (fid == 'filtertag') {\n                // Remove ALL tags and hide tag filter\n                $fltr.hide();\n                filter_tag_ids = [];\n                renderFilterTags();\n            }\n        });\n\n        // Handle filtering by text\n        var $filter_input = $('#id_search');\n        var filter_txt = $filter_input.val();\n        $filter_input.quicksearch('#dataIcons li.row', {\n            'delay': 300,\n            'bind': 'keyup',\n            'loader': 'span.loading',\n            'selector': '.hidden_sort_text',\n            onAfter: function(){\n                // onAfter can get triggered without text change, E.g. by tree selection!\n                var new_txt = $filter_input.val();\n                if (filter_txt != new_txt){     // test text has changed\n                    filter_txt = new_txt;\n                    deselectFiltered();\n                }\n            }\n        });\n\n        // filter by unrated\n        var filterUnrated = function(){\n            var iids = [];\n            $(\"#dataIcons li.row\").each(function(){\n                iids.push($(this).attr(\"data-id\"));\n            });\n            // Check to ensure images are available for filtering\n            if (iids.length === 0) {\n                // No images to filter\n                return;\n            }\n            var query = \"image=\" + iids.join(\"&image=\");\n            $.getJSON(\"{% url 'api_annotations' %}?type=rating&\" + query, function(data){\n                // map imageId to rating... rdata = {'iid': hide?}\n                var rdata = data.annotations.reduce(function(prev, r){\n                    var iid = \"\" + r.link.parent.id;\n                    prev[iid] = true;\n                    return prev;\n                }, {});\n                $(\"#dataIcons li.row\").each(function(){\n                    var $this = $(this),\n                        iid = $this.attr(\"data-id\");\n                    if (rdata[iid]) {\n                        // hide\n                        $this.addClass('ratingFilter_hidden');\n                    } else {\n                        // show\n                        $this.removeClass('ratingFilter_hidden');\n                    }\n                });\n                // finally, we de-select hidden\n                deselectFiltered();\n            });\n        };\n\n        // filter by rating\n        $(\"#filterrating img\").on('click', function(event) {\n            var iids = [],\n                $rating = $(this),\n                clickX = event.pageX - $rating.offset().left;\n            var rating = (clickX/ $rating.width()) * 5;\n            rating = parseInt(Math.ceil(rating), 10);\n            var src=\"{% static 'webclient/image/rating' %}\" + rating + \".png\";\n            $rating.attr('src', src);\n            $(\"#dataIcons li.row\").each(function(){\n                iids.push($(this).attr(\"data-id\"));\n            });\n            // Check to ensure images are available for filtering\n            if (iids.length === 0) {\n                // No images to filter\n                return;\n            }\n            var query = \"image=\" + iids.join(\"&image=\");\n            // get ratings...\n            $.getJSON(\"{% url 'api_annotations' %}?type=rating&\" + query, function(data){\n                // map imageId to rating... rdata = {'iid': show?}\n                var rdata = data.annotations.reduce(function(prev, r){\n                    // we don't care who owns the rating/link\n                    var iid = \"\" + r.link.parent.id,\n                        longValue = r.longValue;\n                    if (r.longValue === rating) {\n                        prev[iid] = true;\n                    }\n                    return prev;\n                }, {});\n                $(\"#dataIcons li.row\").each(function() {\n                    var $this = $(this),\n                        iid = $this.attr(\"data-id\");\n                    if (rating === 0 || rdata[iid]) {\n                        $this.removeClass('ratingFilter_hidden');\n                    } else {\n                        $this.addClass('ratingFilter_hidden');\n                    }\n                });\n                // finally, we de-select hidden\n                deselectFiltered();\n            });\n        });\n\n        // Filtering by Tag\n        function renderFilterTags() {\n            // Render Tag filter chooser, without current filter tags\n            var tagList = [];\n\n            for (t in usedTags) {\n                if (usedTags.hasOwnProperty(t)) {\n                    tagList.push({id: t, text: usedTags[t].textValue});\n                }\n            }\n            // sort list of tags\n            tagList.sort(function(a, b){\n                return a.text < b.text ? -1 : 1;\n            });\n            var html = tagList.map(function(t){\n                // don't show tags we're filtering by\n                if (filter_tag_ids.indexOf(t.id) > -1) return \"\";\n                return \"<option value='\" + t.id + \"'>\" + t.text.escapeHTML() + \"</option>\";\n            }).join(\"\");\n            html = \"<option value='0'>Choose Tag</option>\" + html;\n            $(\"#filter_by_tag\").html(html);\n\n            // hide filtered images \n            $(\"#dataIcons li.row\").each(function() {\n                var $this = $(this),\n                    iid = parseInt($this.attr(\"data-id\"), 10);\n                // Visible if image has ALL filter tags\n                var visible = filter_tag_ids.reduce(function(prev, tid){\n                    return prev && (usedTags[tid].images.indexOf(iid) > -1);\n                }, true);\n                if (visible) {\n                    $this.removeClass('tagFilter_hidden');\n                } else {\n                    $this.addClass('tagFilter_hidden');\n                }\n            });\n            // show tags\n            var html = filter_tag_ids.map(function(tagId){\n                var tagText = usedTags[tagId].textValue.escapeHTML();\n                return \"<div class='tag' data-tagId='\" + tagId + \"'><a class='tag_inner' href='#'>\" + tagText + \"</a><span class='removeTag removefilter' title='Remove Tag'>-</span></div>\";\n            }).join(\"\");\n            $(\"#currentFilterTags\").html(html);\n        };\n\n        $(\"#filter_by_tag\").on('change', function(event){\n            var $this = $(event.target);\n            var tagId = $this.val();\n            if (filter_tag_ids.indexOf(tagId) === -1) {\n                filter_tag_ids.push(tagId);\n            }\n\n            renderFilterTags();\n\n            // reset choose\n            $this.val('0');\n\n            // finally, we de-select hidden\n            deselectFiltered();\n        });\n    }\n\n    // When we filter, unselect the hidden icons and update\n    // selections in the jstree\n    var deselectFiltered = function(e, a){\n        // check if any selection change is needed\n        var $filtered = $(\"#dataIcons li.ui-selected:hidden\");\n        if ($filtered.length == 0) return;\n\n        // If we've filtered any selected images, de-select icon\n        $filtered.removeClass(\"ui-selected\");\n\n        var imageId = $filtered.first().data('id');\n        syncTreeSelection(imageId);\n    };\n\n    // handles selection for 'clicks' (not drags)\n    var handleClickSelection = function(event) {\n\n        // It is possible to select the image itself or its individual container\n        // Handle that here\n        var $targetIcon;\n        if (event.target.nodeName.toLowerCase() == 'li') {\n            $targetIcon = $(event.target);\n        } else if (event.target.nodeName.toLowerCase() == 'img') {\n            $targetIcon = $(event.target).parent().parent().parent();\n        } else if (event.target.nodeName.toLowerCase() == 'a') {\n            $targetIcon = $(event.target).parent().parent();\n        } else {\n            $targetIcon = $(event.target).parent();\n        }\n\n        var imageId = $targetIcon.attr('data-id');\n\n        // Add ui-selected class to range of icons etc\n        highlightClickedIcons(event, $targetIcon);\n\n        syncTreeSelection();\n\n    }\n\n\n    var highlightClickedIcons = function(event, $targetIcon) {\n        /***\n         * Based on the icon that was selected and any modifier keys\n         * update the thumbnail selections\n        */\n\n        // Get the visible icons that might need selecting\n        var $visibleIcons = $(\"#dataIcons li.row:visible\");\n\n        // Get the start point for a range select if there is one\n        // and it is visible\n        var $lastSelected = $('#dataIcons .lastSelected:visible');\n        if ($lastSelected.length === 0) {\n            // possible after drag select - just pick selected\n            $lastSelected = $('#dataIcons .ui-selected:visible');\n        }\n\n        // Calculate the index of the last selected item if there was one\n        var lastSelectedIndex = -1;\n        $lastSelected.each(function(index, el) {\n            lastSelectedIndex = $visibleIcons.index(el);\n        });\n\n        // Get the index of the target item\n        var targetIndex = $visibleIcons.index($targetIcon);\n\n        // Remove the starting point as a new one is about to be applied\n        $lastSelected.removeClass('lastSelected');\n\n        // Get the platform specific multi-select key\n        var multiSelectKey = OME.multi_key() + \"Key\";\n\n        var selectedIcons = [];\n        var unselectedIcons = [];\n\n        // If this is a range select\n        if (event.shiftKey && lastSelectedIndex != -1) {\n            // Find the start and end of the range\n            var start = Math.min(lastSelectedIndex, targetIndex);\n            var end = Math.max(lastSelectedIndex, targetIndex);\n\n            // Mark the icons for selection\n            $visibleIcons.slice(start, end+1).each(function(index, el) {\n                $(el).addClass('ui-selected');\n            });\n\n\n        // If this is a multi-select\n        } else if (event[multiSelectKey] && lastSelectedIndex != -1) {\n            if ($targetIcon.hasClass('ui-selected')) {\n                $targetIcon.removeClass('ui-selected');\n            } else {\n                $targetIcon.addClass('ui-selected');\n            }\n\n        // This is a single selection or there was no other selection for the range/multi select\n        } else {\n            // Remove all selections\n            $visibleIcons.removeClass(\"ui-selected fs-selected\");\n            // Add selection for this one item\n            $targetIcon.addClass(\"ui-selected lastSelected\");\n        }\n\n        // Mark the most recent selection\n        $targetIcon.addClass('lastSelected');\n    }\n\n\n    // use IDs of the selected visible thumbnails to sync tree selection\n    var syncTreeSelection = function() {\n\n        var $selectedIcons = $('#dataIcons li.ui-selected');\n        if (parentNode.type == 'share') {\n            // We don't support multi-selection of images in share\n            $selectedIcons.removeClass('ui-selected');\n            $selectedIcons = $selectedIcons.first().addClass('ui-selected');\n        }\n        var imageId = $selectedIcons.first().data('id');\n\n        // Get the node that seems to be the current container\n        // Images only, all that is required for now as center panel only shows images\n        var containerNode;\n        if (imageId) {\n            // don't lookup container if no images selected\n            containerNode = OME.getTreeImageContainerBestGuess(imageId);\n        }\n\n        // Deselect all to begin (supress jstree event)\n        inst.deselect_all(true);\n\n        var fsIds = {};\n        if (containerNode) {\n\n            // Select the selected icons in the tree (supress jstree event)\n            $selectedIcons.each(function(index, el) {\n                var $el = $(el),\n                    fsId = $el.data('fileset');\n                if (fsId != undefined && fsId != '') {\n                    fsIds[fsId] = true;\n                }\n                var selectedNode = inst.locate_node($el.data('type') + '-' + $el.data('id'), containerNode)[0];\n                inst.select_node(selectedNode, true);\n                // we also focus the node, so that hotkey events come from the node\n                if (selectedNode) {\n                    $(\"#\" + selectedNode.id).children('.jstree-anchor').trigger('focus');\n                }\n            });\n        } else {\n            console.log('jstree may need to be refreshed');\n        }\n        // Update thumbnail highlighting of filesets\n        highlightFilesets(fsIds);\n\n        // Since we've suppressed jstree events, we need to manually handle selection change...\n        OME.writeSelectedObjs(undefined, $selectedIcons);\n        // Update the buttons in the jstree\n        if (buttonsShowHide) {\n            buttonsShowHide(inst.get_selected(true), inst);\n        }\n\n        // Tell jsTree how many elements are selected\n        // This event also bubbles up to $(\"body\")\n        $(\"#dataTree\").trigger('selection_change.ome', inst.get_selected(true).length);\n\n        return false;\n    }\n\n    // When an image(s) are selected, also indicate others with the same fileset(s).\n    var highlightFilesets = function(fsIds) {\n        var $selectee = $(\"#dataIcons\").find(\"li.row\");\n        $selectee.removeClass('fs-selected');\n        for (var fsid in fsIds) {\n            $selectee.filter(\"[data-fileset='\"+ fsid + \"']\").addClass('fs-selected');\n        }\n    }\n\n    // Handle zooming of thumbnails with jQuery slider\n    var setupIconZooming = function() {\n        icon_styles = [];\n        li_styles = [];\n        aspect_ratios = [];\n        // manipulate thumbnail styles directly (approx 2x faster than using jQuery)\n        $(\"#dataIcons img\").each(function(){\n            icon_styles.push(this.style);\n        });\n\n        var sizeX, sizeY;\n        $(\"#dataIcons li\").each(function(){\n            if (! $(this).hasClass('thead')) {\n                li_styles.push(this.style);\n                sizeX = $(\".sizeX\", $(this)).text();\n                sizeY = $(\".sizeY\", $(this)).text();\n                aspect_ratios.push(parseFloat(sizeX) / parseFloat(sizeY));\n            }\n        });\n\n        setIconSize();\n    }\n\n    var setIconSize = function(icon_size) {\n        var icon_size = iconSize;\n        for (var s=0; s<icon_styles.length; s++) {\n            if (aspect_ratios[s] < 1) {\n                icon_styles[s].width = Math.round(icon_size * aspect_ratios[s]) + 1 + \"px\";\n                icon_styles[s].height = icon_size + \"px\";\n            } else if (aspect_ratios[s] > 1) {\n                icon_styles[s].height = Math.round(icon_size / aspect_ratios[s]) + 1 + \"px\";\n                icon_styles[s].width = icon_size + \"px\";\n            } else {\n                icon_styles[s].width = icon_size + \"px\";\n                icon_styles[s].height = icon_size + \"px\";\n            }\n            li_styles[s].width = icon_size + \"px\";\n            li_styles[s].height = icon_size + \"px\";\n        }\n    }\n\n    // switch between 'icon' or 'table' layout by switching CSS\n    var setLayout = function() {\n        if (layout == \"icon\"){\n            $(\"#dataIcons\").removeClass(\"tableLayout\");\n            $(\"#dataIcons\").addClass(\"iconLayout\");\n        }\n        else {\n            $(\"#dataIcons\").removeClass(\"iconLayout\");\n            $(\"#dataIcons\").addClass(\"tableLayout\");\n        }\n        // on larger pages, may need to scroll to show selected thumbnail again\n        focusThumbnail();\n    }\n\n\n    // This is called for plates or acquisitions (runs) only.\n    // Was previously used for loading ALL data types but now\n    // images are retrieved from jsTree directly so we only need to\n    // load plates.\n    // TODO: More cleanup needed to remove all non-SPW code\n    var load_spw = function(event, data) {\n        // Get the container that is currently rendered\n        // If any of these are not defined then nothing was selected\n        var $contentDetails = $(\"div#content_details\");\n\n        // Get details about the currently displayed container\n        var currentType = $contentDetails.data('type');\n        var currentId = $contentDetails.data('id');\n        var currentPath = $contentDetails.data('path')\n        var currentNode = false;\n        var currentPage = $(\"div#page\").data('page');\n        var currentField = $contentDetails.data('field');\n\n        if (currentPage === undefined) {\n            currentPage = 1;\n        }\n\n        if (currentField === undefined) {\n            currentField = 0;\n        }\n\n        // Retrieve current container node\n        if (currentType != undefined &&\n            currentId != undefined &&\n            currentPath != undefined) {\n\n            currentPath = JSON.parse(currentPath);\n            currentNode = inst.find_omepath(currentPath);\n        }\n\n        // Get the current selection\n        var selected = inst.get_selected(true);\n\n        // If there are selections then determine if the currently\n        // rendered container is one of them.\n        var containerNode = false;\n        if (currentNode) {\n            $.each(selected, function(index, node) {\n                if (node === currentNode) {\n                    containerNode = node;\n                    // Break out of each\n                    return false;\n                }\n\n            });\n        }\n\n        // If the containerNode is the current container then this is\n        // a selection change within the container or a pagination/field\n        // change\n        if (containerNode) {\n            // This is a page change\n            if (getPageOr1(inst, containerNode) !== currentPage) {\n                loadThumbnailsPanel(containerNode, getPageOr1(inst, containerNode), undefined);\n\n            // Fields are only applicable for acquisitions\n            } else if ((containerNode.type === 'acquisition' || containerNode.type === 'plate') &&\n                       getfieldOr0(inst, containerNode) !== currentField) {\n                loadThumbnailsPanel(containerNode, undefined, getfieldOr0(inst, containerNode));\n            }\n\n            // Return as this was either a page/field change or image\n            // selection only\n            return;\n        }\n\n        // There was no current node or it was not selected\n        // Load the first of the selected nodes\n        containerNode = selected[0];\n\n        // While the new selection may not be the same path as the old one\n        // if it is an equivalent node, we can save a reload and simply update\n        // the recorded path, but only if it is the same page/field\n        if (currentNode &&\n            inst.omecompare(containerNode, currentNode) &&\n            (currentPage === inst.get_page(containerNode || (containerNode.type === 'acquisition' && currentField === inst.get_field(containerNode))))) {\n            $contentDetails.data('path', JSON.stringify(inst.get_omepath(containerNode)));\n            return;\n        }\n\n        // Load the thumbnails for this container with the appropriate page/field\n        // E.g. public.html tree doesn't support pages/fields\n        var nodePage = inst.get_page ? inst.get_page(containerNode) : 1;\n        var nodeField = inst.get_field ? inst.get_field(containerNode) : 0;\n        loadThumbnailsPanel(containerNode, nodePage, nodeField);\n        return;\n    };\n\n        // Load the thumbnails (Will wait until there are no new requests\n    // for 200ms)\n    var loadThumbnailsPanelTimeout = false;\n    var loadThumbnailsPanel = function(node, newPage, newField) {\n        // Reset timeout if within 200ms of the last request\n        if (loadThumbnailsPanelTimeout) {\n            window.clearTimeout(loadThumbnailsPanelTimeout);\n        }\n\n        loadThumbnailsPanelTimeout = window.setTimeout(function() {\n            // Clear the timeout\n            loadThumbnailsPanelTimeout = false;\n\n            // Update the central panel\n            var inst = $.jstree.reference('#dataTree');\n            var url = \"{% url 'webindex' %}\";\n            node = inst.get_node(node);\n            var nodeType = node.type;\n            var nodeId = node.data.obj.id;\n            var show = WEBCLIENT.initially_select.join(\"|\");\n            // clear WEBCLIENT.initially_select so we don't select well next time user loads plate\n            WEBCLIENT.initially_select = [];\n\n            switch(nodeType) {\n                case 'plate':\n                    // Only load plates if it has a single 'Run' (or none)\n                    if (node.children.length < 2) {\n                        url += 'load_plate/' + nodeType + '/' + nodeId + '/?index=' + newField;\n                        if (show) {\n                            url += \"&show=\" + show;\n                        }\n                    } else {\n                        url = undefined;\n                    }\n                    break;\n                case 'acquisition':\n                    url += 'load_plate/' + nodeType + '/' + nodeId + '/?index=' + newField;\n                    if (show) {\n                        url += \"&show=\" + show;\n                    }\n                    break;\n                default:\n                    url = undefined;\n            }\n\n            if (url != undefined) {\n                // Loading screen\n                $(\"div#content_details\").html('<p class=\"loading_center\">Loading... please wait. <img src =\"{% static \"webgateway/img/spinner_big.gif\" %}\"/></p>');\n\n                // Load html from url\n                $(\"div#content_details\").load(url);\n                setThumbnailsPanel(nodeType, nodeId, inst.get_omepath(node), newPage, newField);\n\n            // Or if it's not a container that can be loaded, sometimes display a message\n            } else {\n                // If there are no children of a project node, display a message\n                if (nodeType === 'project' && !inst.is_parent(node)) {\n                    var msg = \"<p class='center_message' title='Create Datasets using toolbar or right-click menu'>No Datasets in Project</a>\";\n                    $(\"div#content_details\").html(msg);\n\n                // If there are no children of a screen node, display a message\n                } else if (nodeType === 'screen' && !inst.is_parent(node)) {\n                    msg = \"<p class='center_message' title='Import Plates using OMERO.insight'>No Plates in Screen</a>\";\n                    $(\"div#content_details\").html(msg);\n                }\n\n                // And ensure the content is empty\n                clearThumbnailsPanel();\n            }\n        }, 200);\n\n    };\n\n    var clearThumbnailsPanel = function() {\n        var $contentDetails = $(\"div#content_details\");\n        $contentDetails.empty();\n        $contentDetails.removeData('type');\n        $contentDetails.removeData('id');\n        $contentDetails.removeData('path');\n        $(\"div#page\").removeData('page');\n        $contentDetails.removeData('field');\n        // empty SPW 'spatial' birds eye view below tree\n        if (OME.emptyWellBirdsEye) {\n            OME.emptyWellBirdsEye();\n        }\n    };\n    // Allows other web apps to access this method\n    OME.clearThumbnailsPanel = clearThumbnailsPanel;\n\n    var setThumbnailsPanel = function(type, id, path, page, field) {\n        var $contentDetails = $(\"div#content_details\");\n        $contentDetails.data('type', type);\n        $contentDetails.data('id', id);\n        $contentDetails.data('path', JSON.stringify(path));\n        $(\"div#page\").data('page', page);\n        $contentDetails.data('field', field);\n    };\n\n    var getPageOr1 = function(inst, node) {\n        if ('get_page' in inst) {\n            return inst.get_page(node);\n        }\n        return 1;\n    };\n\n    var getfieldOr0 = function(inst, node) {\n        if ('get_field' in inst) {\n            return inst.get_field(node);\n        }\n        return 0;\n    };\n\n});\n\n</script>\n", "{% load i18n %}\n{% load common_filters %}\n\n\n{% comment %}\n<!--\n  Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n    \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.plateview.css\"|add:url_suffix %}\" media=\"all\" />\n\n    <script type=\"text/javascript\">\n        \n        $(document).ready(function() {\n\n            // Drag to resize #wellImagesContainer bottom panel\n            $(\".verticalDragHandle\").draggable({ axis: \"y\" })\n            .on(\"dragstart\", function(event, ui) {\n                var wellImgs_h = $(\"#wellImagesContainer\").height();\n                $(this).data({'dragstart': ui.offset.top, 'wellImgs_h': wellImgs_h});\n            })\n            .on(\"drag\", function(event, ui) {\n                var dy = ui.offset.top - $(this).data('dragstart');\n                var newH = $(this).data('wellImgs_h') - dy;\n                $(\"#wellImagesContainer\").css('height', newH + 'px');\n                $(\"#spwContainer\").css('bottom', newH + 'px');\n            })\n            .on(\"dragstop\", function(event, ui) {\n                // Save the current size\n                var dy = ui.offset.top - $(this).data('dragstart');\n                var newH = $(this).data('wellImgs_h') - dy;\n                $('body').data('well_images_panel_height', newH);\n            });\n            // If height has previously been set, apply this...\n            var newH = $('body').data('well_images_panel_height') || 150;\n            $(\"#wellImagesContainer\").css('height', newH + 'px');\n            $(\"#spwContainer\").css('bottom', newH + 'px');\n            $(\"#wellImagesDragHandle\").css('bottom', (newH + 7) + 'px');\n\n            // Resize SPW thumbnails\n            var spw_thumb_size = $('body').data('spw_thumb_size') || 64;\n            $(\"#thumb_size_slider\").slider({\n                max: 130,\n                min: 10,\n                value: spw_thumb_size,\n                slide: function(event, ui) {\n                    // find current centre (as ratio of grid width/height)\n                    let $spw = $(\"#spw\");\n                    let $table = $(\"#spw>table\");\n                    let tableW = $spw.width() / 2;\n                    let tableH = $spw.height() / 2;\n                    let cx = ($spw.scrollLeft() + tableW) / $table.width();\n                    let cy = ($spw.scrollTop() + tableH) / $table.height();\n                    // resize\n                    wpv.setSpwThumbSize(ui.value);\n                    // scroll to recentre\n                    $spw.scrollLeft((cx * $table.width()) - tableW);\n                    $spw.scrollTop((cx * $table.height()) - tableH);\n                },\n                stop: function(event, ui) {\n                    $('body').data('spw_thumb_size', ui.value);\n                }\n            });\n            // Resize Images in Well\n            var well_images_size = $('body').data('well_images_size') || 64;\n            var prev_well_images_size = well_images_size;\n            $(\"#wellImages\").addClass('wellSize' + well_images_size);\n            $(\"#wellImages_size_slider\").slider({\n                max: 130,\n                min: 30,\n                value: well_images_size,\n                slide: function(event, ui) {\n                    $(\"#wellImages\").removeClass('wellSize' + prev_well_images_size).addClass('wellSize' + ui.value);\n                    prev_well_images_size = ui.value;\n                },\n                stop: function(event, ui) {\n                    $('body').data('well_images_size', ui.value);\n                }\n            });\n\n            // Trigger Well Images selected (to update right panel)\n            var triggerWellImagesSelection = function() {\n                var selected_ids = [];\n                $(\"#wellImages li.ui-selected\").each(function(){\n                    selected_ids.push(this.getAttribute('data-imageId'));\n                });\n                // This may be redundant if selection change came from birds eye component\n                wellBirdsEye.setSelected(selected_ids);\n\n                // trigger right panel update etc\n                var selected_objs = selected_ids.map(function(iid){\n                    return {id: 'image-' + iid};\n                })\n                $(\"body\")\n                    .data(\"selected_objects.ome\", selected_objs)\n                    .trigger(\"selection_change.ome\");\n            };\n            // Handle click on Wellsample Images\n            $( '#wellImages' ).on( \"click\", \"a\", function(event) {\n                event.preventDefault();\n                // Update 'ui-selected' on images, handling shift-click etc\n                var $a = $(event.target).parent();\n                OME.handleClickSelection(event, $a, \"#wellImages .wellSize\");\n                triggerWellImagesSelection();\n                return false;\n            });\n            // Listen for double-clicks to open image viewer\n            $( \"#wellImages\").on(\"dblclick\", \"a\", function() {\n                window.open($(this).prop('href'), '_blank');\n            });\n            // Drag selection on WellSample images\n            $('#wellImages').selectable({\n                filter: 'li',\n                distance: 2,\n                stop: function(){\n                    triggerWellImagesSelection();\n                }\n            });\n\n            var syncTreeSelection = function(selected, idx, perms) {\n                // De-select 'Run' from tree, silent 'true' so we don't trigger clear of centre panel\n                var datatree = $.jstree.reference('#dataTree');\n                // Update the buttons in the jstree as if nothing selected.\n                if (buttonsShowHide) {\n                    buttonsShowHide([], datatree);\n                }\n                // Calls to ome.webclient.actions.js\n                OME.well_selection_changed(selected, idx, perms);\n            };\n\n            var staticurl = WEBCLIENT.URLS.static_webgateway;\n            var wpv = $.WeblitzPlateview($('#spw'),\n                { baseurl: '{{ baseurl }}',\n                  width: spw_thumb_size,\n                  staticurl: staticurl,\n                  useParentPrefix: false,\n                  thumbnailsBatch: {{ thumbnails_batch|default:50|json_dumps|safe }},\n                  defaultThumb: \"{% static 'webgateway/img/image128.png' %}\"\n                 });\n            var $selected;\n            // delegated click and dblclick handlers for wells\n            $( '#spw' ).on( \"click\", \"td.well img\", function(event) {\n                OME.handleClickSelection(event, undefined, \"#spw td.well img\");\n                var $selected = $('td.ui-selected', wpv.self);\n                syncTreeSelection($selected, {{ index }}, '{{ manager.getPermsCss }}');\n                showImagesInWell();\n            });\n            $( '#spw' ).on( \"dblclick\", \"td.well img\", function(event) {\n                var url = \"{% url 'web_image_viewer' 0 %}\".replace('/0/', \"/\"+$(this).attr('id').split(\"-\")[1]+\"/\" );\n                window.open(url, '_blank');\n            });\n\n            wpv.self.selectable({\n                filter: 'td.well',\n                distance: 2,\n                stop: function(){  \n                    var $selected = $('td.ui-selected', this);\n                    syncTreeSelection($selected, {{ index }}, '{{ manager.getPermsCss }}');\n                    showImagesInWell();\n                },\n                start: function(){\n                }\n            });\n            {% if select_wells %}\n                wpv.self.on('_resetLoaded', function(){\n                    var sel_well_ids = [{{ select_wells }}],\n                        well_id, $well\n                        selected_wells = $(\"\");\n                    for (var s=0;s<sel_well_ids.length;s++){\n                        well_id = sel_well_ids[s];\n                        if (typeof well_id === \"number\") {\n                            $well = $(\"#well-\"+well_id);\n                            if ($well.length > 0) {\n                                selected_wells = selected_wells.add($well);\n                            }\n                        }\n                    }\n                    if (selected_wells.length > 0) {\n                        OME.handleClickSelection(undefined, $(\"img\", selected_wells), \"#spw td.well img\");\n                        $selected = $('td.ui-selected', wpv.self);\n                        syncTreeSelection($selected, {{ index }}, '{{ manager.getPermsCss }}');\n                        var show = OME.getURLParameter('show');\n                        var imageIds = [];\n                        if (show) {\n                            // handle multiple images: show=image-1|image-2\n                            show = show.split('image-');\n                            if (show.length > 1) {\n                                imageIds = show.slice(1).map(function(iid){return parseInt(iid)});\n                            }\n                        }\n                        showImagesInWell(imageIds);\n                    }\n\n                    var selection = $(\"td.ui-selected\").first();\n                    if (typeof selection !== 'undefined' && selection.length > 0) {\n                        var spwContainer = $(\"#spwContainer\");\n                        var fillSpace = $(\"#spw\");\n                        fillSpace.scrollTop(selection.position().top - (spwContainer.height() / 2) + selection.height() / 2);\n                        fillSpace.scrollLeft(selection.position().left - (spwContainer.width() / 2) + selection.width() / 2);\n                    }\n                });\n            {% endif %}\n\n            // Kick-off loading...\n            wpv.load({{ manager.getPlateId }}, {{ index }});\n\n\n            // Lower panel.....\n\n            // Wrap images to a fixed number per row...\n            $(\"#imagesPerRow\").on('change', function(){\n                var imagesPerRow = parseInt(this.value, 10);\n                var $lists = $(\"#wellImages ul\");\n                // Remove any existing <br>\n                $(\"br\", $lists).remove();\n                if (isNaN(imagesPerRow)) return;\n                // Add <br> after each nth image\n                $(\"li:nth-child(\" + imagesPerRow + \"n)\", $lists).after('<br>');\n            });\n\n            // Callback for the spatial birds eye component\n            var selectImages = function(imageIds) {\n                $(\"#wellImages li\").removeClass('ui-selected');\n                imageIds.forEach(function(iid){\n                    $(\"#wellImages li[data-imageId=\" + iid + \"]\").addClass('ui-selected');\n                });\n                triggerWellImagesSelection();\n            }\n\n            var wellBirdsEye = OME.WellBirdsEye({callback: selectImages});\n            var showImagesInWell = function(selectImageIds) {\n                var $table = $(\"#wellImages table\");\n                var $selected = $('td.ui-selected', wpv.self);\n                $table.empty();\n                wellBirdsEye.clear();\n                $selected.each(function(i, w){\n                    var wellId = w.id.split('-')[1];\n                    var label = $(w).children('.wellLabel').text();\n                    var labelHtml = \"<td class='wellImagesLabel'><h1>\" + label + \"</h1></td>\";\n                    // create placeholders for each Well\n                    $table.append(\"<tr id='wellImages-\" + wellId + \"'>\" + labelHtml + \"</tr>\");\n                    var url = \"{% url 'webgateway' %}well/\" + wellId + \"/children/\";\n                    {% if acquisition %}\n                        url += '?run={{ acquisition }}'\n                    {% endif %}\n                    $.getJSON(url, function(data){\n                        wellBirdsEye.addWell(data);\n                        var imagesPerRow = parseInt($(\"#imagesPerRow\").val(), 10);\n                        var html = data.reduce(function(html, w, idx){\n                            var cls = '';\n                            if (selectImageIds && selectImageIds.indexOf(w.id) > -1) {\n                                cls = 'class=\"ui-selected\"';\n                            }\n                            html += '<li ' + cls + ' title=\"' + w.name.escapeHTML() + '\" data-imageId=\"' + w.id + '\">';\n                            html += '<a href=\"{% url 'webindex' %}img_detail/' + w.id + '/\">';\n                            html += '<div class=\"wellSize\"><img /></div>';\n                            html += '</a></li>';\n                            if (!isNaN(imagesPerRow) && (idx+1)%imagesPerRow === 0) {\n                                html += '<br>';\n                            }\n                            return html;\n                        }, \"\");\n                        // We use .html() instead of .append() so double-clicks don't give duplicate html\n                        $('#wellImages-' + wellId).html(labelHtml + \"<td><ul>\" + html + \"</ul></td>\");\n                        if (selectImageIds && selectImageIds.length > 0) {\n                            triggerWellImagesSelection();\n                        }\n                        var iids = data.map(function(i){\n                            return i.id;\n                        });\n                        // Load thumbnails\n                        var thumbnailsBatch = {{ thumbnails_batch|default:50|json_dumps|safe }};\n                        OME.load_thumbnails(\"{% url 'get_thumbnails_json' %}\",\n                                            iids, thumbnailsBatch,\n                                            \"{% static 'webgateway/img/image128.png' %}\"\n                        );\n                    });\n                });\n            }\n        });\n\n    </script>\n\n    \n    <!--content-->\n<!-- We add/remove class .showWellImages to #content_details expose #wellImages panel -->\n<div class='fillSpace' style=\"top: 0px; height: 29px\">\n    <div id=\"fields\">\n        <form action=\"\" method=\"POST\" class=\"align_left\">\n        <table>\n          <tbody>\n            {% for field in form_well_index %}\n            <tr><th>{{ field.label_tag }}</th><td class=\"input\">{{ field }}</td><td>{% if field.errors %}{{ field.errors }}{% endif %}{{ field.help_text|safe }}</td></tr>\n            {% endfor %}\n            <div id=\"well_index\" style=\"display:none\">{{ index }}</div>\n          </tbody>\n        </table>\n        </form>\n        <div id=\"toolbar\" class=\"toolbar_noborder\">\n        </div>\n    </div>\n</div>\n<div id=\"spwContainer\" class='fillSpace' style=\"top: 29px; bottom: 150px\">\n\n    <!-- Scrollable container for spw -->\n    <div id=\"spw\" style='position: absolute; left: 0; right: 0; top: 0; bottom: 25px'></div>\n    <div class='fillSpace' style='bottom: 0; height: 25px; border-top: solid 1px #ddd; background: #EFF1F4' >\n        <!-- Slider -->\n        <div style=\"position: absolute; right: 10px; bottom: 0; width: 200px; height: 25px\">\n            <span class=\"zoomLabel\">Zoom:</span>\n            <div id=\"thumb_size_slider\" class=\"thumb_size_slider\" title=\"Zoom Plate\"></div>\n        </div>\n    </div>\n</div>\n<div id=\"wellImagesDragHandle\" class='fillSpace' style=\"bottom: 150px; overflow: visible\">\n    <div class=\"verticalDragHandle\"></div>\n</div>\n<div id=\"wellImagesContainer\" class=\"well-fields wellImages fillSpace\">\n    <div class=\"well-fields__toolbar toolbarBg\">\n        <div class=\"well-fields__toolbar-tools--left\">\n            <div class=\"wrap-images-tool\">\n                <span class=\"text--medium\">wrap</span>\n                <input class=\"wrap-images-tool__input\" id=\"imagesPerRow\" type=\"number\" min=\"0\" max=\"99\"/>\n                <span class=\"text--medium\">images per row</span>\n            </div>\n        </div>\n        <div class=\"well-fields__toolbar-title\">\n            <span class=\"text--medium\">Fields from well</span>\n        </div>\n    </div>\n    <!-- Scrollable container for wellImages -->\n    <div id=\"wellImages\" class=\"well-fields__images fillSpace\">\n        <table style=\"width: 100%\"></table>\n    </div>\n    <div class='fillSpace' style='bottom: 0; height: 25px; border-top: solid 1px #ddd; background: #EFF1F4' >\n        <!-- Slider -->\n        <div style=\"position: absolute; right: 10px; bottom: 0px; width: 200px; height: 25px\">\n            <span class=\"zoomLabel\">Zoom:</span>\n            <div id=\"wellImages_size_slider\" class=\"thumb_size_slider\" title=\"Zoom Plate\"></div>\n        </div>\n    </div>\n</div>", "{% extends \"webgateway/core_html.html\" %}\n{% load i18n %}\n\n{% comment %}\n<!--\n  Copyright (C) 2020 University of Dundee & Open Microscopy Environment.\n  All rights reserved.\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Affero General Public License as\n  published by the Free Software Foundation, either version 3 of the\n  License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Affero General Public License for more details.\n\n  You should have received a copy of the GNU Affero General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-->\n{% endcomment %}\n\n{% block title %}\n    Upload Script\n{% endblock %}\n\n\n{% block link %}\n\n    <style type=\"text/css\">\n\n        body {\n            font-family: Arial;\n            background: #eee;\n            margin: 0px;\n            padding: 0px;\n        }\n        div.footer {\n            background: #ddd; \n            position:fixed; \n            bottom:0px; left:0px; right:0px;\n            padding: 7px;\n            border-top: 1px solid #aaa;\n            font-size: 80%;\n        }\n        h3 {\n            margin-top: 0px;\n            padding-bottom: 10px;\n            border-bottom: solid #aaa 1px;\n        }\n        input[type='text'] {\n            border: solid 1px rgba(0,0,0,.2);\n            border-top: solid 1px rgba(0,0,0,.3);\n            box-shadow: 0 1px 0 white, inset 0 1px 1px rgba(0,0,0,.1);\n            border-radius: 2px;\n            padding: 5px;\n        }\n        #spinner {\n            display: none;\n            margin: -2px 0;\n        }\n\n    </style>\n{% endblock %}\n\n\n{% block script %}\n    {{ block.super }}\n    {% include \"webgateway/base/includes/script_src_jquery.html\" %}\n    {% include \"webgateway/base/includes/script_src_popup.html\" %}\n    {% include \"webgateway/base/includes/jquery-ui.html\" %}\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.form-4.3.0.js\" %}\"></script>\n    <link rel=\"stylesheet\" href=\"{% static \"webclient/css/layout.css\"|add:url_suffix %}\" type=\"text/css\" />\n    <link rel=\"stylesheet\" href=\"{% static \"webclient/css/dusty.css\"|add:url_suffix %}\" type=\"text/css\" media=\"screen\"/>\n    <script type=\"text/javascript\">\n\n        $(document).ready(function() {\n\n            // disable submit until file chosen;\n            $('#submit').attr('disabled', 'disabled')\n\n            $('#script_form').ajaxForm({\n                beforeSubmit: function() {\n                    $(\"#submit\").prop(\"value\", \"Uploading...\");\n                    $(\"form label\").css(\"opacity\", 0.5);\n                    $(\"#spinner\").show();\n                    setTimeout(function(){\n                        // Don't disable before submit or data not included\n                        $(\"form input\").prop(\"disabled\", true);\n                        $(\"form select\").prop(\"disabled\", true);\n                    }, 100);\n                },\n                success: function(data) {\n                    // Force reload of scripts on webclient page\n                    window.opener.$(\"#scriptList\").empty();\n                    $(\"#spinner\").hide();\n                    $(\"#submit\").prop(\"value\", \"Done\");\n                    // Close this window on 'OK'\n                    OME.confirm_dialog(\n                        data.Message.replace('\\n', '<br/>'), function(){\n                            self.close();\n                        }, \"Upload Script\",\n                        [\"OK\"], null, 200);\n                }\n            });\n            // Show any error\n            $(document).ajaxError(function(e, req, settings, exception) {\n                $(\"#spinner\").hide();\n                alert(req.responseText);\n            });\n\n            // All existing scripts - to check if we're going to overwrite\n            // populated below...\n            var script_paths = [];\n            var chosen_file = undefined;\n\n            var checkForReplace = function() {\n                if (!chosen_file) {\n                    $('#targetInfo').hide();\n                    $('#submit').attr('disabled', 'disabled');\n                    return;\n                }\n                $('#targetInfo').show();\n                if (!chosen_file.endsWith(\".py\")) {\n                    $(\"#targetMessage\").html(\"File: \" + chosen_file.escapeHTML() + \" not valid.<br/>File must be Python script (.py)\");\n                    return;\n                }\n\n                $('#submit').prop('disabled', false);\n\n                var folder = $(\"#scriptFolder\").val();\n                if (!folder.endsWith('/')){\n                    folder = folder + '/';\n                };\n                var script_path = folder + chosen_file;\n                $(\"#targetPath\").text(script_path);\n\n                if (script_paths.indexOf(script_path) > -1) {\n                    $(\"#targetMessage\").html(\"Replace script at:\");\n                    $('#submit').attr('value', 'Replace script');\n                } else {\n                    $(\"#targetMessage\").html(\"Upload script to:\");\n                    $('#submit').attr('value', 'Upload script')\n                }\n            }\n\n            $(\"#script_folders\").on('change', function(event){\n                $(\"#scriptFolder\").val(event.target.value);\n                $(this).val('');\n                checkForReplace();\n            });\n\n            $(\"#scriptFolder\").on('keyup', function(event){\n                checkForReplace();\n            });\n\n            $(\"#script_file\").on('change', function(event){\n                var files = document.getElementById('script_file').files;\n                if (files.length > 0){\n                    chosen_file = files[0].name;\n                } else {\n                    chosen_file = undefined;\n                }\n                checkForReplace();\n            })\n\n            // Load existing scripts...\n            $.getJSON(\"{% url 'list_scripts' %}?full_path=true\", function(data){\n                var script_folders = [];\n                \n                var get_folders = function(baseDir, script_data) {\n                    var html = \"\";\n                    for (var i=0; i<script_data.length; i++) {\n                        var li = script_data[i],   // dict of 'name' and 'ul' for menu items OR 'id' for scripts\n                            name = li.name;\n                        if (li.id) {\n                            // we have found a script - add directory to list\n                            if (script_folders.indexOf(baseDir) == -1) {\n                                script_folders.push(baseDir);\n                            }\n                            script_paths.push(baseDir + '/' + li.name);\n                        } else {\n                            get_folders(baseDir + '/' + li.name, li.ul);\n                        }\n                    }\n                    return html;\n                };\n\n                get_folders('', data);\n\n                var select_html = script_folders.map(function(f){\n                    return \"<option value='\" + f + \"'>\" + f + \"</option>\";\n                }).join(\"\");\n                select_html = \"<option value=''>Choose Folder</option>\" + select_html;\n                $(\"#script_folders\").html(select_html);\n            })\n        });\n    </script>\n{% endblock %}\n\n\n{% block body %}\n    <form id='script_form' method=\"post\" action=\"{% url 'script_upload' %}\">{% csrf_token %}\n        <div style=\"padding:10px; margin-bottom:40px\">\n            <h3 id=\"scriptName\">Upload Script</h3>\n\n            <p>\n                <label>Choose script to upload:</label>\n                <input id=\"script_file\" name=\"script_file\" type=\"file\" />\n            </p>\n\n            <p>\n                <label>Upload into folder:</label><br>\n                <input type=\"text\" placeholder=\"/top_menu/sub_menu\" name=\"script_path\" id=\"scriptFolder\" style=\"width:350px\"/>\n                <select id=\"script_folders\" style=\"width:150px\">\n                </select>\n            </p>\n\n            <p id=\"targetInfo\" style=\"display:none\">\n                <span id=\"targetMessage\"></span>\n                <pre><code id=\"targetPath\"></code></pre>\n            </p>\n        </div>\n        <div class=\"footer\">\n            <div style=\"float:right\">\n                <a href=\"#\" tabIndex=\"3\" onClick=\"self.close()\">Close</a>\n                <input id=\"submit\" tabIndex=\"2\" type=\"submit\" value=\"Upload Script\" />\n                <img id=\"spinner\" src =\"{% static \"webgateway/img/spinner.gif\" %}\"/>\n            </div>\n        </div>\n    </form>\n{% endblock %}\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Copyright (C) 2008-2020 University of Dundee & Open Microscopy Environment.\n# All rights reserved.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\" A view functions is simply a Python function that takes a Web request and\nreturns a Web response. This response can be the HTML contents of a Web page,\nor a redirect, or the 404 and 500 error, or an XML document, or an image...\nor anything.\"\"\"\n\nimport copy\nimport os\nimport datetime\nimport Ice\nfrom Ice import Exception as IceException\nimport logging\nimport traceback\nimport json\nimport re\nimport sys\nimport warnings\nfrom past.builtins import unicode\nfrom future.utils import bytes_to_native_str\nfrom django.utils.html import escape\nfrom django.utils.http import is_safe_url\n\nfrom time import time\n\nfrom omeroweb.version import omeroweb_buildyear as build_year\nfrom omeroweb.version import omeroweb_version as omero_version\n\nimport omero\nimport omero.scripts\nfrom omero.rtypes import wrap, unwrap, rlong, rlist\n\nfrom omero.gateway.utils import toBoolean\n\nfrom django.conf import settings\nfrom django.template import loader as template_loader\nfrom django.http import (\n    Http404,\n    HttpResponse,\n    HttpResponseRedirect,\n    JsonResponse,\n    HttpResponseForbidden,\n)\nfrom django.http import HttpResponseServerError, HttpResponseBadRequest\nfrom django.utils.http import urlencode\nfrom django.core.urlresolvers import reverse, NoReverseMatch\nfrom django.utils.encoding import smart_str\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.http import require_POST\nfrom django.shortcuts import render\n\n\nfrom omeroweb.webclient.webclient_utils import _formatReport, _purgeCallback\nfrom .forms import GlobalSearchForm, ContainerForm\nfrom .forms import ShareForm\nfrom .forms import ContainerNameForm, ContainerDescriptionForm\nfrom .forms import CommentAnnotationForm, TagsAnnotationForm\nfrom .forms import MetadataFilterForm, MetadataDetectorForm\nfrom .forms import MetadataChannelForm, MetadataEnvironmentForm\nfrom .forms import MetadataObjectiveForm, MetadataObjectiveSettingsForm\nfrom .forms import MetadataStageLabelForm, MetadataLightSourceForm\nfrom .forms import MetadataDichroicForm, MetadataMicroscopeForm\nfrom .forms import FilesAnnotationForm, WellIndexForm, NewTagsAnnotationFormSet\n\nfrom .controller.container import BaseContainer\nfrom .controller.history import BaseCalendar\nfrom .controller.search import BaseSearch\nfrom .controller.share import BaseShare\n\nfrom omeroweb.webadmin.forms import LoginForm\n\nfrom omeroweb.webgateway import views as webgateway_views\nfrom omeroweb.webgateway.marshal import graphResponseMarshal\nfrom omeroweb.webgateway.util import get_longs as webgateway_get_longs\n\nfrom omeroweb.feedback.views import handlerInternalError\n\nfrom omeroweb.webclient.decorators import login_required\nfrom omeroweb.webclient.decorators import render_response\nfrom omeroweb.webclient.show import (\n    Show,\n    IncorrectMenuError,\n    paths_to_object,\n    paths_to_tag,\n)\nfrom omeroweb.decorators import (\n    ConnCleaningHttpResponse,\n    parse_url,\n    TableClosingHttpResponse,\n)\nfrom omeroweb.webgateway.util import getIntOrDefault\n\nfrom omero.model import (\n    AnnotationAnnotationLinkI,\n    DatasetI,\n    DatasetImageLinkI,\n    ExperimenterI,\n    ImageI,\n    OriginalFileI,\n    PlateI,\n    ProjectI,\n    ProjectDatasetLinkI,\n    ScreenI,\n    ScreenPlateLinkI,\n    TagAnnotationI,\n)\nfrom omero import ApiUsageException, ServerError, CmdError\nfrom omeroweb.webgateway.views import LoginView\n\nfrom . import tree\n\ntry:\n    import long\nexcept ImportError:\n    long = int\n\nlogger = logging.getLogger(__name__)\n\nlogger.info(\"INIT '%s'\" % os.getpid())\n\n# We want to allow a higher default limit for annotations so we can load\n# all the annotations expected for a PAGE of images\nANNOTATIONS_LIMIT = settings.PAGE * 100\n\n\ndef get_long_or_default(request, name, default):\n    \"\"\"\n    Retrieves a parameter from the request. If the parameter is not present\n    the default is returned\n\n    This does not catch exceptions as it makes sense to throw exceptions if\n    the arguments provided do not pass basic type validation\n    \"\"\"\n    val = None\n    val_raw = request.GET.get(name, default)\n    if val_raw is not None:\n        val = long(val_raw)\n    return val\n\n\ndef get_list(request, name):\n    val = request.GET.getlist(name)\n    return [i for i in val if i != \"\"]\n\n\ndef get_longs(request, name):\n    warnings.warn(\n        \"Deprecated. Use omeroweb.webgateway.util.get_longs()\", DeprecationWarning\n    )\n    return webgateway_get_longs(request, name)\n\n\ndef get_bool_or_default(request, name, default):\n    \"\"\"\n    Retrieves a parameter from the request. If the parameter is not present\n    the default is returned\n\n    This does not catch exceptions as it makes sense to throw exceptions if\n    the arguments provided do not pass basic type validation\n    \"\"\"\n    return toBoolean(request.GET.get(name, default))\n\n\ndef validate_redirect_url(url):\n    \"\"\"\n    Returns a URL is safe to redirect to.\n    If url is a different host, not in settings.REDIRECT_ALLOWED_HOSTS\n    we return webclient index URL.\n    \"\"\"\n    if not is_safe_url(url, allowed_hosts=settings.REDIRECT_ALLOWED_HOSTS):\n        url = reverse(\"webindex\")\n    return url\n\n\n##############################################################################\n# custom index page\n\n\n@never_cache\n@render_response()\ndef custom_index(request, conn=None, **kwargs):\n    context = {\"version\": omero_version, \"build_year\": build_year}\n\n    if settings.INDEX_TEMPLATE is not None:\n        try:\n            template_loader.get_template(settings.INDEX_TEMPLATE)\n            context[\"template\"] = settings.INDEX_TEMPLATE\n        except Exception:\n            context[\"template\"] = \"webclient/index.html\"\n            context[\"error\"] = traceback.format_exception(*sys.exc_info())[-1]\n    else:\n        context[\"template\"] = \"webclient/index.html\"\n\n    return context\n\n\n##############################################################################\n# views\n\n\nclass WebclientLoginView(LoginView):\n    \"\"\"\n    Webclient Login - Customises the superclass LoginView\n    for webclient. Also can be used by other Apps to log in to OMERO. Uses\n    the 'server' id from request to lookup the server-id (index), host and\n    port from settings. E.g. \"localhost\", 4064. Stores these details, along\n    with username, password etc in the request.session. Resets other data\n    parameters in the request.session. Tries to get connection to OMERO and\n    if this works, then we are redirected to the 'index' page or url\n    specified in REQUEST. If we can't connect, the login page is returned\n    with appropriate error messages.\n    \"\"\"\n\n    template = \"webclient/login.html\"\n    useragent = \"OMERO.web\"\n\n    def get(self, request):\n        \"\"\"\n        GET simply returns the login page\n        \"\"\"\n        return self.handle_not_logged_in(request)\n\n    def handle_logged_in(self, request, conn, connector):\n        \"\"\"\n        We override this to provide webclient-specific functionality\n        such as cleaning up any previous sessions (if user didn't logout)\n        and redirect to specified url or webclient index page.\n        \"\"\"\n\n        # webclient has various state that needs cleaning up...\n        # if 'active_group' remains in session from previous\n        # login, check it's valid for this user\n        # NB: we do this for public users in @login_required.get_connection()\n        if request.session.get(\"active_group\"):\n            if (\n                request.session.get(\"active_group\")\n                not in conn.getEventContext().memberOfGroups\n            ):\n                del request.session[\"active_group\"]\n        if request.session.get(\"user_id\"):\n            # always want to revert to logged-in user\n            del request.session[\"user_id\"]\n        if request.session.get(\"server_settings\"):\n            # always clean when logging in\n            del request.session[\"server_settings\"]\n        # do we ned to display server version ?\n        # server_version = conn.getServerVersion()\n        if request.POST.get(\"noredirect\"):\n            return HttpResponse(\"OK\")\n        url = request.GET.get(\"url\")\n        if url is None or len(url) == 0:\n            try:\n                url = parse_url(settings.LOGIN_REDIRECT)\n            except Exception:\n                url = reverse(\"webindex\")\n        else:\n            url = validate_redirect_url(url)\n        return HttpResponseRedirect(url)\n\n    def handle_not_logged_in(self, request, error=None, form=None):\n        \"\"\"\n        Returns a response for failed login.\n        Reason for failure may be due to server 'error' or because\n        of form validation errors.\n\n        @param request:     http request\n        @param error:       Error message\n        @param form:        Instance of Login Form, populated with data\n        \"\"\"\n        if form is None:\n            server_id = request.GET.get(\"server\", request.POST.get(\"server\"))\n            if server_id is not None:\n                initial = {\"server\": unicode(server_id)}\n                form = LoginForm(initial=initial)\n            else:\n                form = LoginForm()\n        context = {\n            \"version\": omero_version,\n            \"build_year\": build_year,\n            \"error\": error,\n            \"form\": form,\n        }\n        url = request.GET.get(\"url\")\n        if url is not None and len(url) != 0:\n            context[\"url\"] = urlencode({\"url\": url})\n\n        if hasattr(settings, \"LOGIN_LOGO\"):\n            context[\"LOGIN_LOGO\"] = settings.LOGIN_LOGO\n\n        if settings.PUBLIC_ENABLED:\n            redirect = reverse(\"webindex\")\n            if settings.PUBLIC_URL_FILTER.search(redirect):\n                context[\"public_enabled\"] = True\n                context[\"public_login_redirect\"] = redirect\n\n        context[\"show_download_links\"] = settings.SHOW_CLIENT_DOWNLOADS\n        if settings.SHOW_CLIENT_DOWNLOADS:\n            ver = re.match(\n                (\n                    r\"(?P<major>\\d+)\\.\"\n                    r\"(?P<minor>\\d+)\\.\"\n                    r\"(?P<patch>\\d+\\.?)?\"\n                    r\"(?P<dev>(dev|a|b|rc)\\d+)?.*\"\n                ),\n                omero_version,\n            )\n            client_download_tag_re = \"^v%s\\\\.%s\\\\.[^-]+$\" % (\n                ver.group(\"major\"),\n                ver.group(\"minor\"),\n            )\n            context[\"client_download_tag_re\"] = client_download_tag_re\n            context[\"client_download_repo\"] = settings.CLIENT_DOWNLOAD_GITHUB_REPO\n\n        return render(request, self.template, context)\n\n\n@login_required(ignore_login_fail=True)\ndef keepalive_ping(request, conn=None, **kwargs):\n    \"\"\"Keeps the OMERO session alive by pinging the server\"\"\"\n\n    # login_required handles ping, timeout etc, so we don't need to do\n    # anything else\n    return HttpResponse(\"OK\")\n\n\n@login_required()\ndef change_active_group(request, conn=None, url=None, **kwargs):\n    \"\"\"\n    Simply changes the request.session['active_group'] which is then used by\n    the @login_required decorator to configure conn for any group-based\n    queries.\n    Finally this redirects to the 'url'.\n    \"\"\"\n    switch_active_group(request)\n    # avoid recursive calls\n    if url is None or url.startswith(reverse(\"change_active_group\")):\n        url = reverse(\"webindex\")\n    url = validate_redirect_url(url)\n    return HttpResponseRedirect(url)\n\n\ndef switch_active_group(request, active_group=None):\n    \"\"\"\n    Simply changes the request.session['active_group'] which is then used by\n    the @login_required decorator to configure conn for any group-based\n    queries.\n    \"\"\"\n    if active_group is None:\n        active_group = get_long_or_default(request, \"active_group\", None)\n    if active_group is None:\n        return\n    active_group = int(active_group)\n    if (\n        \"active_group\" not in request.session\n        or active_group != request.session[\"active_group\"]\n    ):\n        request.session.modified = True\n        request.session[\"active_group\"] = active_group\n\n\ndef fake_experimenter(request, default_name=\"All members\"):\n    \"\"\"\n    Marshal faked experimenter when id is -1\n    Load omero.client.ui.menu.dropdown.everyone.label as username\n    \"\"\"\n    label = (\n        request.session.get(\"server_settings\")\n        .get(\"ui\", {})\n        .get(\"menu\", {})\n        .get(\"dropdown\", {})\n        .get(\"everyone\", {})\n        .get(\"label\", default_name)\n    )\n    return {\n        \"id\": -1,\n        \"omeName\": label,\n        \"firstName\": label,\n        \"lastName\": \"\",\n    }\n\n\n@login_required(login_redirect=\"webindex\")\ndef logout(request, conn=None, **kwargs):\n    \"\"\"\n    Logout of the session and redirects to the homepage (will redirect to\n    login first)\n    \"\"\"\n\n    if request.method == \"POST\":\n        try:\n            try:\n                conn.close()\n            except Exception:\n                logger.error(\"Exception during logout.\", exc_info=True)\n        finally:\n            request.session.flush()\n        return HttpResponseRedirect(reverse(settings.LOGIN_VIEW))\n    else:\n        context = {\"url\": reverse(\"weblogout\"), \"submit\": \"Do you want to log out?\"}\n        template = \"webgateway/base/includes/post_form.html\"\n        return render(request, template, context)\n\n\n###########################################################################\ndef _load_template(request, menu, conn=None, url=None, **kwargs):\n\n    \"\"\"\n    This view handles most of the top-level pages, as specified by 'menu' E.g.\n    userdata, usertags, history, search etc.\n    Query string 'path' that specifies an object to display in the data tree\n    is parsed.\n    We also prepare the list of users in the current group, for the\n    switch-user form. Change-group form is also prepared.\n    \"\"\"\n    request.session.modified = True\n\n    template = kwargs.get(\"template\", None)\n    if template is None:\n        if menu == \"userdata\":\n            template = \"webclient/data/containers.html\"\n        elif menu == \"usertags\":\n            template = \"webclient/data/containers.html\"\n        else:\n            # E.g. search/search.html\n            template = \"webclient/%s/%s.html\" % (menu, menu)\n\n    # tree support\n    show = kwargs.get(\"show\", Show(conn, request, menu))\n    # Constructor does no loading.  Show.first_selected must be called first\n    # in order to set up our initial state correctly.\n    try:\n        first_sel = show.first_selected\n    except IncorrectMenuError as e:\n        return HttpResponseRedirect(e.uri)\n    # We get the owner of the top level object, E.g. Project\n    # Actual api_paths_to_object() is retrieved by jsTree once loaded\n    initially_open_owner = show.initially_open_owner\n\n    # If we failed to find 'show'...\n    if request.GET.get(\"show\", None) is not None and first_sel is None:\n        # and we're logged in as PUBLIC user...\n        if (\n            settings.PUBLIC_ENABLED\n            and settings.PUBLIC_USER == conn.getUser().getOmeName()\n        ):\n            # this is likely a regular user who needs to log in as themselves.\n            # Login then redirect to current url\n            return HttpResponseRedirect(\"%s?url=%s\" % (reverse(\"weblogin\"), url))\n\n    # need to be sure that tree will be correct omero.group\n    if first_sel is not None:\n        group_id = first_sel.details.group.id.val\n        if conn.isValidGroup(group_id):\n            switch_active_group(request, group_id)\n        else:\n            first_sel = None\n\n    # search support\n    init = {}\n    global_search_form = GlobalSearchForm(data=request.GET.copy())\n    if menu == \"search\":\n        if global_search_form.is_valid():\n            init[\"query\"] = global_search_form.cleaned_data[\"search_query\"]\n\n    # get url without request string - used to refresh page after switch\n    # user/group etc\n    url = kwargs.get(\"load_template_url\", None)\n    if url is None:\n        url = reverse(viewname=\"load_template\", args=[menu])\n\n    # validate experimenter is in the active group\n    active_group = request.session.get(\"active_group\") or conn.getEventContext().groupId\n    # prepare members of group...\n    leaders, members = conn.getObject(\"ExperimenterGroup\", active_group).groupSummary()\n    userIds = [u.id for u in leaders]\n    userIds.extend([u.id for u in members])\n\n    # check any change in experimenter...\n    user_id = request.GET.get(\"experimenter\")\n    if initially_open_owner is not None:\n        if request.session.get(\"user_id\", None) != -1:\n            # if we're not already showing 'All Members'...\n            user_id = initially_open_owner\n    try:\n        user_id = long(user_id)\n    except Exception:\n        user_id = None\n    # check if user_id is in a currnt group\n    if user_id is not None:\n        if (\n            user_id\n            not in (\n                set(map(lambda x: x.id, leaders)) | set(map(lambda x: x.id, members))\n            )\n            and user_id != -1\n        ):\n            # All users in group is allowed\n            user_id = None\n    if user_id is None:\n        # ... or check that current user is valid in active group\n        user_id = request.session.get(\"user_id\", None)\n        if user_id is None or int(user_id) not in userIds:\n            if user_id != -1:  # All users in group is allowed\n                user_id = conn.getEventContext().userId\n\n    request.session[\"user_id\"] = user_id\n\n    myGroups = list(conn.getGroupsMemberOf())\n    myGroups.sort(key=lambda x: x.getName().lower())\n    groups = myGroups\n\n    new_container_form = ContainerForm()\n\n    # colleagues required for search.html page only.\n    myColleagues = {}\n    if menu == \"search\":\n        for g in groups:\n            g.loadLeadersAndMembers()\n            for c in g.leaders + g.colleagues:\n                myColleagues[c.id] = c\n        myColleagues = list(myColleagues.values())\n        myColleagues.sort(key=lambda x: x.getLastName().lower())\n\n    context = {\n        \"menu\": menu,\n        \"init\": init,\n        \"myGroups\": myGroups,\n        \"new_container_form\": new_container_form,\n        \"global_search_form\": global_search_form,\n    }\n    context[\"groups\"] = groups\n    context[\"myColleagues\"] = myColleagues\n    context[\"active_group\"] = conn.getObject(\"ExperimenterGroup\", long(active_group))\n    context[\"active_user\"] = conn.getObject(\"Experimenter\", long(user_id))\n    context[\"initially_select\"] = show.initially_select\n    context[\"initially_open\"] = show.initially_open\n    context[\"isLeader\"] = conn.isLeader()\n    context[\"current_url\"] = url\n    context[\"page_size\"] = settings.PAGE\n    context[\"template\"] = template\n    context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n    context[\"current_admin_privileges\"] = conn.getCurrentAdminPrivileges()\n    context[\"leader_of_groups\"] = conn.getEventContext().leaderOfGroups\n    context[\"member_of_groups\"] = conn.getEventContext().memberOfGroups\n    context[\"search_default_user\"] = settings.SEARCH_DEFAULT_USER\n    context[\"search_default_group\"] = settings.SEARCH_DEFAULT_GROUP\n\n    return context\n\n\n@login_required()\n@render_response()\ndef load_template(request, menu, conn=None, url=None, **kwargs):\n    return _load_template(request=request, menu=menu, conn=conn, url=url, **kwargs)\n\n\n@login_required()\n@render_response()\ndef group_user_content(request, url=None, conn=None, **kwargs):\n    \"\"\"\n    Loads html content of the Groups/Users drop-down menu on main webclient\n    pages.\n    Url should be supplied in request, as target for redirect after switching\n    group.\n    \"\"\"\n\n    myGroups = list(conn.getGroupsMemberOf())\n    myGroups.sort(key=lambda x: x.getName().lower())\n    if conn.isAdmin():  # Admin can see all groups\n        system_groups = [\n            conn.getAdminService().getSecurityRoles().userGroupId,\n            conn.getAdminService().getSecurityRoles().guestGroupId,\n        ]\n        groups = conn.getObjects(\"ExperimenterGroup\", opts={\"load_experimenters\": True})\n        groups = [g for g in groups if g.getId() not in system_groups]\n        groups.sort(key=lambda x: x.getName().lower())\n    else:\n        groups = myGroups\n\n    for g in groups:\n        g.loadLeadersAndMembers()  # load leaders / members\n\n    context = {\n        \"template\": \"webclient/base/includes/group_user_content.html\",\n        \"current_url\": url,\n        \"groups\": groups,\n        \"myGroups\": myGroups,\n    }\n    return context\n\n\n@login_required()\ndef api_group_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        member_id = get_long_or_default(request, \"member\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    try:\n        # Get the groups\n        groups = tree.marshal_groups(\n            conn=conn, member_id=member_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"groups\": groups})\n\n\n@login_required()\ndef api_experimenter_detail(request, experimenter_id, conn=None, **kwargs):\n    # Validate parameter\n    try:\n        experimenter_id = long(experimenter_id)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid experimenter id\")\n\n    try:\n        # Get the experimenter\n        if experimenter_id < 0:\n            experimenter = fake_experimenter(request)\n        else:\n            # Get the experimenter\n            experimenter = tree.marshal_experimenter(\n                conn=conn, experimenter_id=experimenter_id\n            )\n            if experimenter is None:\n                raise Http404(\"No Experimenter found with ID %s\" % experimenter_id)\n        return JsonResponse({\"experimenter\": experimenter})\n\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n\n@login_required()\ndef api_container_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        experimenter_id = get_long_or_default(request, \"id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # While this interface does support paging, it does so in a\n    # very odd way. The results per page is enforced per query so this\n    # will actually get the limit for projects, datasets (without\n    # parents), screens and plates (without parents). This is fine for\n    # the first page, but the second page may not be what is expected.\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    r = dict()\n    try:\n        # Get the projects\n        r[\"projects\"] = tree.marshal_projects(\n            conn=conn,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the orphaned datasets (without project parents)\n        r[\"datasets\"] = tree.marshal_datasets(\n            conn=conn,\n            orphaned=True,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the screens for the current user\n        r[\"screens\"] = tree.marshal_screens(\n            conn=conn,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n\n        # Get the orphaned plates (without project parents)\n        r[\"plates\"] = tree.marshal_plates(\n            conn=conn,\n            orphaned=True,\n            group_id=group_id,\n            experimenter_id=experimenter_id,\n            page=page,\n            limit=limit,\n        )\n        # Get the orphaned images container\n        try:\n            orph_t = request.session[\"server_settings\"][\"ui\"][\"tree\"][\"orphans\"]\n        except Exception:\n            orph_t = {\"enabled\": True}\n        if (\n            conn.isAdmin()\n            or conn.isLeader(gid=request.session.get(\"active_group\"))\n            or experimenter_id == conn.getUserId()\n            or orph_t.get(\"enabled\", True)\n        ):\n\n            orphaned = tree.marshal_orphaned(\n                conn=conn,\n                group_id=group_id,\n                experimenter_id=experimenter_id,\n                page=page,\n                limit=limit,\n            )\n            orphaned[\"name\"] = orph_t.get(\"name\", \"Orphaned Images\")\n            r[\"orphaned\"] = orphaned\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(r)\n\n\n@login_required()\ndef api_dataset_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        project_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    try:\n        # Get the datasets\n        datasets = tree.marshal_datasets(\n            conn=conn, project_id=project_id, group_id=group_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"datasets\": datasets})\n\n\n@login_required()\ndef api_image_list(request, conn=None, **kwargs):\n    \"\"\"Get a list of images\n    Specifiying dataset_id will return only images in that dataset\n    Specifying experimenter_id will return orpahned images for that\n    user\n    The orphaned images will include images which belong to the user\n    but are not in any dataset belonging to the user\n    Currently specifying both, experimenter_id will be ignored\n\n    \"\"\"\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        dataset_id = get_long_or_default(request, \"id\", None)\n        orphaned = get_bool_or_default(request, \"orphaned\", False)\n        load_pixels = get_bool_or_default(request, \"sizeXYZ\", False)\n        thumb_version = get_bool_or_default(request, \"thumbVersion\", False)\n        date = get_bool_or_default(request, \"date\", False)\n        experimenter_id = get_long_or_default(request, \"experimenter_id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    # Share ID is in kwargs from api/share_images/<id>/ which will create\n    # a share connection in @login_required.\n    # We don't support ?share_id in query string since this would allow a\n    # share connection to be created for ALL urls, instead of just this one.\n    share_id = \"share_id\" in kwargs and long(kwargs[\"share_id\"]) or None\n\n    try:\n        # Get the images\n        images = tree.marshal_images(\n            conn=conn,\n            orphaned=orphaned,\n            experimenter_id=experimenter_id,\n            dataset_id=dataset_id,\n            share_id=share_id,\n            load_pixels=load_pixels,\n            group_id=group_id,\n            page=page,\n            date=date,\n            thumb_version=thumb_version,\n            limit=limit,\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"images\": images})\n\n\n@login_required()\ndef api_plate_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        screen_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if not conn.isValidGroup(group_id):\n        return HttpResponseForbidden(\"Not a member of Group: %s\" % group_id)\n\n    try:\n        # Get the plates\n        plates = tree.marshal_plates(\n            conn=conn, screen_id=screen_id, group_id=group_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"plates\": plates})\n\n\n@login_required()\ndef api_plate_acquisition_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        plate_id = get_long_or_default(request, \"id\", None)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # Orphaned PlateAcquisitions are not possible so querying without a\n    # plate is an error\n    if plate_id is None:\n        return HttpResponseBadRequest(\"id (plate) must be specified\")\n\n    try:\n        # Get the plate acquisitions\n        plate_acquisitions = tree.marshal_plate_acquisitions(\n            conn=conn, plate_id=plate_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"acquisitions\": plate_acquisitions})\n\n\ndef get_object_links(conn, parent_type, parent_id, child_type, child_ids):\n    \"\"\"This is just used internally by api_link DELETE below\"\"\"\n    if parent_type == \"orphaned\":\n        return None\n    link_type = None\n    if parent_type == \"experimenter\":\n        if child_type in [\"dataset\", \"plate\", \"tag\"]:\n            # This will be a requested link if a dataset or plate is\n            # moved from the de facto orphaned datasets/plates, it isn't\n            # an error, but no link actually needs removing\n            return None\n    elif parent_type == \"project\":\n        if child_type == \"dataset\":\n            link_type = \"ProjectDatasetLink\"\n    elif parent_type == \"dataset\":\n        if child_type == \"image\":\n            link_type = \"DatasetImageLink\"\n    elif parent_type == \"screen\":\n        if child_type == \"plate\":\n            link_type = \"ScreenPlateLink\"\n    elif parent_type == \"tagset\":\n        if child_type == \"tag\":\n            link_type = \"AnnotationAnnotationLink\"\n    if not link_type:\n        raise Http404(\"json data needs 'parent_type' and 'child_type'\")\n\n    params = omero.sys.ParametersI()\n    params.addIds(child_ids)\n\n    qs = conn.getQueryService()\n    # Need to fetch child and parent, otherwise\n    # AnnotationAnnotationLink is not loaded\n    q = (\n        \"\"\"\n        from %s olink join fetch olink.child join fetch olink.parent\n        where olink.child.id in (:ids)\n        \"\"\"\n        % link_type\n    )\n    if parent_id:\n        params.add(\"pid\", rlong(parent_id))\n        q += \" and olink.parent.id = :pid\"\n\n    res = qs.findAllByQuery(q, params, conn.SERVICE_OPTS)\n\n    if parent_id is not None and len(res) == 0:\n        raise Http404(\n            \"No link found for %s-%s to %s-%s\"\n            % (parent_type, parent_id, child_type, child_ids)\n        )\n    return link_type, res\n\n\ndef create_link(parent_type, parent_id, child_type, child_id):\n    \"\"\"This is just used internally by api_link DELETE below\"\"\"\n    if parent_type == \"experimenter\":\n        if child_type == \"dataset\" or child_type == \"plate\":\n            # This is actually not a link that needs creating, this\n            # dataset/plate is an orphan\n            return \"orphan\"\n    if parent_type == \"project\":\n        project = ProjectI(long(parent_id), False)\n        if child_type == \"dataset\":\n            dataset = DatasetI(long(child_id), False)\n            link = ProjectDatasetLinkI()\n            link.setParent(project)\n            link.setChild(dataset)\n            return link\n    elif parent_type == \"dataset\":\n        dataset = DatasetI(long(parent_id), False)\n        if child_type == \"image\":\n            image = ImageI(long(child_id), False)\n            link = DatasetImageLinkI()\n            link.setParent(dataset)\n            link.setChild(image)\n            return link\n    elif parent_type == \"screen\":\n        screen = ScreenI(long(parent_id), False)\n        if child_type == \"plate\":\n            plate = PlateI(long(child_id), False)\n            link = ScreenPlateLinkI()\n            link.setParent(screen)\n            link.setChild(plate)\n            return link\n    elif parent_type == \"tagset\":\n        if child_type == \"tag\":\n            link = AnnotationAnnotationLinkI()\n            link.setParent(TagAnnotationI(long(parent_id), False))\n            link.setChild(TagAnnotationI(long(child_id), False))\n            return link\n    return None\n\n\ndef get_objects_owners(conn, child_type, child_ids):\n    \"\"\"\n    Returns a dict of child_id: owner_id\n    \"\"\"\n    if child_type == \"tag\":\n        child_type = \"Annotation\"\n    owners = {}\n    for obj in conn.getObjects(child_type, child_ids):\n        owners[obj.id] = obj.details.owner.id.val\n    return owners\n\n\n@login_required()\ndef api_links(request, conn=None, **kwargs):\n    \"\"\"\n    Entry point for the api_links methods.\n    We delegate depending on request method to\n    create or delete links between objects.\n    \"\"\"\n    if request.method not in [\"POST\", \"DELETE\"]:\n        return JsonResponse(\n            {\"Error\": \"Need to POST or DELETE JSON data to update links\"}, status=405\n        )\n    # Handle link creation/deletion\n    try:\n        json_data = json.loads(request.body)\n    except TypeError:\n        # for Python 3.5\n        json_data = json.loads(bytes_to_native_str(request.body))\n\n    if request.method == \"POST\":\n        return _api_links_POST(conn, json_data)\n    elif request.method == \"DELETE\":\n        return _api_links_DELETE(conn, json_data)\n\n\ndef _api_links_POST(conn, json_data, **kwargs):\n    \"\"\"Creates links between objects specified by a json\n    blob in the request body.\n    e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    When creating a link, fails silently if ValidationException\n    (E.g. adding an image to a Dataset that already has that image).\n    \"\"\"\n\n    response = {\"success\": False}\n\n    # json is [parent_type][parent_id][child_type][childIds]\n    # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n\n    linksToSave = []\n    write_owned = \"WriteOwned\" in conn.getCurrentAdminPrivileges()\n    user_id = conn.getUserId()\n    for parent_type, parents in json_data.items():\n        if parent_type in (\"orphaned\", \"experimenter\"):\n            continue\n        for parent_id, children in parents.items():\n            for child_type, child_ids in children.items():\n                # batch look-up owners of all child objects\n                child_owners = get_objects_owners(conn, child_type, child_ids)\n                for child_id in child_ids:\n                    parent_id = int(parent_id)\n                    link = create_link(parent_type, parent_id, child_type, child_id)\n                    if link and link != \"orphan\":\n                        # link owner should match child owner\n                        if write_owned and child_owners[child_id] != user_id:\n                            link.details.owner = ExperimenterI(\n                                child_owners[child_id], False\n                            )\n                        linksToSave.append(link)\n\n    if len(linksToSave) > 0:\n        # Need to set context to correct group (E.g parent group)\n        ptype = parent_type.title()\n        if ptype in [\"Tagset\", \"Tag\"]:\n            ptype = \"TagAnnotation\"\n        try:\n            p = conn.getQueryService().get(ptype, parent_id, conn.SERVICE_OPTS)\n            conn.SERVICE_OPTS.setOmeroGroup(p.details.group.id.val)\n        except omero.ValidationException:\n            return JsonResponse(\n                {\"error\": \"Object of type %s and ID %s not found\" % (ptype, parent_id)},\n                status=404,\n            )\n        logger.info(\"api_link: Saving %s links\" % len(linksToSave))\n\n        try:\n            # We try to save all at once, for speed.\n            conn.saveArray(linksToSave)\n            response[\"success\"] = True\n        except Exception:\n            logger.info(\n                \"api_link: Exception on saveArray with %s links\" % len(linksToSave)\n            )\n            # If this fails, e.g. ValidationException because link\n            # already exists, try to save individual links\n            for link in linksToSave:\n                try:\n                    conn.saveObject(link)\n                except Exception:\n                    pass\n            response[\"success\"] = True\n\n    return JsonResponse(response)\n\n\ndef _api_links_DELETE(conn, json_data):\n    \"\"\"Deletes links between objects specified by a json\n    blob in the request body.\n    e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    \"\"\"\n\n    response = {\"success\": False}\n\n    # json is [parent_type][parent_id][child_type][childIds]\n    # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n    for parent_type, parents in json_data.items():\n        if parent_type == \"orphaned\":\n            continue\n        for parent_id, children in parents.items():\n            for child_type, child_ids in children.items():\n                objLnks = get_object_links(\n                    conn, parent_type, parent_id, child_type, child_ids\n                )\n                if objLnks is None:\n                    continue\n                linkType, links = objLnks\n                linkIds = [r.id.val for r in links]\n                logger.info(\"api_link: Deleting %s links\" % len(linkIds))\n                conn.deleteObjects(linkType, linkIds, wait=True)\n                # webclient needs to know what is orphaned\n                linkType, remainingLinks = get_object_links(\n                    conn, parent_type, None, child_type, child_ids\n                )\n                # return remaining links in same format as json above\n                # e.g. {\"dataset\":{\"10\":{\"image\":[1,2,3]}}}\n                for rl in remainingLinks:\n                    pid = rl.parent.id.val\n                    cid = rl.child.id.val\n                    # Deleting links still in progress above - ignore these\n                    if pid == int(parent_id):\n                        continue\n                    if parent_type not in response:\n                        response[parent_type] = {}\n                    if pid not in response[parent_type]:\n                        response[parent_type][pid] = {child_type: []}\n                    response[parent_type][pid][child_type].append(cid)\n\n    # If we got here, DELETE was OK\n    response[\"success\"] = True\n\n    return JsonResponse(response)\n\n\n@login_required()\ndef api_parent_links(request, conn=None, **kwargs):\n    \"\"\"\n    Get a list of links as\n    {'data': [{id: 12, child:{type:'image', id:1},\n               parent:{type:'dataset', id:2}] }\n\n    Supports ?image=1,2 and ?image=1&image=2\n    \"\"\"\n    parent_types = {\"image\": \"dataset\", \"dataset\": \"project\", \"plate\": \"screen\"}\n    parents = []\n    for child_type, parent_type in parent_types.items():\n        ids = request.GET.getlist(child_type)\n        if len(ids) == 0:\n            continue\n        # support for ?image=1,2\n        child_ids = []\n        for id in ids:\n            for i in id.split(\",\"):\n                child_ids.append(i)\n\n        link_type, result = get_object_links(\n            conn, parent_type, None, child_type, child_ids\n        )\n        for link in result:\n            parents.append(\n                {\n                    \"id\": link.id.val,\n                    \"parent\": {\"type\": parent_type, \"id\": link.parent.id.val},\n                    \"child\": {\"type\": child_type, \"id\": link.child.id.val},\n                }\n            )\n\n    return JsonResponse({\"data\": parents})\n\n\n@login_required()\ndef api_paths_to_object(request, conn=None, **kwargs):\n    \"\"\"\n    This finds the paths to objects in the hierarchy. It returns only\n    the path, not the object hierarchy itself.\n\n    An example usage is for the 'show' functionality\n    Example to go to the image with id 1 somewhere in the tree.\n    http://localhost:8000/webclient/?show=image-1\n\n    This method can tell the webclient exactly what needs to be\n    dynamically loaded to display this in the jstree.\n    \"\"\"\n\n    try:\n        experimenter_id = get_long_or_default(request, \"experimenter\", None)\n        project_id = get_long_or_default(request, \"project\", None)\n        dataset_id = get_long_or_default(request, \"dataset\", None)\n        image_id = get_long_or_default(request, \"image\", None)\n        screen_id = get_long_or_default(request, \"screen\", None)\n        plate_id = get_long_or_default(request, \"plate\", None)\n        acquisition_id = get_long_or_default(request, \"run\", None)\n        # acquisition will override 'run' if both are specified as they are\n        # the same thing\n        acquisition_id = get_long_or_default(request, \"acquisition\", acquisition_id)\n        well_id = request.GET.get(\"well\", None)\n        tag_id = get_long_or_default(request, \"tag\", None)\n        tagset_id = get_long_or_default(request, \"tagset\", None)\n        roi_id = get_long_or_default(request, \"roi\", None)\n        shape_id = get_long_or_default(request, \"shape\", None)\n        group_id = get_long_or_default(request, \"group\", None)\n        page_size = get_long_or_default(request, \"page_size\", settings.PAGE)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    if tag_id is not None or tagset_id is not None:\n        paths = paths_to_tag(conn, experimenter_id, tagset_id, tag_id)\n\n    else:\n        paths = paths_to_object(\n            conn,\n            experimenter_id,\n            project_id,\n            dataset_id,\n            image_id,\n            screen_id,\n            plate_id,\n            acquisition_id,\n            well_id,\n            group_id,\n            page_size,\n            roi_id,\n            shape_id,\n        )\n    return JsonResponse({\"paths\": paths})\n\n\n@login_required()\ndef api_tags_and_tagged_list(request, conn=None, **kwargs):\n    if request.method == \"GET\":\n        return api_tags_and_tagged_list_GET(request, conn, **kwargs)\n    elif request.method == \"DELETE\":\n        return api_tags_and_tagged_list_DELETE(request, conn, **kwargs)\n\n\ndef api_tags_and_tagged_list_GET(request, conn=None, **kwargs):\n    \"\"\"Get a list of tags\n    Specifiying tag_id will return any sub-tags, sub-tagsets and\n    objects tagged with that id\n    If no tagset_id is specifed it will return tags which have no\n    parent\n    \"\"\"\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        group_id = get_long_or_default(request, \"group\", -1)\n        tag_id = get_long_or_default(request, \"id\", None)\n        experimenter_id = get_long_or_default(request, \"experimenter_id\", -1)\n        orphaned = get_bool_or_default(request, \"orphaned\", False)\n        load_pixels = get_bool_or_default(request, \"sizeXYZ\", False)\n        date = get_bool_or_default(request, \"date\", False)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    try:\n        # Get ALL data (all owners) under specified tags\n        if tag_id is not None:\n            tagged = tree.marshal_tagged(\n                conn=conn,\n                experimenter_id=experimenter_id,\n                tag_id=tag_id,\n                group_id=group_id,\n                page=page,\n                load_pixels=load_pixels,\n                date=date,\n                limit=limit,\n            )\n        else:\n            tagged = {}\n\n        # Get 'tags' under tag_id\n        tagged[\"tags\"] = tree.marshal_tags(\n            conn=conn,\n            orphaned=orphaned,\n            experimenter_id=experimenter_id,\n            tag_id=tag_id,\n            group_id=group_id,\n            page=page,\n            limit=limit,\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(tagged)\n\n\ndef api_tags_and_tagged_list_DELETE(request, conn=None, **kwargs):\n    \"\"\"Delete the listed tags by ids\"\"\"\n    # Get parameters\n    try:\n        tag_ids = get_longs(request, \"id\")\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    dcs = list()\n\n    handle = None\n    try:\n        for tag_id in tag_ids:\n            dcs.append(omero.cmd.Delete(\"/Annotation\", tag_id))\n        doall = omero.cmd.DoAll()\n        doall.requests = dcs\n        handle = conn.c.sf.submit(doall, conn.SERVICE_OPTS)\n\n        try:\n            conn._waitOnCmd(handle)\n        finally:\n            handle.close()\n\n    except CmdError as e:\n        return HttpResponseBadRequest(e.message)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse(\"\")\n\n\n@login_required()\ndef api_annotations(request, conn=None, **kwargs):\n\n    r = request.GET\n    image_ids = get_list(request, \"image\")\n    dataset_ids = get_list(request, \"dataset\")\n    project_ids = get_list(request, \"project\")\n    screen_ids = get_list(request, \"screen\")\n    plate_ids = get_list(request, \"plate\")\n    run_ids = get_list(request, \"acquisition\")\n    well_ids = get_list(request, \"well\")\n    page = get_long_or_default(request, \"page\", 1)\n    limit = get_long_or_default(request, \"limit\", ANNOTATIONS_LIMIT)\n\n    ann_type = r.get(\"type\", None)\n    ns = r.get(\"ns\", None)\n\n    anns, exps = tree.marshal_annotations(\n        conn,\n        project_ids=project_ids,\n        dataset_ids=dataset_ids,\n        image_ids=image_ids,\n        screen_ids=screen_ids,\n        plate_ids=plate_ids,\n        run_ids=run_ids,\n        well_ids=well_ids,\n        ann_type=ann_type,\n        ns=ns,\n        page=page,\n        limit=limit,\n    )\n\n    return JsonResponse({\"annotations\": anns, \"experimenters\": exps})\n\n\n@login_required()\ndef api_share_list(request, conn=None, **kwargs):\n    # Get parameters\n    try:\n        page = get_long_or_default(request, \"page\", 1)\n        limit = get_long_or_default(request, \"limit\", settings.PAGE)\n        member_id = get_long_or_default(request, \"member_id\", -1)\n        owner_id = get_long_or_default(request, \"owner_id\", -1)\n    except ValueError:\n        return HttpResponseBadRequest(\"Invalid parameter value\")\n\n    # Like with api_container_list, this is a combination of\n    # results which will each be able to return up to the limit in page\n    # size\n\n    try:\n        # Get the shares\n        shares = tree.marshal_shares(\n            conn=conn, member_id=member_id, owner_id=owner_id, page=page, limit=limit\n        )\n        # Get the discussions\n        discussions = tree.marshal_discussions(\n            conn=conn, member_id=member_id, owner_id=owner_id, page=page, limit=limit\n        )\n    except ApiUsageException as e:\n        return HttpResponseBadRequest(e.serverStackTrace)\n    except ServerError as e:\n        return HttpResponseServerError(e.serverStackTrace)\n    except IceException as e:\n        return HttpResponseServerError(e.message)\n\n    return JsonResponse({\"shares\": shares, \"discussions\": discussions})\n\n\n@login_required()\n@render_response()\ndef load_plate(request, o1_type=None, o1_id=None, conn=None, **kwargs):\n    \"\"\"\n    This loads data for the center panel, via AJAX calls.\n    Used for Datasets, Plates & Orphaned Images.\n    \"\"\"\n\n    # get index of the plate\n    index = getIntOrDefault(request, \"index\", 0)\n\n    # prepare data. E.g. kw = {}  or  {'plate': 301L}  or\n    # 'acquisition': 301L}\n    kw = dict()\n    if o1_type is not None:\n        if o1_id is not None and int(o1_id) > 0:\n            kw[str(o1_type)] = long(o1_id)\n\n    try:\n        manager = BaseContainer(conn, **kw)\n    except AttributeError as x:\n        return handlerInternalError(request, x)\n\n    # prepare forms\n    form_well_index = None\n\n    context = {\"manager\": manager, \"form_well_index\": form_well_index, \"index\": index}\n\n    # load data & template\n    template = None\n    if \"plate\" in kw or \"acquisition\" in kw:\n        fields = manager.getNumberOfFields()\n        if fields is not None:\n            form_well_index = WellIndexForm(initial={\"index\": index, \"range\": fields})\n            if index == 0:\n                index = fields[0]\n\n        # Show parameter will be well-1|well-2\n        show = request.GET.get(\"show\")\n        if show is not None:\n            wells_to_select = []\n            for w in show.split(\"|\"):\n                if \"well-\" in w:\n                    wells_to_select.append(w.replace(\"well-\", \"\"))\n            context[\"select_wells\"] = \",\".join(wells_to_select)\n\n        context[\"baseurl\"] = reverse(\"webgateway\").rstrip(\"/\")\n        context[\"form_well_index\"] = form_well_index\n        context[\"index\"] = index\n        context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n        template = \"webclient/data/plate.html\"\n        if o1_type == \"acquisition\":\n            context[\"acquisition\"] = o1_id\n\n    context[\"isLeader\"] = conn.isLeader()\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef load_chgrp_groups(request, conn=None, **kwargs):\n    \"\"\"\n    Get the potential groups we can move selected data to.\n    These will be groups that the owner(s) of selected objects is a member of.\n    Objects are specified by query string like: ?Image=1,2&Dataset=3\n    If no selected objects are specified, simply list the groups that the\n    current user is a member of.\n    Groups list will exclude the 'current' group context.\n    \"\"\"\n\n    ownerIds = []\n    currentGroups = set()\n    groupSets = []\n    groups = {}\n    owners = {}\n    for dtype in (\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"):\n        oids = request.GET.get(dtype, None)\n        if oids is not None:\n            for o in conn.getObjects(dtype, oids.split(\",\")):\n                ownerIds.append(o.getDetails().owner.id.val)\n                currentGroups.add(o.getDetails().group.id.val)\n    ownerIds = list(set(ownerIds))\n    # In case we were passed no objects or they weren't found\n    if len(ownerIds) == 0:\n        ownerIds = [conn.getUserId()]\n    for owner in conn.getObjects(\n        \"Experimenter\", ownerIds, opts={\"load_experimentergroups\": True}\n    ):\n        # Each owner has a set of groups\n        gids = []\n        owners[owner.id] = owner.getFullName()\n        for group in owner.copyGroupExperimenterMap():\n            groups[group.parent.id.val] = group.parent\n            gids.append(group.parent.id.val)\n        groupSets.append(set(gids))\n\n    # Can move to groups that all owners are members of...\n    targetGroupIds = set.intersection(*groupSets)\n    # ...but not 'user' group\n    userGroupId = conn.getAdminService().getSecurityRoles().userGroupId\n    if userGroupId in targetGroupIds:\n        targetGroupIds.remove(userGroupId)\n\n    # if all the Objects are in a single group, exclude it from the target\n    # groups\n    if len(currentGroups) == 1:\n        curr_grp = currentGroups.pop()\n        if curr_grp in targetGroupIds:\n            targetGroupIds.remove(curr_grp)\n\n    def getPerms(group):\n        p = group.getDetails().permissions\n        return {\n            \"write\": p.isGroupWrite(),\n            \"annotate\": p.isGroupAnnotate(),\n            \"read\": p.isGroupRead(),\n        }\n\n    # From groupIds, create a list of group dicts for json\n    targetGroups = []\n    for gid in targetGroupIds:\n        targetGroups.append(\n            {\"id\": gid, \"name\": groups[gid].name.val, \"perms\": getPerms(groups[gid])}\n        )\n    targetGroups.sort(key=lambda x: x[\"name\"])\n\n    owners = [[k, v] for k, v in owners.items()]\n\n    return {\"owners\": owners, \"groups\": targetGroups}\n\n\n@login_required()\n@render_response()\ndef load_chgrp_target(request, group_id, target_type, conn=None, **kwargs):\n    \"\"\"Loads a tree for user to pick target Project, Dataset or Screen\"\"\"\n\n    # filter by group (not switching group)\n    conn.SERVICE_OPTS.setOmeroGroup(int(group_id))\n    owner = getIntOrDefault(request, \"owner\", None)\n\n    manager = BaseContainer(conn)\n    manager.listContainerHierarchy(owner)\n    template = \"webclient/data/chgrp_target_tree.html\"\n\n    context = {\"manager\": manager, \"target_type\": target_type, \"template\": template}\n    return context\n\n\n@login_required()\n@render_response()\ndef load_searching(request, form=None, conn=None, **kwargs):\n    \"\"\"\n    Handles AJAX calls to search\n    \"\"\"\n    manager = BaseSearch(conn)\n\n    foundById = []\n    # form = 'form' if we are searching. Get query from request...\n    r = request.GET\n    if form is not None:\n        query_search = r.get(\"query\", None)\n        if query_search is None:\n            return HttpResponse(\"No search '?query' included\")\n        query_search = query_search.replace(\"+\", \" \")\n        advanced = toBoolean(r.get(\"advanced\"))\n        # If this is an advanced search use 'advanced_search' for query\n        if advanced:\n            query_search = r.get(\"advanced_search\")\n        template = \"webclient/search/search_details.html\"\n\n        onlyTypes = r.getlist(\"datatype\")\n        fields = r.getlist(\"field\")\n        searchGroup = r.get(\"searchGroup\", None)\n        ownedBy = r.get(\"ownedBy\", None)\n\n        useAcquisitionDate = toBoolean(r.get(\"useAcquisitionDate\"))\n        startdate = r.get(\"startdateinput\", None)\n        startdate = startdate is not None and smart_str(startdate) or None\n        enddate = r.get(\"enddateinput\", None)\n        enddate = enddate is not None and smart_str(enddate) or None\n        date = None\n        if startdate is not None:\n            if enddate is None:\n                n = datetime.datetime.now()\n                enddate = \"%s-%02d-%02d\" % (n.year, n.month, n.day)\n            date = \"%s_%s\" % (startdate, enddate)\n\n        # by default, if user has not specified any types:\n        if len(onlyTypes) == 0:\n            onlyTypes = [\"images\"]\n\n        # search is carried out and results are stored in\n        # manager.containers.images etc.\n        manager.search(\n            query_search,\n            onlyTypes,\n            fields,\n            searchGroup,\n            ownedBy,\n            useAcquisitionDate,\n            date,\n            rawQuery=advanced,\n        )\n\n        # if the query is only numbers (separated by commas or spaces)\n        # we search for objects by ID\n        isIds = re.compile(r\"^[\\d ,]+$\")\n        if isIds.search(query_search) is not None:\n            conn.SERVICE_OPTS.setOmeroGroup(-1)\n            idSet = set()\n            for queryId in re.split(\" |,\", query_search):\n                if len(queryId) == 0:\n                    continue\n                try:\n                    searchById = long(queryId)\n                    if searchById in idSet:\n                        continue\n                    idSet.add(searchById)\n                    for t in onlyTypes:\n                        t = t[0:-1]  # remove 's'\n                        if t in (\n                            \"project\",\n                            \"dataset\",\n                            \"image\",\n                            \"screen\",\n                            \"plate\",\n                            \"well\",\n                        ):\n                            obj = conn.getObject(t, searchById)\n                            if obj is not None:\n                                foundById.append({\"otype\": t, \"obj\": obj})\n                except ValueError:\n                    pass\n\n    else:\n        # simply display the search home page.\n        template = \"webclient/search/search.html\"\n\n    context = {\n        \"manager\": manager,\n        \"foundById\": foundById,\n        \"resultCount\": manager.c_size + len(foundById),\n    }\n    context[\"template\"] = template\n    context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_details(request, c_type, c_id, conn=None, share_id=None, **kwargs):\n    \"\"\"\n    This page is the right-hand panel 'general metadata', first tab only.\n    Shown for Projects, Datasets, Images, Screens, Plates, Wells, Tags etc.\n    The data and annotations are loaded by the manager. Display of appropriate\n    data is handled by the template.\n    \"\"\"\n\n    # the index of a field within a well\n    index = getIntOrDefault(request, \"index\", 0)\n\n    context = dict()\n\n    # we only expect a single object, but forms can take multiple objects\n    images = c_type == \"image\" and list(conn.getObjects(\"Image\", [c_id])) or list()\n    datasets = (\n        c_type == \"dataset\" and list(conn.getObjects(\"Dataset\", [c_id])) or list()\n    )\n    projects = (\n        c_type == \"project\" and list(conn.getObjects(\"Project\", [c_id])) or list()\n    )\n    screens = c_type == \"screen\" and list(conn.getObjects(\"Screen\", [c_id])) or list()\n    plates = c_type == \"plate\" and list(conn.getObjects(\"Plate\", [c_id])) or list()\n    acquisitions = (\n        c_type == \"acquisition\"\n        and list(conn.getObjects(\"PlateAcquisition\", [c_id]))\n        or list()\n    )\n    shares = (\n        (c_type == \"share\" or c_type == \"discussion\")\n        and [conn.getShare(c_id)]\n        or list()\n    )\n    wells = c_type == \"well\" and list(conn.getObjects(\"Well\", [c_id])) or list()\n\n    # we simply set up the annotation form, passing the objects to be\n    # annotated.\n    selected = {\n        \"images\": c_type == \"image\" and [c_id] or [],\n        \"datasets\": c_type == \"dataset\" and [c_id] or [],\n        \"projects\": c_type == \"project\" and [c_id] or [],\n        \"screens\": c_type == \"screen\" and [c_id] or [],\n        \"plates\": c_type == \"plate\" and [c_id] or [],\n        \"acquisitions\": c_type == \"acquisition\" and [c_id] or [],\n        \"wells\": c_type == \"well\" and [c_id] or [],\n        \"shares\": ((c_type == \"share\" or c_type == \"discussion\") and [c_id] or []),\n    }\n\n    initial = {\n        \"selected\": selected,\n        \"images\": images,\n        \"datasets\": datasets,\n        \"projects\": projects,\n        \"screens\": screens,\n        \"plates\": plates,\n        \"acquisitions\": acquisitions,\n        \"wells\": wells,\n        \"shares\": shares,\n    }\n\n    form_comment = None\n    figScripts = None\n    if c_type in (\"share\", \"discussion\"):\n        template = \"webclient/annotations/annotations_share.html\"\n        manager = BaseShare(conn, c_id)\n        manager.getAllUsers(c_id)\n        manager.getComments(c_id)\n        form_comment = CommentAnnotationForm(initial=initial)\n    else:\n        try:\n            manager = BaseContainer(conn, **{str(c_type): long(c_id), \"index\": index})\n        except AttributeError as x:\n            return handlerInternalError(request, x)\n        if share_id is not None:\n            template = \"webclient/annotations/annotations_share.html\"\n            context[\"share\"] = BaseShare(conn, share_id)\n        else:\n            template = \"webclient/annotations/metadata_general.html\"\n            context[\"canExportAsJpg\"] = manager.canExportAsJpg(request)\n            context[\"annotationCounts\"] = manager.getAnnotationCounts()\n            figScripts = manager.listFigureScripts()\n    context[\"manager\"] = manager\n\n    if c_type in (\"tag\", \"tagset\"):\n        context[\"insight_ns\"] = omero.rtypes.rstring(\n            omero.constants.metadata.NSINSIGHTTAGSET\n        ).val\n    if form_comment is not None:\n        context[\"form_comment\"] = form_comment\n\n    context[\"figScripts\"] = figScripts\n    context[\"template\"] = template\n    context[\"webclient_path\"] = reverse(\"webindex\")\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_preview(request, c_type, c_id, conn=None, share_id=None, **kwargs):\n    \"\"\"\n    This is the image 'Preview' tab for the right-hand panel.\n    \"\"\"\n    context = {}\n\n    # the index of a field within a well\n    index = getIntOrDefault(request, \"index\", 0)\n\n    manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n    if share_id:\n        context[\"share\"] = BaseShare(conn, share_id)\n    if c_type == \"well\":\n        manager.image = manager.well.getImage(index)\n\n    allRdefs = manager.image.getAllRenderingDefs()\n    rdefs = {}\n    rdefId = manager.image.getRenderingDefId()\n    # remove duplicates per user\n    for r in allRdefs:\n        ownerId = r[\"owner\"][\"id\"]\n        r[\"current\"] = r[\"id\"] == rdefId\n        # if duplicate rdefs for user, pick one with highest ID\n        if ownerId not in rdefs or rdefs[ownerId][\"id\"] < r[\"id\"]:\n            rdefs[ownerId] = r\n    rdefs = rdefs.values()\n    # format into rdef strings,\n    # E.g. {c: '1|3118:35825$FF0000,2|2086:18975$FFFF00', m: 'c'}\n    rdefQueries = []\n    for r in rdefs:\n        chs = []\n        for i, c in enumerate(r[\"c\"]):\n            act = \"-\"\n            if c[\"active\"]:\n                act = \"\"\n            color = c[\"lut\"] if \"lut\" in c else c[\"color\"]\n            reverse = \"r\" if c[\"inverted\"] else \"-r\"\n            chs.append(\n                \"%s%s|%s:%s%s$%s\" % (act, i + 1, c[\"start\"], c[\"end\"], reverse, color)\n            )\n        rdefQueries.append(\n            {\n                \"id\": r[\"id\"],\n                \"owner\": escape(r[\"owner\"]),  # May be used unsafe later\n                \"c\": \",\".join(chs),\n                \"m\": r[\"model\"] == \"greyscale\" and \"g\" or \"c\",\n            }\n        )\n    max_w, max_h = conn.getMaxPlaneSize()\n    size_x = manager.image.getSizeX()\n    size_y = manager.image.getSizeY()\n\n    context[\"tiledImage\"] = (size_x * size_y) > (max_w * max_h)\n    context[\"manager\"] = manager\n    context[\"rdefsJson\"] = json.dumps(rdefQueries)\n    context[\"rdefs\"] = rdefs\n    context[\"template\"] = \"webclient/annotations/metadata_preview.html\"\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_hierarchy(request, c_type, c_id, conn=None, **kwargs):\n    \"\"\"\n    This loads the ancestors of the specified object and displays them in a\n    static tree.\n    Used by an AJAX call from the metadata_general panel.\n    \"\"\"\n    manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n\n    context = {\"manager\": manager}\n    context[\"template\"] = \"webclient/annotations/metadata_hierarchy.html\"\n    return context\n\n\n@login_required()\n@render_response()\ndef load_metadata_acquisition(\n    request, c_type, c_id, conn=None, share_id=None, **kwargs\n):\n    \"\"\"\n    The acquisition tab of the right-hand panel. Only loaded for images.\n    TODO: urls regex should make sure that c_type is only 'image' OR 'well'\n    \"\"\"\n    try:\n        if c_type in (\"share\", \"discussion\"):\n            template = \"webclient/annotations/annotations_share.html\"\n            manager = BaseShare(conn, c_id)\n            manager.getAllUsers(c_id)\n            manager.getComments(c_id)\n        else:\n            template = \"webclient/annotations/metadata_acquisition.html\"\n            manager = BaseContainer(conn, **{str(c_type): long(c_id)})\n    except AttributeError as x:\n        return handlerInternalError(request, x)\n\n    form_environment = None\n    form_objective = None\n    form_microscope = None\n    form_instrument_objectives = list()\n    form_stageLabel = None\n    form_filters = list()\n    form_dichroics = list()\n    form_detectors = list()\n    form_channels = list()\n    form_lasers = list()\n\n    lasertypes = list(conn.getEnumerationEntries(\"LaserType\"))\n    arctypes = list(conn.getEnumerationEntries(\"ArcType\"))\n    filamenttypes = list(conn.getEnumerationEntries(\"FilamentType\"))\n\n    # various enums we need for the forms (don't load unless needed)\n    mediums = None\n    immersions = None\n    corrections = None\n\n    if c_type == \"image\":\n        if share_id is None:\n            manager.companionFiles()\n        manager.channelMetadata()\n        for theC, ch in enumerate(manager.channel_metadata):\n            logicalChannel = ch.getLogicalChannel()\n            if logicalChannel is not None:\n                channel = dict()\n                channel[\"form\"] = MetadataChannelForm(\n                    initial={\n                        \"logicalChannel\": logicalChannel,\n                        \"exWave\": ch.getExcitationWave(units=True),\n                        \"emWave\": ch.getEmissionWave(units=True),\n                        \"illuminations\": list(\n                            conn.getEnumerationEntries(\"IlluminationI\")\n                        ),\n                        \"contrastMethods\": list(\n                            conn.getEnumerationEntries(\"ContrastMethodI\")\n                        ),\n                        \"modes\": list(conn.getEnumerationEntries(\"AcquisitionModeI\")),\n                    },\n                    auto_id=False,\n                )\n                # 9853 Much metadata is not available to 'shares'\n                if share_id is None:\n                    lightPath = logicalChannel.getLightPath()\n                    if lightPath is not None:\n                        channel[\"form_dichroic\"] = None\n                        channel[\"form_excitation_filters\"] = list()\n                        channel[\"form_emission_filters\"] = list()\n                        lightPathDichroic = lightPath.getDichroic()\n                        if lightPathDichroic is not None:\n                            channel[\"form_dichroic\"] = MetadataDichroicForm(\n                                initial={\"dichroic\": lightPathDichroic}\n                            )\n                        filterTypes = list(conn.getEnumerationEntries(\"FilterTypeI\"))\n                        for f in lightPath.getEmissionFilters():\n                            channel[\"form_emission_filters\"].append(\n                                MetadataFilterForm(\n                                    initial={\"filter\": f, \"types\": filterTypes}\n                                )\n                            )\n                        for f in lightPath.getExcitationFilters():\n                            channel[\"form_excitation_filters\"].append(\n                                MetadataFilterForm(\n                                    initial={\"filter\": f, \"types\": filterTypes}\n                                )\n                            )\n\n                    detectorSettings = logicalChannel.getDetectorSettings()\n                    if (\n                        detectorSettings._obj is not None\n                        and detectorSettings.getDetector()\n                    ):\n                        channel[\"form_detector_settings\"] = MetadataDetectorForm(\n                            initial={\n                                \"detectorSettings\": detectorSettings,\n                                \"detector\": detectorSettings.getDetector(),\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"DetectorTypeI\")\n                                ),\n                                \"binnings\": list(conn.getEnumerationEntries(\"Binning\")),\n                            }\n                        )\n\n                    lightSourceSettings = logicalChannel.getLightSourceSettings()\n                    if (\n                        lightSourceSettings is not None\n                        and lightSourceSettings._obj is not None\n                    ):\n                        lightSrc = lightSourceSettings.getLightSource()\n                        if lightSrc is not None:\n                            lstypes = lasertypes\n                            if lightSrc.OMERO_CLASS == \"Arc\":\n                                lstypes = arctypes\n                            elif lightSrc.OMERO_CLASS == \"Filament\":\n                                lstypes = filamenttypes\n                            channel[\"form_light_source\"] = MetadataLightSourceForm(\n                                initial={\n                                    \"lightSource\": lightSrc,\n                                    \"lightSourceSettings\": lightSourceSettings,\n                                    \"lstypes\": lstypes,\n                                    \"mediums\": list(\n                                        conn.getEnumerationEntries(\"LaserMediumI\")\n                                    ),\n                                    \"pulses\": list(\n                                        conn.getEnumerationEntries(\"PulseI\")\n                                    ),\n                                }\n                            )\n                # TODO: We don't display filter sets here yet since they are\n                # not populated on Import by BioFormats.\n                channel[\"label\"] = ch.getLabel()\n                color = ch.getColor()\n                channel[\"color\"] = color is not None and color.getHtml() or None\n                planeInfo = (\n                    manager.image\n                    and manager.image.getPrimaryPixels().copyPlaneInfo(\n                        theC=theC, theZ=0\n                    )\n                )\n                plane_info = []\n\n                for pi in planeInfo:\n                    deltaT = pi.getDeltaT(units=\"SECOND\")\n                    exposure = pi.getExposureTime(units=\"SECOND\")\n                    if deltaT is None and exposure is None:\n                        continue\n                    if deltaT is not None:\n                        deltaT = deltaT.getValue()\n                    if exposure is not None:\n                        exposure = exposure.getValue()\n                    plane_info.append(\n                        {\"theT\": pi.theT, \"deltaT\": deltaT, \"exposureTime\": exposure}\n                    )\n                channel[\"plane_info\"] = plane_info\n\n                form_channels.append(channel)\n\n        try:\n            image = manager.well.getWellSample().image()\n        except Exception:\n            image = manager.image\n\n        if share_id is None:  # 9853\n            if image.getObjectiveSettings() is not None:\n                # load the enums if needed and create our Objective Form\n                if mediums is None:\n                    mediums = list(conn.getEnumerationEntries(\"MediumI\"))\n                if immersions is None:\n                    immersions = list(conn.getEnumerationEntries(\"ImmersionI\"))\n                if corrections is None:\n                    corrections = list(conn.getEnumerationEntries(\"CorrectionI\"))\n                form_objective = MetadataObjectiveSettingsForm(\n                    initial={\n                        \"objectiveSettings\": image.getObjectiveSettings(),\n                        \"objective\": image.getObjectiveSettings().getObjective(),\n                        \"mediums\": mediums,\n                        \"immersions\": immersions,\n                        \"corrections\": corrections,\n                    }\n                )\n            if image.getImagingEnvironment() is not None:\n                form_environment = MetadataEnvironmentForm(initial={\"image\": image})\n            if image.getStageLabel() is not None:\n                form_stageLabel = MetadataStageLabelForm(initial={\"image\": image})\n\n            instrument = image.getInstrument()\n            if instrument is not None:\n                if instrument.getMicroscope() is not None:\n                    form_microscope = MetadataMicroscopeForm(\n                        initial={\n                            \"microscopeTypes\": list(\n                                conn.getEnumerationEntries(\"MicroscopeTypeI\")\n                            ),\n                            \"microscope\": instrument.getMicroscope(),\n                        }\n                    )\n\n                objectives = instrument.getObjectives()\n                for o in objectives:\n                    # load the enums if needed and create our Objective Form\n                    if mediums is None:\n                        mediums = list(conn.getEnumerationEntries(\"MediumI\"))\n                    if immersions is None:\n                        immersions = list(conn.getEnumerationEntries(\"ImmersionI\"))\n                    if corrections is None:\n                        corrections = list(conn.getEnumerationEntries(\"CorrectionI\"))\n                    obj_form = MetadataObjectiveForm(\n                        initial={\n                            \"objective\": o,\n                            \"mediums\": mediums,\n                            \"immersions\": immersions,\n                            \"corrections\": corrections,\n                        },\n                        auto_id=False,\n                    )\n                    form_instrument_objectives.append(obj_form)\n                filters = list(instrument.getFilters())\n                if len(filters) > 0:\n                    for f in filters:\n                        form_filter = MetadataFilterForm(\n                            initial={\n                                \"filter\": f,\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"FilterTypeI\")\n                                ),\n                            },\n                            auto_id=False,\n                        )\n                        form_filters.append(form_filter)\n\n                dichroics = list(instrument.getDichroics())\n                for d in dichroics:\n                    form_dichroic = MetadataDichroicForm(\n                        initial={\"dichroic\": d}, auto_id=False\n                    )\n                    form_dichroics.append(form_dichroic)\n\n                detectors = list(instrument.getDetectors())\n                if len(detectors) > 0:\n                    for d in detectors:\n                        form_detector = MetadataDetectorForm(\n                            initial={\n                                \"detectorSettings\": None,\n                                \"detector\": d,\n                                \"types\": list(\n                                    conn.getEnumerationEntries(\"DetectorTypeI\")\n                                ),\n                            },\n                            auto_id=False,\n                        )\n                        form_detectors.append(form_detector)\n\n                lasers = list(instrument.getLightSources())\n                if len(lasers) > 0:\n                    for laser in lasers:\n                        lstypes = lasertypes\n                        if laser.OMERO_CLASS == \"Arc\":\n                            lstypes = arctypes\n                        elif laser.OMERO_CLASS == \"Filament\":\n                            lstypes = filamenttypes\n                        form_laser = MetadataLightSourceForm(\n                            initial={\n                                \"lightSource\": laser,\n                                \"lstypes\": lstypes,\n                                \"mediums\": list(\n                                    conn.getEnumerationEntries(\"LaserMediumI\")\n                                ),\n                                \"pulses\": list(conn.getEnumerationEntries(\"PulseI\")),\n                            },\n                            auto_id=False,\n                        )\n                        form_lasers.append(form_laser)\n\n    # TODO: remove this 'if' since we should only have c_type = 'image'?\n    context = {\"manager\": manager, \"share_id\": share_id}\n    if c_type not in (\"share\", \"discussion\", \"tag\"):\n        context[\"form_channels\"] = form_channels\n        context[\"form_environment\"] = form_environment\n        context[\"form_objective\"] = form_objective\n        context[\"form_microscope\"] = form_microscope\n        context[\"form_instrument_objectives\"] = form_instrument_objectives\n        context[\"form_filters\"] = form_filters\n        context[\"form_dichroics\"] = form_dichroics\n        context[\"form_detectors\"] = form_detectors\n        context[\"form_lasers\"] = form_lasers\n        context[\"form_stageLabel\"] = form_stageLabel\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef load_original_metadata(request, imageId, conn=None, share_id=None, **kwargs):\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is None:\n        raise Http404(\"No Image found with ID %s\" % imageId)\n\n    context = {\n        \"template\": \"webclient/annotations/original_metadata.html\",\n        \"imageId\": image.getId(),\n    }\n    try:\n        om = image.loadOriginalMetadata()\n        if om is not None:\n            context[\"original_metadata\"] = om[0]\n            context[\"global_metadata\"] = om[1]\n            context[\"series_metadata\"] = om[2]\n    except omero.LockTimeout:\n        # 408 is Request Timeout\n        return HttpResponse(content=\"LockTimeout\", status=408)\n    return context\n\n\n###########################################################################\n# ACTIONS\n\n# Annotation in the right-hand panel is handled the same way for single\n# objects (metadata_general.html)\n# AND for batch annotation (batch_annotate.html) by 4 forms:\n# Comment (this is loaded in the initial page)\n# Tags (the empty form is in the initial page but fields are loaded via AJAX)\n# Local File (this is loaded in the initial page)\n# Existing File (the empty form is in the initial page but field is loaded via\n# AJAX)\n#\n# In each case, the form itself contains hidden fields to specify the\n# object(s) being annotated\n# All forms inherit from a single form that has these fields.\n\n\ndef getObjects(request, conn=None):\n    \"\"\"\n    Prepare objects for use in the annotation forms.\n    These objects are required by the form superclass to populate hidden\n    fields, so we know what we're annotating on submission\n    \"\"\"\n    r = request.GET or request.POST\n    images = (\n        len(r.getlist(\"image\")) > 0\n        and list(conn.getObjects(\"Image\", r.getlist(\"image\")))\n        or list()\n    )\n    datasets = (\n        len(r.getlist(\"dataset\")) > 0\n        and list(conn.getObjects(\"Dataset\", r.getlist(\"dataset\")))\n        or list()\n    )\n    projects = (\n        len(r.getlist(\"project\")) > 0\n        and list(conn.getObjects(\"Project\", r.getlist(\"project\")))\n        or list()\n    )\n    screens = (\n        len(r.getlist(\"screen\")) > 0\n        and list(conn.getObjects(\"Screen\", r.getlist(\"screen\")))\n        or list()\n    )\n    plates = (\n        len(r.getlist(\"plate\")) > 0\n        and list(conn.getObjects(\"Plate\", r.getlist(\"plate\")))\n        or list()\n    )\n    acquisitions = (\n        len(r.getlist(\"acquisition\")) > 0\n        and list(conn.getObjects(\"PlateAcquisition\", r.getlist(\"acquisition\")))\n        or list()\n    )\n    shares = (\n        len(r.getlist(\"share\")) > 0 and [conn.getShare(r.getlist(\"share\")[0])] or list()\n    )\n    wells = (\n        len(r.getlist(\"well\")) > 0\n        and list(conn.getObjects(\"Well\", r.getlist(\"well\")))\n        or list()\n    )\n    return {\n        \"image\": images,\n        \"dataset\": datasets,\n        \"project\": projects,\n        \"screen\": screens,\n        \"plate\": plates,\n        \"acquisition\": acquisitions,\n        \"well\": wells,\n        \"share\": shares,\n    }\n\n\ndef getIds(request):\n    \"\"\"\n    Used by forms to indicate the currently selected objects prepared above\n    \"\"\"\n    r = request.GET or request.POST\n    selected = {\n        \"images\": r.getlist(\"image\"),\n        \"datasets\": r.getlist(\"dataset\"),\n        \"projects\": r.getlist(\"project\"),\n        \"screens\": r.getlist(\"screen\"),\n        \"plates\": r.getlist(\"plate\"),\n        \"acquisitions\": r.getlist(\"acquisition\"),\n        \"wells\": r.getlist(\"well\"),\n        \"shares\": r.getlist(\"share\"),\n    }\n    return selected\n\n\n@login_required()\n@render_response()\ndef batch_annotate(request, conn=None, **kwargs):\n    \"\"\"\n    This page gives a form for batch annotation.\n    Local File form and Comment form are loaded. Other forms are loaded via\n    AJAX\n    \"\"\"\n\n    objs = getObjects(request, conn)\n\n    # get groups for selected objects - setGroup() and create links\n    obj_ids = []\n    obj_labels = []\n    groupIds = set()\n    annotationBlocked = False\n    for key in objs:\n        obj_ids += [\"%s=%s\" % (key, o.id) for o in objs[key]]\n        for o in objs[key]:\n            groupIds.add(o.getDetails().group.id.val)\n            if not o.canAnnotate():\n                annotationBlocked = (\n                    \"Can't add annotations because you don't\" \" have permissions\"\n                )\n            obj_labels.append({\"type\": key.title(), \"id\": o.id, \"name\": o.getName()})\n    obj_string = \"&\".join(obj_ids)\n    link_string = \"|\".join(obj_ids).replace(\"=\", \"-\")\n    if len(groupIds) == 0:\n        # No supported objects found.\n        # If multiple tags / tagsets selected, return placeholder\n        if (\n            len(request.GET.getlist(\"tag\")) > 0\n            or len(request.GET.getlist(\"tagset\")) > 0\n        ):\n            return HttpResponse(\"<h2>Can't batch annotate tags</h2>\")\n        else:\n            return handlerInternalError(request, \"No objects found\")\n    groupId = list(groupIds)[0]\n    conn.SERVICE_OPTS.setOmeroGroup(groupId)\n\n    manager = BaseContainer(conn)\n    figScripts = manager.listFigureScripts(objs)\n    canExportAsJpg = manager.canExportAsJpg(request, objs)\n    filesetInfo = None\n    iids = []\n    if \"image\" in objs and len(objs[\"image\"]) > 0:\n        iids = [i.getId() for i in objs[\"image\"]]\n    if len(iids) > 0:\n        filesetInfo = conn.getFilesetFilesInfo(iids)\n        archivedInfo = conn.getArchivedFilesInfo(iids)\n        filesetInfo[\"count\"] += archivedInfo[\"count\"]\n        filesetInfo[\"size\"] += archivedInfo[\"size\"]\n\n    context = {\n        \"iids\": iids,\n        \"obj_string\": obj_string,\n        \"link_string\": link_string,\n        \"obj_labels\": obj_labels,\n        \"batch_ann\": True,\n        \"figScripts\": figScripts,\n        \"canExportAsJpg\": canExportAsJpg,\n        \"filesetInfo\": filesetInfo,\n        \"annotationBlocked\": annotationBlocked,\n        \"differentGroups\": False,\n    }\n    if len(groupIds) > 1:\n        context[\"annotationBlocked\"] = (\n            \"Can't add annotations because\" \" objects are in different groups\"\n        )\n        context[\"differentGroups\"] = True  # E.g. don't run scripts etc\n    context[\"canDownload\"] = manager.canDownload(objs)\n    context[\"template\"] = \"webclient/annotations/batch_annotate.html\"\n    context[\"webclient_path\"] = reverse(\"webindex\")\n    context[\"annotationCounts\"] = manager.getBatchAnnotationCounts(\n        getObjects(request, conn)\n    )\n    return context\n\n\n@login_required()\n@render_response()\ndef annotate_file(request, conn=None, **kwargs):\n    \"\"\"\n    On 'POST', This handles attaching an existing file-annotation(s) and/or\n    upload of a new file to one or more objects\n    Otherwise it generates the form for choosing file-annotations & local\n    files.\n    \"\"\"\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n    }\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!)\n    for obs in oids.values():\n        if len(obs) > 0:\n            conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n            break\n\n    obj_count = sum([len(selected[types]) for types in selected])\n    if obj_count == 0:\n        raise Http404(\"Need to specify objects via e.g. ?image=1\")\n\n    # Get appropriate manager, either to list available Files to add to single\n    # object, or list ALL Files (multiple objects)\n    manager = None\n    if obj_count == 1:\n        for t in selected:\n            if len(selected[t]) > 0:\n                o_type = t[:-1]  # \"images\" -> \"image\"\n                o_id = selected[t][0]\n                break\n        if o_type in (\n            \"dataset\",\n            \"project\",\n            \"image\",\n            \"screen\",\n            \"plate\",\n            \"acquisition\",\n            \"well\",\n            \"comment\",\n            \"file\",\n            \"tag\",\n            \"tagset\",\n        ):\n            if o_type == \"tagset\":\n                # TODO: this should be handled by the BaseContainer\n                o_type = \"tag\"\n            kw = {}\n            if o_type is not None and int(o_id) > 0:\n                kw[str(o_type)] = int(o_id)\n            try:\n                manager = BaseContainer(conn, **kw)\n            except AttributeError as x:\n                return handlerInternalError(request, x)\n\n    if manager is not None:\n        files = manager.getFilesByObject()\n    else:\n        manager = BaseContainer(conn)\n        for dtype, objs in oids.items():\n            if len(objs) > 0:\n                # NB: we only support a single data-type now. E.g. 'image' OR\n                # 'dataset' etc.\n                files = manager.getFilesByObject(\n                    parent_type=dtype, parent_ids=[o.getId() for o in objs]\n                )\n                break\n\n    initial[\"files\"] = files\n\n    if request.method == \"POST\":\n        # handle form submission\n        form_file = FilesAnnotationForm(initial=initial, data=request.POST.copy())\n        if form_file.is_valid():\n            # Link existing files...\n            files = form_file.cleaned_data[\"files\"]\n            added_files = []\n            if files is not None and len(files) > 0:\n                added_files = manager.createAnnotationsLinks(\"file\", files, oids)\n            # upload new file\n            fileupload = (\n                \"annotation_file\" in request.FILES\n                and request.FILES[\"annotation_file\"]\n                or None\n            )\n            if fileupload is not None and fileupload != \"\":\n                newFileId = manager.createFileAnnotations(fileupload, oids)\n                added_files.append(newFileId)\n            return JsonResponse({\"fileIds\": added_files})\n        else:\n            return HttpResponse(form_file.errors)\n\n    else:\n        form_file = FilesAnnotationForm(initial=initial)\n        context = {\"form_file\": form_file}\n        template = \"webclient/annotations/files_form.html\"\n    context[\"template\"] = template\n    return context\n\n\n@login_required()\n@render_response()\ndef annotate_rating(request, conn=None, **kwargs):\n    \"\"\"\n    Handle adding Rating to one or more objects\n    \"\"\"\n    if request.method != \"POST\":\n        raise Http404(\"Only POST supported\")\n    rating = getIntOrDefault(request, \"rating\", 0)\n    oids = getObjects(request, conn)\n\n    # add / update rating\n    for otype, objs in oids.items():\n        for o in objs:\n            o.setRating(rating)\n\n    # return a summary of ratings\n    return JsonResponse({\"success\": True})\n\n\n@login_required()\n@render_response()\ndef annotate_comment(request, conn=None, **kwargs):\n    \"\"\"Handle adding Comments to one or more objects\n    Unbound instance of Comment form not available.\n    If the form has been submitted, a bound instance of the form\n    is created using request.POST\"\"\"\n\n    if request.method != \"POST\":\n        raise Http404(\"Unbound instance of form not available.\")\n\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n        \"shares\": oids[\"share\"],\n    }\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!) this does not aplly to share\n    if len(oids[\"share\"]) < 1:\n        for obs in oids.values():\n            if len(obs) > 0:\n                conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n                break\n\n    # Handle form submission...\n    form_multi = CommentAnnotationForm(initial=initial, data=request.POST.copy())\n    if form_multi.is_valid():\n        # In each case below, we pass the {'object_type': [ids]} map\n        content = form_multi.cleaned_data[\"comment\"]\n        if content is not None and content != \"\":\n            if oids[\"share\"] is not None and len(oids[\"share\"]) > 0:\n                sid = oids[\"share\"][0].id\n                manager = BaseShare(conn, sid)\n                host = \"%s?server=%i\" % (\n                    request.build_absolute_uri(\n                        reverse(\"load_template\", args=[\"public\"])\n                    ),\n                    int(conn.server_id),\n                )\n                textAnn = manager.addComment(host, content)\n                # For shares we need to return html for display...\n                context = {\n                    \"tann\": textAnn,\n                    \"added_by\": conn.getUserId(),\n                    \"template\": \"webclient/annotations/comment.html\",\n                }\n            else:\n                # ...otherwise Comments are re-loaded by AJAX json\n                # so we don't *need* to return anything\n                manager = BaseContainer(conn)\n                annId = manager.createCommentAnnotations(content, oids)\n                context = {\"annId\": annId, \"added_by\": conn.getUserId()}\n            return context\n    else:\n        # TODO: handle invalid form error\n        return HttpResponse(str(form_multi.errors))\n\n\n@login_required()\n@render_response()\ndef annotate_map(request, conn=None, **kwargs):\n    \"\"\"\n    Handle adding Map Annotations to one or more objects\n    POST data \"mapAnnotation\" should be list of ['key':'value'] pairs.\n    \"\"\"\n\n    if request.method != \"POST\":\n        raise Http404(\n            \"Need to POST map annotation data as list of\" \" ['key', 'value'] pairs\"\n        )\n\n    oids = getObjects(request, conn)\n\n    # Use the first object we find to set context (assume all objects are in\n    # same group!)\n    # this does not aplly to share\n    if len(oids[\"share\"]) < 1:\n        for obs in oids.values():\n            if len(obs) > 0:\n                conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n                break\n\n    data = request.POST.get(\"mapAnnotation\")\n    data = json.loads(data)\n\n    annIds = request.POST.getlist(\"annId\")\n    ns = request.POST.get(\"ns\", omero.constants.metadata.NSCLIENTMAPANNOTATION)\n\n    # Create a new annotation\n    if len(annIds) == 0 and len(data) > 0:\n        duplicate = request.POST.get(\"duplicate\", \"false\")\n        duplicate.lower() == \"true\"\n        # For 'client' map annotations, we enforce 1 annotation per object\n        if ns == omero.constants.metadata.NSCLIENTMAPANNOTATION:\n            duplicate = True\n        if duplicate:\n            # Create a new Map Annotation for each object:\n            for k, objs in oids.items():\n                for obj in objs:\n                    ann = omero.gateway.MapAnnotationWrapper(conn)\n                    ann.setValue(data)\n                    ann.setNs(ns)\n                    ann.save()\n                    annIds.append(ann.getId())\n                    obj.linkAnnotation(ann)\n        else:\n            # Create single Map Annotation and link to all objects\n            ann = omero.gateway.MapAnnotationWrapper(conn)\n            ann.setValue(data)\n            ann.setNs(ns)\n            ann.save()\n            annIds.append(ann.getId())\n            for k, objs in oids.items():\n                for obj in objs:\n                    obj.linkAnnotation(ann)\n    # Or update existing annotations\n    else:\n        for annId in annIds:\n            ann = conn.getObject(\"MapAnnotation\", annId)\n            if ann is None:\n                continue\n            if len(data) > 0:\n                ann.setValue(data)\n                ann.save()\n            else:\n                # Delete if no data\n                handle = conn.deleteObjects(\"/Annotation\", [annId])\n                try:\n                    conn._waitOnCmd(handle)\n                finally:\n                    handle.close()\n        if len(data) == 0:\n            annIds = None\n\n    return {\"annId\": annIds}\n\n\n@login_required()\n@render_response()\ndef marshal_tagging_form_data(request, conn=None, **kwargs):\n    \"\"\"\n    Provides json data to ome.tagging_form.js\n    \"\"\"\n\n    group = get_long_or_default(request, \"group\", -1)\n    conn.SERVICE_OPTS.setOmeroGroup(str(group))\n    try:\n        offset = int(request.GET.get(\"offset\"))\n        limit = int(request.GET.get(\"limit\", 1000))\n    except Exception:\n        offset = limit = None\n\n    jsonmode = request.GET.get(\"jsonmode\")\n    if jsonmode == \"tagcount\":\n        tag_count = conn.getTagCount()\n        return dict(tag_count=tag_count)\n\n    manager = BaseContainer(conn)\n    manager.loadTagsRecursive(eid=-1, offset=offset, limit=limit)\n    all_tags = manager.tags_recursive\n    all_tags_owners = manager.tags_recursive_owners\n\n    if jsonmode == \"tags\":\n        # send tag information without descriptions\n        r = list((i, t, o, s) for i, d, t, o, s in all_tags)\n        return r\n\n    elif jsonmode == \"desc\":\n        # send descriptions for tags\n        return dict((i, d) for i, d, t, o, s in all_tags)\n\n    elif jsonmode == \"owners\":\n        # send owner information\n        return all_tags_owners\n\n    return HttpResponse()\n\n\n@login_required()\n@render_response()\ndef annotate_tags(request, conn=None, **kwargs):\n    \"\"\"\n    This handles creation AND submission of Tags form, adding new AND/OR\n    existing tags to one or more objects\n    \"\"\"\n\n    oids = getObjects(request, conn)\n    selected = getIds(request)\n    obj_count = sum([len(selected[types]) for types in selected])\n\n    # Get appropriate manager, either to list available Tags to add to single\n    # object, or list ALL Tags (multiple objects)\n    manager = None\n    self_id = conn.getEventContext().userId\n\n    tags = []\n\n    # Use the first object we find to set context (assume all objects are\n    # in same group!)\n    for obs in oids.values():\n        if len(obs) > 0:\n            conn.SERVICE_OPTS.setOmeroGroup(obs[0].getDetails().group.id.val)\n            break\n\n    # Make a list of all current tags\n    # As would be on right column of tagging dialog...\n    taglist, users = tree.marshal_annotations(\n        conn,\n        project_ids=selected[\"projects\"],\n        dataset_ids=selected[\"datasets\"],\n        image_ids=selected[\"images\"],\n        screen_ids=selected[\"screens\"],\n        plate_ids=selected[\"plates\"],\n        run_ids=selected[\"acquisitions\"],\n        well_ids=selected[\"wells\"],\n        ann_type=\"tag\",\n        # If we reach this limit we'll get some tags not removed\n        limit=ANNOTATIONS_LIMIT,\n    )\n\n    userMap = {}\n    for exp in users:\n        userMap[exp[\"id\"]] = exp\n\n    # For batch annotate, only include tags that user has added to all objects\n    if obj_count > 1:\n        # count my links\n        myLinkCount = {}\n        for t in taglist:\n            tid = t[\"id\"]\n            if tid not in myLinkCount:\n                myLinkCount[tid] = 0\n            if t[\"link\"][\"owner\"][\"id\"] == self_id:\n                myLinkCount[tid] += 1\n        # filter\n        taglist = [t for t in taglist if myLinkCount[t[\"id\"]] == obj_count]\n\n    selected_tags = []\n    for tag in taglist:\n        linkOwnerId = tag[\"link\"][\"owner\"][\"id\"]\n        owner = userMap[linkOwnerId]\n        ownerName = \"%s %s\" % (owner[\"firstName\"], owner[\"lastName\"])\n        canDelete = True\n        created = tag[\"link\"][\"date\"]\n        linkOwned = linkOwnerId == self_id\n        selected_tags.append(\n            (tag[\"id\"], self_id, ownerName, canDelete, created, linkOwned)\n        )\n\n    # selected_tags is really a list of tag LINKS.\n    # May be several links per tag.id\n    selected_tags.sort(key=lambda x: x[0])\n\n    initial = {\n        \"selected\": selected,\n        \"images\": oids[\"image\"],\n        \"datasets\": oids[\"dataset\"],\n        \"projects\": oids[\"project\"],\n        \"screens\": oids[\"screen\"],\n        \"plates\": oids[\"plate\"],\n        \"acquisitions\": oids[\"acquisition\"],\n        \"wells\": oids[\"well\"],\n    }\n\n    if request.method == \"POST\":\n        # handle form submission\n        form_tags = TagsAnnotationForm(initial=initial, data=request.POST.copy())\n        newtags_formset = NewTagsAnnotationFormSet(\n            prefix=\"newtags\", data=request.POST.copy()\n        )\n        # Create new tags or Link existing tags...\n        if form_tags.is_valid() and newtags_formset.is_valid():\n            # filter down previously selected tags to the ones linked by\n            # current user\n            selected_tag_ids = [stag[0] for stag in selected_tags if stag[5]]\n            # Remove duplicates from tag IDs\n            selected_tag_ids = list(set(selected_tag_ids))\n            post_tags = list(form_tags.cleaned_data[\"tags\"])\n            tags = [tag for tag in post_tags if tag not in selected_tag_ids]\n            removed = [tag for tag in selected_tag_ids if tag not in post_tags]\n            manager = BaseContainer(conn)\n            if tags:\n                manager.createAnnotationsLinks(\"tag\", tags, oids)\n            new_tags = []\n            for form in newtags_formset.forms:\n                new_tags.append(\n                    manager.createTagAnnotations(\n                        form.cleaned_data[\"tag\"],\n                        form.cleaned_data[\"description\"],\n                        oids,\n                        tag_group_id=form.cleaned_data[\"tagset\"],\n                    )\n                )\n            # only remove Tags where the link is owned by self_id\n            for remove in removed:\n                tag_manager = BaseContainer(conn, tag=remove)\n                tag_manager.remove(\n                    [\n                        \"%s-%s\" % (dtype, obj.id)\n                        for dtype, objs in oids.items()\n                        for obj in objs\n                    ],\n                    tag_owner_id=self_id,\n                )\n            return JsonResponse({\"added\": tags, \"removed\": removed, \"new\": new_tags})\n        else:\n            # TODO: handle invalid form error\n            return HttpResponse(str(form_tags.errors))\n\n    else:\n        form_tags = TagsAnnotationForm(initial=initial)\n        newtags_formset = NewTagsAnnotationFormSet(prefix=\"newtags\")\n        context = {\n            \"form_tags\": form_tags,\n            \"newtags_formset\": newtags_formset,\n            \"selected_tags\": selected_tags,\n        }\n        template = \"webclient/annotations/tags_form.html\"\n    context[\"template\"] = template\n    return context\n\n\n@require_POST\n@login_required()\n@render_response()\ndef edit_channel_names(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Edit and save channel names\n    \"\"\"\n    image = conn.getObject(\"Image\", imageId)\n    sizeC = image.getSizeC()\n    channelNames = {}\n    nameDict = {}\n    for i in range(sizeC):\n        cname = request.POST.get(\"channel%d\" % i, None)\n        if cname is not None:\n            cname = smart_str(cname)[:255]  # Truncate to fit in DB\n            channelNames[\"channel%d\" % i] = cname\n            nameDict[i + 1] = cname\n    # If the 'Apply to Dataset' button was used to submit...\n    if request.POST.get(\"confirm_apply\", None) is not None:\n        # plate-123 OR dataset-234\n        parentId = request.POST.get(\"parentId\", None)\n        if parentId is not None:\n            ptype = parentId.split(\"-\")[0].title()\n            pid = long(parentId.split(\"-\")[1])\n            counts = conn.setChannelNames(ptype, [pid], nameDict, channelCount=sizeC)\n    else:\n        counts = conn.setChannelNames(\"Image\", [image.getId()], nameDict)\n    rv = {\"channelNames\": channelNames}\n    if counts:\n        rv[\"imageCount\"] = counts[\"imageCount\"]\n        rv[\"updateCount\"] = counts[\"updateCount\"]\n        return rv\n    else:\n        return {\"error\": \"No parent found to apply Channel Names\"}\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef manage_action_containers(\n    request, action, o_type=None, o_id=None, conn=None, **kwargs\n):\n    \"\"\"\n    Handles many different actions on various objects.\n\n    @param action:      \"addnewcontainer\", (creates a new Project, Dataset,\n                        Screen), \"editname\", \"savename\", \"editdescription\",\n                        \"savedescription\",  (used as GET and POST for in-line\n                        editing),\n                        \"removefromshare\", (tree P/D/I moving etc)\n                        \"delete\", \"deletemany\"      (delete objects)\n                        \"remove\" (remove tag/comment from object)\n    @param o_type:      \"dataset\", \"project\", \"image\", \"screen\", \"plate\",\n                        \"acquisition\", \"well\",\"comment\", \"file\", \"tag\",\n                        \"tagset\",\"share\", \"sharecomment\"\n    \"\"\"\n    template = None\n\n    manager = None\n    if o_type in (\n        \"dataset\",\n        \"project\",\n        \"image\",\n        \"screen\",\n        \"plate\",\n        \"acquisition\",\n        \"well\",\n        \"comment\",\n        \"file\",\n        \"tag\",\n        \"tagset\",\n    ):\n        kw = {}\n        if o_type is not None and int(o_id) > 0:\n            o_id = int(o_id)\n            kw[str(o_type)] = o_id\n        try:\n            manager = BaseContainer(conn, **kw)\n        except AttributeError as x:\n            return handlerInternalError(request, x)\n    elif o_type in (\"share\", \"sharecomment\", \"chat\"):\n        manager = BaseShare(conn, o_id)\n    else:\n        manager = BaseContainer(conn)\n\n    form = None\n    if action == \"addnewcontainer\":\n        # Used within the jsTree to add a new Project, Dataset, Tag,\n        # Tagset etc under a specified parent OR top-level\n        if not request.method == \"POST\":\n            return JsonResponse(\n                {\"Error\": \"Must use POST to create container\"}, status=405\n            )\n\n        form = ContainerForm(data=request.POST.copy())\n        if form.is_valid():\n            logger.debug(\"Create new in %s: %s\" % (o_type, str(form.cleaned_data)))\n            name = form.cleaned_data[\"name\"]\n            description = form.cleaned_data[\"description\"]\n            owner = form.cleaned_data[\"owner\"]\n\n            if o_type == \"project\" and hasattr(manager, o_type) and o_id > 0:\n                oid = manager.createDataset(name, description, owner=owner)\n            elif o_type == \"tagset\" and o_id > 0:\n                oid = manager.createTag(name, description, owner=owner)\n            elif request.POST.get(\"folder_type\") in (\n                \"project\",\n                \"screen\",\n                \"dataset\",\n                \"tag\",\n                \"tagset\",\n            ):\n                # No parent specified. We can create orphaned 'project',\n                # 'dataset' etc.\n                folder_type = request.POST.get(\"folder_type\")\n                if folder_type == \"dataset\":\n                    oid = manager.createDataset(\n                        name,\n                        description,\n                        owner=owner,\n                        img_ids=request.POST.getlist(\"image\", None),\n                    )\n                else:\n                    oid = conn.createContainer(\n                        folder_type, name, description, owner=owner\n                    )\n            else:\n                return HttpResponseServerError(\"Object does not exist\")\n            rdict = {\"bad\": \"false\", \"id\": oid}\n            return JsonResponse(rdict)\n        else:\n            d = dict()\n            for e in form.errors.items():\n                d.update({e[0]: unicode(e[1])})\n            rdict = {\"bad\": \"true\", \"errs\": d}\n            return JsonResponse(rdict)\n\n    elif action == \"edit\":\n        # form for editing Shares only\n        if o_id is None:\n            raise Http404(\"No share ID\")\n        if o_type == \"share\" and int(o_id) > 0:\n            template = \"webclient/public/share_form.html\"\n            manager.getMembers(o_id)\n            manager.getComments(o_id)\n            experimenters = list(conn.getExperimenters())\n            experimenters.sort(key=lambda x: x.getOmeName().lower())\n            initial = {\n                \"message\": manager.share.message,\n                \"expiration\": \"\",\n                \"shareMembers\": manager.membersInShare,\n                \"enable\": manager.share.active,\n                \"experimenters\": experimenters,\n            }\n            if manager.share.getExpireDate() is not None:\n                initial[\"expiration\"] = manager.share.getExpireDate().strftime(\n                    \"%Y-%m-%d\"\n                )\n            form = ShareForm(initial=initial)  # 'guests':share.guestsInShare,\n            context = {\"manager\": manager, \"form\": form}\n    elif action == \"save\":\n        # Handles submission of the 'edit' form above. TODO: not used now?\n        if not request.method == \"POST\":\n            return HttpResponseRedirect(\n                reverse(\"manage_action_containers\", args=[\"edit\", o_type, o_id])\n            )\n        if o_type == \"share\":\n            experimenters = list(conn.getExperimenters())\n            experimenters.sort(key=lambda x: x.getOmeName().lower())\n            form = ShareForm(\n                initial={\"experimenters\": experimenters}, data=request.POST.copy()\n            )\n            if form.is_valid():\n                logger.debug(\"Update share: %s\" % (str(form.cleaned_data)))\n                message = form.cleaned_data[\"message\"]\n                expiration = form.cleaned_data[\"expiration\"]\n                members = form.cleaned_data[\"members\"]\n                # guests = request.POST['guests']\n                enable = form.cleaned_data[\"enable\"]\n                host = \"%s?server=%i\" % (\n                    request.build_absolute_uri(\n                        reverse(\"load_template\", args=[\"public\"])\n                    ),\n                    int(conn.server_id),\n                )\n                manager.updateShareOrDiscussion(\n                    host, message, members, enable, expiration\n                )\n                r = \"enable\" if enable else \"disable\"\n                return HttpResponse(r)\n            else:\n                template = \"webclient/public/share_form.html\"\n                context = {\"share\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"editname\":\n        # start editing 'name' in-line\n        if hasattr(manager, o_type) and o_id > 0:\n            obj = getattr(manager, o_type)\n            template = \"webclient/ajax_form/container_form_ajax.html\"\n            if o_type == \"tag\":\n                txtValue = obj.textValue\n            else:\n                txtValue = obj.getName()\n            form = ContainerNameForm(initial={\"name\": txtValue})\n            context = {\"manager\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"savename\":\n        # Save name edit in-line\n        if not request.method == \"POST\":\n            return HttpResponseRedirect(\n                reverse(\"manage_action_containers\", args=[\"edit\", o_type, o_id])\n            )\n        if hasattr(manager, o_type) and o_id > 0:\n            form = ContainerNameForm(data=request.POST.copy())\n            if form.is_valid():\n                logger.debug(\"Update name form:\" + str(form.cleaned_data))\n                name = form.cleaned_data[\"name\"]\n                rdict = {\"bad\": \"false\", \"o_type\": o_type}\n                manager.updateName(o_type, name)\n                return JsonResponse(rdict)\n            else:\n                d = dict()\n                for e in form.errors.items():\n                    d.update({e[0]: unicode(e[1])})\n                rdict = {\"bad\": \"true\", \"errs\": d}\n                return JsonResponse(rdict)\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"editdescription\":\n        # start editing description in-line\n        if hasattr(manager, o_type) and o_id > 0:\n            obj = getattr(manager, o_type)\n            template = \"webclient/ajax_form/container_form_ajax.html\"\n            form = ContainerDescriptionForm(initial={\"description\": obj.description})\n            context = {\"manager\": manager, \"form\": form}\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"savedescription\":\n        # Save editing of description in-line\n        if not request.method == \"POST\":\n            return HttpResponseServerError(\n                \"Action '%s' on the '%s' id:%s cannot be complited\"\n                % (action, o_type, o_id)\n            )\n        if hasattr(manager, o_type) and o_id > 0:\n            form = ContainerDescriptionForm(data=request.POST.copy())\n            if form.is_valid():\n                logger.debug(\"Update name form:\" + str(form.cleaned_data))\n                description = form.cleaned_data[\"description\"]\n                manager.updateDescription(o_type, description)\n                rdict = {\"bad\": \"false\"}\n                return JsonResponse(rdict)\n            else:\n                d = dict()\n                for e in form.errors.items():\n                    d.update({e[0]: unicode(e[1])})\n                rdict = {\"bad\": \"true\", \"errs\": d}\n                return JsonResponse(rdict)\n        else:\n            return HttpResponseServerError(\"Object does not exist\")\n    elif action == \"remove\":\n        # Handles removal of comment, tag from\n        # Object etc.\n        # E.g. image-123  or image-1|image-2\n        parents = request.POST[\"parent\"]\n        try:\n            manager.remove(parents.split(\"|\"))\n        except Exception as x:\n            logger.error(traceback.format_exc())\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n            return JsonResponse(rdict)\n\n        rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"removefromshare\":\n        image_id = request.POST.get(\"source\")\n        try:\n            manager.removeImage(image_id)\n        except Exception as x:\n            logger.error(traceback.format_exc())\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n            return JsonResponse(rdict)\n        rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"delete\":\n        # Handles delete of a file attached to object.\n        child = toBoolean(request.POST.get(\"child\"))\n        anns = toBoolean(request.POST.get(\"anns\"))\n        try:\n            handle = manager.deleteItem(child, anns)\n            request.session[\"callback\"][str(handle)] = {\n                \"job_type\": \"delete\",\n                \"delmany\": False,\n                \"did\": o_id,\n                \"dtype\": o_type,\n                \"status\": \"in progress\",\n                \"error\": 0,\n                \"dreport\": _formatReport(handle),\n                \"start_time\": datetime.datetime.now(),\n            }\n            request.session.modified = True\n        except Exception as x:\n            logger.error(\n                \"Failed to delete: %r\" % {\"did\": o_id, \"dtype\": o_type}, exc_info=True\n            )\n            rdict = {\"bad\": \"true\", \"errs\": str(x)}\n        else:\n            rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    elif action == \"deletemany\":\n        # Handles multi-delete from jsTree.\n        object_ids = {\n            \"Image\": request.POST.getlist(\"image\"),\n            \"Dataset\": request.POST.getlist(\"dataset\"),\n            \"Project\": request.POST.getlist(\"project\"),\n            \"Annotation\": request.POST.getlist(\"tag\"),\n            \"Screen\": request.POST.getlist(\"screen\"),\n            \"Plate\": request.POST.getlist(\"plate\"),\n            \"Well\": request.POST.getlist(\"well\"),\n            \"PlateAcquisition\": request.POST.getlist(\"acquisition\"),\n        }\n        child = toBoolean(request.POST.get(\"child\"))\n        anns = toBoolean(request.POST.get(\"anns\"))\n        logger.debug(\n            \"Delete many: child? %s anns? %s object_ids %s\" % (child, anns, object_ids)\n        )\n        try:\n            for key, ids in object_ids.items():\n                if ids is not None and len(ids) > 0:\n                    handle = manager.deleteObjects(key, ids, child, anns)\n                    if key == \"PlateAcquisition\":\n                        key = \"Plate Run\"  # for nicer user message\n                    dMap = {\n                        \"job_type\": \"delete\",\n                        \"start_time\": datetime.datetime.now(),\n                        \"status\": \"in progress\",\n                        \"error\": 0,\n                        \"dreport\": _formatReport(handle),\n                        \"dtype\": key,\n                    }\n                    if len(ids) > 1:\n                        dMap[\"delmany\"] = len(ids)\n                        dMap[\"did\"] = ids\n                    else:\n                        dMap[\"delmany\"] = False\n                        dMap[\"did\"] = ids[0]\n                    request.session[\"callback\"][str(handle)] = dMap\n            request.session.modified = True\n        except Exception:\n            logger.error(\n                \"Failed to delete: %r\" % {\"did\": ids, \"dtype\": key}, exc_info=True\n            )\n            # Ajax error handling will allow user to submit bug report\n            raise\n        else:\n            rdict = {\"bad\": \"false\"}\n        return JsonResponse(rdict)\n    context[\"template\"] = template\n    return context\n\n\n@login_required(doConnectionCleanup=False)\ndef get_original_file(request, fileId, download=False, conn=None, **kwargs):\n    \"\"\"\n    Returns the specified original file as an http response. Used for\n    displaying text or png/jpeg etc files in browser\n    \"\"\"\n\n    # May be viewing results of a script run in a different group.\n    conn.SERVICE_OPTS.setOmeroGroup(-1)\n\n    orig_file = conn.getObject(\"OriginalFile\", fileId)\n    if orig_file is None:\n        return handlerInternalError(\n            request, \"Original File does not exist (id:%s).\" % (fileId)\n        )\n\n    rsp = ConnCleaningHttpResponse(orig_file.getFileInChunks(buf=settings.CHUNK_SIZE))\n    rsp.conn = conn\n    mimetype = orig_file.mimetype\n    if mimetype == \"text/x-python\":\n        mimetype = \"text/plain\"  # allows display in browser\n    rsp[\"Content-Type\"] = mimetype\n    rsp[\"Content-Length\"] = orig_file.getSize()\n\n    if download:\n        downloadName = orig_file.name.replace(\" \", \"_\")\n        downloadName = downloadName.replace(\",\", \".\")\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % downloadName\n    return rsp\n\n\n@login_required(doConnectionCleanup=False)\n@render_response()\ndef omero_table(request, file_id, mtype=None, conn=None, **kwargs):\n    \"\"\"\n    Download OMERO.table as CSV (streaming response) or return as HTML or json\n\n    Request parameters:\n    header: 'false' excludes the column names row if mtype is 'csv'\n    offset: table rows offset for pagination\n    limit: table rows limit for pagination\n    query: OMERO.table query for filtering rows\n\n    @param file_id:     OriginalFile ID\n    @param mtype:       None for html table or 'csv' or 'json'\n    @param conn:        BlitzGateway connection\n    \"\"\"\n\n    query = request.GET.get(\"query\", \"*\")\n    offset = get_long_or_default(request, \"offset\", 0)\n    limit = get_long_or_default(request, \"limit\", settings.PAGE)\n    iviewer_url = None\n    try:\n        iviewer_url = reverse(\"omero_iviewer_index\")\n    except NoReverseMatch:\n        pass\n\n    # Check if file exists since _table_query() doesn't check\n    file_id = long(file_id)\n    orig_file = conn.getObject(\"OriginalFile\", file_id)\n    if orig_file is None:\n        raise Http404(\"OriginalFile %s not found\" % file_id)\n\n    lazy = mtype == \"csv\"\n    context = webgateway_views._table_query(\n        request, file_id, conn=conn, query=query, offset=offset, limit=limit, lazy=lazy\n    )\n\n    if context.get(\"error\") or not context.get(\"data\"):\n        return JsonResponse(context)\n\n    # OR, return as csv or html\n    if mtype == \"csv\":\n        table_data = context.get(\"data\")\n        hide_header = request.GET.get(\"header\") == \"false\"\n\n        def csv_gen():\n            if not hide_header:\n                csv_cols = \",\".join(table_data.get(\"columns\"))\n                yield csv_cols\n            for rows in table_data.get(\"lazy_rows\"):\n                yield (\n                    \"\\n\" + \"\\n\".join([\",\".join([str(d) for d in row]) for row in rows])\n                )\n\n        downloadName = orig_file.name.replace(\" \", \"_\").replace(\",\", \".\")\n        downloadName = downloadName + \".csv\"\n\n        rsp = TableClosingHttpResponse(csv_gen(), content_type=\"text/csv\")\n        rsp.conn = conn\n        rsp.table = context.get(\"table\")\n        rsp[\"Content-Type\"] = \"application/force-download\"\n        # rsp['Content-Length'] = ann.getFileSize()\n        rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % downloadName\n        return rsp\n\n    context[\"data\"][\"name\"] = orig_file.name\n    context[\"data\"][\"path\"] = orig_file.path\n    context[\"data\"][\"id\"] = file_id\n    context[\"meta\"][\"query\"] = query\n\n    # check if offset matches an integer page number:\n    if offset == 0 or offset / limit == offset // limit:\n        context[\"meta\"][\"page\"] = (offset // limit) + 1 if offset > 0 else 1\n\n    # pagination links\n    url = reverse(\"omero_table\", args=[file_id])\n    context[\"meta\"][\"url\"] = url\n    url += \"?limit=%s\" % limit\n    if query != \"*\":\n        url += \"&query=%s\" % query\n    if (offset + limit) < context[\"meta\"][\"totalCount\"]:\n        context[\"meta\"][\"next\"] = url + \"&offset=%s\" % (offset + limit)\n    if offset > 0:\n        context[\"meta\"][\"prev\"] = url + \"&offset=%s\" % (max(0, offset - limit))\n\n    # by default, return context as JSON data\n    if mtype is None:\n        context[\"template\"] = \"webclient/annotations/omero_table.html\"\n        context[\"iviewer_url\"] = iviewer_url\n        col_types = context[\"data\"][\"column_types\"]\n        if \"ImageColumn\" in col_types:\n            context[\"image_column_index\"] = col_types.index(\"ImageColumn\")\n        if \"WellColumn\" in col_types:\n            context[\"well_column_index\"] = col_types.index(\"WellColumn\")\n        if \"RoiColumn\" in col_types:\n            context[\"roi_column_index\"] = col_types.index(\"RoiColumn\")\n        # we don't use ShapeColumn type - just check name and LongColumn type...\n        # TODO: when ShapeColumn is supported, add handling to this code\n        cnames = [n.lower() for n in context[\"data\"][\"columns\"]]\n        if \"shape\" in cnames and col_types[cnames.index(\"shape\")] == \"LongColumn\":\n            context[\"shape_column_index\"] = cnames.index(\"shape\")\n        # provide example queries - pick first DoubleColumn...\n        for idx, c_type in enumerate(col_types):\n            if c_type in (\"DoubleColumn\", \"LongColumn\"):\n                col_name = context[\"data\"][\"columns\"][idx]\n                # find first few non-empty cells...\n                vals = []\n                for row in context[\"data\"][\"rows\"]:\n                    if row[idx]:\n                        vals.append(row[idx])\n                    if len(vals) > 3:\n                        break\n                if \" \" in col_name or len(vals) < 2:\n                    # Don't support queries on columns with spaces\n                    continue\n                context[\"example_column\"] = col_name\n                context[\"example_min_value\"] = min(vals)\n                context[\"example_max_value\"] = max(vals)\n                break\n\n    return context\n\n\n@login_required(doConnectionCleanup=False)\ndef download_annotation(request, annId, conn=None, **kwargs):\n    \"\"\"Returns the file annotation as an http response for download\"\"\"\n    ann = conn.getObject(\"FileAnnotation\", annId)\n    if ann is None:\n        return handlerInternalError(\n            request, \"FileAnnotation does not exist (id:%s).\" % (annId)\n        )\n\n    rsp = ConnCleaningHttpResponse(ann.getFileInChunks(buf=settings.CHUNK_SIZE))\n    rsp.conn = conn\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    rsp[\"Content-Length\"] = ann.getFileSize()\n    rsp[\"Content-Disposition\"] = \"attachment; filename=%s\" % (\n        ann.getFileName().replace(\" \", \"_\")\n    )\n    return rsp\n\n\n@login_required()\ndef download_orig_metadata(request, imageId, conn=None, **kwargs):\n    \"\"\"Downloads the 'Original Metadata' as a text file\"\"\"\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is None:\n        raise Http404(\"No Image found with ID %s\" % imageId)\n\n    om = image.loadOriginalMetadata()\n\n    txtLines = [\"[Global Metadata]\"]\n    txtLines.extend([\"%s=%s\" % (kv[0], kv[1]) for kv in om[1]])\n\n    txtLines.append(\"[Series Metadata]\")\n    txtLines.extend([\"%s=%s\" % (kv[0], kv[1]) for kv in om[2]])\n    rspText = \"\\n\".join(txtLines)\n\n    rsp = HttpResponse(rspText)\n    rsp[\"Content-Type\"] = \"application/force-download\"\n    rsp[\"Content-Length\"] = len(rspText)\n    rsp[\"Content-Disposition\"] = \"attachment; filename=Original_Metadata.txt\"\n    return rsp\n\n\n@login_required()\n@render_response()\ndef download_placeholder(request, conn=None, **kwargs):\n    \"\"\"\n    Page displays a simple \"Preparing download...\" message and redirects to\n    the 'url'.\n    We construct the url and query string from request: 'url' and 'ids'.\n    \"\"\"\n\n    format = request.GET.get(\"format\", None)\n    if format is not None:\n        download_url = reverse(\"download_as\")\n        zipName = \"Export_as_%s\" % format\n    else:\n        download_url = reverse(\"archived_files\")\n        zipName = \"OriginalFileDownload\"\n    targetIds = request.GET.get(\"ids\")  # E.g. image-1|image-2\n    defaultName = request.GET.get(\"name\", zipName)  # default zip name\n    defaultName = os.path.basename(defaultName)  # remove path\n\n    if targetIds is None:\n        raise Http404(\"No IDs specified. E.g. ?ids=image-1|image-2\")\n\n    ids = targetIds.split(\"|\")\n\n    fileLists = []\n    fileCount = 0\n    filesTotalSize = 0\n    # If we're downloading originals, list original files so user can\n    # download individual files.\n    if format is None:\n        imgIds = []\n        wellIds = []\n        for i in ids:\n            if i.split(\"-\")[0] == \"image\":\n                imgIds.append(i.split(\"-\")[1])\n            elif i.split(\"-\")[0] == \"well\":\n                wellIds.append(i.split(\"-\")[1])\n\n        images = []\n        # Get images...\n        if imgIds:\n            images = list(conn.getObjects(\"Image\", imgIds))\n\n        if len(images) == 0:\n            raise Http404(\"No images found.\")\n\n        # Have a list of files per fileset (or per image without fileset)\n        fsIds = set()\n        fileIds = set()\n        for image in images:\n            fs = image.getFileset()\n            if fs is not None:\n                # Make sure we've not processed this fileset before.\n                if fs.id in fsIds:\n                    continue\n                fsIds.add(fs.id)\n            files = list(image.getImportedImageFiles())\n            fList = []\n            for f in files:\n                if f.id in fileIds:\n                    continue\n                fileIds.add(f.id)\n                fList.append({\"id\": f.id, \"name\": f.name, \"size\": f.getSize()})\n                filesTotalSize += f.getSize()\n            if len(fList) > 0:\n                fileLists.append(fList)\n        fileCount = sum([len(fList) for fList in fileLists])\n    else:\n        # E.g. JPEG/PNG - 1 file per image\n        fileCount = len(ids)\n\n    query = \"&\".join([_id.replace(\"-\", \"=\") for _id in ids])\n    download_url = download_url + \"?\" + query\n    if format is not None:\n        download_url = download_url + \"&format=%s\" % format\n\n    context = {\n        \"template\": \"webclient/annotations/download_placeholder.html\",\n        \"url\": download_url,\n        \"defaultName\": defaultName,\n        \"fileLists\": fileLists,\n        \"fileCount\": fileCount,\n        \"filesTotalSize\": filesTotalSize,\n    }\n    if filesTotalSize > settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE:\n        context[\"downloadTooLarge\"] = settings.MAXIMUM_MULTIFILE_DOWNLOAD_ZIP_SIZE\n    return context\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef load_calendar(request, year=None, month=None, conn=None, **kwargs):\n    \"\"\"\n    Loads the calendar which is displayed in the left panel of the history\n    page.\n    Shows current month by default. Filter by experimenter\n    \"\"\"\n\n    template = \"webclient/history/calendar.html\"\n    filter_user_id = request.session.get(\"user_id\")\n\n    if year is not None and month is not None:\n        controller = BaseCalendar(conn=conn, year=year, month=month, eid=filter_user_id)\n    else:\n        today = datetime.datetime.today()\n        controller = BaseCalendar(\n            conn=conn, year=today.year, month=today.month, eid=filter_user_id\n        )\n    controller.create_calendar()\n\n    context = {\"controller\": controller}\n\n    context[\"template\"] = template\n    return context\n\n\n@login_required(setGroupContext=True)\n@render_response()\ndef load_history(request, year, month, day, conn=None, **kwargs):\n    \"\"\"The data for a particular date that is loaded into the center panel\"\"\"\n\n    if year is None or month is None or day is None:\n        raise Http404(\"Year, month, and day are required\")\n\n    template = \"webclient/history/history_details.html\"\n\n    # get page\n    page = int(request.GET.get(\"page\", 1))\n\n    filter_user_id = request.session.get(\"user_id\")\n    controller = BaseCalendar(\n        conn=conn, year=year, month=month, day=day, eid=filter_user_id\n    )\n    controller.get_items(page)\n\n    context = {\"controller\": controller}\n    context[\"template\"] = template\n    return context\n\n\ndef getObjectUrl(conn, obj):\n    \"\"\"\n    This provides a url to browse to the specified omero.model.ObjectI P/D/I,\n    S/P, FileAnnotation etc. used to display results from the scripting\n    service\n    E.g webclient/userdata/?path=image-12601\n    If the object is a file annotation, try to browse to the parent P/D/I\n    \"\"\"\n    base_url = reverse(viewname=\"load_template\", args=[\"userdata\"])\n\n    # if we have a File Annotation, then we want our URL to be for the parent\n    # object...\n    if isinstance(obj, omero.model.FileAnnotationI):\n        fa = conn.getObject(\"Annotation\", obj.id.val)\n        for ptype in [\"project\", \"dataset\", \"image\"]:\n            links = list(fa.getParentLinks(ptype))\n            if len(links) > 0:\n                obj = links[0].parent\n                break\n\n    if obj.__class__.__name__ in (\n        \"ImageI\",\n        \"DatasetI\",\n        \"ProjectI\",\n        \"ScreenI\",\n        \"PlateI\",\n        \"WellI\",\n    ):\n        otype = obj.__class__.__name__[:-1].lower()\n        base_url += \"?show=%s-%s\" % (otype, obj.id.val)\n        return base_url\n\n\n######################\n# Activities window & Progressbar\ndef update_callback(request, cbString, **kwargs):\n    \"\"\"Update a callback handle with  key/value pairs\"\"\"\n    for key, value in kwargs.items():\n        request.session[\"callback\"][cbString][key] = value\n\n\n@login_required()\n@render_response()\ndef activities(request, conn=None, **kwargs):\n    \"\"\"\n    This refreshes callback handles (delete, scripts, chgrp etc) and provides\n    html to update Activities window & Progressbar.\n    The returned html contains details for ALL callbacks in web session,\n    regardless of their status.\n    We also add counts of jobs, failures and 'in progress' to update status\n    bar.\n    \"\"\"\n\n    in_progress = 0\n    failure = 0\n    new_results = []\n    _purgeCallback(request)\n\n    # If we have a jobId (not added to request.session) just process it...\n    # ONLY used for chgrp/chown dry-run.\n    jobId = request.GET.get(\"jobId\", None)\n    if jobId is not None:\n        jobId = str(jobId)\n        try:\n            prx = omero.cmd.HandlePrx.checkedCast(conn.c.ic.stringToProxy(jobId))\n            status = prx.getStatus()\n            logger.debug(\"job status: %s\", status)\n            rsp = prx.getResponse()\n            if rsp is not None:\n                rv = graphResponseMarshal(conn, rsp)\n                rv[\"finished\"] = True\n            else:\n                rv = {\"finished\": False}\n            rv[\"status\"] = {\n                \"currentStep\": status.currentStep,\n                \"steps\": status.steps,\n                \"startTime\": status.startTime,\n                \"stopTime\": status.stopTime,\n            }\n        except IceException:\n            rv = {\"finished\": True}\n        return rv\n\n    elif request.method == \"DELETE\":\n        try:\n            json_data = json.loads(request.body)\n        except TypeError:\n            # for Python 3.5\n            json_data = json.loads(bytes_to_native_str(request.body))\n        jobId = json_data.get(\"jobId\", None)\n        if jobId is not None:\n            jobId = str(jobId)\n            rv = {\"jobId\": jobId}\n            try:\n                prx = omero.cmd.HandlePrx.checkedCast(conn.c.ic.stringToProxy(jobId))\n                status = prx.getStatus()\n                logger.debug(\"pre-cancel() job status: %s\", status)\n                rv[\"status\"] = {\n                    \"currentStep\": status.currentStep,\n                    \"steps\": status.steps,\n                    \"startTime\": status.startTime,\n                    \"stopTime\": status.stopTime,\n                }\n                prx.cancel()\n            except omero.LockTimeout:\n                # expected that it will take > 5 seconds to cancel\n                logger.info(\"Timeout on prx.cancel()\")\n        return rv\n\n    # test each callback for failure, errors, completion, results etc\n    for cbString in request.session.get(\"callback\").keys():\n        callbackDict = request.session[\"callback\"][cbString]\n        job_type = callbackDict[\"job_type\"]\n\n        status = callbackDict[\"status\"]\n        if status == \"failed\":\n            failure += 1\n\n        request.session.modified = True\n\n        # update chgrp / chown\n        if job_type in (\"chgrp\", \"chown\"):\n            if status not in (\"failed\", \"finished\"):\n                rsp = None\n                try:\n                    prx = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    rsp = prx.getResponse()\n                    close_handle = False\n                    try:\n                        # if response is None, then we're still in progress,\n                        # otherwise...\n                        if rsp is not None:\n                            close_handle = True\n                            new_results.append(cbString)\n                            if isinstance(rsp, omero.cmd.ERR):\n                                rsp_params = \", \".join(\n                                    [\n                                        \"%s: %s\" % (k, v)\n                                        for k, v in rsp.parameters.items()\n                                    ]\n                                )\n                                logger.error(\n                                    \"%s failed with: %s\" % (job_type, rsp_params)\n                                )\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"failed\",\n                                    report=\"%s %s\" % (rsp.name, rsp_params),\n                                    error=1,\n                                )\n                            elif isinstance(rsp, omero.cmd.OK):\n                                update_callback(request, cbString, status=\"finished\")\n                        else:\n                            in_progress += 1\n                    finally:\n                        prx.close(close_handle)\n                except Exception:\n                    logger.info(\n                        \"Activities %s handle not found: %s\" % (job_type, cbString)\n                    )\n                    continue\n        elif job_type == \"send_email\":\n            if status not in (\"failed\", \"finished\"):\n                rsp = None\n                try:\n                    prx = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    callback = omero.callbacks.CmdCallbackI(\n                        conn.c, prx, foreground_poll=True\n                    )\n                    rsp = callback.getResponse()\n                    close_handle = False\n                    try:\n                        # if response is None, then we're still in progress,\n                        # otherwise...\n                        if rsp is not None:\n                            close_handle = True\n                            new_results.append(cbString)\n\n                            if isinstance(rsp, omero.cmd.ERR):\n                                rsp_params = \", \".join(\n                                    [\n                                        \"%s: %s\" % (k, v)\n                                        for k, v in rsp.parameters.items()\n                                    ]\n                                )\n                                logger.error(\"send_email failed with: %s\" % rsp_params)\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"failed\",\n                                    report={\"error\": rsp_params},\n                                    error=1,\n                                )\n                            else:\n                                total = (\n                                    rsp.success\n                                    + len(rsp.invalidusers)\n                                    + len(rsp.invalidemails)\n                                )\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    status=\"finished\",\n                                    rsp={\"success\": rsp.success, \"total\": total},\n                                )\n                                if (\n                                    len(rsp.invalidusers) > 0\n                                    or len(rsp.invalidemails) > 0\n                                ):\n                                    invalidusers = [\n                                        e.getFullName()\n                                        for e in list(\n                                            conn.getObjects(\n                                                \"Experimenter\", rsp.invalidusers\n                                            )\n                                        )\n                                    ]\n                                    update_callback(\n                                        request,\n                                        cbString,\n                                        report={\n                                            \"invalidusers\": invalidusers,\n                                            \"invalidemails\": rsp.invalidemails,\n                                        },\n                                    )\n                        else:\n                            in_progress += 1\n                    finally:\n                        callback.close(close_handle)\n                except Exception:\n                    logger.error(traceback.format_exc())\n                    logger.info(\"Activities send_email handle not found: %s\" % cbString)\n\n        # update delete\n        elif job_type == \"delete\":\n            if status not in (\"failed\", \"finished\"):\n                try:\n                    handle = omero.cmd.HandlePrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                    cb = omero.callbacks.CmdCallbackI(\n                        conn.c, handle, foreground_poll=True\n                    )\n                    rsp = cb.getResponse()\n                    close_handle = False\n                    try:\n                        if not rsp:  # Response not available\n                            update_callback(\n                                request,\n                                cbString,\n                                error=0,\n                                status=\"in progress\",\n                                dreport=_formatReport(handle),\n                            )\n                            in_progress += 1\n                        else:  # Response available\n                            close_handle = True\n                            new_results.append(cbString)\n                            rsp = cb.getResponse()\n                            err = isinstance(rsp, omero.cmd.ERR)\n                            if err:\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    error=1,\n                                    status=\"failed\",\n                                    dreport=_formatReport(handle),\n                                )\n                                failure += 1\n                            else:\n                                update_callback(\n                                    request,\n                                    cbString,\n                                    error=0,\n                                    status=\"finished\",\n                                    dreport=_formatReport(handle),\n                                )\n                    finally:\n                        cb.close(close_handle)\n                except Ice.ObjectNotExistException:\n                    update_callback(\n                        request, cbString, error=0, status=\"finished\", dreport=None\n                    )\n                except Exception as x:\n                    logger.error(traceback.format_exc())\n                    logger.error(\"Status job '%s'error:\" % cbString)\n                    update_callback(\n                        request, cbString, error=1, status=\"failed\", dreport=str(x)\n                    )\n                    failure += 1\n\n        # update scripts\n        elif job_type == \"script\":\n            # if error on runScript, the cbString is not a ProcessCallback...\n            if not cbString.startswith(\"ProcessCallback\"):\n                continue  # ignore\n            if status not in (\"failed\", \"finished\"):\n                logger.info(\"Check callback on script: %s\" % cbString)\n                try:\n                    proc = omero.grid.ScriptProcessPrx.checkedCast(\n                        conn.c.ic.stringToProxy(cbString)\n                    )\n                except IceException:\n                    update_callback(\n                        request,\n                        cbString,\n                        status=\"failed\",\n                        Message=\"No process found for job\",\n                        error=1,\n                    )\n                    continue\n                cb = omero.scripts.ProcessCallbackI(conn.c, proc)\n                # check if we get something back from the handle...\n                if cb.block(0):  # ms.\n                    cb.close()\n                    try:\n                        # we can only retrieve this ONCE - must save results\n                        results = proc.getResults(0, conn.SERVICE_OPTS)\n                        update_callback(request, cbString, status=\"finished\")\n                        new_results.append(cbString)\n                    except Exception:\n                        update_callback(\n                            request,\n                            cbString,\n                            status=\"finished\",\n                            Message=\"Failed to get results\",\n                        )\n                        logger.info(\"Failed on proc.getResults() for OMERO.script\")\n                        continue\n                    # value could be rstring, rlong, robject\n                    rMap = {}\n                    for key, value in results.items():\n                        v = value.getValue()\n                        if key in (\"stdout\", \"stderr\", \"Message\"):\n                            if key in (\"stderr\", \"stdout\"):\n                                # just save the id of original file\n                                v = v.id.val\n                            update_kwargs = {key: v}\n                            update_callback(request, cbString, **update_kwargs)\n                        else:\n                            if hasattr(v, \"id\"):\n                                # do we have an object (ImageI,\n                                # FileAnnotationI etc)\n                                obj_data = {\n                                    \"id\": v.id.val,\n                                    \"type\": v.__class__.__name__[:-1],\n                                }\n                                obj_data[\"browse_url\"] = getObjectUrl(conn, v)\n                                if v.isLoaded() and hasattr(v, \"file\"):\n                                    # try:\n                                    mimetypes = {\n                                        \"image/png\": \"png\",\n                                        \"image/jpeg\": \"jpeg\",\n                                        \"text/plain\": \"text\",\n                                    }\n                                    if v.file.mimetype.val in mimetypes:\n                                        obj_data[\"fileType\"] = mimetypes[\n                                            v.file.mimetype.val\n                                        ]\n                                        obj_data[\"fileId\"] = v.file.id.val\n                                    obj_data[\"name\"] = v.file.name.val\n                                    # except Exception:\n                                    #    pass\n                                if v.isLoaded() and hasattr(v, \"name\"):\n                                    # E.g Image, OriginalFile etc\n                                    name = unwrap(v.name)\n                                    if name is not None:\n                                        # E.g. FileAnnotation has null name\n                                        obj_data[\"name\"] = name\n                                rMap[key] = obj_data\n                            else:\n                                rMap[key] = unwrap(v)\n                    update_callback(request, cbString, results=rMap)\n                else:\n                    in_progress += 1\n\n    # having updated the request.session, we can now prepare the data for http\n    # response\n    rv = {}\n    for cbString in request.session.get(\"callback\").keys():\n        # make a copy of the map in session, so that we can replace non\n        # json-compatible objects, without modifying session\n        rv[cbString] = copy.copy(request.session[\"callback\"][cbString])\n\n    # return json (used for testing)\n    if \"template\" in kwargs and kwargs[\"template\"] == \"json\":\n        for cbString in request.session.get(\"callback\").keys():\n            rv[cbString][\"start_time\"] = str(\n                request.session[\"callback\"][cbString][\"start_time\"]\n            )\n        rv[\"inprogress\"] = in_progress\n        rv[\"failure\"] = failure\n        rv[\"jobs\"] = len(request.session[\"callback\"])\n        return JsonResponse(rv)  # json\n\n    jobs = []\n    new_errors = False\n    for key, data in rv.items():\n        # E.g. key: ProcessCallback/39f77932-c447-40d8-8f99-910b5a531a25 -t:tcp -h 10.211.55.2 -p 54727:tcp -h 10.37.129.2 -p 54727:tcp -h 10.12.2.21 -p 54727  # noqa\n        # create id we can use as html id,\n        # E.g. 39f77932-c447-40d8-8f99-910b5a531a25\n        if len(key.split(\" \")) > 0:\n            htmlId = key.split(\" \")[0]\n            if len(htmlId.split(\"/\")) > 1:\n                htmlId = htmlId.split(\"/\")[1]\n        rv[key][\"id\"] = htmlId\n        rv[key][\"key\"] = key\n        if key in new_results:\n            rv[key][\"new\"] = True\n            if \"error\" in data and data[\"error\"] > 0:\n                new_errors = True\n        jobs.append(rv[key])\n\n    jobs.sort(key=lambda x: x[\"start_time\"], reverse=True)\n    context = {\n        \"sizeOfJobs\": len(request.session[\"callback\"]),\n        \"jobs\": jobs,\n        \"inprogress\": in_progress,\n        \"new_results\": len(new_results),\n        \"new_errors\": new_errors,\n        \"failure\": failure,\n    }\n\n    context[\"template\"] = \"webclient/activities/activitiesContent.html\"\n    return context\n\n\n@login_required()\ndef activities_update(request, action, **kwargs):\n    \"\"\"\n    If the above 'action' == 'clean' then we clear jobs from\n    request.session['callback'] either a single job (if 'jobKey' is specified\n    in POST) or all jobs (apart from those in progress)\n    \"\"\"\n\n    request.session.modified = True\n\n    if action == \"clean\":\n        if \"jobKey\" in request.POST:\n            jobId = request.POST.get(\"jobKey\")\n            rv = {}\n            if jobId in request.session[\"callback\"]:\n                del request.session[\"callback\"][jobId]\n                request.session.modified = True\n                rv[\"removed\"] = True\n            else:\n                rv[\"removed\"] = False\n            return JsonResponse(rv)\n        else:\n            jobs = list(request.session[\"callback\"].items())\n            for key, data in jobs:\n                if data[\"status\"] != \"in progress\":\n                    del request.session[\"callback\"][key]\n    return HttpResponse(\"OK\")\n\n\n##############################################################################\n# User Photo\n\n\n@login_required()\ndef avatar(request, oid=None, conn=None, **kwargs):\n    \"\"\"Returns the experimenter's photo\"\"\"\n    photo = conn.getExperimenterPhoto(oid)\n    return HttpResponse(photo, content_type=\"image/jpeg\")\n\n\n##############################################################################\n# webgateway extention\n\n\n@login_required()\ndef image_viewer(request, iid, share_id=None, **kwargs):\n    \"\"\"Delegates to webgateway, using share connection if appropriate\"\"\"\n    kwargs[\"viewport_server\"] = (\n        share_id is not None and reverse(\"webindex\") + share_id or reverse(\"webindex\")\n    )\n    # remove any trailing slash\n    kwargs[\"viewport_server\"] = kwargs[\"viewport_server\"].rstrip(\"/\")\n    return webgateway_views.full_viewer(request, iid, **kwargs)\n\n\n##############################################################################\n# scripting service....\n@login_required()\n@render_response()\ndef list_scripts(request, conn=None, **kwargs):\n    \"\"\"\n    List the available scripts - Just officical scripts for now\n\n    If all scripts are under a single top-level directory, this is\n    removed by default. To prevent this, use ?full_path=true\n    \"\"\"\n    scriptService = conn.getScriptService()\n    scripts = scriptService.getScripts()\n\n    # group scripts into 'folders' (path), named by parent folder name\n    scriptMenu = {}\n    scripts_to_ignore = (\n        request.session.get(\"server_settings\", {})\n        .get(\"scripts_to_ignore\", \"\")\n        .split(\",\")\n    )\n    for s in scripts:\n        scriptId = s.id.val\n        path = s.path.val\n        name = s.name.val\n        fullpath = os.path.join(path, name)\n        if fullpath in scripts_to_ignore:\n            logger.info(\"Ignoring script %r\" % fullpath)\n            continue\n\n        # We want to build a hierarchical <ul> <li> structure\n        # Each <ul> is a {}, each <li> is either a script 'name': <id> or\n        # directory 'name': {ul}\n\n        ul = scriptMenu\n        dirs = fullpath.split(os.path.sep)\n        for li, d in enumerate(dirs):\n            if len(d) == 0:\n                continue\n            if d not in ul:\n                # if last component in path:\n                if li + 1 == len(dirs):\n                    ul[d] = scriptId\n                else:\n                    ul[d] = {}\n            ul = ul[d]\n\n    # convert <ul> maps into lists and sort\n\n    def ul_to_list(ul):\n        dir_list = []\n        for name, value in ul.items():\n            if isinstance(value, dict):\n                # value is a directory\n                dir_list.append({\"name\": name, \"ul\": ul_to_list(value)})\n            else:\n                dir_list.append({\"name\": name, \"id\": value})\n        dir_list.sort(key=lambda x: x[\"name\"].lower())\n        return dir_list\n\n    scriptList = ul_to_list(scriptMenu)\n\n    # If we have a single top-level directory, we can skip it\n    if not request.GET.get(\"full_path\") and len(scriptList) == 1:\n        scriptList = scriptList[0][\"ul\"]\n\n    return scriptList\n\n\n@login_required()\n@render_response()\ndef script_ui(request, scriptId, conn=None, **kwargs):\n    \"\"\"\n    Generates an html form for the parameters of a defined script.\n    \"\"\"\n    scriptService = conn.getScriptService()\n\n    try:\n        params = scriptService.getParams(long(scriptId))\n    except Exception as ex:\n        if ex.message.lower().startswith(\"no processor available\"):\n            return {\n                \"template\": \"webclient/scripts/no_processor.html\",\n                \"scriptId\": scriptId,\n            }\n        raise ex\n    if params is None:\n        return HttpResponse()\n\n    paramData = {}\n\n    paramData[\"id\"] = long(scriptId)\n    paramData[\"name\"] = params.name.replace(\"_\", \" \")\n    paramData[\"description\"] = params.description\n    paramData[\"authors\"] = \", \".join([a for a in params.authors])\n    paramData[\"contact\"] = params.contact\n    paramData[\"version\"] = params.version\n    paramData[\"institutions\"] = \", \".join([i for i in params.institutions])\n\n    inputs = []  # use a list so we can sort by 'grouping'\n    Data_TypeParam = None\n    IDsParam = None\n    for key, param in params.inputs.items():\n        i = {}\n        i[\"name\"] = key.replace(\"_\", \" \")\n        i[\"key\"] = key\n        if not param.optional:\n            i[\"required\"] = True\n        i[\"description\"] = param.description\n        if param.min:\n            i[\"min\"] = str(param.min.getValue())\n        if param.max:\n            i[\"max\"] = str(param.max.getValue())\n        if param.values:\n            i[\"options\"] = [v.getValue() for v in param.values.getValue()]\n        if param.useDefault:\n            i[\"default\"] = unwrap(param.prototype)\n            if isinstance(i[\"default\"], omero.model.IObject):\n                i[\"default\"] = None\n        pt = unwrap(param.prototype)\n        if pt.__class__.__name__ == \"dict\":\n            i[\"map\"] = True\n        elif pt.__class__.__name__ == \"list\":\n            i[\"list\"] = True\n            if \"default\" in i:\n                i[\"default\"] = \",\".join([str(d) for d in i[\"default\"]])\n        elif isinstance(pt, bool):\n            i[\"boolean\"] = True\n        elif isinstance(pt, int) or isinstance(pt, long):\n            # will stop the user entering anything other than numbers.\n            i[\"number\"] = \"number\"\n        elif isinstance(pt, float):\n            i[\"number\"] = \"float\"\n\n        # if we got a value for this key in the page request, use this as\n        # default\n        if request.GET.get(key, None) is not None:\n            i[\"default\"] = request.GET.get(key, None)\n\n        # E.g  \"\"  (string) or [0] (int list) or 0.0 (float)\n        i[\"prototype\"] = unwrap(param.prototype)\n        i[\"grouping\"] = param.grouping\n        inputs.append(i)\n\n        if key == \"IDs\":\n            IDsParam = i  # remember these...\n        if key == \"Data_Type\":\n            Data_TypeParam = i\n    inputs.sort(key=lambda i: i[\"grouping\"])\n\n    # if we have Data_Type param - use the request parameters to populate IDs\n    if (\n        Data_TypeParam is not None\n        and IDsParam is not None\n        and \"options\" in Data_TypeParam\n    ):\n        IDsParam[\"default\"] = \"\"\n        for dtype in Data_TypeParam[\"options\"]:\n            if request.GET.get(dtype, None) is not None:\n                Data_TypeParam[\"default\"] = dtype\n                IDsParam[\"default\"] = request.GET.get(dtype, \"\")\n                break  # only use the first match\n        # if we've not found a match, check whether we have \"Well\" selected\n        if len(IDsParam[\"default\"]) == 0 and request.GET.get(\"Well\", None) is not None:\n            if \"Image\" in Data_TypeParam[\"options\"]:\n                wellIds = [long(j) for j in request.GET.get(\"Well\", None).split(\",\")]\n                wellIdx = 0\n                try:\n                    wellIdx = int(request.GET.get(\"Index\", 0))\n                except Exception:\n                    pass\n                wells = conn.getObjects(\"Well\", wellIds)\n                imgIds = [str(w.getImage(wellIdx).getId()) for w in wells]\n                Data_TypeParam[\"default\"] = \"Image\"\n                IDsParam[\"default\"] = \",\".join(imgIds)\n\n    # try to determine hierarchies in the groupings - ONLY handle 1 hierarchy\n    # level now (not recursive!)\n    for i in range(len(inputs)):\n        if len(inputs) <= i:\n            # we may remove items from inputs as we go - need to check\n            break\n        param = inputs[i]\n        grouping = param[\"grouping\"]  # E.g  03\n        param[\"children\"] = list()\n        while len(inputs) > i + 1:\n            nextGrp = inputs[i + 1][\"grouping\"]  # E.g. 03.1\n            if nextGrp.split(\".\")[0] == grouping:\n                param[\"children\"].append(inputs[i + 1])\n                inputs.pop(i + 1)\n            else:\n                break\n\n    paramData[\"inputs\"] = inputs\n\n    return {\n        \"template\": \"webclient/scripts/script_ui.html\",\n        \"paramData\": paramData,\n        \"scriptId\": scriptId,\n    }\n\n\n@login_required()\n@render_response()\ndef figure_script(request, scriptName, conn=None, **kwargs):\n    \"\"\"\n    Show a UI for running figure scripts\n    \"\"\"\n\n    imageIds = request.GET.get(\"Image\", None)  # comma - delimited list\n    datasetIds = request.GET.get(\"Dataset\", None)\n    wellIds = request.GET.get(\"Well\", None)\n\n    if wellIds is not None:\n        wellIds = [long(i) for i in wellIds.split(\",\")]\n        wells = conn.getObjects(\"Well\", wellIds)\n        wellIdx = getIntOrDefault(request, \"Index\", 0)\n        imageIds = [str(w.getImage(wellIdx).getId()) for w in wells]\n        imageIds = \",\".join(imageIds)\n    if imageIds is None and datasetIds is None:\n        return HttpResponse(\n            \"Need to specify /?Image=1,2 or /?Dataset=1,2 or /?Well=1,2\"\n        )\n\n    def validateIds(dtype, ids):\n        ints = [int(oid) for oid in ids.split(\",\")]\n        validObjs = {}\n        for obj in conn.getObjects(dtype, ints):\n            validObjs[obj.id] = obj\n        filteredIds = [iid for iid in ints if iid in validObjs.keys()]\n        if len(filteredIds) == 0:\n            raise Http404(\"No %ss found with IDs %s\" % (dtype, ids))\n        else:\n            # Now we can specify group context - All should be same group\n            gid = list(validObjs.values())[0].getDetails().group.id.val\n            conn.SERVICE_OPTS.setOmeroGroup(gid)\n        return filteredIds, validObjs\n\n    context = {}\n\n    if imageIds is not None:\n        imageIds, validImages = validateIds(\"Image\", imageIds)\n        context[\"idString\"] = \",\".join([str(i) for i in imageIds])\n        context[\"dtype\"] = \"Image\"\n    if datasetIds is not None:\n        datasetIds, validDatasets = validateIds(\"Dataset\", datasetIds)\n        context[\"idString\"] = \",\".join([str(i) for i in datasetIds])\n        context[\"dtype\"] = \"Dataset\"\n\n    if scriptName == \"SplitView\":\n        scriptPath = \"/omero/figure_scripts/Split_View_Figure.py\"\n        template = \"webclient/scripts/split_view_figure.html\"\n        # Lookup Tags & Datasets (for row labels)\n        imgDict = []  # A list of data about each image.\n        for iId in imageIds:\n            data = {\"id\": iId}\n            img = validImages[iId]\n            data[\"name\"] = img.getName()\n            tags = [\n                ann.getTextValue()\n                for ann in img.listAnnotations()\n                if ann._obj.__class__ == omero.model.TagAnnotationI\n            ]\n            data[\"tags\"] = tags\n            data[\"datasets\"] = [d.getName() for d in img.listParents()]\n            imgDict.append(data)\n\n        # Use the first image as a reference\n        image = validImages[imageIds[0]]\n        context[\"imgDict\"] = imgDict\n        context[\"image\"] = image\n        context[\"channels\"] = image.getChannels()\n\n    elif scriptName == \"Thumbnail\":\n        scriptPath = \"/omero/figure_scripts/Thumbnail_Figure.py\"\n        template = \"webclient/scripts/thumbnail_figure.html\"\n\n        def loadImageTags(imageIds):\n            tagLinks = conn.getAnnotationLinks(\"Image\", parent_ids=imageIds)\n            linkMap = {}  # group tags. {imageId: [tags]}\n            tagMap = {}\n            for iId in imageIds:\n                linkMap[iId] = []\n            for link in tagLinks:\n                c = link.getChild()\n                if c._obj.__class__ == omero.model.TagAnnotationI:\n                    tagMap[c.id] = c\n                    linkMap[link.getParent().id].append(c)\n            imageTags = []\n            for iId in imageIds:\n                imageTags.append({\"id\": iId, \"tags\": linkMap[iId]})\n            tags = []\n            for tId, t in tagMap.items():\n                tags.append(t)\n            return imageTags, tags\n\n        thumbSets = []  # multiple collections of images\n        tags = []\n        figureName = \"Thumbnail_Figure\"\n        if datasetIds is not None:\n            for d in conn.getObjects(\"Dataset\", datasetIds):\n                imgIds = [i.id for i in d.listChildren()]\n                imageTags, ts = loadImageTags(imgIds)\n                thumbSets.append({\"name\": d.getName(), \"imageTags\": imageTags})\n                tags.extend(ts)\n            figureName = thumbSets[0][\"name\"]\n        else:\n            imageTags, ts = loadImageTags(imageIds)\n            thumbSets.append({\"name\": \"images\", \"imageTags\": imageTags})\n            tags.extend(ts)\n            parent = conn.getObject(\"Image\", imageIds[0]).getParent()\n            figureName = parent.getName() or \"Thumbnail Figure\"\n            context[\"parent_id\"] = parent.getId()\n        uniqueTagIds = set()  # remove duplicates\n        uniqueTags = []\n        for t in tags:\n            if t.id not in uniqueTagIds:\n                uniqueTags.append(t)\n                uniqueTagIds.add(t.id)\n        uniqueTags.sort(key=lambda x: x.getTextValue().lower())\n        context[\"thumbSets\"] = thumbSets\n        context[\"tags\"] = uniqueTags\n        context[\"figureName\"] = figureName.replace(\" \", \"_\")\n\n    elif scriptName == \"MakeMovie\":\n        scriptPath = \"/omero/export_scripts/Make_Movie.py\"\n        template = \"webclient/scripts/make_movie.html\"\n\n        # expect to run on a single image at a time\n        image = conn.getObject(\"Image\", imageIds[0])\n        # remove extension (if 3 chars or less)\n        movieName = image.getName().rsplit(\".\", 1)\n        if len(movieName) > 1 and len(movieName[1]) > 3:\n            movieName = \".\".join(movieName)\n        else:\n            movieName = movieName[0]\n        # make sure name is not a path\n        context[\"movieName\"] = os.path.basename(movieName)\n        chs = []\n        for c in image.getChannels():\n            chs.append(\n                {\n                    \"active\": c.isActive(),\n                    \"color\": c.getColor().getHtml(),\n                    \"label\": c.getLabel(),\n                }\n            )\n        context[\"channels\"] = chs\n        context[\"sizeT\"] = image.getSizeT()\n        context[\"sizeZ\"] = image.getSizeZ()\n\n    scriptService = conn.getScriptService()\n    scriptId = scriptService.getScriptID(scriptPath)\n    if scriptId < 0:\n        raise AttributeError(\"No script found for path '%s'\" % scriptPath)\n\n    context[\"template\"] = template\n    context[\"scriptId\"] = scriptId\n    return context\n\n\n@login_required()\n@render_response()\ndef fileset_check(request, action, conn=None, **kwargs):\n    \"\"\"\n    Check whether Images / Datasets etc contain partial Multi-image filesets.\n    Used by chgrp or delete dialogs to test whether we can perform this\n    'action'.\n    \"\"\"\n    dtypeIds = {}\n    for dtype in (\"Image\", \"Dataset\", \"Project\"):\n        ids = request.GET.get(dtype, None)\n        if ids is not None:\n            dtypeIds[dtype] = [int(i) for i in ids.split(\",\")]\n    splitFilesets = conn.getContainerService().getImagesBySplitFilesets(\n        dtypeIds, None, conn.SERVICE_OPTS\n    )\n\n    splits = []\n    for fsId, splitIds in splitFilesets.items():\n        splits.append(\n            {\n                \"id\": fsId,\n                \"attempted_iids\": splitIds[True],\n                \"blocking_iids\": splitIds[False],\n            }\n        )\n\n    context = {\"split_filesets\": splits}\n    context[\"action\"] = action\n    if action == \"chgrp\":\n        context[\"action\"] = \"move\"\n    context[\"template\"] = \"webclient/activities/\" \"fileset_check_dialog_content.html\"\n\n    return context\n\n\ndef getAllObjects(\n    conn, project_ids, dataset_ids, image_ids, screen_ids, plate_ids, experimenter_id\n):\n    \"\"\"\n    Given a list of containers and images, calculate all the descendants\n    and necessary siblings (for any filesets)\n    \"\"\"\n    # TODO Handle None inputs, maybe add defaults\n    params = omero.sys.ParametersI()\n    qs = conn.getQueryService()\n\n    project_ids = set(project_ids)\n    dataset_ids = set(dataset_ids)\n    image_ids = set(image_ids)\n    fileset_ids = set([])\n    plate_ids = set(plate_ids)\n    screen_ids = set(screen_ids)\n\n    # Get any datasets for projects\n    if project_ids:\n        params.map = {}\n        params.map[\"pids\"] = rlist([rlong(x) for x in list(project_ids)])\n        q = \"\"\"\n            select pdlink.child.id\n            from ProjectDatasetLink pdlink\n            where pdlink.parent.id in (:pids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            dataset_ids.add(e[0].val)\n\n    # Get any plates for screens\n    if screen_ids:\n        params.map = {}\n        params.map[\"sids\"] = rlist([rlong(x) for x in screen_ids])\n        q = \"\"\"\n            select splink.child.id\n            from ScreenPlateLink splink\n            where splink.parent.id in (:sids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            plate_ids.add(e[0].val)\n\n    # Get any images for datasets\n    if dataset_ids:\n        params.map = {}\n        params.map[\"dids\"] = rlist([rlong(x) for x in dataset_ids])\n        q = \"\"\"\n            select dilink.child.id,\n                   dilink.child.fileset.id\n            from DatasetImageLink dilink\n            where dilink.parent.id in (:dids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n            # Some images in Dataset may not have fileset\n            if e[1] is not None:\n                fileset_ids.add(e[1].val)\n\n    # Get any images for plates\n    # TODO Seemed no need to add the filesets for plates as it isn't possible\n    # to link it from outside of its plate. This may be true for the client,\n    # but it certainly isn't true for the model so maybe allow this to also get\n    # filesets\n    if plate_ids:\n        params.map = {}\n        params.map[\"plids\"] = rlist([rlong(x) for x in plate_ids])\n        q = \"\"\"\n            select ws.image.id\n            from WellSample ws\n            join ws.plateAcquisition pa\n            where pa.plate.id in (:plids)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n\n    # Get any extra images due to filesets\n    if fileset_ids:\n        params.map = {}\n        params.map[\"fsids\"] = rlist([rlong(x) for x in fileset_ids])\n        q = \"\"\"\n            select image.id\n            from Image image\n            left outer join image.datasetLinks dilink\n            where image.fileset.id in (select fs.id\n                                       from Image im\n                                       join im.fileset fs\n                                       where fs.id in (:fsids)\n                                       group by fs.id\n                                       having count(im.id)>1)\n            \"\"\"\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            image_ids.add(e[0].val)\n\n    # Get any additional datasets that may need updating as their children have\n    # been snatched.\n    # TODO Need to differentiate which orphaned directories need refreshing\n    extra_dataset_ids = set([])\n    extra_orphaned = False\n    if image_ids:\n        params.map = {\n            \"iids\": rlist([rlong(x) for x in image_ids]),\n        }\n\n        exclude_datasets = \"\"\n        if dataset_ids:\n            params.map[\"dids\"] = rlist([rlong(x) for x in dataset_ids])\n            # Make sure to allow parentless results as well as those\n            # that do not match a dataset being removed\n            exclude_datasets = \"\"\"\n                               and (\n                                    dilink.parent.id not in (:dids)\n                                    or dilink.parent.id = null\n                                   )\n                               \"\"\"\n\n        q = (\n            \"\"\"\n            select distinct dilink.parent.id\n            from Image image\n            left outer join image.datasetLinks dilink\n            where image.id in (:iids)\n            %s\n            and (select count(dilink2.child.id)\n                 from DatasetImageLink dilink2\n                 where dilink2.parent.id = dilink.parent.id\n                 and dilink2.child.id not in (:iids)) = 0\n            \"\"\"\n            % exclude_datasets\n        )\n\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            if e:\n                extra_dataset_ids.add(e[0].val)\n            else:\n                extra_orphaned = True\n\n    # Get any additional projects that may need updating as their children have\n    # been snatched. There is no need to check for orphans because if a dataset\n    # is being removed from somewhere else, it can not exist as an orphan.\n    extra_project_ids = set([])\n    if dataset_ids:\n        params.map = {\"dids\": rlist([rlong(x) for x in dataset_ids])}\n\n        exclude_projects = \"\"\n        if project_ids:\n            params.map[\"pids\"] = rlist([rlong(x) for x in project_ids])\n            exclude_projects = \"and pdlink.parent.id not in (:pids)\"\n\n        q = (\n            \"\"\"\n            select distinct pdlink.parent.id\n            from ProjectDatasetLink pdlink\n            where pdlink.child.id in (:dids)\n            %s\n            and (select count(pdlink2.child.id)\n                 from ProjectDatasetLink pdlink2\n                 where pdlink2.parent.id = pdlink.parent.id\n                 and pdlink2.child.id not in (:dids)) = 0\n            \"\"\"\n            % exclude_projects\n        )\n\n        for e in qs.projection(q, params, conn.SERVICE_OPTS):\n            extra_project_ids.add(e[0].val)\n\n    # We now have the complete list of objects that will change group\n    # We also have an additional list of datasets/projects that may have had\n    # snatched children and thus may need updating in the client if the\n    # dataset/project has gone from N to 0 children\n\n    result = {\n        # These objects are completely removed\n        \"remove\": {\n            \"project\": list(project_ids),\n            \"dataset\": list(dataset_ids),\n            \"screen\": list(screen_ids),\n            \"plate\": list(plate_ids),\n            \"image\": list(image_ids),\n        },\n        # These objects now have no children\n        \"childless\": {\n            \"project\": list(extra_project_ids),\n            \"dataset\": list(extra_dataset_ids),\n            \"orphaned\": extra_orphaned,\n        },\n    }\n    return result\n\n\n@require_POST\n@login_required()\ndef chgrpDryRun(request, conn=None, **kwargs):\n    return dryRun(request, action=\"chgrp\", conn=conn, **kwargs)\n\n\n@require_POST\n@login_required()\ndef dryRun(request, action, conn=None, **kwargs):\n    \"\"\"Submit chgrp or chown dry-run\"\"\"\n    targetObjects = {}\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\", \"Fileset\"]\n    for dtype in dtypes:\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            targetObjects[dtype] = obj_ids\n\n    if action == \"chgrp\":\n        target_id = getIntOrDefault(request, \"group_id\", None)\n    elif action == \"chown\":\n        target_id = getIntOrDefault(request, \"owner_id\", None)\n    handle = conn.submitDryRun(action, targetObjects, target_id)\n    jobId = str(handle)\n    return HttpResponse(jobId)\n\n\n@login_required()\ndef chgrp(request, conn=None, **kwargs):\n    \"\"\"\n    Moves data to a new group, using the chgrp queue.\n    Handles submission of chgrp form: all data in POST.\n    Adds the callback handle to the request.session['callback']['jobId']\n    \"\"\"\n    if not request.method == \"POST\":\n        return JsonResponse({\"Error\": \"Need to POST to chgrp\"}, status=405)\n    # Get the target group_id\n    group_id = getIntOrDefault(request, \"group_id\", None)\n    if group_id is None:\n        return JsonResponse({\"Error\": \"chgrp: No group_id specified\"})\n    group_id = long(group_id)\n\n    def getObjectOwnerId(r):\n        for t in [\"Dataset\", \"Image\", \"Plate\"]:\n            ids = r.POST.get(t, None)\n            if ids is not None:\n                for o in list(conn.getObjects(t, ids.split(\",\"))):\n                    return o.getDetails().owner.id.val\n\n    group = conn.getObject(\"ExperimenterGroup\", group_id)\n    new_container_name = request.POST.get(\"new_container_name\", None)\n    new_container_type = request.POST.get(\"new_container_type\", None)\n    container_id = None\n\n    # Context must be set to owner of data, E.g. to create links.\n    ownerId = getObjectOwnerId(request)\n    conn.SERVICE_OPTS.setOmeroUser(ownerId)\n    if (\n        new_container_name is not None\n        and len(new_container_name) > 0\n        and new_container_type is not None\n    ):\n        conn.SERVICE_OPTS.setOmeroGroup(group_id)\n        container_id = conn.createContainer(new_container_type, new_container_name)\n    # No new container, check if target is specified\n    if container_id is None:\n        # E.g. \"dataset-234\"\n        target_id = request.POST.get(\"target_id\", None)\n        container_id = target_id is not None and target_id.split(\"-\")[1] or None\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"]\n    for dtype in dtypes:\n        # Get all requested objects of this type\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            # TODO Doesn't the filesets only apply to images?\n            # if 'filesets' are specified, make sure we move ALL Fileset Images\n            fsIds = request.POST.getlist(\"fileset\")\n            if len(fsIds) > 0:\n                # If a dataset is being moved and there is a split fileset\n                # then those images need to go somewhere in the new\n                if dtype == \"Dataset\":\n                    conn.regroupFilesets(dsIds=obj_ids, fsIds=fsIds)\n                else:\n                    for fs in conn.getObjects(\"Fileset\", fsIds):\n                        obj_ids.extend([i.id for i in fs.copyImages()])\n                    obj_ids = list(set(obj_ids))  # remove duplicates\n            logger.debug(\"chgrp to group:%s %s-%s\" % (group_id, dtype, obj_ids))\n            handle = conn.chgrpObjects(dtype, obj_ids, group_id, container_id)\n            jobId = str(handle)\n            request.session[\"callback\"][jobId] = {\n                \"job_type\": \"chgrp\",\n                \"group\": group.getName(),\n                \"to_group_id\": group_id,\n                \"dtype\": dtype,\n                \"obj_ids\": obj_ids,\n                \"job_name\": \"Change group\",\n                \"start_time\": datetime.datetime.now(),\n                \"status\": \"in progress\",\n            }\n            request.session.modified = True\n\n    # Update contains a list of images/containers that need to be\n    # updated.\n\n    project_ids = request.POST.get(\"Project\", [])\n    dataset_ids = request.POST.get(\"Dataset\", [])\n    image_ids = request.POST.get(\"Image\", [])\n    screen_ids = request.POST.get(\"Screen\", [])\n    plate_ids = request.POST.get(\"Plate\", [])\n\n    if project_ids:\n        project_ids = [long(x) for x in project_ids.split(\",\")]\n    if dataset_ids:\n        dataset_ids = [long(x) for x in dataset_ids.split(\",\")]\n    if image_ids:\n        image_ids = [long(x) for x in image_ids.split(\",\")]\n    if screen_ids:\n        screen_ids = [long(x) for x in screen_ids.split(\",\")]\n    if plate_ids:\n        plate_ids = [long(x) for x in plate_ids.split(\",\")]\n\n    # TODO Change this user_id to be an experimenter_id in the request as it\n    # is possible that a user is chgrping data from another user so it is\n    # that users orphaned that will need updating. Or maybe all orphaned\n    # directories could potentially need updating?\n\n    # Create a list of objects that have been changed by this operation. This\n    # can be used by the client to visually update.\n    update = getAllObjects(\n        conn,\n        project_ids,\n        dataset_ids,\n        image_ids,\n        screen_ids,\n        plate_ids,\n        request.session.get(\"user_id\"),\n    )\n\n    # return HttpResponse(\"OK\")\n    return JsonResponse({\"update\": update})\n\n\n@login_required()\ndef chown(request, conn=None, **kwargs):\n    \"\"\"\n    Moves data to a new owner, using the chown queue.\n    Handles submission of chown form: all data in POST.\n    Adds the callback handle to the request.session['callback']['jobId']\n    \"\"\"\n    if not request.method == \"POST\":\n        return JsonResponse({\"Error\": \"Need to POST to chown\"}, status=405)\n    # Get the target owner_id\n    owner_id = getIntOrDefault(request, \"owner_id\", None)\n    if owner_id is None:\n        return JsonResponse({\"Error\": \"chown: No owner_id specified\"})\n    owner_id = int(owner_id)\n    exp = conn.getObject(\"Experimenter\", owner_id)\n    if exp is None:\n        return JsonResponse({\"Error\": \"chown: Experimenter not found\" % owner_id})\n\n    dtypes = [\"Project\", \"Dataset\", \"Image\", \"Screen\", \"Plate\"]\n    jobIds = []\n    for dtype in dtypes:\n        # Get all requested objects of this type\n        oids = request.POST.get(dtype, None)\n        if oids is not None:\n            obj_ids = [int(oid) for oid in oids.split(\",\")]\n            logger.debug(\"chown to owner:%s %s-%s\" % (owner_id, dtype, obj_ids))\n            handle = conn.chownObjects(dtype, obj_ids, owner_id)\n            jobId = str(handle)\n            jobIds.append(jobId)\n            request.session[\"callback\"][jobId] = {\n                \"job_type\": \"chown\",\n                \"owner\": exp.getFullName(),\n                \"to_owner_id\": owner_id,\n                \"dtype\": dtype,\n                \"obj_ids\": obj_ids,\n                \"job_name\": \"Change owner\",\n                \"start_time\": datetime.datetime.now(),\n                \"status\": \"in progress\",\n            }\n            request.session.modified = True\n\n    return JsonResponse({\"jobIds\": jobIds})\n\n\n@login_required(setGroupContext=True)\ndef script_run(request, scriptId, conn=None, **kwargs):\n    \"\"\"\n    Runs a script using values in a POST\n    \"\"\"\n    scriptService = conn.getScriptService()\n\n    inputMap = {}\n\n    sId = long(scriptId)\n\n    try:\n        params = scriptService.getParams(sId)\n    except Exception as x:\n        if x.message and x.message.startswith(\"No processor available\"):\n            # Delegate to run_script() for handling 'No processor available'\n            rsp = run_script(request, conn, sId, inputMap, scriptName=\"Script\")\n            return JsonResponse(rsp)\n        else:\n            raise\n    params = scriptService.getParams(sId)\n    scriptName = params.name.replace(\"_\", \" \").replace(\".py\", \"\")\n\n    logger.debug(\"Script: run with request.POST: %s\" % request.POST)\n\n    # upload new file\n    fileupload = (\n        \"file_annotation\" in request.FILES and request.FILES[\"file_annotation\"] or None\n    )\n    fileAnnId = None\n    if fileupload is not None and fileupload != \"\":\n        manager = BaseContainer(conn)\n        fileAnnId = manager.createFileAnnotations(fileupload, [])\n\n    for key, param in params.inputs.items():\n        prototype = param.prototype\n        pclass = prototype.__class__\n\n        if key == \"File_Annotation\" and fileAnnId is not None:\n            inputMap[key] = pclass(str(fileAnnId))\n            continue\n\n        # handle bool separately, since unchecked checkbox will not be in\n        # request.POST\n        if pclass == omero.rtypes.RBoolI:\n            value = key in request.POST\n            inputMap[key] = pclass(value)\n            continue\n\n        if pclass.__name__ == \"RMapI\":\n            keyName = \"%s_key0\" % key\n            valueName = \"%s_value0\" % key\n            row = 0\n            paramMap = {}\n            while keyName in request.POST:\n                # the key and value don't have any data-type defined by\n                # scripts - just use string\n                k = str(request.POST[keyName])\n                v = request.POST[valueName]\n                if len(k) > 0 and len(v) > 0:\n                    paramMap[str(k)] = v\n                row += 1\n                keyName = \"%s_key%d\" % (key, row)\n                valueName = \"%s_value%d\" % (key, row)\n            if len(paramMap) > 0:\n                inputMap[key] = wrap(paramMap)\n            continue\n\n        if key in request.POST:\n            if pclass == omero.rtypes.RListI:\n                values = request.POST.getlist(key)\n                if len(values) == 0:\n                    continue\n                if len(values) == 1:  # process comma-separated list\n                    if len(values[0]) == 0:\n                        continue\n                    values = values[0].split(\",\")\n\n                # try to determine 'type' of values in our list\n                listClass = omero.rtypes.RStringI\n                pval = prototype.val  # list\n                # check if a value type has been set (first item of prototype\n                # list)\n                if len(pval) > 0:\n                    listClass = pval[0].__class__\n                    if listClass == int(1).__class__:\n                        listClass = omero.rtypes.rint\n                    if listClass == long(1).__class__:\n                        listClass = omero.rtypes.rlong\n\n                # construct our list, using appropriate 'type'\n                valueList = []\n                for v in values:\n                    try:\n                        # RStringI() will encode any unicode\n                        obj = listClass(v.strip())\n                    except Exception:\n                        logger.debug(\"Invalid entry for '%s' : %s\" % (key, v))\n                        continue\n                    if isinstance(obj, omero.model.IObject):\n                        valueList.append(omero.rtypes.robject(obj))\n                    else:\n                        valueList.append(obj)\n                inputMap[key] = omero.rtypes.rlist(valueList)\n\n            # Handle other rtypes: String, Long, Int etc.\n            else:\n                value = request.POST[key]\n                if len(value) == 0:\n                    continue\n                try:\n                    inputMap[key] = pclass(value)\n                except Exception:\n                    logger.debug(\"Invalid entry for '%s' : %s\" % (key, value))\n                    continue\n\n    # If we have objects specified via 'IDs' and 'DataType', try to pick\n    # correct group\n    if \"IDs\" in inputMap and \"Data_Type\" in inputMap:\n        gid = conn.SERVICE_OPTS.getOmeroGroup()\n        conn.SERVICE_OPTS.setOmeroGroup(\"-1\")\n        try:\n            firstObj = conn.getObject(\n                inputMap[\"Data_Type\"].val, unwrap(inputMap[\"IDs\"])[0]\n            )\n            newGid = firstObj.getDetails().group.id.val\n            conn.SERVICE_OPTS.setOmeroGroup(newGid)\n        except Exception:\n            logger.debug(traceback.format_exc())\n            # if inputMap values not as expected or firstObj is None\n            conn.SERVICE_OPTS.setOmeroGroup(gid)\n\n    try:\n        # Try/except in case inputs are not serializable, e.g. unicode\n        logger.debug(\"Running script %s with \" \"params %s\" % (scriptName, inputMap))\n    except Exception:\n        pass\n    rsp = run_script(request, conn, sId, inputMap, scriptName)\n    return JsonResponse(rsp)\n\n\n@login_required(isAdmin=True)\n@render_response()\ndef script_upload(request, conn=None, **kwargs):\n    \"\"\"Script upload UI\"\"\"\n\n    if request.method != \"POST\":\n        return {\"template\": \"webclient/scripts/upload_script.html\"}\n\n    # Get script path, name and text\n    script_path = request.POST.get(\"script_path\")\n    script_file = request.FILES[\"script_file\"]\n    script_file.seek(0)\n    script_text = script_file.read().decode(\"utf-8\")\n\n    if not script_path.endswith(\"/\"):\n        script_path = script_path + \"/\"\n    script_path = script_path + script_file.name\n\n    # If script exists, replace. Otherwise upload\n    scriptService = conn.getScriptService()\n    script_id = scriptService.getScriptID(script_path)\n\n    try:\n        if script_id > 0:\n            orig_file = OriginalFileI(script_id, False)\n            scriptService.editScript(orig_file, script_text)\n            message = \"Script Replaced: %s\" % script_file.name\n        else:\n            script_id = scriptService.uploadOfficialScript(script_path, script_text)\n            message = \"Script Uploaded: %s\" % script_file.name\n    except omero.ValidationException as ex:\n        message = str(ex)\n\n    return {\"Message\": message, \"script_id\": script_id}\n\n\n@require_POST\n@login_required()\ndef ome_tiff_script(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Uses the scripting service (Batch Image Export script) to generate\n    OME-TIFF for an image and attach this as a file annotation to the image.\n    Script will show up in the 'Activities' for users to monitor and download\n    result etc.\n    \"\"\"\n\n    scriptService = conn.getScriptService()\n    sId = scriptService.getScriptID(\"/omero/export_scripts/Batch_Image_Export.py\")\n\n    image = conn.getObject(\"Image\", imageId)\n    if image is not None:\n        gid = image.getDetails().group.id.val\n        conn.SERVICE_OPTS.setOmeroGroup(gid)\n    imageIds = [long(imageId)]\n    inputMap = {\n        \"Data_Type\": wrap(\"Image\"),\n        \"IDs\": rlist([rlong(id) for id in imageIds]),\n    }\n    inputMap[\"Format\"] = wrap(\"OME-TIFF\")\n    rsp = run_script(request, conn, sId, inputMap, scriptName=\"Create OME-TIFF\")\n    return JsonResponse(rsp)\n\n\ndef run_script(request, conn, sId, inputMap, scriptName=\"Script\"):\n    \"\"\"\n    Starts running a script, adding details to the request.session so that it\n    shows up in the webclient Activities panel and results are available there\n    etc.\n    \"\"\"\n    request.session.modified = True\n    scriptService = conn.getScriptService()\n    try:\n        handle = scriptService.runScript(sId, inputMap, None, conn.SERVICE_OPTS)\n        # E.g. ProcessCallback/4ab13b23-22c9-4b5f-9318-40f9a1acc4e9 -t:tcp -h  10.37.129.2 -p 53154:tcp -h 10.211.55.2 -p 53154:tcp -h 10.12.1.230 -p 53154 # noqa\n        jobId = str(handle)\n        status = \"in progress\"\n        request.session[\"callback\"][jobId] = {\n            \"job_type\": \"script\",\n            \"job_name\": scriptName,\n            \"start_time\": datetime.datetime.now(),\n            \"status\": status,\n        }\n        request.session.modified = True\n    except Exception as x:\n        jobId = str(time())  # E.g. 1312803670.6076391\n        # handle python 2 or 3 errors\n        message = x.message if hasattr(x, \"message\") else (x.args[0] if x.args else \"\")\n        if message and message.startswith(\"No processor available\"):\n            # omero.ResourceError\n            logger.info(traceback.format_exc())\n            error = \"No Processor Available\"\n            status = \"no processor available\"\n            message = \"\"  # template displays message and link\n        else:\n            # Don't log user mistake as ERROR\n            if isinstance(x, omero.ValidationException):\n                logger.debug(x.message)\n            else:\n                logger.error(traceback.format_exc())\n            error = traceback.format_exc()\n            status = \"failed\"\n            message = x.message\n        # save the error to http session, for display in 'Activities' window\n        request.session[\"callback\"][jobId] = {\n            \"job_type\": \"script\",\n            \"job_name\": scriptName,\n            \"start_time\": datetime.datetime.now(),\n            \"status\": status,\n            \"Message\": message,\n            \"error\": error,\n        }\n        return {\"status\": status, \"error\": error}\n\n    return {\"jobId\": jobId, \"status\": status}\n\n\n@login_required()\n@render_response()\ndef ome_tiff_info(request, imageId, conn=None, **kwargs):\n    \"\"\"\n    Query to see if we have an OME-TIFF attached to the image (assume only 1,\n    since Batch Image Export will delete old ones)\n    \"\"\"\n    # Any existing OME-TIFF will appear in list\n    links = list(\n        conn.getAnnotationLinks(\n            \"Image\", [imageId], ns=omero.constants.namespaces.NSOMETIFF\n        )\n    )\n    rv = {}\n    if len(links) > 0:\n        # use highest ID === most recent\n        links.sort(key=lambda x: x.getId(), reverse=True)\n        annlink = links[0]\n        created = annlink.creationEventDate()\n        annId = annlink.getChild().getId()\n        from omeroweb.webgateway.templatetags.common_filters import ago\n\n        download = reverse(\"download_annotation\", args=[annId])\n        rv = {\n            \"created\": str(created),\n            \"ago\": ago(created),\n            \"id\": annId,\n            \"download\": download,\n        }\n    return rv  # will get returned as json by default\n", "/*\n * Copyright (c) 2008-2013 University of Dundee. & Open Microscopy Environment.\n * All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Author: Aleksandra Tarkowska <A(dot)Tarkowska(at)dundee(dot)ac(dot)uk>, 2008.\n */\n\n/*global OME:true */\nif (typeof OME === \"undefined\") {\n    OME = {};\n}\n\n// Use userAgent to detect mobile devices\n// from http://stackoverflow.com/questions/3514784/what-is-the-best-way-to-detect-a-handheld-device-in-jquery\nOME.isMobileDevice = function() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|PlayBook|IEMobile|Opera Mini|Mobile Safari|Silk/i).test(navigator.userAgent);\n};\n\nOME.rgbToHex = function rgbToHex(rgb) {\n    if (rgb.substring(0,1) == '#') {\n        return rgb.substring(1);\n    }\n    var rgbvals = /rgb\\((.+),(.+),(.+)\\)/i.exec(rgb);\n    if (!rgbvals) return rgb;\n    var rval = parseInt(rgbvals[1], 10).toString(16);\n    var gval = parseInt(rgbvals[2], 10).toString(16);\n    var bval = parseInt(rgbvals[3], 10).toString(16);\n    if (rval.length == 1) rval = '0' + rval;\n    if (gval.length == 1) gval = '0' + gval;\n    if (bval.length == 1) bval = '0' + bval;\n    return (\n        rval +\n        gval +\n        bval\n    ).toUpperCase();\n};\n\nOME.hexToRgb = function hexToRgb(hex) {\n    hex = OME.rgbToHex(hex);    // in case 'hex' is actually rgb!\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n};\n\n// Calculate value, saturation and hue as in org.openmicroscopy.shoola.util.ui.colour.HSV\nOME.isDark = function(color) {\n    if (color.endsWith('.lut')) {\n        return false;\n    }\n    var c = OME.hexToRgb(color);\n\n    var min, max, delta;\n    var v, s, h;\n\n    min = Math.min(c.r, c.g, c.b);\n    max = Math.max(c.r, c.g, c.b);\n\n    v = max;\n    delta = max-min;\n\n    if (max !== 0) {\n        s = delta/max;\n    }\n    else {\n        v = 0;\n        s = 0;\n        h = 0;\n    }\n\n    if (c.r==max) {\n        h = (c.g-c.b)/delta;\n    } else if (c.g == max) {\n        h = 2 + (c.b-c.r)/delta;\n    } else {\n        h = 4 +(c.r-c.g)/delta;\n    }\n\n    h = h * 60;\n    if (h < 0) {\n        h += 360;\n    }\n    h = h/360;\n    v = v/255;\n\n    return (v < 0.6 || (h > 0.6 && s > 0.7));\n};\n\nfunction isInt(n){\n    return typeof n== \"number\" && isFinite(n) && n%1===0;\n}\n\nNumber.prototype.filesizeformat = function (round) {\n    /*\n    Formats the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,\n    102 bytes, etc).*/\n    \n    if (round === undefined || !isInt(round)) round = 2;\n    \n    var bytes = this;\n    if (bytes < 1024) {\n        return bytes + ' B';\n    } else if (bytes < (1024*1024)) {\n        return (bytes / 1024).toFixed(round) + ' KB';\n    } else if (bytes < (1024*1024*1024)) {\n        return (bytes / (1024*1024)).toFixed(round) + ' MB';\n    } else if (bytes < (1024*1024*1024*1024)) {\n        return (bytes / (1024*1024*1024)).toFixed(round) + ' GB';\n    } else if (bytes < (1024*1024*1024*1024*1024)) {\n        return (bytes / (1024*1024*1024*1024)).toFixed(round) + ' TB';\n    } else {\n        return (bytes / (1024*1024*1024*1024*1024)).toFixed(round) + ' PB';\n    }\n    \n};\n\nNumber.prototype.lengthformat = function (round) {\n    if (round === undefined || !isInt(round)) round = 2;\n    \n    var length = this;\n    if (length < 0.001) {\n        return (length * 1000 * 1000).toFixed(round) + ' pm';\n    } else if (length < 0.1) {\n        return (length * 1000 * 10).toFixed(round) + ' &#8491;';\n    } else if (length < 1) {\n        return (length * 1000).toFixed(round) + ' nm';\n    } else if (length < 1000) {\n        return length.toFixed(round) + ' &#181m';\n    } else if (length < 1000 * 100) {\n        return (length / 1000).toFixed(round) + ' mm';\n    } else if (length < 1000 * 100 * 10) {\n        return (length / 1000 / 100).toFixed(round) + ' cm';\n    } else if (length < 1000 * 100 * 10 * 100) {\n        return (length / 1000 / 100 / 10).toFixed(round) + ' m';\n    } else {\n        return (length / 1000 / 100 / 10 / 1000).toFixed(round) + ' km';\n    }\n};\n\nString.prototype.escapeHTML = function(){\n    /*\n    HTML Escape Before Inserting Untrusted Data into HTML Element Content\n    https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention\n    _Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into\n    _HTML_Element_Content\n    */\n    var s = this;\n    if (!s) {\n        return \"\";\n    }\n    s = s + \"\";\n    return s.replace(/[\\&\"<>\\\\]/g, function(s) {\n        switch(s) {\n            case \"&\": return \"&amp;\";\n            case \"\\\\\": return \"&#92;\";\n            case \"`\": return '&#x60;';\n            case \"'\": return '&#x27;';\n            case '\"': return '&quot;';\n            case \"<\": return \"&lt;\";\n            case \">\": return \"&gt;\";\n            default: return s;\n        }\n    });\n};\n\nString.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\n// IE polyfill from\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\nif (!String.prototype.startsWith) {\n    String.prototype.startsWith = function(search, pos) {\n        return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n    };\n}\n\njQuery.fn.alternateRowColors = function() {\n    var $rows = $(this).children().children('tr');\n    $rows.not('.hidden').filter(':odd').removeClass('even').addClass('odd');\n    $rows.not('.hidden').filter(':even').removeClass('odd').addClass('even');\n  return this;\n};\n\n\n// Call this on an <input> to only allow numbers.\n// I rejects all non-numeric characters but allows paste (then checks value)\n// By default it only allows positive ints.\n// To allow negative or float values use $(\".number\").numbersOnly({negative:true, float:true});\njQuery.fn.numbersOnly = function(options) {\n\n    // First, save the current value (assumed to be valid)\n    this.each(function() {\n        $(this).data('numbersOnly', $(this).val());\n    })\n    .on('keypress', function(event){\n\n        // we allow copy, paste, left or right\n        var allowedChars = [37, 39, 99, 118];\n        if (options && options.negative) {\n            allowedChars.push(45);\n        }\n        if (options && options.float) {\n            allowedChars.push(46);\n        }\n        // Reject keypress if not a number and NOT one of our allowed Chars\n        var charCode = (event.which) ? event.which : event.keyCode;\n        if (charCode > 31 && (charCode < 48 || charCode > 57) && allowedChars.indexOf(charCode) == -1) {\n            return false;\n        }\n\n        // We've allowed keypress (including paste)...\n        //finally check field value after waiting for keypress to update...\n        var $this = $(this);\n        setTimeout(function(){\n            var n = $this.val();\n            var isNumber = function(n) {\n                if (n.length === 0) {\n                    return true;        // empty strings are allowed\n                }\n                return !isNaN(parseFloat(n)) && isFinite(n);\n            };\n            // If so, save to 'data', otherwise revert to 'data'\n            if (isNumber(n)) {\n                $this.data('numbersOnly', n);     // update\n            } else {\n                $this.val( $this.data('numbersOnly') );\n            }\n        }, 10);\n\n        return true;\n    });\n\n    return this;\n};\n\nOME.openPopup = function(url) {\n    // IE8 doesn't support arbitrary text for 'name' 2nd arg.  #6118\n    var owindow = window.open(url, '', 'height=600,width=850,left=50,top=50,toolbar=no,menubar=no,scrollbars=yes,resizable=yes,location=no,directories=no,status=no');\n    if(!owindow.closed) {\n        owindow.focus();\n    }\n    return false;\n};\n\n\nOME.openCenteredWindow = function(url, w, h) {\n    var width = w ? +w : 550;\n    var height = h ? +h : 600;\n    var left = parseInt((screen.availWidth/2) - (width/2), 10);\n    var top = 0;\n    var windowFeatures = \"width=\" + width + \",height=\" + height + \",status=no,resizable=yes,scrollbars=yes,menubar=no,toolbar=no,left=\" + left + \",top=\" + top + \"screenX=\" + left + \",screenY=\" + top;\n    var myWindow = window.open(url, \"\", windowFeatures);\n    if(!myWindow.closed) {\n        myWindow.focus();\n    }\n    return false;\n};\n\n\nOME.openScriptWindow = function(event, width, height) {\n    // open script url, providing Data_Type and IDs params in request\n    var script_url = $(event.target).attr('href');\n    if (script_url == \"#\") return false;\n\n    if (script_url.indexOf('script_upload') > -1) {\n        OME.openCenteredWindow(script_url, width, 300);\n        return;\n    }\n\n    // selected is list of {'id':'image-123'} etc.\n    var selected = $(\"body\").data(\"selected_objects.ome\"),\n        sel_types = {};\n    if (typeof selected !== \"undefined\") {\n        for (var i=0; i<selected.length; i++) {\n            var type = selected[i].id.split(\"-\")[0],\n                oid = selected[i].id.split(\"-\")[1];\n            if (typeof sel_types[type] === \"undefined\") {\n                sel_types[type] = [];\n            }\n            sel_types[type].push(oid);\n        }\n        var args = [];\n        for (var key in sel_types) {\n            // If in SPW with wells selected, handy to know what 'field'\n            if (key === \"well\") {\n                // grab the index select value:\n                if ($(\"#id_index\").length > 0) {\n                    args.push(\"Index=\" + $(\"#id_index\").val());\n                }\n            }\n            if (sel_types.hasOwnProperty(key)){\n                args.push(key.capitalize() + \"=\" + sel_types[key].join(\",\"));\n            }\n        }\n        var fileAnnotationCheckboxes =\n            $(\"#fileanns_container input[type=checkbox]\").filter(\":checked\");\n        if (fileAnnotationCheckboxes.length > 0) {\n            var fileAnnotationIds = [];\n            fileAnnotationCheckboxes.each(function() {\n                var li = $(this).parents(\"li\").first();\n                var oid = li.attr('id').split('-')[1];\n                fileAnnotationIds.push(oid);\n            });\n            args.push(\"File_Annotation=\" + fileAnnotationIds.join(\",\"));\n        }\n        script_url += \"?\" + args.join(\"&\");\n    }\n    OME.openCenteredWindow(script_url, width, height);\n    return false;\n};\n\n\n/*\n *  Returns a string representing the currently selected items in the $.jstree.\n * E.g.     \"Image=23,34,98&Dataset=678\"\n**/\nOME.get_tree_selection = function() {\n    if (typeof $.jstree === \"undefined\") {\n        return \"\";\n    }\n    var datatree = $.jstree.reference('#dataTree');\n    var selected = datatree.get_selected(true);\n\n    var selected_ids = {};\n\n    $.each(selected, function(index, node) {\n        var dtype = node.type;\n        var data_type = dtype.charAt(0).toUpperCase() + dtype.slice(1); // capitalise\n        var data_id = node.data.obj.id;\n        if (data_type in selected_ids) {\n            selected_ids[data_type] += \",\"+data_id;\n        } else {\n            selected_ids[data_type] = data_id;\n        }\n    });\n\n    var ids_list = [];\n    for (var key in selected_ids){\n        ids_list.push(key+\"=\"+selected_ids[key]);\n    }\n    return ids_list.join(\"&\");\n};\n\n\n// we need to know parent for Channels or Rdefs 'apply to all'\nOME.getParentId = function() {\n    if (typeof $.jstree === \"undefined\") {\n        return;\n    }\n    var datatree = $.jstree.reference('#dataTree');\n\n    var selected = datatree.get_selected(true);\n    if (selected.length == 1) {\n        var node = selected[0],\n            parentNode;\n\n        if (node.type === 'acquisition') {\n            parentNode = datatree.get_node(datatree.get_parent(node));\n            return parentNode.type + '-' + parentNode.data.obj.id;\n        } else if (node.type === 'plate') {\n            return node.type + '-' + node.data.obj.id;\n        } else if  (node.type === 'image') {\n            parentNode = datatree.get_node(datatree.get_parent(node));\n            if (parentNode.type === 'dataset') {\n                return parentNode.type + '-' + parentNode.data.obj.id;\n            }\n        }\n    }\n};\n\n\n/*\n * Confirm dialog using jquery-ui dialog. http://jqueryui.com/demos/dialog/\n * This code provides a short-cut that doens't need html elements on the page\n * Basic usage (text only - Default buttons are 'OK' and 'Cancel'):\n *    var OK_dialog = OME.confirm_dialog(\"Can you confirm that you want to proceed?\", function() {\n *        var clicked_button_text = OK_dialog.data(\"clicked_button\");\n *        alert(clicked_button_text);\n *    });\n *\n * Also possible to specify title, buttons, width, height:\n *    var btn_labels = [\"Yes\", \"No\", \"Maybe\", \"Later\"];\n *    var title_dialog = OME.confirm_dialog(\"Can you confirm that you want to proceed?\",\n *          function() { alert( title_dialog.data(\"clicked_button\") },\n *          \"Dialog Title\", btn_labels, 300, 200);\n */\nOME.confirm_dialog = function(dialog_text, callback, title, button_labels, width, height) {\n\n    if ((typeof title == \"undefined\") || (title === null)) {\n        title = \"Confirm\";\n    }\n    if ((typeof width == \"undefined\") || (width === null)) {\n        width = 350;\n    }\n    if ((typeof height == \"undefined\") || (height === null)) {\n        height = 140;\n    }\n\n    var $dialog = $(\"#confirm_dialog\");\n    if ($dialog.length > 0) {       // get rid of any old dialogs\n        $dialog.remove();\n    }\n    $dialog = $(\"<div id='confirm_dialog'></div>\");\n    $('body').append($dialog);\n\n    $dialog.attr(\"title\", title).hide();\n    $dialog.html(\"<p>\"+ dialog_text +\"</p>\");\n\n    if (typeof button_labels == \"undefined\") {\n        button_labels = ['OK', 'Cancel'];\n    }\n    var btns = {};\n    for (var i=0; i<button_labels.length; i++) {\n        var b = button_labels[i];\n        btns[b] = function(event) {\n            var btxt = $(event.target).text();\n            $dialog.data(\"clicked_button\", btxt);\n            $( this ).dialog( \"close\" );\n        };\n    }\n\n    $dialog.dialog({\n        resizable: true,\n        height: height,\n        width: width,\n        modal: true,\n        buttons: btns\n    });\n    if (callback) {\n        $dialog.bind(\"dialogclose\", callback);\n    }\n\n    return $dialog;\n};\n\n// short-cut to simply display a message\nOME.alert_dialog = function(message) {\n    OME.confirm_dialog(message, undefined, \"\", [\"OK\"]);\n};\n\n\n/*\n * A dialog for sending feedback.\n * Loads and submits the feedback form at \"/feedback/feedback\"\n */\nOME.feedback_dialog = function(error, feedbackUrl) {\n\n    var $feedback_dialog = $(\"#feedback_dialog\");\n    if ($feedback_dialog.length > 0) {       // get rid of any old dialogs\n        $feedback_dialog.remove();\n    }\n    $feedback_dialog = $(\"<div id='feedback_dialog'></div>\");\n    $('body').append($feedback_dialog);\n\n    $feedback_dialog.attr(\"title\", \"Send Feedback\").hide();\n    $feedback_dialog.load(feedbackUrl + \" #form-500\", function() {\n        $(\"textarea[name=error]\", $feedback_dialog).val(error);\n        $(\"input[type=submit]\", $feedback_dialog).hide();\n        $(\"form\", $feedback_dialog).ajaxForm({\n            success: function(data) {\n                $feedback_dialog.html(data);\n                $feedback_dialog.dialog(\"option\", \"buttons\", {\n                    \"Close\": function() {\n                        $( this ).dialog( \"close\" );\n                    }\n                });\n            }\n        });\n    });\n\n    $feedback_dialog.dialog({\n        resizable: true,\n        height: 500,\n        width: 700,\n        modal: true,\n        buttons: {\n            \"Cancel\": function() {\n                $( this ).dialog( \"close\" );\n            },\n            \"Send\": function() {\n                $(\"form\", $feedback_dialog).trigger('submit');\n            }\n        }\n    });\n    return $feedback_dialog;\n};\n\n/**\n * Handle jQuery load() errors (E.g. timeout)\n * In this case we simply refresh (will redirect to login page)\n**/\nOME.setupAjaxError = function(feedbackUrl){\n\n    $(document).ajaxError(function(e, req, settings, exception) {\n        var error;\n        if (req.status == 404) {\n            var msg = \"Url: \" + settings.url + \"<br/>\" + req.responseText;\n            OME.confirm_dialog(msg, null, \"404 Error\", [\"OK\"], 360, 200);\n        } else if (req.status == 403) {\n            // Denied (E.g. session timeout) Refresh - will redirect to login page\n            window.location.reload();\n        } else if (req.status == 500) {\n            // Our 500 handler returns only the stack-trace if request.is_json()\n            error = req.responseText;\n            // If the failed request was loading feedback, prevent recursive loading of feedback!\n            if (settings.url.startsWith(feedbackUrl)) {\n                return;\n            }\n            OME.feedback_dialog(error, feedbackUrl);\n        } else if (req.status == 400) {\n            if (req.responseText.indexOf('Request Line is too large') > -1) {\n                // This should be handled by the caller - e.g. loading of right panel\n            } else {\n                // 400 Bad Request. Usually indicates some invalid parameter, e.g. an invalid group id\n                // Usually indicates a problem with the webclient rather than the server as the webclient\n                // requested something invalid\n                error = req.responseText;\n                OME.feedback_dialog(error, feedbackUrl);\n            }\n        }\n    });\n};\n\n\n/*\n * NB: This code is NOT USED currently. Experimental.\n * A dialog for logging-in on the fly (without redirect to login page).\n * On clicking 'Connect' we post username & password to login url and on callback, the callback function is called\n */\nOME.login_dialog = function(login_url, callback) {\n\n    var $dialog = $(\"#login_dialog\");\n    if ($dialog.length > 0) {       // get rid of any old dialogs\n        $dialog.remove();\n    }\n    $dialog = $(\"<div id='login_dialog'></div>\");\n    $('body').append($dialog);\n\n    $dialog.attr(\"title\", \"Login\").hide();\n    $dialog.html(\"<form>Username:<input type='text' name='username' id='login_username' /><br />Password:<input type='text' name='password' id='login_password'/>\");\n\n    $dialog.dialog({\n        resizable: true,\n        height: 200,\n        width: 300,\n        modal: true,\n        buttons: {\n            \"Cancel\": function() {\n                $( this ).dialog( \"close\" );\n            },\n            \"Connect\": function() {\n                var username = $(\"#login_username\").val();\n                var password = $(\"#login_password\").val();\n                $.post(login_url, {'password':password, 'username':username, 'noredirect':'true'},  function(data) {\n                    //console.log(\"logged-in...\");\n                    callback();\n                });\n                $( this ).dialog( \"close\" );\n            }\n        }\n    });\n    $dialog.bind(\"dialogclose\", callback);\n\n    return $dialog;\n};\n\n\n(function ($) {\n\n    // This jQuery plugin is used to init a right-panel webclient-plugin (too many plugins!)\n    // It adds listeners to selection and tab-change events, updating the panel by loading\n    // a url based on the currently selected objects.\n    // Example usage:\n    //\n    //  $(\"#rotation_3d_tab\").omeroweb_right_plugin({           // The tab content element\n    //      plugin_index: 3,                                    // The tab index\n    //      load_plugin_content: function(selected, obj_dtype, obj_id) {    // Url based on selected object(s)\n    //          $(this).load('{% url weblabs_index %}rotation_3d_viewer/'+obj_id);\n    //      },\n    //      supported_obj_types: ['image','dataset'],   // E.g. only support single image/dataset selected\n    //  });\n    $.fn.omeroweb_right_plugin = function (settings) {\n\n        var returnValue = this;\n\n        // Process each jQuery object in array\n        this.each(function(i) {\n            // 'this' is the element we're working with\n            var $this = $(this);\n            var plugin_tab_index = $this.index()-1;\n\n            // store settings\n            // 'load_plugin_content' was called 'load_tab_content' (4.4.9 and earlier). Support both...\n            var load_plugin_content = settings['load_plugin_content'] || settings['load_tab_content'],\n                supported_obj_types = settings['supported_obj_types'],\n                // only used if 'supported_obj_types' undefined. (was called 'tab_enabled' in 4.4.9)\n                plugin_enabled = settings['plugin_enabled'] || settings['tab_enabled'];\n\n            var update_tab_content = function() {\n                // get the selected id etc\n                var selected = $(\"body\").data(\"selected_objects.ome\");\n                if (selected.length === 0) {\n                    return;\n                }\n                var obj_id = selected[0]['id'];     // E.g. image-123\n                var dtype = obj_id.split(\"-\")[0];    // E.g. 'image'\n                var oid = obj_id.split(\"-\")[1];\n\n                // if the tab is visible and not loaded yet...\n                if ($this.is(\":visible\") && $this.is(\":empty\")) {\n                    // we want the context of load_plugin_content to be $this\n                    $.proxy(load_plugin_content, $this)(selected, dtype, oid);\n                }\n            };\n\n            // update tabs when tree selection changes or tabs switch\n            $(\"#annotation_tabs\").on( \"tabsactivate\", function(event, ui){\n                // we get a \"tabsactivate\" event, but need to check if 'this' tab was chosen...\n                if (ui.newTab.index() == plugin_tab_index) {\n                    $this.show();   // sometimes this doesn't get shown until too late\n                    update_tab_content();\n                }\n            });\n\n            // on change of selection in tree, update which tabs are enabled\n            $(\"body\").on(\"selection_change.ome\", function(event) {\n\n                // clear contents of panel\n                $this.empty();\n\n                // get selected objects\n                var selected = $(\"body\").data(\"selected_objects.ome\");\n                if (selected.length === 0) {\n                    $(\"#annotation_tabs\").tabs(\"disable\", plugin_tab_index);\n                    return;\n                }\n                var obj_id = selected[0]['id'];     // E.g. image-123\n                var orel = obj_id.split(\"-\")[0];    // E.g. 'image'\n\n                // we only care about changing selection if this tab is selected...\n                var select_tab = $(\"#annotation_tabs\").tabs( \"option\", \"selected\" );\n                var supported;\n                if (typeof supported_obj_types != 'undefined') {\n                    supported = ($.inArray(orel, supported_obj_types) >-1) && (selected.length == 1);\n                } else {\n                    supported = plugin_enabled ? plugin_enabled(selected) : true;\n                }\n\n                // update enabled & selected state\n                if(!supported) {\n                    if (plugin_tab_index == select_tab) {\n                        // if we're currently selected - switch to first tab\n                        $(\"#annotation_tabs\").tabs(\"select\", 0);\n                    }\n                    $(\"#annotation_tabs\").tabs(\"disable\", plugin_tab_index);\n                } else {\n                    $(\"#annotation_tabs\").tabs(\"enable\", plugin_tab_index);\n                    // update tab content\n                    update_tab_content();\n                }\n            });\n\n        });\n        // return the jquery selection (or if it was a method call that returned a value - the returned value)\n        return returnValue;\n    };\n\n\n    // This plugin is similar to the one above, handling center-panel webclient-plugin init.\n    $.fn.omeroweb_center_plugin = function (settings) {\n\n        var returnValue = this;\n\n        // Process each jQuery object in array\n        this.each(function(i) {\n            // 'this' is the element we're working with\n            var $this = $(this),\n                plugin_index = $this.index() - 1;\n\n            // store settings\n            var load_plugin_content = settings['load_plugin_content'],\n                supported_obj_types = settings['supported_obj_types'],\n                plugin_enabled = settings['plugin_enabled'],      // only used if 'supported_obj_types' undefined\n                empty_on_sel_change = settings['empty_on_sel_change'];\n            if (typeof empty_on_sel_change == 'undefined') {\n                empty_on_sel_change = true;  // TODO use default settings\n            }\n\n            var update_plugin_content = function() {\n                // get the selected id etc\n                var selected = $(\"body\").data(\"selected_objects.ome\");\n                if (selected.length === 0) {\n                    return;\n                }\n                var obj_id = selected[0]['id'];     // E.g. image-123\n                var dtype = obj_id.split(\"-\")[0];    // E.g. 'image'\n                var oid = obj_id.split(\"-\")[1];\n\n                // if the tab is visible...\n                if ($this.is(\":visible\")) {\n                    // we want the context of load_plugin_content to be $this\n                    $.proxy(load_plugin_content,$this)(selected, dtype, oid);\n                }\n            };\n\n\n            $('#center_panel_chooser').on('center_plugin_changed.ome', update_plugin_content);\n\n            // on change of selection in tree, update which tabs are enabled\n            $(\"body\").on(\"selection_change.ome\", function(event) {\n\n                // clear contents of panel\n                if (empty_on_sel_change) {\n                    $this.empty();\n                }\n\n                // get selected objects\n                var selected = $(\"body\").data(\"selected_objects.ome\");\n                if (selected.length === 0) {\n                    OME.set_center_plugin_enabled(plugin_index, false);\n                    return;\n                }\n                var obj_id = selected[0]['id'];     // E.g. image-123\n                var orel = obj_id.split(\"-\")[0];    // E.g. 'image'\n\n                // do we support the data currently selected?\n                var supported;\n                if (typeof supported_obj_types != 'undefined') {\n                    // simply test E.g. if \"image\" is in the supported types\n                    supported = ($.inArray(orel, supported_obj_types) >-1) && (selected.length == 1);\n                } else {\n                    // OR use the user-specified function to check support\n                    supported = plugin_enabled ? plugin_enabled(selected) : true;\n                }\n\n                // update enabled state\n                OME.set_center_plugin_enabled(plugin_index, supported);\n                if(supported) {\n                    update_plugin_content();\n                } else {\n                    $this.empty();\n                }\n            });\n        });\n\n        // return the jquery selection (or if it was a method call that returned a value - the returned value)\n        return returnValue;\n    };\n\n}(jQuery));\n\n\n// jQuery plugin: simple emulation of table-sorter for other elements...\n// Based on code from 'Learning jQuery 1.3 http://book.learningjquery.com/'\n// Called on an element that resembles a table.\n// Example usage:\n//$(\".element_sorter\").elementsorter({\n//    head: '.thead div',             // Selector for the equivalent of 'table head'\n//    body: 'li.row',                 // Selector for the equivalent of 'table rows'\n//    sort_key: '.hidden_sort_text'   // optional - how to find the text within each child of a 'row'.\n//});\n(function ($) {\n\n    \"use strict\";\n\n    var methods = {\n\n    // initialise the plugin\n    init : function (options) {\n\n        if (!options.head || !options.body) {\n            return;\n        }\n\n        return this.each(function(){\n            var $this = $(this),\n                data = $this.data('elementsorter');\n\n            // If the plugin hasn't been initialized yet\n            if ( ! data ) {\n\n                data = options;     // save for later ref (E.g. destroy())\n                \n                var $headers = $(options.head, $this);\n                // for each 'column'...\n                $headers.each(function(column) {\n                    var $header = $(this),\n                        findSortKey;\n                    var findSortText = function($cell) {\n                        if (options.sort_key) {\n                            if ($(options.sort_key, $cell).length > 0) {\n                                return $(options.sort_key, $cell).text();\n                            }\n                        }\n                        return $cell.text();\n                    };\n                    if ($header.is('.sort-alpha')) {\n                        findSortKey = function($cell) {\n                            return findSortText($cell).toLowerCase();\n                        };\n                    } else if ($header.is('.sort-numeric')) {\n                        findSortKey = function($cell) {\n                            var key = findSortText($cell).replace(/^[^\\d.]*/, '');\n                            key = parseFloat(key);\n                            return isNaN(key) ? 0 : key;\n                        };\n                    } else if ($header.is('.sort-date')) {\n                        findSortKey = function($cell) {\n                            var date = Date.parse(findSortText($cell));\n                            return isNaN(date) ? 0 : date;\n                        };\n                    }\n                    if (findSortKey) {\n                        $header\n                            .addClass('clickable')\n                            .on('click', function() {\n                                var sortDirection = 1;\n                                if ($header.is('.sorted-asc')) {\n                                    sortDirection = -1;\n                                }\n                                var rows = $(options.body, $this).get();\n                                // populate each row with current sort key\n                                $.each(rows, function(index, row) {\n                                    var $row = $(row),\n                                        $cell = $row.children().eq(column);\n                                    row.sortKey = findSortKey($cell);\n                                    row.dataId = $row.attr('data-id');\n                                });\n                                // Do the sorting...\n                                rows.sort(function(a, b){\n                                    if (a.sortKey === b.sortKey) {\n                                        return a.dataId <= b.dataId ? -sortDirection : sortDirection;\n                                    }\n                                    return a.sortKey < b.sortKey ? -sortDirection : sortDirection;\n                                });\n                                // add rows to DOM in order\n                                $.each(rows, function(index, row) {\n                                    $this.append(row);\n                                    row.sortKey = null;\n                                });\n                                // clear classes from other headers\n                                $headers.removeClass('sorted-asc')\n                                    .removeClass('sorted-desc');\n                                if (sortDirection == 1) {\n                                    $header.addClass('sorted-asc');\n                                } else {\n                                    $header.addClass('sorted-desc');\n                                }\n                            });\n                        // In this case, we sort by this column during plugin init.\n                        if ($header.is('.sort-init')) {\n                            $header.trigger('click');\n                        }\n                    }\n                });\n\n                $this.data('elementsorter', data);\n                \n            }\n        });\n    },\n\n    destroy: function() {\n        \n        return this.each(function(){\n            //var $this = $(this),\n            //    data = $this.data('elementsorter');\n\n            // all we need to do is remove the click handlers from headers\n            // var $headers = $(data.head, $this);\n        });\n    }\n\n    };\n\n\n    // the plugin definition: either we init or we're calling a named method.\n    $.fn.elementsorter = function( method ) {\n\n        if ( methods[method] ) {\n          return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n        }\n        if ( typeof method === 'object' || ! method ) {\n          return methods.init.apply( this, arguments );\n        }\n        $.error( 'Method ' +  method + ' does not exist on jQuery.src_loader' );\n    };\n\n}(jQuery));\n\n// ** TESTING ONLY **\n// http://remysharp.com/2007/11/01/detect-global-variables/\nif (false) {                    // set to 'true' to run. NB: Need to uncomment 'console.log..' below.\n    setTimeout(function(){      // use timeout to allow all scripts to load etc\n        console.log(\"SHOWING GLOBAL VARIABLES...\");\n        var differences = {},\n            exceptions,\n            globals = {},\n            //ignoreList = (prompt('Ignore filter (comma sep)?', '') || '').split(','),\n            ignoreList = [],    // E.g. [\"function\"]\n            i = ignoreList.length,\n            iframe = document.createElement('iframe');\n        while (i--) {\n          globals[ignoreList[i]] = 1;\n        }\n        for (i in window) {\n          differences[i] = {\n            'type': typeof window[i],\n            'val': window[i]\n          };\n        }\n        iframe.style.display = 'none';\n        document.body.appendChild(iframe);\n        iframe.src = 'about:blank';\n        iframe = iframe.contentWindow || iframe.contentDocument;\n        for (i in differences) {\n          if (typeof iframe[i] != 'undefined') {delete differences[i];}\n          else if (globals[differences[i].type]) {delete differences[i];}\n        }\n        exceptions = 'addEventListener,document,location,navigator,window'.split(',');\n        exceptions.push(\"jQuery\", \"$\");  // Ignore jQuery etc...\n        exceptions.push(\"isClientPhone\", \"callback\", \"isClientTouch\", \"isIE\");      // from panojs/utils.js\n        exceptions.push(\"sanitizeHexColor\", \"toRGB\", \"rgbToHex\", \"parseQuery\", \"downloadLandingDialog\"); // from ome.gs_utils.js\n        // All these from PanoJS\n        exceptions.push(\"PanoJS\", \"PanoControls\", \"BisqueISLevel\", \"BisqueISPyramid\", \"formatInt\");\n        exceptions.push(\"ImgcnvPyramid\", \"ImgcnvLevel\", \"InfoControl\", \"Metadata\", \"OsdControl\", \"ROIControl\", \"ScaleBarControl\");\n        exceptions.push(\"Tile\", \"ZoomifyLevel\", \"ZoomifyPyramid\", \"SvgControl\", \"ThumbnailControl\", \"trim\");\n        i = exceptions.length;\n        while (--i) {\n          delete differences[exceptions[i]];\n        }\n        console.dir(differences);     // comment out to keep jsHint happy!\n    }, 1000);\n}\n", "/**\n*  plugin for displaying ROIs over an image canvas *\n*  Requires Raphael      http://raphaeljs.com/\n*  and scale.raphael.js  http://shapevent.com/scaleraphael/\n*/\n\n$.fn.roi_display = function(options) {\n    return this.each(function(){\n\n        var self = this;\n        var viewerId = this.id;\n\n        var $viewportimg = $(this);\n        var width = $viewportimg.attr('width');   // 0 initially\n        var height = $viewportimg.attr('height');\n\n        var tiles =  (options.tiles ? options.tiles : false);\n\n        var canvas_class = (options.canvas_class ? options.canvas_class : 'weblitz-viewport-roi');\n\n        if (!tiles) {\n            // add our ROI canvas as a sibling to the image plane. Parent is the 'draggable' div\n            var $dragdiv = $viewportimg.parent();\n            var canvas_name = (options.canvas_name ? options.canvas_name : viewerId + '-roi');\n            var $canvas =   $('<div id=\"'+canvas_name+'\" class=\"'+canvas_class+'\">').appendTo($dragdiv);\n        } else {\n            var canvas_name = (options.canvas_name ? options.canvas_name : viewerId + '-tiles-roi');\n            var $canvas = $('#'+viewerId + '-tiles-roi')\n        }\n\n        if (options != null) {\n            var orig_width = options.width;\n            var orig_height = options.height;\n            var webgateway_index = options.webgateway_index;    // base url\n            var json_url = options.json_url;\n        }\n\n        var roi_json = null;              // load ROI data as json when needed\n        var active_rois = {};             // show only the active ROIs\n        var external_rois = null;          // ROIs specified using an external software\n        var original_shapes_backup = {};  // backup of the original configuration of shapes\n        this.theZ = null;\n        this.theT = null;\n        var rois_displayed = false;         // flag to toggle visability.\n        var roi_label_displayed = true;     // show/hide labels within shapes\n\n        var selected_shape_id = null;  // html page is kept in sync with this\n        var selectedClone = null;      // a highlighted shape cloned from currently selected shape\n\n        // for keeping track of objects - E.g. de-select all.\n        var shape_objects = new Array();\n\n        // Creates Raphael canvas. Uses scale.raphael.js to provide paper.scaleAll(ratio);\n        var paper = new ScaleRaphael(canvas_name, orig_width, orig_height);\n\n        // convert given id to a number if possible\n        var resolve_id = function(id) {\n            if(isNaN(parseInt(id)))\n                return id;\n            else\n                return parseInt(id);\n        };\n\n        // break long labels into multiple lines\n        var formatShapeText = function(text_string) {\n            var rows = parseInt(Math.sqrt(text_string.length / 6));     // rough ratio: cols = rows * 6\n            var cols = parseInt(text_string.length/rows) + 1;\n            if (text_string.length > cols) {\n                var lines = [];\n                var full_words = text_string.split(\" \");\n                var words = [];\n                // first handle any words that are too long\n                for (var w=0; w<full_words.length; w++) {\n                    var full_word = full_words[w];\n                    while (full_word.length > cols) {\n                        words.push(full_word.substring(0, cols));\n                        full_word = full_word.substring(cols);\n                    }\n                    words.push(full_word);\n                }\n                // now stitch words back into lines\n                var line = \"\";\n                for (var w=0; w<words.length; w++) {\n                    var word = words[w];\n                    if (line.length == 0) {\n                        line = word;\n                    }\n                    else if (word.length + line.length > cols) {\n                        lines.push(line);\n                        line = word;\n                    }\n                    else {\n                        line += (\" \" + word);\n                    }\n                }\n                // handle the tail end\n                if (line.length > 0)\n                    lines.push(line);\n                return lines.join(\"\\n\");\n            }\n            return text_string;\n        };\n\n        var getArrowPath = function getArrowPath(shape) {\n\n            // We want the arrow tip to be precisely at x2, y2, so we\n            // can't have a fat line at x2, y2. Instead we need to\n            // trace the whole outline of the arrow with a thin line\n            var x1 = shape['x1'],\n                y1 = shape['y1'],\n                x2 = shape['x2'],\n                y2 = shape['y2'],\n                w = shape['strokeWidth'] || 1;\n            w = w * 0.5;\n\n            var arrowStart = shape.markerStart === \"Arrow\";\n            var arrowEnd = shape.markerEnd === \"Arrow\";\n\n            var headSize = (w * 12) + 9,\n                dx = x2 - x1,\n                dy = y2 - y1;\n\n            var lineAngle = Math.atan(dx / dy);\n            var f = (dy < 0 ? 1 : -1);\n\n            // We calculate the 4 corners of the Line (without arrow heads)\n            var lineOffsetX = f * Math.cos(lineAngle) * w,\n                lineOffsetY = f * Math.sin(lineAngle) * w,\n                startLeftX = x1 - lineOffsetX,\n                startLeftY = y1 + lineOffsetY,\n                startRightX = x1 + lineOffsetX,\n                startRightY = y1 - lineOffsetY,\n                endLeftX = x2 - lineOffsetX,\n                endLeftY = y2 + lineOffsetY,\n                endRightX = x2 + lineOffsetX,\n                endRightY = y2 - lineOffsetY;\n\n            var arrowPath = \"\";\n            var arrowPoint1x, arrowPoint1y, arrowPoint2x, arrowPoint2y;\n            // if line starts with arrow...\n            var arrowAngle1 = lineAngle - 0.35;\n            var arrowAngle2 = lineAngle + 0.35;\n            if (arrowStart) {\n                arrowPoint1x = x1 - (f * Math.sin(arrowAngle1) * headSize);\n                arrowPoint1y = y1 - (f * Math.cos(arrowAngle1) * headSize);\n                arrowPoint2x = x1 - (f * Math.sin(arrowAngle2) * headSize);\n                arrowPoint2y = y1 - (f * Math.cos(arrowAngle2) * headSize);\n                var startArrowPointMidx = (arrowPoint1x + arrowPoint2x) / 2,\n                    startArrowPointMidy = (arrowPoint1y + arrowPoint2y) / 2;\n                startLeftX = startArrowPointMidx - lineOffsetX;\n                startLeftY = startArrowPointMidy + lineOffsetY;\n                startRightX = startArrowPointMidx + lineOffsetX;\n                startRightY = startArrowPointMidy - lineOffsetY;\n                // start line with Start Arrow head\n                arrowPath += \" M\" + startRightX + \" \" + startRightY;\n                arrowPath += \" L\" + arrowPoint1x + \" \" + arrowPoint1y + \" L\" + x1 + \" \" + y1;\n                arrowPath += \" L\" + arrowPoint2x + \" \" + arrowPoint2y;\n                arrowPath += \" L\" + startLeftX + \" \" + startLeftY;\n            } else {\n                // ...otherwise, start with plain end of line\n                arrowPath += \" M\" + startRightX + \" \" + startRightY;\n                arrowPath += \" L\" + startLeftX + \" \" + startLeftY;\n            }\n\n            // if line ends with arrow, line end is within arrow point\n            if (arrowEnd) {\n                arrowPoint1x = x2 + (f * Math.sin(arrowAngle1) * headSize);\n                arrowPoint1y = y2 + (f * Math.cos(arrowAngle1) * headSize);\n                arrowPoint2x = x2 + (f * Math.sin(arrowAngle2) * headSize);\n                arrowPoint2y = y2 + (f * Math.cos(arrowAngle2) * headSize);\n                var endArrowPointMidx = (arrowPoint1x + arrowPoint2x) / 2,\n                    endArrowPointMidy = (arrowPoint1y + arrowPoint2y) / 2;\n                endLeftX = endArrowPointMidx - lineOffsetX;\n                endLeftY = endArrowPointMidy + lineOffsetY;\n                endRightX = endArrowPointMidx + lineOffsetX;\n                endRightY = endArrowPointMidy - lineOffsetY;\n                // End line with End Arrow Head\n                arrowPath += \" L\" + endLeftX + \" \" + endLeftY;\n                arrowPath += \" L\" + arrowPoint1x + \" \" + arrowPoint1y + \" L\" + x2 + \" \" + y2;\n                arrowPath += \" L\" + arrowPoint2x + \" \" + arrowPoint2y;\n                arrowPath += \" L\" + endRightX + \" \" + endRightY;\n            } else {\n                // ...otherwise simple line end\n                arrowPath += \" L\" + endLeftX + \" \" + endLeftY;\n                arrowPath += \" L\" + endRightX + \" \" + endRightY;\n            }\n\n            // ...and back to start point\n            arrowPath += \" L\" + startRightX + \" \" + startRightY;\n\n            return arrowPath;\n        };\n\n\n        var draw_shape = function(shape) {\n            console.log(shape['type']);\n            var newShape = null;\n            if (shape['type'] == 'Mask') {\n              var src = webgateway_index + 'render_shape_mask/' + shape['id'] + '/';\n              newShape = paper.image(src, shape['x'], shape['y'], shape['width'], shape['height']);\n            }\n            if (shape['type'] == 'Ellipse') {\n              newShape = paper.ellipse(shape['x'], shape['y'], shape['radiusX'], shape['radiusY']);\n            }\n            else if (shape['type'] == 'Rectangle') {\n              newShape = paper.rect(shape['x'], shape['y'], shape['width'], shape['height']);\n            }\n            else if (shape['type'] == 'Point') {\n              newShape = paper.ellipse( shape['x'], shape['y'], 2, 2);\n            }\n            else if (shape['type'] == 'Line') {\n              // define line as 'path': Move then Line: E.g. \"M10 10L90 90\"\n\n              if (shape.markerStart || shape.markerEnd) {\n                var arrowPath = getArrowPath(shape);\n\n                newShape = paper.path(arrowPath);\n                newShape.attr({'stroke-width': 0});\n                // We don't want to apply strokeWidth later\n                shape['strokeWidth'] = 0;\n                shape['fillColor'] = shape['strokeColor'];\n                shape['fillAlpha'] = shape['strokeAlpha'];\n              } else {\n                newShape = paper.path(\"M\"+ shape['x1'] +\" \"+ shape['y1'] +\"L\"+ shape['x2'] +\" \"+ shape['y2'] );\n              }\n\n            }\n            else if (shape['type'] == 'PolyLine') {\n              newShape = paper.path( shape['points'] );\n            }\n            else if (shape['type'] == 'Polygon') {\n              newShape = paper.path( shape['points'] );\n            }\n            else if (shape['type'] == 'Label') {\n              if (shape['textValue']) {\n                  newShape = paper.text(shape['x'], shape['y'], shape['textValue'].escapeHTML()).attr({'text-anchor':'start'});\n              }\n            }\n            // handle transforms. Insight supports: translate(354.05 83.01) and rotate(0 407.0 79.0)\n            if (shape['transform']) {\n                if (shape['transform'].substr(0, 'translate'.length) === 'translate'){\n                    var tt = shape['transform'].replace('translate(', '').replace(')', '').split(\" \");\n                    var tx = parseInt(tt[0]);   // only int is supported by Raphael\n                    var ty = parseInt(tt[1]);\n                    newShape.translate(tx,ty);\n                }\n                else if (shape['transform'].substr(0, 'rotate'.length) === 'rotate'){\n                    var tt = shape['transform'].replace('rotate(', '').replace(')', '').split(\" \");\n                    var deg = parseFloat(tt[0]);\n                    var rotx = parseFloat(tt[1]);\n                    var roty = parseFloat(tt[2]);\n                    newShape.rotate(deg, rotx, roty);\n                }\n                else if (shape['transform'].substr(0, 'matrix'.length) === 'matrix'){\n                    var tt = shape['transform'].replace('matrix(', '').replace(')', '').split(\" \");\n                    var a1 = parseFloat(tt[0]);\n                    var a2 = parseFloat(tt[1]);\n                    var b1 = parseFloat(tt[2]);\n                    var b2 = parseFloat(tt[3]);\n                    var c1 = parseFloat(tt[4]);\n                    var c2 = parseFloat(tt[5]);\n                    var tmatrix = \"m\"+a1+\",\"+a2+\",\"+b1+\",\"+b2+\",\"+c1+\",\"+c2;\n                    newShape.transform(tmatrix);\n                }\n            }\n            return newShape;\n        }\n\n        var get_tool_tip = function(shape) {\n            var toolTip = \"\";\n            if (shape['type'] == 'Ellipse') {\n              toolTip = \"x:\"+ shape['x'] +\" y:\"+ shape['y'] +\" radiusX:\"+ shape['radiusX'] + \" radiusY: \"+  shape['radiusY'];\n            }\n            else if (shape['type'] == 'Rectangle') {\n              toolTip = \"x:\"+ shape['x'] +\" y:\"+ shape['y'] +\n                \" width:\"+ shape['width'] + \" height: \"+  shape['height'];\n            }\n            else if (shape['type'] == 'Point') {\n              toolTip = \"x:\"+ shape['x'] +\" y:\"+ shape['y'];\n            }\n            else if (shape['type'] == 'Line') {\n              toolTip = \"x1:\"+ shape['x1'] +\" y1:\"+ shape['y1'] +\" x2:\"+ shape['x2'] +\" y2:\"+ shape['y2'];\n            }\n            else if (shape['type'] == 'PolyLine') {\n            }\n            else if (shape['type'] == 'Polygon') {\n            }\n            else if (shape['type'] == 'Label') {\n            }\n            return toolTip;\n        }\n\n        // if the currently selected shape is visible - highlight it\n        display_selected = function() {\n            // *NB: For some reason, can't overlay text with selectedClone.\n            // So, for text shapes, we highlight by editing attributes instead.\n            if ((selectedClone != null) && (selectedClone.type != 'text')) {\n                if (selectedClone.node.parentNode.parentNode) selectedClone.remove();\n            }\n            if (selected_shape_id == null) return;\n\n            selectedClone = null;\n            for (var i=0; i<shape_objects.length; i++) {\n                var s = shape_objects[i];\n                var shape_id = resolve_id(s.id);\n                if (shape_id == selected_shape_id) {\n                    if (s.type == 'text') {\n                        selectedClone = null;\n                        strokeWidth = Math.ceil(s.attr('font-size')/10);\n                        s.attr({'stroke': '#00a8ff', 'stroke-width': strokeWidth});\n                    } else {\n                        strokeWidth = (s.attr('stroke-width') > 0) ? Math.ceil(s.attr('stroke-width')/2) : 1;\n                        selectedClone = s.clone();\n                        selectedClone.attr({'stroke': '#00a8ff', 'stroke-width': strokeWidth,\n                                            'fill-opacity': 0});\n                    }\n                } else {\n                    if (s.type == 'text') {\n                        s.attr({'stroke': null, 'stroke-width': null}); // remove stroke\n                    }\n                }\n            }\n            return selectedClone;\n        }\n\n        this.set_selected_shape = function(shape_id) {\n            selected_shape_id = shape_id;\n            $viewportimg.trigger(\"shape_click\", [shape_id]);\n            var sel_shape = display_selected();\n            var sel_x;\n            var sel_y;\n            // we will only get the shape if currently displayed (current Z/T section)\n            if (sel_shape===null) {\n                // otherwise we have to work it out by drawing it\n                var bb = null;\n                for (var r=0; r<roi_json.length; r++) {\n                    if (bb != null)   break;\n                    var roi = roi_json[r];\n                    var shapes = roi['shapes'];\n                    var shape = null;\n                    for (var s=0; s<shapes.length; s++) {\n                        shape = shapes[s];\n                        if (shape['id'] == selected_shape_id) {\n                            var newShape = draw_shape(shape);\n                            bb = newShape.getBBox();\n                            newShape.remove();\n                            if (shape['type'] == 'Label'){\n                                // bug in BBox for text\n                                sel_x = shape['x'] + (bb.width/2);\n                                sel_y = shape['y'] + (bb.height/2);\n                            } else {\n                                sel_x = bb.x + (bb.width/2);\n                                sel_y = bb.y + (bb.height/2);\n                            }\n                        }\n                    }\n                }\n            } else {\n                var bb = sel_shape.getBBox();\n                sel_x = bb.x + (bb.width/2);\n                sel_y = bb.y + (bb.height/2);\n            }\n            return {'x':sel_x, 'y':sel_y};\n        }\n\n        // called when user clicks on ROI\n        handle_shape_click = function(event) {\n            var shape = this;\n            var shape_id = resolve_id(shape.id);\n            self.set_selected_shape(shape_id);\n        }\n\n        // load the ROIs from json call and display\n        load_rois = function(display_rois, filter, callback) {\n            if (json_url == undefined) return;\n\n            $.getJSON(json_url+'?callback=?', function(data) {\n                roi_json = data;\n\n                // plot the rois\n                if (display_rois) {\n                  rois_displayed = true;\n                  refresh_rois(undefined, undefined, filter);\n                }\n                $viewportimg.trigger(\"rois_loaded\");\n\n                if (callback) {\n                    callback();\n                }\n            });\n        }\n\n        /*\n        If filter is not 'undefined' use the given ROI and shape IDs to build the list of active\n        elements that will be shown by the web viewer.\n        Filter is an associative array like\n          {\n           12: [1,2,3],\n           13: []\n          }\n        where keys are the ID of the ROIs and values lists with IDs of the selected shapes for\n        the given ROIs. If the value of a key is an empty list, all shapes related to that ROI\n        will be considered as active.\n        If the filter is 'undefined' set all ROIs and shapes coming from the DB as active.\n        The active_rois object will be used to determinate which shapes will be displayed by the\n        user interface when a change on the viewport occurs (like changing the Z or the T value).\n         */\n        filter_rois = function (filter) {\n            var global_rois = [];\n            $.merge(global_rois, roi_json);\n            if (external_rois)\n                $.merge(global_rois, external_rois);\n\n            if (filter != undefined) {\n                for (var r=0; r<global_rois.length; r++) {\n                    // check if ROI is in filter\n                    if (filter.hasOwnProperty(global_rois[r].id)) {\n                        if (!active_rois.hasOwnProperty(global_rois[r].id))\n                            active_rois[global_rois[r].id] = [];\n                        // check if one or more shapes of the current ROI are in filter\n                        var shapes = global_rois[r]['shapes'];\n                        for (s=0; s<shapes.length; s++) {\n                            if (filter[global_rois[r].id].indexOf(shapes[s].id) != -1 &&\n                                active_rois[global_rois[r].id].indexOf(shapes[s].id) == -1) {\n                                active_rois[global_rois[r].id].push(shapes[s].id);\n                            }\n                        }\n                    }\n                }\n            } else {\n                for (var r=0; r<global_rois.length; r++) {\n                    if (!active_rois.hasOwnProperty(global_rois[r].id)) {\n                        active_rois[global_rois[r].id] = [];\n                    }\n                    var shapes = global_rois[r]['shapes'];\n                    for (s=0; s<shapes.length; s++) {\n                        if (active_rois[global_rois[r].id].indexOf(shapes[s].id) == -1)\n                            active_rois[global_rois[r].id].push(shapes[s].id);\n                    }\n                }\n            }\n        }\n\n        /*\n        Use active_rois to actually filter and retrieve ROIs and shapes that are going to be\n        visualized in the viewport from the list of ROIs retrieved from the server.\n        The list of ROIs coming from the server, referenced as 'roi_json', won't be modified.\n         */\n        get_active_rois = function () {\n            var act_rois = [];\n\n            // merge ROIs coming from OMERO server and external ROIs\n            var global_rois = [];\n            $.merge(global_rois, roi_json);\n            if (external_rois)\n                $.merge(global_rois, external_rois);\n            for (var r=0; r<global_rois.length; r++) {\n                if (active_rois.hasOwnProperty(global_rois[r].id)) {\n                    var roi = {\"id\": global_rois[r].id};\n                    var shapes = global_rois[r].shapes;\n                    if (active_rois[global_rois[r].id].length == 0) {\n                        // No filter for the shapes, append all of them\n                        roi['shapes'] = shapes;\n                        // Update filter as well, this will make possible to selectively disable shapes\n                        for (s = 0; s < shapes.length; s++) {\n                            active_rois[global_rois[r].id].push(shapes[s].id);\n                        }\n                    }\n                    else {\n                        roi['shapes'] = [];\n                        for (s=0; s<shapes.length; s++) {\n                            // Add only active shapes\n                            if (active_rois[global_rois[r].id].indexOf(shapes[s].id) != -1) {\n                                roi['shapes'].push(shapes[s]);\n                            }\n                        }\n                    }\n                    act_rois.push(roi);\n                }\n            }\n            return act_rois;\n        }\n\n        // get the filter that describes currently active ROIs and shapes\n        this.get_current_rois_filter = function() {\n            if (typeof active_rois != \"undefined\") {\n                if (Object.keys(active_rois).length == 0) {\n                    return undefined;\n                } else {\n                    return active_rois;\n                }\n            } else {\n                return undefined;\n            }\n        }\n\n        // activate ROI with ID 'roi_id' and its related shapes\n        this.activate_roi = function (roi_id) {\n            var roi_id = resolve_id(roi_id);\n            if (!active_rois.hasOwnProperty(roi_id)) {\n                active_rois[roi_id] = [];\n            }\n        }\n\n        // deactivate ROI with ID 'roi_id' and its related shapes\n        this.deactivate_roi = function (roi_id) {\n            var roi_id = resolve_id(roi_id);\n            if (active_rois.hasOwnProperty(roi_id)) {\n                delete active_rois[roi_id];\n            }\n        }\n\n        // activate shape with ID 'shape_id' related to ROI with ID 'roi_id'\n        this.activate_shape = function (roi_id, shape_id) {\n            var roi_id = resolve_id(roi_id);\n            var shape_id = resolve_id(shape_id);\n            if (active_rois.hasOwnProperty(roi_id)) {\n                if (active_rois[roi_id].indexOf(shape_id) == -1)\n                    active_rois[roi_id].push(shape_id);\n            } else {\n                this.activate_roi(roi_id);\n                this.activate_shape(roi_id, shape_id);\n            }\n        }\n\n        // deactivate shape with ID 'shape_id' related to ROI with ID 'roi_id'\n        this.deactivate_shape = function(roi_id, shape_id) {\n            var roi_id = resolve_id(roi_id);\n            var shape_id = resolve_id(shape_id);\n            if (active_rois.hasOwnProperty(roi_id)) {\n                if (active_rois[roi_id].indexOf(shape_id) != -1) {\n                    active_rois[roi_id].splice(active_rois[roi_id].indexOf(shape_id), 1);\n                }\n                // If no shape remains, delete the ROI from active_rois list\n                if (active_rois[roi_id].length == 0) {\n                    this.deactivate_roi(roi_id);\n                }\n            }\n        }\n\n        // returns the ROI data as json. May be null if not yet loaded!\n        this.get_roi_json = function() {\n            return roi_json;\n        }\n\n        // return the data of external ROI as json. May be null if not loaded!\n        this.get_external_rois_json = function() {\n            return external_rois;\n        }\n\n        // get json of all ROI, OME ones and external ones, as a unique list\n        this.get_full_roi_json = function() {\n            if (!roi_json && !external_rois)\n                return null;\n            else if (roi_json && external_rois)\n                return $.merge(roi_json, external_rois);\n            else if (roi_json && !external_rois)\n                return roi_json;\n            else if (!roi_json && external_rois)\n                return external_rois;\n        }\n\n        /*\n        Check if given ROI and SHAPE ID can be used to define a new external ROI.\n        ROI ID is valid if it is not alredy in use by an OME ROI.\n        SHAPE ID is valid if it is not alredy in use by another shape for external ROI with given ROI ID.\n         */\n        var check_ext_shape_id = function(roi_id, shape_id) {\n            // check if ROI ID is already used by one on OMERO's ROIs...\n            for (var rx=0; rx<roi_json.length; rx++) {\n                if (roi_json[rx][\"id\"] == roi_id) {\n                    console.error(\"ID \" + roi_id + \" already used by one of OMERO ROIs\");\n                    return false;\n                }\n            }\n            // ... if roi_id is used by an external ROI, check shape_id\n            for (var rx=0; rx<external_rois.length; rx++) {\n                if (external_rois[rx][\"id\"] == roi_id) {\n                    var shapes = external_rois[rx][\"shapes\"];\n                    for (var sx=0; sx<shapes.length; sx++) {\n                        if (shapes[sx][\"id\"] == shape_id) {\n                            console.error(\"Shape ID \" + shape_id + \" already in use for ROI \" + roi_id);\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n\n        // Check if there is another shape with on the same Z and T planes for this ROI\n        var check_ext_shape_planes = function(roi_id, shape_z, shape_t) {\n            for (var rx=0; rx<external_rois.length; rx++) {\n                if (external_rois[rx][\"id\"] == roi_id) {\n                    var shapes = external_rois[rx][\"shapes\"];\n                    for(var sx=0; sx<shapes.length; sx++) {\n                        if (shapes[sx][\"theZ\"] == shape_z && shapes[sx][\"theT\"] == shape_t) {\n                            console.error(\"Z plane \" + shape_z + \" and T plane \" + shape_t + \" already used\");\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n\n        // configure a shape obtained using function in ome.roiutils.js as a proper shape for OMERO.web viewer\n        var configure_shape = function(shape_id, shape_config) {\n            shape_config[\"id\"] = shape_id;\n        }\n\n        // build a proper ROI definition that can be used by OMERO.web viewer\n        var build_roi_description = function(roi_id, shapes) {\n            return {\n                \"id\": roi_id,\n                \"shapes\": typeof shapes !== \"undefined\" ? shapes : []\n            };\n        }\n\n        // append a shape to ROI with ID roi_id\n        var append_shape = function(roi_id, shape_config, rois_collection) {\n            for (var x=0; x<rois_collection.length; x++) {\n                if (rois_collection[x][\"id\"] == roi_id) {\n                    // ROI with ID roi_id already exists, append shape\n                    rois_collection[x][\"shapes\"].push(shape_config);\n                    return;\n                }\n            }\n            var roi = build_roi_description(roi_id, [shape_config]);\n            rois_collection.push(roi);\n        };\n\n        /*\n        Add a SHAPE definition to OMERO.web viewer. Shape will be associated to ROI with ID roi_id\n        and will obtain ID shape_id. Shape is described using shape_config dictionary.\n        If refresh_rois is TRUE, automatically refresh viewport.\n        If hide_ome_rois is TRUE, hide OME ROI when refreshing viewport.\n         */\n        this.add_external_shape = function(roi_id, shape_id, shape_config, refresh_rois, hide_ome_rois) {\n            if (roi_json == null) {\n                load_rois(false, undefined, function() {\n                    $viewportimg.trigger(\"add_external_shape\",\n                        [roi_id, shape_id, shape_config, refresh_rois, hide_ome_rois]);\n                });\n            } else {\n                $viewportimg.trigger(\"add_external_shape\", [roi_id, shape_id, shape_config, refresh_rois,\n                    hide_ome_rois]);\n            }\n        };\n\n        $viewportimg.on(\"add_external_shape\", function (event, roi_id, shape_id, shape_config,\n                                                        refresh_rois, hide_ome_rois) {\n            var roi_id = resolve_id(roi_id);\n            var shape_id = resolve_id(shape_id);\n\n            // initialize external_rois when used for the first time\n            if (!external_rois) {\n                external_rois = [];\n            }\n\n            var check_shape_id = check_ext_shape_id(roi_id, shape_id);\n            var check_shape_planes = check_ext_shape_planes(roi_id, shape_config['theZ'],\n                shape_config['theT']);\n\n            if (check_shape_id && check_shape_planes) {\n                // add ID to the shape\n                configure_shape(shape_id, shape_config);\n                // append shape to proper ROI\n                append_shape(roi_id, shape_config, external_rois);\n                this.activate_roi(roi_id);\n            }\n\n            // refresh current ROIs (False by default)\n            var refresh = typeof refresh_rois !== \"undefined\" ? refresh_rois : false;\n            if (refresh) {\n                // if hide_ome_rois is true, deactivate all ROIs coming from OMERO before refresh\n                var hide_oroi = typeof hide_ome_rois !== \"undefined\" ? hide_ome_rois : false;\n                if (hide_oroi && active_rois) {\n                    for (var r = 0; r < roi_json.length; r++) {\n                        this.deactivate_roi(roi_json[r][\"id\"]);\n                    }\n                }\n                this.refresh_active_rois();\n            }\n        });\n\n        /*\n        Remove SHAPE with ID shape_id from ROI with ID roi_id from external ROI list.\n        If refresh is TRUE, automatically refresh viewport.\n         */\n        this.remove_external_shape = function(roi_id, shape_id, refresh) {\n            if (! external_rois) {\n                console.warn(\"There are no external ROIs, nothing to do\");\n                return;\n            }\n            for(var r=0; r<external_rois.length; r++) {\n                var roi = external_rois[r];\n                if (roi[\"id\"] == resolve_id(roi_id)) {\n                    for(var s=0; s<roi[\"shapes\"].length; s++) {\n                        var shape = roi[\"shapes\"][s];\n                        if (shape[\"id\"] == resolve_id(shape_id)) {\n                            roi[\"shapes\"].splice(roi[\"shapes\"].indexOf(shape), 1);\n\n                            // If it was the last shape for the current ROI, delete the ROI as well\n                            if(roi[\"shapes\"].length == 0) {\n                                console.warn(\"No shape connected, removing ROI \" + roi_id);\n                                this.remove_roi(roi_id, refresh);\n                            } else {\n                                // refresh ROIs, if needed\n                                var refresh = typeof refresh_rois !== \"undefined\" ? refresh_rois : false;\n                                if (refresh)\n                                    this.refresh_active_rois();\n\n                                return;\n                            }\n                        }\n                    }\n                    console.warn(\"There is no Shape with ID \" + shape_id + \" for ROI \" + roi_id);\n                    return;\n                }\n            }\n            console.warn(\"There is no ROI with ID \" + roi_id);\n        };\n        /*\n        Remove ROI with ID roi_id from external ROI list.\n        If refresh is TRUE, automatically refresh viewport.\n         */\n        this.remove_external_roi = function(roi_id, refresh) {\n            if (! external_rois) {\n                console.warn(\"There are no external ROIs, nothing to do\");\n                return;\n            }\n            for (var r=0; r<external_rois.length; r++) {\n                var roi = external_rois[r];\n                if (roi[\"id\"] == resolve_id(roi_id)) {\n                    external_rois.splice(external_rois.indexOf(roi), 1);\n                    this.deactivate_roi(resolve_id(roi_id));\n\n                    var refresh = typeof refresh !== \"undefined\" ? refresh : false;\n                    if (refresh) {\n                        if (Object.keys(active_rois).length != 0) {\n                            this.refresh_active_rois();\n                        } else {\n                            this.hide_rois();\n                        }\n                    }\n                    return;\n                }\n            }\n            console.warn(\"There is no ROI with ID \" + roi_id);\n        }\n\n        /*\n        Clears paper and draws ROIs (if rois_displayed) for the given T and Z. NB: indexes are 1-based.\n        Only shapes in 'active_rois' are going to be displayed.\n        */\n        this.refresh_rois = function(theZ, theT, rois_filter) {\n\n            if (typeof theZ != 'undefined') this.theZ = theZ;\n            if (typeof theT != 'undefined') this.theT = theT;\n\n            paper.clear();\n            shape_objects.length = 0;\n            if (!rois_displayed) return;\n            // build the filter for active ROIs and shapes\n            filter_rois(rois_filter);\n            // apply the filter and get the description of ROIs and shapes that will be displayed\n            var rois = get_active_rois();\n            if (rois == null) return;\n\n            for (var r=0; r<rois.length; r++) {\n                var roi = rois[r];\n                var shapes = roi['shapes'];\n                var shape = null;\n                for (var s=0; s<shapes.length; s++) {\n                    shape = shapes[s];\n                    if (((shape.theT == this.theT-1)\n                         || typeof shape.theT === \"undefined\")\n                        && ((shape.theZ == this.theZ-1)\n                            || typeof shape.theZ === \"undefined\")) {\n                        var newShape = draw_shape(shape);\n                        var toolTip = get_tool_tip(shape);\n                        // Add text - NB: text is not 'attached' to shape in any way.\n                        if (newShape != null) {\n                            if (shape['type'] == 'PolyLine') {\n                                newShape.attr({'fill-opacity': 0});\n                            }\n                            if ((shape['textValue'] != null) && (shape['textValue'].length > 0)) {\n                                // Show text\n                                if (shape['type'] == 'Label') {\n                                    var txt = newShape; // if shape is label itself, use it\n                                    if (shape['strokeColor']) txt.attr({'fill': shape['strokeColor']}); // this is Insight's behavior\n                                    txt.attr({'stroke': null });\n                                } else if (roi_label_displayed) {\n                                    // otherwise, add a new label in the centre of the shape.\n                                    var bb = newShape.getBBox();\n                                    var textx = bb.x + (bb.width/2);\n                                    var texty = bb.y + (bb.height/2);\n                                    var text_string = formatShapeText(shape['textValue'])\n                                    var txt = paper.text(textx, texty, text_string);    // draw a 'dummy' paragraph to work out it's dimensions\n                                    var newY = (texty-txt.getBBox().height/2)+9;\n                                    // moving the existing text to newY doesn't seem to work - instead, remove and draw a new one\n                                    txt.remove();\n                                    txt = paper.text(textx, newY, formatShapeText(shape['textValue']))\n                                               .attr({'cursor':'default', 'fill': shape['strokeColor']}); // this is Insight's behavior\n                                    txt_box = txt.getBBox();\n                                    var txt_w = txt_box.width*1.3;\n                                    var txt_h = txt_box.height*1.3;\n                                    txt.toFront();\n                                    // clicking the text should do the same as clicking the shape\n                                    txt.id = shape['id'] + \"_shape_text\";\n                                    txt.click(handle_shape_click);\n\n                                }\n\n                                // handle other text-specific attributes...\n                                var txtAttr = {};\n                                if (shape['fontFamily']) {  // model: serif, sans-serif, cursive, fantasy, monospace. #5072\n                                    // raphael supports all these exactly - so we can pass directly.\n                                    txtAttr['font-family'] = shape['fontFamily'];\n                                }\n                                if (shape['fontSize']) {\n                                    txtAttr['font-size'] = shape['fontSize'];\n                                }\n                                if (shape['fontStyle']) { // model: Normal, Italic, Bold, Bolditalic\n                                    var fs = shape['fontStyle'];\n                                    if ((fs == 'Bold') || (fs == 'BoldItalic')) {\n                                        txtAttr['font-weight'] = 'bold';\n                                    }\n                                    if ((fs == 'Italic') || (fs == 'BoldItalic')) {\n                                        txtAttr['font-style'] = 'italic';\n                                    }\n                                }\n                                if (txt) txt.attr(txtAttr);\n                            }\n                            if (shape['type'] != 'Label') {\n                                // these shape attributes are not applied to text\n                                if (shape['fillColor'] && shape['type'] != 'PolyLine') {\n                                    // don't show fills on PolyLines\n                                    newShape.attr({'fill': shape['fillColor']});\n                                    if (shape['fillAlpha']) { newShape.attr({'fill-opacity': shape['fillAlpha']})}\n                                }\n                                else {\n                                    // need *some* fill so that shape is clickable\n                                    newShape.attr({'fill':'#000', 'fill-opacity': 0.01 });\n                                }\n                                if (shape['strokeAlpha']) { newShape.attr({'stroke-opacity': shape['strokeAlpha']}); }\n                                if (shape['strokeColor']) { newShape.attr({'stroke': shape['strokeColor']}); }\n                                else { newShape.attr({'stroke': '#ffffff'}); }  // white is default\n                            }\n                            newShape.attr({'cursor':'default'});\n                            if (shape['strokeWidth']) { newShape.attr({'stroke-width': shape['strokeWidth']}); }\n                            newShape.click(handle_shape_click);\n                            newShape.attr({ title: toolTip });\n                            newShape.id = shape['id'] + \"_shape\";\n                            shape_objects.push(newShape);\n                        }\n\n                    }\n                }\n            }\n            // if the new display includes selected-shape - show it\n            display_selected();\n        }\n\n        // refresh the viewport using 'active_rois' as filter\n        this.refresh_active_rois = function (theZ, theT) {\n            rois_displayed = true;\n            refresh_rois(theZ, theT, active_rois);\n        }\n\n        // loads the ROIs if needed and displays them\n        this.show_rois = function(theZ, theT, filter) {\n            this.theZ = theZ;\n            this.theT = theT;\n          if (roi_json == null) {\n              load_rois(true, filter);      // load and display\n          } else {\n              rois_displayed = true;\n              this.refresh_rois(undefined, undefined, filter);\n          }\n        }\n\n        // hides the ROIs from display\n        this.hide_rois = function(hide_ome_rois, hide_external_rois) {\n            var hide_ome_rois = typeof hide_ome_rois !== \"undefined\" ? hide_ome_rois : true;\n            var hide_external_rois = typeof hide_external_rois !== \"undefined\" ? hide_external_rois : true;\n\n            if (!hide_ome_rois && !hide_external_rois) {\n                console.warn(\"HIDE_OME_ROIS and HIDE_EXTERNAL_ROIS are False, nothing to do\");\n                return;\n            }\n\n            if (hide_ome_rois && hide_external_rois) {\n                rois_displayed = false;\n                active_rois = {};\n                this.refresh_rois();\n            } else {\n                if (!hide_ome_rois) {\n                    for (var r = 0; r < external_rois.length; r++) {\n                        delete(active_rois[external_rois[r].id]);\n                    }\n                }\n                else if (!hide_external_rois) {\n                    for (var r = 0; r < roi_json.length; r++) {\n                        delete(active_rois[roi_json[r].id]);\n                    }\n                }\n                if (Object.keys(active_rois).length == 0) {\n                    rois_displayed = false;\n                    this.refresh_rois();\n                }\n                else {\n                    this.refresh_active_rois();\n                }\n            }\n        }\n\n        // Retrieve shape with ID shape_id from ROI with ID roi_di from roi_list\n        get_shape = function(roi_id, shape_id, roi_list) {\n            for (var rx=0; rx<roi_list.length; rx++) {\n                if (roi_list[rx].id == roi_id) {\n                    var shapes = roi_list[rx].shapes;\n                    for (var sx=0; sx<shapes.length; sx++) {\n                        if (shapes[sx].id == shape_id)\n                            return shapes[sx];\n                    }\n                    console.error(\"ROI with ID \" + roi_id + \"has no shape with ID \" + shape_id);\n                }\n            }\n            return null;\n        }\n\n        // Get backup key for given roi_id and shape_id\n        get_backup_key = function(roi_id, shape_id) {\n            return roi_id + \"::\" + shape_id;\n        }\n\n        /*\n        Save a backup copy of shape_config using shape_id and roi_id to build backup key.\n        If a backup for given shape_id and roi_id already exists, do nothing.\n         */\n        backup_shape = function(roi_id, shape_id, shape_conf) {\n            var backup_key = get_backup_key(roi_id, shape_id);\n            if (!(backup_key in original_shapes_backup)) {\n                // clone the shape_conf object as \"original\" and keep a reference to updated object (used to restore)\n                original_shapes_backup[backup_key] = $.extend({}, shape_conf);\n            }\n        }\n\n        /*\n        Restore from backup SHAPE with ID shape_id for ROI with id roi_id.\n        If refresh_view is TRUE, automatically refresh viewport.\n         */\n        this.restore_shape = function(roi_id, shape_id, refresh_view) {\n            var refresh_view = typeof refresh_view !== \"undefined\" ? refresh_view : true;\n            var backup_key = get_backup_key(roi_id, shape_id);\n            if (backup_key in original_shapes_backup) {\n                var original_shape = original_shapes_backup[backup_key];\n                this.update_shape_text(roi_id, shape_id, original_shape.textValue, original_shape.fontFamily,\n                    original_shape.fontSize, original_shape.fontStyle, false);\n                this.update_shape_config(roi_id, shape_id, original_shape.strokeColor, original_shape.strokeAlpha,\n                    original_shape.strokeWidth, original_shape.fillColor, original_shape.fillAlpha, false);\n                delete original_shapes_backup[backup_key];\n\n                if (refresh_view) {\n                    this.refresh_active_rois();\n                }\n            }\n        }\n\n        // Restore all shapes with a backup\n        this.restore_shapes = function(refresh_view) {\n            var refresh_view = typeof refresh_view !== \"undefined\" ? refresh_view : true;\n\n            for (var bk_key in original_shapes_backup) {\n                var sh_id = bk_key.split(\"::\");\n                this.restore_shape(sh_id[0], sh_id[1], false);\n            }\n\n            if (refresh_view) {\n                this.refresh_active_rois();\n            }\n        }\n\n        /*\n        Update text for SHAPE with ID shape_id related to ROI with ID roi_id.\n        Only input values that are not \"undefined\" will be updated, previuos value will be kept\n        for all values passed as \"undefined\".\n         */\n        this.update_shape_text = function (roi_id, shape_id, text_value, font_family, font_size, font_style,\n                                           refresh_view) {\n            var refresh_view = typeof refresh_view !== \"undefined\" ? refresh_view : true;\n\n            // look for shape in OME ROIs and external ones\n            var sh = get_shape(roi_id, shape_id, roi_json);\n            if (!sh)\n                sh = get_shape(roi_id, shape_id, external_rois);\n\n            if (sh) {\n                backup_shape(roi_id, shape_id, sh);\n\n                sh.textValue = typeof text_value !== \"undefined\" ? text_value : sh.textValue;\n                sh.fontFamily = typeof font_family !== \"undefined\" ? font_family : sh.fontFamily;\n                sh.fontSize = typeof font_size !== \"undefined\" ? font_size : sh.fontSize;\n                sh.fontStyle = typeof font_style !== \"undefined\" ? font_style : sh.fontStyle;\n\n                if(refresh_view) {\n                    this.refresh_active_rois();\n                }\n            } else {\n                console.error(\"Unable to find a shape for ROI ID \" + roi_id + \" and SHAPE ID \" + shape_id);\n            }\n        }\n\n        /*\n        Update shape configuration for SHAPE with ID shape_id related to ROI with ID roi_id.\n        Only input values that are not \"undefined\" will be updated, previuos value will be kept\n        for all values passed as \"undefined\".\n         */\n        this.update_shape_config = function(roi_id, shape_id, stroke_color, stroke_alpha,\n                                            stroke_width, fill_color, fill_alpha, refresh_view) {\n            var refresh_view = typeof refresh_view !== \"undefined\" ? refresh_view : true;\n\n            // look for shape in OME ROIs and external ones\n            var sh = get_shape(roi_id, shape_id, roi_json);\n            if (!sh)\n                sh = get_shape(roi_id, shape_id, external_rois);\n\n            if (sh) {\n                backup_shape(roi_id, shape_id, sh);\n\n                sh.strokeWidth = typeof stroke_width !== \"undefined\" ? stroke_width : sh.strokeWidth;\n                sh.strokeAlpha = typeof stroke_alpha !== \"undefined\" ? stroke_alpha : sh.strokeAlpha;\n                sh.strokeColor = typeof stroke_color !== \"undefined\" ? stroke_color : sh.strokeColor;\n                sh.fillAlpha = typeof fill_alpha !== \"undefined\" ? fill_alpha : sh.fillAlpha;\n                sh.fillColor = typeof fill_color !== \"undefined\" ? fill_color : sh.fillColor;\n\n                if(refresh_view) {\n                    this.refresh_active_rois();\n                }\n            } else {\n                console.error(\"Unable to find a shape for ROI ID \" + roi_id + \" and SHAPE ID \" + shape_id);\n            }\n        }\n\n        this.show_labels = function(visible, filter) {\n            roi_label_displayed = visible;\n            this.refresh_rois(undefined, undefined, filter);\n        }\n\n        // sets the Zoom of the ROI paper (canvas)\n        this.setRoiZoom = function(percent) {\n            paper.scaleAll(percent/100);\n        }\n\n    });\n\n}\n", "\n$(function(){\n\n    if (OME === undefined) {\n        window.OME = {};\n    }\n\n    // Can be called from anywhere, E.g. center_plugin.thumbs\n    OME.emptyWellBirdsEye = function() {\n        $(\"#well_birds_eye\").empty()\n            .off(\"click\");\n    };\n    OME.hideWellBirdsEye = function() {\n        $(\"#tree_details\").css('height', '100%');\n        $(\"#well_details\").css('height', '0').css('display', 'none');\n\n        // Also clear content\n        OME.emptyWellBirdsEye();\n    };\n    $(\"#hide_well_birds_eye\").on('click', OME.hideWellBirdsEye);\n\n\n    OME.WellBirdsEye = function(opts) {\n\n        var $tree_details = $(\"#tree_details\");\n        var $well_details = $(\"#well_details\");\n        var $well_birds_eye = $(\"#well_birds_eye\");\n\n        function selectionChanged() {\n            var imageIds = [];\n            $('.ui-selected', $well_birds_eye).each(function(ws){\n                imageIds.push(parseInt(this.getAttribute('data-imageId'), 10));\n            });\n            if (opts.callback) {\n                opts.callback(imageIds);\n            }\n        };\n\n        // Drag selection on WellSample images\n        $(\"#well_birds_eye_container\").selectable({\n            filter: 'img',\n            distance: 2,\n            stop: function(){\n                selectionChanged();\n            }\n        });\n        // Handle click on image\n        $well_birds_eye.on( \"click\", \"img\", function(event) {\n            if (event.metaKey) {\n                // Ctrl click - simply toggle clicked image\n                $(event.target).toggleClass('ui-selected');\n            } else {\n                // select ONLY clicked image\n                $(\"img\", $well_birds_eye).removeClass('ui-selected');\n                $(event.target).addClass('ui-selected');\n            }\n            selectionChanged();\n        });\n\n        function showPanel() {\n            $tree_details.css('height', '70%');\n            $well_details.css('height', '30%')\n                .css('display', 'block');\n        }\n\n        function getPos(attr) {\n            return function(ws) {\n                return ws.position[attr] ? ws.position[attr].value : undefined;\n            };\n        }\n        function notUndef(p) {\n            return p !== undefined;\n        }\n\n        // 'public' methods returned...\n        return {\n            clear: function() {\n                $well_birds_eye.empty();\n            },\n            setSelected: function(imageIds) {\n                $(\"img\", $well_birds_eye).removeClass('ui-selected');\n                imageIds.forEach(function(iid){\n                    $(\"img[data-imageId=\" + iid + \"]\", $well_birds_eye).addClass('ui-selected');\n                });\n            },\n            addWell: function(data) {\n\n                var minX,\n                    maxX,\n                    minY,\n                    maxY;\n\n                // first filter for well-samples that have positions\n                data = data.filter(function(ws){ return ws.position !== undefined; });\n\n                // Only show panel if we have some data\n                if (data.length > 0) {\n                    showPanel();\n                }\n\n                var xVals = data.map(getPos('x')).filter(notUndef);\n                var yVals = data.map(getPos('y')).filter(notUndef);\n                minX = Math.min.apply(null, xVals);\n                maxX = Math.max.apply(null, xVals);\n                var midX = ((maxX - minX)/2) + minX;\n                minY = Math.min.apply(null, yVals);\n                maxY = Math.max.apply(null, yVals);\n\n                // Resize the well_birds_eye according to extent of field positions...\n                var whRatio = 1;\n                if (maxX !== minX || maxY !== minY) {\n                    whRatio = (maxX - minX) / (maxY - minY);\n                }\n                var width = 200;\n                var height = 200;\n                var top = 4;\n                if (whRatio > 1) {\n                    height = 200/whRatio;\n                    top = ((200 - height) / 2) + 4;\n                } else {\n                    width = whRatio * 200;\n                }\n                $well_birds_eye.css({'width': width + 'px', 'height': height + 'px', 'top': top + 'px'});\n\n                // Add images, positioned by percent...\n                var html = data.map(function(ws){\n                    // check if min===max to avoid zero-division error\n                    var x = (maxX === minX) ? 0.5 : (ws.position.x.value - minX)/(maxX - minX);\n                    var y = (maxY === minY) ? 0.5 : (ws.position.y.value - minY)/(maxY - minY);\n                    return '<img style=\"left: ' + (x * 100) + '%; top: ' + (y * 100) + '%\" title=\"' + ws.name.escapeHTML() + '\" data-imageId=\"' + ws.id + '\" />';\n                }, \"\");\n                $well_birds_eye.append(html.join(\"\"));\n            }\n        }\n    };\n\n    // Used by WellIndexForm in forms.py\n    window.changeField = function changeField(field) {\n\n        var datatree = $.jstree.reference('#dataTree');\n        var $container = $(\"#content_details\");\n\n        var containerType = $container.data('type');\n        var containerId = $container.data('id');\n        var containerPath = $container.data('path');\n        containerPath = JSON.parse(containerPath);\n        var containerNode = datatree.find_omepath(containerPath);\n\n        if (!containerNode) {\n            console.log('WARNING: Had to guess container');\n            containerNode = OME.getTreeBestGuess(containerType, containerId);\n        }\n\n        // Set the field for that node in the tree and reload the tree section\n        datatree.set_field(containerNode, field);\n\n        // Reselect the same node to trigger update\n        datatree.deselect_all(true);\n        datatree.select_node(containerNode);\n\n        return false;\n    };\n\n    var primaryIndex = -1;\n    OME.handleClickSelection = function (event, target, elementsSelector) {\n        \n        var $clickedImage = target || $(event.target);\n        \n        var thumbs = $(elementsSelector);\n        var selIndex = thumbs.index($clickedImage);\n\n        if (event && event.shiftKey ) {\n            if ( primaryIndex === -1 ) {\n                primaryIndex = selIndex;\n                $clickedImage.parent().parent().addClass(\"ui-selected\");\n                return;\n            }\n            \n            // select range\n            var start = Math.min(primaryIndex,selIndex);\n            var end = Math.max(primaryIndex,selIndex);\n            \n            thumbs.slice(start, end + 1).parent().parent().addClass(\"ui-selected\");\n            \n        }\n        else if (event && event[OME.multi_key() + \"Key\"]) {\n            if ( primaryIndex === -1 ) {\n                primaryIndex = selIndex;\n            }\n            \n            if ($clickedImage.parent().parent().hasClass(\"ui-selected\")) {\n                $clickedImage.parent().parent().removeClass(\"ui-selected\");\n            } else {\n                $clickedImage.parent().parent().addClass(\"ui-selected\");\n            }\n        }\n        else {\n            thumbs.parent().parent().removeClass(\"ui-selected\");\n            $clickedImage.parent().parent().addClass(\"ui-selected\");\n            primaryIndex = selIndex;\n        }\n    };\n\n});\n", "\n\n\n(function(){\n\n    function show_change(obj, val, klass) {\n        if (obj.value != val) {\n            $(obj).addClass(klass);\n        } else {\n            $(obj).removeClass(klass);\n        }\n    }\n    function hidePicker () {\n        if ($(\".picker\").get(0) && $(\".picker\").get(0).hide_picker) {\n            $(\".picker\").get(0).hide_picker();\n        }\n    }\n\n    window.resetRDCW = function (viewport) {\n        viewport.reset_channels();\n        syncRDCW(viewport);\n    };\n\n    window.copyRdefs = function(viewport) {\n        var rdefQry = viewport.getQuery();\n        // also need pixelsType to know if we can manually paste to target\n        var pr = viewport.loadedImg.pixel_range.join(\":\");\n        rdefQry = rdefQry + \"&pixel_range=\" + pr;\n        // Need imageId for 'apply to all'\n        rdefQry = rdefQry + \"&imageId=\" + viewport.loadedImg.id;\n        // save to session\n        var jqxhr = $.getJSON(viewport.viewport_server + \"/copyImgRDef/?\" + rdefQry);\n        jqxhr.always(function() {\n            $(\"#rdef-paste-btn\").prop('disabled', false).removeClass(\"button-disabled\");\n\n            // Optional : only present on webclient app\n            if (window.WEBCLIENT) {\n                WEBCLIENT.HAS_RDEF = true;\n            }\n        });\n    };\n\n    window.pasteRdefs = function (viewport) {\n\n        var doPaste = function(data) {\n            var channels = data.c.split(\",\");       // c=1|3336:38283$FF0000,2|1649:17015$00FF00\n            if (channels.length != viewport.getChannels().length ||\n                data.pixel_range != viewport.loadedImg.pixel_range.join(\":\")) {\n                    // images are not compatible - just 'fail silently'\n                    return;\n            }\n            // only pick what we need\n            var pasteData = {'c': data.c,\n                'm': data.m,\n                'maps': data.maps};\n            viewport.setQuery(pasteData);\n            viewport.doload();        // loads image\n            syncRDCW(viewport);       // update rdef table\n            viewport.channelChange(); // triggers channel btn update\n\n            // add to undo/redo queue and update undo/redo buttons.\n            viewport.save_channels();\n            updateUndoRedo(viewport);\n        };\n\n        // check session via /getImgRDef/ json call\n        $.getJSON(viewport.viewport_server + \"/getImgRDef/\",\n            function(data){\n                if (data.rdef) {\n                    doPaste(data.rdef);\n                }\n            }\n        );\n    };\n\n    window.resetImageDefaults = function (viewport, obj, callback) {\n        viewport.viewportmsg.html(\"Resetting...\").show();\n        $.getJSON(viewport.viewport_server + '/imgData/' + viewport.loadedImg.id + '/?getDefaults=true',\n            function(data){\n                viewport.viewportmsg.hide();\n                viewport.loadedImg._load(data);\n\n                // seems we need to do a lot of work to update UI\n                viewport.doload();        // loads image\n                syncRDCW(viewport);       // update rdef table\n                viewport.channelChange(); // triggers channel btn update\n\n                // add to undo/redo queue and update undo/redo buttons.\n                viewport.save_channels();\n                updateUndoRedo(viewport);\n\n                if (callback) {\n                    callback();\n                }\n            }\n        );\n    };\n\n    window.setImageDefaults = function (viewport, obj, callback, skip_apply) {\n        if (!skip_apply) applyRDCW(viewport);\n        var old = $(obj).html();\n        gs_modalJson(viewport.viewport_server + '/saveImgRDef/'+viewport.loadedImg.id+'/?'+viewport.getQuery(true),\n            {},\n            function(success, rv) {\n                $(obj).html(old).prop('disabled', false);\n                if (!(success && rv)) {\n                    alert('Setting image defaults failed. Success: ' + success + ' Response: ' + rv);\n                }\n                if (callback) {\n                    callback();\n                }\n                viewport.setSaved();\n                updateUndoRedo(viewport);\n            });\n        return false;\n    };\n\n    window.zindex_automator = function(klass, basez, wspace) {\n        if (!wspace) {\n            wspace = $(klass);\n        }\n        var sorter = function (a,b) {\n            return parseInt(a.css('z-index'), 10)-parseInt(b.css('z-index'), 10);\n        };\n        var tofront = function (e) {\n            var self = this;\n            var z = basez;\n            var objs = [];\n            $(klass).each(function () {\n                if (this != self) {\n                    objs.push($(this));\n                }\n            });\n            $.each(objs.sort(sorter), function () {\n                this.css('zIndex', z);\n                z++;\n            });\n            $(self).css('zIndex', z);\n        };\n        $.each(wspace, function () {\n            $(this).on('opening', tofront);\n            $(this).on('mousedown', tofront);\n        });\n    };\n\n    window.channelChange = function (ev, obj, idx, ch) {\n        if (ch.active) {\n            // similar buttons beside image and in rdef table\n            $('#wblitz-ch'+idx).addClass('pressed');\n            $('#rd-wblitz-ch'+idx).addClass('pressed');\n        } else {\n            $('#wblitz-ch'+idx).removeClass('pressed');\n            $('#rd-wblitz-ch'+idx).removeClass('pressed');\n        }\n    };\n\n\n    window.imageChange = function (viewport) {\n        $('#wblitz-t-curr').html(viewport.getTPos());\n        $('#wblitz-z-curr').html(viewport.getZPos());\n        $('#wblitz-t-count').html(viewport.getTCount());\n        $('#wblitz-z-count').html(viewport.getZCount());\n\n        if (viewport.hasLinePlot() || $('#wblitz-lp-enable').prop('checked')) {\n            viewport.refreshPlot();\n        }\n        // Z/T change update Save button\n        updateUndoRedo(viewport);\n    };\n\n    window.syncChannelsActive = function(viewport) {\n        var channels = viewport.getChannels();\n        for (i=0; i<channels.length; i++) {\n            var $chbx = $('#rd-wblitz-ch'+i);\n            if ($chbx.length > 0) {     // in case this is called before UI is built\n                $chbx.get(0).checked = channels[i].active;\n            }\n        }\n    };\n\n    function getLutIndex(lutName) {\n      if (OME && OME.LUTS) {\n        for (var l=0; l<OME.LUTS.length; l++) {\n          if (OME.LUTS[l].name === lutName) {\n            return OME.LUTS[l].png_index;\n          }\n        }\n      }\n      return -1;\n    }\n\n    function getLutBgPos(color, slider) {\n        var png_height = OME.PNG_LUTS.length * 10;\n        var style = {'background-size': '100% ' + (png_height * 3) + 'px'};\n        var yoffset;\n        if (color.endsWith('.lut')) {\n            var lutIndex = getLutIndex(color);\n            if (lutIndex > -1) {\n                yoffset = '-' + (lutIndex * 30 + 7) + 'px';\n            }\n        } else {\n            // Not found - show last bg (black -> transparent gradient)\n            if (slider) {\n                yoffset = '-' + ((OME.LUTS.length) * 30 + 7) + 'px';\n            } else {\n                // For buttons, hide by offsetting\n                yoffset = '100px';\n            }\n        }\n        style['background-position'] = '0px ' + yoffset;\n        return style;\n    }\n\n    window.syncRDCW = function(viewport) {\n        var cb, color;\n        var channels = viewport.getChannels();\n        var lutBgPos, sliderLutBgPos;\n        for (i=0; i<channels.length; i++) {\n            color = channels[i].color;\n            lutBgStyle = getLutBgPos(color);\n            sliderLutBgStyle = getLutBgPos(color, true);\n            if (color.endsWith('.lut')) {\n                color = 'EEEEEE';\n            }\n            // Button beside image in full viewer (not in Preview panel):\n            $('#wblitz-ch' + i).css('background-color', '#' + color)\n                .find('.lutBackground').css(lutBgStyle);\n            // Slider background\n            $('#wblitz-ch'+i+'-cwslider').find('.ui-slider-range').addClass('lutBackground')\n                .css(sliderLutBgStyle)\n                .css({'background-color': '#' + color,\n                      'transform': channels[i].inverted ? 'scaleX(-1)' : ''});\n            // Channel button beside slider\n            $('#rd-wblitz-ch'+i)\n                .css('background-color', '#' + color)\n                .find('.lutBackground').css(lutBgStyle);\n            var w = channels[i].window;\n            $('#wblitz-ch'+i+'-cwslider')\n                .slider( \"option\", \"min\", Math.min(w.min, w.start) )   // extend range if needed\n                .slider( \"option\", \"max\", Math.max(w.max, w.end) );\n            $('#wblitz-ch'+i+'-color').attr('data-color', channels[i].color);\n            $('#wblitz-ch' + i + '-cw-start').val(channels[i].window.start).trigger('change');\n            $('#wblitz-ch' + i + '-cw-end').val(channels[i].window.end).trigger('change');\n        }\n        // Colorpicker buttons store 'reverse-intensity' with .data() to populate colorbtn dialog\n        $(\".picker\").each(function(i, pickerBtn) {\n            $(pickerBtn).data('data-reverse-intensity', channels[i].inverted);\n        });\n        hidePicker();\n\n        updateUndoRedo(viewport);\n        $('#rd-wblitz-rmodel').prop('checked', viewport.isGreyModel());\n        syncChannelsActive(viewport);\n    };\n\n    window.updateUndoRedo = function(viewport) {\n        // update disabled status of undo/redo buttons\n        if (viewport.has_channels_undo()) {\n            $('#rdef-undo-btn').prop('disabled', false).removeClass(\"button-disabled\");\n        } else {\n            $('#rdef-undo-btn').attr(\"disabled\", \"disabled\").addClass(\"button-disabled\");\n        }\n        if (viewport.has_channels_redo()) {\n            $('#rdef-redo-btn').prop('disabled', false).removeClass(\"button-disabled\");\n        } else {\n            $('#rdef-redo-btn').attr(\"disabled\", \"disabled\").addClass(\"button-disabled\");\n        }\n        var canSaveRdef = viewport.loadedImg.perms.canAnnotate;\n        if (viewport.getSaved() || !canSaveRdef) {\n            $(\"#rdef-setdef-btn\").attr(\"disabled\", \"disabled\").addClass(\"button-disabled\");\n        } else {\n            $(\"#rdef-setdef-btn\").prop('disabled', false).removeClass(\"button-disabled\");\n        }\n    };\n\n    var on_batchCopyRDefs = false;\n    // TODO: try not to rely on global variables!\n    window.applyRDCW = function(viewport, final) {\n        if (on_batchCopyRDefs) {\n            return batchCopyRDefs_action('ok');\n        }\n        var revInt, active;\n        for (var i=0; i<viewport.getCCount(); i++) {\n            active = $('#rd-wblitz-ch'+i).get(0).checked;\n            if (active !== viewport.loadedImg.channels[i].active) {\n                viewport.setChannelActive(i, active, true);\n            }\n            viewport.setChannelColor(i, $('#wblitz-ch'+i+'-color').attr('data-color'), true);\n            revInt = $('#wblitz-ch'+i+'-color').data('data-reverse-intensity');\n            if (revInt !== undefined) {viewport.setChannelInverted(i, revInt, true);}\n            var noreload = ((i+1) < viewport.getCCount());    // prevent reload, except on the last loop\n            viewport.setChannelWindow(i, $('#wblitz-ch'+i+'-cw-start').get(0).value, $('#wblitz-ch'+i+'-cw-end').get(0).value, noreload);\n        }\n\n        if (final) {\n            viewport.forget_bookmark_channels();\n            $('#rdef-postit').hide();\n        }\n        viewport.save_channels();\n        syncRDCW(viewport);\n    };\n\n\n    window.setModel = function(viewport, model) {\n        // this may turn channels on/off\n        viewport.setModel(model);\n        viewport.save_channels();\n        syncRDCW(viewport);     // update undo/redo etc\n    };\n\n\n    // This is called on load of viewport in Image viewer, but not preview panel\n    window._load_metadata = function(ev, viewport) {\n\n        /* Image details */\n        var tmp = viewport.getMetadata();\n        $('#wblitz-image-name').html(tmp.imageName.escapeHTML());\n        $('#wblitz-image-description-content').html(tmp.imageDescription.escapeHTML().replace(/\\n/g, '<br />'));\n        $('#wblitz-image-author').html(tmp.imageAuthor.escapeHTML());\n        $('#wblitz-image-pub').html(tmp.projectName.escapeHTML());\n        $('#wblitz-image-pubid').html(tmp.projectId);\n        $('#wblitz-image-timestamp').html(tmp.imageTimestamp);\n\n        $(\"#bulk-annotations\").hide();\n        $(\"#bulk-annotations\").next().hide();\n        if (tmp.wellId) {\n\n            var wellsUrl = PLATE_WELLS_URL_999.replace('999', tmp.wellId),\n                linksUrl = PLATE_LINKS_URL_999.replace('999', tmp.wellId);\n            loadBulkAnnotations(wellsUrl, 'Well-' + tmp.wellId);\n            loadBulkAnnotations(linksUrl, 'Well-' + tmp.wellId);\n        }\n    };\n\n\n    // Used in the Image viewer and in metadata general panel\n    window.loadBulkAnnotations = function(url, query, callback) {\n        // Load bulk annotations for screen or plate\n        $.getJSON(url + '?query=' + query + '&callback=?',\n            function(result) {\n                if (result.data && result.data.rows) {\n                    var table = $(\"#bulk-annotations\").show().next().show().children(\"table\");\n                    var html = result.data.columns.map(function(col, colIdx) {\n                        var label = col.escapeHTML();\n                        var values = result.data.rows.map(function(row){\n                            return (\"\" + row[colIdx]).escapeHTML();\n                        });\n                        values = values.join('<br />');\n                        var oddEvenClass = col % 2 == 1 ? 'odd' : 'even';\n                        return '<tr><td class=\"title ' + oddEvenClass + '\">' + label + ':&nbsp;</td><td>' + values + '</td></tr>';\n                    });\n                    table.html(html.join(\"\"));\n                }\n                if (callback) {\n                    callback(result);\n                }\n        });\n    };\n\n    /**\n    * Gets called when an image is initially loaded.\n    * This is the place to sync everything; rendering model, quality, channel buttons, etc.\n    */\n    window._refresh_cb = function (ev, viewport) {\n        /* Sync inputs with initial values */\n\n        $('#wblitz-rmodel').prop('checked', viewport.isGreyModel());\n        $('#wblitz-invaxis').prop('checked', viewport.loadedImg.rdefs.invertAxis);\n\n        var q = viewport.getQuality();\n        if (q) {\n            var qr = $('#wblitz-quality > option[value=\"' + q.toFixed(1) + '\"]');\n            if (qr.length) {\n                qr.prop('selected',true);\n            }\n        }\n\n        /* Prepare the channels box and the rendering definition for the channels */\n        var box = $('#wblitz-channels-box');\n        var channels = viewport.getChannels();\n        box.empty();\n\n        var doToggle = function(index) {\n            return function() {\n                viewport.toggleChannel(index);\n                viewport.save_channels();\n                updateUndoRedo(viewport);\n                viewport.self.trigger('channelToggle', [viewport, index, viewport.loadedImg.channels[index]]);\n            };\n        };\n        for (i=0; i<channels.length; i++) {\n            $('<button id=\"wblitz-ch'+i+\n                '\" class=\"squared' + (channels[i].active?' pressed':'') +\n                '\" style=\"background-color: #'+ channels[i].color +\n                '\" title=\"' + channels[i].label.escapeHTML() +\n                '\"><div class=\"lutBackground\"></div><div class=\"btnLabel\">'+channels[i].label.escapeHTML()+'</div></button>')\n            .appendTo(box)\n            .on('click', doToggle(i));\n        }\n\n        // disable 'split' view for single channel images.\n        if (channels.length < 2) {\n            $(\"#wblitz input[value='split']\").prop('disabled', true);\n        }\n\n        // TODO: this used anywhere?\n        // {% block xtra_metadata %}{% endblock %}\n\n        /*$('#wblitz-shortname').attr('title', tmp.imageName).html(gs_text_trim(tmp.imageName, 15, true));*/\n\n        tmp = viewport.getSizes();\n        $('#wblitz-image-width').html(tmp.width);\n        $('#wblitz-image-height').html(tmp.height);\n        $('#wblitz-image-z-count').html(tmp.z);\n        $('#wblitz-image-t-count').html(tmp.t);\n        tmp = viewport.getPixelSizes();\n        $('#wblitz-image-pixel-size-x').html(tmp.x===null?'-':(tmp.x.lengthformat()));\n        $('#wblitz-image-pixel-size-y').html(tmp.y===null?'-':(tmp.y.lengthformat()));\n        $('#wblitz-image-pixel-size-z').html(tmp.z===null?'-':(tmp.z.lengthformat()));\n\n        if (tmp.x!==0) {\n            $(\"#wblitz-scalebar\").prop(\"disabled\", false);\n        }\n        /* Fill in the Rendering Details box */\n\n        $(\".picker\").off('prepared').off('showing').off('hiding');\n        // $('#rdef-postit ul').not('ul:last-child').remove();\n\n        var template = '' +\n          '<tr class=\"$cls rdef-window\">' +\n          '<td><button id=\"rd-wblitz-ch$idx0\" class=\"rd-wblitz-ch squared $class\" style=\"background-color: $col\" ' +\n            'title=\"$label\"><div class=\"lutBackground\"></div><div class=\"btnLabel\">$l</div></button></td>' +\n          '<td><table><tr id=\"wblitz-ch$idx0-cw\" class=\"rangewidget\"></tr></table></td>' +\n          '<td><button id=\"wblitz-ch$idx0-color\" class=\"picker squarred\" title=\"Choose Color\">&nbsp;</button></td>' +\n          '</tr>';\n\n        $('#rdef-postit table').on('focus', '.rangewidget input', function(){\n            // id is wblitz-ch1-cw-start or wblitz-ch1-cw-end\n            var chIdx = this.id.replace('wblitz-ch', '').split('-')[0];\n            chIdx = parseInt(chIdx, 10);\n            viewport.self.trigger('channelFocus', [viewport, chIdx, viewport.loadedImg.channels[i]]);\n        });\n        tmp = $('#rdef-postit table tr:first');\n        tmp.siblings().remove();\n\n        var start_cb = function (i) {\n            return function (e) {\n                var new_start = e.target.value,\n                    $sl = $('#wblitz-ch'+i+'-cwslider'),\n                    end = $sl.slider('values')[1],\n                    min = $sl.slider( \"option\", \"min\" );\n                $sl.slider('values', 0, Math.min(new_start, end));    // ensure start < end\n                $sl.slider( \"option\", \"min\", Math.min(min, new_start) );   // extend range if needed\n            };\n        };\n        var end_cb = function (i) {\n            return function (e) {\n                var new_end = e.target.value,\n                    $sl = $('#wblitz-ch'+i+'-cwslider'),\n                    start = $sl.slider('values')[0],\n                    max = $sl.slider( \"option\", \"max\" );\n                $sl.slider('values', 1, Math.max(new_end, start));    // ensure end > start\n                $sl.slider( \"option\", \"max\", Math.max(max, new_end) );   // extend range if needed\n            };\n        };\n        var slide_start_cb = function() {\n            // Note starting values, so we can tell which handle/value changed\n            // This is for floating point data where ui.values may not be what we set\n            return function(event, ui) {\n                $(this).data('channel_start', ui.values[0])\n                    .data('channel_end', ui.values[1]);\n            };\n        };\n        var slide_cb = function() {\n            return function(event, ui) {\n                // Only update the value that changed\n                var s = $(this).data('channel_start');\n                var e = $(this).data('channel_end');\n                if (ui.values[0] !== s) {\n                    $('#wblitz-ch' + $(event.target).data('channel-idx') + '-cw-start').val(ui.values[0]).trigger('change');\n                } else if (ui.values[1] !== e) {\n                    $('#wblitz-ch'+ $(event.target).data('channel-idx') + '-cw-end').val(ui.values[1]).trigger('change');\n                }\n                viewport.self.trigger(\"channelSlide\", [viewport, $(event.target).data('channel-idx'), ui.values[0], ui.values[1]]);\n            };\n        };\n        var stop_cb = function() {\n            return function(event, ui) {\n                applyRDCW(viewport);\n            };\n        };\n\n        var keyup_cb = function() {\n            return function(event){\n                if (event.keyCode === 13){\n                    applyRDCW(viewport);\n                }\n            };\n        };\n\n        var focusout_cb = function() {\n            return function(event){\n                applyRDCW(viewport);\n            };\n        };\n\n        var init_ch_slider = function(i, channels) {\n            var min = Math.min(channels[i].window.min, channels[i].window.start),  // range may extend outside min/max pixel\n                max = Math.max(channels[i].window.max, channels[i].window.end),\n                start = channels[i].window.start,\n                end = channels[i].window.end,\n                ptype = viewport.loadedImg.meta.pixelsType,\n                step = 1;\n            if (ptype == \"float\") {\n                var STEPS = 100;\n                step = (max - min) / STEPS;\n            }\n\n            $('#wblitz-ch'+i+'-cwslider').slider({\n                range: true,\n                step: step,\n                min: min,\n                max: max,\n                values: [ start, end ],\n                start: slide_start_cb(),\n                slide: slide_cb(),\n                stop: stop_cb(),\n                }).data('channel-idx', i);\n        };\n\n        for (i=channels.length-1; i>=0; i--) {\n\n            var btnClass = channels[i].active?'pressed':'';\n            if (OME.isDark(channels[i].color)) {\n                btnClass += \" fontWhite\";\n            }\n\n            var lbl = channels[i].label;\n            if (lbl.length > 7) {\n                lbl = lbl.slice(0, 5) + \"...\";\n            }\n            tmp.after(template\n                .replace(/\\$class/g, btnClass)\n                .replace(/\\$col/g, '#' + channels[i].color)\n                .replace(/\\$label/g, channels[i].label.escapeHTML())\n                .replace(/\\$l/g, lbl.escapeHTML())\n                .replace(/\\$idx0/g, i) // Channel Index, 0 based\n                .replace(/\\$idx1/g, i+1) // Channel Index, 1 based\n                .replace(/\\$cwl/g, channels[i].label.escapeHTML()) // Wavelength\n                .replace(/\\$cls/g, i/2!=parseInt(i/2, 10)?'even':'odd') // class\n            );\n\n            $('#wblitz-ch'+(i)+'-cw').append('<td width=\"10%\"><span class=\"min\" title=\"min: ' + channels[i].window.min + '\"><input type=\"text\" id=\"wblitz-ch' + i + '-cw-start\" /></span></td><td><div class=\"rangeslider\" id=\"wblitz-ch' + i + '-cwslider\"></div></td> <td width=\"10%\"><span class=\"max\" title=\"max: ' + channels[i].window.max + '\"><input type=\"text\" id=\"wblitz-ch' + i + '-cw-end\" /></span></td>');\n            init_ch_slider(i, channels);\n            $('#wblitz-ch'+i+'-cw-start').val(channels[i].window.start).off('change').on('change', start_cb(i));\n            $('#wblitz-ch'+i+'-cw-start').on('keyup', keyup_cb()).on('focusout', focusout_cb());\n            $('#wblitz-ch'+i+'-cw-end').val(channels[i].window.end).off('change').on('change', end_cb(i));\n            $('#wblitz-ch'+i+'-cw-end').on('keyup', keyup_cb()).on('focusout', focusout_cb());\n        }\n\n        // bind clicking on channel checkboxes\n        $(\".rd-wblitz-ch\").each(function(i){\n            $(this).on('click', doToggle(i));\n        });\n\n\n        /* Prepare color picker buttons */\n        $(\".picker\").each(function(i, pickerBtn) {\n            $(pickerBtn).data('data-reverse-intensity', channels[i].inverted);\n        });\n        $(\".picker\")\n            .colorbtn({'server': viewport.viewport_server})\n            .on('showing', function () {\n                var t = $(this).parents('.postit'),\n                    offset;\n                if (t.length) {\n                  offset = t.offset();\n                  offset.left += t.width();\n                } else {\n                  offset = {'top':'300px', 'left': window.innerWidth-250+'px'};\n                }\n                $('#cbpicker-box').css(offset);\n                $('.picker-selected').html('&nbsp;');\n                $(this).parent().siblings('.picker-selected').html('&gt;');\n            })\n            .on('hiding', function () {$(this).parent().siblings('.picker-selected').html('&nbsp;');})\n            .on('prepared', function () {\n                zindex_automator('.postit', 210, $('#cbpicker-box'));\n            })\n            .on('changed', function () {\n                applyRDCW(viewport);\n            });\n\n        // Don't see any obvious bugs when these are removed.\n        // They are both bound to appropriate triggers on viewport.\n        //projectionChange(null,null, true);\n        //modelChange();\n\n        syncRDCW(viewport);\n\n        $('#wblitz-workarea > .box > div.row').show();\n    };\n\n}());\n", "{% extends \"webgateway/core_html.html\" %}\n{% load i18n %}\n{% load common_filters %}\n\n{% comment %}\n<!--\n omero_image - django html template\n\n Copyright (c) 2007-2014 Glencoe Software, Inc. All rights reserved.\n\n This software is distributed under the terms described by the LICENCE file\n you can find at the root of the distribution bundle, which states you are\n free to use it only for non commercial purposes.\n If the file is missing please request a copy by contacting\n jason@glencoesoftware.com.\n-->\n{% endcomment %}\n\n\n\n{% block link %}\n\n    <!-- Make the width fit the mobile viewport -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n\n    {% for href in extra_css %}\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ href }}\" />\n    {% endfor %}\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.viewport.css\"|add:url_suffix %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.toolbar.css\"|add:url_suffix %}\" media=\"all\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.gs_slider.css\"|add:url_suffix %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/base.css\"|add:url_suffix %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.snippet_header_logo.css\"|add:url_suffix %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.postit.css\"|add:url_suffix %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/farbtastic-1.2/farbtastic.css\" %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/ome.colorbtn.css\"|add:url_suffix %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.css\" %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"webgateway/css/omero_image.css\"|add:url_suffix %}\" media=\"all\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"3rdparty/panojs-2.0.0/panojs.css\" %}\" media=\"all\" />\n\n{% if opengraph %}\n    <meta name=\"og:title\" content=\"{{ image.getName|escape }}\">\n    <meta name=\"og:type\" content=\"website\">\n    <meta name=\"og:site_name\" content=\"{{ opengraph }}\">\n    <meta name=\"og:description\" content=\"{{ image.getDescription|default:image.getOwner.getName|escape }}\">\n    <meta name=\"og:url\" content=\"{{ page_url }}\">\n    <meta name=\"og:image\" content=\"{{ image_preview }}512/\">\n{% endif %}\n\n{% if twitter %}\n    <meta name=\"twitter:card\" content=\"summary_large_image\">\n    <meta name=\"twitter:site\" content=\"{{ twitter|escape }}\">\n    <meta name=\"twitter:title\" content=\"{{ image.getName|truncateafter:'67'|escape }}\">\n    <meta name=\"twitter:description\" content=\"{{ image.getDescription|default:image.getOwner.getName|truncateafter:'197'|escape }}\">\n    <meta name=\"twitter:creator\" content=\"{{ twitter|escape }}\">\n    <meta name=\"twitter:image\" content=\"{{ image_preview }}280/\">\n{% endif %}\n\n{% endblock %}\n\n{% block script %}\n\n    {% for src in extra_js %}\n    <script type=\"text/javascript\" src=\"{{ src }}\"></script>\n    {% endfor %}\n\n    <!-- jquery -->\n    {% include \"webgateway/base/includes/script_src_jquery.html\" %}\n    {% include \"webgateway/base/includes/script_src_popup.html\" %}\n\n\t<script type=\"text/javascript\" src=\"{% static \"3rdparty/aop-1.3.js\" %}\"></script>\n\n\t<script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.gs_utils.js\"|add:url_suffix %}\"></script>\n\t<script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.viewportImage.js\"|add:url_suffix %}\"></script>\n\t<script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.gs_slider.js\"|add:url_suffix %}\"></script>\n\t<script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.viewport.js\"|add:url_suffix %}\"></script>\n  <script type=\"text/javascript\" src=\"{% static \"webgateway/js/omero_image.js\"|add:url_suffix %}\"></script>\n\n  <!-- jquery-ui -->\n  {% include \"webgateway/base/includes/jquery-ui.html\" %}\n\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.smartdialog.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/JQuerySpinBtn-1.3a/JQuerySpinBtn.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.colorbtn.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.postit.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.selectboxes-2.2.6.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/farbtastic-1.2/farbtastic.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.gs_utils.js\"|add:url_suffix %}\"></script>\n    \n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.scalebardisplay.js\"|add:url_suffix %}\"></script>\n    <!-- for display of ROIs over the image -->\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.roidisplay.js\"|add:url_suffix %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/raphael-2.1.0/raphael-min.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/raphael-2.1.0/scale.raphael.js\" %}\"></script>\n\n    <script type=\"text/javascript\" src=\"{% static '3rdparty/underscore/underscore-1.13.1-umd-min.js' %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/d3-3.5.17/d3.min.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"webgateway/js/ome.histogram.js\"|add:url_suffix %}\"></script>\n\n    <!-- big images -->\n\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/extjs/ext-core.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/utils.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/PanoJS.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/controls.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_Bisque.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_imgcnv.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/pyramid_Zoomify.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_thumbnail.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_info.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_svg.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_roi.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/panojs-2.0.0/control_scalebar.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/jquery.mousewheel-3.0.6.js\" %}\"></script>\n\n    <!-- hammer.js for tablet gestures -->\n    <script type=\"text/javascript\" src=\"{% static \"3rdparty/hammer-2.0.2/hammer.min.js\" %}\"></script>\n    \n{% endblock %}\n\n\n{% block title %}\n    {{ image.getName }}\n{% endblock %}\n\n\n{% block head %}\n    {% block header_content %}\n      <div id=\"header\"></div>\n    {% endblock %}\n    {% block header_menu %}\n    {% endblock %}\n{% endblock %}\n\n\n{% block body %}\n\n{% block full_body %}\n<script type=\"text/javascript\">\n  /* <![CDATA[ */\n\n  var PLATE_LINKS_URL_999 = '{% url 'webgateway_object_table_query' 'Screen.plateLinks.child.wells' 999 %}';\n  var PLATE_WELLS_URL_999 = '{% url 'webgateway_object_table_query' 'Plate.wells' 999 %}';\n\n\n  /**\n   * The viewport object holds the image browsing viewport that has all the logic for connecting to\n   * the supporting ajax server.\n   */\n  var viewport;\n  var on_batchCopyRDefs = false;\n\n  /**\n   * Zoom input box change event handler.\n   */\n  function zoomCheck (i) {\n    var percent = parseFloat($(i).val());\n    if (isNaN(percent)) {\n      percent = 100;\n    }\n    /* Zoom window */\n    viewport.setZoom(percent);\n  }\n\n  function hidePicker () {\n    $(\".picker\").get(0) && $(\".picker\").get(0).hide_picker && $(\".picker\").get(0).hide_picker();\n    /*$('.picker-selected').html('&nbsp;');*/\n  }\n\n  /**\n   * Bound to the window resize, calculates the viewport size and top tool box positions.\n   */\n  var calcResize = function () {\n    var dim = { height: $(window).height(),\n                width: $(window).width()};\n\n    var ts_visible = $('.figure-box').length && $('.figure-box').css('display') != \"none\";\n    var zl = $('#z-axis-legend');\n    var tl = $('#t-axis-legend');\n    /* Resize the viewport */\n    $.extend(dim, viewport.self.offset());\n\n    var h = dim.height - dim.top - 33 - (ts_visible?$('.figure-box').height():0);\n    var w = dim.width - dim.left  - zl.width() - {% block vpRightMargin %}0{% endblock %};\n\n    /* The following is needed as a hack for IE */\n    //TEMP CHANGE, causing extra step of tiling\n    //viewport.viewport.height(10);\n\n    viewport.self\n      .height(h - tl.height())\n      .width(w);\n    viewport.refresh(true);\n\n\n    //ts_visible &&\n    $('.figure-box')\n      .width(dim.width - dim.left - {% block fbCloseBtnWidth %}20{% endblock %} + zl.width())\n      .css('top',viewport.self.height()+15+tl.height());\n\n    zl.css('top', h/2 - (zl.height()/2));\n    tl.css({top: h-tl.height()+15, left: (w/2)+dim.left - (tl.width()/2)});\n  };\n\n  var getMetadata = function () {\n    return viewport.getMetadata();\n  }\n\n  var showChannelWindowHelp = function () {\n    if (!gs_loadBlockUI (showChannelWindowHelp)) {\n      return false;\n    }\n    $.blockUI({\n      timeout: 0,\n      message: $('#channel-window-help'),\n{% if image.canAnnotate %}\n      css: {width: '60%', left: '20%', top: '20%'}\n{% else %}\n      css: {width: '50%', left: '25%', top: '20%'}\n{% endif %}\n    });\n    $('.blockMsg').attr('title','Click to close').on('click', $.unblockUI);\n    $('.blockOverlay').attr('title','Click to close').on('click', $.unblockUI);\n    return false;\n  }\n\n  // for some reason we have to bind 'Color' checkbox click like this\n  var handleModelCheckbox = function (e) {\n    console.log(\"handleModelCheckbox\");\n    // apply change to greyscale immediately\n    setModel(viewport, $(\"#rd-wblitz-rmodel\").get(0).checked?'g':'c');\n  }\n\n\n  /**\n   * Set the projection based on the clicked element name.\n   */\n  var setProjection = function (obj) {\n    viewport.setProjection($(obj).attr('value'));\n  };\n\n  /**\n   * Checks the currently selected rendering projection and applies interface customizations as needed.\n   * Bound to the viewport projectionChange event.\n   */\n  var projectionChange = function (ev, obj, nosync) {\n    var p = viewport.getProjection();\n    if (p) {\n      $('[name=\"wblitz-proj\"]').parent().removeClass('selected');\n      $('[name=\"wblitz-proj\"][value='+p+']').on('click', ).parent().addClass('selected');\n//    if (p) {\n//      var pr = $('#wblitz-proj > [value='+p+']');\n//      if (pr.length) {\n//        pr.prop('selected',true);\n//      }\n      if (p != 'normal') {\n        editLinePlot(false);\n      }\n      // disable line-plot for max projection, split-view etc\n      $('#wblitz-lp-enable').prop('disabled', p != 'normal');\n      //$('#wblitz-channels-box button').prop('disabled', p == 'split');\n    }\n    //nosync || syncRDCW(viewport);\n  };\n\n  /**\n   * Checks the currently selected rendering model and applies interface customizations as needed.\n   * Bound to the viewport modelChange event.\n   */\n  var modelChange = function (ev, obj) {\n    var btns = $('button[id^=wblitz-ch]').not('[id$=color]');\n    if (viewport.isGreyModel()) {\n      btns.addClass('forcegrey');\n    } else {\n      btns.removeClass('forcegrey');\n    }\n    // update both checkboxes to keep in sync.\n    $('#wblitz-rmodel').prop('checked', viewport.isGreyModel());\n    $('#rd-wblitz-rmodel').prop('checked', viewport.isGreyModel());\n    //syncRDCW(viewport);\n  };\n\n  /**\n   *\n   */\n  var linePlotChange = function (ev, show) {\n    if (show) {\n      if (!viewport.hasLinePlot()) {\n        viewport.startPickPos();\n      }\n      var lp = viewport.getLinePlot();\n      $('#wblitz-lp-axis').html(lp.isHorizontal() ? 'Y': 'X');\n      $('#wblitz-lp-enable').prop('checked', 'checked');\n      $('#wblitz-lp-editpos').val(lp.position).show();\n      $('#wblitz-lp-wrap').show();\n      $('#wblitz-lp-btn').html('apply');\n      $('#wblitz-lp-axis-select').selectOptions(lp.isHorizontal() ? 'h': 'v');\n    } else {\n      viewport.stopPickPos();\n      $('#wblitz-lp-enable').prop('checked', false);\n      $('#wblitz-lp-wrap').hide();\n      $('#wblitz-lp-cur').html('');\n    }\n  }\n\n  var editLinePlot = function (show) {\n    if (show) {\n      viewport.prepareLinePlot($('#wblitz-lp-axis-select option[selected]').val() || 'h');\n    } else {\n      viewport.hidePlot();\n    }\n    linePlotChange(null, show);\n  }\n\n  var prepLinePlot = function (val) {\n    viewport.prepareLinePlot(val);\n    $('#wblitz-lp-axis').html(viewport.getLinePlot().isHorizontal() ? 'Y': 'X');\n  }\n\n  var showLinePlot = function () {\n    viewport.loadPlot(parseInt($('#wblitz-lp-editpos').val()));\n    $('#wblitz-lp-cur').html('showing: ' + (viewport.getLinePlot().isHorizontal() ? 'Y': 'X') + ' = ' + parseInt($('#wblitz-lp-editpos').val()));\n  }\n\n\n  var axisChange = function () {\n    if(viewport.loadedImg.rdefs.invertAxis) {\n      $('#z-axis-legend').attr('src', '{% static \"webgateway/img/t_axis_revert.gif\" %}');\n      $('#t-axis-legend').attr('src', '{% static \"webgateway/img/z_axis_revert.gif\" %}');\n    } else {\n      $('#z-axis-legend').attr('src', '{% static \"webgateway/img/z_axis.gif\" %}');\n      $('#t-axis-legend').attr('src', '{% static \"webgateway/img/t_axis.gif\" %}');\n    }\n  }\n\n\n  var show_scalebar = function () {\n    {% if image.getPixelSizeX %}\n    if (!viewport.viewportimg.get(0).show_scalebar) {\n    // if the Scalebar plugin has not been initialised (method not available...) init and load Scalebar...\n        var options = {'pixSizeX': viewport.getPixelSizes().x,\n                       'imageWidth': viewport.getSizes().width};\n        if (viewport.loadedImg.tiles) {\n            options['tiles'] = true;\n        }\n        viewport.viewportimg.scalebar_display(options);\n    }\n    \n    viewport.viewportimg.get(0).setScalebarZoom(viewport.getZoom()/100 );\n    viewport.viewportimg.get(0).show_scalebar();\n    {% endif %}\n  }\n  \n  var hide_scalebar = function () {\n      viewport.viewportimg.get(0).hide_scalebar();\n  }\n  \n  /**\n  *     ROI load & table methods\n  */\n\n  var refresh_rois = function (theZ, theT, rois_filter) {\n      // re-plots the ROIs (if currently shown) for new Z and T position\n      if (viewport.viewportimg.get(0).refresh_rois) {\n          var theT = viewport.getTPos();\n          var theZ = viewport.getZPos();\n          // avoid to clear filter when changing image (changing channels, Z or T)\n          rois_filter = (rois_filter ? rois_filter : viewport.viewportimg.get(0).get_current_rois_filter());\n          viewport.viewportimg.get(0).refresh_rois(theZ, theT, rois_filter);\n      }\n  }\n\n  var show_rois = function (theZ, theT, filter) {\n      var theT = viewport.getTPos();\n      var theZ = viewport.getZPos();\n\n      {% if image %}\n      // if the ROI plugin has not been initialised (method not available...) init and load ROIs...\n      if (!viewport.viewportimg.get(0).show_rois) {\n          var options = {'width':{{ image.getSizeX }},\n                     'height':{{ image.getSizeY }},\n                     'webgateway_index':'{% url \"webgateway\" %}',\n                     'json_url':'{% url 'webgateway_get_rois_json' image.id %}'};\n          if (viewport.loadedImg.tiles) {\n              options['tiles'] = true;\n          }\n          viewport.viewportimg.roi_display(options);\n          viewport.viewportimg.get(0).setRoiZoom(viewport.viewportimg.get(0).getZoom());\n      }\n      {% endif %}\n\n      // Show postit. Table will be built on callback from loading\n      $(\"#roi_table_postit\").show();\n      // Check all ROI visibility buttons\n      $('#toggle_roi_visibility').prop(\"checked\", true);\n      $('[class^=\"shape_visibility\"]').each(function(index, checkbox) {\n        checkbox.checked = true;\n      });\n      // if roi_table_postit is closed using close button, hide ROIs\n      $(\".postit-close-btn\").on(\"click\", function() {hide_rois(); return false;});\n\n      var $show_rois_a = $(\"#show-rois-a\");\n      // Disable the \"Show ROIs\" button ...\n      if ($show_rois_a.attr(\"onclick\") != undefined)\n        $show_rois_a.removeAttr(\"onclick\");\n      else\n        $show_rois_a.off(\"click\");\n      $show_rois_a.removeAttr(\"href\");\n      $show_rois_a.css(\"color\", \"gray\");\n      // ... and enable the \"Hide ROIs\" button\n      $(\"#hide-rois-a\").on(\"click\", function(){hide_rois(); return false;})\n              .attr(\"href\", \"#\")\n              .css(\"color\", \"\");\n\n      // loads ROIs (if needed) and shows.\n      viewport.viewportimg.get(0).show_rois(theZ, theT, filter);\n  }\n\n\n  var hide_rois = function() {\n      // hides the display of ROIs.\n      if (viewport.viewportimg.get(0).hide_rois) {\n          viewport.viewportimg.get(0).hide_rois();\n      }\n\n      // Disable the \"Hide ROIs\" button ...\n      $(\"#hide-rois-a\").off(\"click\")\n              .removeAttr(\"href\")\n              .css(\"color\", \"gray\");\n      // ... and enable the \"Show ROIs\" button\n      $(\"#show-rois-a\").on(\"click\", function () { show_rois(); return false; })\n              .attr(\"href\", \"#\")\n              .css(\"color\", \"\");\n\n      $(\"#roi_table_postit\").hide();\n      $(\".postit-close-btn\").off(\"click\");\n  }\n\n  var NOZT = \"\";\n  // builds an html table of ROI data. All collapsed.\n  var build_roi_table = function() {\n      var $roi_table = $(\"#roi_small_table\");\n      var json = viewport.viewportimg.get(0).get_roi_json();\n\n      $roi_table.find('tbody').remove();\n\n      // give users a small selection of colours for lines on roi_thumbnails\n      var colours = {'red':'#f00', 'white':'#fff', 'black':'#000', 'blue':'#00f', 'green':'#0f0', 'yellow':'#ff0'}\n      var color_picker = \"\";\n      for (var c in colours) {\n          color_picker += \"<div class='color_picker_option' color='\" + colours[c] + \"' style='background: \" + colours[c] + \"'> </div>\";\n      }\n      var toggle_roi_thumbs = \"<input type='checkbox' id='toggle_roi_thumbs' title='Show ROI Previews' />\";\n      var toggle_shape_text = \"<input type='checkbox' id='toggle_shape_text' checked='true' title='Show/Hide ROI text labels' />\";\n      var toggle_roi_visibility = \"<input type='checkbox' id='toggle_roi_visibility' checked='true' title='Show/Hide ROIs and shapes' />\";\n\n      // thead for whole table:\n      var roi_html = \"<thead id='roi_table_head'><tr>\";\n      roi_html += \"<th></th>\";\n      roi_html += \"<th></th>\"; // first shape (count)\n      roi_html += \"<th>ID</th>\";\n      roi_html += \"<th>Z</th>\"; // no Z for ROI\n      roi_html += \"<th>T</th>\"; // no T for ROI\n      roi_html += \"<th>\" + toggle_shape_text + \" Text</th>\";\n      roi_html += \"<th title='Pick color of ROI outlines'><div style='white-space:nowrap;'>\" + toggle_roi_thumbs + \"Preview</div>\"+ color_picker + \"</th>\";\n      roi_html += \"<th>\" + toggle_roi_visibility + \" Show</th>\";\n      roi_html += \"</tr></thead>\";\n      $roi_table.append($(roi_html));\n\n      get_shape_icon_src = function(type, klass) {\n          var shape_icons = {'Line':'line16.png', 'Ellipse':'ellipse16.png',\n            'Polygon':'polygon16.png', 'Rectangle':'rectangle16.png', 'Mask': 'mask16.png',\n            'Point':'point16.png', 'Label':'text16.png', 'PolyLine':'line16.png'}\n          if (type in shape_icons) {\n              return \"<img class='\"+ klass +\"' src='{% static 'webgateway/img/' %}\" + shape_icons[type] + \"' />\";\n          }\n          return \"\";\n      }\n      var truncate_length = 30;\n      truncate_text = function(text_string) {\n          if (text_string.length < truncate_length)\n              return text_string\n          return text_string.substring(0,truncate_length) + \"...\";\n      }\n      // populate table. Cols are: ID, Z, T, Shape, text, visibility\n      for (var r=0; r<json.length; r++) {\n          var roi = json[r];\n          var shapes = roi['shapes'];\n\n          // thumbnail of roi - display small & popup full-size\n          var line_color = 'f00';   // store current line color, used when we 'show' thumbs to get url.\n          var roiThumbHtml = \"<img src='' id='\"+ roi['id'] +\"_roi_thumb' color='\"+ line_color +\"' width=50 height=33 class='roi_thumb'>\";\n\n          // visibility check for ROI, used to turn ON\\OFF all connected shapes\n          var roiVisibilityHtml = \"<input type='checkbox'  id='\" + roi['id'] + \"_visibility' checked='true' \" +\n                  \"class='roi_visibility' roi_id='\"+ roi['id'] +\"'/>\";\n\n          // process the shapes first - note first shape & text\n          var roiIcon = null;\n          var roiText = \"\";\n          var minT = maxT = minZ = maxZ = null;\n          var shapesHtml = '<tbody>';\n          var shape = null;\n          var text, tRange, zRange;\n          for (var s=0; s<shapes.length; s++) {\n              shape = shapes[s];\n              // Handle cases where the shape is on all sections or all\n              // timepoints.\n              if (typeof shape.theT === \"undefined\") {\n                  tRange = NOZT;\n              } else {\n                  if (minT === null || minT > shape.theT) minT = shape.theT;\n                  if (maxT === null || maxT < shape.theT) maxT = shape.theT;\n              }\n              if (typeof shape.theZ === \"undefined\") {\n                  zRange = NOZT;\n              } else {\n                  if (minZ === null || minZ > shape.theZ) minZ = shape.theZ;\n                  if (maxZ === null || maxZ < shape.theZ) maxZ = shape.theZ;\n              }\n              if (shape['textValue'] != null) {\n                  text = shape['textValue'];\n                  if (shapes.length == 1) roiText = text;\n              } else text = \"\";\n              var indent = \" &nbsp&nbsp&nbsp&nbsp\";    // hack to add \"indent\", but not if shape is only-child\n              if (shapes.length == 1) {\n                  indent = \" &nbsp\";\n              }\n              var shapeThumbHtml = \"<img src='' id='\"+ shape['id'] +\"_shape_thumb' color='\"+ line_color +\"' width=50 height=33 class='roi_thumb shape_thumb'>\";\n\n              var shape_id = roi['id'] + '_' + shape['id'] + '_shape_visibility';\n              var shapeVisibilityHtml = \"<input type='checkbox' id='\" + shape_id + \"' checked='true' \" +\n                      \"roi_id='\" + roi['id'] +\"' shape_id='\" + shape['id'] +\"' class='shape_visibility roi_\" + roi['id'] + \"_vis'/>\";\n\n              shapesHtml += \"<tr id='\"+shape['id']+\"_shape' class='shape_row'>\";\n              // clicking on any cell of a shape 'shape_cell' selects it\n              shapesHtml += \"<td></td>\";\n              shapesHtml += \"<td class='shape_cell icon'>\" + indent + get_shape_icon_src(shape['type'], 'shape_icon') + \"</td>\";\n              shapesHtml += \"<td class='shape_cell'>\" + shape['id'] + \"</td>\"\n              var theZ =\n                  typeof shape.theZ === \"undefined\"? NOZT : shape.theZ + 1;\n              shapesHtml += \"<td class='shape_cell'>\" + theZ + \"</td>\";\n              var theT =\n                  typeof shape.theT === \"undefined\"? NOZT : shape.theT + 1;\n              shapesHtml += \"<td class='shape_cell'>\" + theT + \"</td>\";\n              shapesHtml += \"<td class='shape_cell shape_text' title=\\\"\"+ text.escapeHTML() +\"\\\"><p>\"+ truncate_text(text.escapeHTML()) + \"</p></td>\";\n              shapesHtml += \"<td class='shape_cell'>\" + shapeThumbHtml + \"</td>\";\n              shapesHtml += \"<td class='shape_cell'>\" + shapeVisibilityHtml + \"</td>\";\n              shapesHtml += \"</tr>\";\n              if (roiIcon == null) roiIcon = shape['type'];\n              else if (roiIcon != shape['type']) roiIcon = \"\";    // mixture of shapes - show no icon\n          }\n          if (roiText == null) roiText = \"\";\n          shapesHtml += '</tbody>';\n\n          // new tbody for each ROI\n          if (tRange != NOZT) tRange = \"\" + (minZ+1) + ((maxZ != minZ) && (\"-\"+(maxZ+1)) || (\"\"));\n          if (zRange != NOZT) zRange = \"\" + (minT+1) + ((maxT != minT) && (\"-\"+(maxT+1)) || (\"\"));\n          var roi_html = \"<thead><tr class='roi_row'>\";\n          roi_html += \"<th><img class='expand_arrow' src='{% static \"webgateway/img/arrowRight_grey.png\" %}' /></th>\";\n          roi_html += \"<th align='left'> &nbsp\"+ get_shape_icon_src(roiIcon, 'roi_icon') + \" (\" + shapes.length + \")</th>\"; // first shape (count)\n          roi_html += \"<th>\" + roi['id'] + \"</th>\";\n          roi_html += \"<th style='white-space: nowrap'> \"+ tRange +\" </th>\"; // no Z for ROI\n          roi_html += \"<th style='white-space: nowrap'> \"+ zRange +\" </th>\"; // no T for ROI\n          roi_html += \"<th class='shape_text' title=\\\"\"+ roiText.escapeHTML() +\"\\\"><p>\"+ truncate_text(roiText).escapeHTML() +\"</p></th>\";\n          roi_html += \"<th>\"+ roiThumbHtml +\"</th>\";\n          roi_html += \"<th>\" + roiVisibilityHtml + \"</th>\";\n          roi_html += \"</tr></thead>\";\n\n          var tbody = $(shapesHtml);\n          if (shapes.length > 1) {\n              $roi_table.append($(roi_html));      // add the roi thead\n          } else {\n              tbody.addClass('only_child');\n          }\n          $roi_table.append(tbody);    // add the tbody\n\n          // now bind mouseover\n          var $roi_thumb_popup = $('#roi_thumb_popup');\n          $('.roi_thumb').hover(function(e) {\n              $roi_thumb_popup.attr('src', $(this).attr('src')).show();\n          }, function(e){\n              $roi_thumb_popup.hide();\n          })\n            .hide();    // don't show thumbs initially\n          $('.roi_thumb').mousemove(function(e) {\n                $roi_thumb_popup.css({ 'left': e.pageX+5, 'top': e.pageY+5 })\n          });\n      }\n  }\n\n  // bound to call-back on roi plugin when ROIs loaded\n  var handle_rois_loaded = function(e) {\n      $(\"#rois_loading_message\").hide();\n      build_roi_table();\n      var $roi_table = $(\"#roi_small_table\");\n      $roi_table.find('tbody').hide();  // hides the shapes\n      $roi_table.find('tbody.only_child').show();\n\n  }\n\n  // bound to clicks on shapes in the viewer\n    var handle_shape_selection = function(e, shape_id) {\n        var $roi_table = $(\"#roi_small_table\");\n        // show the rows\n        var $row = $(\"#\"+shape_id+\"_shape\");\n        $roi_table.find('tbody').children().children().css('background-color', '');// all rows white...\n        $row.children().css('background-color', '#d0d0ff');      // ...show this row blue\n        $row.parent().show();   // show this 'tbody' set of shapes\n        var arrow_src = '{% static \"webgateway/img/arrowDown_grey.png\" %}';\n        $row.parent().prev('thead').find('img.expand_arrow').attr('src', arrow_src);\n    }\n\n    // update src of roi_thumbnails, based on colour. If 'null', set no src and hide thumbs\n    var update_roi_thumbs = function(line_color) {\n        // we set visibility based on 'toggle_roi_thumbs' checkbox\n        var vis = ($(\"#toggle_roi_thumbs\").is(\":checked\"));\n        var update_thumbs = function() {\n            var $thmb = $(this);\n            if (vis) {\n                if ((typeof line_color == 'undefined') || (line_color == null)) {\n                    // update src based on color attribute\n                    line_color = $thmb.attr('color');\n                } else {\n                    $thmb.attr('color', line_color);\n                }\n                var thmb_id = parseInt($thmb.attr('id'));\n                var thmb_src = \"{% url 'webgateway_render_roi_thumbnail' 0 %}\"+ thmb_id +\"/?color=\" + line_color;\n                if ($thmb.hasClass('shape_thumb')) {\n                    thmb_src = \"{% url 'webgateway_render_shape_thumbnail' 0 %}\"+ thmb_id +\"/?color=\" + line_color;\n                }\n                $thmb.attr('src', thmb_src);\n                $thmb.show();\n            } else {\n                // hide thumb and remove src (don't load thumbs)\n                $thmb.attr('src', '');\n                $thmb.hide();\n            }2\n        }\n        $('.roi_thumb').each(update_thumbs);\n        //$('.shape_thumb').each(update_thumbs);\n    }\n\n  var linePlotPos = function (ev, obj) {\n    $('#wblitz-lp-editpos').val(obj);\n    showLinePlot();\n  };\n\n  function undoRDCW () {\n    viewport.undo_channels();\n    syncRDCW(viewport);\n  }\n\n  function redoRDCW () {\n    if (on_batchCopyRDefs) {\n      return batchCopyRDefs_action('cancel');\n    }\n    viewport.redo_channels();\n    syncRDCW(viewport);\n  }\n\n\n  function show_image_link() {\n    var link = location.href;\n    if (location.search.length > 0) {\n      link = location.href.split(location.search)[0];   // handle trailing #\n    }\n    link = link.replace(/(.*?\\/)\\d+(?:\\/\\d+)?(?:\\/)#?$/,'$1');\n    link = link + viewport.getCurrentImgUrlPath() + '?' + viewport.getQuery(true, true, true);\n    $('#curr-link input').attr('value', link);\n    return false;\n  }\n\n  function show_tooltip(self, ttid) {\n    var pos = $(self).parents('div').offset();\n    pos.top += $(self).parents('div').height();\n    pos.left += 10;\n    var tooltip = $('#' + ttid);\n    $('.popped').not(tooltip).removeClass('popped');\n    tooltip.css(pos)\n    .toggleClass('popped');\n    if (tooltip.is('.popped')) {\n      var ww = $(window).width() -5;\n      if ((pos.left + tooltip.width()) > ww) {\n        pos.left -= (pos.left + tooltip.width()) - ww;\n        tooltip.css(pos);\n      }\n      if (tooltip.offset().top + tooltip.height() >= $('#footer').offset().top) {\n        pos.top -= tooltip.height() + 20;\n        tooltip.css(pos);\n      }\n      var auto = $('#' + ttid).find('.autoselect').get(0);\n      if (auto) {\n        auto.focus();\n        auto.select();\n      }\n    }\n  }\n\n  function show_change(obj, val, klass) {\n    if (obj.value != val) {\n      $(obj).addClass(klass);\n    } else {\n      $(obj).removeClass(klass);\n    }\n  }\n\n\n\n  /* ]]> */\n</script>\n    <div id=\"channel-window-help\" style=\"display: none;\">\n      <h2>Rendering Details:</h2>\n      <p>Use the \"Rendering Details\" dialog box to change the viewer settings for this image.\n        The changes will be saved when you click the \"Save\" button.</p>\n      <p>To change the color displayed for a channel, click on the color-picker icon at the right to open the \"Choose Color\" dialog box. You can choose the color using the preset colors or color gradients. Alternatively, hexadecimal color codes may be input in the text box. The changes will take effect when you click \"OK\".</p>\n      <p>To change the color intensity, drag the slider handles for the individual channels to the left or right\n        to change the minimum and maximum display values.</p>\n    </div>\n\n    <!-- Floating boxes come on top -->\n    <div id=\"curr-link\" class=\"tooltipbox\">\n      <table cellspacing=\"0\">\n        <tr>\n          <td>\n            Link to this page:\n          </td>\n          <td class=\"left\">\n            <img class=\"popclose\" src=\"{% static \"webgateway/img/close.gif\" %}\" alt=\"close\" />\n          </td>\n        </tr>\n        <tr>\n          <td><input class=\"autoselect\" type=\"text\" size=\"40\" value=\"\" /></td>\n        </tr>\n      </table>\n    </div>\n\n    <img id=\"roi_thumb_popup\" style=\"border: solid #bbb 1px\"/>\n    <div id=\"roi_table_postit\" class=\"postit\">\n        <h1>ROIs</h1>\n        <div id='rois_loading_message'>Loading ROI data...</div>\n        <div id='roi_table_div'>\n            <table id='roi_small_table' cellpadding='0' cellspacing='0'></table>\n        </div>\n    </div>\n\n    <div id=\"metadata-postit\" class=\"postit\">\n      <h1>Image Information</h1>\n      <h3 class=\"can-collapse\">Basic Information</h3>\n      <div>\n        <table cellspacing=\"0\">\n          <tr class=\"odd\"><td class=\"title\">Image name:&nbsp;</td><td id=\"wblitz-image-name\"></td></tr>\n          <tr class=\"even\"><td class=\"title\">Owner:&nbsp;</td><td id=\"wblitz-image-author\"></td></tr>\n          <!--\n          <tr class=\"odd\"><td class=\"title\">Publication:&nbsp;</td><td id=\"wblitz-image-pub\"></td></tr>\n          <tr class=\"even\"><td class=\"title\">Publication ID:&nbsp;</td><td id=\"wblitz-image-pubid\"></td></tr>\n          <tr class=\"odd\"><td class=\"title\">Created on:&nbsp;</td><td id=\"wblitz-image-timestamp\"></td></tr>\n          -->\n        </table>\n      </div>\n      <h3 class=\"can-collapse\"> Dimensions </h3>\n      <div class=\"dimensions\">\n        <table cellspacing=\"0\">\n          <tr>\n            <th colspan=\"2\" width=\"50%\">Image Size</th>\n            <th colspan=\"2\">Pixel Size</th>\n          </tr>\n          <tr class=\"odd\">\n            <td class=\"title\">X:&nbsp;</td><td><span id=\"wblitz-image-width\"></span>px</td>\n            <td class=\"title\">X:&nbsp;</td><td><span id=\"wblitz-image-pixel-size-x\"></span></td>\n          </tr>\n          <tr class=\"even\">\n            <td class=\"title\">Y:&nbsp;</td><td><span id=\"wblitz-image-height\"></span>px</td>\n            <td class=\"title\">Y:&nbsp;</td><td><span id=\"wblitz-image-pixel-size-y\"></span></td>\n          </tr>\n          <tr class=\"odd\">\n            <td class=\"title\">Z:&nbsp;</td><td><span id=\"wblitz-image-z-count\"></span></td>\n            <td class=\"title\">Z:&nbsp;</td><td><span id=\"wblitz-image-pixel-size-z\"></span></td>\n          </tr>\n          <tr class=\"even\">\n            <td class=\"title\">T:&nbsp;</td><td><span id=\"wblitz-image-t-count\"></span></td>\n            <td colspan=\"2\"></td>\n          </tr>\n        </table>\n      </div>\n\n      <h3 class=\"can-collapse\" id=\"bulk-annotations\" style=\"display: none;\">Bulk Annotations</h3>\n      <div style=\"display: none;\">\n        <table cellspacing=\"0\">\n        </table>\n      </div>\n\n      <!--<h3 class=\"can-collapse defclose\"> Legend </h3>\n      <div id=\"wblitz-image-description\"><span id=\"wblitz-image-description-content\"></span></div>-->\n    </div>\n\n    <div id=\"rdef-postit\" class=\"postit\" style=\"width: 480px\">\n      <h1> Rendering Details </h1>\n      <div id=\"rdef-active-area\">\n\n        <ul class=\"toolbar borderless labels\">\n          <li>\n            <button id=\"rdef-setdef-btn\" class=\"button\" disabled=\"disabled\"\n                {% if manager.image.canAnnotate %}\n                  title=\"Save the current settings.\"\n                {% else %}\n                title=\"You don't have permission to save settings.\"\n                {% endif %}\n                >\n              <img src=\"{% static 'webclient/image/icon_save.png' %}\" style=\"position:relative; top:2px\" /><br>\n                Save\n            </button>\n\n          </li>\n\n          <li><button id=\"rdef-undo-btn\" class=\"button button-disabled\"\n              disabled=\"disabled\" title=\"Undo the last changes to settings\"\n              onclick=\"return undoRDCW();\">\n            <img src=\"{% static \"webclient/image/icon_undo16.png\" %}\" /><br>\n            Undo\n          </button> </li>\n          <li><button id=\"rdef-redo-btn\" class=\"button button-disabled\"\n              disabled=\"disabled\" title=\"Redo the last changes to settings\"\n              onclick=\"return redoRDCW();\">\n            <img src=\"{% static \"webclient/image/icon_redo16.png\" %}\" /><br>\n            Redo\n          </button></li>\n\n          <li class=\"seperator\"></li>\n\n          <li><button id=\"rdef-copy-btn\" class=\"button\" title=\"Copy Rendering Settings\">\n            <img src=\"{% static \"webclient/image/icon_toolbar_copy.png\" %}\"/><br>\n            Copy\n          </button></li>\n          <li><button id=\"rdef-paste-btn\" class=\"button button-disabled\"\n             title=\"Paste Rendering Settings\" disabled=\"disabled\">\n            <img src=\"{% static \"webclient/image/icon_toolbar_paste.png\" %}\"/><br>\n            Paste\n          </button></li>\n        </ul>\n\n        <div style=\"clear:both; border-bottom: solid #ddd 1px; margin: 5px 0;\"></div>\n\n        <div style=\"margin-bottom:5px\">\n          <a id=\"rdef-postit-help\" href=\"#\" onclick=\"return showChannelWindowHelp();\"><img src=\"{% static \"webgateway/img/question.png\" %}\" alt=\"Show help on channel window ranges\" /></a>\n          <input id=\"rd-wblitz-rmodel\" type=\"checkbox\" onchange=\"return handleModelCheckbox();\"/>\n          <label for=\"rd-wblitz-rmodel\">Greyscale</label>\n          <div style=\"float: right\">\n            <input type=\"checkbox\" id=\"showhistogram\" />\n            <label>Show Histogram</label>\n          </div>\n          <div id=\"histogram\" style=\"display:none; width: 100%; height: 125px; background:white; border: solid #ccc 1px; margin-bottom: 6px\"></div>\n          <table cellspacing=\"0\">\n            <tr>\n            </tr>\n          </table>\n        </div>\n\n\n        <button id=\"rdef-minmax-btn\" title=\"Each slider will be set to cover the min/max pixel intensities for that channel\">\n          Min/Max\n        </button>\n        <button id=\"rdef-fullrange-btn\" title=\"Each slider will be set to cover the full range of pixel intensities for the image\">\n          Full Range\n        </button>\n        <button id=\"rdef-reset-btn\" title=\"Applies the original imported settings for this image\">\n          Imported\n        </button>\n      </div>\n\n    </div>\n\n    <!-- End floating boxes -->\n    <div id=\"wblitz\">\n      <div id=\"wblitz-workarea\">\n      <!-- Top Toolbox -->\n        <!-- Zoom -->\n        <div class=\"box\">\n            <h1>Viewing Options</h1>\n          <div class=\"even row\">\n              <!-- multiselect hidden for big images in jquery-plugin-viewportImage.js -->\n            <div class=\"multiselect selected\">\n              Normal\n              <input type=\"radio\" value=\"normal\" name=\"wblitz-proj\" checked onclick=\"return setProjection(this);\" />\n            </div>\n            <div class=\"multiselect\">\n              Max Intensity\n              <input type=\"radio\" value=\"intmax\" name=\"wblitz-proj\" onclick=\"return setProjection(this);\" />\n            </div>\n            <div class=\"multiselect\">\n              Split Channel\n              <input type=\"radio\" value=\"split\" name=\"wblitz-proj\" onclick=\"return setProjection(this);\" />\n            </div>\n            <!--select id=\"wblitz-proj\" onchange=\"viewport.setProjection(this.item(this.selectedIndex).value);\">\n              <option value=\"normal\">Normal</option>\n              <option value=\"intmax\">Maximum Intensity</option>\n              <option value=\"split\">Split Channel</option>\n            </select-->\n          </div>\n          <div class=\"odd row\">\n            <label for=\"wblitz-quality\" class=\"odd\">Quality</label>\n            <!-- br /><input type=\"radio\" name=\"wblitz-quality\" value=\"1.0\"> High</input>\n            <br /><input type=\"radio\" name=\"wblitz-quality\" value=\"0.9\" checked=\"checked\"> Normal</input>\n            <br /><input type=\"radio\" name=\"wblitz-quality\" value=\"0.5\"> Low</input -->\n            <select id=\"wblitz-quality\" onchange=\"viewport.setQuality(this.item(this.selectedIndex).value);\">\n              <option value=\"1.0\">High</option>\n              <option value=\"0.9\" selected=\"selected\">Normal</option>\n              <option value=\"0.5\">Low</option>\n            </select>\n          </div>\n          <div class=\"even row\">\n            <label for=\"wblitz-zoom\">Zoom (%)</label><br />\n            <input type=\"text\" class=\"spin-button\" id=\"wblitz-zoom\" value=\"100\" onchange=\"zoomCheck(this)\" size=\"5\" />\n            <button id=\"full-size\"\n                    title=\"Actual size\"\n                    onclick=\"viewport.setZoom(100)\" ></button>\n            <button id=\"full-screen\"\n                    title=\"Zoom image to fit\"\n                    onclick=\"viewport.setZoomToFit()\"></button>\n          </div>\n          <div class=\"odd row\">\n            <label for=\"wblitz-lp-enable\">Line Plot</label> <input id=\"wblitz-lp-enable\" type=\"checkbox\" onclick=\"editLinePlot(this.checked)\" />\n            <div id=\"wblitz-lp-wrap\" style=\"display: none\">\n              <div>Axis:\n                <select id=\"wblitz-lp-axis-select\" onchange=\"prepLinePlot(this.options[this.options.selectedIndex].value)\">\n                  <option value=\"h\" selected=\"selected\">Horizontal</option>\n                  <option value=\"v\">Vertical</option>\n                </select>\n              </div>\n              <span id=\"wblitz-lp-axis\"></span> =\n              <input type=\"text\" id=\"wblitz-lp-editpos\" size=\"4\" />\n              <button id=\"wblitz-lp-btn\" onclick=\"showLinePlot()\"></button>\n              <div id=\"wblitz-lp-cur\"></div>\n            </div>\n          </div>\n          <h1>Rendering Details</h1>\n          <div class=\"odd row\">\n            <label for=\"wblitz-channels-box\">Channels</label> - <a href=\"#\" onclick=\"$('#rdef-postit').toggle(); return false;\">Edit</a><br />\n            <span id=\"wblitz-channels-box\"></span>\n          </div>\n          <div class=\"even row\">\n            <label for=\"wblitz-rmodel\">Grayscale</label>\n            <input id=\"wblitz-rmodel\" type=\"checkbox\" />\n\t    {% comment %}<!-- #8766 {% if not blitzcon.isAnonymous and image.canWrite %}\n\t    <br />\n            <label for=\"wblitz-invaxis\">Invert Z/T Axis</label>\n            <input id=\"wblitz-invaxis\" type=\"checkbox\" onchange=\"viewport.setInvertedAxis(this.checked);\" />\n\t    {% endif %}-->{% endcomment %}\n            <br />\n            <label>Rendering Settings</label><br />\n            <button id=\"rdef-copy-btn-viewer\" class=\"btn silver btn_text\" title=\"Copy Rendering Settings\">\n                <span>Copy</span>\n            </button>\n\n            <button id=\"rdef-paste-btn-viewer\" class=\"btn silver btn_text\" title=\"Paste Rendering Settings\">\n                <span>Paste</span>\n            </button>\n          </div>\n          <div class=\"odd row\">\n            <label for=\"wblitz-interpolate\">Interpolate</label>\n            <input id=\"wblitz-interpolate\" type=\"checkbox\" {% if interpolate %}checked{% endif %}/>\n          </div>\n            <h1>Current Image</h1>\n          <div class=\"even row\">\n            <span style=\"font-size: 0.9em\">\n            <!--<span id=\"wblitz-shortname\" style=\"white-space: nowrap;\"></span><br />-->\n            Z: <span id=\"wblitz-z-curr\">?</span>/<span id=\"wblitz-z-count\">?</span> |\n            T: <span id=\"wblitz-t-curr\">1</span>/<span id=\"wblitz-t-count\">1</span>\n            </span>\n          </div>\n          {% if image.getPixelSizeX %}\n          <div class=\"odd row\">\n            <label for=\"wblitz-scalebar\">Scale bar</label>\n            <input id=\"wblitz-scalebar\" type=\"checkbox\" disabled/>\n          </div>\n          {% endif %}\n          <div class=\"even row\">\n            <a href=\"#\" onclick=\"$('#metadata-postit').toggle(); return false;\">Image Information</a><br />\n          </div>\n          <div class=\"odd row\">\n                      <a href=\"#\" onmouseover=\"this.href=viewport.getUrl('img_detail')\"\n                      onclick=\"show_image_link();\n                        show_tooltip(this, 'curr-link'); return false;\">\n                Image Link\n            </a><br />\n          </div>\n{% block roi_buttons %}\n          <div id=\"roi_controls\">\n                <h1>ROI Count: {{ roiCount }}</h1>\n                {% if roiCount > 0 %}\n                  <!-- 'link is enabled on imageLoad callback -->\n                    <a id=\"show-rois-a\" href=\"#\" style=\"color:gray\"\n                        {% if roiCount > roiLimit  %}\n                            title=\"Cannot display more than {{roiLimit}} ROIs\"\n                        {% endif %}>Show ROIs</a> |\n                    <a id=\"hide-rois-a\" style=\"color:gray\">Hide</a>\n                {% endif %}\n          </div>\n{% endblock roi_buttons %}\n          <div class=\"odd row\">\n             <button id=\"prevImage\" class=\"btn prev_next_image\" title=\"Previous Image\" disabled=\"disabled\">\n                <span>< Prev</span>\n            </button>\n            <button id=\"nextImage\" class=\"btn prev_next_image\" title=\"Next Image\" disabled=\"disabled\">\n                <span>Next ></span>\n            </button>\n          </div>\n          {% block current_image_tools %}{% endblock %}\n        </div>\n\n        <!-- Image Viewport -->\n        <div id=\"weblitz-viewport\"></div>\n        <img id=\"z-axis-legend\" src=\"{% static \"webgateway/img/z_axis.gif\" %}\" />\n        <img id=\"t-axis-legend\" src=\"{% static \"webgateway/img/t_axis.gif\" %}\" />\n        <div class=\"figure-box-holder\">\n        </div>\n      </div>\n    </div>\n    <div id=\"footer\">\n    {% block footer_content %}\n      &copy; 2007-{{ build_year }} Glencoe Software Inc. All rights reserved.\n    {% endblock %}\n    </div>\n{% endblock full_body %}\n\n<script type=\"text/javascript\">\n  /* <![CDATA[ */\n  $(document).ready(function () {\n    $.ajaxSettings.cache = false;\n  });\n{% block content_script %}\n\n  var gs_static_location_prefix='{% static \"\" %}';\n\n  $(document).ready(function () {\n\n    // Load Lookup Tables - need them ASAP\n    $.getJSON(\"{% url 'webgateway_listLuts_json' %}\", function(data){\n      OME.LUTS = data.luts;\n      OME.PNG_LUTS = data.png_luts;\n    });\n\n    /* Prepare the viewport */\n\n\n    viewport = $.WeblitzViewport($('#weblitz-viewport'), '{{ viewport_server }}',{% block viewport_opts %}{'mediaroot': '{{ STATIC_URL }}' }{% endblock %});\n    viewport.bind('imageLoad', _refresh_cb);\n    viewport.bind('imageLoad', _load_metadata);\n\n    /* Bind zoom changes to the zoom button */\n    viewport.bind('zoom', function(e, percent) {\n      $(\"#wblitz-zoom\").val(''+percent);\n      $(\".popped\").removeClass('popped');\n    });\n\n    /* Bind projection changes */\n    viewport.bind('projectionChange', projectionChange);\n    /* Bind model changes */\n    viewport.bind('modelChange', modelChange);\n    /* Bind channel changes */\n    viewport.bind('channelChange', channelChange);\n    viewport.bind('imageChange', function(){\n      syncChannelsActive(viewport);\n    });\n    /* Bind image changes */\n    viewport.bind('imageChange', function(){\n      imageChange(viewport);\n      axisChange();\n    });\n    /* Bind line plot changes */\n    viewport.bind('linePlotChange', linePlotChange);\n    /* Bind line plot position pick */\n    viewport.bind('linePlotPos', linePlotPos);\n\n    // once image loads, check session via /getImgRDef/ to see if we can paste\n    viewport.bind('imageLoad', function() {\n      // disable histogram for big images\n      if (viewport.loadedImg.tiles) {\n        $(\"#showhistogram\").attr('disabled', true)\n          .parent().css('color', '#bbb')\n          .attr('title', 'Histogram not supported for tiled images');\n        $(\"#wblitz-lp-enable\").attr('disabled', true)\n          .parent().css('color', '#bbb')\n          .attr('title', 'Line plot not supported for tiled images');\n      }\n\n      // Enable 'Show ROIs' button\n    {% if roiCount > 0 and roiCount <= roiLimit  %}\n        $(\"#show-rois-a\").on(\"click\", function () { show_rois(); return false; })\n            .attr(\"href\", \"#\").css(\"color\", \"\");\n    {% endif %}\n      $.getJSON(viewport.viewport_server + \"/getImgRDef/\",\n        function(data){\n            if (data.rdef) {\n              var channels = data.rdef.c.split(\",\"); // c=1|3336:38283$FF0000,2|1649:17015$00FF00\n              if (channels.length != viewport.getChannels().length ||\n                data.rdef.pixel_range != viewport.loadedImg.pixel_range.join(\":\")) {\n                  // images are not compatible\n                  $(\"#rdef-paste-btn\")\n                    .attr('title', 'Copied settings are not compatible with this image');\n                  return;\n                }\n                $(\"#rdef-paste-btn\").prop('disabled', false).removeClass(\"button-disabled\");\n            }\n        }\n      );\n\n      // disable 'Full Range' button if pixelsType is 'float' or 'double'\n      if ($.inArray(viewport.loadedImg.meta.pixelsType, [\"float\", \"double\"]) > -1) {\n        $(\"#rdef-fullrange-btn\").attr(\"disabled\", \"disabled\").addClass(\"button-disabled\");\n      }\n\n      var sizes = viewport.getSizes();\n      // Currently relies on `pixel_range` coming from the server being based\n      // on pixel type byte width\n      var bytes_per_pixel = Math.ceil(\n        Math.log2(viewport.loadedImg.pixel_range[1]) / 8.0);\n      var stack_size = sizes.width * sizes.height * sizes.z\n                       * sizes.c * bytes_per_pixel;\n\n      // disable 'Max Intensity' projection for single-Z images or if total\n      // amount of data that might be projected is > 256MiB\n      var disable_intmax = (\n        viewport.loadedImg.rdefs.invertAxis || sizes.z < 2\n        || stack_size > 256 * 1024 * 1024\n      );\n      $('[name=\"wblitz-proj\"][value=intmax]').prop('disabled', disable_intmax);\n    });\n\n    // 'Color' checkbox to left of image\n    $(\"#wblitz-rmodel\").on('click', function(){\n      setModel(viewport, $(this).get(0).checked?'g':'c');\n    });\n\n    /* Prepare pop tools */\n    $(\".popover > h1\")\n      .prepend('<div class=\"drop-img drop-left\"></div><div class=\"drop-img drop-right\"></div>')\n      .on('click', function () {\n        var this_popped = $(this).parent().is('.popped');\n        $(\".popped\").removeClass('popped');\n        if (this_popped) {\n          $(this).parent().removeClass('popped');\n        } else {\n          $(this).parent().addClass('popped');\n        }\n        return false;\n      });\n\n    $(\".popclose\").on('click', function () {\n      $(\".popped\").removeClass('popped');\n    });\n\n    $(\"#weblitz-viewport\").on('click', function () {\n      $(\".popped\").removeClass('popped');\n      return false;\n    })\n    .on(\"imageChange\", function () {\n      $(\".popped\").removeClass('popped');\n    });\n\n//    var pprep = function (t) {\n//    return function () {\n    /* Prepare the post-its */\n    var layout_pos = $(\"#header\").offset(); //$(\"#weblitz-viewport\").offset();\n    $(\".postit\").each(function () {\n      if (this.id == 'metadata-postit') {\n        $(this).postit({noResize: false, resizeTarget: '#wblitz-image-description'});//.css($(\"#weblitz-viewport-vp\").offset());\n      } else if (this.id == 'roi_table_postit') {\n          $(this).postit({noResize: true})\n            .css(layout_pos);\n      } else {\n        layout_pos.left += 20;\n        layout_pos.top += 20;\n        $(this).postit({noResize: true})\n          .css(layout_pos);\n      }\n    });\n\n    // Create Histogram - displayed when #showhistogram checkbox is checked\n    // NB: we do this AFTER the postit init above, otherwise $(\"#showhistogram\").on('click', ) gets unbound!\n    OME.createViewportHistogram(viewport, \"#histogram\", \"#showhistogram\", \"{% url 'webgateway' %}\");\n\n    var legend_open = function () {\n      var d = $(this);\n      d.off('opening', legend_open);\n      /* Calculate the size for legend post-it */\n      var h = $('#weblitz-viewport-vp').height();\n      var w = ($('#weblitz-viewport-vp').width() - h) /2;\n      d.css('width', Math.max(w, 250));\n      if (d.height() > h) {\n        d.css('height', h);\n      }\n      d.trigger('jqResize');\n    };\n    $(\"#legend-postit\").on('opening', legend_open);\n\n    zindex_automator('.postit', 210);\n\n    /* Make (kind of) sure that closing the rendering defs window closes an eventually opened color picker */\n    $(\"#rdef-postit\").on('closed',\n      function () {\n                    hidePicker();\n                  });\n\n    $('.can-collapse').on('click', function () {\n      $(this).toggleClass('closed').next().slideToggle();\n    });\n\n    $('.can-collapse.defclose').each(function () {\n      $(this).removeClass('defclose').toggleClass('closed').next().hide();\n    });\n//    };\n//    setTimeout ( pprep(this), 1000);\n\n    /* Load the selected image into the viewport */\n    var did = '{{ dataset.id }}';\n    viewport.setQuality('0.9');\n    viewport.load({{ image.id }}, did.length ? parseInt(did) : null, location.search);\n\n    /* Bind actions needed on window resize */\n    $(window).on('resize', calcResize);\n\n    $('input[name=wblitz-quality]').on('click', function () {\n      viewport.setQuality(this.value);\n    });\n\n    viewport.bind('imageChange', refresh_rois);\n    viewport.bind('instant_zoom', function(e, percent) {\n        if (viewport.viewportimg.get(0).setRoiZoom) {\n            viewport.viewportimg.get(0).setRoiZoom(percent);\n        }\n        if (viewport.viewportimg.get(0).setScalebarZoom) {\n            viewport.viewportimg.get(0).setScalebarZoom(percent/100);\n        }\n    });\n\n    var copy_paste_rdef_url = \"{% url 'webgateway_copy_image_rdef_json' %}\";\n    // Handle clicks on Copy/paste in toolbar and left of main viewer\n    // NB: Need to use IDs for robot tests\n    $(\"#rdef-copy-btn, #rdef-copy-btn-viewer\").on('click', function() {\n        copyRdefs(viewport);\n    });\n    $(\"#rdef-paste-btn, #rdef-paste-btn-viewer\").on('click', function() {\n        pasteRdefs(viewport);\n    });\n\n    $(\"#wblitz-interpolate\").on('click', function(event){\n      var interpolate = $(this).is(\":checked\");\n      if (viewport) {\n        viewport.setPixelated(!interpolate);\n      }\n    });\n\n    // Reset defaults without saving\n    $(\"#rdef-reset-btn\").on('click', function(){\n      resetImageDefaults(viewport);\n    });\n\n    $(\"#rdef-minmax-btn\").on('click', function(){\n      viewport.setChannelMinMax();\n      syncRDCW(viewport);\n      viewport.save_channels();\n      updateUndoRedo(viewport);\n    });\n\n    $(\"#rdef-fullrange-btn\").on('click', function(){\n      viewport.setChannelFullRange();\n      syncRDCW(viewport);\n      viewport.save_channels();\n      updateUndoRedo(viewport);\n    });\n\n\n    var toggle_th = function($roiThead) {\n        $roiThead.next().toggle(0, function(){\n            var vis = $roiThead.next().is(':visible');\n            var arrow_src = '{% static \"webgateway/img/arrowRight_grey.png\" %}';\n            if (vis) {\n                arrow_src = '{% static \"webgateway/img/arrowDown_grey.png\" %}';\n            }\n            $roiThead.find('img.expand_arrow').attr('src', arrow_src);\n        });\n    }\n\n    var handleShapeRowClick = function($shapeRow){\n        var shape_id = parseInt($shapeRow.attr('id'));      // E.g. id='123_shape'\n        var selected_xy = viewport.viewportimg.get(0).set_selected_shape(shape_id);\n        var vpb = viewport.viewportimg.get(0).getBigImageContainer();\n        if (vpb!= null && viewport.loadedImg.tiles) {\n            var scale = vpb.currentScale();\n            vpb.recenter({x:selected_xy['x']*scale ,y:selected_xy['y']*scale}, true, true);\n        }\n        var z = $shapeRow.find('td:nth-child(4)').text();\n        if (z != NOZT) {\n            viewport.setZPos(parseInt(z));\n        }\n        var t = $shapeRow.find('td:nth-child(5)').text();\n        if (t != NOZT) {\n            viewport.setTPos(parseInt(t));\n        }\n    }\n\n    var check_visibility_column = function() {\n        if ( $('.roi_visibility').is(':checked') || $('.shape_visibility').is(':checked') ) {\n            $('#toggle_roi_visibility').prop('checked', true);\n        } else {\n            $('#toggle_roi_visibility').prop('checked', false);\n        }\n    }\n\n    var check_roi_visibility_checkbox = function(roi_id) {\n        var roi_id = parseInt(roi_id);\n        var roi_checkbox_id = '#' + roi_id + '_visibility';\n        var shape_checkboxes_class = '.roi_' + roi_id + '_vis';\n        if ( $(shape_checkboxes_class).is(':checked') ) {\n            $(roi_checkbox_id).prop('checked', true);\n            $('#toggle_roi_visibility').prop('checked', true);\n        } else {\n            $(roi_checkbox_id).prop('checked', false);\n            check_visibility_column();\n        }\n    }\n\n    $(\"#roi_small_table\").on('click', function(event) {\n        var $target = $(event.target);\n        if ($target.attr('id') == \"toggle_roi_thumbs\") {\n            update_roi_thumbs();\n            return true;\n        } else if ($target.hasClass('color_picker_option')) {\n            // change the colour of lines drawn on roi_thumbs\n            var line_color = $target.attr('color').substring(1);  // '#f00' -> 'f00'\n            update_roi_thumbs(line_color);\n        } else if ($target.attr('id') == \"toggle_shape_text\") {\n            var show_labels = ($(\"#toggle_shape_text\").is( \":checked\" ));\n            viewport.viewportimg.get(0).show_labels(show_labels);\n            return true;\n        } else if ($target.attr('id') == \"toggle_roi_visibility\") {\n            var activate_rois = ($(\"#toggle_roi_visibility\").is(\":checked\"));\n            if (activate_rois) {\n                var theT = viewport.getTPos();\n                var theZ = viewport.getZPos();\n                viewport.viewportimg.get(0).show_rois(theZ, theT, undefined);\n            } else {\n                viewport.viewportimg.get(0).hide_rois();\n            }\n            $('.roi_visibility').prop('checked', activate_rois);\n            $('.shape_visibility').prop('checked', activate_rois);\n            return true;\n        } else if ($target.hasClass('roi_visibility')) {\n            var roi_id = $target.attr('roi_id');\n            var act_roi = $target.is(':checked');\n            if (act_roi) {\n                viewport.viewportimg.get(0).activate_roi(roi_id);\n            } else {\n                viewport.viewportimg.get(0).deactivate_roi(roi_id);\n            }\n            var theZ = viewport.getZPos();\n            var theT = viewport.getTPos();\n            viewport.viewportimg.get(0).refresh_active_rois(theZ, theT);\n            var check_group_id = '.roi_' + roi_id + '_vis';\n            $(check_group_id).prop('checked', act_roi);\n            check_visibility_column();\n            return true;\n        } else if ($target.hasClass('shape_visibility')) {\n            var roi_id = $target.attr('roi_id');\n            var shape_id = $target.attr('shape_id');\n            var act_shape = $target.is(':checked');\n            if (act_shape) {\n                viewport.viewportimg.get(0).activate_shape(roi_id, shape_id);\n            } else {\n                viewport.viewportimg.get(0).deactivate_shape(roi_id, shape_id);\n            }\n            var theZ = viewport.getZPos();\n            var theT = viewport.getTPos();\n            viewport.viewportimg.get(0).refresh_active_rois(theZ, theT);\n            check_roi_visibility_checkbox(roi_id);\n            return true;\n        } else if ($target.hasClass('shape_cell')) {\n            // a shape td click selects the shape.\n            var $shapeRow = $target.parent();\n            handleShapeRowClick($shapeRow);\n        } else if ($target.parent().hasClass('shape_cell')) {\n            // a shape <p> click selects the shape.\n            var $shapeRow = $target.parent().parent();\n            handleShapeRowClick($shapeRow);\n        } else if ($target.hasClass('shape_icon')) {\n            // need to get to the row\n            var $shapeRow = $target.parent().parent();\n            handleShapeRowClick($shapeRow);\n        } else if ($target.get(0).nodeName.toLowerCase() == 'th'){\n            // a ROI (th) click toggles the ROI-shapes 'tbody' below\n            if ($target.parent().hasClass('roi_row')) {\n                var $roiThead = $target.parent().parent();\n                toggle_th($roiThead);\n            }\n        } else if ($target.parent().get(0).nodeName.toLowerCase() == \"th\"){\n            // a ROI (th <p>) click toggles the ROI-shapes 'tbody' below\n            if ($target.parent().parent().hasClass('roi_row')) {\n                var $roiThead = $target.parent().parent().parent();\n                toggle_th($roiThead);\n            }\n        } else if ($target.hasClass('expand_arrow') || $target.hasClass('roi_icon')) {\n            // clicked on the arrow - need to get the (th)\n            var $roiThead = $target.parent().parent().parent();\n            toggle_th($roiThead);\n        } else if ($target.hasClass('roi_thumb')) {\n            // roi thumbnail may be in thead/tr/td (ROI - toggle shapes) or tbody/tr/td (shape - update viewer)\n            var $tableRow = $target.parent().parent();\n            var nodeName = $tableRow.parent().get(0).nodeName.toLowerCase();\n            if (nodeName == 'tbody') {\n                handleShapeRowClick($tableRow);\n            }\n            else if (nodeName == 'thead') {\n                toggle_th($tableRow.parent());\n            }\n        }\n        return false;\n    });\n\n\n    // Check the Parent window for Previous / Next images...\n    parentWindow = false;\n    try {\n      // might get permission exception if window was opened from another website\n      if (window.opener && window.opener.$) {\n        parentWindow = true;\n      }\n    }\n    catch(err) {\n      console.log(\"window.opener not accessible\");\n    }\n    if (parentWindow) {\n      var $currentImg = window.opener && window.opener.$(\"#image_icon-{{ image.id }}\"),\n          prevImgId, nextImgId;\n      if ($currentImg.length === 1) {\n        // Main thumbnails window\n        prevImgId = $currentImg.prevAll(\":visible\").first().attr('id');\n        if (prevImgId) {prevImgId = prevImgId.split('image_icon-')[1]}\n        nextImgId = $currentImg.nextAll(\":visible\").first().attr('id');\n        if (nextImgId) {nextImgId = nextImgId.split('image_icon-')[1]}\n      } else if ($currentImg.length === 0) {\n        // if not found, try \"Search\" results page layout\n        $currentImg = window.opener.$(\"#image-{{ image.id }}\");\n        prevImgId = prevImgId || $currentImg.prevAll(\":visible\").first().attr('id');  // E.g: image-123\n        if (prevImgId) {\n          prevImgId = prevImgId.split('image-')[1];     // will be undefined if E.g: 'dataset-123'\n        }\n        nextImgId = nextImgId || $currentImg.nextAll(\":visible\").first().attr('id');\n        if (nextImgId) {\n          nextImgId = nextImgId.split('image-')[1];\n        }\n      }\n      // Enable Prev / Next buttons if available (disabled by default)\n      if (prevImgId) {\n        $(\"#prevImage\").prop('disabled', false);\n      }\n      if (nextImgId) {\n        $(\"#nextImage\").prop('disabled', false);\n      }\n\n      // Handle Prev / Next button clicks or keys\n      function nextPrevImage(direction) {\n        var id;\n        if( direction == -1 ) {\n          id = prevImgId;\n        } else {\n          id = nextImgId\n        }\n        if( id ) {\n          window.location.href = \"{{ viewport_server }}/img_detail/\" + id\n        }\n      }\n\n      // Prev / Next keys\n      $(document).on('keydown', function(e) {\n\n          // ignore keystrokes on other inputs, sliders etc.\n          if ($(e.target).prop(\"tagName\") !== \"BODY\") return;\n\n          switch(e.which) {\n              case 37: // left\n                   nextPrevImage(-1);\n              break;\n\n              case 39: // right\n                  nextPrevImage(1);\n              break;\n\n              default: return;\n          }\n          e.preventDefault();\n      });\n\n      $(\"#prevImage\").on('click', function(){\n        nextPrevImage(-1);\n      });\n      $(\"#nextImage\").on('click', function(){\n        nextPrevImage(1);\n      });\n    }\n    \n    // we can bind events to viewportimg for roi_display-plugin to trigger (plugin not created yet)\n    viewport.viewportimg.on(\"shape_click\", handle_shape_selection);\n    viewport.viewportimg.on(\"rois_loaded\", handle_rois_loaded);\n    \n    // 'Scalebar' checkbox to left of image\n    $(\"#wblitz-scalebar\").on('change', function() {\n        if(this.checked) {\n            show_scalebar();\n        } else {\n            hide_scalebar();\n        }\n    });\n  \n    // set up handlers for 'Save' button\n    $(\"#rdef-setdef-btn\").on('click', function(){\n      setImageDefaults(viewport, this, function() {\n        if (window.opener && window.opener.OME.refreshThumbnails) {\n            window.opener.OME.refreshThumbnails({'imageId':{{ image.id }},\n            'thumbnail_url': \"{% url 'get_thumbnail_json' image.id %}\" });\n        }\n      });\n    });\n\n    /* And we're done! */\n\n{% block initial_resize %}\n    /* Set Window Initial Size */\n    //if ($(document).width() < 1024 || $(document).height() < 768)\n    //  window.resizeTo(1024,768);\n{% endblock %}\n    calcResize();\n    gs_script_location_prefix=\"{% static \"webgateway/\" %}\";\n  });\n{% endblock content_script %}\n  /* ]]> */\n</script>\n\n{% endblock %}\n"], "filenames": ["CHANGELOG.md", "omeroweb/webadmin/templates/webadmin/includes/drivespaceStats.js", "omeroweb/webclient/static/webclient/javascript/ome.chgrp.js", "omeroweb/webclient/static/webclient/javascript/ome.chown.js", "omeroweb/webclient/static/webclient/javascript/ome.right_panel_comments_pane.js", "omeroweb/webclient/static/webclient/javascript/ome.right_panel_customanns_pane.js", "omeroweb/webclient/static/webclient/javascript/ome.right_panel_fileanns_pane.js", "omeroweb/webclient/static/webclient/javascript/ome.right_panel_tags_pane.js", "omeroweb/webclient/static/webclient/javascript/ome.tagging_form.js", "omeroweb/webclient/static/webclient/javascript/ome.thumbnail_figure.js", "omeroweb/webclient/templates/webclient/annotations/comments_underscore.html", "omeroweb/webclient/templates/webclient/annotations/customanns_underscore.html", "omeroweb/webclient/templates/webclient/annotations/fileanns_underscore.html", "omeroweb/webclient/templates/webclient/annotations/mapanns_underscore.html", "omeroweb/webclient/templates/webclient/annotations/metadata_general.html", "omeroweb/webclient/templates/webclient/annotations/tags_underscore.html", "omeroweb/webclient/templates/webclient/data/icon_thumbnails_underscore.html", "omeroweb/webclient/templates/webclient/data/includes/center_plugin.thumbs.js.html", "omeroweb/webclient/templates/webclient/data/plate.html", "omeroweb/webclient/templates/webclient/scripts/upload_script.html", "omeroweb/webclient/views.py", "omeroweb/webgateway/static/webgateway/js/ome.popup.js", "omeroweb/webgateway/static/webgateway/js/ome.roidisplay.js", "omeroweb/webgateway/static/webgateway/js/ome.spwgridview.js", "omeroweb/webgateway/static/webgateway/js/omero_image.js", "omeroweb/webgateway/templates/webgateway/viewport/omero_image.html"], "buggy_code_start_loc": [0, 21, 65, 40, 113, 91, 167, 146, 101, 204, 2, 4, 4, 4, 362, 4, 17, 645, 270, 126, 37, 172, 799, 130, 317, 547], "buggy_code_end_loc": [0, 52, 411, 54, 114, 92, 168, 162, 657, 267, 34, 32, 69, 85, 366, 49, 66, 667, 271, 127, 1797, 173, 805, 131, 550, 567], "fixing_code_start_loc": [1, 21, 65, 40, 112, 91, 166, 146, 101, 204, 2, 4, 4, 4, 362, 4, 17, 645, 270, 126, 38, 172, 799, 130, 317, 547], "fixing_code_end_loc": [7, 54, 411, 54, 112, 92, 166, 162, 643, 267, 34, 32, 69, 85, 366, 49, 66, 667, 271, 127, 1798, 175, 805, 131, 550, 567], "type": "CWE-79", "message": "OMERO.web provides a web based client and plugin infrastructure. In versions prior to 5.11.0, a variety of templates do not perform proper sanitization through HTML escaping. Due to the lack of sanitization and use of ``jQuery.html()``, there are a whole host of cross-site scripting possibilities with specially crafted input to a variety of fields. This issue is patched in version 5.11.0. There are no known workarounds aside from upgrading.", "other": {"cve": {"id": "CVE-2021-41132", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-14T16:15:09.447", "lastModified": "2021-10-20T19:14:48.183", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OMERO.web provides a web based client and plugin infrastructure. In versions prior to 5.11.0, a variety of templates do not perform proper sanitization through HTML escaping. Due to the lack of sanitization and use of ``jQuery.html()``, there are a whole host of cross-site scripting possibilities with specially crafted input to a variety of fields. This issue is patched in version 5.11.0. There are no known workarounds aside from upgrading."}, {"lang": "es", "value": "OMERO.web proporciona una infraestructura de clientes y plugins basada en la web. En las versiones anteriores a 5.11.0, varias plantillas no llevan a cabo un saneamiento apropiado mediante un escape de HTML. Debido a una falta de saneo y al uso de la funci\u00f3n \"jQuery.html()\", se presenta toda una serie de posibilidades de tipo cross-site scripting con entradas especialmente dise\u00f1adas para una variedad de campos. Este problema est\u00e1 parcheado en la versi\u00f3n 5.11.0. No se conocen soluciones aparte de la actualizaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-116"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmicroscopy:omero-figure:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.4.1", "matchCriteriaId": "A89CA68E-E768-4E87-A4BA-8DE6CE954535"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmicroscopy:omero-web:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.11.0", "matchCriteriaId": "2B82F896-F0E3-4349-A248-2801BDB43591"}]}]}], "references": [{"url": "https://github.com/ome/omero-web/commit/0168067accde5e635341b3c714b1d53ae92ba424", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ome/omero-web/security/advisories/GHSA-g67g-hvc3-xmvf", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.openmicroscopy.org/security/advisories/2021-SV3/", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ome/omero-web/commit/0168067accde5e635341b3c714b1d53ae92ba424"}}