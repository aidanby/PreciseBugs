{"buggy_code": ["<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Helpers\\Helper;\nuse App\\Http\\Requests\\ImageUploadRequest;\nuse App\\Models\\AssetModel;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\View;\nuse Redirect;\nuse Request;\nuse Storage;\n\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\n\n/**\n * This class controls all actions related to asset models for\n * the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n * @author [A. Gianotto] [<snipe@snipe.net>]\n */\nclass AssetModelsController extends Controller\n{\n    /**\n     * Returns a view that invokes the ajax tables which actually contains\n     * the content for the accessories listing, which is generated in getDatatable.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function index()\n    {\n        $this->authorize('index', AssetModel::class);\n        return view('models/index');\n    }\n\n    /**\n     * Returns a view containing the asset model creation form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function create()\n    {\n        $this->authorize('create', AssetModel::class);\n        return view('models/edit')->with('category_type', 'asset')\n            ->with('depreciation_list', Helper::depreciationList())\n            ->with('item', new AssetModel);\n    }\n\n\n    /**\n     * Validate and process the new Asset Model data.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param ImageUploadRequest $request\n     * @return Redirect\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function store(ImageUploadRequest $request)\n    {\n\n        $this->authorize('create', AssetModel::class);\n        // Create a new asset model\n        $model = new AssetModel;\n\n        // Save the model data\n        $model->eol = $request->input('eol');\n        $model->depreciation_id = $request->input('depreciation_id');\n        $model->name                = $request->input('name');\n        $model->model_number        = $request->input('model_number');\n        $model->manufacturer_id     = $request->input('manufacturer_id');\n        $model->category_id         = $request->input('category_id');\n        $model->notes               = $request->input('notes');\n        $model->user_id             = Auth::id();\n        $model->requestable         = Request::has('requestable');\n\n        if ($request->input('custom_fieldset')!='') {\n            $model->fieldset_id = e($request->input('custom_fieldset'));\n        }\n\n        $model = $request->handleImages($model);\n\n            // Was it created?\n        if ($model->save()) {\n            if ($this->shouldAddDefaultValues($request->input())) {\n                $this->assignCustomFieldsDefaultValues($model, $request->input('default_values'));\n            }\n\n            // Redirect to the new model  page\n            return redirect()->route(\"models.index\")->with('success', trans('admin/models/message.create.success'));\n        }\n        return redirect()->back()->withInput()->withErrors($model->getErrors());\n    }\n\n    /**\n     * Returns a view containing the asset model edit form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $modelId\n     * @return View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function edit($modelId = null)\n    {\n        $this->authorize('update', AssetModel::class);\n        if ($item = AssetModel::find($modelId)) {\n            $category_type = 'asset';\n            $view = View::make('models/edit', compact('item','category_type'));\n            $view->with('depreciation_list', Helper::depreciationList());\n            return $view;\n        }\n\n        return redirect()->route('models.index')->with('error', trans('admin/models/message.does_not_exist'));\n\n    }\n\n\n    /**\n     * Validates and processes form data from the edit\n     * Asset Model form based on the model ID passed.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param ImageUploadRequest $request\n     * @param int $modelId\n     * @return Redirect\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function update(ImageUploadRequest $request, $modelId = null)\n    {\n        $this->authorize('update', AssetModel::class);\n        // Check if the model exists\n        if (is_null($model = AssetModel::find($modelId))) {\n            // Redirect to the models management page\n            return redirect()->route('models.index')->with('error', trans('admin/models/message.does_not_exist'));\n        }\n\n        $model = $request->handleImages($model);\n\n        $model->depreciation_id     = $request->input('depreciation_id');\n        $model->eol                 = $request->input('eol');\n        $model->name                = $request->input('name');\n        $model->model_number        = $request->input('model_number');\n        $model->manufacturer_id     = $request->input('manufacturer_id');\n        $model->category_id         = $request->input('category_id');\n        $model->notes               = $request->input('notes');\n        $model->requestable         = $request->input('requestable', '0');\n\n\n\n        $this->removeCustomFieldsDefaultValues($model);\n\n        if ($request->input('custom_fieldset')=='') {\n            $model->fieldset_id = null;\n        } else {\n            $model->fieldset_id = $request->input('custom_fieldset');\n\n            if ($this->shouldAddDefaultValues($request->input())) {\n                $this->assignCustomFieldsDefaultValues($model, $request->input('default_values'));\n            }\n        }\n\n\n        if ($model->save()) {\n            return redirect()->route(\"models.index\")->with('success', trans('admin/models/message.update.success'));\n        }\n        return redirect()->back()->withInput()->withErrors($model->getErrors());\n    }\n\n    /**\n     * Validate and delete the given Asset Model. An Asset Model\n     * cannot be deleted if there are associated assets.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $modelId\n     * @return Redirect\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function destroy($modelId)\n    {\n        $this->authorize('delete', AssetModel::class);\n        // Check if the model exists\n        if (is_null($model = AssetModel::find($modelId))) {\n            return redirect()->route('models.index')->with('error', trans('admin/models/message.not_found'));\n        }\n\n        if ($model->assets()->count() > 0) {\n            // Throw an error that this model is associated with assets\n            return redirect()->route('models.index')->with('error', trans('admin/models/message.assoc_users'));\n        }\n\n        if ($model->image) {\n            try  {\n                Storage::disk('public')->delete('models/'.$model->image);\n            } catch (\\Exception $e) {\n                \\Log::info($e);\n            }\n        }\n\n        // Delete the model\n        $model->delete();\n\n        // Redirect to the models management page\n        return redirect()->route('models.index')->with('success', trans('admin/models/message.delete.success'));\n    }\n\n\n    /**\n     * Restore a given Asset Model (mark as un-deleted)\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $modelId\n     * @return Redirect\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function getRestore($modelId = null)\n    {\n        $this->authorize('create', AssetModel::class);\n        // Get user information\n        $model = AssetModel::withTrashed()->find($modelId);\n\n        if (isset($model->id)) {\n            $model->restore();\n            return redirect()->route('models.index')->with('success', trans('admin/models/message.restore.success'));\n        }\n        return redirect()->back()->with('error', trans('admin/models/message.not_found'));\n\n    }\n\n\n    /**\n     * Get the model information to present to the model view page\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $modelId\n     * @return View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function show($modelId = null)\n    {\n        $this->authorize('view', AssetModel::class);\n        $model = AssetModel::withTrashed()->find($modelId);\n\n        if (isset($model->id)) {\n            return view('models/view', compact('model'));\n        }\n\n        return redirect()->route('models.index')->with('error', trans('admin/models/message.does_not_exist'));\n    }\n\n    /**\n    * Get the clone page to clone a model\n    *\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @param int $modelId\n    * @return View\n    */\n    public function getClone($modelId = null)\n    {\n        $this->authorize('view', AssetModel::class);\n        // Check if the model exists\n        if (is_null($model_to_clone = AssetModel::find($modelId))) {\n            return redirect()->route('models.index')->with('error', trans('admin/models/message.does_not_exist'));\n        }\n\n        $model = clone $model_to_clone;\n        $model->id = null;\n\n        // Show the page\n        return view('models/edit')\n            ->with('depreciation_list', Helper::depreciationList())\n            ->with('item', $model)\n            ->with('clone_model', $model_to_clone);\n    }\n\n\n    /**\n    * Get the custom fields form\n    *\n    * @author [B. Wetherington] [<uberbrady@gmail.com>]\n    * @since [v2.0]\n    * @param int $modelId\n    * @return View\n    */\n    public function getCustomFields($modelId)\n    {\n        return view(\"models.custom_fields_form\")->with(\"model\", AssetModel::find($modelId));\n    }\n\n\n\n\n    /**\n     * Returns a view that allows the user to bulk edit model attrbutes\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.7]\n     * @return \\Illuminate\\Contracts\\View\\View\n     */\n    public function postBulkEdit(Request $request)\n    {\n\n        $models_raw_array = $request->input('ids');\n\n        // Make sure some IDs have been selected\n        if ((is_array($models_raw_array)) && (count($models_raw_array) > 0)) {\n\n\n            $models = AssetModel::whereIn('id', $models_raw_array)->withCount('assets as assets_count')->orderBy('assets_count', 'ASC')->get();\n\n            // If deleting....\n            if ($request->input('bulk_actions')=='delete') {\n                $valid_count = 0;\n                foreach ($models as $model) {\n                    if ($model->assets_count == 0) {\n                        $valid_count++;\n                    }\n                }\n                return view('models/bulk-delete', compact('models'))->with('valid_count', $valid_count);\n\n            // Otherwise display the bulk edit screen\n            } else {\n\n                $nochange = ['NC' => 'No Change'];\n                $fieldset_list = $nochange + Helper::customFieldsetList();\n                $depreciation_list = $nochange + Helper::depreciationList();\n\n                return view('models/bulk-edit', compact('models'))\n                    ->with('fieldset_list', $fieldset_list)\n                    ->with('depreciation_list', $depreciation_list);\n            }\n\n        }\n\n        return redirect()->route('models.index')\n            ->with('error', 'You must select at least one model to edit.');\n\n    }\n\n\n\n    /**\n     * Returns a view that allows the user to bulk edit model attrbutes\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.7]\n     * @return \\Illuminate\\Contracts\\View\\View\n     */\n    public function postBulkEditSave(Request $request)\n    {\n\n        $models_raw_array = $request->input('ids');\n        $update_array = array();\n\n\n        if (($request->filled('manufacturer_id') && ($request->input('manufacturer_id')!='NC'))) {\n            $update_array['manufacturer_id'] = $request->input('manufacturer_id');\n        }\n        if (($request->filled('category_id') && ($request->input('category_id')!='NC'))) {\n            $update_array['category_id'] = $request->input('category_id');\n        }\n        if ($request->input('fieldset_id')!='NC') {\n            $update_array['fieldset_id'] = $request->input('fieldset_id');\n        }\n        if ($request->input('depreciation_id')!='NC') {\n            $update_array['depreciation_id'] = $request->input('depreciation_id');\n        }\n\n\n        \n        if (count($update_array) > 0) {\n            AssetModel::whereIn('id', $models_raw_array)->update($update_array);\n            return redirect()->route('models.index')\n                ->with('success', trans('admin/models/message.bulkedit.success'));\n        }\n\n        return redirect()->route('models.index')\n            ->with('warning', trans('admin/models/message.bulkedit.error'));\n\n    }\n\n    /**\n     * Validate and delete the given Asset Models. An Asset Model\n     * cannot be deleted if there are associated assets.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $modelId\n     * @return Redirect\n     */\n    public function postBulkDelete(Request $request)\n    {\n        $models_raw_array = $request->input('ids');\n\n        if ((is_array($models_raw_array)) && (count($models_raw_array) > 0)) {\n\n            $models = AssetModel::whereIn('id', $models_raw_array)->withCount('assets as assets_count')->get();\n\n            $del_error_count = 0;\n            $del_count = 0;\n\n            foreach ($models as $model) {\n                \\Log::debug($model->id);\n\n                if ($model->assets_count > 0) {\n                    $del_error_count++;\n                } else {\n                    $model->delete();\n                    $del_count++;\n                }\n            }\n\n            \\Log::debug($del_count);\n            \\Log::debug($del_error_count);\n\n            if ($del_error_count == 0) {\n                return redirect()->route('models.index')\n                    ->with('success', trans('admin/models/message.bulkdelete.success',['success_count'=> $del_count] ));\n            }\n\n            return redirect()->route('models.index')\n                ->with('warning', trans('admin/models/message.bulkdelete.success_partial', ['fail_count'=>$del_error_count, 'success_count'=> $del_count]));\n        }\n\n        return redirect()->route('models.index')\n            ->with('error', trans('admin/models/message.bulkdelete.error'));\n\n    }\n\n    /**\n     * Returns true if a fieldset is set, 'add default values' is ticked and if\n     * any default values were entered into the form.\n     *\n     * @param  array  $input\n     * @return boolean\n     */\n    private function shouldAddDefaultValues(array $input)\n    {\n        return !empty($input['add_default_values'])\n            && !empty($input['default_values'])\n            && !empty($input['custom_fieldset']);\n    }\n\n    /**\n     * Adds default values to a model (as long as they are truthy)\n     *\n     * @param  AssetModel $model\n     * @param  array      $defaultValues\n     * @return void\n     */\n    private function assignCustomFieldsDefaultValues(AssetModel $model, array $defaultValues)\n    {\n        foreach ($defaultValues as $customFieldId => $defaultValue) {\n            if ($defaultValue) {\n                $model->defaultValues()->attach($customFieldId, ['default_value' => $defaultValue]);\n            }\n        }\n    }\n\n    /**\n     * Removes all default values\n     *\n     * @return void\n     */\n    private function removeCustomFieldsDefaultValues(AssetModel $model)\n    {\n        $model->defaultValues()->detach();\n    }\n}\n"], "fixing_code": ["<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Helpers\\Helper;\nuse App\\Http\\Requests\\ImageUploadRequest;\nuse App\\Models\\AssetModel;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\View;\nuse Redirect;\nuse Request;\nuse Storage;\n\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\n\n/**\n * This class controls all actions related to asset models for\n * the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n * @author [A. Gianotto] [<snipe@snipe.net>]\n */\nclass AssetModelsController extends Controller\n{\n    /**\n     * Returns a view that invokes the ajax tables which actually contains\n     * the content for the accessories listing, which is generated in getDatatable.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function index()\n    {\n        $this->authorize('index', AssetModel::class);\n        return view('models/index');\n    }\n\n    /**\n     * Returns a view containing the asset model creation form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function create()\n    {\n        $this->authorize('create', AssetModel::class);\n        return view('models/edit')->with('category_type', 'asset')\n            ->with('depreciation_list', Helper::depreciationList())\n            ->with('item', new AssetModel);\n    }\n\n\n    /**\n     * Validate and process the new Asset Model data.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param ImageUploadRequest $request\n     * @return Redirect\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function store(ImageUploadRequest $request)\n    {\n\n        $this->authorize('create', AssetModel::class);\n        // Create a new asset model\n        $model = new AssetModel;\n\n        // Save the model data\n        $model->eol = $request->input('eol');\n        $model->depreciation_id = $request->input('depreciation_id');\n        $model->name                = $request->input('name');\n        $model->model_number        = $request->input('model_number');\n        $model->manufacturer_id     = $request->input('manufacturer_id');\n        $model->category_id         = $request->input('category_id');\n        $model->notes               = $request->input('notes');\n        $model->user_id             = Auth::id();\n        $model->requestable         = Request::has('requestable');\n\n        if ($request->input('custom_fieldset')!='') {\n            $model->fieldset_id = e($request->input('custom_fieldset'));\n        }\n\n        $model = $request->handleImages($model);\n\n            // Was it created?\n        if ($model->save()) {\n            if ($this->shouldAddDefaultValues($request->input())) {\n                $this->assignCustomFieldsDefaultValues($model, $request->input('default_values'));\n            }\n\n            // Redirect to the new model  page\n            return redirect()->route(\"models.index\")->with('success', trans('admin/models/message.create.success'));\n        }\n        return redirect()->back()->withInput()->withErrors($model->getErrors());\n    }\n\n    /**\n     * Returns a view containing the asset model edit form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $modelId\n     * @return View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function edit($modelId = null)\n    {\n        $this->authorize('update', AssetModel::class);\n        if ($item = AssetModel::find($modelId)) {\n            $category_type = 'asset';\n            $view = View::make('models/edit', compact('item','category_type'));\n            $view->with('depreciation_list', Helper::depreciationList());\n            return $view;\n        }\n\n        return redirect()->route('models.index')->with('error', trans('admin/models/message.does_not_exist'));\n\n    }\n\n\n    /**\n     * Validates and processes form data from the edit\n     * Asset Model form based on the model ID passed.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param ImageUploadRequest $request\n     * @param int $modelId\n     * @return Redirect\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function update(ImageUploadRequest $request, $modelId = null)\n    {\n        $this->authorize('update', AssetModel::class);\n        // Check if the model exists\n        if (is_null($model = AssetModel::find($modelId))) {\n            // Redirect to the models management page\n            return redirect()->route('models.index')->with('error', trans('admin/models/message.does_not_exist'));\n        }\n\n        $model = $request->handleImages($model);\n\n        $model->depreciation_id     = $request->input('depreciation_id');\n        $model->eol                 = $request->input('eol');\n        $model->name                = $request->input('name');\n        $model->model_number        = $request->input('model_number');\n        $model->manufacturer_id     = $request->input('manufacturer_id');\n        $model->category_id         = $request->input('category_id');\n        $model->notes               = $request->input('notes');\n        $model->requestable         = $request->input('requestable', '0');\n\n\n\n        $this->removeCustomFieldsDefaultValues($model);\n\n        if ($request->input('custom_fieldset')=='') {\n            $model->fieldset_id = null;\n        } else {\n            $model->fieldset_id = $request->input('custom_fieldset');\n\n            if ($this->shouldAddDefaultValues($request->input())) {\n                $this->assignCustomFieldsDefaultValues($model, $request->input('default_values'));\n            }\n        }\n\n\n        if ($model->save()) {\n            return redirect()->route(\"models.index\")->with('success', trans('admin/models/message.update.success'));\n        }\n        return redirect()->back()->withInput()->withErrors($model->getErrors());\n    }\n\n    /**\n     * Validate and delete the given Asset Model. An Asset Model\n     * cannot be deleted if there are associated assets.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $modelId\n     * @return Redirect\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function destroy($modelId)\n    {\n        $this->authorize('delete', AssetModel::class);\n        // Check if the model exists\n        if (is_null($model = AssetModel::find($modelId))) {\n            return redirect()->route('models.index')->with('error', trans('admin/models/message.not_found'));\n        }\n\n        if ($model->assets()->count() > 0) {\n            // Throw an error that this model is associated with assets\n            return redirect()->route('models.index')->with('error', trans('admin/models/message.assoc_users'));\n        }\n\n        if ($model->image) {\n            try  {\n                Storage::disk('public')->delete('models/'.$model->image);\n            } catch (\\Exception $e) {\n                \\Log::info($e);\n            }\n        }\n\n        // Delete the model\n        $model->delete();\n\n        // Redirect to the models management page\n        return redirect()->route('models.index')->with('success', trans('admin/models/message.delete.success'));\n    }\n\n\n    /**\n     * Restore a given Asset Model (mark as un-deleted)\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $modelId\n     * @return Redirect\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function getRestore($modelId = null)\n    {\n        $this->authorize('create', AssetModel::class);\n        // Get user information\n        $model = AssetModel::withTrashed()->find($modelId);\n\n        if (isset($model->id)) {\n            $model->restore();\n            return redirect()->route('models.index')->with('success', trans('admin/models/message.restore.success'));\n        }\n        return redirect()->back()->with('error', trans('admin/models/message.not_found'));\n\n    }\n\n\n    /**\n     * Get the model information to present to the model view page\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $modelId\n     * @return View\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function show($modelId = null)\n    {\n        $this->authorize('view', AssetModel::class);\n        $model = AssetModel::withTrashed()->find($modelId);\n\n        if (isset($model->id)) {\n            return view('models/view', compact('model'));\n        }\n\n        return redirect()->route('models.index')->with('error', trans('admin/models/message.does_not_exist'));\n    }\n\n    /**\n    * Get the clone page to clone a model\n    *\n    * @author [A. Gianotto] [<snipe@snipe.net>]\n    * @since [v1.0]\n    * @param int $modelId\n    * @return View\n    */\n    public function getClone($modelId = null)\n    {\n        $this->authorize('create', AssetModel::class);\n        // Check if the model exists\n        if (is_null($model_to_clone = AssetModel::find($modelId))) {\n            return redirect()->route('models.index')->with('error', trans('admin/models/message.does_not_exist'));\n        }\n\n        $model = clone $model_to_clone;\n        $model->id = null;\n\n        // Show the page\n        return view('models/edit')\n            ->with('depreciation_list', Helper::depreciationList())\n            ->with('item', $model)\n            ->with('clone_model', $model_to_clone);\n    }\n\n\n    /**\n    * Get the custom fields form\n    *\n    * @author [B. Wetherington] [<uberbrady@gmail.com>]\n    * @since [v2.0]\n    * @param int $modelId\n    * @return View\n    */\n    public function getCustomFields($modelId)\n    {\n        return view(\"models.custom_fields_form\")->with(\"model\", AssetModel::find($modelId));\n    }\n\n\n\n\n    /**\n     * Returns a view that allows the user to bulk edit model attrbutes\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.7]\n     * @return \\Illuminate\\Contracts\\View\\View\n     */\n    public function postBulkEdit(Request $request)\n    {\n\n        $models_raw_array = $request->input('ids');\n\n        // Make sure some IDs have been selected\n        if ((is_array($models_raw_array)) && (count($models_raw_array) > 0)) {\n\n\n            $models = AssetModel::whereIn('id', $models_raw_array)->withCount('assets as assets_count')->orderBy('assets_count', 'ASC')->get();\n\n            // If deleting....\n            if ($request->input('bulk_actions')=='delete') {\n                $valid_count = 0;\n                foreach ($models as $model) {\n                    if ($model->assets_count == 0) {\n                        $valid_count++;\n                    }\n                }\n                return view('models/bulk-delete', compact('models'))->with('valid_count', $valid_count);\n\n            // Otherwise display the bulk edit screen\n            } else {\n\n                $nochange = ['NC' => 'No Change'];\n                $fieldset_list = $nochange + Helper::customFieldsetList();\n                $depreciation_list = $nochange + Helper::depreciationList();\n\n                return view('models/bulk-edit', compact('models'))\n                    ->with('fieldset_list', $fieldset_list)\n                    ->with('depreciation_list', $depreciation_list);\n            }\n\n        }\n\n        return redirect()->route('models.index')\n            ->with('error', 'You must select at least one model to edit.');\n\n    }\n\n\n\n    /**\n     * Returns a view that allows the user to bulk edit model attrbutes\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.7]\n     * @return \\Illuminate\\Contracts\\View\\View\n     */\n    public function postBulkEditSave(Request $request)\n    {\n\n        $models_raw_array = $request->input('ids');\n        $update_array = array();\n\n\n        if (($request->filled('manufacturer_id') && ($request->input('manufacturer_id')!='NC'))) {\n            $update_array['manufacturer_id'] = $request->input('manufacturer_id');\n        }\n        if (($request->filled('category_id') && ($request->input('category_id')!='NC'))) {\n            $update_array['category_id'] = $request->input('category_id');\n        }\n        if ($request->input('fieldset_id')!='NC') {\n            $update_array['fieldset_id'] = $request->input('fieldset_id');\n        }\n        if ($request->input('depreciation_id')!='NC') {\n            $update_array['depreciation_id'] = $request->input('depreciation_id');\n        }\n\n\n        \n        if (count($update_array) > 0) {\n            AssetModel::whereIn('id', $models_raw_array)->update($update_array);\n            return redirect()->route('models.index')\n                ->with('success', trans('admin/models/message.bulkedit.success'));\n        }\n\n        return redirect()->route('models.index')\n            ->with('warning', trans('admin/models/message.bulkedit.error'));\n\n    }\n\n    /**\n     * Validate and delete the given Asset Models. An Asset Model\n     * cannot be deleted if there are associated assets.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $modelId\n     * @return Redirect\n     */\n    public function postBulkDelete(Request $request)\n    {\n        $models_raw_array = $request->input('ids');\n\n        if ((is_array($models_raw_array)) && (count($models_raw_array) > 0)) {\n\n            $models = AssetModel::whereIn('id', $models_raw_array)->withCount('assets as assets_count')->get();\n\n            $del_error_count = 0;\n            $del_count = 0;\n\n            foreach ($models as $model) {\n                \\Log::debug($model->id);\n\n                if ($model->assets_count > 0) {\n                    $del_error_count++;\n                } else {\n                    $model->delete();\n                    $del_count++;\n                }\n            }\n\n            \\Log::debug($del_count);\n            \\Log::debug($del_error_count);\n\n            if ($del_error_count == 0) {\n                return redirect()->route('models.index')\n                    ->with('success', trans('admin/models/message.bulkdelete.success',['success_count'=> $del_count] ));\n            }\n\n            return redirect()->route('models.index')\n                ->with('warning', trans('admin/models/message.bulkdelete.success_partial', ['fail_count'=>$del_error_count, 'success_count'=> $del_count]));\n        }\n\n        return redirect()->route('models.index')\n            ->with('error', trans('admin/models/message.bulkdelete.error'));\n\n    }\n\n    /**\n     * Returns true if a fieldset is set, 'add default values' is ticked and if\n     * any default values were entered into the form.\n     *\n     * @param  array  $input\n     * @return boolean\n     */\n    private function shouldAddDefaultValues(array $input)\n    {\n        return !empty($input['add_default_values'])\n            && !empty($input['default_values'])\n            && !empty($input['custom_fieldset']);\n    }\n\n    /**\n     * Adds default values to a model (as long as they are truthy)\n     *\n     * @param  AssetModel $model\n     * @param  array      $defaultValues\n     * @return void\n     */\n    private function assignCustomFieldsDefaultValues(AssetModel $model, array $defaultValues)\n    {\n        foreach ($defaultValues as $customFieldId => $defaultValue) {\n            if ($defaultValue) {\n                $model->defaultValues()->attach($customFieldId, ['default_value' => $defaultValue]);\n            }\n        }\n    }\n\n    /**\n     * Removes all default values\n     *\n     * @return void\n     */\n    private function removeCustomFieldsDefaultValues(AssetModel $model)\n    {\n        $model->defaultValues()->detach();\n    }\n}\n"], "filenames": ["app/Http/Controllers/AssetModelsController.php"], "buggy_code_start_loc": [272], "buggy_code_end_loc": [273], "fixing_code_start_loc": [272], "fixing_code_end_loc": [273], "type": "CWE-862", "message": "snipe-it is vulnerable to Improper Access Control", "other": {"cve": {"id": "CVE-2021-4089", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-10T20:15:08.737", "lastModified": "2022-08-09T13:18:17.740", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "snipe-it is vulnerable to Improper Access Control"}, {"lang": "es", "value": "snipe-it es vulnerable al Control de Acceso Inapropiado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.3.3", "matchCriteriaId": "F7B92BBE-40C7-4E9C-9364-7DC9C5256F89"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/1699c09758e56f740437674a8d6ba36443399f24", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/19453ef1-4d77-4cff-b7e8-1bc8f3af0862", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/1699c09758e56f740437674a8d6ba36443399f24"}}