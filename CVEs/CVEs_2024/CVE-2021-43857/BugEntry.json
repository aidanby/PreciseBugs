{"buggy_code": ["import re\nfrom pathlib import Path\nfrom urllib.parse import unquote\nimport base64\nimport json, os, requests, time, pytz, pymongo\nfrom shutil import rmtree\nfrom requests.exceptions import ConnectionError\nfrom os.path import join, exists\nfrom django.shortcuts import render\nfrom django.core.serializers import serialize\nfrom django.http import HttpResponse\nfrom django.forms.models import model_to_dict\nfrom django.utils import timezone\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom subprocess import Popen, PIPE\nfrom gerapy import get_logger\nfrom gerapy.server.core.response import JsonResponse\nfrom gerapy.cmd.init import PROJECTS_FOLDER\nfrom gerapy.server.server.settings import TIME_ZONE\nfrom gerapy.server.core.models import Client, Project, Deploy, Monitor, Task\nfrom gerapy.server.core.build import build_project, find_egg\nfrom gerapy.server.core.utils import IGNORES, scrapyd_url, log_url, get_tree, get_scrapyd, process_html, bytes2str, \\\n    clients_of_task, get_job_id\nfrom django_apscheduler.models import DjangoJob, DjangoJobExecution\nfrom django.core.files.storage import FileSystemStorage\nimport zipfile\n\nlogger = get_logger(__name__)\n\n\n@api_view(['GET'])\n# @permission_classes([IsAuthenticated])\ndef index(request):\n    \"\"\"\n    render index page\n    :param request: request object\n    :return: page\n    \"\"\"\n    return render(request, 'index.html')\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef index_status(request):\n    \"\"\"\n    index statistics\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        clients = Client.objects.all()\n        data = {\n            'success': 0,\n            'error': 0,\n            'project': 0,\n        }\n        # clients info\n        for client in clients:\n            try:\n                requests.get(scrapyd_url(client.ip, client.port), timeout=1)\n                data['success'] += 1\n            except ConnectionError:\n                data['error'] += 1\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        files = os.listdir(path)\n        # projects info\n        for file in files:\n            if os.path.isdir(join(path, file)) and not file in IGNORES:\n                data['project'] += 1\n        return JsonResponse(data)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_index(request):\n    \"\"\"\n    get client list\n    :param request: request object\n    :return: client list\n    \"\"\"\n    return HttpResponse(serialize('json', Client.objects.order_by('-id')))\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_info(request, client_id):\n    \"\"\"\n    get client info\n    :param request: request object\n    :param id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        return JsonResponse(model_to_dict(Client.objects.get(id=client_id)))\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_status(request, client_id):\n    \"\"\"\n    get client status\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        # get client object\n        client = Client.objects.get(id=client_id)\n        requests.get(scrapyd_url(client.ip, client.port), timeout=3)\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_update(request, client_id):\n    \"\"\"\n    update client info\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        client = Client.objects.filter(id=client_id)\n        data = json.loads(request.body)\n        client.update(**data)\n        return JsonResponse(model_to_dict(Client.objects.get(id=client_id)))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_create(request):\n    \"\"\"\n    create a client\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        client = Client.objects.create(**data)\n        return JsonResponse(model_to_dict(client))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_remove(request, client_id):\n    \"\"\"\n    remove a client\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        client = Client.objects.get(id=client_id)\n        # delete deploy\n        Deploy.objects.filter(client=client).delete()\n        # delete client\n        Client.objects.filter(id=client_id).delete()\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef spider_list(request, client_id, project_name):\n    \"\"\"\n    get spider list from one client\n    :param request: request Object\n    :param client_id: client id\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        spiders = scrapyd.list_spiders(project_name)\n        spiders = [{'name': spider, 'id': index + 1} for index, spider in enumerate(spiders)]\n        return JsonResponse(spiders)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef spider_start(request, client_id, project_name, spider_name):\n    \"\"\"\n    start a spider\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param spider_name: spider name\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        job = scrapyd.schedule(project_name, spider_name)\n        return JsonResponse({'job': job})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_list(request, client_id):\n    \"\"\"\n    project deployed list on one client\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        projects = scrapyd.list_projects()\n        return JsonResponse(projects)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_index(request):\n    \"\"\"\n    project index list\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        files = os.listdir(path)\n        project_list = []\n        for file in files:\n            if os.path.isdir(join(path, file)) and not file in IGNORES:\n                project_list.append({'name': file})\n        return JsonResponse(project_list)\n\n\n@api_view(['GET', 'POST'])\n@permission_classes([IsAuthenticated])\ndef project_configure(request, project_name):\n    \"\"\"\n    get configuration\n    :param request: request object\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    # get configuration\n    if request.method == 'GET':\n        project = Project.objects.get(name=project_name)\n        project = model_to_dict(project)\n        project['configuration'] = json.loads(project['configuration']) if project['configuration'] else None\n        return JsonResponse(project)\n    \n    # update configuration\n    elif request.method == 'POST':\n        project = Project.objects.filter(name=project_name)\n        data = json.loads(request.body)\n        configuration = json.dumps(data.get('configuration'), ensure_ascii=False)\n        project.update(**{'configuration': configuration})\n        \n        # for safe protection\n        project_name = re.sub('[\\!\\@\\#\\$\\;\\&\\*\\~\\\"\\'\\{\\}\\]\\[\\-\\+\\%\\^]+', '', project_name)\n        # execute generate cmd\n        cmd = ' '.join(['gerapy', 'generate', project_name])\n        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n        \n        if not stderr:\n            return JsonResponse({'status': '1'})\n        else:\n            return JsonResponse({'status': '0', 'message': stderr})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_tree(request, project_name):\n    \"\"\"\n    get file tree of project\n    :param request: request object\n    :param project_name: project name\n    :return: json of tree\n    \"\"\"\n    if request.method == 'GET':\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        # get tree data\n        tree = get_tree(join(path, project_name))\n        return JsonResponse(tree)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_create(request):\n    \"\"\"\n    create a configurable project\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        data['configurable'] = 1\n        project, result = Project.objects.update_or_create(**data)\n        # generate a single project folder\n        path = join(os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER)), data['name'])\n        os.mkdir(path)\n        return JsonResponse(model_to_dict(project))\n\n\n@api_view(['POST'])\n# @permission_classes([IsAuthenticated])\ndef project_upload(request):\n    \"\"\"\n    upload project\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        file = request.FILES['file']\n        file_name = file.name\n        fs = FileSystemStorage(PROJECTS_FOLDER)\n        zip_file_name = fs.save(file_name, file)\n        logger.debug('zip file name %s', zip_file_name)\n        # extract zip file\n        with zipfile.ZipFile(join(PROJECTS_FOLDER, zip_file_name), 'r') as zip_ref:\n            zip_ref.extractall(PROJECTS_FOLDER)\n        logger.debug('extracted files to %s', PROJECTS_FOLDER)\n        return JsonResponse({'status': True})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_clone(request):\n    \"\"\"\n    clone project from github\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        address = data.get('address')\n        if not address.startswith('http'):\n            return JsonResponse({'status': False})\n        address = address + '.git' if not address.endswith('.git') else address\n        cmd = 'git clone {address} {target}'.format(address=address, target=join(PROJECTS_FOLDER, Path(address).stem))\n        logger.debug('clone cmd %s', cmd)\n        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n        logger.debug('clone run result %s', stdout)\n        if stderr: logger.error(stderr)\n        return JsonResponse({'status': True}) if not stderr else JsonResponse({'status': False})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_remove(request, project_name):\n    \"\"\"\n    remove project from disk and db\n    :param request: request object\n    :param project_name: project name\n    :return: result of remove\n    \"\"\"\n    if request.method == 'POST':\n        # delete deployments\n        project = Project.objects.get(name=project_name)\n        Deploy.objects.filter(project=project).delete()\n        # delete project\n        result = Project.objects.filter(name=project_name).delete()\n        # get project path\n        path = join(os.path.abspath(os.getcwd()), PROJECTS_FOLDER)\n        project_path = join(path, project_name)\n        # delete project file tree\n        if exists(project_path):\n            rmtree(project_path)\n        return JsonResponse({'result': result})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_version(request, client_id, project_name):\n    \"\"\"\n    get project deploy version\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: deploy version of project\n    \"\"\"\n    if request.method == 'GET':\n        # get client and project model\n        client = Client.objects.get(id=client_id)\n        project = Project.objects.get(name=project_name)\n        scrapyd = get_scrapyd(client)\n        # if deploy info exists in db, return it\n        if Deploy.objects.filter(client=client, project=project):\n            deploy = Deploy.objects.get(client=client, project=project)\n        # if deploy info does not exists in db, create deploy info\n        else:\n            try:\n                versions = scrapyd.list_versions(project_name)\n            except ConnectionError:\n                return JsonResponse({'message': 'Connect Error'}, status=500)\n            if len(versions) > 0:\n                version = versions[-1]\n                deployed_at = timezone.datetime.fromtimestamp(int(version), tz=pytz.timezone(TIME_ZONE))\n            else:\n                deployed_at = None\n            deploy, result = Deploy.objects.update_or_create(client=client, project=project, deployed_at=deployed_at)\n        # return deploy json info\n        return JsonResponse(model_to_dict(deploy))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_deploy(request, client_id, project_name):\n    \"\"\"\n    deploy project operation\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: json of deploy result\n    \"\"\"\n    if request.method == 'POST':\n        # get project folder\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        project_path = join(path, project_name)\n        # find egg file\n        egg = find_egg(project_path)\n        if not egg:\n            return JsonResponse({'message': 'egg not found'}, status=500)\n        egg_file = open(join(project_path, egg), 'rb')\n        # get client and project model\n        client = Client.objects.get(id=client_id)\n        project = Project.objects.get(name=project_name)\n        # execute deploy operation\n        scrapyd = get_scrapyd(client)\n        scrapyd.add_version(project_name, int(time.time()), egg_file.read())\n        # update deploy info\n        deployed_at = timezone.now()\n        Deploy.objects.filter(client=client, project=project).delete()\n        deploy, result = Deploy.objects.update_or_create(client=client, project=project, deployed_at=deployed_at,\n                                                         description=project.description)\n        return JsonResponse(model_to_dict(deploy))\n\n\n@api_view(['GET', 'POST'])\n@permission_classes([IsAuthenticated])\ndef project_build(request, project_name):\n    \"\"\"\n    get build info or execute build operation\n    :param request: request object\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    # get project folder\n    path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n    project_path = join(path, project_name)\n    \n    # get build version\n    if request.method == 'GET':\n        egg = find_egg(project_path)\n        # if built, save or update project to db\n        if egg:\n            built_at = timezone.datetime.fromtimestamp(os.path.getmtime(join(project_path, egg)),\n                                                       tz=pytz.timezone(TIME_ZONE))\n            if not Project.objects.filter(name=project_name):\n                Project(name=project_name, built_at=built_at, egg=egg).save()\n                model = Project.objects.get(name=project_name)\n            else:\n                model = Project.objects.get(name=project_name)\n                model.built_at = built_at\n                model.egg = egg\n                model.save()\n        # if not built, just save project name to db\n        else:\n            if not Project.objects.filter(name=project_name):\n                Project(name=project_name).save()\n            model = Project.objects.get(name=project_name)\n        # transfer model to dict then dumps it to json\n        data = model_to_dict(model)\n        return JsonResponse(data)\n    \n    # build operation manually by clicking button\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        description = data['description']\n        build_project(project_name)\n        egg = find_egg(project_path)\n        if not egg:\n            return JsonResponse({'message': 'egg not found'}, status=500)\n        # update built_at info\n        built_at = timezone.now()\n        # if project does not exists in db, create it\n        if not Project.objects.filter(name=project_name):\n            Project(name=project_name, description=description, built_at=built_at, egg=egg).save()\n            model = Project.objects.get(name=project_name)\n        # if project exists, update egg, description, built_at info\n        else:\n            model = Project.objects.get(name=project_name)\n            model.built_at = built_at\n            model.egg = egg\n            model.description = description\n            model.save()\n        # transfer model to dict then dumps it to json\n        data = model_to_dict(model)\n        return JsonResponse(data)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_parse(request, project_name):\n    \"\"\"\n    parse project\n    :param request: request object\n    :param project_name: project name\n    :return: requests, items, response\n    \"\"\"\n    if request.method == 'POST':\n        project_path = join(PROJECTS_FOLDER, project_name)\n        data = json.loads(request.body)\n        logger.debug('post data %s', data)\n        spider_name = data.get('spider')\n        args = {\n            'start': data.get('start', False),\n            'method': data.get('method', 'GET'),\n            'url': data.get('url'),\n            'callback': data.get('callback'),\n            'cookies': \"'\" + json.dumps(data.get('cookies', {}), ensure_ascii=False) + \"'\",\n            'headers': \"'\" + json.dumps(data.get('headers', {}), ensure_ascii=False) + \"'\",\n            'meta': \"'\" + json.dumps(data.get('meta', {}), ensure_ascii=False) + \"'\",\n            'dont_filter': data.get('dont_filter', False),\n            'priority': data.get('priority', 0),\n        }\n        # set request body\n        body = data.get('body', '')\n        if args.get('method').lower() != 'get':\n            args['body'] = \"'\" + json.dumps(body, ensure_ascii=False) + \"'\"\n        \n        args_cmd = ' '.join(\n            ['--{arg} {value}'.format(arg=arg, value=value) for arg, value in args.items()])\n        logger.debug('args cmd %s', args_cmd)\n        cmd = 'gerapy parse {args_cmd} {project_path} {spider_name}'.format(\n            args_cmd=args_cmd,\n            project_path=project_path,\n            spider_name=spider_name\n        )\n        logger.debug('parse cmd %s', cmd)\n        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n        logger.debug('stdout %s, stderr %s', stdout, stderr)\n        if not stderr:\n            return JsonResponse({'status': True, 'result': json.loads(stdout)})\n        else:\n            return JsonResponse({'status': False, 'message': stderr})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_read(request):\n    \"\"\"\n    get content of project file\n    :param request: request object\n    :return: file content\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        # binary file\n        with open(path, 'rb') as f:\n            return HttpResponse(f.read().decode('utf-8'))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_update(request):\n    \"\"\"\n    update project file\n    :param request: request object\n    :return: result of update\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        code = data['code']\n        with open(path, 'w', encoding='utf-8') as f:\n            f.write(code)\n            return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_create(request):\n    \"\"\"\n    create project file\n    :param request: request object\n    :return: result of create\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['name'])\n        open(path, 'w', encoding='utf-8').close()\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_delete(request):\n    \"\"\"\n    delete project file\n    :param request: request object\n    :return: result of delete\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        result = os.remove(path)\n        return JsonResponse({'result': result})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_rename(request):\n    \"\"\"\n    rename file name\n    :param request: request object\n    :return: result of rename\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        pre = join(data['path'], data['pre'])\n        new = join(data['path'], data['new'])\n        os.rename(pre, new)\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_list(request, client_id, project_name):\n    \"\"\"\n    get job list of project from one client\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: list of jobs\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.list_jobs(project_name)\n        jobs = []\n        statuses = ['pending', 'running', 'finished']\n        for status in statuses:\n            for job in result.get(status):\n                job['status'] = status\n                jobs.append(job)\n        return JsonResponse(jobs)\n    \n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_log(request, client_id, project_name, spider_name, job_id):\n    \"\"\"\n    get log of jog\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param spider_name: spider name\n    :param job_id: job id\n    :return: log of job\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        # get log url\n        url = log_url(client.ip, client.port, project_name, spider_name, job_id)\n        # get last 1000 bytes of log\n        response = requests.get(url, timeout=5, headers={\n            'Range': 'bytes=-1000'\n        }, auth=(client.username, client.password) if client.auth else None)\n        # Get encoding\n        encoding = response.apparent_encoding\n        # log not found\n        if response.status_code == 404:\n            return JsonResponse({'message': 'Log Not Found'}, status=404)\n        # bytes to string\n        text = response.content.decode(encoding, errors='replace')\n        return HttpResponse(text)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_cancel(request, client_id, project_name, job_id):\n    \"\"\"\n    cancel a job\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param job_id: job id\n    :return: json of cancel\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.cancel(project_name, job_id)\n        return JsonResponse(result)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef del_version(request, client_id, project, version):\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.delete_version(project=project, version=version)\n        return JsonResponse(result)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef del_project(request, client_id, project):\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.delete_project(project=project)\n        return JsonResponse(result)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_db_list(request):\n    \"\"\"\n    get monitor db list\n    :param request: request object\n    :return: json of db list\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        url = data['url']\n        type = data['type']\n        if type == 'MongoDB':\n            client = pymongo.MongoClient(url)\n            dbs = client.list_database_names()\n            return JsonResponse(dbs)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_collection_list(request):\n    \"\"\"\n    get monitor collection list\n    :param request: request object\n    :return: json of collection list\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        url = data['url']\n        db = data['db']\n        type = data['type']\n        if type == 'MongoDB':\n            client = pymongo.MongoClient(url)\n            db = client[db]\n            collections = db.collection_names()\n            return JsonResponse(collections)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_create(request):\n    \"\"\"\n    create a monitor\n    :param request: request object\n    :return: json of create\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        data = data['form']\n        data['configuration'] = json.dumps(data['configuration'], ensure_ascii=False)\n        monitor = Monitor.objects.create(**data)\n        return JsonResponse(model_to_dict(monitor))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_create(request):\n    \"\"\"\n    add task\n    :param request: request object\n    :return: Bool\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        task = Task.objects.create(clients=json.dumps(data.get('clients'), ensure_ascii=False),\n                                   project=data.get('project'),\n                                   name=data.get('name'),\n                                   spider=data.get('spider'),\n                                   trigger=data.get('trigger'),\n                                   configuration=json.dumps(data.get('configuration'), ensure_ascii=False),\n                                   modified=1)\n        return JsonResponse({'result': '1', 'data': model_to_dict(task)})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_update(request, task_id):\n    \"\"\"\n    update task info\n    :param request: request object\n    :param task_id: task id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        task = Task.objects.filter(id=task_id)\n        data = json.loads(request.body)\n        data['clients'] = json.dumps(data.get('clients'), ensure_ascii=False)\n        data['configuration'] = json.dumps(data.get('configuration'), ensure_ascii=False)\n        data['modified'] = 1\n        task.update(**data)\n        return JsonResponse(model_to_dict(Task.objects.get(id=task_id)))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_remove(request, task_id):\n    \"\"\"\n    remove task by task_id\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'POST':\n        # delete job from DjangoJob\n        task = Task.objects.get(id=task_id)\n        clients = clients_of_task(task)\n        for client in clients:\n            job_id = get_job_id(client, task)\n            DjangoJob.objects.filter(name=job_id).delete()\n        # delete task\n        Task.objects.filter(id=task_id).delete()\n        return JsonResponse({'result': '1'})\n    \n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_info(request, task_id):\n    \"\"\"\n    get task info\n    :param request: request object\n    :param task_id: task id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        task = Task.objects.get(id=task_id)\n        data = model_to_dict(task)\n        data['clients'] = json.loads(data.get('clients'))\n        data['configuration'] = json.loads(data.get('configuration'))\n        return JsonResponse({'data': data})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_index(request):\n    \"\"\"\n    get all tasks\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        tasks = Task.objects.values()\n        return JsonResponse({'result': '1', 'data': tasks})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_status(request, task_id):\n    \"\"\"\n    get task status info\n    :param request: request object\n    :param task_id: task id\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        result = []\n        task = Task.objects.get(id=task_id)\n        clients = clients_of_task(task)\n        for client in clients:\n            job_id = get_job_id(client, task)\n            jobs = DjangoJob.objects.filter(name=job_id)\n            logger.debug('jobs from djangojob %s', jobs)\n            # if job does not exist, for date mode exceed time\n            if not jobs: continue\n            job = DjangoJob.objects.get(name=job_id)\n            executions = serialize('json', DjangoJobExecution.objects.filter(job=job))\n            result.append({\n                'client': model_to_dict(client),\n                'next': job.next_run_time,\n                'executions': json.loads(executions)\n            })\n        return JsonResponse({'data': result})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef render_html(request):\n    \"\"\"\n    render html with url\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        url = request.GET.get('url')\n        url = unquote(base64.b64decode(url).decode('utf-8'))\n        js = request.GET.get('js', 0)\n        script = request.GET.get('script')\n        response = requests.get(url, timeout=5)\n        response.encoding = response.apparent_encoding\n        html = process_html(response.text)\n        return HttpResponse(html)\n"], "fixing_code": ["import re\nfrom pathlib import Path\nfrom urllib.parse import unquote\nimport base64\nimport json\nimport os\nimport requests\nimport time\nimport pytz\nimport pymongo\nfrom shutil import rmtree\nfrom requests.exceptions import ConnectionError\nfrom os.path import join, exists\nfrom django.shortcuts import render\nfrom django.core.serializers import serialize\nfrom django.http import HttpResponse\nfrom django.forms.models import model_to_dict\nfrom django.utils import timezone\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom subprocess import Popen, PIPE\nfrom gerapy import get_logger\nfrom gerapy.server.core.response import JsonResponse\nfrom gerapy.cmd.init import PROJECTS_FOLDER\nfrom gerapy.server.server.settings import TIME_ZONE\nfrom gerapy.server.core.models import Client, Project, Deploy, Monitor, Task\nfrom gerapy.server.core.build import build_project, find_egg\nfrom gerapy.server.core.utils import IGNORES, scrapyd_url, log_url, get_tree, get_scrapyd, process_html, bytes2str, \\\n    clients_of_task, get_job_id\nfrom django_apscheduler.models import DjangoJob, DjangoJobExecution\nfrom django.core.files.storage import FileSystemStorage\nimport zipfile\n\nlogger = get_logger(__name__)\n\n\n@api_view(['GET'])\n# @permission_classes([IsAuthenticated])\ndef index(request):\n    \"\"\"\n    render index page\n    :param request: request object\n    :return: page\n    \"\"\"\n    return render(request, 'index.html')\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef index_status(request):\n    \"\"\"\n    index statistics\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        clients = Client.objects.all()\n        data = {\n            'success': 0,\n            'error': 0,\n            'project': 0,\n        }\n        # clients info\n        for client in clients:\n            try:\n                requests.get(scrapyd_url(client.ip, client.port), timeout=1)\n                data['success'] += 1\n            except ConnectionError:\n                data['error'] += 1\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        files = os.listdir(path)\n        # projects info\n        for file in files:\n            if os.path.isdir(join(path, file)) and not file in IGNORES:\n                data['project'] += 1\n        return JsonResponse(data)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_index(request):\n    \"\"\"\n    get client list\n    :param request: request object\n    :return: client list\n    \"\"\"\n    return HttpResponse(serialize('json', Client.objects.order_by('-id')))\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_info(request, client_id):\n    \"\"\"\n    get client info\n    :param request: request object\n    :param id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        return JsonResponse(model_to_dict(Client.objects.get(id=client_id)))\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef client_status(request, client_id):\n    \"\"\"\n    get client status\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        # get client object\n        client = Client.objects.get(id=client_id)\n        requests.get(scrapyd_url(client.ip, client.port), timeout=3)\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_update(request, client_id):\n    \"\"\"\n    update client info\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        client = Client.objects.filter(id=client_id)\n        data = json.loads(request.body)\n        client.update(**data)\n        return JsonResponse(model_to_dict(Client.objects.get(id=client_id)))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_create(request):\n    \"\"\"\n    create a client\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        client = Client.objects.create(**data)\n        return JsonResponse(model_to_dict(client))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef client_remove(request, client_id):\n    \"\"\"\n    remove a client\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        client = Client.objects.get(id=client_id)\n        # delete deploy\n        Deploy.objects.filter(client=client).delete()\n        # delete client\n        Client.objects.filter(id=client_id).delete()\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef spider_list(request, client_id, project_name):\n    \"\"\"\n    get spider list from one client\n    :param request: request Object\n    :param client_id: client id\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        spiders = scrapyd.list_spiders(project_name)\n        spiders = [{'name': spider, 'id': index + 1}\n                   for index, spider in enumerate(spiders)]\n        return JsonResponse(spiders)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef spider_start(request, client_id, project_name, spider_name):\n    \"\"\"\n    start a spider\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param spider_name: spider name\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        job = scrapyd.schedule(project_name, spider_name)\n        return JsonResponse({'job': job})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_list(request, client_id):\n    \"\"\"\n    project deployed list on one client\n    :param request: request object\n    :param client_id: client id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        projects = scrapyd.list_projects()\n        return JsonResponse(projects)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_index(request):\n    \"\"\"\n    project index list\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        files = os.listdir(path)\n        project_list = []\n        for file in files:\n            if os.path.isdir(join(path, file)) and not file in IGNORES:\n                project_list.append({'name': file})\n        return JsonResponse(project_list)\n\n\n@api_view(['GET', 'POST'])\n@permission_classes([IsAuthenticated])\ndef project_configure(request, project_name):\n    \"\"\"\n    get configuration\n    :param request: request object\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    # get configuration\n    if request.method == 'GET':\n        project = Project.objects.get(name=project_name)\n        project = model_to_dict(project)\n        project['configuration'] = json.loads(\n            project['configuration']) if project['configuration'] else None\n        return JsonResponse(project)\n\n    # update configuration\n    elif request.method == 'POST':\n        project = Project.objects.filter(name=project_name)\n        data = json.loads(request.body)\n        configuration = json.dumps(\n            data.get('configuration'), ensure_ascii=False)\n        project.update(**{'configuration': configuration})\n        # for safe protection\n        project_name = re.sub(\n            '[\\s\\!\\@\\#\\$\\;\\&\\*\\~\\\"\\'\\{\\}\\]\\[\\-\\+\\%\\^]+', '', project_name)\n        # execute generate cmd\n        cmd = ['gerapy', 'generate', project_name]\n        p = Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n\n        if not stderr:\n            return JsonResponse({'status': '1'})\n        else:\n            return JsonResponse({'status': '0', 'message': stderr})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_tree(request, project_name):\n    \"\"\"\n    get file tree of project\n    :param request: request object\n    :param project_name: project name\n    :return: json of tree\n    \"\"\"\n    if request.method == 'GET':\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        # get tree data\n        tree = get_tree(join(path, project_name))\n        return JsonResponse(tree)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_create(request):\n    \"\"\"\n    create a configurable project\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        data['configurable'] = 1\n        project, result = Project.objects.update_or_create(**data)\n        # generate a single project folder\n        path = join(os.path.abspath(\n            join(os.getcwd(), PROJECTS_FOLDER)), data['name'])\n        os.mkdir(path)\n        return JsonResponse(model_to_dict(project))\n\n\n@api_view(['POST'])\n# @permission_classes([IsAuthenticated])\ndef project_upload(request):\n    \"\"\"\n    upload project\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        file = request.FILES['file']\n        file_name = file.name\n        fs = FileSystemStorage(PROJECTS_FOLDER)\n        zip_file_name = fs.save(file_name, file)\n        logger.debug('zip file name %s', zip_file_name)\n        # extract zip file\n        with zipfile.ZipFile(join(PROJECTS_FOLDER, zip_file_name), 'r') as zip_ref:\n            zip_ref.extractall(PROJECTS_FOLDER)\n        logger.debug('extracted files to %s', PROJECTS_FOLDER)\n        return JsonResponse({'status': True})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_clone(request):\n    \"\"\"\n    clone project from github\n    :param request: request object\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        address = data.get('address')\n        if not address.startswith('http'):\n            return JsonResponse({'status': False})\n        address = address + '.git' if not address.endswith('.git') else address\n        cmd = ['git', 'clone', 'address', join(PROJECTS_FOLDER, Path(address).stem)]\n        logger.debug('clone cmd %s', cmd)\n        p = Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n        logger.debug('clone run result %s', stdout)\n        if stderr:\n            logger.error(stderr)\n        return JsonResponse({'status': True}) if not stderr else JsonResponse({'status': False})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_remove(request, project_name):\n    \"\"\"\n    remove project from disk and db\n    :param request: request object\n    :param project_name: project name\n    :return: result of remove\n    \"\"\"\n    if request.method == 'POST':\n        # delete deployments\n        project = Project.objects.get(name=project_name)\n        Deploy.objects.filter(project=project).delete()\n        # delete project\n        result = Project.objects.filter(name=project_name).delete()\n        # get project path\n        path = join(os.path.abspath(os.getcwd()), PROJECTS_FOLDER)\n        project_path = join(path, project_name)\n        # delete project file tree\n        if exists(project_path):\n            rmtree(project_path)\n        return JsonResponse({'result': result})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef project_version(request, client_id, project_name):\n    \"\"\"\n    get project deploy version\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: deploy version of project\n    \"\"\"\n    if request.method == 'GET':\n        # get client and project model\n        client = Client.objects.get(id=client_id)\n        project = Project.objects.get(name=project_name)\n        scrapyd = get_scrapyd(client)\n        # if deploy info exists in db, return it\n        if Deploy.objects.filter(client=client, project=project):\n            deploy = Deploy.objects.get(client=client, project=project)\n        # if deploy info does not exists in db, create deploy info\n        else:\n            try:\n                versions = scrapyd.list_versions(project_name)\n            except ConnectionError:\n                return JsonResponse({'message': 'Connect Error'}, status=500)\n            if len(versions) > 0:\n                version = versions[-1]\n                deployed_at = timezone.datetime.fromtimestamp(\n                    int(version), tz=pytz.timezone(TIME_ZONE))\n            else:\n                deployed_at = None\n            deploy, result = Deploy.objects.update_or_create(\n                client=client, project=project, deployed_at=deployed_at)\n        # return deploy json info\n        return JsonResponse(model_to_dict(deploy))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_deploy(request, client_id, project_name):\n    \"\"\"\n    deploy project operation\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: json of deploy result\n    \"\"\"\n    if request.method == 'POST':\n        # get project folder\n        path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n        project_path = join(path, project_name)\n        # find egg file\n        egg = find_egg(project_path)\n        if not egg:\n            return JsonResponse({'message': 'egg not found'}, status=500)\n        egg_file = open(join(project_path, egg), 'rb')\n        # get client and project model\n        client = Client.objects.get(id=client_id)\n        project = Project.objects.get(name=project_name)\n        # execute deploy operation\n        scrapyd = get_scrapyd(client)\n        scrapyd.add_version(project_name, int(time.time()), egg_file.read())\n        # update deploy info\n        deployed_at = timezone.now()\n        Deploy.objects.filter(client=client, project=project).delete()\n        deploy, result = Deploy.objects.update_or_create(client=client, project=project, deployed_at=deployed_at,\n                                                         description=project.description)\n        return JsonResponse(model_to_dict(deploy))\n\n\n@api_view(['GET', 'POST'])\n@permission_classes([IsAuthenticated])\ndef project_build(request, project_name):\n    \"\"\"\n    get build info or execute build operation\n    :param request: request object\n    :param project_name: project name\n    :return: json\n    \"\"\"\n    # get project folder\n    path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n    project_path = join(path, project_name)\n\n    # get build version\n    if request.method == 'GET':\n        egg = find_egg(project_path)\n        # if built, save or update project to db\n        if egg:\n            built_at = timezone.datetime.fromtimestamp(os.path.getmtime(join(project_path, egg)),\n                                                       tz=pytz.timezone(TIME_ZONE))\n            if not Project.objects.filter(name=project_name):\n                Project(name=project_name, built_at=built_at, egg=egg).save()\n                model = Project.objects.get(name=project_name)\n            else:\n                model = Project.objects.get(name=project_name)\n                model.built_at = built_at\n                model.egg = egg\n                model.save()\n        # if not built, just save project name to db\n        else:\n            if not Project.objects.filter(name=project_name):\n                Project(name=project_name).save()\n            model = Project.objects.get(name=project_name)\n        # transfer model to dict then dumps it to json\n        data = model_to_dict(model)\n        return JsonResponse(data)\n\n    # build operation manually by clicking button\n    elif request.method == 'POST':\n        data = json.loads(request.body)\n        description = data['description']\n        build_project(project_name)\n        egg = find_egg(project_path)\n        if not egg:\n            return JsonResponse({'message': 'egg not found'}, status=500)\n        # update built_at info\n        built_at = timezone.now()\n        # if project does not exists in db, create it\n        if not Project.objects.filter(name=project_name):\n            Project(name=project_name, description=description,\n                    built_at=built_at, egg=egg).save()\n            model = Project.objects.get(name=project_name)\n        # if project exists, update egg, description, built_at info\n        else:\n            model = Project.objects.get(name=project_name)\n            model.built_at = built_at\n            model.egg = egg\n            model.description = description\n            model.save()\n        # transfer model to dict then dumps it to json\n        data = model_to_dict(model)\n        return JsonResponse(data)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_parse(request, project_name):\n    \"\"\"\n    parse project\n    :param request: request object\n    :param project_name: project name\n    :return: requests, items, response\n    \"\"\"\n    if request.method == 'POST':\n        project_path = join(PROJECTS_FOLDER, project_name)\n        data = json.loads(request.body)\n        logger.debug('post data %s', data)\n        spider_name = data.get('spider')\n        args = {\n            'start': data.get('start', False),\n            'method': data.get('method', 'GET'),\n            'url': data.get('url'),\n            'callback': data.get('callback'),\n            'cookies': \"'\" + json.dumps(data.get('cookies', {}), ensure_ascii=False) + \"'\",\n            'headers': \"'\" + json.dumps(data.get('headers', {}), ensure_ascii=False) + \"'\",\n            'meta': \"'\" + json.dumps(data.get('meta', {}), ensure_ascii=False) + \"'\",\n            'dont_filter': data.get('dont_filter', False),\n            'priority': data.get('priority', 0),\n        }\n        # set request body\n        body = data.get('body', '')\n        if args.get('method').lower() != 'get':\n            args['body'] = \"'\" + json.dumps(body, ensure_ascii=False) + \"'\"\n\n        args_array = []\n        for arg, value in args.items():\n            args_array.append(f'--{arg}')\n            args_array.append(f'{value}')\n        cmd = ['gerapy', 'parse'] + args_array + [project_path] + [spider_name]\n        print('cmd', cmd)\n        logger.debug('parse cmd %s', cmd)\n        p = Popen(cmd, shell=False, stdin=PIPE,\n                         stdout=PIPE, stderr=PIPE, close_fds=True)\n        stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n        logger.debug('stdout %s, stderr %s', stdout, stderr)\n        if not stderr:\n            return JsonResponse({'status': True, 'result': json.loads(stdout)})\n        else:\n            return JsonResponse({'status': False, 'message': stderr})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_read(request):\n    \"\"\"\n    get content of project file\n    :param request: request object\n    :return: file content\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        # binary file\n        with open(path, 'rb') as f:\n            return HttpResponse(f.read().decode('utf-8'))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_update(request):\n    \"\"\"\n    update project file\n    :param request: request object\n    :return: result of update\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        code = data['code']\n        with open(path, 'w', encoding='utf-8') as f:\n            f.write(code)\n            return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_create(request):\n    \"\"\"\n    create project file\n    :param request: request object\n    :return: result of create\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['name'])\n        open(path, 'w', encoding='utf-8').close()\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_delete(request):\n    \"\"\"\n    delete project file\n    :param request: request object\n    :return: result of delete\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        path = join(data['path'], data['label'])\n        result = os.remove(path)\n        return JsonResponse({'result': result})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef project_file_rename(request):\n    \"\"\"\n    rename file name\n    :param request: request object\n    :return: result of rename\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        pre = join(data['path'], data['pre'])\n        new = join(data['path'], data['new'])\n        os.rename(pre, new)\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_list(request, client_id, project_name):\n    \"\"\"\n    get job list of project from one client\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :return: list of jobs\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.list_jobs(project_name)\n        jobs = []\n        statuses = ['pending', 'running', 'finished']\n        for status in statuses:\n            for job in result.get(status):\n                job['status'] = status\n                jobs.append(job)\n        return JsonResponse(jobs)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_log(request, client_id, project_name, spider_name, job_id):\n    \"\"\"\n    get log of jog\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param spider_name: spider name\n    :param job_id: job id\n    :return: log of job\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        # get log url\n        url = log_url(client.ip, client.port,\n                      project_name, spider_name, job_id)\n        # get last 1000 bytes of log\n        response = requests.get(url, timeout=5, headers={\n            'Range': 'bytes=-1000'\n        }, auth=(client.username, client.password) if client.auth else None)\n        # Get encoding\n        encoding = response.apparent_encoding\n        # log not found\n        if response.status_code == 404:\n            return JsonResponse({'message': 'Log Not Found'}, status=404)\n        # bytes to string\n        text = response.content.decode(encoding, errors='replace')\n        return HttpResponse(text)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef job_cancel(request, client_id, project_name, job_id):\n    \"\"\"\n    cancel a job\n    :param request: request object\n    :param client_id: client id\n    :param project_name: project name\n    :param job_id: job id\n    :return: json of cancel\n    \"\"\"\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.cancel(project_name, job_id)\n        return JsonResponse(result)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef del_version(request, client_id, project, version):\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.delete_version(project=project, version=version)\n        return JsonResponse(result)\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef del_project(request, client_id, project):\n    if request.method == 'GET':\n        client = Client.objects.get(id=client_id)\n        scrapyd = get_scrapyd(client)\n        result = scrapyd.delete_project(project=project)\n        return JsonResponse(result)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_db_list(request):\n    \"\"\"\n    get monitor db list\n    :param request: request object\n    :return: json of db list\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        url = data['url']\n        type = data['type']\n        if type == 'MongoDB':\n            client = pymongo.MongoClient(url)\n            dbs = client.list_database_names()\n            return JsonResponse(dbs)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_collection_list(request):\n    \"\"\"\n    get monitor collection list\n    :param request: request object\n    :return: json of collection list\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        url = data['url']\n        db = data['db']\n        type = data['type']\n        if type == 'MongoDB':\n            client = pymongo.MongoClient(url)\n            db = client[db]\n            collections = db.collection_names()\n            return JsonResponse(collections)\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef monitor_create(request):\n    \"\"\"\n    create a monitor\n    :param request: request object\n    :return: json of create\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        data = data['form']\n        data['configuration'] = json.dumps(\n            data['configuration'], ensure_ascii=False)\n        monitor = Monitor.objects.create(**data)\n        return JsonResponse(model_to_dict(monitor))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_create(request):\n    \"\"\"\n    add task\n    :param request: request object\n    :return: Bool\n    \"\"\"\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        task = Task.objects.create(clients=json.dumps(data.get('clients'), ensure_ascii=False),\n                                   project=data.get('project'),\n                                   name=data.get('name'),\n                                   spider=data.get('spider'),\n                                   trigger=data.get('trigger'),\n                                   configuration=json.dumps(\n                                       data.get('configuration'), ensure_ascii=False),\n                                   modified=1)\n        return JsonResponse({'result': '1', 'data': model_to_dict(task)})\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_update(request, task_id):\n    \"\"\"\n    update task info\n    :param request: request object\n    :param task_id: task id\n    :return: json\n    \"\"\"\n    if request.method == 'POST':\n        task = Task.objects.filter(id=task_id)\n        data = json.loads(request.body)\n        data['clients'] = json.dumps(data.get('clients'), ensure_ascii=False)\n        data['configuration'] = json.dumps(\n            data.get('configuration'), ensure_ascii=False)\n        data['modified'] = 1\n        task.update(**data)\n        return JsonResponse(model_to_dict(Task.objects.get(id=task_id)))\n\n\n@api_view(['POST'])\n@permission_classes([IsAuthenticated])\ndef task_remove(request, task_id):\n    \"\"\"\n    remove task by task_id\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'POST':\n        # delete job from DjangoJob\n        task = Task.objects.get(id=task_id)\n        clients = clients_of_task(task)\n        for client in clients:\n            job_id = get_job_id(client, task)\n            DjangoJob.objects.filter(id=job_id).delete()\n        # delete task\n        Task.objects.filter(id=task_id).delete()\n        return JsonResponse({'result': '1'})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_info(request, task_id):\n    \"\"\"\n    get task info\n    :param request: request object\n    :param task_id: task id\n    :return: json\n    \"\"\"\n    if request.method == 'GET':\n        task = Task.objects.get(id=task_id)\n        data = model_to_dict(task)\n        data['clients'] = json.loads(data.get('clients'))\n        data['configuration'] = json.loads(data.get('configuration'))\n        return JsonResponse({'data': data})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_index(request):\n    \"\"\"\n    get all tasks\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        tasks = Task.objects.values()\n        return JsonResponse({'result': '1', 'data': tasks})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef task_status(request, task_id):\n    \"\"\"\n    get task status info\n    :param request: request object\n    :param task_id: task id\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        result = []\n        task = Task.objects.get(id=task_id)\n        clients = clients_of_task(task)\n        for client in clients:\n            job_id = get_job_id(client, task)\n            jobs = DjangoJob.objects.filter(id=job_id)\n            logger.debug('jobs from djangojob %s', jobs)\n            # if job does not exist, for date mode exceed time\n            if not jobs:\n                continue\n            job = DjangoJob.objects.get(id=job_id)\n            executions = serialize(\n                'json', DjangoJobExecution.objects.filter(job=job))\n            result.append({\n                'client': model_to_dict(client),\n                'next': job.next_run_time,\n                'executions': json.loads(executions)\n            })\n        return JsonResponse({'data': result})\n\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef render_html(request):\n    \"\"\"\n    render html with url\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'GET':\n        url = request.GET.get('url')\n        url = unquote(base64.b64decode(url).decode('utf-8'))\n        js = request.GET.get('js', 0)\n        script = request.GET.get('script')\n        response = requests.get(url, timeout=5)\n        response.encoding = response.apparent_encoding\n        html = process_html(response.text)\n        return HttpResponse(html)\n"], "filenames": ["gerapy/server/core/views.py"], "buggy_code_start_loc": [5], "buggy_code_end_loc": [884], "fixing_code_start_loc": [5], "fixing_code_end_loc": [900], "type": "NVD-CWE-noinfo", "message": "Gerapy is a distributed crawler management framework. Gerapy prior to version 0.9.8 is vulnerable to remote code execution, and this issue is patched in version 0.9.8.", "other": {"cve": {"id": "CVE-2021-43857", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-27T19:15:08.683", "lastModified": "2022-01-07T18:16:54.193", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Gerapy is a distributed crawler management framework. Gerapy prior to version 0.9.8 is vulnerable to remote code execution, and this issue is patched in version 0.9.8."}, {"lang": "es", "value": "Gerapy es un marco de administraci\u00f3n de rastreadores distribuidos. Gerapy versiones anteriores a 0.9.8 es vulnerable a una ejecuci\u00f3n de c\u00f3digo remota, y este problema est\u00e1 parcheado en la versi\u00f3n 0.9.8"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gerapy:gerapy:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.9.8", "matchCriteriaId": "4D0D717F-412D-4BB2-940F-05640D17860E"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/165459/Gerapy-0.9.7-Remote-Code-Execution.html", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/Gerapy/Gerapy/commit/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Gerapy/Gerapy/issues/219", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/Gerapy/Gerapy/security/advisories/GHSA-9w7f-m4j4-j3xw", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Gerapy/Gerapy/commit/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28"}}