{"buggy_code": ["<?php\n  $sigDisplay = $object['value'];\n  if ('attachment' == $object['type'] || 'malware-sample' == $object['type'] ) {\n    if ($object['type'] == 'attachment' && isset($object['image'])) {\n        if (extension_loaded('gd')) {\n            $img = '<it class=\"fa fa-spin fa-spinner\" style=\"font-size: large; left: 50%; top: 50%;\"></it>';\n            $img .= '<img class=\"screenshot screenshot-collapsed useCursorPointer img-rounded hidden\" src=\"' . $baseurl . '/attributes/viewPicture/' . h($object['id']) . '/1' . '\" title=\"' . h($object['value']) . '\" onload=\"$(this).show(200); $(this).parent().find(\\'.fa-spinner\\').remove();\"/>';\n            echo $img;\n        } else {\n            $extension = explode('.', $object['value']);\n            $extension = end($extension);\n            $uri = 'data:image/' . strtolower(h($extension)) . ';base64,' . h($object['image']);\n            echo '<img class=\"screenshot screenshot-collapsed useCursorPointer\" src=\"' . $uri . '\" title=\"' . h($object['value']) . '\" />';\n        }\n    } else {\n      $filenameHash = explode('|', h($object['value']));\n      if (strrpos($filenameHash[0], '\\\\')) {\n        $filepath = substr($filenameHash[0], 0, strrpos($filenameHash[0], '\\\\'));\n        $filename = substr($filenameHash[0], strrpos($filenameHash[0], '\\\\'));\n        echo h($filepath);\n        echo '<a href=\"' . $baseurl . '/attributes/download/' . h($object['id']) . '\" class=\"' . $linkClass . '\">' . h($filename) . '</a>';\n      } else {\n        echo '<a href=\"' . $baseurl . '/attributes/download/' . h($object['id']) . '\" class=\"' . $linkClass . '\">' . h($filenameHash[0]) . '</a>';\n      }\n      if (isset($filenameHash[1])) echo '<br />' . $filenameHash[1];\n    }\n  } else if (strpos($object['type'], '|') !== false) {\n    $separator = in_array($object['type'], array('ip-dst|port', 'ip-src|port')) ? ':' : '<br />';\n    $value_pieces = explode('|', $object['value']);\n    foreach ($value_pieces as $k => $v) {\n      $value_pieces[$k] = h($v);\n    }\n    $object['value'] = implode($separator, $value_pieces);\n    echo ($object['value']);\n  } else if ('vulnerability' == $object['type']) {\n    $cveUrl = (is_null(Configure::read('MISP.cveurl'))) ? \"http://www.google.com/search?q=\" : Configure::read('MISP.cveurl');\n    echo $this->Html->link($sigDisplay, $cveUrl . $sigDisplay, array('target' => '_blank', 'class' => $linkClass));\n  } else if ('link' == $object['type']) {\n    echo $this->Html->link($sigDisplay, $sigDisplay, array('class' => $linkClass));\n  } else if ('cortex' == $object['type']) {\n    echo '<div class=\"cortex-json\" data-cortex-json=\"' . h($object['value']) . '\">Cortex object</div>';\n  } else if ('text' == $object['type']) {\n    if (($object['category'] == 'Internal reference' || $object['category'] == 'External analysis') && preg_match('/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/i', $object['value'])) {\n      echo '<a href=\"' . $baseurl . '/events/view/' . h($object['value']) . '\" class=\"' . $linkClass . '\">' . h($object['value']) . '</a>';\n    } else {\n      $sigDisplay = str_replace(\"\\r\", '', h($sigDisplay));\n      $sigDisplay = str_replace(\" \", '&nbsp;', $sigDisplay);\n      echo $sigDisplay;\n    }\n  } else if ('hex' == $object['type']) {\n    $sigDisplay = str_replace(\"\\r\", '', $sigDisplay);\n    echo '<span class=\"hex-value\" title=\"' . __('Hexadecimal representation') . '\">' . h($sigDisplay) . '</span>&nbsp;<span role=\"button\" tabindex=\"0\" aria-label=\"' . __('Switch to binary representation') . '\" class=\"icon-repeat hex-value-convert useCursorPointer\" title=\"' . __('Switch to binary representation') . '\"></span>';\n  } else {\n    $sigDisplay = str_replace(\"\\r\", '', $sigDisplay);\n    echo h($sigDisplay);\n  }\n  if (isset($object['validationIssue'])) echo ' <span class=\"fa fa-exclamation-triangle\" title=\"' . __('Warning, this doesn\\'t seem to be a legitimate ') . strtoupper(h($object['type'])) . __(' value') . '\">&nbsp;</span>';\n?>\n"], "fixing_code": ["<?php\n    $sigDisplay = $object['value'];\n    if ('attachment' == $object['type'] || 'malware-sample' == $object['type'] ) {\n        if ($object['type'] == 'attachment' && isset($object['image'])) {\n            if (extension_loaded('gd')) {\n                $img = '<it class=\"fa fa-spin fa-spinner\" style=\"font-size: large; left: 50%; top: 50%;\"></it>';\n                $img .= '<img class=\"screenshot screenshot-collapsed useCursorPointer img-rounded hidden\" src=\"' . $baseurl . '/attributes/viewPicture/' . h($object['id']) . '/1' . '\" title=\"' . h($object['value']) . '\" onload=\"$(this).show(200); $(this).parent().find(\\'.fa-spinner\\').remove();\"/>';\n                echo $img;\n            } else {\n                $extension = explode('.', $object['value']);\n                $extension = end($extension);\n                $uri = 'data:image/' . strtolower(h($extension)) . ';base64,' . h($object['image']);\n                echo '<img class=\"screenshot screenshot-collapsed useCursorPointer\" src=\"' . $uri . '\" title=\"' . h($object['value']) . '\" />';\n            }\n        } else {\n            $filenameHash = explode('|', h($object['value']));\n            if (strrpos($filenameHash[0], '\\\\')) {\n                $filepath = substr($filenameHash[0], 0, strrpos($filenameHash[0], '\\\\'));\n                $filename = substr($filenameHash[0], strrpos($filenameHash[0], '\\\\'));\n                echo h($filepath);\n                echo '<a href=\"' . $baseurl . '/attributes/download/' . h($object['id']) . '\" class=\"' . $linkClass . '\">' . h($filename) . '</a>';\n            } else {\n                echo '<a href=\"' . $baseurl . '/attributes/download/' . h($object['id']) . '\" class=\"' . $linkClass . '\">' . h($filenameHash[0]) . '</a>';\n            }\n            if (isset($filenameHash[1])) echo '<br />' . $filenameHash[1];\n        }\n    } else if (strpos($object['type'], '|') !== false) {\n        $separator = in_array($object['type'], array('ip-dst|port', 'ip-src|port')) ? ':' : '<br />';\n        $value_pieces = explode('|', $object['value']);\n        foreach ($value_pieces as $k => $v) {\n            $value_pieces[$k] = h($v);\n        }\n        $object['value'] = implode($separator, $value_pieces);\n        echo ($object['value']);\n    } else if ('vulnerability' == $object['type']) {\n        $cveUrl = (is_null(Configure::read('MISP.cveurl'))) ? \"http://www.google.com/search?q=\" : Configure::read('MISP.cveurl');\n        echo $this->Html->link($sigDisplay, $cveUrl . $sigDisplay, array('target' => '_blank', 'class' => $linkClass));\n    } else if ('link' == $object['type'] && (substr($object['value'], 0, 7) === 'http://' || substr($object['value'], 0, 8) === 'https://')) {\n        echo $this->Html->link($sigDisplay, $sigDisplay, array('class' => $linkClass));\n    } else if ('cortex' == $object['type']) {\n        echo '<div class=\"cortex-json\" data-cortex-json=\"' . h($object['value']) . '\">Cortex object</div>';\n    } else if ('text' == $object['type']) {\n        if (($object['category'] == 'Internal reference' || $object['category'] == 'External analysis') && preg_match('/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/i', $object['value'])) {\n            echo '<a href=\"' . $baseurl . '/events/view/' . h($object['value']) . '\" class=\"' . $linkClass . '\">' . h($object['value']) . '</a>';\n        } else {\n            $sigDisplay = str_replace(\"\\r\", '', h($sigDisplay));\n            $sigDisplay = str_replace(\" \", '&nbsp;', $sigDisplay);\n            echo $sigDisplay;\n        }\n    } else if ('hex' == $object['type']) {\n        $sigDisplay = str_replace(\"\\r\", '', $sigDisplay);\n        echo '<span class=\"hex-value\" title=\"' . __('Hexadecimal representation') . '\">' . h($sigDisplay) . '</span>&nbsp;<span role=\"button\" tabindex=\"0\" aria-label=\"' . __('Switch to binary representation') . '\" class=\"icon-repeat hex-value-convert useCursorPointer\" title=\"' . __('Switch to binary representation') . '\"></span>';\n    } else {\n        $sigDisplay = str_replace(\"\\r\", '', $sigDisplay);\n        echo h($sigDisplay);\n    }\n    if (isset($object['validationIssue'])) {\n        echo ' <span class=\"fa fa-exclamation-triangle\" title=\"' . __('Warning, this doesn\\'t seem to be a legitimate ') . strtoupper(h($object['type'])) . __(' value') . '\">&nbsp;</span>';\n    }\n?>\n"], "filenames": ["app/View/Elements/Events/View/value_field.ctp"], "buggy_code_start_loc": [2], "buggy_code_end_loc": [58], "fixing_code_start_loc": [2], "fixing_code_end_loc": [59], "type": "CWE-79", "message": "An issue was discovered in app/View/Elements/Events/View/value_field.ctp in MISP before 2.4.107. There is persistent XSS via link type attributes with javascript:// links.", "other": {"cve": {"id": "CVE-2019-11813", "sourceIdentifier": "cve@mitre.org", "published": "2019-05-08T13:29:00.440", "lastModified": "2019-05-08T15:27:16.013", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in app/View/Elements/Events/View/value_field.ctp in MISP before 2.4.107. There is persistent XSS via link type attributes with javascript:// links."}, {"lang": "es", "value": "Fue encontrado un problema en el archivo app/View/Elements/Events/View/value_field.ctp en MISP anterior a la versi\u00f3n 2.4.107. Se presenta un XSS persistente por medio de los atributos tipo Link con enlances javascript://."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.107", "matchCriteriaId": "5596C0F2-50CF-4002-8C21-160B338A7896"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/6f6fb678ca07c80cb7d2bdfe5cb0313bb71bd487", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/6f6fb678ca07c80cb7d2bdfe5cb0313bb71bd487"}}