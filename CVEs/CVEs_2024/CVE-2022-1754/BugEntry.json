{"buggy_code": ["/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nvar async = require('async')\nvar mongoose = require('mongoose')\nvar winston = require('winston')\nvar bcrypt = require('bcrypt')\nvar _ = require('lodash')\nvar Chance = require('chance')\nconst utils = require('../helpers/utils')\n\n// Required for linkage\nrequire('./role')\n\nvar SALT_FACTOR = 10\nvar COLLECTION = 'accounts'\n\n/**\n * User Schema\n * @module models/user\n * @class User\n *\n * @property {object} _id ```Required``` ```unique``` MongoDB Object ID\n * @property {String} username ```Required``` ```unique``` Username of user\n * @property {String} password ```Required``` Bcrypt password\n * @property {String} fullname ```Required``` Full name of user\n * @property {String} email ```Required``` ```unique``` Email Address of user\n * @property {String} role ```Required``` Permission role of the given user. See {@link Permissions}\n * @property {Date} lastOnline Last timestamp given user was online.\n * @property {String} title Job Title of user\n * @property {String} image Filename of user image\n * @property {String} resetPassHash Password reset has for recovery password link.\n * @property {Date} resetPassExpire Date when the password recovery link will expire\n * @property {String} tOTPKey One Time Password Secret Key\n * @property {Number} tOTPPeriod One Time Password Key Length (Time) - Default 30 Seconds\n * @property {String} accessToken API Access Token\n * @property {Array} iOSDeviceTokens Array of String based device Ids for Apple iOS devices. *push notifications*\n * @property {Object} preferences Object to hold user preferences\n * @property {Boolean} preferences.autoRefreshTicketGrid Enable the auto refresh of the ticket grid.\n * @property {Boolean} deleted Account Deleted\n */\nvar userSchema = mongoose.Schema({\n  username: { type: String, required: true, unique: true, lowercase: true },\n  password: { type: String, required: true, select: false },\n  fullname: { type: String, required: true, index: true },\n  email: { type: String, required: true, unique: true, lowercase: true },\n  role: { type: mongoose.Schema.Types.ObjectId, ref: 'roles', required: true },\n  lastOnline: Date,\n  title: String,\n  image: String,\n\n  resetPassHash: { type: String, select: false },\n  resetPassExpire: { type: Date, select: false },\n  tOTPKey: { type: String, select: false },\n  tOTPPeriod: { type: Number, select: false },\n  resetL2AuthHash: { type: String, select: false },\n  resetL2AuthExpire: { type: Date, select: false },\n  hasL2Auth: { type: Boolean, required: true, default: false },\n  accessToken: { type: String, sparse: true, select: false },\n\n  preferences: {\n    tourCompleted: { type: Boolean, default: false },\n    autoRefreshTicketGrid: { type: Boolean, default: true },\n    openChatWindows: [{ type: String, default: [] }]\n  },\n\n  deleted: { type: Boolean, default: false }\n})\n\nuserSchema.set('toObject', { getters: true })\n\nvar autoPopulateRole = function (next) {\n  this.populate('role', 'name description normalized _id')\n  next()\n}\n\nuserSchema.pre('findOne', autoPopulateRole).pre('find', autoPopulateRole)\n\nuserSchema.pre('save', function (next) {\n  var user = this\n\n  user.username = utils.applyMaxShortTextLength(utils.sanitizeFieldPlainText(user.username.toLowerCase().trim()))\n  user.email = utils.sanitizeFieldPlainText(user.email.trim())\n\n  if (user.fullname) user.fullname = utils.applyMaxShortTextLength(utils.sanitizeFieldPlainText(user.fullname.trim()))\n  if (user.title) user.title = utils.applyMaxShortTextLength(utils.sanitizeFieldPlainText(user.title.trim()))\n\n  if (!user.isModified('password')) {\n    return next()\n  }\n\n  bcrypt.genSalt(SALT_FACTOR, function (err, salt) {\n    if (err) return next(err)\n\n    bcrypt.hash(user.password, salt, function (err, hash) {\n      if (err) return next(err)\n\n      user.password = hash\n      return next()\n    })\n  })\n})\n\nuserSchema.methods.addAccessToken = function (callback) {\n  var user = this\n  var date = new Date()\n  var salt = user.username.toString() + date.toISOString()\n  var chance = new Chance(salt)\n  user.accessToken = chance.hash()\n  user.save(function (err) {\n    if (err) return callback(err, null)\n\n    return callback(null, user.accessToken)\n  })\n}\n\nuserSchema.methods.removeAccessToken = function (callback) {\n  var user = this\n  if (!user.accessToken) return callback()\n\n  user.accessToken = undefined\n  user.save(function (err) {\n    if (err) return callback(err, null)\n\n    return callback()\n  })\n}\n\nuserSchema.methods.generateL2Auth = function (callback) {\n  var user = this\n  if (_.isUndefined(user.tOTPKey) || _.isNull(user.tOTPKey)) {\n    var chance = new Chance()\n    var base32 = require('thirty-two')\n\n    var genOTPKey = chance.string({\n      length: 7,\n      pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ23456789'\n    })\n    var base32GenOTPKey = base32\n      .encode(genOTPKey)\n      .toString()\n      .replace(/=/g, '')\n\n    user.tOTPKey = base32GenOTPKey\n    user.hasL2Auth = true\n    user.save(function (err) {\n      if (err) return callback(err)\n\n      return callback(null, base32GenOTPKey)\n    })\n  } else {\n    return callback()\n  }\n}\n\nuserSchema.methods.removeL2Auth = function (callback) {\n  var user = this\n\n  user.tOTPKey = undefined\n  user.hasL2Auth = false\n  user.save(function (err) {\n    if (err) return callback(err, null)\n\n    return callback()\n  })\n}\n\nuserSchema.methods.addDeviceToken = function (token, type, callback) {\n  if (_.isUndefined(token)) return callback('Invalid token')\n  var user = this\n  // type 1 = iOS\n  // type 2 = Android\n  if (type === 1) {\n    if (hasDeviceToken(user, token, type)) return callback(null, token)\n\n    user.iOSDeviceTokens.push(token)\n    user.save(function (err) {\n      if (err) return callback(err, null)\n\n      callback(null, token)\n    })\n  }\n}\n\nuserSchema.methods.removeDeviceToken = function (token, type, callback) {\n  var user = this\n  if (type === 1) {\n    if (!hasDeviceToken(user, token, type)) return callback()\n\n    winston.debug('Removing Device: ' + token)\n    user.iOSDeviceTokens.splice(_.indexOf(this.iOSDeviceTokens, token), 1)\n    user.save(function (err, u) {\n      if (err) return callback(err, null)\n\n      return callback(null, u.iOSDeviceTokens)\n    })\n  }\n}\n\nuserSchema.methods.addOpenChatWindow = function (convoId, callback) {\n  if (convoId === undefined) {\n    if (!_.isFunction(callback)) return false\n    return callback('Invalid convoId')\n  }\n  var user = this\n  var hasChatWindow =\n    _.filter(user.preferences.openChatWindows, function (value) {\n      return value.toString() === convoId.toString()\n    }).length > 0\n\n  if (hasChatWindow) {\n    if (!_.isFunction(callback)) return false\n    return callback()\n  }\n  user.preferences.openChatWindows.push(convoId.toString())\n  user.save(function (err, u) {\n    if (err) {\n      if (!_.isFunction(callback)) return false\n      return callback(err)\n    }\n\n    if (!_.isFunction(callback)) return false\n    return callback(null, u.preferences.openChatWindows)\n  })\n}\n\nuserSchema.methods.removeOpenChatWindow = function (convoId, callback) {\n  if (convoId === undefined) {\n    if (!_.isFunction(callback)) return false\n    return callback('Invalid convoId')\n  }\n  var user = this\n  var hasChatWindow =\n    _.filter(user.preferences.openChatWindows, function (value) {\n      return value.toString() === convoId.toString()\n    }).length > 0\n\n  if (!hasChatWindow) {\n    if (!_.isFunction(callback)) return false\n    return callback()\n  }\n  user.preferences.openChatWindows.splice(\n    _.findIndex(user.preferences.openChatWindows, function (item) {\n      return item.toString() === convoId.toString()\n    }),\n    1\n  )\n\n  user.save(function (err, u) {\n    if (err) {\n      if (!_.isFunction(callback)) return false\n      return callback(err)\n    }\n\n    if (!_.isFunction(callback)) return false\n    return callback(null, u.preferences.openChatWindows)\n  })\n}\n\nuserSchema.methods.softDelete = function (callback) {\n  var user = this\n\n  user.deleted = true\n\n  user.save(function (err) {\n    if (err) return callback(err, false)\n\n    callback(null, true)\n  })\n}\n\nuserSchema.statics.validate = function (password, dbPass) {\n  return bcrypt.compareSync(password, dbPass)\n}\n\n/**\n * Gets all users\n *\n * @memberof User\n * @static\n * @method findAll\n *\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.findAll = function (callback) {\n  return this.model(COLLECTION).find({}, callback)\n}\n\n/**\n * Gets user via object _id\n *\n * @memberof User\n * @static\n * @method getUser\n *\n * @param {Object} oId Object _id to Query MongoDB\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUser = function (oId, callback) {\n  if (_.isUndefined(oId)) {\n    return callback('Invalid ObjectId - UserSchema.GetUser()', null)\n  }\n\n  return this.model(COLLECTION).findOne({ _id: oId }, callback)\n}\n\n/**\n * Gets user via username\n *\n * @memberof User\n * @static\n * @method getUserByUsername\n *\n * @param {String} user Username to Query MongoDB\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUserByUsername = function (user, callback) {\n  if (_.isUndefined(user)) {\n    return callback('Invalid Username - UserSchema.GetUserByUsername()', null)\n  }\n\n  return this.model(COLLECTION)\n    .findOne({ username: new RegExp('^' + user + '$', 'i') })\n    .select('+password +accessToken')\n    .exec(callback)\n}\n\nuserSchema.statics.getByUsername = userSchema.statics.getUserByUsername\n\n/**\n * Gets user via email\n *\n * @memberof User\n * @static\n * @method getUserByEmail\n *\n * @param {String} email Email to Query MongoDB\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUserByEmail = function (email, callback) {\n  if (_.isUndefined(email)) {\n    return callback('Invalid Email - UserSchema.GetUserByEmail()', null)\n  }\n\n  return this.model(COLLECTION).findOne({ email: email.toLowerCase() }, callback)\n}\n\n/**\n * Gets user via reset password hash\n *\n * @memberof User\n * @static\n * @method getUserByResetHash\n *\n * @param {String} hash Hash to Query MongoDB\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUserByResetHash = function (hash, callback) {\n  if (_.isUndefined(hash)) {\n    return callback('Invalid Hash - UserSchema.GetUserByResetHash()', null)\n  }\n\n  return this.model(COLLECTION).findOne(\n    { resetPassHash: hash, deleted: false },\n    '+resetPassHash +resetPassExpire',\n    callback\n  )\n}\n\nuserSchema.statics.getUserByL2ResetHash = function (hash, callback) {\n  if (_.isUndefined(hash)) {\n    return callback('Invalid Hash - UserSchema.GetUserByL2ResetHash()', null)\n  }\n\n  return this.model(COLLECTION).findOne(\n    { resetL2AuthHash: hash, deleted: false },\n    '+resetL2AuthHash +resetL2AuthExpire',\n    callback\n  )\n}\n\n/**\n * Gets user via API Access Token\n *\n * @memberof User\n * @static\n * @method getUserByAccessToken\n *\n * @param {String} token Access Token to Query MongoDB\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUserByAccessToken = function (token, callback) {\n  if (_.isUndefined(token)) {\n    return callback('Invalid Token - UserSchema.GetUserByAccessToken()', null)\n  }\n\n  return this.model(COLLECTION).findOne({ accessToken: token, deleted: false }, '+password', callback)\n}\n\nuserSchema.statics.getUserWithObject = function (object, callback) {\n  if (!_.isObject(object)) {\n    return callback('Invalid Object (Must be of type Object) - UserSchema.GetUserWithObject()', null)\n  }\n\n  var self = this\n\n  var limit = object.limit === null ? 10 : object.limit\n  var page = object.page === null ? 0 : object.page\n  var search = object.search === null ? '' : object.search\n\n  var q = self\n    .model(COLLECTION)\n    .find({}, '-password -resetPassHash -resetPassExpire')\n    .sort({ fullname: 1 })\n    .skip(page * limit)\n  if (limit !== -1) {\n    q.limit(limit)\n  }\n\n  if (!object.showDeleted) q.where({ deleted: false })\n\n  if (!_.isEmpty(search)) {\n    q.where({ fullname: new RegExp('^' + search.toLowerCase(), 'i') })\n  }\n\n  return q.exec(callback)\n}\n\n/**\n * Gets users based on permissions > mod\n *\n * @memberof User\n * @static\n * @method getAssigneeUsers\n *\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getAssigneeUsers = function (callback) {\n  var roles = global.roles\n  if (_.isUndefined(roles)) return callback(null, [])\n\n  var assigneeRoles = []\n  async.each(roles, function (role) {\n    if (role.isAgent) assigneeRoles.push(role._id)\n  })\n\n  assigneeRoles = _.uniq(assigneeRoles)\n  this.model(COLLECTION).find({ role: { $in: assigneeRoles }, deleted: false }, function (err, users) {\n    if (err) {\n      winston.warn(err)\n      return callback(err, null)\n    }\n\n    return callback(null, _.sortBy(users, 'fullname'))\n  })\n}\n\n/**\n * Gets users based on roles\n *\n * @memberof User\n * @static\n * @method getUsersByRoles\n *\n * @param {Array} roles Array of role ids\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUsersByRoles = function (roles, callback) {\n  if (_.isUndefined(roles)) return callback('Invalid roles array', null)\n  if (!_.isArray(roles)) {\n    roles = [roles]\n  }\n\n  var q = this.model(COLLECTION).find({ role: { $in: roles }, deleted: false })\n\n  return q.exec(callback)\n}\n\n/**\n * Creates a user with the given data object\n *\n * @memberof User\n * @static\n * @method createUser\n *\n * @param {User} data JSON data object of new User\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.createUser = function (data, callback) {\n  if (_.isUndefined(data) || _.isUndefined(data.username)) {\n    return callback('Invalid User Data - UserSchema.CreateUser()', null)\n  }\n\n  var self = this\n\n  self.model(COLLECTION).find({ username: data.username }, function (err, items) {\n    if (err) {\n      return callback(err, null)\n    }\n\n    if (_.size(items) > 0) {\n      return callback('Username Already Exists', null)\n    }\n\n    return self.collection.insert(data, callback)\n  })\n}\n\n/**\n * Creates a user with only Email address. Emails user password.\n *\n * @param email\n * @param callback\n */\nuserSchema.statics.createUserFromEmail = function (email, callback) {\n  if (_.isUndefined(email)) {\n    return callback('Invalid User Data - UserSchema.CreatePublicUser()', null)\n  }\n\n  var self = this\n\n  var settingSchema = require('./setting')\n  settingSchema.getSetting('role:user:default', function (err, userRoleDefault) {\n    if (err || !userRoleDefault) return callback('Invalid Setting - UserRoleDefault')\n\n    var Chance = require('chance')\n\n    var chance = new Chance()\n\n    var plainTextPass = chance.string({\n      length: 6,\n      pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'\n    })\n\n    var user = new self({\n      username: email,\n      email: email,\n      password: plainTextPass,\n      fullname: email,\n      role: userRoleDefault.value\n    })\n\n    self.model(COLLECTION).find({ username: user.username }, function (err, items) {\n      if (err) return callback(err)\n      if (_.size(items) > 0) return callback('Username already exists')\n\n      user.save(function (err, savedUser) {\n        if (err) return callback(err)\n\n        // Create a group for this user\n        var GroupSchema = require('./group')\n        var group = new GroupSchema({\n          name: savedUser.email,\n          members: [savedUser._id],\n          sendMailTo: [savedUser._id],\n          public: true\n        })\n\n        group.save(function (err, group) {\n          if (err) return callback(err)\n\n          // Send welcome email\n          var path = require('path')\n          var mailer = require('../mailer')\n          var Email = require('email-templates')\n          var templateDir = path.resolve(__dirname, '..', 'mailer', 'templates')\n\n          var email = new Email({\n            views: {\n              root: templateDir,\n              options: {\n                extension: 'handlebars'\n              }\n            }\n          })\n\n          var settingSchema = require('./setting')\n          settingSchema.getSetting('gen:siteurl', function (err, setting) {\n            if (err) return callback(err)\n\n            if (!setting) {\n              setting = { value: '' }\n            }\n\n            var dataObject = {\n              user: savedUser,\n              plainTextPassword: plainTextPass,\n              baseUrl: setting.value\n            }\n\n            email\n              .render('public-account-created', dataObject)\n              .then(function (html) {\n                var mailOptions = {\n                  to: savedUser.email,\n                  subject: 'Welcome to trudesk! - Here are your account details.',\n                  html: html,\n                  generateTextFromHTML: true\n                }\n\n                mailer.sendMail(mailOptions, function (err) {\n                  if (err) {\n                    winston.warn(err)\n                    return callback(err)\n                  }\n\n                  return callback(null, { user: savedUser, group: group })\n                })\n              })\n              .catch(function (err) {\n                winston.warn(err)\n                return callback(err)\n              })\n          })\n        })\n      })\n    })\n  })\n}\n\nuserSchema.statics.getCustomers = function (obj, callback) {\n  var limit = obj.limit || 10\n  var page = obj.page || 0\n  var self = this\n  return self\n    .model(COLLECTION)\n    .find({}, '-password -resetPassHash -resetPassExpire')\n    .exec(function (err, accounts) {\n      if (err) return callback(err)\n\n      var customerRoleIds = _.filter(accounts, function (a) {\n        return !a.role.isAdmin && !a.role.isAgent\n      }).map(function (a) {\n        return a.role._id\n      })\n\n      var q = self\n        .find({ role: { $in: customerRoleIds } }, '-password -resetPassHash -resetPassExpire')\n        .sort({ fullname: 1 })\n        .skip(page * limit)\n        .limit(limit)\n\n      if (!obj.showDeleted) q.where({ deleted: false })\n\n      q.exec(callback)\n    })\n}\n\nuserSchema.statics.getAgents = function (obj, callback) {\n  var limit = obj.limit || 10\n  var page = obj.page || 0\n  var self = this\n\n  return self\n    .model(COLLECTION)\n    .find({})\n    .exec(function (err, accounts) {\n      if (err) return callback(err)\n\n      var agentRoleIds = _.filter(accounts, function (a) {\n        return a.role.isAgent\n      }).map(function (a) {\n        return a.role._id\n      })\n\n      var q = self\n        .model(COLLECTION)\n        .find({ role: { $in: agentRoleIds } }, '-password -resetPassHash -resetPassExpire')\n        .sort({ fullname: 1 })\n        .skip(page * limit)\n        .limit(limit)\n\n      if (!obj.showDeleted) q.where({ deleted: false })\n\n      q.exec(callback)\n    })\n}\n\nuserSchema.statics.getAdmins = function (obj, callback) {\n  var limit = obj.limit || 10\n  var page = obj.page || 0\n  var self = this\n\n  return self\n    .model(COLLECTION)\n    .find({})\n    .exec(function (err, accounts) {\n      if (err) return callback(err)\n\n      var adminRoleIds = _.filter(accounts, function (a) {\n        return a.role.isAdmin\n      }).map(function (a) {\n        return a.role._id\n      })\n\n      var q = self\n        .model(COLLECTION)\n        .find({ role: { $in: adminRoleIds } }, '-password -resetPassHash -resetPassExpire')\n        .sort({ fullname: 1 })\n        .skip(page * limit)\n        .limit(limit)\n\n      if (!obj.showDeleted) q.where({ deleted: false })\n\n      q.exec(callback)\n    })\n}\n\n/**\n * Checks if a user has device token already\n *\n * @memberof User\n * @instance\n * @method hasDeviceToken\n *\n * @param {User} user User to check against\n * @param {String} token token to check for in given user\n * @param {Number} type Type of Device token to check.\n * @return {Boolean}\n * @example\n * type:\n *   1: iOS\n *   2: Android\n *   3: Windows\n */\nfunction hasDeviceToken (user, token, type) {\n  if (type === 1) {\n    var matches = _.filter(user.iOSDeviceTokens, function (value) {\n      if (value === token) {\n        return value\n      }\n    })\n\n    return matches.length > 0\n  }\n\n  return false\n}\n\nmodule.exports = mongoose.model(COLLECTION, userSchema)\n", "/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\ndefine([\n  'angular',\n  'underscore',\n  'jquery',\n  'modules/helpers',\n  'uikit',\n  'qrcode',\n  'history',\n  'angularjs/services/session'\n], function (angular, _, $, helpers, UIKit) {\n  return angular\n    .module('trudesk.controllers.profile', ['trudesk.services.session'])\n    .controller('profileCtrl', function (SessionService, $scope, $window, $http, $log, $timeout) {\n      $scope.init = function () {\n        // Fix Inputs if input is preloaded with a value\n        fixInputLabels()\n      }\n\n      function fixInputLabels () {\n        $timeout(function () {\n          $('input.md-input').each(function () {\n            var vm = this\n            var self = $(vm)\n            if (!_.isEmpty(self.val())) {\n              var s = self.parent('.md-input-wrapper')\n              if (s.length > 0) {\n                s.addClass('md-input-filled')\n              }\n            }\n          })\n        }, 0)\n      }\n\n      $scope.updateUser = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n        var data = getFormData()\n\n        $http\n          .put('/api/v1/users/' + data.username, {\n            aId: id,\n            aFullname: data.fullname,\n            aPass: data.password,\n            aPassConfirm: data.cPassword,\n            aEmail: data.email,\n\n            saveGroups: false\n          })\n          .success(function () {\n            resetForm()\n            helpers.UI.showSnackbar({\n              text: 'Profile Successfully Saved',\n              textColor: '#f8f8f2'\n            })\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:updateUser] - ' + e.error.message)\n            helpers.UI.showSnackbar('Error ' + e.error.message, true)\n          })\n      }\n\n      $scope.showTour = function () {\n        var username = SessionService.getUser().username\n        $http\n          .put('/api/v1/users/' + username + '/updatepreferences', {\n            preference: 'tourCompleted',\n            value: false\n          })\n          .success(function () {\n            $window.location.href = '/'\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:showTour] - ' + e.error.message)\n            helpers.UI.showSnackbar('Error ' + e.error.message, true)\n          })\n      }\n\n      $scope.back = function ($event) {\n        History.go(-1)\n        $event.preventDefault()\n      }\n\n      $scope.generateApiKey = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n\n        $http\n          .post('/api/v1/users/' + id + '/generateapikey')\n          .success(function (tokenJson) {\n            $('#aApiKey').val(tokenJson.token)\n            $('.removeApiButton').removeClass('hide')\n            $('.generateApiButton').addClass('hide')\n            // helpers.showFlash('API Key Successfully Generated');\n            helpers.UI.showSnackbar('API Key Successfully Generated', false)\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:generateApiKey] - ' + e)\n            // helpers.showFlash('Error: ' + e, true);\n            helpers.UI.showSnackbar('Error: Unable to generate API Key!', true)\n          })\n      }\n\n      $scope.removeApiKey = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n\n        $http\n          .post('/api/v1/users/' + id + '/removeapikey')\n          .success(function () {\n            $('#aApiKey').val('')\n            $('.generateApiButton').removeClass('hide')\n            $('.removeApiButton').addClass('hide')\n            helpers.UI.showSnackbar('API Key Successfully Revoked', false)\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:removeApiKey]', e)\n            helpers.UI.showSnackbar('Error: Unable to remove API Key!', true)\n          })\n      }\n\n      $scope.otpChange = function (event) {\n        var $totpSettings = $('.totp-settings-wrap')\n        var $totpPanel = $totpSettings.find('.panel-body2')\n        var $tOTPKey = $totpSettings.find('#tOTPKey')\n        var $qrCode = $totpSettings.find('#totp-qrcode')\n        event.preventDefault()\n\n        if ($scope.otpEnabled) {\n          UIKit.modal.confirm(\n            '<span style=\"font-size: 16px; color: #FF9800;\">WARNING: Disabling Two Factor Authentication will remove your shared secret. A new key will generate when re-enabled.</span><br />' +\n              'Are you sure you want to disable two factor authentication?',\n            function () {\n              removeL2Auth(function (err) {\n                if (err) {\n                  $log.error(err)\n                }\n\n                angular.element(event.target).attr('checked', false)\n                $totpPanel.slideUp(400, function () {\n                  $totpPanel.css({ overflow: 'hidden', margin: 0 })\n                  $qrCode.find('canvas').remove()\n                  $tOTPKey.val()\n                  $timeout(function () {\n                    $scope.otpEnabled = false\n                  }, 0)\n                })\n              })\n            },\n            {\n              labels: { Ok: 'Yes', Cancel: 'No' }\n            }\n          )\n        } else {\n          generateL2Auth(function (err, key) {\n            if (err) {\n              $log.error(err)\n              helpers.UI.showSnackbar('An unknown error occurred. Check console.', true)\n              return\n            }\n\n            $timeout(function () {\n              $scope.otpEnabled = true\n              angular.element(event.target).prop('checked', true)\n            }, 0)\n\n            var host = $('div[data-host]').attr('data-host')\n            var username = SessionService.getUser().username\n            var qrKey =\n              'otpauth://totp/' +\n              host +\n              '-' +\n              username +\n              ':' +\n              host +\n              '-' +\n              username +\n              '?secret=' +\n              key +\n              '&issuer=Trudesk'\n            $qrCode.qrcode({ width: 242, height: 242, text: qrKey })\n            $tOTPKey.val(key)\n            $totpPanel.css({ margin: '10px 7px 7px 7px' })\n            $totpPanel.find('input').removeClass('hide')\n            $totpPanel.removeClass('hide')\n            fixInputLabels()\n            $totpPanel.slideDown()\n            // }\n          })\n        }\n      }\n\n      function generateL2Auth (completed) {\n        var id = SessionService.getUser()._id\n        if (_.isUndefined(id)) {\n          return helpers.UI.showSnackbar('Unable to get user ID.', true)\n        }\n\n        $http.post('/api/v1/users/' + id + '/generatel2auth').then(\n          function success (response) {\n            if (!response.data.success) {\n              helpers.UI.showSnackbar('Error: Unknown error has occurred.', true)\n              if (_.isFunction(completed)) {\n                return completed('Error: Unknown error has occurred.')\n              }\n            } else {\n              // Success\n              if (_.isFunction(completed)) {\n                completed(null, response.data.generatedKey)\n              }\n            }\n          },\n          function error (err) {\n            $log.error('[trudesk:profile:generateL2Auth]')\n            $log.error(err)\n            helpers.UI.showSnackbar('Error: Could not generate new secret! Check Console', true)\n            if (_.isFunction(completed)) {\n              completed(err)\n            }\n          }\n        )\n      }\n\n      function removeL2Auth (completed) {\n        var id = SessionService.getUser()._id\n        if (_.isUndefined(id)) {\n          return helpers.UI.showSnackbar('Unable to get user ID.', true)\n        }\n\n        $http\n          .post('/api/v1/users/' + id + '/removel2auth')\n          .success(function () {\n            if (_.isFunction(completed)) {\n              completed()\n            }\n          })\n          .error(function (e) {\n            $log.error('[trudesk:profile:removeL2Auth]')\n            $log.error(e)\n            helpers.UI.showSnackbar('Error: Could not remove. Check Console', true)\n            if (_.isFunction(completed)) {\n              completed(e)\n            }\n          })\n      }\n\n      function getFormData () {\n        var data = {}\n        data.username = $('#aUsername').val()\n        data.fullname = $('#aFullname').val()\n        data.password = $('#aPass').val()\n        data.cPassword = $('#aPassConfirm').val()\n        data.email = $('#aEmail').val()\n\n        return data\n      }\n\n      function resetForm () {\n        $('#aPass').val('')\n        $('#aPassConfirm').val('')\n      }\n    })\n})\n", "<div data-user_id=\"{{data.account._id}}\" class=\"hide\"></div>\n<div data-host=\"{{data.host}}\" class=\"hide\"></div>\n<div class=\"grid grid-collapse page-content no-border-top\" ng-controller=\"profileCtrl\"\n    ng-init=\"\n\n    otpEnabled={{#isNotNull data.account.tOTPKey}}true{{else}}false{{/isNotNull}};\n\n    init();\n\">\n\n    <div class=\"page-title uk-width-1-1 noshadow page-title-border-bottom\">\n        <p class=\"left\">{{data.account.fullname}}</p>\n        <div class=\"right\" style=\"margin: 15px 15px 0 0;\">\n            <!--<button class=\"md-btn md-btn-white md-btn-flat-primary md-btn-wave md-btn-wave-light md-btn-small\" ng-click=\"showTour();\">Show Tour</button>-->\n        </div>\n    </div>\n    <!--Content Here-->\n    <div class=\"page-wrapper scrollable no-overflow-x full-height\">\n        <div id=\"page-content-inner\" class=\"uk-grid\">\n            <div class=\"uk-width-1-1 relative\">\n                <div class=\"profilePicFormWrap no-touch uk-width-1-1 uk-float-left\">\n                    <form id=\"aUploadImageForm\" class=\"form nomargin uk-clearfix\" enctype=\"multipart/form-data\">\n                        <input type=\"hidden\" name=\"_id\" value=\"{{data.account._id}}\" />\n                        <input type=\"hidden\" name=\"username\" value=\"{{data.account.username}}\" />\n                        <div class=\"largeProfilePic cursor-pointer hoverEffect\" style=\"position: absolute; left: 35px; top: 0;\" onclick=\"onProfileImageClick()\">\n                            <input id=\"profileImageInput\" name=\"aProfile_{{data.account.username}}\" type=\"file\" value=\"{{data.account.image}}\" style=\"visibility: hidden; height: 0; width: 0\" />\n                            {{#if data.account.image}}\n                                <img id=\"profileImage\" data-userid=\"{{data.account._id}}\" src=\"/uploads/users/{{data.account.image}}\" alt=\"{{data.account.username}}\"/>\n                            {{else}}\n                                <img id=\"profileImage\" data-userid=\"{{data.account._id}}\" src=\"/uploads/users/defaultProfile.jpg\" alt=\"{{data.account.username}}\"/>\n                            {{/if}}\n                            <div class=\"img-caption\">\n                                <h3>Upload Profile Image</h3>\n                                <span>Image must be square and at least 256x256</span>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n\n                <div class=\"totp-settings-wrap uk-float-left\" style=\"min-width: 256px; margin-top: 275px;\">\n                    <div class=\"panel trupanel nopadding no-hover-shadow uk-overflow-hidden\">\n                        <div class=\"left\">\n                            <h6 style=\"padding: 0 0 0 15px; margin: 15px 0 0 0; font-size: 12px; line-height: 10px;\">Two Factor Authentication</h6>\n                            <h5 style=\"padding: 0 0 10px 15px; margin: 2px 0 0 0; font-size: 10px;\" class=\"uk-text-muted\">\n                                Extra account security.\n                            </h5>\n                        </div>\n                        <div class=\"right\" style=\"position:relative;\">\n                            <!-- Switch -->\n                            <div class=\"md-switch md-green\" style=\"margin: 20px 0 0 0;\">\n                                <label>\n                                    <input id=\"tpsEnabled\" name=\"tpsEnabled\" type=\"checkbox\" ng-model=\"otpEnabled\" ng-click=\"otpChange($event)\">\n                                    <span class=\"lever\"></span>\n                                </label>\n                            </div>\n                        </div>\n                        <hr class=\"nomargin-top clear\">\n                        <div class=\"panel-body2\" style=\"margin: 10px 7px 7px 7px;\">\n                            <div class=\"uk-margin-small-bottom\">\n                                <label for=\"tOTPKey\" style=\"color:#727272;\">Shared Key</label>\n                                <input id=\"tOTPKey\" type=\"text\" class=\"md-input md-input-width-medium\" value=\"{{data.account.tOTPKey}}\" disabled />\n                            </div>\n                            <div id=\"totp-qrcode\"\n                                 data-hasKey=\"{{#isNotNull data.account.tOTPKey}}true{{else}}false{{/isNotNull}}\"\n                                 data-totpkey=\"otpauth://totp/{{data.host}}-{{data.account.username}}:{{data.host}}-{{data.account.username}}?secret={{data.account.tOTPKey}}&issuer=Trudesk\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <form id=\"updateProfileForm\" class=\"uk-form-stacked\" action=\"\" method=\"POST\">\n                    <input name=\"aId\" type=\"hidden\" value=\"{{data.account._id}}\" />\n                    <div style=\"margin-left: 285px;\">\n                        <div class=\"profile-item-wrap uk-margin-medium-bottom\">\n                            <div class=\"panel trupanel nopadding no-hover-shadow uk-overflow-hidden\" style=\"min-height: 60px; height: auto;\">\n                                <div>\n                                    <h6 style=\"padding: 0 0 0 15px; margin: 15px 0 0 0; font-size: 16px; line-height: 14px;\">User Information</h6>\n                                    <h5 style=\"padding: 0 0 10px 15px; margin: 2px 0 0 0; font-size: 12px;\" class=\"uk-text-muted\">\n                                        Your profile information.\n                                    </h5>\n                                </div>\n                                <hr class=\"nomargin-top\">\n                                <div class=\"panel-body2\" style=\"padding: 20px 15px 15px 15px;\">\n                                    <div class=\"\">\n                                        <div class=\"uk-margin-medium-bottom\">\n                                            <label for=\"aUsername\" style=\"color: #727272;\">Username</label>\n                                            <input id=\"aUsername\" class=\"md-input md-input-width-medium\" name=\"aUsername\" type=\"text\" disabled value=\"{{data.account.username}}\" />\n                                        </div>\n                                        <div class=\"uk-margin-medium-bottom\">\n                                            <label for=\"aFullname\">Name</label>\n                                            <input id=\"aFullname\" class=\"md-input md-input-width-medium\" name=\"aFullname\" type=\"text\" value=\"{{data.account.fullname}}\" />\n                                        </div>\n                                        <div class=\"uk-margin-medium-bottom\">\n                                            <label for=\"aPass\">Password</label>\n                                            <input id=\"aPass\" class=\"md-input\" name=\"aPass\" type=\"password\" />\n                                        </div>\n                                        <div class=\"uk-margin-medium-bottom\">\n                                            <label for=\"aPassConfirm\">Confirm Password</label>\n                                            <input id=\"aPassConfirm\" class=\"md-input\" name=\"aPassConfirm\" type=\"password\" />\n                                        </div>\n                                        <div class=\"uk-margin-medium-bottom\">\n                                            <label for=\"aEmail\">Email</label>\n                                            <input id=\"aEmail\" class=\"md-input\" name=\"aEmail\" type=\"email\" value=\"{{data.account.email}}\"/>\n                                        </div>\n                                        <div class=\"uk-clearfix\">\n                                            <button type=\"submit\" class=\"uk-float-right md-btn md-btn-small md-btn-success md-btn-wave-light\" ng-click=\"updateUser($event)\">Save</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"profile-item-wrap uk-margin-medium-bottom\">\n                            <div class=\"panel trupanel nopadding no-hover-shadow uk-overflow-hidden\" style=\"min-height: 60px; height: auto;\">\n                                <div class=\"left\">\n                                    <h6 style=\"padding: 0 0 0 15px; margin: 15px 0 0 0; font-size: 16px; line-height: 14px;\">Mobile API Token</h6>\n                                    <h5 style=\"padding: 0 0 10px 15px; margin: 2px 0 0 0; font-size: 12px;\" class=\"uk-text-muted\">\n                                        API Token for the trudesk mobile app.\n                                    </h5>\n                                </div>\n                                <div class=\"right\" style=\"position:relative; padding: 15px;\">\n                                    <button\n                                            type=\"button\"\n                                            class=\"uk-float-right md-btn md-btn-small md-btn-danger md-btn-wave-light removeApiButton {{#unless data.account.accessToken}} hide {{/unless}}\"\n                                            ng-click=\"removeApiKey($event)\">Remove Token\n                                    </button>\n                                    <button\n                                            type=\"button\"\n                                            class=\"uk-float-right md-btn md-btn-small md-btn-success md-btn-wave-light generateApiButton {{#if data.account.accessToken}} hide {{/if}}\"\n                                            ng-click=\"generateApiKey($event)\">Generate Token\n                                    </button>\n                                </div>\n                                <hr class=\"nomargin-top clear\">\n                                <div class=\"panel-body2\" style=\"padding: 20px 15px 15px 15px\">\n                                    <div class=\"uk-margin-medium-bottom\">\n                                        <label for=\"aApiKey\" style=\"color: #727272;\">API Token</label>\n                                        <input type=\"text\" id=\"aApiKey\" class=\"md-input\" name=\"aApiKey\" value=\"{{data.account.accessToken}}\" readonly>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n{{#contentFor 'js-plugins'}}\n    <script type=\"text/javascript\">\n        function onProfileImageClick() {\n            document.getElementById('profileImageInput').click()\n        }\n    </script>\n{{/contentFor}}"], "fixing_code": ["/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nvar async = require('async')\nvar mongoose = require('mongoose')\nvar winston = require('winston')\nvar bcrypt = require('bcrypt')\nvar _ = require('lodash')\nvar Chance = require('chance')\nconst utils = require('../helpers/utils')\n\n// Required for linkage\nrequire('./role')\n\nvar SALT_FACTOR = 10\nvar COLLECTION = 'accounts'\n\n/**\n * User Schema\n * @module models/user\n * @class User\n *\n * @property {object} _id ```Required``` ```unique``` MongoDB Object ID\n * @property {String} username ```Required``` ```unique``` Username of user\n * @property {String} password ```Required``` Bcrypt password\n * @property {String} fullname ```Required``` Full name of user\n * @property {String} email ```Required``` ```unique``` Email Address of user\n * @property {String} role ```Required``` Permission role of the given user. See {@link Permissions}\n * @property {Date} lastOnline Last timestamp given user was online.\n * @property {String} title Job Title of user\n * @property {String} image Filename of user image\n * @property {String} resetPassHash Password reset has for recovery password link.\n * @property {Date} resetPassExpire Date when the password recovery link will expire\n * @property {String} tOTPKey One Time Password Secret Key\n * @property {Number} tOTPPeriod One Time Password Key Length (Time) - Default 30 Seconds\n * @property {String} accessToken API Access Token\n * @property {Array} iOSDeviceTokens Array of String based device Ids for Apple iOS devices. *push notifications*\n * @property {Object} preferences Object to hold user preferences\n * @property {Boolean} preferences.autoRefreshTicketGrid Enable the auto refresh of the ticket grid.\n * @property {Boolean} deleted Account Deleted\n */\nvar userSchema = mongoose.Schema({\n  username: { type: String, required: true, unique: true, lowercase: true },\n  password: { type: String, required: true, select: false },\n  fullname: { type: String, required: true, index: true },\n  email: { type: String, required: true, unique: true, lowercase: true },\n  role: { type: mongoose.Schema.Types.ObjectId, ref: 'roles', required: true },\n  lastOnline: Date,\n  title: String,\n  image: String,\n\n  resetPassHash: { type: String, select: false },\n  resetPassExpire: { type: Date, select: false },\n  tOTPKey: { type: String, select: false },\n  tOTPPeriod: { type: Number, select: false },\n  resetL2AuthHash: { type: String, select: false },\n  resetL2AuthExpire: { type: Date, select: false },\n  hasL2Auth: { type: Boolean, required: true, default: false },\n  accessToken: { type: String, sparse: true, select: false },\n\n  preferences: {\n    tourCompleted: { type: Boolean, default: false },\n    autoRefreshTicketGrid: { type: Boolean, default: true },\n    openChatWindows: [{ type: String, default: [] }]\n  },\n\n  deleted: { type: Boolean, default: false }\n})\n\nuserSchema.set('toObject', { getters: true })\n\nvar autoPopulateRole = function (next) {\n  this.populate('role', 'name description normalized _id')\n  next()\n}\n\nuserSchema.pre('findOne', autoPopulateRole).pre('find', autoPopulateRole)\n\nuserSchema.pre('save', function (next) {\n  var user = this\n\n  user.username = utils.applyMaxShortTextLength(utils.sanitizeFieldPlainText(user.username.toLowerCase().trim()))\n  user.email = utils.sanitizeFieldPlainText(user.email.trim())\n\n  if (user.fullname) user.fullname = utils.applyMaxShortTextLength(utils.sanitizeFieldPlainText(user.fullname.trim()))\n  if (user.title) user.title = utils.applyMaxShortTextLength(utils.sanitizeFieldPlainText(user.title.trim()))\n\n  if (!user.isModified('password')) {\n    return next()\n  }\n\n  if (user.password.toString().length > 255) user.password = utils.applyMaxTextLength(user.password)\n\n  bcrypt.genSalt(SALT_FACTOR, function (err, salt) {\n    if (err) return next(err)\n\n    bcrypt.hash(user.password, salt, function (err, hash) {\n      if (err) return next(err)\n\n      user.password = hash\n      return next()\n    })\n  })\n})\n\nuserSchema.methods.addAccessToken = function (callback) {\n  var user = this\n  var date = new Date()\n  var salt = user.username.toString() + date.toISOString()\n  var chance = new Chance(salt)\n  user.accessToken = chance.hash()\n  user.save(function (err) {\n    if (err) return callback(err, null)\n\n    return callback(null, user.accessToken)\n  })\n}\n\nuserSchema.methods.removeAccessToken = function (callback) {\n  var user = this\n  if (!user.accessToken) return callback()\n\n  user.accessToken = undefined\n  user.save(function (err) {\n    if (err) return callback(err, null)\n\n    return callback()\n  })\n}\n\nuserSchema.methods.generateL2Auth = function (callback) {\n  var user = this\n  if (_.isUndefined(user.tOTPKey) || _.isNull(user.tOTPKey)) {\n    var chance = new Chance()\n    var base32 = require('thirty-two')\n\n    var genOTPKey = chance.string({\n      length: 7,\n      pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ23456789'\n    })\n    var base32GenOTPKey = base32\n      .encode(genOTPKey)\n      .toString()\n      .replace(/=/g, '')\n\n    user.tOTPKey = base32GenOTPKey\n    user.hasL2Auth = true\n    user.save(function (err) {\n      if (err) return callback(err)\n\n      return callback(null, base32GenOTPKey)\n    })\n  } else {\n    return callback()\n  }\n}\n\nuserSchema.methods.removeL2Auth = function (callback) {\n  var user = this\n\n  user.tOTPKey = undefined\n  user.hasL2Auth = false\n  user.save(function (err) {\n    if (err) return callback(err, null)\n\n    return callback()\n  })\n}\n\nuserSchema.methods.addDeviceToken = function (token, type, callback) {\n  if (_.isUndefined(token)) return callback('Invalid token')\n  var user = this\n  // type 1 = iOS\n  // type 2 = Android\n  if (type === 1) {\n    if (hasDeviceToken(user, token, type)) return callback(null, token)\n\n    user.iOSDeviceTokens.push(token)\n    user.save(function (err) {\n      if (err) return callback(err, null)\n\n      callback(null, token)\n    })\n  }\n}\n\nuserSchema.methods.removeDeviceToken = function (token, type, callback) {\n  var user = this\n  if (type === 1) {\n    if (!hasDeviceToken(user, token, type)) return callback()\n\n    winston.debug('Removing Device: ' + token)\n    user.iOSDeviceTokens.splice(_.indexOf(this.iOSDeviceTokens, token), 1)\n    user.save(function (err, u) {\n      if (err) return callback(err, null)\n\n      return callback(null, u.iOSDeviceTokens)\n    })\n  }\n}\n\nuserSchema.methods.addOpenChatWindow = function (convoId, callback) {\n  if (convoId === undefined) {\n    if (!_.isFunction(callback)) return false\n    return callback('Invalid convoId')\n  }\n  var user = this\n  var hasChatWindow =\n    _.filter(user.preferences.openChatWindows, function (value) {\n      return value.toString() === convoId.toString()\n    }).length > 0\n\n  if (hasChatWindow) {\n    if (!_.isFunction(callback)) return false\n    return callback()\n  }\n  user.preferences.openChatWindows.push(convoId.toString())\n  user.save(function (err, u) {\n    if (err) {\n      if (!_.isFunction(callback)) return false\n      return callback(err)\n    }\n\n    if (!_.isFunction(callback)) return false\n    return callback(null, u.preferences.openChatWindows)\n  })\n}\n\nuserSchema.methods.removeOpenChatWindow = function (convoId, callback) {\n  if (convoId === undefined) {\n    if (!_.isFunction(callback)) return false\n    return callback('Invalid convoId')\n  }\n  var user = this\n  var hasChatWindow =\n    _.filter(user.preferences.openChatWindows, function (value) {\n      return value.toString() === convoId.toString()\n    }).length > 0\n\n  if (!hasChatWindow) {\n    if (!_.isFunction(callback)) return false\n    return callback()\n  }\n  user.preferences.openChatWindows.splice(\n    _.findIndex(user.preferences.openChatWindows, function (item) {\n      return item.toString() === convoId.toString()\n    }),\n    1\n  )\n\n  user.save(function (err, u) {\n    if (err) {\n      if (!_.isFunction(callback)) return false\n      return callback(err)\n    }\n\n    if (!_.isFunction(callback)) return false\n    return callback(null, u.preferences.openChatWindows)\n  })\n}\n\nuserSchema.methods.softDelete = function (callback) {\n  var user = this\n\n  user.deleted = true\n\n  user.save(function (err) {\n    if (err) return callback(err, false)\n\n    callback(null, true)\n  })\n}\n\nuserSchema.statics.validate = function (password, dbPass) {\n  return bcrypt.compareSync(password, dbPass)\n}\n\n/**\n * Gets all users\n *\n * @memberof User\n * @static\n * @method findAll\n *\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.findAll = function (callback) {\n  return this.model(COLLECTION).find({}, callback)\n}\n\n/**\n * Gets user via object _id\n *\n * @memberof User\n * @static\n * @method getUser\n *\n * @param {Object} oId Object _id to Query MongoDB\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUser = function (oId, callback) {\n  if (_.isUndefined(oId)) {\n    return callback('Invalid ObjectId - UserSchema.GetUser()', null)\n  }\n\n  return this.model(COLLECTION).findOne({ _id: oId }, callback)\n}\n\n/**\n * Gets user via username\n *\n * @memberof User\n * @static\n * @method getUserByUsername\n *\n * @param {String} user Username to Query MongoDB\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUserByUsername = function (user, callback) {\n  if (_.isUndefined(user)) {\n    return callback('Invalid Username - UserSchema.GetUserByUsername()', null)\n  }\n\n  return this.model(COLLECTION)\n    .findOne({ username: new RegExp('^' + user + '$', 'i') })\n    .select('+password +accessToken')\n    .exec(callback)\n}\n\nuserSchema.statics.getByUsername = userSchema.statics.getUserByUsername\n\n/**\n * Gets user via email\n *\n * @memberof User\n * @static\n * @method getUserByEmail\n *\n * @param {String} email Email to Query MongoDB\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUserByEmail = function (email, callback) {\n  if (_.isUndefined(email)) {\n    return callback('Invalid Email - UserSchema.GetUserByEmail()', null)\n  }\n\n  return this.model(COLLECTION).findOne({ email: email.toLowerCase() }, callback)\n}\n\n/**\n * Gets user via reset password hash\n *\n * @memberof User\n * @static\n * @method getUserByResetHash\n *\n * @param {String} hash Hash to Query MongoDB\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUserByResetHash = function (hash, callback) {\n  if (_.isUndefined(hash)) {\n    return callback('Invalid Hash - UserSchema.GetUserByResetHash()', null)\n  }\n\n  return this.model(COLLECTION).findOne(\n    { resetPassHash: hash, deleted: false },\n    '+resetPassHash +resetPassExpire',\n    callback\n  )\n}\n\nuserSchema.statics.getUserByL2ResetHash = function (hash, callback) {\n  if (_.isUndefined(hash)) {\n    return callback('Invalid Hash - UserSchema.GetUserByL2ResetHash()', null)\n  }\n\n  return this.model(COLLECTION).findOne(\n    { resetL2AuthHash: hash, deleted: false },\n    '+resetL2AuthHash +resetL2AuthExpire',\n    callback\n  )\n}\n\n/**\n * Gets user via API Access Token\n *\n * @memberof User\n * @static\n * @method getUserByAccessToken\n *\n * @param {String} token Access Token to Query MongoDB\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUserByAccessToken = function (token, callback) {\n  if (_.isUndefined(token)) {\n    return callback('Invalid Token - UserSchema.GetUserByAccessToken()', null)\n  }\n\n  return this.model(COLLECTION).findOne({ accessToken: token, deleted: false }, '+password', callback)\n}\n\nuserSchema.statics.getUserWithObject = function (object, callback) {\n  if (!_.isObject(object)) {\n    return callback('Invalid Object (Must be of type Object) - UserSchema.GetUserWithObject()', null)\n  }\n\n  var self = this\n\n  var limit = object.limit === null ? 10 : object.limit\n  var page = object.page === null ? 0 : object.page\n  var search = object.search === null ? '' : object.search\n\n  var q = self\n    .model(COLLECTION)\n    .find({}, '-password -resetPassHash -resetPassExpire')\n    .sort({ fullname: 1 })\n    .skip(page * limit)\n  if (limit !== -1) {\n    q.limit(limit)\n  }\n\n  if (!object.showDeleted) q.where({ deleted: false })\n\n  if (!_.isEmpty(search)) {\n    q.where({ fullname: new RegExp('^' + search.toLowerCase(), 'i') })\n  }\n\n  return q.exec(callback)\n}\n\n/**\n * Gets users based on permissions > mod\n *\n * @memberof User\n * @static\n * @method getAssigneeUsers\n *\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getAssigneeUsers = function (callback) {\n  var roles = global.roles\n  if (_.isUndefined(roles)) return callback(null, [])\n\n  var assigneeRoles = []\n  async.each(roles, function (role) {\n    if (role.isAgent) assigneeRoles.push(role._id)\n  })\n\n  assigneeRoles = _.uniq(assigneeRoles)\n  this.model(COLLECTION).find({ role: { $in: assigneeRoles }, deleted: false }, function (err, users) {\n    if (err) {\n      winston.warn(err)\n      return callback(err, null)\n    }\n\n    return callback(null, _.sortBy(users, 'fullname'))\n  })\n}\n\n/**\n * Gets users based on roles\n *\n * @memberof User\n * @static\n * @method getUsersByRoles\n *\n * @param {Array} roles Array of role ids\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.getUsersByRoles = function (roles, callback) {\n  if (_.isUndefined(roles)) return callback('Invalid roles array', null)\n  if (!_.isArray(roles)) {\n    roles = [roles]\n  }\n\n  var q = this.model(COLLECTION).find({ role: { $in: roles }, deleted: false })\n\n  return q.exec(callback)\n}\n\n/**\n * Creates a user with the given data object\n *\n * @memberof User\n * @static\n * @method createUser\n *\n * @param {User} data JSON data object of new User\n * @param {QueryCallback} callback MongoDB Query Callback\n */\nuserSchema.statics.createUser = function (data, callback) {\n  if (_.isUndefined(data) || _.isUndefined(data.username)) {\n    return callback('Invalid User Data - UserSchema.CreateUser()', null)\n  }\n\n  var self = this\n\n  self.model(COLLECTION).find({ username: data.username }, function (err, items) {\n    if (err) {\n      return callback(err, null)\n    }\n\n    if (_.size(items) > 0) {\n      return callback('Username Already Exists', null)\n    }\n\n    return self.collection.insert(data, callback)\n  })\n}\n\n/**\n * Creates a user with only Email address. Emails user password.\n *\n * @param email\n * @param callback\n */\nuserSchema.statics.createUserFromEmail = function (email, callback) {\n  if (_.isUndefined(email)) {\n    return callback('Invalid User Data - UserSchema.CreatePublicUser()', null)\n  }\n\n  var self = this\n\n  var settingSchema = require('./setting')\n  settingSchema.getSetting('role:user:default', function (err, userRoleDefault) {\n    if (err || !userRoleDefault) return callback('Invalid Setting - UserRoleDefault')\n\n    var Chance = require('chance')\n\n    var chance = new Chance()\n\n    var plainTextPass = chance.string({\n      length: 6,\n      pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'\n    })\n\n    var user = new self({\n      username: email,\n      email: email,\n      password: plainTextPass,\n      fullname: email,\n      role: userRoleDefault.value\n    })\n\n    self.model(COLLECTION).find({ username: user.username }, function (err, items) {\n      if (err) return callback(err)\n      if (_.size(items) > 0) return callback('Username already exists')\n\n      user.save(function (err, savedUser) {\n        if (err) return callback(err)\n\n        // Create a group for this user\n        var GroupSchema = require('./group')\n        var group = new GroupSchema({\n          name: savedUser.email,\n          members: [savedUser._id],\n          sendMailTo: [savedUser._id],\n          public: true\n        })\n\n        group.save(function (err, group) {\n          if (err) return callback(err)\n\n          // Send welcome email\n          var path = require('path')\n          var mailer = require('../mailer')\n          var Email = require('email-templates')\n          var templateDir = path.resolve(__dirname, '..', 'mailer', 'templates')\n\n          var email = new Email({\n            views: {\n              root: templateDir,\n              options: {\n                extension: 'handlebars'\n              }\n            }\n          })\n\n          var settingSchema = require('./setting')\n          settingSchema.getSetting('gen:siteurl', function (err, setting) {\n            if (err) return callback(err)\n\n            if (!setting) {\n              setting = { value: '' }\n            }\n\n            var dataObject = {\n              user: savedUser,\n              plainTextPassword: plainTextPass,\n              baseUrl: setting.value\n            }\n\n            email\n              .render('public-account-created', dataObject)\n              .then(function (html) {\n                var mailOptions = {\n                  to: savedUser.email,\n                  subject: 'Welcome to trudesk! - Here are your account details.',\n                  html: html,\n                  generateTextFromHTML: true\n                }\n\n                mailer.sendMail(mailOptions, function (err) {\n                  if (err) {\n                    winston.warn(err)\n                    return callback(err)\n                  }\n\n                  return callback(null, { user: savedUser, group: group })\n                })\n              })\n              .catch(function (err) {\n                winston.warn(err)\n                return callback(err)\n              })\n          })\n        })\n      })\n    })\n  })\n}\n\nuserSchema.statics.getCustomers = function (obj, callback) {\n  var limit = obj.limit || 10\n  var page = obj.page || 0\n  var self = this\n  return self\n    .model(COLLECTION)\n    .find({}, '-password -resetPassHash -resetPassExpire')\n    .exec(function (err, accounts) {\n      if (err) return callback(err)\n\n      var customerRoleIds = _.filter(accounts, function (a) {\n        return !a.role.isAdmin && !a.role.isAgent\n      }).map(function (a) {\n        return a.role._id\n      })\n\n      var q = self\n        .find({ role: { $in: customerRoleIds } }, '-password -resetPassHash -resetPassExpire')\n        .sort({ fullname: 1 })\n        .skip(page * limit)\n        .limit(limit)\n\n      if (!obj.showDeleted) q.where({ deleted: false })\n\n      q.exec(callback)\n    })\n}\n\nuserSchema.statics.getAgents = function (obj, callback) {\n  var limit = obj.limit || 10\n  var page = obj.page || 0\n  var self = this\n\n  return self\n    .model(COLLECTION)\n    .find({})\n    .exec(function (err, accounts) {\n      if (err) return callback(err)\n\n      var agentRoleIds = _.filter(accounts, function (a) {\n        return a.role.isAgent\n      }).map(function (a) {\n        return a.role._id\n      })\n\n      var q = self\n        .model(COLLECTION)\n        .find({ role: { $in: agentRoleIds } }, '-password -resetPassHash -resetPassExpire')\n        .sort({ fullname: 1 })\n        .skip(page * limit)\n        .limit(limit)\n\n      if (!obj.showDeleted) q.where({ deleted: false })\n\n      q.exec(callback)\n    })\n}\n\nuserSchema.statics.getAdmins = function (obj, callback) {\n  var limit = obj.limit || 10\n  var page = obj.page || 0\n  var self = this\n\n  return self\n    .model(COLLECTION)\n    .find({})\n    .exec(function (err, accounts) {\n      if (err) return callback(err)\n\n      var adminRoleIds = _.filter(accounts, function (a) {\n        return a.role.isAdmin\n      }).map(function (a) {\n        return a.role._id\n      })\n\n      var q = self\n        .model(COLLECTION)\n        .find({ role: { $in: adminRoleIds } }, '-password -resetPassHash -resetPassExpire')\n        .sort({ fullname: 1 })\n        .skip(page * limit)\n        .limit(limit)\n\n      if (!obj.showDeleted) q.where({ deleted: false })\n\n      q.exec(callback)\n    })\n}\n\n/**\n * Checks if a user has device token already\n *\n * @memberof User\n * @instance\n * @method hasDeviceToken\n *\n * @param {User} user User to check against\n * @param {String} token token to check for in given user\n * @param {Number} type Type of Device token to check.\n * @return {Boolean}\n * @example\n * type:\n *   1: iOS\n *   2: Android\n *   3: Windows\n */\nfunction hasDeviceToken (user, token, type) {\n  if (type === 1) {\n    var matches = _.filter(user.iOSDeviceTokens, function (value) {\n      if (value === token) {\n        return value\n      }\n    })\n\n    return matches.length > 0\n  }\n\n  return false\n}\n\nmodule.exports = mongoose.model(COLLECTION, userSchema)\n", "/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\ndefine([\n  'angular',\n  'underscore',\n  'jquery',\n  'modules/helpers',\n  'uikit',\n  'qrcode',\n  'history',\n  'angularjs/services/session'\n], function (angular, _, $, helpers, UIKit) {\n  return angular\n    .module('trudesk.controllers.profile', ['trudesk.services.session'])\n    .controller('profileCtrl', function (SessionService, $scope, $window, $http, $log, $timeout) {\n      $scope.init = function () {\n        // Fix Inputs if input is preloaded with a value\n        fixInputLabels()\n      }\n\n      function fixInputLabels () {\n        $timeout(function () {\n          $('input.md-input').each(function () {\n            var vm = this\n            var self = $(vm)\n            if (!_.isEmpty(self.val())) {\n              var s = self.parent('.md-input-wrapper')\n              if (s.length > 0) {\n                s.addClass('md-input-filled')\n              }\n            }\n          })\n        }, 0)\n      }\n\n      function validateEmail (email) {\n        return String(email)\n          .toLowerCase()\n          .match(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n          )\n      }\n\n      $scope.updateUser = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n        var data = getFormData()\n\n        if (\n          data.fullname.toString().length > 25 ||\n          data.password.toString().length > 255 ||\n          data.cPassword.toString().length > 255 ||\n          data.email.toString().length > 255 ||\n          !validateEmail(data.email.toString())\n        ) {\n          helpers.UI.showSnackbar('Form data invalid.', true)\n          return false\n        }\n\n        $http\n          .put('/api/v1/users/' + data.username, {\n            aId: id,\n            aFullname: data.fullname,\n            aPass: data.password,\n            aPassConfirm: data.cPassword,\n            aEmail: data.email,\n\n            saveGroups: false\n          })\n          .success(function () {\n            resetForm()\n            helpers.UI.showSnackbar({\n              text: 'Profile Successfully Saved',\n              textColor: '#f8f8f2'\n            })\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:updateUser] - ' + e.error.message)\n            helpers.UI.showSnackbar('Error ' + e.error.message, true)\n          })\n      }\n\n      $scope.showTour = function () {\n        var username = SessionService.getUser().username\n        $http\n          .put('/api/v1/users/' + username + '/updatepreferences', {\n            preference: 'tourCompleted',\n            value: false\n          })\n          .success(function () {\n            $window.location.href = '/'\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:showTour] - ' + e.error.message)\n            helpers.UI.showSnackbar('Error ' + e.error.message, true)\n          })\n      }\n\n      $scope.back = function ($event) {\n        History.go(-1)\n        $event.preventDefault()\n      }\n\n      $scope.generateApiKey = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n\n        $http\n          .post('/api/v1/users/' + id + '/generateapikey')\n          .success(function (tokenJson) {\n            $('#aApiKey').val(tokenJson.token)\n            $('.removeApiButton').removeClass('hide')\n            $('.generateApiButton').addClass('hide')\n            // helpers.showFlash('API Key Successfully Generated');\n            helpers.UI.showSnackbar('API Key Successfully Generated', false)\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:generateApiKey] - ' + e)\n            // helpers.showFlash('Error: ' + e, true);\n            helpers.UI.showSnackbar('Error: Unable to generate API Key!', true)\n          })\n      }\n\n      $scope.removeApiKey = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n\n        $http\n          .post('/api/v1/users/' + id + '/removeapikey')\n          .success(function () {\n            $('#aApiKey').val('')\n            $('.generateApiButton').removeClass('hide')\n            $('.removeApiButton').addClass('hide')\n            helpers.UI.showSnackbar('API Key Successfully Revoked', false)\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:removeApiKey]', e)\n            helpers.UI.showSnackbar('Error: Unable to remove API Key!', true)\n          })\n      }\n\n      $scope.otpChange = function (event) {\n        var $totpSettings = $('.totp-settings-wrap')\n        var $totpPanel = $totpSettings.find('.panel-body2')\n        var $tOTPKey = $totpSettings.find('#tOTPKey')\n        var $qrCode = $totpSettings.find('#totp-qrcode')\n        event.preventDefault()\n\n        if ($scope.otpEnabled) {\n          UIKit.modal.confirm(\n            '<span style=\"font-size: 16px; color: #FF9800;\">WARNING: Disabling Two Factor Authentication will remove your shared secret. A new key will generate when re-enabled.</span><br />' +\n              'Are you sure you want to disable two factor authentication?',\n            function () {\n              removeL2Auth(function (err) {\n                if (err) {\n                  $log.error(err)\n                }\n\n                angular.element(event.target).attr('checked', false)\n                $totpPanel.slideUp(400, function () {\n                  $totpPanel.css({ overflow: 'hidden', margin: 0 })\n                  $qrCode.find('canvas').remove()\n                  $tOTPKey.val()\n                  $timeout(function () {\n                    $scope.otpEnabled = false\n                  }, 0)\n                })\n              })\n            },\n            {\n              labels: { Ok: 'Yes', Cancel: 'No' }\n            }\n          )\n        } else {\n          generateL2Auth(function (err, key) {\n            if (err) {\n              $log.error(err)\n              helpers.UI.showSnackbar('An unknown error occurred. Check console.', true)\n              return\n            }\n\n            $timeout(function () {\n              $scope.otpEnabled = true\n              angular.element(event.target).prop('checked', true)\n            }, 0)\n\n            var host = $('div[data-host]').attr('data-host')\n            var username = SessionService.getUser().username\n            var qrKey =\n              'otpauth://totp/' +\n              host +\n              '-' +\n              username +\n              ':' +\n              host +\n              '-' +\n              username +\n              '?secret=' +\n              key +\n              '&issuer=Trudesk'\n            $qrCode.qrcode({ width: 242, height: 242, text: qrKey })\n            $tOTPKey.val(key)\n            $totpPanel.css({ margin: '10px 7px 7px 7px' })\n            $totpPanel.find('input').removeClass('hide')\n            $totpPanel.removeClass('hide')\n            fixInputLabels()\n            $totpPanel.slideDown()\n            // }\n          })\n        }\n      }\n\n      function generateL2Auth (completed) {\n        var id = SessionService.getUser()._id\n        if (_.isUndefined(id)) {\n          return helpers.UI.showSnackbar('Unable to get user ID.', true)\n        }\n\n        $http.post('/api/v1/users/' + id + '/generatel2auth').then(\n          function success (response) {\n            if (!response.data.success) {\n              helpers.UI.showSnackbar('Error: Unknown error has occurred.', true)\n              if (_.isFunction(completed)) {\n                return completed('Error: Unknown error has occurred.')\n              }\n            } else {\n              // Success\n              if (_.isFunction(completed)) {\n                completed(null, response.data.generatedKey)\n              }\n            }\n          },\n          function error (err) {\n            $log.error('[trudesk:profile:generateL2Auth]')\n            $log.error(err)\n            helpers.UI.showSnackbar('Error: Could not generate new secret! Check Console', true)\n            if (_.isFunction(completed)) {\n              completed(err)\n            }\n          }\n        )\n      }\n\n      function removeL2Auth (completed) {\n        var id = SessionService.getUser()._id\n        if (_.isUndefined(id)) {\n          return helpers.UI.showSnackbar('Unable to get user ID.', true)\n        }\n\n        $http\n          .post('/api/v1/users/' + id + '/removel2auth')\n          .success(function () {\n            if (_.isFunction(completed)) {\n              completed()\n            }\n          })\n          .error(function (e) {\n            $log.error('[trudesk:profile:removeL2Auth]')\n            $log.error(e)\n            helpers.UI.showSnackbar('Error: Could not remove. Check Console', true)\n            if (_.isFunction(completed)) {\n              completed(e)\n            }\n          })\n      }\n\n      function getFormData () {\n        var data = {}\n        data.username = $('#aUsername').val()\n        data.fullname = $('#aFullname').val()\n        data.password = $('#aPass').val()\n        data.cPassword = $('#aPassConfirm').val()\n        data.email = $('#aEmail').val()\n\n        return data\n      }\n\n      function resetForm () {\n        $('#aPass').val('')\n        $('#aPassConfirm').val('')\n      }\n    })\n})\n", "<div data-user_id=\"{{data.account._id}}\" class=\"hide\"></div>\n<div data-host=\"{{data.host}}\" class=\"hide\"></div>\n<div class=\"grid grid-collapse page-content no-border-top\" ng-controller=\"profileCtrl\"\n    ng-init=\"\n\n    otpEnabled={{#isNotNull data.account.tOTPKey}}true{{else}}false{{/isNotNull}};\n\n    init();\n\">\n\n    <div class=\"page-title uk-width-1-1 noshadow page-title-border-bottom\">\n        <p class=\"left\">{{data.account.fullname}}</p>\n        <div class=\"right\" style=\"margin: 15px 15px 0 0;\">\n            <!--<button class=\"md-btn md-btn-white md-btn-flat-primary md-btn-wave md-btn-wave-light md-btn-small\" ng-click=\"showTour();\">Show Tour</button>-->\n        </div>\n    </div>\n    <!--Content Here-->\n    <div class=\"page-wrapper scrollable no-overflow-x full-height\">\n        <div id=\"page-content-inner\" class=\"uk-grid\">\n            <div class=\"uk-width-1-1 relative\">\n                <div class=\"profilePicFormWrap no-touch uk-width-1-1 uk-float-left\">\n                    <form id=\"aUploadImageForm\" class=\"form nomargin uk-clearfix\" enctype=\"multipart/form-data\">\n                        <input type=\"hidden\" name=\"_id\" value=\"{{data.account._id}}\" />\n                        <input type=\"hidden\" name=\"username\" value=\"{{data.account.username}}\" />\n                        <div class=\"largeProfilePic cursor-pointer hoverEffect\" style=\"position: absolute; left: 35px; top: 0;\" onclick=\"onProfileImageClick()\">\n                            <input id=\"profileImageInput\" name=\"aProfile_{{data.account.username}}\" type=\"file\" value=\"{{data.account.image}}\" style=\"visibility: hidden; height: 0; width: 0\" />\n                            {{#if data.account.image}}\n                                <img id=\"profileImage\" data-userid=\"{{data.account._id}}\" src=\"/uploads/users/{{data.account.image}}\" alt=\"{{data.account.username}}\"/>\n                            {{else}}\n                                <img id=\"profileImage\" data-userid=\"{{data.account._id}}\" src=\"/uploads/users/defaultProfile.jpg\" alt=\"{{data.account.username}}\"/>\n                            {{/if}}\n                            <div class=\"img-caption\">\n                                <h3>Upload Profile Image</h3>\n                                <span>Image must be square and at least 256x256</span>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n\n                <div class=\"totp-settings-wrap uk-float-left\" style=\"min-width: 256px; margin-top: 275px;\">\n                    <div class=\"panel trupanel nopadding no-hover-shadow uk-overflow-hidden\">\n                        <div class=\"left\">\n                            <h6 style=\"padding: 0 0 0 15px; margin: 15px 0 0 0; font-size: 12px; line-height: 10px;\">Two Factor Authentication</h6>\n                            <h5 style=\"padding: 0 0 10px 15px; margin: 2px 0 0 0; font-size: 10px;\" class=\"uk-text-muted\">\n                                Extra account security.\n                            </h5>\n                        </div>\n                        <div class=\"right\" style=\"position:relative;\">\n                            <!-- Switch -->\n                            <div class=\"md-switch md-green\" style=\"margin: 20px 0 0 0;\">\n                                <label>\n                                    <input id=\"tpsEnabled\" name=\"tpsEnabled\" type=\"checkbox\" ng-model=\"otpEnabled\" ng-click=\"otpChange($event)\">\n                                    <span class=\"lever\"></span>\n                                </label>\n                            </div>\n                        </div>\n                        <hr class=\"nomargin-top clear\">\n                        <div class=\"panel-body2\" style=\"margin: 10px 7px 7px 7px;\">\n                            <div class=\"uk-margin-small-bottom\">\n                                <label for=\"tOTPKey\" style=\"color:#727272;\">Shared Key</label>\n                                <input id=\"tOTPKey\" type=\"text\" class=\"md-input md-input-width-medium\" value=\"{{data.account.tOTPKey}}\" disabled />\n                            </div>\n                            <div id=\"totp-qrcode\"\n                                 data-hasKey=\"{{#isNotNull data.account.tOTPKey}}true{{else}}false{{/isNotNull}}\"\n                                 data-totpkey=\"otpauth://totp/{{data.host}}-{{data.account.username}}:{{data.host}}-{{data.account.username}}?secret={{data.account.tOTPKey}}&issuer=Trudesk\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <form id=\"updateProfileForm\" class=\"uk-form-stacked\" action=\"\" method=\"POST\">\n                    <input name=\"aId\" type=\"hidden\" value=\"{{data.account._id}}\" />\n                    <div style=\"margin-left: 285px;\">\n                        <div class=\"profile-item-wrap uk-margin-medium-bottom\">\n                            <div class=\"panel trupanel nopadding no-hover-shadow uk-overflow-hidden\" style=\"min-height: 60px; height: auto;\">\n                                <div>\n                                    <h6 style=\"padding: 0 0 0 15px; margin: 15px 0 0 0; font-size: 16px; line-height: 14px;\">User Information</h6>\n                                    <h5 style=\"padding: 0 0 10px 15px; margin: 2px 0 0 0; font-size: 12px;\" class=\"uk-text-muted\">\n                                        Your profile information.\n                                    </h5>\n                                </div>\n                                <hr class=\"nomargin-top\">\n                                <div class=\"panel-body2\" style=\"padding: 20px 15px 15px 15px;\">\n                                    <div class=\"\">\n                                        <div class=\"uk-margin-medium-bottom\">\n                                            <label for=\"aUsername\" style=\"color: #727272;\">Username</label>\n                                            <input id=\"aUsername\" class=\"md-input md-input-width-medium\" name=\"aUsername\" type=\"text\" disabled value=\"{{data.account.username}}\" />\n                                        </div>\n                                        <div class=\"uk-margin-medium-bottom\">\n                                            <label for=\"aFullname\">Name</label>\n                                            <input id=\"aFullname\" class=\"md-input md-input-width-medium\" name=\"aFullname\" type=\"text\" value=\"{{data.account.fullname}}\" />\n                                        </div>\n                                        <div class=\"uk-margin-medium-bottom\">\n                                            <label for=\"aPass\">Password</label>\n                                            <input id=\"aPass\" class=\"md-input\" name=\"aPass\" type=\"password\" data-validation=\"length\" data-validation-length=\"max255\" data-validation-error-msg=\"Password too long. Maximum length is 25 characters.\" />\n                                        </div>\n                                        <div class=\"uk-margin-medium-bottom\">\n                                            <label for=\"aPassConfirm\">Confirm Password</label>\n                                            <input id=\"aPassConfirm\" class=\"md-input\" name=\"aPassConfirm\" type=\"password\" data-validation=\"length\" data-validation-length=\"max255\" data-validation-error-msg=\"Password too long. Maximum length is 25 characters.\" />\n                                        </div>\n                                        <div class=\"uk-margin-medium-bottom\">\n                                            <label for=\"aEmail\">Email</label>\n                                            <input id=\"aEmail\" class=\"md-input\" name=\"aEmail\" type=\"email\" value=\"{{data.account.email}}\" data-validation=\"email\" data-validation-error-msg=\"Please enter a valid email address.\"/>\n                                        </div>\n                                        <div class=\"uk-clearfix\">\n                                            <button type=\"submit\" class=\"uk-float-right md-btn md-btn-small md-btn-success md-btn-wave-light\" ng-click=\"updateUser($event)\">Save</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"profile-item-wrap uk-margin-medium-bottom\">\n                            <div class=\"panel trupanel nopadding no-hover-shadow uk-overflow-hidden\" style=\"min-height: 60px; height: auto;\">\n                                <div class=\"left\">\n                                    <h6 style=\"padding: 0 0 0 15px; margin: 15px 0 0 0; font-size: 16px; line-height: 14px;\">Mobile API Token</h6>\n                                    <h5 style=\"padding: 0 0 10px 15px; margin: 2px 0 0 0; font-size: 12px;\" class=\"uk-text-muted\">\n                                        API Token for the trudesk mobile app.\n                                    </h5>\n                                </div>\n                                <div class=\"right\" style=\"position:relative; padding: 15px;\">\n                                    <button\n                                            type=\"button\"\n                                            class=\"uk-float-right md-btn md-btn-small md-btn-danger md-btn-wave-light removeApiButton {{#unless data.account.accessToken}} hide {{/unless}}\"\n                                            ng-click=\"removeApiKey($event)\">Remove Token\n                                    </button>\n                                    <button\n                                            type=\"button\"\n                                            class=\"uk-float-right md-btn md-btn-small md-btn-success md-btn-wave-light generateApiButton {{#if data.account.accessToken}} hide {{/if}}\"\n                                            ng-click=\"generateApiKey($event)\">Generate Token\n                                    </button>\n                                </div>\n                                <hr class=\"nomargin-top clear\">\n                                <div class=\"panel-body2\" style=\"padding: 20px 15px 15px 15px\">\n                                    <div class=\"uk-margin-medium-bottom\">\n                                        <label for=\"aApiKey\" style=\"color: #727272;\">API Token</label>\n                                        <input type=\"text\" id=\"aApiKey\" class=\"md-input\" name=\"aApiKey\" value=\"{{data.account.accessToken}}\" readonly>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n{{#contentFor 'js-plugins'}}\n    <script type=\"text/javascript\">\n        function onProfileImageClick() {\n            document.getElementById('profileImageInput').click()\n        }\n    </script>\n{{/contentFor}}"], "filenames": ["src/models/user.js", "src/public/js/angularjs/controllers/profile.js", "src/views/subviews/profile.hbs"], "buggy_code_start_loc": [102, 47, 95], "buggy_code_end_loc": [102, 53, 104], "fixing_code_start_loc": [103, 48, 95], "fixing_code_end_loc": [105, 73, 104], "type": "CWE-190", "message": "Integer Overflow or Wraparound in GitHub repository polonel/trudesk prior to 1.2.2.", "other": {"cve": {"id": "CVE-2022-1754", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-20T07:15:09.447", "lastModified": "2022-05-26T20:05:28.413", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Integer Overflow or Wraparound in GitHub repository polonel/trudesk prior to 1.2.2."}, {"lang": "es", "value": "Un Desbordamiento de Enteros o Wraparound en el repositorio de GitHub polonel/trudesk versiones anteriores a 1.2.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.7, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:trudesk_project:trudesk:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.2", "matchCriteriaId": "129D9FED-E43F-47B1-8FB3-012D00E93181"}]}]}], "references": [{"url": "https://github.com/polonel/trudesk/commit/e836d04d16787c2c9c72e7bf011cf396d1f73c19", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/2f65af7c-a74b-46a6-8847-5db6785f1cf2", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/polonel/trudesk/commit/e836d04d16787c2c9c72e7bf011cf396d1f73c19"}}