{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.administration.test.ui;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport javax.mail.Address;\nimport javax.mail.BodyPart;\nimport javax.mail.Multipart;\nimport javax.mail.internet.MimeMessage;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.administration.test.po.ResetPasswordCompletePage;\nimport org.xwiki.administration.test.po.ResetPasswordPage;\nimport org.xwiki.test.docker.junit5.TestConfiguration;\nimport org.xwiki.test.docker.junit5.UITest;\nimport org.xwiki.test.integration.junit.LogCaptureConfiguration;\nimport org.xwiki.test.ui.TestUtils;\nimport org.xwiki.test.ui.po.LoginPage;\n\nimport com.icegreen.greenmail.util.GreenMail;\nimport com.icegreen.greenmail.util.ServerSetupTest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Verify the Reset Password feature.\n *\n * @version $Id$\n * @since 7.0M2\n */\n@UITest(sshPorts = {\n    // Open the GreenMail port so that the XWiki instance inside a Docker container can use the SMTP server provided\n    // by GreenMail running on the host.\n    3025\n},\n    properties = {\n        // The Mail module contributes a Hibernate mapping that needs to be added to hibernate.cfg.xml\n        \"xwikiDbHbmCommonExtraMappings=mailsender.hbm.xml\",\n        // Pages created in the tests need to have PR since we ask for PR to send mails so we need to exclude them from\n        // the PR checker.\n        \"xwikiPropertiesAdditionalProperties=test.prchecker.excludePattern=.*:XWiki\\\\.ResetPassword|.*:XWiki\\\\.ResetPasswordComplete\"\n    },\n    extraJARs = {\n        // It's currently not possible to install a JAR contributing a Hibernate mapping file as an Extension. Thus\n        // we need to provide the JAR inside WEB-INF/lib. See https://jira.xwiki.org/browse/XWIKI-8271\n        \"org.xwiki.platform:xwiki-platform-mail-send-storage\"\n    }\n)\npublic class ResetPasswordIT\n{\n    private GreenMail mail;\n\n    @BeforeEach\n    public void startMail(TestUtils setup, TestConfiguration testConfiguration)\n    {\n        this.mail = new GreenMail(ServerSetupTest.SMTP);\n        this.mail.start();\n\n        configureEmail(setup, testConfiguration);\n    }\n\n    @AfterEach\n    public void stopMail(TestUtils setup, LogCaptureConfiguration logCaptureConfiguration)\n    {\n        if (this.mail != null) {\n            this.mail.stop();\n        }\n\n        restoreSettings(setup);\n        logCaptureConfiguration.registerExcludes(\"CSRFToken: Secret token verification failed, token\");\n    }\n\n    @Test\n    public void resetForgottenPassword(TestUtils setup) throws Exception\n    {\n        setup.loginAsSuperAdmin();\n\n        String userName = \"testUser\" + RandomStringUtils.randomAlphanumeric(6);\n        String password = \"password\";\n        String newPassword = \"newPassword\";\n\n        // Create a user\n        setup.createUser(userName, password, null);\n\n        // Make sure we are not logged in and go to the reset password page\n        setup.forceGuestUser();\n        ResetPasswordPage resetPasswordPage = ResetPasswordPage.gotoPage();\n\n        // Try to reset the password of a non existent user\n        resetPasswordPage.setUserName(\"SomeUserThatDoesNotExist\");\n        resetPasswordPage = resetPasswordPage.clickResetPassword();\n        assertFalse(resetPasswordPage.isResetPasswordSent());\n        assertTrue(resetPasswordPage.getMessage().contains(\"user does not exist\"));\n\n        // Try again\n        resetPasswordPage = resetPasswordPage.clickRetry();\n\n        // Try to reset the password of our user, when he has no email set\n        resetPasswordPage.setUserName(userName);\n        resetPasswordPage.clickResetPassword();\n        assertFalse(resetPasswordPage.isResetPasswordSent());\n        assertTrue(resetPasswordPage.getMessage().contains(\"email address not provided\"));\n\n        // Try again. This time, set the user's email address in the profile\n        setup.loginAsSuperAdmin();\n        setup.updateObject(\"XWiki\", userName, \"XWiki.XWikiUsers\", 0, \"email\", \"foo@bar.com\", \"form_token\",\n            setup.getSecretToken());\n        setup.forceGuestUser();\n\n        // Actually reset the user's password\n        resetPasswordPage = ResetPasswordPage.gotoPage();\n        resetPasswordPage.setUserName(userName);\n        resetPasswordPage.clickResetPassword();\n\n        // Check the result\n        assertTrue(resetPasswordPage.isResetPasswordSent());\n        // Check the emails received by the user\n        assertTrue(this.mail.waitForIncomingEmail(1));\n        MimeMessage[] receivedEmails = this.mail.getReceivedMessages();\n        assertEquals(1, receivedEmails.length);\n        MimeMessage receivedEmail = receivedEmails[0];\n        assertEquals(\"Password reset request for \" + userName, receivedEmail.getSubject());\n        String receivedMailContent = getMessageContent(receivedEmail).get(\"textPart\");\n        String passwordResetLink = getResetLink(receivedMailContent, \"xwiki%3AXWiki.\" + userName);\n        assertNotNull(passwordResetLink);\n\n        // Use the password reset link\n        setup.gotoPage(passwordResetLink);\n        // We should now be on the ResetPasswordComplete page\n        ResetPasswordCompletePage resetPasswordCompletePage = new ResetPasswordCompletePage();\n        // Check that the link was valid\n        assertTrue(resetPasswordCompletePage.isResetLinkValid());\n        resetPasswordCompletePage.setPassword(newPassword);\n        resetPasswordCompletePage.setPasswordConfirmation(newPassword);\n        resetPasswordCompletePage = resetPasswordCompletePage.clickSave();\n\n        // Check the result\n        assertTrue(resetPasswordCompletePage.isPasswordSuccessfullyReset());\n        LoginPage loginPage = resetPasswordCompletePage.clickLogin();\n\n        // Check the new password\n        loginPage.loginAs(userName, newPassword);\n        assertEquals(userName, setup.getLoggedInUserName());\n    }\n\n    private Map<String, String> getMessageContent(MimeMessage message) throws Exception\n    {\n        Map<String, String> messageMap = new HashMap<>();\n\n        Address[] addresses = message.getAllRecipients();\n        assertTrue(addresses.length == 1);\n        messageMap.put(\"recipient\", addresses[0].toString());\n\n        messageMap.put(\"subjectLine\", message.getSubject());\n\n        Multipart mp = (Multipart) message.getContent();\n\n        BodyPart plain = getPart(mp, \"text/plain\");\n        if (plain != null) {\n            messageMap.put(\"textPart\", IOUtils.toString(plain.getInputStream(), \"UTF-8\"));\n        }\n        BodyPart html = getPart(mp, \"text/html\");\n        if (html != null) {\n            messageMap.put(\"htmlPart\", IOUtils.toString(html.getInputStream(), \"UTF-8\"));\n        }\n\n        return messageMap;\n    }\n\n    private BodyPart getPart(Multipart messageContent, String mimeType) throws Exception\n    {\n        for (int i = 0; i < messageContent.getCount(); i++) {\n            BodyPart part = messageContent.getBodyPart(i);\n\n            if (part.isMimeType(mimeType)) {\n                return part;\n            }\n\n            if (part.isMimeType(\"multipart/related\") || part.isMimeType(\"multipart/alternative\")\n                || part.isMimeType(\"multipart/mixed\"))\n            {\n                BodyPart out = getPart((Multipart) part.getContent(), mimeType);\n                if (out != null) {\n                    return out;\n                }\n            }\n        }\n        return null;\n    }\n\n    private String getResetLink(String emailContent, String userName)\n    {\n        String result = null;\n\n        // Use a regex to extract the password reset link\n        Pattern resetLinkPattern = Pattern.compile(\"http[^\\\\s]+?authenticate/reset\\\\?u=\" + userName + \"\\\\&v=\\\\w+\");\n        Matcher matcher = resetLinkPattern.matcher(emailContent);\n        if (matcher.find()) {\n            result = matcher.group();\n        }\n\n        return result;\n    }\n\n    private void configureEmail(TestUtils setup, TestConfiguration testConfiguration)\n    {\n        setup.updateObject(\"Mail\", \"MailConfig\", \"Mail.SendMailConfigClass\", 0, \"host\",\n            testConfiguration.getServletEngine().getHostIP(), \"port\", \"3025\", \"sendWaitTime\", \"0\");\n    }\n\n    private void restoreSettings(TestUtils setup)\n    {\n        // Make sure we can restore the settings, so we log back with superadmin to finish the work\n        setup.loginAsSuperAdmin();\n\n        // Remove the previous version that the setup has created.\n        setup.deleteLatestVersion(\"Mail\", \"MailConfig\");\n    }\n}\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n\n#**\n This page starts the password reset procedure. It works according to the next algorithm:\n 1. Display a form requesting the username\n 2. When receiving the username via form submission, generate a random verification string which is stored (as a hash) inside a ResetPasswordRequestClass object attached to the user's profile page. If no such object exists, it is created, but an existing object will be reused, meaning that at most one password reset request can be active at a moment.\n 3. Send an email to the address configured in the user's profile, containing a link to the second step of the password reset procedure.\n\n URL parameters:\n\n u = user account sent in the form\n *###\n##\n##\n\n#template(\"register_macros.vm\")\n#macro(resetPasswordBoxStart $panelClass)\n#if (\"$!panelClass\" == \"\")\n  #set ($panelClass = \"default\")\n#end\n<div class=\"centered panel panel-$panelClass xwikimessage panel-body\">\n  <div class=\"panel-heading\">\n    <div class=\"panel-title\">$services.localization.render('xe.admin.passwordReset.title')</div>\n  </div>\n  <div class=\"panel-body\">\n#end\n#macro(displayResetPasswordException)\n    #set ($causeException = $exception.cause)\n    #if ($causeException.class == 'class org.xwiki.security.authentication.api.ResetPasswordException'\n        && $causeException.cause == $causeException)\n      <div class=\"xwikirenderingerror\">\n          $escapetool.xml($causeException.message)\n      </div>\n    #else\n        #displayException($escapetool.xml($causeException.message))\n    #end\n#end\n\n#set ($userName = \"$!request.get('u')\")\n#set ($validationString = \"$!request.get('v')\")\n## First step, display the form requesting the username\n#if (($userName == '' && $validationString == ''))\n#resetPasswordBoxStart(\"default\")\n$services.localization.render('xe.admin.passwordReset.instructions')\n\n<form method=\"post\" action=\"$services.security.authentication.getAuthenticationURL('reset', $NULL)\" class=\"xformInline\" id=\"resetPasswordForm\">\n    <div>\n        <input type=\"hidden\" name=\"form_token\" value=\"$!{services.csrf.getToken()}\" />\n        <label for=\"u\">$services.localization.render('xe.admin.passwordReset.username.label')</label>\n        <input type=\"text\" id=\"u\" name=\"u\"/>\n        <span class=\"buttonwrapper\">\n            <input type=\"submit\" value=\"$services.localization.render('xe.admin.passwordReset.submit')\" class=\"button\"/>\n        </span>\n    </div>\n</form>\n#elseif ($userName != '' && $validationString == '')\n    #if (!$services.csrf.isTokenValid($request.form_token))\n        #resetPasswordBoxStart(\"danger\")\n        $services.localization.render('xe.admin.passwordReset.error.csrf')\n    #else\n        #try()\n            #set ($email = $services.security.authentication.requestResetPassword($userName))\n        #end\n        #if (\"$!exception\" != '')\n            #resetPasswordBoxStart(\"warning\")\n            #displayResetPasswordException()\n        #else\n            #resetPasswordBoxStart(\"default\")\n            $services.localization.render('xe.admin.passwordReset.emailSent', [\"$email\"])\n        #end\n    #end\n  <div>\n      <a href=\"$services.security.authentication.getAuthenticationURL('reset', $NULL)\">$services.localization.render('xe.admin.passwordReset.error.retry')</a> |\n      <a href=\"$xwiki.getURL('XWiki.ForgotUsername')\">$services.localization.render('xe.admin.passwordReset.error.recoverUsername')</a> |\n      <a href=\"$xwiki.getURL('XWiki.XWikiLogin', 'login')\">$services.localization.render('xe.admin.passwordReset.login')</a>\n  </div>\n#else\n    ##\n    ##\n    #**\n     * Displays the password reset form.\n     * @param message An optional message to display, for example if the sent password is empty.\n     * @param u The user account (full document name), which needs to be preserved.\n     * @param v The validation string, which will be checked again upon receiving the form.\n     *###\n    #macro(displayForm $message $validationString)\n        #if ($message != '')\n            #resetPasswordBoxStart('warning')\n            $message\n        #else\n            #resetPasswordBoxStart('default')\n        #end\n        ## Load the configuration from a seperate document.\n        #loadConfig('XWiki.RegistrationConfig')\n        #set ($passwordFields = [])\n        #definePasswordFields($passwordFields, 'p', 'p2', $passwordOptions)\n\n        <form action=\"$services.security.authentication.getAuthenticationURL('reset', $NULL)\" method=\"post\" id=\"resetPasswordStep2Form\" class=\"xform third\">\n            <div class=\"hidden\">\n                <input type=\"hidden\" name=\"form_token\" value=\"$!{services.csrf.getToken()}\" />\n                <input type=\"hidden\" name=\"u\" value=\"$!escapetool.xml($userName)\"/>\n                <input type=\"hidden\" name=\"v\" value=\"$!escapetool.xml($validationString)\"/>\n            </div>\n            ## A null $request is passed as parameter, since we won't display inserted passwords after a request with error.\n            #generateHtml($passwordFields, $NULL)\n            <div class=\"buttons\">\n                <span class=\"buttonwrapper\"><input type=\"submit\" value=\"$services.localization.render('xe.admin.passwordReset.step2.submit')\" class=\"button\"/></span>\n            </div>\n        </form>\n    #end\n    #set ($password = \"$!request.p\")\n    #set ($password2 = \"$!request.p2\")\n    #if (!$request.getParameterMap().containsKey('p'))\n        #try()\n            #set ($newValidationString = $services.security.authentication.checkVerificationCode($userName, $validationString))\n        #end\n        #if (\"$!exception\" != '')\n            #resetPasswordBoxStart(\"danger\")\n            #displayResetPasswordException()\n            <a href=\"$services.security.authentication.getAuthenticationURL('reset', $NULL)\">$services.localization.render('xe.admin.passwordReset.step2.backToStep1')</a>\n        #else\n            #displayForm('' $newValidationString)\n        #end\n    #elseif (!$services.csrf.isTokenValid($request.form_token))\n        #resetPasswordBoxStart(\"danger\")\n        $request.form_token\n        $services.localization.render('xe.admin.passwordReset.error.csrf')\n    #else\n        #validateFields($passwordFields, $request)\n        #if (!$allFieldsValid)\n            #displayForm($stringtool.join($allFieldsErrors, \"<br/>\") $validationString)\n        #else\n            #try()\n                #set($discard = $services.security.authentication.resetPassword($userName, $validationString, $password))\n            #end\n            #if (\"$!exception\" != '')\n                #resetPasswordBoxStart(\"danger\")\n                #displayResetPasswordException()\n                <a href=\"$services.security.authentication.getAuthenticationURL('reset', $NULL)\">$services.localization.render('xe.admin.passwordReset.step2.backToStep1')</a>\n            #else\n                #resetPasswordBoxStart(\"success\")\n                $services.localization.render('xe.admin.passwordReset.step2.success')\n              <a href=\"$xwiki.getURL('XWiki.XWikiLogin', 'login')\">$services.localization.render('xe.admin.passwordReset.step2.login')</a>\n            #end\n        #end\n    #end\n    #set ($newValidationString = '')\n    #set ($validationString = '')\n    #set ($password = '')\n    #set ($password2 = '')\n#end\n#xwikimessageboxend()"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.administration.test.ui;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport javax.mail.Address;\nimport javax.mail.BodyPart;\nimport javax.mail.Multipart;\nimport javax.mail.internet.MimeMessage;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.administration.test.po.ResetPasswordCompletePage;\nimport org.xwiki.administration.test.po.ResetPasswordPage;\nimport org.xwiki.test.docker.junit5.TestConfiguration;\nimport org.xwiki.test.docker.junit5.UITest;\nimport org.xwiki.test.integration.junit.LogCaptureConfiguration;\nimport org.xwiki.test.ui.TestUtils;\nimport org.xwiki.test.ui.po.LoginPage;\n\nimport com.icegreen.greenmail.util.GreenMail;\nimport com.icegreen.greenmail.util.ServerSetupTest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Verify the Reset Password feature.\n *\n * @version $Id$\n * @since 7.0M2\n */\n@UITest(sshPorts = {\n    // Open the GreenMail port so that the XWiki instance inside a Docker container can use the SMTP server provided\n    // by GreenMail running on the host.\n    3025\n},\n    properties = {\n        // The Mail module contributes a Hibernate mapping that needs to be added to hibernate.cfg.xml\n        \"xwikiDbHbmCommonExtraMappings=mailsender.hbm.xml\",\n        // Pages created in the tests need to have PR since we ask for PR to send mails so we need to exclude them from\n        // the PR checker.\n        \"xwikiPropertiesAdditionalProperties=test.prchecker.excludePattern=.*:XWiki\\\\.ResetPassword|.*:XWiki\\\\.ResetPasswordComplete\"\n    },\n    extraJARs = {\n        // It's currently not possible to install a JAR contributing a Hibernate mapping file as an Extension. Thus\n        // we need to provide the JAR inside WEB-INF/lib. See https://jira.xwiki.org/browse/XWIKI-8271\n        \"org.xwiki.platform:xwiki-platform-mail-send-storage\"\n    }\n)\npublic class ResetPasswordIT\n{\n    private GreenMail mail;\n\n    @BeforeEach\n    public void startMail(TestUtils setup, TestConfiguration testConfiguration)\n    {\n        this.mail = new GreenMail(ServerSetupTest.SMTP);\n        this.mail.start();\n\n        configureEmail(setup, testConfiguration);\n    }\n\n    @AfterEach\n    public void stopMail(TestUtils setup, LogCaptureConfiguration logCaptureConfiguration)\n    {\n        if (this.mail != null) {\n            this.mail.stop();\n        }\n\n        restoreSettings(setup);\n        logCaptureConfiguration.registerExcludes(\"CSRFToken: Secret token verification failed, token\");\n    }\n\n    @Test\n    public void resetForgottenPassword(TestUtils setup) throws Exception\n    {\n        setup.loginAsSuperAdmin();\n\n        String userName = \"testUser\" + RandomStringUtils.randomAlphanumeric(6);\n        String password = \"password\";\n        String newPassword = \"newPassword\";\n\n        // Create a user\n        setup.createUser(userName, password, null);\n\n        // Make sure we are not logged in and go to the reset password page\n        setup.forceGuestUser();\n        ResetPasswordPage resetPasswordPage = ResetPasswordPage.gotoPage();\n\n        // Try to reset the password of a non existent user\n        resetPasswordPage.setUserName(\"SomeUserThatDoesNotExist\");\n        resetPasswordPage = resetPasswordPage.clickResetPassword();\n        assertFalse(resetPasswordPage.isResetPasswordSent());\n        assertTrue(resetPasswordPage.getMessage().contains(\"user does not exist\"));\n\n        // Try again\n        resetPasswordPage = resetPasswordPage.clickRetry();\n\n        // Try to reset the password of our user, when he has no email set\n        resetPasswordPage.setUserName(userName);\n        resetPasswordPage.clickResetPassword();\n        assertFalse(resetPasswordPage.isResetPasswordSent());\n        assertTrue(resetPasswordPage.getMessage().contains(\"email address not provided\"));\n\n        // Try again. This time, set the user's email address in the profile\n        setup.loginAsSuperAdmin();\n        setup.updateObject(\"XWiki\", userName, \"XWiki.XWikiUsers\", 0, \"email\", \"foo@bar.com\", \"form_token\",\n            setup.getSecretToken());\n        setup.forceGuestUser();\n\n        // Actually reset the user's password\n        resetPasswordPage = ResetPasswordPage.gotoPage();\n        resetPasswordPage.setUserName(userName);\n        ResetPasswordPage newResetPasswordPage = resetPasswordPage.clickResetPassword();\n        assertTrue(newResetPasswordPage.getMessage().contains(\"An e-mail was sent\"),\n            \"Actual message: \" + newResetPasswordPage.getMessage());\n        assertFalse(newResetPasswordPage.getMessage().contains(\"foo@bar.com\"),\n            \"Actual message: \" + newResetPasswordPage.getMessage());\n\n        // Check the result\n        assertTrue(resetPasswordPage.isResetPasswordSent());\n        // Check the emails received by the user\n        assertTrue(this.mail.waitForIncomingEmail(1));\n        MimeMessage[] receivedEmails = this.mail.getReceivedMessages();\n        assertEquals(1, receivedEmails.length);\n        MimeMessage receivedEmail = receivedEmails[0];\n        assertEquals(\"Password reset request for \" + userName, receivedEmail.getSubject());\n        String receivedMailContent = getMessageContent(receivedEmail).get(\"textPart\");\n        String passwordResetLink = getResetLink(receivedMailContent, \"xwiki%3AXWiki.\" + userName);\n        assertNotNull(passwordResetLink);\n\n        // Use the password reset link\n        setup.gotoPage(passwordResetLink);\n        // We should now be on the ResetPasswordComplete page\n        ResetPasswordCompletePage resetPasswordCompletePage = new ResetPasswordCompletePage();\n        // Check that the link was valid\n        assertTrue(resetPasswordCompletePage.isResetLinkValid());\n        resetPasswordCompletePage.setPassword(newPassword);\n        resetPasswordCompletePage.setPasswordConfirmation(newPassword);\n        resetPasswordCompletePage = resetPasswordCompletePage.clickSave();\n\n        // Check the result\n        assertTrue(resetPasswordCompletePage.isPasswordSuccessfullyReset());\n        LoginPage loginPage = resetPasswordCompletePage.clickLogin();\n\n        // Check the new password\n        loginPage.loginAs(userName, newPassword);\n        assertEquals(userName, setup.getLoggedInUserName());\n    }\n\n    private Map<String, String> getMessageContent(MimeMessage message) throws Exception\n    {\n        Map<String, String> messageMap = new HashMap<>();\n\n        Address[] addresses = message.getAllRecipients();\n        assertTrue(addresses.length == 1);\n        messageMap.put(\"recipient\", addresses[0].toString());\n\n        messageMap.put(\"subjectLine\", message.getSubject());\n\n        Multipart mp = (Multipart) message.getContent();\n\n        BodyPart plain = getPart(mp, \"text/plain\");\n        if (plain != null) {\n            messageMap.put(\"textPart\", IOUtils.toString(plain.getInputStream(), \"UTF-8\"));\n        }\n        BodyPart html = getPart(mp, \"text/html\");\n        if (html != null) {\n            messageMap.put(\"htmlPart\", IOUtils.toString(html.getInputStream(), \"UTF-8\"));\n        }\n\n        return messageMap;\n    }\n\n    private BodyPart getPart(Multipart messageContent, String mimeType) throws Exception\n    {\n        for (int i = 0; i < messageContent.getCount(); i++) {\n            BodyPart part = messageContent.getBodyPart(i);\n\n            if (part.isMimeType(mimeType)) {\n                return part;\n            }\n\n            if (part.isMimeType(\"multipart/related\") || part.isMimeType(\"multipart/alternative\")\n                || part.isMimeType(\"multipart/mixed\"))\n            {\n                BodyPart out = getPart((Multipart) part.getContent(), mimeType);\n                if (out != null) {\n                    return out;\n                }\n            }\n        }\n        return null;\n    }\n\n    private String getResetLink(String emailContent, String userName)\n    {\n        String result = null;\n\n        // Use a regex to extract the password reset link\n        Pattern resetLinkPattern = Pattern.compile(\"http[^\\\\s]+?authenticate/reset\\\\?u=\" + userName + \"\\\\&v=\\\\w+\");\n        Matcher matcher = resetLinkPattern.matcher(emailContent);\n        if (matcher.find()) {\n            result = matcher.group();\n        }\n\n        return result;\n    }\n\n    private void configureEmail(TestUtils setup, TestConfiguration testConfiguration)\n    {\n        setup.updateObject(\"Mail\", \"MailConfig\", \"Mail.SendMailConfigClass\", 0, \"host\",\n            testConfiguration.getServletEngine().getHostIP(), \"port\", \"3025\", \"sendWaitTime\", \"0\");\n    }\n\n    private void restoreSettings(TestUtils setup)\n    {\n        // Make sure we can restore the settings, so we log back with superadmin to finish the work\n        setup.loginAsSuperAdmin();\n\n        // Remove the previous version that the setup has created.\n        setup.deleteLatestVersion(\"Mail\", \"MailConfig\");\n    }\n}\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n\n#**\n This page starts the password reset procedure. It works according to the next algorithm:\n 1. Display a form requesting the username\n 2. When receiving the username via form submission, generate a random verification string which is stored (as a hash) inside a ResetPasswordRequestClass object attached to the user's profile page. If no such object exists, it is created, but an existing object will be reused, meaning that at most one password reset request can be active at a moment.\n 3. Send an email to the address configured in the user's profile, containing a link to the second step of the password reset procedure.\n\n URL parameters:\n\n u = user account sent in the form\n *###\n##\n##\n\n#template(\"register_macros.vm\")\n#macro(resetPasswordBoxStart $panelClass)\n#if (\"$!panelClass\" == \"\")\n  #set ($panelClass = \"default\")\n#end\n<div class=\"centered panel panel-$panelClass xwikimessage panel-body\">\n  <div class=\"panel-heading\">\n    <div class=\"panel-title\">$services.localization.render('xe.admin.passwordReset.title')</div>\n  </div>\n  <div class=\"panel-body\">\n#end\n#macro(displayResetPasswordException)\n    #set ($causeException = $exception.cause)\n    #if ($causeException.class == 'class org.xwiki.security.authentication.api.ResetPasswordException'\n        && $causeException.cause == $causeException)\n      <div class=\"xwikirenderingerror\">\n          $escapetool.xml($causeException.message)\n      </div>\n    #else\n        #displayException($escapetool.xml($causeException.message))\n    #end\n#end\n\n#set ($userName = \"$!request.get('u')\")\n#set ($validationString = \"$!request.get('v')\")\n## First step, display the form requesting the username\n#if (($userName == '' && $validationString == ''))\n#resetPasswordBoxStart(\"default\")\n$services.localization.render('xe.admin.passwordReset.instructions')\n\n<form method=\"post\" action=\"$services.security.authentication.getAuthenticationURL('reset', $NULL)\" class=\"xformInline\" id=\"resetPasswordForm\">\n    <div>\n        <input type=\"hidden\" name=\"form_token\" value=\"$!{services.csrf.getToken()}\" />\n        <label for=\"u\">$services.localization.render('xe.admin.passwordReset.username.label')</label>\n        <input type=\"text\" id=\"u\" name=\"u\"/>\n        <span class=\"buttonwrapper\">\n            <input type=\"submit\" value=\"$services.localization.render('xe.admin.passwordReset.submit')\" class=\"button\"/>\n        </span>\n    </div>\n</form>\n#elseif ($userName != '' && $validationString == '')\n    #if (!$services.csrf.isTokenValid($request.form_token))\n        #resetPasswordBoxStart(\"danger\")\n        $services.localization.render('xe.admin.passwordReset.error.csrf')\n    #else\n        #try()\n            #set ($email = $services.security.authentication.requestResetPassword($userName))\n        #end\n        #if (\"$!exception\" != '')\n            #resetPasswordBoxStart(\"warning\")\n            #displayResetPasswordException()\n        #else\n            #resetPasswordBoxStart(\"default\")\n            $services.localization.render('xe.admin.passwordReset.emailSent', [\"$services.mail.general.obfuscate($email)\"])\n        #end\n    #end\n  <div>\n      <a href=\"$services.security.authentication.getAuthenticationURL('reset', $NULL)\">$services.localization.render('xe.admin.passwordReset.error.retry')</a> |\n      <a href=\"$xwiki.getURL('XWiki.ForgotUsername')\">$services.localization.render('xe.admin.passwordReset.error.recoverUsername')</a> |\n      <a href=\"$xwiki.getURL('XWiki.XWikiLogin', 'login')\">$services.localization.render('xe.admin.passwordReset.login')</a>\n  </div>\n#else\n    ##\n    ##\n    #**\n     * Displays the password reset form.\n     * @param message An optional message to display, for example if the sent password is empty.\n     * @param u The user account (full document name), which needs to be preserved.\n     * @param v The validation string, which will be checked again upon receiving the form.\n     *###\n    #macro(displayForm $message $validationString)\n        #if ($message != '')\n            #resetPasswordBoxStart('warning')\n            $message\n        #else\n            #resetPasswordBoxStart('default')\n        #end\n        ## Load the configuration from a seperate document.\n        #loadConfig('XWiki.RegistrationConfig')\n        #set ($passwordFields = [])\n        #definePasswordFields($passwordFields, 'p', 'p2', $passwordOptions)\n\n        <form action=\"$services.security.authentication.getAuthenticationURL('reset', $NULL)\" method=\"post\" id=\"resetPasswordStep2Form\" class=\"xform third\">\n            <div class=\"hidden\">\n                <input type=\"hidden\" name=\"form_token\" value=\"$!{services.csrf.getToken()}\" />\n                <input type=\"hidden\" name=\"u\" value=\"$!escapetool.xml($userName)\"/>\n                <input type=\"hidden\" name=\"v\" value=\"$!escapetool.xml($validationString)\"/>\n            </div>\n            ## A null $request is passed as parameter, since we won't display inserted passwords after a request with error.\n            #generateHtml($passwordFields, $NULL)\n            <div class=\"buttons\">\n                <span class=\"buttonwrapper\"><input type=\"submit\" value=\"$services.localization.render('xe.admin.passwordReset.step2.submit')\" class=\"button\"/></span>\n            </div>\n        </form>\n    #end\n    #set ($password = \"$!request.p\")\n    #set ($password2 = \"$!request.p2\")\n    #if (!$request.getParameterMap().containsKey('p'))\n        #try()\n            #set ($newValidationString = $services.security.authentication.checkVerificationCode($userName, $validationString))\n        #end\n        #if (\"$!exception\" != '')\n            #resetPasswordBoxStart(\"danger\")\n            #displayResetPasswordException()\n            <a href=\"$services.security.authentication.getAuthenticationURL('reset', $NULL)\">$services.localization.render('xe.admin.passwordReset.step2.backToStep1')</a>\n        #else\n            #displayForm('' $newValidationString)\n        #end\n    #elseif (!$services.csrf.isTokenValid($request.form_token))\n        #resetPasswordBoxStart(\"danger\")\n        $request.form_token\n        $services.localization.render('xe.admin.passwordReset.error.csrf')\n    #else\n        #validateFields($passwordFields, $request)\n        #if (!$allFieldsValid)\n            #displayForm($stringtool.join($allFieldsErrors, \"<br/>\") $validationString)\n        #else\n            #try()\n                #set($discard = $services.security.authentication.resetPassword($userName, $validationString, $password))\n            #end\n            #if (\"$!exception\" != '')\n                #resetPasswordBoxStart(\"danger\")\n                #displayResetPasswordException()\n                <a href=\"$services.security.authentication.getAuthenticationURL('reset', $NULL)\">$services.localization.render('xe.admin.passwordReset.step2.backToStep1')</a>\n            #else\n                #resetPasswordBoxStart(\"success\")\n                $services.localization.render('xe.admin.passwordReset.step2.success')\n              <a href=\"$xwiki.getURL('XWiki.XWikiLogin', 'login')\">$services.localization.render('xe.admin.passwordReset.step2.login')</a>\n            #end\n        #end\n    #end\n    #set ($newValidationString = '')\n    #set ($validationString = '')\n    #set ($password = '')\n    #set ($password2 = '')\n#end\n#xwikimessageboxend()"], "filenames": ["xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/ResetPasswordIT.java", "xwiki-platform-core/xwiki-platform-web/src/main/webapp/templates/resetpasswordinline.vm"], "buggy_code_start_loc": [141, 87], "buggy_code_end_loc": [142, 88], "fixing_code_start_loc": [141, 87], "fixing_code_end_loc": [146, 88], "type": "CWE-200", "message": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Between (and including) versions 13.1RC1 and 13.1, the reset password form reveals the email address of users just by giving their username. The problem has been patched on XWiki 13.2RC1. As a workaround, it is possible to manually modify the `resetpasswordinline.vm` to perform the changes made to mitigate the vulnerability.", "other": {"cve": {"id": "CVE-2021-32731", "sourceIdentifier": "security-advisories@github.com", "published": "2021-07-01T19:15:07.703", "lastModified": "2022-10-25T15:41:23.360", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Between (and including) versions 13.1RC1 and 13.1, the reset password form reveals the email address of users just by giving their username. The problem has been patched on XWiki 13.2RC1. As a workaround, it is possible to manually modify the `resetpasswordinline.vm` to perform the changes made to mitigate the vulnerability."}, {"lang": "es", "value": "Una plataforma XWiki es una plataforma wiki gen\u00e9rica que ofrece servicios en tiempo de ejecuci\u00f3n para las aplicaciones construidas sobre ella. Entre (e incluyendo) versiones 13.1RC1 y 13.1, el formulario de restablecimiento de contrase\u00f1a revela la direcci\u00f3n de correo electr\u00f3nico de los usuarios con s\u00f3lo dar su nombre de usuario. El problema ha sido parcheado en XWiki versi\u00f3n 13.2RC1. Como soluci\u00f3n, es posible modificar manualmente la plantilla \"resetpasswordinline.vm\" para llevar a cabo los cambios realizados para mitigar la vulnerabilidad"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:13.1:-:*:*:*:*:*:*", "matchCriteriaId": "333C6A66-CDCD-46DC-A095-74D35B076A78"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:13.1:rc1:*:*:*:*:*:*", "matchCriteriaId": "948446E0-E5D0-4711-A763-1A050967EB0D"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/0cf716250b3645a5974c80d8336dcdf885749dff#diff-14a3132e3986b1f5606dd13d9d8a8bb8634bec9932123c5e49e9604cfd850fc2", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-h4m4-pgp4-whgm", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-18400", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/0cf716250b3645a5974c80d8336dcdf885749dff#diff-14a3132e3986b1f5606dd13d9d8a8bb8634bec9932123c5e49e9604cfd850fc2"}}