{"buggy_code": ["<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/ \n * This script is distributed under the GNU General Public License 2 or later. \n *\n * @filesource  index.php\n * @package     TestLink\n * @copyright   2006-2017, TestLink community\n * @link        http://www.testlink.org\n *\n *\n**/\nrequire_once('lib/functions/configCheck.php');\ncheckConfiguration();\nrequire_once('config.inc.php');\nrequire_once('common.php');\ndoSessionStart();\n\n// will be very interesting understand why we do this\nunset($_SESSION['basehref']);  \nsetPaths();\nlist($args,$gui) = initEnv();\n\n// verify the session during a work\n$redir2login = true;\nif( isset($_SESSION['currentUser']) ) {\n  // Session exists we need to do other checks.\n  // we use/copy Mantisbt approach\n  $securityCookie = tlUser::auth_get_current_user_cookie();\n  $redir2login = is_null($securityCookie);\n\n  if(!$redir2login) {\n    // need to get fresh info from db, before asking for securityCookie\n    doDBConnect($db,database::ONERROREXIT);\n    $user = new tlUser();\n    $user->dbID = $_SESSION['currentUser']->dbID;\n    $user->readFromDB($db);\n    $dbSecurityCookie = $user->getSecurityCookie();\n    $redir2login = ( $securityCookie != $dbSecurityCookie );\n  } \n}\n\nif($redir2login) {\n  // destroy user in session as security measure\n  unset($_SESSION['currentUser']);\n\n  // If session does not exists I think is better in order to\n  // manage other type of authentication method/schemas\n  // to understand that this is a sort of FIRST Access.\n  //\n  // When TL undertand that session exists but has expired\n  // is OK to call login with expired indication, but is not this case\n  //\n  // Dev Notes:\n  // may be we are going to login.php and it will call us again!\n  $urlo = TL_BASE_HREF . \"login.php\" . ($args->ssodisable ? '?ssodisable' : '');\n  redirect($urlo);\n  exit;\n}\n\n\n// We arrive to these lines only if we are logged in\n// \n// Calling testlinkInitPage() I'm doing what we do on navBar.php\n// navBar.php is called via main.tpl\n// testlinkInitPage($db,('initProject' == 'initProject'));\n\n$tplEngine = new TLSmarty();\n$tplEngine->assign('gui', $gui);\n$tplEngine->display('main.tpl');\n\n\n/**\n *\n *\n */\nfunction initEnv() {\n  $iParams = array(\"reqURI\" => array(tlInputParameter::STRING_N,0,4000));\n  $pParams = G_PARAMS($iParams);\n  \n  $args = new stdClass();\n  $args->ssodisable = getSSODisable();\n\n  // CWE-79: \n  // Improper Neutralization of Input \n  // During Web Page Generation ('Cross-site Scripting')\n  // \n  // https://cxsecurity.com/issue/WLB-2019110139\n  $args->reqURI = '';\n  if ($pParams[\"reqURI\"] != '') {\n    $args->reqURI = $pParams[\"reqURI\"];\n\n    // some sanity checks\n    // strpos ( string $haystack , mixed $needle\n    if (strpos($args->reqURI,'javascript') !== false) {\n      $args->reqURI = null; \n    }\n  }\n  if (null == $args->reqURI) {\n    $args->reqURI = 'lib/general/mainPage.php';\n  }\n  $args->reqURI = $_SESSION['basehref'] . $args->reqURI;\n\n\n\n  $args->tproject_id = isset($_REQUEST['tproject_id']) ? intval($_REQUEST['tproject_id']) : 0;\n  $args->tplan_id = isset($_REQUEST['tplan_id']) ? intval($_REQUEST['tplan_id']) : 0;\n\n  $gui = new stdClass();\n  $gui->title = lang_get('main_page_title');\n  $gui->mainframe = $args->reqURI;\n  $gui->navbar_height = config_get('navbar_height');\n\n  $sso = ($args->ssodisable ? '&ssodisable' : '');\n  $gui->titleframe = \"lib/general/navBar.php?\" . \n                     \"tproject_id={$args->tproject_id}&\" .\n                     \"tplan_id={$args->tplan_id}&\" .\n                     \"updateMainPage=1\" . $sso;\n  $gui->logout = 'logout.php?viewer=' . $sso;\n\n  return array($args,$gui);\n}"], "fixing_code": ["<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/ \n * This script is distributed under the GNU General Public License 2 or later. \n *\n * @filesource  index.php\n * @package     TestLink\n * @copyright   2006-2017, TestLink community\n * @link        http://www.testlink.org\n *\n *\n**/\nrequire_once('lib/functions/configCheck.php');\ncheckConfiguration();\nrequire_once('config.inc.php');\nrequire_once('common.php');\ndoSessionStart();\n\n// will be very interesting understand why we do this\nunset($_SESSION['basehref']);  \nsetPaths();\nlist($args,$gui) = initEnv();\n\n// verify the session during a work\n$redir2login = true;\nif( isset($_SESSION['currentUser']) ) {\n  // Session exists we need to do other checks.\n  // we use/copy Mantisbt approach\n  $securityCookie = tlUser::auth_get_current_user_cookie();\n  $redir2login = is_null($securityCookie);\n\n  if(!$redir2login) {\n    // need to get fresh info from db, before asking for securityCookie\n    doDBConnect($db,database::ONERROREXIT);\n    $user = new tlUser();\n    $user->dbID = $_SESSION['currentUser']->dbID;\n    $user->readFromDB($db);\n    $dbSecurityCookie = $user->getSecurityCookie();\n    $redir2login = ( $securityCookie != $dbSecurityCookie );\n  } \n}\n\nif($redir2login) {\n  // destroy user in session as security measure\n  unset($_SESSION['currentUser']);\n\n  // If session does not exists I think is better in order to\n  // manage other type of authentication method/schemas\n  // to understand that this is a sort of FIRST Access.\n  //\n  // When TL undertand that session exists but has expired\n  // is OK to call login with expired indication, but is not this case\n  //\n  // Dev Notes:\n  // may be we are going to login.php and it will call us again!\n  $urlo = TL_BASE_HREF . \"login.php\" . ($args->ssodisable ? '?ssodisable' : '');\n  redirect($urlo);\n  exit;\n}\n\n\n// We arrive to these lines only if we are logged in\n// \n// Calling testlinkInitPage() I'm doing what we do on navBar.php\n// navBar.php is called via main.tpl\n// testlinkInitPage($db,('initProject' == 'initProject'));\n\n$tplEngine = new TLSmarty();\n$tplEngine->assign('gui', $gui);\n$tplEngine->display('main.tpl');\n\n\n/**\n *\n *\n */\nfunction initEnv() {\n  $iParams = array(\"reqURI\" => array(tlInputParameter::STRING_N,0,4000));\n  $pParams = G_PARAMS($iParams);\n  \n  $args = new stdClass();\n  $args->ssodisable = getSSODisable();\n\n  // CWE-79: \n  // Improper Neutralization of Input \n  // During Web Page Generation ('Cross-site Scripting')\n  // \n  // https://cxsecurity.com/issue/WLB-2019110139\n  $args->reqURI = '';\n  if ($pParams[\"reqURI\"] != '') {\n    $args->reqURI = $pParams[\"reqURI\"];\n\n    // some sanity checks\n    // strpos ( string $haystack , mixed $needle\n    if (stripos($args->reqURI,'javascript') !== false) {\n      $args->reqURI = null; \n    }\n  }\n  if (null == $args->reqURI) {\n    $args->reqURI = 'lib/general/mainPage.php';\n  }\n  $args->reqURI = $_SESSION['basehref'] . $args->reqURI;\n\n\n\n  $args->tproject_id = isset($_REQUEST['tproject_id']) ? intval($_REQUEST['tproject_id']) : 0;\n  $args->tplan_id = isset($_REQUEST['tplan_id']) ? intval($_REQUEST['tplan_id']) : 0;\n\n  $gui = new stdClass();\n  $gui->title = lang_get('main_page_title');\n  $gui->mainframe = $args->reqURI;\n  $gui->navbar_height = config_get('navbar_height');\n\n  $sso = ($args->ssodisable ? '&ssodisable' : '');\n  $gui->titleframe = \"lib/general/navBar.php?\" . \n                     \"tproject_id={$args->tproject_id}&\" .\n                     \"tplan_id={$args->tplan_id}&\" .\n                     \"updateMainPage=1\" . $sso;\n  $gui->logout = 'logout.php?viewer=' . $sso;\n\n  return array($args,$gui);\n}"], "filenames": ["index.php"], "buggy_code_start_loc": [95], "buggy_code_end_loc": [96], "fixing_code_start_loc": [95], "fixing_code_end_loc": [96], "type": "CWE-79", "message": "TestLink before 1.9.20 allows XSS via non-lowercase javascript: in the index.php reqURI parameter. NOTE: this issue exists because of an incomplete fix for CVE-2019-19491.", "other": {"cve": {"id": "CVE-2019-20381", "sourceIdentifier": "cve@mitre.org", "published": "2020-01-20T06:15:11.487", "lastModified": "2020-01-24T14:31:09.647", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TestLink before 1.9.20 allows XSS via non-lowercase javascript: in the index.php reqURI parameter. NOTE: this issue exists because of an incomplete fix for CVE-2019-19491."}, {"lang": "es", "value": "TestLink versiones anteriores a 1.9.20, permite un ataque de tipo XSS por medio de un javascript sin min\u00fasculas: en el par\u00e1metro reqURI del archivo index.php. NOTA: este problema se presenta debido a una correcci\u00f3n incompleta para el CVE-2019-19491."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:testlink:testlink:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.9.20", "matchCriteriaId": "01DE0887-8E55-4C10-BAE0-01330A770DA4"}]}]}], "references": [{"url": "http://mantis.testlink.org/view.php?id=8808", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/cde692895e425731e6951d265a01ca6425a7c26e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/compare/1.9.19...1.9.20", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/cde692895e425731e6951d265a01ca6425a7c26e"}}