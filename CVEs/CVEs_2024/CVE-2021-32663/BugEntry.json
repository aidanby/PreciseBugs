{"buggy_code": ["<?php\n// Copyright (C) 2010-2018 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n\n/**\n * Does load data from XML files (currently used in the setup only)\n *\n * @copyright   Copyright (C) 2010-2018 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\n/**\n * This page is called to perform \"asynchronously\" the setup actions\n * parameters\n * 'operation': one of 'compile_data_model', 'update_db_schema', 'after_db_creation', 'file'\n * \n * if 'operation' == 'update_db_schema': \n * 'mode': install | upgrade\n * \n *  if 'operation' == 'after_db_creation':\n * 'mode': install | upgrade\n * \n * if 'operation' == 'file': \n * 'file': string Name of the file to load\n * 'session_status': string 'start', 'continue' or 'end'\n * 'percent': integer 0..100 the percentage of completion once the file has been loaded \n */ \ndefine('SAFE_MINIMUM_MEMORY', 64*1024*1024);\nrequire_once('../approot.inc.php');\nrequire_once(APPROOT.'/application/utils.inc.php');\nrequire_once(APPROOT.'/setup/setuppage.class.inc.php');\nrequire_once(APPROOT.'/setup/moduleinstaller.class.inc.php');\n\nini_set('max_execution_time', max(3600, ini_get('max_execution_time'))); // Under Windows SQL/backup operations are part of the timeout and require extra time\ndate_default_timezone_set('Europe/Paris'); // Just to avoid a warning if the timezone is not set in php.ini\n\n$sMemoryLimit = trim(ini_get('memory_limit'));\nif (empty($sMemoryLimit))\n{\n\t// On some PHP installations, memory_limit does not exist as a PHP setting!\n\t// (encountered on a 5.2.0 under Windows)\n\t// In that case, ini_set will not work, let's keep track of this and proceed with the data load\n\tSetupPage::log_info(\"No memory limit has been defined in this instance of PHP\");\t\t\n}\nelse\n{\n\t// Check that the limit will allow us to load the data\n\t//\n\t$iMemoryLimit = utils::ConvertToBytes($sMemoryLimit);\n\tif (!utils::IsMemoryLimitOk($iMemoryLimit, SAFE_MINIMUM_MEMORY))\n\t{\n\t\tif (ini_set('memory_limit', SAFE_MINIMUM_MEMORY) === FALSE)\n\t\t{\n\t\t\tSetupPage::log_error(\"memory_limit is too small: $iMemoryLimit and can not be increased by the script itself.\");\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSetupPage::log_info(\"memory_limit increased from $iMemoryLimit to \".SAFE_MINIMUM_MEMORY.\".\");\t\t\n\t\t}\n\t}\n}\n\n\ndefine('PHP_FATAL_ERROR_TAG', 'phpfatalerror');\n\n\n/**\n * Handler for register_shutdown_function, to catch PHP errors\n */\nfunction ShutdownCallback()\n{\n\t$error = error_get_last();\n\t$bIsErrorToReport = (($error !== null) && ($error['type'] & (E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR)));\n\tif (!$bIsErrorToReport)\n\t{\n\t\treturn;\n\t}\n\n\t$errno = $error[\"type\"];\n\t$errfile = $error[\"file\"];\n\t$errline = $error[\"line\"];\n\t$errstr = $error[\"message\"];\n\t$sLogMessage = \"PHP error occured : msg=$errstr, no=$errno, file=$errfile, line=$errline\";\n\tSetupPage::log_error(\"Setup error: $sLogMessage\");\n\techo '<'.PHP_FATAL_ERROR_TAG.'>'.$sLogMessage.'</'.PHP_FATAL_ERROR_TAG.'>';\n}\n\n\nfunction FatalErrorCatcher($sOutput)\n{\n\tif (preg_match('|<'.PHP_FATAL_ERROR_TAG.'>.*</'.PHP_FATAL_ERROR_TAG.'>|s', $sOutput, $aMatches))\n\t{\n\t\theader(\"HTTP/1.0 500 Internal server error.\");\n\t\t$errors = '';\n\t\tforeach ($aMatches as $sMatch)\n\t\t{\n\t\t\t$errors .= strip_tags($sMatch).\"\\n\";\n\t\t}\n\t\t$sOutput = \"$errors\\n\";\n\t\t// Logging to a file does not work if the whole memory is exhausted...\t\t\n\t\t//SetupPage::log_error(\"Fatal error - in $__FILE__ , $errors\");\n\t}\n\treturn $sOutput;\n}\n\n//Define some bogus, invalid HTML tags that no sane\n//person would ever put in an actual document and tell\n//PHP to delimit fatal error warnings with them.\nini_set('error_prepend_string', '<'.PHP_FATAL_ERROR_TAG.'>');\nini_set('error_append_string', '</'.PHP_FATAL_ERROR_TAG.'>');\n\n// callback on errors to log\nregister_shutdown_function('ShutdownCallback');\n// Starts the capture of the ouput, and sets a filter to capture the fatal errors.\nob_start('FatalErrorCatcher'); // Start capturing the output, and pass it through the fatal error catcher\n\nrequire_once(APPROOT.'/core/config.class.inc.php');\nrequire_once(APPROOT.'/core/log.class.inc.php');\nrequire_once(APPROOT.'/core/kpi.class.inc.php');\nrequire_once(APPROOT.'/core/cmdbsource.class.inc.php');\nrequire_once('./xmldataloader.class.inc.php');\nrequire_once(APPROOT.'/application/ajaxwebpage.class.inc.php');\n\n\n// Never cache this page\nheader(\"Cache-Control: no-cache, must-revalidate\");  // HTTP/1.1\nheader(\"Expires: Fri, 17 Jul 1970 05:00:00 GMT\");    // Date in the past\n\n/**\n * Main program\n */\n$sOperation = Utils::ReadParam('operation', '');\ntry\n{\n\t$sAuthent = utils::ReadParam('authent', '', false, 'raw_data');\n\tif (!file_exists(APPROOT.'data/setup/authent') || $sAuthent !== file_get_contents(APPROOT.'data/setup/authent'))\n\t{\n\t\tthrow new SecurityException('Setup operations are not allowed outside of the setup');\n\t\tSetupPage::log_error(\"Setup operations are not allowed outside of the setup\");\n\t}\n\n\tswitch($sOperation)\n\t{\n\t\tcase 'async_action':\n\t\tini_set('max_execution_time', max(240, ini_get('max_execution_time')));\n\t\t// While running the setup it is desirable to see any error that may happen\n\t\tini_set('display_errors', true);\n\t\tini_set('display_startup_errors', true);\n\t\t\n\t\trequire_once(APPROOT.'/setup/wizardcontroller.class.inc.php');\n\t\trequire_once(APPROOT.'/setup/wizardsteps.class.inc.php');\n\t\t\n\t\t$sClass = utils::ReadParam('step_class', '');\n\t\t$sState = utils::ReadParam('step_state', '');\n\t\t$sActionCode = utils::ReadParam('code', '');\n\t\t$aParams = utils::ReadParam('params', array(), false, 'raw_data');\n\t\t$oPage = new ajax_page('');\n\t\t$oDummyController = new WizardController('');\n\t\tif (is_subclass_of($sClass, 'WizardStep'))\n\t\t{\n\t\t\t/** @var WizardStep $oStep */\n\t\t\t$oStep = new $sClass($oDummyController, $sState);\n\t\t\t$sConfigFile = utils::GetConfigFilePath();\n\t\t\tif (file_exists($sConfigFile) && !is_writable($sConfigFile) && $oStep->RequiresWritableConfig())\n\t\t\t{\n\t\t\t\t$sRelativePath = utils::GetConfigFilePathRelative();\n\t\t\t\t$oPage->error(\"<b>Error:</b> the configuration file '\".$sRelativePath.\"' already exists and cannot be overwritten.\");\n\t\t\t\t$oPage->p(\"The wizard cannot modify the configuration file for you. If you want to upgrade \".ITOP_APPLICATION.\", make sure that the file '<b>\".$sRelativePath.\"</b>' can be modified by the web server.\");\n\t\t\t\t$oPage->output();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oStep->AsyncAction($oPage, $sActionCode, $aParams);\n\t\t\t}\n\t\t}\n\t\t$oPage->output();\n\t\tbreak;\n\n\t\tdefault:\n\t\tthrow(new Exception(\"Error unsupported operation '$sOperation'\"));\n\t}\n}\ncatch(Exception $e)\n{\n\theader(\"HTTP/1.0 500 Internal server error.\");\n\techo \"<p>An error happened while processing the installation:</p>\\n\";\n\techo '<p>'.$e.\"</p>\\n\";\n\tSetupPage::log_error(\"An error happened while processing the installation: \".$e);\n}\n\nif (function_exists('memory_get_peak_usage'))\n{\n\tif ($sOperation == 'file')\n\t{\n\t\tSetupPage::log_info(\"loading file '$sFileName', peak memory usage. \".memory_get_peak_usage());\n\t}\n\telse\n\t{\n\t\tSetupPage::log_info(\"operation '$sOperation', peak memory usage. \".memory_get_peak_usage());\n\t}\n}", "<?php\n// Copyright (C) 2010-2012 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n/**\n * Wizard to configure and initialize the iTop application\n *\n * @copyright   Copyright (C) 2010-2012 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nrequire_once('../approot.inc.php');\nrequire_once(APPROOT.'/application/utils.inc.php');\nrequire_once(APPROOT.'/core/config.class.inc.php');\nrequire_once(APPROOT.'/setup/setuppage.class.inc.php');\nrequire_once(APPROOT.'/setup/wizardcontroller.class.inc.php');\nrequire_once(APPROOT.'/setup/wizardsteps.class.inc.php');\n\nclearstatcache(); // Make sure we know what we are doing !\n// Set a long (at least 4 minutes) execution time for the setup to avoid timeouts during this phase\nini_set('max_execution_time', max(240, ini_get('max_execution_time')));\n// While running the setup it is desirable to see any error that may happen\nini_set('display_errors', true);\nini_set('display_startup_errors', true);\ndate_default_timezone_set('Europe/Paris'); // Just to avoid a warning if the timezone is not set in php.ini\n\n/////////////////////////////////////////////////////////////////////\n// Fake functions to protect the first run of the installer\n// in case the PHP JSON module is not installed...\nif (!function_exists('json_encode'))\n{\n\tfunction json_encode($value, $options = null)\n\t{\n\t\treturn '[]';\n\t}\n}\nif (!function_exists('json_decode'))\n{\n\tfunction json_decode($json, $assoc=null)\n\t{\n\t\treturn array();\n\t}\n}\n/////////////////////////////////////////////////////////////////////\n\n$oWizard = new WizardController('WizStepWelcome');\n$oWizard->Run();\n", "<?php\n// Copyright (C) 2010-2018 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n/**\n * The standardized result of any pass/fail check performed by the setup\n *\n * @copyright   Copyright (C) 2010-2018 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\nclass CheckResult\n{\n\t// Severity levels\n\tconst ERROR = 0;\n\tconst WARNING = 1;\n\tconst INFO = 2;\n\n\tpublic $iSeverity;\n\tpublic $sLabel;\n\tpublic $sDescription;\n\n\tpublic function __construct($iSeverity, $sLabel, $sDescription = '')\n\t{\n\t\t$this->iSeverity = $iSeverity;\n\t\t$this->sLabel = $sLabel;\n\t\t$this->sDescription = $sDescription;\n\t}\n}\n\n/**\n * All of the functions/utilities needed by both the setup wizard and the installation process\n *\n * @copyright   Copyright (C) 2010-2012 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\nclass SetupUtils\n{\n\t// -- Minimum versions (requirements : forbids installation if not met)\n\tconst PHP_MIN_VERSION = '5.6.0'; // 5.6 will be supported until the end of 2018 (see http://php.net/supported-versions.php)\n\tconst MYSQL_MIN_VERSION = '5.6.0'; // 5.6 to have fulltext on InnoDB for Tags fields (N\u00b0931)\n\tconst MYSQL_NOT_VALIDATED_VERSION = '8.0.0'; //Mysql 8 not validated as of iTop 2.6\n\n\t// -- versions that will be the minimum in next iTop major release (warning if not met)\n\tconst PHP_NEXT_MIN_VERSION = ''; // no new PHP requirement for next iTop version\n\tconst MYSQL_NEXT_MIN_VERSION = ''; // no new MySQL requirement for next iTop version\n\t// -- First recent version that is not yet validated by Combodo (warning)\n\tconst PHP_NOT_VALIDATED_VERSION = '7.4.0';\n\n\tconst MIN_MEMORY_LIMIT = 33554432; // 32 * 1024 * 1024 - we can use expressions in const since PHP 5.6 but we are in the setup !\n\tconst SUHOSIN_GET_MAX_VALUE_LENGTH = 2048;\n\n\t/**\n\t * Check configuration parameters, for example :\n\t * <ul>\n\t * <li>PHP version\n\t * <li>needed PHP extensions\n\t * <li>memory_limit\n\t * <li>max_upload_file_size\n\t * <li>...\n\t * </ul>\n\t *\n\t * @internal SetupPage $oP The page used only for its 'log' method\n\t * @return CheckResult[]\n\t */\n\tstatic function CheckPhpAndExtensions()\n\t{\n\t\t$aResult = array();\n\n\t\t// For log file(s)\n\t\tif (!is_dir(APPROOT.'log'))\n\t\t{\n\t\t\t@mkdir(APPROOT.'log');\n\t\t}\n\n\t\tself::CheckPhpVersion($aResult);\n\n\t\t// Check the common directories\n\t\t$aWritableDirsErrors = self::CheckWritableDirs(array('log', 'env-production', 'env-production-build', 'conf', 'data'));\n\t\t$aResult = array_merge($aResult, $aWritableDirsErrors);\n\n\t\t$aMandatoryExtensions = array(\n\t\t\t'mysqli',\n\t\t\t'iconv',\n\t\t\t'simplexml',\n\t\t\t'soap',\n\t\t\t'hash',\n\t\t\t'json',\n\t\t\t'session',\n\t\t\t'pcre',\n\t\t\t'dom',\n\t\t\t'zlib',\n\t\t\t'zip',\n\t\t);\n\t\t$aOptionalExtensions = array(\n\t\t\t'mcrypt, sodium or openssl' =>\n\t\t\t\tarray(\n\t\t\t\t\t'mcrypt' => 'Strong encryption will not be used.',\n\t\t\t\t\t'sodium' => 'Strong encryption will not be used.',\n\t\t\t\t\t'openssl' => 'Strong encryption will not be used.',\n\t\t\t\t),\n\t\t\t'ldap' => 'LDAP authentication will be disabled.',\n\t\t\t'gd' => 'test image type (always returns false if not installed), image resizing, PDF export',\n\t\t);\n\n\t\tasort($aMandatoryExtensions); // Sort the list to look clean !\n\t\tksort($aOptionalExtensions); // Sort the list to look clean !\n\t\t$aExtensionsOk = array();\n\t\t$aMissingExtensions = array();\n\t\t$aMissingExtensionsLinks = array();\n\t\t// First check the mandatory extensions\n\t\tforeach($aMandatoryExtensions as $sExtension)\n\t\t{\n\t\t\tif (extension_loaded($sExtension))\n\t\t\t{\n\t\t\t\t$aExtensionsOk[] = $sExtension;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aMissingExtensions[] = $sExtension;\n\t\t\t\t$aMissingExtensionsLinks[] = \"<a href=\\\"http://www.php.net/manual/en/book.$sExtension.php\\\" target=\\\"_blank\\\">$sExtension</a>\";\n\t\t\t}\n\t\t}\n\t\tif (count($aExtensionsOk) > 0)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"Required PHP extension(s): \".implode(', ', $aExtensionsOk).\".\");\n\t\t}\n\t\tif (count($aMissingExtensions) > 0)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Missing PHP extension(s): \".implode(', ', $aMissingExtensionsLinks).\".\");\n\t\t}\n\t\t// Next check the optional extensions\n\t\t$aExtensionsOk = array();\n\t\t$aMissingExtensions = array();\n\t\tforeach($aOptionalExtensions as $sExtension => $sMessage)\n\t\t{\n\t\t\t//if sMessage is an array, extensions in it are conditional between them\n\t\t\tif (is_array($sMessage))\n\t\t\t{\n\t\t\t\t$bIsAtLeastOneLoaded = false;\n\t\t\t\t$sConditionalMissingMessage = '';\n\t\t\t\tforeach($sMessage as $sConditionalExtension => $sConditionalMessage)\n\t\t\t\t{\n\t\t\t\t\tif (extension_loaded($sConditionalExtension))\n\t\t\t\t\t{\n\t\t\t\t\t\t$bIsAtLeastOneLoaded = true;\n\t\t\t\t\t\t$aExtensionsOk[] = $sConditionalExtension;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$sConditionalMissingMessage = $sConditionalMessage;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!$bIsAtLeastOneLoaded)\n\t\t\t\t{\n\t\t\t\t\t$aMissingExtensions[$sExtension] = $sConditionalMissingMessage;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (extension_loaded($sExtension))\n\t\t\t\t{\n\t\t\t\t\t$aExtensionsOk[] = $sExtension;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aMissingExtensions[$sExtension] = $sMessage;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (count($aExtensionsOk) > 0)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"Optional PHP extension(s): \".implode(', ', $aExtensionsOk).\".\");\n\t\t}\n\t\tif (count($aMissingExtensions) > 0)\n\t\t{\n\t\t\tforeach($aMissingExtensions as $sExtension => $sMessage)\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING, \"Missing optional PHP extension: $sExtension. \".$sMessage);\n\t\t\t}\n\t\t}\n\t\t// Check some ini settings here\n\t\tif (function_exists('php_ini_loaded_file')) // PHP >= 5.2.4\n\t\t{\n\t\t\t$sPhpIniFile = php_ini_loaded_file();\n\t\t\t// Other included/scanned files\n\t\t\tif ($sFileList = php_ini_scanned_files())\n\t\t\t{\n\t\t\t\tif (strlen($sFileList) > 0)\n\t\t\t\t{\n\t\t\t\t\t$aFiles = explode(',', $sFileList);\n\n\t\t\t\t\tforeach ($aFiles as $sFile)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sPhpIniFile .= ', '.trim($sFile);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetupPage::log(\"Info - php.ini file(s): '$sPhpIniFile'\");\n\t\t}\n\n\t\tif (!ini_get('file_uploads'))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Files upload is not allowed on this server (file_uploads = \".ini_get('file_uploads').\").\");\n\t\t}\n\n\t\t$sUploadTmpDir = self::GetUploadTmpDir();\n\t\tif (empty($sUploadTmpDir))\n\t\t{\n\t\t\t$sUploadTmpDir = '/tmp';\n\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING, \"Temporary directory for files upload is not defined (upload_tmp_dir), assuming that $sUploadTmpDir is used.\");\n\t\t}\n\t\t// check that the upload directory is indeed writable from PHP\n\t\tif (!empty($sUploadTmpDir))\n\t\t{\n\t\t\tif (!file_exists($sUploadTmpDir))\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Temporary directory for files upload ($sUploadTmpDir) does not exist or cannot be read by PHP.\");\n\t\t\t}\n\t\t\telse if (!is_writable($sUploadTmpDir))\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Temporary directory for files upload ($sUploadTmpDir) is not writable.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetupPage::log(\"Info - Temporary directory for files upload ($sUploadTmpDir) is writable.\");\n\t\t\t}\n\t\t}\n\n\n\t\tif (!ini_get('upload_max_filesize'))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"File upload is not allowed on this server (upload_max_filesize = \".ini_get('upload_max_filesize').\").\");\n\t\t}\n\n\t\t$iMaxFileUploads = ini_get('max_file_uploads');\n\t\tif (!empty($iMaxFileUploads) && ($iMaxFileUploads < 1))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"File upload is not allowed on this server (max_file_uploads = \".ini_get('max_file_uploads').\").\");\n\t\t}\n\n\t\t$iMaxUploadSize = utils::ConvertToBytes(ini_get('upload_max_filesize'));\n\t\t$iMaxPostSize = utils::ConvertToBytes(ini_get('post_max_size'));\n\n\t\tif ($iMaxPostSize <= $iMaxUploadSize)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING, \"post_max_size (\".ini_get('post_max_size').\") in php.ini should be strictly greater than upload_max_filesize (\".ini_get('upload_max_filesize').\") otherwise you cannot upload files of the maximum size.\");\n\t\t}\n\n\n\t\tSetupPage::log(\"Info - upload_max_filesize: \".ini_get('upload_max_filesize'));\n\t\tSetupPage::log(\"Info - post_max_size: \".ini_get('post_max_size'));\n\t\tSetupPage::log(\"Info - max_file_uploads: \".ini_get('max_file_uploads'));\n\n\t\t// Check some more ini settings here, needed for file upload\n\t\tif (function_exists('get_magic_quotes_gpc'))\n\t\t{\n\t\t\tif (@get_magic_quotes_gpc())\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"'magic_quotes_gpc' is set to On. Please turn it Off in php.ini before continuing.\");\n\t\t\t}\n\t\t}\n\t\tif (function_exists('get_magic_quotes_runtime'))\n\t\t{\n\t\t\tif (@get_magic_quotes_runtime())\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"'magic_quotes_runtime' is set to On. Please turn it Off in php.ini before continuing.\");\n\t\t\t}\n\t\t}\n\n\t\t$sMemoryLimit = trim(ini_get('memory_limit'));\n\t\tif (empty($sMemoryLimit))\n\t\t{\n\t\t\t// On some PHP installations, memory_limit does not exist as a PHP setting!\n\t\t\t// (encountered on a 5.2.0 under Windows)\n\t\t\t// In that case, ini_set will not work, let's keep track of this and proceed anyway\n\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING, \"No memory limit has been defined in this instance of PHP\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Check that the limit will allow us to load the data\n\t\t\t//\n\t\t\t$iMemoryLimit = utils::ConvertToBytes($sMemoryLimit);\n\t\t\tif (!utils::IsMemoryLimitOk($iMemoryLimit, self::MIN_MEMORY_LIMIT))\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"memory_limit ($iMemoryLimit) is too small, the minimum value to run the application is \".self::MIN_MEMORY_LIMIT.\".\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetupPage::log(\"Info - memory_limit is $iMemoryLimit, ok.\");\n\t\t\t}\n\t\t}\n\n\t\t// Special case for APC\n\t\tif (extension_loaded('apc'))\n\t\t{\n\t\t\t$sAPCVersion = phpversion('apc');\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"APC detected (version $sAPCVersion). The APC cache will be used to speed-up \".ITOP_APPLICATION.\".\");\n\t\t}\n\n\t\t// Special case Suhosin extension\n\t\tif (extension_loaded('suhosin'))\n\t\t{\n\t\t\t$sSuhosinVersion = phpversion('suhosin');\n\t\t\t$aOk[] = \"Suhosin extension detected (version $sSuhosinVersion).\";\n\n\t\t\t$iGetMaxValueLength = ini_get('suhosin.get.max_value_length');\n\t\t\tif ($iGetMaxValueLength < self::SUHOSIN_GET_MAX_VALUE_LENGTH)\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING,  \"suhosin.get.max_value_length ($iGetMaxValueLength) is too small, the minimum value recommended to run the application is \".self::SUHOSIN_GET_MAX_VALUE_LENGTH.\".\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetupPage::log(\"Info - suhosin.get.max_value_length = $iGetMaxValueLength, ok.\");\n\t\t\t}\n\t\t}\n\n\t\tif (function_exists('php_ini_loaded_file')) // PHP >= 5.2.4\n\t\t{\n\t\t\t$sPhpIniFile = php_ini_loaded_file();\n\t\t\t// Other included/scanned files\n\t\t\tif ($sFileList = php_ini_scanned_files())\n\t\t\t{\n\t\t\t\tif (strlen($sFileList) > 0)\n\t\t\t\t{\n\t\t\t\t\t$aFiles = explode(',', $sFileList);\n\n\t\t\t\t\tforeach ($aFiles as $sFile)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sPhpIniFile .= ', '.trim($sFile);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO,  \"Loaded php.ini files: $sPhpIniFile\");\n\t\t}\n\n\t\t// Check the configuration of the sessions persistence, since this is critical for the authentication\n\t\tif (ini_get('session.save_handler') == 'files')\n\t\t{\n\t\t\t$sSavePath = ini_get('session.save_path');\n\t\t\tSetupPage::log(\"Info - session.save_path is: '$sSavePath'.\");\n\n\t\t\t// According to the PHP documentation, the format can be /path/where/to_save_sessions or \"N;/path/where/to_save_sessions\" or \"N;MODE;/path/where/to_save_sessions\"\n\t\t\t$sSavePath = ltrim(rtrim($sSavePath, '\"'), '\"'); // remove surrounding quotes (if any)\n\n\t\t\tif (!empty($sSavePath))\n\t\t\t{\n\t\t\t\tif (($iPos = strrpos($sSavePath, ';', 0)) !== false)\n\t\t\t\t{\n\t\t\t\t\t// The actual path is after the last semicolon\n\t\t\t\t\t$sSavePath = substr($sSavePath, $iPos+1);\n\t\t\t\t}\n\t\t\t\tif (!is_writable($sSavePath))\n\t\t\t\t{\n\t\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"The value for session.save_path ($sSavePath) is not writable for the web server. Make sure that PHP can actually save session variables. (Refer to the PHP documentation: http://php.net/manual/en/session.configuration.php#ini.session.save-path)\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"The value for session.save_path ($sSavePath) is writable for the web server.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING, \"Empty path for session.save_path. Make sure that PHP can actually save session variables. (Refer to the PHP documentation: http://php.net/manual/en/session.configuration.php#ini.session.save-path)\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"session.save_handler is: '\".ini_get('session.save_handler').\"' (different from 'files').\");\n\t\t}\n\n\t\treturn $aResult;\n\t}\n\n\t/**\n\t * @param CheckResult[] $aResult checks log\n\t */\n\tprivate static function CheckPhpVersion(&$aResult)\n\t{\n\t\tSetupPage::log('Info - CheckPHPVersion');\n\t\t$sPhpVersion = phpversion();\n\n\t\tif (version_compare($sPhpVersion, self::PHP_MIN_VERSION, '>='))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO,\n\t\t\t\t\"The current PHP Version (\".$sPhpVersion.\") is greater than the minimum version required to run \".ITOP_APPLICATION.\", which is (\".self::PHP_MIN_VERSION.\")\");\n\n\n\t\t\t$sPhpNextMinVersion = self::PHP_NEXT_MIN_VERSION; // mandatory before PHP 5.5 (arbitrary expressions), keeping compat because we're in the setup !\n\t\t\tif (!empty($sPhpNextMinVersion))\n\t\t\t{\n\t\t\t\tif (version_compare($sPhpVersion, self::PHP_NEXT_MIN_VERSION, '>='))\n\t\t\t\t{\n\t\t\t\t\t$aResult[] = new CheckResult(CheckResult::INFO,\n\t\t\t\t\t\t\"The current PHP Version (\".$sPhpVersion.\") is greater than the minimum version required to run next \".ITOP_APPLICATION.\" release, which is (\".self::PHP_NEXT_MIN_VERSION.\")\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING,\n\t\t\t\t\t\t\"The current PHP Version (\".$sPhpVersion.\") is lower than the minimum version required to run next \".ITOP_APPLICATION.\" release, which is (\".self::PHP_NEXT_MIN_VERSION.\")\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (version_compare($sPhpVersion, self::PHP_NOT_VALIDATED_VERSION, '>='))\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING,\n\t\t\t\t\t\"The current PHP Version (\".$sPhpVersion.\") is not yet validated by Combodo. You may experience some incompatibility issues.\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR,\n\t\t\t\t\"Error: The current PHP Version (\".$sPhpVersion.\") is lower than the minimum version required to run \".ITOP_APPLICATION.\", which is (\".self::PHP_MIN_VERSION.\")\");\n\t\t}\n\t}\n\n\t/**\n\t * Check that the selected modules meet their dependencies\n\t * @param $sSourceDir\n\t * @param $sExtensionDir\n\t * @param $aSelectedModules\n\t * @return array\n\t */\n\tstatic function CheckSelectedModules($sSourceDir, $sExtensionDir, $aSelectedModules)\n\t{\n\t\t$aResult = array();\n\t\tSetupPage::log('Info - CheckSelectedModules');\n\n\t\t$aDirsToScan = array(APPROOT.$sSourceDir);\n\t\t$sExtensionsPath = APPROOT.$sExtensionDir;\n\t\tif (is_dir($sExtensionsPath))\n\t\t{\n\t\t\t// if the extensions dir exists, scan it for additional modules as well\n\t\t\t$aDirsToScan[] = $sExtensionsPath;\n\t\t}\n\t\trequire_once(APPROOT.'setup/modulediscovery.class.inc.php');\n\t\ttry\n\t\t{\n\t\t\tModuleDiscovery::GetAvailableModules($aDirsToScan, true, $aSelectedModules);\n\t\t}\n\t\tcatch(Exception $e)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, $e->getMessage());\n\t\t}\n\t\treturn $aResult;\n\t}\n\n\t/**\n\t * Check that the backup could be executed\n\t * @param $sDestDir\n\t * @return array An array of CheckResults objects\n\t * @internal param Page $oP The page used only for its 'log' method\n\t */\n\tstatic function CheckBackupPrerequisites($sDestDir, $sMySQLBinDir = null)\n\t{\n\t\t$aResult = array();\n\t\tSetupPage::log('Info - CheckBackupPrerequisites');\n\n\t\t// zip extension\n\t\t//\n\t\tif (!extension_loaded('phar'))\n\t\t{\n\t\t\t$sMissingExtensionLink = \"<a href=\\\"http://www.php.net/manual/en/book.phar.php\\\" target=\\\"_blank\\\">zip</a>\";\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Missing PHP extension: phar\", $sMissingExtensionLink);\n\t\t}\n\t\tif (!extension_loaded('zlib'))\n\t\t{\n\t\t\t$sMissingExtensionLink = \"<a href=\\\"http://www.php.net/manual/en/book.zlib.php\\\" target=\\\"_blank\\\">zip</a>\";\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Missing PHP extension: zlib\", $sMissingExtensionLink);\n\t\t}\n\n\t\t// availability of exec()\n\t\t//\n\t\t$aDisabled = explode(', ', ini_get('disable_functions'));\n\t\tSetupPage::log('Info - PHP functions disabled: '.implode(', ', $aDisabled));\n\t\tif (in_array('exec', $aDisabled))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"The PHP exec() function has been disabled on this server\");\n\t\t}\n\n\t\t// availability of mysqldump\n\t\tif (empty($sMySQLBinDir) && null != MetaModel::GetConfig())\n\t\t{\n\t\t\t$sMySQLBinDir = MetaModel::GetConfig()->GetModuleSetting('itop-backup', 'mysql_bindir', '');\n\t\t}\n\n\t\tif (empty($sMySQLBinDir))\n\t\t{\n\t\t\t$sMySQLDump = 'mysqldump';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSetupPage::log('Info - Found mysql_bindir: '.$sMySQLBinDir);\n\t\t\t$sMySQLDump = '\"'.$sMySQLBinDir.'/mysqldump\"';\n\t\t}\n\t\t$sCommand = \"$sMySQLDump -V 2>&1\";\n\n\t\t$aOutput = array();\n\t\t$iRetCode = 0;\n\t\texec($sCommand, $aOutput, $iRetCode);\n\t\tif ($iRetCode == 0)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"mysqldump is present: Ok.\");\n\t\t}\n\t\telseif ($iRetCode == 1)\n\t\t{\n\t\t\t// Unfortunately $aOutput is not really usable since we don't know its encoding (character set)\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"mysqldump could not be found. Please make sure it is installed and in the path.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Unfortunately $aOutput is not really usable since we don't know its encoding (character set)\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"mysqldump could not be executed (retcode=$iRetCode): Please make sure it is installed and \" . (empty($sMySQLBinDir) ? \"in the path\" :  \"located at : $sMySQLDump\"));\n\t\t}\n\t\tforeach($aOutput as $sLine)\n\t\t{\n\t\t\tSetupPage::log('Info - mysqldump -V said: '.$sLine);\n\t\t}\n\n\t\t// check disk space\n\t\t// to do... evaluate how we can correlate the DB size with the size of the dump (and the zip!)\n\t\t// E.g. 2,28 Mb after a full install, giving a zip of 26 Kb (data = 26 Kb)\n\t\t// Example of query (DB without a suffix)\n\t\t//$sDBSize = \"SELECT SUM(ROUND(DATA_LENGTH/1024/1024, 2)) AS size_mb FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = `$sDBName`\";\n\n\t\treturn $aResult;\n\t}\n\n\t/**\n\t * Check that graphviz can be launched\n\t * @param $sGraphvizPath\n\t * @return CheckResult The result of the check\n\t * @internal param string $GraphvizPath The path where graphviz' dot program is installed\n\t */\n\tstatic function CheckGraphviz($sGraphvizPath)\n\t{\n\t\t$oResult = null;\n\t\tSetupPage::log('Info - CheckGraphviz');\n\n\t\t// availability of exec()\n\t\t//\n\t\t$aDisabled = explode(', ', ini_get('disable_functions'));\n\t\tSetupPage::log('Info - PHP functions disabled: '.implode(', ', $aDisabled));\n\t\tif (in_array('exec', $aDisabled))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"The PHP exec() function has been disabled on this server\");\n\t\t}\n\n\t\t// availability of dot / dot.exe\n\t\tif (empty($sGraphvizPath))\n\t\t{\n\t\t\t$sGraphvizPath = 'dot';\n\t\t}\n\t\t$sCommand = \"\\\"$sGraphvizPath\\\" -V 2>&1\";\n\n\t\t$aOutput = array();\n\t\t$iRetCode = 0;\n\t\texec($sCommand, $aOutput, $iRetCode);\n\t\tif ($iRetCode == 0)\n\t\t{\n\t\t\t$oResult = new CheckResult(CheckResult::INFO, \"dot is present: \".$aOutput[0]);\n\t\t}\n\t\telseif ($iRetCode == 1)\n\t\t{\n\t\t\t$oResult = new CheckResult(CheckResult::WARNING, \"dot could not be found: \".implode(' ', $aOutput).\" - Please make sure it is installed and in the path.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oResult = new CheckResult(CheckResult::WARNING, \"dot could not be executed (retcode=$iRetCode): Please make sure it is installed and in the path\");\n\t\t}\n\t\tforeach($aOutput as $sLine)\n\t\t{\n\t\t\tSetupPage::log('Info - '.$sGraphvizPath.' -V said: '.$sLine);\n\t\t}\n\n\t\treturn $oResult;\n\t}\n\n\t/**\n\t * Helper function to retrieve the system's temporary directory\n\t * Emulates sys_get_temp_dir if needed (PHP < 5.2.1)\n\t * @return string Path to the system's temp directory\n\t */\n\tstatic function GetTmpDir()\n\t{\n\t\treturn realpath(sys_get_temp_dir());\n\t}\n\n\t/**\n\t * Helper function to retrieve the directory where files are to be uploaded\n\t * @return string Path to the temp directory used for uploading files\n\t */\n\tstatic function GetUploadTmpDir()\n\t{\n\t\t$sPath = ini_get('upload_tmp_dir');\n\t\tif (empty($sPath))\n\t\t{\n\t\t\t$sPath = self::GetTmpDir();\n\t\t}\n\t\treturn $sPath;\n\t}\n\n\t/**\n\t * Helper to recursively remove a directory\n\t * @param $dir\n\t * @throws Exception\n\t */\n\tpublic static function rrmdir($dir)\n\t{\n\t\tif ((strlen(trim($dir)) == 0) || ($dir == '/') || ($dir == '\\\\'))\n\t\t{\n\t\t\tthrow new Exception(\"Attempting to delete directory: '$dir'\");\n\t\t}\n\t\tself::tidydir($dir);\n\t\tself::rmdir_safe($dir);\n\t}\n\n\t/**\n\t * Helper to recursively cleanup a directory\n\t * @param $dir\n\t * @throws Exception\n\t */\n\tpublic static function tidydir($dir)\n\t{\n\t\tif ((strlen(trim($dir)) == 0) || ($dir == '/') || ($dir == '\\\\'))\n\t\t{\n\t\t\tthrow new Exception(\"Attempting to delete directory: '$dir'\");\n\t\t}\n\n\t\t$aFiles = scandir($dir); // Warning glob('.*') does not seem to return the broken symbolic links, thus leaving a non-empty directory\n\t\tif ($aFiles !== false)\n\t\t{\n\t\t\tforeach($aFiles as $file)\n\t\t\t{\n\t\t\t\tif (($file != '.') && ($file != '..'))\n\t\t\t\t{\n\t\t\t\t\tif(is_dir($dir.'/'.$file))\n\t\t\t\t\t{\n\t\t\t\t\t\tself::tidydir($dir.'/'.$file);\n\t\t\t\t\t\tself::rmdir_safe($dir.'/'.$file);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!unlink($dir.'/'.$file))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSetupPage::log(\"Warning - FAILED to remove file '$dir/$file'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (file_exists($dir.'/'.$file))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSetupPage::log(\"Warning - FAILED to remove file '$dir/.$file'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper to build the full path of a new directory\n\t * @param $dir\n\t */\n\tpublic static function builddir($dir)\n\t{\n\t\t$parent = dirname($dir);\n\t\tif(!is_dir($parent))\n\t\t{\n\t\t\tself::builddir($parent);\n\t\t}\n\t\tif (!is_dir($dir))\n\t\t{\n\t\t\tmkdir($dir);\n\t\t}\n\t}\n\n\tpublic static function rmdir_safe($dir)\n\t{\n\t\t// avoid unnecessary warning\n\t\t// Try 100 times...\n\t\t$i = 100;\n\t\twhile ((@rmdir($dir) === false) && $i > 0)\n\t\t{\n\t\t\t// Magic trick for windows\n\t\t\t// sometimes the folder is empty but rmdir fails\n\t\t\tclosedir(opendir($dir));\n\t\t\t$i--;\n\t\t}\n\t\tif ($i == 0)\n\t\t{\n\t\t\trmdir($dir);\n\t\t}\n\t}\n\n\t/**\n\t * Helper to copy a directory to a target directory, skipping .SVN files (for developer's comfort!)\n\t * Returns true if successful\n\t * @param $sSource\n\t * @param $sDest\n\t * @param bool $bUseSymbolicLinks\n\t * @return bool\n\t * @throws Exception\n\t */\n\tpublic static function copydir($sSource, $sDest, $bUseSymbolicLinks = false)\n\t{\n\t\tif (is_dir($sSource))\n\t\t{\n\t\t\tif (!is_dir($sDest))\n\t\t\t{\n\t\t\t\tmkdir($sDest);\n\t\t\t}\n\t\t\t$aFiles = scandir($sSource);\n\t\t\tif(sizeof($aFiles) > 0 )\n\t\t\t{\n\t\t\t\tforeach($aFiles as $sFile)\n\t\t\t\t{\n\t\t\t\t\tif ($sFile == '.' || $sFile == '..' || $sFile == '.svn' || $sFile == '.git')\n\t\t\t\t\t{\n\t\t\t\t\t\t// Skip\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is_dir($sSource.'/'.$sFile))\n\t\t\t\t\t{\n\t\t\t\t\t\t// Recurse\n\t\t\t\t\t\tself::copydir($sSource.'/'.$sFile, $sDest.'/'.$sFile, $bUseSymbolicLinks);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($bUseSymbolicLinks)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (function_exists('symlink'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (file_exists($sDest.'/'.$sFile))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tunlink($sDest.'/'.$sFile);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsymlink($sSource.'/'.$sFile, $sDest.'/'.$sFile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthrow(new Exception(\"Error, cannot *copy* '$sSource/$sFile' to '$sDest/$sFile' using symbolic links, 'symlink' is not supported on this system.\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (is_link($sDest.'/'.$sFile))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tunlink($sDest.'/'.$sFile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcopy($sSource.'/'.$sFile, $sDest.'/'.$sFile);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telseif (is_file($sSource))\n\t\t{\n\t\t\tif ($bUseSymbolicLinks)\n\t\t\t{\n\t\t\t\tif (function_exists('symlink'))\n\t\t\t\t{\n\t\t\t\t\treturn symlink($sSource, $sDest);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthrow(new Exception(\"Error, cannot *copy* '$sSource' to '$sDest' using symbolic links, 'symlink' is not supported on this system.\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn copy($sSource, $sDest);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Helper to move a directory when the parent directory of the target dir cannot be written\n\t * To be used as alternative to rename()\n\t * Files/Subdirs of the source directory are moved one by one\n\t * Returns void\n\t *\n\t * @param string $sSource\n\t * @param string $sDest\n\t * @param boolean $bRemoveSource If true $sSource will be removed, otherwise $sSource will just be emptied\n\t * @throws Exception\n\t */\n\tpublic static function movedir($sSource, $sDest, $bRemoveSource = true)\n\t{\n\t\tif (!is_dir($sSource))\n\t\t{\n\t\t\tthrow new Exception(\"movedir: the source directory '$sSource' is not a valid directory or cannot be read\");\n\t\t}\n\t\tif (!is_dir($sDest))\n\t\t{\n\t\t\tself::builddir($sDest);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tself::tidydir($sDest);\n\t\t}\n\n\t\tself::copydir($sSource, $sDest);\n\t\tself::tidydir($sSource);\n\t\tif($bRemoveSource === true)\n\t\t{\n\t\t\tself::rmdir_safe($sSource);\n\t\t}\n\t}\n\n\tstatic function GetPreviousInstance($sDir)\n\t{\n\t\t$sSourceDir = '';\n\t\t$sSourceEnvironment = '';\n\t\t$sConfigFile = '';\n\t\t$aResult = array(\n\t\t\t'found' => false,\n\t\t);\n\n\t\tif (file_exists($sDir.'/config-itop.php'))\n\t\t{\n\t\t\t$sSourceDir = $sDir;\n\t\t\t$sSourceEnvironment = '';\n\t\t\t$sConfigFile = $sDir.'/config-itop.php';\n\t\t\t$aResult['found'] = true;\n\t\t}\n\t\telse if (file_exists($sDir.'/conf/production/config-itop.php'))\n\t\t{\n\t\t\t$sSourceDir = $sDir;\n\t\t\t$sSourceEnvironment = 'production';\n\t\t\t$sConfigFile = $sDir.'/conf/production/config-itop.php';\n\t\t\t$aResult['found'] = true;\n\t\t}\n\n\t\tif ($aResult['found'])\n\t\t{\n\t\t\t$oPrevConf = new Config($sConfigFile);\n\n\t\t\t$aResult = array(\n\t\t\t\t'found' => true,\n\t\t\t\t'source_dir' => $sSourceDir,\n\t\t\t\t'source_environment' => $sSourceEnvironment,\n\t\t\t\t'configuration_file' => $sConfigFile,\n\t\t\t\t'db_server' => $oPrevConf->Get('db_host'),\n\t\t\t\t'db_user' => $oPrevConf->Get('db_user'),\n\t\t\t\t'db_pwd' => $oPrevConf->Get('db_pwd'),\n\t\t\t\t'db_name' => $oPrevConf->Get('db_name'),\n\t\t\t\t'db_prefix' => $oPrevConf->Get('db_subname'),\n\t\t\t\t'db_tls_enabled' => $oPrevConf->Get('db_tls.enabled'),\n\t\t\t\t'db_tls_ca' => $oPrevConf->Get('db_tls.ca'),\n\t\t\t\t'graphviz_path' => $oPrevConf->Get('graphviz_path'),\n\t\t\t\t'mysql_bindir' => $oPrevConf->GetModuleSetting('itop-backup', 'mysql_bindir', ''),\n\t\t\t);\n\t\t}\n\n\t\treturn $aResult;\n\t}\n\n\t/**\n\t * @param string $sDir\n\t *\n\t * @return bool|float false if failure\n\t * @uses \\disk_free_space()\n\t */\n\tstatic function CheckDiskSpace($sDir)\n\t{\n\t\twhile(($f = @disk_free_space($sDir)) == false)\n\t\t{\n\t\t\tif ($sDir == dirname($sDir)) break;\n\t\t\tif ($sDir == '.') break;\n\t\t\t$sDir = dirname($sDir);\n\t\t}\n\n\t\treturn $f;\n\t}\n\n\tstatic function HumanReadableSize($fBytes)\n\t{\n\t\t$aSizes = array('bytes', 'Kb', 'Mb', 'Gb', 'Tb', 'Pb', 'Hb');\n\t\t$index = 0;\n\t\twhile (($fBytes > 1000) && ($index < count($aSizes)))\n\t\t{\n\t\t\t$index++;\n\t\t\t$fBytes = $fBytes / 1000;\n\t\t}\n\n\t\treturn sprintf('%.2f %s', $fBytes, $aSizes[$index]);\n\t}\n\n\t/**\n\t * @param \\WebPage $oPage\n\t * @param boolean $bAllowDBCreation\n\t * @param string $sDBServer\n\t * @param string $sDBUser\n\t * @param string $sDBPwd\n\t * @param string $sDBName\n\t * @param string $sDBPrefix\n\t * @param string $bTlsEnabled\n\t * @param string $sTlsCA\n\t * @param string $sNewDBName\n\t */\n\tstatic function DisplayDBParameters(\n\t\t$oPage, $bAllowDBCreation, $sDBServer, $sDBUser, $sDBPwd, $sDBName, $sDBPrefix, $bTlsEnabled, $sTlsCA,\n\t\t$sNewDBName = ''\n\t) {\n\t\t$sWikiVersion = '2_6_0';\n\t\t$sMysqlTlsWikiPageUrl = 'https://wiki.openitop.org/doku.php?id='.$sWikiVersion.':install:php_and_mysql_tls';\n\n\t\t$oPage->add('<tr><td colspan=\"2\">');\n\t\t$oPage->add('<fieldset><legend>Database Server Connection</legend>');\n\t\t$oPage->add('<table id=\"table_db_options\">');\n\n\t\t//-- DB connection params\n\t\t$oPage->add('<tbody>');\n\t\t$oPage->add('<tr><td>Server Name:</td><td><input id=\"db_server\" type=\"text\" name=\"db_server\" value=\"'.htmlentities($sDBServer, ENT_QUOTES, 'UTF-8').'\" size=\"15\"/></td><td>E.g. \"localhost\", \"dbserver.mycompany.com\" or \"192.142.10.23\"</td></tr>');\n\t\t$oPage->add('<tr><td>Login:</td><td><input id=\"db_user\" type=\"text\" name=\"db_user\" value=\"'.htmlentities($sDBUser, ENT_QUOTES, 'UTF-8').'\" size=\"15\"/></td><td rowspan=\"2\" style=\"vertical-align:top\">The account must have the following privileges on the database: SELECT, INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, CREATE VIEW, SHOW VIEW, LOCK TABLE, SUPER, TRIGGER</td></tr>');\n\t\t$oPage->add('<tr><td>Password:</td><td><input id=\"db_pwd\" autocomplete=\"off\" type=\"password\" name=\"db_pwd\" value=\"'.htmlentities($sDBPwd, ENT_QUOTES, 'UTF-8').'\" size=\"15\"/></td></tr>');\n\t\t$oPage->add('</tbody>');\n\n\t\t//-- TLS params (N\u00b01260)\n\t\t$sTlsEnabledChecked = $bTlsEnabled ? ' checked' : '';\n\t\t$sTlsCaDisabled = $bTlsEnabled ? '' : ' disabled';\n\t\t$oPage->add('<tbody id=\"tls_options\">');\n\t\t$oPage->add('<tr><th colspan=\"3\" style=\"text-align: left; background-color: transparent\"><label style=\"margin: 6em; font-weight: normal; color: #696969\"><img style=\"vertical-align:bottom\" id=\"db_tls_img\">Use TLS encrypted connection</label></th></tr>');\n\t\t$oPage->add('<tr style=\"display:none\"><td colspan=\"3\" style=\"background-color: #f9e0df; padding: 1em; border: 1px solid #950303; color: #950303;\">Before configuring MySQL with TLS encryption, read the documentation <a href=\"'.$sMysqlTlsWikiPageUrl.'\" target=\"_blank\">on Combodo\\'s Wiki</a></td></tr>');\n\t\t$oPage->add('<tr style=\"display:none\"><td colspan=\"3\"><label><input id=\"db_tls_enabled\" type=\"checkbox\"'.$sTlsEnabledChecked.' name=\"db_tls_enabled\" value=\"1\"> Encrypted connection enabled</label></td></tr>');\n\t\t$oPage->add('<tr style=\"display:none\"><td>SSL CA:</td>');\n\t\t$oPage->add('<td><input id=\"db_tls_ca\" autocomplete=\"off\" type=\"text\" name=\"db_tls_ca\" value=\"'.htmlentities($sTlsCA,\n\t\t\t\tENT_QUOTES, 'UTF-8').'\" size=\"15\"'.$sTlsCaDisabled.'></td>');\n\t\t$oPage->add('<td>Path to certificate authority file for SSL</td></tr>');\n\t\t$oPage->add('</tbody>');\n\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('</td></tr>');\n\n\t\t$oPage->add('<tr><td colspan=\"2\"><span id=\"db_info\" style=\"display:inline-block; height:1.5em; margin-left:10px;\"></span></td></tr>');\n\n\t\t$oPage->add('<tr><td colspan=\"2\">');\n\t\t$oPage->add('<fieldset><legend>Database</legend>');\n\t\t$oPage->add('<table>');\n\t\tif ($bAllowDBCreation)\n\t\t{\n\t\t\t$oPage->add('<tr><td><input type=\"radio\" id=\"create_db\" name=\"create_db\" value=\"yes\"/><label for=\"create_db\">&nbsp;Create a new database:</label></td>');\n\t\t\t$oPage->add('<td><input id=\"db_new_name\" type=\"text\" name=\"db_new_name\" value=\"'.htmlentities($sNewDBName, ENT_QUOTES, 'UTF-8').'\" size=\"15\" maxlength=\"32\"/><span style=\"width:20px;\" id=\"v_db_new_name\"></span></td></tr>');\n\t\t\t$oPage->add('<tr><td><input type=\"radio\" id=\"existing_db\" name=\"create_db\" value=\"no\"/><label for=\"existing_db\">&nbsp;Use the existing database:</label></td>');\n\t\t\t$oPage->add('<td id=\"db_name_container\"><input id=\"db_name\" name=\"db_name\" size=\"15\" maxlen=\"32\" value=\"'.htmlentities($sDBName, ENT_QUOTES, 'UTF-8').'\"/><span style=\"width:20px;\" id=\"v_db_name\"></span></td></tr>');\n\t\t\t$oPage->add('<tr><td>Use a prefix for the tables:</td><td><input id=\"db_prefix\" type=\"text\" name=\"db_prefix\" value=\"'.htmlentities($sDBPrefix, ENT_QUOTES, 'UTF-8').'\" size=\"15\" maxlength=\"32\"/><span style=\"width:20px;\" id=\"v_db_prefix\"></span></td></tr>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oPage->add('<tr><td>Database Name:</td><td id=\"db_name_container\"><input id=\"db_name\" name=\"db_name\" size=\"15\" maxlen=\"32\" value=\"'.htmlentities($sDBName, ENT_QUOTES, 'UTF-8').'\"/><span style=\"width:20px;\" id=\"v_db_name\"></span></td></tr>');\n\t\t\t$oPage->add('<tr><td>Use a prefix for the tables:</td><td><input id=\"db_prefix\" type=\"text\" name=\"db_prefix\" value=\"'.htmlentities($sDBPrefix, ENT_QUOTES, 'UTF-8').'\" size=\"15\"/><span style=\"width:20px;\" id=\"v_db_prefix\"></span></td></tr>');\n\t\t}\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('<tr><td colspan=\"2\"><span id=\"table_info\">&nbsp;</span></td></tr>');\n\t\t$oPage->add('</td></tr>');\n\n\t\t// TLS checkbox toggle\n\t\t$oPage->add_script(<<<'EOF'\nfunction toggleTlsOptions() {\n\t$(\"tbody#tls_options>tr\").not(\"tr:first-child\").toggle();\n\tupdateTlsImage();\n}\nfunction updateTlsImage() {\n\t$dbTlsImg = $(\"img#db_tls_img\");\n\timgPath = \"../images/\";\n\tdbImgUrl = ($(\"tbody#tls_options>tr:nth-child(2)>td:visible\").length > 0) \n\t\t? \"minus.gif\"\n\t\t: \"plus.gif\";\n\t$dbTlsImg.attr(\"src\", imgPath+dbImgUrl);\n}\nEOF\n\t\t);\n\t\tif ($bTlsEnabled)\n\t\t{\n\t\t\t$oPage->add_ready_script('toggleTlsOptions();');\n\t\t}\n\t\t$oPage->add_ready_script(\n\t\t\t<<<EOF\n$(\"tbody#tls_options>tr>th>label\").click(function() {\n\ttoggleTlsOptions();\n});\n$(\"#db_tls_enabled\").click(function() {\n\tvar bTlsEnabled = $(\"#db_tls_enabled\").is(\":checked\");\n\t$(\"#db_tls_ca\").prop(\"disabled\", !bTlsEnabled);\n});\nupdateTlsImage();\nEOF\n\t\t);\n\n\t\t$oPage->add_script(\n\t\t\t<<<EOF\nvar iCheckDBTimer = null;\nvar oXHRCheckDB = null;\n\nfunction CheckDBConnection()\n{\n\t// Don't call the server too often...\n\tif (iCheckDBTimer !== null)\n\t{\n\t\tclearTimeout(iCheckDBTimer);\n\t\tiCheckDBTimer = null;\n\t}\n\tiCheckDBTimer = setTimeout(DoCheckDBConnection, 500);\n}\n\nfunction DoCheckDBConnection()\n{\n\tiCheckDBTimer = null;\n\tvar oParams = {\n\t\t'db_server': $(\"#db_server\").val(),\n\t\t'db_user': $(\"#db_user\").val(),\n\t\t'db_pwd': $(\"#db_pwd\").val(),\n\t\t'db_name': $(\"#db_name\").val(),\n\t\t'db_tls_enabled': $(\"input#db_tls_enabled\").prop('checked') ? 1 : 0,\n\t\t'db_tls_ca': $(\"input#db_tls_ca\").val(),\n\t}\n\tif ((oXHRCheckDB != null) && (oXHRCheckDB != undefined))\n\t{\n\t\toXHRCheckDB.abort();\n\t\toXHRCheckDB = null;\n\t}\n\toXHRCheckDB = WizardAsyncAction(\"check_db\", oParams);\n}\n\nfunction ValidateField(sFieldId, bUsed)\n{\n\tvar sValue = new String($(\"#\"+sFieldId).val());\n\tvar bMandatory = false;\n\n\tif (bUsed)\n\t{\n\t\tif (sFieldId == 'db_name')\n\t\t{\n\t\t\tbUsed = ($(\"#existing_db\").prop(\"checked\"));\n\t\t\tbMandatory = true;\n\t\t}\n\t\tif (sFieldId == 'db_new_name')\n\t\t{\n\t\t\tbUsed = ($(\"#create_db\").prop(\"checked\"));\n\t\t\tbMandatory = true;\n\t\t}\n\t}\n\t\t\n\tif (!bUsed)\n\t{\n\t\t$(\"#v_\"+sFieldId).html(\"\");\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tif (sValue != \"\")\n\t\t{\n\t\t\tif (sValue.match(/^[A-Za-z0-9_]*$/))\n\t\t\t{\n\t\t\t\tvar bCollision = false;\n\t\t\t\tif (sFieldId == 'db_new_name')\n\t\t\t\t{\n\t\t\t\t\t// check that the \"new name\" does not correspond to an existing database\n\t\t\t\t\tvar sNewName = $('#db_new_name').val();\n\t\t\t\t\t$('#db_name option').each( function() {\n\t\t\t\t\t\tif ($(this).attr('value') == sNewName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbCollision = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (bCollision)\n\t\t\t\t{\n\t\t\t\t\t$(\"#v_\"+sFieldId).html('<img src=\"../images/validation_error.png\" title=\"A database with the same name already exists\"/>');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$(\"#v_\"+sFieldId).html(\"\");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$(\"#v_\"+sFieldId).html('<img src=\"../images/validation_error.png\" title=\"Only the characters [A-Za-z0-9_] are allowed\"/>');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (bMandatory)\n\t\t{\n\t\t\t$(\"#v_\"+sFieldId).html('<img src=\"../images/validation_error.png\" title=\"This field cannot be empty\"/>');\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$(\"#v_\"+sFieldId).html(\"\");\n\t\t\treturn true;\n\t\t}\n\t}\n}\nEOF\n\t\t);\n\t\t$oPage->add_ready_script(\n\t\t\t<<<EOF\nDoCheckDBConnection(); // Validate the initial values immediately\n\n$(\"table#table_db_options\").on(\"keyup change\", \"tr>td input\", function() { CheckDBConnection(); });\n\n$(\"#db_new_name\").on(\"click keyup change\", function() { $(\"#create_db\").prop(\"checked\", true); WizardUpdateButtons(); });\n$(\"#db_name\").on(\"click keyup change\", function() {  $(\"#existing_db\").prop(\"checked\", true); WizardUpdateButtons(); });\n$(\"#db_prefix\").on(\"keyup change\", function() { WizardUpdateButtons(); });\n$(\"#existing_db\").on(\"click change\", function() { WizardUpdateButtons(); });\n$(\"#create_db\").on(\"click change\", function() { WizardUpdateButtons(); });\nEOF\n\t\t);\n\n\t}\n\n\t/**\n\t * Helper function : check the connection to the database, verify a few conditions (minimum version, etc...) and\n\t * (if connected) enumerate the existing databases (if possible)\n\t *\n\t * @param string $sDBServer\n\t * @param string $sDBUser\n\t * @param string $sDBPwd\n\t * @param bool $bTlsEnabled\n\t * @param string $sTlsCA\n\t *\n\t * @return bool|array false if the connection failed or array('checks' => Array of CheckResult, 'databases' =>\n\t *     Array of database names (as strings) or null if not allowed)\n\t */\n\tstatic function CheckDbServer(\n\t\t$sDBServer, $sDBUser, $sDBPwd, $bTlsEnabled = false, $sTlsCA = null\n\t)\n\t{\n\t\t$aResult = array('checks' => array(), 'databases' => null);\n\n\t\tif ($bTlsEnabled)\n\t\t{\n\t\t\tif (!empty($sTlsCA) && !self::CheckFileExists($sTlsCA, $aResult, 'Can\\'t open SSL CA file'))\n\t\t\t{\n\t\t\t\treturn $aResult;\n\t\t\t}\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\t$oDBSource = new CMDBSource;\n\t\t\t$oDBSource->Init($sDBServer, $sDBUser, $sDBPwd, '', $bTlsEnabled, $sTlsCA);\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO, \"Connection to '$sDBServer' as '$sDBUser' successful.\");\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO, \"Info - User privileges: \".($oDBSource->GetRawPrivileges()));\n\n\t\t\t$bHasDbVersionRequired = self::CheckDbServerVersion($aResult, $oDBSource);\n\t\t\tif (!$bHasDbVersionRequired)\n\t\t\t{\n\t\t\t\treturn $aResult;\n\t\t\t}\n\n\t\t\t// Check some server variables\n\t\t\t$iMaxAllowedPacket = $oDBSource->GetServerVariable('max_allowed_packet');\n\t\t\t$iMaxUploadSize = utils::ConvertToBytes(ini_get('upload_max_filesize'));\n\t\t\tif ($iMaxAllowedPacket >= (500 + $iMaxUploadSize)) // Allow some space for the query + the file to upload\n\t\t\t{\n\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO, \"MySQL server's max_allowed_packet ($iMaxAllowedPacket) is big enough compared to upload_max_filesize ($iMaxUploadSize).\");\n\t\t\t}\n\t\t\telse if($iMaxAllowedPacket < $iMaxUploadSize)\n\t\t\t{\n\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::WARNING, \"MySQL server's max_allowed_packet ($iMaxAllowedPacket) is not big enough. Please, consider setting it to at least \".(500 + $iMaxUploadSize).\".\");\n\t\t\t}\n\n\t\t\t$iMaxConnections = $oDBSource->GetServerVariable('max_connections');\n\t\t\tif ($iMaxConnections < 5)\n\t\t\t{\n\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::WARNING, \"MySQL server's max_connections ($iMaxConnections) is not enough. Please, consider setting it to at least 5.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO, \"MySQL server's max_connections is set to $iMaxConnections.\");\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$aResult['databases'] = $oDBSource->ListDB();\n\t\t\t}\n\t\t\tcatch(Exception $e)\n\t\t\t{\n\t\t\t\t$aResult['databases'] = null;\n\t\t\t}\n\t\t}\n\t\tcatch(Exception $e)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $aResult;\n\t}\n\n\t/**\n\t * Use to test access to MySQL SSL files (key, cert, ca)\n\t *\n\t * @param string $sPath\n\t * @param array $aResult passed by reference, will by updated in case of error\n\t * @param $sErrorMessage\n\t *\n\t * @return bool false if file doesn't exist\n\t * @used-by CheckDbServer\n\t */\n\tprivate static function CheckFileExists($sPath, &$aResult, $sErrorMessage)\n\t{\n\t\tif (!is_readable($sPath))\n\t\t{\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::ERROR, $sErrorMessage);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param array $aResult two keys : 'checks' with CheckResult array, 'databases' with list of databases available\n\t * @param CMDBSource $oDBSource\n\t *\n\t * @return boolean false if DB doesn't meet the minimum version requirement\n\t */\n\tstatic private function CheckDbServerVersion(&$aResult, $oDBSource)\n\t{\n\t\t$sDBVendor= $oDBSource->GetDBVendor();\n\t\t$sDBVersion = $oDBSource->GetDBVersion();\n\t\t$bRet = false;\n\t\t\n\t\tif (version_compare($sDBVersion, self::MYSQL_NOT_VALIDATED_VERSION, '>=') && ($sDBVendor === CMDBSource::ENUM_DB_VENDOR_MYSQL)) \n\t\t{\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::ERROR,\n\t\t\t\t\"Error: Current MySQL version is $sDBVersion. iTop doesn't yet support MySQL \".self::MYSQL_NOT_VALIDATED_VERSION.\" and above.\");\n\t\t\t$bRet = false;\n\t\t}\n\t\telse if (version_compare($sDBVersion, self::MYSQL_MIN_VERSION, '>='))\n\t\t{\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO,\n\t\t\t\t\"Current MySQL version ($sDBVersion), greater than minimum required version (\".self::MYSQL_MIN_VERSION.\")\");\n\n\t\t\t$sMySqlNextMinVersion = self::MYSQL_NEXT_MIN_VERSION; // mandatory before PHP 5.5 (arbitrary expressions), keeping compat because we're in the setup !\n\t\t\tif (!empty($sMySqlNextMinVersion))\n\t\t\t{\n\t\t\t\tif (version_compare($sDBVersion, self::MYSQL_NEXT_MIN_VERSION, '>='))\n\t\t\t\t{\n\t\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO,\n\t\t\t\t\t\t\"Current MySQL version ($sDBVersion), greater than minimum required version for next \".ITOP_APPLICATION.\" release (\".self::MYSQL_NEXT_MIN_VERSION.\")\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::WARNING,\n\t\t\t\t\t\t\"Warning : Current MySQL version is $sDBVersion, minimum required version for next \".ITOP_APPLICATION.\" release will be \".self::MYSQL_NEXT_MIN_VERSION);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$bRet = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::ERROR,\n\t\t\t\t\"Error: Current MySQL version is $sDBVersion, minimum required version is \".self::MYSQL_MIN_VERSION);\n\t\t\t$bRet = false;\n\t\t}\n\n\t\treturn $bRet;\n\t}\n\n\t/**\n\t * @param string $sDBServer\n\t * @param string $sDBUser\n\t * @param string $sDBPwd\n\t * @param bool $bTlsEnabled\n\t * @param string $sTlsCa\n\t *\n\t * @return string\n\t * @throws \\MySQLException\n\t */\n\tstatic public function GetMySQLVersion(\n\t\t$sDBServer, $sDBUser, $sDBPwd, $bTlsEnabled = false, $sTlsCa = null\n\t)\n\t{\n\t\t$oDBSource = new CMDBSource;\n\t\t$oDBSource->Init($sDBServer, $sDBUser, $sDBPwd, '', $bTlsEnabled, $sTlsCa);\n\t\t$sDBVersion = $oDBSource->GetDBVersion();\n\t\treturn $sDBVersion;\n\t}\n\n\tstatic public function AsyncCheckDB($oPage, $aParameters)\n\t{\n\t\t$sDBServer = $aParameters['db_server'];\n\t\t$sDBUser = $aParameters['db_user'];\n\t\t$sDBPwd = $aParameters['db_pwd'];\n\t\t$sDBName = $aParameters['db_name'];\n\n\t\t$bIsWindows = (array_key_exists('WINDIR', $_SERVER) || array_key_exists('windir', $_SERVER));\n\t\tif ($bIsWindows && (preg_match('@([%!\"])@',$sDBPwd) > 0))\n\t\t{\n\t\t\t// Unsuported Password, warn the user\n\t\t\t$oPage->add_ready_script('$(\"#db_info\").html(\"<img src=\\'../images/error.png\\'/>&nbsp;On Windows, the backup won\\'t work because database password contains %, ! or &quot; character\");');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sTlsEnabled = (isset($aParameters['db_tls_enabled'])) ? $aParameters['db_tls_enabled'] : null;\n\t\t\t$sTlsCA = (isset($aParameters['db_tls_ca'])) ? $aParameters['db_tls_ca'] : null;\n\n\t\t\t$oPage->add_ready_script('oXHRCheckDB = null;');\n\n\t\t\t$checks = SetupUtils::CheckDbServer($sDBServer, $sDBUser, $sDBPwd, $sTlsEnabled, $sTlsCA);\n\n\t\t\tif ($checks === false)\n\t\t\t{\n\t\t\t\t// Connection failed, disable the \"Next\" button\n\t\t\t\t$oPage->add_ready_script('$(\"#wiz_form\").data(\"db_connection\", \"error\");');\n\t\t\t\t$oPage->add_ready_script('$(\"#db_info\").html(\"<img src=\\'../images/error.png\\'/>&nbsp;No connection to the database...\");');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aErrors = array();\n\t\t\t\t$aWarnings = array();\n\t\t\t\tforeach ($checks['checks'] as $oCheck)\n\t\t\t\t{\n\t\t\t\t\tif ($oCheck->iSeverity == CheckResult::ERROR)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aErrors[] = $oCheck->sLabel;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($oCheck->iSeverity == CheckResult::WARNING)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aWarnings[] = $oCheck->sLabel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count($aErrors) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add_ready_script('$(\"#wiz_form\").data(\"db_connection\", \"error\");');\n\t\t\t\t\t$oPage->add_ready_script('$(\"#db_info\").html(\\'<img src=\"../images/validation_error.png\"/>&nbsp;<b>Error:</b> '.htmlentities(implode('<br/>', $aErrors), ENT_QUOTES, 'UTF-8').'\\');');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (count($aWarnings) > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add_ready_script('$(\"#wiz_form\").data(\"db_connection\", \"\");');\n\t\t\t\t\t\t$oPage->add_ready_script('$(\"#db_info\").html(\\'<img src=\"../images/error.png\"/>&nbsp;<b>Warning:</b> '.htmlentities(implode('<br/>', $aWarnings), ENT_QUOTES, 'UTF-8').'\\');');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add_ready_script('$(\"#wiz_form\").data(\"db_connection\", \"\");');\n\t\t\t\t\t\t$oPage->add_ready_script('$(\"#db_info\").html(\\'<img src=\"../images/validation_ok.png\"/>&nbsp;Database server connection Ok.\\');');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($checks['databases'] == null)\n\t\t\t\t{\n\t\t\t\t\t$sDBNameInput = '<input id=\"db_name\" name=\"db_name\" size=\"15\" maxlen=\"32\" value=\"'.htmlentities($sDBName, ENT_QUOTES, 'UTF-8').'\"/><span style=\"width:20px;\" id=\"v_db_name\"></span>';\n\t\t\t\t\t$oPage->add_ready_script('$(\"#table_info\").html(\\'<img src=\"../images/error.png\"/>&nbsp;Not enough rights to enumerate the databases\\');');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sDBNameInput = '<select id=\"db_name\" name=\"db_name\">';\n\t\t\t\t\tforeach ($checks['databases'] as $sDatabaseName)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($sDatabaseName != 'information_schema')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$sEncodedName = htmlentities($sDatabaseName, ENT_QUOTES, 'UTF-8');\n\t\t\t\t\t\t\t$sSelected = ($sDatabaseName == $sDBName) ? ' selected ' : '';\n\t\t\t\t\t\t\t$sDBNameInput .= '<option value=\"'.$sEncodedName.'\" '.$sSelected.'>'.$sEncodedName.'</option>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$sDBNameInput .= '</select>';\n\t\t\t\t}\n\t\t\t\t$oPage->add_ready_script('$(\"#db_name_container\").html(\"'.addslashes($sDBNameInput).'\");');\n\t\t\t\t$oPage->add_ready_script('$(\"#db_name\").bind(\"click keyup change\", function() { $(\"#existing_db\").prop(\"checked\", true); WizardUpdateButtons(); });');\n\n\t\t\t}\n\t\t}\n\t\t$oPage->add_ready_script('WizardUpdateButtons();');\n\t}\n\n\t/**\n\t * Helper function to get the available languages from the given directory\n\t * @param $sDir String Path to the dictionary\n\t * @return array of language code => description\n\t */\n\tstatic public function GetAvailableLanguages($sDir)\n\t{\n\t\trequire_once(APPROOT.'/core/coreexception.class.inc.php');\n\t\trequire_once(APPROOT.'/core/dict.class.inc.php');\n\n\t\t$aFiles = scandir($sDir);\n\t\tforeach($aFiles as $sFile)\n\t\t{\n\t\t\tif ($sFile == '.' || $sFile == '..' || $sFile == '.svn' || $sFile == '.git')\n\t\t\t{\n\t\t\t\t// Skip\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$sFilePath = $sDir.'/'.$sFile;\n\t\t\tif (is_file($sFilePath) && preg_match('/^.*dict.*\\.php$/i', $sFilePath, $aMatches))\n\t\t\t{\n\t\t\t\trequire_once($sFilePath);\n\t\t\t}\n\t\t}\n\n\t\treturn Dict::GetLanguages();\n\t}\n\n\tstatic public function GetLanguageSelect($sSourceDir, $sInputName, $sDefaultLanguageCode)\n\t{\n\t\t$sHtml = '<select  id=\"'.$sInputName.'\" name=\"'.$sInputName.'\">';\n\t\t$sSourceDir = APPROOT.'dictionaries/';\n\t\t$aLanguages = SetupUtils::GetAvailableLanguages($sSourceDir);\n\t\tforeach($aLanguages as $sCode => $aInfo)\n\t\t{\n\t\t\t$sSelected = ($sCode == $sDefaultLanguageCode) ? 'selected ' : '';\n\t\t\t$sHtml .= '<option value=\"'.$sCode.'\" '.$sSelected.'>'.htmlentities($aInfo['description'], ENT_QUOTES, 'UTF-8').' ('.htmlentities($aInfo['localized_description'], ENT_QUOTES, 'UTF-8').')</option>';\n\t\t}\n\t\t$sHtml .= '</select></td></tr>';\n\n\t\treturn $sHtml;\n\t}\n\n\t/**\n\t *\n\t * @param $oWizard\n\t * @param bool $bAbortOnMissingDependency ...\n\t * @param array $aModulesToLoad List of modules to search for, defaults to all if ommitted\n\t * @return hash\n\t * @throws Exception\n\t */\n\tpublic static function AnalyzeInstallation($oWizard, $bAbortOnMissingDependency = false, $aModulesToLoad = null)\n\t{\n\t\trequire_once(APPROOT.'/setup/moduleinstaller.class.inc.php');\n\t\t$oConfig = new Config();\n\t\t$sSourceDir = $oWizard->GetParameter('source_dir', '');\n\n\t\tif (strpos($sSourceDir, APPROOT) !== false)\n\t\t{\n\t\t\t$sRelativeSourceDir = str_replace(APPROOT, '', $sSourceDir);\n\t\t}\n\t\telse if (strpos($sSourceDir, $oWizard->GetParameter('previous_version_dir')) !== false)\n\t\t{\n\t\t\t$sRelativeSourceDir = str_replace($oWizard->GetParameter('previous_version_dir'), '', $sSourceDir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow(new Exception('Internal error: AnalyzeInstallation: source_dir is neither under APPROOT nor under previous_installation_dir ???'));\n\t\t}\n\n\n\t\t$aParamValues = array(\n\t\t\t'db_server' => $oWizard->GetParameter('db_server', ''),\n\t\t\t'db_user' => $oWizard->GetParameter('db_user', ''),\n\t\t\t'db_pwd' => $oWizard->GetParameter('db_pwd', ''),\n\t\t\t'db_name' => $oWizard->GetParameter('db_name', ''),\n\t\t\t'db_prefix' => $oWizard->GetParameter('db_prefix', ''),\n\t\t\t'db_tls_enabled' => $oWizard->GetParameter('db_tls_enabled', false),\n\t\t\t'db_tls_ca' => $oWizard->GetParameter('db_tls_ca', ''),\n\t\t\t'source_dir' => $sRelativeSourceDir,\n\t\t);\n\t\t$oConfig->UpdateFromParams($aParamValues, null);\n\t\t$aDirsToScan = array($sSourceDir);\n\n\t\tif (is_dir(APPROOT.'extensions'))\n\t\t{\n\t\t\t$aDirsToScan[] = APPROOT.'extensions';\n\t\t}\n\t\tif (is_dir($oWizard->GetParameter('copy_extensions_from')))\n\t\t{\n\t\t\t$aDirsToScan[] = $oWizard->GetParameter('copy_extensions_from');\n\t\t}\n\t\t$sExtraDir = APPROOT.'data/production-modules/';\n\t\tif (is_dir($sExtraDir))\n\t\t{\n\t\t\t$aDirsToScan[] = $sExtraDir;\n\t\t}\n\t\t$oProductionEnv = new RunTimeEnvironment();\n\t\t$aAvailableModules = $oProductionEnv->AnalyzeInstallation($oConfig, $aDirsToScan, $bAbortOnMissingDependency, $aModulesToLoad);\n\n\t\tforeach($aAvailableModules as $key => $aModule)\n\t\t{\n\t\t\t$bIsExtra = (array_key_exists('root_dir', $aModule) && (strpos($aModule['root_dir'], $sExtraDir) !== false)); // Some modules (root, datamodel) have no 'root_dir'\n\t\t\tif ($bIsExtra)\n\t\t\t{\n\t\t\t\t// Modules in data/production-modules/ are considered as mandatory and always installed\n\t\t\t\t$aAvailableModules[$key]['visible'] = false;\n\t\t\t}\n\t\t}\n\n\t\treturn $aAvailableModules;\n\t}\n\n\t/**\n\t * @param WizardController $oWizard\n\t *\n\t * @return array|bool\n\t */\n\tpublic static function GetApplicationVersion($oWizard)\n\t{\n\t\trequire_once(APPROOT.'/setup/moduleinstaller.class.inc.php');\n\t\t$oConfig = new Config();\n\n\t\t$aParamValues = array(\n\t\t\t'db_server' => $oWizard->GetParameter('db_server', ''),\n\t\t\t'db_user' => $oWizard->GetParameter('db_user', ''),\n\t\t\t'db_pwd' => $oWizard->GetParameter('db_pwd', ''),\n\t\t\t'db_name' => $oWizard->GetParameter('db_name', ''),\n\t\t\t'db_prefix' => $oWizard->GetParameter('db_prefix', ''),\n\t\t\t'db_tls_enabled' => $oWizard->GetParameter('db_tls_enabled', false),\n\t\t\t'db_tls_ca' => $oWizard->GetParameter('db_tls_ca', ''),\n\t\t\t'source_dir' => '',\n\t\t);\n\t\t$oConfig->UpdateFromParams($aParamValues, null);\n\n\t\t$oProductionEnv = new RunTimeEnvironment();\n\t\treturn $oProductionEnv->GetApplicationVersion($oConfig);\n\t}\n\n\t/**\n\t * Checks if the content of a directory matches the given manifest\n\t * @param string $sBaseDir Path to the root directory of iTop\n\t * @param string $sSourceDir Relative path to the directory to check under $sBaseDir\n\t * @param $aManifest\n\t * @param array $aExcludeNames\n\t * @param Hash $aResult Used for recursion\n\t * @return hash Hash array ('added' => array(), 'removed' => array(), 'modified' => array())\n\t * @internal param array $aDOMManifest Array of array('path' => relative_path 'size'=> iSize, 'md5' => sHexMD5)\n\t */\n\tpublic static function CheckDirAgainstManifest($sBaseDir, $sSourceDir, $aManifest, $aExcludeNames = array('.svn', '.git'), $aResult = null)\n\t{\n//echo \"CheckDirAgainstManifest($sBaseDir, $sSourceDir ...)\\n\"; \n\t\tif ($aResult === null)\n\t\t{\n\t\t\t$aResult = array('added' => array(), 'removed' => array(), 'modified' => array());\n\t\t}\n\n\t\tif (substr($sSourceDir, 0, 1) == '/')\n\t\t{\n\t\t\t$sSourceDir = substr($sSourceDir, 1);\n\t\t}\n\n\t\t// Manifest limited to all the files supposed to be located in this directory\n\t\t$aDirManifest = array();\n\t\tforeach($aManifest as $aFileInfo)\n\t\t{\n\t\t\t$sDir = dirname($aFileInfo['path']);\n\t\t\tif ($sDir == '.')\n\t\t\t{\n\t\t\t\t// Hmm... the file seems located at the root of iTop\n\t\t\t\t$sDir = '';\n\t\t\t}\n\t\t\tif ($sDir == $sSourceDir)\n\t\t\t{\n\t\t\t\t$aDirManifest[basename($aFileInfo['path'])] = $aFileInfo;\n\t\t\t}\n\t\t}\n\n//echo \"The manifest contains \".count($aDirManifest).\" files for the directory '$sSourceDir' (and below)\\n\"; \n\n\t\t// Read the content of the directory\n\t\tforeach(glob($sBaseDir.'/'.$sSourceDir .'/*') as $sFilePath)\n\t\t{\n\t\t\t$sFile = basename($sFilePath);\n//echo \"Checking $sFile ($sFilePath)\\n\"; \n\n\t\t\tif (in_array(basename($sFile), $aExcludeNames)) continue;\n\n\t\t\tif(is_dir($sFilePath))\n\t\t\t{\n\t\t\t\t$aResult = self::CheckDirAgainstManifest($sBaseDir, $sSourceDir.'/'.$sFile, $aManifest, $aExcludeNames, $aResult);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!array_key_exists($sFile, $aDirManifest))\n\t\t\t\t{\n//echo \"New file \".$sFile.\" in $sSourceDir\\n\"; \n\t\t\t\t\t$aResult['added'][$sSourceDir.'/'.$sFile] = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aStats = stat($sFilePath);\n\t\t\t\t\tif ($aStats['size'] != $aDirManifest[$sFile]['size'])\n\t\t\t\t\t{\n\t\t\t\t\t\t// Different sizes\n\t\t\t\t\t\t$aResult['modified'][$sSourceDir.'/'.$sFile] = 'Different sizes. Original size: '.$aDirManifest[$sFile]['size'].' bytes, actual file size on disk: '.$aStats['size'].' bytes.';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Same size, compare the md5 signature\n\t\t\t\t\t\t$sMD5 = md5_file($sFilePath);\n\t\t\t\t\t\tif ($sMD5 != $aDirManifest[$sFile]['md5'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aResult['modified'][$sSourceDir.'/'.$sFile] = 'Content modified (MD5 checksums differ).';\n//echo $sSourceDir.'/'.$sFile.\" modified ($sMD5 == {$aDirManifest[$sFile]['md5']})\\n\";\n\t\t\t\t\t\t}\n//else\n//{\n//\techo $sSourceDir.'/'.$sFile.\" unmodified ($sMD5 == {$aDirManifest[$sFile]['md5']})\\n\";\n//}\n\t\t\t\t\t}\n//echo \"Removing \".$sFile.\" from aDirManifest\\n\"; \n\t\t\t\t\tunset($aDirManifest[$sFile]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// What remains in the array are files that were deleted\n\t\tforeach($aDirManifest as $sDeletedFile => $void)\n\t\t{\n\t\t\t$aResult['removed'][$sSourceDir.'/'.$sDeletedFile] = true;\n\t\t}\n\t\treturn $aResult;\n\t}\n\n\tpublic static function CheckDataModelFiles($sManifestFile, $sBaseDir)\n\t{\n\t\t$oXML = simplexml_load_file($sManifestFile);\n\t\t$aManifest = array();\n\t\tforeach($oXML as $oFileInfo)\n\t\t{\n\t\t\t$aManifest[] = array('path' => (string)$oFileInfo->path, 'size' => (int)$oFileInfo->size, 'md5' => (string)$oFileInfo->md5);\n\t\t}\n\n\t\t$sBaseDir = preg_replace('|modules/?$|', '', $sBaseDir);\n\t\t$aResults = self::CheckDirAgainstManifest($sBaseDir, 'modules', $aManifest);\n\n//\t\techo \"<pre>Comparison of \".dirname($sBaseDir).\"/modules against $sManifestFile:\\n\".print_r($aResults, true).\"</pre>\";\n\t\treturn $aResults;\n\t}\n\n\tpublic static function CheckPortalFiles($sManifestFile, $sBaseDir)\n\t{\n\t\t$oXML = simplexml_load_file($sManifestFile);\n\t\t$aManifest = array();\n\t\tforeach($oXML as $oFileInfo)\n\t\t{\n\t\t\t$aManifest[] = array('path' => (string)$oFileInfo->path, 'size' => (int)$oFileInfo->size, 'md5' => (string)$oFileInfo->md5);\n\t\t}\n\n\t\t$aResults = self::CheckDirAgainstManifest($sBaseDir, 'portal', $aManifest);\n\n//\t\techo \"<pre>Comparison of \".dirname($sBaseDir).\"/portal:\\n\".print_r($aResults, true).\"</pre>\";\n\t\treturn $aResults;\n\t}\n\n\tpublic static function CheckApplicationFiles($sManifestFile, $sBaseDir)\n\t{\n\t\t$oXML = simplexml_load_file($sManifestFile);\n\t\t$aManifest = array();\n\t\tforeach($oXML as $oFileInfo)\n\t\t{\n\t\t\t$aManifest[] = array('path' => (string)$oFileInfo->path, 'size' => (int)$oFileInfo->size, 'md5' => (string)$oFileInfo->md5);\n\t\t}\n\n\t\t$aResults = array('added' => array(), 'removed' => array(), 'modified' => array());\n\t\tforeach(array('addons', 'core', 'dictionaries', 'js', 'application', 'css', 'pages', 'synchro', 'webservices') as $sDir)\n\t\t{\n\t\t\t$aTmp = self::CheckDirAgainstManifest($sBaseDir, $sDir, $aManifest);\n\t\t\t$aResults['added'] = array_merge($aResults['added'], $aTmp['added']);\n\t\t\t$aResults['modified'] = array_merge($aResults['modified'], $aTmp['modified']);\n\t\t\t$aResults['removed'] = array_merge($aResults['removed'], $aTmp['removed']);\n\t\t}\n\n//\t\techo \"<pre>Comparison of \".dirname($sBaseDir).\"/portal:\\n\".print_r($aResults, true).\"</pre>\";\n\t\treturn $aResults;\n\t}\n\n\t/**\n\t * @param string $sInstalledVersion\n\t * @param string $sSourceDir\n\t * @return bool|hash\n\t * @throws Exception\n\t */\n\tpublic static function CheckVersion($sInstalledVersion, $sSourceDir)\n\t{\n\t\t$sManifestFilePath = self::GetVersionManifest($sInstalledVersion);\n\t\tif ($sSourceDir != '')\n\t\t{\n\t\t\tif (file_exists($sManifestFilePath))\n\t\t\t{\n\t\t\t\t$aDMchanges = self::CheckDataModelFiles($sManifestFilePath, $sSourceDir);\n\t\t\t\t//$aPortalChanges = self::CheckPortalFiles($sManifestFilePath, $sSourceDir);\n\t\t\t\t//$aCodeChanges = self::CheckApplicationFiles($sManifestFilePath, $sSourceDir);\n\n\t\t\t\t//echo(\"Changes detected compared to $sInstalledVersion:<br/>DataModel:<br/><pre>\".print_r($aDMchanges, true).\"</pre>\");\n\t\t\t\t//echo(\"Changes detected compared to $sInstalledVersion:<br/>DataModel:<br/><pre>\".print_r($aDMchanges, true).\"</pre><br/>Portal:<br/><pre>\".print_r($aPortalChanges, true).\"</pre><br/>Code:<br/><pre>\".print_r($aCodeChanges, true).\"</pre>\");\n\t\t\t\treturn $aDMchanges;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow(new Exception(\"Cannot check version '$sInstalledVersion', no source directory provided to check the files.\"));\n\t\t}\n\t}\n\n\tpublic static function GetVersionManifest($sInstalledVersion)\n\t{\n\t\tif (preg_match('/^([0-9]+)\\./', $sInstalledVersion, $aMatches))\n\t\t{\n\t\t\treturn APPROOT.'datamodels/'.$aMatches[1].'.x/manifest-'.$sInstalledVersion.'.xml';\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static function CheckWritableDirs($aWritableDirs)\n\t{\n\t\t$aNonWritableDirs = array();\n\t\tforeach($aWritableDirs as $sDir)\n\t\t{\n\t\t\t$sFullPath = APPROOT.$sDir;\n\t\t\tif (is_dir($sFullPath) && !is_writable($sFullPath))\n\t\t\t{\n\t\t\t\t$aNonWritableDirs[APPROOT.$sDir] = new CheckResult(CheckResult::ERROR, \"The directory <b>'\".APPROOT.$sDir.\"'</b> exists but is not writable for the application.\");\n\t\t\t}\n\t\t\telse if (file_exists($sFullPath) && !is_dir($sFullPath))\n\t\t\t{\n\t\t\t\t$aNonWritableDirs[APPROOT.$sDir] = new CheckResult(CheckResult::ERROR, ITOP_APPLICATION.\" needs the directory <b>'\".APPROOT.$sDir.\"'</b> to be writable. However <i>file</i> named <b>'\".APPROOT.$sDir.\"'</b> already exists.\");\n\t\t\t}\n\t\t\telse if (!is_dir($sFullPath) && !is_writable(APPROOT))\n\t\t\t{\n\t\t\t\t$aNonWritableDirs[APPROOT.$sDir] = new CheckResult(CheckResult::ERROR, ITOP_APPLICATION.\" needs the directory <b>'\".APPROOT.$sDir.\"'</b> to be writable. The directory <b>'\".APPROOT.$sDir.\"'</b> does not exist and '\".APPROOT.\"' is not writable, the application cannot create the directory '$sDir' inside it.\");\n\t\t\t}\n\t\t}\n\t\treturn $aNonWritableDirs;\n\t}\n\n\tpublic static function GetLatestDataModelDir()\n\t{\n\t\t$sBaseDir = APPROOT.'datamodels';\n\n\t\t$aDirs = glob($sBaseDir.'/*', GLOB_MARK | GLOB_ONLYDIR);\n\t\tif ($aDirs !== false)\n\t\t{\n\t\t\tsort($aDirs);\n\t\t\t// Windows: there is a backslash at the end (though the path is made of slashes!!!)\n\t\t\t$sDir = basename(array_pop($aDirs));\n\t\t\t$sRes = $sBaseDir.'/'.$sDir.'/';\n\t\t\treturn $sRes;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static function GetCompatibleDataModelDir($sInstalledVersion)\n\t{\n\t\tif (preg_match('/^([0-9]+)\\./', $sInstalledVersion, $aMatches))\n\t\t{\n\t\t\t$sMajorVersion = $aMatches[1];\n\t\t\t$sDir = APPROOT.'datamodels/'.$sMajorVersion.'.x/';\n\t\t\tif (is_dir($sDir))\n\t\t\t{\n\t\t\t\treturn $sDir;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic public function GetDataModelVersion($sDatamodelDir)\n\t{\n\t\t$sVersionFile = $sDatamodelDir.'version.xml';\n\t\tif (file_exists($sVersionFile))\n\t\t{\n\t\t\t$oParams = new XMLParameters($sVersionFile);\n\t\t\treturn $oParams->Get('version');\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns an array of xml nodes describing the licences.\n\t * @param $sEnv string|null Execution environment. If present loads licenses only for installed modules else loads all licenses available.\n\t * @return array Licenses list.\n\t */\n\tstatic public function GetLicenses($sEnv = null)\n\t{\n\t\t$aLicenses = array();\n\t\t$aLicenceFiles = glob(APPROOT.'setup/licenses/*.xml');\n\t\tif (empty($sEnv))\n\t\t{\n\t\t\t$aLicenceFiles = array_merge($aLicenceFiles, glob(APPROOT.'datamodels/*/*/license.*.xml'));\n\t\t\t$aLicenceFiles = array_merge($aLicenceFiles, glob(APPROOT.'extensions/*/license.*.xml'));\n\t\t\t$aLicenceFiles = array_merge($aLicenceFiles, glob(APPROOT.'data/*-modules/*/license.*.xml'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aLicenceFiles = array_merge($aLicenceFiles, glob(APPROOT.'env-'.$sEnv.'/*/license.*.xml'));\n\t\t}\n\t\tforeach ($aLicenceFiles as $sFile)\n\t\t{\n\t\t\t$oXml = simplexml_load_file($sFile);\n\t\t\tif (!empty($oXml->license))\n\t\t\t{\n\t\t\t\tforeach ($oXml->license as $oLicense)\n\t\t\t\t{\n\t\t\t\t\t$aLicenses[(string)$oLicense->product] = $oLicense;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $aLicenses;\n\t}\n\n\t/**\n\t * @return string path to the log file where the create and/or alter queries are written\n\t */\n\tstatic public function GetSetupQueriesFilePath()\n\t{\n\t\treturn APPROOT.'log/setup-queries-'.strftime('%Y-%m-%d_%H_%M').'.sql';\n\t}\n}\n\n/**\n * Helper class to write rules (as PHP expressions) in the 'auto_select' field of the 'module'\n */\nclass SetupInfo\n{\n\tstatic $aSelectedModules = array();\n\n\t/**\n\t * Called by the setup process to initializes the list of selected modules. Do not call this method\n\t * from an 'auto_select' rule\n\t * @param hash $aModules\n\t * @return void\n\t */\n\tstatic function SetSelectedModules($aModules)\n\t{\n\t\tself::$aSelectedModules = $aModules;\n\t}\n\n\t/**\n\t * Returns true if a module is selected (as a consequence of the end-user's choices,\n\t * or because the module is hidden, or mandatory, or because of a previous auto_select rule)\n\t * @param string $sModuleId The identifier of the module (without the version number. Example: itop-config-mgmt)\n\t * @return boolean True if the module is already selected, false otherwise\n\t */\n\tstatic function ModuleIsSelected($sModuleId)\n\t{\n\t\treturn (array_key_exists($sModuleId, self::$aSelectedModules));\n\t}\n}\n", "<?php\n// Copyright (C) 2010-2012 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n/**\n * Engine for displaying the various pages of a \"wizard\"\n * Each \"step\" of the wizard must be implemented as \n * separate class derived from WizardStep. each 'step' can also have its own\n * internal 'state' for developing complex wizards.\n * The WizardController provides the \"<< Back\" feature by storing a stack\n * of the previous screens. The WizardController also maintains from page\n * to page a list of \"parameters\" to be dispayed/edited by each of the steps.\n * @copyright   Copyright (C) 2010-2012 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nclass WizardController\n{\n\tprotected $aSteps;\n\tprotected $sInitialStepClass;\n\tprotected $sInitialState;\n\tprotected $aParameters;\n\t\n\t/**\n\t * Initiailization of the wizard controller\n\t * @param string $sInitialStepClass Class of the initial step/page of the wizard\n\t * @param string $sInitialState Initial state of the initial page (if this class manages states)\n\t */\n\tpublic function __construct($sInitialStepClass, $sInitialState = '')\n\t{\n\t\t$this->sInitialStepClass = $sInitialStepClass;\n\t\t$this->sInitialState = $sInitialState;\n\t\t$this->aParameters = array();\n\t\t$this->aSteps = array();\n\t}\n\t\n\t/**\n\t * Pushes information about the current step onto the stack\n\t * @param hash $aStepInfo Array('class' => , 'state' => )\n\t */\n\tprotected function PushStep($aStepInfo)\n\t{\n\t\tarray_push($this->aSteps, $aStepInfo);\n\t}\n\t\n\t/**\n\t * Removes information about the previous step from the stack\n\t * @return hash Array('class' => , 'state' => )\n\t */\n\tprotected function PopStep()\n\t{\n\t\treturn array_pop($this->aSteps);\n\t}\n\t\n\t/**\n\t * Reads a \"persistent\" parameter from the wizard's context\n\t * @param string $sParamCode The code identifying this parameter\n\t * @param mixed $defaultValue The default value of the parameter in case it was not set\n\t */\n\tpublic function GetParameter($sParamCode, $defaultValue = '')\n\t{\n\t\tif (array_key_exists($sParamCode, $this->aParameters))\n\t\t{\n\t\t\treturn $this->aParameters[$sParamCode];\n\t\t}\n\t\treturn $defaultValue;\n\t}\n\n\t/**\n\t * Stores a \"persistent\" parameter in the wizard's context\n\t * @param string $sParamCode The code identifying this parameter\n\t * @param mixed $value The value to store\n\t */\n\tpublic function SetParameter($sParamCode, $value)\n\t{\n\t\t$this->aParameters[$sParamCode] = $value;\n\t}\n\t\n\t/**\n\t * Stores the value of the page's parameter in a \"persistent\" parameter in the wizard's context\n\t * @param string $sParamCode The code identifying this parameter\n\t * @param mixed $defaultValue The default value for the parameter\n\t * @param string $sSanitizationFilter A 'sanitization' fitler. Default is 'raw_data', which means no filtering\n\t */\n\tpublic function SaveParameter($sParamCode, $defaultValue, $sSanitizationFilter = 'raw_data')\n\t{\n\t\t$value = utils::ReadParam($sParamCode, $defaultValue, false, $sSanitizationFilter);\n\t\t$this->aParameters[$sParamCode] = $value;\n\t}\n\t\n\t/**\n\t * Starts the wizard by displaying it in its initial state\n\t */\n\tprotected function Start()\n\t{\n\t\t$sCurrentStepClass = $this->sInitialStepClass;\n\t\t$oStep = new $sCurrentStepClass($this, $this->sInitialState);\n\t\t$this->DisplayStep($oStep);\n\t}\n\t/**\n\t * Progress towards the next step of the wizard\n\t * @throws Exception\n\t */\n\tprotected function Next()\n\t{\n\t\t$sCurrentStepClass = utils::ReadParam('_class', $this->sInitialStepClass);\n\t\t$sCurrentState = utils::ReadParam('_state', $this->sInitialState);\n\t\t/** @var \\WizardStep $oStep */\n\t\t$oStep = new $sCurrentStepClass($this, $sCurrentState);\n\t\tif ($oStep->ValidateParams($sCurrentState))\n\t\t{\n\t\t\t$this->PushStep(array('class' => $sCurrentStepClass, 'state' => $sCurrentState));\n\t\t\t$aPossibleSteps = $oStep->GetPossibleSteps();\n\t\t\t$aNextStepInfo = $oStep->ProcessParams(true); // true => moving forward\n\t\t\tif (in_array($aNextStepInfo['class'], $aPossibleSteps))\n\t\t\t{\n\t\t\t\t$oNextStep = new $aNextStepInfo['class']($this, $aNextStepInfo['state']);\n\t\t\t\t$this->DisplayStep($oNextStep);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new Exception(\"Internal error: Unexpected next step '{$aNextStepInfo['class']}'. The possible next steps are: \".implode(', ', $aPossibleSteps));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->DisplayStep($oStep);\n\t\t}\n\t}\n\t/**\n\t * Move one step back\n\t */\n\tprotected function Back()\n\t{\n\t\t// let the current step save its parameters\n\t\t$sCurrentStepClass = utils::ReadParam('_class', $this->sInitialStepClass);\n\t\t$sCurrentState = utils::ReadParam('_state', $this->sInitialState);\n\t\t$oStep = new $sCurrentStepClass($this, $sCurrentState);\n\t\t$aNextStepInfo = $oStep->ProcessParams(false); // false => Moving backwards\n\t\t\n\t\t// Display the previous step\n\t\t$aCurrentStepInfo = $this->PopStep();\n\t\t$oStep = new $aCurrentStepInfo['class']($this, $aCurrentStepInfo['state']);\n\t\t$this->DisplayStep($oStep);\n\t}\n\t\n\t/**\n\t * Displays the specified 'step' of the wizard\n\t * @param WizardStep $oStep The 'step' to display\n\t */\n\tprotected function DisplayStep(WizardStep $oStep)\n\t{\n\t\t$oPage = new SetupPage($oStep->GetTitle());\n\t\tif ($oStep->RequiresWritableConfig())\n\t\t{\n\t\t\t$sConfigFile = utils::GetConfigFilePath();\n\t\t\tif (file_exists($sConfigFile))\n\t\t\t{\n\t\t\t\t// The configuration file already exists\n\t\t\t\tif (!is_writable($sConfigFile))\n\t\t\t\t{\n\t\t\t\t\t$sRelativePath = utils::GetConfigFilePathRelative();\n\t\t\t\t\t$oP = new SetupPage('Installation Cannot Continue');\n\t\t\t\t\t$oP->add(\"<h2>Fatal error</h2>\\n\");\n\t\t\t\t\t$oP->error(\"<b>Error:</b> the configuration file '\".$sRelativePath.\"' already exists and cannot be overwritten.\");\n\t\t\t\t\t$oP->p(\"The wizard cannot modify the configuration file for you. If you want to upgrade \".ITOP_APPLICATION.\", make sure that the file '<b>\".$sRelativePath.\"</b>' can be modified by the web server.\");\n\t\t\t\t\t$oP->p('<button type=\"button\" onclick=\"window.location.reload()\">Reload</button>');\n\t\t\t\t\t$oP->output();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t\t$oPage->add_linked_script('../setup/setup.js');\n\t\t$oPage->add_script(\"function CanMoveForward()\\n{\\n\".$oStep->JSCanMoveForward().\"\\n}\\n\");\n\t\t$oPage->add_script(\"function CanMoveBackward()\\n{\\n\".$oStep->JSCanMoveBackward().\"\\n}\\n\");\n\t\t$oPage->add('<form id=\"wiz_form\" method=\"post\">');\n\t\t$oStep->Display($oPage);\n\t\t\n\t\t// Add the back / next buttons and the hidden form\n\t\t// to store the parameters\n\t\t$oPage->add('<input type=\"hidden\" id=\"_class\" name=\"_class\" value=\"'.get_class($oStep).'\"/>');\n\t\t$oPage->add('<input type=\"hidden\" id=\"_state\" name=\"_state\" value=\"'.$oStep->GetState().'\"/>');\n\t\tforeach($this->aParameters as $sCode => $value)\n\t\t{\n\t\t\t$oPage->add('<input type=\"hidden\" name=\"_params['.$sCode.']\" value=\"'.htmlentities($value, ENT_QUOTES, 'UTF-8').'\"/>');\n\t\t}\n\n\t\t$oPage->add('<input type=\"hidden\" name=\"_steps\" value=\"'.htmlentities(json_encode($this->aSteps), ENT_QUOTES, 'UTF-8').'\"/>');\n\t\t$oPage->add('<table style=\"width:100%;\"><tr>');\n\t\tif ((count($this->aSteps) > 0) && ($oStep->CanMoveBackward()))\n\t\t{\n\t\t\t$oPage->add('<td style=\"text-align: left\"><button id=\"btn_back\" type=\"submit\" name=\"operation\" value=\"back\"> &lt;&lt; Back </button></td>');\n\t\t}\n\t\tif ($oStep->CanMoveForward())\n\t\t{\n\t\t\t$oPage->add('<td style=\"text-align:right;\"><button id=\"btn_next\" class=\"default\" type=\"submit\" name=\"operation\" value=\"next\">'.htmlentities($oStep->GetNextButtonLabel(), ENT_QUOTES, 'UTF-8').'</button></td>');\n\t\t}\n\t\t$oPage->add('</tr></table>');\n\t\t$oPage->add(\"</form>\");\n\t\t$oPage->add('<div id=\"async_action\" style=\"display:none;overflow:auto;max-height:100px;color:#F00;font-size:small;\"></div>'); // The div may become visible in case of error\n\n\t\t// Hack to have the \"Next >>\" button, be the default button, since the first submit button in the form is the default one\n\t\t$oPage->add_ready_script(\n<<<EOF\n\n$('form').each(function () {\n\tvar thisform = $(this);\n\t\tthisform.prepend(thisform.find('button.default').clone().removeAttr('id').prop('disabled', false).css({\n\t\tposition: 'absolute',\n\t\tleft: '-999px',\n\t\ttop: '-999px',\n\t\theight: 0,\n\t\twidth: 0\n\t}));\n});\n$('#btn_back').click(function() { $('#wiz_form').data('back', true); });\n\n$('#wiz_form').submit(function() {\n\tif ($(this).data('back'))\n\t{\n\t\treturn CanMoveBackward();\n\t}\n\telse\n\t{\n\t\treturn CanMoveForward();\n\t} \n});\n\n$('#wiz_form').data('back', false);\nWizardUpdateButtons();\n\nEOF\n\t\t);\n\t\t$oPage->output();\n\t}\n\t/**\n\t * Make the wizard run: Start, Next or Back depending WizardUpdateButtons();\non the page's parameters\n\t */\n\tpublic function Run()\n\t{\n\t\t$sOperation = utils::ReadParam('operation');\n\t\t$this->aParameters = utils::ReadParam('_params', array(), false, 'raw_data');\n\t\t$this->aSteps  = json_decode(utils::ReadParam('_steps', '[]', false, 'raw_data'), true /* bAssoc */);\n\t\t\n\t\tswitch($sOperation)\n\t\t{\n\t\t\tcase 'next':\n\t\t\t$this->Next();\n\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'back':\n\t\t\t$this->Back();\n\t\t\tbreak;\n\t\t\t\n\t\t\tdefault:\n\t\t\t$this->Start();\n\t\t}\n\t}\n\t\n\t/**\n\t * Provides information about the structure/workflow of the wizard by listing\n\t * the possible list of 'steps' and their dependencies\n\t * @param string $sStep Name of the class to start from (used for recursion)\n\t * @param hash $aAllSteps List of steps (used for recursion)\n\t */\n\tpublic function DumpStructure($sStep = '', $aAllSteps = null)\n\t{\n\t\tif ($aAllSteps == null) $aAllSteps = array();\n\t\tif ($sStep == '') $sStep = $this->sInitialStepClass;\n\t\t\n\t\t$oStep = new $sStep($this, '');\n\t\t$aAllSteps[$sStep] = $oStep->GetPossibleSteps();\n\t\tforeach($aAllSteps[$sStep] as $sNextStep)\n\t\t{\n\t\t\tif (!array_key_exists($sNextStep, $aAllSteps))\n\t\t\t{\n\t\t\t\t$aAllSteps = $this->DumpStructure($sNextStep , $aAllSteps);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $aAllSteps;\n\t}\n\t\n\t/**\n\t * Dump the wizard's structure as a string suitable to produce a chart\n\t * using graphviz's \"dot\" program\n\t * @return string The 'dot' formatted output\n\t */\n\tpublic function DumpStructureAsDot()\n\t{\n\t\t$aAllSteps = $this->DumpStructure();\n\t\t$sOutput = \"digraph finite_state_machine {\\n\";\n\t\t//$sOutput .= \"\\trankdir=LR;\";\n\t\t$sOutput .= \"\\tsize=\\\"10,12\\\"\\n\";\n\t\t\n\t\t$aDeadEnds = array($this->sInitialStepClass);\n\t\tforeach($aAllSteps as $sStep => $aNextSteps)\n\t\t{\n\t\t\tif (count($aNextSteps) == 0)\n\t\t\t{\n\t\t\t\t$aDeadEnds[] = $sStep;\n\t\t\t}\n\t\t}\n\t\t$sOutput .= \"\\tnode [shape = doublecircle]; \".implode(' ', $aDeadEnds).\";\\n\";\n\t\t$sOutput .= \"\\tnode [shape = box];\\n\";\n\t\tforeach($aAllSteps as $sStep => $aNextSteps)\n\t\t{\n\t\t\t$oStep = new $sStep($this, '');\n\t\t\t$sOutput .= \"\\t$sStep [ label = \\\"\".$oStep->GetTitle().\"\\\"];\\n\";\n\t\t\tif (count($aNextSteps) > 0)\n\t\t\t{\n\t\t\t\tforeach($aNextSteps as $sNextStep)\n\t\t\t\t{\n\t\t\t\t\t$sOutput .= \"\\t$sStep -> $sNextStep;\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$sOutput .= \"}\\n\";\n\t\treturn $sOutput;\n\t}\n}\n\n/**\n * Abstract class to build \"steps\" for the wizard controller\n * If a step needs to maintain an internal \"state\" (for complex steps)\n * then it's up to the derived class to implement the behavior based on\n * the internal 'sCurrentState' variable.\n * @copyright   Copyright (C) 2010-2012 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nabstract class WizardStep\n{\n\t/**\n\t * A reference to the WizardController\n\t * @var WizardController\n\t */\n\tprotected $oWizard;\n\t/**\n\t * Current 'state' of the wizard step. Simple 'steps' can ignore it\n\t * @var string\n\t */\n\tprotected $sCurrentState;\n\t\n\tpublic function __construct(WizardController $oWizard, $sCurrentState)\n\t{\n\t\t$this->oWizard = $oWizard;\n\t\t$this->sCurrentState = $sCurrentState;\n\t}\n\t\n\tpublic function GetState()\n\t{\n\t\treturn $this->sCurrentState;\n\t}\n\t\n\t/**\n\t * Displays the wizard page for the current class/state\n\t * The page can contain any number of \"<input/>\" fields, but no \"<form>...</form>\" tag\n\t * The name of the input fields (and their id if one is supplied) MUST NOT start with \"_\"\n\t * (this is reserved for the wizard's own parameters)\n\t * @return void\n\t */\n\tabstract public function Display(WebPage $oPage);\n\n\t/**\n\t * Processes the page's parameters and (if moving forward) returns the next step/state to be displayed\n\t * @param bool $bMoveForward True if the wizard is moving forward 'Next >>' button pressed, false otherwise\n\t * @return hash array('class' => $sNextClass, 'state' => $sNextState)\n\t */\n\tabstract public function ProcessParams($bMoveForward = true);\n\n\t/**\n\t * Returns the list of possible steps from this step forward\n\t * @return array Array of strings (step classes)\n\t */\n\tabstract public function GetPossibleSteps();\n\n\t/**\n\t * Returns title of the current step\n\t * @return string The title of the wizard page for the current step\n\t */\n\tabstract public function GetTitle();\n\t\n\t/**\n\t * Tells whether the parameters are Ok to move forward\n\t * @return boolean True to move forward, false to stey on the same step\n\t */\n\tpublic function ValidateParams()\n\t{\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Tells whether this step/state is the last one of the wizard (dead-end)\n\t * @return boolean True if the 'Next >>' button should be displayed\n\t */\n\tpublic function CanMoveForward()\n\t{\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn 'return true;';\n\t}\n\t\n\t/**\n\t * Returns the label for the \" Next >> \" button\n\t * @return string The label for the button\n\t */\n\tpublic function GetNextButtonLabel()\n\t{\n\t\treturn ' Next >> ';\n\t}\n\t\n\t/**\n\t * Tells whether this step/state allows to go back or not\n\t * @return boolean True if the '<< Back' button should be displayed\n\t */\n\tpublic function CanMoveBackward()\n\t{\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Tells whether the \"Back\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveBackward()\n\t{\n\t\treturn 'return true;';\n\t}\n\n\t/**\n\t * Tells whether this step of the wizard requires that the configuration file be writable\n\t * @return bool True if the wizard will possibly need to modify the configuration at some point\n\t */\n\tpublic function RequiresWritableConfig()\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * Overload this function to implement asynchronous action(s) (AJAX)\n\t * @param string $sCode The code of the action (if several actions need to be distinguished)\n\t * @param hash $aParameters The action's parameters name => value\n\t */\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t}\n}\n\n/*\n * Example of a simple Setup Wizard with some parameters to store\n * the installation mode (install | upgrade) and a simple asynchronous\n * (AJAX) action.\n * \n * The setup wizard is executed by the following code:\n * \n * $oWizard = new WizardController('Step1');\n * $oWizard->Run();\n *\nclass Step1 extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Welcome';\n\t}\n\t\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('Step2', 'Step2bis');\n\t}\n\t\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$sNextStep = '';\n\t\t$sInstallMode = utils::ReadParam('install_mode');\n\t\tif ($sInstallMode == 'install')\n\t\t{\n\t\t\t$this->oWizard->SetParameter('install_mode', 'install');\n\t\t\t$sNextStep = 'Step2';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->oWizard->SetParameter('install_mode', 'upgrade');\n\t\t\t$sNextStep = 'Step2bis';\n\t\t\t\n\t\t}\n\t\treturn array('class' => $sNextStep, 'state' => '');\n\t}\n\t\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->p('This is Step 1!');\n\t\t$sInstallMode = $this->oWizard->GetParameter('install_mode', 'install');\n\t\t$sChecked = ($sInstallMode == 'install') ? ' checked ' : '';\n\t\t$oPage->p('<input type=\"radio\" name=\"install_mode\" value=\"install\"'.$sChecked.'/> Install');\n\t\t$sChecked = ($sInstallMode == 'upgrade') ? ' checked ' : '';\n\t\t$oPage->p('<input type=\"radio\" name=\"install_mode\" value=\"upgrade\"'.$sChecked.'/> Upgrade');\n\t}\n}\n\nclass Step2 extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Installation Parameters';\n\t}\n\t\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('Step3');\n\t}\n\t\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => 'Step3', 'state' => '');\n\t}\n\t\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->p('This is Step 2! (Installation)');\n\t}\n}\n\nclass Step2bis extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Upgrade Parameters';\n\t}\n\t\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('Step2ter');\n\t}\n\t\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$sUpgradeInfo = utils::ReadParam('upgrade_info');\n\t\t$this->oWizard->SetParameter('upgrade_info', $sUpgradeInfo);\n\t\t$sAdditionalUpgradeInfo = utils::ReadParam('additional_upgrade_info');\n\t\t$this->oWizard->SetParameter('additional_upgrade_info', $sAdditionalUpgradeInfo);\n\t\treturn array('class' => 'Step2ter', 'state' => '');\n\t}\n\t\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->p('This is Step 2bis! (Upgrade)');\n\t\t$sUpgradeInfo = $this->oWizard->GetParameter('upgrade_info', '');\n\t\t$oPage->p('Type your name here: <input type=\"text\" id=\"upgrade_info\" name=\"upgrade_info\" value=\"'.$sUpgradeInfo.'\" size=\"20\"/><span id=\"v_upgrade_info\"></span>');\n\t\t$sAdditionalUpgradeInfo = $this->oWizard->GetParameter('additional_upgrade_info', '');\n\t\t$oPage->p('The installer replies: <input type=\"text\" name=\"additional_upgrade_info\" value=\"'.$sAdditionalUpgradeInfo.'\" size=\"20\"/>');\n\t\t\n\t\t$oPage->add_ready_script(\"$('#upgrade_info').change(function() {\n\t\t\t$('#v_upgrade_info').html('<img src=\\\"../images/indicator.gif\\\"/>');\n\t\t\tWizardAsyncAction('', { upgrade_info: $('#upgrade_info').val() }); });\");\n\t}\n\t\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\tusleep(300000); // 300 ms\n\t\t$sName = $aParameters['upgrade_info'];\n\t\t$sReply = addslashes(\"Hello \".$sName);\n\t\t\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#v_upgrade_info\").html('');\n\t$(\"input[name=additional_upgrade_info]\").val(\"$sReply\");\nEOF\n\t\t);\n\t}\n}\n\nclass Step2ter extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Additional Upgrade Info';\n\t}\n\t\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('Step3');\n\t}\n\t\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => 'Step3', 'state' => '');\n\t}\n\t\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->p('This is Step 2ter! (Upgrade)');\n\t}\n}\n\nclass Step3 extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Installation Complete';\n\t}\n\t\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array();\n\t}\n\t\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => '', 'state' => '');\n\t}\n\t\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->p('This is the FINAL Step');\n\t}\n\t\n\tpublic function CanMoveForward()\n\t{\n\t\treturn  false;\n\t}\n}\n\nEnd of the example */", "<?php\n// Copyright (C) 2010-2017 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n/**\n * All the steps of the iTop installation wizard\n * @copyright   Copyright (C) 2010-2017 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nrequire_once(APPROOT.'setup/setuputils.class.inc.php');\nrequire_once(APPROOT.'setup/parameters.class.inc.php');\nrequire_once(APPROOT.'setup/applicationinstaller.class.inc.php');\nrequire_once(APPROOT.'setup/parameters.class.inc.php');\nrequire_once(APPROOT.'core/mutex.class.inc.php');\nrequire_once(APPROOT.'setup/extensionsmap.class.inc.php');\n\n/**\n * First step of the iTop Installation Wizard: Welcome screen\n */\nclass WizStepWelcome extends WizardStep\n{\n\tprotected $bCanMoveForward;\n\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Welcome to '.ITOP_APPLICATION.' version '.ITOP_VERSION;\n\t}\n\n\t/**\n\t * Returns the label for the \" Next >> \" button\n\t * @return string The label for the button\n\t */\n\tpublic function GetNextButtonLabel()\n\t{\n\t\treturn ' Continue >> ';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepInstallOrUpgrade');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\tif (!is_dir(APPROOT.'data'))\n\t\t{\n\t\t\tmkdir(APPROOT.'data');\n\t\t}\n\t\tif (!is_dir(APPROOT.'data/setup'))\n\t\t{\n\t\t\tmkdir(APPROOT.'data/setup');\n\t\t}\n\t\t$sUID = hash('sha256', rand());\n\t\tfile_put_contents(APPROOT.'data/setup/authent', $sUID);\n\t\t$this->oWizard->SetParameter('authent', $sUID);\n\t\treturn array('class' => 'WizStepInstallOrUpgrade', 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t// Store the misc_options for the future...\n\t\t$aMiscOptions = utils::ReadParam('option', array(), false, 'raw_data');\n\t\t$sMiscOptions = $this->oWizard->GetParameter('misc_options', json_encode($aMiscOptions));\n\t\t$this->oWizard->SetParameter('misc_options', $sMiscOptions);\n\n\t\t$oPage->add(\"<!--[if lt IE 8]><div id=\\\"old_ie\\\"></div><![endif]-->\");\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t\tif ($('#old_ie').length > 0)\n\t\t{\n\t\t\talert(\"Internet Explorer version 7 or older is NOT supported! (Check that IE is not running in compatibility mode)\");\n\t\t}\nEOF\n\t\t);\n\t\t$oPage->add('<h1>'.ITOP_APPLICATION.' Installation Wizard</h1>');\n\t\t$aResults = SetupUtils::CheckPhpAndExtensions();\n\t\t$this->bCanMoveForward = true;\n\t\t$aInfo = array();\n\t\t$aWarnings = array();\n\t\t$aErrors = array();\n\t\tforeach($aResults as $oCheckResult)\n\t\t{\n\t\t\tswitch($oCheckResult->iSeverity)\n\t\t\t{\n\t\t\t\tcase CheckResult::ERROR:\n\t\t\t\t$aErrors[] = $oCheckResult->sLabel;\n\t\t\t\t$this->bCanMoveForward = false;\n\t\t\t\tbreak;\n\n\t\t\t\tcase CheckResult::WARNING:\n\t\t\t\t$aWarnings[] = $oCheckResult->sLabel;\n\t\t\t\tbreak;\n\n\t\t\t\tcase CheckResult::INFO:\n\t\t\t\t$aInfo[] = $oCheckResult->sLabel;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$sStyle = 'style=\"display:none;max-height:196px;overflow:auto;\"';\n\t\t$sToggleButtons = '<button type=\"button\" id=\"show_details\" onclick=\"$(\\'#details\\').toggle(); $(this).toggle(); $(\\'#hide_details\\').toggle();\">Show details</button><button type=\"button\" id=\"hide_details\" style=\"display:none;\" onclick=\"$(\\'#details\\').toggle(); $(this).toggle(); $(\\'#show_details\\').toggle();\">Hide details</button>';\n\t\tif (count($aErrors)> 0)\n\t\t{\n\t\t\t$sStyle = 'style=\"max-height:196px;overflow:auto;\"';\n\t\t\t$sImage = \"stop-mid.png\";\n\t\t\t$sTitle = count($aErrors).' Error(s), '.count($aWarnings).' Warning(s).';\n\t\t}\n\t\telse if (count($aWarnings)> 0)\n\t\t{\n\t\t\t$sTitle = count($aWarnings).' Warning(s) '.$sToggleButtons;\n\t\t\t$sImage = \"messagebox_warning-mid.png\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sTitle = 'Ok. '.$sToggleButtons;\n\t\t\t$sImage = \"clean-mid.png\";\n\t\t}\n\t\t$oPage->add('<h2>Prerequisites validation: ');\n\t\t$oPage->add(\"<img style=\\\"vertical-align:middle;\\\" src=\\\"../images/$sImage\\\"> \");\n\t\t$oPage->add($sTitle);\n\t\t$oPage->add('</h2>');\n\t\t$oPage->add('<div id=\"details\" '.$sStyle.'>');\n\t\tforeach($aErrors as $sText)\n\t\t{\n\t\t\t$oPage->error($sText);\n\t\t}\n\t\tforeach($aWarnings as $sText)\n\t\t{\n\t\t\t$oPage->warning($sText);\n\t\t}\n\t\tforeach($aInfo as $sText)\n\t\t{\n\t\t\t$oPage->ok($sText);\n\t\t}\n\t\t$oPage->add('</div>');\n\t\tif (!$this->bCanMoveForward)\n\t\t{\n\t\t\t$oPage->p('Sorry, the installation cannot continue. Please fix the errors and reload this page to launch the installation again.');\n\t\t\t$oPage->p('<button type=\"button\" onclick=\"window.location.reload()\">Reload</button>');\n\t\t}\n\t}\n\n\tpublic function CanMoveForward()\n\t{\n\t\treturn $this->bCanMoveForward;\n\t}\n}\n\n/**\n * Second step of the iTop Installation Wizard: Install or Upgrade\n */\nclass WizStepInstallOrUpgrade extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Install or Upgrade choice';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepDetectedInfo', 'WizStepLicense');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$sNextStep = '';\n\t\t$sInstallMode = utils::ReadParam('install_mode');\n\n\t\t$this->oWizard->SaveParameter('previous_version_dir', '');\n\t\t$this->oWizard->SaveParameter('db_server', '');\n\t\t$this->oWizard->SaveParameter('db_user', '');\n\t\t$this->oWizard->SaveParameter('db_pwd', '');\n\t\t$this->oWizard->SaveParameter('db_name', '');\n\t\t$this->oWizard->SaveParameter('db_prefix', '');\n\t\t$this->oWizard->SaveParameter('db_backup', false);\n\t\t$this->oWizard->SaveParameter('db_backup_path', '');\n\t\t$this->oWizard->SaveParameter('db_tls_enabled', false);\n\t\t$this->oWizard->SaveParameter('db_tls_ca', '');\n\n\t\tif ($sInstallMode == 'install')\n\t\t{\n\t\t\t$this->oWizard->SetParameter('install_mode', 'install');\n\t\t\t$sFullSourceDir = SetupUtils::GetLatestDataModelDir();\n\t\t\t$this->oWizard->SetParameter('source_dir', $sFullSourceDir);\n\t\t\t$this->oWizard->SetParameter('datamodel_version', SetupUtils::GetDataModelVersion($sFullSourceDir));\n\t\t\t$sNextStep = 'WizStepLicense';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->oWizard->SetParameter('install_mode', 'upgrade');\n\t\t\t$sNextStep = 'WizStepDetectedInfo';\n\n\t\t}\n\t\treturn array('class' => $sNextStep, 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$sInstallMode = $this->oWizard->GetParameter('install_mode', '');\n\t\t$sDBServer = $this->oWizard->GetParameter('db_server', '');\n\t\t$sDBUser = $this->oWizard->GetParameter('db_user', '');\n\t\t$sDBPwd = $this->oWizard->GetParameter('db_pwd', '');\n\t\t$sDBName = $this->oWizard->GetParameter('db_name', '');\n\t\t$sDBPrefix = $this->oWizard->GetParameter('db_prefix', '');\n\t\t$bDBBackup = $this->oWizard->GetParameter('db_backup', false);\n\t\t$sDBBackupPath = $this->oWizard->GetParameter('db_backup_path', '');\n\t\t$sTlsEnabled = $this->oWizard->GetParameter('db_tls_enabled', false);\n\t\t$sTlsCA = $this->oWizard->GetParameter('db_tls_ca', '');\n\t\t$sMySQLBinDir = $this->oWizard->GetParameter('mysql_bindir', null);\n\t\t$sPreviousVersionDir = '';\n\t\tif ($sInstallMode == '')\n\t\t{\n\t\t\t$sDBBackupPath = APPROOT.'data/'.ITOP_APPLICATION.strftime('-backup-%Y-%m-%d');\n\t\t\t$bDBBackup = true;\n\t\t\t$aPreviousInstance = SetupUtils::GetPreviousInstance(APPROOT);\n\t\t\tif ($aPreviousInstance['found'])\n\t\t\t{\n\t\t\t\t$sInstallMode = 'upgrade';\n\t\t\t\t$sDBServer = $aPreviousInstance['db_server'];\n\t\t\t\t$sDBUser = $aPreviousInstance['db_user'];\n\t\t\t\t$sDBPwd = $aPreviousInstance['db_pwd'];\n\t\t\t\t$sDBName = $aPreviousInstance['db_name'];\n\t\t\t\t$sDBPrefix = $aPreviousInstance['db_prefix'];\n\t\t\t\t$sTlsEnabled = $aPreviousInstance['db_tls_enabled'];\n\t\t\t\t$sTlsCA = $aPreviousInstance['db_tls_ca'];\n\t\t\t\t$this->oWizard->SaveParameter('graphviz_path', $aPreviousInstance['graphviz_path']);\n\t\t\t\t$sMySQLBinDir = $aPreviousInstance['mysql_bindir'];\n\t\t\t\t$this->oWizard->SaveParameter('mysql_bindir', $aPreviousInstance['mysql_bindir']);\n\t\t\t\t$sPreviousVersionDir = APPROOT;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sInstallMode = 'install';\n\t\t\t}\n\t\t}\n\t\t$sPreviousVersionDir = $this->oWizard->GetParameter('previous_version_dir', $sPreviousVersionDir);\n\n\t\t$sUpgradeInfoStyle = '';\n\t\tif ($sInstallMode == 'install')\n\t\t{\n\t\t\t$sUpgradeInfoStyle = ' style=\"display: none;\" ';\n\t\t}\n\t\t$oPage->add('<h2>What do you want to do?</h2>');\n\t\t$sChecked = ($sInstallMode == 'install') ? ' checked ' : '';\n        $oPage->p('<input id=\"radio_install\" type=\"radio\" name=\"install_mode\" value=\"install\" '.$sChecked.'/><label for=\"radio_install\">&nbsp;Install a new '.ITOP_APPLICATION.'</label>');\n\t\t$sChecked = ($sInstallMode == 'upgrade') ? ' checked ' : '';\n        $oPage->p('<input id=\"radio_update\" type=\"radio\" name=\"install_mode\" value=\"upgrade\" '.$sChecked.'/><label for=\"radio_update\">&nbsp;Upgrade an existing '.ITOP_APPLICATION.' instance</label>');\n\t\t//$oPage->add('<fieldset  id=\"upgrade_info\"'.$sUpgradeInfoStyle.'>');\n\t\t//$oPage->add('<legend>Information about the previous instance:</legend>');\n\t\t$oPage->add('<table id=\"upgrade_info\"'.$sUpgradeInfoStyle.'>');\n\t\t$oPage->add('<tr><td>Location on the disk:</td><td><input id=\"previous_version_dir\" type=\"text\" name=\"previous_version_dir\" value=\"'.htmlentities($sPreviousVersionDir,\n\t\t\t\tENT_QUOTES, 'UTF-8').'\" style=\"width: 98%;\"/></td></tr>');\n\t\tSetupUtils::DisplayDBParameters($oPage, false, $sDBServer, $sDBUser, $sDBPwd, $sDBName, $sDBPrefix,\n\t\t\t$sTlsEnabled, $sTlsCA, null);\n\n\t\t$aBackupChecks = SetupUtils::CheckBackupPrerequisites($sDBBackupPath, $sMySQLBinDir);\n\t\t$bCanBackup = true;\n\t\t$sMySQLDumpMessage = '';\n\t\tforeach($aBackupChecks as $oCheck)\n\t\t{\n\t\t\tif ($oCheck->iSeverity == CheckResult::ERROR)\n\t\t\t{\n\t\t\t\t$bCanBackup = false;\n\t\t\t\t$sMySQLDumpMessage .= '<img src=\"../images/error.png\"/>&nbsp;<b> Warning:</b> '.$oCheck->sLabel;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sMySQLDumpMessage .= '<img src=\"../images/validation_ok.png\"/> '.$oCheck->sLabel.' ';\n\t\t\t}\n\t\t}\n\t\t$sChecked = ($bCanBackup && $bDBBackup) ? ' checked ' : '';\n\t\t$sDisabled = $bCanBackup ? '' : ' disabled ';\n        $oPage->add('<tr><td colspan=\"2\"><input id=\"db_backup\" type=\"checkbox\" name=\"db_backup\" '.$sChecked.$sDisabled.' value=\"1\"/><label for=\"db_backup\">&nbsp;Backup the '.ITOP_APPLICATION.' database before upgrading</label></td></tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\">Save the backup to: <input id=\"db_backup_path\" type=\"text\" name=\"db_backup_path\" '.$sDisabled.'value=\"'.htmlentities($sDBBackupPath, ENT_QUOTES, 'UTF-8').'\" size=\"25\"/></td></tr>');\n\t\t$fFreeSpace = SetupUtils::CheckDiskSpace($sDBBackupPath);\n\t\t$sMessage = '';\n\t\tif ($fFreeSpace !== false)\n\t\t{\n\t\t\t$sMessage .= SetupUtils::HumanReadableSize($fFreeSpace).' free in '.dirname($sDBBackupPath);\n\t\t}\n\t\t$oPage->add('<tr><td colspan=\"2\">');\n\t\t$oPage->add($sMySQLDumpMessage.'<br/><span id=\"backup_info\" style=\"font-size:small;color:#696969;\">'.$sMessage.'</span></td></tr>');\n\t\t$oPage->add('</table>');\n\t\t$sAuthentToken = $this->oWizard->GetParameter('authent', '');\n\t\t$oPage->add('<input type=\"hidden\" id=\"authent_token\" value=\"'.$sAuthentToken.'\"/>');\n\t\t//$oPage->add('</fieldset>');\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#radio_update\").bind('change', function() { if (this.checked ) { $('#upgrade_info').show(); WizardUpdateButtons(); } else { $('#upgrade_info').hide(); } });\n\t$(\"#radio_install\").bind('change', function() { if (this.checked ) { $('#upgrade_info').hide(); WizardUpdateButtons(); } else { $('#upgrade_info').show(); } });\n\t$(\"#previous_version_dir\").bind('change keyup', function() { WizardAsyncAction('check_path', { previous_version_dir: $('#previous_version_dir').val() }); });\n\t$(\"#db_backup_path\").bind('change keyup', function() { WizardAsyncAction('check_backup', { db_backup_path: $('#db_backup_path').val() }); });\nEOF\n\t\t);\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\tswitch($sCode)\n\t\t{\n\t\t\tcase 'check_path':\n\t\t\t$sPreviousVersionDir = $aParameters['previous_version_dir'];\n\t\t\t$aPreviousInstance = SetupUtils::GetPreviousInstance($sPreviousVersionDir);\n\t\t\tif ($aPreviousInstance['found'])\n\t\t\t{\n\t\t\t\t$sDBServer = htmlentities($aPreviousInstance['db_server'], ENT_QUOTES, 'UTF-8');\n\t\t\t\t$sDBUser = htmlentities($aPreviousInstance['db_user'], ENT_QUOTES, 'UTF-8');\n\t\t\t\t$sDBPwd = htmlentities($aPreviousInstance['db_pwd'], ENT_QUOTES, 'UTF-8');\n\t\t\t\t$sDBName = htmlentities($aPreviousInstance['db_name'], ENT_QUOTES, 'UTF-8');\n\t\t\t\t$sDBPrefix = htmlentities($aPreviousInstance['db_prefix'], ENT_QUOTES, 'UTF-8');\n\t\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#db_server\").val('$sDBServer');\n\t$(\"#db_user\").val('$sDBUser');\n\t$(\"#db_pwd\").val('$sDBPwd');\n\t$(\"#db_name\").val('$sDBName');\n\t$(\"#db_prefix\").val('$sDBPrefix');\n\t$(\"#db_pwd\").trigger('change'); // Forces check of the DB connection\nEOF\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase 'check_db':\n\t\t\tSetupUtils:: AsyncCheckDB($oPage, $aParameters);\n\t\t\tbreak;\n\n\t\t\tcase 'check_backup':\n\t\t\t$sDBBackupPath = $aParameters['db_backup_path'];\n\t\t\t$fFreeSpace = SetupUtils::CheckDiskSpace($sDBBackupPath);\n\t\t\tif ($fFreeSpace !== false)\n\t\t\t{\n\t\t\t\t$sMessage = htmlentities(SetupUtils::HumanReadableSize($fFreeSpace).' free in '.dirname($sDBBackupPath), ENT_QUOTES, 'UTF-8');\n\t\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#backup_info\").html('$sMessage');\nEOF\n\t\t\t\t);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#backup_info\").html('');\nEOF\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\t\tif ($(\"#radio_install\").prop(\"checked\"))\n\t\t{\n\t\t\tValidateField(\"db_name\", false);\n\t\t\tValidateField(\"db_new_name\", false);\n\t\t\tValidateField(\"db_prefix\", false);\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar bRet = ($(\"#wiz_form\").data(\"db_connection\") !== \"error\");\n\t\t\tbRet = ValidateField(\"db_name\", true) && bRet;\n\t\t\tbRet = ValidateField(\"db_new_name\", true) && bRet;\n\t\t\tbRet = ValidateField(\"db_prefix\", true) && bRet;\n\t\n\t\t\treturn bRet;\n\t\t}\nEOF\n\t\t;\n\t}\n\n}\n\n/**\n * Upgrade information\n */\nclass WizStepDetectedInfo extends WizardStep\n{\n\tprotected $bCanMoveForward;\n\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Upgrade Information';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepUpgradeMiscParams', 'WizStepLicense2');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$sUpgradeType = utils::ReadParam('upgrade_type');\n\n\t\t$this->oWizard->SetParameter('mode', 'upgrade');\n\t\t$this->oWizard->SetParameter('upgrade_type', $sUpgradeType);\n\t\t$this->oWizard->SaveParameter('copy_extensions_from', '');\n\t\t$bDisplayLicense = $this->oWizard->GetParameter('display_license');\n\n\t\tswitch ($sUpgradeType)\n\t\t{\n\t\t\tcase 'keep-previous':\n\t\t\t$sSourceDir = utils::ReadParam('relative_source_dir', '', false, 'raw_data');\n\t\t\t$this->oWizard->SetParameter('source_dir', $this->oWizard->GetParameter('previous_version_dir').'/'.$sSourceDir);\n\t\t\t$this->oWizard->SetParameter('datamodel_version', utils::ReadParam('datamodel_previous_version', '', false, 'raw_data'));\n\t\t\tbreak;\n\n\t\t\tcase 'use-compatible':\n\t\t\t$sDataModelPath = utils::ReadParam('datamodel_path', '', false, 'raw_data');\n\t\t\t$this->oWizard->SetParameter('source_dir', $sDataModelPath);\n\t\t\t$this->oWizard->SaveParameter('datamodel_version', '');\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t// Do nothing, maybe the user pressed the Back button\n\t\t}\n\t\tif ($bDisplayLicense)\n\t\t{\n\t\t\t$aRet = array('class' => 'WizStepLicense2', 'state' => '');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aRet = array('class' => 'WizStepUpgradeMiscParams', 'state' => '');\n\t\t}\n\t\treturn $aRet;\n\t}\n\n\t/**\n\t * @param \\WebPage $oPage\n\t *\n\t * @throws \\Exception\n\t */\n\tpublic function Display(\\WebPage $oPage)\n\t{\n\t\t$oPage->add_style(\n<<<EOF\n#changes_summary {\n\tmax-height: 200px;\n\toverflow: auto;\n}\n#changes_summary div {\n\twidth:100;\n\tmargin-top:0;\n\tpadding-top: 0.5em;\n\tpadding-left: 0;\n}\n#changes_summary div ul {\n\tmargin-left:0;\n\tpadding-left: 20px;\n}\n#changes_summary div.closed ul {\n\tdisplay:none;\n}\n#changes_summary div li {\n\tlist-style: none;\n\twidth: 100;\n\tmargin-left:0;\n\tpadding-left: 0em;\n}\n.title {\n\tpadding-left: 20px;\n\tfont-weight: bold;\n\tcursor: pointer;\n\tbackground: url(../images/minus.gif) 2px 2px no-repeat;\n}\n#changes_summary div.closed .title {\n\tbackground: url(../images/plus.gif) 2px 2px no-repeat;\n}\nEOF\n\t\t);\n\t\t$this->bCanMoveForward = true;\n\t\t$bDisplayLicense = true;\n\t\t$sPreviousVersionDir = $this->oWizard->GetParameter('previous_version_dir', '');\n\t\t$aInstalledInfo = SetupUtils::GetApplicationVersion($this->oWizard);\n\n\t\tif ($aInstalledInfo === false)\n\t\t{\n\t\t\tthrow(new Exception('No previous version of '.ITOP_APPLICATION.' found in the supplied database. The upgrade cannot continue.'));\n\t\t}\n\t\telse if (strcasecmp($aInstalledInfo['product_name'], ITOP_APPLICATION) != 0)\n\t\t{\n\t\t\t$oPage->p(\"<b>Warning: The installed products seem different. Are you sure the you want to upgrade {$aInstalledInfo['product_name']} with \".ITOP_APPLICATION.\"?</b>\");\n\t\t}\n\n\t\t$sInstalledVersion = $aInstalledInfo['product_version'];\n\t\t$sInstalledDataModelVersion = $aInstalledInfo['datamodel_version'];\n\n\t\t$oPage->add(\"<h2>Information about the upgrade from version $sInstalledVersion to \".ITOP_VERSION.'.'.ITOP_REVISION.\"</h2>\");\n\n\t\tif ($sInstalledVersion == (ITOP_VERSION.'.'.ITOP_REVISION))\n\t\t{\n\t\t\t// Reinstalling the same version let's skip the license agreement...\n\t\t\t$bDisplayLicense = false;\n\t\t}\n\t\t$this->oWizard->SetParameter('license', $bDisplayLicense); // Remember for later\n\n\t\tif ($sInstalledDataModelVersion == '$ITOP_VERSION$.$WCREV$')\n\t\t{\n\t\t\t// Special case for upgrading some  development versions (temporary)\n\t\t\t$sCompatibleDMDir = SetupUtils::GetLatestDataModelDir();\n\t\t\t$sInstalledDataModelVersion = SetupUtils::GetDataModelVersion($sCompatibleDMDir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sCompatibleDMDir = SetupUtils::GetCompatibleDataModelDir($sInstalledDataModelVersion);\n\t\t}\n\n\t\tif ($sCompatibleDMDir === false)\n\t\t{\n\t\t\t// No compatible version exists... cannot upgrade. Either it is too old, or too new (downgrade !)\n\t\t\t$this->bCanMoveForward = false;\n\t\t\t$oPage->p(\"The current version of \".ITOP_APPLICATION.\" (\".ITOP_VERSION.'.'.ITOP_REVISION.\") does not seem to be compatible with the installed version ($sInstalledVersion).\");\n\t\t\t$oPage->p(\"The upgrade cannot continue, sorry.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sUpgradeDMVersion = SetupUtils::GetDataModelVersion($sCompatibleDMDir);\n\t\t\t$sPreviousSourceDir = isset($aInstalledInfo['source_dir']) ? $aInstalledInfo['source_dir'] : 'modules';\n\t\t\t$aChanges = false;\n\t\t\tif (is_dir($sPreviousVersionDir))\n\t\t\t{\n\t\t\t\t// Check if the previous version is a \"genuine\" one or not...\n\t\t\t\t$aChanges = SetupUtils::CheckVersion($sInstalledDataModelVersion, $sPreviousVersionDir.'/'.$sPreviousSourceDir);\n\t\t\t}\n\t\t\tif (($aChanges !== false) && ( (count($aChanges['added']) > 0) || (count($aChanges['removed']) > 0) || (count($aChanges['modified']) > 0)) )\n\t\t\t{\n\t\t\t\t// Some changes were detected, prompt the user to keep or discard them\n\t\t\t\t$oPage->p(\"<img src=\\\"../images/error.png\\\"/>&nbsp;Some modifications were detected between the \".ITOP_APPLICATION.\" version in '$sPreviousVersionDir' and a genuine $sInstalledVersion version.\");\n\t\t\t\t$oPage->p(\"What do you want to do?\");\n\n\t\t\t\t$aWritableDirs = array('modules', 'portal');\n\t\t\t\t$aErrors = SetupUtils::CheckWritableDirs($aWritableDirs);\n\t\t\t\t$sChecked = ($this->oWizard->GetParameter('upgrade_type') == 'keep-previous') ? ' checked ' : '';\n\t\t\t\t$sDisabled = (count($aErrors) > 0) ? ' disabled ' : '';\n\n                $oPage->p('<input id=\"radio_upgrade_keep\" type=\"radio\" name=\"upgrade_type\" value=\"keep-previous\" '.$sChecked.$sDisabled.'/><label for=\"radio_upgrade_keep\">&nbsp;Preserve the modifications of the installed version (the dasboards inside '.ITOP_APPLICATION.' may not be editable).</label>');\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"datamodel_previous_version\" value=\"'.htmlentities($sInstalledDataModelVersion, ENT_QUOTES, 'UTF-8').'\">');\n\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"relative_source_dir\" value=\"'.htmlentities($sPreviousSourceDir, ENT_QUOTES, 'UTF-8').'\">');\n\n\t\t\t\tif (count($aErrors) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->p(\"Cannot copy the installed version due to the following access rights issue(s):\");\n\t\t\t\t\tforeach($aErrors as $sDir => $oCheckResult)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->p('<img src=\"../images/error.png\"/>&nbsp;'.$oCheckResult->sLabel);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$sChecked = ($this->oWizard->GetParameter('upgrade_type') == 'use-compatible') ? ' checked ' : '';\n\n                $oPage->p('<input id=\"radio_upgrade_convert\" type=\"radio\" name=\"upgrade_type\" value=\"use-compatible\" '.$sChecked.'/><label for=\"radio_upgrade_convert\">&nbsp;Discard the modifications, use a standard '.$sUpgradeDMVersion.' data model.</label>');\n\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"datamodel_path\" value=\"'.htmlentities($sCompatibleDMDir, ENT_QUOTES, 'UTF-8').'\">');\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"datamodel_version\" value=\"'.htmlentities($sUpgradeDMVersion, ENT_QUOTES, 'UTF-8').'\">');\n\n\t\t\t\t$oPage->add('<div id=\"changes_summary\"><div class=\"closed\"><span class=\"title\">Details of the modifications</span><div>');\n\t\t\t\tif (count($aChanges['added']) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add('<ul>New files added:');\n\t\t\t\t\tforeach($aChanges['added'] as $sFilePath => $void)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add('<li>'.$sFilePath.'</li>');\n\t\t\t\t\t}\n\t\t\t\t\t$oPage->add('</ul>');\n\t\t\t\t}\n\t\t\t\tif (count($aChanges['removed']) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add('<ul>Deleted files:');\n\t\t\t\t\tforeach($aChanges['removed'] as $sFilePath => $void)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add('<li>'.$sFilePath.'</li>');\n\t\t\t\t\t}\n\t\t\t\t\t$oPage->add('</ul>');\n\t\t\t\t}\n\t\t\t\tif (count($aChanges['modified']) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add('<ul>Modified files:');\n\t\t\t\t\tforeach($aChanges['modified'] as $sFilePath => $void)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add('<li>'.$sFilePath.'</li>');\n\t\t\t\t\t}\n\t\t\t\t\t$oPage->add('</ul>');\n\t\t\t\t}\n\t\t\t\t$oPage->add('</div></div></div>');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// No changes detected... or no way to tell because of the lack of a manifest or previous source dir\n\t\t\t\t// Use the \"compatible\" datamodel as-is.\n\t\t\t\t$oPage->p(\"<img src=\\\"../images/validation_ok.png\\\"/>&nbsp;The datamodel will be upgraded from version $sInstalledDataModelVersion to version $sUpgradeDMVersion.\");\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"upgrade_type\" value=\"use-compatible\">');\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"datamodel_path\" value=\"'.htmlentities($sCompatibleDMDir, ENT_QUOTES, 'UTF-8').'\">');\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"datamodel_version\" value=\"'.htmlentities($sUpgradeDMVersion, ENT_QUOTES, 'UTF-8').'\">');\n\t\t\t}\n\n\t\t\t// Check if there are \"extensions\" to preserve and if it's possible\n\t\t\tif (is_dir($sPreviousVersionDir.'/extensions'))\n\t\t\t{\n\t\t\t\t$aExtensions = glob($sPreviousVersionDir.'/extensions/*', GLOB_ONLYDIR);\n\t\t\t\tif (($aExtensions !== false) && (count($aExtensions)>0) && (realpath($sPreviousVersionDir.'/extensions') != realpath(APPROOT.'extensions')) )\n\t\t\t\t{\n\t\t\t\t\t$aWritableDirs = array('extensions');\n\t\t\t\t\t$aErrors = SetupUtils::CheckWritableDirs($aWritableDirs);\n\t\t\t\t\tif (count($aErrors) > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->p(\"Cannot copy the extensions from '$sPreviousVersionDir/extensions' to '\".APPROOT.\"extensions' due to the following access rights issue(s):\");\n\t\t\t\t\t\tforeach($aErrors as $sDir => $oCheckResult)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oPage->p('<img src=\"../images/error.png\"/>&nbsp;'.$oCheckResult->sLabel);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->p(\"<b>Note:</b> The extensions present in '$sPreviousVersionDir/extensions' will be copied to '\".APPROOT.\"extensions'.\");\n\t\t\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"copy_extensions_from\" value=\"'.htmlentities($sPreviousVersionDir.'/extensions', ENT_QUOTES, 'UTF-8').'\">');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#changes_summary .title\").click(function() { $(this).parent().toggleClass('closed'); } );\n\t$('input[name=upgrade_type]').bind('click change', function() { WizardUpdateButtons(); });\nEOF\n\t\t\t);\n\n\t\t\t$oMutex = new iTopMutex(\n\t\t\t\t'cron'.$this->oWizard->GetParameter('db_name', '').$this->oWizard->GetParameter('db_prefix', ''),\n\t\t\t\t$this->oWizard->GetParameter('db_server', ''),\n\t\t\t\t$this->oWizard->GetParameter('db_user', ''),\n\t\t\t\t$this->oWizard->GetParameter('db_pwd', ''),\n\t\t\t\t$this->oWizard->GetParameter('db_tls_enabled', ''),\n\t\t\t\t$this->oWizard->GetParameter('db_tls_ca', '')\n\t\t\t);\n\t\t\tif ($oMutex->IsLocked())\n\t\t\t{\n\t\t\t\t$oPage->p(\"<img src=\\\"../images/error.png\\\"/>&nbsp;An iTop CRON process is being executed on the target database. It is highly recommended to stop any iTop CRON process prior to running the setup program.\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function CanMoveForward()\n\t{\n\t\treturn $this->bCanMoveForward;\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\tif ($(\"#radio_upgrade_keep\").length == 0) return true;\n\t\n\tbRet = ($('input[name=upgrade_type]:checked').length > 0);\n\treturn bRet;\nEOF\n\t\t;\n\t}\n}\n\n/**\n * License acceptation screen\n */\nclass WizStepLicense extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'License Agreement';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepDBParams');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$this->oWizard->SaveParameter('accept_license', 'no');\n\t\treturn array('class' => 'WizStepDBParams', 'state' => '');\n\t}\n\n    /**\n     * @param WebPage $oPage\n     */\n    public function Display(WebPage $oPage)\n    {\n        $aLicenses = SetupUtils::GetLicenses();\n\t\t$oPage->add_style(\n<<<EOF\nfieldset {\n\tmax-height: 18em;\n\toverflow: auto;\n}\nEOF\n\t\t);\n\n\t\t$oPage->add('<h2>Licenses agreements for the components of '.ITOP_APPLICATION.'</h2>');\n\t\t$oPage->add_style('div a.no-arrow { background:transparent; padding-left:0;}');\n\t\t$oPage->add_style('.toggle { cursor:pointer; text-decoration:underline; color:#1C94C4; }');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Components of '.ITOP_APPLICATION.'</legend>');\n\t\t$oPage->add('<ul>');\n        $index = 0;\n        foreach ($aLicenses as $oLicense)\n\t\t{\n\t\t\t$oPage->add('<li><b>'.$oLicense->product.'</b>, &copy; '.$oLicense->author.' is licensed under the <b>'.$oLicense->license_type.' license</b>. (<span class=\"toggle\" id=\"toggle_'.$index.'\">Details</span>)');\n\t\t\t$oPage->add('<div id=\"license_'.$index.'\" class=\"license_text\" style=\"display:none;overflow:auto;max-height:10em;font-size:small;border:1px #696969 solid;margin-bottom:1em; margin-top:0.5em;padding:0.5em;\">'.$oLicense->text.'</div>');\n\t\t\t$oPage->add_ready_script('$(\".license_text a\").attr(\"target\", \"_blank\").addClass(\"no-arrow\");');\n\t\t\t$oPage->add_ready_script('$(\"#toggle_'.$index.'\").click( function() { $(\"#license_'.$index.'\").toggle(); } );');\n            $index++;\n\t\t}\n\t\t$oPage->add('</ul>');\n\t\t$oPage->add('</fieldset>');\n        $sChecked = ($this->oWizard->GetParameter('accept_license', 'no') == 'yes') ? ' checked ' : '';\n        $oPage->p('<input type=\"checkbox\" name=\"accept_license\" id=\"accept\" value=\"yes\" '.$sChecked.'><label for=\"accept\">&nbsp;I accept the terms of the licenses of the '.count($aLicenses).' components mentioned above.</label>');\n\t\t$oPage->add_ready_script('$(\"#accept\").bind(\"click change\", function() { WizardUpdateButtons(); });');\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn 'return ($(\"#accept\").prop(\"checked\"));';\n\t}\n\n\n}\n\n/**\n * License acceptation screen (when upgrading)\n */\nclass WizStepLicense2 extends WizStepLicense\n{\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepUpgradeMiscParams');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => 'WizStepUpgradeMiscParams', 'state' => '');\n\t}\n}\n\n/**\n * Database Connection parameters screen\n */\nclass WizStepDBParams extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Database Configuration';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepAdminAccount');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$this->oWizard->SaveParameter('db_server', '');\n\t\t$this->oWizard->SaveParameter('db_user', '');\n\t\t$this->oWizard->SaveParameter('db_pwd', '');\n\t\t$this->oWizard->SaveParameter('db_name', '');\n\t\t$this->oWizard->SaveParameter('db_prefix', '');\n\t\t$this->oWizard->SaveParameter('new_db_name', '');\n\t\t$this->oWizard->SaveParameter('create_db', '');\n\t\t$this->oWizard->SaveParameter('db_new_name', '');\n\t\t$this->oWizard->SaveParameter('db_tls_enabled', false);\n\t\t$this->oWizard->SaveParameter('db_tls_ca', '');\n\n\t\treturn array('class' => 'WizStepAdminAccount', 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->add('<h2>Configuration of the database connection:</h2>');\n\t\t$sDBServer = $this->oWizard->GetParameter('db_server', '');\n\t\t$sDBUser = $this->oWizard->GetParameter('db_user', '');\n\t\t$sDBPwd = $this->oWizard->GetParameter('db_pwd', '');\n\t\t$sDBName = $this->oWizard->GetParameter('db_name', '');\n\t\t$sDBPrefix = $this->oWizard->GetParameter('db_prefix', '');\n\t\t$sTlsEnabled = $this->oWizard->GetParameter('db_tls_enabled', '');\n\t\t$sTlsCA = $this->oWizard->GetParameter('db_tls_ca', '');\n\t\t$sNewDBName = $this->oWizard->GetParameter('db_new_name', false);\n\n\t\t$oPage->add('<table>');\n\t\tSetupUtils::DisplayDBParameters($oPage, true, $sDBServer, $sDBUser, $sDBPwd, $sDBName, $sDBPrefix, $sTlsEnabled,\n\t\t\t$sTlsCA, $sNewDBName);\n\t\t$sAuthentToken = $this->oWizard->GetParameter('authent', '');\n\t\t$oPage->add('<input type=\"hidden\" id=\"authent_token\" value=\"'.$sAuthentToken.'\"/>');\n\t\t$oPage->add('</table>');\n\t\t$sCreateDB = $this->oWizard->GetParameter('create_db', 'yes');\n\t\tif ($sCreateDB == 'no')\n\t\t{\n\t\t\t$oPage->add_ready_script('$(\"#existing_db\").prop(\"checked\", true);');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oPage->add_ready_script('$(\"#create_db\").prop(\"checked\", true);');\n\t\t}\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\tswitch($sCode)\n\t\t{\n\t\t\tcase 'check_db':\n\t\t\tSetupUtils:: AsyncCheckDB($oPage, $aParameters);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\tif ($(\"#wiz_form\").data(\"db_connection\") === \"error\") return false;\n\n\tvar bRet = true;\n\tbRet = ValidateField(\"db_name\", true) && bRet;\n\tbRet = ValidateField(\"db_new_name\", true) && bRet;\n\tbRet = ValidateField(\"db_prefix\", true) && bRet;\n\n\treturn bRet;\nEOF\n\t\t;\n\t}\n}\n\n/**\n * Administrator Account definition screen\n */\nclass WizStepAdminAccount extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Administrator Account';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepMiscParams');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$this->oWizard->SaveParameter('admin_user', '');\n\t\t$this->oWizard->SaveParameter('admin_pwd', '');\n\t\t$this->oWizard->SaveParameter('confirm_pwd', '');\n\t\t$this->oWizard->SaveParameter('admin_language', 'EN US');\n\t\treturn array('class' => 'WizStepMiscParams', 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$sAdminUser = $this->oWizard->GetParameter('admin_user', 'admin');\n\t\t$sAdminPwd = $this->oWizard->GetParameter('admin_pwd', '');\n\t\t$sConfirmPwd = $this->oWizard->GetParameter('confirm_pwd', '');\n\t\t$sAdminLanguage = $this->oWizard->GetParameter('admin_language', 'EN US');\n\t\t$oPage->add('<h2>Definition of the Administrator Account</h2>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Administrator Account</legend>');\n\t\t$oPage->add('<table>');\n\t\t$oPage->add('<tr><td>Login: </td><td><input id=\"admin_user\" name=\"admin_user\" type=\"text\" size=\"25\" maxlength=\"64\" value=\"'.htmlentities($sAdminUser, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_admin_user\"/></td><tr>');\n\t\t$oPage->add('<tr><td>Password: </td><td><input id=\"admin_pwd\" autocomplete=\"off\" name=\"admin_pwd\" type=\"password\" size=\"25\" maxlength=\"64\" value=\"'.htmlentities($sAdminPwd, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_admin_pwd\"/></td><tr>');\n\t\t$oPage->add('<tr><td>Confirm password: </td><td><input id=\"confirm_pwd\" autocomplete=\"off\" name=\"confirm_pwd\" type=\"password\" size=\"25\" maxlength=\"64\" value=\"'.htmlentities($sConfirmPwd, ENT_QUOTES, 'UTF-8').'\"></td><tr>');\n\t\t$sSourceDir = APPROOT.'dictionaries/';\n\t\t$aLanguages = SetupUtils::GetAvailableLanguages($sSourceDir);\n\t\t$oPage->add('<tr><td>Language: </td><td>');\n\t\t$oPage->add(SetupUtils::GetLanguageSelect($sSourceDir, 'admin_language', $sAdminLanguage));\n\t\t$oPage->add('</td></tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t\t$('#admin_user').bind('change keyup', function() { WizardUpdateButtons(); } );\n\t\t$('#admin_pwd').bind('change keyup', function() { WizardUpdateButtons(); } );\n\t\t$('#confirm_pwd').bind('change keyup', function() { WizardUpdateButtons(); } );\nEOF\n\t\t);\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\tbRet = ($('#admin_user').val() != '');\n\tif (!bRet)\n\t{\n\t\t$(\"#v_admin_user\").html('<img src=\"../images/validation_error.png\" title=\"This field cannot be empty\"/>');\n\t}\n\telse\n\t{\n\t\t$(\"#v_admin_user\").html('');\n\t}\n\t\n\tbPasswordsMatch = ($('#admin_pwd').val() == $('#confirm_pwd').val());\n\tif (!bPasswordsMatch)\n\t{\n\t\t$('#v_admin_pwd').html('<img src=\"../images/validation_error.png\" title=\"Retyped password do not match\"/>');\n\t}\n\telse\n\t{\n\t\t$('#v_admin_pwd').html('');\n\t}\n\tbRet = bPasswordsMatch && bRet;\n\t\n\treturn bRet;\nEOF\n\t\t;\n\t}}\n\n/**\n * Miscellaneous Parameters (URL, Sample Data)\n */\nclass WizStepMiscParams extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Miscellaneous Parameters';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepModulesChoice');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$this->oWizard->SaveParameter('default_language', '');\n\t\t$this->oWizard->SaveParameter('application_url', '');\n\t\t$this->oWizard->SaveParameter('graphviz_path', '');\n\t\t$this->oWizard->SaveParameter('sample_data', 'yes');\n\t\treturn array('class' => 'WizStepModulesChoice', 'state' => 'start_install');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$sDefaultLanguage = $this->oWizard->GetParameter('default_language', $this->oWizard->GetParameter('admin_language'));\n\t\t$sApplicationURL = $this->oWizard->GetParameter('application_url', utils::GetDefaultUrlAppRoot());\n\t\t$sDefaultGraphvizPath = (strtolower(substr(PHP_OS, 0, 3)) === 'win') ? 'C:\\\\Program Files\\\\Graphviz\\\\bin\\\\dot.exe' : '/usr/bin/dot';\n\t\t$sGraphvizPath = $this->oWizard->GetParameter('graphviz_path', $sDefaultGraphvizPath);\n\t\t$sSampleData = $this->oWizard->GetParameter('sample_data', 'yes');\n\t\t$oPage->add('<h2>Additional parameters</h2>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Default Language</legend>');\n\t\t$oPage->add('<table>');\n\t\t$sSourceDir = APPROOT.'dictionaries/';\n\t\t$aLanguages = SetupUtils::GetAvailableLanguages($sSourceDir);\n\t\t$oPage->add('<tr><td>Default Language: </td><td>');\n\t\t$oPage->add(SetupUtils::GetLanguageSelect($sSourceDir, 'default_language', $sDefaultLanguage));\n\t\t$oPage->add('</td></tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Application URL</legend>');\n\t\t$oPage->add('<table>');\n\t\t$oPage->add('<tr><td>URL: </td><td><input id=\"application_url\" name=\"application_url\" type=\"text\" size=\"35\" maxlength=\"1024\" value=\"'.htmlentities($sApplicationURL, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_application_url\"/></td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\">Change the value above if the end-users will be accessing the application by another path due to a specific configuration of the web server.</td><tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Path to Graphviz\\' dot application</legend>');\n\t\t$oPage->add('<table>');\n\t\t$oPage->add('<tr><td>Path: </td><td><input id=\"graphviz_path\" name=\"graphviz_path\" type=\"text\" size=\"35\" maxlength=\"1024\" value=\"'.htmlentities($sGraphvizPath, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_graphviz_path\"/></td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\"><a href=\"http://www.graphviz.org\" target=\"_blank\">Graphviz</a> is required to display the impact analysis graph (i.e. impacts / depends on).</td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\"><span id=\"graphviz_status\"></span></td><tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Sample Data</legend>');\n        $sChecked = ($sSampleData == 'yes') ? 'checked ' : '';\n        $oPage->p('<input id=\"sample_data_yes\" name=\"sample_data\" type=\"radio\" value=\"yes\" '.$sChecked.'><label for=\"sample_data_yes\">&nbsp;I am installing a <b>demo or test</b> instance, populate the database with some demo data.');\n        $sChecked = ($sSampleData == 'no') ? 'checked ' : '';\n        $oPage->p('<input id=\"sample_data_no\" name=\"sample_data\" type=\"radio\" value=\"no\" '.$sChecked.'><label for=\"sample_data_no\">&nbsp;I am installing a <b>production</b> instance, create an empty database to start from.');\n\t\t$oPage->add('</fieldset>');\n\t\t$sAuthentToken = $this->oWizard->GetParameter('authent', '');\n\t\t$oPage->add('<input type=\"hidden\" id=\"authent_token\" value=\"'.$sAuthentToken.'\"/>');\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t\t$('#application_url').bind('change keyup', function() { WizardUpdateButtons(); } );\n\t\t$('#graphviz_path').bind('change keyup init', function() { WizardUpdateButtons();  WizardAsyncAction('check_graphviz', { graphviz_path: $('#graphviz_path').val(), authent: $('#authent_token').val()}); } ).trigger('init');\n\t\t$('#btn_next').click(function() {\n\t\t\tbRet = true;\n\t\t\tif ($(this).attr('data-graphviz') != 'ok')\n\t\t\t{\n\t\t\t\tbRet = confirm('The impact analysis will not be displayed properly. Are you sure you want to continue?');\n\t\t\t}\n\t\t\treturn bRet;\n\t\t});\nEOF\n\t\t);\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\tswitch($sCode)\n\t\t{\n\t\t\tcase 'check_graphviz':\n\t\t\t$sGraphvizPath = $aParameters['graphviz_path'];\n\t\t\t$oCheck = SetupUtils::CheckGraphviz($sGraphvizPath);\n\t\t\t$sMessage = json_encode($oCheck->sLabel);\n\t\t\tswitch($oCheck->iSeverity)\n\t\t\t{\n\t\t\t\tcase CheckResult::INFO:\n\t\t\t\t$sStatus = 'ok';\n\t\t\t\t$sMessage = json_encode('<img src=\"../images/validation_ok.png\">&nbsp;'.$oCheck->sLabel);\n\n\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\tcase CheckResult::ERROR:\n\t\t\t\tcase CheckResult::WARNING:\n\t\t\t\t$sStatus = 'ko';\n\t\t\t\t$sMessage = json_encode('<img src=\"../images/error.png\">&nbsp;'.$oCheck->sLabel);\n\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#graphviz_status\").html($sMessage);\n\t$('#btn_next').attr('data-graphviz', '$sStatus');\nEOF\n\t\t\t);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\tbRet = ($('#application_url').val() != '');\n\tif (!bRet)\n\t{\n\t\t$(\"#v_application_url\").html('<img src=\"../images/validation_error.png\" title=\"This field cannot be empty\"/>');\n\t}\n\telse\n\t{\n\t\t$(\"#v_application_url\").html('');\n\t}\n\tbGraphviz = ($('#graphviz_path').val() != '');\n\tif (!bGraphviz)\n\t{\n\t\t// Does not prevent to move forward\n\t\t$(\"#v_graphviz_path\").html('<img src=\"../images/validation_error.png\" title=\"Impact analysis will not display properly\"/>');\n\t}\n\telse\n\t{\n\t\t$(\"#v_graphviz_path\").html('');\n\t}\n\treturn bRet;\nEOF\n\t\t;\n\t}\n}\n\n/**\n * Miscellaneous Parameters (URL...) in case of upgrade\n */\nclass WizStepUpgradeMiscParams extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Miscellaneous Parameters';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepModulesChoice');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$this->oWizard->SaveParameter('application_url', '');\n\t\t$this->oWizard->SaveParameter('graphviz_path', '');\n\t\treturn array('class' => 'WizStepModulesChoice', 'state' => 'start_upgrade');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$sApplicationURL = $this->oWizard->GetParameter('application_url', utils::GetDefaultUrlAppRoot());\n\t\t$sDefaultGraphvizPath = (strtolower(substr(PHP_OS, 0, 3)) === 'win') ? 'C:\\\\Program Files\\\\Graphviz\\\\bin\\\\dot.exe' : '/usr/bin/dot';\n\t\t$sGraphvizPath = $this->oWizard->GetParameter('graphviz_path', $sDefaultGraphvizPath);\n\t\t$oPage->add('<h2>Additional parameters</h2>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Application URL</legend>');\n\t\t$oPage->add('<table>');\n\t\t$oPage->add('<tr><td>URL: </td><td><input id=\"application_url\" name=\"application_url\" type=\"text\" size=\"35\" maxlength=\"1024\" value=\"'.htmlentities($sApplicationURL, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_application_url\"/></td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\">Change the value above if the end-users will be accessing the application by another path due to a specific configuration of the web server.</td><tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Path to Graphviz\\' dot application</legend>');\n\t\t$oPage->add('<table>');\n\t\t$oPage->add('<tr><td>Path: </td><td><input id=\"graphviz_path\" name=\"graphviz_path\" type=\"text\" size=\"35\" maxlength=\"1024\" value=\"'.htmlentities($sGraphvizPath, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_graphviz_path\"/></td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\"><a href=\"http://www.graphviz.org\" target=\"_blank\">Graphviz</a> is required to display the impact analysis graph (i.e. impacts / depends on).</td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\"><span id=\"graphviz_status\"></span></td><tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$sAuthentToken = $this->oWizard->GetParameter('authent', '');\n\t\t$oPage->add('<input type=\"hidden\" id=\"authent_token\" value=\"'.$sAuthentToken.'\"/>');\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t\t$('#application_url').bind('change keyup', function() { WizardUpdateButtons(); } );\n\t\t$('#graphviz_path').bind('change keyup init', function() { WizardUpdateButtons();  WizardAsyncAction('check_graphviz', { graphviz_path: $('#graphviz_path').val(), authent: $('#authent_token').val() }); } ).trigger('init');\n\t\t$('#btn_next').click(function() {\n\t\t\tbRet = true;\n\t\t\tif ($(this).attr('data-graphviz') != 'ok')\n\t\t\t{\n\t\t\t\tbRet = confirm('The impact analysis will not be displayed properly. Are you sure you want to continue?');\n\t\t\t}\n\t\t\treturn bRet;\n\t\t});\nEOF\n\t\t);\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\tswitch($sCode)\n\t\t{\n\t\t\tcase 'check_graphviz':\n\t\t\t$sGraphvizPath = $aParameters['graphviz_path'];\n\t\t\t$oCheck = SetupUtils::CheckGraphviz($sGraphvizPath);\n\t\t\t$sMessage = json_encode($oCheck->sLabel);\n\t\t\tswitch($oCheck->iSeverity)\n\t\t\t{\n\t\t\t\tcase CheckResult::INFO:\n\t\t\t\t$sStatus = 'ok';\n\t\t\t\t$sMessage = json_encode('<img src=\"../images/validation_ok.png\">&nbsp;'.$oCheck->sLabel);\n\n\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\tcase CheckResult::ERROR:\n\t\t\t\tcase CheckResult::WARNING:\n\t\t\t\t$sStatus = 'ko';\n\t\t\t\t$sMessage = json_encode('<img src=\"../images/error.png\">&nbsp;'.$oCheck->sLabel);\n\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#graphviz_status\").html($sMessage);\n\t$('#btn_next').attr('data-graphviz', '$sStatus');\nEOF\n\t\t\t);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\tbRet = ($('#application_url').val() != '');\n\tif (!bRet)\n\t{\n\t\t$(\"#v_application_url\").html('<img src=\"../images/validation_error.png\" title=\"This field cannot be empty\"/>');\n\t}\n\telse\n\t{\n\t\t$(\"#v_application_url\").html('');\n\t}\n\tbGraphviz = ($('#graphviz_path').val() != '');\n\tif (!bGraphviz)\n\t{\n\t\t// Does not prevent to move forward\n\t\t$(\"#v_graphviz_path\").html('<img src=\"../images/validation_error.png\" title=\"Impact analysis will not display properly\"/>');\n\t}\n\telse\n\t{\n\t\t$(\"#v_graphviz_path\").html('');\n\t}\n\treturn bRet;\nEOF\n\t\t;\n\t}\n}\n/**\n * Choice of the modules to be installed\n */\nclass WizStepModulesChoice extends WizardStep\n{\n\tstatic protected $SEP = '_';\n\tprotected $bUpgrade = false;\n\n\t/**\n\t *\n\t * @var iTopExtensionsMap\n\t */\n\tprotected $oExtensionsMap;\n\n\t/**\n\t * Whether we were able to load the choices from the database or not\n\t * @var bool\n\t */\n\tprotected $bChoicesFromDatabase;\n\n\tpublic function __construct(WizardController $oWizard, $sCurrentState)\n\t{\n\t\tparent::__construct($oWizard, $sCurrentState);\n\t\t$this->bChoicesFromDatabase = false;\n\t\t$this->oExtensionsMap = new iTopExtensionsMap();\n\t\t$sPreviousSourceDir = $this->oWizard->GetParameter('previous_version_dir', '');\n\t\t$sConfigPath = null;\n\t\tif (($sPreviousSourceDir !== '') && is_readable($sPreviousSourceDir.'/conf/production/config-itop.php'))\n\t\t{\n\t\t\t$sConfigPath = $sPreviousSourceDir.'/conf/production/config-itop.php';\n\t\t}\n\t\telse if (is_readable(utils::GetConfigFilePath('production')))\n\t\t{\n\t\t\t$sConfigPath = utils::GetConfigFilePath('production');\n\t\t}\n\n\t\tif ($sConfigPath !== null) // only called if the config file exists : we are updating a previous installation !\n\t\t{\n\t\t\t$oConfig = new Config($sConfigPath);\n\t\t\t$this->bChoicesFromDatabase = $this->oExtensionsMap->LoadChoicesFromDatabase($oConfig);\n\t\t}\n\t}\n\n\tpublic function GetTitle()\n\t{\n\t\t$aStepInfo = $this->GetStepInfo();\n\t\t$sTitle = isset($aStepInfo['title']) ? $aStepInfo['title'] : 'Modules selection';\n\t\treturn $sTitle;\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepModulesChoice', 'WizStepSummary');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t// Accumulates the selected modules:\n\t\t$index = $this->GetStepIndex();\n\n\t\t// use json_encode:decode to store a hash array: step_id => array(input_name => selected_input_id)\n\t\t$aSelectedChoices = json_decode($this->oWizard->GetParameter('selected_components', '{}'), true);\n\t\t$aSelected = utils::ReadParam('choice', array());\n\t\t$aSelectedChoices[$index] = $aSelected;\n\t\t$this->oWizard->SetParameter('selected_components', json_encode($aSelectedChoices));\n\n\t\tif ($this->GetStepInfo($index) == null)\n\t\t{\n\t\t\tthrow new Exception('Internal error: invalid step \"'.$index.'\" for the choice of modules.');\n\t\t}\n\t\telse if ($bMoveForward)\n\t\t{\n\t\t\tif ($this->GetStepInfo(1 + $index) != null)\n\t\t\t{\n\t\t\t\treturn array('class' => 'WizStepModulesChoice', 'state' => (1+$index));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Exiting this step of the wizard, let's convert the selection into a list of modules\n\t\t\t\t$aModules = array();\n\t\t\t\t$aExtensions = array();\n\t\t\t\t$sDisplayChoices = '<ul>';\n\t\t\t\tfor($i = 0; $i <= $index; $i++)\n\t\t\t\t{\n\t\t\t\t\t$aStepInfo = $this->GetStepInfo($i);\n\t\t\t\t\t$sDisplayChoices .= $this->GetSelectedModules($aStepInfo, $aSelectedChoices[$i], $aModules, '', '', $aExtensions);\n\t\t\t\t}\n\t\t\t\t$sDisplayChoices .= '</ul>';\n\t\t\t\tif (class_exists('CreateITILProfilesInstaller'))\n\t\t\t\t{\n\t\t\t\t\t$this->oWizard->SetParameter('old_addon', true);\n\t\t\t\t}\n\t\t\t\t$this->oWizard->SetParameter('selected_modules', json_encode(array_keys($aModules)));\n\t\t\t\t$this->oWizard->SetParameter('selected_extensions', json_encode($aExtensions));\n\t\t\t\t$this->oWizard->SetParameter('display_choices', $sDisplayChoices);\n\t\t\t\treturn array('class' => 'WizStepSummary', 'state' => '');\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$this->DisplayStep($oPage);\n\t}\n\n\tprotected function DisplayStep($oPage)\n\t{\n\t\t// Sanity check (not stopper, to let developpers go further...)\n\t\ttry\n\t\t{\n\t\t\tSetupUtils::AnalyzeInstallation($this->oWizard, true);\n\t\t}\n\t\tcatch(MissingDependencyException $e)\n\t\t{\n\t\t\t$oPage->warning($e->getMessage());\n\t\t}\n\n\t\t$this->bUpgrade = ($this->oWizard->GetParameter('install_mode') != 'install');\n\t\t$aStepInfo = $this->GetStepInfo();\n\t\t$oPage->add_style(\"div.choice { margin: 0.5em;}\");\n\t\t$oPage->add_style(\"div.choice a { text-decoration:none; font-weight: bold; color: #1C94C4 }\");\n\t\t$oPage->add_style(\"div.description { margin-left: 2em; }\");\n\t\t$oPage->add_style(\".choice-disabled { color: #999; }\");\n\t\t$oPage->add('<table class=\"module-selection-banner\"><tr>');\n\t\t$sBannerPath = isset($aStepInfo['banner']) ? $aStepInfo['banner'] : '';\n\t\tif (!empty($sBannerPath))\n\t\t{\n\t\t\tif (substr($sBannerPath, 0, 1) == '/')\n\t\t\t{\n\t\t\t\t// absolute path, means relative to APPROOT\n\t\t\t\t$sBannerUrl = utils::GetDefaultUrlAppRoot().$sBannerPath;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// relative path: i.e. relative to the directory containing the XML file\n\t\t\t\t$sFullPath = dirname($this->GetSourceFilePath()).'/'.$sBannerPath;\n\t\t\t\t$sRealPath = realpath($sFullPath);\n\t\t\t\t$sBannerUrl = utils::GetDefaultUrlAppRoot().str_replace(realpath(APPROOT), '', $sRealPath);\n\t\t\t}\n\t\t\t$oPage->add('<td><img src=\"'.$sBannerUrl.'\"/><td>');\n\t\t}\n\t\t$sDescription = isset($aStepInfo['description']) ? $aStepInfo['description'] : '';\n\t\t$oPage->add('<td>'.$sDescription.'<td>');\n\t\t$oPage->add('</tr></table>');\n\n\t\t// Build the default choices\n\t\t$aDefaults = array();\n\t\t$aModules = SetupUtils::AnalyzeInstallation($this->oWizard);\n\t\t$aDefaults = $this->GetDefaults($aStepInfo, $aModules);\n\t\t//echo \"<pre>aStepInfo:\\n \".print_r($aStepInfo, true).\"</pre>\";\n\t\t//echo \"<pre>aDefaults:\\n \".print_r($aDefaults, true).\"</pre>\";\n\n\t\t$index = $this->GetStepIndex();\n\n\t\t// retrieve the saved selection\n\t\t// use json_encode:decode to store a hash array: step_id => array(input_name => selected_input_id)\n\t\t$aParameters = json_decode($this->oWizard->GetParameter('selected_components', '{}'), true);\n\t\tif (!isset($aParameters[$index]))\n\t\t{\n\t\t\t$aParameters[$index] = $aDefaults;\n\t\t}\n\t\t$aSelectedComponents = $aParameters[$index];\n\n\t\t$oPage->add('<div class=\"module-selection-body\">');\n\t\t$this->DisplayOptions($oPage, $aStepInfo, $aSelectedComponents, $aDefaults);\n\t\t$oPage->add('</div>');\n\n\t\t$oPage->add_script(\n<<<EOF\nfunction CheckChoice(sChoiceId)\n{\n\tvar oElement = $('#'+sChoiceId);\n\tvar bChecked = oElement.prop('checked');\n\tvar sId = sChoiceId.replace('choice', '');\n\tif ((oElement.attr('type') == 'radio') && bChecked)\n\t{\n\t\t// Only the radio that is clicked is notified, let's warn the other radio buttons\n\t\tsName = oElement.attr('name');\n\t\t$('input[name=\"'+sName+'\"]').each(function() {\n\t\t\tvar sRadioId = $(this).attr('id');\n\t\t\tif ((sRadioId != sChoiceId) && (sRadioId != undefined))\n\t\t\t{\n\t\t\t\tCheckChoice(sRadioId);\n\t\t\t}\n\t\t});\n\t}\n\t\n\t$('#sub_choices'+sId).each(function() {\n\t\tif (!bChecked)\n\t\t{\n\t\t\t$(this).addClass('choice-disabled');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$(this).removeClass('choice-disabled');\n\t\t}\n\t\t\n\t\t$('input', this).each(function() {\n\t\t\tif (bChecked)\n\t\t\t{\n\t\t\t\tif ($(this).attr('data-disabled') != 'disabled')\n\t\t\t\t{\n\t\t\t\t\t// Only non-mandatory fields can be enabled\n\t\t\t\t\t$(this).prop('disabled', false);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$(this).prop('disabled', true);\n\t\t\t\t$(this).prop('checked', false);\n\t\t\t}\n\t\t});\n\t});\n}\nEOF\n\t\t);\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t\t$('.wiz-choice').bind('change', function() { CheckChoice($(this).attr('id')); } );\n\t\t$('.wiz-choice').trigger('change');\nEOF\n\t\t);\n\t}\n\n\tprotected function GetDefaults($aInfo, $aModules, $sParentId = '')\n\t{\n\t\t$aDefaults = array();\n\t\tif (!$this->bChoicesFromDatabase)\n\t\t{\n\t\t\t$this->GuessDefaultsFromModules($aInfo, $aDefaults, $aModules, $sParentId);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->GetDefaultsFromDatabase($aInfo, $aDefaults, $sParentId);\n\t\t}\n\t\treturn $aDefaults;\n\t}\n\n\tprotected function GetDefaultsFromDatabase($aInfo, &$aDefaults, $sParentId)\n\t{\n\t\t$aOptions = isset($aInfo['options']) ? $aInfo['options'] : array();\n\t\tforeach($aOptions as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\tif ($this->bUpgrade)\n\t\t\t{\n\t\t\t\tif ($this->oExtensionsMap->IsMarkedAsChosen($aChoice['extension_code']))\n\t\t\t\t{\n\t\t\t\t\t$aDefaults[$sChoiceId] = $sChoiceId;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isset($aChoice['default']) && $aChoice['default'])\n\t\t\t{\n\t\t\t\t$aDefaults[$sChoiceId] = $sChoiceId;\n\t\t\t}\n\t\t\t// Recurse for sub_options (if any)\n\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t{\n\t\t\t\t$this->GetDefaultsFromDatabase($aChoice['sub_options'], $aDefaults, $sChoiceId);\n\t\t\t}\n\t\t}\n\n\t\t$aAlternatives = isset($aInfo['alternatives']) ? $aInfo['alternatives'] : array();\n\t\t$sChoiceName = null;\n\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\tif ($sChoiceName == null)\n\t\t\t{\n\t\t\t\t$sChoiceName = $sChoiceId; // All radios share the same name\n\t\t\t}\n\t\t\tif ($this->bUpgrade)\n\t\t\t{\n\t\t\t\tif ($this->oExtensionsMap->IsMarkedAsChosen($aChoice['extension_code']))\n\t\t\t\t{\n\t\t\t\t\t$aDefaults[$sChoiceName] = $sChoiceId;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isset($aChoice['default']) && $aChoice['default'])\n\t\t\t{\n\t\t\t\t$aDefaults[$sChoiceName] = $sChoiceId;\n\t\t\t}\n\t\t\t// Recurse for sub_options (if any)\n\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t{\n\t\t\t\t$this->GetDefaultsFromDatabase($aChoice['sub_options'], $aDefaults, $sChoiceId);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Try to guess the user choices based on the current list of installed modules...\n\t * @param array $aInfo\n\t * @param array $aDefaults\n\t * @param array $aModules\n\t * @param string $sParentId\n\t * @return array\n\t */\n\tprotected function GuessDefaultsFromModules($aInfo, &$aDefaults, $aModules, $sParentId = '')\n\t{\n\t\t$aRetScore = array();\n\t\t$aScores = array();\n\n\t\t$aOptions = isset($aInfo['options']) ? $aInfo['options'] : array();\n\t\tforeach($aOptions as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\t$aScores[$sChoiceId] = array();\n\t\t\tif (!$this->bUpgrade && isset($aChoice['default']) && $aChoice['default'])\n\t\t\t{\n\t\t\t\t$aDefaults[$sChoiceId] = $sChoiceId;\n\t\t\t}\n\t\t\tif ($this->bUpgrade)\n\t\t\t{\n\t\t\t\t// In upgrade mode, the defaults are the installed modules\n\t\t\t\tforeach($aChoice['modules'] as $sModuleId)\n\t\t\t\t{\n\t\t\t\t\tif ($aModules[$sModuleId]['version_db'] != '')\n\t\t\t\t\t{\n\t\t\t\t\t\t// A module corresponding to this choice is installed\n\t\t\t\t\t\t$aScores[$sChoiceId][$sModuleId] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Used for migration from 1.3.x or before\n\t\t\t\t// Accept that the new version can have one new module than the previous version\n\t\t\t\t// The option is still selected\n\t\t\t\t$iSelected = count($aScores[$sChoiceId]);\n\t\t\t\t$iNeeded = count($aChoice['modules']);\n\t\t\t\tif (($iSelected > 0) && (($iNeeded - $iSelected) < 2))\n\t\t\t\t{\n\t\t\t\t\t// All the modules are installed, this choice is selected\n\t\t\t\t\t$aDefaults[$sChoiceId] = $sChoiceId;\n\t\t\t\t}\n\t\t\t\t$aRetScore = array_merge($aRetScore, $aScores[$sChoiceId]);\n\t\t\t}\n\n\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t{\n\t\t\t\t$aScores[$sChoiceId] = array_merge($aScores[$sChoiceId], $this->GuessDefaultsFromModules($aChoice['sub_options'], $aDefaults, $sChoiceId));\n\t\t\t}\n\t\t\t$index++;\n\t\t}\n\n\t\t$aAlternatives = isset($aInfo['alternatives']) ? $aInfo['alternatives'] : array();\n\t\t$sChoiceName = null;\n\t\t$sChoiceIdNone = null;\n\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\t$aScores[$sChoiceId] = array();\n\t\t\tif ($sChoiceName == null)\n\t\t\t{\n\t\t\t\t$sChoiceName = $sChoiceId;\n\t\t\t}\n\t\t\tif (!$this->bUpgrade && isset($aChoice['default']) && $aChoice['default'])\n\t\t\t{\n\t\t\t\t$aDefaults[$sChoiceName] = $sChoiceId;\n\t\t\t}\n\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t{\n\t\t\t\t// By default (i.e. install-mode), sub options can only be checked if the parent option is checked by default\n\t\t\t\tif ($this->bUpgrade || (isset($aChoice['default']) && $aChoice['default']))\n\t\t\t\t{\n\t\t\t\t\t$aScores[$sChoiceId] = $this->GuessDefaultsFromModules($aChoice['sub_options'], $aDefaults, $aModules, $sChoiceId);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$index++;\n\t\t}\n\n\t\t$iMaxScore = 0;\n\t\tif ($this->bUpgrade && (count($aAlternatives) > 0))\n\t\t{\n\t\t\t// The installed choices have precedence over the 'default' choices\n\t\t\t// In case several choices share the same base modules, let's weight the alternative choices\n\t\t\t// based on their number of installed modules\n\t\t\t$sChoiceName = null;\n\n\t\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t\t{\n\t\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\t\tif ($sChoiceName == null)\n\t\t\t\t{\n\t\t\t\t\t$sChoiceName = $sChoiceId;\n\t\t\t\t}\n\t\t\t\tif (array_key_exists('modules', $aChoice))\n\t\t\t\t{\n\t\t\t\t\tforeach($aChoice['modules'] as $sModuleId)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($aModules[$sModuleId]['version_db'] != '')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// A module corresponding to this choice is installed, increase the score of this choice\n\t\t\t\t\t\t\tif (!isset($aScores[$sChoiceId])) $aScores[$sChoiceId] = array();\n\t\t\t\t\t\t\t$aScores[$sChoiceId][$sModuleId] = true;\n\t\t\t\t\t\t\t$iMaxScore = max($iMaxScore, count($aScores[$sChoiceId]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//if (count($aScores[$sChoiceId]) == count($aChoice['modules']))\n\t\t\t\t\t//{\n\t\t\t\t\t//\t$iScore += 100; // Bonus for the parent when a choice is complete\n\t\t\t\t\t//}\n\t\t\t\t\t$aRetScore = array_merge($aRetScore, $aScores[$sChoiceId]);\n\t\t\t\t}\n\t\t\t\t$iMaxScore = max($iMaxScore, isset($aScores[$sChoiceId]) ? count($aScores[$sChoiceId]) : 0);\n\t\t\t}\n\t\t}\n\t\tif ($iMaxScore > 0)\n\t\t{\n\t\t\t$aNumericScores = array();\n\t\t\tforeach($aScores as $sChoiceId => $aModules)\n\t\t\t{\n\t\t\t\t$aNumericScores[$sChoiceId] = count($aModules);\n\t\t\t}\n\t\t\t// The choice with the bigger score wins !\n\t\t\tasort($aNumericScores, SORT_NUMERIC);\n\t\t\t$aKeys = array_keys($aNumericScores);\n\t\t\t$sBetterChoiceId = array_pop($aKeys);\n\t\t\t$aDefaults[$sChoiceName] = $sBetterChoiceId;\n\t\t}\n\t\t// echo \"Scores: <pre>\".print_r($aScores, true).\"</pre><br/>\";\n\t\t// echo \"Defaults: <pre>\".print_r($aDefaults, true).\"</pre><br/>\";\n\t\treturn $aRetScore;\n\t}\n\n\t/**\n\t * Converts the list of selected \"choices\" into a list of \"modules\": take into account the selected and the mandatory modules\n\t * @param hash $aInfo Info about the \"choice\" array('options' => array(...), 'alternatives' => array(...))\n\t * @param hash $aSelectedChoices List of selected choices array('name' => 'selected_value_id')\n\t * @param hash $aModules Return parameter: List of selected modules array('module_id' => true)\n\t * @param string $sParentId Used for recursion\n\t * @return string A text representation of what will be installed\n\t */\n\tprotected function GetSelectedModules($aInfo, $aSelectedChoices, &$aModules, $sParentId = '', $sDisplayChoices = '', &$aSelectedExtensions = null)\n\t{\n\t\tif ($sParentId == '')\n\t\t{\n\t\t\t// Check once (before recursing) that the hidden modules are selected\n\t\t\tforeach(SetupUtils::AnalyzeInstallation($this->oWizard) as $sModuleId => $aModule)\n\t\t\t{\n\t\t\t\tif (($sModuleId != ROOT_MODULE) && !isset($aModules[$sModuleId]))\n\t\t\t\t{\n\t\t\t\t\tif (($aModule['category'] == 'authentication') || (!$aModule['visible'] && !isset($aModule['auto_select'])))\n\t\t\t\t\t{\n\t\t\t\t\t\t$aModules[$sModuleId] = true;\n\t\t\t\t\t\t$sDisplayChoices .= '<li><i>'.$aModule['label'].' (hidden)</i></li>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$aOptions = isset($aInfo['options']) ? $aInfo['options'] : array();\n\t\tforeach($aOptions as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\tif ( (isset($aChoice['mandatory']) && $aChoice['mandatory']) ||\n\t\t\t\t (isset($aSelectedChoices[$sChoiceId]) && ($aSelectedChoices[$sChoiceId] == $sChoiceId)) )\n\t\t\t{\n\t\t\t\t$sDisplayChoices .= '<li>'.$aChoice['title'].'</li>';\n\t\t\t\tif (isset($aChoice['modules']))\n\t\t\t\t{\n\t\t\t\t\tforeach($aChoice['modules'] as $sModuleId)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aModules[$sModuleId] = true; // store the Id of the selected module\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$sChoiceType = isset($aChoice['type']) ? $aChoice['type'] : 'wizard_option';\n\t\t\t\tif ($aSelectedExtensions !== null)\n\t\t\t\t{\n\t\t\t\t\t$aSelectedExtensions[] = $aChoice['extension_code'];\n\t\t\t\t}\n\t\t\t\t// Recurse only for selected choices\n\t\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t\t{\n\t\t\t\t\t$sDisplayChoices .= '<ul>';\n\t\t\t\t\t$sDisplayChoices = $this->GetSelectedModules($aChoice['sub_options'], $aSelectedChoices, $aModules, $sChoiceId, $sDisplayChoices, $aSelectedExtensions);\n\t\t\t\t\t$sDisplayChoices .= '</ul>';\n\t\t\t\t}\n\t\t\t\t$sDisplayChoices .= '</li>';\n\t\t\t}\n\t\t\t$index++;\n\t\t}\n\n\t\t$aAlternatives = isset($aInfo['alternatives']) ? $aInfo['alternatives'] : array();\n\t\t$sChoiceName = null;\n\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\tif ($sChoiceName == null)\n\t\t\t{\n\t\t\t\t$sChoiceName = $sChoiceId;\n\t\t\t}\n\t\t\tif ( (isset($aChoice['mandatory']) && $aChoice['mandatory']) ||\n\t\t\t\t (isset($aSelectedChoices[$sChoiceName]) && ($aSelectedChoices[$sChoiceName] == $sChoiceId)) )\n\t\t\t{\n\t\t\t\t$sDisplayChoices .= '<li>'.$aChoice['title'].'</li>';\n\t\t\t\tif ($aSelectedExtensions !== null)\n\t\t\t\t{\n\t\t\t\t\t$aSelectedExtensions[] = $aChoice['extension_code'];\n\t\t\t\t}\n\t\t\t\tif (isset($aChoice['modules']))\n\t\t\t\t{\n\t\t\t\t\tforeach($aChoice['modules'] as $sModuleId)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aModules[$sModuleId] = true; // store the Id of the selected module\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Recurse only for selected choices\n\t\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t\t{\n\t\t\t\t\t$sDisplayChoices .= '<ul>';\n\t\t\t\t\t$sDisplayChoices = $this->GetSelectedModules($aChoice['sub_options'], $aSelectedChoices, $aModules, $sChoiceId, $sDisplayChoices, $aSelectedExtensions);\n\t\t\t\t\t$sDisplayChoices .= '</ul>';\n\t\t\t\t}\n\t\t\t\t$sDisplayChoices .= '</li>';\n\t\t\t}\n\t\t\t$index++;\n\t\t}\n\t\tif ($sParentId == '')\n\t\t{\n\t\t\t// Last pass (after all the user's choices are turned into \"selected\" modules):\n\t\t\t// Process 'auto_select' modules for modules that are not already selected\n\t\t\t$aAvailableModules = SetupUtils::AnalyzeInstallation($this->oWizard);\n\t\t\tdo\n\t\t\t{\n\t\t\t\t// Loop while new modules are added...\n\t\t\t\t$bModuleAdded = false;\n\t\t\t\tforeach($aAvailableModules as $sModuleId => $aModule)\n\t\t\t\t{\n\t\t\t\t\tif (($sModuleId != ROOT_MODULE) && !array_key_exists($sModuleId, $aModules) && isset($aModule['auto_select']))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$bSelected = false;\n\t\t\t\t\t\t\tSetupInfo::SetSelectedModules($aModules);\n\t\t\t\t\t\t\teval('$bSelected = ('.$aModule['auto_select'].');');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(Exception $e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$sDisplayChoices .= '<li><b>Warning: auto_select failed with exception ('.$e->getMessage().') for module \"'.$sModuleId.'\"</b></li>';\n\t\t\t\t\t\t\t$bSelected = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($bSelected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aModules[$sModuleId] = true; // store the Id of the selected module\n\t\t\t\t\t\t\t$sDisplayChoices .= '<li>'.$aModule['label'].' (auto_select)</li>';\n\t\t\t\t\t\t\t$bModuleAdded  = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile($bModuleAdded);\n\t\t}\n\n\t\treturn $sDisplayChoices;\n\t}\n\n\tprotected function GetStepIndex()\n\t{\n\t\tswitch($this->sCurrentState)\n\t\t{\n\t\t\tcase 'start_install':\n\t\t\tcase 'start_upgrade':\n\t\t\t$index = 0;\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t$index = (integer)$this->sCurrentState;\n\t\t}\n\t\treturn $index;\n\t}\n\tprotected function GetStepInfo($idx = null)\n\t{\n\t\t$aStepInfo = null;\n\t\tif ($idx === null)\n\t\t{\n\t\t\t$index = $this->GetStepIndex();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$index = $idx;\n\t\t}\n\n\t\t$aSteps = array();\n\t\t$this->oWizard->SetParameter('additional_extensions_modules', json_encode(array())); // Default value, no additional extensions\n\n\t\tif (@file_exists($this->GetSourceFilePath()))\n\t\t{\n\t\t\t// Found an \"installation.xml\" file, let's us tis definition for the wizard\n\t\t\t$aParams = new XMLParameters($this->GetSourceFilePath());\n\t\t\t$aSteps = $aParams->Get('steps', array());\n\n\t\t\t// Additional step for the \"extensions\"\n\t\t\t$aStepDefinition = array(\n\t\t\t\t\t'title' => 'Extensions',\n\t\t\t\t\t'description' => '<h2>Select additional extensions to install. You can launch the installation again to install new extensions, but you cannot remove already installed extensions.</h2>',\n\t\t\t\t\t'banner' => '/images/extension.png',\n\t\t\t\t\t'options' => array()\n\t\t\t);\n\n\t\t\tforeach($this->oExtensionsMap->GetAllExtensions() as $oExtension)\n\t\t\t{\n\t\t\t\tif (($oExtension->sSource !== iTopExtension::SOURCE_WIZARD) && ($oExtension->bVisible) && (count($oExtension->aMissingDependencies) == 0))\n\t\t\t\t{\n\t\t\t\t\t$aStepDefinition['options'][] = array(\n\t\t\t\t\t\t\t'extension_code' => $oExtension->sCode,\n\t\t\t\t\t\t\t'title' => $oExtension->sLabel,\n\t\t\t\t\t\t\t'description' => $oExtension->sDescription,\n\t\t\t\t\t\t\t'more_info' => $oExtension->sMoreInfoUrl,\n\t\t\t\t\t\t\t'default' => true, // by default offer to install all modules\n\t\t\t\t\t\t\t'modules' => $oExtension->aModules,\n\t\t\t\t\t\t\t'mandatory' => $oExtension->bMandatory || ($oExtension->sSource === iTopExtension::SOURCE_REMOTE),\n\t\t\t\t\t\t\t'source_label' => $this->GetExtensionSourceLabel($oExtension->sSource),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Display this step of the wizard only if there is something to display\n\t\t\tif (count($aStepDefinition['options']) !== 0)\n\t\t\t{\n\t\t\t\t$aSteps[] = $aStepDefinition;\n\t\t\t\t$this->oWizard->SetParameter('additional_extensions_modules', json_encode($aStepDefinition['options']));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// No wizard configuration provided, build a standard one with just one big list\n\t\t\t$aStepDefinition = array(\n\t\t\t\t\t'title' => 'Modules Selection',\n\t\t\t\t\t'description' => '<h2>Select the modules to install. You can launch the installation again to install new modules, but you cannot remove already installed modules.</h2>',\n\t\t\t\t\t'banner' => '/images/modules.png',\n\t\t\t\t\t'options' => array()\n\t\t\t);\n\t\t\tforeach($this->oExtensionsMap->GetAllExtensions() as $oExtension)\n\t\t\t{\n\t\t\t\tif (($oExtension->bVisible) && (count($oExtension->aMissingDependencies) == 0))\n\t\t\t\t{\n\t\t\t\t\t$aStepDefinition['options'][] = array(\n\t\t\t\t\t\t\t'extension_code' => $oExtension->sCode,\n\t\t\t\t\t\t\t'title' => $oExtension->sLabel,\n\t\t\t\t\t\t\t'description' => $oExtension->sDescription,\n\t\t\t\t\t\t\t'more_info' => $oExtension->sMoreInfoUrl,\n\t\t\t\t\t\t\t'default' => true, // by default offer to install all modules\n\t\t\t\t\t\t\t'modules' => $oExtension->aModules,\n\t\t\t\t\t\t\t'mandatory' => $oExtension->bMandatory ||  ($oExtension->sSource !== iTopExtension::SOURCE_REMOTE),\n\t\t\t\t\t\t\t'source_label' => $this->GetExtensionSourceLabel($oExtension->sSource),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aSteps[] = $aStepDefinition;\n\t\t}\n\n\t\tif (array_key_exists($index, $aSteps))\n\t\t{\n\t\t\t$aStepInfo = $aSteps[$index];\n\t\t}\n\n\t\treturn $aStepInfo;\n\t}\n\n\tprotected function GetExtensionSourceLabel($sSource)\n\t{\n\t\tswitch($sSource)\n\t\t{\n\t\t\tcase iTopExtension::SOURCE_MANUAL:\n\t\t\t$sResult = 'Extension';\n\t\t\tbreak;\n\n\t\t\tcase iTopExtension::SOURCE_REMOTE:\n\t\t\t$sResult = (ITOP_APPLICATION == 'iTop') ? 'iTop-Hub' : 'ITSM-Designer';\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t$sResult = '';\n\t\t}\n\t\tif ($sResult == '')\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\treturn '<span style=\"display:inline-block;font-size:8pt;padding:3px;border-radius:4px;color:#fff;background-color:#1c94c4;margin-left:0.5em;margin-right:0.5em\">'.$sResult.'</span>';\n\t}\n\n\tprotected function DisplayOptions($oPage, $aStepInfo, $aSelectedComponents, $aDefaults, $sParentId = '', $bAllDisabled = false)\n\t{\n\t\t$aOptions = isset($aStepInfo['options']) ? $aStepInfo['options'] : array();\n\t\t$aAlternatives = isset($aStepInfo['alternatives']) ? $aStepInfo['alternatives'] : array();\n\t\t$index = 0;\n\n\t\t$sAllDisabled = '';\n\t\tif ($bAllDisabled)\n\t\t{\n\t\t\t$sAllDisabled = 'disabled data-disabled=\"disabled\" ';\n\t\t}\n\n\t\tforeach($aOptions as $index => $aChoice)\n\t\t{\n\t\t\t$sAttributes = '';\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\t$sDataId = 'data-id=\"'.htmlentities($aChoice['extension_code'], ENT_QUOTES, 'UTF-8').'\"';\n\t\t\t$sId = htmlentities($aChoice['extension_code'], ENT_QUOTES, 'UTF-8');\n\t\t\t$bIsDefault = array_key_exists($sChoiceId, $aDefaults);\n\t\t\t$bSelected = isset($aSelectedComponents[$sChoiceId]) && ($aSelectedComponents[$sChoiceId] == $sChoiceId);\n\t\t\t$bMandatory = (isset($aChoice['mandatory']) && $aChoice['mandatory']) || ($this->bUpgrade && $bIsDefault);\n\t\t\t$bDisabled = false;\n\t\t\tif ($bMandatory)\n\t\t\t{\n\t\t\t\t$oPage->add('<div class=\"choice\" '.$sDataId.'><input id=\"'.$sId.'\" checked disabled data-disabled=\"disabled\" type=\"checkbox\"'.$sAttributes.'/><input type=\"hidden\" name=\"choice['.$sChoiceId.']\" value=\"'.$sChoiceId.'\">&nbsp;');\n\t\t\t\t$bDisabled = true;\n\t\t\t}\n\t\t\telse if ($bSelected)\n\t\t\t{\n\t\t\t\t$oPage->add('<div class=\"choice\" '.$sDataId.'><input class=\"wiz-choice\" '.$sAllDisabled.'id=\"'.$sId.'\" name=\"choice['.$sChoiceId.']\" type=\"checkbox\" checked value=\"'.$sChoiceId.'\"/>&nbsp;');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oPage->add('<div class=\"choice\" '.$sDataId.'><input class=\"wiz-choice\" '.$sAllDisabled.'id=\"'.$sId.'\" name=\"choice['.$sChoiceId.']\" type=\"checkbox\" value=\"'.$sChoiceId.'\"/>&nbsp;');\n\t\t\t}\n\t\t\t$this->DisplayChoice($oPage, $aChoice, $aSelectedComponents, $aDefaults, $sChoiceId, $bDisabled);\n\t\t\t$oPage->add('</div>');\n\t\t\t$index++;\n\t\t}\n\t\t$sChoiceName = null;\n\t\t$sDisabled = '';\n\t\t$bDisabled = false;\n\t\t$sChoiceIdNone = null;\n\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\tif ($sChoiceName == null)\n\t\t\t{\n\t\t\t\t$sChoiceName = $sChoiceId; // All radios share the same name\n\t\t\t}\n\t\t\t$bIsDefault = array_key_exists($sChoiceName, $aDefaults) && ($aDefaults[$sChoiceName] == $sChoiceId);\n\t\t\t$bMandatory = (isset($aChoice['mandatory']) && $aChoice['mandatory']) || ($this->bUpgrade && $bIsDefault);\n\t\t\tif ($bMandatory || $bAllDisabled)\n\t\t\t{\n\t\t\t\t// One choice is mandatory, all alternatives are disabled\n\t\t\t\t$sDisabled = ' disabled data-disabled=\"disabled\"';\n\t\t\t\t$bDisabled = true;\n\t\t\t}\n\t\t\tif ( (!isset($aChoice['sub_options']) || (count($aChoice['sub_options']) == 0)) && (!isset($aChoice['modules']) || (count($aChoice['modules']) == 0)) )\n\t\t\t{\n\t\t\t\t$sChoiceIdNone = $sChoiceId; // the \"None\" / empty choice\n\t\t\t}\n\t\t}\n\n\t\tif (!array_key_exists($sChoiceName, $aDefaults) || ($aDefaults[$sChoiceName] == $sChoiceIdNone))\n\t\t{\n\t\t\t// The \"none\" choice does not disable the selection !!\n\t\t\t$sDisabled = '';\n\t\t\t$bDisabled = false;\n\t\t}\n\n\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t{\n\t\t\t$sAttributes = '';\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\t$sDataId = 'data-id=\"'.htmlentities($aChoice['extension_code'], ENT_QUOTES, 'UTF-8').'\"';\n\t\t\t$sId = htmlentities($aChoice['extension_code'], ENT_QUOTES, 'UTF-8');\n\n\t\t\tif ($sChoiceName == null)\n\t\t\t{\n\t\t\t\t$sChoiceName = $sChoiceId; // All radios share the same name\n\t\t\t}\n\t\t\t$bIsDefault = array_key_exists($sChoiceName, $aDefaults) && ($aDefaults[$sChoiceName] == $sChoiceId);\n\t\t\t$bSelected = isset($aSelectedComponents[$sChoiceName]) && ($aSelectedComponents[$sChoiceName] == $sChoiceId);\n\t\t\tif ( !isset($aSelectedComponents[$sChoiceName]) && ($sChoiceIdNone != null))\n\t\t\t{\n\t\t\t\t// No choice selected, select the \"None\" option\n\t\t\t\t$bSelected = ($sChoiceId == $sChoiceIdNone);\n\t\t\t}\n\t\t\t$bMandatory = (isset($aChoice['mandatory']) && $aChoice['mandatory']) || ($this->bUpgrade && $bIsDefault);\n\n\t\t\tif ($bSelected)\n\t\t\t{\n\t\t\t\t$sAttributes = ' checked ';\n\t\t\t}\n\t\t\t$sHidden = '';\n\t\t\tif ($bMandatory && $bDisabled)\n\t\t\t{\n\t\t\t\t$sAttributes = ' checked ';\n\t\t\t\t$sHidden = '<input type=\"hidden\" name=\"choice['.$sChoiceName.']\" value=\"'.$sChoiceId.'\"/>';\n\t\t\t}\n\t\t\t$oPage->add('<div class=\"choice\" '.$sDataId.'><input class=\"wiz-choice\" id=\"'.$sId.'\" name=\"choice['.$sChoiceName.']\" type=\"radio\"'.$sAttributes.' value=\"'.$sChoiceId.'\"'.$sDisabled.'/>'.$sHidden.'&nbsp;');\n\t\t\t$this->DisplayChoice($oPage, $aChoice, $aSelectedComponents, $aDefaults, $sChoiceId, $bDisabled && !$bSelected);\n\t\t\t$oPage->add('</div>');\n\t\t\t$index++;\n\t\t}\n\t}\n\n\tprotected function DisplayChoice($oPage, $aChoice, $aSelectedComponents, $aDefaults, $sChoiceId, $bDisabled = false)\n\t{\n\t\t$sMoreInfo = (isset($aChoice['more_info']) && ($aChoice['more_info'] != '')) ? '<a target=\"_blank\" href=\"'.$aChoice['more_info'].'\">More information</a>' : '';\n\t\t$sSourceLabel = isset($aChoice['source_label']) ? $aChoice['source_label'] : '';\n\t\t$sId = htmlentities($aChoice['extension_code'], ENT_QUOTES, 'UTF-8');\n\t\t$oPage->add('<label for=\"'.$sId.'\"><b>'.htmlentities($aChoice['title'], ENT_QUOTES, 'UTF-8').'</b>'.$sSourceLabel.'</label> '.$sMoreInfo);\n\t\t$sDescription = isset($aChoice['description']) ? htmlentities($aChoice['description'], ENT_QUOTES, 'UTF-8') : '';\n\t\t$oPage->add('<div class=\"description\">'.$sDescription.'<span id=\"sub_choices'.$sId.'\">');\n\t\tif (isset($aChoice['sub_options']))\n\t\t{\n\t\t\t$this->DisplayOptions($oPage, $aChoice['sub_options'], $aSelectedComponents, $aDefaults, $sChoiceId, $bDisabled);\n\t\t}\n\t\t$oPage->add('</span></div>');\n\t}\n\n\tprotected function GetSourceFilePath()\n\t{\n\t\t$sSourceDir = $this->oWizard->GetParameter('source_dir');\n\t\treturn $sSourceDir.'/installation.xml';\n\t}\n\n}\n\n/**\n * Summary of the installation tasks\n */\nclass WizStepSummary extends WizardStep\n{\n\tprotected $bDependencyCheck = null;\n\tprotected $sDependencyIssue = null;\n\n\tprotected function CheckDependencies()\n\t{\n\t\tif (is_null($this->bDependencyCheck))\n\t\t{\n\t\t\t$aSelectedModules = json_decode($this->oWizard->GetParameter('selected_modules'), true);\n\t\t\t$this->bDependencyCheck = true;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSetupUtils::AnalyzeInstallation($this->oWizard, true, $aSelectedModules);\n\t\t\t}\n\t\t\tcatch(MissingDependencyException $e)\n\t\t\t{\n\t\t\t\t$this->bDependencyCheck = false;\n\t\t\t\t$this->sDependencyIssue = $e->getMessage();\n\t\t\t}\n\t\t}\n\t\treturn $this->bDependencyCheck;\n\t}\n\n\tpublic function GetTitle()\n\t{\n\t\t$sMode = $this->oWizard->GetParameter('mode', 'install');\n\t\tif ($sMode == 'install')\n\t\t{\n\t\t\treturn 'Ready to install';\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 'Ready to upgrade';\n\t\t}\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepDone');\n\t}\n\n\t/**\n\t * Returns the label for the \" Next >> \" button\n\t * @return string The label for the button\n\t */\n\tpublic function GetNextButtonLabel()\n\t{\n\t\treturn ' Install ! ';\n\t}\n\n\tpublic function CanMoveForward()\n\t{\n\t\tif ($this->CheckDependencies())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => 'WizStepDone', 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->add_style(\n<<<EOF\n#params_summary {\n\theight: 200px;\n\toverflow: auto;\n}\n#params_summary div {\n\twidth:100%;\n\tmargin-top:0;\n\tpadding-top: 0.5em;\n\tpadding-left: 0;\n}\n#params_summary div ul {\n\tmargin-left:0;\n\tpadding-left: 20px;\n}\n#params_summary div.closed ul {\n\tdisplay:none;\n}\n#params_summary div li {\n\tlist-style: none;\n\twidth: 100%;\n\tmargin-left:0;\n\tpadding-left: 0em;\n}\n.title {\n\tpadding-left: 20px;\n\tfont-weight: bold;\n\tcursor: pointer;\n\tbackground: url(../images/minus.gif) 2px 2px no-repeat;\n}\n#params_summary div.closed .title {\n\tbackground: url(../images/plus.gif) 2px 2px no-repeat;\n}\n#progress_content {\n\theight: 200px;\n\toverflow: auto;\n\ttext-align: center;\n}\n#installation_progress {\n\tdisplay: none;\n}\nEOF\n\t\t);\n\n\t\t$aInstallParams = $this->BuildConfig();\n\n\t\t$sMode = $aInstallParams['mode'];\n\n\t\t$sDestination = ITOP_APPLICATION.(($sMode == 'install') ? ' version '.ITOP_VERSION.' is about to be installed ' : ' is about to be upgraded ');\n\t\t$sDBDescription = ' <b>existing</b> database <b>'.$aInstallParams['database']['name'].'</b>';\n\t\tif (($sMode == 'install') && ($this->oWizard->GetParameter('create_db') == 'yes'))\n\t\t{\n\t\t\t$sDBDescription = ' <b>new</b> database <b>'.$aInstallParams['database']['name'].'</b>';\n\t\t}\n\t\t$sDestination .= 'into the '.$sDBDescription.' on the server <b>'.$aInstallParams['database']['server'].'</b>.';\n\t\t$oPage->add('<h2>'.$sDestination.'</h2>');\n\n\t\t$oPage->add('<fieldset id=\"summary\"><legend>Installation Parameters</legend>');\n\t\t$oPage->add('<div id=\"params_summary\">');\n\t\t$oPage->add('<div class=\"closed\"><span class=\"title\">Database Parameters</span><ul>');\n\t\t$oPage->add('<li>Server Name: '.$aInstallParams['database']['server'].'</li>');\n\t\t$oPage->add('<li>DB User Name: '.$aInstallParams['database']['user'].'</li>');\n\t\t$oPage->add('<li>DB user password: ***</li>');\n\t\tif (($sMode == 'install') && ($this->oWizard->GetParameter('create_db') == 'yes'))\n\t\t{\n\t\t\t$oPage->add('<li>Database Name: '.$aInstallParams['database']['name'].' (will be created)</li>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oPage->add('<li>Database Name: '.$aInstallParams['database']['name'].'</li>');\n\t\t}\n\t\tif ($aInstallParams['database']['prefix'] != '')\n\t\t{\n\t\t\t$oPage->add('<li>Prefix for the '.ITOP_APPLICATION.' tables: '.$aInstallParams['database']['prefix'].'</li>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oPage->add('<li>Prefix for the '.ITOP_APPLICATION.' tables: none</li>');\n\t\t}\n\t\t$oPage->add('</ul></div>');\n\n\t\t$oPage->add('<div><span class=\"title\">Data Model Configuration</span>');\n\t\t$oPage->add($this->oWizard->GetParameter('display_choices'));\n\t\t$oPage->add('</div>');\n\n\t\t$oPage->add('<div class=\"closed\"><span class=\"title\">Other Parameters</span><ul>');\n\t\tif ($sMode == 'install')\n\t\t{\n\t\t\t$oPage->add('<li>Default language: '.$aInstallParams['language'].'</li>');\n\t\t}\n\n\t\t$oPage->add('<li>URL to access the application: '.$aInstallParams['url'].'</li>');\n\t\t$oPage->add('<li>Graphviz\\' dot path: '.$aInstallParams['graphviz_path'].'</li>');\n\t\tif ($aInstallParams['sample_data'] == 'yes')\n\t\t{\n\t\t\t$oPage->add('<li>Sample data will be loaded into the database.</li>');\n\t\t}\n\t\tif ($aInstallParams['old_addon'])\n\t\t{\n\t\t\t$oPage->add('<li>Compatibility mode: Using the version 1.2 of the UserRightsProfiles add-on.</li>');\n\t\t}\n\t\t$oPage->add('</ul></div>');\n\n\t\tif ($sMode == 'install')\n\t\t{\n\t\t\t$oPage->add('<div class=\"closed\"><span class=\"title\">Admininistrator Account</span><ul>');\n\t\t\t$oPage->add('<li>Login: '.$aInstallParams['admin_account']['user'].'</li>');\n\t\t\t$oPage->add('<li>Password: '.$aInstallParams['admin_account']['pwd'].'</li>');\n\t\t\t$oPage->add('<li>Language: '.$aInstallParams['admin_account']['language'].'</li>');\n\t\t\t$oPage->add('</ul></div>');\n\t\t}\n\n\t\t$aMiscOptions = $aInstallParams['options'];\n\t\tif (count($aMiscOptions) > 0)\n\t\t{\n\t\t\t$oPage->add('<div class=\"closed\"><span class=\"title\">Miscellaneous Options</span><ul>');\n\t\t\tforeach($aMiscOptions as $sKey => $sValue)\n\t\t\t{\n\t\t\t\t$oPage->add('<li>'.$sKey.': '.$sValue.'</li>');\n\t\t\t}\n\t\t\t$oPage->add('</ul></div>');\n\n\t\t}\n\n\t\t$aSelectedModules = $aInstallParams['selected_modules'];\n\n\t\tif (isset($aMiscOptions['generate_config']))\n\t\t{\n\t\t\t$oDoc = new DOMDocument('1.0', 'UTF-8');\n\t\t\t$oDoc->preserveWhiteSpace = false;\n\t\t\t$oDoc->formatOutput = true;\n\t\t\t$oParams = new PHPParameters();\n\t\t\t$oParams->LoadFromHash($aInstallParams);\n\t\t\t$oParams->ToXML($oDoc, null, 'installation');\n\t\t\t$sXML = $oDoc->saveXML();\n\t\t\t$oPage->add('<div class=\"closed\"><span class=\"title\">XML Config file</span><ul><pre>');\n\t\t\t$oPage->add(htmlentities($sXML, ENT_QUOTES, 'UTF-8'));\n\t\t\t$oPage->add('</pre></ul></div>');\n\t\t}\n\n\t\t$oPage->add('</div>'); // params_summary\n\t\t$oPage->add('</fieldset>');\n\n\t\t$oPage->add('<fieldset id=\"installation_progress\"><legend>Progress of the installation</legend>');\n\t\t$oPage->add('<div id=\"progress_content\">');\n\t\t$oPage->add_linked_script('../setup/jquery.progression.js');\n\t\t$oPage->add('<p class=\"center\"><span id=\"setup_msg\">Ready to start...</span></p><div style=\"display:block;margin-left: auto; margin-right:auto;\" id=\"progress\">0%</div>');\n\t\t$oPage->add('</div>'); // progress_content\n\t\t$oPage->add('</fieldset>');\n\n\t\t$sJSONData = json_encode($aInstallParams);\n\t\t$oPage->add('<input type=\"hidden\" id=\"installer_parameters\" value=\"'.htmlentities($sJSONData, ENT_QUOTES, 'UTF-8').'\"/>');\n\n\t\t$sAuthentToken = $this->oWizard->GetParameter('authent', '');\n\t\t$oPage->add('<input type=\"hidden\" id=\"authent_token\" value=\"'.$sAuthentToken.'\"/>');\n\n\t\tif (!$this->CheckDependencies())\n\t\t{\n\t\t\t$oPage->error($this->sDependencyIssue);\n\t\t}\n\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#params_summary div\").addClass('closed');\n\t$(\"#params_summary .title\").click(function() { $(this).parent().toggleClass('closed'); } );\n\t$(\"#btn_next\").bind(\"click.install\", function(event) {\n\t\t\t$('#summary').hide();\n\t\t\t$('#installation_progress').show();\n\t\t\t$(this).prop('disabled', true);\t event.preventDefault(); ExecuteStep(\"\");\n\t});\n\t$(\"#wiz_form\").data(\"installation_status\", \"not started\")\nEOF\n\t\t);\n\t}\n\n\t/**\n\t * Prepare the parameters to execute the installation asynchronously\n\t * @return Hash A big hash array that can be converted to XML or JSON with all the needed parameters\n\t */\n\tprotected function BuildConfig()\n\t{\n\t\t$sMode = $this->oWizard->GetParameter('install_mode', 'install');\n\t\t$aSelectedModules = json_decode($this->oWizard->GetParameter('selected_modules'), true);\n\t\t$aSelectedExtensions = json_decode($this->oWizard->GetParameter('selected_extensions'), true);\n\t\t$sBackupDestination = '';\n\t\t$sPreviousConfigurationFile = '';\n\t\t$sDBName = $this->oWizard->GetParameter('db_name');\n\t\tif ($sMode == 'upgrade')\n\t\t{\n\t\t\t$sPreviousVersionDir = $this->oWizard->GetParameter('previous_version_dir', '');\n\t\t\tif (!empty($sPreviousVersionDir))\n\t\t\t{\n\t\t\t\t$aPreviousInstance = SetupUtils::GetPreviousInstance($sPreviousVersionDir);\n\t\t\t\tif ($aPreviousInstance['found'])\n\t\t\t\t{\n\t\t\t\t\t$sPreviousConfigurationFile = $aPreviousInstance['configuration_file'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($this->oWizard->GetParameter('db_backup', false))\n\t\t\t{\n\t\t\t\t$sBackupDestination = $this->oWizard->GetParameter('db_backup_path', '');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\n\t\t\t$sDBNewName = $this->oWizard->GetParameter('db_new_name', '');\n\t\t\tif ($sDBNewName != '')\n\t\t\t{\n\t\t\t\t$sDBName = $sDBNewName; // Database will be created\n\t\t\t}\n\t\t}\n\n\t\t$sSourceDir = $this->oWizard->GetParameter('source_dir');\n\t\t$aCopies = array();\n\t\tif (($sMode == 'upgrade') && ($this->oWizard->GetParameter('upgrade_type') == 'keep-previous'))\n\t\t{\n\t\t\t$sPreviousVersionDir = $this->oWizard->GetParameter('previous_version_dir');\n\t\t\t$aCopies[] = array('source' => $sSourceDir, 'destination' => 'modules'); // Source is an absolute path, destination is relative to APPROOT\n\t\t\t$aCopies[] = array('source' => $sPreviousVersionDir.'/portal', 'destination' => 'portal'); // Source is an absolute path, destination is relative to APPROOT\n\t\t\t$sSourceDir = APPROOT.'modules';\n\t\t}\n\n\t\tif (($sMode == 'upgrade'))\n\t\t{\n\t\t\t// Copy the previous extensions, if any\n\t\t\t$sPreviousExtensionsDir = $this->oWizard->GetParameter('copy_extensions_from');\n\t\t\tif (is_dir($sPreviousExtensionsDir))\n\t\t\t{\n\t\t\t\t// Copy the extensions one by one to merge them with the existing extensions in /extensions\n\t\t\t\t$aExtensions = glob($sPreviousExtensionsDir.'/*', GLOB_ONLYDIR);\n\t\t\t\tforeach($aExtensions as $sDirPath)\n\t\t\t\t{\n\t\t\t\t\t$sExtName = basename($sDirPath);\n\t\t\t\t\t$aCopies[] = array('source' => $sDirPath, 'destination' => 'extensions/'.$sExtName); // Source is an absolute path, destination is relative to APPROOT\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$aInstallParams = array (\n\t\t\t'mode' => $sMode,\n\t\t\t'preinstall' => array (\n\t\t\t\t'copies' => $aCopies,\n\t\t\t\t// 'backup' => see below\n\t\t\t),\n\t\t\t'source_dir' => str_replace(APPROOT, '', $sSourceDir),\n\t\t\t'datamodel_version' => $this->oWizard->GetParameter('datamodel_version'), //TODO: let the installer compute this automatically...\n\t\t\t'previous_configuration_file' => $sPreviousConfigurationFile,\n\t\t\t'extensions_dir' => 'extensions',\n\t\t\t'target_env' => 'production',\n\t\t\t'workspace_dir' => '',\n\t\t\t'database' => array (\n\t\t\t\t'server' => $this->oWizard->GetParameter('db_server'),\n\t\t\t\t'user' => $this->oWizard->GetParameter('db_user'),\n\t\t\t\t'pwd' => $this->oWizard->GetParameter('db_pwd'),\n\t\t\t\t'name' => $sDBName,\n\t\t\t\t'db_tls_enabled' => $this->oWizard->GetParameter('db_tls_enabled'),\n\t\t\t\t'db_tls_ca' => $this->oWizard->GetParameter('db_tls_ca'),\n\t\t\t\t'prefix' => $this->oWizard->GetParameter('db_prefix'),\n\t\t\t),\n\t\t\t'url' => $this->oWizard->GetParameter('application_url'),\n\t\t\t'graphviz_path' => $this->oWizard->GetParameter('graphviz_path'),\n\t\t\t'admin_account' => array (\n\t\t\t\t'user' => $this->oWizard->GetParameter('admin_user'),\n\t\t\t\t'pwd' => $this->oWizard->GetParameter('admin_pwd'),\n\t\t\t\t'language' => $this->oWizard->GetParameter('admin_language'),\n\t\t\t),\n\t\t\t'language' => $this->oWizard->GetParameter('default_language'),\n\t\t\t'selected_modules' =>  $aSelectedModules,\n\t\t\t'selected_extensions' =>  $aSelectedExtensions,\n\t\t\t'sample_data' => ($this->oWizard->GetParameter('sample_data', '') == 'yes') ? true : false ,\n\t\t\t'old_addon' => $this->oWizard->GetParameter('old_addon', false), // whether or not to use the \"old\" userrights profile addon\n\t\t\t'options' => json_decode($this->oWizard->GetParameter('misc_options', '[]'), true),\n\t\t\t'mysql_bindir' => $this->oWizard->GetParameter('mysql_bindir'),\n\t\t);\n\n\t\tif ($sBackupDestination != '')\n\t\t{\n\t\t\t$aInstallParams['preinstall']['backup'] = array (\n\t\t\t\t'destination' => $sBackupDestination,\n\t\t\t\t'configuration_file' => $sPreviousConfigurationFile,\n\t\t\t);\n\t\t}\n\n\t\treturn $aInstallParams;\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\t$oParameters = new PHPParameters();\n\t\t$sStep = $aParameters['installer_step'];\n\t\t$sJSONParameters = $aParameters['installer_config'];\n\t\t$oParameters->LoadFromHash(json_decode($sJSONParameters, true /* bAssoc */));\n\t\t$oInstaller = new ApplicationInstaller($oParameters);\n\t\t$aRes = $oInstaller->ExecuteStep($sStep);\n\t\tif (($aRes['status'] != ApplicationInstaller::ERROR) && ($aRes['next-step'] != ''))\n\t\t{\n\t\t\t// Tell the web page to move the progress bar and to launch the next step\n\t\t\t$sMessage = addslashes(htmlentities($aRes['next-step-label'], ENT_QUOTES, 'UTF-8'));\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#wiz_form\").data(\"installation_status\", \"running\");\n\tWizardUpdateButtons();\n\t$('#setup_msg').html('$sMessage');\n\t$('#progress').progression( {Current:{$aRes['percentage-completed']}, Maximum: 100, aBackgroundImg: GetAbsoluteUrlAppRoot()+'setup/orange-progress.gif', aTextColor: '#000000'} );\n\t\n\t//$(\"#percentage\").html('{$aRes['percentage-completed']} % completed<br/>{$aRes['next-step-label']}');\n\tExecuteStep('{$aRes['next-step']}');\nEOF\n\t\t\t);\n\t\t}\n\t\telse if ($aRes['status'] != ApplicationInstaller::ERROR)\n\t\t{\n\t\t\t// Installation complete, move to the next step of the wizard\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#wiz_form\").data(\"installation_status\", \"completed\");\n\t$('#progress').progression( {Current:100, Maximum: 100, aBackgroundImg: GetAbsoluteUrlAppRoot()+'setup/orange-progress.gif', aTextColor: '#000000'} );\n\tWizardUpdateButtons();\n\t$(\"#btn_next\").unbind(\"click.install\");\n\t$(\"#btn_next\").click();\nEOF\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sMessage = addslashes(htmlentities($aRes['message'], ENT_QUOTES, 'UTF-8'));\n\t\t\t$sMessage = str_replace(\"\\n\", '<br>', $sMessage);\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#wiz_form\").data(\"installation_status\", \"error\");\n\tWizardUpdateButtons();\n\t$('#setup_msg').html('$sMessage');\nEOF\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn 'return (($(\"#wiz_form\").data(\"installation_status\") === \"not started\") || ($(\"#wiz_form\").data(\"installation_status\") === \"completed\"));';\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveBackward()\n\t{\n\t\treturn 'var sStatus = $(\"#wiz_form\").data(\"installation_status\"); return ((sStatus === \"not started\") || (sStatus === \"error\"));';\n\t}\n\n}\n\n/**\n * Summary of the installation tasks\n */\nclass WizStepDone extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Done';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array();\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => '', 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t// Check if there are some manual steps required:\n\t\t$aManualSteps = array();\n\t\t$aAvailableModules = SetupUtils::AnalyzeInstallation($this->oWizard);\n\n\t\t$sRootUrl = utils::GetAbsoluteUrlAppRoot();\n\t\t$aSelectedModules = json_decode($this->oWizard->GetParameter('selected_modules'), true);\n\t\tforeach($aSelectedModules as $sModuleId)\n\t\t{\n\t\t\tif (!empty($aAvailableModules[$sModuleId]['doc.manual_setup']))\n\t\t\t{\n\t\t\t\t$aManualSteps[$aAvailableModules[$sModuleId]['label']] = $sRootUrl.$aAvailableModules[$sModuleId]['doc.manual_setup'];\n\t\t\t}\n\t\t}\n\t\tif (count($aManualSteps) > 0)\n\t\t{\n\t\t\t$oPage->add(\"<h2>Manual operations required</h2>\");\n\t\t\t$oPage->p(\"In order to complete the installation, the following manual operations are required:\");\n\t\t\tforeach($aManualSteps as $sModuleLabel => $sUrl)\n\t\t\t{\n\t\t\t\t$oPage->p(\"<a href=\\\"$sUrl\\\" target=\\\"_blank\\\">Manual instructions for $sModuleLabel</a>\");\n\t\t\t}\n\t\t\t$oPage->add(\"<h2>Congratulations for installing \".ITOP_APPLICATION.\"</h2>\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oPage->add(\"<h2>Congratulations for installing \".ITOP_APPLICATION.\"</h2>\");\n\t\t\t$oPage->ok(\"The installation completed successfully.\");\n\t\t}\n\n\t\tif (($this->oWizard->GetParameter('mode', '') == 'upgrade') && $this->oWizard->GetParameter('db_backup', false) && $this->oWizard->GetParameter('authent', false))\n\t\t{\n\t\t\t$sBackupDestination = $this->oWizard->GetParameter('db_backup_path', '');\n\t\t\tif (file_exists($sBackupDestination.'.tar.gz'))\n\t\t\t{\n\t\t\t\t// To mitigate security risks: pass only the filename without the extension, the download will add the extension itself\n\t\t\t\t$oPage->p('Your backup is ready');\n\t\t\t\t$oPage->p('<a style=\"background:transparent;\" href=\"'.utils::GetAbsoluteUrlAppRoot().'setup/ajax.dataloader.php?operation=async_action&step_class=WizStepDone&params[backup]='.urlencode($sBackupDestination).'&authent='.$this->oWizard->GetParameter('authent','').'\" target=\"_blank\"><img src=\"../images/tar.png\" style=\"border:0;vertical-align:middle;\">&nbsp;Download '.basename($sBackupDestination).'</a>');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oPage->p('<img src=\"../images/error.png\"/>&nbsp;Warning: Backup creation failed !');\n\t\t\t}\n\t\t}\n\n\t\t// Form goes here.. No back button since the job is done !\n\t\t$oPage->add('<table id=\"placeholder\" style=\"width:600px;border:0;padding:0;\"><tr>');\n\t\t$oPage->add(\"<td><a style=\\\"background:transparent;padding:0;\\\" title=\\\"Free: Register your iTop version.\\\" href=\\\"http://www.combodo.com/register?product=iTop&version=\".urlencode(ITOP_VERSION.\" revision \".ITOP_REVISION).\"\\\" target=\\\"_blank\\\"><img style=\\\"border:0\\\" src=\\\"../images/setup-register.gif\\\"/></td></a>\");\n\t\t$oPage->add(\"<td><a style=\\\"background:transparent;padding:0;\\\" title=\\\"Get Professional Support from Combodo\\\" href=\\\"http://www.combodo.com/itopsupport\\\" target=\\\"_blank\\\"><img style=\\\"border:0\\\" src=\\\"../images/setup-support.gif\\\"/></td></a>\");\n\t\t$oPage->add(\"<td><a style=\\\"background:transparent;padding:0;\\\" title=\\\"Get Professional Training from Combodo\\\" href=\\\"http://www.combodo.com/itoptraining\\\" target=\\\"_blank\\\"><img style=\\\"border:0\\\" src=\\\"../images/setup-training.gif\\\"/></td></a>\");\n\t\t$oPage->add('</tr></table>');\n\n\t\t$oConfig = new Config(utils::GetConfigFilePath());\n\t\t// Load the data model only, in order to load env-production/core/main.php to get the XML parameters (needed by GetModuleSettings below)\n\t\t// But main.php may also contain classes (defined without any module), and thus requiring the full data model\n\t\t// to be loaded to prevent \"class not found\" errors...\n\t\t$oProductionEnv = new RunTimeEnvironment('production');\n\t\t$oProductionEnv->InitDataModel($oConfig, true);\n\t\t$sIframeUrl = $oConfig->GetModuleSetting('itop-hub-connector', 'setup_url', '');\n\n\t\tif ($sIframeUrl != '')\n\t\t{\n\t\t\t$oPage->add('<iframe id=\"fresh_content\" style=\"border:0; width:100%; display:none;\" src=\"'.$sIframeUrl.'\"></iframe>');\n\n\t\t\t$oPage->add_script(\"window.addEventListener('message', function(event) {\n\t\t\t\tif (event.data === 'itophub_load_completed')\n\t\t\t\t{\n\t\t\t\t\t$('#fresh_content').height($('#placeholder').height());\n\t\t\t\t\t$('#placeholder').hide();\n\t\t\t\t\t$('#fresh_content').show();\n\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\");\n\t\t}\n\n\t\t$sForm = '<form method=\"post\" action=\"'.$this->oWizard->GetParameter('application_url').'pages/UI.php\">';\n\t\t$sForm .= '<input type=\"hidden\" name=\"auth_user\" value=\"'.htmlentities($this->oWizard->GetParameter('admin_user'), ENT_QUOTES, 'UTF-8').'\">';\n\t\t$sForm .= '<input type=\"hidden\" name=\"auth_pwd\" value=\"'.htmlentities($this->oWizard->GetParameter('admin_pwd'), ENT_QUOTES, 'UTF-8').'\">';\n\t\t$sForm .= \"<p style=\\\"text-align:center;width:100%\\\"><button id=\\\"enter_itop\\\" type=\\\"submit\\\">Enter \".ITOP_APPLICATION.\"</button></p>\";\n\t\t$sForm .= '</form>';\n\t\t$sPHPVersion = phpversion();\n\t\t$sMySQLVersion = SetupUtils::GetMySQLVersion(\n\t\t\t$this->oWizard->GetParameter('db_server'),\n\t\t\t$this->oWizard->GetParameter('db_user'),\n\t\t\t$this->oWizard->GetParameter('db_pwd'),\n\t\t\t$this->oWizard->GetParameter('db_tls_enabled'),\n\t\t\t$this->oWizard->GetParameter('db_tls_ca')\n\t\t);\n\t\t$aParameters = json_decode($this->oWizard->GetParameter('selected_components', '{}'), true);\n\t\t$sCompactWizChoices = array();\n\t\tforeach($aParameters as $iStep => $aChoices)\n\t\t{\n\t\t\t$aShortChoices = array();\n\t\t\tforeach($aChoices as $sChoiceCode)\n\t\t\t{\n\t\t\t\t$sShortCode = str_replace('_', '', $sChoiceCode);\n\t\t\t\t$aShortChoices[] = $sShortCode;\n\t\t\t}\n\t\t\t$sCompactWizChoices[] = implode(' ',$aShortChoices);\n\t\t}\n\t\t$sInstallMode = 'i';\n\t\tif ($this->oWizard->GetParameter('install_mode', 'install') == 'upgrade')\n\t\t{\n\t\t\tif (!$this->oWizard->GetParameter('license'))\n\t\t\t{\n\t\t\t\t// When the version does not change we don't ask for the licence again\n\t\t\t\t$sInstallMode = 'r';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// An actual upgrade\n\t\t\t\t$sInstallMode = 'u';\n\t\t\t}\n\n\t\t}\n\t\t$aUrlParams = array(\n\t\t\t'p' => ITOP_APPLICATION,\n\t\t\t'v' => ITOP_VERSION,\n\t\t\t'php' => $sPHPVersion,\n\t\t\t'mysql' => $sMySQLVersion,\n\t\t\t'os' => PHP_OS,\n\t\t\t's' => ($this->oWizard->GetParameter('sample_data', '') == 'yes') ? 1 : 0 ,\n\t\t\t'l' => $this->oWizard->GetParameter('default_language'),\n\t\t\t'i' => $sInstallMode,\n\t\t\t'w' => json_encode($sCompactWizChoices),\n\t\t);\n\t\t$aSafeParams = array();\n\t\tforeach($aUrlParams as $sCode => $sValue)\n\t\t{\n\t\t\t$aSafeParams[] = $sCode.'='.urlencode($sValue);\n\t\t}\n\t\t$sImgUrl = 'http://www.combodo.com/stats/?'.implode('&', $aSafeParams);\n\n\t\t$aAdditionalModules = array();\n\t\tforeach(json_decode($this->oWizard->GetParameter('additional_extensions_modules'), true) as $idx => $aModuleInfo)\n\t\t{\n\t\t\tif (in_array('_'.$idx, $aParameters[count($aParameters)-1]))\n\t\t\t{\n\t\t\t\t// Extensions \"choices\" can now have more than one module\n\t\t\t\tforeach($aModuleInfo['modules'] as $sModuleName)\n\t\t\t\t{\n\t\t\t\t\t$aAdditionalModules[] = $sModuleName;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$idx = 0;\n\t\t$aReportedModules = array();\n\t\twhile($idx < count($aAdditionalModules) && (strlen($sImgUrl.'&m='.urlencode(implode(' ', $aReportedModules))) < 2000)) // reasonable limit for the URL: 2000 chars\n\t\t{\n\t\t\t$aReportedModules[] = $aAdditionalModules[$idx];\n\t\t\t$idx++;\n\t\t}\n\t\t$sImgUrl .= '&m='.urlencode(implode(' ', $aReportedModules));\n\n\t\t$oPage->add('<img style=\"border:0\" src=\"'.$sImgUrl.'\"/>');\n\t\t$sForm = addslashes($sForm);\n\t\t$oPage->add_ready_script(\"$('#wiz_form').after('$sForm');\");\n\t}\n\n\tpublic function CanMoveForward()\n\t{\n\t\treturn false;\n\t}\n\tpublic function CanMoveBackward()\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * Tells whether this step of the wizard requires that the configuration file be writable\n\t * @return bool True if the wizard will possibly need to modify the configuration at some point\n\t */\n\tpublic function RequiresWritableConfig()\n\t{\n\t\treturn false; //This step executes once the config was written and secured\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\t// For security reasons: add the extension now so that this action can be used to read *only* .tar.gz files from the disk...\n\t\t$sBackupFile = $aParameters['backup'].'.tar.gz';\n\t\tif (file_exists($sBackupFile))\n\t\t{\n\t\t\t// Make sure there is NO output at all before our content, otherwise the document will be corrupted\n\t\t\t$sPreviousContent = ob_get_clean();\n\t\t\t$oPage->SetContentType('application/gzip');\n\t\t\t$oPage->SetContentDisposition('attachment', basename($sBackupFile));\n\t\t\t$oPage->add(file_get_contents($sBackupFile));\n\t\t}\n\t}\n}\n"], "fixing_code": ["<?php\n// Copyright (C) 2010-2018 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n\n/**\n * Does load data from XML files (currently used in the setup only)\n *\n * @copyright   Copyright (C) 2010-2018 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\n/**\n * This page is called to perform \"asynchronously\" the setup actions\n * parameters\n * 'operation': one of 'compile_data_model', 'update_db_schema', 'after_db_creation', 'file'\n * \n * if 'operation' == 'update_db_schema': \n * 'mode': install | upgrade\n * \n *  if 'operation' == 'after_db_creation':\n * 'mode': install | upgrade\n * \n * if 'operation' == 'file': \n * 'file': string Name of the file to load\n * 'session_status': string 'start', 'continue' or 'end'\n * 'percent': integer 0..100 the percentage of completion once the file has been loaded \n */ \ndefine('SAFE_MINIMUM_MEMORY', 64*1024*1024);\nrequire_once('../approot.inc.php');\nrequire_once(APPROOT.'/application/utils.inc.php');\nrequire_once(APPROOT.'/setup/setuppage.class.inc.php');\nrequire_once(APPROOT.'/setup/moduleinstaller.class.inc.php');\n\nini_set('max_execution_time', max(3600, ini_get('max_execution_time'))); // Under Windows SQL/backup operations are part of the timeout and require extra time\ndate_default_timezone_set('Europe/Paris'); // Just to avoid a warning if the timezone is not set in php.ini\n\n$sMemoryLimit = trim(ini_get('memory_limit'));\nif (empty($sMemoryLimit))\n{\n\t// On some PHP installations, memory_limit does not exist as a PHP setting!\n\t// (encountered on a 5.2.0 under Windows)\n\t// In that case, ini_set will not work, let's keep track of this and proceed with the data load\n\tSetupPage::log_info(\"No memory limit has been defined in this instance of PHP\");\t\t\n}\nelse\n{\n\t// Check that the limit will allow us to load the data\n\t//\n\t$iMemoryLimit = utils::ConvertToBytes($sMemoryLimit);\n\tif (!utils::IsMemoryLimitOk($iMemoryLimit, SAFE_MINIMUM_MEMORY))\n\t{\n\t\tif (ini_set('memory_limit', SAFE_MINIMUM_MEMORY) === FALSE)\n\t\t{\n\t\t\tSetupPage::log_error(\"memory_limit is too small: $iMemoryLimit and can not be increased by the script itself.\");\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSetupPage::log_info(\"memory_limit increased from $iMemoryLimit to \".SAFE_MINIMUM_MEMORY.\".\");\t\t\n\t\t}\n\t}\n}\n\n\ndefine('PHP_FATAL_ERROR_TAG', 'phpfatalerror');\n\n\n/**\n * Handler for register_shutdown_function, to catch PHP errors\n */\nfunction ShutdownCallback()\n{\n\t$error = error_get_last();\n\t$bIsErrorToReport = (($error !== null) && ($error['type'] & (E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR)));\n\tif (!$bIsErrorToReport)\n\t{\n\t\treturn;\n\t}\n\n\t$errno = $error[\"type\"];\n\t$errfile = $error[\"file\"];\n\t$errline = $error[\"line\"];\n\t$errstr = $error[\"message\"];\n\t$sLogMessage = \"PHP error occured : msg=$errstr, no=$errno, file=$errfile, line=$errline\";\n\tSetupPage::log_error(\"Setup error: $sLogMessage\");\n\techo '<'.PHP_FATAL_ERROR_TAG.'>'.$sLogMessage.'</'.PHP_FATAL_ERROR_TAG.'>';\n}\n\n\nfunction FatalErrorCatcher($sOutput)\n{\n\tif (preg_match('|<'.PHP_FATAL_ERROR_TAG.'>.*</'.PHP_FATAL_ERROR_TAG.'>|s', $sOutput, $aMatches))\n\t{\n\t\theader(\"HTTP/1.0 500 Internal server error.\");\n\t\t$errors = '';\n\t\tforeach ($aMatches as $sMatch)\n\t\t{\n\t\t\t$errors .= strip_tags($sMatch).\"\\n\";\n\t\t}\n\t\t$sOutput = \"$errors\\n\";\n\t\t// Logging to a file does not work if the whole memory is exhausted...\t\t\n\t\t//SetupPage::log_error(\"Fatal error - in $__FILE__ , $errors\");\n\t}\n\treturn $sOutput;\n}\n\n//Define some bogus, invalid HTML tags that no sane\n//person would ever put in an actual document and tell\n//PHP to delimit fatal error warnings with them.\nini_set('error_prepend_string', '<'.PHP_FATAL_ERROR_TAG.'>');\nini_set('error_append_string', '</'.PHP_FATAL_ERROR_TAG.'>');\n\n// callback on errors to log\nregister_shutdown_function('ShutdownCallback');\n// Starts the capture of the ouput, and sets a filter to capture the fatal errors.\nob_start('FatalErrorCatcher'); // Start capturing the output, and pass it through the fatal error catcher\n\nrequire_once(APPROOT.'/core/config.class.inc.php');\nrequire_once(APPROOT.'/core/log.class.inc.php');\nrequire_once(APPROOT.'/core/kpi.class.inc.php');\nrequire_once(APPROOT.'/core/cmdbsource.class.inc.php');\nrequire_once('./xmldataloader.class.inc.php');\nrequire_once(APPROOT.'/application/ajaxwebpage.class.inc.php');\n\n\n// Never cache this page\nheader(\"Cache-Control: no-cache, must-revalidate\");  // HTTP/1.1\nheader(\"Expires: Fri, 17 Jul 1970 05:00:00 GMT\");    // Date in the past\n\n/**\n * Main program\n */\n$sOperation = Utils::ReadParam('operation', '');\ntry\n{\n\tSetupUtils::CheckSetupToken();\n\n\tswitch($sOperation)\n\t{\n\t\tcase 'async_action':\n\t\tini_set('max_execution_time', max(240, ini_get('max_execution_time')));\n\t\t// While running the setup it is desirable to see any error that may happen\n\t\tini_set('display_errors', true);\n\t\tini_set('display_startup_errors', true);\n\t\t\n\t\trequire_once(APPROOT.'/setup/wizardcontroller.class.inc.php');\n\t\trequire_once(APPROOT.'/setup/wizardsteps.class.inc.php');\n\t\t\n\t\t$sClass = utils::ReadParam('step_class', '');\n\t\t$sState = utils::ReadParam('step_state', '');\n\t\t$sActionCode = utils::ReadParam('code', '');\n\t\t$aParams = utils::ReadParam('params', array(), false, 'raw_data');\n\t\t$oPage = new ajax_page('');\n\t\t$oDummyController = new WizardController('');\n\t\tif (is_subclass_of($sClass, 'WizardStep'))\n\t\t{\n\t\t\t/** @var WizardStep $oStep */\n\t\t\t$oStep = new $sClass($oDummyController, $sState);\n\t\t\t$sConfigFile = utils::GetConfigFilePath();\n\t\t\tif (file_exists($sConfigFile) && !is_writable($sConfigFile) && $oStep->RequiresWritableConfig())\n\t\t\t{\n\t\t\t\t$sRelativePath = utils::GetConfigFilePathRelative();\n\t\t\t\t$oPage->error(\"<b>Error:</b> the configuration file '\".$sRelativePath.\"' already exists and cannot be overwritten.\");\n\t\t\t\t$oPage->p(\"The wizard cannot modify the configuration file for you. If you want to upgrade \".ITOP_APPLICATION.\", make sure that the file '<b>\".$sRelativePath.\"</b>' can be modified by the web server.\");\n\t\t\t\t$oPage->output();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oStep->AsyncAction($oPage, $sActionCode, $aParams);\n\t\t\t}\n\t\t}\n\t\t$oPage->output();\n\t\tbreak;\n\n\t\tdefault:\n\t\tthrow(new Exception(\"Error unsupported operation '$sOperation'\"));\n\t}\n}\ncatch(Exception $e)\n{\n\theader(\"HTTP/1.0 500 Internal server error.\");\n\techo \"<p>An error happened while processing the installation:</p>\\n\";\n\tSetupPage::log_error(\"An error happened while processing the installation: \".$e);\n}\n\nif (function_exists('memory_get_peak_usage'))\n{\n\tif ($sOperation == 'file')\n\t{\n\t\tSetupPage::log_info(\"loading file peak memory usage. \".memory_get_peak_usage());\n\t}\n\telse\n\t{\n\t\tSetupPage::log_info(\"operation '$sOperation', peak memory usage. \".memory_get_peak_usage());\n\t}\n}", "<?php\n// Copyright (C) 2010-2012 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n/**\n * Wizard to configure and initialize the iTop application\n *\n * @copyright   Copyright (C) 2010-2012 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nrequire_once('../approot.inc.php');\nrequire_once(APPROOT.'/application/utils.inc.php');\nrequire_once(APPROOT.'/core/config.class.inc.php');\nrequire_once(APPROOT.'/setup/setuppage.class.inc.php');\nrequire_once(APPROOT.'/setup/wizardcontroller.class.inc.php');\nrequire_once(APPROOT.'/setup/wizardsteps.class.inc.php');\n\nsession_start();\nclearstatcache(); // Make sure we know what we are doing !\n// Set a long (at least 4 minutes) execution time for the setup to avoid timeouts during this phase\nini_set('max_execution_time', max(240, ini_get('max_execution_time')));\n// While running the setup it is desirable to see any error that may happen\nini_set('display_errors', true);\nini_set('display_startup_errors', true);\ndate_default_timezone_set('Europe/Paris'); // Just to avoid a warning if the timezone is not set in php.ini\n\n/////////////////////////////////////////////////////////////////////\n// Fake functions to protect the first run of the installer\n// in case the PHP JSON module is not installed...\nif (!function_exists('json_encode')) {\n\tfunction json_encode($value, $options = null)\n\t{\n\t\treturn '[]';\n\t}\n}\nif (!function_exists('json_decode')) {\n\tfunction json_decode($json, $assoc = null)\n\t{\n\t\treturn array();\n\t}\n}\n/////////////////////////////////////////////////////////////////////\n\n$oWizard = new WizardController('WizStepWelcome');\n//N\u00b03952\nif (SetupUtils::IsSessionSetupTokenValid()) {\n\t// Normal operation\n\t$oWizard->Run();\n} else {\n\t// Force initializing the setup\n\t$oWizard->Start();\n\tSetupUtils::CreateSetupToken();\n}\n", "<?php\n// Copyright (C) 2010-2018 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n/**\n * The standardized result of any pass/fail check performed by the setup\n *\n * @copyright   Copyright (C) 2010-2018 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\nclass CheckResult\n{\n\t// Severity levels\n\tconst ERROR = 0;\n\tconst WARNING = 1;\n\tconst INFO = 2;\n\n\tpublic $iSeverity;\n\tpublic $sLabel;\n\tpublic $sDescription;\n\n\tpublic function __construct($iSeverity, $sLabel, $sDescription = '')\n\t{\n\t\t$this->iSeverity = $iSeverity;\n\t\t$this->sLabel = $sLabel;\n\t\t$this->sDescription = $sDescription;\n\t}\n}\n\n/**\n * All of the functions/utilities needed by both the setup wizard and the installation process\n *\n * @copyright   Copyright (C) 2010-2012 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\nclass SetupUtils\n{\n\t// -- Minimum versions (requirements : forbids installation if not met)\n\tconst PHP_MIN_VERSION = '5.6.0'; // 5.6 will be supported until the end of 2018 (see http://php.net/supported-versions.php)\n\tconst MYSQL_MIN_VERSION = '5.6.0'; // 5.6 to have fulltext on InnoDB for Tags fields (N\u00b0931)\n\tconst MYSQL_NOT_VALIDATED_VERSION = '8.0.0'; //Mysql 8 not validated as of iTop 2.6\n\n\t// -- versions that will be the minimum in next iTop major release (warning if not met)\n\tconst PHP_NEXT_MIN_VERSION = ''; // no new PHP requirement for next iTop version\n\tconst MYSQL_NEXT_MIN_VERSION = ''; // no new MySQL requirement for next iTop version\n\t// -- First recent version that is not yet validated by Combodo (warning)\n\tconst PHP_NOT_VALIDATED_VERSION = '7.4.0';\n\n\tconst MIN_MEMORY_LIMIT = 33554432; // 32 * 1024 * 1024 - we can use expressions in const since PHP 5.6 but we are in the setup !\n\tconst SUHOSIN_GET_MAX_VALUE_LENGTH = 2048;\n\n\t/**\n\t * Check configuration parameters, for example :\n\t * <ul>\n\t * <li>PHP version\n\t * <li>needed PHP extensions\n\t * <li>memory_limit\n\t * <li>max_upload_file_size\n\t * <li>...\n\t * </ul>\n\t *\n\t * @internal SetupPage $oP The page used only for its 'log' method\n\t * @return CheckResult[]\n\t */\n\tstatic function CheckPhpAndExtensions()\n\t{\n\t\t$aResult = array();\n\n\t\t// For log file(s)\n\t\tif (!is_dir(APPROOT.'log'))\n\t\t{\n\t\t\t@mkdir(APPROOT.'log');\n\t\t}\n\n\t\tself::CheckPhpVersion($aResult);\n\n\t\t// Check the common directories\n\t\t$aWritableDirsErrors = self::CheckWritableDirs(array('log', 'env-production', 'env-production-build', 'conf', 'data'));\n\t\t$aResult = array_merge($aResult, $aWritableDirsErrors);\n\n\t\t$aMandatoryExtensions = array(\n\t\t\t'mysqli',\n\t\t\t'iconv',\n\t\t\t'simplexml',\n\t\t\t'soap',\n\t\t\t'hash',\n\t\t\t'json',\n\t\t\t'session',\n\t\t\t'pcre',\n\t\t\t'dom',\n\t\t\t'zlib',\n\t\t\t'zip',\n\t\t);\n\t\t$aOptionalExtensions = array(\n\t\t\t'mcrypt, sodium or openssl' =>\n\t\t\t\tarray(\n\t\t\t\t\t'mcrypt' => 'Strong encryption will not be used.',\n\t\t\t\t\t'sodium' => 'Strong encryption will not be used.',\n\t\t\t\t\t'openssl' => 'Strong encryption will not be used.',\n\t\t\t\t),\n\t\t\t'ldap' => 'LDAP authentication will be disabled.',\n\t\t\t'gd' => 'test image type (always returns false if not installed), image resizing, PDF export',\n\t\t);\n\n\t\tasort($aMandatoryExtensions); // Sort the list to look clean !\n\t\tksort($aOptionalExtensions); // Sort the list to look clean !\n\t\t$aExtensionsOk = array();\n\t\t$aMissingExtensions = array();\n\t\t$aMissingExtensionsLinks = array();\n\t\t// First check the mandatory extensions\n\t\tforeach($aMandatoryExtensions as $sExtension)\n\t\t{\n\t\t\tif (extension_loaded($sExtension))\n\t\t\t{\n\t\t\t\t$aExtensionsOk[] = $sExtension;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aMissingExtensions[] = $sExtension;\n\t\t\t\t$aMissingExtensionsLinks[] = \"<a href=\\\"http://www.php.net/manual/en/book.$sExtension.php\\\" target=\\\"_blank\\\">$sExtension</a>\";\n\t\t\t}\n\t\t}\n\t\tif (count($aExtensionsOk) > 0)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"Required PHP extension(s): \".implode(', ', $aExtensionsOk).\".\");\n\t\t}\n\t\tif (count($aMissingExtensions) > 0)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Missing PHP extension(s): \".implode(', ', $aMissingExtensionsLinks).\".\");\n\t\t}\n\t\t// Next check the optional extensions\n\t\t$aExtensionsOk = array();\n\t\t$aMissingExtensions = array();\n\t\tforeach($aOptionalExtensions as $sExtension => $sMessage)\n\t\t{\n\t\t\t//if sMessage is an array, extensions in it are conditional between them\n\t\t\tif (is_array($sMessage))\n\t\t\t{\n\t\t\t\t$bIsAtLeastOneLoaded = false;\n\t\t\t\t$sConditionalMissingMessage = '';\n\t\t\t\tforeach($sMessage as $sConditionalExtension => $sConditionalMessage)\n\t\t\t\t{\n\t\t\t\t\tif (extension_loaded($sConditionalExtension))\n\t\t\t\t\t{\n\t\t\t\t\t\t$bIsAtLeastOneLoaded = true;\n\t\t\t\t\t\t$aExtensionsOk[] = $sConditionalExtension;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$sConditionalMissingMessage = $sConditionalMessage;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!$bIsAtLeastOneLoaded)\n\t\t\t\t{\n\t\t\t\t\t$aMissingExtensions[$sExtension] = $sConditionalMissingMessage;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (extension_loaded($sExtension))\n\t\t\t\t{\n\t\t\t\t\t$aExtensionsOk[] = $sExtension;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aMissingExtensions[$sExtension] = $sMessage;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (count($aExtensionsOk) > 0)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"Optional PHP extension(s): \".implode(', ', $aExtensionsOk).\".\");\n\t\t}\n\t\tif (count($aMissingExtensions) > 0)\n\t\t{\n\t\t\tforeach($aMissingExtensions as $sExtension => $sMessage)\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING, \"Missing optional PHP extension: $sExtension. \".$sMessage);\n\t\t\t}\n\t\t}\n\t\t// Check some ini settings here\n\t\tif (function_exists('php_ini_loaded_file')) // PHP >= 5.2.4\n\t\t{\n\t\t\t$sPhpIniFile = php_ini_loaded_file();\n\t\t\t// Other included/scanned files\n\t\t\tif ($sFileList = php_ini_scanned_files())\n\t\t\t{\n\t\t\t\tif (strlen($sFileList) > 0)\n\t\t\t\t{\n\t\t\t\t\t$aFiles = explode(',', $sFileList);\n\n\t\t\t\t\tforeach ($aFiles as $sFile)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sPhpIniFile .= ', '.trim($sFile);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSetupPage::log(\"Info - php.ini file(s): '$sPhpIniFile'\");\n\t\t}\n\n\t\tif (!ini_get('file_uploads'))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Files upload is not allowed on this server (file_uploads = \".ini_get('file_uploads').\").\");\n\t\t}\n\n\t\t$sUploadTmpDir = self::GetUploadTmpDir();\n\t\tif (empty($sUploadTmpDir))\n\t\t{\n\t\t\t$sUploadTmpDir = '/tmp';\n\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING, \"Temporary directory for files upload is not defined (upload_tmp_dir), assuming that $sUploadTmpDir is used.\");\n\t\t}\n\t\t// check that the upload directory is indeed writable from PHP\n\t\tif (!empty($sUploadTmpDir))\n\t\t{\n\t\t\tif (!file_exists($sUploadTmpDir))\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Temporary directory for files upload ($sUploadTmpDir) does not exist or cannot be read by PHP.\");\n\t\t\t}\n\t\t\telse if (!is_writable($sUploadTmpDir))\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Temporary directory for files upload ($sUploadTmpDir) is not writable.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetupPage::log(\"Info - Temporary directory for files upload ($sUploadTmpDir) is writable.\");\n\t\t\t}\n\t\t}\n\n\n\t\tif (!ini_get('upload_max_filesize'))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"File upload is not allowed on this server (upload_max_filesize = \".ini_get('upload_max_filesize').\").\");\n\t\t}\n\n\t\t$iMaxFileUploads = ini_get('max_file_uploads');\n\t\tif (!empty($iMaxFileUploads) && ($iMaxFileUploads < 1))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"File upload is not allowed on this server (max_file_uploads = \".ini_get('max_file_uploads').\").\");\n\t\t}\n\n\t\t$iMaxUploadSize = utils::ConvertToBytes(ini_get('upload_max_filesize'));\n\t\t$iMaxPostSize = utils::ConvertToBytes(ini_get('post_max_size'));\n\n\t\tif ($iMaxPostSize <= $iMaxUploadSize)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING, \"post_max_size (\".ini_get('post_max_size').\") in php.ini should be strictly greater than upload_max_filesize (\".ini_get('upload_max_filesize').\") otherwise you cannot upload files of the maximum size.\");\n\t\t}\n\n\n\t\tSetupPage::log(\"Info - upload_max_filesize: \".ini_get('upload_max_filesize'));\n\t\tSetupPage::log(\"Info - post_max_size: \".ini_get('post_max_size'));\n\t\tSetupPage::log(\"Info - max_file_uploads: \".ini_get('max_file_uploads'));\n\n\t\t// Check some more ini settings here, needed for file upload\n\t\tif (function_exists('get_magic_quotes_gpc'))\n\t\t{\n\t\t\tif (@get_magic_quotes_gpc())\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"'magic_quotes_gpc' is set to On. Please turn it Off in php.ini before continuing.\");\n\t\t\t}\n\t\t}\n\t\tif (function_exists('get_magic_quotes_runtime'))\n\t\t{\n\t\t\tif (@get_magic_quotes_runtime())\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"'magic_quotes_runtime' is set to On. Please turn it Off in php.ini before continuing.\");\n\t\t\t}\n\t\t}\n\n\t\t$sMemoryLimit = trim(ini_get('memory_limit'));\n\t\tif (empty($sMemoryLimit))\n\t\t{\n\t\t\t// On some PHP installations, memory_limit does not exist as a PHP setting!\n\t\t\t// (encountered on a 5.2.0 under Windows)\n\t\t\t// In that case, ini_set will not work, let's keep track of this and proceed anyway\n\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING, \"No memory limit has been defined in this instance of PHP\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Check that the limit will allow us to load the data\n\t\t\t//\n\t\t\t$iMemoryLimit = utils::ConvertToBytes($sMemoryLimit);\n\t\t\tif (!utils::IsMemoryLimitOk($iMemoryLimit, self::MIN_MEMORY_LIMIT))\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"memory_limit ($iMemoryLimit) is too small, the minimum value to run the application is \".self::MIN_MEMORY_LIMIT.\".\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetupPage::log(\"Info - memory_limit is $iMemoryLimit, ok.\");\n\t\t\t}\n\t\t}\n\n\t\t// Special case for APC\n\t\tif (extension_loaded('apc'))\n\t\t{\n\t\t\t$sAPCVersion = phpversion('apc');\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"APC detected (version $sAPCVersion). The APC cache will be used to speed-up \".ITOP_APPLICATION.\".\");\n\t\t}\n\n\t\t// Special case Suhosin extension\n\t\tif (extension_loaded('suhosin'))\n\t\t{\n\t\t\t$sSuhosinVersion = phpversion('suhosin');\n\t\t\t$aOk[] = \"Suhosin extension detected (version $sSuhosinVersion).\";\n\n\t\t\t$iGetMaxValueLength = ini_get('suhosin.get.max_value_length');\n\t\t\tif ($iGetMaxValueLength < self::SUHOSIN_GET_MAX_VALUE_LENGTH)\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING,  \"suhosin.get.max_value_length ($iGetMaxValueLength) is too small, the minimum value recommended to run the application is \".self::SUHOSIN_GET_MAX_VALUE_LENGTH.\".\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetupPage::log(\"Info - suhosin.get.max_value_length = $iGetMaxValueLength, ok.\");\n\t\t\t}\n\t\t}\n\n\t\tif (function_exists('php_ini_loaded_file')) // PHP >= 5.2.4\n\t\t{\n\t\t\t$sPhpIniFile = php_ini_loaded_file();\n\t\t\t// Other included/scanned files\n\t\t\tif ($sFileList = php_ini_scanned_files())\n\t\t\t{\n\t\t\t\tif (strlen($sFileList) > 0)\n\t\t\t\t{\n\t\t\t\t\t$aFiles = explode(',', $sFileList);\n\n\t\t\t\t\tforeach ($aFiles as $sFile)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sPhpIniFile .= ', '.trim($sFile);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO,  \"Loaded php.ini files: $sPhpIniFile\");\n\t\t}\n\n\t\t// Check the configuration of the sessions persistence, since this is critical for the authentication\n\t\tif (ini_get('session.save_handler') == 'files')\n\t\t{\n\t\t\t$sSavePath = ini_get('session.save_path');\n\t\t\tSetupPage::log(\"Info - session.save_path is: '$sSavePath'.\");\n\n\t\t\t// According to the PHP documentation, the format can be /path/where/to_save_sessions or \"N;/path/where/to_save_sessions\" or \"N;MODE;/path/where/to_save_sessions\"\n\t\t\t$sSavePath = ltrim(rtrim($sSavePath, '\"'), '\"'); // remove surrounding quotes (if any)\n\n\t\t\tif (!empty($sSavePath))\n\t\t\t{\n\t\t\t\tif (($iPos = strrpos($sSavePath, ';', 0)) !== false)\n\t\t\t\t{\n\t\t\t\t\t// The actual path is after the last semicolon\n\t\t\t\t\t$sSavePath = substr($sSavePath, $iPos+1);\n\t\t\t\t}\n\t\t\t\tif (!is_writable($sSavePath))\n\t\t\t\t{\n\t\t\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"The value for session.save_path ($sSavePath) is not writable for the web server. Make sure that PHP can actually save session variables. (Refer to the PHP documentation: http://php.net/manual/en/session.configuration.php#ini.session.save-path)\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"The value for session.save_path ($sSavePath) is writable for the web server.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING, \"Empty path for session.save_path. Make sure that PHP can actually save session variables. (Refer to the PHP documentation: http://php.net/manual/en/session.configuration.php#ini.session.save-path)\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"session.save_handler is: '\".ini_get('session.save_handler').\"' (different from 'files').\");\n\t\t}\n\n\t\treturn $aResult;\n\t}\n\n\t/**\n\t * @param CheckResult[] $aResult checks log\n\t */\n\tprivate static function CheckPhpVersion(&$aResult)\n\t{\n\t\tSetupPage::log('Info - CheckPHPVersion');\n\t\t$sPhpVersion = phpversion();\n\n\t\tif (version_compare($sPhpVersion, self::PHP_MIN_VERSION, '>='))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO,\n\t\t\t\t\"The current PHP Version (\".$sPhpVersion.\") is greater than the minimum version required to run \".ITOP_APPLICATION.\", which is (\".self::PHP_MIN_VERSION.\")\");\n\n\n\t\t\t$sPhpNextMinVersion = self::PHP_NEXT_MIN_VERSION; // mandatory before PHP 5.5 (arbitrary expressions), keeping compat because we're in the setup !\n\t\t\tif (!empty($sPhpNextMinVersion))\n\t\t\t{\n\t\t\t\tif (version_compare($sPhpVersion, self::PHP_NEXT_MIN_VERSION, '>='))\n\t\t\t\t{\n\t\t\t\t\t$aResult[] = new CheckResult(CheckResult::INFO,\n\t\t\t\t\t\t\"The current PHP Version (\".$sPhpVersion.\") is greater than the minimum version required to run next \".ITOP_APPLICATION.\" release, which is (\".self::PHP_NEXT_MIN_VERSION.\")\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING,\n\t\t\t\t\t\t\"The current PHP Version (\".$sPhpVersion.\") is lower than the minimum version required to run next \".ITOP_APPLICATION.\" release, which is (\".self::PHP_NEXT_MIN_VERSION.\")\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (version_compare($sPhpVersion, self::PHP_NOT_VALIDATED_VERSION, '>='))\n\t\t\t{\n\t\t\t\t$aResult[] = new CheckResult(CheckResult::WARNING,\n\t\t\t\t\t\"The current PHP Version (\".$sPhpVersion.\") is not yet validated by Combodo. You may experience some incompatibility issues.\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR,\n\t\t\t\t\"Error: The current PHP Version (\".$sPhpVersion.\") is lower than the minimum version required to run \".ITOP_APPLICATION.\", which is (\".self::PHP_MIN_VERSION.\")\");\n\t\t}\n\t}\n\n\t/**\n\t * Check that the selected modules meet their dependencies\n\t * @param $sSourceDir\n\t * @param $sExtensionDir\n\t * @param $aSelectedModules\n\t * @return array\n\t */\n\tstatic function CheckSelectedModules($sSourceDir, $sExtensionDir, $aSelectedModules)\n\t{\n\t\t$aResult = array();\n\t\tSetupPage::log('Info - CheckSelectedModules');\n\n\t\t$aDirsToScan = array(APPROOT.$sSourceDir);\n\t\t$sExtensionsPath = APPROOT.$sExtensionDir;\n\t\tif (is_dir($sExtensionsPath))\n\t\t{\n\t\t\t// if the extensions dir exists, scan it for additional modules as well\n\t\t\t$aDirsToScan[] = $sExtensionsPath;\n\t\t}\n\t\trequire_once(APPROOT.'setup/modulediscovery.class.inc.php');\n\t\ttry\n\t\t{\n\t\t\tModuleDiscovery::GetAvailableModules($aDirsToScan, true, $aSelectedModules);\n\t\t}\n\t\tcatch(Exception $e)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, $e->getMessage());\n\t\t}\n\t\treturn $aResult;\n\t}\n\n\t/**\n\t * Check that the backup could be executed\n\t * @param $sDestDir\n\t * @return array An array of CheckResults objects\n\t * @internal param Page $oP The page used only for its 'log' method\n\t */\n\tstatic function CheckBackupPrerequisites($sDestDir, $sMySQLBinDir = null)\n\t{\n\t\t$aResult = array();\n\t\tSetupPage::log('Info - CheckBackupPrerequisites');\n\n\t\t// zip extension\n\t\t//\n\t\tif (!extension_loaded('phar'))\n\t\t{\n\t\t\t$sMissingExtensionLink = \"<a href=\\\"http://www.php.net/manual/en/book.phar.php\\\" target=\\\"_blank\\\">zip</a>\";\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Missing PHP extension: phar\", $sMissingExtensionLink);\n\t\t}\n\t\tif (!extension_loaded('zlib'))\n\t\t{\n\t\t\t$sMissingExtensionLink = \"<a href=\\\"http://www.php.net/manual/en/book.zlib.php\\\" target=\\\"_blank\\\">zip</a>\";\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"Missing PHP extension: zlib\", $sMissingExtensionLink);\n\t\t}\n\n\t\t// availability of exec()\n\t\t//\n\t\t$aDisabled = explode(', ', ini_get('disable_functions'));\n\t\tSetupPage::log('Info - PHP functions disabled: '.implode(', ', $aDisabled));\n\t\tif (in_array('exec', $aDisabled))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"The PHP exec() function has been disabled on this server\");\n\t\t}\n\n\t\t// availability of mysqldump\n\t\tif (empty($sMySQLBinDir) && null != MetaModel::GetConfig())\n\t\t{\n\t\t\t$sMySQLBinDir = MetaModel::GetConfig()->GetModuleSetting('itop-backup', 'mysql_bindir', '');\n\t\t}\n\n\t\tif (empty($sMySQLBinDir))\n\t\t{\n\t\t\t$sMySQLDump = 'mysqldump';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSetupPage::log('Info - Found mysql_bindir: '.$sMySQLBinDir);\n\t\t\t$sMySQLDump = '\"'.$sMySQLBinDir.'/mysqldump\"';\n\t\t}\n\t\t$sCommand = \"$sMySQLDump -V 2>&1\";\n\n\t\t$aOutput = array();\n\t\t$iRetCode = 0;\n\t\texec($sCommand, $aOutput, $iRetCode);\n\t\tif ($iRetCode == 0)\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::INFO, \"mysqldump is present: Ok.\");\n\t\t}\n\t\telseif ($iRetCode == 1)\n\t\t{\n\t\t\t// Unfortunately $aOutput is not really usable since we don't know its encoding (character set)\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"mysqldump could not be found. Please make sure it is installed and in the path.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Unfortunately $aOutput is not really usable since we don't know its encoding (character set)\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"mysqldump could not be executed (retcode=$iRetCode): Please make sure it is installed and \" . (empty($sMySQLBinDir) ? \"in the path\" :  \"located at : $sMySQLDump\"));\n\t\t}\n\t\tforeach($aOutput as $sLine)\n\t\t{\n\t\t\tSetupPage::log('Info - mysqldump -V said: '.$sLine);\n\t\t}\n\n\t\t// check disk space\n\t\t// to do... evaluate how we can correlate the DB size with the size of the dump (and the zip!)\n\t\t// E.g. 2,28 Mb after a full install, giving a zip of 26 Kb (data = 26 Kb)\n\t\t// Example of query (DB without a suffix)\n\t\t//$sDBSize = \"SELECT SUM(ROUND(DATA_LENGTH/1024/1024, 2)) AS size_mb FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = `$sDBName`\";\n\n\t\treturn $aResult;\n\t}\n\n\t/**\n\t * Check that graphviz can be launched\n\t * @param $sGraphvizPath\n\t * @return CheckResult The result of the check\n\t * @internal param string $GraphvizPath The path where graphviz' dot program is installed\n\t */\n\tstatic function CheckGraphviz($sGraphvizPath)\n\t{\n\t\t$oResult = null;\n\t\tSetupPage::log('Info - CheckGraphviz');\n\n\t\t// availability of exec()\n\t\t//\n\t\t$aDisabled = explode(', ', ini_get('disable_functions'));\n\t\tSetupPage::log('Info - PHP functions disabled: '.implode(', ', $aDisabled));\n\t\tif (in_array('exec', $aDisabled))\n\t\t{\n\t\t\t$aResult[] = new CheckResult(CheckResult::ERROR, \"The PHP exec() function has been disabled on this server\");\n\t\t}\n\n\t\t// availability of dot / dot.exe\n\t\tif (empty($sGraphvizPath))\n\t\t{\n\t\t\t$sGraphvizPath = 'dot';\n\t\t}\n\t\t$sCommand = \"\\\"$sGraphvizPath\\\" -V 2>&1\";\n\n\t\t$aOutput = array();\n\t\t$iRetCode = 0;\n\t\texec($sCommand, $aOutput, $iRetCode);\n\t\tif ($iRetCode == 0)\n\t\t{\n\t\t\t$oResult = new CheckResult(CheckResult::INFO, \"dot is present: \".$aOutput[0]);\n\t\t}\n\t\telseif ($iRetCode == 1)\n\t\t{\n\t\t\t$oResult = new CheckResult(CheckResult::WARNING, \"dot could not be found: \".implode(' ', $aOutput).\" - Please make sure it is installed and in the path.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oResult = new CheckResult(CheckResult::WARNING, \"dot could not be executed (retcode=$iRetCode): Please make sure it is installed and in the path\");\n\t\t}\n\t\tforeach($aOutput as $sLine)\n\t\t{\n\t\t\tSetupPage::log('Info - '.$sGraphvizPath.' -V said: '.$sLine);\n\t\t}\n\n\t\treturn $oResult;\n\t}\n\n\t/**\n\t * Helper function to retrieve the system's temporary directory\n\t * Emulates sys_get_temp_dir if needed (PHP < 5.2.1)\n\t * @return string Path to the system's temp directory\n\t */\n\tstatic function GetTmpDir()\n\t{\n\t\treturn realpath(sys_get_temp_dir());\n\t}\n\n\t/**\n\t * Helper function to retrieve the directory where files are to be uploaded\n\t * @return string Path to the temp directory used for uploading files\n\t */\n\tstatic function GetUploadTmpDir()\n\t{\n\t\t$sPath = ini_get('upload_tmp_dir');\n\t\tif (empty($sPath))\n\t\t{\n\t\t\t$sPath = self::GetTmpDir();\n\t\t}\n\t\treturn $sPath;\n\t}\n\n\t/**\n\t * Helper to recursively remove a directory\n\t * @param $dir\n\t * @throws Exception\n\t */\n\tpublic static function rrmdir($dir)\n\t{\n\t\tif ((strlen(trim($dir)) == 0) || ($dir == '/') || ($dir == '\\\\'))\n\t\t{\n\t\t\tthrow new Exception(\"Attempting to delete directory: '$dir'\");\n\t\t}\n\t\tself::tidydir($dir);\n\t\tself::rmdir_safe($dir);\n\t}\n\n\t/**\n\t * Helper to recursively cleanup a directory\n\t * @param $dir\n\t * @throws Exception\n\t */\n\tpublic static function tidydir($dir)\n\t{\n\t\tif ((strlen(trim($dir)) == 0) || ($dir == '/') || ($dir == '\\\\'))\n\t\t{\n\t\t\tthrow new Exception(\"Attempting to delete directory: '$dir'\");\n\t\t}\n\n\t\t$aFiles = scandir($dir); // Warning glob('.*') does not seem to return the broken symbolic links, thus leaving a non-empty directory\n\t\tif ($aFiles !== false)\n\t\t{\n\t\t\tforeach($aFiles as $file)\n\t\t\t{\n\t\t\t\tif (($file != '.') && ($file != '..'))\n\t\t\t\t{\n\t\t\t\t\tif(is_dir($dir.'/'.$file))\n\t\t\t\t\t{\n\t\t\t\t\t\tself::tidydir($dir.'/'.$file);\n\t\t\t\t\t\tself::rmdir_safe($dir.'/'.$file);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!unlink($dir.'/'.$file))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSetupPage::log(\"Warning - FAILED to remove file '$dir/$file'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (file_exists($dir.'/'.$file))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSetupPage::log(\"Warning - FAILED to remove file '$dir/.$file'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper to build the full path of a new directory\n\t * @param $dir\n\t */\n\tpublic static function builddir($dir)\n\t{\n\t\t$parent = dirname($dir);\n\t\tif(!is_dir($parent))\n\t\t{\n\t\t\tself::builddir($parent);\n\t\t}\n\t\tif (!is_dir($dir))\n\t\t{\n\t\t\tmkdir($dir);\n\t\t}\n\t}\n\n\tpublic static function rmdir_safe($dir)\n\t{\n\t\t// avoid unnecessary warning\n\t\t// Try 100 times...\n\t\t$i = 100;\n\t\twhile ((@rmdir($dir) === false) && $i > 0)\n\t\t{\n\t\t\t// Magic trick for windows\n\t\t\t// sometimes the folder is empty but rmdir fails\n\t\t\tclosedir(opendir($dir));\n\t\t\t$i--;\n\t\t}\n\t\tif ($i == 0)\n\t\t{\n\t\t\trmdir($dir);\n\t\t}\n\t}\n\n\t/**\n\t * Helper to copy a directory to a target directory, skipping .SVN files (for developer's comfort!)\n\t * Returns true if successful\n\t * @param $sSource\n\t * @param $sDest\n\t * @param bool $bUseSymbolicLinks\n\t * @return bool\n\t * @throws Exception\n\t */\n\tpublic static function copydir($sSource, $sDest, $bUseSymbolicLinks = false)\n\t{\n\t\tif (is_dir($sSource))\n\t\t{\n\t\t\tif (!is_dir($sDest))\n\t\t\t{\n\t\t\t\tmkdir($sDest);\n\t\t\t}\n\t\t\t$aFiles = scandir($sSource);\n\t\t\tif(sizeof($aFiles) > 0 )\n\t\t\t{\n\t\t\t\tforeach($aFiles as $sFile)\n\t\t\t\t{\n\t\t\t\t\tif ($sFile == '.' || $sFile == '..' || $sFile == '.svn' || $sFile == '.git')\n\t\t\t\t\t{\n\t\t\t\t\t\t// Skip\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is_dir($sSource.'/'.$sFile))\n\t\t\t\t\t{\n\t\t\t\t\t\t// Recurse\n\t\t\t\t\t\tself::copydir($sSource.'/'.$sFile, $sDest.'/'.$sFile, $bUseSymbolicLinks);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($bUseSymbolicLinks)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (function_exists('symlink'))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (file_exists($sDest.'/'.$sFile))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tunlink($sDest.'/'.$sFile);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsymlink($sSource.'/'.$sFile, $sDest.'/'.$sFile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthrow(new Exception(\"Error, cannot *copy* '$sSource/$sFile' to '$sDest/$sFile' using symbolic links, 'symlink' is not supported on this system.\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (is_link($sDest.'/'.$sFile))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tunlink($sDest.'/'.$sFile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcopy($sSource.'/'.$sFile, $sDest.'/'.$sFile);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telseif (is_file($sSource))\n\t\t{\n\t\t\tif ($bUseSymbolicLinks)\n\t\t\t{\n\t\t\t\tif (function_exists('symlink'))\n\t\t\t\t{\n\t\t\t\t\treturn symlink($sSource, $sDest);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthrow(new Exception(\"Error, cannot *copy* '$sSource' to '$sDest' using symbolic links, 'symlink' is not supported on this system.\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn copy($sSource, $sDest);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Helper to move a directory when the parent directory of the target dir cannot be written\n\t * To be used as alternative to rename()\n\t * Files/Subdirs of the source directory are moved one by one\n\t * Returns void\n\t *\n\t * @param string $sSource\n\t * @param string $sDest\n\t * @param boolean $bRemoveSource If true $sSource will be removed, otherwise $sSource will just be emptied\n\t * @throws Exception\n\t */\n\tpublic static function movedir($sSource, $sDest, $bRemoveSource = true)\n\t{\n\t\tif (!is_dir($sSource))\n\t\t{\n\t\t\tthrow new Exception(\"movedir: the source directory '$sSource' is not a valid directory or cannot be read\");\n\t\t}\n\t\tif (!is_dir($sDest))\n\t\t{\n\t\t\tself::builddir($sDest);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tself::tidydir($sDest);\n\t\t}\n\n\t\tself::copydir($sSource, $sDest);\n\t\tself::tidydir($sSource);\n\t\tif($bRemoveSource === true)\n\t\t{\n\t\t\tself::rmdir_safe($sSource);\n\t\t}\n\t}\n\n\tstatic function GetPreviousInstance($sDir)\n\t{\n\t\t$sSourceDir = '';\n\t\t$sSourceEnvironment = '';\n\t\t$sConfigFile = '';\n\t\t$aResult = array(\n\t\t\t'found' => false,\n\t\t);\n\n\t\tif (file_exists($sDir.'/config-itop.php'))\n\t\t{\n\t\t\t$sSourceDir = $sDir;\n\t\t\t$sSourceEnvironment = '';\n\t\t\t$sConfigFile = $sDir.'/config-itop.php';\n\t\t\t$aResult['found'] = true;\n\t\t}\n\t\telse if (file_exists($sDir.'/conf/production/config-itop.php'))\n\t\t{\n\t\t\t$sSourceDir = $sDir;\n\t\t\t$sSourceEnvironment = 'production';\n\t\t\t$sConfigFile = $sDir.'/conf/production/config-itop.php';\n\t\t\t$aResult['found'] = true;\n\t\t}\n\n\t\tif ($aResult['found'])\n\t\t{\n\t\t\t$oPrevConf = new Config($sConfigFile);\n\n\t\t\t$aResult = array(\n\t\t\t\t'found' => true,\n\t\t\t\t'source_dir' => $sSourceDir,\n\t\t\t\t'source_environment' => $sSourceEnvironment,\n\t\t\t\t'configuration_file' => $sConfigFile,\n\t\t\t\t'db_server' => $oPrevConf->Get('db_host'),\n\t\t\t\t'db_user' => $oPrevConf->Get('db_user'),\n\t\t\t\t'db_pwd' => $oPrevConf->Get('db_pwd'),\n\t\t\t\t'db_name' => $oPrevConf->Get('db_name'),\n\t\t\t\t'db_prefix' => $oPrevConf->Get('db_subname'),\n\t\t\t\t'db_tls_enabled' => $oPrevConf->Get('db_tls.enabled'),\n\t\t\t\t'db_tls_ca' => $oPrevConf->Get('db_tls.ca'),\n\t\t\t\t'graphviz_path' => $oPrevConf->Get('graphviz_path'),\n\t\t\t\t'mysql_bindir' => $oPrevConf->GetModuleSetting('itop-backup', 'mysql_bindir', ''),\n\t\t\t);\n\t\t}\n\n\t\treturn $aResult;\n\t}\n\n\t/**\n\t * @param string $sDir\n\t *\n\t * @return bool|float false if failure\n\t * @uses \\disk_free_space()\n\t */\n\tstatic function CheckDiskSpace($sDir)\n\t{\n\t\twhile(($f = @disk_free_space($sDir)) == false)\n\t\t{\n\t\t\tif ($sDir == dirname($sDir)) break;\n\t\t\tif ($sDir == '.') break;\n\t\t\t$sDir = dirname($sDir);\n\t\t}\n\n\t\treturn $f;\n\t}\n\n\tstatic function HumanReadableSize($fBytes)\n\t{\n\t\t$aSizes = array('bytes', 'Kb', 'Mb', 'Gb', 'Tb', 'Pb', 'Hb');\n\t\t$index = 0;\n\t\twhile (($fBytes > 1000) && ($index < count($aSizes)))\n\t\t{\n\t\t\t$index++;\n\t\t\t$fBytes = $fBytes / 1000;\n\t\t}\n\n\t\treturn sprintf('%.2f %s', $fBytes, $aSizes[$index]);\n\t}\n\n\t/**\n\t * @param \\WebPage $oPage\n\t * @param boolean $bAllowDBCreation\n\t * @param string $sDBServer\n\t * @param string $sDBUser\n\t * @param string $sDBPwd\n\t * @param string $sDBName\n\t * @param string $sDBPrefix\n\t * @param string $bTlsEnabled\n\t * @param string $sTlsCA\n\t * @param string $sNewDBName\n\t */\n\tstatic function DisplayDBParameters(\n\t\t$oPage, $bAllowDBCreation, $sDBServer, $sDBUser, $sDBPwd, $sDBName, $sDBPrefix, $bTlsEnabled, $sTlsCA,\n\t\t$sNewDBName = ''\n\t) {\n\t\t$sWikiVersion = '2_6_0';\n\t\t$sMysqlTlsWikiPageUrl = 'https://wiki.openitop.org/doku.php?id='.$sWikiVersion.':install:php_and_mysql_tls';\n\n\t\t$oPage->add('<tr><td colspan=\"2\">');\n\t\t$oPage->add('<fieldset><legend>Database Server Connection</legend>');\n\t\t$oPage->add('<table id=\"table_db_options\">');\n\n\t\t//-- DB connection params\n\t\t$oPage->add('<tbody>');\n\t\t$oPage->add('<tr><td>Server Name:</td><td><input id=\"db_server\" type=\"text\" name=\"db_server\" value=\"'.htmlentities($sDBServer, ENT_QUOTES, 'UTF-8').'\" size=\"15\"/></td><td>E.g. \"localhost\", \"dbserver.mycompany.com\" or \"192.142.10.23\"</td></tr>');\n\t\t$oPage->add('<tr><td>Login:</td><td><input id=\"db_user\" type=\"text\" name=\"db_user\" value=\"'.htmlentities($sDBUser, ENT_QUOTES, 'UTF-8').'\" size=\"15\"/></td><td rowspan=\"2\" style=\"vertical-align:top\">The account must have the following privileges on the database: SELECT, INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, CREATE VIEW, SHOW VIEW, LOCK TABLE, SUPER, TRIGGER</td></tr>');\n\t\t$oPage->add('<tr><td>Password:</td><td><input id=\"db_pwd\" autocomplete=\"off\" type=\"password\" name=\"db_pwd\" value=\"'.htmlentities($sDBPwd, ENT_QUOTES, 'UTF-8').'\" size=\"15\"/></td></tr>');\n\t\t$oPage->add('</tbody>');\n\n\t\t//-- TLS params (N\u00b01260)\n\t\t$sTlsEnabledChecked = $bTlsEnabled ? ' checked' : '';\n\t\t$sTlsCaDisabled = $bTlsEnabled ? '' : ' disabled';\n\t\t$oPage->add('<tbody id=\"tls_options\">');\n\t\t$oPage->add('<tr><th colspan=\"3\" style=\"text-align: left; background-color: transparent\"><label style=\"margin: 6em; font-weight: normal; color: #696969\"><img style=\"vertical-align:bottom\" id=\"db_tls_img\">Use TLS encrypted connection</label></th></tr>');\n\t\t$oPage->add('<tr style=\"display:none\"><td colspan=\"3\" style=\"background-color: #f9e0df; padding: 1em; border: 1px solid #950303; color: #950303;\">Before configuring MySQL with TLS encryption, read the documentation <a href=\"'.$sMysqlTlsWikiPageUrl.'\" target=\"_blank\">on Combodo\\'s Wiki</a></td></tr>');\n\t\t$oPage->add('<tr style=\"display:none\"><td colspan=\"3\"><label><input id=\"db_tls_enabled\" type=\"checkbox\"'.$sTlsEnabledChecked.' name=\"db_tls_enabled\" value=\"1\"> Encrypted connection enabled</label></td></tr>');\n\t\t$oPage->add('<tr style=\"display:none\"><td>SSL CA:</td>');\n\t\t$oPage->add('<td><input id=\"db_tls_ca\" autocomplete=\"off\" type=\"text\" name=\"db_tls_ca\" value=\"'.htmlentities($sTlsCA,\n\t\t\t\tENT_QUOTES, 'UTF-8').'\" size=\"15\"'.$sTlsCaDisabled.'></td>');\n\t\t$oPage->add('<td>Path to certificate authority file for SSL</td></tr>');\n\t\t$oPage->add('</tbody>');\n\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('</td></tr>');\n\n\t\t$oPage->add('<tr><td colspan=\"2\"><span id=\"db_info\" style=\"display:inline-block; height:1.5em; margin-left:10px;\"></span></td></tr>');\n\n\t\t$oPage->add('<tr><td colspan=\"2\">');\n\t\t$oPage->add('<fieldset><legend>Database</legend>');\n\t\t$oPage->add('<table>');\n\t\tif ($bAllowDBCreation)\n\t\t{\n\t\t\t$oPage->add('<tr><td><input type=\"radio\" id=\"create_db\" name=\"create_db\" value=\"yes\"/><label for=\"create_db\">&nbsp;Create a new database:</label></td>');\n\t\t\t$oPage->add('<td><input id=\"db_new_name\" type=\"text\" name=\"db_new_name\" value=\"'.htmlentities($sNewDBName, ENT_QUOTES, 'UTF-8').'\" size=\"15\" maxlength=\"32\"/><span style=\"width:20px;\" id=\"v_db_new_name\"></span></td></tr>');\n\t\t\t$oPage->add('<tr><td><input type=\"radio\" id=\"existing_db\" name=\"create_db\" value=\"no\"/><label for=\"existing_db\">&nbsp;Use the existing database:</label></td>');\n\t\t\t$oPage->add('<td id=\"db_name_container\"><input id=\"db_name\" name=\"db_name\" size=\"15\" maxlen=\"32\" value=\"'.htmlentities($sDBName, ENT_QUOTES, 'UTF-8').'\"/><span style=\"width:20px;\" id=\"v_db_name\"></span></td></tr>');\n\t\t\t$oPage->add('<tr><td>Use a prefix for the tables:</td><td><input id=\"db_prefix\" type=\"text\" name=\"db_prefix\" value=\"'.htmlentities($sDBPrefix, ENT_QUOTES, 'UTF-8').'\" size=\"15\" maxlength=\"32\"/><span style=\"width:20px;\" id=\"v_db_prefix\"></span></td></tr>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oPage->add('<tr><td>Database Name:</td><td id=\"db_name_container\"><input id=\"db_name\" name=\"db_name\" size=\"15\" maxlen=\"32\" value=\"'.htmlentities($sDBName, ENT_QUOTES, 'UTF-8').'\"/><span style=\"width:20px;\" id=\"v_db_name\"></span></td></tr>');\n\t\t\t$oPage->add('<tr><td>Use a prefix for the tables:</td><td><input id=\"db_prefix\" type=\"text\" name=\"db_prefix\" value=\"'.htmlentities($sDBPrefix, ENT_QUOTES, 'UTF-8').'\" size=\"15\"/><span style=\"width:20px;\" id=\"v_db_prefix\"></span></td></tr>');\n\t\t}\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('<tr><td colspan=\"2\"><span id=\"table_info\">&nbsp;</span></td></tr>');\n\t\t$oPage->add('</td></tr>');\n\n\t\t// TLS checkbox toggle\n\t\t$oPage->add_script(<<<'EOF'\nfunction toggleTlsOptions() {\n\t$(\"tbody#tls_options>tr\").not(\"tr:first-child\").toggle();\n\tupdateTlsImage();\n}\nfunction updateTlsImage() {\n\t$dbTlsImg = $(\"img#db_tls_img\");\n\timgPath = \"../images/\";\n\tdbImgUrl = ($(\"tbody#tls_options>tr:nth-child(2)>td:visible\").length > 0) \n\t\t? \"minus.gif\"\n\t\t: \"plus.gif\";\n\t$dbTlsImg.attr(\"src\", imgPath+dbImgUrl);\n}\nEOF\n\t\t);\n\t\tif ($bTlsEnabled)\n\t\t{\n\t\t\t$oPage->add_ready_script('toggleTlsOptions();');\n\t\t}\n\t\t$oPage->add_ready_script(\n\t\t\t<<<EOF\n$(\"tbody#tls_options>tr>th>label\").click(function() {\n\ttoggleTlsOptions();\n});\n$(\"#db_tls_enabled\").click(function() {\n\tvar bTlsEnabled = $(\"#db_tls_enabled\").is(\":checked\");\n\t$(\"#db_tls_ca\").prop(\"disabled\", !bTlsEnabled);\n});\nupdateTlsImage();\nEOF\n\t\t);\n\n\t\t$oPage->add_script(\n\t\t\t<<<EOF\nvar iCheckDBTimer = null;\nvar oXHRCheckDB = null;\n\nfunction CheckDBConnection()\n{\n\t// Don't call the server too often...\n\tif (iCheckDBTimer !== null)\n\t{\n\t\tclearTimeout(iCheckDBTimer);\n\t\tiCheckDBTimer = null;\n\t}\n\tiCheckDBTimer = setTimeout(DoCheckDBConnection, 500);\n}\n\nfunction DoCheckDBConnection()\n{\n\tiCheckDBTimer = null;\n\tvar oParams = {\n\t\t'db_server': $(\"#db_server\").val(),\n\t\t'db_user': $(\"#db_user\").val(),\n\t\t'db_pwd': $(\"#db_pwd\").val(),\n\t\t'db_name': $(\"#db_name\").val(),\n\t\t'db_tls_enabled': $(\"input#db_tls_enabled\").prop('checked') ? 1 : 0,\n\t\t'db_tls_ca': $(\"input#db_tls_ca\").val(),\n\t}\n\tif ((oXHRCheckDB != null) && (oXHRCheckDB != undefined))\n\t{\n\t\toXHRCheckDB.abort();\n\t\toXHRCheckDB = null;\n\t}\n\toXHRCheckDB = WizardAsyncAction(\"check_db\", oParams);\n}\n\nfunction ValidateField(sFieldId, bUsed)\n{\n\tvar sValue = new String($(\"#\"+sFieldId).val());\n\tvar bMandatory = false;\n\n\tif (bUsed)\n\t{\n\t\tif (sFieldId == 'db_name')\n\t\t{\n\t\t\tbUsed = ($(\"#existing_db\").prop(\"checked\"));\n\t\t\tbMandatory = true;\n\t\t}\n\t\tif (sFieldId == 'db_new_name')\n\t\t{\n\t\t\tbUsed = ($(\"#create_db\").prop(\"checked\"));\n\t\t\tbMandatory = true;\n\t\t}\n\t}\n\t\t\n\tif (!bUsed)\n\t{\n\t\t$(\"#v_\"+sFieldId).html(\"\");\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tif (sValue != \"\")\n\t\t{\n\t\t\tif (sValue.match(/^[A-Za-z0-9_]*$/))\n\t\t\t{\n\t\t\t\tvar bCollision = false;\n\t\t\t\tif (sFieldId == 'db_new_name')\n\t\t\t\t{\n\t\t\t\t\t// check that the \"new name\" does not correspond to an existing database\n\t\t\t\t\tvar sNewName = $('#db_new_name').val();\n\t\t\t\t\t$('#db_name option').each( function() {\n\t\t\t\t\t\tif ($(this).attr('value') == sNewName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbCollision = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (bCollision)\n\t\t\t\t{\n\t\t\t\t\t$(\"#v_\"+sFieldId).html('<img src=\"../images/validation_error.png\" title=\"A database with the same name already exists\"/>');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$(\"#v_\"+sFieldId).html(\"\");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$(\"#v_\"+sFieldId).html('<img src=\"../images/validation_error.png\" title=\"Only the characters [A-Za-z0-9_] are allowed\"/>');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (bMandatory)\n\t\t{\n\t\t\t$(\"#v_\"+sFieldId).html('<img src=\"../images/validation_error.png\" title=\"This field cannot be empty\"/>');\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$(\"#v_\"+sFieldId).html(\"\");\n\t\t\treturn true;\n\t\t}\n\t}\n}\nEOF\n\t\t);\n\t\t$oPage->add_ready_script(\n\t\t\t<<<EOF\nDoCheckDBConnection(); // Validate the initial values immediately\n\n$(\"table#table_db_options\").on(\"keyup change\", \"tr>td input\", function() { CheckDBConnection(); });\n\n$(\"#db_new_name\").on(\"click keyup change\", function() { $(\"#create_db\").prop(\"checked\", true); WizardUpdateButtons(); });\n$(\"#db_name\").on(\"click keyup change\", function() {  $(\"#existing_db\").prop(\"checked\", true); WizardUpdateButtons(); });\n$(\"#db_prefix\").on(\"keyup change\", function() { WizardUpdateButtons(); });\n$(\"#existing_db\").on(\"click change\", function() { WizardUpdateButtons(); });\n$(\"#create_db\").on(\"click change\", function() { WizardUpdateButtons(); });\nEOF\n\t\t);\n\n\t}\n\n\t/**\n\t * Helper function : check the connection to the database, verify a few conditions (minimum version, etc...) and\n\t * (if connected) enumerate the existing databases (if possible)\n\t *\n\t * @param string $sDBServer\n\t * @param string $sDBUser\n\t * @param string $sDBPwd\n\t * @param bool $bTlsEnabled\n\t * @param string $sTlsCA\n\t *\n\t * @return bool|array false if the connection failed or array('checks' => Array of CheckResult, 'databases' =>\n\t *     Array of database names (as strings) or null if not allowed)\n\t */\n\tstatic function CheckDbServer(\n\t\t$sDBServer, $sDBUser, $sDBPwd, $bTlsEnabled = false, $sTlsCA = null\n\t)\n\t{\n\t\t$aResult = array('checks' => array(), 'databases' => null);\n\n\t\tif ($bTlsEnabled)\n\t\t{\n\t\t\tif (!empty($sTlsCA) && !self::CheckFileExists($sTlsCA, $aResult, 'Can\\'t open SSL CA file'))\n\t\t\t{\n\t\t\t\treturn $aResult;\n\t\t\t}\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\t$oDBSource = new CMDBSource;\n\t\t\t$oDBSource->Init($sDBServer, $sDBUser, $sDBPwd, '', $bTlsEnabled, $sTlsCA);\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO, \"Connection to '$sDBServer' as '$sDBUser' successful.\");\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO, \"Info - User privileges: \".($oDBSource->GetRawPrivileges()));\n\n\t\t\t$bHasDbVersionRequired = self::CheckDbServerVersion($aResult, $oDBSource);\n\t\t\tif (!$bHasDbVersionRequired)\n\t\t\t{\n\t\t\t\treturn $aResult;\n\t\t\t}\n\n\t\t\t// Check some server variables\n\t\t\t$iMaxAllowedPacket = $oDBSource->GetServerVariable('max_allowed_packet');\n\t\t\t$iMaxUploadSize = utils::ConvertToBytes(ini_get('upload_max_filesize'));\n\t\t\tif ($iMaxAllowedPacket >= (500 + $iMaxUploadSize)) // Allow some space for the query + the file to upload\n\t\t\t{\n\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO, \"MySQL server's max_allowed_packet ($iMaxAllowedPacket) is big enough compared to upload_max_filesize ($iMaxUploadSize).\");\n\t\t\t}\n\t\t\telse if($iMaxAllowedPacket < $iMaxUploadSize)\n\t\t\t{\n\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::WARNING, \"MySQL server's max_allowed_packet ($iMaxAllowedPacket) is not big enough. Please, consider setting it to at least \".(500 + $iMaxUploadSize).\".\");\n\t\t\t}\n\n\t\t\t$iMaxConnections = $oDBSource->GetServerVariable('max_connections');\n\t\t\tif ($iMaxConnections < 5)\n\t\t\t{\n\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::WARNING, \"MySQL server's max_connections ($iMaxConnections) is not enough. Please, consider setting it to at least 5.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO, \"MySQL server's max_connections is set to $iMaxConnections.\");\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$aResult['databases'] = $oDBSource->ListDB();\n\t\t\t}\n\t\t\tcatch(Exception $e)\n\t\t\t{\n\t\t\t\t$aResult['databases'] = null;\n\t\t\t}\n\t\t}\n\t\tcatch(Exception $e)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $aResult;\n\t}\n\n\t/**\n\t * Use to test access to MySQL SSL files (key, cert, ca)\n\t *\n\t * @param string $sPath\n\t * @param array $aResult passed by reference, will by updated in case of error\n\t * @param $sErrorMessage\n\t *\n\t * @return bool false if file doesn't exist\n\t * @used-by CheckDbServer\n\t */\n\tprivate static function CheckFileExists($sPath, &$aResult, $sErrorMessage)\n\t{\n\t\tif (!is_readable($sPath))\n\t\t{\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::ERROR, $sErrorMessage);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param array $aResult two keys : 'checks' with CheckResult array, 'databases' with list of databases available\n\t * @param CMDBSource $oDBSource\n\t *\n\t * @return boolean false if DB doesn't meet the minimum version requirement\n\t */\n\tstatic private function CheckDbServerVersion(&$aResult, $oDBSource)\n\t{\n\t\t$sDBVendor= $oDBSource->GetDBVendor();\n\t\t$sDBVersion = $oDBSource->GetDBVersion();\n\t\t$bRet = false;\n\t\t\n\t\tif (version_compare($sDBVersion, self::MYSQL_NOT_VALIDATED_VERSION, '>=') && ($sDBVendor === CMDBSource::ENUM_DB_VENDOR_MYSQL)) \n\t\t{\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::ERROR,\n\t\t\t\t\"Error: Current MySQL version is $sDBVersion. iTop doesn't yet support MySQL \".self::MYSQL_NOT_VALIDATED_VERSION.\" and above.\");\n\t\t\t$bRet = false;\n\t\t}\n\t\telse if (version_compare($sDBVersion, self::MYSQL_MIN_VERSION, '>='))\n\t\t{\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO,\n\t\t\t\t\"Current MySQL version ($sDBVersion), greater than minimum required version (\".self::MYSQL_MIN_VERSION.\")\");\n\n\t\t\t$sMySqlNextMinVersion = self::MYSQL_NEXT_MIN_VERSION; // mandatory before PHP 5.5 (arbitrary expressions), keeping compat because we're in the setup !\n\t\t\tif (!empty($sMySqlNextMinVersion))\n\t\t\t{\n\t\t\t\tif (version_compare($sDBVersion, self::MYSQL_NEXT_MIN_VERSION, '>='))\n\t\t\t\t{\n\t\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::INFO,\n\t\t\t\t\t\t\"Current MySQL version ($sDBVersion), greater than minimum required version for next \".ITOP_APPLICATION.\" release (\".self::MYSQL_NEXT_MIN_VERSION.\")\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::WARNING,\n\t\t\t\t\t\t\"Warning : Current MySQL version is $sDBVersion, minimum required version for next \".ITOP_APPLICATION.\" release will be \".self::MYSQL_NEXT_MIN_VERSION);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$bRet = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aResult['checks'][] = new CheckResult(CheckResult::ERROR,\n\t\t\t\t\"Error: Current MySQL version is $sDBVersion, minimum required version is \".self::MYSQL_MIN_VERSION);\n\t\t\t$bRet = false;\n\t\t}\n\n\t\treturn $bRet;\n\t}\n\n\t/**\n\t * @param string $sDBServer\n\t * @param string $sDBUser\n\t * @param string $sDBPwd\n\t * @param bool $bTlsEnabled\n\t * @param string $sTlsCa\n\t *\n\t * @return string\n\t * @throws \\MySQLException\n\t */\n\tstatic public function GetMySQLVersion(\n\t\t$sDBServer, $sDBUser, $sDBPwd, $bTlsEnabled = false, $sTlsCa = null\n\t)\n\t{\n\t\t$oDBSource = new CMDBSource;\n\t\t$oDBSource->Init($sDBServer, $sDBUser, $sDBPwd, '', $bTlsEnabled, $sTlsCa);\n\t\t$sDBVersion = $oDBSource->GetDBVersion();\n\t\treturn $sDBVersion;\n\t}\n\n\tstatic public function AsyncCheckDB($oPage, $aParameters)\n\t{\n\t\t$sDBServer = $aParameters['db_server'];\n\t\t$sDBUser = $aParameters['db_user'];\n\t\t$sDBPwd = $aParameters['db_pwd'];\n\t\t$sDBName = $aParameters['db_name'];\n\n\t\t$bIsWindows = (array_key_exists('WINDIR', $_SERVER) || array_key_exists('windir', $_SERVER));\n\t\tif ($bIsWindows && (preg_match('@([%!\"])@',$sDBPwd) > 0))\n\t\t{\n\t\t\t// Unsuported Password, warn the user\n\t\t\t$oPage->add_ready_script('$(\"#db_info\").html(\"<img src=\\'../images/error.png\\'/>&nbsp;On Windows, the backup won\\'t work because database password contains %, ! or &quot; character\");');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sTlsEnabled = (isset($aParameters['db_tls_enabled'])) ? $aParameters['db_tls_enabled'] : null;\n\t\t\t$sTlsCA = (isset($aParameters['db_tls_ca'])) ? $aParameters['db_tls_ca'] : null;\n\n\t\t\t$oPage->add_ready_script('oXHRCheckDB = null;');\n\n\t\t\t$checks = SetupUtils::CheckDbServer($sDBServer, $sDBUser, $sDBPwd, $sTlsEnabled, $sTlsCA);\n\n\t\t\tif ($checks === false)\n\t\t\t{\n\t\t\t\t// Connection failed, disable the \"Next\" button\n\t\t\t\t$oPage->add_ready_script('$(\"#wiz_form\").data(\"db_connection\", \"error\");');\n\t\t\t\t$oPage->add_ready_script('$(\"#db_info\").html(\"<img src=\\'../images/error.png\\'/>&nbsp;No connection to the database...\");');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aErrors = array();\n\t\t\t\t$aWarnings = array();\n\t\t\t\tforeach ($checks['checks'] as $oCheck)\n\t\t\t\t{\n\t\t\t\t\tif ($oCheck->iSeverity == CheckResult::ERROR)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aErrors[] = $oCheck->sLabel;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($oCheck->iSeverity == CheckResult::WARNING)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aWarnings[] = $oCheck->sLabel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count($aErrors) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add_ready_script('$(\"#wiz_form\").data(\"db_connection\", \"error\");');\n\t\t\t\t\t$oPage->add_ready_script('$(\"#db_info\").html(\\'<img src=\"../images/validation_error.png\"/>&nbsp;<b>Error:</b> '.htmlentities(implode('<br/>', $aErrors), ENT_QUOTES, 'UTF-8').'\\');');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (count($aWarnings) > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add_ready_script('$(\"#wiz_form\").data(\"db_connection\", \"\");');\n\t\t\t\t\t\t$oPage->add_ready_script('$(\"#db_info\").html(\\'<img src=\"../images/error.png\"/>&nbsp;<b>Warning:</b> '.htmlentities(implode('<br/>', $aWarnings), ENT_QUOTES, 'UTF-8').'\\');');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add_ready_script('$(\"#wiz_form\").data(\"db_connection\", \"\");');\n\t\t\t\t\t\t$oPage->add_ready_script('$(\"#db_info\").html(\\'<img src=\"../images/validation_ok.png\"/>&nbsp;Database server connection Ok.\\');');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($checks['databases'] == null)\n\t\t\t\t{\n\t\t\t\t\t$sDBNameInput = '<input id=\"db_name\" name=\"db_name\" size=\"15\" maxlen=\"32\" value=\"'.htmlentities($sDBName, ENT_QUOTES, 'UTF-8').'\"/><span style=\"width:20px;\" id=\"v_db_name\"></span>';\n\t\t\t\t\t$oPage->add_ready_script('$(\"#table_info\").html(\\'<img src=\"../images/error.png\"/>&nbsp;Not enough rights to enumerate the databases\\');');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sDBNameInput = '<select id=\"db_name\" name=\"db_name\">';\n\t\t\t\t\tforeach ($checks['databases'] as $sDatabaseName)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($sDatabaseName != 'information_schema')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$sEncodedName = htmlentities($sDatabaseName, ENT_QUOTES, 'UTF-8');\n\t\t\t\t\t\t\t$sSelected = ($sDatabaseName == $sDBName) ? ' selected ' : '';\n\t\t\t\t\t\t\t$sDBNameInput .= '<option value=\"'.$sEncodedName.'\" '.$sSelected.'>'.$sEncodedName.'</option>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$sDBNameInput .= '</select>';\n\t\t\t\t}\n\t\t\t\t$oPage->add_ready_script('$(\"#db_name_container\").html(\"'.addslashes($sDBNameInput).'\");');\n\t\t\t\t$oPage->add_ready_script('$(\"#db_name\").bind(\"click keyup change\", function() { $(\"#existing_db\").prop(\"checked\", true); WizardUpdateButtons(); });');\n\n\t\t\t}\n\t\t}\n\t\t$oPage->add_ready_script('WizardUpdateButtons();');\n\t}\n\n\t/**\n\t * Helper function to get the available languages from the given directory\n\t * @param $sDir String Path to the dictionary\n\t * @return array of language code => description\n\t */\n\tstatic public function GetAvailableLanguages($sDir)\n\t{\n\t\trequire_once(APPROOT.'/core/coreexception.class.inc.php');\n\t\trequire_once(APPROOT.'/core/dict.class.inc.php');\n\n\t\t$aFiles = scandir($sDir);\n\t\tforeach($aFiles as $sFile)\n\t\t{\n\t\t\tif ($sFile == '.' || $sFile == '..' || $sFile == '.svn' || $sFile == '.git')\n\t\t\t{\n\t\t\t\t// Skip\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$sFilePath = $sDir.'/'.$sFile;\n\t\t\tif (is_file($sFilePath) && preg_match('/^.*dict.*\\.php$/i', $sFilePath, $aMatches))\n\t\t\t{\n\t\t\t\trequire_once($sFilePath);\n\t\t\t}\n\t\t}\n\n\t\treturn Dict::GetLanguages();\n\t}\n\n\tstatic public function GetLanguageSelect($sSourceDir, $sInputName, $sDefaultLanguageCode)\n\t{\n\t\t$sHtml = '<select  id=\"'.$sInputName.'\" name=\"'.$sInputName.'\">';\n\t\t$sSourceDir = APPROOT.'dictionaries/';\n\t\t$aLanguages = SetupUtils::GetAvailableLanguages($sSourceDir);\n\t\tforeach($aLanguages as $sCode => $aInfo)\n\t\t{\n\t\t\t$sSelected = ($sCode == $sDefaultLanguageCode) ? 'selected ' : '';\n\t\t\t$sHtml .= '<option value=\"'.$sCode.'\" '.$sSelected.'>'.htmlentities($aInfo['description'], ENT_QUOTES, 'UTF-8').' ('.htmlentities($aInfo['localized_description'], ENT_QUOTES, 'UTF-8').')</option>';\n\t\t}\n\t\t$sHtml .= '</select></td></tr>';\n\n\t\treturn $sHtml;\n\t}\n\n\t/**\n\t *\n\t * @param $oWizard\n\t * @param bool $bAbortOnMissingDependency ...\n\t * @param array $aModulesToLoad List of modules to search for, defaults to all if ommitted\n\t * @return hash\n\t * @throws Exception\n\t */\n\tpublic static function AnalyzeInstallation($oWizard, $bAbortOnMissingDependency = false, $aModulesToLoad = null)\n\t{\n\t\trequire_once(APPROOT.'/setup/moduleinstaller.class.inc.php');\n\t\t$oConfig = new Config();\n\t\t$sSourceDir = $oWizard->GetParameter('source_dir', '');\n\n\t\tif (strpos($sSourceDir, APPROOT) !== false)\n\t\t{\n\t\t\t$sRelativeSourceDir = str_replace(APPROOT, '', $sSourceDir);\n\t\t}\n\t\telse if (strpos($sSourceDir, $oWizard->GetParameter('previous_version_dir')) !== false)\n\t\t{\n\t\t\t$sRelativeSourceDir = str_replace($oWizard->GetParameter('previous_version_dir'), '', $sSourceDir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow(new Exception('Internal error: AnalyzeInstallation: source_dir is neither under APPROOT nor under previous_installation_dir ???'));\n\t\t}\n\n\n\t\t$aParamValues = array(\n\t\t\t'db_server' => $oWizard->GetParameter('db_server', ''),\n\t\t\t'db_user' => $oWizard->GetParameter('db_user', ''),\n\t\t\t'db_pwd' => $oWizard->GetParameter('db_pwd', ''),\n\t\t\t'db_name' => $oWizard->GetParameter('db_name', ''),\n\t\t\t'db_prefix' => $oWizard->GetParameter('db_prefix', ''),\n\t\t\t'db_tls_enabled' => $oWizard->GetParameter('db_tls_enabled', false),\n\t\t\t'db_tls_ca' => $oWizard->GetParameter('db_tls_ca', ''),\n\t\t\t'source_dir' => $sRelativeSourceDir,\n\t\t);\n\t\t$oConfig->UpdateFromParams($aParamValues, null);\n\t\t$aDirsToScan = array($sSourceDir);\n\n\t\tif (is_dir(APPROOT.'extensions'))\n\t\t{\n\t\t\t$aDirsToScan[] = APPROOT.'extensions';\n\t\t}\n\t\tif (is_dir($oWizard->GetParameter('copy_extensions_from')))\n\t\t{\n\t\t\t$aDirsToScan[] = $oWizard->GetParameter('copy_extensions_from');\n\t\t}\n\t\t$sExtraDir = APPROOT.'data/production-modules/';\n\t\tif (is_dir($sExtraDir))\n\t\t{\n\t\t\t$aDirsToScan[] = $sExtraDir;\n\t\t}\n\t\t$oProductionEnv = new RunTimeEnvironment();\n\t\t$aAvailableModules = $oProductionEnv->AnalyzeInstallation($oConfig, $aDirsToScan, $bAbortOnMissingDependency, $aModulesToLoad);\n\n\t\tforeach($aAvailableModules as $key => $aModule)\n\t\t{\n\t\t\t$bIsExtra = (array_key_exists('root_dir', $aModule) && (strpos($aModule['root_dir'], $sExtraDir) !== false)); // Some modules (root, datamodel) have no 'root_dir'\n\t\t\tif ($bIsExtra)\n\t\t\t{\n\t\t\t\t// Modules in data/production-modules/ are considered as mandatory and always installed\n\t\t\t\t$aAvailableModules[$key]['visible'] = false;\n\t\t\t}\n\t\t}\n\n\t\treturn $aAvailableModules;\n\t}\n\n\t/**\n\t * @param WizardController $oWizard\n\t *\n\t * @return array|bool\n\t */\n\tpublic static function GetApplicationVersion($oWizard)\n\t{\n\t\trequire_once(APPROOT.'/setup/moduleinstaller.class.inc.php');\n\t\t$oConfig = new Config();\n\n\t\t$aParamValues = array(\n\t\t\t'db_server' => $oWizard->GetParameter('db_server', ''),\n\t\t\t'db_user' => $oWizard->GetParameter('db_user', ''),\n\t\t\t'db_pwd' => $oWizard->GetParameter('db_pwd', ''),\n\t\t\t'db_name' => $oWizard->GetParameter('db_name', ''),\n\t\t\t'db_prefix' => $oWizard->GetParameter('db_prefix', ''),\n\t\t\t'db_tls_enabled' => $oWizard->GetParameter('db_tls_enabled', false),\n\t\t\t'db_tls_ca' => $oWizard->GetParameter('db_tls_ca', ''),\n\t\t\t'source_dir' => '',\n\t\t);\n\t\t$oConfig->UpdateFromParams($aParamValues, null);\n\n\t\t$oProductionEnv = new RunTimeEnvironment();\n\t\treturn $oProductionEnv->GetApplicationVersion($oConfig);\n\t}\n\n\t/**\n\t * Checks if the content of a directory matches the given manifest\n\t * @param string $sBaseDir Path to the root directory of iTop\n\t * @param string $sSourceDir Relative path to the directory to check under $sBaseDir\n\t * @param $aManifest\n\t * @param array $aExcludeNames\n\t * @param Hash $aResult Used for recursion\n\t * @return hash Hash array ('added' => array(), 'removed' => array(), 'modified' => array())\n\t * @internal param array $aDOMManifest Array of array('path' => relative_path 'size'=> iSize, 'md5' => sHexMD5)\n\t */\n\tpublic static function CheckDirAgainstManifest($sBaseDir, $sSourceDir, $aManifest, $aExcludeNames = array('.svn', '.git'), $aResult = null)\n\t{\n//echo \"CheckDirAgainstManifest($sBaseDir, $sSourceDir ...)\\n\"; \n\t\tif ($aResult === null)\n\t\t{\n\t\t\t$aResult = array('added' => array(), 'removed' => array(), 'modified' => array());\n\t\t}\n\n\t\tif (substr($sSourceDir, 0, 1) == '/')\n\t\t{\n\t\t\t$sSourceDir = substr($sSourceDir, 1);\n\t\t}\n\n\t\t// Manifest limited to all the files supposed to be located in this directory\n\t\t$aDirManifest = array();\n\t\tforeach($aManifest as $aFileInfo)\n\t\t{\n\t\t\t$sDir = dirname($aFileInfo['path']);\n\t\t\tif ($sDir == '.')\n\t\t\t{\n\t\t\t\t// Hmm... the file seems located at the root of iTop\n\t\t\t\t$sDir = '';\n\t\t\t}\n\t\t\tif ($sDir == $sSourceDir)\n\t\t\t{\n\t\t\t\t$aDirManifest[basename($aFileInfo['path'])] = $aFileInfo;\n\t\t\t}\n\t\t}\n\n//echo \"The manifest contains \".count($aDirManifest).\" files for the directory '$sSourceDir' (and below)\\n\"; \n\n\t\t// Read the content of the directory\n\t\tforeach(glob($sBaseDir.'/'.$sSourceDir .'/*') as $sFilePath)\n\t\t{\n\t\t\t$sFile = basename($sFilePath);\n//echo \"Checking $sFile ($sFilePath)\\n\"; \n\n\t\t\tif (in_array(basename($sFile), $aExcludeNames)) continue;\n\n\t\t\tif(is_dir($sFilePath))\n\t\t\t{\n\t\t\t\t$aResult = self::CheckDirAgainstManifest($sBaseDir, $sSourceDir.'/'.$sFile, $aManifest, $aExcludeNames, $aResult);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!array_key_exists($sFile, $aDirManifest))\n\t\t\t\t{\n//echo \"New file \".$sFile.\" in $sSourceDir\\n\"; \n\t\t\t\t\t$aResult['added'][$sSourceDir.'/'.$sFile] = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$aStats = stat($sFilePath);\n\t\t\t\t\tif ($aStats['size'] != $aDirManifest[$sFile]['size'])\n\t\t\t\t\t{\n\t\t\t\t\t\t// Different sizes\n\t\t\t\t\t\t$aResult['modified'][$sSourceDir.'/'.$sFile] = 'Different sizes. Original size: '.$aDirManifest[$sFile]['size'].' bytes, actual file size on disk: '.$aStats['size'].' bytes.';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Same size, compare the md5 signature\n\t\t\t\t\t\t$sMD5 = md5_file($sFilePath);\n\t\t\t\t\t\tif ($sMD5 != $aDirManifest[$sFile]['md5'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aResult['modified'][$sSourceDir.'/'.$sFile] = 'Content modified (MD5 checksums differ).';\n//echo $sSourceDir.'/'.$sFile.\" modified ($sMD5 == {$aDirManifest[$sFile]['md5']})\\n\";\n\t\t\t\t\t\t}\n//else\n//{\n//\techo $sSourceDir.'/'.$sFile.\" unmodified ($sMD5 == {$aDirManifest[$sFile]['md5']})\\n\";\n//}\n\t\t\t\t\t}\n//echo \"Removing \".$sFile.\" from aDirManifest\\n\"; \n\t\t\t\t\tunset($aDirManifest[$sFile]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// What remains in the array are files that were deleted\n\t\tforeach($aDirManifest as $sDeletedFile => $void)\n\t\t{\n\t\t\t$aResult['removed'][$sSourceDir.'/'.$sDeletedFile] = true;\n\t\t}\n\t\treturn $aResult;\n\t}\n\n\tpublic static function CheckDataModelFiles($sManifestFile, $sBaseDir)\n\t{\n\t\t$oXML = simplexml_load_file($sManifestFile);\n\t\t$aManifest = array();\n\t\tforeach($oXML as $oFileInfo)\n\t\t{\n\t\t\t$aManifest[] = array('path' => (string)$oFileInfo->path, 'size' => (int)$oFileInfo->size, 'md5' => (string)$oFileInfo->md5);\n\t\t}\n\n\t\t$sBaseDir = preg_replace('|modules/?$|', '', $sBaseDir);\n\t\t$aResults = self::CheckDirAgainstManifest($sBaseDir, 'modules', $aManifest);\n\n//\t\techo \"<pre>Comparison of \".dirname($sBaseDir).\"/modules against $sManifestFile:\\n\".print_r($aResults, true).\"</pre>\";\n\t\treturn $aResults;\n\t}\n\n\tpublic static function CheckPortalFiles($sManifestFile, $sBaseDir)\n\t{\n\t\t$oXML = simplexml_load_file($sManifestFile);\n\t\t$aManifest = array();\n\t\tforeach($oXML as $oFileInfo)\n\t\t{\n\t\t\t$aManifest[] = array('path' => (string)$oFileInfo->path, 'size' => (int)$oFileInfo->size, 'md5' => (string)$oFileInfo->md5);\n\t\t}\n\n\t\t$aResults = self::CheckDirAgainstManifest($sBaseDir, 'portal', $aManifest);\n\n//\t\techo \"<pre>Comparison of \".dirname($sBaseDir).\"/portal:\\n\".print_r($aResults, true).\"</pre>\";\n\t\treturn $aResults;\n\t}\n\n\tpublic static function CheckApplicationFiles($sManifestFile, $sBaseDir)\n\t{\n\t\t$oXML = simplexml_load_file($sManifestFile);\n\t\t$aManifest = array();\n\t\tforeach($oXML as $oFileInfo)\n\t\t{\n\t\t\t$aManifest[] = array('path' => (string)$oFileInfo->path, 'size' => (int)$oFileInfo->size, 'md5' => (string)$oFileInfo->md5);\n\t\t}\n\n\t\t$aResults = array('added' => array(), 'removed' => array(), 'modified' => array());\n\t\tforeach(array('addons', 'core', 'dictionaries', 'js', 'application', 'css', 'pages', 'synchro', 'webservices') as $sDir)\n\t\t{\n\t\t\t$aTmp = self::CheckDirAgainstManifest($sBaseDir, $sDir, $aManifest);\n\t\t\t$aResults['added'] = array_merge($aResults['added'], $aTmp['added']);\n\t\t\t$aResults['modified'] = array_merge($aResults['modified'], $aTmp['modified']);\n\t\t\t$aResults['removed'] = array_merge($aResults['removed'], $aTmp['removed']);\n\t\t}\n\n//\t\techo \"<pre>Comparison of \".dirname($sBaseDir).\"/portal:\\n\".print_r($aResults, true).\"</pre>\";\n\t\treturn $aResults;\n\t}\n\n\t/**\n\t * @param string $sInstalledVersion\n\t * @param string $sSourceDir\n\t * @return bool|hash\n\t * @throws Exception\n\t */\n\tpublic static function CheckVersion($sInstalledVersion, $sSourceDir)\n\t{\n\t\t$sManifestFilePath = self::GetVersionManifest($sInstalledVersion);\n\t\tif ($sSourceDir != '')\n\t\t{\n\t\t\tif (file_exists($sManifestFilePath))\n\t\t\t{\n\t\t\t\t$aDMchanges = self::CheckDataModelFiles($sManifestFilePath, $sSourceDir);\n\t\t\t\t//$aPortalChanges = self::CheckPortalFiles($sManifestFilePath, $sSourceDir);\n\t\t\t\t//$aCodeChanges = self::CheckApplicationFiles($sManifestFilePath, $sSourceDir);\n\n\t\t\t\t//echo(\"Changes detected compared to $sInstalledVersion:<br/>DataModel:<br/><pre>\".print_r($aDMchanges, true).\"</pre>\");\n\t\t\t\t//echo(\"Changes detected compared to $sInstalledVersion:<br/>DataModel:<br/><pre>\".print_r($aDMchanges, true).\"</pre><br/>Portal:<br/><pre>\".print_r($aPortalChanges, true).\"</pre><br/>Code:<br/><pre>\".print_r($aCodeChanges, true).\"</pre>\");\n\t\t\t\treturn $aDMchanges;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow(new Exception(\"Cannot check version '$sInstalledVersion', no source directory provided to check the files.\"));\n\t\t}\n\t}\n\n\tpublic static function GetVersionManifest($sInstalledVersion)\n\t{\n\t\tif (preg_match('/^([0-9]+)\\./', $sInstalledVersion, $aMatches))\n\t\t{\n\t\t\treturn APPROOT.'datamodels/'.$aMatches[1].'.x/manifest-'.$sInstalledVersion.'.xml';\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static function CheckWritableDirs($aWritableDirs)\n\t{\n\t\t$aNonWritableDirs = array();\n\t\tforeach($aWritableDirs as $sDir)\n\t\t{\n\t\t\t$sFullPath = APPROOT.$sDir;\n\t\t\tif (is_dir($sFullPath) && !is_writable($sFullPath))\n\t\t\t{\n\t\t\t\t$aNonWritableDirs[APPROOT.$sDir] = new CheckResult(CheckResult::ERROR, \"The directory <b>'\".APPROOT.$sDir.\"'</b> exists but is not writable for the application.\");\n\t\t\t}\n\t\t\telse if (file_exists($sFullPath) && !is_dir($sFullPath))\n\t\t\t{\n\t\t\t\t$aNonWritableDirs[APPROOT.$sDir] = new CheckResult(CheckResult::ERROR, ITOP_APPLICATION.\" needs the directory <b>'\".APPROOT.$sDir.\"'</b> to be writable. However <i>file</i> named <b>'\".APPROOT.$sDir.\"'</b> already exists.\");\n\t\t\t}\n\t\t\telse if (!is_dir($sFullPath) && !is_writable(APPROOT))\n\t\t\t{\n\t\t\t\t$aNonWritableDirs[APPROOT.$sDir] = new CheckResult(CheckResult::ERROR, ITOP_APPLICATION.\" needs the directory <b>'\".APPROOT.$sDir.\"'</b> to be writable. The directory <b>'\".APPROOT.$sDir.\"'</b> does not exist and '\".APPROOT.\"' is not writable, the application cannot create the directory '$sDir' inside it.\");\n\t\t\t}\n\t\t}\n\t\treturn $aNonWritableDirs;\n\t}\n\n\tpublic static function GetLatestDataModelDir()\n\t{\n\t\t$sBaseDir = APPROOT.'datamodels';\n\n\t\t$aDirs = glob($sBaseDir.'/*', GLOB_MARK | GLOB_ONLYDIR);\n\t\tif ($aDirs !== false)\n\t\t{\n\t\t\tsort($aDirs);\n\t\t\t// Windows: there is a backslash at the end (though the path is made of slashes!!!)\n\t\t\t$sDir = basename(array_pop($aDirs));\n\t\t\t$sRes = $sBaseDir.'/'.$sDir.'/';\n\t\t\treturn $sRes;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static function GetCompatibleDataModelDir($sInstalledVersion)\n\t{\n\t\tif (preg_match('/^([0-9]+)\\./', $sInstalledVersion, $aMatches))\n\t\t{\n\t\t\t$sMajorVersion = $aMatches[1];\n\t\t\t$sDir = APPROOT.'datamodels/'.$sMajorVersion.'.x/';\n\t\t\tif (is_dir($sDir))\n\t\t\t{\n\t\t\t\treturn $sDir;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic public function GetDataModelVersion($sDatamodelDir)\n\t{\n\t\t$sVersionFile = $sDatamodelDir.'version.xml';\n\t\tif (file_exists($sVersionFile))\n\t\t{\n\t\t\t$oParams = new XMLParameters($sVersionFile);\n\t\t\treturn $oParams->Get('version');\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns an array of xml nodes describing the licences.\n\t * @param $sEnv string|null Execution environment. If present loads licenses only for installed modules else loads all licenses available.\n\t * @return array Licenses list.\n\t */\n\tstatic public function GetLicenses($sEnv = null)\n\t{\n\t\t$aLicenses = array();\n\t\t$aLicenceFiles = glob(APPROOT.'setup/licenses/*.xml');\n\t\tif (empty($sEnv))\n\t\t{\n\t\t\t$aLicenceFiles = array_merge($aLicenceFiles, glob(APPROOT.'datamodels/*/*/license.*.xml'));\n\t\t\t$aLicenceFiles = array_merge($aLicenceFiles, glob(APPROOT.'extensions/*/license.*.xml'));\n\t\t\t$aLicenceFiles = array_merge($aLicenceFiles, glob(APPROOT.'data/*-modules/*/license.*.xml'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aLicenceFiles = array_merge($aLicenceFiles, glob(APPROOT.'env-'.$sEnv.'/*/license.*.xml'));\n\t\t}\n\t\tforeach ($aLicenceFiles as $sFile)\n\t\t{\n\t\t\t$oXml = simplexml_load_file($sFile);\n\t\t\tif (!empty($oXml->license))\n\t\t\t{\n\t\t\t\tforeach ($oXml->license as $oLicense)\n\t\t\t\t{\n\t\t\t\t\t$aLicenses[(string)$oLicense->product] = $oLicense;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $aLicenses;\n\t}\n\n\t/**\n\t * @return string path to the log file where the create and/or alter queries are written\n\t */\n\tstatic public function GetSetupQueriesFilePath()\n\t{\n\t\treturn APPROOT.'log/setup-queries-'.strftime('%Y-%m-%d_%H_%M').'.sql';\n\t}\n\n\t/**\n\t * Create and store Setup authentication token\n\t *\n\t * @return string token\n\t */\n\tpublic final static function CreateSetupToken()\n\t{\n\t\tif (!is_dir(APPROOT.'data'))\n\t\t{\n\t\t\tmkdir(APPROOT.'data');\n\t\t}\n\t\tif (!is_dir(APPROOT.'data/setup'))\n\t\t{\n\t\t\tmkdir(APPROOT.'data/setup');\n\t\t}\n\t\t$sUID = hash('sha256', rand());\n\t\tfile_put_contents(APPROOT.'data/setup/authent', $sUID);\n\t\t$_SESSION['setup_token'] = $sUID;\n\t\treturn $sUID;\n\t}\n\n\t/**\n\t * Verify Setup authentication token (from the request parameter 'authent')\n\t *\n\t * @param bool $bRemoveToken\n\t *\n\t * @throws \\SecurityException\n\t */\n\tpublic final static function CheckSetupToken($bRemoveToken = false)\n\t{\n\t\t$sAuthent = utils::ReadParam('authent', '', false, 'raw_data');\n\t\t$sTokenFile = APPROOT.'data/setup/authent';\n\t\tif (!file_exists($sTokenFile) || $sAuthent !== file_get_contents($sTokenFile))\n\t\t{\n\t\t\tthrow new SecurityException('Setup operations are not allowed outside of the setup');\n\t\t}\n\t\tif ($bRemoveToken)\n\t\t{\n\t\t\t@unlink($sTokenFile);\n\t\t}\n\t}\n\n\t/**\n\t * Check setup transaction and create a new one if necessary\n\t *\n\t * @return bool\n\t */\n\tpublic static function IsSessionSetupTokenValid()\n\t{\n\t\tif (isset($_SESSION['setup_token'])) {\n\t\t\t$sAuth = $_SESSION['setup_token'];\n\t\t\t$sTokenFile = APPROOT.'data/setup/authent';\n\t\t\tif (file_exists($sTokenFile) && $sAuth === file_get_contents($sTokenFile)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic static function EraseSetupToken()\n\t{\n\t\t$sTokenFile = APPROOT.'data/setup/authent';\n\t\tif (is_file($sTokenFile)) {\n\t\t\tunlink($sTokenFile);\n\t\t}\n\t\tunset($_SESSION['setup_token']);\n\t}\n}\n\n/**\n * Helper class to write rules (as PHP expressions) in the 'auto_select' field of the 'module'\n */\nclass SetupInfo\n{\n\tstatic $aSelectedModules = array();\n\n\t/**\n\t * Called by the setup process to initializes the list of selected modules. Do not call this method\n\t * from an 'auto_select' rule\n\t * @param hash $aModules\n\t * @return void\n\t */\n\tstatic function SetSelectedModules($aModules)\n\t{\n\t\tself::$aSelectedModules = $aModules;\n\t}\n\n\t/**\n\t * Returns true if a module is selected (as a consequence of the end-user's choices,\n\t * or because the module is hidden, or mandatory, or because of a previous auto_select rule)\n\t * @param string $sModuleId The identifier of the module (without the version number. Example: itop-config-mgmt)\n\t * @return boolean True if the module is already selected, false otherwise\n\t */\n\tstatic function ModuleIsSelected($sModuleId)\n\t{\n\t\treturn (array_key_exists($sModuleId, self::$aSelectedModules));\n\t}\n}\n", "<?php\n// Copyright (C) 2010-2012 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n/**\n * Engine for displaying the various pages of a \"wizard\"\n * Each \"step\" of the wizard must be implemented as \n * separate class derived from WizardStep. each 'step' can also have its own\n * internal 'state' for developing complex wizards.\n * The WizardController provides the \"<< Back\" feature by storing a stack\n * of the previous screens. The WizardController also maintains from page\n * to page a list of \"parameters\" to be dispayed/edited by each of the steps.\n * @copyright   Copyright (C) 2010-2012 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nclass WizardController\n{\n\tprotected $aSteps;\n\tprotected $sInitialStepClass;\n\tprotected $sInitialState;\n\tprotected $aParameters;\n\t\n\t/**\n\t * Initiailization of the wizard controller\n\t * @param string $sInitialStepClass Class of the initial step/page of the wizard\n\t * @param string $sInitialState Initial state of the initial page (if this class manages states)\n\t */\n\tpublic function __construct($sInitialStepClass, $sInitialState = '')\n\t{\n\t\t$this->sInitialStepClass = $sInitialStepClass;\n\t\t$this->sInitialState = $sInitialState;\n\t\t$this->aParameters = array();\n\t\t$this->aSteps = array();\n\t}\n\t\n\t/**\n\t * Pushes information about the current step onto the stack\n\t * @param hash $aStepInfo Array('class' => , 'state' => )\n\t */\n\tprotected function PushStep($aStepInfo)\n\t{\n\t\tarray_push($this->aSteps, $aStepInfo);\n\t}\n\t\n\t/**\n\t * Removes information about the previous step from the stack\n\t * @return hash Array('class' => , 'state' => )\n\t */\n\tprotected function PopStep()\n\t{\n\t\treturn array_pop($this->aSteps);\n\t}\n\t\n\t/**\n\t * Reads a \"persistent\" parameter from the wizard's context\n\t * @param string $sParamCode The code identifying this parameter\n\t * @param mixed $defaultValue The default value of the parameter in case it was not set\n\t */\n\tpublic function GetParameter($sParamCode, $defaultValue = '')\n\t{\n\t\tif (array_key_exists($sParamCode, $this->aParameters))\n\t\t{\n\t\t\treturn $this->aParameters[$sParamCode];\n\t\t}\n\t\treturn $defaultValue;\n\t}\n\n\t/**\n\t * Stores a \"persistent\" parameter in the wizard's context\n\t * @param string $sParamCode The code identifying this parameter\n\t * @param mixed $value The value to store\n\t */\n\tpublic function SetParameter($sParamCode, $value)\n\t{\n\t\t$this->aParameters[$sParamCode] = $value;\n\t}\n\t\n\t/**\n\t * Stores the value of the page's parameter in a \"persistent\" parameter in the wizard's context\n\t * @param string $sParamCode The code identifying this parameter\n\t * @param mixed $defaultValue The default value for the parameter\n\t * @param string $sSanitizationFilter A 'sanitization' fitler. Default is 'raw_data', which means no filtering\n\t */\n\tpublic function SaveParameter($sParamCode, $defaultValue, $sSanitizationFilter = 'raw_data')\n\t{\n\t\t$value = utils::ReadParam($sParamCode, $defaultValue, false, $sSanitizationFilter);\n\t\t$this->aParameters[$sParamCode] = $value;\n\t}\n\t\n\t/**\n\t * Starts the wizard by displaying it in its initial state\n\t */\n\tpublic function Start()\n\t{\n\t\t$sCurrentStepClass = $this->sInitialStepClass;\n\t\t$oStep = new $sCurrentStepClass($this, $this->sInitialState);\n\t\t$this->DisplayStep($oStep);\n\t}\n\t/**\n\t * Progress towards the next step of the wizard\n\t * @throws Exception\n\t */\n\tprotected function Next()\n\t{\n\t\t$sCurrentStepClass = utils::ReadParam('_class', $this->sInitialStepClass);\n\t\t$sCurrentState = utils::ReadParam('_state', $this->sInitialState);\n\t\t/** @var \\WizardStep $oStep */\n\t\t$oStep = new $sCurrentStepClass($this, $sCurrentState);\n\t\tif ($oStep->ValidateParams())\n\t\t{\n\t\t\t$this->PushStep(array('class' => $sCurrentStepClass, 'state' => $sCurrentState));\n\t\t\t$aPossibleSteps = $oStep->GetPossibleSteps();\n\t\t\t$aNextStepInfo = $oStep->ProcessParams(true); // true => moving forward\n\t\t\tif (in_array($aNextStepInfo['class'], $aPossibleSteps))\n\t\t\t{\n\t\t\t\t$oNextStep = new $aNextStepInfo['class']($this, $aNextStepInfo['state']);\n\t\t\t\t$this->DisplayStep($oNextStep);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new Exception(\"Internal error: Unexpected next step '{$aNextStepInfo['class']}'. The possible next steps are: \".implode(', ', $aPossibleSteps));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->DisplayStep($oStep);\n\t\t}\n\t}\n\t/**\n\t * Move one step back\n\t */\n\tprotected function Back()\n\t{\n\t\t// let the current step save its parameters\n\t\t$sCurrentStepClass = utils::ReadParam('_class', $this->sInitialStepClass);\n\t\t$sCurrentState = utils::ReadParam('_state', $this->sInitialState);\n\t\t$oStep = new $sCurrentStepClass($this, $sCurrentState);\n\t\t$aNextStepInfo = $oStep->ProcessParams(false); // false => Moving backwards\n\t\t\n\t\t// Display the previous step\n\t\t$aCurrentStepInfo = $this->PopStep();\n\t\t$oStep = new $aCurrentStepInfo['class']($this, $aCurrentStepInfo['state']);\n\t\t$this->DisplayStep($oStep);\n\t}\n\t\n\t/**\n\t * Displays the specified 'step' of the wizard\n\t * @param WizardStep $oStep The 'step' to display\n\t */\n\tprotected function DisplayStep(WizardStep $oStep)\n\t{\n\t\t$oPage = new SetupPage($oStep->GetTitle());\n\t\tif ($oStep->RequiresWritableConfig())\n\t\t{\n\t\t\t$sConfigFile = utils::GetConfigFilePath();\n\t\t\tif (file_exists($sConfigFile))\n\t\t\t{\n\t\t\t\t// The configuration file already exists\n\t\t\t\tif (!is_writable($sConfigFile))\n\t\t\t\t{\n\t\t\t\t\tSetupUtils::EraseSetupToken();\n\t\t\t\t\t$sRelativePath = utils::GetConfigFilePathRelative();\n\t\t\t\t\t$oP = new SetupPage('Installation Cannot Continue');\n\t\t\t\t\t$oP->add(\"<h2>Fatal error</h2>\\n\");\n\t\t\t\t\t$oP->error(\"<b>Error:</b> the configuration file '\".$sRelativePath.\"' already exists and cannot be overwritten.\");\n\t\t\t\t\t$oP->p(\"The wizard cannot modify the configuration file for you. If you want to upgrade \".ITOP_APPLICATION.\", make sure that the file '<b>\".$sRelativePath.\"</b>' can be modified by the web server.\");\n\t\t\t\t\t$oP->p('<button type=\"button\" onclick=\"window.location.reload()\">Reload</button>');\n\t\t\t\t\t$oP->output();\n\t\t\t\t\t// Prevent token creation\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t\t$oPage->add_linked_script('../setup/setup.js');\n\t\t$oPage->add_script(\"function CanMoveForward()\\n{\\n\".$oStep->JSCanMoveForward().\"\\n}\\n\");\n\t\t$oPage->add_script(\"function CanMoveBackward()\\n{\\n\".$oStep->JSCanMoveBackward().\"\\n}\\n\");\n\t\t$oPage->add('<form id=\"wiz_form\" method=\"post\">');\n\t\t$oStep->Display($oPage);\n\t\t\n\t\t// Add the back / next buttons and the hidden form\n\t\t// to store the parameters\n\t\t$oPage->add('<input type=\"hidden\" id=\"_class\" name=\"_class\" value=\"'.get_class($oStep).'\"/>');\n\t\t$oPage->add('<input type=\"hidden\" id=\"_state\" name=\"_state\" value=\"'.$oStep->GetState().'\"/>');\n\t\tforeach($this->aParameters as $sCode => $value)\n\t\t{\n\t\t\t$oPage->add('<input type=\"hidden\" name=\"_params['.$sCode.']\" value=\"'.htmlentities($value, ENT_QUOTES, 'UTF-8').'\"/>');\n\t\t}\n\n\t\t$oPage->add('<input type=\"hidden\" name=\"_steps\" value=\"'.htmlentities(json_encode($this->aSteps), ENT_QUOTES, 'UTF-8').'\"/>');\n\t\t$oPage->add('<table style=\"width:100%;\"><tr>');\n\t\tif ((count($this->aSteps) > 0) && ($oStep->CanMoveBackward()))\n\t\t{\n\t\t\t$oPage->add('<td style=\"text-align: left\"><button id=\"btn_back\" type=\"submit\" name=\"operation\" value=\"back\"> &lt;&lt; Back </button></td>');\n\t\t}\n\t\tif ($oStep->CanMoveForward())\n\t\t{\n\t\t\t$oPage->add('<td style=\"text-align:right;\"><button id=\"btn_next\" class=\"default\" type=\"submit\" name=\"operation\" value=\"next\">'.htmlentities($oStep->GetNextButtonLabel(), ENT_QUOTES, 'UTF-8').'</button></td>');\n\t\t}\n\t\t$oPage->add('</tr></table>');\n\t\t$oPage->add(\"</form>\");\n\t\t$oPage->add('<div id=\"async_action\" style=\"display:none;overflow:auto;max-height:100px;color:#F00;font-size:small;\"></div>'); // The div may become visible in case of error\n\n\t\t// Hack to have the \"Next >>\" button, be the default button, since the first submit button in the form is the default one\n\t\t$oPage->add_ready_script(\n<<<EOF\n\n$('form').each(function () {\n\tvar thisform = $(this);\n\t\tthisform.prepend(thisform.find('button.default').clone().removeAttr('id').prop('disabled', false).css({\n\t\tposition: 'absolute',\n\t\tleft: '-999px',\n\t\ttop: '-999px',\n\t\theight: 0,\n\t\twidth: 0\n\t}));\n});\n$('#btn_back').click(function() { $('#wiz_form').data('back', true); });\n\n$('#wiz_form').submit(function() {\n\tif ($(this).data('back'))\n\t{\n\t\treturn CanMoveBackward();\n\t}\n\telse\n\t{\n\t\treturn CanMoveForward();\n\t} \n});\n\n$('#wiz_form').data('back', false);\nWizardUpdateButtons();\n\nEOF\n\t\t);\n\t\t$oPage->output();\n\t}\n\t/**\n\t * Make the wizard run: Start, Next or Back depending WizardUpdateButtons();\non the page's parameters\n\t */\n\tpublic function Run()\n\t{\n\t\t$sOperation = utils::ReadParam('operation');\n\t\t$this->aParameters = utils::ReadParam('_params', array(), false, 'raw_data');\n\t\t$this->aSteps  = json_decode(utils::ReadParam('_steps', '[]', false, 'raw_data'), true /* bAssoc */);\n\t\t\n\t\tswitch($sOperation)\n\t\t{\n\t\t\tcase 'next':\n\t\t\t$this->Next();\n\t\t\tbreak;\n\t\t\t\n\t\t\tcase 'back':\n\t\t\t$this->Back();\n\t\t\tbreak;\n\t\t\t\n\t\t\tdefault:\n\t\t\t$this->Start();\n\t\t}\n\t}\n\t\n\t/**\n\t * Provides information about the structure/workflow of the wizard by listing\n\t * the possible list of 'steps' and their dependencies\n\t * @param string $sStep Name of the class to start from (used for recursion)\n\t * @param hash $aAllSteps List of steps (used for recursion)\n\t */\n\tpublic function DumpStructure($sStep = '', $aAllSteps = null)\n\t{\n\t\tif ($aAllSteps == null) $aAllSteps = array();\n\t\tif ($sStep == '') $sStep = $this->sInitialStepClass;\n\t\t\n\t\t$oStep = new $sStep($this, '');\n\t\t$aAllSteps[$sStep] = $oStep->GetPossibleSteps();\n\t\tforeach($aAllSteps[$sStep] as $sNextStep)\n\t\t{\n\t\t\tif (!array_key_exists($sNextStep, $aAllSteps))\n\t\t\t{\n\t\t\t\t$aAllSteps = $this->DumpStructure($sNextStep , $aAllSteps);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $aAllSteps;\n\t}\n\t\n\t/**\n\t * Dump the wizard's structure as a string suitable to produce a chart\n\t * using graphviz's \"dot\" program\n\t * @return string The 'dot' formatted output\n\t */\n\tpublic function DumpStructureAsDot()\n\t{\n\t\t$aAllSteps = $this->DumpStructure();\n\t\t$sOutput = \"digraph finite_state_machine {\\n\";\n\t\t//$sOutput .= \"\\trankdir=LR;\";\n\t\t$sOutput .= \"\\tsize=\\\"10,12\\\"\\n\";\n\t\t\n\t\t$aDeadEnds = array($this->sInitialStepClass);\n\t\tforeach($aAllSteps as $sStep => $aNextSteps)\n\t\t{\n\t\t\tif (count($aNextSteps) == 0)\n\t\t\t{\n\t\t\t\t$aDeadEnds[] = $sStep;\n\t\t\t}\n\t\t}\n\t\t$sOutput .= \"\\tnode [shape = doublecircle]; \".implode(' ', $aDeadEnds).\";\\n\";\n\t\t$sOutput .= \"\\tnode [shape = box];\\n\";\n\t\tforeach($aAllSteps as $sStep => $aNextSteps)\n\t\t{\n\t\t\t$oStep = new $sStep($this, '');\n\t\t\t$sOutput .= \"\\t$sStep [ label = \\\"\".$oStep->GetTitle().\"\\\"];\\n\";\n\t\t\tif (count($aNextSteps) > 0)\n\t\t\t{\n\t\t\t\tforeach($aNextSteps as $sNextStep)\n\t\t\t\t{\n\t\t\t\t\t$sOutput .= \"\\t$sStep -> $sNextStep;\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$sOutput .= \"}\\n\";\n\t\treturn $sOutput;\n\t}\n}\n\n/**\n * Abstract class to build \"steps\" for the wizard controller\n * If a step needs to maintain an internal \"state\" (for complex steps)\n * then it's up to the derived class to implement the behavior based on\n * the internal 'sCurrentState' variable.\n * @copyright   Copyright (C) 2010-2012 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nabstract class WizardStep\n{\n\t/**\n\t * A reference to the WizardController\n\t * @var WizardController\n\t */\n\tprotected $oWizard;\n\t/**\n\t * Current 'state' of the wizard step. Simple 'steps' can ignore it\n\t * @var string\n\t */\n\tprotected $sCurrentState;\n\t\n\tpublic function __construct(WizardController $oWizard, $sCurrentState)\n\t{\n\t\t$this->oWizard = $oWizard;\n\t\t$this->sCurrentState = $sCurrentState;\n\t}\n\t\n\tpublic function GetState()\n\t{\n\t\treturn $this->sCurrentState;\n\t}\n\t\n\t/**\n\t * Displays the wizard page for the current class/state\n\t * The page can contain any number of \"<input/>\" fields, but no \"<form>...</form>\" tag\n\t * The name of the input fields (and their id if one is supplied) MUST NOT start with \"_\"\n\t * (this is reserved for the wizard's own parameters)\n\t * @return void\n\t */\n\tabstract public function Display(WebPage $oPage);\n\n\t/**\n\t * Processes the page's parameters and (if moving forward) returns the next step/state to be displayed\n\t * @param bool $bMoveForward True if the wizard is moving forward 'Next >>' button pressed, false otherwise\n\t * @return hash array('class' => $sNextClass, 'state' => $sNextState)\n\t */\n\tabstract public function ProcessParams($bMoveForward = true);\n\n\t/**\n\t * Returns the list of possible steps from this step forward\n\t * @return array Array of strings (step classes)\n\t */\n\tabstract public function GetPossibleSteps();\n\n\t/**\n\t * Returns title of the current step\n\t * @return string The title of the wizard page for the current step\n\t */\n\tabstract public function GetTitle();\n\t\n\t/**\n\t * Tells whether the parameters are Ok to move forward\n\t * @return boolean True to move forward, false to stey on the same step\n\t */\n\tpublic function ValidateParams()\n\t{\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Tells whether this step/state is the last one of the wizard (dead-end)\n\t * @return boolean True if the 'Next >>' button should be displayed\n\t */\n\tpublic function CanMoveForward()\n\t{\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn 'return true;';\n\t}\n\t\n\t/**\n\t * Returns the label for the \" Next >> \" button\n\t * @return string The label for the button\n\t */\n\tpublic function GetNextButtonLabel()\n\t{\n\t\treturn ' Next >> ';\n\t}\n\t\n\t/**\n\t * Tells whether this step/state allows to go back or not\n\t * @return boolean True if the '<< Back' button should be displayed\n\t */\n\tpublic function CanMoveBackward()\n\t{\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Tells whether the \"Back\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveBackward()\n\t{\n\t\treturn 'return true;';\n\t}\n\n\t/**\n\t * Tells whether this step of the wizard requires that the configuration file be writable\n\t * @return bool True if the wizard will possibly need to modify the configuration at some point\n\t */\n\tpublic function RequiresWritableConfig()\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * Overload this function to implement asynchronous action(s) (AJAX)\n\t * @param string $sCode The code of the action (if several actions need to be distinguished)\n\t * @param hash $aParameters The action's parameters name => value\n\t */\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t}\n}\n\n/*\n * Example of a simple Setup Wizard with some parameters to store\n * the installation mode (install | upgrade) and a simple asynchronous\n * (AJAX) action.\n * \n * The setup wizard is executed by the following code:\n * \n * $oWizard = new WizardController('Step1');\n * $oWizard->Run();\n *\nclass Step1 extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Welcome';\n\t}\n\t\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('Step2', 'Step2bis');\n\t}\n\t\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$sNextStep = '';\n\t\t$sInstallMode = utils::ReadParam('install_mode');\n\t\tif ($sInstallMode == 'install')\n\t\t{\n\t\t\t$this->oWizard->SetParameter('install_mode', 'install');\n\t\t\t$sNextStep = 'Step2';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->oWizard->SetParameter('install_mode', 'upgrade');\n\t\t\t$sNextStep = 'Step2bis';\n\t\t\t\n\t\t}\n\t\treturn array('class' => $sNextStep, 'state' => '');\n\t}\n\t\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->p('This is Step 1!');\n\t\t$sInstallMode = $this->oWizard->GetParameter('install_mode', 'install');\n\t\t$sChecked = ($sInstallMode == 'install') ? ' checked ' : '';\n\t\t$oPage->p('<input type=\"radio\" name=\"install_mode\" value=\"install\"'.$sChecked.'/> Install');\n\t\t$sChecked = ($sInstallMode == 'upgrade') ? ' checked ' : '';\n\t\t$oPage->p('<input type=\"radio\" name=\"install_mode\" value=\"upgrade\"'.$sChecked.'/> Upgrade');\n\t}\n}\n\nclass Step2 extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Installation Parameters';\n\t}\n\t\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('Step3');\n\t}\n\t\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => 'Step3', 'state' => '');\n\t}\n\t\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->p('This is Step 2! (Installation)');\n\t}\n}\n\nclass Step2bis extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Upgrade Parameters';\n\t}\n\t\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('Step2ter');\n\t}\n\t\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$sUpgradeInfo = utils::ReadParam('upgrade_info');\n\t\t$this->oWizard->SetParameter('upgrade_info', $sUpgradeInfo);\n\t\t$sAdditionalUpgradeInfo = utils::ReadParam('additional_upgrade_info');\n\t\t$this->oWizard->SetParameter('additional_upgrade_info', $sAdditionalUpgradeInfo);\n\t\treturn array('class' => 'Step2ter', 'state' => '');\n\t}\n\t\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->p('This is Step 2bis! (Upgrade)');\n\t\t$sUpgradeInfo = $this->oWizard->GetParameter('upgrade_info', '');\n\t\t$oPage->p('Type your name here: <input type=\"text\" id=\"upgrade_info\" name=\"upgrade_info\" value=\"'.$sUpgradeInfo.'\" size=\"20\"/><span id=\"v_upgrade_info\"></span>');\n\t\t$sAdditionalUpgradeInfo = $this->oWizard->GetParameter('additional_upgrade_info', '');\n\t\t$oPage->p('The installer replies: <input type=\"text\" name=\"additional_upgrade_info\" value=\"'.$sAdditionalUpgradeInfo.'\" size=\"20\"/>');\n\t\t\n\t\t$oPage->add_ready_script(\"$('#upgrade_info').change(function() {\n\t\t\t$('#v_upgrade_info').html('<img src=\\\"../images/indicator.gif\\\"/>');\n\t\t\tWizardAsyncAction('', { upgrade_info: $('#upgrade_info').val() }); });\");\n\t}\n\t\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\tusleep(300000); // 300 ms\n\t\t$sName = $aParameters['upgrade_info'];\n\t\t$sReply = addslashes(\"Hello \".$sName);\n\t\t\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#v_upgrade_info\").html('');\n\t$(\"input[name=additional_upgrade_info]\").val(\"$sReply\");\nEOF\n\t\t);\n\t}\n}\n\nclass Step2ter extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Additional Upgrade Info';\n\t}\n\t\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('Step3');\n\t}\n\t\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => 'Step3', 'state' => '');\n\t}\n\t\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->p('This is Step 2ter! (Upgrade)');\n\t}\n}\n\nclass Step3 extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Installation Complete';\n\t}\n\t\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array();\n\t}\n\t\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => '', 'state' => '');\n\t}\n\t\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->p('This is the FINAL Step');\n\t}\n\t\n\tpublic function CanMoveForward()\n\t{\n\t\treturn  false;\n\t}\n}\n\nEnd of the example */", "<?php\n// Copyright (C) 2010-2017 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n/**\n * All the steps of the iTop installation wizard\n * @copyright   Copyright (C) 2010-2017 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nrequire_once(APPROOT.'setup/setuputils.class.inc.php');\nrequire_once(APPROOT.'setup/parameters.class.inc.php');\nrequire_once(APPROOT.'setup/applicationinstaller.class.inc.php');\nrequire_once(APPROOT.'setup/parameters.class.inc.php');\nrequire_once(APPROOT.'core/mutex.class.inc.php');\nrequire_once(APPROOT.'setup/extensionsmap.class.inc.php');\n\n/**\n * First step of the iTop Installation Wizard: Welcome screen\n */\nclass WizStepWelcome extends WizardStep\n{\n\tprotected $bCanMoveForward;\n\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Welcome to '.ITOP_APPLICATION.' version '.ITOP_VERSION;\n\t}\n\n\t/**\n\t * Returns the label for the \" Next >> \" button\n\t * @return string The label for the button\n\t */\n\tpublic function GetNextButtonLabel()\n\t{\n\t\treturn ' Continue >> ';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepInstallOrUpgrade');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$sUID = SetupUtils::CreateSetupToken();\n\t\t$this->oWizard->SetParameter('authent', $sUID);\n\t\treturn array('class' => 'WizStepInstallOrUpgrade', 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t// Store the misc_options for the future...\n\t\t$aMiscOptions = utils::ReadParam('option', array(), false, 'raw_data');\n\t\t$sMiscOptions = $this->oWizard->GetParameter('misc_options', json_encode($aMiscOptions));\n\t\t$this->oWizard->SetParameter('misc_options', $sMiscOptions);\n\n\t\t$oPage->add(\"<!--[if lt IE 8]><div id=\\\"old_ie\\\"></div><![endif]-->\");\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t\tif ($('#old_ie').length > 0)\n\t\t{\n\t\t\talert(\"Internet Explorer version 7 or older is NOT supported! (Check that IE is not running in compatibility mode)\");\n\t\t}\nEOF\n\t\t);\n\t\t$oPage->add('<h1>'.ITOP_APPLICATION.' Installation Wizard</h1>');\n\t\t$aResults = SetupUtils::CheckPhpAndExtensions();\n\t\t$this->bCanMoveForward = true;\n\t\t$aInfo = array();\n\t\t$aWarnings = array();\n\t\t$aErrors = array();\n\t\tforeach($aResults as $oCheckResult)\n\t\t{\n\t\t\tswitch($oCheckResult->iSeverity)\n\t\t\t{\n\t\t\t\tcase CheckResult::ERROR:\n\t\t\t\t$aErrors[] = $oCheckResult->sLabel;\n\t\t\t\t$this->bCanMoveForward = false;\n\t\t\t\tbreak;\n\n\t\t\t\tcase CheckResult::WARNING:\n\t\t\t\t$aWarnings[] = $oCheckResult->sLabel;\n\t\t\t\tbreak;\n\n\t\t\t\tcase CheckResult::INFO:\n\t\t\t\t$aInfo[] = $oCheckResult->sLabel;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$sStyle = 'style=\"display:none;max-height:196px;overflow:auto;\"';\n\t\t$sToggleButtons = '<button type=\"button\" id=\"show_details\" onclick=\"$(\\'#details\\').toggle(); $(this).toggle(); $(\\'#hide_details\\').toggle();\">Show details</button><button type=\"button\" id=\"hide_details\" style=\"display:none;\" onclick=\"$(\\'#details\\').toggle(); $(this).toggle(); $(\\'#show_details\\').toggle();\">Hide details</button>';\n\t\tif (count($aErrors)> 0)\n\t\t{\n\t\t\t$sStyle = 'style=\"max-height:196px;overflow:auto;\"';\n\t\t\t$sImage = \"stop-mid.png\";\n\t\t\t$sTitle = count($aErrors).' Error(s), '.count($aWarnings).' Warning(s).';\n\t\t}\n\t\telse if (count($aWarnings)> 0)\n\t\t{\n\t\t\t$sTitle = count($aWarnings).' Warning(s) '.$sToggleButtons;\n\t\t\t$sImage = \"messagebox_warning-mid.png\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sTitle = 'Ok. '.$sToggleButtons;\n\t\t\t$sImage = \"clean-mid.png\";\n\t\t}\n\t\t$oPage->add('<h2>Prerequisites validation: ');\n\t\t$oPage->add(\"<img style=\\\"vertical-align:middle;\\\" src=\\\"../images/$sImage\\\"> \");\n\t\t$oPage->add($sTitle);\n\t\t$oPage->add('</h2>');\n\t\t$oPage->add('<div id=\"details\" '.$sStyle.'>');\n\t\tforeach($aErrors as $sText)\n\t\t{\n\t\t\t$oPage->error($sText);\n\t\t}\n\t\tforeach($aWarnings as $sText)\n\t\t{\n\t\t\t$oPage->warning($sText);\n\t\t}\n\t\tforeach($aInfo as $sText)\n\t\t{\n\t\t\t$oPage->ok($sText);\n\t\t}\n\t\t$oPage->add('</div>');\n\t\tif (!$this->bCanMoveForward)\n\t\t{\n\t\t\t$oPage->p('Sorry, the installation cannot continue. Please fix the errors and reload this page to launch the installation again.');\n\t\t\t$oPage->p('<button type=\"button\" onclick=\"window.location.reload()\">Reload</button>');\n\t\t}\n\t}\n\n\tpublic function CanMoveForward()\n\t{\n\t\treturn $this->bCanMoveForward;\n\t}\n}\n\n/**\n * Second step of the iTop Installation Wizard: Install or Upgrade\n */\nclass WizStepInstallOrUpgrade extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Install or Upgrade choice';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepDetectedInfo', 'WizStepLicense');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$sNextStep = '';\n\t\t$sInstallMode = utils::ReadParam('install_mode');\n\n\t\t$this->oWizard->SaveParameter('previous_version_dir', '');\n\t\t$this->oWizard->SaveParameter('db_server', '');\n\t\t$this->oWizard->SaveParameter('db_user', '');\n\t\t$this->oWizard->SaveParameter('db_pwd', '');\n\t\t$this->oWizard->SaveParameter('db_name', '');\n\t\t$this->oWizard->SaveParameter('db_prefix', '');\n\t\t$this->oWizard->SaveParameter('db_backup', false);\n\t\t$this->oWizard->SaveParameter('db_backup_path', '');\n\t\t$this->oWizard->SaveParameter('db_tls_enabled', false);\n\t\t$this->oWizard->SaveParameter('db_tls_ca', '');\n\n\t\tif ($sInstallMode == 'install')\n\t\t{\n\t\t\t$this->oWizard->SetParameter('install_mode', 'install');\n\t\t\t$sFullSourceDir = SetupUtils::GetLatestDataModelDir();\n\t\t\t$this->oWizard->SetParameter('source_dir', $sFullSourceDir);\n\t\t\t$this->oWizard->SetParameter('datamodel_version', SetupUtils::GetDataModelVersion($sFullSourceDir));\n\t\t\t$sNextStep = 'WizStepLicense';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->oWizard->SetParameter('install_mode', 'upgrade');\n\t\t\t$sNextStep = 'WizStepDetectedInfo';\n\n\t\t}\n\t\treturn array('class' => $sNextStep, 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$sInstallMode = $this->oWizard->GetParameter('install_mode', '');\n\t\t$sDBServer = $this->oWizard->GetParameter('db_server', '');\n\t\t$sDBUser = $this->oWizard->GetParameter('db_user', '');\n\t\t$sDBPwd = $this->oWizard->GetParameter('db_pwd', '');\n\t\t$sDBName = $this->oWizard->GetParameter('db_name', '');\n\t\t$sDBPrefix = $this->oWizard->GetParameter('db_prefix', '');\n\t\t$bDBBackup = $this->oWizard->GetParameter('db_backup', false);\n\t\t$sDBBackupPath = $this->oWizard->GetParameter('db_backup_path', '');\n\t\t$sTlsEnabled = $this->oWizard->GetParameter('db_tls_enabled', false);\n\t\t$sTlsCA = $this->oWizard->GetParameter('db_tls_ca', '');\n\t\t$sMySQLBinDir = $this->oWizard->GetParameter('mysql_bindir', null);\n\t\t$sPreviousVersionDir = '';\n\t\tif ($sInstallMode == '')\n\t\t{\n\t\t\t$sDBBackupPath = APPROOT.'data/'.ITOP_APPLICATION.strftime('-backup-%Y-%m-%d');\n\t\t\t$bDBBackup = true;\n\t\t\t$aPreviousInstance = SetupUtils::GetPreviousInstance(APPROOT);\n\t\t\tif ($aPreviousInstance['found'])\n\t\t\t{\n\t\t\t\t$sInstallMode = 'upgrade';\n\t\t\t\t$sDBServer = $aPreviousInstance['db_server'];\n\t\t\t\t$sDBUser = $aPreviousInstance['db_user'];\n\t\t\t\t$sDBPwd = $aPreviousInstance['db_pwd'];\n\t\t\t\t$sDBName = $aPreviousInstance['db_name'];\n\t\t\t\t$sDBPrefix = $aPreviousInstance['db_prefix'];\n\t\t\t\t$sTlsEnabled = $aPreviousInstance['db_tls_enabled'];\n\t\t\t\t$sTlsCA = $aPreviousInstance['db_tls_ca'];\n\t\t\t\t$this->oWizard->SaveParameter('graphviz_path', $aPreviousInstance['graphviz_path']);\n\t\t\t\t$sMySQLBinDir = $aPreviousInstance['mysql_bindir'];\n\t\t\t\t$this->oWizard->SaveParameter('mysql_bindir', $aPreviousInstance['mysql_bindir']);\n\t\t\t\t$sPreviousVersionDir = APPROOT;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sInstallMode = 'install';\n\t\t\t}\n\t\t}\n\t\t$sPreviousVersionDir = $this->oWizard->GetParameter('previous_version_dir', $sPreviousVersionDir);\n\n\t\t$sUpgradeInfoStyle = '';\n\t\tif ($sInstallMode == 'install')\n\t\t{\n\t\t\t$sUpgradeInfoStyle = ' style=\"display: none;\" ';\n\t\t}\n\t\t$oPage->add('<h2>What do you want to do?</h2>');\n\t\t$sChecked = ($sInstallMode == 'install') ? ' checked ' : '';\n        $oPage->p('<input id=\"radio_install\" type=\"radio\" name=\"install_mode\" value=\"install\" '.$sChecked.'/><label for=\"radio_install\">&nbsp;Install a new '.ITOP_APPLICATION.'</label>');\n\t\t$sChecked = ($sInstallMode == 'upgrade') ? ' checked ' : '';\n        $oPage->p('<input id=\"radio_update\" type=\"radio\" name=\"install_mode\" value=\"upgrade\" '.$sChecked.'/><label for=\"radio_update\">&nbsp;Upgrade an existing '.ITOP_APPLICATION.' instance</label>');\n\t\t//$oPage->add('<fieldset  id=\"upgrade_info\"'.$sUpgradeInfoStyle.'>');\n\t\t//$oPage->add('<legend>Information about the previous instance:</legend>');\n\t\t$oPage->add('<table id=\"upgrade_info\"'.$sUpgradeInfoStyle.'>');\n\t\t$oPage->add('<tr><td>Location on the disk:</td><td><input id=\"previous_version_dir\" type=\"text\" name=\"previous_version_dir\" value=\"'.htmlentities($sPreviousVersionDir,\n\t\t\t\tENT_QUOTES, 'UTF-8').'\" style=\"width: 98%;\"/></td></tr>');\n\t\tSetupUtils::DisplayDBParameters($oPage, false, $sDBServer, $sDBUser, $sDBPwd, $sDBName, $sDBPrefix,\n\t\t\t$sTlsEnabled, $sTlsCA, null);\n\n\t\t$aBackupChecks = SetupUtils::CheckBackupPrerequisites($sDBBackupPath, $sMySQLBinDir);\n\t\t$bCanBackup = true;\n\t\t$sMySQLDumpMessage = '';\n\t\tforeach($aBackupChecks as $oCheck)\n\t\t{\n\t\t\tif ($oCheck->iSeverity == CheckResult::ERROR)\n\t\t\t{\n\t\t\t\t$bCanBackup = false;\n\t\t\t\t$sMySQLDumpMessage .= '<img src=\"../images/error.png\"/>&nbsp;<b> Warning:</b> '.$oCheck->sLabel;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sMySQLDumpMessage .= '<img src=\"../images/validation_ok.png\"/> '.$oCheck->sLabel.' ';\n\t\t\t}\n\t\t}\n\t\t$sChecked = ($bCanBackup && $bDBBackup) ? ' checked ' : '';\n\t\t$sDisabled = $bCanBackup ? '' : ' disabled ';\n        $oPage->add('<tr><td colspan=\"2\"><input id=\"db_backup\" type=\"checkbox\" name=\"db_backup\" '.$sChecked.$sDisabled.' value=\"1\"/><label for=\"db_backup\">&nbsp;Backup the '.ITOP_APPLICATION.' database before upgrading</label></td></tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\">Save the backup to: <input id=\"db_backup_path\" type=\"text\" name=\"db_backup_path\" '.$sDisabled.'value=\"'.htmlentities($sDBBackupPath, ENT_QUOTES, 'UTF-8').'\" size=\"25\"/></td></tr>');\n\t\t$fFreeSpace = SetupUtils::CheckDiskSpace($sDBBackupPath);\n\t\t$sMessage = '';\n\t\tif ($fFreeSpace !== false)\n\t\t{\n\t\t\t$sMessage .= SetupUtils::HumanReadableSize($fFreeSpace).' free in '.dirname($sDBBackupPath);\n\t\t}\n\t\t$oPage->add('<tr><td colspan=\"2\">');\n\t\t$oPage->add($sMySQLDumpMessage.'<br/><span id=\"backup_info\" style=\"font-size:small;color:#696969;\">'.$sMessage.'</span></td></tr>');\n\t\t$oPage->add('</table>');\n\t\t$sAuthentToken = $this->oWizard->GetParameter('authent', '');\n\t\t$oPage->add('<input type=\"hidden\" id=\"authent_token\" value=\"'.$sAuthentToken.'\"/>');\n\t\t//$oPage->add('</fieldset>');\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#radio_update\").bind('change', function() { if (this.checked ) { $('#upgrade_info').show(); WizardUpdateButtons(); } else { $('#upgrade_info').hide(); } });\n\t$(\"#radio_install\").bind('change', function() { if (this.checked ) { $('#upgrade_info').hide(); WizardUpdateButtons(); } else { $('#upgrade_info').show(); } });\n\t$(\"#previous_version_dir\").bind('change keyup', function() { WizardAsyncAction('check_path', { previous_version_dir: $('#previous_version_dir').val() }); });\n\t$(\"#db_backup_path\").bind('change keyup', function() { WizardAsyncAction('check_backup', { db_backup_path: $('#db_backup_path').val() }); });\nEOF\n\t\t);\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\tswitch($sCode)\n\t\t{\n\t\t\tcase 'check_path':\n\t\t\t$sPreviousVersionDir = $aParameters['previous_version_dir'];\n\t\t\t$aPreviousInstance = SetupUtils::GetPreviousInstance($sPreviousVersionDir);\n\t\t\tif ($aPreviousInstance['found'])\n\t\t\t{\n\t\t\t\t$sDBServer = htmlentities($aPreviousInstance['db_server'], ENT_QUOTES, 'UTF-8');\n\t\t\t\t$sDBUser = htmlentities($aPreviousInstance['db_user'], ENT_QUOTES, 'UTF-8');\n\t\t\t\t$sDBPwd = htmlentities($aPreviousInstance['db_pwd'], ENT_QUOTES, 'UTF-8');\n\t\t\t\t$sDBName = htmlentities($aPreviousInstance['db_name'], ENT_QUOTES, 'UTF-8');\n\t\t\t\t$sDBPrefix = htmlentities($aPreviousInstance['db_prefix'], ENT_QUOTES, 'UTF-8');\n\t\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#db_server\").val('$sDBServer');\n\t$(\"#db_user\").val('$sDBUser');\n\t$(\"#db_pwd\").val('$sDBPwd');\n\t$(\"#db_name\").val('$sDBName');\n\t$(\"#db_prefix\").val('$sDBPrefix');\n\t$(\"#db_pwd\").trigger('change'); // Forces check of the DB connection\nEOF\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase 'check_db':\n\t\t\tSetupUtils:: AsyncCheckDB($oPage, $aParameters);\n\t\t\tbreak;\n\n\t\t\tcase 'check_backup':\n\t\t\t$sDBBackupPath = $aParameters['db_backup_path'];\n\t\t\t$fFreeSpace = SetupUtils::CheckDiskSpace($sDBBackupPath);\n\t\t\tif ($fFreeSpace !== false)\n\t\t\t{\n\t\t\t\t$sMessage = htmlentities(SetupUtils::HumanReadableSize($fFreeSpace).' free in '.dirname($sDBBackupPath), ENT_QUOTES, 'UTF-8');\n\t\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#backup_info\").html('$sMessage');\nEOF\n\t\t\t\t);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#backup_info\").html('');\nEOF\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\t\tif ($(\"#radio_install\").prop(\"checked\"))\n\t\t{\n\t\t\tValidateField(\"db_name\", false);\n\t\t\tValidateField(\"db_new_name\", false);\n\t\t\tValidateField(\"db_prefix\", false);\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar bRet = ($(\"#wiz_form\").data(\"db_connection\") !== \"error\");\n\t\t\tbRet = ValidateField(\"db_name\", true) && bRet;\n\t\t\tbRet = ValidateField(\"db_new_name\", true) && bRet;\n\t\t\tbRet = ValidateField(\"db_prefix\", true) && bRet;\n\t\n\t\t\treturn bRet;\n\t\t}\nEOF\n\t\t;\n\t}\n\n}\n\n/**\n * Upgrade information\n */\nclass WizStepDetectedInfo extends WizardStep\n{\n\tprotected $bCanMoveForward;\n\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Upgrade Information';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepUpgradeMiscParams', 'WizStepLicense2');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$sUpgradeType = utils::ReadParam('upgrade_type');\n\n\t\t$this->oWizard->SetParameter('mode', 'upgrade');\n\t\t$this->oWizard->SetParameter('upgrade_type', $sUpgradeType);\n\t\t$this->oWizard->SaveParameter('copy_extensions_from', '');\n\t\t$bDisplayLicense = $this->oWizard->GetParameter('display_license');\n\n\t\tswitch ($sUpgradeType)\n\t\t{\n\t\t\tcase 'keep-previous':\n\t\t\t$sSourceDir = utils::ReadParam('relative_source_dir', '', false, 'raw_data');\n\t\t\t$this->oWizard->SetParameter('source_dir', $this->oWizard->GetParameter('previous_version_dir').'/'.$sSourceDir);\n\t\t\t$this->oWizard->SetParameter('datamodel_version', utils::ReadParam('datamodel_previous_version', '', false, 'raw_data'));\n\t\t\tbreak;\n\n\t\t\tcase 'use-compatible':\n\t\t\t$sDataModelPath = utils::ReadParam('datamodel_path', '', false, 'raw_data');\n\t\t\t$this->oWizard->SetParameter('source_dir', $sDataModelPath);\n\t\t\t$this->oWizard->SaveParameter('datamodel_version', '');\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t// Do nothing, maybe the user pressed the Back button\n\t\t}\n\t\tif ($bDisplayLicense)\n\t\t{\n\t\t\t$aRet = array('class' => 'WizStepLicense2', 'state' => '');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aRet = array('class' => 'WizStepUpgradeMiscParams', 'state' => '');\n\t\t}\n\t\treturn $aRet;\n\t}\n\n\t/**\n\t * @param \\WebPage $oPage\n\t *\n\t * @throws \\Exception\n\t */\n\tpublic function Display(\\WebPage $oPage)\n\t{\n\t\t$oPage->add_style(\n<<<EOF\n#changes_summary {\n\tmax-height: 200px;\n\toverflow: auto;\n}\n#changes_summary div {\n\twidth:100;\n\tmargin-top:0;\n\tpadding-top: 0.5em;\n\tpadding-left: 0;\n}\n#changes_summary div ul {\n\tmargin-left:0;\n\tpadding-left: 20px;\n}\n#changes_summary div.closed ul {\n\tdisplay:none;\n}\n#changes_summary div li {\n\tlist-style: none;\n\twidth: 100;\n\tmargin-left:0;\n\tpadding-left: 0em;\n}\n.title {\n\tpadding-left: 20px;\n\tfont-weight: bold;\n\tcursor: pointer;\n\tbackground: url(../images/minus.gif) 2px 2px no-repeat;\n}\n#changes_summary div.closed .title {\n\tbackground: url(../images/plus.gif) 2px 2px no-repeat;\n}\nEOF\n\t\t);\n\t\t$this->bCanMoveForward = true;\n\t\t$bDisplayLicense = true;\n\t\t$sPreviousVersionDir = $this->oWizard->GetParameter('previous_version_dir', '');\n\t\t$aInstalledInfo = SetupUtils::GetApplicationVersion($this->oWizard);\n\n\t\tif ($aInstalledInfo === false)\n\t\t{\n\t\t\tthrow(new Exception('No previous version of '.ITOP_APPLICATION.' found in the supplied database. The upgrade cannot continue.'));\n\t\t}\n\t\telse if (strcasecmp($aInstalledInfo['product_name'], ITOP_APPLICATION) != 0)\n\t\t{\n\t\t\t$oPage->p(\"<b>Warning: The installed products seem different. Are you sure the you want to upgrade {$aInstalledInfo['product_name']} with \".ITOP_APPLICATION.\"?</b>\");\n\t\t}\n\n\t\t$sInstalledVersion = $aInstalledInfo['product_version'];\n\t\t$sInstalledDataModelVersion = $aInstalledInfo['datamodel_version'];\n\n\t\t$oPage->add(\"<h2>Information about the upgrade from version $sInstalledVersion to \".ITOP_VERSION.'.'.ITOP_REVISION.\"</h2>\");\n\n\t\tif ($sInstalledVersion == (ITOP_VERSION.'.'.ITOP_REVISION))\n\t\t{\n\t\t\t// Reinstalling the same version let's skip the license agreement...\n\t\t\t$bDisplayLicense = false;\n\t\t}\n\t\t$this->oWizard->SetParameter('license', $bDisplayLicense); // Remember for later\n\n\t\tif ($sInstalledDataModelVersion == '$ITOP_VERSION$.$WCREV$')\n\t\t{\n\t\t\t// Special case for upgrading some  development versions (temporary)\n\t\t\t$sCompatibleDMDir = SetupUtils::GetLatestDataModelDir();\n\t\t\t$sInstalledDataModelVersion = SetupUtils::GetDataModelVersion($sCompatibleDMDir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sCompatibleDMDir = SetupUtils::GetCompatibleDataModelDir($sInstalledDataModelVersion);\n\t\t}\n\n\t\tif ($sCompatibleDMDir === false)\n\t\t{\n\t\t\t// No compatible version exists... cannot upgrade. Either it is too old, or too new (downgrade !)\n\t\t\t$this->bCanMoveForward = false;\n\t\t\t$oPage->p(\"The current version of \".ITOP_APPLICATION.\" (\".ITOP_VERSION.'.'.ITOP_REVISION.\") does not seem to be compatible with the installed version ($sInstalledVersion).\");\n\t\t\t$oPage->p(\"The upgrade cannot continue, sorry.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sUpgradeDMVersion = SetupUtils::GetDataModelVersion($sCompatibleDMDir);\n\t\t\t$sPreviousSourceDir = isset($aInstalledInfo['source_dir']) ? $aInstalledInfo['source_dir'] : 'modules';\n\t\t\t$aChanges = false;\n\t\t\tif (is_dir($sPreviousVersionDir))\n\t\t\t{\n\t\t\t\t// Check if the previous version is a \"genuine\" one or not...\n\t\t\t\t$aChanges = SetupUtils::CheckVersion($sInstalledDataModelVersion, $sPreviousVersionDir.'/'.$sPreviousSourceDir);\n\t\t\t}\n\t\t\tif (($aChanges !== false) && ( (count($aChanges['added']) > 0) || (count($aChanges['removed']) > 0) || (count($aChanges['modified']) > 0)) )\n\t\t\t{\n\t\t\t\t// Some changes were detected, prompt the user to keep or discard them\n\t\t\t\t$oPage->p(\"<img src=\\\"../images/error.png\\\"/>&nbsp;Some modifications were detected between the \".ITOP_APPLICATION.\" version in '$sPreviousVersionDir' and a genuine $sInstalledVersion version.\");\n\t\t\t\t$oPage->p(\"What do you want to do?\");\n\n\t\t\t\t$aWritableDirs = array('modules', 'portal');\n\t\t\t\t$aErrors = SetupUtils::CheckWritableDirs($aWritableDirs);\n\t\t\t\t$sChecked = ($this->oWizard->GetParameter('upgrade_type') == 'keep-previous') ? ' checked ' : '';\n\t\t\t\t$sDisabled = (count($aErrors) > 0) ? ' disabled ' : '';\n\n                $oPage->p('<input id=\"radio_upgrade_keep\" type=\"radio\" name=\"upgrade_type\" value=\"keep-previous\" '.$sChecked.$sDisabled.'/><label for=\"radio_upgrade_keep\">&nbsp;Preserve the modifications of the installed version (the dasboards inside '.ITOP_APPLICATION.' may not be editable).</label>');\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"datamodel_previous_version\" value=\"'.htmlentities($sInstalledDataModelVersion, ENT_QUOTES, 'UTF-8').'\">');\n\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"relative_source_dir\" value=\"'.htmlentities($sPreviousSourceDir, ENT_QUOTES, 'UTF-8').'\">');\n\n\t\t\t\tif (count($aErrors) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->p(\"Cannot copy the installed version due to the following access rights issue(s):\");\n\t\t\t\t\tforeach($aErrors as $sDir => $oCheckResult)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->p('<img src=\"../images/error.png\"/>&nbsp;'.$oCheckResult->sLabel);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$sChecked = ($this->oWizard->GetParameter('upgrade_type') == 'use-compatible') ? ' checked ' : '';\n\n                $oPage->p('<input id=\"radio_upgrade_convert\" type=\"radio\" name=\"upgrade_type\" value=\"use-compatible\" '.$sChecked.'/><label for=\"radio_upgrade_convert\">&nbsp;Discard the modifications, use a standard '.$sUpgradeDMVersion.' data model.</label>');\n\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"datamodel_path\" value=\"'.htmlentities($sCompatibleDMDir, ENT_QUOTES, 'UTF-8').'\">');\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"datamodel_version\" value=\"'.htmlentities($sUpgradeDMVersion, ENT_QUOTES, 'UTF-8').'\">');\n\n\t\t\t\t$oPage->add('<div id=\"changes_summary\"><div class=\"closed\"><span class=\"title\">Details of the modifications</span><div>');\n\t\t\t\tif (count($aChanges['added']) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add('<ul>New files added:');\n\t\t\t\t\tforeach($aChanges['added'] as $sFilePath => $void)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add('<li>'.$sFilePath.'</li>');\n\t\t\t\t\t}\n\t\t\t\t\t$oPage->add('</ul>');\n\t\t\t\t}\n\t\t\t\tif (count($aChanges['removed']) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add('<ul>Deleted files:');\n\t\t\t\t\tforeach($aChanges['removed'] as $sFilePath => $void)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add('<li>'.$sFilePath.'</li>');\n\t\t\t\t\t}\n\t\t\t\t\t$oPage->add('</ul>');\n\t\t\t\t}\n\t\t\t\tif (count($aChanges['modified']) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add('<ul>Modified files:');\n\t\t\t\t\tforeach($aChanges['modified'] as $sFilePath => $void)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add('<li>'.$sFilePath.'</li>');\n\t\t\t\t\t}\n\t\t\t\t\t$oPage->add('</ul>');\n\t\t\t\t}\n\t\t\t\t$oPage->add('</div></div></div>');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// No changes detected... or no way to tell because of the lack of a manifest or previous source dir\n\t\t\t\t// Use the \"compatible\" datamodel as-is.\n\t\t\t\t$oPage->p(\"<img src=\\\"../images/validation_ok.png\\\"/>&nbsp;The datamodel will be upgraded from version $sInstalledDataModelVersion to version $sUpgradeDMVersion.\");\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"upgrade_type\" value=\"use-compatible\">');\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"datamodel_path\" value=\"'.htmlentities($sCompatibleDMDir, ENT_QUOTES, 'UTF-8').'\">');\n\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"datamodel_version\" value=\"'.htmlentities($sUpgradeDMVersion, ENT_QUOTES, 'UTF-8').'\">');\n\t\t\t}\n\n\t\t\t// Check if there are \"extensions\" to preserve and if it's possible\n\t\t\tif (is_dir($sPreviousVersionDir.'/extensions'))\n\t\t\t{\n\t\t\t\t$aExtensions = glob($sPreviousVersionDir.'/extensions/*', GLOB_ONLYDIR);\n\t\t\t\tif (($aExtensions !== false) && (count($aExtensions)>0) && (realpath($sPreviousVersionDir.'/extensions') != realpath(APPROOT.'extensions')) )\n\t\t\t\t{\n\t\t\t\t\t$aWritableDirs = array('extensions');\n\t\t\t\t\t$aErrors = SetupUtils::CheckWritableDirs($aWritableDirs);\n\t\t\t\t\tif (count($aErrors) > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->p(\"Cannot copy the extensions from '$sPreviousVersionDir/extensions' to '\".APPROOT.\"extensions' due to the following access rights issue(s):\");\n\t\t\t\t\t\tforeach($aErrors as $sDir => $oCheckResult)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oPage->p('<img src=\"../images/error.png\"/>&nbsp;'.$oCheckResult->sLabel);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->p(\"<b>Note:</b> The extensions present in '$sPreviousVersionDir/extensions' will be copied to '\".APPROOT.\"extensions'.\");\n\t\t\t\t\t\t$oPage->add('<input type=\"hidden\" name=\"copy_extensions_from\" value=\"'.htmlentities($sPreviousVersionDir.'/extensions', ENT_QUOTES, 'UTF-8').'\">');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#changes_summary .title\").click(function() { $(this).parent().toggleClass('closed'); } );\n\t$('input[name=upgrade_type]').bind('click change', function() { WizardUpdateButtons(); });\nEOF\n\t\t\t);\n\n\t\t\t$oMutex = new iTopMutex(\n\t\t\t\t'cron'.$this->oWizard->GetParameter('db_name', '').$this->oWizard->GetParameter('db_prefix', ''),\n\t\t\t\t$this->oWizard->GetParameter('db_server', ''),\n\t\t\t\t$this->oWizard->GetParameter('db_user', ''),\n\t\t\t\t$this->oWizard->GetParameter('db_pwd', ''),\n\t\t\t\t$this->oWizard->GetParameter('db_tls_enabled', ''),\n\t\t\t\t$this->oWizard->GetParameter('db_tls_ca', '')\n\t\t\t);\n\t\t\tif ($oMutex->IsLocked())\n\t\t\t{\n\t\t\t\t$oPage->p(\"<img src=\\\"../images/error.png\\\"/>&nbsp;An iTop CRON process is being executed on the target database. It is highly recommended to stop any iTop CRON process prior to running the setup program.\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function CanMoveForward()\n\t{\n\t\treturn $this->bCanMoveForward;\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\tif ($(\"#radio_upgrade_keep\").length == 0) return true;\n\t\n\tbRet = ($('input[name=upgrade_type]:checked').length > 0);\n\treturn bRet;\nEOF\n\t\t;\n\t}\n}\n\n/**\n * License acceptation screen\n */\nclass WizStepLicense extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'License Agreement';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepDBParams');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$this->oWizard->SaveParameter('accept_license', 'no');\n\t\treturn array('class' => 'WizStepDBParams', 'state' => '');\n\t}\n\n    /**\n     * @param WebPage $oPage\n     */\n    public function Display(WebPage $oPage)\n    {\n        $aLicenses = SetupUtils::GetLicenses();\n\t\t$oPage->add_style(\n<<<EOF\nfieldset {\n\tmax-height: 18em;\n\toverflow: auto;\n}\nEOF\n\t\t);\n\n\t\t$oPage->add('<h2>Licenses agreements for the components of '.ITOP_APPLICATION.'</h2>');\n\t\t$oPage->add_style('div a.no-arrow { background:transparent; padding-left:0;}');\n\t\t$oPage->add_style('.toggle { cursor:pointer; text-decoration:underline; color:#1C94C4; }');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Components of '.ITOP_APPLICATION.'</legend>');\n\t\t$oPage->add('<ul>');\n        $index = 0;\n        foreach ($aLicenses as $oLicense)\n\t\t{\n\t\t\t$oPage->add('<li><b>'.$oLicense->product.'</b>, &copy; '.$oLicense->author.' is licensed under the <b>'.$oLicense->license_type.' license</b>. (<span class=\"toggle\" id=\"toggle_'.$index.'\">Details</span>)');\n\t\t\t$oPage->add('<div id=\"license_'.$index.'\" class=\"license_text\" style=\"display:none;overflow:auto;max-height:10em;font-size:small;border:1px #696969 solid;margin-bottom:1em; margin-top:0.5em;padding:0.5em;\">'.$oLicense->text.'</div>');\n\t\t\t$oPage->add_ready_script('$(\".license_text a\").attr(\"target\", \"_blank\").addClass(\"no-arrow\");');\n\t\t\t$oPage->add_ready_script('$(\"#toggle_'.$index.'\").click( function() { $(\"#license_'.$index.'\").toggle(); } );');\n            $index++;\n\t\t}\n\t\t$oPage->add('</ul>');\n\t\t$oPage->add('</fieldset>');\n        $sChecked = ($this->oWizard->GetParameter('accept_license', 'no') == 'yes') ? ' checked ' : '';\n        $oPage->p('<input type=\"checkbox\" name=\"accept_license\" id=\"accept\" value=\"yes\" '.$sChecked.'><label for=\"accept\">&nbsp;I accept the terms of the licenses of the '.count($aLicenses).' components mentioned above.</label>');\n\t\t$oPage->add_ready_script('$(\"#accept\").bind(\"click change\", function() { WizardUpdateButtons(); });');\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn 'return ($(\"#accept\").prop(\"checked\"));';\n\t}\n\n\n}\n\n/**\n * License acceptation screen (when upgrading)\n */\nclass WizStepLicense2 extends WizStepLicense\n{\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepUpgradeMiscParams');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => 'WizStepUpgradeMiscParams', 'state' => '');\n\t}\n}\n\n/**\n * Database Connection parameters screen\n */\nclass WizStepDBParams extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Database Configuration';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepAdminAccount');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$this->oWizard->SaveParameter('db_server', '');\n\t\t$this->oWizard->SaveParameter('db_user', '');\n\t\t$this->oWizard->SaveParameter('db_pwd', '');\n\t\t$this->oWizard->SaveParameter('db_name', '');\n\t\t$this->oWizard->SaveParameter('db_prefix', '');\n\t\t$this->oWizard->SaveParameter('new_db_name', '');\n\t\t$this->oWizard->SaveParameter('create_db', '');\n\t\t$this->oWizard->SaveParameter('db_new_name', '');\n\t\t$this->oWizard->SaveParameter('db_tls_enabled', false);\n\t\t$this->oWizard->SaveParameter('db_tls_ca', '');\n\n\t\treturn array('class' => 'WizStepAdminAccount', 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->add('<h2>Configuration of the database connection:</h2>');\n\t\t$sDBServer = $this->oWizard->GetParameter('db_server', '');\n\t\t$sDBUser = $this->oWizard->GetParameter('db_user', '');\n\t\t$sDBPwd = $this->oWizard->GetParameter('db_pwd', '');\n\t\t$sDBName = $this->oWizard->GetParameter('db_name', '');\n\t\t$sDBPrefix = $this->oWizard->GetParameter('db_prefix', '');\n\t\t$sTlsEnabled = $this->oWizard->GetParameter('db_tls_enabled', '');\n\t\t$sTlsCA = $this->oWizard->GetParameter('db_tls_ca', '');\n\t\t$sNewDBName = $this->oWizard->GetParameter('db_new_name', false);\n\n\t\t$oPage->add('<table>');\n\t\tSetupUtils::DisplayDBParameters($oPage, true, $sDBServer, $sDBUser, $sDBPwd, $sDBName, $sDBPrefix, $sTlsEnabled,\n\t\t\t$sTlsCA, $sNewDBName);\n\t\t$sAuthentToken = $this->oWizard->GetParameter('authent', '');\n\t\t$oPage->add('<input type=\"hidden\" id=\"authent_token\" value=\"'.$sAuthentToken.'\"/>');\n\t\t$oPage->add('</table>');\n\t\t$sCreateDB = $this->oWizard->GetParameter('create_db', 'yes');\n\t\tif ($sCreateDB == 'no')\n\t\t{\n\t\t\t$oPage->add_ready_script('$(\"#existing_db\").prop(\"checked\", true);');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oPage->add_ready_script('$(\"#create_db\").prop(\"checked\", true);');\n\t\t}\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\tswitch($sCode)\n\t\t{\n\t\t\tcase 'check_db':\n\t\t\tSetupUtils:: AsyncCheckDB($oPage, $aParameters);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\tif ($(\"#wiz_form\").data(\"db_connection\") === \"error\") return false;\n\n\tvar bRet = true;\n\tbRet = ValidateField(\"db_name\", true) && bRet;\n\tbRet = ValidateField(\"db_new_name\", true) && bRet;\n\tbRet = ValidateField(\"db_prefix\", true) && bRet;\n\n\treturn bRet;\nEOF\n\t\t;\n\t}\n}\n\n/**\n * Administrator Account definition screen\n */\nclass WizStepAdminAccount extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Administrator Account';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepMiscParams');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$this->oWizard->SaveParameter('admin_user', '');\n\t\t$this->oWizard->SaveParameter('admin_pwd', '');\n\t\t$this->oWizard->SaveParameter('confirm_pwd', '');\n\t\t$this->oWizard->SaveParameter('admin_language', 'EN US');\n\t\treturn array('class' => 'WizStepMiscParams', 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$sAdminUser = $this->oWizard->GetParameter('admin_user', 'admin');\n\t\t$sAdminPwd = $this->oWizard->GetParameter('admin_pwd', '');\n\t\t$sConfirmPwd = $this->oWizard->GetParameter('confirm_pwd', '');\n\t\t$sAdminLanguage = $this->oWizard->GetParameter('admin_language', 'EN US');\n\t\t$oPage->add('<h2>Definition of the Administrator Account</h2>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Administrator Account</legend>');\n\t\t$oPage->add('<table>');\n\t\t$oPage->add('<tr><td>Login: </td><td><input id=\"admin_user\" name=\"admin_user\" type=\"text\" size=\"25\" maxlength=\"64\" value=\"'.htmlentities($sAdminUser, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_admin_user\"/></td><tr>');\n\t\t$oPage->add('<tr><td>Password: </td><td><input id=\"admin_pwd\" autocomplete=\"off\" name=\"admin_pwd\" type=\"password\" size=\"25\" maxlength=\"64\" value=\"'.htmlentities($sAdminPwd, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_admin_pwd\"/></td><tr>');\n\t\t$oPage->add('<tr><td>Confirm password: </td><td><input id=\"confirm_pwd\" autocomplete=\"off\" name=\"confirm_pwd\" type=\"password\" size=\"25\" maxlength=\"64\" value=\"'.htmlentities($sConfirmPwd, ENT_QUOTES, 'UTF-8').'\"></td><tr>');\n\t\t$sSourceDir = APPROOT.'dictionaries/';\n\t\t$aLanguages = SetupUtils::GetAvailableLanguages($sSourceDir);\n\t\t$oPage->add('<tr><td>Language: </td><td>');\n\t\t$oPage->add(SetupUtils::GetLanguageSelect($sSourceDir, 'admin_language', $sAdminLanguage));\n\t\t$oPage->add('</td></tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t\t$('#admin_user').bind('change keyup', function() { WizardUpdateButtons(); } );\n\t\t$('#admin_pwd').bind('change keyup', function() { WizardUpdateButtons(); } );\n\t\t$('#confirm_pwd').bind('change keyup', function() { WizardUpdateButtons(); } );\nEOF\n\t\t);\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\tbRet = ($('#admin_user').val() != '');\n\tif (!bRet)\n\t{\n\t\t$(\"#v_admin_user\").html('<img src=\"../images/validation_error.png\" title=\"This field cannot be empty\"/>');\n\t}\n\telse\n\t{\n\t\t$(\"#v_admin_user\").html('');\n\t}\n\t\n\tbPasswordsMatch = ($('#admin_pwd').val() == $('#confirm_pwd').val());\n\tif (!bPasswordsMatch)\n\t{\n\t\t$('#v_admin_pwd').html('<img src=\"../images/validation_error.png\" title=\"Retyped password do not match\"/>');\n\t}\n\telse\n\t{\n\t\t$('#v_admin_pwd').html('');\n\t}\n\tbRet = bPasswordsMatch && bRet;\n\t\n\treturn bRet;\nEOF\n\t\t;\n\t}}\n\n/**\n * Miscellaneous Parameters (URL, Sample Data)\n */\nclass WizStepMiscParams extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Miscellaneous Parameters';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepModulesChoice');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$this->oWizard->SaveParameter('default_language', '');\n\t\t$this->oWizard->SaveParameter('application_url', '');\n\t\t$this->oWizard->SaveParameter('graphviz_path', '');\n\t\t$this->oWizard->SaveParameter('sample_data', 'yes');\n\t\treturn array('class' => 'WizStepModulesChoice', 'state' => 'start_install');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$sDefaultLanguage = $this->oWizard->GetParameter('default_language', $this->oWizard->GetParameter('admin_language'));\n\t\t$sApplicationURL = $this->oWizard->GetParameter('application_url', utils::GetDefaultUrlAppRoot());\n\t\t$sDefaultGraphvizPath = (strtolower(substr(PHP_OS, 0, 3)) === 'win') ? 'C:\\\\Program Files\\\\Graphviz\\\\bin\\\\dot.exe' : '/usr/bin/dot';\n\t\t$sGraphvizPath = $this->oWizard->GetParameter('graphviz_path', $sDefaultGraphvizPath);\n\t\t$sSampleData = $this->oWizard->GetParameter('sample_data', 'yes');\n\t\t$oPage->add('<h2>Additional parameters</h2>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Default Language</legend>');\n\t\t$oPage->add('<table>');\n\t\t$sSourceDir = APPROOT.'dictionaries/';\n\t\t$aLanguages = SetupUtils::GetAvailableLanguages($sSourceDir);\n\t\t$oPage->add('<tr><td>Default Language: </td><td>');\n\t\t$oPage->add(SetupUtils::GetLanguageSelect($sSourceDir, 'default_language', $sDefaultLanguage));\n\t\t$oPage->add('</td></tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Application URL</legend>');\n\t\t$oPage->add('<table>');\n\t\t$oPage->add('<tr><td>URL: </td><td><input id=\"application_url\" name=\"application_url\" type=\"text\" size=\"35\" maxlength=\"1024\" value=\"'.htmlentities($sApplicationURL, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_application_url\"/></td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\">Change the value above if the end-users will be accessing the application by another path due to a specific configuration of the web server.</td><tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Path to Graphviz\\' dot application</legend>');\n\t\t$oPage->add('<table>');\n\t\t$oPage->add('<tr><td>Path: </td><td><input id=\"graphviz_path\" name=\"graphviz_path\" type=\"text\" size=\"35\" maxlength=\"1024\" value=\"'.htmlentities($sGraphvizPath, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_graphviz_path\"/></td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\"><a href=\"http://www.graphviz.org\" target=\"_blank\">Graphviz</a> is required to display the impact analysis graph (i.e. impacts / depends on).</td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\"><span id=\"graphviz_status\"></span></td><tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Sample Data</legend>');\n        $sChecked = ($sSampleData == 'yes') ? 'checked ' : '';\n        $oPage->p('<input id=\"sample_data_yes\" name=\"sample_data\" type=\"radio\" value=\"yes\" '.$sChecked.'><label for=\"sample_data_yes\">&nbsp;I am installing a <b>demo or test</b> instance, populate the database with some demo data.');\n        $sChecked = ($sSampleData == 'no') ? 'checked ' : '';\n        $oPage->p('<input id=\"sample_data_no\" name=\"sample_data\" type=\"radio\" value=\"no\" '.$sChecked.'><label for=\"sample_data_no\">&nbsp;I am installing a <b>production</b> instance, create an empty database to start from.');\n\t\t$oPage->add('</fieldset>');\n\t\t$sAuthentToken = $this->oWizard->GetParameter('authent', '');\n\t\t$oPage->add('<input type=\"hidden\" id=\"authent_token\" value=\"'.$sAuthentToken.'\"/>');\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t\t$('#application_url').bind('change keyup', function() { WizardUpdateButtons(); } );\n\t\t$('#graphviz_path').bind('change keyup init', function() { WizardUpdateButtons();  WizardAsyncAction('check_graphviz', { graphviz_path: $('#graphviz_path').val(), authent: $('#authent_token').val()}); } ).trigger('init');\n\t\t$('#btn_next').click(function() {\n\t\t\tbRet = true;\n\t\t\tif ($(this).attr('data-graphviz') != 'ok')\n\t\t\t{\n\t\t\t\tbRet = confirm('The impact analysis will not be displayed properly. Are you sure you want to continue?');\n\t\t\t}\n\t\t\treturn bRet;\n\t\t});\nEOF\n\t\t);\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\tswitch($sCode)\n\t\t{\n\t\t\tcase 'check_graphviz':\n\t\t\t$sGraphvizPath = $aParameters['graphviz_path'];\n\t\t\t$oCheck = SetupUtils::CheckGraphviz($sGraphvizPath);\n\t\t\t$sMessage = json_encode($oCheck->sLabel);\n\t\t\tswitch($oCheck->iSeverity)\n\t\t\t{\n\t\t\t\tcase CheckResult::INFO:\n\t\t\t\t$sStatus = 'ok';\n\t\t\t\t$sMessage = json_encode('<img src=\"../images/validation_ok.png\">&nbsp;'.$oCheck->sLabel);\n\n\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\tcase CheckResult::ERROR:\n\t\t\t\tcase CheckResult::WARNING:\n\t\t\t\t$sStatus = 'ko';\n\t\t\t\t$sMessage = json_encode('<img src=\"../images/error.png\">&nbsp;'.$oCheck->sLabel);\n\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#graphviz_status\").html($sMessage);\n\t$('#btn_next').attr('data-graphviz', '$sStatus');\nEOF\n\t\t\t);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\tbRet = ($('#application_url').val() != '');\n\tif (!bRet)\n\t{\n\t\t$(\"#v_application_url\").html('<img src=\"../images/validation_error.png\" title=\"This field cannot be empty\"/>');\n\t}\n\telse\n\t{\n\t\t$(\"#v_application_url\").html('');\n\t}\n\tbGraphviz = ($('#graphviz_path').val() != '');\n\tif (!bGraphviz)\n\t{\n\t\t// Does not prevent to move forward\n\t\t$(\"#v_graphviz_path\").html('<img src=\"../images/validation_error.png\" title=\"Impact analysis will not display properly\"/>');\n\t}\n\telse\n\t{\n\t\t$(\"#v_graphviz_path\").html('');\n\t}\n\treturn bRet;\nEOF\n\t\t;\n\t}\n}\n\n/**\n * Miscellaneous Parameters (URL...) in case of upgrade\n */\nclass WizStepUpgradeMiscParams extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Miscellaneous Parameters';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepModulesChoice');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t$this->oWizard->SaveParameter('application_url', '');\n\t\t$this->oWizard->SaveParameter('graphviz_path', '');\n\t\treturn array('class' => 'WizStepModulesChoice', 'state' => 'start_upgrade');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$sApplicationURL = $this->oWizard->GetParameter('application_url', utils::GetDefaultUrlAppRoot());\n\t\t$sDefaultGraphvizPath = (strtolower(substr(PHP_OS, 0, 3)) === 'win') ? 'C:\\\\Program Files\\\\Graphviz\\\\bin\\\\dot.exe' : '/usr/bin/dot';\n\t\t$sGraphvizPath = $this->oWizard->GetParameter('graphviz_path', $sDefaultGraphvizPath);\n\t\t$oPage->add('<h2>Additional parameters</h2>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Application URL</legend>');\n\t\t$oPage->add('<table>');\n\t\t$oPage->add('<tr><td>URL: </td><td><input id=\"application_url\" name=\"application_url\" type=\"text\" size=\"35\" maxlength=\"1024\" value=\"'.htmlentities($sApplicationURL, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_application_url\"/></td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\">Change the value above if the end-users will be accessing the application by another path due to a specific configuration of the web server.</td><tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$oPage->add('<fieldset>');\n\t\t$oPage->add('<legend>Path to Graphviz\\' dot application</legend>');\n\t\t$oPage->add('<table>');\n\t\t$oPage->add('<tr><td>Path: </td><td><input id=\"graphviz_path\" name=\"graphviz_path\" type=\"text\" size=\"35\" maxlength=\"1024\" value=\"'.htmlentities($sGraphvizPath, ENT_QUOTES, 'UTF-8').'\"><span id=\"v_graphviz_path\"/></td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\"><a href=\"http://www.graphviz.org\" target=\"_blank\">Graphviz</a> is required to display the impact analysis graph (i.e. impacts / depends on).</td><tr>');\n\t\t$oPage->add('<tr><td colspan=\"2\"><span id=\"graphviz_status\"></span></td><tr>');\n\t\t$oPage->add('</table>');\n\t\t$oPage->add('</fieldset>');\n\t\t$sAuthentToken = $this->oWizard->GetParameter('authent', '');\n\t\t$oPage->add('<input type=\"hidden\" id=\"authent_token\" value=\"'.$sAuthentToken.'\"/>');\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t\t$('#application_url').bind('change keyup', function() { WizardUpdateButtons(); } );\n\t\t$('#graphviz_path').bind('change keyup init', function() { WizardUpdateButtons();  WizardAsyncAction('check_graphviz', { graphviz_path: $('#graphviz_path').val(), authent: $('#authent_token').val() }); } ).trigger('init');\n\t\t$('#btn_next').click(function() {\n\t\t\tbRet = true;\n\t\t\tif ($(this).attr('data-graphviz') != 'ok')\n\t\t\t{\n\t\t\t\tbRet = confirm('The impact analysis will not be displayed properly. Are you sure you want to continue?');\n\t\t\t}\n\t\t\treturn bRet;\n\t\t});\nEOF\n\t\t);\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\tswitch($sCode)\n\t\t{\n\t\t\tcase 'check_graphviz':\n\t\t\t$sGraphvizPath = $aParameters['graphviz_path'];\n\t\t\t$oCheck = SetupUtils::CheckGraphviz($sGraphvizPath);\n\t\t\t$sMessage = json_encode($oCheck->sLabel);\n\t\t\tswitch($oCheck->iSeverity)\n\t\t\t{\n\t\t\t\tcase CheckResult::INFO:\n\t\t\t\t$sStatus = 'ok';\n\t\t\t\t$sMessage = json_encode('<img src=\"../images/validation_ok.png\">&nbsp;'.$oCheck->sLabel);\n\n\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\tcase CheckResult::ERROR:\n\t\t\t\tcase CheckResult::WARNING:\n\t\t\t\t$sStatus = 'ko';\n\t\t\t\t$sMessage = json_encode('<img src=\"../images/error.png\">&nbsp;'.$oCheck->sLabel);\n\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#graphviz_status\").html($sMessage);\n\t$('#btn_next').attr('data-graphviz', '$sStatus');\nEOF\n\t\t\t);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn\n<<<EOF\n\tbRet = ($('#application_url').val() != '');\n\tif (!bRet)\n\t{\n\t\t$(\"#v_application_url\").html('<img src=\"../images/validation_error.png\" title=\"This field cannot be empty\"/>');\n\t}\n\telse\n\t{\n\t\t$(\"#v_application_url\").html('');\n\t}\n\tbGraphviz = ($('#graphviz_path').val() != '');\n\tif (!bGraphviz)\n\t{\n\t\t// Does not prevent to move forward\n\t\t$(\"#v_graphviz_path\").html('<img src=\"../images/validation_error.png\" title=\"Impact analysis will not display properly\"/>');\n\t}\n\telse\n\t{\n\t\t$(\"#v_graphviz_path\").html('');\n\t}\n\treturn bRet;\nEOF\n\t\t;\n\t}\n}\n/**\n * Choice of the modules to be installed\n */\nclass WizStepModulesChoice extends WizardStep\n{\n\tstatic protected $SEP = '_';\n\tprotected $bUpgrade = false;\n\n\t/**\n\t *\n\t * @var iTopExtensionsMap\n\t */\n\tprotected $oExtensionsMap;\n\n\t/**\n\t * Whether we were able to load the choices from the database or not\n\t * @var bool\n\t */\n\tprotected $bChoicesFromDatabase;\n\n\tpublic function __construct(WizardController $oWizard, $sCurrentState)\n\t{\n\t\tparent::__construct($oWizard, $sCurrentState);\n\t\t$this->bChoicesFromDatabase = false;\n\t\t$this->oExtensionsMap = new iTopExtensionsMap();\n\t\t$sPreviousSourceDir = $this->oWizard->GetParameter('previous_version_dir', '');\n\t\t$sConfigPath = null;\n\t\tif (($sPreviousSourceDir !== '') && is_readable($sPreviousSourceDir.'/conf/production/config-itop.php'))\n\t\t{\n\t\t\t$sConfigPath = $sPreviousSourceDir.'/conf/production/config-itop.php';\n\t\t}\n\t\telse if (is_readable(utils::GetConfigFilePath('production')))\n\t\t{\n\t\t\t$sConfigPath = utils::GetConfigFilePath('production');\n\t\t}\n\n\t\tif ($sConfigPath !== null) // only called if the config file exists : we are updating a previous installation !\n\t\t{\n\t\t\t$oConfig = new Config($sConfigPath);\n\t\t\t$this->bChoicesFromDatabase = $this->oExtensionsMap->LoadChoicesFromDatabase($oConfig);\n\t\t}\n\t}\n\n\tpublic function GetTitle()\n\t{\n\t\t$aStepInfo = $this->GetStepInfo();\n\t\t$sTitle = isset($aStepInfo['title']) ? $aStepInfo['title'] : 'Modules selection';\n\t\treturn $sTitle;\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepModulesChoice', 'WizStepSummary');\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\t// Accumulates the selected modules:\n\t\t$index = $this->GetStepIndex();\n\n\t\t// use json_encode:decode to store a hash array: step_id => array(input_name => selected_input_id)\n\t\t$aSelectedChoices = json_decode($this->oWizard->GetParameter('selected_components', '{}'), true);\n\t\t$aSelected = utils::ReadParam('choice', array());\n\t\t$aSelectedChoices[$index] = $aSelected;\n\t\t$this->oWizard->SetParameter('selected_components', json_encode($aSelectedChoices));\n\n\t\tif ($this->GetStepInfo($index) == null)\n\t\t{\n\t\t\tthrow new Exception('Internal error: invalid step \"'.$index.'\" for the choice of modules.');\n\t\t}\n\t\telse if ($bMoveForward)\n\t\t{\n\t\t\tif ($this->GetStepInfo(1 + $index) != null)\n\t\t\t{\n\t\t\t\treturn array('class' => 'WizStepModulesChoice', 'state' => (1+$index));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Exiting this step of the wizard, let's convert the selection into a list of modules\n\t\t\t\t$aModules = array();\n\t\t\t\t$aExtensions = array();\n\t\t\t\t$sDisplayChoices = '<ul>';\n\t\t\t\tfor($i = 0; $i <= $index; $i++)\n\t\t\t\t{\n\t\t\t\t\t$aStepInfo = $this->GetStepInfo($i);\n\t\t\t\t\t$sDisplayChoices .= $this->GetSelectedModules($aStepInfo, $aSelectedChoices[$i], $aModules, '', '', $aExtensions);\n\t\t\t\t}\n\t\t\t\t$sDisplayChoices .= '</ul>';\n\t\t\t\tif (class_exists('CreateITILProfilesInstaller'))\n\t\t\t\t{\n\t\t\t\t\t$this->oWizard->SetParameter('old_addon', true);\n\t\t\t\t}\n\t\t\t\t$this->oWizard->SetParameter('selected_modules', json_encode(array_keys($aModules)));\n\t\t\t\t$this->oWizard->SetParameter('selected_extensions', json_encode($aExtensions));\n\t\t\t\t$this->oWizard->SetParameter('display_choices', $sDisplayChoices);\n\t\t\t\treturn array('class' => 'WizStepSummary', 'state' => '');\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$this->DisplayStep($oPage);\n\t}\n\n\tprotected function DisplayStep($oPage)\n\t{\n\t\t// Sanity check (not stopper, to let developpers go further...)\n\t\ttry\n\t\t{\n\t\t\tSetupUtils::AnalyzeInstallation($this->oWizard, true);\n\t\t}\n\t\tcatch(MissingDependencyException $e)\n\t\t{\n\t\t\t$oPage->warning($e->getMessage());\n\t\t}\n\n\t\t$this->bUpgrade = ($this->oWizard->GetParameter('install_mode') != 'install');\n\t\t$aStepInfo = $this->GetStepInfo();\n\t\t$oPage->add_style(\"div.choice { margin: 0.5em;}\");\n\t\t$oPage->add_style(\"div.choice a { text-decoration:none; font-weight: bold; color: #1C94C4 }\");\n\t\t$oPage->add_style(\"div.description { margin-left: 2em; }\");\n\t\t$oPage->add_style(\".choice-disabled { color: #999; }\");\n\t\t$oPage->add('<table class=\"module-selection-banner\"><tr>');\n\t\t$sBannerPath = isset($aStepInfo['banner']) ? $aStepInfo['banner'] : '';\n\t\tif (!empty($sBannerPath))\n\t\t{\n\t\t\tif (substr($sBannerPath, 0, 1) == '/')\n\t\t\t{\n\t\t\t\t// absolute path, means relative to APPROOT\n\t\t\t\t$sBannerUrl = utils::GetDefaultUrlAppRoot().$sBannerPath;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// relative path: i.e. relative to the directory containing the XML file\n\t\t\t\t$sFullPath = dirname($this->GetSourceFilePath()).'/'.$sBannerPath;\n\t\t\t\t$sRealPath = realpath($sFullPath);\n\t\t\t\t$sBannerUrl = utils::GetDefaultUrlAppRoot().str_replace(realpath(APPROOT), '', $sRealPath);\n\t\t\t}\n\t\t\t$oPage->add('<td><img src=\"'.$sBannerUrl.'\"/><td>');\n\t\t}\n\t\t$sDescription = isset($aStepInfo['description']) ? $aStepInfo['description'] : '';\n\t\t$oPage->add('<td>'.$sDescription.'<td>');\n\t\t$oPage->add('</tr></table>');\n\n\t\t// Build the default choices\n\t\t$aDefaults = array();\n\t\t$aModules = SetupUtils::AnalyzeInstallation($this->oWizard);\n\t\t$aDefaults = $this->GetDefaults($aStepInfo, $aModules);\n\t\t//echo \"<pre>aStepInfo:\\n \".print_r($aStepInfo, true).\"</pre>\";\n\t\t//echo \"<pre>aDefaults:\\n \".print_r($aDefaults, true).\"</pre>\";\n\n\t\t$index = $this->GetStepIndex();\n\n\t\t// retrieve the saved selection\n\t\t// use json_encode:decode to store a hash array: step_id => array(input_name => selected_input_id)\n\t\t$aParameters = json_decode($this->oWizard->GetParameter('selected_components', '{}'), true);\n\t\tif (!isset($aParameters[$index]))\n\t\t{\n\t\t\t$aParameters[$index] = $aDefaults;\n\t\t}\n\t\t$aSelectedComponents = $aParameters[$index];\n\n\t\t$oPage->add('<div class=\"module-selection-body\">');\n\t\t$this->DisplayOptions($oPage, $aStepInfo, $aSelectedComponents, $aDefaults);\n\t\t$oPage->add('</div>');\n\n\t\t$oPage->add_script(\n<<<EOF\nfunction CheckChoice(sChoiceId)\n{\n\tvar oElement = $('#'+sChoiceId);\n\tvar bChecked = oElement.prop('checked');\n\tvar sId = sChoiceId.replace('choice', '');\n\tif ((oElement.attr('type') == 'radio') && bChecked)\n\t{\n\t\t// Only the radio that is clicked is notified, let's warn the other radio buttons\n\t\tsName = oElement.attr('name');\n\t\t$('input[name=\"'+sName+'\"]').each(function() {\n\t\t\tvar sRadioId = $(this).attr('id');\n\t\t\tif ((sRadioId != sChoiceId) && (sRadioId != undefined))\n\t\t\t{\n\t\t\t\tCheckChoice(sRadioId);\n\t\t\t}\n\t\t});\n\t}\n\t\n\t$('#sub_choices'+sId).each(function() {\n\t\tif (!bChecked)\n\t\t{\n\t\t\t$(this).addClass('choice-disabled');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$(this).removeClass('choice-disabled');\n\t\t}\n\t\t\n\t\t$('input', this).each(function() {\n\t\t\tif (bChecked)\n\t\t\t{\n\t\t\t\tif ($(this).attr('data-disabled') != 'disabled')\n\t\t\t\t{\n\t\t\t\t\t// Only non-mandatory fields can be enabled\n\t\t\t\t\t$(this).prop('disabled', false);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$(this).prop('disabled', true);\n\t\t\t\t$(this).prop('checked', false);\n\t\t\t}\n\t\t});\n\t});\n}\nEOF\n\t\t);\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t\t$('.wiz-choice').bind('change', function() { CheckChoice($(this).attr('id')); } );\n\t\t$('.wiz-choice').trigger('change');\nEOF\n\t\t);\n\t}\n\n\tprotected function GetDefaults($aInfo, $aModules, $sParentId = '')\n\t{\n\t\t$aDefaults = array();\n\t\tif (!$this->bChoicesFromDatabase)\n\t\t{\n\t\t\t$this->GuessDefaultsFromModules($aInfo, $aDefaults, $aModules, $sParentId);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->GetDefaultsFromDatabase($aInfo, $aDefaults, $sParentId);\n\t\t}\n\t\treturn $aDefaults;\n\t}\n\n\tprotected function GetDefaultsFromDatabase($aInfo, &$aDefaults, $sParentId)\n\t{\n\t\t$aOptions = isset($aInfo['options']) ? $aInfo['options'] : array();\n\t\tforeach($aOptions as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\tif ($this->bUpgrade)\n\t\t\t{\n\t\t\t\tif ($this->oExtensionsMap->IsMarkedAsChosen($aChoice['extension_code']))\n\t\t\t\t{\n\t\t\t\t\t$aDefaults[$sChoiceId] = $sChoiceId;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isset($aChoice['default']) && $aChoice['default'])\n\t\t\t{\n\t\t\t\t$aDefaults[$sChoiceId] = $sChoiceId;\n\t\t\t}\n\t\t\t// Recurse for sub_options (if any)\n\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t{\n\t\t\t\t$this->GetDefaultsFromDatabase($aChoice['sub_options'], $aDefaults, $sChoiceId);\n\t\t\t}\n\t\t}\n\n\t\t$aAlternatives = isset($aInfo['alternatives']) ? $aInfo['alternatives'] : array();\n\t\t$sChoiceName = null;\n\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\tif ($sChoiceName == null)\n\t\t\t{\n\t\t\t\t$sChoiceName = $sChoiceId; // All radios share the same name\n\t\t\t}\n\t\t\tif ($this->bUpgrade)\n\t\t\t{\n\t\t\t\tif ($this->oExtensionsMap->IsMarkedAsChosen($aChoice['extension_code']))\n\t\t\t\t{\n\t\t\t\t\t$aDefaults[$sChoiceName] = $sChoiceId;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isset($aChoice['default']) && $aChoice['default'])\n\t\t\t{\n\t\t\t\t$aDefaults[$sChoiceName] = $sChoiceId;\n\t\t\t}\n\t\t\t// Recurse for sub_options (if any)\n\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t{\n\t\t\t\t$this->GetDefaultsFromDatabase($aChoice['sub_options'], $aDefaults, $sChoiceId);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Try to guess the user choices based on the current list of installed modules...\n\t * @param array $aInfo\n\t * @param array $aDefaults\n\t * @param array $aModules\n\t * @param string $sParentId\n\t * @return array\n\t */\n\tprotected function GuessDefaultsFromModules($aInfo, &$aDefaults, $aModules, $sParentId = '')\n\t{\n\t\t$aRetScore = array();\n\t\t$aScores = array();\n\n\t\t$aOptions = isset($aInfo['options']) ? $aInfo['options'] : array();\n\t\tforeach($aOptions as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\t$aScores[$sChoiceId] = array();\n\t\t\tif (!$this->bUpgrade && isset($aChoice['default']) && $aChoice['default'])\n\t\t\t{\n\t\t\t\t$aDefaults[$sChoiceId] = $sChoiceId;\n\t\t\t}\n\t\t\tif ($this->bUpgrade)\n\t\t\t{\n\t\t\t\t// In upgrade mode, the defaults are the installed modules\n\t\t\t\tforeach($aChoice['modules'] as $sModuleId)\n\t\t\t\t{\n\t\t\t\t\tif ($aModules[$sModuleId]['version_db'] != '')\n\t\t\t\t\t{\n\t\t\t\t\t\t// A module corresponding to this choice is installed\n\t\t\t\t\t\t$aScores[$sChoiceId][$sModuleId] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Used for migration from 1.3.x or before\n\t\t\t\t// Accept that the new version can have one new module than the previous version\n\t\t\t\t// The option is still selected\n\t\t\t\t$iSelected = count($aScores[$sChoiceId]);\n\t\t\t\t$iNeeded = count($aChoice['modules']);\n\t\t\t\tif (($iSelected > 0) && (($iNeeded - $iSelected) < 2))\n\t\t\t\t{\n\t\t\t\t\t// All the modules are installed, this choice is selected\n\t\t\t\t\t$aDefaults[$sChoiceId] = $sChoiceId;\n\t\t\t\t}\n\t\t\t\t$aRetScore = array_merge($aRetScore, $aScores[$sChoiceId]);\n\t\t\t}\n\n\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t{\n\t\t\t\t$aScores[$sChoiceId] = array_merge($aScores[$sChoiceId], $this->GuessDefaultsFromModules($aChoice['sub_options'], $aDefaults, $sChoiceId));\n\t\t\t}\n\t\t\t$index++;\n\t\t}\n\n\t\t$aAlternatives = isset($aInfo['alternatives']) ? $aInfo['alternatives'] : array();\n\t\t$sChoiceName = null;\n\t\t$sChoiceIdNone = null;\n\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\t$aScores[$sChoiceId] = array();\n\t\t\tif ($sChoiceName == null)\n\t\t\t{\n\t\t\t\t$sChoiceName = $sChoiceId;\n\t\t\t}\n\t\t\tif (!$this->bUpgrade && isset($aChoice['default']) && $aChoice['default'])\n\t\t\t{\n\t\t\t\t$aDefaults[$sChoiceName] = $sChoiceId;\n\t\t\t}\n\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t{\n\t\t\t\t// By default (i.e. install-mode), sub options can only be checked if the parent option is checked by default\n\t\t\t\tif ($this->bUpgrade || (isset($aChoice['default']) && $aChoice['default']))\n\t\t\t\t{\n\t\t\t\t\t$aScores[$sChoiceId] = $this->GuessDefaultsFromModules($aChoice['sub_options'], $aDefaults, $aModules, $sChoiceId);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$index++;\n\t\t}\n\n\t\t$iMaxScore = 0;\n\t\tif ($this->bUpgrade && (count($aAlternatives) > 0))\n\t\t{\n\t\t\t// The installed choices have precedence over the 'default' choices\n\t\t\t// In case several choices share the same base modules, let's weight the alternative choices\n\t\t\t// based on their number of installed modules\n\t\t\t$sChoiceName = null;\n\n\t\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t\t{\n\t\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\t\tif ($sChoiceName == null)\n\t\t\t\t{\n\t\t\t\t\t$sChoiceName = $sChoiceId;\n\t\t\t\t}\n\t\t\t\tif (array_key_exists('modules', $aChoice))\n\t\t\t\t{\n\t\t\t\t\tforeach($aChoice['modules'] as $sModuleId)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($aModules[$sModuleId]['version_db'] != '')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// A module corresponding to this choice is installed, increase the score of this choice\n\t\t\t\t\t\t\tif (!isset($aScores[$sChoiceId])) $aScores[$sChoiceId] = array();\n\t\t\t\t\t\t\t$aScores[$sChoiceId][$sModuleId] = true;\n\t\t\t\t\t\t\t$iMaxScore = max($iMaxScore, count($aScores[$sChoiceId]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//if (count($aScores[$sChoiceId]) == count($aChoice['modules']))\n\t\t\t\t\t//{\n\t\t\t\t\t//\t$iScore += 100; // Bonus for the parent when a choice is complete\n\t\t\t\t\t//}\n\t\t\t\t\t$aRetScore = array_merge($aRetScore, $aScores[$sChoiceId]);\n\t\t\t\t}\n\t\t\t\t$iMaxScore = max($iMaxScore, isset($aScores[$sChoiceId]) ? count($aScores[$sChoiceId]) : 0);\n\t\t\t}\n\t\t}\n\t\tif ($iMaxScore > 0)\n\t\t{\n\t\t\t$aNumericScores = array();\n\t\t\tforeach($aScores as $sChoiceId => $aModules)\n\t\t\t{\n\t\t\t\t$aNumericScores[$sChoiceId] = count($aModules);\n\t\t\t}\n\t\t\t// The choice with the bigger score wins !\n\t\t\tasort($aNumericScores, SORT_NUMERIC);\n\t\t\t$aKeys = array_keys($aNumericScores);\n\t\t\t$sBetterChoiceId = array_pop($aKeys);\n\t\t\t$aDefaults[$sChoiceName] = $sBetterChoiceId;\n\t\t}\n\t\t// echo \"Scores: <pre>\".print_r($aScores, true).\"</pre><br/>\";\n\t\t// echo \"Defaults: <pre>\".print_r($aDefaults, true).\"</pre><br/>\";\n\t\treturn $aRetScore;\n\t}\n\n\t/**\n\t * Converts the list of selected \"choices\" into a list of \"modules\": take into account the selected and the mandatory modules\n\t * @param hash $aInfo Info about the \"choice\" array('options' => array(...), 'alternatives' => array(...))\n\t * @param hash $aSelectedChoices List of selected choices array('name' => 'selected_value_id')\n\t * @param hash $aModules Return parameter: List of selected modules array('module_id' => true)\n\t * @param string $sParentId Used for recursion\n\t * @return string A text representation of what will be installed\n\t */\n\tprotected function GetSelectedModules($aInfo, $aSelectedChoices, &$aModules, $sParentId = '', $sDisplayChoices = '', &$aSelectedExtensions = null)\n\t{\n\t\tif ($sParentId == '')\n\t\t{\n\t\t\t// Check once (before recursing) that the hidden modules are selected\n\t\t\tforeach(SetupUtils::AnalyzeInstallation($this->oWizard) as $sModuleId => $aModule)\n\t\t\t{\n\t\t\t\tif (($sModuleId != ROOT_MODULE) && !isset($aModules[$sModuleId]))\n\t\t\t\t{\n\t\t\t\t\tif (($aModule['category'] == 'authentication') || (!$aModule['visible'] && !isset($aModule['auto_select'])))\n\t\t\t\t\t{\n\t\t\t\t\t\t$aModules[$sModuleId] = true;\n\t\t\t\t\t\t$sDisplayChoices .= '<li><i>'.$aModule['label'].' (hidden)</i></li>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$aOptions = isset($aInfo['options']) ? $aInfo['options'] : array();\n\t\tforeach($aOptions as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\tif ( (isset($aChoice['mandatory']) && $aChoice['mandatory']) ||\n\t\t\t\t (isset($aSelectedChoices[$sChoiceId]) && ($aSelectedChoices[$sChoiceId] == $sChoiceId)) )\n\t\t\t{\n\t\t\t\t$sDisplayChoices .= '<li>'.$aChoice['title'].'</li>';\n\t\t\t\tif (isset($aChoice['modules']))\n\t\t\t\t{\n\t\t\t\t\tforeach($aChoice['modules'] as $sModuleId)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aModules[$sModuleId] = true; // store the Id of the selected module\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$sChoiceType = isset($aChoice['type']) ? $aChoice['type'] : 'wizard_option';\n\t\t\t\tif ($aSelectedExtensions !== null)\n\t\t\t\t{\n\t\t\t\t\t$aSelectedExtensions[] = $aChoice['extension_code'];\n\t\t\t\t}\n\t\t\t\t// Recurse only for selected choices\n\t\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t\t{\n\t\t\t\t\t$sDisplayChoices .= '<ul>';\n\t\t\t\t\t$sDisplayChoices = $this->GetSelectedModules($aChoice['sub_options'], $aSelectedChoices, $aModules, $sChoiceId, $sDisplayChoices, $aSelectedExtensions);\n\t\t\t\t\t$sDisplayChoices .= '</ul>';\n\t\t\t\t}\n\t\t\t\t$sDisplayChoices .= '</li>';\n\t\t\t}\n\t\t\t$index++;\n\t\t}\n\n\t\t$aAlternatives = isset($aInfo['alternatives']) ? $aInfo['alternatives'] : array();\n\t\t$sChoiceName = null;\n\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\tif ($sChoiceName == null)\n\t\t\t{\n\t\t\t\t$sChoiceName = $sChoiceId;\n\t\t\t}\n\t\t\tif ( (isset($aChoice['mandatory']) && $aChoice['mandatory']) ||\n\t\t\t\t (isset($aSelectedChoices[$sChoiceName]) && ($aSelectedChoices[$sChoiceName] == $sChoiceId)) )\n\t\t\t{\n\t\t\t\t$sDisplayChoices .= '<li>'.$aChoice['title'].'</li>';\n\t\t\t\tif ($aSelectedExtensions !== null)\n\t\t\t\t{\n\t\t\t\t\t$aSelectedExtensions[] = $aChoice['extension_code'];\n\t\t\t\t}\n\t\t\t\tif (isset($aChoice['modules']))\n\t\t\t\t{\n\t\t\t\t\tforeach($aChoice['modules'] as $sModuleId)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aModules[$sModuleId] = true; // store the Id of the selected module\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Recurse only for selected choices\n\t\t\t\tif (isset($aChoice['sub_options']))\n\t\t\t\t{\n\t\t\t\t\t$sDisplayChoices .= '<ul>';\n\t\t\t\t\t$sDisplayChoices = $this->GetSelectedModules($aChoice['sub_options'], $aSelectedChoices, $aModules, $sChoiceId, $sDisplayChoices, $aSelectedExtensions);\n\t\t\t\t\t$sDisplayChoices .= '</ul>';\n\t\t\t\t}\n\t\t\t\t$sDisplayChoices .= '</li>';\n\t\t\t}\n\t\t\t$index++;\n\t\t}\n\t\tif ($sParentId == '')\n\t\t{\n\t\t\t// Last pass (after all the user's choices are turned into \"selected\" modules):\n\t\t\t// Process 'auto_select' modules for modules that are not already selected\n\t\t\t$aAvailableModules = SetupUtils::AnalyzeInstallation($this->oWizard);\n\t\t\tdo\n\t\t\t{\n\t\t\t\t// Loop while new modules are added...\n\t\t\t\t$bModuleAdded = false;\n\t\t\t\tforeach($aAvailableModules as $sModuleId => $aModule)\n\t\t\t\t{\n\t\t\t\t\tif (($sModuleId != ROOT_MODULE) && !array_key_exists($sModuleId, $aModules) && isset($aModule['auto_select']))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$bSelected = false;\n\t\t\t\t\t\t\tSetupInfo::SetSelectedModules($aModules);\n\t\t\t\t\t\t\teval('$bSelected = ('.$aModule['auto_select'].');');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(Exception $e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$sDisplayChoices .= '<li><b>Warning: auto_select failed with exception ('.$e->getMessage().') for module \"'.$sModuleId.'\"</b></li>';\n\t\t\t\t\t\t\t$bSelected = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($bSelected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aModules[$sModuleId] = true; // store the Id of the selected module\n\t\t\t\t\t\t\t$sDisplayChoices .= '<li>'.$aModule['label'].' (auto_select)</li>';\n\t\t\t\t\t\t\t$bModuleAdded  = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile($bModuleAdded);\n\t\t}\n\n\t\treturn $sDisplayChoices;\n\t}\n\n\tprotected function GetStepIndex()\n\t{\n\t\tswitch($this->sCurrentState)\n\t\t{\n\t\t\tcase 'start_install':\n\t\t\tcase 'start_upgrade':\n\t\t\t$index = 0;\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t$index = (integer)$this->sCurrentState;\n\t\t}\n\t\treturn $index;\n\t}\n\tprotected function GetStepInfo($idx = null)\n\t{\n\t\t$aStepInfo = null;\n\t\tif ($idx === null)\n\t\t{\n\t\t\t$index = $this->GetStepIndex();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$index = $idx;\n\t\t}\n\n\t\t$aSteps = array();\n\t\t$this->oWizard->SetParameter('additional_extensions_modules', json_encode(array())); // Default value, no additional extensions\n\n\t\tif (@file_exists($this->GetSourceFilePath()))\n\t\t{\n\t\t\t// Found an \"installation.xml\" file, let's us tis definition for the wizard\n\t\t\t$aParams = new XMLParameters($this->GetSourceFilePath());\n\t\t\t$aSteps = $aParams->Get('steps', array());\n\n\t\t\t// Additional step for the \"extensions\"\n\t\t\t$aStepDefinition = array(\n\t\t\t\t\t'title' => 'Extensions',\n\t\t\t\t\t'description' => '<h2>Select additional extensions to install. You can launch the installation again to install new extensions, but you cannot remove already installed extensions.</h2>',\n\t\t\t\t\t'banner' => '/images/extension.png',\n\t\t\t\t\t'options' => array()\n\t\t\t);\n\n\t\t\tforeach($this->oExtensionsMap->GetAllExtensions() as $oExtension)\n\t\t\t{\n\t\t\t\tif (($oExtension->sSource !== iTopExtension::SOURCE_WIZARD) && ($oExtension->bVisible) && (count($oExtension->aMissingDependencies) == 0))\n\t\t\t\t{\n\t\t\t\t\t$aStepDefinition['options'][] = array(\n\t\t\t\t\t\t\t'extension_code' => $oExtension->sCode,\n\t\t\t\t\t\t\t'title' => $oExtension->sLabel,\n\t\t\t\t\t\t\t'description' => $oExtension->sDescription,\n\t\t\t\t\t\t\t'more_info' => $oExtension->sMoreInfoUrl,\n\t\t\t\t\t\t\t'default' => true, // by default offer to install all modules\n\t\t\t\t\t\t\t'modules' => $oExtension->aModules,\n\t\t\t\t\t\t\t'mandatory' => $oExtension->bMandatory || ($oExtension->sSource === iTopExtension::SOURCE_REMOTE),\n\t\t\t\t\t\t\t'source_label' => $this->GetExtensionSourceLabel($oExtension->sSource),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Display this step of the wizard only if there is something to display\n\t\t\tif (count($aStepDefinition['options']) !== 0)\n\t\t\t{\n\t\t\t\t$aSteps[] = $aStepDefinition;\n\t\t\t\t$this->oWizard->SetParameter('additional_extensions_modules', json_encode($aStepDefinition['options']));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// No wizard configuration provided, build a standard one with just one big list\n\t\t\t$aStepDefinition = array(\n\t\t\t\t\t'title' => 'Modules Selection',\n\t\t\t\t\t'description' => '<h2>Select the modules to install. You can launch the installation again to install new modules, but you cannot remove already installed modules.</h2>',\n\t\t\t\t\t'banner' => '/images/modules.png',\n\t\t\t\t\t'options' => array()\n\t\t\t);\n\t\t\tforeach($this->oExtensionsMap->GetAllExtensions() as $oExtension)\n\t\t\t{\n\t\t\t\tif (($oExtension->bVisible) && (count($oExtension->aMissingDependencies) == 0))\n\t\t\t\t{\n\t\t\t\t\t$aStepDefinition['options'][] = array(\n\t\t\t\t\t\t\t'extension_code' => $oExtension->sCode,\n\t\t\t\t\t\t\t'title' => $oExtension->sLabel,\n\t\t\t\t\t\t\t'description' => $oExtension->sDescription,\n\t\t\t\t\t\t\t'more_info' => $oExtension->sMoreInfoUrl,\n\t\t\t\t\t\t\t'default' => true, // by default offer to install all modules\n\t\t\t\t\t\t\t'modules' => $oExtension->aModules,\n\t\t\t\t\t\t\t'mandatory' => $oExtension->bMandatory ||  ($oExtension->sSource !== iTopExtension::SOURCE_REMOTE),\n\t\t\t\t\t\t\t'source_label' => $this->GetExtensionSourceLabel($oExtension->sSource),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aSteps[] = $aStepDefinition;\n\t\t}\n\n\t\tif (array_key_exists($index, $aSteps))\n\t\t{\n\t\t\t$aStepInfo = $aSteps[$index];\n\t\t}\n\n\t\treturn $aStepInfo;\n\t}\n\n\tprotected function GetExtensionSourceLabel($sSource)\n\t{\n\t\tswitch($sSource)\n\t\t{\n\t\t\tcase iTopExtension::SOURCE_MANUAL:\n\t\t\t$sResult = 'Extension';\n\t\t\tbreak;\n\n\t\t\tcase iTopExtension::SOURCE_REMOTE:\n\t\t\t$sResult = (ITOP_APPLICATION == 'iTop') ? 'iTop-Hub' : 'ITSM-Designer';\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t$sResult = '';\n\t\t}\n\t\tif ($sResult == '')\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\treturn '<span style=\"display:inline-block;font-size:8pt;padding:3px;border-radius:4px;color:#fff;background-color:#1c94c4;margin-left:0.5em;margin-right:0.5em\">'.$sResult.'</span>';\n\t}\n\n\tprotected function DisplayOptions($oPage, $aStepInfo, $aSelectedComponents, $aDefaults, $sParentId = '', $bAllDisabled = false)\n\t{\n\t\t$aOptions = isset($aStepInfo['options']) ? $aStepInfo['options'] : array();\n\t\t$aAlternatives = isset($aStepInfo['alternatives']) ? $aStepInfo['alternatives'] : array();\n\t\t$index = 0;\n\n\t\t$sAllDisabled = '';\n\t\tif ($bAllDisabled)\n\t\t{\n\t\t\t$sAllDisabled = 'disabled data-disabled=\"disabled\" ';\n\t\t}\n\n\t\tforeach($aOptions as $index => $aChoice)\n\t\t{\n\t\t\t$sAttributes = '';\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\t$sDataId = 'data-id=\"'.htmlentities($aChoice['extension_code'], ENT_QUOTES, 'UTF-8').'\"';\n\t\t\t$sId = htmlentities($aChoice['extension_code'], ENT_QUOTES, 'UTF-8');\n\t\t\t$bIsDefault = array_key_exists($sChoiceId, $aDefaults);\n\t\t\t$bSelected = isset($aSelectedComponents[$sChoiceId]) && ($aSelectedComponents[$sChoiceId] == $sChoiceId);\n\t\t\t$bMandatory = (isset($aChoice['mandatory']) && $aChoice['mandatory']) || ($this->bUpgrade && $bIsDefault);\n\t\t\t$bDisabled = false;\n\t\t\tif ($bMandatory)\n\t\t\t{\n\t\t\t\t$oPage->add('<div class=\"choice\" '.$sDataId.'><input id=\"'.$sId.'\" checked disabled data-disabled=\"disabled\" type=\"checkbox\"'.$sAttributes.'/><input type=\"hidden\" name=\"choice['.$sChoiceId.']\" value=\"'.$sChoiceId.'\">&nbsp;');\n\t\t\t\t$bDisabled = true;\n\t\t\t}\n\t\t\telse if ($bSelected)\n\t\t\t{\n\t\t\t\t$oPage->add('<div class=\"choice\" '.$sDataId.'><input class=\"wiz-choice\" '.$sAllDisabled.'id=\"'.$sId.'\" name=\"choice['.$sChoiceId.']\" type=\"checkbox\" checked value=\"'.$sChoiceId.'\"/>&nbsp;');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oPage->add('<div class=\"choice\" '.$sDataId.'><input class=\"wiz-choice\" '.$sAllDisabled.'id=\"'.$sId.'\" name=\"choice['.$sChoiceId.']\" type=\"checkbox\" value=\"'.$sChoiceId.'\"/>&nbsp;');\n\t\t\t}\n\t\t\t$this->DisplayChoice($oPage, $aChoice, $aSelectedComponents, $aDefaults, $sChoiceId, $bDisabled);\n\t\t\t$oPage->add('</div>');\n\t\t\t$index++;\n\t\t}\n\t\t$sChoiceName = null;\n\t\t$sDisabled = '';\n\t\t$bDisabled = false;\n\t\t$sChoiceIdNone = null;\n\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t{\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\tif ($sChoiceName == null)\n\t\t\t{\n\t\t\t\t$sChoiceName = $sChoiceId; // All radios share the same name\n\t\t\t}\n\t\t\t$bIsDefault = array_key_exists($sChoiceName, $aDefaults) && ($aDefaults[$sChoiceName] == $sChoiceId);\n\t\t\t$bMandatory = (isset($aChoice['mandatory']) && $aChoice['mandatory']) || ($this->bUpgrade && $bIsDefault);\n\t\t\tif ($bMandatory || $bAllDisabled)\n\t\t\t{\n\t\t\t\t// One choice is mandatory, all alternatives are disabled\n\t\t\t\t$sDisabled = ' disabled data-disabled=\"disabled\"';\n\t\t\t\t$bDisabled = true;\n\t\t\t}\n\t\t\tif ( (!isset($aChoice['sub_options']) || (count($aChoice['sub_options']) == 0)) && (!isset($aChoice['modules']) || (count($aChoice['modules']) == 0)) )\n\t\t\t{\n\t\t\t\t$sChoiceIdNone = $sChoiceId; // the \"None\" / empty choice\n\t\t\t}\n\t\t}\n\n\t\tif (!array_key_exists($sChoiceName, $aDefaults) || ($aDefaults[$sChoiceName] == $sChoiceIdNone))\n\t\t{\n\t\t\t// The \"none\" choice does not disable the selection !!\n\t\t\t$sDisabled = '';\n\t\t\t$bDisabled = false;\n\t\t}\n\n\t\tforeach($aAlternatives as $index => $aChoice)\n\t\t{\n\t\t\t$sAttributes = '';\n\t\t\t$sChoiceId = $sParentId.self::$SEP.$index;\n\t\t\t$sDataId = 'data-id=\"'.htmlentities($aChoice['extension_code'], ENT_QUOTES, 'UTF-8').'\"';\n\t\t\t$sId = htmlentities($aChoice['extension_code'], ENT_QUOTES, 'UTF-8');\n\n\t\t\tif ($sChoiceName == null)\n\t\t\t{\n\t\t\t\t$sChoiceName = $sChoiceId; // All radios share the same name\n\t\t\t}\n\t\t\t$bIsDefault = array_key_exists($sChoiceName, $aDefaults) && ($aDefaults[$sChoiceName] == $sChoiceId);\n\t\t\t$bSelected = isset($aSelectedComponents[$sChoiceName]) && ($aSelectedComponents[$sChoiceName] == $sChoiceId);\n\t\t\tif ( !isset($aSelectedComponents[$sChoiceName]) && ($sChoiceIdNone != null))\n\t\t\t{\n\t\t\t\t// No choice selected, select the \"None\" option\n\t\t\t\t$bSelected = ($sChoiceId == $sChoiceIdNone);\n\t\t\t}\n\t\t\t$bMandatory = (isset($aChoice['mandatory']) && $aChoice['mandatory']) || ($this->bUpgrade && $bIsDefault);\n\n\t\t\tif ($bSelected)\n\t\t\t{\n\t\t\t\t$sAttributes = ' checked ';\n\t\t\t}\n\t\t\t$sHidden = '';\n\t\t\tif ($bMandatory && $bDisabled)\n\t\t\t{\n\t\t\t\t$sAttributes = ' checked ';\n\t\t\t\t$sHidden = '<input type=\"hidden\" name=\"choice['.$sChoiceName.']\" value=\"'.$sChoiceId.'\"/>';\n\t\t\t}\n\t\t\t$oPage->add('<div class=\"choice\" '.$sDataId.'><input class=\"wiz-choice\" id=\"'.$sId.'\" name=\"choice['.$sChoiceName.']\" type=\"radio\"'.$sAttributes.' value=\"'.$sChoiceId.'\"'.$sDisabled.'/>'.$sHidden.'&nbsp;');\n\t\t\t$this->DisplayChoice($oPage, $aChoice, $aSelectedComponents, $aDefaults, $sChoiceId, $bDisabled && !$bSelected);\n\t\t\t$oPage->add('</div>');\n\t\t\t$index++;\n\t\t}\n\t}\n\n\tprotected function DisplayChoice($oPage, $aChoice, $aSelectedComponents, $aDefaults, $sChoiceId, $bDisabled = false)\n\t{\n\t\t$sMoreInfo = (isset($aChoice['more_info']) && ($aChoice['more_info'] != '')) ? '<a target=\"_blank\" href=\"'.$aChoice['more_info'].'\">More information</a>' : '';\n\t\t$sSourceLabel = isset($aChoice['source_label']) ? $aChoice['source_label'] : '';\n\t\t$sId = htmlentities($aChoice['extension_code'], ENT_QUOTES, 'UTF-8');\n\t\t$oPage->add('<label for=\"'.$sId.'\"><b>'.htmlentities($aChoice['title'], ENT_QUOTES, 'UTF-8').'</b>'.$sSourceLabel.'</label> '.$sMoreInfo);\n\t\t$sDescription = isset($aChoice['description']) ? htmlentities($aChoice['description'], ENT_QUOTES, 'UTF-8') : '';\n\t\t$oPage->add('<div class=\"description\">'.$sDescription.'<span id=\"sub_choices'.$sId.'\">');\n\t\tif (isset($aChoice['sub_options']))\n\t\t{\n\t\t\t$this->DisplayOptions($oPage, $aChoice['sub_options'], $aSelectedComponents, $aDefaults, $sChoiceId, $bDisabled);\n\t\t}\n\t\t$oPage->add('</span></div>');\n\t}\n\n\tprotected function GetSourceFilePath()\n\t{\n\t\t$sSourceDir = $this->oWizard->GetParameter('source_dir');\n\t\treturn $sSourceDir.'/installation.xml';\n\t}\n\n}\n\n/**\n * Summary of the installation tasks\n */\nclass WizStepSummary extends WizardStep\n{\n\tprotected $bDependencyCheck = null;\n\tprotected $sDependencyIssue = null;\n\n\tprotected function CheckDependencies()\n\t{\n\t\tif (is_null($this->bDependencyCheck))\n\t\t{\n\t\t\t$aSelectedModules = json_decode($this->oWizard->GetParameter('selected_modules'), true);\n\t\t\t$this->bDependencyCheck = true;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSetupUtils::AnalyzeInstallation($this->oWizard, true, $aSelectedModules);\n\t\t\t}\n\t\t\tcatch(MissingDependencyException $e)\n\t\t\t{\n\t\t\t\t$this->bDependencyCheck = false;\n\t\t\t\t$this->sDependencyIssue = $e->getMessage();\n\t\t\t}\n\t\t}\n\t\treturn $this->bDependencyCheck;\n\t}\n\n\tpublic function GetTitle()\n\t{\n\t\t$sMode = $this->oWizard->GetParameter('mode', 'install');\n\t\tif ($sMode == 'install')\n\t\t{\n\t\t\treturn 'Ready to install';\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 'Ready to upgrade';\n\t\t}\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array('WizStepDone');\n\t}\n\n\t/**\n\t * Returns the label for the \" Next >> \" button\n\t * @return string The label for the button\n\t */\n\tpublic function GetNextButtonLabel()\n\t{\n\t\treturn ' Install ! ';\n\t}\n\n\tpublic function CanMoveForward()\n\t{\n\t\tif ($this->CheckDependencies())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => 'WizStepDone', 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t$oPage->add_style(\n<<<EOF\n#params_summary {\n\theight: 200px;\n\toverflow: auto;\n}\n#params_summary div {\n\twidth:100%;\n\tmargin-top:0;\n\tpadding-top: 0.5em;\n\tpadding-left: 0;\n}\n#params_summary div ul {\n\tmargin-left:0;\n\tpadding-left: 20px;\n}\n#params_summary div.closed ul {\n\tdisplay:none;\n}\n#params_summary div li {\n\tlist-style: none;\n\twidth: 100%;\n\tmargin-left:0;\n\tpadding-left: 0em;\n}\n.title {\n\tpadding-left: 20px;\n\tfont-weight: bold;\n\tcursor: pointer;\n\tbackground: url(../images/minus.gif) 2px 2px no-repeat;\n}\n#params_summary div.closed .title {\n\tbackground: url(../images/plus.gif) 2px 2px no-repeat;\n}\n#progress_content {\n\theight: 200px;\n\toverflow: auto;\n\ttext-align: center;\n}\n#installation_progress {\n\tdisplay: none;\n}\nEOF\n\t\t);\n\n\t\t$aInstallParams = $this->BuildConfig();\n\n\t\t$sMode = $aInstallParams['mode'];\n\n\t\t$sDestination = ITOP_APPLICATION.(($sMode == 'install') ? ' version '.ITOP_VERSION.' is about to be installed ' : ' is about to be upgraded ');\n\t\t$sDBDescription = ' <b>existing</b> database <b>'.$aInstallParams['database']['name'].'</b>';\n\t\tif (($sMode == 'install') && ($this->oWizard->GetParameter('create_db') == 'yes'))\n\t\t{\n\t\t\t$sDBDescription = ' <b>new</b> database <b>'.$aInstallParams['database']['name'].'</b>';\n\t\t}\n\t\t$sDestination .= 'into the '.$sDBDescription.' on the server <b>'.$aInstallParams['database']['server'].'</b>.';\n\t\t$oPage->add('<h2>'.$sDestination.'</h2>');\n\n\t\t$oPage->add('<fieldset id=\"summary\"><legend>Installation Parameters</legend>');\n\t\t$oPage->add('<div id=\"params_summary\">');\n\t\t$oPage->add('<div class=\"closed\"><span class=\"title\">Database Parameters</span><ul>');\n\t\t$oPage->add('<li>Server Name: '.$aInstallParams['database']['server'].'</li>');\n\t\t$oPage->add('<li>DB User Name: '.$aInstallParams['database']['user'].'</li>');\n\t\t$oPage->add('<li>DB user password: ***</li>');\n\t\tif (($sMode == 'install') && ($this->oWizard->GetParameter('create_db') == 'yes'))\n\t\t{\n\t\t\t$oPage->add('<li>Database Name: '.$aInstallParams['database']['name'].' (will be created)</li>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oPage->add('<li>Database Name: '.$aInstallParams['database']['name'].'</li>');\n\t\t}\n\t\tif ($aInstallParams['database']['prefix'] != '')\n\t\t{\n\t\t\t$oPage->add('<li>Prefix for the '.ITOP_APPLICATION.' tables: '.$aInstallParams['database']['prefix'].'</li>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oPage->add('<li>Prefix for the '.ITOP_APPLICATION.' tables: none</li>');\n\t\t}\n\t\t$oPage->add('</ul></div>');\n\n\t\t$oPage->add('<div><span class=\"title\">Data Model Configuration</span>');\n\t\t$oPage->add($this->oWizard->GetParameter('display_choices'));\n\t\t$oPage->add('</div>');\n\n\t\t$oPage->add('<div class=\"closed\"><span class=\"title\">Other Parameters</span><ul>');\n\t\tif ($sMode == 'install')\n\t\t{\n\t\t\t$oPage->add('<li>Default language: '.$aInstallParams['language'].'</li>');\n\t\t}\n\n\t\t$oPage->add('<li>URL to access the application: '.$aInstallParams['url'].'</li>');\n\t\t$oPage->add('<li>Graphviz\\' dot path: '.$aInstallParams['graphviz_path'].'</li>');\n\t\tif ($aInstallParams['sample_data'] == 'yes')\n\t\t{\n\t\t\t$oPage->add('<li>Sample data will be loaded into the database.</li>');\n\t\t}\n\t\tif ($aInstallParams['old_addon'])\n\t\t{\n\t\t\t$oPage->add('<li>Compatibility mode: Using the version 1.2 of the UserRightsProfiles add-on.</li>');\n\t\t}\n\t\t$oPage->add('</ul></div>');\n\n\t\tif ($sMode == 'install')\n\t\t{\n\t\t\t$oPage->add('<div class=\"closed\"><span class=\"title\">Admininistrator Account</span><ul>');\n\t\t\t$oPage->add('<li>Login: '.$aInstallParams['admin_account']['user'].'</li>');\n\t\t\t$oPage->add('<li>Password: '.$aInstallParams['admin_account']['pwd'].'</li>');\n\t\t\t$oPage->add('<li>Language: '.$aInstallParams['admin_account']['language'].'</li>');\n\t\t\t$oPage->add('</ul></div>');\n\t\t}\n\n\t\t$aMiscOptions = $aInstallParams['options'];\n\t\tif (count($aMiscOptions) > 0)\n\t\t{\n\t\t\t$oPage->add('<div class=\"closed\"><span class=\"title\">Miscellaneous Options</span><ul>');\n\t\t\tforeach($aMiscOptions as $sKey => $sValue)\n\t\t\t{\n\t\t\t\t$oPage->add('<li>'.$sKey.': '.$sValue.'</li>');\n\t\t\t}\n\t\t\t$oPage->add('</ul></div>');\n\n\t\t}\n\n\t\t$aSelectedModules = $aInstallParams['selected_modules'];\n\n\t\tif (isset($aMiscOptions['generate_config']))\n\t\t{\n\t\t\t$oDoc = new DOMDocument('1.0', 'UTF-8');\n\t\t\t$oDoc->preserveWhiteSpace = false;\n\t\t\t$oDoc->formatOutput = true;\n\t\t\t$oParams = new PHPParameters();\n\t\t\t$oParams->LoadFromHash($aInstallParams);\n\t\t\t$oParams->ToXML($oDoc, null, 'installation');\n\t\t\t$sXML = $oDoc->saveXML();\n\t\t\t$oPage->add('<div class=\"closed\"><span class=\"title\">XML Config file</span><ul><pre>');\n\t\t\t$oPage->add(htmlentities($sXML, ENT_QUOTES, 'UTF-8'));\n\t\t\t$oPage->add('</pre></ul></div>');\n\t\t}\n\n\t\t$oPage->add('</div>'); // params_summary\n\t\t$oPage->add('</fieldset>');\n\n\t\t$oPage->add('<fieldset id=\"installation_progress\"><legend>Progress of the installation</legend>');\n\t\t$oPage->add('<div id=\"progress_content\">');\n\t\t$oPage->add_linked_script('../setup/jquery.progression.js');\n\t\t$oPage->add('<p class=\"center\"><span id=\"setup_msg\">Ready to start...</span></p><div style=\"display:block;margin-left: auto; margin-right:auto;\" id=\"progress\">0%</div>');\n\t\t$oPage->add('</div>'); // progress_content\n\t\t$oPage->add('</fieldset>');\n\n\t\t$sJSONData = json_encode($aInstallParams);\n\t\t$oPage->add('<input type=\"hidden\" id=\"installer_parameters\" value=\"'.htmlentities($sJSONData, ENT_QUOTES, 'UTF-8').'\"/>');\n\n\t\t$sAuthentToken = $this->oWizard->GetParameter('authent', '');\n\t\t$oPage->add('<input type=\"hidden\" id=\"authent_token\" value=\"'.$sAuthentToken.'\"/>');\n\n\t\tif (!$this->CheckDependencies())\n\t\t{\n\t\t\t$oPage->error($this->sDependencyIssue);\n\t\t}\n\n\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#params_summary div\").addClass('closed');\n\t$(\"#params_summary .title\").click(function() { $(this).parent().toggleClass('closed'); } );\n\t$(\"#btn_next\").bind(\"click.install\", function(event) {\n\t\t\t$('#summary').hide();\n\t\t\t$('#installation_progress').show();\n\t\t\t$(this).prop('disabled', true);\t event.preventDefault(); ExecuteStep(\"\");\n\t});\n\t$(\"#wiz_form\").data(\"installation_status\", \"not started\")\nEOF\n\t\t);\n\t}\n\n\t/**\n\t * Prepare the parameters to execute the installation asynchronously\n\t * @return Hash A big hash array that can be converted to XML or JSON with all the needed parameters\n\t */\n\tprotected function BuildConfig()\n\t{\n\t\t$sMode = $this->oWizard->GetParameter('install_mode', 'install');\n\t\t$aSelectedModules = json_decode($this->oWizard->GetParameter('selected_modules'), true);\n\t\t$aSelectedExtensions = json_decode($this->oWizard->GetParameter('selected_extensions'), true);\n\t\t$sBackupDestination = '';\n\t\t$sPreviousConfigurationFile = '';\n\t\t$sDBName = $this->oWizard->GetParameter('db_name');\n\t\tif ($sMode == 'upgrade')\n\t\t{\n\t\t\t$sPreviousVersionDir = $this->oWizard->GetParameter('previous_version_dir', '');\n\t\t\tif (!empty($sPreviousVersionDir))\n\t\t\t{\n\t\t\t\t$aPreviousInstance = SetupUtils::GetPreviousInstance($sPreviousVersionDir);\n\t\t\t\tif ($aPreviousInstance['found'])\n\t\t\t\t{\n\t\t\t\t\t$sPreviousConfigurationFile = $aPreviousInstance['configuration_file'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($this->oWizard->GetParameter('db_backup', false))\n\t\t\t{\n\t\t\t\t$sBackupDestination = $this->oWizard->GetParameter('db_backup_path', '');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\n\t\t\t$sDBNewName = $this->oWizard->GetParameter('db_new_name', '');\n\t\t\tif ($sDBNewName != '')\n\t\t\t{\n\t\t\t\t$sDBName = $sDBNewName; // Database will be created\n\t\t\t}\n\t\t}\n\n\t\t$sSourceDir = $this->oWizard->GetParameter('source_dir');\n\t\t$aCopies = array();\n\t\tif (($sMode == 'upgrade') && ($this->oWizard->GetParameter('upgrade_type') == 'keep-previous'))\n\t\t{\n\t\t\t$sPreviousVersionDir = $this->oWizard->GetParameter('previous_version_dir');\n\t\t\t$aCopies[] = array('source' => $sSourceDir, 'destination' => 'modules'); // Source is an absolute path, destination is relative to APPROOT\n\t\t\t$aCopies[] = array('source' => $sPreviousVersionDir.'/portal', 'destination' => 'portal'); // Source is an absolute path, destination is relative to APPROOT\n\t\t\t$sSourceDir = APPROOT.'modules';\n\t\t}\n\n\t\tif (($sMode == 'upgrade'))\n\t\t{\n\t\t\t// Copy the previous extensions, if any\n\t\t\t$sPreviousExtensionsDir = $this->oWizard->GetParameter('copy_extensions_from');\n\t\t\tif (is_dir($sPreviousExtensionsDir))\n\t\t\t{\n\t\t\t\t// Copy the extensions one by one to merge them with the existing extensions in /extensions\n\t\t\t\t$aExtensions = glob($sPreviousExtensionsDir.'/*', GLOB_ONLYDIR);\n\t\t\t\tforeach($aExtensions as $sDirPath)\n\t\t\t\t{\n\t\t\t\t\t$sExtName = basename($sDirPath);\n\t\t\t\t\t$aCopies[] = array('source' => $sDirPath, 'destination' => 'extensions/'.$sExtName); // Source is an absolute path, destination is relative to APPROOT\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$aInstallParams = array (\n\t\t\t'mode' => $sMode,\n\t\t\t'preinstall' => array (\n\t\t\t\t'copies' => $aCopies,\n\t\t\t\t// 'backup' => see below\n\t\t\t),\n\t\t\t'source_dir' => str_replace(APPROOT, '', $sSourceDir),\n\t\t\t'datamodel_version' => $this->oWizard->GetParameter('datamodel_version'), //TODO: let the installer compute this automatically...\n\t\t\t'previous_configuration_file' => $sPreviousConfigurationFile,\n\t\t\t'extensions_dir' => 'extensions',\n\t\t\t'target_env' => 'production',\n\t\t\t'workspace_dir' => '',\n\t\t\t'database' => array (\n\t\t\t\t'server' => $this->oWizard->GetParameter('db_server'),\n\t\t\t\t'user' => $this->oWizard->GetParameter('db_user'),\n\t\t\t\t'pwd' => $this->oWizard->GetParameter('db_pwd'),\n\t\t\t\t'name' => $sDBName,\n\t\t\t\t'db_tls_enabled' => $this->oWizard->GetParameter('db_tls_enabled'),\n\t\t\t\t'db_tls_ca' => $this->oWizard->GetParameter('db_tls_ca'),\n\t\t\t\t'prefix' => $this->oWizard->GetParameter('db_prefix'),\n\t\t\t),\n\t\t\t'url' => $this->oWizard->GetParameter('application_url'),\n\t\t\t'graphviz_path' => $this->oWizard->GetParameter('graphviz_path'),\n\t\t\t'admin_account' => array (\n\t\t\t\t'user' => $this->oWizard->GetParameter('admin_user'),\n\t\t\t\t'pwd' => $this->oWizard->GetParameter('admin_pwd'),\n\t\t\t\t'language' => $this->oWizard->GetParameter('admin_language'),\n\t\t\t),\n\t\t\t'language' => $this->oWizard->GetParameter('default_language'),\n\t\t\t'selected_modules' =>  $aSelectedModules,\n\t\t\t'selected_extensions' =>  $aSelectedExtensions,\n\t\t\t'sample_data' => ($this->oWizard->GetParameter('sample_data', '') == 'yes') ? true : false ,\n\t\t\t'old_addon' => $this->oWizard->GetParameter('old_addon', false), // whether or not to use the \"old\" userrights profile addon\n\t\t\t'options' => json_decode($this->oWizard->GetParameter('misc_options', '[]'), true),\n\t\t\t'mysql_bindir' => $this->oWizard->GetParameter('mysql_bindir'),\n\t\t);\n\n\t\tif ($sBackupDestination != '')\n\t\t{\n\t\t\t$aInstallParams['preinstall']['backup'] = array (\n\t\t\t\t'destination' => $sBackupDestination,\n\t\t\t\t'configuration_file' => $sPreviousConfigurationFile,\n\t\t\t);\n\t\t}\n\n\t\treturn $aInstallParams;\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\t$oParameters = new PHPParameters();\n\t\t$sStep = $aParameters['installer_step'];\n\t\t$sJSONParameters = $aParameters['installer_config'];\n\t\t$oParameters->LoadFromHash(json_decode($sJSONParameters, true /* bAssoc */));\n\t\t$oInstaller = new ApplicationInstaller($oParameters);\n\t\t$aRes = $oInstaller->ExecuteStep($sStep);\n\t\tif (($aRes['status'] != ApplicationInstaller::ERROR) && ($aRes['next-step'] != ''))\n\t\t{\n\t\t\t// Tell the web page to move the progress bar and to launch the next step\n\t\t\t$sMessage = addslashes(htmlentities($aRes['next-step-label'], ENT_QUOTES, 'UTF-8'));\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#wiz_form\").data(\"installation_status\", \"running\");\n\tWizardUpdateButtons();\n\t$('#setup_msg').html('$sMessage');\n\t$('#progress').progression( {Current:{$aRes['percentage-completed']}, Maximum: 100, aBackgroundImg: GetAbsoluteUrlAppRoot()+'setup/orange-progress.gif', aTextColor: '#000000'} );\n\t\n\t//$(\"#percentage\").html('{$aRes['percentage-completed']} % completed<br/>{$aRes['next-step-label']}');\n\tExecuteStep('{$aRes['next-step']}');\nEOF\n\t\t\t);\n\t\t}\n\t\telse if ($aRes['status'] != ApplicationInstaller::ERROR)\n\t\t{\n\t\t\t// Installation complete, move to the next step of the wizard\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#wiz_form\").data(\"installation_status\", \"completed\");\n\t$('#progress').progression( {Current:100, Maximum: 100, aBackgroundImg: GetAbsoluteUrlAppRoot()+'setup/orange-progress.gif', aTextColor: '#000000'} );\n\tWizardUpdateButtons();\n\t$(\"#btn_next\").unbind(\"click.install\");\n\t$(\"#btn_next\").click();\nEOF\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sMessage = addslashes(htmlentities($aRes['message'], ENT_QUOTES, 'UTF-8'));\n\t\t\t$sMessage = str_replace(\"\\n\", '<br>', $sMessage);\n\t\t\t$oPage->add_ready_script(\n<<<EOF\n\t$(\"#wiz_form\").data(\"installation_status\", \"error\");\n\tWizardUpdateButtons();\n\t$('#setup_msg').html('$sMessage');\nEOF\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveForward()\n\t{\n\t\treturn 'return (($(\"#wiz_form\").data(\"installation_status\") === \"not started\") || ($(\"#wiz_form\").data(\"installation_status\") === \"completed\"));';\n\t}\n\n\t/**\n\t * Tells whether the \"Next\" button should be enabled interactively\n\t * @return string A piece of javascript code returning either true or false\n\t */\n\tpublic function JSCanMoveBackward()\n\t{\n\t\treturn 'var sStatus = $(\"#wiz_form\").data(\"installation_status\"); return ((sStatus === \"not started\") || (sStatus === \"error\"));';\n\t}\n\n}\n\n/**\n * Summary of the installation tasks\n */\nclass WizStepDone extends WizardStep\n{\n\tpublic function GetTitle()\n\t{\n\t\treturn 'Done';\n\t}\n\n\tpublic function GetPossibleSteps()\n\t{\n\t\treturn array();\n\t}\n\n\tpublic function ProcessParams($bMoveForward = true)\n\t{\n\t\treturn array('class' => '', 'state' => '');\n\t}\n\n\tpublic function Display(WebPage $oPage)\n\t{\n\t\t// Check if there are some manual steps required:\n\t\t$aManualSteps = array();\n\t\t$aAvailableModules = SetupUtils::AnalyzeInstallation($this->oWizard);\n\n\t\t$sRootUrl = utils::GetAbsoluteUrlAppRoot();\n\t\t$aSelectedModules = json_decode($this->oWizard->GetParameter('selected_modules'), true);\n\t\tforeach($aSelectedModules as $sModuleId)\n\t\t{\n\t\t\tif (!empty($aAvailableModules[$sModuleId]['doc.manual_setup']))\n\t\t\t{\n\t\t\t\t$aManualSteps[$aAvailableModules[$sModuleId]['label']] = $sRootUrl.$aAvailableModules[$sModuleId]['doc.manual_setup'];\n\t\t\t}\n\t\t}\n\t\tif (count($aManualSteps) > 0)\n\t\t{\n\t\t\t$oPage->add(\"<h2>Manual operations required</h2>\");\n\t\t\t$oPage->p(\"In order to complete the installation, the following manual operations are required:\");\n\t\t\tforeach($aManualSteps as $sModuleLabel => $sUrl)\n\t\t\t{\n\t\t\t\t$oPage->p(\"<a href=\\\"$sUrl\\\" target=\\\"_blank\\\">Manual instructions for $sModuleLabel</a>\");\n\t\t\t}\n\t\t\t$oPage->add(\"<h2>Congratulations for installing \".ITOP_APPLICATION.\"</h2>\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oPage->add(\"<h2>Congratulations for installing \".ITOP_APPLICATION.\"</h2>\");\n\t\t\t$oPage->ok(\"The installation completed successfully.\");\n\t\t}\n\n\t\tif (($this->oWizard->GetParameter('mode', '') == 'upgrade') && $this->oWizard->GetParameter('db_backup', false) && $this->oWizard->GetParameter('authent', false))\n\t\t{\n\t\t\t$sBackupDestination = $this->oWizard->GetParameter('db_backup_path', '');\n\t\t\tif (file_exists($sBackupDestination.'.tar.gz'))\n\t\t\t{\n\t\t\t\t// To mitigate security risks: pass only the filename without the extension, the download will add the extension itself\n\t\t\t\t$oPage->p('Your backup is ready');\n\t\t\t\t$oPage->p('<a style=\"background:transparent;\" href=\"'.utils::GetAbsoluteUrlAppRoot().'setup/ajax.dataloader.php?operation=async_action&step_class=WizStepDone&params[backup]='.urlencode($sBackupDestination).'&authent='.$this->oWizard->GetParameter('authent','').'\" target=\"_blank\"><img src=\"../images/tar.png\" style=\"border:0;vertical-align:middle;\">&nbsp;Download '.basename($sBackupDestination).'</a>');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oPage->p('<img src=\"../images/error.png\"/>&nbsp;Warning: Backup creation failed !');\n\t\t\t}\n\t\t}\n\n\t\t// Form goes here.. No back button since the job is done !\n\t\t$oPage->add('<table id=\"placeholder\" style=\"width:600px;border:0;padding:0;\"><tr>');\n\t\t$oPage->add(\"<td><a style=\\\"background:transparent;padding:0;\\\" title=\\\"Free: Register your iTop version.\\\" href=\\\"http://www.combodo.com/register?product=iTop&version=\".urlencode(ITOP_VERSION.\" revision \".ITOP_REVISION).\"\\\" target=\\\"_blank\\\"><img style=\\\"border:0\\\" src=\\\"../images/setup-register.gif\\\"/></td></a>\");\n\t\t$oPage->add(\"<td><a style=\\\"background:transparent;padding:0;\\\" title=\\\"Get Professional Support from Combodo\\\" href=\\\"http://www.combodo.com/itopsupport\\\" target=\\\"_blank\\\"><img style=\\\"border:0\\\" src=\\\"../images/setup-support.gif\\\"/></td></a>\");\n\t\t$oPage->add(\"<td><a style=\\\"background:transparent;padding:0;\\\" title=\\\"Get Professional Training from Combodo\\\" href=\\\"http://www.combodo.com/itoptraining\\\" target=\\\"_blank\\\"><img style=\\\"border:0\\\" src=\\\"../images/setup-training.gif\\\"/></td></a>\");\n\t\t$oPage->add('</tr></table>');\n\n\t\t$oConfig = new Config(utils::GetConfigFilePath());\n\t\t// Load the data model only, in order to load env-production/core/main.php to get the XML parameters (needed by GetModuleSettings below)\n\t\t// But main.php may also contain classes (defined without any module), and thus requiring the full data model\n\t\t// to be loaded to prevent \"class not found\" errors...\n\t\t$oProductionEnv = new RunTimeEnvironment('production');\n\t\t$oProductionEnv->InitDataModel($oConfig, true);\n\t\t$sIframeUrl = $oConfig->GetModuleSetting('itop-hub-connector', 'setup_url', '');\n\n\t\tif ($sIframeUrl != '')\n\t\t{\n\t\t\t$oPage->add('<iframe id=\"fresh_content\" style=\"border:0; width:100%; display:none;\" src=\"'.$sIframeUrl.'\"></iframe>');\n\n\t\t\t$oPage->add_script(\"window.addEventListener('message', function(event) {\n\t\t\t\tif (event.data === 'itophub_load_completed')\n\t\t\t\t{\n\t\t\t\t\t$('#fresh_content').height($('#placeholder').height());\n\t\t\t\t\t$('#placeholder').hide();\n\t\t\t\t\t$('#fresh_content').show();\n\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\");\n\t\t}\n\n\t\t$sForm = '<form method=\"post\" action=\"'.$this->oWizard->GetParameter('application_url').'pages/UI.php\">';\n\t\t$sForm .= '<input type=\"hidden\" name=\"auth_user\" value=\"'.htmlentities($this->oWizard->GetParameter('admin_user'), ENT_QUOTES, 'UTF-8').'\">';\n\t\t$sForm .= '<input type=\"hidden\" name=\"auth_pwd\" value=\"'.htmlentities($this->oWizard->GetParameter('admin_pwd'), ENT_QUOTES, 'UTF-8').'\">';\n\t\t$sForm .= \"<p style=\\\"text-align:center;width:100%\\\"><button id=\\\"enter_itop\\\" type=\\\"submit\\\">Enter \".ITOP_APPLICATION.\"</button></p>\";\n\t\t$sForm .= '</form>';\n\t\t$sPHPVersion = phpversion();\n\t\t$sMySQLVersion = SetupUtils::GetMySQLVersion(\n\t\t\t$this->oWizard->GetParameter('db_server'),\n\t\t\t$this->oWizard->GetParameter('db_user'),\n\t\t\t$this->oWizard->GetParameter('db_pwd'),\n\t\t\t$this->oWizard->GetParameter('db_tls_enabled'),\n\t\t\t$this->oWizard->GetParameter('db_tls_ca')\n\t\t);\n\t\t$aParameters = json_decode($this->oWizard->GetParameter('selected_components', '{}'), true);\n\t\t$sCompactWizChoices = array();\n\t\tforeach($aParameters as $iStep => $aChoices)\n\t\t{\n\t\t\t$aShortChoices = array();\n\t\t\tforeach($aChoices as $sChoiceCode)\n\t\t\t{\n\t\t\t\t$sShortCode = str_replace('_', '', $sChoiceCode);\n\t\t\t\t$aShortChoices[] = $sShortCode;\n\t\t\t}\n\t\t\t$sCompactWizChoices[] = implode(' ',$aShortChoices);\n\t\t}\n\t\t$sInstallMode = 'i';\n\t\tif ($this->oWizard->GetParameter('install_mode', 'install') == 'upgrade')\n\t\t{\n\t\t\tif (!$this->oWizard->GetParameter('license'))\n\t\t\t{\n\t\t\t\t// When the version does not change we don't ask for the licence again\n\t\t\t\t$sInstallMode = 'r';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// An actual upgrade\n\t\t\t\t$sInstallMode = 'u';\n\t\t\t}\n\n\t\t}\n\t\t$aUrlParams = array(\n\t\t\t'p' => ITOP_APPLICATION,\n\t\t\t'v' => ITOP_VERSION,\n\t\t\t'php' => $sPHPVersion,\n\t\t\t'mysql' => $sMySQLVersion,\n\t\t\t'os' => PHP_OS,\n\t\t\t's' => ($this->oWizard->GetParameter('sample_data', '') == 'yes') ? 1 : 0 ,\n\t\t\t'l' => $this->oWizard->GetParameter('default_language'),\n\t\t\t'i' => $sInstallMode,\n\t\t\t'w' => json_encode($sCompactWizChoices),\n\t\t);\n\t\t$aSafeParams = array();\n\t\tforeach($aUrlParams as $sCode => $sValue)\n\t\t{\n\t\t\t$aSafeParams[] = $sCode.'='.urlencode($sValue);\n\t\t}\n\t\t$sImgUrl = 'http://www.combodo.com/stats/?'.implode('&', $aSafeParams);\n\n\t\t$aAdditionalModules = array();\n\t\tforeach(json_decode($this->oWizard->GetParameter('additional_extensions_modules'), true) as $idx => $aModuleInfo)\n\t\t{\n\t\t\tif (in_array('_'.$idx, $aParameters[count($aParameters)-1]))\n\t\t\t{\n\t\t\t\t// Extensions \"choices\" can now have more than one module\n\t\t\t\tforeach($aModuleInfo['modules'] as $sModuleName)\n\t\t\t\t{\n\t\t\t\t\t$aAdditionalModules[] = $sModuleName;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$idx = 0;\n\t\t$aReportedModules = array();\n\t\twhile($idx < count($aAdditionalModules) && (strlen($sImgUrl.'&m='.urlencode(implode(' ', $aReportedModules))) < 2000)) // reasonable limit for the URL: 2000 chars\n\t\t{\n\t\t\t$aReportedModules[] = $aAdditionalModules[$idx];\n\t\t\t$idx++;\n\t\t}\n\t\t$sImgUrl .= '&m='.urlencode(implode(' ', $aReportedModules));\n\n\t\t$oPage->add('<img style=\"border:0\" src=\"'.$sImgUrl.'\"/>');\n\t\t$sForm = addslashes($sForm);\n\t\t$oPage->add_ready_script(\"$('#wiz_form').after('$sForm');\");\n\t\tSetupUtils::EraseSetupToken();\n\t}\n\n\tpublic function CanMoveForward()\n\t{\n\t\treturn false;\n\t}\n\tpublic function CanMoveBackward()\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * Tells whether this step of the wizard requires that the configuration file be writable\n\t * @return bool True if the wizard will possibly need to modify the configuration at some point\n\t */\n\tpublic function RequiresWritableConfig()\n\t{\n\t\treturn false; //This step executes once the config was written and secured\n\t}\n\n\tpublic function AsyncAction(WebPage $oPage, $sCode, $aParameters)\n\t{\n\t\t// For security reasons: add the extension now so that this action can be used to read *only* .tar.gz files from the disk...\n\t\t$sBackupFile = $aParameters['backup'].'.tar.gz';\n\t\tif (file_exists($sBackupFile))\n\t\t{\n\t\t\t// Make sure there is NO output at all before our content, otherwise the document will be corrupted\n\t\t\t$sPreviousContent = ob_get_clean();\n\t\t\t$oPage->SetContentType('application/gzip');\n\t\t\t$oPage->SetContentDisposition('attachment', basename($sBackupFile));\n\t\t\t$oPage->add(file_get_contents($sBackupFile));\n\t\t}\n\t}\n}\n"], "filenames": ["setup/ajax.dataloader.php", "setup/index.php", "setup/setuputils.class.inc.php", "setup/wizardcontroller.class.inc.php", "setup/wizardsteps.class.inc.php"], "buggy_code_start_loc": [150, 32, 1828, 108, 60], "buggy_code_end_loc": [211, 62, 1828, 184, 2645], "fixing_code_start_loc": [150, 33, 1829, 108, 60], "fixing_code_end_loc": [205, 69, 1898, 186, 2638], "type": "CWE-918", "message": "iTop is an open source web based IT Service Management tool. In affected versions an attacker can call the system setup without authentication. Given specific parameters this can lead to SSRF. This issue has been resolved in versions 2.6.5 and 2.7.5 and later", "other": {"cve": {"id": "CVE-2021-32663", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-19T18:15:07.783", "lastModified": "2021-10-22T20:49:49.767", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "iTop is an open source web based IT Service Management tool. In affected versions an attacker can call the system setup without authentication. Given specific parameters this can lead to SSRF. This issue has been resolved in versions 2.6.5 and 2.7.5 and later"}, {"lang": "es", "value": "iTop es una herramienta de Administraci\u00f3n de Servicios de TI de c\u00f3digo abierto basada en la web. En las versiones afectadas un atacante puede llamar a la configuraci\u00f3n del sistema sin autenticaci\u00f3n. Dados los par\u00e1metros espec\u00edficos esto puede conllevar a un ataque de tipo SSRF. Este problema ha sido resuelto en versiones 2.6.5 y 2.7.5 y posteriores"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:*:*:*:*:-:*:*:*", "versionEndExcluding": "2.6.5", "matchCriteriaId": "AAB96E6A-21B3-40F1-9833-629464EE4710"}, {"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:*:*:*:*:-:*:*:*", "versionStartIncluding": "2.7.0", "versionEndExcluding": "2.7.5", "matchCriteriaId": "CD3B1BB6-B0AB-49F6-A327-DAC73045502B"}]}]}], "references": [{"url": "https://github.com/Combodo/iTop/commit/43daa2ef088bf928a2386fa19324628c3f19b807", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Combodo/iTop/commit/6be9a87c150978752bc68baae1a5c4833ddadfec", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Combodo/iTop/security/advisories/GHSA-ghqc-r8f6-q9m9", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Combodo/iTop/commit/43daa2ef088bf928a2386fa19324628c3f19b807"}}