{"buggy_code": ["/*\n * The contents of this file are subject to the OpenMRS Public License\n * Version 1.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n * http://license.openmrs.org\n *\n * Software distributed under the License is distributed on an \"AS IS\"\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n * License for the specific language governing rights and limitations\n * under the License.\n *\n * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n */\n\npackage org.openmrs.module.htmlformentryui;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.openmrs.Encounter;\nimport org.openmrs.EncounterType;\nimport org.openmrs.Form;\nimport org.openmrs.Patient;\nimport org.openmrs.Visit;\nimport org.openmrs.api.FormService;\nimport org.openmrs.module.htmlformentry.HtmlForm;\nimport org.openmrs.module.htmlformentry.HtmlFormEntryService;\nimport org.openmrs.module.htmlformentry.HtmlFormEntryUtil;\nimport org.openmrs.ui.framework.SimpleObject;\nimport org.openmrs.ui.framework.UiUtils;\nimport org.openmrs.ui.framework.resource.ResourceFactory;\nimport org.openmrs.util.OpenmrsUtil;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\n\nimport java.io.IOException;\n\n/**\n *\n */\npublic class HtmlFormUtil {\n\t\n\tpublic static HtmlForm getHtmlFormFromUiResource(ResourceFactory resourceFactory, FormService formService,\n\t        HtmlFormEntryService htmlFormEntryService, String providerAndPath, Encounter encounter) throws IOException {\n\t\tint ind = providerAndPath.indexOf(':');\n\t\tString provider = providerAndPath.substring(0, ind);\n\t\tString path = providerAndPath.substring(ind + 1);\n\t\treturn getHtmlFormFromUiResource(resourceFactory, formService, htmlFormEntryService, provider, path, encounter);\n\t}\n\t\n\tpublic static HtmlForm getHtmlFormFromUiResource(ResourceFactory resourceFactory, FormService formService,\n\t        HtmlFormEntryService htmlFormEntryService, String providerName, String resourcePath, Encounter encounter)\n\t        throws IOException {\n\t\t\n\t\tString xml = null;\n\t\t\n\t\t// first, see if there is a specific version of the form referenced by version number\n\t\tif (encounter != null && encounter.getForm() != null && encounter.getForm().getVersion() != null) {\n\t\t\tString resourcePathWithVersion = resourcePath.replaceAll(\"\\\\.xml$\", \"\") + \"_v\" + encounter.getForm().getVersion()\n\t\t\t        + \".xml\";\n\t\t\txml = resourceFactory.getResourceAsString(providerName, resourcePathWithVersion);\n\t\t\t// should be of the format <htmlform formUuid=\"...\" formVersion=\"...\" formEncounterType=\"...\">...</htmlform>\n\t\t}\n\t\t\n\t\t// if not, use the bare resource path (without version number appended) to fetch the form\n\t\tif (xml == null) {\n\t\t\txml = resourceFactory.getResourceAsString(providerName, resourcePath);\n\t\t\t\n\t\t}\n\t\t\n\t\tif (xml == null) {\n\t\t\tthrow new IllegalArgumentException(\"No resource found at \" + providerName + \":\" + resourcePath);\n\t\t}\n\t\t\n\t\treturn getHtmlFormFromResourceXml(formService, htmlFormEntryService, xml);\n\t}\n\t\n\t// the new method above with \"encounter\" is preferred if an encounter is available, see: https://issues.openmrs.org/browse/HTML-768\n\tpublic static HtmlForm getHtmlFormFromUiResource(ResourceFactory resourceFactory, FormService formService,\n\t        HtmlFormEntryService htmlFormEntryService, String providerAndPath) throws IOException {\n\t\treturn getHtmlFormFromUiResource(resourceFactory, formService, htmlFormEntryService, providerAndPath,\n\t\t    (Encounter) null);\n\t}\n\t\n\t// the new method above with \"encounter\" is preferred if an encounter is available, see: https://issues.openmrs.org/browse/HTML-768\n\tpublic static HtmlForm getHtmlFormFromUiResource(ResourceFactory resourceFactory, FormService formService,\n\t        HtmlFormEntryService htmlFormEntryService, String providerName, String resourcePath) throws IOException {\n\t\treturn getHtmlFormFromUiResource(resourceFactory, formService, htmlFormEntryService, providerName, resourcePath,\n\t\t    null);\n\t}\n\t\n\tpublic static HtmlForm getHtmlFormFromResourceXml(FormService formService, HtmlFormEntryService htmlFormEntryService,\n\t        String xml) {\n\t\ttry {\n\t\t\tDocument doc = HtmlFormEntryUtil.stringToDocument(xml);\n\t\t\tNode htmlFormNode = HtmlFormEntryUtil.findChild(doc, \"htmlform\");\n\t\t\tString formUuid = getAttributeValue(htmlFormNode, \"formUuid\");\n\t\t\tif (formUuid == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"formUuid is required\");\n\t\t\t}\n\t\t\tForm form = formService.getFormByUuid(formUuid);\n\t\t\tboolean needToSaveForm = false;\n\t\t\tif (form == null) {\n\t\t\t\tform = new Form();\n\t\t\t\tform.setUuid(formUuid);\n\t\t\t\tneedToSaveForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tString formName = getAttributeValue(htmlFormNode, \"formName\");\n\t\t\tif (!OpenmrsUtil.nullSafeEquals(form.getName(), formName)) {\n\t\t\t\tform.setName(formName);\n\t\t\t\tneedToSaveForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tString formDescription = getAttributeValue(htmlFormNode, \"formDescription\");\n\t\t\tif (!OpenmrsUtil.nullSafeEquals(form.getDescription(), formDescription)) {\n\t\t\t\tform.setDescription(formDescription);\n\t\t\t\tneedToSaveForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tString formVersion = getAttributeValue(htmlFormNode, \"formVersion\");\n\t\t\tif (!OpenmrsUtil.nullSafeEquals(form.getVersion(), formVersion)) {\n\t\t\t\tform.setVersion(formVersion);\n\t\t\t\tneedToSaveForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tString formEncounterType = getAttributeValue(htmlFormNode, \"formEncounterType\");\n\t\t\tEncounterType encounterType = formEncounterType == null ? null\n\t\t\t        : HtmlFormEntryUtil.getEncounterType(formEncounterType);\n\t\t\tif (encounterType != null && !OpenmrsUtil.nullSafeEquals(form.getEncounterType(), encounterType)) {\n\t\t\t\tform.setEncounterType(encounterType);\n\t\t\t\tneedToSaveForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (needToSaveForm) {\n\t\t\t\tformService.saveForm(form);\n\t\t\t}\n\t\t\t\n\t\t\tHtmlForm htmlForm = htmlFormEntryService.getHtmlFormByForm(form);\n\t\t\tboolean needToSaveHtmlForm = false;\n\t\t\tif (htmlForm == null) {\n\t\t\t\thtmlForm = new HtmlForm();\n\t\t\t\thtmlForm.setForm(form);\n\t\t\t\tneedToSaveHtmlForm = true;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t// if there is a html form uuid specified, make sure the htmlform uuid is set to that value\n\t\t\tString htmlformUuid = getAttributeValue(htmlFormNode, \"htmlformUuid\");\n\t\t\tif (StringUtils.isNotBlank(htmlformUuid) && !OpenmrsUtil.nullSafeEquals(htmlformUuid, htmlForm.getUuid())) {\n\t\t\t\thtmlForm.setUuid(htmlformUuid);\n\t\t\t\tneedToSaveHtmlForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (!OpenmrsUtil.nullSafeEquals(trim(htmlForm.getXmlData()), trim(xml))) { // trim because if the file ends with a newline the db will have trimmed it\n\t\t\t\thtmlForm.setXmlData(xml);\n\t\t\t\tneedToSaveHtmlForm = true;\n\t\t\t}\n\t\t\tif (needToSaveHtmlForm) {\n\t\t\t\thtmlFormEntryService.saveHtmlForm(htmlForm);\n\t\t\t}\n\t\t\treturn htmlForm;\n\t\t\t\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new IllegalArgumentException(\"Failed to parse XML and build Form and HtmlForm\", e);\n\t\t}\n\t}\n\t\n\tpublic static String determineReturnUrl(String returnUrl, String returnProviderName, String returnPageName,\n\t        Patient patient, Visit visit, UiUtils ui) {\n\t\t\n\t\tSimpleObject returnParams = null;\n\t\t\n\t\tif (patient != null) {\n\t\t\tif (visit == null) {\n\t\t\t\treturnParams = SimpleObject.create(\"patientId\", patient.getId());\n\t\t\t} else {\n\t\t\t\treturnParams = SimpleObject.create(\"patientId\", patient.getId(), \"visitId\", visit.getId());\n\t\t\t}\n\t\t}\n\t\t\n\t\t// first see if a return provider and page have been specified\n\t\tif (org.apache.commons.lang.StringUtils.isNotBlank(returnProviderName)\n\t\t        && org.apache.commons.lang.StringUtils.isNotBlank(returnPageName)) {\n\t\t\treturn ui.pageLink(returnProviderName, returnPageName, returnParams);\n\t\t}\n\t\t\n\t\t// if not, see if a returnUrl has been specified\n\t\tif (org.apache.commons.lang.StringUtils.isNotBlank(returnUrl)) {\n\t\t\treturn returnUrl;\n\t\t}\n\t\t\n\t\t// otherwise return to patient dashboard if we have a patient, but index if not\n\t\tif (returnParams != null && returnParams.containsKey(\"patientId\")) {\n\t\t\treturn ui.pageLink(\"coreapps\", \"patientdashboard/patientDashboard\", returnParams);\n\t\t} else {\n\t\t\treturn \"/\" + ui.contextPath() + \"index.html\";\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static String determineReturnLabel(String returnLabel, Patient patient, UiUtils ui) {\n\t\t\n\t\tif (org.apache.commons.lang.StringUtils.isNotBlank(returnLabel)) {\n\t\t\treturn ui.message(returnLabel);\n\t\t} else {\n\t\t\treturn ui.escapeJs(ui.format(patient));\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static String trim(String s) {\n\t\treturn s == null ? null : s.trim();\n\t}\n\t\n\tprivate static String getAttributeValue(Node htmlForm, String attributeName) {\n\t\tNode item = htmlForm.getAttributes().getNamedItem(attributeName);\n\t\treturn item == null ? null : item.getNodeValue();\n\t}\n\t\n}\n", "/*\n * The contents of this file are subject to the OpenMRS Public License\n * Version 1.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n * http://license.openmrs.org\n *\n * Software distributed under the License is distributed on an \"AS IS\"\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n * License for the specific language governing rights and limitations\n * under the License.\n *\n * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n */\n\npackage org.openmrs.module.htmlformentryui.fragment.controller.htmlform;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.joda.time.DateMidnight;\nimport org.openmrs.Encounter;\nimport org.openmrs.Form;\nimport org.openmrs.Patient;\nimport org.openmrs.Visit;\nimport org.openmrs.api.FormService;\nimport org.openmrs.api.context.Context;\nimport org.openmrs.api.context.ContextAuthenticationException;\nimport org.openmrs.module.ModuleFactory;\nimport org.openmrs.module.appframework.feature.FeatureToggleProperties;\nimport org.openmrs.module.appui.UiSessionContext;\nimport org.openmrs.module.emrapi.EmrApiProperties;\nimport org.openmrs.module.emrapi.adt.AdtService;\nimport org.openmrs.module.emrapi.adt.exception.EncounterDateAfterVisitStopDateException;\nimport org.openmrs.module.emrapi.adt.exception.EncounterDateBeforeVisitStartDateException;\nimport org.openmrs.module.emrapi.encounter.EncounterDomainWrapper;\nimport org.openmrs.module.emrapi.visit.VisitDomainWrapper;\nimport org.openmrs.module.htmlformentry.FormEntryContext;\nimport org.openmrs.module.htmlformentry.FormEntrySession;\nimport org.openmrs.module.htmlformentry.FormSubmissionError;\nimport org.openmrs.module.htmlformentry.HtmlForm;\nimport org.openmrs.module.htmlformentry.HtmlFormEntryService;\nimport org.openmrs.module.htmlformentry.HtmlFormEntryUtil;\nimport org.openmrs.module.htmlformentryui.HtmlFormUtil;\nimport org.openmrs.module.uicommons.UiCommonsConstants;\nimport org.openmrs.ui.framework.SimpleObject;\nimport org.openmrs.ui.framework.UiUtils;\nimport org.openmrs.ui.framework.annotation.FragmentParam;\nimport org.openmrs.ui.framework.annotation.SpringBean;\nimport org.openmrs.ui.framework.fragment.FragmentConfiguration;\nimport org.openmrs.ui.framework.fragment.FragmentModel;\nimport org.openmrs.ui.framework.resource.ResourceFactory;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n *\n */\npublic class EnterHtmlFormFragmentController extends BaseHtmlFormFragmentController {\n\t\n\tprivate static final Log log = LogFactory.getLog(EnterHtmlFormFragmentController.class);\n\t\n\t/**\n\t * @param config\n\t * @param sessionContext\n\t * @param htmlFormEntryService\n\t * @param formService\n\t * @param resourceFactory\n\t * @param patient\n\t * @param hf\n\t * @param form\n\t * @param formUuid\n\t * @param definitionUiResource\n\t * @param encounter\n\t * @param visit\n\t * @param returnUrl\n\t * @param automaticValidation defaults to true. If you don't want HFE's automatic validation, set it\n\t *            to false\n\t * @param model\n\t * @param httpSession\n\t * @throws Exception\n\t */\n\tpublic void controller(FragmentConfiguration config, UiSessionContext sessionContext, UiUtils ui,\n\t        @SpringBean(\"htmlFormEntryService\") HtmlFormEntryService htmlFormEntryService,\n\t        @SpringBean(\"adtService\") AdtService adtService, @SpringBean(\"formService\") FormService formService,\n\t        @SpringBean(\"coreResourceFactory\") ResourceFactory resourceFactory,\n\t        @SpringBean(\"featureToggles\") FeatureToggleProperties featureToggles, @FragmentParam(\"patient\") Patient patient,\n\t        @FragmentParam(value = \"htmlForm\", required = false) HtmlForm hf,\n\t        @FragmentParam(value = \"htmlFormId\", required = false) Integer htmlFormId,\n\t        @FragmentParam(value = \"formId\", required = false) Form form,\n\t        @FragmentParam(value = \"formUuid\", required = false) String formUuid,\n\t        @FragmentParam(value = \"definitionUiResource\", required = false) String definitionUiResource,\n\t        @FragmentParam(value = \"encounter\", required = false) Encounter encounter,\n\t        @FragmentParam(value = \"encounterDate\", required = false) Date defaultEncounterDate, // allows specifying a default encounter date when adding a new encounter; should not be used with encounter param\n\t        @FragmentParam(value = \"visit\", required = false) Visit visit,\n\t        @FragmentParam(value = \"createVisit\", required = false) Boolean createVisit,\n\t        @FragmentParam(value = \"returnUrl\", required = false) String returnUrl,\n\t        @FragmentParam(value = \"automaticValidation\", defaultValue = \"true\") boolean automaticValidation,\n\t        FragmentModel model, HttpSession httpSession) throws Exception {\n\t\t\n\t\tconfig.require(\"patient\", \"htmlForm | htmlFormId | formId | formUuid | definitionUiResource | encounter\");\n\t\t\n\t\tif (hf == null) {\n\t\t\tif (htmlFormId != null) {\n\t\t\t\thf = htmlFormEntryService.getHtmlForm(htmlFormId);\n\t\t\t} else if (form != null) {\n\t\t\t\thf = htmlFormEntryService.getHtmlFormByForm(form);\n\t\t\t} else if (formUuid != null) {\n\t\t\t\tform = formService.getFormByUuid(formUuid);\n\t\t\t\thf = htmlFormEntryService.getHtmlFormByForm(form);\n\t\t\t} else if (StringUtils.isNotBlank(definitionUiResource)) {\n\t\t\t\thf = HtmlFormUtil.getHtmlFormFromUiResource(resourceFactory, formService, htmlFormEntryService,\n\t\t\t\t    definitionUiResource, encounter);\n\t\t\t}\n\t\t}\n\t\tif (hf == null && encounter != null) {\n\t\t\tform = encounter.getForm();\n\t\t\tif (form == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"Cannot view a form-less encounter unless you specify which form to use\");\n\t\t\t}\n\t\t\thf = HtmlFormEntryUtil.getService().getHtmlFormByForm(encounter.getForm());\n\t\t\tif (hf == null)\n\t\t\t\tthrow new IllegalArgumentException(\"The form for the specified encounter (\" + encounter.getForm()\n\t\t\t\t        + \") does not have an HtmlForm associated with it\");\n\t\t}\n\t\tif (hf == null)\n\t\t\tthrow new RuntimeException(\"Could not find HTML Form\");\n\t\t\n\t\t// the code below doesn't handle the HFFS case where you might want to _add_ data to an existing encounter\n\t\tFormEntrySession fes;\n\t\tif (encounter != null) {\n\t\t\tfes = new FormEntrySession(patient, encounter, FormEntryContext.Mode.EDIT, hf, null, httpSession,\n\t\t\t        automaticValidation, !automaticValidation);\n\t\t} else {\n\t\t\tfes = new FormEntrySession(patient, hf, FormEntryContext.Mode.ENTER, null, httpSession, automaticValidation,\n\t\t\t        !automaticValidation);\n\t\t}\n\t\t\n\t\tVisitDomainWrapper visitDomainWrapper = getVisitDomainWrapper(visit, encounter, adtService);\n\t\tsetupVelocityContext(fes, visitDomainWrapper, ui, sessionContext, featureToggles);\n\t\tsetupFormEntrySession(fes, visitDomainWrapper, defaultEncounterDate, ui, sessionContext, returnUrl);\n\t\tsetupModel(model, fes, visitDomainWrapper, createVisit);\n\t\t\n\t}\n\t\n\t/**\n\t * Creates a simple object to record if there is an authenticated user\n\t * \n\t * @return the simple object\n\t */\n\tpublic SimpleObject checkIfLoggedIn() {\n\t\treturn SimpleObject.create(\"isLoggedIn\", Context.isAuthenticated());\n\t}\n\t\n\t/**\n\t * Tries to authenticate with the given credentials\n\t * \n\t * @param user the username\n\t * @param pass the password\n\t * @return a simple object to record if successful\n\t */\n\tpublic SimpleObject authenticate(@RequestParam(\"user\") String user, @RequestParam(\"pass\") String pass,\n\t        UiSessionContext context, @SpringBean EmrApiProperties emrApiProperties) {\n\t\ttry {\n\t\t\tContext.authenticate(user, pass);\n\t\t\tcontext.setSessionLocation(emrApiProperties.getUnknownLocation());\n\t\t}\n\t\tcatch (ContextAuthenticationException ex) {\n\t\t\t\n\t\t}\n\t\t\n\t\treturn checkIfLoggedIn();\n\t}\n\t\n\t/**\n\t * Handles a form submit request\n\t * \n\t * @param patient\n\t * @param hf\n\t * @param encounter\n\t * @param visit\n\t * @param returnUrl\n\t * @param request\n\t * @return\n\t * @throws Exception\n\t */\n\t@Transactional\n\tpublic SimpleObject submit(UiSessionContext sessionContext, @RequestParam(\"personId\") Patient patient,\n\t        @RequestParam(\"htmlFormId\") HtmlForm hf,\n\t        @RequestParam(value = \"encounterId\", required = false) Encounter encounter,\n\t        @RequestParam(value = \"visitId\", required = false) Visit visit,\n\t        @RequestParam(value = \"createVisit\", required = false) Boolean createVisit,\n\t        @RequestParam(value = \"returnUrl\", required = false) String returnUrl,\n\t        @SpringBean(\"adtService\") AdtService adtService,\n\t        @SpringBean(\"featureToggles\") FeatureToggleProperties featureToggles, UiUtils ui, HttpServletRequest request)\n\t        throws Exception {\n\t\t\n\t\t// TODO formModifiedTimestamp and encounterModifiedTimestamp\n\t\t\n\t\tboolean editMode = encounter != null;\n\t\t\n\t\tFormEntrySession fes;\n\t\tif (encounter != null) {\n\t\t\tfes = new FormEntrySession(patient, encounter, FormEntryContext.Mode.EDIT, hf, request.getSession());\n\t\t} else {\n\t\t\tfes = new FormEntrySession(patient, hf, FormEntryContext.Mode.ENTER, request.getSession());\n\t\t}\n\t\t\n\t\tVisitDomainWrapper visitDomainWrapper = getVisitDomainWrapper(visit, encounter, adtService);\n\t\tsetupVelocityContext(fes, visitDomainWrapper, ui, sessionContext, featureToggles);\n\t\tsetupFormEntrySession(fes, visitDomainWrapper, null, ui, sessionContext, returnUrl);\n\t\tfes.getHtmlToDisplay(); // needs to happen before we validate or process a form\n\t\t\n\t\t// Validate and return with errors if any are found\n\t\tList<FormSubmissionError> validationErrors = fes.getSubmissionController().validateSubmission(fes.getContext(),\n\t\t    request);\n\t\tif (validationErrors.size() > 0) {\n\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// No validation errors found so process form submission\n\t\t\tfes.prepareForSubmit();\n\t\t\tfes.getSubmissionController().handleFormSubmission(fes, request);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tStringWriter sw = new StringWriter();\n\t\t\tex.printStackTrace(new PrintWriter(sw));\n\t\t\tvalidationErrors.add(new FormSubmissionError(\"general-form-error\",\n\t\t\t        \"Form submission error \" + ex.getMessage() + \"<br/>\" + sw.toString()));\n\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t}\n\t\t\n\t\t// Check this form will actually create an encounter if its supposed to\n\t\tif (fes.getContext().getMode() == FormEntryContext.Mode.ENTER && fes.hasEncouterTag()\n\t\t        && (fes.getSubmissionActions().getEncountersToCreate() == null\n\t\t                || fes.getSubmissionActions().getEncountersToCreate().size() == 0)) {\n\t\t\tthrow new IllegalArgumentException(\"This form is not going to create an encounter\");\n\t\t}\n\t\t\n\t\tEncounter formEncounter = fes.getContext().getMode() == FormEntryContext.Mode.ENTER\n\t\t        ? fes.getSubmissionActions().getEncountersToCreate().get(0)\n\t\t        : encounter;\n\t\t\n\t\t// create a visit if necessary (note that this currently only works in real-time mode)\n\t\tif (createVisit != null && (createVisit) && visit == null) {\n\t\t\tvisit = adtService.ensureActiveVisit(patient, sessionContext.getSessionLocation());\n\t\t\tfes.getContext().setVisit(visit);\n\t\t}\n\t\t\n\t\t// attach to the visit if it exists and not already attached\n\t\tif (visit != null && (encounter == null || encounter.getVisit() == null)) {\n\t\t\ttry {\n\t\t\t\tnew EncounterDomainWrapper(formEncounter).attachToVisit(visit);\n\t\t\t}\n\t\t\tcatch (EncounterDateBeforeVisitStartDateException e) {\n\t\t\t\tvalidationErrors.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", ui.message(\"htmlformentryui.datetimeAfterVisitDate\")));\n\t\t\t}\n\t\t\tcatch (EncounterDateAfterVisitStopDateException e) {\n\t\t\t\tvalidationErrors.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", ui.message(\"htmlformentryui.datetimeBeforeVisitDate\")));\n\t\t\t}\n\t\t\t\n\t\t\tif (validationErrors.size() > 0) {\n\t\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Do actual encounter creation/updating\n\t\tfes.applyActions();\n\t\t\n\t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_INFO_MESSAGE,\n\t\t    ui.message(\n\t\t        editMode ? \"htmlformentryui.editHtmlForm.successMessage\" : \"htmlformentryui.enterHtmlForm.successMessage\",\n\t\t        ui.format(hf.getForm()), ui.escapeJs(ui.format(patient))));\n\t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_TOAST_MESSAGE, \"true\");\n\t\t\n\t\treturn returnHelper(null, fes, formEncounter);\n\t}\n\t\n\tprivate SimpleObject returnHelper(List<FormSubmissionError> validationErrors, FormEntrySession session,\n\t        Encounter encounter) {\n\t\tif (validationErrors == null || validationErrors.size() == 0) {\n\t\t\tString afterSaveUrl = session.getAfterSaveUrlTemplate();\n\t\t\tif (afterSaveUrl != null) {\n\t\t\t\tafterSaveUrl = afterSaveUrl.replaceAll(\"\\\\{\\\\{patient.id\\\\}\\\\}\", session.getPatient().getId().toString());\n\t\t\t\tafterSaveUrl = afterSaveUrl.replaceAll(\"\\\\{\\\\{encounter.id\\\\}\\\\}\",\n\t\t\t\t    session.getEncounter().getId().toString());\n\t\t\t}\n\t\t\treturn SimpleObject.create(\"success\", true, \"encounterId\", encounter.getId(), \"encounterUuid\",\n\t\t\t    encounter.getUuid(), \"encounterTypeUuid\",\n\t\t\t    encounter.getEncounterType() != null ? encounter.getEncounterType().getUuid() : null, \"goToUrl\",\n\t\t\t    afterSaveUrl);\n\t\t} else {\n\t\t\tMap<String, String> errors = new HashMap<String, String>();\n\t\t\tfor (FormSubmissionError err : validationErrors) {\n\t\t\t\tif (err.getSourceWidget() != null)\n\t\t\t\t\terrors.put(session.getContext().getErrorFieldId(err.getSourceWidget()), err.getError());\n\t\t\t\telse\n\t\t\t\t\terrors.put(err.getId(), err.getError());\n\t\t\t}\n\t\t\treturn SimpleObject.create(\"success\", false, \"errors\", errors);\n\t\t}\n\t}\n\t\n\tprivate boolean hasNoTimeComponent(Date date) {\n\t\treturn new DateMidnight(date).toDate().equals(date);\n\t}\n\t\n\tprivate void keepTimeComponentOfEncounterIfDateComponentHasNotChanged(Date previousEncounterDate,\n\t        Encounter formEncounter) {\n\t\t\n\t\tif (previousEncounterDate != null\n\t\t        && new DateMidnight(previousEncounterDate).equals(new DateMidnight(formEncounter.getEncounterDatetime()))) {\n\t\t\tformEncounter.setEncounterDatetime(previousEncounterDate);\n\t\t}\n\t\t\n\t}\n\t\n\tprivate void setupModel(FragmentModel model, FormEntrySession fes, VisitDomainWrapper visitDomainWrapper,\n\t        Boolean createVisit) {\n\t\t\n\t\tmodel.addAttribute(\"currentDate\", (new DateMidnight()).toDate());\n\t\tmodel.addAttribute(\"command\", fes);\n\t\tmodel.addAttribute(\"visit\", visitDomainWrapper);\n\t\tif (createVisit != null) {\n\t\t\tmodel.addAttribute(\"createVisit\", createVisit.toString());\n\t\t} else {\n\t\t\tmodel.addAttribute(\"createVisit\", \"false\");\n\t\t}\n\t\t\n\t\tInteger hfeMajorVersion = 1;\n\t\tInteger hfeMinorVersion = 0;\n\t\ttry {\n\t\t\tString hfeVersion = ModuleFactory.getStartedModuleById(\"htmlformentry\").getVersion();\n\t\t\tString[] versionSplit = hfeVersion.split(\"\\\\.\");\n\t\t\thfeMajorVersion = Integer.valueOf(versionSplit[0]);\n\t\t\thfeMinorVersion = Integer.valueOf(versionSplit[1]);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.warn(\"Unable to retrieve htmlformentry major and minor versions\", e);\n\t\t}\n\t\tmodel.addAttribute(\"hfeMajorVersion\", hfeMajorVersion);\n\t\tmodel.addAttribute(\"hfeMinorVersion\", hfeMinorVersion);\n\t\t\n\t}\n\t\n\tprivate VisitDomainWrapper getVisitDomainWrapper(Visit visit, Encounter encounter, AdtService adtService) {\n\t\t// if we don't have a visit, but the encounter has a visit, use that\n\t\tif (visit == null && encounter != null) {\n\t\t\tvisit = encounter.getVisit();\n\t\t}\n\t\t\n\t\tif (visit == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn adtService.wrap(visit);\n\t\t}\n\t}\n\t\n}\n", "package org.openmrs.module.htmlformentryui.page.controller.htmlform;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.openmrs.Encounter;\nimport org.openmrs.api.AdministrationService;\nimport org.openmrs.module.emrapi.patient.PatientDomainWrapper;\nimport org.openmrs.module.htmlformentry.HtmlForm;\nimport org.openmrs.module.htmlformentry.HtmlFormEntryService;\nimport org.openmrs.ui.framework.SimpleObject;\nimport org.openmrs.ui.framework.UiUtils;\nimport org.openmrs.ui.framework.annotation.InjectBeans;\nimport org.openmrs.ui.framework.annotation.SpringBean;\nimport org.openmrs.ui.framework.page.PageModel;\nimport org.springframework.web.bind.annotation.RequestParam;\n\npublic class ViewEncounterWithHtmlFormPageController {\n\t\n\tpublic void get(@RequestParam(\"encounter\") Encounter encounter,\n\t        @RequestParam(value = \"showPatientHeader\", defaultValue = \"true\") boolean showPatientHeader,\n\t        @RequestParam(value = \"returnUrl\", required = false) String returnUrl,\n\t        @RequestParam(value = \"returnLabel\", required = false) String returnLabel,\n\t        @RequestParam(value = \"editStyle\", defaultValue = \"standard\") String editStyle,\n\t        @InjectBeans PatientDomainWrapper patient,\n\t        @SpringBean(\"htmlFormEntryService\") HtmlFormEntryService htmlFormEntryService,\n\t        @SpringBean(\"adminService\") AdministrationService administrationService, UiUtils ui, PageModel model) {\n\t\t\n\t\tpatient.setPatient(encounter.getPatient());\n\t\t\n\t\tString customPrintProvider = administrationService.getGlobalProperty(\"htmlformentryui.customPrintProvider\");\n\t\tString customPrintPageName = administrationService.getGlobalProperty(\"htmlformentryui.customPrintPageName\");\n\t\tString customPrintTarget = administrationService.getGlobalProperty(\"htmlformentryui.customPrintTarget\");\n\t\t\n\t\tmodel.addAttribute(\"customPrintProvider\", customPrintProvider);\n\t\tmodel.addAttribute(\"customPrintPageName\", customPrintPageName);\n\t\tmodel.addAttribute(\"customPrintTarget\", customPrintTarget);\n\t\t\n\t\tif (StringUtils.isEmpty(returnUrl)) {\n\t\t\treturnUrl = ui.pageLink(\"coreapps\", \"patientdashboard/patientDashboard\",\n\t\t\t    SimpleObject.create(\"patientId\", patient.getId()));\n\t\t}\n\t\tif (StringUtils.isEmpty(returnLabel)) {\n\t\t\treturnLabel = ui.escapeJs(ui.format(patient.getPatient()));\n\t\t}\n\t\t\n\t\tmodel.addAttribute(\"patient\", patient);\n\t\tmodel.addAttribute(\"visit\", encounter.getVisit());\n\t\tmodel.addAttribute(\"encounter\", encounter);\n\t\tmodel.addAttribute(\"returnUrl\", returnUrl);\n\t\tmodel.addAttribute(\"returnLabel\", returnLabel);\n\t\tmodel.addAttribute(\"editStyle\", fixCase(editStyle));\n\t\tmodel.addAttribute(\"showPatientHeader\", showPatientHeader);\n\t\t\n\t\tHtmlForm htmlForm = htmlFormEntryService.getHtmlFormByForm(encounter.getForm());\n\t\tif (htmlForm == null) {\n\t\t\tthrow new IllegalArgumentException(\"encounter.form is not an HTML Form: \" + encounter.getForm());\n\t\t}\n\t\tmodel.addAttribute(\"htmlForm\", htmlForm);\n\t}\n\t\n\t/**\n\t * @param word\n\t * @return word with the first letter uppercase, and the rest lowercase\n\t */\n\tprivate String fixCase(String word) {\n\t\treturn Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase();\n\t}\n\t\n}\n", "<%\n    ui.decorateWith(\"appui\", \"standardEmrPage\")\n    ui.includeJavascript(\"uicommons\", \"navigator/validators.js\", Integer.MAX_VALUE - 19)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigator.js\", Integer.MAX_VALUE - 20)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorHandlers.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorModels.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorTemplates.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/exitHandlers.js\", Integer.MAX_VALUE - 22)\n    ui.includeJavascript(\"uicommons\", \"angular.min.js\");\n    ui.includeJavascript(\"uicommons\", \"angular-resource.min.js\");\n    ui.includeJavascript(\"htmlformentryui\", \"htmlFormSimple.js\", Integer.MIN_VALUE)\n    ui.includeCss(\"htmlformentryui\", \"htmlform/htmlFormSimple.css\")\n\n    def breadcrumbMiddle = breadcrumbOverride ?: \"\"\"\n        [ { label: '${ returnLabel }' , link: '${ returnUrl }'} ]\n    \"\"\"\n%>\n\n${ ui.includeFragment(\"uicommons\", \"validationMessages\")}\n\n${ ui.includeFragment(\"coreapps\", \"patientHeader\", [ patient: patient ]) }\n\n<script type=\"text/javascript\">\n\n    // we expose this as a global variable so that HTML forms can call the API methods associated with the Keyboard Controller\n    // TODO expose this some other way than a global variable so we can support multiple navigators (if that will ever be needed)\n    var NavigatorController;\n\n    var breadcrumbs = _.flatten([\n        { icon: \"icon-home\", link: '/' + OPENMRS_CONTEXT_PATH + '/index.htm' },\n        ${ breadcrumbMiddle },\n        { label: \"${ ui.escapeJs(ui.message(\"coreapps.editHtmlForm.breadcrumb\", ui.message(ui.format(htmlForm.form)))) }\" }\n    ]);\n\n    jQuery(function() {\n        jq('input.submitButton').hide();\n        jq('form#htmlform').append(jq('#confirmation-template').html());\n        NavigatorController =  KeyboardController(jq('#htmlform').first());\n\n        jq('input.confirm').click(function(){\n\n            if (!jq(this).attr(\"disabled\")) {\n                jq(this).closest(\"form\").submit();\n            }\n\n            jq(this).attr('disabled', 'disabled');\n            jq(this).addClass(\"disabled\");\n\n        });\n\n        // clicking the save form link should have the same functionality as clicking on the confirmation section title (ie, jumps to confirmation)\n        jq('#save-form').click(function() {\n            NavigatorController.getSectionById(\"confirmation\").title.click();\n        })\n\n    });\n</script>\n\n<div id=\"form-actions-container\">\n    <a href=\"#\" id=\"save-form\">\n        <i class=\"icon-save small\"></i>\n        ${ ui.message(\"htmlformentryui.saveForm\") }\n    </a>\n    <% if (returnUrl) { %>\n    <a href=\"${ ui.escapeAttribute(returnUrl) }\">\n        <i class=\"icon-signout small\"></i>\n        ${ ui.message(\"htmlformentryui.exitForm\") }\n    </a>\n    <% } %>\n</div>\n\n${ ui.includeFragment(\"htmlformentryui\", \"htmlform/enterHtmlForm\", [\n        patient: patient,\n        htmlForm: htmlForm,\n        visit: encounter.visit,\n        encounter: encounter,\n        returnUrl: returnUrl,\n        automaticValidation: false,\n        cssClass: \"simple-form-ui\"\n]) }\n\n<script type=\"text/template\" id=\"confirmation-template\">\n<div id=\"confirmation\" class=\"container\">\n    <span class=\"title\">${ ui.message(\"coreapps.simpleFormUi.confirm.title\") }</span>\n\n    <div id=\"confirmationQuestion\">\n        <h3>${ ui.message(\"coreapps.simpleFormUi.confirm.question\") }</h3>\n\n        <div id=\"confirmation-messages\"></div>\n\n        <div class=\"before-dataCanvas\"></div>\n        <div id=\"dataCanvas\"></div>\n        <div class=\"after-data-canvas\"></div>\n\n        <p style=\"display: inline\">\n            <button type=\"submit\" onclick=\"submitHtmlForm()\" class=\"submitButton confirm right\">\n                ${ ui.message(\"coreapps.save\") }\n                <i class=\"icon-spinner icon-spin icon-2x\" style=\"display: none; margin-left: 10px;\"></i>\n            </button>\n        </p>\n        <p style=\"display: inline\">\n            <input type=\"button\" value=\"${ ui.message(\"coreapps.no\") }\" class=\"cancel\" />\n        </p>\n        <p>\n            <span class=\"error field-error\">${ ui.message(\"coreapps.simpleFormUi.error.emptyForm\") }</span>\n        </p>\n    </div>\n</div>\n</script>\n", "<%\n    ui.decorateWith(\"appui\", \"standardEmrPage\")\n\n    def breadcrumbMiddle = breadcrumbOverride ?: \"\"\"\n        [ { label: '${ returnLabel }' , link: '${ returnUrl }'} ]\n    \"\"\"\n%>\n\n<script type=\"text/javascript\">\n    var breadcrumbs = _.flatten([\n        { icon: \"icon-home\", link: '/' + OPENMRS_CONTEXT_PATH + '/index.htm' },\n        ${ breadcrumbMiddle },\n        { label: \"${ ui.escapeJs(ui.message(\"coreapps.editHtmlForm.breadcrumb\", ui.message(ui.format(htmlForm.form)))) }\" }\n    ]);\n\n    jq(function() {\n        jq('.cancel').click(function(event) {\n            event.preventDefault();\n            htmlForm.cancel();\n        });\n    });\n</script>\n\n${ ui.includeFragment(\"coreapps\", \"patientHeader\", [ patient: patient ]) }\n\n${ ui.includeFragment(\"htmlformentryui\", \"htmlform/enterHtmlForm\", [\n        visit: encounter.visit,\n        encounter: encounter,\n        patient: patient,\n        returnUrl: returnUrl,\n        definitionUiResource: definitionUiResource ?: \"\"\n\n]) }\n", "<%\n    ui.decorateWith(\"appui\", \"standardEmrPage\")\n    ui.includeJavascript(\"uicommons\", \"navigator/validators.js\", Integer.MAX_VALUE - 19)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigator.js\", Integer.MAX_VALUE - 20)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorHandlers.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorModels.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorTemplates.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/exitHandlers.js\", Integer.MAX_VALUE - 22)\n    ui.includeJavascript(\"uicommons\", \"angular.min.js\");\n    ui.includeJavascript(\"uicommons\", \"angular-resource.min.js\");\n    ui.includeJavascript(\"htmlformentryui\", \"htmlFormSimple.js\", Integer.MIN_VALUE)\n    ui.includeCss(\"htmlformentryui\", \"htmlform/htmlFormSimple.css\")\n    def createNewVisit = createVisit ?: false\n\n    def breadcrumbMiddle = breadcrumbOverride ?: \"\"\"\n        [ { label: '${ returnLabel }' , link: '${ returnUrl }'} ]\n    \"\"\"\n%>\n\n${ ui.includeFragment(\"uicommons\", \"validationMessages\")}\n\n${ ui.includeFragment(\"coreapps\", \"patientHeader\", [ patient: patient ]) }\n\n<script type=\"text/javascript\">\n\n    // we expose this as a global variable so that HTML forms can call the API methods associated with the Keyboard Controller\n    // TODO expose this some other way than a global variable so we can support multiple navigators (if that will ever be needed)\n    var NavigatorController;\n\n    var breadcrumbs = _.flatten([\n        { icon: \"icon-home\", link: '/' + OPENMRS_CONTEXT_PATH + '/index.htm' },\n        ${ ui.encodeHtmlContent(breadcrumbMiddle) } ,\n        { label: \"${ ui.escapeJs(ui.format(htmlForm.form)) }\" }\n    ]);\n\n    jQuery(function() {\n        jq('input.submitButton').hide();\n        jq('form#htmlform').append(jq('#confirmation-template').html());\n        NavigatorController =  KeyboardController(jq('#htmlform').first());\n\n        jq('input.confirm').click(function(){\n\n            if (!jq(this).attr(\"disabled\")) {\n                jq(this).closest(\"form\").submit();\n            }\n\n            jq(this).attr('disabled', 'disabled');\n            jq(this).addClass(\"disabled\");\n\n        });\n\n        // clicking the save form link should have the same functionality as clicking on the confirmation section title (ie, jumps to confirmation)\n        jq('#save-form').click(function() {\n            NavigatorController.getSectionById(\"confirmation\").title.click();\n        })\n\n    });\n</script>\n\n<div id=\"form-actions-container\">\n    <a href=\"#\" id=\"save-form\">\n        <i class=\"icon-save small\"></i>\n        ${ ui.message(\"htmlformentryui.saveForm\") }\n    </a>\n    <% if (returnUrl) { %>\n    <a href=\"${ ui.escapeAttribute(returnUrl) }\">\n        <i class=\"icon-signout small\"></i>\n        ${ ui.message(\"htmlformentryui.exitForm\") }\n    </a>\n    <% } %>\n</div>\n\n${ ui.includeFragment(\"htmlformentryui\", \"htmlform/enterHtmlForm\", [\n        patient: patient,\n        htmlForm: htmlForm,\n        visit: visit,\n        createVisit: createNewVisit,\n        returnUrl: returnUrl,\n        automaticValidation: false,\n        cssClass: \"simple-form-ui\"\n]) }\n\n<script type=\"text/template\" id=\"confirmation-template\">\n    <div id=\"confirmation\" class=\"container\">\n        <span class=\"title\">${ ui.message(\"coreapps.simpleFormUi.confirm.title\") }</span>\n\n        <div id=\"confirmationQuestion\">\n            <h3>${ ui.message(\"coreapps.simpleFormUi.confirm.question\") }</h3>\n\n            <div id=\"confirmation-messages\"></div>\n\n            <div class=\"before-dataCanvas\"></div>\n            <div id=\"dataCanvas\"></div>\n            <div class=\"after-data-canvas\"></div>\n\n            <p style=\"display: inline\">\n                <button type=\"submit\" onclick=\"submitHtmlForm()\" class=\"submitButton confirm right\">\n                    ${ ui.message(\"coreapps.save\") }\n                    <i class=\"icon-spinner icon-spin icon-2x\" style=\"display: none; margin-left: 10px;\"></i>\n                </button>\n            </p>\n            <p style=\"display: inline\">\n                <input type=\"button\" value=\"${ ui.message(\"coreapps.no\") }\" class=\"cancel\" />\n            </p>\n            <p>\n                <span class=\"error field-error\">${ ui.message(\"coreapps.simpleFormUi.error.emptyForm\") }</span>\n            </p>\n        </div>\n    </div>\n</script>\n", "<%\n    ui.decorateWith(\"appui\", \"standardEmrPage\")\n\n    ui.includeJavascript(\"uicommons\", \"angular.min.js\");\n    ui.includeJavascript(\"uicommons\", \"angular-resource.min.js\");\n\n    def breadcrumbMiddle = breadcrumbOverride ?: \"\"\"\n        [ { label: '${ returnLabel }' , link: '${ returnUrl }'} ]\n    \"\"\"\n%>\n\n<script type=\"text/javascript\">\n    var breadcrumbs = _.flatten([\n        { icon: \"icon-home\", link: '/' + OPENMRS_CONTEXT_PATH + '/index.htm' },\n        ${ breadcrumbMiddle },\n        { label: \"${ ui.message(ui.escapeJs(ui.format(htmlForm.form)) )}\" }\n    ]);\n\n    jq(function() {\n        jq('.cancel').click(function(event) {\n            event.preventDefault();\n            htmlForm.cancel();\n        });\n    });\n</script>\n\n${ ui.includeFragment(\"coreapps\", \"patientHeader\", [ patient: patient ]) }\n\n${ ui.includeFragment(\"htmlformentryui\", \"htmlform/enterHtmlForm\", [\n        patient: patient,\n        htmlForm: htmlForm,\n        visit: visit,\n        returnUrl: returnUrl\n]) }", "<%\n    ui.decorateWith(\"appui\", \"standardEmrPage\")\n\n    ui.includeJavascript(\"htmlformentryui\", \"htmlform/viewEncounterWithHtmlForm.js\")\n    ui.includeCss(\"htmlformentryui\", \"htmlform/viewEncounterWithHtmlForm.css\")\n%>\n\n<script type=\"text/javascript\">\n    window.viewHtmlForm = {\n        encounterId: ${ encounter.id },\n        returnUrl: \"${ ui.escapeJs(returnUrl) }\",\n        htmlFormId: ${htmlForm.id}\n    };\n\n    var breadcrumbs = [\n        { icon: \"icon-home\", link: '/' + OPENMRS_CONTEXT_PATH + '/index.htm' },\n        { label: \"${ ui.escapeJs(returnLabel) }\", link: \"${ ui.escapeJs(returnUrl) }\" },\n        { label: \"${ ui.escapeJs(ui.message(\"htmlformentryui.viewHtmlForm.breadcrumb\", ui.message(ui.format(htmlForm.form)))) }\" }\n    ];\n</script>\n\n<style type=\"text/css\">\n    #form-actions {\n        float: right;\n    }\n</style>\n\n<% if (encounter.voided) { %>\n    <div id=\"form-deleted-warning\">\n        ${ ui.message(\"htmlformentryui.thisFormIsDeleted\") }\n    </div>\n<% } %>\n\n<% if (showPatientHeader) { %>\n    ${ ui.includeFragment(\"coreapps\", \"patientHeader\", [ patient: patient ]) }\n<% } %>\n\n<span id=\"form-actions\" class=\"no-print\">\n\n<% if (customPrintPageName == null || customPrintPageName.isEmpty()) { %>\n        <a class=\"button\" id=\"print-button\" href=\"javascript:window.print()\">\n<% } else { %>\n        <a class=\"button\" id=\"print-button\" href=\"${ui.pageLink(customPrintProvider, customPrintPageName, [encounterUuid: encounter.uuid, contentDisposition: 'inline'])}\" target=\"${customPrintTarget}\">\n<% } %>\n\n        <i class=\"icon-print\"></i>\n        ${ ui.message(\"uicommons.print\") }\n    </a>\n    <a class=\"button\" id=\"edit-button\" href=\"${ ui.pageLink(\"htmlformentryui\", \"htmlform/editHtmlFormWith\" + editStyle + \"Ui\", [\n            encounterId: encounter.uuid,\n            patientId: patient.patient.uuid,\n            returnUrl: returnUrl\n    ]) }\">\n        <i class=\"icon-pencil\"></i>\n        ${ ui.message(\"uicommons.edit\") }\n    </a>\n    <a class=\"button\" id=\"delete-button\">\n        <i class=\"icon-remove\"></i>\n        ${ ui.message(\"uicommons.delete\") }\n    </a>\n    <div style=\"display:none\" id=\"confirm-delete-dialog\" class=\"dialog\">\n        <div class=\"dialog-header\">\n            ${ ui.message(\"htmlformentryui.confirmDeleteFormHeading\", ui.format(htmlForm)) }\n        </div>\n        <div class=\"dialog-content\">\n            <p>\n                ${ ui.message(\"htmlformentryui.confirmDeleteForm\")}\n            </p>\n            <br/>\n            <div class=\"buttons\">\n                <button class=\"confirm right\">Delete</button>\n                <button class=\"cancel\">Cancel</button>\n            </div>\n        </div>\n    </div>\n</span>\n\n${ ui.includeFragment(\"htmlformentryui\", \"htmlform/viewEncounterWithHtmlForm\", [\n        encounter: encounter,\n        htmlFormId: htmlForm\n]) }\n"], "fixing_code": ["/*\n * The contents of this file are subject to the OpenMRS Public License\n * Version 1.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n * http://license.openmrs.org\n *\n * Software distributed under the License is distributed on an \"AS IS\"\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n * License for the specific language governing rights and limitations\n * under the License.\n *\n * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n */\n\npackage org.openmrs.module.htmlformentryui;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.openmrs.Encounter;\nimport org.openmrs.EncounterType;\nimport org.openmrs.Form;\nimport org.openmrs.Patient;\nimport org.openmrs.Visit;\nimport org.openmrs.api.FormService;\nimport org.openmrs.module.htmlformentry.HtmlForm;\nimport org.openmrs.module.htmlformentry.HtmlFormEntryService;\nimport org.openmrs.module.htmlformentry.HtmlFormEntryUtil;\nimport org.openmrs.ui.framework.SimpleObject;\nimport org.openmrs.ui.framework.UiUtils;\nimport org.openmrs.ui.framework.resource.ResourceFactory;\nimport org.openmrs.util.OpenmrsUtil;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\n\nimport java.io.IOException;\n\n/**\n *\n */\npublic class HtmlFormUtil {\n\t\n\tpublic static HtmlForm getHtmlFormFromUiResource(ResourceFactory resourceFactory, FormService formService,\n\t        HtmlFormEntryService htmlFormEntryService, String providerAndPath, Encounter encounter) throws IOException {\n\t\tint ind = providerAndPath.indexOf(':');\n\t\tString provider = providerAndPath.substring(0, ind);\n\t\tString path = providerAndPath.substring(ind + 1);\n\t\treturn getHtmlFormFromUiResource(resourceFactory, formService, htmlFormEntryService, provider, path, encounter);\n\t}\n\t\n\tpublic static HtmlForm getHtmlFormFromUiResource(ResourceFactory resourceFactory, FormService formService,\n\t        HtmlFormEntryService htmlFormEntryService, String providerName, String resourcePath, Encounter encounter)\n\t        throws IOException {\n\t\t\n\t\tString xml = null;\n\t\t\n\t\t// first, see if there is a specific version of the form referenced by version number\n\t\tif (encounter != null && encounter.getForm() != null && encounter.getForm().getVersion() != null) {\n\t\t\tString resourcePathWithVersion = resourcePath.replaceAll(\"\\\\.xml$\", \"\") + \"_v\" + encounter.getForm().getVersion()\n\t\t\t        + \".xml\";\n\t\t\txml = resourceFactory.getResourceAsString(providerName, resourcePathWithVersion);\n\t\t\t// should be of the format <htmlform formUuid=\"...\" formVersion=\"...\" formEncounterType=\"...\">...</htmlform>\n\t\t}\n\t\t\n\t\t// if not, use the bare resource path (without version number appended) to fetch the form\n\t\tif (xml == null) {\n\t\t\txml = resourceFactory.getResourceAsString(providerName, resourcePath);\n\t\t\t\n\t\t}\n\t\t\n\t\tif (xml == null) {\n\t\t\tthrow new IllegalArgumentException(\"No resource found at \" + providerName + \":\" + resourcePath);\n\t\t}\n\t\t\n\t\treturn getHtmlFormFromResourceXml(formService, htmlFormEntryService, xml);\n\t}\n\t\n\t// the new method above with \"encounter\" is preferred if an encounter is available, see: https://issues.openmrs.org/browse/HTML-768\n\tpublic static HtmlForm getHtmlFormFromUiResource(ResourceFactory resourceFactory, FormService formService,\n\t        HtmlFormEntryService htmlFormEntryService, String providerAndPath) throws IOException {\n\t\treturn getHtmlFormFromUiResource(resourceFactory, formService, htmlFormEntryService, providerAndPath,\n\t\t    (Encounter) null);\n\t}\n\t\n\t// the new method above with \"encounter\" is preferred if an encounter is available, see: https://issues.openmrs.org/browse/HTML-768\n\tpublic static HtmlForm getHtmlFormFromUiResource(ResourceFactory resourceFactory, FormService formService,\n\t        HtmlFormEntryService htmlFormEntryService, String providerName, String resourcePath) throws IOException {\n\t\treturn getHtmlFormFromUiResource(resourceFactory, formService, htmlFormEntryService, providerName, resourcePath,\n\t\t    null);\n\t}\n\t\n\tpublic static HtmlForm getHtmlFormFromResourceXml(FormService formService, HtmlFormEntryService htmlFormEntryService,\n\t        String xml) {\n\t\ttry {\n\t\t\tDocument doc = HtmlFormEntryUtil.stringToDocument(xml);\n\t\t\tNode htmlFormNode = HtmlFormEntryUtil.findChild(doc, \"htmlform\");\n\t\t\tString formUuid = getAttributeValue(htmlFormNode, \"formUuid\");\n\t\t\tif (formUuid == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"formUuid is required\");\n\t\t\t}\n\t\t\tForm form = formService.getFormByUuid(formUuid);\n\t\t\tboolean needToSaveForm = false;\n\t\t\tif (form == null) {\n\t\t\t\tform = new Form();\n\t\t\t\tform.setUuid(formUuid);\n\t\t\t\tneedToSaveForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tString formName = getAttributeValue(htmlFormNode, \"formName\");\n\t\t\tif (!OpenmrsUtil.nullSafeEquals(form.getName(), formName)) {\n\t\t\t\tform.setName(formName);\n\t\t\t\tneedToSaveForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tString formDescription = getAttributeValue(htmlFormNode, \"formDescription\");\n\t\t\tif (!OpenmrsUtil.nullSafeEquals(form.getDescription(), formDescription)) {\n\t\t\t\tform.setDescription(formDescription);\n\t\t\t\tneedToSaveForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tString formVersion = getAttributeValue(htmlFormNode, \"formVersion\");\n\t\t\tif (!OpenmrsUtil.nullSafeEquals(form.getVersion(), formVersion)) {\n\t\t\t\tform.setVersion(formVersion);\n\t\t\t\tneedToSaveForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tString formEncounterType = getAttributeValue(htmlFormNode, \"formEncounterType\");\n\t\t\tEncounterType encounterType = formEncounterType == null ? null\n\t\t\t        : HtmlFormEntryUtil.getEncounterType(formEncounterType);\n\t\t\tif (encounterType != null && !OpenmrsUtil.nullSafeEquals(form.getEncounterType(), encounterType)) {\n\t\t\t\tform.setEncounterType(encounterType);\n\t\t\t\tneedToSaveForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (needToSaveForm) {\n\t\t\t\tformService.saveForm(form);\n\t\t\t}\n\t\t\t\n\t\t\tHtmlForm htmlForm = htmlFormEntryService.getHtmlFormByForm(form);\n\t\t\tboolean needToSaveHtmlForm = false;\n\t\t\tif (htmlForm == null) {\n\t\t\t\thtmlForm = new HtmlForm();\n\t\t\t\thtmlForm.setForm(form);\n\t\t\t\tneedToSaveHtmlForm = true;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t// if there is a html form uuid specified, make sure the htmlform uuid is set to that value\n\t\t\tString htmlformUuid = getAttributeValue(htmlFormNode, \"htmlformUuid\");\n\t\t\tif (StringUtils.isNotBlank(htmlformUuid) && !OpenmrsUtil.nullSafeEquals(htmlformUuid, htmlForm.getUuid())) {\n\t\t\t\thtmlForm.setUuid(htmlformUuid);\n\t\t\t\tneedToSaveHtmlForm = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (!OpenmrsUtil.nullSafeEquals(trim(htmlForm.getXmlData()), trim(xml))) { // trim because if the file ends with a newline the db will have trimmed it\n\t\t\t\thtmlForm.setXmlData(xml);\n\t\t\t\tneedToSaveHtmlForm = true;\n\t\t\t}\n\t\t\tif (needToSaveHtmlForm) {\n\t\t\t\thtmlFormEntryService.saveHtmlForm(htmlForm);\n\t\t\t}\n\t\t\treturn htmlForm;\n\t\t\t\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new IllegalArgumentException(\"Failed to parse XML and build Form and HtmlForm\", e);\n\t\t}\n\t}\n\t\n\tpublic static String determineReturnUrl(String returnUrl, String returnProviderName, String returnPageName,\n\t        Patient patient, Visit visit, UiUtils ui) {\n\t\t\n\t\tSimpleObject returnParams = null;\n\t\t\n\t\tif (patient != null) {\n\t\t\tif (visit == null) {\n\t\t\t\treturnParams = SimpleObject.create(\"patientId\", patient.getId());\n\t\t\t} else {\n\t\t\t\treturnParams = SimpleObject.create(\"patientId\", patient.getId(), \"visitId\", visit.getId());\n\t\t\t}\n\t\t}\n\t\t\n\t\t// first see if a return provider and page have been specified\n\t\tif (org.apache.commons.lang.StringUtils.isNotBlank(returnProviderName)\n\t\t        && org.apache.commons.lang.StringUtils.isNotBlank(returnPageName)) {\n\t\t\treturn ui.pageLink(returnProviderName, returnPageName, returnParams);\n\t\t}\n\t\t\n\t\t// if not, see if a returnUrl has been specified\n\t\tif (org.apache.commons.lang.StringUtils.isNotBlank(returnUrl)) {\n\t\t\treturn returnUrl;\n\t\t}\n\t\t\n\t\t// otherwise return to patient dashboard if we have a patient, but index if not\n\t\tif (returnParams != null && returnParams.containsKey(\"patientId\")) {\n\t\t\treturn ui.pageLink(\"coreapps\", \"patientdashboard/patientDashboard\", returnParams);\n\t\t} else {\n\t\t\treturn \"/\" + ui.contextPath() + \"index.html\";\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static String determineReturnLabel(String returnLabel, Patient patient, UiUtils ui) {\n\t\t\n\t\tif (org.apache.commons.lang.StringUtils.isNotBlank(returnLabel)) {\n\t\t\treturn ui.message(returnLabel);\n\t\t} else {\n\t\t\treturn ui.encodeJavaScript(ui.format(patient));\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static String trim(String s) {\n\t\treturn s == null ? null : s.trim();\n\t}\n\t\n\tprivate static String getAttributeValue(Node htmlForm, String attributeName) {\n\t\tNode item = htmlForm.getAttributes().getNamedItem(attributeName);\n\t\treturn item == null ? null : item.getNodeValue();\n\t}\n\t\n}\n", "/*\n * The contents of this file are subject to the OpenMRS Public License\n * Version 1.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n * http://license.openmrs.org\n *\n * Software distributed under the License is distributed on an \"AS IS\"\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n * License for the specific language governing rights and limitations\n * under the License.\n *\n * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n */\n\npackage org.openmrs.module.htmlformentryui.fragment.controller.htmlform;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.joda.time.DateMidnight;\nimport org.openmrs.Encounter;\nimport org.openmrs.Form;\nimport org.openmrs.Patient;\nimport org.openmrs.Visit;\nimport org.openmrs.api.FormService;\nimport org.openmrs.api.context.Context;\nimport org.openmrs.api.context.ContextAuthenticationException;\nimport org.openmrs.module.ModuleFactory;\nimport org.openmrs.module.appframework.feature.FeatureToggleProperties;\nimport org.openmrs.module.appui.UiSessionContext;\nimport org.openmrs.module.emrapi.EmrApiProperties;\nimport org.openmrs.module.emrapi.adt.AdtService;\nimport org.openmrs.module.emrapi.adt.exception.EncounterDateAfterVisitStopDateException;\nimport org.openmrs.module.emrapi.adt.exception.EncounterDateBeforeVisitStartDateException;\nimport org.openmrs.module.emrapi.encounter.EncounterDomainWrapper;\nimport org.openmrs.module.emrapi.visit.VisitDomainWrapper;\nimport org.openmrs.module.htmlformentry.FormEntryContext;\nimport org.openmrs.module.htmlformentry.FormEntrySession;\nimport org.openmrs.module.htmlformentry.FormSubmissionError;\nimport org.openmrs.module.htmlformentry.HtmlForm;\nimport org.openmrs.module.htmlformentry.HtmlFormEntryService;\nimport org.openmrs.module.htmlformentry.HtmlFormEntryUtil;\nimport org.openmrs.module.htmlformentryui.HtmlFormUtil;\nimport org.openmrs.module.uicommons.UiCommonsConstants;\nimport org.openmrs.ui.framework.SimpleObject;\nimport org.openmrs.ui.framework.UiUtils;\nimport org.openmrs.ui.framework.annotation.FragmentParam;\nimport org.openmrs.ui.framework.annotation.SpringBean;\nimport org.openmrs.ui.framework.fragment.FragmentConfiguration;\nimport org.openmrs.ui.framework.fragment.FragmentModel;\nimport org.openmrs.ui.framework.resource.ResourceFactory;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n *\n */\npublic class EnterHtmlFormFragmentController extends BaseHtmlFormFragmentController {\n\t\n\tprivate static final Log log = LogFactory.getLog(EnterHtmlFormFragmentController.class);\n\t\n\t/**\n\t * @param config\n\t * @param sessionContext\n\t * @param htmlFormEntryService\n\t * @param formService\n\t * @param resourceFactory\n\t * @param patient\n\t * @param hf\n\t * @param form\n\t * @param formUuid\n\t * @param definitionUiResource\n\t * @param encounter\n\t * @param visit\n\t * @param returnUrl\n\t * @param automaticValidation defaults to true. If you don't want HFE's automatic validation, set it\n\t *            to false\n\t * @param model\n\t * @param httpSession\n\t * @throws Exception\n\t */\n\tpublic void controller(FragmentConfiguration config, UiSessionContext sessionContext, UiUtils ui,\n\t        @SpringBean(\"htmlFormEntryService\") HtmlFormEntryService htmlFormEntryService,\n\t        @SpringBean(\"adtService\") AdtService adtService, @SpringBean(\"formService\") FormService formService,\n\t        @SpringBean(\"coreResourceFactory\") ResourceFactory resourceFactory,\n\t        @SpringBean(\"featureToggles\") FeatureToggleProperties featureToggles, @FragmentParam(\"patient\") Patient patient,\n\t        @FragmentParam(value = \"htmlForm\", required = false) HtmlForm hf,\n\t        @FragmentParam(value = \"htmlFormId\", required = false) Integer htmlFormId,\n\t        @FragmentParam(value = \"formId\", required = false) Form form,\n\t        @FragmentParam(value = \"formUuid\", required = false) String formUuid,\n\t        @FragmentParam(value = \"definitionUiResource\", required = false) String definitionUiResource,\n\t        @FragmentParam(value = \"encounter\", required = false) Encounter encounter,\n\t        @FragmentParam(value = \"encounterDate\", required = false) Date defaultEncounterDate, // allows specifying a default encounter date when adding a new encounter; should not be used with encounter param\n\t        @FragmentParam(value = \"visit\", required = false) Visit visit,\n\t        @FragmentParam(value = \"createVisit\", required = false) Boolean createVisit,\n\t        @FragmentParam(value = \"returnUrl\", required = false) String returnUrl,\n\t        @FragmentParam(value = \"automaticValidation\", defaultValue = \"true\") boolean automaticValidation,\n\t        FragmentModel model, HttpSession httpSession) throws Exception {\n\t\t\n\t\tconfig.require(\"patient\", \"htmlForm | htmlFormId | formId | formUuid | definitionUiResource | encounter\");\n\t\t\n\t\tif (hf == null) {\n\t\t\tif (htmlFormId != null) {\n\t\t\t\thf = htmlFormEntryService.getHtmlForm(htmlFormId);\n\t\t\t} else if (form != null) {\n\t\t\t\thf = htmlFormEntryService.getHtmlFormByForm(form);\n\t\t\t} else if (formUuid != null) {\n\t\t\t\tform = formService.getFormByUuid(formUuid);\n\t\t\t\thf = htmlFormEntryService.getHtmlFormByForm(form);\n\t\t\t} else if (StringUtils.isNotBlank(definitionUiResource)) {\n\t\t\t\thf = HtmlFormUtil.getHtmlFormFromUiResource(resourceFactory, formService, htmlFormEntryService,\n\t\t\t\t    definitionUiResource, encounter);\n\t\t\t}\n\t\t}\n\t\tif (hf == null && encounter != null) {\n\t\t\tform = encounter.getForm();\n\t\t\tif (form == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"Cannot view a form-less encounter unless you specify which form to use\");\n\t\t\t}\n\t\t\thf = HtmlFormEntryUtil.getService().getHtmlFormByForm(encounter.getForm());\n\t\t\tif (hf == null)\n\t\t\t\tthrow new IllegalArgumentException(\"The form for the specified encounter (\" + encounter.getForm()\n\t\t\t\t        + \") does not have an HtmlForm associated with it\");\n\t\t}\n\t\tif (hf == null)\n\t\t\tthrow new RuntimeException(\"Could not find HTML Form\");\n\t\t\n\t\t// the code below doesn't handle the HFFS case where you might want to _add_ data to an existing encounter\n\t\tFormEntrySession fes;\n\t\tif (encounter != null) {\n\t\t\tfes = new FormEntrySession(patient, encounter, FormEntryContext.Mode.EDIT, hf, null, httpSession,\n\t\t\t        automaticValidation, !automaticValidation);\n\t\t} else {\n\t\t\tfes = new FormEntrySession(patient, hf, FormEntryContext.Mode.ENTER, null, httpSession, automaticValidation,\n\t\t\t        !automaticValidation);\n\t\t}\n\t\t\n\t\tVisitDomainWrapper visitDomainWrapper = getVisitDomainWrapper(visit, encounter, adtService);\n\t\tsetupVelocityContext(fes, visitDomainWrapper, ui, sessionContext, featureToggles);\n\t\tsetupFormEntrySession(fes, visitDomainWrapper, defaultEncounterDate, ui, sessionContext, returnUrl);\n\t\tsetupModel(model, fes, visitDomainWrapper, createVisit);\n\t\t\n\t}\n\t\n\t/**\n\t * Creates a simple object to record if there is an authenticated user\n\t * \n\t * @return the simple object\n\t */\n\tpublic SimpleObject checkIfLoggedIn() {\n\t\treturn SimpleObject.create(\"isLoggedIn\", Context.isAuthenticated());\n\t}\n\t\n\t/**\n\t * Tries to authenticate with the given credentials\n\t * \n\t * @param user the username\n\t * @param pass the password\n\t * @return a simple object to record if successful\n\t */\n\tpublic SimpleObject authenticate(@RequestParam(\"user\") String user, @RequestParam(\"pass\") String pass,\n\t        UiSessionContext context, @SpringBean EmrApiProperties emrApiProperties) {\n\t\ttry {\n\t\t\tContext.authenticate(user, pass);\n\t\t\tcontext.setSessionLocation(emrApiProperties.getUnknownLocation());\n\t\t}\n\t\tcatch (ContextAuthenticationException ex) {\n\t\t\t\n\t\t}\n\t\t\n\t\treturn checkIfLoggedIn();\n\t}\n\t\n\t/**\n\t * Handles a form submit request\n\t * \n\t * @param patient\n\t * @param hf\n\t * @param encounter\n\t * @param visit\n\t * @param returnUrl\n\t * @param request\n\t * @return\n\t * @throws Exception\n\t */\n\t@Transactional\n\tpublic SimpleObject submit(UiSessionContext sessionContext, @RequestParam(\"personId\") Patient patient,\n\t        @RequestParam(\"htmlFormId\") HtmlForm hf,\n\t        @RequestParam(value = \"encounterId\", required = false) Encounter encounter,\n\t        @RequestParam(value = \"visitId\", required = false) Visit visit,\n\t        @RequestParam(value = \"createVisit\", required = false) Boolean createVisit,\n\t        @RequestParam(value = \"returnUrl\", required = false) String returnUrl,\n\t        @SpringBean(\"adtService\") AdtService adtService,\n\t        @SpringBean(\"featureToggles\") FeatureToggleProperties featureToggles, UiUtils ui, HttpServletRequest request)\n\t        throws Exception {\n\t\t\n\t\t// TODO formModifiedTimestamp and encounterModifiedTimestamp\n\t\t\n\t\tboolean editMode = encounter != null;\n\t\t\n\t\tFormEntrySession fes;\n\t\tif (encounter != null) {\n\t\t\tfes = new FormEntrySession(patient, encounter, FormEntryContext.Mode.EDIT, hf, request.getSession());\n\t\t} else {\n\t\t\tfes = new FormEntrySession(patient, hf, FormEntryContext.Mode.ENTER, request.getSession());\n\t\t}\n\t\t\n\t\tVisitDomainWrapper visitDomainWrapper = getVisitDomainWrapper(visit, encounter, adtService);\n\t\tsetupVelocityContext(fes, visitDomainWrapper, ui, sessionContext, featureToggles);\n\t\tsetupFormEntrySession(fes, visitDomainWrapper, null, ui, sessionContext, returnUrl);\n\t\tfes.getHtmlToDisplay(); // needs to happen before we validate or process a form\n\t\t\n\t\t// Validate and return with errors if any are found\n\t\tList<FormSubmissionError> validationErrors = fes.getSubmissionController().validateSubmission(fes.getContext(),\n\t\t    request);\n\t\tif (validationErrors.size() > 0) {\n\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// No validation errors found so process form submission\n\t\t\tfes.prepareForSubmit();\n\t\t\tfes.getSubmissionController().handleFormSubmission(fes, request);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tStringWriter sw = new StringWriter();\n\t\t\tex.printStackTrace(new PrintWriter(sw));\n\t\t\tvalidationErrors.add(new FormSubmissionError(\"general-form-error\",\n\t\t\t        \"Form submission error \" + ex.getMessage() + \"<br/>\" + sw.toString()));\n\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t}\n\t\t\n\t\t// Check this form will actually create an encounter if its supposed to\n\t\tif (fes.getContext().getMode() == FormEntryContext.Mode.ENTER && fes.hasEncouterTag()\n\t\t        && (fes.getSubmissionActions().getEncountersToCreate() == null\n\t\t                || fes.getSubmissionActions().getEncountersToCreate().size() == 0)) {\n\t\t\tthrow new IllegalArgumentException(\"This form is not going to create an encounter\");\n\t\t}\n\t\t\n\t\tEncounter formEncounter = fes.getContext().getMode() == FormEntryContext.Mode.ENTER\n\t\t        ? fes.getSubmissionActions().getEncountersToCreate().get(0)\n\t\t        : encounter;\n\t\t\n\t\t// create a visit if necessary (note that this currently only works in real-time mode)\n\t\tif (createVisit != null && (createVisit) && visit == null) {\n\t\t\tvisit = adtService.ensureActiveVisit(patient, sessionContext.getSessionLocation());\n\t\t\tfes.getContext().setVisit(visit);\n\t\t}\n\t\t\n\t\t// attach to the visit if it exists and not already attached\n\t\tif (visit != null && (encounter == null || encounter.getVisit() == null)) {\n\t\t\ttry {\n\t\t\t\tnew EncounterDomainWrapper(formEncounter).attachToVisit(visit);\n\t\t\t}\n\t\t\tcatch (EncounterDateBeforeVisitStartDateException e) {\n\t\t\t\tvalidationErrors.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", ui.message(\"htmlformentryui.datetimeAfterVisitDate\")));\n\t\t\t}\n\t\t\tcatch (EncounterDateAfterVisitStopDateException e) {\n\t\t\t\tvalidationErrors.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", ui.message(\"htmlformentryui.datetimeBeforeVisitDate\")));\n\t\t\t}\n\t\t\t\n\t\t\tif (validationErrors.size() > 0) {\n\t\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Do actual encounter creation/updating\n\t\tfes.applyActions();\n\t\t\n\t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_INFO_MESSAGE,\n\t\t    ui.message(\n\t\t        editMode ? \"htmlformentryui.editHtmlForm.successMessage\" : \"htmlformentryui.enterHtmlForm.successMessage\",\n\t\t        ui.format(hf.getForm()), ui.encodeJavaScript(ui.format(patient))));\n\t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_TOAST_MESSAGE, \"true\");\n\t\t\n\t\treturn returnHelper(null, fes, formEncounter);\n\t}\n\t\n\tprivate SimpleObject returnHelper(List<FormSubmissionError> validationErrors, FormEntrySession session,\n\t        Encounter encounter) {\n\t\tif (validationErrors == null || validationErrors.size() == 0) {\n\t\t\tString afterSaveUrl = session.getAfterSaveUrlTemplate();\n\t\t\tif (afterSaveUrl != null) {\n\t\t\t\tafterSaveUrl = afterSaveUrl.replaceAll(\"\\\\{\\\\{patient.id\\\\}\\\\}\", session.getPatient().getId().toString());\n\t\t\t\tafterSaveUrl = afterSaveUrl.replaceAll(\"\\\\{\\\\{encounter.id\\\\}\\\\}\",\n\t\t\t\t    session.getEncounter().getId().toString());\n\t\t\t}\n\t\t\treturn SimpleObject.create(\"success\", true, \"encounterId\", encounter.getId(), \"encounterUuid\",\n\t\t\t    encounter.getUuid(), \"encounterTypeUuid\",\n\t\t\t    encounter.getEncounterType() != null ? encounter.getEncounterType().getUuid() : null, \"goToUrl\",\n\t\t\t    afterSaveUrl);\n\t\t} else {\n\t\t\tMap<String, String> errors = new HashMap<String, String>();\n\t\t\tfor (FormSubmissionError err : validationErrors) {\n\t\t\t\tif (err.getSourceWidget() != null)\n\t\t\t\t\terrors.put(session.getContext().getErrorFieldId(err.getSourceWidget()), err.getError());\n\t\t\t\telse\n\t\t\t\t\terrors.put(err.getId(), err.getError());\n\t\t\t}\n\t\t\treturn SimpleObject.create(\"success\", false, \"errors\", errors);\n\t\t}\n\t}\n\t\n\tprivate boolean hasNoTimeComponent(Date date) {\n\t\treturn new DateMidnight(date).toDate().equals(date);\n\t}\n\t\n\tprivate void keepTimeComponentOfEncounterIfDateComponentHasNotChanged(Date previousEncounterDate,\n\t        Encounter formEncounter) {\n\t\t\n\t\tif (previousEncounterDate != null\n\t\t        && new DateMidnight(previousEncounterDate).equals(new DateMidnight(formEncounter.getEncounterDatetime()))) {\n\t\t\tformEncounter.setEncounterDatetime(previousEncounterDate);\n\t\t}\n\t\t\n\t}\n\t\n\tprivate void setupModel(FragmentModel model, FormEntrySession fes, VisitDomainWrapper visitDomainWrapper,\n\t        Boolean createVisit) {\n\t\t\n\t\tmodel.addAttribute(\"currentDate\", (new DateMidnight()).toDate());\n\t\tmodel.addAttribute(\"command\", fes);\n\t\tmodel.addAttribute(\"visit\", visitDomainWrapper);\n\t\tif (createVisit != null) {\n\t\t\tmodel.addAttribute(\"createVisit\", createVisit.toString());\n\t\t} else {\n\t\t\tmodel.addAttribute(\"createVisit\", \"false\");\n\t\t}\n\t\t\n\t\tInteger hfeMajorVersion = 1;\n\t\tInteger hfeMinorVersion = 0;\n\t\ttry {\n\t\t\tString hfeVersion = ModuleFactory.getStartedModuleById(\"htmlformentry\").getVersion();\n\t\t\tString[] versionSplit = hfeVersion.split(\"\\\\.\");\n\t\t\thfeMajorVersion = Integer.valueOf(versionSplit[0]);\n\t\t\thfeMinorVersion = Integer.valueOf(versionSplit[1]);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.warn(\"Unable to retrieve htmlformentry major and minor versions\", e);\n\t\t}\n\t\tmodel.addAttribute(\"hfeMajorVersion\", hfeMajorVersion);\n\t\tmodel.addAttribute(\"hfeMinorVersion\", hfeMinorVersion);\n\t\t\n\t}\n\t\n\tprivate VisitDomainWrapper getVisitDomainWrapper(Visit visit, Encounter encounter, AdtService adtService) {\n\t\t// if we don't have a visit, but the encounter has a visit, use that\n\t\tif (visit == null && encounter != null) {\n\t\t\tvisit = encounter.getVisit();\n\t\t}\n\t\t\n\t\tif (visit == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn adtService.wrap(visit);\n\t\t}\n\t}\n\t\n}\n", "package org.openmrs.module.htmlformentryui.page.controller.htmlform;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.openmrs.Encounter;\nimport org.openmrs.api.AdministrationService;\nimport org.openmrs.module.emrapi.patient.PatientDomainWrapper;\nimport org.openmrs.module.htmlformentry.HtmlForm;\nimport org.openmrs.module.htmlformentry.HtmlFormEntryService;\nimport org.openmrs.ui.framework.SimpleObject;\nimport org.openmrs.ui.framework.UiUtils;\nimport org.openmrs.ui.framework.annotation.InjectBeans;\nimport org.openmrs.ui.framework.annotation.SpringBean;\nimport org.openmrs.ui.framework.page.PageModel;\nimport org.springframework.web.bind.annotation.RequestParam;\n\npublic class ViewEncounterWithHtmlFormPageController {\n\t\n\tpublic void get(@RequestParam(\"encounter\") Encounter encounter,\n\t        @RequestParam(value = \"showPatientHeader\", defaultValue = \"true\") boolean showPatientHeader,\n\t        @RequestParam(value = \"returnUrl\", required = false) String returnUrl,\n\t        @RequestParam(value = \"returnLabel\", required = false) String returnLabel,\n\t        @RequestParam(value = \"editStyle\", defaultValue = \"standard\") String editStyle,\n\t        @InjectBeans PatientDomainWrapper patient,\n\t        @SpringBean(\"htmlFormEntryService\") HtmlFormEntryService htmlFormEntryService,\n\t        @SpringBean(\"adminService\") AdministrationService administrationService, UiUtils ui, PageModel model) {\n\t\t\n\t\tpatient.setPatient(encounter.getPatient());\n\t\t\n\t\tString customPrintProvider = administrationService.getGlobalProperty(\"htmlformentryui.customPrintProvider\");\n\t\tString customPrintPageName = administrationService.getGlobalProperty(\"htmlformentryui.customPrintPageName\");\n\t\tString customPrintTarget = administrationService.getGlobalProperty(\"htmlformentryui.customPrintTarget\");\n\t\t\n\t\tmodel.addAttribute(\"customPrintProvider\", customPrintProvider);\n\t\tmodel.addAttribute(\"customPrintPageName\", customPrintPageName);\n\t\tmodel.addAttribute(\"customPrintTarget\", customPrintTarget);\n\t\t\n\t\tif (StringUtils.isEmpty(returnUrl)) {\n\t\t\treturnUrl = ui.pageLink(\"coreapps\", \"patientdashboard/patientDashboard\",\n\t\t\t    SimpleObject.create(\"patientId\", patient.getId()));\n\t\t}\n\t\tif (StringUtils.isEmpty(returnLabel)) {\n\t\t\treturnLabel = ui.encodeJavaScript(ui.format(patient.getPatient()));\n\t\t}\n\t\t\n\t\tmodel.addAttribute(\"patient\", patient);\n\t\tmodel.addAttribute(\"visit\", encounter.getVisit());\n\t\tmodel.addAttribute(\"encounter\", encounter);\n\t\tmodel.addAttribute(\"returnUrl\", returnUrl);\n\t\tmodel.addAttribute(\"returnLabel\", returnLabel);\n\t\tmodel.addAttribute(\"editStyle\", fixCase(editStyle));\n\t\tmodel.addAttribute(\"showPatientHeader\", showPatientHeader);\n\t\t\n\t\tHtmlForm htmlForm = htmlFormEntryService.getHtmlFormByForm(encounter.getForm());\n\t\tif (htmlForm == null) {\n\t\t\tthrow new IllegalArgumentException(\"encounter.form is not an HTML Form: \" + encounter.getForm());\n\t\t}\n\t\tmodel.addAttribute(\"htmlForm\", htmlForm);\n\t}\n\t\n\t/**\n\t * @param word\n\t * @return word with the first letter uppercase, and the rest lowercase\n\t */\n\tprivate String fixCase(String word) {\n\t\treturn Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase();\n\t}\n\t\n}\n", "<%\n    ui.decorateWith(\"appui\", \"standardEmrPage\")\n    ui.includeJavascript(\"uicommons\", \"navigator/validators.js\", Integer.MAX_VALUE - 19)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigator.js\", Integer.MAX_VALUE - 20)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorHandlers.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorModels.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorTemplates.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/exitHandlers.js\", Integer.MAX_VALUE - 22)\n    ui.includeJavascript(\"uicommons\", \"angular.min.js\");\n    ui.includeJavascript(\"uicommons\", \"angular-resource.min.js\");\n    ui.includeJavascript(\"htmlformentryui\", \"htmlFormSimple.js\", Integer.MIN_VALUE)\n    ui.includeCss(\"htmlformentryui\", \"htmlform/htmlFormSimple.css\")\n\n    def breadcrumbMiddle = breadcrumbOverride ?: \"\"\"\n        [ { label: '${ returnLabel }' , link: '${ returnUrl }'} ]\n    \"\"\"\n%>\n\n${ ui.includeFragment(\"uicommons\", \"validationMessages\")}\n\n${ ui.includeFragment(\"coreapps\", \"patientHeader\", [ patient: patient ]) }\n\n<script type=\"text/javascript\">\n\n    // we expose this as a global variable so that HTML forms can call the API methods associated with the Keyboard Controller\n    // TODO expose this some other way than a global variable so we can support multiple navigators (if that will ever be needed)\n    var NavigatorController;\n\n    var breadcrumbs = _.flatten([\n        { icon: \"icon-home\", link: '/' + OPENMRS_CONTEXT_PATH + '/index.htm' },\n        ${ breadcrumbMiddle },\n        { label: \"${ ui.encodeJavaScript(ui.message(\"coreapps.editHtmlForm.breadcrumb\", ui.message(ui.format(htmlForm.form)))) }\" }\n    ]);\n\n    jQuery(function() {\n        jq('input.submitButton').hide();\n        jq('form#htmlform').append(jq('#confirmation-template').html());\n        NavigatorController =  KeyboardController(jq('#htmlform').first());\n\n        jq('input.confirm').click(function(){\n\n            if (!jq(this).attr(\"disabled\")) {\n                jq(this).closest(\"form\").submit();\n            }\n\n            jq(this).attr('disabled', 'disabled');\n            jq(this).addClass(\"disabled\");\n\n        });\n\n        // clicking the save form link should have the same functionality as clicking on the confirmation section title (ie, jumps to confirmation)\n        jq('#save-form').click(function() {\n            NavigatorController.getSectionById(\"confirmation\").title.click();\n        })\n\n    });\n</script>\n\n<div id=\"form-actions-container\">\n    <a href=\"#\" id=\"save-form\">\n        <i class=\"icon-save small\"></i>\n        ${ ui.message(\"htmlformentryui.saveForm\") }\n    </a>\n    <% if (returnUrl) { %>\n    <a href=\"${ ui.escapeAttribute(returnUrl) }\">\n        <i class=\"icon-signout small\"></i>\n        ${ ui.message(\"htmlformentryui.exitForm\") }\n    </a>\n    <% } %>\n</div>\n\n${ ui.includeFragment(\"htmlformentryui\", \"htmlform/enterHtmlForm\", [\n        patient: patient,\n        htmlForm: htmlForm,\n        visit: encounter.visit,\n        encounter: encounter,\n        returnUrl: returnUrl,\n        automaticValidation: false,\n        cssClass: \"simple-form-ui\"\n]) }\n\n<script type=\"text/template\" id=\"confirmation-template\">\n<div id=\"confirmation\" class=\"container\">\n    <span class=\"title\">${ ui.message(\"coreapps.simpleFormUi.confirm.title\") }</span>\n\n    <div id=\"confirmationQuestion\">\n        <h3>${ ui.message(\"coreapps.simpleFormUi.confirm.question\") }</h3>\n\n        <div id=\"confirmation-messages\"></div>\n\n        <div class=\"before-dataCanvas\"></div>\n        <div id=\"dataCanvas\"></div>\n        <div class=\"after-data-canvas\"></div>\n\n        <p style=\"display: inline\">\n            <button type=\"submit\" onclick=\"submitHtmlForm()\" class=\"submitButton confirm right\">\n                ${ ui.message(\"coreapps.save\") }\n                <i class=\"icon-spinner icon-spin icon-2x\" style=\"display: none; margin-left: 10px;\"></i>\n            </button>\n        </p>\n        <p style=\"display: inline\">\n            <input type=\"button\" value=\"${ ui.message(\"coreapps.no\") }\" class=\"cancel\" />\n        </p>\n        <p>\n            <span class=\"error field-error\">${ ui.message(\"coreapps.simpleFormUi.error.emptyForm\") }</span>\n        </p>\n    </div>\n</div>\n</script>\n", "<%\n    ui.decorateWith(\"appui\", \"standardEmrPage\")\n\n    def breadcrumbMiddle = breadcrumbOverride ?: \"\"\"\n        [ { label: '${ returnLabel }' , link: '${ returnUrl }'} ]\n    \"\"\"\n%>\n\n<script type=\"text/javascript\">\n    var breadcrumbs = _.flatten([\n        { icon: \"icon-home\", link: '/' + OPENMRS_CONTEXT_PATH + '/index.htm' },\n        ${ breadcrumbMiddle },\n        { label: \"${ ui.encodeJavaScript(ui.message(\"coreapps.editHtmlForm.breadcrumb\", ui.message(ui.format(htmlForm.form)))) }\" }\n    ]);\n\n    jq(function() {\n        jq('.cancel').click(function(event) {\n            event.preventDefault();\n            htmlForm.cancel();\n        });\n    });\n</script>\n\n${ ui.includeFragment(\"coreapps\", \"patientHeader\", [ patient: patient ]) }\n\n${ ui.includeFragment(\"htmlformentryui\", \"htmlform/enterHtmlForm\", [\n        visit: encounter.visit,\n        encounter: encounter,\n        patient: patient,\n        returnUrl: returnUrl,\n        definitionUiResource: definitionUiResource ?: \"\"\n\n]) }\n", "<%\n    ui.decorateWith(\"appui\", \"standardEmrPage\")\n    ui.includeJavascript(\"uicommons\", \"navigator/validators.js\", Integer.MAX_VALUE - 19)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigator.js\", Integer.MAX_VALUE - 20)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorHandlers.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorModels.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/navigatorTemplates.js\", Integer.MAX_VALUE - 21)\n    ui.includeJavascript(\"uicommons\", \"navigator/exitHandlers.js\", Integer.MAX_VALUE - 22)\n    ui.includeJavascript(\"uicommons\", \"angular.min.js\");\n    ui.includeJavascript(\"uicommons\", \"angular-resource.min.js\");\n    ui.includeJavascript(\"htmlformentryui\", \"htmlFormSimple.js\", Integer.MIN_VALUE)\n    ui.includeCss(\"htmlformentryui\", \"htmlform/htmlFormSimple.css\")\n    def createNewVisit = createVisit ?: false\n\n    def breadcrumbMiddle = breadcrumbOverride ?: \"\"\"\n        [ { label: '${ returnLabel }' , link: '${ returnUrl }'} ]\n    \"\"\"\n%>\n\n${ ui.includeFragment(\"uicommons\", \"validationMessages\")}\n\n${ ui.includeFragment(\"coreapps\", \"patientHeader\", [ patient: patient ]) }\n\n<script type=\"text/javascript\">\n\n    // we expose this as a global variable so that HTML forms can call the API methods associated with the Keyboard Controller\n    // TODO expose this some other way than a global variable so we can support multiple navigators (if that will ever be needed)\n    var NavigatorController;\n\n    var breadcrumbs = _.flatten([\n        { icon: \"icon-home\", link: '/' + OPENMRS_CONTEXT_PATH + '/index.htm' },\n        ${ ui.encodeHtmlContent(breadcrumbMiddle) } ,\n        { label: \"${ ui.encodeJavaScript(ui.format(htmlForm.form)) }\" }\n    ]);\n\n    jQuery(function() {\n        jq('input.submitButton').hide();\n        jq('form#htmlform').append(jq('#confirmation-template').html());\n        NavigatorController =  KeyboardController(jq('#htmlform').first());\n\n        jq('input.confirm').click(function(){\n\n            if (!jq(this).attr(\"disabled\")) {\n                jq(this).closest(\"form\").submit();\n            }\n\n            jq(this).attr('disabled', 'disabled');\n            jq(this).addClass(\"disabled\");\n\n        });\n\n        // clicking the save form link should have the same functionality as clicking on the confirmation section title (ie, jumps to confirmation)\n        jq('#save-form').click(function() {\n            NavigatorController.getSectionById(\"confirmation\").title.click();\n        })\n\n    });\n</script>\n\n<div id=\"form-actions-container\">\n    <a href=\"#\" id=\"save-form\">\n        <i class=\"icon-save small\"></i>\n        ${ ui.message(\"htmlformentryui.saveForm\") }\n    </a>\n    <% if (returnUrl) { %>\n    <a href=\"${ ui.escapeAttribute(returnUrl) }\">\n        <i class=\"icon-signout small\"></i>\n        ${ ui.message(\"htmlformentryui.exitForm\") }\n    </a>\n    <% } %>\n</div>\n\n${ ui.includeFragment(\"htmlformentryui\", \"htmlform/enterHtmlForm\", [\n        patient: patient,\n        htmlForm: htmlForm,\n        visit: visit,\n        createVisit: createNewVisit,\n        returnUrl: returnUrl,\n        automaticValidation: false,\n        cssClass: \"simple-form-ui\"\n]) }\n\n<script type=\"text/template\" id=\"confirmation-template\">\n    <div id=\"confirmation\" class=\"container\">\n        <span class=\"title\">${ ui.message(\"coreapps.simpleFormUi.confirm.title\") }</span>\n\n        <div id=\"confirmationQuestion\">\n            <h3>${ ui.message(\"coreapps.simpleFormUi.confirm.question\") }</h3>\n\n            <div id=\"confirmation-messages\"></div>\n\n            <div class=\"before-dataCanvas\"></div>\n            <div id=\"dataCanvas\"></div>\n            <div class=\"after-data-canvas\"></div>\n\n            <p style=\"display: inline\">\n                <button type=\"submit\" onclick=\"submitHtmlForm()\" class=\"submitButton confirm right\">\n                    ${ ui.message(\"coreapps.save\") }\n                    <i class=\"icon-spinner icon-spin icon-2x\" style=\"display: none; margin-left: 10px;\"></i>\n                </button>\n            </p>\n            <p style=\"display: inline\">\n                <input type=\"button\" value=\"${ ui.message(\"coreapps.no\") }\" class=\"cancel\" />\n            </p>\n            <p>\n                <span class=\"error field-error\">${ ui.message(\"coreapps.simpleFormUi.error.emptyForm\") }</span>\n            </p>\n        </div>\n    </div>\n</script>\n", "<%\n    ui.decorateWith(\"appui\", \"standardEmrPage\")\n\n    ui.includeJavascript(\"uicommons\", \"angular.min.js\");\n    ui.includeJavascript(\"uicommons\", \"angular-resource.min.js\");\n\n    def breadcrumbMiddle = breadcrumbOverride ?: \"\"\"\n        [ { label: '${ returnLabel }' , link: '${ returnUrl }'} ]\n    \"\"\"\n%>\n\n<script type=\"text/javascript\">\n    var breadcrumbs = _.flatten([\n        { icon: \"icon-home\", link: '/' + OPENMRS_CONTEXT_PATH + '/index.htm' },\n        ${ breadcrumbMiddle },\n        { label: \"${ ui.message(ui.encodeJavaScript(ui.format(htmlForm.form)) )}\" }\n    ]);\n\n    jq(function() {\n        jq('.cancel').click(function(event) {\n            event.preventDefault();\n            htmlForm.cancel();\n        });\n    });\n</script>\n\n${ ui.includeFragment(\"coreapps\", \"patientHeader\", [ patient: patient ]) }\n\n${ ui.includeFragment(\"htmlformentryui\", \"htmlform/enterHtmlForm\", [\n        patient: patient,\n        htmlForm: htmlForm,\n        visit: visit,\n        returnUrl: returnUrl\n]) }", "<%\n    ui.decorateWith(\"appui\", \"standardEmrPage\")\n\n    ui.includeJavascript(\"htmlformentryui\", \"htmlform/viewEncounterWithHtmlForm.js\")\n    ui.includeCss(\"htmlformentryui\", \"htmlform/viewEncounterWithHtmlForm.css\")\n%>\n\n<script type=\"text/javascript\">\n    window.viewHtmlForm = {\n        encounterId: ${ encounter.id },\n        returnUrl: \"${ ui.encodeJavaScript(returnUrl) }\",\n        htmlFormId: ${htmlForm.id}\n    };\n\n    var breadcrumbs = [\n        { icon: \"icon-home\", link: '/' + OPENMRS_CONTEXT_PATH + '/index.htm' },\n        { label: \"${ ui.encodeJavaScript(returnLabel) }\", link: \"${ ui.encodeJavaScript(returnUrl) }\" },\n        { label: \"${ ui.encodeJavaScript(ui.message(\"htmlformentryui.viewHtmlForm.breadcrumb\", ui.message(ui.format(htmlForm.form)))) }\" }\n    ];\n</script>\n\n<style type=\"text/css\">\n    #form-actions {\n        float: right;\n    }\n</style>\n\n<% if (encounter.voided) { %>\n    <div id=\"form-deleted-warning\">\n        ${ ui.message(\"htmlformentryui.thisFormIsDeleted\") }\n    </div>\n<% } %>\n\n<% if (showPatientHeader) { %>\n    ${ ui.includeFragment(\"coreapps\", \"patientHeader\", [ patient: patient ]) }\n<% } %>\n\n<span id=\"form-actions\" class=\"no-print\">\n\n<% if (customPrintPageName == null || customPrintPageName.isEmpty()) { %>\n        <a class=\"button\" id=\"print-button\" href=\"javascript:window.print()\">\n<% } else { %>\n        <a class=\"button\" id=\"print-button\" href=\"${ui.pageLink(customPrintProvider, customPrintPageName, [encounterUuid: encounter.uuid, contentDisposition: 'inline'])}\" target=\"${customPrintTarget}\">\n<% } %>\n\n        <i class=\"icon-print\"></i>\n        ${ ui.message(\"uicommons.print\") }\n    </a>\n    <a class=\"button\" id=\"edit-button\" href=\"${ ui.pageLink(\"htmlformentryui\", \"htmlform/editHtmlFormWith\" + editStyle + \"Ui\", [\n            encounterId: encounter.uuid,\n            patientId: patient.patient.uuid,\n            returnUrl: returnUrl\n    ]) }\">\n        <i class=\"icon-pencil\"></i>\n        ${ ui.message(\"uicommons.edit\") }\n    </a>\n    <a class=\"button\" id=\"delete-button\">\n        <i class=\"icon-remove\"></i>\n        ${ ui.message(\"uicommons.delete\") }\n    </a>\n    <div style=\"display:none\" id=\"confirm-delete-dialog\" class=\"dialog\">\n        <div class=\"dialog-header\">\n            ${ ui.message(\"htmlformentryui.confirmDeleteFormHeading\", ui.format(htmlForm)) }\n        </div>\n        <div class=\"dialog-content\">\n            <p>\n                ${ ui.message(\"htmlformentryui.confirmDeleteForm\")}\n            </p>\n            <br/>\n            <div class=\"buttons\">\n                <button class=\"confirm right\">Delete</button>\n                <button class=\"cancel\">Cancel</button>\n            </div>\n        </div>\n    </div>\n</span>\n\n${ ui.includeFragment(\"htmlformentryui\", \"htmlform/viewEncounterWithHtmlForm\", [\n        encounter: encounter,\n        htmlFormId: htmlForm\n]) }\n"], "filenames": ["api/src/main/java/org/openmrs/module/htmlformentryui/HtmlFormUtil.java", "omod/src/main/java/org/openmrs/module/htmlformentryui/fragment/controller/htmlform/EnterHtmlFormFragmentController.java", "omod/src/main/java/org/openmrs/module/htmlformentryui/page/controller/htmlform/ViewEncounterWithHtmlFormPageController.java", "omod/src/main/webapp/pages/htmlform/editHtmlFormWithSimpleUi.gsp", "omod/src/main/webapp/pages/htmlform/editHtmlFormWithStandardUi.gsp", "omod/src/main/webapp/pages/htmlform/enterHtmlFormWithSimpleUi.gsp", "omod/src/main/webapp/pages/htmlform/enterHtmlFormWithStandardUi.gsp", "omod/src/main/webapp/pages/htmlform/viewEncounterWithHtmlForm.gsp"], "buggy_code_start_loc": [206, 284, 42, 32, 13, 33, 16, 11], "buggy_code_end_loc": [207, 285, 43, 33, 14, 34, 17, 19], "fixing_code_start_loc": [206, 284, 42, 32, 13, 33, 16, 11], "fixing_code_end_loc": [207, 285, 43, 33, 14, 34, 17, 19], "type": "CWE-79", "message": "A vulnerability classified as problematic has been found in OpenMRS HTML Form Entry UI Framework Integration Module up to 1.x. This affects an unknown part. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 2.0.0 is able to address this issue. The name of the patch is 811990972ea07649ae33c4b56c61c3b520895f07. It is recommended to upgrade the affected component. The identifier VDB-216873 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2021-4284", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-27T10:15:11.750", "lastModified": "2023-01-06T05:59:18.557", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic has been found in OpenMRS HTML Form Entry UI Framework Integration Module up to 1.x. This affects an unknown part. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 2.0.0 is able to address this issue. The name of the patch is 811990972ea07649ae33c4b56c61c3b520895f07. It is recommended to upgrade the affected component. The identifier VDB-216873 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmrs:htmlformentryui:*:*:*:*:*:openmrs:*:*", "versionEndExcluding": "2.0.0", "matchCriteriaId": "DAFBB80C-FC13-4257-BF45-0B19A7F33775"}]}]}], "references": [{"url": "https://github.com/openmrs/openmrs-module-htmlformentryui/commit/811990972ea07649ae33c4b56c61c3b520895f07", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openmrs/openmrs-module-htmlformentryui/pull/51", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openmrs/openmrs-module-htmlformentryui/releases/tag/2.0.0", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://issues.openmrs.org/browse/RA-1424?filter=-1", "source": "cna@vuldb.com", "tags": ["Issue Tracking", "Permissions Required", "Vendor Advisory"]}, {"url": "https://vuldb.com/?ctiid.216873", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216873", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openmrs/openmrs-module-htmlformentryui/commit/811990972ea07649ae33c4b56c61c3b520895f07"}}