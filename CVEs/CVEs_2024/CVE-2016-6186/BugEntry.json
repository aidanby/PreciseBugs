{"buggy_code": ["/*global SelectBox, interpolate*/\n// Handles related-objects functionality: lookup link for raw_id_fields\n// and Add Another links.\n\n(function($) {\n    'use strict';\n\n    function html_unescape(text) {\n        // Unescape a string that was escaped using django.utils.html.escape.\n        text = text.replace(/&lt;/g, '<');\n        text = text.replace(/&gt;/g, '>');\n        text = text.replace(/&quot;/g, '\"');\n        text = text.replace(/&#39;/g, \"'\");\n        text = text.replace(/&amp;/g, '&');\n        return text;\n    }\n\n    // IE doesn't accept periods or dashes in the window name, but the element IDs\n    // we use to generate popup window names may contain them, therefore we map them\n    // to allowed characters in a reversible way so that we can locate the correct\n    // element when the popup window is dismissed.\n    function id_to_windowname(text) {\n        text = text.replace(/\\./g, '__dot__');\n        text = text.replace(/\\-/g, '__dash__');\n        return text;\n    }\n\n    function windowname_to_id(text) {\n        text = text.replace(/__dot__/g, '.');\n        text = text.replace(/__dash__/g, '-');\n        return text;\n    }\n\n    function showAdminPopup(triggeringLink, name_regexp, add_popup) {\n        var name = triggeringLink.id.replace(name_regexp, '');\n        name = id_to_windowname(name);\n        var href = triggeringLink.href;\n        if (add_popup) {\n            if (href.indexOf('?') === -1) {\n                href += '?_popup=1';\n            } else {\n                href += '&_popup=1';\n            }\n        }\n        var win = window.open(href, name, 'height=500,width=800,resizable=yes,scrollbars=yes');\n        win.focus();\n        return false;\n    }\n\n    function showRelatedObjectLookupPopup(triggeringLink) {\n        return showAdminPopup(triggeringLink, /^lookup_/, true);\n    }\n\n    function dismissRelatedLookupPopup(win, chosenId) {\n        var name = windowname_to_id(win.name);\n        var elem = document.getElementById(name);\n        if (elem.className.indexOf('vManyToManyRawIdAdminField') !== -1 && elem.value) {\n            elem.value += ',' + chosenId;\n        } else {\n            document.getElementById(name).value = chosenId;\n        }\n        win.close();\n    }\n\n    function showRelatedObjectPopup(triggeringLink) {\n        return showAdminPopup(triggeringLink, /^(change|add|delete)_/, false);\n    }\n\n    function updateRelatedObjectLinks(triggeringLink) {\n        var $this = django.jQuery(triggeringLink);\n        var siblings = $this.nextAll('.change-related, .delete-related');\n        if (!siblings.length) {\n            return;\n        }\n        var value = $this.val();\n        if (value) {\n            siblings.each(function() {\n                var elm = django.jQuery(this);\n                elm.attr('href', elm.attr('data-href-template').replace('__fk__', value));\n            });\n        } else {\n            siblings.removeAttr('href');\n        }\n    }\n\n    function dismissAddRelatedObjectPopup(win, newId, newRepr) {\n        // newId and newRepr are expected to have previously been escaped by\n        // django.utils.html.escape.\n        newId = html_unescape(newId);\n        newRepr = html_unescape(newRepr);\n        var name = windowname_to_id(win.name);\n        var elem = document.getElementById(name);\n        if (elem) {\n            var elemName = elem.nodeName.toUpperCase();\n            if (elemName === 'SELECT') {\n                elem.options[elem.options.length] = new Option(newRepr, newId, true, true);\n            } else if (elemName === 'INPUT') {\n                if (elem.className.indexOf('vManyToManyRawIdAdminField') !== -1 && elem.value) {\n                    elem.value += ',' + newId;\n                } else {\n                    elem.value = newId;\n                }\n            }\n            // Trigger a change event to update related links if required.\n            django.jQuery(elem).trigger('change');\n        } else {\n            var toId = name + \"_to\";\n            var o = new Option(newRepr, newId);\n            SelectBox.add_to_cache(toId, o);\n            SelectBox.redisplay(toId);\n        }\n        win.close();\n    }\n\n    function dismissChangeRelatedObjectPopup(win, objId, newRepr, newId) {\n        objId = html_unescape(objId);\n        newRepr = html_unescape(newRepr);\n        var id = windowname_to_id(win.name).replace(/^edit_/, '');\n        var selectsSelector = interpolate('#%s, #%s_from, #%s_to', [id, id, id]);\n        var selects = django.jQuery(selectsSelector);\n        selects.find('option').each(function() {\n            if (this.value === objId) {\n                this.innerHTML = newRepr;\n                this.value = newId;\n            }\n        });\n        win.close();\n    }\n\n    function dismissDeleteRelatedObjectPopup(win, objId) {\n        objId = html_unescape(objId);\n        var id = windowname_to_id(win.name).replace(/^delete_/, '');\n        var selectsSelector = interpolate('#%s, #%s_from, #%s_to', [id, id, id]);\n        var selects = django.jQuery(selectsSelector);\n        selects.find('option').each(function() {\n            if (this.value === objId) {\n                django.jQuery(this).remove();\n            }\n        }).trigger('change');\n        win.close();\n    }\n\n    // Global for testing purposes\n    window.html_unescape = html_unescape;\n    window.id_to_windowname = id_to_windowname;\n    window.windowname_to_id = windowname_to_id;\n\n    window.showRelatedObjectLookupPopup = showRelatedObjectLookupPopup;\n    window.dismissRelatedLookupPopup = dismissRelatedLookupPopup;\n    window.showRelatedObjectPopup = showRelatedObjectPopup;\n    window.updateRelatedObjectLinks = updateRelatedObjectLinks;\n    window.dismissAddRelatedObjectPopup = dismissAddRelatedObjectPopup;\n    window.dismissChangeRelatedObjectPopup = dismissChangeRelatedObjectPopup;\n    window.dismissDeleteRelatedObjectPopup = dismissDeleteRelatedObjectPopup;\n\n    // Kept for backward compatibility\n    window.showAddAnotherPopup = showRelatedObjectPopup;\n    window.dismissAddAnotherPopup = dismissAddRelatedObjectPopup;\n\n    $(document).ready(function() {\n        $('body').on('click', '.related-widget-wrapper-link', function(e) {\n            e.preventDefault();\n            if (this.href) {\n                var event = $.Event('django:show-related', {href: this.href});\n                $(this).trigger(event);\n                if (!event.isDefaultPrevented()) {\n                    showRelatedObjectPopup(this);\n                }\n            }\n        });\n        $('body').on('change', '.related-widget-wrapper select', function(e) {\n            var event = $.Event('django:update-related');\n            $(this).trigger(event);\n            if (!event.isDefaultPrevented()) {\n                updateRelatedObjectLinks(this);\n            }\n        });\n        $('.related-widget-wrapper select').trigger('change');\n        $('.related-lookup').click(function(e) {\n            e.preventDefault();\n            var event = $.Event('django:lookup-related');\n            $(this).trigger(event);\n            if (!event.isDefaultPrevented()) {\n                showRelatedObjectLookupPopup(this);\n            }\n        });\n    });\n\n})(django.jQuery);\n", "from __future__ import unicode_literals\n\nimport re\nimport sys\nimport types\n\nfrom django.conf import settings\nfrom django.core.urlresolvers import Resolver404, resolve\nfrom django.http import HttpResponse, HttpResponseNotFound\nfrom django.template import Context, Engine, TemplateDoesNotExist\nfrom django.template.defaultfilters import force_escape, pprint\nfrom django.utils import lru_cache, six, timezone\nfrom django.utils.datastructures import MultiValueDict\nfrom django.utils.encoding import force_bytes, smart_text\nfrom django.utils.module_loading import import_string\nfrom django.utils.translation import ugettext as _\n\n# Minimal Django templates engine to render the error templates\n# regardless of the project's TEMPLATES setting.\nDEBUG_ENGINE = Engine(debug=True)\n\nHIDDEN_SETTINGS = re.compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE')\n\nCLEANSED_SUBSTITUTE = '********************'\n\n\nclass CallableSettingWrapper(object):\n    \"\"\" Object to wrap callable appearing in settings\n\n    * Not to call in the debug page (#21345).\n    * Not to break the debug page if the callable forbidding to set attributes (#23070).\n    \"\"\"\n    def __init__(self, callable_setting):\n        self._wrapped = callable_setting\n\n    def __repr__(self):\n        return repr(self._wrapped)\n\n\ndef cleanse_setting(key, value):\n    \"\"\"Cleanse an individual setting key/value of sensitive content.\n\n    If the value is a dictionary, recursively cleanse the keys in\n    that dictionary.\n    \"\"\"\n    try:\n        if HIDDEN_SETTINGS.search(key):\n            cleansed = CLEANSED_SUBSTITUTE\n        else:\n            if isinstance(value, dict):\n                cleansed = {k: cleanse_setting(k, v) for k, v in value.items()}\n            else:\n                cleansed = value\n    except TypeError:\n        # If the key isn't regex-able, just return as-is.\n        cleansed = value\n\n    if callable(cleansed):\n        # For fixing #21345 and #23070\n        cleansed = CallableSettingWrapper(cleansed)\n\n    return cleansed\n\n\ndef get_safe_settings():\n    \"Returns a dictionary of the settings module, with sensitive settings blurred out.\"\n    settings_dict = {}\n    for k in dir(settings):\n        if k.isupper():\n            settings_dict[k] = cleanse_setting(k, getattr(settings, k))\n    return settings_dict\n\n\ndef technical_500_response(request, exc_type, exc_value, tb, status_code=500):\n    \"\"\"\n    Create a technical server error response. The last three arguments are\n    the values returned from sys.exc_info() and friends.\n    \"\"\"\n    reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n    if request.is_ajax():\n        text = reporter.get_traceback_text()\n        return HttpResponse(text, status=status_code, content_type='text/plain')\n    else:\n        html = reporter.get_traceback_html()\n        return HttpResponse(html, status=status_code, content_type='text/html')\n\n\n@lru_cache.lru_cache()\ndef get_default_exception_reporter_filter():\n    # Instantiate the default filter for the first time and cache it.\n    return import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)()\n\n\ndef get_exception_reporter_filter(request):\n    default_filter = get_default_exception_reporter_filter()\n    return getattr(request, 'exception_reporter_filter', default_filter)\n\n\nclass ExceptionReporterFilter(object):\n    \"\"\"\n    Base for all exception reporter filter classes. All overridable hooks\n    contain lenient default behaviors.\n    \"\"\"\n\n    def get_post_parameters(self, request):\n        if request is None:\n            return {}\n        else:\n            return request.POST\n\n    def get_traceback_frame_variables(self, request, tb_frame):\n        return list(tb_frame.f_locals.items())\n\n\nclass SafeExceptionReporterFilter(ExceptionReporterFilter):\n    \"\"\"\n    Use annotations made by the sensitive_post_parameters and\n    sensitive_variables decorators to filter out sensitive information.\n    \"\"\"\n\n    def is_active(self, request):\n        \"\"\"\n        This filter is to add safety in production environments (i.e. DEBUG\n        is False). If DEBUG is True then your site is not safe anyway.\n        This hook is provided as a convenience to easily activate or\n        deactivate the filter on a per request basis.\n        \"\"\"\n        return settings.DEBUG is False\n\n    def get_cleansed_multivaluedict(self, request, multivaluedict):\n        \"\"\"\n        Replaces the keys in a MultiValueDict marked as sensitive with stars.\n        This mitigates leaking sensitive POST parameters if something like\n        request.POST['nonexistent_key'] throws an exception (#21098).\n        \"\"\"\n        sensitive_post_parameters = getattr(request, 'sensitive_post_parameters', [])\n        if self.is_active(request) and sensitive_post_parameters:\n            multivaluedict = multivaluedict.copy()\n            for param in sensitive_post_parameters:\n                if param in multivaluedict:\n                    multivaluedict[param] = CLEANSED_SUBSTITUTE\n        return multivaluedict\n\n    def get_post_parameters(self, request):\n        \"\"\"\n        Replaces the values of POST parameters marked as sensitive with\n        stars (*********).\n        \"\"\"\n        if request is None:\n            return {}\n        else:\n            sensitive_post_parameters = getattr(request, 'sensitive_post_parameters', [])\n            if self.is_active(request) and sensitive_post_parameters:\n                cleansed = request.POST.copy()\n                if sensitive_post_parameters == '__ALL__':\n                    # Cleanse all parameters.\n                    for k, v in cleansed.items():\n                        cleansed[k] = CLEANSED_SUBSTITUTE\n                    return cleansed\n                else:\n                    # Cleanse only the specified parameters.\n                    for param in sensitive_post_parameters:\n                        if param in cleansed:\n                            cleansed[param] = CLEANSED_SUBSTITUTE\n                    return cleansed\n            else:\n                return request.POST\n\n    def cleanse_special_types(self, request, value):\n        try:\n            # If value is lazy or a complex object of another kind, this check\n            # might raise an exception. isinstance checks that lazy\n            # MultiValueDicts will have a return value.\n            is_multivalue_dict = isinstance(value, MultiValueDict)\n        except Exception as e:\n            return '{!r} while evaluating {!r}'.format(e, value)\n\n        if is_multivalue_dict:\n            # Cleanse MultiValueDicts (request.POST is the one we usually care about)\n            value = self.get_cleansed_multivaluedict(request, value)\n        return value\n\n    def get_traceback_frame_variables(self, request, tb_frame):\n        \"\"\"\n        Replaces the values of variables marked as sensitive with\n        stars (*********).\n        \"\"\"\n        # Loop through the frame's callers to see if the sensitive_variables\n        # decorator was used.\n        current_frame = tb_frame.f_back\n        sensitive_variables = None\n        while current_frame is not None:\n            if (current_frame.f_code.co_name == 'sensitive_variables_wrapper'\n                    and 'sensitive_variables_wrapper' in current_frame.f_locals):\n                # The sensitive_variables decorator was used, so we take note\n                # of the sensitive variables' names.\n                wrapper = current_frame.f_locals['sensitive_variables_wrapper']\n                sensitive_variables = getattr(wrapper, 'sensitive_variables', None)\n                break\n            current_frame = current_frame.f_back\n\n        cleansed = {}\n        if self.is_active(request) and sensitive_variables:\n            if sensitive_variables == '__ALL__':\n                # Cleanse all variables\n                for name, value in tb_frame.f_locals.items():\n                    cleansed[name] = CLEANSED_SUBSTITUTE\n            else:\n                # Cleanse specified variables\n                for name, value in tb_frame.f_locals.items():\n                    if name in sensitive_variables:\n                        value = CLEANSED_SUBSTITUTE\n                    else:\n                        value = self.cleanse_special_types(request, value)\n                    cleansed[name] = value\n        else:\n            # Potentially cleanse the request and any MultiValueDicts if they\n            # are one of the frame variables.\n            for name, value in tb_frame.f_locals.items():\n                cleansed[name] = self.cleanse_special_types(request, value)\n\n        if (tb_frame.f_code.co_name == 'sensitive_variables_wrapper'\n                and 'sensitive_variables_wrapper' in tb_frame.f_locals):\n            # For good measure, obfuscate the decorated function's arguments in\n            # the sensitive_variables decorator's frame, in case the variables\n            # associated with those arguments were meant to be obfuscated from\n            # the decorated function's frame.\n            cleansed['func_args'] = CLEANSED_SUBSTITUTE\n            cleansed['func_kwargs'] = CLEANSED_SUBSTITUTE\n\n        return cleansed.items()\n\n\nclass ExceptionReporter(object):\n    \"\"\"\n    A class to organize and coordinate reporting on exceptions.\n    \"\"\"\n    def __init__(self, request, exc_type, exc_value, tb, is_email=False):\n        self.request = request\n        self.filter = get_exception_reporter_filter(self.request)\n        self.exc_type = exc_type\n        self.exc_value = exc_value\n        self.tb = tb\n        self.is_email = is_email\n\n        self.template_info = getattr(self.exc_value, 'template_debug', None)\n        self.template_does_not_exist = False\n        self.postmortem = None\n\n        # Handle deprecated string exceptions\n        if isinstance(self.exc_type, six.string_types):\n            self.exc_value = Exception('Deprecated String Exception: %r' % self.exc_type)\n            self.exc_type = type(self.exc_value)\n\n    def get_traceback_data(self):\n        \"\"\"Return a dictionary containing traceback information.\"\"\"\n        if self.exc_type and issubclass(self.exc_type, TemplateDoesNotExist):\n            self.template_does_not_exist = True\n            self.postmortem = self.exc_value.chain or [self.exc_value]\n\n        frames = self.get_traceback_frames()\n        for i, frame in enumerate(frames):\n            if 'vars' in frame:\n                frame_vars = []\n                for k, v in frame['vars']:\n                    v = pprint(v)\n                    # The force_escape filter assume unicode, make sure that works\n                    if isinstance(v, six.binary_type):\n                        v = v.decode('utf-8', 'replace')  # don't choke on non-utf-8 input\n                    # Trim large blobs of data\n                    if len(v) > 4096:\n                        v = '%s... <trimmed %d bytes string>' % (v[0:4096], len(v))\n                    frame_vars.append((k, force_escape(v)))\n                frame['vars'] = frame_vars\n            frames[i] = frame\n\n        unicode_hint = ''\n        if self.exc_type and issubclass(self.exc_type, UnicodeError):\n            start = getattr(self.exc_value, 'start', None)\n            end = getattr(self.exc_value, 'end', None)\n            if start is not None and end is not None:\n                unicode_str = self.exc_value.args[1]\n                unicode_hint = smart_text(\n                    unicode_str[max(start - 5, 0):min(end + 5, len(unicode_str))],\n                    'ascii', errors='replace'\n                )\n        from django import get_version\n        c = {\n            'is_email': self.is_email,\n            'unicode_hint': unicode_hint,\n            'frames': frames,\n            'request': self.request,\n            'filtered_POST': self.filter.get_post_parameters(self.request),\n            'settings': get_safe_settings(),\n            'sys_executable': sys.executable,\n            'sys_version_info': '%d.%d.%d' % sys.version_info[0:3],\n            'server_time': timezone.now(),\n            'django_version_info': get_version(),\n            'sys_path': sys.path,\n            'template_info': self.template_info,\n            'template_does_not_exist': self.template_does_not_exist,\n            'postmortem': self.postmortem,\n        }\n        # Check whether exception info is available\n        if self.exc_type:\n            c['exception_type'] = self.exc_type.__name__\n        if self.exc_value:\n            c['exception_value'] = smart_text(self.exc_value, errors='replace')\n        if frames:\n            c['lastframe'] = frames[-1]\n        return c\n\n    def get_traceback_html(self):\n        \"Return HTML version of debug 500 HTTP error page.\"\n        t = DEBUG_ENGINE.from_string(TECHNICAL_500_TEMPLATE)\n        c = Context(self.get_traceback_data(), use_l10n=False)\n        return t.render(c)\n\n    def get_traceback_text(self):\n        \"Return plain text version of debug 500 HTTP error page.\"\n        t = DEBUG_ENGINE.from_string(TECHNICAL_500_TEXT_TEMPLATE)\n        c = Context(self.get_traceback_data(), autoescape=False, use_l10n=False)\n        return t.render(c)\n\n    def _get_lines_from_file(self, filename, lineno, context_lines, loader=None, module_name=None):\n        \"\"\"\n        Returns context_lines before and after lineno from file.\n        Returns (pre_context_lineno, pre_context, context_line, post_context).\n        \"\"\"\n        source = None\n        if loader is not None and hasattr(loader, \"get_source\"):\n            try:\n                source = loader.get_source(module_name)\n            except ImportError:\n                pass\n            if source is not None:\n                source = source.splitlines()\n        if source is None:\n            try:\n                with open(filename, 'rb') as fp:\n                    source = fp.read().splitlines()\n            except (OSError, IOError):\n                pass\n        if source is None:\n            return None, [], None, []\n\n        # If we just read the source from a file, or if the loader did not\n        # apply tokenize.detect_encoding to decode the source into a Unicode\n        # string, then we should do that ourselves.\n        if isinstance(source[0], six.binary_type):\n            encoding = 'ascii'\n            for line in source[:2]:\n                # File coding may be specified. Match pattern from PEP-263\n                # (http://www.python.org/dev/peps/pep-0263/)\n                match = re.search(br'coding[:=]\\s*([-\\w.]+)', line)\n                if match:\n                    encoding = match.group(1).decode('ascii')\n                    break\n            source = [six.text_type(sline, encoding, 'replace') for sline in source]\n\n        lower_bound = max(0, lineno - context_lines)\n        upper_bound = lineno + context_lines\n\n        pre_context = source[lower_bound:lineno]\n        context_line = source[lineno]\n        post_context = source[lineno + 1:upper_bound]\n\n        return lower_bound, pre_context, context_line, post_context\n\n    def get_traceback_frames(self):\n        def explicit_or_implicit_cause(exc_value):\n            explicit = getattr(exc_value, '__cause__', None)\n            implicit = getattr(exc_value, '__context__', None)\n            return explicit or implicit\n\n        # Get the exception and all its causes\n        exceptions = []\n        exc_value = self.exc_value\n        while exc_value:\n            exceptions.append(exc_value)\n            exc_value = explicit_or_implicit_cause(exc_value)\n\n        frames = []\n        # No exceptions were supplied to ExceptionReporter\n        if not exceptions:\n            return frames\n\n        # In case there's just one exception (always in Python 2,\n        # sometimes in Python 3), take the traceback from self.tb (Python 2\n        # doesn't have a __traceback__ attribute on Exception)\n        exc_value = exceptions.pop()\n        tb = self.tb if six.PY2 or not exceptions else exc_value.__traceback__\n\n        while tb is not None:\n            # Support for __traceback_hide__ which is used by a few libraries\n            # to hide internal frames.\n            if tb.tb_frame.f_locals.get('__traceback_hide__'):\n                tb = tb.tb_next\n                continue\n            filename = tb.tb_frame.f_code.co_filename\n            function = tb.tb_frame.f_code.co_name\n            lineno = tb.tb_lineno - 1\n            loader = tb.tb_frame.f_globals.get('__loader__')\n            module_name = tb.tb_frame.f_globals.get('__name__') or ''\n            pre_context_lineno, pre_context, context_line, post_context = self._get_lines_from_file(\n                filename, lineno, 7, loader, module_name,\n            )\n            if pre_context_lineno is not None:\n                frames.append({\n                    'exc_cause': explicit_or_implicit_cause(exc_value),\n                    'exc_cause_explicit': getattr(exc_value, '__cause__', True),\n                    'tb': tb,\n                    'type': 'django' if module_name.startswith('django.') else 'user',\n                    'filename': filename,\n                    'function': function,\n                    'lineno': lineno + 1,\n                    'vars': self.filter.get_traceback_frame_variables(self.request, tb.tb_frame),\n                    'id': id(tb),\n                    'pre_context': pre_context,\n                    'context_line': context_line,\n                    'post_context': post_context,\n                    'pre_context_lineno': pre_context_lineno + 1,\n                })\n\n            # If the traceback for current exception is consumed, try the\n            # other exception.\n            if six.PY2:\n                tb = tb.tb_next\n            elif not tb.tb_next and exceptions:\n                exc_value = exceptions.pop()\n                tb = exc_value.__traceback__\n            else:\n                tb = tb.tb_next\n\n        return frames\n\n    def format_exception(self):\n        \"\"\"\n        Return the same data as from traceback.format_exception.\n        \"\"\"\n        import traceback\n        frames = self.get_traceback_frames()\n        tb = [(f['filename'], f['lineno'], f['function'], f['context_line']) for f in frames]\n        list = ['Traceback (most recent call last):\\n']\n        list += traceback.format_list(tb)\n        list += traceback.format_exception_only(self.exc_type, self.exc_value)\n        return list\n\n\ndef technical_404_response(request, exception):\n    \"Create a technical 404 error response. The exception should be the Http404.\"\n    try:\n        error_url = exception.args[0]['path']\n    except (IndexError, TypeError, KeyError):\n        error_url = request.path_info[1:]  # Trim leading slash\n\n    try:\n        tried = exception.args[0]['tried']\n    except (IndexError, TypeError, KeyError):\n        tried = []\n    else:\n        if (not tried                           # empty URLconf\n            or (request.path == '/'\n                and len(tried) == 1             # default URLconf\n                and len(tried[0]) == 1\n                and getattr(tried[0][0], 'app_name', '') == getattr(tried[0][0], 'namespace', '') == 'admin')):\n            return default_urlconf(request)\n\n    urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n    if isinstance(urlconf, types.ModuleType):\n        urlconf = urlconf.__name__\n\n    caller = ''\n    try:\n        resolver_match = resolve(request.path)\n    except Resolver404:\n        pass\n    else:\n        obj = resolver_match.func\n\n        if hasattr(obj, '__name__'):\n            caller = obj.__name__\n        elif hasattr(obj, '__class__') and hasattr(obj.__class__, '__name__'):\n            caller = obj.__class__.__name__\n\n        if hasattr(obj, '__module__'):\n            module = obj.__module__\n            caller = '%s.%s' % (module, caller)\n\n    t = DEBUG_ENGINE.from_string(TECHNICAL_404_TEMPLATE)\n    c = Context({\n        'urlconf': urlconf,\n        'root_urlconf': settings.ROOT_URLCONF,\n        'request_path': error_url,\n        'urlpatterns': tried,\n        'reason': force_bytes(exception, errors='replace'),\n        'request': request,\n        'settings': get_safe_settings(),\n        'raising_view_name': caller,\n    })\n    return HttpResponseNotFound(t.render(c), content_type='text/html')\n\n\ndef default_urlconf(request):\n    \"Create an empty URLconf 404 error response.\"\n    t = DEBUG_ENGINE.from_string(DEFAULT_URLCONF_TEMPLATE)\n    c = Context({\n        \"title\": _(\"Welcome to Django\"),\n        \"heading\": _(\"It worked!\"),\n        \"subheading\": _(\"Congratulations on your first Django-powered page.\"),\n        \"instructions\": _(\"Of course, you haven't actually done any work yet. \"\n            \"Next, start your first app by running <code>python manage.py startapp [app_label]</code>.\"),\n        \"explanation\": _(\"You're seeing this message because you have <code>DEBUG = True</code> in your \"\n            \"Django settings file and you haven't configured any URLs. Get to work!\"),\n    })\n\n    return HttpResponse(t.render(c), content_type='text/html')\n\n#\n# Templates are embedded in the file so that we know the error handler will\n# always work even if the template loader is broken.\n#\n\nTECHNICAL_500_TEMPLATE = (\"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta name=\"robots\" content=\"NONE,NOARCHIVE\">\n  <title>{% if exception_type %}{{ exception_type }}{% else %}Report{% endif %}\"\"\"\n\"\"\"{% if request %} at {{ request.path_info|escape }}{% endif %}</title>\n  <style type=\"text/css\">\n    html * { padding:0; margin:0; }\n    body * { padding:10px 20px; }\n    body * * { padding:0; }\n    body { font:small sans-serif; }\n    body>div { border-bottom:1px solid #ddd; }\n    h1 { font-weight:normal; }\n    h2 { margin-bottom:.8em; }\n    h2 span { font-size:80%; color:#666; font-weight:normal; }\n    h3 { margin:1em 0 .5em 0; }\n    h4 { margin:0 0 .5em 0; font-weight: normal; }\n    code, pre { font-size: 100%; white-space: pre-wrap; }\n    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }\n    tbody td, tbody th { vertical-align:top; padding:2px 3px; }\n    thead th {\n      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;\n      font-weight:normal; font-size:11px; border:1px solid #ddd;\n    }\n    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }\n    table.vars { margin:5px 0 2px 40px; }\n    table.vars td, table.req td { font-family:monospace; }\n    table td.code { width:100%; }\n    table td.code pre { overflow:hidden; }\n    table.source th { color:#666; }\n    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }\n    ul.traceback { list-style-type:none; color: #222; }\n    ul.traceback li.frame { padding-bottom:1em; color:#666; }\n    ul.traceback li.user { background-color:#e0e0e0; color:#000 }\n    div.context { padding:10px 0; overflow:hidden; }\n    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }\n    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }\n    div.context ol li pre { display:inline; }\n    div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; }\n    div.context ol.context-line li span { position:absolute; right:32px; }\n    .user div.context ol.context-line li { background-color:#bbb; color:#000; }\n    .user div.context ol li { color:#666; }\n    div.commands { margin-left: 40px; }\n    div.commands a { color:#555; text-decoration:none; }\n    .user div.commands a { color: black; }\n    #summary { background: #ffc; }\n    #summary h2 { font-weight: normal; color: #666; }\n    #explanation { background:#eee; }\n    #template, #template-not-exist { background:#f6f6f6; }\n    #template-not-exist ul { margin: 0 0 10px 20px; }\n    #template-not-exist .postmortem-section { margin-bottom: 3px; }\n    #unicode-hint { background:#eee; }\n    #traceback { background:#eee; }\n    #requestinfo { background:#f6f6f6; padding-left:120px; }\n    #summary table { border:none; background:transparent; }\n    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }\n    #requestinfo h3 { margin-bottom:-1em; }\n    .error { background: #ffc; }\n    .specific { color:#cc3300; font-weight:bold; }\n    h2 span.commands { font-size:.7em;}\n    span.commands a:link {color:#5E5694;}\n    pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; }\n    .append-bottom { margin-bottom: 10px; }\n  </style>\n  {% if not is_email %}\n  <script type=\"text/javascript\">\n  //<!--\n    function getElementsByClassName(oElm, strTagName, strClassName){\n        // Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com\n        var arrElements = (strTagName == \"*\" && document.all)? document.all :\n        oElm.getElementsByTagName(strTagName);\n        var arrReturnElements = new Array();\n        strClassName = strClassName.replace(/\\-/g, \"\\\\-\");\n        var oRegExp = new RegExp(\"(^|\\\\s)\" + strClassName + \"(\\\\s|$)\");\n        var oElement;\n        for(var i=0; i<arrElements.length; i++){\n            oElement = arrElements[i];\n            if(oRegExp.test(oElement.className)){\n                arrReturnElements.push(oElement);\n            }\n        }\n        return (arrReturnElements)\n    }\n    function hideAll(elems) {\n      for (var e = 0; e < elems.length; e++) {\n        elems[e].style.display = 'none';\n      }\n    }\n    window.onload = function() {\n      hideAll(getElementsByClassName(document, 'table', 'vars'));\n      hideAll(getElementsByClassName(document, 'ol', 'pre-context'));\n      hideAll(getElementsByClassName(document, 'ol', 'post-context'));\n      hideAll(getElementsByClassName(document, 'div', 'pastebin'));\n    }\n    function toggle() {\n      for (var i = 0; i < arguments.length; i++) {\n        var e = document.getElementById(arguments[i]);\n        if (e) {\n          e.style.display = e.style.display == 'none' ? 'block': 'none';\n        }\n      }\n      return false;\n    }\n    function varToggle(link, id) {\n      toggle('v' + id);\n      var s = link.getElementsByTagName('span')[0];\n      var uarr = String.fromCharCode(0x25b6);\n      var darr = String.fromCharCode(0x25bc);\n      s.innerHTML = s.innerHTML == uarr ? darr : uarr;\n      return false;\n    }\n    function switchPastebinFriendly(link) {\n      s1 = \"Switch to copy-and-paste view\";\n      s2 = \"Switch back to interactive view\";\n      link.innerHTML = link.innerHTML.trim() == s1 ? s2: s1;\n      toggle('browserTraceback', 'pastebinTraceback');\n      return false;\n    }\n    //-->\n  </script>\n  {% endif %}\n</head>\n<body>\n<div id=\"summary\">\n  <h1>{% if exception_type %}{{ exception_type }}{% else %}Report{% endif %}\"\"\"\n  \"\"\"{% if request %} at {{ request.path_info|escape }}{% endif %}</h1>\n  <pre class=\"exception_value\">\"\"\"\n \"\"\"{% if exception_value %}{{ exception_value|force_escape }}{% else %}No exception message supplied{% endif %}\"\"\"\n\"\"\"</pre>\n  <table class=\"meta\">\n{% if request %}\n    <tr>\n      <th>Request Method:</th>\n      <td>{{ request.META.REQUEST_METHOD }}</td>\n    </tr>\n    <tr>\n      <th>Request URL:</th>\n      <td>{{ request.get_raw_uri|escape }}</td>\n    </tr>\n{% endif %}\n    <tr>\n      <th>Django Version:</th>\n      <td>{{ django_version_info }}</td>\n    </tr>\n{% if exception_type %}\n    <tr>\n      <th>Exception Type:</th>\n      <td>{{ exception_type }}</td>\n    </tr>\n{% endif %}\n{% if exception_type and exception_value %}\n    <tr>\n      <th>Exception Value:</th>\n      <td><pre>{{ exception_value|force_escape }}</pre></td>\n    </tr>\n{% endif %}\n{% if lastframe %}\n    <tr>\n      <th>Exception Location:</th>\n      <td>{{ lastframe.filename|escape }} in {{ lastframe.function|escape }}, line {{ lastframe.lineno }}</td>\n    </tr>\n{% endif %}\n    <tr>\n      <th>Python Executable:</th>\n      <td>{{ sys_executable|escape }}</td>\n    </tr>\n    <tr>\n      <th>Python Version:</th>\n      <td>{{ sys_version_info }}</td>\n    </tr>\n    <tr>\n      <th>Python Path:</th>\n      <td><pre>{{ sys_path|pprint }}</pre></td>\n    </tr>\n    <tr>\n      <th>Server time:</th>\n      <td>{{server_time|date:\"r\"}}</td>\n    </tr>\n  </table>\n</div>\n{% if unicode_hint %}\n<div id=\"unicode-hint\">\n    <h2>Unicode error hint</h2>\n    <p>The string that could not be encoded/decoded was: <strong>{{ unicode_hint|force_escape }}</strong></p>\n</div>\n{% endif %}\n{% if template_does_not_exist %}\n<div id=\"template-not-exist\">\n    <h2>Template-loader postmortem</h2>\n    {% if postmortem %}\n        <p class=\"append-bottom\">Django tried loading these templates, in this order:</p>\n        {% for entry in postmortem %}\n            <p class=\"postmortem-section\">Using engine <code>{{ entry.backend.name }}</code>:</p>\n            <ul>\n                {% if entry.tried %}\n                    {% for attempt in entry.tried %}\n                        <li><code>{{ attempt.0.loader_name }}</code>: {{ attempt.0.name }} ({{ attempt.1 }})</li>\n                    {% endfor %}\n                    </ul>\n                {% else %}\n                    <li>This engine did not provide a list of tried templates.</li>\n                {% endif %}\n            </ul>\n        {% endfor %}\n    {% else %}\n        <p>No templates were found because your 'TEMPLATES' setting is not configured.</p>\n    {% endif %}\n</div>\n{% endif %}\n{% if template_info %}\n<div id=\"template\">\n   <h2>Error during template rendering</h2>\n   <p>In template <code>{{ template_info.name }}</code>, error at line <strong>{{ template_info.line }}</strong></p>\n   <h3>{{ template_info.message }}</h3>\n   <table class=\"source{% if template_info.top %} cut-top{% endif %}\n      {% if template_info.bottom != template_info.total %} cut-bottom{% endif %}\">\n   {% for source_line in template_info.source_lines %}\n   {% if source_line.0 == template_info.line %}\n   <tr class=\"error\"><th>{{ source_line.0 }}</th>\n     <td>{{ template_info.before }}\"\"\"\n      \"\"\"<span class=\"specific\">{{ template_info.during }}</span>\"\"\"\n      \"\"\"{{ template_info.after }}</td>\n   </tr>\n   {% else %}\n      <tr><th>{{ source_line.0 }}</th>\n      <td>{{ source_line.1 }}</td></tr>\n   {% endif %}\n   {% endfor %}\n   </table>\n</div>\n{% endif %}\n{% if frames %}\n<div id=\"traceback\">\n  <h2>Traceback <span class=\"commands\">{% if not is_email %}<a href=\"#\" onclick=\"return switchPastebinFriendly(this);\">\n    Switch to copy-and-paste view</a></span>{% endif %}\n  </h2>\n  {% autoescape off %}\n  <div id=\"browserTraceback\">\n    <ul class=\"traceback\">\n      {% for frame in frames %}\n        {% ifchanged frame.exc_cause %}{% if frame.exc_cause %}\n          <li><h3>\n          {% if frame.exc_cause_explicit %}\n            The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:\n          {% else %}\n            During handling of the above exception ({{ frame.exc_cause }}), another exception occurred:\n          {% endif %}\n        </h3></li>\n        {% endif %}{% endifchanged %}\n        <li class=\"frame {{ frame.type }}\">\n          <code>{{ frame.filename|escape }}</code> in <code>{{ frame.function|escape }}</code>\n\n          {% if frame.context_line %}\n            <div class=\"context\" id=\"c{{ frame.id }}\">\n              {% if frame.pre_context and not is_email %}\n                <ol start=\"{{ frame.pre_context_lineno }}\" class=\"pre-context\" id=\"pre{{ frame.id }}\">\n                {% for line in frame.pre_context %}\n                  <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>{{ line|escape }}</pre></li>\n                {% endfor %}\n                </ol>\n              {% endif %}\n              <ol start=\"{{ frame.lineno }}\" class=\"context-line\">\n                <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>\n\"\"\"            \"\"\"{{ frame.context_line|escape }}</pre>{% if not is_email %} <span>...</span>{% endif %}</li></ol>\n              {% if frame.post_context and not is_email  %}\n                <ol start='{{ frame.lineno|add:\"1\" }}' class=\"post-context\" id=\"post{{ frame.id }}\">\n                  {% for line in frame.post_context %}\n                  <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>{{ line|escape }}</pre></li>\n                  {% endfor %}\n              </ol>\n              {% endif %}\n            </div>\n          {% endif %}\n\n          {% if frame.vars %}\n            <div class=\"commands\">\n                {% if is_email %}\n                    <h2>Local Vars</h2>\n                {% else %}\n                    <a href=\"#\" onclick=\"return varToggle(this, '{{ frame.id }}')\"><span>&#x25b6;</span> Local vars</a>\n                {% endif %}\n            </div>\n            <table class=\"vars\" id=\"v{{ frame.id }}\">\n              <thead>\n                <tr>\n                  <th>Variable</th>\n                  <th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                {% for var in frame.vars|dictsort:\"0\" %}\n                  <tr>\n                    <td>{{ var.0|force_escape }}</td>\n                    <td class=\"code\"><pre>{{ var.1 }}</pre></td>\n                  </tr>\n                {% endfor %}\n              </tbody>\n            </table>\n          {% endif %}\n        </li>\n      {% endfor %}\n    </ul>\n  </div>\n  {% endautoescape %}\n  <form action=\"http://dpaste.com/\" name=\"pasteform\" id=\"pasteform\" method=\"post\">\n{% if not is_email %}\n  <div id=\"pastebinTraceback\" class=\"pastebin\">\n    <input type=\"hidden\" name=\"language\" value=\"PythonConsole\">\n    <input type=\"hidden\" name=\"title\"\n      value=\"{{ exception_type|escape }}{% if request %} at {{ request.path_info|escape }}{% endif %}\">\n    <input type=\"hidden\" name=\"source\" value=\"Django Dpaste Agent\">\n    <input type=\"hidden\" name=\"poster\" value=\"Django\">\n    <textarea name=\"content\" id=\"traceback_area\" cols=\"140\" rows=\"25\">\nEnvironment:\n\n{% if request %}\nRequest Method: {{ request.META.REQUEST_METHOD }}\nRequest URL: {{ request.get_raw_uri|escape }}\n{% endif %}\nDjango Version: {{ django_version_info }}\nPython Version: {{ sys_version_info }}\nInstalled Applications:\n{{ settings.INSTALLED_APPS|pprint }}\nInstalled Middleware:\n{{ settings.MIDDLEWARE_CLASSES|pprint }}\n\n{% if template_does_not_exist %}Template loader postmortem\n{% if postmortem %}Django tried loading these templates, in this order:\n{% for entry in postmortem %}\nUsing engine {{ entry.backend.name }}:\n{% if entry.tried %}{% for attempt in entry.tried %}\"\"\"\n\"\"\"    * {{ attempt.0.loader_name }}: {{ attempt.0.name }} ({{ attempt.1 }})\n{% endfor %}{% else %}    This engine did not provide a list of tried templates.\n{% endif %}{% endfor %}\n{% else %}No templates were found because your 'TEMPLATES' setting is not configured.\n{% endif %}{% endif %}{% if template_info %}\nTemplate error:\nIn template {{ template_info.name }}, error at line {{ template_info.line }}\n   {{ template_info.message }}\"\"\"\n\"{% for source_line in template_info.source_lines %}\"\n\"{% if source_line.0 == template_info.line %}\"\n\"   {{ source_line.0 }} : {{ template_info.before }} {{ template_info.during }} {{ template_info.after }}\"\n\"{% else %}\"\n\"   {{ source_line.0 }} : {{ source_line.1 }}\"\n\"\"\"{% endif %}{% endfor %}{% endif %}\n\nTraceback:{% for frame in frames %}\n{% ifchanged frame.exc_cause %}{% if frame.exc_cause %}{% if frame.exc_cause_explicit %}\nThe above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:\n{% else %}\nDuring handling of the above exception ({{ frame.exc_cause }}), another exception occurred:\n{% endif %}{% endif %}{% endifchanged %}\nFile \"{{ frame.filename|escape }}\" in {{ frame.function|escape }}\n{% if frame.context_line %}  {{ frame.lineno }}. {{ frame.context_line|escape }}{% endif %}{% endfor %}\n\nException Type: {{ exception_type|escape }}{% if request %} at {{ request.path_info|escape }}{% endif %}\nException Value: {{ exception_value|force_escape }}\n</textarea>\n  <br><br>\n  <input type=\"submit\" value=\"Share this traceback on a public website\">\n  </div>\n</form>\n</div>\n{% endif %}\n{% endif %}\n\n<div id=\"requestinfo\">\n  <h2>Request information</h2>\n\n{% if request %}\n  <h3 id=\"get-info\">GET</h3>\n  {% if request.GET %}\n    <table class=\"req\">\n      <thead>\n        <tr>\n          <th>Variable</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for var in request.GET.items %}\n          <tr>\n            <td>{{ var.0 }}</td>\n            <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  {% else %}\n    <p>No GET data</p>\n  {% endif %}\n\n  <h3 id=\"post-info\">POST</h3>\n  {% if filtered_POST %}\n    <table class=\"req\">\n      <thead>\n        <tr>\n          <th>Variable</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for var in filtered_POST.items %}\n          <tr>\n            <td>{{ var.0 }}</td>\n            <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  {% else %}\n    <p>No POST data</p>\n  {% endif %}\n  <h3 id=\"files-info\">FILES</h3>\n  {% if request.FILES %}\n    <table class=\"req\">\n        <thead>\n            <tr>\n                <th>Variable</th>\n                <th>Value</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for var in request.FILES.items %}\n                <tr>\n                    <td>{{ var.0 }}</td>\n                    <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n  {% else %}\n    <p>No FILES data</p>\n  {% endif %}\n\n\n  <h3 id=\"cookie-info\">COOKIES</h3>\n  {% if request.COOKIES %}\n    <table class=\"req\">\n      <thead>\n        <tr>\n          <th>Variable</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for var in request.COOKIES.items %}\n          <tr>\n            <td>{{ var.0 }}</td>\n            <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  {% else %}\n    <p>No cookie data</p>\n  {% endif %}\n\n  <h3 id=\"meta-info\">META</h3>\n  <table class=\"req\">\n    <thead>\n      <tr>\n        <th>Variable</th>\n        <th>Value</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for var in request.META.items|dictsort:\"0\" %}\n        <tr>\n          <td>{{ var.0 }}</td>\n          <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n        </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n{% else %}\n  <p>Request data not supplied</p>\n{% endif %}\n\n  <h3 id=\"settings-info\">Settings</h3>\n  <h4>Using settings module <code>{{ settings.SETTINGS_MODULE }}</code></h4>\n  <table class=\"req\">\n    <thead>\n      <tr>\n        <th>Setting</th>\n        <th>Value</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for var in settings.items|dictsort:\"0\" %}\n        <tr>\n          <td>{{ var.0 }}</td>\n          <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n        </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n\n</div>\n{% if not is_email %}\n  <div id=\"explanation\">\n    <p>\n      You're seeing this error because you have <code>DEBUG = True</code> in your\n      Django settings file. Change that to <code>False</code>, and Django will\n      display a standard page generated by the handler for this status code.\n    </p>\n  </div>\n{% endif %}\n</body>\n</html>\n\"\"\")\n\nTECHNICAL_500_TEXT_TEMPLATE = (\"\"\"\"\"\"\n\"\"\"{% firstof exception_type 'Report' %}{% if request %} at {{ request.path_info }}{% endif %}\n{% firstof exception_value 'No exception message supplied' %}\n{% if request %}\nRequest Method: {{ request.META.REQUEST_METHOD }}\nRequest URL: {{ request.get_raw_uri }}{% endif %}\nDjango Version: {{ django_version_info }}\nPython Executable: {{ sys_executable }}\nPython Version: {{ sys_version_info }}\nPython Path: {{ sys_path }}\nServer time: {{server_time|date:\"r\"}}\nInstalled Applications:\n{{ settings.INSTALLED_APPS|pprint }}\nInstalled Middleware:\n{{ settings.MIDDLEWARE_CLASSES|pprint }}\n{% if template_does_not_exist %}Template loader postmortem\n{% if postmortem %}Django tried loading these templates, in this order:\n{% for entry in postmortem %}\nUsing engine {{ entry.backend.name }}:\n{% if entry.tried %}{% for attempt in entry.tried %}\"\"\"\n\"\"\"    * {{ attempt.0.loader_name }}: {{ attempt.0.name }} ({{ attempt.1 }})\n{% endfor %}{% else %}    This engine did not provide a list of tried templates.\n{% endif %}{% endfor %}\n{% else %}No templates were found because your 'TEMPLATES' setting is not configured.\n{% endif %}\n{% endif %}{% if template_info %}\nTemplate error:\nIn template {{ template_info.name }}, error at line {{ template_info.line }}\n   {{ template_info.message }}\n{% for source_line in template_info.source_lines %}\"\"\"\n\"{% if source_line.0 == template_info.line %}\"\n\"   {{ source_line.0 }} : {{ template_info.before }} {{ template_info.during }} {{ template_info.after }}\"\n\"{% else %}\"\n\"   {{ source_line.0 }} : {{ source_line.1 }}\"\n\"\"\"{% endif %}{% endfor %}{% endif %}{% if frames %}\n\nTraceback:\"\"\"\n\"{% for frame in frames %}\"\n\"{% ifchanged frame.exc_cause %}\"\n\"  {% if frame.exc_cause %}\" \"\"\"\n    {% if frame.exc_cause_explicit %}\n      The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:\n    {% else %}\n      During handling of the above exception ({{ frame.exc_cause }}), another exception occurred:\n    {% endif %}\n  {% endif %}\n{% endifchanged %}\nFile \"{{ frame.filename }}\" in {{ frame.function }}\n{% if frame.context_line %}  {{ frame.lineno }}. {{ frame.context_line }}{% endif %}\n{% endfor %}\n{% if exception_type %}Exception Type: {{ exception_type }}{% if request %} at {{ request.path_info }}{% endif %}\n{% if exception_value %}Exception Value: {{ exception_value }}{% endif %}{% endif %}{% endif %}\n{% if request %}Request information:\nGET:{% for k, v in request.GET.items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No GET data{% endfor %}\n\nPOST:{% for k, v in filtered_POST.items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No POST data{% endfor %}\n\nFILES:{% for k, v in request.FILES.items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No FILES data{% endfor %}\n\nCOOKIES:{% for k, v in request.COOKIES.items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No cookie data{% endfor %}\n\nMETA:{% for k, v in request.META.items|dictsort:\"0\" %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% endfor %}\n{% else %}Request data not supplied\n{% endif %}\nSettings:\nUsing settings module {{ settings.SETTINGS_MODULE }}{% for k, v in settings.items|dictsort:\"0\" %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% endfor %}\n\n{% if not is_email %}\nYou're seeing this error because you have DEBUG = True in your\nDjango settings file. Change that to False, and Django will\ndisplay a standard page generated by the handler for this status code.\n{% endif %}\n\"\"\")\n\nTECHNICAL_404_TEMPLATE = \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <title>Page not found at {{ request.path_info|escape }}</title>\n  <meta name=\"robots\" content=\"NONE,NOARCHIVE\">\n  <style type=\"text/css\">\n    html * { padding:0; margin:0; }\n    body * { padding:10px 20px; }\n    body * * { padding:0; }\n    body { font:small sans-serif; background:#eee; }\n    body>div { border-bottom:1px solid #ddd; }\n    h1 { font-weight:normal; margin-bottom:.4em; }\n    h1 span { font-size:60%; color:#666; font-weight:normal; }\n    table { border:none; border-collapse: collapse; width:100%; }\n    td, th { vertical-align:top; padding:2px 3px; }\n    th { width:12em; text-align:right; color:#666; padding-right:.5em; }\n    #info { background:#f6f6f6; }\n    #info ol { margin: 0.5em 4em; }\n    #info ol li { font-family: monospace; }\n    #summary { background: #ffc; }\n    #explanation { background:#eee; border-bottom: 0px none; }\n  </style>\n</head>\n<body>\n  <div id=\"summary\">\n    <h1>Page not found <span>(404)</span></h1>\n    <table class=\"meta\">\n      <tr>\n        <th>Request Method:</th>\n        <td>{{ request.META.REQUEST_METHOD }}</td>\n      </tr>\n      <tr>\n        <th>Request URL:</th>\n        <td>{{ request.build_absolute_uri|escape }}</td>\n      </tr>\n      {% if raising_view_name %}\n      <tr>\n        <th>Raised by:</th>\n        <td>{{ raising_view_name }}</td>\n      </tr>\n      {% endif %}\n    </table>\n  </div>\n  <div id=\"info\">\n    {% if urlpatterns %}\n      <p>\n      Using the URLconf defined in <code>{{ urlconf }}</code>,\n      Django tried these URL patterns, in this order:\n      </p>\n      <ol>\n        {% for pattern in urlpatterns %}\n          <li>\n            {% for pat in pattern %}\n                {{ pat.regex.pattern }}\n                {% if forloop.last and pat.name %}[name='{{ pat.name }}']{% endif %}\n            {% endfor %}\n          </li>\n        {% endfor %}\n      </ol>\n      <p>The current URL, <code>{{ request_path|escape }}</code>, didn't match any of these.</p>\n    {% else %}\n      <p>{{ reason }}</p>\n    {% endif %}\n  </div>\n\n  <div id=\"explanation\">\n    <p>\n      You're seeing this error because you have <code>DEBUG = True</code> in\n      your Django settings file. Change that to <code>False</code>, and Django\n      will display a standard 404 page.\n    </p>\n  </div>\n</body>\n</html>\n\"\"\"\n\nDEFAULT_URLCONF_TEMPLATE = \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\"><head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta name=\"robots\" content=\"NONE,NOARCHIVE\"><title>{{ title }}</title>\n  <style type=\"text/css\">\n    html * { padding:0; margin:0; }\n    body * { padding:10px 20px; }\n    body * * { padding:0; }\n    body { font:small sans-serif; }\n    body>div { border-bottom:1px solid #ddd; }\n    h1 { font-weight:normal; }\n    h2 { margin-bottom:.8em; }\n    h2 span { font-size:80%; color:#666; font-weight:normal; }\n    h3 { margin:1em 0 .5em 0; }\n    h4 { margin:0 0 .5em 0; font-weight: normal; }\n    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }\n    tbody td, tbody th { vertical-align:top; padding:2px 3px; }\n    thead th {\n      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;\n      font-weight:normal; font-size:11px; border:1px solid #ddd;\n    }\n    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }\n    #summary { background: #e0ebff; }\n    #summary h2 { font-weight: normal; color: #666; }\n    #explanation { background:#eee; }\n    #instructions { background:#f6f6f6; }\n    #summary table { border:none; background:transparent; }\n  </style>\n</head>\n\n<body>\n<div id=\"summary\">\n  <h1>{{ heading }}</h1>\n  <h2>{{ subheading }}</h2>\n</div>\n\n<div id=\"instructions\">\n  <p>\n    {{ instructions|safe }}\n  </p>\n</div>\n\n<div id=\"explanation\">\n  <p>\n    {{ explanation|safe }}\n  </p>\n</div>\n</body></html>\n\"\"\"\n", "===========================\nDjango 1.8.14 release notes\n===========================\n\n*Under development*\n\nDjango 1.8.14 fixes several bugs in 1.8.13.\n\nBugfixes\n========\n\n* Fixed missing ``varchar/text_pattern_ops`` index on ``CharField`` and\n  ``TextField`` respectively when using ``AddField`` on PostgreSQL\n  (:ticket:`26889`).\n", "==========================\nDjango 1.9.8 release notes\n==========================\n\n*Under development*\n\nDjango 1.9.8 fixes several bugs in 1.9.7.\n\nBugfixes\n========\n\n* Fixed missing ``varchar/text_pattern_ops`` index on ``CharField`` and\n  ``TextField`` respectively when using ``AddField`` on PostgreSQL\n  (:ticket:`26889`).\n\n* Fixed ``makemessages`` crash on Python 2 with non-ASCII file names\n  (:ticket:`26897`).\n", "# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nimport datetime\nimport os\nimport tempfile\nimport uuid\n\nfrom django.contrib.auth.models import User\nfrom django.contrib.contenttypes.fields import (\n    GenericForeignKey, GenericRelation,\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.storage import FileSystemStorage\nfrom django.db import models\nfrom django.utils.encoding import python_2_unicode_compatible\n\n\nclass Section(models.Model):\n    \"\"\"\n    A simple section that links to articles, to test linking to related items\n    in admin views.\n    \"\"\"\n    name = models.CharField(max_length=100)\n\n    @property\n    def name_property(self):\n        \"\"\"\n        A property that simply returns the name. Used to test #24461\n        \"\"\"\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Article(models.Model):\n    \"\"\"\n    A simple article to test admin views. Test backwards compatibility.\n    \"\"\"\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    date = models.DateTimeField()\n    section = models.ForeignKey(Section, models.CASCADE, null=True, blank=True)\n    another_section = models.ForeignKey(Section, models.CASCADE, null=True, blank=True, related_name='+')\n    sub_section = models.ForeignKey(Section, models.SET_NULL, null=True, blank=True, related_name='+')\n\n    def __str__(self):\n        return self.title\n\n    def model_year(self):\n        return self.date.year\n    model_year.admin_order_field = 'date'\n    model_year.short_description = ''\n\n    def model_year_reversed(self):\n        return self.date.year\n    model_year_reversed.admin_order_field = '-date'\n    model_year_reversed.short_description = ''\n\n\n@python_2_unicode_compatible\nclass Book(models.Model):\n    \"\"\"\n    A simple book that has chapters.\n    \"\"\"\n    name = models.CharField(max_length=100, verbose_name='\u00bfName?')\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Promo(models.Model):\n    name = models.CharField(max_length=100, verbose_name='\u00bfName?')\n    book = models.ForeignKey(Book, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Chapter(models.Model):\n    title = models.CharField(max_length=100, verbose_name='\u00bfTitle?')\n    content = models.TextField()\n    book = models.ForeignKey(Book, models.CASCADE)\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        # Use a utf-8 bytestring to ensure it works (see #11710)\n        verbose_name = '\u00bfChapter?'\n\n\n@python_2_unicode_compatible\nclass ChapterXtra1(models.Model):\n    chap = models.OneToOneField(Chapter, models.CASCADE, verbose_name='\u00bfChap?')\n    xtra = models.CharField(max_length=100, verbose_name='\u00bfXtra?')\n\n    def __str__(self):\n        return '\u00bfXtra1: %s' % self.xtra\n\n\n@python_2_unicode_compatible\nclass ChapterXtra2(models.Model):\n    chap = models.OneToOneField(Chapter, models.CASCADE, verbose_name='\u00bfChap?')\n    xtra = models.CharField(max_length=100, verbose_name='\u00bfXtra?')\n\n    def __str__(self):\n        return '\u00bfXtra2: %s' % self.xtra\n\n\nclass RowLevelChangePermissionModel(models.Model):\n    name = models.CharField(max_length=100, blank=True)\n\n\nclass CustomArticle(models.Model):\n    content = models.TextField()\n    date = models.DateTimeField()\n\n\n@python_2_unicode_compatible\nclass ModelWithStringPrimaryKey(models.Model):\n    string_pk = models.CharField(max_length=255, primary_key=True)\n\n    def __str__(self):\n        return self.string_pk\n\n    def get_absolute_url(self):\n        return '/dummy/%s/' % self.string_pk\n\n\n@python_2_unicode_compatible\nclass Color(models.Model):\n    value = models.CharField(max_length=10)\n    warm = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.value\n\n\n# we replicate Color to register with another ModelAdmin\nclass Color2(Color):\n    class Meta:\n        proxy = True\n\n\n@python_2_unicode_compatible\nclass Thing(models.Model):\n    title = models.CharField(max_length=20)\n    color = models.ForeignKey(Color, models.CASCADE, limit_choices_to={'warm': True})\n    pub_date = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return self.title\n\n\n@python_2_unicode_compatible\nclass Actor(models.Model):\n    name = models.CharField(max_length=50)\n    age = models.IntegerField()\n    title = models.CharField(max_length=50, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Inquisition(models.Model):\n    expected = models.BooleanField(default=False)\n    leader = models.ForeignKey(Actor, models.CASCADE)\n    country = models.CharField(max_length=20)\n\n    def __str__(self):\n        return \"by %s from %s\" % (self.leader, self.country)\n\n\n@python_2_unicode_compatible\nclass Sketch(models.Model):\n    title = models.CharField(max_length=100)\n    inquisition = models.ForeignKey(\n        Inquisition,\n        models.CASCADE,\n        limit_choices_to={\n            'leader__name': 'Palin',\n            'leader__age': 27,\n            'expected': False,\n        },\n    )\n    defendant0 = models.ForeignKey(\n        Actor,\n        models.CASCADE,\n        limit_choices_to={'title__isnull': False},\n        related_name='as_defendant0',\n    )\n    defendant1 = models.ForeignKey(\n        Actor,\n        models.CASCADE,\n        limit_choices_to={'title__isnull': True},\n        related_name='as_defendant1',\n    )\n\n    def __str__(self):\n        return self.title\n\n\ndef today_callable_dict():\n    return {\"last_action__gte\": datetime.datetime.today()}\n\n\ndef today_callable_q():\n    return models.Q(last_action__gte=datetime.datetime.today())\n\n\n@python_2_unicode_compatible\nclass Character(models.Model):\n    username = models.CharField(max_length=100)\n    last_action = models.DateTimeField()\n\n    def __str__(self):\n        return self.username\n\n\n@python_2_unicode_compatible\nclass StumpJoke(models.Model):\n    variation = models.CharField(max_length=100)\n    most_recently_fooled = models.ForeignKey(\n        Character,\n        models.CASCADE,\n        limit_choices_to=today_callable_dict,\n        related_name=\"+\",\n    )\n    has_fooled_today = models.ManyToManyField(Character, limit_choices_to=today_callable_q, related_name=\"+\")\n\n    def __str__(self):\n        return self.variation\n\n\nclass Fabric(models.Model):\n    NG_CHOICES = (\n        ('Textured', (\n            ('x', 'Horizontal'),\n            ('y', 'Vertical'),\n        )),\n        ('plain', 'Smooth'),\n    )\n    surface = models.CharField(max_length=20, choices=NG_CHOICES)\n\n\n@python_2_unicode_compatible\nclass Person(models.Model):\n    GENDER_CHOICES = (\n        (1, \"Male\"),\n        (2, \"Female\"),\n    )\n    name = models.CharField(max_length=100)\n    gender = models.IntegerField(choices=GENDER_CHOICES)\n    age = models.IntegerField(default=21)\n    alive = models.BooleanField(default=True)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Persona(models.Model):\n    \"\"\"\n    A simple persona associated with accounts, to test inlining of related\n    accounts which inherit from a common accounts class.\n    \"\"\"\n    name = models.CharField(blank=False, max_length=80)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Account(models.Model):\n    \"\"\"\n    A simple, generic account encapsulating the information shared by all\n    types of accounts.\n    \"\"\"\n    username = models.CharField(blank=False, max_length=80)\n    persona = models.ForeignKey(Persona, models.CASCADE, related_name=\"accounts\")\n    servicename = 'generic service'\n\n    def __str__(self):\n        return \"%s: %s\" % (self.servicename, self.username)\n\n\nclass FooAccount(Account):\n    \"\"\"A service-specific account of type Foo.\"\"\"\n    servicename = 'foo'\n\n\nclass BarAccount(Account):\n    \"\"\"A service-specific account of type Bar.\"\"\"\n    servicename = 'bar'\n\n\n@python_2_unicode_compatible\nclass Subscriber(models.Model):\n    name = models.CharField(blank=False, max_length=80)\n    email = models.EmailField(blank=False, max_length=175)\n\n    def __str__(self):\n        return \"%s (%s)\" % (self.name, self.email)\n\n\nclass ExternalSubscriber(Subscriber):\n    pass\n\n\nclass OldSubscriber(Subscriber):\n    pass\n\n\nclass Media(models.Model):\n    name = models.CharField(max_length=60)\n\n\nclass Podcast(Media):\n    release_date = models.DateField()\n\n    class Meta:\n        ordering = ('release_date',)  # overridden in PodcastAdmin\n\n\nclass Vodcast(Media):\n    media = models.OneToOneField(Media, models.CASCADE, primary_key=True, parent_link=True)\n    released = models.BooleanField(default=False)\n\n\nclass Parent(models.Model):\n    name = models.CharField(max_length=128)\n\n    def clean(self):\n        if self.name == '_invalid':\n            raise ValidationError('invalid')\n\n\nclass Child(models.Model):\n    parent = models.ForeignKey(Parent, models.CASCADE, editable=False)\n    name = models.CharField(max_length=30, blank=True)\n\n    def clean(self):\n        if self.name == '_invalid':\n            raise ValidationError('invalid')\n\n\n@python_2_unicode_compatible\nclass EmptyModel(models.Model):\n    def __str__(self):\n        return \"Primary key = %s\" % self.id\n\n\ntemp_storage = FileSystemStorage(tempfile.mkdtemp())\nUPLOAD_TO = os.path.join(temp_storage.location, 'test_upload')\n\n\nclass Gallery(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Picture(models.Model):\n    name = models.CharField(max_length=100)\n    image = models.FileField(storage=temp_storage, upload_to='test_upload')\n    gallery = models.ForeignKey(Gallery, models.CASCADE, related_name=\"pictures\")\n\n\nclass Language(models.Model):\n    iso = models.CharField(max_length=5, primary_key=True)\n    name = models.CharField(max_length=50)\n    english_name = models.CharField(max_length=50)\n    shortlist = models.BooleanField(default=False)\n\n    class Meta:\n        ordering = ('iso',)\n\n\n# a base class for Recommender and Recommendation\nclass Title(models.Model):\n    pass\n\n\nclass TitleTranslation(models.Model):\n    title = models.ForeignKey(Title, models.CASCADE)\n    text = models.CharField(max_length=100)\n\n\nclass Recommender(Title):\n    pass\n\n\nclass Recommendation(Title):\n    recommender = models.ForeignKey(Recommender, models.CASCADE)\n\n\nclass Collector(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Widget(models.Model):\n    owner = models.ForeignKey(Collector, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n\nclass DooHickey(models.Model):\n    code = models.CharField(max_length=10, primary_key=True)\n    owner = models.ForeignKey(Collector, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n\nclass Grommet(models.Model):\n    code = models.AutoField(primary_key=True)\n    owner = models.ForeignKey(Collector, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n\nclass Whatsit(models.Model):\n    index = models.IntegerField(primary_key=True)\n    owner = models.ForeignKey(Collector, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n\nclass Doodad(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass FancyDoodad(Doodad):\n    owner = models.ForeignKey(Collector, models.CASCADE)\n    expensive = models.BooleanField(default=True)\n\n\n@python_2_unicode_compatible\nclass Category(models.Model):\n    collector = models.ForeignKey(Collector, models.CASCADE)\n    order = models.PositiveIntegerField()\n\n    class Meta:\n        ordering = ('order',)\n\n    def __str__(self):\n        return '%s:o%s' % (self.id, self.order)\n\n\ndef link_posted_default():\n    return datetime.date.today() - datetime.timedelta(days=7)\n\n\nclass Link(models.Model):\n    posted = models.DateField(default=link_posted_default)\n    url = models.URLField()\n    post = models.ForeignKey(\"Post\", models.CASCADE)\n    readonly_link_content = models.TextField()\n\n\nclass PrePopulatedPost(models.Model):\n    title = models.CharField(max_length=100)\n    published = models.BooleanField(default=False)\n    slug = models.SlugField()\n\n\nclass PrePopulatedSubPost(models.Model):\n    post = models.ForeignKey(PrePopulatedPost, models.CASCADE)\n    subtitle = models.CharField(max_length=100)\n    subslug = models.SlugField()\n\n\nclass Post(models.Model):\n    title = models.CharField(max_length=100, help_text=\"Some help text for the title (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)\")\n    content = models.TextField(help_text=\"Some help text for the content (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)\")\n    readonly_content = models.TextField()\n    posted = models.DateField(\n        default=datetime.date.today,\n        help_text=\"Some help text for the date (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)\"\n    )\n    public = models.NullBooleanField()\n\n    def awesomeness_level(self):\n        return \"Very awesome.\"\n\n\n# Proxy model to test overridden fields attrs on Post model so as not to\n# interfere with other tests.\nclass FieldOverridePost(Post):\n    class Meta:\n        proxy = True\n\n\n@python_2_unicode_compatible\nclass Gadget(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Villain(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n\nclass SuperVillain(Villain):\n    pass\n\n\n@python_2_unicode_compatible\nclass FunkyTag(models.Model):\n    \"Because we all know there's only one real use case for GFKs.\"\n    name = models.CharField(max_length=25)\n    content_type = models.ForeignKey(ContentType, models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Plot(models.Model):\n    name = models.CharField(max_length=100)\n    team_leader = models.ForeignKey(Villain, models.CASCADE, related_name='lead_plots')\n    contact = models.ForeignKey(Villain, models.CASCADE, related_name='contact_plots')\n    tags = GenericRelation(FunkyTag)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass PlotDetails(models.Model):\n    details = models.CharField(max_length=100)\n    plot = models.OneToOneField(Plot, models.CASCADE, null=True, blank=True)\n\n    def __str__(self):\n        return self.details\n\n\nclass PlotProxy(Plot):\n    class Meta:\n        proxy = True\n\n\n@python_2_unicode_compatible\nclass SecretHideout(models.Model):\n    \"\"\" Secret! Not registered with the admin! \"\"\"\n    location = models.CharField(max_length=100)\n    villain = models.ForeignKey(Villain, models.CASCADE)\n\n    def __str__(self):\n        return self.location\n\n\n@python_2_unicode_compatible\nclass SuperSecretHideout(models.Model):\n    \"\"\" Secret! Not registered with the admin! \"\"\"\n    location = models.CharField(max_length=100)\n    supervillain = models.ForeignKey(SuperVillain, models.CASCADE)\n\n    def __str__(self):\n        return self.location\n\n\n@python_2_unicode_compatible\nclass Bookmark(models.Model):\n    name = models.CharField(max_length=60)\n    tag = GenericRelation(FunkyTag, related_query_name='bookmark')\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass CyclicOne(models.Model):\n    name = models.CharField(max_length=25)\n    two = models.ForeignKey('CyclicTwo', models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass CyclicTwo(models.Model):\n    name = models.CharField(max_length=25)\n    one = models.ForeignKey(CyclicOne, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Topping(models.Model):\n    name = models.CharField(max_length=20)\n\n\nclass Pizza(models.Model):\n    name = models.CharField(max_length=20)\n    toppings = models.ManyToManyField('Topping', related_name='pizzas')\n\n\nclass Album(models.Model):\n    owner = models.ForeignKey(User, models.SET_NULL, null=True, blank=True)\n    title = models.CharField(max_length=30)\n\n\nclass Employee(Person):\n    code = models.CharField(max_length=20)\n\n\nclass WorkHour(models.Model):\n    datum = models.DateField()\n    employee = models.ForeignKey(Employee, models.CASCADE)\n\n\nclass Question(models.Model):\n    question = models.CharField(max_length=20)\n\n\n@python_2_unicode_compatible\nclass Answer(models.Model):\n    question = models.ForeignKey(Question, models.PROTECT)\n    answer = models.CharField(max_length=20)\n\n    def __str__(self):\n        return self.answer\n\n\nclass Reservation(models.Model):\n    start_date = models.DateTimeField()\n    price = models.IntegerField()\n\n\nDRIVER_CHOICES = (\n    ('bill', 'Bill G'),\n    ('steve', 'Steve J'),\n)\n\nRESTAURANT_CHOICES = (\n    ('indian', 'A Taste of India'),\n    ('thai', 'Thai Pography'),\n    ('pizza', 'Pizza Mama'),\n)\n\n\nclass FoodDelivery(models.Model):\n    reference = models.CharField(max_length=100)\n    driver = models.CharField(max_length=100, choices=DRIVER_CHOICES, blank=True)\n    restaurant = models.CharField(max_length=100, choices=RESTAURANT_CHOICES, blank=True)\n\n    class Meta:\n        unique_together = ((\"driver\", \"restaurant\"),)\n\n\n@python_2_unicode_compatible\nclass CoverLetter(models.Model):\n    author = models.CharField(max_length=30)\n    date_written = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return self.author\n\n\nclass Paper(models.Model):\n    title = models.CharField(max_length=30)\n    author = models.CharField(max_length=30, blank=True, null=True)\n\n\nclass ShortMessage(models.Model):\n    content = models.CharField(max_length=140)\n    timestamp = models.DateTimeField(null=True, blank=True)\n\n\n@python_2_unicode_compatible\nclass Telegram(models.Model):\n    title = models.CharField(max_length=30)\n    date_sent = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass Story(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n\n\nclass OtherStory(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n\n\nclass ComplexSortedPerson(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.PositiveIntegerField()\n    is_employee = models.NullBooleanField()\n\n\nclass PluggableSearchPerson(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.PositiveIntegerField()\n\n\nclass PrePopulatedPostLargeSlug(models.Model):\n    \"\"\"\n    Regression test for #15938: a large max_length for the slugfield must not\n    be localized in prepopulated_fields_js.html or it might end up breaking\n    the javascript (ie, using THOUSAND_SEPARATOR ends up with maxLength=1,000)\n    \"\"\"\n    title = models.CharField(max_length=100)\n    published = models.BooleanField(default=False)\n    # `db_index=False` because MySQL cannot index large CharField (#21196).\n    slug = models.SlugField(max_length=1000, db_index=False)\n\n\nclass AdminOrderedField(models.Model):\n    order = models.IntegerField()\n    stuff = models.CharField(max_length=200)\n\n\nclass AdminOrderedModelMethod(models.Model):\n    order = models.IntegerField()\n    stuff = models.CharField(max_length=200)\n\n    def some_order(self):\n        return self.order\n    some_order.admin_order_field = 'order'\n\n\nclass AdminOrderedAdminMethod(models.Model):\n    order = models.IntegerField()\n    stuff = models.CharField(max_length=200)\n\n\nclass AdminOrderedCallable(models.Model):\n    order = models.IntegerField()\n    stuff = models.CharField(max_length=200)\n\n\n@python_2_unicode_compatible\nclass Report(models.Model):\n    title = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.title\n\n\nclass MainPrepopulated(models.Model):\n    name = models.CharField(max_length=100)\n    pubdate = models.DateField()\n    status = models.CharField(\n        max_length=20,\n        choices=(('option one', 'Option One'),\n                 ('option two', 'Option Two')))\n    slug1 = models.SlugField(blank=True)\n    slug2 = models.SlugField(blank=True)\n    slug3 = models.SlugField(blank=True, allow_unicode=True)\n\n\nclass RelatedPrepopulated(models.Model):\n    parent = models.ForeignKey(MainPrepopulated, models.CASCADE)\n    name = models.CharField(max_length=75)\n    pubdate = models.DateField()\n    status = models.CharField(\n        max_length=20,\n        choices=(('option one', 'Option One'),\n                 ('option two', 'Option Two')))\n    slug1 = models.SlugField(max_length=50)\n    slug2 = models.SlugField(max_length=60)\n\n\nclass UnorderedObject(models.Model):\n    \"\"\"\n    Model without any defined `Meta.ordering`.\n    Refs #16819.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    bool = models.BooleanField(default=True)\n\n\nclass UndeletableObject(models.Model):\n    \"\"\"\n    Model whose show_delete in admin change_view has been disabled\n    Refs #10057.\n    \"\"\"\n    name = models.CharField(max_length=255)\n\n\nclass UnchangeableObject(models.Model):\n    \"\"\"\n    Model whose change_view is disabled in admin\n    Refs #20640.\n    \"\"\"\n\n\nclass UserMessenger(models.Model):\n    \"\"\"\n    Dummy class for testing message_user functions on ModelAdmin\n    \"\"\"\n\n\nclass Simple(models.Model):\n    \"\"\"\n    Simple model with nothing on it for use in testing\n    \"\"\"\n\n\nclass Choice(models.Model):\n    choice = models.IntegerField(blank=True, null=True,\n        choices=((1, 'Yes'), (0, 'No'), (None, 'No opinion')))\n\n\nclass ParentWithDependentChildren(models.Model):\n    \"\"\"\n    Issue #20522\n    Model where the validation of child foreign-key relationships depends\n    on validation of the parent\n    \"\"\"\n    some_required_info = models.PositiveIntegerField()\n    family_name = models.CharField(max_length=255, blank=False)\n\n\nclass DependentChild(models.Model):\n    \"\"\"\n    Issue #20522\n    Model that depends on validation of the parent class for one of its\n    fields to validate during clean\n    \"\"\"\n    parent = models.ForeignKey(ParentWithDependentChildren, models.CASCADE)\n    family_name = models.CharField(max_length=255)\n\n\nclass _Manager(models.Manager):\n    def get_queryset(self):\n        return super(_Manager, self).get_queryset().filter(pk__gt=1)\n\n\nclass FilteredManager(models.Model):\n    def __str__(self):\n        return \"PK=%d\" % self.pk\n\n    pk_gt_1 = _Manager()\n    objects = models.Manager()\n\n\nclass EmptyModelVisible(models.Model):\n    \"\"\" See ticket #11277. \"\"\"\n\n\nclass EmptyModelHidden(models.Model):\n    \"\"\" See ticket #11277. \"\"\"\n\n\nclass EmptyModelMixin(models.Model):\n    \"\"\" See ticket #11277. \"\"\"\n\n\nclass State(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass City(models.Model):\n    state = models.ForeignKey(State, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n    def get_absolute_url(self):\n        return '/dummy/%s/' % self.pk\n\n\nclass Restaurant(models.Model):\n    city = models.ForeignKey(City, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n    def get_absolute_url(self):\n        return '/dummy/%s/' % self.pk\n\n\nclass Worker(models.Model):\n    work_at = models.ForeignKey(Restaurant, models.CASCADE)\n    name = models.CharField(max_length=50)\n    surname = models.CharField(max_length=50)\n\n\n# Models for #23329\nclass ReferencedByParent(models.Model):\n    name = models.CharField(max_length=20, unique=True)\n\n\nclass ParentWithFK(models.Model):\n    fk = models.ForeignKey(\n        ReferencedByParent,\n        models.CASCADE,\n        to_field='name',\n        related_name='hidden+',\n    )\n\n\nclass ChildOfReferer(ParentWithFK):\n    pass\n\n\n# Models for #23431\nclass ReferencedByInline(models.Model):\n    name = models.CharField(max_length=20, unique=True)\n\n\nclass InlineReference(models.Model):\n    fk = models.ForeignKey(\n        ReferencedByInline,\n        models.CASCADE,\n        to_field='name',\n        related_name='hidden+',\n    )\n\n\nclass InlineReferer(models.Model):\n    refs = models.ManyToManyField(InlineReference)\n\n\n# Models for #23604 and #23915\nclass Recipe(models.Model):\n    rname = models.CharField(max_length=20, unique=True)\n\n\nclass Ingredient(models.Model):\n    iname = models.CharField(max_length=20, unique=True)\n    recipes = models.ManyToManyField(Recipe, through='RecipeIngredient')\n\n\nclass RecipeIngredient(models.Model):\n    ingredient = models.ForeignKey(Ingredient, models.CASCADE, to_field='iname')\n    recipe = models.ForeignKey(Recipe, models.CASCADE, to_field='rname')\n\n\n# Model for #23839\nclass NotReferenced(models.Model):\n    # Don't point any FK at this model.\n    pass\n\n\n# Models for #23934\nclass ExplicitlyProvidedPK(models.Model):\n    name = models.IntegerField(primary_key=True)\n\n\nclass ImplicitlyGeneratedPK(models.Model):\n    name = models.IntegerField(unique=True)\n\n\n# Models for #25622\nclass ReferencedByGenRel(models.Model):\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n\n\nclass GenRelReference(models.Model):\n    references = GenericRelation(ReferencedByGenRel)\n\n\nclass ParentWithUUIDPK(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    title = models.CharField(max_length=100)\n\n    def __str__(self):\n        return str(self.id)\n\n\nclass RelatedWithUUIDPKModel(models.Model):\n    parent = models.ForeignKey(ParentWithUUIDPK, on_delete=models.CASCADE)\n", "# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nimport datetime\nimport os\nimport re\nimport unittest\n\nfrom django.contrib.admin import AdminSite, ModelAdmin\nfrom django.contrib.admin.helpers import ACTION_CHECKBOX_NAME\nfrom django.contrib.admin.models import ADDITION, DELETION, LogEntry\nfrom django.contrib.admin.options import TO_FIELD_VAR\nfrom django.contrib.admin.templatetags.admin_static import static\nfrom django.contrib.admin.templatetags.admin_urls import add_preserved_filters\nfrom django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\nfrom django.contrib.admin.utils import quote\nfrom django.contrib.admin.views.main import IS_POPUP_VAR\nfrom django.contrib.auth import REDIRECT_FIELD_NAME, get_permission_codename\nfrom django.contrib.auth.models import Group, Permission, User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.staticfiles.storage import staticfiles_storage\nfrom django.core import mail\nfrom django.core.checks import Error\nfrom django.core.files import temp as tempfile\nfrom django.core.urlresolvers import NoReverseMatch, resolve, reverse\nfrom django.forms.utils import ErrorList\nfrom django.template.loader import render_to_string\nfrom django.template.response import TemplateResponse\nfrom django.test import (\n    SimpleTestCase, TestCase, ignore_warnings, modify_settings,\n    override_settings, skipUnlessDBFeature,\n)\nfrom django.test.utils import override_script_prefix, patch_logger\nfrom django.utils import formats, six, translation\nfrom django.utils._os import upath\nfrom django.utils.cache import get_max_age\nfrom django.utils.deprecation import RemovedInDjango20Warning\nfrom django.utils.encoding import force_bytes, force_text, iri_to_uri\nfrom django.utils.html import escape\nfrom django.utils.http import urlencode\nfrom django.utils.six.moves.urllib.parse import parse_qsl, urljoin, urlparse\n\nfrom . import customadmin\nfrom .admin import CityAdmin, site, site2\nfrom .models import (\n    Actor, AdminOrderedAdminMethod, AdminOrderedCallable, AdminOrderedField,\n    AdminOrderedModelMethod, Answer, Article, BarAccount, Book, Bookmark,\n    Category, Chapter, ChapterXtra1, ChapterXtra2, Character, Child, Choice,\n    City, Collector, Color, Color2, ComplexSortedPerson, CoverLetter,\n    CustomArticle, CyclicOne, CyclicTwo, DooHickey, Employee, EmptyModel,\n    ExternalSubscriber, Fabric, FancyDoodad, FieldOverridePost,\n    FilteredManager, FooAccount, FoodDelivery, FunkyTag, Gallery, Grommet,\n    Inquisition, Language, Link, MainPrepopulated, ModelWithStringPrimaryKey,\n    OtherStory, Paper, Parent, ParentWithDependentChildren, ParentWithUUIDPK,\n    Person, Persona, Picture, Pizza, Plot, PlotDetails, PluggableSearchPerson,\n    Podcast, Post, PrePopulatedPost, Promo, Question, Recommendation,\n    Recommender, RelatedPrepopulated, RelatedWithUUIDPKModel, Report,\n    Restaurant, RowLevelChangePermissionModel, SecretHideout, Section,\n    ShortMessage, Simple, State, Story, Subscriber, SuperSecretHideout,\n    SuperVillain, Telegram, TitleTranslation, Topping, UnchangeableObject,\n    UndeletableObject, UnorderedObject, Villain, Vodcast, Whatsit, Widget,\n    Worker, WorkHour,\n)\n\n\nERROR_MESSAGE = \"Please enter the correct username and password \\\nfor a staff account. Note that both fields may be case-sensitive.\"\n\n\nclass AdminFieldExtractionMixin(object):\n    \"\"\"\n    Helper methods for extracting data from AdminForm.\n    \"\"\"\n    def get_admin_form_fields(self, response):\n        \"\"\"\n        Return a list of AdminFields for the AdminForm in the response.\n        \"\"\"\n        admin_form = response.context['adminform']\n        fieldsets = list(admin_form)\n\n        field_lines = []\n        for fieldset in fieldsets:\n            field_lines += list(fieldset)\n\n        fields = []\n        for field_line in field_lines:\n            fields += list(field_line)\n\n        return fields\n\n    def get_admin_readonly_fields(self, response):\n        \"\"\"\n        Return the readonly fields for the response's AdminForm.\n        \"\"\"\n        return [f for f in self.get_admin_form_fields(response) if f.is_readonly]\n\n    def get_admin_readonly_field(self, response, field_name):\n        \"\"\"\n        Return the readonly field for the given field_name.\n        \"\"\"\n        admin_readonly_fields = self.get_admin_readonly_fields(response)\n        for field in admin_readonly_fields:\n            if field.field['name'] == field_name:\n                return field\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n                   ROOT_URLCONF=\"admin_views.urls\",\n                   USE_I18N=True, USE_L10N=False, LANGUAGE_CODE='en')\nclass AdminViewBasicTestCase(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n        cls.color1 = Color.objects.create(value='Red', warm=True)\n        cls.color2 = Color.objects.create(value='Orange', warm=True)\n        cls.color3 = Color.objects.create(value='Blue', warm=False)\n        cls.color4 = Color.objects.create(value='Green', warm=False)\n        cls.fab1 = Fabric.objects.create(surface='x')\n        cls.fab2 = Fabric.objects.create(surface='y')\n        cls.fab3 = Fabric.objects.create(surface='plain')\n        cls.b1 = Book.objects.create(name='Book 1')\n        cls.b2 = Book.objects.create(name='Book 2')\n        cls.pro1 = Promo.objects.create(name='Promo 1', book=cls.b1)\n        cls.pro1 = Promo.objects.create(name='Promo 2', book=cls.b2)\n        cls.chap1 = Chapter.objects.create(title='Chapter 1', content='[ insert contents here ]', book=cls.b1)\n        cls.chap2 = Chapter.objects.create(title='Chapter 2', content='[ insert contents here ]', book=cls.b1)\n        cls.chap3 = Chapter.objects.create(title='Chapter 1', content='[ insert contents here ]', book=cls.b2)\n        cls.chap4 = Chapter.objects.create(title='Chapter 2', content='[ insert contents here ]', book=cls.b2)\n        cls.cx1 = ChapterXtra1.objects.create(chap=cls.chap1, xtra='ChapterXtra1 1')\n        cls.cx2 = ChapterXtra1.objects.create(chap=cls.chap3, xtra='ChapterXtra1 2')\n\n        # Post data for edit inline\n        cls.inline_post_data = {\n            \"name\": \"Test section\",\n            # inline data\n            \"article_set-TOTAL_FORMS\": \"6\",\n            \"article_set-INITIAL_FORMS\": \"3\",\n            \"article_set-MAX_NUM_FORMS\": \"0\",\n            \"article_set-0-id\": cls.a1.pk,\n            # there is no title in database, give one here or formset will fail.\n            \"article_set-0-title\": \"Norske bostaver \u00e6\u00f8\u00e5 skaper problemer\",\n            \"article_set-0-content\": \"&lt;p&gt;Middle content&lt;/p&gt;\",\n            \"article_set-0-date_0\": \"2008-03-18\",\n            \"article_set-0-date_1\": \"11:54:58\",\n            \"article_set-0-section\": cls.s1.pk,\n            \"article_set-1-id\": cls.a2.pk,\n            \"article_set-1-title\": \"Need a title.\",\n            \"article_set-1-content\": \"&lt;p&gt;Oldest content&lt;/p&gt;\",\n            \"article_set-1-date_0\": \"2000-03-18\",\n            \"article_set-1-date_1\": \"11:54:58\",\n            \"article_set-2-id\": cls.a3.pk,\n            \"article_set-2-title\": \"Need a title.\",\n            \"article_set-2-content\": \"&lt;p&gt;Newest content&lt;/p&gt;\",\n            \"article_set-2-date_0\": \"2009-03-18\",\n            \"article_set-2-date_1\": \"11:54:58\",\n            \"article_set-3-id\": \"\",\n            \"article_set-3-title\": \"\",\n            \"article_set-3-content\": \"\",\n            \"article_set-3-date_0\": \"\",\n            \"article_set-3-date_1\": \"\",\n            \"article_set-4-id\": \"\",\n            \"article_set-4-title\": \"\",\n            \"article_set-4-content\": \"\",\n            \"article_set-4-date_0\": \"\",\n            \"article_set-4-date_1\": \"\",\n            \"article_set-5-id\": \"\",\n            \"article_set-5-title\": \"\",\n            \"article_set-5-content\": \"\",\n            \"article_set-5-date_0\": \"\",\n            \"article_set-5-date_1\": \"\",\n        }\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def tearDown(self):\n        formats.reset_format_cache()\n\n    def assertContentBefore(self, response, text1, text2, failing_msg=None):\n        \"\"\"\n        Testing utility asserting that text1 appears before text2 in response\n        content.\n        \"\"\"\n        self.assertEqual(response.status_code, 200)\n        self.assertLess(response.content.index(force_bytes(text1)), response.content.index(force_bytes(text2)),\n            failing_msg)\n\n\nclass AdminViewBasicTest(AdminViewBasicTestCase):\n    def test_trailing_slash_required(self):\n        \"\"\"\n        If you leave off the trailing slash, app should redirect and add it.\n        \"\"\"\n        add_url = reverse('admin:admin_views_article_add')\n        response = self.client.get(add_url[:-1])\n        self.assertRedirects(response, add_url, status_code=301)\n\n    def test_admin_static_template_tag(self):\n        \"\"\"\n        Test that admin_static.static is pointing to the collectstatic version\n        (as django.contrib.collectstatic is in installed apps).\n        \"\"\"\n        old_url = staticfiles_storage.base_url\n        staticfiles_storage.base_url = '/test/'\n        try:\n            self.assertEqual(static('path'), '/test/path')\n        finally:\n            staticfiles_storage.base_url = old_url\n\n    def test_basic_add_GET(self):\n        \"\"\"\n        A smoke test to ensure GET on the add_view works.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_add'))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_add_with_GET_args(self):\n        response = self.client.get(reverse('admin:admin_views_section_add'), {'name': 'My Section'})\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'value=\"My Section\"',\n            msg_prefix=\"Couldn't find an input with the right value in the response\")\n\n    def test_basic_edit_GET(self):\n        \"\"\"\n        A smoke test to ensure GET on the change_view works.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_change', args=(self.s1.pk,)))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_basic_edit_GET_string_PK(self):\n        \"\"\"\n        Ensure GET on the change_view works (returns an HTTP 404 error, see\n        #11191) when passing a string as the PK argument for a model with an\n        integer PK field.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_change', args=('abc',)))\n        self.assertEqual(response.status_code, 404)\n\n    def test_basic_edit_GET_old_url_redirect(self):\n        \"\"\"\n        The change URL changed in Django 1.9, but the old one still redirects.\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_section_change', args=(self.s1.pk,)).replace('change/', '')\n        )\n        self.assertRedirects(response, reverse('admin:admin_views_section_change', args=(self.s1.pk,)))\n\n    def test_basic_inheritance_GET_string_PK(self):\n        \"\"\"\n        Ensure GET on the change_view works on inherited models (returns an\n        HTTP 404 error, see #19951) when passing a string as the PK argument\n        for a model with an integer PK field.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_supervillain_change', args=('abc',)))\n        self.assertEqual(response.status_code, 404)\n\n    def test_basic_add_POST(self):\n        \"\"\"\n        A smoke test to ensure POST on add_view works.\n        \"\"\"\n        post_data = {\n            \"name\": \"Another Section\",\n            # inline data\n            \"article_set-TOTAL_FORMS\": \"3\",\n            \"article_set-INITIAL_FORMS\": \"0\",\n            \"article_set-MAX_NUM_FORMS\": \"0\",\n        }\n        response = self.client.post(reverse('admin:admin_views_section_add'), post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_popup_add_POST(self):\n        \"\"\"\n        Ensure http response from a popup is properly escaped.\n        \"\"\"\n        post_data = {\n            '_popup': '1',\n            'title': 'title with a new\\nline',\n            'content': 'some content',\n            'date_0': '2010-09-10',\n            'date_1': '14:55:39',\n        }\n        response = self.client.post(reverse('admin:admin_views_article_add'), post_data)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissAddRelatedObjectPopup')\n        self.assertContains(response, 'title with a new\\\\u000Aline')\n\n    def test_basic_edit_POST(self):\n        \"\"\"\n        A smoke test to ensure POST on edit_view works.\n        \"\"\"\n        url = reverse('admin:admin_views_section_change', args=(self.s1.pk,))\n        response = self.client.post(url, self.inline_post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_edit_save_as(self):\n        \"\"\"\n        Test \"save as\".\n        \"\"\"\n        post_data = self.inline_post_data.copy()\n        post_data.update({\n            '_saveasnew': 'Save+as+new',\n            \"article_set-1-section\": \"1\",\n            \"article_set-2-section\": \"1\",\n            \"article_set-3-section\": \"1\",\n            \"article_set-4-section\": \"1\",\n            \"article_set-5-section\": \"1\",\n        })\n        response = self.client.post(reverse('admin:admin_views_section_change', args=(self.s1.pk,)), post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_edit_save_as_delete_inline(self):\n        \"\"\"\n        Should be able to \"Save as new\" while also deleting an inline.\n        \"\"\"\n        post_data = self.inline_post_data.copy()\n        post_data.update({\n            '_saveasnew': 'Save+as+new',\n            \"article_set-1-section\": \"1\",\n            \"article_set-2-section\": \"1\",\n            \"article_set-2-DELETE\": \"1\",\n            \"article_set-3-section\": \"1\",\n        })\n        response = self.client.post(reverse('admin:admin_views_section_change', args=(self.s1.pk,)), post_data)\n        self.assertEqual(response.status_code, 302)\n        # started with 3 articles, one was deleted.\n        self.assertEqual(Section.objects.latest('id').article_set.count(), 2)\n\n    def test_change_list_sorting_callable(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a callable\n        (column 2 is callable_year in ArticleAdmin)\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_article_changelist'), {'o': 2})\n        self.assertContentBefore(response, 'Oldest content', 'Middle content',\n            \"Results of sorting on callable are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Newest content',\n            \"Results of sorting on callable are out of order.\")\n\n    def test_change_list_sorting_model(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a Model method\n        (column 3 is 'model_year' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_article_changelist'), {'o': '-3'})\n        self.assertContentBefore(response, 'Newest content', 'Middle content',\n            \"Results of sorting on Model method are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Oldest content',\n            \"Results of sorting on Model method are out of order.\")\n\n    def test_change_list_sorting_model_admin(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a ModelAdmin method\n        (column 4 is 'modeladmin_year' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_article_changelist'), {'o': '4'})\n        self.assertContentBefore(response, 'Oldest content', 'Middle content',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Newest content',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n\n    def test_change_list_sorting_model_admin_reverse(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a ModelAdmin\n        method in reverse order (i.e. admin_order_field uses the '-' prefix)\n        (column 6 is 'model_year_reverse' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_article_changelist'), {'o': '6'})\n        self.assertContentBefore(response, '2009,', '2008,',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, '2008,', '2000,',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        # Let's make sure the ordering is right and that we don't get a\n        # FieldError when we change to descending order\n        response = self.client.get(reverse('admin:admin_views_article_changelist'), {'o': '-6'})\n        self.assertContentBefore(response, '2000,', '2008,',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, '2008,', '2009,',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n\n    def test_change_list_sorting_multiple(self):\n        p1 = Person.objects.create(name=\"Chris\", gender=1, alive=True)\n        p2 = Person.objects.create(name=\"Chris\", gender=2, alive=True)\n        p3 = Person.objects.create(name=\"Bob\", gender=1, alive=True)\n        link1 = reverse('admin:admin_views_person_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_person_change', args=(p2.pk,))\n        link3 = reverse('admin:admin_views_person_change', args=(p3.pk,))\n\n        # Sort by name, gender\n        response = self.client.get(reverse('admin:admin_views_person_changelist'), {'o': '1.2'})\n        self.assertContentBefore(response, link3, link1)\n        self.assertContentBefore(response, link1, link2)\n\n        # Sort by gender descending, name\n        response = self.client.get(reverse('admin:admin_views_person_changelist'), {'o': '-2.1'})\n        self.assertContentBefore(response, link2, link3)\n        self.assertContentBefore(response, link3, link1)\n\n    def test_change_list_sorting_preserve_queryset_ordering(self):\n        \"\"\"\n        If no ordering is defined in `ModelAdmin.ordering` or in the query\n        string, then the underlying order of the queryset should not be\n        changed, even if it is defined in `Modeladmin.get_queryset()`.\n        Refs #11868, #7309.\n        \"\"\"\n        p1 = Person.objects.create(name=\"Amy\", gender=1, alive=True, age=80)\n        p2 = Person.objects.create(name=\"Bob\", gender=1, alive=True, age=70)\n        p3 = Person.objects.create(name=\"Chris\", gender=2, alive=False, age=60)\n        link1 = reverse('admin:admin_views_person_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_person_change', args=(p2.pk,))\n        link3 = reverse('admin:admin_views_person_change', args=(p3.pk,))\n\n        response = self.client.get(reverse('admin:admin_views_person_changelist'), {})\n        self.assertContentBefore(response, link3, link2)\n        self.assertContentBefore(response, link2, link1)\n\n    def test_change_list_sorting_model_meta(self):\n        # Test ordering on Model Meta is respected\n\n        l1 = Language.objects.create(iso='ur', name='Urdu')\n        l2 = Language.objects.create(iso='ar', name='Arabic')\n        link1 = reverse('admin:admin_views_language_change', args=(quote(l1.pk),))\n        link2 = reverse('admin:admin_views_language_change', args=(quote(l2.pk),))\n\n        response = self.client.get(reverse('admin:admin_views_language_changelist'), {})\n        self.assertContentBefore(response, link2, link1)\n\n        # Test we can override with query string\n        response = self.client.get(reverse('admin:admin_views_language_changelist'), {'o': '-1'})\n        self.assertContentBefore(response, link1, link2)\n\n    def test_change_list_sorting_override_model_admin(self):\n        # Test ordering on Model Admin is respected, and overrides Model Meta\n        dt = datetime.datetime.now()\n        p1 = Podcast.objects.create(name=\"A\", release_date=dt)\n        p2 = Podcast.objects.create(name=\"B\", release_date=dt - datetime.timedelta(10))\n        link1 = reverse('admin:admin_views_podcast_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_podcast_change', args=(p2.pk,))\n\n        response = self.client.get(reverse('admin:admin_views_podcast_changelist'), {})\n        self.assertContentBefore(response, link1, link2)\n\n    def test_multiple_sort_same_field(self):\n        # Check that we get the columns we expect if we have two columns\n        # that correspond to the same ordering field\n        dt = datetime.datetime.now()\n        p1 = Podcast.objects.create(name=\"A\", release_date=dt)\n        p2 = Podcast.objects.create(name=\"B\", release_date=dt - datetime.timedelta(10))\n        link1 = reverse('admin:admin_views_podcast_change', args=(quote(p1.pk),))\n        link2 = reverse('admin:admin_views_podcast_change', args=(quote(p2.pk),))\n\n        response = self.client.get(reverse('admin:admin_views_podcast_changelist'), {})\n        self.assertContentBefore(response, link1, link2)\n\n        p1 = ComplexSortedPerson.objects.create(name=\"Bob\", age=10)\n        p2 = ComplexSortedPerson.objects.create(name=\"Amy\", age=20)\n        link1 = reverse('admin:admin_views_complexsortedperson_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_complexsortedperson_change', args=(p2.pk,))\n\n        response = self.client.get(reverse('admin:admin_views_complexsortedperson_changelist'), {})\n        # Should have 5 columns (including action checkbox col)\n        self.assertContains(response, '<th scope=\"col\"', count=5)\n\n        self.assertContains(response, 'Name')\n        self.assertContains(response, 'Colored name')\n\n        # Check order\n        self.assertContentBefore(response, 'Name', 'Colored name')\n\n        # Check sorting - should be by name\n        self.assertContentBefore(response, link2, link1)\n\n    def test_sort_indicators_admin_order(self):\n        \"\"\"\n        Ensures that the admin shows default sort indicators for all\n        kinds of 'ordering' fields: field names, method on the model\n        admin and model itself, and other callables. See #17252.\n        \"\"\"\n        models = [(AdminOrderedField, 'adminorderedfield'),\n                  (AdminOrderedModelMethod, 'adminorderedmodelmethod'),\n                  (AdminOrderedAdminMethod, 'adminorderedadminmethod'),\n                  (AdminOrderedCallable, 'adminorderedcallable')]\n        for model, url in models:\n            model.objects.create(stuff='The Last Item', order=3)\n            model.objects.create(stuff='The First Item', order=1)\n            model.objects.create(stuff='The Middle Item', order=2)\n            response = self.client.get(reverse('admin:admin_views_%s_changelist' % url), {})\n            self.assertEqual(response.status_code, 200)\n            # Should have 3 columns including action checkbox col.\n            self.assertContains(response, '<th scope=\"col\"', count=3, msg_prefix=url)\n            # Check if the correct column was selected. 2 is the index of the\n            # 'order' column in the model admin's 'list_display' with 0 being\n            # the implicit 'action_checkbox' and 1 being the column 'stuff'.\n            self.assertEqual(response.context['cl'].get_ordering_field_columns(), {2: 'asc'})\n            # Check order of records.\n            self.assertContentBefore(response, 'The First Item', 'The Middle Item')\n            self.assertContentBefore(response, 'The Middle Item', 'The Last Item')\n\n    def test_limited_filter(self):\n        \"\"\"Ensure admin changelist filters do not contain objects excluded via limit_choices_to.\n        This also tests relation-spanning filters (e.g. 'color__value').\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_thing_changelist'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<div id=\"changelist-filter\">',\n            msg_prefix=\"Expected filter not found in changelist view\")\n        self.assertNotContains(response, '<a href=\"?color__id__exact=3\">Blue</a>',\n            msg_prefix=\"Changelist filter not correctly limited by limit_choices_to\")\n\n    def test_relation_spanning_filters(self):\n        changelist_url = reverse('admin:admin_views_chapterxtra1_changelist')\n        response = self.client.get(changelist_url)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<div id=\"changelist-filter\">')\n        filters = {\n            'chap__id__exact': dict(\n                values=[c.id for c in Chapter.objects.all()],\n                test=lambda obj, value: obj.chap.id == value),\n            'chap__title': dict(\n                values=[c.title for c in Chapter.objects.all()],\n                test=lambda obj, value: obj.chap.title == value),\n            'chap__book__id__exact': dict(\n                values=[b.id for b in Book.objects.all()],\n                test=lambda obj, value: obj.chap.book.id == value),\n            'chap__book__name': dict(\n                values=[b.name for b in Book.objects.all()],\n                test=lambda obj, value: obj.chap.book.name == value),\n            'chap__book__promo__id__exact': dict(\n                values=[p.id for p in Promo.objects.all()],\n                test=lambda obj, value: obj.chap.book.promo_set.filter(id=value).exists()),\n            'chap__book__promo__name': dict(\n                values=[p.name for p in Promo.objects.all()],\n                test=lambda obj, value: obj.chap.book.promo_set.filter(name=value).exists()),\n        }\n        for filter_path, params in filters.items():\n            for value in params['values']:\n                query_string = urlencode({filter_path: value})\n                # ensure filter link exists\n                self.assertContains(response, '<a href=\"?%s\">' % query_string)\n                # ensure link works\n                filtered_response = self.client.get('%s?%s' % (changelist_url, query_string))\n                self.assertEqual(filtered_response.status_code, 200)\n                # ensure changelist contains only valid objects\n                for obj in filtered_response.context['cl'].queryset.all():\n                    self.assertTrue(params['test'](obj, value))\n\n    def test_incorrect_lookup_parameters(self):\n        \"\"\"Ensure incorrect lookup parameters are handled gracefully.\"\"\"\n        changelist_url = reverse('admin:admin_views_thing_changelist')\n        response = self.client.get(changelist_url, {'notarealfield': '5'})\n        self.assertRedirects(response, '%s?e=1' % changelist_url)\n\n        # Spanning relationships through a nonexistent related object (Refs #16716)\n        response = self.client.get(changelist_url, {'notarealfield__whatever': '5'})\n        self.assertRedirects(response, '%s?e=1' % changelist_url)\n\n        response = self.client.get(changelist_url, {'color__id__exact': 'StringNotInteger!'})\n        self.assertRedirects(response, '%s?e=1' % changelist_url)\n\n        # Regression test for #18530\n        response = self.client.get(changelist_url, {'pub_date__gte': 'foo'})\n        self.assertRedirects(response, '%s?e=1' % changelist_url)\n\n    def test_isnull_lookups(self):\n        \"\"\"Ensure is_null is handled correctly.\"\"\"\n        Article.objects.create(title=\"I Could Go Anywhere\", content=\"Versatile\", date=datetime.datetime.now())\n        changelist_url = reverse('admin:admin_views_article_changelist')\n        response = self.client.get(changelist_url)\n        self.assertContains(response, '4 articles')\n        response = self.client.get(changelist_url, {'section__isnull': 'false'})\n        self.assertContains(response, '3 articles')\n        response = self.client.get(changelist_url, {'section__isnull': '0'})\n        self.assertContains(response, '3 articles')\n        response = self.client.get(changelist_url, {'section__isnull': 'true'})\n        self.assertContains(response, '1 article')\n        response = self.client.get(changelist_url, {'section__isnull': '1'})\n        self.assertContains(response, '1 article')\n\n    def test_logout_and_password_change_URLs(self):\n        response = self.client.get(reverse('admin:admin_views_article_changelist'))\n        self.assertContains(response, '<a href=\"%s\">' % reverse('admin:logout'))\n        self.assertContains(response, '<a href=\"%s\">' % reverse('admin:password_change'))\n\n    def test_named_group_field_choices_change_list(self):\n        \"\"\"\n        Ensures the admin changelist shows correct values in the relevant column\n        for rows corresponding to instances of a model in which a named group\n        has been used in the choices option of a field.\n        \"\"\"\n        link1 = reverse('admin:admin_views_fabric_change', args=(self.fab1.pk,))\n        link2 = reverse('admin:admin_views_fabric_change', args=(self.fab2.pk,))\n        response = self.client.get(reverse('admin:admin_views_fabric_changelist'))\n        fail_msg = (\n            \"Changelist table isn't showing the right human-readable values \"\n            \"set by a model field 'choices' option named group.\"\n        )\n        self.assertContains(response, '<a href=\"%s\">Horizontal</a>' % link1, msg_prefix=fail_msg, html=True)\n        self.assertContains(response, '<a href=\"%s\">Vertical</a>' % link2, msg_prefix=fail_msg, html=True)\n\n    def test_named_group_field_choices_filter(self):\n        \"\"\"\n        Ensures the filter UI shows correctly when at least one named group has\n        been used in the choices option of a model field.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_fabric_changelist'))\n        fail_msg = (\n            \"Changelist filter isn't showing options contained inside a model \"\n            \"field 'choices' option named group.\"\n        )\n        self.assertContains(response, '<div id=\"changelist-filter\">')\n        self.assertContains(response,\n            '<a href=\"?surface__exact=x\">Horizontal</a>', msg_prefix=fail_msg, html=True)\n        self.assertContains(response,\n            '<a href=\"?surface__exact=y\">Vertical</a>', msg_prefix=fail_msg, html=True)\n\n    def test_change_list_null_boolean_display(self):\n        Post.objects.create(public=None)\n        response = self.client.get(reverse('admin:admin_views_post_changelist'))\n        self.assertContains(response, 'icon-unknown.svg')\n\n    def test_i18n_language_non_english_default(self):\n        \"\"\"\n        Check if the JavaScript i18n view returns an empty language catalog\n        if the default language is non-English but the selected language\n        is English. See #13388 and #3594 for more details.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='fr'), translation.override('en-us'):\n            response = self.client.get(reverse('admin:jsi18n'))\n            self.assertNotContains(response, 'Choisir une heure')\n\n    def test_i18n_language_non_english_fallback(self):\n        \"\"\"\n        Makes sure that the fallback language is still working properly\n        in cases where the selected language cannot be found.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='fr'), translation.override('none'):\n            response = self.client.get(reverse('admin:jsi18n'))\n            self.assertContains(response, 'Choisir une heure')\n\n    def test_L10N_deactivated(self):\n        \"\"\"\n        Check if L10N is deactivated, the JavaScript i18n view doesn't\n        return localized date/time formats. Refs #14824.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='ru', USE_L10N=False), translation.override('none'):\n            response = self.client.get(reverse('admin:jsi18n'))\n            self.assertNotContains(response, '%d.%m.%Y %H:%M:%S')\n            self.assertContains(response, '%Y-%m-%d %H:%M:%S')\n\n    def test_disallowed_filtering(self):\n        with patch_logger('django.security.DisallowedModelAdminLookup', 'error') as calls:\n            response = self.client.get(\n                \"%s?owner__email__startswith=fuzzy\" % reverse('admin:admin_views_album_changelist')\n            )\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # Filters are allowed if explicitly included in list_filter\n        response = self.client.get(\"%s?color__value__startswith=red\" % reverse('admin:admin_views_thing_changelist'))\n        self.assertEqual(response.status_code, 200)\n        response = self.client.get(\"%s?color__value=red\" % reverse('admin:admin_views_thing_changelist'))\n        self.assertEqual(response.status_code, 200)\n\n        # Filters should be allowed if they involve a local field without the\n        # need to whitelist them in list_filter or date_hierarchy.\n        response = self.client.get(\"%s?age__gt=30\" % reverse('admin:admin_views_person_changelist'))\n        self.assertEqual(response.status_code, 200)\n\n        e1 = Employee.objects.create(name='Anonymous', gender=1, age=22, alive=True, code='123')\n        e2 = Employee.objects.create(name='Visitor', gender=2, age=19, alive=True, code='124')\n        WorkHour.objects.create(datum=datetime.datetime.now(), employee=e1)\n        WorkHour.objects.create(datum=datetime.datetime.now(), employee=e2)\n        response = self.client.get(reverse('admin:admin_views_workhour_changelist'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'employee__person_ptr__exact')\n        response = self.client.get(\"%s?employee__person_ptr__exact=%d\" % (\n            reverse('admin:admin_views_workhour_changelist'), e1.pk)\n        )\n        self.assertEqual(response.status_code, 200)\n\n    def test_disallowed_to_field(self):\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            url = reverse('admin:admin_views_section_changelist')\n            response = self.client.get(url, {TO_FIELD_VAR: 'missing_field'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # Specifying a field that is not referred by any other model registered\n        # to this admin site should raise an exception.\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            response = self.client.get(reverse('admin:admin_views_section_changelist'), {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # #23839 - Primary key should always be allowed, even if the referenced model isn't registered.\n        response = self.client.get(reverse('admin:admin_views_notreferenced_changelist'), {TO_FIELD_VAR: 'id'})\n        self.assertEqual(response.status_code, 200)\n\n        # #23915 - Specifying a field referenced by another model though a m2m should be allowed.\n        response = self.client.get(reverse('admin:admin_views_recipe_changelist'), {TO_FIELD_VAR: 'rname'})\n        self.assertEqual(response.status_code, 200)\n\n        # #23604, #23915 - Specifying a field referenced through a reverse m2m relationship should be allowed.\n        response = self.client.get(reverse('admin:admin_views_ingredient_changelist'), {TO_FIELD_VAR: 'iname'})\n        self.assertEqual(response.status_code, 200)\n\n        # #23329 - Specifying a field that is not referred by any other model directly registered\n        # to this admin site but registered through inheritance should be allowed.\n        response = self.client.get(reverse('admin:admin_views_referencedbyparent_changelist'), {TO_FIELD_VAR: 'name'})\n        self.assertEqual(response.status_code, 200)\n\n        # #23431 - Specifying a field that is only referred to by a inline of a registered\n        # model should be allowed.\n        response = self.client.get(reverse('admin:admin_views_referencedbyinline_changelist'), {TO_FIELD_VAR: 'name'})\n        self.assertEqual(response.status_code, 200)\n\n        # #25622 - Specifying a field of a model only referred by a generic\n        # relation should raise DisallowedModelAdminToField.\n        url = reverse('admin:admin_views_referencedbygenrel_changelist')\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            response = self.client.get(url, {TO_FIELD_VAR: 'object_id'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # We also want to prevent the add, change, and delete views from\n        # leaking a disallowed field value.\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            response = self.client.post(reverse('admin:admin_views_section_add'), {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        section = Section.objects.create()\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            url = reverse('admin:admin_views_section_change', args=(section.pk,))\n            response = self.client.post(url, {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            url = reverse('admin:admin_views_section_delete', args=(section.pk,))\n            response = self.client.post(url, {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n    def test_allowed_filtering_15103(self):\n        \"\"\"\n        Regressions test for ticket 15103 - filtering on fields defined in a\n        ForeignKey 'limit_choices_to' should be allowed, otherwise raw_id_fields\n        can break.\n        \"\"\"\n        # Filters should be allowed if they are defined on a ForeignKey pointing to this model\n        url = \"%s?leader__name=Palin&leader__age=27\" % reverse('admin:admin_views_inquisition_changelist')\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n\n    def test_popup_dismiss_related(self):\n        \"\"\"\n        Regression test for ticket 20664 - ensure the pk is properly quoted.\n        \"\"\"\n        actor = Actor.objects.create(name=\"Palin\", age=27)\n        response = self.client.get(\"%s?%s\" % (reverse('admin:admin_views_actor_changelist'), IS_POPUP_VAR))\n        self.assertContains(response, \"opener.dismissRelatedLookupPopup(window, &#39;%s&#39;)\" % actor.pk)\n\n    def test_hide_change_password(self):\n        \"\"\"\n        Tests if the \"change password\" link in the admin is hidden if the User\n        does not have a usable password set.\n        (against 9bea85795705d015cdadc82c68b99196a8554f5c)\n        \"\"\"\n        user = User.objects.get(username='super')\n        user.set_unusable_password()\n        user.save()\n\n        response = self.client.get(reverse('admin:index'))\n        self.assertNotContains(response, reverse('admin:password_change'),\n            msg_prefix='The \"change password\" link should not be displayed if a user does not have a usable password.')\n\n    def test_change_view_with_show_delete_extra_context(self):\n        \"\"\"\n        Ensured that the 'show_delete' context variable in the admin's change\n        view actually controls the display of the delete button.\n        Refs #10057.\n        \"\"\"\n        instance = UndeletableObject.objects.create(name='foo')\n        response = self.client.get(reverse('admin:admin_views_undeletableobject_change', args=(instance.pk,)))\n        self.assertNotContains(response, 'deletelink')\n\n    def test_allows_attributeerror_to_bubble_up(self):\n        \"\"\"\n        Ensure that AttributeErrors are allowed to bubble when raised inside\n        a change list view.\n\n        Requires a model to be created so there's something to be displayed\n\n        Refs: #16655, #18593, and #18747\n        \"\"\"\n        Simple.objects.create()\n        with self.assertRaises(AttributeError):\n            self.client.get(reverse('admin:admin_views_simple_changelist'))\n\n    def test_changelist_with_no_change_url(self):\n        \"\"\"\n        ModelAdmin.changelist_view shouldn't result in a NoReverseMatch if url\n        for change_view is removed from get_urls\n\n        Regression test for #20934\n        \"\"\"\n        UnchangeableObject.objects.create()\n        response = self.client.get(reverse('admin:admin_views_unchangeableobject_changelist'))\n        self.assertEqual(response.status_code, 200)\n        # Check the format of the shown object -- shouldn't contain a change link\n        self.assertContains(response, '<th class=\"field-__str__\">UnchangeableObject object</th>', html=True)\n\n    def test_invalid_appindex_url(self):\n        \"\"\"\n        #21056 -- URL reversing shouldn't work for nonexistent apps.\n        \"\"\"\n        good_url = '/test_admin/admin/admin_views/'\n        confirm_good_url = reverse('admin:app_list',\n                                   kwargs={'app_label': 'admin_views'})\n        self.assertEqual(good_url, confirm_good_url)\n\n        with self.assertRaises(NoReverseMatch):\n            reverse('admin:app_list', kwargs={'app_label': 'this_should_fail'})\n        with self.assertRaises(NoReverseMatch):\n            reverse('admin:app_list', args=('admin_views2',))\n\n    def test_resolve_admin_views(self):\n        index_match = resolve('/test_admin/admin4/')\n        list_match = resolve('/test_admin/admin4/auth/user/')\n        self.assertIs(index_match.func.admin_site, customadmin.simple_site)\n        self.assertIsInstance(list_match.func.model_admin, customadmin.CustomPwdTemplateUserAdmin)\n\n    def test_proxy_model_content_type_is_used_for_log_entries(self):\n        \"\"\"\n        Log entries for proxy models should have the proxy model's content\n        type.\n\n        Regression test for #21084.\n        \"\"\"\n        color2_content_type = ContentType.objects.get_for_model(Color2, for_concrete_model=False)\n\n        # add\n        color2_add_url = reverse('admin:admin_views_color2_add')\n        self.client.post(color2_add_url, {'value': 'orange'})\n\n        color2_addition_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_addition_log.content_type)\n\n        # change\n        color_id = color2_addition_log.object_id\n        color2_change_url = reverse('admin:admin_views_color2_change', args=(color_id,))\n\n        self.client.post(color2_change_url, {'value': 'blue'})\n\n        color2_change_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_change_log.content_type)\n\n        # delete\n        color2_delete_url = reverse('admin:admin_views_color2_delete', args=(color_id,))\n        self.client.post(color2_delete_url)\n\n        color2_delete_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_delete_log.content_type)\n\n    def test_adminsite_display_site_url(self):\n        \"\"\"\n        #13749 - Admin should display link to front-end site 'View site'\n        \"\"\"\n        url = reverse('admin:index')\n        response = self.client.get(url)\n        self.assertEqual(response.context['site_url'], '/my-site-url/')\n        self.assertContains(response, '<a href=\"/my-site-url/\">View site</a>')\n\n\n@override_settings(TEMPLATES=[{\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    # Put this app's and the shared tests templates dirs in DIRS to take precedence\n    # over the admin's templates dir.\n    'DIRS': [\n        os.path.join(os.path.dirname(upath(__file__)), 'templates'),\n        os.path.join(os.path.dirname(os.path.dirname(upath(__file__))), 'templates'),\n    ],\n    'APP_DIRS': True,\n    'OPTIONS': {\n        'context_processors': [\n            'django.template.context_processors.debug',\n            'django.template.context_processors.request',\n            'django.contrib.auth.context_processors.auth',\n            'django.contrib.messages.context_processors.messages',\n        ],\n    },\n}])\nclass AdminCustomTemplateTests(AdminViewBasicTestCase):\n    def test_custom_model_admin_templates(self):\n        # Test custom change list template with custom extra context\n        response = self.client.get(reverse('admin:admin_views_customarticle_changelist'))\n        self.assertContains(response, \"var hello = 'Hello!';\")\n        self.assertTemplateUsed(response, 'custom_admin/change_list.html')\n\n        # Test custom add form template\n        response = self.client.get(reverse('admin:admin_views_customarticle_add'))\n        self.assertTemplateUsed(response, 'custom_admin/add_form.html')\n\n        # Add an article so we can test delete, change, and history views\n        post = self.client.post(reverse('admin:admin_views_customarticle_add'), {\n            'content': '<p>great article</p>',\n            'date_0': '2008-03-18',\n            'date_1': '10:54:39'\n        })\n        self.assertRedirects(post, reverse('admin:admin_views_customarticle_changelist'))\n        self.assertEqual(CustomArticle.objects.all().count(), 1)\n        article_pk = CustomArticle.objects.all()[0].pk\n\n        # Test custom delete, change, and object history templates\n        # Test custom change form template\n        response = self.client.get(reverse('admin:admin_views_customarticle_change', args=(article_pk,)))\n        self.assertTemplateUsed(response, 'custom_admin/change_form.html')\n        response = self.client.get(reverse('admin:admin_views_customarticle_delete', args=(article_pk,)))\n        self.assertTemplateUsed(response, 'custom_admin/delete_confirmation.html')\n        response = self.client.post(reverse('admin:admin_views_customarticle_changelist'), data={\n            'index': 0,\n            'action': ['delete_selected'],\n            '_selected_action': ['1'],\n        })\n        self.assertTemplateUsed(response, 'custom_admin/delete_selected_confirmation.html')\n        response = self.client.get(reverse('admin:admin_views_customarticle_history', args=(article_pk,)))\n        self.assertTemplateUsed(response, 'custom_admin/object_history.html')\n\n    def test_extended_bodyclass_template_change_form(self):\n        \"\"\"\n        Ensure that the admin/change_form.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_add'))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_change_password(self):\n        \"\"\"\n        Ensure that the auth/user/change_password.html template uses block\n        super in the bodyclass block.\n        \"\"\"\n        user = User.objects.get(username='super')\n        response = self.client.get(reverse('admin:auth_user_password_change', args=(user.id,)))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_index(self):\n        \"\"\"\n        Ensure that the admin/index.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        response = self.client.get(reverse('admin:index'))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_change_list(self):\n        \"\"\"\n        Ensure that the admin/change_list.html' template uses block.super\n        in the bodyclass block.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_article_changelist'))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_login(self):\n        \"\"\"\n        Ensure that the admin/login.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        self.client.logout()\n        response = self.client.get(reverse('admin:login'))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_delete_confirmation(self):\n        \"\"\"\n        Ensure that the admin/delete_confirmation.html template uses\n        block.super in the bodyclass block.\n        \"\"\"\n        group = Group.objects.create(name=\"foogroup\")\n        response = self.client.get(reverse('admin:auth_group_delete', args=(group.id,)))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_delete_selected_confirmation(self):\n        \"\"\"\n        Ensure that the admin/delete_selected_confirmation.html template uses\n        block.super in bodyclass block.\n        \"\"\"\n        group = Group.objects.create(name=\"foogroup\")\n        post_data = {\n            'action': 'delete_selected',\n            'selected_across': '0',\n            'index': '0',\n            '_selected_action': group.id\n        }\n        response = self.client.post(reverse('admin:auth_group_changelist'), post_data)\n        self.assertEqual(response.context['site_header'], 'Django administration')\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_filter_with_custom_template(self):\n        \"\"\"\n        Ensure that one can use a custom template to render an admin filter.\n        Refs #17515.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_color2_changelist'))\n        self.assertTemplateUsed(response, 'custom_filter_template.html')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n                   ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewFormUrlTest(TestCase):\n    current_app = \"admin3\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_change_form_URL_has_correct_value(self):\n        \"\"\"\n        Tests whether change_view has form_url in response.context\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_section_change', args=(self.s1.pk,), current_app=self.current_app)\n        )\n        self.assertIn('form_url', response.context, msg='form_url not present in response.context')\n        self.assertEqual(response.context['form_url'], 'pony')\n\n    def test_initial_data_can_be_overridden(self):\n        \"\"\"\n        Tests that the behavior for setting initial\n        form data can be overridden in the ModelAdmin class.\n\n        Usually, the initial value is set via the GET params.\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_restaurant_add', current_app=self.current_app),\n            {'name': 'test_value'}\n        )\n        # this would be the usual behaviour\n        self.assertNotContains(response, 'value=\"test_value\"')\n        # this is the overridden behaviour\n        self.assertContains(response, 'value=\"overridden_value\"')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n                   ROOT_URLCONF=\"admin_views.urls\")\nclass AdminJavaScriptTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_js_minified_only_if_debug_is_false(self):\n        \"\"\"\n        Ensure that the minified versions of the JS files are only used when\n        DEBUG is False.\n        Refs #17521.\n        \"\"\"\n        with override_settings(DEBUG=False):\n            response = self.client.get(reverse('admin:admin_views_section_add'))\n            self.assertNotContains(response, 'vendor/jquery/jquery.js')\n            self.assertContains(response, 'vendor/jquery/jquery.min.js')\n            self.assertNotContains(response, 'prepopulate.js')\n            self.assertContains(response, 'prepopulate.min.js')\n            self.assertNotContains(response, 'actions.js')\n            self.assertContains(response, 'actions.min.js')\n            self.assertNotContains(response, 'collapse.js')\n            self.assertContains(response, 'collapse.min.js')\n            self.assertNotContains(response, 'inlines.js')\n            self.assertContains(response, 'inlines.min.js')\n        with override_settings(DEBUG=True):\n            response = self.client.get(reverse('admin:admin_views_section_add'))\n            self.assertContains(response, 'vendor/jquery/jquery.js')\n            self.assertNotContains(response, 'vendor/jquery/jquery.min.js')\n            self.assertContains(response, 'prepopulate.js')\n            self.assertNotContains(response, 'prepopulate.min.js')\n            self.assertContains(response, 'actions.js')\n            self.assertNotContains(response, 'actions.min.js')\n            self.assertContains(response, 'collapse.js')\n            self.assertNotContains(response, 'collapse.min.js')\n            self.assertContains(response, 'inlines.js')\n            self.assertNotContains(response, 'inlines.min.js')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass SaveAsTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.per1 = Person.objects.create(name='John Mauchly', gender=1, alive=True)\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_save_as_duplication(self):\n        \"\"\"Ensure save as actually creates a new person\"\"\"\n        post_data = {'_saveasnew': '', 'name': 'John M', 'gender': 1, 'age': 42}\n        self.client.post(reverse('admin:admin_views_person_change', args=(self.per1.pk,)), post_data)\n        self.assertEqual(len(Person.objects.filter(name='John M')), 1)\n        self.assertEqual(len(Person.objects.filter(id=self.per1.pk)), 1)\n\n    def test_save_as_new_with_validation_errors(self):\n        \"\"\"\n        Ensure that when you click \"Save as new\" and have a validation error,\n        you only see the \"Save as new\" button and not the other save buttons,\n        and that only the \"Save as\" button is visible.\n        \"\"\"\n        response = self.client.post(reverse('admin:admin_views_person_change', args=(self.per1.pk,)), {\n            '_saveasnew': '',\n            'gender': 'invalid',\n            '_addanother': 'fail',\n        })\n        self.assertContains(response, 'Please correct the errors below.')\n        self.assertFalse(response.context['show_save_and_add_another'])\n        self.assertFalse(response.context['show_save_and_continue'])\n        self.assertTrue(response.context['show_save_as_new'])\n\n    def test_save_as_new_with_validation_errors_with_inlines(self):\n        parent = Parent.objects.create(name='Father')\n        child = Child.objects.create(parent=parent, name='Child')\n        response = self.client.post(reverse('admin:admin_views_parent_change', args=(parent.pk,)), {\n            '_saveasnew': 'Save as new',\n            'child_set-0-parent': parent.pk,\n            'child_set-0-id': child.pk,\n            'child_set-0-name': 'Child',\n            'child_set-INITIAL_FORMS': 1,\n            'child_set-MAX_NUM_FORMS': 1000,\n            'child_set-MIN_NUM_FORMS': 0,\n            'child_set-TOTAL_FORMS': 4,\n            'name': '_invalid',\n        })\n        self.assertContains(response, 'Please correct the error below.')\n        self.assertFalse(response.context['show_save_and_add_another'])\n        self.assertFalse(response.context['show_save_and_continue'])\n        self.assertTrue(response.context['show_save_as_new'])\n\n    def test_save_as_new_with_inlines_with_validation_errors(self):\n        parent = Parent.objects.create(name='Father')\n        child = Child.objects.create(parent=parent, name='Child')\n        response = self.client.post(reverse('admin:admin_views_parent_change', args=(parent.pk,)), {\n            '_saveasnew': 'Save as new',\n            'child_set-0-parent': parent.pk,\n            'child_set-0-id': child.pk,\n            'child_set-0-name': '_invalid',\n            'child_set-INITIAL_FORMS': 1,\n            'child_set-MAX_NUM_FORMS': 1000,\n            'child_set-MIN_NUM_FORMS': 0,\n            'child_set-TOTAL_FORMS': 4,\n            'name': 'Father',\n        })\n        self.assertContains(response, 'Please correct the error below.')\n        self.assertFalse(response.context['show_save_and_add_another'])\n        self.assertFalse(response.context['show_save_and_continue'])\n        self.assertTrue(response.context['show_save_as_new'])\n\n\n@override_settings(ROOT_URLCONF=\"admin_views.urls\")\nclass CustomModelAdminTest(AdminViewBasicTestCase):\n\n    def test_custom_admin_site_login_form(self):\n        self.client.logout()\n        response = self.client.get(reverse('admin2:index'), follow=True)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n        login = self.client.post(reverse('admin2:login'), {\n            REDIRECT_FIELD_NAME: reverse('admin2:index'),\n            'username': 'customform',\n            'password': 'secret',\n        }, follow=True)\n        self.assertIsInstance(login, TemplateResponse)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, 'custom form error')\n        self.assertContains(login, 'path/to/media.css')\n\n    def test_custom_admin_site_login_template(self):\n        self.client.logout()\n        response = self.client.get(reverse('admin2:index'), follow=True)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/login.html')\n        self.assertContains(response, 'Hello from a custom login template')\n\n    def test_custom_admin_site_logout_template(self):\n        response = self.client.get(reverse('admin2:logout'))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/logout.html')\n        self.assertContains(response, 'Hello from a custom logout template')\n\n    def test_custom_admin_site_index_view_and_template(self):\n        try:\n            response = self.client.get(reverse('admin2:index'))\n        except TypeError:\n            self.fail('AdminSite.index_template should accept a list of template paths')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/index.html')\n        self.assertContains(response, 'Hello from a custom index template *bar*')\n\n    def test_custom_admin_site_app_index_view_and_template(self):\n        response = self.client.get(reverse('admin2:app_list', args=('admin_views',)))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/app_index.html')\n        self.assertContains(response, 'Hello from a custom app_index template')\n\n    def test_custom_admin_site_password_change_template(self):\n        response = self.client.get(reverse('admin2:password_change'))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/password_change_form.html')\n        self.assertContains(response, 'Hello from a custom password change form template')\n\n    def test_custom_admin_site_password_change_with_extra_context(self):\n        response = self.client.get(reverse('admin2:password_change'))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/password_change_form.html')\n        self.assertContains(response, 'eggs')\n\n    def test_custom_admin_site_password_change_done_template(self):\n        response = self.client.get(reverse('admin2:password_change_done'))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/password_change_done.html')\n        self.assertContains(response, 'Hello from a custom password change done template')\n\n    def test_custom_admin_site_view(self):\n        self.client.force_login(self.superuser)\n        response = self.client.get(reverse('admin2:my_view'))\n        self.assertEqual(response.content, b\"Django is a magical pony!\")\n\n    def test_pwd_change_custom_template(self):\n        self.client.force_login(self.superuser)\n        su = User.objects.get(username='super')\n        try:\n            response = self.client.get(\n                reverse('admin4:auth_user_password_change', args=(su.pk,))\n            )\n        except TypeError:\n            self.fail('ModelAdmin.change_user_password_template should accept a list of template paths')\n        self.assertEqual(response.status_code, 200)\n\n\ndef get_perm(Model, perm):\n    \"\"\"Return the permission object, for the Model\"\"\"\n    ct = ContentType.objects.get_for_model(Model)\n    return Permission.objects.get(content_type=ct, codename=perm)\n\n\n@override_settings(\n    PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF='admin_views.urls',\n    # Test with the admin's documented list of required context processors.\n    TEMPLATES=[{\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    }],\n)\nclass AdminViewPermissionsTest(TestCase):\n    \"\"\"Tests for Admin Views Permissions.\"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.adduser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='adduser',\n            first_name='Add', last_name='User', email='auser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.changeuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='changeuser',\n            first_name='Change', last_name='User', email='cuser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.deleteuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='deleteuser',\n            first_name='Delete', last_name='User', email='duser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.joepublicuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='joepublic',\n            first_name='Joe', last_name='Public', email='joepublic@example.com',\n            is_staff=False, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.nostaffuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='nostaff',\n            first_name='No', last_name='Staff', email='nostaff@example.com',\n            is_staff=False, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1,\n            another_section=cls.s1,\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n        # Setup permissions, for our users who can add, change, and delete.\n        opts = Article._meta\n\n        # User who can add Articles\n        cls.adduser.user_permissions.add(get_perm(Article, get_permission_codename('add', opts)))\n        # User who can change Articles\n        cls.changeuser.user_permissions.add(get_perm(Article, get_permission_codename('change', opts)))\n        cls.nostaffuser.user_permissions.add(get_perm(Article, get_permission_codename('change', opts)))\n\n        # User who can delete Articles\n        cls.deleteuser.user_permissions.add(get_perm(Article, get_permission_codename('delete', opts)))\n        cls.deleteuser.user_permissions.add(get_perm(Section, get_permission_codename('delete', Section._meta)))\n\n        # login POST dicts\n        cls.index_url = reverse('admin:index')\n        cls.super_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'super',\n            'password': 'secret',\n        }\n        cls.super_email_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'super@example.com',\n            'password': 'secret',\n        }\n        cls.super_email_bad_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'super@example.com',\n            'password': 'notsecret',\n        }\n        cls.adduser_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'adduser',\n            'password': 'secret',\n        }\n        cls.changeuser_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'changeuser',\n            'password': 'secret',\n        }\n        cls.deleteuser_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'deleteuser',\n            'password': 'secret',\n        }\n        cls.nostaff_login = {\n            REDIRECT_FIELD_NAME: reverse('has_permission_admin:index'),\n            'username': 'nostaff',\n            'password': 'secret',\n        }\n        cls.joepublic_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'joepublic',\n            'password': 'secret',\n        }\n        cls.no_username_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'password': 'secret',\n        }\n\n    def test_login(self):\n        \"\"\"\n        Make sure only staff members can log in.\n\n        Successful posts to the login page will redirect to the original url.\n        Unsuccessful attempts will continue to render the login page with\n        a 200 status code.\n        \"\"\"\n        login_url = '%s?next=%s' % (reverse('admin:login'), reverse('admin:index'))\n        # Super User\n        response = self.client.get(self.index_url)\n        self.assertRedirects(response, login_url)\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n        self.client.get(reverse('admin:logout'))\n\n        # Test if user enters email address\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.super_email_login)\n        self.assertContains(login, ERROR_MESSAGE)\n        # only correct passwords get a username hint\n        login = self.client.post(login_url, self.super_email_bad_login)\n        self.assertContains(login, ERROR_MESSAGE)\n        new_user = User(username='jondoe', password='secret', email='super@example.com')\n        new_user.save()\n        # check to ensure if there are multiple email addresses a user doesn't get a 500\n        login = self.client.post(login_url, self.super_email_login)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Add User\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.adduser_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n        self.client.get(reverse('admin:logout'))\n\n        # Change User\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.changeuser_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n        self.client.get(reverse('admin:logout'))\n\n        # Delete User\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.deleteuser_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n        self.client.get(reverse('admin:logout'))\n\n        # Regular User should not be able to login.\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.joepublic_login)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Requests without username should not return 500 errors.\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.no_username_login)\n        self.assertEqual(login.status_code, 200)\n        form = login.context[0].get('form')\n        self.assertEqual(form.errors['username'][0], 'This field is required.')\n\n    def test_login_redirect_for_direct_get(self):\n        \"\"\"\n        Login redirect should be to the admin index page when going directly to\n        /admin/login/.\n        \"\"\"\n        response = self.client.get(reverse('admin:login'))\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.context[REDIRECT_FIELD_NAME], reverse('admin:index'))\n\n    def test_login_has_permission(self):\n        # Regular User should not be able to login.\n        response = self.client.get(reverse('has_permission_admin:index'))\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(reverse('has_permission_admin:login'), self.joepublic_login)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, 'permission denied')\n\n        # User with permissions should be able to login.\n        response = self.client.get(reverse('has_permission_admin:index'))\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(reverse('has_permission_admin:login'), self.nostaff_login)\n        self.assertRedirects(login, reverse('has_permission_admin:index'))\n        self.assertFalse(login.context)\n        self.client.get(reverse('has_permission_admin:logout'))\n\n        # Staff should be able to login.\n        response = self.client.get(reverse('has_permission_admin:index'))\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(reverse('has_permission_admin:login'), {\n            REDIRECT_FIELD_NAME: reverse('has_permission_admin:index'),\n            'username': 'deleteuser',\n            'password': 'secret',\n        })\n        self.assertRedirects(login, reverse('has_permission_admin:index'))\n        self.assertFalse(login.context)\n        self.client.get(reverse('has_permission_admin:logout'))\n\n    def test_login_successfully_redirects_to_original_URL(self):\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        query_string = 'the-answer=42'\n        redirect_url = '%s?%s' % (self.index_url, query_string)\n        new_next = {REDIRECT_FIELD_NAME: redirect_url}\n        post_data = self.super_login.copy()\n        post_data.pop(REDIRECT_FIELD_NAME)\n        login = self.client.post(\n            '%s?%s' % (reverse('admin:login'), urlencode(new_next)),\n            post_data)\n        self.assertRedirects(login, redirect_url)\n\n    def test_double_login_is_not_allowed(self):\n        \"\"\"Regression test for #19327\"\"\"\n        login_url = '%s?next=%s' % (reverse('admin:login'), reverse('admin:index'))\n\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n\n        # Establish a valid admin session\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n\n        # Logging in with non-admin user fails\n        login = self.client.post(login_url, self.joepublic_login)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Establish a valid admin session\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n\n        # Logging in with admin user while already logged in\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n        self.client.get(reverse('admin:logout'))\n\n    def test_login_page_notice_for_non_staff_users(self):\n        \"\"\"\n        A logged-in non-staff user trying to access the admin index should be\n        presented with the login page and a hint indicating that the current\n        user doesn't have access to it.\n        \"\"\"\n        hint_template = 'You are authenticated as {}'\n\n        # Anonymous user should not be shown the hint\n        response = self.client.get(self.index_url, follow=True)\n        self.assertContains(response, 'login-form')\n        self.assertNotContains(response, hint_template.format(''), status_code=200)\n\n        # Non-staff user should be shown the hint\n        self.client.login(**self.nostaff_login)\n        response = self.client.get(self.index_url, follow=True)\n        self.assertContains(response, 'login-form')\n        self.assertContains(response, hint_template.format(self.nostaffuser.username), status_code=200)\n\n    def test_add_view(self):\n        \"\"\"Test add view restricts access and actually adds items.\"\"\"\n        add_dict = {'title': 'D\u00f8m ikke',\n                    'content': '<p>great article</p>',\n                    'date_0': '2008-03-18', 'date_1': '10:54:39',\n                    'section': self.s1.pk}\n\n        # Change User should not have access to add articles\n        self.client.force_login(self.changeuser)\n        # make sure the view removes test cookie\n        self.assertEqual(self.client.session.test_cookie_worked(), False)\n        response = self.client.get(reverse('admin:admin_views_article_add'))\n        self.assertEqual(response.status_code, 403)\n        # Try POST just to make sure\n        post = self.client.post(reverse('admin:admin_views_article_add'), add_dict)\n        self.assertEqual(post.status_code, 403)\n        self.assertEqual(Article.objects.count(), 3)\n        self.client.get(reverse('admin:logout'))\n\n        # Add user may login and POST to add view, then redirect to admin root\n        self.client.force_login(self.adduser)\n        addpage = self.client.get(reverse('admin:admin_views_article_add'))\n        change_list_link = '&rsaquo; <a href=\"%s\">Articles</a>' % reverse('admin:admin_views_article_changelist')\n        self.assertNotContains(addpage, change_list_link,\n            msg_prefix='User restricted to add permission is given link to change list view in breadcrumbs.')\n        post = self.client.post(reverse('admin:admin_views_article_add'), add_dict)\n        self.assertRedirects(post, self.index_url)\n        self.assertEqual(Article.objects.count(), 4)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a created object')\n        self.client.get(reverse('admin:logout'))\n\n        # Check that the addition was logged correctly\n        addition_log = LogEntry.objects.all()[0]\n        new_article = Article.objects.last()\n        article_ct = ContentType.objects.get_for_model(Article)\n        self.assertEqual(addition_log.user_id, self.adduser.pk)\n        self.assertEqual(addition_log.content_type_id, article_ct.pk)\n        self.assertEqual(addition_log.object_id, str(new_article.pk))\n        self.assertEqual(addition_log.object_repr, \"D\u00f8m ikke\")\n        self.assertEqual(addition_log.action_flag, ADDITION)\n        self.assertEqual(addition_log.change_message, \"Added.\")\n\n        # Super can add too, but is redirected to the change list view\n        self.client.force_login(self.superuser)\n        addpage = self.client.get(reverse('admin:admin_views_article_add'))\n        self.assertContains(addpage, change_list_link,\n            msg_prefix='Unrestricted user is not given link to change list view in breadcrumbs.')\n        post = self.client.post(reverse('admin:admin_views_article_add'), add_dict)\n        self.assertRedirects(post, reverse('admin:admin_views_article_changelist'))\n        self.assertEqual(Article.objects.count(), 5)\n        self.client.get(reverse('admin:logout'))\n\n        # 8509 - if a normal user is already logged in, it is possible\n        # to change user into the superuser without error\n        self.client.force_login(self.joepublicuser)\n        # Check and make sure that if user expires, data still persists\n        self.client.force_login(self.superuser)\n        # make sure the view removes test cookie\n        self.assertEqual(self.client.session.test_cookie_worked(), False)\n\n    def test_change_view(self):\n        \"\"\"Change view should restrict access and allow users to edit items.\"\"\"\n        change_dict = {'title': 'Ikke ford\u00f8mt',\n                       'content': '<p>edited article</p>',\n                       'date_0': '2008-03-18', 'date_1': '10:54:39',\n                       'section': self.s1.pk}\n        article_change_url = reverse('admin:admin_views_article_change', args=(self.a1.pk,))\n        article_changelist_url = reverse('admin:admin_views_article_changelist')\n\n        # add user should not be able to view the list of article or change any of them\n        self.client.force_login(self.adduser)\n        response = self.client.get(article_changelist_url)\n        self.assertEqual(response.status_code, 403)\n        response = self.client.get(article_change_url)\n        self.assertEqual(response.status_code, 403)\n        post = self.client.post(article_change_url, change_dict)\n        self.assertEqual(post.status_code, 403)\n        self.client.get(reverse('admin:logout'))\n\n        # change user can view all items and edit them\n        self.client.force_login(self.changeuser)\n        response = self.client.get(article_changelist_url)\n        self.assertEqual(response.status_code, 200)\n        response = self.client.get(article_change_url)\n        self.assertEqual(response.status_code, 200)\n        post = self.client.post(article_change_url, change_dict)\n        self.assertRedirects(post, article_changelist_url)\n        self.assertEqual(Article.objects.get(pk=self.a1.pk).content, '<p>edited article</p>')\n\n        # one error in form should produce singular error message, multiple errors plural\n        change_dict['title'] = ''\n        post = self.client.post(article_change_url, change_dict)\n        self.assertContains(post, 'Please correct the error below.',\n            msg_prefix='Singular error message not found in response to post with one error')\n\n        change_dict['content'] = ''\n        post = self.client.post(article_change_url, change_dict)\n        self.assertContains(post, 'Please correct the errors below.',\n            msg_prefix='Plural error message not found in response to post with multiple errors')\n        self.client.get(reverse('admin:logout'))\n\n        # Test redirection when using row-level change permissions. Refs #11513.\n        r1 = RowLevelChangePermissionModel.objects.create(id=1, name=\"odd id\")\n        r2 = RowLevelChangePermissionModel.objects.create(id=2, name=\"even id\")\n        change_url_1 = reverse('admin:admin_views_rowlevelchangepermissionmodel_change', args=(r1.pk,))\n        change_url_2 = reverse('admin:admin_views_rowlevelchangepermissionmodel_change', args=(r2.pk,))\n        for login_user in [self.superuser, self.adduser, self.changeuser, self.deleteuser]:\n            self.client.force_login(login_user)\n            response = self.client.get(change_url_1)\n            self.assertEqual(response.status_code, 403)\n            response = self.client.post(change_url_1, {'name': 'changed'})\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=1).name, 'odd id')\n            self.assertEqual(response.status_code, 403)\n            response = self.client.get(change_url_2)\n            self.assertEqual(response.status_code, 200)\n            response = self.client.post(change_url_2, {'name': 'changed'})\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=2).name, 'changed')\n            self.assertRedirects(response, self.index_url)\n            self.client.get(reverse('admin:logout'))\n\n        for login_user in [self.joepublicuser, self.nostaffuser]:\n            self.client.force_login(login_user)\n            response = self.client.get(change_url_1, follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.post(change_url_1, {'name': 'changed'}, follow=True)\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=1).name, 'odd id')\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.get(change_url_2, follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.post(change_url_2, {'name': 'changed again'}, follow=True)\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=2).name, 'changed')\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            self.client.get(reverse('admin:logout'))\n\n    def test_change_view_save_as_new(self):\n        \"\"\"\n        'Save as new' should raise PermissionDenied for users without the 'add'\n        permission.\n        \"\"\"\n        change_dict_save_as_new = {\n            '_saveasnew': 'Save as new',\n            'title': 'Ikke ford\u00f8mt',\n            'content': '<p>edited article</p>',\n            'date_0': '2008-03-18', 'date_1': '10:54:39',\n            'section': self.s1.pk,\n        }\n        article_change_url = reverse('admin:admin_views_article_change', args=(self.a1.pk,))\n\n        # Add user can perform \"Save as new\".\n        article_count = Article.objects.count()\n        self.client.force_login(self.adduser)\n        post = self.client.post(article_change_url, change_dict_save_as_new)\n        self.assertRedirects(post, self.index_url)\n        self.assertEqual(Article.objects.count(), article_count + 1)\n        self.client.logout()\n\n        # Change user cannot perform \"Save as new\" (no 'add' permission).\n        article_count = Article.objects.count()\n        self.client.force_login(self.changeuser)\n        post = self.client.post(article_change_url, change_dict_save_as_new)\n        self.assertEqual(post.status_code, 403)\n        self.assertEqual(Article.objects.count(), article_count)\n\n    def test_delete_view(self):\n        \"\"\"Delete view should restrict access and actually delete items.\"\"\"\n        delete_dict = {'post': 'yes'}\n        delete_url = reverse('admin:admin_views_article_delete', args=(self.a1.pk,))\n\n        # add user should not be able to delete articles\n        self.client.force_login(self.adduser)\n        response = self.client.get(delete_url)\n        self.assertEqual(response.status_code, 403)\n        post = self.client.post(delete_url, delete_dict)\n        self.assertEqual(post.status_code, 403)\n        self.assertEqual(Article.objects.count(), 3)\n        self.client.logout()\n\n        # Delete user can delete\n        self.client.force_login(self.deleteuser)\n        response = self.client.get(reverse('admin:admin_views_section_delete', args=(self.s1.pk,)))\n        self.assertContains(response, \"<h2>Summary</h2>\")\n        self.assertContains(response, \"<li>Articles: 3</li>\")\n        # test response contains link to related Article\n        self.assertContains(response, \"admin_views/article/%s/\" % self.a1.pk)\n\n        response = self.client.get(delete_url)\n        self.assertContains(response, \"admin_views/article/%s/\" % self.a1.pk)\n        self.assertContains(response, \"<h2>Summary</h2>\")\n        self.assertContains(response, \"<li>Articles: 1</li>\")\n        self.assertEqual(response.status_code, 200)\n        post = self.client.post(delete_url, delete_dict)\n        self.assertRedirects(post, self.index_url)\n        self.assertEqual(Article.objects.count(), 2)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a deleted object')\n        article_ct = ContentType.objects.get_for_model(Article)\n        logged = LogEntry.objects.get(content_type=article_ct, action_flag=DELETION)\n        self.assertEqual(logged.object_id, str(self.a1.pk))\n\n    def test_history_view(self):\n        \"\"\"History view should restrict access.\"\"\"\n        # add user should not be able to view the list of article or change any of them\n        self.client.force_login(self.adduser)\n        response = self.client.get(reverse('admin:admin_views_article_history', args=(self.a1.pk,)))\n        self.assertEqual(response.status_code, 403)\n        self.client.get(reverse('admin:logout'))\n\n        # change user can view all items and edit them\n        self.client.force_login(self.changeuser)\n        response = self.client.get(reverse('admin:admin_views_article_history', args=(self.a1.pk,)))\n        self.assertEqual(response.status_code, 200)\n\n        # Test redirection when using row-level change permissions. Refs #11513.\n        rl1 = RowLevelChangePermissionModel.objects.create(name=\"odd id\")\n        rl2 = RowLevelChangePermissionModel.objects.create(name=\"even id\")\n        for login_user in [self.superuser, self.adduser, self.changeuser, self.deleteuser]:\n            self.client.force_login(login_user)\n            url = reverse('admin:admin_views_rowlevelchangepermissionmodel_history', args=(rl1.pk,))\n            response = self.client.get(url)\n            self.assertEqual(response.status_code, 403)\n\n            url = reverse('admin:admin_views_rowlevelchangepermissionmodel_history', args=(rl2.pk,))\n            response = self.client.get(url)\n            self.assertEqual(response.status_code, 200)\n\n            self.client.get(reverse('admin:logout'))\n\n        for login_user in [self.joepublicuser, self.nostaffuser]:\n            self.client.force_login(login_user)\n            url = reverse('admin:admin_views_rowlevelchangepermissionmodel_history', args=(rl1.pk,))\n            response = self.client.get(url, follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            url = reverse('admin:admin_views_rowlevelchangepermissionmodel_history', args=(rl2.pk,))\n            response = self.client.get(url, follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n\n            self.client.get(reverse('admin:logout'))\n\n    def test_history_view_bad_url(self):\n        self.client.force_login(self.changeuser)\n        response = self.client.get(reverse('admin:admin_views_article_history', args=('foo',)))\n        self.assertEqual(response.status_code, 404)\n\n    def test_conditionally_show_add_section_link(self):\n        \"\"\"\n        The foreign key widget should only show the \"add related\" button if the\n        user has permission to add that related item.\n        \"\"\"\n        self.client.force_login(self.adduser)\n        # The user can't add sections yet, so they shouldn't see the \"add section\" link.\n        url = reverse('admin:admin_views_article_add')\n        add_link_text = 'add_id_section'\n        response = self.client.get(url)\n        self.assertNotContains(response, add_link_text)\n        # Allow the user to add sections too. Now they can see the \"add section\" link.\n        user = User.objects.get(username='adduser')\n        perm = get_perm(Section, get_permission_codename('add', Section._meta))\n        user.user_permissions.add(perm)\n        response = self.client.get(url)\n        self.assertContains(response, add_link_text)\n\n    def test_conditionally_show_change_section_link(self):\n        \"\"\"\n        The foreign key widget should only show the \"change related\" button if\n        the user has permission to change that related item.\n        \"\"\"\n        def get_change_related(response):\n            return response.context['adminform'].form.fields['section'].widget.can_change_related\n\n        self.client.force_login(self.adduser)\n        # The user can't change sections yet, so they shouldn't see the \"change section\" link.\n        url = reverse('admin:admin_views_article_add')\n        change_link_text = 'change_id_section'\n        response = self.client.get(url)\n        self.assertFalse(get_change_related(response))\n        self.assertNotContains(response, change_link_text)\n        # Allow the user to change sections too. Now they can see the \"change section\" link.\n        user = User.objects.get(username='adduser')\n        perm = get_perm(Section, get_permission_codename('change', Section._meta))\n        user.user_permissions.add(perm)\n        response = self.client.get(url)\n        self.assertTrue(get_change_related(response))\n        self.assertContains(response, change_link_text)\n\n    def test_conditionally_show_delete_section_link(self):\n        \"\"\"\n        The foreign key widget should only show the \"delete related\" button if\n        the user has permission to delete that related item.\n        \"\"\"\n        def get_delete_related(response):\n            return response.context['adminform'].form.fields['sub_section'].widget.can_delete_related\n\n        self.client.force_login(self.adduser)\n        # The user can't delete sections yet, so they shouldn't see the \"delete section\" link.\n        url = reverse('admin:admin_views_article_add')\n        delete_link_text = 'delete_id_sub_section'\n        response = self.client.get(url)\n        self.assertFalse(get_delete_related(response))\n        self.assertNotContains(response, delete_link_text)\n        # Allow the user to delete sections too. Now they can see the \"delete section\" link.\n        user = User.objects.get(username='adduser')\n        perm = get_perm(Section, get_permission_codename('delete', Section._meta))\n        user.user_permissions.add(perm)\n        response = self.client.get(url)\n        self.assertTrue(get_delete_related(response))\n        self.assertContains(response, delete_link_text)\n\n    def test_disabled_permissions_when_logged_in(self):\n        self.client.force_login(self.superuser)\n        superuser = User.objects.get(username='super')\n        superuser.is_active = False\n        superuser.save()\n\n        response = self.client.get(self.index_url, follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n        self.assertNotContains(response, 'Log out')\n\n        response = self.client.get(reverse('secure_view'), follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n\n    def test_disabled_staff_permissions_when_logged_in(self):\n        self.client.force_login(self.superuser)\n        superuser = User.objects.get(username='super')\n        superuser.is_staff = False\n        superuser.save()\n\n        response = self.client.get(self.index_url, follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n        self.assertNotContains(response, 'Log out')\n\n        response = self.client.get(reverse('secure_view'), follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n\n    def test_app_index_fail_early(self):\n        \"\"\"\n        If a user has no module perms, avoid iterating over all the modeladmins\n        in the registry.\n        \"\"\"\n        opts = Article._meta\n        change_user = User.objects.get(username='changeuser')\n        permission = get_perm(Article, get_permission_codename('change', opts))\n\n        self.client.force_login(self.changeuser)\n\n        # the user has no module permissions, because this module doesn't exist\n        change_user.user_permissions.remove(permission)\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertEqual(response.status_code, 403)\n\n        # the user now has module permissions\n        change_user.user_permissions.add(permission)\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertEqual(response.status_code, 200)\n\n    def test_shortcut_view_only_available_to_staff(self):\n        \"\"\"\n        Only admin users should be able to use the admin shortcut view.\n        \"\"\"\n        model_ctype = ContentType.objects.get_for_model(ModelWithStringPrimaryKey)\n        obj = ModelWithStringPrimaryKey.objects.create(string_pk='foo')\n        shortcut_url = reverse('admin:view_on_site', args=(model_ctype.pk, obj.pk))\n\n        # Not logged in: we should see the login page.\n        response = self.client.get(shortcut_url, follow=True)\n        self.assertTemplateUsed(response, 'admin/login.html')\n\n        # Logged in? Redirect.\n        self.client.force_login(self.superuser)\n        response = self.client.get(shortcut_url, follow=False)\n        # Can't use self.assertRedirects() because User.get_absolute_url() is silly.\n        self.assertEqual(response.status_code, 302)\n        # Domain may depend on contrib.sites tests also run\n        six.assertRegex(self, response.url, 'http://(testserver|example.com)/dummy/foo/')\n\n    def test_has_module_permission(self):\n        \"\"\"\n        Ensure that has_module_permission() returns True for all users who\n        have any permission for that module (add, change, or delete), so that\n        the module is displayed on the admin index page.\n        \"\"\"\n        self.client.force_login(self.superuser)\n        response = self.client.get(self.index_url)\n        self.assertContains(response, 'admin_views')\n        self.assertContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.adduser)\n        response = self.client.get(self.index_url)\n        self.assertContains(response, 'admin_views')\n        self.assertContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.changeuser)\n        response = self.client.get(self.index_url)\n        self.assertContains(response, 'admin_views')\n        self.assertContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.deleteuser)\n        response = self.client.get(self.index_url)\n        self.assertContains(response, 'admin_views')\n        self.assertContains(response, 'Articles')\n\n    def test_overriding_has_module_permission(self):\n        \"\"\"\n        Ensure that overriding has_module_permission() has the desired effect.\n        In this case, it always returns False, so the module should not be\n        displayed on the admin index page for any users.\n        \"\"\"\n        index_url = reverse('admin7:index')\n\n        self.client.force_login(self.superuser)\n        response = self.client.get(index_url)\n        self.assertNotContains(response, 'admin_views')\n        self.assertNotContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.adduser)\n        response = self.client.get(index_url)\n        self.assertNotContains(response, 'admin_views')\n        self.assertNotContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.changeuser)\n        response = self.client.get(index_url)\n        self.assertNotContains(response, 'admin_views')\n        self.assertNotContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.deleteuser)\n        response = self.client.get(index_url)\n        self.assertNotContains(response, 'admin_views')\n        self.assertNotContains(response, 'Articles')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewsNoUrlTest(TestCase):\n    \"\"\"Regression test for #17333\"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.changeuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='changeuser',\n            first_name='Change', last_name='User', email='cuser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n        opts = Report._meta\n        # User who can change Reports\n        cls.changeuser.user_permissions.add(get_perm(Report, get_permission_codename('change', opts)))\n\n    def test_no_standard_modeladmin_urls(self):\n        \"\"\"Admin index views don't break when user's ModelAdmin removes standard urls\"\"\"\n        self.client.force_login(self.changeuser)\n        r = self.client.get(reverse('admin:index'))\n        # we shouldn't get a 500 error caused by a NoReverseMatch\n        self.assertEqual(r.status_code, 200)\n        self.client.get(reverse('admin:logout'))\n\n\n@skipUnlessDBFeature('can_defer_constraint_checks')\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewDeletedObjectsTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.deleteuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='deleteuser',\n            first_name='Delete', last_name='User', email='duser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n        cls.v1 = Villain.objects.create(name='Adam')\n        cls.v2 = Villain.objects.create(name='Sue')\n        cls.sv1 = SuperVillain.objects.create(name='Bob')\n        cls.pl1 = Plot.objects.create(name='World Domination', team_leader=cls.v1, contact=cls.v2)\n        cls.pl2 = Plot.objects.create(name='World Peace', team_leader=cls.v2, contact=cls.v2)\n        cls.pl3 = Plot.objects.create(name='Corn Conspiracy', team_leader=cls.v1, contact=cls.v1)\n        cls.pd1 = PlotDetails.objects.create(details='almost finished', plot=cls.pl1)\n        cls.sh1 = SecretHideout.objects.create(location='underground bunker', villain=cls.v1)\n        cls.sh2 = SecretHideout.objects.create(location='floating castle', villain=cls.sv1)\n        cls.ssh1 = SuperSecretHideout.objects.create(location='super floating castle!', supervillain=cls.sv1)\n        cls.cy1 = CyclicOne.objects.create(name='I am recursive', two_id=1)\n        cls.cy2 = CyclicTwo.objects.create(name='I am recursive too', one_id=1)\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_nesting(self):\n        \"\"\"\n        Objects should be nested to display the relationships that\n        cause them to be scheduled for deletion.\n        \"\"\"\n        pattern = re.compile(\n            force_bytes(\n                r'<li>Plot: <a href=\"%s\">World Domination</a>\\s*<ul>\\s*'\n                r'<li>Plot details: <a href=\"%s\">almost finished</a>' % (\n                    reverse('admin:admin_views_plot_change', args=(self.pl1.pk,)),\n                    reverse('admin:admin_views_plotdetails_change', args=(self.pd1.pk,)),\n                )\n            )\n        )\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v1.pk,)))\n        six.assertRegex(self, response.content, pattern)\n\n    def test_cyclic(self):\n        \"\"\"\n        Cyclic relationships should still cause each object to only be\n        listed once.\n        \"\"\"\n        one = '<li>Cyclic one: <a href=\"%s\">I am recursive</a>' % (\n            reverse('admin:admin_views_cyclicone_change', args=(self.cy1.pk,)),\n        )\n        two = '<li>Cyclic two: <a href=\"%s\">I am recursive too</a>' % (\n            reverse('admin:admin_views_cyclictwo_change', args=(self.cy2.pk,)),\n        )\n        response = self.client.get(reverse('admin:admin_views_cyclicone_delete', args=(self.cy1.pk,)))\n\n        self.assertContains(response, one, 1)\n        self.assertContains(response, two, 1)\n\n    def test_perms_needed(self):\n        self.client.logout()\n        delete_user = User.objects.get(username='deleteuser')\n        delete_user.user_permissions.add(get_perm(Plot,\n            get_permission_codename('delete', Plot._meta)))\n\n        self.assertTrue(self.client.login(username='deleteuser',\n                                          password='secret'))\n\n        response = self.client.get(reverse('admin:admin_views_plot_delete', args=(self.pl1.pk,)))\n        self.assertContains(response, \"your account doesn't have permission to delete the following types of objects\")\n        self.assertContains(response, \"<li>plot details</li>\")\n\n    def test_protected(self):\n        q = Question.objects.create(question=\"Why?\")\n        a1 = Answer.objects.create(question=q, answer=\"Because.\")\n        a2 = Answer.objects.create(question=q, answer=\"Yes.\")\n\n        response = self.client.get(reverse('admin:admin_views_question_delete', args=(q.pk,)))\n        self.assertContains(response, \"would require deleting the following protected related objects\")\n        self.assertContains(\n            response,\n            '<li>Answer: <a href=\"%s\">Because.</a></li>' % reverse('admin:admin_views_answer_change', args=(a1.pk,))\n        )\n        self.assertContains(\n            response,\n            '<li>Answer: <a href=\"%s\">Yes.</a></li>' % reverse('admin:admin_views_answer_change', args=(a2.pk,))\n        )\n\n    def test_not_registered(self):\n        should_contain = \"\"\"<li>Secret hideout: underground bunker\"\"\"\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v1.pk,)))\n        self.assertContains(response, should_contain, 1)\n\n    def test_multiple_fkeys_to_same_model(self):\n        \"\"\"\n        If a deleted object has two relationships from another model,\n        both of those should be followed in looking for related\n        objects to delete.\n        \"\"\"\n        should_contain = '<li>Plot: <a href=\"%s\">World Domination</a>' % reverse(\n            'admin:admin_views_plot_change', args=(self.pl1.pk,)\n        )\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v1.pk,)))\n        self.assertContains(response, should_contain)\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v2.pk,)))\n        self.assertContains(response, should_contain)\n\n    def test_multiple_fkeys_to_same_instance(self):\n        \"\"\"\n        If a deleted object has two relationships pointing to it from\n        another object, the other object should still only be listed\n        once.\n        \"\"\"\n        should_contain = '<li>Plot: <a href=\"%s\">World Peace</a></li>' % reverse(\n            'admin:admin_views_plot_change', args=(self.pl2.pk,)\n        )\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v2.pk,)))\n        self.assertContains(response, should_contain, 1)\n\n    def test_inheritance(self):\n        \"\"\"\n        In the case of an inherited model, if either the child or\n        parent-model instance is deleted, both instances are listed\n        for deletion, as well as any relationships they have.\n        \"\"\"\n        should_contain = [\n            '<li>Villain: <a href=\"%s\">Bob</a>' % reverse('admin:admin_views_villain_change', args=(self.sv1.pk,)),\n            '<li>Super villain: <a href=\"%s\">Bob</a>' % reverse(\n                'admin:admin_views_supervillain_change', args=(self.sv1.pk,)\n            ),\n            '<li>Secret hideout: floating castle',\n            '<li>Super secret hideout: super floating castle!',\n        ]\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.sv1.pk,)))\n        for should in should_contain:\n            self.assertContains(response, should, 1)\n        response = self.client.get(reverse('admin:admin_views_supervillain_delete', args=(self.sv1.pk,)))\n        for should in should_contain:\n            self.assertContains(response, should, 1)\n\n    def test_generic_relations(self):\n        \"\"\"\n        If a deleted object has GenericForeignKeys pointing to it,\n        those objects should be listed for deletion.\n        \"\"\"\n        plot = self.pl3\n        tag = FunkyTag.objects.create(content_object=plot, name='hott')\n        should_contain = '<li>Funky tag: <a href=\"%s\">hott' % reverse(\n            'admin:admin_views_funkytag_change', args=(tag.id,))\n        response = self.client.get(reverse('admin:admin_views_plot_delete', args=(plot.pk,)))\n        self.assertContains(response, should_contain)\n\n    def test_generic_relations_with_related_query_name(self):\n        \"\"\"\n        If a deleted object has GenericForeignKey with\n        GenericRelation(related_query_name='...') pointing to it, those objects\n        should be listed for deletion.\n        \"\"\"\n        bookmark = Bookmark.objects.create(name='djangoproject')\n        tag = FunkyTag.objects.create(content_object=bookmark, name='django')\n        tag_url = reverse('admin:admin_views_funkytag_change', args=(tag.id,))\n        should_contain = '<li>Funky tag: <a href=\"%s\">django' % tag_url\n        response = self.client.get(reverse('admin:admin_views_bookmark_delete', args=(bookmark.pk,)))\n        self.assertContains(response, should_contain)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass TestGenericRelations(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.v1 = Villain.objects.create(name='Adam')\n        cls.pl3 = Plot.objects.create(name='Corn Conspiracy', team_leader=cls.v1, contact=cls.v1)\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_generic_content_object_in_list_display(self):\n        FunkyTag.objects.create(content_object=self.pl3, name='hott')\n        response = self.client.get(reverse('admin:admin_views_funkytag_changelist'))\n        self.assertContains(response, \"%s</td>\" % self.pl3)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewStringPrimaryKeyTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n        cls.pk = (\n            \"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 \"\n            \"\"\"-_.!~*'() ;/?:@&=+$, <>#%\" {}|\\^[]`\"\"\"\n        )\n        cls.m1 = ModelWithStringPrimaryKey.objects.create(string_pk=cls.pk)\n        content_type_pk = ContentType.objects.get_for_model(ModelWithStringPrimaryKey).pk\n        user_pk = cls.superuser.pk\n        LogEntry.objects.log_action(user_pk, content_type_pk, cls.pk, cls.pk, 2, change_message='Changed something')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_get_history_view(self):\n        \"\"\"\n        Retrieving the history for an object using urlencoded form of primary\n        key should work.\n        Refs #12349, #18550.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_modelwithstringprimarykey_history', args=(self.pk,)))\n        self.assertContains(response, escape(self.pk))\n        self.assertContains(response, 'Changed something')\n        self.assertEqual(response.status_code, 200)\n\n    def test_get_change_view(self):\n        \"Retrieving the object using urlencoded form of primary key should work\"\n        response = self.client.get(reverse('admin:admin_views_modelwithstringprimarykey_change', args=(self.pk,)))\n        self.assertContains(response, escape(self.pk))\n        self.assertEqual(response.status_code, 200)\n\n    def test_changelist_to_changeform_link(self):\n        \"Link to the changeform of the object in changelist should use reverse() and be quoted -- #18072\"\n        response = self.client.get(reverse('admin:admin_views_modelwithstringprimarykey_changelist'))\n        # this URL now comes through reverse(), thus url quoting and iri_to_uri encoding\n        pk_final_url = escape(iri_to_uri(quote(self.pk)))\n        change_url = reverse(\n            'admin:admin_views_modelwithstringprimarykey_change', args=('__fk__',)\n        ).replace('__fk__', pk_final_url)\n        should_contain = '<th class=\"field-__str__\"><a href=\"%s\">%s</a></th>' % (change_url, escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_recentactions_link(self):\n        \"The link from the recent actions list referring to the changeform of the object should be quoted\"\n        response = self.client.get(reverse('admin:index'))\n        link = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(self.pk),))\n        should_contain = \"\"\"<a href=\"%s\">%s</a>\"\"\" % (escape(link), escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_recentactions_without_content_type(self):\n        \"If a LogEntry is missing content_type it will not display it in span tag under the hyperlink.\"\n        response = self.client.get(reverse('admin:index'))\n        link = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(self.pk),))\n        should_contain = \"\"\"<a href=\"%s\">%s</a>\"\"\" % (escape(link), escape(self.pk))\n        self.assertContains(response, should_contain)\n        should_contain = \"Model with string primary key\"  # capitalized in Recent Actions\n        self.assertContains(response, should_contain)\n        logentry = LogEntry.objects.get(content_type__model__iexact='modelwithstringprimarykey')\n        # http://code.djangoproject.com/ticket/10275\n        # if the log entry doesn't have a content type it should still be\n        # possible to view the Recent Actions part\n        logentry.content_type = None\n        logentry.save()\n\n        counted_presence_before = response.content.count(force_bytes(should_contain))\n        response = self.client.get(reverse('admin:index'))\n        counted_presence_after = response.content.count(force_bytes(should_contain))\n        self.assertEqual(counted_presence_before - 1,\n            counted_presence_after)\n\n    def test_logentry_get_admin_url(self):\n        \"\"\"\n        LogEntry.get_admin_url returns a URL to edit the entry's object or\n        None for non-existent (possibly deleted) models.\n        \"\"\"\n        log_entry_model = \"modelwithstringprimarykey\"  # capitalized in Recent Actions\n        logentry = LogEntry.objects.get(content_type__model__iexact=log_entry_model)\n        desired_admin_url = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(self.pk),))\n\n        self.assertEqual(logentry.get_admin_url(), desired_admin_url)\n        self.assertIn(iri_to_uri(quote(self.pk)), logentry.get_admin_url())\n\n        logentry.content_type.model = \"non-existent\"\n        self.assertEqual(logentry.get_admin_url(), None)\n\n    def test_logentry_get_edited_object(self):\n        \"LogEntry.get_edited_object returns the edited object of a given LogEntry object\"\n        logentry = LogEntry.objects.get(content_type__model__iexact=\"modelwithstringprimarykey\")\n        edited_obj = logentry.get_edited_object()\n        self.assertEqual(logentry.object_id, str(edited_obj.pk))\n\n    def test_logentry_save(self):\n        \"\"\"\n        LogEntry.action_time is a timestamp of the date when the entry was\n        created. It shouldn't be updated on a subsequent save().\n        \"\"\"\n        logentry = LogEntry.objects.get(content_type__model__iexact=\"modelwithstringprimarykey\")\n        action_time = logentry.action_time\n        logentry.save()\n        self.assertEqual(logentry.action_time, action_time)\n\n    def test_deleteconfirmation_link(self):\n        \"The link from the delete confirmation page referring back to the changeform of the object should be quoted\"\n        url = reverse('admin:admin_views_modelwithstringprimarykey_delete', args=(quote(self.pk),))\n        response = self.client.get(url)\n        # this URL now comes through reverse(), thus url quoting and iri_to_uri encoding\n        change_url = reverse(\n            'admin:admin_views_modelwithstringprimarykey_change', args=('__fk__',)\n        ).replace('__fk__', escape(iri_to_uri(quote(self.pk))))\n        should_contain = '<a href=\"%s\">%s</a>' % (change_url, escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_url_conflicts_with_add(self):\n        \"A model with a primary key that ends with add or is `add` should be visible\"\n        add_model = ModelWithStringPrimaryKey.objects.create(pk=\"i have something to add\")\n        add_model.save()\n        response = self.client.get(\n            reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(add_model.pk),))\n        )\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n        add_model2 = ModelWithStringPrimaryKey.objects.create(pk=\"add\")\n        add_url = reverse('admin:admin_views_modelwithstringprimarykey_add')\n        change_url = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(add_model2.pk),))\n        self.assertNotEqual(add_url, change_url)\n\n    def test_url_conflicts_with_delete(self):\n        \"A model with a primary key that ends with delete should be visible\"\n        delete_model = ModelWithStringPrimaryKey(pk=\"delete\")\n        delete_model.save()\n        response = self.client.get(\n            reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(delete_model.pk),))\n        )\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n    def test_url_conflicts_with_history(self):\n        \"A model with a primary key that ends with history should be visible\"\n        history_model = ModelWithStringPrimaryKey(pk=\"history\")\n        history_model.save()\n        response = self.client.get(\n            reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(history_model.pk),))\n        )\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n    def test_shortcut_view_with_escaping(self):\n        \"'View on site should' work properly with char fields\"\n        model = ModelWithStringPrimaryKey(pk='abc_123')\n        model.save()\n        response = self.client.get(\n            reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(model.pk),))\n        )\n        should_contain = '/%s/\" class=\"viewsitelink\">' % model.pk\n        self.assertContains(response, should_contain)\n\n    def test_change_view_history_link(self):\n        \"\"\"Object history button link should work and contain the pk value quoted.\"\"\"\n        url = reverse('admin:%s_modelwithstringprimarykey_change' %\n            ModelWithStringPrimaryKey._meta.app_label,\n            args=(quote(self.pk),))\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        expected_link = reverse('admin:%s_modelwithstringprimarykey_history' %\n            ModelWithStringPrimaryKey._meta.app_label,\n            args=(quote(self.pk),))\n        self.assertContains(response, '<a href=\"%s\" class=\"historylink\"' % escape(expected_link))\n\n    def test_redirect_on_add_view_continue_button(self):\n        \"\"\"As soon as an object is added using \"Save and continue editing\"\n        button, the user should be redirected to the object's change_view.\n\n        In case primary key is a string containing some special characters\n        like slash or underscore, these characters must be escaped (see #22266)\n        \"\"\"\n        response = self.client.post(\n            reverse('admin:admin_views_modelwithstringprimarykey_add'),\n            {\n                'string_pk': '123/history',\n                \"_continue\": \"1\",  # Save and continue editing\n            }\n        )\n\n        self.assertEqual(response.status_code, 302)  # temporary redirect\n        self.assertIn('/123_2Fhistory/', response['location'])  # PK is quoted\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass SecureViewTests(TestCase):\n    \"\"\"\n    Test behavior of a view protected by the staff_member_required decorator.\n    \"\"\"\n\n    def test_secure_view_shows_login_if_not_logged_in(self):\n        \"\"\"\n        Ensure that we see the admin login form.\n        \"\"\"\n        secure_url = reverse('secure_view')\n        response = self.client.get(secure_url)\n        self.assertRedirects(response, '%s?next=%s' % (reverse('admin:login'), secure_url))\n        response = self.client.get(secure_url, follow=True)\n        self.assertTemplateUsed(response, 'admin/login.html')\n        self.assertEqual(response.context[REDIRECT_FIELD_NAME], secure_url)\n\n    def test_staff_member_required_decorator_works_with_argument(self):\n        \"\"\"\n        Ensure that staff_member_required decorator works with an argument\n        (redirect_field_name).\n        \"\"\"\n        secure_url = '/test_admin/admin/secure-view2/'\n        response = self.client.get(secure_url)\n        self.assertRedirects(response, '%s?myfield=%s' % (reverse('admin:login'), secure_url))\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewUnicodeTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.b1 = Book.objects.create(name='L\u00e6rdommer')\n        cls.p1 = Promo.objects.create(name='<Promo for L\u00e6rdommer>', book=cls.b1)\n        cls.chap1 = Chapter.objects.create(\n            title='Norske bostaver \u00e6\u00f8\u00e5 skaper problemer', content='<p>Sv\u00e6rt frustrerende med UnicodeDecodeErro</p>',\n            book=cls.b1\n        )\n        cls.chap2 = Chapter.objects.create(\n            title='Kj\u00e6rlighet', content='<p>La kj\u00e6rligheten til de lidende seire.</p>', book=cls.b1)\n        cls.chap3 = Chapter.objects.create(title='Kj\u00e6rlighet', content='<p>Noe innhold</p>', book=cls.b1)\n        cls.chap4 = ChapterXtra1.objects.create(chap=cls.chap1, xtra='<Xtra(1) Norske bostaver \u00e6\u00f8\u00e5 skaper problemer>')\n        cls.chap5 = ChapterXtra1.objects.create(chap=cls.chap2, xtra='<Xtra(1) Kj\u00e6rlighet>')\n        cls.chap6 = ChapterXtra1.objects.create(chap=cls.chap3, xtra='<Xtra(1) Kj\u00e6rlighet>')\n        cls.chap7 = ChapterXtra2.objects.create(chap=cls.chap1, xtra='<Xtra(2) Norske bostaver \u00e6\u00f8\u00e5 skaper problemer>')\n        cls.chap8 = ChapterXtra2.objects.create(chap=cls.chap2, xtra='<Xtra(2) Kj\u00e6rlighet>')\n        cls.chap9 = ChapterXtra2.objects.create(chap=cls.chap3, xtra='<Xtra(2) Kj\u00e6rlighet>')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_unicode_edit(self):\n        \"\"\"\n        A test to ensure that POST on edit_view handles non-ASCII characters.\n        \"\"\"\n        post_data = {\n            \"name\": \"Test l\u00e6rdommer\",\n            # inline data\n            \"chapter_set-TOTAL_FORMS\": \"6\",\n            \"chapter_set-INITIAL_FORMS\": \"3\",\n            \"chapter_set-MAX_NUM_FORMS\": \"0\",\n            \"chapter_set-0-id\": self.chap1.pk,\n            \"chapter_set-0-title\": \"Norske bostaver \u00e6\u00f8\u00e5 skaper problemer\",\n            \"chapter_set-0-content\": \"&lt;p&gt;Sv\u00e6rt frustrerende med UnicodeDecodeError&lt;/p&gt;\",\n            \"chapter_set-1-id\": self.chap2.id,\n            \"chapter_set-1-title\": \"Kj\u00e6rlighet.\",\n            \"chapter_set-1-content\": \"&lt;p&gt;La kj\u00e6rligheten til de lidende seire.&lt;/p&gt;\",\n            \"chapter_set-2-id\": self.chap3.id,\n            \"chapter_set-2-title\": \"Need a title.\",\n            \"chapter_set-2-content\": \"&lt;p&gt;Newest content&lt;/p&gt;\",\n            \"chapter_set-3-id\": \"\",\n            \"chapter_set-3-title\": \"\",\n            \"chapter_set-3-content\": \"\",\n            \"chapter_set-4-id\": \"\",\n            \"chapter_set-4-title\": \"\",\n            \"chapter_set-4-content\": \"\",\n            \"chapter_set-5-id\": \"\",\n            \"chapter_set-5-title\": \"\",\n            \"chapter_set-5-content\": \"\",\n        }\n\n        response = self.client.post(reverse('admin:admin_views_book_change', args=(self.b1.pk,)), post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_unicode_delete(self):\n        \"\"\"\n        Ensure that the delete_view handles non-ASCII characters\n        \"\"\"\n        delete_dict = {'post': 'yes'}\n        delete_url = reverse('admin:admin_views_book_delete', args=(self.b1.pk,))\n        response = self.client.get(delete_url)\n        self.assertEqual(response.status_code, 200)\n        response = self.client.post(delete_url, delete_dict)\n        self.assertRedirects(response, reverse('admin:admin_views_book_changelist'))\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewListEditable(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n        cls.per1 = Person.objects.create(name='John Mauchly', gender=1, alive=True)\n        cls.per2 = Person.objects.create(name='Grace Hopper', gender=1, alive=False)\n        cls.per3 = Person.objects.create(name='Guido van Rossum', gender=1, alive=True)\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_inheritance(self):\n        Podcast.objects.create(name=\"This Week in Django\",\n            release_date=datetime.date.today())\n        response = self.client.get(reverse('admin:admin_views_podcast_changelist'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_inheritance_2(self):\n        Vodcast.objects.create(name=\"This Week in Django\", released=True)\n        response = self.client.get(reverse('admin:admin_views_vodcast_changelist'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_custom_pk(self):\n        Language.objects.create(iso='en', name='English', english_name='English')\n        response = self.client.get(reverse('admin:admin_views_language_changelist'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_changelist_input_html(self):\n        response = self.client.get(reverse('admin:admin_views_person_changelist'))\n        # 2 inputs per object(the field and the hidden id field) = 6\n        # 4 management hidden fields = 4\n        # 4 action inputs (3 regular checkboxes, 1 checkbox to select all)\n        # main form submit button = 1\n        # search field and search submit button = 2\n        # CSRF field = 1\n        # field to track 'select all' across paginated views = 1\n        # 6 + 4 + 4 + 1 + 2 + 1 + 1 = 19 inputs\n        self.assertContains(response, \"<input\", count=19)\n        # 1 select per object = 3 selects\n        self.assertContains(response, \"<select\", count=4)\n\n    def test_post_messages(self):\n        # Ticket 12707: Saving inline editable should not show admin\n        # action warnings\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"%s\" % self.per1.pk,\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"%s\" % self.per2.pk,\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"%s\" % self.per3.pk,\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_person_changelist'),\n                                    data, follow=True)\n        self.assertEqual(len(response.context['messages']), 1)\n\n    def test_post_submission(self):\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"%s\" % self.per1.pk,\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"%s\" % self.per2.pk,\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"%s\" % self.per3.pk,\n\n            \"_save\": \"Save\",\n        }\n        self.client.post(reverse('admin:admin_views_person_changelist'), data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 2)\n\n        # test a filtered page\n        data = {\n            \"form-TOTAL_FORMS\": \"2\",\n            \"form-INITIAL_FORMS\": \"2\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"%s\" % self.per1.pk,\n            \"form-0-gender\": \"1\",\n            \"form-0-alive\": \"checked\",\n\n            \"form-1-id\": \"%s\" % self.per3.pk,\n            \"form-1-gender\": \"1\",\n            \"form-1-alive\": \"checked\",\n\n            \"_save\": \"Save\",\n        }\n        self.client.post(reverse('admin:admin_views_person_changelist') + '?gender__exact=1', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, True)\n\n        # test a searched page\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"%s\" % self.per1.pk,\n            \"form-0-gender\": \"1\",\n\n            \"_save\": \"Save\",\n        }\n        self.client.post(reverse('admin:admin_views_person_changelist') + '?q=john', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n\n    def test_non_field_errors(self):\n        ''' Ensure that non field errors are displayed for each of the\n            forms in the changelist's formset. Refs #13126.\n        '''\n        fd1 = FoodDelivery.objects.create(reference='123', driver='bill', restaurant='thai')\n        fd2 = FoodDelivery.objects.create(reference='456', driver='bill', restaurant='india')\n        fd3 = FoodDelivery.objects.create(reference='789', driver='bill', restaurant='pizza')\n\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": str(fd1.id),\n            \"form-0-reference\": \"123\",\n            \"form-0-driver\": \"bill\",\n            \"form-0-restaurant\": \"thai\",\n\n            # Same data as above: Forbidden because of unique_together!\n            \"form-1-id\": str(fd2.id),\n            \"form-1-reference\": \"456\",\n            \"form-1-driver\": \"bill\",\n            \"form-1-restaurant\": \"thai\",\n\n            \"form-2-id\": str(fd3.id),\n            \"form-2-reference\": \"789\",\n            \"form-2-driver\": \"bill\",\n            \"form-2-restaurant\": \"pizza\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_fooddelivery_changelist'), data)\n        self.assertContains(\n            response,\n            '<tr><td colspan=\"4\"><ul class=\"errorlist nonfield\"><li>Food delivery '\n            'with this Driver and Restaurant already exists.</li></ul></td></tr>',\n            1,\n            html=True\n        )\n\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": str(fd1.id),\n            \"form-0-reference\": \"123\",\n            \"form-0-driver\": \"bill\",\n            \"form-0-restaurant\": \"thai\",\n\n            # Same data as above: Forbidden because of unique_together!\n            \"form-1-id\": str(fd2.id),\n            \"form-1-reference\": \"456\",\n            \"form-1-driver\": \"bill\",\n            \"form-1-restaurant\": \"thai\",\n\n            # Same data also.\n            \"form-2-id\": str(fd3.id),\n            \"form-2-reference\": \"789\",\n            \"form-2-driver\": \"bill\",\n            \"form-2-restaurant\": \"thai\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_fooddelivery_changelist'), data)\n        self.assertContains(\n            response,\n            '<tr><td colspan=\"4\"><ul class=\"errorlist nonfield\"><li>Food delivery '\n            'with this Driver and Restaurant already exists.</li></ul></td></tr>',\n            2,\n            html=True\n        )\n\n    def test_non_form_errors(self):\n        # test if non-form errors are handled; ticket #12716\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"%s\" % self.per2.pk,\n            \"form-0-alive\": \"1\",\n            \"form-0-gender\": \"2\",\n\n            # Ensure that the form processing understands this as a list_editable \"Save\"\n            # and not an action \"Go\".\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n        self.assertContains(response, \"Grace is not a Zombie\")\n\n    def test_non_form_errors_is_errorlist(self):\n        # test if non-form errors are correctly handled; ticket #12878\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"%s\" % self.per2.pk,\n            \"form-0-alive\": \"1\",\n            \"form-0-gender\": \"2\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n        non_form_errors = response.context['cl'].formset.non_form_errors()\n        self.assertIsInstance(non_form_errors, ErrorList)\n        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n\n    def test_list_editable_ordering(self):\n        collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n\n        Category.objects.create(id=1, order=1, collector=collector)\n        Category.objects.create(id=2, order=2, collector=collector)\n        Category.objects.create(id=3, order=0, collector=collector)\n        Category.objects.create(id=4, order=0, collector=collector)\n\n        # NB: The order values must be changed so that the items are reordered.\n        data = {\n            \"form-TOTAL_FORMS\": \"4\",\n            \"form-INITIAL_FORMS\": \"4\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-order\": \"14\",\n            \"form-0-id\": \"1\",\n            \"form-0-collector\": \"1\",\n\n            \"form-1-order\": \"13\",\n            \"form-1-id\": \"2\",\n            \"form-1-collector\": \"1\",\n\n            \"form-2-order\": \"1\",\n            \"form-2-id\": \"3\",\n            \"form-2-collector\": \"1\",\n\n            \"form-3-order\": \"0\",\n            \"form-3-id\": \"4\",\n            \"form-3-collector\": \"1\",\n\n            # Ensure that the form processing understands this as a list_editable \"Save\"\n            # and not an action \"Go\".\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_category_changelist'), data)\n        # Successful post will redirect\n        self.assertEqual(response.status_code, 302)\n\n        # Check that the order values have been applied to the right objects\n        self.assertEqual(Category.objects.get(id=1).order, 14)\n        self.assertEqual(Category.objects.get(id=2).order, 13)\n        self.assertEqual(Category.objects.get(id=3).order, 1)\n        self.assertEqual(Category.objects.get(id=4).order, 0)\n\n    def test_list_editable_pagination(self):\n        \"\"\"\n        Ensure that pagination works for list_editable items.\n        Refs #16819.\n        \"\"\"\n        UnorderedObject.objects.create(id=1, name='Unordered object #1')\n        UnorderedObject.objects.create(id=2, name='Unordered object #2')\n        UnorderedObject.objects.create(id=3, name='Unordered object #3')\n        response = self.client.get(reverse('admin:admin_views_unorderedobject_changelist'))\n        self.assertContains(response, 'Unordered object #3')\n        self.assertContains(response, 'Unordered object #2')\n        self.assertNotContains(response, 'Unordered object #1')\n        response = self.client.get(reverse('admin:admin_views_unorderedobject_changelist') + '?p=1')\n        self.assertNotContains(response, 'Unordered object #3')\n        self.assertNotContains(response, 'Unordered object #2')\n        self.assertContains(response, 'Unordered object #1')\n\n    def test_list_editable_action_submit(self):\n        # List editable changes should not be executed if the action \"Go\" button is\n        # used to submit the form.\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"1\",\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"2\",\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"3\",\n\n            \"index\": \"0\",\n            \"_selected_action\": ['3'],\n            \"action\": ['', 'delete_selected'],\n        }\n        self.client.post(reverse('admin:admin_views_person_changelist'), data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, True)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 1)\n\n    def test_list_editable_action_choices(self):\n        # List editable changes should be executed if the \"Save\" button is\n        # used to submit the form - any action choices should be ignored.\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"%s\" % self.per1.pk,\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"%s\" % self.per2.pk,\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"%s\" % self.per3.pk,\n\n            \"_save\": \"Save\",\n            \"_selected_action\": ['1'],\n            \"action\": ['', 'delete_selected'],\n        }\n        self.client.post(reverse('admin:admin_views_person_changelist'), data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 2)\n\n    def test_list_editable_popup(self):\n        \"\"\"\n        Fields should not be list-editable in popups.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_person_changelist'))\n        self.assertNotEqual(response.context['cl'].list_editable, ())\n        response = self.client.get(reverse('admin:admin_views_person_changelist') + '?%s' % IS_POPUP_VAR)\n        self.assertEqual(response.context['cl'].list_editable, ())\n\n    def test_pk_hidden_fields(self):\n        \"\"\" Ensure that hidden pk fields aren't displayed in the table body and\n            that their corresponding human-readable value is displayed instead.\n            Note that the hidden pk fields are in fact be displayed but\n            separately (not in the table), and only once.\n            Refs #12475.\n        \"\"\"\n        story1 = Story.objects.create(title='The adventures of Guido', content='Once upon a time in Djangoland...')\n        story2 = Story.objects.create(\n            title='Crouching Tiger, Hidden Python',\n            content='The Python was sneaking into...',\n        )\n        response = self.client.get(reverse('admin:admin_views_story_changelist'))\n        # Only one hidden field, in a separate place than the table.\n        self.assertContains(response, 'id=\"id_form-0-id\"', 1)\n        self.assertContains(response, 'id=\"id_form-1-id\"', 1)\n        self.assertContains(\n            response,\n            '<div class=\"hiddenfields\">\\n'\n            '<input type=\"hidden\" name=\"form-0-id\" value=\"%d\" id=\"id_form-0-id\" />'\n            '<input type=\"hidden\" name=\"form-1-id\" value=\"%d\" id=\"id_form-1-id\" />\\n</div>'\n            % (story2.id, story1.id),\n            html=True\n        )\n        self.assertContains(response, '<td class=\"field-id\">%d</td>' % story1.id, 1)\n        self.assertContains(response, '<td class=\"field-id\">%d</td>' % story2.id, 1)\n\n    def test_pk_hidden_fields_with_list_display_links(self):\n        \"\"\" Similarly as test_pk_hidden_fields, but when the hidden pk fields are\n            referenced in list_display_links.\n            Refs #12475.\n        \"\"\"\n        story1 = OtherStory.objects.create(\n            title='The adventures of Guido',\n            content='Once upon a time in Djangoland...',\n        )\n        story2 = OtherStory.objects.create(\n            title='Crouching Tiger, Hidden Python',\n            content='The Python was sneaking into...',\n        )\n        link1 = reverse('admin:admin_views_otherstory_change', args=(story1.pk,))\n        link2 = reverse('admin:admin_views_otherstory_change', args=(story2.pk,))\n        response = self.client.get(reverse('admin:admin_views_otherstory_changelist'))\n        # Only one hidden field, in a separate place than the table.\n        self.assertContains(response, 'id=\"id_form-0-id\"', 1)\n        self.assertContains(response, 'id=\"id_form-1-id\"', 1)\n        self.assertContains(\n            response,\n            '<div class=\"hiddenfields\">\\n'\n            '<input type=\"hidden\" name=\"form-0-id\" value=\"%d\" id=\"id_form-0-id\" />'\n            '<input type=\"hidden\" name=\"form-1-id\" value=\"%d\" id=\"id_form-1-id\" />\\n</div>'\n            % (story2.id, story1.id),\n            html=True\n        )\n        self.assertContains(response, '<th class=\"field-id\"><a href=\"%s\">%d</a></th>' % (link1, story1.id), 1)\n        self.assertContains(response, '<th class=\"field-id\"><a href=\"%s\">%d</a></th>' % (link2, story2.id), 1)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminSearchTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.joepublicuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='joepublic',\n            first_name='Joe', last_name='Public', email='joepublic@example.com',\n            is_staff=False, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n        cls.per1 = Person.objects.create(name='John Mauchly', gender=1, alive=True)\n        cls.per2 = Person.objects.create(name='Grace Hopper', gender=1, alive=False)\n        cls.per3 = Person.objects.create(name='Guido van Rossum', gender=1, alive=True)\n\n        cls.t1 = Recommender.objects.create()\n        cls.t2 = Recommendation.objects.create(recommender=cls.t1)\n        cls.t3 = Recommender.objects.create()\n        cls.t4 = Recommendation.objects.create(recommender=cls.t3)\n\n        cls.tt1 = TitleTranslation.objects.create(title=cls.t1, text='Bar')\n        cls.tt2 = TitleTranslation.objects.create(title=cls.t2, text='Foo')\n        cls.tt3 = TitleTranslation.objects.create(title=cls.t3, text='Few')\n        cls.tt4 = TitleTranslation.objects.create(title=cls.t4, text='Bas')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_search_on_sibling_models(self):\n        \"Check that a search that mentions sibling models\"\n        response = self.client.get(reverse('admin:admin_views_recommendation_changelist') + '?q=bar')\n        # confirm the search returned 1 object\n        self.assertContains(response, \"\\n1 recommendation\\n\")\n\n    def test_with_fk_to_field(self):\n        \"\"\"\n        Ensure that the to_field GET parameter is preserved when a search\n        is performed. Refs #10918.\n        \"\"\"\n        response = self.client.get(reverse('admin:auth_user_changelist') + '?q=joe&%s=id' % TO_FIELD_VAR)\n        self.assertContains(response, \"\\n1 user\\n\")\n        self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)\n\n    def test_exact_matches(self):\n        response = self.client.get(reverse('admin:admin_views_recommendation_changelist') + '?q=bar')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 recommendation\\n\")\n\n        response = self.client.get(reverse('admin:admin_views_recommendation_changelist') + '?q=ba')\n        # confirm the search returned zero objects\n        self.assertContains(response, \"\\n0 recommendations\\n\")\n\n    def test_beginning_matches(self):\n        response = self.client.get(reverse('admin:admin_views_person_changelist') + '?q=Gui')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 person\\n\")\n        self.assertContains(response, \"Guido\")\n\n        response = self.client.get(reverse('admin:admin_views_person_changelist') + '?q=uido')\n        # confirm the search returned zero objects\n        self.assertContains(response, \"\\n0 persons\\n\")\n        self.assertNotContains(response, \"Guido\")\n\n    def test_pluggable_search(self):\n        PluggableSearchPerson.objects.create(name=\"Bob\", age=10)\n        PluggableSearchPerson.objects.create(name=\"Amy\", age=20)\n\n        response = self.client.get(reverse('admin:admin_views_pluggablesearchperson_changelist') + '?q=Bob')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 pluggable search person\\n\")\n        self.assertContains(response, \"Bob\")\n\n        response = self.client.get(reverse('admin:admin_views_pluggablesearchperson_changelist') + '?q=20')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 pluggable search person\\n\")\n        self.assertContains(response, \"Amy\")\n\n    def test_reset_link(self):\n        \"\"\"\n        Test presence of reset link in search bar (\"1 result (_x total_)\").\n        \"\"\"\n        #   1 query for session + 1 for fetching user\n        # + 1 for filtered result + 1 for filtered count\n        # + 1 for total count\n        with self.assertNumQueries(5):\n            response = self.client.get(reverse('admin:admin_views_person_changelist') + '?q=Gui')\n        self.assertContains(response,\n            \"\"\"<span class=\"small quiet\">1 result (<a href=\"?\">3 total</a>)</span>\"\"\",\n            html=True)\n\n    def test_no_total_count(self):\n        \"\"\"\n        #8408 -- \"Show all\" should be displayed instead of the total count if\n        ModelAdmin.show_full_result_count is False.\n        \"\"\"\n        #   1 query for session + 1 for fetching user\n        # + 1 for filtered result + 1 for filtered count\n        with self.assertNumQueries(4):\n            response = self.client.get(reverse('admin:admin_views_recommendation_changelist') + '?q=bar')\n        self.assertContains(response,\n            \"\"\"<span class=\"small quiet\">1 result (<a href=\"?\">Show all</a>)</span>\"\"\",\n            html=True)\n        self.assertTrue(response.context['cl'].show_admin_actions)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminInheritedInlinesTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_inline(self):\n        \"Ensure that inline models which inherit from a common parent are correctly handled by admin.\"\n        foo_user = \"foo username\"\n        bar_user = \"bar username\"\n\n        name_re = re.compile(b'name=\"(.*?)\"')\n\n        # test the add case\n        response = self.client.get(reverse('admin:admin_views_persona_add'))\n        names = name_re.findall(response.content)\n        # make sure we have no duplicate HTML names\n        self.assertEqual(len(names), len(set(names)))\n\n        # test the add case\n        post_data = {\n            \"name\": \"Test Name\",\n            # inline data\n            \"accounts-TOTAL_FORMS\": \"1\",\n            \"accounts-INITIAL_FORMS\": \"0\",\n            \"accounts-MAX_NUM_FORMS\": \"0\",\n            \"accounts-0-username\": foo_user,\n            \"accounts-2-TOTAL_FORMS\": \"1\",\n            \"accounts-2-INITIAL_FORMS\": \"0\",\n            \"accounts-2-MAX_NUM_FORMS\": \"0\",\n            \"accounts-2-0-username\": bar_user,\n        }\n\n        response = self.client.post(reverse('admin:admin_views_persona_add'), post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n        self.assertEqual(Persona.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.count(), 1)\n        self.assertEqual(BarAccount.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.all()[0].username, foo_user)\n        self.assertEqual(BarAccount.objects.all()[0].username, bar_user)\n        self.assertEqual(Persona.objects.all()[0].accounts.count(), 2)\n\n        persona_id = Persona.objects.all()[0].id\n        foo_id = FooAccount.objects.all()[0].id\n        bar_id = BarAccount.objects.all()[0].id\n\n        # test the edit case\n\n        response = self.client.get(reverse('admin:admin_views_persona_change', args=(persona_id,)))\n        names = name_re.findall(response.content)\n        # make sure we have no duplicate HTML names\n        self.assertEqual(len(names), len(set(names)))\n\n        post_data = {\n            \"name\": \"Test Name\",\n\n            \"accounts-TOTAL_FORMS\": \"2\",\n            \"accounts-INITIAL_FORMS\": \"1\",\n            \"accounts-MAX_NUM_FORMS\": \"0\",\n\n            \"accounts-0-username\": \"%s-1\" % foo_user,\n            \"accounts-0-account_ptr\": str(foo_id),\n            \"accounts-0-persona\": str(persona_id),\n\n            \"accounts-2-TOTAL_FORMS\": \"2\",\n            \"accounts-2-INITIAL_FORMS\": \"1\",\n            \"accounts-2-MAX_NUM_FORMS\": \"0\",\n\n            \"accounts-2-0-username\": \"%s-1\" % bar_user,\n            \"accounts-2-0-account_ptr\": str(bar_id),\n            \"accounts-2-0-persona\": str(persona_id),\n        }\n        response = self.client.post(reverse('admin:admin_views_persona_change', args=(persona_id,)), post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Persona.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.count(), 1)\n        self.assertEqual(BarAccount.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.all()[0].username, \"%s-1\" % foo_user)\n        self.assertEqual(BarAccount.objects.all()[0].username, \"%s-1\" % bar_user)\n        self.assertEqual(Persona.objects.all()[0].accounts.count(), 2)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminActionsTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = ExternalSubscriber.objects.create(name='John Doe', email='john@example.org')\n        cls.s2 = Subscriber.objects.create(name='Max Mustermann', email='max@example.org')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_model_admin_custom_action(self):\n        \"Tests a custom action defined in a ModelAdmin method\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'mail_admin',\n            'index': 0,\n        }\n        self.client.post(reverse('admin:admin_views_subscriber_changelist'), action_data)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a ModelAdmin action')\n\n    def test_model_admin_default_delete_action(self):\n        \"Tests the default delete action defined as a ModelAdmin method\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        delete_confirmation_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': 'delete_selected',\n            'post': 'yes',\n        }\n        confirmation = self.client.post(reverse('admin:admin_views_subscriber_changelist'), action_data)\n        self.assertIsInstance(confirmation, TemplateResponse)\n        self.assertContains(confirmation, \"Are you sure you want to delete the selected subscribers?\")\n        self.assertContains(confirmation, \"<h2>Summary</h2>\")\n        self.assertContains(confirmation, \"<li>Subscribers: 2</li>\")\n        self.assertContains(confirmation, \"<li>External subscribers: 1</li>\")\n        self.assertContains(confirmation, ACTION_CHECKBOX_NAME, count=2)\n        self.client.post(reverse('admin:admin_views_subscriber_changelist'), delete_confirmation_data)\n        self.assertEqual(Subscriber.objects.count(), 0)\n\n    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n    def test_non_localized_pk(self):\n        \"\"\"If USE_THOUSAND_SEPARATOR is set, make sure that the ids for\n        the objects selected for deletion are rendered without separators.\n        Refs #14895.\n        \"\"\"\n        subscriber = Subscriber.objects.get(id=1)\n        subscriber.id = 9999\n        subscriber.save()\n        action_data = {\n            ACTION_CHECKBOX_NAME: [9999, 2],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_subscriber_changelist'), action_data)\n        self.assertTemplateUsed(response, 'admin/delete_selected_confirmation.html')\n        self.assertContains(response, 'value=\"9999\"')  # Instead of 9,999\n        self.assertContains(response, 'value=\"2\"')\n\n    def test_model_admin_default_delete_action_protected(self):\n        \"\"\"\n        Tests the default delete action defined as a ModelAdmin method in the\n        case where some related objects are protected from deletion.\n        \"\"\"\n        q1 = Question.objects.create(question=\"Why?\")\n        a1 = Answer.objects.create(question=q1, answer=\"Because.\")\n        a2 = Answer.objects.create(question=q1, answer=\"Yes.\")\n        q2 = Question.objects.create(question=\"Wherefore?\")\n\n        action_data = {\n            ACTION_CHECKBOX_NAME: [q1.pk, q2.pk],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n\n        response = self.client.post(reverse('admin:admin_views_question_changelist'), action_data)\n\n        self.assertContains(response, \"would require deleting the following protected related objects\")\n        self.assertContains(\n            response,\n            '<li>Answer: <a href=\"%s\">Because.</a></li>' % reverse('admin:admin_views_answer_change', args=(a1.pk,)),\n            html=True\n        )\n        self.assertContains(\n            response,\n            '<li>Answer: <a href=\"%s\">Yes.</a></li>' % reverse('admin:admin_views_answer_change', args=(a2.pk,)),\n            html=True\n        )\n\n    def test_model_admin_default_delete_action_no_change_url(self):\n        \"\"\"\n        Default delete action shouldn't break if a user's ModelAdmin removes the url for change_view.\n\n        Regression test for #20640\n        \"\"\"\n        obj = UnchangeableObject.objects.create()\n        action_data = {\n            ACTION_CHECKBOX_NAME: obj.pk,\n            \"action\": \"delete_selected\",\n            \"index\": \"0\",\n        }\n        response = self.client.post(reverse('admin:admin_views_unchangeableobject_changelist'), action_data)\n        # No 500 caused by NoReverseMatch\n        self.assertEqual(response.status_code, 200)\n        # The page shouldn't display a link to the nonexistent change page\n        self.assertContains(response, \"<li>Unchangeable object: UnchangeableObject object</li>\", 1, html=True)\n\n    def test_custom_function_mail_action(self):\n        \"Tests a custom action defined in a function\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'external_mail',\n            'index': 0,\n        }\n        self.client.post(reverse('admin:admin_views_externalsubscriber_changelist'), action_data)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a function action')\n\n    def test_custom_function_action_with_redirect(self):\n        \"Tests a custom action defined in a function\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'redirect_to',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_externalsubscriber_changelist'), action_data)\n        self.assertEqual(response.status_code, 302)\n\n    def test_default_redirect(self):\n        \"\"\"\n        Test that actions which don't return an HttpResponse are redirected to\n        the same page, retaining the querystring (which may contain changelist\n        information).\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'external_mail',\n            'index': 0,\n        }\n        url = reverse('admin:admin_views_externalsubscriber_changelist') + '?o=1'\n        response = self.client.post(url, action_data)\n        self.assertRedirects(response, url)\n\n    def test_custom_function_action_streaming_response(self):\n        \"\"\"Tests a custom action that returns a StreamingHttpResponse.\"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'download',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_externalsubscriber_changelist'), action_data)\n        content = b''.join(response.streaming_content)\n        self.assertEqual(content, b'This is the content of the file')\n        self.assertEqual(response.status_code, 200)\n\n    def test_custom_function_action_no_perm_response(self):\n        \"\"\"Tests a custom action that returns an HttpResponse with 403 code.\"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'no_perm',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_externalsubscriber_changelist'), action_data)\n        self.assertEqual(response.status_code, 403)\n        self.assertEqual(response.content, b'No permission to perform this action')\n\n    def test_actions_ordering(self):\n        \"\"\"\n        Ensure that actions are ordered as expected.\n        Refs #15964.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_externalsubscriber_changelist'))\n        self.assertContains(response, '''<label>Action: <select name=\"action\">\n<option value=\"\" selected=\"selected\">---------</option>\n<option value=\"delete_selected\">Delete selected external\nsubscribers</option>\n<option value=\"redirect_to\">Redirect to (Awesome action)</option>\n<option value=\"external_mail\">External mail (Another awesome\naction)</option>\n<option value=\"download\">Download subscription</option>\n<option value=\"no_perm\">No permission to run</option>\n</select>''', html=True)\n\n    def test_model_without_action(self):\n        \"Tests a ModelAdmin without any action\"\n        response = self.client.get(reverse('admin:admin_views_oldsubscriber_changelist'))\n        self.assertEqual(response.context[\"action_form\"], None)\n        self.assertNotContains(response, '<input type=\"checkbox\" class=\"action-select\"',\n            msg_prefix=\"Found an unexpected action toggle checkboxbox in response\")\n        self.assertNotContains(response, '<input type=\"checkbox\" class=\"action-select\"')\n\n    def test_model_without_action_still_has_jquery(self):\n        \"Tests that a ModelAdmin without any actions still gets jQuery included in page\"\n        response = self.client.get(reverse('admin:admin_views_oldsubscriber_changelist'))\n        self.assertEqual(response.context[\"action_form\"], None)\n        self.assertContains(response, 'jquery.min.js',\n            msg_prefix=\"jQuery missing from admin pages for model with no admin actions\")\n\n    def test_action_column_class(self):\n        \"Tests that the checkbox column class is present in the response\"\n        response = self.client.get(reverse('admin:admin_views_subscriber_changelist'))\n        self.assertNotEqual(response.context[\"action_form\"], None)\n        self.assertContains(response, 'action-checkbox-column')\n\n    def test_multiple_actions_form(self):\n        \"\"\"\n        Test that actions come from the form whose submit button was pressed (#10618).\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            # Two different actions selected on the two forms...\n            'action': ['external_mail', 'delete_selected'],\n            # ...but we clicked \"go\" on the top form.\n            'index': 0\n        }\n        self.client.post(reverse('admin:admin_views_externalsubscriber_changelist'), action_data)\n\n        # Send mail, don't delete.\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a function action')\n\n    def test_user_message_on_none_selected(self):\n        \"\"\"\n        User should see a warning when 'Go' is pressed and no items are selected.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_subscriber_changelist'), action_data)\n        msg = \"\"\"Items must be selected in order to perform actions on them. No items have been changed.\"\"\"\n        self.assertContains(response, msg)\n        self.assertEqual(Subscriber.objects.count(), 2)\n\n    def test_user_message_on_no_action(self):\n        \"\"\"\n        User should see a warning when 'Go' is pressed and no action is selected.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': '',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_subscriber_changelist'), action_data)\n        msg = \"\"\"No action selected.\"\"\"\n        self.assertContains(response, msg)\n        self.assertEqual(Subscriber.objects.count(), 2)\n\n    def test_selection_counter(self):\n        \"\"\"\n        Check if the selection counter is there.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_subscriber_changelist'))\n        self.assertContains(response, '0 of 2 selected')\n\n    def test_popup_actions(self):\n        \"\"\" Actions should not be shown in popups. \"\"\"\n        response = self.client.get(reverse('admin:admin_views_subscriber_changelist'))\n        self.assertNotEqual(response.context[\"action_form\"], None)\n        response = self.client.get(\n            reverse('admin:admin_views_subscriber_changelist') + '?%s' % IS_POPUP_VAR)\n        self.assertEqual(response.context[\"action_form\"], None)\n\n    def test_popup_template_response(self):\n        \"\"\"\n        Success on popups shall be rendered from template in order to allow\n        easy customization.\n        \"\"\"\n        response = self.client.post(\n            reverse('admin:admin_views_actor_add') + '?%s=1' % IS_POPUP_VAR,\n            {'name': 'Troy McClure', 'age': '55', IS_POPUP_VAR: '1'})\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.template_name, 'admin/popup_response.html')\n\n    def test_popup_template_escaping(self):\n        context = {\n            'new_value': 'new_value\\\\',\n            'obj': 'obj\\\\',\n            'value': 'value\\\\',\n        }\n        output = render_to_string('admin/popup_response.html', context)\n        self.assertIn(\n            'opener.dismissAddRelatedObjectPopup(window, \"value\\\\u005C\", \"obj\\\\u005C\");', output\n        )\n\n        context['action'] = 'change'\n        output = render_to_string('admin/popup_response.html', context)\n        self.assertIn(\n            'opener.dismissChangeRelatedObjectPopup(window, '\n            '\"value\\\\u005C\", \"obj\\\\u005C\", \"new_value\\\\u005C\");', output\n        )\n\n        context['action'] = 'delete'\n        output = render_to_string('admin/popup_response.html', context)\n        self.assertIn(\n            'opener.dismissDeleteRelatedObjectPopup(window, \"value\\\\u005C\");', output\n        )\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass TestCustomChangeList(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n\n    def test_custom_changelist(self):\n        \"\"\"\n        Validate that a custom ChangeList class can be used (#9749)\n        \"\"\"\n        # Insert some data\n        post_data = {\"name\": \"First Gadget\"}\n        response = self.client.post(reverse('admin:admin_views_gadget_add'), post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n        # Hit the page once to get messages out of the queue message list\n        response = self.client.get(reverse('admin:admin_views_gadget_changelist'))\n        # Ensure that data is still not visible on the page\n        response = self.client.get(reverse('admin:admin_views_gadget_changelist'))\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'First Gadget')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass TestInlineNotEditable(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n\n    def test_GET_parent_add(self):\n        \"\"\"\n        InlineModelAdmin broken?\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_parent_add'))\n        self.assertEqual(response.status_code, 200)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminCustomQuerysetTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n        self.pks = [EmptyModel.objects.create().id for i in range(3)]\n        self.super_login = {\n            REDIRECT_FIELD_NAME: reverse('admin:index'),\n            'username': 'super',\n            'password': 'secret',\n        }\n\n    def test_changelist_view(self):\n        response = self.client.get(reverse('admin:admin_views_emptymodel_changelist'))\n        for i in self.pks:\n            if i > 1:\n                self.assertContains(response, 'Primary key = %s' % i)\n            else:\n                self.assertNotContains(response, 'Primary key = %s' % i)\n\n    def test_changelist_view_count_queries(self):\n        # create 2 Person objects\n        Person.objects.create(name='person1', gender=1)\n        Person.objects.create(name='person2', gender=2)\n        changelist_url = reverse('admin:admin_views_person_changelist')\n\n        # 4 queries are expected: 1 for the session, 1 for the user,\n        # 1 for the count and 1 for the objects on the page\n        with self.assertNumQueries(4):\n            resp = self.client.get(changelist_url)\n            self.assertEqual(resp.context['selection_note'], '0 of 2 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 2 selected')\n        # here one more count(*) query will run, because filters were applied\n        with self.assertNumQueries(5):\n            extra = {'q': 'not_in_name'}\n            resp = self.client.get(changelist_url, extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 0 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 0 selected')\n        with self.assertNumQueries(5):\n            extra = {'q': 'person'}\n            resp = self.client.get(changelist_url, extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 2 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 2 selected')\n        with self.assertNumQueries(5):\n            extra = {'gender__exact': '1'}\n            resp = self.client.get(changelist_url, extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 1 selected')\n            self.assertEqual(resp.context['selection_note_all'], '1 selected')\n\n    def test_change_view(self):\n        for i in self.pks:\n            response = self.client.get(reverse('admin:admin_views_emptymodel_change', args=(i,)))\n            if i > 1:\n                self.assertEqual(response.status_code, 200)\n            else:\n                self.assertEqual(response.status_code, 404)\n\n    def test_add_model_modeladmin_defer_qs(self):\n        # Test for #14529. defer() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        self.assertEqual(CoverLetter.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"author\": \"Candidate, Best\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_coverletter_add'),\n                                    post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The cover letter &quot;Candidate, Best&quot; was added successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        self.assertEqual(ShortMessage.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"content\": \"What's this SMS thing?\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_shortmessage_add'),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The short message &quot;ShortMessage object&quot; was added successfully.</li>',\n            html=True\n        )\n\n    def test_add_model_modeladmin_only_qs(self):\n        # Test for #14529. only() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        self.assertEqual(Telegram.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"title\": \"Urgent telegram\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_telegram_add'),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Telegram.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The telegram &quot;Urgent telegram&quot; was added successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        self.assertEqual(Paper.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"title\": \"My Modified Paper Title\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_paper_add'),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Paper.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The paper &quot;Paper object&quot; was added successfully.</li>',\n            html=True\n        )\n\n    def test_edit_model_modeladmin_defer_qs(self):\n        # Test for #14529. defer() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        cl = CoverLetter.objects.create(author=\"John Doe\")\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        response = self.client.get(reverse('admin:admin_views_coverletter_change', args=(cl.pk,)))\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"author\": \"John Doe II\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_coverletter_change', args=(cl.pk,)),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. Instance\n        # representation is set by model's __unicode__()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The cover letter &quot;John Doe II&quot; was changed successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        sm = ShortMessage.objects.create(content=\"This is expensive\")\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        response = self.client.get(reverse('admin:admin_views_shortmessage_change', args=(sm.pk,)))\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"content\": \"Too expensive\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_shortmessage_change', args=(sm.pk,)),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The ugly(!)\n        # instance representation is set by six.text_type()\n        self.assertContains(\n            response, (\n                '<li class=\"success\">The short message '\n                '&quot;ShortMessage_Deferred_timestamp object&quot; was '\n                'changed successfully.</li>'\n            ), html=True\n        )\n\n    def test_edit_model_modeladmin_only_qs(self):\n        # Test for #14529. only() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        t = Telegram.objects.create(title=\"Frist Telegram\")\n        self.assertEqual(Telegram.objects.count(), 1)\n        response = self.client.get(reverse('admin:admin_views_telegram_change', args=(t.pk,)))\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"title\": \"Telegram without typo\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_telegram_change', args=(t.pk,)),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Telegram.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The instance\n        # representation is set by model's __unicode__()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The telegram &quot;Telegram without typo&quot; was changed successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        p = Paper.objects.create(title=\"My Paper Title\")\n        self.assertEqual(Paper.objects.count(), 1)\n        response = self.client.get(reverse('admin:admin_views_paper_change', args=(p.pk,)))\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"title\": \"My Modified Paper Title\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_paper_change', args=(p.pk,)),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Paper.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The ugly(!)\n        # instance representation is set by six.text_type()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The paper &quot;Paper_Deferred_author object&quot; was changed successfully.</li>',\n            html=True\n        )\n\n    def test_history_view_custom_qs(self):\n        \"\"\"\n        Ensure that custom querysets are considered for the admin history view.\n        Refs #21013.\n        \"\"\"\n        self.client.post(reverse('admin:login'), self.super_login)\n        FilteredManager.objects.create(pk=1)\n        FilteredManager.objects.create(pk=2)\n        response = self.client.get(reverse('admin:admin_views_filteredmanager_changelist'))\n        self.assertContains(response, \"PK=1\")\n        self.assertContains(response, \"PK=2\")\n        self.assertEqual(\n            self.client.get(reverse('admin:admin_views_filteredmanager_history', args=(1,))).status_code, 200\n        )\n        self.assertEqual(\n            self.client.get(reverse('admin:admin_views_filteredmanager_history', args=(2,))).status_code, 200\n        )\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminInlineFileUploadTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n        # Set up test Picture and Gallery.\n        # These must be set up here instead of in fixtures in order to allow Picture\n        # to use a NamedTemporaryFile.\n        file1 = tempfile.NamedTemporaryFile(suffix=\".file1\")\n        file1.write(b'a' * (2 ** 21))\n        filename = file1.name\n        file1.close()\n        self.gallery = Gallery(name=\"Test Gallery\")\n        self.gallery.save()\n        self.picture = Picture(name=\"Test Picture\", image=filename, gallery=self.gallery)\n        self.picture.save()\n\n    def test_inline_file_upload_edit_validation_error_post(self):\n        \"\"\"\n        Test that inline file uploads correctly display prior data (#10002).\n        \"\"\"\n        post_data = {\n            \"name\": \"Test Gallery\",\n            \"pictures-TOTAL_FORMS\": \"2\",\n            \"pictures-INITIAL_FORMS\": \"1\",\n            \"pictures-MAX_NUM_FORMS\": \"0\",\n            \"pictures-0-id\": six.text_type(self.picture.id),\n            \"pictures-0-gallery\": six.text_type(self.gallery.id),\n            \"pictures-0-name\": \"Test Picture\",\n            \"pictures-0-image\": \"\",\n            \"pictures-1-id\": \"\",\n            \"pictures-1-gallery\": str(self.gallery.id),\n            \"pictures-1-name\": \"Test Picture 2\",\n            \"pictures-1-image\": \"\",\n        }\n        response = self.client.post(\n            reverse('admin:admin_views_gallery_change', args=(self.gallery.id,)), post_data\n        )\n        self.assertContains(response, b\"Currently\")\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminInlineTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.post_data = {\n            \"name\": \"Test Name\",\n\n            \"widget_set-TOTAL_FORMS\": \"3\",\n            \"widget_set-INITIAL_FORMS\": \"0\",\n            \"widget_set-MAX_NUM_FORMS\": \"0\",\n            \"widget_set-0-id\": \"\",\n            \"widget_set-0-owner\": \"1\",\n            \"widget_set-0-name\": \"\",\n            \"widget_set-1-id\": \"\",\n            \"widget_set-1-owner\": \"1\",\n            \"widget_set-1-name\": \"\",\n            \"widget_set-2-id\": \"\",\n            \"widget_set-2-owner\": \"1\",\n            \"widget_set-2-name\": \"\",\n\n            \"doohickey_set-TOTAL_FORMS\": \"3\",\n            \"doohickey_set-INITIAL_FORMS\": \"0\",\n            \"doohickey_set-MAX_NUM_FORMS\": \"0\",\n            \"doohickey_set-0-owner\": \"1\",\n            \"doohickey_set-0-code\": \"\",\n            \"doohickey_set-0-name\": \"\",\n            \"doohickey_set-1-owner\": \"1\",\n            \"doohickey_set-1-code\": \"\",\n            \"doohickey_set-1-name\": \"\",\n            \"doohickey_set-2-owner\": \"1\",\n            \"doohickey_set-2-code\": \"\",\n            \"doohickey_set-2-name\": \"\",\n\n            \"grommet_set-TOTAL_FORMS\": \"3\",\n            \"grommet_set-INITIAL_FORMS\": \"0\",\n            \"grommet_set-MAX_NUM_FORMS\": \"0\",\n            \"grommet_set-0-code\": \"\",\n            \"grommet_set-0-owner\": \"1\",\n            \"grommet_set-0-name\": \"\",\n            \"grommet_set-1-code\": \"\",\n            \"grommet_set-1-owner\": \"1\",\n            \"grommet_set-1-name\": \"\",\n            \"grommet_set-2-code\": \"\",\n            \"grommet_set-2-owner\": \"1\",\n            \"grommet_set-2-name\": \"\",\n\n            \"whatsit_set-TOTAL_FORMS\": \"3\",\n            \"whatsit_set-INITIAL_FORMS\": \"0\",\n            \"whatsit_set-MAX_NUM_FORMS\": \"0\",\n            \"whatsit_set-0-owner\": \"1\",\n            \"whatsit_set-0-index\": \"\",\n            \"whatsit_set-0-name\": \"\",\n            \"whatsit_set-1-owner\": \"1\",\n            \"whatsit_set-1-index\": \"\",\n            \"whatsit_set-1-name\": \"\",\n            \"whatsit_set-2-owner\": \"1\",\n            \"whatsit_set-2-index\": \"\",\n            \"whatsit_set-2-name\": \"\",\n\n            \"fancydoodad_set-TOTAL_FORMS\": \"3\",\n            \"fancydoodad_set-INITIAL_FORMS\": \"0\",\n            \"fancydoodad_set-MAX_NUM_FORMS\": \"0\",\n            \"fancydoodad_set-0-doodad_ptr\": \"\",\n            \"fancydoodad_set-0-owner\": \"1\",\n            \"fancydoodad_set-0-name\": \"\",\n            \"fancydoodad_set-0-expensive\": \"on\",\n            \"fancydoodad_set-1-doodad_ptr\": \"\",\n            \"fancydoodad_set-1-owner\": \"1\",\n            \"fancydoodad_set-1-name\": \"\",\n            \"fancydoodad_set-1-expensive\": \"on\",\n            \"fancydoodad_set-2-doodad_ptr\": \"\",\n            \"fancydoodad_set-2-owner\": \"1\",\n            \"fancydoodad_set-2-name\": \"\",\n            \"fancydoodad_set-2-expensive\": \"on\",\n\n            \"category_set-TOTAL_FORMS\": \"3\",\n            \"category_set-INITIAL_FORMS\": \"0\",\n            \"category_set-MAX_NUM_FORMS\": \"0\",\n            \"category_set-0-order\": \"\",\n            \"category_set-0-id\": \"\",\n            \"category_set-0-collector\": \"1\",\n            \"category_set-1-order\": \"\",\n            \"category_set-1-id\": \"\",\n            \"category_set-1-collector\": \"1\",\n            \"category_set-2-order\": \"\",\n            \"category_set-2-id\": \"\",\n            \"category_set-2-collector\": \"1\",\n        }\n\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n        self.collector = Collector(pk=1, name='John Fowles')\n        self.collector.save()\n\n    def test_simple_inline(self):\n        \"A simple model can be saved as inlines\"\n        # First add a new inline\n        self.post_data['widget_set-0-name'] = \"Widget 1\"\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1\")\n        widget_id = Widget.objects.all()[0].id\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"widget_set-0-id\"')\n\n        # Now resave that inline\n        self.post_data['widget_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['widget_set-0-id'] = str(widget_id)\n        self.post_data['widget_set-0-name'] = \"Widget 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1\")\n\n        # Now modify that inline\n        self.post_data['widget_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['widget_set-0-id'] = str(widget_id)\n        self.post_data['widget_set-0-name'] = \"Widget 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1 Updated\")\n\n    def test_explicit_autofield_inline(self):\n        \"A model with an explicit autofield primary key can be saved as inlines. Regression for #8093\"\n        # First add a new inline\n        self.post_data['grommet_set-0-name'] = \"Grommet 1\"\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"grommet_set-0-code\"')\n\n        # Now resave that inline\n        self.post_data['grommet_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['grommet_set-0-code'] = str(Grommet.objects.all()[0].code)\n        self.post_data['grommet_set-0-name'] = \"Grommet 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1\")\n\n        # Now modify that inline\n        self.post_data['grommet_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['grommet_set-0-code'] = str(Grommet.objects.all()[0].code)\n        self.post_data['grommet_set-0-name'] = \"Grommet 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1 Updated\")\n\n    def test_char_pk_inline(self):\n        \"A model with a character PK can be saved as inlines. Regression for #10992\"\n        # First add a new inline\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1\"\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"doohickey_set-0-code\"')\n\n        # Now resave that inline\n        self.post_data['doohickey_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1\")\n\n        # Now modify that inline\n        self.post_data['doohickey_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1 Updated\")\n\n    def test_integer_pk_inline(self):\n        \"A model with an integer PK can be saved as inlines. Regression for #10992\"\n        # First add a new inline\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1\"\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"whatsit_set-0-index\"')\n\n        # Now resave that inline\n        self.post_data['whatsit_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1\")\n\n        # Now modify that inline\n        self.post_data['whatsit_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1 Updated\")\n\n    def test_inherited_inline(self):\n        \"An inherited model can be saved as inlines. Regression for #11042\"\n        # First add a new inline\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1\"\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1\")\n        doodad_pk = FancyDoodad.objects.all()[0].pk\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"fancydoodad_set-0-doodad_ptr\"')\n\n        # Now resave that inline\n        self.post_data['fancydoodad_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['fancydoodad_set-0-doodad_ptr'] = str(doodad_pk)\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1\")\n\n        # Now modify that inline\n        self.post_data['fancydoodad_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['fancydoodad_set-0-doodad_ptr'] = str(doodad_pk)\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1 Updated\")\n\n    def test_ordered_inline(self):\n        \"\"\"Check that an inline with an editable ordering fields is\n        updated correctly. Regression for #10922\"\"\"\n        # Create some objects with an initial ordering\n        Category.objects.create(id=1, order=1, collector=self.collector)\n        Category.objects.create(id=2, order=2, collector=self.collector)\n        Category.objects.create(id=3, order=0, collector=self.collector)\n        Category.objects.create(id=4, order=0, collector=self.collector)\n\n        # NB: The order values must be changed so that the items are reordered.\n        self.post_data.update({\n            \"name\": \"Frederick Clegg\",\n\n            \"category_set-TOTAL_FORMS\": \"7\",\n            \"category_set-INITIAL_FORMS\": \"4\",\n            \"category_set-MAX_NUM_FORMS\": \"0\",\n\n            \"category_set-0-order\": \"14\",\n            \"category_set-0-id\": \"1\",\n            \"category_set-0-collector\": \"1\",\n\n            \"category_set-1-order\": \"13\",\n            \"category_set-1-id\": \"2\",\n            \"category_set-1-collector\": \"1\",\n\n            \"category_set-2-order\": \"1\",\n            \"category_set-2-id\": \"3\",\n            \"category_set-2-collector\": \"1\",\n\n            \"category_set-3-order\": \"0\",\n            \"category_set-3-id\": \"4\",\n            \"category_set-3-collector\": \"1\",\n\n            \"category_set-4-order\": \"\",\n            \"category_set-4-id\": \"\",\n            \"category_set-4-collector\": \"1\",\n\n            \"category_set-5-order\": \"\",\n            \"category_set-5-id\": \"\",\n            \"category_set-5-collector\": \"1\",\n\n            \"category_set-6-order\": \"\",\n            \"category_set-6-id\": \"\",\n            \"category_set-6-collector\": \"1\",\n        })\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        # Successful post will redirect\n        self.assertEqual(response.status_code, 302)\n\n        # Check that the order values have been applied to the right objects\n        self.assertEqual(self.collector.category_set.count(), 4)\n        self.assertEqual(Category.objects.get(id=1).order, 14)\n        self.assertEqual(Category.objects.get(id=2).order, 13)\n        self.assertEqual(Category.objects.get(id=3).order, 1)\n        self.assertEqual(Category.objects.get(id=4).order, 0)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass NeverCacheTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_admin_index(self):\n        \"Check the never-cache status of the main index\"\n        response = self.client.get(reverse('admin:index'))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_app_index(self):\n        \"Check the never-cache status of an application index\"\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_index(self):\n        \"Check the never-cache status of a model index\"\n        response = self.client.get(reverse('admin:admin_views_fabric_changelist'))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_add(self):\n        \"Check the never-cache status of a model add page\"\n        response = self.client.get(reverse('admin:admin_views_fabric_add'))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_view(self):\n        \"Check the never-cache status of a model edit page\"\n        response = self.client.get(reverse('admin:admin_views_section_change', args=(self.s1.pk,)))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_history(self):\n        \"Check the never-cache status of a model history page\"\n        response = self.client.get(reverse('admin:admin_views_section_history', args=(self.s1.pk,)))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_delete(self):\n        \"Check the never-cache status of a model delete page\"\n        response = self.client.get(reverse('admin:admin_views_section_delete', args=(self.s1.pk,)))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_login(self):\n        \"Check the never-cache status of login views\"\n        self.client.logout()\n        response = self.client.get(reverse('admin:index'))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_logout(self):\n        \"Check the never-cache status of logout view\"\n        response = self.client.get(reverse('admin:logout'))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_password_change(self):\n        \"Check the never-cache status of the password change view\"\n        self.client.logout()\n        response = self.client.get(reverse('admin:password_change'))\n        self.assertEqual(get_max_age(response), None)\n\n    def test_password_change_done(self):\n        \"Check the never-cache status of the password change done view\"\n        response = self.client.get(reverse('admin:password_change_done'))\n        self.assertEqual(get_max_age(response), None)\n\n    def test_JS_i18n(self):\n        \"Check the never-cache status of the JavaScript i18n view\"\n        response = self.client.get(reverse('admin:jsi18n'))\n        self.assertEqual(get_max_age(response), None)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass PrePopulatedTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_prepopulated_on(self):\n        response = self.client.get(reverse('admin:admin_views_prepopulatedpost_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"id: '#id_slug',\")\n        self.assertContains(response, \"field['dependency_ids'].push('#id_title');\")\n        self.assertContains(response, \"id: '#id_prepopulatedsubpost_set-0-subslug',\")\n\n    def test_prepopulated_off(self):\n        response = self.client.get(reverse('admin:admin_views_prepopulatedpost_change', args=(self.p1.pk,)))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"A Long Title\")\n        self.assertNotContains(response, \"id: '#id_slug'\")\n        self.assertNotContains(response, \"field['dependency_ids'].push('#id_title');\")\n        self.assertNotContains(response, \"id: '#id_prepopulatedsubpost_set-0-subslug',\")\n\n    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n    def test_prepopulated_maxlength_localized(self):\n        \"\"\"\n        Regression test for #15938: if USE_THOUSAND_SEPARATOR is set, make sure\n        that maxLength (in the JavaScript) is rendered without separators.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_prepopulatedpostlargeslug_add'))\n        self.assertContains(response, \"maxLength: 1000\")  # instead of 1,000\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass SeleniumAdminViewsFirefoxTests(AdminSeleniumWebDriverTestCase):\n\n    available_apps = ['admin_views'] + AdminSeleniumWebDriverTestCase.available_apps\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def setUp(self):\n        self.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        self.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n    def test_prepopulated_fields(self):\n        \"\"\"\n        Ensure that the JavaScript-automated prepopulated fields work with the\n        main form and with stacked and tabular inlines.\n        Refs #13068, #9264, #9983, #9784.\n        \"\"\"\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get('%s%s' % (self.live_server_url,\n            reverse('admin:admin_views_mainprepopulated_add')))\n\n        # Main form ----------------------------------------------------------\n        self.selenium.find_element_by_css_selector('#id_pubdate').send_keys('2012-02-18')\n        self.get_select_option('#id_status', 'option two').click()\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' this is the mAin n\u00c0M\u00eb and it\\'s aw\u03b5\u0161ome\u0131\u0131\u0131')\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        slug3 = self.selenium.find_element_by_css_selector('#id_slug3').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-and-its-awesomeiii-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-and-its-awesomeiii')\n        self.assertEqual(slug3, 'main-n\\xe0m\\xeb-and-its-aw\\u03b5\\u0161ome\\u0131\\u0131\\u0131')\n\n        # Stacked inlines ----------------------------------------------------\n        # Initial inline\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-0-pubdate').send_keys('2011-12-17')\n        self.get_select_option('#id_relatedprepopulated_set-0-status', 'option one').click()\n        self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-0-name'\n        ).send_keys(' here is a s\u0164\u0101\u00c7ke\u00f0   inline !  ')\n        slug1 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-0-slug1'\n        ).get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-0-slug2'\n        ).get_attribute('value')\n        self.assertEqual(slug1, 'here-stacked-inline-2011-12-17')\n        self.assertEqual(slug2, 'option-one-here-stacked-inline')\n\n        # Add an inline\n        self.selenium.find_elements_by_link_text('Add another Related prepopulated')[0].click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-pubdate').send_keys('1999-01-25')\n        self.get_select_option('#id_relatedprepopulated_set-1-status', 'option two').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-name').send_keys(\n            ' now you haVe an\u00f6ther   s\u0164\u0101\u00c7ke\u00f0  inline with a very ... '\n            'loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog text... '\n        )\n        slug1 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-1-slug1'\n        ).get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-1-slug2'\n        ).get_attribute('value')\n        # 50 characters maximum for slug1 field\n        self.assertEqual(slug1, 'now-you-have-another-stacked-inline-very-loooooooo')\n        # 60 characters maximum for slug2 field\n        self.assertEqual(slug2, 'option-two-now-you-have-another-stacked-inline-very-looooooo')\n\n        # Tabular inlines ----------------------------------------------------\n        # Initial inline\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-0-pubdate').send_keys('1234-12-07')\n        self.get_select_option('#id_relatedprepopulated_set-2-0-status', 'option two').click()\n        self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-2-0-name'\n        ).send_keys('And now, with a t\u00c3b\u0171la\u0158 inline !!!')\n        slug1 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-2-0-slug1'\n        ).get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-2-0-slug2'\n        ).get_attribute('value')\n        self.assertEqual(slug1, 'and-now-tabular-inline-1234-12-07')\n        self.assertEqual(slug2, 'option-two-and-now-tabular-inline')\n\n        # Add an inline\n        self.selenium.find_elements_by_link_text('Add another Related prepopulated')[1].click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-pubdate').send_keys('1981-08-22')\n        self.get_select_option('#id_relatedprepopulated_set-2-1-status', 'option one').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-name').send_keys(\n            'a t\u00c3b\u0171la\u0158 inline with ignored ;\"&*^\\%$#@-/`~ characters'\n        )\n        slug1 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-2-1-slug1'\n        ).get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-2-1-slug2'\n        ).get_attribute('value')\n        self.assertEqual(slug1, 'tabular-inline-ignored-characters-1981-08-22')\n        self.assertEqual(slug2, 'option-one-tabular-inline-ignored-characters')\n\n        # Save and check that everything is properly stored in the database\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.assertEqual(MainPrepopulated.objects.all().count(), 1)\n        MainPrepopulated.objects.get(\n            name=' this is the mAin n\u00c0M\u00eb and it\\'s aw\u03b5\u0161ome\u0131\u0131\u0131',\n            pubdate='2012-02-18',\n            status='option two',\n            slug1='main-name-and-its-awesomeiii-2012-02-18',\n            slug2='option-two-main-name-and-its-awesomeiii',\n        )\n        self.assertEqual(RelatedPrepopulated.objects.all().count(), 4)\n        RelatedPrepopulated.objects.get(\n            name=' here is a s\u0164\u0101\u00c7ke\u00f0   inline !  ',\n            pubdate='2011-12-17',\n            status='option one',\n            slug1='here-stacked-inline-2011-12-17',\n            slug2='option-one-here-stacked-inline',\n        )\n        RelatedPrepopulated.objects.get(\n            # 75 characters in name field\n            name=' now you haVe an\u00f6ther   s\u0164\u0101\u00c7ke\u00f0  inline with a very ... loooooooooooooooooo',\n            pubdate='1999-01-25',\n            status='option two',\n            slug1='now-you-have-another-stacked-inline-very-loooooooo',\n            slug2='option-two-now-you-have-another-stacked-inline-very-looooooo',\n        )\n        RelatedPrepopulated.objects.get(\n            name='And now, with a t\u00c3b\u0171la\u0158 inline !!!',\n            pubdate='1234-12-07',\n            status='option two',\n            slug1='and-now-tabular-inline-1234-12-07',\n            slug2='option-two-and-now-tabular-inline',\n        )\n        RelatedPrepopulated.objects.get(\n            name='a t\u00c3b\u0171la\u0158 inline with ignored ;\"&*^\\%$#@-/`~ characters',\n            pubdate='1981-08-22',\n            status='option one',\n            slug1='tabular-inline-ignored-characters-1981-08-22',\n            slug2='option-one-tabular-inline-ignored-characters',\n        )\n\n    def test_populate_existing_object(self):\n        \"\"\"\n        Ensure that the prepopulation works for existing objects too, as long\n        as the original field is empty.\n        Refs #19082.\n        \"\"\"\n        # Slugs are empty to start with.\n        item = MainPrepopulated.objects.create(\n            name=' this is the mAin n\u00c0M\u00eb',\n            pubdate='2012-02-18',\n            status='option two',\n            slug1='',\n            slug2='',\n        )\n        self.admin_login(username='super',\n                         password='secret',\n                         login_url=reverse('admin:index'))\n\n        object_url = '%s%s' % (\n            self.live_server_url,\n            reverse('admin:admin_views_mainprepopulated_change', args=(item.id,)))\n\n        self.selenium.get(object_url)\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' the best')\n\n        # The slugs got prepopulated since they were originally empty\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-best-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-best')\n\n        # Save the object\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n\n        self.selenium.get(object_url)\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' hello')\n\n        # The slugs got prepopulated didn't change since they were originally not empty\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-best-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-best')\n\n    def test_collapsible_fieldset(self):\n        \"\"\"\n        Test that the 'collapse' class in fieldsets definition allows to\n        show/hide the appropriate field section.\n        \"\"\"\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get('%s%s' % (self.live_server_url,\n            reverse('admin:admin_views_article_add')))\n        self.assertFalse(self.selenium.find_element_by_id('id_title').is_displayed())\n        self.selenium.find_elements_by_link_text('Show')[0].click()\n        self.assertTrue(self.selenium.find_element_by_id('id_title').is_displayed())\n        self.assertEqual(\n            self.selenium.find_element_by_id('fieldsetcollapser0').text,\n            \"Hide\"\n        )\n\n    def test_first_field_focus(self):\n        \"\"\"JavaScript-assisted auto-focus on first usable form field.\"\"\"\n        # First form field has a single widget\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get('%s%s' % (self.live_server_url,\n            reverse('admin:admin_views_picture_add')))\n        self.assertEqual(\n            self.selenium.switch_to.active_element,\n            self.selenium.find_element_by_id('id_name')\n        )\n\n        # First form field has a MultiWidget\n        self.selenium.get('%s%s' % (self.live_server_url,\n            reverse('admin:admin_views_reservation_add')))\n        self.assertEqual(\n            self.selenium.switch_to.active_element,\n            self.selenium.find_element_by_id('id_start_date_0')\n        )\n\n    def test_cancel_delete_confirmation(self):\n        \"Cancelling the deletion of an object takes the user back one page.\"\n        pizza = Pizza.objects.create(name=\"Double Cheese\")\n        url = reverse('admin:admin_views_pizza_change', args=(pizza.id,))\n        full_url = '%s%s' % (self.live_server_url, url)\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get(full_url)\n        self.selenium.find_element_by_class_name('deletelink').click()\n        # Wait until we're on the delete page.\n        self.wait_for('.cancel-link')\n        self.selenium.find_element_by_class_name('cancel-link').click()\n        # Wait until we're back on the change page.\n        self.wait_for_text('#content h1', 'Change pizza')\n        self.assertEqual(self.selenium.current_url, full_url)\n        self.assertEqual(Pizza.objects.count(), 1)\n\n    def test_cancel_delete_related_confirmation(self):\n        \"\"\"\n        Cancelling the deletion of an object with relations takes the user back\n        one page.\n        \"\"\"\n        pizza = Pizza.objects.create(name=\"Double Cheese\")\n        topping1 = Topping.objects.create(name=\"Cheddar\")\n        topping2 = Topping.objects.create(name=\"Mozzarella\")\n        pizza.toppings.add(topping1, topping2)\n        url = reverse('admin:admin_views_pizza_change', args=(pizza.id,))\n        full_url = '%s%s' % (self.live_server_url, url)\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get(full_url)\n        self.selenium.find_element_by_class_name('deletelink').click()\n        # Wait until we're on the delete page.\n        self.wait_for('.cancel-link')\n        self.selenium.find_element_by_class_name('cancel-link').click()\n        # Wait until we're back on the change page.\n        self.wait_for_text('#content h1', 'Change pizza')\n        self.assertEqual(self.selenium.current_url, full_url)\n        self.assertEqual(Pizza.objects.count(), 1)\n        self.assertEqual(Topping.objects.count(), 2)\n\n    def test_list_editable_popups(self):\n        \"\"\"\n        list_editable foreign keys have add/change popups.\n        \"\"\"\n        s1 = Section.objects.create(name='Test section')\n        Article.objects.create(\n            content='<p>Middle content</p>',\n            date=datetime.datetime(2008, 3, 18, 11, 54, 58),\n            section=s1,\n        )\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get(self.live_server_url + reverse('admin:admin_views_article_changelist'))\n        # Change popup\n        self.selenium.find_element_by_id('change_id_form-0-section').click()\n        self.wait_for_popup()\n        self.selenium.switch_to.window(self.selenium.window_handles[-1])\n        self.wait_for_text('#content h1', 'Change section')\n        self.selenium.close()\n        self.selenium.switch_to.window(self.selenium.window_handles[0])\n\n        # Add popup\n        self.selenium.find_element_by_id('add_id_form-0-section').click()\n        self.wait_for_popup()\n        self.selenium.switch_to.window(self.selenium.window_handles[-1])\n        self.wait_for_text('#content h1', 'Add section')\n        self.selenium.close()\n        self.selenium.switch_to.window(self.selenium.window_handles[0])\n\n    def test_inline_uuid_pk_edit_with_popup(self):\n        from selenium.webdriver.support.ui import Select\n        parent = ParentWithUUIDPK.objects.create(title='test')\n        related_with_parent = RelatedWithUUIDPKModel.objects.create(parent=parent)\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        change_url = reverse('admin:admin_views_relatedwithuuidpkmodel_change', args=(related_with_parent.id,))\n        self.selenium.get(self.live_server_url + change_url)\n        self.selenium.find_element_by_id('change_id_parent').click()\n        self.wait_for_popup()\n        self.selenium.switch_to.window(self.selenium.window_handles[-1])\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.selenium.switch_to.window(self.selenium.window_handles[0])\n        select = Select(self.selenium.find_element_by_id('id_parent'))\n        self.assertEqual(select.first_selected_option.text, str(parent.id))\n        self.assertEqual(select.first_selected_option.get_attribute('value'), str(parent.id))\n\n    def test_inline_uuid_pk_add_with_popup(self):\n        from selenium.webdriver.support.ui import Select\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get(self.live_server_url + reverse('admin:admin_views_relatedwithuuidpkmodel_add'))\n        self.selenium.find_element_by_id('add_id_parent').click()\n        self.wait_for_popup()\n        self.selenium.switch_to.window(self.selenium.window_handles[-1])\n        self.selenium.find_element_by_id('id_title').send_keys('test')\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.selenium.switch_to.window(self.selenium.window_handles[0])\n        select = Select(self.selenium.find_element_by_id('id_parent'))\n        uuid_id = str(ParentWithUUIDPK.objects.first().id)\n        self.assertEqual(select.first_selected_option.text, uuid_id)\n        self.assertEqual(select.first_selected_option.get_attribute('value'), uuid_id)\n\n    def test_list_editable_raw_id_fields(self):\n        parent = ParentWithUUIDPK.objects.create(title='test')\n        parent2 = ParentWithUUIDPK.objects.create(title='test2')\n        RelatedWithUUIDPKModel.objects.create(parent=parent)\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        change_url = reverse('admin:admin_views_relatedwithuuidpkmodel_changelist', current_app=site2.name)\n        self.selenium.get(self.live_server_url + change_url)\n        self.selenium.find_element_by_id('lookup_id_form-0-parent').click()\n        self.wait_for_popup()\n        self.selenium.switch_to.window(self.selenium.window_handles[-1])\n        # Select \"parent2\" in the popup.\n        self.selenium.find_element_by_link_text(str(parent2.pk)).click()\n        self.selenium.switch_to.window(self.selenium.window_handles[0])\n        # The newly selected pk should appear in the raw id input.\n        value = self.selenium.find_element_by_id('id_form-0-parent').get_attribute('value')\n        self.assertEqual(value, str(parent2.pk))\n\n\nclass SeleniumAdminViewsChromeTests(SeleniumAdminViewsFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\n\nclass SeleniumAdminViewsIETests(SeleniumAdminViewsFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    @ignore_warnings(category=RemovedInDjango20Warning)  # for allow_tags deprecation\n    def test_readonly_get(self):\n        response = self.client.get(reverse('admin:admin_views_post_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'name=\"posted\"')\n        # 3 fields + 2 submit buttons + 5 inline management form fields, + 2\n        # hidden fields for inlines + 1 field for the inline + 2 empty form\n        self.assertContains(response, \"<input\", count=15)\n        self.assertContains(response, formats.localize(datetime.date.today()))\n        self.assertContains(response,\n            \"<label>Awesomeness level:</label>\")\n        self.assertContains(response, \"Very awesome.\")\n        self.assertContains(response, \"Unknown coolness.\")\n        self.assertContains(response, \"foo\")\n\n        # Checks that multiline text in a readonly field gets <br /> tags\n        self.assertContains(response, \"Multiline<br />test<br />string\")\n        self.assertContains(response, \"<p>Multiline<br />html<br />content</p>\", html=True)\n        self.assertContains(response, \"InlineMultiline<br />test<br />string\")\n        # Remove only this last line when the deprecation completes.\n        self.assertContains(response, \"<p>Multiline<br />html<br />content<br />with allow tags</p>\", html=True)\n\n        self.assertContains(response,\n            formats.localize(datetime.date.today() - datetime.timedelta(days=7)))\n\n        self.assertContains(response, '<div class=\"form-row field-coolness\">')\n        self.assertContains(response, '<div class=\"form-row field-awesomeness_level\">')\n        self.assertContains(response, '<div class=\"form-row field-posted\">')\n        self.assertContains(response, '<div class=\"form-row field-value\">')\n        self.assertContains(response, '<div class=\"form-row\">')\n        self.assertContains(response, '<p class=\"help\">', 3)\n        self.assertContains(\n            response,\n            '<p class=\"help\">Some help text for the title (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>',\n            html=True\n        )\n        self.assertContains(\n            response,\n            '<p class=\"help\">Some help text for the content (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>',\n            html=True\n        )\n        self.assertContains(\n            response,\n            '<p class=\"help\">Some help text for the date (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>',\n            html=True\n        )\n\n        p = Post.objects.create(title=\"I worked on readonly_fields\", content=\"Its good stuff\")\n        response = self.client.get(reverse('admin:admin_views_post_change', args=(p.pk,)))\n        self.assertContains(response, \"%d amount of cool\" % p.pk)\n\n    @ignore_warnings(category=RemovedInDjango20Warning)  # for allow_tags deprecation\n    def test_readonly_text_field(self):\n        p = Post.objects.create(\n            title=\"Readonly test\", content=\"test\",\n            readonly_content='test\\r\\n\\r\\ntest\\r\\n\\r\\ntest\\r\\n\\r\\ntest',\n        )\n        Link.objects.create(\n            url=\"http://www.djangoproject.com\", post=p,\n            readonly_link_content=\"test\\r\\nlink\",\n        )\n        response = self.client.get(reverse('admin:admin_views_post_change', args=(p.pk,)))\n        # Checking readonly field.\n        self.assertContains(response, 'test<br /><br />test<br /><br />test<br /><br />test')\n        # Checking readonly field in inline.\n        self.assertContains(response, 'test<br />link')\n\n    def test_readonly_post(self):\n        data = {\n            \"title\": \"Django Got Readonly Fields\",\n            \"content\": \"This is an incredible development.\",\n            \"link_set-TOTAL_FORMS\": \"1\",\n            \"link_set-INITIAL_FORMS\": \"0\",\n            \"link_set-MAX_NUM_FORMS\": \"0\",\n        }\n        response = self.client.post(reverse('admin:admin_views_post_add'), data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Post.objects.count(), 1)\n        p = Post.objects.get()\n        self.assertEqual(p.posted, datetime.date.today())\n\n        data[\"posted\"] = \"10-8-1990\"  # some date that's not today\n        response = self.client.post(reverse('admin:admin_views_post_add'), data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Post.objects.count(), 2)\n        p = Post.objects.order_by('-id')[0]\n        self.assertEqual(p.posted, datetime.date.today())\n\n    def test_readonly_manytomany(self):\n        \"Regression test for #13004\"\n        response = self.client.get(reverse('admin:admin_views_pizza_add'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_user_password_change_limited_queryset(self):\n        su = User.objects.filter(is_superuser=True)[0]\n        response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n        self.assertEqual(response.status_code, 404)\n\n    def test_change_form_renders_correct_null_choice_value(self):\n        \"\"\"\n        Regression test for #17911.\n        \"\"\"\n        choice = Choice.objects.create(choice=None)\n        response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n        self.assertContains(response, '<p>No opinion</p>', html=True)\n        self.assertNotContains(response, '<p>(None)</p>')\n\n    def test_readonly_manytomany_backwards_ref(self):\n        \"\"\"\n        Regression test for #16433 - backwards references for related objects\n        broke if the related field is read-only due to the help_text attribute\n        \"\"\"\n        topping = Topping.objects.create(name='Salami')\n        pizza = Pizza.objects.create(name='Americano')\n        pizza.toppings.add(topping)\n        response = self.client.get(reverse('admin:admin_views_topping_add'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_readonly_onetoone_backwards_ref(self):\n        \"\"\"\n        Can reference a reverse OneToOneField in ModelAdmin.readonly_fields.\n        \"\"\"\n        v1 = Villain.objects.create(name='Adam')\n        pl = Plot.objects.create(name='Test Plot', team_leader=v1, contact=v1)\n        pd = PlotDetails.objects.create(details='Brand New Plot', plot=pl)\n\n        response = self.client.get(reverse('admin:admin_views_plotproxy_change', args=(pl.pk,)))\n        field = self.get_admin_readonly_field(response, 'plotdetails')\n        self.assertEqual(field.contents(), 'Brand New Plot')\n\n        # The reverse relation also works if the OneToOneField is null.\n        pd.plot = None\n        pd.save()\n\n        response = self.client.get(reverse('admin:admin_views_plotproxy_change', args=(pl.pk,)))\n        field = self.get_admin_readonly_field(response, 'plotdetails')\n        self.assertEqual(field.contents(), '-')  # default empty value\n\n    @ignore_warnings(category=RemovedInDjango20Warning)  # for allow_tags deprecation\n    def test_readonly_field_overrides(self):\n        \"\"\"\n        Regression test for #22087 - ModelForm Meta overrides are ignored by\n        AdminReadonlyField\n        \"\"\"\n        p = FieldOverridePost.objects.create(title=\"Test Post\", content=\"Test Content\")\n        response = self.client.get(reverse('admin:admin_views_fieldoverridepost_change', args=(p.pk,)))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<p class=\"help\">Overridden help text for the date</p>')\n        self.assertContains(response, '<label for=\"id_public\">Overridden public label:</label>', html=True)\n        self.assertNotContains(response, \"Some help text for the date (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)\")\n\n    def test_correct_autoescaping(self):\n        \"\"\"\n        Make sure that non-field readonly elements are properly autoescaped (#24461)\n        \"\"\"\n        section = Section.objects.create(name='<a>evil</a>')\n        response = self.client.get(reverse('admin:admin_views_section_change', args=(section.pk,)))\n        self.assertNotContains(response, \"<a>evil</a>\", status_code=200)\n        self.assertContains(response, \"&lt;a&gt;evil&lt;/a&gt;\", status_code=200)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass LimitChoicesToInAdminTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_limit_choices_to_as_callable(self):\n        \"\"\"Test for ticket 2445 changes to admin.\"\"\"\n        threepwood = Character.objects.create(\n            username='threepwood',\n            last_action=datetime.datetime.today() + datetime.timedelta(days=1),\n        )\n        marley = Character.objects.create(\n            username='marley',\n            last_action=datetime.datetime.today() - datetime.timedelta(days=1),\n        )\n        response = self.client.get(reverse('admin:admin_views_stumpjoke_add'))\n        # The allowed option should appear twice; the limited option should not appear.\n        self.assertContains(response, threepwood.username, count=2)\n        self.assertNotContains(response, marley.username)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass RawIdFieldsTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_limit_choices_to(self):\n        \"\"\"Regression test for 14880\"\"\"\n        actor = Actor.objects.create(name=\"Palin\", age=27)\n        Inquisition.objects.create(expected=True,\n                                   leader=actor,\n                                   country=\"England\")\n        Inquisition.objects.create(expected=False,\n                                   leader=actor,\n                                   country=\"Spain\")\n        response = self.client.get(reverse('admin:admin_views_sketch_add'))\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_inquisition\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step also tests integers, strings and booleans in the\n        # lookup query string; in model we define inquisition field to have a\n        # limit_choices_to option that includes a filter on a string field\n        # (inquisition__actor__name), a filter on an integer field\n        # (inquisition__actor__age), and a filter on a boolean field\n        # (inquisition__expected).\n        response2 = self.client.get(popup_url)\n        self.assertContains(response2, \"Spain\")\n        self.assertNotContains(response2, \"England\")\n\n    def test_limit_choices_to_isnull_false(self):\n        \"\"\"Regression test for 20182\"\"\"\n        Actor.objects.create(name=\"Palin\", age=27)\n        Actor.objects.create(name=\"Kilbraken\", age=50, title=\"Judge\")\n        response = self.client.get(reverse('admin:admin_views_sketch_add'))\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_defendant0\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step tests field__isnull=0 gets parsed correctly from the\n        # lookup query string; in model we define defendant0 field to have a\n        # limit_choices_to option that includes \"actor__title__isnull=False\".\n        response2 = self.client.get(popup_url)\n        self.assertContains(response2, \"Kilbraken\")\n        self.assertNotContains(response2, \"Palin\")\n\n    def test_limit_choices_to_isnull_true(self):\n        \"\"\"Regression test for 20182\"\"\"\n        Actor.objects.create(name=\"Palin\", age=27)\n        Actor.objects.create(name=\"Kilbraken\", age=50, title=\"Judge\")\n        response = self.client.get(reverse('admin:admin_views_sketch_add'))\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_defendant1\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step tests field__isnull=1 gets parsed correctly from the\n        # lookup query string; in model we define defendant1 field to have a\n        # limit_choices_to option that includes \"actor__title__isnull=True\".\n        response2 = self.client.get(popup_url)\n        self.assertNotContains(response2, \"Kilbraken\")\n        self.assertContains(response2, \"Palin\")\n\n    def test_list_display_method_same_name_as_reverse_accessor(self):\n        \"\"\"\n        Should be able to use a ModelAdmin method in list_display that has the\n        same name as a reverse model field (\"sketch\" in this case).\n        \"\"\"\n        actor = Actor.objects.create(name=\"Palin\", age=27)\n        Inquisition.objects.create(expected=True, leader=actor, country=\"England\")\n        response = self.client.get(reverse('admin:admin_views_inquisition_changelist'))\n        self.assertContains(response, 'list-display-sketch')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass UserAdminTest(TestCase):\n    \"\"\"\n    Tests user CRUD functionality.\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.adduser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='adduser',\n            first_name='Add', last_name='User', email='auser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.changeuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='changeuser',\n            first_name='Change', last_name='User', email='cuser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n        cls.per1 = Person.objects.create(name='John Mauchly', gender=1, alive=True)\n        cls.per2 = Person.objects.create(name='Grace Hopper', gender=1, alive=False)\n        cls.per3 = Person.objects.create(name='Guido van Rossum', gender=1, alive=True)\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_save_button(self):\n        user_count = User.objects.count()\n        response = self.client.post(reverse('admin:auth_user_add'), {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n        })\n        new_user = User.objects.get(username='newuser')\n        self.assertRedirects(response, reverse('admin:auth_user_change', args=(new_user.pk,)))\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_save_continue_editing_button(self):\n        user_count = User.objects.count()\n        response = self.client.post(reverse('admin:auth_user_add'), {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_continue': '1',\n        })\n        new_user = User.objects.get(username='newuser')\n        self.assertRedirects(response, reverse('admin:auth_user_change', args=(new_user.pk,)))\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_password_mismatch(self):\n        response = self.client.post(reverse('admin:auth_user_add'), {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'mismatch',\n        })\n        self.assertEqual(response.status_code, 200)\n        adminform = response.context['adminform']\n        self.assertNotIn('password', adminform.form.errors)\n        self.assertEqual(adminform.form.errors['password2'],\n            [\"The two password fields didn't match.\"])\n\n    def test_user_fk_add_popup(self):\n        \"\"\"User addition through a FK popup should return the appropriate JavaScript response.\"\"\"\n        response = self.client.get(reverse('admin:admin_views_album_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, reverse('admin:auth_user_add'))\n        self.assertContains(response, 'class=\"related-widget-wrapper-link add-related\" id=\"add_id_owner\"')\n        response = self.client.get(reverse('admin:auth_user_add') + '?_popup=1')\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'name=\"_continue\"')\n        self.assertNotContains(response, 'name=\"_addanother\"')\n        data = {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_popup': '1',\n            '_save': '1',\n        }\n        response = self.client.post(reverse('admin:auth_user_add') + '?_popup=1', data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissAddRelatedObjectPopup')\n\n    def test_user_fk_change_popup(self):\n        \"\"\"User change through a FK popup should return the appropriate JavaScript response.\"\"\"\n        response = self.client.get(reverse('admin:admin_views_album_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, reverse('admin:auth_user_change', args=('__fk__',)))\n        self.assertContains(response, 'class=\"related-widget-wrapper-link change-related\" id=\"change_id_owner\"')\n        user = User.objects.get(username='changeuser')\n        url = reverse('admin:auth_user_change', args=(user.pk,)) + '?_popup=1'\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'name=\"_continue\"')\n        self.assertNotContains(response, 'name=\"_addanother\"')\n        data = {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            'last_login_0': '2007-05-30',\n            'last_login_1': '13:20:10',\n            'date_joined_0': '2007-05-30',\n            'date_joined_1': '13:20:10',\n            '_popup': '1',\n            '_save': '1',\n        }\n        response = self.client.post(url, data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissChangeRelatedObjectPopup')\n\n    def test_user_fk_delete_popup(self):\n        \"\"\"User deletion through a FK popup should return the appropriate JavaScript response.\"\"\"\n        response = self.client.get(reverse('admin:admin_views_album_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, reverse('admin:auth_user_delete', args=('__fk__',)))\n        self.assertContains(response, 'class=\"related-widget-wrapper-link change-related\" id=\"change_id_owner\"')\n        user = User.objects.get(username='changeuser')\n        url = reverse('admin:auth_user_delete', args=(user.pk,)) + '?_popup=1'\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        data = {\n            'post': 'yes',\n            '_popup': '1',\n        }\n        response = self.client.post(url, data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissDeleteRelatedObjectPopup')\n\n    def test_save_add_another_button(self):\n        user_count = User.objects.count()\n        response = self.client.post(reverse('admin:auth_user_add'), {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_addanother': '1',\n        })\n        new_user = User.objects.order_by('-id')[0]\n        self.assertRedirects(response, reverse('admin:auth_user_add'))\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_user_permission_performance(self):\n        u = User.objects.all()[0]\n\n        # Don't depend on a warm cache, see #17377.\n        ContentType.objects.clear_cache()\n\n        with self.assertNumQueries(10):\n            response = self.client.get(reverse('admin:auth_user_change', args=(u.pk,)))\n            self.assertEqual(response.status_code, 200)\n\n    def test_form_url_present_in_context(self):\n        u = User.objects.all()[0]\n        response = self.client.get(reverse('admin3:auth_user_password_change', args=(u.pk,)))\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.context['form_url'], 'pony')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass GroupAdminTest(TestCase):\n    \"\"\"\n    Tests group CRUD functionality.\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_save_button(self):\n        group_count = Group.objects.count()\n        response = self.client.post(reverse('admin:auth_group_add'), {\n            'name': 'newgroup',\n        })\n\n        Group.objects.order_by('-id')[0]\n        self.assertRedirects(response, reverse('admin:auth_group_changelist'))\n        self.assertEqual(Group.objects.count(), group_count + 1)\n\n    def test_group_permission_performance(self):\n        g = Group.objects.create(name=\"test_group\")\n\n        # Ensure no queries are skipped due to cached content type for Group.\n        ContentType.objects.clear_cache()\n\n        with self.assertNumQueries(8):\n            response = self.client.get(reverse('admin:auth_group_change', args=(g.pk,)))\n            self.assertEqual(response.status_code, 200)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass CSSTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    @ignore_warnings(category=RemovedInDjango20Warning)  # for allow_tags deprecation\n    def test_field_prefix_css_classes(self):\n        \"\"\"\n        Ensure that fields have a CSS class name with a 'field-' prefix.\n        Refs #16371.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_post_add'))\n\n        # The main form\n        self.assertContains(response, 'class=\"form-row field-title\"')\n        self.assertContains(response, 'class=\"form-row field-content\"')\n        self.assertContains(response, 'class=\"form-row field-public\"')\n        self.assertContains(response, 'class=\"form-row field-awesomeness_level\"')\n        self.assertContains(response, 'class=\"form-row field-coolness\"')\n        self.assertContains(response, 'class=\"form-row field-value\"')\n        self.assertContains(response, 'class=\"form-row\"')  # The lambda function\n\n        # The tabular inline\n        self.assertContains(response, '<td class=\"field-url\">')\n        self.assertContains(response, '<td class=\"field-posted\">')\n\n    def test_index_css_classes(self):\n        \"\"\"\n        Ensure that CSS class names are used for each app and model on the\n        admin index pages.\n        Refs #17050.\n        \"\"\"\n        # General index page\n        response = self.client.get(reverse('admin:index'))\n        self.assertContains(response, '<div class=\"app-admin_views module\">')\n        self.assertContains(response, '<tr class=\"model-actor\">')\n        self.assertContains(response, '<tr class=\"model-album\">')\n\n        # App index page\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertContains(response, '<div class=\"app-admin_views module\">')\n        self.assertContains(response, '<tr class=\"model-actor\">')\n        self.assertContains(response, '<tr class=\"model-album\">')\n\n    def test_app_model_in_form_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by change_form template\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_list_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by change_list template\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_changelist'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_delete_confirmation_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by delete_confirmation\n        template\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_section_delete', args=(self.s1.pk,)))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_app_index_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by app_index template\n        \"\"\"\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<body class=\" dashboard app-admin_views')\n\n    def test_app_model_in_delete_selected_confirmation_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by\n        delete_selected_confirmation template\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_section_changelist'),\n            action_data)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_changelist_field_classes(self):\n        \"\"\"\n        Cells of the change list table should contain the field name in their class attribute\n        Refs #11195.\n        \"\"\"\n        Podcast.objects.create(name=\"Django Dose\",\n            release_date=datetime.date.today())\n        response = self.client.get(reverse('admin:admin_views_podcast_changelist'))\n        self.assertContains(\n            response, '<th class=\"field-name\">')\n        self.assertContains(\n            response, '<td class=\"field-release_date nowrap\">')\n        self.assertContains(\n            response, '<td class=\"action-checkbox\">')\n\n\ntry:\n    import docutils\nexcept ImportError:\n    docutils = None\n\n\n@unittest.skipUnless(docutils, \"no docutils installed.\")\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\n@modify_settings(INSTALLED_APPS={'append': ['django.contrib.admindocs', 'django.contrib.flatpages']})\nclass AdminDocsTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_tags(self):\n        response = self.client.get(reverse('django-admindocs-tags'))\n\n        # The builtin tag group exists\n        self.assertContains(response, \"<h2>Built-in tags</h2>\", count=2, html=True)\n\n        # A builtin tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"built_in-autoescape\">autoescape</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#built_in-autoescape\">autoescape</a></li>', html=True)\n\n        # An app tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"flatpages-get_flatpages\">get_flatpages</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#flatpages-get_flatpages\">get_flatpages</a></li>', html=True)\n\n        # The admin list tag group exists\n        self.assertContains(response, \"<h2>admin_list</h2>\", count=2, html=True)\n\n        # An admin list tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"admin_list-admin_actions\">admin_actions</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#admin_list-admin_actions\">admin_actions</a></li>', html=True)\n\n    def test_filters(self):\n        response = self.client.get(reverse('django-admindocs-filters'))\n\n        # The builtin filter group exists\n        self.assertContains(response, \"<h2>Built-in filters</h2>\", count=2, html=True)\n\n        # A builtin filter exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"built_in-add\">add</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#built_in-add\">add</a></li>', html=True)\n\n\n@override_settings(\n    PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\",\n    TEMPLATES=[{\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    }],\n    USE_I18N=False,\n)\nclass ValidXHTMLTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_lang_name_present(self):\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertNotContains(response, ' lang=\"\"')\n        self.assertNotContains(response, ' xml:lang=\"\"')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n                   ROOT_URLCONF=\"admin_views.urls\",\n                   USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\nclass DateHierarchyTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def tearDown(self):\n        formats.reset_format_cache()\n\n    def assert_non_localized_year(self, response, year):\n        \"\"\"Ensure that the year is not localized with\n        USE_THOUSAND_SEPARATOR. Refs #15234.\n        \"\"\"\n        self.assertNotContains(response, formats.number_format(year))\n\n    def assert_contains_year_link(self, response, date):\n        self.assertContains(response, '?release_date__year=%d\"' % (date.year,))\n\n    def assert_contains_month_link(self, response, date):\n        self.assertContains(\n            response, '?release_date__month=%d&amp;release_date__year=%d\"' % (\n                date.month, date.year))\n\n    def assert_contains_day_link(self, response, date):\n        self.assertContains(\n            response, '?release_date__day=%d&amp;'\n            'release_date__month=%d&amp;release_date__year=%d\"' % (\n                date.day, date.month, date.year))\n\n    def test_empty(self):\n        \"\"\"\n        Ensure that no date hierarchy links display with empty changelist.\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_podcast_changelist'))\n        self.assertNotContains(response, 'release_date__year=')\n        self.assertNotContains(response, 'release_date__month=')\n        self.assertNotContains(response, 'release_date__day=')\n\n    def test_single(self):\n        \"\"\"\n        Ensure that single day-level date hierarchy appears for single object.\n        \"\"\"\n        DATE = datetime.date(2000, 6, 30)\n        Podcast.objects.create(release_date=DATE)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        self.assert_contains_day_link(response, DATE)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_within_month(self):\n        \"\"\"\n        Ensure that day-level links appear for changelist within single month.\n        \"\"\"\n        DATES = (datetime.date(2000, 6, 30),\n                 datetime.date(2000, 6, 15),\n                 datetime.date(2000, 6, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        for date in DATES:\n            self.assert_contains_day_link(response, date)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_within_year(self):\n        \"\"\"\n        Ensure that month-level links appear for changelist within single year.\n        \"\"\"\n        DATES = (datetime.date(2000, 1, 30),\n                 datetime.date(2000, 3, 15),\n                 datetime.date(2000, 5, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        # no day-level links\n        self.assertNotContains(response, 'release_date__day=')\n        for date in DATES:\n            self.assert_contains_month_link(response, date)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_multiple_years(self):\n        \"\"\"\n        Ensure that year-level links appear for year-spanning changelist.\n        \"\"\"\n        DATES = (datetime.date(2001, 1, 30),\n                 datetime.date(2003, 3, 15),\n                 datetime.date(2005, 5, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        response = self.client.get(\n            reverse('admin:admin_views_podcast_changelist'))\n        # no day/month-level links\n        self.assertNotContains(response, 'release_date__day=')\n        self.assertNotContains(response, 'release_date__month=')\n        for date in DATES:\n            self.assert_contains_year_link(response, date)\n\n        # and make sure GET parameters still behave correctly\n        for date in DATES:\n            url = '%s?release_date__year=%d' % (\n                  reverse('admin:admin_views_podcast_changelist'),\n                  date.year)\n            response = self.client.get(url)\n            self.assert_contains_month_link(response, date)\n            self.assert_non_localized_year(response, 2000)\n            self.assert_non_localized_year(response, 2003)\n            self.assert_non_localized_year(response, 2005)\n\n            url = '%s?release_date__year=%d&release_date__month=%d' % (\n                  reverse('admin:admin_views_podcast_changelist'),\n                  date.year, date.month)\n            response = self.client.get(url)\n            self.assert_contains_day_link(response, date)\n            self.assert_non_localized_year(response, 2000)\n            self.assert_non_localized_year(response, 2003)\n            self.assert_non_localized_year(response, 2005)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminCustomSaveRelatedTests(TestCase):\n    \"\"\"\n    Ensure that one can easily customize the way related objects are saved.\n    Refs #16115.\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_should_be_able_to_edit_related_objects_on_add_view(self):\n        post = {\n            'child_set-TOTAL_FORMS': '3',\n            'child_set-INITIAL_FORMS': '0',\n            'name': 'Josh Stone',\n            'child_set-0-name': 'Paul',\n            'child_set-1-name': 'Catherine',\n        }\n        self.client.post(reverse('admin:admin_views_parent_add'), post)\n        self.assertEqual(1, Parent.objects.count())\n        self.assertEqual(2, Child.objects.count())\n\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n    def test_should_be_able_to_edit_related_objects_on_change_view(self):\n        parent = Parent.objects.create(name='Josh Stone')\n        paul = Child.objects.create(parent=parent, name='Paul')\n        catherine = Child.objects.create(parent=parent, name='Catherine')\n        post = {\n            'child_set-TOTAL_FORMS': '5',\n            'child_set-INITIAL_FORMS': '2',\n            'name': 'Josh Stone',\n            'child_set-0-name': 'Paul',\n            'child_set-0-id': paul.id,\n            'child_set-1-name': 'Catherine',\n            'child_set-1-id': catherine.id,\n        }\n        self.client.post(reverse('admin:admin_views_parent_change', args=(parent.id,)), post)\n\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n    def test_should_be_able_to_edit_related_objects_on_changelist_view(self):\n        parent = Parent.objects.create(name='Josh Rock')\n        Child.objects.create(parent=parent, name='Paul')\n        Child.objects.create(parent=parent, name='Catherine')\n        post = {\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '1',\n            'form-MAX_NUM_FORMS': '0',\n            'form-0-id': parent.id,\n            'form-0-name': 'Josh Stone',\n            '_save': 'Save'\n        }\n\n        self.client.post(reverse('admin:admin_views_parent_changelist'), post)\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewLogoutTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def test_logout(self):\n        self.client.force_login(self.superuser)\n        response = self.client.get(reverse('admin:logout'))\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, 'registration/logged_out.html')\n        self.assertEqual(response.request['PATH_INFO'], reverse('admin:logout'))\n        self.assertFalse(response.context['has_permission'])\n        self.assertNotContains(response, 'user-tools')  # user-tools div shouldn't visible.\n\n    def test_client_logout_url_can_be_used_to_login(self):\n        response = self.client.get(reverse('admin:logout'))\n        self.assertEqual(response.status_code, 302)  # we should be redirected to the login page.\n\n        # follow the redirect and test results.\n        response = self.client.get(reverse('admin:logout'), follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, 'admin/login.html')\n        self.assertEqual(response.request['PATH_INFO'], reverse('admin:login'))\n        self.assertContains(response, '<input type=\"hidden\" name=\"next\" value=\"%s\" />' % reverse('admin:index'))\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminUserMessageTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def send_message(self, level):\n        \"\"\"\n        Helper that sends a post to the dummy test methods and asserts that a\n        message with the level has appeared in the response.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'message_%s' % level,\n            'index': 0,\n        }\n\n        response = self.client.post(reverse('admin:admin_views_usermessenger_changelist'),\n                                    action_data, follow=True)\n        self.assertContains(response,\n                            '<li class=\"%s\">Test %s</li>' % (level, level),\n                            html=True)\n\n    @override_settings(MESSAGE_LEVEL=10)  # Set to DEBUG for this request\n    def test_message_debug(self):\n        self.send_message('debug')\n\n    def test_message_info(self):\n        self.send_message('info')\n\n    def test_message_success(self):\n        self.send_message('success')\n\n    def test_message_warning(self):\n        self.send_message('warning')\n\n    def test_message_error(self):\n        self.send_message('error')\n\n    def test_message_extra_tags(self):\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'message_extra_tags',\n            'index': 0,\n        }\n\n        response = self.client.post(reverse('admin:admin_views_usermessenger_changelist'),\n                                    action_data, follow=True)\n        self.assertContains(response,\n                            '<li class=\"extra_tag info\">Test tags</li>',\n                            html=True)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminKeepChangeListFiltersTests(TestCase):\n    admin_site = site\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.joepublicuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='joepublic',\n            first_name='Joe', last_name='Public', email='joepublic@example.com',\n            is_staff=False, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def assertURLEqual(self, url1, url2):\n        \"\"\"\n        Assert that two URLs are equal despite the ordering\n        of their querystring. Refs #22360.\n        \"\"\"\n        parsed_url1 = urlparse(url1)\n        path1 = parsed_url1.path\n        parsed_qs1 = dict(parse_qsl(parsed_url1.query))\n\n        parsed_url2 = urlparse(url2)\n        path2 = parsed_url2.path\n        parsed_qs2 = dict(parse_qsl(parsed_url2.query))\n\n        for parsed_qs in [parsed_qs1, parsed_qs2]:\n            if '_changelist_filters' in parsed_qs:\n                changelist_filters = parsed_qs['_changelist_filters']\n                parsed_filters = dict(parse_qsl(changelist_filters))\n                parsed_qs['_changelist_filters'] = parsed_filters\n\n        self.assertEqual(path1, path2)\n        self.assertEqual(parsed_qs1, parsed_qs2)\n\n    def test_assert_url_equal(self):\n        # Test equality.\n        change_user_url = reverse('admin:auth_user_change', args=(self.joepublicuser.pk,))\n        self.assertURLEqual(\n            'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(\n                change_user_url\n            ),\n            'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(\n                change_user_url\n            )\n        )\n\n        # Test inequality.\n        with self.assertRaises(AssertionError):\n            self.assertURLEqual(\n                'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(\n                    change_user_url\n                ),\n                'http://testserver{}?_changelist_filters=is_staff__exact%3D1%26is_superuser__exact%3D1'.format(\n                    change_user_url\n                )\n            )\n\n        # Ignore scheme and host.\n        self.assertURLEqual(\n            'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(\n                change_user_url\n            ),\n            '{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(change_user_url)\n        )\n\n        # Ignore ordering of querystring.\n        self.assertURLEqual(\n            '{}?is_staff__exact=0&is_superuser__exact=0'.format(reverse('admin:auth_user_changelist')),\n            '{}?is_superuser__exact=0&is_staff__exact=0'.format(reverse('admin:auth_user_changelist'))\n        )\n\n        # Ignore ordering of _changelist_filters.\n        self.assertURLEqual(\n            '{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(change_user_url),\n            '{}?_changelist_filters=is_superuser__exact%3D0%26is_staff__exact%3D0'.format(change_user_url)\n        )\n\n    def get_changelist_filters(self):\n        return {\n            'is_superuser__exact': 0,\n            'is_staff__exact': 0,\n        }\n\n    def get_changelist_filters_querystring(self):\n        return urlencode(self.get_changelist_filters())\n\n    def get_preserved_filters_querystring(self):\n        return urlencode({\n            '_changelist_filters': self.get_changelist_filters_querystring()\n        })\n\n    def get_sample_user_id(self):\n        return self.joepublicuser.pk\n\n    def get_changelist_url(self):\n        return '%s?%s' % (\n            reverse('admin:auth_user_changelist',\n                    current_app=self.admin_site.name),\n            self.get_changelist_filters_querystring(),\n        )\n\n    def get_add_url(self):\n        return '%s?%s' % (\n            reverse('admin:auth_user_add',\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_change_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_change', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_history_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_history', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_delete_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_delete', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def test_changelist_view(self):\n        response = self.client.get(self.get_changelist_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the `change_view` link has the correct querystring.\n        detail_link = re.search(\n            '<a href=\"(.*?)\">{}</a>'.format(self.joepublicuser.username),\n            force_text(response.content)\n        )\n        self.assertURLEqual(detail_link.group(1), self.get_change_url())\n\n    def test_change_view(self):\n        # Get the `change_view`.\n        response = self.client.get(self.get_change_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the form action.\n        form_action = re.search(\n            '<form enctype=\"multipart/form-data\" action=\"(.*?)\" method=\"post\" id=\"user_form\".*?>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(form_action.group(1), '?%s' % self.get_preserved_filters_querystring())\n\n        # Check the history link.\n        history_link = re.search(\n            '<a href=\"(.*?)\" class=\"historylink\">History</a>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(history_link.group(1), self.get_history_url())\n\n        # Check the delete link.\n        delete_link = re.search(\n            '<a href=\"(.*?)\" class=\"deletelink\">Delete</a>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(delete_link.group(1), self.get_delete_url())\n\n        # Test redirect on \"Save\".\n        post_data = {\n            'username': 'joepublic',\n            'last_login_0': '2007-05-30',\n            'last_login_1': '13:20:10',\n            'date_joined_0': '2007-05-30',\n            'date_joined_1': '13:20:10',\n        }\n\n        post_data['_save'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_changelist_url()\n        )\n        post_data.pop('_save')\n\n        # Test redirect on \"Save and continue\".\n        post_data['_continue'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url()\n        )\n        post_data.pop('_continue')\n\n        # Test redirect on \"Save and add new\".\n        post_data['_addanother'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_add_url()\n        )\n        post_data.pop('_addanother')\n\n    def test_add_view(self):\n        # Get the `add_view`.\n        response = self.client.get(self.get_add_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the form action.\n        form_action = re.search(\n            '<form enctype=\"multipart/form-data\" action=\"(.*?)\" method=\"post\" id=\"user_form\".*?>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(form_action.group(1), '?%s' % self.get_preserved_filters_querystring())\n\n        post_data = {\n            'username': 'dummy',\n            'password1': 'test',\n            'password2': 'test',\n        }\n\n        # Test redirect on \"Save\".\n        post_data['_save'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url(User.objects.get(username='dummy').pk)\n        )\n        post_data.pop('_save')\n\n        # Test redirect on \"Save and continue\".\n        post_data['username'] = 'dummy2'\n        post_data['_continue'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url(User.objects.get(username='dummy2').pk)\n        )\n        post_data.pop('_continue')\n\n        # Test redirect on \"Save and add new\".\n        post_data['username'] = 'dummy3'\n        post_data['_addanother'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_add_url()\n        )\n        post_data.pop('_addanother')\n\n    def test_delete_view(self):\n        # Test redirect on \"Delete\".\n        response = self.client.post(self.get_delete_url(), {'post': 'yes'})\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_changelist_url()\n        )\n\n    def test_url_prefix(self):\n        context = {\n            'preserved_filters': self.get_preserved_filters_querystring(),\n            'opts': User._meta,\n        }\n\n        url = reverse('admin:auth_user_changelist', current_app=self.admin_site.name)\n        self.assertURLEqual(\n            self.get_changelist_url(),\n            add_preserved_filters(context, url),\n        )\n\n        with override_script_prefix('/prefix/'):\n            url = reverse('admin:auth_user_changelist', current_app=self.admin_site.name)\n            self.assertURLEqual(\n                self.get_changelist_url(),\n                add_preserved_filters(context, url),\n            )\n\n\nclass NamespacedAdminKeepChangeListFiltersTests(AdminKeepChangeListFiltersTests):\n    admin_site = site2\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass TestLabelVisibility(TestCase):\n    \"\"\" #11277 -Labels of hidden fields in admin were not hidden. \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_all_fields_visible(self):\n        response = self.client.get(reverse('admin:admin_views_emptymodelvisible_add'))\n        self.assert_fieldline_visible(response)\n        self.assert_field_visible(response, 'first')\n        self.assert_field_visible(response, 'second')\n\n    def test_all_fields_hidden(self):\n        response = self.client.get(reverse('admin:admin_views_emptymodelhidden_add'))\n        self.assert_fieldline_hidden(response)\n        self.assert_field_hidden(response, 'first')\n        self.assert_field_hidden(response, 'second')\n\n    def test_mixin(self):\n        response = self.client.get(reverse('admin:admin_views_emptymodelmixin_add'))\n        self.assert_fieldline_visible(response)\n        self.assert_field_hidden(response, 'first')\n        self.assert_field_visible(response, 'second')\n\n    def assert_field_visible(self, response, field_name):\n        self.assertContains(response, '<div class=\"field-box field-%s\">' % field_name)\n\n    def assert_field_hidden(self, response, field_name):\n        self.assertContains(response, '<div class=\"field-box field-%s hidden\">' % field_name)\n\n    def assert_fieldline_visible(self, response):\n        self.assertContains(response, '<div class=\"form-row field-first field-second\">')\n\n    def assert_fieldline_hidden(self, response):\n        self.assertContains(response, '<div class=\"form-row hidden')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewOnSiteTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n        cls.s1 = State.objects.create(name='New York')\n        cls.s2 = State.objects.create(name='Illinois')\n        cls.s3 = State.objects.create(name='California')\n        cls.c1 = City.objects.create(state=cls.s1, name='New York')\n        cls.c2 = City.objects.create(state=cls.s2, name='Chicago')\n        cls.c3 = City.objects.create(state=cls.s3, name='San Francisco')\n        cls.r1 = Restaurant.objects.create(city=cls.c1, name='Italian Pizza')\n        cls.r2 = Restaurant.objects.create(city=cls.c1, name='Boulevard')\n        cls.r3 = Restaurant.objects.create(city=cls.c2, name='Chinese Dinner')\n        cls.r4 = Restaurant.objects.create(city=cls.c2, name='Angels')\n        cls.r5 = Restaurant.objects.create(city=cls.c2, name='Take Away')\n        cls.r6 = Restaurant.objects.create(city=cls.c3, name='The Unknown Restaurant')\n        cls.w1 = Worker.objects.create(work_at=cls.r1, name='Mario', surname='Rossi')\n        cls.w2 = Worker.objects.create(work_at=cls.r1, name='Antonio', surname='Bianchi')\n        cls.w3 = Worker.objects.create(work_at=cls.r1, name='John', surname='Doe')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_add_view_form_and_formsets_run_validation(self):\n        \"\"\"\n        Issue #20522\n        Verifying that if the parent form fails validation, the inlines also\n        run validation even if validation is contingent on parent form data\n        \"\"\"\n        # The form validation should fail because 'some_required_info' is\n        # not included on the parent form, and the family_name of the parent\n        # does not match that of the child\n        post_data = {\"family_name\": \"Test1\",\n                     \"dependentchild_set-TOTAL_FORMS\": \"1\",\n                     \"dependentchild_set-INITIAL_FORMS\": \"0\",\n                     \"dependentchild_set-MAX_NUM_FORMS\": \"1\",\n                     \"dependentchild_set-0-id\": \"\",\n                     \"dependentchild_set-0-parent\": \"\",\n                     \"dependentchild_set-0-family_name\": \"Test2\"}\n        response = self.client.post(reverse('admin:admin_views_parentwithdependentchildren_add'),\n                                    post_data)\n\n        # just verifying the parent form failed validation, as expected --\n        # this isn't the regression test\n        self.assertIn('some_required_info', response.context['adminform'].form.errors)\n\n        # actual regression test\n        for error_set in response.context['inline_admin_formset'].formset.errors:\n            self.assertEqual(['Children must share a family name with their parents in this contrived test case'],\n                             error_set.get('__all__'))\n\n    def test_change_view_form_and_formsets_run_validation(self):\n        \"\"\"\n        Issue #20522\n        Verifying that if the parent form fails validation, the inlines also\n        run validation even if validation is contingent on parent form data\n        \"\"\"\n        pwdc = ParentWithDependentChildren.objects.create(some_required_info=6,\n                                                          family_name=\"Test1\")\n        # The form validation should fail because 'some_required_info' is\n        # not included on the parent form, and the family_name of the parent\n        # does not match that of the child\n        post_data = {\"family_name\": \"Test2\",\n                     \"dependentchild_set-TOTAL_FORMS\": \"1\",\n                     \"dependentchild_set-INITIAL_FORMS\": \"0\",\n                     \"dependentchild_set-MAX_NUM_FORMS\": \"1\",\n                     \"dependentchild_set-0-id\": \"\",\n                     \"dependentchild_set-0-parent\": str(pwdc.id),\n                     \"dependentchild_set-0-family_name\": \"Test1\"}\n        response = self.client.post(\n            reverse('admin:admin_views_parentwithdependentchildren_change', args=(pwdc.id,)), post_data\n        )\n\n        # just verifying the parent form failed validation, as expected --\n        # this isn't the regression test\n        self.assertIn('some_required_info', response.context['adminform'].form.errors)\n\n        # actual regression test\n        for error_set in response.context['inline_admin_formset'].formset.errors:\n            self.assertEqual(['Children must share a family name with their parents in this contrived test case'],\n                             error_set.get('__all__'))\n\n    def test_check(self):\n        \"Ensure that the view_on_site value is either a boolean or a callable\"\n        try:\n            admin = CityAdmin(City, AdminSite())\n            CityAdmin.view_on_site = True\n            self.assertEqual(admin.check(), [])\n            CityAdmin.view_on_site = False\n            self.assertEqual(admin.check(), [])\n            CityAdmin.view_on_site = lambda obj: obj.get_absolute_url()\n            self.assertEqual(admin.check(), [])\n            CityAdmin.view_on_site = []\n            self.assertEqual(admin.check(), [\n                Error(\n                    \"The value of 'view_on_site' must be a callable or a boolean value.\",\n                    hint=None,\n                    obj=CityAdmin,\n                    id='admin.E025',\n                ),\n            ])\n        finally:\n            # Restore the original values for the benefit of other tests.\n            CityAdmin.view_on_site = True\n\n    def test_false(self):\n        \"Ensure that the 'View on site' button is not displayed if view_on_site is False\"\n        response = self.client.get(reverse('admin:admin_views_restaurant_change', args=(self.r1.pk,)))\n        content_type_pk = ContentType.objects.get_for_model(Restaurant).pk\n        self.assertNotContains(response, reverse('admin:view_on_site', args=(content_type_pk, 1)))\n\n    def test_true(self):\n        \"Ensure that the default behavior is followed if view_on_site is True\"\n        response = self.client.get(reverse('admin:admin_views_city_change', args=(self.c1.pk,)))\n        content_type_pk = ContentType.objects.get_for_model(City).pk\n        self.assertContains(response, reverse('admin:view_on_site', args=(content_type_pk, self.c1.pk)))\n\n    def test_callable(self):\n        \"Ensure that the right link is displayed if view_on_site is a callable\"\n        response = self.client.get(reverse('admin:admin_views_worker_change', args=(self.w1.pk,)))\n        self.assertContains(response, '\"/worker/%s/%s/\"' % (self.w1.surname, self.w1.name))\n\n    def test_missing_get_absolute_url(self):\n        \"Ensure None is returned if model doesn't have get_absolute_url\"\n        model_admin = ModelAdmin(Worker, None)\n        self.assertIsNone(model_admin.get_view_on_site_url(Worker()))\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass InlineAdminViewOnSiteTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n        cls.s1 = State.objects.create(name='New York')\n        cls.s2 = State.objects.create(name='Illinois')\n        cls.s3 = State.objects.create(name='California')\n        cls.c1 = City.objects.create(state=cls.s1, name='New York')\n        cls.c2 = City.objects.create(state=cls.s2, name='Chicago')\n        cls.c3 = City.objects.create(state=cls.s3, name='San Francisco')\n        cls.r1 = Restaurant.objects.create(city=cls.c1, name='Italian Pizza')\n        cls.r2 = Restaurant.objects.create(city=cls.c1, name='Boulevard')\n        cls.r3 = Restaurant.objects.create(city=cls.c2, name='Chinese Dinner')\n        cls.r4 = Restaurant.objects.create(city=cls.c2, name='Angels')\n        cls.r5 = Restaurant.objects.create(city=cls.c2, name='Take Away')\n        cls.r6 = Restaurant.objects.create(city=cls.c3, name='The Unknown Restaurant')\n        cls.w1 = Worker.objects.create(work_at=cls.r1, name='Mario', surname='Rossi')\n        cls.w2 = Worker.objects.create(work_at=cls.r1, name='Antonio', surname='Bianchi')\n        cls.w3 = Worker.objects.create(work_at=cls.r1, name='John', surname='Doe')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_false(self):\n        \"Ensure that the 'View on site' button is not displayed if view_on_site is False\"\n        response = self.client.get(reverse('admin:admin_views_state_change', args=(self.s1.pk,)))\n        content_type_pk = ContentType.objects.get_for_model(City).pk\n        self.assertNotContains(response, reverse('admin:view_on_site', args=(content_type_pk, self.c1.pk)))\n\n    def test_true(self):\n        \"Ensure that the 'View on site' button is displayed if view_on_site is True\"\n        response = self.client.get(reverse('admin:admin_views_city_change', args=(self.c1.pk,)))\n        content_type_pk = ContentType.objects.get_for_model(Restaurant).pk\n        self.assertContains(response, reverse('admin:view_on_site', args=(content_type_pk, self.r1.pk)))\n\n    def test_callable(self):\n        \"Ensure that the right link is displayed if view_on_site is a callable\"\n        response = self.client.get(reverse('admin:admin_views_restaurant_change', args=(self.r1.pk,)))\n        self.assertContains(response, '\"/worker_inline/%s/%s/\"' % (self.w1.surname, self.w1.name))\n\n\n@override_settings(ROOT_URLCONF=\"admin_views.urls\")\nclass TestEtagWithAdminView(SimpleTestCase):\n    # See https://code.djangoproject.com/ticket/16003\n\n    def test_admin(self):\n        with self.settings(USE_ETAGS=False):\n            response = self.client.get(reverse('admin:index'))\n            self.assertEqual(response.status_code, 302)\n            self.assertFalse(response.has_header('ETag'))\n\n        with self.settings(USE_ETAGS=True):\n            response = self.client.get(reverse('admin:index'))\n            self.assertEqual(response.status_code, 302)\n            self.assertTrue(response.has_header('ETag'))\n\n\n@override_settings(\n    PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\",\n)\nclass GetFormsetsWithInlinesArgumentTest(TestCase):\n    \"\"\"\n    #23934 - When adding a new model instance in the admin, the 'obj' argument\n    of get_formsets_with_inlines() should be None. When changing, it should be\n    equal to the existing model instance.\n    The GetFormsetsArgumentCheckingAdmin ModelAdmin throws an exception\n    if obj is not None during add_view or obj is None during change_view.\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_explicitly_provided_pk(self):\n        post_data = {'name': '1'}\n        response = self.client.post(reverse('admin:admin_views_explicitlyprovidedpk_add'), post_data)\n        self.assertEqual(response.status_code, 302)\n\n        post_data = {'name': '2'}\n        response = self.client.post(reverse('admin:admin_views_explicitlyprovidedpk_change', args=(1,)), post_data)\n        self.assertEqual(response.status_code, 302)\n\n    def test_implicitly_generated_pk(self):\n        post_data = {'name': '1'}\n        response = self.client.post(reverse('admin:admin_views_implicitlygeneratedpk_add'), post_data)\n        self.assertEqual(response.status_code, 302)\n\n        post_data = {'name': '2'}\n        response = self.client.post(reverse('admin:admin_views_implicitlygeneratedpk_change', args=(1,)), post_data)\n        self.assertEqual(response.status_code, 302)\n"], "fixing_code": ["/*global SelectBox, interpolate*/\n// Handles related-objects functionality: lookup link for raw_id_fields\n// and Add Another links.\n\n(function($) {\n    'use strict';\n\n    function html_unescape(text) {\n        // Unescape a string that was escaped using django.utils.html.escape.\n        text = text.replace(/&lt;/g, '<');\n        text = text.replace(/&gt;/g, '>');\n        text = text.replace(/&quot;/g, '\"');\n        text = text.replace(/&#39;/g, \"'\");\n        text = text.replace(/&amp;/g, '&');\n        return text;\n    }\n\n    // IE doesn't accept periods or dashes in the window name, but the element IDs\n    // we use to generate popup window names may contain them, therefore we map them\n    // to allowed characters in a reversible way so that we can locate the correct\n    // element when the popup window is dismissed.\n    function id_to_windowname(text) {\n        text = text.replace(/\\./g, '__dot__');\n        text = text.replace(/\\-/g, '__dash__');\n        return text;\n    }\n\n    function windowname_to_id(text) {\n        text = text.replace(/__dot__/g, '.');\n        text = text.replace(/__dash__/g, '-');\n        return text;\n    }\n\n    function showAdminPopup(triggeringLink, name_regexp, add_popup) {\n        var name = triggeringLink.id.replace(name_regexp, '');\n        name = id_to_windowname(name);\n        var href = triggeringLink.href;\n        if (add_popup) {\n            if (href.indexOf('?') === -1) {\n                href += '?_popup=1';\n            } else {\n                href += '&_popup=1';\n            }\n        }\n        var win = window.open(href, name, 'height=500,width=800,resizable=yes,scrollbars=yes');\n        win.focus();\n        return false;\n    }\n\n    function showRelatedObjectLookupPopup(triggeringLink) {\n        return showAdminPopup(triggeringLink, /^lookup_/, true);\n    }\n\n    function dismissRelatedLookupPopup(win, chosenId) {\n        var name = windowname_to_id(win.name);\n        var elem = document.getElementById(name);\n        if (elem.className.indexOf('vManyToManyRawIdAdminField') !== -1 && elem.value) {\n            elem.value += ',' + chosenId;\n        } else {\n            document.getElementById(name).value = chosenId;\n        }\n        win.close();\n    }\n\n    function showRelatedObjectPopup(triggeringLink) {\n        return showAdminPopup(triggeringLink, /^(change|add|delete)_/, false);\n    }\n\n    function updateRelatedObjectLinks(triggeringLink) {\n        var $this = django.jQuery(triggeringLink);\n        var siblings = $this.nextAll('.change-related, .delete-related');\n        if (!siblings.length) {\n            return;\n        }\n        var value = $this.val();\n        if (value) {\n            siblings.each(function() {\n                var elm = django.jQuery(this);\n                elm.attr('href', elm.attr('data-href-template').replace('__fk__', value));\n            });\n        } else {\n            siblings.removeAttr('href');\n        }\n    }\n\n    function dismissAddRelatedObjectPopup(win, newId, newRepr) {\n        // newId and newRepr are expected to have previously been escaped by\n        // django.utils.html.escape.\n        newId = html_unescape(newId);\n        newRepr = html_unescape(newRepr);\n        var name = windowname_to_id(win.name);\n        var elem = document.getElementById(name);\n        if (elem) {\n            var elemName = elem.nodeName.toUpperCase();\n            if (elemName === 'SELECT') {\n                elem.options[elem.options.length] = new Option(newRepr, newId, true, true);\n            } else if (elemName === 'INPUT') {\n                if (elem.className.indexOf('vManyToManyRawIdAdminField') !== -1 && elem.value) {\n                    elem.value += ',' + newId;\n                } else {\n                    elem.value = newId;\n                }\n            }\n            // Trigger a change event to update related links if required.\n            django.jQuery(elem).trigger('change');\n        } else {\n            var toId = name + \"_to\";\n            var o = new Option(newRepr, newId);\n            SelectBox.add_to_cache(toId, o);\n            SelectBox.redisplay(toId);\n        }\n        win.close();\n    }\n\n    function dismissChangeRelatedObjectPopup(win, objId, newRepr, newId) {\n        objId = html_unescape(objId);\n        newRepr = html_unescape(newRepr);\n        var id = windowname_to_id(win.name).replace(/^edit_/, '');\n        var selectsSelector = interpolate('#%s, #%s_from, #%s_to', [id, id, id]);\n        var selects = django.jQuery(selectsSelector);\n        selects.find('option').each(function() {\n            if (this.value === objId) {\n                this.textContent = newRepr;\n                this.value = newId;\n            }\n        });\n        win.close();\n    }\n\n    function dismissDeleteRelatedObjectPopup(win, objId) {\n        objId = html_unescape(objId);\n        var id = windowname_to_id(win.name).replace(/^delete_/, '');\n        var selectsSelector = interpolate('#%s, #%s_from, #%s_to', [id, id, id]);\n        var selects = django.jQuery(selectsSelector);\n        selects.find('option').each(function() {\n            if (this.value === objId) {\n                django.jQuery(this).remove();\n            }\n        }).trigger('change');\n        win.close();\n    }\n\n    // Global for testing purposes\n    window.html_unescape = html_unescape;\n    window.id_to_windowname = id_to_windowname;\n    window.windowname_to_id = windowname_to_id;\n\n    window.showRelatedObjectLookupPopup = showRelatedObjectLookupPopup;\n    window.dismissRelatedLookupPopup = dismissRelatedLookupPopup;\n    window.showRelatedObjectPopup = showRelatedObjectPopup;\n    window.updateRelatedObjectLinks = updateRelatedObjectLinks;\n    window.dismissAddRelatedObjectPopup = dismissAddRelatedObjectPopup;\n    window.dismissChangeRelatedObjectPopup = dismissChangeRelatedObjectPopup;\n    window.dismissDeleteRelatedObjectPopup = dismissDeleteRelatedObjectPopup;\n\n    // Kept for backward compatibility\n    window.showAddAnotherPopup = showRelatedObjectPopup;\n    window.dismissAddAnotherPopup = dismissAddRelatedObjectPopup;\n\n    $(document).ready(function() {\n        $('body').on('click', '.related-widget-wrapper-link', function(e) {\n            e.preventDefault();\n            if (this.href) {\n                var event = $.Event('django:show-related', {href: this.href});\n                $(this).trigger(event);\n                if (!event.isDefaultPrevented()) {\n                    showRelatedObjectPopup(this);\n                }\n            }\n        });\n        $('body').on('change', '.related-widget-wrapper select', function(e) {\n            var event = $.Event('django:update-related');\n            $(this).trigger(event);\n            if (!event.isDefaultPrevented()) {\n                updateRelatedObjectLinks(this);\n            }\n        });\n        $('.related-widget-wrapper select').trigger('change');\n        $('.related-lookup').click(function(e) {\n            e.preventDefault();\n            var event = $.Event('django:lookup-related');\n            $(this).trigger(event);\n            if (!event.isDefaultPrevented()) {\n                showRelatedObjectLookupPopup(this);\n            }\n        });\n    });\n\n})(django.jQuery);\n", "from __future__ import unicode_literals\n\nimport re\nimport sys\nimport types\n\nfrom django.conf import settings\nfrom django.core.urlresolvers import Resolver404, resolve\nfrom django.http import HttpResponse, HttpResponseNotFound\nfrom django.template import Context, Engine, TemplateDoesNotExist\nfrom django.template.defaultfilters import force_escape, pprint\nfrom django.utils import lru_cache, six, timezone\nfrom django.utils.datastructures import MultiValueDict\nfrom django.utils.encoding import force_bytes, smart_text\nfrom django.utils.module_loading import import_string\nfrom django.utils.translation import ugettext as _\n\n# Minimal Django templates engine to render the error templates\n# regardless of the project's TEMPLATES setting.\nDEBUG_ENGINE = Engine(debug=True)\n\nHIDDEN_SETTINGS = re.compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE')\n\nCLEANSED_SUBSTITUTE = '********************'\n\n\nclass CallableSettingWrapper(object):\n    \"\"\" Object to wrap callable appearing in settings\n\n    * Not to call in the debug page (#21345).\n    * Not to break the debug page if the callable forbidding to set attributes (#23070).\n    \"\"\"\n    def __init__(self, callable_setting):\n        self._wrapped = callable_setting\n\n    def __repr__(self):\n        return repr(self._wrapped)\n\n\ndef cleanse_setting(key, value):\n    \"\"\"Cleanse an individual setting key/value of sensitive content.\n\n    If the value is a dictionary, recursively cleanse the keys in\n    that dictionary.\n    \"\"\"\n    try:\n        if HIDDEN_SETTINGS.search(key):\n            cleansed = CLEANSED_SUBSTITUTE\n        else:\n            if isinstance(value, dict):\n                cleansed = {k: cleanse_setting(k, v) for k, v in value.items()}\n            else:\n                cleansed = value\n    except TypeError:\n        # If the key isn't regex-able, just return as-is.\n        cleansed = value\n\n    if callable(cleansed):\n        # For fixing #21345 and #23070\n        cleansed = CallableSettingWrapper(cleansed)\n\n    return cleansed\n\n\ndef get_safe_settings():\n    \"Returns a dictionary of the settings module, with sensitive settings blurred out.\"\n    settings_dict = {}\n    for k in dir(settings):\n        if k.isupper():\n            settings_dict[k] = cleanse_setting(k, getattr(settings, k))\n    return settings_dict\n\n\ndef technical_500_response(request, exc_type, exc_value, tb, status_code=500):\n    \"\"\"\n    Create a technical server error response. The last three arguments are\n    the values returned from sys.exc_info() and friends.\n    \"\"\"\n    reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n    if request.is_ajax():\n        text = reporter.get_traceback_text()\n        return HttpResponse(text, status=status_code, content_type='text/plain')\n    else:\n        html = reporter.get_traceback_html()\n        return HttpResponse(html, status=status_code, content_type='text/html')\n\n\n@lru_cache.lru_cache()\ndef get_default_exception_reporter_filter():\n    # Instantiate the default filter for the first time and cache it.\n    return import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)()\n\n\ndef get_exception_reporter_filter(request):\n    default_filter = get_default_exception_reporter_filter()\n    return getattr(request, 'exception_reporter_filter', default_filter)\n\n\nclass ExceptionReporterFilter(object):\n    \"\"\"\n    Base for all exception reporter filter classes. All overridable hooks\n    contain lenient default behaviors.\n    \"\"\"\n\n    def get_post_parameters(self, request):\n        if request is None:\n            return {}\n        else:\n            return request.POST\n\n    def get_traceback_frame_variables(self, request, tb_frame):\n        return list(tb_frame.f_locals.items())\n\n\nclass SafeExceptionReporterFilter(ExceptionReporterFilter):\n    \"\"\"\n    Use annotations made by the sensitive_post_parameters and\n    sensitive_variables decorators to filter out sensitive information.\n    \"\"\"\n\n    def is_active(self, request):\n        \"\"\"\n        This filter is to add safety in production environments (i.e. DEBUG\n        is False). If DEBUG is True then your site is not safe anyway.\n        This hook is provided as a convenience to easily activate or\n        deactivate the filter on a per request basis.\n        \"\"\"\n        return settings.DEBUG is False\n\n    def get_cleansed_multivaluedict(self, request, multivaluedict):\n        \"\"\"\n        Replaces the keys in a MultiValueDict marked as sensitive with stars.\n        This mitigates leaking sensitive POST parameters if something like\n        request.POST['nonexistent_key'] throws an exception (#21098).\n        \"\"\"\n        sensitive_post_parameters = getattr(request, 'sensitive_post_parameters', [])\n        if self.is_active(request) and sensitive_post_parameters:\n            multivaluedict = multivaluedict.copy()\n            for param in sensitive_post_parameters:\n                if param in multivaluedict:\n                    multivaluedict[param] = CLEANSED_SUBSTITUTE\n        return multivaluedict\n\n    def get_post_parameters(self, request):\n        \"\"\"\n        Replaces the values of POST parameters marked as sensitive with\n        stars (*********).\n        \"\"\"\n        if request is None:\n            return {}\n        else:\n            sensitive_post_parameters = getattr(request, 'sensitive_post_parameters', [])\n            if self.is_active(request) and sensitive_post_parameters:\n                cleansed = request.POST.copy()\n                if sensitive_post_parameters == '__ALL__':\n                    # Cleanse all parameters.\n                    for k, v in cleansed.items():\n                        cleansed[k] = CLEANSED_SUBSTITUTE\n                    return cleansed\n                else:\n                    # Cleanse only the specified parameters.\n                    for param in sensitive_post_parameters:\n                        if param in cleansed:\n                            cleansed[param] = CLEANSED_SUBSTITUTE\n                    return cleansed\n            else:\n                return request.POST\n\n    def cleanse_special_types(self, request, value):\n        try:\n            # If value is lazy or a complex object of another kind, this check\n            # might raise an exception. isinstance checks that lazy\n            # MultiValueDicts will have a return value.\n            is_multivalue_dict = isinstance(value, MultiValueDict)\n        except Exception as e:\n            return '{!r} while evaluating {!r}'.format(e, value)\n\n        if is_multivalue_dict:\n            # Cleanse MultiValueDicts (request.POST is the one we usually care about)\n            value = self.get_cleansed_multivaluedict(request, value)\n        return value\n\n    def get_traceback_frame_variables(self, request, tb_frame):\n        \"\"\"\n        Replaces the values of variables marked as sensitive with\n        stars (*********).\n        \"\"\"\n        # Loop through the frame's callers to see if the sensitive_variables\n        # decorator was used.\n        current_frame = tb_frame.f_back\n        sensitive_variables = None\n        while current_frame is not None:\n            if (current_frame.f_code.co_name == 'sensitive_variables_wrapper'\n                    and 'sensitive_variables_wrapper' in current_frame.f_locals):\n                # The sensitive_variables decorator was used, so we take note\n                # of the sensitive variables' names.\n                wrapper = current_frame.f_locals['sensitive_variables_wrapper']\n                sensitive_variables = getattr(wrapper, 'sensitive_variables', None)\n                break\n            current_frame = current_frame.f_back\n\n        cleansed = {}\n        if self.is_active(request) and sensitive_variables:\n            if sensitive_variables == '__ALL__':\n                # Cleanse all variables\n                for name, value in tb_frame.f_locals.items():\n                    cleansed[name] = CLEANSED_SUBSTITUTE\n            else:\n                # Cleanse specified variables\n                for name, value in tb_frame.f_locals.items():\n                    if name in sensitive_variables:\n                        value = CLEANSED_SUBSTITUTE\n                    else:\n                        value = self.cleanse_special_types(request, value)\n                    cleansed[name] = value\n        else:\n            # Potentially cleanse the request and any MultiValueDicts if they\n            # are one of the frame variables.\n            for name, value in tb_frame.f_locals.items():\n                cleansed[name] = self.cleanse_special_types(request, value)\n\n        if (tb_frame.f_code.co_name == 'sensitive_variables_wrapper'\n                and 'sensitive_variables_wrapper' in tb_frame.f_locals):\n            # For good measure, obfuscate the decorated function's arguments in\n            # the sensitive_variables decorator's frame, in case the variables\n            # associated with those arguments were meant to be obfuscated from\n            # the decorated function's frame.\n            cleansed['func_args'] = CLEANSED_SUBSTITUTE\n            cleansed['func_kwargs'] = CLEANSED_SUBSTITUTE\n\n        return cleansed.items()\n\n\nclass ExceptionReporter(object):\n    \"\"\"\n    A class to organize and coordinate reporting on exceptions.\n    \"\"\"\n    def __init__(self, request, exc_type, exc_value, tb, is_email=False):\n        self.request = request\n        self.filter = get_exception_reporter_filter(self.request)\n        self.exc_type = exc_type\n        self.exc_value = exc_value\n        self.tb = tb\n        self.is_email = is_email\n\n        self.template_info = getattr(self.exc_value, 'template_debug', None)\n        self.template_does_not_exist = False\n        self.postmortem = None\n\n        # Handle deprecated string exceptions\n        if isinstance(self.exc_type, six.string_types):\n            self.exc_value = Exception('Deprecated String Exception: %r' % self.exc_type)\n            self.exc_type = type(self.exc_value)\n\n    def get_traceback_data(self):\n        \"\"\"Return a dictionary containing traceback information.\"\"\"\n        if self.exc_type and issubclass(self.exc_type, TemplateDoesNotExist):\n            self.template_does_not_exist = True\n            self.postmortem = self.exc_value.chain or [self.exc_value]\n\n        frames = self.get_traceback_frames()\n        for i, frame in enumerate(frames):\n            if 'vars' in frame:\n                frame_vars = []\n                for k, v in frame['vars']:\n                    v = pprint(v)\n                    # The force_escape filter assume unicode, make sure that works\n                    if isinstance(v, six.binary_type):\n                        v = v.decode('utf-8', 'replace')  # don't choke on non-utf-8 input\n                    # Trim large blobs of data\n                    if len(v) > 4096:\n                        v = '%s... <trimmed %d bytes string>' % (v[0:4096], len(v))\n                    frame_vars.append((k, force_escape(v)))\n                frame['vars'] = frame_vars\n            frames[i] = frame\n\n        unicode_hint = ''\n        if self.exc_type and issubclass(self.exc_type, UnicodeError):\n            start = getattr(self.exc_value, 'start', None)\n            end = getattr(self.exc_value, 'end', None)\n            if start is not None and end is not None:\n                unicode_str = self.exc_value.args[1]\n                unicode_hint = smart_text(\n                    unicode_str[max(start - 5, 0):min(end + 5, len(unicode_str))],\n                    'ascii', errors='replace'\n                )\n        from django import get_version\n        c = {\n            'is_email': self.is_email,\n            'unicode_hint': unicode_hint,\n            'frames': frames,\n            'request': self.request,\n            'filtered_POST': self.filter.get_post_parameters(self.request),\n            'settings': get_safe_settings(),\n            'sys_executable': sys.executable,\n            'sys_version_info': '%d.%d.%d' % sys.version_info[0:3],\n            'server_time': timezone.now(),\n            'django_version_info': get_version(),\n            'sys_path': sys.path,\n            'template_info': self.template_info,\n            'template_does_not_exist': self.template_does_not_exist,\n            'postmortem': self.postmortem,\n        }\n        # Check whether exception info is available\n        if self.exc_type:\n            c['exception_type'] = self.exc_type.__name__\n        if self.exc_value:\n            c['exception_value'] = smart_text(self.exc_value, errors='replace')\n        if frames:\n            c['lastframe'] = frames[-1]\n        return c\n\n    def get_traceback_html(self):\n        \"Return HTML version of debug 500 HTTP error page.\"\n        t = DEBUG_ENGINE.from_string(TECHNICAL_500_TEMPLATE)\n        c = Context(self.get_traceback_data(), use_l10n=False)\n        return t.render(c)\n\n    def get_traceback_text(self):\n        \"Return plain text version of debug 500 HTTP error page.\"\n        t = DEBUG_ENGINE.from_string(TECHNICAL_500_TEXT_TEMPLATE)\n        c = Context(self.get_traceback_data(), autoescape=False, use_l10n=False)\n        return t.render(c)\n\n    def _get_lines_from_file(self, filename, lineno, context_lines, loader=None, module_name=None):\n        \"\"\"\n        Returns context_lines before and after lineno from file.\n        Returns (pre_context_lineno, pre_context, context_line, post_context).\n        \"\"\"\n        source = None\n        if loader is not None and hasattr(loader, \"get_source\"):\n            try:\n                source = loader.get_source(module_name)\n            except ImportError:\n                pass\n            if source is not None:\n                source = source.splitlines()\n        if source is None:\n            try:\n                with open(filename, 'rb') as fp:\n                    source = fp.read().splitlines()\n            except (OSError, IOError):\n                pass\n        if source is None:\n            return None, [], None, []\n\n        # If we just read the source from a file, or if the loader did not\n        # apply tokenize.detect_encoding to decode the source into a Unicode\n        # string, then we should do that ourselves.\n        if isinstance(source[0], six.binary_type):\n            encoding = 'ascii'\n            for line in source[:2]:\n                # File coding may be specified. Match pattern from PEP-263\n                # (http://www.python.org/dev/peps/pep-0263/)\n                match = re.search(br'coding[:=]\\s*([-\\w.]+)', line)\n                if match:\n                    encoding = match.group(1).decode('ascii')\n                    break\n            source = [six.text_type(sline, encoding, 'replace') for sline in source]\n\n        lower_bound = max(0, lineno - context_lines)\n        upper_bound = lineno + context_lines\n\n        pre_context = source[lower_bound:lineno]\n        context_line = source[lineno]\n        post_context = source[lineno + 1:upper_bound]\n\n        return lower_bound, pre_context, context_line, post_context\n\n    def get_traceback_frames(self):\n        def explicit_or_implicit_cause(exc_value):\n            explicit = getattr(exc_value, '__cause__', None)\n            implicit = getattr(exc_value, '__context__', None)\n            return explicit or implicit\n\n        # Get the exception and all its causes\n        exceptions = []\n        exc_value = self.exc_value\n        while exc_value:\n            exceptions.append(exc_value)\n            exc_value = explicit_or_implicit_cause(exc_value)\n\n        frames = []\n        # No exceptions were supplied to ExceptionReporter\n        if not exceptions:\n            return frames\n\n        # In case there's just one exception (always in Python 2,\n        # sometimes in Python 3), take the traceback from self.tb (Python 2\n        # doesn't have a __traceback__ attribute on Exception)\n        exc_value = exceptions.pop()\n        tb = self.tb if six.PY2 or not exceptions else exc_value.__traceback__\n\n        while tb is not None:\n            # Support for __traceback_hide__ which is used by a few libraries\n            # to hide internal frames.\n            if tb.tb_frame.f_locals.get('__traceback_hide__'):\n                tb = tb.tb_next\n                continue\n            filename = tb.tb_frame.f_code.co_filename\n            function = tb.tb_frame.f_code.co_name\n            lineno = tb.tb_lineno - 1\n            loader = tb.tb_frame.f_globals.get('__loader__')\n            module_name = tb.tb_frame.f_globals.get('__name__') or ''\n            pre_context_lineno, pre_context, context_line, post_context = self._get_lines_from_file(\n                filename, lineno, 7, loader, module_name,\n            )\n            if pre_context_lineno is not None:\n                frames.append({\n                    'exc_cause': explicit_or_implicit_cause(exc_value),\n                    'exc_cause_explicit': getattr(exc_value, '__cause__', True),\n                    'tb': tb,\n                    'type': 'django' if module_name.startswith('django.') else 'user',\n                    'filename': filename,\n                    'function': function,\n                    'lineno': lineno + 1,\n                    'vars': self.filter.get_traceback_frame_variables(self.request, tb.tb_frame),\n                    'id': id(tb),\n                    'pre_context': pre_context,\n                    'context_line': context_line,\n                    'post_context': post_context,\n                    'pre_context_lineno': pre_context_lineno + 1,\n                })\n\n            # If the traceback for current exception is consumed, try the\n            # other exception.\n            if six.PY2:\n                tb = tb.tb_next\n            elif not tb.tb_next and exceptions:\n                exc_value = exceptions.pop()\n                tb = exc_value.__traceback__\n            else:\n                tb = tb.tb_next\n\n        return frames\n\n    def format_exception(self):\n        \"\"\"\n        Return the same data as from traceback.format_exception.\n        \"\"\"\n        import traceback\n        frames = self.get_traceback_frames()\n        tb = [(f['filename'], f['lineno'], f['function'], f['context_line']) for f in frames]\n        list = ['Traceback (most recent call last):\\n']\n        list += traceback.format_list(tb)\n        list += traceback.format_exception_only(self.exc_type, self.exc_value)\n        return list\n\n\ndef technical_404_response(request, exception):\n    \"Create a technical 404 error response. The exception should be the Http404.\"\n    try:\n        error_url = exception.args[0]['path']\n    except (IndexError, TypeError, KeyError):\n        error_url = request.path_info[1:]  # Trim leading slash\n\n    try:\n        tried = exception.args[0]['tried']\n    except (IndexError, TypeError, KeyError):\n        tried = []\n    else:\n        if (not tried                           # empty URLconf\n            or (request.path == '/'\n                and len(tried) == 1             # default URLconf\n                and len(tried[0]) == 1\n                and getattr(tried[0][0], 'app_name', '') == getattr(tried[0][0], 'namespace', '') == 'admin')):\n            return default_urlconf(request)\n\n    urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n    if isinstance(urlconf, types.ModuleType):\n        urlconf = urlconf.__name__\n\n    caller = ''\n    try:\n        resolver_match = resolve(request.path)\n    except Resolver404:\n        pass\n    else:\n        obj = resolver_match.func\n\n        if hasattr(obj, '__name__'):\n            caller = obj.__name__\n        elif hasattr(obj, '__class__') and hasattr(obj.__class__, '__name__'):\n            caller = obj.__class__.__name__\n\n        if hasattr(obj, '__module__'):\n            module = obj.__module__\n            caller = '%s.%s' % (module, caller)\n\n    t = DEBUG_ENGINE.from_string(TECHNICAL_404_TEMPLATE)\n    c = Context({\n        'urlconf': urlconf,\n        'root_urlconf': settings.ROOT_URLCONF,\n        'request_path': error_url,\n        'urlpatterns': tried,\n        'reason': force_bytes(exception, errors='replace'),\n        'request': request,\n        'settings': get_safe_settings(),\n        'raising_view_name': caller,\n    })\n    return HttpResponseNotFound(t.render(c), content_type='text/html')\n\n\ndef default_urlconf(request):\n    \"Create an empty URLconf 404 error response.\"\n    t = DEBUG_ENGINE.from_string(DEFAULT_URLCONF_TEMPLATE)\n    c = Context({\n        \"title\": _(\"Welcome to Django\"),\n        \"heading\": _(\"It worked!\"),\n        \"subheading\": _(\"Congratulations on your first Django-powered page.\"),\n        \"instructions\": _(\"Of course, you haven't actually done any work yet. \"\n            \"Next, start your first app by running <code>python manage.py startapp [app_label]</code>.\"),\n        \"explanation\": _(\"You're seeing this message because you have <code>DEBUG = True</code> in your \"\n            \"Django settings file and you haven't configured any URLs. Get to work!\"),\n    })\n\n    return HttpResponse(t.render(c), content_type='text/html')\n\n#\n# Templates are embedded in the file so that we know the error handler will\n# always work even if the template loader is broken.\n#\n\nTECHNICAL_500_TEMPLATE = (\"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta name=\"robots\" content=\"NONE,NOARCHIVE\">\n  <title>{% if exception_type %}{{ exception_type }}{% else %}Report{% endif %}\"\"\"\n\"\"\"{% if request %} at {{ request.path_info|escape }}{% endif %}</title>\n  <style type=\"text/css\">\n    html * { padding:0; margin:0; }\n    body * { padding:10px 20px; }\n    body * * { padding:0; }\n    body { font:small sans-serif; }\n    body>div { border-bottom:1px solid #ddd; }\n    h1 { font-weight:normal; }\n    h2 { margin-bottom:.8em; }\n    h2 span { font-size:80%; color:#666; font-weight:normal; }\n    h3 { margin:1em 0 .5em 0; }\n    h4 { margin:0 0 .5em 0; font-weight: normal; }\n    code, pre { font-size: 100%; white-space: pre-wrap; }\n    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }\n    tbody td, tbody th { vertical-align:top; padding:2px 3px; }\n    thead th {\n      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;\n      font-weight:normal; font-size:11px; border:1px solid #ddd;\n    }\n    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }\n    table.vars { margin:5px 0 2px 40px; }\n    table.vars td, table.req td { font-family:monospace; }\n    table td.code { width:100%; }\n    table td.code pre { overflow:hidden; }\n    table.source th { color:#666; }\n    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }\n    ul.traceback { list-style-type:none; color: #222; }\n    ul.traceback li.frame { padding-bottom:1em; color:#666; }\n    ul.traceback li.user { background-color:#e0e0e0; color:#000 }\n    div.context { padding:10px 0; overflow:hidden; }\n    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }\n    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }\n    div.context ol li pre { display:inline; }\n    div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; }\n    div.context ol.context-line li span { position:absolute; right:32px; }\n    .user div.context ol.context-line li { background-color:#bbb; color:#000; }\n    .user div.context ol li { color:#666; }\n    div.commands { margin-left: 40px; }\n    div.commands a { color:#555; text-decoration:none; }\n    .user div.commands a { color: black; }\n    #summary { background: #ffc; }\n    #summary h2 { font-weight: normal; color: #666; }\n    #explanation { background:#eee; }\n    #template, #template-not-exist { background:#f6f6f6; }\n    #template-not-exist ul { margin: 0 0 10px 20px; }\n    #template-not-exist .postmortem-section { margin-bottom: 3px; }\n    #unicode-hint { background:#eee; }\n    #traceback { background:#eee; }\n    #requestinfo { background:#f6f6f6; padding-left:120px; }\n    #summary table { border:none; background:transparent; }\n    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }\n    #requestinfo h3 { margin-bottom:-1em; }\n    .error { background: #ffc; }\n    .specific { color:#cc3300; font-weight:bold; }\n    h2 span.commands { font-size:.7em;}\n    span.commands a:link {color:#5E5694;}\n    pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; }\n    .append-bottom { margin-bottom: 10px; }\n  </style>\n  {% if not is_email %}\n  <script type=\"text/javascript\">\n  //<!--\n    function getElementsByClassName(oElm, strTagName, strClassName){\n        // Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com\n        var arrElements = (strTagName == \"*\" && document.all)? document.all :\n        oElm.getElementsByTagName(strTagName);\n        var arrReturnElements = new Array();\n        strClassName = strClassName.replace(/\\-/g, \"\\\\-\");\n        var oRegExp = new RegExp(\"(^|\\\\s)\" + strClassName + \"(\\\\s|$)\");\n        var oElement;\n        for(var i=0; i<arrElements.length; i++){\n            oElement = arrElements[i];\n            if(oRegExp.test(oElement.className)){\n                arrReturnElements.push(oElement);\n            }\n        }\n        return (arrReturnElements)\n    }\n    function hideAll(elems) {\n      for (var e = 0; e < elems.length; e++) {\n        elems[e].style.display = 'none';\n      }\n    }\n    window.onload = function() {\n      hideAll(getElementsByClassName(document, 'table', 'vars'));\n      hideAll(getElementsByClassName(document, 'ol', 'pre-context'));\n      hideAll(getElementsByClassName(document, 'ol', 'post-context'));\n      hideAll(getElementsByClassName(document, 'div', 'pastebin'));\n    }\n    function toggle() {\n      for (var i = 0; i < arguments.length; i++) {\n        var e = document.getElementById(arguments[i]);\n        if (e) {\n          e.style.display = e.style.display == 'none' ? 'block': 'none';\n        }\n      }\n      return false;\n    }\n    function varToggle(link, id) {\n      toggle('v' + id);\n      var s = link.getElementsByTagName('span')[0];\n      var uarr = String.fromCharCode(0x25b6);\n      var darr = String.fromCharCode(0x25bc);\n      s.textContent = s.textContent == uarr ? darr : uarr;\n      return false;\n    }\n    function switchPastebinFriendly(link) {\n      s1 = \"Switch to copy-and-paste view\";\n      s2 = \"Switch back to interactive view\";\n      link.textContent = link.textContent.trim() == s1 ? s2: s1;\n      toggle('browserTraceback', 'pastebinTraceback');\n      return false;\n    }\n    //-->\n  </script>\n  {% endif %}\n</head>\n<body>\n<div id=\"summary\">\n  <h1>{% if exception_type %}{{ exception_type }}{% else %}Report{% endif %}\"\"\"\n  \"\"\"{% if request %} at {{ request.path_info|escape }}{% endif %}</h1>\n  <pre class=\"exception_value\">\"\"\"\n \"\"\"{% if exception_value %}{{ exception_value|force_escape }}{% else %}No exception message supplied{% endif %}\"\"\"\n\"\"\"</pre>\n  <table class=\"meta\">\n{% if request %}\n    <tr>\n      <th>Request Method:</th>\n      <td>{{ request.META.REQUEST_METHOD }}</td>\n    </tr>\n    <tr>\n      <th>Request URL:</th>\n      <td>{{ request.get_raw_uri|escape }}</td>\n    </tr>\n{% endif %}\n    <tr>\n      <th>Django Version:</th>\n      <td>{{ django_version_info }}</td>\n    </tr>\n{% if exception_type %}\n    <tr>\n      <th>Exception Type:</th>\n      <td>{{ exception_type }}</td>\n    </tr>\n{% endif %}\n{% if exception_type and exception_value %}\n    <tr>\n      <th>Exception Value:</th>\n      <td><pre>{{ exception_value|force_escape }}</pre></td>\n    </tr>\n{% endif %}\n{% if lastframe %}\n    <tr>\n      <th>Exception Location:</th>\n      <td>{{ lastframe.filename|escape }} in {{ lastframe.function|escape }}, line {{ lastframe.lineno }}</td>\n    </tr>\n{% endif %}\n    <tr>\n      <th>Python Executable:</th>\n      <td>{{ sys_executable|escape }}</td>\n    </tr>\n    <tr>\n      <th>Python Version:</th>\n      <td>{{ sys_version_info }}</td>\n    </tr>\n    <tr>\n      <th>Python Path:</th>\n      <td><pre>{{ sys_path|pprint }}</pre></td>\n    </tr>\n    <tr>\n      <th>Server time:</th>\n      <td>{{server_time|date:\"r\"}}</td>\n    </tr>\n  </table>\n</div>\n{% if unicode_hint %}\n<div id=\"unicode-hint\">\n    <h2>Unicode error hint</h2>\n    <p>The string that could not be encoded/decoded was: <strong>{{ unicode_hint|force_escape }}</strong></p>\n</div>\n{% endif %}\n{% if template_does_not_exist %}\n<div id=\"template-not-exist\">\n    <h2>Template-loader postmortem</h2>\n    {% if postmortem %}\n        <p class=\"append-bottom\">Django tried loading these templates, in this order:</p>\n        {% for entry in postmortem %}\n            <p class=\"postmortem-section\">Using engine <code>{{ entry.backend.name }}</code>:</p>\n            <ul>\n                {% if entry.tried %}\n                    {% for attempt in entry.tried %}\n                        <li><code>{{ attempt.0.loader_name }}</code>: {{ attempt.0.name }} ({{ attempt.1 }})</li>\n                    {% endfor %}\n                    </ul>\n                {% else %}\n                    <li>This engine did not provide a list of tried templates.</li>\n                {% endif %}\n            </ul>\n        {% endfor %}\n    {% else %}\n        <p>No templates were found because your 'TEMPLATES' setting is not configured.</p>\n    {% endif %}\n</div>\n{% endif %}\n{% if template_info %}\n<div id=\"template\">\n   <h2>Error during template rendering</h2>\n   <p>In template <code>{{ template_info.name }}</code>, error at line <strong>{{ template_info.line }}</strong></p>\n   <h3>{{ template_info.message }}</h3>\n   <table class=\"source{% if template_info.top %} cut-top{% endif %}\n      {% if template_info.bottom != template_info.total %} cut-bottom{% endif %}\">\n   {% for source_line in template_info.source_lines %}\n   {% if source_line.0 == template_info.line %}\n   <tr class=\"error\"><th>{{ source_line.0 }}</th>\n     <td>{{ template_info.before }}\"\"\"\n      \"\"\"<span class=\"specific\">{{ template_info.during }}</span>\"\"\"\n      \"\"\"{{ template_info.after }}</td>\n   </tr>\n   {% else %}\n      <tr><th>{{ source_line.0 }}</th>\n      <td>{{ source_line.1 }}</td></tr>\n   {% endif %}\n   {% endfor %}\n   </table>\n</div>\n{% endif %}\n{% if frames %}\n<div id=\"traceback\">\n  <h2>Traceback <span class=\"commands\">{% if not is_email %}<a href=\"#\" onclick=\"return switchPastebinFriendly(this);\">\n    Switch to copy-and-paste view</a></span>{% endif %}\n  </h2>\n  {% autoescape off %}\n  <div id=\"browserTraceback\">\n    <ul class=\"traceback\">\n      {% for frame in frames %}\n        {% ifchanged frame.exc_cause %}{% if frame.exc_cause %}\n          <li><h3>\n          {% if frame.exc_cause_explicit %}\n            The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:\n          {% else %}\n            During handling of the above exception ({{ frame.exc_cause }}), another exception occurred:\n          {% endif %}\n        </h3></li>\n        {% endif %}{% endifchanged %}\n        <li class=\"frame {{ frame.type }}\">\n          <code>{{ frame.filename|escape }}</code> in <code>{{ frame.function|escape }}</code>\n\n          {% if frame.context_line %}\n            <div class=\"context\" id=\"c{{ frame.id }}\">\n              {% if frame.pre_context and not is_email %}\n                <ol start=\"{{ frame.pre_context_lineno }}\" class=\"pre-context\" id=\"pre{{ frame.id }}\">\n                {% for line in frame.pre_context %}\n                  <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>{{ line|escape }}</pre></li>\n                {% endfor %}\n                </ol>\n              {% endif %}\n              <ol start=\"{{ frame.lineno }}\" class=\"context-line\">\n                <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>\n\"\"\"            \"\"\"{{ frame.context_line|escape }}</pre>{% if not is_email %} <span>...</span>{% endif %}</li></ol>\n              {% if frame.post_context and not is_email  %}\n                <ol start='{{ frame.lineno|add:\"1\" }}' class=\"post-context\" id=\"post{{ frame.id }}\">\n                  {% for line in frame.post_context %}\n                  <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>{{ line|escape }}</pre></li>\n                  {% endfor %}\n              </ol>\n              {% endif %}\n            </div>\n          {% endif %}\n\n          {% if frame.vars %}\n            <div class=\"commands\">\n                {% if is_email %}\n                    <h2>Local Vars</h2>\n                {% else %}\n                    <a href=\"#\" onclick=\"return varToggle(this, '{{ frame.id }}')\"><span>&#x25b6;</span> Local vars</a>\n                {% endif %}\n            </div>\n            <table class=\"vars\" id=\"v{{ frame.id }}\">\n              <thead>\n                <tr>\n                  <th>Variable</th>\n                  <th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                {% for var in frame.vars|dictsort:\"0\" %}\n                  <tr>\n                    <td>{{ var.0|force_escape }}</td>\n                    <td class=\"code\"><pre>{{ var.1 }}</pre></td>\n                  </tr>\n                {% endfor %}\n              </tbody>\n            </table>\n          {% endif %}\n        </li>\n      {% endfor %}\n    </ul>\n  </div>\n  {% endautoescape %}\n  <form action=\"http://dpaste.com/\" name=\"pasteform\" id=\"pasteform\" method=\"post\">\n{% if not is_email %}\n  <div id=\"pastebinTraceback\" class=\"pastebin\">\n    <input type=\"hidden\" name=\"language\" value=\"PythonConsole\">\n    <input type=\"hidden\" name=\"title\"\n      value=\"{{ exception_type|escape }}{% if request %} at {{ request.path_info|escape }}{% endif %}\">\n    <input type=\"hidden\" name=\"source\" value=\"Django Dpaste Agent\">\n    <input type=\"hidden\" name=\"poster\" value=\"Django\">\n    <textarea name=\"content\" id=\"traceback_area\" cols=\"140\" rows=\"25\">\nEnvironment:\n\n{% if request %}\nRequest Method: {{ request.META.REQUEST_METHOD }}\nRequest URL: {{ request.get_raw_uri|escape }}\n{% endif %}\nDjango Version: {{ django_version_info }}\nPython Version: {{ sys_version_info }}\nInstalled Applications:\n{{ settings.INSTALLED_APPS|pprint }}\nInstalled Middleware:\n{{ settings.MIDDLEWARE_CLASSES|pprint }}\n\n{% if template_does_not_exist %}Template loader postmortem\n{% if postmortem %}Django tried loading these templates, in this order:\n{% for entry in postmortem %}\nUsing engine {{ entry.backend.name }}:\n{% if entry.tried %}{% for attempt in entry.tried %}\"\"\"\n\"\"\"    * {{ attempt.0.loader_name }}: {{ attempt.0.name }} ({{ attempt.1 }})\n{% endfor %}{% else %}    This engine did not provide a list of tried templates.\n{% endif %}{% endfor %}\n{% else %}No templates were found because your 'TEMPLATES' setting is not configured.\n{% endif %}{% endif %}{% if template_info %}\nTemplate error:\nIn template {{ template_info.name }}, error at line {{ template_info.line }}\n   {{ template_info.message }}\"\"\"\n\"{% for source_line in template_info.source_lines %}\"\n\"{% if source_line.0 == template_info.line %}\"\n\"   {{ source_line.0 }} : {{ template_info.before }} {{ template_info.during }} {{ template_info.after }}\"\n\"{% else %}\"\n\"   {{ source_line.0 }} : {{ source_line.1 }}\"\n\"\"\"{% endif %}{% endfor %}{% endif %}\n\nTraceback:{% for frame in frames %}\n{% ifchanged frame.exc_cause %}{% if frame.exc_cause %}{% if frame.exc_cause_explicit %}\nThe above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:\n{% else %}\nDuring handling of the above exception ({{ frame.exc_cause }}), another exception occurred:\n{% endif %}{% endif %}{% endifchanged %}\nFile \"{{ frame.filename|escape }}\" in {{ frame.function|escape }}\n{% if frame.context_line %}  {{ frame.lineno }}. {{ frame.context_line|escape }}{% endif %}{% endfor %}\n\nException Type: {{ exception_type|escape }}{% if request %} at {{ request.path_info|escape }}{% endif %}\nException Value: {{ exception_value|force_escape }}\n</textarea>\n  <br><br>\n  <input type=\"submit\" value=\"Share this traceback on a public website\">\n  </div>\n</form>\n</div>\n{% endif %}\n{% endif %}\n\n<div id=\"requestinfo\">\n  <h2>Request information</h2>\n\n{% if request %}\n  <h3 id=\"get-info\">GET</h3>\n  {% if request.GET %}\n    <table class=\"req\">\n      <thead>\n        <tr>\n          <th>Variable</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for var in request.GET.items %}\n          <tr>\n            <td>{{ var.0 }}</td>\n            <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  {% else %}\n    <p>No GET data</p>\n  {% endif %}\n\n  <h3 id=\"post-info\">POST</h3>\n  {% if filtered_POST %}\n    <table class=\"req\">\n      <thead>\n        <tr>\n          <th>Variable</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for var in filtered_POST.items %}\n          <tr>\n            <td>{{ var.0 }}</td>\n            <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  {% else %}\n    <p>No POST data</p>\n  {% endif %}\n  <h3 id=\"files-info\">FILES</h3>\n  {% if request.FILES %}\n    <table class=\"req\">\n        <thead>\n            <tr>\n                <th>Variable</th>\n                <th>Value</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for var in request.FILES.items %}\n                <tr>\n                    <td>{{ var.0 }}</td>\n                    <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n  {% else %}\n    <p>No FILES data</p>\n  {% endif %}\n\n\n  <h3 id=\"cookie-info\">COOKIES</h3>\n  {% if request.COOKIES %}\n    <table class=\"req\">\n      <thead>\n        <tr>\n          <th>Variable</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for var in request.COOKIES.items %}\n          <tr>\n            <td>{{ var.0 }}</td>\n            <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  {% else %}\n    <p>No cookie data</p>\n  {% endif %}\n\n  <h3 id=\"meta-info\">META</h3>\n  <table class=\"req\">\n    <thead>\n      <tr>\n        <th>Variable</th>\n        <th>Value</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for var in request.META.items|dictsort:\"0\" %}\n        <tr>\n          <td>{{ var.0 }}</td>\n          <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n        </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n{% else %}\n  <p>Request data not supplied</p>\n{% endif %}\n\n  <h3 id=\"settings-info\">Settings</h3>\n  <h4>Using settings module <code>{{ settings.SETTINGS_MODULE }}</code></h4>\n  <table class=\"req\">\n    <thead>\n      <tr>\n        <th>Setting</th>\n        <th>Value</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for var in settings.items|dictsort:\"0\" %}\n        <tr>\n          <td>{{ var.0 }}</td>\n          <td class=\"code\"><pre>{{ var.1|pprint }}</pre></td>\n        </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n\n</div>\n{% if not is_email %}\n  <div id=\"explanation\">\n    <p>\n      You're seeing this error because you have <code>DEBUG = True</code> in your\n      Django settings file. Change that to <code>False</code>, and Django will\n      display a standard page generated by the handler for this status code.\n    </p>\n  </div>\n{% endif %}\n</body>\n</html>\n\"\"\")\n\nTECHNICAL_500_TEXT_TEMPLATE = (\"\"\"\"\"\"\n\"\"\"{% firstof exception_type 'Report' %}{% if request %} at {{ request.path_info }}{% endif %}\n{% firstof exception_value 'No exception message supplied' %}\n{% if request %}\nRequest Method: {{ request.META.REQUEST_METHOD }}\nRequest URL: {{ request.get_raw_uri }}{% endif %}\nDjango Version: {{ django_version_info }}\nPython Executable: {{ sys_executable }}\nPython Version: {{ sys_version_info }}\nPython Path: {{ sys_path }}\nServer time: {{server_time|date:\"r\"}}\nInstalled Applications:\n{{ settings.INSTALLED_APPS|pprint }}\nInstalled Middleware:\n{{ settings.MIDDLEWARE_CLASSES|pprint }}\n{% if template_does_not_exist %}Template loader postmortem\n{% if postmortem %}Django tried loading these templates, in this order:\n{% for entry in postmortem %}\nUsing engine {{ entry.backend.name }}:\n{% if entry.tried %}{% for attempt in entry.tried %}\"\"\"\n\"\"\"    * {{ attempt.0.loader_name }}: {{ attempt.0.name }} ({{ attempt.1 }})\n{% endfor %}{% else %}    This engine did not provide a list of tried templates.\n{% endif %}{% endfor %}\n{% else %}No templates were found because your 'TEMPLATES' setting is not configured.\n{% endif %}\n{% endif %}{% if template_info %}\nTemplate error:\nIn template {{ template_info.name }}, error at line {{ template_info.line }}\n   {{ template_info.message }}\n{% for source_line in template_info.source_lines %}\"\"\"\n\"{% if source_line.0 == template_info.line %}\"\n\"   {{ source_line.0 }} : {{ template_info.before }} {{ template_info.during }} {{ template_info.after }}\"\n\"{% else %}\"\n\"   {{ source_line.0 }} : {{ source_line.1 }}\"\n\"\"\"{% endif %}{% endfor %}{% endif %}{% if frames %}\n\nTraceback:\"\"\"\n\"{% for frame in frames %}\"\n\"{% ifchanged frame.exc_cause %}\"\n\"  {% if frame.exc_cause %}\" \"\"\"\n    {% if frame.exc_cause_explicit %}\n      The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:\n    {% else %}\n      During handling of the above exception ({{ frame.exc_cause }}), another exception occurred:\n    {% endif %}\n  {% endif %}\n{% endifchanged %}\nFile \"{{ frame.filename }}\" in {{ frame.function }}\n{% if frame.context_line %}  {{ frame.lineno }}. {{ frame.context_line }}{% endif %}\n{% endfor %}\n{% if exception_type %}Exception Type: {{ exception_type }}{% if request %} at {{ request.path_info }}{% endif %}\n{% if exception_value %}Exception Value: {{ exception_value }}{% endif %}{% endif %}{% endif %}\n{% if request %}Request information:\nGET:{% for k, v in request.GET.items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No GET data{% endfor %}\n\nPOST:{% for k, v in filtered_POST.items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No POST data{% endfor %}\n\nFILES:{% for k, v in request.FILES.items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No FILES data{% endfor %}\n\nCOOKIES:{% for k, v in request.COOKIES.items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No cookie data{% endfor %}\n\nMETA:{% for k, v in request.META.items|dictsort:\"0\" %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% endfor %}\n{% else %}Request data not supplied\n{% endif %}\nSettings:\nUsing settings module {{ settings.SETTINGS_MODULE }}{% for k, v in settings.items|dictsort:\"0\" %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% endfor %}\n\n{% if not is_email %}\nYou're seeing this error because you have DEBUG = True in your\nDjango settings file. Change that to False, and Django will\ndisplay a standard page generated by the handler for this status code.\n{% endif %}\n\"\"\")\n\nTECHNICAL_404_TEMPLATE = \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <title>Page not found at {{ request.path_info|escape }}</title>\n  <meta name=\"robots\" content=\"NONE,NOARCHIVE\">\n  <style type=\"text/css\">\n    html * { padding:0; margin:0; }\n    body * { padding:10px 20px; }\n    body * * { padding:0; }\n    body { font:small sans-serif; background:#eee; }\n    body>div { border-bottom:1px solid #ddd; }\n    h1 { font-weight:normal; margin-bottom:.4em; }\n    h1 span { font-size:60%; color:#666; font-weight:normal; }\n    table { border:none; border-collapse: collapse; width:100%; }\n    td, th { vertical-align:top; padding:2px 3px; }\n    th { width:12em; text-align:right; color:#666; padding-right:.5em; }\n    #info { background:#f6f6f6; }\n    #info ol { margin: 0.5em 4em; }\n    #info ol li { font-family: monospace; }\n    #summary { background: #ffc; }\n    #explanation { background:#eee; border-bottom: 0px none; }\n  </style>\n</head>\n<body>\n  <div id=\"summary\">\n    <h1>Page not found <span>(404)</span></h1>\n    <table class=\"meta\">\n      <tr>\n        <th>Request Method:</th>\n        <td>{{ request.META.REQUEST_METHOD }}</td>\n      </tr>\n      <tr>\n        <th>Request URL:</th>\n        <td>{{ request.build_absolute_uri|escape }}</td>\n      </tr>\n      {% if raising_view_name %}\n      <tr>\n        <th>Raised by:</th>\n        <td>{{ raising_view_name }}</td>\n      </tr>\n      {% endif %}\n    </table>\n  </div>\n  <div id=\"info\">\n    {% if urlpatterns %}\n      <p>\n      Using the URLconf defined in <code>{{ urlconf }}</code>,\n      Django tried these URL patterns, in this order:\n      </p>\n      <ol>\n        {% for pattern in urlpatterns %}\n          <li>\n            {% for pat in pattern %}\n                {{ pat.regex.pattern }}\n                {% if forloop.last and pat.name %}[name='{{ pat.name }}']{% endif %}\n            {% endfor %}\n          </li>\n        {% endfor %}\n      </ol>\n      <p>The current URL, <code>{{ request_path|escape }}</code>, didn't match any of these.</p>\n    {% else %}\n      <p>{{ reason }}</p>\n    {% endif %}\n  </div>\n\n  <div id=\"explanation\">\n    <p>\n      You're seeing this error because you have <code>DEBUG = True</code> in\n      your Django settings file. Change that to <code>False</code>, and Django\n      will display a standard 404 page.\n    </p>\n  </div>\n</body>\n</html>\n\"\"\"\n\nDEFAULT_URLCONF_TEMPLATE = \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\"><head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta name=\"robots\" content=\"NONE,NOARCHIVE\"><title>{{ title }}</title>\n  <style type=\"text/css\">\n    html * { padding:0; margin:0; }\n    body * { padding:10px 20px; }\n    body * * { padding:0; }\n    body { font:small sans-serif; }\n    body>div { border-bottom:1px solid #ddd; }\n    h1 { font-weight:normal; }\n    h2 { margin-bottom:.8em; }\n    h2 span { font-size:80%; color:#666; font-weight:normal; }\n    h3 { margin:1em 0 .5em 0; }\n    h4 { margin:0 0 .5em 0; font-weight: normal; }\n    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }\n    tbody td, tbody th { vertical-align:top; padding:2px 3px; }\n    thead th {\n      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;\n      font-weight:normal; font-size:11px; border:1px solid #ddd;\n    }\n    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }\n    #summary { background: #e0ebff; }\n    #summary h2 { font-weight: normal; color: #666; }\n    #explanation { background:#eee; }\n    #instructions { background:#f6f6f6; }\n    #summary table { border:none; background:transparent; }\n  </style>\n</head>\n\n<body>\n<div id=\"summary\">\n  <h1>{{ heading }}</h1>\n  <h2>{{ subheading }}</h2>\n</div>\n\n<div id=\"instructions\">\n  <p>\n    {{ instructions|safe }}\n  </p>\n</div>\n\n<div id=\"explanation\">\n  <p>\n    {{ explanation|safe }}\n  </p>\n</div>\n</body></html>\n\"\"\"\n", "===========================\nDjango 1.8.14 release notes\n===========================\n\n*July 18, 2016*\n\nDjango 1.8.14 fixes a security issue and a bug in 1.8.13.\n\nXSS in admin's add/change related popup\n=======================================\n\nUnsafe usage of JavaScript's ``Element.innerHTML`` could result in XSS in the\nadmin's add/change related popup. ``Element.textContent`` is now used to\nprevent execution of the data.\n\nThe debug view also used ``innerHTML``. Although a security issue wasn't\nidentified there, out of an abundance of caution it's also updated to use\n``textContent``.\n\nBugfixes\n========\n\n* Fixed missing ``varchar/text_pattern_ops`` index on ``CharField`` and\n  ``TextField`` respectively when using ``AddField`` on PostgreSQL\n  (:ticket:`26889`).\n", "==========================\nDjango 1.9.8 release notes\n==========================\n\n*July 18, 2016*\n\nDjango 1.9.8 fixes a security issue and several bugs in 1.9.7.\n\nXSS in admin's add/change related popup\n=======================================\n\nUnsafe usage of JavaScript's ``Element.innerHTML`` could result in XSS in the\nadmin's add/change related popup. ``Element.textContent`` is now used to\nprevent execution of the data.\n\nThe debug view also used ``innerHTML``. Although a security issue wasn't\nidentified there, out of an abundance of caution it's also updated to use\n``textContent``.\n\nBugfixes\n========\n\n* Fixed missing ``varchar/text_pattern_ops`` index on ``CharField`` and\n  ``TextField`` respectively when using ``AddField`` on PostgreSQL\n  (:ticket:`26889`).\n\n* Fixed ``makemessages`` crash on Python 2 with non-ASCII file names\n  (:ticket:`26897`).\n", "# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nimport datetime\nimport os\nimport tempfile\nimport uuid\n\nfrom django.contrib.auth.models import User\nfrom django.contrib.contenttypes.fields import (\n    GenericForeignKey, GenericRelation,\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.storage import FileSystemStorage\nfrom django.db import models\nfrom django.utils.encoding import python_2_unicode_compatible\n\n\n@python_2_unicode_compatible\nclass Section(models.Model):\n    \"\"\"\n    A simple section that links to articles, to test linking to related items\n    in admin views.\n    \"\"\"\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n    @property\n    def name_property(self):\n        \"\"\"\n        A property that simply returns the name. Used to test #24461\n        \"\"\"\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Article(models.Model):\n    \"\"\"\n    A simple article to test admin views. Test backwards compatibility.\n    \"\"\"\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    date = models.DateTimeField()\n    section = models.ForeignKey(Section, models.CASCADE, null=True, blank=True)\n    another_section = models.ForeignKey(Section, models.CASCADE, null=True, blank=True, related_name='+')\n    sub_section = models.ForeignKey(Section, models.SET_NULL, null=True, blank=True, related_name='+')\n\n    def __str__(self):\n        return self.title\n\n    def model_year(self):\n        return self.date.year\n    model_year.admin_order_field = 'date'\n    model_year.short_description = ''\n\n    def model_year_reversed(self):\n        return self.date.year\n    model_year_reversed.admin_order_field = '-date'\n    model_year_reversed.short_description = ''\n\n\n@python_2_unicode_compatible\nclass Book(models.Model):\n    \"\"\"\n    A simple book that has chapters.\n    \"\"\"\n    name = models.CharField(max_length=100, verbose_name='\u00bfName?')\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Promo(models.Model):\n    name = models.CharField(max_length=100, verbose_name='\u00bfName?')\n    book = models.ForeignKey(Book, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Chapter(models.Model):\n    title = models.CharField(max_length=100, verbose_name='\u00bfTitle?')\n    content = models.TextField()\n    book = models.ForeignKey(Book, models.CASCADE)\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        # Use a utf-8 bytestring to ensure it works (see #11710)\n        verbose_name = '\u00bfChapter?'\n\n\n@python_2_unicode_compatible\nclass ChapterXtra1(models.Model):\n    chap = models.OneToOneField(Chapter, models.CASCADE, verbose_name='\u00bfChap?')\n    xtra = models.CharField(max_length=100, verbose_name='\u00bfXtra?')\n\n    def __str__(self):\n        return '\u00bfXtra1: %s' % self.xtra\n\n\n@python_2_unicode_compatible\nclass ChapterXtra2(models.Model):\n    chap = models.OneToOneField(Chapter, models.CASCADE, verbose_name='\u00bfChap?')\n    xtra = models.CharField(max_length=100, verbose_name='\u00bfXtra?')\n\n    def __str__(self):\n        return '\u00bfXtra2: %s' % self.xtra\n\n\nclass RowLevelChangePermissionModel(models.Model):\n    name = models.CharField(max_length=100, blank=True)\n\n\nclass CustomArticle(models.Model):\n    content = models.TextField()\n    date = models.DateTimeField()\n\n\n@python_2_unicode_compatible\nclass ModelWithStringPrimaryKey(models.Model):\n    string_pk = models.CharField(max_length=255, primary_key=True)\n\n    def __str__(self):\n        return self.string_pk\n\n    def get_absolute_url(self):\n        return '/dummy/%s/' % self.string_pk\n\n\n@python_2_unicode_compatible\nclass Color(models.Model):\n    value = models.CharField(max_length=10)\n    warm = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.value\n\n\n# we replicate Color to register with another ModelAdmin\nclass Color2(Color):\n    class Meta:\n        proxy = True\n\n\n@python_2_unicode_compatible\nclass Thing(models.Model):\n    title = models.CharField(max_length=20)\n    color = models.ForeignKey(Color, models.CASCADE, limit_choices_to={'warm': True})\n    pub_date = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return self.title\n\n\n@python_2_unicode_compatible\nclass Actor(models.Model):\n    name = models.CharField(max_length=50)\n    age = models.IntegerField()\n    title = models.CharField(max_length=50, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Inquisition(models.Model):\n    expected = models.BooleanField(default=False)\n    leader = models.ForeignKey(Actor, models.CASCADE)\n    country = models.CharField(max_length=20)\n\n    def __str__(self):\n        return \"by %s from %s\" % (self.leader, self.country)\n\n\n@python_2_unicode_compatible\nclass Sketch(models.Model):\n    title = models.CharField(max_length=100)\n    inquisition = models.ForeignKey(\n        Inquisition,\n        models.CASCADE,\n        limit_choices_to={\n            'leader__name': 'Palin',\n            'leader__age': 27,\n            'expected': False,\n        },\n    )\n    defendant0 = models.ForeignKey(\n        Actor,\n        models.CASCADE,\n        limit_choices_to={'title__isnull': False},\n        related_name='as_defendant0',\n    )\n    defendant1 = models.ForeignKey(\n        Actor,\n        models.CASCADE,\n        limit_choices_to={'title__isnull': True},\n        related_name='as_defendant1',\n    )\n\n    def __str__(self):\n        return self.title\n\n\ndef today_callable_dict():\n    return {\"last_action__gte\": datetime.datetime.today()}\n\n\ndef today_callable_q():\n    return models.Q(last_action__gte=datetime.datetime.today())\n\n\n@python_2_unicode_compatible\nclass Character(models.Model):\n    username = models.CharField(max_length=100)\n    last_action = models.DateTimeField()\n\n    def __str__(self):\n        return self.username\n\n\n@python_2_unicode_compatible\nclass StumpJoke(models.Model):\n    variation = models.CharField(max_length=100)\n    most_recently_fooled = models.ForeignKey(\n        Character,\n        models.CASCADE,\n        limit_choices_to=today_callable_dict,\n        related_name=\"+\",\n    )\n    has_fooled_today = models.ManyToManyField(Character, limit_choices_to=today_callable_q, related_name=\"+\")\n\n    def __str__(self):\n        return self.variation\n\n\nclass Fabric(models.Model):\n    NG_CHOICES = (\n        ('Textured', (\n            ('x', 'Horizontal'),\n            ('y', 'Vertical'),\n        )),\n        ('plain', 'Smooth'),\n    )\n    surface = models.CharField(max_length=20, choices=NG_CHOICES)\n\n\n@python_2_unicode_compatible\nclass Person(models.Model):\n    GENDER_CHOICES = (\n        (1, \"Male\"),\n        (2, \"Female\"),\n    )\n    name = models.CharField(max_length=100)\n    gender = models.IntegerField(choices=GENDER_CHOICES)\n    age = models.IntegerField(default=21)\n    alive = models.BooleanField(default=True)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Persona(models.Model):\n    \"\"\"\n    A simple persona associated with accounts, to test inlining of related\n    accounts which inherit from a common accounts class.\n    \"\"\"\n    name = models.CharField(blank=False, max_length=80)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Account(models.Model):\n    \"\"\"\n    A simple, generic account encapsulating the information shared by all\n    types of accounts.\n    \"\"\"\n    username = models.CharField(blank=False, max_length=80)\n    persona = models.ForeignKey(Persona, models.CASCADE, related_name=\"accounts\")\n    servicename = 'generic service'\n\n    def __str__(self):\n        return \"%s: %s\" % (self.servicename, self.username)\n\n\nclass FooAccount(Account):\n    \"\"\"A service-specific account of type Foo.\"\"\"\n    servicename = 'foo'\n\n\nclass BarAccount(Account):\n    \"\"\"A service-specific account of type Bar.\"\"\"\n    servicename = 'bar'\n\n\n@python_2_unicode_compatible\nclass Subscriber(models.Model):\n    name = models.CharField(blank=False, max_length=80)\n    email = models.EmailField(blank=False, max_length=175)\n\n    def __str__(self):\n        return \"%s (%s)\" % (self.name, self.email)\n\n\nclass ExternalSubscriber(Subscriber):\n    pass\n\n\nclass OldSubscriber(Subscriber):\n    pass\n\n\nclass Media(models.Model):\n    name = models.CharField(max_length=60)\n\n\nclass Podcast(Media):\n    release_date = models.DateField()\n\n    class Meta:\n        ordering = ('release_date',)  # overridden in PodcastAdmin\n\n\nclass Vodcast(Media):\n    media = models.OneToOneField(Media, models.CASCADE, primary_key=True, parent_link=True)\n    released = models.BooleanField(default=False)\n\n\nclass Parent(models.Model):\n    name = models.CharField(max_length=128)\n\n    def clean(self):\n        if self.name == '_invalid':\n            raise ValidationError('invalid')\n\n\nclass Child(models.Model):\n    parent = models.ForeignKey(Parent, models.CASCADE, editable=False)\n    name = models.CharField(max_length=30, blank=True)\n\n    def clean(self):\n        if self.name == '_invalid':\n            raise ValidationError('invalid')\n\n\n@python_2_unicode_compatible\nclass EmptyModel(models.Model):\n    def __str__(self):\n        return \"Primary key = %s\" % self.id\n\n\ntemp_storage = FileSystemStorage(tempfile.mkdtemp())\nUPLOAD_TO = os.path.join(temp_storage.location, 'test_upload')\n\n\nclass Gallery(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Picture(models.Model):\n    name = models.CharField(max_length=100)\n    image = models.FileField(storage=temp_storage, upload_to='test_upload')\n    gallery = models.ForeignKey(Gallery, models.CASCADE, related_name=\"pictures\")\n\n\nclass Language(models.Model):\n    iso = models.CharField(max_length=5, primary_key=True)\n    name = models.CharField(max_length=50)\n    english_name = models.CharField(max_length=50)\n    shortlist = models.BooleanField(default=False)\n\n    class Meta:\n        ordering = ('iso',)\n\n\n# a base class for Recommender and Recommendation\nclass Title(models.Model):\n    pass\n\n\nclass TitleTranslation(models.Model):\n    title = models.ForeignKey(Title, models.CASCADE)\n    text = models.CharField(max_length=100)\n\n\nclass Recommender(Title):\n    pass\n\n\nclass Recommendation(Title):\n    recommender = models.ForeignKey(Recommender, models.CASCADE)\n\n\nclass Collector(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Widget(models.Model):\n    owner = models.ForeignKey(Collector, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n\nclass DooHickey(models.Model):\n    code = models.CharField(max_length=10, primary_key=True)\n    owner = models.ForeignKey(Collector, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n\nclass Grommet(models.Model):\n    code = models.AutoField(primary_key=True)\n    owner = models.ForeignKey(Collector, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n\nclass Whatsit(models.Model):\n    index = models.IntegerField(primary_key=True)\n    owner = models.ForeignKey(Collector, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n\nclass Doodad(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass FancyDoodad(Doodad):\n    owner = models.ForeignKey(Collector, models.CASCADE)\n    expensive = models.BooleanField(default=True)\n\n\n@python_2_unicode_compatible\nclass Category(models.Model):\n    collector = models.ForeignKey(Collector, models.CASCADE)\n    order = models.PositiveIntegerField()\n\n    class Meta:\n        ordering = ('order',)\n\n    def __str__(self):\n        return '%s:o%s' % (self.id, self.order)\n\n\ndef link_posted_default():\n    return datetime.date.today() - datetime.timedelta(days=7)\n\n\nclass Link(models.Model):\n    posted = models.DateField(default=link_posted_default)\n    url = models.URLField()\n    post = models.ForeignKey(\"Post\", models.CASCADE)\n    readonly_link_content = models.TextField()\n\n\nclass PrePopulatedPost(models.Model):\n    title = models.CharField(max_length=100)\n    published = models.BooleanField(default=False)\n    slug = models.SlugField()\n\n\nclass PrePopulatedSubPost(models.Model):\n    post = models.ForeignKey(PrePopulatedPost, models.CASCADE)\n    subtitle = models.CharField(max_length=100)\n    subslug = models.SlugField()\n\n\nclass Post(models.Model):\n    title = models.CharField(max_length=100, help_text=\"Some help text for the title (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)\")\n    content = models.TextField(help_text=\"Some help text for the content (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)\")\n    readonly_content = models.TextField()\n    posted = models.DateField(\n        default=datetime.date.today,\n        help_text=\"Some help text for the date (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)\"\n    )\n    public = models.NullBooleanField()\n\n    def awesomeness_level(self):\n        return \"Very awesome.\"\n\n\n# Proxy model to test overridden fields attrs on Post model so as not to\n# interfere with other tests.\nclass FieldOverridePost(Post):\n    class Meta:\n        proxy = True\n\n\n@python_2_unicode_compatible\nclass Gadget(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Villain(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n\nclass SuperVillain(Villain):\n    pass\n\n\n@python_2_unicode_compatible\nclass FunkyTag(models.Model):\n    \"Because we all know there's only one real use case for GFKs.\"\n    name = models.CharField(max_length=25)\n    content_type = models.ForeignKey(ContentType, models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass Plot(models.Model):\n    name = models.CharField(max_length=100)\n    team_leader = models.ForeignKey(Villain, models.CASCADE, related_name='lead_plots')\n    contact = models.ForeignKey(Villain, models.CASCADE, related_name='contact_plots')\n    tags = GenericRelation(FunkyTag)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass PlotDetails(models.Model):\n    details = models.CharField(max_length=100)\n    plot = models.OneToOneField(Plot, models.CASCADE, null=True, blank=True)\n\n    def __str__(self):\n        return self.details\n\n\nclass PlotProxy(Plot):\n    class Meta:\n        proxy = True\n\n\n@python_2_unicode_compatible\nclass SecretHideout(models.Model):\n    \"\"\" Secret! Not registered with the admin! \"\"\"\n    location = models.CharField(max_length=100)\n    villain = models.ForeignKey(Villain, models.CASCADE)\n\n    def __str__(self):\n        return self.location\n\n\n@python_2_unicode_compatible\nclass SuperSecretHideout(models.Model):\n    \"\"\" Secret! Not registered with the admin! \"\"\"\n    location = models.CharField(max_length=100)\n    supervillain = models.ForeignKey(SuperVillain, models.CASCADE)\n\n    def __str__(self):\n        return self.location\n\n\n@python_2_unicode_compatible\nclass Bookmark(models.Model):\n    name = models.CharField(max_length=60)\n    tag = GenericRelation(FunkyTag, related_query_name='bookmark')\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass CyclicOne(models.Model):\n    name = models.CharField(max_length=25)\n    two = models.ForeignKey('CyclicTwo', models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\n@python_2_unicode_compatible\nclass CyclicTwo(models.Model):\n    name = models.CharField(max_length=25)\n    one = models.ForeignKey(CyclicOne, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Topping(models.Model):\n    name = models.CharField(max_length=20)\n\n\nclass Pizza(models.Model):\n    name = models.CharField(max_length=20)\n    toppings = models.ManyToManyField('Topping', related_name='pizzas')\n\n\nclass Album(models.Model):\n    owner = models.ForeignKey(User, models.SET_NULL, null=True, blank=True)\n    title = models.CharField(max_length=30)\n\n\nclass Employee(Person):\n    code = models.CharField(max_length=20)\n\n\nclass WorkHour(models.Model):\n    datum = models.DateField()\n    employee = models.ForeignKey(Employee, models.CASCADE)\n\n\nclass Question(models.Model):\n    question = models.CharField(max_length=20)\n\n\n@python_2_unicode_compatible\nclass Answer(models.Model):\n    question = models.ForeignKey(Question, models.PROTECT)\n    answer = models.CharField(max_length=20)\n\n    def __str__(self):\n        return self.answer\n\n\nclass Reservation(models.Model):\n    start_date = models.DateTimeField()\n    price = models.IntegerField()\n\n\nDRIVER_CHOICES = (\n    ('bill', 'Bill G'),\n    ('steve', 'Steve J'),\n)\n\nRESTAURANT_CHOICES = (\n    ('indian', 'A Taste of India'),\n    ('thai', 'Thai Pography'),\n    ('pizza', 'Pizza Mama'),\n)\n\n\nclass FoodDelivery(models.Model):\n    reference = models.CharField(max_length=100)\n    driver = models.CharField(max_length=100, choices=DRIVER_CHOICES, blank=True)\n    restaurant = models.CharField(max_length=100, choices=RESTAURANT_CHOICES, blank=True)\n\n    class Meta:\n        unique_together = ((\"driver\", \"restaurant\"),)\n\n\n@python_2_unicode_compatible\nclass CoverLetter(models.Model):\n    author = models.CharField(max_length=30)\n    date_written = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return self.author\n\n\nclass Paper(models.Model):\n    title = models.CharField(max_length=30)\n    author = models.CharField(max_length=30, blank=True, null=True)\n\n\nclass ShortMessage(models.Model):\n    content = models.CharField(max_length=140)\n    timestamp = models.DateTimeField(null=True, blank=True)\n\n\n@python_2_unicode_compatible\nclass Telegram(models.Model):\n    title = models.CharField(max_length=30)\n    date_sent = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass Story(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n\n\nclass OtherStory(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n\n\nclass ComplexSortedPerson(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.PositiveIntegerField()\n    is_employee = models.NullBooleanField()\n\n\nclass PluggableSearchPerson(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.PositiveIntegerField()\n\n\nclass PrePopulatedPostLargeSlug(models.Model):\n    \"\"\"\n    Regression test for #15938: a large max_length for the slugfield must not\n    be localized in prepopulated_fields_js.html or it might end up breaking\n    the javascript (ie, using THOUSAND_SEPARATOR ends up with maxLength=1,000)\n    \"\"\"\n    title = models.CharField(max_length=100)\n    published = models.BooleanField(default=False)\n    # `db_index=False` because MySQL cannot index large CharField (#21196).\n    slug = models.SlugField(max_length=1000, db_index=False)\n\n\nclass AdminOrderedField(models.Model):\n    order = models.IntegerField()\n    stuff = models.CharField(max_length=200)\n\n\nclass AdminOrderedModelMethod(models.Model):\n    order = models.IntegerField()\n    stuff = models.CharField(max_length=200)\n\n    def some_order(self):\n        return self.order\n    some_order.admin_order_field = 'order'\n\n\nclass AdminOrderedAdminMethod(models.Model):\n    order = models.IntegerField()\n    stuff = models.CharField(max_length=200)\n\n\nclass AdminOrderedCallable(models.Model):\n    order = models.IntegerField()\n    stuff = models.CharField(max_length=200)\n\n\n@python_2_unicode_compatible\nclass Report(models.Model):\n    title = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.title\n\n\nclass MainPrepopulated(models.Model):\n    name = models.CharField(max_length=100)\n    pubdate = models.DateField()\n    status = models.CharField(\n        max_length=20,\n        choices=(('option one', 'Option One'),\n                 ('option two', 'Option Two')))\n    slug1 = models.SlugField(blank=True)\n    slug2 = models.SlugField(blank=True)\n    slug3 = models.SlugField(blank=True, allow_unicode=True)\n\n\nclass RelatedPrepopulated(models.Model):\n    parent = models.ForeignKey(MainPrepopulated, models.CASCADE)\n    name = models.CharField(max_length=75)\n    pubdate = models.DateField()\n    status = models.CharField(\n        max_length=20,\n        choices=(('option one', 'Option One'),\n                 ('option two', 'Option Two')))\n    slug1 = models.SlugField(max_length=50)\n    slug2 = models.SlugField(max_length=60)\n\n\nclass UnorderedObject(models.Model):\n    \"\"\"\n    Model without any defined `Meta.ordering`.\n    Refs #16819.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    bool = models.BooleanField(default=True)\n\n\nclass UndeletableObject(models.Model):\n    \"\"\"\n    Model whose show_delete in admin change_view has been disabled\n    Refs #10057.\n    \"\"\"\n    name = models.CharField(max_length=255)\n\n\nclass UnchangeableObject(models.Model):\n    \"\"\"\n    Model whose change_view is disabled in admin\n    Refs #20640.\n    \"\"\"\n\n\nclass UserMessenger(models.Model):\n    \"\"\"\n    Dummy class for testing message_user functions on ModelAdmin\n    \"\"\"\n\n\nclass Simple(models.Model):\n    \"\"\"\n    Simple model with nothing on it for use in testing\n    \"\"\"\n\n\nclass Choice(models.Model):\n    choice = models.IntegerField(blank=True, null=True,\n        choices=((1, 'Yes'), (0, 'No'), (None, 'No opinion')))\n\n\nclass ParentWithDependentChildren(models.Model):\n    \"\"\"\n    Issue #20522\n    Model where the validation of child foreign-key relationships depends\n    on validation of the parent\n    \"\"\"\n    some_required_info = models.PositiveIntegerField()\n    family_name = models.CharField(max_length=255, blank=False)\n\n\nclass DependentChild(models.Model):\n    \"\"\"\n    Issue #20522\n    Model that depends on validation of the parent class for one of its\n    fields to validate during clean\n    \"\"\"\n    parent = models.ForeignKey(ParentWithDependentChildren, models.CASCADE)\n    family_name = models.CharField(max_length=255)\n\n\nclass _Manager(models.Manager):\n    def get_queryset(self):\n        return super(_Manager, self).get_queryset().filter(pk__gt=1)\n\n\nclass FilteredManager(models.Model):\n    def __str__(self):\n        return \"PK=%d\" % self.pk\n\n    pk_gt_1 = _Manager()\n    objects = models.Manager()\n\n\nclass EmptyModelVisible(models.Model):\n    \"\"\" See ticket #11277. \"\"\"\n\n\nclass EmptyModelHidden(models.Model):\n    \"\"\" See ticket #11277. \"\"\"\n\n\nclass EmptyModelMixin(models.Model):\n    \"\"\" See ticket #11277. \"\"\"\n\n\nclass State(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass City(models.Model):\n    state = models.ForeignKey(State, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n    def get_absolute_url(self):\n        return '/dummy/%s/' % self.pk\n\n\nclass Restaurant(models.Model):\n    city = models.ForeignKey(City, models.CASCADE)\n    name = models.CharField(max_length=100)\n\n    def get_absolute_url(self):\n        return '/dummy/%s/' % self.pk\n\n\nclass Worker(models.Model):\n    work_at = models.ForeignKey(Restaurant, models.CASCADE)\n    name = models.CharField(max_length=50)\n    surname = models.CharField(max_length=50)\n\n\n# Models for #23329\nclass ReferencedByParent(models.Model):\n    name = models.CharField(max_length=20, unique=True)\n\n\nclass ParentWithFK(models.Model):\n    fk = models.ForeignKey(\n        ReferencedByParent,\n        models.CASCADE,\n        to_field='name',\n        related_name='hidden+',\n    )\n\n\nclass ChildOfReferer(ParentWithFK):\n    pass\n\n\n# Models for #23431\nclass ReferencedByInline(models.Model):\n    name = models.CharField(max_length=20, unique=True)\n\n\nclass InlineReference(models.Model):\n    fk = models.ForeignKey(\n        ReferencedByInline,\n        models.CASCADE,\n        to_field='name',\n        related_name='hidden+',\n    )\n\n\nclass InlineReferer(models.Model):\n    refs = models.ManyToManyField(InlineReference)\n\n\n# Models for #23604 and #23915\nclass Recipe(models.Model):\n    rname = models.CharField(max_length=20, unique=True)\n\n\nclass Ingredient(models.Model):\n    iname = models.CharField(max_length=20, unique=True)\n    recipes = models.ManyToManyField(Recipe, through='RecipeIngredient')\n\n\nclass RecipeIngredient(models.Model):\n    ingredient = models.ForeignKey(Ingredient, models.CASCADE, to_field='iname')\n    recipe = models.ForeignKey(Recipe, models.CASCADE, to_field='rname')\n\n\n# Model for #23839\nclass NotReferenced(models.Model):\n    # Don't point any FK at this model.\n    pass\n\n\n# Models for #23934\nclass ExplicitlyProvidedPK(models.Model):\n    name = models.IntegerField(primary_key=True)\n\n\nclass ImplicitlyGeneratedPK(models.Model):\n    name = models.IntegerField(unique=True)\n\n\n# Models for #25622\nclass ReferencedByGenRel(models.Model):\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n\n\nclass GenRelReference(models.Model):\n    references = GenericRelation(ReferencedByGenRel)\n\n\nclass ParentWithUUIDPK(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    title = models.CharField(max_length=100)\n\n    def __str__(self):\n        return str(self.id)\n\n\nclass RelatedWithUUIDPKModel(models.Model):\n    parent = models.ForeignKey(ParentWithUUIDPK, on_delete=models.CASCADE)\n", "# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nimport datetime\nimport os\nimport re\nimport unittest\n\nfrom django.contrib.admin import AdminSite, ModelAdmin\nfrom django.contrib.admin.helpers import ACTION_CHECKBOX_NAME\nfrom django.contrib.admin.models import ADDITION, DELETION, LogEntry\nfrom django.contrib.admin.options import TO_FIELD_VAR\nfrom django.contrib.admin.templatetags.admin_static import static\nfrom django.contrib.admin.templatetags.admin_urls import add_preserved_filters\nfrom django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\nfrom django.contrib.admin.utils import quote\nfrom django.contrib.admin.views.main import IS_POPUP_VAR\nfrom django.contrib.auth import REDIRECT_FIELD_NAME, get_permission_codename\nfrom django.contrib.auth.models import Group, Permission, User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.staticfiles.storage import staticfiles_storage\nfrom django.core import mail\nfrom django.core.checks import Error\nfrom django.core.files import temp as tempfile\nfrom django.core.urlresolvers import NoReverseMatch, resolve, reverse\nfrom django.forms.utils import ErrorList\nfrom django.template.loader import render_to_string\nfrom django.template.response import TemplateResponse\nfrom django.test import (\n    SimpleTestCase, TestCase, ignore_warnings, modify_settings,\n    override_settings, skipUnlessDBFeature,\n)\nfrom django.test.utils import override_script_prefix, patch_logger\nfrom django.utils import formats, six, translation\nfrom django.utils._os import upath\nfrom django.utils.cache import get_max_age\nfrom django.utils.deprecation import RemovedInDjango20Warning\nfrom django.utils.encoding import force_bytes, force_text, iri_to_uri\nfrom django.utils.html import escape\nfrom django.utils.http import urlencode\nfrom django.utils.six.moves.urllib.parse import parse_qsl, urljoin, urlparse\n\nfrom . import customadmin\nfrom .admin import CityAdmin, site, site2\nfrom .models import (\n    Actor, AdminOrderedAdminMethod, AdminOrderedCallable, AdminOrderedField,\n    AdminOrderedModelMethod, Answer, Article, BarAccount, Book, Bookmark,\n    Category, Chapter, ChapterXtra1, ChapterXtra2, Character, Child, Choice,\n    City, Collector, Color, Color2, ComplexSortedPerson, CoverLetter,\n    CustomArticle, CyclicOne, CyclicTwo, DooHickey, Employee, EmptyModel,\n    ExternalSubscriber, Fabric, FancyDoodad, FieldOverridePost,\n    FilteredManager, FooAccount, FoodDelivery, FunkyTag, Gallery, Grommet,\n    Inquisition, Language, Link, MainPrepopulated, ModelWithStringPrimaryKey,\n    OtherStory, Paper, Parent, ParentWithDependentChildren, ParentWithUUIDPK,\n    Person, Persona, Picture, Pizza, Plot, PlotDetails, PluggableSearchPerson,\n    Podcast, Post, PrePopulatedPost, Promo, Question, Recommendation,\n    Recommender, RelatedPrepopulated, RelatedWithUUIDPKModel, Report,\n    Restaurant, RowLevelChangePermissionModel, SecretHideout, Section,\n    ShortMessage, Simple, State, Story, Subscriber, SuperSecretHideout,\n    SuperVillain, Telegram, TitleTranslation, Topping, UnchangeableObject,\n    UndeletableObject, UnorderedObject, Villain, Vodcast, Whatsit, Widget,\n    Worker, WorkHour,\n)\n\n\nERROR_MESSAGE = \"Please enter the correct username and password \\\nfor a staff account. Note that both fields may be case-sensitive.\"\n\n\nclass AdminFieldExtractionMixin(object):\n    \"\"\"\n    Helper methods for extracting data from AdminForm.\n    \"\"\"\n    def get_admin_form_fields(self, response):\n        \"\"\"\n        Return a list of AdminFields for the AdminForm in the response.\n        \"\"\"\n        admin_form = response.context['adminform']\n        fieldsets = list(admin_form)\n\n        field_lines = []\n        for fieldset in fieldsets:\n            field_lines += list(fieldset)\n\n        fields = []\n        for field_line in field_lines:\n            fields += list(field_line)\n\n        return fields\n\n    def get_admin_readonly_fields(self, response):\n        \"\"\"\n        Return the readonly fields for the response's AdminForm.\n        \"\"\"\n        return [f for f in self.get_admin_form_fields(response) if f.is_readonly]\n\n    def get_admin_readonly_field(self, response, field_name):\n        \"\"\"\n        Return the readonly field for the given field_name.\n        \"\"\"\n        admin_readonly_fields = self.get_admin_readonly_fields(response)\n        for field in admin_readonly_fields:\n            if field.field['name'] == field_name:\n                return field\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n                   ROOT_URLCONF=\"admin_views.urls\",\n                   USE_I18N=True, USE_L10N=False, LANGUAGE_CODE='en')\nclass AdminViewBasicTestCase(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n        cls.color1 = Color.objects.create(value='Red', warm=True)\n        cls.color2 = Color.objects.create(value='Orange', warm=True)\n        cls.color3 = Color.objects.create(value='Blue', warm=False)\n        cls.color4 = Color.objects.create(value='Green', warm=False)\n        cls.fab1 = Fabric.objects.create(surface='x')\n        cls.fab2 = Fabric.objects.create(surface='y')\n        cls.fab3 = Fabric.objects.create(surface='plain')\n        cls.b1 = Book.objects.create(name='Book 1')\n        cls.b2 = Book.objects.create(name='Book 2')\n        cls.pro1 = Promo.objects.create(name='Promo 1', book=cls.b1)\n        cls.pro1 = Promo.objects.create(name='Promo 2', book=cls.b2)\n        cls.chap1 = Chapter.objects.create(title='Chapter 1', content='[ insert contents here ]', book=cls.b1)\n        cls.chap2 = Chapter.objects.create(title='Chapter 2', content='[ insert contents here ]', book=cls.b1)\n        cls.chap3 = Chapter.objects.create(title='Chapter 1', content='[ insert contents here ]', book=cls.b2)\n        cls.chap4 = Chapter.objects.create(title='Chapter 2', content='[ insert contents here ]', book=cls.b2)\n        cls.cx1 = ChapterXtra1.objects.create(chap=cls.chap1, xtra='ChapterXtra1 1')\n        cls.cx2 = ChapterXtra1.objects.create(chap=cls.chap3, xtra='ChapterXtra1 2')\n\n        # Post data for edit inline\n        cls.inline_post_data = {\n            \"name\": \"Test section\",\n            # inline data\n            \"article_set-TOTAL_FORMS\": \"6\",\n            \"article_set-INITIAL_FORMS\": \"3\",\n            \"article_set-MAX_NUM_FORMS\": \"0\",\n            \"article_set-0-id\": cls.a1.pk,\n            # there is no title in database, give one here or formset will fail.\n            \"article_set-0-title\": \"Norske bostaver \u00e6\u00f8\u00e5 skaper problemer\",\n            \"article_set-0-content\": \"&lt;p&gt;Middle content&lt;/p&gt;\",\n            \"article_set-0-date_0\": \"2008-03-18\",\n            \"article_set-0-date_1\": \"11:54:58\",\n            \"article_set-0-section\": cls.s1.pk,\n            \"article_set-1-id\": cls.a2.pk,\n            \"article_set-1-title\": \"Need a title.\",\n            \"article_set-1-content\": \"&lt;p&gt;Oldest content&lt;/p&gt;\",\n            \"article_set-1-date_0\": \"2000-03-18\",\n            \"article_set-1-date_1\": \"11:54:58\",\n            \"article_set-2-id\": cls.a3.pk,\n            \"article_set-2-title\": \"Need a title.\",\n            \"article_set-2-content\": \"&lt;p&gt;Newest content&lt;/p&gt;\",\n            \"article_set-2-date_0\": \"2009-03-18\",\n            \"article_set-2-date_1\": \"11:54:58\",\n            \"article_set-3-id\": \"\",\n            \"article_set-3-title\": \"\",\n            \"article_set-3-content\": \"\",\n            \"article_set-3-date_0\": \"\",\n            \"article_set-3-date_1\": \"\",\n            \"article_set-4-id\": \"\",\n            \"article_set-4-title\": \"\",\n            \"article_set-4-content\": \"\",\n            \"article_set-4-date_0\": \"\",\n            \"article_set-4-date_1\": \"\",\n            \"article_set-5-id\": \"\",\n            \"article_set-5-title\": \"\",\n            \"article_set-5-content\": \"\",\n            \"article_set-5-date_0\": \"\",\n            \"article_set-5-date_1\": \"\",\n        }\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def tearDown(self):\n        formats.reset_format_cache()\n\n    def assertContentBefore(self, response, text1, text2, failing_msg=None):\n        \"\"\"\n        Testing utility asserting that text1 appears before text2 in response\n        content.\n        \"\"\"\n        self.assertEqual(response.status_code, 200)\n        self.assertLess(response.content.index(force_bytes(text1)), response.content.index(force_bytes(text2)),\n            failing_msg)\n\n\nclass AdminViewBasicTest(AdminViewBasicTestCase):\n    def test_trailing_slash_required(self):\n        \"\"\"\n        If you leave off the trailing slash, app should redirect and add it.\n        \"\"\"\n        add_url = reverse('admin:admin_views_article_add')\n        response = self.client.get(add_url[:-1])\n        self.assertRedirects(response, add_url, status_code=301)\n\n    def test_admin_static_template_tag(self):\n        \"\"\"\n        Test that admin_static.static is pointing to the collectstatic version\n        (as django.contrib.collectstatic is in installed apps).\n        \"\"\"\n        old_url = staticfiles_storage.base_url\n        staticfiles_storage.base_url = '/test/'\n        try:\n            self.assertEqual(static('path'), '/test/path')\n        finally:\n            staticfiles_storage.base_url = old_url\n\n    def test_basic_add_GET(self):\n        \"\"\"\n        A smoke test to ensure GET on the add_view works.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_add'))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_add_with_GET_args(self):\n        response = self.client.get(reverse('admin:admin_views_section_add'), {'name': 'My Section'})\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'value=\"My Section\"',\n            msg_prefix=\"Couldn't find an input with the right value in the response\")\n\n    def test_basic_edit_GET(self):\n        \"\"\"\n        A smoke test to ensure GET on the change_view works.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_change', args=(self.s1.pk,)))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_basic_edit_GET_string_PK(self):\n        \"\"\"\n        Ensure GET on the change_view works (returns an HTTP 404 error, see\n        #11191) when passing a string as the PK argument for a model with an\n        integer PK field.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_change', args=('abc',)))\n        self.assertEqual(response.status_code, 404)\n\n    def test_basic_edit_GET_old_url_redirect(self):\n        \"\"\"\n        The change URL changed in Django 1.9, but the old one still redirects.\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_section_change', args=(self.s1.pk,)).replace('change/', '')\n        )\n        self.assertRedirects(response, reverse('admin:admin_views_section_change', args=(self.s1.pk,)))\n\n    def test_basic_inheritance_GET_string_PK(self):\n        \"\"\"\n        Ensure GET on the change_view works on inherited models (returns an\n        HTTP 404 error, see #19951) when passing a string as the PK argument\n        for a model with an integer PK field.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_supervillain_change', args=('abc',)))\n        self.assertEqual(response.status_code, 404)\n\n    def test_basic_add_POST(self):\n        \"\"\"\n        A smoke test to ensure POST on add_view works.\n        \"\"\"\n        post_data = {\n            \"name\": \"Another Section\",\n            # inline data\n            \"article_set-TOTAL_FORMS\": \"3\",\n            \"article_set-INITIAL_FORMS\": \"0\",\n            \"article_set-MAX_NUM_FORMS\": \"0\",\n        }\n        response = self.client.post(reverse('admin:admin_views_section_add'), post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_popup_add_POST(self):\n        \"\"\"\n        Ensure http response from a popup is properly escaped.\n        \"\"\"\n        post_data = {\n            '_popup': '1',\n            'title': 'title with a new\\nline',\n            'content': 'some content',\n            'date_0': '2010-09-10',\n            'date_1': '14:55:39',\n        }\n        response = self.client.post(reverse('admin:admin_views_article_add'), post_data)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissAddRelatedObjectPopup')\n        self.assertContains(response, 'title with a new\\\\u000Aline')\n\n    def test_basic_edit_POST(self):\n        \"\"\"\n        A smoke test to ensure POST on edit_view works.\n        \"\"\"\n        url = reverse('admin:admin_views_section_change', args=(self.s1.pk,))\n        response = self.client.post(url, self.inline_post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_edit_save_as(self):\n        \"\"\"\n        Test \"save as\".\n        \"\"\"\n        post_data = self.inline_post_data.copy()\n        post_data.update({\n            '_saveasnew': 'Save+as+new',\n            \"article_set-1-section\": \"1\",\n            \"article_set-2-section\": \"1\",\n            \"article_set-3-section\": \"1\",\n            \"article_set-4-section\": \"1\",\n            \"article_set-5-section\": \"1\",\n        })\n        response = self.client.post(reverse('admin:admin_views_section_change', args=(self.s1.pk,)), post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_edit_save_as_delete_inline(self):\n        \"\"\"\n        Should be able to \"Save as new\" while also deleting an inline.\n        \"\"\"\n        post_data = self.inline_post_data.copy()\n        post_data.update({\n            '_saveasnew': 'Save+as+new',\n            \"article_set-1-section\": \"1\",\n            \"article_set-2-section\": \"1\",\n            \"article_set-2-DELETE\": \"1\",\n            \"article_set-3-section\": \"1\",\n        })\n        response = self.client.post(reverse('admin:admin_views_section_change', args=(self.s1.pk,)), post_data)\n        self.assertEqual(response.status_code, 302)\n        # started with 3 articles, one was deleted.\n        self.assertEqual(Section.objects.latest('id').article_set.count(), 2)\n\n    def test_change_list_sorting_callable(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a callable\n        (column 2 is callable_year in ArticleAdmin)\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_article_changelist'), {'o': 2})\n        self.assertContentBefore(response, 'Oldest content', 'Middle content',\n            \"Results of sorting on callable are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Newest content',\n            \"Results of sorting on callable are out of order.\")\n\n    def test_change_list_sorting_model(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a Model method\n        (column 3 is 'model_year' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_article_changelist'), {'o': '-3'})\n        self.assertContentBefore(response, 'Newest content', 'Middle content',\n            \"Results of sorting on Model method are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Oldest content',\n            \"Results of sorting on Model method are out of order.\")\n\n    def test_change_list_sorting_model_admin(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a ModelAdmin method\n        (column 4 is 'modeladmin_year' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_article_changelist'), {'o': '4'})\n        self.assertContentBefore(response, 'Oldest content', 'Middle content',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Newest content',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n\n    def test_change_list_sorting_model_admin_reverse(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a ModelAdmin\n        method in reverse order (i.e. admin_order_field uses the '-' prefix)\n        (column 6 is 'model_year_reverse' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_article_changelist'), {'o': '6'})\n        self.assertContentBefore(response, '2009,', '2008,',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, '2008,', '2000,',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        # Let's make sure the ordering is right and that we don't get a\n        # FieldError when we change to descending order\n        response = self.client.get(reverse('admin:admin_views_article_changelist'), {'o': '-6'})\n        self.assertContentBefore(response, '2000,', '2008,',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, '2008,', '2009,',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n\n    def test_change_list_sorting_multiple(self):\n        p1 = Person.objects.create(name=\"Chris\", gender=1, alive=True)\n        p2 = Person.objects.create(name=\"Chris\", gender=2, alive=True)\n        p3 = Person.objects.create(name=\"Bob\", gender=1, alive=True)\n        link1 = reverse('admin:admin_views_person_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_person_change', args=(p2.pk,))\n        link3 = reverse('admin:admin_views_person_change', args=(p3.pk,))\n\n        # Sort by name, gender\n        response = self.client.get(reverse('admin:admin_views_person_changelist'), {'o': '1.2'})\n        self.assertContentBefore(response, link3, link1)\n        self.assertContentBefore(response, link1, link2)\n\n        # Sort by gender descending, name\n        response = self.client.get(reverse('admin:admin_views_person_changelist'), {'o': '-2.1'})\n        self.assertContentBefore(response, link2, link3)\n        self.assertContentBefore(response, link3, link1)\n\n    def test_change_list_sorting_preserve_queryset_ordering(self):\n        \"\"\"\n        If no ordering is defined in `ModelAdmin.ordering` or in the query\n        string, then the underlying order of the queryset should not be\n        changed, even if it is defined in `Modeladmin.get_queryset()`.\n        Refs #11868, #7309.\n        \"\"\"\n        p1 = Person.objects.create(name=\"Amy\", gender=1, alive=True, age=80)\n        p2 = Person.objects.create(name=\"Bob\", gender=1, alive=True, age=70)\n        p3 = Person.objects.create(name=\"Chris\", gender=2, alive=False, age=60)\n        link1 = reverse('admin:admin_views_person_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_person_change', args=(p2.pk,))\n        link3 = reverse('admin:admin_views_person_change', args=(p3.pk,))\n\n        response = self.client.get(reverse('admin:admin_views_person_changelist'), {})\n        self.assertContentBefore(response, link3, link2)\n        self.assertContentBefore(response, link2, link1)\n\n    def test_change_list_sorting_model_meta(self):\n        # Test ordering on Model Meta is respected\n\n        l1 = Language.objects.create(iso='ur', name='Urdu')\n        l2 = Language.objects.create(iso='ar', name='Arabic')\n        link1 = reverse('admin:admin_views_language_change', args=(quote(l1.pk),))\n        link2 = reverse('admin:admin_views_language_change', args=(quote(l2.pk),))\n\n        response = self.client.get(reverse('admin:admin_views_language_changelist'), {})\n        self.assertContentBefore(response, link2, link1)\n\n        # Test we can override with query string\n        response = self.client.get(reverse('admin:admin_views_language_changelist'), {'o': '-1'})\n        self.assertContentBefore(response, link1, link2)\n\n    def test_change_list_sorting_override_model_admin(self):\n        # Test ordering on Model Admin is respected, and overrides Model Meta\n        dt = datetime.datetime.now()\n        p1 = Podcast.objects.create(name=\"A\", release_date=dt)\n        p2 = Podcast.objects.create(name=\"B\", release_date=dt - datetime.timedelta(10))\n        link1 = reverse('admin:admin_views_podcast_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_podcast_change', args=(p2.pk,))\n\n        response = self.client.get(reverse('admin:admin_views_podcast_changelist'), {})\n        self.assertContentBefore(response, link1, link2)\n\n    def test_multiple_sort_same_field(self):\n        # Check that we get the columns we expect if we have two columns\n        # that correspond to the same ordering field\n        dt = datetime.datetime.now()\n        p1 = Podcast.objects.create(name=\"A\", release_date=dt)\n        p2 = Podcast.objects.create(name=\"B\", release_date=dt - datetime.timedelta(10))\n        link1 = reverse('admin:admin_views_podcast_change', args=(quote(p1.pk),))\n        link2 = reverse('admin:admin_views_podcast_change', args=(quote(p2.pk),))\n\n        response = self.client.get(reverse('admin:admin_views_podcast_changelist'), {})\n        self.assertContentBefore(response, link1, link2)\n\n        p1 = ComplexSortedPerson.objects.create(name=\"Bob\", age=10)\n        p2 = ComplexSortedPerson.objects.create(name=\"Amy\", age=20)\n        link1 = reverse('admin:admin_views_complexsortedperson_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_complexsortedperson_change', args=(p2.pk,))\n\n        response = self.client.get(reverse('admin:admin_views_complexsortedperson_changelist'), {})\n        # Should have 5 columns (including action checkbox col)\n        self.assertContains(response, '<th scope=\"col\"', count=5)\n\n        self.assertContains(response, 'Name')\n        self.assertContains(response, 'Colored name')\n\n        # Check order\n        self.assertContentBefore(response, 'Name', 'Colored name')\n\n        # Check sorting - should be by name\n        self.assertContentBefore(response, link2, link1)\n\n    def test_sort_indicators_admin_order(self):\n        \"\"\"\n        Ensures that the admin shows default sort indicators for all\n        kinds of 'ordering' fields: field names, method on the model\n        admin and model itself, and other callables. See #17252.\n        \"\"\"\n        models = [(AdminOrderedField, 'adminorderedfield'),\n                  (AdminOrderedModelMethod, 'adminorderedmodelmethod'),\n                  (AdminOrderedAdminMethod, 'adminorderedadminmethod'),\n                  (AdminOrderedCallable, 'adminorderedcallable')]\n        for model, url in models:\n            model.objects.create(stuff='The Last Item', order=3)\n            model.objects.create(stuff='The First Item', order=1)\n            model.objects.create(stuff='The Middle Item', order=2)\n            response = self.client.get(reverse('admin:admin_views_%s_changelist' % url), {})\n            self.assertEqual(response.status_code, 200)\n            # Should have 3 columns including action checkbox col.\n            self.assertContains(response, '<th scope=\"col\"', count=3, msg_prefix=url)\n            # Check if the correct column was selected. 2 is the index of the\n            # 'order' column in the model admin's 'list_display' with 0 being\n            # the implicit 'action_checkbox' and 1 being the column 'stuff'.\n            self.assertEqual(response.context['cl'].get_ordering_field_columns(), {2: 'asc'})\n            # Check order of records.\n            self.assertContentBefore(response, 'The First Item', 'The Middle Item')\n            self.assertContentBefore(response, 'The Middle Item', 'The Last Item')\n\n    def test_limited_filter(self):\n        \"\"\"Ensure admin changelist filters do not contain objects excluded via limit_choices_to.\n        This also tests relation-spanning filters (e.g. 'color__value').\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_thing_changelist'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<div id=\"changelist-filter\">',\n            msg_prefix=\"Expected filter not found in changelist view\")\n        self.assertNotContains(response, '<a href=\"?color__id__exact=3\">Blue</a>',\n            msg_prefix=\"Changelist filter not correctly limited by limit_choices_to\")\n\n    def test_relation_spanning_filters(self):\n        changelist_url = reverse('admin:admin_views_chapterxtra1_changelist')\n        response = self.client.get(changelist_url)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<div id=\"changelist-filter\">')\n        filters = {\n            'chap__id__exact': dict(\n                values=[c.id for c in Chapter.objects.all()],\n                test=lambda obj, value: obj.chap.id == value),\n            'chap__title': dict(\n                values=[c.title for c in Chapter.objects.all()],\n                test=lambda obj, value: obj.chap.title == value),\n            'chap__book__id__exact': dict(\n                values=[b.id for b in Book.objects.all()],\n                test=lambda obj, value: obj.chap.book.id == value),\n            'chap__book__name': dict(\n                values=[b.name for b in Book.objects.all()],\n                test=lambda obj, value: obj.chap.book.name == value),\n            'chap__book__promo__id__exact': dict(\n                values=[p.id for p in Promo.objects.all()],\n                test=lambda obj, value: obj.chap.book.promo_set.filter(id=value).exists()),\n            'chap__book__promo__name': dict(\n                values=[p.name for p in Promo.objects.all()],\n                test=lambda obj, value: obj.chap.book.promo_set.filter(name=value).exists()),\n        }\n        for filter_path, params in filters.items():\n            for value in params['values']:\n                query_string = urlencode({filter_path: value})\n                # ensure filter link exists\n                self.assertContains(response, '<a href=\"?%s\">' % query_string)\n                # ensure link works\n                filtered_response = self.client.get('%s?%s' % (changelist_url, query_string))\n                self.assertEqual(filtered_response.status_code, 200)\n                # ensure changelist contains only valid objects\n                for obj in filtered_response.context['cl'].queryset.all():\n                    self.assertTrue(params['test'](obj, value))\n\n    def test_incorrect_lookup_parameters(self):\n        \"\"\"Ensure incorrect lookup parameters are handled gracefully.\"\"\"\n        changelist_url = reverse('admin:admin_views_thing_changelist')\n        response = self.client.get(changelist_url, {'notarealfield': '5'})\n        self.assertRedirects(response, '%s?e=1' % changelist_url)\n\n        # Spanning relationships through a nonexistent related object (Refs #16716)\n        response = self.client.get(changelist_url, {'notarealfield__whatever': '5'})\n        self.assertRedirects(response, '%s?e=1' % changelist_url)\n\n        response = self.client.get(changelist_url, {'color__id__exact': 'StringNotInteger!'})\n        self.assertRedirects(response, '%s?e=1' % changelist_url)\n\n        # Regression test for #18530\n        response = self.client.get(changelist_url, {'pub_date__gte': 'foo'})\n        self.assertRedirects(response, '%s?e=1' % changelist_url)\n\n    def test_isnull_lookups(self):\n        \"\"\"Ensure is_null is handled correctly.\"\"\"\n        Article.objects.create(title=\"I Could Go Anywhere\", content=\"Versatile\", date=datetime.datetime.now())\n        changelist_url = reverse('admin:admin_views_article_changelist')\n        response = self.client.get(changelist_url)\n        self.assertContains(response, '4 articles')\n        response = self.client.get(changelist_url, {'section__isnull': 'false'})\n        self.assertContains(response, '3 articles')\n        response = self.client.get(changelist_url, {'section__isnull': '0'})\n        self.assertContains(response, '3 articles')\n        response = self.client.get(changelist_url, {'section__isnull': 'true'})\n        self.assertContains(response, '1 article')\n        response = self.client.get(changelist_url, {'section__isnull': '1'})\n        self.assertContains(response, '1 article')\n\n    def test_logout_and_password_change_URLs(self):\n        response = self.client.get(reverse('admin:admin_views_article_changelist'))\n        self.assertContains(response, '<a href=\"%s\">' % reverse('admin:logout'))\n        self.assertContains(response, '<a href=\"%s\">' % reverse('admin:password_change'))\n\n    def test_named_group_field_choices_change_list(self):\n        \"\"\"\n        Ensures the admin changelist shows correct values in the relevant column\n        for rows corresponding to instances of a model in which a named group\n        has been used in the choices option of a field.\n        \"\"\"\n        link1 = reverse('admin:admin_views_fabric_change', args=(self.fab1.pk,))\n        link2 = reverse('admin:admin_views_fabric_change', args=(self.fab2.pk,))\n        response = self.client.get(reverse('admin:admin_views_fabric_changelist'))\n        fail_msg = (\n            \"Changelist table isn't showing the right human-readable values \"\n            \"set by a model field 'choices' option named group.\"\n        )\n        self.assertContains(response, '<a href=\"%s\">Horizontal</a>' % link1, msg_prefix=fail_msg, html=True)\n        self.assertContains(response, '<a href=\"%s\">Vertical</a>' % link2, msg_prefix=fail_msg, html=True)\n\n    def test_named_group_field_choices_filter(self):\n        \"\"\"\n        Ensures the filter UI shows correctly when at least one named group has\n        been used in the choices option of a model field.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_fabric_changelist'))\n        fail_msg = (\n            \"Changelist filter isn't showing options contained inside a model \"\n            \"field 'choices' option named group.\"\n        )\n        self.assertContains(response, '<div id=\"changelist-filter\">')\n        self.assertContains(response,\n            '<a href=\"?surface__exact=x\">Horizontal</a>', msg_prefix=fail_msg, html=True)\n        self.assertContains(response,\n            '<a href=\"?surface__exact=y\">Vertical</a>', msg_prefix=fail_msg, html=True)\n\n    def test_change_list_null_boolean_display(self):\n        Post.objects.create(public=None)\n        response = self.client.get(reverse('admin:admin_views_post_changelist'))\n        self.assertContains(response, 'icon-unknown.svg')\n\n    def test_i18n_language_non_english_default(self):\n        \"\"\"\n        Check if the JavaScript i18n view returns an empty language catalog\n        if the default language is non-English but the selected language\n        is English. See #13388 and #3594 for more details.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='fr'), translation.override('en-us'):\n            response = self.client.get(reverse('admin:jsi18n'))\n            self.assertNotContains(response, 'Choisir une heure')\n\n    def test_i18n_language_non_english_fallback(self):\n        \"\"\"\n        Makes sure that the fallback language is still working properly\n        in cases where the selected language cannot be found.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='fr'), translation.override('none'):\n            response = self.client.get(reverse('admin:jsi18n'))\n            self.assertContains(response, 'Choisir une heure')\n\n    def test_L10N_deactivated(self):\n        \"\"\"\n        Check if L10N is deactivated, the JavaScript i18n view doesn't\n        return localized date/time formats. Refs #14824.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='ru', USE_L10N=False), translation.override('none'):\n            response = self.client.get(reverse('admin:jsi18n'))\n            self.assertNotContains(response, '%d.%m.%Y %H:%M:%S')\n            self.assertContains(response, '%Y-%m-%d %H:%M:%S')\n\n    def test_disallowed_filtering(self):\n        with patch_logger('django.security.DisallowedModelAdminLookup', 'error') as calls:\n            response = self.client.get(\n                \"%s?owner__email__startswith=fuzzy\" % reverse('admin:admin_views_album_changelist')\n            )\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # Filters are allowed if explicitly included in list_filter\n        response = self.client.get(\"%s?color__value__startswith=red\" % reverse('admin:admin_views_thing_changelist'))\n        self.assertEqual(response.status_code, 200)\n        response = self.client.get(\"%s?color__value=red\" % reverse('admin:admin_views_thing_changelist'))\n        self.assertEqual(response.status_code, 200)\n\n        # Filters should be allowed if they involve a local field without the\n        # need to whitelist them in list_filter or date_hierarchy.\n        response = self.client.get(\"%s?age__gt=30\" % reverse('admin:admin_views_person_changelist'))\n        self.assertEqual(response.status_code, 200)\n\n        e1 = Employee.objects.create(name='Anonymous', gender=1, age=22, alive=True, code='123')\n        e2 = Employee.objects.create(name='Visitor', gender=2, age=19, alive=True, code='124')\n        WorkHour.objects.create(datum=datetime.datetime.now(), employee=e1)\n        WorkHour.objects.create(datum=datetime.datetime.now(), employee=e2)\n        response = self.client.get(reverse('admin:admin_views_workhour_changelist'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'employee__person_ptr__exact')\n        response = self.client.get(\"%s?employee__person_ptr__exact=%d\" % (\n            reverse('admin:admin_views_workhour_changelist'), e1.pk)\n        )\n        self.assertEqual(response.status_code, 200)\n\n    def test_disallowed_to_field(self):\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            url = reverse('admin:admin_views_section_changelist')\n            response = self.client.get(url, {TO_FIELD_VAR: 'missing_field'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # Specifying a field that is not referred by any other model registered\n        # to this admin site should raise an exception.\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            response = self.client.get(reverse('admin:admin_views_section_changelist'), {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # #23839 - Primary key should always be allowed, even if the referenced model isn't registered.\n        response = self.client.get(reverse('admin:admin_views_notreferenced_changelist'), {TO_FIELD_VAR: 'id'})\n        self.assertEqual(response.status_code, 200)\n\n        # #23915 - Specifying a field referenced by another model though a m2m should be allowed.\n        response = self.client.get(reverse('admin:admin_views_recipe_changelist'), {TO_FIELD_VAR: 'rname'})\n        self.assertEqual(response.status_code, 200)\n\n        # #23604, #23915 - Specifying a field referenced through a reverse m2m relationship should be allowed.\n        response = self.client.get(reverse('admin:admin_views_ingredient_changelist'), {TO_FIELD_VAR: 'iname'})\n        self.assertEqual(response.status_code, 200)\n\n        # #23329 - Specifying a field that is not referred by any other model directly registered\n        # to this admin site but registered through inheritance should be allowed.\n        response = self.client.get(reverse('admin:admin_views_referencedbyparent_changelist'), {TO_FIELD_VAR: 'name'})\n        self.assertEqual(response.status_code, 200)\n\n        # #23431 - Specifying a field that is only referred to by a inline of a registered\n        # model should be allowed.\n        response = self.client.get(reverse('admin:admin_views_referencedbyinline_changelist'), {TO_FIELD_VAR: 'name'})\n        self.assertEqual(response.status_code, 200)\n\n        # #25622 - Specifying a field of a model only referred by a generic\n        # relation should raise DisallowedModelAdminToField.\n        url = reverse('admin:admin_views_referencedbygenrel_changelist')\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            response = self.client.get(url, {TO_FIELD_VAR: 'object_id'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # We also want to prevent the add, change, and delete views from\n        # leaking a disallowed field value.\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            response = self.client.post(reverse('admin:admin_views_section_add'), {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        section = Section.objects.create()\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            url = reverse('admin:admin_views_section_change', args=(section.pk,))\n            response = self.client.post(url, {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            url = reverse('admin:admin_views_section_delete', args=(section.pk,))\n            response = self.client.post(url, {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n    def test_allowed_filtering_15103(self):\n        \"\"\"\n        Regressions test for ticket 15103 - filtering on fields defined in a\n        ForeignKey 'limit_choices_to' should be allowed, otherwise raw_id_fields\n        can break.\n        \"\"\"\n        # Filters should be allowed if they are defined on a ForeignKey pointing to this model\n        url = \"%s?leader__name=Palin&leader__age=27\" % reverse('admin:admin_views_inquisition_changelist')\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n\n    def test_popup_dismiss_related(self):\n        \"\"\"\n        Regression test for ticket 20664 - ensure the pk is properly quoted.\n        \"\"\"\n        actor = Actor.objects.create(name=\"Palin\", age=27)\n        response = self.client.get(\"%s?%s\" % (reverse('admin:admin_views_actor_changelist'), IS_POPUP_VAR))\n        self.assertContains(response, \"opener.dismissRelatedLookupPopup(window, &#39;%s&#39;)\" % actor.pk)\n\n    def test_hide_change_password(self):\n        \"\"\"\n        Tests if the \"change password\" link in the admin is hidden if the User\n        does not have a usable password set.\n        (against 9bea85795705d015cdadc82c68b99196a8554f5c)\n        \"\"\"\n        user = User.objects.get(username='super')\n        user.set_unusable_password()\n        user.save()\n\n        response = self.client.get(reverse('admin:index'))\n        self.assertNotContains(response, reverse('admin:password_change'),\n            msg_prefix='The \"change password\" link should not be displayed if a user does not have a usable password.')\n\n    def test_change_view_with_show_delete_extra_context(self):\n        \"\"\"\n        Ensured that the 'show_delete' context variable in the admin's change\n        view actually controls the display of the delete button.\n        Refs #10057.\n        \"\"\"\n        instance = UndeletableObject.objects.create(name='foo')\n        response = self.client.get(reverse('admin:admin_views_undeletableobject_change', args=(instance.pk,)))\n        self.assertNotContains(response, 'deletelink')\n\n    def test_allows_attributeerror_to_bubble_up(self):\n        \"\"\"\n        Ensure that AttributeErrors are allowed to bubble when raised inside\n        a change list view.\n\n        Requires a model to be created so there's something to be displayed\n\n        Refs: #16655, #18593, and #18747\n        \"\"\"\n        Simple.objects.create()\n        with self.assertRaises(AttributeError):\n            self.client.get(reverse('admin:admin_views_simple_changelist'))\n\n    def test_changelist_with_no_change_url(self):\n        \"\"\"\n        ModelAdmin.changelist_view shouldn't result in a NoReverseMatch if url\n        for change_view is removed from get_urls\n\n        Regression test for #20934\n        \"\"\"\n        UnchangeableObject.objects.create()\n        response = self.client.get(reverse('admin:admin_views_unchangeableobject_changelist'))\n        self.assertEqual(response.status_code, 200)\n        # Check the format of the shown object -- shouldn't contain a change link\n        self.assertContains(response, '<th class=\"field-__str__\">UnchangeableObject object</th>', html=True)\n\n    def test_invalid_appindex_url(self):\n        \"\"\"\n        #21056 -- URL reversing shouldn't work for nonexistent apps.\n        \"\"\"\n        good_url = '/test_admin/admin/admin_views/'\n        confirm_good_url = reverse('admin:app_list',\n                                   kwargs={'app_label': 'admin_views'})\n        self.assertEqual(good_url, confirm_good_url)\n\n        with self.assertRaises(NoReverseMatch):\n            reverse('admin:app_list', kwargs={'app_label': 'this_should_fail'})\n        with self.assertRaises(NoReverseMatch):\n            reverse('admin:app_list', args=('admin_views2',))\n\n    def test_resolve_admin_views(self):\n        index_match = resolve('/test_admin/admin4/')\n        list_match = resolve('/test_admin/admin4/auth/user/')\n        self.assertIs(index_match.func.admin_site, customadmin.simple_site)\n        self.assertIsInstance(list_match.func.model_admin, customadmin.CustomPwdTemplateUserAdmin)\n\n    def test_proxy_model_content_type_is_used_for_log_entries(self):\n        \"\"\"\n        Log entries for proxy models should have the proxy model's content\n        type.\n\n        Regression test for #21084.\n        \"\"\"\n        color2_content_type = ContentType.objects.get_for_model(Color2, for_concrete_model=False)\n\n        # add\n        color2_add_url = reverse('admin:admin_views_color2_add')\n        self.client.post(color2_add_url, {'value': 'orange'})\n\n        color2_addition_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_addition_log.content_type)\n\n        # change\n        color_id = color2_addition_log.object_id\n        color2_change_url = reverse('admin:admin_views_color2_change', args=(color_id,))\n\n        self.client.post(color2_change_url, {'value': 'blue'})\n\n        color2_change_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_change_log.content_type)\n\n        # delete\n        color2_delete_url = reverse('admin:admin_views_color2_delete', args=(color_id,))\n        self.client.post(color2_delete_url)\n\n        color2_delete_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_delete_log.content_type)\n\n    def test_adminsite_display_site_url(self):\n        \"\"\"\n        #13749 - Admin should display link to front-end site 'View site'\n        \"\"\"\n        url = reverse('admin:index')\n        response = self.client.get(url)\n        self.assertEqual(response.context['site_url'], '/my-site-url/')\n        self.assertContains(response, '<a href=\"/my-site-url/\">View site</a>')\n\n\n@override_settings(TEMPLATES=[{\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    # Put this app's and the shared tests templates dirs in DIRS to take precedence\n    # over the admin's templates dir.\n    'DIRS': [\n        os.path.join(os.path.dirname(upath(__file__)), 'templates'),\n        os.path.join(os.path.dirname(os.path.dirname(upath(__file__))), 'templates'),\n    ],\n    'APP_DIRS': True,\n    'OPTIONS': {\n        'context_processors': [\n            'django.template.context_processors.debug',\n            'django.template.context_processors.request',\n            'django.contrib.auth.context_processors.auth',\n            'django.contrib.messages.context_processors.messages',\n        ],\n    },\n}])\nclass AdminCustomTemplateTests(AdminViewBasicTestCase):\n    def test_custom_model_admin_templates(self):\n        # Test custom change list template with custom extra context\n        response = self.client.get(reverse('admin:admin_views_customarticle_changelist'))\n        self.assertContains(response, \"var hello = 'Hello!';\")\n        self.assertTemplateUsed(response, 'custom_admin/change_list.html')\n\n        # Test custom add form template\n        response = self.client.get(reverse('admin:admin_views_customarticle_add'))\n        self.assertTemplateUsed(response, 'custom_admin/add_form.html')\n\n        # Add an article so we can test delete, change, and history views\n        post = self.client.post(reverse('admin:admin_views_customarticle_add'), {\n            'content': '<p>great article</p>',\n            'date_0': '2008-03-18',\n            'date_1': '10:54:39'\n        })\n        self.assertRedirects(post, reverse('admin:admin_views_customarticle_changelist'))\n        self.assertEqual(CustomArticle.objects.all().count(), 1)\n        article_pk = CustomArticle.objects.all()[0].pk\n\n        # Test custom delete, change, and object history templates\n        # Test custom change form template\n        response = self.client.get(reverse('admin:admin_views_customarticle_change', args=(article_pk,)))\n        self.assertTemplateUsed(response, 'custom_admin/change_form.html')\n        response = self.client.get(reverse('admin:admin_views_customarticle_delete', args=(article_pk,)))\n        self.assertTemplateUsed(response, 'custom_admin/delete_confirmation.html')\n        response = self.client.post(reverse('admin:admin_views_customarticle_changelist'), data={\n            'index': 0,\n            'action': ['delete_selected'],\n            '_selected_action': ['1'],\n        })\n        self.assertTemplateUsed(response, 'custom_admin/delete_selected_confirmation.html')\n        response = self.client.get(reverse('admin:admin_views_customarticle_history', args=(article_pk,)))\n        self.assertTemplateUsed(response, 'custom_admin/object_history.html')\n\n    def test_extended_bodyclass_template_change_form(self):\n        \"\"\"\n        Ensure that the admin/change_form.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_add'))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_change_password(self):\n        \"\"\"\n        Ensure that the auth/user/change_password.html template uses block\n        super in the bodyclass block.\n        \"\"\"\n        user = User.objects.get(username='super')\n        response = self.client.get(reverse('admin:auth_user_password_change', args=(user.id,)))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_index(self):\n        \"\"\"\n        Ensure that the admin/index.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        response = self.client.get(reverse('admin:index'))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_change_list(self):\n        \"\"\"\n        Ensure that the admin/change_list.html' template uses block.super\n        in the bodyclass block.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_article_changelist'))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_login(self):\n        \"\"\"\n        Ensure that the admin/login.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        self.client.logout()\n        response = self.client.get(reverse('admin:login'))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_delete_confirmation(self):\n        \"\"\"\n        Ensure that the admin/delete_confirmation.html template uses\n        block.super in the bodyclass block.\n        \"\"\"\n        group = Group.objects.create(name=\"foogroup\")\n        response = self.client.get(reverse('admin:auth_group_delete', args=(group.id,)))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_delete_selected_confirmation(self):\n        \"\"\"\n        Ensure that the admin/delete_selected_confirmation.html template uses\n        block.super in bodyclass block.\n        \"\"\"\n        group = Group.objects.create(name=\"foogroup\")\n        post_data = {\n            'action': 'delete_selected',\n            'selected_across': '0',\n            'index': '0',\n            '_selected_action': group.id\n        }\n        response = self.client.post(reverse('admin:auth_group_changelist'), post_data)\n        self.assertEqual(response.context['site_header'], 'Django administration')\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_filter_with_custom_template(self):\n        \"\"\"\n        Ensure that one can use a custom template to render an admin filter.\n        Refs #17515.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_color2_changelist'))\n        self.assertTemplateUsed(response, 'custom_filter_template.html')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n                   ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewFormUrlTest(TestCase):\n    current_app = \"admin3\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_change_form_URL_has_correct_value(self):\n        \"\"\"\n        Tests whether change_view has form_url in response.context\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_section_change', args=(self.s1.pk,), current_app=self.current_app)\n        )\n        self.assertIn('form_url', response.context, msg='form_url not present in response.context')\n        self.assertEqual(response.context['form_url'], 'pony')\n\n    def test_initial_data_can_be_overridden(self):\n        \"\"\"\n        Tests that the behavior for setting initial\n        form data can be overridden in the ModelAdmin class.\n\n        Usually, the initial value is set via the GET params.\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_restaurant_add', current_app=self.current_app),\n            {'name': 'test_value'}\n        )\n        # this would be the usual behaviour\n        self.assertNotContains(response, 'value=\"test_value\"')\n        # this is the overridden behaviour\n        self.assertContains(response, 'value=\"overridden_value\"')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n                   ROOT_URLCONF=\"admin_views.urls\")\nclass AdminJavaScriptTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_js_minified_only_if_debug_is_false(self):\n        \"\"\"\n        Ensure that the minified versions of the JS files are only used when\n        DEBUG is False.\n        Refs #17521.\n        \"\"\"\n        with override_settings(DEBUG=False):\n            response = self.client.get(reverse('admin:admin_views_section_add'))\n            self.assertNotContains(response, 'vendor/jquery/jquery.js')\n            self.assertContains(response, 'vendor/jquery/jquery.min.js')\n            self.assertNotContains(response, 'prepopulate.js')\n            self.assertContains(response, 'prepopulate.min.js')\n            self.assertNotContains(response, 'actions.js')\n            self.assertContains(response, 'actions.min.js')\n            self.assertNotContains(response, 'collapse.js')\n            self.assertContains(response, 'collapse.min.js')\n            self.assertNotContains(response, 'inlines.js')\n            self.assertContains(response, 'inlines.min.js')\n        with override_settings(DEBUG=True):\n            response = self.client.get(reverse('admin:admin_views_section_add'))\n            self.assertContains(response, 'vendor/jquery/jquery.js')\n            self.assertNotContains(response, 'vendor/jquery/jquery.min.js')\n            self.assertContains(response, 'prepopulate.js')\n            self.assertNotContains(response, 'prepopulate.min.js')\n            self.assertContains(response, 'actions.js')\n            self.assertNotContains(response, 'actions.min.js')\n            self.assertContains(response, 'collapse.js')\n            self.assertNotContains(response, 'collapse.min.js')\n            self.assertContains(response, 'inlines.js')\n            self.assertNotContains(response, 'inlines.min.js')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass SaveAsTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.per1 = Person.objects.create(name='John Mauchly', gender=1, alive=True)\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_save_as_duplication(self):\n        \"\"\"Ensure save as actually creates a new person\"\"\"\n        post_data = {'_saveasnew': '', 'name': 'John M', 'gender': 1, 'age': 42}\n        self.client.post(reverse('admin:admin_views_person_change', args=(self.per1.pk,)), post_data)\n        self.assertEqual(len(Person.objects.filter(name='John M')), 1)\n        self.assertEqual(len(Person.objects.filter(id=self.per1.pk)), 1)\n\n    def test_save_as_new_with_validation_errors(self):\n        \"\"\"\n        Ensure that when you click \"Save as new\" and have a validation error,\n        you only see the \"Save as new\" button and not the other save buttons,\n        and that only the \"Save as\" button is visible.\n        \"\"\"\n        response = self.client.post(reverse('admin:admin_views_person_change', args=(self.per1.pk,)), {\n            '_saveasnew': '',\n            'gender': 'invalid',\n            '_addanother': 'fail',\n        })\n        self.assertContains(response, 'Please correct the errors below.')\n        self.assertFalse(response.context['show_save_and_add_another'])\n        self.assertFalse(response.context['show_save_and_continue'])\n        self.assertTrue(response.context['show_save_as_new'])\n\n    def test_save_as_new_with_validation_errors_with_inlines(self):\n        parent = Parent.objects.create(name='Father')\n        child = Child.objects.create(parent=parent, name='Child')\n        response = self.client.post(reverse('admin:admin_views_parent_change', args=(parent.pk,)), {\n            '_saveasnew': 'Save as new',\n            'child_set-0-parent': parent.pk,\n            'child_set-0-id': child.pk,\n            'child_set-0-name': 'Child',\n            'child_set-INITIAL_FORMS': 1,\n            'child_set-MAX_NUM_FORMS': 1000,\n            'child_set-MIN_NUM_FORMS': 0,\n            'child_set-TOTAL_FORMS': 4,\n            'name': '_invalid',\n        })\n        self.assertContains(response, 'Please correct the error below.')\n        self.assertFalse(response.context['show_save_and_add_another'])\n        self.assertFalse(response.context['show_save_and_continue'])\n        self.assertTrue(response.context['show_save_as_new'])\n\n    def test_save_as_new_with_inlines_with_validation_errors(self):\n        parent = Parent.objects.create(name='Father')\n        child = Child.objects.create(parent=parent, name='Child')\n        response = self.client.post(reverse('admin:admin_views_parent_change', args=(parent.pk,)), {\n            '_saveasnew': 'Save as new',\n            'child_set-0-parent': parent.pk,\n            'child_set-0-id': child.pk,\n            'child_set-0-name': '_invalid',\n            'child_set-INITIAL_FORMS': 1,\n            'child_set-MAX_NUM_FORMS': 1000,\n            'child_set-MIN_NUM_FORMS': 0,\n            'child_set-TOTAL_FORMS': 4,\n            'name': 'Father',\n        })\n        self.assertContains(response, 'Please correct the error below.')\n        self.assertFalse(response.context['show_save_and_add_another'])\n        self.assertFalse(response.context['show_save_and_continue'])\n        self.assertTrue(response.context['show_save_as_new'])\n\n\n@override_settings(ROOT_URLCONF=\"admin_views.urls\")\nclass CustomModelAdminTest(AdminViewBasicTestCase):\n\n    def test_custom_admin_site_login_form(self):\n        self.client.logout()\n        response = self.client.get(reverse('admin2:index'), follow=True)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n        login = self.client.post(reverse('admin2:login'), {\n            REDIRECT_FIELD_NAME: reverse('admin2:index'),\n            'username': 'customform',\n            'password': 'secret',\n        }, follow=True)\n        self.assertIsInstance(login, TemplateResponse)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, 'custom form error')\n        self.assertContains(login, 'path/to/media.css')\n\n    def test_custom_admin_site_login_template(self):\n        self.client.logout()\n        response = self.client.get(reverse('admin2:index'), follow=True)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/login.html')\n        self.assertContains(response, 'Hello from a custom login template')\n\n    def test_custom_admin_site_logout_template(self):\n        response = self.client.get(reverse('admin2:logout'))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/logout.html')\n        self.assertContains(response, 'Hello from a custom logout template')\n\n    def test_custom_admin_site_index_view_and_template(self):\n        try:\n            response = self.client.get(reverse('admin2:index'))\n        except TypeError:\n            self.fail('AdminSite.index_template should accept a list of template paths')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/index.html')\n        self.assertContains(response, 'Hello from a custom index template *bar*')\n\n    def test_custom_admin_site_app_index_view_and_template(self):\n        response = self.client.get(reverse('admin2:app_list', args=('admin_views',)))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/app_index.html')\n        self.assertContains(response, 'Hello from a custom app_index template')\n\n    def test_custom_admin_site_password_change_template(self):\n        response = self.client.get(reverse('admin2:password_change'))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/password_change_form.html')\n        self.assertContains(response, 'Hello from a custom password change form template')\n\n    def test_custom_admin_site_password_change_with_extra_context(self):\n        response = self.client.get(reverse('admin2:password_change'))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/password_change_form.html')\n        self.assertContains(response, 'eggs')\n\n    def test_custom_admin_site_password_change_done_template(self):\n        response = self.client.get(reverse('admin2:password_change_done'))\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/password_change_done.html')\n        self.assertContains(response, 'Hello from a custom password change done template')\n\n    def test_custom_admin_site_view(self):\n        self.client.force_login(self.superuser)\n        response = self.client.get(reverse('admin2:my_view'))\n        self.assertEqual(response.content, b\"Django is a magical pony!\")\n\n    def test_pwd_change_custom_template(self):\n        self.client.force_login(self.superuser)\n        su = User.objects.get(username='super')\n        try:\n            response = self.client.get(\n                reverse('admin4:auth_user_password_change', args=(su.pk,))\n            )\n        except TypeError:\n            self.fail('ModelAdmin.change_user_password_template should accept a list of template paths')\n        self.assertEqual(response.status_code, 200)\n\n\ndef get_perm(Model, perm):\n    \"\"\"Return the permission object, for the Model\"\"\"\n    ct = ContentType.objects.get_for_model(Model)\n    return Permission.objects.get(content_type=ct, codename=perm)\n\n\n@override_settings(\n    PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF='admin_views.urls',\n    # Test with the admin's documented list of required context processors.\n    TEMPLATES=[{\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    }],\n)\nclass AdminViewPermissionsTest(TestCase):\n    \"\"\"Tests for Admin Views Permissions.\"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.adduser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='adduser',\n            first_name='Add', last_name='User', email='auser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.changeuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='changeuser',\n            first_name='Change', last_name='User', email='cuser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.deleteuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='deleteuser',\n            first_name='Delete', last_name='User', email='duser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.joepublicuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='joepublic',\n            first_name='Joe', last_name='Public', email='joepublic@example.com',\n            is_staff=False, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.nostaffuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='nostaff',\n            first_name='No', last_name='Staff', email='nostaff@example.com',\n            is_staff=False, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1,\n            another_section=cls.s1,\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n        # Setup permissions, for our users who can add, change, and delete.\n        opts = Article._meta\n\n        # User who can add Articles\n        cls.adduser.user_permissions.add(get_perm(Article, get_permission_codename('add', opts)))\n        # User who can change Articles\n        cls.changeuser.user_permissions.add(get_perm(Article, get_permission_codename('change', opts)))\n        cls.nostaffuser.user_permissions.add(get_perm(Article, get_permission_codename('change', opts)))\n\n        # User who can delete Articles\n        cls.deleteuser.user_permissions.add(get_perm(Article, get_permission_codename('delete', opts)))\n        cls.deleteuser.user_permissions.add(get_perm(Section, get_permission_codename('delete', Section._meta)))\n\n        # login POST dicts\n        cls.index_url = reverse('admin:index')\n        cls.super_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'super',\n            'password': 'secret',\n        }\n        cls.super_email_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'super@example.com',\n            'password': 'secret',\n        }\n        cls.super_email_bad_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'super@example.com',\n            'password': 'notsecret',\n        }\n        cls.adduser_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'adduser',\n            'password': 'secret',\n        }\n        cls.changeuser_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'changeuser',\n            'password': 'secret',\n        }\n        cls.deleteuser_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'deleteuser',\n            'password': 'secret',\n        }\n        cls.nostaff_login = {\n            REDIRECT_FIELD_NAME: reverse('has_permission_admin:index'),\n            'username': 'nostaff',\n            'password': 'secret',\n        }\n        cls.joepublic_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'username': 'joepublic',\n            'password': 'secret',\n        }\n        cls.no_username_login = {\n            REDIRECT_FIELD_NAME: cls.index_url,\n            'password': 'secret',\n        }\n\n    def test_login(self):\n        \"\"\"\n        Make sure only staff members can log in.\n\n        Successful posts to the login page will redirect to the original url.\n        Unsuccessful attempts will continue to render the login page with\n        a 200 status code.\n        \"\"\"\n        login_url = '%s?next=%s' % (reverse('admin:login'), reverse('admin:index'))\n        # Super User\n        response = self.client.get(self.index_url)\n        self.assertRedirects(response, login_url)\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n        self.client.get(reverse('admin:logout'))\n\n        # Test if user enters email address\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.super_email_login)\n        self.assertContains(login, ERROR_MESSAGE)\n        # only correct passwords get a username hint\n        login = self.client.post(login_url, self.super_email_bad_login)\n        self.assertContains(login, ERROR_MESSAGE)\n        new_user = User(username='jondoe', password='secret', email='super@example.com')\n        new_user.save()\n        # check to ensure if there are multiple email addresses a user doesn't get a 500\n        login = self.client.post(login_url, self.super_email_login)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Add User\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.adduser_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n        self.client.get(reverse('admin:logout'))\n\n        # Change User\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.changeuser_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n        self.client.get(reverse('admin:logout'))\n\n        # Delete User\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.deleteuser_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n        self.client.get(reverse('admin:logout'))\n\n        # Regular User should not be able to login.\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.joepublic_login)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Requests without username should not return 500 errors.\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.no_username_login)\n        self.assertEqual(login.status_code, 200)\n        form = login.context[0].get('form')\n        self.assertEqual(form.errors['username'][0], 'This field is required.')\n\n    def test_login_redirect_for_direct_get(self):\n        \"\"\"\n        Login redirect should be to the admin index page when going directly to\n        /admin/login/.\n        \"\"\"\n        response = self.client.get(reverse('admin:login'))\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.context[REDIRECT_FIELD_NAME], reverse('admin:index'))\n\n    def test_login_has_permission(self):\n        # Regular User should not be able to login.\n        response = self.client.get(reverse('has_permission_admin:index'))\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(reverse('has_permission_admin:login'), self.joepublic_login)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, 'permission denied')\n\n        # User with permissions should be able to login.\n        response = self.client.get(reverse('has_permission_admin:index'))\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(reverse('has_permission_admin:login'), self.nostaff_login)\n        self.assertRedirects(login, reverse('has_permission_admin:index'))\n        self.assertFalse(login.context)\n        self.client.get(reverse('has_permission_admin:logout'))\n\n        # Staff should be able to login.\n        response = self.client.get(reverse('has_permission_admin:index'))\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(reverse('has_permission_admin:login'), {\n            REDIRECT_FIELD_NAME: reverse('has_permission_admin:index'),\n            'username': 'deleteuser',\n            'password': 'secret',\n        })\n        self.assertRedirects(login, reverse('has_permission_admin:index'))\n        self.assertFalse(login.context)\n        self.client.get(reverse('has_permission_admin:logout'))\n\n    def test_login_successfully_redirects_to_original_URL(self):\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n        query_string = 'the-answer=42'\n        redirect_url = '%s?%s' % (self.index_url, query_string)\n        new_next = {REDIRECT_FIELD_NAME: redirect_url}\n        post_data = self.super_login.copy()\n        post_data.pop(REDIRECT_FIELD_NAME)\n        login = self.client.post(\n            '%s?%s' % (reverse('admin:login'), urlencode(new_next)),\n            post_data)\n        self.assertRedirects(login, redirect_url)\n\n    def test_double_login_is_not_allowed(self):\n        \"\"\"Regression test for #19327\"\"\"\n        login_url = '%s?next=%s' % (reverse('admin:login'), reverse('admin:index'))\n\n        response = self.client.get(self.index_url)\n        self.assertEqual(response.status_code, 302)\n\n        # Establish a valid admin session\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n\n        # Logging in with non-admin user fails\n        login = self.client.post(login_url, self.joepublic_login)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Establish a valid admin session\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n\n        # Logging in with admin user while already logged in\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, self.index_url)\n        self.assertFalse(login.context)\n        self.client.get(reverse('admin:logout'))\n\n    def test_login_page_notice_for_non_staff_users(self):\n        \"\"\"\n        A logged-in non-staff user trying to access the admin index should be\n        presented with the login page and a hint indicating that the current\n        user doesn't have access to it.\n        \"\"\"\n        hint_template = 'You are authenticated as {}'\n\n        # Anonymous user should not be shown the hint\n        response = self.client.get(self.index_url, follow=True)\n        self.assertContains(response, 'login-form')\n        self.assertNotContains(response, hint_template.format(''), status_code=200)\n\n        # Non-staff user should be shown the hint\n        self.client.login(**self.nostaff_login)\n        response = self.client.get(self.index_url, follow=True)\n        self.assertContains(response, 'login-form')\n        self.assertContains(response, hint_template.format(self.nostaffuser.username), status_code=200)\n\n    def test_add_view(self):\n        \"\"\"Test add view restricts access and actually adds items.\"\"\"\n        add_dict = {'title': 'D\u00f8m ikke',\n                    'content': '<p>great article</p>',\n                    'date_0': '2008-03-18', 'date_1': '10:54:39',\n                    'section': self.s1.pk}\n\n        # Change User should not have access to add articles\n        self.client.force_login(self.changeuser)\n        # make sure the view removes test cookie\n        self.assertEqual(self.client.session.test_cookie_worked(), False)\n        response = self.client.get(reverse('admin:admin_views_article_add'))\n        self.assertEqual(response.status_code, 403)\n        # Try POST just to make sure\n        post = self.client.post(reverse('admin:admin_views_article_add'), add_dict)\n        self.assertEqual(post.status_code, 403)\n        self.assertEqual(Article.objects.count(), 3)\n        self.client.get(reverse('admin:logout'))\n\n        # Add user may login and POST to add view, then redirect to admin root\n        self.client.force_login(self.adduser)\n        addpage = self.client.get(reverse('admin:admin_views_article_add'))\n        change_list_link = '&rsaquo; <a href=\"%s\">Articles</a>' % reverse('admin:admin_views_article_changelist')\n        self.assertNotContains(addpage, change_list_link,\n            msg_prefix='User restricted to add permission is given link to change list view in breadcrumbs.')\n        post = self.client.post(reverse('admin:admin_views_article_add'), add_dict)\n        self.assertRedirects(post, self.index_url)\n        self.assertEqual(Article.objects.count(), 4)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a created object')\n        self.client.get(reverse('admin:logout'))\n\n        # Check that the addition was logged correctly\n        addition_log = LogEntry.objects.all()[0]\n        new_article = Article.objects.last()\n        article_ct = ContentType.objects.get_for_model(Article)\n        self.assertEqual(addition_log.user_id, self.adduser.pk)\n        self.assertEqual(addition_log.content_type_id, article_ct.pk)\n        self.assertEqual(addition_log.object_id, str(new_article.pk))\n        self.assertEqual(addition_log.object_repr, \"D\u00f8m ikke\")\n        self.assertEqual(addition_log.action_flag, ADDITION)\n        self.assertEqual(addition_log.change_message, \"Added.\")\n\n        # Super can add too, but is redirected to the change list view\n        self.client.force_login(self.superuser)\n        addpage = self.client.get(reverse('admin:admin_views_article_add'))\n        self.assertContains(addpage, change_list_link,\n            msg_prefix='Unrestricted user is not given link to change list view in breadcrumbs.')\n        post = self.client.post(reverse('admin:admin_views_article_add'), add_dict)\n        self.assertRedirects(post, reverse('admin:admin_views_article_changelist'))\n        self.assertEqual(Article.objects.count(), 5)\n        self.client.get(reverse('admin:logout'))\n\n        # 8509 - if a normal user is already logged in, it is possible\n        # to change user into the superuser without error\n        self.client.force_login(self.joepublicuser)\n        # Check and make sure that if user expires, data still persists\n        self.client.force_login(self.superuser)\n        # make sure the view removes test cookie\n        self.assertEqual(self.client.session.test_cookie_worked(), False)\n\n    def test_change_view(self):\n        \"\"\"Change view should restrict access and allow users to edit items.\"\"\"\n        change_dict = {'title': 'Ikke ford\u00f8mt',\n                       'content': '<p>edited article</p>',\n                       'date_0': '2008-03-18', 'date_1': '10:54:39',\n                       'section': self.s1.pk}\n        article_change_url = reverse('admin:admin_views_article_change', args=(self.a1.pk,))\n        article_changelist_url = reverse('admin:admin_views_article_changelist')\n\n        # add user should not be able to view the list of article or change any of them\n        self.client.force_login(self.adduser)\n        response = self.client.get(article_changelist_url)\n        self.assertEqual(response.status_code, 403)\n        response = self.client.get(article_change_url)\n        self.assertEqual(response.status_code, 403)\n        post = self.client.post(article_change_url, change_dict)\n        self.assertEqual(post.status_code, 403)\n        self.client.get(reverse('admin:logout'))\n\n        # change user can view all items and edit them\n        self.client.force_login(self.changeuser)\n        response = self.client.get(article_changelist_url)\n        self.assertEqual(response.status_code, 200)\n        response = self.client.get(article_change_url)\n        self.assertEqual(response.status_code, 200)\n        post = self.client.post(article_change_url, change_dict)\n        self.assertRedirects(post, article_changelist_url)\n        self.assertEqual(Article.objects.get(pk=self.a1.pk).content, '<p>edited article</p>')\n\n        # one error in form should produce singular error message, multiple errors plural\n        change_dict['title'] = ''\n        post = self.client.post(article_change_url, change_dict)\n        self.assertContains(post, 'Please correct the error below.',\n            msg_prefix='Singular error message not found in response to post with one error')\n\n        change_dict['content'] = ''\n        post = self.client.post(article_change_url, change_dict)\n        self.assertContains(post, 'Please correct the errors below.',\n            msg_prefix='Plural error message not found in response to post with multiple errors')\n        self.client.get(reverse('admin:logout'))\n\n        # Test redirection when using row-level change permissions. Refs #11513.\n        r1 = RowLevelChangePermissionModel.objects.create(id=1, name=\"odd id\")\n        r2 = RowLevelChangePermissionModel.objects.create(id=2, name=\"even id\")\n        change_url_1 = reverse('admin:admin_views_rowlevelchangepermissionmodel_change', args=(r1.pk,))\n        change_url_2 = reverse('admin:admin_views_rowlevelchangepermissionmodel_change', args=(r2.pk,))\n        for login_user in [self.superuser, self.adduser, self.changeuser, self.deleteuser]:\n            self.client.force_login(login_user)\n            response = self.client.get(change_url_1)\n            self.assertEqual(response.status_code, 403)\n            response = self.client.post(change_url_1, {'name': 'changed'})\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=1).name, 'odd id')\n            self.assertEqual(response.status_code, 403)\n            response = self.client.get(change_url_2)\n            self.assertEqual(response.status_code, 200)\n            response = self.client.post(change_url_2, {'name': 'changed'})\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=2).name, 'changed')\n            self.assertRedirects(response, self.index_url)\n            self.client.get(reverse('admin:logout'))\n\n        for login_user in [self.joepublicuser, self.nostaffuser]:\n            self.client.force_login(login_user)\n            response = self.client.get(change_url_1, follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.post(change_url_1, {'name': 'changed'}, follow=True)\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=1).name, 'odd id')\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.get(change_url_2, follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.post(change_url_2, {'name': 'changed again'}, follow=True)\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=2).name, 'changed')\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            self.client.get(reverse('admin:logout'))\n\n    def test_change_view_save_as_new(self):\n        \"\"\"\n        'Save as new' should raise PermissionDenied for users without the 'add'\n        permission.\n        \"\"\"\n        change_dict_save_as_new = {\n            '_saveasnew': 'Save as new',\n            'title': 'Ikke ford\u00f8mt',\n            'content': '<p>edited article</p>',\n            'date_0': '2008-03-18', 'date_1': '10:54:39',\n            'section': self.s1.pk,\n        }\n        article_change_url = reverse('admin:admin_views_article_change', args=(self.a1.pk,))\n\n        # Add user can perform \"Save as new\".\n        article_count = Article.objects.count()\n        self.client.force_login(self.adduser)\n        post = self.client.post(article_change_url, change_dict_save_as_new)\n        self.assertRedirects(post, self.index_url)\n        self.assertEqual(Article.objects.count(), article_count + 1)\n        self.client.logout()\n\n        # Change user cannot perform \"Save as new\" (no 'add' permission).\n        article_count = Article.objects.count()\n        self.client.force_login(self.changeuser)\n        post = self.client.post(article_change_url, change_dict_save_as_new)\n        self.assertEqual(post.status_code, 403)\n        self.assertEqual(Article.objects.count(), article_count)\n\n    def test_delete_view(self):\n        \"\"\"Delete view should restrict access and actually delete items.\"\"\"\n        delete_dict = {'post': 'yes'}\n        delete_url = reverse('admin:admin_views_article_delete', args=(self.a1.pk,))\n\n        # add user should not be able to delete articles\n        self.client.force_login(self.adduser)\n        response = self.client.get(delete_url)\n        self.assertEqual(response.status_code, 403)\n        post = self.client.post(delete_url, delete_dict)\n        self.assertEqual(post.status_code, 403)\n        self.assertEqual(Article.objects.count(), 3)\n        self.client.logout()\n\n        # Delete user can delete\n        self.client.force_login(self.deleteuser)\n        response = self.client.get(reverse('admin:admin_views_section_delete', args=(self.s1.pk,)))\n        self.assertContains(response, \"<h2>Summary</h2>\")\n        self.assertContains(response, \"<li>Articles: 3</li>\")\n        # test response contains link to related Article\n        self.assertContains(response, \"admin_views/article/%s/\" % self.a1.pk)\n\n        response = self.client.get(delete_url)\n        self.assertContains(response, \"admin_views/article/%s/\" % self.a1.pk)\n        self.assertContains(response, \"<h2>Summary</h2>\")\n        self.assertContains(response, \"<li>Articles: 1</li>\")\n        self.assertEqual(response.status_code, 200)\n        post = self.client.post(delete_url, delete_dict)\n        self.assertRedirects(post, self.index_url)\n        self.assertEqual(Article.objects.count(), 2)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a deleted object')\n        article_ct = ContentType.objects.get_for_model(Article)\n        logged = LogEntry.objects.get(content_type=article_ct, action_flag=DELETION)\n        self.assertEqual(logged.object_id, str(self.a1.pk))\n\n    def test_history_view(self):\n        \"\"\"History view should restrict access.\"\"\"\n        # add user should not be able to view the list of article or change any of them\n        self.client.force_login(self.adduser)\n        response = self.client.get(reverse('admin:admin_views_article_history', args=(self.a1.pk,)))\n        self.assertEqual(response.status_code, 403)\n        self.client.get(reverse('admin:logout'))\n\n        # change user can view all items and edit them\n        self.client.force_login(self.changeuser)\n        response = self.client.get(reverse('admin:admin_views_article_history', args=(self.a1.pk,)))\n        self.assertEqual(response.status_code, 200)\n\n        # Test redirection when using row-level change permissions. Refs #11513.\n        rl1 = RowLevelChangePermissionModel.objects.create(name=\"odd id\")\n        rl2 = RowLevelChangePermissionModel.objects.create(name=\"even id\")\n        for login_user in [self.superuser, self.adduser, self.changeuser, self.deleteuser]:\n            self.client.force_login(login_user)\n            url = reverse('admin:admin_views_rowlevelchangepermissionmodel_history', args=(rl1.pk,))\n            response = self.client.get(url)\n            self.assertEqual(response.status_code, 403)\n\n            url = reverse('admin:admin_views_rowlevelchangepermissionmodel_history', args=(rl2.pk,))\n            response = self.client.get(url)\n            self.assertEqual(response.status_code, 200)\n\n            self.client.get(reverse('admin:logout'))\n\n        for login_user in [self.joepublicuser, self.nostaffuser]:\n            self.client.force_login(login_user)\n            url = reverse('admin:admin_views_rowlevelchangepermissionmodel_history', args=(rl1.pk,))\n            response = self.client.get(url, follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            url = reverse('admin:admin_views_rowlevelchangepermissionmodel_history', args=(rl2.pk,))\n            response = self.client.get(url, follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n\n            self.client.get(reverse('admin:logout'))\n\n    def test_history_view_bad_url(self):\n        self.client.force_login(self.changeuser)\n        response = self.client.get(reverse('admin:admin_views_article_history', args=('foo',)))\n        self.assertEqual(response.status_code, 404)\n\n    def test_conditionally_show_add_section_link(self):\n        \"\"\"\n        The foreign key widget should only show the \"add related\" button if the\n        user has permission to add that related item.\n        \"\"\"\n        self.client.force_login(self.adduser)\n        # The user can't add sections yet, so they shouldn't see the \"add section\" link.\n        url = reverse('admin:admin_views_article_add')\n        add_link_text = 'add_id_section'\n        response = self.client.get(url)\n        self.assertNotContains(response, add_link_text)\n        # Allow the user to add sections too. Now they can see the \"add section\" link.\n        user = User.objects.get(username='adduser')\n        perm = get_perm(Section, get_permission_codename('add', Section._meta))\n        user.user_permissions.add(perm)\n        response = self.client.get(url)\n        self.assertContains(response, add_link_text)\n\n    def test_conditionally_show_change_section_link(self):\n        \"\"\"\n        The foreign key widget should only show the \"change related\" button if\n        the user has permission to change that related item.\n        \"\"\"\n        def get_change_related(response):\n            return response.context['adminform'].form.fields['section'].widget.can_change_related\n\n        self.client.force_login(self.adduser)\n        # The user can't change sections yet, so they shouldn't see the \"change section\" link.\n        url = reverse('admin:admin_views_article_add')\n        change_link_text = 'change_id_section'\n        response = self.client.get(url)\n        self.assertFalse(get_change_related(response))\n        self.assertNotContains(response, change_link_text)\n        # Allow the user to change sections too. Now they can see the \"change section\" link.\n        user = User.objects.get(username='adduser')\n        perm = get_perm(Section, get_permission_codename('change', Section._meta))\n        user.user_permissions.add(perm)\n        response = self.client.get(url)\n        self.assertTrue(get_change_related(response))\n        self.assertContains(response, change_link_text)\n\n    def test_conditionally_show_delete_section_link(self):\n        \"\"\"\n        The foreign key widget should only show the \"delete related\" button if\n        the user has permission to delete that related item.\n        \"\"\"\n        def get_delete_related(response):\n            return response.context['adminform'].form.fields['sub_section'].widget.can_delete_related\n\n        self.client.force_login(self.adduser)\n        # The user can't delete sections yet, so they shouldn't see the \"delete section\" link.\n        url = reverse('admin:admin_views_article_add')\n        delete_link_text = 'delete_id_sub_section'\n        response = self.client.get(url)\n        self.assertFalse(get_delete_related(response))\n        self.assertNotContains(response, delete_link_text)\n        # Allow the user to delete sections too. Now they can see the \"delete section\" link.\n        user = User.objects.get(username='adduser')\n        perm = get_perm(Section, get_permission_codename('delete', Section._meta))\n        user.user_permissions.add(perm)\n        response = self.client.get(url)\n        self.assertTrue(get_delete_related(response))\n        self.assertContains(response, delete_link_text)\n\n    def test_disabled_permissions_when_logged_in(self):\n        self.client.force_login(self.superuser)\n        superuser = User.objects.get(username='super')\n        superuser.is_active = False\n        superuser.save()\n\n        response = self.client.get(self.index_url, follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n        self.assertNotContains(response, 'Log out')\n\n        response = self.client.get(reverse('secure_view'), follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n\n    def test_disabled_staff_permissions_when_logged_in(self):\n        self.client.force_login(self.superuser)\n        superuser = User.objects.get(username='super')\n        superuser.is_staff = False\n        superuser.save()\n\n        response = self.client.get(self.index_url, follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n        self.assertNotContains(response, 'Log out')\n\n        response = self.client.get(reverse('secure_view'), follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n\n    def test_app_index_fail_early(self):\n        \"\"\"\n        If a user has no module perms, avoid iterating over all the modeladmins\n        in the registry.\n        \"\"\"\n        opts = Article._meta\n        change_user = User.objects.get(username='changeuser')\n        permission = get_perm(Article, get_permission_codename('change', opts))\n\n        self.client.force_login(self.changeuser)\n\n        # the user has no module permissions, because this module doesn't exist\n        change_user.user_permissions.remove(permission)\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertEqual(response.status_code, 403)\n\n        # the user now has module permissions\n        change_user.user_permissions.add(permission)\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertEqual(response.status_code, 200)\n\n    def test_shortcut_view_only_available_to_staff(self):\n        \"\"\"\n        Only admin users should be able to use the admin shortcut view.\n        \"\"\"\n        model_ctype = ContentType.objects.get_for_model(ModelWithStringPrimaryKey)\n        obj = ModelWithStringPrimaryKey.objects.create(string_pk='foo')\n        shortcut_url = reverse('admin:view_on_site', args=(model_ctype.pk, obj.pk))\n\n        # Not logged in: we should see the login page.\n        response = self.client.get(shortcut_url, follow=True)\n        self.assertTemplateUsed(response, 'admin/login.html')\n\n        # Logged in? Redirect.\n        self.client.force_login(self.superuser)\n        response = self.client.get(shortcut_url, follow=False)\n        # Can't use self.assertRedirects() because User.get_absolute_url() is silly.\n        self.assertEqual(response.status_code, 302)\n        # Domain may depend on contrib.sites tests also run\n        six.assertRegex(self, response.url, 'http://(testserver|example.com)/dummy/foo/')\n\n    def test_has_module_permission(self):\n        \"\"\"\n        Ensure that has_module_permission() returns True for all users who\n        have any permission for that module (add, change, or delete), so that\n        the module is displayed on the admin index page.\n        \"\"\"\n        self.client.force_login(self.superuser)\n        response = self.client.get(self.index_url)\n        self.assertContains(response, 'admin_views')\n        self.assertContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.adduser)\n        response = self.client.get(self.index_url)\n        self.assertContains(response, 'admin_views')\n        self.assertContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.changeuser)\n        response = self.client.get(self.index_url)\n        self.assertContains(response, 'admin_views')\n        self.assertContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.deleteuser)\n        response = self.client.get(self.index_url)\n        self.assertContains(response, 'admin_views')\n        self.assertContains(response, 'Articles')\n\n    def test_overriding_has_module_permission(self):\n        \"\"\"\n        Ensure that overriding has_module_permission() has the desired effect.\n        In this case, it always returns False, so the module should not be\n        displayed on the admin index page for any users.\n        \"\"\"\n        index_url = reverse('admin7:index')\n\n        self.client.force_login(self.superuser)\n        response = self.client.get(index_url)\n        self.assertNotContains(response, 'admin_views')\n        self.assertNotContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.adduser)\n        response = self.client.get(index_url)\n        self.assertNotContains(response, 'admin_views')\n        self.assertNotContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.changeuser)\n        response = self.client.get(index_url)\n        self.assertNotContains(response, 'admin_views')\n        self.assertNotContains(response, 'Articles')\n        self.client.logout()\n\n        self.client.force_login(self.deleteuser)\n        response = self.client.get(index_url)\n        self.assertNotContains(response, 'admin_views')\n        self.assertNotContains(response, 'Articles')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewsNoUrlTest(TestCase):\n    \"\"\"Regression test for #17333\"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.changeuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='changeuser',\n            first_name='Change', last_name='User', email='cuser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n        opts = Report._meta\n        # User who can change Reports\n        cls.changeuser.user_permissions.add(get_perm(Report, get_permission_codename('change', opts)))\n\n    def test_no_standard_modeladmin_urls(self):\n        \"\"\"Admin index views don't break when user's ModelAdmin removes standard urls\"\"\"\n        self.client.force_login(self.changeuser)\n        r = self.client.get(reverse('admin:index'))\n        # we shouldn't get a 500 error caused by a NoReverseMatch\n        self.assertEqual(r.status_code, 200)\n        self.client.get(reverse('admin:logout'))\n\n\n@skipUnlessDBFeature('can_defer_constraint_checks')\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewDeletedObjectsTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.deleteuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='deleteuser',\n            first_name='Delete', last_name='User', email='duser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n        cls.v1 = Villain.objects.create(name='Adam')\n        cls.v2 = Villain.objects.create(name='Sue')\n        cls.sv1 = SuperVillain.objects.create(name='Bob')\n        cls.pl1 = Plot.objects.create(name='World Domination', team_leader=cls.v1, contact=cls.v2)\n        cls.pl2 = Plot.objects.create(name='World Peace', team_leader=cls.v2, contact=cls.v2)\n        cls.pl3 = Plot.objects.create(name='Corn Conspiracy', team_leader=cls.v1, contact=cls.v1)\n        cls.pd1 = PlotDetails.objects.create(details='almost finished', plot=cls.pl1)\n        cls.sh1 = SecretHideout.objects.create(location='underground bunker', villain=cls.v1)\n        cls.sh2 = SecretHideout.objects.create(location='floating castle', villain=cls.sv1)\n        cls.ssh1 = SuperSecretHideout.objects.create(location='super floating castle!', supervillain=cls.sv1)\n        cls.cy1 = CyclicOne.objects.create(name='I am recursive', two_id=1)\n        cls.cy2 = CyclicTwo.objects.create(name='I am recursive too', one_id=1)\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_nesting(self):\n        \"\"\"\n        Objects should be nested to display the relationships that\n        cause them to be scheduled for deletion.\n        \"\"\"\n        pattern = re.compile(\n            force_bytes(\n                r'<li>Plot: <a href=\"%s\">World Domination</a>\\s*<ul>\\s*'\n                r'<li>Plot details: <a href=\"%s\">almost finished</a>' % (\n                    reverse('admin:admin_views_plot_change', args=(self.pl1.pk,)),\n                    reverse('admin:admin_views_plotdetails_change', args=(self.pd1.pk,)),\n                )\n            )\n        )\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v1.pk,)))\n        six.assertRegex(self, response.content, pattern)\n\n    def test_cyclic(self):\n        \"\"\"\n        Cyclic relationships should still cause each object to only be\n        listed once.\n        \"\"\"\n        one = '<li>Cyclic one: <a href=\"%s\">I am recursive</a>' % (\n            reverse('admin:admin_views_cyclicone_change', args=(self.cy1.pk,)),\n        )\n        two = '<li>Cyclic two: <a href=\"%s\">I am recursive too</a>' % (\n            reverse('admin:admin_views_cyclictwo_change', args=(self.cy2.pk,)),\n        )\n        response = self.client.get(reverse('admin:admin_views_cyclicone_delete', args=(self.cy1.pk,)))\n\n        self.assertContains(response, one, 1)\n        self.assertContains(response, two, 1)\n\n    def test_perms_needed(self):\n        self.client.logout()\n        delete_user = User.objects.get(username='deleteuser')\n        delete_user.user_permissions.add(get_perm(Plot,\n            get_permission_codename('delete', Plot._meta)))\n\n        self.assertTrue(self.client.login(username='deleteuser',\n                                          password='secret'))\n\n        response = self.client.get(reverse('admin:admin_views_plot_delete', args=(self.pl1.pk,)))\n        self.assertContains(response, \"your account doesn't have permission to delete the following types of objects\")\n        self.assertContains(response, \"<li>plot details</li>\")\n\n    def test_protected(self):\n        q = Question.objects.create(question=\"Why?\")\n        a1 = Answer.objects.create(question=q, answer=\"Because.\")\n        a2 = Answer.objects.create(question=q, answer=\"Yes.\")\n\n        response = self.client.get(reverse('admin:admin_views_question_delete', args=(q.pk,)))\n        self.assertContains(response, \"would require deleting the following protected related objects\")\n        self.assertContains(\n            response,\n            '<li>Answer: <a href=\"%s\">Because.</a></li>' % reverse('admin:admin_views_answer_change', args=(a1.pk,))\n        )\n        self.assertContains(\n            response,\n            '<li>Answer: <a href=\"%s\">Yes.</a></li>' % reverse('admin:admin_views_answer_change', args=(a2.pk,))\n        )\n\n    def test_not_registered(self):\n        should_contain = \"\"\"<li>Secret hideout: underground bunker\"\"\"\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v1.pk,)))\n        self.assertContains(response, should_contain, 1)\n\n    def test_multiple_fkeys_to_same_model(self):\n        \"\"\"\n        If a deleted object has two relationships from another model,\n        both of those should be followed in looking for related\n        objects to delete.\n        \"\"\"\n        should_contain = '<li>Plot: <a href=\"%s\">World Domination</a>' % reverse(\n            'admin:admin_views_plot_change', args=(self.pl1.pk,)\n        )\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v1.pk,)))\n        self.assertContains(response, should_contain)\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v2.pk,)))\n        self.assertContains(response, should_contain)\n\n    def test_multiple_fkeys_to_same_instance(self):\n        \"\"\"\n        If a deleted object has two relationships pointing to it from\n        another object, the other object should still only be listed\n        once.\n        \"\"\"\n        should_contain = '<li>Plot: <a href=\"%s\">World Peace</a></li>' % reverse(\n            'admin:admin_views_plot_change', args=(self.pl2.pk,)\n        )\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v2.pk,)))\n        self.assertContains(response, should_contain, 1)\n\n    def test_inheritance(self):\n        \"\"\"\n        In the case of an inherited model, if either the child or\n        parent-model instance is deleted, both instances are listed\n        for deletion, as well as any relationships they have.\n        \"\"\"\n        should_contain = [\n            '<li>Villain: <a href=\"%s\">Bob</a>' % reverse('admin:admin_views_villain_change', args=(self.sv1.pk,)),\n            '<li>Super villain: <a href=\"%s\">Bob</a>' % reverse(\n                'admin:admin_views_supervillain_change', args=(self.sv1.pk,)\n            ),\n            '<li>Secret hideout: floating castle',\n            '<li>Super secret hideout: super floating castle!',\n        ]\n        response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.sv1.pk,)))\n        for should in should_contain:\n            self.assertContains(response, should, 1)\n        response = self.client.get(reverse('admin:admin_views_supervillain_delete', args=(self.sv1.pk,)))\n        for should in should_contain:\n            self.assertContains(response, should, 1)\n\n    def test_generic_relations(self):\n        \"\"\"\n        If a deleted object has GenericForeignKeys pointing to it,\n        those objects should be listed for deletion.\n        \"\"\"\n        plot = self.pl3\n        tag = FunkyTag.objects.create(content_object=plot, name='hott')\n        should_contain = '<li>Funky tag: <a href=\"%s\">hott' % reverse(\n            'admin:admin_views_funkytag_change', args=(tag.id,))\n        response = self.client.get(reverse('admin:admin_views_plot_delete', args=(plot.pk,)))\n        self.assertContains(response, should_contain)\n\n    def test_generic_relations_with_related_query_name(self):\n        \"\"\"\n        If a deleted object has GenericForeignKey with\n        GenericRelation(related_query_name='...') pointing to it, those objects\n        should be listed for deletion.\n        \"\"\"\n        bookmark = Bookmark.objects.create(name='djangoproject')\n        tag = FunkyTag.objects.create(content_object=bookmark, name='django')\n        tag_url = reverse('admin:admin_views_funkytag_change', args=(tag.id,))\n        should_contain = '<li>Funky tag: <a href=\"%s\">django' % tag_url\n        response = self.client.get(reverse('admin:admin_views_bookmark_delete', args=(bookmark.pk,)))\n        self.assertContains(response, should_contain)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass TestGenericRelations(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.v1 = Villain.objects.create(name='Adam')\n        cls.pl3 = Plot.objects.create(name='Corn Conspiracy', team_leader=cls.v1, contact=cls.v1)\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_generic_content_object_in_list_display(self):\n        FunkyTag.objects.create(content_object=self.pl3, name='hott')\n        response = self.client.get(reverse('admin:admin_views_funkytag_changelist'))\n        self.assertContains(response, \"%s</td>\" % self.pl3)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewStringPrimaryKeyTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n        cls.pk = (\n            \"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 \"\n            \"\"\"-_.!~*'() ;/?:@&=+$, <>#%\" {}|\\^[]`\"\"\"\n        )\n        cls.m1 = ModelWithStringPrimaryKey.objects.create(string_pk=cls.pk)\n        content_type_pk = ContentType.objects.get_for_model(ModelWithStringPrimaryKey).pk\n        user_pk = cls.superuser.pk\n        LogEntry.objects.log_action(user_pk, content_type_pk, cls.pk, cls.pk, 2, change_message='Changed something')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_get_history_view(self):\n        \"\"\"\n        Retrieving the history for an object using urlencoded form of primary\n        key should work.\n        Refs #12349, #18550.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_modelwithstringprimarykey_history', args=(self.pk,)))\n        self.assertContains(response, escape(self.pk))\n        self.assertContains(response, 'Changed something')\n        self.assertEqual(response.status_code, 200)\n\n    def test_get_change_view(self):\n        \"Retrieving the object using urlencoded form of primary key should work\"\n        response = self.client.get(reverse('admin:admin_views_modelwithstringprimarykey_change', args=(self.pk,)))\n        self.assertContains(response, escape(self.pk))\n        self.assertEqual(response.status_code, 200)\n\n    def test_changelist_to_changeform_link(self):\n        \"Link to the changeform of the object in changelist should use reverse() and be quoted -- #18072\"\n        response = self.client.get(reverse('admin:admin_views_modelwithstringprimarykey_changelist'))\n        # this URL now comes through reverse(), thus url quoting and iri_to_uri encoding\n        pk_final_url = escape(iri_to_uri(quote(self.pk)))\n        change_url = reverse(\n            'admin:admin_views_modelwithstringprimarykey_change', args=('__fk__',)\n        ).replace('__fk__', pk_final_url)\n        should_contain = '<th class=\"field-__str__\"><a href=\"%s\">%s</a></th>' % (change_url, escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_recentactions_link(self):\n        \"The link from the recent actions list referring to the changeform of the object should be quoted\"\n        response = self.client.get(reverse('admin:index'))\n        link = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(self.pk),))\n        should_contain = \"\"\"<a href=\"%s\">%s</a>\"\"\" % (escape(link), escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_recentactions_without_content_type(self):\n        \"If a LogEntry is missing content_type it will not display it in span tag under the hyperlink.\"\n        response = self.client.get(reverse('admin:index'))\n        link = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(self.pk),))\n        should_contain = \"\"\"<a href=\"%s\">%s</a>\"\"\" % (escape(link), escape(self.pk))\n        self.assertContains(response, should_contain)\n        should_contain = \"Model with string primary key\"  # capitalized in Recent Actions\n        self.assertContains(response, should_contain)\n        logentry = LogEntry.objects.get(content_type__model__iexact='modelwithstringprimarykey')\n        # http://code.djangoproject.com/ticket/10275\n        # if the log entry doesn't have a content type it should still be\n        # possible to view the Recent Actions part\n        logentry.content_type = None\n        logentry.save()\n\n        counted_presence_before = response.content.count(force_bytes(should_contain))\n        response = self.client.get(reverse('admin:index'))\n        counted_presence_after = response.content.count(force_bytes(should_contain))\n        self.assertEqual(counted_presence_before - 1,\n            counted_presence_after)\n\n    def test_logentry_get_admin_url(self):\n        \"\"\"\n        LogEntry.get_admin_url returns a URL to edit the entry's object or\n        None for non-existent (possibly deleted) models.\n        \"\"\"\n        log_entry_model = \"modelwithstringprimarykey\"  # capitalized in Recent Actions\n        logentry = LogEntry.objects.get(content_type__model__iexact=log_entry_model)\n        desired_admin_url = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(self.pk),))\n\n        self.assertEqual(logentry.get_admin_url(), desired_admin_url)\n        self.assertIn(iri_to_uri(quote(self.pk)), logentry.get_admin_url())\n\n        logentry.content_type.model = \"non-existent\"\n        self.assertEqual(logentry.get_admin_url(), None)\n\n    def test_logentry_get_edited_object(self):\n        \"LogEntry.get_edited_object returns the edited object of a given LogEntry object\"\n        logentry = LogEntry.objects.get(content_type__model__iexact=\"modelwithstringprimarykey\")\n        edited_obj = logentry.get_edited_object()\n        self.assertEqual(logentry.object_id, str(edited_obj.pk))\n\n    def test_logentry_save(self):\n        \"\"\"\n        LogEntry.action_time is a timestamp of the date when the entry was\n        created. It shouldn't be updated on a subsequent save().\n        \"\"\"\n        logentry = LogEntry.objects.get(content_type__model__iexact=\"modelwithstringprimarykey\")\n        action_time = logentry.action_time\n        logentry.save()\n        self.assertEqual(logentry.action_time, action_time)\n\n    def test_deleteconfirmation_link(self):\n        \"The link from the delete confirmation page referring back to the changeform of the object should be quoted\"\n        url = reverse('admin:admin_views_modelwithstringprimarykey_delete', args=(quote(self.pk),))\n        response = self.client.get(url)\n        # this URL now comes through reverse(), thus url quoting and iri_to_uri encoding\n        change_url = reverse(\n            'admin:admin_views_modelwithstringprimarykey_change', args=('__fk__',)\n        ).replace('__fk__', escape(iri_to_uri(quote(self.pk))))\n        should_contain = '<a href=\"%s\">%s</a>' % (change_url, escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_url_conflicts_with_add(self):\n        \"A model with a primary key that ends with add or is `add` should be visible\"\n        add_model = ModelWithStringPrimaryKey.objects.create(pk=\"i have something to add\")\n        add_model.save()\n        response = self.client.get(\n            reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(add_model.pk),))\n        )\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n        add_model2 = ModelWithStringPrimaryKey.objects.create(pk=\"add\")\n        add_url = reverse('admin:admin_views_modelwithstringprimarykey_add')\n        change_url = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(add_model2.pk),))\n        self.assertNotEqual(add_url, change_url)\n\n    def test_url_conflicts_with_delete(self):\n        \"A model with a primary key that ends with delete should be visible\"\n        delete_model = ModelWithStringPrimaryKey(pk=\"delete\")\n        delete_model.save()\n        response = self.client.get(\n            reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(delete_model.pk),))\n        )\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n    def test_url_conflicts_with_history(self):\n        \"A model with a primary key that ends with history should be visible\"\n        history_model = ModelWithStringPrimaryKey(pk=\"history\")\n        history_model.save()\n        response = self.client.get(\n            reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(history_model.pk),))\n        )\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n    def test_shortcut_view_with_escaping(self):\n        \"'View on site should' work properly with char fields\"\n        model = ModelWithStringPrimaryKey(pk='abc_123')\n        model.save()\n        response = self.client.get(\n            reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(model.pk),))\n        )\n        should_contain = '/%s/\" class=\"viewsitelink\">' % model.pk\n        self.assertContains(response, should_contain)\n\n    def test_change_view_history_link(self):\n        \"\"\"Object history button link should work and contain the pk value quoted.\"\"\"\n        url = reverse('admin:%s_modelwithstringprimarykey_change' %\n            ModelWithStringPrimaryKey._meta.app_label,\n            args=(quote(self.pk),))\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        expected_link = reverse('admin:%s_modelwithstringprimarykey_history' %\n            ModelWithStringPrimaryKey._meta.app_label,\n            args=(quote(self.pk),))\n        self.assertContains(response, '<a href=\"%s\" class=\"historylink\"' % escape(expected_link))\n\n    def test_redirect_on_add_view_continue_button(self):\n        \"\"\"As soon as an object is added using \"Save and continue editing\"\n        button, the user should be redirected to the object's change_view.\n\n        In case primary key is a string containing some special characters\n        like slash or underscore, these characters must be escaped (see #22266)\n        \"\"\"\n        response = self.client.post(\n            reverse('admin:admin_views_modelwithstringprimarykey_add'),\n            {\n                'string_pk': '123/history',\n                \"_continue\": \"1\",  # Save and continue editing\n            }\n        )\n\n        self.assertEqual(response.status_code, 302)  # temporary redirect\n        self.assertIn('/123_2Fhistory/', response['location'])  # PK is quoted\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass SecureViewTests(TestCase):\n    \"\"\"\n    Test behavior of a view protected by the staff_member_required decorator.\n    \"\"\"\n\n    def test_secure_view_shows_login_if_not_logged_in(self):\n        \"\"\"\n        Ensure that we see the admin login form.\n        \"\"\"\n        secure_url = reverse('secure_view')\n        response = self.client.get(secure_url)\n        self.assertRedirects(response, '%s?next=%s' % (reverse('admin:login'), secure_url))\n        response = self.client.get(secure_url, follow=True)\n        self.assertTemplateUsed(response, 'admin/login.html')\n        self.assertEqual(response.context[REDIRECT_FIELD_NAME], secure_url)\n\n    def test_staff_member_required_decorator_works_with_argument(self):\n        \"\"\"\n        Ensure that staff_member_required decorator works with an argument\n        (redirect_field_name).\n        \"\"\"\n        secure_url = '/test_admin/admin/secure-view2/'\n        response = self.client.get(secure_url)\n        self.assertRedirects(response, '%s?myfield=%s' % (reverse('admin:login'), secure_url))\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewUnicodeTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.b1 = Book.objects.create(name='L\u00e6rdommer')\n        cls.p1 = Promo.objects.create(name='<Promo for L\u00e6rdommer>', book=cls.b1)\n        cls.chap1 = Chapter.objects.create(\n            title='Norske bostaver \u00e6\u00f8\u00e5 skaper problemer', content='<p>Sv\u00e6rt frustrerende med UnicodeDecodeErro</p>',\n            book=cls.b1\n        )\n        cls.chap2 = Chapter.objects.create(\n            title='Kj\u00e6rlighet', content='<p>La kj\u00e6rligheten til de lidende seire.</p>', book=cls.b1)\n        cls.chap3 = Chapter.objects.create(title='Kj\u00e6rlighet', content='<p>Noe innhold</p>', book=cls.b1)\n        cls.chap4 = ChapterXtra1.objects.create(chap=cls.chap1, xtra='<Xtra(1) Norske bostaver \u00e6\u00f8\u00e5 skaper problemer>')\n        cls.chap5 = ChapterXtra1.objects.create(chap=cls.chap2, xtra='<Xtra(1) Kj\u00e6rlighet>')\n        cls.chap6 = ChapterXtra1.objects.create(chap=cls.chap3, xtra='<Xtra(1) Kj\u00e6rlighet>')\n        cls.chap7 = ChapterXtra2.objects.create(chap=cls.chap1, xtra='<Xtra(2) Norske bostaver \u00e6\u00f8\u00e5 skaper problemer>')\n        cls.chap8 = ChapterXtra2.objects.create(chap=cls.chap2, xtra='<Xtra(2) Kj\u00e6rlighet>')\n        cls.chap9 = ChapterXtra2.objects.create(chap=cls.chap3, xtra='<Xtra(2) Kj\u00e6rlighet>')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_unicode_edit(self):\n        \"\"\"\n        A test to ensure that POST on edit_view handles non-ASCII characters.\n        \"\"\"\n        post_data = {\n            \"name\": \"Test l\u00e6rdommer\",\n            # inline data\n            \"chapter_set-TOTAL_FORMS\": \"6\",\n            \"chapter_set-INITIAL_FORMS\": \"3\",\n            \"chapter_set-MAX_NUM_FORMS\": \"0\",\n            \"chapter_set-0-id\": self.chap1.pk,\n            \"chapter_set-0-title\": \"Norske bostaver \u00e6\u00f8\u00e5 skaper problemer\",\n            \"chapter_set-0-content\": \"&lt;p&gt;Sv\u00e6rt frustrerende med UnicodeDecodeError&lt;/p&gt;\",\n            \"chapter_set-1-id\": self.chap2.id,\n            \"chapter_set-1-title\": \"Kj\u00e6rlighet.\",\n            \"chapter_set-1-content\": \"&lt;p&gt;La kj\u00e6rligheten til de lidende seire.&lt;/p&gt;\",\n            \"chapter_set-2-id\": self.chap3.id,\n            \"chapter_set-2-title\": \"Need a title.\",\n            \"chapter_set-2-content\": \"&lt;p&gt;Newest content&lt;/p&gt;\",\n            \"chapter_set-3-id\": \"\",\n            \"chapter_set-3-title\": \"\",\n            \"chapter_set-3-content\": \"\",\n            \"chapter_set-4-id\": \"\",\n            \"chapter_set-4-title\": \"\",\n            \"chapter_set-4-content\": \"\",\n            \"chapter_set-5-id\": \"\",\n            \"chapter_set-5-title\": \"\",\n            \"chapter_set-5-content\": \"\",\n        }\n\n        response = self.client.post(reverse('admin:admin_views_book_change', args=(self.b1.pk,)), post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_unicode_delete(self):\n        \"\"\"\n        Ensure that the delete_view handles non-ASCII characters\n        \"\"\"\n        delete_dict = {'post': 'yes'}\n        delete_url = reverse('admin:admin_views_book_delete', args=(self.b1.pk,))\n        response = self.client.get(delete_url)\n        self.assertEqual(response.status_code, 200)\n        response = self.client.post(delete_url, delete_dict)\n        self.assertRedirects(response, reverse('admin:admin_views_book_changelist'))\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewListEditable(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n        cls.per1 = Person.objects.create(name='John Mauchly', gender=1, alive=True)\n        cls.per2 = Person.objects.create(name='Grace Hopper', gender=1, alive=False)\n        cls.per3 = Person.objects.create(name='Guido van Rossum', gender=1, alive=True)\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_inheritance(self):\n        Podcast.objects.create(name=\"This Week in Django\",\n            release_date=datetime.date.today())\n        response = self.client.get(reverse('admin:admin_views_podcast_changelist'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_inheritance_2(self):\n        Vodcast.objects.create(name=\"This Week in Django\", released=True)\n        response = self.client.get(reverse('admin:admin_views_vodcast_changelist'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_custom_pk(self):\n        Language.objects.create(iso='en', name='English', english_name='English')\n        response = self.client.get(reverse('admin:admin_views_language_changelist'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_changelist_input_html(self):\n        response = self.client.get(reverse('admin:admin_views_person_changelist'))\n        # 2 inputs per object(the field and the hidden id field) = 6\n        # 4 management hidden fields = 4\n        # 4 action inputs (3 regular checkboxes, 1 checkbox to select all)\n        # main form submit button = 1\n        # search field and search submit button = 2\n        # CSRF field = 1\n        # field to track 'select all' across paginated views = 1\n        # 6 + 4 + 4 + 1 + 2 + 1 + 1 = 19 inputs\n        self.assertContains(response, \"<input\", count=19)\n        # 1 select per object = 3 selects\n        self.assertContains(response, \"<select\", count=4)\n\n    def test_post_messages(self):\n        # Ticket 12707: Saving inline editable should not show admin\n        # action warnings\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"%s\" % self.per1.pk,\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"%s\" % self.per2.pk,\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"%s\" % self.per3.pk,\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_person_changelist'),\n                                    data, follow=True)\n        self.assertEqual(len(response.context['messages']), 1)\n\n    def test_post_submission(self):\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"%s\" % self.per1.pk,\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"%s\" % self.per2.pk,\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"%s\" % self.per3.pk,\n\n            \"_save\": \"Save\",\n        }\n        self.client.post(reverse('admin:admin_views_person_changelist'), data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 2)\n\n        # test a filtered page\n        data = {\n            \"form-TOTAL_FORMS\": \"2\",\n            \"form-INITIAL_FORMS\": \"2\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"%s\" % self.per1.pk,\n            \"form-0-gender\": \"1\",\n            \"form-0-alive\": \"checked\",\n\n            \"form-1-id\": \"%s\" % self.per3.pk,\n            \"form-1-gender\": \"1\",\n            \"form-1-alive\": \"checked\",\n\n            \"_save\": \"Save\",\n        }\n        self.client.post(reverse('admin:admin_views_person_changelist') + '?gender__exact=1', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, True)\n\n        # test a searched page\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"%s\" % self.per1.pk,\n            \"form-0-gender\": \"1\",\n\n            \"_save\": \"Save\",\n        }\n        self.client.post(reverse('admin:admin_views_person_changelist') + '?q=john', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n\n    def test_non_field_errors(self):\n        ''' Ensure that non field errors are displayed for each of the\n            forms in the changelist's formset. Refs #13126.\n        '''\n        fd1 = FoodDelivery.objects.create(reference='123', driver='bill', restaurant='thai')\n        fd2 = FoodDelivery.objects.create(reference='456', driver='bill', restaurant='india')\n        fd3 = FoodDelivery.objects.create(reference='789', driver='bill', restaurant='pizza')\n\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": str(fd1.id),\n            \"form-0-reference\": \"123\",\n            \"form-0-driver\": \"bill\",\n            \"form-0-restaurant\": \"thai\",\n\n            # Same data as above: Forbidden because of unique_together!\n            \"form-1-id\": str(fd2.id),\n            \"form-1-reference\": \"456\",\n            \"form-1-driver\": \"bill\",\n            \"form-1-restaurant\": \"thai\",\n\n            \"form-2-id\": str(fd3.id),\n            \"form-2-reference\": \"789\",\n            \"form-2-driver\": \"bill\",\n            \"form-2-restaurant\": \"pizza\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_fooddelivery_changelist'), data)\n        self.assertContains(\n            response,\n            '<tr><td colspan=\"4\"><ul class=\"errorlist nonfield\"><li>Food delivery '\n            'with this Driver and Restaurant already exists.</li></ul></td></tr>',\n            1,\n            html=True\n        )\n\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": str(fd1.id),\n            \"form-0-reference\": \"123\",\n            \"form-0-driver\": \"bill\",\n            \"form-0-restaurant\": \"thai\",\n\n            # Same data as above: Forbidden because of unique_together!\n            \"form-1-id\": str(fd2.id),\n            \"form-1-reference\": \"456\",\n            \"form-1-driver\": \"bill\",\n            \"form-1-restaurant\": \"thai\",\n\n            # Same data also.\n            \"form-2-id\": str(fd3.id),\n            \"form-2-reference\": \"789\",\n            \"form-2-driver\": \"bill\",\n            \"form-2-restaurant\": \"thai\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_fooddelivery_changelist'), data)\n        self.assertContains(\n            response,\n            '<tr><td colspan=\"4\"><ul class=\"errorlist nonfield\"><li>Food delivery '\n            'with this Driver and Restaurant already exists.</li></ul></td></tr>',\n            2,\n            html=True\n        )\n\n    def test_non_form_errors(self):\n        # test if non-form errors are handled; ticket #12716\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"%s\" % self.per2.pk,\n            \"form-0-alive\": \"1\",\n            \"form-0-gender\": \"2\",\n\n            # Ensure that the form processing understands this as a list_editable \"Save\"\n            # and not an action \"Go\".\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n        self.assertContains(response, \"Grace is not a Zombie\")\n\n    def test_non_form_errors_is_errorlist(self):\n        # test if non-form errors are correctly handled; ticket #12878\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"%s\" % self.per2.pk,\n            \"form-0-alive\": \"1\",\n            \"form-0-gender\": \"2\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n        non_form_errors = response.context['cl'].formset.non_form_errors()\n        self.assertIsInstance(non_form_errors, ErrorList)\n        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n\n    def test_list_editable_ordering(self):\n        collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n\n        Category.objects.create(id=1, order=1, collector=collector)\n        Category.objects.create(id=2, order=2, collector=collector)\n        Category.objects.create(id=3, order=0, collector=collector)\n        Category.objects.create(id=4, order=0, collector=collector)\n\n        # NB: The order values must be changed so that the items are reordered.\n        data = {\n            \"form-TOTAL_FORMS\": \"4\",\n            \"form-INITIAL_FORMS\": \"4\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-order\": \"14\",\n            \"form-0-id\": \"1\",\n            \"form-0-collector\": \"1\",\n\n            \"form-1-order\": \"13\",\n            \"form-1-id\": \"2\",\n            \"form-1-collector\": \"1\",\n\n            \"form-2-order\": \"1\",\n            \"form-2-id\": \"3\",\n            \"form-2-collector\": \"1\",\n\n            \"form-3-order\": \"0\",\n            \"form-3-id\": \"4\",\n            \"form-3-collector\": \"1\",\n\n            # Ensure that the form processing understands this as a list_editable \"Save\"\n            # and not an action \"Go\".\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_category_changelist'), data)\n        # Successful post will redirect\n        self.assertEqual(response.status_code, 302)\n\n        # Check that the order values have been applied to the right objects\n        self.assertEqual(Category.objects.get(id=1).order, 14)\n        self.assertEqual(Category.objects.get(id=2).order, 13)\n        self.assertEqual(Category.objects.get(id=3).order, 1)\n        self.assertEqual(Category.objects.get(id=4).order, 0)\n\n    def test_list_editable_pagination(self):\n        \"\"\"\n        Ensure that pagination works for list_editable items.\n        Refs #16819.\n        \"\"\"\n        UnorderedObject.objects.create(id=1, name='Unordered object #1')\n        UnorderedObject.objects.create(id=2, name='Unordered object #2')\n        UnorderedObject.objects.create(id=3, name='Unordered object #3')\n        response = self.client.get(reverse('admin:admin_views_unorderedobject_changelist'))\n        self.assertContains(response, 'Unordered object #3')\n        self.assertContains(response, 'Unordered object #2')\n        self.assertNotContains(response, 'Unordered object #1')\n        response = self.client.get(reverse('admin:admin_views_unorderedobject_changelist') + '?p=1')\n        self.assertNotContains(response, 'Unordered object #3')\n        self.assertNotContains(response, 'Unordered object #2')\n        self.assertContains(response, 'Unordered object #1')\n\n    def test_list_editable_action_submit(self):\n        # List editable changes should not be executed if the action \"Go\" button is\n        # used to submit the form.\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"1\",\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"2\",\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"3\",\n\n            \"index\": \"0\",\n            \"_selected_action\": ['3'],\n            \"action\": ['', 'delete_selected'],\n        }\n        self.client.post(reverse('admin:admin_views_person_changelist'), data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, True)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 1)\n\n    def test_list_editable_action_choices(self):\n        # List editable changes should be executed if the \"Save\" button is\n        # used to submit the form - any action choices should be ignored.\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"%s\" % self.per1.pk,\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"%s\" % self.per2.pk,\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"%s\" % self.per3.pk,\n\n            \"_save\": \"Save\",\n            \"_selected_action\": ['1'],\n            \"action\": ['', 'delete_selected'],\n        }\n        self.client.post(reverse('admin:admin_views_person_changelist'), data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 2)\n\n    def test_list_editable_popup(self):\n        \"\"\"\n        Fields should not be list-editable in popups.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_person_changelist'))\n        self.assertNotEqual(response.context['cl'].list_editable, ())\n        response = self.client.get(reverse('admin:admin_views_person_changelist') + '?%s' % IS_POPUP_VAR)\n        self.assertEqual(response.context['cl'].list_editable, ())\n\n    def test_pk_hidden_fields(self):\n        \"\"\" Ensure that hidden pk fields aren't displayed in the table body and\n            that their corresponding human-readable value is displayed instead.\n            Note that the hidden pk fields are in fact be displayed but\n            separately (not in the table), and only once.\n            Refs #12475.\n        \"\"\"\n        story1 = Story.objects.create(title='The adventures of Guido', content='Once upon a time in Djangoland...')\n        story2 = Story.objects.create(\n            title='Crouching Tiger, Hidden Python',\n            content='The Python was sneaking into...',\n        )\n        response = self.client.get(reverse('admin:admin_views_story_changelist'))\n        # Only one hidden field, in a separate place than the table.\n        self.assertContains(response, 'id=\"id_form-0-id\"', 1)\n        self.assertContains(response, 'id=\"id_form-1-id\"', 1)\n        self.assertContains(\n            response,\n            '<div class=\"hiddenfields\">\\n'\n            '<input type=\"hidden\" name=\"form-0-id\" value=\"%d\" id=\"id_form-0-id\" />'\n            '<input type=\"hidden\" name=\"form-1-id\" value=\"%d\" id=\"id_form-1-id\" />\\n</div>'\n            % (story2.id, story1.id),\n            html=True\n        )\n        self.assertContains(response, '<td class=\"field-id\">%d</td>' % story1.id, 1)\n        self.assertContains(response, '<td class=\"field-id\">%d</td>' % story2.id, 1)\n\n    def test_pk_hidden_fields_with_list_display_links(self):\n        \"\"\" Similarly as test_pk_hidden_fields, but when the hidden pk fields are\n            referenced in list_display_links.\n            Refs #12475.\n        \"\"\"\n        story1 = OtherStory.objects.create(\n            title='The adventures of Guido',\n            content='Once upon a time in Djangoland...',\n        )\n        story2 = OtherStory.objects.create(\n            title='Crouching Tiger, Hidden Python',\n            content='The Python was sneaking into...',\n        )\n        link1 = reverse('admin:admin_views_otherstory_change', args=(story1.pk,))\n        link2 = reverse('admin:admin_views_otherstory_change', args=(story2.pk,))\n        response = self.client.get(reverse('admin:admin_views_otherstory_changelist'))\n        # Only one hidden field, in a separate place than the table.\n        self.assertContains(response, 'id=\"id_form-0-id\"', 1)\n        self.assertContains(response, 'id=\"id_form-1-id\"', 1)\n        self.assertContains(\n            response,\n            '<div class=\"hiddenfields\">\\n'\n            '<input type=\"hidden\" name=\"form-0-id\" value=\"%d\" id=\"id_form-0-id\" />'\n            '<input type=\"hidden\" name=\"form-1-id\" value=\"%d\" id=\"id_form-1-id\" />\\n</div>'\n            % (story2.id, story1.id),\n            html=True\n        )\n        self.assertContains(response, '<th class=\"field-id\"><a href=\"%s\">%d</a></th>' % (link1, story1.id), 1)\n        self.assertContains(response, '<th class=\"field-id\"><a href=\"%s\">%d</a></th>' % (link2, story2.id), 1)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminSearchTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.joepublicuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='joepublic',\n            first_name='Joe', last_name='Public', email='joepublic@example.com',\n            is_staff=False, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n        cls.per1 = Person.objects.create(name='John Mauchly', gender=1, alive=True)\n        cls.per2 = Person.objects.create(name='Grace Hopper', gender=1, alive=False)\n        cls.per3 = Person.objects.create(name='Guido van Rossum', gender=1, alive=True)\n\n        cls.t1 = Recommender.objects.create()\n        cls.t2 = Recommendation.objects.create(recommender=cls.t1)\n        cls.t3 = Recommender.objects.create()\n        cls.t4 = Recommendation.objects.create(recommender=cls.t3)\n\n        cls.tt1 = TitleTranslation.objects.create(title=cls.t1, text='Bar')\n        cls.tt2 = TitleTranslation.objects.create(title=cls.t2, text='Foo')\n        cls.tt3 = TitleTranslation.objects.create(title=cls.t3, text='Few')\n        cls.tt4 = TitleTranslation.objects.create(title=cls.t4, text='Bas')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_search_on_sibling_models(self):\n        \"Check that a search that mentions sibling models\"\n        response = self.client.get(reverse('admin:admin_views_recommendation_changelist') + '?q=bar')\n        # confirm the search returned 1 object\n        self.assertContains(response, \"\\n1 recommendation\\n\")\n\n    def test_with_fk_to_field(self):\n        \"\"\"\n        Ensure that the to_field GET parameter is preserved when a search\n        is performed. Refs #10918.\n        \"\"\"\n        response = self.client.get(reverse('admin:auth_user_changelist') + '?q=joe&%s=id' % TO_FIELD_VAR)\n        self.assertContains(response, \"\\n1 user\\n\")\n        self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)\n\n    def test_exact_matches(self):\n        response = self.client.get(reverse('admin:admin_views_recommendation_changelist') + '?q=bar')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 recommendation\\n\")\n\n        response = self.client.get(reverse('admin:admin_views_recommendation_changelist') + '?q=ba')\n        # confirm the search returned zero objects\n        self.assertContains(response, \"\\n0 recommendations\\n\")\n\n    def test_beginning_matches(self):\n        response = self.client.get(reverse('admin:admin_views_person_changelist') + '?q=Gui')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 person\\n\")\n        self.assertContains(response, \"Guido\")\n\n        response = self.client.get(reverse('admin:admin_views_person_changelist') + '?q=uido')\n        # confirm the search returned zero objects\n        self.assertContains(response, \"\\n0 persons\\n\")\n        self.assertNotContains(response, \"Guido\")\n\n    def test_pluggable_search(self):\n        PluggableSearchPerson.objects.create(name=\"Bob\", age=10)\n        PluggableSearchPerson.objects.create(name=\"Amy\", age=20)\n\n        response = self.client.get(reverse('admin:admin_views_pluggablesearchperson_changelist') + '?q=Bob')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 pluggable search person\\n\")\n        self.assertContains(response, \"Bob\")\n\n        response = self.client.get(reverse('admin:admin_views_pluggablesearchperson_changelist') + '?q=20')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 pluggable search person\\n\")\n        self.assertContains(response, \"Amy\")\n\n    def test_reset_link(self):\n        \"\"\"\n        Test presence of reset link in search bar (\"1 result (_x total_)\").\n        \"\"\"\n        #   1 query for session + 1 for fetching user\n        # + 1 for filtered result + 1 for filtered count\n        # + 1 for total count\n        with self.assertNumQueries(5):\n            response = self.client.get(reverse('admin:admin_views_person_changelist') + '?q=Gui')\n        self.assertContains(response,\n            \"\"\"<span class=\"small quiet\">1 result (<a href=\"?\">3 total</a>)</span>\"\"\",\n            html=True)\n\n    def test_no_total_count(self):\n        \"\"\"\n        #8408 -- \"Show all\" should be displayed instead of the total count if\n        ModelAdmin.show_full_result_count is False.\n        \"\"\"\n        #   1 query for session + 1 for fetching user\n        # + 1 for filtered result + 1 for filtered count\n        with self.assertNumQueries(4):\n            response = self.client.get(reverse('admin:admin_views_recommendation_changelist') + '?q=bar')\n        self.assertContains(response,\n            \"\"\"<span class=\"small quiet\">1 result (<a href=\"?\">Show all</a>)</span>\"\"\",\n            html=True)\n        self.assertTrue(response.context['cl'].show_admin_actions)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminInheritedInlinesTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_inline(self):\n        \"Ensure that inline models which inherit from a common parent are correctly handled by admin.\"\n        foo_user = \"foo username\"\n        bar_user = \"bar username\"\n\n        name_re = re.compile(b'name=\"(.*?)\"')\n\n        # test the add case\n        response = self.client.get(reverse('admin:admin_views_persona_add'))\n        names = name_re.findall(response.content)\n        # make sure we have no duplicate HTML names\n        self.assertEqual(len(names), len(set(names)))\n\n        # test the add case\n        post_data = {\n            \"name\": \"Test Name\",\n            # inline data\n            \"accounts-TOTAL_FORMS\": \"1\",\n            \"accounts-INITIAL_FORMS\": \"0\",\n            \"accounts-MAX_NUM_FORMS\": \"0\",\n            \"accounts-0-username\": foo_user,\n            \"accounts-2-TOTAL_FORMS\": \"1\",\n            \"accounts-2-INITIAL_FORMS\": \"0\",\n            \"accounts-2-MAX_NUM_FORMS\": \"0\",\n            \"accounts-2-0-username\": bar_user,\n        }\n\n        response = self.client.post(reverse('admin:admin_views_persona_add'), post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n        self.assertEqual(Persona.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.count(), 1)\n        self.assertEqual(BarAccount.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.all()[0].username, foo_user)\n        self.assertEqual(BarAccount.objects.all()[0].username, bar_user)\n        self.assertEqual(Persona.objects.all()[0].accounts.count(), 2)\n\n        persona_id = Persona.objects.all()[0].id\n        foo_id = FooAccount.objects.all()[0].id\n        bar_id = BarAccount.objects.all()[0].id\n\n        # test the edit case\n\n        response = self.client.get(reverse('admin:admin_views_persona_change', args=(persona_id,)))\n        names = name_re.findall(response.content)\n        # make sure we have no duplicate HTML names\n        self.assertEqual(len(names), len(set(names)))\n\n        post_data = {\n            \"name\": \"Test Name\",\n\n            \"accounts-TOTAL_FORMS\": \"2\",\n            \"accounts-INITIAL_FORMS\": \"1\",\n            \"accounts-MAX_NUM_FORMS\": \"0\",\n\n            \"accounts-0-username\": \"%s-1\" % foo_user,\n            \"accounts-0-account_ptr\": str(foo_id),\n            \"accounts-0-persona\": str(persona_id),\n\n            \"accounts-2-TOTAL_FORMS\": \"2\",\n            \"accounts-2-INITIAL_FORMS\": \"1\",\n            \"accounts-2-MAX_NUM_FORMS\": \"0\",\n\n            \"accounts-2-0-username\": \"%s-1\" % bar_user,\n            \"accounts-2-0-account_ptr\": str(bar_id),\n            \"accounts-2-0-persona\": str(persona_id),\n        }\n        response = self.client.post(reverse('admin:admin_views_persona_change', args=(persona_id,)), post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Persona.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.count(), 1)\n        self.assertEqual(BarAccount.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.all()[0].username, \"%s-1\" % foo_user)\n        self.assertEqual(BarAccount.objects.all()[0].username, \"%s-1\" % bar_user)\n        self.assertEqual(Persona.objects.all()[0].accounts.count(), 2)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminActionsTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = ExternalSubscriber.objects.create(name='John Doe', email='john@example.org')\n        cls.s2 = Subscriber.objects.create(name='Max Mustermann', email='max@example.org')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_model_admin_custom_action(self):\n        \"Tests a custom action defined in a ModelAdmin method\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'mail_admin',\n            'index': 0,\n        }\n        self.client.post(reverse('admin:admin_views_subscriber_changelist'), action_data)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a ModelAdmin action')\n\n    def test_model_admin_default_delete_action(self):\n        \"Tests the default delete action defined as a ModelAdmin method\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        delete_confirmation_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': 'delete_selected',\n            'post': 'yes',\n        }\n        confirmation = self.client.post(reverse('admin:admin_views_subscriber_changelist'), action_data)\n        self.assertIsInstance(confirmation, TemplateResponse)\n        self.assertContains(confirmation, \"Are you sure you want to delete the selected subscribers?\")\n        self.assertContains(confirmation, \"<h2>Summary</h2>\")\n        self.assertContains(confirmation, \"<li>Subscribers: 2</li>\")\n        self.assertContains(confirmation, \"<li>External subscribers: 1</li>\")\n        self.assertContains(confirmation, ACTION_CHECKBOX_NAME, count=2)\n        self.client.post(reverse('admin:admin_views_subscriber_changelist'), delete_confirmation_data)\n        self.assertEqual(Subscriber.objects.count(), 0)\n\n    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n    def test_non_localized_pk(self):\n        \"\"\"If USE_THOUSAND_SEPARATOR is set, make sure that the ids for\n        the objects selected for deletion are rendered without separators.\n        Refs #14895.\n        \"\"\"\n        subscriber = Subscriber.objects.get(id=1)\n        subscriber.id = 9999\n        subscriber.save()\n        action_data = {\n            ACTION_CHECKBOX_NAME: [9999, 2],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_subscriber_changelist'), action_data)\n        self.assertTemplateUsed(response, 'admin/delete_selected_confirmation.html')\n        self.assertContains(response, 'value=\"9999\"')  # Instead of 9,999\n        self.assertContains(response, 'value=\"2\"')\n\n    def test_model_admin_default_delete_action_protected(self):\n        \"\"\"\n        Tests the default delete action defined as a ModelAdmin method in the\n        case where some related objects are protected from deletion.\n        \"\"\"\n        q1 = Question.objects.create(question=\"Why?\")\n        a1 = Answer.objects.create(question=q1, answer=\"Because.\")\n        a2 = Answer.objects.create(question=q1, answer=\"Yes.\")\n        q2 = Question.objects.create(question=\"Wherefore?\")\n\n        action_data = {\n            ACTION_CHECKBOX_NAME: [q1.pk, q2.pk],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n\n        response = self.client.post(reverse('admin:admin_views_question_changelist'), action_data)\n\n        self.assertContains(response, \"would require deleting the following protected related objects\")\n        self.assertContains(\n            response,\n            '<li>Answer: <a href=\"%s\">Because.</a></li>' % reverse('admin:admin_views_answer_change', args=(a1.pk,)),\n            html=True\n        )\n        self.assertContains(\n            response,\n            '<li>Answer: <a href=\"%s\">Yes.</a></li>' % reverse('admin:admin_views_answer_change', args=(a2.pk,)),\n            html=True\n        )\n\n    def test_model_admin_default_delete_action_no_change_url(self):\n        \"\"\"\n        Default delete action shouldn't break if a user's ModelAdmin removes the url for change_view.\n\n        Regression test for #20640\n        \"\"\"\n        obj = UnchangeableObject.objects.create()\n        action_data = {\n            ACTION_CHECKBOX_NAME: obj.pk,\n            \"action\": \"delete_selected\",\n            \"index\": \"0\",\n        }\n        response = self.client.post(reverse('admin:admin_views_unchangeableobject_changelist'), action_data)\n        # No 500 caused by NoReverseMatch\n        self.assertEqual(response.status_code, 200)\n        # The page shouldn't display a link to the nonexistent change page\n        self.assertContains(response, \"<li>Unchangeable object: UnchangeableObject object</li>\", 1, html=True)\n\n    def test_custom_function_mail_action(self):\n        \"Tests a custom action defined in a function\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'external_mail',\n            'index': 0,\n        }\n        self.client.post(reverse('admin:admin_views_externalsubscriber_changelist'), action_data)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a function action')\n\n    def test_custom_function_action_with_redirect(self):\n        \"Tests a custom action defined in a function\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'redirect_to',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_externalsubscriber_changelist'), action_data)\n        self.assertEqual(response.status_code, 302)\n\n    def test_default_redirect(self):\n        \"\"\"\n        Test that actions which don't return an HttpResponse are redirected to\n        the same page, retaining the querystring (which may contain changelist\n        information).\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'external_mail',\n            'index': 0,\n        }\n        url = reverse('admin:admin_views_externalsubscriber_changelist') + '?o=1'\n        response = self.client.post(url, action_data)\n        self.assertRedirects(response, url)\n\n    def test_custom_function_action_streaming_response(self):\n        \"\"\"Tests a custom action that returns a StreamingHttpResponse.\"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'download',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_externalsubscriber_changelist'), action_data)\n        content = b''.join(response.streaming_content)\n        self.assertEqual(content, b'This is the content of the file')\n        self.assertEqual(response.status_code, 200)\n\n    def test_custom_function_action_no_perm_response(self):\n        \"\"\"Tests a custom action that returns an HttpResponse with 403 code.\"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'no_perm',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_externalsubscriber_changelist'), action_data)\n        self.assertEqual(response.status_code, 403)\n        self.assertEqual(response.content, b'No permission to perform this action')\n\n    def test_actions_ordering(self):\n        \"\"\"\n        Ensure that actions are ordered as expected.\n        Refs #15964.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_externalsubscriber_changelist'))\n        self.assertContains(response, '''<label>Action: <select name=\"action\">\n<option value=\"\" selected=\"selected\">---------</option>\n<option value=\"delete_selected\">Delete selected external\nsubscribers</option>\n<option value=\"redirect_to\">Redirect to (Awesome action)</option>\n<option value=\"external_mail\">External mail (Another awesome\naction)</option>\n<option value=\"download\">Download subscription</option>\n<option value=\"no_perm\">No permission to run</option>\n</select>''', html=True)\n\n    def test_model_without_action(self):\n        \"Tests a ModelAdmin without any action\"\n        response = self.client.get(reverse('admin:admin_views_oldsubscriber_changelist'))\n        self.assertEqual(response.context[\"action_form\"], None)\n        self.assertNotContains(response, '<input type=\"checkbox\" class=\"action-select\"',\n            msg_prefix=\"Found an unexpected action toggle checkboxbox in response\")\n        self.assertNotContains(response, '<input type=\"checkbox\" class=\"action-select\"')\n\n    def test_model_without_action_still_has_jquery(self):\n        \"Tests that a ModelAdmin without any actions still gets jQuery included in page\"\n        response = self.client.get(reverse('admin:admin_views_oldsubscriber_changelist'))\n        self.assertEqual(response.context[\"action_form\"], None)\n        self.assertContains(response, 'jquery.min.js',\n            msg_prefix=\"jQuery missing from admin pages for model with no admin actions\")\n\n    def test_action_column_class(self):\n        \"Tests that the checkbox column class is present in the response\"\n        response = self.client.get(reverse('admin:admin_views_subscriber_changelist'))\n        self.assertNotEqual(response.context[\"action_form\"], None)\n        self.assertContains(response, 'action-checkbox-column')\n\n    def test_multiple_actions_form(self):\n        \"\"\"\n        Test that actions come from the form whose submit button was pressed (#10618).\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            # Two different actions selected on the two forms...\n            'action': ['external_mail', 'delete_selected'],\n            # ...but we clicked \"go\" on the top form.\n            'index': 0\n        }\n        self.client.post(reverse('admin:admin_views_externalsubscriber_changelist'), action_data)\n\n        # Send mail, don't delete.\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a function action')\n\n    def test_user_message_on_none_selected(self):\n        \"\"\"\n        User should see a warning when 'Go' is pressed and no items are selected.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_subscriber_changelist'), action_data)\n        msg = \"\"\"Items must be selected in order to perform actions on them. No items have been changed.\"\"\"\n        self.assertContains(response, msg)\n        self.assertEqual(Subscriber.objects.count(), 2)\n\n    def test_user_message_on_no_action(self):\n        \"\"\"\n        User should see a warning when 'Go' is pressed and no action is selected.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': '',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_subscriber_changelist'), action_data)\n        msg = \"\"\"No action selected.\"\"\"\n        self.assertContains(response, msg)\n        self.assertEqual(Subscriber.objects.count(), 2)\n\n    def test_selection_counter(self):\n        \"\"\"\n        Check if the selection counter is there.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_subscriber_changelist'))\n        self.assertContains(response, '0 of 2 selected')\n\n    def test_popup_actions(self):\n        \"\"\" Actions should not be shown in popups. \"\"\"\n        response = self.client.get(reverse('admin:admin_views_subscriber_changelist'))\n        self.assertNotEqual(response.context[\"action_form\"], None)\n        response = self.client.get(\n            reverse('admin:admin_views_subscriber_changelist') + '?%s' % IS_POPUP_VAR)\n        self.assertEqual(response.context[\"action_form\"], None)\n\n    def test_popup_template_response(self):\n        \"\"\"\n        Success on popups shall be rendered from template in order to allow\n        easy customization.\n        \"\"\"\n        response = self.client.post(\n            reverse('admin:admin_views_actor_add') + '?%s=1' % IS_POPUP_VAR,\n            {'name': 'Troy McClure', 'age': '55', IS_POPUP_VAR: '1'})\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.template_name, 'admin/popup_response.html')\n\n    def test_popup_template_escaping(self):\n        context = {\n            'new_value': 'new_value\\\\',\n            'obj': 'obj\\\\',\n            'value': 'value\\\\',\n        }\n        output = render_to_string('admin/popup_response.html', context)\n        self.assertIn(\n            'opener.dismissAddRelatedObjectPopup(window, \"value\\\\u005C\", \"obj\\\\u005C\");', output\n        )\n\n        context['action'] = 'change'\n        output = render_to_string('admin/popup_response.html', context)\n        self.assertIn(\n            'opener.dismissChangeRelatedObjectPopup(window, '\n            '\"value\\\\u005C\", \"obj\\\\u005C\", \"new_value\\\\u005C\");', output\n        )\n\n        context['action'] = 'delete'\n        output = render_to_string('admin/popup_response.html', context)\n        self.assertIn(\n            'opener.dismissDeleteRelatedObjectPopup(window, \"value\\\\u005C\");', output\n        )\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass TestCustomChangeList(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n\n    def test_custom_changelist(self):\n        \"\"\"\n        Validate that a custom ChangeList class can be used (#9749)\n        \"\"\"\n        # Insert some data\n        post_data = {\"name\": \"First Gadget\"}\n        response = self.client.post(reverse('admin:admin_views_gadget_add'), post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n        # Hit the page once to get messages out of the queue message list\n        response = self.client.get(reverse('admin:admin_views_gadget_changelist'))\n        # Ensure that data is still not visible on the page\n        response = self.client.get(reverse('admin:admin_views_gadget_changelist'))\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'First Gadget')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass TestInlineNotEditable(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n\n    def test_GET_parent_add(self):\n        \"\"\"\n        InlineModelAdmin broken?\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_parent_add'))\n        self.assertEqual(response.status_code, 200)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminCustomQuerysetTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n        self.pks = [EmptyModel.objects.create().id for i in range(3)]\n        self.super_login = {\n            REDIRECT_FIELD_NAME: reverse('admin:index'),\n            'username': 'super',\n            'password': 'secret',\n        }\n\n    def test_changelist_view(self):\n        response = self.client.get(reverse('admin:admin_views_emptymodel_changelist'))\n        for i in self.pks:\n            if i > 1:\n                self.assertContains(response, 'Primary key = %s' % i)\n            else:\n                self.assertNotContains(response, 'Primary key = %s' % i)\n\n    def test_changelist_view_count_queries(self):\n        # create 2 Person objects\n        Person.objects.create(name='person1', gender=1)\n        Person.objects.create(name='person2', gender=2)\n        changelist_url = reverse('admin:admin_views_person_changelist')\n\n        # 4 queries are expected: 1 for the session, 1 for the user,\n        # 1 for the count and 1 for the objects on the page\n        with self.assertNumQueries(4):\n            resp = self.client.get(changelist_url)\n            self.assertEqual(resp.context['selection_note'], '0 of 2 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 2 selected')\n        # here one more count(*) query will run, because filters were applied\n        with self.assertNumQueries(5):\n            extra = {'q': 'not_in_name'}\n            resp = self.client.get(changelist_url, extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 0 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 0 selected')\n        with self.assertNumQueries(5):\n            extra = {'q': 'person'}\n            resp = self.client.get(changelist_url, extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 2 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 2 selected')\n        with self.assertNumQueries(5):\n            extra = {'gender__exact': '1'}\n            resp = self.client.get(changelist_url, extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 1 selected')\n            self.assertEqual(resp.context['selection_note_all'], '1 selected')\n\n    def test_change_view(self):\n        for i in self.pks:\n            response = self.client.get(reverse('admin:admin_views_emptymodel_change', args=(i,)))\n            if i > 1:\n                self.assertEqual(response.status_code, 200)\n            else:\n                self.assertEqual(response.status_code, 404)\n\n    def test_add_model_modeladmin_defer_qs(self):\n        # Test for #14529. defer() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        self.assertEqual(CoverLetter.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"author\": \"Candidate, Best\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_coverletter_add'),\n                                    post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The cover letter &quot;Candidate, Best&quot; was added successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        self.assertEqual(ShortMessage.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"content\": \"What's this SMS thing?\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_shortmessage_add'),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The short message &quot;ShortMessage object&quot; was added successfully.</li>',\n            html=True\n        )\n\n    def test_add_model_modeladmin_only_qs(self):\n        # Test for #14529. only() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        self.assertEqual(Telegram.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"title\": \"Urgent telegram\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_telegram_add'),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Telegram.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The telegram &quot;Urgent telegram&quot; was added successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        self.assertEqual(Paper.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"title\": \"My Modified Paper Title\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_paper_add'),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Paper.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The paper &quot;Paper object&quot; was added successfully.</li>',\n            html=True\n        )\n\n    def test_edit_model_modeladmin_defer_qs(self):\n        # Test for #14529. defer() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        cl = CoverLetter.objects.create(author=\"John Doe\")\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        response = self.client.get(reverse('admin:admin_views_coverletter_change', args=(cl.pk,)))\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"author\": \"John Doe II\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_coverletter_change', args=(cl.pk,)),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. Instance\n        # representation is set by model's __unicode__()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The cover letter &quot;John Doe II&quot; was changed successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        sm = ShortMessage.objects.create(content=\"This is expensive\")\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        response = self.client.get(reverse('admin:admin_views_shortmessage_change', args=(sm.pk,)))\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"content\": \"Too expensive\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_shortmessage_change', args=(sm.pk,)),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The ugly(!)\n        # instance representation is set by six.text_type()\n        self.assertContains(\n            response, (\n                '<li class=\"success\">The short message '\n                '&quot;ShortMessage_Deferred_timestamp object&quot; was '\n                'changed successfully.</li>'\n            ), html=True\n        )\n\n    def test_edit_model_modeladmin_only_qs(self):\n        # Test for #14529. only() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        t = Telegram.objects.create(title=\"Frist Telegram\")\n        self.assertEqual(Telegram.objects.count(), 1)\n        response = self.client.get(reverse('admin:admin_views_telegram_change', args=(t.pk,)))\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"title\": \"Telegram without typo\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_telegram_change', args=(t.pk,)),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Telegram.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The instance\n        # representation is set by model's __unicode__()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The telegram &quot;Telegram without typo&quot; was changed successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        p = Paper.objects.create(title=\"My Paper Title\")\n        self.assertEqual(Paper.objects.count(), 1)\n        response = self.client.get(reverse('admin:admin_views_paper_change', args=(p.pk,)))\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"title\": \"My Modified Paper Title\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(reverse('admin:admin_views_paper_change', args=(p.pk,)),\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Paper.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The ugly(!)\n        # instance representation is set by six.text_type()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The paper &quot;Paper_Deferred_author object&quot; was changed successfully.</li>',\n            html=True\n        )\n\n    def test_history_view_custom_qs(self):\n        \"\"\"\n        Ensure that custom querysets are considered for the admin history view.\n        Refs #21013.\n        \"\"\"\n        self.client.post(reverse('admin:login'), self.super_login)\n        FilteredManager.objects.create(pk=1)\n        FilteredManager.objects.create(pk=2)\n        response = self.client.get(reverse('admin:admin_views_filteredmanager_changelist'))\n        self.assertContains(response, \"PK=1\")\n        self.assertContains(response, \"PK=2\")\n        self.assertEqual(\n            self.client.get(reverse('admin:admin_views_filteredmanager_history', args=(1,))).status_code, 200\n        )\n        self.assertEqual(\n            self.client.get(reverse('admin:admin_views_filteredmanager_history', args=(2,))).status_code, 200\n        )\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminInlineFileUploadTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n        # Set up test Picture and Gallery.\n        # These must be set up here instead of in fixtures in order to allow Picture\n        # to use a NamedTemporaryFile.\n        file1 = tempfile.NamedTemporaryFile(suffix=\".file1\")\n        file1.write(b'a' * (2 ** 21))\n        filename = file1.name\n        file1.close()\n        self.gallery = Gallery(name=\"Test Gallery\")\n        self.gallery.save()\n        self.picture = Picture(name=\"Test Picture\", image=filename, gallery=self.gallery)\n        self.picture.save()\n\n    def test_inline_file_upload_edit_validation_error_post(self):\n        \"\"\"\n        Test that inline file uploads correctly display prior data (#10002).\n        \"\"\"\n        post_data = {\n            \"name\": \"Test Gallery\",\n            \"pictures-TOTAL_FORMS\": \"2\",\n            \"pictures-INITIAL_FORMS\": \"1\",\n            \"pictures-MAX_NUM_FORMS\": \"0\",\n            \"pictures-0-id\": six.text_type(self.picture.id),\n            \"pictures-0-gallery\": six.text_type(self.gallery.id),\n            \"pictures-0-name\": \"Test Picture\",\n            \"pictures-0-image\": \"\",\n            \"pictures-1-id\": \"\",\n            \"pictures-1-gallery\": str(self.gallery.id),\n            \"pictures-1-name\": \"Test Picture 2\",\n            \"pictures-1-image\": \"\",\n        }\n        response = self.client.post(\n            reverse('admin:admin_views_gallery_change', args=(self.gallery.id,)), post_data\n        )\n        self.assertContains(response, b\"Currently\")\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminInlineTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.post_data = {\n            \"name\": \"Test Name\",\n\n            \"widget_set-TOTAL_FORMS\": \"3\",\n            \"widget_set-INITIAL_FORMS\": \"0\",\n            \"widget_set-MAX_NUM_FORMS\": \"0\",\n            \"widget_set-0-id\": \"\",\n            \"widget_set-0-owner\": \"1\",\n            \"widget_set-0-name\": \"\",\n            \"widget_set-1-id\": \"\",\n            \"widget_set-1-owner\": \"1\",\n            \"widget_set-1-name\": \"\",\n            \"widget_set-2-id\": \"\",\n            \"widget_set-2-owner\": \"1\",\n            \"widget_set-2-name\": \"\",\n\n            \"doohickey_set-TOTAL_FORMS\": \"3\",\n            \"doohickey_set-INITIAL_FORMS\": \"0\",\n            \"doohickey_set-MAX_NUM_FORMS\": \"0\",\n            \"doohickey_set-0-owner\": \"1\",\n            \"doohickey_set-0-code\": \"\",\n            \"doohickey_set-0-name\": \"\",\n            \"doohickey_set-1-owner\": \"1\",\n            \"doohickey_set-1-code\": \"\",\n            \"doohickey_set-1-name\": \"\",\n            \"doohickey_set-2-owner\": \"1\",\n            \"doohickey_set-2-code\": \"\",\n            \"doohickey_set-2-name\": \"\",\n\n            \"grommet_set-TOTAL_FORMS\": \"3\",\n            \"grommet_set-INITIAL_FORMS\": \"0\",\n            \"grommet_set-MAX_NUM_FORMS\": \"0\",\n            \"grommet_set-0-code\": \"\",\n            \"grommet_set-0-owner\": \"1\",\n            \"grommet_set-0-name\": \"\",\n            \"grommet_set-1-code\": \"\",\n            \"grommet_set-1-owner\": \"1\",\n            \"grommet_set-1-name\": \"\",\n            \"grommet_set-2-code\": \"\",\n            \"grommet_set-2-owner\": \"1\",\n            \"grommet_set-2-name\": \"\",\n\n            \"whatsit_set-TOTAL_FORMS\": \"3\",\n            \"whatsit_set-INITIAL_FORMS\": \"0\",\n            \"whatsit_set-MAX_NUM_FORMS\": \"0\",\n            \"whatsit_set-0-owner\": \"1\",\n            \"whatsit_set-0-index\": \"\",\n            \"whatsit_set-0-name\": \"\",\n            \"whatsit_set-1-owner\": \"1\",\n            \"whatsit_set-1-index\": \"\",\n            \"whatsit_set-1-name\": \"\",\n            \"whatsit_set-2-owner\": \"1\",\n            \"whatsit_set-2-index\": \"\",\n            \"whatsit_set-2-name\": \"\",\n\n            \"fancydoodad_set-TOTAL_FORMS\": \"3\",\n            \"fancydoodad_set-INITIAL_FORMS\": \"0\",\n            \"fancydoodad_set-MAX_NUM_FORMS\": \"0\",\n            \"fancydoodad_set-0-doodad_ptr\": \"\",\n            \"fancydoodad_set-0-owner\": \"1\",\n            \"fancydoodad_set-0-name\": \"\",\n            \"fancydoodad_set-0-expensive\": \"on\",\n            \"fancydoodad_set-1-doodad_ptr\": \"\",\n            \"fancydoodad_set-1-owner\": \"1\",\n            \"fancydoodad_set-1-name\": \"\",\n            \"fancydoodad_set-1-expensive\": \"on\",\n            \"fancydoodad_set-2-doodad_ptr\": \"\",\n            \"fancydoodad_set-2-owner\": \"1\",\n            \"fancydoodad_set-2-name\": \"\",\n            \"fancydoodad_set-2-expensive\": \"on\",\n\n            \"category_set-TOTAL_FORMS\": \"3\",\n            \"category_set-INITIAL_FORMS\": \"0\",\n            \"category_set-MAX_NUM_FORMS\": \"0\",\n            \"category_set-0-order\": \"\",\n            \"category_set-0-id\": \"\",\n            \"category_set-0-collector\": \"1\",\n            \"category_set-1-order\": \"\",\n            \"category_set-1-id\": \"\",\n            \"category_set-1-collector\": \"1\",\n            \"category_set-2-order\": \"\",\n            \"category_set-2-id\": \"\",\n            \"category_set-2-collector\": \"1\",\n        }\n\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n        self.collector = Collector(pk=1, name='John Fowles')\n        self.collector.save()\n\n    def test_simple_inline(self):\n        \"A simple model can be saved as inlines\"\n        # First add a new inline\n        self.post_data['widget_set-0-name'] = \"Widget 1\"\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1\")\n        widget_id = Widget.objects.all()[0].id\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"widget_set-0-id\"')\n\n        # Now resave that inline\n        self.post_data['widget_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['widget_set-0-id'] = str(widget_id)\n        self.post_data['widget_set-0-name'] = \"Widget 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1\")\n\n        # Now modify that inline\n        self.post_data['widget_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['widget_set-0-id'] = str(widget_id)\n        self.post_data['widget_set-0-name'] = \"Widget 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1 Updated\")\n\n    def test_explicit_autofield_inline(self):\n        \"A model with an explicit autofield primary key can be saved as inlines. Regression for #8093\"\n        # First add a new inline\n        self.post_data['grommet_set-0-name'] = \"Grommet 1\"\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"grommet_set-0-code\"')\n\n        # Now resave that inline\n        self.post_data['grommet_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['grommet_set-0-code'] = str(Grommet.objects.all()[0].code)\n        self.post_data['grommet_set-0-name'] = \"Grommet 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1\")\n\n        # Now modify that inline\n        self.post_data['grommet_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['grommet_set-0-code'] = str(Grommet.objects.all()[0].code)\n        self.post_data['grommet_set-0-name'] = \"Grommet 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1 Updated\")\n\n    def test_char_pk_inline(self):\n        \"A model with a character PK can be saved as inlines. Regression for #10992\"\n        # First add a new inline\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1\"\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"doohickey_set-0-code\"')\n\n        # Now resave that inline\n        self.post_data['doohickey_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1\")\n\n        # Now modify that inline\n        self.post_data['doohickey_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1 Updated\")\n\n    def test_integer_pk_inline(self):\n        \"A model with an integer PK can be saved as inlines. Regression for #10992\"\n        # First add a new inline\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1\"\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"whatsit_set-0-index\"')\n\n        # Now resave that inline\n        self.post_data['whatsit_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1\")\n\n        # Now modify that inline\n        self.post_data['whatsit_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1 Updated\")\n\n    def test_inherited_inline(self):\n        \"An inherited model can be saved as inlines. Regression for #11042\"\n        # First add a new inline\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1\"\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1\")\n        doodad_pk = FancyDoodad.objects.all()[0].pk\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"fancydoodad_set-0-doodad_ptr\"')\n\n        # Now resave that inline\n        self.post_data['fancydoodad_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['fancydoodad_set-0-doodad_ptr'] = str(doodad_pk)\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1\")\n\n        # Now modify that inline\n        self.post_data['fancydoodad_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['fancydoodad_set-0-doodad_ptr'] = str(doodad_pk)\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1 Updated\")\n\n    def test_ordered_inline(self):\n        \"\"\"Check that an inline with an editable ordering fields is\n        updated correctly. Regression for #10922\"\"\"\n        # Create some objects with an initial ordering\n        Category.objects.create(id=1, order=1, collector=self.collector)\n        Category.objects.create(id=2, order=2, collector=self.collector)\n        Category.objects.create(id=3, order=0, collector=self.collector)\n        Category.objects.create(id=4, order=0, collector=self.collector)\n\n        # NB: The order values must be changed so that the items are reordered.\n        self.post_data.update({\n            \"name\": \"Frederick Clegg\",\n\n            \"category_set-TOTAL_FORMS\": \"7\",\n            \"category_set-INITIAL_FORMS\": \"4\",\n            \"category_set-MAX_NUM_FORMS\": \"0\",\n\n            \"category_set-0-order\": \"14\",\n            \"category_set-0-id\": \"1\",\n            \"category_set-0-collector\": \"1\",\n\n            \"category_set-1-order\": \"13\",\n            \"category_set-1-id\": \"2\",\n            \"category_set-1-collector\": \"1\",\n\n            \"category_set-2-order\": \"1\",\n            \"category_set-2-id\": \"3\",\n            \"category_set-2-collector\": \"1\",\n\n            \"category_set-3-order\": \"0\",\n            \"category_set-3-id\": \"4\",\n            \"category_set-3-collector\": \"1\",\n\n            \"category_set-4-order\": \"\",\n            \"category_set-4-id\": \"\",\n            \"category_set-4-collector\": \"1\",\n\n            \"category_set-5-order\": \"\",\n            \"category_set-5-id\": \"\",\n            \"category_set-5-collector\": \"1\",\n\n            \"category_set-6-order\": \"\",\n            \"category_set-6-id\": \"\",\n            \"category_set-6-collector\": \"1\",\n        })\n        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n        response = self.client.post(collector_url, self.post_data)\n        # Successful post will redirect\n        self.assertEqual(response.status_code, 302)\n\n        # Check that the order values have been applied to the right objects\n        self.assertEqual(self.collector.category_set.count(), 4)\n        self.assertEqual(Category.objects.get(id=1).order, 14)\n        self.assertEqual(Category.objects.get(id=2).order, 13)\n        self.assertEqual(Category.objects.get(id=3).order, 1)\n        self.assertEqual(Category.objects.get(id=4).order, 0)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass NeverCacheTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_admin_index(self):\n        \"Check the never-cache status of the main index\"\n        response = self.client.get(reverse('admin:index'))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_app_index(self):\n        \"Check the never-cache status of an application index\"\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_index(self):\n        \"Check the never-cache status of a model index\"\n        response = self.client.get(reverse('admin:admin_views_fabric_changelist'))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_add(self):\n        \"Check the never-cache status of a model add page\"\n        response = self.client.get(reverse('admin:admin_views_fabric_add'))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_view(self):\n        \"Check the never-cache status of a model edit page\"\n        response = self.client.get(reverse('admin:admin_views_section_change', args=(self.s1.pk,)))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_history(self):\n        \"Check the never-cache status of a model history page\"\n        response = self.client.get(reverse('admin:admin_views_section_history', args=(self.s1.pk,)))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_delete(self):\n        \"Check the never-cache status of a model delete page\"\n        response = self.client.get(reverse('admin:admin_views_section_delete', args=(self.s1.pk,)))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_login(self):\n        \"Check the never-cache status of login views\"\n        self.client.logout()\n        response = self.client.get(reverse('admin:index'))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_logout(self):\n        \"Check the never-cache status of logout view\"\n        response = self.client.get(reverse('admin:logout'))\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_password_change(self):\n        \"Check the never-cache status of the password change view\"\n        self.client.logout()\n        response = self.client.get(reverse('admin:password_change'))\n        self.assertEqual(get_max_age(response), None)\n\n    def test_password_change_done(self):\n        \"Check the never-cache status of the password change done view\"\n        response = self.client.get(reverse('admin:password_change_done'))\n        self.assertEqual(get_max_age(response), None)\n\n    def test_JS_i18n(self):\n        \"Check the never-cache status of the JavaScript i18n view\"\n        response = self.client.get(reverse('admin:jsi18n'))\n        self.assertEqual(get_max_age(response), None)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass PrePopulatedTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_prepopulated_on(self):\n        response = self.client.get(reverse('admin:admin_views_prepopulatedpost_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"id: '#id_slug',\")\n        self.assertContains(response, \"field['dependency_ids'].push('#id_title');\")\n        self.assertContains(response, \"id: '#id_prepopulatedsubpost_set-0-subslug',\")\n\n    def test_prepopulated_off(self):\n        response = self.client.get(reverse('admin:admin_views_prepopulatedpost_change', args=(self.p1.pk,)))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"A Long Title\")\n        self.assertNotContains(response, \"id: '#id_slug'\")\n        self.assertNotContains(response, \"field['dependency_ids'].push('#id_title');\")\n        self.assertNotContains(response, \"id: '#id_prepopulatedsubpost_set-0-subslug',\")\n\n    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n    def test_prepopulated_maxlength_localized(self):\n        \"\"\"\n        Regression test for #15938: if USE_THOUSAND_SEPARATOR is set, make sure\n        that maxLength (in the JavaScript) is rendered without separators.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_prepopulatedpostlargeslug_add'))\n        self.assertContains(response, \"maxLength: 1000\")  # instead of 1,000\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass SeleniumAdminViewsFirefoxTests(AdminSeleniumWebDriverTestCase):\n\n    available_apps = ['admin_views'] + AdminSeleniumWebDriverTestCase.available_apps\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def setUp(self):\n        self.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        self.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n    def test_prepopulated_fields(self):\n        \"\"\"\n        Ensure that the JavaScript-automated prepopulated fields work with the\n        main form and with stacked and tabular inlines.\n        Refs #13068, #9264, #9983, #9784.\n        \"\"\"\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get('%s%s' % (self.live_server_url,\n            reverse('admin:admin_views_mainprepopulated_add')))\n\n        # Main form ----------------------------------------------------------\n        self.selenium.find_element_by_css_selector('#id_pubdate').send_keys('2012-02-18')\n        self.get_select_option('#id_status', 'option two').click()\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' this is the mAin n\u00c0M\u00eb and it\\'s aw\u03b5\u0161ome\u0131\u0131\u0131')\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        slug3 = self.selenium.find_element_by_css_selector('#id_slug3').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-and-its-awesomeiii-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-and-its-awesomeiii')\n        self.assertEqual(slug3, 'main-n\\xe0m\\xeb-and-its-aw\\u03b5\\u0161ome\\u0131\\u0131\\u0131')\n\n        # Stacked inlines ----------------------------------------------------\n        # Initial inline\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-0-pubdate').send_keys('2011-12-17')\n        self.get_select_option('#id_relatedprepopulated_set-0-status', 'option one').click()\n        self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-0-name'\n        ).send_keys(' here is a s\u0164\u0101\u00c7ke\u00f0   inline !  ')\n        slug1 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-0-slug1'\n        ).get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-0-slug2'\n        ).get_attribute('value')\n        self.assertEqual(slug1, 'here-stacked-inline-2011-12-17')\n        self.assertEqual(slug2, 'option-one-here-stacked-inline')\n\n        # Add an inline\n        self.selenium.find_elements_by_link_text('Add another Related prepopulated')[0].click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-pubdate').send_keys('1999-01-25')\n        self.get_select_option('#id_relatedprepopulated_set-1-status', 'option two').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-name').send_keys(\n            ' now you haVe an\u00f6ther   s\u0164\u0101\u00c7ke\u00f0  inline with a very ... '\n            'loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog text... '\n        )\n        slug1 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-1-slug1'\n        ).get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-1-slug2'\n        ).get_attribute('value')\n        # 50 characters maximum for slug1 field\n        self.assertEqual(slug1, 'now-you-have-another-stacked-inline-very-loooooooo')\n        # 60 characters maximum for slug2 field\n        self.assertEqual(slug2, 'option-two-now-you-have-another-stacked-inline-very-looooooo')\n\n        # Tabular inlines ----------------------------------------------------\n        # Initial inline\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-0-pubdate').send_keys('1234-12-07')\n        self.get_select_option('#id_relatedprepopulated_set-2-0-status', 'option two').click()\n        self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-2-0-name'\n        ).send_keys('And now, with a t\u00c3b\u0171la\u0158 inline !!!')\n        slug1 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-2-0-slug1'\n        ).get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-2-0-slug2'\n        ).get_attribute('value')\n        self.assertEqual(slug1, 'and-now-tabular-inline-1234-12-07')\n        self.assertEqual(slug2, 'option-two-and-now-tabular-inline')\n\n        # Add an inline\n        self.selenium.find_elements_by_link_text('Add another Related prepopulated')[1].click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-pubdate').send_keys('1981-08-22')\n        self.get_select_option('#id_relatedprepopulated_set-2-1-status', 'option one').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-name').send_keys(\n            'a t\u00c3b\u0171la\u0158 inline with ignored ;\"&*^\\%$#@-/`~ characters'\n        )\n        slug1 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-2-1-slug1'\n        ).get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector(\n            '#id_relatedprepopulated_set-2-1-slug2'\n        ).get_attribute('value')\n        self.assertEqual(slug1, 'tabular-inline-ignored-characters-1981-08-22')\n        self.assertEqual(slug2, 'option-one-tabular-inline-ignored-characters')\n\n        # Save and check that everything is properly stored in the database\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.assertEqual(MainPrepopulated.objects.all().count(), 1)\n        MainPrepopulated.objects.get(\n            name=' this is the mAin n\u00c0M\u00eb and it\\'s aw\u03b5\u0161ome\u0131\u0131\u0131',\n            pubdate='2012-02-18',\n            status='option two',\n            slug1='main-name-and-its-awesomeiii-2012-02-18',\n            slug2='option-two-main-name-and-its-awesomeiii',\n        )\n        self.assertEqual(RelatedPrepopulated.objects.all().count(), 4)\n        RelatedPrepopulated.objects.get(\n            name=' here is a s\u0164\u0101\u00c7ke\u00f0   inline !  ',\n            pubdate='2011-12-17',\n            status='option one',\n            slug1='here-stacked-inline-2011-12-17',\n            slug2='option-one-here-stacked-inline',\n        )\n        RelatedPrepopulated.objects.get(\n            # 75 characters in name field\n            name=' now you haVe an\u00f6ther   s\u0164\u0101\u00c7ke\u00f0  inline with a very ... loooooooooooooooooo',\n            pubdate='1999-01-25',\n            status='option two',\n            slug1='now-you-have-another-stacked-inline-very-loooooooo',\n            slug2='option-two-now-you-have-another-stacked-inline-very-looooooo',\n        )\n        RelatedPrepopulated.objects.get(\n            name='And now, with a t\u00c3b\u0171la\u0158 inline !!!',\n            pubdate='1234-12-07',\n            status='option two',\n            slug1='and-now-tabular-inline-1234-12-07',\n            slug2='option-two-and-now-tabular-inline',\n        )\n        RelatedPrepopulated.objects.get(\n            name='a t\u00c3b\u0171la\u0158 inline with ignored ;\"&*^\\%$#@-/`~ characters',\n            pubdate='1981-08-22',\n            status='option one',\n            slug1='tabular-inline-ignored-characters-1981-08-22',\n            slug2='option-one-tabular-inline-ignored-characters',\n        )\n\n    def test_populate_existing_object(self):\n        \"\"\"\n        Ensure that the prepopulation works for existing objects too, as long\n        as the original field is empty.\n        Refs #19082.\n        \"\"\"\n        # Slugs are empty to start with.\n        item = MainPrepopulated.objects.create(\n            name=' this is the mAin n\u00c0M\u00eb',\n            pubdate='2012-02-18',\n            status='option two',\n            slug1='',\n            slug2='',\n        )\n        self.admin_login(username='super',\n                         password='secret',\n                         login_url=reverse('admin:index'))\n\n        object_url = '%s%s' % (\n            self.live_server_url,\n            reverse('admin:admin_views_mainprepopulated_change', args=(item.id,)))\n\n        self.selenium.get(object_url)\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' the best')\n\n        # The slugs got prepopulated since they were originally empty\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-best-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-best')\n\n        # Save the object\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n\n        self.selenium.get(object_url)\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' hello')\n\n        # The slugs got prepopulated didn't change since they were originally not empty\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-best-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-best')\n\n    def test_collapsible_fieldset(self):\n        \"\"\"\n        Test that the 'collapse' class in fieldsets definition allows to\n        show/hide the appropriate field section.\n        \"\"\"\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get('%s%s' % (self.live_server_url,\n            reverse('admin:admin_views_article_add')))\n        self.assertFalse(self.selenium.find_element_by_id('id_title').is_displayed())\n        self.selenium.find_elements_by_link_text('Show')[0].click()\n        self.assertTrue(self.selenium.find_element_by_id('id_title').is_displayed())\n        self.assertEqual(\n            self.selenium.find_element_by_id('fieldsetcollapser0').text,\n            \"Hide\"\n        )\n\n    def test_first_field_focus(self):\n        \"\"\"JavaScript-assisted auto-focus on first usable form field.\"\"\"\n        # First form field has a single widget\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get('%s%s' % (self.live_server_url,\n            reverse('admin:admin_views_picture_add')))\n        self.assertEqual(\n            self.selenium.switch_to.active_element,\n            self.selenium.find_element_by_id('id_name')\n        )\n\n        # First form field has a MultiWidget\n        self.selenium.get('%s%s' % (self.live_server_url,\n            reverse('admin:admin_views_reservation_add')))\n        self.assertEqual(\n            self.selenium.switch_to.active_element,\n            self.selenium.find_element_by_id('id_start_date_0')\n        )\n\n    def test_cancel_delete_confirmation(self):\n        \"Cancelling the deletion of an object takes the user back one page.\"\n        pizza = Pizza.objects.create(name=\"Double Cheese\")\n        url = reverse('admin:admin_views_pizza_change', args=(pizza.id,))\n        full_url = '%s%s' % (self.live_server_url, url)\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get(full_url)\n        self.selenium.find_element_by_class_name('deletelink').click()\n        # Wait until we're on the delete page.\n        self.wait_for('.cancel-link')\n        self.selenium.find_element_by_class_name('cancel-link').click()\n        # Wait until we're back on the change page.\n        self.wait_for_text('#content h1', 'Change pizza')\n        self.assertEqual(self.selenium.current_url, full_url)\n        self.assertEqual(Pizza.objects.count(), 1)\n\n    def test_cancel_delete_related_confirmation(self):\n        \"\"\"\n        Cancelling the deletion of an object with relations takes the user back\n        one page.\n        \"\"\"\n        pizza = Pizza.objects.create(name=\"Double Cheese\")\n        topping1 = Topping.objects.create(name=\"Cheddar\")\n        topping2 = Topping.objects.create(name=\"Mozzarella\")\n        pizza.toppings.add(topping1, topping2)\n        url = reverse('admin:admin_views_pizza_change', args=(pizza.id,))\n        full_url = '%s%s' % (self.live_server_url, url)\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get(full_url)\n        self.selenium.find_element_by_class_name('deletelink').click()\n        # Wait until we're on the delete page.\n        self.wait_for('.cancel-link')\n        self.selenium.find_element_by_class_name('cancel-link').click()\n        # Wait until we're back on the change page.\n        self.wait_for_text('#content h1', 'Change pizza')\n        self.assertEqual(self.selenium.current_url, full_url)\n        self.assertEqual(Pizza.objects.count(), 1)\n        self.assertEqual(Topping.objects.count(), 2)\n\n    def test_list_editable_popups(self):\n        \"\"\"\n        list_editable foreign keys have add/change popups.\n        \"\"\"\n        from selenium.webdriver.support.ui import Select\n        s1 = Section.objects.create(name='Test section')\n        Article.objects.create(\n            title='foo',\n            content='<p>Middle content</p>',\n            date=datetime.datetime(2008, 3, 18, 11, 54, 58),\n            section=s1,\n        )\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get(self.live_server_url + reverse('admin:admin_views_article_changelist'))\n        # Change popup\n        self.selenium.find_element_by_id('change_id_form-0-section').click()\n        self.wait_for_popup()\n        self.selenium.switch_to.window(self.selenium.window_handles[-1])\n        self.wait_for_text('#content h1', 'Change section')\n        name_input = self.selenium.find_element_by_id('id_name')\n        name_input.clear()\n        name_input.send_keys('<i>edited section</i>')\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.selenium.switch_to.window(self.selenium.window_handles[0])\n        select = Select(self.selenium.find_element_by_id('id_form-0-section'))\n        self.assertEqual(select.first_selected_option.text, '<i>edited section</i>')\n\n        # Add popup\n        self.selenium.find_element_by_id('add_id_form-0-section').click()\n        self.wait_for_popup()\n        self.selenium.switch_to.window(self.selenium.window_handles[-1])\n        self.wait_for_text('#content h1', 'Add section')\n        self.selenium.close()\n        self.selenium.switch_to.window(self.selenium.window_handles[0])\n\n    def test_inline_uuid_pk_edit_with_popup(self):\n        from selenium.webdriver.support.ui import Select\n        parent = ParentWithUUIDPK.objects.create(title='test')\n        related_with_parent = RelatedWithUUIDPKModel.objects.create(parent=parent)\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        change_url = reverse('admin:admin_views_relatedwithuuidpkmodel_change', args=(related_with_parent.id,))\n        self.selenium.get(self.live_server_url + change_url)\n        self.selenium.find_element_by_id('change_id_parent').click()\n        self.wait_for_popup()\n        self.selenium.switch_to.window(self.selenium.window_handles[-1])\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.selenium.switch_to.window(self.selenium.window_handles[0])\n        select = Select(self.selenium.find_element_by_id('id_parent'))\n        self.assertEqual(select.first_selected_option.text, str(parent.id))\n        self.assertEqual(select.first_selected_option.get_attribute('value'), str(parent.id))\n\n    def test_inline_uuid_pk_add_with_popup(self):\n        from selenium.webdriver.support.ui import Select\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        self.selenium.get(self.live_server_url + reverse('admin:admin_views_relatedwithuuidpkmodel_add'))\n        self.selenium.find_element_by_id('add_id_parent').click()\n        self.wait_for_popup()\n        self.selenium.switch_to.window(self.selenium.window_handles[-1])\n        self.selenium.find_element_by_id('id_title').send_keys('test')\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.selenium.switch_to.window(self.selenium.window_handles[0])\n        select = Select(self.selenium.find_element_by_id('id_parent'))\n        uuid_id = str(ParentWithUUIDPK.objects.first().id)\n        self.assertEqual(select.first_selected_option.text, uuid_id)\n        self.assertEqual(select.first_selected_option.get_attribute('value'), uuid_id)\n\n    def test_list_editable_raw_id_fields(self):\n        parent = ParentWithUUIDPK.objects.create(title='test')\n        parent2 = ParentWithUUIDPK.objects.create(title='test2')\n        RelatedWithUUIDPKModel.objects.create(parent=parent)\n        self.admin_login(username='super', password='secret', login_url=reverse('admin:index'))\n        change_url = reverse('admin:admin_views_relatedwithuuidpkmodel_changelist', current_app=site2.name)\n        self.selenium.get(self.live_server_url + change_url)\n        self.selenium.find_element_by_id('lookup_id_form-0-parent').click()\n        self.wait_for_popup()\n        self.selenium.switch_to.window(self.selenium.window_handles[-1])\n        # Select \"parent2\" in the popup.\n        self.selenium.find_element_by_link_text(str(parent2.pk)).click()\n        self.selenium.switch_to.window(self.selenium.window_handles[0])\n        # The newly selected pk should appear in the raw id input.\n        value = self.selenium.find_element_by_id('id_form-0-parent').get_attribute('value')\n        self.assertEqual(value, str(parent2.pk))\n\n\nclass SeleniumAdminViewsChromeTests(SeleniumAdminViewsFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\n\nclass SeleniumAdminViewsIETests(SeleniumAdminViewsFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    @ignore_warnings(category=RemovedInDjango20Warning)  # for allow_tags deprecation\n    def test_readonly_get(self):\n        response = self.client.get(reverse('admin:admin_views_post_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'name=\"posted\"')\n        # 3 fields + 2 submit buttons + 5 inline management form fields, + 2\n        # hidden fields for inlines + 1 field for the inline + 2 empty form\n        self.assertContains(response, \"<input\", count=15)\n        self.assertContains(response, formats.localize(datetime.date.today()))\n        self.assertContains(response,\n            \"<label>Awesomeness level:</label>\")\n        self.assertContains(response, \"Very awesome.\")\n        self.assertContains(response, \"Unknown coolness.\")\n        self.assertContains(response, \"foo\")\n\n        # Checks that multiline text in a readonly field gets <br /> tags\n        self.assertContains(response, \"Multiline<br />test<br />string\")\n        self.assertContains(response, \"<p>Multiline<br />html<br />content</p>\", html=True)\n        self.assertContains(response, \"InlineMultiline<br />test<br />string\")\n        # Remove only this last line when the deprecation completes.\n        self.assertContains(response, \"<p>Multiline<br />html<br />content<br />with allow tags</p>\", html=True)\n\n        self.assertContains(response,\n            formats.localize(datetime.date.today() - datetime.timedelta(days=7)))\n\n        self.assertContains(response, '<div class=\"form-row field-coolness\">')\n        self.assertContains(response, '<div class=\"form-row field-awesomeness_level\">')\n        self.assertContains(response, '<div class=\"form-row field-posted\">')\n        self.assertContains(response, '<div class=\"form-row field-value\">')\n        self.assertContains(response, '<div class=\"form-row\">')\n        self.assertContains(response, '<p class=\"help\">', 3)\n        self.assertContains(\n            response,\n            '<p class=\"help\">Some help text for the title (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>',\n            html=True\n        )\n        self.assertContains(\n            response,\n            '<p class=\"help\">Some help text for the content (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>',\n            html=True\n        )\n        self.assertContains(\n            response,\n            '<p class=\"help\">Some help text for the date (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>',\n            html=True\n        )\n\n        p = Post.objects.create(title=\"I worked on readonly_fields\", content=\"Its good stuff\")\n        response = self.client.get(reverse('admin:admin_views_post_change', args=(p.pk,)))\n        self.assertContains(response, \"%d amount of cool\" % p.pk)\n\n    @ignore_warnings(category=RemovedInDjango20Warning)  # for allow_tags deprecation\n    def test_readonly_text_field(self):\n        p = Post.objects.create(\n            title=\"Readonly test\", content=\"test\",\n            readonly_content='test\\r\\n\\r\\ntest\\r\\n\\r\\ntest\\r\\n\\r\\ntest',\n        )\n        Link.objects.create(\n            url=\"http://www.djangoproject.com\", post=p,\n            readonly_link_content=\"test\\r\\nlink\",\n        )\n        response = self.client.get(reverse('admin:admin_views_post_change', args=(p.pk,)))\n        # Checking readonly field.\n        self.assertContains(response, 'test<br /><br />test<br /><br />test<br /><br />test')\n        # Checking readonly field in inline.\n        self.assertContains(response, 'test<br />link')\n\n    def test_readonly_post(self):\n        data = {\n            \"title\": \"Django Got Readonly Fields\",\n            \"content\": \"This is an incredible development.\",\n            \"link_set-TOTAL_FORMS\": \"1\",\n            \"link_set-INITIAL_FORMS\": \"0\",\n            \"link_set-MAX_NUM_FORMS\": \"0\",\n        }\n        response = self.client.post(reverse('admin:admin_views_post_add'), data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Post.objects.count(), 1)\n        p = Post.objects.get()\n        self.assertEqual(p.posted, datetime.date.today())\n\n        data[\"posted\"] = \"10-8-1990\"  # some date that's not today\n        response = self.client.post(reverse('admin:admin_views_post_add'), data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Post.objects.count(), 2)\n        p = Post.objects.order_by('-id')[0]\n        self.assertEqual(p.posted, datetime.date.today())\n\n    def test_readonly_manytomany(self):\n        \"Regression test for #13004\"\n        response = self.client.get(reverse('admin:admin_views_pizza_add'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_user_password_change_limited_queryset(self):\n        su = User.objects.filter(is_superuser=True)[0]\n        response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n        self.assertEqual(response.status_code, 404)\n\n    def test_change_form_renders_correct_null_choice_value(self):\n        \"\"\"\n        Regression test for #17911.\n        \"\"\"\n        choice = Choice.objects.create(choice=None)\n        response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n        self.assertContains(response, '<p>No opinion</p>', html=True)\n        self.assertNotContains(response, '<p>(None)</p>')\n\n    def test_readonly_manytomany_backwards_ref(self):\n        \"\"\"\n        Regression test for #16433 - backwards references for related objects\n        broke if the related field is read-only due to the help_text attribute\n        \"\"\"\n        topping = Topping.objects.create(name='Salami')\n        pizza = Pizza.objects.create(name='Americano')\n        pizza.toppings.add(topping)\n        response = self.client.get(reverse('admin:admin_views_topping_add'))\n        self.assertEqual(response.status_code, 200)\n\n    def test_readonly_onetoone_backwards_ref(self):\n        \"\"\"\n        Can reference a reverse OneToOneField in ModelAdmin.readonly_fields.\n        \"\"\"\n        v1 = Villain.objects.create(name='Adam')\n        pl = Plot.objects.create(name='Test Plot', team_leader=v1, contact=v1)\n        pd = PlotDetails.objects.create(details='Brand New Plot', plot=pl)\n\n        response = self.client.get(reverse('admin:admin_views_plotproxy_change', args=(pl.pk,)))\n        field = self.get_admin_readonly_field(response, 'plotdetails')\n        self.assertEqual(field.contents(), 'Brand New Plot')\n\n        # The reverse relation also works if the OneToOneField is null.\n        pd.plot = None\n        pd.save()\n\n        response = self.client.get(reverse('admin:admin_views_plotproxy_change', args=(pl.pk,)))\n        field = self.get_admin_readonly_field(response, 'plotdetails')\n        self.assertEqual(field.contents(), '-')  # default empty value\n\n    @ignore_warnings(category=RemovedInDjango20Warning)  # for allow_tags deprecation\n    def test_readonly_field_overrides(self):\n        \"\"\"\n        Regression test for #22087 - ModelForm Meta overrides are ignored by\n        AdminReadonlyField\n        \"\"\"\n        p = FieldOverridePost.objects.create(title=\"Test Post\", content=\"Test Content\")\n        response = self.client.get(reverse('admin:admin_views_fieldoverridepost_change', args=(p.pk,)))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<p class=\"help\">Overridden help text for the date</p>')\n        self.assertContains(response, '<label for=\"id_public\">Overridden public label:</label>', html=True)\n        self.assertNotContains(response, \"Some help text for the date (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)\")\n\n    def test_correct_autoescaping(self):\n        \"\"\"\n        Make sure that non-field readonly elements are properly autoescaped (#24461)\n        \"\"\"\n        section = Section.objects.create(name='<a>evil</a>')\n        response = self.client.get(reverse('admin:admin_views_section_change', args=(section.pk,)))\n        self.assertNotContains(response, \"<a>evil</a>\", status_code=200)\n        self.assertContains(response, \"&lt;a&gt;evil&lt;/a&gt;\", status_code=200)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass LimitChoicesToInAdminTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_limit_choices_to_as_callable(self):\n        \"\"\"Test for ticket 2445 changes to admin.\"\"\"\n        threepwood = Character.objects.create(\n            username='threepwood',\n            last_action=datetime.datetime.today() + datetime.timedelta(days=1),\n        )\n        marley = Character.objects.create(\n            username='marley',\n            last_action=datetime.datetime.today() - datetime.timedelta(days=1),\n        )\n        response = self.client.get(reverse('admin:admin_views_stumpjoke_add'))\n        # The allowed option should appear twice; the limited option should not appear.\n        self.assertContains(response, threepwood.username, count=2)\n        self.assertNotContains(response, marley.username)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass RawIdFieldsTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_limit_choices_to(self):\n        \"\"\"Regression test for 14880\"\"\"\n        actor = Actor.objects.create(name=\"Palin\", age=27)\n        Inquisition.objects.create(expected=True,\n                                   leader=actor,\n                                   country=\"England\")\n        Inquisition.objects.create(expected=False,\n                                   leader=actor,\n                                   country=\"Spain\")\n        response = self.client.get(reverse('admin:admin_views_sketch_add'))\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_inquisition\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step also tests integers, strings and booleans in the\n        # lookup query string; in model we define inquisition field to have a\n        # limit_choices_to option that includes a filter on a string field\n        # (inquisition__actor__name), a filter on an integer field\n        # (inquisition__actor__age), and a filter on a boolean field\n        # (inquisition__expected).\n        response2 = self.client.get(popup_url)\n        self.assertContains(response2, \"Spain\")\n        self.assertNotContains(response2, \"England\")\n\n    def test_limit_choices_to_isnull_false(self):\n        \"\"\"Regression test for 20182\"\"\"\n        Actor.objects.create(name=\"Palin\", age=27)\n        Actor.objects.create(name=\"Kilbraken\", age=50, title=\"Judge\")\n        response = self.client.get(reverse('admin:admin_views_sketch_add'))\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_defendant0\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step tests field__isnull=0 gets parsed correctly from the\n        # lookup query string; in model we define defendant0 field to have a\n        # limit_choices_to option that includes \"actor__title__isnull=False\".\n        response2 = self.client.get(popup_url)\n        self.assertContains(response2, \"Kilbraken\")\n        self.assertNotContains(response2, \"Palin\")\n\n    def test_limit_choices_to_isnull_true(self):\n        \"\"\"Regression test for 20182\"\"\"\n        Actor.objects.create(name=\"Palin\", age=27)\n        Actor.objects.create(name=\"Kilbraken\", age=50, title=\"Judge\")\n        response = self.client.get(reverse('admin:admin_views_sketch_add'))\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_defendant1\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step tests field__isnull=1 gets parsed correctly from the\n        # lookup query string; in model we define defendant1 field to have a\n        # limit_choices_to option that includes \"actor__title__isnull=True\".\n        response2 = self.client.get(popup_url)\n        self.assertNotContains(response2, \"Kilbraken\")\n        self.assertContains(response2, \"Palin\")\n\n    def test_list_display_method_same_name_as_reverse_accessor(self):\n        \"\"\"\n        Should be able to use a ModelAdmin method in list_display that has the\n        same name as a reverse model field (\"sketch\" in this case).\n        \"\"\"\n        actor = Actor.objects.create(name=\"Palin\", age=27)\n        Inquisition.objects.create(expected=True, leader=actor, country=\"England\")\n        response = self.client.get(reverse('admin:admin_views_inquisition_changelist'))\n        self.assertContains(response, 'list-display-sketch')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass UserAdminTest(TestCase):\n    \"\"\"\n    Tests user CRUD functionality.\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.adduser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='adduser',\n            first_name='Add', last_name='User', email='auser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.changeuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='changeuser',\n            first_name='Change', last_name='User', email='cuser@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n        cls.per1 = Person.objects.create(name='John Mauchly', gender=1, alive=True)\n        cls.per2 = Person.objects.create(name='Grace Hopper', gender=1, alive=False)\n        cls.per3 = Person.objects.create(name='Guido van Rossum', gender=1, alive=True)\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_save_button(self):\n        user_count = User.objects.count()\n        response = self.client.post(reverse('admin:auth_user_add'), {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n        })\n        new_user = User.objects.get(username='newuser')\n        self.assertRedirects(response, reverse('admin:auth_user_change', args=(new_user.pk,)))\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_save_continue_editing_button(self):\n        user_count = User.objects.count()\n        response = self.client.post(reverse('admin:auth_user_add'), {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_continue': '1',\n        })\n        new_user = User.objects.get(username='newuser')\n        self.assertRedirects(response, reverse('admin:auth_user_change', args=(new_user.pk,)))\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_password_mismatch(self):\n        response = self.client.post(reverse('admin:auth_user_add'), {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'mismatch',\n        })\n        self.assertEqual(response.status_code, 200)\n        adminform = response.context['adminform']\n        self.assertNotIn('password', adminform.form.errors)\n        self.assertEqual(adminform.form.errors['password2'],\n            [\"The two password fields didn't match.\"])\n\n    def test_user_fk_add_popup(self):\n        \"\"\"User addition through a FK popup should return the appropriate JavaScript response.\"\"\"\n        response = self.client.get(reverse('admin:admin_views_album_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, reverse('admin:auth_user_add'))\n        self.assertContains(response, 'class=\"related-widget-wrapper-link add-related\" id=\"add_id_owner\"')\n        response = self.client.get(reverse('admin:auth_user_add') + '?_popup=1')\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'name=\"_continue\"')\n        self.assertNotContains(response, 'name=\"_addanother\"')\n        data = {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_popup': '1',\n            '_save': '1',\n        }\n        response = self.client.post(reverse('admin:auth_user_add') + '?_popup=1', data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissAddRelatedObjectPopup')\n\n    def test_user_fk_change_popup(self):\n        \"\"\"User change through a FK popup should return the appropriate JavaScript response.\"\"\"\n        response = self.client.get(reverse('admin:admin_views_album_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, reverse('admin:auth_user_change', args=('__fk__',)))\n        self.assertContains(response, 'class=\"related-widget-wrapper-link change-related\" id=\"change_id_owner\"')\n        user = User.objects.get(username='changeuser')\n        url = reverse('admin:auth_user_change', args=(user.pk,)) + '?_popup=1'\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'name=\"_continue\"')\n        self.assertNotContains(response, 'name=\"_addanother\"')\n        data = {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            'last_login_0': '2007-05-30',\n            'last_login_1': '13:20:10',\n            'date_joined_0': '2007-05-30',\n            'date_joined_1': '13:20:10',\n            '_popup': '1',\n            '_save': '1',\n        }\n        response = self.client.post(url, data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissChangeRelatedObjectPopup')\n\n    def test_user_fk_delete_popup(self):\n        \"\"\"User deletion through a FK popup should return the appropriate JavaScript response.\"\"\"\n        response = self.client.get(reverse('admin:admin_views_album_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, reverse('admin:auth_user_delete', args=('__fk__',)))\n        self.assertContains(response, 'class=\"related-widget-wrapper-link change-related\" id=\"change_id_owner\"')\n        user = User.objects.get(username='changeuser')\n        url = reverse('admin:auth_user_delete', args=(user.pk,)) + '?_popup=1'\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        data = {\n            'post': 'yes',\n            '_popup': '1',\n        }\n        response = self.client.post(url, data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissDeleteRelatedObjectPopup')\n\n    def test_save_add_another_button(self):\n        user_count = User.objects.count()\n        response = self.client.post(reverse('admin:auth_user_add'), {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_addanother': '1',\n        })\n        new_user = User.objects.order_by('-id')[0]\n        self.assertRedirects(response, reverse('admin:auth_user_add'))\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_user_permission_performance(self):\n        u = User.objects.all()[0]\n\n        # Don't depend on a warm cache, see #17377.\n        ContentType.objects.clear_cache()\n\n        with self.assertNumQueries(10):\n            response = self.client.get(reverse('admin:auth_user_change', args=(u.pk,)))\n            self.assertEqual(response.status_code, 200)\n\n    def test_form_url_present_in_context(self):\n        u = User.objects.all()[0]\n        response = self.client.get(reverse('admin3:auth_user_password_change', args=(u.pk,)))\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.context['form_url'], 'pony')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass GroupAdminTest(TestCase):\n    \"\"\"\n    Tests group CRUD functionality.\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_save_button(self):\n        group_count = Group.objects.count()\n        response = self.client.post(reverse('admin:auth_group_add'), {\n            'name': 'newgroup',\n        })\n\n        Group.objects.order_by('-id')[0]\n        self.assertRedirects(response, reverse('admin:auth_group_changelist'))\n        self.assertEqual(Group.objects.count(), group_count + 1)\n\n    def test_group_permission_performance(self):\n        g = Group.objects.create(name=\"test_group\")\n\n        # Ensure no queries are skipped due to cached content type for Group.\n        ContentType.objects.clear_cache()\n\n        with self.assertNumQueries(8):\n            response = self.client.get(reverse('admin:auth_group_change', args=(g.pk,)))\n            self.assertEqual(response.status_code, 200)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass CSSTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.s1 = Section.objects.create(name='Test section')\n        cls.a1 = Article.objects.create(\n            content='<p>Middle content</p>', date=datetime.datetime(2008, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a2 = Article.objects.create(\n            content='<p>Oldest content</p>', date=datetime.datetime(2000, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.a3 = Article.objects.create(\n            content='<p>Newest content</p>', date=datetime.datetime(2009, 3, 18, 11, 54, 58), section=cls.s1\n        )\n        cls.p1 = PrePopulatedPost.objects.create(title='A Long Title', published=True, slug='a-long-title')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    @ignore_warnings(category=RemovedInDjango20Warning)  # for allow_tags deprecation\n    def test_field_prefix_css_classes(self):\n        \"\"\"\n        Ensure that fields have a CSS class name with a 'field-' prefix.\n        Refs #16371.\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_post_add'))\n\n        # The main form\n        self.assertContains(response, 'class=\"form-row field-title\"')\n        self.assertContains(response, 'class=\"form-row field-content\"')\n        self.assertContains(response, 'class=\"form-row field-public\"')\n        self.assertContains(response, 'class=\"form-row field-awesomeness_level\"')\n        self.assertContains(response, 'class=\"form-row field-coolness\"')\n        self.assertContains(response, 'class=\"form-row field-value\"')\n        self.assertContains(response, 'class=\"form-row\"')  # The lambda function\n\n        # The tabular inline\n        self.assertContains(response, '<td class=\"field-url\">')\n        self.assertContains(response, '<td class=\"field-posted\">')\n\n    def test_index_css_classes(self):\n        \"\"\"\n        Ensure that CSS class names are used for each app and model on the\n        admin index pages.\n        Refs #17050.\n        \"\"\"\n        # General index page\n        response = self.client.get(reverse('admin:index'))\n        self.assertContains(response, '<div class=\"app-admin_views module\">')\n        self.assertContains(response, '<tr class=\"model-actor\">')\n        self.assertContains(response, '<tr class=\"model-album\">')\n\n        # App index page\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertContains(response, '<div class=\"app-admin_views module\">')\n        self.assertContains(response, '<tr class=\"model-actor\">')\n        self.assertContains(response, '<tr class=\"model-album\">')\n\n    def test_app_model_in_form_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by change_form template\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_add'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_list_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by change_list template\n        \"\"\"\n        response = self.client.get(reverse('admin:admin_views_section_changelist'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_delete_confirmation_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by delete_confirmation\n        template\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_section_delete', args=(self.s1.pk,)))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_app_index_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by app_index template\n        \"\"\"\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<body class=\" dashboard app-admin_views')\n\n    def test_app_model_in_delete_selected_confirmation_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by\n        delete_selected_confirmation template\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post(reverse('admin:admin_views_section_changelist'),\n            action_data)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_changelist_field_classes(self):\n        \"\"\"\n        Cells of the change list table should contain the field name in their class attribute\n        Refs #11195.\n        \"\"\"\n        Podcast.objects.create(name=\"Django Dose\",\n            release_date=datetime.date.today())\n        response = self.client.get(reverse('admin:admin_views_podcast_changelist'))\n        self.assertContains(\n            response, '<th class=\"field-name\">')\n        self.assertContains(\n            response, '<td class=\"field-release_date nowrap\">')\n        self.assertContains(\n            response, '<td class=\"action-checkbox\">')\n\n\ntry:\n    import docutils\nexcept ImportError:\n    docutils = None\n\n\n@unittest.skipUnless(docutils, \"no docutils installed.\")\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\n@modify_settings(INSTALLED_APPS={'append': ['django.contrib.admindocs', 'django.contrib.flatpages']})\nclass AdminDocsTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_tags(self):\n        response = self.client.get(reverse('django-admindocs-tags'))\n\n        # The builtin tag group exists\n        self.assertContains(response, \"<h2>Built-in tags</h2>\", count=2, html=True)\n\n        # A builtin tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"built_in-autoescape\">autoescape</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#built_in-autoescape\">autoescape</a></li>', html=True)\n\n        # An app tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"flatpages-get_flatpages\">get_flatpages</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#flatpages-get_flatpages\">get_flatpages</a></li>', html=True)\n\n        # The admin list tag group exists\n        self.assertContains(response, \"<h2>admin_list</h2>\", count=2, html=True)\n\n        # An admin list tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"admin_list-admin_actions\">admin_actions</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#admin_list-admin_actions\">admin_actions</a></li>', html=True)\n\n    def test_filters(self):\n        response = self.client.get(reverse('django-admindocs-filters'))\n\n        # The builtin filter group exists\n        self.assertContains(response, \"<h2>Built-in filters</h2>\", count=2, html=True)\n\n        # A builtin filter exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"built_in-add\">add</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#built_in-add\">add</a></li>', html=True)\n\n\n@override_settings(\n    PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\",\n    TEMPLATES=[{\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    }],\n    USE_I18N=False,\n)\nclass ValidXHTMLTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_lang_name_present(self):\n        response = self.client.get(reverse('admin:app_list', args=('admin_views',)))\n        self.assertNotContains(response, ' lang=\"\"')\n        self.assertNotContains(response, ' xml:lang=\"\"')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n                   ROOT_URLCONF=\"admin_views.urls\",\n                   USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\nclass DateHierarchyTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def tearDown(self):\n        formats.reset_format_cache()\n\n    def assert_non_localized_year(self, response, year):\n        \"\"\"Ensure that the year is not localized with\n        USE_THOUSAND_SEPARATOR. Refs #15234.\n        \"\"\"\n        self.assertNotContains(response, formats.number_format(year))\n\n    def assert_contains_year_link(self, response, date):\n        self.assertContains(response, '?release_date__year=%d\"' % (date.year,))\n\n    def assert_contains_month_link(self, response, date):\n        self.assertContains(\n            response, '?release_date__month=%d&amp;release_date__year=%d\"' % (\n                date.month, date.year))\n\n    def assert_contains_day_link(self, response, date):\n        self.assertContains(\n            response, '?release_date__day=%d&amp;'\n            'release_date__month=%d&amp;release_date__year=%d\"' % (\n                date.day, date.month, date.year))\n\n    def test_empty(self):\n        \"\"\"\n        Ensure that no date hierarchy links display with empty changelist.\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_podcast_changelist'))\n        self.assertNotContains(response, 'release_date__year=')\n        self.assertNotContains(response, 'release_date__month=')\n        self.assertNotContains(response, 'release_date__day=')\n\n    def test_single(self):\n        \"\"\"\n        Ensure that single day-level date hierarchy appears for single object.\n        \"\"\"\n        DATE = datetime.date(2000, 6, 30)\n        Podcast.objects.create(release_date=DATE)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        self.assert_contains_day_link(response, DATE)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_within_month(self):\n        \"\"\"\n        Ensure that day-level links appear for changelist within single month.\n        \"\"\"\n        DATES = (datetime.date(2000, 6, 30),\n                 datetime.date(2000, 6, 15),\n                 datetime.date(2000, 6, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        for date in DATES:\n            self.assert_contains_day_link(response, date)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_within_year(self):\n        \"\"\"\n        Ensure that month-level links appear for changelist within single year.\n        \"\"\"\n        DATES = (datetime.date(2000, 1, 30),\n                 datetime.date(2000, 3, 15),\n                 datetime.date(2000, 5, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        # no day-level links\n        self.assertNotContains(response, 'release_date__day=')\n        for date in DATES:\n            self.assert_contains_month_link(response, date)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_multiple_years(self):\n        \"\"\"\n        Ensure that year-level links appear for year-spanning changelist.\n        \"\"\"\n        DATES = (datetime.date(2001, 1, 30),\n                 datetime.date(2003, 3, 15),\n                 datetime.date(2005, 5, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        response = self.client.get(\n            reverse('admin:admin_views_podcast_changelist'))\n        # no day/month-level links\n        self.assertNotContains(response, 'release_date__day=')\n        self.assertNotContains(response, 'release_date__month=')\n        for date in DATES:\n            self.assert_contains_year_link(response, date)\n\n        # and make sure GET parameters still behave correctly\n        for date in DATES:\n            url = '%s?release_date__year=%d' % (\n                  reverse('admin:admin_views_podcast_changelist'),\n                  date.year)\n            response = self.client.get(url)\n            self.assert_contains_month_link(response, date)\n            self.assert_non_localized_year(response, 2000)\n            self.assert_non_localized_year(response, 2003)\n            self.assert_non_localized_year(response, 2005)\n\n            url = '%s?release_date__year=%d&release_date__month=%d' % (\n                  reverse('admin:admin_views_podcast_changelist'),\n                  date.year, date.month)\n            response = self.client.get(url)\n            self.assert_contains_day_link(response, date)\n            self.assert_non_localized_year(response, 2000)\n            self.assert_non_localized_year(response, 2003)\n            self.assert_non_localized_year(response, 2005)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminCustomSaveRelatedTests(TestCase):\n    \"\"\"\n    Ensure that one can easily customize the way related objects are saved.\n    Refs #16115.\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_should_be_able_to_edit_related_objects_on_add_view(self):\n        post = {\n            'child_set-TOTAL_FORMS': '3',\n            'child_set-INITIAL_FORMS': '0',\n            'name': 'Josh Stone',\n            'child_set-0-name': 'Paul',\n            'child_set-1-name': 'Catherine',\n        }\n        self.client.post(reverse('admin:admin_views_parent_add'), post)\n        self.assertEqual(1, Parent.objects.count())\n        self.assertEqual(2, Child.objects.count())\n\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n    def test_should_be_able_to_edit_related_objects_on_change_view(self):\n        parent = Parent.objects.create(name='Josh Stone')\n        paul = Child.objects.create(parent=parent, name='Paul')\n        catherine = Child.objects.create(parent=parent, name='Catherine')\n        post = {\n            'child_set-TOTAL_FORMS': '5',\n            'child_set-INITIAL_FORMS': '2',\n            'name': 'Josh Stone',\n            'child_set-0-name': 'Paul',\n            'child_set-0-id': paul.id,\n            'child_set-1-name': 'Catherine',\n            'child_set-1-id': catherine.id,\n        }\n        self.client.post(reverse('admin:admin_views_parent_change', args=(parent.id,)), post)\n\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n    def test_should_be_able_to_edit_related_objects_on_changelist_view(self):\n        parent = Parent.objects.create(name='Josh Rock')\n        Child.objects.create(parent=parent, name='Paul')\n        Child.objects.create(parent=parent, name='Catherine')\n        post = {\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '1',\n            'form-MAX_NUM_FORMS': '0',\n            'form-0-id': parent.id,\n            'form-0-name': 'Josh Stone',\n            '_save': 'Save'\n        }\n\n        self.client.post(reverse('admin:admin_views_parent_changelist'), post)\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewLogoutTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def test_logout(self):\n        self.client.force_login(self.superuser)\n        response = self.client.get(reverse('admin:logout'))\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, 'registration/logged_out.html')\n        self.assertEqual(response.request['PATH_INFO'], reverse('admin:logout'))\n        self.assertFalse(response.context['has_permission'])\n        self.assertNotContains(response, 'user-tools')  # user-tools div shouldn't visible.\n\n    def test_client_logout_url_can_be_used_to_login(self):\n        response = self.client.get(reverse('admin:logout'))\n        self.assertEqual(response.status_code, 302)  # we should be redirected to the login page.\n\n        # follow the redirect and test results.\n        response = self.client.get(reverse('admin:logout'), follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, 'admin/login.html')\n        self.assertEqual(response.request['PATH_INFO'], reverse('admin:login'))\n        self.assertContains(response, '<input type=\"hidden\" name=\"next\" value=\"%s\" />' % reverse('admin:index'))\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminUserMessageTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def send_message(self, level):\n        \"\"\"\n        Helper that sends a post to the dummy test methods and asserts that a\n        message with the level has appeared in the response.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'message_%s' % level,\n            'index': 0,\n        }\n\n        response = self.client.post(reverse('admin:admin_views_usermessenger_changelist'),\n                                    action_data, follow=True)\n        self.assertContains(response,\n                            '<li class=\"%s\">Test %s</li>' % (level, level),\n                            html=True)\n\n    @override_settings(MESSAGE_LEVEL=10)  # Set to DEBUG for this request\n    def test_message_debug(self):\n        self.send_message('debug')\n\n    def test_message_info(self):\n        self.send_message('info')\n\n    def test_message_success(self):\n        self.send_message('success')\n\n    def test_message_warning(self):\n        self.send_message('warning')\n\n    def test_message_error(self):\n        self.send_message('error')\n\n    def test_message_extra_tags(self):\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'message_extra_tags',\n            'index': 0,\n        }\n\n        response = self.client.post(reverse('admin:admin_views_usermessenger_changelist'),\n                                    action_data, follow=True)\n        self.assertContains(response,\n                            '<li class=\"extra_tag info\">Test tags</li>',\n                            html=True)\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminKeepChangeListFiltersTests(TestCase):\n    admin_site = site\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n        cls.joepublicuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=False, username='joepublic',\n            first_name='Joe', last_name='Public', email='joepublic@example.com',\n            is_staff=False, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def assertURLEqual(self, url1, url2):\n        \"\"\"\n        Assert that two URLs are equal despite the ordering\n        of their querystring. Refs #22360.\n        \"\"\"\n        parsed_url1 = urlparse(url1)\n        path1 = parsed_url1.path\n        parsed_qs1 = dict(parse_qsl(parsed_url1.query))\n\n        parsed_url2 = urlparse(url2)\n        path2 = parsed_url2.path\n        parsed_qs2 = dict(parse_qsl(parsed_url2.query))\n\n        for parsed_qs in [parsed_qs1, parsed_qs2]:\n            if '_changelist_filters' in parsed_qs:\n                changelist_filters = parsed_qs['_changelist_filters']\n                parsed_filters = dict(parse_qsl(changelist_filters))\n                parsed_qs['_changelist_filters'] = parsed_filters\n\n        self.assertEqual(path1, path2)\n        self.assertEqual(parsed_qs1, parsed_qs2)\n\n    def test_assert_url_equal(self):\n        # Test equality.\n        change_user_url = reverse('admin:auth_user_change', args=(self.joepublicuser.pk,))\n        self.assertURLEqual(\n            'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(\n                change_user_url\n            ),\n            'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(\n                change_user_url\n            )\n        )\n\n        # Test inequality.\n        with self.assertRaises(AssertionError):\n            self.assertURLEqual(\n                'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(\n                    change_user_url\n                ),\n                'http://testserver{}?_changelist_filters=is_staff__exact%3D1%26is_superuser__exact%3D1'.format(\n                    change_user_url\n                )\n            )\n\n        # Ignore scheme and host.\n        self.assertURLEqual(\n            'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(\n                change_user_url\n            ),\n            '{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(change_user_url)\n        )\n\n        # Ignore ordering of querystring.\n        self.assertURLEqual(\n            '{}?is_staff__exact=0&is_superuser__exact=0'.format(reverse('admin:auth_user_changelist')),\n            '{}?is_superuser__exact=0&is_staff__exact=0'.format(reverse('admin:auth_user_changelist'))\n        )\n\n        # Ignore ordering of _changelist_filters.\n        self.assertURLEqual(\n            '{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(change_user_url),\n            '{}?_changelist_filters=is_superuser__exact%3D0%26is_staff__exact%3D0'.format(change_user_url)\n        )\n\n    def get_changelist_filters(self):\n        return {\n            'is_superuser__exact': 0,\n            'is_staff__exact': 0,\n        }\n\n    def get_changelist_filters_querystring(self):\n        return urlencode(self.get_changelist_filters())\n\n    def get_preserved_filters_querystring(self):\n        return urlencode({\n            '_changelist_filters': self.get_changelist_filters_querystring()\n        })\n\n    def get_sample_user_id(self):\n        return self.joepublicuser.pk\n\n    def get_changelist_url(self):\n        return '%s?%s' % (\n            reverse('admin:auth_user_changelist',\n                    current_app=self.admin_site.name),\n            self.get_changelist_filters_querystring(),\n        )\n\n    def get_add_url(self):\n        return '%s?%s' % (\n            reverse('admin:auth_user_add',\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_change_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_change', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_history_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_history', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_delete_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_delete', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def test_changelist_view(self):\n        response = self.client.get(self.get_changelist_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the `change_view` link has the correct querystring.\n        detail_link = re.search(\n            '<a href=\"(.*?)\">{}</a>'.format(self.joepublicuser.username),\n            force_text(response.content)\n        )\n        self.assertURLEqual(detail_link.group(1), self.get_change_url())\n\n    def test_change_view(self):\n        # Get the `change_view`.\n        response = self.client.get(self.get_change_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the form action.\n        form_action = re.search(\n            '<form enctype=\"multipart/form-data\" action=\"(.*?)\" method=\"post\" id=\"user_form\".*?>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(form_action.group(1), '?%s' % self.get_preserved_filters_querystring())\n\n        # Check the history link.\n        history_link = re.search(\n            '<a href=\"(.*?)\" class=\"historylink\">History</a>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(history_link.group(1), self.get_history_url())\n\n        # Check the delete link.\n        delete_link = re.search(\n            '<a href=\"(.*?)\" class=\"deletelink\">Delete</a>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(delete_link.group(1), self.get_delete_url())\n\n        # Test redirect on \"Save\".\n        post_data = {\n            'username': 'joepublic',\n            'last_login_0': '2007-05-30',\n            'last_login_1': '13:20:10',\n            'date_joined_0': '2007-05-30',\n            'date_joined_1': '13:20:10',\n        }\n\n        post_data['_save'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_changelist_url()\n        )\n        post_data.pop('_save')\n\n        # Test redirect on \"Save and continue\".\n        post_data['_continue'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url()\n        )\n        post_data.pop('_continue')\n\n        # Test redirect on \"Save and add new\".\n        post_data['_addanother'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_add_url()\n        )\n        post_data.pop('_addanother')\n\n    def test_add_view(self):\n        # Get the `add_view`.\n        response = self.client.get(self.get_add_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the form action.\n        form_action = re.search(\n            '<form enctype=\"multipart/form-data\" action=\"(.*?)\" method=\"post\" id=\"user_form\".*?>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(form_action.group(1), '?%s' % self.get_preserved_filters_querystring())\n\n        post_data = {\n            'username': 'dummy',\n            'password1': 'test',\n            'password2': 'test',\n        }\n\n        # Test redirect on \"Save\".\n        post_data['_save'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url(User.objects.get(username='dummy').pk)\n        )\n        post_data.pop('_save')\n\n        # Test redirect on \"Save and continue\".\n        post_data['username'] = 'dummy2'\n        post_data['_continue'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url(User.objects.get(username='dummy2').pk)\n        )\n        post_data.pop('_continue')\n\n        # Test redirect on \"Save and add new\".\n        post_data['username'] = 'dummy3'\n        post_data['_addanother'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_add_url()\n        )\n        post_data.pop('_addanother')\n\n    def test_delete_view(self):\n        # Test redirect on \"Delete\".\n        response = self.client.post(self.get_delete_url(), {'post': 'yes'})\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_changelist_url()\n        )\n\n    def test_url_prefix(self):\n        context = {\n            'preserved_filters': self.get_preserved_filters_querystring(),\n            'opts': User._meta,\n        }\n\n        url = reverse('admin:auth_user_changelist', current_app=self.admin_site.name)\n        self.assertURLEqual(\n            self.get_changelist_url(),\n            add_preserved_filters(context, url),\n        )\n\n        with override_script_prefix('/prefix/'):\n            url = reverse('admin:auth_user_changelist', current_app=self.admin_site.name)\n            self.assertURLEqual(\n                self.get_changelist_url(),\n                add_preserved_filters(context, url),\n            )\n\n\nclass NamespacedAdminKeepChangeListFiltersTests(AdminKeepChangeListFiltersTests):\n    admin_site = site2\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass TestLabelVisibility(TestCase):\n    \"\"\" #11277 -Labels of hidden fields in admin were not hidden. \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_all_fields_visible(self):\n        response = self.client.get(reverse('admin:admin_views_emptymodelvisible_add'))\n        self.assert_fieldline_visible(response)\n        self.assert_field_visible(response, 'first')\n        self.assert_field_visible(response, 'second')\n\n    def test_all_fields_hidden(self):\n        response = self.client.get(reverse('admin:admin_views_emptymodelhidden_add'))\n        self.assert_fieldline_hidden(response)\n        self.assert_field_hidden(response, 'first')\n        self.assert_field_hidden(response, 'second')\n\n    def test_mixin(self):\n        response = self.client.get(reverse('admin:admin_views_emptymodelmixin_add'))\n        self.assert_fieldline_visible(response)\n        self.assert_field_hidden(response, 'first')\n        self.assert_field_visible(response, 'second')\n\n    def assert_field_visible(self, response, field_name):\n        self.assertContains(response, '<div class=\"field-box field-%s\">' % field_name)\n\n    def assert_field_hidden(self, response, field_name):\n        self.assertContains(response, '<div class=\"field-box field-%s hidden\">' % field_name)\n\n    def assert_fieldline_visible(self, response):\n        self.assertContains(response, '<div class=\"form-row field-first field-second\">')\n\n    def assert_fieldline_hidden(self, response):\n        self.assertContains(response, '<div class=\"form-row hidden')\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass AdminViewOnSiteTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n        cls.s1 = State.objects.create(name='New York')\n        cls.s2 = State.objects.create(name='Illinois')\n        cls.s3 = State.objects.create(name='California')\n        cls.c1 = City.objects.create(state=cls.s1, name='New York')\n        cls.c2 = City.objects.create(state=cls.s2, name='Chicago')\n        cls.c3 = City.objects.create(state=cls.s3, name='San Francisco')\n        cls.r1 = Restaurant.objects.create(city=cls.c1, name='Italian Pizza')\n        cls.r2 = Restaurant.objects.create(city=cls.c1, name='Boulevard')\n        cls.r3 = Restaurant.objects.create(city=cls.c2, name='Chinese Dinner')\n        cls.r4 = Restaurant.objects.create(city=cls.c2, name='Angels')\n        cls.r5 = Restaurant.objects.create(city=cls.c2, name='Take Away')\n        cls.r6 = Restaurant.objects.create(city=cls.c3, name='The Unknown Restaurant')\n        cls.w1 = Worker.objects.create(work_at=cls.r1, name='Mario', surname='Rossi')\n        cls.w2 = Worker.objects.create(work_at=cls.r1, name='Antonio', surname='Bianchi')\n        cls.w3 = Worker.objects.create(work_at=cls.r1, name='John', surname='Doe')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_add_view_form_and_formsets_run_validation(self):\n        \"\"\"\n        Issue #20522\n        Verifying that if the parent form fails validation, the inlines also\n        run validation even if validation is contingent on parent form data\n        \"\"\"\n        # The form validation should fail because 'some_required_info' is\n        # not included on the parent form, and the family_name of the parent\n        # does not match that of the child\n        post_data = {\"family_name\": \"Test1\",\n                     \"dependentchild_set-TOTAL_FORMS\": \"1\",\n                     \"dependentchild_set-INITIAL_FORMS\": \"0\",\n                     \"dependentchild_set-MAX_NUM_FORMS\": \"1\",\n                     \"dependentchild_set-0-id\": \"\",\n                     \"dependentchild_set-0-parent\": \"\",\n                     \"dependentchild_set-0-family_name\": \"Test2\"}\n        response = self.client.post(reverse('admin:admin_views_parentwithdependentchildren_add'),\n                                    post_data)\n\n        # just verifying the parent form failed validation, as expected --\n        # this isn't the regression test\n        self.assertIn('some_required_info', response.context['adminform'].form.errors)\n\n        # actual regression test\n        for error_set in response.context['inline_admin_formset'].formset.errors:\n            self.assertEqual(['Children must share a family name with their parents in this contrived test case'],\n                             error_set.get('__all__'))\n\n    def test_change_view_form_and_formsets_run_validation(self):\n        \"\"\"\n        Issue #20522\n        Verifying that if the parent form fails validation, the inlines also\n        run validation even if validation is contingent on parent form data\n        \"\"\"\n        pwdc = ParentWithDependentChildren.objects.create(some_required_info=6,\n                                                          family_name=\"Test1\")\n        # The form validation should fail because 'some_required_info' is\n        # not included on the parent form, and the family_name of the parent\n        # does not match that of the child\n        post_data = {\"family_name\": \"Test2\",\n                     \"dependentchild_set-TOTAL_FORMS\": \"1\",\n                     \"dependentchild_set-INITIAL_FORMS\": \"0\",\n                     \"dependentchild_set-MAX_NUM_FORMS\": \"1\",\n                     \"dependentchild_set-0-id\": \"\",\n                     \"dependentchild_set-0-parent\": str(pwdc.id),\n                     \"dependentchild_set-0-family_name\": \"Test1\"}\n        response = self.client.post(\n            reverse('admin:admin_views_parentwithdependentchildren_change', args=(pwdc.id,)), post_data\n        )\n\n        # just verifying the parent form failed validation, as expected --\n        # this isn't the regression test\n        self.assertIn('some_required_info', response.context['adminform'].form.errors)\n\n        # actual regression test\n        for error_set in response.context['inline_admin_formset'].formset.errors:\n            self.assertEqual(['Children must share a family name with their parents in this contrived test case'],\n                             error_set.get('__all__'))\n\n    def test_check(self):\n        \"Ensure that the view_on_site value is either a boolean or a callable\"\n        try:\n            admin = CityAdmin(City, AdminSite())\n            CityAdmin.view_on_site = True\n            self.assertEqual(admin.check(), [])\n            CityAdmin.view_on_site = False\n            self.assertEqual(admin.check(), [])\n            CityAdmin.view_on_site = lambda obj: obj.get_absolute_url()\n            self.assertEqual(admin.check(), [])\n            CityAdmin.view_on_site = []\n            self.assertEqual(admin.check(), [\n                Error(\n                    \"The value of 'view_on_site' must be a callable or a boolean value.\",\n                    hint=None,\n                    obj=CityAdmin,\n                    id='admin.E025',\n                ),\n            ])\n        finally:\n            # Restore the original values for the benefit of other tests.\n            CityAdmin.view_on_site = True\n\n    def test_false(self):\n        \"Ensure that the 'View on site' button is not displayed if view_on_site is False\"\n        response = self.client.get(reverse('admin:admin_views_restaurant_change', args=(self.r1.pk,)))\n        content_type_pk = ContentType.objects.get_for_model(Restaurant).pk\n        self.assertNotContains(response, reverse('admin:view_on_site', args=(content_type_pk, 1)))\n\n    def test_true(self):\n        \"Ensure that the default behavior is followed if view_on_site is True\"\n        response = self.client.get(reverse('admin:admin_views_city_change', args=(self.c1.pk,)))\n        content_type_pk = ContentType.objects.get_for_model(City).pk\n        self.assertContains(response, reverse('admin:view_on_site', args=(content_type_pk, self.c1.pk)))\n\n    def test_callable(self):\n        \"Ensure that the right link is displayed if view_on_site is a callable\"\n        response = self.client.get(reverse('admin:admin_views_worker_change', args=(self.w1.pk,)))\n        self.assertContains(response, '\"/worker/%s/%s/\"' % (self.w1.surname, self.w1.name))\n\n    def test_missing_get_absolute_url(self):\n        \"Ensure None is returned if model doesn't have get_absolute_url\"\n        model_admin = ModelAdmin(Worker, None)\n        self.assertIsNone(model_admin.get_view_on_site_url(Worker()))\n\n\n@override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\")\nclass InlineAdminViewOnSiteTest(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n        cls.s1 = State.objects.create(name='New York')\n        cls.s2 = State.objects.create(name='Illinois')\n        cls.s3 = State.objects.create(name='California')\n        cls.c1 = City.objects.create(state=cls.s1, name='New York')\n        cls.c2 = City.objects.create(state=cls.s2, name='Chicago')\n        cls.c3 = City.objects.create(state=cls.s3, name='San Francisco')\n        cls.r1 = Restaurant.objects.create(city=cls.c1, name='Italian Pizza')\n        cls.r2 = Restaurant.objects.create(city=cls.c1, name='Boulevard')\n        cls.r3 = Restaurant.objects.create(city=cls.c2, name='Chinese Dinner')\n        cls.r4 = Restaurant.objects.create(city=cls.c2, name='Angels')\n        cls.r5 = Restaurant.objects.create(city=cls.c2, name='Take Away')\n        cls.r6 = Restaurant.objects.create(city=cls.c3, name='The Unknown Restaurant')\n        cls.w1 = Worker.objects.create(work_at=cls.r1, name='Mario', surname='Rossi')\n        cls.w2 = Worker.objects.create(work_at=cls.r1, name='Antonio', surname='Bianchi')\n        cls.w3 = Worker.objects.create(work_at=cls.r1, name='John', surname='Doe')\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_false(self):\n        \"Ensure that the 'View on site' button is not displayed if view_on_site is False\"\n        response = self.client.get(reverse('admin:admin_views_state_change', args=(self.s1.pk,)))\n        content_type_pk = ContentType.objects.get_for_model(City).pk\n        self.assertNotContains(response, reverse('admin:view_on_site', args=(content_type_pk, self.c1.pk)))\n\n    def test_true(self):\n        \"Ensure that the 'View on site' button is displayed if view_on_site is True\"\n        response = self.client.get(reverse('admin:admin_views_city_change', args=(self.c1.pk,)))\n        content_type_pk = ContentType.objects.get_for_model(Restaurant).pk\n        self.assertContains(response, reverse('admin:view_on_site', args=(content_type_pk, self.r1.pk)))\n\n    def test_callable(self):\n        \"Ensure that the right link is displayed if view_on_site is a callable\"\n        response = self.client.get(reverse('admin:admin_views_restaurant_change', args=(self.r1.pk,)))\n        self.assertContains(response, '\"/worker_inline/%s/%s/\"' % (self.w1.surname, self.w1.name))\n\n\n@override_settings(ROOT_URLCONF=\"admin_views.urls\")\nclass TestEtagWithAdminView(SimpleTestCase):\n    # See https://code.djangoproject.com/ticket/16003\n\n    def test_admin(self):\n        with self.settings(USE_ETAGS=False):\n            response = self.client.get(reverse('admin:index'))\n            self.assertEqual(response.status_code, 302)\n            self.assertFalse(response.has_header('ETag'))\n\n        with self.settings(USE_ETAGS=True):\n            response = self.client.get(reverse('admin:index'))\n            self.assertEqual(response.status_code, 302)\n            self.assertTrue(response.has_header('ETag'))\n\n\n@override_settings(\n    PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'],\n    ROOT_URLCONF=\"admin_views.urls\",\n)\nclass GetFormsetsWithInlinesArgumentTest(TestCase):\n    \"\"\"\n    #23934 - When adding a new model instance in the admin, the 'obj' argument\n    of get_formsets_with_inlines() should be None. When changing, it should be\n    equal to the existing model instance.\n    The GetFormsetsArgumentCheckingAdmin ModelAdmin throws an exception\n    if obj is not None during add_view or obj is None during change_view.\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create(\n            password='sha1$995a3$6011485ea3834267d719b4c801409b8b1ddd0158',\n            last_login=datetime.datetime(2007, 5, 30, 13, 20, 10), is_superuser=True, username='super',\n            first_name='Super', last_name='User', email='super@example.com',\n            is_staff=True, is_active=True, date_joined=datetime.datetime(2007, 5, 30, 13, 20, 10)\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_explicitly_provided_pk(self):\n        post_data = {'name': '1'}\n        response = self.client.post(reverse('admin:admin_views_explicitlyprovidedpk_add'), post_data)\n        self.assertEqual(response.status_code, 302)\n\n        post_data = {'name': '2'}\n        response = self.client.post(reverse('admin:admin_views_explicitlyprovidedpk_change', args=(1,)), post_data)\n        self.assertEqual(response.status_code, 302)\n\n    def test_implicitly_generated_pk(self):\n        post_data = {'name': '1'}\n        response = self.client.post(reverse('admin:admin_views_implicitlygeneratedpk_add'), post_data)\n        self.assertEqual(response.status_code, 302)\n\n        post_data = {'name': '2'}\n        response = self.client.post(reverse('admin:admin_views_implicitlygeneratedpk_change', args=(1,)), post_data)\n        self.assertEqual(response.status_code, 302)\n"], "filenames": ["django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js", "django/views/debug.py", "docs/releases/1.8.14.txt", "docs/releases/1.9.8.txt", "tests/admin_views/models.py", "tests/admin_views/tests.py"], "buggy_code_start_loc": [123, 634, 5, 5, 19, 4627], "buggy_code_end_loc": [124, 641, 8, 8, 25, 4642], "fixing_code_start_loc": [123, 634, 5, 5, 20, 4628], "fixing_code_end_loc": [124, 641, 19, 19, 30, 4650], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in the dismissChangeRelatedObjectPopup function in contrib/admin/static/admin/js/admin/RelatedObjectLookups.js in Django before 1.8.14, 1.9.x before 1.9.8, and 1.10.x before 1.10rc1 allows remote attackers to inject arbitrary web script or HTML via vectors involving unsafe usage of Element.innerHTML.", "other": {"cve": {"id": "CVE-2016-6186", "sourceIdentifier": "cve@mitre.org", "published": "2016-08-05T15:59:09.503", "lastModified": "2018-10-09T20:00:40.617", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in the dismissChangeRelatedObjectPopup function in contrib/admin/static/admin/js/admin/RelatedObjectLookups.js in Django before 1.8.14, 1.9.x before 1.9.8, and 1.10.x before 1.10rc1 allows remote attackers to inject arbitrary web script or HTML via vectors involving unsafe usage of Element.innerHTML."}, {"lang": "es", "value": "Vulnerabilidad de XSS en la funci\u00f3n dismissChangeRelatedObjectPopup en contrib/admin/static/admin/js/admin/RelatedObjectLookups.js en Django en versiones anteriores a 1.8.14, 1.9.x en versiones anteriores a 1.9.8 y 1.10.x en versiones anteriores a 1.10rc1 permite a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de vectors relacionados con el uso no seguro de Element.innerHTML."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.8.13", "matchCriteriaId": "08E370D6-9EA2-48B6-AA81-B98D982679FA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.9:*:*:*:*:*:*:*", "matchCriteriaId": "29C40BAC-6DF3-4EA2-A65A-86462DDD8723"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.9.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "832F9FA9-5FC8-4DB6-AD39-C3D1C21C4568"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.9.1:*:*:*:*:*:*:*", "matchCriteriaId": "6B754401-8503-4553-853F-4F6BCD2D2FF2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.9.2:*:*:*:*:*:*:*", "matchCriteriaId": "019C26C7-EF1F-45BB-934E-521E2E64452E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.9.3:*:*:*:*:*:*:*", "matchCriteriaId": "A18691A7-E4D0-48A4-81A7-89846E991AF2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.9.4:*:*:*:*:*:*:*", "matchCriteriaId": "7C06EBD9-381E-4018-BFDC-E23EA18097B0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.9.5:*:*:*:*:*:*:*", "matchCriteriaId": "7D134048-B64F-45AE-B4A2-26E516CCF37B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.9.6:*:*:*:*:*:*:*", "matchCriteriaId": "0F39B83A-C10B-4B88-9491-2FB8B07D6EA5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.9.7:*:*:*:*:*:*:*", "matchCriteriaId": "64A4030E-F51F-4944-BCE7-E27CD32EC7D4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.10:alpha1:*:*:*:*:*:*", "matchCriteriaId": "36ECEDD6-A60B-4DE1-881B-899641489BAD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.10:beta1:*:*:*:*:*:*", "matchCriteriaId": "035DDCD9-7679-4106-BCDA-89D67195D5E8"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/137965/Django-3.3.0-Script-Insertion.html", "source": "cve@mitre.org", "tags": ["VDB Entry"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2016-1594.html", "source": "cve@mitre.org"}, {"url": "http://rhn.redhat.com/errata/RHSA-2016-1595.html", "source": "cve@mitre.org"}, {"url": "http://rhn.redhat.com/errata/RHSA-2016-1596.html", "source": "cve@mitre.org"}, {"url": "http://seclists.org/fulldisclosure/2016/Jul/53", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch"]}, {"url": "http://www.debian.org/security/2016/dsa-3622", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/archive/1/538947/100/0/threaded", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/92058", "source": "cve@mitre.org"}, {"url": "http://www.securitytracker.com/id/1036338", "source": "cve@mitre.org", "tags": ["VDB Entry"]}, {"url": "http://www.ubuntu.com/usn/USN-3039-1", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.vulnerability-lab.com/get_content.php?id=1869", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/django/django/commit/d03bf6fe4e9bf5b07de62c1a271c4b41a7d3d158", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/django/django/commit/f68e5a99164867ab0e071a936470958ed867479d", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DMLLFAUT4J4IP4P2KI4NOVWRMHA22WUJ/", "source": "cve@mitre.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KHHPN6MISX5I6UTXQHYLPTLEEUE6WDXW/", "source": "cve@mitre.org"}, {"url": "https://www.djangoproject.com/weblog/2016/jul/18/security-releases/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://www.exploit-db.com/exploits/40129/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/django/django/commit/d03bf6fe4e9bf5b07de62c1a271c4b41a7d3d158"}}