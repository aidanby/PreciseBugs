{"buggy_code": ["<?php\n/**\n * OpenMage\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * @category   Mage\n * @package    Mage_Cms\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (https://www.magento.com)\n * @copyright  Copyright (c) 2018-2022 The OpenMage Contributors (https://www.openmage.org)\n * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Wysiwyg Images model\n *\n * @category   Mage\n * @package    Mage_Cms\n * @author     Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Cms_Model_Wysiwyg_Images_Storage extends Varien_Object\n{\n    public const DIRECTORY_NAME_REGEXP = '/^[a-z0-9\\-\\_]+$/si';\n    public const THUMBS_DIRECTORY_NAME = '.thumbs';\n    public const THUMB_PLACEHOLDER_PATH_SUFFIX = 'images/placeholder/thumbnail.jpg';\n\n    /**\n     * Config object\n     *\n     * @var Mage_Core_Model_Config_Element|Varien_Simplexml_Element|false\n     */\n    protected $_config;\n\n    /**\n     * Config object as array\n     *\n     * @var array|string\n     */\n    protected $_configAsArray;\n\n    /**\n     * Return one-level child directories for specified path\n     *\n     * @param string $path Parent directory path\n     * @return Varien_Data_Collection_Filesystem\n     */\n    public function getDirsCollection($path)\n    {\n        if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n            $subDirectories = Mage::getModel('core/file_storage_directory_database')->getSubdirectories($path);\n            foreach ($subDirectories as $directory) {\n                $fullPath = rtrim($path, DS) . DS . $directory['name'];\n                if (!file_exists($fullPath)) {\n                    mkdir($fullPath, 0777, true);\n                }\n            }\n        }\n\n        $conditions = ['reg_exp' => [], 'plain' => []];\n\n        foreach ($this->getConfig()->dirs->exclude->children() as $dir) {\n            $conditions[$dir->getAttribute('regexp') ? 'reg_exp' : 'plain'][(string) $dir] = true;\n        }\n        // \"include\" section takes precedence and can revoke directory exclusion\n        foreach ($this->getConfig()->dirs->include->children() as $dir) {\n            unset($conditions['regexp'][(string) $dir], $conditions['plain'][(string) $dir]);\n        }\n\n        $regExp = $conditions['reg_exp'] ? ('~' . implode('|', array_keys($conditions['reg_exp'])) . '~i') : null;\n        $collection = $this->getCollection($path)\n            ->setCollectDirs(true)\n            ->setCollectFiles(false)\n            ->setCollectRecursively(false);\n        $storageRootLength = strlen($this->getHelper()->getStorageRoot());\n\n        foreach ($collection as $key => $value) {\n            $rootChildParts = explode(DIRECTORY_SEPARATOR, substr($value->getFilename(), $storageRootLength));\n\n            if (array_key_exists(end($rootChildParts), $conditions['plain'])\n                || ($regExp && preg_match($regExp, $value->getFilename()))\n            ) {\n                $collection->removeItemByKey($key);\n            }\n        }\n\n        return $collection;\n    }\n\n    /**\n     * Return files\n     *\n     * @param string $path Parent directory path\n     * @param string $type Type of storage, e.g. image, media etc.\n     * @return Varien_Data_Collection_Filesystem\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function getFilesCollection($path, $type = null)\n    {\n        if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n            $files = Mage::getModel('core/file_storage_database')->getDirectoryFiles($path);\n\n            $fileStorageModel = Mage::getModel('core/file_storage_file');\n            foreach ($files as $file) {\n                $fileStorageModel->saveFile($file);\n            }\n        }\n\n        $collection = $this->getCollection($path)\n            ->setCollectDirs(false)\n            ->setCollectFiles(true)\n            ->setCollectRecursively(false)\n            ->setOrder('mtime', Varien_Data_Collection::SORT_ORDER_ASC);\n\n        // Add files extension filter\n        if ($allowed = $this->getAllowedExtensions($type)) {\n            $collection->setFilesFilter('/\\.(' . implode('|', $allowed) . ')$/i');\n        }\n\n        $helper = $this->getHelper();\n\n        // prepare items\n        foreach ($collection as $item) {\n            $item->setId($helper->idEncode($item->getBasename()));\n            $item->setName($item->getBasename());\n            $item->setShortName($helper->getShortFilename($item->getBasename()));\n            $item->setUrl($helper->getCurrentUrl() . $item->getBasename());\n\n            if ($this->isImage($item->getBasename())) {\n                $thumbImg = Mage_Core_Model_File_Uploader::getCorrectFileName($item->getBasename());\n                $thumbUrl = $this->getThumbnailUrl($path . DS . $thumbImg, true);\n\n                // generate thumbnail \"on the fly\" if it does not exists\n                if (!$thumbUrl) {\n                    $thumbUrl = Mage::getSingleton('adminhtml/url')->getUrl('*/*/thumbnail', ['file' => $item->getId()]);\n                }\n\n                $size = @getimagesize($item->getFilename());\n\n                if (is_array($size)) {\n                    $item->setWidth($size[0]);\n                    $item->setHeight($size[1]);\n                }\n            } else {\n                $thumbUrl = Mage::getDesign()->getSkinBaseUrl() . self::THUMB_PLACEHOLDER_PATH_SUFFIX;\n            }\n\n            $item->setThumbUrl($thumbUrl);\n        }\n\n        return $collection;\n    }\n\n    /**\n     * Storage collection\n     *\n     * @param string $path Path to the directory\n     * @return Varien_Data_Collection_Filesystem\n     */\n    public function getCollection($path = null)\n    {\n        $collection = Mage::getModel('cms/wysiwyg_images_storage_collection');\n        if ($path !== null) {\n            $collection->addTargetDir($path);\n        }\n        return $collection;\n    }\n\n    /**\n     * Create new directory in storage\n     *\n     * @param string $name New directory name\n     * @param string $path Parent directory path\n     * @throws Mage_Core_Exception\n     * @return array New directory info\n     */\n    public function createDirectory($name, $path)\n    {\n        if (!preg_match(self::DIRECTORY_NAME_REGEXP, $name)) {\n            Mage::throwException(Mage::helper('cms')->__('Invalid folder name. Please, use alphanumeric characters, underscores and dashes.'));\n        }\n        if (!is_dir($path) || !is_writable($path)) {\n            $path = $this->getHelper()->getStorageRoot();\n        }\n\n        $newPath = $path . DS . $name;\n\n        if (file_exists($newPath)) {\n            Mage::throwException(Mage::helper('cms')->__('A directory with the same name already exists. Please try another folder name.'));\n        }\n\n        $io = new Varien_Io_File();\n        if ($io->mkdir($newPath)) {\n            if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n                $relativePath = Mage::helper('core/file_storage_database')->getMediaRelativePath($newPath);\n                Mage::getModel('core/file_storage_directory_database')->createRecursive($relativePath);\n            }\n\n            return [\n                'name'          => $name,\n                'short_name'    => $this->getHelper()->getShortFilename($name),\n                'path'          => $newPath,\n                'id'            => $this->getHelper()->convertPathToId($newPath)\n            ];\n        }\n        Mage::throwException(Mage::helper('cms')->__('Cannot create new directory.'));\n    }\n\n    /**\n     * Recursively delete directory from storage\n     *\n     * @param string $path Target dir\n     */\n    public function deleteDirectory($path)\n    {\n        // prevent accidental root directory deleting\n        $rootCmp = rtrim($this->getHelper()->getStorageRoot(), DS);\n        $pathCmp = rtrim($path, DS);\n\n        $io = new Varien_Io_File();\n\n        if ($rootCmp == $pathCmp) {\n            Mage::throwException(Mage::helper('cms')->__(\n                'Cannot delete root directory %s.',\n                $io->getFilteredPath($path)\n            ));\n        }\n\n        if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n            Mage::getModel('core/file_storage_directory_database')->deleteDirectory($path);\n        }\n        if (!$io->rmdir($path, true)) {\n            Mage::throwException(Mage::helper('cms')->__('Cannot delete directory %s.', $io->getFilteredPath($path)));\n        }\n\n        if (strpos($pathCmp, $rootCmp) === 0) {\n            $io->rmdir($this->getThumbnailRoot() . DS . ltrim(substr($pathCmp, strlen($rootCmp)), '\\\\/'), true);\n        }\n    }\n\n    /**\n     * Delete file (and its thumbnail if exists) from storage\n     *\n     * @param string $target File path to be deleted\n     * @return $this\n     */\n    public function deleteFile($target)\n    {\n        $io = new Varien_Io_File();\n        $io->rm($target);\n        Mage::helper('core/file_storage_database')->deleteFile($target);\n\n        $thumb = $this->getThumbnailPath($target, true);\n        if ($thumb) {\n            $io->rm($thumb);\n            Mage::helper('core/file_storage_database')->deleteFile($thumb);\n        }\n        return $this;\n    }\n\n    /**\n     * Upload and resize new file\n     *\n     * @param string $targetPath Target directory\n     * @param string $type Type of storage, e.g. image, media etc.\n     * @return array|bool|void\n     *@throws Mage_Core_Exception\n     */\n    public function uploadFile($targetPath, $type = null)\n    {\n        $uploader = new Mage_Core_Model_File_Uploader('image');\n        if ($allowed = $this->getAllowedExtensions($type)) {\n            $uploader->setAllowedExtensions($allowed);\n        }\n        $uploader->setAllowRenameFiles(true);\n        $uploader->setFilesDispersion(false);\n        if ($type == 'image') {\n            $uploader->addValidateCallback(\n                Mage_Core_Model_File_Validator_Image::NAME,\n                Mage::getModel('core/file_validator_image'),\n                'validate'\n            );\n        }\n        $result = $uploader->save($targetPath);\n\n        if (!$result) {\n            Mage::throwException(Mage::helper('cms')->__('Cannot upload file.'));\n        }\n\n        // create thumbnail\n        if ($type == 'image') {\n            $this->resizeFile($targetPath . DS . $uploader->getUploadedFileName(), true);\n        }\n        $result['cookie'] = [\n            'name'     => session_name(),\n            'value'    => $this->getSession()->getSessionId(),\n            'lifetime' => $this->getSession()->getCookieLifetime(),\n            'path'     => $this->getSession()->getCookiePath(),\n            'domain'   => $this->getSession()->getCookieDomain()\n        ];\n\n        return $result;\n    }\n\n    /**\n     * Thumbnail path getter\n     *\n     * @param  string $filePath original file path\n     * @param bool $checkFile OPTIONAL is it necessary to check file availability\n     * @return string | false\n     */\n    public function getThumbnailPath($filePath, $checkFile = false)\n    {\n        $mediaRootDir = $this->getHelper()->getStorageRoot();\n\n        if (strpos($filePath, $mediaRootDir) === 0) {\n            $thumbPath = $this->getThumbnailRoot() . DS . substr($filePath, strlen($mediaRootDir));\n\n            if (!$checkFile || is_readable($thumbPath)) {\n                return $thumbPath;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Thumbnail URL getter\n     *\n     * @param  string $filePath original file path\n     * @param bool $checkFile OPTIONAL is it necessary to check file availability\n     * @return string|false\n     */\n    public function getThumbnailUrl($filePath, $checkFile = false)\n    {\n        $mediaRootDir = Mage::getConfig()->getOptions()->getMediaDir() . DS;\n        if (strpos($filePath, $mediaRootDir) === 0) {\n            $thumbSuffix = self::THUMBS_DIRECTORY_NAME . DS . substr($filePath, strlen($mediaRootDir));\n            if (!$checkFile || is_readable($this->getHelper()->getStorageRoot() . $thumbSuffix)) {\n                $randomIndex = '?rand=' . time();\n                $thumbUrl = $this->getHelper()->getBaseUrl() . Mage_Cms_Model_Wysiwyg_Config::IMAGE_DIRECTORY\n                    . DS . $thumbSuffix;\n                return str_replace('\\\\', '/', $thumbUrl) . $randomIndex;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Create thumbnail for image and save it to thumbnails directory\n     *\n     * @param string $source Image path to be resized\n     * @param bool $keepRation Keep aspect ratio or not\n     * @return bool|string Resized filepath or false if errors were occurred\n     */\n    public function resizeFile($source, $keepRation = true)\n    {\n        if (!is_file($source) || !is_readable($source)) {\n            return false;\n        }\n\n        $targetDir = $this->getThumbsPath($source);\n        $io = new Varien_Io_File();\n        if (!$io->isWriteable($targetDir)) {\n            $io->mkdir($targetDir);\n        }\n        if (!$io->isWriteable($targetDir)) {\n            return false;\n        }\n        $image = Varien_Image_Adapter::factory('GD2');\n        $image->open($source);\n        $width = $this->getConfigData('resize_width');\n        $height = $this->getConfigData('resize_height');\n\n        if ($width == 0 || $height == 0) {\n            return false;\n        }\n\n        $image->keepAspectRatio($keepRation);\n        $image->resize($width, $height);\n        $dest = $targetDir\n            . DS\n            . Mage_Core_Model_File_Uploader::getCorrectFileName(pathinfo($source, PATHINFO_BASENAME));\n        $image->save($dest);\n        if (is_file($dest)) {\n            return $dest;\n        }\n        return false;\n    }\n\n    /**\n     * Resize images on the fly in controller action\n     *\n     * @param string $filename File basename\n     * @return bool|string Thumbnail path or false for errors\n     */\n    public function resizeOnTheFly($filename)\n    {\n        $path = $this->getSession()->getCurrentPath();\n        if (!$path) {\n            $path = $this->getHelper()->getCurrentPath();\n        }\n        return $this->resizeFile($path . DS . $filename);\n    }\n\n    /**\n     * Return thumbnails directory path for file/current directory\n     *\n     * @param false|string $filePath Path to the file\n     * @return string\n     */\n    public function getThumbsPath($filePath = false)\n    {\n        $mediaRootDir = Mage::getConfig()->getOptions()->getMediaDir();\n        $thumbnailDir = $this->getThumbnailRoot();\n\n        if ($filePath && strpos($filePath, $mediaRootDir) === 0) {\n            $thumbnailDir .= DS . dirname(substr($filePath, strlen($mediaRootDir)));\n        }\n\n        return $thumbnailDir;\n    }\n\n    /**\n     * Media Storage Helper getter\n     * @return Mage_Cms_Helper_Wysiwyg_Images\n     */\n    public function getHelper()\n    {\n        return Mage::helper('cms/wysiwyg_images');\n    }\n\n    /**\n     * Storage session\n     *\n     * @return Mage_Adminhtml_Model_Session\n     */\n    public function getSession()\n    {\n        return Mage::getSingleton('adminhtml/session');\n    }\n\n    /**\n     * Config object getter\n     *\n     * @return Mage_Core_Model_Config_Element\n     */\n    public function getConfig()\n    {\n        if (!$this->_config) {\n            $this->_config = Mage::getConfig()->getNode('cms/browser', 'adminhtml');\n        }\n\n        return $this->_config;\n    }\n\n    /**\n     * Config object as array getter\n     *\n     * @return array|string\n     */\n    public function getConfigAsArray()\n    {\n        if (!$this->_configAsArray) {\n            $this->_configAsArray = $this->getConfig()->asCanonicalArray();\n        }\n\n        return $this->_configAsArray;\n    }\n\n    /**\n     * Wysiwyg Config reader\n     *\n     * @param string $key\n     * @param mixed $default\n     * @return mixed\n     */\n    public function getConfigData($key, $default = false)\n    {\n        $configArray = $this->getConfigAsArray();\n        $key = (string) $key;\n\n        return array_key_exists($key, $configArray) ? $configArray[$key] : $default;\n    }\n\n    /**\n     * Prepare allowed_extensions config settings\n     *\n     * @param string $type Type of storage, e.g. image, media etc.\n     * @return array Array of allowed file extensions\n     */\n    public function getAllowedExtensions($type = null)\n    {\n        $extensions = $this->getConfigData('extensions');\n\n        if (is_string($type) && array_key_exists(\"{$type}_allowed\", $extensions)) {\n            $allowed = $extensions[\"{$type}_allowed\"];\n        } else {\n            $allowed = $extensions['allowed'];\n        }\n\n        return array_keys(array_filter($allowed));\n    }\n\n    /**\n     * Thumbnail root directory getter\n     *\n     * @return string\n     */\n    public function getThumbnailRoot()\n    {\n        return $this->getHelper()->getStorageRoot() . self::THUMBS_DIRECTORY_NAME;\n    }\n\n    /**\n     * Simple way to check whether file is image or not based on extension\n     *\n     * @param string $filename\n     * @return bool\n     */\n    public function isImage($filename)\n    {\n        if (!$this->hasData('_image_extensions')) {\n            $this->setData('_image_extensions', $this->getAllowedExtensions('image'));\n        }\n        $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));\n        return in_array($ext, $this->_getData('_image_extensions'));\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * OpenMage\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * @category   Mage\n * @package    Mage_Cms\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (https://www.magento.com)\n * @copyright  Copyright (c) 2018-2022 The OpenMage Contributors (https://www.openmage.org)\n * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Wysiwyg Images model\n *\n * @category   Mage\n * @package    Mage_Cms\n * @author     Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Cms_Model_Wysiwyg_Images_Storage extends Varien_Object\n{\n    public const DIRECTORY_NAME_REGEXP = '/^[a-z0-9\\-\\_]+$/si';\n    public const THUMBS_DIRECTORY_NAME = '.thumbs';\n    public const THUMB_PLACEHOLDER_PATH_SUFFIX = 'images/placeholder/thumbnail.jpg';\n\n    /**\n     * Config object\n     *\n     * @var Mage_Core_Model_Config_Element|Varien_Simplexml_Element|false\n     */\n    protected $_config;\n\n    /**\n     * Config object as array\n     *\n     * @var array|string\n     */\n    protected $_configAsArray;\n\n    /**\n     * Return one-level child directories for specified path\n     *\n     * @param string $path Parent directory path\n     * @return Varien_Data_Collection_Filesystem\n     */\n    public function getDirsCollection($path)\n    {\n        if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n            $subDirectories = Mage::getModel('core/file_storage_directory_database')->getSubdirectories($path);\n            foreach ($subDirectories as $directory) {\n                $fullPath = rtrim($path, DS) . DS . $directory['name'];\n                if (!file_exists($fullPath)) {\n                    mkdir($fullPath, 0777, true);\n                }\n            }\n        }\n\n        $conditions = ['reg_exp' => [], 'plain' => []];\n\n        foreach ($this->getConfig()->dirs->exclude->children() as $dir) {\n            $conditions[$dir->getAttribute('regexp') ? 'reg_exp' : 'plain'][(string) $dir] = true;\n        }\n        // \"include\" section takes precedence and can revoke directory exclusion\n        foreach ($this->getConfig()->dirs->include->children() as $dir) {\n            unset($conditions['regexp'][(string) $dir], $conditions['plain'][(string) $dir]);\n        }\n\n        $regExp = $conditions['reg_exp'] ? ('~' . implode('|', array_keys($conditions['reg_exp'])) . '~i') : null;\n        $collection = $this->getCollection($path)\n            ->setCollectDirs(true)\n            ->setCollectFiles(false)\n            ->setCollectRecursively(false);\n        $storageRootLength = strlen($this->getHelper()->getStorageRoot());\n\n        foreach ($collection as $key => $value) {\n            $rootChildParts = explode(DIRECTORY_SEPARATOR, substr($value->getFilename(), $storageRootLength));\n\n            if (array_key_exists(end($rootChildParts), $conditions['plain'])\n                || ($regExp && preg_match($regExp, $value->getFilename()))\n            ) {\n                $collection->removeItemByKey($key);\n            }\n        }\n\n        return $collection;\n    }\n\n    /**\n     * Return files\n     *\n     * @param string $path Parent directory path\n     * @param string $type Type of storage, e.g. image, media etc.\n     * @return Varien_Data_Collection_Filesystem\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function getFilesCollection($path, $type = null)\n    {\n        if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n            $files = Mage::getModel('core/file_storage_database')->getDirectoryFiles($path);\n\n            $fileStorageModel = Mage::getModel('core/file_storage_file');\n            foreach ($files as $file) {\n                $fileStorageModel->saveFile($file);\n            }\n        }\n\n        $collection = $this->getCollection($path)\n            ->setCollectDirs(false)\n            ->setCollectFiles(true)\n            ->setCollectRecursively(false)\n            ->setOrder('mtime', Varien_Data_Collection::SORT_ORDER_ASC);\n\n        // Add files extension filter\n        if ($allowed = $this->getAllowedExtensions($type)) {\n            $collection->setFilesFilter('/\\.(' . implode('|', $allowed) . ')$/i');\n        }\n\n        $helper = $this->getHelper();\n\n        // prepare items\n        foreach ($collection as $item) {\n            $item->setId($helper->idEncode($item->getBasename()));\n            $item->setName($item->getBasename());\n            $item->setShortName($helper->getShortFilename($item->getBasename()));\n            $item->setUrl($helper->getCurrentUrl() . $item->getBasename());\n\n            if ($this->isImage($item->getBasename())) {\n                $thumbImg = Mage_Core_Model_File_Uploader::getCorrectFileName($item->getBasename());\n                $thumbUrl = $this->getThumbnailUrl($path . DS . $thumbImg, true);\n\n                // generate thumbnail \"on the fly\" if it does not exists\n                if (!$thumbUrl) {\n                    $thumbUrl = Mage::getSingleton('adminhtml/url')->getUrl('*/*/thumbnail', ['file' => $item->getId()]);\n                }\n\n                $size = @getimagesize($item->getFilename());\n\n                if (is_array($size)) {\n                    $item->setWidth($size[0]);\n                    $item->setHeight($size[1]);\n                }\n            } else {\n                $thumbUrl = Mage::getDesign()->getSkinBaseUrl() . self::THUMB_PLACEHOLDER_PATH_SUFFIX;\n            }\n\n            $item->setThumbUrl($thumbUrl);\n        }\n\n        return $collection;\n    }\n\n    /**\n     * Storage collection\n     *\n     * @param string $path Path to the directory\n     * @return Varien_Data_Collection_Filesystem\n     */\n    public function getCollection($path = null)\n    {\n        $collection = Mage::getModel('cms/wysiwyg_images_storage_collection');\n        if ($path !== null) {\n            $collection->addTargetDir($path);\n        }\n        return $collection;\n    }\n\n    /**\n     * Create new directory in storage\n     *\n     * @param string $name New directory name\n     * @param string $path Parent directory path\n     * @throws Mage_Core_Exception\n     * @return array New directory info\n     */\n    public function createDirectory($name, $path)\n    {\n        if (!preg_match(self::DIRECTORY_NAME_REGEXP, $name)) {\n            Mage::throwException(Mage::helper('cms')->__('Invalid folder name. Please, use alphanumeric characters, underscores and dashes.'));\n        }\n        if (!is_dir($path) || !is_writable($path)) {\n            $path = $this->getHelper()->getStorageRoot();\n        }\n\n        $newPath = $path . DS . $name;\n\n        if (file_exists($newPath)) {\n            Mage::throwException(Mage::helper('cms')->__('A directory with the same name already exists. Please try another folder name.'));\n        }\n\n        $io = new Varien_Io_File();\n        if ($io->mkdir($newPath)) {\n            if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n                $relativePath = Mage::helper('core/file_storage_database')->getMediaRelativePath($newPath);\n                Mage::getModel('core/file_storage_directory_database')->createRecursive($relativePath);\n            }\n\n            return [\n                'name'          => $name,\n                'short_name'    => $this->getHelper()->getShortFilename($name),\n                'path'          => $newPath,\n                'id'            => $this->getHelper()->convertPathToId($newPath)\n            ];\n        }\n        Mage::throwException(Mage::helper('cms')->__('Cannot create new directory.'));\n    }\n\n    /**\n     * Recursively delete directory from storage\n     *\n     * @param string $path Target dir\n     */\n    public function deleteDirectory($path)\n    {\n        // prevent accidental root directory deleting\n        $rootCmp = rtrim($this->getHelper()->getStorageRoot(), DS);\n        $pathCmp = rtrim($path, DS);\n\n        $io = new Varien_Io_File();\n\n        if ($rootCmp == $pathCmp) {\n            Mage::throwException(Mage::helper('cms')->__(\n                'Cannot delete root directory %s.',\n                $io->getFilteredPath($path)\n            ));\n        }\n        if (strpos($pathCmp, chr(0)) !== false\n            || preg_match('#(^|[\\\\\\\\/])\\.\\.($|[\\\\\\\\/])#', $pathCmp)\n        ) {\n            throw new Exception('Detected malicious path or filename input.');\n        }\n\n        if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n            Mage::getModel('core/file_storage_directory_database')->deleteDirectory($path);\n        }\n        if (!$io->rmdir($path, true)) {\n            Mage::throwException(Mage::helper('cms')->__('Cannot delete directory %s.', $io->getFilteredPath($path)));\n        }\n\n        if (strpos($pathCmp, $rootCmp) === 0) {\n            $io->rmdir($this->getThumbnailRoot() . DS . ltrim(substr($pathCmp, strlen($rootCmp)), '\\\\/'), true);\n        }\n    }\n\n    /**\n     * Delete file (and its thumbnail if exists) from storage\n     *\n     * @param string $target File path to be deleted\n     * @return $this\n     */\n    public function deleteFile($target)\n    {\n        $io = new Varien_Io_File();\n        $io->rm($target);\n        Mage::helper('core/file_storage_database')->deleteFile($target);\n\n        $thumb = $this->getThumbnailPath($target, true);\n        if ($thumb) {\n            $io->rm($thumb);\n            Mage::helper('core/file_storage_database')->deleteFile($thumb);\n        }\n        return $this;\n    }\n\n    /**\n     * Upload and resize new file\n     *\n     * @param string $targetPath Target directory\n     * @param string $type Type of storage, e.g. image, media etc.\n     * @return array|bool|void\n     *@throws Mage_Core_Exception\n     */\n    public function uploadFile($targetPath, $type = null)\n    {\n        $uploader = new Mage_Core_Model_File_Uploader('image');\n        if ($allowed = $this->getAllowedExtensions($type)) {\n            $uploader->setAllowedExtensions($allowed);\n        }\n        $uploader->setAllowRenameFiles(true);\n        $uploader->setFilesDispersion(false);\n        if ($type == 'image') {\n            $uploader->addValidateCallback(\n                Mage_Core_Model_File_Validator_Image::NAME,\n                Mage::getModel('core/file_validator_image'),\n                'validate'\n            );\n        }\n        $result = $uploader->save($targetPath);\n\n        if (!$result) {\n            Mage::throwException(Mage::helper('cms')->__('Cannot upload file.'));\n        }\n\n        // create thumbnail\n        if ($type == 'image') {\n            $this->resizeFile($targetPath . DS . $uploader->getUploadedFileName(), true);\n        }\n        $result['cookie'] = [\n            'name'     => session_name(),\n            'value'    => $this->getSession()->getSessionId(),\n            'lifetime' => $this->getSession()->getCookieLifetime(),\n            'path'     => $this->getSession()->getCookiePath(),\n            'domain'   => $this->getSession()->getCookieDomain()\n        ];\n\n        return $result;\n    }\n\n    /**\n     * Thumbnail path getter\n     *\n     * @param  string $filePath original file path\n     * @param bool $checkFile OPTIONAL is it necessary to check file availability\n     * @return string | false\n     */\n    public function getThumbnailPath($filePath, $checkFile = false)\n    {\n        $mediaRootDir = $this->getHelper()->getStorageRoot();\n\n        if (strpos($filePath, $mediaRootDir) === 0) {\n            $thumbPath = $this->getThumbnailRoot() . DS . substr($filePath, strlen($mediaRootDir));\n\n            if (!$checkFile || is_readable($thumbPath)) {\n                return $thumbPath;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Thumbnail URL getter\n     *\n     * @param  string $filePath original file path\n     * @param bool $checkFile OPTIONAL is it necessary to check file availability\n     * @return string|false\n     */\n    public function getThumbnailUrl($filePath, $checkFile = false)\n    {\n        $mediaRootDir = Mage::getConfig()->getOptions()->getMediaDir() . DS;\n        if (strpos($filePath, $mediaRootDir) === 0) {\n            $thumbSuffix = self::THUMBS_DIRECTORY_NAME . DS . substr($filePath, strlen($mediaRootDir));\n            if (!$checkFile || is_readable($this->getHelper()->getStorageRoot() . $thumbSuffix)) {\n                $randomIndex = '?rand=' . time();\n                $thumbUrl = $this->getHelper()->getBaseUrl() . Mage_Cms_Model_Wysiwyg_Config::IMAGE_DIRECTORY\n                    . DS . $thumbSuffix;\n                return str_replace('\\\\', '/', $thumbUrl) . $randomIndex;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Create thumbnail for image and save it to thumbnails directory\n     *\n     * @param string $source Image path to be resized\n     * @param bool $keepRation Keep aspect ratio or not\n     * @return bool|string Resized filepath or false if errors were occurred\n     */\n    public function resizeFile($source, $keepRation = true)\n    {\n        if (!is_file($source) || !is_readable($source)) {\n            return false;\n        }\n\n        $targetDir = $this->getThumbsPath($source);\n        $io = new Varien_Io_File();\n        if (!$io->isWriteable($targetDir)) {\n            $io->mkdir($targetDir);\n        }\n        if (!$io->isWriteable($targetDir)) {\n            return false;\n        }\n        $image = Varien_Image_Adapter::factory('GD2');\n        $image->open($source);\n        $width = $this->getConfigData('resize_width');\n        $height = $this->getConfigData('resize_height');\n\n        if ($width == 0 || $height == 0) {\n            return false;\n        }\n\n        $image->keepAspectRatio($keepRation);\n        $image->resize($width, $height);\n        $dest = $targetDir\n            . DS\n            . Mage_Core_Model_File_Uploader::getCorrectFileName(pathinfo($source, PATHINFO_BASENAME));\n        $image->save($dest);\n        if (is_file($dest)) {\n            return $dest;\n        }\n        return false;\n    }\n\n    /**\n     * Resize images on the fly in controller action\n     *\n     * @param string $filename File basename\n     * @return bool|string Thumbnail path or false for errors\n     */\n    public function resizeOnTheFly($filename)\n    {\n        $path = $this->getSession()->getCurrentPath();\n        if (!$path) {\n            $path = $this->getHelper()->getCurrentPath();\n        }\n        return $this->resizeFile($path . DS . $filename);\n    }\n\n    /**\n     * Return thumbnails directory path for file/current directory\n     *\n     * @param false|string $filePath Path to the file\n     * @return string\n     */\n    public function getThumbsPath($filePath = false)\n    {\n        $mediaRootDir = Mage::getConfig()->getOptions()->getMediaDir();\n        $thumbnailDir = $this->getThumbnailRoot();\n\n        if ($filePath && strpos($filePath, $mediaRootDir) === 0) {\n            $thumbnailDir .= DS . dirname(substr($filePath, strlen($mediaRootDir)));\n        }\n\n        return $thumbnailDir;\n    }\n\n    /**\n     * Media Storage Helper getter\n     * @return Mage_Cms_Helper_Wysiwyg_Images\n     */\n    public function getHelper()\n    {\n        return Mage::helper('cms/wysiwyg_images');\n    }\n\n    /**\n     * Storage session\n     *\n     * @return Mage_Adminhtml_Model_Session\n     */\n    public function getSession()\n    {\n        return Mage::getSingleton('adminhtml/session');\n    }\n\n    /**\n     * Config object getter\n     *\n     * @return Mage_Core_Model_Config_Element\n     */\n    public function getConfig()\n    {\n        if (!$this->_config) {\n            $this->_config = Mage::getConfig()->getNode('cms/browser', 'adminhtml');\n        }\n\n        return $this->_config;\n    }\n\n    /**\n     * Config object as array getter\n     *\n     * @return array|string\n     */\n    public function getConfigAsArray()\n    {\n        if (!$this->_configAsArray) {\n            $this->_configAsArray = $this->getConfig()->asCanonicalArray();\n        }\n\n        return $this->_configAsArray;\n    }\n\n    /**\n     * Wysiwyg Config reader\n     *\n     * @param string $key\n     * @param mixed $default\n     * @return mixed\n     */\n    public function getConfigData($key, $default = false)\n    {\n        $configArray = $this->getConfigAsArray();\n        $key = (string) $key;\n\n        return array_key_exists($key, $configArray) ? $configArray[$key] : $default;\n    }\n\n    /**\n     * Prepare allowed_extensions config settings\n     *\n     * @param string $type Type of storage, e.g. image, media etc.\n     * @return array Array of allowed file extensions\n     */\n    public function getAllowedExtensions($type = null)\n    {\n        $extensions = $this->getConfigData('extensions');\n\n        if (is_string($type) && array_key_exists(\"{$type}_allowed\", $extensions)) {\n            $allowed = $extensions[\"{$type}_allowed\"];\n        } else {\n            $allowed = $extensions['allowed'];\n        }\n\n        return array_keys(array_filter($allowed));\n    }\n\n    /**\n     * Thumbnail root directory getter\n     *\n     * @return string\n     */\n    public function getThumbnailRoot()\n    {\n        return $this->getHelper()->getStorageRoot() . self::THUMBS_DIRECTORY_NAME;\n    }\n\n    /**\n     * Simple way to check whether file is image or not based on extension\n     *\n     * @param string $filename\n     * @return bool\n     */\n    public function isImage($filename)\n    {\n        if (!$this->hasData('_image_extensions')) {\n            $this->setData('_image_extensions', $this->getAllowedExtensions('image'));\n        }\n        $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));\n        return in_array($ext, $this->_getData('_image_extensions'));\n    }\n}\n"], "filenames": ["app/code/core/Mage/Cms/Model/Wysiwyg/Images/Storage.php"], "buggy_code_start_loc": [235], "buggy_code_end_loc": [235], "fixing_code_start_loc": [236], "fixing_code_end_loc": [241], "type": "CWE-77", "message": "OpenMage LTS is an e-commerce platform. Prior to versions 19.4.22 and 20.0.19, Magento admin users with access to the customer media could execute code on the server. Versions 19.4.22 and 20.0.19 contain a patch for this issue.", "other": {"cve": {"id": "CVE-2021-41143", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-27T19:15:09.377", "lastModified": "2023-02-06T18:47:27.887", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenMage LTS is an e-commerce platform. Prior to versions 19.4.22 and 20.0.19, Magento admin users with access to the customer media could execute code on the server. Versions 19.4.22 and 20.0.19 contain a patch for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmage:magento:*:*:*:*:lts:*:*:*", "versionEndExcluding": "19.4.22", "matchCriteriaId": "B87F8CA0-6C21-4615-A520-39F1E9E737D5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmage:magento:*:*:*:*:lts:*:*:*", "versionStartIncluding": "20.0.0", "versionEndExcluding": "20.0.19", "matchCriteriaId": "15B9BC3F-BF81-4DF5-B57B-ECF7059A7991"}]}]}], "references": [{"url": "https://github.com/OpenMage/magento-lts/commit/45330ff50439984e806992fa22c3f96c4d660f91", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/releases/tag/v19.4.22", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/releases/tag/v20.0.19", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/security/advisories/GHSA-5vpv-xmcj-9q85", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OpenMage/magento-lts/commit/45330ff50439984e806992fa22c3f96c4d660f91"}}