{"buggy_code": ["<?php\n/**\n * Little Software Stats\n *\n * An open source program that allows developers to keep track of how their software is being used\n *\n * @package\t\tLittle Software Stats\n * @author\t\tLittle Apps\n * @copyright   Copyright (c) 2011, Little Apps\n * @license\t\thttp://www.gnu.org/licenses/gpl.html GNU General Public License v3\n * @link\t\thttp://little-software-stats.com\n * @since\t\tVersion 0.1\n * @filesource\n */\n\nif ( !defined( 'LSS_LOADED' ) ) die( 'This page cannot be loaded directly' );\n\nrequire_once ROOTDIR . '/inc/password_compat/lib/password.php';\n\n/**\n * Secure login class\n * Manage access to Little Software Stats\n *\n * @package Little Software Stats\n * @author Little Apps\n */\nclass SecureLogin {\n    /**\n     * @var resource Connection to database\n     */\n    private $db;\n\n    /**\n     * @var resource Single instance of class\n     */\n    private static $m_pInstance;\n\n    /**\n     * Constructor for SecureLogin class\n     */\n    function __construct( ) {\n        if( !isset( Session::getInstance()->user_info ) )\n            Session::getInstance()->user_info = false;\n    }\n    \n    /**\n     * Gets single instance of class\n     * @access public\n     * @static\n     * @return resource Single instance of class \n     */\n    public static function getInstance()\n    {\n        if (!self::$m_pInstance)\n            self::$m_pInstance = new SecureLogin();\n\n        return self::$m_pInstance;\n    }\n\n    /**\n     * Checks if user is logged in\n     * @access public\n     * @return bool Returns true if user is logged in \n     */\n    public function check_user() {\n    \tif ( !empty( Session::getInstance()->user_info ) )\n\t\t\treturn ( !empty( Session::getInstance()->user_info['username'] ) && Session::getInstance()->user_info['ip_address'] == get_ip_address() );\n\n        return false;\n    }\n\t\n    /**\n     * Tries to login user using username and password\n     * @access public\n     * @param string $user Username\n     * @param string $pass Password (plain text)\n     * @return string Returns error if username/password is invalid, otherwise, a empty string\n     */\n    public function login_user( $user, $pass ) {\n    \t// Trim username + password and turn username into lowercase\n        $user = strtolower( trim( $user ) );\n        $pass = trim( $pass );\n\n        if ( $user == \"\" || $pass == \"\" )\n            return __( \"Username and/or password cannot be empty\" );\n\n        if ( !MySQL::getInstance()->select( \"users\", array( \"UserName\" => $user ), \"\", \"0,1\" ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n\n        if ( MySQL::getInstance()->records == 1 ) {\n        \tif ( password_verify( $pass,  MySQL::getInstance()->arrayed_result['UserPass'] ) ) {\n                // Clear activation key if its been set\n                if ( MySQL::getInstance()->arrayed_result['ActivateKey'] != \"\" )\n                    MySQL::getInstance()->update( \"users\", array( \"ActivateKey\" => \"\" ), array( \"UserName\" => $user ) );\n\n                // Prevent session hijacking \n                session_regenerate_id( );\n                \n                // Set user info\n                Session::getInstance()->user_info = array(\n                \t'username' => $user,\n                \t'ip_address' => get_ip_address()\n                );\n\n                return \"\";\n            }\n        } \n\n        Session::getInstance()->user_info = false;\n\n        return __( \"Username and/or password is invalid\" );\n    }\n\t\n    /**\n     * Registers user into database\n     * @param string $user Username\n     * @param string $pass1 Password (plain text)\n     * @param string $pass2 Repeat password\n     * @param string $email E-mail address\n     * @return string Returns error if username, password, or email is invalid, otherwise, a empty string\n     */\n    public function register_user( $user, $pass1, $pass2, $email ) {\n        // Trim parameters and make username + email lowercase to prevent duplicates\n        $user = strtolower( trim( $user ) );\n        $email = strtolower( trim( $email ) );\n        $pass1 = trim( $pass1 );\n        $pass2 = trim( $pass2 );\n\n        // Check valid username\n        if ( !preg_match( \"/^[a-z\\d_]{5,20}$/i\", $user ) ) {\n            if ( strlen( $user ) < 5 ) return __( \"Username must be at least 5 characters\" );\n            else if ( strlen( $user ) > 20 ) return __( \"Username cannot be more then 20 characters\" );\n            else return __( \"Username can only contain alpha-numeric characters (a-z, A-Z, 0-9) and underscores\" );\n        }\n\n        // Check valid email address\n        if ( !filter_var( $email, FILTER_VALIDATE_EMAIL ) )\n            return __( \"E-mail address is invalid\" );\n\n        // Check passwords\n        if ( $pass1 != $pass2 ) return __( \"Passwords must be identical\" );\n        else if ( strlen( $pass1 ) < 6 ) return __( \"Password must be longer than 6 characters\" );\n\n        // Check if username already exists\n        if ( !MySQL::getInstance()->select( \"users\", array( \"UserName\" => $user ), \"\", \"0,1\" ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n        if ( MySQL::getInstance()->records == 1 )\n            return __( \"Another user has already registered that username\" );\n\n        // Check if email already exists\n        if ( !MySQL::getInstance()->select( \"users\", array( \"UserEmail\" => $email ), \"\", \"0,1\" ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n        if ( MySQL::getInstance()->records == 1 )\n            return __( \"Another user has already registered with that e-mail address\" );\n\n        $pass_hash = password_hash( $pass1, PASSWORD_DEFAULT );\n\n        // Add username to table\n        if ( !MySQL::getInstance()->insert( array( \"UserName\" => $user, \"UserPass\" => $pass_hash, \"UserEmail\" => $email ), \"users\" ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n\n        return \"\";\n    }\n\t\n    /**\n     * Sends e-mail to user with link to reset password\n     * @access public\n     * @param string $email E-mail address\n     * @return string Returns error if e-mail address is not found or unable to send e-mail \n     */\n    public function forgot_password( $email ) {\n        global $site_url;\n\n        // Trim email and change to lower case\n        $email = strtolower( trim( $email ) );\n\n        if (!MySQL::getInstance()->select( \"users\", array( \"UserEmail\" => $email ), \"\", \"0,1\" ) )\n            return __( \"E-mail address does not exist\" ) . \"\\n\";\n\n        // Random key is 20 characters made up of a-z and 0-9\n        $rand_key = $this->make_random_password( 20 );\n\n        if ( !MySQL::getInstance()->update( \"users\", array( \"ActivateKey\" => $rand_key ), array( \"UserEmail\" => $email ) ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n\n        $subject = __( \"Your password at \" ) . SITE_NAME; \n        $message = __( \"Someone requested that the password be reset for the following account:\"  ) . \"\\r\\n\\r\\n\";\n        $message .= __( \"Username: \"  ) . MySQL::getInstance()->arrayed_result['UserName'] . \"\\r\\n\\r\\n\";\n        $message .= $site_url . \"\\r\\n\\r\\n\";\n        $message .= __( \"If this was a mistake, just ignore this email and nothing will happen.\"  ) . \"\\r\\n\\r\\n\";\n        $message .= __( \"To reset your password, visit the following address:\" ) . \"\\r\\n\\r\\n\";\n        $message .= \"<\". $site_url . \"/login.php?action=resetPwd&key=\".$rand_key.\"&login=\".rawurlencode(MySQL::getInstance()->arrayed_result['UserName']).\">\\r\\n\\r\\n\";\n        $message .= __( \"This is an automated response, please do not reply!\" ) . \"\\n\";\n\n        if ( !send_mail( $email, $subject, $message ) ) \n            return __( \"Unable to send password reset e-mail\" );\n\n        return \"\";\n    }\n\t\n    /**\n     * Changes password using key sent to e-mail address\n     * @access public\n     * @param string $user Username\n     * @param string $pass New password (plain text)\n     * @param string $pass2 New password (again)\n     * @param string $key Key sent to e-mail address\n     * @return string Returns error if unable to change password \n     */\n    public function change_password( $user, $pass, $pass2, $key ) {\n        // Trim parameters, also convert user and key to lowercase\n        $user = strtolower( trim( $user ) );\n        $pass = trim( $pass );\n        $pass2 = trim( $pass2 );\n        $key = strtolower( trim( $key ) );\n\n        if ( !MySQL::getInstance()->select( \"users\", array( \"UserName\" => $user ), \"\", \"0,1\" ) )\n            return __( \"Username does not exist\" );\n\n        if ( !MySQL::getInstance()->select( \"users\", array( \"UserName\" => $user, \"ActivateKey\" => $key ), \"\", \"0,1\" ) )\n            return __( \"Activation key does not exist\" );\n\n        // Check passwords\n        if ( trim( $pass ) != trim( $pass2 ) ) \n            return __( \"Passwords must be identical\" );\n        else if ( strlen( trim( $pass ) ) < 6 ) \n            return __( \"Password must be longer then 6 characters\" );\n\n        $pass_hash = password_hash( trim ( $pass ), PASSWORD_DEFAULT );\n\n        if ( !MySQL::getInstance()->update( \"users\", array( \"ActivateKey\" => \"\", \"UserPass\" => $pass_hash ), array( \"UserName\" => $user ) ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n\n        // Notify user of password change\n        $subject = __( \"Your account at \" ) . SITE_NAME;\n        $message = __( \"Password has been changed for user: \" ) . \" $user \\r\\n\";\n        $message .= __( \"This is an automated response, please do not reply!\" );\n\n        if ( !send_mail( MySQL::getInstance()->arrayed_result['UserEmail'], $subject, $message ) )\n            return __( \"Unable to send password notification e-mail\" );\n\n        $this->logout_user( );\n\n        return \"\";\n    }\n\t\n    /**\n     * Generates a random password\n     * @access private\n     * @param int $length Length of password\n     * @return string Generated password\n     */\n    private function make_random_password( $length ) {\n        $pass = '';\n\n        $salt = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n        $salt_len = strlen( $salt );\n\n        mt_srand();\n\n        for ( $i = 0; $i <= $length; $i++ ) {\n            $chr = $salt[ mt_rand( 0, $salt_len - 1 ) ];\n            $pass = $pass . $chr;\n        }\n\n        return $pass;\n    } \n    \n    /**\n     * Logout user\n     * @access public\n     */\n    public function logout_user( ){\n        // Unset user info\n        unset( Session::getInstance()->user_info );\n\n        // Destroy the session\n        Session::getInstance()->destroy();\n    }\n}\n", "<?php\n/**\n * Little Software Stats\n *\n * An open source program that allows developers to keep track of how their software is being used\n *\n * @package\t\tLittle Software Stats\n * @author\t\tLittle Apps\n * @copyright   Copyright (c) 2011, Little Apps\n * @license\t\thttp://www.gnu.org/licenses/gpl.html GNU General Public License v3\n * @link\t\thttp://little-software-stats.com\n * @since\t\tVersion 0.1\n * @filesource\n */\n\n// Prevents other pages from being loaded directly\ndefine( 'LSS_LOADED', true );\n\nrequire_once( dirname( __FILE__ ) . '/inc/main.php' );\n\n$error = \"\";\n\nif ( ( isset( $_GET['action'] ) ) && $_GET['action'] == 'logout' ) {\n    $login->logout_user();\n    redirect( $site_url.\"/login.php\" );\n}\n\n$valid = false;\n\n$use_captcha = ( get_option( 'recaptcha_enabled' ) == 'true' );\n\nif ( $use_captcha == true ) {\n    require_once( ROOTDIR . '/inc/recaptchalib.php' );\n    \n    $public_key = get_option( 'recaptcha_public_key' );\n    $private_key = get_option( 'recaptcha_private_key' );\n\n    if ( isset( $_POST[\"recaptcha_challenge_field\"] ) && isset( $_POST[\"recaptcha_response_field\"] ) ) {\n        // Check captcha\n        $resp = recaptcha_check_answer( $private_key, $_SERVER[\"REMOTE_ADDR\"], $_POST[\"recaptcha_challenge_field\"], $_POST[\"recaptcha_response_field\"] );\n\n        $valid = $resp->is_valid;\n    }\n} else {\n    if ( isset( $_POST['captcha'] ) )\n        $valid = ( ( md5( $_POST['captcha'] ) == Session::getInstance()->Captcha ) ? ( true ) : ( false ) );\n}\n\n\nif ( isset( $_POST['submitBtn'] ) ) {\n    if ( !isset( $_POST['username'] ) || !isset( $_POST['password'] ) )\n        return;\n\t\t\n    $username = ( ( isset( $_POST['username'] ) ) ? ( $_POST['username'] ) : ( '' ) );\n    $password = ( ( isset( $_POST['password'] ) ) ? ( $_POST['password'] ) : ( '' ) );\n\n    if ( !$valid ) {\n        $error = __( \"The CAPTCHA wasn't entered correctly. Go back and try it again.\" );\n    } else {\n        $error = SecureLogin::getInstance()->login_user( $username, $password );\n\n        if ( empty( $error ) ) {\n            redirect( $site_url );\n        }\n    }\n} else if ( isset( $_POST['resetBtn'] ) ) {\n    if ( !$valid )\n        $error = __( \"The CAPTCHA wasn't entered correctly. Go back and try it again.\" );\n    else\n        $error = SecureLogin::getInstance()->forgot_password( $_POST['email'] );\n} else if ( isset( $_POST['changeBtn'] ) ) {\n    if ( !$valid )\n        $error = __( \"The CAPTCHA wasn't entered correctly. Go back and try it again.\" );\n    else\n        $error = SecureLogin::getInstance()->change_password( $_POST['username'], $_POST['password'], $_POST['password2'], $_POST['key'] );\n\n    if ( empty( $error ) ) {\n        redirect( $site_url . \"/login.php\" );\n    }\n}\n?>\n<!DOCTYPE html>\n<!--[if IE 6]><html id=\"ie6\" dir=\"ltr\" lang=\"en\"><![endif]-->\n<!--[if IE 7]><html id=\"ie7\" dir=\"ltr\" lang=\"en\"><![endif]-->\n<!--[if IE 8]><html id=\"ie8\" dir=\"ltr\" lang=\"en\"><![endif]-->\n<!--[if !(IE 6) | !(IE 7) | !(IE 8)  ]><!--><html dir=\"ltr\" lang=\"en\"><!--<![endif]-->\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n        \n        <title><?php _e ( 'Little Software Stats' ); ?> | <?php _e ( 'Login' ); ?></title>\n        <link rel=\"stylesheet\" href=\"css/screen.css\" type=\"text/css\" media=\"screen\" title=\"default\" />\n        <!-- favicon -->\n        <link type=\"image/x-icon\" href=\"images/shared/favicon.ico\" rel=\"icon\" />\n        <link type=\"image/x-icon\" href=\"images/shared/favicon.ico\" rel=\"shortcut icon\" />\n        <!--  jquery core -->\n        <script src=\"<?php file_url( '/js/jquery/jquery.min.js' ) ?>\" type=\"text/javascript\"></script>\n\n        <!-- jquery scripts -->\n        <script src=\"<?php get_min_uri( 'login' ); ?>\" type=\"text/javascript\"></script>\n\n        <script type=\"text/javascript\">\n            var RecaptchaOptions = {\n                theme : 'blackglass'\n            };\n        </script>\n\n    </head>\n    <body id=\"login-bg\"> \n        <!-- Start: login-holder -->\n        <div id=\"login-holder\">\n\n            <!-- start logo -->\n            <div id=\"logo-login\">\n                <a href=\"index.php\"><img src=\"images/shared/logo.png\" width=\"261\" height=\"40\" alt=\"<?php _e ( 'Little Software Stats' ); ?>\" /></a>\n            </div>\n            <!-- end logo -->\n\t\n            <div class=\"clear\"></div>\n\t\n            <!--  start loginbox ................................................................................. -->\n            <div id=\"loginbox\">\n                <!--  start message -->\n                <?php if ( !empty( $error ) ) : ?>\n                    <div id=\"message-red\" align=\"center\">\n                        <table border=\"0\" width=\"90%\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                                <td class=\"red-left\"><?php echo $error; ?></td>\n                                <td class=\"red-right\"><a class=\"close-red\"><img src=\"images/table/icon_close_red.png\" alt=\"\" /></a></td>\n                            </tr>\n                        </table>\n                    </div>\n                <?php elseif (empty($error) && isset($_POST['resetBtn'])) : ?>\n                    <div id=\"message-green\" align=\"center\">\n                        <table border=\"0\" width=\"90%\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                                <td class=\"green-left\"><?php _e ( 'Please check your inbox for further instructions on how to reset your password.' ); ?></td>\n                                <td class=\"green-right\"><a class=\"close-red\"><img src=\"images/table/icon_close_green.png\" alt=\"\" /></a></td>\n                            </tr>\n                        </table>\n                    </div>\n                <?php endif; ?>\n                <!--  end message -->\n                \n\t\t<!--  start login-inner -->\n                <?php if ( ( isset( $_GET['action'] ) ) && $_GET['action'] == \"resetPwd\") : ?>\t\t\n\t\t<div id=\"login-inner\">\n                    <form action=\"#\" method=\"post\">\n                        <input name=\"key\" type=\"hidden\" value=\"<?php echo ( ( isset( $_GET['key'] ) ) ? ( $_GET['key'] ) : ( '' ) ); ?>\" />\n                        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                                <th><?php _e ( 'Username' ); ?></th>\n                                <td><input name=\"username\" type=\"text\" class=\"login-inp\" value=\"<?php echo ( ( isset( $_GET['login'] ) ) ? ( $_GET['login'] ) : ( '' ) ); ?>\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Password' ); ?></th>\n                                <td><input name=\"password\" type=\"password\" class=\"login-inp\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Password (again)' ); ?></th>\n                                <td><input name=\"password2\" type=\"password\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php if ( $use_captcha ) : ?>\n                            <tr>\n                                <td colspan=\"2\" align=\"center\" id=\"login-captcha\">\n                                    <?php echo recaptcha_get_html( $public_key ); ?>\n                                </td>\n                            </tr>\n                            <?php else : ?>\n                            <tr>\n                                <td>&nbsp;</td>\n                                <td id=\"login-captcha\" align=\"center\"><img src=\"inc/captcha.php\" width=\"200\" height=\"75\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Enter the code above' ); ?></th>\n                                <td><input name=\"captcha\" type=\"text\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php endif; ?>\n                            <tr>\n                                <th></th>\n                                <td><input name=\"changeBtn\" type=\"submit\" class=\"submit-login\" /></td>\n                            </tr>\n                        </table>\n                    </form>\n\t\t</div>\n                <?php else : ?>\n\t\t<div id=\"login-inner\">\n                    <form action=\"#\" method=\"post\">\n                        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                                <th><?php _e ( 'Username' ); ?></th>\n                                <td><input name=\"username\" type=\"text\" class=\"login-inp\" value=\"<?php echo ( ( isset( $_POST['username'] ) ) ? ( $_POST['username'] ) : ( '' ) ); ?>\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Password' ); ?></th>\n                                <td><input name=\"password\" type=\"password\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php if ( $use_captcha ) : ?>\n                            <tr>\n                                <td colspan=\"2\" align=\"center\" id=\"login-captcha\">\n                                    <?php echo recaptcha_get_html( $public_key ); ?>\n                                </td>\n                            </tr>\n                            <?php else : ?>\n                            <tr>\n                                <td>&nbsp;</td>\n                                <td id=\"login-captcha\" align=\"center\"><img src=\"inc/captcha.php\" width=\"200\" height=\"75\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Enter the code above' ); ?></th>\n                                <td><input name=\"captcha\" type=\"text\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php endif; ?>\n                            <tr>\n                                <th></th>\n                                <td><input name=\"submitBtn\" type=\"submit\" class=\"submit-login\"  /></td>\n                            </tr>\n                        </table>\n                    </form>\n\t\t</div>\n\t\t<div class=\"clear\"></div>\n\t\t<a href=\"#\" class=\"forgot-pwd\"><?php _e ( 'Forgot Password?' ); ?></a>\n                <?php endif; ?>\n            <!--  end login-inner -->\n            </div>\n            <!--  end loginbox -->\n \n            <!--  start forgotbox ................................................................................... -->\n            <div id=\"forgotbox\">\n                <div id=\"forgotbox-text\"><?php _e ( \"Please enter your email and we'll reset your password.\" ); ?></div>\n                <!--  start forgot-inner -->\n                <div id=\"forgot-inner\">\n                    <form action=\"#\" method=\"post\">\n                        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                                <th><?php _e ( 'Email address:' ); ?></th>\n                                <td><input name=\"email\" type=\"text\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php if ( $use_captcha ) : ?>\n                            <tr>\n                                <td colspan=\"2\" align=\"center\" id=\"forgot-captcha\"></td>\n                            </tr>\n                            <?php else : ?>\n                            <tr>\n                                <td>&nbsp;</td>\n                                <td id=\"forgot-captcha\" align=\"center\"><img src=\"inc/captcha.php\" width=\"200\" height=\"75\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Enter the code above' ); ?></th>\n                                <td><input name=\"captcha\" type=\"text\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php endif; ?>\n                            <tr>\n                                <th> </th>\n                                <td><input name=\"resetBtn\" type=\"submit\" class=\"submit-login\"  /></td>\n                            </tr>\n                        </table>\n                    </form>\n                </div>\n                <!--  end forgot-inner -->\n                <div class=\"clear\"></div>\n                <a href=\"\" class=\"back-login\"><?php _e ( 'Back to login' ); ?></a>\n            </div>\n            <!--  end forgotbox -->\n        </div>\n        <!-- End: login-holder -->\n        \n        <!-- MUST BE THE LAST SCRIPT IN <HEAD></HEAD></HEAD> png fix -->\n        <script type=\"text/javascript\">\n            $(document).ready(function(){ $(document).pngFix( ); });\n        </script>\n    </body>\n</html>"], "fixing_code": ["<?php\n/**\n * Little Software Stats\n *\n * An open source program that allows developers to keep track of how their software is being used\n *\n * @package\t\tLittle Software Stats\n * @author\t\tLittle Apps\n * @copyright   Copyright (c) 2011, Little Apps\n * @license\t\thttp://www.gnu.org/licenses/gpl.html GNU General Public License v3\n * @link\t\thttp://little-software-stats.com\n * @since\t\tVersion 0.1\n * @filesource\n */\n\nif ( !defined( 'LSS_LOADED' ) ) die( 'This page cannot be loaded directly' );\n\nrequire_once ROOTDIR . '/inc/password_compat/lib/password.php';\n\n/**\n * Secure login class\n * Manage access to Little Software Stats\n *\n * @package Little Software Stats\n * @author Little Apps\n */\nclass SecureLogin {\n    /**\n     * @var resource Connection to database\n     */\n    private $db;\n\n    /**\n     * @var resource Single instance of class\n     */\n    private static $m_pInstance;\n\n    /**\n     * Constructor for SecureLogin class\n     */\n    function __construct( ) {\n        if( !isset( Session::getInstance()->user_info ) )\n            Session::getInstance()->user_info = false;\n    }\n    \n    /**\n     * Gets single instance of class\n     * @access public\n     * @static\n     * @return resource Single instance of class \n     */\n    public static function getInstance()\n    {\n        if (!self::$m_pInstance)\n            self::$m_pInstance = new SecureLogin();\n\n        return self::$m_pInstance;\n    }\n\n    /**\n     * Checks if user is logged in\n     * @access public\n     * @return bool Returns true if user is logged in \n     */\n    public function check_user() {\n    \tif ( !empty( Session::getInstance()->user_info ) )\n\t\t\treturn ( !empty( Session::getInstance()->user_info['username'] ) && Session::getInstance()->user_info['ip_address'] == get_ip_address() );\n\n        return false;\n    }\n\t\n    /**\n     * Tries to login user using username and password\n     * @access public\n     * @param string $user Username\n     * @param string $pass Password (plain text)\n     * @return string Returns error if username/password is invalid, otherwise, a empty string\n     */\n    public function login_user( $user, $pass ) {\n    \t// Trim username + password and turn username into lowercase\n        $user = strtolower( trim( $user ) );\n        $pass = trim( $pass );\n\n        if ( $user == \"\" || $pass == \"\" )\n            return __( \"Username and/or password cannot be empty\" );\n\n        if ( !MySQL::getInstance()->select( \"users\", array( \"UserName\" => $user ), \"\", \"0,1\" ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n\n        if ( MySQL::getInstance()->records == 1 ) {\n        \tif ( password_verify( $pass,  MySQL::getInstance()->arrayed_result['UserPass'] ) ) {\n                // Clear activation key if its been set\n                if ( MySQL::getInstance()->arrayed_result['ActivateKey'] != \"\" )\n                    MySQL::getInstance()->update( \"users\", array( \"ActivateKey\" => \"\" ), array( \"UserName\" => $user ) );\n\n                // Prevent session hijacking \n                session_regenerate_id( );\n                \n                // Set user info\n                Session::getInstance()->user_info = array(\n                \t'username' => $user,\n                \t'ip_address' => get_ip_address()\n                );\n\n                return \"\";\n            }\n        } \n\n        Session::getInstance()->user_info = false;\n\n        return __( \"Username and/or password is invalid\" );\n    }\n\t\n    /**\n     * Registers user into database\n     * @param string $user Username\n     * @param string $pass1 Password (plain text)\n     * @param string $pass2 Repeat password\n     * @param string $email E-mail address\n     * @return string Returns error if username, password, or email is invalid, otherwise, a empty string\n     */\n    public function register_user( $user, $pass1, $pass2, $email ) {\n        // Trim parameters and make username + email lowercase to prevent duplicates\n        $user = strtolower( trim( $user ) );\n        $email = strtolower( trim( $email ) );\n        $pass1 = trim( $pass1 );\n        $pass2 = trim( $pass2 );\n\n        // Check valid username\n        if ( !preg_match( \"/^[a-z\\d_]{5,20}$/i\", $user ) ) {\n            if ( strlen( $user ) < 5 ) return __( \"Username must be at least 5 characters\" );\n            else if ( strlen( $user ) > 20 ) return __( \"Username cannot be more then 20 characters\" );\n            else return __( \"Username can only contain alpha-numeric characters (a-z, A-Z, 0-9) and underscores\" );\n        }\n\n        // Check valid email address\n        if ( !filter_var( $email, FILTER_VALIDATE_EMAIL ) )\n            return __( \"E-mail address is invalid\" );\n\n        // Check passwords\n        if ( $pass1 != $pass2 ) return __( \"Passwords must be identical\" );\n        else if ( strlen( $pass1 ) < 6 ) return __( \"Password must be longer than 6 characters\" );\n\n        // Check if username already exists\n        if ( !MySQL::getInstance()->select( \"users\", array( \"UserName\" => $user ), \"\", \"0,1\" ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n        if ( MySQL::getInstance()->records == 1 )\n            return __( \"Another user has already registered that username\" );\n\n        // Check if email already exists\n        if ( !MySQL::getInstance()->select( \"users\", array( \"UserEmail\" => $email ), \"\", \"0,1\" ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n        if ( MySQL::getInstance()->records == 1 )\n            return __( \"Another user has already registered with that e-mail address\" );\n\n        $pass_hash = password_hash( $pass1, PASSWORD_DEFAULT );\n\n        // Add username to table\n        if ( !MySQL::getInstance()->insert( array( \"UserName\" => $user, \"UserPass\" => $pass_hash, \"UserEmail\" => $email ), \"users\" ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n\n        return \"\";\n    }\n\t\n    /**\n     * Sends e-mail to user with link to reset password\n     * @access public\n     * @param string $email E-mail address\n     * @return string Returns error if e-mail address is not found or unable to send e-mail \n     */\n    public function forgot_password( $email ) {\n        global $site_url;\n\n        // Trim email and change to lower case\n        $email = strtolower( trim( $email ) );\n\n        if (!MySQL::getInstance()->select( \"users\", array( \"UserEmail\" => $email ), \"\", \"0,1\" ) )\n            return __( \"E-mail address does not exist\" ) . \"\\n\";\n\n        // Random key is 20 characters made up of a-z and 0-9\n        $rand_key = $this->make_random_password( 20 );\n\n        if ( !MySQL::getInstance()->update( \"users\", array( \"ActivateKey\" => $rand_key ), array( \"UserEmail\" => $email ) ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n\n        $subject = __( \"Your password at \" ) . SITE_NAME; \n        $message = __( \"Someone requested that the password be reset for the following account:\"  ) . \"\\r\\n\\r\\n\";\n        $message .= __( \"Username: \"  ) . MySQL::getInstance()->arrayed_result['UserName'] . \"\\r\\n\\r\\n\";\n        $message .= $site_url . \"\\r\\n\\r\\n\";\n        $message .= __( \"If this was a mistake, just ignore this email and nothing will happen.\"  ) . \"\\r\\n\\r\\n\";\n        $message .= __( \"To reset your password, visit the following address:\" ) . \"\\r\\n\\r\\n\";\n        $message .= \"<\". $site_url . \"/login.php?action=resetPwd&key=\".$rand_key.\"&login=\".rawurlencode(MySQL::getInstance()->arrayed_result['UserName']).\">\\r\\n\\r\\n\";\n        $message .= __( \"This is an automated response, please do not reply!\" ) . \"\\n\";\n\n        if ( !send_mail( $email, $subject, $message ) ) \n            return __( \"Unable to send password reset e-mail\" );\n\n        return \"\";\n    }\n\t\n    /**\n     * Changes password using key sent to e-mail address\n     * @access public\n     * @param string $user Username\n     * @param string $pass New password (plain text)\n     * @param string $pass2 New password (again)\n     * @param string $key Key sent to e-mail address\n     * @return string Returns error if unable to change password \n     */\n    public function change_password( $user, $pass, $pass2, $key ) {\n        // Trim parameters, also convert user and key to lowercase\n        $user = strtolower( trim( $user ) );\n        $pass = trim( $pass );\n        $pass2 = trim( $pass2 );\n        $key = strtolower( trim( $key ) );\n        \n        if ( empty( $key ) )\n        \treturn __( \"Activation key cannot be empty\" );\n\n        if ( !MySQL::getInstance()->select( \"users\", array( \"UserName\" => $user ), \"\", \"0,1\" ) )\n            return __( \"Username does not exist\" );\n\n        if ( !MySQL::getInstance()->select( \"users\", array( \"UserName\" => $user, \"ActivateKey\" => $key ), \"\", \"0,1\" ) )\n            return __( \"Activation key does not exist\" );\n\n        // Check passwords\n        if ( trim( $pass ) != trim( $pass2 ) ) \n            return __( \"Passwords must be identical\" );\n        else if ( strlen( trim( $pass ) ) < 6 ) \n            return __( \"Password must be longer then 6 characters\" );\n\n        $pass_hash = password_hash( trim ( $pass ), PASSWORD_DEFAULT );\n\n        if ( !MySQL::getInstance()->update( \"users\", array( \"ActivateKey\" => \"\", \"UserPass\" => $pass_hash ), array( \"UserName\" => $user ) ) )\n            return __( \"Unable to query database: \" ) . MySQL::getInstance()->last_error;\n\n        // Notify user of password change\n        $subject = __( \"Your account at \" ) . SITE_NAME;\n        $message = __( \"Password has been changed for user: \" ) . \" $user \\r\\n\";\n        $message .= __( \"This is an automated response, please do not reply!\" );\n\n        if ( !send_mail( MySQL::getInstance()->arrayed_result['UserEmail'], $subject, $message ) )\n            return __( \"Unable to send password notification e-mail\" );\n\n        $this->logout_user( );\n\n        return \"\";\n    }\n\t\n    /**\n     * Generates a random password\n     * @access private\n     * @param int $length Length of password\n     * @return string Generated password\n     */\n    private function make_random_password( $length ) {\n        $pass = '';\n\n        $salt = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n        $salt_len = strlen( $salt );\n\n        mt_srand();\n\n        for ( $i = 0; $i <= $length; $i++ ) {\n            $chr = $salt[ mt_rand( 0, $salt_len - 1 ) ];\n            $pass = $pass . $chr;\n        }\n\n        return $pass;\n    } \n    \n    /**\n     * Logout user\n     * @access public\n     */\n    public function logout_user( ){\n        // Unset user info\n        unset( Session::getInstance()->user_info );\n\n        // Destroy the session\n        Session::getInstance()->destroy();\n    }\n}\n", "<?php\n/**\n * Little Software Stats\n *\n * An open source program that allows developers to keep track of how their software is being used\n *\n * @package\t\tLittle Software Stats\n * @author\t\tLittle Apps\n * @copyright   Copyright (c) 2011, Little Apps\n * @license\t\thttp://www.gnu.org/licenses/gpl.html GNU General Public License v3\n * @link\t\thttp://little-software-stats.com\n * @since\t\tVersion 0.1\n * @filesource\n */\n\n// Prevents other pages from being loaded directly\ndefine( 'LSS_LOADED', true );\n\nrequire_once( dirname( __FILE__ ) . '/inc/main.php' );\n\n$error = \"\";\n\nif ( ( isset( $_GET['action'] ) ) && $_GET['action'] == 'logout' ) {\n    $login->logout_user();\n    redirect( $site_url.\"/login.php\" );\n}\n\n$valid = false;\n\n$use_captcha = ( get_option( 'recaptcha_enabled' ) == 'true' );\n\nif ( $use_captcha == true ) {\n    require_once( ROOTDIR . '/inc/recaptchalib.php' );\n    \n    $public_key = get_option( 'recaptcha_public_key' );\n    $private_key = get_option( 'recaptcha_private_key' );\n\n    if ( isset( $_POST[\"recaptcha_challenge_field\"] ) && isset( $_POST[\"recaptcha_response_field\"] ) ) {\n        // Check captcha\n        $resp = recaptcha_check_answer( $private_key, $_SERVER[\"REMOTE_ADDR\"], $_POST[\"recaptcha_challenge_field\"], $_POST[\"recaptcha_response_field\"] );\n\n        $valid = $resp->is_valid;\n    }\n} else {\n    if ( isset( $_POST['captcha'] ) )\n        $valid = ( ( md5( $_POST['captcha'] ) == Session::getInstance()->Captcha ) ? ( true ) : ( false ) );\n}\n\n\nif ( isset( $_POST['submitBtn'] ) ) {\n    if ( !isset( $_POST['username'] ) || !isset( $_POST['password'] ) )\n        return;\n\t\t\n    $username = ( ( isset( $_POST['username'] ) ) ? ( $_POST['username'] ) : ( '' ) );\n    $password = ( ( isset( $_POST['password'] ) ) ? ( $_POST['password'] ) : ( '' ) );\n\n    if ( !$valid ) {\n        $error = __( \"The CAPTCHA wasn't entered correctly. Go back and try it again.\" );\n    } else {\n        $error = SecureLogin::getInstance()->login_user( $username, $password );\n\n        if ( empty( $error ) ) {\n            redirect( $site_url );\n        }\n    }\n} else if ( isset( $_POST['resetBtn'] ) ) {\n    if ( !$valid )\n        $error = __( \"The CAPTCHA wasn't entered correctly. Go back and try it again.\" );\n    else\n        $error = SecureLogin::getInstance()->forgot_password( $_POST['email'] );\n} else if ( isset( $_POST['changeBtn'] ) ) {\n    if ( !$valid )\n        $error = __( \"The CAPTCHA wasn't entered correctly. Go back and try it again.\" );\n    else\n        $error = SecureLogin::getInstance()->change_password( $_POST['username'], $_POST['password'], $_POST['password2'], $_POST['key'] );\n\n    if ( empty( $error ) ) {\n        redirect( $site_url . \"/login.php\" );\n    }\n}\n?>\n<!DOCTYPE html>\n<!--[if IE 6]><html id=\"ie6\" dir=\"ltr\" lang=\"en\"><![endif]-->\n<!--[if IE 7]><html id=\"ie7\" dir=\"ltr\" lang=\"en\"><![endif]-->\n<!--[if IE 8]><html id=\"ie8\" dir=\"ltr\" lang=\"en\"><![endif]-->\n<!--[if !(IE 6) | !(IE 7) | !(IE 8)  ]><!--><html dir=\"ltr\" lang=\"en\"><!--<![endif]-->\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n        \n        <title><?php _e ( 'Little Software Stats' ); ?> | <?php _e ( 'Login' ); ?></title>\n        <link rel=\"stylesheet\" href=\"css/screen.css\" type=\"text/css\" media=\"screen\" title=\"default\" />\n        <!-- favicon -->\n        <link type=\"image/x-icon\" href=\"images/shared/favicon.ico\" rel=\"icon\" />\n        <link type=\"image/x-icon\" href=\"images/shared/favicon.ico\" rel=\"shortcut icon\" />\n        <!--  jquery core -->\n        <script src=\"<?php file_url( '/js/jquery/jquery.min.js' ) ?>\" type=\"text/javascript\"></script>\n\n        <!-- jquery scripts -->\n        <script src=\"<?php get_min_uri( 'login' ); ?>\" type=\"text/javascript\"></script>\n\n        <script type=\"text/javascript\">\n            var RecaptchaOptions = {\n                theme : 'blackglass'\n            };\n        </script>\n\n    </head>\n    <body id=\"login-bg\"> \n        <!-- Start: login-holder -->\n        <div id=\"login-holder\">\n\n            <!-- start logo -->\n            <div id=\"logo-login\">\n                <a href=\"index.php\"><img src=\"images/shared/logo.png\" width=\"261\" height=\"40\" alt=\"<?php _e ( 'Little Software Stats' ); ?>\" /></a>\n            </div>\n            <!-- end logo -->\n\t\n            <div class=\"clear\"></div>\n\t\n            <!--  start loginbox ................................................................................. -->\n            <div id=\"loginbox\">\n                <!--  start message -->\n                <?php if ( !empty( $error ) ) : ?>\n                    <div id=\"message-red\" align=\"center\">\n                        <table border=\"0\" width=\"90%\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                                <td class=\"red-left\"><?php echo $error; ?></td>\n                                <td class=\"red-right\"><a class=\"close-red\"><img src=\"images/table/icon_close_red.png\" alt=\"\" /></a></td>\n                            </tr>\n                        </table>\n                    </div>\n                <?php elseif (empty($error) && isset($_POST['resetBtn'])) : ?>\n                    <div id=\"message-green\" align=\"center\">\n                        <table border=\"0\" width=\"90%\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                                <td class=\"green-left\"><?php _e ( 'Please check your inbox for further instructions on how to reset your password.' ); ?></td>\n                                <td class=\"green-right\"><a class=\"close-red\"><img src=\"images/table/icon_close_green.png\" alt=\"\" /></a></td>\n                            </tr>\n                        </table>\n                    </div>\n                <?php endif; ?>\n                <!--  end message -->\n                \n\t\t<!--  start login-inner -->\n                <?php if ( ( isset( $_GET['action'] ) ) && $_GET['action'] == \"resetPwd\" && !empty( $_GET['key'] ) ) : ?>\t\t\n\t\t<div id=\"login-inner\">\n                    <form action=\"#\" method=\"post\">\n                        <input name=\"key\" type=\"hidden\" value=\"<?php echo $_GET['key']; ?>\" />\n                        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                                <th><?php _e ( 'Username' ); ?></th>\n                                <td><input name=\"username\" type=\"text\" class=\"login-inp\" value=\"<?php echo ( ( isset( $_GET['login'] ) ) ? ( $_GET['login'] ) : ( '' ) ); ?>\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Password' ); ?></th>\n                                <td><input name=\"password\" type=\"password\" class=\"login-inp\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Password (again)' ); ?></th>\n                                <td><input name=\"password2\" type=\"password\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php if ( $use_captcha ) : ?>\n                            <tr>\n                                <td colspan=\"2\" align=\"center\" id=\"login-captcha\">\n                                    <?php echo recaptcha_get_html( $public_key ); ?>\n                                </td>\n                            </tr>\n                            <?php else : ?>\n                            <tr>\n                                <td>&nbsp;</td>\n                                <td id=\"login-captcha\" align=\"center\"><img src=\"inc/captcha.php\" width=\"200\" height=\"75\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Enter the code above' ); ?></th>\n                                <td><input name=\"captcha\" type=\"text\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php endif; ?>\n                            <tr>\n                                <th></th>\n                                <td><input name=\"changeBtn\" type=\"submit\" class=\"submit-login\" /></td>\n                            </tr>\n                        </table>\n                    </form>\n\t\t</div>\n                <?php else : ?>\n\t\t<div id=\"login-inner\">\n                    <form action=\"#\" method=\"post\">\n                        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                                <th><?php _e ( 'Username' ); ?></th>\n                                <td><input name=\"username\" type=\"text\" class=\"login-inp\" value=\"<?php echo ( ( isset( $_POST['username'] ) ) ? ( $_POST['username'] ) : ( '' ) ); ?>\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Password' ); ?></th>\n                                <td><input name=\"password\" type=\"password\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php if ( $use_captcha ) : ?>\n                            <tr>\n                                <td colspan=\"2\" align=\"center\" id=\"login-captcha\">\n                                    <?php echo recaptcha_get_html( $public_key ); ?>\n                                </td>\n                            </tr>\n                            <?php else : ?>\n                            <tr>\n                                <td>&nbsp;</td>\n                                <td id=\"login-captcha\" align=\"center\"><img src=\"inc/captcha.php\" width=\"200\" height=\"75\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Enter the code above' ); ?></th>\n                                <td><input name=\"captcha\" type=\"text\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php endif; ?>\n                            <tr>\n                                <th></th>\n                                <td><input name=\"submitBtn\" type=\"submit\" class=\"submit-login\"  /></td>\n                            </tr>\n                        </table>\n                    </form>\n\t\t</div>\n\t\t<div class=\"clear\"></div>\n\t\t<a href=\"#\" class=\"forgot-pwd\"><?php _e ( 'Forgot Password?' ); ?></a>\n                <?php endif; ?>\n            <!--  end login-inner -->\n            </div>\n            <!--  end loginbox -->\n \n            <!--  start forgotbox ................................................................................... -->\n            <div id=\"forgotbox\">\n                <div id=\"forgotbox-text\"><?php _e ( \"Please enter your email and we'll reset your password.\" ); ?></div>\n                <!--  start forgot-inner -->\n                <div id=\"forgot-inner\">\n                    <form action=\"#\" method=\"post\">\n                        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                            <tr>\n                                <th><?php _e ( 'Email address:' ); ?></th>\n                                <td><input name=\"email\" type=\"text\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php if ( $use_captcha ) : ?>\n                            <tr>\n                                <td colspan=\"2\" align=\"center\" id=\"forgot-captcha\"></td>\n                            </tr>\n                            <?php else : ?>\n                            <tr>\n                                <td>&nbsp;</td>\n                                <td id=\"forgot-captcha\" align=\"center\"><img src=\"inc/captcha.php\" width=\"200\" height=\"75\" /></td>\n                            </tr>\n                            <tr>\n                                <th><?php _e ( 'Enter the code above' ); ?></th>\n                                <td><input name=\"captcha\" type=\"text\" class=\"login-inp\" /></td>\n                            </tr>\n                            <?php endif; ?>\n                            <tr>\n                                <th> </th>\n                                <td><input name=\"resetBtn\" type=\"submit\" class=\"submit-login\"  /></td>\n                            </tr>\n                        </table>\n                    </form>\n                </div>\n                <!--  end forgot-inner -->\n                <div class=\"clear\"></div>\n                <a href=\"\" class=\"back-login\"><?php _e ( 'Back to login' ); ?></a>\n            </div>\n            <!--  end forgotbox -->\n        </div>\n        <!-- End: login-holder -->\n        \n        <!-- MUST BE THE LAST SCRIPT IN <HEAD></HEAD></HEAD> png fix -->\n        <script type=\"text/javascript\">\n            $(document).ready(function(){ $(document).pngFix( ); });\n        </script>\n    </body>\n</html>"], "filenames": ["inc/class.securelogin.php", "login.php"], "buggy_code_start_loc": [215, 145], "buggy_code_end_loc": [215, 149], "fixing_code_start_loc": [216, 145], "fixing_code_end_loc": [219, 149], "type": "CWE-284", "message": "A vulnerability was found in Little Apps Little Software Stats. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the file inc/class.securelogin.php of the component Password Reset Handler. The manipulation leads to improper access controls. Upgrading to version 0.2 is able to address this issue. The name of the patch is 07ba8273a9311d1383f3686ac7cb32f20770ab1e. It is recommended to upgrade the affected component. The identifier VDB-218401 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10057", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-16T19:15:10.143", "lastModified": "2023-01-24T19:57:43.890", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Little Apps Little Software Stats. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the file inc/class.securelogin.php of the component Password Reset Handler. The manipulation leads to improper access controls. Upgrading to version 0.2 is able to address this issue. The name of the patch is 07ba8273a9311d1383f3686ac7cb32f20770ab1e. It is recommended to upgrade the affected component. The identifier VDB-218401 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:H/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "HIGH", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 2.5, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:little-apps:little_software_stats:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.2", "matchCriteriaId": "05C2A9E3-E94B-4E02-9CFB-433A28D4C5EC"}]}]}], "references": [{"url": "https://github.com/little-apps/little-software-stats/commit/07ba8273a9311d1383f3686ac7cb32f20770ab1e", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/little-apps/little-software-stats/releases/tag/v0.2", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218401", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218401", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/little-apps/little-software-stats/commit/07ba8273a9311d1383f3686ac7cb32f20770ab1e"}}