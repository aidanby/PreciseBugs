{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\User\\Http\\Livewire\\Admin;\n\n\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\nuse Livewire\\WithFileUploads;\nuse MicroweberPackages\\Admin\\Http\\Livewire\\AdminComponent;\nuse MicroweberPackages\\User\\Models\\User;\n\nclass CreateProfileInformationForm extends AdminComponent\n{\n    use WithFileUploads;\n\n    /**\n     * The component's state.\n     *\n     * @var array\n     */\n    public $state = [];\n\n    public function createProfileInformation()\n    {\n        $this->resetErrorBag();\n\n        Validator::make($this->state, [\n            'first_name' => ['required', 'string', 'max:255'],\n            'last_name' => ['required', 'string', 'max:255'],\n            'username' => ['nullable', 'string', 'max:255', Rule::unique(User::class)],\n            'email' => ['required', 'email', 'max:255', Rule::unique(User::class)],\n            'phone' => ['nullable', 'string', 'max:255'],\n            'password' => ['required', 'string', 'min:4'],\n           // 'avatar' => ['nullable', 'image', 'max:1024'],\n        ])->validateWithBag('createProfileInformation');\n\n        $user = new User();\n        $user->fill($this->state);\n        $user->save();\n\n        $this->emit('saved');\n\n        return redirect(route('admin.users.edit', $user->id));\n\n    }\n\n    /**\n     * Render the component.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function render()\n    {\n        return view('admin::livewire.users.create-profile-information-form');\n    }\n}\n", "<?php\n\nnamespace MicroweberPackages\\User\\Http\\Livewire\\Admin;\n\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\nuse Laravel\\Fortify\\Contracts\\UpdatesUserProfileInformation;\nuse Livewire\\Component;\nuse Livewire\\WithFileUploads;\nuse MicroweberPackages\\Admin\\Http\\Livewire\\AdminComponent;\nuse MicroweberPackages\\User\\Models\\User;\n\nclass UpdateProfileInformationForm extends AdminComponent\n{\n    use WithFileUploads;\n\n    /**\n     * The component's state.\n     *\n     * @var array\n     */\n    public $state = [];\n\n    /**\n     * The new avatar for the user.\n     *\n     * @var mixed\n     */\n    public $photo;\n\n    /**\n     * @var string\n     */\n    public $photoUrl;\n\n\n    public $userId = false;\n\n    /**\n     * Prepare the component.\n     *\n     * @return void\n     */\n    public function mount($userId = false)\n    {\n        if ($userId) {\n            $this->userId = $userId;\n            $this->state = User::where('id', $userId)->first()->withoutRelations()->toArray();\n        } else {\n            $this->state = Auth::user()->withoutRelations()->toArray();\n        }\n\n        if (!empty($this->state['thumbnail'])) {\n            $this->photoUrl = user_picture($this->state['id'], 165,165);\n        }\n    }\n\n\n    /**\n     * Delete user's profile photo.\n     *\n     * @return void\n     */\n    public function deleteProfilePhoto()\n    {\n        if ($this->userId) {\n            $user = User::where('id', $this->userId)->first();\n        } else {\n            $user = Auth::user();\n        }\n\n        $user->thumbnail = null;\n        $user->save();\n\n        $this->photo = null;\n        $this->photoUrl = null;\n    }\n\n    /**\n     * Update the user's profile information.\n     * @return void\n     */\n    public function updateProfileInformation()\n    {\n        $this->resetErrorBag();\n\n        if ($this->userId) {\n            $user = User::where('id', $this->userId)->first();\n        } else {\n            $user = Auth::user();\n        }\n\n        $input = $this->state;\n\n        if (isset($this->photo) && !empty($this->photo)) {\n            if (method_exists($this->photo, 'guessExtension')) {\n                $photoExt = $this->photo->guessExtension();\n\n\n\n                $photoContent = $this->photo->get();\n                $photoFile = media_base_path() . 'users/' . $user->id . '-avatar.' . $photoExt;\n                if (!is_dir(dirname($photoFile))) {\n                    mkdir_recursive(dirname($photoFile));\n                }\n                file_put_contents($photoFile, $photoContent);\n                $user->thumbnail = media_base_url() . 'users/' . $user->id . '-avatar.' . $photoExt;\n                $user->save();\n            }\n        }\n\n        Validator::make($input, [\n            'first_name' => ['required', 'string', 'max:255'],\n            'last_name' => ['required', 'string', 'max:255'],\n            'phone' => ['nullable', 'string', 'max:255'],\n            'username' => [\n                'required',\n                'string',\n                'max:255',\n                Rule::unique('users')->ignore($user->id),\n            ],\n            'email' => [\n                'required',\n                'string',\n                'email',\n                'max:255',\n                Rule::unique('users')->ignore($user->id),\n            ],\n        ])->validateWithBag('updateProfileInformation');\n\n\n        if ($input['email'] !== $user->email &&\n            $user instanceof MustVerifyEmail) {\n            $this->updateVerifiedUser($user, $input);\n        } else {\n            $user->forceFill([\n                'username' => $input['username'],\n                'phone' => $input['phone'],\n                'first_name' => $input['first_name'],\n                'last_name' => $input['last_name'],\n                'email' => $input['email'],\n            ])->save();\n        }\n\n        if (isset($this->photo)) {\n            return redirect()->route('admin.profile.show');\n        }\n\n        $this->emit('saved');\n    }\n\n    /**\n     * Update the given verified user's profile information.\n     *\n     * @param  mixed  $user\n     * @param  array  $input\n     * @return void\n     */\n    protected function updateVerifiedUser($user, array $input)\n    {\n        $user->forceFill([\n            'first_name' => $input['first_name'],\n            'last_name' => $input['last_name'],\n            'email' => $input['email'],\n            'phone' => isset($input['phone']) ? $input['phone'] : null,\n            'email_verified_at' => null,\n        ])->save();\n\n        $user->sendEmailVerificationNotification();\n    }\n\n    /**\n     * Get the current user of the application.\n     *\n     * @return mixed\n     */\n    public function getUserProperty()\n    {\n        return Auth::user();\n    }\n\n    /**\n     * Render the component.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function render()\n    {\n        return view('admin::livewire.edit-user.update-profile-information-form');\n    }\n}\n", "<div>\n    <x-microweber-ui::form-section submit=\"updateProfileInformation\">\n        <x-slot name=\"title\">\n            {{ _e('Profile Information') }}\n        </x-slot>\n\n        <x-slot name=\"description\">\n            {{ _e('Update your account profile information and email address') }}.\n        </x-slot>\n\n        <x-slot name=\"form\">\n\n            <!-- Profile Photo -->\n            <div class=\"form-label mb-3 text-center\" x-data=\"{}\">\n                <!-- Profile Photo File Input -->\n                <input type=\"file\" hidden\n                       wire:model=\"photo\"\n                       x-ref=\"photo\"\n                />\n\n                <x-microweber-ui::label for=\"photo\"  value=\"{{ _e('Profile image') }}\" />\n\n                <!-- Current Profile Photo -->\n\n                @if($photo && method_exists($photo, 'temporaryUrl'))\n                <div class=\"mt-2\">\n                     <img src=\"{{$photo->temporaryUrl()}}\" class=\"rounded-circle\" height=\"60px\" width=\"60px\" >\n                </div>\n                @elseif($photoUrl)\n                <div class=\"mt-2\">\n                    <img src=\"{{$photoUrl}}?time={{time()}}\" class=\"rounded-circle\"  height=\"60px\" width=\"60px\">\n                </div>\n                @else\n                    <div class=\"mt-2 rounded-circle admin-users-no-user-img-wrapper bg-light d-flex align-items-center justify-content-center mx-auto\" style=\"width:60px;height:60px\">\n                        <img src=\"{{modules_url()}}microweber/api/libs/mw-ui/assets/img/no-user.svg\">\n                    </div>\n                @endif\n\n                <x-microweber-ui::link-button class=\" mt-2 me-2\" type=\"button\" x-on:click.prevent=\"$refs.photo.click()\">\n                    <div wire:loading=\"photo\">\n                        {{ _e('Uploading...') }}\n                    </div>\n                    <div wire:loading.remove wire:target=\"photo\">\n                        {{ _e('Upload photo') }}\n                    </div>\n                </x-microweber-ui::link-button>\n\n                @if ($this->photo || $photoUrl)\n                    <x-microweber-ui::link-button type=\"button\" class=\"mt-2\" wire:click=\"deleteProfilePhoto\">\n                        <div wire:loading wire:target=\"deleteProfilePhoto\" class=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span class=\"visually-hidden\">{{ _e('Loading') }}...</span>\n                        </div>\n\n                        {{ _e('Remove photo') }}\n                    </x-microweber-ui::link-button>\n                @endif\n\n                <x-microweber-ui::input-error for=\"photo\" class=\"mt-2\" />\n            </div>\n\n            <!-- Username -->\n            <div class=\"live-edit-label\">\n                <x-microweber-ui::label for=\"username\" value=\"Username\" />\n                <x-microweber-ui::input id=\"username\" type=\"text\" class=\"mt-1 block w-full\" wire:model.defer=\"state.username\" autocomplete=\"username\" name=\"username\" />\n                <x-microweber-ui::input-error for=\"username\" class=\"mt-2\" />\n            </div>\n\n            <!-- First Name -->\n            <div class=\"live-edit-label\">\n                <x-microweber-ui::label for=\"first_name\" value=\"First Name\" />\n                <x-microweber-ui::input id=\"first_name\" type=\"text\" class=\"mt-1 block w-full\" wire:model.defer=\"state.first_name\" autocomplete=\"first_name\"  name=\"first_name\" />\n                <x-microweber-ui::input-error for=\"first_name\" class=\"mt-2\" />\n            </div>\n\n            <!-- Last Name -->\n            <div class=\"live-edit-label\">\n                <x-microweber-ui::label for=\"last_name\" value=\"Last Name\" />\n                <x-microweber-ui::input id=\"last_name\" type=\"text\" class=\"mt-1 block w-full\" wire:model.defer=\"state.last_name\" autocomplete=\"last_name\"  name=\"last_name\" />\n                <x-microweber-ui::input-error for=\"last_name\" class=\"mt-2\" />\n            </div>\n\n            <!-- Email -->\n            <div class=\"live-edit-label\">\n                <x-microweber-ui::label for=\"email\" value=\"Email\" />\n                <x-microweber-ui::input id=\"email\" type=\"email\" class=\"mt-1 block w-full\" wire:model.defer=\"state.email\"  name=\"email\" />\n                <x-microweber-ui::input-error for=\"email\" class=\"mt-2\" />\n            </div>\n\n            <!-- Phone -->\n            <div class=\"live-edit-label\">\n                <x-microweber-ui::label for=\"phone\" value=\"Phone\" />\n                <x-microweber-ui::input id=\"phone\" type=\"text\" class=\"mt-1 block w-full\" wire:model.defer=\"state.phone\" name=\"phone\" />\n                <x-microweber-ui::input-error for=\"phone\" class=\"mt-2\" />\n            </div>\n\n            @if($userId)\n            <div class=\"form-group mt-4 mb-4\">\n                <div class=\"custom-control custom-checkbox my-2\">\n                    <input type=\"checkbox\" class=\"form-check-input\" id=\"send_new_user_email\" checked=\"\">\n                    <label class=\"custom-control-label\" for=\"send_new_user_email\"><?php _e(\"Send the new user an email about their account\"); ?>. <br/>\n                    </label>\n                    <br />\n                    <a href=\"<?php echo admin_url();?>settings?group=users\" target=\"_blank\"><?php _e(\"Edit e-mail template\"); ?>.</a>\n                </div>\n            </div>\n            <div class=\"live-edit-label\">\n                <button type=\"button\" class=\"btn btn-outline-primary\" wire:click=\"$emit('openModal', 'admin::edit-user.update-password-without-confirm-form-modal', {{ json_encode(['userId' => $state['id']]) }})\">Change Password</button>\n            </div>\n            @endif\n\n        </x-slot>\n\n        <x-slot name=\"actions\">\n            <x-microweber-ui::action-message class=\"mr-3\" on=\"saved\">\n                {{ _e('Saved') }}.\n            </x-microweber-ui::action-message>\n\n            <x-microweber-ui::button id=\"user-save-button\">\n                {{ _e('Save') }}\n            </x-microweber-ui::button>\n        </x-slot>\n    </x-microweber-ui::form-section>\n\n</div>\n", "<x-user::form-section submit=\"updateProfileInformation\">\n    <x-slot name=\"title\">\n        {{ __('Profile Information') }}\n    </x-slot>\n\n    <x-slot name=\"description\">\n        {{ __('Update your account\\'s profile information and email address.') }}\n    </x-slot>\n\n    <x-slot name=\"form\">\n\n        <x-user::action-message on=\"saved\">\n            {{ __('Saved.') }}\n        </x-user::action-message>\n\n        <!-- Profile Photo -->\n        @if (Laravel\\Jetstream\\Jetstream::managesProfilePhotos())\n            <div class=\"mb-3\" x-data=\"{photoName: null, photoPreview: null}\">\n                <!-- Profile Photo File Input -->\n                <input type=\"file\" hidden\n                       wire:model=\"photo\"\n                       x-ref=\"photo\"\n                       x-on:change=\"\n                                    photoName = $refs.photo.files[0].name;\n                                    const reader = new FileReader();\n                                    reader.onload = (e) => {\n                                        photoPreview = e.target.result;\n                                    };\n                                    reader.readAsDataURL($refs.photo.files[0]);\n                            \" />\n\n                <x-user::label for=\"photo\" value=\"{{ __('Photo') }}\" />\n\n                <!-- Current Profile Photo -->\n                <div class=\"mt-2\" x-show=\"! photoPreview\">\n                    <img src=\"{{ $this->user->profile_photo_url }}\" class=\"rounded-circle bg-light\" height=\"40px\" width=\"40px\" style=\"width: 60px; height: 60px;\">\n                </div>\n\n                <!-- New Profile Photo Preview -->\n                <div class=\"mt-2\" x-show=\"photoPreview\">\n                    <img x-bind:src=\"photoPreview\" class=\"rounded-circle bg-light\" height=\"40px\" width=\"40px\" style=\"width: 60px; height: 60px;\">\n                </div>\n\n                <x-user::primary-button class=\"mt-2 me-2\" type=\"button\" x-on:click.prevent=\"$refs.photo.click()\">\n                    {{ __('Select A New Photo') }}\n\t\t\t\t</x-user::primary-button>\n\n\t\t\t\t@if ($this->user->profile_photo_path)\n                    <x-user::secondary-button type=\"button\" class=\"mt-2\" wire:click=\"deleteProfilePhoto\">\n                        <div wire:loading wire:target=\"deleteProfilePhoto\" class=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span class=\"visually-hidden\">Loading...</span>\n                        </div>\n\n                        {{ __('Remove Photo') }}\n                    </x-user::secondary-button>\n                @endif\n\n                <x-user::input-error for=\"photo\" class=\"mt-2\" />\n            </div>\n        @endif\n\n        <div class=\"w-md-75\">\n            <!-- Name -->\n            <div class=\"mb-3\">\n                <x-user::label for=\"name\" value=\"{{ __('Name') }}\" />\n                <x-user::input id=\"name\" type=\"text\" class=\"{{ $errors->has('name') ? 'is-invalid' : '' }}\" wire:model.defer=\"state.name\" autocomplete=\"name\" />\n                <x-user::input-error for=\"name\" />\n            </div>\n\n            <!-- Email -->\n            <div class=\"mb-3\">\n                <x-user::label for=\"email\" value=\"{{ __('Email') }}\" />\n                <x-user::input id=\"email\" type=\"email\" class=\"{{ $errors->has('email') ? 'is-invalid' : '' }}\" wire:model.defer=\"state.email\" />\n                <x-user::input-error for=\"email\" />\n            </div>\n        </div>\n    </x-slot>\n\n    <x-slot name=\"actions\">\n\t\t<div class=\"d-flex align-items-baseline\">\n\t\t\t<x-user::button>\n                <div wire:loading class=\"spinner-border spinner-border-sm\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n\n\t\t\t\t{{ __('Save') }}\n\t\t\t</x-user::button>\n\t\t</div>\n    </x-slot>\n</x-user::form-section>\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\User\\Http\\Livewire\\Admin;\n\n\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\nuse MicroweberPackages\\Admin\\Http\\Livewire\\AdminComponent;\nuse MicroweberPackages\\User\\Models\\User;\n\nclass CreateProfileInformationForm extends AdminComponent\n{\n\n    /**\n     * The component's state.\n     *\n     * @var array\n     */\n    public $state = [];\n\n    public function createProfileInformation()\n    {\n        $this->resetErrorBag();\n\n        Validator::make($this->state, [\n            'first_name' => ['required', 'string', 'max:255'],\n            'last_name' => ['required', 'string', 'max:255'],\n            'username' => ['nullable', 'string', 'max:255', Rule::unique(User::class)],\n            'email' => ['required', 'email', 'max:255', Rule::unique(User::class)],\n            'phone' => ['nullable', 'string', 'max:255'],\n            'password' => ['required', 'string', 'min:4']\n\n        ])->validateWithBag('createProfileInformation');\n\n        $user = new User();\n        $user->fill($this->state);\n        $user->save();\n\n        $this->emit('saved');\n\n        return redirect(route('admin.users.edit', $user->id));\n\n    }\n\n    /**\n     * Render the component.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function render()\n    {\n        return view('admin::livewire.users.create-profile-information-form');\n    }\n}\n", "<?php\n\nnamespace MicroweberPackages\\User\\Http\\Livewire\\Admin;\n\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\nuse Laravel\\Fortify\\Contracts\\UpdatesUserProfileInformation;\nuse Livewire\\Component;\nuse MicroweberPackages\\Admin\\Http\\Livewire\\AdminComponent;\nuse MicroweberPackages\\User\\Models\\User;\n\nclass UpdateProfileInformationForm extends AdminComponent\n{\n\n    /**\n     * The component's state.\n     *\n     * @var array\n     */\n    public $state = [];\n\n    /**\n     * The new avatar for the user.\n     *\n     * @var mixed\n     */\n    public $photo;\n\n    /**\n     * @var string\n     */\n    public $photoUrl;\n\n\n    public $userId = false;\n\n    /**\n     * Prepare the component.\n     *\n     * @return void\n     */\n    public function mount($userId = false)\n    {\n        if ($userId) {\n            $this->userId = $userId;\n            $this->state = User::where('id', $userId)->first()->withoutRelations()->toArray();\n        } else {\n            $this->state = Auth::user()->withoutRelations()->toArray();\n        }\n\n        if (!empty($this->state['thumbnail'])) {\n            $this->photoUrl = user_picture($this->state['id'], 165,165);\n        }\n    }\n\n\n    /**\n     * Delete user's profile photo.\n     *\n     * @return void\n     */\n    public function deleteProfilePhoto()\n    {\n        if ($this->userId) {\n            $user = User::where('id', $this->userId)->first();\n        } else {\n            $user = Auth::user();\n        }\n\n        $user->thumbnail = null;\n        $user->save();\n\n        $this->photo = null;\n        $this->photoUrl = null;\n    }\n\n    /**\n     * Update the user's profile information.\n     * @return void\n     */\n    public function updateProfileInformation()\n    {\n        $this->resetErrorBag();\n\n        if ($this->userId) {\n            $user = User::where('id', $this->userId)->first();\n        } else {\n            $user = Auth::user();\n        }\n\n        $input = $this->state;\n\n        if (isset($this->photo) && !empty($this->photo)) {\n            if (method_exists($this->photo, 'guessExtension')) {\n                $photoExt = $this->photo->guessExtension();\n\n\n\n                $photoContent = $this->photo->get();\n                $photoFile = media_base_path() . 'users/' . $user->id . '-avatar.' . $photoExt;\n                if (!is_dir(dirname($photoFile))) {\n                    mkdir_recursive(dirname($photoFile));\n                }\n                file_put_contents($photoFile, $photoContent);\n                $user->thumbnail = media_base_url() . 'users/' . $user->id . '-avatar.' . $photoExt;\n                $user->save();\n            }\n        }\n\n        Validator::make($input, [\n            'first_name' => ['required', 'string', 'max:255'],\n            'last_name' => ['required', 'string', 'max:255'],\n            'phone' => ['nullable', 'string', 'max:255'],\n            'username' => [\n                'required',\n                'string',\n                'max:255',\n                Rule::unique('users')->ignore($user->id),\n            ],\n            'email' => [\n                'required',\n                'string',\n                'email',\n                'max:255',\n                Rule::unique('users')->ignore($user->id),\n            ],\n        ])->validateWithBag('updateProfileInformation');\n\n\n        if ($input['email'] !== $user->email &&\n            $user instanceof MustVerifyEmail) {\n            $this->updateVerifiedUser($user, $input);\n        } else {\n            $user->forceFill([\n                'username' => $input['username'],\n                'phone' => $input['phone'],\n                'first_name' => $input['first_name'],\n                'last_name' => $input['last_name'],\n                'email' => $input['email'],\n            ])->save();\n        }\n\n        if (isset($this->photo)) {\n            return redirect()->route('admin.profile.show');\n        }\n\n        $this->emit('saved');\n    }\n\n    /**\n     * Update the given verified user's profile information.\n     *\n     * @param  mixed  $user\n     * @param  array  $input\n     * @return void\n     */\n    protected function updateVerifiedUser($user, array $input)\n    {\n        $user->forceFill([\n            'first_name' => $input['first_name'],\n            'last_name' => $input['last_name'],\n            'email' => $input['email'],\n            'phone' => isset($input['phone']) ? $input['phone'] : null,\n            'email_verified_at' => null,\n        ])->save();\n\n        $user->sendEmailVerificationNotification();\n    }\n\n    /**\n     * Get the current user of the application.\n     *\n     * @return mixed\n     */\n    public function getUserProperty()\n    {\n        return Auth::user();\n    }\n\n    /**\n     * Render the component.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function render()\n    {\n        return view('admin::livewire.edit-user.update-profile-information-form');\n    }\n}\n", "<div>\n    <x-microweber-ui::form-section submit=\"updateProfileInformation\">\n        <x-slot name=\"title\">\n            {{ _e('Profile Information') }}\n        </x-slot>\n\n        <x-slot name=\"description\">\n            {{ _e('Update your account profile information and email address') }}.\n        </x-slot>\n\n        <x-slot name=\"form\">\n\n            <!-- Profile Photo -->\n            <div class=\"form-label mb-3 text-center\" x-data=\"{}\">\n                <!-- Profile Photo File Input -->\n\n                <x-microweber-ui::label for=\"photo\"  value=\"{{ _e('Profile image') }}\" />\n\n                <!-- Current Profile Photo -->\n\n                @if($photo && method_exists($photo, 'temporaryUrl'))\n                <div class=\"mt-2\">\n                     <img src=\"{{$photo->temporaryUrl()}}\" class=\"rounded-circle\" height=\"60px\" width=\"60px\" >\n                </div>\n                @elseif($photoUrl)\n                <div class=\"mt-2\">\n                    <img src=\"{{$photoUrl}}?time={{time()}}\" class=\"rounded-circle\"  height=\"60px\" width=\"60px\">\n                </div>\n                @else\n                    <div class=\"mt-2 rounded-circle admin-users-no-user-img-wrapper bg-light d-flex align-items-center justify-content-center mx-auto\" style=\"width:60px;height:60px\">\n                        <img src=\"{{modules_url()}}microweber/api/libs/mw-ui/assets/img/no-user.svg\">\n                    </div>\n                @endif\n\n                <x-microweber-ui::link-button class=\" mt-2 me-2\" type=\"button\" x-on:click.prevent=\"$refs.photo.click()\">\n                    <div wire:loading=\"photo\">\n                        {{ _e('Uploading...') }}\n                    </div>\n                    <div wire:loading.remove wire:target=\"photo\">\n                        {{ _e('Upload photo') }}\n                    </div>\n                </x-microweber-ui::link-button>\n\n                @if ($this->photo || $photoUrl)\n                    <x-microweber-ui::link-button type=\"button\" class=\"mt-2\" wire:click=\"deleteProfilePhoto\">\n                        <div wire:loading wire:target=\"deleteProfilePhoto\" class=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span class=\"visually-hidden\">{{ _e('Loading') }}...</span>\n                        </div>\n\n                        {{ _e('Remove photo') }}\n                    </x-microweber-ui::link-button>\n                @endif\n\n                <x-microweber-ui::input-error for=\"photo\" class=\"mt-2\" />\n            </div>\n\n            <!-- Username -->\n            <div class=\"live-edit-label\">\n                <x-microweber-ui::label for=\"username\" value=\"Username\" />\n                <x-microweber-ui::input id=\"username\" type=\"text\" class=\"mt-1 block w-full\" wire:model.defer=\"state.username\" autocomplete=\"username\" name=\"username\" />\n                <x-microweber-ui::input-error for=\"username\" class=\"mt-2\" />\n            </div>\n\n            <!-- First Name -->\n            <div class=\"live-edit-label\">\n                <x-microweber-ui::label for=\"first_name\" value=\"First Name\" />\n                <x-microweber-ui::input id=\"first_name\" type=\"text\" class=\"mt-1 block w-full\" wire:model.defer=\"state.first_name\" autocomplete=\"first_name\"  name=\"first_name\" />\n                <x-microweber-ui::input-error for=\"first_name\" class=\"mt-2\" />\n            </div>\n\n            <!-- Last Name -->\n            <div class=\"live-edit-label\">\n                <x-microweber-ui::label for=\"last_name\" value=\"Last Name\" />\n                <x-microweber-ui::input id=\"last_name\" type=\"text\" class=\"mt-1 block w-full\" wire:model.defer=\"state.last_name\" autocomplete=\"last_name\"  name=\"last_name\" />\n                <x-microweber-ui::input-error for=\"last_name\" class=\"mt-2\" />\n            </div>\n\n            <!-- Email -->\n            <div class=\"live-edit-label\">\n                <x-microweber-ui::label for=\"email\" value=\"Email\" />\n                <x-microweber-ui::input id=\"email\" type=\"email\" class=\"mt-1 block w-full\" wire:model.defer=\"state.email\"  name=\"email\" />\n                <x-microweber-ui::input-error for=\"email\" class=\"mt-2\" />\n            </div>\n\n            <!-- Phone -->\n            <div class=\"live-edit-label\">\n                <x-microweber-ui::label for=\"phone\" value=\"Phone\" />\n                <x-microweber-ui::input id=\"phone\" type=\"text\" class=\"mt-1 block w-full\" wire:model.defer=\"state.phone\" name=\"phone\" />\n                <x-microweber-ui::input-error for=\"phone\" class=\"mt-2\" />\n            </div>\n\n            @if($userId)\n            <div class=\"form-group mt-4 mb-4\">\n                <div class=\"custom-control custom-checkbox my-2\">\n                    <input type=\"checkbox\" class=\"form-check-input\" id=\"send_new_user_email\" checked=\"\">\n                    <label class=\"custom-control-label\" for=\"send_new_user_email\"><?php _e(\"Send the new user an email about their account\"); ?>. <br/>\n                    </label>\n                    <br />\n                    <a href=\"<?php echo admin_url();?>settings?group=users\" target=\"_blank\"><?php _e(\"Edit e-mail template\"); ?>.</a>\n                </div>\n            </div>\n            <div class=\"live-edit-label\">\n                <button type=\"button\" class=\"btn btn-outline-primary\" wire:click=\"$emit('openModal', 'admin::edit-user.update-password-without-confirm-form-modal', {{ json_encode(['userId' => $state['id']]) }})\">Change Password</button>\n            </div>\n            @endif\n\n        </x-slot>\n\n        <x-slot name=\"actions\">\n            <x-microweber-ui::action-message class=\"mr-3\" on=\"saved\">\n                {{ _e('Saved') }}.\n            </x-microweber-ui::action-message>\n\n            <x-microweber-ui::button id=\"user-save-button\">\n                {{ _e('Save') }}\n            </x-microweber-ui::button>\n        </x-slot>\n    </x-microweber-ui::form-section>\n\n</div>\n", "<x-user::form-section submit=\"updateProfileInformation\">\n    <x-slot name=\"title\">\n        {{ __('Profile Information') }}\n    </x-slot>\n\n    <x-slot name=\"description\">\n        {{ __('Update your account\\'s profile information and email address.') }}\n    </x-slot>\n\n    <x-slot name=\"form\">\n\n        <x-user::action-message on=\"saved\">\n            {{ __('Saved.') }}\n        </x-user::action-message>\n\n        <!-- Profile Photo -->\n        <div class=\"mb-3\" x-data=\"{photoName: null, photoPreview: null}\">\n\n                <x-user::label for=\"photo\" value=\"{{ __('Photo') }}\" />\n\n                <!-- Current Profile Photo -->\n                <div class=\"mt-2\" x-show=\"! photoPreview\">\n                    <img src=\"{{ $this->user->profile_photo_url }}\" class=\"rounded-circle bg-light\" height=\"40px\" width=\"40px\" style=\"width: 60px; height: 60px;\">\n                </div>\n\n                <!-- New Profile Photo Preview -->\n                <div class=\"mt-2\" x-show=\"photoPreview\">\n                    <img x-bind:src=\"photoPreview\" class=\"rounded-circle bg-light\" height=\"40px\" width=\"40px\" style=\"width: 60px; height: 60px;\">\n                </div>\n\n                <x-user::primary-button class=\"mt-2 me-2\" type=\"button\" x-on:click.prevent=\"$refs.photo.click()\">\n                    {{ __('Select A New Photo') }}\n\t\t\t\t</x-user::primary-button>\n\n\t\t\t\t@if ($this->user->profile_photo_path)\n                    <x-user::secondary-button type=\"button\" class=\"mt-2\" wire:click=\"deleteProfilePhoto\">\n                        <div wire:loading wire:target=\"deleteProfilePhoto\" class=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span class=\"visually-hidden\">Loading...</span>\n                        </div>\n\n                        {{ __('Remove Photo') }}\n                    </x-user::secondary-button>\n                @endif\n\n                <x-user::input-error for=\"photo\" class=\"mt-2\" />\n            </div>\n\n        <div class=\"w-md-75\">\n            <!-- Name -->\n            <div class=\"mb-3\">\n                <x-user::label for=\"name\" value=\"{{ __('Name') }}\" />\n                <x-user::input id=\"name\" type=\"text\" class=\"{{ $errors->has('name') ? 'is-invalid' : '' }}\" wire:model.defer=\"state.name\" autocomplete=\"name\" />\n                <x-user::input-error for=\"name\" />\n            </div>\n\n            <!-- Email -->\n            <div class=\"mb-3\">\n                <x-user::label for=\"email\" value=\"{{ __('Email') }}\" />\n                <x-user::input id=\"email\" type=\"email\" class=\"{{ $errors->has('email') ? 'is-invalid' : '' }}\" wire:model.defer=\"state.email\" />\n                <x-user::input-error for=\"email\" />\n            </div>\n        </div>\n    </x-slot>\n\n    <x-slot name=\"actions\">\n\t\t<div class=\"d-flex align-items-baseline\">\n\t\t\t<x-user::button>\n                <div wire:loading class=\"spinner-border spinner-border-sm\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n\n\t\t\t\t{{ __('Save') }}\n\t\t\t</x-user::button>\n\t\t</div>\n    </x-slot>\n</x-user::form-section>\n"], "filenames": ["src/MicroweberPackages/User/Http/Livewire/Admin/CreateProfileInformationForm.php", "src/MicroweberPackages/User/Http/Livewire/Admin/UpdateProfileInformationForm.php", "src/MicroweberPackages/User/resources/views/admin/livewire/edit-user/update-profile-information-form.blade.php", "src/MicroweberPackages/User/resources/views/livewire/profile/update-profile-information-form.blade.php"], "buggy_code_start_loc": [8, 11, 16, 17], "buggy_code_end_loc": [35, 18, 20, 61], "fixing_code_start_loc": [7, 10, 15, 17], "fixing_code_end_loc": [33, 15, 15, 46], "type": "CWE-79", "message": "Microweber CMS version 2.0.1 is vulnerable to stored Cross Site Scripting (XSS) via the profile picture file upload functionality.", "other": {"cve": {"id": "CVE-2023-47379", "sourceIdentifier": "cve@mitre.org", "published": "2023-11-08T17:15:07.937", "lastModified": "2023-11-15T20:12:54.297", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Microweber CMS version 2.0.1 is vulnerable to stored Cross Site Scripting (XSS) via the profile picture file upload functionality."}, {"lang": "es", "value": "Microweber CMS versi\u00f3n 2.0.1 es vulnerable a Cross Site Scripting (XSS) almacenado a trav\u00e9s de la funcionalidad de subida de archivos de imagen de perfil."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:2.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "70DDD302-ABA6-4C33-96CF-414B2C9D3027"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/blob/master/CHANGELOG.md", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "https://github.com/microweber/microweber/commit/c6e7ea9d0abd7564a3bb23c14ad172e4ccf27a7e#diff-fac4e7e9eca69c10d074bf8c5eac7f64b018c6b4d91dcad54b340a8560049e00", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://www.getastra.com/blog/security-audit/stored-xss-vulnerability/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/c6e7ea9d0abd7564a3bb23c14ad172e4ccf27a7e#diff-fac4e7e9eca69c10d074bf8c5eac7f64b018c6b4d91dcad54b340a8560049e00"}}