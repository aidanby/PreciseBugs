{"buggy_code": ["// ==========================================================================\n//  Squidex Headless CMS\n// ==========================================================================\n//  Copyright (c) Squidex UG (haftungsbeschraenkt)\n//  All rights reserved. Licensed under the MIT license.\n// ==========================================================================\n\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\nusing Squidex.Config;\nusing Squidex.Domain.Users;\nusing Squidex.Infrastructure;\nusing Squidex.Infrastructure.Security;\nusing Squidex.Infrastructure.Translations;\nusing Squidex.Shared.Identity;\nusing Squidex.Shared.Users;\nusing Squidex.Web;\n\nnamespace Squidex.Areas.IdentityServer.Controllers.Account;\n\npublic sealed class AccountController : IdentityServerController\n{\n    private readonly IUserService userService;\n    private readonly MyIdentityOptions identityOptions;\n\n    public AccountController(\n        IUserService userService,\n        IOptions<MyIdentityOptions> identityOptions)\n    {\n        this.identityOptions = identityOptions.Value;\n        this.userService = userService;\n    }\n\n    [HttpGet]\n    [Route(\"account/error/\")]\n    public IActionResult LoginError()\n    {\n        throw new InvalidOperationException();\n    }\n\n    [HttpGet]\n    [Route(\"account/forbidden/\")]\n    public IActionResult Forbidden()\n    {\n        throw new DomainForbiddenException(T.Get(\"users.userLocked\"));\n    }\n\n    [HttpGet]\n    [Route(\"account/lockedout/\")]\n    public IActionResult LockedOut()\n    {\n        return View();\n    }\n\n    [HttpGet]\n    [Route(\"account/accessdenied/\")]\n    public IActionResult AccessDenied()\n    {\n        return View();\n    }\n\n    [HttpGet]\n    [Route(\"account/logout-completed/\")]\n    public IActionResult LogoutCompleted()\n    {\n        return View();\n    }\n\n    [HttpGet]\n    [Route(\"account/consent/\")]\n    public IActionResult Consent(string? returnUrl = null)\n    {\n        return View(new ConsentVM { PrivacyUrl = identityOptions.PrivacyUrl, ReturnUrl = returnUrl });\n    }\n\n    [HttpPost]\n    [Route(\"account/consent/\")]\n    public async Task<IActionResult> Consent(ConsentModel model, string? returnUrl = null)\n    {\n        // We ask new users to agree to the cookie and privacy agreements and show and error if they do not agree.\n        if (!model.ConsentToCookies)\n        {\n            ModelState.AddModelError(nameof(model.ConsentToCookies), T.Get(\"users.consent.needed\"));\n        }\n\n        if (!model.ConsentToPersonalInformation)\n        {\n            ModelState.AddModelError(nameof(model.ConsentToPersonalInformation), T.Get(\"users.consent.needed\"));\n        }\n\n        if (!ModelState.IsValid)\n        {\n            var vm = new ConsentVM { PrivacyUrl = identityOptions.PrivacyUrl, ReturnUrl = returnUrl };\n\n            return View(vm);\n        }\n\n        var user = await userService.GetAsync(User, HttpContext.RequestAborted);\n\n        // There is almost no case where this could have happened.\n        if (user == null)\n        {\n            throw new DomainException(T.Get(\"users.userNotFound\"));\n        }\n\n        var update = new UserValues\n        {\n            Consent = true,\n            ConsentForEmails = model.ConsentToAutomatedEmails\n        };\n\n        await userService.UpdateAsync(user.Id, update, ct: HttpContext.RequestAborted);\n\n        return RedirectToReturnUrl(returnUrl);\n    }\n\n    [HttpGet]\n    [Route(\"account/logout/\")]\n    public async Task<IActionResult> Logout(string logoutId)\n    {\n        await SignInManager.SignOutAsync();\n\n        return Redirect(\"~/../\");\n    }\n\n    [HttpGet]\n    [Route(\"account/logout-redirect/\")]\n    public async Task<IActionResult> LogoutRedirect()\n    {\n        await SignInManager.SignOutAsync();\n\n        return RedirectToAction(nameof(LogoutCompleted));\n    }\n\n    [HttpGet]\n    [Route(\"account/signup/\")]\n    public Task<IActionResult> Signup(string? returnUrl = null)\n    {\n        return LoginViewAsync(returnUrl, false, false);\n    }\n\n    [HttpGet]\n    [Route(\"account/login/\")]\n    [ClearCookies]\n    public Task<IActionResult> Login(string? returnUrl = null)\n    {\n        return LoginViewAsync(returnUrl, true, false);\n    }\n\n    [HttpPost]\n    [Route(\"account/login/\")]\n    public async Task<IActionResult> Login(LoginModel model, string? returnUrl = null)\n    {\n        if (!ModelState.IsValid)\n        {\n            return await LoginViewAsync(returnUrl, true, true);\n        }\n\n        var result = await SignInManager.PasswordSignInAsync(model.Email, model.Password, true, true);\n\n        if (!result.Succeeded && result.IsLockedOut)\n        {\n            return View(nameof(LockedOut));\n        }\n        else if (!result.Succeeded)\n        {\n            return await LoginViewAsync(returnUrl, true, true);\n        }\n        else\n        {\n            return RedirectToReturnUrl(returnUrl);\n        }\n    }\n\n    private async Task<IActionResult> LoginViewAsync(string? returnUrl, bool isLogin, bool isFailed)\n    {\n        // If password authentication is enabled we always show the page.\n        var allowPasswordAuth = identityOptions.AllowPasswordAuth;\n\n        var externalProviders = await SignInManager.GetExternalProvidersAsync();\n\n        // If there is only one external authentication provider, we can redirect just directly.\n        if (externalProviders.Count == 1 && !allowPasswordAuth)\n        {\n            var provider = externalProviders[0].AuthenticationScheme;\n\n            var challengeRedirectUrl = Url.Action(nameof(ExternalCallback));\n            var challengeProperties = SignInManager.ConfigureExternalAuthenticationProperties(provider, challengeRedirectUrl);\n\n            // Redirect to the external authentication provider.\n            return Challenge(challengeProperties, provider);\n        }\n\n        var vm = new LoginVM\n        {\n            ExternalProviders = externalProviders,\n            IsFailed = isFailed,\n            IsLogin = isLogin,\n            HasPasswordAuth = allowPasswordAuth,\n            ReturnUrl = returnUrl\n        };\n\n        return View(nameof(Login), vm);\n    }\n\n    [HttpPost]\n    [Route(\"account/external/\")]\n    public IActionResult External(string provider, string? returnUrl = null)\n    {\n        var challengeRedirectUrl = Url.Action(nameof(ExternalCallback), new { returnUrl });\n        var challengeProperties = SignInManager.ConfigureExternalAuthenticationProperties(provider, challengeRedirectUrl);\n\n        return Challenge(challengeProperties, provider);\n    }\n\n    [HttpGet]\n    [Route(\"account/external-callback/\")]\n    public async Task<IActionResult> ExternalCallback(string? returnUrl = null)\n    {\n        var login = await SignInManager.GetExternalLoginInfoWithDisplayNameAsync();\n\n        if (login == null)\n        {\n            return RedirectToAction(nameof(Login));\n        }\n\n        var result = await SignInManager.ExternalLoginSignInAsync(login.LoginProvider, login.ProviderKey, true);\n\n        if (!result.Succeeded && result.IsLockedOut)\n        {\n            return View(nameof(LockedOut));\n        }\n\n        var isLoggedIn = result.Succeeded;\n        var isLocked = false;\n\n        IUser? user = null;\n\n        if (isLoggedIn)\n        {\n            user = await userService.FindByLoginAsync(login.LoginProvider, login.ProviderKey, HttpContext.RequestAborted);\n        }\n        else\n        {\n            var email = login.Principal.GetEmail();\n\n            if (string.IsNullOrWhiteSpace(email))\n            {\n                throw new DomainException(T.Get(\"users.noEmailAddress\"));\n            }\n\n            user = await userService.FindByEmailAsync(email!, HttpContext.RequestAborted);\n\n            // User might not have a login or password if the user got invited.\n            if (user != null && await HasLoginAsync(user))\n            {\n                // If we have a login, we reject this user, otherwise you can login to an account you do not own.\n                user = null;\n            }\n\n            if (user == null)\n            {\n                var values = new UserValues\n                {\n                    CustomClaims = login.Principal.Claims.GetSquidexClaims().ToList()\n                };\n\n                var locked = identityOptions.LockAutomatically;\n\n                // Try to create a user. If the user exists an exception message is shown to the user.\n                user = await userService.CreateAsync(email!, values, locked, HttpContext.RequestAborted);\n            }\n\n            if (user != null)\n            {\n                await userService.AddLoginAsync(user.Id, login, HttpContext.RequestAborted);\n\n                // Login might fail if the user is locked out.\n                (isLoggedIn, isLocked) = await LoginAsync(login);\n            }\n        }\n\n        if (isLocked)\n        {\n            return View(nameof(LockedOut));\n        }\n        else if (!isLoggedIn)\n        {\n            return RedirectToAction(nameof(Login));\n        }\n        else if (user != null && !user.Claims.HasConsent() && !identityOptions.NoConsent)\n        {\n            // This should actually never happen, because user should not be null, when logged in.\n            return RedirectToAction(nameof(Consent), new { returnUrl });\n        }\n        else\n        {\n            return RedirectToReturnUrl(returnUrl);\n        }\n    }\n\n    private async Task<bool> HasLoginAsync(IUser user)\n    {\n        if (await userService.HasPasswordAsync(user, HttpContext.RequestAborted))\n        {\n            return true;\n        }\n\n        var logins = await userService.GetLoginsAsync(user, HttpContext.RequestAborted);\n\n        return logins.Count > 0;\n    }\n\n    private async Task<(bool Success, bool Locked)> LoginAsync(UserLoginInfo externalLogin)\n    {\n        var result = await SignInManager.ExternalLoginSignInAsync(externalLogin.LoginProvider, externalLogin.ProviderKey, true);\n\n        return (result.Succeeded, result.IsLockedOut);\n    }\n}\n", "// ==========================================================================\n//  Squidex Headless CMS\n// ==========================================================================\n//  Copyright (c) Squidex UG (haftungsbeschraenkt)\n//  All rights reserved. Licensed under the MIT license.\n// ==========================================================================\n\nusing Microsoft.AspNetCore.Authentication;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\nusing Squidex.Assets;\nusing Squidex.Config;\nusing Squidex.Domain.Users;\nusing Squidex.Infrastructure;\nusing Squidex.Infrastructure.Reflection;\nusing Squidex.Infrastructure.Tasks;\nusing Squidex.Infrastructure.Translations;\nusing Squidex.Infrastructure.Validation;\nusing Squidex.Shared.Identity;\nusing Squidex.Shared.Users;\nusing Squidex.Web;\n\nnamespace Squidex.Areas.IdentityServer.Controllers.Profile;\n\n[Authorize]\npublic sealed class ProfileController : IdentityServerController\n{\n    private readonly IUserPictureStore userPictureStore;\n    private readonly IUserService userService;\n    private readonly IAssetThumbnailGenerator assetThumbnailGenerator;\n    private readonly MyIdentityOptions identityOptions;\n\n    public ProfileController(\n        IOptions<MyIdentityOptions> identityOptions,\n        IUserPictureStore userPictureStore,\n        IUserService userService,\n        IAssetThumbnailGenerator assetThumbnailGenerator)\n    {\n        this.identityOptions = identityOptions.Value;\n        this.userPictureStore = userPictureStore;\n        this.userService = userService;\n        this.assetThumbnailGenerator = assetThumbnailGenerator;\n    }\n\n    [HttpGet]\n    [Route(\"account/profile/\")]\n    public async Task<IActionResult> Profile(string? successMessage = null)\n    {\n        var user = await userService.GetAsync(User, HttpContext.RequestAborted);\n\n        return View(await GetVM<None>(user, successMessage: successMessage));\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/login-add/\")]\n    public async Task<IActionResult> AddLogin(string provider)\n    {\n        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);\n\n        var userId = userService.GetUserId(User, HttpContext.RequestAborted);\n\n        var challengeRedirectUrl = Url.Action(nameof(AddLoginCallback));\n        var challengeProperties = SignInManager.ConfigureExternalAuthenticationProperties(provider, challengeRedirectUrl, userId);\n\n        return Challenge(challengeProperties, provider);\n    }\n\n    [HttpGet]\n    [Route(\"account/profile/login-add-callback/\")]\n    public Task<IActionResult> AddLoginCallback()\n    {\n        return MakeChangeAsync((id, ct) => AddLoginAsync(id, ct),\n            T.Get(\"users.profile.addLoginDone\"), None.Value);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/update/\")]\n    public Task<IActionResult> UpdateProfile(ChangeProfileModel model)\n    {\n        return MakeChangeAsync((id, ct) => userService.UpdateAsync(id, model.ToValues(), ct: ct),\n            T.Get(\"users.profile.updateProfileDone\"), model);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/properties/\")]\n    public Task<IActionResult> UpdateProperties(ChangePropertiesModel model)\n    {\n        return MakeChangeAsync((id, ct) => userService.UpdateAsync(id, model.ToValues(), ct: ct),\n            T.Get(\"users.profile.updatePropertiesDone\"), model);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/login-remove/\")]\n    public Task<IActionResult> RemoveLogin(RemoveLoginModel model)\n    {\n        return MakeChangeAsync((id, ct) => userService.RemoveLoginAsync(id, model.LoginProvider, model.ProviderKey, ct),\n            T.Get(\"users.profile.removeLoginDone\"), model);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/password-set/\")]\n    public Task<IActionResult> SetPassword(SetPasswordModel model)\n    {\n        return MakeChangeAsync((id, ct) => userService.SetPasswordAsync(id, model.Password, ct: ct),\n            T.Get(\"users.profile.setPasswordDone\"), model);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/password-change/\")]\n    public Task<IActionResult> ChangePassword(ChangePasswordModel model)\n    {\n        return MakeChangeAsync((id, ct) => userService.SetPasswordAsync(id, model.Password, model.OldPassword, ct),\n            T.Get(\"users.profile.changePasswordDone\"), model);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/generate-client-secret/\")]\n    public Task<IActionResult> GenerateClientSecret()\n    {\n        return MakeChangeAsync((id, ct) => GenerateClientSecretAsync(id, ct),\n            T.Get(\"users.profile.generateClientDone\"), None.Value);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/upload-picture/\")]\n    public Task<IActionResult> UploadPicture(List<IFormFile> file)\n    {\n        return MakeChangeAsync((id, ct) => UpdatePictureAsync(file, id, ct),\n            T.Get(\"users.profile.uploadPictureDone\"), None.Value);\n    }\n\n    private async Task GenerateClientSecretAsync(string id,\n        CancellationToken ct)\n    {\n        var update = new UserValues { ClientSecret = RandomHash.New() };\n\n        await userService.UpdateAsync(id, update, ct: ct);\n    }\n\n    private async Task AddLoginAsync(string id,\n        CancellationToken ct)\n    {\n        var login = await SignInManager.GetExternalLoginInfoWithDisplayNameAsync(id);\n\n        await userService.AddLoginAsync(id, login, ct);\n    }\n\n    private async Task UpdatePictureAsync(List<IFormFile> files, string id,\n        CancellationToken ct)\n    {\n        if (files.Count != 1)\n        {\n            throw new ValidationException(T.Get(\"validation.onlyOneFile\"));\n        }\n\n        await UploadResizedAsync(files[0], id, ct);\n\n        var update = new UserValues\n        {\n            PictureUrl = SquidexClaimTypes.PictureUrlStore\n        };\n\n        await userService.UpdateAsync(id, update, ct: ct);\n    }\n\n    private async Task UploadResizedAsync(IFormFile file, string id,\n        CancellationToken ct)\n    {\n        await using var assetResized = TempAssetFile.Create(file.ToAssetFile());\n\n        var resizeOptions = new ResizeOptions\n        {\n            TargetWidth = 128,\n            TargetHeight = 128\n        };\n\n        try\n        {\n            await using (var originalStream = file.OpenReadStream())\n            {\n                await using (var resizeStream = assetResized.OpenWrite())\n                {\n                    await assetThumbnailGenerator.CreateThumbnailAsync(originalStream, file.ContentType, resizeStream, resizeOptions, ct);\n                }\n            }\n        }\n        catch\n        {\n            throw new ValidationException(T.Get(\"validation.notAnImage\"));\n        }\n\n        await using (var resizeStream = assetResized.OpenWrite())\n        {\n            await userPictureStore.UploadAsync(id, resizeStream, ct);\n        }\n    }\n\n    private async Task<IActionResult> MakeChangeAsync<TModel>(Func<string, CancellationToken, Task> action, string successMessage, TModel? model = null) where TModel : class\n    {\n        var user = await userService.GetAsync(User, HttpContext.RequestAborted);\n\n        if (user == null)\n        {\n            return NotFound();\n        }\n\n        if (!ModelState.IsValid)\n        {\n            return View(nameof(Profile), await GetVM(user, model));\n        }\n\n        string errorMessage;\n        try\n        {\n            await action(user.Id, HttpContext.RequestAborted);\n\n            await SignInManager.SignInAsync((IdentityUser)user.Identity, true);\n\n            return RedirectToAction(nameof(Profile), new { successMessage });\n        }\n        catch (ValidationException ex)\n        {\n            errorMessage = ex.Message;\n        }\n        catch (Exception)\n        {\n            errorMessage = T.Get(\"users.errorHappened\");\n        }\n\n        return View(nameof(Profile), await GetVM(user, model, errorMessage));\n    }\n\n    private async Task<ProfileVM> GetVM<TModel>(IUser? user, TModel? model = null, string? errorMessage = null, string? successMessage = null) where TModel : class\n    {\n        if (user == null)\n        {\n            throw new DomainException(T.Get(\"users.userNotFound\"));\n        }\n\n        var (providers, hasPassword, logins) = await AsyncHelper.WhenAll(\n            SignInManager.GetExternalProvidersAsync(),\n            userService.HasPasswordAsync(user, HttpContext.RequestAborted),\n            userService.GetLoginsAsync(user, HttpContext.RequestAborted));\n\n        var vm = new ProfileVM\n        {\n            Id = user.Id,\n            ClientSecret = user.Claims.ClientSecret()!,\n            Email = user.Email,\n            ErrorMessage = errorMessage,\n            ExternalLogins = logins,\n            ExternalProviders = providers,\n            DisplayName = user.Claims.DisplayName()!,\n            HasPassword = hasPassword,\n            HasPasswordAuth = identityOptions.AllowPasswordAuth,\n            IsHidden = user.Claims.IsHidden(),\n            SuccessMessage = successMessage\n        };\n\n        if (model != null)\n        {\n            SimpleMapper.Map(model, vm);\n        }\n\n        vm.Properties ??= user.Claims.GetCustomProperties().Select(UserProperty.FromTuple).ToList();\n\n        return vm;\n    }\n}\n", "// ==========================================================================\n//  Squidex Headless CMS\n// ==========================================================================\n//  Copyright (c) Squidex UG (haftungsbeschraenkt)\n//  All rights reserved. Licensed under the MIT license.\n// ==========================================================================\n\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\nusing Squidex.Areas.Api.Controllers.UI;\nusing Squidex.Assets;\nusing Squidex.Config;\nusing Squidex.Domain.Users;\nusing Squidex.Hosting;\nusing Squidex.Infrastructure;\nusing Squidex.Infrastructure.Reflection;\nusing Squidex.Infrastructure.Translations;\nusing Squidex.Infrastructure.Validation;\nusing Squidex.Web;\n\nnamespace Squidex.Areas.IdentityServer.Controllers.Setup;\n\npublic class SetupController : IdentityServerController\n{\n    private readonly IAssetStore assetStore;\n    private readonly IUrlGenerator urlGenerator;\n    private readonly IUserService userService;\n    private readonly MyUIOptions uiOptions;\n    private readonly MyIdentityOptions identityOptions;\n\n    public SetupController(\n        IAssetStore assetStore,\n        IOptions<MyUIOptions> uiOptions,\n        IOptions<MyIdentityOptions> identityOptions,\n        IUrlGenerator urlGenerator,\n        IUserService userService)\n    {\n        this.assetStore = assetStore;\n        this.identityOptions = identityOptions.Value;\n        this.uiOptions = uiOptions.Value;\n        this.urlGenerator = urlGenerator;\n        this.userService = userService;\n    }\n\n    [HttpGet]\n    [Route(\"setup/\")]\n    public async Task<IActionResult> Setup()\n    {\n        if (!await userService.IsEmptyAsync(HttpContext.RequestAborted))\n        {\n            return RedirectToReturnUrl(null);\n        }\n\n        return View(nameof(Setup), await GetVM(None.Value));\n    }\n\n    [HttpPost]\n    [Route(\"setup/\")]\n    public async Task<IActionResult> Setup(CreateUserModel model)\n    {\n        if (!await userService.IsEmptyAsync(HttpContext.RequestAborted))\n        {\n            return RedirectToReturnUrl(null);\n        }\n\n        if (!ModelState.IsValid)\n        {\n            return View(nameof(Profile), await GetVM(model));\n        }\n\n        string errorMessage;\n        try\n        {\n            var user = await userService.CreateAsync(model.Email, new UserValues\n            {\n                Password = model.Password\n            }, ct: HttpContext.RequestAborted);\n\n            await SignInManager.SignInAsync((IdentityUser)user.Identity, true);\n\n            return RedirectToReturnUrl(null);\n        }\n        catch (ValidationException ex)\n        {\n            errorMessage = ex.Message;\n        }\n        catch (Exception)\n        {\n            errorMessage = T.Get(\"users.errorHappened\");\n        }\n\n        return View(nameof(Setup), await GetVM(model, errorMessage));\n    }\n\n    private async Task<SetupVM> GetVM<TModel>(TModel? model = null, string? errorMessage = null) where TModel : class\n    {\n        var externalProviders = await SignInManager.GetExternalProvidersAsync();\n\n        var result = new SetupVM\n        {\n            BaseUrlConfigured = urlGenerator.BuildUrl(string.Empty, false),\n            BaseUrlCurrent = GetCurrentUrl(),\n            ErrorMessage = errorMessage,\n            EverybodyCanCreateApps = !uiOptions.OnlyAdminsCanCreateApps,\n            EverybodyCanCreateTeams = !uiOptions.OnlyAdminsCanCreateTeams,\n            IsValidHttps = HttpContext.Request.IsHttps,\n            IsAssetStoreFile = assetStore is FolderAssetStore,\n            IsAssetStoreFtp = assetStore is FTPAssetStore,\n            HasExternalLogin = externalProviders.Any(),\n            HasPasswordAuth = identityOptions.AllowPasswordAuth\n        };\n\n        if (model != null)\n        {\n            SimpleMapper.Map(model, result);\n        }\n\n        return result;\n    }\n\n    private string GetCurrentUrl()\n    {\n        var request = HttpContext.Request;\n\n        var url = $\"{request.Scheme}://{request.Host}{request.PathBase}\";\n\n        if (url.EndsWith(Constants.PrefixIdentityServer, StringComparison.Ordinal))\n        {\n            url = url[..^Constants.PrefixIdentityServer.Length];\n        }\n\n        return url.TrimEnd('/');\n    }\n}\n", "@model Squidex.Areas.IdentityServer.Controllers.Account.ConsentVM\n\n@{\n    ViewBag.Title = T.Get(\"users.consent.title\");\n}\n\n@functions {\n    public string ErrorClass(string error)\n    {\n        return ViewData.ModelState[error]?.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? \"border-danger\" : \"\";\n    }\n}\n\n<form asp-controller=\"Account\" asp-action=\"Consent\" asp-route-returnurl=\"@Model!.ReturnUrl\" method=\"post\">\n    <h2>@T.Get(\"users.consent.headline\")</h2>\n        \n    <label for=\"consentToAutomatedEmails\">\n        <div class=\"card card-consent @ErrorClass(\"ConsentToAutomatedEmails\")\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">@T.Get(\"users.consent.emailHeadline\")</h4>\n\n                <div class=\"card-text row\">\n                    <div class=\"col col-auto\">\n                        <input type=\"checkbox\" id=\"consentToAutomatedEmails\" name=\"consentToAutomatedEmails\" value=\"True\" />\n                    </div>\n                    <div class=\"col\">\n                        @Html.Raw(T.Get(\"users.consent.emailText\"))\n                    </div>\n                </div>\n            </div>\n        </div>\n    </label>\n\n    <label for=\"consentToCookies\">\n        <div class=\"card card-consent @ErrorClass(\"ConsentToCookies\")\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">@T.Get(\"users.consent.cookiesHeadline\")</h4>\n\n                <div class=\"card-text row\">\n                    <div class=\"col col-auto\">\n                        <input type=\"checkbox\" id=\"consentToCookies\" name=\"consentToCookies\" value=\"True\" />\n                    </div>\n                    <div class=\"col\">\n                        @Html.Raw(T.Get(\"users.consent.cookiesText\", new { privacyUrl = Model!.PrivacyUrl }))\n                    </div>\n                </div>\n            </div>\n        </div>\n    </label>\n\n    <label for=\"consentToPersonalInformation\">\n        <div class=\"card card-consent @ErrorClass(\"ConsentToPersonalInformation\")\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">@T.Get(\"users.consent.piiHeadline\")</h4>\n\n                <div class=\"card-text row\">\n                    <div class=\"col col-auto\">\n                        <input type=\"checkbox\" id=\"consentToPersonalInformation\" name=\"consentToPersonalInformation\" value=\"True\" />\n                    </div>\n                    <div class=\"col\">\n                        @Html.Raw(T.Get(\"users.consent.piiText\"))\n                    </div>\n                </div>\n            </div>\n        </div>\n    </label>\n\n    <div class=\"profile-section-sm text-right\">\n        <button type=\"submit\" class=\"btn btn-success\">@T.Get(\"users.consent.agree\")</button>\n    </div>\n</form>", "@model Squidex.Areas.IdentityServer.Controllers.Account.LoginVM\n\n@{\n    var action = Model!.IsLogin ? T.Get(\"common.login\") : T.Get(\"common.signup\");\n\n    ViewBag.Title = action;\n}\n\n<div class=\"login-container\">\n    <div class=\"container\">\n        <div class=\"row text-center\">\n            <div class=\"btn-group profile-headline\">\n                @if (Model!.IsLogin)\n                {\n                    <a class=\"btn btn-toggle btn-primary\" asp-controller=\"Account\" asp-action=\"Login\" asp-route-returnurl=\"@Model!.ReturnUrl\">@T.Get(\"common.login\")</a>\n                }\n                else\n                {\n                    <a class=\"btn btn-toggle\" asp-controller=\"Account\" asp-action=\"Login\" asp-route-returnurl=\"@Model!.ReturnUrl\">@T.Get(\"common.login\")</a>\n                }\n                        @if (!Model!.IsLogin)\n                {\n                    <a class=\"btn btn-toggle btn-primary\" asp-controller=\"Account\" asp-action=\"Signup\" asp-route-returnurl=\"@Model!.ReturnUrl\">@T.Get(\"common.signup\")</a>\n                }\n                else\n                {\n                    <a class=\"btn btn-toggle\" asp-controller=\"Account\" asp-action=\"Signup\" asp-route-returnurl=\"@Model!.ReturnUrl\">@T.Get(\"common.signup\")</a>\n                }\n            </div>\n        </div>\n    </div>\n\n    <form asp-controller=\"Account\" asp-action=\"External\" asp-route-returnurl=\"@Model!.ReturnUrl\" method=\"post\">\n        @foreach (var provider in Model!.ExternalProviders)\n        {\n            var schema = provider.AuthenticationScheme.ToLowerInvariant();\n\n            <div class=\"form-group\">\n                <button class=\"btn external-button btn-block btn btn-@schema\" type=\"submit\" name=\"provider\" value=\"@provider.AuthenticationScheme\">\n                    <i class=\"icon-@schema external-icon\"></i> @Html.Raw(T.Get(\"users.login.loginWith\", new { action, provider = provider.DisplayName }))\n                </button>\n            </div>\n        }\n    </form>\n\n    @if (Model!.HasExternalLogin && Model!.HasPasswordAuth)\n    {\n        <div class=\"profile-separator\">\n            <div class=\"profile-separator-text\">@T.Get(\"users.login.separator\")</div>\n        </div>\n    }\n\n    @if (Model!.HasPasswordAuth)\n    {\n        if (Model!.IsLogin)\n        {\n            if (Model!.IsFailed)\n            {\n                <div class=\"form-alert form-alert-error\">@T.Get(\"users.login.error\")</div>\n            }\n\n            <form asp-controller=\"Account\" asp-action=\"Login\" asp-route-returnurl=\"@Model!.ReturnUrl\" method=\"post\">\n                <div class=\"form-group\">\n                    <input type=\"email\" class=\"form-control\" name=\"email\" id=\"email\" placeholder=\"@T.Get(\"users.login.emailPlaceholder\")\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" placeholder=\"@T.Get(\"users.login.passwordPlaceholder\")\" />\n                </div>\n\n                <button type=\"submit\" class=\"btn btn-block btn-primary\">@action</button>\n            </form>\n        }\n        else\n        {\n            <div class=\"profile-password-signup text-center\">@T.Get(\"users.login.askAdmin\")</div>\n        }\n    }\n\n    @if (Model!.IsLogin)\n    {\n        <p class=\"profile-footer\">\n            @T.Get(\"users.login.noAccountSignupQuestion\")\n\n            <a asp-controller=\"Account\" asp-action=\"Signup\" asp-route-returnurl=\"@Model!.ReturnUrl\">\n                @T.Get(\"users.login.noAccountSignupAction\")\n            </a>\n        </p>\n    }\n    else\n    {\n        <p class=\"profile-footer\">\n            @T.Get(\"users.login.noAccountLoginQuestion\")\n\n            <a asp-controller=\"Account\" asp-action=\"Login\" asp-route-returnurl=\"@Model!.ReturnUrl\">\n                @T.Get(\"users.login.noAccountLoginAction\")\n            </a>\n        </p>\n    }\n</div>", "@model Squidex.Areas.IdentityServer.Controllers.Profile.ProfileVM\n\n@{\n    ViewBag.Title = T.Get(\"users.profile.title\");\n\n    void RenderValidation(string field)\n    {\n        @if (ViewContext.ViewData.ModelState[field]?.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid)\n        {\n            <div class=\"errors-container\">\n                <span class=\"errors\">@Html.ValidationMessage(field)</span>\n            </div>\n        }\n    }\n}\n\n<h1>@T.Get(\"users.profile.headline\")</h1>\n\n<h2>@T.Get(\"users.profile.pii\")</h2>\n\n@if (!string.IsNullOrWhiteSpace(Model!.SuccessMessage))\n{\n    <div class=\"form-alert form-alert-success\" id=\"success\">\n        @Model!.SuccessMessage\n    </div>\n}\n\n@if (!string.IsNullOrWhiteSpace(Model!.ErrorMessage))\n{\n    <div class=\"form-alert form-alert-error\">\n        @Model!.ErrorMessage\n    </div>\n}\n\n<div class=\"row profile-section-sm\">\n    <div class=\"col profile-picture-col\">\n        <img class=\"profile-picture\" src=\"api/users/{Model!.Id}/picture/?q={@Guid.NewGuid()}\" />\n    </div>\n    <div class=\"col\">\n        <form id=\"pictureForm\" class=\"profile-picture-form\" asp-controller=\"Profile\" asp-action=\"UploadPicture\" method=\"post\" enctype=\"multipart/form-data\">\n            <span class=\"btn btn-secondary\" id=\"pictureButton\">\n                <span>@T.Get(\"users.profile.uploadPicture\")</span>\n\n                <input class=\"profile-picture-input\" name=\"file\" type=\"file\" id=\"pictureInput\" />\n            </span>\n        </form>\n    </div>\n</div>\n\n<form class=\"profile-form profile-section\" asp-controller=\"Profile\" asp-action=\"UpdateProfile\" method=\"post\">\n    <div class=\"form-group\">\n        <label for=\"email\">@T.Get(\"common.email\")</label>\n\n        @{ RenderValidation(\"Email\"); }\n\n        <input type=\"email\" class=\"form-control\" asp-for=\"Email\" />\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"displayName\">@T.Get(\"common.displayName\")</label>\n\n        @{ RenderValidation(\"DisplayName\"); }\n\n        <input type=\"text\" class=\"form-control\" asp-for=\"DisplayName\" />\n    </div>\n\n    <div class=\"form-group\">\n        <div class=\"form-check\">\n            <input type=\"checkbox\" class=\"form-check-input\" asp-for=\"IsHidden\" />\n\n            <label class=\"form-check-label\" asp-for=\"IsHidden\">@T.Get(\"users.profile.hideProfile\")</label>\n        </div>\n    </div>\n\n    <button type=\"submit\" class=\"btn btn-primary\">@T.Get(\"common.save\")</button>\n</form>\n\n@if (Model!.ExternalProviders.Any())\n{\n    <hr />\n\n    <div class=\"profile-section\">\n        <h2>@T.Get(\"users.profile.loginsTitle\")</h2>\n\n        <table class=\"table table-fixed table-lesspadding\">\n            <colgroup>\n                <col style=\"width: 100px;\" />\n                <col style=\"width: 100%;\" />\n                <col style=\"width: 100px;\" />\n            </colgroup>\n            @foreach (var login in Model!.ExternalLogins)\n            {\n                <tr>\n                    <td>\n                        <span>@login.LoginProvider</span>\n                    </td>\n                    <td>\n                        <span class=\"truncate\">@login.ProviderDisplayName</span>\n                    </td>\n                    <td class=\"text-right\">\n                        @if (Model!.ExternalLogins.Count > 1 || Model!.HasPassword)\n                        {\n                            <form asp-controller=\"Profile\" asp-action=\"RemoveLogin\" method=\"post\">\n                                <input type=\"hidden\" value=\"@login.LoginProvider\" name=\"LoginProvider\" />\n                                <input type=\"hidden\" value=\"@login.ProviderKey\" name=\"ProviderKey\" />\n\n                                <button type=\"submit\" class=\"btn btn-text-danger btn-sm\">\n                                    @T.Get(\"common.remove\")\n                                </button>\n                            </form>\n                        }\n                    </td>\n                </tr>\n            }\n        </table>\n\n        <form asp-controller=\"Profile\" asp-action=\"AddLogin\" method=\"post\">\n            @foreach (var provider in Model!.ExternalProviders.Where(x => Model!.ExternalLogins.All(y => x.AuthenticationScheme != y.LoginProvider)))\n            {\n                var schema = provider.AuthenticationScheme.ToLowerInvariant();\n\n                <button class=\"btn external-button-small btn-@schema\" type=\"submit\" name=\"provider\" value=\"@provider.AuthenticationScheme\">\n                    <i class=\"icon-@schema external-icon\"></i>\n                </button>\n            }\n        </form>\n    </div>\n}\n\n@if (Model!.HasPasswordAuth)\n{\n    <hr />\n\n    <div class=\"profile-section\">\n        <h2>@T.Get(\"users.profile.passwordTitle\")</h2>\n\n       @if (Model!.HasPassword)\n        {\n            <form class=\"profile-form\" asp-controller=\"Profile\" asp-action=\"ChangePassword\" method=\"post\">\n                <div class=\"form-group\">\n                    <label for=\"oldPassword\">@T.Get(\"common.oldPassword\")</label>\n\n                    @{ RenderValidation(\"OldPassword\"); }\n\n                    <input type=\"password\" class=\"form-control\" name=\"oldPassword\" id=\"oldPassword\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"password\">@T.Get(\"common.password\")</label>\n\n                    @{ RenderValidation(\"Password\"); }\n\n                    <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"passwordConfirm\">@T.Get(\"users.profile.confirmPassword\")</label>\n\n                    @{ RenderValidation(\"PasswordConfirm\"); }\n\n                    <input type=\"password\" class=\"form-control\" name=\"passwordConfirm\" id=\"passwordConfirm\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <button type=\"submit\" class=\"btn btn-primary\">@T.Get(\"users.profile.changePassword\")</button>\n                </div>\n            </form>\n        }\n        else\n        {\n            <form class=\"profile-form\" asp-controller=\"Profile\" asp-action=\"SetPassword\" method=\"post\">\n                <div class=\"form-group\">\n                    <label for=\"password\">@T.Get(\"common.password\")</label>\n\n                    @{ RenderValidation(\"Password\"); }\n\n                    <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"passwordConfirm\">@T.Get(\"users.profile.confirmPassword\")</label>\n\n                    @{ RenderValidation(\"PasswordConfirm\"); }\n\n                    <input type=\"password\" class=\"form-control\" name=\"passwordConfirm\" id=\"passwordConfirm\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <button type=\"submit\" class=\"btn btn-primary\">@T.Get(\"users.profile.setPassword\")</button>\n                </div>\n            </form>\n        }\n    </div>\n}\n\n<hr />\n\n<div class=\"profile-section\">\n    <h2>@T.Get(\"users.profile.clientTitle\")</h2>\n\n    <small class=\"form-text text-muted mt-2 mb-2\">@T.Get(\"users.profile.clientHint\")</small>\n\n    <div class=\"row g-2 form-group\">\n        <div class=\"col-8\">\n            <label for=\"clientId\">@T.Get(\"common.clientId\")</label>\n\n            <input class=\"form-control\" name=\"clientId\" id=\"clientId\" readonly value=\"@Model!.Id\" />\n        </div>\n    </div>\n    <div class=\"row g-2 form-group\">\n        <div class=\"col-8\">\n            <label for=\"clientSecret\">@T.Get(\"common.clientSecret\")</label>\n\n            <input class=\"form-control\" name=\"clientSecret\" id=\"clientSecret\" readonly value=\"@Model!.ClientSecret\" />\n        </div>\n        <div class=\"col-4 pl-2\">\n            <label for=\"generate\">&nbsp;</label>\n\n            <form class=\"profile-form\" asp-controller=\"Profile\" asp-action=\"GenerateClientSecret\" method=\"post\">\n                <button type=\"submit\" class=\"btn btn-success btn-block\" id=\"generate\">@T.Get(\"users.profile.generateClient\")</button>\n            </form>\n        </div>\n    </div>\n</div>\n\n<hr />\n\n<div class=\"profile-section\">\n    <h2>@T.Get(\"users.profile.propertiesTitle\")</h2>\n\n    <small class=\"form-text text-muted mt-2 mb-2\">@T.Get(\"users.profile.propertiesHint\")</small>\n\n    <form class=\"profile-form\" asp-controller=\"Profile\" asp-action=\"UpdateProperties\" method=\"post\">\n        <div class=\"mb-2\" id=\"properties\">\n            @for (var i = 0; i < Model!.Properties.Count; i++)\n            {\n                <div class=\"row g-2 form-group\">\n                    <div class=\"col-5 pr-2\">\n\n                        @{ RenderValidation($\"Properties[{i}].Name\"); }\n\n                        <input type=\"text\" class=\"form-control\" asp-for=\"Properties[i].Name\" />\n                    </div>\n                    <div class=\"col pr-2\">\n\n                        @{ RenderValidation($\"Properties[{i}].Value\"); }\n\n                        <input type=\"text\" class=\"form-control\" asp-for=\"Properties[i].Value\" />\n                    </div>\n                    <div class=\"col-auto\">\n                        <button type=\"button\" class=\"btn btn-text-danger remove-item\">\n                            <i class=\"icon-bin2\"></i>\n                        </button>\n                    </div>\n                </div>\n            }\n        </div>\n\n        <div class=\"form-group\">\n            <button type=\"button\" class=\"btn btn-outline-success\" id=\"propertyAdd\">\n                <i class=\"icon-plus\"></i> @T.Get(\"users.profile.propertyAdd\")\n            </button>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary\">@T.Get(\"common.save\")</button>\n    </form>\n</div>\n\n<script>\n    var propertyPlusButton = document.getElementById('propertyAdd');\n    var propertiesDiv = document.getElementById('properties');\n    var pictureButton = document.getElementById('pictureButton');\n    var pictureInput = document.getElementById('pictureInput');\n    var pictureForm = document.getElementById('pictureForm');\n\n    function updateNames() {\n        for (var i = 0; i < propertiesDiv.children.length; i++) {\n            var child = propertiesDiv.children[i];\n\n            const inputs = child.getElementsByTagName('input');\n            inputs[0].name = `Properties[${i}].Name`;\n            inputs[1].name = `Properties[${i}].Value`;\n        }\n    }\n\n    document.addEventListener('click',\n        function (event) {\n            if (event.target.className.indexOf('remove-item') >= 0) {\n                event.target.parentNode.parentNode.remove();\n\n                updateNames();\n            }\n        });\n\n    pictureButton.addEventListener('click',\n        function () {\n            pictureInput.click();\n        });\n\n    pictureInput.addEventListener('change',\n        function () {\n            pictureForm.submit();\n        });\n\n    propertyPlusButton.addEventListener('click',\n        function () {\n            var template = document.createElement('template');\n\n            template.innerHTML =\n                `<div class=\"row g-2 form-group\">\n                    <div class=\"col-5 pr-2\">\n                        <input class=\"form-control\" />\n                    </div>\n                    <div class=\"col pr-2\">\n                        <input class=\"form-control\" />\n                    </div>\n                    <div class=\"col-auto\">\n                        <button type=\"button\" class=\"btn btn-danger\">\n                            <i class=\"icon-bin\"></i>\n                        </button>\n                    </div>\n                </div>`;\n\n            propertiesDiv.append(template.content.firstChild);\n\n            updateNames();\n        });\n\n    var successMessage = document.getElementById('success');\n\n    if (successMessage) {\n        setTimeout(function () {\n            successMessage.remove();\n        }, 5000);\n    }\n</script>\n", "@model Squidex.Areas.IdentityServer.Controllers.Setup.SetupVM\n\n@{\n    ViewBag.Title = T.Get(\"setup.title\");\n\n    void RenderValidation(string field)\n    {\n        @if (ViewContext.ViewData.ModelState[field]?.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid)\n        {\n            <div class=\"errors-container\">\n                        <span class=\"errors\">@Html.ValidationMessage(field)</span>\n                    </div>\n        }\n    }\n\n    void RenderRuleAsSuccess(string message)\n    {\n        <div class=\"row mt-4\">\n                <div class=\"col-auto\">\n                    <div class=\"status-icon status-icon-success mt-2\">\n                        <i class=\"icon-checkmark\"></i>\n                    </div>\n                </div>\n\n                <div class=\"col\">\n                    <div>\n                        @Html.Raw(message)\n                    </div>\n                </div>\n            </div>\n    }\n\n    void RenderRuleAsCritical(string message)\n    {\n        <div class=\"row mt-4\">\n                <div class=\"col-auto\">\n                    <div class=\"status-icon status-icon-failed mt-2\">\n                        <i class=\"icon-exclamation\"></i>\n                    </div>\n                </div>\n\n                <div class=\"col\">\n                    <div>\n                        <strong>@T.Get(\"common.critical\")</strong>: @Html.Raw(message)\n                    </div>\n                </div>\n            </div>\n    }\n\n    void RenderRuleAsWarning(string message)\n    {\n        <div class=\"row mt-4\">\n                <div class=\"col-auto\">\n                    <div class=\"status-icon status-icon-warning mt-2\">\n                        <i class=\"icon-exclamation\"></i>\n                    </div>\n                </div>\n\n                <div class=\"col\">\n                    <div>\n                        <strong>@T.Get(\"common.warning\")</strong>: @Html.Raw(message)\n                    </div>\n                </div>\n            </div>\n    }\n}\n\n<h1>@T.Get(\"setup.headline\")</h1>\n\n<img style=\"height: 250px\" class=\"mt-2 mb-2\" src=\"squid.svg?title=Welcome&text=Welcome%20to%20the%20Installation%20Process&face=happy\" />\n\n<div class=\"mt-2 mb-2\">\n    <small class=\"form-text text-muted\">@T.Get(\"setup.hint\")</small>\n</div>\n\n<div class=\"profile-section\">\n    <h2>@T.Get(\"setup.rules.headline\")</h2>\n\n    @if (Model!.IsValidHttps)\n    {\n        RenderRuleAsSuccess(T.Get(\"setup.ruleHttps.success\"));\n    }\n    else\n    {\n        RenderRuleAsCritical(T.Get(\"setup.ruleHttps.failure\"));\n    }\n\n    @if (Model!.BaseUrlConfigured == Model!.BaseUrlCurrent)\n    {\n        RenderRuleAsSuccess(T.Get(\"setup.ruleUrl.success\"));\n    }\n    else\n    {\n        RenderRuleAsCritical(T.Get(\"setup.ruleUrl.failure\", new { actual = Model!.BaseUrlCurrent, configured = Model!.BaseUrlConfigured }));\n    }\n\n    @if (Model!.EverybodyCanCreateApps)\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleAppCreation.warningAdmins\"));\n    }\n    else\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleAppCreation.warningAll\"));\n    }\n\n    @if (Model!.EverybodyCanCreateTeams)\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleTeamCreation.warningAdmins\"));\n    }\n    else\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleTeamCreation.warningAll\"));\n    }\n\n    @if (Model!.IsAssetStoreFtp)\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleFtp.warning\"));\n    }\n\n    @if (Model!.IsAssetStoreFile)\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleFolder.warning\"));\n    }\n</div>\n\n<hr />\n\n<div class=\"profile-section\">\n    <h2 class=\"mb-3\">@T.Get(\"setup.createUser.headline\")</h2>\n\n    @if (Model!.HasExternalLogin)\n{\n    <div>\n            <small class=\"form-text text-muted mt-2 mb-2\">@T.Get(\"setup.createUser.loginHint\")</small>\n\n            <div class=\"mt-3\">\n                <a class=\"btn btn-primary force-white\" asp-controller=\"Account\" asp-action=\"Login\">\n                    @T.Get(\"setup.createUser.loginLink\")\n                </a>\n            </div>\n        </div>\n}\n\n    @if (Model!.HasExternalLogin && Model!.HasPasswordAuth)\n    {\n        <div class=\"profile-separator\">\n                <div class=\"profile-separator-text\">@T.Get(\"setup.createUser.separator\")</div>\n            </div>\n    }\n\n    @if (Model!.HasPasswordAuth)\n    {\n        <h3>@T.Get(\"setup.createUser.headlineCreate\")</h3>\n\n        @if (!string.IsNullOrWhiteSpace(Model!.ErrorMessage))\n        {\n            <div class=\"form-alert form-alert-error\">\n                        @Model!.ErrorMessage\n                    </div>\n        }\n\n        <form class=\"profile-form\" asp-controller=\"Setup\" asp-action=\"Setup\" method=\"post\">\n            <div class=\"form-group\">\n                <label for=\"email\">@T.Get(\"common.email\")</label>\n\n                @{ RenderValidation(\"Email\"); }\n\n                <input type=\"text\" class=\"form-control\" name=\"email\" id=\"email\" />\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"password\">@T.Get(\"common.password\")</label>\n\n                @{ RenderValidation(\"Password\"); }\n\n                <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" />\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"passwordConfirm\">@T.Get(\"setup.createUser.confirmPassword\")</label>\n\n                @{ RenderValidation(\"PasswordConfirm\"); }\n\n                <input type=\"password\" class=\"form-control\" name=\"passwordConfirm\" id=\"passwordConfirm\" />\n            </div>\n\n            <div class=\"form-group mb-0\">\n                <button type=\"submit\" class=\"btn btn-success\">@T.Get(\"setup.createUser.button\")</button>\n            </div>\n        </form>\n    }\n\n    @if (!Model!.HasExternalLogin && !Model!.HasPasswordAuth)\n    {\n        <div>\n            @T.Get(\"setup.createUser.failure\")\n         </div>\n    }\n</div>", "/*\n * Squidex Headless CMS\n *\n * @license\n * Copyright (c) Squidex UG (haftungsbeschr\u00e4nkt). All rights reserved.\n */\n\nimport { Directive, ElementRef, Input, OnChanges, OnDestroy, OnInit, Pipe, PipeTransform, Renderer2 } from '@angular/core';\nimport { ResourceOwner } from '@app/framework';\nimport { ContentDto, FieldSizes, META_FIELDS, TableField, TableSettings } from '@app/shared/internal';\n\nexport function getCellWidth(field: TableField, sizes: FieldSizes | undefined | null) {\n    const size = sizes?.[field.name] || 0;\n\n    if (size > 0) {\n        return size;\n    }\n\n    switch (field) {\n        case META_FIELDS.id:\n            return 280;\n        case META_FIELDS.created:\n            return 150;\n        case META_FIELDS.createdByAvatar:\n            return 55;\n        case META_FIELDS.createdByName:\n            return 150;\n        case META_FIELDS.lastModified:\n            return 150;\n        case META_FIELDS.lastModifiedByAvatar:\n            return 55;\n        case META_FIELDS.lastModifiedByName:\n            return 150;\n        case META_FIELDS.status:\n            return 200;\n        case META_FIELDS.statusNext:\n            return 240;\n        case META_FIELDS.statusColor:\n            return 50;\n        case META_FIELDS.version:\n            return 80;\n        default:\n            return 200;\n    }\n}\n\n@Pipe({\n    name: 'sqxContentsColumns',\n    pure: true,\n})\nexport class ContentsColumnsPipe implements PipeTransform {\n    public transform(value: ReadonlyArray<ContentDto>) {\n        let columns = 1;\n\n        for (const content of value) {\n            columns = Math.max(columns, content.referenceFields.length);\n        }\n\n        return columns;\n    }\n}\n\n@Directive({\n    selector: '[sqxContentListWidth]',\n})\nexport class ContentListWidthDirective extends ResourceOwner implements OnChanges {\n    private sizes?: FieldSizes;\n    private size = -1;\n\n    @Input('sqxContentListWidth')\n    public fields!: ReadonlyArray<TableField>;\n\n    @Input('fields')\n    public set tableSettings(value: TableSettings | undefined | null) {\n        this.unsubscribeAll();\n\n        this.own(value?.fieldSizes.subscribe(sizes => {\n            this.sizes = sizes;\n\n            this.updateSize();\n        }));\n    }\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly renderer: Renderer2,\n    ) {\n        super();\n    }\n\n    public ngOnChanges() {\n        this.updateSize();\n    }\n\n    private updateSize() {\n        if (!this.fields) {\n            return;\n        }\n\n        let size = 100;\n\n        for (const field of this.fields) {\n            size += getCellWidth(field, this.sizes);\n        }\n\n        if (size === this.size) {\n            return;\n        }\n\n        const width = `${size}px`;\n\n        this.renderer.setStyle(this.element.nativeElement, 'min-width', width);\n\n        this.size === size;\n    }\n}\n\n@Directive({\n    selector: '[sqxContentListCell]',\n})\nexport class ContentListCellDirective extends ResourceOwner implements OnChanges {\n    private sizes?: FieldSizes;\n    private size = -1;\n\n    @Input()\n    public field!: TableField;\n\n    @Input('fields')\n    public set tableFields(value: TableSettings | undefined | null) {\n        this.unsubscribeAll();\n\n        this.own(value?.fieldSizes.subscribe(sizes => {\n            this.sizes = sizes;\n\n            this.updateSize();\n        }));\n    }\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly renderer: Renderer2,\n    ) {\n        super();\n    }\n\n    public ngOnChanges() {\n        this.updateSize();\n    }\n\n    private updateSize() {\n        if (!this.field.name) {\n            return;\n        }\n\n        const size = getCellWidth(this.field, this.sizes);\n\n        if (size === this.size) {\n            return;\n        }\n\n        const width = `${size}px`;\n\n        this.renderer.setStyle(this.element.nativeElement, 'min-width', width);\n        this.renderer.setStyle(this.element.nativeElement, 'max-width', width);\n        this.renderer.setStyle(this.element.nativeElement, 'width', width);\n\n        this.size === size;\n    }\n}\n\n@Directive({\n    selector: '[sqxContentListCellResize][field][fields]',\n})\nexport class ContentListCellResizeDirective implements OnInit, OnDestroy {\n    private mouseMove?: Function;\n    private mouseUp?: Function;\n    private mouseDown?: Function;\n    private mouseBlur?: Function;\n    private windowBlur?: Function;\n    private startOffset = 0;\n    private startWidth = 0;\n    private resizer: any;\n\n    @Input()\n    public field!: TableField;\n\n    @Input('fields')\n    public tableFields?: TableSettings;\n\n    @Input()\n    public minimumWidth = 50;\n\n    constructor(\n        private readonly element: ElementRef<HTMLTableCellElement>,\n        private readonly renderer: Renderer2,\n    ) {\n    }\n\n    public ngOnDestroy() {\n        this.mouseDown?.();\n        this.mouseDown = undefined;\n        this.mouseBlur?.();\n        this.mouseBlur = undefined;\n\n        this.resetMovement();\n    }\n\n    public ngOnInit() {\n        if (!this.tableFields || !this.field) {\n            return;\n        }\n\n        this.resizer = this.renderer.createElement('span');\n\n        this.renderer.addClass(this.resizer, 'resize-holder');\n        this.renderer.appendChild(this.element.nativeElement, this.resizer);\n\n        this.mouseDown = this.renderer.listen(this.resizer, 'mousedown', this.onMouseDown);\n        this.mouseBlur = this.renderer.listen(this.resizer, 'blur', this.onMouseUp);\n    }\n\n    private onMouseDown = (event: MouseEvent) => {\n        if (!this.tableFields || !this.field) {\n            return;\n        }\n\n        this.resizer.focus();\n\n        this.mouseMove = this.renderer.listen('document', 'mousemove', this.onMouseMove);\n        this.mouseUp = this.renderer.listen('document', 'mouseup', this.onMouseUp);\n        this.windowBlur = this.renderer.listen('window', 'blur', this.onBlur);\n\n        this.startOffset = event.pageX;\n        this.startWidth = this.element.nativeElement.offsetWidth;\n    };\n\n    private onMouseMove = (event: MouseEvent) => {\n        if (!this.mouseMove || !this.tableFields || !this.field) {\n            return;\n        }\n\n        try {\n            this.updateWidth(event, false);\n        } catch {\n            this.resetMovement();\n        }\n    };\n\n    private onMouseUp = (event: MouseEvent) => {\n        if (!this.mouseMove || !this.tableFields || !this.field) {\n            return;\n        }\n\n        try {\n            this.updateWidth(event, true);\n        } finally {\n            this.resetMovement();\n        }\n    };\n\n    private onBlur = () => {\n        this.resetMovement();\n    };\n\n    private updateWidth(event: MouseEvent, save: boolean) {\n        let width = this.startWidth + (event.pageX - this.startOffset);\n\n        if (width < this.minimumWidth) {\n            width = this.minimumWidth;\n        }\n\n        this.tableFields!.updateSize(this.field.name!, width, save);\n    }\n\n    private resetMovement() {\n        this.mouseMove?.();\n        this.mouseMove = undefined;\n        this.mouseUp?.();\n        this.mouseUp = undefined;\n        this.windowBlur?.();\n        this.windowBlur = undefined;\n    }\n}", "<ng-container [ngSwitch]=\"field\">\n    <ng-container *ngSwitchCase=\"metaFields.id\">\n        <small class=\"truncate\">{{content.id}}</small>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.created\">\n        <small class=\"truncate\">{{content.created | sqxFromNow}}</small>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.createdByAvatar\">\n        <img class=\"user-picture\" title=\"{{content.createdBy | sqxUserNameRef}}\" [src]=\"content.createdBy | sqxUserPictureRef\">\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.createdByName\">\n        <small class=\"truncate\">{{content.createdBy | sqxUserNameRef}}</small>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.lastModified\">\n        <small class=\"truncate\">{{content.lastModified | sqxFromNow}}</small>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.lastModifiedByAvatar\">\n        <img class=\"user-picture\" title=\"{{content.lastModifiedBy | sqxUserNameRef}}\" [src]=\"content.lastModifiedBy | sqxUserPictureRef\">\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.lastModifiedByName\">\n        <small class=\"truncate\">{{content.lastModifiedBy | sqxUserNameRef}}</small>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.translationStatus\">\n        <sqx-translation-status\n            [data]=\"content.data\"\n            [language]=\"language\"\n            [languages]=\"languages\"\n            [schema]=\"schema\">\n        </sqx-translation-status>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.translationStatusAverage\">\n        <sqx-translation-status\n            [data]=\"content.data\"\n            [language]=\"undefined\"\n            [languages]=\"languages\"\n            [schema]=\"schema\">\n        </sqx-translation-status>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.status\">\n        <ng-container *ngIf=\"content.newStatus; else singleStatus\">\n            <div class=\"row g-0 status-grid\">\n                <div class=\"col\">\n                    <sqx-content-status [truncate]=\"true\"\n                        layout=\"text\"\n                        [status]=\"content.status\"\n                        [statusColor]=\"content.statusColor\">\n                    </sqx-content-status>\n                </div>\n                <div class=\"col-auto\">\n                    <i class=\"icon-caret-right\"></i>\n                </div>\n                <div class=\"col\">\n                    <sqx-content-status [truncate]=\"true\" \n                        layout=\"text\"\n                        [status]=\"content.newStatus\"\n                        [statusColor]=\"content.newStatusColor!\"\n                        [scheduled]=\"content.scheduleJob\">\n                    </sqx-content-status>\n                </div>\n            </div>\n        </ng-container>\n\n        <ng-template #singleStatus>\n            <sqx-content-status [truncate]=\"true\" \n                layout=\"text\"\n                [status]=\"content.status\"\n                [statusColor]=\"content.statusColor\"\n                [scheduled]=\"content.scheduleJob\">\n            </sqx-content-status>\n        </ng-template>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.statusNext\">\n        <span class=\"truncate\" *ngIf=\"content.scheduleJob\">\n            <sqx-content-status\n                layout=\"text\"\n                [status]=\"content.scheduleJob.status\"\n                [statusColor]=\"content.scheduleJob.color\">\n            </sqx-content-status>\n        \n            {{ 'contents.scheduledAt' | sqxTranslate }}&nbsp;{{content.scheduleJob.dueTime | sqxShortDate}}\n        </span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.statusColor\">\n        <ng-container *ngIf=\"content.newStatus; else singleStatus\">\n            <span class=\"text-nowrap\">\n                <sqx-content-status\n                    [status]=\"content.status\"\n                    [statusColor]=\"content.statusColor\">\n                </sqx-content-status>\n    \n                <i class=\"icon-caret-right\"></i>\n    \n                <sqx-content-status\n                    [status]=\"content.newStatus\"\n                    [statusColor]=\"content.newStatusColor!\"\n                    [scheduled]=\"content.scheduleJob\">\n                </sqx-content-status>\n            </span>\n        </ng-container>\n\n        <ng-template #singleStatus>    \n            <sqx-content-status\n                [status]=\"content.status\"\n                [statusColor]=\"content.statusColor\"\n                [scheduled]=\"content.scheduleJob\">\n            </sqx-content-status>\n        </ng-template>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.version\">\n        <small class=\"truncate\">{{content.version.value}}</small>\n    </ng-container>\n    <ng-container *ngSwitchDefault>\n        <ng-container *ngIf=\"field.rootField && isInlineEditable && patchAllowed && patchForm; else displayTemplate\">\n            <sqx-content-value-editor [form]=\"patchForm\" [field]=\"field.rootField\"></sqx-content-value-editor>\n        </ng-container>\n\n        <ng-template #displayTemplate>\n            <sqx-content-value [value]=\"snapshot.formatted\" [field]=\"field\" [fields]=\"fields\"></sqx-content-value>\n        </ng-template>\n    </ng-container>\n</ng-container>"], "fixing_code": ["// ==========================================================================\n//  Squidex Headless CMS\n// ==========================================================================\n//  Copyright (c) Squidex UG (haftungsbeschraenkt)\n//  All rights reserved. Licensed under the MIT license.\n// ==========================================================================\n\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\nusing Squidex.Config;\nusing Squidex.Domain.Users;\nusing Squidex.Infrastructure;\nusing Squidex.Infrastructure.Security;\nusing Squidex.Infrastructure.Translations;\nusing Squidex.Shared.Identity;\nusing Squidex.Shared.Users;\nusing Squidex.Web;\n\nnamespace Squidex.Areas.IdentityServer.Controllers.Account;\n\n[AutoValidateAntiforgeryToken]\npublic sealed class AccountController : IdentityServerController\n{\n    private readonly IUserService userService;\n    private readonly MyIdentityOptions identityOptions;\n\n    public AccountController(\n        IUserService userService,\n        IOptions<MyIdentityOptions> identityOptions)\n    {\n        this.identityOptions = identityOptions.Value;\n        this.userService = userService;\n    }\n\n    [HttpGet]\n    [Route(\"account/error/\")]\n    public IActionResult LoginError()\n    {\n        throw new InvalidOperationException();\n    }\n\n    [HttpGet]\n    [Route(\"account/forbidden/\")]\n    public IActionResult Forbidden()\n    {\n        throw new DomainForbiddenException(T.Get(\"users.userLocked\"));\n    }\n\n    [HttpGet]\n    [Route(\"account/lockedout/\")]\n    public IActionResult LockedOut()\n    {\n        return View();\n    }\n\n    [HttpGet]\n    [Route(\"account/accessdenied/\")]\n    public IActionResult AccessDenied()\n    {\n        return View();\n    }\n\n    [HttpGet]\n    [Route(\"account/logout-completed/\")]\n    public IActionResult LogoutCompleted()\n    {\n        return View();\n    }\n\n    [HttpGet]\n    [Route(\"account/consent/\")]\n    public IActionResult Consent(string? returnUrl = null)\n    {\n        return View(new ConsentVM { PrivacyUrl = identityOptions.PrivacyUrl, ReturnUrl = returnUrl });\n    }\n\n    [HttpPost]\n    [Route(\"account/consent/\")]\n    public async Task<IActionResult> Consent(ConsentModel model, string? returnUrl = null)\n    {\n        // We ask new users to agree to the cookie and privacy agreements and show and error if they do not agree.\n        if (!model.ConsentToCookies)\n        {\n            ModelState.AddModelError(nameof(model.ConsentToCookies), T.Get(\"users.consent.needed\"));\n        }\n\n        if (!model.ConsentToPersonalInformation)\n        {\n            ModelState.AddModelError(nameof(model.ConsentToPersonalInformation), T.Get(\"users.consent.needed\"));\n        }\n\n        if (!ModelState.IsValid)\n        {\n            var vm = new ConsentVM { PrivacyUrl = identityOptions.PrivacyUrl, ReturnUrl = returnUrl };\n\n            return View(vm);\n        }\n\n        var user = await userService.GetAsync(User, HttpContext.RequestAborted);\n\n        // There is almost no case where this could have happened.\n        if (user == null)\n        {\n            throw new DomainException(T.Get(\"users.userNotFound\"));\n        }\n\n        var update = new UserValues\n        {\n            Consent = true,\n            ConsentForEmails = model.ConsentToAutomatedEmails\n        };\n\n        await userService.UpdateAsync(user.Id, update, ct: HttpContext.RequestAborted);\n\n        return RedirectToReturnUrl(returnUrl);\n    }\n\n    [HttpGet]\n    [Route(\"account/logout/\")]\n    public async Task<IActionResult> Logout(string logoutId)\n    {\n        await SignInManager.SignOutAsync();\n\n        return Redirect(\"~/../\");\n    }\n\n    [HttpGet]\n    [Route(\"account/logout-redirect/\")]\n    public async Task<IActionResult> LogoutRedirect()\n    {\n        await SignInManager.SignOutAsync();\n\n        return RedirectToAction(nameof(LogoutCompleted));\n    }\n\n    [HttpGet]\n    [Route(\"account/signup/\")]\n    public Task<IActionResult> Signup(string? returnUrl = null)\n    {\n        return LoginViewAsync(returnUrl, false, false);\n    }\n\n    [HttpGet]\n    [Route(\"account/login/\")]\n    [ClearCookies]\n    public Task<IActionResult> Login(string? returnUrl = null)\n    {\n        return LoginViewAsync(returnUrl, true, false);\n    }\n\n    [HttpPost]\n    [Route(\"account/login/\")]\n    public async Task<IActionResult> Login(LoginModel model, string? returnUrl = null)\n    {\n        if (!ModelState.IsValid)\n        {\n            return await LoginViewAsync(returnUrl, true, true);\n        }\n\n        var result = await SignInManager.PasswordSignInAsync(model.Email, model.Password, true, true);\n\n        if (!result.Succeeded && result.IsLockedOut)\n        {\n            return View(nameof(LockedOut));\n        }\n        else if (!result.Succeeded)\n        {\n            return await LoginViewAsync(returnUrl, true, true);\n        }\n        else\n        {\n            return RedirectToReturnUrl(returnUrl);\n        }\n    }\n\n    private async Task<IActionResult> LoginViewAsync(string? returnUrl, bool isLogin, bool isFailed)\n    {\n        // If password authentication is enabled we always show the page.\n        var allowPasswordAuth = identityOptions.AllowPasswordAuth;\n\n        var externalProviders = await SignInManager.GetExternalProvidersAsync();\n\n        // If there is only one external authentication provider, we can redirect just directly.\n        if (externalProviders.Count == 1 && !allowPasswordAuth)\n        {\n            var provider = externalProviders[0].AuthenticationScheme;\n\n            var challengeRedirectUrl = Url.Action(nameof(ExternalCallback));\n            var challengeProperties = SignInManager.ConfigureExternalAuthenticationProperties(provider, challengeRedirectUrl);\n\n            // Redirect to the external authentication provider.\n            return Challenge(challengeProperties, provider);\n        }\n\n        var vm = new LoginVM\n        {\n            ExternalProviders = externalProviders,\n            IsFailed = isFailed,\n            IsLogin = isLogin,\n            HasPasswordAuth = allowPasswordAuth,\n            ReturnUrl = returnUrl\n        };\n\n        return View(nameof(Login), vm);\n    }\n\n    [HttpPost]\n    [Route(\"account/external/\")]\n    public IActionResult External(string provider, string? returnUrl = null)\n    {\n        var challengeRedirectUrl = Url.Action(nameof(ExternalCallback), new { returnUrl });\n        var challengeProperties = SignInManager.ConfigureExternalAuthenticationProperties(provider, challengeRedirectUrl);\n\n        return Challenge(challengeProperties, provider);\n    }\n\n    [HttpGet]\n    [Route(\"account/external-callback/\")]\n    public async Task<IActionResult> ExternalCallback(string? returnUrl = null)\n    {\n        var login = await SignInManager.GetExternalLoginInfoWithDisplayNameAsync();\n\n        if (login == null)\n        {\n            return RedirectToAction(nameof(Login));\n        }\n\n        var result = await SignInManager.ExternalLoginSignInAsync(login.LoginProvider, login.ProviderKey, true);\n\n        if (!result.Succeeded && result.IsLockedOut)\n        {\n            return View(nameof(LockedOut));\n        }\n\n        var isLoggedIn = result.Succeeded;\n        var isLocked = false;\n\n        IUser? user = null;\n\n        if (isLoggedIn)\n        {\n            user = await userService.FindByLoginAsync(login.LoginProvider, login.ProviderKey, HttpContext.RequestAborted);\n        }\n        else\n        {\n            var email = login.Principal.GetEmail();\n\n            if (string.IsNullOrWhiteSpace(email))\n            {\n                throw new DomainException(T.Get(\"users.noEmailAddress\"));\n            }\n\n            user = await userService.FindByEmailAsync(email!, HttpContext.RequestAborted);\n\n            // User might not have a login or password if the user got invited.\n            if (user != null && await HasLoginAsync(user))\n            {\n                // If we have a login, we reject this user, otherwise you can login to an account you do not own.\n                user = null;\n            }\n\n            if (user == null)\n            {\n                var values = new UserValues\n                {\n                    CustomClaims = login.Principal.Claims.GetSquidexClaims().ToList()\n                };\n\n                var locked = identityOptions.LockAutomatically;\n\n                // Try to create a user. If the user exists an exception message is shown to the user.\n                user = await userService.CreateAsync(email!, values, locked, HttpContext.RequestAborted);\n            }\n\n            if (user != null)\n            {\n                await userService.AddLoginAsync(user.Id, login, HttpContext.RequestAborted);\n\n                // Login might fail if the user is locked out.\n                (isLoggedIn, isLocked) = await LoginAsync(login);\n            }\n        }\n\n        if (isLocked)\n        {\n            return View(nameof(LockedOut));\n        }\n        else if (!isLoggedIn)\n        {\n            return RedirectToAction(nameof(Login));\n        }\n        else if (user != null && !user.Claims.HasConsent() && !identityOptions.NoConsent)\n        {\n            // This should actually never happen, because user should not be null, when logged in.\n            return RedirectToAction(nameof(Consent), new { returnUrl });\n        }\n        else\n        {\n            return RedirectToReturnUrl(returnUrl);\n        }\n    }\n\n    private async Task<bool> HasLoginAsync(IUser user)\n    {\n        if (await userService.HasPasswordAsync(user, HttpContext.RequestAborted))\n        {\n            return true;\n        }\n\n        var logins = await userService.GetLoginsAsync(user, HttpContext.RequestAborted);\n\n        return logins.Count > 0;\n    }\n\n    private async Task<(bool Success, bool Locked)> LoginAsync(UserLoginInfo externalLogin)\n    {\n        var result = await SignInManager.ExternalLoginSignInAsync(externalLogin.LoginProvider, externalLogin.ProviderKey, true);\n\n        return (result.Succeeded, result.IsLockedOut);\n    }\n}\n", "// ==========================================================================\n//  Squidex Headless CMS\n// ==========================================================================\n//  Copyright (c) Squidex UG (haftungsbeschraenkt)\n//  All rights reserved. Licensed under the MIT license.\n// ==========================================================================\n\nusing Microsoft.AspNetCore.Authentication;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\nusing Squidex.Assets;\nusing Squidex.Config;\nusing Squidex.Domain.Users;\nusing Squidex.Infrastructure;\nusing Squidex.Infrastructure.Reflection;\nusing Squidex.Infrastructure.Tasks;\nusing Squidex.Infrastructure.Translations;\nusing Squidex.Infrastructure.Validation;\nusing Squidex.Shared.Identity;\nusing Squidex.Shared.Users;\nusing Squidex.Web;\n\nnamespace Squidex.Areas.IdentityServer.Controllers.Profile;\n\n[Authorize]\n[AutoValidateAntiforgeryToken]\npublic sealed class ProfileController : IdentityServerController\n{\n    private readonly IUserPictureStore userPictureStore;\n    private readonly IUserService userService;\n    private readonly IAssetThumbnailGenerator assetThumbnailGenerator;\n    private readonly MyIdentityOptions identityOptions;\n\n    public ProfileController(\n        IOptions<MyIdentityOptions> identityOptions,\n        IUserPictureStore userPictureStore,\n        IUserService userService,\n        IAssetThumbnailGenerator assetThumbnailGenerator)\n    {\n        this.identityOptions = identityOptions.Value;\n        this.userPictureStore = userPictureStore;\n        this.userService = userService;\n        this.assetThumbnailGenerator = assetThumbnailGenerator;\n    }\n\n    [HttpGet]\n    [Route(\"account/profile/\")]\n    public async Task<IActionResult> Profile(string? successMessage = null)\n    {\n        var user = await userService.GetAsync(User, HttpContext.RequestAborted);\n\n        return View(await GetVM<None>(user, successMessage: successMessage));\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/login-add/\")]\n    public async Task<IActionResult> AddLogin(string provider)\n    {\n        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);\n\n        var userId = userService.GetUserId(User, HttpContext.RequestAborted);\n\n        var challengeRedirectUrl = Url.Action(nameof(AddLoginCallback));\n        var challengeProperties = SignInManager.ConfigureExternalAuthenticationProperties(provider, challengeRedirectUrl, userId);\n\n        return Challenge(challengeProperties, provider);\n    }\n\n    [HttpGet]\n    [Route(\"account/profile/login-add-callback/\")]\n    public Task<IActionResult> AddLoginCallback()\n    {\n        return MakeChangeAsync((id, ct) => AddLoginAsync(id, ct),\n            T.Get(\"users.profile.addLoginDone\"), None.Value);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/update/\")]\n    public Task<IActionResult> UpdateProfile(ChangeProfileModel model)\n    {\n        return MakeChangeAsync((id, ct) => userService.UpdateAsync(id, model.ToValues(), ct: ct),\n            T.Get(\"users.profile.updateProfileDone\"), model);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/properties/\")]\n    public Task<IActionResult> UpdateProperties(ChangePropertiesModel model)\n    {\n        return MakeChangeAsync((id, ct) => userService.UpdateAsync(id, model.ToValues(), ct: ct),\n            T.Get(\"users.profile.updatePropertiesDone\"), model);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/login-remove/\")]\n    public Task<IActionResult> RemoveLogin(RemoveLoginModel model)\n    {\n        return MakeChangeAsync((id, ct) => userService.RemoveLoginAsync(id, model.LoginProvider, model.ProviderKey, ct),\n            T.Get(\"users.profile.removeLoginDone\"), model);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/password-set/\")]\n    public Task<IActionResult> SetPassword(SetPasswordModel model)\n    {\n        return MakeChangeAsync((id, ct) => userService.SetPasswordAsync(id, model.Password, ct: ct),\n            T.Get(\"users.profile.setPasswordDone\"), model);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/password-change/\")]\n    public Task<IActionResult> ChangePassword(ChangePasswordModel model)\n    {\n        return MakeChangeAsync((id, ct) => userService.SetPasswordAsync(id, model.Password, model.OldPassword, ct),\n            T.Get(\"users.profile.changePasswordDone\"), model);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/generate-client-secret/\")]\n    public Task<IActionResult> GenerateClientSecret()\n    {\n        return MakeChangeAsync((id, ct) => GenerateClientSecretAsync(id, ct),\n            T.Get(\"users.profile.generateClientDone\"), None.Value);\n    }\n\n    [HttpPost]\n    [Route(\"account/profile/upload-picture/\")]\n    public Task<IActionResult> UploadPicture(List<IFormFile> file)\n    {\n        return MakeChangeAsync((id, ct) => UpdatePictureAsync(file, id, ct),\n            T.Get(\"users.profile.uploadPictureDone\"), None.Value);\n    }\n\n    private async Task GenerateClientSecretAsync(string id,\n        CancellationToken ct)\n    {\n        var update = new UserValues { ClientSecret = RandomHash.New() };\n\n        await userService.UpdateAsync(id, update, ct: ct);\n    }\n\n    private async Task AddLoginAsync(string id,\n        CancellationToken ct)\n    {\n        var login = await SignInManager.GetExternalLoginInfoWithDisplayNameAsync(id);\n\n        await userService.AddLoginAsync(id, login, ct);\n    }\n\n    private async Task UpdatePictureAsync(List<IFormFile> files, string id,\n        CancellationToken ct)\n    {\n        if (files.Count != 1)\n        {\n            throw new ValidationException(T.Get(\"validation.onlyOneFile\"));\n        }\n\n        await UploadResizedAsync(files[0], id, ct);\n\n        var update = new UserValues\n        {\n            PictureUrl = SquidexClaimTypes.PictureUrlStore\n        };\n\n        await userService.UpdateAsync(id, update, ct: ct);\n    }\n\n    private async Task UploadResizedAsync(IFormFile file, string id,\n        CancellationToken ct)\n    {\n        await using var assetResized = TempAssetFile.Create(file.ToAssetFile());\n\n        var resizeOptions = new ResizeOptions\n        {\n            TargetWidth = 128,\n            TargetHeight = 128\n        };\n\n        try\n        {\n            await using (var originalStream = file.OpenReadStream())\n            {\n                await using (var resizeStream = assetResized.OpenWrite())\n                {\n                    await assetThumbnailGenerator.CreateThumbnailAsync(originalStream, file.ContentType, resizeStream, resizeOptions, ct);\n                }\n            }\n        }\n        catch\n        {\n            throw new ValidationException(T.Get(\"validation.notAnImage\"));\n        }\n\n        await using (var resizeStream = assetResized.OpenWrite())\n        {\n            await userPictureStore.UploadAsync(id, resizeStream, ct);\n        }\n    }\n\n    private async Task<IActionResult> MakeChangeAsync<TModel>(Func<string, CancellationToken, Task> action, string successMessage, TModel? model = null) where TModel : class\n    {\n        var user = await userService.GetAsync(User, HttpContext.RequestAborted);\n\n        if (user == null)\n        {\n            return NotFound();\n        }\n\n        if (!ModelState.IsValid)\n        {\n            return View(nameof(Profile), await GetVM(user, model));\n        }\n\n        string errorMessage;\n        try\n        {\n            await action(user.Id, HttpContext.RequestAborted);\n\n            await SignInManager.SignInAsync((IdentityUser)user.Identity, true);\n\n            return RedirectToAction(nameof(Profile), new { successMessage });\n        }\n        catch (ValidationException ex)\n        {\n            errorMessage = ex.Message;\n        }\n        catch (Exception)\n        {\n            errorMessage = T.Get(\"users.errorHappened\");\n        }\n\n        return View(nameof(Profile), await GetVM(user, model, errorMessage));\n    }\n\n    private async Task<ProfileVM> GetVM<TModel>(IUser? user, TModel? model = null, string? errorMessage = null, string? successMessage = null) where TModel : class\n    {\n        if (user == null)\n        {\n            throw new DomainException(T.Get(\"users.userNotFound\"));\n        }\n\n        var (providers, hasPassword, logins) = await AsyncHelper.WhenAll(\n            SignInManager.GetExternalProvidersAsync(),\n            userService.HasPasswordAsync(user, HttpContext.RequestAborted),\n            userService.GetLoginsAsync(user, HttpContext.RequestAborted));\n\n        var vm = new ProfileVM\n        {\n            Id = user.Id,\n            ClientSecret = user.Claims.ClientSecret()!,\n            Email = user.Email,\n            ErrorMessage = errorMessage,\n            ExternalLogins = logins,\n            ExternalProviders = providers,\n            DisplayName = user.Claims.DisplayName()!,\n            HasPassword = hasPassword,\n            HasPasswordAuth = identityOptions.AllowPasswordAuth,\n            IsHidden = user.Claims.IsHidden(),\n            SuccessMessage = successMessage\n        };\n\n        if (model != null)\n        {\n            SimpleMapper.Map(model, vm);\n        }\n\n        vm.Properties ??= user.Claims.GetCustomProperties().Select(UserProperty.FromTuple).ToList();\n\n        return vm;\n    }\n}\n", "// ==========================================================================\n//  Squidex Headless CMS\n// ==========================================================================\n//  Copyright (c) Squidex UG (haftungsbeschraenkt)\n//  All rights reserved. Licensed under the MIT license.\n// ==========================================================================\n\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\nusing Squidex.Areas.Api.Controllers.UI;\nusing Squidex.Assets;\nusing Squidex.Config;\nusing Squidex.Domain.Users;\nusing Squidex.Hosting;\nusing Squidex.Infrastructure;\nusing Squidex.Infrastructure.Reflection;\nusing Squidex.Infrastructure.Translations;\nusing Squidex.Infrastructure.Validation;\nusing Squidex.Web;\n\nnamespace Squidex.Areas.IdentityServer.Controllers.Setup;\n\n[AutoValidateAntiforgeryToken]\npublic class SetupController : IdentityServerController\n{\n    private readonly IAssetStore assetStore;\n    private readonly IUrlGenerator urlGenerator;\n    private readonly IUserService userService;\n    private readonly MyUIOptions uiOptions;\n    private readonly MyIdentityOptions identityOptions;\n\n    public SetupController(\n        IAssetStore assetStore,\n        IOptions<MyUIOptions> uiOptions,\n        IOptions<MyIdentityOptions> identityOptions,\n        IUrlGenerator urlGenerator,\n        IUserService userService)\n    {\n        this.assetStore = assetStore;\n        this.identityOptions = identityOptions.Value;\n        this.uiOptions = uiOptions.Value;\n        this.urlGenerator = urlGenerator;\n        this.userService = userService;\n    }\n\n    [HttpGet]\n    [Route(\"setup/\")]\n    public async Task<IActionResult> Setup()\n    {\n        if (!await userService.IsEmptyAsync(HttpContext.RequestAborted))\n        {\n            return RedirectToReturnUrl(null);\n        }\n\n        return View(nameof(Setup), await GetVM(None.Value));\n    }\n\n    [HttpPost]\n    [Route(\"setup/\")]\n    public async Task<IActionResult> Setup(CreateUserModel model)\n    {\n        if (!await userService.IsEmptyAsync(HttpContext.RequestAborted))\n        {\n            return RedirectToReturnUrl(null);\n        }\n\n        if (!ModelState.IsValid)\n        {\n            return View(nameof(Profile), await GetVM(model));\n        }\n\n        string errorMessage;\n        try\n        {\n            var user = await userService.CreateAsync(model.Email, new UserValues\n            {\n                Password = model.Password\n            }, ct: HttpContext.RequestAborted);\n\n            await SignInManager.SignInAsync((IdentityUser)user.Identity, true);\n\n            return RedirectToReturnUrl(null);\n        }\n        catch (ValidationException ex)\n        {\n            errorMessage = ex.Message;\n        }\n        catch (Exception)\n        {\n            errorMessage = T.Get(\"users.errorHappened\");\n        }\n\n        return View(nameof(Setup), await GetVM(model, errorMessage));\n    }\n\n    private async Task<SetupVM> GetVM<TModel>(TModel? model = null, string? errorMessage = null) where TModel : class\n    {\n        var externalProviders = await SignInManager.GetExternalProvidersAsync();\n\n        var result = new SetupVM\n        {\n            BaseUrlConfigured = urlGenerator.BuildUrl(string.Empty, false),\n            BaseUrlCurrent = GetCurrentUrl(),\n            ErrorMessage = errorMessage,\n            EverybodyCanCreateApps = !uiOptions.OnlyAdminsCanCreateApps,\n            EverybodyCanCreateTeams = !uiOptions.OnlyAdminsCanCreateTeams,\n            IsValidHttps = HttpContext.Request.IsHttps,\n            IsAssetStoreFile = assetStore is FolderAssetStore,\n            IsAssetStoreFtp = assetStore is FTPAssetStore,\n            HasExternalLogin = externalProviders.Any(),\n            HasPasswordAuth = identityOptions.AllowPasswordAuth\n        };\n\n        if (model != null)\n        {\n            SimpleMapper.Map(model, result);\n        }\n\n        return result;\n    }\n\n    private string GetCurrentUrl()\n    {\n        var request = HttpContext.Request;\n\n        var url = $\"{request.Scheme}://{request.Host}{request.PathBase}\";\n\n        if (url.EndsWith(Constants.PrefixIdentityServer, StringComparison.Ordinal))\n        {\n            url = url[..^Constants.PrefixIdentityServer.Length];\n        }\n\n        return url.TrimEnd('/');\n    }\n}\n", "@model Squidex.Areas.IdentityServer.Controllers.Account.ConsentVM\n\n@{\n    ViewBag.Title = T.Get(\"users.consent.title\");\n}\n\n@functions {\n    public string ErrorClass(string error)\n    {\n        return ViewData.ModelState[error]?.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? \"border-danger\" : \"\";\n    }\n}\n\n<form asp-controller=\"Account\" asp-action=\"Consent\" asp-route-returnurl=\"@Model!.ReturnUrl\" method=\"post\">\n    @Html.AntiForgeryToken()\n\n    <h2>@T.Get(\"users.consent.headline\")</h2>\n        \n    <label for=\"consentToAutomatedEmails\">\n        <div class=\"card card-consent @ErrorClass(\"ConsentToAutomatedEmails\")\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">@T.Get(\"users.consent.emailHeadline\")</h4>\n\n                <div class=\"card-text row\">\n                    <div class=\"col col-auto\">\n                        <input type=\"checkbox\" id=\"consentToAutomatedEmails\" name=\"consentToAutomatedEmails\" value=\"True\" />\n                    </div>\n                    <div class=\"col\">\n                        @Html.Raw(T.Get(\"users.consent.emailText\"))\n                    </div>\n                </div>\n            </div>\n        </div>\n    </label>\n\n    <label for=\"consentToCookies\">\n        <div class=\"card card-consent @ErrorClass(\"ConsentToCookies\")\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">@T.Get(\"users.consent.cookiesHeadline\")</h4>\n\n                <div class=\"card-text row\">\n                    <div class=\"col col-auto\">\n                        <input type=\"checkbox\" id=\"consentToCookies\" name=\"consentToCookies\" value=\"True\" />\n                    </div>\n                    <div class=\"col\">\n                        @Html.Raw(T.Get(\"users.consent.cookiesText\", new { privacyUrl = Model!.PrivacyUrl }))\n                    </div>\n                </div>\n            </div>\n        </div>\n    </label>\n\n    <label for=\"consentToPersonalInformation\">\n        <div class=\"card card-consent @ErrorClass(\"ConsentToPersonalInformation\")\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">@T.Get(\"users.consent.piiHeadline\")</h4>\n\n                <div class=\"card-text row\">\n                    <div class=\"col col-auto\">\n                        <input type=\"checkbox\" id=\"consentToPersonalInformation\" name=\"consentToPersonalInformation\" value=\"True\" />\n                    </div>\n                    <div class=\"col\">\n                        @Html.Raw(T.Get(\"users.consent.piiText\"))\n                    </div>\n                </div>\n            </div>\n        </div>\n    </label>\n\n    <div class=\"profile-section-sm text-right\">\n        <button type=\"submit\" class=\"btn btn-success\">@T.Get(\"users.consent.agree\")</button>\n    </div>\n</form>", "@model Squidex.Areas.IdentityServer.Controllers.Account.LoginVM\n\n@{\n    var action = Model!.IsLogin ? T.Get(\"common.login\") : T.Get(\"common.signup\");\n\n    ViewBag.Title = action;\n}\n\n<div class=\"login-container\">\n    <div class=\"container\">\n        <div class=\"row text-center\">\n            <div class=\"btn-group profile-headline\">\n                @if (Model!.IsLogin)\n                {\n                    <a class=\"btn btn-toggle btn-primary\" asp-controller=\"Account\" asp-action=\"Login\" asp-route-returnurl=\"@Model!.ReturnUrl\">@T.Get(\"common.login\")</a>\n                }\n                else\n                {\n                    <a class=\"btn btn-toggle\" asp-controller=\"Account\" asp-action=\"Login\" asp-route-returnurl=\"@Model!.ReturnUrl\">@T.Get(\"common.login\")</a>\n                }\n                        @if (!Model!.IsLogin)\n                {\n                    <a class=\"btn btn-toggle btn-primary\" asp-controller=\"Account\" asp-action=\"Signup\" asp-route-returnurl=\"@Model!.ReturnUrl\">@T.Get(\"common.signup\")</a>\n                }\n                else\n                {\n                    <a class=\"btn btn-toggle\" asp-controller=\"Account\" asp-action=\"Signup\" asp-route-returnurl=\"@Model!.ReturnUrl\">@T.Get(\"common.signup\")</a>\n                }\n            </div>\n        </div>\n    </div>\n\n    <form asp-controller=\"Account\" asp-action=\"External\" asp-route-returnurl=\"@Model!.ReturnUrl\" method=\"post\">\n        @Html.AntiForgeryToken()\n\n        @foreach (var provider in Model!.ExternalProviders)\n        {\n            var schema = provider.AuthenticationScheme.ToLowerInvariant();\n\n            <div class=\"form-group\">\n                <button class=\"btn external-button btn-block btn btn-@schema\" type=\"submit\" name=\"provider\" value=\"@provider.AuthenticationScheme\">\n                    <i class=\"icon-@schema external-icon\"></i> @Html.Raw(T.Get(\"users.login.loginWith\", new { action, provider = provider.DisplayName }))\n                </button>\n            </div>\n        }\n    </form>\n\n    @if (Model!.HasExternalLogin && Model!.HasPasswordAuth)\n    {\n        <div class=\"profile-separator\">\n            <div class=\"profile-separator-text\">@T.Get(\"users.login.separator\")</div>\n        </div>\n    }\n\n    @if (Model!.HasPasswordAuth)\n    {\n        if (Model!.IsLogin)\n        {\n            if (Model!.IsFailed)\n            {\n                <div class=\"form-alert form-alert-error\">@T.Get(\"users.login.error\")</div>\n            }\n\n            <form asp-controller=\"Account\" asp-action=\"Login\" asp-route-returnurl=\"@Model!.ReturnUrl\" method=\"post\">\n                @Html.AntiForgeryToken()\n\n                <div class=\"form-group\">\n                    <input type=\"email\" class=\"form-control\" name=\"email\" id=\"email\" placeholder=\"@T.Get(\"users.login.emailPlaceholder\")\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" placeholder=\"@T.Get(\"users.login.passwordPlaceholder\")\" />\n                </div>\n\n                <button type=\"submit\" class=\"btn btn-block btn-primary\">@action</button>\n            </form>\n        }\n        else\n        {\n            <div class=\"profile-password-signup text-center\">@T.Get(\"users.login.askAdmin\")</div>\n        }\n    }\n\n    @if (Model!.IsLogin)\n    {\n        <p class=\"profile-footer\">\n            @T.Get(\"users.login.noAccountSignupQuestion\")\n\n            <a asp-controller=\"Account\" asp-action=\"Signup\" asp-route-returnurl=\"@Model!.ReturnUrl\">\n                @T.Get(\"users.login.noAccountSignupAction\")\n            </a>\n        </p>\n    }\n    else\n    {\n        <p class=\"profile-footer\">\n            @T.Get(\"users.login.noAccountLoginQuestion\")\n\n            <a asp-controller=\"Account\" asp-action=\"Login\" asp-route-returnurl=\"@Model!.ReturnUrl\">\n                @T.Get(\"users.login.noAccountLoginAction\")\n            </a>\n        </p>\n    }\n</div>", "@model Squidex.Areas.IdentityServer.Controllers.Profile.ProfileVM\n\n@{\n    ViewBag.Title = T.Get(\"users.profile.title\");\n\n    void RenderValidation(string field)\n    {\n        @if (ViewContext.ViewData.ModelState[field]?.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid)\n        {\n            <div class=\"errors-container\">\n                <span class=\"errors\">@Html.ValidationMessage(field)</span>\n            </div>\n        }\n    }\n}\n\n<h1>@T.Get(\"users.profile.headline\")</h1>\n\n<h2>@T.Get(\"users.profile.pii\")</h2>\n\n@if (!string.IsNullOrWhiteSpace(Model!.SuccessMessage))\n{\n    <div class=\"form-alert form-alert-success\" id=\"success\">\n        @Model!.SuccessMessage\n    </div>\n}\n\n@if (!string.IsNullOrWhiteSpace(Model!.ErrorMessage))\n{\n    <div class=\"form-alert form-alert-error\">\n        @Model!.ErrorMessage\n    </div>\n}\n\n<div class=\"row profile-section-sm\">\n    <div class=\"col profile-picture-col\">\n        <img class=\"profile-picture\" src=\"api/users/{Model!.Id}/picture/?q={@Guid.NewGuid()}\" />\n    </div>\n    <div class=\"col\">\n        <form id=\"pictureForm\" class=\"profile-picture-form\" asp-controller=\"Profile\" asp-action=\"UploadPicture\" method=\"post\" enctype=\"multipart/form-data\">\n            @Html.AntiForgeryToken()\n\n            <span class=\"btn btn-secondary\" id=\"pictureButton\">\n                <span>@T.Get(\"users.profile.uploadPicture\")</span>\n\n                <input class=\"profile-picture-input\" name=\"file\" type=\"file\" id=\"pictureInput\" />\n            </span>\n        </form>\n    </div>\n</div>\n\n<form class=\"profile-form profile-section\" asp-controller=\"Profile\" asp-action=\"UpdateProfile\" method=\"post\">\n    @Html.AntiForgeryToken()\n\n    <div class=\"form-group\">\n        <label for=\"email\">@T.Get(\"common.email\")</label>\n\n        @{ RenderValidation(\"Email\"); }\n\n        <input type=\"email\" class=\"form-control\" asp-for=\"Email\" />\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"displayName\">@T.Get(\"common.displayName\")</label>\n\n        @{ RenderValidation(\"DisplayName\"); }\n\n        <input type=\"text\" class=\"form-control\" asp-for=\"DisplayName\" />\n    </div>\n\n    <div class=\"form-group\">\n        <div class=\"form-check\">\n            <input type=\"checkbox\" class=\"form-check-input\" asp-for=\"IsHidden\" />\n\n            <label class=\"form-check-label\" asp-for=\"IsHidden\">@T.Get(\"users.profile.hideProfile\")</label>\n        </div>\n    </div>\n\n    <button type=\"submit\" class=\"btn btn-primary\">@T.Get(\"common.save\")</button>\n</form>\n\n@if (Model!.ExternalProviders.Any())\n{\n    <hr />\n\n    <div class=\"profile-section\">\n        <h2>@T.Get(\"users.profile.loginsTitle\")</h2>\n\n        <table class=\"table table-fixed table-lesspadding\">\n            <colgroup>\n                <col style=\"width: 100px;\" />\n                <col style=\"width: 100%;\" />\n                <col style=\"width: 100px;\" />\n            </colgroup>\n            @foreach (var login in Model!.ExternalLogins)\n            {\n                <tr>\n                    <td>\n                        <span>@login.LoginProvider</span>\n                    </td>\n                    <td>\n                        <span class=\"truncate\">@login.ProviderDisplayName</span>\n                    </td>\n                    <td class=\"text-right\">\n                        @if (Model!.ExternalLogins.Count > 1 || Model!.HasPassword)\n                        {\n                            <form asp-controller=\"Profile\" asp-action=\"RemoveLogin\" method=\"post\">\n                                @Html.AntiForgeryToken()\n\n                                <input type=\"hidden\" value=\"@login.LoginProvider\" name=\"LoginProvider\" />\n                                <input type=\"hidden\" value=\"@login.ProviderKey\" name=\"ProviderKey\" />\n\n                                <button type=\"submit\" class=\"btn btn-text-danger btn-sm\">\n                                    @T.Get(\"common.remove\")\n                                </button>\n                            </form>\n                        }\n                    </td>\n                </tr>\n            }\n        </table>\n\n        <form asp-controller=\"Profile\" asp-action=\"AddLogin\" method=\"post\">\n            @Html.AntiForgeryToken()\n\n            @foreach (var provider in Model!.ExternalProviders.Where(x => Model!.ExternalLogins.All(y => x.AuthenticationScheme != y.LoginProvider)))\n            {\n                var schema = provider.AuthenticationScheme.ToLowerInvariant();\n\n                <button class=\"btn external-button-small btn-@schema\" type=\"submit\" name=\"provider\" value=\"@provider.AuthenticationScheme\">\n                    <i class=\"icon-@schema external-icon\"></i>\n                </button>\n            }\n        </form>\n    </div>\n}\n\n@if (Model!.HasPasswordAuth)\n{\n    <hr />\n\n    <div class=\"profile-section\">\n        <h2>@T.Get(\"users.profile.passwordTitle\")</h2>\n\n        @if (Model!.HasPassword)\n        {\n            <form class=\"profile-form\" asp-controller=\"Profile\" asp-action=\"ChangePassword\" method=\"post\">\n                @Html.AntiForgeryToken()\n\n                <div class=\"form-group\">\n                    <label for=\"oldPassword\">@T.Get(\"common.oldPassword\")</label>\n\n                    @{ RenderValidation(\"OldPassword\"); }\n\n                    <input type=\"password\" class=\"form-control\" name=\"oldPassword\" id=\"oldPassword\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"password\">@T.Get(\"common.password\")</label>\n\n                    @{ RenderValidation(\"Password\"); }\n\n                    <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"passwordConfirm\">@T.Get(\"users.profile.confirmPassword\")</label>\n\n                    @{ RenderValidation(\"PasswordConfirm\"); }\n\n                    <input type=\"password\" class=\"form-control\" name=\"passwordConfirm\" id=\"passwordConfirm\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <button type=\"submit\" class=\"btn btn-primary\">@T.Get(\"users.profile.changePassword\")</button>\n                </div>\n            </form>\n        }\n        else\n        {\n            <form class=\"profile-form\" asp-controller=\"Profile\" asp-action=\"SetPassword\" method=\"post\">\n                @Html.AntiForgeryToken()\n\n                <div class=\"form-group\">\n                    <label for=\"password\">@T.Get(\"common.password\")</label>\n\n                    @{ RenderValidation(\"Password\"); }\n\n                    <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"passwordConfirm\">@T.Get(\"users.profile.confirmPassword\")</label>\n\n                    @{ RenderValidation(\"PasswordConfirm\"); }\n\n                    <input type=\"password\" class=\"form-control\" name=\"passwordConfirm\" id=\"passwordConfirm\" />\n                </div>\n\n                <div class=\"form-group\">\n                    <button type=\"submit\" class=\"btn btn-primary\">@T.Get(\"users.profile.setPassword\")</button>\n                </div>\n            </form>\n        }\n    </div>\n}\n\n<hr />\n\n<div class=\"profile-section\">\n    <h2>@T.Get(\"users.profile.clientTitle\")</h2>\n\n    <small class=\"form-text text-muted mt-2 mb-2\">@T.Get(\"users.profile.clientHint\")</small>\n\n    <div class=\"row g-2 form-group\">\n        <div class=\"col-8\">\n            <label for=\"clientId\">@T.Get(\"common.clientId\")</label>\n\n            <input class=\"form-control\" name=\"clientId\" id=\"clientId\" readonly value=\"@Model!.Id\" />\n        </div>\n    </div>\n    <div class=\"row g-2 form-group\">\n        <div class=\"col-8\">\n            <label for=\"clientSecret\">@T.Get(\"common.clientSecret\")</label>\n\n            <input class=\"form-control\" name=\"clientSecret\" id=\"clientSecret\" readonly value=\"@Model!.ClientSecret\" />\n        </div>\n        <div class=\"col-4 pl-2\">\n            <label for=\"generate\">&nbsp;</label>\n\n            <form class=\"profile-form\" asp-controller=\"Profile\" asp-action=\"GenerateClientSecret\" method=\"post\">\n                @Html.AntiForgeryToken()\n\n                <button type=\"submit\" class=\"btn btn-success btn-block\" id=\"generate\">@T.Get(\"users.profile.generateClient\")</button>\n            </form>\n        </div>\n    </div>\n</div>\n\n<hr />\n\n<div class=\"profile-section\">\n    <h2>@T.Get(\"users.profile.propertiesTitle\")</h2>\n\n    <small class=\"form-text text-muted mt-2 mb-2\">@T.Get(\"users.profile.propertiesHint\")</small>\n\n    <form class=\"profile-form\" asp-controller=\"Profile\" asp-action=\"UpdateProperties\" method=\"post\">\n        @Html.AntiForgeryToken()\n\n        <div class=\"mb-2\" id=\"properties\">\n            @for (var i = 0; i < Model!.Properties.Count; i++)\n            {\n                <div class=\"row g-2 form-group\">\n                    <div class=\"col-5 pr-2\">\n\n                        @{ RenderValidation($\"Properties[{i}].Name\"); }\n\n                        <input type=\"text\" class=\"form-control\" asp-for=\"Properties[i].Name\" />\n                    </div>\n                    <div class=\"col pr-2\">\n\n                        @{ RenderValidation($\"Properties[{i}].Value\"); }\n\n                        <input type=\"text\" class=\"form-control\" asp-for=\"Properties[i].Value\" />\n                    </div>\n                    <div class=\"col-auto\">\n                        <button type=\"button\" class=\"btn btn-text-danger remove-item\">\n                            <i class=\"icon-bin2\"></i>\n                        </button>\n                    </div>\n                </div>\n            }\n        </div>\n\n        <div class=\"form-group\">\n            <button type=\"button\" class=\"btn btn-outline-success\" id=\"propertyAdd\">\n                <i class=\"icon-plus\"></i> @T.Get(\"users.profile.propertyAdd\")\n            </button>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary\">@T.Get(\"common.save\")</button>\n    </form>\n</div>\n\n<script>\n    var propertyPlusButton = document.getElementById('propertyAdd');\n    var propertiesDiv = document.getElementById('properties');\n    var pictureButton = document.getElementById('pictureButton');\n    var pictureInput = document.getElementById('pictureInput');\n    var pictureForm = document.getElementById('pictureForm');\n\n    function updateNames() {\n        for (var i = 0; i < propertiesDiv.children.length; i++) {\n            var child = propertiesDiv.children[i];\n\n            const inputs = child.getElementsByTagName('input');\n            inputs[0].name = `Properties[${i}].Name`;\n            inputs[1].name = `Properties[${i}].Value`;\n        }\n    }\n\n    document.addEventListener('click',\n        function (event) {\n            if (event.target.className.indexOf('remove-item') >= 0) {\n                event.target.parentNode.parentNode.remove();\n\n                updateNames();\n            }\n        });\n\n    pictureButton.addEventListener('click',\n        function () {\n            pictureInput.click();\n        });\n\n    pictureInput.addEventListener('change',\n        function () {\n            pictureForm.submit();\n        });\n\n    propertyPlusButton.addEventListener('click',\n        function () {\n            var template = document.createElement('template');\n\n            template.innerHTML =\n                `<div class=\"row g-2 form-group\">\n                    <div class=\"col-5 pr-2\">\n                        <input class=\"form-control\" />\n                    </div>\n                    <div class=\"col pr-2\">\n                        <input class=\"form-control\" />\n                    </div>\n                    <div class=\"col-auto\">\n                        <button type=\"button\" class=\"btn btn-danger\">\n                            <i class=\"icon-bin\"></i>\n                        </button>\n                    </div>\n                </div>`;\n\n            propertiesDiv.append(template.content.firstChild);\n\n            updateNames();\n        });\n\n    var successMessage = document.getElementById('success');\n\n    if (successMessage) {\n        setTimeout(function () {\n            successMessage.remove();\n        }, 5000);\n    }\n</script>\n", "@model Squidex.Areas.IdentityServer.Controllers.Setup.SetupVM\n\n@{\n    ViewBag.Title = T.Get(\"setup.title\");\n\n    void RenderValidation(string field)\n    {\n        @if (ViewContext.ViewData.ModelState[field]?.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid)\n        {\n            <div class=\"errors-container\">\n                        <span class=\"errors\">@Html.ValidationMessage(field)</span>\n                    </div>\n        }\n    }\n\n    void RenderRuleAsSuccess(string message)\n    {\n        <div class=\"row mt-4\">\n                <div class=\"col-auto\">\n                    <div class=\"status-icon status-icon-success mt-2\">\n                        <i class=\"icon-checkmark\"></i>\n                    </div>\n                </div>\n\n                <div class=\"col\">\n                    <div>\n                        @Html.Raw(message)\n                    </div>\n                </div>\n            </div>\n    }\n\n    void RenderRuleAsCritical(string message)\n    {\n        <div class=\"row mt-4\">\n                <div class=\"col-auto\">\n                    <div class=\"status-icon status-icon-failed mt-2\">\n                        <i class=\"icon-exclamation\"></i>\n                    </div>\n                </div>\n\n                <div class=\"col\">\n                    <div>\n                        <strong>@T.Get(\"common.critical\")</strong>: @Html.Raw(message)\n                    </div>\n                </div>\n            </div>\n    }\n\n    void RenderRuleAsWarning(string message)\n    {\n        <div class=\"row mt-4\">\n                <div class=\"col-auto\">\n                    <div class=\"status-icon status-icon-warning mt-2\">\n                        <i class=\"icon-exclamation\"></i>\n                    </div>\n                </div>\n\n                <div class=\"col\">\n                    <div>\n                        <strong>@T.Get(\"common.warning\")</strong>: @Html.Raw(message)\n                    </div>\n                </div>\n            </div>\n    }\n}\n\n<h1>@T.Get(\"setup.headline\")</h1>\n\n<img style=\"height: 250px\" class=\"mt-2 mb-2\" src=\"squid.svg?title=Welcome&text=Welcome%20to%20the%20Installation%20Process&face=happy\" />\n\n<div class=\"mt-2 mb-2\">\n    <small class=\"form-text text-muted\">@T.Get(\"setup.hint\")</small>\n</div>\n\n<div class=\"profile-section\">\n    <h2>@T.Get(\"setup.rules.headline\")</h2>\n\n    @if (Model!.IsValidHttps)\n    {\n        RenderRuleAsSuccess(T.Get(\"setup.ruleHttps.success\"));\n    }\n    else\n    {\n        RenderRuleAsCritical(T.Get(\"setup.ruleHttps.failure\"));\n    }\n\n    @if (Model!.BaseUrlConfigured == Model!.BaseUrlCurrent)\n    {\n        RenderRuleAsSuccess(T.Get(\"setup.ruleUrl.success\"));\n    }\n    else\n    {\n        RenderRuleAsCritical(T.Get(\"setup.ruleUrl.failure\", new { actual = Model!.BaseUrlCurrent, configured = Model!.BaseUrlConfigured }));\n    }\n\n    @if (Model!.EverybodyCanCreateApps)\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleAppCreation.warningAdmins\"));\n    }\n    else\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleAppCreation.warningAll\"));\n    }\n\n    @if (Model!.EverybodyCanCreateTeams)\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleTeamCreation.warningAdmins\"));\n    }\n    else\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleTeamCreation.warningAll\"));\n    }\n\n    @if (Model!.IsAssetStoreFtp)\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleFtp.warning\"));\n    }\n\n    @if (Model!.IsAssetStoreFile)\n    {\n        RenderRuleAsWarning(T.Get(\"setup.ruleFolder.warning\"));\n    }\n</div>\n\n<hr />\n\n<div class=\"profile-section\">\n    <h2 class=\"mb-3\">@T.Get(\"setup.createUser.headline\")</h2>\n\n    @if (Model!.HasExternalLogin)\n{\n    <div>\n            <small class=\"form-text text-muted mt-2 mb-2\">@T.Get(\"setup.createUser.loginHint\")</small>\n\n            <div class=\"mt-3\">\n                <a class=\"btn btn-primary force-white\" asp-controller=\"Account\" asp-action=\"Login\">\n                    @T.Get(\"setup.createUser.loginLink\")\n                </a>\n            </div>\n        </div>\n}\n\n    @if (Model!.HasExternalLogin && Model!.HasPasswordAuth)\n    {\n        <div class=\"profile-separator\">\n                <div class=\"profile-separator-text\">@T.Get(\"setup.createUser.separator\")</div>\n            </div>\n    }\n\n    @if (Model!.HasPasswordAuth)\n    {\n        <h3>@T.Get(\"setup.createUser.headlineCreate\")</h3>\n\n        @if (!string.IsNullOrWhiteSpace(Model!.ErrorMessage))\n        {\n            <div class=\"form-alert form-alert-error\">\n                        @Model!.ErrorMessage\n                    </div>\n        }\n\n        <form class=\"profile-form\" asp-controller=\"Setup\" asp-action=\"Setup\" method=\"post\">\n            @Html.AntiForgeryToken()\n\n            <div class=\"form-group\">\n                <label for=\"email\">@T.Get(\"common.email\")</label>\n\n                @{ RenderValidation(\"Email\"); }\n\n                <input type=\"text\" class=\"form-control\" name=\"email\" id=\"email\" />\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"password\">@T.Get(\"common.password\")</label>\n\n                @{ RenderValidation(\"Password\"); }\n\n                <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" />\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"passwordConfirm\">@T.Get(\"setup.createUser.confirmPassword\")</label>\n\n                @{ RenderValidation(\"PasswordConfirm\"); }\n\n                <input type=\"password\" class=\"form-control\" name=\"passwordConfirm\" id=\"passwordConfirm\" />\n            </div>\n\n            <div class=\"form-group mb-0\">\n                <button type=\"submit\" class=\"btn btn-success\">@T.Get(\"setup.createUser.button\")</button>\n            </div>\n        </form>\n    }\n\n    @if (!Model!.HasExternalLogin && !Model!.HasPasswordAuth)\n    {\n        <div>\n            @T.Get(\"setup.createUser.failure\")\n         </div>\n    }\n</div>", "/*\n * Squidex Headless CMS\n *\n * @license\n * Copyright (c) Squidex UG (haftungsbeschr\u00e4nkt). All rights reserved.\n */\n\nimport { Directive, ElementRef, Input, OnChanges, OnDestroy, OnInit, Pipe, PipeTransform, Renderer2 } from '@angular/core';\nimport { ResourceOwner } from '@app/framework';\nimport { ContentDto, FieldSizes, META_FIELDS, TableField, TableSettings } from '@app/shared/internal';\n\nexport function getCellWidth(field: TableField, sizes: FieldSizes | undefined | null) {\n    const size = sizes?.[field.name] || 0;\n\n    if (size > 0) {\n        return size;\n    }\n\n    switch (field) {\n        case META_FIELDS.id:\n            return 280;\n        case META_FIELDS.created:\n            return 150;\n        case META_FIELDS.createdByAvatar:\n            return 55;\n        case META_FIELDS.createdByName:\n            return 150;\n        case META_FIELDS.lastModified:\n            return 150;\n        case META_FIELDS.lastModifiedByAvatar:\n            return 55;\n        case META_FIELDS.lastModifiedByName:\n            return 150;\n        case META_FIELDS.status:\n            return 200;\n        case META_FIELDS.statusNext:\n            return 240;\n        case META_FIELDS.statusColor:\n            return 80;\n        case META_FIELDS.version:\n            return 80;\n        default:\n            return 200;\n    }\n}\n\n@Pipe({\n    name: 'sqxContentsColumns',\n    pure: true,\n})\nexport class ContentsColumnsPipe implements PipeTransform {\n    public transform(value: ReadonlyArray<ContentDto>) {\n        let columns = 1;\n\n        for (const content of value) {\n            columns = Math.max(columns, content.referenceFields.length);\n        }\n\n        return columns;\n    }\n}\n\n@Directive({\n    selector: '[sqxContentListWidth]',\n})\nexport class ContentListWidthDirective extends ResourceOwner implements OnChanges {\n    private sizes?: FieldSizes;\n    private size = -1;\n\n    @Input('sqxContentListWidth')\n    public fields!: ReadonlyArray<TableField>;\n\n    @Input('fields')\n    public set tableSettings(value: TableSettings | undefined | null) {\n        this.unsubscribeAll();\n\n        this.own(value?.fieldSizes.subscribe(sizes => {\n            this.sizes = sizes;\n\n            this.updateSize();\n        }));\n    }\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly renderer: Renderer2,\n    ) {\n        super();\n    }\n\n    public ngOnChanges() {\n        this.updateSize();\n    }\n\n    private updateSize() {\n        if (!this.fields) {\n            return;\n        }\n\n        let size = 100;\n\n        for (const field of this.fields) {\n            size += getCellWidth(field, this.sizes);\n        }\n\n        if (size === this.size) {\n            return;\n        }\n\n        const width = `${size}px`;\n\n        this.renderer.setStyle(this.element.nativeElement, 'min-width', width);\n\n        this.size === size;\n    }\n}\n\n@Directive({\n    selector: '[sqxContentListCell]',\n})\nexport class ContentListCellDirective extends ResourceOwner implements OnChanges {\n    private sizes?: FieldSizes;\n    private size = -1;\n\n    @Input()\n    public field!: TableField;\n\n    @Input('fields')\n    public set tableFields(value: TableSettings | undefined | null) {\n        this.unsubscribeAll();\n\n        this.own(value?.fieldSizes.subscribe(sizes => {\n            this.sizes = sizes;\n\n            this.updateSize();\n        }));\n    }\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly renderer: Renderer2,\n    ) {\n        super();\n    }\n\n    public ngOnChanges() {\n        this.updateSize();\n    }\n\n    private updateSize() {\n        if (!this.field.name) {\n            return;\n        }\n\n        const size = getCellWidth(this.field, this.sizes);\n\n        if (size === this.size) {\n            return;\n        }\n\n        const width = `${size}px`;\n\n        this.renderer.setStyle(this.element.nativeElement, 'min-width', width);\n        this.renderer.setStyle(this.element.nativeElement, 'max-width', width);\n        this.renderer.setStyle(this.element.nativeElement, 'width', width);\n\n        this.size === size;\n    }\n}\n\n@Directive({\n    selector: '[sqxContentListCellResize][field][fields]',\n})\nexport class ContentListCellResizeDirective implements OnInit, OnDestroy {\n    private mouseMove?: Function;\n    private mouseUp?: Function;\n    private mouseDown?: Function;\n    private mouseBlur?: Function;\n    private windowBlur?: Function;\n    private startOffset = 0;\n    private startWidth = 0;\n    private resizer: any;\n\n    @Input()\n    public field!: TableField;\n\n    @Input('fields')\n    public tableFields?: TableSettings;\n\n    @Input()\n    public minimumWidth = 50;\n\n    constructor(\n        private readonly element: ElementRef<HTMLTableCellElement>,\n        private readonly renderer: Renderer2,\n    ) {\n    }\n\n    public ngOnDestroy() {\n        this.mouseDown?.();\n        this.mouseDown = undefined;\n        this.mouseBlur?.();\n        this.mouseBlur = undefined;\n\n        this.resetMovement();\n    }\n\n    public ngOnInit() {\n        if (!this.tableFields || !this.field) {\n            return;\n        }\n\n        this.resizer = this.renderer.createElement('span');\n\n        this.renderer.addClass(this.resizer, 'resize-holder');\n        this.renderer.appendChild(this.element.nativeElement, this.resizer);\n\n        this.mouseDown = this.renderer.listen(this.resizer, 'mousedown', this.onMouseDown);\n        this.mouseBlur = this.renderer.listen(this.resizer, 'blur', this.onMouseUp);\n    }\n\n    private onMouseDown = (event: MouseEvent) => {\n        if (!this.tableFields || !this.field) {\n            return;\n        }\n\n        this.resizer.focus();\n\n        this.mouseMove = this.renderer.listen('document', 'mousemove', this.onMouseMove);\n        this.mouseUp = this.renderer.listen('document', 'mouseup', this.onMouseUp);\n        this.windowBlur = this.renderer.listen('window', 'blur', this.onBlur);\n\n        this.startOffset = event.pageX;\n        this.startWidth = this.element.nativeElement.offsetWidth;\n    };\n\n    private onMouseMove = (event: MouseEvent) => {\n        if (!this.mouseMove || !this.tableFields || !this.field) {\n            return;\n        }\n\n        try {\n            this.updateWidth(event, false);\n        } catch {\n            this.resetMovement();\n        }\n    };\n\n    private onMouseUp = (event: MouseEvent) => {\n        if (!this.mouseMove || !this.tableFields || !this.field) {\n            return;\n        }\n\n        try {\n            this.updateWidth(event, true);\n        } finally {\n            this.resetMovement();\n        }\n    };\n\n    private onBlur = () => {\n        this.resetMovement();\n    };\n\n    private updateWidth(event: MouseEvent, save: boolean) {\n        let width = this.startWidth + (event.pageX - this.startOffset);\n\n        if (width < this.minimumWidth) {\n            width = this.minimumWidth;\n        }\n\n        this.tableFields!.updateSize(this.field.name!, width, save);\n    }\n\n    private resetMovement() {\n        this.mouseMove?.();\n        this.mouseMove = undefined;\n        this.mouseUp?.();\n        this.mouseUp = undefined;\n        this.windowBlur?.();\n        this.windowBlur = undefined;\n    }\n}", "<ng-container [ngSwitch]=\"field\">\n    <ng-container *ngSwitchCase=\"metaFields.id\">\n        <small class=\"truncate\">{{content.id}}</small>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.created\">\n        <small class=\"truncate\">{{content.created | sqxFromNow}}</small>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.createdByAvatar\">\n        <img class=\"user-picture\" title=\"{{content.createdBy | sqxUserNameRef}}\" [src]=\"content.createdBy | sqxUserPictureRef\">\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.createdByName\">\n        <small class=\"truncate\">{{content.createdBy | sqxUserNameRef}}</small>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.lastModified\">\n        <small class=\"truncate\">{{content.lastModified | sqxFromNow}}</small>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.lastModifiedByAvatar\">\n        <img class=\"user-picture\" title=\"{{content.lastModifiedBy | sqxUserNameRef}}\" [src]=\"content.lastModifiedBy | sqxUserPictureRef\">\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.lastModifiedByName\">\n        <small class=\"truncate\">{{content.lastModifiedBy | sqxUserNameRef}}</small>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.translationStatus\">\n        <sqx-translation-status\n            [data]=\"content.data\"\n            [language]=\"language\"\n            [languages]=\"languages\"\n            [schema]=\"schema\">\n        </sqx-translation-status>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.translationStatusAverage\">\n        <sqx-translation-status\n            [data]=\"content.data\"\n            [language]=\"undefined\"\n            [languages]=\"languages\"\n            [schema]=\"schema\">\n        </sqx-translation-status>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.status\">\n        <ng-container *ngIf=\"content.newStatus; else singleStatus\">\n            <div class=\"row g-0 status-grid\">\n                <div class=\"col\">\n                    <sqx-content-status [truncate]=\"true\"\n                        layout=\"text\"\n                        [status]=\"content.status\"\n                        [statusColor]=\"content.statusColor\">\n                    </sqx-content-status>\n                </div>\n                <div class=\"col-auto\">\n                    <i class=\"icon-caret-right\"></i>\n                </div>\n                <div class=\"col\">\n                    <sqx-content-status [truncate]=\"true\" \n                        layout=\"text\"\n                        [status]=\"content.newStatus\"\n                        [statusColor]=\"content.newStatusColor!\"\n                        [scheduled]=\"content.scheduleJob\">\n                    </sqx-content-status>\n                </div>\n            </div>\n        </ng-container>\n\n        <ng-template #singleStatus>\n            <sqx-content-status [truncate]=\"true\" \n                layout=\"text\"\n                [status]=\"content.status\"\n                [statusColor]=\"content.statusColor\"\n                [scheduled]=\"content.scheduleJob\">\n            </sqx-content-status>\n        </ng-template>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.statusNext\">\n        <span class=\"truncate\" *ngIf=\"content.scheduleJob\">\n            <sqx-content-status\n                layout=\"text\"\n                [status]=\"content.scheduleJob.status\"\n                [statusColor]=\"content.scheduleJob.color\">\n            </sqx-content-status>\n        \n            {{ 'contents.scheduledAt' | sqxTranslate }}&nbsp;{{content.scheduleJob.dueTime | sqxShortDate}}\n        </span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.statusColor\">\n        <ng-container *ngIf=\"content.newStatus; else singleStatus\">\n            <span class=\"text-nowrap truncate\">\n                <sqx-content-status\n                    [status]=\"content.status\"\n                    [statusColor]=\"content.statusColor\">\n                </sqx-content-status>\n    \n                <i class=\"icon-caret-right\"></i>\n    \n                <sqx-content-status\n                    [status]=\"content.newStatus\"\n                    [statusColor]=\"content.newStatusColor!\"\n                    [scheduled]=\"content.scheduleJob\">\n                </sqx-content-status>\n            </span>\n        </ng-container>\n\n        <ng-template #singleStatus>    \n            <sqx-content-status\n                [status]=\"content.status\"\n                [statusColor]=\"content.statusColor\"\n                [scheduled]=\"content.scheduleJob\">\n            </sqx-content-status>\n        </ng-template>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"metaFields.version\">\n        <small class=\"truncate\">{{content.version.value}}</small>\n    </ng-container>\n    <ng-container *ngSwitchDefault>\n        <ng-container *ngIf=\"field.rootField && isInlineEditable && patchAllowed && patchForm; else displayTemplate\">\n            <sqx-content-value-editor [form]=\"patchForm\" [field]=\"field.rootField\"></sqx-content-value-editor>\n        </ng-container>\n\n        <ng-template #displayTemplate>\n            <sqx-content-value [value]=\"snapshot.formatted\" [field]=\"field\" [fields]=\"fields\"></sqx-content-value>\n        </ng-template>\n    </ng-container>\n</ng-container>"], "filenames": ["backend/src/Squidex/Areas/IdentityServer/Controllers/Account/AccountController.cs", "backend/src/Squidex/Areas/IdentityServer/Controllers/Profile/ProfileController.cs", "backend/src/Squidex/Areas/IdentityServer/Controllers/Setup/SetupController.cs", "backend/src/Squidex/Areas/IdentityServer/Views/Account/Consent.cshtml", "backend/src/Squidex/Areas/IdentityServer/Views/Account/Login.cshtml", "backend/src/Squidex/Areas/IdentityServer/Views/Profile/Profile.cshtml", "backend/src/Squidex/Areas/IdentityServer/Views/Setup/Setup.cshtml", "frontend/src/app/shared/components/contents/content-list-cell.directive.ts", "frontend/src/app/shared/components/contents/content-list-field.component.html"], "buggy_code_start_loc": [21, 27, 23, 14, 33, 40, 162, 39, 85], "buggy_code_end_loc": [21, 27, 23, 14, 62, 233, 162, 40, 86], "fixing_code_start_loc": [22, 28, 24, 15, 34, 41, 163, 39, 85], "fixing_code_end_loc": [23, 29, 25, 17, 67, 250, 165, 40, 86], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository squidex/squidex prior to 7.4.0.", "other": {"cve": {"id": "CVE-2023-0642", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-02T12:15:09.243", "lastModified": "2023-02-09T16:30:43.150", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository squidex/squidex prior to 7.4.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:squidex.io:squidex:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.4.0", "matchCriteriaId": "1B5AA83C-C544-40BA-AAC6-A2D0A9E64895"}]}]}], "references": [{"url": "https://github.com/squidex/squidex/commit/2da3c41da82eb945832f22bb70dba567ac6ce969", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/3bbdafe6-e152-47bb-88a7-fd031725323d", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/squidex/squidex/commit/2da3c41da82eb945832f22bb70dba567ac6ce969"}}