{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Handles Database Search\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * Class to handle database search\n *\n * @package PhpMyAdmin\n */\nclass PMA_DbSearch\n{\n    /**\n     * Database name\n     *\n     * @access private\n     * @var string\n     */\n    private $_db;\n    /**\n     * Table Names\n     *\n     * @access private\n     * @var array\n     */\n    private $_tables_names_only;\n    /**\n     * Type of search\n     *\n     * @access private\n     * @var array\n     */\n    private $_searchTypes;\n    /**\n     * Already set search type\n     *\n     * @access private\n     * @var integer\n     */\n    private $_criteriaSearchType;\n    /**\n     * Already set search type's description\n     *\n     * @access private\n     * @var string\n     */\n    private $_searchTypeDescription;\n    /**\n     * Search string/regexp\n     *\n     * @access private\n     * @var string\n     */\n    private $_criteriaSearchString;\n    /**\n     * Criteria Tables to search in\n     *\n     * @access private\n     * @var array\n     */\n    private $_criteriaTables;\n    /**\n     * Restrict the search to this column\n     *\n     * @access private\n     * @var string\n     */\n    private $_criteriaColumnName;\n\n    /**\n     * Public Constructor\n     *\n     * @param string $db Database name\n     */\n    public function __construct($db)\n    {\n        $this->_db = $db;\n        // Sets criteria parameters\n        $this->_setSearchParams();\n    }\n\n    /**\n     * Sets search parameters\n     *\n     * @return void\n     */\n    private function _setSearchParams()\n    {\n        $this->_tables_names_only = $GLOBALS['dbi']->getTables($this->_db);\n\n        $this->_searchTypes = array(\n            '1' => __('at least one of the words'),\n            '2' => __('all words'),\n            '3' => __('the exact phrase'),\n            '4' => __('as regular expression'),\n        );\n\n        if (empty($_REQUEST['criteriaSearchType'])\n            || ! is_string($_REQUEST['criteriaSearchType'])\n            || ! array_key_exists(\n                $_REQUEST['criteriaSearchType'],\n                $this->_searchTypes\n            )\n        ) {\n            $this->_criteriaSearchType = 1;\n            unset($_REQUEST['submit_search']);\n        } else {\n            $this->_criteriaSearchType = (int) $_REQUEST['criteriaSearchType'];\n            $this->_searchTypeDescription\n                = $this->_searchTypes[$_REQUEST['criteriaSearchType']];\n        }\n\n        if (empty($_REQUEST['criteriaSearchString'])\n            || ! is_string($_REQUEST['criteriaSearchString'])\n        ) {\n            $this->_criteriaSearchString = '';\n            unset($_REQUEST['submit_search']);\n        } else {\n            $this->_criteriaSearchString = $_REQUEST['criteriaSearchString'];\n        }\n\n        $this->_criteriaTables = array();\n        if (empty($_REQUEST['criteriaTables'])\n            || ! is_array($_REQUEST['criteriaTables'])\n        ) {\n            unset($_REQUEST['submit_search']);\n        } else {\n            $this->_criteriaTables = array_intersect(\n                $_REQUEST['criteriaTables'], $this->_tables_names_only\n            );\n        }\n\n        if (empty($_REQUEST['criteriaColumnName'])\n            || ! is_string($_REQUEST['criteriaColumnName'])\n        ) {\n            unset($this->_criteriaColumnName);\n        } else {\n            $this->_criteriaColumnName = PMA_Util::sqlAddSlashes(\n                $_REQUEST['criteriaColumnName'], true\n            );\n        }\n    }\n\n    /**\n     * Builds the SQL search query\n     *\n     * @param string $table The table name\n     *\n     * @return array 3 SQL queries (for count, display and delete results)\n     *\n     * @todo    can we make use of fulltextsearch IN BOOLEAN MODE for this?\n     * PMA_backquote\n     * DatabaseInterface::freeResult\n     * DatabaseInterface::fetchAssoc\n     * $GLOBALS['db']\n     * explode\n     * count\n     * strlen\n     */\n    private function _getSearchSqls($table)\n    {\n        // Statement types\n        $sqlstr_select = 'SELECT';\n        $sqlstr_delete = 'DELETE';\n        // Table to use\n        $sqlstr_from = ' FROM '\n            . PMA_Util::backquote($GLOBALS['db']) . '.'\n            . PMA_Util::backquote($table);\n        // Gets where clause for the query\n        $where_clause = $this->_getWhereClause($table);\n        // Builds complete queries\n        $sql = array();\n        $sql['select_columns'] = $sqlstr_select . ' * ' . $sqlstr_from\n            . $where_clause;\n        // here, I think we need to still use the COUNT clause, even for\n        // VIEWs, anyway we have a WHERE clause that should limit results\n        $sql['select_count']  = $sqlstr_select . ' COUNT(*) AS `count`'\n            . $sqlstr_from . $where_clause;\n        $sql['delete']        = $sqlstr_delete . $sqlstr_from . $where_clause;\n\n        return $sql;\n    }\n\n    /**\n     * Provides where clause for building SQL query\n     *\n     * @param string $table The table name\n     *\n     * @return string The generated where clause\n     */\n    private function _getWhereClause($table)\n    {\n        // Columns to select\n        $allColumns = $GLOBALS['dbi']->getColumns($GLOBALS['db'], $table);\n        $likeClauses = array();\n        // Based on search type, decide like/regex & '%'/''\n        $like_or_regex   = (($this->_criteriaSearchType == 4) ? 'REGEXP' : 'LIKE');\n        $automatic_wildcard   = (($this->_criteriaSearchType < 3) ? '%' : '');\n        // For \"as regular expression\" (search option 4), LIKE won't be used\n        // Usage example: If user is searching for a literal $ in a regexp search,\n        // he should enter \\$ as the value.\n        $criteriaSearchStringEscaped = PMA_Util::sqlAddSlashes(\n            $this->_criteriaSearchString,\n            ($this->_criteriaSearchType == 4 ? false : true)\n        );\n        // Extract search words or pattern\n        $search_words = (($this->_criteriaSearchType > 2)\n            ? array($criteriaSearchStringEscaped)\n            : explode(' ', $criteriaSearchStringEscaped));\n\n        foreach ($search_words as $search_word) {\n            // Eliminates empty values\n            if (/*overload*/mb_strlen($search_word) === 0) {\n                continue;\n            }\n            $likeClausesPerColumn = array();\n            // for each column in the table\n            foreach ($allColumns as $column) {\n                if (! isset($this->_criteriaColumnName)\n                    || /*overload*/mb_strlen($this->_criteriaColumnName) == 0\n                    || $column['Field'] == $this->_criteriaColumnName\n                ) {\n                    // Drizzle has no CONVERT and all text columns are UTF-8\n                    $column = ((PMA_DRIZZLE)\n                        ? PMA_Util::backquote($column['Field'])\n                        : 'CONVERT(' . PMA_Util::backquote($column['Field'])\n                            . ' USING utf8)');\n                    $likeClausesPerColumn[] = $column . ' ' . $like_or_regex . ' '\n                        . \"'\"\n                        . $automatic_wildcard . $search_word . $automatic_wildcard\n                        . \"'\";\n                }\n            } // end for\n            if (count($likeClausesPerColumn) > 0) {\n                $likeClauses[] = implode(' OR ', $likeClausesPerColumn);\n            }\n        } // end for\n        // Use 'OR' if 'at least one word' is to be searched, else use 'AND'\n        $implode_str  = ($this->_criteriaSearchType == 1 ? ' OR ' : ' AND ');\n        if (empty($likeClauses)) {\n            // this could happen when the \"inside column\" does not exist\n            // in any selected tables\n            $where_clause = ' WHERE FALSE';\n        } else {\n            $where_clause = ' WHERE ('\n                . implode(') ' . $implode_str . ' (', $likeClauses)\n                . ')';\n        }\n        return $where_clause;\n    }\n\n    /**\n     * Displays database search results\n     *\n     * @return string HTML for search results\n     */\n    public function getSearchResults()\n    {\n        $html_output = '';\n        // Displays search string\n        $html_output .= '<br />'\n            . '<table class=\"data\">'\n            . '<caption class=\"tblHeaders\">'\n            . sprintf(\n                __('Search results for \"<i>%s</i>\" %s:'),\n                htmlspecialchars($this->_criteriaSearchString),\n                $this->_searchTypeDescription\n            )\n            . '</caption>';\n\n        $num_search_result_total = 0;\n        $odd_row = true;\n        // For each table selected as search criteria\n        foreach ($this->_criteriaTables as $each_table) {\n            // Gets the SQL statements\n            $newsearchsqls = $this->_getSearchSqls($each_table);\n            // Executes the \"COUNT\" statement\n            $res_cnt = $GLOBALS['dbi']->fetchValue($newsearchsqls['select_count']);\n            $num_search_result_total += $res_cnt;\n            // Gets the result row's HTML for a table\n            $html_output .= $this->_getResultsRow(\n                $each_table, $newsearchsqls, $odd_row, $res_cnt\n            );\n            $odd_row = ! $odd_row;\n        } // end for\n        $html_output .= '</table>';\n        // Displays total number of matches\n        if (count($this->_criteriaTables) > 1) {\n            $html_output .= '<p>';\n            $html_output .= sprintf(\n                _ngettext(\n                    '<b>Total:</b> <i>%s</i> match',\n                    '<b>Total:</b> <i>%s</i> matches',\n                    $num_search_result_total\n                ),\n                $num_search_result_total\n            );\n            $html_output .= '</p>';\n        }\n        return $html_output;\n    }\n\n    /**\n     * Provides search results row with browse/delete links.\n     * (for a table)\n     *\n     * @param string  $each_table    One of the tables on which search was performed\n     * @param array   $newsearchsqls Contains SQL queries\n     * @param bool    $odd_row       For displaying contrasting table rows\n     * @param integer $res_cnt       Number of results found\n     *\n     * @return string HTML row\n     */\n    private function _getResultsRow($each_table, $newsearchsqls, $odd_row, $res_cnt)\n    {\n        $this_url_params = array(\n            'db'    => $GLOBALS['db'],\n            'table' => $each_table,\n            'goto'  => 'db_sql.php',\n            'pos'   => 0,\n            'is_js_confirmed' => 0,\n        );\n        // Start forming search results row\n        $html_output = '<tr class=\"noclick ' . ($odd_row ? 'odd' : 'even') . '\">';\n        // Displays results count for a table\n        $html_output .= '<td>';\n        $html_output .= sprintf(\n            _ngettext(\n                '%1$s match in <strong>%2$s</strong>',\n                '%1$s matches in <strong>%2$s</strong>', $res_cnt\n            ),\n            $res_cnt, htmlspecialchars($each_table)\n        );\n        $html_output .= '</td>';\n        // Displays browse/delete link if result count > 0\n        if ($res_cnt > 0) {\n            $this_url_params['sql_query'] = $newsearchsqls['select_columns'];\n            $browse_result_path = 'sql.php' . PMA_URL_getCommon($this_url_params);\n            $html_output .= '<td><a name=\"browse_search\" class=\"ajax\" href=\"'\n                . $browse_result_path . '\" onclick=\"loadResult(\\''\n                . $browse_result_path . '\\',\\'' . $each_table . '\\',\\''\n                . PMA_URL_getCommon(\n                    array(\n                        'db' => $GLOBALS['db'], 'table' => $each_table\n                    )\n                ) . '\\''\n                . ');return false;\" >'\n                . __('Browse') . '</a></td>';\n            $this_url_params['sql_query'] = $newsearchsqls['delete'];\n            $delete_result_path = 'sql.php' . PMA_URL_getCommon($this_url_params);\n            $html_output .= '<td><a name=\"delete_search\" class=\"ajax\" href=\"'\n                . $delete_result_path . '\" onclick=\"deleteResult(\\''\n                . $delete_result_path . '\\' , \\''\n                . sprintf(\n                    __('Delete the matches for the %s table?'),\n                    htmlspecialchars($each_table)\n                )\n                . '\\');return false;\">'\n                . __('Delete') . '</a></td>';\n        } else {\n            $html_output .= '<td>&nbsp;</td>'\n                . '<td>&nbsp;</td>';\n        }// end if else\n        $html_output .= '</tr>';\n        return $html_output;\n    }\n\n    /**\n     * Provides the main search form's html\n     *\n     * @return string HTML for selection form\n     */\n    public function getSelectionForm()\n    {\n        $html_output = '<a id=\"db_search\"></a>';\n        $html_output .= '<form id=\"db_search_form\"'\n            . ' class=\"ajax lock-page\"'\n            . ' method=\"post\" action=\"db_search.php\" name=\"db_search\">';\n        $html_output .= PMA_URL_getHiddenInputs($GLOBALS['db']);\n        $html_output .= '<fieldset>';\n        // set legend caption\n        $html_output .= '<legend>' . __('Search in database') . '</legend>';\n        $html_output .= '<table class=\"formlayout\">';\n        // inputbox for search phrase\n        $html_output .= '<tr>';\n        $html_output .= '<td>' . __('Words or values to search for (wildcard: \"%\"):')\n            . '</td>';\n        $html_output .= '<td><input type=\"text\"'\n            . ' name=\"criteriaSearchString\" size=\"60\"'\n            . ' value=\"' . htmlspecialchars($this->_criteriaSearchString) . '\" />';\n        $html_output .= '</td>';\n        $html_output .= '</tr>';\n        // choices for types of search\n        $html_output .= '<tr>';\n        $html_output .= '<td class=\"right vtop\">' . __('Find:') . '</td>';\n        $html_output .= '<td>';\n        $choices = array(\n            '1' => __('at least one of the words')\n                . PMA_Util::showHint(\n                    __('Words are separated by a space character (\" \").')\n                ),\n            '2' => __('all words')\n                . PMA_Util::showHint(\n                    __('Words are separated by a space character (\" \").')\n                ),\n            '3' => __('the exact phrase'),\n            '4' => __('as regular expression') . ' '\n                . PMA_Util::showMySQLDocu('Regexp')\n        );\n        // 4th parameter set to true to add line breaks\n        // 5th parameter set to false to avoid htmlspecialchars() escaping\n        // in the label since we have some HTML in some labels\n        $html_output .= PMA_Util::getRadioFields(\n            'criteriaSearchType', $choices, $this->_criteriaSearchType, true, false\n        );\n        $html_output .= '</td></tr>';\n        // displays table names as select options\n        $html_output .= '<tr>';\n        $html_output .= '<td class=\"right vtop\">' . __('Inside tables:') . '</td>';\n        $html_output .= '<td rowspan=\"2\">';\n        $html_output .= '<select name=\"criteriaTables[]\" size=\"6\"'\n            . ' multiple=\"multiple\">';\n        foreach ($this->_tables_names_only as $each_table) {\n            if (in_array($each_table, $this->_criteriaTables)) {\n                $is_selected = ' selected=\"selected\"';\n            } else {\n                $is_selected = '';\n            }\n            $html_output .= '<option value=\"' . htmlspecialchars($each_table) . '\"'\n                . $is_selected . '>'\n                . str_replace(' ', '&nbsp;', htmlspecialchars($each_table))\n                . '</option>';\n        } // end for\n        $html_output .= '</select>';\n        $html_output .= '</td></tr>';\n        // Displays 'select all' and 'unselect all' links\n        $alter_select = '<a href=\"#\" '\n            . 'onclick=\"setSelectOptions(\\'db_search\\','\n            . ' \\'criteriaTables[]\\', true); return false;\">'\n            . __('Select all') . '</a> &nbsp;/&nbsp;';\n        $alter_select .= '<a href=\"#\" '\n            . 'onclick=\"setSelectOptions(\\'db_search\\','\n            . ' \\'criteriaTables[]\\', false); return false;\">'\n            . __('Unselect all') . '</a>';\n        $html_output .= '<tr><td class=\"right vbottom\">'\n            . $alter_select . '</td></tr>';\n        // Inputbox for column name entry\n        $html_output .= '<tr>';\n        $html_output .= '<td class=\"right\">' . __('Inside column:') . '</td>';\n        $html_output .= '<td><input type=\"text\" name=\"criteriaColumnName\" size=\"60\"'\n            . 'value=\"'\n            . (! empty($this->_criteriaColumnName)\n                ? htmlspecialchars($this->_criteriaColumnName)\n                : '')\n            . '\" /></td>';\n        $html_output .= '</tr>';\n        $html_output .= '</table>';\n        $html_output .= '</fieldset>';\n        $html_output .= '<fieldset class=\"tblFooters\">';\n        $html_output .= '<input type=\"submit\" name=\"submit_search\" value=\"'\n            . __('Go') . '\" id=\"buttonGo\" />';\n        $html_output .= '</fieldset>';\n        $html_output .= '</form>';\n        $html_output .= '<div id=\"togglesearchformdiv\">'\n            . '<a id=\"togglesearchformlink\"></a></div>';\n\n        return $html_output;\n    }\n\n    /**\n     * Provides div tags for browsing search results and sql query form.\n     *\n     * @return string div tags\n     */\n    public function getResultDivs()\n    {\n        $html_output = '<!-- These two table-image and table-link elements display'\n            . ' the table name in browse search results  -->';\n        $html_output .= '<div id=\"table-info\">';\n        $html_output .= '<a class=\"item\" id=\"table-link\" ></a>';\n        $html_output .= '</div>';\n        // div for browsing results\n        $html_output .= '<div id=\"browse-results\">';\n        $html_output .= '<!-- this browse-results div is used to load the browse'\n            . ' and delete results in the db search -->';\n        $html_output .= '</div>';\n        $html_output .= '<br class=\"clearfloat\" />';\n        $html_output .= '<div id=\"sqlqueryform\">';\n        $html_output .= '<!-- this sqlqueryform div is used to load the delete'\n            . ' form in the db search -->';\n        $html_output .= '</div>';\n        $html_output .= '<!--  toggle query box link-->';\n        $html_output .= '<a id=\"togglequerybox\"></a>';\n        return $html_output;\n    }\n}\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Handles Database Search\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * Class to handle database search\n *\n * @package PhpMyAdmin\n */\nclass PMA_DbSearch\n{\n    /**\n     * Database name\n     *\n     * @access private\n     * @var string\n     */\n    private $_db;\n    /**\n     * Table Names\n     *\n     * @access private\n     * @var array\n     */\n    private $_tables_names_only;\n    /**\n     * Type of search\n     *\n     * @access private\n     * @var array\n     */\n    private $_searchTypes;\n    /**\n     * Already set search type\n     *\n     * @access private\n     * @var integer\n     */\n    private $_criteriaSearchType;\n    /**\n     * Already set search type's description\n     *\n     * @access private\n     * @var string\n     */\n    private $_searchTypeDescription;\n    /**\n     * Search string/regexp\n     *\n     * @access private\n     * @var string\n     */\n    private $_criteriaSearchString;\n    /**\n     * Criteria Tables to search in\n     *\n     * @access private\n     * @var array\n     */\n    private $_criteriaTables;\n    /**\n     * Restrict the search to this column\n     *\n     * @access private\n     * @var string\n     */\n    private $_criteriaColumnName;\n\n    /**\n     * Public Constructor\n     *\n     * @param string $db Database name\n     */\n    public function __construct($db)\n    {\n        $this->_db = $db;\n        // Sets criteria parameters\n        $this->_setSearchParams();\n    }\n\n    /**\n     * Sets search parameters\n     *\n     * @return void\n     */\n    private function _setSearchParams()\n    {\n        $this->_tables_names_only = $GLOBALS['dbi']->getTables($this->_db);\n\n        $this->_searchTypes = array(\n            '1' => __('at least one of the words'),\n            '2' => __('all words'),\n            '3' => __('the exact phrase'),\n            '4' => __('as regular expression'),\n        );\n\n        if (empty($_REQUEST['criteriaSearchType'])\n            || ! is_string($_REQUEST['criteriaSearchType'])\n            || ! array_key_exists(\n                $_REQUEST['criteriaSearchType'],\n                $this->_searchTypes\n            )\n        ) {\n            $this->_criteriaSearchType = 1;\n            unset($_REQUEST['submit_search']);\n        } else {\n            $this->_criteriaSearchType = (int) $_REQUEST['criteriaSearchType'];\n            $this->_searchTypeDescription\n                = $this->_searchTypes[$_REQUEST['criteriaSearchType']];\n        }\n\n        if (empty($_REQUEST['criteriaSearchString'])\n            || ! is_string($_REQUEST['criteriaSearchString'])\n        ) {\n            $this->_criteriaSearchString = '';\n            unset($_REQUEST['submit_search']);\n        } else {\n            $this->_criteriaSearchString = $_REQUEST['criteriaSearchString'];\n        }\n\n        $this->_criteriaTables = array();\n        if (empty($_REQUEST['criteriaTables'])\n            || ! is_array($_REQUEST['criteriaTables'])\n        ) {\n            unset($_REQUEST['submit_search']);\n        } else {\n            $this->_criteriaTables = array_intersect(\n                $_REQUEST['criteriaTables'], $this->_tables_names_only\n            );\n        }\n\n        if (empty($_REQUEST['criteriaColumnName'])\n            || ! is_string($_REQUEST['criteriaColumnName'])\n        ) {\n            unset($this->_criteriaColumnName);\n        } else {\n            $this->_criteriaColumnName = PMA_Util::sqlAddSlashes(\n                $_REQUEST['criteriaColumnName'], true\n            );\n        }\n    }\n\n    /**\n     * Builds the SQL search query\n     *\n     * @param string $table The table name\n     *\n     * @return array 3 SQL queries (for count, display and delete results)\n     *\n     * @todo    can we make use of fulltextsearch IN BOOLEAN MODE for this?\n     * PMA_backquote\n     * DatabaseInterface::freeResult\n     * DatabaseInterface::fetchAssoc\n     * $GLOBALS['db']\n     * explode\n     * count\n     * strlen\n     */\n    private function _getSearchSqls($table)\n    {\n        // Statement types\n        $sqlstr_select = 'SELECT';\n        $sqlstr_delete = 'DELETE';\n        // Table to use\n        $sqlstr_from = ' FROM '\n            . PMA_Util::backquote($GLOBALS['db']) . '.'\n            . PMA_Util::backquote($table);\n        // Gets where clause for the query\n        $where_clause = $this->_getWhereClause($table);\n        // Builds complete queries\n        $sql = array();\n        $sql['select_columns'] = $sqlstr_select . ' * ' . $sqlstr_from\n            . $where_clause;\n        // here, I think we need to still use the COUNT clause, even for\n        // VIEWs, anyway we have a WHERE clause that should limit results\n        $sql['select_count']  = $sqlstr_select . ' COUNT(*) AS `count`'\n            . $sqlstr_from . $where_clause;\n        $sql['delete']        = $sqlstr_delete . $sqlstr_from . $where_clause;\n\n        return $sql;\n    }\n\n    /**\n     * Provides where clause for building SQL query\n     *\n     * @param string $table The table name\n     *\n     * @return string The generated where clause\n     */\n    private function _getWhereClause($table)\n    {\n        // Columns to select\n        $allColumns = $GLOBALS['dbi']->getColumns($GLOBALS['db'], $table);\n        $likeClauses = array();\n        // Based on search type, decide like/regex & '%'/''\n        $like_or_regex   = (($this->_criteriaSearchType == 4) ? 'REGEXP' : 'LIKE');\n        $automatic_wildcard   = (($this->_criteriaSearchType < 3) ? '%' : '');\n        // For \"as regular expression\" (search option 4), LIKE won't be used\n        // Usage example: If user is searching for a literal $ in a regexp search,\n        // he should enter \\$ as the value.\n        $criteriaSearchStringEscaped = PMA_Util::sqlAddSlashes(\n            $this->_criteriaSearchString,\n            ($this->_criteriaSearchType == 4 ? false : true)\n        );\n        // Extract search words or pattern\n        $search_words = (($this->_criteriaSearchType > 2)\n            ? array($criteriaSearchStringEscaped)\n            : explode(' ', $criteriaSearchStringEscaped));\n\n        foreach ($search_words as $search_word) {\n            // Eliminates empty values\n            if (/*overload*/mb_strlen($search_word) === 0) {\n                continue;\n            }\n            $likeClausesPerColumn = array();\n            // for each column in the table\n            foreach ($allColumns as $column) {\n                if (! isset($this->_criteriaColumnName)\n                    || /*overload*/mb_strlen($this->_criteriaColumnName) == 0\n                    || $column['Field'] == $this->_criteriaColumnName\n                ) {\n                    // Drizzle has no CONVERT and all text columns are UTF-8\n                    $column = ((PMA_DRIZZLE)\n                        ? PMA_Util::backquote($column['Field'])\n                        : 'CONVERT(' . PMA_Util::backquote($column['Field'])\n                            . ' USING utf8)');\n                    $likeClausesPerColumn[] = $column . ' ' . $like_or_regex . ' '\n                        . \"'\"\n                        . $automatic_wildcard . $search_word . $automatic_wildcard\n                        . \"'\";\n                }\n            } // end for\n            if (count($likeClausesPerColumn) > 0) {\n                $likeClauses[] = implode(' OR ', $likeClausesPerColumn);\n            }\n        } // end for\n        // Use 'OR' if 'at least one word' is to be searched, else use 'AND'\n        $implode_str  = ($this->_criteriaSearchType == 1 ? ' OR ' : ' AND ');\n        if (empty($likeClauses)) {\n            // this could happen when the \"inside column\" does not exist\n            // in any selected tables\n            $where_clause = ' WHERE FALSE';\n        } else {\n            $where_clause = ' WHERE ('\n                . implode(') ' . $implode_str . ' (', $likeClauses)\n                . ')';\n        }\n        return $where_clause;\n    }\n\n    /**\n     * Displays database search results\n     *\n     * @return string HTML for search results\n     */\n    public function getSearchResults()\n    {\n        $html_output = '';\n        // Displays search string\n        $html_output .= '<br />'\n            . '<table class=\"data\">'\n            . '<caption class=\"tblHeaders\">'\n            . sprintf(\n                __('Search results for \"<i>%s</i>\" %s:'),\n                htmlspecialchars($this->_criteriaSearchString),\n                $this->_searchTypeDescription\n            )\n            . '</caption>';\n\n        $num_search_result_total = 0;\n        $odd_row = true;\n        // For each table selected as search criteria\n        foreach ($this->_criteriaTables as $each_table) {\n            // Gets the SQL statements\n            $newsearchsqls = $this->_getSearchSqls($each_table);\n            // Executes the \"COUNT\" statement\n            $res_cnt = $GLOBALS['dbi']->fetchValue($newsearchsqls['select_count']);\n            $num_search_result_total += $res_cnt;\n            // Gets the result row's HTML for a table\n            $html_output .= $this->_getResultsRow(\n                $each_table, $newsearchsqls, $odd_row, $res_cnt\n            );\n            $odd_row = ! $odd_row;\n        } // end for\n        $html_output .= '</table>';\n        // Displays total number of matches\n        if (count($this->_criteriaTables) > 1) {\n            $html_output .= '<p>';\n            $html_output .= sprintf(\n                _ngettext(\n                    '<b>Total:</b> <i>%s</i> match',\n                    '<b>Total:</b> <i>%s</i> matches',\n                    $num_search_result_total\n                ),\n                $num_search_result_total\n            );\n            $html_output .= '</p>';\n        }\n        return $html_output;\n    }\n\n    /**\n     * Provides search results row with browse/delete links.\n     * (for a table)\n     *\n     * @param string  $each_table    One of the tables on which search was performed\n     * @param array   $newsearchsqls Contains SQL queries\n     * @param bool    $odd_row       For displaying contrasting table rows\n     * @param integer $res_cnt       Number of results found\n     *\n     * @return string HTML row\n     */\n    private function _getResultsRow($each_table, $newsearchsqls, $odd_row, $res_cnt)\n    {\n        $this_url_params = array(\n            'db'    => $GLOBALS['db'],\n            'table' => $each_table,\n            'goto'  => 'db_sql.php',\n            'pos'   => 0,\n            'is_js_confirmed' => 0,\n        );\n        // Start forming search results row\n        $html_output = '<tr class=\"noclick ' . ($odd_row ? 'odd' : 'even') . '\">';\n        // Displays results count for a table\n        $html_output .= '<td>';\n        $html_output .= sprintf(\n            _ngettext(\n                '%1$s match in <strong>%2$s</strong>',\n                '%1$s matches in <strong>%2$s</strong>', $res_cnt\n            ),\n            $res_cnt, htmlspecialchars($each_table)\n        );\n        $html_output .= '</td>';\n        // Displays browse/delete link if result count > 0\n        if ($res_cnt > 0) {\n            $this_url_params['sql_query'] = $newsearchsqls['select_columns'];\n            $browse_result_path = 'sql.php' . PMA_URL_getCommon($this_url_params);\n            $html_output .= '<td><a name=\"browse_search\" class=\"ajax\" href=\"'\n                . $browse_result_path . '\" onclick=\"loadResult(\\''\n                . $browse_result_path . '\\',\\''\n                . PMA_escapeJsString(htmlspecialchars($each_table)) . '\\',\\''\n                . PMA_URL_getCommon(\n                    array(\n                        'db' => $GLOBALS['db'], 'table' => $each_table\n                    )\n                ) . '\\''\n                . ');return false;\" >'\n                . __('Browse') . '</a></td>';\n            $this_url_params['sql_query'] = $newsearchsqls['delete'];\n            $delete_result_path = 'sql.php' . PMA_URL_getCommon($this_url_params);\n            $html_output .= '<td><a name=\"delete_search\" class=\"ajax\" href=\"'\n                . $delete_result_path . '\" onclick=\"deleteResult(\\''\n                . $delete_result_path . '\\' , \\''\n                . sprintf(\n                    __('Delete the matches for the %s table?'),\n                    htmlspecialchars($each_table)\n                )\n                . '\\');return false;\">'\n                . __('Delete') . '</a></td>';\n        } else {\n            $html_output .= '<td>&nbsp;</td>'\n                . '<td>&nbsp;</td>';\n        }// end if else\n        $html_output .= '</tr>';\n        return $html_output;\n    }\n\n    /**\n     * Provides the main search form's html\n     *\n     * @return string HTML for selection form\n     */\n    public function getSelectionForm()\n    {\n        $html_output = '<a id=\"db_search\"></a>';\n        $html_output .= '<form id=\"db_search_form\"'\n            . ' class=\"ajax lock-page\"'\n            . ' method=\"post\" action=\"db_search.php\" name=\"db_search\">';\n        $html_output .= PMA_URL_getHiddenInputs($GLOBALS['db']);\n        $html_output .= '<fieldset>';\n        // set legend caption\n        $html_output .= '<legend>' . __('Search in database') . '</legend>';\n        $html_output .= '<table class=\"formlayout\">';\n        // inputbox for search phrase\n        $html_output .= '<tr>';\n        $html_output .= '<td>' . __('Words or values to search for (wildcard: \"%\"):')\n            . '</td>';\n        $html_output .= '<td><input type=\"text\"'\n            . ' name=\"criteriaSearchString\" size=\"60\"'\n            . ' value=\"' . htmlspecialchars($this->_criteriaSearchString) . '\" />';\n        $html_output .= '</td>';\n        $html_output .= '</tr>';\n        // choices for types of search\n        $html_output .= '<tr>';\n        $html_output .= '<td class=\"right vtop\">' . __('Find:') . '</td>';\n        $html_output .= '<td>';\n        $choices = array(\n            '1' => __('at least one of the words')\n                . PMA_Util::showHint(\n                    __('Words are separated by a space character (\" \").')\n                ),\n            '2' => __('all words')\n                . PMA_Util::showHint(\n                    __('Words are separated by a space character (\" \").')\n                ),\n            '3' => __('the exact phrase'),\n            '4' => __('as regular expression') . ' '\n                . PMA_Util::showMySQLDocu('Regexp')\n        );\n        // 4th parameter set to true to add line breaks\n        // 5th parameter set to false to avoid htmlspecialchars() escaping\n        // in the label since we have some HTML in some labels\n        $html_output .= PMA_Util::getRadioFields(\n            'criteriaSearchType', $choices, $this->_criteriaSearchType, true, false\n        );\n        $html_output .= '</td></tr>';\n        // displays table names as select options\n        $html_output .= '<tr>';\n        $html_output .= '<td class=\"right vtop\">' . __('Inside tables:') . '</td>';\n        $html_output .= '<td rowspan=\"2\">';\n        $html_output .= '<select name=\"criteriaTables[]\" size=\"6\"'\n            . ' multiple=\"multiple\">';\n        foreach ($this->_tables_names_only as $each_table) {\n            if (in_array($each_table, $this->_criteriaTables)) {\n                $is_selected = ' selected=\"selected\"';\n            } else {\n                $is_selected = '';\n            }\n            $html_output .= '<option value=\"' . htmlspecialchars($each_table) . '\"'\n                . $is_selected . '>'\n                . str_replace(' ', '&nbsp;', htmlspecialchars($each_table))\n                . '</option>';\n        } // end for\n        $html_output .= '</select>';\n        $html_output .= '</td></tr>';\n        // Displays 'select all' and 'unselect all' links\n        $alter_select = '<a href=\"#\" '\n            . 'onclick=\"setSelectOptions(\\'db_search\\','\n            . ' \\'criteriaTables[]\\', true); return false;\">'\n            . __('Select all') . '</a> &nbsp;/&nbsp;';\n        $alter_select .= '<a href=\"#\" '\n            . 'onclick=\"setSelectOptions(\\'db_search\\','\n            . ' \\'criteriaTables[]\\', false); return false;\">'\n            . __('Unselect all') . '</a>';\n        $html_output .= '<tr><td class=\"right vbottom\">'\n            . $alter_select . '</td></tr>';\n        // Inputbox for column name entry\n        $html_output .= '<tr>';\n        $html_output .= '<td class=\"right\">' . __('Inside column:') . '</td>';\n        $html_output .= '<td><input type=\"text\" name=\"criteriaColumnName\" size=\"60\"'\n            . 'value=\"'\n            . (! empty($this->_criteriaColumnName)\n                ? htmlspecialchars($this->_criteriaColumnName)\n                : '')\n            . '\" /></td>';\n        $html_output .= '</tr>';\n        $html_output .= '</table>';\n        $html_output .= '</fieldset>';\n        $html_output .= '<fieldset class=\"tblFooters\">';\n        $html_output .= '<input type=\"submit\" name=\"submit_search\" value=\"'\n            . __('Go') . '\" id=\"buttonGo\" />';\n        $html_output .= '</fieldset>';\n        $html_output .= '</form>';\n        $html_output .= '<div id=\"togglesearchformdiv\">'\n            . '<a id=\"togglesearchformlink\"></a></div>';\n\n        return $html_output;\n    }\n\n    /**\n     * Provides div tags for browsing search results and sql query form.\n     *\n     * @return string div tags\n     */\n    public function getResultDivs()\n    {\n        $html_output = '<!-- These two table-image and table-link elements display'\n            . ' the table name in browse search results  -->';\n        $html_output .= '<div id=\"table-info\">';\n        $html_output .= '<a class=\"item\" id=\"table-link\" ></a>';\n        $html_output .= '</div>';\n        // div for browsing results\n        $html_output .= '<div id=\"browse-results\">';\n        $html_output .= '<!-- this browse-results div is used to load the browse'\n            . ' and delete results in the db search -->';\n        $html_output .= '</div>';\n        $html_output .= '<br class=\"clearfloat\" />';\n        $html_output .= '<div id=\"sqlqueryform\">';\n        $html_output .= '<!-- this sqlqueryform div is used to load the delete'\n            . ' form in the db search -->';\n        $html_output .= '</div>';\n        $html_output .= '<!--  toggle query box link-->';\n        $html_output .= '<a id=\"togglequerybox\"></a>';\n        return $html_output;\n    }\n}\n"], "filenames": ["libraries/DbSearch.class.php"], "buggy_code_start_loc": [347], "buggy_code_end_loc": [348], "fixing_code_start_loc": [347], "fixing_code_end_loc": [349], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.0.x before 4.0.10.13, 4.4.x before 4.4.15.3, and 4.5.x before 4.5.4 allow remote authenticated users to inject arbitrary web script or HTML via a (1) table name, (2) SET value, (3) search query, or (4) hostname in a Location header.", "other": {"cve": {"id": "CVE-2016-2040", "sourceIdentifier": "cve@mitre.org", "published": "2016-02-20T01:59:03.297", "lastModified": "2018-10-30T16:27:35.843", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.0.x before 4.0.10.13, 4.4.x before 4.4.15.3, and 4.5.x before 4.5.4 allow remote authenticated users to inject arbitrary web script or HTML via a (1) table name, (2) SET value, (3) search query, or (4) hostname in a Location header."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de XSS en phpMyAdmin 4.0.x en versiones anteriores a 4.0.10.13, 4.4.x en versiones anteriores a 4.4.15.3 y 4.5.x en versiones anteriores a 4.5.4 permiten a usuarios remotos autenticados inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de (1) un nombre de tabla, (2) un valor SET, (3) una consulta de b\u00fasqueda o (4) un nombre de host en una cabecera Location."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:22:*:*:*:*:*:*:*", "matchCriteriaId": "253C303A-E577-4488-93E6-68A8DD942C38"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:23:*:*:*:*:*:*:*", "matchCriteriaId": "E79AB8DD-C907-4038-A931-1A5A4CFB6A5B"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:42.1:*:*:*:*:*:*:*", "matchCriteriaId": "4863BE36-D16A-4D75-90D9-FD76DB5B48B7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.1:*:*:*:*:*:*:*", "matchCriteriaId": "A10BC294-9196-425F-9FB0-B1625465B47F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.2:*:*:*:*:*:*:*", "matchCriteriaId": "03117DF1-3BEC-4B8D-AD63-DBBDB2126081"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "2F06DC95-76B1-4E24-A55F-1358A25ED0E5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "B406A721-0075-46C8-A920-3C9602AD667B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "C8AE4653-1911-4A58-85DD-51E0578E788E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "2CA76CB4-6167-446A-8D4F-6D5B38046334"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "6325E2AE-BB86-4953-AA9E-0433C00B096E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.1:*:*:*:*:*:*:*", "matchCriteriaId": "3C54B828-8B23-4C62-907E-8EE7E757B721"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.2:*:*:*:*:*:*:*", "matchCriteriaId": "02DD18C8-172B-41CD-87DD-58BDEC0D9418"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.3:*:*:*:*:*:*:*", "matchCriteriaId": "10666E30-D98A-47A9-881A-B281066F0EC8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.4:*:*:*:*:*:*:*", "matchCriteriaId": "3993826B-CA66-4BC2-8E1B-06CF9230B214"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.5:*:*:*:*:*:*:*", "matchCriteriaId": "14928F51-761E-4FCA-B13C-A11530C7FC46"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.6:*:*:*:*:*:*:*", "matchCriteriaId": "DB761644-20F5-4E0D-B301-7809EAECA813"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.7:*:*:*:*:*:*:*", "matchCriteriaId": "896439D0-6C98-44A6-8C9D-0D57D57782D5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.8:*:*:*:*:*:*:*", "matchCriteriaId": "978B828C-1FCB-4386-B685-5BEE5A8A500C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.9:*:*:*:*:*:*:*", "matchCriteriaId": "51A3261B-23BE-42D7-8A52-AE2E8C274A3D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.10:*:*:*:*:*:*:*", "matchCriteriaId": "F0B7EA51-27EC-4884-8D60-FB9477D2B91A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.11:*:*:*:*:*:*:*", "matchCriteriaId": "D6C9F2CC-778B-4604-B463-7A1D3FB8B9C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.12:*:*:*:*:*:*:*", "matchCriteriaId": "4B20C44D-0EF1-48F2-B0AA-C8FF0BD9E252"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "13CD0228-728B-437A-84C1-BD7AFA52FFB5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "DFF55485-9892-4E7B-AEE0-017E61EAA7C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "6100FE3E-0A31-4B55-90F2-90AF765A8EB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "FBAAC8D9-AAA5-487C-B4AA-84BAE5DB109E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "5E06B1D3-29B4-45B7-B81F-C864AF579011"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "6B2E3923-0E2B-411A-B091-088E6FF050D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "1848C748-804D-4FE4-AB9C-B1BF9E58A19C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "12296322-DFAD-4B36-83EC-D01BF5DF7F2A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "EA321C14-C8F4-41FC-B601-2F646064ABBF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "54DBCF86-0CE8-46C4-B2E7-E3224765CCFE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "1BF3DBC5-7020-48D0-ADEA-E71776DB2285"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "317F952E-5F12-4ED3-8FA3-FC1106B50F85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "87B97F98-C0A7-4D9E-8333-7EE9EC456A12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "7A1E753D-5653-4D7A-8E41-6C02511EBFCE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "417230C7-0EC2-49F4-B810-A8AE84A302AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "103FEAB1-194E-4CEF-935A-4DBCCA298205"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13.1:*:*:*:*:*:*:*", "matchCriteriaId": "C5814003-9FF8-4F8E-9D90-A2BBB80B8451"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.14.1:*:*:*:*:*:*:*", "matchCriteriaId": "16D28B77-9353-4259-9299-30638A78CCD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15:*:*:*:*:*:*:*", "matchCriteriaId": "C022292B-6E06-4328-842F-135A872D22AF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.1:*:*:*:*:*:*:*", "matchCriteriaId": "F15F00FB-BB9B-4D54-B198-0A74D418B8DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.2:*:*:*:*:*:*:*", "matchCriteriaId": "DC10AF20-7B65-4FAE-A2AD-783867D60A8D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.3:*:*:*:*:*:*:*", "matchCriteriaId": "4EB7190C-0401-4E2E-B15F-4CFC79D5A4E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "A4D7AAF1-64FF-40C9-90B2-DEC814157372"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "96D529F5-8870-4934-BCD8-E49095D21224"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "296EB2FA-FCAD-4BD5-A015-62765407AFE5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "4DBD0DC7-64D0-42B1-8EEE-73A0214680F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "A6A15D1E-83ED-47EC-B17C-E6BCC49DE83D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "4112ACFF-D40E-45BE-9307-F710E7B41ECD"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176483.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176739.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00028.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00049.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.debian.org/security/2016/dsa-3627", "source": "cve@mitre.org"}, {"url": "http://www.phpmyadmin.net/home_page/security/PMASA-2016-3.php", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/75a55824012406a08c4debf5ddb7ae41c32a7dbc", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/aca42efa01917cc0fe8cfdb2927a6399ca1742f2", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/edffb52884b09562490081c3b8666ef46c296418", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/75a55824012406a08c4debf5ddb7ae41c32a7dbc"}}