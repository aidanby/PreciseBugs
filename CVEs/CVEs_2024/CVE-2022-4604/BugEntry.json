{"buggy_code": ["<?php\n/*\nPlugin Name: English WordPress Admin\nPlugin URI: http://wordpress.org/plugins/english-wp-admin\nDescription: Lets users change their administration language to English\nVersion: 1.5.1\nAuthor: khromov\nAuthor URI: http://snippets.khromov.se\nGitHub Plugin URI: khromov/wp-english-wp-admin\nLicense: GPL2\n*/\n\n/**\n * Class Admin_Custom_Language\n */\nclass Admin_Custom_Language\n{\n\tconst SLUG = 'english-wp-admin';\n\n\t/* Constructor for adding hooks */\n\tfunction __construct()\n\t{\n\t\t//Locale filter\n\t\tadd_filter('locale', array(&$this, 'set_locale'));\n\n\t\t//Adds admin bar menu\n\t\tadd_action('admin_bar_menu', array(&$this, 'admin_bar'), 31);\n\t\tadd_action('admin_head', array($this, 'admin_css'));\n\n\t\t//Init action\n\t\tadd_action('init', array($this, 'init'));\n\t}\n\n\n\tfunction init()\n\t{\n\t\t//Add non-persistent cache group\n\t\twp_cache_add_non_persistent_groups(self::SLUG);\n\n\t\t//Registers GET listener to toggle setting\n\t\t$this->register_endpoints();\n\n\t\t//Message if WPML installed\n\t\tif($this->wpml_installed()) {\n\t\t\tadd_action( 'admin_notices', array($this, 'admin_notices'));\n\t\t}\n\t}\n\n\t/**\n\t * This function is responsible fo setting the locale via the locale filter\n\t *\n\t * @param $lang - the current locale\n\t * @return string - the locale that should be used\n\t */\n\tfunction set_locale($lang)\n\t{\n\t\t//If cookie is set and enabled, and we are not doing frontend AJAX, and we are not on a whitelisted URL, and this is not a WooCommerce action, we should switch the locale\n\t\tif($this->english_admin_enabled() && !$this->request_is_frontend_ajax() && !$this->in_url_whitelist() && !$this->woocommerce_action())\n\t\t{\n\t\t\t//Switch locale if we are on an admin page\n\t\t\tif(is_admin()) {\n\t\t\t\treturn 'en_US';\n\t\t\t}\n\t\t}\n\n\t\t//Default return\n\t\treturn $lang;\n\t}\n\n\t/**\n\t * Attempt to identify WooCommerce actions (like sending emails)\n\t *\n\t * @return bool\n\t */\n\tfunction woocommerce_action()\n\t{\n\t\tif(isset($_POST['wc_order_action'])) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * This plugin listens for the GET variable that toggles the current setting\n\t */\n\tfunction register_endpoints()\n\t{\n\t\t//We're in admin\n\t\tif(is_admin()) {\n\t\t\t//Is the GET variable set?\n\t\t\tif(isset($_GET['admin_custom_language_toggle'])) {\n\t\t\t\t//Cast variable\n\t\t\t\t$cookie_value = intval($_GET['admin_custom_language_toggle']);\n\n\t\t\t\t//Set cookie\n\t\t\t\t$cookie_value === 1 ? $this->set_cookie(1) : $this->set_cookie(0);\n\n\t\t\t\tif(isset($_GET['admin_custom_language_return_url'])) {\n\t\t\t\t\twp_redirect(urldecode($_GET['admin_custom_language_return_url']));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\twp_redirect(admin_url());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Whitelist some URL:s from translation.\n\t *\n\t * update-core.php is whitelisted because translation updates do not work properly if you change locale on that screen.\n\t *\n\t * options-general.php is whitelisted due to Trac issue #31318 and #29362\n\t * https://core.trac.wordpress.org/ticket/31318\n\t * https://core.trac.wordpress.org/ticket/29362\n\t *\n\t * @return bool\n\t */\n\tfunction in_url_whitelist()\n\t{\n\t\t//Get path of URL\n\t\t//TODO: Perhaps using parse_url() would be better?\n\t\t$request_uri = isset($_SERVER['REQUEST_URI']) ? trim($_SERVER['REQUEST_URI']) : '';\n\n\t\t//Bail early if we are cached\n\t\tif(($val = wp_cache_get($request_uri, self::SLUG)) !== false) {\n\t\t\treturn ($val === 'yes') ? true : false;\n\t\t}\n\n\t\t$whitelisted_regex = apply_filters('english_wordpress_admin_whitelist', array(\n\t\t\t\t'.*\\/wp-admin\\/update-core.php$',\n\t\t\t\t'.*\\/wp-admin\\/options-general.php$',\n\t\t\t\t'.*\\/wp-admin\\/options-general.php\\?settings-updated=true$',\n\t\t));\n\n\t\t//Attempt to match a whitelisted URL.\n\t\tforeach($whitelisted_regex as $whitelisted_regex_single)\n\t\t{\n\t\t\tif(preg_match(\"/{$whitelisted_regex_single}/\", $request_uri)) {\n\t\t\t\t//Cache result for this URL in non-persistent Object Cache\n\t\t\t\twp_cache_set($request_uri, \"yes\", self::SLUG);\n\n\t\t\t\t//Return true\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t//Cache result for this URL in non-persistent Object Cache\n\t\twp_cache_set($request_uri, \"no\", self::SLUG);\n\n\t\t//Nothing matched, admin URL not in whitelist\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if a version number is larger than or equal to a certain version\n\t *\n\t * @param $version\n\t * @return bool\n\t */\n\tfunction is_version($version)\n\t{\n\t\tglobal $wp_version;\n\t\treturn version_compare($wp_version, $version, '>=');\n\t}\n\n\t/**\n\t * Sets the cookie. (1 year expiry)\n\t *\n\t * @param string $value\n\t */\n\tfunction set_cookie($value = '1')\n\t{\n\t\tsetcookie('wordpress_admin_default_language_'. COOKIEHASH, $value, strtotime('+1 year'), COOKIEPATH, COOKIE_DOMAIN, false);\n\t}\n\n\t/**\n\t * Check so that we are not doing a frontend AJAX request\n\t *\n\t * @return bool\n\t */\n\tfunction request_is_frontend_ajax()\n\t{\n\t\t$script_filename = isset($_SERVER['SCRIPT_FILENAME']) ? $_SERVER['SCRIPT_FILENAME'] : '';\n\n\t\t//Try to figure out if frontend AJAX request... If we are DOING_AJAX; let's look closer\n\t\tif((defined('DOING_AJAX') && DOING_AJAX)) {\n\t\t\t//From wp-includes/functions.php, wp_get_referer() function.\n\t\t\t//Required to fix: https://core.trac.wordpress.org/ticket/25294\n\t\t\t$ref = '';\n\t\t\tif ( ! empty( $_REQUEST['_wp_http_referer'] ) ) {\n\t\t\t\t$ref = wp_unslash( $_REQUEST['_wp_http_referer'] );\n\t\t\t}\n\t\t\telseif ( ! empty( $_SERVER['HTTP_REFERER'] ) ) {\n\t\t\t\t$ref = wp_unslash( $_SERVER['HTTP_REFERER'] );\n\t\t\t}\n\n\n\t\t\t//If referer does not contain admin URL and we are using the admin-ajax.php endpoint, this is likely a frontend AJAX request\n\t\t\tif(((strpos($ref, admin_url()) === false) && (basename($script_filename) === 'admin-ajax.php'))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t//If no checks triggered, we end up here - not an AJAX request.\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if WordPress has a non-english language configured\n\t *\n\t * @return bool True if we don't have any additional language set in WPLANG\n\t */\n\tfunction english_install_only()\n\t{\n\t\tif($this->wpml_installed()) {\n\t\t\treturn false;\n\t\t}\n\n\t\t//If using WPLANG, otherwise check DB\n\t\tif(defined('WPLANG')) {\n\t\t\treturn (WPLANG === 'en_US' || trim(WPLANG) === '') ? true : false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//If language not en_US and not empty in database\n\t\t\tif(function_exists('get_bloginfo') && (get_bloginfo('language') !== 'en_US' || trim(get_bloginfo('language')) !== '') ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if WPML is installed\n\t *\n\t * @return bool\n\t */\n\tfunction wpml_installed()\n\t{\n\t\treturn defined('ICL_LANGUAGE_CODE');\n\t}\n\n\t/**\n\t * Adds a menu item to the admin bar via the admin_bar_menu hook\n\t *\n\t * @param $wp_admin_bar WP_Admin_Bar object\n\t */\n\tfunction admin_bar($wp_admin_bar)\n\t{\n\t\t//We're in admin and this is not a WPML install\n\t\tif(is_admin() && apply_filters('english_wordpress_admin_show_admin_bar', true) === true) {\n\t\t\t//Sets up the toggle link\n\t\t\tif($this->in_url_whitelist()) {\n\t\t\t\t$toggle_href =  plugin_dir_url( __FILE__ ) . 'readme.txt';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$toggle_href = admin_url('?admin_custom_language_toggle=' . ($this->english_admin_enabled() ? '0' : '1') . '&admin_custom_language_return_url=' . urlencode((is_ssl() ? 'https' : 'http') . '://' . $_SERVER[\"HTTP_HOST\"] . $_SERVER[\"REQUEST_URI\"]));\n\t\t\t}\n\n\t\t\t//Create toggle title\n\t\t\tif($this->in_url_whitelist()) {\n\t\t\t\t$toggle_title = __('This admin screen cannot be translated. For more information, see the readme.', self::SLUG);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$toggle_title = ($this->english_admin_enabled() ? __('Switch to native', self::SLUG) : __('Switch to English', self::SLUG));\n\t\t\t}\n\n\t\t\t//Add main menu\n\t\t\t$main_bar = array(\n\t\t\t\t\t'id' => 'admin-custom-language-icon',\n\t\t\t\t\t'title' => $this->admin_bar_title(),\n\t\t\t\t\t'href' => $this->in_url_whitelist() ? '#' : $toggle_href,\n\t\t\t\t\t'meta' => array(\n\t\t\t\t\t\t\t'class' => 'admin-custom-language-icon'\n\t\t\t\t\t)\n\t\t\t);\n\n\t\t\t//Add sub menu\n\t\t\t$main_bar_sub = array(\n\t\t\t\t\t'id' => 'admin-custom-language-icon-submenu',\n\t\t\t\t\t'title' => $toggle_title,\n\t\t\t\t\t'href' => $toggle_href,\n\t\t\t\t\t'parent' => 'admin-custom-language-icon',\n\t\t\t\t\t'meta' => array(\n\t\t\t\t\t\t\t'target' => $this->in_url_whitelist() ? '_blank' : '_self'\n\t\t\t\t\t)\n\t\t\t);\n\n\t\t\t$wp_admin_bar->add_node($main_bar);\n\t\t\t$wp_admin_bar->add_node($main_bar_sub);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the admin bar title\n\t *\n\t * @return string\n\t */\n\tfunction admin_bar_title()\n\t{\n\t\tif($this->in_url_whitelist()) {\n\t\t\treturn '<span style=\"color: yellow;\">' . get_locale() . '</span>';\n\t\t}\n\t\telse {\n\t\t\treturn get_locale();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the cookie settin value, or null if there is no cookie set\n\t *\n\t * @return int|null\n\t */\n\tfunction cookie_setting_value()\n\t{\n\t\tif(defined('COOKIEHASH') && isset($_COOKIE['wordpress_admin_default_language_'. COOKIEHASH])) {\n\t\t\treturn intval($_COOKIE['wordpress_admin_default_language_'. COOKIEHASH]);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the functionality is enabled\n\t *\n\t * @return bool True if we should show the english admin\n\t */\n\tfunction english_admin_enabled()\n\t{\n\t\treturn $this->cookie_setting_value() === 1 ? true : false;\n\t}\n\n\t/**\n\t * Adds a little icon to the admin bar for later WordPress versions\n\t */\n\tfunction admin_css()\n\t{\n\t\tif($this->wp_version_at_least('3.8')) {\n\t\t\t?>\n\t\t\t<style type=\"text/css\">\n\t\t\t\t#wpadminbar #wp-admin-bar-admin-custom-language-icon > .ab-item:before\n\t\t\t\t{\n\t\t\t\t\t/* admin globe - content:\"\\f319\"; */\n\t\t\t\t\t/* translate icon */\n\t\t\t\t\tcontent: \"\\f326\";\n\t\t\t\t\ttop: 2px;\n\t\t\t\t}\n\t\t\t</style>\n      <?php\n\t\t}\n\t}\n\n\t/**\n\t * Version checker function\n\t *\n\t * @param $version string version we want to check against the current one\n\t * @return bool True if the current WP version is at least as new as $version\n\t */\n\tfunction wp_version_at_least($version)\n\t{\n\t\tif(version_compare(get_bloginfo('version'), $version, '>=')) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/*\n\t * Handles admin notices\n\t */\n\tfunction admin_notices()\n\t{\n\t\t?>\n\t\t<div class=\"error\">\n\t\t\t<p><?php _e( \"<strong>English Wordpress Admin Error</strong> <br/>You only have English language installed, or you are using WPML. If you only have English installed, please install another language before using this plugin. <a href='http://codex.wordpress.org/Installing_WordPress_in_Your_Language' target='_blank'>Read more (WordPress codex)</a> <br/> If you are using WPML, you do not need this plugin. WPML already provides a language switcher that can be configured under the \\\"Profile\\\" tab.\", 'admin-custom-language' ); ?></p>\n\t\t</div>\n\t\t<?php\n\t}\n}\n\n/** Initialize plugin **/\n$english_wordpress_admin_plugin = new Admin_Custom_Language();", "=== English WordPress Admin ===\nContributors: khromov\nTags: english, wpml, multilanguage\nRequires at least: 3.5\nTested up to: 5.3\nStable tag: 1.5.1\nLicense: GPL2\n\nLets users change their administration language to English\n\n== Description ==\nThis plugin lets users change their administration language to native English (en_US locale).\n\nThis is useful during site development and for people more accustomed to the english administration panel, even if your site\nis in another language. (The frontend will still use the native language.)\n\nThis plugin is fully compatible with WooCommerce and can correctly identify and translate frontend / backend AJAX requests.\nIf you are using this plugin with Advanced Custom Fields, please move the english-wp-admin.php file to the /wp-content/mu-plugins/ folder\n(create it if it does not exist). This is an ACF limitation.\n\nThis plugin is developer friendly and small (~200 lines of code). Check the FAQ for customization examples.\n\n**Usage**\n\n*Basic usage*\n\nOnce you have installed and activated the plugin, navigate to any admin page and check the top admin bar. A button will\ndisplay your current locale. If you click on it, the admin will change to English locale (en_US). To switch back,\npress the button again.\n\n== Requirements ==\n* PHP 5.3 or higher\n\n== Translations ==\n* None\n\n== Installation ==\n1. Upload the `english-wp-admin` folder to `/wp-content/plugins/`\n2. Activate the plugin (English WordPress Admin) through the 'Plugins' menu in WordPress\n3. Use the functionality via the admin bar\n\n== Frequently Asked Questions ==\n\n= Some plugins are still in the native language when switching to English =\n\nTo fix this, move the file /wp-content/plugins/english-wp-admin/english-wp-admin.php to /wp-content/mu-plugins/\n\nThis will ensure this plugin is loaded before all other plugins and that it sets the correct language. This is a WordPress restriction.\n\n= Why are some URLs whitelisted? =\n\nupdate-core.php is whitelisted because translation updates do not work properly if you change locale on that screen.\n\noptions-general.php is whitelisted due to Trac issue #31318 and #29362\n\nhttps://core.trac.wordpress.org/ticket/31318\nhttps://core.trac.wordpress.org/ticket/29362\n\n= How do I whitelist a specific page from being translated =\n\nUse the english_wordpress_admin_whitelist filter. It takes a preg-style regular expression.\n\n    /** Whitelist /wp-admin/options-general.php?page=my_plugin **/\n    add_filter('english_wordpress_admin_whitelist', function($whitelisted_urls)\n    {\n        $whitelisted_urls[] = '.*\\/wp-admin\\/options-general.php\\?page=my_page$';\n        return $whitelisted_urls;\n    });\n\n= How do I prevent regular users from having the option of changing the admin language? =\n\nIf you only want the first admin user to have this option, put this code in your themes function.php file:\n\n    /** Only allow the admin user to change the admin language **/\n    if(get_current_user_id() === 1) {\n        add_filter('english_wordpress_admin_show_admin_bar', '__return_true');\n    }\n    else {\n        add_filter('english_wordpress_admin_show_admin_bar', '__return_false');\n    }\n\n= How do I automatically enable this plugin for certain users? =\n\nUse the snippet below to have admins always use the admin page in english.\n\n    /** Enable the plugin automatically for admin users */\n    if(current_user_can('manage_options')) {\n        global $english_wordpress_admin_plugin;\n        $english_wordpress_admin_plugin->set_cookie(1);\n        add_filter('english_wordpress_admin_show_admin_bar', '__return_false');\n    }\n\n= This plugin does not solve my needs =\n\nYou can leave feature requests in the plugin support forum.\n\n== Screenshots ==\n\n1. The plugin admin bar\n\n== Changelog ==\n\n= 1.5.1 =\n\n* Fix for PHP 5.2\n* Fix for whitelisting edge case\n* Code formatting touchup\n\n= 1.5.0 =\n\n* Fixed a bug where some plugin options pages had the native language despite switching to english\n* More robust AJAX detection (properly separates frontend / backend AJAX)\n* Better notifications whe visiting a whitelisted URL\n* Performance fixes (Utilizing Object Cache)\n* Improved ACF, WooCommerce and WPML support\n\n= 1.4.1 =\n* Minor tweaks\n\n= 1.4 =\n* Rewritten and improved frontend AJAX detection\n* Added proper WPML detection\n* Fixed broken language auto-update\n* Fixed WooCommerce emails sent in wrong language\n* Fixed bug in Settings > General admin page detection\n* GitHub updater support\n* Introduced URL whitelist (with new filter: english_wordpress_admin_whitelist)\n\n= 1.4 =\n* Rewritten and improved frontend AJAX detection\n* Added proper WPML detection\n* Fixed broken language auto-update\n* Fixed WooCommerce emails sent in wrong language\n* Fixed bug in Settings > General admin page detection\n* GitHub updater support\n* Introduced URL whitelist (with new filter: english_wordpress_admin_whitelist)\n\n= 1.3.2 =\n* Blacklisted changing language on Settings > General admin page until https://core.trac.wordpress.org/ticket/29362#comment:5 is fixed.\n\n= 1.3.1 =\n* Fixed an edge case where the \"You only have English language installed.\" \nmessage would appear erroneously.\n\n= 1.3.0 =\n* When changing language, you are now sent back to the page you were originally on instead of being reverted to the dashboard.\n* Fixed bug with disappearing top menu icon\n* Added notice for WPML users\n\n= 1.2.1 =\n* Fix notice level error when COOKIEHASH is not defined (Certain MultiSite installations)\n\n= 1.1 =\n* Fix notice level error when WPLANG is not defined\n* Added notification for sites that only have English language installed\n\n= 1.0 =\n* Initial release\n"], "fixing_code": ["<?php\n/*\nPlugin Name: English WordPress Admin\nPlugin URI: http://wordpress.org/plugins/english-wp-admin\nDescription: Lets users change their administration language to English\nVersion: 1.5.2\nAuthor: khromov\nAuthor URI: http://snippets.khromov.se\nGitHub Plugin URI: khromov/wp-english-wp-admin\nLicense: GPL2\n*/\n\n/**\n * Class Admin_Custom_Language\n */\nclass Admin_Custom_Language\n{\n\tconst SLUG = 'english-wp-admin';\n\n\t/* Constructor for adding hooks */\n\tfunction __construct()\n\t{\n\t\t//Locale filter\n\t\tadd_filter('locale', array(&$this, 'set_locale'));\n\n\t\t//Adds admin bar menu\n\t\tadd_action('admin_bar_menu', array(&$this, 'admin_bar'), 31);\n\t\tadd_action('admin_head', array($this, 'admin_css'));\n\n\t\t//Init action\n\t\tadd_action('init', array($this, 'init'));\n\t}\n\n\n\tfunction init()\n\t{\n\t\t//Add non-persistent cache group\n\t\twp_cache_add_non_persistent_groups(self::SLUG);\n\n\t\t//Registers GET listener to toggle setting\n\t\t$this->register_endpoints();\n\n\t\t//Message if WPML installed\n\t\tif($this->wpml_installed()) {\n\t\t\tadd_action( 'admin_notices', array($this, 'admin_notices'));\n\t\t}\n\t}\n\n\t/**\n\t * This function is responsible fo setting the locale via the locale filter\n\t *\n\t * @param $lang - the current locale\n\t * @return string - the locale that should be used\n\t */\n\tfunction set_locale($lang)\n\t{\n\t\t//If cookie is set and enabled, and we are not doing frontend AJAX, and we are not on a whitelisted URL, and this is not a WooCommerce action, we should switch the locale\n\t\tif($this->english_admin_enabled() && !$this->request_is_frontend_ajax() && !$this->in_url_whitelist() && !$this->woocommerce_action())\n\t\t{\n\t\t\t//Switch locale if we are on an admin page\n\t\t\tif(is_admin()) {\n\t\t\t\treturn 'en_US';\n\t\t\t}\n\t\t}\n\n\t\t//Default return\n\t\treturn $lang;\n\t}\n\n\t/**\n\t * Attempt to identify WooCommerce actions (like sending emails)\n\t *\n\t * @return bool\n\t */\n\tfunction woocommerce_action()\n\t{\n\t\tif(isset($_POST['wc_order_action'])) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * This plugin listens for the GET variable that toggles the current setting\n\t */\n\tfunction register_endpoints()\n\t{\n\t\t//We're in admin\n\t\tif(is_admin()) {\n\t\t\t\n\t\t\t//Is the GET variables required set?\n\t\t\tif(isset($_GET['admin_custom_language_toggle']) && isset($_GET['nonce'])) {\n\n\t\t\t\t//Cast variable\n\t\t\t\t$cookie_value = intval($_GET['admin_custom_language_toggle']);\n\n\t\t\t\t//Set cookie\n\t\t\t\t$cookie_value === 1 ? $this->set_cookie(1) : $this->set_cookie(0);\n\n\t\t\t\tif(isset($_GET['admin_custom_language_return_url']) && wp_verify_nonce( $_GET['nonce'], 'english_wordpress_admin_redirect')) {\n\t\t\t\t\twp_redirect(urldecode($_GET['admin_custom_language_return_url']));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\twp_redirect(admin_url());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Whitelist some URL:s from translation.\n\t *\n\t * update-core.php is whitelisted because translation updates do not work properly if you change locale on that screen.\n\t *\n\t * options-general.php is whitelisted due to Trac issue #31318 and #29362\n\t * https://core.trac.wordpress.org/ticket/31318\n\t * https://core.trac.wordpress.org/ticket/29362\n\t *\n\t * @return bool\n\t */\n\tfunction in_url_whitelist()\n\t{\n\t\t//Get path of URL\n\t\t//TODO: Perhaps using parse_url() would be better?\n\t\t$request_uri = isset($_SERVER['REQUEST_URI']) ? trim($_SERVER['REQUEST_URI']) : '';\n\n\t\t//Bail early if we are cached\n\t\tif(($val = wp_cache_get($request_uri, self::SLUG)) !== false) {\n\t\t\treturn ($val === 'yes') ? true : false;\n\t\t}\n\n\t\t$whitelisted_regex = apply_filters('english_wordpress_admin_whitelist', array(\n\t\t\t\t'.*\\/wp-admin\\/update-core.php$',\n\t\t\t\t'.*\\/wp-admin\\/options-general.php$',\n\t\t\t\t'.*\\/wp-admin\\/options-general.php\\?settings-updated=true$',\n\t\t));\n\n\t\t//Attempt to match a whitelisted URL.\n\t\tforeach($whitelisted_regex as $whitelisted_regex_single)\n\t\t{\n\t\t\tif(preg_match(\"/{$whitelisted_regex_single}/\", $request_uri)) {\n\t\t\t\t//Cache result for this URL in non-persistent Object Cache\n\t\t\t\twp_cache_set($request_uri, \"yes\", self::SLUG);\n\n\t\t\t\t//Return true\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t//Cache result for this URL in non-persistent Object Cache\n\t\twp_cache_set($request_uri, \"no\", self::SLUG);\n\n\t\t//Nothing matched, admin URL not in whitelist\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if a version number is larger than or equal to a certain version\n\t *\n\t * @param $version\n\t * @return bool\n\t */\n\tfunction is_version($version)\n\t{\n\t\tglobal $wp_version;\n\t\treturn version_compare($wp_version, $version, '>=');\n\t}\n\n\t/**\n\t * Sets the cookie. (1 year expiry)\n\t *\n\t * @param string $value\n\t */\n\tfunction set_cookie($value = '1')\n\t{\n\t\tsetcookie('wordpress_admin_default_language_'. COOKIEHASH, $value, strtotime('+1 year'), COOKIEPATH, COOKIE_DOMAIN, false);\n\t}\n\n\t/**\n\t * Check so that we are not doing a frontend AJAX request\n\t *\n\t * @return bool\n\t */\n\tfunction request_is_frontend_ajax()\n\t{\n\t\t$script_filename = isset($_SERVER['SCRIPT_FILENAME']) ? $_SERVER['SCRIPT_FILENAME'] : '';\n\n\t\t//Try to figure out if frontend AJAX request... If we are DOING_AJAX; let's look closer\n\t\tif((defined('DOING_AJAX') && DOING_AJAX)) {\n\t\t\t//From wp-includes/functions.php, wp_get_referer() function.\n\t\t\t//Required to fix: https://core.trac.wordpress.org/ticket/25294\n\t\t\t$ref = '';\n\t\t\tif ( ! empty( $_REQUEST['_wp_http_referer'] ) ) {\n\t\t\t\t$ref = wp_unslash( $_REQUEST['_wp_http_referer'] );\n\t\t\t}\n\t\t\telseif ( ! empty( $_SERVER['HTTP_REFERER'] ) ) {\n\t\t\t\t$ref = wp_unslash( $_SERVER['HTTP_REFERER'] );\n\t\t\t}\n\n\n\t\t\t//If referer does not contain admin URL and we are using the admin-ajax.php endpoint, this is likely a frontend AJAX request\n\t\t\tif(((strpos($ref, admin_url()) === false) && (basename($script_filename) === 'admin-ajax.php'))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t//If no checks triggered, we end up here - not an AJAX request.\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if WordPress has a non-english language configured\n\t *\n\t * @return bool True if we don't have any additional language set in WPLANG\n\t */\n\tfunction english_install_only()\n\t{\n\t\tif($this->wpml_installed()) {\n\t\t\treturn false;\n\t\t}\n\n\t\t//If using WPLANG, otherwise check DB\n\t\tif(defined('WPLANG')) {\n\t\t\treturn (WPLANG === 'en_US' || trim(WPLANG) === '') ? true : false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//If language not en_US and not empty in database\n\t\t\tif(function_exists('get_bloginfo') && (get_bloginfo('language') !== 'en_US' || trim(get_bloginfo('language')) !== '') ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if WPML is installed\n\t *\n\t * @return bool\n\t */\n\tfunction wpml_installed()\n\t{\n\t\treturn defined('ICL_LANGUAGE_CODE');\n\t}\n\n\t/**\n\t * Adds a menu item to the admin bar via the admin_bar_menu hook\n\t *\n\t * @param $wp_admin_bar WP_Admin_Bar object\n\t */\n\tfunction admin_bar($wp_admin_bar)\n\t{\n\t\t//We're in admin and this is not a WPML install\n\t\tif(is_admin() && apply_filters('english_wordpress_admin_show_admin_bar', true) === true) {\n\t\t\t\n\t\t\t//Sets up the toggle link\n\t\t\t$toggle_nonce = wp_create_nonce('english_wordpress_admin_redirect');\n\n\t\t\tif($this->in_url_whitelist()) {\n\t\t\t\t$toggle_href =  plugin_dir_url( __FILE__ ) . 'readme.txt';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$toggle_href = admin_url('?admin_custom_language_toggle=' . ($this->english_admin_enabled() ? '0' : '1') . '&nonce=' . $toggle_nonce . '&admin_custom_language_return_url=' . urlencode((is_ssl() ? 'https' : 'http') . '://' . $_SERVER[\"HTTP_HOST\"] . $_SERVER[\"REQUEST_URI\"]));\n\t\t\t}\n\n\t\t\t//Create toggle title\n\t\t\tif($this->in_url_whitelist()) {\n\t\t\t\t$toggle_title = __('This admin screen cannot be translated. For more information, see the readme.', self::SLUG);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$toggle_title = ($this->english_admin_enabled() ? __('Switch to native', self::SLUG) : __('Switch to English', self::SLUG));\n\t\t\t}\n\n\t\t\t//Add main menu\n\t\t\t$main_bar = array(\n\t\t\t\t\t'id' => 'admin-custom-language-icon',\n\t\t\t\t\t'title' => $this->admin_bar_title(),\n\t\t\t\t\t'href' => $this->in_url_whitelist() ? '#' : $toggle_href,\n\t\t\t\t\t'meta' => array(\n\t\t\t\t\t\t\t'class' => 'admin-custom-language-icon'\n\t\t\t\t\t)\n\t\t\t);\n\n\t\t\t//Add sub menu\n\t\t\t$main_bar_sub = array(\n\t\t\t\t\t'id' => 'admin-custom-language-icon-submenu',\n\t\t\t\t\t'title' => $toggle_title,\n\t\t\t\t\t'href' => $toggle_href,\n\t\t\t\t\t'parent' => 'admin-custom-language-icon',\n\t\t\t\t\t'meta' => array(\n\t\t\t\t\t\t\t'target' => $this->in_url_whitelist() ? '_blank' : '_self'\n\t\t\t\t\t)\n\t\t\t);\n\n\t\t\t$wp_admin_bar->add_node($main_bar);\n\t\t\t$wp_admin_bar->add_node($main_bar_sub);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the admin bar title\n\t *\n\t * @return string\n\t */\n\tfunction admin_bar_title()\n\t{\n\t\tif($this->in_url_whitelist()) {\n\t\t\treturn '<span style=\"color: yellow;\">' . get_locale() . '</span>';\n\t\t}\n\t\telse {\n\t\t\treturn get_locale();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the cookie settin value, or null if there is no cookie set\n\t *\n\t * @return int|null\n\t */\n\tfunction cookie_setting_value()\n\t{\n\t\tif(defined('COOKIEHASH') && isset($_COOKIE['wordpress_admin_default_language_'. COOKIEHASH])) {\n\t\t\treturn intval($_COOKIE['wordpress_admin_default_language_'. COOKIEHASH]);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the functionality is enabled\n\t *\n\t * @return bool True if we should show the english admin\n\t */\n\tfunction english_admin_enabled()\n\t{\n\t\treturn $this->cookie_setting_value() === 1 ? true : false;\n\t}\n\n\t/**\n\t * Adds a little icon to the admin bar for later WordPress versions\n\t */\n\tfunction admin_css()\n\t{\n\t\tif($this->wp_version_at_least('3.8')) {\n\t\t\t?>\n\t\t\t<style type=\"text/css\">\n\t\t\t\t#wpadminbar #wp-admin-bar-admin-custom-language-icon > .ab-item:before\n\t\t\t\t{\n\t\t\t\t\t/* admin globe - content:\"\\f319\"; */\n\t\t\t\t\t/* translate icon */\n\t\t\t\t\tcontent: \"\\f326\";\n\t\t\t\t\ttop: 2px;\n\t\t\t\t}\n\t\t\t</style>\n      <?php\n\t\t}\n\t}\n\n\t/**\n\t * Version checker function\n\t *\n\t * @param $version string version we want to check against the current one\n\t * @return bool True if the current WP version is at least as new as $version\n\t */\n\tfunction wp_version_at_least($version)\n\t{\n\t\tif(version_compare(get_bloginfo('version'), $version, '>=')) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/*\n\t * Handles admin notices\n\t */\n\tfunction admin_notices()\n\t{\n\t\t?>\n\t\t<div class=\"error\">\n\t\t\t<p><?php _e( \"<strong>English Wordpress Admin Error</strong> <br/>You only have English language installed, or you are using WPML. If you only have English installed, please install another language before using this plugin. <a href='http://codex.wordpress.org/Installing_WordPress_in_Your_Language' target='_blank'>Read more (WordPress codex)</a> <br/> If you are using WPML, you do not need this plugin. WPML already provides a language switcher that can be configured under the \\\"Profile\\\" tab.\", 'admin-custom-language' ); ?></p>\n\t\t</div>\n\t\t<?php\n\t}\n}\n\n/** Initialize plugin **/\n$english_wordpress_admin_plugin = new Admin_Custom_Language();", "=== English WordPress Admin ===\nContributors: khromov\nTags: english, wpml, multilanguage\nRequires at least: 3.5\nTested up to: 5.3\nStable tag: 1.5.2\nLicense: GPL2\n\nLets users change their administration language to English\n\n== Description ==\nThis plugin lets users change their administration language to native English (en_US locale).\n\nThis is useful during site development and for people more accustomed to the english administration panel, even if your site\nis in another language. (The frontend will still use the native language.)\n\nThis plugin is fully compatible with WooCommerce and can correctly identify and translate frontend / backend AJAX requests.\nIf you are using this plugin with Advanced Custom Fields, please move the english-wp-admin.php file to the /wp-content/mu-plugins/ folder\n(create it if it does not exist). This is an ACF limitation.\n\nThis plugin is developer friendly and small (~200 lines of code). Check the FAQ for customization examples.\n\n**Usage**\n\n*Basic usage*\n\nOnce you have installed and activated the plugin, navigate to any admin page and check the top admin bar. A button will\ndisplay your current locale. If you click on it, the admin will change to English locale (en_US). To switch back,\npress the button again.\n\n== Requirements ==\n* PHP 5.3 or higher\n\n== Translations ==\n* None\n\n== Installation ==\n1. Upload the `english-wp-admin` folder to `/wp-content/plugins/`\n2. Activate the plugin (English WordPress Admin) through the 'Plugins' menu in WordPress\n3. Use the functionality via the admin bar\n\n== Frequently Asked Questions ==\n\n= Some plugins are still in the native language when switching to English =\n\nTo fix this, move the file /wp-content/plugins/english-wp-admin/english-wp-admin.php to /wp-content/mu-plugins/\n\nThis will ensure this plugin is loaded before all other plugins and that it sets the correct language. This is a WordPress restriction.\n\n= Why are some URLs whitelisted? =\n\nupdate-core.php is whitelisted because translation updates do not work properly if you change locale on that screen.\n\noptions-general.php is whitelisted due to Trac issue #31318 and #29362\n\nhttps://core.trac.wordpress.org/ticket/31318\nhttps://core.trac.wordpress.org/ticket/29362\n\n= How do I whitelist a specific page from being translated =\n\nUse the english_wordpress_admin_whitelist filter. It takes a preg-style regular expression.\n\n    /** Whitelist /wp-admin/options-general.php?page=my_plugin **/\n    add_filter('english_wordpress_admin_whitelist', function($whitelisted_urls)\n    {\n        $whitelisted_urls[] = '.*\\/wp-admin\\/options-general.php\\?page=my_page$';\n        return $whitelisted_urls;\n    });\n\n= How do I prevent regular users from having the option of changing the admin language? =\n\nIf you only want the first admin user to have this option, put this code in your themes function.php file:\n\n    /** Only allow the admin user to change the admin language **/\n    if(get_current_user_id() === 1) {\n        add_filter('english_wordpress_admin_show_admin_bar', '__return_true');\n    }\n    else {\n        add_filter('english_wordpress_admin_show_admin_bar', '__return_false');\n    }\n\n= How do I automatically enable this plugin for certain users? =\n\nUse the snippet below to have admins always use the admin page in english.\n\n    /** Enable the plugin automatically for admin users */\n    if(current_user_can('manage_options')) {\n        global $english_wordpress_admin_plugin;\n        $english_wordpress_admin_plugin->set_cookie(1);\n        add_filter('english_wordpress_admin_show_admin_bar', '__return_false');\n    }\n\n= This plugin does not solve my needs =\n\nYou can leave feature requests in the plugin support forum.\n\n== Screenshots ==\n\n1. The plugin admin bar\n\n== Changelog ==\n\n= 1.5.2 =\n\n* Fix for unauthenticated open redirect vulnerability\n\n= 1.5.1 =\n\n* Fix for PHP 5.2\n* Fix for whitelisting edge case\n* Code formatting touchup\n\n= 1.5.0 =\n\n* Fixed a bug where some plugin options pages had the native language despite switching to english\n* More robust AJAX detection (properly separates frontend / backend AJAX)\n* Better notifications whe visiting a whitelisted URL\n* Performance fixes (Utilizing Object Cache)\n* Improved ACF, WooCommerce and WPML support\n\n= 1.4.1 =\n* Minor tweaks\n\n= 1.4 =\n* Rewritten and improved frontend AJAX detection\n* Added proper WPML detection\n* Fixed broken language auto-update\n* Fixed WooCommerce emails sent in wrong language\n* Fixed bug in Settings > General admin page detection\n* GitHub updater support\n* Introduced URL whitelist (with new filter: english_wordpress_admin_whitelist)\n\n= 1.4 =\n* Rewritten and improved frontend AJAX detection\n* Added proper WPML detection\n* Fixed broken language auto-update\n* Fixed WooCommerce emails sent in wrong language\n* Fixed bug in Settings > General admin page detection\n* GitHub updater support\n* Introduced URL whitelist (with new filter: english_wordpress_admin_whitelist)\n\n= 1.3.2 =\n* Blacklisted changing language on Settings > General admin page until https://core.trac.wordpress.org/ticket/29362#comment:5 is fixed.\n\n= 1.3.1 =\n* Fixed an edge case where the \"You only have English language installed.\" \nmessage would appear erroneously.\n\n= 1.3.0 =\n* When changing language, you are now sent back to the page you were originally on instead of being reverted to the dashboard.\n* Fixed bug with disappearing top menu icon\n* Added notice for WPML users\n\n= 1.2.1 =\n* Fix notice level error when COOKIEHASH is not defined (Certain MultiSite installations)\n\n= 1.1 =\n* Fix notice level error when WPLANG is not defined\n* Added notification for sites that only have English language installed\n\n= 1.0 =\n* Initial release\n"], "filenames": ["english-wp-admin.php", "readme.txt"], "buggy_code_start_loc": [6, 6], "buggy_code_end_loc": [263, 102], "fixing_code_start_loc": [6, 6], "fixing_code_end_loc": [268, 107], "type": "CWE-352", "message": "A vulnerability classified as problematic was found in wp-english-wp-admin Plugin up to 1.5.1. Affected by this vulnerability is the function register_endpoints of the file english-wp-admin.php. The manipulation leads to cross-site request forgery. The attack can be launched remotely. Upgrading to version 1.5.2 is able to address this issue. The name of the patch is ad4ba171c974c65c3456e7c6228f59f40783b33d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216199.", "other": {"cve": {"id": "CVE-2022-4604", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-18T11:15:11.170", "lastModified": "2023-01-06T13:55:45.413", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic was found in wp-english-wp-admin Plugin up to 1.5.1. Affected by this vulnerability is the function register_endpoints of the file english-wp-admin.php. The manipulation leads to cross-site request forgery. The attack can be launched remotely. Upgrading to version 1.5.2 is able to address this issue. The name of the patch is ad4ba171c974c65c3456e7c6228f59f40783b33d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216199."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wp-english-wp-admin_project:wp-english-wp-admin:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "1.5.2", "matchCriteriaId": "479F633C-9E6B-417D-8B8B-449388712F46"}]}]}], "references": [{"url": "https://github.com/khromov/wp-english-wp-admin/commit/ad4ba171c974c65c3456e7c6228f59f40783b33d", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/khromov/wp-english-wp-admin/releases/tag/1.5.2", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216199", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/khromov/wp-english-wp-admin/commit/ad4ba171c974c65c3456e7c6228f59f40783b33d"}}