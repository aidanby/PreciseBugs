{"buggy_code": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc>\n  <web>Admin</web>\n  <name>Query</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <parent>Admin.WebHome</parent>\n  <creator>xwiki:XWiki.Admin</creator>\n  <author>xwiki:XWiki.Admin</author>\n  <customClass/>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <creationDate>1375188485000</creationDate>\n  <date>1375188485000</date>\n  <contentUpdateDate>1375188485000</contentUpdateDate>\n  <version>1.1</version>\n  <title/>\n  <defaultTemplate/>\n  <validationScript/>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content>{{velocity}}\n#if($hasProgramming)\n  #set($sqlTools = $xwiki.parseGroovyFromPage('Admin.SQLToolsGroovy'))\n  = Query =\n  $sqlTools.getForm($request, $doc, true, true, $xcontext)\n  #if($request.query)\n    #set($connection = $sqlTools.getConnectionFromRequest($request))\n    #set($results = $sqlTools.getResults($connection, $request.query, true))\n    = Results =\n    $results\n  #end\n#else\n{{error}}Sorry, you need the programming rights to use this tool{{/error}}\n#end\n{{/velocity}}\n</content>\n</xwikidoc>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc>\n  <web>Admin</web>\n  <name>QueryOnXWiki</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <parent>Admin.WebHome</parent>\n  <creator>xwiki:XWiki.Admin</creator>\n  <author>xwiki:XWiki.Admin</author>\n  <customClass/>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <creationDate>1375188485000</creationDate>\n  <date>1375188485000</date>\n  <contentUpdateDate>1375188485000</contentUpdateDate>\n  <version>1.1</version>\n  <title/>\n  <defaultTemplate/>\n  <validationScript/>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content>{{velocity}}\n#if($hasProgramming)\n  #set($sqlTools = $xwiki.parseGroovyFromPage('Admin.SQLToolsGroovy'))\n  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))\n  = Query =\n  Your database is: **$system**\n  $sqlTools.getForm($request, $doc, false, true, $xcontext)\n  #if($request.query)\n    #set($connection = $sqlTools.getXWikiConnection($xwiki, $xcontext))\n    #set($results = $sqlTools.getResults($connection, $request.query, false))\n    = Results =\n    $results\n  #end\n#else\n{{error}}Sorry, you need the programming rights to use this tool{{/error}}\n#end\n{{/velocity}}\n</content>\n</xwikidoc>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.3\" reference=\"Admin.SQLToolsGroovy\" locale=\"\">\n  <web>Admin</web>\n  <name>SQLToolsGroovy</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <creationDate>1375188484000</creationDate>\n  <parent>Admin.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <date>1593082115000</date>\n  <contentUpdateDate>1593082115000</contentUpdateDate>\n  <version>1.1</version>\n  <title>SQLToolsGroovy</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content>/**\n * Import\n */\nimport org.apache.velocity.tools.generic.EscapeTool\nimport java.sql.*\nimport com.xpn.xwiki.store.DatabaseProduct\n\n/**\n * Class\n */\nclass SQLTools{\n  class DatabaseConfiguration {\n    String CONFIGURATION_PREFIX = 'hibernate.connection.'\n    def databaseProductName\n    String url\n    String user\n    String password\n    String driver\n    String query = 'SHOW TABLES'\n\n    DatabaseConfiguration(request, xcontext){\n      def hibernateStore = xcontext.getContext().getWiki().getHibernateStore()\n      def configuration = hibernateStore.getConfiguration()\n      this.url = (request != null &amp;&amp; request.url != null) ? request.url : configuration.getProperty(CONFIGURATION_PREFIX + 'url')\n      this.user = (request != null &amp;&amp; request.user != null) ? request.user : configuration.getProperty(CONFIGURATION_PREFIX + 'username')\n      this.password = (request != null &amp;&amp; request.password != null) ? request.password : configuration.getProperty(CONFIGURATION_PREFIX + 'password')\n      this.driver = (request != null &amp;&amp; request.driver != null) ? request.driver : configuration.getProperty(CONFIGURATION_PREFIX + 'driver_class')\n      this.databaseProductName = hibernateStore.getDatabaseProductName(xcontext.getContext())\n      if(request != null &amp;&amp; request.query != null){\n        this.query = request.query\n      }\n      else if(DatabaseProduct.HSQLDB.equals(this.databaseProductName)){\n        this.query = \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'\"\n      }\n      else if(DatabaseProduct.ORACLE.equals(this.databaseProductName)){\n        this.query = 'SELECT table_name FROM dba_tables'\n      }\n      else if(DatabaseProduct.POSTGRESQL.equals(this.databaseProductName)){\n        this.query = 'SELECT * FROM pg_catalog.pg_tables'\n      }\n      else if(DatabaseProduct.MSSQL.equals(this.databaseProductName)){\n        this.query = \"SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'\"\n      }\n      else if(DatabaseProduct.DB2.equals(this.databaseProductName)){\n        this.query = \"SELECT * FROM SYSIBM.SYSTABLES WHERE type = 'T'\"\n      }\n    }\n\n    String getUrl(){\n      return url\n    }\n\n    String getUser(){\n      return user\n    }\n\n    String getPassword(){\n      return password\n    }\n\n    String getDriver(){\n      return driver\n    }\n\n    String getQuery(){\n      return query\n    }\n\n    def getDatabaseProductName(){\n      return databaseProductName\n    }\n  }\n\n  /**\n   * Get Form\n   */\n  String getForm(request, doc, withJDBCForm, withQuery, xcontext){\n    def databaseConfiguration = new DatabaseConfiguration(request, xcontext)\n    def escapeTool = new EscapeTool()\n    def spageUrl = escapeTool.xml(doc.getURL())\n    \n    // &lt;form&gt;\n    def toReturn = \"\"\"\n      {{html clean==\"false\"}}\n      &lt;form action=\"${spageUrl}#HResults\" class=\"xform\" method=\"post\"&gt;\n    \"\"\";\n    // JDB Form (user, password driver, url)\n    if(withJDBCForm){\n      // Get/Escape datas\n      def surl = escapeTool.xml(databaseConfiguration.getUrl())\n      def suser = escapeTool.xml(databaseConfiguration.getUser())\n      def spassword = escapeTool.xml(databaseConfiguration.getPassword())\n      def sdriver = escapeTool.xml(databaseConfiguration.getDriver())\n    \n      // Print form\n      toReturn += \"\"\"\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;label for=\"user\"&gt;User:&lt;/label&gt;\n          &lt;/dt&gt;\n          &lt;dd&gt;\n            &lt;input type=\"text\" name=\"user\" id=\"user\" value=\"${suser}\" size=\"80\" /&gt;\n          &lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n          &lt;/dt&gt;\n          &lt;dd&gt;\n            &lt;input type=\"password\" name=\"password\" id=\"password\" value=\"${spassword}\" size=\"80\" autocomplete=\"new-password\" /&gt;\n          &lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;label for=\"url\"&gt;URL:&lt;/label&gt;\n          &lt;/dt&gt;\n          &lt;dd&gt;\n            &lt;input type=\"text\" name=\"url\" id=\"url\" value=\"${surl}\" size=\"80\" /&gt;\n          &lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;label for=\"Driver\"&gt;Driver:&lt;/label&gt;\n          &lt;/dt&gt;\n          &lt;dd&gt;\n            &lt;input type=\"text\" name=\"driver\" id=\"driver\" value=\"${sdriver}\" size=\"80\" /&gt;\n          &lt;/dd&gt;\n        &lt;/dl&gt;\n      \"\"\";\n    }\n    // &lt;texteare&gt;Query&lt;/textarea&gt;\n    if(withQuery){\n      // Get the query\n      def squery = escapeTool.xml(databaseConfiguration.getQuery())\n      \n      // Print the form\n      toReturn += \"\"\"\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;label for=\"query\"&gt;Query:&lt;/label&gt;\n          &lt;/dt&gt;\n          &lt;dd&gt;\n            &lt;textarea name=\"query\" id=\"query\" cols=\"100\" rows=\"10\"/&gt;${squery}&lt;/textarea&gt;\n          &lt;/dd&gt;    \n        &lt;/dl&gt; \n      \"\"\"\n    }\n    \n    // &lt;/form&gt;\n    toReturn += \"\"\"\n      &lt;p&gt;&lt;span class=\"buttonwrapper\"&gt;&lt;input type=\"submit\" value=\"Go\" class=\"button\"/&gt;&lt;/span&gt;&lt;/p&gt;\n      &lt;/form&gt;\n      {{/html}}\n    \"\"\"\n    \n    return toReturn\n  }\n  \n  /**\n   * Get connection from request\n   */\n  Connection getConnectionFromRequest(request){\n    String userName = request.user\n    String password = request.password\n    String url = request.url\n    if(!request.user)\n      throw new Exception(\"You must fill the field 'user'\")\n    if(!request.url)\n      throw new Exception(\"You must fill the field 'url'\")\n    if(!request.driver)\n      throw new Exception(\"You must fill the field 'driver'\")\n    Class.forName (request.driver).newInstance ()\n    def conn = DriverManager.getConnection (url, userName, password)\n    return conn\n  }\n  \n  /**\n   * Get XWiki Database System\n   */\n  String getXWikiDatabaseSystem(xwiki, xcontext){\n    def databaseConfiguration = new DatabaseConfiguration(null, xcontext)\n    return databaseConfiguration.getDatabaseProductName()\n  }\n  \n  /**\n   * Get XWiki Connection\n   */\n  def getXWikiConnection(xwiki, xcontext){\n    def store = xwiki.getXWiki().getHibernateStore();\n    store.beginTransaction(xcontext.getContext())\n    def session = store.getSession(xcontext.getContext())\n    return session.connection()\n  }\n  \n  \n  /**\n   * Get results\n   */\n  String getResults(connection, sql, closeConnectionAtTheEnd){\n    def toReturn = \"\"\n    try{\n      def stmt = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY)\n      try {\n        def sqlLower = sql.toLowerCase().trim()\n        if(sqlLower.startsWith(\"delete\") || sqlLower.startsWith(\"update\") || sqlLower.startsWith(\"insert\") || sqlLower.startsWith(\"drop\")){\n          int results = stmt.executeUpdate(sql)\n          return \"\\n{{success}}$results lines changed{{/success}}\\n\"\n        }else{\n          def resultset = stmt.executeQuery(sql)\n          def mdata = resultset.getMetaData()\n          def nbcols = mdata.getColumnCount()\n          for (def i=1;i&lt;=nbcols;i++) {\n            toReturn += \"|=\"\n            toReturn += mdata.getColumnName(i)\n          }\n          if (nbcols &gt; 1) toReturn +=  \"\\n\"\n          while (resultset.next()) {\n            for (def i=1;i&lt;=nbcols;i++) {\n              def value = resultset.getString(i)\n              if ((value==null)||(value==\"\"))\n                value = \" \"\n              toReturn += \"|\"\n              toReturn += \"{{{${value}}}}\"\n            }\n            toReturn +=  \"\\n\"\n          }\n        }\n      }\n      catch (Exception e2) {\n        toReturn += \"\\n{{error}} **Error running sql: {{{${sql}}}}**\\n\" + e2.getMessage() + \"{{/error}}\\n\"\n      } finally {\n        stmt.close()\n        if(closeConnectionAtTheEnd)\n          connection.close()\n      }\n    }\n    catch(Exception e){\n      toReturn += \"\\n{{error}} Error: \" + e.getMessage() + \"{{/error}}\\n\"\n    }\n    return toReturn\n  }\n\n  /**\n   * Get Tables\n   */\n  String getTables(connection){\n    def sql = \"SHOW TABLES\"\n    def stmt1 = connection.createStatement()\n    def toReturn = \"\"\n    try {\n      // Get Tables list\n      def rs = stmt1.executeQuery(sql)\n      while(rs.next()){\n        def table = rs.getString(1)\n        toReturn += \"== ${table} ==\\n\"\n        toReturn += getResults(connection, \"DESCRIBE ${table}\", false)\n      }\n    }\n    catch (Exception e2) {\n      toReturn += \"{{error}} **Error running sql: {{{${sql}}}}**\\n\" + e2.getMessage() + \"{{/error}}\\n\"\n    } finally {\n      stmt1.close()\n      connection.close()\n    }\n    return toReturn\n  }\n\n}</content>\n  <object>\n    <name>Admin.SQLToolsGroovy</name>\n    <number>0</number>\n    <className>XWiki.RequiredRightClass</className>\n    <guid>47f1dd58-f20a-4799-a2e1-e1cfd0f0d61b</guid>\n    <class>\n      <name>XWiki.RequiredRightClass</name>\n      <customClass/>\n      <customMapping/>\n      <defaultViewSheet/>\n      <defaultEditSheet/>\n      <defaultWeb/>\n      <nameField/>\n      <validationScript/>\n      <level>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <multiSelect>0</multiSelect>\n        <name>level</name>\n        <number>1</number>\n        <picker>0</picker>\n        <prettyName>level</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators> ,|</separators>\n        <size>1</size>\n        <sort>none</sort>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <values>edit|programming</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </level>\n    </class>\n    <property>\n      <level>programming</level>\n    </property>\n  </object>\n</xwikidoc>\n"], "fixing_code": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc>\n  <web>Admin</web>\n  <name>Query</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <parent>Admin.WebHome</parent>\n  <creator>xwiki:XWiki.Admin</creator>\n  <author>xwiki:XWiki.Admin</author>\n  <customClass/>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <creationDate>1375188485000</creationDate>\n  <date>1375188485000</date>\n  <contentUpdateDate>1375188485000</contentUpdateDate>\n  <version>1.1</version>\n  <title/>\n  <defaultTemplate/>\n  <validationScript/>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content>{{velocity}}\n#if($hasProgramming)\n  #set($sqlTools = $xwiki.parseGroovyFromPage('Admin.SQLToolsGroovy'))\n  = Query =\n  $sqlTools.getForm($request, $doc, true, true, $xcontext, $services.csrf.token)\n  #if($request.query)\n    #if ($services.csrf.isTokenValid($request.getParameter('form_token')))\n      #set($connection = $sqlTools.getConnectionFromRequest($request))\n      #set($results = $sqlTools.getResults($connection, $request.query, true))\n      = Results =\n      $results\n    #else\n      {{error}}Invalid form token. Please verify the query and resubmit.{{/error}}\n    #end\n  #end\n#else\n{{error}}Sorry, you need the programming rights to use this tool{{/error}}\n#end\n{{/velocity}}\n</content>\n</xwikidoc>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc>\n  <web>Admin</web>\n  <name>QueryOnXWiki</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <parent>Admin.WebHome</parent>\n  <creator>xwiki:XWiki.Admin</creator>\n  <author>xwiki:XWiki.Admin</author>\n  <customClass/>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <creationDate>1375188485000</creationDate>\n  <date>1375188485000</date>\n  <contentUpdateDate>1375188485000</contentUpdateDate>\n  <version>1.1</version>\n  <title/>\n  <defaultTemplate/>\n  <validationScript/>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content>{{velocity}}\n#if($hasProgramming)\n  #set($sqlTools = $xwiki.parseGroovyFromPage('Admin.SQLToolsGroovy'))\n  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))\n  = Query =\n  Your database is: **$system**\n  $sqlTools.getForm($request, $doc, false, true, $xcontext, $services.csrf.token)\n  #if($request.query)\n    #if ($services.csrf.isTokenValid($request.getParameter('form_token')))\n      #set($connection = $sqlTools.getXWikiConnection($xwiki, $xcontext))\n      #set($results = $sqlTools.getResults($connection, $request.query, false))\n      = Results =\n      $results\n    #else\n      {{error}}Invalid form token. Please verify the query and resubmit.{{/error}}\n    #end\n  #end\n#else\n{{error}}Sorry, you need the programming rights to use this tool{{/error}}\n#end\n{{/velocity}}\n</content>\n</xwikidoc>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.3\" reference=\"Admin.SQLToolsGroovy\" locale=\"\">\n  <web>Admin</web>\n  <name>SQLToolsGroovy</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <creationDate>1375188484000</creationDate>\n  <parent>Admin.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <date>1593082115000</date>\n  <contentUpdateDate>1593082115000</contentUpdateDate>\n  <version>1.1</version>\n  <title>SQLToolsGroovy</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content>/**\n * Import\n */\nimport org.apache.velocity.tools.generic.EscapeTool\nimport java.sql.*\nimport com.xpn.xwiki.store.DatabaseProduct\n\n/**\n * Class\n */\nclass SQLTools{\n  class DatabaseConfiguration {\n    String CONFIGURATION_PREFIX = 'hibernate.connection.'\n    def databaseProductName\n    String url\n    String user\n    String password\n    String driver\n    String query = 'SHOW TABLES'\n\n    DatabaseConfiguration(request, xcontext){\n      def hibernateStore = xcontext.getContext().getWiki().getHibernateStore()\n      def configuration = hibernateStore.getConfiguration()\n      this.url = (request != null &amp;&amp; request.url != null) ? request.url : configuration.getProperty(CONFIGURATION_PREFIX + 'url')\n      this.user = (request != null &amp;&amp; request.user != null) ? request.user : configuration.getProperty(CONFIGURATION_PREFIX + 'username')\n      this.password = (request != null &amp;&amp; request.password != null) ? request.password : configuration.getProperty(CONFIGURATION_PREFIX + 'password')\n      this.driver = (request != null &amp;&amp; request.driver != null) ? request.driver : configuration.getProperty(CONFIGURATION_PREFIX + 'driver_class')\n      this.databaseProductName = hibernateStore.getDatabaseProductName(xcontext.getContext())\n      if(request != null &amp;&amp; request.query != null){\n        this.query = request.query\n      }\n      else if(DatabaseProduct.HSQLDB.equals(this.databaseProductName)){\n        this.query = \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'\"\n      }\n      else if(DatabaseProduct.ORACLE.equals(this.databaseProductName)){\n        this.query = 'SELECT table_name FROM dba_tables'\n      }\n      else if(DatabaseProduct.POSTGRESQL.equals(this.databaseProductName)){\n        this.query = 'SELECT * FROM pg_catalog.pg_tables'\n      }\n      else if(DatabaseProduct.MSSQL.equals(this.databaseProductName)){\n        this.query = \"SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'\"\n      }\n      else if(DatabaseProduct.DB2.equals(this.databaseProductName)){\n        this.query = \"SELECT * FROM SYSIBM.SYSTABLES WHERE type = 'T'\"\n      }\n    }\n\n    String getUrl(){\n      return url\n    }\n\n    String getUser(){\n      return user\n    }\n\n    String getPassword(){\n      return password\n    }\n\n    String getDriver(){\n      return driver\n    }\n\n    String getQuery(){\n      return query\n    }\n\n    def getDatabaseProductName(){\n      return databaseProductName\n    }\n  }\n\n  /**\n   * Get Form\n   */\n  String getForm(request, doc, withJDBCForm, withQuery, xcontext, csrfToken){\n    def databaseConfiguration = new DatabaseConfiguration(request, xcontext)\n    def escapeTool = new EscapeTool()\n    def spageUrl = escapeTool.xml(doc.getURL())\n    \n    // &lt;form&gt;\n    def toReturn = \"\"\"\n      {{html clean==\"false\"}}\n      &lt;form action=\"${spageUrl}#HResults\" class=\"xform\" method=\"post\"&gt;\n        &lt;input type=\"hidden\" name=\"form_token\" value=\"${csrfToken}\" /&gt;\n    \"\"\";\n    // JDB Form (user, password driver, url)\n    if(withJDBCForm){\n      // Get/Escape datas\n      def surl = escapeTool.xml(databaseConfiguration.getUrl())\n      def suser = escapeTool.xml(databaseConfiguration.getUser())\n      def spassword = escapeTool.xml(databaseConfiguration.getPassword())\n      def sdriver = escapeTool.xml(databaseConfiguration.getDriver())\n    \n      // Print form\n      toReturn += \"\"\"\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;label for=\"user\"&gt;User:&lt;/label&gt;\n          &lt;/dt&gt;\n          &lt;dd&gt;\n            &lt;input type=\"text\" name=\"user\" id=\"user\" value=\"${suser}\" size=\"80\" /&gt;\n          &lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n          &lt;/dt&gt;\n          &lt;dd&gt;\n            &lt;input type=\"password\" name=\"password\" id=\"password\" value=\"${spassword}\" size=\"80\" autocomplete=\"new-password\" /&gt;\n          &lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;label for=\"url\"&gt;URL:&lt;/label&gt;\n          &lt;/dt&gt;\n          &lt;dd&gt;\n            &lt;input type=\"text\" name=\"url\" id=\"url\" value=\"${surl}\" size=\"80\" /&gt;\n          &lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;label for=\"Driver\"&gt;Driver:&lt;/label&gt;\n          &lt;/dt&gt;\n          &lt;dd&gt;\n            &lt;input type=\"text\" name=\"driver\" id=\"driver\" value=\"${sdriver}\" size=\"80\" /&gt;\n          &lt;/dd&gt;\n        &lt;/dl&gt;\n      \"\"\";\n    }\n    // &lt;texteare&gt;Query&lt;/textarea&gt;\n    if(withQuery){\n      // Get the query\n      def squery = escapeTool.xml(databaseConfiguration.getQuery())\n      \n      // Print the form\n      toReturn += \"\"\"\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;label for=\"query\"&gt;Query:&lt;/label&gt;\n          &lt;/dt&gt;\n          &lt;dd&gt;\n            &lt;textarea name=\"query\" id=\"query\" cols=\"100\" rows=\"10\"/&gt;${squery}&lt;/textarea&gt;\n          &lt;/dd&gt;    \n        &lt;/dl&gt; \n      \"\"\"\n    }\n    \n    // &lt;/form&gt;\n    toReturn += \"\"\"\n      &lt;p&gt;&lt;span class=\"buttonwrapper\"&gt;&lt;input type=\"submit\" value=\"Go\" class=\"button\"/&gt;&lt;/span&gt;&lt;/p&gt;\n      &lt;/form&gt;\n      {{/html}}\n    \"\"\"\n    \n    return toReturn\n  }\n  \n  /**\n   * Get connection from request\n   */\n  Connection getConnectionFromRequest(request){\n    String userName = request.user\n    String password = request.password\n    String url = request.url\n    if(!request.user)\n      throw new Exception(\"You must fill the field 'user'\")\n    if(!request.url)\n      throw new Exception(\"You must fill the field 'url'\")\n    if(!request.driver)\n      throw new Exception(\"You must fill the field 'driver'\")\n    Class.forName (request.driver).newInstance ()\n    def conn = DriverManager.getConnection (url, userName, password)\n    return conn\n  }\n  \n  /**\n   * Get XWiki Database System\n   */\n  String getXWikiDatabaseSystem(xwiki, xcontext){\n    def databaseConfiguration = new DatabaseConfiguration(null, xcontext)\n    return databaseConfiguration.getDatabaseProductName()\n  }\n  \n  /**\n   * Get XWiki Connection\n   */\n  def getXWikiConnection(xwiki, xcontext){\n    def store = xwiki.getXWiki().getHibernateStore();\n    store.beginTransaction(xcontext.getContext())\n    def session = store.getSession(xcontext.getContext())\n    return session.connection()\n  }\n  \n  \n  /**\n   * Get results\n   */\n  String getResults(connection, sql, closeConnectionAtTheEnd){\n    def toReturn = \"\"\n    try{\n      def stmt = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY)\n      try {\n        def sqlLower = sql.toLowerCase().trim()\n        if(sqlLower.startsWith(\"delete\") || sqlLower.startsWith(\"update\") || sqlLower.startsWith(\"insert\") || sqlLower.startsWith(\"drop\")){\n          int results = stmt.executeUpdate(sql)\n          return \"\\n{{success}}$results lines changed{{/success}}\\n\"\n        }else{\n          def resultset = stmt.executeQuery(sql)\n          def mdata = resultset.getMetaData()\n          def nbcols = mdata.getColumnCount()\n          for (def i=1;i&lt;=nbcols;i++) {\n            toReturn += \"|=\"\n            toReturn += mdata.getColumnName(i)\n          }\n          if (nbcols &gt; 1) toReturn +=  \"\\n\"\n          while (resultset.next()) {\n            for (def i=1;i&lt;=nbcols;i++) {\n              def value = resultset.getString(i)\n              if ((value==null)||(value==\"\"))\n                value = \" \"\n              toReturn += \"|\"\n              toReturn += \"{{{${value}}}}\"\n            }\n            toReturn +=  \"\\n\"\n          }\n        }\n      }\n      catch (Exception e2) {\n        toReturn += \"\\n{{error}} **Error running sql: {{{${sql}}}}**\\n\" + e2.getMessage() + \"{{/error}}\\n\"\n      } finally {\n        stmt.close()\n        if(closeConnectionAtTheEnd)\n          connection.close()\n      }\n    }\n    catch(Exception e){\n      toReturn += \"\\n{{error}} Error: \" + e.getMessage() + \"{{/error}}\\n\"\n    }\n    return toReturn\n  }\n\n  /**\n   * Get Tables\n   */\n  String getTables(connection){\n    def sql = \"SHOW TABLES\"\n    def stmt1 = connection.createStatement()\n    def toReturn = \"\"\n    try {\n      // Get Tables list\n      def rs = stmt1.executeQuery(sql)\n      while(rs.next()){\n        def table = rs.getString(1)\n        toReturn += \"== ${table} ==\\n\"\n        toReturn += getResults(connection, \"DESCRIBE ${table}\", false)\n      }\n    }\n    catch (Exception e2) {\n      toReturn += \"{{error}} **Error running sql: {{{${sql}}}}**\\n\" + e2.getMessage() + \"{{/error}}\\n\"\n    } finally {\n      stmt1.close()\n      connection.close()\n    }\n    return toReturn\n  }\n\n}</content>\n  <object>\n    <name>Admin.SQLToolsGroovy</name>\n    <number>0</number>\n    <className>XWiki.RequiredRightClass</className>\n    <guid>47f1dd58-f20a-4799-a2e1-e1cfd0f0d61b</guid>\n    <class>\n      <name>XWiki.RequiredRightClass</name>\n      <customClass/>\n      <customMapping/>\n      <defaultViewSheet/>\n      <defaultEditSheet/>\n      <defaultWeb/>\n      <nameField/>\n      <validationScript/>\n      <level>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <multiSelect>0</multiSelect>\n        <name>level</name>\n        <number>1</number>\n        <picker>0</picker>\n        <prettyName>level</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators> ,|</separators>\n        <size>1</size>\n        <sort>none</sort>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <values>edit|programming</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </level>\n    </class>\n    <property>\n      <level>programming</level>\n    </property>\n  </object>\n</xwikidoc>\n"], "filenames": ["src/main/resources/Admin/Query.xml", "src/main/resources/Admin/QueryOnXWiki.xml", "src/main/resources/Admin/SQLToolsGroovy.xml"], "buggy_code_start_loc": [48, 50, 117], "buggy_code_end_loc": [54, 56, 125], "fixing_code_start_loc": [48, 50, 117], "fixing_code_end_loc": [58, 60, 127], "type": "CWE-352", "message": "The XWiki Admin Tools Application provides tools to help the administration of XWiki. Prior to version 4.5.1, a cross-site request forgery vulnerability in the query on XWiki tool allows executing arbitrary database queries on the database of the XWiki installation. Among other things, this allows modifying and deleting all data of the wiki. This could be both used to damage the wiki and to create an account with elevated privileges for the attacker, thus impacting the confidentiality, integrity and availability of the whole XWiki instance. A possible attack vector are comments on the wiki, by embedding an image with wiki syntax like `[[image:path:/xwiki/bin/view/Admin/QueryOnXWiki?query=DELETE%20FROM%20xwikidoc]]`, all documents would be deleted from the database when an admin user views this comment. This has been patched in Admin Tools Application 4.5.1 by adding form token checks. Some workarounds are available. The patch can also be applied manually to the affected pages. Alternatively, if the query tool is not needed, by deleting the document `Admin.SQLToolsGroovy`, all database query tools can be deactivated.", "other": {"cve": {"id": "CVE-2023-48293", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-20T19:15:08.870", "lastModified": "2023-11-29T18:02:07.070", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The XWiki Admin Tools Application provides tools to help the administration of XWiki. Prior to version 4.5.1, a cross-site request forgery vulnerability in the query on XWiki tool allows executing arbitrary database queries on the database of the XWiki installation. Among other things, this allows modifying and deleting all data of the wiki. This could be both used to damage the wiki and to create an account with elevated privileges for the attacker, thus impacting the confidentiality, integrity and availability of the whole XWiki instance. A possible attack vector are comments on the wiki, by embedding an image with wiki syntax like `[[image:path:/xwiki/bin/view/Admin/QueryOnXWiki?query=DELETE%20FROM%20xwikidoc]]`, all documents would be deleted from the database when an admin user views this comment. This has been patched in Admin Tools Application 4.5.1 by adding form token checks. Some workarounds are available. The patch can also be applied manually to the affected pages. Alternatively, if the query tool is not needed, by deleting the document `Admin.SQLToolsGroovy`, all database query tools can be deactivated."}, {"lang": "es", "value": "XWiki Admin Tools Application proporciona herramientas para ayudar en la administraci\u00f3n de XWiki. Antes de la versi\u00f3n 4.5.1, una vulnerabilidad de Cross-Site Request Forgery en la herramienta de consulta en XWiki permit\u00eda ejecutar consultas arbitrarias en la base de datos de la instalaci\u00f3n de XWiki. Entre otras cosas, esto permite modificar y eliminar todos los datos de la wiki. Esto podr\u00eda usarse tanto para da\u00f1ar el wiki como para crear una cuenta con privilegios elevados para el atacante, impactando as\u00ed la confidencialidad, integridad y disponibilidad de toda la instancia de XWiki. Un posible vector de ataque son los comentarios en la wiki, al incrustar una imagen con sintaxis de wiki como `[[image:path:/xwiki/bin/view/Admin/QueryOnXWiki?query=DELETE%20FROM%20xwikidoc]]`, todos los documentos se eliminar\u00e1 de la base de datos cuando un usuario administrador vea este comentario. Esto se ha solucionado en la aplicaci\u00f3n Admin Tools 4.5.1 a\u00f1adiendo comprobaciones de tokens de formulario. Algunos workarounds est\u00e1n disponibles. El parche tambi\u00e9n se puede aplicar manualmente a las p\u00e1ginas afectadas. Alternativamente, si la herramienta de consulta no es necesaria, al eliminar el documento `Admin.SQLToolsGroovy`, se pueden desactivar todas las herramientas de consulta de la base de datos."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.5.1", "matchCriteriaId": "94575ED9-1677-4701-8C80-6E435C9B1850"}]}]}], "references": [{"url": "https://github.com/xwiki-contrib/application-admintools/commit/45298b4fbcafba6914537dcdd798a1e1385f9e46", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki-contrib/application-admintools/security/advisories/GHSA-4f4c-rhjv-4wgv", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/ADMINTOOL-92", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki-contrib/application-admintools/commit/45298b4fbcafba6914537dcdd798a1e1385f9e46"}}