{"buggy_code": ["<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Utils\\FileHelper;\nuse Composer\\InstalledVersions;\nuse PackageVersions\\Versions;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(path=\"/doctor\")\n * @Security(\"is_granted('system_information')\")\n */\nclass DoctorController extends AbstractController\n{\n    /**\n     * PHP extensions which Kimai needs for runtime.\n     * Some are not a hard requiremenet, but some functions might not work as expected.\n     */\n    public const REQUIRED_EXTENSIONS = [\n        'intl',\n        'json',\n        'mbstring',\n        'pdo',\n        'zip',\n        'gd',\n        'xml'\n    ];\n\n    /**\n     * Directories which need to be writable by the webserver.\n     */\n    public const DIRECTORIES_WRITABLE = [\n        'var/cache/',\n        'var/log/',\n    ];\n\n    private $projectDirectory;\n    private $environment;\n    private $fileHelper;\n\n    public function __construct(string $projectDirectory, string $kernelEnvironment, FileHelper $fileHelper)\n    {\n        $this->projectDirectory = $projectDirectory;\n        $this->environment = $kernelEnvironment;\n        $this->fileHelper = $fileHelper;\n    }\n\n    /**\n     * @Route(path=\"/flush-log\", name=\"doctor_flush_log\", methods={\"GET\"})\n     * @Security(\"is_granted('system_configuration')\")\n     */\n    public function deleteLogfileAction(): Response\n    {\n        $logfile = $this->getLogFilename();\n\n        if (file_exists($logfile)) {\n            if (!is_writable($logfile)) {\n                $this->flashError('action.delete.error', ['%reason%' => 'Logfile cannot be written']);\n            } else {\n                if (false === file_put_contents($logfile, '')) {\n                    $this->flashError('action.delete.error', ['%reason%' => 'Failed writing to logfile']);\n                } else {\n                    $this->flashSuccess('action.delete.success');\n                }\n            }\n        }\n\n        return $this->redirectToRoute('doctor');\n    }\n\n    /**\n     * @Route(path=\"\", name=\"doctor\", methods={\"GET\"})\n     */\n    public function index(): Response\n    {\n        $logLines = 100;\n\n        $canDeleteLogfile = $this->isGranted('system_configuration') && is_writable($this->getLogFilename());\n\n        return $this->render('doctor/index.html.twig', array_merge(\n            [\n                'modules' => get_loaded_extensions(),\n                'environment' => $this->environment,\n                'info' => $this->getPhpInfo(),\n                'settings' => $this->getIniSettings(),\n                'extensions' => $this->getLoadedExtensions(),\n                'directories' => $this->getFilePermissions(),\n                'log_delete' => $canDeleteLogfile,\n                'logs' => $this->getLog(),\n                'logLines' => $logLines,\n                'logSize' => $this->getLogSize(),\n                'composer' => $this->getComposerPackages(),\n            ]\n        ));\n    }\n\n    private function getComposerPackages(): array\n    {\n        $versions = [];\n\n        if (class_exists(InstalledVersions::class)) {\n            $rootPackage = InstalledVersions::getRootPackage()['name'];\n            foreach (InstalledVersions::getInstalledPackages() as $package) {\n                $versions[$package] = InstalledVersions::getPrettyVersion($package);\n            }\n        } else {\n            @trigger_error('Please upgrade your Composer to 2.x', E_USER_DEPRECATED);\n\n            // @deprecated since 1.14, will be removed with 2.0\n            $rootPackage = Versions::rootPackageName();\n            foreach (Versions::VERSIONS as $name => $version) {\n                $versions[$name] = explode('@', $version)[0];\n            }\n        }\n\n        // remove kimai from the package list\n        $versions = array_filter($versions, function ($version, $name) use ($rootPackage) {\n            if ($name === $rootPackage) {\n                return false;\n            }\n\n            if ($version === null || $version === '*') {\n                return false;\n            }\n\n            return true;\n        }, ARRAY_FILTER_USE_BOTH);\n\n        ksort($versions);\n\n        return $versions;\n    }\n\n    private function getLoadedExtensions()\n    {\n        $results = [];\n\n        foreach (self::REQUIRED_EXTENSIONS as $extName) {\n            $results[$extName] = false;\n            if (\\extension_loaded($extName)) {\n                $results[$extName] = true;\n            }\n        }\n\n        return $results;\n    }\n\n    private function getLogSize(): int\n    {\n        $logfile = $this->getLogFilename();\n\n        return file_exists($logfile) ? filesize($logfile) : 0;\n    }\n\n    private function getLogFilename(): string\n    {\n        $logfileName = 'var/log/' . $this->environment . '.log';\n\n        return $this->projectDirectory . '/' . $logfileName;\n    }\n\n    private function getLog(int $lines = 100): array\n    {\n        $logfile = $this->getLogFilename();\n\n        if (!file_exists($logfile)) {\n            return ['Missing logfile'];\n        }\n\n        if (!is_readable($logfile)) {\n            return ['ATTENTION: Cannot read log file'];\n        }\n\n        $file = new \\SplFileObject($logfile, 'r');\n\n        if ($file->getSize() === 0) {\n            return ['Empty logfile'];\n        }\n\n        $file->seek($file->getSize());\n        $last_line = $file->key();\n        while ($last_line - $lines < 0) {\n            $lines--;\n        }\n        $iterator = new \\LimitIterator($file, $last_line - $lines, $last_line);\n\n        try {\n            $result = iterator_to_array($iterator);\n        } catch (\\Exception $ex) {\n            $result = ['ATTENTION: Failed reading log file'];\n        }\n\n        if (!is_writable($logfile)) {\n            $result[] = 'ATTENTION: Logfile is not writable';\n        }\n\n        return $result;\n    }\n\n    private function getFilePermissions()\n    {\n        $testPaths = [];\n        $baseDir = $this->projectDirectory . DIRECTORY_SEPARATOR;\n\n        foreach (self::DIRECTORIES_WRITABLE as $path) {\n            $fullPath = $baseDir . $path;\n            $fullUri = realpath($fullPath);\n\n            if ($fullUri === false && !file_exists($fullPath)) {\n                @mkdir($fullPath);\n                clearstatcache(true);\n                $fullUri = realpath($fullPath);\n            }\n\n            $testPaths[] = $fullUri;\n        }\n\n        $results = [];\n        $testPaths[] = $this->fileHelper->getDataDirectory();\n        foreach ($testPaths as $fullUri) {\n            $fullUri = rtrim($fullUri, DIRECTORY_SEPARATOR);\n            $tmp = str_replace($baseDir, '', $fullUri) . DIRECTORY_SEPARATOR;\n            if ($fullUri !== false && is_readable($fullUri) && is_writable($fullUri)) {\n                $results[$tmp] = true;\n            } else {\n                $results[$tmp] = false;\n            }\n        }\n\n        return $results;\n    }\n\n    private function getIniSettings()\n    {\n        $ini = [\n            'allow_url_fopen',\n            'allow_url_include',\n            'default_charset',\n            'default_mimetype',\n            'display_errors',\n            'error_log',\n            'error_reporting',\n            'log_errors',\n            'max_execution_time',\n            'memory_limit',\n            'open_basedir',\n            'post_max_size',\n            'sys_temp_dir',\n            'date.timezone',\n        ];\n\n        $settings = [];\n        foreach ($ini as $name) {\n            try {\n                $settings[$name] = ini_get($name);\n            } catch (\\Exception $ex) {\n                $settings[$name] = \"Couldn't load ini setting: \" . $ex->getMessage();\n            }\n        }\n\n        return $settings;\n    }\n\n    /**\n     * @author https://php.net/manual/en/function.phpinfo.php#117961\n     * @return array\n     */\n    private function getPhpInfo()\n    {\n        $plainText = function ($input) {\n            return trim(html_entity_decode(strip_tags($input)));\n        };\n\n        ob_start();\n        phpinfo(1);\n\n        $phpinfo = ['phpinfo' => []];\n\n        if (preg_match_all(\n            '#(?:<h2.*?>(?:<a.*?>)?(.*?)(?:<\\/a>)?<\\/h2>)|' .\n            '(?:<tr.*?><t[hd].*?>(.*?)\\s*</t[hd]>(?:<t[hd].*?>(.*?)\\s*</t[hd]>(?:<t[hd].*?>(.*?)\\s*</t[hd]>)?)?</tr>)#s',\n            ob_get_clean(),\n            $matches,\n            PREG_SET_ORDER\n        )) {\n            foreach ($matches as $match) {\n                $fn = $plainText;\n                if (isset($match[3])) {\n                    $keys1 = array_keys($phpinfo);\n                    $phpinfo[end($keys1)][$fn($match[2])] = isset($match[4]) ? [$fn($match[3]), $fn($match[4])] : $fn($match[3]);\n                } else {\n                    $keys1 = array_keys($phpinfo);\n                    $phpinfo[end($keys1)][] = $fn($match[2]);\n                }\n            }\n        }\n\n        $phpInfo = $phpinfo['phpinfo'];\n        unset($phpInfo[0]);\n        unset($phpInfo[1]);\n\n        return $phpInfo;\n    }\n}\n", "{% extends 'base.html.twig' %}\n{% import \"macros/widgets.html.twig\" as widgets %}\n\n{% block page_title %}{{ 'menu.doctor'|trans }}{% endblock %}\n{% block page_subtitle %}{{ 'label.version'|trans }}: {{ constant('App\\\\Constants::VERSION') }} {{ constant('App\\\\Constants::STATUS') }} ({{ environment }}){% endblock %}\n{% block page_actions %}\n    {% set event = actions(app.user, 'doctor', 'index') %}\n    {{ widgets.page_actions(event.actions) }}\n{% endblock %}\n\n{% block main %}\n\n    {% set permissionOpts = {collapsed: true, boxtype: 'success'} %}\n    {% for name, value in directories %}\n        {% if value is same as (false) %}\n            {% set permissionOpts = {boxtype: 'danger'} %}\n        {% endif %}\n    {% endfor %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with permissionOpts %}\n        {% block box_title %}File permissions{% endblock %}\n        {% block box_body %}\n            <p>\n                If you see a warning icon <i class=\"{{ 'warning'|icon }} text-red\"></i> in the list below, you should talk to your administrator.\n                The path is either not readable or not writable and Kimai might not work as expected.\n            </p>\n            <table class=\"table\">\n                {% for name, value in directories %}\n                    <tr>\n                        <th style=\"width:15%\">{{ name }}</th>\n                        <td>\n                            {% if value is same as (false) %}\n                                <i class=\"{{ 'warning'|icon }} text-red\"></i>\n                            {% else %}\n                                <i class=\"{{ 'success'|icon }} text-green\"></i>\n                            {% endif %}\n                        </td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n    {% set extensionOpts = {collapsed: true, boxtype: 'success'} %}\n    {% for name, value in extensions %}\n        {% if value is same as (false) %}\n            {% set extensionOpts = {boxtype: 'danger'} %}\n        {% endif %}\n    {% endfor %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with extensionOpts %}\n        {% block box_title %}Required PHP extensions{% endblock %}\n        {% block box_body %}\n            <p>\n                If you see a warning icon <i class=\"{{ 'warning'|icon }} text-red\"></i> in the list below, you should talk to your administrator. \n                There is a missing PHP extension and Kimai might not work as expected.\n            </p>\n            <table class=\"table\">\n                {% for name, value in extensions %}\n                    <tr>\n                        <th style=\"width:15%\">{{ name }}</th>\n                        <td>\n                            {% if value is same as (false) %}\n                                <i class=\"{{ 'warning'|icon }} text-red\"></i>\n                            {% else %}\n                                <i class=\"{{ 'success'|icon }} text-green\"></i>\n                            {% endif %}\n                        </td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n    {% set logOpts = {collapsed: true} %}\n    {% if logSize > 52428800 %}\n        {% set logOpts = {boxtype: 'danger'} %}\n    {% endif %}\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with logOpts %}\n        {% block box_title %}Logfile (max. {{ logLines }} last lines){% endblock %}\n        {% block box_tools %}\n            {% if log_delete %}\n                <a class=\"btn-box-tool confirmation-link\" href=\"{{ path('doctor_flush_log') }}\" data-question=\"confirm.delete\"><i class=\"{{ 'delete'|icon }}\"></i></a>\n            {% endif %}\n        {% endblock %}\n        {% block box_body %}\n            {% if logSize > 52428800 %}\n                <p>Your logfile is larger than 50 MB, consider deleting it (it will be re-created automatically).</p>\n            {% endif %}\n            <pre>{% for logLine in logs|reverse -%}\n                {%- set logLineClass = '' -%}\n                {%- if '.CRITICAL' in logLine -%}\n                    {%- set logLineClass = 'text-danger text-bold' -%}\n                {%- elseif '.WARNING' in logLine -%}\n                    {%- set logLineClass = 'text-warning text-bold' -%}\n                {%- elseif '.ERROR' in logLine -%}\n                    {%- set logLineClass = 'text-warning text-bold' -%}\n                {%- elseif '.DEBUG' in logLine -%}\n                    {%- set logLineClass = 'text-muted' -%}\n                {%- endif -%}\n                <span class=\"{{ logLineClass }}\">{{- logLine -}}</span>\n            {%- endfor %}</pre>\n        {% endblock %}\n    {% endembed %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with {collapsed: true} %}\n        {% block box_title %}Composer packages{% endblock %}\n        {% block box_body_class %}no-padding{% endblock %}\n        {% block box_body %}\n            <table class=\"table table-hover\">\n                {% for name, value in composer %}\n                    <tr>\n                        <th style=\"width:15%\">{{ name }}</th>\n                        <td>{{ value }}</td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n    \n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with {collapsed: true} %}\n        {% block box_title %}PHP{% endblock %}\n        {% block box_body_class %}no-padding{% endblock %}\n        {% block box_body %}\n            <table class=\"table table-hover\">\n                <tr>\n                    <th style=\"width:15%\">Version</th>\n                    <td>{{ constant('PHP_VERSION') }}</td>\n                </tr>\n                <tr>\n                    <th style=\"width:15%;max-width:25%\">Modules</th>\n                    <td>{{ modules|join(', ') }}</td>\n                </tr>\n                {% for name, value in settings %}\n                    <tr>\n                        <th style=\"width:15%\">{{ name }}</th>\n                        <td>\n                            {% if value is empty %}\n                                <i>unknown</i>\n                            {% else %}\n                                {{ value }}\n                            {% endif %}\n                        </td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with {collapsed: true} %}\n        {% block box_title %}Server{% endblock %}\n        {% block box_body_class %}no-padding{% endblock %}\n        {% block box_body %}\n            <table class=\"table table-hover\">\n                {% for name, value in info %}\n                    <tr>\n                        <th style=\"width:15%\">{{ name }}</th>\n                        <td>{{ value|raw }}</td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n{% endblock %}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Utils\\FileHelper;\nuse Composer\\InstalledVersions;\nuse PackageVersions\\Versions;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\n\n/**\n * @Route(path=\"/doctor\")\n * @Security(\"is_granted('system_information')\")\n */\nclass DoctorController extends AbstractController\n{\n    /**\n     * PHP extensions which Kimai needs for runtime.\n     * Some are not a hard requiremenet, but some functions might not work as expected.\n     */\n    public const REQUIRED_EXTENSIONS = [\n        'intl',\n        'json',\n        'mbstring',\n        'pdo',\n        'zip',\n        'gd',\n        'xml'\n    ];\n\n    /**\n     * Directories which need to be writable by the webserver.\n     */\n    public const DIRECTORIES_WRITABLE = [\n        'var/cache/',\n        'var/log/',\n    ];\n\n    private $projectDirectory;\n    private $environment;\n    private $fileHelper;\n\n    public function __construct(string $projectDirectory, string $kernelEnvironment, FileHelper $fileHelper)\n    {\n        $this->projectDirectory = $projectDirectory;\n        $this->environment = $kernelEnvironment;\n        $this->fileHelper = $fileHelper;\n    }\n\n    /**\n     * @Route(path=\"/flush-log/{token}\", name=\"doctor_flush_log\", methods={\"GET\"})\n     * @Security(\"is_granted('system_configuration')\")\n     */\n    public function deleteLogfileAction(string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('doctor.flush_log', $token))) {\n            $this->flashError('action.delete.error');\n\n            return $this->redirectToRoute('doctor');\n        }\n\n        $csrfTokenManager->refreshToken($token);\n\n        $logfile = $this->getLogFilename();\n\n        if (file_exists($logfile)) {\n            if (!is_writable($logfile)) {\n                $this->flashError('action.delete.error', ['%reason%' => 'Logfile cannot be written']);\n            } else {\n                if (false === file_put_contents($logfile, '')) {\n                    $this->flashError('action.delete.error', ['%reason%' => 'Failed writing to logfile']);\n                } else {\n                    $this->flashSuccess('action.delete.success');\n                }\n            }\n        }\n\n        return $this->redirectToRoute('doctor');\n    }\n\n    /**\n     * @Route(path=\"\", name=\"doctor\", methods={\"GET\"})\n     */\n    public function index(): Response\n    {\n        $logLines = 100;\n\n        $canDeleteLogfile = $this->isGranted('system_configuration') && is_writable($this->getLogFilename());\n\n        return $this->render('doctor/index.html.twig', array_merge(\n            [\n                'modules' => get_loaded_extensions(),\n                'environment' => $this->environment,\n                'info' => $this->getPhpInfo(),\n                'settings' => $this->getIniSettings(),\n                'extensions' => $this->getLoadedExtensions(),\n                'directories' => $this->getFilePermissions(),\n                'log_delete' => $canDeleteLogfile,\n                'logs' => $this->getLog(),\n                'logLines' => $logLines,\n                'logSize' => $this->getLogSize(),\n                'composer' => $this->getComposerPackages(),\n            ]\n        ));\n    }\n\n    private function getComposerPackages(): array\n    {\n        $versions = [];\n\n        if (class_exists(InstalledVersions::class)) {\n            $rootPackage = InstalledVersions::getRootPackage()['name'];\n            foreach (InstalledVersions::getInstalledPackages() as $package) {\n                $versions[$package] = InstalledVersions::getPrettyVersion($package);\n            }\n        } else {\n            @trigger_error('Please upgrade your Composer to 2.x', E_USER_DEPRECATED);\n\n            // @deprecated since 1.14, will be removed with 2.0\n            $rootPackage = Versions::rootPackageName();\n            foreach (Versions::VERSIONS as $name => $version) {\n                $versions[$name] = explode('@', $version)[0];\n            }\n        }\n\n        // remove kimai from the package list\n        $versions = array_filter($versions, function ($version, $name) use ($rootPackage) {\n            if ($name === $rootPackage) {\n                return false;\n            }\n\n            if ($version === null || $version === '*') {\n                return false;\n            }\n\n            return true;\n        }, ARRAY_FILTER_USE_BOTH);\n\n        ksort($versions);\n\n        return $versions;\n    }\n\n    private function getLoadedExtensions()\n    {\n        $results = [];\n\n        foreach (self::REQUIRED_EXTENSIONS as $extName) {\n            $results[$extName] = false;\n            if (\\extension_loaded($extName)) {\n                $results[$extName] = true;\n            }\n        }\n\n        return $results;\n    }\n\n    private function getLogSize(): int\n    {\n        $logfile = $this->getLogFilename();\n\n        return file_exists($logfile) ? filesize($logfile) : 0;\n    }\n\n    private function getLogFilename(): string\n    {\n        $logfileName = 'var/log/' . $this->environment . '.log';\n\n        return $this->projectDirectory . '/' . $logfileName;\n    }\n\n    private function getLog(int $lines = 100): array\n    {\n        $logfile = $this->getLogFilename();\n\n        if (!file_exists($logfile)) {\n            return ['Missing logfile'];\n        }\n\n        if (!is_readable($logfile)) {\n            return ['ATTENTION: Cannot read log file'];\n        }\n\n        $file = new \\SplFileObject($logfile, 'r');\n\n        if ($file->getSize() === 0) {\n            return ['Empty logfile'];\n        }\n\n        $file->seek($file->getSize());\n        $last_line = $file->key();\n        while ($last_line - $lines < 0) {\n            $lines--;\n        }\n        $iterator = new \\LimitIterator($file, $last_line - $lines, $last_line);\n\n        try {\n            $result = iterator_to_array($iterator);\n        } catch (\\Exception $ex) {\n            $result = ['ATTENTION: Failed reading log file'];\n        }\n\n        if (!is_writable($logfile)) {\n            $result[] = 'ATTENTION: Logfile is not writable';\n        }\n\n        return $result;\n    }\n\n    private function getFilePermissions()\n    {\n        $testPaths = [];\n        $baseDir = $this->projectDirectory . DIRECTORY_SEPARATOR;\n\n        foreach (self::DIRECTORIES_WRITABLE as $path) {\n            $fullPath = $baseDir . $path;\n            $fullUri = realpath($fullPath);\n\n            if ($fullUri === false && !file_exists($fullPath)) {\n                @mkdir($fullPath);\n                clearstatcache(true);\n                $fullUri = realpath($fullPath);\n            }\n\n            $testPaths[] = $fullUri;\n        }\n\n        $results = [];\n        $testPaths[] = $this->fileHelper->getDataDirectory();\n        foreach ($testPaths as $fullUri) {\n            $fullUri = rtrim($fullUri, DIRECTORY_SEPARATOR);\n            $tmp = str_replace($baseDir, '', $fullUri) . DIRECTORY_SEPARATOR;\n            if ($fullUri !== false && is_readable($fullUri) && is_writable($fullUri)) {\n                $results[$tmp] = true;\n            } else {\n                $results[$tmp] = false;\n            }\n        }\n\n        return $results;\n    }\n\n    private function getIniSettings()\n    {\n        $ini = [\n            'allow_url_fopen',\n            'allow_url_include',\n            'default_charset',\n            'default_mimetype',\n            'display_errors',\n            'error_log',\n            'error_reporting',\n            'log_errors',\n            'max_execution_time',\n            'memory_limit',\n            'open_basedir',\n            'post_max_size',\n            'sys_temp_dir',\n            'date.timezone',\n        ];\n\n        $settings = [];\n        foreach ($ini as $name) {\n            try {\n                $settings[$name] = ini_get($name);\n            } catch (\\Exception $ex) {\n                $settings[$name] = \"Couldn't load ini setting: \" . $ex->getMessage();\n            }\n        }\n\n        return $settings;\n    }\n\n    /**\n     * @author https://php.net/manual/en/function.phpinfo.php#117961\n     * @return array\n     */\n    private function getPhpInfo()\n    {\n        $plainText = function ($input) {\n            return trim(html_entity_decode(strip_tags($input)));\n        };\n\n        ob_start();\n        phpinfo(1);\n\n        $phpinfo = ['phpinfo' => []];\n\n        if (preg_match_all(\n            '#(?:<h2.*?>(?:<a.*?>)?(.*?)(?:<\\/a>)?<\\/h2>)|' .\n            '(?:<tr.*?><t[hd].*?>(.*?)\\s*</t[hd]>(?:<t[hd].*?>(.*?)\\s*</t[hd]>(?:<t[hd].*?>(.*?)\\s*</t[hd]>)?)?</tr>)#s',\n            ob_get_clean(),\n            $matches,\n            PREG_SET_ORDER\n        )) {\n            foreach ($matches as $match) {\n                $fn = $plainText;\n                if (isset($match[3])) {\n                    $keys1 = array_keys($phpinfo);\n                    $phpinfo[end($keys1)][$fn($match[2])] = isset($match[4]) ? [$fn($match[3]), $fn($match[4])] : $fn($match[3]);\n                } else {\n                    $keys1 = array_keys($phpinfo);\n                    $phpinfo[end($keys1)][] = $fn($match[2]);\n                }\n            }\n        }\n\n        $phpInfo = $phpinfo['phpinfo'];\n        unset($phpInfo[0]);\n        unset($phpInfo[1]);\n\n        return $phpInfo;\n    }\n}\n", "{% extends 'base.html.twig' %}\n{% import \"macros/widgets.html.twig\" as widgets %}\n\n{% block page_title %}{{ 'menu.doctor'|trans }}{% endblock %}\n{% block page_subtitle %}{{ 'label.version'|trans }}: {{ constant('App\\\\Constants::VERSION') }} {{ constant('App\\\\Constants::STATUS') }} ({{ environment }}){% endblock %}\n{% block page_actions %}\n    {% set event = actions(app.user, 'doctor', 'index') %}\n    {{ widgets.page_actions(event.actions) }}\n{% endblock %}\n\n{% block main %}\n\n    {% set permissionOpts = {collapsed: true, boxtype: 'success'} %}\n    {% for name, value in directories %}\n        {% if value is same as (false) %}\n            {% set permissionOpts = {boxtype: 'danger'} %}\n        {% endif %}\n    {% endfor %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with permissionOpts %}\n        {% block box_title %}File permissions{% endblock %}\n        {% block box_body %}\n            <p>\n                If you see a warning icon <i class=\"{{ 'warning'|icon }} text-red\"></i> in the list below, you should talk to your administrator.\n                The path is either not readable or not writable and Kimai might not work as expected.\n            </p>\n            <table class=\"table\">\n                {% for name, value in directories %}\n                    <tr>\n                        <th style=\"width:15%\">{{ name }}</th>\n                        <td>\n                            {% if value is same as (false) %}\n                                <i class=\"{{ 'warning'|icon }} text-red\"></i>\n                            {% else %}\n                                <i class=\"{{ 'success'|icon }} text-green\"></i>\n                            {% endif %}\n                        </td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n    {% set extensionOpts = {collapsed: true, boxtype: 'success'} %}\n    {% for name, value in extensions %}\n        {% if value is same as (false) %}\n            {% set extensionOpts = {boxtype: 'danger'} %}\n        {% endif %}\n    {% endfor %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with extensionOpts %}\n        {% block box_title %}Required PHP extensions{% endblock %}\n        {% block box_body %}\n            <p>\n                If you see a warning icon <i class=\"{{ 'warning'|icon }} text-red\"></i> in the list below, you should talk to your administrator. \n                There is a missing PHP extension and Kimai might not work as expected.\n            </p>\n            <table class=\"table\">\n                {% for name, value in extensions %}\n                    <tr>\n                        <th style=\"width:15%\">{{ name }}</th>\n                        <td>\n                            {% if value is same as (false) %}\n                                <i class=\"{{ 'warning'|icon }} text-red\"></i>\n                            {% else %}\n                                <i class=\"{{ 'success'|icon }} text-green\"></i>\n                            {% endif %}\n                        </td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n    {% set logOpts = {collapsed: true} %}\n    {% if logSize > 52428800 %}\n        {% set logOpts = {boxtype: 'danger'} %}\n    {% endif %}\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with logOpts %}\n        {% block box_title %}Logfile (max. {{ logLines }} last lines){% endblock %}\n        {% block box_tools %}\n            {% if log_delete %}\n                <a class=\"btn-box-tool confirmation-link\" href=\"{{ path('doctor_flush_log', {'token': csrf_token('doctor.flush_log')}) }}\" data-question=\"confirm.delete\"><i class=\"{{ 'delete'|icon }}\"></i></a>\n            {% endif %}\n        {% endblock %}\n        {% block box_body %}\n            {% if logSize > 52428800 %}\n                <p>Your logfile is larger than 50 MB, consider deleting it (it will be re-created automatically).</p>\n            {% endif %}\n            <pre>{% for logLine in logs|reverse -%}\n                {%- set logLineClass = '' -%}\n                {%- if '.CRITICAL' in logLine -%}\n                    {%- set logLineClass = 'text-danger text-bold' -%}\n                {%- elseif '.WARNING' in logLine -%}\n                    {%- set logLineClass = 'text-warning text-bold' -%}\n                {%- elseif '.ERROR' in logLine -%}\n                    {%- set logLineClass = 'text-warning text-bold' -%}\n                {%- elseif '.DEBUG' in logLine -%}\n                    {%- set logLineClass = 'text-muted' -%}\n                {%- endif -%}\n                <span class=\"{{ logLineClass }}\">{{- logLine -}}</span>\n            {%- endfor %}</pre>\n        {% endblock %}\n    {% endembed %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with {collapsed: true} %}\n        {% block box_title %}Composer packages{% endblock %}\n        {% block box_body_class %}no-padding{% endblock %}\n        {% block box_body %}\n            <table class=\"table table-hover\">\n                {% for name, value in composer %}\n                    <tr>\n                        <th style=\"width:15%\">{{ name }}</th>\n                        <td>{{ value }}</td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n    \n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with {collapsed: true} %}\n        {% block box_title %}PHP{% endblock %}\n        {% block box_body_class %}no-padding{% endblock %}\n        {% block box_body %}\n            <table class=\"table table-hover\">\n                <tr>\n                    <th style=\"width:15%\">Version</th>\n                    <td>{{ constant('PHP_VERSION') }}</td>\n                </tr>\n                <tr>\n                    <th style=\"width:15%;max-width:25%\">Modules</th>\n                    <td>{{ modules|join(', ') }}</td>\n                </tr>\n                {% for name, value in settings %}\n                    <tr>\n                        <th style=\"width:15%\">{{ name }}</th>\n                        <td>\n                            {% if value is empty %}\n                                <i>unknown</i>\n                            {% else %}\n                                {{ value }}\n                            {% endif %}\n                        </td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' with {collapsed: true} %}\n        {% block box_title %}Server{% endblock %}\n        {% block box_body_class %}no-padding{% endblock %}\n        {% block box_body %}\n            <table class=\"table table-hover\">\n                {% for name, value in info %}\n                    <tr>\n                        <th style=\"width:15%\">{{ name }}</th>\n                        <td>{{ value|raw }}</td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n{% endblock %}\n"], "filenames": ["src/Controller/DoctorController.php", "templates/doctor/index.html.twig"], "buggy_code_start_loc": [17, 83], "buggy_code_end_loc": [64, 84], "fixing_code_start_loc": [18, 83], "fixing_code_end_loc": [74, 84], "type": "CWE-352", "message": "kimai2 is vulnerable to Cross-Site Request Forgery (CSRF)", "other": {"cve": {"id": "CVE-2021-3957", "sourceIdentifier": "security@huntr.dev", "published": "2021-11-19T12:15:08.977", "lastModified": "2021-11-23T18:17:26.663", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "kimai2 is vulnerable to Cross-Site Request Forgery (CSRF)"}, {"lang": "es", "value": "kimai2 es vulnerable a un ataque de tipo Cross-Site Request Forgery (CSRF)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kimai:kimai_2:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.16.2", "matchCriteriaId": "18DE946F-C2DA-4605-B44E-49B5DC42961C"}]}]}], "references": [{"url": "https://github.com/kevinpapst/kimai2/commit/6b49535b523dcd36ec59462ee4e67e2b3a9151f3", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/5fa3098a-ba02-45e0-af56-645e34dbc691", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kevinpapst/kimai2/commit/6b49535b523dcd36ec59462ee4e67e2b3a9151f3"}}