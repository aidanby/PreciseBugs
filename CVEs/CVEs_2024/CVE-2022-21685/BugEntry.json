{"buggy_code": ["// SPDX-License-Identifier: Apache-2.0\n// This file is part of Frontier.\n//\n// Copyright (c) 2020 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// \thttp://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#![cfg_attr(not(feature = \"std\"), no_std)]\n\nextern crate alloc;\n\nuse alloc::vec::Vec;\nuse fp_evm::{\n\tContext, ExitError, ExitSucceed, Precompile, PrecompileFailure, PrecompileOutput,\n\tPrecompileResult,\n};\nuse num::{BigUint, FromPrimitive, One, ToPrimitive, Zero};\n\nuse core::{cmp::max, ops::BitAnd};\n\npub struct Modexp;\n\nconst MIN_GAS_COST: u64 = 200;\n\n// Calculate gas cost according to EIP 2565:\n// https://eips.ethereum.org/EIPS/eip-2565\nfn calculate_gas_cost(\n\tbase_length: u64,\n\texp_length: u64,\n\tmod_length: u64,\n\texponent: &BigUint,\n) -> u64 {\n\tfn calculate_multiplication_complexity(base_length: u64, mod_length: u64) -> u64 {\n\t\tlet max_length = max(base_length, mod_length);\n\t\tlet mut words = max_length / 8;\n\t\tif max_length % 8 > 0 {\n\t\t\twords += 1;\n\t\t}\n\n\t\t// TODO: prevent/handle overflow\n\t\twords * words\n\t}\n\n\tfn calculate_iteration_count(exp_length: u64, exponent: &BigUint) -> u64 {\n\t\tlet mut iteration_count: u64 = 0;\n\n\t\tif exp_length <= 32 && exponent.is_zero() {\n\t\t\titeration_count = 0;\n\t\t} else if exp_length <= 32 {\n\t\t\titeration_count = exponent.bits() - 1;\n\t\t} else if exp_length > 32 {\n\t\t\t// construct BigUint to represent (2^256) - 1\n\t\t\tlet bytes: [u8; 32] = [0xFF; 32];\n\t\t\tlet max_256_bit_uint = BigUint::from_bytes_be(&bytes);\n\n\t\t\titeration_count =\n\t\t\t\t(8 * (exp_length - 32)) + ((exponent.bitand(max_256_bit_uint)).bits() - 1);\n\t\t}\n\n\t\tmax(iteration_count, 1)\n\t}\n\n\tlet multiplication_complexity = calculate_multiplication_complexity(base_length, mod_length);\n\tlet iteration_count = calculate_iteration_count(exp_length, exponent);\n\tlet gas = max(\n\t\tMIN_GAS_COST,\n\t\tmultiplication_complexity * iteration_count / 3,\n\t);\n\n\tgas\n}\n\n// ModExp expects the following as inputs:\n// 1) 32 bytes expressing the length of base\n// 2) 32 bytes expressing the length of exponent\n// 3) 32 bytes expressing the length of modulus\n// 4) base, size as described above\n// 5) exponent, size as described above\n// 6) modulus, size as described above\n//\n//\n// NOTE: input sizes are arbitrarily large (up to 256 bits), with the expectation\n//       that gas limits would be applied before actual computation.\n//\n//       maximum stack size will also prevent abuse.\n//\n//       see: https://eips.ethereum.org/EIPS/eip-198\n\nimpl Precompile for Modexp {\n\tfn execute(\n\t\tinput: &[u8],\n\t\ttarget_gas: Option<u64>,\n\t\t_context: &Context,\n\t\t_is_static: bool,\n\t) -> PrecompileResult {\n\t\tif input.len() < 96 {\n\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"input must contain at least 96 bytes\".into()),\n\t\t\t});\n\t\t};\n\n\t\t// reasonable assumption: this must fit within the Ethereum EVM's max stack size\n\t\tlet max_size_big = BigUint::from_u32(1024).expect(\"can't create BigUint\");\n\n\t\tlet mut buf = [0; 32];\n\t\tbuf.copy_from_slice(&input[0..32]);\n\t\tlet base_len_big = BigUint::from_bytes_be(&buf);\n\t\tif base_len_big > max_size_big {\n\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"unreasonably large base length\".into()),\n\t\t\t});\n\t\t}\n\n\t\tbuf.copy_from_slice(&input[32..64]);\n\t\tlet exp_len_big = BigUint::from_bytes_be(&buf);\n\t\tif exp_len_big > max_size_big {\n\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"unreasonably large exponent length\".into()),\n\t\t\t});\n\t\t}\n\n\t\tbuf.copy_from_slice(&input[64..96]);\n\t\tlet mod_len_big = BigUint::from_bytes_be(&buf);\n\t\tif mod_len_big > max_size_big {\n\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"unreasonably large exponent length\".into()),\n\t\t\t});\n\t\t}\n\n\t\t// bounds check handled above\n\t\tlet base_len = base_len_big.to_usize().expect(\"base_len out of bounds\");\n\t\tlet exp_len = exp_len_big.to_usize().expect(\"exp_len out of bounds\");\n\t\tlet mod_len = mod_len_big.to_usize().expect(\"mod_len out of bounds\");\n\n\t\t// input length should be at least 96 + user-specified length of base + exp + mod\n\t\tlet total_len = base_len + exp_len + mod_len + 96;\n\t\tif input.len() < total_len {\n\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"insufficient input size\".into()),\n\t\t\t});\n\t\t}\n\n\t\t// Gas formula allows arbitrary large exp_len when base and modulus are empty, so we need to handle empty base first.\n\t\tlet (r, gas_cost) = if base_len == 0 && mod_len == 0 {\n\t\t\t(BigUint::zero(), MIN_GAS_COST)\n\t\t} else {\n\t\t\t// read the numbers themselves.\n\t\t\tlet base_start = 96; // previous 3 32-byte fields\n\t\t\tlet base = BigUint::from_bytes_be(&input[base_start..base_start + base_len]);\n\n\t\t\tlet exp_start = base_start + base_len;\n\t\t\tlet exponent = BigUint::from_bytes_be(&input[exp_start..exp_start + exp_len]);\n\n\t\t\t// do our gas accounting\n\t\t\t// TODO: we could technically avoid reading base first...\n\t\t\tlet gas_cost =\n\t\t\t\tcalculate_gas_cost(base_len as u64, exp_len as u64, mod_len as u64, &exponent);\n\t\t\tif let Some(gas_left) = target_gas {\n\t\t\t\tif gas_left < gas_cost {\n\t\t\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\t\t\texit_status: ExitError::OutOfGas,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlet mod_start = exp_start + exp_len;\n\t\t\tlet modulus = BigUint::from_bytes_be(&input[mod_start..mod_start + mod_len]);\n\n\t\t\tif modulus.is_zero() || modulus.is_one() {\n\t\t\t\t(BigUint::zero(), gas_cost)\n\t\t\t} else {\n\t\t\t\t(base.modpow(&exponent, &modulus), gas_cost)\n\t\t\t}\n\t\t};\n\n\t\t// write output to given memory, left padded and same length as the modulus.\n\t\tlet bytes = r.to_bytes_be();\n\n\t\t// always true except in the case of zero-length modulus, which leads to\n\t\t// output of length and value 1.\n\t\tif bytes.len() == mod_len {\n\t\t\tOk(PrecompileOutput {\n\t\t\t\texit_status: ExitSucceed::Returned,\n\t\t\t\tcost: gas_cost,\n\t\t\t\toutput: bytes.to_vec(),\n\t\t\t\tlogs: Default::default(),\n\t\t\t})\n\t\t} else if bytes.len() < mod_len {\n\t\t\tlet mut ret = Vec::with_capacity(mod_len);\n\t\t\tret.extend(core::iter::repeat(0).take(mod_len - bytes.len()));\n\t\t\tret.extend_from_slice(&bytes[..]);\n\t\t\tOk(PrecompileOutput {\n\t\t\t\texit_status: ExitSucceed::Returned,\n\t\t\t\tcost: gas_cost,\n\t\t\t\toutput: ret.to_vec(),\n\t\t\t\tlogs: Default::default(),\n\t\t\t})\n\t\t} else {\n\t\t\tErr(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"failed\".into()),\n\t\t\t})\n\t\t}\n\t}\n}\n\n#[cfg(test)]\nmod tests {\n\tuse super::*;\n\textern crate hex;\n\tuse pallet_evm_test_vector_support::test_precompile_test_vectors;\n\n\t#[test]\n\tfn process_consensus_tests() -> std::result::Result<(), String> {\n\t\ttest_precompile_test_vectors::<Modexp>(\"../testdata/modexp_eip2565.json\")?;\n\t\tOk(())\n\t}\n\n\t#[test]\n\tfn test_empty_input() -> std::result::Result<(), PrecompileFailure> {\n\t\tlet input: [u8; 0] = [];\n\n\t\tlet cost: u64 = 1;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(_) => {\n\t\t\t\tpanic!(\"Test not expected to pass\");\n\t\t\t}\n\t\t\tErr(e) => {\n\t\t\t\tassert_eq!(\n\t\t\t\t\te,\n\t\t\t\t\tPrecompileFailure::Error {\n\t\t\t\t\t\texit_status: ExitError::Other(\n\t\t\t\t\t\t\t\"input must contain at least 96 bytes\".into()\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tOk(())\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_insufficient_input() -> std::result::Result<(), PrecompileFailure> {\n\t\tlet input = hex::decode(\n\t\t\t\"0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\",\n\t\t)\n\t\t.expect(\"Decode failed\");\n\n\t\tlet cost: u64 = 1;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(_) => {\n\t\t\t\tpanic!(\"Test not expected to pass\");\n\t\t\t}\n\t\t\tErr(e) => {\n\t\t\t\tassert_eq!(\n\t\t\t\t\te,\n\t\t\t\t\tPrecompileFailure::Error {\n\t\t\t\t\t\texit_status: ExitError::Other(\"insufficient input size\".into())\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tOk(())\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_excessive_input() -> std::result::Result<(), PrecompileFailure> {\n\t\tlet input = hex::decode(\n\t\t\t\"1000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\",\n\t\t)\n\t\t.expect(\"Decode failed\");\n\n\t\tlet cost: u64 = 1;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(_) => {\n\t\t\t\tpanic!(\"Test not expected to pass\");\n\t\t\t}\n\t\t\tErr(e) => {\n\t\t\t\tassert_eq!(\n\t\t\t\t\te,\n\t\t\t\t\tPrecompileFailure::Error {\n\t\t\t\t\t\texit_status: ExitError::Other(\"unreasonably large base length\".into())\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tOk(())\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_simple_inputs() {\n\t\tlet input = hex::decode(\n\t\t\t\"0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t03\\\n\t\t\t05\\\n\t\t\t07\",\n\t\t)\n\t\t.expect(\"Decode failed\");\n\n\t\t// 3 ^ 5 % 7 == 5\n\n\t\tlet cost: u64 = 100000;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(precompile_result) => {\n\t\t\t\tassert_eq!(precompile_result.output.len(), 1); // should be same length as mod\n\t\t\t\tlet result = BigUint::from_bytes_be(&precompile_result.output[..]);\n\t\t\t\tlet expected = BigUint::parse_bytes(b\"5\", 10).unwrap();\n\t\t\t\tassert_eq!(result, expected);\n\t\t\t}\n\t\t\tErr(_) => {\n\t\t\t\tpanic!(\"Modexp::execute() returned error\"); // TODO: how to pass error on?\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_large_inputs() {\n\t\tlet input = hex::decode(\n\t\t\t\"0000000000000000000000000000000000000000000000000000000000000020\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000020\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000020\\\n\t\t\t000000000000000000000000000000000000000000000000000000000000EA5F\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000015\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000003874\",\n\t\t)\n\t\t.expect(\"Decode failed\");\n\n\t\t// 59999 ^ 21 % 14452 = 10055\n\n\t\tlet cost: u64 = 100000;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(precompile_result) => {\n\t\t\t\tassert_eq!(precompile_result.output.len(), 32); // should be same length as mod\n\t\t\t\tlet result = BigUint::from_bytes_be(&precompile_result.output[..]);\n\t\t\t\tlet expected = BigUint::parse_bytes(b\"10055\", 10).unwrap();\n\t\t\t\tassert_eq!(result, expected);\n\t\t\t}\n\t\t\tErr(_) => {\n\t\t\t\tpanic!(\"Modexp::execute() returned error\"); // TODO: how to pass error on?\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_large_computation() {\n\t\tlet input = hex::decode(\n\t\t\t\"0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000020\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000020\\\n\t\t\t03\\\n\t\t\tfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e\\\n\t\t\tfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\",\n\t\t)\n\t\t.expect(\"Decode failed\");\n\n\t\tlet cost: u64 = 100000;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(precompile_result) => {\n\t\t\t\tassert_eq!(precompile_result.output.len(), 32); // should be same length as mod\n\t\t\t\tlet result = BigUint::from_bytes_be(&precompile_result.output[..]);\n\t\t\t\tlet expected = BigUint::parse_bytes(b\"1\", 10).unwrap();\n\t\t\t\tassert_eq!(result, expected);\n\t\t\t}\n\t\t\tErr(_) => {\n\t\t\t\tpanic!(\"Modexp::execute() returned error\"); // TODO: how to pass error on?\n\t\t\t}\n\t\t}\n\t}\n}\n"], "fixing_code": ["// SPDX-License-Identifier: Apache-2.0\n// This file is part of Frontier.\n//\n// Copyright (c) 2020 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// \thttp://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#![cfg_attr(not(feature = \"std\"), no_std)]\n\nextern crate alloc;\n\nuse alloc::vec::Vec;\nuse fp_evm::{\n\tContext, ExitError, ExitSucceed, Precompile, PrecompileFailure, PrecompileOutput,\n\tPrecompileResult,\n};\nuse num::{BigUint, FromPrimitive, One, ToPrimitive, Zero};\n\nuse core::{cmp::max, ops::BitAnd};\n\npub struct Modexp;\n\nconst MIN_GAS_COST: u64 = 200;\n\n// Calculate gas cost according to EIP 2565:\n// https://eips.ethereum.org/EIPS/eip-2565\nfn calculate_gas_cost(\n\tbase_length: u64,\n\texp_length: u64,\n\tmod_length: u64,\n\texponent: &BigUint,\n) -> u64 {\n\tfn calculate_multiplication_complexity(base_length: u64, mod_length: u64) -> u64 {\n\t\tlet max_length = max(base_length, mod_length);\n\t\tlet mut words = max_length / 8;\n\t\tif max_length % 8 > 0 {\n\t\t\twords += 1;\n\t\t}\n\n\t\t// Note: can't overflow because we take words to be some u64 value / 8, which is\n\t\t// necessarily less than sqrt(u64::MAX).\n\t\t// Additionally, both base_length and mod_length are bounded to 1024, so this has\n\t\t// an upper bound of roughly (1024 / 8) squared\n\t\twords * words\n\t}\n\n\tfn calculate_iteration_count(exp_length: u64, exponent: &BigUint) -> u64 {\n\t\tlet mut iteration_count: u64 = 0;\n\n\t\tif exp_length <= 32 && exponent.is_zero() {\n\t\t\titeration_count = 0;\n\t\t} else if exp_length <= 32 {\n\t\t\titeration_count = exponent.bits() - 1;\n\t\t} else if exp_length > 32 {\n\t\t\t// construct BigUint to represent (2^256) - 1\n\t\t\tlet bytes: [u8; 32] = [0xFF; 32];\n\t\t\tlet max_256_bit_uint = BigUint::from_bytes_be(&bytes);\n\n\t\t\t// from the EIP spec:\n\t\t\t// (8 * (exp_length - 32)) + ((exponent & (2**256 - 1)).bit_length() - 1)\n\t\t\t//\n\t\t\t// Notes:\n\t\t\t// * exp_length is bounded to 1024 and is > 32\n\t\t\t// * exponent can be zero, so we subtract 1 after adding the other terms (whose sum\n\t\t\t//   must be > 0)\n\t\t\t// * the addition can't overflow because the terms are both capped at roughly\n\t\t\t//   8 * max size of exp_length (1024)\n\t\t\titeration_count =\n\t\t\t\t(8 * (exp_length - 32)) + exponent.bitand(max_256_bit_uint).bits() - 1;\n\t\t}\n\n\t\tmax(iteration_count, 1)\n\t}\n\n\tlet multiplication_complexity = calculate_multiplication_complexity(base_length, mod_length);\n\tlet iteration_count = calculate_iteration_count(exp_length, exponent);\n\tlet gas = max(\n\t\tMIN_GAS_COST,\n\t\tmultiplication_complexity * iteration_count / 3,\n\t);\n\n\tgas\n}\n\n// ModExp expects the following as inputs:\n// 1) 32 bytes expressing the length of base\n// 2) 32 bytes expressing the length of exponent\n// 3) 32 bytes expressing the length of modulus\n// 4) base, size as described above\n// 5) exponent, size as described above\n// 6) modulus, size as described above\n//\n//\n// NOTE: input sizes are bound to 1024 bytes, with the expectation\n//       that gas limits would be applied before actual computation.\n//\n//       maximum stack size will also prevent abuse.\n//\n//       see: https://eips.ethereum.org/EIPS/eip-198\n\nimpl Precompile for Modexp {\n\tfn execute(\n\t\tinput: &[u8],\n\t\ttarget_gas: Option<u64>,\n\t\t_context: &Context,\n\t\t_is_static: bool,\n\t) -> PrecompileResult {\n\t\tif input.len() < 96 {\n\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"input must contain at least 96 bytes\".into()),\n\t\t\t});\n\t\t};\n\n\t\t// reasonable assumption: this must fit within the Ethereum EVM's max stack size\n\t\tlet max_size_big = BigUint::from_u32(1024).expect(\"can't create BigUint\");\n\n\t\tlet mut buf = [0; 32];\n\t\tbuf.copy_from_slice(&input[0..32]);\n\t\tlet base_len_big = BigUint::from_bytes_be(&buf);\n\t\tif base_len_big > max_size_big {\n\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"unreasonably large base length\".into()),\n\t\t\t});\n\t\t}\n\n\t\tbuf.copy_from_slice(&input[32..64]);\n\t\tlet exp_len_big = BigUint::from_bytes_be(&buf);\n\t\tif exp_len_big > max_size_big {\n\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"unreasonably large exponent length\".into()),\n\t\t\t});\n\t\t}\n\n\t\tbuf.copy_from_slice(&input[64..96]);\n\t\tlet mod_len_big = BigUint::from_bytes_be(&buf);\n\t\tif mod_len_big > max_size_big {\n\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"unreasonably large modulus length\".into()),\n\t\t\t});\n\t\t}\n\n\t\t// bounds check handled above\n\t\tlet base_len = base_len_big.to_usize().expect(\"base_len out of bounds\");\n\t\tlet exp_len = exp_len_big.to_usize().expect(\"exp_len out of bounds\");\n\t\tlet mod_len = mod_len_big.to_usize().expect(\"mod_len out of bounds\");\n\n\t\t// input length should be at least 96 + user-specified length of base + exp + mod\n\t\tlet total_len = base_len + exp_len + mod_len + 96;\n\t\tif input.len() < total_len {\n\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"insufficient input size\".into()),\n\t\t\t});\n\t\t}\n\n\t\t// Gas formula allows arbitrary large exp_len when base and modulus are empty, so we need to handle empty base first.\n\t\tlet (r, gas_cost) = if base_len == 0 && mod_len == 0 {\n\t\t\t(BigUint::zero(), MIN_GAS_COST)\n\t\t} else {\n\t\t\t// read the numbers themselves.\n\t\t\tlet base_start = 96; // previous 3 32-byte fields\n\t\t\tlet base = BigUint::from_bytes_be(&input[base_start..base_start + base_len]);\n\n\t\t\tlet exp_start = base_start + base_len;\n\t\t\tlet exponent = BigUint::from_bytes_be(&input[exp_start..exp_start + exp_len]);\n\n\t\t\t// do our gas accounting\n\t\t\tlet gas_cost =\n\t\t\t\tcalculate_gas_cost(base_len as u64, exp_len as u64, mod_len as u64, &exponent);\n\t\t\tif let Some(gas_left) = target_gas {\n\t\t\t\tif gas_left < gas_cost {\n\t\t\t\t\treturn Err(PrecompileFailure::Error {\n\t\t\t\t\t\texit_status: ExitError::OutOfGas,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlet mod_start = exp_start + exp_len;\n\t\t\tlet modulus = BigUint::from_bytes_be(&input[mod_start..mod_start + mod_len]);\n\n\t\t\tif modulus.is_zero() || modulus.is_one() {\n\t\t\t\t(BigUint::zero(), gas_cost)\n\t\t\t} else {\n\t\t\t\t(base.modpow(&exponent, &modulus), gas_cost)\n\t\t\t}\n\t\t};\n\n\t\t// write output to given memory, left padded and same length as the modulus.\n\t\tlet bytes = r.to_bytes_be();\n\n\t\t// always true except in the case of zero-length modulus, which leads to\n\t\t// output of length and value 1.\n\t\tif bytes.len() == mod_len {\n\t\t\tOk(PrecompileOutput {\n\t\t\t\texit_status: ExitSucceed::Returned,\n\t\t\t\tcost: gas_cost,\n\t\t\t\toutput: bytes.to_vec(),\n\t\t\t\tlogs: Default::default(),\n\t\t\t})\n\t\t} else if bytes.len() < mod_len {\n\t\t\tlet mut ret = Vec::with_capacity(mod_len);\n\t\t\tret.extend(core::iter::repeat(0).take(mod_len - bytes.len()));\n\t\t\tret.extend_from_slice(&bytes[..]);\n\t\t\tOk(PrecompileOutput {\n\t\t\t\texit_status: ExitSucceed::Returned,\n\t\t\t\tcost: gas_cost,\n\t\t\t\toutput: ret.to_vec(),\n\t\t\t\tlogs: Default::default(),\n\t\t\t})\n\t\t} else {\n\t\t\tErr(PrecompileFailure::Error {\n\t\t\t\texit_status: ExitError::Other(\"failed\".into()),\n\t\t\t})\n\t\t}\n\t}\n}\n\n#[cfg(test)]\nmod tests {\n\tuse super::*;\n\textern crate hex;\n\tuse pallet_evm_test_vector_support::test_precompile_test_vectors;\n\n\t#[test]\n\tfn process_consensus_tests() -> std::result::Result<(), String> {\n\t\ttest_precompile_test_vectors::<Modexp>(\"../testdata/modexp_eip2565.json\")?;\n\t\tOk(())\n\t}\n\n\t#[test]\n\tfn test_empty_input() -> std::result::Result<(), PrecompileFailure> {\n\t\tlet input: [u8; 0] = [];\n\n\t\tlet cost: u64 = 1;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(_) => {\n\t\t\t\tpanic!(\"Test not expected to pass\");\n\t\t\t}\n\t\t\tErr(e) => {\n\t\t\t\tassert_eq!(\n\t\t\t\t\te,\n\t\t\t\t\tPrecompileFailure::Error {\n\t\t\t\t\t\texit_status: ExitError::Other(\n\t\t\t\t\t\t\t\"input must contain at least 96 bytes\".into()\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tOk(())\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_insufficient_input() -> std::result::Result<(), PrecompileFailure> {\n\t\tlet input = hex::decode(\n\t\t\t\"0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\",\n\t\t)\n\t\t.expect(\"Decode failed\");\n\n\t\tlet cost: u64 = 1;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(_) => {\n\t\t\t\tpanic!(\"Test not expected to pass\");\n\t\t\t}\n\t\t\tErr(e) => {\n\t\t\t\tassert_eq!(\n\t\t\t\t\te,\n\t\t\t\t\tPrecompileFailure::Error {\n\t\t\t\t\t\texit_status: ExitError::Other(\"insufficient input size\".into())\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tOk(())\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_excessive_input() -> std::result::Result<(), PrecompileFailure> {\n\t\tlet input = hex::decode(\n\t\t\t\"1000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\",\n\t\t)\n\t\t.expect(\"Decode failed\");\n\n\t\tlet cost: u64 = 1;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(_) => {\n\t\t\t\tpanic!(\"Test not expected to pass\");\n\t\t\t}\n\t\t\tErr(e) => {\n\t\t\t\tassert_eq!(\n\t\t\t\t\te,\n\t\t\t\t\tPrecompileFailure::Error {\n\t\t\t\t\t\texit_status: ExitError::Other(\"unreasonably large base length\".into())\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tOk(())\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_simple_inputs() {\n\t\tlet input = hex::decode(\n\t\t\t\"0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t03\\\n\t\t\t05\\\n\t\t\t07\",\n\t\t)\n\t\t.expect(\"Decode failed\");\n\n\t\t// 3 ^ 5 % 7 == 5\n\n\t\tlet cost: u64 = 100000;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(precompile_result) => {\n\t\t\t\tassert_eq!(precompile_result.output.len(), 1); // should be same length as mod\n\t\t\t\tlet result = BigUint::from_bytes_be(&precompile_result.output[..]);\n\t\t\t\tlet expected = BigUint::parse_bytes(b\"5\", 10).unwrap();\n\t\t\t\tassert_eq!(result, expected);\n\t\t\t}\n\t\t\tErr(_) => {\n\t\t\t\tpanic!(\"Modexp::execute() returned error\"); // TODO: how to pass error on?\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_large_inputs() {\n\t\tlet input = hex::decode(\n\t\t\t\"0000000000000000000000000000000000000000000000000000000000000020\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000020\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000020\\\n\t\t\t000000000000000000000000000000000000000000000000000000000000EA5F\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000015\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000003874\",\n\t\t)\n\t\t.expect(\"Decode failed\");\n\n\t\t// 59999 ^ 21 % 14452 = 10055\n\n\t\tlet cost: u64 = 100000;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(precompile_result) => {\n\t\t\t\tassert_eq!(precompile_result.output.len(), 32); // should be same length as mod\n\t\t\t\tlet result = BigUint::from_bytes_be(&precompile_result.output[..]);\n\t\t\t\tlet expected = BigUint::parse_bytes(b\"10055\", 10).unwrap();\n\t\t\t\tassert_eq!(result, expected);\n\t\t\t}\n\t\t\tErr(_) => {\n\t\t\t\tpanic!(\"Modexp::execute() returned error\"); // TODO: how to pass error on?\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_large_computation() {\n\t\tlet input = hex::decode(\n\t\t\t\"0000000000000000000000000000000000000000000000000000000000000001\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000020\\\n\t\t\t0000000000000000000000000000000000000000000000000000000000000020\\\n\t\t\t03\\\n\t\t\tfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e\\\n\t\t\tfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\",\n\t\t)\n\t\t.expect(\"Decode failed\");\n\n\t\tlet cost: u64 = 100000;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tmatch Modexp::execute(&input, Some(cost), &context, false) {\n\t\t\tOk(precompile_result) => {\n\t\t\t\tassert_eq!(precompile_result.output.len(), 32); // should be same length as mod\n\t\t\t\tlet result = BigUint::from_bytes_be(&precompile_result.output[..]);\n\t\t\t\tlet expected = BigUint::parse_bytes(b\"1\", 10).unwrap();\n\t\t\t\tassert_eq!(result, expected);\n\t\t\t}\n\t\t\tErr(_) => {\n\t\t\t\tpanic!(\"Modexp::execute() returned error\"); // TODO: how to pass error on?\n\t\t\t}\n\t\t}\n\t}\n\n\t#[test]\n\tfn test_zero_exp_with_33_length() {\n\t\t// This is a regression test which ensures that the 'iteration_count' calculation\n\t\t// in 'calculate_iteration_count' cannot underflow.\n\t\t//\n\t\t// In debug mode, this underflow could cause a panic. Otherwise, it causes N**0 to\n\t\t// be calculated at more-than-normal expense.\n\t\t//\n\t\t// TODO: cite security advisory\n\n\t\tlet input = vec![\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n\t\t];\n\n\t\tlet cost: u64 = 100000;\n\n\t\tlet context: Context = Context {\n\t\t\taddress: Default::default(),\n\t\t\tcaller: Default::default(),\n\t\t\tapparent_value: From::from(0),\n\t\t};\n\n\t\tlet precompile_result = Modexp::execute(&input, Some(cost), &context, false)\n\t\t\t.expect(\"Modexp::execute() returned error\");\n\n\t\tassert_eq!(precompile_result.output.len(), 1); // should be same length as mod\n\t\tlet result = BigUint::from_bytes_be(&precompile_result.output[..]);\n\t\tlet expected = BigUint::parse_bytes(b\"0\", 10).unwrap();\n\t\tassert_eq!(result, expected);\n\t}\n}\n"], "filenames": ["frame/evm/precompile/modexp/src/lib.rs"], "buggy_code_start_loc": [50], "buggy_code_end_loc": [425], "fixing_code_start_loc": [50], "fixing_code_end_loc": [472], "type": "CWE-191", "message": "Frontier is Substrate's Ethereum compatibility layer. Prior to commit number `8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664`, a bug in Frontier's MODEXP precompile implementation can cause an integer underflow in certain conditions. This will cause a node crash for debug builds. For release builds (and production WebAssembly binaries), the impact is limited as it can only cause a normal EVM out-of-gas. Users who do not use MODEXP precompile in their runtime are not impacted. A patch is available in pull request #549.", "other": {"cve": {"id": "CVE-2022-21685", "sourceIdentifier": "security-advisories@github.com", "published": "2022-01-14T17:15:13.333", "lastModified": "2022-01-21T20:40:36.573", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Frontier is Substrate's Ethereum compatibility layer. Prior to commit number `8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664`, a bug in Frontier's MODEXP precompile implementation can cause an integer underflow in certain conditions. This will cause a node crash for debug builds. For release builds (and production WebAssembly binaries), the impact is limited as it can only cause a normal EVM out-of-gas. Users who do not use MODEXP precompile in their runtime are not impacted. A patch is available in pull request #549."}, {"lang": "es", "value": "Frontier es la capa de compatibilidad con Ethereum de Substrate. Antes del n\u00famero de commit \"8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664\", un error en la implementaci\u00f3n de precompilaci\u00f3n MODEXP de Frontier puede causar un desbordamiento de enteros en determinadas condiciones. Esto causar\u00e1 un bloqueo del nodo en las versiones de depuraci\u00f3n. Para las compilaciones de lanzamiento (y los binarios WebAssembly de producci\u00f3n), el impacto es limitado, ya que s\u00f3lo puede causar un desbordamiento normal de EVM. Los usuarios que no usan la precompilaci\u00f3n MODEXP en su tiempo de ejecuci\u00f3n no est\u00e1n afectados. Un parche est\u00e1 disponible en el pull request #549"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-191"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-191"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:parity:frontier:*:*:*:*:*:*:*:*", "versionEndIncluding": "2022-01-13", "matchCriteriaId": "3A4B1256-AD46-4572-AAD3-0E35CA31193E"}]}]}], "references": [{"url": "https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/paritytech/frontier/pull/549", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/paritytech/frontier/security/advisories/GHSA-cjg2-2fjg-fph4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664"}}