{"buggy_code": ["<?php\n/**\n * Main WordPress Formatting API.\n *\n * Handles many functions for formatting output.\n *\n * @package WordPress\n */\n\n/**\n * Replaces common plain text characters into formatted entities\n *\n * As an example,\n *\n *     'cause today's effort makes it worth tomorrow's \"holiday\" ...\n *\n * Becomes:\n *\n *     &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221; &#8230;\n *\n * Code within certain html blocks are skipped.\n *\n * Do not use this function before the {@see 'init'} action hook; everything will break.\n *\n * @since 0.71\n *\n * @global array $wp_cockneyreplace Array of formatted entities for certain common phrases\n * @global array $shortcode_tags\n * @staticvar array  $static_characters\n * @staticvar array  $static_replacements\n * @staticvar array  $dynamic_characters\n * @staticvar array  $dynamic_replacements\n * @staticvar array  $default_no_texturize_tags\n * @staticvar array  $default_no_texturize_shortcodes\n * @staticvar bool   $run_texturize\n * @staticvar string $apos\n * @staticvar string $prime\n * @staticvar string $double_prime\n * @staticvar string $opening_quote\n * @staticvar string $closing_quote\n * @staticvar string $opening_single_quote\n * @staticvar string $closing_single_quote\n * @staticvar string $open_q_flag\n * @staticvar string $open_sq_flag\n * @staticvar string $apos_flag\n *\n * @param string $text The text to be formatted\n * @param bool   $reset Set to true for unit testing. Translated patterns will reset.\n * @return string The string replaced with html entities\n */\nfunction wptexturize( $text, $reset = false ) {\n\tglobal $wp_cockneyreplace, $shortcode_tags;\n\tstatic $static_characters = null,\n\t\t$static_replacements = null,\n\t\t$dynamic_characters = null,\n\t\t$dynamic_replacements = null,\n\t\t$default_no_texturize_tags = null,\n\t\t$default_no_texturize_shortcodes = null,\n\t\t$run_texturize = true,\n\t\t$apos = null,\n\t\t$prime = null,\n\t\t$double_prime = null,\n\t\t$opening_quote = null,\n\t\t$closing_quote = null,\n\t\t$opening_single_quote = null,\n\t\t$closing_single_quote = null,\n\t\t$open_q_flag = '<!--oq-->',\n\t\t$open_sq_flag = '<!--osq-->',\n\t\t$apos_flag = '<!--apos-->';\n\n\t// If there's nothing to do, just stop.\n\tif ( empty( $text ) || false === $run_texturize ) {\n\t\treturn $text;\n\t}\n\n\t// Set up static variables. Run once only.\n\tif ( $reset || ! isset( $static_characters ) ) {\n\t\t/**\n\t\t * Filters whether to skip running wptexturize().\n\t\t *\n\t\t * Passing false to the filter will effectively short-circuit wptexturize().\n\t\t * returning the original text passed to the function instead.\n\t\t *\n\t\t * The filter runs only once, the first time wptexturize() is called.\n\t\t *\n\t\t * @since 4.0.0\n\t\t *\n\t\t * @see wptexturize()\n\t\t *\n\t\t * @param bool $run_texturize Whether to short-circuit wptexturize().\n\t\t */\n\t\t$run_texturize = apply_filters( 'run_wptexturize', $run_texturize );\n\t\tif ( false === $run_texturize ) {\n\t\t\treturn $text;\n\t\t}\n\n\t\t/* translators: opening curly double quote */\n\t\t$opening_quote = _x( '&#8220;', 'opening curly double quote' );\n\t\t/* translators: closing curly double quote */\n\t\t$closing_quote = _x( '&#8221;', 'closing curly double quote' );\n\n\t\t/* translators: apostrophe, for example in 'cause or can't */\n\t\t$apos = _x( '&#8217;', 'apostrophe' );\n\n\t\t/* translators: prime, for example in 9' (nine feet) */\n\t\t$prime = _x( '&#8242;', 'prime' );\n\t\t/* translators: double prime, for example in 9\" (nine inches) */\n\t\t$double_prime = _x( '&#8243;', 'double prime' );\n\n\t\t/* translators: opening curly single quote */\n\t\t$opening_single_quote = _x( '&#8216;', 'opening curly single quote' );\n\t\t/* translators: closing curly single quote */\n\t\t$closing_single_quote = _x( '&#8217;', 'closing curly single quote' );\n\n\t\t/* translators: en dash */\n\t\t$en_dash = _x( '&#8211;', 'en dash' );\n\t\t/* translators: em dash */\n\t\t$em_dash = _x( '&#8212;', 'em dash' );\n\n\t\t$default_no_texturize_tags = array('pre', 'code', 'kbd', 'style', 'script', 'tt');\n\t\t$default_no_texturize_shortcodes = array('code');\n\n\t\t// if a plugin has provided an autocorrect array, use it\n\t\tif ( isset($wp_cockneyreplace) ) {\n\t\t\t$cockney = array_keys( $wp_cockneyreplace );\n\t\t\t$cockneyreplace = array_values( $wp_cockneyreplace );\n\t\t} else {\n\t\t\t/* translators: This is a comma-separated list of words that defy the syntax of quotations in normal use,\n\t\t\t * for example...  'We do not have enough words yet' ... is a typical quoted phrase.  But when we write\n\t\t\t * lines of code 'til we have enough of 'em, then we need to insert apostrophes instead of quotes.\n\t\t\t */\n\t\t\t$cockney = explode( ',', _x( \"'tain't,'twere,'twas,'tis,'twill,'til,'bout,'nuff,'round,'cause,'em\",\n\t\t\t\t'Comma-separated list of words to texturize in your language' ) );\n\n\t\t\t$cockneyreplace = explode( ',', _x( '&#8217;tain&#8217;t,&#8217;twere,&#8217;twas,&#8217;tis,&#8217;twill,&#8217;til,&#8217;bout,&#8217;nuff,&#8217;round,&#8217;cause,&#8217;em',\n\t\t\t\t'Comma-separated list of replacement words in your language' ) );\n\t\t}\n\n\t\t$static_characters = array_merge( array( '...', '``', '\\'\\'', ' (tm)' ), $cockney );\n\t\t$static_replacements = array_merge( array( '&#8230;', $opening_quote, $closing_quote, ' &#8482;' ), $cockneyreplace );\n\n\n\t\t// Pattern-based replacements of characters.\n\t\t// Sort the remaining patterns into several arrays for performance tuning.\n\t\t$dynamic_characters = array( 'apos' => array(), 'quote' => array(), 'dash' => array() );\n\t\t$dynamic_replacements = array( 'apos' => array(), 'quote' => array(), 'dash' => array() );\n\t\t$dynamic = array();\n\t\t$spaces = wp_spaces_regexp();\n\n\t\t// '99' and '99\" are ambiguous among other patterns; assume it's an abbreviated year at the end of a quotation.\n\t\tif ( \"'\" !== $apos || \"'\" !== $closing_single_quote ) {\n\t\t\t$dynamic[ '/\\'(\\d\\d)\\'(?=\\Z|[.,:;!?)}\\-\\]]|&gt;|' . $spaces . ')/' ] = $apos_flag . '$1' . $closing_single_quote;\n\t\t}\n\t\tif ( \"'\" !== $apos || '\"' !== $closing_quote ) {\n\t\t\t$dynamic[ '/\\'(\\d\\d)\"(?=\\Z|[.,:;!?)}\\-\\]]|&gt;|' . $spaces . ')/' ] = $apos_flag . '$1' . $closing_quote;\n\t\t}\n\n\t\t// '99 '99s '99's (apostrophe)  But never '9 or '99% or '999 or '99.0.\n\t\tif ( \"'\" !== $apos ) {\n\t\t\t$dynamic[ '/\\'(?=\\d\\d(?:\\Z|(?![%\\d]|[.,]\\d)))/' ] = $apos_flag;\n\t\t}\n\n\t\t// Quoted Numbers like '0.42'\n\t\tif ( \"'\" !== $opening_single_quote && \"'\" !== $closing_single_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|' . $spaces . ')\\'(\\d[.,\\d]*)\\'/' ] = $open_sq_flag . '$1' . $closing_single_quote;\n\t\t}\n\n\t\t// Single quote at start, or preceded by (, {, <, [, \", -, or spaces.\n\t\tif ( \"'\" !== $opening_single_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|[([{\"\\-]|&lt;|' . $spaces . ')\\'/' ] = $open_sq_flag;\n\t\t}\n\n\t\t// Apostrophe in a word.  No spaces, double apostrophes, or other punctuation.\n\t\tif ( \"'\" !== $apos ) {\n\t\t\t$dynamic[ '/(?<!' . $spaces . ')\\'(?!\\Z|[.,:;!?\"\\'(){}[\\]\\-]|&[lg]t;|' . $spaces . ')/' ] = $apos_flag;\n\t\t}\n\n\t\t$dynamic_characters['apos'] = array_keys( $dynamic );\n\t\t$dynamic_replacements['apos'] = array_values( $dynamic );\n\t\t$dynamic = array();\n\n\t\t// Quoted Numbers like \"42\"\n\t\tif ( '\"' !== $opening_quote && '\"' !== $closing_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|' . $spaces . ')\"(\\d[.,\\d]*)\"/' ] = $open_q_flag . '$1' . $closing_quote;\n\t\t}\n\n\t\t// Double quote at start, or preceded by (, {, <, [, -, or spaces, and not followed by spaces.\n\t\tif ( '\"' !== $opening_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|[([{\\-]|&lt;|' . $spaces . ')\"(?!' . $spaces . ')/' ] = $open_q_flag;\n\t\t}\n\n\t\t$dynamic_characters['quote'] = array_keys( $dynamic );\n\t\t$dynamic_replacements['quote'] = array_values( $dynamic );\n\t\t$dynamic = array();\n\n\t\t// Dashes and spaces\n\t\t$dynamic[ '/---/' ] = $em_dash;\n\t\t$dynamic[ '/(?<=^|' . $spaces . ')--(?=$|' . $spaces . ')/' ] = $em_dash;\n\t\t$dynamic[ '/(?<!xn)--/' ] = $en_dash;\n\t\t$dynamic[ '/(?<=^|' . $spaces . ')-(?=$|' . $spaces . ')/' ] = $en_dash;\n\n\t\t$dynamic_characters['dash'] = array_keys( $dynamic );\n\t\t$dynamic_replacements['dash'] = array_values( $dynamic );\n\t}\n\n\t// Must do this every time in case plugins use these filters in a context sensitive manner\n\t/**\n\t * Filters the list of HTML elements not to texturize.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array $default_no_texturize_tags An array of HTML element names.\n\t */\n\t$no_texturize_tags = apply_filters( 'no_texturize_tags', $default_no_texturize_tags );\n\t/**\n\t * Filters the list of shortcodes not to texturize.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array $default_no_texturize_shortcodes An array of shortcode names.\n\t */\n\t$no_texturize_shortcodes = apply_filters( 'no_texturize_shortcodes', $default_no_texturize_shortcodes );\n\n\t$no_texturize_tags_stack = array();\n\t$no_texturize_shortcodes_stack = array();\n\n\t// Look for shortcodes and HTML elements.\n\n\tpreg_match_all( '@\\[/?([^<>&/\\[\\]\\x00-\\x20=]++)@', $text, $matches );\n\t$tagnames = array_intersect( array_keys( $shortcode_tags ), $matches[1] );\n\t$found_shortcodes = ! empty( $tagnames );\n\t$shortcode_regex = $found_shortcodes ? _get_wptexturize_shortcode_regex( $tagnames ) : '';\n\t$regex = _get_wptexturize_split_regex( $shortcode_regex );\n\n\t$textarr = preg_split( $regex, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );\n\n\tforeach ( $textarr as &$curl ) {\n\t\t// Only call _wptexturize_pushpop_element if $curl is a delimiter.\n\t\t$first = $curl[0];\n\t\tif ( '<' === $first ) {\n\t\t\tif ( '<!--' === substr( $curl, 0, 4 ) ) {\n\t\t\t\t// This is an HTML comment delimiter.\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\t// This is an HTML element delimiter.\n\n\t\t\t\t// Replace each & with &#038; unless it already looks like an entity.\n\t\t\t\t$curl = preg_replace( '/&(?!#(?:\\d+|x[a-f0-9]+);|[a-z1-4]{1,8};)/i', '&#038;', $curl );\n\n\t\t\t\t_wptexturize_pushpop_element( $curl, $no_texturize_tags_stack, $no_texturize_tags );\n\t\t\t}\n\n\t\t} elseif ( '' === trim( $curl ) ) {\n\t\t\t// This is a newline between delimiters.  Performance improves when we check this.\n\t\t\tcontinue;\n\n\t\t} elseif ( '[' === $first && $found_shortcodes && 1 === preg_match( '/^' . $shortcode_regex . '$/', $curl ) ) {\n\t\t\t// This is a shortcode delimiter.\n\n\t\t\tif ( '[[' !== substr( $curl, 0, 2 ) && ']]' !== substr( $curl, -2 ) ) {\n\t\t\t\t// Looks like a normal shortcode.\n\t\t\t\t_wptexturize_pushpop_element( $curl, $no_texturize_shortcodes_stack, $no_texturize_shortcodes );\n\t\t\t} else {\n\t\t\t\t// Looks like an escaped shortcode.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t} elseif ( empty( $no_texturize_shortcodes_stack ) && empty( $no_texturize_tags_stack ) ) {\n\t\t\t// This is neither a delimiter, nor is this content inside of no_texturize pairs.  Do texturize.\n\n\t\t\t$curl = str_replace( $static_characters, $static_replacements, $curl );\n\n\t\t\tif ( false !== strpos( $curl, \"'\" ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['apos'], $dynamic_replacements['apos'], $curl );\n\t\t\t\t$curl = wptexturize_primes( $curl, \"'\", $prime, $open_sq_flag, $closing_single_quote );\n\t\t\t\t$curl = str_replace( $apos_flag, $apos, $curl );\n\t\t\t\t$curl = str_replace( $open_sq_flag, $opening_single_quote, $curl );\n\t\t\t}\n\t\t\tif ( false !== strpos( $curl, '\"' ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['quote'], $dynamic_replacements['quote'], $curl );\n\t\t\t\t$curl = wptexturize_primes( $curl, '\"', $double_prime, $open_q_flag, $closing_quote );\n\t\t\t\t$curl = str_replace( $open_q_flag, $opening_quote, $curl );\n\t\t\t}\n\t\t\tif ( false !== strpos( $curl, '-' ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['dash'], $dynamic_replacements['dash'], $curl );\n\t\t\t}\n\n\t\t\t// 9x9 (times), but never 0x9999\n\t\t\tif ( 1 === preg_match( '/(?<=\\d)x\\d/', $curl ) ) {\n\t\t\t\t// Searching for a digit is 10 times more expensive than for the x, so we avoid doing this one!\n\t\t\t\t$curl = preg_replace( '/\\b(\\d(?(?<=0)[\\d\\.,]+|[\\d\\.,]*))x(\\d[\\d\\.,]*)\\b/', '$1&#215;$2', $curl );\n\t\t\t}\n\n\t\t\t// Replace each & with &#038; unless it already looks like an entity.\n\t\t\t$curl = preg_replace( '/&(?!#(?:\\d+|x[a-f0-9]+);|[a-z1-4]{1,8};)/i', '&#038;', $curl );\n\t\t}\n\t}\n\n\treturn implode( '', $textarr );\n}\n\n/**\n * Implements a logic tree to determine whether or not \"7'.\" represents seven feet,\n * then converts the special char into either a prime char or a closing quote char.\n *\n * @since 4.3.0\n *\n * @param string $haystack    The plain text to be searched.\n * @param string $needle      The character to search for such as ' or \".\n * @param string $prime       The prime char to use for replacement.\n * @param string $open_quote  The opening quote char. Opening quote replacement must be\n *                            accomplished already.\n * @param string $close_quote The closing quote char to use for replacement.\n * @return string The $haystack value after primes and quotes replacements.\n */\nfunction wptexturize_primes( $haystack, $needle, $prime, $open_quote, $close_quote ) {\n\t$spaces = wp_spaces_regexp();\n\t$flag = '<!--wp-prime-or-quote-->';\n\t$quote_pattern = \"/$needle(?=\\\\Z|[.,:;!?)}\\\\-\\\\]]|&gt;|\" . $spaces . \")/\";\n\t$prime_pattern    = \"/(?<=\\\\d)$needle/\";\n\t$flag_after_digit = \"/(?<=\\\\d)$flag/\";\n\t$flag_no_digit    = \"/(?<!\\\\d)$flag/\";\n\n\t$sentences = explode( $open_quote, $haystack );\n\n\tforeach ( $sentences as $key => &$sentence ) {\n\t\tif ( false === strpos( $sentence, $needle ) ) {\n\t\t\tcontinue;\n\t\t} elseif ( 0 !== $key && 0 === substr_count( $sentence, $close_quote ) ) {\n\t\t\t$sentence = preg_replace( $quote_pattern, $flag, $sentence, -1, $count );\n\t\t\tif ( $count > 1 ) {\n\t\t\t\t// This sentence appears to have multiple closing quotes.  Attempt Vulcan logic.\n\t\t\t\t$sentence = preg_replace( $flag_no_digit, $close_quote, $sentence, -1, $count2 );\n\t\t\t\tif ( 0 === $count2 ) {\n\t\t\t\t\t// Try looking for a quote followed by a period.\n\t\t\t\t\t$count2 = substr_count( $sentence, \"$flag.\" );\n\t\t\t\t\tif ( $count2 > 0 ) {\n\t\t\t\t\t\t// Assume the rightmost quote-period match is the end of quotation.\n\t\t\t\t\t\t$pos = strrpos( $sentence, \"$flag.\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// When all else fails, make the rightmost candidate a closing quote.\n\t\t\t\t\t\t// This is most likely to be problematic in the context of bug #18549.\n\t\t\t\t\t\t$pos = strrpos( $sentence, $flag );\n\t\t\t\t\t}\n\t\t\t\t\t$sentence = substr_replace( $sentence, $close_quote, $pos, strlen( $flag ) );\n\t\t\t\t}\n\t\t\t\t// Use conventional replacement on any remaining primes and quotes.\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t\t$sentence = preg_replace( $flag_after_digit, $prime, $sentence );\n\t\t\t\t$sentence = str_replace( $flag, $close_quote, $sentence );\n\t\t\t} elseif ( 1 == $count ) {\n\t\t\t\t// Found only one closing quote candidate, so give it priority over primes.\n\t\t\t\t$sentence = str_replace( $flag, $close_quote, $sentence );\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t} else {\n\t\t\t\t// No closing quotes found.  Just run primes pattern.\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t}\n\t\t} else {\n\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t$sentence = preg_replace( $quote_pattern, $close_quote, $sentence );\n\t\t}\n\t\tif ( '\"' == $needle && false !== strpos( $sentence, '\"' ) ) {\n\t\t\t$sentence = str_replace( '\"', $close_quote, $sentence );\n\t\t}\n\t}\n\n\treturn implode( $open_quote, $sentences );\n}\n\n/**\n * Search for disabled element tags. Push element to stack on tag open and pop\n * on tag close.\n *\n * Assumes first char of $text is tag opening and last char is tag closing.\n * Assumes second char of $text is optionally '/' to indicate closing as in </html>.\n *\n * @since 2.9.0\n * @access private\n *\n * @param string $text Text to check. Must be a tag like `<html>` or `[shortcode]`.\n * @param array  $stack List of open tag elements.\n * @param array  $disabled_elements The tag names to match against. Spaces are not allowed in tag names.\n */\nfunction _wptexturize_pushpop_element( $text, &$stack, $disabled_elements ) {\n\t// Is it an opening tag or closing tag?\n\tif ( isset( $text[1] ) && '/' !== $text[1] ) {\n\t\t$opening_tag = true;\n\t\t$name_offset = 1;\n\t} elseif ( 0 == count( $stack ) ) {\n\t\t// Stack is empty. Just stop.\n\t\treturn;\n\t} else {\n\t\t$opening_tag = false;\n\t\t$name_offset = 2;\n\t}\n\n\t// Parse out the tag name.\n\t$space = strpos( $text, ' ' );\n\tif ( false === $space ) {\n\t\t$space = -1;\n\t} else {\n\t\t$space -= $name_offset;\n\t}\n\t$tag = substr( $text, $name_offset, $space );\n\n\t// Handle disabled tags.\n\tif ( in_array( $tag, $disabled_elements ) ) {\n\t\tif ( $opening_tag ) {\n\t\t\t/*\n\t\t\t * This disables texturize until we find a closing tag of our type\n\t\t\t * (e.g. <pre>) even if there was invalid nesting before that\n\t\t\t *\n\t\t\t * Example: in the case <pre>sadsadasd</code>\"baba\"</pre>\n\t\t\t *          \"baba\" won't be texturize\n\t\t\t */\n\n\t\t\tarray_push( $stack, $tag );\n\t\t} elseif ( end( $stack ) == $tag ) {\n\t\t\tarray_pop( $stack );\n\t\t}\n\t}\n}\n\n/**\n * Replaces double line-breaks with paragraph elements.\n *\n * A group of regex replaces used to identify text formatted with newlines and\n * replace double line-breaks with HTML paragraph tags. The remaining line-breaks\n * after conversion become <<br />> tags, unless $br is set to '0' or 'false'.\n *\n * @since 0.71\n *\n * @param string $pee The text which has to be formatted.\n * @param bool   $br  Optional. If set, this will convert all remaining line-breaks\n *                    after paragraphing. Default true.\n * @return string Text which has been converted into correct paragraph tags.\n */\nfunction wpautop( $pee, $br = true ) {\n\t$pre_tags = array();\n\n\tif ( trim($pee) === '' )\n\t\treturn '';\n\n\t// Just to make things a little easier, pad the end.\n\t$pee = $pee . \"\\n\";\n\n\t/*\n\t * Pre tags shouldn't be touched by autop.\n\t * Replace pre tags with placeholders and bring them back after autop.\n\t */\n\tif ( strpos($pee, '<pre') !== false ) {\n\t\t$pee_parts = explode( '</pre>', $pee );\n\t\t$last_pee = array_pop($pee_parts);\n\t\t$pee = '';\n\t\t$i = 0;\n\n\t\tforeach ( $pee_parts as $pee_part ) {\n\t\t\t$start = strpos($pee_part, '<pre');\n\n\t\t\t// Malformed html?\n\t\t\tif ( $start === false ) {\n\t\t\t\t$pee .= $pee_part;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$name = \"<pre wp-pre-tag-$i></pre>\";\n\t\t\t$pre_tags[$name] = substr( $pee_part, $start ) . '</pre>';\n\n\t\t\t$pee .= substr( $pee_part, 0, $start ) . $name;\n\t\t\t$i++;\n\t\t}\n\n\t\t$pee .= $last_pee;\n\t}\n\t// Change multiple <br>s into two line breaks, which will turn into paragraphs.\n\t$pee = preg_replace('|<br\\s*/?>\\s*<br\\s*/?>|', \"\\n\\n\", $pee);\n\n\t$allblocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';\n\n\t// Add a double line break above block-level opening tags.\n\t$pee = preg_replace('!(<' . $allblocks . '[\\s/>])!', \"\\n\\n$1\", $pee);\n\n\t// Add a double line break below block-level closing tags.\n\t$pee = preg_replace('!(</' . $allblocks . '>)!', \"$1\\n\\n\", $pee);\n\n\t// Standardize newline characters to \"\\n\".\n\t$pee = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $pee);\n\n\t// Find newlines in all elements and add placeholders.\n\t$pee = wp_replace_in_html_tags( $pee, array( \"\\n\" => \" <!-- wpnl --> \" ) );\n\n\t// Collapse line breaks before and after <option> elements so they don't get autop'd.\n\tif ( strpos( $pee, '<option' ) !== false ) {\n\t\t$pee = preg_replace( '|\\s*<option|', '<option', $pee );\n\t\t$pee = preg_replace( '|</option>\\s*|', '</option>', $pee );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <object> elements, before <param> and <embed> elements\n\t * so they don't get autop'd.\n\t */\n\tif ( strpos( $pee, '</object>' ) !== false ) {\n\t\t$pee = preg_replace( '|(<object[^>]*>)\\s*|', '$1', $pee );\n\t\t$pee = preg_replace( '|\\s*</object>|', '</object>', $pee );\n\t\t$pee = preg_replace( '%\\s*(</?(?:param|embed)[^>]*>)\\s*%', '$1', $pee );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <audio> and <video> elements,\n\t * before and after <source> and <track> elements.\n\t */\n\tif ( strpos( $pee, '<source' ) !== false || strpos( $pee, '<track' ) !== false ) {\n\t\t$pee = preg_replace( '%([<\\[](?:audio|video)[^>\\]]*[>\\]])\\s*%', '$1', $pee );\n\t\t$pee = preg_replace( '%\\s*([<\\[]/(?:audio|video)[>\\]])%', '$1', $pee );\n\t\t$pee = preg_replace( '%\\s*(<(?:source|track)[^>]*>)\\s*%', '$1', $pee );\n\t}\n\n\t// Collapse line breaks before and after <figcaption> elements.\n\tif ( strpos( $pee, '<figcaption' ) !== false ) {\n\t\t$pee = preg_replace( '|\\s*(<figcaption[^>]*>)|', '$1', $pee );\n\t\t$pee = preg_replace( '|</figcaption>\\s*|', '</figcaption>', $pee );\n\t}\n\n\t// Remove more than two contiguous line breaks.\n\t$pee = preg_replace(\"/\\n\\n+/\", \"\\n\\n\", $pee);\n\n\t// Split up the contents into an array of strings, separated by double line breaks.\n\t$pees = preg_split('/\\n\\s*\\n/', $pee, -1, PREG_SPLIT_NO_EMPTY);\n\n\t// Reset $pee prior to rebuilding.\n\t$pee = '';\n\n\t// Rebuild the content as a string, wrapping every bit with a <p>.\n\tforeach ( $pees as $tinkle ) {\n\t\t$pee .= '<p>' . trim($tinkle, \"\\n\") . \"</p>\\n\";\n\t}\n\n\t// Under certain strange conditions it could create a P of entirely whitespace.\n\t$pee = preg_replace('|<p>\\s*</p>|', '', $pee);\n\n\t// Add a closing <p> inside <div>, <address>, or <form> tag if missing.\n\t$pee = preg_replace('!<p>([^<]+)</(div|address|form)>!', \"<p>$1</p></$2>\", $pee);\n\n\t// If an opening or closing block element tag is wrapped in a <p>, unwrap it.\n\t$pee = preg_replace('!<p>\\s*(</?' . $allblocks . '[^>]*>)\\s*</p>!', \"$1\", $pee);\n\n\t// In some cases <li> may get wrapped in <p>, fix them.\n\t$pee = preg_replace(\"|<p>(<li.+?)</p>|\", \"$1\", $pee);\n\n\t// If a <blockquote> is wrapped with a <p>, move it inside the <blockquote>.\n\t$pee = preg_replace('|<p><blockquote([^>]*)>|i', \"<blockquote$1><p>\", $pee);\n\t$pee = str_replace('</blockquote></p>', '</p></blockquote>', $pee);\n\n\t// If an opening or closing block element tag is preceded by an opening <p> tag, remove it.\n\t$pee = preg_replace('!<p>\\s*(</?' . $allblocks . '[^>]*>)!', \"$1\", $pee);\n\n\t// If an opening or closing block element tag is followed by a closing <p> tag, remove it.\n\t$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\\s*</p>!', \"$1\", $pee);\n\n\t// Optionally insert line breaks.\n\tif ( $br ) {\n\t\t// Replace newlines that shouldn't be touched with a placeholder.\n\t\t$pee = preg_replace_callback('/<(script|style).*?<\\/\\\\1>/s', '_autop_newline_preservation_helper', $pee);\n\n\t\t// Normalize <br>\n\t\t$pee = str_replace( array( '<br>', '<br/>' ), '<br />', $pee );\n\n\t\t// Replace any new line characters that aren't preceded by a <br /> with a <br />.\n\t\t$pee = preg_replace('|(?<!<br />)\\s*\\n|', \"<br />\\n\", $pee);\n\n\t\t// Replace newline placeholders with newlines.\n\t\t$pee = str_replace('<WPPreserveNewline />', \"\\n\", $pee);\n\t}\n\n\t// If a <br /> tag is after an opening or closing block tag, remove it.\n\t$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\\s*<br />!', \"$1\", $pee);\n\n\t// If a <br /> tag is before a subset of opening or closing block tags, remove it.\n\t$pee = preg_replace('!<br />(\\s*</?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)!', '$1', $pee);\n\t$pee = preg_replace( \"|\\n</p>$|\", '</p>', $pee );\n\n\t// Replace placeholder <pre> tags with their original content.\n\tif ( !empty($pre_tags) )\n\t\t$pee = str_replace(array_keys($pre_tags), array_values($pre_tags), $pee);\n\n\t// Restore newlines in all elements.\n\tif ( false !== strpos( $pee, '<!-- wpnl -->' ) ) {\n\t\t$pee = str_replace( array( ' <!-- wpnl --> ', '<!-- wpnl -->' ), \"\\n\", $pee );\n\t}\n\n\treturn $pee;\n}\n\n/**\n * Separate HTML elements and comments from the text.\n *\n * @since 4.2.4\n *\n * @param string $input The text which has to be formatted.\n * @return array The formatted text.\n */\nfunction wp_html_split( $input ) {\n\treturn preg_split( get_html_split_regex(), $input, -1, PREG_SPLIT_DELIM_CAPTURE );\n}\n\n/**\n * Retrieve the regular expression for an HTML element.\n *\n * @since 4.4.0\n *\n * @staticvar string $regex\n *\n * @return string The regular expression\n */\nfunction get_html_split_regex() {\n\tstatic $regex;\n\n\tif ( ! isset( $regex ) ) {\n\t\t$comments =\n\t\t\t  '!'           // Start of comment, after the <.\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until --> is found.\n\t\t\t.     '-(?!->)' // Dash not followed by end of comment.\n\t\t\t.     '[^\\-]*+' // Consume non-dashes.\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:-->)?';   // End of comment. If not found, match all input.\n\n\t\t$cdata =\n\t\t\t  '!\\[CDATA\\['  // Start of comment, after the <.\n\t\t\t. '[^\\]]*+'     // Consume non-].\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until ]]> is found.\n\t\t\t.     '](?!]>)' // One ] not followed by end of comment.\n\t\t\t.     '[^\\]]*+' // Consume non-].\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:]]>)?';   // End of comment. If not found, match all input.\n\n\t\t$escaped =\n\t\t\t  '(?='           // Is the element escaped?\n\t\t\t.    '!--'\n\t\t\t. '|'\n\t\t\t.    '!\\[CDATA\\['\n\t\t\t. ')'\n\t\t\t. '(?(?=!-)'      // If yes, which type?\n\t\t\t.     $comments\n\t\t\t. '|'\n\t\t\t.     $cdata\n\t\t\t. ')';\n\n\t\t$regex =\n\t\t\t  '/('              // Capture the entire match.\n\t\t\t.     '<'           // Find start of element.\n\t\t\t.     '(?'          // Conditional expression follows.\n\t\t\t.         $escaped  // Find end of escaped element.\n\t\t\t.     '|'           // ... else ...\n\t\t\t.         '[^>]*>?' // Find end of normal element.\n\t\t\t.     ')'\n\t\t\t. ')/';\n\t}\n\n\treturn $regex;\n}\n\n/**\n * Retrieve the combined regular expression for HTML and shortcodes.\n *\n * @access private\n * @ignore\n * @internal This function will be removed in 4.5.0 per Shortcode API Roadmap.\n * @since 4.4.0\n *\n * @staticvar string $html_regex\n *\n * @param string $shortcode_regex The result from _get_wptexturize_shortcode_regex().  Optional.\n * @return string The regular expression\n */\nfunction _get_wptexturize_split_regex( $shortcode_regex = '' ) {\n\tstatic $html_regex;\n\n\tif ( ! isset( $html_regex ) ) {\n\t\t$comment_regex =\n\t\t\t  '!'           // Start of comment, after the <.\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until --> is found.\n\t\t\t.     '-(?!->)' // Dash not followed by end of comment.\n\t\t\t.     '[^\\-]*+' // Consume non-dashes.\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:-->)?';   // End of comment. If not found, match all input.\n\n\t\t$html_regex =\t\t\t // Needs replaced with wp_html_split() per Shortcode API Roadmap.\n\t\t\t  '<'                // Find start of element.\n\t\t\t. '(?(?=!--)'        // Is this a comment?\n\t\t\t.     $comment_regex // Find end of comment.\n\t\t\t. '|'\n\t\t\t.     '[^>]*>?'      // Find end of element. If not found, match all input.\n\t\t\t. ')';\n\t}\n\n\tif ( empty( $shortcode_regex ) ) {\n\t\t$regex = '/(' . $html_regex . ')/';\n\t} else {\n\t\t$regex = '/(' . $html_regex . '|' . $shortcode_regex . ')/';\n\t}\n\n\treturn $regex;\n}\n\n/**\n * Retrieve the regular expression for shortcodes.\n *\n * @access private\n * @ignore\n * @internal This function will be removed in 4.5.0 per Shortcode API Roadmap.\n * @since 4.4.0\n *\n * @param array $tagnames List of shortcodes to find.\n * @return string The regular expression\n */\nfunction _get_wptexturize_shortcode_regex( $tagnames ) {\n\t$tagregexp = join( '|', array_map( 'preg_quote', $tagnames ) );\n\t$tagregexp = \"(?:$tagregexp)(?=[\\\\s\\\\]\\\\/])\"; // Excerpt of get_shortcode_regex().\n\t$regex =\n\t\t  '\\['              // Find start of shortcode.\n\t\t. '[\\/\\[]?'         // Shortcodes may begin with [/ or [[\n\t\t. $tagregexp        // Only match registered shortcodes, because performance.\n\t\t. '(?:'\n\t\t.     '[^\\[\\]<>]+'  // Shortcodes do not contain other shortcodes. Quantifier critical.\n\t\t. '|'\n\t\t.     '<[^\\[\\]>]*>' // HTML elements permitted. Prevents matching ] before >.\n\t\t. ')*+'             // Possessive critical.\n\t\t. '\\]'              // Find end of shortcode.\n\t\t. '\\]?';            // Shortcodes may end with ]]\n\n\treturn $regex;\n}\n\n/**\n * Replace characters or phrases within HTML elements only.\n *\n * @since 4.2.3\n *\n * @param string $haystack The text which has to be formatted.\n * @param array $replace_pairs In the form array('from' => 'to', ...).\n * @return string The formatted text.\n */\nfunction wp_replace_in_html_tags( $haystack, $replace_pairs ) {\n\t// Find all elements.\n\t$textarr = wp_html_split( $haystack );\n\t$changed = false;\n\n\t// Optimize when searching for one item.\n\tif ( 1 === count( $replace_pairs ) ) {\n\t\t// Extract $needle and $replace.\n\t\tforeach ( $replace_pairs as $needle => $replace );\n\n\t\t// Loop through delimiters (elements) only.\n\t\tfor ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {\n\t\t\tif ( false !== strpos( $textarr[$i], $needle ) ) {\n\t\t\t\t$textarr[$i] = str_replace( $needle, $replace, $textarr[$i] );\n\t\t\t\t$changed = true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Extract all $needles.\n\t\t$needles = array_keys( $replace_pairs );\n\n\t\t// Loop through delimiters (elements) only.\n\t\tfor ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {\n\t\t\tforeach ( $needles as $needle ) {\n\t\t\t\tif ( false !== strpos( $textarr[$i], $needle ) ) {\n\t\t\t\t\t$textarr[$i] = strtr( $textarr[$i], $replace_pairs );\n\t\t\t\t\t$changed = true;\n\t\t\t\t\t// After one strtr() break out of the foreach loop and look at next element.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( $changed ) {\n\t\t$haystack = implode( $textarr );\n\t}\n\n\treturn $haystack;\n}\n\n/**\n * Newline preservation help function for wpautop\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $matches preg_replace_callback matches array\n * @return string\n */\nfunction _autop_newline_preservation_helper( $matches ) {\n\treturn str_replace( \"\\n\", \"<WPPreserveNewline />\", $matches[0] );\n}\n\n/**\n * Don't auto-p wrap shortcodes that stand alone\n *\n * Ensures that shortcodes are not wrapped in `<p>...</p>`.\n *\n * @since 2.9.0\n *\n * @global array $shortcode_tags\n *\n * @param string $pee The content.\n * @return string The filtered content.\n */\nfunction shortcode_unautop( $pee ) {\n\tglobal $shortcode_tags;\n\n\tif ( empty( $shortcode_tags ) || !is_array( $shortcode_tags ) ) {\n\t\treturn $pee;\n\t}\n\n\t$tagregexp = join( '|', array_map( 'preg_quote', array_keys( $shortcode_tags ) ) );\n\t$spaces = wp_spaces_regexp();\n\n\t$pattern =\n\t\t  '/'\n\t\t. '<p>'                              // Opening paragraph\n\t\t. '(?:' . $spaces . ')*+'            // Optional leading whitespace\n\t\t. '('                                // 1: The shortcode\n\t\t.     '\\\\['                          // Opening bracket\n\t\t.     \"($tagregexp)\"                 // 2: Shortcode name\n\t\t.     '(?![\\\\w-])'                   // Not followed by word character or hyphen\n\t\t                                     // Unroll the loop: Inside the opening shortcode tag\n\t\t.     '[^\\\\]\\\\/]*'                   // Not a closing bracket or forward slash\n\t\t.     '(?:'\n\t\t.         '\\\\/(?!\\\\])'               // A forward slash not followed by a closing bracket\n\t\t.         '[^\\\\]\\\\/]*'               // Not a closing bracket or forward slash\n\t\t.     ')*?'\n\t\t.     '(?:'\n\t\t.         '\\\\/\\\\]'                   // Self closing tag and closing bracket\n\t\t.     '|'\n\t\t.         '\\\\]'                      // Closing bracket\n\t\t.         '(?:'                      // Unroll the loop: Optionally, anything between the opening and closing shortcode tags\n\t\t.             '[^\\\\[]*+'             // Not an opening bracket\n\t\t.             '(?:'\n\t\t.                 '\\\\[(?!\\\\/\\\\2\\\\])' // An opening bracket not followed by the closing shortcode tag\n\t\t.                 '[^\\\\[]*+'         // Not an opening bracket\n\t\t.             ')*+'\n\t\t.             '\\\\[\\\\/\\\\2\\\\]'         // Closing shortcode tag\n\t\t.         ')?'\n\t\t.     ')'\n\t\t. ')'\n\t\t. '(?:' . $spaces . ')*+'            // optional trailing whitespace\n\t\t. '<\\\\/p>'                           // closing paragraph\n\t\t. '/';\n\n\treturn preg_replace( $pattern, '$1', $pee );\n}\n\n/**\n * Checks to see if a string is utf8 encoded.\n *\n * NOTE: This function checks for 5-Byte sequences, UTF8\n *       has Bytes Sequences with a maximum length of 4.\n *\n * @author bmorel at ssi dot fr (modified)\n * @since 1.2.1\n *\n * @param string $str The string to be checked\n * @return bool True if $str fits a UTF-8 model, false otherwise.\n */\nfunction seems_utf8( $str ) {\n\tmbstring_binary_safe_encoding();\n\t$length = strlen($str);\n\treset_mbstring_encoding();\n\tfor ($i=0; $i < $length; $i++) {\n\t\t$c = ord($str[$i]);\n\t\tif ($c < 0x80) $n = 0; // 0bbbbbbb\n\t\telseif (($c & 0xE0) == 0xC0) $n=1; // 110bbbbb\n\t\telseif (($c & 0xF0) == 0xE0) $n=2; // 1110bbbb\n\t\telseif (($c & 0xF8) == 0xF0) $n=3; // 11110bbb\n\t\telseif (($c & 0xFC) == 0xF8) $n=4; // 111110bb\n\t\telseif (($c & 0xFE) == 0xFC) $n=5; // 1111110b\n\t\telse return false; // Does not match any model\n\t\tfor ($j=0; $j<$n; $j++) { // n bytes matching 10bbbbbb follow ?\n\t\t\tif ((++$i == $length) || ((ord($str[$i]) & 0xC0) != 0x80))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Converts a number of special characters into their HTML entities.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to encode \" to\n * &quot;, or ENT_QUOTES to do both. Default is ENT_NOQUOTES where no quotes are encoded.\n *\n * @since 1.2.2\n * @access private\n *\n * @staticvar string $_charset\n *\n * @param string     $string         The text which is to be encoded.\n * @param int|string $quote_style    Optional. Converts double quotes if set to ENT_COMPAT,\n *                                   both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES.\n *                                   Also compatible with old values; converting single quotes if set to 'single',\n *                                   double if set to 'double' or both if otherwise set.\n *                                   Default is ENT_NOQUOTES.\n * @param string     $charset        Optional. The character encoding of the string. Default is false.\n * @param bool       $double_encode  Optional. Whether to encode existing html entities. Default is false.\n * @return string The encoded text with HTML entities.\n */\nfunction _wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) )\n\t\treturn '';\n\n\t// Don't bother if there are no specialchars - saves some processing\n\tif ( ! preg_match( '/[&<>\"\\']/', $string ) )\n\t\treturn $string;\n\n\t// Account for the previous behaviour of the function when the $quote_style is not an accepted value\n\tif ( empty( $quote_style ) )\n\t\t$quote_style = ENT_NOQUOTES;\n\telseif ( ! in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) )\n\t\t$quote_style = ENT_QUOTES;\n\n\t// Store the site charset as a static to avoid multiple calls to wp_load_alloptions()\n\tif ( ! $charset ) {\n\t\tstatic $_charset = null;\n\t\tif ( ! isset( $_charset ) ) {\n\t\t\t$alloptions = wp_load_alloptions();\n\t\t\t$_charset = isset( $alloptions['blog_charset'] ) ? $alloptions['blog_charset'] : '';\n\t\t}\n\t\t$charset = $_charset;\n\t}\n\n\tif ( in_array( $charset, array( 'utf8', 'utf-8', 'UTF8' ) ) )\n\t\t$charset = 'UTF-8';\n\n\t$_quote_style = $quote_style;\n\n\tif ( $quote_style === 'double' ) {\n\t\t$quote_style = ENT_COMPAT;\n\t\t$_quote_style = ENT_COMPAT;\n\t} elseif ( $quote_style === 'single' ) {\n\t\t$quote_style = ENT_NOQUOTES;\n\t}\n\n\tif ( ! $double_encode ) {\n\t\t// Guarantee every &entity; is valid, convert &garbage; into &amp;garbage;\n\t\t// This is required for PHP < 5.4.0 because ENT_HTML401 flag is unavailable.\n\t\t$string = wp_kses_normalize_entities( $string );\n\t}\n\n\t$string = @htmlspecialchars( $string, $quote_style, $charset, $double_encode );\n\n\t// Back-compat.\n\tif ( 'single' === $_quote_style )\n\t\t$string = str_replace( \"'\", '&#039;', $string );\n\n\treturn $string;\n}\n\n/**\n * Converts a number of HTML entities into their special characters.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to decode \" entities,\n * or ENT_QUOTES to do both \" and '. Default is ENT_NOQUOTES where no quotes are decoded.\n *\n * @since 2.8.0\n *\n * @param string     $string The text which is to be decoded.\n * @param string|int $quote_style Optional. Converts double quotes if set to ENT_COMPAT,\n *                                both single and double if set to ENT_QUOTES or\n *                                none if set to ENT_NOQUOTES.\n *                                Also compatible with old _wp_specialchars() values;\n *                                converting single quotes if set to 'single',\n *                                double if set to 'double' or both if otherwise set.\n *                                Default is ENT_NOQUOTES.\n * @return string The decoded text without HTML entities.\n */\nfunction wp_specialchars_decode( $string, $quote_style = ENT_NOQUOTES ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) ) {\n\t\treturn '';\n\t}\n\n\t// Don't bother if there are no entities - saves a lot of processing\n\tif ( strpos( $string, '&' ) === false ) {\n\t\treturn $string;\n\t}\n\n\t// Match the previous behaviour of _wp_specialchars() when the $quote_style is not an accepted value\n\tif ( empty( $quote_style ) ) {\n\t\t$quote_style = ENT_NOQUOTES;\n\t} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {\n\t\t$quote_style = ENT_QUOTES;\n\t}\n\n\t// More complete than get_html_translation_table( HTML_SPECIALCHARS )\n\t$single = array( '&#039;'  => '\\'', '&#x27;' => '\\'' );\n\t$single_preg = array( '/&#0*39;/'  => '&#039;', '/&#x0*27;/i' => '&#x27;' );\n\t$double = array( '&quot;' => '\"', '&#034;'  => '\"', '&#x22;' => '\"' );\n\t$double_preg = array( '/&#0*34;/'  => '&#034;', '/&#x0*22;/i' => '&#x22;' );\n\t$others = array( '&lt;'   => '<', '&#060;'  => '<', '&gt;'   => '>', '&#062;'  => '>', '&amp;'  => '&', '&#038;'  => '&', '&#x26;' => '&' );\n\t$others_preg = array( '/&#0*60;/'  => '&#060;', '/&#0*62;/'  => '&#062;', '/&#0*38;/'  => '&#038;', '/&#x0*26;/i' => '&#x26;' );\n\n\tif ( $quote_style === ENT_QUOTES ) {\n\t\t$translation = array_merge( $single, $double, $others );\n\t\t$translation_preg = array_merge( $single_preg, $double_preg, $others_preg );\n\t} elseif ( $quote_style === ENT_COMPAT || $quote_style === 'double' ) {\n\t\t$translation = array_merge( $double, $others );\n\t\t$translation_preg = array_merge( $double_preg, $others_preg );\n\t} elseif ( $quote_style === 'single' ) {\n\t\t$translation = array_merge( $single, $others );\n\t\t$translation_preg = array_merge( $single_preg, $others_preg );\n\t} elseif ( $quote_style === ENT_NOQUOTES ) {\n\t\t$translation = $others;\n\t\t$translation_preg = $others_preg;\n\t}\n\n\t// Remove zero padding on numeric entities\n\t$string = preg_replace( array_keys( $translation_preg ), array_values( $translation_preg ), $string );\n\n\t// Replace characters according to translation table\n\treturn strtr( $string, $translation );\n}\n\n/**\n * Checks for invalid UTF8 in a string.\n *\n * @since 2.8.0\n *\n * @staticvar bool $is_utf8\n * @staticvar bool $utf8_pcre\n *\n * @param string  $string The text which is to be checked.\n * @param bool    $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false.\n * @return string The checked text.\n */\nfunction wp_check_invalid_utf8( $string, $strip = false ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) ) {\n\t\treturn '';\n\t}\n\n\t// Store the site charset as a static to avoid multiple calls to get_option()\n\tstatic $is_utf8 = null;\n\tif ( ! isset( $is_utf8 ) ) {\n\t\t$is_utf8 = in_array( get_option( 'blog_charset' ), array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) );\n\t}\n\tif ( ! $is_utf8 ) {\n\t\treturn $string;\n\t}\n\n\t// Check for support for utf8 in the installed PCRE library once and store the result in a static\n\tstatic $utf8_pcre = null;\n\tif ( ! isset( $utf8_pcre ) ) {\n\t\t$utf8_pcre = @preg_match( '/^./u', 'a' );\n\t}\n\t// We can't demand utf8 in the PCRE installation, so just return the string in those cases\n\tif ( !$utf8_pcre ) {\n\t\treturn $string;\n\t}\n\n\t// preg_match fails when it encounters invalid UTF8 in $string\n\tif ( 1 === @preg_match( '/^./us', $string ) ) {\n\t\treturn $string;\n\t}\n\n\t// Attempt to strip the bad chars if requested (not recommended)\n\tif ( $strip && function_exists( 'iconv' ) ) {\n\t\treturn iconv( 'utf-8', 'utf-8', $string );\n\t}\n\n\treturn '';\n}\n\n/**\n * Encode the Unicode values to be used in the URI.\n *\n * @since 1.5.0\n *\n * @param string $utf8_string\n * @param int    $length Max  length of the string\n * @return string String with Unicode encoded for URI.\n */\nfunction utf8_uri_encode( $utf8_string, $length = 0 ) {\n\t$unicode = '';\n\t$values = array();\n\t$num_octets = 1;\n\t$unicode_length = 0;\n\n\tmbstring_binary_safe_encoding();\n\t$string_length = strlen( $utf8_string );\n\treset_mbstring_encoding();\n\n\tfor ($i = 0; $i < $string_length; $i++ ) {\n\n\t\t$value = ord( $utf8_string[ $i ] );\n\n\t\tif ( $value < 128 ) {\n\t\t\tif ( $length && ( $unicode_length >= $length ) )\n\t\t\t\tbreak;\n\t\t\t$unicode .= chr($value);\n\t\t\t$unicode_length++;\n\t\t} else {\n\t\t\tif ( count( $values ) == 0 ) {\n\t\t\t\tif ( $value < 224 ) {\n\t\t\t\t\t$num_octets = 2;\n\t\t\t\t} elseif ( $value < 240 ) {\n\t\t\t\t\t$num_octets = 3;\n\t\t\t\t} else {\n\t\t\t\t\t$num_octets = 4;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$values[] = $value;\n\n\t\t\tif ( $length && ( $unicode_length + ($num_octets * 3) ) > $length )\n\t\t\t\tbreak;\n\t\t\tif ( count( $values ) == $num_octets ) {\n\t\t\t\tfor ( $j = 0; $j < $num_octets; $j++ ) {\n\t\t\t\t\t$unicode .= '%' . dechex( $values[ $j ] );\n\t\t\t\t}\n\n\t\t\t\t$unicode_length += $num_octets * 3;\n\n\t\t\t\t$values = array();\n\t\t\t\t$num_octets = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $unicode;\n}\n\n/**\n * Converts all accent characters to ASCII characters.\n *\n * If there are no accent characters, then the string given is just returned.\n *\n * **Accent characters converted:**\n *\n * Currency signs:\n *\n * |   Code   | Glyph | Replacement |     Description     |\n * | -------- | ----- | ----------- | ------------------- |\n * | U+00A3   | \u00a3     | (empty)     | British Pound sign  |\n * | U+20AC   | \u20ac     | E           | Euro sign           |\n *\n * Decompositions for Latin-1 Supplement:\n *\n * |  Code   | Glyph | Replacement |               Description              |\n * | ------- | ----- | ----------- | -------------------------------------- |\n * | U+00AA  | \u00aa     | a           | Feminine ordinal indicator             |\n * | U+00BA  | \u00ba     | o           | Masculine ordinal indicator            |\n * | U+00C0  | \u00c0     | A           | Latin capital letter A with grave      |\n * | U+00C1  | \u00c1     | A           | Latin capital letter A with acute      |\n * | U+00C2  | \u00c2     | A           | Latin capital letter A with circumflex |\n * | U+00C3  | \u00c3     | A           | Latin capital letter A with tilde      |\n * | U+00C4  | \u00c4     | A           | Latin capital letter A with diaeresis  |\n * | U+00C5  | \u00c5     | A           | Latin capital letter A with ring above |\n * | U+00C6  | \u00c6     | AE          | Latin capital letter AE                |\n * | U+00C7  | \u00c7     | C           | Latin capital letter C with cedilla    |\n * | U+00C8  | \u00c8     | E           | Latin capital letter E with grave      |\n * | U+00C9  | \u00c9     | E           | Latin capital letter E with acute      |\n * | U+00CA  | \u00ca     | E           | Latin capital letter E with circumflex |\n * | U+00CB  | \u00cb     | E           | Latin capital letter E with diaeresis  |\n * | U+00CC  | \u00cc     | I           | Latin capital letter I with grave      |\n * | U+00CD  | \u00cd     | I           | Latin capital letter I with acute      |\n * | U+00CE  | \u00ce     | I           | Latin capital letter I with circumflex |\n * | U+00CF  | \u00cf     | I           | Latin capital letter I with diaeresis  |\n * | U+00D0  | \u00d0     | D           | Latin capital letter Eth               |\n * | U+00D1  | \u00d1     | N           | Latin capital letter N with tilde      |\n * | U+00D2  | \u00d2     | O           | Latin capital letter O with grave      |\n * | U+00D3  | \u00d3     | O           | Latin capital letter O with acute      |\n * | U+00D4  | \u00d4     | O           | Latin capital letter O with circumflex |\n * | U+00D5  | \u00d5     | O           | Latin capital letter O with tilde      |\n * | U+00D6  | \u00d6     | O           | Latin capital letter O with diaeresis  |\n * | U+00D8  | \u00d8     | O           | Latin capital letter O with stroke     |\n * | U+00D9  | \u00d9     | U           | Latin capital letter U with grave      |\n * | U+00DA  | \u00da     | U           | Latin capital letter U with acute      |\n * | U+00DB  | \u00db     | U           | Latin capital letter U with circumflex |\n * | U+00DC  | \u00dc     | U           | Latin capital letter U with diaeresis  |\n * | U+00DD  | \u00dd     | Y           | Latin capital letter Y with acute      |\n * | U+00DE  | \u00de     | TH          | Latin capital letter Thorn             |\n * | U+00DF  | \u00df     | s           | Latin small letter sharp s             |\n * | U+00E0  | \u00e0     | a           | Latin small letter a with grave        |\n * | U+00E1  | \u00e1     | a           | Latin small letter a with acute        |\n * | U+00E2  | \u00e2     | a           | Latin small letter a with circumflex   |\n * | U+00E3  | \u00e3     | a           | Latin small letter a with tilde        |\n * | U+00E4  | \u00e4     | a           | Latin small letter a with diaeresis    |\n * | U+00E5  | \u00e5     | a           | Latin small letter a with ring above   |\n * | U+00E6  | \u00e6     | ae          | Latin small letter ae                  |\n * | U+00E7  | \u00e7     | c           | Latin small letter c with cedilla      |\n * | U+00E8  | \u00e8     | e           | Latin small letter e with grave        |\n * | U+00E9  | \u00e9     | e           | Latin small letter e with acute        |\n * | U+00EA  | \u00ea     | e           | Latin small letter e with circumflex   |\n * | U+00EB  | \u00eb     | e           | Latin small letter e with diaeresis    |\n * | U+00EC  | \u00ec     | i           | Latin small letter i with grave        |\n * | U+00ED  | \u00ed     | i           | Latin small letter i with acute        |\n * | U+00EE  | \u00ee     | i           | Latin small letter i with circumflex   |\n * | U+00EF  | \u00ef     | i           | Latin small letter i with diaeresis    |\n * | U+00F0  | \u00f0     | d           | Latin small letter Eth                 |\n * | U+00F1  | \u00f1     | n           | Latin small letter n with tilde        |\n * | U+00F2  | \u00f2     | o           | Latin small letter o with grave        |\n * | U+00F3  | \u00f3     | o           | Latin small letter o with acute        |\n * | U+00F4  | \u00f4     | o           | Latin small letter o with circumflex   |\n * | U+00F5  | \u00f5     | o           | Latin small letter o with tilde        |\n * | U+00F6  | \u00f6     | o           | Latin small letter o with diaeresis    |\n * | U+00F8  | \u00f8     | o           | Latin small letter o with stroke       |\n * | U+00F9  | \u00f9     | u           | Latin small letter u with grave        |\n * | U+00FA  | \u00fa     | u           | Latin small letter u with acute        |\n * | U+00FB  | \u00fb     | u           | Latin small letter u with circumflex   |\n * | U+00FC  | \u00fc     | u           | Latin small letter u with diaeresis    |\n * | U+00FD  | \u00fd     | y           | Latin small letter y with acute        |\n * | U+00FE  | \u00fe     | th          | Latin small letter Thorn               |\n * | U+00FF  | \u00ff     | y           | Latin small letter y with diaeresis    |\n *\n * Decompositions for Latin Extended-A:\n *\n * |  Code   | Glyph | Replacement |                    Description                    |\n * | ------- | ----- | ----------- | ------------------------------------------------- |\n * | U+0100  | \u0100     | A           | Latin capital letter A with macron                |\n * | U+0101  | \u0101     | a           | Latin small letter a with macron                  |\n * | U+0102  | \u0102     | A           | Latin capital letter A with breve                 |\n * | U+0103  | \u0103     | a           | Latin small letter a with breve                   |\n * | U+0104  | \u0104     | A           | Latin capital letter A with ogonek                |\n * | U+0105  | \u0105     | a           | Latin small letter a with ogonek                  |\n * | U+01006 | \u0106     | C           | Latin capital letter C with acute                 |\n * | U+0107  | \u0107     | c           | Latin small letter c with acute                   |\n * | U+0108  | \u0108     | C           | Latin capital letter C with circumflex            |\n * | U+0109  | \u0109     | c           | Latin small letter c with circumflex              |\n * | U+010A  | \u010a     | C           | Latin capital letter C with dot above             |\n * | U+010B  | \u010b     | c           | Latin small letter c with dot above               |\n * | U+010C  | \u010c     | C           | Latin capital letter C with caron                 |\n * | U+010D  | \u010d     | c           | Latin small letter c with caron                   |\n * | U+010E  | \u010e     | D           | Latin capital letter D with caron                 |\n * | U+010F  | \u010f     | d           | Latin small letter d with caron                   |\n * | U+0110  | \u0110     | D           | Latin capital letter D with stroke                |\n * | U+0111  | \u0111     | d           | Latin small letter d with stroke                  |\n * | U+0112  | \u0112     | E           | Latin capital letter E with macron                |\n * | U+0113  | \u0113     | e           | Latin small letter e with macron                  |\n * | U+0114  | \u0114     | E           | Latin capital letter E with breve                 |\n * | U+0115  | \u0115     | e           | Latin small letter e with breve                   |\n * | U+0116  | \u0116     | E           | Latin capital letter E with dot above             |\n * | U+0117  | \u0117     | e           | Latin small letter e with dot above               |\n * | U+0118  | \u0118     | E           | Latin capital letter E with ogonek                |\n * | U+0119  | \u0119     | e           | Latin small letter e with ogonek                  |\n * | U+011A  | \u011a     | E           | Latin capital letter E with caron                 |\n * | U+011B  | \u011b     | e           | Latin small letter e with caron                   |\n * | U+011C  | \u011c     | G           | Latin capital letter G with circumflex            |\n * | U+011D  | \u011d     | g           | Latin small letter g with circumflex              |\n * | U+011E  | \u011e     | G           | Latin capital letter G with breve                 |\n * | U+011F  | \u011f     | g           | Latin small letter g with breve                   |\n * | U+0120  | \u0120     | G           | Latin capital letter G with dot above             |\n * | U+0121  | \u0121     | g           | Latin small letter g with dot above               |\n * | U+0122  | \u0122     | G           | Latin capital letter G with cedilla               |\n * | U+0123  | \u0123     | g           | Latin small letter g with cedilla                 |\n * | U+0124  | \u0124     | H           | Latin capital letter H with circumflex            |\n * | U+0125  | \u0125     | h           | Latin small letter h with circumflex              |\n * | U+0126  | \u0126     | H           | Latin capital letter H with stroke                |\n * | U+0127  | \u0127     | h           | Latin small letter h with stroke                  |\n * | U+0128  | \u0128     | I           | Latin capital letter I with tilde                 |\n * | U+0129  | \u0129     | i           | Latin small letter i with tilde                   |\n * | U+012A  | \u012a     | I           | Latin capital letter I with macron                |\n * | U+012B  | \u012b     | i           | Latin small letter i with macron                  |\n * | U+012C  | \u012c     | I           | Latin capital letter I with breve                 |\n * | U+012D  | \u012d     | i           | Latin small letter i with breve                   |\n * | U+012E  | \u012e     | I           | Latin capital letter I with ogonek                |\n * | U+012F  | \u012f     | i           | Latin small letter i with ogonek                  |\n * | U+0130  | \u0130     | I           | Latin capital letter I with dot above             |\n * | U+0131  | \u0131     | i           | Latin small letter dotless i                      |\n * | U+0132  | \u0132     | IJ          | Latin capital ligature IJ                         |\n * | U+0133  | \u0133     | ij          | Latin small ligature ij                           |\n * | U+0134  | \u0134     | J           | Latin capital letter J with circumflex            |\n * | U+0135  | \u0135     | j           | Latin small letter j with circumflex              |\n * | U+0136  | \u0136     | K           | Latin capital letter K with cedilla               |\n * | U+0137  | \u0137     | k           | Latin small letter k with cedilla                 |\n * | U+0138  | \u0138     | k           | Latin small letter Kra                            |\n * | U+0139  | \u0139     | L           | Latin capital letter L with acute                 |\n * | U+013A  | \u013a     | l           | Latin small letter l with acute                   |\n * | U+013B  | \u013b     | L           | Latin capital letter L with cedilla               |\n * | U+013C  | \u013c     | l           | Latin small letter l with cedilla                 |\n * | U+013D  | \u013d     | L           | Latin capital letter L with caron                 |\n * | U+013E  | \u013e     | l           | Latin small letter l with caron                   |\n * | U+013F  | \u013f     | L           | Latin capital letter L with middle dot            |\n * | U+0140  | \u0140     | l           | Latin small letter l with middle dot              |\n * | U+0141  | \u0141     | L           | Latin capital letter L with stroke                |\n * | U+0142  | \u0142     | l           | Latin small letter l with stroke                  |\n * | U+0143  | \u0143     | N           | Latin capital letter N with acute                 |\n * | U+0144  | \u0144     | n           | Latin small letter N with acute                   |\n * | U+0145  | \u0145     | N           | Latin capital letter N with cedilla               |\n * | U+0146  | \u0146     | n           | Latin small letter n with cedilla                 |\n * | U+0147  | \u0147     | N           | Latin capital letter N with caron                 |\n * | U+0148  | \u0148     | n           | Latin small letter n with caron                   |\n * | U+0149  | \u0149     | n           | Latin small letter n preceded by apostrophe       |\n * | U+014A  | \u014a     | N           | Latin capital letter Eng                          |\n * | U+014B  | \u014b     | n           | Latin small letter Eng                            |\n * | U+014C  | \u014c     | O           | Latin capital letter O with macron                |\n * | U+014D  | \u014d     | o           | Latin small letter o with macron                  |\n * | U+014E  | \u014e     | O           | Latin capital letter O with breve                 |\n * | U+014F  | \u014f     | o           | Latin small letter o with breve                   |\n * | U+0150  | \u0150     | O           | Latin capital letter O with double acute          |\n * | U+0151  | \u0151     | o           | Latin small letter o with double acute            |\n * | U+0152  | \u0152     | OE          | Latin capital ligature OE                         |\n * | U+0153  | \u0153     | oe          | Latin small ligature oe                           |\n * | U+0154  | \u0154     | R           | Latin capital letter R with acute                 |\n * | U+0155  | \u0155     | r           | Latin small letter r with acute                   |\n * | U+0156  | \u0156     | R           | Latin capital letter R with cedilla               |\n * | U+0157  | \u0157     | r           | Latin small letter r with cedilla                 |\n * | U+0158  | \u0158     | R           | Latin capital letter R with caron                 |\n * | U+0159  | \u0159     | r           | Latin small letter r with caron                   |\n * | U+015A  | \u015a     | S           | Latin capital letter S with acute                 |\n * | U+015B  | \u015b     | s           | Latin small letter s with acute                   |\n * | U+015C  | \u015c     | S           | Latin capital letter S with circumflex            |\n * | U+015D  | \u015d     | s           | Latin small letter s with circumflex              |\n * | U+015E  | \u015e     | S           | Latin capital letter S with cedilla               |\n * | U+015F  | \u015f     | s           | Latin small letter s with cedilla                 |\n * | U+0160  | \u0160     | S           | Latin capital letter S with caron                 |\n * | U+0161  | \u0161     | s           | Latin small letter s with caron                   |\n * | U+0162  | \u0162     | T           | Latin capital letter T with cedilla               |\n * | U+0163  | \u0163     | t           | Latin small letter t with cedilla                 |\n * | U+0164  | \u0164     | T           | Latin capital letter T with caron                 |\n * | U+0165  | \u0165     | t           | Latin small letter t with caron                   |\n * | U+0166  | \u0166     | T           | Latin capital letter T with stroke                |\n * | U+0167  | \u0167     | t           | Latin small letter t with stroke                  |\n * | U+0168  | \u0168     | U           | Latin capital letter U with tilde                 |\n * | U+0169  | \u0169     | u           | Latin small letter u with tilde                   |\n * | U+016A  | \u016a     | U           | Latin capital letter U with macron                |\n * | U+016B  | \u016b     | u           | Latin small letter u with macron                  |\n * | U+016C  | \u016c     | U           | Latin capital letter U with breve                 |\n * | U+016D  | \u016d     | u           | Latin small letter u with breve                   |\n * | U+016E  | \u016e     | U           | Latin capital letter U with ring above            |\n * | U+016F  | \u016f     | u           | Latin small letter u with ring above              |\n * | U+0170  | \u0170     | U           | Latin capital letter U with double acute          |\n * | U+0171  | \u0171     | u           | Latin small letter u with double acute            |\n * | U+0172  | \u0172     | U           | Latin capital letter U with ogonek                |\n * | U+0173  | \u0173     | u           | Latin small letter u with ogonek                  |\n * | U+0174  | \u0174     | W           | Latin capital letter W with circumflex            |\n * | U+0175  | \u0175     | w           | Latin small letter w with circumflex              |\n * | U+0176  | \u0176     | Y           | Latin capital letter Y with circumflex            |\n * | U+0177  | \u0177     | y           | Latin small letter y with circumflex              |\n * | U+0178  | \u0178     | Y           | Latin capital letter Y with diaeresis             |\n * | U+0179  | \u0179     | Z           | Latin capital letter Z with acute                 |\n * | U+017A  | \u017a     | z           | Latin small letter z with acute                   |\n * | U+017B  | \u017b     | Z           | Latin capital letter Z with dot above             |\n * | U+017C  | \u017c     | z           | Latin small letter z with dot above               |\n * | U+017D  | \u017d     | Z           | Latin capital letter Z with caron                 |\n * | U+017E  | \u017e     | z           | Latin small letter z with caron                   |\n * | U+017F  | \u017f     | s           | Latin small letter long s                         |\n * | U+01A0  | \u01a0     | O           | Latin capital letter O with horn                  |\n * | U+01A1  | \u01a1     | o           | Latin small letter o with horn                    |\n * | U+01AF  | \u01af     | U           | Latin capital letter U with horn                  |\n * | U+01B0  | \u01b0     | u           | Latin small letter u with horn                    |\n * | U+01CD  | \u01cd     | A           | Latin capital letter A with caron                 |\n * | U+01CE  | \u01ce     | a           | Latin small letter a with caron                   |\n * | U+01CF  | \u01cf     | I           | Latin capital letter I with caron                 |\n * | U+01D0  | \u01d0     | i           | Latin small letter i with caron                   |\n * | U+01D1  | \u01d1     | O           | Latin capital letter O with caron                 |\n * | U+01D2  | \u01d2     | o           | Latin small letter o with caron                   |\n * | U+01D3  | \u01d3     | U           | Latin capital letter U with caron                 |\n * | U+01D4  | \u01d4     | u           | Latin small letter u with caron                   |\n * | U+01D5  | \u01d5     | U           | Latin capital letter U with diaeresis and macron  |\n * | U+01D6  | \u01d6     | u           | Latin small letter u with diaeresis and macron    |\n * | U+01D7  | \u01d7     | U           | Latin capital letter U with diaeresis and acute   |\n * | U+01D8  | \u01d8     | u           | Latin small letter u with diaeresis and acute     |\n * | U+01D9  | \u01d9     | U           | Latin capital letter U with diaeresis and caron   |\n * | U+01DA  | \u01da     | u           | Latin small letter u with diaeresis and caron     |\n * | U+01DB  | \u01db     | U           | Latin capital letter U with diaeresis and grave   |\n * | U+01DC  | \u01dc     | u           | Latin small letter u with diaeresis and grave     |\n *\n * Decompositions for Latin Extended-B:\n *\n * |   Code   | Glyph | Replacement |                Description                |\n * | -------- | ----- | ----------- | ----------------------------------------- |\n * | U+0218   | \u0218     | S           | Latin capital letter S with comma below   |\n * | U+0219   | \u0219     | s           | Latin small letter s with comma below     |\n * | U+021A   | \u021a     | T           | Latin capital letter T with comma below   |\n * | U+021B   | \u021b     | t           | Latin small letter t with comma below     |\n *\n * Vowels with diacritic (Chinese, Hanyu Pinyin):\n *\n * |   Code   | Glyph | Replacement |                      Description                      |\n * | -------- | ----- | ----------- | ----------------------------------------------------- |\n * | U+0251   | \u0251     | a           | Latin small letter alpha                              |\n * | U+1EA0   | \u1ea0     | A           | Latin capital letter A with dot below                 |\n * | U+1EA1   | \u1ea1     | a           | Latin small letter a with dot below                   |\n * | U+1EA2   | \u1ea2     | A           | Latin capital letter A with hook above                |\n * | U+1EA3   | \u1ea3     | a           | Latin small letter a with hook above                  |\n * | U+1EA4   | \u1ea4     | A           | Latin capital letter A with circumflex and acute      |\n * | U+1EA5   | \u1ea5     | a           | Latin small letter a with circumflex and acute        |\n * | U+1EA6   | \u1ea6     | A           | Latin capital letter A with circumflex and grave      |\n * | U+1EA7   | \u1ea7     | a           | Latin small letter a with circumflex and grave        |\n * | U+1EA8   | \u1ea8     | A           | Latin capital letter A with circumflex and hook above |\n * | U+1EA9   | \u1ea9     | a           | Latin small letter a with circumflex and hook above   |\n * | U+1EAA   | \u1eaa     | A           | Latin capital letter A with circumflex and tilde      |\n * | U+1EAB   | \u1eab     | a           | Latin small letter a with circumflex and tilde        |\n * | U+1EA6   | \u1eac     | A           | Latin capital letter A with circumflex and dot below  |\n * | U+1EAD   | \u1ead     | a           | Latin small letter a with circumflex and dot below    |\n * | U+1EAE   | \u1eae     | A           | Latin capital letter A with breve and acute           |\n * | U+1EAF   | \u1eaf     | a           | Latin small letter a with breve and acute             |\n * | U+1EB0   | \u1eb0     | A           | Latin capital letter A with breve and grave           |\n * | U+1EB1   | \u1eb1     | a           | Latin small letter a with breve and grave             |\n * | U+1EB2   | \u1eb2     | A           | Latin capital letter A with breve and hook above      |\n * | U+1EB3   | \u1eb3     | a           | Latin small letter a with breve and hook above        |\n * | U+1EB4   | \u1eb4     | A           | Latin capital letter A with breve and tilde           |\n * | U+1EB5   | \u1eb5     | a           | Latin small letter a with breve and tilde             |\n * | U+1EB6   | \u1eb6     | A           | Latin capital letter A with breve and dot below       |\n * | U+1EB7   | \u1eb7     | a           | Latin small letter a with breve and dot below         |\n * | U+1EB8   | \u1eb8     | E           | Latin capital letter E with dot below                 |\n * | U+1EB9   | \u1eb9     | e           | Latin small letter e with dot below                   |\n * | U+1EBA   | \u1eba     | E           | Latin capital letter E with hook above                |\n * | U+1EBB   | \u1ebb     | e           | Latin small letter e with hook above                  |\n * | U+1EBC   | \u1ebc     | E           | Latin capital letter E with tilde                     |\n * | U+1EBD   | \u1ebd     | e           | Latin small letter e with tilde                       |\n * | U+1EBE   | \u1ebe     | E           | Latin capital letter E with circumflex and acute      |\n * | U+1EBF   | \u1ebf     | e           | Latin small letter e with circumflex and acute        |\n * | U+1EC0   | \u1ec0     | E           | Latin capital letter E with circumflex and grave      |\n * | U+1EC1   | \u1ec1     | e           | Latin small letter e with circumflex and grave        |\n * | U+1EC2   | \u1ec2     | E           | Latin capital letter E with circumflex and hook above |\n * | U+1EC3   | \u1ec3     | e           | Latin small letter e with circumflex and hook above   |\n * | U+1EC4   | \u1ec4     | E           | Latin capital letter E with circumflex and tilde      |\n * | U+1EC5   | \u1ec5     | e           | Latin small letter e with circumflex and tilde        |\n * | U+1EC6   | \u1ec6     | E           | Latin capital letter E with circumflex and dot below  |\n * | U+1EC7   | \u1ec7     | e           | Latin small letter e with circumflex and dot below    |\n * | U+1EC8   | \u1ec8     | I           | Latin capital letter I with hook above                |\n * | U+1EC9   | \u1ec9     | i           | Latin small letter i with hook above                  |\n * | U+1ECA   | \u1eca     | I           | Latin capital letter I with dot below                 |\n * | U+1ECB   | \u1ecb     | i           | Latin small letter i with dot below                   |\n * | U+1ECC   | \u1ecc     | O           | Latin capital letter O with dot below                 |\n * | U+1ECD   | \u1ecd     | o           | Latin small letter o with dot below                   |\n * | U+1ECE   | \u1ece     | O           | Latin capital letter O with hook above                |\n * | U+1ECF   | \u1ecf     | o           | Latin small letter o with hook above                  |\n * | U+1ED0   | \u1ed0     | O           | Latin capital letter O with circumflex and acute      |\n * | U+1ED1   | \u1ed1     | o           | Latin small letter o with circumflex and acute        |\n * | U+1ED2   | \u1ed2     | O           | Latin capital letter O with circumflex and grave      |\n * | U+1ED3   | \u1ed3     | o           | Latin small letter o with circumflex and grave        |\n * | U+1ED4   | \u1ed4     | O           | Latin capital letter O with circumflex and hook above |\n * | U+1ED5   | \u1ed5     | o           | Latin small letter o with circumflex and hook above   |\n * | U+1ED6   | \u1ed6     | O           | Latin capital letter O with circumflex and tilde      |\n * | U+1ED7   | \u1ed7     | o           | Latin small letter o with circumflex and tilde        |\n * | U+1ED8   | \u1ed8     | O           | Latin capital letter O with circumflex and dot below  |\n * | U+1ED9   | \u1ed9     | o           | Latin small letter o with circumflex and dot below    |\n * | U+1EDA   | \u1eda     | O           | Latin capital letter O with horn and acute            |\n * | U+1EDB   | \u1edb     | o           | Latin small letter o with horn and acute              |\n * | U+1EDC   | \u1edc     | O           | Latin capital letter O with horn and grave            |\n * | U+1EDD   | \u1edd     | o           | Latin small letter o with horn and grave              |\n * | U+1EDE   | \u1ede     | O           | Latin capital letter O with horn and hook above       |\n * | U+1EDF   | \u1edf     | o           | Latin small letter o with horn and hook above         |\n * | U+1EE0   | \u1ee0     | O           | Latin capital letter O with horn and tilde            |\n * | U+1EE1   | \u1ee1     | o           | Latin small letter o with horn and tilde              |\n * | U+1EE2   | \u1ee2     | O           | Latin capital letter O with horn and dot below        |\n * | U+1EE3   | \u1ee3     | o           | Latin small letter o with horn and dot below          |\n * | U+1EE4   | \u1ee4     | U           | Latin capital letter U with dot below                 |\n * | U+1EE5   | \u1ee5     | u           | Latin small letter u with dot below                   |\n * | U+1EE6   | \u1ee6     | U           | Latin capital letter U with hook above                |\n * | U+1EE7   | \u1ee7     | u           | Latin small letter u with hook above                  |\n * | U+1EE8   | \u1ee8     | U           | Latin capital letter U with horn and acute            |\n * | U+1EE9   | \u1ee9     | u           | Latin small letter u with horn and acute              |\n * | U+1EEA   | \u1eea     | U           | Latin capital letter U with horn and grave            |\n * | U+1EEB   | \u1eeb     | u           | Latin small letter u with horn and grave              |\n * | U+1EEC   | \u1eec     | U           | Latin capital letter U with horn and hook above       |\n * | U+1EED   | \u1eed     | u           | Latin small letter u with horn and hook above         |\n * | U+1EEE   | \u1eee     | U           | Latin capital letter U with horn and tilde            |\n * | U+1EEF   | \u1eef     | u           | Latin small letter u with horn and tilde              |\n * | U+1EF0   | \u1ef0     | U           | Latin capital letter U with horn and dot below        |\n * | U+1EF1   | \u1ef1     | u           | Latin small letter u with horn and dot below          |\n * | U+1EF2   | \u1ef2     | Y           | Latin capital letter Y with grave                     |\n * | U+1EF3   | \u1ef3     | y           | Latin small letter y with grave                       |\n * | U+1EF4   | \u1ef4     | Y           | Latin capital letter Y with dot below                 |\n * | U+1EF5   | \u1ef5     | y           | Latin small letter y with dot below                   |\n * | U+1EF6   | \u1ef6     | Y           | Latin capital letter Y with hook above                |\n * | U+1EF7   | \u1ef7     | y           | Latin small letter y with hook above                  |\n * | U+1EF8   | \u1ef8     | Y           | Latin capital letter Y with tilde                     |\n * | U+1EF9   | \u1ef9     | y           | Latin small letter y with tilde                       |\n *\n * German (`de_DE`), German formal (`de_DE_formal`), German (Switzerland) formal (`de_CH`),\n * and German (Switzerland) informal (`de_CH_informal`) locales:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00C4   | \u00c4     | Ae          | Latin capital letter A with diaeresis   |\n * | U+00E4   | \u00e4     | ae          | Latin small letter a with diaeresis     |\n * | U+00D6   | \u00d6     | Oe          | Latin capital letter O with diaeresis   |\n * | U+00F6   | \u00f6     | oe          | Latin small letter o with diaeresis     |\n * | U+00DC   | \u00dc     | Ue          | Latin capital letter U with diaeresis   |\n * | U+00FC   | \u00fc     | ue          | Latin small letter u with diaeresis     |\n * | U+00DF   | \u00df     | ss          | Latin small letter sharp s              |\n *\n * Danish (`da_DK`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00C6   | \u00c6     | Ae          | Latin capital letter AE                 |\n * | U+00E6   | \u00e6     | ae          | Latin small letter ae                   |\n * | U+00D8   | \u00d8     | Oe          | Latin capital letter O with stroke      |\n * | U+00F8   | \u00f8     | oe          | Latin small letter o with stroke        |\n * | U+00C5   | \u00c5     | Aa          | Latin capital letter A with ring above  |\n * | U+00E5   | \u00e5     | aa          | Latin small letter a with ring above    |\n *\n * Catalan (`ca`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00B7   | l\u00b7l   | ll          | Flown dot (between two Ls)              |\n *\n * Serbian (`sr_RS`) and Bosnian (`bs_BA`) locales:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+0110   | \u0110     | DJ          | Latin capital letter D with stroke      |\n * | U+0111   | \u0111     | dj          | Latin small letter d with stroke        |\n *\n * @since 1.2.1\n * @since 4.6.0 Added locale support for `de_CH`, `de_CH_informal`, and `ca`.\n * @since 4.7.0 Added locale support for `sr_RS`.\n * @since 4.8.0 Added locale support for `bs_BA`.\n *\n * @param string $string Text that might have accent characters\n * @return string Filtered string with replaced \"nice\" characters.\n */\nfunction remove_accents( $string ) {\n\tif ( !preg_match('/[\\x80-\\xff]/', $string) )\n\t\treturn $string;\n\n\tif (seems_utf8($string)) {\n\t\t$chars = array(\n\t\t// Decompositions for Latin-1 Supplement\n\t\t'\u00aa' => 'a', '\u00ba' => 'o',\n\t\t'\u00c0' => 'A', '\u00c1' => 'A',\n\t\t'\u00c2' => 'A', '\u00c3' => 'A',\n\t\t'\u00c4' => 'A', '\u00c5' => 'A',\n\t\t'\u00c6' => 'AE','\u00c7' => 'C',\n\t\t'\u00c8' => 'E', '\u00c9' => 'E',\n\t\t'\u00ca' => 'E', '\u00cb' => 'E',\n\t\t'\u00cc' => 'I', '\u00cd' => 'I',\n\t\t'\u00ce' => 'I', '\u00cf' => 'I',\n\t\t'\u00d0' => 'D', '\u00d1' => 'N',\n\t\t'\u00d2' => 'O', '\u00d3' => 'O',\n\t\t'\u00d4' => 'O', '\u00d5' => 'O',\n\t\t'\u00d6' => 'O', '\u00d9' => 'U',\n\t\t'\u00da' => 'U', '\u00db' => 'U',\n\t\t'\u00dc' => 'U', '\u00dd' => 'Y',\n\t\t'\u00de' => 'TH','\u00df' => 's',\n\t\t'\u00e0' => 'a', '\u00e1' => 'a',\n\t\t'\u00e2' => 'a', '\u00e3' => 'a',\n\t\t'\u00e4' => 'a', '\u00e5' => 'a',\n\t\t'\u00e6' => 'ae','\u00e7' => 'c',\n\t\t'\u00e8' => 'e', '\u00e9' => 'e',\n\t\t'\u00ea' => 'e', '\u00eb' => 'e',\n\t\t'\u00ec' => 'i', '\u00ed' => 'i',\n\t\t'\u00ee' => 'i', '\u00ef' => 'i',\n\t\t'\u00f0' => 'd', '\u00f1' => 'n',\n\t\t'\u00f2' => 'o', '\u00f3' => 'o',\n\t\t'\u00f4' => 'o', '\u00f5' => 'o',\n\t\t'\u00f6' => 'o', '\u00f8' => 'o',\n\t\t'\u00f9' => 'u', '\u00fa' => 'u',\n\t\t'\u00fb' => 'u', '\u00fc' => 'u',\n\t\t'\u00fd' => 'y', '\u00fe' => 'th',\n\t\t'\u00ff' => 'y', '\u00d8' => 'O',\n\t\t// Decompositions for Latin Extended-A\n\t\t'\u0100' => 'A', '\u0101' => 'a',\n\t\t'\u0102' => 'A', '\u0103' => 'a',\n\t\t'\u0104' => 'A', '\u0105' => 'a',\n\t\t'\u0106' => 'C', '\u0107' => 'c',\n\t\t'\u0108' => 'C', '\u0109' => 'c',\n\t\t'\u010a' => 'C', '\u010b' => 'c',\n\t\t'\u010c' => 'C', '\u010d' => 'c',\n\t\t'\u010e' => 'D', '\u010f' => 'd',\n\t\t'\u0110' => 'D', '\u0111' => 'd',\n\t\t'\u0112' => 'E', '\u0113' => 'e',\n\t\t'\u0114' => 'E', '\u0115' => 'e',\n\t\t'\u0116' => 'E', '\u0117' => 'e',\n\t\t'\u0118' => 'E', '\u0119' => 'e',\n\t\t'\u011a' => 'E', '\u011b' => 'e',\n\t\t'\u011c' => 'G', '\u011d' => 'g',\n\t\t'\u011e' => 'G', '\u011f' => 'g',\n\t\t'\u0120' => 'G', '\u0121' => 'g',\n\t\t'\u0122' => 'G', '\u0123' => 'g',\n\t\t'\u0124' => 'H', '\u0125' => 'h',\n\t\t'\u0126' => 'H', '\u0127' => 'h',\n\t\t'\u0128' => 'I', '\u0129' => 'i',\n\t\t'\u012a' => 'I', '\u012b' => 'i',\n\t\t'\u012c' => 'I', '\u012d' => 'i',\n\t\t'\u012e' => 'I', '\u012f' => 'i',\n\t\t'\u0130' => 'I', '\u0131' => 'i',\n\t\t'\u0132' => 'IJ','\u0133' => 'ij',\n\t\t'\u0134' => 'J', '\u0135' => 'j',\n\t\t'\u0136' => 'K', '\u0137' => 'k',\n\t\t'\u0138' => 'k', '\u0139' => 'L',\n\t\t'\u013a' => 'l', '\u013b' => 'L',\n\t\t'\u013c' => 'l', '\u013d' => 'L',\n\t\t'\u013e' => 'l', '\u013f' => 'L',\n\t\t'\u0140' => 'l', '\u0141' => 'L',\n\t\t'\u0142' => 'l', '\u0143' => 'N',\n\t\t'\u0144' => 'n', '\u0145' => 'N',\n\t\t'\u0146' => 'n', '\u0147' => 'N',\n\t\t'\u0148' => 'n', '\u0149' => 'n',\n\t\t'\u014a' => 'N', '\u014b' => 'n',\n\t\t'\u014c' => 'O', '\u014d' => 'o',\n\t\t'\u014e' => 'O', '\u014f' => 'o',\n\t\t'\u0150' => 'O', '\u0151' => 'o',\n\t\t'\u0152' => 'OE','\u0153' => 'oe',\n\t\t'\u0154' => 'R','\u0155' => 'r',\n\t\t'\u0156' => 'R','\u0157' => 'r',\n\t\t'\u0158' => 'R','\u0159' => 'r',\n\t\t'\u015a' => 'S','\u015b' => 's',\n\t\t'\u015c' => 'S','\u015d' => 's',\n\t\t'\u015e' => 'S','\u015f' => 's',\n\t\t'\u0160' => 'S', '\u0161' => 's',\n\t\t'\u0162' => 'T', '\u0163' => 't',\n\t\t'\u0164' => 'T', '\u0165' => 't',\n\t\t'\u0166' => 'T', '\u0167' => 't',\n\t\t'\u0168' => 'U', '\u0169' => 'u',\n\t\t'\u016a' => 'U', '\u016b' => 'u',\n\t\t'\u016c' => 'U', '\u016d' => 'u',\n\t\t'\u016e' => 'U', '\u016f' => 'u',\n\t\t'\u0170' => 'U', '\u0171' => 'u',\n\t\t'\u0172' => 'U', '\u0173' => 'u',\n\t\t'\u0174' => 'W', '\u0175' => 'w',\n\t\t'\u0176' => 'Y', '\u0177' => 'y',\n\t\t'\u0178' => 'Y', '\u0179' => 'Z',\n\t\t'\u017a' => 'z', '\u017b' => 'Z',\n\t\t'\u017c' => 'z', '\u017d' => 'Z',\n\t\t'\u017e' => 'z', '\u017f' => 's',\n\t\t// Decompositions for Latin Extended-B\n\t\t'\u0218' => 'S', '\u0219' => 's',\n\t\t'\u021a' => 'T', '\u021b' => 't',\n\t\t// Euro Sign\n\t\t'\u20ac' => 'E',\n\t\t// GBP (Pound) Sign\n\t\t'\u00a3' => '',\n\t\t// Vowels with diacritic (Vietnamese)\n\t\t// unmarked\n\t\t'\u01a0' => 'O', '\u01a1' => 'o',\n\t\t'\u01af' => 'U', '\u01b0' => 'u',\n\t\t// grave accent\n\t\t'\u1ea6' => 'A', '\u1ea7' => 'a',\n\t\t'\u1eb0' => 'A', '\u1eb1' => 'a',\n\t\t'\u1ec0' => 'E', '\u1ec1' => 'e',\n\t\t'\u1ed2' => 'O', '\u1ed3' => 'o',\n\t\t'\u1edc' => 'O', '\u1edd' => 'o',\n\t\t'\u1eea' => 'U', '\u1eeb' => 'u',\n\t\t'\u1ef2' => 'Y', '\u1ef3' => 'y',\n\t\t// hook\n\t\t'\u1ea2' => 'A', '\u1ea3' => 'a',\n\t\t'\u1ea8' => 'A', '\u1ea9' => 'a',\n\t\t'\u1eb2' => 'A', '\u1eb3' => 'a',\n\t\t'\u1eba' => 'E', '\u1ebb' => 'e',\n\t\t'\u1ec2' => 'E', '\u1ec3' => 'e',\n\t\t'\u1ec8' => 'I', '\u1ec9' => 'i',\n\t\t'\u1ece' => 'O', '\u1ecf' => 'o',\n\t\t'\u1ed4' => 'O', '\u1ed5' => 'o',\n\t\t'\u1ede' => 'O', '\u1edf' => 'o',\n\t\t'\u1ee6' => 'U', '\u1ee7' => 'u',\n\t\t'\u1eec' => 'U', '\u1eed' => 'u',\n\t\t'\u1ef6' => 'Y', '\u1ef7' => 'y',\n\t\t// tilde\n\t\t'\u1eaa' => 'A', '\u1eab' => 'a',\n\t\t'\u1eb4' => 'A', '\u1eb5' => 'a',\n\t\t'\u1ebc' => 'E', '\u1ebd' => 'e',\n\t\t'\u1ec4' => 'E', '\u1ec5' => 'e',\n\t\t'\u1ed6' => 'O', '\u1ed7' => 'o',\n\t\t'\u1ee0' => 'O', '\u1ee1' => 'o',\n\t\t'\u1eee' => 'U', '\u1eef' => 'u',\n\t\t'\u1ef8' => 'Y', '\u1ef9' => 'y',\n\t\t// acute accent\n\t\t'\u1ea4' => 'A', '\u1ea5' => 'a',\n\t\t'\u1eae' => 'A', '\u1eaf' => 'a',\n\t\t'\u1ebe' => 'E', '\u1ebf' => 'e',\n\t\t'\u1ed0' => 'O', '\u1ed1' => 'o',\n\t\t'\u1eda' => 'O', '\u1edb' => 'o',\n\t\t'\u1ee8' => 'U', '\u1ee9' => 'u',\n\t\t// dot below\n\t\t'\u1ea0' => 'A', '\u1ea1' => 'a',\n\t\t'\u1eac' => 'A', '\u1ead' => 'a',\n\t\t'\u1eb6' => 'A', '\u1eb7' => 'a',\n\t\t'\u1eb8' => 'E', '\u1eb9' => 'e',\n\t\t'\u1ec6' => 'E', '\u1ec7' => 'e',\n\t\t'\u1eca' => 'I', '\u1ecb' => 'i',\n\t\t'\u1ecc' => 'O', '\u1ecd' => 'o',\n\t\t'\u1ed8' => 'O', '\u1ed9' => 'o',\n\t\t'\u1ee2' => 'O', '\u1ee3' => 'o',\n\t\t'\u1ee4' => 'U', '\u1ee5' => 'u',\n\t\t'\u1ef0' => 'U', '\u1ef1' => 'u',\n\t\t'\u1ef4' => 'Y', '\u1ef5' => 'y',\n\t\t// Vowels with diacritic (Chinese, Hanyu Pinyin)\n\t\t'\u0251' => 'a',\n\t\t// macron\n\t\t'\u01d5' => 'U', '\u01d6' => 'u',\n\t\t// acute accent\n\t\t'\u01d7' => 'U', '\u01d8' => 'u',\n\t\t// caron\n\t\t'\u01cd' => 'A', '\u01ce' => 'a',\n\t\t'\u01cf' => 'I', '\u01d0' => 'i',\n\t\t'\u01d1' => 'O', '\u01d2' => 'o',\n\t\t'\u01d3' => 'U', '\u01d4' => 'u',\n\t\t'\u01d9' => 'U', '\u01da' => 'u',\n\t\t// grave accent\n\t\t'\u01db' => 'U', '\u01dc' => 'u',\n\t\t);\n\n\t\t// Used for locale-specific rules\n\t\t$locale = get_locale();\n\n\t\tif ( 'de_DE' == $locale || 'de_DE_formal' == $locale || 'de_CH' == $locale || 'de_CH_informal' == $locale ) {\n\t\t\t$chars[ '\u00c4' ] = 'Ae';\n\t\t\t$chars[ '\u00e4' ] = 'ae';\n\t\t\t$chars[ '\u00d6' ] = 'Oe';\n\t\t\t$chars[ '\u00f6' ] = 'oe';\n\t\t\t$chars[ '\u00dc' ] = 'Ue';\n\t\t\t$chars[ '\u00fc' ] = 'ue';\n\t\t\t$chars[ '\u00df' ] = 'ss';\n\t\t} elseif ( 'da_DK' === $locale ) {\n\t\t\t$chars[ '\u00c6' ] = 'Ae';\n \t\t\t$chars[ '\u00e6' ] = 'ae';\n\t\t\t$chars[ '\u00d8' ] = 'Oe';\n\t\t\t$chars[ '\u00f8' ] = 'oe';\n\t\t\t$chars[ '\u00c5' ] = 'Aa';\n\t\t\t$chars[ '\u00e5' ] = 'aa';\n\t\t} elseif ( 'ca' === $locale ) {\n\t\t\t$chars[ 'l\u00b7l' ] = 'll';\n\t\t} elseif ( 'sr_RS' === $locale || 'bs_BA' === $locale ) {\n\t\t\t$chars[ '\u0110' ] = 'DJ';\n\t\t\t$chars[ '\u0111' ] = 'dj';\n\t\t}\n\n\t\t$string = strtr($string, $chars);\n\t} else {\n\t\t$chars = array();\n\t\t// Assume ISO-8859-1 if not UTF-8\n\t\t$chars['in'] = \"\\x80\\x83\\x8a\\x8e\\x9a\\x9e\"\n\t\t\t.\"\\x9f\\xa2\\xa5\\xb5\\xc0\\xc1\\xc2\"\n\t\t\t.\"\\xc3\\xc4\\xc5\\xc7\\xc8\\xc9\\xca\"\n\t\t\t.\"\\xcb\\xcc\\xcd\\xce\\xcf\\xd1\\xd2\"\n\t\t\t.\"\\xd3\\xd4\\xd5\\xd6\\xd8\\xd9\\xda\"\n\t\t\t.\"\\xdb\\xdc\\xdd\\xe0\\xe1\\xe2\\xe3\"\n\t\t\t.\"\\xe4\\xe5\\xe7\\xe8\\xe9\\xea\\xeb\"\n\t\t\t.\"\\xec\\xed\\xee\\xef\\xf1\\xf2\\xf3\"\n\t\t\t.\"\\xf4\\xf5\\xf6\\xf8\\xf9\\xfa\\xfb\"\n\t\t\t.\"\\xfc\\xfd\\xff\";\n\n\t\t$chars['out'] = \"EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy\";\n\n\t\t$string = strtr($string, $chars['in'], $chars['out']);\n\t\t$double_chars = array();\n\t\t$double_chars['in'] = array(\"\\x8c\", \"\\x9c\", \"\\xc6\", \"\\xd0\", \"\\xde\", \"\\xdf\", \"\\xe6\", \"\\xf0\", \"\\xfe\");\n\t\t$double_chars['out'] = array('OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th');\n\t\t$string = str_replace($double_chars['in'], $double_chars['out'], $string);\n\t}\n\n\treturn $string;\n}\n\n/**\n * Sanitizes a filename, replacing whitespace with dashes.\n *\n * Removes special characters that are illegal in filenames on certain\n * operating systems and special characters requiring special escaping\n * to manipulate at the command line. Replaces spaces and consecutive\n * dashes with a single dash. Trims period, dash and underscore from beginning\n * and end of filename. It is not guaranteed that this function will return a\n * filename that is allowed to be uploaded.\n *\n * @since 2.1.0\n *\n * @param string $filename The filename to be sanitized\n * @return string The sanitized filename\n */\nfunction sanitize_file_name( $filename ) {\n\t$filename_raw = $filename;\n\t$special_chars = array(\"?\", \"[\", \"]\", \"/\", \"\\\\\", \"=\", \"<\", \">\", \":\", \";\", \",\", \"'\", \"\\\"\", \"&\", \"$\", \"#\", \"*\", \"(\", \")\", \"|\", \"~\", \"`\", \"!\", \"{\", \"}\", \"%\", \"+\", chr(0));\n\t/**\n\t * Filters the list of characters to remove from a filename.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array  $special_chars Characters to remove.\n\t * @param string $filename_raw  Filename as it was passed into sanitize_file_name().\n\t */\n\t$special_chars = apply_filters( 'sanitize_file_name_chars', $special_chars, $filename_raw );\n\t$filename = preg_replace( \"#\\x{00a0}#siu\", ' ', $filename );\n\t$filename = str_replace( $special_chars, '', $filename );\n\t$filename = str_replace( array( '%20', '+' ), '-', $filename );\n\t$filename = preg_replace( '/[\\r\\n\\t -]+/', '-', $filename );\n\t$filename = trim( $filename, '.-_' );\n\n\tif ( false === strpos( $filename, '.' ) ) {\n\t\t$mime_types = wp_get_mime_types();\n\t\t$filetype = wp_check_filetype( 'test.' . $filename, $mime_types );\n\t\tif ( $filetype['ext'] === $filename ) {\n\t\t\t$filename = 'unnamed-file.' . $filetype['ext'];\n\t\t}\n\t}\n\n\t// Split the filename into a base and extension[s]\n\t$parts = explode('.', $filename);\n\n\t// Return if only one extension\n\tif ( count( $parts ) <= 2 ) {\n\t\t/**\n\t\t * Filters a sanitized filename string.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $filename     Sanitized filename.\n\t\t * @param string $filename_raw The filename prior to sanitization.\n\t\t */\n\t\treturn apply_filters( 'sanitize_file_name', $filename, $filename_raw );\n\t}\n\n\t// Process multiple extensions\n\t$filename = array_shift($parts);\n\t$extension = array_pop($parts);\n\t$mimes = get_allowed_mime_types();\n\n\t/*\n\t * Loop over any intermediate extensions. Postfix them with a trailing underscore\n\t * if they are a 2 - 5 character long alpha string not in the extension whitelist.\n\t */\n\tforeach ( (array) $parts as $part) {\n\t\t$filename .= '.' . $part;\n\n\t\tif ( preg_match(\"/^[a-zA-Z]{2,5}\\d?$/\", $part) ) {\n\t\t\t$allowed = false;\n\t\t\tforeach ( $mimes as $ext_preg => $mime_match ) {\n\t\t\t\t$ext_preg = '!^(' . $ext_preg . ')$!i';\n\t\t\t\tif ( preg_match( $ext_preg, $part ) ) {\n\t\t\t\t\t$allowed = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( !$allowed )\n\t\t\t\t$filename .= '_';\n\t\t}\n\t}\n\t$filename .= '.' . $extension;\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters('sanitize_file_name', $filename, $filename_raw);\n}\n\n/**\n * Sanitizes a username, stripping out unsafe characters.\n *\n * Removes tags, octets, entities, and if strict is enabled, will only keep\n * alphanumeric, _, space, ., -, @. After sanitizing, it passes the username,\n * raw username (the username in the parameter), and the value of $strict as\n * parameters for the {@see 'sanitize_user'} filter.\n *\n * @since 2.0.0\n *\n * @param string $username The username to be sanitized.\n * @param bool   $strict   If set limits $username to specific characters. Default false.\n * @return string The sanitized username, after passing through filters.\n */\nfunction sanitize_user( $username, $strict = false ) {\n\t$raw_username = $username;\n\t$username = wp_strip_all_tags( $username );\n\t$username = remove_accents( $username );\n\t// Kill octets\n\t$username = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $username );\n\t$username = preg_replace( '/&.+?;/', '', $username ); // Kill entities\n\n\t// If strict, reduce to ASCII for max portability.\n\tif ( $strict )\n\t\t$username = preg_replace( '|[^a-z0-9 _.\\-@]|i', '', $username );\n\n\t$username = trim( $username );\n\t// Consolidate contiguous whitespace\n\t$username = preg_replace( '|\\s+|', ' ', $username );\n\n\t/**\n\t * Filters a sanitized username string.\n\t *\n\t * @since 2.0.1\n\t *\n\t * @param string $username     Sanitized username.\n\t * @param string $raw_username The username prior to sanitization.\n\t * @param bool   $strict       Whether to limit the sanitization to specific characters. Default false.\n\t */\n\treturn apply_filters( 'sanitize_user', $username, $raw_username, $strict );\n}\n\n/**\n * Sanitizes a string key.\n *\n * Keys are used as internal identifiers. Lowercase alphanumeric characters, dashes and underscores are allowed.\n *\n * @since 3.0.0\n *\n * @param string $key String key\n * @return string Sanitized key\n */\nfunction sanitize_key( $key ) {\n\t$raw_key = $key;\n\t$key = strtolower( $key );\n\t$key = preg_replace( '/[^a-z0-9_\\-]/', '', $key );\n\n\t/**\n\t * Filters a sanitized key string.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $key     Sanitized key.\n\t * @param string $raw_key The key prior to sanitization.\n\t */\n\treturn apply_filters( 'sanitize_key', $key, $raw_key );\n}\n\n/**\n * Sanitizes a title, or returns a fallback title.\n *\n * Specifically, HTML and PHP tags are stripped. Further actions can be added\n * via the plugin API. If $title is empty and $fallback_title is set, the latter\n * will be used.\n *\n * @since 1.0.0\n *\n * @param string $title          The string to be sanitized.\n * @param string $fallback_title Optional. A title to use if $title is empty.\n * @param string $context        Optional. The operation for which the string is sanitized\n * @return string The sanitized string.\n */\nfunction sanitize_title( $title, $fallback_title = '', $context = 'save' ) {\n\t$raw_title = $title;\n\n\tif ( 'save' == $context )\n\t\t$title = remove_accents($title);\n\n\t/**\n\t * Filters a sanitized title string.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $title     Sanitized title.\n\t * @param string $raw_title The title prior to sanitization.\n\t * @param string $context   The context for which the title is being sanitized.\n\t */\n\t$title = apply_filters( 'sanitize_title', $title, $raw_title, $context );\n\n\tif ( '' === $title || false === $title )\n\t\t$title = $fallback_title;\n\n\treturn $title;\n}\n\n/**\n * Sanitizes a title with the 'query' context.\n *\n * Used for querying the database for a value from URL.\n *\n * @since 3.1.0\n *\n * @param string $title The string to be sanitized.\n * @return string The sanitized string.\n */\nfunction sanitize_title_for_query( $title ) {\n\treturn sanitize_title( $title, '', 'query' );\n}\n\n/**\n * Sanitizes a title, replacing whitespace and a few other characters with dashes.\n *\n * Limits the output to alphanumeric characters, underscore (_) and dash (-).\n * Whitespace becomes a dash.\n *\n * @since 1.2.0\n *\n * @param string $title     The title to be sanitized.\n * @param string $raw_title Optional. Not used.\n * @param string $context   Optional. The operation for which the string is sanitized.\n * @return string The sanitized title.\n */\nfunction sanitize_title_with_dashes( $title, $raw_title = '', $context = 'display' ) {\n\t$title = strip_tags($title);\n\t// Preserve escaped octets.\n\t$title = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title);\n\t// Remove percent signs that are not part of an octet.\n\t$title = str_replace('%', '', $title);\n\t// Restore octets.\n\t$title = preg_replace('|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title);\n\n\tif (seems_utf8($title)) {\n\t\tif (function_exists('mb_strtolower')) {\n\t\t\t$title = mb_strtolower($title, 'UTF-8');\n\t\t}\n\t\t$title = utf8_uri_encode($title, 200);\n\t}\n\n\t$title = strtolower($title);\n\n\tif ( 'save' == $context ) {\n\t\t// Convert nbsp, ndash and mdash to hyphens\n\t\t$title = str_replace( array( '%c2%a0', '%e2%80%93', '%e2%80%94' ), '-', $title );\n\t\t// Convert nbsp, ndash and mdash HTML entities to hyphens\n\t\t$title = str_replace( array( '&nbsp;', '&#160;', '&ndash;', '&#8211;', '&mdash;', '&#8212;' ), '-', $title );\n\t\t// Convert forward slash to hyphen\n\t\t$title = str_replace( '/', '-', $title );\n\n\t\t// Strip these characters entirely\n\t\t$title = str_replace( array(\n\t\t\t// iexcl and iquest\n\t\t\t'%c2%a1', '%c2%bf',\n\t\t\t// angle quotes\n\t\t\t'%c2%ab', '%c2%bb', '%e2%80%b9', '%e2%80%ba',\n\t\t\t// curly quotes\n\t\t\t'%e2%80%98', '%e2%80%99', '%e2%80%9c', '%e2%80%9d',\n\t\t\t'%e2%80%9a', '%e2%80%9b', '%e2%80%9e', '%e2%80%9f',\n\t\t\t// copy, reg, deg, hellip and trade\n\t\t\t'%c2%a9', '%c2%ae', '%c2%b0', '%e2%80%a6', '%e2%84%a2',\n\t\t\t// acute accents\n\t\t\t'%c2%b4', '%cb%8a', '%cc%81', '%cd%81',\n\t\t\t// grave accent, macron, caron\n\t\t\t'%cc%80', '%cc%84', '%cc%8c',\n\t\t), '', $title );\n\n\t\t// Convert times to x\n\t\t$title = str_replace( '%c3%97', 'x', $title );\n\t}\n\n\t$title = preg_replace('/&.+?;/', '', $title); // kill entities\n\t$title = str_replace('.', '-', $title);\n\n\t$title = preg_replace('/[^%a-z0-9 _-]/', '', $title);\n\t$title = preg_replace('/\\s+/', '-', $title);\n\t$title = preg_replace('|-+|', '-', $title);\n\t$title = trim($title, '-');\n\n\treturn $title;\n}\n\n/**\n * Ensures a string is a valid SQL 'order by' clause.\n *\n * Accepts one or more columns, with or without a sort order (ASC / DESC).\n * e.g. 'column_1', 'column_1, column_2', 'column_1 ASC, column_2 DESC' etc.\n *\n * Also accepts 'RAND()'.\n *\n * @since 2.5.1\n *\n * @param string $orderby Order by clause to be validated.\n * @return string|false Returns $orderby if valid, false otherwise.\n */\nfunction sanitize_sql_orderby( $orderby ) {\n\tif ( preg_match( '/^\\s*(([a-z0-9_]+|`[a-z0-9_]+`)(\\s+(ASC|DESC))?\\s*(,\\s*(?=[a-z0-9_`])|$))+$/i', $orderby ) || preg_match( '/^\\s*RAND\\(\\s*\\)\\s*$/i', $orderby ) ) {\n\t\treturn $orderby;\n\t}\n\treturn false;\n}\n\n/**\n * Sanitizes an HTML classname to ensure it only contains valid characters.\n *\n * Strips the string down to A-Z,a-z,0-9,_,-. If this results in an empty\n * string then it will return the alternative value supplied.\n *\n * @todo Expand to support the full range of CDATA that a class attribute can contain.\n *\n * @since 2.8.0\n *\n * @param string $class    The classname to be sanitized\n * @param string $fallback Optional. The value to return if the sanitization ends up as an empty string.\n * \tDefaults to an empty string.\n * @return string The sanitized value\n */\nfunction sanitize_html_class( $class, $fallback = '' ) {\n\t//Strip out any % encoded octets\n\t$sanitized = preg_replace( '|%[a-fA-F0-9][a-fA-F0-9]|', '', $class );\n\n\t//Limit to A-Z,a-z,0-9,_,-\n\t$sanitized = preg_replace( '/[^A-Za-z0-9_-]/', '', $sanitized );\n\n\tif ( '' == $sanitized && $fallback ) {\n\t\treturn sanitize_html_class( $fallback );\n\t}\n\t/**\n\t * Filters a sanitized HTML class string.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $sanitized The sanitized HTML class.\n\t * @param string $class     HTML class before sanitization.\n\t * @param string $fallback  The fallback string.\n\t */\n\treturn apply_filters( 'sanitize_html_class', $sanitized, $class, $fallback );\n}\n\n/**\n * Converts lone & characters into `&#038;` (a.k.a. `&amp;`)\n *\n * @since 0.71\n *\n * @param string $content    String of characters to be converted.\n * @param string $deprecated Not used.\n * @return string Converted string.\n */\nfunction convert_chars( $content, $deprecated = '' ) {\n\tif ( ! empty( $deprecated ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '0.71' );\n\t}\n\n\tif ( strpos( $content, '&' ) !== false ) {\n\t\t$content = preg_replace( '/&([^#])(?![a-z1-4]{1,8};)/i', '&#038;$1', $content );\n\t}\n\n\treturn $content;\n}\n\n/**\n * Converts invalid Unicode references range to valid range.\n *\n * @since 4.3.0\n *\n * @param string $content String with entities that need converting.\n * @return string Converted string.\n */\nfunction convert_invalid_entities( $content ) {\n\t$wp_htmltranswinuni = array(\n\t\t'&#128;' => '&#8364;', // the Euro sign\n\t\t'&#129;' => '',\n\t\t'&#130;' => '&#8218;', // these are Windows CP1252 specific characters\n\t\t'&#131;' => '&#402;',  // they would look weird on non-Windows browsers\n\t\t'&#132;' => '&#8222;',\n\t\t'&#133;' => '&#8230;',\n\t\t'&#134;' => '&#8224;',\n\t\t'&#135;' => '&#8225;',\n\t\t'&#136;' => '&#710;',\n\t\t'&#137;' => '&#8240;',\n\t\t'&#138;' => '&#352;',\n\t\t'&#139;' => '&#8249;',\n\t\t'&#140;' => '&#338;',\n\t\t'&#141;' => '',\n\t\t'&#142;' => '&#381;',\n\t\t'&#143;' => '',\n\t\t'&#144;' => '',\n\t\t'&#145;' => '&#8216;',\n\t\t'&#146;' => '&#8217;',\n\t\t'&#147;' => '&#8220;',\n\t\t'&#148;' => '&#8221;',\n\t\t'&#149;' => '&#8226;',\n\t\t'&#150;' => '&#8211;',\n\t\t'&#151;' => '&#8212;',\n\t\t'&#152;' => '&#732;',\n\t\t'&#153;' => '&#8482;',\n\t\t'&#154;' => '&#353;',\n\t\t'&#155;' => '&#8250;',\n\t\t'&#156;' => '&#339;',\n\t\t'&#157;' => '',\n\t\t'&#158;' => '&#382;',\n\t\t'&#159;' => '&#376;'\n\t);\n\n\tif ( strpos( $content, '&#1' ) !== false ) {\n\t\t$content = strtr( $content, $wp_htmltranswinuni );\n\t}\n\n\treturn $content;\n}\n\n/**\n * Balances tags if forced to, or if the 'use_balanceTags' option is set to true.\n *\n * @since 0.71\n *\n * @param string $text  Text to be balanced\n * @param bool   $force If true, forces balancing, ignoring the value of the option. Default false.\n * @return string Balanced text\n */\nfunction balanceTags( $text, $force = false ) {\n\tif ( $force || get_option('use_balanceTags') == 1 ) {\n\t\treturn force_balance_tags( $text );\n\t} else {\n\t\treturn $text;\n\t}\n}\n\n/**\n * Balances tags of string using a modified stack.\n *\n * @since 2.0.4\n *\n * @author Leonard Lin <leonard@acm.org>\n * @license GPL\n * @copyright November 4, 2001\n * @version 1.1\n * @todo Make better - change loop condition to $text in 1.2\n * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004\n *\t\t1.1  Fixed handling of append/stack pop order of end text\n *\t\t\t Added Cleaning Hooks\n *\t\t1.0  First Version\n *\n * @param string $text Text to be balanced.\n * @return string Balanced text.\n */\nfunction force_balance_tags( $text ) {\n\t$tagstack = array();\n\t$stacksize = 0;\n\t$tagqueue = '';\n\t$newtext = '';\n\t// Known single-entity/self-closing tags\n\t$single_tags = array( 'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param', 'source' );\n\t// Tags that can be immediately nested within themselves\n\t$nestable_tags = array( 'blockquote', 'div', 'object', 'q', 'span' );\n\n\t// WP bug fix for comments - in case you REALLY meant to type '< !--'\n\t$text = str_replace('< !--', '<    !--', $text);\n\t// WP bug fix for LOVE <3 (and other situations with '<' before a number)\n\t$text = preg_replace('#<([0-9]{1})#', '&lt;$1', $text);\n\n\twhile ( preg_match(\"/<(\\/?[\\w:]*)\\s*([^>]*)>/\", $text, $regex) ) {\n\t\t$newtext .= $tagqueue;\n\n\t\t$i = strpos($text, $regex[0]);\n\t\t$l = strlen($regex[0]);\n\n\t\t// clear the shifter\n\t\t$tagqueue = '';\n\t\t// Pop or Push\n\t\tif ( isset($regex[1][0]) && '/' == $regex[1][0] ) { // End Tag\n\t\t\t$tag = strtolower(substr($regex[1],1));\n\t\t\t// if too many closing tags\n\t\t\tif ( $stacksize <= 0 ) {\n\t\t\t\t$tag = '';\n\t\t\t\t// or close to be safe $tag = '/' . $tag;\n\t\t\t}\n\t\t\t// if stacktop value = tag close value then pop\n\t\t\telseif ( $tagstack[$stacksize - 1] == $tag ) { // found closing tag\n\t\t\t\t$tag = '</' . $tag . '>'; // Close Tag\n\t\t\t\t// Pop\n\t\t\t\tarray_pop( $tagstack );\n\t\t\t\t$stacksize--;\n\t\t\t} else { // closing tag not at top, search for it\n\t\t\t\tfor ( $j = $stacksize-1; $j >= 0; $j-- ) {\n\t\t\t\t\tif ( $tagstack[$j] == $tag ) {\n\t\t\t\t\t// add tag to tagqueue\n\t\t\t\t\t\tfor ( $k = $stacksize-1; $k >= $j; $k--) {\n\t\t\t\t\t\t\t$tagqueue .= '</' . array_pop( $tagstack ) . '>';\n\t\t\t\t\t\t\t$stacksize--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$tag = '';\n\t\t\t}\n\t\t} else { // Begin Tag\n\t\t\t$tag = strtolower($regex[1]);\n\n\t\t\t// Tag Cleaning\n\n\t\t\t// If it's an empty tag \"< >\", do nothing\n\t\t\tif ( '' == $tag ) {\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\t// ElseIf it presents itself as a self-closing tag...\n\t\t\telseif ( substr( $regex[2], -1 ) == '/' ) {\n\t\t\t\t// ...but it isn't a known single-entity self-closing tag, then don't let it be treated as such and\n\t\t\t\t// immediately close it with a closing tag (the tag will encapsulate no text as a result)\n\t\t\t\tif ( ! in_array( $tag, $single_tags ) )\n\t\t\t\t\t$regex[2] = trim( substr( $regex[2], 0, -1 ) ) . \"></$tag\";\n\t\t\t}\n\t\t\t// ElseIf it's a known single-entity tag but it doesn't close itself, do so\n\t\t\telseif ( in_array($tag, $single_tags) ) {\n\t\t\t\t$regex[2] .= '/';\n\t\t\t}\n\t\t\t// Else it's not a single-entity tag\n\t\t\telse {\n\t\t\t\t// If the top of the stack is the same as the tag we want to push, close previous tag\n\t\t\t\tif ( $stacksize > 0 && !in_array($tag, $nestable_tags) && $tagstack[$stacksize - 1] == $tag ) {\n\t\t\t\t\t$tagqueue = '</' . array_pop( $tagstack ) . '>';\n\t\t\t\t\t$stacksize--;\n\t\t\t\t}\n\t\t\t\t$stacksize = array_push( $tagstack, $tag );\n\t\t\t}\n\n\t\t\t// Attributes\n\t\t\t$attributes = $regex[2];\n\t\t\tif ( ! empty( $attributes ) && $attributes[0] != '>' )\n\t\t\t\t$attributes = ' ' . $attributes;\n\n\t\t\t$tag = '<' . $tag . $attributes . '>';\n\t\t\t//If already queuing a close tag, then put this tag on, too\n\t\t\tif ( !empty($tagqueue) ) {\n\t\t\t\t$tagqueue .= $tag;\n\t\t\t\t$tag = '';\n\t\t\t}\n\t\t}\n\t\t$newtext .= substr($text, 0, $i) . $tag;\n\t\t$text = substr($text, $i + $l);\n\t}\n\n\t// Clear Tag Queue\n\t$newtext .= $tagqueue;\n\n\t// Add Remaining text\n\t$newtext .= $text;\n\n\t// Empty Stack\n\twhile( $x = array_pop($tagstack) )\n\t\t$newtext .= '</' . $x . '>'; // Add remaining tags to close\n\n\t// WP fix for the bug with HTML comments\n\t$newtext = str_replace(\"< !--\",\"<!--\",$newtext);\n\t$newtext = str_replace(\"<    !--\",\"< !--\",$newtext);\n\n\treturn $newtext;\n}\n\n/**\n * Acts on text which is about to be edited.\n *\n * The $content is run through esc_textarea(), which uses htmlspecialchars()\n * to convert special characters to HTML entities. If `$richedit` is set to true,\n * it is simply a holder for the {@see 'format_to_edit'} filter.\n *\n * @since 0.71\n * @since 4.4.0 The `$richedit` parameter was renamed to `$rich_text` for clarity.\n *\n * @param string $content   The text about to be edited.\n * @param bool   $rich_text Optional. Whether `$content` should be considered rich text,\n *                          in which case it would not be passed through esc_textarea().\n *                          Default false.\n * @return string The text after the filter (and possibly htmlspecialchars()) has been run.\n */\nfunction format_to_edit( $content, $rich_text = false ) {\n\t/**\n\t * Filters the text to be formatted for editing.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $content The text, prior to formatting for editing.\n\t */\n\t$content = apply_filters( 'format_to_edit', $content );\n\tif ( ! $rich_text )\n\t\t$content = esc_textarea( $content );\n\treturn $content;\n}\n\n/**\n * Add leading zeros when necessary.\n *\n * If you set the threshold to '4' and the number is '10', then you will get\n * back '0010'. If you set the threshold to '4' and the number is '5000', then you\n * will get back '5000'.\n *\n * Uses sprintf to append the amount of zeros based on the $threshold parameter\n * and the size of the number. If the number is large enough, then no zeros will\n * be appended.\n *\n * @since 0.71\n *\n * @param int $number     Number to append zeros to if not greater than threshold.\n * @param int $threshold  Digit places number needs to be to not have zeros added.\n * @return string Adds leading zeros to number if needed.\n */\nfunction zeroise( $number, $threshold ) {\n\treturn sprintf( '%0' . $threshold . 's', $number );\n}\n\n/**\n * Adds backslashes before letters and before a number at the start of a string.\n *\n * @since 0.71\n *\n * @param string $string Value to which backslashes will be added.\n * @return string String with backslashes inserted.\n */\nfunction backslashit( $string ) {\n\tif ( isset( $string[0] ) && $string[0] >= '0' && $string[0] <= '9' )\n\t\t$string = '\\\\\\\\' . $string;\n\treturn addcslashes( $string, 'A..Za..z' );\n}\n\n/**\n * Appends a trailing slash.\n *\n * Will remove trailing forward and backslashes if it exists already before adding\n * a trailing forward slash. This prevents double slashing a string or path.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 1.2.0\n *\n * @param string $string What to add the trailing slash to.\n * @return string String with trailing slash added.\n */\nfunction trailingslashit( $string ) {\n\treturn untrailingslashit( $string ) . '/';\n}\n\n/**\n * Removes trailing forward slashes and backslashes if they exist.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 2.2.0\n *\n * @param string $string What to remove the trailing slashes from.\n * @return string String without the trailing slashes.\n */\nfunction untrailingslashit( $string ) {\n\treturn rtrim( $string, '/\\\\' );\n}\n\n/**\n * Adds slashes to escape strings.\n *\n * Slashes will first be removed if magic_quotes_gpc is set, see {@link\n * https://secure.php.net/magic_quotes} for more details.\n *\n * @since 0.71\n *\n * @param string $gpc The string returned from HTTP request data.\n * @return string Returns a string escaped with slashes.\n */\nfunction addslashes_gpc($gpc) {\n\tif ( get_magic_quotes_gpc() )\n\t\t$gpc = stripslashes($gpc);\n\n\treturn wp_slash($gpc);\n}\n\n/**\n * Navigates through an array, object, or scalar, and removes slashes from the values.\n *\n * @since 2.0.0\n *\n * @param mixed $value The value to be stripped.\n * @return mixed Stripped value.\n */\nfunction stripslashes_deep( $value ) {\n\treturn map_deep( $value, 'stripslashes_from_strings_only' );\n}\n\n/**\n * Callback function for `stripslashes_deep()` which strips slashes from strings.\n *\n * @since 4.4.0\n *\n * @param mixed $value The array or string to be stripped.\n * @return mixed $value The stripped value.\n */\nfunction stripslashes_from_strings_only( $value ) {\n\treturn is_string( $value ) ? stripslashes( $value ) : $value;\n}\n\n/**\n * Navigates through an array, object, or scalar, and encodes the values to be used in a URL.\n *\n * @since 2.2.0\n *\n * @param mixed $value The array or string to be encoded.\n * @return mixed $value The encoded value.\n */\nfunction urlencode_deep( $value ) {\n\treturn map_deep( $value, 'urlencode' );\n}\n\n/**\n * Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL.\n *\n * @since 3.4.0\n *\n * @param mixed $value The array or string to be encoded.\n * @return mixed $value The encoded value.\n */\nfunction rawurlencode_deep( $value ) {\n\treturn map_deep( $value, 'rawurlencode' );\n}\n\n/**\n * Navigates through an array, object, or scalar, and decodes URL-encoded values\n *\n * @since 4.4.0\n *\n * @param mixed $value The array or string to be decoded.\n * @return mixed $value The decoded value.\n */\nfunction urldecode_deep( $value ) {\n\treturn map_deep( $value, 'urldecode' );\n}\n\n/**\n * Converts email addresses characters to HTML entities to block spam bots.\n *\n * @since 0.71\n *\n * @param string $email_address Email address.\n * @param int    $hex_encoding  Optional. Set to 1 to enable hex encoding.\n * @return string Converted email address.\n */\nfunction antispambot( $email_address, $hex_encoding = 0 ) {\n\t$email_no_spam_address = '';\n\tfor ( $i = 0, $len = strlen( $email_address ); $i < $len; $i++ ) {\n\t\t$j = rand( 0, 1 + $hex_encoding );\n\t\tif ( $j == 0 ) {\n\t\t\t$email_no_spam_address .= '&#' . ord( $email_address[$i] ) . ';';\n\t\t} elseif ( $j == 1 ) {\n\t\t\t$email_no_spam_address .= $email_address[$i];\n\t\t} elseif ( $j == 2 ) {\n\t\t\t$email_no_spam_address .= '%' . zeroise( dechex( ord( $email_address[$i] ) ), 2 );\n\t\t}\n\t}\n\n\treturn str_replace( '@', '&#64;', $email_no_spam_address );\n}\n\n/**\n * Callback to convert URI match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URI address.\n */\nfunction _make_url_clickable_cb( $matches ) {\n\t$url = $matches[2];\n\n\tif ( ')' == $matches[3] && strpos( $url, '(' ) ) {\n\t\t// If the trailing character is a closing parethesis, and the URL has an opening parenthesis in it, add the closing parenthesis to the URL.\n\t\t// Then we can let the parenthesis balancer do its thing below.\n\t\t$url .= $matches[3];\n\t\t$suffix = '';\n\t} else {\n\t\t$suffix = $matches[3];\n\t}\n\n\t// Include parentheses in the URL only if paired\n\twhile ( substr_count( $url, '(' ) < substr_count( $url, ')' ) ) {\n\t\t$suffix = strrchr( $url, ')' ) . $suffix;\n\t\t$url = substr( $url, 0, strrpos( $url, ')' ) );\n\t}\n\n\t$url = esc_url($url);\n\tif ( empty($url) )\n\t\treturn $matches[0];\n\n\treturn $matches[1] . \"<a href=\\\"$url\\\" rel=\\\"nofollow\\\">$url</a>\" . $suffix;\n}\n\n/**\n * Callback to convert URL match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URL address.\n */\nfunction _make_web_ftp_clickable_cb( $matches ) {\n\t$ret = '';\n\t$dest = $matches[2];\n\t$dest = 'http://' . $dest;\n\n\t// removed trailing [.,;:)] from URL\n\tif ( in_array( substr($dest, -1), array('.', ',', ';', ':', ')') ) === true ) {\n\t\t$ret = substr($dest, -1);\n\t\t$dest = substr($dest, 0, strlen($dest)-1);\n\t}\n\n\t$dest = esc_url($dest);\n\tif ( empty($dest) )\n\t\treturn $matches[0];\n\n\treturn $matches[1] . \"<a href=\\\"$dest\\\" rel=\\\"nofollow\\\">$dest</a>$ret\";\n}\n\n/**\n * Callback to convert email address match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with email address.\n */\nfunction _make_email_clickable_cb( $matches ) {\n\t$email = $matches[2] . '@' . $matches[3];\n\treturn $matches[1] . \"<a href=\\\"mailto:$email\\\">$email</a>\";\n}\n\n/**\n * Convert plaintext URI to HTML links.\n *\n * Converts URI, www and ftp, and email addresses. Finishes by fixing links\n * within links.\n *\n * @since 0.71\n *\n * @param string $text Content to convert URIs.\n * @return string Content with converted URIs.\n */\nfunction make_clickable( $text ) {\n\t$r = '';\n\t$textarr = preg_split( '/(<[^<>]+>)/', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); // split out HTML tags\n\t$nested_code_pre = 0; // Keep track of how many levels link is nested inside <pre> or <code>\n\tforeach ( $textarr as $piece ) {\n\n\t\tif ( preg_match( '|^<code[\\s>]|i', $piece ) || preg_match( '|^<pre[\\s>]|i', $piece ) || preg_match( '|^<script[\\s>]|i', $piece ) || preg_match( '|^<style[\\s>]|i', $piece ) )\n\t\t\t$nested_code_pre++;\n\t\telseif ( $nested_code_pre && ( '</code>' === strtolower( $piece ) || '</pre>' === strtolower( $piece ) || '</script>' === strtolower( $piece ) || '</style>' === strtolower( $piece ) ) )\n\t\t\t$nested_code_pre--;\n\n\t\tif ( $nested_code_pre || empty( $piece ) || ( $piece[0] === '<' && ! preg_match( '|^<\\s*[\\w]{1,20}+://|', $piece ) ) ) {\n\t\t\t$r .= $piece;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Long strings might contain expensive edge cases ...\n\t\tif ( 10000 < strlen( $piece ) ) {\n\t\t\t// ... break it up\n\t\t\tforeach ( _split_str_by_whitespace( $piece, 2100 ) as $chunk ) { // 2100: Extra room for scheme and leading and trailing paretheses\n\t\t\t\tif ( 2101 < strlen( $chunk ) ) {\n\t\t\t\t\t$r .= $chunk; // Too big, no whitespace: bail.\n\t\t\t\t} else {\n\t\t\t\t\t$r .= make_clickable( $chunk );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$ret = \" $piece \"; // Pad with whitespace to simplify the regexes\n\n\t\t\t$url_clickable = '~\n\t\t\t\t([\\\\s(<.,;:!?])                                        # 1: Leading whitespace, or punctuation\n\t\t\t\t(                                                      # 2: URL\n\t\t\t\t\t[\\\\w]{1,20}+://                                # Scheme and hier-part prefix\n\t\t\t\t\t(?=\\S{1,2000}\\s)                               # Limit to URLs less than about 2000 characters long\n\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]*+         # Non-punctuation URL character\n\t\t\t\t\t(?:                                            # Unroll the Loop: Only allow puctuation URL character if followed by a non-punctuation URL character\n\t\t\t\t\t\t[\\'.,;:!?)]                            # Punctuation URL character\n\t\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]++ # Non-punctuation URL character\n\t\t\t\t\t)*\n\t\t\t\t)\n\t\t\t\t(\\)?)                                                  # 3: Trailing closing parenthesis (for parethesis balancing post processing)\n\t\t\t~xS'; // The regex is a non-anchored pattern and does not have a single fixed starting character.\n\t\t\t      // Tell PCRE to spend more time optimizing since, when used on a page load, it will probably be used several times.\n\n\t\t\t$ret = preg_replace_callback( $url_clickable, '_make_url_clickable_cb', $ret );\n\n\t\t\t$ret = preg_replace_callback( '#([\\s>])((www|ftp)\\.[\\w\\\\x80-\\\\xff\\#$%&~/.\\-;:=,?@\\[\\]+]+)#is', '_make_web_ftp_clickable_cb', $ret );\n\t\t\t$ret = preg_replace_callback( '#([\\s>])([.0-9a-z_+-]+)@(([0-9a-z-]+\\.)+[0-9a-z]{2,})#i', '_make_email_clickable_cb', $ret );\n\n\t\t\t$ret = substr( $ret, 1, -1 ); // Remove our whitespace padding.\n\t\t\t$r .= $ret;\n\t\t}\n\t}\n\n\t// Cleanup of accidental links within links\n\treturn preg_replace( '#(<a([ \\r\\n\\t]+[^>]+?>|>))<a [^>]+?>([^>]+?)</a></a>#i', \"$1$3</a>\", $r );\n}\n\n/**\n * Breaks a string into chunks by splitting at whitespace characters.\n * The length of each returned chunk is as close to the specified length goal as possible,\n * with the caveat that each chunk includes its trailing delimiter.\n * Chunks longer than the goal are guaranteed to not have any inner whitespace.\n *\n * Joining the returned chunks with empty delimiters reconstructs the input string losslessly.\n *\n * Input string must have no null characters (or eventual transformations on output chunks must not care about null characters)\n *\n *     _split_str_by_whitespace( \"1234 67890 1234 67890a cd 1234   890 123456789 1234567890a    45678   1 3 5 7 90 \", 10 ) ==\n *     array (\n *         0 => '1234 67890 ',  // 11 characters: Perfect split\n *         1 => '1234 ',        //  5 characters: '1234 67890a' was too long\n *         2 => '67890a cd ',   // 10 characters: '67890a cd 1234' was too long\n *         3 => '1234   890 ',  // 11 characters: Perfect split\n *         4 => '123456789 ',   // 10 characters: '123456789 1234567890a' was too long\n *         5 => '1234567890a ', // 12 characters: Too long, but no inner whitespace on which to split\n *         6 => '   45678   ',  // 11 characters: Perfect split\n *         7 => '1 3 5 7 90 ',  // 11 characters: End of $string\n *     );\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $string The string to split.\n * @param int    $goal   The desired chunk length.\n * @return array Numeric array of chunks.\n */\nfunction _split_str_by_whitespace( $string, $goal ) {\n\t$chunks = array();\n\n\t$string_nullspace = strtr( $string, \"\\r\\n\\t\\v\\f \", \"\\000\\000\\000\\000\\000\\000\" );\n\n\twhile ( $goal < strlen( $string_nullspace ) ) {\n\t\t$pos = strrpos( substr( $string_nullspace, 0, $goal + 1 ), \"\\000\" );\n\n\t\tif ( false === $pos ) {\n\t\t\t$pos = strpos( $string_nullspace, \"\\000\", $goal + 1 );\n\t\t\tif ( false === $pos ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$chunks[] = substr( $string, 0, $pos + 1 );\n\t\t$string = substr( $string, $pos + 1 );\n\t\t$string_nullspace = substr( $string_nullspace, $pos + 1 );\n\t}\n\n\tif ( $string ) {\n\t\t$chunks[] = $string;\n\t}\n\n\treturn $chunks;\n}\n\n/**\n * Adds rel nofollow string to all HTML A elements in content.\n *\n * @since 1.5.0\n *\n * @param string $text Content that may contain HTML A elements.\n * @return string Converted content.\n */\nfunction wp_rel_nofollow( $text ) {\n\t// This is a pre save filter, so text is already escaped.\n\t$text = stripslashes($text);\n\t$text = preg_replace_callback('|<a (.+?)>|i', 'wp_rel_nofollow_callback', $text);\n\treturn wp_slash( $text );\n}\n\n/**\n * Callback to add rel=nofollow string to HTML A element.\n *\n * Will remove already existing rel=\"nofollow\" and rel='nofollow' from the\n * string to prevent from invalidating (X)HTML.\n *\n * @since 2.3.0\n *\n * @param array $matches Single Match\n * @return string HTML A Element with rel nofollow.\n */\nfunction wp_rel_nofollow_callback( $matches ) {\n\t$text = $matches[1];\n\t$atts = shortcode_parse_atts( $matches[1] );\n\t$rel  = 'nofollow';\n\n\tif ( preg_match( '%href=[\"\\'](' . preg_quote( set_url_scheme( home_url(), 'http' ) ) . ')%i', $text ) ||\n\t     preg_match( '%href=[\"\\'](' . preg_quote( set_url_scheme( home_url(), 'https' ) ) . ')%i', $text )\n\t) {\n\t\treturn \"<a $text>\";\n\t}\n\n\tif ( ! empty( $atts['rel'] ) ) {\n\t\t$parts = array_map( 'trim', explode( ' ', $atts['rel'] ) );\n\t\tif ( false === array_search( 'nofollow', $parts ) ) {\n\t\t\t$parts[] = 'nofollow';\n\t\t}\n\t\t$rel = implode( ' ', $parts );\n\t\tunset( $atts['rel'] );\n\n\t\t$html = '';\n\t\tforeach ( $atts as $name => $value ) {\n\t\t\t$html .= \"{$name}=\\\"$value\\\" \";\n\t\t}\n\t\t$text = trim( $html );\n\t}\n\treturn \"<a $text rel=\\\"$rel\\\">\";\n}\n\n/**\n * Convert one smiley code to the icon graphic file equivalent.\n *\n * Callback handler for convert_smilies().\n *\n * Looks up one smiley code in the $wpsmiliestrans global array and returns an\n * `<img>` string for that smiley.\n *\n * @since 2.8.0\n *\n * @global array $wpsmiliestrans\n *\n * @param array $matches Single match. Smiley code to convert to image.\n * @return string Image string for smiley.\n */\nfunction translate_smiley( $matches ) {\n\tglobal $wpsmiliestrans;\n\n\tif ( count( $matches ) == 0 )\n\t\treturn '';\n\n\t$smiley = trim( reset( $matches ) );\n\t$img = $wpsmiliestrans[ $smiley ];\n\n\t$matches = array();\n\t$ext = preg_match( '/\\.([^.]+)$/', $img, $matches ) ? strtolower( $matches[1] ) : false;\n\t$image_exts = array( 'jpg', 'jpeg', 'jpe', 'gif', 'png' );\n\n\t// Don't convert smilies that aren't images - they're probably emoji.\n\tif ( ! in_array( $ext, $image_exts ) ) {\n\t\treturn $img;\n\t}\n\n\t/**\n\t * Filters the Smiley image URL before it's used in the image element.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $smiley_url URL for the smiley image.\n\t * @param string $img        Filename for the smiley image.\n\t * @param string $site_url   Site URL, as returned by site_url().\n\t */\n\t$src_url = apply_filters( 'smilies_src', includes_url( \"images/smilies/$img\" ), $img, site_url() );\n\n\treturn sprintf( '<img src=\"%s\" alt=\"%s\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />', esc_url( $src_url ), esc_attr( $smiley ) );\n}\n\n/**\n * Convert text equivalent of smilies to images.\n *\n * Will only convert smilies if the option 'use_smilies' is true and the global\n * used in the function isn't empty.\n *\n * @since 0.71\n *\n * @global string|array $wp_smiliessearch\n *\n * @param string $text Content to convert smilies from text.\n * @return string Converted content with text smilies replaced with images.\n */\nfunction convert_smilies( $text ) {\n\tglobal $wp_smiliessearch;\n\t$output = '';\n\tif ( get_option( 'use_smilies' ) && ! empty( $wp_smiliessearch ) ) {\n\t\t// HTML loop taken from texturize function, could possible be consolidated\n\t\t$textarr = preg_split( '/(<.*>)/U', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); // capture the tags as well as in between\n\t\t$stop = count( $textarr );// loop stuff\n\n\t\t// Ignore proessing of specific tags\n\t\t$tags_to_ignore = 'code|pre|style|script|textarea';\n\t\t$ignore_block_element = '';\n\n\t\tfor ( $i = 0; $i < $stop; $i++ ) {\n\t\t\t$content = $textarr[$i];\n\n\t\t\t// If we're in an ignore block, wait until we find its closing tag\n\t\t\tif ( '' == $ignore_block_element && preg_match( '/^<(' . $tags_to_ignore . ')>/', $content, $matches ) )  {\n\t\t\t\t$ignore_block_element = $matches[1];\n\t\t\t}\n\n\t\t\t// If it's not a tag and not in ignore block\n\t\t\tif ( '' ==  $ignore_block_element && strlen( $content ) > 0 && '<' != $content[0] ) {\n\t\t\t\t$content = preg_replace_callback( $wp_smiliessearch, 'translate_smiley', $content );\n\t\t\t}\n\n\t\t\t// did we exit ignore block\n\t\t\tif ( '' != $ignore_block_element && '</' . $ignore_block_element . '>' == $content )  {\n\t\t\t\t$ignore_block_element = '';\n\t\t\t}\n\n\t\t\t$output .= $content;\n\t\t}\n\t} else {\n\t\t// return default text.\n\t\t$output = $text;\n\t}\n\treturn $output;\n}\n\n/**\n * Verifies that an email is valid.\n *\n * Does not grok i18n domains. Not RFC compliant.\n *\n * @since 0.71\n *\n * @param string $email      Email address to verify.\n * @param bool   $deprecated Deprecated.\n * @return string|bool Either false or the valid email address.\n */\nfunction is_email( $email, $deprecated = false ) {\n\tif ( ! empty( $deprecated ) )\n\t\t_deprecated_argument( __FUNCTION__, '3.0.0' );\n\n\t// Test for the minimum length the email can be\n\tif ( strlen( $email ) < 6 ) {\n\t\t/**\n\t\t * Filters whether an email address is valid.\n\t\t *\n\t\t * This filter is evaluated under several different contexts, such as 'email_too_short',\n\t\t * 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits',\n\t\t * 'domain_no_periods', 'sub_hyphen_limits', 'sub_invalid_chars', or no specific context.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param bool   $is_email Whether the email address has passed the is_email() checks. Default false.\n\t\t * @param string $email    The email address being checked.\n\t\t * @param string $context  Context under which the email was tested.\n\t\t */\n\t\treturn apply_filters( 'is_email', false, $email, 'email_too_short' );\n\t}\n\n\t// Test for an @ character after the first position\n\tif ( strpos( $email, '@', 1 ) === false ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'email_no_at' );\n\t}\n\n\t// Split out the local and domain parts\n\tlist( $local, $domain ) = explode( '@', $email, 2 );\n\n\t// LOCAL PART\n\t// Test for invalid characters\n\tif ( !preg_match( '/^[a-zA-Z0-9!#$%&\\'*+\\/=?^_`{|}~\\.-]+$/', $local ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'local_invalid_chars' );\n\t}\n\n\t// DOMAIN PART\n\t// Test for sequences of periods\n\tif ( preg_match( '/\\.{2,}/', $domain ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_period_sequence' );\n\t}\n\n\t// Test for leading and trailing periods and whitespace\n\tif ( trim( $domain, \" \\t\\n\\r\\0\\x0B.\" ) !== $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_period_limits' );\n\t}\n\n\t// Split the domain into subs\n\t$subs = explode( '.', $domain );\n\n\t// Assume the domain will have at least two subs\n\tif ( 2 > count( $subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_no_periods' );\n\t}\n\n\t// Loop through each sub\n\tforeach ( $subs as $sub ) {\n\t\t// Test for leading and trailing hyphens and whitespace\n\t\tif ( trim( $sub, \" \\t\\n\\r\\0\\x0B-\" ) !== $sub ) {\n\t\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\t\treturn apply_filters( 'is_email', false, $email, 'sub_hyphen_limits' );\n\t\t}\n\n\t\t// Test for invalid characters\n\t\tif ( !preg_match('/^[a-z0-9-]+$/i', $sub ) ) {\n\t\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\t\treturn apply_filters( 'is_email', false, $email, 'sub_invalid_chars' );\n\t\t}\n\t}\n\n\t// Congratulations your email made it!\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters( 'is_email', $email, $email, null );\n}\n\n/**\n * Convert to ASCII from email subjects.\n *\n * @since 1.2.0\n *\n * @param string $string Subject line\n * @return string Converted string to ASCII\n */\nfunction wp_iso_descrambler( $string ) {\n\t/* this may only work with iso-8859-1, I'm afraid */\n\tif (!preg_match('#\\=\\?(.+)\\?Q\\?(.+)\\?\\=#i', $string, $matches)) {\n\t\treturn $string;\n\t} else {\n\t\t$subject = str_replace('_', ' ', $matches[2]);\n\t\treturn preg_replace_callback( '#\\=([0-9a-f]{2})#i', '_wp_iso_convert', $subject );\n\t}\n}\n\n/**\n * Helper function to convert hex encoded chars to ASCII\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $match The preg_replace_callback matches array\n * @return string Converted chars\n */\nfunction _wp_iso_convert( $match ) {\n\treturn chr( hexdec( strtolower( $match[1] ) ) );\n}\n\n/**\n * Returns a date in the GMT equivalent.\n *\n * Requires and returns a date in the Y-m-d H:i:s format. If there is a\n * timezone_string available, the date is assumed to be in that timezone,\n * otherwise it simply subtracts the value of the 'gmt_offset' option. Return\n * format can be overridden using the $format parameter.\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date (default is Y-m-d H:i:s)\n * @return string GMT version of the date provided.\n */\nfunction get_gmt_from_date( $string, $format = 'Y-m-d H:i:s' ) {\n\t$tz = get_option( 'timezone_string' );\n\tif ( $tz ) {\n\t\t$datetime = date_create( $string, new DateTimeZone( $tz ) );\n\t\tif ( ! $datetime ) {\n\t\t\treturn gmdate( $format, 0 );\n\t\t}\n\t\t$datetime->setTimezone( new DateTimeZone( 'UTC' ) );\n\t\t$string_gmt = $datetime->format( $format );\n\t} else {\n\t\tif ( ! preg_match( '#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches ) ) {\n\t\t\t$datetime = strtotime( $string );\n\t\t\tif ( false === $datetime ) {\n\t\t\t\treturn gmdate( $format, 0 );\n\t\t\t}\n\t\t\treturn gmdate( $format, $datetime );\n\t\t}\n\t\t$string_time = gmmktime( $matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1] );\n\t\t$string_gmt = gmdate( $format, $string_time - get_option( 'gmt_offset' ) * HOUR_IN_SECONDS );\n\t}\n\treturn $string_gmt;\n}\n\n/**\n * Converts a GMT date into the correct format for the blog.\n *\n * Requires and returns a date in the Y-m-d H:i:s format. If there is a\n * timezone_string available, the returned date is in that timezone, otherwise\n * it simply adds the value of gmt_offset. Return format can be overridden\n * using the $format parameter\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date (default is Y-m-d H:i:s)\n * @return string Formatted date relative to the timezone / GMT offset.\n */\nfunction get_date_from_gmt( $string, $format = 'Y-m-d H:i:s' ) {\n\t$tz = get_option( 'timezone_string' );\n\tif ( $tz ) {\n\t\t$datetime = date_create( $string, new DateTimeZone( 'UTC' ) );\n\t\tif ( ! $datetime )\n\t\t\treturn date( $format, 0 );\n\t\t$datetime->setTimezone( new DateTimeZone( $tz ) );\n\t\t$string_localtime = $datetime->format( $format );\n\t} else {\n\t\tif ( ! preg_match('#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches) )\n\t\t\treturn date( $format, 0 );\n\t\t$string_time = gmmktime( $matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1] );\n\t\t$string_localtime = gmdate( $format, $string_time + get_option( 'gmt_offset' ) * HOUR_IN_SECONDS );\n\t}\n\treturn $string_localtime;\n}\n\n/**\n * Computes an offset in seconds from an iso8601 timezone.\n *\n * @since 1.5.0\n *\n * @param string $timezone Either 'Z' for 0 offset or '\u00b1hhmm'.\n * @return int|float The offset in seconds.\n */\nfunction iso8601_timezone_to_offset( $timezone ) {\n\t// $timezone is either 'Z' or '[+|-]hhmm'\n\tif ($timezone == 'Z') {\n\t\t$offset = 0;\n\t} else {\n\t\t$sign    = (substr($timezone, 0, 1) == '+') ? 1 : -1;\n\t\t$hours   = intval(substr($timezone, 1, 2));\n\t\t$minutes = intval(substr($timezone, 3, 4)) / 60;\n\t\t$offset  = $sign * HOUR_IN_SECONDS * ($hours + $minutes);\n\t}\n\treturn $offset;\n}\n\n/**\n * Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt].\n *\n * @since 1.5.0\n *\n * @param string $date_string Date and time in ISO 8601 format {@link https://en.wikipedia.org/wiki/ISO_8601}.\n * @param string $timezone    Optional. If set to GMT returns the time minus gmt_offset. Default is 'user'.\n * @return string The date and time in MySQL DateTime format - Y-m-d H:i:s.\n */\nfunction iso8601_to_datetime( $date_string, $timezone = 'user' ) {\n\t$timezone = strtolower($timezone);\n\n\tif ($timezone == 'gmt') {\n\n\t\tpreg_match('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\\+|\\-][0-9]{2,4}){0,1}#', $date_string, $date_bits);\n\n\t\tif (!empty($date_bits[7])) { // we have a timezone, so let's compute an offset\n\t\t\t$offset = iso8601_timezone_to_offset($date_bits[7]);\n\t\t} else { // we don't have a timezone, so we assume user local timezone (not server's!)\n\t\t\t$offset = HOUR_IN_SECONDS * get_option('gmt_offset');\n\t\t}\n\n\t\t$timestamp = gmmktime($date_bits[4], $date_bits[5], $date_bits[6], $date_bits[2], $date_bits[3], $date_bits[1]);\n\t\t$timestamp -= $offset;\n\n\t\treturn gmdate('Y-m-d H:i:s', $timestamp);\n\n\t} elseif ($timezone == 'user') {\n\t\treturn preg_replace('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\\+|\\-][0-9]{2,4}){0,1}#', '$1-$2-$3 $4:$5:$6', $date_string);\n\t}\n}\n\n/**\n * Strips out all characters that are not allowable in an email.\n *\n * @since 1.5.0\n *\n * @param string $email Email address to filter.\n * @return string Filtered email address.\n */\nfunction sanitize_email( $email ) {\n\t// Test for the minimum length the email can be\n\tif ( strlen( $email ) < 6 ) {\n\t\t/**\n\t\t * Filters a sanitized email address.\n\t\t *\n\t\t * This filter is evaluated under several contexts, including 'email_too_short',\n\t\t * 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits',\n\t\t * 'domain_no_periods', 'domain_no_valid_subs', or no context.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $email   The sanitized email address.\n\t\t * @param string $email   The email address, as provided to sanitize_email().\n\t\t * @param string $message A message to pass to the user.\n\t\t */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'email_too_short' );\n\t}\n\n\t// Test for an @ character after the first position\n\tif ( strpos( $email, '@', 1 ) === false ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'email_no_at' );\n\t}\n\n\t// Split out the local and domain parts\n\tlist( $local, $domain ) = explode( '@', $email, 2 );\n\n\t// LOCAL PART\n\t// Test for invalid characters\n\t$local = preg_replace( '/[^a-zA-Z0-9!#$%&\\'*+\\/=?^_`{|}~\\.-]/', '', $local );\n\tif ( '' === $local ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'local_invalid_chars' );\n\t}\n\n\t// DOMAIN PART\n\t// Test for sequences of periods\n\t$domain = preg_replace( '/\\.{2,}/', '', $domain );\n\tif ( '' === $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_period_sequence' );\n\t}\n\n\t// Test for leading and trailing periods and whitespace\n\t$domain = trim( $domain, \" \\t\\n\\r\\0\\x0B.\" );\n\tif ( '' === $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_period_limits' );\n\t}\n\n\t// Split the domain into subs\n\t$subs = explode( '.', $domain );\n\n\t// Assume the domain will have at least two subs\n\tif ( 2 > count( $subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_no_periods' );\n\t}\n\n\t// Create an array that will contain valid subs\n\t$new_subs = array();\n\n\t// Loop through each sub\n\tforeach ( $subs as $sub ) {\n\t\t// Test for leading and trailing hyphens\n\t\t$sub = trim( $sub, \" \\t\\n\\r\\0\\x0B-\" );\n\n\t\t// Test for invalid characters\n\t\t$sub = preg_replace( '/[^a-z0-9-]+/i', '', $sub );\n\n\t\t// If there's anything left, add it to the valid subs\n\t\tif ( '' !== $sub ) {\n\t\t\t$new_subs[] = $sub;\n\t\t}\n\t}\n\n\t// If there aren't 2 or more valid subs\n\tif ( 2 > count( $new_subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_no_valid_subs' );\n\t}\n\n\t// Join valid subs into the new domain\n\t$domain = join( '.', $new_subs );\n\n\t// Put the email back together\n\t$email = $local . '@' . $domain;\n\n\t// Congratulations your email made it!\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters( 'sanitize_email', $email, $email, null );\n}\n\n/**\n * Determines the difference between two timestamps.\n *\n * The difference is returned in a human readable format such as \"1 hour\",\n * \"5 mins\", \"2 days\".\n *\n * @since 1.5.0\n *\n * @param int $from Unix timestamp from which the difference begins.\n * @param int $to   Optional. Unix timestamp to end the time difference. Default becomes time() if not set.\n * @return string Human readable time difference.\n */\nfunction human_time_diff( $from, $to = '' ) {\n\tif ( empty( $to ) ) {\n\t\t$to = time();\n\t}\n\n\t$diff = (int) abs( $to - $from );\n\n\tif ( $diff < HOUR_IN_SECONDS ) {\n\t\t$mins = round( $diff / MINUTE_IN_SECONDS );\n\t\tif ( $mins <= 1 )\n\t\t\t$mins = 1;\n\t\t/* translators: Time difference between two dates, in minutes (min=minute). 1: Number of minutes */\n\t\t$since = sprintf( _n( '%s min', '%s mins', $mins ), $mins );\n\t} elseif ( $diff < DAY_IN_SECONDS && $diff >= HOUR_IN_SECONDS ) {\n\t\t$hours = round( $diff / HOUR_IN_SECONDS );\n\t\tif ( $hours <= 1 )\n\t\t\t$hours = 1;\n\t\t/* translators: Time difference between two dates, in hours. 1: Number of hours */\n\t\t$since = sprintf( _n( '%s hour', '%s hours', $hours ), $hours );\n\t} elseif ( $diff < WEEK_IN_SECONDS && $diff >= DAY_IN_SECONDS ) {\n\t\t$days = round( $diff / DAY_IN_SECONDS );\n\t\tif ( $days <= 1 )\n\t\t\t$days = 1;\n\t\t/* translators: Time difference between two dates, in days. 1: Number of days */\n\t\t$since = sprintf( _n( '%s day', '%s days', $days ), $days );\n\t} elseif ( $diff < MONTH_IN_SECONDS && $diff >= WEEK_IN_SECONDS ) {\n\t\t$weeks = round( $diff / WEEK_IN_SECONDS );\n\t\tif ( $weeks <= 1 )\n\t\t\t$weeks = 1;\n\t\t/* translators: Time difference between two dates, in weeks. 1: Number of weeks */\n\t\t$since = sprintf( _n( '%s week', '%s weeks', $weeks ), $weeks );\n\t} elseif ( $diff < YEAR_IN_SECONDS && $diff >= MONTH_IN_SECONDS ) {\n\t\t$months = round( $diff / MONTH_IN_SECONDS );\n\t\tif ( $months <= 1 )\n\t\t\t$months = 1;\n\t\t/* translators: Time difference between two dates, in months. 1: Number of months */\n\t\t$since = sprintf( _n( '%s month', '%s months', $months ), $months );\n\t} elseif ( $diff >= YEAR_IN_SECONDS ) {\n\t\t$years = round( $diff / YEAR_IN_SECONDS );\n\t\tif ( $years <= 1 )\n\t\t\t$years = 1;\n\t\t/* translators: Time difference between two dates, in years. 1: Number of years */\n\t\t$since = sprintf( _n( '%s year', '%s years', $years ), $years );\n\t}\n\n\t/**\n\t * Filters the human readable difference between two timestamps.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param string $since The difference in human readable text.\n\t * @param int    $diff  The difference in seconds.\n\t * @param int    $from  Unix timestamp from which the difference begins.\n\t * @param int    $to    Unix timestamp to end the time difference.\n\t */\n\treturn apply_filters( 'human_time_diff', $since, $diff, $from, $to );\n}\n\n/**\n * Generates an excerpt from the content, if needed.\n *\n * The excerpt word amount will be 55 words and if the amount is greater than\n * that, then the string ' [&hellip;]' will be appended to the excerpt. If the string\n * is less than 55 words, then the content will be returned as is.\n *\n * The 55 word limit can be modified by plugins/themes using the {@see 'excerpt_length'} filter\n * The ' [&hellip;]' string can be modified by plugins/themes using the {@see 'excerpt_more'} filter\n *\n * @since 1.5.0\n *\n * @param string $text Optional. The excerpt. If set to empty, an excerpt is generated.\n * @return string The excerpt.\n */\nfunction wp_trim_excerpt( $text = '' ) {\n\t$raw_excerpt = $text;\n\tif ( '' == $text ) {\n\t\t$text = get_the_content('');\n\n\t\t$text = strip_shortcodes( $text );\n\n\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t$text = apply_filters( 'the_content', $text );\n\t\t$text = str_replace(']]>', ']]&gt;', $text);\n\n\t\t/**\n\t\t * Filters the number of words in an excerpt.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param int $number The number of words. Default 55.\n\t\t */\n\t\t$excerpt_length = apply_filters( 'excerpt_length', 55 );\n\t\t/**\n\t\t * Filters the string in the \"more\" link displayed after a trimmed excerpt.\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param string $more_string The string shown within the more link.\n\t\t */\n\t\t$excerpt_more = apply_filters( 'excerpt_more', ' ' . '[&hellip;]' );\n\t\t$text = wp_trim_words( $text, $excerpt_length, $excerpt_more );\n\t}\n\t/**\n\t * Filters the trimmed excerpt string.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $text        The trimmed text.\n\t * @param string $raw_excerpt The text prior to trimming.\n\t */\n\treturn apply_filters( 'wp_trim_excerpt', $text, $raw_excerpt );\n}\n\n/**\n * Trims text to a certain number of words.\n *\n * This function is localized. For languages that count 'words' by the individual\n * character (such as East Asian languages), the $num_words argument will apply\n * to the number of individual characters.\n *\n * @since 3.3.0\n *\n * @param string $text      Text to trim.\n * @param int    $num_words Number of words. Default 55.\n * @param string $more      Optional. What to append if $text needs to be trimmed. Default '&hellip;'.\n * @return string Trimmed text.\n */\nfunction wp_trim_words( $text, $num_words = 55, $more = null ) {\n\tif ( null === $more ) {\n\t\t$more = __( '&hellip;' );\n\t}\n\n\t$original_text = $text;\n\t$text = wp_strip_all_tags( $text );\n\n\t/*\n\t * translators: If your word count is based on single characters (e.g. East Asian characters),\n\t * enter 'characters_excluding_spaces' or 'characters_including_spaces'. Otherwise, enter 'words'.\n\t * Do not translate into your own language.\n\t */\n\tif ( strpos( _x( 'words', 'Word count type. Do not translate!' ), 'characters' ) === 0 && preg_match( '/^utf\\-?8$/i', get_option( 'blog_charset' ) ) ) {\n\t\t$text = trim( preg_replace( \"/[\\n\\r\\t ]+/\", ' ', $text ), ' ' );\n\t\tpreg_match_all( '/./u', $text, $words_array );\n\t\t$words_array = array_slice( $words_array[0], 0, $num_words + 1 );\n\t\t$sep = '';\n\t} else {\n\t\t$words_array = preg_split( \"/[\\n\\r\\t ]+/\", $text, $num_words + 1, PREG_SPLIT_NO_EMPTY );\n\t\t$sep = ' ';\n\t}\n\n\tif ( count( $words_array ) > $num_words ) {\n\t\tarray_pop( $words_array );\n\t\t$text = implode( $sep, $words_array );\n\t\t$text = $text . $more;\n\t} else {\n\t\t$text = implode( $sep, $words_array );\n\t}\n\n\t/**\n\t * Filters the text content after words have been trimmed.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $text          The trimmed text.\n\t * @param int    $num_words     The number of words to trim the text to. Default 55.\n\t * @param string $more          An optional string to append to the end of the trimmed text, e.g. &hellip;.\n\t * @param string $original_text The text before it was trimmed.\n\t */\n\treturn apply_filters( 'wp_trim_words', $text, $num_words, $more, $original_text );\n}\n\n/**\n * Converts named entities into numbered entities.\n *\n * @since 1.5.1\n *\n * @param string $text The text within which entities will be converted.\n * @return string Text with converted entities.\n */\nfunction ent2ncr( $text ) {\n\n\t/**\n\t * Filters text before named entities are converted into numbered entities.\n\t *\n\t * A non-null string must be returned for the filter to be evaluated.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param null   $converted_text The text to be converted. Default null.\n\t * @param string $text           The text prior to entity conversion.\n\t */\n\t$filtered = apply_filters( 'pre_ent2ncr', null, $text );\n\tif ( null !== $filtered )\n\t\treturn $filtered;\n\n\t$to_ncr = array(\n\t\t'&quot;' => '&#34;',\n\t\t'&amp;' => '&#38;',\n\t\t'&lt;' => '&#60;',\n\t\t'&gt;' => '&#62;',\n\t\t'|' => '&#124;',\n\t\t'&nbsp;' => '&#160;',\n\t\t'&iexcl;' => '&#161;',\n\t\t'&cent;' => '&#162;',\n\t\t'&pound;' => '&#163;',\n\t\t'&curren;' => '&#164;',\n\t\t'&yen;' => '&#165;',\n\t\t'&brvbar;' => '&#166;',\n\t\t'&brkbar;' => '&#166;',\n\t\t'&sect;' => '&#167;',\n\t\t'&uml;' => '&#168;',\n\t\t'&die;' => '&#168;',\n\t\t'&copy;' => '&#169;',\n\t\t'&ordf;' => '&#170;',\n\t\t'&laquo;' => '&#171;',\n\t\t'&not;' => '&#172;',\n\t\t'&shy;' => '&#173;',\n\t\t'&reg;' => '&#174;',\n\t\t'&macr;' => '&#175;',\n\t\t'&hibar;' => '&#175;',\n\t\t'&deg;' => '&#176;',\n\t\t'&plusmn;' => '&#177;',\n\t\t'&sup2;' => '&#178;',\n\t\t'&sup3;' => '&#179;',\n\t\t'&acute;' => '&#180;',\n\t\t'&micro;' => '&#181;',\n\t\t'&para;' => '&#182;',\n\t\t'&middot;' => '&#183;',\n\t\t'&cedil;' => '&#184;',\n\t\t'&sup1;' => '&#185;',\n\t\t'&ordm;' => '&#186;',\n\t\t'&raquo;' => '&#187;',\n\t\t'&frac14;' => '&#188;',\n\t\t'&frac12;' => '&#189;',\n\t\t'&frac34;' => '&#190;',\n\t\t'&iquest;' => '&#191;',\n\t\t'&Agrave;' => '&#192;',\n\t\t'&Aacute;' => '&#193;',\n\t\t'&Acirc;' => '&#194;',\n\t\t'&Atilde;' => '&#195;',\n\t\t'&Auml;' => '&#196;',\n\t\t'&Aring;' => '&#197;',\n\t\t'&AElig;' => '&#198;',\n\t\t'&Ccedil;' => '&#199;',\n\t\t'&Egrave;' => '&#200;',\n\t\t'&Eacute;' => '&#201;',\n\t\t'&Ecirc;' => '&#202;',\n\t\t'&Euml;' => '&#203;',\n\t\t'&Igrave;' => '&#204;',\n\t\t'&Iacute;' => '&#205;',\n\t\t'&Icirc;' => '&#206;',\n\t\t'&Iuml;' => '&#207;',\n\t\t'&ETH;' => '&#208;',\n\t\t'&Ntilde;' => '&#209;',\n\t\t'&Ograve;' => '&#210;',\n\t\t'&Oacute;' => '&#211;',\n\t\t'&Ocirc;' => '&#212;',\n\t\t'&Otilde;' => '&#213;',\n\t\t'&Ouml;' => '&#214;',\n\t\t'&times;' => '&#215;',\n\t\t'&Oslash;' => '&#216;',\n\t\t'&Ugrave;' => '&#217;',\n\t\t'&Uacute;' => '&#218;',\n\t\t'&Ucirc;' => '&#219;',\n\t\t'&Uuml;' => '&#220;',\n\t\t'&Yacute;' => '&#221;',\n\t\t'&THORN;' => '&#222;',\n\t\t'&szlig;' => '&#223;',\n\t\t'&agrave;' => '&#224;',\n\t\t'&aacute;' => '&#225;',\n\t\t'&acirc;' => '&#226;',\n\t\t'&atilde;' => '&#227;',\n\t\t'&auml;' => '&#228;',\n\t\t'&aring;' => '&#229;',\n\t\t'&aelig;' => '&#230;',\n\t\t'&ccedil;' => '&#231;',\n\t\t'&egrave;' => '&#232;',\n\t\t'&eacute;' => '&#233;',\n\t\t'&ecirc;' => '&#234;',\n\t\t'&euml;' => '&#235;',\n\t\t'&igrave;' => '&#236;',\n\t\t'&iacute;' => '&#237;',\n\t\t'&icirc;' => '&#238;',\n\t\t'&iuml;' => '&#239;',\n\t\t'&eth;' => '&#240;',\n\t\t'&ntilde;' => '&#241;',\n\t\t'&ograve;' => '&#242;',\n\t\t'&oacute;' => '&#243;',\n\t\t'&ocirc;' => '&#244;',\n\t\t'&otilde;' => '&#245;',\n\t\t'&ouml;' => '&#246;',\n\t\t'&divide;' => '&#247;',\n\t\t'&oslash;' => '&#248;',\n\t\t'&ugrave;' => '&#249;',\n\t\t'&uacute;' => '&#250;',\n\t\t'&ucirc;' => '&#251;',\n\t\t'&uuml;' => '&#252;',\n\t\t'&yacute;' => '&#253;',\n\t\t'&thorn;' => '&#254;',\n\t\t'&yuml;' => '&#255;',\n\t\t'&OElig;' => '&#338;',\n\t\t'&oelig;' => '&#339;',\n\t\t'&Scaron;' => '&#352;',\n\t\t'&scaron;' => '&#353;',\n\t\t'&Yuml;' => '&#376;',\n\t\t'&fnof;' => '&#402;',\n\t\t'&circ;' => '&#710;',\n\t\t'&tilde;' => '&#732;',\n\t\t'&Alpha;' => '&#913;',\n\t\t'&Beta;' => '&#914;',\n\t\t'&Gamma;' => '&#915;',\n\t\t'&Delta;' => '&#916;',\n\t\t'&Epsilon;' => '&#917;',\n\t\t'&Zeta;' => '&#918;',\n\t\t'&Eta;' => '&#919;',\n\t\t'&Theta;' => '&#920;',\n\t\t'&Iota;' => '&#921;',\n\t\t'&Kappa;' => '&#922;',\n\t\t'&Lambda;' => '&#923;',\n\t\t'&Mu;' => '&#924;',\n\t\t'&Nu;' => '&#925;',\n\t\t'&Xi;' => '&#926;',\n\t\t'&Omicron;' => '&#927;',\n\t\t'&Pi;' => '&#928;',\n\t\t'&Rho;' => '&#929;',\n\t\t'&Sigma;' => '&#931;',\n\t\t'&Tau;' => '&#932;',\n\t\t'&Upsilon;' => '&#933;',\n\t\t'&Phi;' => '&#934;',\n\t\t'&Chi;' => '&#935;',\n\t\t'&Psi;' => '&#936;',\n\t\t'&Omega;' => '&#937;',\n\t\t'&alpha;' => '&#945;',\n\t\t'&beta;' => '&#946;',\n\t\t'&gamma;' => '&#947;',\n\t\t'&delta;' => '&#948;',\n\t\t'&epsilon;' => '&#949;',\n\t\t'&zeta;' => '&#950;',\n\t\t'&eta;' => '&#951;',\n\t\t'&theta;' => '&#952;',\n\t\t'&iota;' => '&#953;',\n\t\t'&kappa;' => '&#954;',\n\t\t'&lambda;' => '&#955;',\n\t\t'&mu;' => '&#956;',\n\t\t'&nu;' => '&#957;',\n\t\t'&xi;' => '&#958;',\n\t\t'&omicron;' => '&#959;',\n\t\t'&pi;' => '&#960;',\n\t\t'&rho;' => '&#961;',\n\t\t'&sigmaf;' => '&#962;',\n\t\t'&sigma;' => '&#963;',\n\t\t'&tau;' => '&#964;',\n\t\t'&upsilon;' => '&#965;',\n\t\t'&phi;' => '&#966;',\n\t\t'&chi;' => '&#967;',\n\t\t'&psi;' => '&#968;',\n\t\t'&omega;' => '&#969;',\n\t\t'&thetasym;' => '&#977;',\n\t\t'&upsih;' => '&#978;',\n\t\t'&piv;' => '&#982;',\n\t\t'&ensp;' => '&#8194;',\n\t\t'&emsp;' => '&#8195;',\n\t\t'&thinsp;' => '&#8201;',\n\t\t'&zwnj;' => '&#8204;',\n\t\t'&zwj;' => '&#8205;',\n\t\t'&lrm;' => '&#8206;',\n\t\t'&rlm;' => '&#8207;',\n\t\t'&ndash;' => '&#8211;',\n\t\t'&mdash;' => '&#8212;',\n\t\t'&lsquo;' => '&#8216;',\n\t\t'&rsquo;' => '&#8217;',\n\t\t'&sbquo;' => '&#8218;',\n\t\t'&ldquo;' => '&#8220;',\n\t\t'&rdquo;' => '&#8221;',\n\t\t'&bdquo;' => '&#8222;',\n\t\t'&dagger;' => '&#8224;',\n\t\t'&Dagger;' => '&#8225;',\n\t\t'&bull;' => '&#8226;',\n\t\t'&hellip;' => '&#8230;',\n\t\t'&permil;' => '&#8240;',\n\t\t'&prime;' => '&#8242;',\n\t\t'&Prime;' => '&#8243;',\n\t\t'&lsaquo;' => '&#8249;',\n\t\t'&rsaquo;' => '&#8250;',\n\t\t'&oline;' => '&#8254;',\n\t\t'&frasl;' => '&#8260;',\n\t\t'&euro;' => '&#8364;',\n\t\t'&image;' => '&#8465;',\n\t\t'&weierp;' => '&#8472;',\n\t\t'&real;' => '&#8476;',\n\t\t'&trade;' => '&#8482;',\n\t\t'&alefsym;' => '&#8501;',\n\t\t'&crarr;' => '&#8629;',\n\t\t'&lArr;' => '&#8656;',\n\t\t'&uArr;' => '&#8657;',\n\t\t'&rArr;' => '&#8658;',\n\t\t'&dArr;' => '&#8659;',\n\t\t'&hArr;' => '&#8660;',\n\t\t'&forall;' => '&#8704;',\n\t\t'&part;' => '&#8706;',\n\t\t'&exist;' => '&#8707;',\n\t\t'&empty;' => '&#8709;',\n\t\t'&nabla;' => '&#8711;',\n\t\t'&isin;' => '&#8712;',\n\t\t'&notin;' => '&#8713;',\n\t\t'&ni;' => '&#8715;',\n\t\t'&prod;' => '&#8719;',\n\t\t'&sum;' => '&#8721;',\n\t\t'&minus;' => '&#8722;',\n\t\t'&lowast;' => '&#8727;',\n\t\t'&radic;' => '&#8730;',\n\t\t'&prop;' => '&#8733;',\n\t\t'&infin;' => '&#8734;',\n\t\t'&ang;' => '&#8736;',\n\t\t'&and;' => '&#8743;',\n\t\t'&or;' => '&#8744;',\n\t\t'&cap;' => '&#8745;',\n\t\t'&cup;' => '&#8746;',\n\t\t'&int;' => '&#8747;',\n\t\t'&there4;' => '&#8756;',\n\t\t'&sim;' => '&#8764;',\n\t\t'&cong;' => '&#8773;',\n\t\t'&asymp;' => '&#8776;',\n\t\t'&ne;' => '&#8800;',\n\t\t'&equiv;' => '&#8801;',\n\t\t'&le;' => '&#8804;',\n\t\t'&ge;' => '&#8805;',\n\t\t'&sub;' => '&#8834;',\n\t\t'&sup;' => '&#8835;',\n\t\t'&nsub;' => '&#8836;',\n\t\t'&sube;' => '&#8838;',\n\t\t'&supe;' => '&#8839;',\n\t\t'&oplus;' => '&#8853;',\n\t\t'&otimes;' => '&#8855;',\n\t\t'&perp;' => '&#8869;',\n\t\t'&sdot;' => '&#8901;',\n\t\t'&lceil;' => '&#8968;',\n\t\t'&rceil;' => '&#8969;',\n\t\t'&lfloor;' => '&#8970;',\n\t\t'&rfloor;' => '&#8971;',\n\t\t'&lang;' => '&#9001;',\n\t\t'&rang;' => '&#9002;',\n\t\t'&larr;' => '&#8592;',\n\t\t'&uarr;' => '&#8593;',\n\t\t'&rarr;' => '&#8594;',\n\t\t'&darr;' => '&#8595;',\n\t\t'&harr;' => '&#8596;',\n\t\t'&loz;' => '&#9674;',\n\t\t'&spades;' => '&#9824;',\n\t\t'&clubs;' => '&#9827;',\n\t\t'&hearts;' => '&#9829;',\n\t\t'&diams;' => '&#9830;'\n\t);\n\n\treturn str_replace( array_keys($to_ncr), array_values($to_ncr), $text );\n}\n\n/**\n * Formats text for the editor.\n *\n * Generally the browsers treat everything inside a textarea as text, but\n * it is still a good idea to HTML entity encode `<`, `>` and `&` in the content.\n *\n * The filter {@see 'format_for_editor'} is applied here. If `$text` is empty the\n * filter will be applied to an empty string.\n *\n * @since 4.3.0\n *\n * @see _WP_Editors::editor()\n *\n * @param string $text           The text to be formatted.\n * @param string $default_editor The default editor for the current user.\n *                               It is usually either 'html' or 'tinymce'.\n * @return string The formatted text after filter is applied.\n */\nfunction format_for_editor( $text, $default_editor = null ) {\n\tif ( $text ) {\n\t\t$text = htmlspecialchars( $text, ENT_NOQUOTES, get_option( 'blog_charset' ) );\n\t}\n\n\t/**\n\t * Filters the text after it is formatted for the editor.\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param string $text           The formatted text.\n\t * @param string $default_editor The default editor for the current user.\n\t *                               It is usually either 'html' or 'tinymce'.\n\t */\n\treturn apply_filters( 'format_for_editor', $text, $default_editor );\n}\n\n/**\n * Perform a deep string replace operation to ensure the values in $search are no longer present\n *\n * Repeats the replacement operation until it no longer replaces anything so as to remove \"nested\" values\n * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that\n * str_replace would return\n *\n * @since 2.8.1\n * @access private\n *\n * @param string|array $search  The value being searched for, otherwise known as the needle.\n *                              An array may be used to designate multiple needles.\n * @param string       $subject The string being searched and replaced on, otherwise known as the haystack.\n * @return string The string with the replaced svalues.\n */\nfunction _deep_replace( $search, $subject ) {\n\t$subject = (string) $subject;\n\n\t$count = 1;\n\twhile ( $count ) {\n\t\t$subject = str_replace( $search, '', $subject, $count );\n\t}\n\n\treturn $subject;\n}\n\n/**\n * Escapes data for use in a MySQL query.\n *\n * Usually you should prepare queries using wpdb::prepare().\n * Sometimes, spot-escaping is required or useful. One example\n * is preparing an array for use in an IN clause.\n *\n * @since 2.8.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string|array $data Unescaped data\n * @return string|array Escaped data\n */\nfunction esc_sql( $data ) {\n\tglobal $wpdb;\n\treturn $wpdb->_escape( $data );\n}\n\n/**\n * Checks and cleans a URL.\n *\n * A number of characters are removed from the URL. If the URL is for displaying\n * (the default behaviour) ampersands are also replaced. The {@see 'clean_url'} filter\n * is applied to the returned cleaned URL.\n *\n * @since 2.8.0\n *\n * @param string $url       The URL to be cleaned.\n * @param array  $protocols Optional. An array of acceptable protocols.\n *\t\t                    Defaults to return value of wp_allowed_protocols()\n * @param string $_context  Private. Use esc_url_raw() for database usage.\n * @return string The cleaned $url after the {@see 'clean_url'} filter is applied.\n */\nfunction esc_url( $url, $protocols = null, $_context = 'display' ) {\n\t$original_url = $url;\n\n\tif ( '' == $url )\n\t\treturn $url;\n\n\t$url = str_replace( ' ', '%20', $url );\n\t$url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\\|*\\'()\\[\\]\\\\x80-\\\\xff]|i', '', $url);\n\n\tif ( '' === $url ) {\n\t\treturn $url;\n\t}\n\n\tif ( 0 !== stripos( $url, 'mailto:' ) ) {\n\t\t$strip = array('%0d', '%0a', '%0D', '%0A');\n\t\t$url = _deep_replace($strip, $url);\n\t}\n\n\t$url = str_replace(';//', '://', $url);\n\t/* If the URL doesn't appear to contain a scheme, we\n\t * presume it needs http:// prepended (unless a relative\n\t * link starting with /, # or ? or a php file).\n\t */\n\tif ( strpos($url, ':') === false && ! in_array( $url[0], array( '/', '#', '?' ) ) &&\n\t\t! preg_match('/^[a-z0-9-]+?\\.php/i', $url) )\n\t\t$url = 'http://' . $url;\n\n\t// Replace ampersands and single quotes only when displaying.\n\tif ( 'display' == $_context ) {\n\t\t$url = wp_kses_normalize_entities( $url );\n\t\t$url = str_replace( '&amp;', '&#038;', $url );\n\t\t$url = str_replace( \"'\", '&#039;', $url );\n\t}\n\n\tif ( ( false !== strpos( $url, '[' ) ) || ( false !== strpos( $url, ']' ) ) ) {\n\n\t\t$parsed = wp_parse_url( $url );\n\t\t$front  = '';\n\n\t\tif ( isset( $parsed['scheme'] ) ) {\n\t\t\t$front .= $parsed['scheme'] . '://';\n\t\t} elseif ( '/' === $url[0] ) {\n\t\t\t$front .= '//';\n\t\t}\n\n\t\tif ( isset( $parsed['user'] ) ) {\n\t\t\t$front .= $parsed['user'];\n\t\t}\n\n\t\tif ( isset( $parsed['pass'] ) ) {\n\t\t\t$front .= ':' . $parsed['pass'];\n\t\t}\n\n\t\tif ( isset( $parsed['user'] ) || isset( $parsed['pass'] ) ) {\n\t\t\t$front .= '@';\n\t\t}\n\n\t\tif ( isset( $parsed['host'] ) ) {\n\t\t\t$front .= $parsed['host'];\n\t\t}\n\n\t\tif ( isset( $parsed['port'] ) ) {\n\t\t\t$front .= ':' . $parsed['port'];\n\t\t}\n\n\t\t$end_dirty = str_replace( $front, '', $url );\n\t\t$end_clean = str_replace( array( '[', ']' ), array( '%5B', '%5D' ), $end_dirty );\n\t\t$url       = str_replace( $end_dirty, $end_clean, $url );\n\n\t}\n\n\tif ( '/' === $url[0] ) {\n\t\t$good_protocol_url = $url;\n\t} else {\n\t\tif ( ! is_array( $protocols ) )\n\t\t\t$protocols = wp_allowed_protocols();\n\t\t$good_protocol_url = wp_kses_bad_protocol( $url, $protocols );\n\t\tif ( strtolower( $good_protocol_url ) != strtolower( $url ) )\n\t\t\treturn '';\n\t}\n\n\t/**\n\t * Filters a string cleaned and escaped for output as a URL.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $good_protocol_url The cleaned URL to be returned.\n\t * @param string $original_url      The URL prior to cleaning.\n\t * @param string $_context          If 'display', replace ampersands and single quotes only.\n\t */\n\treturn apply_filters( 'clean_url', $good_protocol_url, $original_url, $_context );\n}\n\n/**\n * Performs esc_url() for database usage.\n *\n * @since 2.8.0\n *\n * @param string $url       The URL to be cleaned.\n * @param array  $protocols An array of acceptable protocols.\n * @return string The cleaned URL.\n */\nfunction esc_url_raw( $url, $protocols = null ) {\n\treturn esc_url( $url, $protocols, 'db' );\n}\n\n/**\n * Convert entities, while preserving already-encoded entities.\n *\n * @link https://secure.php.net/htmlentities Borrowed from the PHP Manual user notes.\n *\n * @since 1.2.2\n *\n * @param string $myHTML The text to be converted.\n * @return string Converted text.\n */\nfunction htmlentities2( $myHTML ) {\n\t$translation_table = get_html_translation_table( HTML_ENTITIES, ENT_QUOTES );\n\t$translation_table[chr(38)] = '&';\n\treturn preg_replace( \"/&(?![A-Za-z]{0,4}\\w{2,3};|#[0-9]{2,3};)/\", \"&amp;\", strtr($myHTML, $translation_table) );\n}\n\n/**\n * Escape single quotes, htmlspecialchar \" < > &, and fix line endings.\n *\n * Escapes text strings for echoing in JS. It is intended to be used for inline JS\n * (in a tag attribute, for example onclick=\"...\"). Note that the strings have to\n * be in single quotes. The {@see 'js_escape'} filter is also applied here.\n *\n * @since 2.8.0\n *\n * @param string $text The text to be escaped.\n * @return string Escaped text.\n */\nfunction esc_js( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_COMPAT );\n\t$safe_text = preg_replace( '/&#(x)?0*(?(1)27|39);?/i', \"'\", stripslashes( $safe_text ) );\n\t$safe_text = str_replace( \"\\r\", '', $safe_text );\n\t$safe_text = str_replace( \"\\n\", '\\\\n', addslashes( $safe_text ) );\n\t/**\n\t * Filters a string cleaned and escaped for output in JavaScript.\n\t *\n\t * Text passed to esc_js() is stripped of invalid or special characters,\n\t * and properly slashed for output.\n\t *\n\t * @since 2.0.6\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n \t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'js_escape', $safe_text, $text );\n}\n\n/**\n * Escaping for HTML blocks.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_html( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );\n\t/**\n\t * Filters a string cleaned and escaped for output in HTML.\n\t *\n\t * Text passed to esc_html() is stripped of invalid or special characters\n\t * before output.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n \t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'esc_html', $safe_text, $text );\n}\n\n/**\n * Escaping for HTML attributes.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_attr( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );\n\t/**\n\t * Filters a string cleaned and escaped for output in an HTML attribute.\n\t *\n\t * Text passed to esc_attr() is stripped of invalid or special characters\n\t * before output.\n\t *\n\t * @since 2.0.6\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n \t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'attribute_escape', $safe_text, $text );\n}\n\n/**\n * Escaping for textarea values.\n *\n * @since 3.1.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_textarea( $text ) {\n\t$safe_text = htmlspecialchars( $text, ENT_QUOTES, get_option( 'blog_charset' ) );\n\t/**\n\t * Filters a string cleaned and escaped for output in a textarea element.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n \t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'esc_textarea', $safe_text, $text );\n}\n\n/**\n * Escape an HTML tag name.\n *\n * @since 2.5.0\n *\n * @param string $tag_name\n * @return string\n */\nfunction tag_escape( $tag_name ) {\n\t$safe_tag = strtolower( preg_replace('/[^a-zA-Z0-9_:]/', '', $tag_name) );\n\t/**\n\t * Filters a string cleaned and escaped for output as an HTML tag.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $safe_tag The tag name after it has been escaped.\n \t * @param string $tag_name The text before it was escaped.\n\t */\n\treturn apply_filters( 'tag_escape', $safe_tag, $tag_name );\n}\n\n/**\n * Convert full URL paths to absolute paths.\n *\n * Removes the http or https protocols and the domain. Keeps the path '/' at the\n * beginning, so it isn't a true relative link, but from the web root base.\n *\n * @since 2.1.0\n * @since 4.1.0 Support was added for relative URLs.\n *\n * @param string $link Full URL path.\n * @return string Absolute path.\n */\nfunction wp_make_link_relative( $link ) {\n\treturn preg_replace( '|^(https?:)?//[^/]+(/?.*)|i', '$2', $link );\n}\n\n/**\n * Sanitises various option values based on the nature of the option.\n *\n * This is basically a switch statement which will pass $value through a number\n * of functions depending on the $option.\n *\n * @since 2.0.5\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $option The name of the option.\n * @param string $value  The unsanitised value.\n * @return string Sanitized value.\n */\nfunction sanitize_option( $option, $value ) {\n\tglobal $wpdb;\n\n\t$original_value = $value;\n\t$error = '';\n\n\tswitch ( $option ) {\n\t\tcase 'admin_email' :\n\t\tcase 'new_admin_email' :\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = sanitize_email( $value );\n\t\t\t\tif ( ! is_email( $value ) ) {\n\t\t\t\t\t$error = __( 'The email address entered did not appear to be a valid email address. Please enter a valid email address.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'thumbnail_size_w':\n\t\tcase 'thumbnail_size_h':\n\t\tcase 'medium_size_w':\n\t\tcase 'medium_size_h':\n\t\tcase 'medium_large_size_w':\n\t\tcase 'medium_large_size_h':\n\t\tcase 'large_size_w':\n\t\tcase 'large_size_h':\n\t\tcase 'mailserver_port':\n\t\tcase 'comment_max_links':\n\t\tcase 'page_on_front':\n\t\tcase 'page_for_posts':\n\t\tcase 'rss_excerpt_length':\n\t\tcase 'default_category':\n\t\tcase 'default_email_category':\n\t\tcase 'default_link_category':\n\t\tcase 'close_comments_days_old':\n\t\tcase 'comments_per_page':\n\t\tcase 'thread_comments_depth':\n\t\tcase 'users_can_register':\n\t\tcase 'start_of_week':\n\t\tcase 'site_icon':\n\t\t\t$value = absint( $value );\n\t\t\tbreak;\n\n\t\tcase 'posts_per_page':\n\t\tcase 'posts_per_rss':\n\t\t\t$value = (int) $value;\n\t\t\tif ( empty($value) )\n\t\t\t\t$value = 1;\n\t\t\tif ( $value < -1 )\n\t\t\t\t$value = abs($value);\n\t\t\tbreak;\n\n\t\tcase 'default_ping_status':\n\t\tcase 'default_comment_status':\n\t\t\t// Options that if not there have 0 value but need to be something like \"closed\"\n\t\t\tif ( $value == '0' || $value == '')\n\t\t\t\t$value = 'closed';\n\t\t\tbreak;\n\n\t\tcase 'blogdescription':\n\t\tcase 'blogname':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( $value !== $original_value ) {\n\t\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', wp_encode_emoji( $original_value ) );\n\t\t\t}\n\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = esc_html( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'blog_charset':\n\t\t\t$value = preg_replace('/[^a-zA-Z0-9_-]/', '', $value); // strips slashes\n\t\t\tbreak;\n\n\t\tcase 'blog_public':\n\t\t\t// This is the value if the settings checkbox is not checked on POST. Don't rely on this.\n\t\t\tif ( null === $value )\n\t\t\t\t$value = 1;\n\t\t\telse\n\t\t\t\t$value = intval( $value );\n\t\t\tbreak;\n\n\t\tcase 'date_format':\n\t\tcase 'time_format':\n\t\tcase 'mailserver_url':\n\t\tcase 'mailserver_login':\n\t\tcase 'mailserver_pass':\n\t\tcase 'upload_path':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = strip_tags( $value );\n\t\t\t\t$value = wp_kses_data( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'ping_sites':\n\t\t\t$value = explode( \"\\n\", $value );\n\t\t\t$value = array_filter( array_map( 'trim', $value ) );\n\t\t\t$value = array_filter( array_map( 'esc_url_raw', $value ) );\n\t\t\t$value = implode( \"\\n\", $value );\n\t\t\tbreak;\n\n\t\tcase 'gmt_offset':\n\t\t\t$value = preg_replace('/[^0-9:.-]/', '', $value); // strips slashes\n\t\t\tbreak;\n\n\t\tcase 'siteurl':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( preg_match( '#http(s?)://(.+)#i', $value ) ) {\n\t\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t} else {\n\t\t\t\t\t$error = __( 'The WordPress address you entered did not appear to be a valid URL. Please enter a valid URL.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'home':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( preg_match( '#http(s?)://(.+)#i', $value ) ) {\n\t\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t} else {\n\t\t\t\t\t$error = __( 'The Site address you entered did not appear to be a valid URL. Please enter a valid URL.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'WPLANG':\n\t\t\t$allowed = get_available_languages();\n\t\t\tif ( ! is_multisite() && defined( 'WPLANG' ) && '' !== WPLANG && 'en_US' !== WPLANG ) {\n\t\t\t\t$allowed[] = WPLANG;\n\t\t\t}\n\t\t\tif ( ! in_array( $value, $allowed ) && ! empty( $value ) ) {\n\t\t\t\t$value = get_option( $option );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'illegal_names':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( ! is_array( $value ) )\n\t\t\t\t\t$value = explode( ' ', $value );\n\n\t\t\t\t$value = array_values( array_filter( array_map( 'trim', $value ) ) );\n\n\t\t\t\tif ( ! $value )\n\t\t\t\t\t$value = '';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'limited_email_domains':\n\t\tcase 'banned_email_domains':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( ! is_array( $value ) )\n\t\t\t\t\t$value = explode( \"\\n\", $value );\n\n\t\t\t\t$domains = array_values( array_filter( array_map( 'trim', $value ) ) );\n\t\t\t\t$value = array();\n\n\t\t\t\tforeach ( $domains as $domain ) {\n\t\t\t\t\tif ( ! preg_match( '/(--|\\.\\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\\.])+$|', $domain ) ) {\n\t\t\t\t\t\t$value[] = $domain;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( ! $value )\n\t\t\t\t\t$value = '';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'timezone_string':\n\t\t\t$allowed_zones = timezone_identifiers_list();\n\t\t\tif ( ! in_array( $value, $allowed_zones ) && ! empty( $value ) ) {\n\t\t\t\t$error = __( 'The timezone you have entered is not valid. Please select a valid timezone.' );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'permalink_structure':\n\t\tcase 'category_base':\n\t\tcase 'tag_base':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t$value = str_replace( 'http://', '', $value );\n\t\t\t}\n\n\t\t\tif ( 'permalink_structure' === $option && '' !== $value && ! preg_match( '/%[^\\/%]+%/', $value ) ) {\n\t\t\t\t$error = sprintf(\n\t\t\t\t\t/* translators: %s: Codex URL */\n\t\t\t\t\t__( 'A structure tag is required when using custom permalinks. <a href=\"%s\">Learn more</a>' ),\n\t\t\t\t\t__( 'https://codex.wordpress.org/Using_Permalinks#Choosing_your_permalink_structure' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'default_role' :\n\t\t\tif ( ! get_role( $value ) && get_role( 'subscriber' ) )\n\t\t\t\t$value = 'subscriber';\n\t\t\tbreak;\n\n\t\tcase 'moderation_keys':\n\t\tcase 'blacklist_keys':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = explode( \"\\n\", $value );\n\t\t\t\t$value = array_filter( array_map( 'trim', $value ) );\n\t\t\t\t$value = array_unique( $value );\n\t\t\t\t$value = implode( \"\\n\", $value );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif ( ! empty( $error ) ) {\n\t\t$value = get_option( $option );\n\t\tif ( function_exists( 'add_settings_error' ) ) {\n\t\t\tadd_settings_error( $option, \"invalid_{$option}\", $error );\n\t\t}\n\t}\n\n\t/**\n\t * Filters an option value following sanitization.\n\t *\n\t * @since 2.3.0\n\t * @since 4.3.0 Added the `$original_value` parameter.\n\t *\n\t * @param string $value          The sanitized option value.\n\t * @param string $option         The option name.\n\t * @param string $original_value The original value passed to the function.\n\t */\n\treturn apply_filters( \"sanitize_option_{$option}\", $value, $option, $original_value );\n}\n\n/**\n * Maps a function to all non-iterable elements of an array or an object.\n *\n * This is similar to `array_walk_recursive()` but acts upon objects too.\n *\n * @since 4.4.0\n *\n * @param mixed    $value    The array, object, or scalar.\n * @param callable $callback The function to map onto $value.\n * @return mixed The value with the callback applied to all non-arrays and non-objects inside it.\n */\nfunction map_deep( $value, $callback ) {\n\tif ( is_array( $value ) ) {\n\t\tforeach ( $value as $index => $item ) {\n\t\t\t$value[ $index ] = map_deep( $item, $callback );\n\t\t}\n\t} elseif ( is_object( $value ) ) {\n\t\t$object_vars = get_object_vars( $value );\n\t\tforeach ( $object_vars as $property_name => $property_value ) {\n\t\t\t$value->$property_name = map_deep( $property_value, $callback );\n\t\t}\n\t} else {\n\t\t$value = call_user_func( $callback, $value );\n\t}\n\n\treturn $value;\n}\n\n/**\n * Parses a string into variables to be stored in an array.\n *\n * Uses {@link https://secure.php.net/parse_str parse_str()} and stripslashes if\n * {@link https://secure.php.net/magic_quotes magic_quotes_gpc} is on.\n *\n * @since 2.2.1\n *\n * @param string $string The string to be parsed.\n * @param array  $array  Variables will be stored in this array.\n */\nfunction wp_parse_str( $string, &$array ) {\n\tparse_str( $string, $array );\n\tif ( get_magic_quotes_gpc() )\n\t\t$array = stripslashes_deep( $array );\n\t/**\n\t * Filters the array of variables derived from a parsed string.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param array $array The array populated with variables.\n\t */\n\t$array = apply_filters( 'wp_parse_str', $array );\n}\n\n/**\n * Convert lone less than signs.\n *\n * KSES already converts lone greater than signs.\n *\n * @since 2.3.0\n *\n * @param string $text Text to be converted.\n * @return string Converted text.\n */\nfunction wp_pre_kses_less_than( $text ) {\n\treturn preg_replace_callback('%<[^>]*?((?=<)|>|$)%', 'wp_pre_kses_less_than_callback', $text);\n}\n\n/**\n * Callback function used by preg_replace.\n *\n * @since 2.3.0\n *\n * @param array $matches Populated by matches to preg_replace.\n * @return string The text returned after esc_html if needed.\n */\nfunction wp_pre_kses_less_than_callback( $matches ) {\n\tif ( false === strpos($matches[0], '>') )\n\t\treturn esc_html($matches[0]);\n\treturn $matches[0];\n}\n\n/**\n * WordPress implementation of PHP sprintf() with filters.\n *\n * @since 2.5.0\n * @link https://secure.php.net/sprintf\n *\n * @param string $pattern   The string which formatted args are inserted.\n * @param mixed  $args ,... Arguments to be formatted into the $pattern string.\n * @return string The formatted string.\n */\nfunction wp_sprintf( $pattern ) {\n\t$args = func_get_args();\n\t$len = strlen($pattern);\n\t$start = 0;\n\t$result = '';\n\t$arg_index = 0;\n\twhile ( $len > $start ) {\n\t\t// Last character: append and break\n\t\tif ( strlen($pattern) - 1 == $start ) {\n\t\t\t$result .= substr($pattern, -1);\n\t\t\tbreak;\n\t\t}\n\n\t\t// Literal %: append and continue\n\t\tif ( substr($pattern, $start, 2) == '%%' ) {\n\t\t\t$start += 2;\n\t\t\t$result .= '%';\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Get fragment before next %\n\t\t$end = strpos($pattern, '%', $start + 1);\n\t\tif ( false === $end )\n\t\t\t$end = $len;\n\t\t$fragment = substr($pattern, $start, $end - $start);\n\n\t\t// Fragment has a specifier\n\t\tif ( $pattern[$start] == '%' ) {\n\t\t\t// Find numbered arguments or take the next one in order\n\t\t\tif ( preg_match('/^%(\\d+)\\$/', $fragment, $matches) ) {\n\t\t\t\t$arg = isset($args[$matches[1]]) ? $args[$matches[1]] : '';\n\t\t\t\t$fragment = str_replace(\"%{$matches[1]}$\", '%', $fragment);\n\t\t\t} else {\n\t\t\t\t++$arg_index;\n\t\t\t\t$arg = isset($args[$arg_index]) ? $args[$arg_index] : '';\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Filters a fragment from the pattern passed to wp_sprintf().\n\t\t\t *\n\t\t\t * If the fragment is unchanged, then sprintf() will be run on the fragment.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $fragment A fragment from the pattern.\n\t\t\t * @param string $arg      The argument.\n\t\t\t */\n\t\t\t$_fragment = apply_filters( 'wp_sprintf', $fragment, $arg );\n\t\t\tif ( $_fragment != $fragment )\n\t\t\t\t$fragment = $_fragment;\n\t\t\telse\n\t\t\t\t$fragment = sprintf($fragment, strval($arg) );\n\t\t}\n\n\t\t// Append to result and move to next fragment\n\t\t$result .= $fragment;\n\t\t$start = $end;\n\t}\n\treturn $result;\n}\n\n/**\n * Localize list items before the rest of the content.\n *\n * The '%l' must be at the first characters can then contain the rest of the\n * content. The list items will have ', ', ', and', and ' and ' added depending\n * on the amount of list items in the $args parameter.\n *\n * @since 2.5.0\n *\n * @param string $pattern Content containing '%l' at the beginning.\n * @param array  $args    List items to prepend to the content and replace '%l'.\n * @return string Localized list items and rest of the content.\n */\nfunction wp_sprintf_l( $pattern, $args ) {\n\t// Not a match\n\tif ( substr($pattern, 0, 2) != '%l' )\n\t\treturn $pattern;\n\n\t// Nothing to work with\n\tif ( empty($args) )\n\t\treturn '';\n\n\t/**\n\t * Filters the translated delimiters used by wp_sprintf_l().\n\t * Placeholders (%s) are included to assist translators and then\n\t * removed before the array of strings reaches the filter.\n\t *\n\t * Please note: Ampersands and entities should be avoided here.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param array $delimiters An array of translated delimiters.\n\t */\n\t$l = apply_filters( 'wp_sprintf_l', array(\n\t\t/* translators: used to join items in a list with more than 2 items */\n\t\t'between'          => sprintf( __('%s, %s'), '', '' ),\n\t\t/* translators: used to join last two items in a list with more than 2 times */\n\t\t'between_last_two' => sprintf( __('%s, and %s'), '', '' ),\n\t\t/* translators: used to join items in a list with only 2 items */\n\t\t'between_only_two' => sprintf( __('%s and %s'), '', '' ),\n\t) );\n\n\t$args = (array) $args;\n\t$result = array_shift($args);\n\tif ( count($args) == 1 )\n\t\t$result .= $l['between_only_two'] . array_shift($args);\n\t// Loop when more than two args\n\t$i = count($args);\n\twhile ( $i ) {\n\t\t$arg = array_shift($args);\n\t\t$i--;\n\t\tif ( 0 == $i )\n\t\t\t$result .= $l['between_last_two'] . $arg;\n\t\telse\n\t\t\t$result .= $l['between'] . $arg;\n\t}\n\treturn $result . substr($pattern, 2);\n}\n\n/**\n * Safely extracts not more than the first $count characters from html string.\n *\n * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT*\n * be counted as one character. For example &amp; will be counted as 4, &lt; as\n * 3, etc.\n *\n * @since 2.5.0\n *\n * @param string $str   String to get the excerpt from.\n * @param int    $count Maximum number of characters to take.\n * @param string $more  Optional. What to append if $str needs to be trimmed. Defaults to empty string.\n * @return string The excerpt.\n */\nfunction wp_html_excerpt( $str, $count, $more = null ) {\n\tif ( null === $more )\n\t\t$more = '';\n\t$str = wp_strip_all_tags( $str, true );\n\t$excerpt = mb_substr( $str, 0, $count );\n\t// remove part of an entity at the end\n\t$excerpt = preg_replace( '/&[^;\\s]{0,6}$/', '', $excerpt );\n\tif ( $str != $excerpt )\n\t\t$excerpt = trim( $excerpt ) . $more;\n\treturn $excerpt;\n}\n\n/**\n * Add a Base url to relative links in passed content.\n *\n * By default it supports the 'src' and 'href' attributes. However this can be\n * changed via the 3rd param.\n *\n * @since 2.7.0\n *\n * @global string $_links_add_base\n *\n * @param string $content String to search for links in.\n * @param string $base    The base URL to prefix to links.\n * @param array  $attrs   The attributes which should be processed.\n * @return string The processed content.\n */\nfunction links_add_base_url( $content, $base, $attrs = array('src', 'href') ) {\n\tglobal $_links_add_base;\n\t$_links_add_base = $base;\n\t$attrs = implode('|', (array)$attrs);\n\treturn preg_replace_callback( \"!($attrs)=(['\\\"])(.+?)\\\\2!i\", '_links_add_base', $content );\n}\n\n/**\n * Callback to add a base url to relative links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @global string $_links_add_base\n *\n * @param string $m The matched link.\n * @return string The processed link.\n */\nfunction _links_add_base( $m ) {\n\tglobal $_links_add_base;\n\t//1 = attribute name  2 = quotation mark  3 = URL\n\treturn $m[1] . '=' . $m[2] .\n\t\t( preg_match( '#^(\\w{1,20}):#', $m[3], $protocol ) && in_array( $protocol[1], wp_allowed_protocols() ) ?\n\t\t\t$m[3] :\n\t\t\tWP_Http::make_absolute_url( $m[3], $_links_add_base )\n\t\t)\n\t\t. $m[2];\n}\n\n/**\n * Adds a Target attribute to all links in passed content.\n *\n * This function by default only applies to `<a>` tags, however this can be\n * modified by the 3rd param.\n *\n * *NOTE:* Any current target attributed will be stripped and replaced.\n *\n * @since 2.7.0\n *\n * @global string $_links_add_target\n *\n * @param string $content String to search for links in.\n * @param string $target  The Target to add to the links.\n * @param array  $tags    An array of tags to apply to.\n * @return string The processed content.\n */\nfunction links_add_target( $content, $target = '_blank', $tags = array('a') ) {\n\tglobal $_links_add_target;\n\t$_links_add_target = $target;\n\t$tags = implode('|', (array)$tags);\n\treturn preg_replace_callback( \"!<($tags)([^>]*)>!i\", '_links_add_target', $content );\n}\n\n/**\n * Callback to add a target attribute to all links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @global string $_links_add_target\n *\n * @param string $m The matched link.\n * @return string The processed link.\n */\nfunction _links_add_target( $m ) {\n\tglobal $_links_add_target;\n\t$tag = $m[1];\n\t$link = preg_replace('|( target=([\\'\"])(.*?)\\2)|i', '', $m[2]);\n\treturn '<' . $tag . $link . ' target=\"' . esc_attr( $_links_add_target ) . '\">';\n}\n\n/**\n * Normalize EOL characters and strip duplicate whitespace.\n *\n * @since 2.7.0\n *\n * @param string $str The string to normalize.\n * @return string The normalized string.\n */\nfunction normalize_whitespace( $str ) {\n\t$str  = trim( $str );\n\t$str  = str_replace( \"\\r\", \"\\n\", $str );\n\t$str  = preg_replace( array( '/\\n+/', '/[ \\t]+/' ), array( \"\\n\", ' ' ), $str );\n\treturn $str;\n}\n\n/**\n * Properly strip all HTML tags including script and style\n *\n * This differs from strip_tags() because it removes the contents of\n * the `<script>` and `<style>` tags. E.g. `strip_tags( '<script>something</script>' )`\n * will return 'something'. wp_strip_all_tags will return ''\n *\n * @since 2.9.0\n *\n * @param string $string        String containing HTML tags\n * @param bool   $remove_breaks Optional. Whether to remove left over line breaks and white space chars\n * @return string The processed string.\n */\nfunction wp_strip_all_tags($string, $remove_breaks = false) {\n\t$string = preg_replace( '@<(script|style)[^>]*?>.*?</\\\\1>@si', '', $string );\n\t$string = strip_tags($string);\n\n\tif ( $remove_breaks )\n\t\t$string = preg_replace('/[\\r\\n\\t ]+/', ' ', $string);\n\n\treturn trim( $string );\n}\n\n/**\n * Sanitizes a string from user input or from the database.\n *\n * - Checks for invalid UTF-8,\n * - Converts single `<` characters to entities\n * - Strips all tags\n * - Removes line breaks, tabs, and extra whitespace\n * - Strips octets\n *\n * @since 2.9.0\n *\n * @see sanitize_textarea_field()\n * @see wp_check_invalid_utf8()\n * @see wp_strip_all_tags()\n *\n * @param string $str String to sanitize.\n * @return string Sanitized string.\n */\nfunction sanitize_text_field( $str ) {\n\t$filtered = _sanitize_text_fields( $str, false );\n\n\t/**\n\t * Filters a sanitized text field string.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $filtered The sanitized string.\n\t * @param string $str      The string prior to being sanitized.\n\t */\n\treturn apply_filters( 'sanitize_text_field', $filtered, $str );\n}\n\n/**\n * Sanitizes a multiline string from user input or from the database.\n *\n * The function is like sanitize_text_field(), but preserves\n * new lines (\\n) and other whitespace, which are legitimate\n * input in textarea elements.\n *\n * @see sanitize_text_field()\n *\n * @since 4.7.0\n *\n * @param string $str String to sanitize.\n * @return string Sanitized string.\n */\nfunction sanitize_textarea_field( $str ) {\n\t$filtered = _sanitize_text_fields( $str, true );\n\n\t/**\n\t * Filters a sanitized textarea field string.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param string $filtered The sanitized string.\n\t * @param string $str      The string prior to being sanitized.\n\t */\n\treturn apply_filters( 'sanitize_textarea_field', $filtered, $str );\n}\n\n/**\n * Internal helper function to sanitize a string from user input or from the db\n *\n * @since 4.7.0\n * @access private\n *\n * @param string $str String to sanitize.\n * @param bool $keep_newlines optional Whether to keep newlines. Default: false.\n * @return string Sanitized string.\n */\nfunction _sanitize_text_fields( $str, $keep_newlines = false ) {\n\t$filtered = wp_check_invalid_utf8( $str );\n\n\tif ( strpos($filtered, '<') !== false ) {\n\t\t$filtered = wp_pre_kses_less_than( $filtered );\n\t\t// This will strip extra whitespace for us.\n\t\t$filtered = wp_strip_all_tags( $filtered, false );\n\n\t\t// Use html entities in a special case to make sure no later\n\t\t// newline stripping stage could lead to a functional tag\n\t\t$filtered = str_replace(\"<\\n\", \"&lt;\\n\", $filtered);\n\t}\n\n\tif ( ! $keep_newlines ) {\n\t\t$filtered = preg_replace( '/[\\r\\n\\t ]+/', ' ', $filtered );\n\t}\n\t$filtered = trim( $filtered );\n\n\t$found = false;\n\twhile ( preg_match('/%[a-f0-9]{2}/i', $filtered, $match) ) {\n\t\t$filtered = str_replace($match[0], '', $filtered);\n\t\t$found = true;\n\t}\n\n\tif ( $found ) {\n\t\t// Strip out the whitespace that may now exist after removing the octets.\n\t\t$filtered = trim( preg_replace('/ +/', ' ', $filtered) );\n\t}\n\n\treturn $filtered;\n}\n\n/**\n * i18n friendly version of basename()\n *\n * @since 3.1.0\n *\n * @param string $path   A path.\n * @param string $suffix If the filename ends in suffix this will also be cut off.\n * @return string\n */\nfunction wp_basename( $path, $suffix = '' ) {\n\treturn urldecode( basename( str_replace( array( '%2F', '%5C' ), '/', urlencode( $path ) ), $suffix ) );\n}\n\n/**\n * Forever eliminate \"Wordpress\" from the planet (or at least the little bit we can influence).\n *\n * Violating our coding standards for a good function name.\n *\n * @since 3.0.0\n *\n * @staticvar string|false $dblq\n *\n * @param string $text The text to be modified.\n * @return string The modified text.\n */\nfunction capital_P_dangit( $text ) {\n\t// Simple replacement for titles\n\t$current_filter = current_filter();\n\tif ( 'the_title' === $current_filter || 'wp_title' === $current_filter )\n\t\treturn str_replace( 'Wordpress', 'WordPress', $text );\n\t// Still here? Use the more judicious replacement\n\tstatic $dblq = false;\n\tif ( false === $dblq ) {\n\t\t$dblq = _x( '&#8220;', 'opening curly double quote' );\n\t}\n\treturn str_replace(\n\t\tarray( ' Wordpress', '&#8216;Wordpress', $dblq . 'Wordpress', '>Wordpress', '(Wordpress' ),\n\t\tarray( ' WordPress', '&#8216;WordPress', $dblq . 'WordPress', '>WordPress', '(WordPress' ),\n\t$text );\n}\n\n/**\n * Sanitize a mime type\n *\n * @since 3.1.3\n *\n * @param string $mime_type Mime type\n * @return string Sanitized mime type\n */\nfunction sanitize_mime_type( $mime_type ) {\n\t$sani_mime_type = preg_replace( '/[^-+*.a-zA-Z0-9\\/]/', '', $mime_type );\n\t/**\n\t * Filters a mime type following sanitization.\n\t *\n\t * @since 3.1.3\n\t *\n\t * @param string $sani_mime_type The sanitized mime type.\n\t * @param string $mime_type      The mime type prior to sanitization.\n\t */\n\treturn apply_filters( 'sanitize_mime_type', $sani_mime_type, $mime_type );\n}\n\n/**\n * Sanitize space or carriage return separated URLs that are used to send trackbacks.\n *\n * @since 3.4.0\n *\n * @param string $to_ping Space or carriage return separated URLs\n * @return string URLs starting with the http or https protocol, separated by a carriage return.\n */\nfunction sanitize_trackback_urls( $to_ping ) {\n\t$urls_to_ping = preg_split( '/[\\r\\n\\t ]/', trim( $to_ping ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach ( $urls_to_ping as $k => $url ) {\n\t\tif ( !preg_match( '#^https?://.#i', $url ) )\n\t\t\tunset( $urls_to_ping[$k] );\n\t}\n\t$urls_to_ping = array_map( 'esc_url_raw', $urls_to_ping );\n\t$urls_to_ping = implode( \"\\n\", $urls_to_ping );\n\t/**\n\t * Filters a list of trackback URLs following sanitization.\n\t *\n\t * The string returned here consists of a space or carriage return-delimited list\n\t * of trackback URLs.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $urls_to_ping Sanitized space or carriage return separated URLs.\n\t * @param string $to_ping      Space or carriage return separated URLs before sanitization.\n\t */\n\treturn apply_filters( 'sanitize_trackback_urls', $urls_to_ping, $to_ping );\n}\n\n/**\n * Add slashes to a string or array of strings.\n *\n * This should be used when preparing data for core API that expects slashed data.\n * This should not be used to escape data going directly into an SQL query.\n *\n * @since 3.6.0\n *\n * @param string|array $value String or array of strings to slash.\n * @return string|array Slashed $value\n */\nfunction wp_slash( $value ) {\n\tif ( is_array( $value ) ) {\n\t\tforeach ( $value as $k => $v ) {\n\t\t\tif ( is_array( $v ) ) {\n\t\t\t\t$value[$k] = wp_slash( $v );\n\t\t\t} else {\n\t\t\t\t$value[$k] = addslashes( $v );\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$value = addslashes( $value );\n\t}\n\n\treturn $value;\n}\n\n/**\n * Remove slashes from a string or array of strings.\n *\n * This should be used to remove slashes from data passed to core API that\n * expects data to be unslashed.\n *\n * @since 3.6.0\n *\n * @param string|array $value String or array of strings to unslash.\n * @return string|array Unslashed $value\n */\nfunction wp_unslash( $value ) {\n\treturn stripslashes_deep( $value );\n}\n\n/**\n * Extract and return the first URL from passed content.\n *\n * @since 3.6.0\n *\n * @param string $content A string which might contain a URL.\n * @return string|false The found URL.\n */\nfunction get_url_in_content( $content ) {\n\tif ( empty( $content ) ) {\n\t\treturn false;\n\t}\n\n\tif ( preg_match( '/<a\\s[^>]*?href=([\\'\"])(.+?)\\1/is', $content, $matches ) ) {\n\t\treturn esc_url_raw( $matches[2] );\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns the regexp for common whitespace characters.\n *\n * By default, spaces include new lines, tabs, nbsp entities, and the UTF-8 nbsp.\n * This is designed to replace the PCRE \\s sequence.  In ticket #22692, that\n * sequence was found to be unreliable due to random inclusion of the A0 byte.\n *\n * @since 4.0.0\n *\n * @staticvar string $spaces\n *\n * @return string The spaces regexp.\n */\nfunction wp_spaces_regexp() {\n\tstatic $spaces = '';\n\n\tif ( empty( $spaces ) ) {\n\t\t/**\n\t\t * Filters the regexp for common whitespace characters.\n\t\t *\n\t\t * This string is substituted for the \\s sequence as needed in regular\n\t\t * expressions. For websites not written in English, different characters\n\t\t * may represent whitespace. For websites not encoded in UTF-8, the 0xC2 0xA0\n\t\t * sequence may not be in use.\n\t\t *\n\t\t * @since 4.0.0\n\t\t *\n\t\t * @param string $spaces Regexp pattern for matching common whitespace characters.\n\t\t */\n\t\t$spaces = apply_filters( 'wp_spaces_regexp', '[\\r\\n\\t ]|\\xC2\\xA0|&nbsp;' );\n\t}\n\n\treturn $spaces;\n}\n\n/**\n * Print the important emoji-related styles.\n *\n * @since 4.2.0\n *\n * @staticvar bool $printed\n */\nfunction print_emoji_styles() {\n\tstatic $printed = false;\n\n\tif ( $printed ) {\n\t\treturn;\n\t}\n\n\t$printed = true;\n?>\n<style type=\"text/css\">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<?php\n}\n\n/**\n * Print the inline Emoji detection script if it is not already printed.\n *\n * @since 4.2.0\n * @staticvar bool $printed\n */\nfunction print_emoji_detection_script() {\n\tstatic $printed = false;\n\n\tif ( $printed ) {\n\t\treturn;\n\t}\n\n\t$printed = true;\n\n\t_print_emoji_detection_script();\n}\n\n/**\n * Prints inline Emoji dection script\n *\n * @ignore\n * @since 4.6.0\n * @access private\n */\nfunction _print_emoji_detection_script() {\n\t$settings = array(\n\t\t/**\n\t\t * Filters the URL where emoji png images are hosted.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string The emoji base URL for png images.\n\t\t */\n\t\t'baseUrl' => apply_filters( 'emoji_url', 'https://s.w.org/images/core/emoji/2.3/72x72/' ),\n\n\t\t/**\n\t\t * Filters the extension of the emoji png files.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string The emoji extension for png files. Default .png.\n\t\t */\n\t\t'ext' => apply_filters( 'emoji_ext', '.png' ),\n\n\t\t/**\n\t\t * Filters the URL where emoji SVG images are hosted.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param string The emoji base URL for svg images.\n\t\t */\n\t\t'svgUrl' => apply_filters( 'emoji_svg_url', 'https://s.w.org/images/core/emoji/2.3/svg/' ),\n\n\t\t/**\n\t\t * Filters the extension of the emoji SVG files.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param string The emoji extension for svg files. Default .svg.\n\t\t */\n\t\t'svgExt' => apply_filters( 'emoji_svg_ext', '.svg' ),\n\t);\n\n\t$version = 'ver=' . get_bloginfo( 'version' );\n\n\tif ( SCRIPT_DEBUG ) {\n\t\t$settings['source'] = array(\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'wpemoji' => apply_filters( 'script_loader_src', includes_url( \"js/wp-emoji.js?$version\" ), 'wpemoji' ),\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'twemoji' => apply_filters( 'script_loader_src', includes_url( \"js/twemoji.js?$version\" ), 'twemoji' ),\n\t\t);\n\n\t\t?>\n\t\t<script type=\"text/javascript\">\n\t\t\twindow._wpemojiSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\t<?php readfile( ABSPATH . WPINC . \"/js/wp-emoji-loader.js\" ); ?>\n\t\t</script>\n\t\t<?php\n\t} else {\n\t\t$settings['source'] = array(\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'concatemoji' => apply_filters( 'script_loader_src', includes_url( \"js/wp-emoji-release.min.js?$version\" ), 'concatemoji' ),\n\t\t);\n\n\t\t/*\n\t\t * If you're looking at a src version of this file, you'll see an \"include\"\n\t\t * statement below. This is used by the `grunt build` process to directly\n\t\t * include a minified version of wp-emoji-loader.js, instead of using the\n\t\t * readfile() method from above.\n\t\t *\n\t\t * If you're looking at a build version of this file, you'll see a string of\n\t\t * minified JavaScript. If you need to debug it, please turn on SCRIPT_DEBUG\n\t\t * and edit wp-emoji-loader.js directly.\n\t\t */\n\t\t?>\n\t\t<script type=\"text/javascript\">\n\t\t\twindow._wpemojiSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\t!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline=\"top\",l.font=\"600 32px Arial\",a){case\"flag\":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case\"emoji\":return b=d([55358,56794,8205,9794,65039],[55358,56794,8203,9794,65039]),!b}return!1}function f(a){var c=b.createElement(\"script\");c.src=a,c.defer=c.type=\"text/javascript\",b.getElementsByTagName(\"head\")[0].appendChild(c)}var g,h,i,j,k=b.createElement(\"canvas\"),l=k.getContext&&k.getContext(\"2d\");for(j=Array(\"flag\",\"emoji\"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],\"flag\"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener(\"DOMContentLoaded\",h,!1),a.addEventListener(\"load\",h,!1)):(a.attachEvent(\"onload\",h),b.attachEvent(\"onreadystatechange\",function(){\"complete\"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<?php\n\t}\n}\n\n/**\n * Convert emoji characters to their equivalent HTML entity.\n *\n * This allows us to store emoji in a DB using the utf8 character set.\n *\n * @since 4.2.0\n *\n * @param string $content The content to encode.\n * @return string The encoded content.\n */\nfunction wp_encode_emoji( $content ) {\n\t$emoji = _wp_emoji_list( 'partials' );\n\n\tforeach ( $emoji as $emojum ) {\n\t\tif ( version_compare( phpversion(), '5.4', '<' ) ) {\n\t\t\t$emoji_char = html_entity_decode( $emojum, ENT_COMPAT, 'UTF-8' );\n\t\t} else {\n\t\t\t$emoji_char = html_entity_decode( $emojum );\n\t\t}\n\t\tif ( false !== strpos( $content, $emoji_char ) ) {\n\t\t\t$content = preg_replace( \"/$emoji_char/\", $emojum, $content );\n\t\t}\n\t}\n\n\treturn $content;\n}\n\n/**\n * Convert emoji to a static img element.\n *\n * @since 4.2.0\n *\n * @param string $text The content to encode.\n * @return string The encoded content.\n */\nfunction wp_staticize_emoji( $text ) {\n\tif ( false === strpos( $text, '&#x' ) ) {\n\t\tif ( ( function_exists( 'mb_check_encoding' ) && mb_check_encoding( $text, 'ASCII' ) ) || ! preg_match( '/[^\\x00-\\x7F]/', $text ) ) {\n\t\t\t// The text doesn't contain anything that might be emoji, so we can return early.\n\t\t\treturn $text;\n\t\t} else {\n\t\t\t$encoded_text = wp_encode_emoji( $text );\n\t\t\tif ( $encoded_text === $text ) {\n\t\t\t\treturn $encoded_text;\n\t\t\t}\n\n\t\t\t$text = $encoded_text;\n\t\t}\n\t}\n\n\t$emoji = _wp_emoji_list( 'entities' );\n\n\t// Quickly narrow down the list of emoji that might be in the text and need replacing.\n\t$possible_emoji = array();\n\tforeach( $emoji as $emojum ) {\n\t\tif ( false !== strpos( $text, $emojum ) ) {\n\t\t\tif ( version_compare( phpversion(), '5.4', '<' ) ) {\n\t\t\t\t$possible_emoji[ $emojum ] = html_entity_decode( $emojum, ENT_COMPAT, 'UTF-8' );\n\t\t\t} else {\n\t\t\t\t$possible_emoji[ $emojum ] = html_entity_decode( $emojum );\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! $possible_emoji ) {\n\t\treturn $text;\n\t}\n\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$cdn_url = apply_filters( 'emoji_url', 'https://s.w.org/images/core/emoji/2.3/72x72/' );\n\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$ext = apply_filters( 'emoji_ext', '.png' );\n\n\t$output = '';\n\t/*\n\t * HTML loop taken from smiley function, which was taken from texturize function.\n\t * It'll never be consolidated.\n\t *\n\t * First, capture the tags as well as in between.\n\t */\n\t$textarr = preg_split( '/(<.*>)/U', $text, -1, PREG_SPLIT_DELIM_CAPTURE );\n\t$stop = count( $textarr );\n\n\t// Ignore processing of specific tags.\n\t$tags_to_ignore = 'code|pre|style|script|textarea';\n\t$ignore_block_element = '';\n\n\tfor ( $i = 0; $i < $stop; $i++ ) {\n\t\t$content = $textarr[$i];\n\n\t\t// If we're in an ignore block, wait until we find its closing tag.\n\t\tif ( '' == $ignore_block_element && preg_match( '/^<(' . $tags_to_ignore . ')>/', $content, $matches ) )  {\n\t\t\t$ignore_block_element = $matches[1];\n\t\t}\n\n\t\t// If it's not a tag and not in ignore block.\n\t\tif ( '' ==  $ignore_block_element && strlen( $content ) > 0 && '<' != $content[0] && false !== strpos( $content, '&#x' ) ) {\n\t\t\tforeach ( $possible_emoji as $emojum => $emoji_char ) {\n\t\t\t\tif ( false === strpos( $content, $emojum ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$file = str_replace( ';&#x', '-', $emojum );\n\t\t\t\t$file = str_replace( array( '&#x', ';'), '', $file );\n\n\t\t\t\t$entity = sprintf( '<img src=\"%s\" alt=\"%s\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />', $cdn_url . $file . $ext, $emoji_char );\n\n\t\t\t\t$content = str_replace( $emojum, $entity, $content );\n\t\t\t}\n\t\t}\n\n\t\t// Did we exit ignore block.\n\t\tif ( '' != $ignore_block_element && '</' . $ignore_block_element . '>' == $content )  {\n\t\t\t$ignore_block_element = '';\n\t\t}\n\n\t\t$output .= $content;\n\t}\n\n\t// Finally, remove any stray U+FE0F characters\n\t$output = str_replace( '&#xfe0f;', '', $output );\n\n\treturn $output;\n}\n\n/**\n * Convert emoji in emails into static images.\n *\n * @since 4.2.0\n *\n * @param array $mail The email data array.\n * @return array The email data array, with emoji in the message staticized.\n */\nfunction wp_staticize_emoji_for_email( $mail ) {\n\tif ( ! isset( $mail['message'] ) ) {\n\t\treturn $mail;\n\t}\n\n\t/*\n\t * We can only transform the emoji into images if it's a text/html email.\n\t * To do that, here's a cut down version of the same process that happens\n\t * in wp_mail() - get the Content-Type from the headers, if there is one,\n\t * then pass it through the wp_mail_content_type filter, in case a plugin\n\t * is handling changing the Content-Type.\n\t */\n\t$headers = array();\n\tif ( isset( $mail['headers'] ) ) {\n\t\tif ( is_array( $mail['headers'] ) ) {\n\t\t\t$headers = $mail['headers'];\n\t\t} else {\n\t\t\t$headers = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $mail['headers'] ) );\n\t\t}\n\t}\n\n\tforeach ( $headers as $header ) {\n\t\tif ( strpos($header, ':') === false ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Explode them out.\n\t\tlist( $name, $content ) = explode( ':', trim( $header ), 2 );\n\n\t\t// Cleanup crew.\n\t\t$name    = trim( $name    );\n\t\t$content = trim( $content );\n\n\t\tif ( 'content-type' === strtolower( $name ) ) {\n\t\t\tif ( strpos( $content, ';' ) !== false ) {\n\t\t\t\tlist( $type, $charset ) = explode( ';', $content );\n\t\t\t\t$content_type = trim( $type );\n\t\t\t} else {\n\t\t\t\t$content_type = trim( $content );\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Set Content-Type if we don't have a content-type from the input headers.\n\tif ( ! isset( $content_type ) ) {\n\t\t$content_type = 'text/plain';\n\t}\n\n\t/** This filter is documented in wp-includes/pluggable.php */\n\t$content_type = apply_filters( 'wp_mail_content_type', $content_type );\n\n\tif ( 'text/html' === $content_type ) {\n\t\t$mail['message'] = wp_staticize_emoji( $mail['message'] );\n\t}\n\n\treturn $mail;\n}\n\n/**\n * Returns a arrays of emoji data.\n *\n * These arrays automatically built from the regex in twemoji.js - if they need to be updated,\n * you should update the regex there, then run the `grunt precommit:emoji` job.\n *\n * @since 4.9.0\n * @access private\n *\n * @param string $type Optional. Which array type to return. Accepts 'partials' or 'entities', default 'entities'.\n * @return array An array to match all emoji that WordPress recognises.\n */\nfunction _wp_emoji_list( $type = 'entities' ) {\n\t// Do not remove the START/END comments - they're used to find where to insert the arrays.\n\n\t// START: emoji arrays\n\t$entities = array('&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f469;','&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f468;','&#x1f468;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f468;','&#x1f3f4;&#xe0067;&#xe0062;&#xe0073;&#xe0063;&#xe0074;&#xe007f;','&#x1f3f4;&#xe0067;&#xe0062;&#xe0077;&#xe006c;&#xe0073;&#xe007f;','&#x1f3f4;&#xe0067;&#xe0062;&#xe0065;&#xe006e;&#xe0067;&#xe007f;','&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f466;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f468;','&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f468;','&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f469;','&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f466;&#x200d;&#x1f466;','&#x1f937;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9dd;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9dd;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9dd;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9dd;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9dc;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9dc;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f468;&#x1f3fb;&#x200d;&#x2695;&#xfe0f;','&#x1f468;&#x1f3fb;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x1f3fb;&#x200d;&#x2708;&#xfe0f;','&#x1f9dc;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9dc;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9dc;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9db;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9db;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9db;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f468;&#x1f3fc;&#x200d;&#x2695;&#xfe0f;','&#x1f468;&#x1f3fc;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x1f3fc;&#x200d;&#x2708;&#xfe0f;','&#x1f9db;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9db;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f468;&#x1f3fd;&#x200d;&#x2695;&#xfe0f;','&#x1f468;&#x1f3fd;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x1f3fd;&#x200d;&#x2708;&#xfe0f;','&#x1f9d9;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9d9;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9d9;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9d9;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9d9;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9d9;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9d8;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f468;&#x1f3fe;&#x200d;&#x2695;&#xfe0f;','&#x1f468;&#x1f3fe;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x1f3fe;&#x200d;&#x2708;&#xfe0f;','&#x1f9d8;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9d8;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9d8;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9d8;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9d7;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9d7;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9d7;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9d7;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9d7;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9d7;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f468;&#x1f3ff;&#x200d;&#x2695;&#xfe0f;','&#x1f468;&#x1f3ff;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x1f3ff;&#x200d;&#x2708;&#xfe0f;','&#x1f9d7;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9d7;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9d7;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9d7;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9d6;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3c3;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3c3;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3c3;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3c3;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9d6;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9d6;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f93e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f93e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f93e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f93e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f93e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f93d;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f93d;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f93d;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f469;&#x1f3fb;&#x200d;&#x2695;&#xfe0f;','&#x1f469;&#x1f3fb;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x1f3fb;&#x200d;&#x2708;&#xfe0f;','&#x1f93d;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f93d;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f469;&#x1f3fc;&#x200d;&#x2695;&#xfe0f;','&#x1f469;&#x1f3fc;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x1f3fc;&#x200d;&#x2708;&#xfe0f;','&#x1f938;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f938;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f938;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f938;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f938;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f937;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f937;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f937;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f469;&#x1f3fd;&#x200d;&#x2695;&#xfe0f;','&#x1f469;&#x1f3fd;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x1f3fd;&#x200d;&#x2708;&#xfe0f;','&#x1f937;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f937;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f937;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f937;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f937;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f937;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f926;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f926;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f926;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f469;&#x1f3fe;&#x200d;&#x2695;&#xfe0f;','&#x1f469;&#x1f3fe;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x1f3fe;&#x200d;&#x2708;&#xfe0f;','&#x1f926;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f926;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6b6;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f6b6;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f6b6;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f6b6;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f469;&#x1f3ff;&#x200d;&#x2695;&#xfe0f;','&#x1f469;&#x1f3ff;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x1f3ff;&#x200d;&#x2708;&#xfe0f;','&#x1f6b6;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f46e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f46e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f46e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f46e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f3c3;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f575;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f575;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f575;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f575;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f575;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f647;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f647;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f647;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f647;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f647;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f64d;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f64b;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f64b;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f64b;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f64b;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f64b;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f64d;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f64d;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f64d;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f64d;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#xfe0f;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#xfe0f;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#xfe0f;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#xfe0f;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#xfe0f;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x26f9;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x26f9;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x26f9;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#xfe0f;&#x200d;&#x2640;&#xfe0f;','&#x26f9;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#xfe0f;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#xfe0f;&#x200d;&#x2640;&#xfe0f;','&#x1f468;&#x1f3fc;&#x200d;&#x1f33e;','&#x1f469;&#x1f3ff;&#x200d;&#x1f692;','&#x1f469;&#x1f3ff;&#x200d;&#x1f680;','&#x1f469;&#x1f3ff;&#x200d;&#x1f52c;','&#x1f469;&#x1f3ff;&#x200d;&#x1f527;','&#x1f469;&#x1f3ff;&#x200d;&#x1f4bc;','&#x1f469;&#x1f3ff;&#x200d;&#x1f4bb;','&#x1f469;&#x1f3ff;&#x200d;&#x1f3ed;','&#x1f469;&#x1f3ff;&#x200d;&#x1f3eb;','&#x1f469;&#x1f3ff;&#x200d;&#x1f3a8;','&#x1f469;&#x1f3ff;&#x200d;&#x1f3a4;','&#x1f469;&#x1f3ff;&#x200d;&#x1f393;','&#x1f469;&#x1f3ff;&#x200d;&#x1f373;','&#x1f469;&#x1f3ff;&#x200d;&#x1f33e;','&#x1f469;&#x1f3fe;&#x200d;&#x1f692;','&#x1f469;&#x1f3fe;&#x200d;&#x1f680;','&#x1f469;&#x1f3fe;&#x200d;&#x1f52c;','&#x1f469;&#x1f3fe;&#x200d;&#x1f527;','&#x1f469;&#x1f3fe;&#x200d;&#x1f4bc;','&#x1f469;&#x1f3fe;&#x200d;&#x1f4bb;','&#x1f469;&#x1f3fe;&#x200d;&#x1f3ed;','&#x1f469;&#x1f3fe;&#x200d;&#x1f3eb;','&#x1f469;&#x1f3fe;&#x200d;&#x1f3a8;','&#x1f469;&#x1f3fe;&#x200d;&#x1f3a4;','&#x1f469;&#x1f3fe;&#x200d;&#x1f393;','&#x1f469;&#x1f3fe;&#x200d;&#x1f373;','&#x1f469;&#x1f3fe;&#x200d;&#x1f33e;','&#x1f469;&#x1f3fd;&#x200d;&#x1f692;','&#x1f469;&#x1f3fd;&#x200d;&#x1f680;','&#x1f469;&#x1f3fd;&#x200d;&#x1f52c;','&#x1f469;&#x1f3fd;&#x200d;&#x1f527;','&#x1f469;&#x1f3fd;&#x200d;&#x1f4bc;','&#x1f469;&#x1f3fd;&#x200d;&#x1f4bb;','&#x1f469;&#x1f3fd;&#x200d;&#x1f3ed;','&#x1f469;&#x1f3fd;&#x200d;&#x1f3eb;','&#x1f469;&#x1f3fd;&#x200d;&#x1f3a8;','&#x1f469;&#x1f3fd;&#x200d;&#x1f3a4;','&#x1f469;&#x1f3fd;&#x200d;&#x1f393;','&#x1f469;&#x1f3fd;&#x200d;&#x1f373;','&#x1f469;&#x1f3fd;&#x200d;&#x1f33e;','&#x1f469;&#x1f3fc;&#x200d;&#x1f692;','&#x1f469;&#x1f3fc;&#x200d;&#x1f680;','&#x1f469;&#x1f3fc;&#x200d;&#x1f52c;','&#x1f469;&#x1f3fc;&#x200d;&#x1f527;','&#x1f469;&#x1f3fc;&#x200d;&#x1f4bc;','&#x1f469;&#x1f3fc;&#x200d;&#x1f4bb;','&#x1f469;&#x1f3fc;&#x200d;&#x1f3ed;','&#x1f469;&#x1f3fc;&#x200d;&#x1f3eb;','&#x1f469;&#x1f3fc;&#x200d;&#x1f3a8;','&#x1f469;&#x1f3fc;&#x200d;&#x1f3a4;','&#x1f469;&#x1f3fc;&#x200d;&#x1f393;','&#x1f469;&#x1f3fc;&#x200d;&#x1f373;','&#x1f469;&#x1f3fc;&#x200d;&#x1f33e;','&#x1f469;&#x1f3fb;&#x200d;&#x1f692;','&#x1f469;&#x1f3fb;&#x200d;&#x1f680;','&#x1f469;&#x1f3fb;&#x200d;&#x1f52c;','&#x1f469;&#x1f3fb;&#x200d;&#x1f527;','&#x1f469;&#x1f3fb;&#x200d;&#x1f4bc;','&#x1f469;&#x1f3fb;&#x200d;&#x1f4bb;','&#x1f469;&#x1f3fb;&#x200d;&#x1f3ed;','&#x1f469;&#x1f3fb;&#x200d;&#x1f3eb;','&#x1f469;&#x1f3fb;&#x200d;&#x1f3a8;','&#x1f469;&#x1f3fb;&#x200d;&#x1f3a4;','&#x1f469;&#x1f3fb;&#x200d;&#x1f393;','&#x1f468;&#x1f3fb;&#x200d;&#x1f692;','&#x1f469;&#x1f3fb;&#x200d;&#x1f33e;','&#x1f468;&#x1f3fb;&#x200d;&#x1f33e;','&#x1f468;&#x1f3fb;&#x200d;&#x1f373;','&#x1f468;&#x1f3fb;&#x200d;&#x1f393;','&#x1f468;&#x1f3fb;&#x200d;&#x1f3a4;','&#x1f468;&#x1f3fb;&#x200d;&#x1f3a8;','&#x1f468;&#x1f3fb;&#x200d;&#x1f3eb;','&#x1f468;&#x1f3fb;&#x200d;&#x1f3ed;','&#x1f468;&#x1f3fb;&#x200d;&#x1f4bb;','&#x1f468;&#x1f3fb;&#x200d;&#x1f4bc;','&#x1f468;&#x1f3fb;&#x200d;&#x1f527;','&#x1f468;&#x1f3fb;&#x200d;&#x1f52c;','&#x1f468;&#x1f3fb;&#x200d;&#x1f680;','&#x1f468;&#x1f3ff;&#x200d;&#x1f692;','&#x1f468;&#x1f3ff;&#x200d;&#x1f680;','&#x1f468;&#x1f3ff;&#x200d;&#x1f52c;','&#x1f468;&#x1f3ff;&#x200d;&#x1f527;','&#x1f468;&#x1f3ff;&#x200d;&#x1f4bc;','&#x1f468;&#x1f3ff;&#x200d;&#x1f4bb;','&#x1f468;&#x1f3ff;&#x200d;&#x1f3ed;','&#x1f468;&#x1f3ff;&#x200d;&#x1f3eb;','&#x1f468;&#x1f3ff;&#x200d;&#x1f3a8;','&#x1f468;&#x1f3ff;&#x200d;&#x1f3a4;','&#x1f468;&#x1f3ff;&#x200d;&#x1f393;','&#x1f468;&#x1f3ff;&#x200d;&#x1f373;','&#x1f468;&#x1f3ff;&#x200d;&#x1f33e;','&#x1f468;&#x1f3fe;&#x200d;&#x1f692;','&#x1f468;&#x1f3fe;&#x200d;&#x1f680;','&#x1f468;&#x1f3fe;&#x200d;&#x1f52c;','&#x1f468;&#x1f3fe;&#x200d;&#x1f527;','&#x1f468;&#x1f3fe;&#x200d;&#x1f4bc;','&#x1f468;&#x1f3fe;&#x200d;&#x1f4bb;','&#x1f468;&#x1f3fe;&#x200d;&#x1f3ed;','&#x1f468;&#x1f3fe;&#x200d;&#x1f3eb;','&#x1f468;&#x1f3fe;&#x200d;&#x1f3a8;','&#x1f468;&#x1f3fe;&#x200d;&#x1f3a4;','&#x1f468;&#x1f3fe;&#x200d;&#x1f393;','&#x1f468;&#x1f3fe;&#x200d;&#x1f373;','&#x1f468;&#x1f3fe;&#x200d;&#x1f33e;','&#x1f468;&#x1f3fd;&#x200d;&#x1f692;','&#x1f468;&#x1f3fd;&#x200d;&#x1f680;','&#x1f468;&#x1f3fd;&#x200d;&#x1f52c;','&#x1f468;&#x1f3fd;&#x200d;&#x1f527;','&#x1f468;&#x1f3fd;&#x200d;&#x1f4bc;','&#x1f468;&#x1f3fd;&#x200d;&#x1f4bb;','&#x1f468;&#x1f3fd;&#x200d;&#x1f3ed;','&#x1f468;&#x1f3fd;&#x200d;&#x1f3eb;','&#x1f468;&#x1f3fd;&#x200d;&#x1f3a8;','&#x1f468;&#x1f3fd;&#x200d;&#x1f3a4;','&#x1f468;&#x1f3fd;&#x200d;&#x1f393;','&#x1f468;&#x1f3fd;&#x200d;&#x1f373;','&#x1f468;&#x1f3fd;&#x200d;&#x1f33e;','&#x1f468;&#x1f3fc;&#x200d;&#x1f692;','&#x1f468;&#x1f3fc;&#x200d;&#x1f680;','&#x1f468;&#x1f3fc;&#x200d;&#x1f52c;','&#x1f468;&#x1f3fc;&#x200d;&#x1f527;','&#x1f468;&#x1f3fc;&#x200d;&#x1f4bc;','&#x1f468;&#x1f3fc;&#x200d;&#x1f4bb;','&#x1f468;&#x1f3fc;&#x200d;&#x1f3ed;','&#x1f468;&#x1f3fc;&#x200d;&#x1f3eb;','&#x1f468;&#x1f3fc;&#x200d;&#x1f3a8;','&#x1f468;&#x1f3fc;&#x200d;&#x1f3a4;','&#x1f468;&#x1f3fc;&#x200d;&#x1f393;','&#x1f468;&#x1f3fc;&#x200d;&#x1f373;','&#x1f469;&#x1f3fb;&#x200d;&#x1f373;','&#x1f3f3;&#xfe0f;&#x200d;&#x1f308;','&#x1f468;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x200d;&#x2695;&#xfe0f;','&#x1f9dd;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x200d;&#x2640;&#xfe0f;','&#x1f926;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x200d;&#x2640;&#xfe0f;','&#x1f9dc;&#x200d;&#x2642;&#xfe0f;','&#x1f9d6;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x200d;&#x2640;&#xfe0f;','&#x1f46f;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x200d;&#x2642;&#xfe0f;','&#x1f46f;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x200d;&#x2642;&#xfe0f;','&#x1f46e;&#x200d;&#x2640;&#xfe0f;','&#x1f469;&#x200d;&#x2708;&#xfe0f;','&#x1f9d7;&#x200d;&#x2640;&#xfe0f;','&#x1f9d7;&#x200d;&#x2642;&#xfe0f;','&#x1f937;&#x200d;&#x2640;&#xfe0f;','&#x1f937;&#x200d;&#x2642;&#xfe0f;','&#x1f469;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x200d;&#x2695;&#xfe0f;','&#x1f3c3;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x200d;&#x2642;&#xfe0f;','&#x1f9d8;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x200d;&#x2640;&#xfe0f;','&#x1f938;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x200d;&#x2640;&#xfe0f;','&#x1f3f4;&#x200d;&#x2620;&#xfe0f;','&#x1f9df;&#x200d;&#x2642;&#xfe0f;','&#x1f9df;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x200d;&#x2642;&#xfe0f;','&#x1f9de;&#x200d;&#x2642;&#xfe0f;','&#x1f9de;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x200d;&#x2642;&#xfe0f;','&#x1f93c;&#x200d;&#x2640;&#xfe0f;','&#x1f93c;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x200d;&#x2642;&#xfe0f;','&#x1f9db;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x200d;&#x2642;&#xfe0f;','&#x1f6b6;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x200d;&#x2642;&#xfe0f;','&#x1f468;&#x200d;&#x2708;&#xfe0f;','&#x1f93d;&#x200d;&#x2640;&#xfe0f;','&#x1f468;&#x200d;&#x1f33e;','&#x1f468;&#x200d;&#x1f393;','&#x1f468;&#x200d;&#x1f3a4;','&#x1f468;&#x200d;&#x1f3a8;','&#x1f468;&#x200d;&#x1f3eb;','&#x1f468;&#x200d;&#x1f3ed;','&#x1f468;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f4bb;','&#x1f468;&#x200d;&#x1f4bc;','&#x1f468;&#x200d;&#x1f527;','&#x1f468;&#x200d;&#x1f52c;','&#x1f468;&#x200d;&#x1f680;','&#x1f441;&#x200d;&#x1f5e8;','&#x1f468;&#x200d;&#x1f692;','&#x1f468;&#x200d;&#x1f373;','&#x1f469;&#x200d;&#x1f373;','&#x1f469;&#x200d;&#x1f393;','&#x1f469;&#x200d;&#x1f3a4;','&#x1f469;&#x200d;&#x1f3a8;','&#x1f469;&#x200d;&#x1f3eb;','&#x1f469;&#x200d;&#x1f3ed;','&#x1f469;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f467;','&#x1f469;&#x200d;&#x1f4bb;','&#x1f469;&#x200d;&#x1f4bc;','&#x1f469;&#x200d;&#x1f527;','&#x1f469;&#x200d;&#x1f52c;','&#x1f469;&#x200d;&#x1f680;','&#x1f469;&#x200d;&#x1f692;','&#x1f469;&#x200d;&#x1f33e;','&#x1f1e7;&#x1f1f2;','&#x1f1e7;&#x1f1f3;','&#x1f471;&#x1f3fe;','&#x1f3ca;&#x1f3fc;','&#x1f1e7;&#x1f1f4;','&#x1f471;&#x1f3ff;','&#x1f1e7;&#x1f1f6;','&#x1f3ca;&#x1f3fd;','&#x1f472;&#x1f3fb;','&#x1f472;&#x1f3fc;','&#x1f472;&#x1f3fd;','&#x1f472;&#x1f3fe;','&#x1f472;&#x1f3ff;','&#x1f1e7;&#x1f1f7;','&#x1f1e7;&#x1f1f8;','&#x1f473;&#x1f3fb;','&#x1f3ca;&#x1f3fe;','&#x1f1e7;&#x1f1f9;','&#x1f473;&#x1f3fc;','&#x1f1e7;&#x1f1fb;','&#x1f3ca;&#x1f3ff;','&#x1f473;&#x1f3fd;','&#x1f1e7;&#x1f1fc;','&#x1f1e7;&#x1f1fe;','&#x1f473;&#x1f3fe;','&#x1f1e7;&#x1f1ff;','&#x1f1e8;&#x1f1e6;','&#x1f473;&#x1f3ff;','&#x1f3cb;&#x1f3fb;','&#x1f1e8;&#x1f1e8;','&#x1f474;&#x1f3fb;','&#x1f474;&#x1f3fc;','&#x1f474;&#x1f3fd;','&#x1f474;&#x1f3fe;','&#x1f474;&#x1f3ff;','&#x1f475;&#x1f3fb;','&#x1f475;&#x1f3fc;','&#x1f475;&#x1f3fd;','&#x1f475;&#x1f3fe;','&#x1f475;&#x1f3ff;','&#x1f476;&#x1f3fb;','&#x1f476;&#x1f3fc;','&#x1f476;&#x1f3fd;','&#x1f476;&#x1f3fe;','&#x1f476;&#x1f3ff;','&#x1f1e8;&#x1f1e9;','&#x1f3cb;&#x1f3fc;','&#x1f477;&#x1f3fb;','&#x1f1e8;&#x1f1eb;','&#x1f1e8;&#x1f1ec;','&#x1f477;&#x1f3fc;','&#x1f3cb;&#x1f3fd;','&#x1f1e8;&#x1f1ed;','&#x1f477;&#x1f3fd;','&#x1f1e8;&#x1f1ee;','&#x1f3cb;&#x1f3fe;','&#x1f477;&#x1f3fe;','&#x1f1e8;&#x1f1f0;','&#x1f1e8;&#x1f1f1;','&#x1f477;&#x1f3ff;','&#x1f3cb;&#x1f3ff;','&#x1f1e8;&#x1f1f2;','&#x1f478;&#x1f3fb;','&#x1f478;&#x1f3fc;','&#x1f478;&#x1f3fd;','&#x1f478;&#x1f3fe;','&#x1f478;&#x1f3ff;','&#x1f47c;&#x1f3fb;','&#x1f47c;&#x1f3fc;','&#x1f47c;&#x1f3fd;','&#x1f47c;&#x1f3fe;','&#x1f47c;&#x1f3ff;','&#x1f1e8;&#x1f1f3;','&#x1f1e8;&#x1f1f4;','&#x1f481;&#x1f3fb;','&#x1f1e8;&#x1f1f5;','&#x1f3cc;&#x1f3fb;','&#x1f481;&#x1f3fc;','&#x1f1e8;&#x1f1f7;','&#x1f1e8;&#x1f1fa;','&#x1f481;&#x1f3fd;','&#x1f3cc;&#x1f3fc;','&#x1f1e8;&#x1f1fb;','&#x1f481;&#x1f3fe;','&#x1f1e8;&#x1f1fc;','&#x1f3cc;&#x1f3fd;','&#x1f481;&#x1f3ff;','&#x1f1e8;&#x1f1fd;','&#x1f1e8;&#x1f1fe;','&#x1f3cc;&#x1f3fe;','&#x1f1e8;&#x1f1ff;','&#x1f482;&#x1f3fb;','&#x1f1e9;&#x1f1ea;','&#x1f3cc;&#x1f3ff;','&#x1f482;&#x1f3fc;','&#x1f1e9;&#x1f1ec;','&#x1f1e9;&#x1f1ef;','&#x1f482;&#x1f3fd;','&#x1f1e9;&#x1f1f0;','&#x1f1e9;&#x1f1f2;','&#x1f482;&#x1f3fe;','&#x1f1e9;&#x1f1f4;','&#x1f1e9;&#x1f1ff;','&#x1f482;&#x1f3ff;','&#x1f1ea;&#x1f1e6;','&#x1f1ea;&#x1f1e8;','&#x1f483;&#x1f3fb;','&#x1f483;&#x1f3fc;','&#x1f483;&#x1f3fd;','&#x1f483;&#x1f3fe;','&#x1f483;&#x1f3ff;','&#x1f485;&#x1f3fb;','&#x1f485;&#x1f3fc;','&#x1f485;&#x1f3fd;','&#x1f485;&#x1f3fe;','&#x1f485;&#x1f3ff;','&#x1f442;&#x1f3fb;','&#x1f442;&#x1f3fc;','&#x1f486;&#x1f3fb;','&#x1f442;&#x1f3fd;','&#x1f442;&#x1f3fe;','&#x1f486;&#x1f3fc;','&#x1f442;&#x1f3ff;','&#x1f443;&#x1f3fb;','&#x1f486;&#x1f3fd;','&#x1f443;&#x1f3fc;','&#x1f443;&#x1f3fd;','&#x1f486;&#x1f3fe;','&#x1f443;&#x1f3fe;','&#x1f443;&#x1f3ff;','&#x1f486;&#x1f3ff;','&#x1f446;&#x1f3fb;','&#x1f446;&#x1f3fc;','&#x1f446;&#x1f3fd;','&#x1f446;&#x1f3fe;','&#x1f487;&#x1f3fb;','&#x1f446;&#x1f3ff;','&#x1f447;&#x1f3fb;','&#x1f487;&#x1f3fc;','&#x1f447;&#x1f3fc;','&#x1f447;&#x1f3fd;','&#x1f487;&#x1f3fd;','&#x1f447;&#x1f3fe;','&#x1f447;&#x1f3ff;','&#x1f487;&#x1f3fe;','&#x1f448;&#x1f3fb;','&#x1f448;&#x1f3fc;','&#x1f487;&#x1f3ff;','&#x1f448;&#x1f3fd;','&#x1f448;&#x1f3fe;','&#x1f4aa;&#x1f3fb;','&#x1f4aa;&#x1f3fc;','&#x1f4aa;&#x1f3fd;','&#x1f4aa;&#x1f3fe;','&#x1f4aa;&#x1f3ff;','&#x1f574;&#x1f3fb;','&#x1f574;&#x1f3fc;','&#x1f574;&#x1f3fd;','&#x1f574;&#x1f3fe;','&#x1f574;&#x1f3ff;','&#x1f448;&#x1f3ff;','&#x1f449;&#x1f3fb;','&#x1f575;&#x1f3fb;','&#x1f449;&#x1f3fc;','&#x1f449;&#x1f3fd;','&#x1f575;&#x1f3fc;','&#x1f449;&#x1f3fe;','&#x1f449;&#x1f3ff;','&#x1f575;&#x1f3fd;','&#x1f44a;&#x1f3fb;','&#x1f44a;&#x1f3fc;','&#x1f575;&#x1f3fe;','&#x1f44a;&#x1f3fd;','&#x1f44a;&#x1f3fe;','&#x1f575;&#x1f3ff;','&#x1f44a;&#x1f3ff;','&#x1f44b;&#x1f3fb;','&#x1f57a;&#x1f3fb;','&#x1f57a;&#x1f3fc;','&#x1f57a;&#x1f3fd;','&#x1f57a;&#x1f3fe;','&#x1f57a;&#x1f3ff;','&#x1f590;&#x1f3fb;','&#x1f590;&#x1f3fc;','&#x1f590;&#x1f3fd;','&#x1f590;&#x1f3fe;','&#x1f590;&#x1f3ff;','&#x1f595;&#x1f3fb;','&#x1f595;&#x1f3fc;','&#x1f595;&#x1f3fd;','&#x1f595;&#x1f3fe;','&#x1f595;&#x1f3ff;','&#x1f596;&#x1f3fb;','&#x1f596;&#x1f3fc;','&#x1f596;&#x1f3fd;','&#x1f596;&#x1f3fe;','&#x1f596;&#x1f3ff;','&#x1f44b;&#x1f3fc;','&#x1f44b;&#x1f3fd;','&#x1f645;&#x1f3fb;','&#x1f44b;&#x1f3fe;','&#x1f44b;&#x1f3ff;','&#x1f645;&#x1f3fc;','&#x1f44c;&#x1f3fb;','&#x1f44c;&#x1f3fc;','&#x1f645;&#x1f3fd;','&#x1f1e6;&#x1f1e8;','&#x1f44c;&#x1f3fe;','&#x1f645;&#x1f3fe;','&#x1f44c;&#x1f3ff;','&#x1f44d;&#x1f3fb;','&#x1f645;&#x1f3ff;','&#x1f44d;&#x1f3fc;','&#x1f44d;&#x1f3fd;','&#x1f44d;&#x1f3fe;','&#x1f44d;&#x1f3ff;','&#x1f646;&#x1f3fb;','&#x1f44e;&#x1f3fb;','&#x1f44e;&#x1f3fc;','&#x1f646;&#x1f3fc;','&#x1f44e;&#x1f3fd;','&#x1f44e;&#x1f3fe;','&#x1f646;&#x1f3fd;','&#x1f44e;&#x1f3ff;','&#x1f44f;&#x1f3fb;','&#x1f646;&#x1f3fe;','&#x1f44f;&#x1f3fc;','&#x1f44f;&#x1f3fd;','&#x1f646;&#x1f3ff;','&#x1f44f;&#x1f3fe;','&#x1f44f;&#x1f3ff;','&#x1f450;&#x1f3fb;','&#x1f450;&#x1f3fc;','&#x1f647;&#x1f3fb;','&#x1f450;&#x1f3fd;','&#x1f450;&#x1f3fe;','&#x1f647;&#x1f3fc;','&#x1f450;&#x1f3ff;','&#x1f466;&#x1f3fb;','&#x1f647;&#x1f3fd;','&#x1f466;&#x1f3fc;','&#x1f466;&#x1f3fd;','&#x1f647;&#x1f3fe;','&#x1f466;&#x1f3fe;','&#x1f466;&#x1f3ff;','&#x1f647;&#x1f3ff;','&#x1f467;&#x1f3fb;','&#x1f467;&#x1f3fc;','&#x1f467;&#x1f3fd;','&#x1f467;&#x1f3fe;','&#x1f64b;&#x1f3fb;','&#x1f467;&#x1f3ff;','&#x1f1ea;&#x1f1ea;','&#x1f64b;&#x1f3fc;','&#x1f1ea;&#x1f1ec;','&#x1f1ea;&#x1f1ed;','&#x1f64b;&#x1f3fd;','&#x1f1ea;&#x1f1f7;','&#x1f1ea;&#x1f1f8;','&#x1f64b;&#x1f3fe;','&#x1f1ea;&#x1f1f9;','&#x1f1ea;&#x1f1fa;','&#x1f64b;&#x1f3ff;','&#x1f1eb;&#x1f1ee;','&#x1f1eb;&#x1f1ef;','&#x1f64c;&#x1f3fb;','&#x1f64c;&#x1f3fc;','&#x1f64c;&#x1f3fd;','&#x1f64c;&#x1f3fe;','&#x1f64c;&#x1f3ff;','&#x1f1eb;&#x1f1f0;','&#x1f1eb;&#x1f1f2;','&#x1f64d;&#x1f3fb;','&#x1f1eb;&#x1f1f4;','&#x1f1eb;&#x1f1f7;','&#x1f64d;&#x1f3fc;','&#x1f1ec;&#x1f1e6;','&#x1f1ec;&#x1f1e7;','&#x1f64d;&#x1f3fd;','&#x1f1ec;&#x1f1e9;','&#x1f468;&#x1f3fb;','&#x1f64d;&#x1f3fe;','&#x1f1ec;&#x1f1ea;','&#x1f1ec;&#x1f1eb;','&#x1f64d;&#x1f3ff;','&#x1f1ec;&#x1f1ec;','&#x1f1ec;&#x1f1ed;','&#x1f1ec;&#x1f1ee;','&#x1f1ec;&#x1f1f1;','&#x1f64e;&#x1f3fb;','&#x1f1ec;&#x1f1f2;','&#x1f1ec;&#x1f1f3;','&#x1f64e;&#x1f3fc;','&#x1f1ec;&#x1f1f5;','&#x1f1ec;&#x1f1f6;','&#x1f64e;&#x1f3fd;','&#x1f1ec;&#x1f1f7;','&#x1f1ec;&#x1f1f8;','&#x1f64e;&#x1f3fe;','&#x1f1ec;&#x1f1f9;','&#x1f1ec;&#x1f1fa;','&#x1f64e;&#x1f3ff;','&#x1f1ec;&#x1f1fc;','&#x1f1ec;&#x1f1fe;','&#x1f64f;&#x1f3fb;','&#x1f64f;&#x1f3fc;','&#x1f64f;&#x1f3fd;','&#x1f64f;&#x1f3fe;','&#x1f64f;&#x1f3ff;','&#x1f468;&#x1f3fc;','&#x1f1ed;&#x1f1f0;','&#x1f6a3;&#x1f3fb;','&#x1f1ed;&#x1f1f2;','&#x1f1ed;&#x1f1f3;','&#x1f6a3;&#x1f3fc;','&#x1f1ed;&#x1f1f7;','&#x1f1ed;&#x1f1f9;','&#x1f6a3;&#x1f3fd;','&#x1f1ed;&#x1f1fa;','&#x1f1ee;&#x1f1e8;','&#x1f6a3;&#x1f3fe;','&#x1f1ee;&#x1f1e9;','&#x1f1ee;&#x1f1ea;','&#x1f6a3;&#x1f3ff;','&#x1f1ee;&#x1f1f1;','&#x1f1ee;&#x1f1f2;','&#x1f1ee;&#x1f1f3;','&#x1f1ee;&#x1f1f4;','&#x1f6b4;&#x1f3fb;','&#x1f1ee;&#x1f1f6;','&#x1f1ee;&#x1f1f7;','&#x1f6b4;&#x1f3fc;','&#x1f1ee;&#x1f1f8;','&#x1f468;&#x1f3fd;','&#x1f6b4;&#x1f3fd;','&#x1f1ee;&#x1f1f9;','&#x1f1ef;&#x1f1ea;','&#x1f6b4;&#x1f3fe;','&#x1f1ef;&#x1f1f2;','&#x1f1ef;&#x1f1f4;','&#x1f6b4;&#x1f3ff;','&#x1f1ef;&#x1f1f5;','&#x1f1f0;&#x1f1ea;','&#x1f1f0;&#x1f1ec;','&#x1f1f0;&#x1f1ed;','&#x1f6b5;&#x1f3fb;','&#x1f1f0;&#x1f1ee;','&#x1f1f0;&#x1f1f2;','&#x1f6b5;&#x1f3fc;','&#x1f1f0;&#x1f1f3;','&#x1f1f0;&#x1f1f5;','&#x1f6b5;&#x1f3fd;','&#x1f1f0;&#x1f1f7;','&#x1f1f0;&#x1f1fc;','&#x1f6b5;&#x1f3fe;','&#x1f1f0;&#x1f1fe;','&#x1f1f0;&#x1f1ff;','&#x1f6b5;&#x1f3ff;','&#x1f468;&#x1f3fe;','&#x1f1f1;&#x1f1e6;','&#x1f1f1;&#x1f1e7;','&#x1f1f1;&#x1f1e8;','&#x1f6b6;&#x1f3fb;','&#x1f1f1;&#x1f1ee;','&#x1f1f1;&#x1f1f0;','&#x1f6b6;&#x1f3fc;','&#x1f1f1;&#x1f1f7;','&#x1f1f1;&#x1f1f8;','&#x1f6b6;&#x1f3fd;','&#x1f1f1;&#x1f1f9;','&#x1f1f1;&#x1f1fa;','&#x1f6b6;&#x1f3fe;','&#x1f1f1;&#x1f1fb;','&#x1f1f1;&#x1f1fe;','&#x1f6b6;&#x1f3ff;','&#x1f1f2;&#x1f1e6;','&#x1f1f2;&#x1f1e8;','&#x1f6c0;&#x1f3fb;','&#x1f6c0;&#x1f3fc;','&#x1f6c0;&#x1f3fd;','&#x1f6c0;&#x1f3fe;','&#x1f6c0;&#x1f3ff;','&#x1f6cc;&#x1f3fb;','&#x1f6cc;&#x1f3fc;','&#x1f6cc;&#x1f3fd;','&#x1f6cc;&#x1f3fe;','&#x1f6cc;&#x1f3ff;','&#x1f918;&#x1f3fb;','&#x1f918;&#x1f3fc;','&#x1f918;&#x1f3fd;','&#x1f918;&#x1f3fe;','&#x1f918;&#x1f3ff;','&#x1f919;&#x1f3fb;','&#x1f919;&#x1f3fc;','&#x1f919;&#x1f3fd;','&#x1f919;&#x1f3fe;','&#x1f919;&#x1f3ff;','&#x1f91a;&#x1f3fb;','&#x1f91a;&#x1f3fc;','&#x1f91a;&#x1f3fd;','&#x1f91a;&#x1f3fe;','&#x1f91a;&#x1f3ff;','&#x1f91b;&#x1f3fb;','&#x1f91b;&#x1f3fc;','&#x1f91b;&#x1f3fd;','&#x1f91b;&#x1f3fe;','&#x1f91b;&#x1f3ff;','&#x1f91c;&#x1f3fb;','&#x1f91c;&#x1f3fc;','&#x1f91c;&#x1f3fd;','&#x1f91c;&#x1f3fe;','&#x1f91c;&#x1f3ff;','&#x1f91e;&#x1f3fb;','&#x1f91e;&#x1f3fc;','&#x1f91e;&#x1f3fd;','&#x1f91e;&#x1f3fe;','&#x1f91e;&#x1f3ff;','&#x1f91f;&#x1f3fb;','&#x1f91f;&#x1f3fc;','&#x1f91f;&#x1f3fd;','&#x1f91f;&#x1f3fe;','&#x1f91f;&#x1f3ff;','&#x1f1f2;&#x1f1e9;','&#x1f1f2;&#x1f1ea;','&#x1f926;&#x1f3fb;','&#x1f1f2;&#x1f1eb;','&#x1f468;&#x1f3ff;','&#x1f926;&#x1f3fc;','&#x1f1f2;&#x1f1ec;','&#x1f1f2;&#x1f1ed;','&#x1f926;&#x1f3fd;','&#x1f1f2;&#x1f1f0;','&#x1f1f2;&#x1f1f1;','&#x1f926;&#x1f3fe;','&#x1f1f2;&#x1f1f2;','&#x1f1f2;&#x1f1f3;','&#x1f926;&#x1f3ff;','&#x1f1f2;&#x1f1f4;','&#x1f1f2;&#x1f1f5;','&#x1f930;&#x1f3fb;','&#x1f930;&#x1f3fc;','&#x1f930;&#x1f3fd;','&#x1f930;&#x1f3fe;','&#x1f930;&#x1f3ff;','&#x1f931;&#x1f3fb;','&#x1f931;&#x1f3fc;','&#x1f931;&#x1f3fd;','&#x1f931;&#x1f3fe;','&#x1f931;&#x1f3ff;','&#x1f932;&#x1f3fb;','&#x1f932;&#x1f3fc;','&#x1f932;&#x1f3fd;','&#x1f932;&#x1f3fe;','&#x1f932;&#x1f3ff;','&#x1f933;&#x1f3fb;','&#x1f933;&#x1f3fc;','&#x1f933;&#x1f3fd;','&#x1f933;&#x1f3fe;','&#x1f933;&#x1f3ff;','&#x1f934;&#x1f3fb;','&#x1f934;&#x1f3fc;','&#x1f934;&#x1f3fd;','&#x1f934;&#x1f3fe;','&#x1f934;&#x1f3ff;','&#x1f935;&#x1f3fb;','&#x1f935;&#x1f3fc;','&#x1f935;&#x1f3fd;','&#x1f935;&#x1f3fe;','&#x1f935;&#x1f3ff;','&#x1f936;&#x1f3fb;','&#x1f936;&#x1f3fc;','&#x1f936;&#x1f3fd;','&#x1f936;&#x1f3fe;','&#x1f936;&#x1f3ff;','&#x1f1f2;&#x1f1f6;','&#x1f1f2;&#x1f1f7;','&#x1f937;&#x1f3fb;','&#x1f1f2;&#x1f1f8;','&#x1f1f2;&#x1f1f9;','&#x1f937;&#x1f3fc;','&#x1f1f2;&#x1f1fa;','&#x1f1f2;&#x1f1fb;','&#x1f937;&#x1f3fd;','&#x1f1f2;&#x1f1fc;','&#x1f1f2;&#x1f1fd;','&#x1f937;&#x1f3fe;','&#x1f1f2;&#x1f1fe;','&#x1f1f2;&#x1f1ff;','&#x1f937;&#x1f3ff;','&#x1f1f3;&#x1f1e6;','&#x1f1f3;&#x1f1e8;','&#x1f1f3;&#x1f1ea;','&#x1f1f3;&#x1f1eb;','&#x1f938;&#x1f3fb;','&#x1f1f3;&#x1f1ec;','&#x1f1f3;&#x1f1ee;','&#x1f938;&#x1f3fc;','&#x1f1f3;&#x1f1f1;','&#x1f1f3;&#x1f1f4;','&#x1f938;&#x1f3fd;','&#x1f1f3;&#x1f1f5;','&#x1f1f3;&#x1f1f7;','&#x1f938;&#x1f3fe;','&#x1f1f3;&#x1f1fa;','&#x1f1f3;&#x1f1ff;','&#x1f938;&#x1f3ff;','&#x1f1f4;&#x1f1f2;','&#x1f1f5;&#x1f1e6;','&#x1f1f5;&#x1f1ea;','&#x1f1f5;&#x1f1eb;','&#x1f939;&#x1f3fb;','&#x1f1f5;&#x1f1ec;','&#x1f1f5;&#x1f1ed;','&#x1f939;&#x1f3fc;','&#x1f1f5;&#x1f1f0;','&#x1f1f5;&#x1f1f1;','&#x1f939;&#x1f3fd;','&#x1f1f5;&#x1f1f2;','&#x1f1f5;&#x1f1f3;','&#x1f939;&#x1f3fe;','&#x1f1f5;&#x1f1f7;','&#x1f1f5;&#x1f1f8;','&#x1f939;&#x1f3ff;','&#x1f1f5;&#x1f1f9;','&#x1f1f5;&#x1f1fc;','&#x1f1f5;&#x1f1fe;','&#x1f1f6;&#x1f1e6;','&#x1f1f7;&#x1f1ea;','&#x1f1f7;&#x1f1f4;','&#x1f93d;&#x1f3fb;','&#x1f1f7;&#x1f1f8;','&#x1f469;&#x1f3fb;','&#x1f93d;&#x1f3fc;','&#x1f1f7;&#x1f1fa;','&#x1f1f7;&#x1f1fc;','&#x1f93d;&#x1f3fd;','&#x1f1f8;&#x1f1e6;','&#x1f1f8;&#x1f1e7;','&#x1f93d;&#x1f3fe;','&#x1f1f8;&#x1f1e8;','&#x1f1f8;&#x1f1e9;','&#x1f93d;&#x1f3ff;','&#x1f1f8;&#x1f1ea;','&#x1f1f8;&#x1f1ec;','&#x1f1e6;&#x1f1e9;','&#x1f1f8;&#x1f1ee;','&#x1f93e;&#x1f3fb;','&#x1f1f8;&#x1f1ef;','&#x1f1f8;&#x1f1f0;','&#x1f93e;&#x1f3fc;','&#x1f1f8;&#x1f1f1;','&#x1f1f8;&#x1f1f2;','&#x1f93e;&#x1f3fd;','&#x1f1f8;&#x1f1f3;','&#x1f1f8;&#x1f1f4;','&#x1f93e;&#x1f3fe;','&#x1f469;&#x1f3fc;','&#x1f1f8;&#x1f1f7;','&#x1f93e;&#x1f3ff;','&#x1f1f8;&#x1f1f8;','&#x1f1f8;&#x1f1f9;','&#x1f9d1;&#x1f3fb;','&#x1f9d1;&#x1f3fc;','&#x1f9d1;&#x1f3fd;','&#x1f9d1;&#x1f3fe;','&#x1f9d1;&#x1f3ff;','&#x1f9d2;&#x1f3fb;','&#x1f9d2;&#x1f3fc;','&#x1f9d2;&#x1f3fd;','&#x1f9d2;&#x1f3fe;','&#x1f9d2;&#x1f3ff;','&#x1f9d3;&#x1f3fb;','&#x1f9d3;&#x1f3fc;','&#x1f9d3;&#x1f3fd;','&#x1f9d3;&#x1f3fe;','&#x1f9d3;&#x1f3ff;','&#x1f9d4;&#x1f3fb;','&#x1f9d4;&#x1f3fc;','&#x1f9d4;&#x1f3fd;','&#x1f9d4;&#x1f3fe;','&#x1f9d4;&#x1f3ff;','&#x1f9d5;&#x1f3fb;','&#x1f9d5;&#x1f3fc;','&#x1f9d5;&#x1f3fd;','&#x1f9d5;&#x1f3fe;','&#x1f9d5;&#x1f3ff;','&#x1f1f8;&#x1f1fb;','&#x1f1f8;&#x1f1fd;','&#x1f9d6;&#x1f3fb;','&#x1f1f8;&#x1f1fe;','&#x1f1f8;&#x1f1ff;','&#x1f9d6;&#x1f3fc;','&#x1f1f9;&#x1f1e6;','&#x1f1f9;&#x1f1e8;','&#x1f9d6;&#x1f3fd;','&#x1f1f9;&#x1f1e9;','&#x1f1f9;&#x1f1eb;','&#x1f9d6;&#x1f3fe;','&#x1f1f9;&#x1f1ec;','&#x1f1f9;&#x1f1ed;','&#x1f9d6;&#x1f3ff;','&#x1f1f9;&#x1f1ef;','&#x1f1f9;&#x1f1f0;','&#x1f1f9;&#x1f1f1;','&#x1f469;&#x1f3fd;','&#x1f9d7;&#x1f3fb;','&#x1f1f9;&#x1f1f2;','&#x1f1f9;&#x1f1f3;','&#x1f9d7;&#x1f3fc;','&#x1f1f9;&#x1f1f4;','&#x1f1f9;&#x1f1f7;','&#x1f9d7;&#x1f3fd;','&#x1f1f9;&#x1f1f9;','&#x1f1f9;&#x1f1fb;','&#x1f9d7;&#x1f3fe;','&#x1f1f9;&#x1f1fc;','&#x1f1f9;&#x1f1ff;','&#x1f9d7;&#x1f3ff;','&#x1f1fa;&#x1f1e6;','&#x1f1fa;&#x1f1ec;','&#x1f1fa;&#x1f1f2;','&#x1f1fa;&#x1f1f3;','&#x1f9d8;&#x1f3fb;','&#x1f1fa;&#x1f1f8;','&#x1f1fa;&#x1f1fe;','&#x1f9d8;&#x1f3fc;','&#x1f1fa;&#x1f1ff;','&#x1f1fb;&#x1f1e6;','&#x1f9d8;&#x1f3fd;','&#x1f469;&#x1f3fe;','&#x1f1fb;&#x1f1e8;','&#x1f9d8;&#x1f3fe;','&#x1f1fb;&#x1f1ea;','&#x1f1fb;&#x1f1ec;','&#x1f9d8;&#x1f3ff;','&#x1f1fb;&#x1f1ee;','&#x1f1fb;&#x1f1f3;','&#x1f1fb;&#x1f1fa;','&#x1f1fc;&#x1f1eb;','&#x1f9d9;&#x1f3fb;','&#x1f1fc;&#x1f1f8;','&#x1f1fd;&#x1f1f0;','&#x1f9d9;&#x1f3fc;','&#x1f1fe;&#x1f1ea;','&#x1f1fe;&#x1f1f9;','&#x1f9d9;&#x1f3fd;','&#x1f1ff;&#x1f1e6;','&#x1f1ff;&#x1f1f2;','&#x1f9d9;&#x1f3fe;','&#x1f1ff;&#x1f1fc;','&#x1f385;&#x1f3fb;','&#x1f9d9;&#x1f3ff;','&#x1f385;&#x1f3fc;','&#x1f469;&#x1f3ff;','&#x1f385;&#x1f3fd;','&#x1f385;&#x1f3fe;','&#x1f9da;&#x1f3fb;','&#x1f385;&#x1f3ff;','&#x1f3c2;&#x1f3fb;','&#x1f9da;&#x1f3fc;','&#x1f3c2;&#x1f3fc;','&#x1f3c2;&#x1f3fd;','&#x1f9da;&#x1f3fd;','&#x1f3c2;&#x1f3fe;','&#x1f3c2;&#x1f3ff;','&#x1f9da;&#x1f3fe;','&#x1f44c;&#x1f3fd;','&#x1f1e6;&#x1f1ea;','&#x1f9da;&#x1f3ff;','&#x1f3c3;&#x1f3fb;','&#x1f1e6;&#x1f1eb;','&#x1f1e6;&#x1f1ec;','&#x1f3c3;&#x1f3fc;','&#x1f9db;&#x1f3fb;','&#x1f1e6;&#x1f1ee;','&#x1f1e6;&#x1f1f1;','&#x1f9db;&#x1f3fc;','&#x1f3c3;&#x1f3fd;','&#x1f1e6;&#x1f1f2;','&#x1f9db;&#x1f3fd;','&#x1f1e6;&#x1f1f4;','&#x1f3c3;&#x1f3fe;','&#x1f9db;&#x1f3fe;','&#x1f1e6;&#x1f1f6;','&#x1f1e6;&#x1f1f7;','&#x1f9db;&#x1f3ff;','&#x1f3c3;&#x1f3ff;','&#x1f1e6;&#x1f1f8;','&#x1f1e6;&#x1f1f9;','&#x1f1e6;&#x1f1fa;','&#x1f9dc;&#x1f3fb;','&#x1f1e6;&#x1f1fc;','&#x1f3c4;&#x1f3fb;','&#x1f9dc;&#x1f3fc;','&#x1f1e6;&#x1f1fd;','&#x1f1e6;&#x1f1ff;','&#x1f9dc;&#x1f3fd;','&#x1f3c4;&#x1f3fc;','&#x1f1e7;&#x1f1e6;','&#x1f9dc;&#x1f3fe;','&#x1f46e;&#x1f3fb;','&#x1f1e7;&#x1f1e7;','&#x1f9dc;&#x1f3ff;','&#x1f3c4;&#x1f3fd;','&#x1f46e;&#x1f3fc;','&#x1f1e7;&#x1f1e9;','&#x1f1e7;&#x1f1ea;','&#x1f9dd;&#x1f3fb;','&#x1f46e;&#x1f3fd;','&#x1f3c4;&#x1f3fe;','&#x1f9dd;&#x1f3fc;','&#x1f1e7;&#x1f1eb;','&#x1f46e;&#x1f3fe;','&#x1f9dd;&#x1f3fd;','&#x1f1e7;&#x1f1ec;','&#x1f3c4;&#x1f3ff;','&#x1f9dd;&#x1f3fe;','&#x1f46e;&#x1f3ff;','&#x1f1e7;&#x1f1ed;','&#x1f9dd;&#x1f3ff;','&#x1f1e7;&#x1f1ee;','&#x1f3c7;&#x1f3fb;','&#x1f3c7;&#x1f3fc;','&#x1f470;&#x1f3fb;','&#x1f470;&#x1f3fc;','&#x1f470;&#x1f3fd;','&#x1f470;&#x1f3fe;','&#x1f470;&#x1f3ff;','&#x1f3c7;&#x1f3fd;','&#x1f3c7;&#x1f3fe;','&#x1f471;&#x1f3fb;','&#x1f3c7;&#x1f3ff;','&#x1f1e7;&#x1f1ef;','&#x1f471;&#x1f3fc;','&#x1f1e7;&#x1f1f1;','&#x1f3ca;&#x1f3fb;','&#x1f471;&#x1f3fd;','&#x1f1f8;&#x1f1ed;','&#x270d;&#x1f3ff;','&#x26f9;&#x1f3fb;','&#x270d;&#x1f3fe;','&#x270d;&#x1f3fd;','&#x270d;&#x1f3fc;','&#x270d;&#x1f3fb;','&#x270c;&#x1f3ff;','&#x270c;&#x1f3fe;','&#x270c;&#x1f3fd;','&#x270c;&#x1f3fc;','&#x270c;&#x1f3fb;','&#x270b;&#x1f3ff;','&#x270b;&#x1f3fe;','&#x270b;&#x1f3fd;','&#x270b;&#x1f3fc;','&#x270b;&#x1f3fb;','&#x270a;&#x1f3ff;','&#x270a;&#x1f3fe;','&#x270a;&#x1f3fd;','&#x270a;&#x1f3fc;','&#x270a;&#x1f3fb;','&#x26f7;&#x1f3fd;','&#x26f7;&#x1f3fe;','&#x26f9;&#x1f3ff;','&#x261d;&#x1f3ff;','&#x261d;&#x1f3fe;','&#x26f9;&#x1f3fe;','&#x261d;&#x1f3fd;','&#x261d;&#x1f3fc;','&#x26f9;&#x1f3fd;','&#x261d;&#x1f3fb;','&#x26f7;&#x1f3ff;','&#x26f9;&#x1f3fc;','&#x26f7;&#x1f3fb;','&#x26f7;&#x1f3fc;','&#x34;&#x20e3;','&#x23;&#x20e3;','&#x30;&#x20e3;','&#x31;&#x20e3;','&#x32;&#x20e3;','&#x33;&#x20e3;','&#x2a;&#x20e3;','&#x35;&#x20e3;','&#x36;&#x20e3;','&#x37;&#x20e3;','&#x38;&#x20e3;','&#x39;&#x20e3;','&#x1f1f3;','&#x1f554;','&#x1f555;','&#x1f556;','&#x1f557;','&#x1f558;','&#x1f559;','&#x1f55a;','&#x1f55b;','&#x1f55c;','&#x1f55d;','&#x1f55e;','&#x1f55f;','&#x1f560;','&#x1f561;','&#x1f562;','&#x1f563;','&#x1f564;','&#x1f565;','&#x1f566;','&#x1f567;','&#x1f56f;','&#x1f570;','&#x1f573;','&#x1f387;','&#x1f388;','&#x1f389;','&#x1f38a;','&#x1f38b;','&#x1f574;','&#x1f38c;','&#x1f38d;','&#x1f38e;','&#x1f38f;','&#x1f390;','&#x1f391;','&#x1f392;','&#x1f393;','&#x1f396;','&#x1f397;','&#x1f399;','&#x1f39a;','&#x1f39b;','&#x1f39e;','&#x1f39f;','&#x1f3a0;','&#x1f3a1;','&#x1f575;','&#x1f576;','&#x1f577;','&#x1f578;','&#x1f579;','&#x1f3a2;','&#x1f3a3;','&#x1f3a4;','&#x1f3a5;','&#x1f3a6;','&#x1f57a;','&#x1f587;','&#x1f58a;','&#x1f58b;','&#x1f58c;','&#x1f58d;','&#x1f3a7;','&#x1f3a8;','&#x1f3a9;','&#x1f3aa;','&#x1f3ab;','&#x1f590;','&#x1f3ac;','&#x1f3ad;','&#x1f3ae;','&#x1f3af;','&#x1f3b0;','&#x1f595;','&#x1f3b1;','&#x1f3b2;','&#x1f3b3;','&#x1f3b4;','&#x1f3b5;','&#x1f596;','&#x1f5a4;','&#x1f5a5;','&#x1f5a8;','&#x1f5b1;','&#x1f5b2;','&#x1f5bc;','&#x1f5c2;','&#x1f5c3;','&#x1f5c4;','&#x1f5d1;','&#x1f5d2;','&#x1f5d3;','&#x1f5dc;','&#x1f5dd;','&#x1f5de;','&#x1f5e1;','&#x1f5e3;','&#x1f5e8;','&#x1f5ef;','&#x1f5f3;','&#x1f5fa;','&#x1f5fb;','&#x1f5fc;','&#x1f5fd;','&#x1f5fe;','&#x1f5ff;','&#x1f600;','&#x1f601;','&#x1f602;','&#x1f603;','&#x1f604;','&#x1f605;','&#x1f606;','&#x1f607;','&#x1f608;','&#x1f609;','&#x1f60a;','&#x1f60b;','&#x1f60c;','&#x1f60d;','&#x1f60e;','&#x1f60f;','&#x1f610;','&#x1f611;','&#x1f612;','&#x1f613;','&#x1f614;','&#x1f615;','&#x1f616;','&#x1f617;','&#x1f618;','&#x1f619;','&#x1f61a;','&#x1f61b;','&#x1f61c;','&#x1f61d;','&#x1f61e;','&#x1f61f;','&#x1f620;','&#x1f621;','&#x1f622;','&#x1f623;','&#x1f624;','&#x1f625;','&#x1f626;','&#x1f627;','&#x1f628;','&#x1f629;','&#x1f62a;','&#x1f62b;','&#x1f62c;','&#x1f62d;','&#x1f62e;','&#x1f62f;','&#x1f630;','&#x1f631;','&#x1f632;','&#x1f633;','&#x1f634;','&#x1f635;','&#x1f636;','&#x1f637;','&#x1f638;','&#x1f639;','&#x1f63a;','&#x1f63b;','&#x1f63c;','&#x1f63d;','&#x1f63e;','&#x1f63f;','&#x1f640;','&#x1f641;','&#x1f642;','&#x1f643;','&#x1f644;','&#x1f3b6;','&#x1f3b7;','&#x1f3b8;','&#x1f3b9;','&#x1f3ba;','&#x1f3bb;','&#x1f3bc;','&#x1f3bd;','&#x1f3be;','&#x1f3bf;','&#x1f3c0;','&#x1f3c1;','&#x1f1e7;','&#x1f1ee;','&#x1f1ea;','&#x1f1f7;','&#x1f1f1;','&#x1f645;','&#x1f3c2;','&#x1f18e;','&#x1f191;','&#x1f1e8;','&#x1f1f9;','&#x1f1ef;','&#x1f192;','&#x1f1ec;','&#x1f193;','&#x1f0cf;','&#x1f194;','&#x1f1f4;','&#x1f1fa;','&#x1f1eb;','&#x1f195;','&#x1f196;','&#x1f197;','&#x1f646;','&#x1f1ed;','&#x1f3c3;','&#x1f198;','&#x1f1e9;','&#x1f1fb;','&#x1f1f0;','&#x1f199;','&#x1f1fc;','&#x1f19a;','&#x1f1fd;','&#x1f1f8;','&#x1f004;','&#x1f1fe;','&#x1f1e6;','&#x1f170;','&#x1f171;','&#x1f1ff;','&#x1f647;','&#x1f648;','&#x1f649;','&#x1f64a;','&#x1f201;','&#x1f202;','&#x1f3c4;','&#x1f3c5;','&#x1f3c6;','&#x1f21a;','&#x1f22f;','&#x1f232;','&#x1f233;','&#x1f234;','&#x1f3c7;','&#x1f468;','&#x1f3c8;','&#x1f3c9;','&#x1f235;','&#x1f236;','&#x1f237;','&#x1f64b;','&#x1f238;','&#x1f239;','&#x1f23a;','&#x1f250;','&#x1f251;','&#x1f64c;','&#x1f300;','&#x1f301;','&#x1f302;','&#x1f303;','&#x1f304;','&#x1f305;','&#x1f306;','&#x1f307;','&#x1f308;','&#x1f3ca;','&#x1f309;','&#x1f30a;','&#x1f30b;','&#x1f30c;','&#x1f30d;','&#x1f30e;','&#x1f30f;','&#x1f64d;','&#x1f310;','&#x1f311;','&#x1f312;','&#x1f313;','&#x1f314;','&#x1f315;','&#x1f316;','&#x1f317;','&#x1f318;','&#x1f319;','&#x1f3cb;','&#x1f31a;','&#x1f31b;','&#x1f31c;','&#x1f31d;','&#x1f31e;','&#x1f31f;','&#x1f64e;','&#x1f320;','&#x1f321;','&#x1f324;','&#x1f325;','&#x1f326;','&#x1f64f;','&#x1f680;','&#x1f681;','&#x1f682;','&#x1f683;','&#x1f684;','&#x1f685;','&#x1f686;','&#x1f687;','&#x1f688;','&#x1f689;','&#x1f68a;','&#x1f68b;','&#x1f68c;','&#x1f68d;','&#x1f68e;','&#x1f68f;','&#x1f690;','&#x1f691;','&#x1f692;','&#x1f693;','&#x1f694;','&#x1f695;','&#x1f696;','&#x1f697;','&#x1f698;','&#x1f699;','&#x1f69a;','&#x1f69b;','&#x1f69c;','&#x1f69d;','&#x1f69e;','&#x1f69f;','&#x1f6a0;','&#x1f6a1;','&#x1f6a2;','&#x1f327;','&#x1f328;','&#x1f329;','&#x1f32a;','&#x1f32b;','&#x1f32c;','&#x1f3cc;','&#x1f3cd;','&#x1f3ce;','&#x1f3cf;','&#x1f3d0;','&#x1f3d1;','&#x1f3d2;','&#x1f3d3;','&#x1f3d4;','&#x1f3d5;','&#x1f3d6;','&#x1f6a3;','&#x1f6a4;','&#x1f6a5;','&#x1f6a6;','&#x1f6a7;','&#x1f6a8;','&#x1f6a9;','&#x1f6aa;','&#x1f6ab;','&#x1f6ac;','&#x1f6ad;','&#x1f6ae;','&#x1f6af;','&#x1f6b0;','&#x1f6b1;','&#x1f6b2;','&#x1f6b3;','&#x1f3d7;','&#x1f3d8;','&#x1f3d9;','&#x1f3da;','&#x1f3db;','&#x1f3dc;','&#x1f3dd;','&#x1f3de;','&#x1f3df;','&#x1f3e0;','&#x1f3e1;','&#x1f3e2;','&#x1f3e3;','&#x1f3e4;','&#x1f3e5;','&#x1f3e6;','&#x1f3e7;','&#x1f6b4;','&#x1f3e8;','&#x1f3e9;','&#x1f3ea;','&#x1f3eb;','&#x1f3ec;','&#x1f3ed;','&#x1f3ee;','&#x1f3ef;','&#x1f3f0;','&#x1f32d;','&#x1f3f3;','&#x1f32e;','&#x1f32f;','&#x1f330;','&#x1f331;','&#x1f3f4;','&#x1f3f5;','&#x1f6b5;','&#x1f3f7;','&#x1f3f8;','&#x1f3f9;','&#x1f3fa;','&#x1f3fb;','&#x1f3fc;','&#x1f3fd;','&#x1f3fe;','&#x1f3ff;','&#x1f400;','&#x1f401;','&#x1f402;','&#x1f403;','&#x1f404;','&#x1f405;','&#x1f469;','&#x1f46a;','&#x1f6b6;','&#x1f6b7;','&#x1f6b8;','&#x1f6b9;','&#x1f6ba;','&#x1f6bb;','&#x1f6bc;','&#x1f6bd;','&#x1f6be;','&#x1f6bf;','&#x1f46b;','&#x1f46c;','&#x1f46d;','&#x1f406;','&#x1f407;','&#x1f6c0;','&#x1f6c1;','&#x1f6c2;','&#x1f6c3;','&#x1f6c4;','&#x1f6c5;','&#x1f6cb;','&#x1f408;','&#x1f409;','&#x1f40a;','&#x1f40b;','&#x1f40c;','&#x1f6cc;','&#x1f6cd;','&#x1f6ce;','&#x1f6cf;','&#x1f6d0;','&#x1f6d1;','&#x1f6d2;','&#x1f6e0;','&#x1f6e1;','&#x1f6e2;','&#x1f6e3;','&#x1f6e4;','&#x1f6e5;','&#x1f6e9;','&#x1f6eb;','&#x1f6ec;','&#x1f6f0;','&#x1f6f3;','&#x1f6f4;','&#x1f6f5;','&#x1f6f6;','&#x1f6f7;','&#x1f6f8;','&#x1f910;','&#x1f911;','&#x1f912;','&#x1f913;','&#x1f914;','&#x1f915;','&#x1f916;','&#x1f917;','&#x1f40d;','&#x1f40e;','&#x1f40f;','&#x1f410;','&#x1f411;','&#x1f918;','&#x1f412;','&#x1f413;','&#x1f414;','&#x1f415;','&#x1f416;','&#x1f919;','&#x1f46e;','&#x1f417;','&#x1f418;','&#x1f46f;','&#x1f419;','&#x1f91a;','&#x1f41a;','&#x1f41b;','&#x1f41c;','&#x1f41d;','&#x1f470;','&#x1f91b;','&#x1f41e;','&#x1f41f;','&#x1f420;','&#x1f421;','&#x1f422;','&#x1f91c;','&#x1f91d;','&#x1f423;','&#x1f424;','&#x1f425;','&#x1f426;','&#x1f427;','&#x1f91e;','&#x1f428;','&#x1f429;','&#x1f42a;','&#x1f42b;','&#x1f42c;','&#x1f91f;','&#x1f920;','&#x1f921;','&#x1f922;','&#x1f923;','&#x1f924;','&#x1f925;','&#x1f42d;','&#x1f42e;','&#x1f471;','&#x1f42f;','&#x1f430;','&#x1f431;','&#x1f432;','&#x1f433;','&#x1f472;','&#x1f434;','&#x1f435;','&#x1f436;','&#x1f437;','&#x1f438;','&#x1f439;','&#x1f43a;','&#x1f43b;','&#x1f926;','&#x1f927;','&#x1f928;','&#x1f929;','&#x1f92a;','&#x1f92b;','&#x1f92c;','&#x1f92d;','&#x1f92e;','&#x1f92f;','&#x1f43c;','&#x1f43d;','&#x1f43e;','&#x1f43f;','&#x1f440;','&#x1f930;','&#x1f332;','&#x1f441;','&#x1f333;','&#x1f334;','&#x1f473;','&#x1f931;','&#x1f335;','&#x1f336;','&#x1f337;','&#x1f442;','&#x1f338;','&#x1f932;','&#x1f474;','&#x1f339;','&#x1f33a;','&#x1f33b;','&#x1f33c;','&#x1f933;','&#x1f443;','&#x1f475;','&#x1f444;','&#x1f445;','&#x1f33d;','&#x1f934;','&#x1f33e;','&#x1f33f;','&#x1f476;','&#x1f340;','&#x1f341;','&#x1f935;','&#x1f446;','&#x1f342;','&#x1f343;','&#x1f344;','&#x1f345;','&#x1f936;','&#x1f346;','&#x1f447;','&#x1f347;','&#x1f348;','&#x1f349;','&#x1f34a;','&#x1f34b;','&#x1f448;','&#x1f34c;','&#x1f34d;','&#x1f477;','&#x1f34e;','&#x1f34f;','&#x1f350;','&#x1f449;','&#x1f351;','&#x1f478;','&#x1f937;','&#x1f479;','&#x1f47a;','&#x1f47b;','&#x1f352;','&#x1f353;','&#x1f354;','&#x1f355;','&#x1f44a;','&#x1f47c;','&#x1f47d;','&#x1f47e;','&#x1f47f;','&#x1f480;','&#x1f356;','&#x1f357;','&#x1f358;','&#x1f359;','&#x1f938;','&#x1f35a;','&#x1f44b;','&#x1f35b;','&#x1f35c;','&#x1f35d;','&#x1f35e;','&#x1f35f;','&#x1f44c;','&#x1f360;','&#x1f361;','&#x1f362;','&#x1f363;','&#x1f364;','&#x1f481;','&#x1f44d;','&#x1f365;','&#x1f366;','&#x1f939;','&#x1f93a;','&#x1f367;','&#x1f368;','&#x1f93c;','&#x1f369;','&#x1f44e;','&#x1f36a;','&#x1f36b;','&#x1f36c;','&#x1f36d;','&#x1f36e;','&#x1f44f;','&#x1f36f;','&#x1f370;','&#x1f371;','&#x1f372;','&#x1f482;','&#x1f373;','&#x1f450;','&#x1f451;','&#x1f452;','&#x1f93d;','&#x1f453;','&#x1f483;','&#x1f484;','&#x1f454;','&#x1f455;','&#x1f456;','&#x1f457;','&#x1f458;','&#x1f485;','&#x1f459;','&#x1f45a;','&#x1f45b;','&#x1f45c;','&#x1f45d;','&#x1f45e;','&#x1f45f;','&#x1f460;','&#x1f93e;','&#x1f940;','&#x1f941;','&#x1f942;','&#x1f943;','&#x1f944;','&#x1f945;','&#x1f947;','&#x1f948;','&#x1f949;','&#x1f94a;','&#x1f94b;','&#x1f94c;','&#x1f950;','&#x1f951;','&#x1f952;','&#x1f953;','&#x1f954;','&#x1f955;','&#x1f956;','&#x1f957;','&#x1f958;','&#x1f959;','&#x1f95a;','&#x1f95b;','&#x1f95c;','&#x1f95d;','&#x1f95e;','&#x1f95f;','&#x1f960;','&#x1f961;','&#x1f962;','&#x1f963;','&#x1f964;','&#x1f965;','&#x1f966;','&#x1f967;','&#x1f968;','&#x1f969;','&#x1f96a;','&#x1f96b;','&#x1f980;','&#x1f981;','&#x1f982;','&#x1f983;','&#x1f984;','&#x1f985;','&#x1f986;','&#x1f987;','&#x1f988;','&#x1f989;','&#x1f98a;','&#x1f98b;','&#x1f98c;','&#x1f98d;','&#x1f98e;','&#x1f98f;','&#x1f990;','&#x1f991;','&#x1f992;','&#x1f993;','&#x1f994;','&#x1f995;','&#x1f996;','&#x1f997;','&#x1f9c0;','&#x1f9d0;','&#x1f461;','&#x1f462;','&#x1f463;','&#x1f464;','&#x1f465;','&#x1f9d1;','&#x1f374;','&#x1f375;','&#x1f376;','&#x1f377;','&#x1f486;','&#x1f9d2;','&#x1f378;','&#x1f466;','&#x1f379;','&#x1f37a;','&#x1f37b;','&#x1f9d3;','&#x1f37c;','&#x1f37d;','&#x1f467;','&#x1f37e;','&#x1f37f;','&#x1f9d4;','&#x1f380;','&#x1f381;','&#x1f382;','&#x1f383;','&#x1f384;','&#x1f9d5;','&#x1f1f5;','&#x1f17e;','&#x1f487;','&#x1f488;','&#x1f489;','&#x1f48a;','&#x1f48b;','&#x1f48c;','&#x1f48d;','&#x1f48e;','&#x1f48f;','&#x1f490;','&#x1f491;','&#x1f492;','&#x1f493;','&#x1f494;','&#x1f495;','&#x1f9d6;','&#x1f496;','&#x1f497;','&#x1f498;','&#x1f499;','&#x1f49a;','&#x1f49b;','&#x1f49c;','&#x1f49d;','&#x1f49e;','&#x1f49f;','&#x1f4a0;','&#x1f4a1;','&#x1f4a2;','&#x1f4a3;','&#x1f4a4;','&#x1f4a5;','&#x1f4a6;','&#x1f9d7;','&#x1f4a7;','&#x1f4a8;','&#x1f4a9;','&#x1f1f6;','&#x1f1f2;','&#x1f17f;','&#x1f385;','&#x1f386;','&#x1f4aa;','&#x1f4ab;','&#x1f4ac;','&#x1f4ad;','&#x1f4ae;','&#x1f4af;','&#x1f4b0;','&#x1f4b1;','&#x1f4b2;','&#x1f9d8;','&#x1f4b3;','&#x1f4b4;','&#x1f4b5;','&#x1f4b6;','&#x1f4b7;','&#x1f4b8;','&#x1f4b9;','&#x1f4ba;','&#x1f4bb;','&#x1f4bc;','&#x1f4bd;','&#x1f4be;','&#x1f4bf;','&#x1f4c0;','&#x1f4c1;','&#x1f4c2;','&#x1f4c3;','&#x1f9d9;','&#x1f4c4;','&#x1f4c5;','&#x1f4c6;','&#x1f4c7;','&#x1f4c8;','&#x1f4c9;','&#x1f4ca;','&#x1f4cb;','&#x1f4cc;','&#x1f4cd;','&#x1f4ce;','&#x1f4cf;','&#x1f4d0;','&#x1f4d1;','&#x1f4d2;','&#x1f4d3;','&#x1f4d4;','&#x1f9da;','&#x1f4d5;','&#x1f4d6;','&#x1f4d7;','&#x1f4d8;','&#x1f4d9;','&#x1f4da;','&#x1f4db;','&#x1f4dc;','&#x1f4dd;','&#x1f4de;','&#x1f4df;','&#x1f4e0;','&#x1f4e1;','&#x1f4e2;','&#x1f4e3;','&#x1f4e4;','&#x1f4e5;','&#x1f9db;','&#x1f4e6;','&#x1f4e7;','&#x1f4e8;','&#x1f4e9;','&#x1f4ea;','&#x1f4eb;','&#x1f4ec;','&#x1f4ed;','&#x1f4ee;','&#x1f4ef;','&#x1f4f0;','&#x1f4f1;','&#x1f4f2;','&#x1f4f3;','&#x1f4f4;','&#x1f4f5;','&#x1f4f6;','&#x1f9dc;','&#x1f4f7;','&#x1f4f8;','&#x1f4f9;','&#x1f4fa;','&#x1f4fb;','&#x1f4fc;','&#x1f4fd;','&#x1f4ff;','&#x1f500;','&#x1f501;','&#x1f502;','&#x1f503;','&#x1f504;','&#x1f505;','&#x1f506;','&#x1f507;','&#x1f508;','&#x1f9dd;','&#x1f509;','&#x1f50a;','&#x1f9de;','&#x1f50b;','&#x1f50c;','&#x1f9df;','&#x1f9e0;','&#x1f9e1;','&#x1f9e2;','&#x1f9e3;','&#x1f9e4;','&#x1f9e5;','&#x1f9e6;','&#x1f50d;','&#x1f50e;','&#x1f50f;','&#x1f510;','&#x1f511;','&#x1f512;','&#x1f513;','&#x1f514;','&#x1f515;','&#x1f516;','&#x1f517;','&#x1f518;','&#x1f519;','&#x1f51a;','&#x1f51b;','&#x1f51c;','&#x1f51d;','&#x1f51e;','&#x1f51f;','&#x1f520;','&#x1f521;','&#x1f522;','&#x1f523;','&#x1f524;','&#x1f525;','&#x1f526;','&#x1f527;','&#x1f528;','&#x1f529;','&#x1f52a;','&#x1f52b;','&#x1f52c;','&#x1f52d;','&#x1f52e;','&#x1f52f;','&#x1f530;','&#x1f531;','&#x1f532;','&#x1f533;','&#x1f534;','&#x1f535;','&#x1f536;','&#x1f537;','&#x1f538;','&#x1f539;','&#x1f53a;','&#x1f53b;','&#x1f53c;','&#x1f53d;','&#x1f549;','&#x1f54a;','&#x1f54b;','&#x1f54c;','&#x1f54d;','&#x1f54e;','&#x1f550;','&#x1f551;','&#x1f552;','&#x1f553;','&#x25aa;','&#x2626;','&#x262e;','&#x262f;','&#x2638;','&#x2639;','&#x263a;','&#x2640;','&#x2642;','&#x2648;','&#x2649;','&#x264a;','&#x264b;','&#x264c;','&#x264d;','&#x264e;','&#x264f;','&#x2650;','&#x2651;','&#x2652;','&#x2653;','&#x2660;','&#x2663;','&#x2665;','&#x2666;','&#x2668;','&#x267b;','&#x267f;','&#x2692;','&#x2693;','&#x2694;','&#x2695;','&#x2696;','&#x2697;','&#x2699;','&#x269b;','&#x269c;','&#x26a0;','&#x26a1;','&#x26aa;','&#x26ab;','&#x26b0;','&#x26b1;','&#x26bd;','&#x26be;','&#x26c4;','&#x26c5;','&#x26c8;','&#x26ce;','&#x26cf;','&#x26d1;','&#x26d3;','&#x26d4;','&#x26e9;','&#x26ea;','&#x26f0;','&#x26f1;','&#x26f2;','&#x26f3;','&#x26f4;','&#x26f5;','&#x2623;','&#x2622;','&#x2620;','&#x261d;','&#x2618;','&#x26f7;','&#x26f8;','&#x2615;','&#x2614;','&#x2611;','&#x260e;','&#x2604;','&#x2603;','&#x2602;','&#x2601;','&#x2600;','&#x25fe;','&#x25fd;','&#x25fc;','&#x25fb;','&#x25c0;','&#x25b6;','&#x25ab;','&#x262a;','&#x26f9;','&#x26fa;','&#x26fd;','&#x2702;','&#x2705;','&#x2708;','&#x2709;','&#x24c2;','&#x23fa;','&#x23f9;','&#x23f8;','&#x23f3;','&#x270a;','&#x23f2;','&#x23f1;','&#x23f0;','&#x23ef;','&#x23ee;','&#x270b;','&#x23ed;','&#x23ec;','&#x23eb;','&#x23ea;','&#x23e9;','&#x270c;','&#x23cf;','&#x2328;','&#x231b;','&#x231a;','&#x21aa;','&#x270d;','&#x270f;','&#x2712;','&#x2714;','&#x2716;','&#x271d;','&#x2721;','&#x2728;','&#x2733;','&#x2734;','&#x2744;','&#x2747;','&#x274c;','&#x274e;','&#x2753;','&#x2754;','&#x2755;','&#x2757;','&#x2763;','&#x2764;','&#x2795;','&#x2796;','&#x2797;','&#x27a1;','&#x27b0;','&#x27bf;','&#x2934;','&#x2935;','&#x21a9;','&#x2b05;','&#x2b06;','&#x2b07;','&#x2b1b;','&#x2b1c;','&#x2b50;','&#x2b55;','&#x2199;','&#x3030;','&#x303d;','&#x2198;','&#x2197;','&#x3297;','&#x3299;','&#x2196;','&#x2195;','&#x2194;','&#x2139;','&#x2122;','&#x2049;','&#x203c;','&#xe50a;');\n\t$partials = array('&#x1f004;','&#x1f0cf;','&#x1f170;','&#x1f171;','&#x1f17e;','&#x1f17f;','&#x1f18e;','&#x1f191;','&#x1f192;','&#x1f193;','&#x1f194;','&#x1f195;','&#x1f196;','&#x1f197;','&#x1f198;','&#x1f199;','&#x1f19a;','&#x1f1e6;','&#x1f1e8;','&#x1f1e9;','&#x1f1ea;','&#x1f1eb;','&#x1f1ec;','&#x1f1ee;','&#x1f1f1;','&#x1f1f2;','&#x1f1f4;','&#x1f1f6;','&#x1f1f7;','&#x1f1f8;','&#x1f1f9;','&#x1f1fa;','&#x1f1fc;','&#x1f1fd;','&#x1f1ff;','&#x1f1e7;','&#x1f1ed;','&#x1f1ef;','&#x1f1f3;','&#x1f1fb;','&#x1f1fe;','&#x1f1f0;','&#x1f1f5;','&#x1f201;','&#x1f202;','&#x1f21a;','&#x1f22f;','&#x1f232;','&#x1f233;','&#x1f234;','&#x1f235;','&#x1f236;','&#x1f237;','&#x1f238;','&#x1f239;','&#x1f23a;','&#x1f250;','&#x1f251;','&#x1f300;','&#x1f301;','&#x1f302;','&#x1f303;','&#x1f304;','&#x1f305;','&#x1f306;','&#x1f307;','&#x1f308;','&#x1f309;','&#x1f30a;','&#x1f30b;','&#x1f30c;','&#x1f30d;','&#x1f30e;','&#x1f30f;','&#x1f310;','&#x1f311;','&#x1f312;','&#x1f313;','&#x1f314;','&#x1f315;','&#x1f316;','&#x1f317;','&#x1f318;','&#x1f319;','&#x1f31a;','&#x1f31b;','&#x1f31c;','&#x1f31d;','&#x1f31e;','&#x1f31f;','&#x1f320;','&#x1f321;','&#x1f324;','&#x1f325;','&#x1f326;','&#x1f327;','&#x1f328;','&#x1f329;','&#x1f32a;','&#x1f32b;','&#x1f32c;','&#x1f32d;','&#x1f32e;','&#x1f32f;','&#x1f330;','&#x1f331;','&#x1f332;','&#x1f333;','&#x1f334;','&#x1f335;','&#x1f336;','&#x1f337;','&#x1f338;','&#x1f339;','&#x1f33a;','&#x1f33b;','&#x1f33c;','&#x1f33d;','&#x1f33e;','&#x1f33f;','&#x1f340;','&#x1f341;','&#x1f342;','&#x1f343;','&#x1f344;','&#x1f345;','&#x1f346;','&#x1f347;','&#x1f348;','&#x1f349;','&#x1f34a;','&#x1f34b;','&#x1f34c;','&#x1f34d;','&#x1f34e;','&#x1f34f;','&#x1f350;','&#x1f351;','&#x1f352;','&#x1f353;','&#x1f354;','&#x1f355;','&#x1f356;','&#x1f357;','&#x1f358;','&#x1f359;','&#x1f35a;','&#x1f35b;','&#x1f35c;','&#x1f35d;','&#x1f35e;','&#x1f35f;','&#x1f360;','&#x1f361;','&#x1f362;','&#x1f363;','&#x1f364;','&#x1f365;','&#x1f366;','&#x1f367;','&#x1f368;','&#x1f369;','&#x1f36a;','&#x1f36b;','&#x1f36c;','&#x1f36d;','&#x1f36e;','&#x1f36f;','&#x1f370;','&#x1f371;','&#x1f372;','&#x1f373;','&#x1f374;','&#x1f375;','&#x1f376;','&#x1f377;','&#x1f378;','&#x1f379;','&#x1f37a;','&#x1f37b;','&#x1f37c;','&#x1f37d;','&#x1f37e;','&#x1f37f;','&#x1f380;','&#x1f381;','&#x1f382;','&#x1f383;','&#x1f384;','&#x1f385;','&#x1f3fb;','&#x1f3fc;','&#x1f3fd;','&#x1f3fe;','&#x1f3ff;','&#x1f386;','&#x1f387;','&#x1f388;','&#x1f389;','&#x1f38a;','&#x1f38b;','&#x1f38c;','&#x1f38d;','&#x1f38e;','&#x1f38f;','&#x1f390;','&#x1f391;','&#x1f392;','&#x1f393;','&#x1f396;','&#x1f397;','&#x1f399;','&#x1f39a;','&#x1f39b;','&#x1f39e;','&#x1f39f;','&#x1f3a0;','&#x1f3a1;','&#x1f3a2;','&#x1f3a3;','&#x1f3a4;','&#x1f3a5;','&#x1f3a6;','&#x1f3a7;','&#x1f3a8;','&#x1f3a9;','&#x1f3aa;','&#x1f3ab;','&#x1f3ac;','&#x1f3ad;','&#x1f3ae;','&#x1f3af;','&#x1f3b0;','&#x1f3b1;','&#x1f3b2;','&#x1f3b3;','&#x1f3b4;','&#x1f3b5;','&#x1f3b6;','&#x1f3b7;','&#x1f3b8;','&#x1f3b9;','&#x1f3ba;','&#x1f3bb;','&#x1f3bc;','&#x1f3bd;','&#x1f3be;','&#x1f3bf;','&#x1f3c0;','&#x1f3c1;','&#x1f3c2;','&#x1f3c3;','&#x200d;','&#x2640;','&#xfe0f;','&#x2642;','&#x1f3c4;','&#x1f3c5;','&#x1f3c6;','&#x1f3c7;','&#x1f3c8;','&#x1f3c9;','&#x1f3ca;','&#x1f3cb;','&#x1f3cc;','&#x1f3cd;','&#x1f3ce;','&#x1f3cf;','&#x1f3d0;','&#x1f3d1;','&#x1f3d2;','&#x1f3d3;','&#x1f3d4;','&#x1f3d5;','&#x1f3d6;','&#x1f3d7;','&#x1f3d8;','&#x1f3d9;','&#x1f3da;','&#x1f3db;','&#x1f3dc;','&#x1f3dd;','&#x1f3de;','&#x1f3df;','&#x1f3e0;','&#x1f3e1;','&#x1f3e2;','&#x1f3e3;','&#x1f3e4;','&#x1f3e5;','&#x1f3e6;','&#x1f3e7;','&#x1f3e8;','&#x1f3e9;','&#x1f3ea;','&#x1f3eb;','&#x1f3ec;','&#x1f3ed;','&#x1f3ee;','&#x1f3ef;','&#x1f3f0;','&#x1f3f3;','&#x1f3f4;','&#x2620;','&#xe0067;','&#xe0062;','&#xe0065;','&#xe006e;','&#xe007f;','&#xe0073;','&#xe0063;','&#xe0074;','&#xe0077;','&#xe006c;','&#x1f3f5;','&#x1f3f7;','&#x1f3f8;','&#x1f3f9;','&#x1f3fa;','&#x1f400;','&#x1f401;','&#x1f402;','&#x1f403;','&#x1f404;','&#x1f405;','&#x1f406;','&#x1f407;','&#x1f408;','&#x1f409;','&#x1f40a;','&#x1f40b;','&#x1f40c;','&#x1f40d;','&#x1f40e;','&#x1f40f;','&#x1f410;','&#x1f411;','&#x1f412;','&#x1f413;','&#x1f414;','&#x1f415;','&#x1f416;','&#x1f417;','&#x1f418;','&#x1f419;','&#x1f41a;','&#x1f41b;','&#x1f41c;','&#x1f41d;','&#x1f41e;','&#x1f41f;','&#x1f420;','&#x1f421;','&#x1f422;','&#x1f423;','&#x1f424;','&#x1f425;','&#x1f426;','&#x1f427;','&#x1f428;','&#x1f429;','&#x1f42a;','&#x1f42b;','&#x1f42c;','&#x1f42d;','&#x1f42e;','&#x1f42f;','&#x1f430;','&#x1f431;','&#x1f432;','&#x1f433;','&#x1f434;','&#x1f435;','&#x1f436;','&#x1f437;','&#x1f438;','&#x1f439;','&#x1f43a;','&#x1f43b;','&#x1f43c;','&#x1f43d;','&#x1f43e;','&#x1f43f;','&#x1f440;','&#x1f441;','&#x1f5e8;','&#x1f442;','&#x1f443;','&#x1f444;','&#x1f445;','&#x1f446;','&#x1f447;','&#x1f448;','&#x1f449;','&#x1f44a;','&#x1f44b;','&#x1f44c;','&#x1f44d;','&#x1f44e;','&#x1f44f;','&#x1f450;','&#x1f451;','&#x1f452;','&#x1f453;','&#x1f454;','&#x1f455;','&#x1f456;','&#x1f457;','&#x1f458;','&#x1f459;','&#x1f45a;','&#x1f45b;','&#x1f45c;','&#x1f45d;','&#x1f45e;','&#x1f45f;','&#x1f460;','&#x1f461;','&#x1f462;','&#x1f463;','&#x1f464;','&#x1f465;','&#x1f466;','&#x1f467;','&#x1f468;','&#x1f4bb;','&#x1f4bc;','&#x1f527;','&#x1f52c;','&#x1f680;','&#x1f692;','&#x2695;','&#x2696;','&#x2708;','&#x1f469;','&#x2764;','&#x1f48b;','&#x1f46a;','&#x1f46b;','&#x1f46c;','&#x1f46d;','&#x1f46e;','&#x1f46f;','&#x1f470;','&#x1f471;','&#x1f472;','&#x1f473;','&#x1f474;','&#x1f475;','&#x1f476;','&#x1f477;','&#x1f478;','&#x1f479;','&#x1f47a;','&#x1f47b;','&#x1f47c;','&#x1f47d;','&#x1f47e;','&#x1f47f;','&#x1f480;','&#x1f481;','&#x1f482;','&#x1f483;','&#x1f484;','&#x1f485;','&#x1f486;','&#x1f487;','&#x1f488;','&#x1f489;','&#x1f48a;','&#x1f48c;','&#x1f48d;','&#x1f48e;','&#x1f48f;','&#x1f490;','&#x1f491;','&#x1f492;','&#x1f493;','&#x1f494;','&#x1f495;','&#x1f496;','&#x1f497;','&#x1f498;','&#x1f499;','&#x1f49a;','&#x1f49b;','&#x1f49c;','&#x1f49d;','&#x1f49e;','&#x1f49f;','&#x1f4a0;','&#x1f4a1;','&#x1f4a2;','&#x1f4a3;','&#x1f4a4;','&#x1f4a5;','&#x1f4a6;','&#x1f4a7;','&#x1f4a8;','&#x1f4a9;','&#x1f4aa;','&#x1f4ab;','&#x1f4ac;','&#x1f4ad;','&#x1f4ae;','&#x1f4af;','&#x1f4b0;','&#x1f4b1;','&#x1f4b2;','&#x1f4b3;','&#x1f4b4;','&#x1f4b5;','&#x1f4b6;','&#x1f4b7;','&#x1f4b8;','&#x1f4b9;','&#x1f4ba;','&#x1f4bd;','&#x1f4be;','&#x1f4bf;','&#x1f4c0;','&#x1f4c1;','&#x1f4c2;','&#x1f4c3;','&#x1f4c4;','&#x1f4c5;','&#x1f4c6;','&#x1f4c7;','&#x1f4c8;','&#x1f4c9;','&#x1f4ca;','&#x1f4cb;','&#x1f4cc;','&#x1f4cd;','&#x1f4ce;','&#x1f4cf;','&#x1f4d0;','&#x1f4d1;','&#x1f4d2;','&#x1f4d3;','&#x1f4d4;','&#x1f4d5;','&#x1f4d6;','&#x1f4d7;','&#x1f4d8;','&#x1f4d9;','&#x1f4da;','&#x1f4db;','&#x1f4dc;','&#x1f4dd;','&#x1f4de;','&#x1f4df;','&#x1f4e0;','&#x1f4e1;','&#x1f4e2;','&#x1f4e3;','&#x1f4e4;','&#x1f4e5;','&#x1f4e6;','&#x1f4e7;','&#x1f4e8;','&#x1f4e9;','&#x1f4ea;','&#x1f4eb;','&#x1f4ec;','&#x1f4ed;','&#x1f4ee;','&#x1f4ef;','&#x1f4f0;','&#x1f4f1;','&#x1f4f2;','&#x1f4f3;','&#x1f4f4;','&#x1f4f5;','&#x1f4f6;','&#x1f4f7;','&#x1f4f8;','&#x1f4f9;','&#x1f4fa;','&#x1f4fb;','&#x1f4fc;','&#x1f4fd;','&#x1f4ff;','&#x1f500;','&#x1f501;','&#x1f502;','&#x1f503;','&#x1f504;','&#x1f505;','&#x1f506;','&#x1f507;','&#x1f508;','&#x1f509;','&#x1f50a;','&#x1f50b;','&#x1f50c;','&#x1f50d;','&#x1f50e;','&#x1f50f;','&#x1f510;','&#x1f511;','&#x1f512;','&#x1f513;','&#x1f514;','&#x1f515;','&#x1f516;','&#x1f517;','&#x1f518;','&#x1f519;','&#x1f51a;','&#x1f51b;','&#x1f51c;','&#x1f51d;','&#x1f51e;','&#x1f51f;','&#x1f520;','&#x1f521;','&#x1f522;','&#x1f523;','&#x1f524;','&#x1f525;','&#x1f526;','&#x1f528;','&#x1f529;','&#x1f52a;','&#x1f52b;','&#x1f52d;','&#x1f52e;','&#x1f52f;','&#x1f530;','&#x1f531;','&#x1f532;','&#x1f533;','&#x1f534;','&#x1f535;','&#x1f536;','&#x1f537;','&#x1f538;','&#x1f539;','&#x1f53a;','&#x1f53b;','&#x1f53c;','&#x1f53d;','&#x1f549;','&#x1f54a;','&#x1f54b;','&#x1f54c;','&#x1f54d;','&#x1f54e;','&#x1f550;','&#x1f551;','&#x1f552;','&#x1f553;','&#x1f554;','&#x1f555;','&#x1f556;','&#x1f557;','&#x1f558;','&#x1f559;','&#x1f55a;','&#x1f55b;','&#x1f55c;','&#x1f55d;','&#x1f55e;','&#x1f55f;','&#x1f560;','&#x1f561;','&#x1f562;','&#x1f563;','&#x1f564;','&#x1f565;','&#x1f566;','&#x1f567;','&#x1f56f;','&#x1f570;','&#x1f573;','&#x1f574;','&#x1f575;','&#x1f576;','&#x1f577;','&#x1f578;','&#x1f579;','&#x1f57a;','&#x1f587;','&#x1f58a;','&#x1f58b;','&#x1f58c;','&#x1f58d;','&#x1f590;','&#x1f595;','&#x1f596;','&#x1f5a4;','&#x1f5a5;','&#x1f5a8;','&#x1f5b1;','&#x1f5b2;','&#x1f5bc;','&#x1f5c2;','&#x1f5c3;','&#x1f5c4;','&#x1f5d1;','&#x1f5d2;','&#x1f5d3;','&#x1f5dc;','&#x1f5dd;','&#x1f5de;','&#x1f5e1;','&#x1f5e3;','&#x1f5ef;','&#x1f5f3;','&#x1f5fa;','&#x1f5fb;','&#x1f5fc;','&#x1f5fd;','&#x1f5fe;','&#x1f5ff;','&#x1f600;','&#x1f601;','&#x1f602;','&#x1f603;','&#x1f604;','&#x1f605;','&#x1f606;','&#x1f607;','&#x1f608;','&#x1f609;','&#x1f60a;','&#x1f60b;','&#x1f60c;','&#x1f60d;','&#x1f60e;','&#x1f60f;','&#x1f610;','&#x1f611;','&#x1f612;','&#x1f613;','&#x1f614;','&#x1f615;','&#x1f616;','&#x1f617;','&#x1f618;','&#x1f619;','&#x1f61a;','&#x1f61b;','&#x1f61c;','&#x1f61d;','&#x1f61e;','&#x1f61f;','&#x1f620;','&#x1f621;','&#x1f622;','&#x1f623;','&#x1f624;','&#x1f625;','&#x1f626;','&#x1f627;','&#x1f628;','&#x1f629;','&#x1f62a;','&#x1f62b;','&#x1f62c;','&#x1f62d;','&#x1f62e;','&#x1f62f;','&#x1f630;','&#x1f631;','&#x1f632;','&#x1f633;','&#x1f634;','&#x1f635;','&#x1f636;','&#x1f637;','&#x1f638;','&#x1f639;','&#x1f63a;','&#x1f63b;','&#x1f63c;','&#x1f63d;','&#x1f63e;','&#x1f63f;','&#x1f640;','&#x1f641;','&#x1f642;','&#x1f643;','&#x1f644;','&#x1f645;','&#x1f646;','&#x1f647;','&#x1f648;','&#x1f649;','&#x1f64a;','&#x1f64b;','&#x1f64c;','&#x1f64d;','&#x1f64e;','&#x1f64f;','&#x1f681;','&#x1f682;','&#x1f683;','&#x1f684;','&#x1f685;','&#x1f686;','&#x1f687;','&#x1f688;','&#x1f689;','&#x1f68a;','&#x1f68b;','&#x1f68c;','&#x1f68d;','&#x1f68e;','&#x1f68f;','&#x1f690;','&#x1f691;','&#x1f693;','&#x1f694;','&#x1f695;','&#x1f696;','&#x1f697;','&#x1f698;','&#x1f699;','&#x1f69a;','&#x1f69b;','&#x1f69c;','&#x1f69d;','&#x1f69e;','&#x1f69f;','&#x1f6a0;','&#x1f6a1;','&#x1f6a2;','&#x1f6a3;','&#x1f6a4;','&#x1f6a5;','&#x1f6a6;','&#x1f6a7;','&#x1f6a8;','&#x1f6a9;','&#x1f6aa;','&#x1f6ab;','&#x1f6ac;','&#x1f6ad;','&#x1f6ae;','&#x1f6af;','&#x1f6b0;','&#x1f6b1;','&#x1f6b2;','&#x1f6b3;','&#x1f6b4;','&#x1f6b5;','&#x1f6b6;','&#x1f6b7;','&#x1f6b8;','&#x1f6b9;','&#x1f6ba;','&#x1f6bb;','&#x1f6bc;','&#x1f6bd;','&#x1f6be;','&#x1f6bf;','&#x1f6c0;','&#x1f6c1;','&#x1f6c2;','&#x1f6c3;','&#x1f6c4;','&#x1f6c5;','&#x1f6cb;','&#x1f6cc;','&#x1f6cd;','&#x1f6ce;','&#x1f6cf;','&#x1f6d0;','&#x1f6d1;','&#x1f6d2;','&#x1f6e0;','&#x1f6e1;','&#x1f6e2;','&#x1f6e3;','&#x1f6e4;','&#x1f6e5;','&#x1f6e9;','&#x1f6eb;','&#x1f6ec;','&#x1f6f0;','&#x1f6f3;','&#x1f6f4;','&#x1f6f5;','&#x1f6f6;','&#x1f6f7;','&#x1f6f8;','&#x1f910;','&#x1f911;','&#x1f912;','&#x1f913;','&#x1f914;','&#x1f915;','&#x1f916;','&#x1f917;','&#x1f918;','&#x1f919;','&#x1f91a;','&#x1f91b;','&#x1f91c;','&#x1f91d;','&#x1f91e;','&#x1f91f;','&#x1f920;','&#x1f921;','&#x1f922;','&#x1f923;','&#x1f924;','&#x1f925;','&#x1f926;','&#x1f927;','&#x1f928;','&#x1f929;','&#x1f92a;','&#x1f92b;','&#x1f92c;','&#x1f92d;','&#x1f92e;','&#x1f92f;','&#x1f930;','&#x1f931;','&#x1f932;','&#x1f933;','&#x1f934;','&#x1f935;','&#x1f936;','&#x1f937;','&#x1f938;','&#x1f939;','&#x1f93a;','&#x1f93c;','&#x1f93d;','&#x1f93e;','&#x1f940;','&#x1f941;','&#x1f942;','&#x1f943;','&#x1f944;','&#x1f945;','&#x1f947;','&#x1f948;','&#x1f949;','&#x1f94a;','&#x1f94b;','&#x1f94c;','&#x1f950;','&#x1f951;','&#x1f952;','&#x1f953;','&#x1f954;','&#x1f955;','&#x1f956;','&#x1f957;','&#x1f958;','&#x1f959;','&#x1f95a;','&#x1f95b;','&#x1f95c;','&#x1f95d;','&#x1f95e;','&#x1f95f;','&#x1f960;','&#x1f961;','&#x1f962;','&#x1f963;','&#x1f964;','&#x1f965;','&#x1f966;','&#x1f967;','&#x1f968;','&#x1f969;','&#x1f96a;','&#x1f96b;','&#x1f980;','&#x1f981;','&#x1f982;','&#x1f983;','&#x1f984;','&#x1f985;','&#x1f986;','&#x1f987;','&#x1f988;','&#x1f989;','&#x1f98a;','&#x1f98b;','&#x1f98c;','&#x1f98d;','&#x1f98e;','&#x1f98f;','&#x1f990;','&#x1f991;','&#x1f992;','&#x1f993;','&#x1f994;','&#x1f995;','&#x1f996;','&#x1f997;','&#x1f9c0;','&#x1f9d0;','&#x1f9d1;','&#x1f9d2;','&#x1f9d3;','&#x1f9d4;','&#x1f9d5;','&#x1f9d6;','&#x1f9d7;','&#x1f9d8;','&#x1f9d9;','&#x1f9da;','&#x1f9db;','&#x1f9dc;','&#x1f9dd;','&#x1f9de;','&#x1f9df;','&#x1f9e0;','&#x1f9e1;','&#x1f9e2;','&#x1f9e3;','&#x1f9e4;','&#x1f9e5;','&#x1f9e6;','&#x203c;','&#x2049;','&#x2122;','&#x2139;','&#x2194;','&#x2195;','&#x2196;','&#x2197;','&#x2198;','&#x2199;','&#x21a9;','&#x21aa;','&#x20e3;','&#x231a;','&#x231b;','&#x2328;','&#x23cf;','&#x23e9;','&#x23ea;','&#x23eb;','&#x23ec;','&#x23ed;','&#x23ee;','&#x23ef;','&#x23f0;','&#x23f1;','&#x23f2;','&#x23f3;','&#x23f8;','&#x23f9;','&#x23fa;','&#x24c2;','&#x25aa;','&#x25ab;','&#x25b6;','&#x25c0;','&#x25fb;','&#x25fc;','&#x25fd;','&#x25fe;','&#x2600;','&#x2601;','&#x2602;','&#x2603;','&#x2604;','&#x260e;','&#x2611;','&#x2614;','&#x2615;','&#x2618;','&#x261d;','&#x2622;','&#x2623;','&#x2626;','&#x262a;','&#x262e;','&#x262f;','&#x2638;','&#x2639;','&#x263a;','&#x2648;','&#x2649;','&#x264a;','&#x264b;','&#x264c;','&#x264d;','&#x264e;','&#x264f;','&#x2650;','&#x2651;','&#x2652;','&#x2653;','&#x2660;','&#x2663;','&#x2665;','&#x2666;','&#x2668;','&#x267b;','&#x267f;','&#x2692;','&#x2693;','&#x2694;','&#x2697;','&#x2699;','&#x269b;','&#x269c;','&#x26a0;','&#x26a1;','&#x26aa;','&#x26ab;','&#x26b0;','&#x26b1;','&#x26bd;','&#x26be;','&#x26c4;','&#x26c5;','&#x26c8;','&#x26ce;','&#x26cf;','&#x26d1;','&#x26d3;','&#x26d4;','&#x26e9;','&#x26ea;','&#x26f0;','&#x26f1;','&#x26f2;','&#x26f3;','&#x26f4;','&#x26f5;','&#x26f7;','&#x26f8;','&#x26f9;','&#x26fa;','&#x26fd;','&#x2702;','&#x2705;','&#x2709;','&#x270a;','&#x270b;','&#x270c;','&#x270d;','&#x270f;','&#x2712;','&#x2714;','&#x2716;','&#x271d;','&#x2721;','&#x2728;','&#x2733;','&#x2734;','&#x2744;','&#x2747;','&#x274c;','&#x274e;','&#x2753;','&#x2754;','&#x2755;','&#x2757;','&#x2763;','&#x2795;','&#x2796;','&#x2797;','&#x27a1;','&#x27b0;','&#x27bf;','&#x2934;','&#x2935;','&#x2b05;','&#x2b06;','&#x2b07;','&#x2b1b;','&#x2b1c;','&#x2b50;','&#x2b55;','&#x3030;','&#x303d;','&#x3297;','&#x3299;','&#xe50a;');\n\t// END: emoji arrays\n\n\tif ( 'entities' === $type ) {\n\t\treturn $entities;\n\t}\n\n\treturn $partials;\n}\n\n/**\n * Shorten a URL, to be used as link text.\n *\n * @since 1.2.0\n * @since 4.4.0 Moved to wp-includes/formatting.php from wp-admin/includes/misc.php and added $length param.\n *\n * @param string $url    URL to shorten.\n * @param int    $length Optional. Maximum length of the shortened URL. Default 35 characters.\n * @return string Shortened URL.\n */\nfunction url_shorten( $url, $length = 35 ) {\n\t$stripped = str_replace( array( 'https://', 'http://', 'www.' ), '', $url );\n\t$short_url = untrailingslashit( $stripped );\n\n\tif ( strlen( $short_url ) > $length ) {\n\t\t$short_url = substr( $short_url, 0, $length - 3 ) . '&hellip;';\n\t}\n\treturn $short_url;\n}\n\n/**\n * Sanitizes a hex color.\n *\n * Returns either '', a 3 or 6 digit hex color (with #), or nothing.\n * For sanitizing values without a #, see sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|void\n */\nfunction sanitize_hex_color( $color ) {\n\tif ( '' === $color ) {\n\t\treturn '';\n\t}\n\n\t// 3 or 6 hex digits, or the empty string.\n\tif ( preg_match('|^#([A-Fa-f0-9]{3}){1,2}$|', $color ) ) {\n\t\treturn $color;\n\t}\n}\n\n/**\n * Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible.\n *\n * Saving hex colors without a hash puts the burden of adding the hash on the\n * UI, which makes it difficult to use or upgrade to other color types such as\n * rgba, hsl, rgb, and html color names.\n *\n * Returns either '', a 3 or 6 digit hex color (without a #), or null.\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|null\n */\nfunction sanitize_hex_color_no_hash( $color ) {\n\t$color = ltrim( $color, '#' );\n\n\tif ( '' === $color ) {\n\t\treturn '';\n\t}\n\n\treturn sanitize_hex_color( '#' . $color ) ? $color : null;\n}\n\n/**\n * Ensures that any hex color is properly hashed.\n * Otherwise, returns value untouched.\n *\n * This method should only be necessary if using sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string\n */\nfunction maybe_hash_hex_color( $color ) {\n\tif ( $unhashed = sanitize_hex_color_no_hash( $color ) ) {\n\t\treturn '#' . $unhashed;\n\t}\n\n\treturn $color;\n}\n", "<?php\n/**\n * Core Metadata API\n *\n * Functions for retrieving and manipulating metadata of various WordPress object types. Metadata\n * for an object is a represented by a simple key-value pair. Objects may contain multiple\n * metadata entries that share the same key and differ only in their value.\n *\n * @package WordPress\n * @subpackage Meta\n */\n\n/**\n * Add metadata for the specified object.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id  ID of the object metadata is for\n * @param string $meta_key   Metadata key\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param bool   $unique     Optional, default is false.\n *                           Whether the specified metadata key should be unique for the object.\n *                           If true, and the object already has a value for the specified metadata key,\n *                           no change will be made.\n * @return int|false The meta ID on success, false on failure.\n */\nfunction add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique = false) {\n\tglobal $wpdb;\n\n\tif ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) ) {\n\t\treturn false;\n\t}\n\n\t$object_id = absint( $object_id );\n\tif ( ! $object_id ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$column = sanitize_key($meta_type . '_id');\n\n\t// expected_slashed ($meta_key)\n\t$meta_key = wp_unslash($meta_key);\n\t$meta_value = wp_unslash($meta_value);\n\t$meta_value = sanitize_meta( $meta_key, $meta_value, $meta_type );\n\n\t/**\n\t * Filters whether to add metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user). Returning a non-null value\n\t * will effectively short-circuit the function.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param null|bool $check      Whether to allow adding metadata for the given type.\n\t * @param int       $object_id  Object ID.\n\t * @param string    $meta_key   Meta key.\n\t * @param mixed     $meta_value Meta value. Must be serializable if non-scalar.\n\t * @param bool      $unique     Whether the specified meta key should be unique\n\t *                              for the object. Optional. Default false.\n\t */\n\t$check = apply_filters( \"add_{$meta_type}_metadata\", null, $object_id, $meta_key, $meta_value, $unique );\n\tif ( null !== $check )\n\t\treturn $check;\n\n\tif ( $unique && $wpdb->get_var( $wpdb->prepare(\n\t\t\"SELECT COUNT(*) FROM $table WHERE meta_key = %s AND $column = %d\",\n\t\t$meta_key, $object_id ) ) )\n\t\treturn false;\n\n\t$_meta_value = $meta_value;\n\t$meta_value = maybe_serialize( $meta_value );\n\n\t/**\n\t * Fires immediately before meta of a specific type is added.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user).\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param int    $object_id  Object ID.\n\t * @param string $meta_key   Meta key.\n\t * @param mixed  $meta_value Meta value.\n\t */\n\tdo_action( \"add_{$meta_type}_meta\", $object_id, $meta_key, $_meta_value );\n\n\t$result = $wpdb->insert( $table, array(\n\t\t$column => $object_id,\n\t\t'meta_key' => $meta_key,\n\t\t'meta_value' => $meta_value\n\t) );\n\n\tif ( ! $result )\n\t\treturn false;\n\n\t$mid = (int) $wpdb->insert_id;\n\n\twp_cache_delete($object_id, $meta_type . '_meta');\n\n\t/**\n\t * Fires immediately after meta of a specific type is added.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user).\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int    $mid        The meta ID after successful update.\n\t * @param int    $object_id  Object ID.\n\t * @param string $meta_key   Meta key.\n\t * @param mixed  $meta_value Meta value.\n\t */\n\tdo_action( \"added_{$meta_type}_meta\", $mid, $object_id, $meta_key, $_meta_value );\n\n\treturn $mid;\n}\n\n/**\n * Update metadata for the specified object. If no value already exists for the specified object\n * ID and metadata key, the metadata will be added.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id  ID of the object metadata is for\n * @param string $meta_key   Metadata key\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param mixed  $prev_value Optional. If specified, only update existing metadata entries with\n * \t\t                     the specified value. Otherwise, update all entries.\n * @return int|bool Meta ID if the key didn't exist, true on successful update, false on failure.\n */\nfunction update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value = '') {\n\tglobal $wpdb;\n\n\tif ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) ) {\n\t\treturn false;\n\t}\n\n\t$object_id = absint( $object_id );\n\tif ( ! $object_id ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$column = sanitize_key($meta_type . '_id');\n\t$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';\n\n\t// expected_slashed ($meta_key)\n\t$raw_meta_key = $meta_key;\n\t$meta_key = wp_unslash($meta_key);\n\t$passed_value = $meta_value;\n\t$meta_value = wp_unslash($meta_value);\n\t$meta_value = sanitize_meta( $meta_key, $meta_value, $meta_type );\n\n\t/**\n\t * Filters whether to update metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user). Returning a non-null value\n\t * will effectively short-circuit the function.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param null|bool $check      Whether to allow updating metadata for the given type.\n\t * @param int       $object_id  Object ID.\n\t * @param string    $meta_key   Meta key.\n\t * @param mixed     $meta_value Meta value. Must be serializable if non-scalar.\n\t * @param mixed     $prev_value Optional. If specified, only update existing\n\t *                              metadata entries with the specified value.\n\t *                              Otherwise, update all entries.\n\t */\n\t$check = apply_filters( \"update_{$meta_type}_metadata\", null, $object_id, $meta_key, $meta_value, $prev_value );\n\tif ( null !== $check )\n\t\treturn (bool) $check;\n\n\t// Compare existing value to new value if no prev value given and the key exists only once.\n\tif ( empty($prev_value) ) {\n\t\t$old_value = get_metadata($meta_type, $object_id, $meta_key);\n\t\tif ( count($old_value) == 1 ) {\n\t\t\tif ( $old_value[0] === $meta_value )\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t$meta_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT $id_column FROM $table WHERE meta_key = %s AND $column = %d\", $meta_key, $object_id ) );\n\tif ( empty( $meta_ids ) ) {\n\t\treturn add_metadata( $meta_type, $object_id, $raw_meta_key, $passed_value );\n\t}\n\n\t$_meta_value = $meta_value;\n\t$meta_value = maybe_serialize( $meta_value );\n\n\t$data  = compact( 'meta_value' );\n\t$where = array( $column => $object_id, 'meta_key' => $meta_key );\n\n\tif ( !empty( $prev_value ) ) {\n\t\t$prev_value = maybe_serialize($prev_value);\n\t\t$where['meta_value'] = $prev_value;\n\t}\n\n\tforeach ( $meta_ids as $meta_id ) {\n\t\t/**\n\t\t * Fires immediately before updating metadata of a specific type.\n\t\t *\n\t\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t\t * object type (comment, post, or user).\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param int    $meta_id    ID of the metadata entry to update.\n\t\t * @param int    $object_id  Object ID.\n\t\t * @param string $meta_key   Meta key.\n\t\t * @param mixed  $meta_value Meta value.\n\t\t */\n\t\tdo_action( \"update_{$meta_type}_meta\", $meta_id, $object_id, $meta_key, $_meta_value );\n\n\t\tif ( 'post' == $meta_type ) {\n\t\t\t/**\n\t\t\t * Fires immediately before updating a post's metadata.\n\t\t\t *\n\t\t\t * @since 2.9.0\n\t\t\t *\n\t\t\t * @param int    $meta_id    ID of metadata entry to update.\n\t\t\t * @param int    $object_id  Object ID.\n\t\t\t * @param string $meta_key   Meta key.\n\t\t\t * @param mixed  $meta_value Meta value.\n\t\t\t */\n\t\t\tdo_action( 'update_postmeta', $meta_id, $object_id, $meta_key, $meta_value );\n\t\t}\n\t}\n\n\t$result = $wpdb->update( $table, $data, $where );\n\tif ( ! $result )\n\t\treturn false;\n\n\twp_cache_delete($object_id, $meta_type . '_meta');\n\n\tforeach ( $meta_ids as $meta_id ) {\n\t\t/**\n\t\t * Fires immediately after updating metadata of a specific type.\n\t\t *\n\t\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t\t * object type (comment, post, or user).\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param int    $meta_id    ID of updated metadata entry.\n\t\t * @param int    $object_id  Object ID.\n\t\t * @param string $meta_key   Meta key.\n\t\t * @param mixed  $meta_value Meta value.\n\t\t */\n\t\tdo_action( \"updated_{$meta_type}_meta\", $meta_id, $object_id, $meta_key, $_meta_value );\n\n\t\tif ( 'post' == $meta_type ) {\n\t\t\t/**\n\t\t\t * Fires immediately after updating a post's metadata.\n\t\t\t *\n\t\t\t * @since 2.9.0\n\t\t\t *\n\t\t\t * @param int    $meta_id    ID of updated metadata entry.\n\t\t\t * @param int    $object_id  Object ID.\n\t\t\t * @param string $meta_key   Meta key.\n\t\t\t * @param mixed  $meta_value Meta value.\n\t\t\t */\n\t\t\tdo_action( 'updated_postmeta', $meta_id, $object_id, $meta_key, $meta_value );\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Delete metadata for the specified object.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id  ID of the object metadata is for\n * @param string $meta_key   Metadata key\n * @param mixed  $meta_value Optional. Metadata value. Must be serializable if non-scalar. If specified, only delete\n *                           metadata entries with this value. Otherwise, delete all entries with the specified meta_key.\n *                           Pass `null, `false`, or an empty string to skip this check. (For backward compatibility,\n *                           it is not possible to pass an empty string to delete those entries with an empty string\n *                           for a value.)\n * @param bool   $delete_all Optional, default is false. If true, delete matching metadata entries for all objects,\n *                           ignoring the specified object_id. Otherwise, only delete matching metadata entries for\n *                           the specified object_id.\n * @return bool True on successful delete, false on failure.\n */\nfunction delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = false) {\n\tglobal $wpdb;\n\n\tif ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) && ! $delete_all ) {\n\t\treturn false;\n\t}\n\n\t$object_id = absint( $object_id );\n\tif ( ! $object_id && ! $delete_all ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$type_column = sanitize_key($meta_type . '_id');\n\t$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';\n\t// expected_slashed ($meta_key)\n\t$meta_key = wp_unslash($meta_key);\n\t$meta_value = wp_unslash($meta_value);\n\n\t/**\n\t * Filters whether to delete metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user). Returning a non-null value\n\t * will effectively short-circuit the function.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param null|bool $delete     Whether to allow metadata deletion of the given type.\n\t * @param int       $object_id  Object ID.\n\t * @param string    $meta_key   Meta key.\n\t * @param mixed     $meta_value Meta value. Must be serializable if non-scalar.\n\t * @param bool      $delete_all Whether to delete the matching metadata entries\n\t *                              for all objects, ignoring the specified $object_id.\n\t *                              Default false.\n\t */\n\t$check = apply_filters( \"delete_{$meta_type}_metadata\", null, $object_id, $meta_key, $meta_value, $delete_all );\n\tif ( null !== $check )\n\t\treturn (bool) $check;\n\n\t$_meta_value = $meta_value;\n\t$meta_value = maybe_serialize( $meta_value );\n\n\t$query = $wpdb->prepare( \"SELECT $id_column FROM $table WHERE meta_key = %s\", $meta_key );\n\n\tif ( !$delete_all )\n\t\t$query .= $wpdb->prepare(\" AND $type_column = %d\", $object_id );\n\n\tif ( '' !== $meta_value && null !== $meta_value && false !== $meta_value )\n\t\t$query .= $wpdb->prepare(\" AND meta_value = %s\", $meta_value );\n\n\t$meta_ids = $wpdb->get_col( $query );\n\tif ( !count( $meta_ids ) )\n\t\treturn false;\n\n\tif ( $delete_all ) {\n\t\t$value_clause = '';\n\t\tif ( '' !== $meta_value && null !== $meta_value && false !== $meta_value ) {\n\t\t\t$value_clause = $wpdb->prepare( \" AND meta_value = %s\", $meta_value );\n\t\t}\n\n\t\t$object_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT $type_column FROM $table WHERE meta_key = %s $value_clause\", $meta_key ) );\n\t}\n\n\t/**\n\t * Fires immediately before deleting metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user).\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param array  $meta_ids   An array of metadata entry IDs to delete.\n\t * @param int    $object_id  Object ID.\n\t * @param string $meta_key   Meta key.\n\t * @param mixed  $meta_value Meta value.\n\t */\n\tdo_action( \"delete_{$meta_type}_meta\", $meta_ids, $object_id, $meta_key, $_meta_value );\n\n\t// Old-style action.\n\tif ( 'post' == $meta_type ) {\n\t\t/**\n\t\t * Fires immediately before deleting metadata for a post.\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param array $meta_ids An array of post metadata entry IDs to delete.\n\t\t */\n\t\tdo_action( 'delete_postmeta', $meta_ids );\n\t}\n\n\t$query = \"DELETE FROM $table WHERE $id_column IN( \" . implode( ',', $meta_ids ) . \" )\";\n\n\t$count = $wpdb->query($query);\n\n\tif ( !$count )\n\t\treturn false;\n\n\tif ( $delete_all ) {\n\t\tforeach ( (array) $object_ids as $o_id ) {\n\t\t\twp_cache_delete($o_id, $meta_type . '_meta');\n\t\t}\n\t} else {\n\t\twp_cache_delete($object_id, $meta_type . '_meta');\n\t}\n\n\t/**\n\t * Fires immediately after deleting metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook name, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user).\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param array  $meta_ids   An array of deleted metadata entry IDs.\n\t * @param int    $object_id  Object ID.\n\t * @param string $meta_key   Meta key.\n\t * @param mixed  $meta_value Meta value.\n\t */\n\tdo_action( \"deleted_{$meta_type}_meta\", $meta_ids, $object_id, $meta_key, $_meta_value );\n\n\t// Old-style action.\n\tif ( 'post' == $meta_type ) {\n\t\t/**\n\t\t * Fires immediately after deleting metadata for a post.\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param array $meta_ids An array of deleted post metadata entry IDs.\n\t\t */\n\t\tdo_action( 'deleted_postmeta', $meta_ids );\n\t}\n\n\treturn true;\n}\n\n/**\n * Retrieve metadata for the specified object.\n *\n * @since 2.9.0\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id ID of the object metadata is for\n * @param string $meta_key  Optional. Metadata key. If not specified, retrieve all metadata for\n * \t\t                    the specified object.\n * @param bool   $single    Optional, default is false.\n *                          If true, return only the first value of the specified meta_key.\n *                          This parameter has no effect if meta_key is not specified.\n * @return mixed Single metadata value, or array of values\n */\nfunction get_metadata($meta_type, $object_id, $meta_key = '', $single = false) {\n\tif ( ! $meta_type || ! is_numeric( $object_id ) ) {\n\t\treturn false;\n\t}\n\n\t$object_id = absint( $object_id );\n\tif ( ! $object_id ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Filters whether to retrieve metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user). Returning a non-null value\n\t * will effectively short-circuit the function.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param null|array|string $value     The value get_metadata() should return - a single metadata value,\n\t *                                     or an array of values.\n\t * @param int               $object_id Object ID.\n\t * @param string            $meta_key  Meta key.\n\t * @param bool              $single    Whether to return only the first value of the specified $meta_key.\n\t */\n\t$check = apply_filters( \"get_{$meta_type}_metadata\", null, $object_id, $meta_key, $single );\n\tif ( null !== $check ) {\n\t\tif ( $single && is_array( $check ) )\n\t\t\treturn $check[0];\n\t\telse\n\t\t\treturn $check;\n\t}\n\n\t$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');\n\n\tif ( !$meta_cache ) {\n\t\t$meta_cache = update_meta_cache( $meta_type, array( $object_id ) );\n\t\t$meta_cache = $meta_cache[$object_id];\n\t}\n\n\tif ( ! $meta_key ) {\n\t\treturn $meta_cache;\n\t}\n\n\tif ( isset($meta_cache[$meta_key]) ) {\n\t\tif ( $single )\n\t\t\treturn maybe_unserialize( $meta_cache[$meta_key][0] );\n\t\telse\n\t\t\treturn array_map('maybe_unserialize', $meta_cache[$meta_key]);\n\t}\n\n\tif ($single)\n\t\treturn '';\n\telse\n\t\treturn array();\n}\n\n/**\n * Determine if a meta key is set for a given object\n *\n * @since 3.3.0\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id ID of the object metadata is for\n * @param string $meta_key  Metadata key.\n * @return bool True of the key is set, false if not.\n */\nfunction metadata_exists( $meta_type, $object_id, $meta_key ) {\n\tif ( ! $meta_type || ! is_numeric( $object_id ) ) {\n\t\treturn false;\n\t}\n\n\t$object_id = absint( $object_id );\n\tif ( ! $object_id ) {\n\t\treturn false;\n\t}\n\n\t/** This filter is documented in wp-includes/meta.php */\n\t$check = apply_filters( \"get_{$meta_type}_metadata\", null, $object_id, $meta_key, true );\n\tif ( null !== $check )\n\t\treturn (bool) $check;\n\n\t$meta_cache = wp_cache_get( $object_id, $meta_type . '_meta' );\n\n\tif ( !$meta_cache ) {\n\t\t$meta_cache = update_meta_cache( $meta_type, array( $object_id ) );\n\t\t$meta_cache = $meta_cache[$object_id];\n\t}\n\n\tif ( isset( $meta_cache[ $meta_key ] ) )\n\t\treturn true;\n\n\treturn false;\n}\n\n/**\n * Get meta data by meta ID\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, term, or user).\n * @param int    $meta_id   ID for a specific meta row\n * @return object|false Meta object or false.\n */\nfunction get_metadata_by_mid( $meta_type, $meta_id ) {\n\tglobal $wpdb;\n\n\tif ( ! $meta_type || ! is_numeric( $meta_id ) || floor( $meta_id ) != $meta_id ) {\n\t\treturn false;\n\t}\n\n\t$meta_id = intval( $meta_id );\n\tif ( $meta_id <= 0 ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$id_column = ( 'user' == $meta_type ) ? 'umeta_id' : 'meta_id';\n\n\t$meta = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM $table WHERE $id_column = %d\", $meta_id ) );\n\n\tif ( empty( $meta ) )\n\t\treturn false;\n\n\tif ( isset( $meta->meta_value ) )\n\t\t$meta->meta_value = maybe_unserialize( $meta->meta_value );\n\n\treturn $meta;\n}\n\n/**\n * Update meta data by meta ID\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $meta_id    ID for a specific meta row\n * @param string $meta_value Metadata value\n * @param string $meta_key   Optional, you can provide a meta key to update it\n * @return bool True on successful update, false on failure.\n */\nfunction update_metadata_by_mid( $meta_type, $meta_id, $meta_value, $meta_key = false ) {\n\tglobal $wpdb;\n\n\t// Make sure everything is valid.\n\tif ( ! $meta_type || ! is_numeric( $meta_id ) || floor( $meta_id ) != $meta_id ) {\n\t\treturn false;\n\t}\n\n\t$meta_id = intval( $meta_id );\n\tif ( $meta_id <= 0 ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$column = sanitize_key($meta_type . '_id');\n\t$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';\n\n\t// Fetch the meta and go on if it's found.\n\tif ( $meta = get_metadata_by_mid( $meta_type, $meta_id ) ) {\n\t\t$original_key = $meta->meta_key;\n\t\t$object_id = $meta->{$column};\n\n\t\t// If a new meta_key (last parameter) was specified, change the meta key,\n\t\t// otherwise use the original key in the update statement.\n\t\tif ( false === $meta_key ) {\n\t\t\t$meta_key = $original_key;\n\t\t} elseif ( ! is_string( $meta_key ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Sanitize the meta\n\t\t$_meta_value = $meta_value;\n\t\t$meta_value = sanitize_meta( $meta_key, $meta_value, $meta_type );\n\t\t$meta_value = maybe_serialize( $meta_value );\n\n\t\t// Format the data query arguments.\n\t\t$data = array(\n\t\t\t'meta_key' => $meta_key,\n\t\t\t'meta_value' => $meta_value\n\t\t);\n\n\t\t// Format the where query arguments.\n\t\t$where = array();\n\t\t$where[$id_column] = $meta_id;\n\n\t\t/** This action is documented in wp-includes/meta.php */\n\t\tdo_action( \"update_{$meta_type}_meta\", $meta_id, $object_id, $meta_key, $_meta_value );\n\n\t\tif ( 'post' == $meta_type ) {\n\t\t\t/** This action is documented in wp-includes/meta.php */\n\t\t\tdo_action( 'update_postmeta', $meta_id, $object_id, $meta_key, $meta_value );\n\t\t}\n\n\t\t// Run the update query, all fields in $data are %s, $where is a %d.\n\t\t$result = $wpdb->update( $table, $data, $where, '%s', '%d' );\n\t\tif ( ! $result )\n\t\t\treturn false;\n\n\t\t// Clear the caches.\n\t\twp_cache_delete($object_id, $meta_type . '_meta');\n\n\t\t/** This action is documented in wp-includes/meta.php */\n\t\tdo_action( \"updated_{$meta_type}_meta\", $meta_id, $object_id, $meta_key, $_meta_value );\n\n\t\tif ( 'post' == $meta_type ) {\n\t\t\t/** This action is documented in wp-includes/meta.php */\n\t\t\tdo_action( 'updated_postmeta', $meta_id, $object_id, $meta_key, $meta_value );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// And if the meta was not found.\n\treturn false;\n}\n\n/**\n * Delete meta data by meta ID\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, term, or user).\n * @param int    $meta_id   ID for a specific meta row\n * @return bool True on successful delete, false on failure.\n */\nfunction delete_metadata_by_mid( $meta_type, $meta_id ) {\n\tglobal $wpdb;\n\n\t// Make sure everything is valid.\n\tif ( ! $meta_type || ! is_numeric( $meta_id ) || floor( $meta_id ) != $meta_id ) {\n\t\treturn false;\n\t}\n\n\t$meta_id = intval( $meta_id );\n\tif ( $meta_id <= 0 ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t// object and id columns\n\t$column = sanitize_key($meta_type . '_id');\n\t$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';\n\n\t// Fetch the meta and go on if it's found.\n\tif ( $meta = get_metadata_by_mid( $meta_type, $meta_id ) ) {\n\t\t$object_id = $meta->{$column};\n\n\t\t/** This action is documented in wp-includes/meta.php */\n\t\tdo_action( \"delete_{$meta_type}_meta\", (array) $meta_id, $object_id, $meta->meta_key, $meta->meta_value );\n\n\t\t// Old-style action.\n\t\tif ( 'post' == $meta_type || 'comment' == $meta_type ) {\n\t\t\t/**\n\t\t\t * Fires immediately before deleting post or comment metadata of a specific type.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t\t\t * object type (post or comment).\n\t\t\t *\n\t\t\t * @since 3.4.0\n\t\t\t *\n\t\t\t * @param int $meta_id ID of the metadata entry to delete.\n\t\t\t */\n\t\t\tdo_action( \"delete_{$meta_type}meta\", $meta_id );\n\t\t}\n\n\t\t// Run the query, will return true if deleted, false otherwise\n\t\t$result = (bool) $wpdb->delete( $table, array( $id_column => $meta_id ) );\n\n\t\t// Clear the caches.\n\t\twp_cache_delete($object_id, $meta_type . '_meta');\n\n\t\t/** This action is documented in wp-includes/meta.php */\n\t\tdo_action( \"deleted_{$meta_type}_meta\", (array) $meta_id, $object_id, $meta->meta_key, $meta->meta_value );\n\n\t\t// Old-style action.\n\t\tif ( 'post' == $meta_type || 'comment' == $meta_type ) {\n\t\t\t/**\n\t\t\t * Fires immediately after deleting post or comment metadata of a specific type.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t\t\t * object type (post or comment).\n\t\t\t *\n\t\t\t * @since 3.4.0\n\t\t\t *\n\t\t\t * @param int $meta_ids Deleted metadata entry ID.\n\t\t\t */\n\t\t\tdo_action( \"deleted_{$meta_type}meta\", $meta_id );\n\t\t}\n\n\t\treturn $result;\n\n\t}\n\n\t// Meta id was not found.\n\treturn false;\n}\n\n/**\n * Update the metadata cache for the specified objects.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string    $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int|array $object_ids Array or comma delimited list of object IDs to update cache for\n * @return array|false Metadata cache for the specified objects, or false on failure.\n */\nfunction update_meta_cache($meta_type, $object_ids) {\n\tglobal $wpdb;\n\n\tif ( ! $meta_type || ! $object_ids ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$column = sanitize_key($meta_type . '_id');\n\n\tif ( !is_array($object_ids) ) {\n\t\t$object_ids = preg_replace('|[^0-9,]|', '', $object_ids);\n\t\t$object_ids = explode(',', $object_ids);\n\t}\n\n\t$object_ids = array_map('intval', $object_ids);\n\n\t$cache_key = $meta_type . '_meta';\n\t$ids = array();\n\t$cache = array();\n\tforeach ( $object_ids as $id ) {\n\t\t$cached_object = wp_cache_get( $id, $cache_key );\n\t\tif ( false === $cached_object )\n\t\t\t$ids[] = $id;\n\t\telse\n\t\t\t$cache[$id] = $cached_object;\n\t}\n\n\tif ( empty( $ids ) )\n\t\treturn $cache;\n\n\t// Get meta info\n\t$id_list = join( ',', $ids );\n\t$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';\n\t$meta_list = $wpdb->get_results( \"SELECT $column, meta_key, meta_value FROM $table WHERE $column IN ($id_list) ORDER BY $id_column ASC\", ARRAY_A );\n\n\tif ( !empty($meta_list) ) {\n\t\tforeach ( $meta_list as $metarow) {\n\t\t\t$mpid = intval($metarow[$column]);\n\t\t\t$mkey = $metarow['meta_key'];\n\t\t\t$mval = $metarow['meta_value'];\n\n\t\t\t// Force subkeys to be array type:\n\t\t\tif ( !isset($cache[$mpid]) || !is_array($cache[$mpid]) )\n\t\t\t\t$cache[$mpid] = array();\n\t\t\tif ( !isset($cache[$mpid][$mkey]) || !is_array($cache[$mpid][$mkey]) )\n\t\t\t\t$cache[$mpid][$mkey] = array();\n\n\t\t\t// Add a value to the current pid/key:\n\t\t\t$cache[$mpid][$mkey][] = $mval;\n\t\t}\n\t}\n\n\tforeach ( $ids as $id ) {\n\t\tif ( ! isset($cache[$id]) )\n\t\t\t$cache[$id] = array();\n\t\twp_cache_add( $id, $cache[$id], $cache_key );\n\t}\n\n\treturn $cache;\n}\n\n/**\n * Retrieves the queue for lazy-loading metadata.\n *\n * @since 4.5.0\n *\n * @return WP_Metadata_Lazyloader $lazyloader Metadata lazyloader queue.\n */\nfunction wp_metadata_lazyloader() {\n\tstatic $wp_metadata_lazyloader;\n\n\tif ( null === $wp_metadata_lazyloader ) {\n\t\t$wp_metadata_lazyloader = new WP_Metadata_Lazyloader();\n\t}\n\n\treturn $wp_metadata_lazyloader;\n}\n\n/**\n * Given a meta query, generates SQL clauses to be appended to a main query.\n *\n * @since 3.2.0\n *\n * @see WP_Meta_Query\n *\n * @param array $meta_query         A meta query.\n * @param string $type              Type of meta.\n * @param string $primary_table     Primary database table name.\n * @param string $primary_id_column Primary ID column name.\n * @param object $context           Optional. The main query object\n * @return array Associative array of `JOIN` and `WHERE` SQL.\n */\nfunction get_meta_sql( $meta_query, $type, $primary_table, $primary_id_column, $context = null ) {\n\t$meta_query_obj = new WP_Meta_Query( $meta_query );\n\treturn $meta_query_obj->get_sql( $type, $primary_table, $primary_id_column, $context );\n}\n\n/**\n * Retrieve the name of the metadata table for the specified object type.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $type Type of object to get metadata table for (e.g., comment, post, or user)\n * @return string|false Metadata table name, or false if no metadata table exists\n */\nfunction _get_meta_table($type) {\n\tglobal $wpdb;\n\n\t$table_name = $type . 'meta';\n\n\tif ( empty($wpdb->$table_name) )\n\t\treturn false;\n\n\treturn $wpdb->$table_name;\n}\n\n/**\n * Determine whether a meta key is protected.\n *\n * @since 3.1.3\n *\n * @param string      $meta_key Meta key\n * @param string|null $meta_type\n * @return bool True if the key is protected, false otherwise.\n */\nfunction is_protected_meta( $meta_key, $meta_type = null ) {\n\t$protected = ( '_' == $meta_key[0] );\n\n\t/**\n\t * Filters whether a meta key is protected.\n\t *\n\t * @since 3.2.0\n\t *\n\t * @param bool   $protected Whether the key is protected. Default false.\n\t * @param string $meta_key  Meta key.\n\t * @param string $meta_type Meta type.\n\t */\n\treturn apply_filters( 'is_protected_meta', $protected, $meta_key, $meta_type );\n}\n\n/**\n * Sanitize meta value.\n *\n * @since 3.1.3\n *\n * @param string $meta_key       Meta key.\n * @param mixed  $meta_value     Meta value to sanitize.\n * @param string $object_type    Type of object the meta is registered to.\n *\n * @return mixed Sanitized $meta_value.\n */\nfunction sanitize_meta( $meta_key, $meta_value, $object_type ) {\n\t/**\n\t * Filters the sanitization of a specific meta key of a specific meta type.\n\t *\n\t * The dynamic portions of the hook name, `$meta_type`, and `$meta_key`,\n\t * refer to the metadata object type (comment, post, or user) and the meta\n\t * key value, respectively.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param mixed  $meta_value      Meta value to sanitize.\n\t * @param string $meta_key        Meta key.\n\t * @param string $object_type     Object type.\n\t */\n\treturn apply_filters( \"sanitize_{$object_type}_meta_{$meta_key}\", $meta_value, $meta_key, $object_type );\n}\n\n/**\n * Registers a meta key.\n *\n * @since 3.3.0\n * @since 4.6.0 {@link https://core.trac.wordpress.org/ticket/35658 Modified\n *              to support an array of data to attach to registered meta keys}. Previous arguments for\n *              `$sanitize_callback` and `$auth_callback` have been folded into this array.\n *\n * @param string $object_type    Type of object this meta is registered to.\n * @param string $meta_key       Meta key to register.\n * @param array  $args {\n *     Data used to describe the meta key when registered.\n *\n *     @type string $type              The type of data associated with this meta key.\n *                                     Valid values are 'string', 'boolean', 'integer', and 'number'.\n *     @type string $description       A description of the data attached to this meta key.\n *     @type bool   $single            Whether the meta key has one value per object, or an array of values per object.\n *     @type string $sanitize_callback A function or method to call when sanitizing `$meta_key` data.\n *     @type string $auth_callback     Optional. A function or method to call when performing edit_post_meta, add_post_meta, and delete_post_meta capability checks.\n *     @type bool   $show_in_rest      Whether data associated with this meta key can be considered public.\n * }\n * @param string|array $deprecated Deprecated. Use `$args` instead.\n *\n * @return bool True if the meta key was successfully registered in the global array, false if not.\n *                       Registering a meta key with distinct sanitize and auth callbacks will fire those\n *                       callbacks, but will not add to the global registry.\n */\nfunction register_meta( $object_type, $meta_key, $args, $deprecated = null ) {\n\tglobal $wp_meta_keys;\n\n\tif ( ! is_array( $wp_meta_keys ) ) {\n\t\t$wp_meta_keys = array();\n\t}\n\n\t$defaults = array(\n\t\t'type'              => 'string',\n\t\t'description'       => '',\n\t\t'single'            => false,\n\t\t'sanitize_callback' => null,\n\t\t'auth_callback'     => null,\n\t\t'show_in_rest'      => false,\n\t);\n\n\t// There used to be individual args for sanitize and auth callbacks\n\t$has_old_sanitize_cb = false;\n\t$has_old_auth_cb = false;\n\n\tif ( is_callable( $args ) ) {\n\t\t$args = array(\n\t\t\t'sanitize_callback' => $args,\n\t\t);\n\n\t\t$has_old_sanitize_cb = true;\n\t} else {\n\t\t$args = (array) $args;\n\t}\n\n\tif ( is_callable( $deprecated ) ) {\n\t\t$args['auth_callback'] = $deprecated;\n\t\t$has_old_auth_cb = true;\n\t}\n\n\t/**\n\t * Filters the registration arguments when registering meta.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param array  $args        Array of meta registration arguments.\n\t * @param array  $defaults    Array of default arguments.\n\t * @param string $object_type Object type.\n\t * @param string $meta_key    Meta key.\n\t */\n\t$args = apply_filters( 'register_meta_args', $args, $defaults, $object_type, $meta_key );\n\t$args = wp_parse_args( $args, $defaults );\n\n\t// If `auth_callback` is not provided, fall back to `is_protected_meta()`.\n\tif ( empty( $args['auth_callback'] ) ) {\n\t\tif ( is_protected_meta( $meta_key, $object_type ) ) {\n\t\t\t$args['auth_callback'] = '__return_false';\n\t\t} else {\n\t\t\t$args['auth_callback'] = '__return_true';\n\t\t}\n\t}\n\n\t// Back-compat: old sanitize and auth callbacks are applied to all of an object type.\n\tif ( is_callable( $args['sanitize_callback'] ) ) {\n\t\tadd_filter( \"sanitize_{$object_type}_meta_{$meta_key}\", $args['sanitize_callback'], 10, 3 );\n\t}\n\n\tif ( is_callable( $args['auth_callback'] ) ) {\n\t\tadd_filter( \"auth_{$object_type}_meta_{$meta_key}\", $args['auth_callback'], 10, 6 );\n\t}\n\n\t// Global registry only contains meta keys registered with the array of arguments added in 4.6.0.\n\tif ( ! $has_old_auth_cb && ! $has_old_sanitize_cb ) {\n\t\t$wp_meta_keys[ $object_type ][ $meta_key ] = $args;\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks if a meta key is registered.\n *\n * @since 4.6.0\n *\n * @param string $object_type    The type of object.\n * @param string $meta_key       The meta key.\n *\n * @return bool True if the meta key is registered to the object type. False if not.\n */\nfunction registered_meta_key_exists( $object_type, $meta_key ) {\n\tglobal $wp_meta_keys;\n\n\tif ( ! is_array( $wp_meta_keys ) ) {\n\t\treturn false;\n\t}\n\n\tif ( ! isset( $wp_meta_keys[ $object_type ] ) ) {\n\t\treturn false;\n\t}\n\n\tif ( isset( $wp_meta_keys[ $object_type ][ $meta_key ] ) ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Unregisters a meta key from the list of registered keys.\n *\n * @since 4.6.0\n *\n * @param string $object_type The type of object.\n * @param string $meta_key    The meta key.\n * @return bool True if successful. False if the meta key was not registered.\n */\nfunction unregister_meta_key( $object_type, $meta_key ) {\n\tglobal $wp_meta_keys;\n\n\tif ( ! registered_meta_key_exists( $object_type, $meta_key ) ) {\n\t\treturn false;\n\t}\n\n\t$args = $wp_meta_keys[ $object_type ][ $meta_key ];\n\n\tif ( isset( $args['sanitize_callback'] ) && is_callable( $args['sanitize_callback'] ) ) {\n\t\tremove_filter( \"sanitize_{$object_type}_meta_{$meta_key}\", $args['sanitize_callback'] );\n\t}\n\n\tif ( isset( $args['auth_callback'] ) && is_callable( $args['auth_callback'] ) ) {\n\t\tremove_filter( \"auth_{$object_type}_meta_{$meta_key}\", $args['auth_callback'] );\n\t}\n\n\tunset( $wp_meta_keys[ $object_type ][ $meta_key ] );\n\n\t// Do some clean up\n\tif ( empty( $wp_meta_keys[ $object_type ] ) ) {\n\t\tunset( $wp_meta_keys[ $object_type ] );\n\t}\n\n\treturn true;\n}\n\n/**\n * Retrieves a list of registered meta keys for an object type.\n *\n * @since 4.6.0\n *\n * @param string $object_type The type of object. Post, comment, user, term.\n * @return array List of registered meta keys.\n */\nfunction get_registered_meta_keys( $object_type ) {\n\tglobal $wp_meta_keys;\n\n\tif ( ! is_array( $wp_meta_keys ) || ! isset( $wp_meta_keys[ $object_type ] ) ) {\n\t\treturn array();\n\t}\n\n\treturn $wp_meta_keys[ $object_type ];\n}\n\n/**\n * Retrieves registered metadata for a specified object.\n *\n * @since 4.6.0\n *\n * @param string $object_type Type of object to request metadata for. (e.g. comment, post, term, user)\n * @param int    $object_id   ID of the object the metadata is for.\n * @param string $meta_key    Optional. Registered metadata key. If not specified, retrieve all registered\n *                            metadata for the specified object.\n * @return mixed A single value or array of values for a key if specified. An array of all registered keys\n *               and values for an object ID if not.\n */\nfunction get_registered_metadata( $object_type, $object_id, $meta_key = '' ) {\n\tif ( ! empty( $meta_key ) ) {\n\t\tif ( ! registered_meta_key_exists( $object_type, $meta_key ) ) {\n\t\t\treturn false;\n\t\t}\n\t\t$meta_keys = get_registered_meta_keys( $object_type );\n\t\t$meta_key_data = $meta_keys[ $meta_key ];\n\n\t\t$data = get_metadata( $object_type, $object_id, $meta_key, $meta_key_data['single'] );\n\n\t\treturn $data;\n\t}\n\n\t$data = get_metadata( $object_type, $object_id );\n\n\t$meta_keys = get_registered_meta_keys( $object_type );\n\t$registered_data = array();\n\n\t// Someday, array_filter()\n\tforeach ( $meta_keys as $k => $v ) {\n\t\tif ( isset( $data[ $k ] ) ) {\n\t\t\t$registered_data[ $k ] = $data[ $k ];\n\t\t}\n\t}\n\n\treturn $registered_data;\n}\n\n/**\n * Filter out `register_meta()` args based on a whitelist.\n * `register_meta()` args may change over time, so requiring the whitelist\n * to be explicitly turned off is a warranty seal of sorts.\n *\n * @access private\n * @since  4.6.0\n *\n * @param  array $args         Arguments from `register_meta()`.\n * @param  array $default_args Default arguments for `register_meta()`.\n *\n * @return array Filtered arguments.\n */\nfunction _wp_register_meta_args_whitelist( $args, $default_args ) {\n\t$whitelist = array_keys( $default_args );\n\n\t// In an anonymous function world, this would be better as an array_filter()\n\tforeach ( $args as $key => $value ) {\n\t\tif ( ! in_array( $key, $whitelist ) ) {\n\t\t\tunset( $args[ $key ] );\n\t\t}\n\t}\n\n\treturn $args;\n}\n", "<?php\n/**\n * Core Post API\n *\n * @package WordPress\n * @subpackage Post\n */\n\n//\n// Post Type Registration\n//\n\n/**\n * Creates the initial post types when 'init' action is fired.\n *\n * See {@see 'init'}.\n *\n * @since 2.9.0\n */\nfunction create_initial_post_types() {\n\tregister_post_type( 'post', array(\n\t\t'labels' => array(\n\t\t\t'name_admin_bar' => _x( 'Post', 'add new from admin bar' ),\n\t\t),\n\t\t'public'  => true,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */\n\t\t'capability_type' => 'post',\n\t\t'map_meta_cap' => true,\n\t\t'menu_position' => 5,\n\t\t'hierarchical' => false,\n\t\t'rewrite' => false,\n\t\t'query_var' => false,\n\t\t'delete_with_user' => true,\n\t\t'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'trackbacks', 'custom-fields', 'comments', 'revisions', 'post-formats' ),\n\t\t'show_in_rest' => true,\n\t\t'rest_base' => 'posts',\n\t\t'rest_controller_class' => 'WP_REST_Posts_Controller',\n\t) );\n\n\tregister_post_type( 'page', array(\n\t\t'labels' => array(\n\t\t\t'name_admin_bar' => _x( 'Page', 'add new from admin bar' ),\n\t\t),\n\t\t'public' => true,\n\t\t'publicly_queryable' => false,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */\n\t\t'capability_type' => 'page',\n\t\t'map_meta_cap' => true,\n\t\t'menu_position' => 20,\n\t\t'hierarchical' => true,\n\t\t'rewrite' => false,\n\t\t'query_var' => false,\n\t\t'delete_with_user' => true,\n\t\t'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'page-attributes', 'custom-fields', 'comments', 'revisions' ),\n\t\t'show_in_rest' => true,\n\t\t'rest_base' => 'pages',\n\t\t'rest_controller_class' => 'WP_REST_Posts_Controller',\n\t) );\n\n\tregister_post_type( 'attachment', array(\n\t\t'labels' => array(\n\t\t\t'name' => _x('Media', 'post type general name'),\n\t\t\t'name_admin_bar' => _x( 'Media', 'add new from admin bar' ),\n\t\t\t'add_new' => _x( 'Add New', 'add new media' ),\n \t\t\t'edit_item' => __( 'Edit Media' ),\n \t\t\t'view_item' => __( 'View Attachment Page' ),\n\t\t\t'attributes' => __( 'Attachment Attributes' ),\n\t\t),\n\t\t'public' => true,\n\t\t'show_ui' => true,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */\n\t\t'capability_type' => 'post',\n\t\t'capabilities' => array(\n\t\t\t'create_posts' => 'upload_files',\n\t\t),\n\t\t'map_meta_cap' => true,\n\t\t'hierarchical' => false,\n\t\t'rewrite' => false,\n\t\t'query_var' => false,\n\t\t'show_in_nav_menus' => false,\n\t\t'delete_with_user' => true,\n\t\t'supports' => array( 'title', 'author', 'comments' ),\n\t\t'show_in_rest' => true,\n\t\t'rest_base' => 'media',\n\t\t'rest_controller_class' => 'WP_REST_Attachments_Controller',\n\t) );\n\tadd_post_type_support( 'attachment:audio', 'thumbnail' );\n\tadd_post_type_support( 'attachment:video', 'thumbnail' );\n\n\tregister_post_type( 'revision', array(\n\t\t'labels' => array(\n\t\t\t'name' => __( 'Revisions' ),\n\t\t\t'singular_name' => __( 'Revision' ),\n\t\t),\n\t\t'public' => false,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'_edit_link' => 'revision.php?revision=%d', /* internal use only. don't use this when registering your own post type. */\n\t\t'capability_type' => 'post',\n\t\t'map_meta_cap' => true,\n\t\t'hierarchical' => false,\n\t\t'rewrite' => false,\n\t\t'query_var' => false,\n\t\t'can_export' => false,\n\t\t'delete_with_user' => true,\n\t\t'supports' => array( 'author' ),\n\t) );\n\n\tregister_post_type( 'nav_menu_item', array(\n\t\t'labels' => array(\n\t\t\t'name' => __( 'Navigation Menu Items' ),\n\t\t\t'singular_name' => __( 'Navigation Menu Item' ),\n\t\t),\n\t\t'public' => false,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'hierarchical' => false,\n\t\t'rewrite' => false,\n\t\t'delete_with_user' => false,\n\t\t'query_var' => false,\n\t) );\n\n\tregister_post_type( 'custom_css', array(\n\t\t'labels' => array(\n\t\t\t'name'          => __( 'Custom CSS' ),\n\t\t\t'singular_name' => __( 'Custom CSS' ),\n\t\t),\n\t\t'public'           => false,\n\t\t'hierarchical'     => false,\n\t\t'rewrite'          => false,\n\t\t'query_var'        => false,\n\t\t'delete_with_user' => false,\n\t\t'can_export'       => true,\n\t\t'_builtin'         => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'supports'         => array( 'title', 'revisions' ),\n\t\t'capabilities'     => array(\n\t\t\t'delete_posts'           => 'edit_theme_options',\n\t\t\t'delete_post'            => 'edit_theme_options',\n\t\t\t'delete_published_posts' => 'edit_theme_options',\n\t\t\t'delete_private_posts'   => 'edit_theme_options',\n\t\t\t'delete_others_posts'    => 'edit_theme_options',\n\t\t\t'edit_post'              => 'edit_css',\n\t\t\t'edit_posts'             => 'edit_css',\n\t\t\t'edit_others_posts'      => 'edit_css',\n\t\t\t'edit_published_posts'   => 'edit_css',\n\t\t\t'read_post'              => 'read',\n\t\t\t'read_private_posts'     => 'read',\n\t\t\t'publish_posts'          => 'edit_theme_options',\n\t\t),\n\t) );\n\n\tregister_post_type( 'customize_changeset', array(\n\t\t'labels' => array(\n\t\t\t'name'               => _x( 'Changesets', 'post type general name' ),\n\t\t\t'singular_name'      => _x( 'Changeset', 'post type singular name' ),\n\t\t\t'menu_name'          => _x( 'Changesets', 'admin menu' ),\n\t\t\t'name_admin_bar'     => _x( 'Changeset', 'add new on admin bar' ),\n\t\t\t'add_new'            => _x( 'Add New', 'Customize Changeset' ),\n\t\t\t'add_new_item'       => __( 'Add New Changeset' ),\n\t\t\t'new_item'           => __( 'New Changeset' ),\n\t\t\t'edit_item'          => __( 'Edit Changeset' ),\n\t\t\t'view_item'          => __( 'View Changeset' ),\n\t\t\t'all_items'          => __( 'All Changesets' ),\n\t\t\t'search_items'       => __( 'Search Changesets' ),\n\t\t\t'not_found'          => __( 'No changesets found.' ),\n\t\t\t'not_found_in_trash' => __( 'No changesets found in Trash.' ),\n\t\t),\n\t\t'public' => false,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'map_meta_cap' => true,\n\t\t'hierarchical' => false,\n\t\t'rewrite' => false,\n\t\t'query_var' => false,\n\t\t'can_export' => false,\n\t\t'delete_with_user' => false,\n\t\t'supports' => array( 'title', 'author' ),\n\t\t'capability_type' => 'customize_changeset',\n\t\t'capabilities' => array(\n\t\t\t'create_posts' => 'customize',\n\t\t\t'delete_others_posts' => 'customize',\n\t\t\t'delete_post' => 'customize',\n\t\t\t'delete_posts' => 'customize',\n\t\t\t'delete_private_posts' => 'customize',\n\t\t\t'delete_published_posts' => 'customize',\n\t\t\t'edit_others_posts' => 'customize',\n\t\t\t'edit_post' => 'customize',\n\t\t\t'edit_posts' => 'customize',\n\t\t\t'edit_private_posts' => 'customize',\n\t\t\t'edit_published_posts' => 'do_not_allow',\n\t\t\t'publish_posts' => 'customize',\n\t\t\t'read' => 'read',\n\t\t\t'read_post' => 'customize',\n\t\t\t'read_private_posts' => 'customize',\n\t\t),\n\t) );\n\n\tregister_post_type( 'oembed_cache', array(\n\t\t'labels' => array(\n\t\t\t'name'          => __( 'oEmbed Responses' ),\n\t\t\t'singular_name' => __( 'oEmbed Response' ),\n\t\t),\n\t\t'public'           => false,\n\t\t'hierarchical'     => false,\n\t\t'rewrite'          => false,\n\t\t'query_var'        => false,\n\t\t'delete_with_user' => false,\n\t\t'can_export'       => false,\n\t\t'_builtin'         => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'supports'         => array(),\n\t) );\n\n\tregister_post_status( 'publish', array(\n\t\t'label'       => _x( 'Published', 'post status' ),\n\t\t'public'      => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop( 'Published <span class=\"count\">(%s)</span>', 'Published <span class=\"count\">(%s)</span>' ),\n\t) );\n\n\tregister_post_status( 'future', array(\n\t\t'label'       => _x( 'Scheduled', 'post status' ),\n\t\t'protected'   => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop('Scheduled <span class=\"count\">(%s)</span>', 'Scheduled <span class=\"count\">(%s)</span>' ),\n\t) );\n\n\tregister_post_status( 'draft', array(\n\t\t'label'       => _x( 'Draft', 'post status' ),\n\t\t'protected'   => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop( 'Draft <span class=\"count\">(%s)</span>', 'Drafts <span class=\"count\">(%s)</span>' ),\n\t) );\n\n\tregister_post_status( 'pending', array(\n\t\t'label'       => _x( 'Pending', 'post status' ),\n\t\t'protected'   => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop( 'Pending <span class=\"count\">(%s)</span>', 'Pending <span class=\"count\">(%s)</span>' ),\n\t) );\n\n\tregister_post_status( 'private', array(\n\t\t'label'       => _x( 'Private', 'post status' ),\n\t\t'private'     => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop( 'Private <span class=\"count\">(%s)</span>', 'Private <span class=\"count\">(%s)</span>' ),\n\t) );\n\n\tregister_post_status( 'trash', array(\n\t\t'label'       => _x( 'Trash', 'post status' ),\n\t\t'internal'    => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop( 'Trash <span class=\"count\">(%s)</span>', 'Trash <span class=\"count\">(%s)</span>' ),\n\t\t'show_in_admin_status_list' => true,\n\t) );\n\n\tregister_post_status( 'auto-draft', array(\n\t\t'label'    => 'auto-draft',\n\t\t'internal' => true,\n\t\t'_builtin' => true, /* internal use only. */\n\t) );\n\n\tregister_post_status( 'inherit', array(\n\t\t'label'    => 'inherit',\n\t\t'internal' => true,\n\t\t'_builtin' => true, /* internal use only. */\n\t\t'exclude_from_search' => false,\n\t) );\n}\n\n/**\n * Retrieve attached file path based on attachment ID.\n *\n * By default the path will go through the 'get_attached_file' filter, but\n * passing a true to the $unfiltered argument of get_attached_file() will\n * return the file path unfiltered.\n *\n * The function works by getting the single post meta name, named\n * '_wp_attached_file' and returning it. This is a convenience function to\n * prevent looking up the meta name and provide a mechanism for sending the\n * attached filename through a filter.\n *\n * @since 2.0.0\n *\n * @param int  $attachment_id Attachment ID.\n * @param bool $unfiltered    Optional. Whether to apply filters. Default false.\n * @return string|false The file path to where the attached file should be, false otherwise.\n */\nfunction get_attached_file( $attachment_id, $unfiltered = false ) {\n\t$file = get_post_meta( $attachment_id, '_wp_attached_file', true );\n\n\t// If the file is relative, prepend upload dir.\n\tif ( $file && 0 !== strpos( $file, '/' ) && ! preg_match( '|^.:\\\\\\|', $file ) && ( ( $uploads = wp_get_upload_dir() ) && false === $uploads['error'] ) ) {\n\t\t$file = $uploads['basedir'] . \"/$file\";\n\t}\n\n\tif ( $unfiltered ) {\n\t\treturn $file;\n\t}\n\n\t/**\n\t * Filters the attached file based on the given ID.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $file          Path to attached file.\n\t * @param int    $attachment_id Attachment ID.\n\t */\n\treturn apply_filters( 'get_attached_file', $file, $attachment_id );\n}\n\n/**\n * Update attachment file path based on attachment ID.\n *\n * Used to update the file path of the attachment, which uses post meta name\n * '_wp_attached_file' to store the path of the attachment.\n *\n * @since 2.1.0\n *\n * @param int    $attachment_id Attachment ID.\n * @param string $file          File path for the attachment.\n * @return bool True on success, false on failure.\n */\nfunction update_attached_file( $attachment_id, $file ) {\n\tif ( !get_post( $attachment_id ) )\n\t\treturn false;\n\n\t/**\n\t * Filters the path to the attached file to update.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $file          Path to the attached file to update.\n\t * @param int    $attachment_id Attachment ID.\n\t */\n\t$file = apply_filters( 'update_attached_file', $file, $attachment_id );\n\n\tif ( $file = _wp_relative_upload_path( $file ) )\n\t\treturn update_post_meta( $attachment_id, '_wp_attached_file', $file );\n\telse\n\t\treturn delete_post_meta( $attachment_id, '_wp_attached_file' );\n}\n\n/**\n * Return relative path to an uploaded file.\n *\n * The path is relative to the current upload dir.\n *\n * @since 2.9.0\n *\n * @param string $path Full path to the file.\n * @return string Relative path on success, unchanged path on failure.\n */\nfunction _wp_relative_upload_path( $path ) {\n\t$new_path = $path;\n\n\t$uploads = wp_get_upload_dir();\n\tif ( 0 === strpos( $new_path, $uploads['basedir'] ) ) {\n\t\t\t$new_path = str_replace( $uploads['basedir'], '', $new_path );\n\t\t\t$new_path = ltrim( $new_path, '/' );\n\t}\n\n\t/**\n\t * Filters the relative path to an uploaded file.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $new_path Relative path to the file.\n\t * @param string $path     Full path to the file.\n\t */\n\treturn apply_filters( '_wp_relative_upload_path', $new_path, $path );\n}\n\n/**\n * Retrieve all children of the post parent ID.\n *\n * Normally, without any enhancements, the children would apply to pages. In the\n * context of the inner workings of WordPress, pages, posts, and attachments\n * share the same table, so therefore the functionality could apply to any one\n * of them. It is then noted that while this function does not work on posts, it\n * does not mean that it won't work on posts. It is recommended that you know\n * what context you wish to retrieve the children of.\n *\n * Attachments may also be made the child of a post, so if that is an accurate\n * statement (which needs to be verified), it would then be possible to get\n * all of the attachments for a post. Attachments have since changed since\n * version 2.5, so this is most likely inaccurate, but serves generally as an\n * example of what is possible.\n *\n * The arguments listed as defaults are for this function and also of the\n * get_posts() function. The arguments are combined with the get_children defaults\n * and are then passed to the get_posts() function, which accepts additional arguments.\n * You can replace the defaults in this function, listed below and the additional\n * arguments listed in the get_posts() function.\n *\n * The 'post_parent' is the most important argument and important attention\n * needs to be paid to the $args parameter. If you pass either an object or an\n * integer (number), then just the 'post_parent' is grabbed and everything else\n * is lost. If you don't specify any arguments, then it is assumed that you are\n * in The Loop and the post parent will be grabbed for from the current post.\n *\n * The 'post_parent' argument is the ID to get the children. The 'numberposts'\n * is the amount of posts to retrieve that has a default of '-1', which is\n * used to get all of the posts. Giving a number higher than 0 will only\n * retrieve that amount of posts.\n *\n * The 'post_type' and 'post_status' arguments can be used to choose what\n * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress\n * post types are 'post', 'pages', and 'attachments'. The 'post_status'\n * argument will accept any post status within the write administration panels.\n *\n * @since 2.0.0\n *\n * @see get_posts()\n * @todo Check validity of description.\n *\n * @global WP_Post $post\n *\n * @param mixed  $args   Optional. User defined arguments for replacing the defaults. Default empty.\n * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                       a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @return array Array of children, where the type of each element is determined by $output parameter.\n *               Empty array on failure.\n */\nfunction get_children( $args = '', $output = OBJECT ) {\n\t$kids = array();\n\tif ( empty( $args ) ) {\n\t\tif ( isset( $GLOBALS['post'] ) ) {\n\t\t\t$args = array('post_parent' => (int) $GLOBALS['post']->post_parent );\n\t\t} else {\n\t\t\treturn $kids;\n\t\t}\n\t} elseif ( is_object( $args ) ) {\n\t\t$args = array('post_parent' => (int) $args->post_parent );\n\t} elseif ( is_numeric( $args ) ) {\n\t\t$args = array('post_parent' => (int) $args);\n\t}\n\n\t$defaults = array(\n\t\t'numberposts' => -1, 'post_type' => 'any',\n\t\t'post_status' => 'any', 'post_parent' => 0,\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$children = get_posts( $r );\n\n\tif ( ! $children )\n\t\treturn $kids;\n\n\tif ( ! empty( $r['fields'] ) )\n\t\treturn $children;\n\n\tupdate_post_cache($children);\n\n\tforeach ( $children as $key => $child )\n\t\t$kids[$child->ID] = $children[$key];\n\n\tif ( $output == OBJECT ) {\n\t\treturn $kids;\n\t} elseif ( $output == ARRAY_A ) {\n\t\t$weeuns = array();\n\t\tforeach ( (array) $kids as $kid ) {\n\t\t\t$weeuns[$kid->ID] = get_object_vars($kids[$kid->ID]);\n\t\t}\n\t\treturn $weeuns;\n\t} elseif ( $output == ARRAY_N ) {\n\t\t$babes = array();\n\t\tforeach ( (array) $kids as $kid ) {\n\t\t\t$babes[$kid->ID] = array_values(get_object_vars($kids[$kid->ID]));\n\t\t}\n\t\treturn $babes;\n\t} else {\n\t\treturn $kids;\n\t}\n}\n\n/**\n * Get extended entry info (<!--more-->).\n *\n * There should not be any space after the second dash and before the word\n * 'more'. There can be text or space(s) after the word 'more', but won't be\n * referenced.\n *\n * The returned array has 'main', 'extended', and 'more_text' keys. Main has the text before\n * the `<!--more-->`. The 'extended' key has the content after the\n * `<!--more-->` comment. The 'more_text' key has the custom \"Read More\" text.\n *\n * @since 1.0.0\n *\n * @param string $post Post content.\n * @return array Post before ('main'), after ('extended'), and custom read more ('more_text').\n */\nfunction get_extended( $post ) {\n\t//Match the new style more links.\n\tif ( preg_match('/<!--more(.*?)?-->/', $post, $matches) ) {\n\t\tlist($main, $extended) = explode($matches[0], $post, 2);\n\t\t$more_text = $matches[1];\n\t} else {\n\t\t$main = $post;\n\t\t$extended = '';\n\t\t$more_text = '';\n\t}\n\n\t//  leading and trailing whitespace.\n\t$main = preg_replace('/^[\\s]*(.*)[\\s]*$/', '\\\\1', $main);\n\t$extended = preg_replace('/^[\\s]*(.*)[\\s]*$/', '\\\\1', $extended);\n\t$more_text = preg_replace('/^[\\s]*(.*)[\\s]*$/', '\\\\1', $more_text);\n\n\treturn array( 'main' => $main, 'extended' => $extended, 'more_text' => $more_text );\n}\n\n/**\n * Retrieves post data given a post ID or post object.\n *\n * See sanitize_post() for optional $filter values. Also, the parameter\n * `$post`, must be given as a variable, since it is passed by reference.\n *\n * @since 1.5.1\n *\n * @global WP_Post $post\n *\n * @param int|WP_Post|null $post   Optional. Post ID or post object. Defaults to global $post.\n * @param string           $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                 a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string           $filter Optional. Type of filter to apply. Accepts 'raw', 'edit', 'db',\n *                                 or 'display'. Default 'raw'.\n * @return WP_Post|array|null Type corresponding to $output on success or null on failure.\n *                            When $output is OBJECT, a `WP_Post` instance is returned.\n */\nfunction get_post( $post = null, $output = OBJECT, $filter = 'raw' ) {\n\tif ( empty( $post ) && isset( $GLOBALS['post'] ) )\n\t\t$post = $GLOBALS['post'];\n\n\tif ( $post instanceof WP_Post ) {\n\t\t$_post = $post;\n\t} elseif ( is_object( $post ) ) {\n\t\tif ( empty( $post->filter ) ) {\n\t\t\t$_post = sanitize_post( $post, 'raw' );\n\t\t\t$_post = new WP_Post( $_post );\n\t\t} elseif ( 'raw' == $post->filter ) {\n\t\t\t$_post = new WP_Post( $post );\n\t\t} else {\n\t\t\t$_post = WP_Post::get_instance( $post->ID );\n\t\t}\n\t} else {\n\t\t$_post = WP_Post::get_instance( $post );\n\t}\n\n\tif ( ! $_post )\n\t\treturn null;\n\n\t$_post = $_post->filter( $filter );\n\n\tif ( $output == ARRAY_A )\n\t\treturn $_post->to_array();\n\telseif ( $output == ARRAY_N )\n\t\treturn array_values( $_post->to_array() );\n\n\treturn $_post;\n}\n\n/**\n * Retrieve ancestors of a post.\n *\n * @since 2.5.0\n *\n * @param int|WP_Post $post Post ID or post object.\n * @return array Ancestor IDs or empty array if none are found.\n */\nfunction get_post_ancestors( $post ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post || empty( $post->post_parent ) || $post->post_parent == $post->ID )\n\t\treturn array();\n\n\t$ancestors = array();\n\n\t$id = $ancestors[] = $post->post_parent;\n\n\twhile ( $ancestor = get_post( $id ) ) {\n\t\t// Loop detection: If the ancestor has been seen before, break.\n\t\tif ( empty( $ancestor->post_parent ) || ( $ancestor->post_parent == $post->ID ) || in_array( $ancestor->post_parent, $ancestors ) )\n\t\t\tbreak;\n\n\t\t$id = $ancestors[] = $ancestor->post_parent;\n\t}\n\n\treturn $ancestors;\n}\n\n/**\n * Retrieve data from a post field based on Post ID.\n *\n * Examples of the post field will be, 'post_type', 'post_status', 'post_content',\n * etc and based off of the post object property or key names.\n *\n * The context values are based off of the taxonomy filter functions and\n * supported values are found within those functions.\n *\n * @since 2.3.0\n * @since 4.5.0 The `$post` parameter was made optional.\n *\n * @see sanitize_post_field()\n *\n * @param string      $field   Post field name.\n * @param int|WP_Post $post    Optional. Post ID or post object. Defaults to current post.\n * @param string      $context Optional. How to filter the field. Accepts 'raw', 'edit', 'db',\n *                             or 'display'. Default 'display'.\n * @return string The value of the post field on success, empty string on failure.\n */\nfunction get_post_field( $field, $post = null, $context = 'display' ) {\n\t$post = get_post( $post );\n\n\tif ( !$post )\n\t\treturn '';\n\n\tif ( !isset($post->$field) )\n\t\treturn '';\n\n\treturn sanitize_post_field($field, $post->$field, $post->ID, $context);\n}\n\n/**\n * Retrieve the mime type of an attachment based on the ID.\n *\n * This function can be used with any post type, but it makes more sense with\n * attachments.\n *\n * @since 2.0.0\n *\n * @param int|WP_Post $ID Optional. Post ID or post object. Default empty.\n * @return string|false The mime type on success, false on failure.\n */\nfunction get_post_mime_type( $ID = '' ) {\n\t$post = get_post($ID);\n\n\tif ( is_object($post) )\n\t\treturn $post->post_mime_type;\n\n\treturn false;\n}\n\n/**\n * Retrieve the post status based on the Post ID.\n *\n * If the post ID is of an attachment, then the parent post status will be given\n * instead.\n *\n * @since 2.0.0\n *\n * @param int|WP_Post $ID Optional. Post ID or post object. Default empty.\n * @return string|false Post status on success, false on failure.\n */\nfunction get_post_status( $ID = '' ) {\n\t$post = get_post($ID);\n\n\tif ( !is_object($post) )\n\t\treturn false;\n\n\tif ( 'attachment' == $post->post_type ) {\n\t\tif ( 'private' == $post->post_status )\n\t\t\treturn 'private';\n\n\t\t// Unattached attachments are assumed to be published.\n\t\tif ( ( 'inherit' == $post->post_status ) && ( 0 == $post->post_parent) )\n\t\t\treturn 'publish';\n\n\t\t// Inherit status from the parent.\n\t\tif ( $post->post_parent && ( $post->ID != $post->post_parent ) ) {\n\t\t\t$parent_post_status = get_post_status( $post->post_parent );\n\t\t\tif ( 'trash' == $parent_post_status ) {\n\t\t\t\treturn get_post_meta( $post->post_parent, '_wp_trash_meta_status', true );\n\t\t\t} else {\n\t\t\t\treturn $parent_post_status;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Filters the post status.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string  $post_status The post status.\n\t * @param WP_Post $post        The post object.\n\t */\n\treturn apply_filters( 'get_post_status', $post->post_status, $post );\n}\n\n/**\n * Retrieve all of the WordPress supported post statuses.\n *\n * Posts have a limited set of valid status values, this provides the\n * post_status values and descriptions.\n *\n * @since 2.5.0\n *\n * @return array List of post statuses.\n */\nfunction get_post_statuses() {\n\t$status = array(\n\t\t'draft'   => __( 'Draft' ),\n\t\t'pending' => __( 'Pending Review' ),\n\t\t'private' => __( 'Private' ),\n\t\t'publish' => __( 'Published' )\n\t);\n\n\treturn $status;\n}\n\n/**\n * Retrieve all of the WordPress support page statuses.\n *\n * Pages have a limited set of valid status values, this provides the\n * post_status values and descriptions.\n *\n * @since 2.5.0\n *\n * @return array List of page statuses.\n */\nfunction get_page_statuses() {\n\t$status = array(\n\t\t'draft'   => __( 'Draft' ),\n\t\t'private' => __( 'Private' ),\n\t\t'publish' => __( 'Published' )\n\t);\n\n\treturn $status;\n}\n\n/**\n * Register a post status. Do not use before init.\n *\n * A simple function for creating or modifying a post status based on the\n * parameters given. The function will accept an array (second optional\n * parameter), along with a string for the post status name.\n *\n * Arguments prefixed with an _underscore shouldn't be used by plugins and themes.\n *\n * @since 3.0.0\n * @global array $wp_post_statuses Inserts new post status object into the list\n *\n * @param string $post_status Name of the post status.\n * @param array|string $args {\n *     Optional. Array or string of post status arguments.\n *\n *     @type bool|string $label                     A descriptive name for the post status marked\n *                                                  for translation. Defaults to value of $post_status.\n *     @type bool|array  $label_count               Descriptive text to use for nooped plurals.\n *                                                  Default array of $label, twice\n *     @type bool        $exclude_from_search       Whether to exclude posts with this post status\n *                                                  from search results. Default is value of $internal.\n *     @type bool        $_builtin                  Whether the status is built-in. Core-use only.\n *                                                  Default false.\n *     @type bool        $public                    Whether posts of this status should be shown\n *                                                  in the front end of the site. Default false.\n *     @type bool        $internal                  Whether the status is for internal use only.\n *                                                  Default false.\n *     @type bool        $protected                 Whether posts with this status should be protected.\n *                                                  Default false.\n *     @type bool        $private                   Whether posts with this status should be private.\n *                                                  Default false.\n *     @type bool        $publicly_queryable        Whether posts with this status should be publicly-\n *                                                  queryable. Default is value of $public.\n *     @type bool        $show_in_admin_all_list    Whether to include posts in the edit listing for\n *                                                  their post type. Default is value of $internal.\n *     @type bool        $show_in_admin_status_list Show in the list of statuses with post counts at\n *                                                  the top of the edit listings,\n *                                                  e.g. All (12) | Published (9) | My Custom Status (2)\n *                                                  Default is value of $internal.\n * }\n * @return object\n */\nfunction register_post_status( $post_status, $args = array() ) {\n\tglobal $wp_post_statuses;\n\n\tif (!is_array($wp_post_statuses))\n\t\t$wp_post_statuses = array();\n\n\t// Args prefixed with an underscore are reserved for internal use.\n\t$defaults = array(\n\t\t'label' => false,\n\t\t'label_count' => false,\n\t\t'exclude_from_search' => null,\n\t\t'_builtin' => false,\n\t\t'public' => null,\n\t\t'internal' => null,\n\t\t'protected' => null,\n\t\t'private' => null,\n\t\t'publicly_queryable' => null,\n\t\t'show_in_admin_status_list' => null,\n\t\t'show_in_admin_all_list' => null,\n\t);\n\t$args = wp_parse_args($args, $defaults);\n\t$args = (object) $args;\n\n\t$post_status = sanitize_key($post_status);\n\t$args->name = $post_status;\n\n\t// Set various defaults.\n\tif ( null === $args->public && null === $args->internal && null === $args->protected && null === $args->private )\n\t\t$args->internal = true;\n\n\tif ( null === $args->public  )\n\t\t$args->public = false;\n\n\tif ( null === $args->private  )\n\t\t$args->private = false;\n\n\tif ( null === $args->protected  )\n\t\t$args->protected = false;\n\n\tif ( null === $args->internal  )\n\t\t$args->internal = false;\n\n\tif ( null === $args->publicly_queryable )\n\t\t$args->publicly_queryable = $args->public;\n\n\tif ( null === $args->exclude_from_search )\n\t\t$args->exclude_from_search = $args->internal;\n\n\tif ( null === $args->show_in_admin_all_list )\n\t\t$args->show_in_admin_all_list = !$args->internal;\n\n\tif ( null === $args->show_in_admin_status_list )\n\t\t$args->show_in_admin_status_list = !$args->internal;\n\n\tif ( false === $args->label )\n\t\t$args->label = $post_status;\n\n\tif ( false === $args->label_count )\n\t\t$args->label_count = _n_noop( $args->label, $args->label );\n\n\t$wp_post_statuses[$post_status] = $args;\n\n\treturn $args;\n}\n\n/**\n * Retrieve a post status object by name.\n *\n * @since 3.0.0\n *\n * @global array $wp_post_statuses List of post statuses.\n *\n * @see register_post_status()\n *\n * @param string $post_status The name of a registered post status.\n * @return object|null A post status object.\n */\nfunction get_post_status_object( $post_status ) {\n\tglobal $wp_post_statuses;\n\n\tif ( empty($wp_post_statuses[$post_status]) )\n\t\treturn null;\n\n\treturn $wp_post_statuses[$post_status];\n}\n\n/**\n * Get a list of post statuses.\n *\n * @since 3.0.0\n *\n * @global array $wp_post_statuses List of post statuses.\n *\n * @see register_post_status()\n *\n * @param array|string $args     Optional. Array or string of post status arguments to compare against\n *                               properties of the global `$wp_post_statuses objects`. Default empty array.\n * @param string       $output   Optional. The type of output to return, either 'names' or 'objects'. Default 'names'.\n * @param string       $operator Optional. The logical operation to perform. 'or' means only one element\n *                               from the array needs to match; 'and' means all elements must match.\n *                               Default 'and'.\n * @return array A list of post status names or objects.\n */\nfunction get_post_stati( $args = array(), $output = 'names', $operator = 'and' ) {\n\tglobal $wp_post_statuses;\n\n\t$field = ('names' == $output) ? 'name' : false;\n\n\treturn wp_filter_object_list($wp_post_statuses, $args, $operator, $field);\n}\n\n/**\n * Whether the post type is hierarchical.\n *\n * A false return value might also mean that the post type does not exist.\n *\n * @since 3.0.0\n *\n * @see get_post_type_object()\n *\n * @param string $post_type Post type name\n * @return bool Whether post type is hierarchical.\n */\nfunction is_post_type_hierarchical( $post_type ) {\n\tif ( ! post_type_exists( $post_type ) )\n\t\treturn false;\n\n\t$post_type = get_post_type_object( $post_type );\n\treturn $post_type->hierarchical;\n}\n\n/**\n * Check if a post type is registered.\n *\n * @since 3.0.0\n *\n * @see get_post_type_object()\n *\n * @param string $post_type Post type name.\n * @return bool Whether post type is registered.\n */\nfunction post_type_exists( $post_type ) {\n\treturn (bool) get_post_type_object( $post_type );\n}\n\n/**\n * Retrieves the post type of the current post or of a given post.\n *\n * @since 2.1.0\n *\n * @param int|WP_Post|null $post Optional. Post ID or post object. Default is global $post.\n * @return string|false          Post type on success, false on failure.\n */\nfunction get_post_type( $post = null ) {\n\tif ( $post = get_post( $post ) )\n\t\treturn $post->post_type;\n\n\treturn false;\n}\n\n/**\n * Retrieves a post type object by name.\n *\n * @since 3.0.0\n * @since 4.6.0 Object returned is now an instance of WP_Post_Type.\n *\n * @global array $wp_post_types List of post types.\n *\n * @see register_post_type()\n *\n * @param string $post_type The name of a registered post type.\n * @return WP_Post_Type|null WP_Post_Type object if it exists, null otherwise.\n */\nfunction get_post_type_object( $post_type ) {\n\tglobal $wp_post_types;\n\n\tif ( ! is_scalar( $post_type ) || empty( $wp_post_types[ $post_type ] ) ) {\n\t\treturn null;\n\t}\n\n\treturn $wp_post_types[ $post_type ];\n}\n\n/**\n * Get a list of all registered post type objects.\n *\n * @since 2.9.0\n *\n * @global array $wp_post_types List of post types.\n *\n * @see register_post_type() for accepted arguments.\n *\n * @param array|string $args     Optional. An array of key => value arguments to match against\n *                               the post type objects. Default empty array.\n * @param string       $output   Optional. The type of output to return. Accepts post type 'names'\n *                               or 'objects'. Default 'names'.\n * @param string       $operator Optional. The logical operation to perform. 'or' means only one\n *                               element from the array needs to match; 'and' means all elements\n *                               must match; 'not' means no elements may match. Default 'and'.\n * @return array A list of post type names or objects.\n */\nfunction get_post_types( $args = array(), $output = 'names', $operator = 'and' ) {\n\tglobal $wp_post_types;\n\n\t$field = ('names' == $output) ? 'name' : false;\n\n\treturn wp_filter_object_list($wp_post_types, $args, $operator, $field);\n}\n\n/**\n * Registers a post type.\n *\n * Note: Post type registrations should not be hooked before the\n * {@see 'init'} action. Also, any taxonomy connections should be\n * registered via the `$taxonomies` argument to ensure consistency\n * when hooks such as {@see 'parse_query'} or {@see 'pre_get_posts'}\n * are used.\n *\n * Post types can support any number of built-in core features such\n * as meta boxes, custom fields, post thumbnails, post statuses,\n * comments, and more. See the `$supports` argument for a complete\n * list of supported features.\n *\n * @since 2.9.0\n * @since 3.0.0 The `show_ui` argument is now enforced on the new post screen.\n * @since 4.4.0 The `show_ui` argument is now enforced on the post type listing\n *              screen and post editing screen.\n * @since 4.6.0 Post type object returned is now an instance of WP_Post_Type.\n * @since 4.7.0 Introduced `show_in_rest`, 'rest_base' and 'rest_controller_class'\n *              arguments to register the post type in REST API.\n *\n * @global array $wp_post_types List of post types.\n *\n * @param string $post_type Post type key. Must not exceed 20 characters and may\n *                          only contain lowercase alphanumeric characters, dashes,\n *                          and underscores. See sanitize_key().\n * @param array|string $args {\n *     Array or string of arguments for registering a post type.\n *\n *     @type string      $label                 Name of the post type shown in the menu. Usually plural.\n *                                              Default is value of $labels['name'].\n *     @type array       $labels                An array of labels for this post type. If not set, post\n *                                              labels are inherited for non-hierarchical types and page\n *                                              labels for hierarchical ones. See get_post_type_labels() for a full\n *                                              list of supported labels.\n *     @type string      $description           A short descriptive summary of what the post type is.\n *                                              Default empty.\n *     @type bool        $public                Whether a post type is intended for use publicly either via\n *                                              the admin interface or by front-end users. While the default\n *                                              settings of $exclude_from_search, $publicly_queryable, $show_ui,\n *                                              and $show_in_nav_menus are inherited from public, each does not\n *                                              rely on this relationship and controls a very specific intention.\n *                                              Default false.\n *     @type bool        $hierarchical          Whether the post type is hierarchical (e.g. page). Default false.\n *     @type bool        $exclude_from_search   Whether to exclude posts with this post type from front end search\n *                                              results. Default is the opposite value of $public.\n *     @type bool        $publicly_queryable    Whether queries can be performed on the front end for the post type\n *                                              as part of parse_request(). Endpoints would include:\n *                                              * ?post_type={post_type_key}\n *                                              * ?{post_type_key}={single_post_slug}\n *                                              * ?{post_type_query_var}={single_post_slug}\n *                                              If not set, the default is inherited from $public.\n *     @type bool        $show_ui               Whether to generate and allow a UI for managing this post type in the\n *                                              admin. Default is value of $public.\n *     @type bool        $show_in_menu          Where to show the post type in the admin menu. To work, $show_ui\n *                                              must be true. If true, the post type is shown in its own top level\n *                                              menu. If false, no menu is shown. If a string of an existing top\n *                                              level menu (eg. 'tools.php' or 'edit.php?post_type=page'), the post\n *                                              type will be placed as a sub-menu of that.\n *                                              Default is value of $show_ui.\n *     @type bool        $show_in_nav_menus     Makes this post type available for selection in navigation menus.\n *                                              Default is value $public.\n *     @type bool        $show_in_admin_bar     Makes this post type available via the admin bar. Default is value\n *                                              of $show_in_menu.\n *     @type bool        $show_in_rest          Whether to add the post type route in the REST API 'wp/v2' namespace.\n *     @type string      $rest_base             To change the base url of REST API route. Default is $post_type.\n *     @type string      $rest_controller_class REST API Controller class name. Default is 'WP_REST_Posts_Controller'.\n *     @type int         $menu_position         The position in the menu order the post type should appear. To work,\n *                                              $show_in_menu must be true. Default null (at the bottom).\n *     @type string      $menu_icon             The url to the icon to be used for this menu. Pass a base64-encoded\n *                                              SVG using a data URI, which will be colored to match the color scheme\n *                                              -- this should begin with 'data:image/svg+xml;base64,'. Pass the name\n *                                              of a Dashicons helper class to use a font icon, e.g.\n *                                              'dashicons-chart-pie'. Pass 'none' to leave div.wp-menu-image empty\n *                                              so an icon can be added via CSS. Defaults to use the posts icon.\n *     @type string      $capability_type       The string to use to build the read, edit, and delete capabilities.\n *                                              May be passed as an array to allow for alternative plurals when using\n *                                              this argument as a base to construct the capabilities, e.g.\n *                                              array('story', 'stories'). Default 'post'.\n *     @type array       $capabilities          Array of capabilities for this post type. $capability_type is used\n *                                              as a base to construct capabilities by default.\n *                                              See get_post_type_capabilities().\n *     @type bool        $map_meta_cap          Whether to use the internal default meta capability handling.\n *                                              Default false.\n *     @type array       $supports              Core feature(s) the post type supports. Serves as an alias for calling\n *                                              add_post_type_support() directly. Core features include 'title',\n *                                              'editor', 'comments', 'revisions', 'trackbacks', 'author', 'excerpt',\n *                                              'page-attributes', 'thumbnail', 'custom-fields', and 'post-formats'.\n *                                              Additionally, the 'revisions' feature dictates whether the post type\n *                                              will store revisions, and the 'comments' feature dictates whether the\n *                                              comments count will show on the edit screen. Defaults is an array\n *                                              containing 'title' and 'editor'.\n *     @type callable    $register_meta_box_cb  Provide a callback function that sets up the meta boxes for the\n *                                              edit form. Do remove_meta_box() and add_meta_box() calls in the\n *                                              callback. Default null.\n *     @type array       $taxonomies            An array of taxonomy identifiers that will be registered for the\n *                                              post type. Taxonomies can be registered later with register_taxonomy()\n *                                              or register_taxonomy_for_object_type().\n *                                              Default empty array.\n *     @type bool|string $has_archive           Whether there should be post type archives, or if a string, the\n *                                              archive slug to use. Will generate the proper rewrite rules if\n *                                              $rewrite is enabled. Default false.\n *     @type bool|array  $rewrite              {\n *         Triggers the handling of rewrites for this post type. To prevent rewrite, set to false.\n *         Defaults to true, using $post_type as slug. To specify rewrite rules, an array can be\n *         passed with any of these keys:\n *\n *         @type string $slug       Customize the permastruct slug. Defaults to $post_type key.\n *         @type bool   $with_front Whether the permastruct should be prepended with WP_Rewrite::$front.\n *                                  Default true.\n *         @type bool   $feeds      Whether the feed permastruct should be built for this post type.\n *                                  Default is value of $has_archive.\n *         @type bool   $pages      Whether the permastruct should provide for pagination. Default true.\n *         @type const  $ep_mask    Endpoint mask to assign. If not specified and permalink_epmask is set,\n *                                  inherits from $permalink_epmask. If not specified and permalink_epmask\n *                                  is not set, defaults to EP_PERMALINK.\n *     }\n *     @type string|bool $query_var             Sets the query_var key for this post type. Defaults to $post_type\n *                                              key. If false, a post type cannot be loaded at\n *                                              ?{query_var}={post_slug}. If specified as a string, the query\n *                                              ?{query_var_string}={post_slug} will be valid.\n *     @type bool        $can_export            Whether to allow this post type to be exported. Default true.\n *     @type bool        $delete_with_user      Whether to delete posts of this type when deleting a user. If true,\n *                                              posts of this type belonging to the user will be moved to trash\n *                                              when then user is deleted. If false, posts of this type belonging\n *                                              to the user will *not* be trashed or deleted. If not set (the default),\n *                                              posts are trashed if post_type_supports('author'). Otherwise posts\n *                                              are not trashed or deleted. Default null.\n *     @type bool        $_builtin              FOR INTERNAL USE ONLY! True if this post type is a native or\n *                                              \"built-in\" post_type. Default false.\n *     @type string      $_edit_link            FOR INTERNAL USE ONLY! URL segment to use for edit link of\n *                                              this post type. Default 'post.php?post=%d'.\n * }\n * @return WP_Post_Type|WP_Error The registered post type object, or an error object.\n */\nfunction register_post_type( $post_type, $args = array() ) {\n\tglobal $wp_post_types;\n\n\tif ( ! is_array( $wp_post_types ) ) {\n\t\t$wp_post_types = array();\n\t}\n\n\t// Sanitize post type name\n\t$post_type = sanitize_key( $post_type );\n\n\tif ( empty( $post_type ) || strlen( $post_type ) > 20 ) {\n\t\t_doing_it_wrong( __FUNCTION__, __( 'Post type names must be between 1 and 20 characters in length.' ), '4.2.0' );\n\t\treturn new WP_Error( 'post_type_length_invalid', __( 'Post type names must be between 1 and 20 characters in length.' ) );\n\t}\n\n\t$post_type_object = new WP_Post_Type( $post_type, $args );\n\t$post_type_object->add_supports();\n\t$post_type_object->add_rewrite_rules();\n\t$post_type_object->register_meta_boxes();\n\n\t$wp_post_types[ $post_type ] = $post_type_object;\n\n\t$post_type_object->add_hooks();\n\t$post_type_object->register_taxonomies();\n\n\t/**\n\t * Fires after a post type is registered.\n\t *\n\t * @since 3.3.0\n\t * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.\n\t *\n\t * @param string       $post_type        Post type.\n\t * @param WP_Post_Type $post_type_object Arguments used to register the post type.\n\t */\n\tdo_action( 'registered_post_type', $post_type, $post_type_object );\n\n\treturn $post_type_object;\n}\n\n/**\n * Unregisters a post type.\n *\n * Can not be used to unregister built-in post types.\n *\n * @since 4.5.0\n *\n * @global array $wp_post_types List of post types.\n *\n * @param string $post_type Post type to unregister.\n * @return bool|WP_Error True on success, WP_Error on failure or if the post type doesn't exist.\n */\nfunction unregister_post_type( $post_type ) {\n\tglobal $wp_post_types;\n\n\tif ( ! post_type_exists( $post_type ) ) {\n\t\treturn new WP_Error( 'invalid_post_type', __( 'Invalid post type.' ) );\n\t}\n\n\t$post_type_object = get_post_type_object( $post_type );\n\n\t// Do not allow unregistering internal post types.\n\tif ( $post_type_object->_builtin ) {\n\t\treturn new WP_Error( 'invalid_post_type', __( 'Unregistering a built-in post type is not allowed' ) );\n\t}\n\n\t$post_type_object->remove_supports();\n\t$post_type_object->remove_rewrite_rules();\n\t$post_type_object->unregister_meta_boxes();\n\t$post_type_object->remove_hooks();\n\t$post_type_object->unregister_taxonomies();\n\n\tunset( $wp_post_types[ $post_type ] );\n\n\t/**\n\t * Fires after a post type was unregistered.\n\t *\n\t * @since 4.5.0\n\t *\n\t * @param string $post_type Post type key.\n\t */\n\tdo_action( 'unregistered_post_type', $post_type );\n\n\treturn true;\n}\n\n/**\n * Build an object with all post type capabilities out of a post type object\n *\n * Post type capabilities use the 'capability_type' argument as a base, if the\n * capability is not set in the 'capabilities' argument array or if the\n * 'capabilities' argument is not supplied.\n *\n * The capability_type argument can optionally be registered as an array, with\n * the first value being singular and the second plural, e.g. array('story, 'stories')\n * Otherwise, an 's' will be added to the value for the plural form. After\n * registration, capability_type will always be a string of the singular value.\n *\n * By default, seven keys are accepted as part of the capabilities array:\n *\n * - edit_post, read_post, and delete_post are meta capabilities, which are then\n *   generally mapped to corresponding primitive capabilities depending on the\n *   context, which would be the post being edited/read/deleted and the user or\n *   role being checked. Thus these capabilities would generally not be granted\n *   directly to users or roles.\n *\n * - edit_posts - Controls whether objects of this post type can be edited.\n * - edit_others_posts - Controls whether objects of this type owned by other users\n *   can be edited. If the post type does not support an author, then this will\n *   behave like edit_posts.\n * - publish_posts - Controls publishing objects of this post type.\n * - read_private_posts - Controls whether private objects can be read.\n *\n * These four primitive capabilities are checked in core in various locations.\n * There are also seven other primitive capabilities which are not referenced\n * directly in core, except in map_meta_cap(), which takes the three aforementioned\n * meta capabilities and translates them into one or more primitive capabilities\n * that must then be checked against the user or role, depending on the context.\n *\n * - read - Controls whether objects of this post type can be read.\n * - delete_posts - Controls whether objects of this post type can be deleted.\n * - delete_private_posts - Controls whether private objects can be deleted.\n * - delete_published_posts - Controls whether published objects can be deleted.\n * - delete_others_posts - Controls whether objects owned by other users can be\n *   can be deleted. If the post type does not support an author, then this will\n *   behave like delete_posts.\n * - edit_private_posts - Controls whether private objects can be edited.\n * - edit_published_posts - Controls whether published objects can be edited.\n *\n * These additional capabilities are only used in map_meta_cap(). Thus, they are\n * only assigned by default if the post type is registered with the 'map_meta_cap'\n * argument set to true (default is false).\n *\n * @since 3.0.0\n *\n * @see register_post_type()\n * @see map_meta_cap()\n *\n * @param object $args Post type registration arguments.\n * @return object Object with all the capabilities as member variables.\n */\nfunction get_post_type_capabilities( $args ) {\n\tif ( ! is_array( $args->capability_type ) )\n\t\t$args->capability_type = array( $args->capability_type, $args->capability_type . 's' );\n\n\t// Singular base for meta capabilities, plural base for primitive capabilities.\n\tlist( $singular_base, $plural_base ) = $args->capability_type;\n\n\t$default_capabilities = array(\n\t\t// Meta capabilities\n\t\t'edit_post'          => 'edit_'         . $singular_base,\n\t\t'read_post'          => 'read_'         . $singular_base,\n\t\t'delete_post'        => 'delete_'       . $singular_base,\n\t\t// Primitive capabilities used outside of map_meta_cap():\n\t\t'edit_posts'         => 'edit_'         . $plural_base,\n\t\t'edit_others_posts'  => 'edit_others_'  . $plural_base,\n\t\t'publish_posts'      => 'publish_'      . $plural_base,\n\t\t'read_private_posts' => 'read_private_' . $plural_base,\n\t);\n\n\t// Primitive capabilities used within map_meta_cap():\n\tif ( $args->map_meta_cap ) {\n\t\t$default_capabilities_for_mapping = array(\n\t\t\t'read'                   => 'read',\n\t\t\t'delete_posts'           => 'delete_'           . $plural_base,\n\t\t\t'delete_private_posts'   => 'delete_private_'   . $plural_base,\n\t\t\t'delete_published_posts' => 'delete_published_' . $plural_base,\n\t\t\t'delete_others_posts'    => 'delete_others_'    . $plural_base,\n\t\t\t'edit_private_posts'     => 'edit_private_'     . $plural_base,\n\t\t\t'edit_published_posts'   => 'edit_published_'   . $plural_base,\n\t\t);\n\t\t$default_capabilities = array_merge( $default_capabilities, $default_capabilities_for_mapping );\n\t}\n\n\t$capabilities = array_merge( $default_capabilities, $args->capabilities );\n\n\t// Post creation capability simply maps to edit_posts by default:\n\tif ( ! isset( $capabilities['create_posts'] ) )\n\t\t$capabilities['create_posts'] = $capabilities['edit_posts'];\n\n\t// Remember meta capabilities for future reference.\n\tif ( $args->map_meta_cap )\n\t\t_post_type_meta_capabilities( $capabilities );\n\n\treturn (object) $capabilities;\n}\n\n/**\n * Store or return a list of post type meta caps for map_meta_cap().\n *\n * @since 3.1.0\n * @access private\n *\n * @global array $post_type_meta_caps Used to store meta capabilities.\n *\n * @param array $capabilities Post type meta capabilities.\n */\nfunction _post_type_meta_capabilities( $capabilities = null ) {\n\tglobal $post_type_meta_caps;\n\n\tforeach ( $capabilities as $core => $custom ) {\n\t\tif ( in_array( $core, array( 'read_post', 'delete_post', 'edit_post' ) ) ) {\n\t\t\t$post_type_meta_caps[ $custom ] = $core;\n\t\t}\n\t}\n}\n\n/**\n * Builds an object with all post type labels out of a post type object.\n *\n * Accepted keys of the label array in the post type object:\n *\n * - `name` - General name for the post type, usually plural. The same and overridden\n *          by `$post_type_object->label`. Default is 'Posts' / 'Pages'.\n * - `singular_name` - Name for one object of this post type. Default is 'Post' / 'Page'.\n * - `add_new` - Default is 'Add New' for both hierarchical and non-hierarchical types.\n *             When internationalizing this string, please use a {@link https://codex.wordpress.org/I18n_for_WordPress_Developers#Disambiguation_by_context gettext context}\n *             matching your post type. Example: `_x( 'Add New', 'product', 'textdomain' );`.\n * - `add_new_item` - Label for adding a new singular item. Default is 'Add New Post' / 'Add New Page'.\n * - `edit_item` - Label for editing a singular item. Default is 'Edit Post' / 'Edit Page'.\n * - `new_item` - Label for the new item page title. Default is 'New Post' / 'New Page'.\n * - `view_item` - Label for viewing a singular item. Default is 'View Post' / 'View Page'.\n * - `view_items` - Label for viewing post type archives. Default is 'View Posts' / 'View Pages'.\n * - `search_items` - Label for searching plural items. Default is 'Search Posts' / 'Search Pages'.\n * - `not_found` - Label used when no items are found. Default is 'No posts found' / 'No pages found'.\n * - `not_found_in_trash` - Label used when no items are in the trash. Default is 'No posts found in Trash' /\n *                        'No pages found in Trash'.\n * - `parent_item_colon` - Label used to prefix parents of hierarchical items. Not used on non-hierarchical\n *                       post types. Default is 'Parent Page:'.\n * - `all_items` - Label to signify all items in a submenu link. Default is 'All Posts' / 'All Pages'.\n * - `archives` - Label for archives in nav menus. Default is 'Post Archives' / 'Page Archives'.\n * - `attributes` - Label for the attributes meta box. Default is 'Post Attributes' / 'Page Attributes'.\n * - `insert_into_item` - Label for the media frame button. Default is 'Insert into post' / 'Insert into page'.\n * - `uploaded_to_this_item` - Label for the media frame filter. Default is 'Uploaded to this post' /\n *                           'Uploaded to this page'.\n * - `featured_image` - Label for the Featured Image meta box title. Default is 'Featured Image'.\n * - `set_featured_image` - Label for setting the featured image. Default is 'Set featured image'.\n * - `remove_featured_image` - Label for removing the featured image. Default is 'Remove featured image'.\n * - `use_featured_image` - Label in the media frame for using a featured image. Default is 'Use as featured image'.\n * - `menu_name` - Label for the menu name. Default is the same as `name`.\n * - `filter_items_list` - Label for the table views hidden heading. Default is 'Filter posts list' /\n *                       'Filter pages list'.\n * - `items_list_navigation` - Label for the table pagination hidden heading. Default is 'Posts list navigation' /\n *                           'Pages list navigation'.\n * - `items_list` - Label for the table hidden heading. Default is 'Posts list' / 'Pages list'.\n *\n * Above, the first default value is for non-hierarchical post types (like posts)\n * and the second one is for hierarchical post types (like pages).\n *\n * Note: To set labels used in post type admin notices, see the {@see 'post_updated_messages'} filter.\n *\n * @since 3.0.0\n * @since 4.3.0 Added the `featured_image`, `set_featured_image`, `remove_featured_image`,\n *              and `use_featured_image` labels.\n * @since 4.4.0 Added the `archives`, `insert_into_item`, `uploaded_to_this_item`, `filter_items_list`,\n *              `items_list_navigation`, and `items_list` labels.\n * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.\n * @since 4.7.0 Added the `view_items` and `attributes` labels.\n *\n * @access private\n *\n * @param object|WP_Post_Type $post_type_object Post type object.\n * @return object Object with all the labels as member variables.\n */\nfunction get_post_type_labels( $post_type_object ) {\n\t$nohier_vs_hier_defaults = array(\n\t\t'name' => array( _x('Posts', 'post type general name'), _x('Pages', 'post type general name') ),\n\t\t'singular_name' => array( _x('Post', 'post type singular name'), _x('Page', 'post type singular name') ),\n\t\t'add_new' => array( _x('Add New', 'post'), _x('Add New', 'page') ),\n\t\t'add_new_item' => array( __('Add New Post'), __('Add New Page') ),\n\t\t'edit_item' => array( __('Edit Post'), __('Edit Page') ),\n\t\t'new_item' => array( __('New Post'), __('New Page') ),\n\t\t'view_item' => array( __('View Post'), __('View Page') ),\n\t\t'view_items' => array( __('View Posts'), __('View Pages') ),\n\t\t'search_items' => array( __('Search Posts'), __('Search Pages') ),\n\t\t'not_found' => array( __('No posts found.'), __('No pages found.') ),\n\t\t'not_found_in_trash' => array( __('No posts found in Trash.'), __('No pages found in Trash.') ),\n\t\t'parent_item_colon' => array( null, __('Parent Page:') ),\n\t\t'all_items' => array( __( 'All Posts' ), __( 'All Pages' ) ),\n\t\t'archives' => array( __( 'Post Archives' ), __( 'Page Archives' ) ),\n\t\t'attributes' => array( __( 'Post Attributes' ), __( 'Page Attributes' ) ),\n\t\t'insert_into_item' => array( __( 'Insert into post' ), __( 'Insert into page' ) ),\n\t\t'uploaded_to_this_item' => array( __( 'Uploaded to this post' ), __( 'Uploaded to this page' ) ),\n\t\t'featured_image' => array( _x( 'Featured Image', 'post' ), _x( 'Featured Image', 'page' ) ),\n\t\t'set_featured_image' => array( _x( 'Set featured image', 'post' ), _x( 'Set featured image', 'page' ) ),\n\t\t'remove_featured_image' => array( _x( 'Remove featured image', 'post' ), _x( 'Remove featured image', 'page' ) ),\n\t\t'use_featured_image' => array( _x( 'Use as featured image', 'post' ), _x( 'Use as featured image', 'page' ) ),\n\t\t'filter_items_list' => array( __( 'Filter posts list' ), __( 'Filter pages list' ) ),\n\t\t'items_list_navigation' => array( __( 'Posts list navigation' ), __( 'Pages list navigation' ) ),\n\t\t'items_list' => array( __( 'Posts list' ), __( 'Pages list' ) ),\n\t);\n\t$nohier_vs_hier_defaults['menu_name'] = $nohier_vs_hier_defaults['name'];\n\n\t$labels = _get_custom_object_labels( $post_type_object, $nohier_vs_hier_defaults );\n\n\t$post_type = $post_type_object->name;\n\n\t$default_labels = clone $labels;\n\n\t/**\n\t * Filters the labels of a specific post type.\n\t *\n\t * The dynamic portion of the hook name, `$post_type`, refers to\n\t * the post type slug.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @see get_post_type_labels() for the full list of labels.\n\t *\n\t * @param object $labels Object with labels for the post type as member variables.\n\t */\n\t$labels = apply_filters( \"post_type_labels_{$post_type}\", $labels );\n\n\t// Ensure that the filtered labels contain all required default values.\n\t$labels = (object) array_merge( (array) $default_labels, (array) $labels );\n\n\treturn $labels;\n}\n\n/**\n * Build an object with custom-something object (post type, taxonomy) labels\n * out of a custom-something object\n *\n * @since 3.0.0\n * @access private\n *\n * @param object $object                  A custom-something object.\n * @param array  $nohier_vs_hier_defaults Hierarchical vs non-hierarchical default labels.\n * @return object Object containing labels for the given custom-something object.\n */\nfunction _get_custom_object_labels( $object, $nohier_vs_hier_defaults ) {\n\t$object->labels = (array) $object->labels;\n\n\tif ( isset( $object->label ) && empty( $object->labels['name'] ) )\n\t\t$object->labels['name'] = $object->label;\n\n\tif ( !isset( $object->labels['singular_name'] ) && isset( $object->labels['name'] ) )\n\t\t$object->labels['singular_name'] = $object->labels['name'];\n\n\tif ( ! isset( $object->labels['name_admin_bar'] ) )\n\t\t$object->labels['name_admin_bar'] = isset( $object->labels['singular_name'] ) ? $object->labels['singular_name'] : $object->name;\n\n\tif ( !isset( $object->labels['menu_name'] ) && isset( $object->labels['name'] ) )\n\t\t$object->labels['menu_name'] = $object->labels['name'];\n\n\tif ( !isset( $object->labels['all_items'] ) && isset( $object->labels['menu_name'] ) )\n\t\t$object->labels['all_items'] = $object->labels['menu_name'];\n\n\tif ( !isset( $object->labels['archives'] ) && isset( $object->labels['all_items'] ) ) {\n\t\t$object->labels['archives'] = $object->labels['all_items'];\n\t}\n\n\t$defaults = array();\n\tforeach ( $nohier_vs_hier_defaults as $key => $value ) {\n\t\t$defaults[$key] = $object->hierarchical ? $value[1] : $value[0];\n\t}\n\t$labels = array_merge( $defaults, $object->labels );\n\t$object->labels = (object) $object->labels;\n\n\treturn (object) $labels;\n}\n\n/**\n * Add submenus for post types.\n *\n * @access private\n * @since 3.1.0\n */\nfunction _add_post_type_submenus() {\n\tforeach ( get_post_types( array( 'show_ui' => true ) ) as $ptype ) {\n\t\t$ptype_obj = get_post_type_object( $ptype );\n\t\t// Sub-menus only.\n\t\tif ( ! $ptype_obj->show_in_menu || $ptype_obj->show_in_menu === true )\n\t\t\tcontinue;\n\t\tadd_submenu_page( $ptype_obj->show_in_menu, $ptype_obj->labels->name, $ptype_obj->labels->all_items, $ptype_obj->cap->edit_posts, \"edit.php?post_type=$ptype\" );\n\t}\n}\n\n/**\n * Register support of certain features for a post type.\n *\n * All core features are directly associated with a functional area of the edit\n * screen, such as the editor or a meta box. Features include: 'title', 'editor',\n * 'comments', 'revisions', 'trackbacks', 'author', 'excerpt', 'page-attributes',\n * 'thumbnail', 'custom-fields', and 'post-formats'.\n *\n * Additionally, the 'revisions' feature dictates whether the post type will\n * store revisions, and the 'comments' feature dictates whether the comments\n * count will show on the edit screen.\n *\n * @since 3.0.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string       $post_type The post type for which to add the feature.\n * @param string|array $feature   The feature being added, accepts an array of\n *                                feature strings or a single string.\n */\nfunction add_post_type_support( $post_type, $feature ) {\n\tglobal $_wp_post_type_features;\n\n\t$features = (array) $feature;\n\tforeach ($features as $feature) {\n\t\tif ( func_num_args() == 2 )\n\t\t\t$_wp_post_type_features[$post_type][$feature] = true;\n\t\telse\n\t\t\t$_wp_post_type_features[$post_type][$feature] = array_slice( func_get_args(), 2 );\n\t}\n}\n\n/**\n * Remove support for a feature from a post type.\n *\n * @since 3.0.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string $post_type The post type for which to remove the feature.\n * @param string $feature   The feature being removed.\n */\nfunction remove_post_type_support( $post_type, $feature ) {\n\tglobal $_wp_post_type_features;\n\n\tunset( $_wp_post_type_features[ $post_type ][ $feature ] );\n}\n\n/**\n * Get all the post type features\n *\n * @since 3.4.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string $post_type The post type.\n * @return array Post type supports list.\n */\nfunction get_all_post_type_supports( $post_type ) {\n\tglobal $_wp_post_type_features;\n\n\tif ( isset( $_wp_post_type_features[$post_type] ) )\n\t\treturn $_wp_post_type_features[$post_type];\n\n\treturn array();\n}\n\n/**\n * Check a post type's support for a given feature.\n *\n * @since 3.0.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string $post_type The post type being checked.\n * @param string $feature   The feature being checked.\n * @return bool Whether the post type supports the given feature.\n */\nfunction post_type_supports( $post_type, $feature ) {\n\tglobal $_wp_post_type_features;\n\n\treturn ( isset( $_wp_post_type_features[$post_type][$feature] ) );\n}\n\n/**\n * Retrieves a list of post type names that support a specific feature.\n *\n * @since 4.5.0\n *\n * @global array $_wp_post_type_features Post type features\n *\n * @param array|string $feature  Single feature or an array of features the post types should support.\n * @param string       $operator Optional. The logical operation to perform. 'or' means\n *                               only one element from the array needs to match; 'and'\n *                               means all elements must match; 'not' means no elements may\n *                               match. Default 'and'.\n * @return array A list of post type names.\n */\nfunction get_post_types_by_support( $feature, $operator = 'and' ) {\n\tglobal $_wp_post_type_features;\n\n\t$features = array_fill_keys( (array) $feature, true );\n\n\treturn array_keys( wp_filter_object_list( $_wp_post_type_features, $features, $operator ) );\n}\n\n/**\n * Update the post type for the post ID.\n *\n * The page or post cache will be cleaned for the post ID.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $post_id   Optional. Post ID to change post type. Default 0.\n * @param string $post_type Optional. Post type. Accepts 'post' or 'page' to\n *                          name a few. Default 'post'.\n * @return int|false Amount of rows changed. Should be 1 for success and 0 for failure.\n */\nfunction set_post_type( $post_id = 0, $post_type = 'post' ) {\n\tglobal $wpdb;\n\n\t$post_type = sanitize_post_field('post_type', $post_type, $post_id, 'db');\n\t$return = $wpdb->update( $wpdb->posts, array('post_type' => $post_type), array('ID' => $post_id) );\n\n\tclean_post_cache( $post_id );\n\n\treturn $return;\n}\n\n/**\n * Determines whether a post type is considered \"viewable\".\n *\n * For built-in post types such as posts and pages, the 'public' value will be evaluated.\n * For all others, the 'publicly_queryable' value will be used.\n *\n * @since 4.4.0\n * @since 4.5.0 Added the ability to pass a post type name in addition to object.\n * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.\n *\n * @param string|WP_Post_Type $post_type Post type name or object.\n * @return bool Whether the post type should be considered viewable.\n */\nfunction is_post_type_viewable( $post_type ) {\n\tif ( is_scalar( $post_type ) ) {\n\t\t$post_type = get_post_type_object( $post_type );\n\t\tif ( ! $post_type ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn $post_type->publicly_queryable || ( $post_type->_builtin && $post_type->public );\n}\n\n/**\n * Retrieve list of latest posts or posts matching criteria.\n *\n * The defaults are as follows:\n *\n * @since 1.2.0\n *\n * @see WP_Query::parse_query()\n *\n * @param array $args {\n *     Optional. Arguments to retrieve posts. See WP_Query::parse_query() for all\n *     available arguments.\n *\n *     @type int        $numberposts      Total number of posts to retrieve. Is an alias of $posts_per_page\n *                                        in WP_Query. Accepts -1 for all. Default 5.\n *     @type int|string $category         Category ID or comma-separated list of IDs (this or any children).\n *                                        Is an alias of $cat in WP_Query. Default 0.\n *     @type array      $include          An array of post IDs to retrieve, sticky posts will be included.\n *                                        Is an alias of $post__in in WP_Query. Default empty array.\n *     @type array      $exclude          An array of post IDs not to retrieve. Default empty array.\n *     @type bool       $suppress_filters Whether to suppress filters. Default true.\n * }\n * @return array List of posts.\n */\nfunction get_posts( $args = null ) {\n\t$defaults = array(\n\t\t'numberposts' => 5,\n\t\t'category' => 0, 'orderby' => 'date',\n\t\t'order' => 'DESC', 'include' => array(),\n\t\t'exclude' => array(), 'meta_key' => '',\n\t\t'meta_value' =>'', 'post_type' => 'post',\n\t\t'suppress_filters' => true\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\tif ( empty( $r['post_status'] ) )\n\t\t$r['post_status'] = ( 'attachment' == $r['post_type'] ) ? 'inherit' : 'publish';\n\tif ( ! empty($r['numberposts']) && empty($r['posts_per_page']) )\n\t\t$r['posts_per_page'] = $r['numberposts'];\n\tif ( ! empty($r['category']) )\n\t\t$r['cat'] = $r['category'];\n\tif ( ! empty($r['include']) ) {\n\t\t$incposts = wp_parse_id_list( $r['include'] );\n\t\t$r['posts_per_page'] = count($incposts);  // only the number of posts included\n\t\t$r['post__in'] = $incposts;\n\t} elseif ( ! empty($r['exclude']) )\n\t\t$r['post__not_in'] = wp_parse_id_list( $r['exclude'] );\n\n\t$r['ignore_sticky_posts'] = true;\n\t$r['no_found_rows'] = true;\n\n\t$get_posts = new WP_Query;\n\treturn $get_posts->query($r);\n\n}\n\n//\n// Post meta functions\n//\n\n/**\n * Add meta data field to a post.\n *\n * Post meta data is called \"Custom Fields\" on the Administration Screen.\n *\n * @since 1.5.0\n *\n * @param int    $post_id    Post ID.\n * @param string $meta_key   Metadata name.\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param bool   $unique     Optional. Whether the same key should not be added.\n *                           Default false.\n * @return int|false Meta ID on success, false on failure.\n */\nfunction add_post_meta( $post_id, $meta_key, $meta_value, $unique = false ) {\n\t// Make sure meta is added to the post, not a revision.\n\tif ( $the_post = wp_is_post_revision($post_id) )\n\t\t$post_id = $the_post;\n\n\t$added = add_metadata( 'post', $post_id, $meta_key, $meta_value, $unique );\n\tif ( $added ) {\n\t\twp_cache_set( 'last_changed', microtime(), 'posts' );\n\t}\n\treturn $added;\n}\n\n/**\n * Remove metadata matching criteria from a post.\n *\n * You can match based on the key, or key and value. Removing based on key and\n * value, will keep from removing duplicate metadata with the same key. It also\n * allows removing all metadata matching key, if needed.\n *\n * @since 1.5.0\n *\n * @param int    $post_id    Post ID.\n * @param string $meta_key   Metadata name.\n * @param mixed  $meta_value Optional. Metadata value. Must be serializable if\n *                           non-scalar. Default empty.\n * @return bool True on success, false on failure.\n */\nfunction delete_post_meta( $post_id, $meta_key, $meta_value = '' ) {\n\t// Make sure meta is added to the post, not a revision.\n\tif ( $the_post = wp_is_post_revision($post_id) )\n\t\t$post_id = $the_post;\n\n\t$deleted = delete_metadata( 'post', $post_id, $meta_key, $meta_value );\n\tif ( $deleted ) {\n\t\twp_cache_set( 'last_changed', microtime(), 'posts' );\n\t}\n\treturn $deleted;\n}\n\n/**\n * Retrieve post meta field for a post.\n *\n * @since 1.5.0\n *\n * @param int    $post_id Post ID.\n * @param string $key     Optional. The meta key to retrieve. By default, returns\n *                        data for all keys. Default empty.\n * @param bool   $single  Optional. Whether to return a single value. Default false.\n * @return mixed Will be an array if $single is false. Will be value of meta data\n *               field if $single is true.\n */\nfunction get_post_meta( $post_id, $key = '', $single = false ) {\n\treturn get_metadata('post', $post_id, $key, $single);\n}\n\n/**\n * Update post meta field based on post ID.\n *\n * Use the $prev_value parameter to differentiate between meta fields with the\n * same key and post ID.\n *\n * If the meta field for the post does not exist, it will be added.\n *\n * @since 1.5.0\n *\n * @param int    $post_id    Post ID.\n * @param string $meta_key   Metadata key.\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param mixed  $prev_value Optional. Previous value to check before removing.\n *                           Default empty.\n * @return int|bool Meta ID if the key didn't exist, true on successful update,\n *                  false on failure.\n */\nfunction update_post_meta( $post_id, $meta_key, $meta_value, $prev_value = '' ) {\n\t// Make sure meta is added to the post, not a revision.\n\tif ( $the_post = wp_is_post_revision($post_id) )\n\t\t$post_id = $the_post;\n\n\t$updated = update_metadata( 'post', $post_id, $meta_key, $meta_value, $prev_value );\n\tif ( $updated ) {\n\t\twp_cache_set( 'last_changed', microtime(), 'posts' );\n\t}\n\treturn $updated;\n}\n\n/**\n * Delete everything from post meta matching meta key.\n *\n * @since 2.3.0\n *\n * @param string $post_meta_key Key to search for when deleting.\n * @return bool Whether the post meta key was deleted from the database.\n */\nfunction delete_post_meta_by_key( $post_meta_key ) {\n\t$deleted = delete_metadata( 'post', null, $post_meta_key, '', true );\n\tif ( $deleted ) {\n\t\twp_cache_set( 'last_changed', microtime(), 'posts' );\n\t}\n\treturn $deleted;\n}\n\n/**\n * Retrieve post meta fields, based on post ID.\n *\n * The post meta fields are retrieved from the cache where possible,\n * so the function is optimized to be called more than once.\n *\n * @since 1.2.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return array Post meta for the given post.\n */\nfunction get_post_custom( $post_id = 0 ) {\n\t$post_id = absint( $post_id );\n\tif ( ! $post_id )\n\t\t$post_id = get_the_ID();\n\n\treturn get_post_meta( $post_id );\n}\n\n/**\n * Retrieve meta field names for a post.\n *\n * If there are no meta fields, then nothing (null) will be returned.\n *\n * @since 1.2.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return array|void Array of the keys, if retrieved.\n */\nfunction get_post_custom_keys( $post_id = 0 ) {\n\t$custom = get_post_custom( $post_id );\n\n\tif ( !is_array($custom) )\n\t\treturn;\n\n\tif ( $keys = array_keys($custom) )\n\t\treturn $keys;\n}\n\n/**\n * Retrieve values for a custom post field.\n *\n * The parameters must not be considered optional. All of the post meta fields\n * will be retrieved and only the meta field key values returned.\n *\n * @since 1.2.0\n *\n * @param string $key     Optional. Meta field key. Default empty.\n * @param int    $post_id Optional. Post ID. Default is ID of the global $post.\n * @return array|null Meta field values.\n */\nfunction get_post_custom_values( $key = '', $post_id = 0 ) {\n\tif ( !$key )\n\t\treturn null;\n\n\t$custom = get_post_custom($post_id);\n\n\treturn isset($custom[$key]) ? $custom[$key] : null;\n}\n\n/**\n * Check if post is sticky.\n *\n * Sticky posts should remain at the top of The Loop. If the post ID is not\n * given, then The Loop ID for the current post will be used.\n *\n * @since 2.7.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return bool Whether post is sticky.\n */\nfunction is_sticky( $post_id = 0 ) {\n\t$post_id = absint( $post_id );\n\n\tif ( ! $post_id )\n\t\t$post_id = get_the_ID();\n\n\t$stickies = get_option( 'sticky_posts' );\n\n\tif ( ! is_array( $stickies ) )\n\t\treturn false;\n\n\tif ( in_array( $post_id, $stickies ) )\n\t\treturn true;\n\n\treturn false;\n}\n\n/**\n * Sanitize every post field.\n *\n * If the context is 'raw', then the post object or array will get minimal\n * sanitization of the integer fields.\n *\n * @since 2.3.0\n *\n * @see sanitize_post_field()\n *\n * @param object|WP_Post|array $post    The Post Object or Array\n * @param string               $context Optional. How to sanitize post fields.\n *                                      Accepts 'raw', 'edit', 'db', or 'display'.\n *                                      Default 'display'.\n * @return object|WP_Post|array The now sanitized Post Object or Array (will be the\n *                              same type as $post).\n */\nfunction sanitize_post( $post, $context = 'display' ) {\n\tif ( is_object($post) ) {\n\t\t// Check if post already filtered for this context.\n\t\tif ( isset($post->filter) && $context == $post->filter )\n\t\t\treturn $post;\n\t\tif ( !isset($post->ID) )\n\t\t\t$post->ID = 0;\n\t\tforeach ( array_keys(get_object_vars($post)) as $field )\n\t\t\t$post->$field = sanitize_post_field($field, $post->$field, $post->ID, $context);\n\t\t$post->filter = $context;\n\t} elseif ( is_array( $post ) ) {\n\t\t// Check if post already filtered for this context.\n\t\tif ( isset($post['filter']) && $context == $post['filter'] )\n\t\t\treturn $post;\n\t\tif ( !isset($post['ID']) )\n\t\t\t$post['ID'] = 0;\n\t\tforeach ( array_keys($post) as $field )\n\t\t\t$post[$field] = sanitize_post_field($field, $post[$field], $post['ID'], $context);\n\t\t$post['filter'] = $context;\n\t}\n\treturn $post;\n}\n\n/**\n * Sanitize post field based on context.\n *\n * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and\n * 'js'. The 'display' context is used by default. 'attribute' and 'js' contexts\n * are treated like 'display' when calling filters.\n *\n * @since 2.3.0\n * @since 4.4.0 Like `sanitize_post()`, `$context` defaults to 'display'.\n *\n * @param string $field   The Post Object field name.\n * @param mixed  $value   The Post Object value.\n * @param int    $post_id Post ID.\n * @param string $context Optional. How to sanitize post fields. Looks for 'raw', 'edit',\n *                        'db', 'display', 'attribute' and 'js'. Default 'display'.\n * @return mixed Sanitized value.\n */\nfunction sanitize_post_field( $field, $value, $post_id, $context = 'display' ) {\n\t$int_fields = array('ID', 'post_parent', 'menu_order');\n\tif ( in_array($field, $int_fields) )\n\t\t$value = (int) $value;\n\n\t// Fields which contain arrays of integers.\n\t$array_int_fields = array( 'ancestors' );\n\tif ( in_array($field, $array_int_fields) ) {\n\t\t$value = array_map( 'absint', $value);\n\t\treturn $value;\n\t}\n\n\tif ( 'raw' == $context )\n\t\treturn $value;\n\n\t$prefixed = false;\n\tif ( false !== strpos($field, 'post_') ) {\n\t\t$prefixed = true;\n\t\t$field_no_prefix = str_replace('post_', '', $field);\n\t}\n\n\tif ( 'edit' == $context ) {\n\t\t$format_to_edit = array('post_content', 'post_excerpt', 'post_title', 'post_password');\n\n\t\tif ( $prefixed ) {\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific post field to edit.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field`, refers to the post\n\t\t\t * field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed $value   Value of the post field.\n\t\t\t * @param int   $post_id Post ID.\n\t\t\t */\n\t\t\t$value = apply_filters( \"edit_{$field}\", $value, $post_id );\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific post field to edit.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field_no_prefix`, refers to\n\t\t\t * the post field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed $value   Value of the post field.\n\t\t\t * @param int   $post_id Post ID.\n\t\t\t */\n\t\t\t$value = apply_filters( \"{$field_no_prefix}_edit_pre\", $value, $post_id );\n\t\t} else {\n\t\t\t$value = apply_filters( \"edit_post_{$field}\", $value, $post_id );\n\t\t}\n\n\t\tif ( in_array($field, $format_to_edit) ) {\n\t\t\tif ( 'post_content' == $field )\n\t\t\t\t$value = format_to_edit($value, user_can_richedit());\n\t\t\telse\n\t\t\t\t$value = format_to_edit($value);\n\t\t} else {\n\t\t\t$value = esc_attr($value);\n\t\t}\n\t} elseif ( 'db' == $context ) {\n\t\tif ( $prefixed ) {\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific post field before saving.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field`, refers to the post\n\t\t\t * field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed $value Value of the post field.\n\t\t\t */\n\t\t\t$value = apply_filters( \"pre_{$field}\", $value );\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific field before saving.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field_no_prefix`, refers\n\t\t\t * to the post field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed $value Value of the post field.\n\t\t\t */\n\t\t\t$value = apply_filters( \"{$field_no_prefix}_save_pre\", $value );\n\t\t} else {\n\t\t\t$value = apply_filters( \"pre_post_{$field}\", $value );\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific post field before saving.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field`, refers to the post\n\t\t\t * field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed $value Value of the post field.\n\t\t\t */\n\t\t\t$value = apply_filters( \"{$field}_pre\", $value );\n\t\t}\n\t} else {\n\n\t\t// Use display filters by default.\n\t\tif ( $prefixed ) {\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific post field for display.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field`, refers to the post\n\t\t\t * field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed  $value   Value of the prefixed post field.\n\t\t\t * @param int    $post_id Post ID.\n\t\t\t * @param string $context Context for how to sanitize the field. Possible\n\t\t\t *                        values include 'raw', 'edit', 'db', 'display',\n\t\t\t *                        'attribute' and 'js'.\n\t\t\t */\n\t\t\t$value = apply_filters( \"{$field}\", $value, $post_id, $context );\n\t\t} else {\n\t\t\t$value = apply_filters( \"post_{$field}\", $value, $post_id, $context );\n\t\t}\n\n\t\tif ( 'attribute' == $context ) {\n\t\t\t$value = esc_attr( $value );\n\t\t} elseif ( 'js' == $context ) {\n\t\t\t$value = esc_js( $value );\n\t\t}\n\t}\n\n\treturn $value;\n}\n\n/**\n * Make a post sticky.\n *\n * Sticky posts should be displayed at the top of the front page.\n *\n * @since 2.7.0\n *\n * @param int $post_id Post ID.\n */\nfunction stick_post( $post_id ) {\n\t$stickies = get_option('sticky_posts');\n\n\tif ( !is_array($stickies) )\n\t\t$stickies = array($post_id);\n\n\tif ( ! in_array($post_id, $stickies) )\n\t\t$stickies[] = $post_id;\n\n\t$updated = update_option( 'sticky_posts', $stickies );\n\n\tif ( $updated ) {\n\t\t/**\n\t\t * Fires once a post has been added to the sticky list.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param int $post_id ID of the post that was stuck.\n\t\t */\n\t\tdo_action( 'post_stuck', $post_id );\n\t}\n}\n\n/**\n * Un-stick a post.\n *\n * Sticky posts should be displayed at the top of the front page.\n *\n * @since 2.7.0\n *\n * @param int $post_id Post ID.\n */\nfunction unstick_post( $post_id ) {\n\t$stickies = get_option('sticky_posts');\n\n\tif ( !is_array($stickies) )\n\t\treturn;\n\n\tif ( ! in_array($post_id, $stickies) )\n\t\treturn;\n\n\t$offset = array_search($post_id, $stickies);\n\tif ( false === $offset )\n\t\treturn;\n\n\tarray_splice($stickies, $offset, 1);\n\n\t$updated = update_option( 'sticky_posts', $stickies );\n\n\tif ( $updated ) {\n\t\t/**\n\t\t * Fires once a post has been removed from the sticky list.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param int $post_id ID of the post that was unstuck.\n\t\t */\n\t\tdo_action( 'post_unstuck', $post_id );\n\t}\n}\n\n/**\n * Return the cache key for wp_count_posts() based on the passed arguments.\n *\n * @since 3.9.0\n *\n * @param string $type Optional. Post type to retrieve count Default 'post'.\n * @param string $perm Optional. 'readable' or empty. Default empty.\n * @return string The cache key.\n */\nfunction _count_posts_cache_key( $type = 'post', $perm = '' ) {\n\t$cache_key = 'posts-' . $type;\n\tif ( 'readable' == $perm && is_user_logged_in() ) {\n\t\t$post_type_object = get_post_type_object( $type );\n\t\tif ( $post_type_object && ! current_user_can( $post_type_object->cap->read_private_posts ) ) {\n\t\t\t$cache_key .= '_' . $perm . '_' . get_current_user_id();\n\t\t}\n\t}\n\treturn $cache_key;\n}\n\n/**\n * Count number of posts of a post type and if user has permissions to view.\n *\n * This function provides an efficient method of finding the amount of post's\n * type a blog has. Another method is to count the amount of items in\n * get_posts(), but that method has a lot of overhead with doing so. Therefore,\n * when developing for 2.5+, use this function instead.\n *\n * The $perm parameter checks for 'readable' value and if the user can read\n * private posts, it will display that for the user that is signed in.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $type Optional. Post type to retrieve count. Default 'post'.\n * @param string $perm Optional. 'readable' or empty. Default empty.\n * @return object Number of posts for each status.\n */\nfunction wp_count_posts( $type = 'post', $perm = '' ) {\n\tglobal $wpdb;\n\n\tif ( ! post_type_exists( $type ) )\n\t\treturn new stdClass;\n\n\t$cache_key = _count_posts_cache_key( $type, $perm );\n\n\t$counts = wp_cache_get( $cache_key, 'counts' );\n\tif ( false !== $counts ) {\n\t\t/** This filter is documented in wp-includes/post.php */\n\t\treturn apply_filters( 'wp_count_posts', $counts, $type, $perm );\n\t}\n\n\t$query = \"SELECT post_status, COUNT( * ) AS num_posts FROM {$wpdb->posts} WHERE post_type = %s\";\n\tif ( 'readable' == $perm && is_user_logged_in() ) {\n\t\t$post_type_object = get_post_type_object($type);\n\t\tif ( ! current_user_can( $post_type_object->cap->read_private_posts ) ) {\n\t\t\t$query .= $wpdb->prepare( \" AND (post_status != 'private' OR ( post_author = %d AND post_status = 'private' ))\",\n\t\t\t\tget_current_user_id()\n\t\t\t);\n\t\t}\n\t}\n\t$query .= ' GROUP BY post_status';\n\n\t$results = (array) $wpdb->get_results( $wpdb->prepare( $query, $type ), ARRAY_A );\n\t$counts = array_fill_keys( get_post_stati(), 0 );\n\n\tforeach ( $results as $row ) {\n\t\t$counts[ $row['post_status'] ] = $row['num_posts'];\n\t}\n\n\t$counts = (object) $counts;\n\twp_cache_set( $cache_key, $counts, 'counts' );\n\n\t/**\n\t * Modify returned post counts by status for the current post type.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param object $counts An object containing the current post_type's post\n\t *                       counts by status.\n\t * @param string $type   Post type.\n\t * @param string $perm   The permission to determine if the posts are 'readable'\n\t *                       by the current user.\n\t */\n\treturn apply_filters( 'wp_count_posts', $counts, $type, $perm );\n}\n\n/**\n * Count number of attachments for the mime type(s).\n *\n * If you set the optional mime_type parameter, then an array will still be\n * returned, but will only have the item you are looking for. It does not give\n * you the number of attachments that are children of a post. You can get that\n * by counting the number of children that post has.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string|array $mime_type Optional. Array or comma-separated list of\n *                                MIME patterns. Default empty.\n * @return object An object containing the attachment counts by mime type.\n */\nfunction wp_count_attachments( $mime_type = '' ) {\n\tglobal $wpdb;\n\n\t$and = wp_post_mime_type_where( $mime_type );\n\t$count = $wpdb->get_results( \"SELECT post_mime_type, COUNT( * ) AS num_posts FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' $and GROUP BY post_mime_type\", ARRAY_A );\n\n\t$counts = array();\n\tforeach ( (array) $count as $row ) {\n\t\t$counts[ $row['post_mime_type'] ] = $row['num_posts'];\n\t}\n\t$counts['trash'] = $wpdb->get_var( \"SELECT COUNT( * ) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status = 'trash' $and\");\n\n\t/**\n\t * Modify returned attachment counts by mime type.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param object $counts    An object containing the attachment counts by\n\t *                          mime type.\n\t * @param string $mime_type The mime type pattern used to filter the attachments\n\t *                          counted.\n\t */\n\treturn apply_filters( 'wp_count_attachments', (object) $counts, $mime_type );\n}\n\n/**\n * Get default post mime types.\n *\n * @since 2.9.0\n *\n * @return array List of post mime types.\n */\nfunction get_post_mime_types() {\n\t$post_mime_types = array(\t//\tarray( adj, noun )\n\t\t'image' => array(__('Images'), __('Manage Images'), _n_noop('Image <span class=\"count\">(%s)</span>', 'Images <span class=\"count\">(%s)</span>')),\n\t\t'audio' => array(__('Audio'), __('Manage Audio'), _n_noop('Audio <span class=\"count\">(%s)</span>', 'Audio <span class=\"count\">(%s)</span>')),\n\t\t'video' => array(__('Video'), __('Manage Video'), _n_noop('Video <span class=\"count\">(%s)</span>', 'Video <span class=\"count\">(%s)</span>')),\n\t);\n\n\t/**\n\t * Filters the default list of post mime types.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param array $post_mime_types Default list of post mime types.\n\t */\n\treturn apply_filters( 'post_mime_types', $post_mime_types );\n}\n\n/**\n * Check a MIME-Type against a list.\n *\n * If the wildcard_mime_types parameter is a string, it must be comma separated\n * list. If the real_mime_types is a string, it is also comma separated to\n * create the list.\n *\n * @since 2.5.0\n *\n * @param string|array $wildcard_mime_types Mime types, e.g. audio/mpeg or image (same as image/*)\n *                                          or flash (same as *flash*).\n * @param string|array $real_mime_types     Real post mime type values.\n * @return array array(wildcard=>array(real types)).\n */\nfunction wp_match_mime_types( $wildcard_mime_types, $real_mime_types ) {\n\t$matches = array();\n\tif ( is_string( $wildcard_mime_types ) ) {\n\t\t$wildcard_mime_types = array_map( 'trim', explode( ',', $wildcard_mime_types ) );\n\t}\n\tif ( is_string( $real_mime_types ) ) {\n\t\t$real_mime_types = array_map( 'trim', explode( ',', $real_mime_types ) );\n\t}\n\n\t$patternses = array();\n\t$wild = '[-._a-z0-9]*';\n\n\tforeach ( (array) $wildcard_mime_types as $type ) {\n\t\t$mimes = array_map( 'trim', explode( ',', $type ) );\n\t\tforeach ( $mimes as $mime ) {\n\t\t\t$regex = str_replace( '__wildcard__', $wild, preg_quote( str_replace( '*', '__wildcard__', $mime ) ) );\n\t\t\t$patternses[][$type] = \"^$regex$\";\n\t\t\tif ( false === strpos( $mime, '/' ) ) {\n\t\t\t\t$patternses[][$type] = \"^$regex/\";\n\t\t\t\t$patternses[][$type] = $regex;\n\t\t\t}\n\t\t}\n\t}\n\tasort( $patternses );\n\n\tforeach ( $patternses as $patterns ) {\n\t\tforeach ( $patterns as $type => $pattern ) {\n\t\t\tforeach ( (array) $real_mime_types as $real ) {\n\t\t\t\tif ( preg_match( \"#$pattern#\", $real ) && ( empty( $matches[$type] ) || false === array_search( $real, $matches[$type] ) ) ) {\n\t\t\t\t\t$matches[$type][] = $real;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $matches;\n}\n\n/**\n * Convert MIME types into SQL.\n *\n * @since 2.5.0\n *\n * @param string|array $post_mime_types List of mime types or comma separated string\n *                                      of mime types.\n * @param string       $table_alias     Optional. Specify a table alias, if needed.\n *                                      Default empty.\n * @return string The SQL AND clause for mime searching.\n */\nfunction wp_post_mime_type_where( $post_mime_types, $table_alias = '' ) {\n\t$where = '';\n\t$wildcards = array('', '%', '%/%');\n\tif ( is_string($post_mime_types) )\n\t\t$post_mime_types = array_map('trim', explode(',', $post_mime_types));\n\n\t$wheres = array();\n\n\tforeach ( (array) $post_mime_types as $mime_type ) {\n\t\t$mime_type = preg_replace('/\\s/', '', $mime_type);\n\t\t$slashpos = strpos($mime_type, '/');\n\t\tif ( false !== $slashpos ) {\n\t\t\t$mime_group = preg_replace('/[^-*.a-zA-Z0-9]/', '', substr($mime_type, 0, $slashpos));\n\t\t\t$mime_subgroup = preg_replace('/[^-*.+a-zA-Z0-9]/', '', substr($mime_type, $slashpos + 1));\n\t\t\tif ( empty($mime_subgroup) )\n\t\t\t\t$mime_subgroup = '*';\n\t\t\telse\n\t\t\t\t$mime_subgroup = str_replace('/', '', $mime_subgroup);\n\t\t\t$mime_pattern = \"$mime_group/$mime_subgroup\";\n\t\t} else {\n\t\t\t$mime_pattern = preg_replace('/[^-*.a-zA-Z0-9]/', '', $mime_type);\n\t\t\tif ( false === strpos($mime_pattern, '*') )\n\t\t\t\t$mime_pattern .= '/*';\n\t\t}\n\n\t\t$mime_pattern = preg_replace('/\\*+/', '%', $mime_pattern);\n\n\t\tif ( in_array( $mime_type, $wildcards ) )\n\t\t\treturn '';\n\n\t\tif ( false !== strpos($mime_pattern, '%') )\n\t\t\t$wheres[] = empty($table_alias) ? \"post_mime_type LIKE '$mime_pattern'\" : \"$table_alias.post_mime_type LIKE '$mime_pattern'\";\n\t\telse\n\t\t\t$wheres[] = empty($table_alias) ? \"post_mime_type = '$mime_pattern'\" : \"$table_alias.post_mime_type = '$mime_pattern'\";\n\t}\n\tif ( !empty($wheres) )\n\t\t$where = ' AND (' . join(' OR ', $wheres) . ') ';\n\treturn $where;\n}\n\n/**\n * Trash or delete a post or page.\n *\n * When the post and page is permanently deleted, everything that is tied to\n * it is deleted also. This includes comments, post meta fields, and terms\n * associated with the post.\n *\n * The post or page is moved to trash instead of permanently deleted unless\n * trash is disabled, item is already in the trash, or $force_delete is true.\n *\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @see wp_delete_attachment()\n * @see wp_trash_post()\n *\n * @param int  $postid       Optional. Post ID. Default 0.\n * @param bool $force_delete Optional. Whether to bypass trash and force deletion.\n *                           Default false.\n * @return WP_Post|false|null Post data on success, false or null on failure.\n */\nfunction wp_delete_post( $postid = 0, $force_delete = false ) {\n\tglobal $wpdb;\n\n\t$post = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM $wpdb->posts WHERE ID = %d\", $postid ) );\n\n\tif ( ! $post ) {\n\t\treturn $post;\n\t}\n\n\t$post = get_post( $post );\n\n\tif ( ! $force_delete && ( 'post' === $post->post_type || 'page' === $post->post_type ) && 'trash' !== get_post_status( $postid ) && EMPTY_TRASH_DAYS ) {\n\t\treturn wp_trash_post( $postid );\n\t}\n\n\tif ( 'attachment' === $post->post_type ) {\n\t\treturn wp_delete_attachment( $postid, $force_delete );\n\t}\n\n\t/**\n\t * Filters whether a post deletion should take place.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param bool    $delete       Whether to go forward with deletion.\n\t * @param WP_Post $post         Post object.\n\t * @param bool    $force_delete Whether to bypass the trash.\n\t */\n\t$check = apply_filters( 'pre_delete_post', null, $post, $force_delete );\n\tif ( null !== $check ) {\n\t\treturn $check;\n\t}\n\n\t/**\n\t * Fires before a post is deleted, at the start of wp_delete_post().\n\t *\n\t * @since 3.2.0\n\t *\n\t * @see wp_delete_post()\n\t *\n\t * @param int $postid Post ID.\n\t */\n\tdo_action( 'before_delete_post', $postid );\n\n\tdelete_post_meta($postid,'_wp_trash_meta_status');\n\tdelete_post_meta($postid,'_wp_trash_meta_time');\n\n\twp_delete_object_term_relationships($postid, get_object_taxonomies($post->post_type));\n\n\t$parent_data = array( 'post_parent' => $post->post_parent );\n\t$parent_where = array( 'post_parent' => $postid );\n\n\tif ( is_post_type_hierarchical( $post->post_type ) ) {\n\t\t// Point children of this page to its parent, also clean the cache of affected children.\n\t\t$children_query = $wpdb->prepare( \"SELECT * FROM $wpdb->posts WHERE post_parent = %d AND post_type = %s\", $postid, $post->post_type );\n\t\t$children = $wpdb->get_results( $children_query );\n\t\tif ( $children ) {\n\t\t\t$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => $post->post_type ) );\n\t\t}\n\t}\n\n\t// Do raw query. wp_get_post_revisions() is filtered.\n\t$revision_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'revision'\", $postid ) );\n\t// Use wp_delete_post (via wp_delete_post_revision) again. Ensures any meta/misplaced data gets cleaned up.\n\tforeach ( $revision_ids as $revision_id )\n\t\twp_delete_post_revision( $revision_id );\n\n\t// Point all attachments to this post up one level.\n\t$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'attachment' ) );\n\n\twp_defer_comment_counting( true );\n\n\t$comment_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d\", $postid ));\n\tforeach ( $comment_ids as $comment_id ) {\n\t\twp_delete_comment( $comment_id, true );\n\t}\n\n\twp_defer_comment_counting( false );\n\n\t$post_meta_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d \", $postid ));\n\tforeach ( $post_meta_ids as $mid )\n\t\tdelete_metadata_by_mid( 'post', $mid );\n\n\t/**\n\t * Fires immediately before a post is deleted from the database.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param int $postid Post ID.\n\t */\n\tdo_action( 'delete_post', $postid );\n\t$result = $wpdb->delete( $wpdb->posts, array( 'ID' => $postid ) );\n\tif ( ! $result ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Fires immediately after a post is deleted from the database.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param int $postid Post ID.\n\t */\n\tdo_action( 'deleted_post', $postid );\n\n\tclean_post_cache( $post );\n\n\tif ( is_post_type_hierarchical( $post->post_type ) && $children ) {\n\t\tforeach ( $children as $child )\n\t\t\tclean_post_cache( $child );\n\t}\n\n\twp_clear_scheduled_hook('publish_future_post', array( $postid ) );\n\n\t/**\n\t * Fires after a post is deleted, at the conclusion of wp_delete_post().\n\t *\n\t * @since 3.2.0\n\t *\n\t * @see wp_delete_post()\n\t *\n\t * @param int $postid Post ID.\n\t */\n\tdo_action( 'after_delete_post', $postid );\n\n\treturn $post;\n}\n\n/**\n * Reset the page_on_front, show_on_front, and page_for_post settings when\n * a linked page is deleted or trashed.\n *\n * Also ensures the post is no longer sticky.\n *\n * @since 3.7.0\n * @access private\n *\n * @param int $post_id Post ID.\n */\nfunction _reset_front_page_settings_for_post( $post_id ) {\n\t$post = get_post( $post_id );\n\tif ( 'page' == $post->post_type ) {\n\t \t/*\n\t \t * If the page is defined in option page_on_front or post_for_posts,\n\t \t * adjust the corresponding options.\n\t \t */\n\t\tif ( get_option( 'page_on_front' ) == $post->ID ) {\n\t\t\tupdate_option( 'show_on_front', 'posts' );\n\t\t\tupdate_option( 'page_on_front', 0 );\n\t\t}\n\t\tif ( get_option( 'page_for_posts' ) == $post->ID ) {\n\t\t\tdelete_option( 'page_for_posts', 0 );\n\t\t}\n\t}\n\tunstick_post( $post->ID );\n}\n\n/**\n * Move a post or page to the Trash\n *\n * If trash is disabled, the post or page is permanently deleted.\n *\n * @since 2.9.0\n *\n * @see wp_delete_post()\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post\n *                     if EMPTY_TRASH_DAYS equals true.\n * @return WP_Post|false|null Post data on success, false or null on failure.\n */\nfunction wp_trash_post( $post_id = 0 ) {\n\tif ( ! EMPTY_TRASH_DAYS ) {\n\t\treturn wp_delete_post( $post_id, true );\n\t}\n\n\t$post = get_post( $post_id );\n\n\tif ( ! $post ) {\n\t\treturn $post;\n\t}\n\n\tif ( 'trash' === $post->post_status ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Filters whether a post trashing should take place.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param bool    $trash Whether to go forward with trashing.\n\t * @param WP_Post $post  Post object.\n\t */\n\t$check = apply_filters( 'pre_trash_post', null, $post );\n\tif ( null !== $check ) {\n\t\treturn $check;\n\t}\n\n\t/**\n\t * Fires before a post is sent to the trash.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'wp_trash_post', $post_id );\n\n\tadd_post_meta( $post_id, '_wp_trash_meta_status', $post->post_status );\n\tadd_post_meta( $post_id, '_wp_trash_meta_time', time() );\n\n\twp_update_post( array( 'ID' => $post_id, 'post_status' => 'trash' ) );\n\n\twp_trash_post_comments( $post_id );\n\n\t/**\n\t * Fires after a post is sent to the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'trashed_post', $post_id );\n\n\treturn $post;\n}\n\n/**\n * Restore a post or page from the Trash.\n *\n * @since 2.9.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return WP_Post|false|null Post data on success, false or null on failure.\n */\nfunction wp_untrash_post( $post_id = 0 ) {\n\t$post = get_post( $post_id );\n\n\tif ( ! $post ) {\n\t\treturn $post;\n\t}\n\n\tif ( 'trash' !== $post->post_status ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Filters whether a post untrashing should take place.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param bool    $untrash Whether to go forward with untrashing.\n\t * @param WP_Post $post    Post object.\n\t */\n\t$check = apply_filters( 'pre_untrash_post', null, $post );\n\tif ( null !== $check ) {\n\t\treturn $check;\n\t}\n\n\t/**\n\t * Fires before a post is restored from the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'untrash_post', $post_id );\n\n\t$post_status = get_post_meta( $post_id, '_wp_trash_meta_status', true );\n\n\tdelete_post_meta( $post_id, '_wp_trash_meta_status' );\n\tdelete_post_meta( $post_id, '_wp_trash_meta_time' );\n\n\twp_update_post( array( 'ID' => $post_id, 'post_status' => $post_status ) );\n\n\twp_untrash_post_comments( $post_id );\n\n\t/**\n\t * Fires after a post is restored from the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'untrashed_post', $post_id );\n\n\treturn $post;\n}\n\n/**\n * Moves comments for a post to the trash.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post|null $post Optional. Post ID or post object. Defaults to global $post.\n * @return mixed|void False on failure.\n */\nfunction wp_trash_post_comments( $post = null ) {\n\tglobal $wpdb;\n\n\t$post = get_post($post);\n\tif ( empty($post) )\n\t\treturn;\n\n\t$post_id = $post->ID;\n\n\t/**\n\t * Fires before comments are sent to the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'trash_post_comments', $post_id );\n\n\t$comments = $wpdb->get_results( $wpdb->prepare(\"SELECT comment_ID, comment_approved FROM $wpdb->comments WHERE comment_post_ID = %d\", $post_id) );\n\tif ( empty($comments) )\n\t\treturn;\n\n\t// Cache current status for each comment.\n\t$statuses = array();\n\tforeach ( $comments as $comment )\n\t\t$statuses[$comment->comment_ID] = $comment->comment_approved;\n\tadd_post_meta($post_id, '_wp_trash_meta_comments_status', $statuses);\n\n\t// Set status for all comments to post-trashed.\n\t$result = $wpdb->update($wpdb->comments, array('comment_approved' => 'post-trashed'), array('comment_post_ID' => $post_id));\n\n\tclean_comment_cache( array_keys($statuses) );\n\n\t/**\n\t * Fires after comments are sent to the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int   $post_id  Post ID.\n\t * @param array $statuses Array of comment statuses.\n\t */\n\tdo_action( 'trashed_post_comments', $post_id, $statuses );\n\n\treturn $result;\n}\n\n/**\n * Restore comments for a post from the trash.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post|null $post Optional. Post ID or post object. Defaults to global $post.\n * @return true|void\n */\nfunction wp_untrash_post_comments( $post = null ) {\n\tglobal $wpdb;\n\n\t$post = get_post($post);\n\tif ( empty($post) )\n\t\treturn;\n\n\t$post_id = $post->ID;\n\n\t$statuses = get_post_meta($post_id, '_wp_trash_meta_comments_status', true);\n\n\tif ( empty($statuses) )\n\t\treturn true;\n\n\t/**\n\t * Fires before comments are restored for a post from the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'untrash_post_comments', $post_id );\n\n\t// Restore each comment to its original status.\n\t$group_by_status = array();\n\tforeach ( $statuses as $comment_id => $comment_status )\n\t\t$group_by_status[$comment_status][] = $comment_id;\n\n\tforeach ( $group_by_status as $status => $comments ) {\n\t\t// Sanity check. This shouldn't happen.\n\t\tif ( 'post-trashed' == $status ) {\n\t\t\t$status = '0';\n\t\t}\n\t\t$comments_in = implode( ', ', array_map( 'intval', $comments ) );\n\t\t$wpdb->query( $wpdb->prepare( \"UPDATE $wpdb->comments SET comment_approved = %s WHERE comment_ID IN ($comments_in)\", $status ) );\n\t}\n\n\tclean_comment_cache( array_keys($statuses) );\n\n\tdelete_post_meta($post_id, '_wp_trash_meta_comments_status');\n\n\t/**\n\t * Fires after comments are restored for a post from the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'untrashed_post_comments', $post_id );\n}\n\n/**\n * Retrieve the list of categories for a post.\n *\n * Compatibility layer for themes and plugins. Also an easy layer of abstraction\n * away from the complexity of the taxonomy layer.\n *\n * @since 2.1.0\n *\n * @see wp_get_object_terms()\n *\n * @param int   $post_id Optional. The Post ID. Does not default to the ID of the\n *                       global $post. Default 0.\n * @param array $args    Optional. Category query parameters. Default empty array.\n *                       See WP_Term_Query::__construct() for supported arguments.\n * @return array|WP_Error List of categories. If the `$fields` argument passed via `$args` is 'all' or\n *                        'all_with_object_id', an array of WP_Term objects will be returned. If `$fields`\n *                        is 'ids', an array of category ids. If `$fields` is 'names', an array of category names.\n *                        WP_Error object if 'category' taxonomy doesn't exist.\n */\nfunction wp_get_post_categories( $post_id = 0, $args = array() ) {\n\t$post_id = (int) $post_id;\n\n\t$defaults = array('fields' => 'ids');\n\t$args = wp_parse_args( $args, $defaults );\n\n\t$cats = wp_get_object_terms($post_id, 'category', $args);\n\treturn $cats;\n}\n\n/**\n * Retrieve the tags for a post.\n *\n * There is only one default for this function, called 'fields' and by default\n * is set to 'all'. There are other defaults that can be overridden in\n * wp_get_object_terms().\n *\n * @since 2.3.0\n *\n * @param int   $post_id Optional. The Post ID. Does not default to the ID of the\n *                       global $post. Default 0.\n * @param array $args    Optional. Tag query parameters. Default empty array.\n *                       See WP_Term_Query::__construct() for supported arguments.\n * @return array|WP_Error Array of WP_Term objects on success or empty array if no tags were found.\n *                        WP_Error object if 'post_tag' taxonomy doesn't exist.\n */\nfunction wp_get_post_tags( $post_id = 0, $args = array() ) {\n\treturn wp_get_post_terms( $post_id, 'post_tag', $args);\n}\n\n/**\n * Retrieves the terms for a post.\n *\n * @since 2.8.0\n *\n * @param int          $post_id  Optional. The Post ID. Does not default to the ID of the\n *                               global $post. Default 0.\n * @param string|array $taxonomy Optional. The taxonomy slug or array of slugs for which\n *                               to retrieve terms. Default 'post_tag'.\n * @param array        $args     {\n *     Optional. Term query parameters. See WP_Term_Query::__construct() for supported arguments.\n *\n *     @type string $fields Term fields to retrieve. Default 'all'.\n * }\n * @return array|WP_Error Array of WP_Term objects on success or empty array if no terms were found.\n *                        WP_Error object if `$taxonomy` doesn't exist.\n */\nfunction wp_get_post_terms( $post_id = 0, $taxonomy = 'post_tag', $args = array() ) {\n\t$post_id = (int) $post_id;\n\n\t$defaults = array('fields' => 'all');\n\t$args = wp_parse_args( $args, $defaults );\n\n\t$tags = wp_get_object_terms($post_id, $taxonomy, $args);\n\n\treturn $tags;\n}\n\n/**\n * Retrieve a number of recent posts.\n *\n * @since 1.0.0\n *\n * @see get_posts()\n *\n * @param array  $args   Optional. Arguments to retrieve posts. Default empty array.\n * @param string $output Optional. The required return type. One of OBJECT or ARRAY_A, which correspond to\n *                       a WP_Post object or an associative array, respectively. Default ARRAY_A.\n * @return array|false Array of recent posts, where the type of each element is determined by $output parameter.\n *                     Empty array on failure.\n */\nfunction wp_get_recent_posts( $args = array(), $output = ARRAY_A ) {\n\n\tif ( is_numeric( $args ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.1.0', __( 'Passing an integer number of posts is deprecated. Pass an array of arguments instead.' ) );\n\t\t$args = array( 'numberposts' => absint( $args ) );\n\t}\n\n\t// Set default arguments.\n\t$defaults = array(\n\t\t'numberposts' => 10, 'offset' => 0,\n\t\t'category' => 0, 'orderby' => 'post_date',\n\t\t'order' => 'DESC', 'include' => '',\n\t\t'exclude' => '', 'meta_key' => '',\n\t\t'meta_value' =>'', 'post_type' => 'post', 'post_status' => 'draft, publish, future, pending, private',\n\t\t'suppress_filters' => true\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$results = get_posts( $r );\n\n\t// Backward compatibility. Prior to 3.1 expected posts to be returned in array.\n\tif ( ARRAY_A == $output ){\n\t\tforeach ( $results as $key => $result ) {\n\t\t\t$results[$key] = get_object_vars( $result );\n\t\t}\n\t\treturn $results ? $results : array();\n\t}\n\n\treturn $results ? $results : false;\n\n}\n\n/**\n * Insert or update a post.\n *\n * If the $postarr parameter has 'ID' set to a value, then post will be updated.\n *\n * You can set the post date manually, by setting the values for 'post_date'\n * and 'post_date_gmt' keys. You can close the comments or open the comments by\n * setting the value for 'comment_status' key.\n *\n * @since 1.0.0\n * @since 4.2.0 Support was added for encoding emoji in the post title, content, and excerpt.\n * @since 4.4.0 A 'meta_input' array can now be passed to `$postarr` to add post meta data.\n *\n * @see sanitize_post()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $postarr {\n *     An array of elements that make up a post to update or insert.\n *\n *     @type int    $ID                    The post ID. If equal to something other than 0,\n *                                         the post with that ID will be updated. Default 0.\n *     @type int    $post_author           The ID of the user who added the post. Default is\n *                                         the current user ID.\n *     @type string $post_date             The date of the post. Default is the current time.\n *     @type string $post_date_gmt         The date of the post in the GMT timezone. Default is\n *                                         the value of `$post_date`.\n *     @type mixed  $post_content          The post content. Default empty.\n *     @type string $post_content_filtered The filtered post content. Default empty.\n *     @type string $post_title            The post title. Default empty.\n *     @type string $post_excerpt          The post excerpt. Default empty.\n *     @type string $post_status           The post status. Default 'draft'.\n *     @type string $post_type             The post type. Default 'post'.\n *     @type string $comment_status        Whether the post can accept comments. Accepts 'open' or 'closed'.\n *                                         Default is the value of 'default_comment_status' option.\n *     @type string $ping_status           Whether the post can accept pings. Accepts 'open' or 'closed'.\n *                                         Default is the value of 'default_ping_status' option.\n *     @type string $post_password         The password to access the post. Default empty.\n *     @type string $post_name             The post name. Default is the sanitized post title\n *                                         when creating a new post.\n *     @type string $to_ping               Space or carriage return-separated list of URLs to ping.\n *                                         Default empty.\n *     @type string $pinged                Space or carriage return-separated list of URLs that have\n *                                         been pinged. Default empty.\n *     @type string $post_modified         The date when the post was last modified. Default is\n *                                         the current time.\n *     @type string $post_modified_gmt     The date when the post was last modified in the GMT\n *                                         timezone. Default is the current time.\n *     @type int    $post_parent           Set this for the post it belongs to, if any. Default 0.\n *     @type int    $menu_order            The order the post should be displayed in. Default 0.\n *     @type string $post_mime_type        The mime type of the post. Default empty.\n *     @type string $guid                  Global Unique ID for referencing the post. Default empty.\n *     @type array  $post_category         Array of category names, slugs, or IDs.\n *                                         Defaults to value of the 'default_category' option.\n *     @type array  $tags_input            Array of tag names, slugs, or IDs. Default empty.\n *     @type array  $tax_input             Array of taxonomy terms keyed by their taxonomy name. Default empty.\n *     @type array  $meta_input            Array of post meta values keyed by their post meta key. Default empty.\n * }\n * @param bool  $wp_error Optional. Whether to return a WP_Error on failure. Default false.\n * @return int|WP_Error The post ID on success. The value 0 or WP_Error on failure.\n */\nfunction wp_insert_post( $postarr, $wp_error = false ) {\n\tglobal $wpdb;\n\n\t$user_id = get_current_user_id();\n\n\t$defaults = array(\n\t\t'post_author' => $user_id,\n\t\t'post_content' => '',\n\t\t'post_content_filtered' => '',\n\t\t'post_title' => '',\n\t\t'post_excerpt' => '',\n\t\t'post_status' => 'draft',\n\t\t'post_type' => 'post',\n\t\t'comment_status' => '',\n\t\t'ping_status' => '',\n\t\t'post_password' => '',\n\t\t'to_ping' =>  '',\n\t\t'pinged' => '',\n\t\t'post_parent' => 0,\n\t\t'menu_order' => 0,\n\t\t'guid' => '',\n\t\t'import_id' => 0,\n\t\t'context' => '',\n\t);\n\n\t$postarr = wp_parse_args($postarr, $defaults);\n\n\tunset( $postarr[ 'filter' ] );\n\n\t$postarr = sanitize_post($postarr, 'db');\n\n\t// Are we updating or creating?\n\t$post_ID = 0;\n\t$update = false;\n\t$guid = $postarr['guid'];\n\n\tif ( ! empty( $postarr['ID'] ) ) {\n\t\t$update = true;\n\n\t\t// Get the post ID and GUID.\n\t\t$post_ID = $postarr['ID'];\n\t\t$post_before = get_post( $post_ID );\n\t\tif ( is_null( $post_before ) ) {\n\t\t\tif ( $wp_error ) {\n\t\t\t\treturn new WP_Error( 'invalid_post', __( 'Invalid post ID.' ) );\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\n\t\t$guid = get_post_field( 'guid', $post_ID );\n\t\t$previous_status = get_post_field('post_status', $post_ID );\n\t} else {\n\t\t$previous_status = 'new';\n\t}\n\n\t$post_type = empty( $postarr['post_type'] ) ? 'post' : $postarr['post_type'];\n\n\t$post_title = $postarr['post_title'];\n\t$post_content = $postarr['post_content'];\n\t$post_excerpt = $postarr['post_excerpt'];\n\tif ( isset( $postarr['post_name'] ) ) {\n\t\t$post_name = $postarr['post_name'];\n\t} elseif ( $update ) {\n\t\t// For an update, don't modify the post_name if it wasn't supplied as an argument.\n\t\t$post_name = $post_before->post_name;\n\t}\n\n\t$maybe_empty = 'attachment' !== $post_type\n\t\t&& ! $post_content && ! $post_title && ! $post_excerpt\n\t\t&& post_type_supports( $post_type, 'editor' )\n\t\t&& post_type_supports( $post_type, 'title' )\n\t\t&& post_type_supports( $post_type, 'excerpt' );\n\n\t/**\n\t * Filters whether the post should be considered \"empty\".\n\t *\n\t * The post is considered \"empty\" if both:\n\t * 1. The post type supports the title, editor, and excerpt fields\n\t * 2. The title, editor, and excerpt fields are all empty\n\t *\n\t * Returning a truthy value to the filter will effectively short-circuit\n\t * the new post being inserted, returning 0. If $wp_error is true, a WP_Error\n\t * will be returned instead.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param bool  $maybe_empty Whether the post should be considered \"empty\".\n\t * @param array $postarr     Array of post data.\n\t */\n\tif ( apply_filters( 'wp_insert_post_empty_content', $maybe_empty, $postarr ) ) {\n\t\tif ( $wp_error ) {\n\t\t\treturn new WP_Error( 'empty_content', __( 'Content, title, and excerpt are empty.' ) );\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t$post_status = empty( $postarr['post_status'] ) ? 'draft' : $postarr['post_status'];\n\tif ( 'attachment' === $post_type && ! in_array( $post_status, array( 'inherit', 'private', 'trash', 'auto-draft' ), true ) ) {\n\t\t$post_status = 'inherit';\n\t}\n\n\tif ( ! empty( $postarr['post_category'] ) ) {\n\t\t// Filter out empty terms.\n\t\t$post_category = array_filter( $postarr['post_category'] );\n\t}\n\n\t// Make sure we set a valid category.\n\tif ( empty( $post_category ) || 0 == count( $post_category ) || ! is_array( $post_category ) ) {\n\t\t// 'post' requires at least one category.\n\t\tif ( 'post' == $post_type && 'auto-draft' != $post_status ) {\n\t\t\t$post_category = array( get_option('default_category') );\n\t\t} else {\n\t\t\t$post_category = array();\n\t\t}\n\t}\n\n\t// Don't allow contributors to set the post slug for pending review posts.\n\tif ( 'pending' == $post_status && !current_user_can( 'publish_posts' ) ) {\n\t\t$post_name = '';\n\t}\n\n\t/*\n\t * Create a valid post name. Drafts and pending posts are allowed to have\n\t * an empty post name.\n\t */\n\tif ( empty($post_name) ) {\n\t\tif ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) ) {\n\t\t\t$post_name = sanitize_title($post_title);\n\t\t} else {\n\t\t\t$post_name = '';\n\t\t}\n\t} else {\n\t\t// On updates, we need to check to see if it's using the old, fixed sanitization context.\n\t\t$check_name = sanitize_title( $post_name, '', 'old-save' );\n\t\tif ( $update && strtolower( urlencode( $post_name ) ) == $check_name && get_post_field( 'post_name', $post_ID ) == $check_name ) {\n\t\t\t$post_name = $check_name;\n\t\t} else { // new post, or slug has changed.\n\t\t\t$post_name = sanitize_title($post_name);\n\t\t}\n\t}\n\n\t/*\n\t * If the post date is empty (due to having been new or a draft) and status\n\t * is not 'draft' or 'pending', set date to now.\n\t */\n\tif ( empty( $postarr['post_date'] ) || '0000-00-00 00:00:00' == $postarr['post_date'] ) {\n\t\tif ( empty( $postarr['post_date_gmt'] ) || '0000-00-00 00:00:00' == $postarr['post_date_gmt'] ) {\n\t\t\t$post_date = current_time( 'mysql' );\n\t\t} else {\n\t\t\t$post_date = get_date_from_gmt( $postarr['post_date_gmt'] );\n\t\t}\n\t} else {\n\t\t$post_date = $postarr['post_date'];\n\t}\n\n\t// Validate the date.\n\t$mm = substr( $post_date, 5, 2 );\n\t$jj = substr( $post_date, 8, 2 );\n\t$aa = substr( $post_date, 0, 4 );\n\t$valid_date = wp_checkdate( $mm, $jj, $aa, $post_date );\n\tif ( ! $valid_date ) {\n\t\tif ( $wp_error ) {\n\t\t\treturn new WP_Error( 'invalid_date', __( 'Invalid date.' ) );\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tif ( empty( $postarr['post_date_gmt'] ) || '0000-00-00 00:00:00' == $postarr['post_date_gmt'] ) {\n\t\tif ( ! in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) ) {\n\t\t\t$post_date_gmt = get_gmt_from_date( $post_date );\n\t\t} else {\n\t\t\t$post_date_gmt = '0000-00-00 00:00:00';\n\t\t}\n\t} else {\n\t\t$post_date_gmt = $postarr['post_date_gmt'];\n\t}\n\n\tif ( $update || '0000-00-00 00:00:00' == $post_date ) {\n\t\t$post_modified     = current_time( 'mysql' );\n\t\t$post_modified_gmt = current_time( 'mysql', 1 );\n\t} else {\n\t\t$post_modified     = $post_date;\n\t\t$post_modified_gmt = $post_date_gmt;\n\t}\n\n\tif ( 'attachment' !== $post_type ) {\n\t\tif ( 'publish' == $post_status ) {\n\t\t\t$now = gmdate('Y-m-d H:i:59');\n\t\t\tif ( mysql2date('U', $post_date_gmt, false) > mysql2date('U', $now, false) ) {\n\t\t\t\t$post_status = 'future';\n\t\t\t}\n\t\t} elseif ( 'future' == $post_status ) {\n\t\t\t$now = gmdate('Y-m-d H:i:59');\n\t\t\tif ( mysql2date('U', $post_date_gmt, false) <= mysql2date('U', $now, false) ) {\n\t\t\t\t$post_status = 'publish';\n\t\t\t}\n\t\t}\n\t}\n\n\t// Comment status.\n\tif ( empty( $postarr['comment_status'] ) ) {\n\t\tif ( $update ) {\n\t\t\t$comment_status = 'closed';\n\t\t} else {\n\t\t\t$comment_status = get_default_comment_status( $post_type );\n\t\t}\n\t} else {\n\t\t$comment_status = $postarr['comment_status'];\n\t}\n\n\t// These variables are needed by compact() later.\n\t$post_content_filtered = $postarr['post_content_filtered'];\n\t$post_author = isset( $postarr['post_author'] ) ? $postarr['post_author'] : $user_id;\n\t$ping_status = empty( $postarr['ping_status'] ) ? get_default_comment_status( $post_type, 'pingback' ) : $postarr['ping_status'];\n\t$to_ping = isset( $postarr['to_ping'] ) ? sanitize_trackback_urls( $postarr['to_ping'] ) : '';\n\t$pinged = isset( $postarr['pinged'] ) ? $postarr['pinged'] : '';\n\t$import_id = isset( $postarr['import_id'] ) ? $postarr['import_id'] : 0;\n\n\t/*\n\t * The 'wp_insert_post_parent' filter expects all variables to be present.\n\t * Previously, these variables would have already been extracted\n\t */\n\tif ( isset( $postarr['menu_order'] ) ) {\n\t\t$menu_order = (int) $postarr['menu_order'];\n\t} else {\n\t\t$menu_order = 0;\n\t}\n\n\t$post_password = isset( $postarr['post_password'] ) ? $postarr['post_password'] : '';\n\tif ( 'private' == $post_status ) {\n\t\t$post_password = '';\n\t}\n\n\tif ( isset( $postarr['post_parent'] ) ) {\n\t\t$post_parent = (int) $postarr['post_parent'];\n\t} else {\n\t\t$post_parent = 0;\n\t}\n\n\t/**\n\t * Filters the post parent -- used to check for and prevent hierarchy loops.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param int   $post_parent Post parent ID.\n\t * @param int   $post_ID     Post ID.\n\t * @param array $new_postarr Array of parsed post data.\n\t * @param array $postarr     Array of sanitized, but otherwise unmodified post data.\n\t */\n\t$post_parent = apply_filters( 'wp_insert_post_parent', $post_parent, $post_ID, compact( array_keys( $postarr ) ), $postarr );\n\n\t/*\n\t * If the post is being untrashed and it has a desired slug stored in post meta,\n\t * reassign it.\n\t */\n\tif ( 'trash' === $previous_status && 'trash' !== $post_status ) {\n\t\t$desired_post_slug = get_post_meta( $post_ID, '_wp_desired_post_slug', true );\n\t\tif ( $desired_post_slug ) {\n\t\t\tdelete_post_meta( $post_ID, '_wp_desired_post_slug' );\n\t\t\t$post_name = $desired_post_slug;\n\t\t}\n\t}\n\n\t// If a trashed post has the desired slug, change it and let this post have it.\n\tif ( 'trash' !== $post_status && $post_name ) {\n\t\twp_add_trashed_suffix_to_post_name_for_trashed_posts( $post_name, $post_ID );\n\t}\n\n\t// When trashing an existing post, change its slug to allow non-trashed posts to use it.\n\tif ( 'trash' === $post_status && 'trash' !== $previous_status && 'new' !== $previous_status ) {\n\t\t$post_name = wp_add_trashed_suffix_to_post_name_for_post( $post_ID );\n\t}\n\n\t$post_name = wp_unique_post_slug( $post_name, $post_ID, $post_status, $post_type, $post_parent );\n\n\t// Don't unslash.\n\t$post_mime_type = isset( $postarr['post_mime_type'] ) ? $postarr['post_mime_type'] : '';\n\n\t// Expected_slashed (everything!).\n\t$data = compact( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'post_mime_type', 'guid' );\n\n\t$emoji_fields = array( 'post_title', 'post_content', 'post_excerpt' );\n\n\tforeach ( $emoji_fields as $emoji_field ) {\n\t\tif ( isset( $data[ $emoji_field ] ) ) {\n\t\t\t$charset = $wpdb->get_col_charset( $wpdb->posts, $emoji_field );\n\t\t\tif ( 'utf8' === $charset ) {\n\t\t\t\t$data[ $emoji_field ] = wp_encode_emoji( $data[ $emoji_field ] );\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( 'attachment' === $post_type ) {\n\t\t/**\n\t\t * Filters attachment post data before it is updated in or added to the database.\n\t\t *\n\t\t * @since 3.9.0\n\t\t *\n\t\t * @param array $data    An array of sanitized attachment post data.\n\t\t * @param array $postarr An array of unsanitized attachment post data.\n\t\t */\n\t\t$data = apply_filters( 'wp_insert_attachment_data', $data, $postarr );\n\t} else {\n\t\t/**\n\t\t * Filters slashed post data just before it is inserted into the database.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param array $data    An array of slashed post data.\n\t\t * @param array $postarr An array of sanitized, but otherwise unmodified post data.\n\t\t */\n\t\t$data = apply_filters( 'wp_insert_post_data', $data, $postarr );\n\t}\n\t$data = wp_unslash( $data );\n\t$where = array( 'ID' => $post_ID );\n\n\tif ( $update ) {\n\t\t/**\n\t\t * Fires immediately before an existing post is updated in the database.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param int   $post_ID Post ID.\n\t\t * @param array $data    Array of unslashed post data.\n\t\t */\n\t\tdo_action( 'pre_post_update', $post_ID, $data );\n\t\tif ( false === $wpdb->update( $wpdb->posts, $data, $where ) ) {\n\t\t\tif ( $wp_error ) {\n\t\t\t\treturn new WP_Error('db_update_error', __('Could not update post in the database'), $wpdb->last_error);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// If there is a suggested ID, use it if not already present.\n\t\tif ( ! empty( $import_id ) ) {\n\t\t\t$import_id = (int) $import_id;\n\t\t\tif ( ! $wpdb->get_var( $wpdb->prepare(\"SELECT ID FROM $wpdb->posts WHERE ID = %d\", $import_id) ) ) {\n\t\t\t\t$data['ID'] = $import_id;\n\t\t\t}\n\t\t}\n\t\tif ( false === $wpdb->insert( $wpdb->posts, $data ) ) {\n\t\t\tif ( $wp_error ) {\n\t\t\t\treturn new WP_Error('db_insert_error', __('Could not insert post into the database'), $wpdb->last_error);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\t$post_ID = (int) $wpdb->insert_id;\n\n\t\t// Use the newly generated $post_ID.\n\t\t$where = array( 'ID' => $post_ID );\n\t}\n\n\tif ( empty( $data['post_name'] ) && ! in_array( $data['post_status'], array( 'draft', 'pending', 'auto-draft' ) ) ) {\n\t\t$data['post_name'] = wp_unique_post_slug( sanitize_title( $data['post_title'], $post_ID ), $post_ID, $data['post_status'], $post_type, $post_parent );\n\t\t$wpdb->update( $wpdb->posts, array( 'post_name' => $data['post_name'] ), $where );\n\t\tclean_post_cache( $post_ID );\n\t}\n\n\tif ( is_object_in_taxonomy( $post_type, 'category' ) ) {\n\t\twp_set_post_categories( $post_ID, $post_category );\n\t}\n\n\tif ( isset( $postarr['tags_input'] ) && is_object_in_taxonomy( $post_type, 'post_tag' ) ) {\n\t\twp_set_post_tags( $post_ID, $postarr['tags_input'] );\n\t}\n\n\t// New-style support for all custom taxonomies.\n\tif ( ! empty( $postarr['tax_input'] ) ) {\n\t\tforeach ( $postarr['tax_input'] as $taxonomy => $tags ) {\n\t\t\t$taxonomy_obj = get_taxonomy($taxonomy);\n\t\t\tif ( ! $taxonomy_obj ) {\n\t\t\t\t/* translators: %s: taxonomy name */\n\t\t\t\t_doing_it_wrong( __FUNCTION__, sprintf( __( 'Invalid taxonomy: %s.' ), $taxonomy ), '4.4.0' );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// array = hierarchical, string = non-hierarchical.\n\t\t\tif ( is_array( $tags ) ) {\n\t\t\t\t$tags = array_filter($tags);\n\t\t\t}\n\t\t\tif ( current_user_can( $taxonomy_obj->cap->assign_terms ) ) {\n\t\t\t\twp_set_post_terms( $post_ID, $tags, $taxonomy );\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! empty( $postarr['meta_input'] ) ) {\n\t\tforeach ( $postarr['meta_input'] as $field => $value ) {\n\t\t\tupdate_post_meta( $post_ID, $field, $value );\n\t\t}\n\t}\n\n\t$current_guid = get_post_field( 'guid', $post_ID );\n\n\t// Set GUID.\n\tif ( ! $update && '' == $current_guid ) {\n\t\t$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post_ID ) ), $where );\n\t}\n\n\tif ( 'attachment' === $postarr['post_type'] ) {\n\t\tif ( ! empty( $postarr['file'] ) ) {\n\t\t\tupdate_attached_file( $post_ID, $postarr['file'] );\n\t\t}\n\n\t\tif ( ! empty( $postarr['context'] ) ) {\n\t\t\tadd_post_meta( $post_ID, '_wp_attachment_context', $postarr['context'], true );\n\t\t}\n\t}\n\n\t// Set or remove featured image.\n\tif ( isset( $postarr['_thumbnail_id'] ) ) {\n\t\t$thumbnail_support = current_theme_supports( 'post-thumbnails', $post_type ) && post_type_supports( $post_type, 'thumbnail' ) || 'revision' === $post_type;\n\t\tif ( ! $thumbnail_support && 'attachment' === $post_type && $post_mime_type ) {\n\t\t\tif ( wp_attachment_is( 'audio', $post_ID ) ) {\n\t\t\t\t$thumbnail_support = post_type_supports( 'attachment:audio', 'thumbnail' ) || current_theme_supports( 'post-thumbnails', 'attachment:audio' );\n\t\t\t} elseif ( wp_attachment_is( 'video', $post_ID ) ) {\n\t\t\t\t$thumbnail_support = post_type_supports( 'attachment:video', 'thumbnail' ) || current_theme_supports( 'post-thumbnails', 'attachment:video' );\n\t\t\t}\n\t\t}\n\n\t\tif ( $thumbnail_support ) {\n\t\t\t$thumbnail_id = intval( $postarr['_thumbnail_id'] );\n\t\t\tif ( -1 === $thumbnail_id ) {\n\t\t\t\tdelete_post_thumbnail( $post_ID );\n\t\t\t} else {\n\t\t\t\tset_post_thumbnail( $post_ID, $thumbnail_id );\n\t\t\t}\n\t\t}\n\t}\n\n\tclean_post_cache( $post_ID );\n\n\t$post = get_post( $post_ID );\n\n\tif ( ! empty( $postarr['page_template'] ) ) {\n\t\t$post->page_template = $postarr['page_template'];\n\t\t$page_templates = wp_get_theme()->get_page_templates( $post );\n\t\tif ( 'default' != $postarr['page_template'] && ! isset( $page_templates[ $postarr['page_template'] ] ) ) {\n\t\t\tif ( $wp_error ) {\n\t\t\t\treturn new WP_Error( 'invalid_page_template', __( 'Invalid page template.' ) );\n\t\t\t}\n\t\t\tupdate_post_meta( $post_ID, '_wp_page_template', 'default' );\n\t\t} else {\n\t\t\tupdate_post_meta( $post_ID, '_wp_page_template', $postarr['page_template'] );\n\t\t}\n\t}\n\n\tif ( 'attachment' !== $postarr['post_type'] ) {\n\t\twp_transition_post_status( $data['post_status'], $previous_status, $post );\n\t} else {\n\t\tif ( $update ) {\n\t\t\t/**\n\t\t\t * Fires once an existing attachment has been updated.\n\t\t\t *\n\t\t\t * @since 2.0.0\n\t\t\t *\n\t\t\t * @param int $post_ID Attachment ID.\n\t\t\t */\n\t\t\tdo_action( 'edit_attachment', $post_ID );\n\t\t\t$post_after = get_post( $post_ID );\n\n\t\t\t/**\n\t\t\t * Fires once an existing attachment has been updated.\n\t\t\t *\n\t\t\t * @since 4.4.0\n\t\t\t *\n\t\t\t * @param int     $post_ID      Post ID.\n\t\t\t * @param WP_Post $post_after   Post object following the update.\n\t\t\t * @param WP_Post $post_before  Post object before the update.\n\t\t\t */\n\t\t\tdo_action( 'attachment_updated', $post_ID, $post_after, $post_before );\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * Fires once an attachment has been added.\n\t\t\t *\n\t\t\t * @since 2.0.0\n\t\t\t *\n\t\t\t * @param int $post_ID Attachment ID.\n\t\t\t */\n\t\t\tdo_action( 'add_attachment', $post_ID );\n\t\t}\n\n\t\treturn $post_ID;\n\t}\n\n\tif ( $update ) {\n\t\t/**\n\t\t * Fires once an existing post has been updated.\n\t\t *\n\t\t * @since 1.2.0\n\t\t *\n\t\t * @param int     $post_ID Post ID.\n\t\t * @param WP_Post $post    Post object.\n\t\t */\n\t\tdo_action( 'edit_post', $post_ID, $post );\n\t\t$post_after = get_post($post_ID);\n\n\t\t/**\n\t\t * Fires once an existing post has been updated.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param int     $post_ID      Post ID.\n\t\t * @param WP_Post $post_after   Post object following the update.\n\t\t * @param WP_Post $post_before  Post object before the update.\n\t\t */\n\t\tdo_action( 'post_updated', $post_ID, $post_after, $post_before);\n\t}\n\n\t/**\n\t * Fires once a post has been saved.\n\t *\n\t * The dynamic portion of the hook name, `$post->post_type`, refers to\n\t * the post type slug.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param int     $post_ID Post ID.\n\t * @param WP_Post $post    Post object.\n\t * @param bool    $update  Whether this is an existing post being updated or not.\n\t */\n\tdo_action( \"save_post_{$post->post_type}\", $post_ID, $post, $update );\n\n\t/**\n\t * Fires once a post has been saved.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param int     $post_ID Post ID.\n\t * @param WP_Post $post    Post object.\n\t * @param bool    $update  Whether this is an existing post being updated or not.\n\t */\n\tdo_action( 'save_post', $post_ID, $post, $update );\n\n\t/**\n\t * Fires once a post has been saved.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param int     $post_ID Post ID.\n\t * @param WP_Post $post    Post object.\n\t * @param bool    $update  Whether this is an existing post being updated or not.\n\t */\n\tdo_action( 'wp_insert_post', $post_ID, $post, $update );\n\n\treturn $post_ID;\n}\n\n/**\n * Update a post with new post data.\n *\n * The date does not have to be set for drafts. You can set the date and it will\n * not be overridden.\n *\n * @since 1.0.0\n *\n * @param array|object $postarr  Optional. Post data. Arrays are expected to be escaped,\n *                               objects are not. Default array.\n * @param bool         $wp_error Optional. Allow return of WP_Error on failure. Default false.\n * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success.\n */\nfunction wp_update_post( $postarr = array(), $wp_error = false ) {\n\tif ( is_object($postarr) ) {\n\t\t// Non-escaped post was passed.\n\t\t$postarr = get_object_vars($postarr);\n\t\t$postarr = wp_slash($postarr);\n\t}\n\n\t// First, get all of the original fields.\n\t$post = get_post($postarr['ID'], ARRAY_A);\n\n\tif ( is_null( $post ) ) {\n\t\tif ( $wp_error )\n\t\t\treturn new WP_Error( 'invalid_post', __( 'Invalid post ID.' ) );\n\t\treturn 0;\n\t}\n\n\t// Escape data pulled from DB.\n\t$post = wp_slash($post);\n\n\t// Passed post category list overwrites existing category list if not empty.\n\tif ( isset($postarr['post_category']) && is_array($postarr['post_category'])\n\t\t\t && 0 != count($postarr['post_category']) )\n\t\t$post_cats = $postarr['post_category'];\n\telse\n\t\t$post_cats = $post['post_category'];\n\n\t// Drafts shouldn't be assigned a date unless explicitly done so by the user.\n\tif ( isset( $post['post_status'] ) && in_array($post['post_status'], array('draft', 'pending', 'auto-draft')) && empty($postarr['edit_date']) &&\n\t\t\t ('0000-00-00 00:00:00' == $post['post_date_gmt']) )\n\t\t$clear_date = true;\n\telse\n\t\t$clear_date = false;\n\n\t// Merge old and new fields with new fields overwriting old ones.\n\t$postarr = array_merge($post, $postarr);\n\t$postarr['post_category'] = $post_cats;\n\tif ( $clear_date ) {\n\t\t$postarr['post_date'] = current_time('mysql');\n\t\t$postarr['post_date_gmt'] = '';\n\t}\n\n\tif ($postarr['post_type'] == 'attachment')\n\t\treturn wp_insert_attachment($postarr);\n\n\treturn wp_insert_post( $postarr, $wp_error );\n}\n\n/**\n * Publish a post by transitioning the post status.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post $post Post ID or post object.\n */\nfunction wp_publish_post( $post ) {\n\tglobal $wpdb;\n\n\tif ( ! $post = get_post( $post ) )\n\t\treturn;\n\n\tif ( 'publish' == $post->post_status )\n\t\treturn;\n\n\t$wpdb->update( $wpdb->posts, array( 'post_status' => 'publish' ), array( 'ID' => $post->ID ) );\n\n\tclean_post_cache( $post->ID );\n\n\t$old_status = $post->post_status;\n\t$post->post_status = 'publish';\n\twp_transition_post_status( 'publish', $old_status, $post );\n\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( 'edit_post', $post->ID, $post );\n\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( \"save_post_{$post->post_type}\", $post->ID, $post, true );\n\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( 'save_post', $post->ID, $post, true );\n\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( 'wp_insert_post', $post->ID, $post, true );\n}\n\n/**\n * Publish future post and make sure post ID has future post status.\n *\n * Invoked by cron 'publish_future_post' event. This safeguard prevents cron\n * from publishing drafts, etc.\n *\n * @since 2.5.0\n *\n * @param int|WP_Post $post_id Post ID or post object.\n */\nfunction check_and_publish_future_post( $post_id ) {\n\t$post = get_post($post_id);\n\n\tif ( empty($post) )\n\t\treturn;\n\n\tif ( 'future' != $post->post_status )\n\t\treturn;\n\n\t$time = strtotime( $post->post_date_gmt . ' GMT' );\n\n\t// Uh oh, someone jumped the gun!\n\tif ( $time > time() ) {\n\t\twp_clear_scheduled_hook( 'publish_future_post', array( $post_id ) ); // clear anything else in the system\n\t\twp_schedule_single_event( $time, 'publish_future_post', array( $post_id ) );\n\t\treturn;\n\t}\n\n\t// wp_publish_post() returns no meaningful value.\n\twp_publish_post( $post_id );\n}\n\n/**\n * Computes a unique slug for the post, when given the desired slug and some post details.\n *\n * @since 2.8.0\n *\n * @global wpdb       $wpdb WordPress database abstraction object.\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $slug        The desired slug (post_name).\n * @param int    $post_ID     Post ID.\n * @param string $post_status No uniqueness checks are made if the post is still draft or pending.\n * @param string $post_type   Post type.\n * @param int    $post_parent Post parent ID.\n * @return string Unique slug for the post, based on $post_name (with a -1, -2, etc. suffix)\n */\nfunction wp_unique_post_slug( $slug, $post_ID, $post_status, $post_type, $post_parent ) {\n\tif ( in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) || ( 'inherit' == $post_status && 'revision' == $post_type ) )\n\t\treturn $slug;\n\n\tglobal $wpdb, $wp_rewrite;\n\n\t$original_slug = $slug;\n\n\t$feeds = $wp_rewrite->feeds;\n\tif ( ! is_array( $feeds ) )\n\t\t$feeds = array();\n\n\tif ( 'attachment' == $post_type ) {\n\t\t// Attachment slugs must be unique across all types.\n\t\t$check_sql = \"SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND ID != %d LIMIT 1\";\n\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID ) );\n\n\t\t/**\n\t\t * Filters whether the post slug would make a bad attachment slug.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool   $bad_slug Whether the slug would be bad as an attachment slug.\n\t\t * @param string $slug     The post slug.\n\t\t */\n\t\tif ( $post_name_check || in_array( $slug, $feeds ) || 'embed' === $slug || apply_filters( 'wp_unique_post_slug_is_bad_attachment_slug', false, $slug ) ) {\n\t\t\t$suffix = 2;\n\t\t\tdo {\n\t\t\t\t$alt_post_name = _truncate_post_slug( $slug, 200 - ( strlen( $suffix ) + 1 ) ) . \"-$suffix\";\n\t\t\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_ID ) );\n\t\t\t\t$suffix++;\n\t\t\t} while ( $post_name_check );\n\t\t\t$slug = $alt_post_name;\n\t\t}\n\t} elseif ( is_post_type_hierarchical( $post_type ) ) {\n\t\tif ( 'nav_menu_item' == $post_type )\n\t\t\treturn $slug;\n\n\t\t/*\n\t\t * Page slugs must be unique within their own trees. Pages are in a separate\n\t\t * namespace than posts so page slugs are allowed to overlap post slugs.\n\t\t */\n\t\t$check_sql = \"SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type IN ( %s, 'attachment' ) AND ID != %d AND post_parent = %d LIMIT 1\";\n\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_type, $post_ID, $post_parent ) );\n\n\t\t/**\n\t\t * Filters whether the post slug would make a bad hierarchical post slug.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool   $bad_slug    Whether the post slug would be bad in a hierarchical post context.\n\t\t * @param string $slug        The post slug.\n\t\t * @param string $post_type   Post type.\n\t\t * @param int    $post_parent Post parent ID.\n\t\t */\n\t\tif ( $post_name_check || in_array( $slug, $feeds ) || 'embed' === $slug || preg_match( \"@^($wp_rewrite->pagination_base)?\\d+$@\", $slug )  || apply_filters( 'wp_unique_post_slug_is_bad_hierarchical_slug', false, $slug, $post_type, $post_parent ) ) {\n\t\t\t$suffix = 2;\n\t\t\tdo {\n\t\t\t\t$alt_post_name = _truncate_post_slug( $slug, 200 - ( strlen( $suffix ) + 1 ) ) . \"-$suffix\";\n\t\t\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_type, $post_ID, $post_parent ) );\n\t\t\t\t$suffix++;\n\t\t\t} while ( $post_name_check );\n\t\t\t$slug = $alt_post_name;\n\t\t}\n\t} else {\n\t\t// Post slugs must be unique across all posts.\n\t\t$check_sql = \"SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type = %s AND ID != %d LIMIT 1\";\n\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_type, $post_ID ) );\n\n\t\t// Prevent new post slugs that could result in URLs that conflict with date archives.\n\t\t$post = get_post( $post_ID );\n\t\t$conflicts_with_date_archive = false;\n\t\tif ( 'post' === $post_type && ( ! $post || $post->post_name !== $slug ) && preg_match( '/^[0-9]+$/', $slug ) && $slug_num = intval( $slug ) ) {\n\t\t\t$permastructs   = array_values( array_filter( explode( '/', get_option( 'permalink_structure' ) ) ) );\n\t\t\t$postname_index = array_search( '%postname%', $permastructs );\n\n\t\t\t/*\n\t\t\t * Potential date clashes are as follows:\n\t\t\t *\n\t\t\t * - Any integer in the first permastruct position could be a year.\n\t\t\t * - An integer between 1 and 12 that follows 'year' conflicts with 'monthnum'.\n\t\t\t * - An integer between 1 and 31 that follows 'monthnum' conflicts with 'day'.\n\t\t\t */\n\t\t\tif ( 0 === $postname_index ||\n\t\t\t\t( $postname_index && '%year%' === $permastructs[ $postname_index - 1 ] && 13 > $slug_num ) ||\n\t\t\t\t( $postname_index && '%monthnum%' === $permastructs[ $postname_index - 1 ] && 32 > $slug_num )\n\t\t\t) {\n\t\t\t\t$conflicts_with_date_archive = true;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters whether the post slug would be bad as a flat slug.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool   $bad_slug  Whether the post slug would be bad as a flat slug.\n\t\t * @param string $slug      The post slug.\n\t\t * @param string $post_type Post type.\n\t\t */\n\t\tif ( $post_name_check || in_array( $slug, $feeds ) || 'embed' === $slug || $conflicts_with_date_archive || apply_filters( 'wp_unique_post_slug_is_bad_flat_slug', false, $slug, $post_type ) ) {\n\t\t\t$suffix = 2;\n\t\t\tdo {\n\t\t\t\t$alt_post_name = _truncate_post_slug( $slug, 200 - ( strlen( $suffix ) + 1 ) ) . \"-$suffix\";\n\t\t\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_type, $post_ID ) );\n\t\t\t\t$suffix++;\n\t\t\t} while ( $post_name_check );\n\t\t\t$slug = $alt_post_name;\n\t\t}\n\t}\n\n\t/**\n\t * Filters the unique post slug.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $slug          The post slug.\n\t * @param int    $post_ID       Post ID.\n\t * @param string $post_status   The post status.\n\t * @param string $post_type     Post type.\n\t * @param int    $post_parent   Post parent ID\n\t * @param string $original_slug The original post slug.\n\t */\n\treturn apply_filters( 'wp_unique_post_slug', $slug, $post_ID, $post_status, $post_type, $post_parent, $original_slug );\n}\n\n/**\n * Truncate a post slug.\n *\n * @since 3.6.0\n * @access private\n *\n * @see utf8_uri_encode()\n *\n * @param string $slug   The slug to truncate.\n * @param int    $length Optional. Max length of the slug. Default 200 (characters).\n * @return string The truncated slug.\n */\nfunction _truncate_post_slug( $slug, $length = 200 ) {\n\tif ( strlen( $slug ) > $length ) {\n\t\t$decoded_slug = urldecode( $slug );\n\t\tif ( $decoded_slug === $slug )\n\t\t\t$slug = substr( $slug, 0, $length );\n\t\telse\n\t\t\t$slug = utf8_uri_encode( $decoded_slug, $length );\n\t}\n\n\treturn rtrim( $slug, '-' );\n}\n\n/**\n * Add tags to a post.\n *\n * @see wp_set_post_tags()\n *\n * @since 2.3.0\n *\n * @param int          $post_id Optional. The Post ID. Does not default to the ID of the global $post.\n * @param string|array $tags    Optional. An array of tags to set for the post, or a string of tags\n *                              separated by commas. Default empty.\n * @return array|false|WP_Error Array of affected term IDs. WP_Error or false on failure.\n */\nfunction wp_add_post_tags( $post_id = 0, $tags = '' ) {\n\treturn wp_set_post_tags($post_id, $tags, true);\n}\n\n/**\n * Set the tags for a post.\n *\n * @since 2.3.0\n *\n * @see wp_set_object_terms()\n *\n * @param int          $post_id Optional. The Post ID. Does not default to the ID of the global $post.\n * @param string|array $tags    Optional. An array of tags to set for the post, or a string of tags\n *                              separated by commas. Default empty.\n * @param bool         $append  Optional. If true, don't delete existing tags, just add on. If false,\n *                              replace the tags with the new tags. Default false.\n * @return array|false|WP_Error Array of term taxonomy IDs of affected terms. WP_Error or false on failure.\n */\nfunction wp_set_post_tags( $post_id = 0, $tags = '', $append = false ) {\n\treturn wp_set_post_terms( $post_id, $tags, 'post_tag', $append);\n}\n\n/**\n * Set the terms for a post.\n *\n * @since 2.8.0\n *\n * @see wp_set_object_terms()\n *\n * @param int          $post_id  Optional. The Post ID. Does not default to the ID of the global $post.\n * @param string|array $tags     Optional. An array of terms to set for the post, or a string of terms\n *                               separated by commas. Default empty.\n * @param string       $taxonomy Optional. Taxonomy name. Default 'post_tag'.\n * @param bool         $append   Optional. If true, don't delete existing terms, just add on. If false,\n *                               replace the terms with the new terms. Default false.\n * @return array|false|WP_Error Array of term taxonomy IDs of affected terms. WP_Error or false on failure.\n */\nfunction wp_set_post_terms( $post_id = 0, $tags = '', $taxonomy = 'post_tag', $append = false ) {\n\t$post_id = (int) $post_id;\n\n\tif ( !$post_id )\n\t\treturn false;\n\n\tif ( empty($tags) )\n\t\t$tags = array();\n\n\tif ( ! is_array( $tags ) ) {\n\t\t$comma = _x( ',', 'tag delimiter' );\n\t\tif ( ',' !== $comma )\n\t\t\t$tags = str_replace( $comma, ',', $tags );\n\t\t$tags = explode( ',', trim( $tags, \" \\n\\t\\r\\0\\x0B,\" ) );\n\t}\n\n\t/*\n\t * Hierarchical taxonomies must always pass IDs rather than names so that\n\t * children with the same names but different parents aren't confused.\n\t */\n\tif ( is_taxonomy_hierarchical( $taxonomy ) ) {\n\t\t$tags = array_unique( array_map( 'intval', $tags ) );\n\t}\n\n\treturn wp_set_object_terms( $post_id, $tags, $taxonomy, $append );\n}\n\n/**\n * Set categories for a post.\n *\n * If the post categories parameter is not set, then the default category is\n * going used.\n *\n * @since 2.1.0\n *\n * @param int       $post_ID         Optional. The Post ID. Does not default to the ID\n *                                   of the global $post. Default 0.\n * @param array|int $post_categories Optional. List of categories or ID of category.\n *                                   Default empty array.\n * @param bool      $append         If true, don't delete existing categories, just add on.\n *                                  If false, replace the categories with the new categories.\n * @return array|false|WP_Error Array of term taxonomy IDs of affected categories. WP_Error or false on failure.\n */\nfunction wp_set_post_categories( $post_ID = 0, $post_categories = array(), $append = false ) {\n\t$post_ID = (int) $post_ID;\n\t$post_type = get_post_type( $post_ID );\n\t$post_status = get_post_status( $post_ID );\n\t// If $post_categories isn't already an array, make it one:\n\t$post_categories = (array) $post_categories;\n\tif ( empty( $post_categories ) ) {\n\t\tif ( 'post' == $post_type && 'auto-draft' != $post_status ) {\n\t\t\t$post_categories = array( get_option('default_category') );\n\t\t\t$append = false;\n\t\t} else {\n\t\t\t$post_categories = array();\n\t\t}\n\t} elseif ( 1 == count( $post_categories ) && '' == reset( $post_categories ) ) {\n\t\treturn true;\n\t}\n\n\treturn wp_set_post_terms( $post_ID, $post_categories, 'category', $append );\n}\n\n/**\n * Fires actions related to the transitioning of a post's status.\n *\n * When a post is saved, the post status is \"transitioned\" from one status to another,\n * though this does not always mean the status has actually changed before and after\n * the save. This function fires a number of action hooks related to that transition:\n * the generic {@see 'transition_post_status'} action, as well as the dynamic hooks\n * {@see '$old_status_to_$new_status'} and {@see '$new_status_$post->post_type'}. Note\n * that the function does not transition the post object in the database.\n *\n * For instance: When publishing a post for the first time, the post status may transition\n * from 'draft' \u2013 or some other status \u2013 to 'publish'. However, if a post is already\n * published and is simply being updated, the \"old\" and \"new\" statuses may both be 'publish'\n * before and after the transition.\n *\n * @since 2.3.0\n *\n * @param string  $new_status Transition to this post status.\n * @param string  $old_status Previous post status.\n * @param WP_Post $post Post data.\n */\nfunction wp_transition_post_status( $new_status, $old_status, $post ) {\n\t/**\n\t * Fires when a post is transitioned from one status to another.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string  $new_status New post status.\n\t * @param string  $old_status Old post status.\n\t * @param WP_Post $post       Post object.\n\t */\n\tdo_action( 'transition_post_status', $new_status, $old_status, $post );\n\n\t/**\n\t * Fires when a post is transitioned from one status to another.\n\t *\n\t * The dynamic portions of the hook name, `$new_status` and `$old status`,\n\t * refer to the old and new post statuses, respectively.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param WP_Post $post Post object.\n\t */\n\tdo_action( \"{$old_status}_to_{$new_status}\", $post );\n\n\t/**\n\t * Fires when a post is transitioned from one status to another.\n\t *\n\t * The dynamic portions of the hook name, `$new_status` and `$post->post_type`,\n\t * refer to the new post status and post type, respectively.\n\t *\n\t * Please note: When this action is hooked using a particular post status (like\n\t * 'publish', as `publish_{$post->post_type}`), it will fire both when a post is\n\t * first transitioned to that status from something else, as well as upon\n\t * subsequent post updates (old and new status are both the same).\n\t *\n\t * Therefore, if you are looking to only fire a callback when a post is first\n\t * transitioned to a status, use the {@see 'transition_post_status'} hook instead.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param int     $post_id Post ID.\n\t * @param WP_Post $post    Post object.\n\t */\n\tdo_action( \"{$new_status}_{$post->post_type}\", $post->ID, $post );\n}\n\n//\n// Comment, trackback, and pingback functions.\n//\n\n/**\n * Add a URL to those already pinged.\n *\n * @since 1.5.0\n * @since 4.7.0 $post_id can be a WP_Post object.\n * @since 4.7.0 $uri can be an array of URIs.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post  $post_id Post object or ID.\n * @param string|array $uri     Ping URI or array of URIs.\n * @return int|false How many rows were updated.\n */\nfunction add_ping( $post_id, $uri ) {\n\tglobal $wpdb;\n\n\t$post = get_post( $post_id );\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\t$pung = trim( $post->pinged );\n\t$pung = preg_split( '/\\s/', $pung );\n\n\tif ( is_array( $uri ) ) {\n\t\t$pung = array_merge( $pung, $uri );\n\t}\n\telse {\n\t\t$pung[] = $uri;\n\t}\n\t$new = implode(\"\\n\", $pung);\n\n\t/**\n\t * Filters the new ping URL to add for the given post.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param string $new New ping URL to add.\n\t */\n\t$new = apply_filters( 'add_ping', $new );\n\n\t$return = $wpdb->update( $wpdb->posts, array( 'pinged' => $new ), array( 'ID' => $post->ID ) );\n\tclean_post_cache( $post->ID );\n\treturn $return;\n}\n\n/**\n * Retrieve enclosures already enclosed for a post.\n *\n * @since 1.5.0\n *\n * @param int $post_id Post ID.\n * @return array List of enclosures.\n */\nfunction get_enclosed( $post_id ) {\n\t$custom_fields = get_post_custom( $post_id );\n\t$pung = array();\n\tif ( !is_array( $custom_fields ) )\n\t\treturn $pung;\n\n\tforeach ( $custom_fields as $key => $val ) {\n\t\tif ( 'enclosure' != $key || !is_array( $val ) )\n\t\t\tcontinue;\n\t\tforeach ( $val as $enc ) {\n\t\t\t$enclosure = explode( \"\\n\", $enc );\n\t\t\t$pung[] = trim( $enclosure[ 0 ] );\n\t\t}\n\t}\n\n\t/**\n\t * Filters the list of enclosures already enclosed for the given post.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param array $pung    Array of enclosures for the given post.\n\t * @param int   $post_id Post ID.\n\t */\n\treturn apply_filters( 'get_enclosed', $pung, $post_id );\n}\n\n/**\n * Retrieve URLs already pinged for a post.\n *\n * @since 1.5.0\n *\n * @since 4.7.0 $post_id can be a WP_Post object.\n *\n * @param int|WP_Post $post_id Post ID or object.\n * @return array\n */\nfunction get_pung( $post_id ) {\n\t$post = get_post( $post_id );\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\t$pung = trim( $post->pinged );\n\t$pung = preg_split( '/\\s/', $pung );\n\n\t/**\n\t * Filters the list of already-pinged URLs for the given post.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param array $pung Array of URLs already pinged for the given post.\n\t */\n\treturn apply_filters( 'get_pung', $pung );\n}\n\n/**\n * Retrieve URLs that need to be pinged.\n *\n * @since 1.5.0\n * @since 4.7.0 $post_id can be a WP_Post object.\n *\n * @param int|WP_Post $post_id Post Object or ID\n * @return array\n */\nfunction get_to_ping( $post_id ) {\n\t$post = get_post( $post_id );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\t$to_ping = sanitize_trackback_urls( $post->to_ping );\n\t$to_ping = preg_split('/\\s/', $to_ping, -1, PREG_SPLIT_NO_EMPTY);\n\n\t/**\n\t * Filters the list of URLs yet to ping for the given post.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param array $to_ping List of URLs yet to ping.\n\t */\n\treturn apply_filters( 'get_to_ping', $to_ping );\n}\n\n/**\n * Do trackbacks for a list of URLs.\n *\n * @since 1.0.0\n *\n * @param string $tb_list Comma separated list of URLs.\n * @param int    $post_id Post ID.\n */\nfunction trackback_url_list( $tb_list, $post_id ) {\n\tif ( ! empty( $tb_list ) ) {\n\t\t// Get post data.\n\t\t$postdata = get_post( $post_id, ARRAY_A );\n\n\t\t// Form an excerpt.\n\t\t$excerpt = strip_tags( $postdata['post_excerpt'] ? $postdata['post_excerpt'] : $postdata['post_content'] );\n\n\t\tif ( strlen( $excerpt ) > 255 ) {\n\t\t\t$excerpt = substr( $excerpt, 0, 252 ) . '&hellip;';\n\t\t}\n\n\t\t$trackback_urls = explode( ',', $tb_list );\n\t\tforeach ( (array) $trackback_urls as $tb_url ) {\n\t\t\t$tb_url = trim( $tb_url );\n\t\t\ttrackback( $tb_url, wp_unslash( $postdata['post_title'] ), $excerpt, $post_id );\n\t\t}\n\t}\n}\n\n//\n// Page functions\n//\n\n/**\n * Get a list of page IDs.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return array List of page IDs.\n */\nfunction get_all_page_ids() {\n\tglobal $wpdb;\n\n\t$page_ids = wp_cache_get('all_page_ids', 'posts');\n\tif ( ! is_array( $page_ids ) ) {\n\t\t$page_ids = $wpdb->get_col(\"SELECT ID FROM $wpdb->posts WHERE post_type = 'page'\");\n\t\twp_cache_add('all_page_ids', $page_ids, 'posts');\n\t}\n\n\treturn $page_ids;\n}\n\n/**\n * Retrieves page data given a page ID or page object.\n *\n * Use get_post() instead of get_page().\n *\n * @since 1.5.1\n * @deprecated 3.5.0 Use get_post()\n *\n * @param mixed  $page   Page object or page ID. Passed by reference.\n * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                       a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string $filter Optional. How the return value should be filtered. Accepts 'raw',\n *                       'edit', 'db', 'display'. Default 'raw'.\n * @return WP_Post|array|null WP_Post (or array) on success, or null on failure.\n */\nfunction get_page( $page, $output = OBJECT, $filter = 'raw') {\n\treturn get_post( $page, $output, $filter );\n}\n\n/**\n * Retrieves a page given its path.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string       $page_path Page path.\n * @param string       $output    Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string|array $post_type Optional. Post type or array of post types. Default 'page'.\n * @return WP_Post|array|null WP_Post (or array) on success, or null on failure.\n */\nfunction get_page_by_path( $page_path, $output = OBJECT, $post_type = 'page' ) {\n\tglobal $wpdb;\n\n\t$last_changed = wp_cache_get_last_changed( 'posts' );\n\n\t$hash = md5( $page_path . serialize( $post_type ) );\n\t$cache_key = \"get_page_by_path:$hash:$last_changed\";\n\t$cached = wp_cache_get( $cache_key, 'posts' );\n\tif ( false !== $cached ) {\n\t\t// Special case: '0' is a bad `$page_path`.\n\t\tif ( '0' === $cached || 0 === $cached ) {\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn get_post( $cached, $output );\n\t\t}\n\t}\n\n\t$page_path = rawurlencode(urldecode($page_path));\n\t$page_path = str_replace('%2F', '/', $page_path);\n\t$page_path = str_replace('%20', ' ', $page_path);\n\t$parts = explode( '/', trim( $page_path, '/' ) );\n\t$parts = esc_sql( $parts );\n\t$parts = array_map( 'sanitize_title_for_query', $parts );\n\n\t$in_string = \"'\" . implode( \"','\", $parts ) . \"'\";\n\n\tif ( is_array( $post_type ) ) {\n\t\t$post_types = $post_type;\n\t} else {\n\t\t$post_types = array( $post_type, 'attachment' );\n\t}\n\n\t$post_types = esc_sql( $post_types );\n\t$post_type_in_string = \"'\" . implode( \"','\", $post_types ) . \"'\";\n\t$sql = \"\n\t\tSELECT ID, post_name, post_parent, post_type\n\t\tFROM $wpdb->posts\n\t\tWHERE post_name IN ($in_string)\n\t\tAND post_type IN ($post_type_in_string)\n\t\";\n\n\t$pages = $wpdb->get_results( $sql, OBJECT_K );\n\n\t$revparts = array_reverse( $parts );\n\n\t$foundid = 0;\n\tforeach ( (array) $pages as $page ) {\n\t\tif ( $page->post_name == $revparts[0] ) {\n\t\t\t$count = 0;\n\t\t\t$p = $page;\n\n\t\t\t/*\n\t\t\t * Loop through the given path parts from right to left,\n\t\t\t * ensuring each matches the post ancestry.\n\t\t\t */\n\t\t\twhile ( $p->post_parent != 0 && isset( $pages[ $p->post_parent ] ) ) {\n\t\t\t\t$count++;\n\t\t\t\t$parent = $pages[ $p->post_parent ];\n\t\t\t\tif ( ! isset( $revparts[ $count ] ) || $parent->post_name != $revparts[ $count ] )\n\t\t\t\t\tbreak;\n\t\t\t\t$p = $parent;\n\t\t\t}\n\n\t\t\tif ( $p->post_parent == 0 && $count+1 == count( $revparts ) && $p->post_name == $revparts[ $count ] ) {\n\t\t\t\t$foundid = $page->ID;\n\t\t\t\tif ( $page->post_type == $post_type )\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// We cache misses as well as hits.\n\twp_cache_set( $cache_key, $foundid, 'posts' );\n\n\tif ( $foundid ) {\n\t\treturn get_post( $foundid, $output );\n\t}\n}\n\n/**\n * Retrieve a page given its title.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string       $page_title Page title\n * @param string       $output     Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                 a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string|array $post_type  Optional. Post type or array of post types. Default 'page'.\n * @return WP_Post|array|null WP_Post (or array) on success, or null on failure.\n */\nfunction get_page_by_title( $page_title, $output = OBJECT, $post_type = 'page' ) {\n\tglobal $wpdb;\n\n\tif ( is_array( $post_type ) ) {\n\t\t$post_type = esc_sql( $post_type );\n\t\t$post_type_in_string = \"'\" . implode( \"','\", $post_type ) . \"'\";\n\t\t$sql = $wpdb->prepare( \"\n\t\t\tSELECT ID\n\t\t\tFROM $wpdb->posts\n\t\t\tWHERE post_title = %s\n\t\t\tAND post_type IN ($post_type_in_string)\n\t\t\", $page_title );\n\t} else {\n\t\t$sql = $wpdb->prepare( \"\n\t\t\tSELECT ID\n\t\t\tFROM $wpdb->posts\n\t\t\tWHERE post_title = %s\n\t\t\tAND post_type = %s\n\t\t\", $page_title, $post_type );\n\t}\n\n\t$page = $wpdb->get_var( $sql );\n\n\tif ( $page ) {\n\t\treturn get_post( $page, $output );\n\t}\n}\n\n/**\n * Identify descendants of a given page ID in a list of page objects.\n *\n * Descendants are identified from the `$pages` array passed to the function. No database queries are performed.\n *\n * @since 1.5.1\n *\n * @param int   $page_id Page ID.\n * @param array $pages   List of page objects from which descendants should be identified.\n * @return array List of page children.\n */\nfunction get_page_children( $page_id, $pages ) {\n\t// Build a hash of ID -> children.\n\t$children = array();\n\tforeach ( (array) $pages as $page ) {\n\t\t$children[ intval( $page->post_parent ) ][] = $page;\n\t}\n\n\t$page_list = array();\n\n\t// Start the search by looking at immediate children.\n\tif ( isset( $children[ $page_id ] ) ) {\n\t\t// Always start at the end of the stack in order to preserve original `$pages` order.\n\t\t$to_look = array_reverse( $children[ $page_id ] );\n\n\t\twhile ( $to_look ) {\n\t\t\t$p = array_pop( $to_look );\n\t\t\t$page_list[] = $p;\n\t\t\tif ( isset( $children[ $p->ID ] ) ) {\n\t\t\t\tforeach ( array_reverse( $children[ $p->ID ] ) as $child ) {\n\t\t\t\t\t// Append to the `$to_look` stack to descend the tree.\n\t\t\t\t\t$to_look[] = $child;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $page_list;\n}\n\n/**\n * Order the pages with children under parents in a flat list.\n *\n * It uses auxiliary structure to hold parent-children relationships and\n * runs in O(N) complexity\n *\n * @since 2.0.0\n *\n * @param array $pages   Posts array (passed by reference).\n * @param int   $page_id Optional. Parent page ID. Default 0.\n * @return array A list arranged by hierarchy. Children immediately follow their parents.\n */\nfunction get_page_hierarchy( &$pages, $page_id = 0 ) {\n\tif ( empty( $pages ) ) {\n\t\treturn array();\n\t}\n\n\t$children = array();\n\tforeach ( (array) $pages as $p ) {\n\t\t$parent_id = intval( $p->post_parent );\n\t\t$children[ $parent_id ][] = $p;\n\t}\n\n\t$result = array();\n\t_page_traverse_name( $page_id, $children, $result );\n\n\treturn $result;\n}\n\n/**\n * Traverse and return all the nested children post names of a root page.\n *\n * $children contains parent-children relations\n *\n * @since 2.9.0\n *\n * @see _page_traverse_name()\n *\n * @param int   $page_id   Page ID.\n * @param array $children  Parent-children relations (passed by reference).\n * @param array $result    Result (passed by reference).\n */\nfunction _page_traverse_name( $page_id, &$children, &$result ){\n\tif ( isset( $children[ $page_id ] ) ){\n\t\tforeach ( (array)$children[ $page_id ] as $child ) {\n\t\t\t$result[ $child->ID ] = $child->post_name;\n\t\t\t_page_traverse_name( $child->ID, $children, $result );\n\t\t}\n\t}\n}\n\n/**\n * Build the URI path for a page.\n *\n * Sub pages will be in the \"directory\" under the parent page post name.\n *\n * @since 1.5.0\n * @since 4.6.0 Converted the `$page` parameter to optional.\n *\n * @param WP_Post|object|int $page Optional. Page ID or WP_Post object. Default is global $post.\n * @return string|false Page URI, false on error.\n */\nfunction get_page_uri( $page = 0 ) {\n\tif ( ! $page instanceof WP_Post ) {\n\t\t$page = get_post( $page );\n\t}\n\n\tif ( ! $page )\n\t\treturn false;\n\n\t$uri = $page->post_name;\n\n\tforeach ( $page->ancestors as $parent ) {\n\t\t$parent = get_post( $parent );\n\t\tif ( $parent && $parent->post_name ) {\n\t\t\t$uri = $parent->post_name . '/' . $uri;\n\t\t}\n\t}\n\n\t/**\n\t * Filters the URI for a page.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string  $uri  Page URI.\n\t * @param WP_Post $page Page object.\n\t */\n\treturn apply_filters( 'get_page_uri', $uri, $page );\n}\n\n/**\n * Retrieve a list of pages (or hierarchical post type items).\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @since 1.5.0\n *\n * @param array|string $args {\n *     Optional. Array or string of arguments to retrieve pages.\n *\n *     @type int          $child_of     Page ID to return child and grandchild pages of. Note: The value\n *                                      of `$hierarchical` has no bearing on whether `$child_of` returns\n *                                      hierarchical results. Default 0, or no restriction.\n *     @type string       $sort_order   How to sort retrieved pages. Accepts 'ASC', 'DESC'. Default 'ASC'.\n *     @type string       $sort_column  What columns to sort pages by, comma-separated. Accepts 'post_author',\n *                                      'post_date', 'post_title', 'post_name', 'post_modified', 'menu_order',\n *                                      'post_modified_gmt', 'post_parent', 'ID', 'rand', 'comment_count'.\n *                                      'post_' can be omitted for any values that start with it.\n *                                      Default 'post_title'.\n *     @type bool         $hierarchical Whether to return pages hierarchically. If false in conjunction with\n *                                      `$child_of` also being false, both arguments will be disregarded.\n *                                      Default true.\n *     @type array        $exclude      Array of page IDs to exclude. Default empty array.\n *     @type array        $include      Array of page IDs to include. Cannot be used with `$child_of`,\n *                                      `$parent`, `$exclude`, `$meta_key`, `$meta_value`, or `$hierarchical`.\n *                                      Default empty array.\n *     @type string       $meta_key     Only include pages with this meta key. Default empty.\n *     @type string       $meta_value   Only include pages with this meta value. Requires `$meta_key`.\n *                                      Default empty.\n *     @type string       $authors      A comma-separated list of author IDs. Default empty.\n *     @type int          $parent       Page ID to return direct children of. Default -1, or no restriction.\n *     @type string|array $exclude_tree Comma-separated string or array of page IDs to exclude.\n *                                      Default empty array.\n *     @type int          $number       The number of pages to return. Default 0, or all pages.\n *     @type int          $offset       The number of pages to skip before returning. Requires `$number`.\n *                                      Default 0.\n *     @type string       $post_type    The post type to query. Default 'page'.\n *     @type string|array $post_status  A comma-separated list or array of post statuses to include.\n *                                      Default 'publish'.\n * }\n * @return array|false List of pages matching defaults or `$args`.\n */\nfunction get_pages( $args = array() ) {\n\tglobal $wpdb;\n\n\t$defaults = array(\n\t\t'child_of'     => 0,\n\t\t'sort_order'   => 'ASC',\n\t\t'sort_column'  => 'post_title',\n\t\t'hierarchical' => 1,\n\t\t'exclude'      => array(),\n\t\t'include'      => array(),\n\t\t'meta_key'     => '',\n\t\t'meta_value'   => '',\n\t\t'authors'      => '',\n\t\t'parent'       => -1,\n\t\t'exclude_tree' => array(),\n\t\t'number'       => '',\n\t\t'offset'       => 0,\n\t\t'post_type'    => 'page',\n\t\t'post_status'  => 'publish',\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$number = (int) $r['number'];\n\t$offset = (int) $r['offset'];\n\t$child_of = (int) $r['child_of'];\n\t$hierarchical = $r['hierarchical'];\n\t$exclude = $r['exclude'];\n\t$meta_key = $r['meta_key'];\n\t$meta_value = $r['meta_value'];\n\t$parent = $r['parent'];\n\t$post_status = $r['post_status'];\n\n\t// Make sure the post type is hierarchical.\n\t$hierarchical_post_types = get_post_types( array( 'hierarchical' => true ) );\n\tif ( ! in_array( $r['post_type'], $hierarchical_post_types ) ) {\n\t\treturn false;\n\t}\n\n\tif ( $parent > 0 && ! $child_of ) {\n\t\t$hierarchical = false;\n\t}\n\n\t// Make sure we have a valid post status.\n\tif ( ! is_array( $post_status ) ) {\n\t\t$post_status = explode( ',', $post_status );\n\t}\n\tif ( array_diff( $post_status, get_post_stati() ) ) {\n\t\treturn false;\n\t}\n\n\t// $args can be whatever, only use the args defined in defaults to compute the key.\n\t$key = md5( serialize( wp_array_slice_assoc( $r, array_keys( $defaults ) ) ) );\n\t$last_changed = wp_cache_get_last_changed( 'posts' );\n\n\t$cache_key = \"get_pages:$key:$last_changed\";\n\tif ( $cache = wp_cache_get( $cache_key, 'posts' ) ) {\n\t\t// Convert to WP_Post instances.\n\t\t$pages = array_map( 'get_post', $cache );\n\t\t/** This filter is documented in wp-includes/post.php */\n\t\t$pages = apply_filters( 'get_pages', $pages, $r );\n\t\treturn $pages;\n\t}\n\n\t$inclusions = '';\n\tif ( ! empty( $r['include'] ) ) {\n\t\t$child_of = 0; //ignore child_of, parent, exclude, meta_key, and meta_value params if using include\n\t\t$parent = -1;\n\t\t$exclude = '';\n\t\t$meta_key = '';\n\t\t$meta_value = '';\n\t\t$hierarchical = false;\n\t\t$incpages = wp_parse_id_list( $r['include'] );\n\t\tif ( ! empty( $incpages ) ) {\n\t\t\t$inclusions = ' AND ID IN (' . implode( ',', $incpages ) .  ')';\n\t\t}\n\t}\n\n\t$exclusions = '';\n\tif ( ! empty( $exclude ) ) {\n\t\t$expages = wp_parse_id_list( $exclude );\n\t\tif ( ! empty( $expages ) ) {\n\t\t\t$exclusions = ' AND ID NOT IN (' . implode( ',', $expages ) .  ')';\n\t\t}\n\t}\n\n\t$author_query = '';\n\tif ( ! empty( $r['authors'] ) ) {\n\t\t$post_authors = preg_split( '/[\\s,]+/', $r['authors'] );\n\n\t\tif ( ! empty( $post_authors ) ) {\n\t\t\tforeach ( $post_authors as $post_author ) {\n\t\t\t\t//Do we have an author id or an author login?\n\t\t\t\tif ( 0 == intval($post_author) ) {\n\t\t\t\t\t$post_author = get_user_by('login', $post_author);\n\t\t\t\t\tif ( empty( $post_author ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif ( empty( $post_author->ID ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$post_author = $post_author->ID;\n\t\t\t\t}\n\n\t\t\t\tif ( '' == $author_query ) {\n\t\t\t\t\t$author_query = $wpdb->prepare(' post_author = %d ', $post_author);\n\t\t\t\t} else {\n\t\t\t\t\t$author_query .= $wpdb->prepare(' OR post_author = %d ', $post_author);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( '' != $author_query ) {\n\t\t\t\t$author_query = \" AND ($author_query)\";\n\t\t\t}\n\t\t}\n\t}\n\n\t$join = '';\n\t$where = \"$exclusions $inclusions \";\n\tif ( '' !== $meta_key || '' !== $meta_value ) {\n\t\t$join = \" LEFT JOIN $wpdb->postmeta ON ( $wpdb->posts.ID = $wpdb->postmeta.post_id )\";\n\n\t\t// meta_key and meta_value might be slashed\n\t\t$meta_key = wp_unslash($meta_key);\n\t\t$meta_value = wp_unslash($meta_value);\n\t\tif ( '' !== $meta_key ) {\n\t\t\t$where .= $wpdb->prepare(\" AND $wpdb->postmeta.meta_key = %s\", $meta_key);\n\t\t}\n\t\tif ( '' !== $meta_value ) {\n\t\t\t$where .= $wpdb->prepare(\" AND $wpdb->postmeta.meta_value = %s\", $meta_value);\n\t\t}\n\n\t}\n\n\tif ( is_array( $parent ) ) {\n\t\t$post_parent__in = implode( ',', array_map( 'absint', (array) $parent ) );\n\t\tif ( ! empty( $post_parent__in ) ) {\n\t\t\t$where .= \" AND post_parent IN ($post_parent__in)\";\n\t\t}\n\t} elseif ( $parent >= 0 ) {\n\t\t$where .= $wpdb->prepare(' AND post_parent = %d ', $parent);\n\t}\n\n\tif ( 1 == count( $post_status ) ) {\n\t\t$where_post_type = $wpdb->prepare( \"post_type = %s AND post_status = %s\", $r['post_type'], reset( $post_status ) );\n\t} else {\n\t\t$post_status = implode( \"', '\", $post_status );\n\t\t$where_post_type = $wpdb->prepare( \"post_type = %s AND post_status IN ('$post_status')\", $r['post_type'] );\n\t}\n\n\t$orderby_array = array();\n\t$allowed_keys = array( 'author', 'post_author', 'date', 'post_date', 'title', 'post_title', 'name', 'post_name', 'modified',\n\t\t'post_modified', 'modified_gmt', 'post_modified_gmt', 'menu_order', 'parent', 'post_parent',\n\t\t'ID', 'rand', 'comment_count' );\n\n\tforeach ( explode( ',', $r['sort_column'] ) as $orderby ) {\n\t\t$orderby = trim( $orderby );\n\t\tif ( ! in_array( $orderby, $allowed_keys ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tswitch ( $orderby ) {\n\t\t\tcase 'menu_order':\n\t\t\t\tbreak;\n\t\t\tcase 'ID':\n\t\t\t\t$orderby = \"$wpdb->posts.ID\";\n\t\t\t\tbreak;\n\t\t\tcase 'rand':\n\t\t\t\t$orderby = 'RAND()';\n\t\t\t\tbreak;\n\t\t\tcase 'comment_count':\n\t\t\t\t$orderby = \"$wpdb->posts.comment_count\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif ( 0 === strpos( $orderby, 'post_' ) ) {\n\t\t\t\t\t$orderby = \"$wpdb->posts.\" . $orderby;\n\t\t\t\t} else {\n\t\t\t\t\t$orderby = \"$wpdb->posts.post_\" . $orderby;\n\t\t\t\t}\n\t\t}\n\n\t\t$orderby_array[] = $orderby;\n\n\t}\n\t$sort_column = ! empty( $orderby_array ) ? implode( ',', $orderby_array ) : \"$wpdb->posts.post_title\";\n\n\t$sort_order = strtoupper( $r['sort_order'] );\n\tif ( '' !== $sort_order && ! in_array( $sort_order, array( 'ASC', 'DESC' ) ) ) {\n\t\t$sort_order = 'ASC';\n\t}\n\n\t$query = \"SELECT * FROM $wpdb->posts $join WHERE ($where_post_type) $where \";\n\t$query .= $author_query;\n\t$query .= \" ORDER BY \" . $sort_column . \" \" . $sort_order ;\n\n\tif ( ! empty( $number ) ) {\n\t\t$query .= ' LIMIT ' . $offset . ',' . $number;\n\t}\n\n\t$pages = $wpdb->get_results($query);\n\n\tif ( empty($pages) ) {\n\t\t/** This filter is documented in wp-includes/post.php */\n\t\t$pages = apply_filters( 'get_pages', array(), $r );\n\t\treturn $pages;\n\t}\n\n\t// Sanitize before caching so it'll only get done once.\n\t$num_pages = count($pages);\n\tfor ($i = 0; $i < $num_pages; $i++) {\n\t\t$pages[$i] = sanitize_post($pages[$i], 'raw');\n\t}\n\n\t// Update cache.\n\tupdate_post_cache( $pages );\n\n\tif ( $child_of || $hierarchical ) {\n\t\t$pages = get_page_children($child_of, $pages);\n\t}\n\n\tif ( ! empty( $r['exclude_tree'] ) ) {\n\t\t$exclude = wp_parse_id_list( $r['exclude_tree'] );\n\t\tforeach ( $exclude as $id ) {\n\t\t\t$children = get_page_children( $id, $pages );\n\t\t\tforeach ( $children as $child ) {\n\t\t\t\t$exclude[] = $child->ID;\n\t\t\t}\n\t\t}\n\n\t\t$num_pages = count( $pages );\n\t\tfor ( $i = 0; $i < $num_pages; $i++ ) {\n\t\t\tif ( in_array( $pages[$i]->ID, $exclude ) ) {\n\t\t\t\tunset( $pages[$i] );\n\t\t\t}\n\t\t}\n\t}\n\n\t$page_structure = array();\n\tforeach ( $pages as $page ) {\n\t\t$page_structure[] = $page->ID;\n\t}\n\n\twp_cache_set( $cache_key, $page_structure, 'posts' );\n\n\t// Convert to WP_Post instances\n\t$pages = array_map( 'get_post', $pages );\n\n\t/**\n\t * Filters the retrieved list of pages.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param array $pages List of pages to retrieve.\n\t * @param array $r     Array of get_pages() arguments.\n\t */\n\treturn apply_filters( 'get_pages', $pages, $r );\n}\n\n//\n// Attachment functions\n//\n\n/**\n * Check if the attachment URI is local one and is really an attachment.\n *\n * @since 2.0.0\n *\n * @param string $url URL to check\n * @return bool True on success, false on failure.\n */\nfunction is_local_attachment($url) {\n\tif (strpos($url, home_url()) === false)\n\t\treturn false;\n\tif (strpos($url, home_url('/?attachment_id=')) !== false)\n\t\treturn true;\n\tif ( $id = url_to_postid($url) ) {\n\t\t$post = get_post($id);\n\t\tif ( 'attachment' == $post->post_type )\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Insert an attachment.\n *\n * If you set the 'ID' in the $args parameter, it will mean that you are\n * updating and attempt to update the attachment. You can also set the\n * attachment name or title by setting the key 'post_name' or 'post_title'.\n *\n * You can set the dates for the attachment manually by setting the 'post_date'\n * and 'post_date_gmt' keys' values.\n *\n * By default, the comments will use the default settings for whether the\n * comments are allowed. You can close them manually or keep them open by\n * setting the value for the 'comment_status' key.\n *\n * @since 2.0.0\n * @since 4.7.0 Added the `$wp_error` parameter to allow a WP_Error to be returned on failure.\n *\n * @see wp_insert_post()\n *\n * @param string|array $args     Arguments for inserting an attachment.\n * @param string       $file     Optional. Filename.\n * @param int          $parent   Optional. Parent post ID.\n * @param bool         $wp_error Optional. Whether to return a WP_Error on failure. Default false.\n * @return int|WP_Error The attachment ID on success. The value 0 or WP_Error on failure.\n */\nfunction wp_insert_attachment( $args, $file = false, $parent = 0, $wp_error = false ) {\n\t$defaults = array(\n\t\t'file'        => $file,\n\t\t'post_parent' => 0\n\t);\n\n\t$data = wp_parse_args( $args, $defaults );\n\n\tif ( ! empty( $parent ) ) {\n\t\t$data['post_parent'] = $parent;\n\t}\n\n\t$data['post_type'] = 'attachment';\n\n\treturn wp_insert_post( $data, $wp_error );\n}\n\n/**\n * Trash or delete an attachment.\n *\n * When an attachment is permanently deleted, the file will also be removed.\n * Deletion removes all post meta fields, taxonomy, comments, etc. associated\n * with the attachment (except the main post).\n *\n * The attachment is moved to the trash instead of permanently deleted unless trash\n * for media is disabled, item is already in the trash, or $force_delete is true.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int  $post_id      Attachment ID.\n * @param bool $force_delete Optional. Whether to bypass trash and force deletion.\n *                           Default false.\n * @return WP_Post|false|null Post data on success, false or null on failure.\n */\nfunction wp_delete_attachment( $post_id, $force_delete = false ) {\n\tglobal $wpdb;\n\n\t$post = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM $wpdb->posts WHERE ID = %d\", $post_id ) );\n\n\tif ( ! $post ) {\n\t\treturn $post;\n\t}\n\n\t$post = get_post( $post );\n\n\tif ( 'attachment' !== $post->post_type ) {\n\t\treturn false;\n\t}\n\n\tif ( ! $force_delete && EMPTY_TRASH_DAYS && MEDIA_TRASH && 'trash' !== $post->post_status ) {\n\t\treturn wp_trash_post( $post_id );\n\t}\n\n\tdelete_post_meta($post_id, '_wp_trash_meta_status');\n\tdelete_post_meta($post_id, '_wp_trash_meta_time');\n\n\t$meta = wp_get_attachment_metadata( $post_id );\n\t$backup_sizes = get_post_meta( $post->ID, '_wp_attachment_backup_sizes', true );\n\t$file = get_attached_file( $post_id );\n\n\tif ( is_multisite() )\n\t\tdelete_transient( 'dirsize_cache' );\n\n\t/**\n\t * Fires before an attachment is deleted, at the start of wp_delete_attachment().\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param int $post_id Attachment ID.\n\t */\n\tdo_action( 'delete_attachment', $post_id );\n\n\twp_delete_object_term_relationships($post_id, array('category', 'post_tag'));\n\twp_delete_object_term_relationships($post_id, get_object_taxonomies($post->post_type));\n\n\t// Delete all for any posts.\n\tdelete_metadata( 'post', null, '_thumbnail_id', $post_id, true );\n\n\twp_defer_comment_counting( true );\n\n\t$comment_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d\", $post_id ));\n\tforeach ( $comment_ids as $comment_id ) {\n\t\twp_delete_comment( $comment_id, true );\n\t}\n\n\twp_defer_comment_counting( false );\n\n\t$post_meta_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d \", $post_id ));\n\tforeach ( $post_meta_ids as $mid )\n\t\tdelete_metadata_by_mid( 'post', $mid );\n\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( 'delete_post', $post_id );\n\t$result = $wpdb->delete( $wpdb->posts, array( 'ID' => $post_id ) );\n\tif ( ! $result ) {\n\t\treturn false;\n\t}\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( 'deleted_post', $post_id );\n\n\t$uploadpath = wp_get_upload_dir();\n\n\tif ( ! empty($meta['thumb']) ) {\n\t\t// Don't delete the thumb if another attachment uses it.\n\t\tif (! $wpdb->get_row( $wpdb->prepare( \"SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = '_wp_attachment_metadata' AND meta_value LIKE %s AND post_id <> %d\", '%' . $wpdb->esc_like( $meta['thumb'] ) . '%', $post_id)) ) {\n\t\t\t$thumbfile = str_replace(basename($file), $meta['thumb'], $file);\n\t\t\t/** This filter is documented in wp-includes/functions.php */\n\t\t\t$thumbfile = apply_filters( 'wp_delete_file', $thumbfile );\n\t\t\t@ unlink( path_join($uploadpath['basedir'], $thumbfile) );\n\t\t}\n\t}\n\n\t// Remove intermediate and backup images if there are any.\n\tif ( isset( $meta['sizes'] ) && is_array( $meta['sizes'] ) ) {\n\t\tforeach ( $meta['sizes'] as $size => $sizeinfo ) {\n\t\t\t$intermediate_file = str_replace( basename( $file ), $sizeinfo['file'], $file );\n\t\t\t/** This filter is documented in wp-includes/functions.php */\n\t\t\t$intermediate_file = apply_filters( 'wp_delete_file', $intermediate_file );\n\t\t\t@ unlink( path_join( $uploadpath['basedir'], $intermediate_file ) );\n\t\t}\n\t}\n\n\tif ( is_array($backup_sizes) ) {\n\t\tforeach ( $backup_sizes as $size ) {\n\t\t\t$del_file = path_join( dirname($meta['file']), $size['file'] );\n\t\t\t/** This filter is documented in wp-includes/functions.php */\n\t\t\t$del_file = apply_filters( 'wp_delete_file', $del_file );\n\t\t\t@ unlink( path_join($uploadpath['basedir'], $del_file) );\n\t\t}\n\t}\n\n\twp_delete_file( $file );\n\n\tclean_post_cache( $post );\n\n\treturn $post;\n}\n\n/**\n * Retrieve attachment meta field for attachment ID.\n *\n * @since 2.1.0\n *\n * @param int  $attachment_id Attachment post ID. Defaults to global $post.\n * @param bool $unfiltered    Optional. If true, filters are not run. Default false.\n * @return mixed Attachment meta field. False on failure.\n */\nfunction wp_get_attachment_metadata( $attachment_id = 0, $unfiltered = false ) {\n\t$attachment_id = (int) $attachment_id;\n\tif ( ! $post = get_post( $attachment_id ) ) {\n\t\treturn false;\n\t}\n\n\t$data = get_post_meta( $post->ID, '_wp_attachment_metadata', true );\n\n\tif ( $unfiltered )\n\t\treturn $data;\n\n\t/**\n\t * Filters the attachment meta data.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param array|bool $data          Array of meta data for the given attachment, or false\n\t *                                  if the object does not exist.\n\t * @param int        $attachment_id Attachment post ID.\n\t */\n\treturn apply_filters( 'wp_get_attachment_metadata', $data, $post->ID );\n}\n\n/**\n * Update metadata for an attachment.\n *\n * @since 2.1.0\n *\n * @param int   $attachment_id Attachment post ID.\n * @param array $data          Attachment meta data.\n * @return int|bool False if $post is invalid.\n */\nfunction wp_update_attachment_metadata( $attachment_id, $data ) {\n\t$attachment_id = (int) $attachment_id;\n\tif ( ! $post = get_post( $attachment_id ) ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Filters the updated attachment meta data.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param array $data          Array of updated attachment meta data.\n\t * @param int   $attachment_id Attachment post ID.\n\t */\n\tif ( $data = apply_filters( 'wp_update_attachment_metadata', $data, $post->ID ) )\n\t\treturn update_post_meta( $post->ID, '_wp_attachment_metadata', $data );\n\telse\n\t\treturn delete_post_meta( $post->ID, '_wp_attachment_metadata' );\n}\n\n/**\n * Retrieve the URL for an attachment.\n *\n * @since 2.1.0\n *\n * @global string $pagenow\n *\n * @param int $attachment_id Optional. Attachment post ID. Defaults to global $post.\n * @return string|false Attachment URL, otherwise false.\n */\nfunction wp_get_attachment_url( $attachment_id = 0 ) {\n\t$attachment_id = (int) $attachment_id;\n\tif ( ! $post = get_post( $attachment_id ) ) {\n\t\treturn false;\n\t}\n\n\tif ( 'attachment' != $post->post_type )\n\t\treturn false;\n\n\t$url = '';\n\t// Get attached file.\n\tif ( $file = get_post_meta( $post->ID, '_wp_attached_file', true ) ) {\n\t\t// Get upload directory.\n\t\tif ( ( $uploads = wp_get_upload_dir() ) && false === $uploads['error'] ) {\n\t\t\t// Check that the upload base exists in the file location.\n\t\t\tif ( 0 === strpos( $file, $uploads['basedir'] ) ) {\n\t\t\t\t// Replace file location with url location.\n\t\t\t\t$url = str_replace($uploads['basedir'], $uploads['baseurl'], $file);\n\t\t\t} elseif ( false !== strpos($file, 'wp-content/uploads') ) {\n\t\t\t\t// Get the directory name relative to the basedir (back compat for pre-2.7 uploads)\n\t\t\t\t$url = trailingslashit( $uploads['baseurl'] . '/' . _wp_get_attachment_relative_path( $file ) ) . basename( $file );\n\t\t\t} else {\n\t\t\t\t// It's a newly-uploaded file, therefore $file is relative to the basedir.\n\t\t\t\t$url = $uploads['baseurl'] . \"/$file\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * If any of the above options failed, Fallback on the GUID as used pre-2.7,\n\t * not recommended to rely upon this.\n\t */\n\tif ( empty($url) ) {\n\t\t$url = get_the_guid( $post->ID );\n\t}\n\n\t// On SSL front end, URLs should be HTTPS.\n\tif ( is_ssl() && ! is_admin() && 'wp-login.php' !== $GLOBALS['pagenow'] ) {\n\t\t$url = set_url_scheme( $url );\n\t}\n\n\t/**\n\t * Filters the attachment URL.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $url           URL for the given attachment.\n\t * @param int    $attachment_id Attachment post ID.\n\t */\n\t$url = apply_filters( 'wp_get_attachment_url', $url, $post->ID );\n\n\tif ( empty( $url ) )\n\t\treturn false;\n\n\treturn $url;\n}\n\n/**\n * Retrieves the caption for an attachment.\n *\n * @since 4.6.0\n *\n * @param int $post_id Optional. Attachment ID. Default is the ID of the global `$post`.\n * @return string|false False on failure. Attachment caption on success.\n */\nfunction wp_get_attachment_caption( $post_id = 0 ) {\n\t$post_id = (int) $post_id;\n\tif ( ! $post = get_post( $post_id ) ) {\n\t\treturn false;\n\t}\n\n\tif ( 'attachment' !== $post->post_type ) {\n\t\treturn false;\n\t}\n\n\t$caption = $post->post_excerpt;\n\n\t/**\n\t * Filters the attachment caption.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param string $caption Caption for the given attachment.\n\t * @param int    $post_id Attachment ID.\n\t */\n\treturn apply_filters( 'wp_get_attachment_caption', $caption, $post->ID );\n}\n\n/**\n * Retrieve thumbnail for an attachment.\n *\n * @since 2.1.0\n *\n * @param int $post_id Optional. Attachment ID. Default 0.\n * @return string|false False on failure. Thumbnail file path on success.\n */\nfunction wp_get_attachment_thumb_file( $post_id = 0 ) {\n\t$post_id = (int) $post_id;\n\tif ( !$post = get_post( $post_id ) )\n\t\treturn false;\n\tif ( !is_array( $imagedata = wp_get_attachment_metadata( $post->ID ) ) )\n\t\treturn false;\n\n\t$file = get_attached_file( $post->ID );\n\n\tif ( !empty($imagedata['thumb']) && ($thumbfile = str_replace(basename($file), $imagedata['thumb'], $file)) && file_exists($thumbfile) ) {\n\t\t/**\n\t\t * Filters the attachment thumbnail file path.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param string $thumbfile File path to the attachment thumbnail.\n\t\t * @param int    $post_id   Attachment ID.\n\t\t */\n\t\treturn apply_filters( 'wp_get_attachment_thumb_file', $thumbfile, $post->ID );\n\t}\n\treturn false;\n}\n\n/**\n * Retrieve URL for an attachment thumbnail.\n *\n * @since 2.1.0\n *\n * @param int $post_id Optional. Attachment ID. Default 0.\n * @return string|false False on failure. Thumbnail URL on success.\n */\nfunction wp_get_attachment_thumb_url( $post_id = 0 ) {\n\t$post_id = (int) $post_id;\n\tif ( !$post = get_post( $post_id ) )\n\t\treturn false;\n\tif ( !$url = wp_get_attachment_url( $post->ID ) )\n\t\treturn false;\n\n\t$sized = image_downsize( $post_id, 'thumbnail' );\n\tif ( $sized )\n\t\treturn $sized[0];\n\n\tif ( !$thumb = wp_get_attachment_thumb_file( $post->ID ) )\n\t\treturn false;\n\n\t$url = str_replace(basename($url), basename($thumb), $url);\n\n\t/**\n\t * Filters the attachment thumbnail URL.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $url     URL for the attachment thumbnail.\n\t * @param int    $post_id Attachment ID.\n\t */\n\treturn apply_filters( 'wp_get_attachment_thumb_url', $url, $post->ID );\n}\n\n/**\n * Verifies an attachment is of a given type.\n *\n * @since 4.2.0\n *\n * @param string      $type Attachment type. Accepts 'image', 'audio', or 'video'.\n * @param int|WP_Post $post Optional. Attachment ID or object. Default is global $post.\n * @return bool True if one of the accepted types, false otherwise.\n */\nfunction wp_attachment_is( $type, $post = null ) {\n\tif ( ! $post = get_post( $post ) ) {\n\t\treturn false;\n\t}\n\n\tif ( ! $file = get_attached_file( $post->ID ) ) {\n\t\treturn false;\n\t}\n\n\tif ( 0 === strpos( $post->post_mime_type, $type . '/' ) ) {\n\t\treturn true;\n\t}\n\n\t$check = wp_check_filetype( $file );\n\tif ( empty( $check['ext'] ) ) {\n\t\treturn false;\n\t}\n\n\t$ext = $check['ext'];\n\n\tif ( 'import' !== $post->post_mime_type ) {\n\t\treturn $type === $ext;\n\t}\n\n\tswitch ( $type ) {\n\tcase 'image':\n\t\t$image_exts = array( 'jpg', 'jpeg', 'jpe', 'gif', 'png' );\n\t\treturn in_array( $ext, $image_exts );\n\n\tcase 'audio':\n\t\treturn in_array( $ext, wp_get_audio_extensions() );\n\n\tcase 'video':\n\t\treturn in_array( $ext, wp_get_video_extensions() );\n\n\tdefault:\n\t\treturn $type === $ext;\n\t}\n}\n\n/**\n * Checks if the attachment is an image.\n *\n * @since 2.1.0\n * @since 4.2.0 Modified into wrapper for wp_attachment_is() and\n *              allowed WP_Post object to be passed.\n *\n * @param int|WP_Post $post Optional. Attachment ID or object. Default is global $post.\n * @return bool Whether the attachment is an image.\n */\nfunction wp_attachment_is_image( $post = null ) {\n\treturn wp_attachment_is( 'image', $post );\n}\n\n/**\n * Retrieve the icon for a MIME type.\n *\n * @since 2.1.0\n *\n * @param string|int $mime MIME type or attachment ID.\n * @return string|false Icon, false otherwise.\n */\nfunction wp_mime_type_icon( $mime = 0 ) {\n\tif ( !is_numeric($mime) )\n\t\t$icon = wp_cache_get(\"mime_type_icon_$mime\");\n\n\t$post_id = 0;\n\tif ( empty($icon) ) {\n\t\t$post_mimes = array();\n\t\tif ( is_numeric($mime) ) {\n\t\t\t$mime = (int) $mime;\n\t\t\tif ( $post = get_post( $mime ) ) {\n\t\t\t\t$post_id = (int) $post->ID;\n\t\t\t\t$file = get_attached_file( $post_id );\n\t\t\t\t$ext = preg_replace('/^.+?\\.([^.]+)$/', '$1', $file);\n\t\t\t\tif ( !empty($ext) ) {\n\t\t\t\t\t$post_mimes[] = $ext;\n\t\t\t\t\tif ( $ext_type = wp_ext2type( $ext ) )\n\t\t\t\t\t\t$post_mimes[] = $ext_type;\n\t\t\t\t}\n\t\t\t\t$mime = $post->post_mime_type;\n\t\t\t} else {\n\t\t\t\t$mime = 0;\n\t\t\t}\n\t\t} else {\n\t\t\t$post_mimes[] = $mime;\n\t\t}\n\n\t\t$icon_files = wp_cache_get('icon_files');\n\n\t\tif ( !is_array($icon_files) ) {\n\t\t\t/**\n\t\t\t * Filters the icon directory path.\n\t\t\t *\n\t\t\t * @since 2.0.0\n\t\t\t *\n\t\t\t * @param string $path Icon directory absolute path.\n\t\t\t */\n\t\t\t$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/media' );\n\n\t\t\t/**\n\t\t\t * Filters the icon directory URI.\n\t\t\t *\n\t\t\t * @since 2.0.0\n\t\t\t *\n\t\t\t * @param string $uri Icon directory URI.\n\t\t\t */\n\t\t\t$icon_dir_uri = apply_filters( 'icon_dir_uri', includes_url( 'images/media' ) );\n\n\t\t\t/**\n\t\t\t * Filters the list of icon directory URIs.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param array $uris List of icon directory URIs.\n\t\t\t */\n\t\t\t$dirs = apply_filters( 'icon_dirs', array( $icon_dir => $icon_dir_uri ) );\n\t\t\t$icon_files = array();\n\t\t\twhile ( $dirs ) {\n\t\t\t\t$keys = array_keys( $dirs );\n\t\t\t\t$dir = array_shift( $keys );\n\t\t\t\t$uri = array_shift($dirs);\n\t\t\t\tif ( $dh = opendir($dir) ) {\n\t\t\t\t\twhile ( false !== $file = readdir($dh) ) {\n\t\t\t\t\t\t$file = basename($file);\n\t\t\t\t\t\tif ( substr($file, 0, 1) == '.' )\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif ( !in_array(strtolower(substr($file, -4)), array('.png', '.gif', '.jpg') ) ) {\n\t\t\t\t\t\t\tif ( is_dir(\"$dir/$file\") )\n\t\t\t\t\t\t\t\t$dirs[\"$dir/$file\"] = \"$uri/$file\";\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$icon_files[\"$dir/$file\"] = \"$uri/$file\";\n\t\t\t\t\t}\n\t\t\t\t\tclosedir($dh);\n\t\t\t\t}\n\t\t\t}\n\t\t\twp_cache_add( 'icon_files', $icon_files, 'default', 600 );\n\t\t}\n\n\t\t$types = array();\n\t\t// Icon basename - extension = MIME wildcard.\n\t\tforeach ( $icon_files as $file => $uri )\n\t\t\t$types[ preg_replace('/^([^.]*).*$/', '$1', basename($file)) ] =& $icon_files[$file];\n\n\t\tif ( ! empty($mime) ) {\n\t\t\t$post_mimes[] = substr($mime, 0, strpos($mime, '/'));\n\t\t\t$post_mimes[] = substr($mime, strpos($mime, '/') + 1);\n\t\t\t$post_mimes[] = str_replace('/', '_', $mime);\n\t\t}\n\n\t\t$matches = wp_match_mime_types(array_keys($types), $post_mimes);\n\t\t$matches['default'] = array('default');\n\n\t\tforeach ( $matches as $match => $wilds ) {\n\t\t\tforeach ( $wilds as $wild ) {\n\t\t\t\tif ( ! isset( $types[ $wild ] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$icon = $types[ $wild ];\n\t\t\t\tif ( ! is_numeric( $mime ) ) {\n\t\t\t\t\twp_cache_add( \"mime_type_icon_$mime\", $icon );\n\t\t\t\t}\n\t\t\t\tbreak 2;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Filters the mime type icon.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $icon    Path to the mime type icon.\n\t * @param string $mime    Mime type.\n\t * @param int    $post_id Attachment ID. Will equal 0 if the function passed\n\t *                        the mime type.\n\t */\n\treturn apply_filters( 'wp_mime_type_icon', $icon, $mime, $post_id );\n}\n\n/**\n * Check for changed slugs for published post objects and save the old slug.\n *\n * The function is used when a post object of any type is updated,\n * by comparing the current and previous post objects.\n *\n * If the slug was changed and not already part of the old slugs then it will be\n * added to the post meta field ('_wp_old_slug') for storing old slugs for that\n * post.\n *\n * The most logically usage of this function is redirecting changed post objects, so\n * that those that linked to an changed post will be redirected to the new post.\n *\n * @since 2.1.0\n *\n * @param int     $post_id     Post ID.\n * @param WP_Post $post        The Post Object\n * @param WP_Post $post_before The Previous Post Object\n */\nfunction wp_check_for_changed_slugs( $post_id, $post, $post_before ) {\n\t// Don't bother if it hasn't changed.\n\tif ( $post->post_name == $post_before->post_name ) {\n\t\treturn;\n\t}\n\n\t// We're only concerned with published, non-hierarchical objects.\n\tif ( ! ( 'publish' === $post->post_status || ( 'attachment' === get_post_type( $post ) && 'inherit' === $post->post_status ) ) || is_post_type_hierarchical( $post->post_type ) ) {\n\t\treturn;\n\t}\n\n\t$old_slugs = (array) get_post_meta( $post_id, '_wp_old_slug' );\n\n\t// If we haven't added this old slug before, add it now.\n\tif ( ! empty( $post_before->post_name ) && ! in_array( $post_before->post_name, $old_slugs ) ) {\n\t\tadd_post_meta( $post_id, '_wp_old_slug', $post_before->post_name );\n\t}\n\n\t// If the new slug was used previously, delete it from the list.\n\tif ( in_array( $post->post_name, $old_slugs ) ) {\n\t\tdelete_post_meta( $post_id, '_wp_old_slug', $post->post_name );\n\t}\n}\n\n/**\n * Retrieve the private post SQL based on capability.\n *\n * This function provides a standardized way to appropriately select on the\n * post_status of a post type. The function will return a piece of SQL code\n * that can be added to a WHERE clause; this SQL is constructed to allow all\n * published posts, and all private posts to which the user has access.\n *\n * @since 2.2.0\n * @since 4.3.0 Added the ability to pass an array to `$post_type`.\n *\n * @param string|array $post_type Single post type or an array of post types. Currently only supports 'post' or 'page'.\n * @return string SQL code that can be added to a where clause.\n */\nfunction get_private_posts_cap_sql( $post_type ) {\n\treturn get_posts_by_author_sql( $post_type, false );\n}\n\n/**\n * Retrieve the post SQL based on capability, author, and type.\n *\n * @since 3.0.0\n * @since 4.3.0 Introduced the ability to pass an array of post types to `$post_type`.\n *\n * @see get_private_posts_cap_sql()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array|string   $post_type   Single post type or an array of post types.\n * @param bool           $full        Optional. Returns a full WHERE statement instead of just\n *                                    an 'andalso' term. Default true.\n * @param int            $post_author Optional. Query posts having a single author ID. Default null.\n * @param bool           $public_only Optional. Only return public posts. Skips cap checks for\n *                                    $current_user.  Default false.\n * @return string SQL WHERE code that can be added to a query.\n */\nfunction get_posts_by_author_sql( $post_type, $full = true, $post_author = null, $public_only = false ) {\n\tglobal $wpdb;\n\n\tif ( is_array( $post_type ) ) {\n\t\t$post_types = $post_type;\n\t} else {\n\t\t$post_types = array( $post_type );\n\t}\n\n\t$post_type_clauses = array();\n\tforeach ( $post_types as $post_type ) {\n\t\t$post_type_obj = get_post_type_object( $post_type );\n\t\tif ( ! $post_type_obj ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/**\n\t\t * Filters the capability to read private posts for a custom post type\n\t\t * when generating SQL for getting posts by author.\n\t\t *\n\t\t * @since 2.2.0\n\t\t * @deprecated 3.2.0 The hook transitioned from \"somewhat useless\" to \"totally useless\".\n\t\t *\n\t\t * @param string $cap Capability.\n\t\t */\n\t\tif ( ! $cap = apply_filters( 'pub_priv_sql_capability', '' ) ) {\n\t\t\t$cap = current_user_can( $post_type_obj->cap->read_private_posts );\n\t\t}\n\n\t\t// Only need to check the cap if $public_only is false.\n\t\t$post_status_sql = \"post_status = 'publish'\";\n\t\tif ( false === $public_only ) {\n\t\t\tif ( $cap ) {\n\t\t\t\t// Does the user have the capability to view private posts? Guess so.\n\t\t\t\t$post_status_sql .= \" OR post_status = 'private'\";\n\t\t\t} elseif ( is_user_logged_in() ) {\n\t\t\t\t// Users can view their own private posts.\n\t\t\t\t$id = get_current_user_id();\n\t\t\t\tif ( null === $post_author || ! $full ) {\n\t\t\t\t\t$post_status_sql .= \" OR post_status = 'private' AND post_author = $id\";\n\t\t\t\t} elseif ( $id == (int) $post_author ) {\n\t\t\t\t\t$post_status_sql .= \" OR post_status = 'private'\";\n\t\t\t\t} // else none\n\t\t\t} // else none\n\t\t}\n\n\t\t$post_type_clauses[] = \"( post_type = '\" . $post_type . \"' AND ( $post_status_sql ) )\";\n\t}\n\n\tif ( empty( $post_type_clauses ) ) {\n\t\treturn $full ? 'WHERE 1 = 0' : '1 = 0';\n\t}\n\n\t$sql = '( '. implode( ' OR ', $post_type_clauses ) . ' )';\n\n\tif ( null !== $post_author ) {\n\t\t$sql .= $wpdb->prepare( ' AND post_author = %d', $post_author );\n\t}\n\n\tif ( $full ) {\n\t\t$sql = 'WHERE ' . $sql;\n\t}\n\n\treturn $sql;\n}\n\n/**\n * Retrieve the date that the last post was published.\n *\n * The server timezone is the default and is the difference between GMT and\n * server time. The 'blog' value is the date when the last post was posted. The\n * 'gmt' is when the last post was posted in GMT formatted date.\n *\n * @since 0.71\n * @since 4.4.0 The `$post_type` argument was added.\n *\n * @param string $timezone  Optional. The timezone for the timestamp. Accepts 'server', 'blog', or 'gmt'.\n *                          'server' uses the server's internal timezone.\n *                          'blog' uses the `post_modified` field, which proxies to the timezone set for the site.\n *                          'gmt' uses the `post_modified_gmt` field.\n *                          Default 'server'.\n * @param string $post_type Optional. The post type to check. Default 'any'.\n * @return string The date of the last post.\n */\nfunction get_lastpostdate( $timezone = 'server', $post_type = 'any' ) {\n\t/**\n\t * Filters the date the last post was published.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $date     Date the last post was published.\n\t * @param string $timezone Location to use for getting the post published date.\n\t *                         See get_lastpostdate() for accepted `$timezone` values.\n\t */\n\treturn apply_filters( 'get_lastpostdate', _get_last_post_time( $timezone, 'date', $post_type ), $timezone );\n}\n\n/**\n * Get the timestamp of the last time any post was modified.\n *\n * The server timezone is the default and is the difference between GMT and\n * server time. The 'blog' value is just when the last post was modified. The\n * 'gmt' is when the last post was modified in GMT time.\n *\n * @since 1.2.0\n * @since 4.4.0 The `$post_type` argument was added.\n *\n * @param string $timezone  Optional. The timezone for the timestamp. See get_lastpostdate()\n *                          for information on accepted values.\n *                          Default 'server'.\n * @param string $post_type Optional. The post type to check. Default 'any'.\n * @return string The timestamp.\n */\nfunction get_lastpostmodified( $timezone = 'server', $post_type = 'any' ) {\n\t/**\n\t * Pre-filter the return value of get_lastpostmodified() before the query is run.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $lastpostmodified Date the last post was modified.\n\t *                                 Returning anything other than false will short-circuit the function.\n\t * @param string $timezone         Location to use for getting the post modified date.\n\t *                                 See get_lastpostdate() for accepted `$timezone` values.\n\t * @param string $post_type        The post type to check.\n\t */\n\t$lastpostmodified = apply_filters( 'pre_get_lastpostmodified', false, $timezone, $post_type );\n\tif ( false !== $lastpostmodified ) {\n\t\treturn $lastpostmodified;\n\t}\n\n\t$lastpostmodified = _get_last_post_time( $timezone, 'modified', $post_type );\n\n\t$lastpostdate = get_lastpostdate($timezone);\n\tif ( $lastpostdate > $lastpostmodified ) {\n\t\t$lastpostmodified = $lastpostdate;\n\t}\n\n\t/**\n\t * Filters the date the last post was modified.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $lastpostmodified Date the last post was modified.\n\t * @param string $timezone         Location to use for getting the post modified date.\n\t *                                 See get_lastpostdate() for accepted `$timezone` values.\n\t */\n\treturn apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );\n}\n\n/**\n * Get the timestamp of the last time any post was modified or published.\n *\n * @since 3.1.0\n * @since 4.4.0 The `$post_type` argument was added.\n * @access private\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $timezone  The timezone for the timestamp. See get_lastpostdate().\n *                          for information on accepted values.\n * @param string $field     Post field to check. Accepts 'date' or 'modified'.\n * @param string $post_type Optional. The post type to check. Default 'any'.\n * @return string|false The timestamp.\n */\nfunction _get_last_post_time( $timezone, $field, $post_type = 'any' ) {\n\tglobal $wpdb;\n\n\tif ( ! in_array( $field, array( 'date', 'modified' ) ) ) {\n\t\treturn false;\n\t}\n\n\t$timezone = strtolower( $timezone );\n\n\t$key = \"lastpost{$field}:$timezone\";\n\tif ( 'any' !== $post_type ) {\n\t\t$key .= ':' . sanitize_key( $post_type );\n\t}\n\n\t$date = wp_cache_get( $key, 'timeinfo' );\n\tif ( false !== $date ) {\n\t\treturn $date;\n\t}\n\n\tif ( 'any' === $post_type ) {\n\t\t$post_types = get_post_types( array( 'public' => true ) );\n\t\tarray_walk( $post_types, array( $wpdb, 'escape_by_ref' ) );\n\t\t$post_types = \"'\" . implode( \"', '\", $post_types ) . \"'\";\n\t} else {\n\t\t$post_types = \"'\" . sanitize_key( $post_type ) . \"'\";\n\t}\n\n\tswitch ( $timezone ) {\n\t\tcase 'gmt':\n\t\t\t$date = $wpdb->get_var(\"SELECT post_{$field}_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type IN ({$post_types}) ORDER BY post_{$field}_gmt DESC LIMIT 1\");\n\t\t\tbreak;\n\t\tcase 'blog':\n\t\t\t$date = $wpdb->get_var(\"SELECT post_{$field} FROM $wpdb->posts WHERE post_status = 'publish' AND post_type IN ({$post_types}) ORDER BY post_{$field}_gmt DESC LIMIT 1\");\n\t\t\tbreak;\n\t\tcase 'server':\n\t\t\t$add_seconds_server = date( 'Z' );\n\t\t\t$date = $wpdb->get_var(\"SELECT DATE_ADD(post_{$field}_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type IN ({$post_types}) ORDER BY post_{$field}_gmt DESC LIMIT 1\");\n\t\t\tbreak;\n\t}\n\n\tif ( $date ) {\n\t\twp_cache_set( $key, $date, 'timeinfo' );\n\n\t\treturn $date;\n\t}\n\n\treturn false;\n}\n\n/**\n * Updates posts in cache.\n *\n * @since 1.5.1\n *\n * @param array $posts Array of post objects (passed by reference).\n */\nfunction update_post_cache( &$posts ) {\n\tif ( ! $posts )\n\t\treturn;\n\n\tforeach ( $posts as $post )\n\t\twp_cache_add( $post->ID, $post, 'posts' );\n}\n\n/**\n * Will clean the post in the cache.\n *\n * Cleaning means delete from the cache of the post. Will call to clean the term\n * object cache associated with the post ID.\n *\n * This function not run if $_wp_suspend_cache_invalidation is not empty. See\n * wp_suspend_cache_invalidation().\n *\n * @since 2.0.0\n *\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @param int|WP_Post $post Post ID or post object to remove from the cache.\n */\nfunction clean_post_cache( $post ) {\n\tglobal $_wp_suspend_cache_invalidation;\n\n\tif ( ! empty( $_wp_suspend_cache_invalidation ) )\n\t\treturn;\n\n\t$post = get_post( $post );\n\tif ( empty( $post ) )\n\t\treturn;\n\n\twp_cache_delete( $post->ID, 'posts' );\n\twp_cache_delete( $post->ID, 'post_meta' );\n\n\tclean_object_term_cache( $post->ID, $post->post_type );\n\n\twp_cache_delete( 'wp_get_archives', 'general' );\n\n\t/**\n\t * Fires immediately after the given post's cache is cleaned.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param int     $post_id Post ID.\n\t * @param WP_Post $post    Post object.\n\t */\n\tdo_action( 'clean_post_cache', $post->ID, $post );\n\n\tif ( 'page' == $post->post_type ) {\n\t\twp_cache_delete( 'all_page_ids', 'posts' );\n\n\t\t/**\n\t\t * Fires immediately after the given page's cache is cleaned.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param int $post_id Post ID.\n\t\t */\n\t\tdo_action( 'clean_page_cache', $post->ID );\n\t}\n\n\twp_cache_set( 'last_changed', microtime(), 'posts' );\n}\n\n/**\n * Call major cache updating functions for list of Post objects.\n *\n * @since 1.5.0\n *\n * @param array  $posts             Array of Post objects\n * @param string $post_type         Optional. Post type. Default 'post'.\n * @param bool   $update_term_cache Optional. Whether to update the term cache. Default true.\n * @param bool   $update_meta_cache Optional. Whether to update the meta cache. Default true.\n */\nfunction update_post_caches( &$posts, $post_type = 'post', $update_term_cache = true, $update_meta_cache = true ) {\n\t// No point in doing all this work if we didn't match any posts.\n\tif ( !$posts )\n\t\treturn;\n\n\tupdate_post_cache($posts);\n\n\t$post_ids = array();\n\tforeach ( $posts as $post )\n\t\t$post_ids[] = $post->ID;\n\n\tif ( ! $post_type )\n\t\t$post_type = 'any';\n\n\tif ( $update_term_cache ) {\n\t\tif ( is_array($post_type) ) {\n\t\t\t$ptypes = $post_type;\n\t\t} elseif ( 'any' == $post_type ) {\n\t\t\t$ptypes = array();\n\t\t\t// Just use the post_types in the supplied posts.\n\t\t\tforeach ( $posts as $post ) {\n\t\t\t\t$ptypes[] = $post->post_type;\n\t\t\t}\n\t\t\t$ptypes = array_unique($ptypes);\n\t\t} else {\n\t\t\t$ptypes = array($post_type);\n\t\t}\n\n\t\tif ( ! empty($ptypes) )\n\t\t\tupdate_object_term_cache($post_ids, $ptypes);\n\t}\n\n\tif ( $update_meta_cache )\n\t\tupdate_postmeta_cache($post_ids);\n}\n\n/**\n * Updates metadata cache for list of post IDs.\n *\n * Performs SQL query to retrieve the metadata for the post IDs and updates the\n * metadata cache for the posts. Therefore, the functions, which call this\n * function, do not need to perform SQL queries on their own.\n *\n * @since 2.1.0\n *\n * @param array $post_ids List of post IDs.\n * @return array|false Returns false if there is nothing to update or an array\n *                     of metadata.\n */\nfunction update_postmeta_cache( $post_ids ) {\n\treturn update_meta_cache('post', $post_ids);\n}\n\n/**\n * Will clean the attachment in the cache.\n *\n * Cleaning means delete from the cache. Optionally will clean the term\n * object cache associated with the attachment ID.\n *\n * This function will not run if $_wp_suspend_cache_invalidation is not empty.\n *\n * @since 3.0.0\n *\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @param int  $id          The attachment ID in the cache to clean.\n * @param bool $clean_terms Optional. Whether to clean terms cache. Default false.\n */\nfunction clean_attachment_cache( $id, $clean_terms = false ) {\n\tglobal $_wp_suspend_cache_invalidation;\n\n\tif ( !empty($_wp_suspend_cache_invalidation) )\n\t\treturn;\n\n\t$id = (int) $id;\n\n\twp_cache_delete($id, 'posts');\n\twp_cache_delete($id, 'post_meta');\n\n\tif ( $clean_terms )\n\t\tclean_object_term_cache($id, 'attachment');\n\n\t/**\n\t * Fires after the given attachment's cache is cleaned.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param int $id Attachment ID.\n\t */\n\tdo_action( 'clean_attachment_cache', $id );\n}\n\n//\n// Hooks\n//\n\n/**\n * Hook for managing future post transitions to published.\n *\n * @since 2.3.0\n * @access private\n *\n * @see wp_clear_scheduled_hook()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string  $new_status New post status.\n * @param string  $old_status Previous post status.\n * @param WP_Post $post       Post object.\n */\nfunction _transition_post_status( $new_status, $old_status, $post ) {\n\tglobal $wpdb;\n\n\tif ( $old_status != 'publish' && $new_status == 'publish' ) {\n\t\t// Reset GUID if transitioning to publish and it is empty.\n\t\tif ( '' == get_the_guid($post->ID) )\n\t\t\t$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post->ID ) ), array( 'ID' => $post->ID ) );\n\n\t\t/**\n\t\t * Fires when a post's status is transitioned from private to published.\n\t\t *\n\t\t * @since 1.5.0\n\t\t * @deprecated 2.3.0 Use 'private_to_publish' instead.\n\t\t *\n\t\t * @param int $post_id Post ID.\n\t\t */\n\t\tdo_action('private_to_published', $post->ID);\n\t}\n\n\t// If published posts changed clear the lastpostmodified cache.\n\tif ( 'publish' == $new_status || 'publish' == $old_status) {\n\t\tforeach ( array( 'server', 'gmt', 'blog' ) as $timezone ) {\n\t\t\twp_cache_delete( \"lastpostmodified:$timezone\", 'timeinfo' );\n\t\t\twp_cache_delete( \"lastpostdate:$timezone\", 'timeinfo' );\n\t\t\twp_cache_delete( \"lastpostdate:$timezone:{$post->post_type}\", 'timeinfo' );\n\t\t}\n\t}\n\n\tif ( $new_status !== $old_status ) {\n\t\twp_cache_delete( _count_posts_cache_key( $post->post_type ), 'counts' );\n\t\twp_cache_delete( _count_posts_cache_key( $post->post_type, 'readable' ), 'counts' );\n\t}\n\n\t// Always clears the hook in case the post status bounced from future to draft.\n\twp_clear_scheduled_hook('publish_future_post', array( $post->ID ) );\n}\n\n/**\n * Hook used to schedule publication for a post marked for the future.\n *\n * The $post properties used and must exist are 'ID' and 'post_date_gmt'.\n *\n * @since 2.3.0\n * @access private\n *\n * @param int     $deprecated Not used. Can be set to null. Never implemented. Not marked\n *                            as deprecated with _deprecated_argument() as it conflicts with\n *                            wp_transition_post_status() and the default filter for _future_post_hook().\n * @param WP_Post $post       Post object.\n */\nfunction _future_post_hook( $deprecated, $post ) {\n\twp_clear_scheduled_hook( 'publish_future_post', array( $post->ID ) );\n\twp_schedule_single_event( strtotime( get_gmt_from_date( $post->post_date ) . ' GMT') , 'publish_future_post', array( $post->ID ) );\n}\n\n/**\n * Hook to schedule pings and enclosures when a post is published.\n *\n * Uses XMLRPC_REQUEST and WP_IMPORTING constants.\n *\n * @since 2.3.0\n * @access private\n *\n * @param int $post_id The ID in the database table of the post being published.\n */\nfunction _publish_post_hook( $post_id ) {\n\tif ( defined( 'XMLRPC_REQUEST' ) ) {\n\t\t/**\n\t\t * Fires when _publish_post_hook() is called during an XML-RPC request.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param int $post_id Post ID.\n\t\t */\n\t\tdo_action( 'xmlrpc_publish_post', $post_id );\n\t}\n\n\tif ( defined('WP_IMPORTING') )\n\t\treturn;\n\n\tif ( get_option('default_pingback_flag') )\n\t\tadd_post_meta( $post_id, '_pingme', '1' );\n\tadd_post_meta( $post_id, '_encloseme', '1' );\n\n\tif ( ! wp_next_scheduled( 'do_pings' ) ) {\n\t\twp_schedule_single_event( time(), 'do_pings' );\n\t}\n}\n\n/**\n * Return the post's parent's post_ID\n *\n * @since 3.1.0\n *\n * @param int $post_ID\n *\n * @return int|false Post parent ID, otherwise false.\n */\nfunction wp_get_post_parent_id( $post_ID ) {\n\t$post = get_post( $post_ID );\n\tif ( !$post || is_wp_error( $post ) )\n\t\treturn false;\n\treturn (int) $post->post_parent;\n}\n\n/**\n * Check the given subset of the post hierarchy for hierarchy loops.\n *\n * Prevents loops from forming and breaks those that it finds. Attached\n * to the {@see 'wp_insert_post_parent'} filter.\n *\n * @since 3.1.0\n *\n * @see wp_find_hierarchy_loop()\n *\n * @param int $post_parent ID of the parent for the post we're checking.\n * @param int $post_ID     ID of the post we're checking.\n * @return int The new post_parent for the post, 0 otherwise.\n */\nfunction wp_check_post_hierarchy_for_loops( $post_parent, $post_ID ) {\n\t// Nothing fancy here - bail.\n\tif ( !$post_parent )\n\t\treturn 0;\n\n\t// New post can't cause a loop.\n\tif ( empty( $post_ID ) )\n\t\treturn $post_parent;\n\n\t// Can't be its own parent.\n\tif ( $post_parent == $post_ID )\n\t\treturn 0;\n\n\t// Now look for larger loops.\n\tif ( !$loop = wp_find_hierarchy_loop( 'wp_get_post_parent_id', $post_ID, $post_parent ) )\n\t\treturn $post_parent; // No loop\n\n\t// Setting $post_parent to the given value causes a loop.\n\tif ( isset( $loop[$post_ID] ) )\n\t\treturn 0;\n\n\t// There's a loop, but it doesn't contain $post_ID. Break the loop.\n\tforeach ( array_keys( $loop ) as $loop_member )\n\t\twp_update_post( array( 'ID' => $loop_member, 'post_parent' => 0 ) );\n\n\treturn $post_parent;\n}\n\n/**\n * Set a post thumbnail.\n *\n * @since 3.1.0\n *\n * @param int|WP_Post $post         Post ID or post object where thumbnail should be attached.\n * @param int         $thumbnail_id Thumbnail to attach.\n * @return int|bool True on success, false on failure.\n */\nfunction set_post_thumbnail( $post, $thumbnail_id ) {\n\t$post = get_post( $post );\n\t$thumbnail_id = absint( $thumbnail_id );\n\tif ( $post && $thumbnail_id && get_post( $thumbnail_id ) ) {\n\t\tif ( wp_get_attachment_image( $thumbnail_id, 'thumbnail' ) )\n\t\t\treturn update_post_meta( $post->ID, '_thumbnail_id', $thumbnail_id );\n\t\telse\n\t\t\treturn delete_post_meta( $post->ID, '_thumbnail_id' );\n\t}\n\treturn false;\n}\n\n/**\n * Remove a post thumbnail.\n *\n * @since 3.3.0\n *\n * @param int|WP_Post $post Post ID or post object where thumbnail should be removed from.\n * @return bool True on success, false on failure.\n */\nfunction delete_post_thumbnail( $post ) {\n\t$post = get_post( $post );\n\tif ( $post )\n\t\treturn delete_post_meta( $post->ID, '_thumbnail_id' );\n\treturn false;\n}\n\n/**\n * Delete auto-drafts for new posts that are > 7 days old.\n *\n * @since 3.4.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n */\nfunction wp_delete_auto_drafts() {\n\tglobal $wpdb;\n\n\t// Cleanup old auto-drafts more than 7 days old.\n\t$old_posts = $wpdb->get_col( \"SELECT ID FROM $wpdb->posts WHERE post_status = 'auto-draft' AND DATE_SUB( NOW(), INTERVAL 7 DAY ) > post_date\" );\n\tforeach ( (array) $old_posts as $delete ) {\n\t\t// Force delete.\n\t\twp_delete_post( $delete, true );\n\t}\n}\n\n/**\n * Queues posts for lazy-loading of term meta.\n *\n * @since 4.5.0\n *\n * @param array $posts Array of WP_Post objects.\n */\nfunction wp_queue_posts_for_term_meta_lazyload( $posts ) {\n\t$post_type_taxonomies = $term_ids = array();\n\tforeach ( $posts as $post ) {\n\t\tif ( ! ( $post instanceof WP_Post ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( ! isset( $post_type_taxonomies[ $post->post_type ] ) ) {\n\t\t\t$post_type_taxonomies[ $post->post_type ] = get_object_taxonomies( $post->post_type );\n\t\t}\n\n\t\tforeach ( $post_type_taxonomies[ $post->post_type ] as $taxonomy ) {\n\t\t\t// Term cache should already be primed by `update_post_term_cache()`.\n\t\t\t$terms = get_object_term_cache( $post->ID, $taxonomy );\n\t\t\tif ( false !== $terms ) {\n\t\t\t\tforeach ( $terms as $term ) {\n\t\t\t\t\tif ( ! isset( $term_ids[ $term->term_id ] ) ) {\n\t\t\t\t\t\t$term_ids[] = $term->term_id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( $term_ids ) {\n\t\t$lazyloader = wp_metadata_lazyloader();\n\t\t$lazyloader->queue_objects( 'term', $term_ids );\n\t}\n}\n\n/**\n * Update the custom taxonomies' term counts when a post's status is changed.\n *\n * For example, default posts term counts (for custom taxonomies) don't include\n * private / draft posts.\n *\n * @since 3.3.0\n * @access private\n *\n * @param string  $new_status New post status.\n * @param string  $old_status Old post status.\n * @param WP_Post $post       Post object.\n */\nfunction _update_term_count_on_transition_post_status( $new_status, $old_status, $post ) {\n\t// Update counts for the post's terms.\n\tforeach ( (array) get_object_taxonomies( $post->post_type ) as $taxonomy ) {\n\t\t$tt_ids = wp_get_object_terms( $post->ID, $taxonomy, array( 'fields' => 'tt_ids' ) );\n\t\twp_update_term_count( $tt_ids, $taxonomy );\n\t}\n}\n\n/**\n * Adds any posts from the given ids to the cache that do not already exist in cache\n *\n * @since 3.4.0\n * @access private\n *\n * @see update_post_caches()\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $ids               ID list.\n * @param bool  $update_term_cache Optional. Whether to update the term cache. Default true.\n * @param bool  $update_meta_cache Optional. Whether to update the meta cache. Default true.\n */\nfunction _prime_post_caches( $ids, $update_term_cache = true, $update_meta_cache = true ) {\n\tglobal $wpdb;\n\n\t$non_cached_ids = _get_non_cached_ids( $ids, 'posts' );\n\tif ( !empty( $non_cached_ids ) ) {\n\t\t$fresh_posts = $wpdb->get_results( sprintf( \"SELECT $wpdb->posts.* FROM $wpdb->posts WHERE ID IN (%s)\", join( \",\", $non_cached_ids ) ) );\n\n\t\tupdate_post_caches( $fresh_posts, 'any', $update_term_cache, $update_meta_cache );\n\t}\n}\n\n/**\n * Adds a suffix if any trashed posts have a given slug.\n *\n * Store its desired (i.e. current) slug so it can try to reclaim it\n * if the post is untrashed.\n *\n * For internal use.\n *\n * @since 4.5.0\n * @access private\n *\n * @param string $post_name Slug.\n * @param string $post_ID   Optional. Post ID that should be ignored. Default 0.\n */\nfunction wp_add_trashed_suffix_to_post_name_for_trashed_posts( $post_name, $post_ID = 0 ) {\n\t$trashed_posts_with_desired_slug = get_posts( array(\n\t\t'name' => $post_name,\n\t\t'post_status' => 'trash',\n\t\t'post_type' => 'any',\n\t\t'nopaging' => true,\n\t\t'post__not_in' => array( $post_ID )\n\t) );\n\n\tif ( ! empty( $trashed_posts_with_desired_slug ) ) {\n\t\tforeach ( $trashed_posts_with_desired_slug as $_post ) {\n\t\t\twp_add_trashed_suffix_to_post_name_for_post( $_post );\n\t\t}\n\t}\n}\n\n/**\n * Adds a trashed suffix for a given post.\n *\n * Store its desired (i.e. current) slug so it can try to reclaim it\n * if the post is untrashed.\n *\n * For internal use.\n *\n * @since 4.5.0\n * @access private\n *\n * @param WP_Post $post The post.\n * @return string New slug for the post.\n */\nfunction wp_add_trashed_suffix_to_post_name_for_post( $post ) {\n\tglobal $wpdb;\n\n\t$post = get_post( $post );\n\n\tif ( '__trashed' === substr( $post->post_name, -9 ) ) {\n\t\treturn $post->post_name;\n\t}\n\tadd_post_meta( $post->ID, '_wp_desired_post_slug', $post->post_name );\n\t$post_name = _truncate_post_slug( $post->post_name, 191 ) . '__trashed';\n\t$wpdb->update( $wpdb->posts, array( 'post_name' => $post_name ), array( 'ID' => $post->ID ) );\n\tclean_post_cache( $post->ID );\n\treturn $post_name;\n}\n\n/**\n * Filter the SQL clauses of an attachment query to include filenames.\n *\n * @since 4.7.0\n * @access private\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $clauses An array including WHERE, GROUP BY, JOIN, ORDER BY,\n *                       DISTINCT, fields (SELECT), and LIMITS clauses.\n * @return array The modified clauses.\n */\nfunction _filter_query_attachment_filenames( $clauses ) {\n\tglobal $wpdb;\n\tremove_filter( 'posts_clauses', __FUNCTION__ );\n\n\t// Add a LEFT JOIN of the postmeta table so we don't trample existing JOINs.\n\t$clauses['join'] .= \" LEFT JOIN {$wpdb->postmeta} AS sq1 ON ( {$wpdb->posts}.ID = sq1.post_id AND sq1.meta_key = '_wp_attached_file' )\";\n\n\t$clauses['groupby'] = \"{$wpdb->posts}.ID\";\n\n\t$clauses['where'] = preg_replace(\n\t\t\"/\\({$wpdb->posts}.post_content (NOT LIKE|LIKE) (\\'[^']+\\')\\)/\",\n\t\t\"$0 OR ( sq1.meta_value $1 $2 )\",\n\t\t$clauses['where'] );\n\n\treturn $clauses;\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.9-RC1-42050';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4607-20170918';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n", "<?php\n/**\n * WordPress DB Class\n *\n * Original code from {@link http://php.justinvincent.com Justin Vincent (justin@visunet.ie)}\n *\n * @package WordPress\n * @subpackage Database\n * @since 0.71\n */\n\n/**\n * @since 0.71\n */\ndefine( 'EZSQL_VERSION', 'WP1.25' );\n\n/**\n * @since 0.71\n */\ndefine( 'OBJECT', 'OBJECT' );\ndefine( 'object', 'OBJECT' ); // Back compat.\n\n/**\n * @since 2.5.0\n */\ndefine( 'OBJECT_K', 'OBJECT_K' );\n\n/**\n * @since 0.71\n */\ndefine( 'ARRAY_A', 'ARRAY_A' );\n\n/**\n * @since 0.71\n */\ndefine( 'ARRAY_N', 'ARRAY_N' );\n\n/**\n * WordPress Database Access Abstraction Object\n *\n * It is possible to replace this class with your own\n * by setting the $wpdb global variable in wp-content/db.php\n * file to your class. The wpdb class will still be included,\n * so you can extend it or simply use your own.\n *\n * @link https://codex.wordpress.org/Function_Reference/wpdb_Class\n *\n * @since 0.71\n */\nclass wpdb {\n\n\t/**\n\t * Whether to show SQL/DB errors.\n\t *\n\t * Default behavior is to show errors if both WP_DEBUG and WP_DEBUG_DISPLAY\n\t * evaluated to true.\n\t *\n\t * @since 0.71\n\t * @var bool\n\t */\n\tvar $show_errors = false;\n\n\t/**\n\t * Whether to suppress errors during the DB bootstrapping.\n\t *\n\t * @since 2.5.0\n\t * @var bool\n\t */\n\tvar $suppress_errors = false;\n\n\t/**\n\t * The last error during query.\n\t *\n\t * @since 2.5.0\n\t * @var string\n\t */\n\tpublic $last_error = '';\n\n\t/**\n\t * Amount of queries made\n\t *\n\t * @since 1.2.0\n\t * @var int\n\t */\n\tpublic $num_queries = 0;\n\n\t/**\n\t * Count of rows returned by previous query\n\t *\n\t * @since 0.71\n\t * @var int\n\t */\n\tpublic $num_rows = 0;\n\n\t/**\n\t * Count of affected rows by previous query\n\t *\n\t * @since 0.71\n\t * @var int\n\t */\n\tvar $rows_affected = 0;\n\n\t/**\n\t * The ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).\n\t *\n\t * @since 0.71\n\t * @var int\n\t */\n\tpublic $insert_id = 0;\n\n\t/**\n\t * Last query made\n\t *\n\t * @since 0.71\n\t * @var array\n\t */\n\tvar $last_query;\n\n\t/**\n\t * Results of the last query made\n\t *\n\t * @since 0.71\n\t * @var array|null\n\t */\n\tvar $last_result;\n\n\t/**\n\t * MySQL result, which is either a resource or boolean.\n\t *\n\t * @since 0.71\n\t * @var mixed\n\t */\n\tprotected $result;\n\n\t/**\n\t * Cached column info, for sanity checking data before inserting\n\t *\n\t * @since 4.2.0\n\t * @var array\n\t */\n\tprotected $col_meta = array();\n\n\t/**\n\t * Calculated character sets on tables\n\t *\n\t * @since 4.2.0\n\t * @var array\n\t */\n\tprotected $table_charset = array();\n\n\t/**\n\t * Whether text fields in the current query need to be sanity checked.\n\t *\n\t * @since 4.2.0\n\t * @var bool\n\t */\n\tprotected $check_current_query = true;\n\n\t/**\n\t * Flag to ensure we don't run into recursion problems when checking the collation.\n\t *\n\t * @since 4.2.0\n\t * @see wpdb::check_safe_collation()\n\t * @var bool\n\t */\n\tprivate $checking_collation = false;\n\n\t/**\n\t * Saved info on the table column\n\t *\n\t * @since 0.71\n\t * @var array\n\t */\n\tprotected $col_info;\n\n\t/**\n\t * Saved queries that were executed\n\t *\n\t * @since 1.5.0\n\t * @var array\n\t */\n\tvar $queries;\n\n\t/**\n\t * The number of times to retry reconnecting before dying.\n\t *\n\t * @since 3.9.0\n\t * @see wpdb::check_connection()\n\t * @var int\n\t */\n\tprotected $reconnect_retries = 5;\n\n\t/**\n\t * WordPress table prefix\n\t *\n\t * You can set this to have multiple WordPress installations\n\t * in a single database. The second reason is for possible\n\t * security precautions.\n\t *\n\t * @since 2.5.0\n\t * @var string\n\t */\n\tpublic $prefix = '';\n\n\t/**\n\t * WordPress base table prefix.\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\t public $base_prefix;\n\n\t/**\n\t * Whether the database queries are ready to start executing.\n\t *\n\t * @since 2.3.2\n\t * @var bool\n\t */\n\tvar $ready = false;\n\n\t/**\n\t * Blog ID.\n\t *\n\t * @since 3.0.0\n\t * @var int\n\t */\n\tpublic $blogid = 0;\n\n\t/**\n\t * Site ID.\n\t *\n\t * @since 3.0.0\n\t * @var int\n\t */\n\tpublic $siteid = 0;\n\n\t/**\n\t * List of WordPress per-blog tables\n\t *\n\t * @since 2.5.0\n\t * @see wpdb::tables()\n\t * @var array\n\t */\n\tvar $tables = array( 'posts', 'comments', 'links', 'options', 'postmeta',\n\t\t'terms', 'term_taxonomy', 'term_relationships', 'termmeta', 'commentmeta' );\n\n\t/**\n\t * List of deprecated WordPress tables\n\t *\n\t * categories, post2cat, and link2cat were deprecated in 2.3.0, db version 5539\n\t *\n\t * @since 2.9.0\n\t * @see wpdb::tables()\n\t * @var array\n\t */\n\tvar $old_tables = array( 'categories', 'post2cat', 'link2cat' );\n\n\t/**\n\t * List of WordPress global tables\n\t *\n\t * @since 3.0.0\n\t * @see wpdb::tables()\n\t * @var array\n\t */\n\tvar $global_tables = array( 'users', 'usermeta' );\n\n\t/**\n\t * List of Multisite global tables\n\t *\n\t * @since 3.0.0\n\t * @see wpdb::tables()\n\t * @var array\n\t */\n\tvar $ms_global_tables = array( 'blogs', 'signups', 'site', 'sitemeta',\n\t\t'sitecategories', 'registration_log', 'blog_versions' );\n\n\t/**\n\t * WordPress Comments table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $comments;\n\n\t/**\n\t * WordPress Comment Metadata table\n\t *\n\t * @since 2.9.0\n\t * @var string\n\t */\n\tpublic $commentmeta;\n\n\t/**\n\t * WordPress Links table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $links;\n\n\t/**\n\t * WordPress Options table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $options;\n\n\t/**\n\t * WordPress Post Metadata table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $postmeta;\n\n\t/**\n\t * WordPress Posts table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $posts;\n\n\t/**\n\t * WordPress Terms table\n\t *\n\t * @since 2.3.0\n\t * @var string\n\t */\n\tpublic $terms;\n\n\t/**\n\t * WordPress Term Relationships table\n\t *\n\t * @since 2.3.0\n\t * @var string\n\t */\n\tpublic $term_relationships;\n\n\t/**\n\t * WordPress Term Taxonomy table\n\t *\n\t * @since 2.3.0\n\t * @var string\n\t */\n\tpublic $term_taxonomy;\n\n\t/**\n\t * WordPress Term Meta table.\n\t *\n\t * @since 4.4.0\n\t * @var string\n\t */\n\tpublic $termmeta;\n\n\t//\n\t// Global and Multisite tables\n\t//\n\n\t/**\n\t * WordPress User Metadata table\n\t *\n\t * @since 2.3.0\n\t * @var string\n\t */\n\tpublic $usermeta;\n\n\t/**\n\t * WordPress Users table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $users;\n\n\t/**\n\t * Multisite Blogs table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $blogs;\n\n\t/**\n\t * Multisite Blog Versions table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $blog_versions;\n\n\t/**\n\t * Multisite Registration Log table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $registration_log;\n\n\t/**\n\t * Multisite Signups table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $signups;\n\n\t/**\n\t * Multisite Sites table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $site;\n\n\t/**\n\t * Multisite Sitewide Terms table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $sitecategories;\n\n\t/**\n\t * Multisite Site Metadata table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $sitemeta;\n\n\t/**\n\t * Format specifiers for DB columns. Columns not listed here default to %s. Initialized during WP load.\n\t *\n\t * Keys are column names, values are format types: 'ID' => '%d'\n\t *\n\t * @since 2.8.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::insert()\n\t * @see wpdb::update()\n\t * @see wpdb::delete()\n\t * @see wp_set_wpdb_vars()\n\t * @var array\n\t */\n\tpublic $field_types = array();\n\n\t/**\n\t * Database table columns charset\n\t *\n\t * @since 2.2.0\n\t * @var string\n\t */\n\tpublic $charset;\n\n\t/**\n\t * Database table columns collate\n\t *\n\t * @since 2.2.0\n\t * @var string\n\t */\n\tpublic $collate;\n\n\t/**\n\t * Database Username\n\t *\n\t * @since 2.9.0\n\t * @var string\n\t */\n\tprotected $dbuser;\n\n\t/**\n\t * Database Password\n\t *\n\t * @since 3.1.0\n\t * @var string\n\t */\n\tprotected $dbpassword;\n\n\t/**\n\t * Database Name\n\t *\n\t * @since 3.1.0\n\t * @var string\n\t */\n\tprotected $dbname;\n\n\t/**\n\t * Database Host\n\t *\n\t * @since 3.1.0\n\t * @var string\n\t */\n\tprotected $dbhost;\n\n\t/**\n\t * Database Handle\n\t *\n\t * @since 0.71\n\t * @var string\n\t */\n\tprotected $dbh;\n\n\t/**\n\t * A textual description of the last query/get_row/get_var call\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $func_call;\n\n\t/**\n\t * Whether MySQL is used as the database engine.\n\t *\n\t * Set in WPDB::db_connect() to true, by default. This is used when checking\n\t * against the required MySQL version for WordPress. Normally, a replacement\n\t * database drop-in (db.php) will skip these checks, but setting this to true\n\t * will force the checks to occur.\n\t *\n\t * @since 3.3.0\n\t * @var bool\n\t */\n\tpublic $is_mysql = null;\n\n\t/**\n\t * A list of incompatible SQL modes.\n\t *\n\t * @since 3.9.0\n\t * @var array\n\t */\n\tprotected $incompatible_modes = array( 'NO_ZERO_DATE', 'ONLY_FULL_GROUP_BY',\n\t\t'STRICT_TRANS_TABLES', 'STRICT_ALL_TABLES', 'TRADITIONAL' );\n\n\t/**\n\t * Whether to use mysqli over mysql.\n\t *\n\t * @since 3.9.0\n\t * @var bool\n\t */\n\tprivate $use_mysqli = false;\n\n\t/**\n\t * Whether we've managed to successfully connect at some point\n\t *\n\t * @since 3.9.0\n\t * @var bool\n\t */\n\tprivate $has_connected = false;\n\n\t/**\n\t * Connects to the database server and selects a database\n\t *\n\t * PHP5 style constructor for compatibility with PHP5. Does\n\t * the actual setting up of the class properties and connection\n\t * to the database.\n\t *\n\t * @link https://core.trac.wordpress.org/ticket/3354\n\t * @since 2.0.8\n\t *\n\t * @global string $wp_version\n\t *\n\t * @param string $dbuser     MySQL database user\n\t * @param string $dbpassword MySQL database password\n\t * @param string $dbname     MySQL database name\n\t * @param string $dbhost     MySQL database host\n\t */\n\tpublic function __construct( $dbuser, $dbpassword, $dbname, $dbhost ) {\n\t\tregister_shutdown_function( array( $this, '__destruct' ) );\n\n\t\tif ( WP_DEBUG && WP_DEBUG_DISPLAY )\n\t\t\t$this->show_errors();\n\n\t\t/* Use ext/mysqli if it exists and:\n\t\t *  - WP_USE_EXT_MYSQL is defined as false, or\n\t\t *  - We are a development version of WordPress, or\n\t\t *  - We are running PHP 5.5 or greater, or\n\t\t *  - ext/mysql is not loaded.\n\t\t */\n\t\tif ( function_exists( 'mysqli_connect' ) ) {\n\t\t\tif ( defined( 'WP_USE_EXT_MYSQL' ) ) {\n\t\t\t\t$this->use_mysqli = ! WP_USE_EXT_MYSQL;\n\t\t\t} elseif ( version_compare( phpversion(), '5.5', '>=' ) || ! function_exists( 'mysql_connect' ) ) {\n\t\t\t\t$this->use_mysqli = true;\n\t\t\t} elseif ( false !== strpos( $GLOBALS['wp_version'], '-' ) ) {\n\t\t\t\t$this->use_mysqli = true;\n\t\t\t}\n\t\t}\n\n\t\t$this->dbuser = $dbuser;\n\t\t$this->dbpassword = $dbpassword;\n\t\t$this->dbname = $dbname;\n\t\t$this->dbhost = $dbhost;\n\n\t\t// wp-config.php creation will manually connect when ready.\n\t\tif ( defined( 'WP_SETUP_CONFIG' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->db_connect();\n\t}\n\n\t/**\n\t * PHP5 style destructor and will run when database object is destroyed.\n\t *\n\t * @see wpdb::__construct()\n\t * @since 2.0.8\n\t * @return true\n\t */\n\tpublic function __destruct() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Makes private properties readable for backward compatibility.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param string $name The private member to get, and optionally process\n\t * @return mixed The private member\n\t */\n\tpublic function __get( $name ) {\n\t\tif ( 'col_info' === $name )\n\t\t\t$this->load_col_info();\n\n\t\treturn $this->$name;\n\t}\n\n\t/**\n\t * Makes private properties settable for backward compatibility.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param string $name  The private member to set\n\t * @param mixed  $value The value to set\n\t */\n\tpublic function __set( $name, $value ) {\n\t\t$protected_members = array(\n\t\t\t'col_meta',\n\t\t\t'table_charset',\n\t\t\t'check_current_query',\n\t\t);\n\t\tif (  in_array( $name, $protected_members, true ) ) {\n\t\t\treturn;\n\t\t}\n\t\t$this->$name = $value;\n\t}\n\n\t/**\n\t * Makes private properties check-able for backward compatibility.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param string $name  The private member to check\n\t *\n\t * @return bool If the member is set or not\n\t */\n\tpublic function __isset( $name ) {\n\t\treturn isset( $this->$name );\n\t}\n\n\t/**\n\t * Makes private properties un-settable for backward compatibility.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param string $name  The private member to unset\n\t */\n\tpublic function __unset( $name ) {\n\t\tunset( $this->$name );\n\t}\n\n\t/**\n\t * Set $this->charset and $this->collate\n\t *\n\t * @since 3.1.0\n\t */\n\tpublic function init_charset() {\n\t\t$charset = '';\n\t\t$collate = '';\n\n\t\tif ( function_exists('is_multisite') && is_multisite() ) {\n\t\t\t$charset = 'utf8';\n\t\t\tif ( defined( 'DB_COLLATE' ) && DB_COLLATE ) {\n\t\t\t\t$collate = DB_COLLATE;\n\t\t\t} else {\n\t\t\t\t$collate = 'utf8_general_ci';\n\t\t\t}\n\t\t} elseif ( defined( 'DB_COLLATE' ) ) {\n\t\t\t$collate = DB_COLLATE;\n\t\t}\n\n\t\tif ( defined( 'DB_CHARSET' ) ) {\n\t\t\t$charset = DB_CHARSET;\n\t\t}\n\n\t\t$charset_collate = $this->determine_charset( $charset, $collate );\n\n\t\t$this->charset = $charset_collate['charset'];\n\t\t$this->collate = $charset_collate['collate'];\n\t}\n\n\t/**\n\t * Determines the best charset and collation to use given a charset and collation.\n\t *\n\t * For example, when able, utf8mb4 should be used instead of utf8.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param string $charset The character set to check.\n\t * @param string $collate The collation to check.\n\t * @return array The most appropriate character set and collation to use.\n\t */\n\tpublic function determine_charset( $charset, $collate ) {\n\t\tif ( ( $this->use_mysqli && ! ( $this->dbh instanceof mysqli ) ) || empty( $this->dbh ) ) {\n\t\t\treturn compact( 'charset', 'collate' );\n\t\t}\n\n\t\tif ( 'utf8' === $charset && $this->has_cap( 'utf8mb4' ) ) {\n\t\t\t$charset = 'utf8mb4';\n\t\t}\n\n\t\tif ( 'utf8mb4' === $charset && ! $this->has_cap( 'utf8mb4' ) ) {\n\t\t\t$charset = 'utf8';\n\t\t\t$collate = str_replace( 'utf8mb4_', 'utf8_', $collate );\n\t\t}\n\n\t\tif ( 'utf8mb4' === $charset ) {\n\t\t\t// _general_ is outdated, so we can upgrade it to _unicode_, instead.\n\t\t\tif ( ! $collate || 'utf8_general_ci' === $collate ) {\n\t\t\t\t$collate = 'utf8mb4_unicode_ci';\n\t\t\t} else {\n\t\t\t\t$collate = str_replace( 'utf8_', 'utf8mb4_', $collate );\n\t\t\t}\n\t\t}\n\n\t\t// _unicode_520_ is a better collation, we should use that when it's available.\n\t\tif ( $this->has_cap( 'utf8mb4_520' ) && 'utf8mb4_unicode_ci' === $collate ) {\n\t\t\t$collate = 'utf8mb4_unicode_520_ci';\n\t\t}\n\n\t\treturn compact( 'charset', 'collate' );\n\t}\n\n\t/**\n\t * Sets the connection's character set.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param resource $dbh     The resource given by mysql_connect\n\t * @param string   $charset Optional. The character set. Default null.\n\t * @param string   $collate Optional. The collation. Default null.\n\t */\n\tpublic function set_charset( $dbh, $charset = null, $collate = null ) {\n\t\tif ( ! isset( $charset ) )\n\t\t\t$charset = $this->charset;\n\t\tif ( ! isset( $collate ) )\n\t\t\t$collate = $this->collate;\n\t\tif ( $this->has_cap( 'collation' ) && ! empty( $charset ) ) {\n\t\t\t$set_charset_succeeded = true;\n\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\tif ( function_exists( 'mysqli_set_charset' ) && $this->has_cap( 'set_charset' ) ) {\n\t\t\t\t\t$set_charset_succeeded = mysqli_set_charset( $dbh, $charset );\n\t\t\t\t}\n\n\t\t\t\tif ( $set_charset_succeeded ) {\n\t\t\t\t\t$query = $this->prepare( 'SET NAMES %s', $charset );\n\t\t\t\t\tif ( ! empty( $collate ) )\n\t\t\t\t\t\t$query .= $this->prepare( ' COLLATE %s', $collate );\n\t\t\t\t\tmysqli_query( $dbh, $query );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( function_exists( 'mysql_set_charset' ) && $this->has_cap( 'set_charset' ) ) {\n\t\t\t\t\t$set_charset_succeeded = mysql_set_charset( $charset, $dbh );\n\t\t\t\t}\n\t\t\t\tif ( $set_charset_succeeded ) {\n\t\t\t\t\t$query = $this->prepare( 'SET NAMES %s', $charset );\n\t\t\t\t\tif ( ! empty( $collate ) )\n\t\t\t\t\t\t$query .= $this->prepare( ' COLLATE %s', $collate );\n\t\t\t\t\tmysql_query( $query, $dbh );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Change the current SQL mode, and ensure its WordPress compatibility.\n\t *\n\t * If no modes are passed, it will ensure the current MySQL server\n\t * modes are compatible.\n\t *\n\t * @since 3.9.0\n\t *\n\t * @param array $modes Optional. A list of SQL modes to set.\n\t */\n\tpublic function set_sql_mode( $modes = array() ) {\n\t\tif ( empty( $modes ) ) {\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t$res = mysqli_query( $this->dbh, 'SELECT @@SESSION.sql_mode' );\n\t\t\t} else {\n\t\t\t\t$res = mysql_query( 'SELECT @@SESSION.sql_mode', $this->dbh );\n\t\t\t}\n\n\t\t\tif ( empty( $res ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t$modes_array = mysqli_fetch_array( $res );\n\t\t\t\tif ( empty( $modes_array[0] ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t$modes_str = $modes_array[0];\n\t\t\t} else {\n\t\t\t\t$modes_str = mysql_result( $res, 0 );\n\t\t\t}\n\n\t\t\tif ( empty( $modes_str ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$modes = explode( ',', $modes_str );\n\t\t}\n\n\t\t$modes = array_change_key_case( $modes, CASE_UPPER );\n\n\t\t/**\n\t\t * Filters the list of incompatible SQL modes to exclude.\n\t\t *\n\t\t * @since 3.9.0\n\t\t *\n\t\t * @param array $incompatible_modes An array of incompatible modes.\n\t\t */\n\t\t$incompatible_modes = (array) apply_filters( 'incompatible_sql_modes', $this->incompatible_modes );\n\n\t\tforeach ( $modes as $i => $mode ) {\n\t\t\tif ( in_array( $mode, $incompatible_modes ) ) {\n\t\t\t\tunset( $modes[ $i ] );\n\t\t\t}\n\t\t}\n\n\t\t$modes_str = implode( ',', $modes );\n\n\t\tif ( $this->use_mysqli ) {\n\t\t\tmysqli_query( $this->dbh, \"SET SESSION sql_mode='$modes_str'\" );\n\t\t} else {\n\t\t\tmysql_query( \"SET SESSION sql_mode='$modes_str'\", $this->dbh );\n\t\t}\n\t}\n\n\t/**\n\t * Sets the table prefix for the WordPress tables.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $prefix          Alphanumeric name for the new prefix.\n\t * @param bool   $set_table_names Optional. Whether the table names, e.g. wpdb::$posts, should be updated or not.\n\t * @return string|WP_Error Old prefix or WP_Error on error\n\t */\n\tpublic function set_prefix( $prefix, $set_table_names = true ) {\n\n\t\tif ( preg_match( '|[^a-z0-9_]|i', $prefix ) )\n\t\t\treturn new WP_Error('invalid_db_prefix', 'Invalid database prefix' );\n\n\t\t$old_prefix = is_multisite() ? '' : $prefix;\n\n\t\tif ( isset( $this->base_prefix ) )\n\t\t\t$old_prefix = $this->base_prefix;\n\n\t\t$this->base_prefix = $prefix;\n\n\t\tif ( $set_table_names ) {\n\t\t\tforeach ( $this->tables( 'global' ) as $table => $prefixed_table )\n\t\t\t\t$this->$table = $prefixed_table;\n\n\t\t\tif ( is_multisite() && empty( $this->blogid ) )\n\t\t\t\treturn $old_prefix;\n\n\t\t\t$this->prefix = $this->get_blog_prefix();\n\n\t\t\tforeach ( $this->tables( 'blog' ) as $table => $prefixed_table )\n\t\t\t\t$this->$table = $prefixed_table;\n\n\t\t\tforeach ( $this->tables( 'old' ) as $table => $prefixed_table )\n\t\t\t\t$this->$table = $prefixed_table;\n\t\t}\n\t\treturn $old_prefix;\n\t}\n\n\t/**\n\t * Sets blog id.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param int $blog_id\n\t * @param int $network_id Optional.\n\t * @return int previous blog id\n\t */\n\tpublic function set_blog_id( $blog_id, $network_id = 0 ) {\n\t\tif ( ! empty( $network_id ) ) {\n\t\t\t$this->siteid = $network_id;\n\t\t}\n\n\t\t$old_blog_id  = $this->blogid;\n\t\t$this->blogid = $blog_id;\n\n\t\t$this->prefix = $this->get_blog_prefix();\n\n\t\tforeach ( $this->tables( 'blog' ) as $table => $prefixed_table )\n\t\t\t$this->$table = $prefixed_table;\n\n\t\tforeach ( $this->tables( 'old' ) as $table => $prefixed_table )\n\t\t\t$this->$table = $prefixed_table;\n\n\t\treturn $old_blog_id;\n\t}\n\n\t/**\n\t * Gets blog prefix.\n\t *\n\t * @since 3.0.0\n\t * @param int $blog_id Optional.\n\t * @return string Blog prefix.\n\t */\n\tpublic function get_blog_prefix( $blog_id = null ) {\n\t\tif ( is_multisite() ) {\n\t\t\tif ( null === $blog_id )\n\t\t\t\t$blog_id = $this->blogid;\n\t\t\t$blog_id = (int) $blog_id;\n\t\t\tif ( defined( 'MULTISITE' ) && ( 0 == $blog_id || 1 == $blog_id ) )\n\t\t\t\treturn $this->base_prefix;\n\t\t\telse\n\t\t\t\treturn $this->base_prefix . $blog_id . '_';\n\t\t} else {\n\t\t\treturn $this->base_prefix;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array of WordPress tables.\n\t *\n\t * Also allows for the CUSTOM_USER_TABLE and CUSTOM_USER_META_TABLE to\n\t * override the WordPress users and usermeta tables that would otherwise\n\t * be determined by the prefix.\n\t *\n\t * The scope argument can take one of the following:\n\t *\n\t * 'all' - returns 'all' and 'global' tables. No old tables are returned.\n\t * 'blog' - returns the blog-level tables for the queried blog.\n\t * 'global' - returns the global tables for the installation, returning multisite tables only if running multisite.\n\t * 'ms_global' - returns the multisite global tables, regardless if current installation is multisite.\n\t * 'old' - returns tables which are deprecated.\n\t *\n\t * @since 3.0.0\n\t * @uses wpdb::$tables\n\t * @uses wpdb::$old_tables\n\t * @uses wpdb::$global_tables\n\t * @uses wpdb::$ms_global_tables\n\t *\n\t * @param string $scope   Optional. Can be all, global, ms_global, blog, or old tables. Defaults to all.\n\t * @param bool   $prefix  Optional. Whether to include table prefixes. Default true. If blog\n\t *                        prefix is requested, then the custom users and usermeta tables will be mapped.\n\t * @param int    $blog_id Optional. The blog_id to prefix. Defaults to wpdb::$blogid. Used only when prefix is requested.\n\t * @return array Table names. When a prefix is requested, the key is the unprefixed table name.\n\t */\n\tpublic function tables( $scope = 'all', $prefix = true, $blog_id = 0 ) {\n\t\tswitch ( $scope ) {\n\t\t\tcase 'all' :\n\t\t\t\t$tables = array_merge( $this->global_tables, $this->tables );\n\t\t\t\tif ( is_multisite() )\n\t\t\t\t\t$tables = array_merge( $tables, $this->ms_global_tables );\n\t\t\t\tbreak;\n\t\t\tcase 'blog' :\n\t\t\t\t$tables = $this->tables;\n\t\t\t\tbreak;\n\t\t\tcase 'global' :\n\t\t\t\t$tables = $this->global_tables;\n\t\t\t\tif ( is_multisite() )\n\t\t\t\t\t$tables = array_merge( $tables, $this->ms_global_tables );\n\t\t\t\tbreak;\n\t\t\tcase 'ms_global' :\n\t\t\t\t$tables = $this->ms_global_tables;\n\t\t\t\tbreak;\n\t\t\tcase 'old' :\n\t\t\t\t$tables = $this->old_tables;\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\treturn array();\n\t\t}\n\n\t\tif ( $prefix ) {\n\t\t\tif ( ! $blog_id )\n\t\t\t\t$blog_id = $this->blogid;\n\t\t\t$blog_prefix = $this->get_blog_prefix( $blog_id );\n\t\t\t$base_prefix = $this->base_prefix;\n\t\t\t$global_tables = array_merge( $this->global_tables, $this->ms_global_tables );\n\t\t\tforeach ( $tables as $k => $table ) {\n\t\t\t\tif ( in_array( $table, $global_tables ) )\n\t\t\t\t\t$tables[ $table ] = $base_prefix . $table;\n\t\t\t\telse\n\t\t\t\t\t$tables[ $table ] = $blog_prefix . $table;\n\t\t\t\tunset( $tables[ $k ] );\n\t\t\t}\n\n\t\t\tif ( isset( $tables['users'] ) && defined( 'CUSTOM_USER_TABLE' ) )\n\t\t\t\t$tables['users'] = CUSTOM_USER_TABLE;\n\n\t\t\tif ( isset( $tables['usermeta'] ) && defined( 'CUSTOM_USER_META_TABLE' ) )\n\t\t\t\t$tables['usermeta'] = CUSTOM_USER_META_TABLE;\n\t\t}\n\n\t\treturn $tables;\n\t}\n\n\t/**\n\t * Selects a database using the current database connection.\n\t *\n\t * The database name will be changed based on the current database\n\t * connection. On failure, the execution will bail and display an DB error.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string        $db  MySQL database name\n\t * @param resource|null $dbh Optional link identifier.\n\t */\n\tpublic function select( $db, $dbh = null ) {\n\t\tif ( is_null($dbh) )\n\t\t\t$dbh = $this->dbh;\n\n\t\tif ( $this->use_mysqli ) {\n\t\t\t$success = mysqli_select_db( $dbh, $db );\n\t\t} else {\n\t\t\t$success = mysql_select_db( $db, $dbh );\n\t\t}\n\t\tif ( ! $success ) {\n\t\t\t$this->ready = false;\n\t\t\tif ( ! did_action( 'template_redirect' ) ) {\n\t\t\t\twp_load_translations_early();\n\n\t\t\t\t$message = '<h1>' . __( 'Can&#8217;t select database' ) . \"</h1>\\n\";\n\n\t\t\t\t$message .= '<p>' . sprintf(\n\t\t\t\t\t/* translators: %s: database name */\n\t\t\t\t\t__( 'We were able to connect to the database server (which means your username and password is okay) but not able to select the %s database.' ),\n\t\t\t\t\t'<code>' . htmlspecialchars( $db, ENT_QUOTES ) . '</code>'\n\t\t\t\t) . \"</p>\\n\";\n\n\t\t\t\t$message .= \"<ul>\\n\";\n\t\t\t\t$message .= '<li>' . __( 'Are you sure it exists?' ) . \"</li>\\n\";\n\n\t\t\t\t$message .= '<li>' . sprintf(\n\t\t\t\t\t/* translators: 1: database user, 2: database name */\n\t\t\t\t\t__( 'Does the user %1$s have permission to use the %2$s database?' ),\n\t\t\t\t\t'<code>' . htmlspecialchars( $this->dbuser, ENT_QUOTES )  . '</code>',\n\t\t\t\t\t'<code>' . htmlspecialchars( $db, ENT_QUOTES ) . '</code>'\n\t\t\t\t) . \"</li>\\n\";\n\n\t\t\t\t$message .= '<li>' . sprintf(\n\t\t\t\t\t/* translators: %s: database name */\n\t\t\t\t\t__( 'On some systems the name of your database is prefixed with your username, so it would be like <code>username_%1$s</code>. Could that be the problem?' ),\n\t\t\t\t\thtmlspecialchars( $db, ENT_QUOTES )\n\t\t\t\t). \"</li>\\n\";\n\n\t\t\t\t$message .= \"</ul>\\n\";\n\n\t\t\t\t$message .= '<p>' . sprintf(\n\t\t\t\t\t/* translators: %s: support forums URL */\n\t\t\t\t\t__( 'If you don&#8217;t know how to set up a database you should <strong>contact your host</strong>. If all else fails you may find help at the <a href=\"%s\">WordPress Support Forums</a>.' ),\n\t\t\t\t\t__( 'https://wordpress.org/support/' )\n\t\t\t\t) . \"</p>\\n\";\n\n\t\t\t\t$this->bail( $message, 'db_select_fail' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Do not use, deprecated.\n\t *\n\t * Use esc_sql() or wpdb::prepare() instead.\n\t *\n\t * @since 2.8.0\n\t * @deprecated 3.6.0 Use wpdb::prepare()\n\t * @see wpdb::prepare\n\t * @see esc_sql()\n\t *\n\t * @param string $string\n\t * @return string\n\t */\n\tfunction _weak_escape( $string ) {\n\t\tif ( func_num_args() === 1 && function_exists( '_deprecated_function' ) )\n\t\t\t_deprecated_function( __METHOD__, '3.6.0', 'wpdb::prepare() or esc_sql()' );\n\t\treturn addslashes( $string );\n\t}\n\n\t/**\n\t * Real escape, using mysqli_real_escape_string() or mysql_real_escape_string()\n\t *\n\t * @see mysqli_real_escape_string()\n\t * @see mysql_real_escape_string()\n\t * @since 2.8.0\n\t *\n\t * @param  string $string to escape\n\t * @return string escaped\n\t */\n\tfunction _real_escape( $string ) {\n\t\tif ( $this->dbh ) {\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\treturn mysqli_real_escape_string( $this->dbh, $string );\n\t\t\t} else {\n\t\t\t\treturn mysql_real_escape_string( $string, $this->dbh );\n\t\t\t}\n\t\t}\n\n\t\t$class = get_class( $this );\n\t\tif ( function_exists( '__' ) ) {\n\t\t\t/* translators: %s: database access abstraction class, usually wpdb or a class extending wpdb */\n\t\t\t_doing_it_wrong( $class, sprintf( __( '%s must set a database connection for use with escaping.' ), $class ), '3.6.0' );\n\t\t} else {\n\t\t\t_doing_it_wrong( $class, sprintf( '%s must set a database connection for use with escaping.', $class ), '3.6.0' );\n\t\t}\n\t\treturn addslashes( $string );\n\t}\n\n\t/**\n\t * Escape data. Works on arrays.\n\t *\n\t * @uses wpdb::_real_escape()\n\t * @since  2.8.0\n\t *\n\t * @param  string|array $data\n\t * @return string|array escaped\n\t */\n\tpublic function _escape( $data ) {\n\t\tif ( is_array( $data ) ) {\n\t\t\tforeach ( $data as $k => $v ) {\n\t\t\t\tif ( is_array( $v ) ) {\n\t\t\t\t\t$data[$k] = $this->_escape( $v );\n\t\t\t\t} else {\n\t\t\t\t\t$data[$k] = $this->_real_escape( $v );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$data = $this->_real_escape( $data );\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Do not use, deprecated.\n\t *\n\t * Use esc_sql() or wpdb::prepare() instead.\n\t *\n\t * @since 0.71\n\t * @deprecated 3.6.0 Use wpdb::prepare()\n\t * @see wpdb::prepare()\n\t * @see esc_sql()\n\t *\n\t * @param mixed $data\n\t * @return mixed\n\t */\n\tpublic function escape( $data ) {\n\t\tif ( func_num_args() === 1 && function_exists( '_deprecated_function' ) )\n\t\t\t_deprecated_function( __METHOD__, '3.6.0', 'wpdb::prepare() or esc_sql()' );\n\t\tif ( is_array( $data ) ) {\n\t\t\tforeach ( $data as $k => $v ) {\n\t\t\t\tif ( is_array( $v ) )\n\t\t\t\t\t$data[$k] = $this->escape( $v, 'recursive' );\n\t\t\t\telse\n\t\t\t\t\t$data[$k] = $this->_weak_escape( $v, 'internal' );\n\t\t\t}\n\t\t} else {\n\t\t\t$data = $this->_weak_escape( $data, 'internal' );\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Escapes content by reference for insertion into the database, for security\n\t *\n\t * @uses wpdb::_real_escape()\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $string to escape\n\t */\n\tpublic function escape_by_ref( &$string ) {\n\t\tif ( ! is_float( $string ) )\n\t\t\t$string = $this->_real_escape( $string );\n\t}\n\n\t/**\n\t * Prepares a SQL query for safe execution. Uses sprintf()-like syntax.\n\t *\n\t * The following placeholders can be used in the query string:\n\t *   %d (integer)\n\t *   %f (float)\n\t *   %s (string)\n\t *\n\t * All placeholders MUST be left unquoted in the query string. A corresponding argument MUST be passed for each placeholder.\n\t *\n\t * Literal percentage signs (%) in the query string must be written as %%. Percentage wildcards (for example,\n\t * to use in LIKE syntax) must be passed via a substitution argument containing the complete LIKE string, these\n\t * cannot be inserted directly in the query string. Also see {@see esc_like()}.\n\t *\n\t * This method DOES NOT support sign, padding, alignment, width or precision specifiers.\n\t * This method DOES NOT support argument numbering or swapping.\n\t *\n\t * Arguments may be passed as individual arguments to the method, or as a single array containing all arguments. A combination \n\t * of the two is not supported.\n\t *\n\t * Examples:\n\t *     $wpdb->prepare( \"SELECT * FROM `table` WHERE `column` = %s AND `field` = %d OR `other_field` LIKE %s\", array( 'foo', 1337, '%bar' ) );\n\t *     $wpdb->prepare( \"SELECT DATE_FORMAT(`field`, '%%c') FROM `table` WHERE `column` = %s\", 'foo' );\n\t *\n\t * @link https://secure.php.net/sprintf Description of syntax.\n\t * @since 2.3.0\n\t *\n\t * @param string      $query    Query statement with sprintf()-like placeholders\n\t * @param array|mixed $args     The array of variables to substitute into the query's placeholders if being called with an array of arguments,\n\t *                              or the first variable to substitute into the query's placeholders if being called with individual arguments.\n\t * @param mixed       $args,... further variables to substitute into the query's placeholders if being called wih individual arguments.\n\t * @return string|void Sanitized query string, if there is a query to prepare.\n\t */\n\tpublic function prepare( $query, $args ) {\n\t\tif ( is_null( $query ) )\n\t\t\treturn;\n\n\t\t// This is not meant to be foolproof -- but it will catch obviously incorrect usage.\n\t\tif ( strpos( $query, '%' ) === false ) {\n\t\t\twp_load_translations_early();\n\t\t\t_doing_it_wrong( 'wpdb::prepare', sprintf( __( 'The query argument of %s must have a placeholder.' ), 'wpdb::prepare()' ), '3.9.0' );\n\t\t}\n\n\t\t$args = func_get_args();\n\t\tarray_shift( $args );\n\n\t\t// If args were passed as an array (as in vsprintf), move them up\n\t\tif ( is_array( $args[0] ) && count( $args ) == 1 ) {\n\t\t\t$args = $args[0];\n\t\t}\n\n\t\tforeach ( $args as $arg ) {\n\t\t\tif ( ! is_scalar( $arg ) && ! is_null( $arg ) ) {\n\t\t\t\twp_load_translations_early();\n\t\t\t\t_doing_it_wrong( 'wpdb::prepare', sprintf( __( 'Unsupported value type (%s).' ), gettype( $arg ) ), '4.8.2' );\n\t\t\t}\n\t\t}\n\n\t\t$query = str_replace( \"'%s'\", '%s', $query ); // in case someone mistakenly already singlequoted it\n\t\t$query = str_replace( '\"%s\"', '%s', $query ); // doublequote unquoting\n\t\t$query = preg_replace( '|(?<!%)%f|' , '%F', $query ); // Force floats to be locale unaware\n\t\t$query = preg_replace( '|(?<!%)%s|', \"'%s'\", $query ); // quote the strings, avoiding escaped strings like %%s\n\t\t$query = preg_replace( '/%(?:%|$|([^dsF]))/', '%%\\\\1', $query ); // escape any unescaped percents\n\n\t\t// Count the number of valid placeholders in the query\n\t\t$placeholders = preg_match_all( '/(^|[^%]|(%%)+)%[sdF]/', $query, $matches );\n\n\t\tif ( count ( $args ) !== $placeholders ) {\n\t\t\twp_load_translations_early();\n\t\t\t_doing_it_wrong( 'wpdb::prepare',\n\t\t\t\t/* translators: 1: number of placeholders, 2: number of arguments passed */\n\t\t\t\tsprintf( __( 'The query does not contain the correct number of placeholders (%1$d) for the number of arguments passed (%2$d).' ),\n\t\t\t\t\t$placeholders,\n\t\t\t\t\tcount( $args ) ),\n\t\t\t\t'4.9.0'\n\t\t\t);\n\t\t}\n\n\t\tarray_walk( $args, array( $this, 'escape_by_ref' ) );\n\t\treturn @vsprintf( $query, $args );\n\t}\n\n\t/**\n\t * First half of escaping for LIKE special characters % and _ before preparing for MySQL.\n\t *\n\t * Use this only before wpdb::prepare() or esc_sql().  Reversing the order is very bad for security.\n\t *\n\t * Example Prepared Statement:\n\t *\n\t *     $wild = '%';\n\t *     $find = 'only 43% of planets';\n\t *     $like = $wild . $wpdb->esc_like( $find ) . $wild;\n\t *     $sql  = $wpdb->prepare( \"SELECT * FROM $wpdb->posts WHERE post_content LIKE %s\", $like );\n\t *\n\t * Example Escape Chain:\n\t *\n\t *     $sql  = esc_sql( $wpdb->esc_like( $input ) );\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param string $text The raw text to be escaped. The input typed by the user should have no\n\t *                     extra or deleted slashes.\n\t * @return string Text in the form of a LIKE phrase. The output is not SQL safe. Call $wpdb::prepare()\n\t *                or real_escape next.\n\t */\n\tpublic function esc_like( $text ) {\n\t\treturn addcslashes( $text, '_%\\\\' );\n\t}\n\n\t/**\n\t * Print SQL/DB error.\n\t *\n\t * @since 0.71\n\t * @global array $EZSQL_ERROR Stores error information of query and error string\n\t *\n\t * @param string $str The error to display\n\t * @return false|void False if the showing of errors is disabled.\n\t */\n\tpublic function print_error( $str = '' ) {\n\t\tglobal $EZSQL_ERROR;\n\n\t\tif ( !$str ) {\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t$str = mysqli_error( $this->dbh );\n\t\t\t} else {\n\t\t\t\t$str = mysql_error( $this->dbh );\n\t\t\t}\n\t\t}\n\t\t$EZSQL_ERROR[] = array( 'query' => $this->last_query, 'error_str' => $str );\n\n\t\tif ( $this->suppress_errors )\n\t\t\treturn false;\n\n\t\twp_load_translations_early();\n\n\t\tif ( $caller = $this->get_caller() ) {\n\t\t\t/* translators: 1: Database error message, 2: SQL query, 3: Name of the calling function */\n\t\t\t$error_str = sprintf( __( 'WordPress database error %1$s for query %2$s made by %3$s' ), $str, $this->last_query, $caller );\n\t\t} else {\n\t\t\t/* translators: 1: Database error message, 2: SQL query */\n\t\t\t$error_str = sprintf( __( 'WordPress database error %1$s for query %2$s' ), $str, $this->last_query );\n\t\t}\n\n\t\terror_log( $error_str );\n\n\t\t// Are we showing errors?\n\t\tif ( ! $this->show_errors )\n\t\t\treturn false;\n\n\t\t// If there is an error then take note of it\n\t\tif ( is_multisite() ) {\n\t\t\t$msg = sprintf(\n\t\t\t\t\"%s [%s]\\n%s\\n\",\n\t\t\t\t__( 'WordPress database error:' ),\n\t\t\t\t$str,\n\t\t\t\t$this->last_query\n\t\t\t);\n\n\t\t\tif ( defined( 'ERRORLOGFILE' ) ) {\n\t\t\t\terror_log( $msg, 3, ERRORLOGFILE );\n\t\t\t}\n\t\t\tif ( defined( 'DIEONDBERROR' ) ) {\n\t\t\t\twp_die( $msg );\n\t\t\t}\n\t\t} else {\n\t\t\t$str   = htmlspecialchars( $str, ENT_QUOTES );\n\t\t\t$query = htmlspecialchars( $this->last_query, ENT_QUOTES );\n\n\t\t\tprintf(\n\t\t\t\t'<div id=\"error\"><p class=\"wpdberror\"><strong>%s</strong> [%s]<br /><code>%s</code></p></div>',\n\t\t\t\t__( 'WordPress database error:' ),\n\t\t\t\t$str,\n\t\t\t\t$query\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Enables showing of database errors.\n\t *\n\t * This function should be used only to enable showing of errors.\n\t * wpdb::hide_errors() should be used instead for hiding of errors. However,\n\t * this function can be used to enable and disable showing of database\n\t * errors.\n\t *\n\t * @since 0.71\n\t * @see wpdb::hide_errors()\n\t *\n\t * @param bool $show Whether to show or hide errors\n\t * @return bool Old value for showing errors.\n\t */\n\tpublic function show_errors( $show = true ) {\n\t\t$errors = $this->show_errors;\n\t\t$this->show_errors = $show;\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * Disables showing of database errors.\n\t *\n\t * By default database errors are not shown.\n\t *\n\t * @since 0.71\n\t * @see wpdb::show_errors()\n\t *\n\t * @return bool Whether showing of errors was active\n\t */\n\tpublic function hide_errors() {\n\t\t$show = $this->show_errors;\n\t\t$this->show_errors = false;\n\t\treturn $show;\n\t}\n\n\t/**\n\t * Whether to suppress database errors.\n\t *\n\t * By default database errors are suppressed, with a simple\n\t * call to this function they can be enabled.\n\t *\n\t * @since 2.5.0\n\t * @see wpdb::hide_errors()\n\t * @param bool $suppress Optional. New value. Defaults to true.\n\t * @return bool Old value\n\t */\n\tpublic function suppress_errors( $suppress = true ) {\n\t\t$errors = $this->suppress_errors;\n\t\t$this->suppress_errors = (bool) $suppress;\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * Kill cached query results.\n\t *\n\t * @since 0.71\n\t */\n\tpublic function flush() {\n\t\t$this->last_result = array();\n\t\t$this->col_info    = null;\n\t\t$this->last_query  = null;\n\t\t$this->rows_affected = $this->num_rows = 0;\n\t\t$this->last_error  = '';\n\n\t\tif ( $this->use_mysqli && $this->result instanceof mysqli_result ) {\n\t\t\tmysqli_free_result( $this->result );\n\t\t\t$this->result = null;\n\n\t\t\t// Sanity check before using the handle\n\t\t\tif ( empty( $this->dbh ) || !( $this->dbh instanceof mysqli ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Clear out any results from a multi-query\n\t\t\twhile ( mysqli_more_results( $this->dbh ) ) {\n\t\t\t\tmysqli_next_result( $this->dbh );\n\t\t\t}\n\t\t} elseif ( is_resource( $this->result ) ) {\n\t\t\tmysql_free_result( $this->result );\n\t\t}\n\t}\n\n\t/**\n\t * Connect to and select database.\n\t *\n\t * If $allow_bail is false, the lack of database connection will need\n\t * to be handled manually.\n\t *\n\t * @since 3.0.0\n\t * @since 3.9.0 $allow_bail parameter added.\n\t *\n\t * @param bool $allow_bail Optional. Allows the function to bail. Default true.\n\t * @return bool True with a successful connection, false on failure.\n\t */\n\tpublic function db_connect( $allow_bail = true ) {\n\t\t$this->is_mysql = true;\n\n\t\t/*\n\t\t * Deprecated in 3.9+ when using MySQLi. No equivalent\n\t\t * $new_link parameter exists for mysqli_* functions.\n\t\t */\n\t\t$new_link = defined( 'MYSQL_NEW_LINK' ) ? MYSQL_NEW_LINK : true;\n\t\t$client_flags = defined( 'MYSQL_CLIENT_FLAGS' ) ? MYSQL_CLIENT_FLAGS : 0;\n\n\t\tif ( $this->use_mysqli ) {\n\t\t\t$this->dbh = mysqli_init();\n\n\t\t\t$host    = $this->dbhost;\n\t\t\t$port    = null;\n\t\t\t$socket  = null;\n\t\t\t$is_ipv6 = false;\n\n\t\t\tif ( $host_data = $this->parse_db_host( $this->dbhost ) ) {\n\t\t\t\tlist( $host, $port, $socket, $is_ipv6 ) = $host_data;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * If using the `mysqlnd` library, the IPv6 address needs to be\n\t\t\t * enclosed in square brackets, whereas it doesn't while using the\n\t\t\t * `libmysqlclient` library.\n\t\t\t * @see https://bugs.php.net/bug.php?id=67563\n\t\t\t */\n\t\t\tif ( $is_ipv6 && extension_loaded( 'mysqlnd' ) ) {\n\t\t\t\t$host = \"[$host]\";\n\t\t\t}\n\n\t\t\tif ( WP_DEBUG ) {\n\t\t\t\tmysqli_real_connect( $this->dbh, $host, $this->dbuser, $this->dbpassword, null, $port, $socket, $client_flags );\n\t\t\t} else {\n\t\t\t\t@mysqli_real_connect( $this->dbh, $host, $this->dbuser, $this->dbpassword, null, $port, $socket, $client_flags );\n\t\t\t}\n\n\t\t\tif ( $this->dbh->connect_errno ) {\n\t\t\t\t$this->dbh = null;\n\n\t\t\t\t/*\n\t\t\t\t * It's possible ext/mysqli is misconfigured. Fall back to ext/mysql if:\n\t\t \t\t *  - We haven't previously connected, and\n\t\t \t\t *  - WP_USE_EXT_MYSQL isn't set to false, and\n\t\t \t\t *  - ext/mysql is loaded.\n\t\t \t\t */\n\t\t\t\t$attempt_fallback = true;\n\n\t\t\t\tif ( $this->has_connected ) {\n\t\t\t\t\t$attempt_fallback = false;\n\t\t\t\t} elseif ( defined( 'WP_USE_EXT_MYSQL' ) && ! WP_USE_EXT_MYSQL ) {\n\t\t\t\t\t$attempt_fallback = false;\n\t\t\t\t} elseif ( ! function_exists( 'mysql_connect' ) ) {\n\t\t\t\t\t$attempt_fallback = false;\n\t\t\t\t}\n\n\t\t\t\tif ( $attempt_fallback ) {\n\t\t\t\t\t$this->use_mysqli = false;\n\t\t\t\t\treturn $this->db_connect( $allow_bail );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ( WP_DEBUG ) {\n\t\t\t\t$this->dbh = mysql_connect( $this->dbhost, $this->dbuser, $this->dbpassword, $new_link, $client_flags );\n\t\t\t} else {\n\t\t\t\t$this->dbh = @mysql_connect( $this->dbhost, $this->dbuser, $this->dbpassword, $new_link, $client_flags );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $this->dbh && $allow_bail ) {\n\t\t\twp_load_translations_early();\n\n\t\t\t// Load custom DB error template, if present.\n\t\t\tif ( file_exists( WP_CONTENT_DIR . '/db-error.php' ) ) {\n\t\t\t\trequire_once( WP_CONTENT_DIR . '/db-error.php' );\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\t$message = '<h1>' . __( 'Error establishing a database connection' ) . \"</h1>\\n\";\n\n\t\t\t$message .= '<p>' . sprintf(\n\t\t\t\t/* translators: 1: wp-config.php. 2: database host */\n\t\t\t\t__( 'This either means that the username and password information in your %1$s file is incorrect or we can&#8217;t contact the database server at %2$s. This could mean your host&#8217;s database server is down.' ),\n\t\t\t\t'<code>wp-config.php</code>',\n\t\t\t\t'<code>' . htmlspecialchars( $this->dbhost, ENT_QUOTES ) . '</code>'\n\t\t\t) . \"</p>\\n\";\n\n\t\t\t$message .= \"<ul>\\n\";\n\t\t\t$message .= '<li>' . __( 'Are you sure you have the correct username and password?' ) . \"</li>\\n\";\n\t\t\t$message .= '<li>' . __( 'Are you sure that you have typed the correct hostname?' ) . \"</li>\\n\";\n\t\t\t$message .= '<li>' . __( 'Are you sure that the database server is running?' ) . \"</li>\\n\";\n\t\t\t$message .= \"</ul>\\n\";\n\n\t\t\t$message .= '<p>' . sprintf(\n\t\t\t\t/* translators: %s: support forums URL */\n\t\t\t\t__( 'If you&#8217;re unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href=\"%s\">WordPress Support Forums</a>.' ),\n\t\t\t\t__( 'https://wordpress.org/support/' )\n\t\t\t) . \"</p>\\n\";\n\n\t\t\t$this->bail( $message, 'db_connect_fail' );\n\n\t\t\treturn false;\n\t\t} elseif ( $this->dbh ) {\n\t\t\tif ( ! $this->has_connected ) {\n\t\t\t\t$this->init_charset();\n\t\t\t}\n\n\t\t\t$this->has_connected = true;\n\n\t\t\t$this->set_charset( $this->dbh );\n\n\t\t\t$this->ready = true;\n\t\t\t$this->set_sql_mode();\n\t\t\t$this->select( $this->dbname, $this->dbh );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Parse the DB_HOST setting to interpret it for mysqli_real_connect.\n\t *\n\t * mysqli_real_connect doesn't support the host param including a port or\n\t * socket like mysql_connect does. This duplicates how mysql_connect detects\n\t * a port and/or socket file.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param string $host The DB_HOST setting to parse.\n\t * @return array|bool Array containing the host, the port, the socket and whether\n\t *                    it is an IPv6 address, in that order. If $host couldn't be parsed,\n\t *                    returns false.\n\t */\n\tpublic function parse_db_host( $host ) {\n\t\t$port    = null;\n\t\t$socket  = null;\n\t\t$is_ipv6 = false;\n\n\t\t// We need to check for an IPv6 address first.\n\t\t// An IPv6 address will always contain at least two colons.\n\t\tif ( substr_count( $host, ':' ) > 1 ) {\n\t\t\t$pattern = '#^(?:\\[)?(?<host>[0-9a-fA-F:]+)(?:\\]:(?<port>[\\d]+))?(?:/(?<socket>.+))?#';\n\t\t\t$is_ipv6 = true;\n\t\t} else {\n\t\t\t// We seem to be dealing with an IPv4 address.\n\t\t\t$pattern = '#^(?<host>[^:/]*)(?::(?<port>[\\d]+))?(?::(?<socket>.+))?#';\n\t\t}\n\n\t\t$matches = array();\n\t\t$result = preg_match( $pattern, $host, $matches );\n\n\t\tif ( 1 !== $result ) {\n\t\t\t// Couldn't parse the address, bail.\n\t\t\treturn false;\n\t\t}\n\n\t\t$host = '';\n\t\tforeach ( array( 'host', 'port', 'socket' ) as $component ) {\n\t\t\tif ( ! empty( $matches[ $component ] ) ) {\n\t\t\t\t$$component = $matches[ $component ];\n\t\t\t}\n\t\t}\n\n\t\treturn array( $host, $port, $socket, $is_ipv6 );\n\t}\n\n\t/**\n\t * Checks that the connection to the database is still up. If not, try to reconnect.\n\t *\n\t * If this function is unable to reconnect, it will forcibly die, or if after the\n\t * the {@see 'template_redirect'} hook has been fired, return false instead.\n\t *\n\t * If $allow_bail is false, the lack of database connection will need\n\t * to be handled manually.\n\t *\n\t * @since 3.9.0\n\t *\n\t * @param bool $allow_bail Optional. Allows the function to bail. Default true.\n\t * @return bool|void True if the connection is up.\n\t */\n\tpublic function check_connection( $allow_bail = true ) {\n\t\tif ( $this->use_mysqli ) {\n\t\t\tif ( ! empty( $this->dbh ) && mysqli_ping( $this->dbh ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! empty( $this->dbh ) && mysql_ping( $this->dbh ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t$error_reporting = false;\n\n\t\t// Disable warnings, as we don't want to see a multitude of \"unable to connect\" messages\n\t\tif ( WP_DEBUG ) {\n\t\t\t$error_reporting = error_reporting();\n\t\t\terror_reporting( $error_reporting & ~E_WARNING );\n\t\t}\n\n\t\tfor ( $tries = 1; $tries <= $this->reconnect_retries; $tries++ ) {\n\t\t\t// On the last try, re-enable warnings. We want to see a single instance of the\n\t\t\t// \"unable to connect\" message on the bail() screen, if it appears.\n\t\t\tif ( $this->reconnect_retries === $tries && WP_DEBUG ) {\n\t\t\t\terror_reporting( $error_reporting );\n\t\t\t}\n\n\t\t\tif ( $this->db_connect( false ) ) {\n\t\t\t\tif ( $error_reporting ) {\n\t\t\t\t\terror_reporting( $error_reporting );\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tsleep( 1 );\n\t\t}\n\n\t\t// If template_redirect has already happened, it's too late for wp_die()/dead_db().\n\t\t// Let's just return and hope for the best.\n\t\tif ( did_action( 'template_redirect' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( ! $allow_bail ) {\n\t\t\treturn false;\n\t\t}\n\n\t\twp_load_translations_early();\n\n\t\t$message = '<h1>' . __( 'Error reconnecting to the database' ) . \"</h1>\\n\";\n\n\t\t$message .= '<p>' . sprintf(\n\t\t\t/* translators: %s: database host */\n\t\t\t__( 'This means that we lost contact with the database server at %s. This could mean your host&#8217;s database server is down.' ),\n\t\t\t'<code>' . htmlspecialchars( $this->dbhost, ENT_QUOTES ) . '</code>'\n\t\t) . \"</p>\\n\";\n\n\t\t$message .= \"<ul>\\n\";\n\t\t$message .= '<li>' . __( 'Are you sure that the database server is running?' ) . \"</li>\\n\";\n\t\t$message .= '<li>' . __( 'Are you sure that the database server is not under particularly heavy load?' ) . \"</li>\\n\";\n\t\t$message .= \"</ul>\\n\";\n\n\t\t$message .= '<p>' . sprintf(\n\t\t\t/* translators: %s: support forums URL */\n\t\t\t__( 'If you&#8217;re unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href=\"%s\">WordPress Support Forums</a>.' ),\n\t\t\t__( 'https://wordpress.org/support/' )\n\t\t) . \"</p>\\n\";\n\n\t\t// We weren't able to reconnect, so we better bail.\n\t\t$this->bail( $message, 'db_connect_fail' );\n\n\t\t// Call dead_db() if bail didn't die, because this database is no more. It has ceased to be (at least temporarily).\n\t\tdead_db();\n\t}\n\n\t/**\n\t * Perform a MySQL database query, using current database connection.\n\t *\n\t * More information can be found on the codex page.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $query Database query\n\t * @return int|false Number of rows affected/selected or false on error\n\t */\n\tpublic function query( $query ) {\n\t\tif ( ! $this->ready ) {\n\t\t\t$this->check_current_query = true;\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Filters the database query.\n\t\t *\n\t\t * Some queries are made before the plugins have been loaded,\n\t\t * and thus cannot be filtered with this method.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param string $query Database query.\n\t\t */\n\t\t$query = apply_filters( 'query', $query );\n\n\t\t$this->flush();\n\n\t\t// Log how the function was called\n\t\t$this->func_call = \"\\$db->query(\\\"$query\\\")\";\n\n\t\t// If we're writing to the database, make sure the query will write safely.\n\t\tif ( $this->check_current_query && ! $this->check_ascii( $query ) ) {\n\t\t\t$stripped_query = $this->strip_invalid_text_from_query( $query );\n\t\t\t// strip_invalid_text_from_query() can perform queries, so we need\n\t\t\t// to flush again, just to make sure everything is clear.\n\t\t\t$this->flush();\n\t\t\tif ( $stripped_query !== $query ) {\n\t\t\t\t$this->insert_id = 0;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t$this->check_current_query = true;\n\n\t\t// Keep track of the last query for debug.\n\t\t$this->last_query = $query;\n\n\t\t$this->_do_query( $query );\n\n\t\t// MySQL server has gone away, try to reconnect.\n\t\t$mysql_errno = 0;\n\t\tif ( ! empty( $this->dbh ) ) {\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\tif ( $this->dbh instanceof mysqli ) {\n\t\t\t\t\t$mysql_errno = mysqli_errno( $this->dbh );\n\t\t\t\t} else {\n\t\t\t\t\t// $dbh is defined, but isn't a real connection.\n\t\t\t\t\t// Something has gone horribly wrong, let's try a reconnect.\n\t\t\t\t\t$mysql_errno = 2006;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( is_resource( $this->dbh ) ) {\n\t\t\t\t\t$mysql_errno = mysql_errno( $this->dbh );\n\t\t\t\t} else {\n\t\t\t\t\t$mysql_errno = 2006;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( empty( $this->dbh ) || 2006 == $mysql_errno ) {\n\t\t\tif ( $this->check_connection() ) {\n\t\t\t\t$this->_do_query( $query );\n\t\t\t} else {\n\t\t\t\t$this->insert_id = 0;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// If there is an error then take note of it.\n\t\tif ( $this->use_mysqli ) {\n\t\t\tif ( $this->dbh instanceof mysqli ) {\n\t\t\t\t$this->last_error = mysqli_error( $this->dbh );\n\t\t\t} else {\n\t\t\t\t$this->last_error = __( 'Unable to retrieve the error message from MySQL' );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( is_resource( $this->dbh ) ) {\n\t\t\t\t$this->last_error = mysql_error( $this->dbh );\n\t\t\t} else {\n\t\t\t\t$this->last_error = __( 'Unable to retrieve the error message from MySQL' );\n\t\t\t}\n\t\t}\n\n\t\tif ( $this->last_error ) {\n\t\t\t// Clear insert_id on a subsequent failed insert.\n\t\t\tif ( $this->insert_id && preg_match( '/^\\s*(insert|replace)\\s/i', $query ) )\n\t\t\t\t$this->insert_id = 0;\n\n\t\t\t$this->print_error();\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( preg_match( '/^\\s*(create|alter|truncate|drop)\\s/i', $query ) ) {\n\t\t\t$return_val = $this->result;\n\t\t} elseif ( preg_match( '/^\\s*(insert|delete|update|replace)\\s/i', $query ) ) {\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t$this->rows_affected = mysqli_affected_rows( $this->dbh );\n\t\t\t} else {\n\t\t\t\t$this->rows_affected = mysql_affected_rows( $this->dbh );\n\t\t\t}\n\t\t\t// Take note of the insert_id\n\t\t\tif ( preg_match( '/^\\s*(insert|replace)\\s/i', $query ) ) {\n\t\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t\t$this->insert_id = mysqli_insert_id( $this->dbh );\n\t\t\t\t} else {\n\t\t\t\t\t$this->insert_id = mysql_insert_id( $this->dbh );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Return number of rows affected\n\t\t\t$return_val = $this->rows_affected;\n\t\t} else {\n\t\t\t$num_rows = 0;\n\t\t\tif ( $this->use_mysqli && $this->result instanceof mysqli_result ) {\n\t\t\t\twhile ( $row = mysqli_fetch_object( $this->result ) ) {\n\t\t\t\t\t$this->last_result[$num_rows] = $row;\n\t\t\t\t\t$num_rows++;\n\t\t\t\t}\n\t\t\t} elseif ( is_resource( $this->result ) ) {\n\t\t\t\twhile ( $row = mysql_fetch_object( $this->result ) ) {\n\t\t\t\t\t$this->last_result[$num_rows] = $row;\n\t\t\t\t\t$num_rows++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Log number of rows the query returned\n\t\t\t// and return number of rows selected\n\t\t\t$this->num_rows = $num_rows;\n\t\t\t$return_val     = $num_rows;\n\t\t}\n\n\t\treturn $return_val;\n\t}\n\n\t/**\n\t * Internal function to perform the mysql_query() call.\n\t *\n\t * @since 3.9.0\n\t *\n\t * @see wpdb::query()\n\t *\n\t * @param string $query The query to run.\n\t */\n\tprivate function _do_query( $query ) {\n\t\tif ( defined( 'SAVEQUERIES' ) && SAVEQUERIES ) {\n\t\t\t$this->timer_start();\n\t\t}\n\n\t\tif ( ! empty( $this->dbh ) && $this->use_mysqli ) {\n\t\t\t$this->result = mysqli_query( $this->dbh, $query );\n\t\t} elseif ( ! empty( $this->dbh ) ) {\n\t\t\t$this->result = mysql_query( $query, $this->dbh );\n\t\t}\n\t\t$this->num_queries++;\n\n\t\tif ( defined( 'SAVEQUERIES' ) && SAVEQUERIES ) {\n\t\t\t$this->queries[] = array( $query, $this->timer_stop(), $this->get_caller() );\n\t\t}\n\t}\n\n\t/**\n\t * Insert a row into a table.\n\t *\n\t *     wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )\n\t *     wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )\n\t *\n\t * @since 2.5.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::$field_types\n\t * @see wp_set_wpdb_vars()\n\t *\n\t * @param string       $table  Table name\n\t * @param array        $data   Data to insert (in column => value pairs).\n\t *                             Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n\t *                             Sending a null value will cause the column to be set to NULL - the corresponding format is ignored in this case.\n\t * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data.\n\t *                             If string, that format will be used for all of the values in $data.\n\t *                             A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                             If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n\t * @return int|false The number of rows inserted, or false on error.\n\t */\n\tpublic function insert( $table, $data, $format = null ) {\n\t\treturn $this->_insert_replace_helper( $table, $data, $format, 'INSERT' );\n\t}\n\n\t/**\n\t * Replace a row into a table.\n\t *\n\t *     wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )\n\t *     wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )\n\t *\n\t * @since 3.0.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::$field_types\n\t * @see wp_set_wpdb_vars()\n\t *\n\t * @param string       $table  Table name\n\t * @param array        $data   Data to insert (in column => value pairs).\n\t *                             Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n\t *                             Sending a null value will cause the column to be set to NULL - the corresponding format is ignored in this case.\n\t * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data.\n\t *                             If string, that format will be used for all of the values in $data.\n\t *                             A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                             If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n\t * @return int|false The number of rows affected, or false on error.\n\t */\n\tpublic function replace( $table, $data, $format = null ) {\n\t\treturn $this->_insert_replace_helper( $table, $data, $format, 'REPLACE' );\n\t}\n\n\t/**\n\t * Helper function for insert and replace.\n\t *\n\t * Runs an insert or replace query based on $type argument.\n\t *\n\t * @since 3.0.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::$field_types\n\t * @see wp_set_wpdb_vars()\n\t *\n\t * @param string       $table  Table name\n\t * @param array        $data   Data to insert (in column => value pairs).\n\t *                             Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n\t *                             Sending a null value will cause the column to be set to NULL - the corresponding format is ignored in this case.\n\t * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data.\n\t *                             If string, that format will be used for all of the values in $data.\n\t *                             A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                             If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n\t * @param string $type         Optional. What type of operation is this? INSERT or REPLACE. Defaults to INSERT.\n\t * @return int|false The number of rows affected, or false on error.\n\t */\n\tfunction _insert_replace_helper( $table, $data, $format = null, $type = 'INSERT' ) {\n\t\t$this->insert_id = 0;\n\n\t\tif ( ! in_array( strtoupper( $type ), array( 'REPLACE', 'INSERT' ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$data = $this->process_fields( $table, $data, $format );\n\t\tif ( false === $data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$formats = $values = array();\n\t\tforeach ( $data as $value ) {\n\t\t\tif ( is_null( $value['value'] ) ) {\n\t\t\t\t$formats[] = 'NULL';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$formats[] = $value['format'];\n\t\t\t$values[]  = $value['value'];\n\t\t}\n\n\t\t$fields  = '`' . implode( '`, `', array_keys( $data ) ) . '`';\n\t\t$formats = implode( ', ', $formats );\n\n\t\t$sql = \"$type INTO `$table` ($fields) VALUES ($formats)\";\n\n\t\t$this->check_current_query = false;\n\t\treturn $this->query( $this->prepare( $sql, $values ) );\n\t}\n\n\t/**\n\t * Update a row in the table\n\t *\n\t *     wpdb::update( 'table', array( 'column' => 'foo', 'field' => 'bar' ), array( 'ID' => 1 ) )\n\t *     wpdb::update( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( 'ID' => 1 ), array( '%s', '%d' ), array( '%d' ) )\n\t *\n\t * @since 2.5.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::$field_types\n\t * @see wp_set_wpdb_vars()\n\t *\n\t * @param string       $table        Table name\n\t * @param array        $data         Data to update (in column => value pairs).\n\t *                                   Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n\t *                                   Sending a null value will cause the column to be set to NULL - the corresponding\n\t *                                   format is ignored in this case.\n\t * @param array        $where        A named array of WHERE clauses (in column => value pairs).\n\t *                                   Multiple clauses will be joined with ANDs.\n\t *                                   Both $where columns and $where values should be \"raw\".\n\t *                                   Sending a null value will create an IS NULL comparison - the corresponding format will be ignored in this case.\n\t * @param array|string $format       Optional. An array of formats to be mapped to each of the values in $data.\n\t *                                   If string, that format will be used for all of the values in $data.\n\t *                                   A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                                   If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n\t * @param array|string $where_format Optional. An array of formats to be mapped to each of the values in $where.\n\t *                                   If string, that format will be used for all of the items in $where.\n\t *                                   A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                                   If omitted, all values in $where will be treated as strings.\n\t * @return int|false The number of rows updated, or false on error.\n\t */\n\tpublic function update( $table, $data, $where, $format = null, $where_format = null ) {\n\t\tif ( ! is_array( $data ) || ! is_array( $where ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$data = $this->process_fields( $table, $data, $format );\n\t\tif ( false === $data ) {\n\t\t\treturn false;\n\t\t}\n\t\t$where = $this->process_fields( $table, $where, $where_format );\n\t\tif ( false === $where ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$fields = $conditions = $values = array();\n\t\tforeach ( $data as $field => $value ) {\n\t\t\tif ( is_null( $value['value'] ) ) {\n\t\t\t\t$fields[] = \"`$field` = NULL\";\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$fields[] = \"`$field` = \" . $value['format'];\n\t\t\t$values[] = $value['value'];\n\t\t}\n\t\tforeach ( $where as $field => $value ) {\n\t\t\tif ( is_null( $value['value'] ) ) {\n\t\t\t\t$conditions[] = \"`$field` IS NULL\";\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$conditions[] = \"`$field` = \" . $value['format'];\n\t\t\t$values[] = $value['value'];\n\t\t}\n\n\t\t$fields = implode( ', ', $fields );\n\t\t$conditions = implode( ' AND ', $conditions );\n\n\t\t$sql = \"UPDATE `$table` SET $fields WHERE $conditions\";\n\t\t\n\t\t$this->check_current_query = false;\n\t\treturn $this->query( $this->prepare( $sql, $values ) );\n\t}\n\n\t/**\n\t * Delete a row in the table\n\t *\n\t *     wpdb::delete( 'table', array( 'ID' => 1 ) )\n\t *     wpdb::delete( 'table', array( 'ID' => 1 ), array( '%d' ) )\n\t *\n\t * @since 3.4.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::$field_types\n\t * @see wp_set_wpdb_vars()\n\t *\n\t * @param string       $table        Table name\n\t * @param array        $where        A named array of WHERE clauses (in column => value pairs).\n\t *                                   Multiple clauses will be joined with ANDs.\n\t *                                   Both $where columns and $where values should be \"raw\".\n\t *                                   Sending a null value will create an IS NULL comparison - the corresponding format will be ignored in this case.\n\t * @param array|string $where_format Optional. An array of formats to be mapped to each of the values in $where.\n\t *                                   If string, that format will be used for all of the items in $where.\n\t *                                   A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                                   If omitted, all values in $where will be treated as strings unless otherwise specified in wpdb::$field_types.\n\t * @return int|false The number of rows updated, or false on error.\n\t */\n\tpublic function delete( $table, $where, $where_format = null ) {\n\t\tif ( ! is_array( $where ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$where = $this->process_fields( $table, $where, $where_format );\n\t\tif ( false === $where ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$conditions = $values = array();\n\t\tforeach ( $where as $field => $value ) {\n\t\t\tif ( is_null( $value['value'] ) ) {\n\t\t\t\t$conditions[] = \"`$field` IS NULL\";\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$conditions[] = \"`$field` = \" . $value['format'];\n\t\t\t$values[] = $value['value'];\n\t\t}\n\n\t\t$conditions = implode( ' AND ', $conditions );\n\n\t\t$sql = \"DELETE FROM `$table` WHERE $conditions\";\n\n\t\t$this->check_current_query = false;\n\t\treturn $this->query( $this->prepare( $sql, $values ) );\n\t}\n\n\t/**\n\t * Processes arrays of field/value pairs and field formats.\n\t *\n\t * This is a helper method for wpdb's CRUD methods, which take field/value\n\t * pairs for inserts, updates, and where clauses. This method first pairs\n\t * each value with a format. Then it determines the charset of that field,\n\t * using that to determine if any invalid text would be stripped. If text is\n\t * stripped, then field processing is rejected and the query fails.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $table  Table name.\n\t * @param array  $data   Field/value pair.\n\t * @param mixed  $format Format for each field.\n\t * @return array|false Returns an array of fields that contain paired values\n\t *                    and formats. Returns false for invalid values.\n\t */\n\tprotected function process_fields( $table, $data, $format ) {\n\t\t$data = $this->process_field_formats( $data, $format );\n\t\tif ( false === $data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$data = $this->process_field_charsets( $data, $table );\n\t\tif ( false === $data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$data = $this->process_field_lengths( $data, $table );\n\t\tif ( false === $data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$converted_data = $this->strip_invalid_text( $data );\n\n\t\tif ( $data !== $converted_data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Prepares arrays of value/format pairs as passed to wpdb CRUD methods.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param array $data   Array of fields to values.\n\t * @param mixed $format Formats to be mapped to the values in $data.\n\t * @return array Array, keyed by field names with values being an array\n\t *               of 'value' and 'format' keys.\n\t */\n\tprotected function process_field_formats( $data, $format ) {\n\t\t$formats = $original_formats = (array) $format;\n\n\t\tforeach ( $data as $field => $value ) {\n\t\t\t$value = array(\n\t\t\t\t'value'  => $value,\n\t\t\t\t'format' => '%s',\n\t\t\t);\n\n\t\t\tif ( ! empty( $format ) ) {\n\t\t\t\t$value['format'] = array_shift( $formats );\n\t\t\t\tif ( ! $value['format'] ) {\n\t\t\t\t\t$value['format'] = reset( $original_formats );\n\t\t\t\t}\n\t\t\t} elseif ( isset( $this->field_types[ $field ] ) ) {\n\t\t\t\t$value['format'] = $this->field_types[ $field ];\n\t\t\t}\n\n\t\t\t$data[ $field ] = $value;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Adds field charsets to field/value/format arrays generated by\n\t * the wpdb::process_field_formats() method.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param array  $data  As it comes from the wpdb::process_field_formats() method.\n\t * @param string $table Table name.\n\t * @return array|false The same array as $data with additional 'charset' keys.\n\t */\n\tprotected function process_field_charsets( $data, $table ) {\n\t\tforeach ( $data as $field => $value ) {\n\t\t\tif ( '%d' === $value['format'] || '%f' === $value['format'] ) {\n\t\t\t\t/*\n\t\t\t\t * We can skip this field if we know it isn't a string.\n\t\t\t\t * This checks %d/%f versus ! %s because its sprintf() could take more.\n\t\t\t\t */\n\t\t\t\t$value['charset'] = false;\n\t\t\t} else {\n\t\t\t\t$value['charset'] = $this->get_col_charset( $table, $field );\n\t\t\t\tif ( is_wp_error( $value['charset'] ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$data[ $field ] = $value;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * For string fields, record the maximum string length that field can safely save.\n\t *\n\t * @since 4.2.1\n\t *\n\t * @param array  $data  As it comes from the wpdb::process_field_charsets() method.\n\t * @param string $table Table name.\n\t * @return array|false The same array as $data with additional 'length' keys, or false if\n\t *                     any of the values were too long for their corresponding field.\n\t */\n\tprotected function process_field_lengths( $data, $table ) {\n\t\tforeach ( $data as $field => $value ) {\n\t\t\tif ( '%d' === $value['format'] || '%f' === $value['format'] ) {\n\t\t\t\t/*\n\t\t\t\t * We can skip this field if we know it isn't a string.\n\t\t\t\t * This checks %d/%f versus ! %s because its sprintf() could take more.\n\t\t\t\t */\n\t\t\t\t$value['length'] = false;\n\t\t\t} else {\n\t\t\t\t$value['length'] = $this->get_col_length( $table, $field );\n\t\t\t\tif ( is_wp_error( $value['length'] ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$data[ $field ] = $value;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Retrieve one variable from the database.\n\t *\n\t * Executes a SQL query and returns the value from the SQL result.\n\t * If the SQL result contains more than one column and/or more than one row, this function returns the value in the column and row specified.\n\t * If $query is null, this function returns the value in the specified column and row from the previous SQL result.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string|null $query Optional. SQL query. Defaults to null, use the result from the previous query.\n\t * @param int         $x     Optional. Column of value to return. Indexed from 0.\n\t * @param int         $y     Optional. Row of value to return. Indexed from 0.\n\t * @return string|null Database query result (as string), or null on failure\n\t */\n\tpublic function get_var( $query = null, $x = 0, $y = 0 ) {\n\t\t$this->func_call = \"\\$db->get_var(\\\"$query\\\", $x, $y)\";\n\n\t\tif ( $this->check_current_query && $this->check_safe_collation( $query ) ) {\n\t\t\t$this->check_current_query = false;\n\t\t}\n\n\t\tif ( $query ) {\n\t\t\t$this->query( $query );\n\t\t}\n\n\t\t// Extract var out of cached results based x,y vals\n\t\tif ( !empty( $this->last_result[$y] ) ) {\n\t\t\t$values = array_values( get_object_vars( $this->last_result[$y] ) );\n\t\t}\n\n\t\t// If there is a value return it else return null\n\t\treturn ( isset( $values[$x] ) && $values[$x] !== '' ) ? $values[$x] : null;\n\t}\n\n\t/**\n\t * Retrieve one row from the database.\n\t *\n\t * Executes a SQL query and returns the row from the SQL result.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string|null $query  SQL query.\n\t * @param string      $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n\t *                            an stdClass object, an associative array, or a numeric array, respectively. Default OBJECT.\n\t * @param int         $y      Optional. Row to return. Indexed from 0.\n\t * @return array|object|null|void Database query result in format specified by $output or null on failure\n\t */\n\tpublic function get_row( $query = null, $output = OBJECT, $y = 0 ) {\n\t\t$this->func_call = \"\\$db->get_row(\\\"$query\\\",$output,$y)\";\n\n\t\tif ( $this->check_current_query && $this->check_safe_collation( $query ) ) {\n\t\t\t$this->check_current_query = false;\n\t\t}\n\n\t\tif ( $query ) {\n\t\t\t$this->query( $query );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( !isset( $this->last_result[$y] ) )\n\t\t\treturn null;\n\n\t\tif ( $output == OBJECT ) {\n\t\t\treturn $this->last_result[$y] ? $this->last_result[$y] : null;\n\t\t} elseif ( $output == ARRAY_A ) {\n\t\t\treturn $this->last_result[$y] ? get_object_vars( $this->last_result[$y] ) : null;\n\t\t} elseif ( $output == ARRAY_N ) {\n\t\t\treturn $this->last_result[$y] ? array_values( get_object_vars( $this->last_result[$y] ) ) : null;\n\t\t} elseif ( strtoupper( $output ) === OBJECT ) {\n\t\t\t// Back compat for OBJECT being previously case insensitive.\n\t\t\treturn $this->last_result[$y] ? $this->last_result[$y] : null;\n\t\t} else {\n\t\t\t$this->print_error( \" \\$db->get_row(string query, output type, int offset) -- Output type must be one of: OBJECT, ARRAY_A, ARRAY_N\" );\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve one column from the database.\n\t *\n\t * Executes a SQL query and returns the column from the SQL result.\n\t * If the SQL result contains more than one column, this function returns the column specified.\n\t * If $query is null, this function returns the specified column from the previous SQL result.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string|null $query Optional. SQL query. Defaults to previous query.\n\t * @param int         $x     Optional. Column to return. Indexed from 0.\n\t * @return array Database query result. Array indexed from 0 by SQL result row number.\n\t */\n\tpublic function get_col( $query = null , $x = 0 ) {\n\t\tif ( $this->check_current_query && $this->check_safe_collation( $query ) ) {\n\t\t\t$this->check_current_query = false;\n\t\t}\n\n\t\tif ( $query ) {\n\t\t\t$this->query( $query );\n\t\t}\n\n\t\t$new_array = array();\n\t\t// Extract the column values\n\t\tfor ( $i = 0, $j = count( $this->last_result ); $i < $j; $i++ ) {\n\t\t\t$new_array[$i] = $this->get_var( null, $x, $i );\n\t\t}\n\t\treturn $new_array;\n\t}\n\n\t/**\n\t * Retrieve an entire SQL result set from the database (i.e., many rows)\n\t *\n\t * Executes a SQL query and returns the entire SQL result.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $query  SQL query.\n\t * @param string $output Optional. Any of ARRAY_A | ARRAY_N | OBJECT | OBJECT_K constants.\n\t *                       With one of the first three, return an array of rows indexed from 0 by SQL result row number.\n\t *                       Each row is an associative array (column => value, ...), a numerically indexed array (0 => value, ...), or an object. ( ->column = value ), respectively.\n\t *                       With OBJECT_K, return an associative array of row objects keyed by the value of each row's first column's value.\n\t *                       Duplicate keys are discarded.\n\t * @return array|object|null Database query results\n\t */\n\tpublic function get_results( $query = null, $output = OBJECT ) {\n\t\t$this->func_call = \"\\$db->get_results(\\\"$query\\\", $output)\";\n\n\t\tif ( $this->check_current_query && $this->check_safe_collation( $query ) ) {\n\t\t\t$this->check_current_query = false;\n\t\t}\n\n\t\tif ( $query ) {\n\t\t\t$this->query( $query );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t\t$new_array = array();\n\t\tif ( $output == OBJECT ) {\n\t\t\t// Return an integer-keyed array of row objects\n\t\t\treturn $this->last_result;\n\t\t} elseif ( $output == OBJECT_K ) {\n\t\t\t// Return an array of row objects with keys from column 1\n\t\t\t// (Duplicates are discarded)\n\t\t\tforeach ( $this->last_result as $row ) {\n\t\t\t\t$var_by_ref = get_object_vars( $row );\n\t\t\t\t$key = array_shift( $var_by_ref );\n\t\t\t\tif ( ! isset( $new_array[ $key ] ) )\n\t\t\t\t\t$new_array[ $key ] = $row;\n\t\t\t}\n\t\t\treturn $new_array;\n\t\t} elseif ( $output == ARRAY_A || $output == ARRAY_N ) {\n\t\t\t// Return an integer-keyed array of...\n\t\t\tif ( $this->last_result ) {\n\t\t\t\tforeach ( (array) $this->last_result as $row ) {\n\t\t\t\t\tif ( $output == ARRAY_N ) {\n\t\t\t\t\t\t// ...integer-keyed row arrays\n\t\t\t\t\t\t$new_array[] = array_values( get_object_vars( $row ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ...column name-keyed row arrays\n\t\t\t\t\t\t$new_array[] = get_object_vars( $row );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $new_array;\n\t\t} elseif ( strtoupper( $output ) === OBJECT ) {\n\t\t\t// Back compat for OBJECT being previously case insensitive.\n\t\t\treturn $this->last_result;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Retrieves the character set for the given table.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $table Table name.\n\t * @return string|WP_Error Table character set, WP_Error object if it couldn't be found.\n\t */\n\tprotected function get_table_charset( $table ) {\n\t\t$tablekey = strtolower( $table );\n\n\t\t/**\n\t\t * Filters the table charset value before the DB is checked.\n\t\t *\n\t\t * Passing a non-null value to the filter will effectively short-circuit\n\t\t * checking the DB for the charset, returning that value instead.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string $charset The character set to use. Default null.\n\t\t * @param string $table   The name of the table being checked.\n\t\t */\n\t\t$charset = apply_filters( 'pre_get_table_charset', null, $table );\n\t\tif ( null !== $charset ) {\n\t\t\treturn $charset;\n\t\t}\n\n\t\tif ( isset( $this->table_charset[ $tablekey ] ) ) {\n\t\t\treturn $this->table_charset[ $tablekey ];\n\t\t}\n\n\t\t$charsets = $columns = array();\n\n\t\t$table_parts = explode( '.', $table );\n\t\t$table = '`' . implode( '`.`', $table_parts ) . '`';\n\t\t$results = $this->get_results( \"SHOW FULL COLUMNS FROM $table\" );\n\t\tif ( ! $results ) {\n\t\t\treturn new WP_Error( 'wpdb_get_table_charset_failure' );\n\t\t}\n\n\t\tforeach ( $results as $column ) {\n\t\t\t$columns[ strtolower( $column->Field ) ] = $column;\n\t\t}\n\n\t\t$this->col_meta[ $tablekey ] = $columns;\n\n\t\tforeach ( $columns as $column ) {\n\t\t\tif ( ! empty( $column->Collation ) ) {\n\t\t\t\tlist( $charset ) = explode( '_', $column->Collation );\n\n\t\t\t\t// If the current connection can't support utf8mb4 characters, let's only send 3-byte utf8 characters.\n\t\t\t\tif ( 'utf8mb4' === $charset && ! $this->has_cap( 'utf8mb4' ) ) {\n\t\t\t\t\t$charset = 'utf8';\n\t\t\t\t}\n\n\t\t\t\t$charsets[ strtolower( $charset ) ] = true;\n\t\t\t}\n\n\t\t\tlist( $type ) = explode( '(', $column->Type );\n\n\t\t\t// A binary/blob means the whole query gets treated like this.\n\t\t\tif ( in_array( strtoupper( $type ), array( 'BINARY', 'VARBINARY', 'TINYBLOB', 'MEDIUMBLOB', 'BLOB', 'LONGBLOB' ) ) ) {\n\t\t\t\t$this->table_charset[ $tablekey ] = 'binary';\n\t\t\t\treturn 'binary';\n\t\t\t}\n\t\t}\n\n\t\t// utf8mb3 is an alias for utf8.\n\t\tif ( isset( $charsets['utf8mb3'] ) ) {\n\t\t\t$charsets['utf8'] = true;\n\t\t\tunset( $charsets['utf8mb3'] );\n\t\t}\n\n\t\t// Check if we have more than one charset in play.\n\t\t$count = count( $charsets );\n\t\tif ( 1 === $count ) {\n\t\t\t$charset = key( $charsets );\n\t\t} elseif ( 0 === $count ) {\n\t\t\t// No charsets, assume this table can store whatever.\n\t\t\t$charset = false;\n\t\t} else {\n\t\t\t// More than one charset. Remove latin1 if present and recalculate.\n\t\t\tunset( $charsets['latin1'] );\n\t\t\t$count = count( $charsets );\n\t\t\tif ( 1 === $count ) {\n\t\t\t\t// Only one charset (besides latin1).\n\t\t\t\t$charset = key( $charsets );\n\t\t\t} elseif ( 2 === $count && isset( $charsets['utf8'], $charsets['utf8mb4'] ) ) {\n\t\t\t\t// Two charsets, but they're utf8 and utf8mb4, use utf8.\n\t\t\t\t$charset = 'utf8';\n\t\t\t} else {\n\t\t\t\t// Two mixed character sets. ascii.\n\t\t\t\t$charset = 'ascii';\n\t\t\t}\n\t\t}\n\n\t\t$this->table_charset[ $tablekey ] = $charset;\n\t\treturn $charset;\n\t}\n\n\t/**\n\t * Retrieves the character set for the given column.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $table  Table name.\n\t * @param string $column Column name.\n\t * @return string|false|WP_Error Column character set as a string. False if the column has no\n\t *                               character set. WP_Error object if there was an error.\n\t */\n\tpublic function get_col_charset( $table, $column ) {\n\t\t$tablekey = strtolower( $table );\n\t\t$columnkey = strtolower( $column );\n\n\t\t/**\n\t\t * Filters the column charset value before the DB is checked.\n\t\t *\n\t\t * Passing a non-null value to the filter will short-circuit\n\t\t * checking the DB for the charset, returning that value instead.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string $charset The character set to use. Default null.\n\t\t * @param string $table   The name of the table being checked.\n\t\t * @param string $column  The name of the column being checked.\n\t\t */\n\t\t$charset = apply_filters( 'pre_get_col_charset', null, $table, $column );\n\t\tif ( null !== $charset ) {\n\t\t\treturn $charset;\n\t\t}\n\n\t\t// Skip this entirely if this isn't a MySQL database.\n\t\tif ( empty( $this->is_mysql ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( empty( $this->table_charset[ $tablekey ] ) ) {\n\t\t\t// This primes column information for us.\n\t\t\t$table_charset = $this->get_table_charset( $table );\n\t\t\tif ( is_wp_error( $table_charset ) ) {\n\t\t\t\treturn $table_charset;\n\t\t\t}\n\t\t}\n\n\t\t// If still no column information, return the table charset.\n\t\tif ( empty( $this->col_meta[ $tablekey ] ) ) {\n\t\t\treturn $this->table_charset[ $tablekey ];\n\t\t}\n\n\t\t// If this column doesn't exist, return the table charset.\n\t\tif ( empty( $this->col_meta[ $tablekey ][ $columnkey ] ) ) {\n\t\t\treturn $this->table_charset[ $tablekey ];\n\t\t}\n\n\t\t// Return false when it's not a string column.\n\t\tif ( empty( $this->col_meta[ $tablekey ][ $columnkey ]->Collation ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlist( $charset ) = explode( '_', $this->col_meta[ $tablekey ][ $columnkey ]->Collation );\n\t\treturn $charset;\n\t}\n\n\t/**\n\t * Retrieve the maximum string length allowed in a given column.\n\t * The length may either be specified as a byte length or a character length.\n\t *\n\t * @since 4.2.1\n\t *\n\t * @param string $table  Table name.\n\t * @param string $column Column name.\n\t * @return array|false|WP_Error array( 'length' => (int), 'type' => 'byte' | 'char' )\n\t *                              false if the column has no length (for example, numeric column)\n\t *                              WP_Error object if there was an error.\n\t */\n\tpublic function get_col_length( $table, $column ) {\n\t\t$tablekey = strtolower( $table );\n\t\t$columnkey = strtolower( $column );\n\n\t\t// Skip this entirely if this isn't a MySQL database.\n\t\tif ( empty( $this->is_mysql ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( empty( $this->col_meta[ $tablekey ] ) ) {\n\t\t\t// This primes column information for us.\n\t\t\t$table_charset = $this->get_table_charset( $table );\n\t\t\tif ( is_wp_error( $table_charset ) ) {\n\t\t\t\treturn $table_charset;\n\t\t\t}\n\t\t}\n\n\t\tif ( empty( $this->col_meta[ $tablekey ][ $columnkey ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$typeinfo = explode( '(', $this->col_meta[ $tablekey ][ $columnkey ]->Type );\n\n\t\t$type = strtolower( $typeinfo[0] );\n\t\tif ( ! empty( $typeinfo[1] ) ) {\n\t\t\t$length = trim( $typeinfo[1], ')' );\n\t\t} else {\n\t\t\t$length = false;\n\t\t}\n\n\t\tswitch( $type ) {\n\t\t\tcase 'char':\n\t\t\tcase 'varchar':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'char',\n\t\t\t\t\t'length' => (int) $length,\n\t\t\t\t);\n\n\t\t\tcase 'binary':\n\t\t\tcase 'varbinary':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'byte',\n\t\t\t\t\t'length' => (int) $length,\n\t\t\t\t);\n\n\t\t\tcase 'tinyblob':\n\t\t\tcase 'tinytext':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'byte',\n\t\t\t\t\t'length' => 255,        // 2^8 - 1\n\t\t\t\t);\n\n\t\t\tcase 'blob':\n\t\t\tcase 'text':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'byte',\n\t\t\t\t\t'length' => 65535,      // 2^16 - 1\n\t\t\t\t);\n\n\t\t\tcase 'mediumblob':\n\t\t\tcase 'mediumtext':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'byte',\n\t\t\t\t\t'length' => 16777215,   // 2^24 - 1\n\t\t\t\t);\n\n\t\t\tcase 'longblob':\n\t\t\tcase 'longtext':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'byte',\n\t\t\t\t\t'length' => 4294967295, // 2^32 - 1\n\t\t\t\t);\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Check if a string is ASCII.\n\t *\n\t * The negative regex is faster for non-ASCII strings, as it allows\n\t * the search to finish as soon as it encounters a non-ASCII character.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $string String to check.\n\t * @return bool True if ASCII, false if not.\n\t */\n\tprotected function check_ascii( $string ) {\n\t\tif ( function_exists( 'mb_check_encoding' ) ) {\n\t\t\tif ( mb_check_encoding( $string, 'ASCII' ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} elseif ( ! preg_match( '/[^\\x00-\\x7F]/', $string ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if the query is accessing a collation considered safe on the current version of MySQL.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $query The query to check.\n\t * @return bool True if the collation is safe, false if it isn't.\n\t */\n\tprotected function check_safe_collation( $query ) {\n\t\tif ( $this->checking_collation ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// We don't need to check the collation for queries that don't read data.\n\t\t$query = ltrim( $query, \"\\r\\n\\t (\" );\n\t\tif ( preg_match( '/^(?:SHOW|DESCRIBE|DESC|EXPLAIN|CREATE)\\s/i', $query ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// All-ASCII queries don't need extra checking.\n\t\tif ( $this->check_ascii( $query ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t$table = $this->get_table_from_query( $query );\n\t\tif ( ! $table ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->checking_collation = true;\n\t\t$collation = $this->get_table_charset( $table );\n\t\t$this->checking_collation = false;\n\n\t\t// Tables with no collation, or latin1 only, don't need extra checking.\n\t\tif ( false === $collation || 'latin1' === $collation ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t$table = strtolower( $table );\n\t\tif ( empty( $this->col_meta[ $table ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If any of the columns don't have one of these collations, it needs more sanity checking.\n\t\tforeach ( $this->col_meta[ $table ] as $col ) {\n\t\t\tif ( empty( $col->Collation ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( ! in_array( $col->Collation, array( 'utf8_general_ci', 'utf8_bin', 'utf8mb4_general_ci', 'utf8mb4_bin' ), true ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Strips any invalid characters based on value/charset pairs.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param array $data Array of value arrays. Each value array has the keys\n\t *                    'value' and 'charset'. An optional 'ascii' key can be\n\t *                    set to false to avoid redundant ASCII checks.\n\t * @return array|WP_Error The $data parameter, with invalid characters removed from\n\t *                        each value. This works as a passthrough: any additional keys\n\t *                        such as 'field' are retained in each value array. If we cannot\n\t *                        remove invalid characters, a WP_Error object is returned.\n\t */\n\tprotected function strip_invalid_text( $data ) {\n\t\t$db_check_string = false;\n\n\t\tforeach ( $data as &$value ) {\n\t\t\t$charset = $value['charset'];\n\n\t\t\tif ( is_array( $value['length'] ) ) {\n\t\t\t\t$length = $value['length']['length'];\n\t\t\t\t$truncate_by_byte_length = 'byte' === $value['length']['type'];\n\t\t\t} else {\n\t\t\t\t$length = false;\n\t\t\t\t// Since we have no length, we'll never truncate.\n\t\t\t\t// Initialize the variable to false. true would take us\n\t\t\t\t// through an unnecessary (for this case) codepath below.\n\t\t\t\t$truncate_by_byte_length = false;\n\t\t\t}\n\n\t\t\t// There's no charset to work with.\n\t\t\tif ( false === $charset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Column isn't a string.\n\t\t\tif ( ! is_string( $value['value'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$needs_validation = true;\n\t\t\tif (\n\t\t\t\t// latin1 can store any byte sequence\n\t\t\t\t'latin1' === $charset\n\t\t\t||\n\t\t\t\t// ASCII is always OK.\n\t\t\t\t( ! isset( $value['ascii'] ) && $this->check_ascii( $value['value'] ) )\n\t\t\t) {\n\t\t\t\t$truncate_by_byte_length = true;\n\t\t\t\t$needs_validation = false;\n\t\t\t}\n\n\t\t\tif ( $truncate_by_byte_length ) {\n\t\t\t\tmbstring_binary_safe_encoding();\n\t\t\t\tif ( false !== $length && strlen( $value['value'] ) > $length ) {\n\t\t\t\t\t$value['value'] = substr( $value['value'], 0, $length );\n\t\t\t\t}\n\t\t\t\treset_mbstring_encoding();\n\n\t\t\t\tif ( ! $needs_validation ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// utf8 can be handled by regex, which is a bunch faster than a DB lookup.\n\t\t\tif ( ( 'utf8' === $charset || 'utf8mb3' === $charset || 'utf8mb4' === $charset ) && function_exists( 'mb_strlen' ) ) {\n\t\t\t\t$regex = '/\n\t\t\t\t\t(\n\t\t\t\t\t\t(?: [\\x00-\\x7F]                  # single-byte sequences   0xxxxxxx\n\t\t\t\t\t\t|   [\\xC2-\\xDF][\\x80-\\xBF]       # double-byte sequences   110xxxxx 10xxxxxx\n\t\t\t\t\t\t|   \\xE0[\\xA0-\\xBF][\\x80-\\xBF]   # triple-byte sequences   1110xxxx 10xxxxxx * 2\n\t\t\t\t\t\t|   [\\xE1-\\xEC][\\x80-\\xBF]{2}\n\t\t\t\t\t\t|   \\xED[\\x80-\\x9F][\\x80-\\xBF]\n\t\t\t\t\t\t|   [\\xEE-\\xEF][\\x80-\\xBF]{2}';\n\n\t\t\t\tif ( 'utf8mb4' === $charset ) {\n\t\t\t\t\t$regex .= '\n\t\t\t\t\t\t|    \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3\n\t\t\t\t\t\t|    [\\xF1-\\xF3][\\x80-\\xBF]{3}\n\t\t\t\t\t\t|    \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2}\n\t\t\t\t\t';\n\t\t\t\t}\n\n\t\t\t\t$regex .= '){1,40}                          # ...one or more times\n\t\t\t\t\t)\n\t\t\t\t\t| .                                  # anything else\n\t\t\t\t\t/x';\n\t\t\t\t$value['value'] = preg_replace( $regex, '$1', $value['value'] );\n\n\n\t\t\t\tif ( false !== $length && mb_strlen( $value['value'], 'UTF-8' ) > $length ) {\n\t\t\t\t\t$value['value'] = mb_substr( $value['value'], 0, $length, 'UTF-8' );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// We couldn't use any local conversions, send it to the DB.\n\t\t\t$value['db'] = $db_check_string = true;\n\t\t}\n\t\tunset( $value ); // Remove by reference.\n\n\t\tif ( $db_check_string ) {\n\t\t\t$queries = array();\n\t\t\tforeach ( $data as $col => $value ) {\n\t\t\t\tif ( ! empty( $value['db'] ) ) {\n\t\t\t\t\t// We're going to need to truncate by characters or bytes, depending on the length value we have.\n\t\t\t\t\tif ( 'byte' === $value['length']['type'] ) {\n\t\t\t\t\t\t// Using binary causes LEFT() to truncate by bytes.\n\t\t\t\t\t\t$charset = 'binary';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$charset = $value['charset'];\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $this->charset ) {\n\t\t\t\t\t\t$connection_charset = $this->charset;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t\t\t\t$connection_charset = mysqli_character_set_name( $this->dbh );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$connection_charset = mysql_client_encoding();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( is_array( $value['length'] ) ) {\n\t\t\t\t\t\t$length = sprintf( '%.0f', $value['length']['length'] );\n\t\t\t\t\t\t$queries[ $col ] = $this->prepare( \"CONVERT( LEFT( CONVERT( %s USING $charset ), $length ) USING $connection_charset )\", $value['value'] );\n\t\t\t\t\t} else if ( 'binary' !== $charset ) {\n\t\t\t\t\t\t// If we don't have a length, there's no need to convert binary - it will always return the same result.\n\t\t\t\t\t\t$queries[ $col ] = $this->prepare( \"CONVERT( CONVERT( %s USING $charset ) USING $connection_charset )\", $value['value'] );\n\t\t\t\t\t}\n\n\t\t\t\t\tunset( $data[ $col ]['db'] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$sql = array();\n\t\t\tforeach ( $queries as $column => $query ) {\n\t\t\t\tif ( ! $query ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$sql[] = $query . \" AS x_$column\";\n\t\t\t}\n\n\t\t\t$this->check_current_query = false;\n\t\t\t$row = $this->get_row( \"SELECT \" . implode( ', ', $sql ), ARRAY_A );\n\t\t\tif ( ! $row ) {\n\t\t\t\treturn new WP_Error( 'wpdb_strip_invalid_text_failure' );\n\t\t\t}\n\n\t\t\tforeach ( array_keys( $data ) as $column ) {\n\t\t\t\tif ( isset( $row[\"x_$column\"] ) ) {\n\t\t\t\t\t$data[ $column ]['value'] = $row[\"x_$column\"];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Strips any invalid characters from the query.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $query Query to convert.\n\t * @return string|WP_Error The converted query, or a WP_Error object if the conversion fails.\n\t */\n\tprotected function strip_invalid_text_from_query( $query ) {\n\t\t// We don't need to check the collation for queries that don't read data.\n\t\t$trimmed_query = ltrim( $query, \"\\r\\n\\t (\" );\n\t\tif ( preg_match( '/^(?:SHOW|DESCRIBE|DESC|EXPLAIN|CREATE)\\s/i', $trimmed_query ) ) {\n\t\t\treturn $query;\n\t\t}\n\n\t\t$table = $this->get_table_from_query( $query );\n\t\tif ( $table ) {\n\t\t\t$charset = $this->get_table_charset( $table );\n\t\t\tif ( is_wp_error( $charset ) ) {\n\t\t\t\treturn $charset;\n\t\t\t}\n\n\t\t\t// We can't reliably strip text from tables containing binary/blob columns\n\t\t\tif ( 'binary' === $charset ) {\n\t\t\t\treturn $query;\n\t\t\t}\n\t\t} else {\n\t\t\t$charset = $this->charset;\n\t\t}\n\n\t\t$data = array(\n\t\t\t'value'   => $query,\n\t\t\t'charset' => $charset,\n\t\t\t'ascii'   => false,\n\t\t\t'length'  => false,\n\t\t);\n\n\t\t$data = $this->strip_invalid_text( array( $data ) );\n\t\tif ( is_wp_error( $data ) ) {\n\t\t\treturn $data;\n\t\t}\n\n\t\treturn $data[0]['value'];\n\t}\n\n\t/**\n\t * Strips any invalid characters from the string for a given table and column.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $table  Table name.\n\t * @param string $column Column name.\n\t * @param string $value  The text to check.\n\t * @return string|WP_Error The converted string, or a WP_Error object if the conversion fails.\n\t */\n\tpublic function strip_invalid_text_for_column( $table, $column, $value ) {\n\t\tif ( ! is_string( $value ) ) {\n\t\t\treturn $value;\n\t\t}\n\n\t\t$charset = $this->get_col_charset( $table, $column );\n\t\tif ( ! $charset ) {\n\t\t\t// Not a string column.\n\t\t\treturn $value;\n\t\t} elseif ( is_wp_error( $charset ) ) {\n\t\t\t// Bail on real errors.\n\t\t\treturn $charset;\n\t\t}\n\n\t\t$data = array(\n\t\t\t$column => array(\n\t\t\t\t'value'   => $value,\n\t\t\t\t'charset' => $charset,\n\t\t\t\t'length'  => $this->get_col_length( $table, $column ),\n\t\t\t)\n\t\t);\n\n\t\t$data = $this->strip_invalid_text( $data );\n\t\tif ( is_wp_error( $data ) ) {\n\t\t\treturn $data;\n\t\t}\n\n\t\treturn $data[ $column ]['value'];\n\t}\n\n\t/**\n\t * Find the first table name referenced in a query.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $query The query to search.\n\t * @return string|false $table The table name found, or false if a table couldn't be found.\n\t */\n\tprotected function get_table_from_query( $query ) {\n\t\t// Remove characters that can legally trail the table name.\n\t\t$query = rtrim( $query, ';/-#' );\n\n\t\t// Allow (select...) union [...] style queries. Use the first query's table name.\n\t\t$query = ltrim( $query, \"\\r\\n\\t (\" );\n\n\t\t// Strip everything between parentheses except nested selects.\n\t\t$query = preg_replace( '/\\((?!\\s*select)[^(]*?\\)/is', '()', $query );\n\n\t\t// Quickly match most common queries.\n\t\tif ( preg_match( '/^\\s*(?:'\n\t\t\t\t. 'SELECT.*?\\s+FROM'\n\t\t\t\t. '|INSERT(?:\\s+LOW_PRIORITY|\\s+DELAYED|\\s+HIGH_PRIORITY)?(?:\\s+IGNORE)?(?:\\s+INTO)?'\n\t\t\t\t. '|REPLACE(?:\\s+LOW_PRIORITY|\\s+DELAYED)?(?:\\s+INTO)?'\n\t\t\t\t. '|UPDATE(?:\\s+LOW_PRIORITY)?(?:\\s+IGNORE)?'\n\t\t\t\t. '|DELETE(?:\\s+LOW_PRIORITY|\\s+QUICK|\\s+IGNORE)*(?:.+?FROM)?'\n\t\t\t\t. ')\\s+((?:[0-9a-zA-Z$_.`-]|[\\xC2-\\xDF][\\x80-\\xBF])+)/is', $query, $maybe ) ) {\n\t\t\treturn str_replace( '`', '', $maybe[1] );\n\t\t}\n\n\t\t// SHOW TABLE STATUS and SHOW TABLES WHERE Name = 'wp_posts'\n\t\tif ( preg_match( '/^\\s*SHOW\\s+(?:TABLE\\s+STATUS|(?:FULL\\s+)?TABLES).+WHERE\\s+Name\\s*=\\s*(\"|\\')((?:[0-9a-zA-Z$_.-]|[\\xC2-\\xDF][\\x80-\\xBF])+)\\\\1/is', $query, $maybe ) ) {\n\t\t\treturn $maybe[2];\n\t\t}\n\n\t\t// SHOW TABLE STATUS LIKE and SHOW TABLES LIKE 'wp\\_123\\_%'\n\t\t// This quoted LIKE operand seldom holds a full table name.\n\t\t// It is usually a pattern for matching a prefix so we just\n\t\t// strip the trailing % and unescape the _ to get 'wp_123_'\n\t\t// which drop-ins can use for routing these SQL statements.\n\t\tif ( preg_match( '/^\\s*SHOW\\s+(?:TABLE\\s+STATUS|(?:FULL\\s+)?TABLES)\\s+(?:WHERE\\s+Name\\s+)?LIKE\\s*(\"|\\')((?:[\\\\\\\\0-9a-zA-Z$_.-]|[\\xC2-\\xDF][\\x80-\\xBF])+)%?\\\\1/is', $query, $maybe ) ) {\n\t\t\treturn str_replace( '\\\\_', '_', $maybe[2] );\n\t\t}\n\n\t\t// Big pattern for the rest of the table-related queries.\n\t\tif ( preg_match( '/^\\s*(?:'\n\t\t\t\t. '(?:EXPLAIN\\s+(?:EXTENDED\\s+)?)?SELECT.*?\\s+FROM'\n\t\t\t\t. '|DESCRIBE|DESC|EXPLAIN|HANDLER'\n\t\t\t\t. '|(?:LOCK|UNLOCK)\\s+TABLE(?:S)?'\n\t\t\t\t. '|(?:RENAME|OPTIMIZE|BACKUP|RESTORE|CHECK|CHECKSUM|ANALYZE|REPAIR).*\\s+TABLE'\n\t\t\t\t. '|TRUNCATE(?:\\s+TABLE)?'\n\t\t\t\t. '|CREATE(?:\\s+TEMPORARY)?\\s+TABLE(?:\\s+IF\\s+NOT\\s+EXISTS)?'\n\t\t\t\t. '|ALTER(?:\\s+IGNORE)?\\s+TABLE'\n\t\t\t\t. '|DROP\\s+TABLE(?:\\s+IF\\s+EXISTS)?'\n\t\t\t\t. '|CREATE(?:\\s+\\w+)?\\s+INDEX.*\\s+ON'\n\t\t\t\t. '|DROP\\s+INDEX.*\\s+ON'\n\t\t\t\t. '|LOAD\\s+DATA.*INFILE.*INTO\\s+TABLE'\n\t\t\t\t. '|(?:GRANT|REVOKE).*ON\\s+TABLE'\n\t\t\t\t. '|SHOW\\s+(?:.*FROM|.*TABLE)'\n\t\t\t\t. ')\\s+\\(*\\s*((?:[0-9a-zA-Z$_.`-]|[\\xC2-\\xDF][\\x80-\\xBF])+)\\s*\\)*/is', $query, $maybe ) ) {\n\t\t\treturn str_replace( '`', '', $maybe[1] );\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Load the column metadata from the last query.\n\t *\n\t * @since 3.5.0\n\t *\n\t */\n\tprotected function load_col_info() {\n\t\tif ( $this->col_info )\n\t\t\treturn;\n\n\t\tif ( $this->use_mysqli ) {\n\t\t\t$num_fields = mysqli_num_fields( $this->result );\n\t\t\tfor ( $i = 0; $i < $num_fields; $i++ ) {\n\t\t\t\t$this->col_info[ $i ] = mysqli_fetch_field( $this->result );\n\t\t\t}\n\t\t} else {\n\t\t\t$num_fields = mysql_num_fields( $this->result );\n\t\t\tfor ( $i = 0; $i < $num_fields; $i++ ) {\n\t\t\t\t$this->col_info[ $i ] = mysql_fetch_field( $this->result, $i );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve column metadata from the last query.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $info_type  Optional. Type one of name, table, def, max_length, not_null, primary_key, multiple_key, unique_key, numeric, blob, type, unsigned, zerofill\n\t * @param int    $col_offset Optional. 0: col name. 1: which table the col's in. 2: col's max length. 3: if the col is numeric. 4: col's type\n\t * @return mixed Column Results\n\t */\n\tpublic function get_col_info( $info_type = 'name', $col_offset = -1 ) {\n\t\t$this->load_col_info();\n\n\t\tif ( $this->col_info ) {\n\t\t\tif ( $col_offset == -1 ) {\n\t\t\t\t$i = 0;\n\t\t\t\t$new_array = array();\n\t\t\t\tforeach ( (array) $this->col_info as $col ) {\n\t\t\t\t\t$new_array[$i] = $col->{$info_type};\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\treturn $new_array;\n\t\t\t} else {\n\t\t\t\treturn $this->col_info[$col_offset]->{$info_type};\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Starts the timer, for debugging purposes.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @return true\n\t */\n\tpublic function timer_start() {\n\t\t$this->time_start = microtime( true );\n\t\treturn true;\n\t}\n\n\t/**\n\t * Stops the debugging timer.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @return float Total time spent on the query, in seconds\n\t */\n\tpublic function timer_stop() {\n\t\treturn ( microtime( true ) - $this->time_start );\n\t}\n\n\t/**\n\t * Wraps errors in a nice header and footer and dies.\n\t *\n\t * Will not die if wpdb::$show_errors is false.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param string $message    The Error message\n\t * @param string $error_code Optional. A Computer readable string to identify the error.\n\t * @return false|void\n\t */\n\tpublic function bail( $message, $error_code = '500' ) {\n\t\tif ( !$this->show_errors ) {\n\t\t\tif ( class_exists( 'WP_Error', false ) ) {\n\t\t\t\t$this->error = new WP_Error($error_code, $message);\n\t\t\t} else {\n\t\t\t\t$this->error = $message;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\twp_die($message);\n\t}\n\n\n\t/**\n\t * Closes the current database connection.\n\t *\n\t * @since 4.5.0\n\t *\n\t * @return bool True if the connection was successfully closed, false if it wasn't,\n\t *              or the connection doesn't exist.\n\t */\n\tpublic function close() {\n\t\tif ( ! $this->dbh ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( $this->use_mysqli ) {\n\t\t\t$closed = mysqli_close( $this->dbh );\n\t\t} else {\n\t\t\t$closed = mysql_close( $this->dbh );\n\t\t}\n\n\t\tif ( $closed ) {\n\t\t\t$this->dbh = null;\n\t\t\t$this->ready = false;\n\t\t\t$this->has_connected = false;\n\t\t}\n\n\t\treturn $closed;\n\t}\n\n\t/**\n\t * Whether MySQL database is at least the required minimum version.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @global string $wp_version\n\t * @global string $required_mysql_version\n\t *\n\t * @return WP_Error|void\n\t */\n\tpublic function check_database_version() {\n\t\tglobal $wp_version, $required_mysql_version;\n\t\t// Make sure the server has the required MySQL version\n\t\tif ( version_compare($this->db_version(), $required_mysql_version, '<') ) {\n\t\t\t/* translators: 1: WordPress version number, 2: Minimum required MySQL version number */\n\t\t\treturn new WP_Error('database_version', sprintf( __( '<strong>ERROR</strong>: WordPress %1$s requires MySQL %2$s or higher' ), $wp_version, $required_mysql_version ));\n\t\t}\n\t}\n\n\t/**\n\t * Whether the database supports collation.\n\t *\n\t * Called when WordPress is generating the table scheme.\n\t *\n\t * Use `wpdb::has_cap( 'collation' )`.\n\t *\n\t * @since 2.5.0\n\t * @deprecated 3.5.0 Use wpdb::has_cap()\n\t *\n\t * @return bool True if collation is supported, false if version does not\n\t */\n\tpublic function supports_collation() {\n\t\t_deprecated_function( __FUNCTION__, '3.5.0', 'wpdb::has_cap( \\'collation\\' )' );\n\t\treturn $this->has_cap( 'collation' );\n\t}\n\n\t/**\n\t * The database character collate.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @return string The database character collate.\n\t */\n\tpublic function get_charset_collate() {\n\t\t$charset_collate = '';\n\n\t\tif ( ! empty( $this->charset ) )\n\t\t\t$charset_collate = \"DEFAULT CHARACTER SET $this->charset\";\n\t\tif ( ! empty( $this->collate ) )\n\t\t\t$charset_collate .= \" COLLATE $this->collate\";\n\n\t\treturn $charset_collate;\n\t}\n\n\t/**\n\t * Determine if a database supports a particular feature.\n\t *\n\t * @since 2.7.0\n\t * @since 4.1.0 Added support for the 'utf8mb4' feature.\n\t * @since 4.6.0 Added support for the 'utf8mb4_520' feature.\n\t *\n\t * @see wpdb::db_version()\n\t *\n\t * @param string $db_cap The feature to check for. Accepts 'collation',\n\t *                       'group_concat', 'subqueries', 'set_charset',\n\t *                       'utf8mb4', or 'utf8mb4_520'.\n\t * @return int|false Whether the database feature is supported, false otherwise.\n\t */\n\tpublic function has_cap( $db_cap ) {\n\t\t$version = $this->db_version();\n\n\t\tswitch ( strtolower( $db_cap ) ) {\n\t\t\tcase 'collation' :    // @since 2.5.0\n\t\t\tcase 'group_concat' : // @since 2.7.0\n\t\t\tcase 'subqueries' :   // @since 2.7.0\n\t\t\t\treturn version_compare( $version, '4.1', '>=' );\n\t\t\tcase 'set_charset' :\n\t\t\t\treturn version_compare( $version, '5.0.7', '>=' );\n\t\t\tcase 'utf8mb4' :      // @since 4.1.0\n\t\t\t\tif ( version_compare( $version, '5.5.3', '<' ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t\t$client_version = mysqli_get_client_info();\n\t\t\t\t} else {\n\t\t\t\t\t$client_version = mysql_get_client_info();\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * libmysql has supported utf8mb4 since 5.5.3, same as the MySQL server.\n\t\t\t\t * mysqlnd has supported utf8mb4 since 5.0.9.\n\t\t\t\t */\n\t\t\t\tif ( false !== strpos( $client_version, 'mysqlnd' ) ) {\n\t\t\t\t\t$client_version = preg_replace( '/^\\D+([\\d.]+).*/', '$1', $client_version );\n\t\t\t\t\treturn version_compare( $client_version, '5.0.9', '>=' );\n\t\t\t\t} else {\n\t\t\t\t\treturn version_compare( $client_version, '5.5.3', '>=' );\n\t\t\t\t}\n\t\t\tcase 'utf8mb4_520' : // @since 4.6.0\n\t\t\t\treturn version_compare( $version, '5.6', '>=' );\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Retrieve the name of the function that called wpdb.\n\t *\n\t * Searches up the list of functions until it reaches\n\t * the one that would most logically had called this method.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @return string|array The name of the calling function\n\t */\n\tpublic function get_caller() {\n\t\treturn wp_debug_backtrace_summary( __CLASS__ );\n\t}\n\n\t/**\n\t * Retrieves the MySQL server version.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @return null|string Null on failure, version number on success.\n\t */\n\tpublic function db_version() {\n\t\tif ( $this->use_mysqli ) {\n\t\t\t$server_info = mysqli_get_server_info( $this->dbh );\n\t\t} else {\n\t\t\t$server_info = mysql_get_server_info( $this->dbh );\n\t\t}\n\t\treturn preg_replace( '/[^0-9.].*/', '', $server_info );\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * Main WordPress Formatting API.\n *\n * Handles many functions for formatting output.\n *\n * @package WordPress\n */\n\n/**\n * Replaces common plain text characters into formatted entities\n *\n * As an example,\n *\n *     'cause today's effort makes it worth tomorrow's \"holiday\" ...\n *\n * Becomes:\n *\n *     &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221; &#8230;\n *\n * Code within certain html blocks are skipped.\n *\n * Do not use this function before the {@see 'init'} action hook; everything will break.\n *\n * @since 0.71\n *\n * @global array $wp_cockneyreplace Array of formatted entities for certain common phrases\n * @global array $shortcode_tags\n * @staticvar array  $static_characters\n * @staticvar array  $static_replacements\n * @staticvar array  $dynamic_characters\n * @staticvar array  $dynamic_replacements\n * @staticvar array  $default_no_texturize_tags\n * @staticvar array  $default_no_texturize_shortcodes\n * @staticvar bool   $run_texturize\n * @staticvar string $apos\n * @staticvar string $prime\n * @staticvar string $double_prime\n * @staticvar string $opening_quote\n * @staticvar string $closing_quote\n * @staticvar string $opening_single_quote\n * @staticvar string $closing_single_quote\n * @staticvar string $open_q_flag\n * @staticvar string $open_sq_flag\n * @staticvar string $apos_flag\n *\n * @param string $text The text to be formatted\n * @param bool   $reset Set to true for unit testing. Translated patterns will reset.\n * @return string The string replaced with html entities\n */\nfunction wptexturize( $text, $reset = false ) {\n\tglobal $wp_cockneyreplace, $shortcode_tags;\n\tstatic $static_characters = null,\n\t\t$static_replacements = null,\n\t\t$dynamic_characters = null,\n\t\t$dynamic_replacements = null,\n\t\t$default_no_texturize_tags = null,\n\t\t$default_no_texturize_shortcodes = null,\n\t\t$run_texturize = true,\n\t\t$apos = null,\n\t\t$prime = null,\n\t\t$double_prime = null,\n\t\t$opening_quote = null,\n\t\t$closing_quote = null,\n\t\t$opening_single_quote = null,\n\t\t$closing_single_quote = null,\n\t\t$open_q_flag = '<!--oq-->',\n\t\t$open_sq_flag = '<!--osq-->',\n\t\t$apos_flag = '<!--apos-->';\n\n\t// If there's nothing to do, just stop.\n\tif ( empty( $text ) || false === $run_texturize ) {\n\t\treturn $text;\n\t}\n\n\t// Set up static variables. Run once only.\n\tif ( $reset || ! isset( $static_characters ) ) {\n\t\t/**\n\t\t * Filters whether to skip running wptexturize().\n\t\t *\n\t\t * Passing false to the filter will effectively short-circuit wptexturize().\n\t\t * returning the original text passed to the function instead.\n\t\t *\n\t\t * The filter runs only once, the first time wptexturize() is called.\n\t\t *\n\t\t * @since 4.0.0\n\t\t *\n\t\t * @see wptexturize()\n\t\t *\n\t\t * @param bool $run_texturize Whether to short-circuit wptexturize().\n\t\t */\n\t\t$run_texturize = apply_filters( 'run_wptexturize', $run_texturize );\n\t\tif ( false === $run_texturize ) {\n\t\t\treturn $text;\n\t\t}\n\n\t\t/* translators: opening curly double quote */\n\t\t$opening_quote = _x( '&#8220;', 'opening curly double quote' );\n\t\t/* translators: closing curly double quote */\n\t\t$closing_quote = _x( '&#8221;', 'closing curly double quote' );\n\n\t\t/* translators: apostrophe, for example in 'cause or can't */\n\t\t$apos = _x( '&#8217;', 'apostrophe' );\n\n\t\t/* translators: prime, for example in 9' (nine feet) */\n\t\t$prime = _x( '&#8242;', 'prime' );\n\t\t/* translators: double prime, for example in 9\" (nine inches) */\n\t\t$double_prime = _x( '&#8243;', 'double prime' );\n\n\t\t/* translators: opening curly single quote */\n\t\t$opening_single_quote = _x( '&#8216;', 'opening curly single quote' );\n\t\t/* translators: closing curly single quote */\n\t\t$closing_single_quote = _x( '&#8217;', 'closing curly single quote' );\n\n\t\t/* translators: en dash */\n\t\t$en_dash = _x( '&#8211;', 'en dash' );\n\t\t/* translators: em dash */\n\t\t$em_dash = _x( '&#8212;', 'em dash' );\n\n\t\t$default_no_texturize_tags = array('pre', 'code', 'kbd', 'style', 'script', 'tt');\n\t\t$default_no_texturize_shortcodes = array('code');\n\n\t\t// if a plugin has provided an autocorrect array, use it\n\t\tif ( isset($wp_cockneyreplace) ) {\n\t\t\t$cockney = array_keys( $wp_cockneyreplace );\n\t\t\t$cockneyreplace = array_values( $wp_cockneyreplace );\n\t\t} else {\n\t\t\t/* translators: This is a comma-separated list of words that defy the syntax of quotations in normal use,\n\t\t\t * for example...  'We do not have enough words yet' ... is a typical quoted phrase.  But when we write\n\t\t\t * lines of code 'til we have enough of 'em, then we need to insert apostrophes instead of quotes.\n\t\t\t */\n\t\t\t$cockney = explode( ',', _x( \"'tain't,'twere,'twas,'tis,'twill,'til,'bout,'nuff,'round,'cause,'em\",\n\t\t\t\t'Comma-separated list of words to texturize in your language' ) );\n\n\t\t\t$cockneyreplace = explode( ',', _x( '&#8217;tain&#8217;t,&#8217;twere,&#8217;twas,&#8217;tis,&#8217;twill,&#8217;til,&#8217;bout,&#8217;nuff,&#8217;round,&#8217;cause,&#8217;em',\n\t\t\t\t'Comma-separated list of replacement words in your language' ) );\n\t\t}\n\n\t\t$static_characters = array_merge( array( '...', '``', '\\'\\'', ' (tm)' ), $cockney );\n\t\t$static_replacements = array_merge( array( '&#8230;', $opening_quote, $closing_quote, ' &#8482;' ), $cockneyreplace );\n\n\n\t\t// Pattern-based replacements of characters.\n\t\t// Sort the remaining patterns into several arrays for performance tuning.\n\t\t$dynamic_characters = array( 'apos' => array(), 'quote' => array(), 'dash' => array() );\n\t\t$dynamic_replacements = array( 'apos' => array(), 'quote' => array(), 'dash' => array() );\n\t\t$dynamic = array();\n\t\t$spaces = wp_spaces_regexp();\n\n\t\t// '99' and '99\" are ambiguous among other patterns; assume it's an abbreviated year at the end of a quotation.\n\t\tif ( \"'\" !== $apos || \"'\" !== $closing_single_quote ) {\n\t\t\t$dynamic[ '/\\'(\\d\\d)\\'(?=\\Z|[.,:;!?)}\\-\\]]|&gt;|' . $spaces . ')/' ] = $apos_flag . '$1' . $closing_single_quote;\n\t\t}\n\t\tif ( \"'\" !== $apos || '\"' !== $closing_quote ) {\n\t\t\t$dynamic[ '/\\'(\\d\\d)\"(?=\\Z|[.,:;!?)}\\-\\]]|&gt;|' . $spaces . ')/' ] = $apos_flag . '$1' . $closing_quote;\n\t\t}\n\n\t\t// '99 '99s '99's (apostrophe)  But never '9 or '99% or '999 or '99.0.\n\t\tif ( \"'\" !== $apos ) {\n\t\t\t$dynamic[ '/\\'(?=\\d\\d(?:\\Z|(?![%\\d]|[.,]\\d)))/' ] = $apos_flag;\n\t\t}\n\n\t\t// Quoted Numbers like '0.42'\n\t\tif ( \"'\" !== $opening_single_quote && \"'\" !== $closing_single_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|' . $spaces . ')\\'(\\d[.,\\d]*)\\'/' ] = $open_sq_flag . '$1' . $closing_single_quote;\n\t\t}\n\n\t\t// Single quote at start, or preceded by (, {, <, [, \", -, or spaces.\n\t\tif ( \"'\" !== $opening_single_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|[([{\"\\-]|&lt;|' . $spaces . ')\\'/' ] = $open_sq_flag;\n\t\t}\n\n\t\t// Apostrophe in a word.  No spaces, double apostrophes, or other punctuation.\n\t\tif ( \"'\" !== $apos ) {\n\t\t\t$dynamic[ '/(?<!' . $spaces . ')\\'(?!\\Z|[.,:;!?\"\\'(){}[\\]\\-]|&[lg]t;|' . $spaces . ')/' ] = $apos_flag;\n\t\t}\n\n\t\t$dynamic_characters['apos'] = array_keys( $dynamic );\n\t\t$dynamic_replacements['apos'] = array_values( $dynamic );\n\t\t$dynamic = array();\n\n\t\t// Quoted Numbers like \"42\"\n\t\tif ( '\"' !== $opening_quote && '\"' !== $closing_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|' . $spaces . ')\"(\\d[.,\\d]*)\"/' ] = $open_q_flag . '$1' . $closing_quote;\n\t\t}\n\n\t\t// Double quote at start, or preceded by (, {, <, [, -, or spaces, and not followed by spaces.\n\t\tif ( '\"' !== $opening_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|[([{\\-]|&lt;|' . $spaces . ')\"(?!' . $spaces . ')/' ] = $open_q_flag;\n\t\t}\n\n\t\t$dynamic_characters['quote'] = array_keys( $dynamic );\n\t\t$dynamic_replacements['quote'] = array_values( $dynamic );\n\t\t$dynamic = array();\n\n\t\t// Dashes and spaces\n\t\t$dynamic[ '/---/' ] = $em_dash;\n\t\t$dynamic[ '/(?<=^|' . $spaces . ')--(?=$|' . $spaces . ')/' ] = $em_dash;\n\t\t$dynamic[ '/(?<!xn)--/' ] = $en_dash;\n\t\t$dynamic[ '/(?<=^|' . $spaces . ')-(?=$|' . $spaces . ')/' ] = $en_dash;\n\n\t\t$dynamic_characters['dash'] = array_keys( $dynamic );\n\t\t$dynamic_replacements['dash'] = array_values( $dynamic );\n\t}\n\n\t// Must do this every time in case plugins use these filters in a context sensitive manner\n\t/**\n\t * Filters the list of HTML elements not to texturize.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array $default_no_texturize_tags An array of HTML element names.\n\t */\n\t$no_texturize_tags = apply_filters( 'no_texturize_tags', $default_no_texturize_tags );\n\t/**\n\t * Filters the list of shortcodes not to texturize.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array $default_no_texturize_shortcodes An array of shortcode names.\n\t */\n\t$no_texturize_shortcodes = apply_filters( 'no_texturize_shortcodes', $default_no_texturize_shortcodes );\n\n\t$no_texturize_tags_stack = array();\n\t$no_texturize_shortcodes_stack = array();\n\n\t// Look for shortcodes and HTML elements.\n\n\tpreg_match_all( '@\\[/?([^<>&/\\[\\]\\x00-\\x20=]++)@', $text, $matches );\n\t$tagnames = array_intersect( array_keys( $shortcode_tags ), $matches[1] );\n\t$found_shortcodes = ! empty( $tagnames );\n\t$shortcode_regex = $found_shortcodes ? _get_wptexturize_shortcode_regex( $tagnames ) : '';\n\t$regex = _get_wptexturize_split_regex( $shortcode_regex );\n\n\t$textarr = preg_split( $regex, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );\n\n\tforeach ( $textarr as &$curl ) {\n\t\t// Only call _wptexturize_pushpop_element if $curl is a delimiter.\n\t\t$first = $curl[0];\n\t\tif ( '<' === $first ) {\n\t\t\tif ( '<!--' === substr( $curl, 0, 4 ) ) {\n\t\t\t\t// This is an HTML comment delimiter.\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\t// This is an HTML element delimiter.\n\n\t\t\t\t// Replace each & with &#038; unless it already looks like an entity.\n\t\t\t\t$curl = preg_replace( '/&(?!#(?:\\d+|x[a-f0-9]+);|[a-z1-4]{1,8};)/i', '&#038;', $curl );\n\n\t\t\t\t_wptexturize_pushpop_element( $curl, $no_texturize_tags_stack, $no_texturize_tags );\n\t\t\t}\n\n\t\t} elseif ( '' === trim( $curl ) ) {\n\t\t\t// This is a newline between delimiters.  Performance improves when we check this.\n\t\t\tcontinue;\n\n\t\t} elseif ( '[' === $first && $found_shortcodes && 1 === preg_match( '/^' . $shortcode_regex . '$/', $curl ) ) {\n\t\t\t// This is a shortcode delimiter.\n\n\t\t\tif ( '[[' !== substr( $curl, 0, 2 ) && ']]' !== substr( $curl, -2 ) ) {\n\t\t\t\t// Looks like a normal shortcode.\n\t\t\t\t_wptexturize_pushpop_element( $curl, $no_texturize_shortcodes_stack, $no_texturize_shortcodes );\n\t\t\t} else {\n\t\t\t\t// Looks like an escaped shortcode.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t} elseif ( empty( $no_texturize_shortcodes_stack ) && empty( $no_texturize_tags_stack ) ) {\n\t\t\t// This is neither a delimiter, nor is this content inside of no_texturize pairs.  Do texturize.\n\n\t\t\t$curl = str_replace( $static_characters, $static_replacements, $curl );\n\n\t\t\tif ( false !== strpos( $curl, \"'\" ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['apos'], $dynamic_replacements['apos'], $curl );\n\t\t\t\t$curl = wptexturize_primes( $curl, \"'\", $prime, $open_sq_flag, $closing_single_quote );\n\t\t\t\t$curl = str_replace( $apos_flag, $apos, $curl );\n\t\t\t\t$curl = str_replace( $open_sq_flag, $opening_single_quote, $curl );\n\t\t\t}\n\t\t\tif ( false !== strpos( $curl, '\"' ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['quote'], $dynamic_replacements['quote'], $curl );\n\t\t\t\t$curl = wptexturize_primes( $curl, '\"', $double_prime, $open_q_flag, $closing_quote );\n\t\t\t\t$curl = str_replace( $open_q_flag, $opening_quote, $curl );\n\t\t\t}\n\t\t\tif ( false !== strpos( $curl, '-' ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['dash'], $dynamic_replacements['dash'], $curl );\n\t\t\t}\n\n\t\t\t// 9x9 (times), but never 0x9999\n\t\t\tif ( 1 === preg_match( '/(?<=\\d)x\\d/', $curl ) ) {\n\t\t\t\t// Searching for a digit is 10 times more expensive than for the x, so we avoid doing this one!\n\t\t\t\t$curl = preg_replace( '/\\b(\\d(?(?<=0)[\\d\\.,]+|[\\d\\.,]*))x(\\d[\\d\\.,]*)\\b/', '$1&#215;$2', $curl );\n\t\t\t}\n\n\t\t\t// Replace each & with &#038; unless it already looks like an entity.\n\t\t\t$curl = preg_replace( '/&(?!#(?:\\d+|x[a-f0-9]+);|[a-z1-4]{1,8};)/i', '&#038;', $curl );\n\t\t}\n\t}\n\n\treturn implode( '', $textarr );\n}\n\n/**\n * Implements a logic tree to determine whether or not \"7'.\" represents seven feet,\n * then converts the special char into either a prime char or a closing quote char.\n *\n * @since 4.3.0\n *\n * @param string $haystack    The plain text to be searched.\n * @param string $needle      The character to search for such as ' or \".\n * @param string $prime       The prime char to use for replacement.\n * @param string $open_quote  The opening quote char. Opening quote replacement must be\n *                            accomplished already.\n * @param string $close_quote The closing quote char to use for replacement.\n * @return string The $haystack value after primes and quotes replacements.\n */\nfunction wptexturize_primes( $haystack, $needle, $prime, $open_quote, $close_quote ) {\n\t$spaces = wp_spaces_regexp();\n\t$flag = '<!--wp-prime-or-quote-->';\n\t$quote_pattern = \"/$needle(?=\\\\Z|[.,:;!?)}\\\\-\\\\]]|&gt;|\" . $spaces . \")/\";\n\t$prime_pattern    = \"/(?<=\\\\d)$needle/\";\n\t$flag_after_digit = \"/(?<=\\\\d)$flag/\";\n\t$flag_no_digit    = \"/(?<!\\\\d)$flag/\";\n\n\t$sentences = explode( $open_quote, $haystack );\n\n\tforeach ( $sentences as $key => &$sentence ) {\n\t\tif ( false === strpos( $sentence, $needle ) ) {\n\t\t\tcontinue;\n\t\t} elseif ( 0 !== $key && 0 === substr_count( $sentence, $close_quote ) ) {\n\t\t\t$sentence = preg_replace( $quote_pattern, $flag, $sentence, -1, $count );\n\t\t\tif ( $count > 1 ) {\n\t\t\t\t// This sentence appears to have multiple closing quotes.  Attempt Vulcan logic.\n\t\t\t\t$sentence = preg_replace( $flag_no_digit, $close_quote, $sentence, -1, $count2 );\n\t\t\t\tif ( 0 === $count2 ) {\n\t\t\t\t\t// Try looking for a quote followed by a period.\n\t\t\t\t\t$count2 = substr_count( $sentence, \"$flag.\" );\n\t\t\t\t\tif ( $count2 > 0 ) {\n\t\t\t\t\t\t// Assume the rightmost quote-period match is the end of quotation.\n\t\t\t\t\t\t$pos = strrpos( $sentence, \"$flag.\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// When all else fails, make the rightmost candidate a closing quote.\n\t\t\t\t\t\t// This is most likely to be problematic in the context of bug #18549.\n\t\t\t\t\t\t$pos = strrpos( $sentence, $flag );\n\t\t\t\t\t}\n\t\t\t\t\t$sentence = substr_replace( $sentence, $close_quote, $pos, strlen( $flag ) );\n\t\t\t\t}\n\t\t\t\t// Use conventional replacement on any remaining primes and quotes.\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t\t$sentence = preg_replace( $flag_after_digit, $prime, $sentence );\n\t\t\t\t$sentence = str_replace( $flag, $close_quote, $sentence );\n\t\t\t} elseif ( 1 == $count ) {\n\t\t\t\t// Found only one closing quote candidate, so give it priority over primes.\n\t\t\t\t$sentence = str_replace( $flag, $close_quote, $sentence );\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t} else {\n\t\t\t\t// No closing quotes found.  Just run primes pattern.\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t}\n\t\t} else {\n\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t$sentence = preg_replace( $quote_pattern, $close_quote, $sentence );\n\t\t}\n\t\tif ( '\"' == $needle && false !== strpos( $sentence, '\"' ) ) {\n\t\t\t$sentence = str_replace( '\"', $close_quote, $sentence );\n\t\t}\n\t}\n\n\treturn implode( $open_quote, $sentences );\n}\n\n/**\n * Search for disabled element tags. Push element to stack on tag open and pop\n * on tag close.\n *\n * Assumes first char of $text is tag opening and last char is tag closing.\n * Assumes second char of $text is optionally '/' to indicate closing as in </html>.\n *\n * @since 2.9.0\n * @access private\n *\n * @param string $text Text to check. Must be a tag like `<html>` or `[shortcode]`.\n * @param array  $stack List of open tag elements.\n * @param array  $disabled_elements The tag names to match against. Spaces are not allowed in tag names.\n */\nfunction _wptexturize_pushpop_element( $text, &$stack, $disabled_elements ) {\n\t// Is it an opening tag or closing tag?\n\tif ( isset( $text[1] ) && '/' !== $text[1] ) {\n\t\t$opening_tag = true;\n\t\t$name_offset = 1;\n\t} elseif ( 0 == count( $stack ) ) {\n\t\t// Stack is empty. Just stop.\n\t\treturn;\n\t} else {\n\t\t$opening_tag = false;\n\t\t$name_offset = 2;\n\t}\n\n\t// Parse out the tag name.\n\t$space = strpos( $text, ' ' );\n\tif ( false === $space ) {\n\t\t$space = -1;\n\t} else {\n\t\t$space -= $name_offset;\n\t}\n\t$tag = substr( $text, $name_offset, $space );\n\n\t// Handle disabled tags.\n\tif ( in_array( $tag, $disabled_elements ) ) {\n\t\tif ( $opening_tag ) {\n\t\t\t/*\n\t\t\t * This disables texturize until we find a closing tag of our type\n\t\t\t * (e.g. <pre>) even if there was invalid nesting before that\n\t\t\t *\n\t\t\t * Example: in the case <pre>sadsadasd</code>\"baba\"</pre>\n\t\t\t *          \"baba\" won't be texturize\n\t\t\t */\n\n\t\t\tarray_push( $stack, $tag );\n\t\t} elseif ( end( $stack ) == $tag ) {\n\t\t\tarray_pop( $stack );\n\t\t}\n\t}\n}\n\n/**\n * Replaces double line-breaks with paragraph elements.\n *\n * A group of regex replaces used to identify text formatted with newlines and\n * replace double line-breaks with HTML paragraph tags. The remaining line-breaks\n * after conversion become <<br />> tags, unless $br is set to '0' or 'false'.\n *\n * @since 0.71\n *\n * @param string $pee The text which has to be formatted.\n * @param bool   $br  Optional. If set, this will convert all remaining line-breaks\n *                    after paragraphing. Default true.\n * @return string Text which has been converted into correct paragraph tags.\n */\nfunction wpautop( $pee, $br = true ) {\n\t$pre_tags = array();\n\n\tif ( trim($pee) === '' )\n\t\treturn '';\n\n\t// Just to make things a little easier, pad the end.\n\t$pee = $pee . \"\\n\";\n\n\t/*\n\t * Pre tags shouldn't be touched by autop.\n\t * Replace pre tags with placeholders and bring them back after autop.\n\t */\n\tif ( strpos($pee, '<pre') !== false ) {\n\t\t$pee_parts = explode( '</pre>', $pee );\n\t\t$last_pee = array_pop($pee_parts);\n\t\t$pee = '';\n\t\t$i = 0;\n\n\t\tforeach ( $pee_parts as $pee_part ) {\n\t\t\t$start = strpos($pee_part, '<pre');\n\n\t\t\t// Malformed html?\n\t\t\tif ( $start === false ) {\n\t\t\t\t$pee .= $pee_part;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$name = \"<pre wp-pre-tag-$i></pre>\";\n\t\t\t$pre_tags[$name] = substr( $pee_part, $start ) . '</pre>';\n\n\t\t\t$pee .= substr( $pee_part, 0, $start ) . $name;\n\t\t\t$i++;\n\t\t}\n\n\t\t$pee .= $last_pee;\n\t}\n\t// Change multiple <br>s into two line breaks, which will turn into paragraphs.\n\t$pee = preg_replace('|<br\\s*/?>\\s*<br\\s*/?>|', \"\\n\\n\", $pee);\n\n\t$allblocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';\n\n\t// Add a double line break above block-level opening tags.\n\t$pee = preg_replace('!(<' . $allblocks . '[\\s/>])!', \"\\n\\n$1\", $pee);\n\n\t// Add a double line break below block-level closing tags.\n\t$pee = preg_replace('!(</' . $allblocks . '>)!', \"$1\\n\\n\", $pee);\n\n\t// Standardize newline characters to \"\\n\".\n\t$pee = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $pee);\n\n\t// Find newlines in all elements and add placeholders.\n\t$pee = wp_replace_in_html_tags( $pee, array( \"\\n\" => \" <!-- wpnl --> \" ) );\n\n\t// Collapse line breaks before and after <option> elements so they don't get autop'd.\n\tif ( strpos( $pee, '<option' ) !== false ) {\n\t\t$pee = preg_replace( '|\\s*<option|', '<option', $pee );\n\t\t$pee = preg_replace( '|</option>\\s*|', '</option>', $pee );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <object> elements, before <param> and <embed> elements\n\t * so they don't get autop'd.\n\t */\n\tif ( strpos( $pee, '</object>' ) !== false ) {\n\t\t$pee = preg_replace( '|(<object[^>]*>)\\s*|', '$1', $pee );\n\t\t$pee = preg_replace( '|\\s*</object>|', '</object>', $pee );\n\t\t$pee = preg_replace( '%\\s*(</?(?:param|embed)[^>]*>)\\s*%', '$1', $pee );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <audio> and <video> elements,\n\t * before and after <source> and <track> elements.\n\t */\n\tif ( strpos( $pee, '<source' ) !== false || strpos( $pee, '<track' ) !== false ) {\n\t\t$pee = preg_replace( '%([<\\[](?:audio|video)[^>\\]]*[>\\]])\\s*%', '$1', $pee );\n\t\t$pee = preg_replace( '%\\s*([<\\[]/(?:audio|video)[>\\]])%', '$1', $pee );\n\t\t$pee = preg_replace( '%\\s*(<(?:source|track)[^>]*>)\\s*%', '$1', $pee );\n\t}\n\n\t// Collapse line breaks before and after <figcaption> elements.\n\tif ( strpos( $pee, '<figcaption' ) !== false ) {\n\t\t$pee = preg_replace( '|\\s*(<figcaption[^>]*>)|', '$1', $pee );\n\t\t$pee = preg_replace( '|</figcaption>\\s*|', '</figcaption>', $pee );\n\t}\n\n\t// Remove more than two contiguous line breaks.\n\t$pee = preg_replace(\"/\\n\\n+/\", \"\\n\\n\", $pee);\n\n\t// Split up the contents into an array of strings, separated by double line breaks.\n\t$pees = preg_split('/\\n\\s*\\n/', $pee, -1, PREG_SPLIT_NO_EMPTY);\n\n\t// Reset $pee prior to rebuilding.\n\t$pee = '';\n\n\t// Rebuild the content as a string, wrapping every bit with a <p>.\n\tforeach ( $pees as $tinkle ) {\n\t\t$pee .= '<p>' . trim($tinkle, \"\\n\") . \"</p>\\n\";\n\t}\n\n\t// Under certain strange conditions it could create a P of entirely whitespace.\n\t$pee = preg_replace('|<p>\\s*</p>|', '', $pee);\n\n\t// Add a closing <p> inside <div>, <address>, or <form> tag if missing.\n\t$pee = preg_replace('!<p>([^<]+)</(div|address|form)>!', \"<p>$1</p></$2>\", $pee);\n\n\t// If an opening or closing block element tag is wrapped in a <p>, unwrap it.\n\t$pee = preg_replace('!<p>\\s*(</?' . $allblocks . '[^>]*>)\\s*</p>!', \"$1\", $pee);\n\n\t// In some cases <li> may get wrapped in <p>, fix them.\n\t$pee = preg_replace(\"|<p>(<li.+?)</p>|\", \"$1\", $pee);\n\n\t// If a <blockquote> is wrapped with a <p>, move it inside the <blockquote>.\n\t$pee = preg_replace('|<p><blockquote([^>]*)>|i', \"<blockquote$1><p>\", $pee);\n\t$pee = str_replace('</blockquote></p>', '</p></blockquote>', $pee);\n\n\t// If an opening or closing block element tag is preceded by an opening <p> tag, remove it.\n\t$pee = preg_replace('!<p>\\s*(</?' . $allblocks . '[^>]*>)!', \"$1\", $pee);\n\n\t// If an opening or closing block element tag is followed by a closing <p> tag, remove it.\n\t$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\\s*</p>!', \"$1\", $pee);\n\n\t// Optionally insert line breaks.\n\tif ( $br ) {\n\t\t// Replace newlines that shouldn't be touched with a placeholder.\n\t\t$pee = preg_replace_callback('/<(script|style).*?<\\/\\\\1>/s', '_autop_newline_preservation_helper', $pee);\n\n\t\t// Normalize <br>\n\t\t$pee = str_replace( array( '<br>', '<br/>' ), '<br />', $pee );\n\n\t\t// Replace any new line characters that aren't preceded by a <br /> with a <br />.\n\t\t$pee = preg_replace('|(?<!<br />)\\s*\\n|', \"<br />\\n\", $pee);\n\n\t\t// Replace newline placeholders with newlines.\n\t\t$pee = str_replace('<WPPreserveNewline />', \"\\n\", $pee);\n\t}\n\n\t// If a <br /> tag is after an opening or closing block tag, remove it.\n\t$pee = preg_replace('!(</?' . $allblocks . '[^>]*>)\\s*<br />!', \"$1\", $pee);\n\n\t// If a <br /> tag is before a subset of opening or closing block tags, remove it.\n\t$pee = preg_replace('!<br />(\\s*</?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)!', '$1', $pee);\n\t$pee = preg_replace( \"|\\n</p>$|\", '</p>', $pee );\n\n\t// Replace placeholder <pre> tags with their original content.\n\tif ( !empty($pre_tags) )\n\t\t$pee = str_replace(array_keys($pre_tags), array_values($pre_tags), $pee);\n\n\t// Restore newlines in all elements.\n\tif ( false !== strpos( $pee, '<!-- wpnl -->' ) ) {\n\t\t$pee = str_replace( array( ' <!-- wpnl --> ', '<!-- wpnl -->' ), \"\\n\", $pee );\n\t}\n\n\treturn $pee;\n}\n\n/**\n * Separate HTML elements and comments from the text.\n *\n * @since 4.2.4\n *\n * @param string $input The text which has to be formatted.\n * @return array The formatted text.\n */\nfunction wp_html_split( $input ) {\n\treturn preg_split( get_html_split_regex(), $input, -1, PREG_SPLIT_DELIM_CAPTURE );\n}\n\n/**\n * Retrieve the regular expression for an HTML element.\n *\n * @since 4.4.0\n *\n * @staticvar string $regex\n *\n * @return string The regular expression\n */\nfunction get_html_split_regex() {\n\tstatic $regex;\n\n\tif ( ! isset( $regex ) ) {\n\t\t$comments =\n\t\t\t  '!'           // Start of comment, after the <.\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until --> is found.\n\t\t\t.     '-(?!->)' // Dash not followed by end of comment.\n\t\t\t.     '[^\\-]*+' // Consume non-dashes.\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:-->)?';   // End of comment. If not found, match all input.\n\n\t\t$cdata =\n\t\t\t  '!\\[CDATA\\['  // Start of comment, after the <.\n\t\t\t. '[^\\]]*+'     // Consume non-].\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until ]]> is found.\n\t\t\t.     '](?!]>)' // One ] not followed by end of comment.\n\t\t\t.     '[^\\]]*+' // Consume non-].\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:]]>)?';   // End of comment. If not found, match all input.\n\n\t\t$escaped =\n\t\t\t  '(?='           // Is the element escaped?\n\t\t\t.    '!--'\n\t\t\t. '|'\n\t\t\t.    '!\\[CDATA\\['\n\t\t\t. ')'\n\t\t\t. '(?(?=!-)'      // If yes, which type?\n\t\t\t.     $comments\n\t\t\t. '|'\n\t\t\t.     $cdata\n\t\t\t. ')';\n\n\t\t$regex =\n\t\t\t  '/('              // Capture the entire match.\n\t\t\t.     '<'           // Find start of element.\n\t\t\t.     '(?'          // Conditional expression follows.\n\t\t\t.         $escaped  // Find end of escaped element.\n\t\t\t.     '|'           // ... else ...\n\t\t\t.         '[^>]*>?' // Find end of normal element.\n\t\t\t.     ')'\n\t\t\t. ')/';\n\t}\n\n\treturn $regex;\n}\n\n/**\n * Retrieve the combined regular expression for HTML and shortcodes.\n *\n * @access private\n * @ignore\n * @internal This function will be removed in 4.5.0 per Shortcode API Roadmap.\n * @since 4.4.0\n *\n * @staticvar string $html_regex\n *\n * @param string $shortcode_regex The result from _get_wptexturize_shortcode_regex().  Optional.\n * @return string The regular expression\n */\nfunction _get_wptexturize_split_regex( $shortcode_regex = '' ) {\n\tstatic $html_regex;\n\n\tif ( ! isset( $html_regex ) ) {\n\t\t$comment_regex =\n\t\t\t  '!'           // Start of comment, after the <.\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until --> is found.\n\t\t\t.     '-(?!->)' // Dash not followed by end of comment.\n\t\t\t.     '[^\\-]*+' // Consume non-dashes.\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:-->)?';   // End of comment. If not found, match all input.\n\n\t\t$html_regex =\t\t\t // Needs replaced with wp_html_split() per Shortcode API Roadmap.\n\t\t\t  '<'                // Find start of element.\n\t\t\t. '(?(?=!--)'        // Is this a comment?\n\t\t\t.     $comment_regex // Find end of comment.\n\t\t\t. '|'\n\t\t\t.     '[^>]*>?'      // Find end of element. If not found, match all input.\n\t\t\t. ')';\n\t}\n\n\tif ( empty( $shortcode_regex ) ) {\n\t\t$regex = '/(' . $html_regex . ')/';\n\t} else {\n\t\t$regex = '/(' . $html_regex . '|' . $shortcode_regex . ')/';\n\t}\n\n\treturn $regex;\n}\n\n/**\n * Retrieve the regular expression for shortcodes.\n *\n * @access private\n * @ignore\n * @internal This function will be removed in 4.5.0 per Shortcode API Roadmap.\n * @since 4.4.0\n *\n * @param array $tagnames List of shortcodes to find.\n * @return string The regular expression\n */\nfunction _get_wptexturize_shortcode_regex( $tagnames ) {\n\t$tagregexp = join( '|', array_map( 'preg_quote', $tagnames ) );\n\t$tagregexp = \"(?:$tagregexp)(?=[\\\\s\\\\]\\\\/])\"; // Excerpt of get_shortcode_regex().\n\t$regex =\n\t\t  '\\['              // Find start of shortcode.\n\t\t. '[\\/\\[]?'         // Shortcodes may begin with [/ or [[\n\t\t. $tagregexp        // Only match registered shortcodes, because performance.\n\t\t. '(?:'\n\t\t.     '[^\\[\\]<>]+'  // Shortcodes do not contain other shortcodes. Quantifier critical.\n\t\t. '|'\n\t\t.     '<[^\\[\\]>]*>' // HTML elements permitted. Prevents matching ] before >.\n\t\t. ')*+'             // Possessive critical.\n\t\t. '\\]'              // Find end of shortcode.\n\t\t. '\\]?';            // Shortcodes may end with ]]\n\n\treturn $regex;\n}\n\n/**\n * Replace characters or phrases within HTML elements only.\n *\n * @since 4.2.3\n *\n * @param string $haystack The text which has to be formatted.\n * @param array $replace_pairs In the form array('from' => 'to', ...).\n * @return string The formatted text.\n */\nfunction wp_replace_in_html_tags( $haystack, $replace_pairs ) {\n\t// Find all elements.\n\t$textarr = wp_html_split( $haystack );\n\t$changed = false;\n\n\t// Optimize when searching for one item.\n\tif ( 1 === count( $replace_pairs ) ) {\n\t\t// Extract $needle and $replace.\n\t\tforeach ( $replace_pairs as $needle => $replace );\n\n\t\t// Loop through delimiters (elements) only.\n\t\tfor ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {\n\t\t\tif ( false !== strpos( $textarr[$i], $needle ) ) {\n\t\t\t\t$textarr[$i] = str_replace( $needle, $replace, $textarr[$i] );\n\t\t\t\t$changed = true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Extract all $needles.\n\t\t$needles = array_keys( $replace_pairs );\n\n\t\t// Loop through delimiters (elements) only.\n\t\tfor ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {\n\t\t\tforeach ( $needles as $needle ) {\n\t\t\t\tif ( false !== strpos( $textarr[$i], $needle ) ) {\n\t\t\t\t\t$textarr[$i] = strtr( $textarr[$i], $replace_pairs );\n\t\t\t\t\t$changed = true;\n\t\t\t\t\t// After one strtr() break out of the foreach loop and look at next element.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( $changed ) {\n\t\t$haystack = implode( $textarr );\n\t}\n\n\treturn $haystack;\n}\n\n/**\n * Newline preservation help function for wpautop\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $matches preg_replace_callback matches array\n * @return string\n */\nfunction _autop_newline_preservation_helper( $matches ) {\n\treturn str_replace( \"\\n\", \"<WPPreserveNewline />\", $matches[0] );\n}\n\n/**\n * Don't auto-p wrap shortcodes that stand alone\n *\n * Ensures that shortcodes are not wrapped in `<p>...</p>`.\n *\n * @since 2.9.0\n *\n * @global array $shortcode_tags\n *\n * @param string $pee The content.\n * @return string The filtered content.\n */\nfunction shortcode_unautop( $pee ) {\n\tglobal $shortcode_tags;\n\n\tif ( empty( $shortcode_tags ) || !is_array( $shortcode_tags ) ) {\n\t\treturn $pee;\n\t}\n\n\t$tagregexp = join( '|', array_map( 'preg_quote', array_keys( $shortcode_tags ) ) );\n\t$spaces = wp_spaces_regexp();\n\n\t$pattern =\n\t\t  '/'\n\t\t. '<p>'                              // Opening paragraph\n\t\t. '(?:' . $spaces . ')*+'            // Optional leading whitespace\n\t\t. '('                                // 1: The shortcode\n\t\t.     '\\\\['                          // Opening bracket\n\t\t.     \"($tagregexp)\"                 // 2: Shortcode name\n\t\t.     '(?![\\\\w-])'                   // Not followed by word character or hyphen\n\t\t                                     // Unroll the loop: Inside the opening shortcode tag\n\t\t.     '[^\\\\]\\\\/]*'                   // Not a closing bracket or forward slash\n\t\t.     '(?:'\n\t\t.         '\\\\/(?!\\\\])'               // A forward slash not followed by a closing bracket\n\t\t.         '[^\\\\]\\\\/]*'               // Not a closing bracket or forward slash\n\t\t.     ')*?'\n\t\t.     '(?:'\n\t\t.         '\\\\/\\\\]'                   // Self closing tag and closing bracket\n\t\t.     '|'\n\t\t.         '\\\\]'                      // Closing bracket\n\t\t.         '(?:'                      // Unroll the loop: Optionally, anything between the opening and closing shortcode tags\n\t\t.             '[^\\\\[]*+'             // Not an opening bracket\n\t\t.             '(?:'\n\t\t.                 '\\\\[(?!\\\\/\\\\2\\\\])' // An opening bracket not followed by the closing shortcode tag\n\t\t.                 '[^\\\\[]*+'         // Not an opening bracket\n\t\t.             ')*+'\n\t\t.             '\\\\[\\\\/\\\\2\\\\]'         // Closing shortcode tag\n\t\t.         ')?'\n\t\t.     ')'\n\t\t. ')'\n\t\t. '(?:' . $spaces . ')*+'            // optional trailing whitespace\n\t\t. '<\\\\/p>'                           // closing paragraph\n\t\t. '/';\n\n\treturn preg_replace( $pattern, '$1', $pee );\n}\n\n/**\n * Checks to see if a string is utf8 encoded.\n *\n * NOTE: This function checks for 5-Byte sequences, UTF8\n *       has Bytes Sequences with a maximum length of 4.\n *\n * @author bmorel at ssi dot fr (modified)\n * @since 1.2.1\n *\n * @param string $str The string to be checked\n * @return bool True if $str fits a UTF-8 model, false otherwise.\n */\nfunction seems_utf8( $str ) {\n\tmbstring_binary_safe_encoding();\n\t$length = strlen($str);\n\treset_mbstring_encoding();\n\tfor ($i=0; $i < $length; $i++) {\n\t\t$c = ord($str[$i]);\n\t\tif ($c < 0x80) $n = 0; // 0bbbbbbb\n\t\telseif (($c & 0xE0) == 0xC0) $n=1; // 110bbbbb\n\t\telseif (($c & 0xF0) == 0xE0) $n=2; // 1110bbbb\n\t\telseif (($c & 0xF8) == 0xF0) $n=3; // 11110bbb\n\t\telseif (($c & 0xFC) == 0xF8) $n=4; // 111110bb\n\t\telseif (($c & 0xFE) == 0xFC) $n=5; // 1111110b\n\t\telse return false; // Does not match any model\n\t\tfor ($j=0; $j<$n; $j++) { // n bytes matching 10bbbbbb follow ?\n\t\t\tif ((++$i == $length) || ((ord($str[$i]) & 0xC0) != 0x80))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Converts a number of special characters into their HTML entities.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to encode \" to\n * &quot;, or ENT_QUOTES to do both. Default is ENT_NOQUOTES where no quotes are encoded.\n *\n * @since 1.2.2\n * @access private\n *\n * @staticvar string $_charset\n *\n * @param string     $string         The text which is to be encoded.\n * @param int|string $quote_style    Optional. Converts double quotes if set to ENT_COMPAT,\n *                                   both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES.\n *                                   Also compatible with old values; converting single quotes if set to 'single',\n *                                   double if set to 'double' or both if otherwise set.\n *                                   Default is ENT_NOQUOTES.\n * @param string     $charset        Optional. The character encoding of the string. Default is false.\n * @param bool       $double_encode  Optional. Whether to encode existing html entities. Default is false.\n * @return string The encoded text with HTML entities.\n */\nfunction _wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) )\n\t\treturn '';\n\n\t// Don't bother if there are no specialchars - saves some processing\n\tif ( ! preg_match( '/[&<>\"\\']/', $string ) )\n\t\treturn $string;\n\n\t// Account for the previous behaviour of the function when the $quote_style is not an accepted value\n\tif ( empty( $quote_style ) )\n\t\t$quote_style = ENT_NOQUOTES;\n\telseif ( ! in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) )\n\t\t$quote_style = ENT_QUOTES;\n\n\t// Store the site charset as a static to avoid multiple calls to wp_load_alloptions()\n\tif ( ! $charset ) {\n\t\tstatic $_charset = null;\n\t\tif ( ! isset( $_charset ) ) {\n\t\t\t$alloptions = wp_load_alloptions();\n\t\t\t$_charset = isset( $alloptions['blog_charset'] ) ? $alloptions['blog_charset'] : '';\n\t\t}\n\t\t$charset = $_charset;\n\t}\n\n\tif ( in_array( $charset, array( 'utf8', 'utf-8', 'UTF8' ) ) )\n\t\t$charset = 'UTF-8';\n\n\t$_quote_style = $quote_style;\n\n\tif ( $quote_style === 'double' ) {\n\t\t$quote_style = ENT_COMPAT;\n\t\t$_quote_style = ENT_COMPAT;\n\t} elseif ( $quote_style === 'single' ) {\n\t\t$quote_style = ENT_NOQUOTES;\n\t}\n\n\tif ( ! $double_encode ) {\n\t\t// Guarantee every &entity; is valid, convert &garbage; into &amp;garbage;\n\t\t// This is required for PHP < 5.4.0 because ENT_HTML401 flag is unavailable.\n\t\t$string = wp_kses_normalize_entities( $string );\n\t}\n\n\t$string = @htmlspecialchars( $string, $quote_style, $charset, $double_encode );\n\n\t// Back-compat.\n\tif ( 'single' === $_quote_style )\n\t\t$string = str_replace( \"'\", '&#039;', $string );\n\n\treturn $string;\n}\n\n/**\n * Converts a number of HTML entities into their special characters.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to decode \" entities,\n * or ENT_QUOTES to do both \" and '. Default is ENT_NOQUOTES where no quotes are decoded.\n *\n * @since 2.8.0\n *\n * @param string     $string The text which is to be decoded.\n * @param string|int $quote_style Optional. Converts double quotes if set to ENT_COMPAT,\n *                                both single and double if set to ENT_QUOTES or\n *                                none if set to ENT_NOQUOTES.\n *                                Also compatible with old _wp_specialchars() values;\n *                                converting single quotes if set to 'single',\n *                                double if set to 'double' or both if otherwise set.\n *                                Default is ENT_NOQUOTES.\n * @return string The decoded text without HTML entities.\n */\nfunction wp_specialchars_decode( $string, $quote_style = ENT_NOQUOTES ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) ) {\n\t\treturn '';\n\t}\n\n\t// Don't bother if there are no entities - saves a lot of processing\n\tif ( strpos( $string, '&' ) === false ) {\n\t\treturn $string;\n\t}\n\n\t// Match the previous behaviour of _wp_specialchars() when the $quote_style is not an accepted value\n\tif ( empty( $quote_style ) ) {\n\t\t$quote_style = ENT_NOQUOTES;\n\t} elseif ( !in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {\n\t\t$quote_style = ENT_QUOTES;\n\t}\n\n\t// More complete than get_html_translation_table( HTML_SPECIALCHARS )\n\t$single = array( '&#039;'  => '\\'', '&#x27;' => '\\'' );\n\t$single_preg = array( '/&#0*39;/'  => '&#039;', '/&#x0*27;/i' => '&#x27;' );\n\t$double = array( '&quot;' => '\"', '&#034;'  => '\"', '&#x22;' => '\"' );\n\t$double_preg = array( '/&#0*34;/'  => '&#034;', '/&#x0*22;/i' => '&#x22;' );\n\t$others = array( '&lt;'   => '<', '&#060;'  => '<', '&gt;'   => '>', '&#062;'  => '>', '&amp;'  => '&', '&#038;'  => '&', '&#x26;' => '&' );\n\t$others_preg = array( '/&#0*60;/'  => '&#060;', '/&#0*62;/'  => '&#062;', '/&#0*38;/'  => '&#038;', '/&#x0*26;/i' => '&#x26;' );\n\n\tif ( $quote_style === ENT_QUOTES ) {\n\t\t$translation = array_merge( $single, $double, $others );\n\t\t$translation_preg = array_merge( $single_preg, $double_preg, $others_preg );\n\t} elseif ( $quote_style === ENT_COMPAT || $quote_style === 'double' ) {\n\t\t$translation = array_merge( $double, $others );\n\t\t$translation_preg = array_merge( $double_preg, $others_preg );\n\t} elseif ( $quote_style === 'single' ) {\n\t\t$translation = array_merge( $single, $others );\n\t\t$translation_preg = array_merge( $single_preg, $others_preg );\n\t} elseif ( $quote_style === ENT_NOQUOTES ) {\n\t\t$translation = $others;\n\t\t$translation_preg = $others_preg;\n\t}\n\n\t// Remove zero padding on numeric entities\n\t$string = preg_replace( array_keys( $translation_preg ), array_values( $translation_preg ), $string );\n\n\t// Replace characters according to translation table\n\treturn strtr( $string, $translation );\n}\n\n/**\n * Checks for invalid UTF8 in a string.\n *\n * @since 2.8.0\n *\n * @staticvar bool $is_utf8\n * @staticvar bool $utf8_pcre\n *\n * @param string  $string The text which is to be checked.\n * @param bool    $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false.\n * @return string The checked text.\n */\nfunction wp_check_invalid_utf8( $string, $strip = false ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) ) {\n\t\treturn '';\n\t}\n\n\t// Store the site charset as a static to avoid multiple calls to get_option()\n\tstatic $is_utf8 = null;\n\tif ( ! isset( $is_utf8 ) ) {\n\t\t$is_utf8 = in_array( get_option( 'blog_charset' ), array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) );\n\t}\n\tif ( ! $is_utf8 ) {\n\t\treturn $string;\n\t}\n\n\t// Check for support for utf8 in the installed PCRE library once and store the result in a static\n\tstatic $utf8_pcre = null;\n\tif ( ! isset( $utf8_pcre ) ) {\n\t\t$utf8_pcre = @preg_match( '/^./u', 'a' );\n\t}\n\t// We can't demand utf8 in the PCRE installation, so just return the string in those cases\n\tif ( !$utf8_pcre ) {\n\t\treturn $string;\n\t}\n\n\t// preg_match fails when it encounters invalid UTF8 in $string\n\tif ( 1 === @preg_match( '/^./us', $string ) ) {\n\t\treturn $string;\n\t}\n\n\t// Attempt to strip the bad chars if requested (not recommended)\n\tif ( $strip && function_exists( 'iconv' ) ) {\n\t\treturn iconv( 'utf-8', 'utf-8', $string );\n\t}\n\n\treturn '';\n}\n\n/**\n * Encode the Unicode values to be used in the URI.\n *\n * @since 1.5.0\n *\n * @param string $utf8_string\n * @param int    $length Max  length of the string\n * @return string String with Unicode encoded for URI.\n */\nfunction utf8_uri_encode( $utf8_string, $length = 0 ) {\n\t$unicode = '';\n\t$values = array();\n\t$num_octets = 1;\n\t$unicode_length = 0;\n\n\tmbstring_binary_safe_encoding();\n\t$string_length = strlen( $utf8_string );\n\treset_mbstring_encoding();\n\n\tfor ($i = 0; $i < $string_length; $i++ ) {\n\n\t\t$value = ord( $utf8_string[ $i ] );\n\n\t\tif ( $value < 128 ) {\n\t\t\tif ( $length && ( $unicode_length >= $length ) )\n\t\t\t\tbreak;\n\t\t\t$unicode .= chr($value);\n\t\t\t$unicode_length++;\n\t\t} else {\n\t\t\tif ( count( $values ) == 0 ) {\n\t\t\t\tif ( $value < 224 ) {\n\t\t\t\t\t$num_octets = 2;\n\t\t\t\t} elseif ( $value < 240 ) {\n\t\t\t\t\t$num_octets = 3;\n\t\t\t\t} else {\n\t\t\t\t\t$num_octets = 4;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$values[] = $value;\n\n\t\t\tif ( $length && ( $unicode_length + ($num_octets * 3) ) > $length )\n\t\t\t\tbreak;\n\t\t\tif ( count( $values ) == $num_octets ) {\n\t\t\t\tfor ( $j = 0; $j < $num_octets; $j++ ) {\n\t\t\t\t\t$unicode .= '%' . dechex( $values[ $j ] );\n\t\t\t\t}\n\n\t\t\t\t$unicode_length += $num_octets * 3;\n\n\t\t\t\t$values = array();\n\t\t\t\t$num_octets = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $unicode;\n}\n\n/**\n * Converts all accent characters to ASCII characters.\n *\n * If there are no accent characters, then the string given is just returned.\n *\n * **Accent characters converted:**\n *\n * Currency signs:\n *\n * |   Code   | Glyph | Replacement |     Description     |\n * | -------- | ----- | ----------- | ------------------- |\n * | U+00A3   | \u00a3     | (empty)     | British Pound sign  |\n * | U+20AC   | \u20ac     | E           | Euro sign           |\n *\n * Decompositions for Latin-1 Supplement:\n *\n * |  Code   | Glyph | Replacement |               Description              |\n * | ------- | ----- | ----------- | -------------------------------------- |\n * | U+00AA  | \u00aa     | a           | Feminine ordinal indicator             |\n * | U+00BA  | \u00ba     | o           | Masculine ordinal indicator            |\n * | U+00C0  | \u00c0     | A           | Latin capital letter A with grave      |\n * | U+00C1  | \u00c1     | A           | Latin capital letter A with acute      |\n * | U+00C2  | \u00c2     | A           | Latin capital letter A with circumflex |\n * | U+00C3  | \u00c3     | A           | Latin capital letter A with tilde      |\n * | U+00C4  | \u00c4     | A           | Latin capital letter A with diaeresis  |\n * | U+00C5  | \u00c5     | A           | Latin capital letter A with ring above |\n * | U+00C6  | \u00c6     | AE          | Latin capital letter AE                |\n * | U+00C7  | \u00c7     | C           | Latin capital letter C with cedilla    |\n * | U+00C8  | \u00c8     | E           | Latin capital letter E with grave      |\n * | U+00C9  | \u00c9     | E           | Latin capital letter E with acute      |\n * | U+00CA  | \u00ca     | E           | Latin capital letter E with circumflex |\n * | U+00CB  | \u00cb     | E           | Latin capital letter E with diaeresis  |\n * | U+00CC  | \u00cc     | I           | Latin capital letter I with grave      |\n * | U+00CD  | \u00cd     | I           | Latin capital letter I with acute      |\n * | U+00CE  | \u00ce     | I           | Latin capital letter I with circumflex |\n * | U+00CF  | \u00cf     | I           | Latin capital letter I with diaeresis  |\n * | U+00D0  | \u00d0     | D           | Latin capital letter Eth               |\n * | U+00D1  | \u00d1     | N           | Latin capital letter N with tilde      |\n * | U+00D2  | \u00d2     | O           | Latin capital letter O with grave      |\n * | U+00D3  | \u00d3     | O           | Latin capital letter O with acute      |\n * | U+00D4  | \u00d4     | O           | Latin capital letter O with circumflex |\n * | U+00D5  | \u00d5     | O           | Latin capital letter O with tilde      |\n * | U+00D6  | \u00d6     | O           | Latin capital letter O with diaeresis  |\n * | U+00D8  | \u00d8     | O           | Latin capital letter O with stroke     |\n * | U+00D9  | \u00d9     | U           | Latin capital letter U with grave      |\n * | U+00DA  | \u00da     | U           | Latin capital letter U with acute      |\n * | U+00DB  | \u00db     | U           | Latin capital letter U with circumflex |\n * | U+00DC  | \u00dc     | U           | Latin capital letter U with diaeresis  |\n * | U+00DD  | \u00dd     | Y           | Latin capital letter Y with acute      |\n * | U+00DE  | \u00de     | TH          | Latin capital letter Thorn             |\n * | U+00DF  | \u00df     | s           | Latin small letter sharp s             |\n * | U+00E0  | \u00e0     | a           | Latin small letter a with grave        |\n * | U+00E1  | \u00e1     | a           | Latin small letter a with acute        |\n * | U+00E2  | \u00e2     | a           | Latin small letter a with circumflex   |\n * | U+00E3  | \u00e3     | a           | Latin small letter a with tilde        |\n * | U+00E4  | \u00e4     | a           | Latin small letter a with diaeresis    |\n * | U+00E5  | \u00e5     | a           | Latin small letter a with ring above   |\n * | U+00E6  | \u00e6     | ae          | Latin small letter ae                  |\n * | U+00E7  | \u00e7     | c           | Latin small letter c with cedilla      |\n * | U+00E8  | \u00e8     | e           | Latin small letter e with grave        |\n * | U+00E9  | \u00e9     | e           | Latin small letter e with acute        |\n * | U+00EA  | \u00ea     | e           | Latin small letter e with circumflex   |\n * | U+00EB  | \u00eb     | e           | Latin small letter e with diaeresis    |\n * | U+00EC  | \u00ec     | i           | Latin small letter i with grave        |\n * | U+00ED  | \u00ed     | i           | Latin small letter i with acute        |\n * | U+00EE  | \u00ee     | i           | Latin small letter i with circumflex   |\n * | U+00EF  | \u00ef     | i           | Latin small letter i with diaeresis    |\n * | U+00F0  | \u00f0     | d           | Latin small letter Eth                 |\n * | U+00F1  | \u00f1     | n           | Latin small letter n with tilde        |\n * | U+00F2  | \u00f2     | o           | Latin small letter o with grave        |\n * | U+00F3  | \u00f3     | o           | Latin small letter o with acute        |\n * | U+00F4  | \u00f4     | o           | Latin small letter o with circumflex   |\n * | U+00F5  | \u00f5     | o           | Latin small letter o with tilde        |\n * | U+00F6  | \u00f6     | o           | Latin small letter o with diaeresis    |\n * | U+00F8  | \u00f8     | o           | Latin small letter o with stroke       |\n * | U+00F9  | \u00f9     | u           | Latin small letter u with grave        |\n * | U+00FA  | \u00fa     | u           | Latin small letter u with acute        |\n * | U+00FB  | \u00fb     | u           | Latin small letter u with circumflex   |\n * | U+00FC  | \u00fc     | u           | Latin small letter u with diaeresis    |\n * | U+00FD  | \u00fd     | y           | Latin small letter y with acute        |\n * | U+00FE  | \u00fe     | th          | Latin small letter Thorn               |\n * | U+00FF  | \u00ff     | y           | Latin small letter y with diaeresis    |\n *\n * Decompositions for Latin Extended-A:\n *\n * |  Code   | Glyph | Replacement |                    Description                    |\n * | ------- | ----- | ----------- | ------------------------------------------------- |\n * | U+0100  | \u0100     | A           | Latin capital letter A with macron                |\n * | U+0101  | \u0101     | a           | Latin small letter a with macron                  |\n * | U+0102  | \u0102     | A           | Latin capital letter A with breve                 |\n * | U+0103  | \u0103     | a           | Latin small letter a with breve                   |\n * | U+0104  | \u0104     | A           | Latin capital letter A with ogonek                |\n * | U+0105  | \u0105     | a           | Latin small letter a with ogonek                  |\n * | U+01006 | \u0106     | C           | Latin capital letter C with acute                 |\n * | U+0107  | \u0107     | c           | Latin small letter c with acute                   |\n * | U+0108  | \u0108     | C           | Latin capital letter C with circumflex            |\n * | U+0109  | \u0109     | c           | Latin small letter c with circumflex              |\n * | U+010A  | \u010a     | C           | Latin capital letter C with dot above             |\n * | U+010B  | \u010b     | c           | Latin small letter c with dot above               |\n * | U+010C  | \u010c     | C           | Latin capital letter C with caron                 |\n * | U+010D  | \u010d     | c           | Latin small letter c with caron                   |\n * | U+010E  | \u010e     | D           | Latin capital letter D with caron                 |\n * | U+010F  | \u010f     | d           | Latin small letter d with caron                   |\n * | U+0110  | \u0110     | D           | Latin capital letter D with stroke                |\n * | U+0111  | \u0111     | d           | Latin small letter d with stroke                  |\n * | U+0112  | \u0112     | E           | Latin capital letter E with macron                |\n * | U+0113  | \u0113     | e           | Latin small letter e with macron                  |\n * | U+0114  | \u0114     | E           | Latin capital letter E with breve                 |\n * | U+0115  | \u0115     | e           | Latin small letter e with breve                   |\n * | U+0116  | \u0116     | E           | Latin capital letter E with dot above             |\n * | U+0117  | \u0117     | e           | Latin small letter e with dot above               |\n * | U+0118  | \u0118     | E           | Latin capital letter E with ogonek                |\n * | U+0119  | \u0119     | e           | Latin small letter e with ogonek                  |\n * | U+011A  | \u011a     | E           | Latin capital letter E with caron                 |\n * | U+011B  | \u011b     | e           | Latin small letter e with caron                   |\n * | U+011C  | \u011c     | G           | Latin capital letter G with circumflex            |\n * | U+011D  | \u011d     | g           | Latin small letter g with circumflex              |\n * | U+011E  | \u011e     | G           | Latin capital letter G with breve                 |\n * | U+011F  | \u011f     | g           | Latin small letter g with breve                   |\n * | U+0120  | \u0120     | G           | Latin capital letter G with dot above             |\n * | U+0121  | \u0121     | g           | Latin small letter g with dot above               |\n * | U+0122  | \u0122     | G           | Latin capital letter G with cedilla               |\n * | U+0123  | \u0123     | g           | Latin small letter g with cedilla                 |\n * | U+0124  | \u0124     | H           | Latin capital letter H with circumflex            |\n * | U+0125  | \u0125     | h           | Latin small letter h with circumflex              |\n * | U+0126  | \u0126     | H           | Latin capital letter H with stroke                |\n * | U+0127  | \u0127     | h           | Latin small letter h with stroke                  |\n * | U+0128  | \u0128     | I           | Latin capital letter I with tilde                 |\n * | U+0129  | \u0129     | i           | Latin small letter i with tilde                   |\n * | U+012A  | \u012a     | I           | Latin capital letter I with macron                |\n * | U+012B  | \u012b     | i           | Latin small letter i with macron                  |\n * | U+012C  | \u012c     | I           | Latin capital letter I with breve                 |\n * | U+012D  | \u012d     | i           | Latin small letter i with breve                   |\n * | U+012E  | \u012e     | I           | Latin capital letter I with ogonek                |\n * | U+012F  | \u012f     | i           | Latin small letter i with ogonek                  |\n * | U+0130  | \u0130     | I           | Latin capital letter I with dot above             |\n * | U+0131  | \u0131     | i           | Latin small letter dotless i                      |\n * | U+0132  | \u0132     | IJ          | Latin capital ligature IJ                         |\n * | U+0133  | \u0133     | ij          | Latin small ligature ij                           |\n * | U+0134  | \u0134     | J           | Latin capital letter J with circumflex            |\n * | U+0135  | \u0135     | j           | Latin small letter j with circumflex              |\n * | U+0136  | \u0136     | K           | Latin capital letter K with cedilla               |\n * | U+0137  | \u0137     | k           | Latin small letter k with cedilla                 |\n * | U+0138  | \u0138     | k           | Latin small letter Kra                            |\n * | U+0139  | \u0139     | L           | Latin capital letter L with acute                 |\n * | U+013A  | \u013a     | l           | Latin small letter l with acute                   |\n * | U+013B  | \u013b     | L           | Latin capital letter L with cedilla               |\n * | U+013C  | \u013c     | l           | Latin small letter l with cedilla                 |\n * | U+013D  | \u013d     | L           | Latin capital letter L with caron                 |\n * | U+013E  | \u013e     | l           | Latin small letter l with caron                   |\n * | U+013F  | \u013f     | L           | Latin capital letter L with middle dot            |\n * | U+0140  | \u0140     | l           | Latin small letter l with middle dot              |\n * | U+0141  | \u0141     | L           | Latin capital letter L with stroke                |\n * | U+0142  | \u0142     | l           | Latin small letter l with stroke                  |\n * | U+0143  | \u0143     | N           | Latin capital letter N with acute                 |\n * | U+0144  | \u0144     | n           | Latin small letter N with acute                   |\n * | U+0145  | \u0145     | N           | Latin capital letter N with cedilla               |\n * | U+0146  | \u0146     | n           | Latin small letter n with cedilla                 |\n * | U+0147  | \u0147     | N           | Latin capital letter N with caron                 |\n * | U+0148  | \u0148     | n           | Latin small letter n with caron                   |\n * | U+0149  | \u0149     | n           | Latin small letter n preceded by apostrophe       |\n * | U+014A  | \u014a     | N           | Latin capital letter Eng                          |\n * | U+014B  | \u014b     | n           | Latin small letter Eng                            |\n * | U+014C  | \u014c     | O           | Latin capital letter O with macron                |\n * | U+014D  | \u014d     | o           | Latin small letter o with macron                  |\n * | U+014E  | \u014e     | O           | Latin capital letter O with breve                 |\n * | U+014F  | \u014f     | o           | Latin small letter o with breve                   |\n * | U+0150  | \u0150     | O           | Latin capital letter O with double acute          |\n * | U+0151  | \u0151     | o           | Latin small letter o with double acute            |\n * | U+0152  | \u0152     | OE          | Latin capital ligature OE                         |\n * | U+0153  | \u0153     | oe          | Latin small ligature oe                           |\n * | U+0154  | \u0154     | R           | Latin capital letter R with acute                 |\n * | U+0155  | \u0155     | r           | Latin small letter r with acute                   |\n * | U+0156  | \u0156     | R           | Latin capital letter R with cedilla               |\n * | U+0157  | \u0157     | r           | Latin small letter r with cedilla                 |\n * | U+0158  | \u0158     | R           | Latin capital letter R with caron                 |\n * | U+0159  | \u0159     | r           | Latin small letter r with caron                   |\n * | U+015A  | \u015a     | S           | Latin capital letter S with acute                 |\n * | U+015B  | \u015b     | s           | Latin small letter s with acute                   |\n * | U+015C  | \u015c     | S           | Latin capital letter S with circumflex            |\n * | U+015D  | \u015d     | s           | Latin small letter s with circumflex              |\n * | U+015E  | \u015e     | S           | Latin capital letter S with cedilla               |\n * | U+015F  | \u015f     | s           | Latin small letter s with cedilla                 |\n * | U+0160  | \u0160     | S           | Latin capital letter S with caron                 |\n * | U+0161  | \u0161     | s           | Latin small letter s with caron                   |\n * | U+0162  | \u0162     | T           | Latin capital letter T with cedilla               |\n * | U+0163  | \u0163     | t           | Latin small letter t with cedilla                 |\n * | U+0164  | \u0164     | T           | Latin capital letter T with caron                 |\n * | U+0165  | \u0165     | t           | Latin small letter t with caron                   |\n * | U+0166  | \u0166     | T           | Latin capital letter T with stroke                |\n * | U+0167  | \u0167     | t           | Latin small letter t with stroke                  |\n * | U+0168  | \u0168     | U           | Latin capital letter U with tilde                 |\n * | U+0169  | \u0169     | u           | Latin small letter u with tilde                   |\n * | U+016A  | \u016a     | U           | Latin capital letter U with macron                |\n * | U+016B  | \u016b     | u           | Latin small letter u with macron                  |\n * | U+016C  | \u016c     | U           | Latin capital letter U with breve                 |\n * | U+016D  | \u016d     | u           | Latin small letter u with breve                   |\n * | U+016E  | \u016e     | U           | Latin capital letter U with ring above            |\n * | U+016F  | \u016f     | u           | Latin small letter u with ring above              |\n * | U+0170  | \u0170     | U           | Latin capital letter U with double acute          |\n * | U+0171  | \u0171     | u           | Latin small letter u with double acute            |\n * | U+0172  | \u0172     | U           | Latin capital letter U with ogonek                |\n * | U+0173  | \u0173     | u           | Latin small letter u with ogonek                  |\n * | U+0174  | \u0174     | W           | Latin capital letter W with circumflex            |\n * | U+0175  | \u0175     | w           | Latin small letter w with circumflex              |\n * | U+0176  | \u0176     | Y           | Latin capital letter Y with circumflex            |\n * | U+0177  | \u0177     | y           | Latin small letter y with circumflex              |\n * | U+0178  | \u0178     | Y           | Latin capital letter Y with diaeresis             |\n * | U+0179  | \u0179     | Z           | Latin capital letter Z with acute                 |\n * | U+017A  | \u017a     | z           | Latin small letter z with acute                   |\n * | U+017B  | \u017b     | Z           | Latin capital letter Z with dot above             |\n * | U+017C  | \u017c     | z           | Latin small letter z with dot above               |\n * | U+017D  | \u017d     | Z           | Latin capital letter Z with caron                 |\n * | U+017E  | \u017e     | z           | Latin small letter z with caron                   |\n * | U+017F  | \u017f     | s           | Latin small letter long s                         |\n * | U+01A0  | \u01a0     | O           | Latin capital letter O with horn                  |\n * | U+01A1  | \u01a1     | o           | Latin small letter o with horn                    |\n * | U+01AF  | \u01af     | U           | Latin capital letter U with horn                  |\n * | U+01B0  | \u01b0     | u           | Latin small letter u with horn                    |\n * | U+01CD  | \u01cd     | A           | Latin capital letter A with caron                 |\n * | U+01CE  | \u01ce     | a           | Latin small letter a with caron                   |\n * | U+01CF  | \u01cf     | I           | Latin capital letter I with caron                 |\n * | U+01D0  | \u01d0     | i           | Latin small letter i with caron                   |\n * | U+01D1  | \u01d1     | O           | Latin capital letter O with caron                 |\n * | U+01D2  | \u01d2     | o           | Latin small letter o with caron                   |\n * | U+01D3  | \u01d3     | U           | Latin capital letter U with caron                 |\n * | U+01D4  | \u01d4     | u           | Latin small letter u with caron                   |\n * | U+01D5  | \u01d5     | U           | Latin capital letter U with diaeresis and macron  |\n * | U+01D6  | \u01d6     | u           | Latin small letter u with diaeresis and macron    |\n * | U+01D7  | \u01d7     | U           | Latin capital letter U with diaeresis and acute   |\n * | U+01D8  | \u01d8     | u           | Latin small letter u with diaeresis and acute     |\n * | U+01D9  | \u01d9     | U           | Latin capital letter U with diaeresis and caron   |\n * | U+01DA  | \u01da     | u           | Latin small letter u with diaeresis and caron     |\n * | U+01DB  | \u01db     | U           | Latin capital letter U with diaeresis and grave   |\n * | U+01DC  | \u01dc     | u           | Latin small letter u with diaeresis and grave     |\n *\n * Decompositions for Latin Extended-B:\n *\n * |   Code   | Glyph | Replacement |                Description                |\n * | -------- | ----- | ----------- | ----------------------------------------- |\n * | U+0218   | \u0218     | S           | Latin capital letter S with comma below   |\n * | U+0219   | \u0219     | s           | Latin small letter s with comma below     |\n * | U+021A   | \u021a     | T           | Latin capital letter T with comma below   |\n * | U+021B   | \u021b     | t           | Latin small letter t with comma below     |\n *\n * Vowels with diacritic (Chinese, Hanyu Pinyin):\n *\n * |   Code   | Glyph | Replacement |                      Description                      |\n * | -------- | ----- | ----------- | ----------------------------------------------------- |\n * | U+0251   | \u0251     | a           | Latin small letter alpha                              |\n * | U+1EA0   | \u1ea0     | A           | Latin capital letter A with dot below                 |\n * | U+1EA1   | \u1ea1     | a           | Latin small letter a with dot below                   |\n * | U+1EA2   | \u1ea2     | A           | Latin capital letter A with hook above                |\n * | U+1EA3   | \u1ea3     | a           | Latin small letter a with hook above                  |\n * | U+1EA4   | \u1ea4     | A           | Latin capital letter A with circumflex and acute      |\n * | U+1EA5   | \u1ea5     | a           | Latin small letter a with circumflex and acute        |\n * | U+1EA6   | \u1ea6     | A           | Latin capital letter A with circumflex and grave      |\n * | U+1EA7   | \u1ea7     | a           | Latin small letter a with circumflex and grave        |\n * | U+1EA8   | \u1ea8     | A           | Latin capital letter A with circumflex and hook above |\n * | U+1EA9   | \u1ea9     | a           | Latin small letter a with circumflex and hook above   |\n * | U+1EAA   | \u1eaa     | A           | Latin capital letter A with circumflex and tilde      |\n * | U+1EAB   | \u1eab     | a           | Latin small letter a with circumflex and tilde        |\n * | U+1EA6   | \u1eac     | A           | Latin capital letter A with circumflex and dot below  |\n * | U+1EAD   | \u1ead     | a           | Latin small letter a with circumflex and dot below    |\n * | U+1EAE   | \u1eae     | A           | Latin capital letter A with breve and acute           |\n * | U+1EAF   | \u1eaf     | a           | Latin small letter a with breve and acute             |\n * | U+1EB0   | \u1eb0     | A           | Latin capital letter A with breve and grave           |\n * | U+1EB1   | \u1eb1     | a           | Latin small letter a with breve and grave             |\n * | U+1EB2   | \u1eb2     | A           | Latin capital letter A with breve and hook above      |\n * | U+1EB3   | \u1eb3     | a           | Latin small letter a with breve and hook above        |\n * | U+1EB4   | \u1eb4     | A           | Latin capital letter A with breve and tilde           |\n * | U+1EB5   | \u1eb5     | a           | Latin small letter a with breve and tilde             |\n * | U+1EB6   | \u1eb6     | A           | Latin capital letter A with breve and dot below       |\n * | U+1EB7   | \u1eb7     | a           | Latin small letter a with breve and dot below         |\n * | U+1EB8   | \u1eb8     | E           | Latin capital letter E with dot below                 |\n * | U+1EB9   | \u1eb9     | e           | Latin small letter e with dot below                   |\n * | U+1EBA   | \u1eba     | E           | Latin capital letter E with hook above                |\n * | U+1EBB   | \u1ebb     | e           | Latin small letter e with hook above                  |\n * | U+1EBC   | \u1ebc     | E           | Latin capital letter E with tilde                     |\n * | U+1EBD   | \u1ebd     | e           | Latin small letter e with tilde                       |\n * | U+1EBE   | \u1ebe     | E           | Latin capital letter E with circumflex and acute      |\n * | U+1EBF   | \u1ebf     | e           | Latin small letter e with circumflex and acute        |\n * | U+1EC0   | \u1ec0     | E           | Latin capital letter E with circumflex and grave      |\n * | U+1EC1   | \u1ec1     | e           | Latin small letter e with circumflex and grave        |\n * | U+1EC2   | \u1ec2     | E           | Latin capital letter E with circumflex and hook above |\n * | U+1EC3   | \u1ec3     | e           | Latin small letter e with circumflex and hook above   |\n * | U+1EC4   | \u1ec4     | E           | Latin capital letter E with circumflex and tilde      |\n * | U+1EC5   | \u1ec5     | e           | Latin small letter e with circumflex and tilde        |\n * | U+1EC6   | \u1ec6     | E           | Latin capital letter E with circumflex and dot below  |\n * | U+1EC7   | \u1ec7     | e           | Latin small letter e with circumflex and dot below    |\n * | U+1EC8   | \u1ec8     | I           | Latin capital letter I with hook above                |\n * | U+1EC9   | \u1ec9     | i           | Latin small letter i with hook above                  |\n * | U+1ECA   | \u1eca     | I           | Latin capital letter I with dot below                 |\n * | U+1ECB   | \u1ecb     | i           | Latin small letter i with dot below                   |\n * | U+1ECC   | \u1ecc     | O           | Latin capital letter O with dot below                 |\n * | U+1ECD   | \u1ecd     | o           | Latin small letter o with dot below                   |\n * | U+1ECE   | \u1ece     | O           | Latin capital letter O with hook above                |\n * | U+1ECF   | \u1ecf     | o           | Latin small letter o with hook above                  |\n * | U+1ED0   | \u1ed0     | O           | Latin capital letter O with circumflex and acute      |\n * | U+1ED1   | \u1ed1     | o           | Latin small letter o with circumflex and acute        |\n * | U+1ED2   | \u1ed2     | O           | Latin capital letter O with circumflex and grave      |\n * | U+1ED3   | \u1ed3     | o           | Latin small letter o with circumflex and grave        |\n * | U+1ED4   | \u1ed4     | O           | Latin capital letter O with circumflex and hook above |\n * | U+1ED5   | \u1ed5     | o           | Latin small letter o with circumflex and hook above   |\n * | U+1ED6   | \u1ed6     | O           | Latin capital letter O with circumflex and tilde      |\n * | U+1ED7   | \u1ed7     | o           | Latin small letter o with circumflex and tilde        |\n * | U+1ED8   | \u1ed8     | O           | Latin capital letter O with circumflex and dot below  |\n * | U+1ED9   | \u1ed9     | o           | Latin small letter o with circumflex and dot below    |\n * | U+1EDA   | \u1eda     | O           | Latin capital letter O with horn and acute            |\n * | U+1EDB   | \u1edb     | o           | Latin small letter o with horn and acute              |\n * | U+1EDC   | \u1edc     | O           | Latin capital letter O with horn and grave            |\n * | U+1EDD   | \u1edd     | o           | Latin small letter o with horn and grave              |\n * | U+1EDE   | \u1ede     | O           | Latin capital letter O with horn and hook above       |\n * | U+1EDF   | \u1edf     | o           | Latin small letter o with horn and hook above         |\n * | U+1EE0   | \u1ee0     | O           | Latin capital letter O with horn and tilde            |\n * | U+1EE1   | \u1ee1     | o           | Latin small letter o with horn and tilde              |\n * | U+1EE2   | \u1ee2     | O           | Latin capital letter O with horn and dot below        |\n * | U+1EE3   | \u1ee3     | o           | Latin small letter o with horn and dot below          |\n * | U+1EE4   | \u1ee4     | U           | Latin capital letter U with dot below                 |\n * | U+1EE5   | \u1ee5     | u           | Latin small letter u with dot below                   |\n * | U+1EE6   | \u1ee6     | U           | Latin capital letter U with hook above                |\n * | U+1EE7   | \u1ee7     | u           | Latin small letter u with hook above                  |\n * | U+1EE8   | \u1ee8     | U           | Latin capital letter U with horn and acute            |\n * | U+1EE9   | \u1ee9     | u           | Latin small letter u with horn and acute              |\n * | U+1EEA   | \u1eea     | U           | Latin capital letter U with horn and grave            |\n * | U+1EEB   | \u1eeb     | u           | Latin small letter u with horn and grave              |\n * | U+1EEC   | \u1eec     | U           | Latin capital letter U with horn and hook above       |\n * | U+1EED   | \u1eed     | u           | Latin small letter u with horn and hook above         |\n * | U+1EEE   | \u1eee     | U           | Latin capital letter U with horn and tilde            |\n * | U+1EEF   | \u1eef     | u           | Latin small letter u with horn and tilde              |\n * | U+1EF0   | \u1ef0     | U           | Latin capital letter U with horn and dot below        |\n * | U+1EF1   | \u1ef1     | u           | Latin small letter u with horn and dot below          |\n * | U+1EF2   | \u1ef2     | Y           | Latin capital letter Y with grave                     |\n * | U+1EF3   | \u1ef3     | y           | Latin small letter y with grave                       |\n * | U+1EF4   | \u1ef4     | Y           | Latin capital letter Y with dot below                 |\n * | U+1EF5   | \u1ef5     | y           | Latin small letter y with dot below                   |\n * | U+1EF6   | \u1ef6     | Y           | Latin capital letter Y with hook above                |\n * | U+1EF7   | \u1ef7     | y           | Latin small letter y with hook above                  |\n * | U+1EF8   | \u1ef8     | Y           | Latin capital letter Y with tilde                     |\n * | U+1EF9   | \u1ef9     | y           | Latin small letter y with tilde                       |\n *\n * German (`de_DE`), German formal (`de_DE_formal`), German (Switzerland) formal (`de_CH`),\n * and German (Switzerland) informal (`de_CH_informal`) locales:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00C4   | \u00c4     | Ae          | Latin capital letter A with diaeresis   |\n * | U+00E4   | \u00e4     | ae          | Latin small letter a with diaeresis     |\n * | U+00D6   | \u00d6     | Oe          | Latin capital letter O with diaeresis   |\n * | U+00F6   | \u00f6     | oe          | Latin small letter o with diaeresis     |\n * | U+00DC   | \u00dc     | Ue          | Latin capital letter U with diaeresis   |\n * | U+00FC   | \u00fc     | ue          | Latin small letter u with diaeresis     |\n * | U+00DF   | \u00df     | ss          | Latin small letter sharp s              |\n *\n * Danish (`da_DK`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00C6   | \u00c6     | Ae          | Latin capital letter AE                 |\n * | U+00E6   | \u00e6     | ae          | Latin small letter ae                   |\n * | U+00D8   | \u00d8     | Oe          | Latin capital letter O with stroke      |\n * | U+00F8   | \u00f8     | oe          | Latin small letter o with stroke        |\n * | U+00C5   | \u00c5     | Aa          | Latin capital letter A with ring above  |\n * | U+00E5   | \u00e5     | aa          | Latin small letter a with ring above    |\n *\n * Catalan (`ca`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00B7   | l\u00b7l   | ll          | Flown dot (between two Ls)              |\n *\n * Serbian (`sr_RS`) and Bosnian (`bs_BA`) locales:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+0110   | \u0110     | DJ          | Latin capital letter D with stroke      |\n * | U+0111   | \u0111     | dj          | Latin small letter d with stroke        |\n *\n * @since 1.2.1\n * @since 4.6.0 Added locale support for `de_CH`, `de_CH_informal`, and `ca`.\n * @since 4.7.0 Added locale support for `sr_RS`.\n * @since 4.8.0 Added locale support for `bs_BA`.\n *\n * @param string $string Text that might have accent characters\n * @return string Filtered string with replaced \"nice\" characters.\n */\nfunction remove_accents( $string ) {\n\tif ( !preg_match('/[\\x80-\\xff]/', $string) )\n\t\treturn $string;\n\n\tif (seems_utf8($string)) {\n\t\t$chars = array(\n\t\t// Decompositions for Latin-1 Supplement\n\t\t'\u00aa' => 'a', '\u00ba' => 'o',\n\t\t'\u00c0' => 'A', '\u00c1' => 'A',\n\t\t'\u00c2' => 'A', '\u00c3' => 'A',\n\t\t'\u00c4' => 'A', '\u00c5' => 'A',\n\t\t'\u00c6' => 'AE','\u00c7' => 'C',\n\t\t'\u00c8' => 'E', '\u00c9' => 'E',\n\t\t'\u00ca' => 'E', '\u00cb' => 'E',\n\t\t'\u00cc' => 'I', '\u00cd' => 'I',\n\t\t'\u00ce' => 'I', '\u00cf' => 'I',\n\t\t'\u00d0' => 'D', '\u00d1' => 'N',\n\t\t'\u00d2' => 'O', '\u00d3' => 'O',\n\t\t'\u00d4' => 'O', '\u00d5' => 'O',\n\t\t'\u00d6' => 'O', '\u00d9' => 'U',\n\t\t'\u00da' => 'U', '\u00db' => 'U',\n\t\t'\u00dc' => 'U', '\u00dd' => 'Y',\n\t\t'\u00de' => 'TH','\u00df' => 's',\n\t\t'\u00e0' => 'a', '\u00e1' => 'a',\n\t\t'\u00e2' => 'a', '\u00e3' => 'a',\n\t\t'\u00e4' => 'a', '\u00e5' => 'a',\n\t\t'\u00e6' => 'ae','\u00e7' => 'c',\n\t\t'\u00e8' => 'e', '\u00e9' => 'e',\n\t\t'\u00ea' => 'e', '\u00eb' => 'e',\n\t\t'\u00ec' => 'i', '\u00ed' => 'i',\n\t\t'\u00ee' => 'i', '\u00ef' => 'i',\n\t\t'\u00f0' => 'd', '\u00f1' => 'n',\n\t\t'\u00f2' => 'o', '\u00f3' => 'o',\n\t\t'\u00f4' => 'o', '\u00f5' => 'o',\n\t\t'\u00f6' => 'o', '\u00f8' => 'o',\n\t\t'\u00f9' => 'u', '\u00fa' => 'u',\n\t\t'\u00fb' => 'u', '\u00fc' => 'u',\n\t\t'\u00fd' => 'y', '\u00fe' => 'th',\n\t\t'\u00ff' => 'y', '\u00d8' => 'O',\n\t\t// Decompositions for Latin Extended-A\n\t\t'\u0100' => 'A', '\u0101' => 'a',\n\t\t'\u0102' => 'A', '\u0103' => 'a',\n\t\t'\u0104' => 'A', '\u0105' => 'a',\n\t\t'\u0106' => 'C', '\u0107' => 'c',\n\t\t'\u0108' => 'C', '\u0109' => 'c',\n\t\t'\u010a' => 'C', '\u010b' => 'c',\n\t\t'\u010c' => 'C', '\u010d' => 'c',\n\t\t'\u010e' => 'D', '\u010f' => 'd',\n\t\t'\u0110' => 'D', '\u0111' => 'd',\n\t\t'\u0112' => 'E', '\u0113' => 'e',\n\t\t'\u0114' => 'E', '\u0115' => 'e',\n\t\t'\u0116' => 'E', '\u0117' => 'e',\n\t\t'\u0118' => 'E', '\u0119' => 'e',\n\t\t'\u011a' => 'E', '\u011b' => 'e',\n\t\t'\u011c' => 'G', '\u011d' => 'g',\n\t\t'\u011e' => 'G', '\u011f' => 'g',\n\t\t'\u0120' => 'G', '\u0121' => 'g',\n\t\t'\u0122' => 'G', '\u0123' => 'g',\n\t\t'\u0124' => 'H', '\u0125' => 'h',\n\t\t'\u0126' => 'H', '\u0127' => 'h',\n\t\t'\u0128' => 'I', '\u0129' => 'i',\n\t\t'\u012a' => 'I', '\u012b' => 'i',\n\t\t'\u012c' => 'I', '\u012d' => 'i',\n\t\t'\u012e' => 'I', '\u012f' => 'i',\n\t\t'\u0130' => 'I', '\u0131' => 'i',\n\t\t'\u0132' => 'IJ','\u0133' => 'ij',\n\t\t'\u0134' => 'J', '\u0135' => 'j',\n\t\t'\u0136' => 'K', '\u0137' => 'k',\n\t\t'\u0138' => 'k', '\u0139' => 'L',\n\t\t'\u013a' => 'l', '\u013b' => 'L',\n\t\t'\u013c' => 'l', '\u013d' => 'L',\n\t\t'\u013e' => 'l', '\u013f' => 'L',\n\t\t'\u0140' => 'l', '\u0141' => 'L',\n\t\t'\u0142' => 'l', '\u0143' => 'N',\n\t\t'\u0144' => 'n', '\u0145' => 'N',\n\t\t'\u0146' => 'n', '\u0147' => 'N',\n\t\t'\u0148' => 'n', '\u0149' => 'n',\n\t\t'\u014a' => 'N', '\u014b' => 'n',\n\t\t'\u014c' => 'O', '\u014d' => 'o',\n\t\t'\u014e' => 'O', '\u014f' => 'o',\n\t\t'\u0150' => 'O', '\u0151' => 'o',\n\t\t'\u0152' => 'OE','\u0153' => 'oe',\n\t\t'\u0154' => 'R','\u0155' => 'r',\n\t\t'\u0156' => 'R','\u0157' => 'r',\n\t\t'\u0158' => 'R','\u0159' => 'r',\n\t\t'\u015a' => 'S','\u015b' => 's',\n\t\t'\u015c' => 'S','\u015d' => 's',\n\t\t'\u015e' => 'S','\u015f' => 's',\n\t\t'\u0160' => 'S', '\u0161' => 's',\n\t\t'\u0162' => 'T', '\u0163' => 't',\n\t\t'\u0164' => 'T', '\u0165' => 't',\n\t\t'\u0166' => 'T', '\u0167' => 't',\n\t\t'\u0168' => 'U', '\u0169' => 'u',\n\t\t'\u016a' => 'U', '\u016b' => 'u',\n\t\t'\u016c' => 'U', '\u016d' => 'u',\n\t\t'\u016e' => 'U', '\u016f' => 'u',\n\t\t'\u0170' => 'U', '\u0171' => 'u',\n\t\t'\u0172' => 'U', '\u0173' => 'u',\n\t\t'\u0174' => 'W', '\u0175' => 'w',\n\t\t'\u0176' => 'Y', '\u0177' => 'y',\n\t\t'\u0178' => 'Y', '\u0179' => 'Z',\n\t\t'\u017a' => 'z', '\u017b' => 'Z',\n\t\t'\u017c' => 'z', '\u017d' => 'Z',\n\t\t'\u017e' => 'z', '\u017f' => 's',\n\t\t// Decompositions for Latin Extended-B\n\t\t'\u0218' => 'S', '\u0219' => 's',\n\t\t'\u021a' => 'T', '\u021b' => 't',\n\t\t// Euro Sign\n\t\t'\u20ac' => 'E',\n\t\t// GBP (Pound) Sign\n\t\t'\u00a3' => '',\n\t\t// Vowels with diacritic (Vietnamese)\n\t\t// unmarked\n\t\t'\u01a0' => 'O', '\u01a1' => 'o',\n\t\t'\u01af' => 'U', '\u01b0' => 'u',\n\t\t// grave accent\n\t\t'\u1ea6' => 'A', '\u1ea7' => 'a',\n\t\t'\u1eb0' => 'A', '\u1eb1' => 'a',\n\t\t'\u1ec0' => 'E', '\u1ec1' => 'e',\n\t\t'\u1ed2' => 'O', '\u1ed3' => 'o',\n\t\t'\u1edc' => 'O', '\u1edd' => 'o',\n\t\t'\u1eea' => 'U', '\u1eeb' => 'u',\n\t\t'\u1ef2' => 'Y', '\u1ef3' => 'y',\n\t\t// hook\n\t\t'\u1ea2' => 'A', '\u1ea3' => 'a',\n\t\t'\u1ea8' => 'A', '\u1ea9' => 'a',\n\t\t'\u1eb2' => 'A', '\u1eb3' => 'a',\n\t\t'\u1eba' => 'E', '\u1ebb' => 'e',\n\t\t'\u1ec2' => 'E', '\u1ec3' => 'e',\n\t\t'\u1ec8' => 'I', '\u1ec9' => 'i',\n\t\t'\u1ece' => 'O', '\u1ecf' => 'o',\n\t\t'\u1ed4' => 'O', '\u1ed5' => 'o',\n\t\t'\u1ede' => 'O', '\u1edf' => 'o',\n\t\t'\u1ee6' => 'U', '\u1ee7' => 'u',\n\t\t'\u1eec' => 'U', '\u1eed' => 'u',\n\t\t'\u1ef6' => 'Y', '\u1ef7' => 'y',\n\t\t// tilde\n\t\t'\u1eaa' => 'A', '\u1eab' => 'a',\n\t\t'\u1eb4' => 'A', '\u1eb5' => 'a',\n\t\t'\u1ebc' => 'E', '\u1ebd' => 'e',\n\t\t'\u1ec4' => 'E', '\u1ec5' => 'e',\n\t\t'\u1ed6' => 'O', '\u1ed7' => 'o',\n\t\t'\u1ee0' => 'O', '\u1ee1' => 'o',\n\t\t'\u1eee' => 'U', '\u1eef' => 'u',\n\t\t'\u1ef8' => 'Y', '\u1ef9' => 'y',\n\t\t// acute accent\n\t\t'\u1ea4' => 'A', '\u1ea5' => 'a',\n\t\t'\u1eae' => 'A', '\u1eaf' => 'a',\n\t\t'\u1ebe' => 'E', '\u1ebf' => 'e',\n\t\t'\u1ed0' => 'O', '\u1ed1' => 'o',\n\t\t'\u1eda' => 'O', '\u1edb' => 'o',\n\t\t'\u1ee8' => 'U', '\u1ee9' => 'u',\n\t\t// dot below\n\t\t'\u1ea0' => 'A', '\u1ea1' => 'a',\n\t\t'\u1eac' => 'A', '\u1ead' => 'a',\n\t\t'\u1eb6' => 'A', '\u1eb7' => 'a',\n\t\t'\u1eb8' => 'E', '\u1eb9' => 'e',\n\t\t'\u1ec6' => 'E', '\u1ec7' => 'e',\n\t\t'\u1eca' => 'I', '\u1ecb' => 'i',\n\t\t'\u1ecc' => 'O', '\u1ecd' => 'o',\n\t\t'\u1ed8' => 'O', '\u1ed9' => 'o',\n\t\t'\u1ee2' => 'O', '\u1ee3' => 'o',\n\t\t'\u1ee4' => 'U', '\u1ee5' => 'u',\n\t\t'\u1ef0' => 'U', '\u1ef1' => 'u',\n\t\t'\u1ef4' => 'Y', '\u1ef5' => 'y',\n\t\t// Vowels with diacritic (Chinese, Hanyu Pinyin)\n\t\t'\u0251' => 'a',\n\t\t// macron\n\t\t'\u01d5' => 'U', '\u01d6' => 'u',\n\t\t// acute accent\n\t\t'\u01d7' => 'U', '\u01d8' => 'u',\n\t\t// caron\n\t\t'\u01cd' => 'A', '\u01ce' => 'a',\n\t\t'\u01cf' => 'I', '\u01d0' => 'i',\n\t\t'\u01d1' => 'O', '\u01d2' => 'o',\n\t\t'\u01d3' => 'U', '\u01d4' => 'u',\n\t\t'\u01d9' => 'U', '\u01da' => 'u',\n\t\t// grave accent\n\t\t'\u01db' => 'U', '\u01dc' => 'u',\n\t\t);\n\n\t\t// Used for locale-specific rules\n\t\t$locale = get_locale();\n\n\t\tif ( 'de_DE' == $locale || 'de_DE_formal' == $locale || 'de_CH' == $locale || 'de_CH_informal' == $locale ) {\n\t\t\t$chars[ '\u00c4' ] = 'Ae';\n\t\t\t$chars[ '\u00e4' ] = 'ae';\n\t\t\t$chars[ '\u00d6' ] = 'Oe';\n\t\t\t$chars[ '\u00f6' ] = 'oe';\n\t\t\t$chars[ '\u00dc' ] = 'Ue';\n\t\t\t$chars[ '\u00fc' ] = 'ue';\n\t\t\t$chars[ '\u00df' ] = 'ss';\n\t\t} elseif ( 'da_DK' === $locale ) {\n\t\t\t$chars[ '\u00c6' ] = 'Ae';\n \t\t\t$chars[ '\u00e6' ] = 'ae';\n\t\t\t$chars[ '\u00d8' ] = 'Oe';\n\t\t\t$chars[ '\u00f8' ] = 'oe';\n\t\t\t$chars[ '\u00c5' ] = 'Aa';\n\t\t\t$chars[ '\u00e5' ] = 'aa';\n\t\t} elseif ( 'ca' === $locale ) {\n\t\t\t$chars[ 'l\u00b7l' ] = 'll';\n\t\t} elseif ( 'sr_RS' === $locale || 'bs_BA' === $locale ) {\n\t\t\t$chars[ '\u0110' ] = 'DJ';\n\t\t\t$chars[ '\u0111' ] = 'dj';\n\t\t}\n\n\t\t$string = strtr($string, $chars);\n\t} else {\n\t\t$chars = array();\n\t\t// Assume ISO-8859-1 if not UTF-8\n\t\t$chars['in'] = \"\\x80\\x83\\x8a\\x8e\\x9a\\x9e\"\n\t\t\t.\"\\x9f\\xa2\\xa5\\xb5\\xc0\\xc1\\xc2\"\n\t\t\t.\"\\xc3\\xc4\\xc5\\xc7\\xc8\\xc9\\xca\"\n\t\t\t.\"\\xcb\\xcc\\xcd\\xce\\xcf\\xd1\\xd2\"\n\t\t\t.\"\\xd3\\xd4\\xd5\\xd6\\xd8\\xd9\\xda\"\n\t\t\t.\"\\xdb\\xdc\\xdd\\xe0\\xe1\\xe2\\xe3\"\n\t\t\t.\"\\xe4\\xe5\\xe7\\xe8\\xe9\\xea\\xeb\"\n\t\t\t.\"\\xec\\xed\\xee\\xef\\xf1\\xf2\\xf3\"\n\t\t\t.\"\\xf4\\xf5\\xf6\\xf8\\xf9\\xfa\\xfb\"\n\t\t\t.\"\\xfc\\xfd\\xff\";\n\n\t\t$chars['out'] = \"EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy\";\n\n\t\t$string = strtr($string, $chars['in'], $chars['out']);\n\t\t$double_chars = array();\n\t\t$double_chars['in'] = array(\"\\x8c\", \"\\x9c\", \"\\xc6\", \"\\xd0\", \"\\xde\", \"\\xdf\", \"\\xe6\", \"\\xf0\", \"\\xfe\");\n\t\t$double_chars['out'] = array('OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th');\n\t\t$string = str_replace($double_chars['in'], $double_chars['out'], $string);\n\t}\n\n\treturn $string;\n}\n\n/**\n * Sanitizes a filename, replacing whitespace with dashes.\n *\n * Removes special characters that are illegal in filenames on certain\n * operating systems and special characters requiring special escaping\n * to manipulate at the command line. Replaces spaces and consecutive\n * dashes with a single dash. Trims period, dash and underscore from beginning\n * and end of filename. It is not guaranteed that this function will return a\n * filename that is allowed to be uploaded.\n *\n * @since 2.1.0\n *\n * @param string $filename The filename to be sanitized\n * @return string The sanitized filename\n */\nfunction sanitize_file_name( $filename ) {\n\t$filename_raw = $filename;\n\t$special_chars = array(\"?\", \"[\", \"]\", \"/\", \"\\\\\", \"=\", \"<\", \">\", \":\", \";\", \",\", \"'\", \"\\\"\", \"&\", \"$\", \"#\", \"*\", \"(\", \")\", \"|\", \"~\", \"`\", \"!\", \"{\", \"}\", \"%\", \"+\", chr(0));\n\t/**\n\t * Filters the list of characters to remove from a filename.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array  $special_chars Characters to remove.\n\t * @param string $filename_raw  Filename as it was passed into sanitize_file_name().\n\t */\n\t$special_chars = apply_filters( 'sanitize_file_name_chars', $special_chars, $filename_raw );\n\t$filename = preg_replace( \"#\\x{00a0}#siu\", ' ', $filename );\n\t$filename = str_replace( $special_chars, '', $filename );\n\t$filename = str_replace( array( '%20', '+' ), '-', $filename );\n\t$filename = preg_replace( '/[\\r\\n\\t -]+/', '-', $filename );\n\t$filename = trim( $filename, '.-_' );\n\n\tif ( false === strpos( $filename, '.' ) ) {\n\t\t$mime_types = wp_get_mime_types();\n\t\t$filetype = wp_check_filetype( 'test.' . $filename, $mime_types );\n\t\tif ( $filetype['ext'] === $filename ) {\n\t\t\t$filename = 'unnamed-file.' . $filetype['ext'];\n\t\t}\n\t}\n\n\t// Split the filename into a base and extension[s]\n\t$parts = explode('.', $filename);\n\n\t// Return if only one extension\n\tif ( count( $parts ) <= 2 ) {\n\t\t/**\n\t\t * Filters a sanitized filename string.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $filename     Sanitized filename.\n\t\t * @param string $filename_raw The filename prior to sanitization.\n\t\t */\n\t\treturn apply_filters( 'sanitize_file_name', $filename, $filename_raw );\n\t}\n\n\t// Process multiple extensions\n\t$filename = array_shift($parts);\n\t$extension = array_pop($parts);\n\t$mimes = get_allowed_mime_types();\n\n\t/*\n\t * Loop over any intermediate extensions. Postfix them with a trailing underscore\n\t * if they are a 2 - 5 character long alpha string not in the extension whitelist.\n\t */\n\tforeach ( (array) $parts as $part) {\n\t\t$filename .= '.' . $part;\n\n\t\tif ( preg_match(\"/^[a-zA-Z]{2,5}\\d?$/\", $part) ) {\n\t\t\t$allowed = false;\n\t\t\tforeach ( $mimes as $ext_preg => $mime_match ) {\n\t\t\t\t$ext_preg = '!^(' . $ext_preg . ')$!i';\n\t\t\t\tif ( preg_match( $ext_preg, $part ) ) {\n\t\t\t\t\t$allowed = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( !$allowed )\n\t\t\t\t$filename .= '_';\n\t\t}\n\t}\n\t$filename .= '.' . $extension;\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters('sanitize_file_name', $filename, $filename_raw);\n}\n\n/**\n * Sanitizes a username, stripping out unsafe characters.\n *\n * Removes tags, octets, entities, and if strict is enabled, will only keep\n * alphanumeric, _, space, ., -, @. After sanitizing, it passes the username,\n * raw username (the username in the parameter), and the value of $strict as\n * parameters for the {@see 'sanitize_user'} filter.\n *\n * @since 2.0.0\n *\n * @param string $username The username to be sanitized.\n * @param bool   $strict   If set limits $username to specific characters. Default false.\n * @return string The sanitized username, after passing through filters.\n */\nfunction sanitize_user( $username, $strict = false ) {\n\t$raw_username = $username;\n\t$username = wp_strip_all_tags( $username );\n\t$username = remove_accents( $username );\n\t// Kill octets\n\t$username = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $username );\n\t$username = preg_replace( '/&.+?;/', '', $username ); // Kill entities\n\n\t// If strict, reduce to ASCII for max portability.\n\tif ( $strict )\n\t\t$username = preg_replace( '|[^a-z0-9 _.\\-@]|i', '', $username );\n\n\t$username = trim( $username );\n\t// Consolidate contiguous whitespace\n\t$username = preg_replace( '|\\s+|', ' ', $username );\n\n\t/**\n\t * Filters a sanitized username string.\n\t *\n\t * @since 2.0.1\n\t *\n\t * @param string $username     Sanitized username.\n\t * @param string $raw_username The username prior to sanitization.\n\t * @param bool   $strict       Whether to limit the sanitization to specific characters. Default false.\n\t */\n\treturn apply_filters( 'sanitize_user', $username, $raw_username, $strict );\n}\n\n/**\n * Sanitizes a string key.\n *\n * Keys are used as internal identifiers. Lowercase alphanumeric characters, dashes and underscores are allowed.\n *\n * @since 3.0.0\n *\n * @param string $key String key\n * @return string Sanitized key\n */\nfunction sanitize_key( $key ) {\n\t$raw_key = $key;\n\t$key = strtolower( $key );\n\t$key = preg_replace( '/[^a-z0-9_\\-]/', '', $key );\n\n\t/**\n\t * Filters a sanitized key string.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $key     Sanitized key.\n\t * @param string $raw_key The key prior to sanitization.\n\t */\n\treturn apply_filters( 'sanitize_key', $key, $raw_key );\n}\n\n/**\n * Sanitizes a title, or returns a fallback title.\n *\n * Specifically, HTML and PHP tags are stripped. Further actions can be added\n * via the plugin API. If $title is empty and $fallback_title is set, the latter\n * will be used.\n *\n * @since 1.0.0\n *\n * @param string $title          The string to be sanitized.\n * @param string $fallback_title Optional. A title to use if $title is empty.\n * @param string $context        Optional. The operation for which the string is sanitized\n * @return string The sanitized string.\n */\nfunction sanitize_title( $title, $fallback_title = '', $context = 'save' ) {\n\t$raw_title = $title;\n\n\tif ( 'save' == $context )\n\t\t$title = remove_accents($title);\n\n\t/**\n\t * Filters a sanitized title string.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $title     Sanitized title.\n\t * @param string $raw_title The title prior to sanitization.\n\t * @param string $context   The context for which the title is being sanitized.\n\t */\n\t$title = apply_filters( 'sanitize_title', $title, $raw_title, $context );\n\n\tif ( '' === $title || false === $title )\n\t\t$title = $fallback_title;\n\n\treturn $title;\n}\n\n/**\n * Sanitizes a title with the 'query' context.\n *\n * Used for querying the database for a value from URL.\n *\n * @since 3.1.0\n *\n * @param string $title The string to be sanitized.\n * @return string The sanitized string.\n */\nfunction sanitize_title_for_query( $title ) {\n\treturn sanitize_title( $title, '', 'query' );\n}\n\n/**\n * Sanitizes a title, replacing whitespace and a few other characters with dashes.\n *\n * Limits the output to alphanumeric characters, underscore (_) and dash (-).\n * Whitespace becomes a dash.\n *\n * @since 1.2.0\n *\n * @param string $title     The title to be sanitized.\n * @param string $raw_title Optional. Not used.\n * @param string $context   Optional. The operation for which the string is sanitized.\n * @return string The sanitized title.\n */\nfunction sanitize_title_with_dashes( $title, $raw_title = '', $context = 'display' ) {\n\t$title = strip_tags($title);\n\t// Preserve escaped octets.\n\t$title = preg_replace('|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title);\n\t// Remove percent signs that are not part of an octet.\n\t$title = str_replace('%', '', $title);\n\t// Restore octets.\n\t$title = preg_replace('|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title);\n\n\tif (seems_utf8($title)) {\n\t\tif (function_exists('mb_strtolower')) {\n\t\t\t$title = mb_strtolower($title, 'UTF-8');\n\t\t}\n\t\t$title = utf8_uri_encode($title, 200);\n\t}\n\n\t$title = strtolower($title);\n\n\tif ( 'save' == $context ) {\n\t\t// Convert nbsp, ndash and mdash to hyphens\n\t\t$title = str_replace( array( '%c2%a0', '%e2%80%93', '%e2%80%94' ), '-', $title );\n\t\t// Convert nbsp, ndash and mdash HTML entities to hyphens\n\t\t$title = str_replace( array( '&nbsp;', '&#160;', '&ndash;', '&#8211;', '&mdash;', '&#8212;' ), '-', $title );\n\t\t// Convert forward slash to hyphen\n\t\t$title = str_replace( '/', '-', $title );\n\n\t\t// Strip these characters entirely\n\t\t$title = str_replace( array(\n\t\t\t// iexcl and iquest\n\t\t\t'%c2%a1', '%c2%bf',\n\t\t\t// angle quotes\n\t\t\t'%c2%ab', '%c2%bb', '%e2%80%b9', '%e2%80%ba',\n\t\t\t// curly quotes\n\t\t\t'%e2%80%98', '%e2%80%99', '%e2%80%9c', '%e2%80%9d',\n\t\t\t'%e2%80%9a', '%e2%80%9b', '%e2%80%9e', '%e2%80%9f',\n\t\t\t// copy, reg, deg, hellip and trade\n\t\t\t'%c2%a9', '%c2%ae', '%c2%b0', '%e2%80%a6', '%e2%84%a2',\n\t\t\t// acute accents\n\t\t\t'%c2%b4', '%cb%8a', '%cc%81', '%cd%81',\n\t\t\t// grave accent, macron, caron\n\t\t\t'%cc%80', '%cc%84', '%cc%8c',\n\t\t), '', $title );\n\n\t\t// Convert times to x\n\t\t$title = str_replace( '%c3%97', 'x', $title );\n\t}\n\n\t$title = preg_replace('/&.+?;/', '', $title); // kill entities\n\t$title = str_replace('.', '-', $title);\n\n\t$title = preg_replace('/[^%a-z0-9 _-]/', '', $title);\n\t$title = preg_replace('/\\s+/', '-', $title);\n\t$title = preg_replace('|-+|', '-', $title);\n\t$title = trim($title, '-');\n\n\treturn $title;\n}\n\n/**\n * Ensures a string is a valid SQL 'order by' clause.\n *\n * Accepts one or more columns, with or without a sort order (ASC / DESC).\n * e.g. 'column_1', 'column_1, column_2', 'column_1 ASC, column_2 DESC' etc.\n *\n * Also accepts 'RAND()'.\n *\n * @since 2.5.1\n *\n * @param string $orderby Order by clause to be validated.\n * @return string|false Returns $orderby if valid, false otherwise.\n */\nfunction sanitize_sql_orderby( $orderby ) {\n\tif ( preg_match( '/^\\s*(([a-z0-9_]+|`[a-z0-9_]+`)(\\s+(ASC|DESC))?\\s*(,\\s*(?=[a-z0-9_`])|$))+$/i', $orderby ) || preg_match( '/^\\s*RAND\\(\\s*\\)\\s*$/i', $orderby ) ) {\n\t\treturn $orderby;\n\t}\n\treturn false;\n}\n\n/**\n * Sanitizes an HTML classname to ensure it only contains valid characters.\n *\n * Strips the string down to A-Z,a-z,0-9,_,-. If this results in an empty\n * string then it will return the alternative value supplied.\n *\n * @todo Expand to support the full range of CDATA that a class attribute can contain.\n *\n * @since 2.8.0\n *\n * @param string $class    The classname to be sanitized\n * @param string $fallback Optional. The value to return if the sanitization ends up as an empty string.\n * \tDefaults to an empty string.\n * @return string The sanitized value\n */\nfunction sanitize_html_class( $class, $fallback = '' ) {\n\t//Strip out any % encoded octets\n\t$sanitized = preg_replace( '|%[a-fA-F0-9][a-fA-F0-9]|', '', $class );\n\n\t//Limit to A-Z,a-z,0-9,_,-\n\t$sanitized = preg_replace( '/[^A-Za-z0-9_-]/', '', $sanitized );\n\n\tif ( '' == $sanitized && $fallback ) {\n\t\treturn sanitize_html_class( $fallback );\n\t}\n\t/**\n\t * Filters a sanitized HTML class string.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $sanitized The sanitized HTML class.\n\t * @param string $class     HTML class before sanitization.\n\t * @param string $fallback  The fallback string.\n\t */\n\treturn apply_filters( 'sanitize_html_class', $sanitized, $class, $fallback );\n}\n\n/**\n * Converts lone & characters into `&#038;` (a.k.a. `&amp;`)\n *\n * @since 0.71\n *\n * @param string $content    String of characters to be converted.\n * @param string $deprecated Not used.\n * @return string Converted string.\n */\nfunction convert_chars( $content, $deprecated = '' ) {\n\tif ( ! empty( $deprecated ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '0.71' );\n\t}\n\n\tif ( strpos( $content, '&' ) !== false ) {\n\t\t$content = preg_replace( '/&([^#])(?![a-z1-4]{1,8};)/i', '&#038;$1', $content );\n\t}\n\n\treturn $content;\n}\n\n/**\n * Converts invalid Unicode references range to valid range.\n *\n * @since 4.3.0\n *\n * @param string $content String with entities that need converting.\n * @return string Converted string.\n */\nfunction convert_invalid_entities( $content ) {\n\t$wp_htmltranswinuni = array(\n\t\t'&#128;' => '&#8364;', // the Euro sign\n\t\t'&#129;' => '',\n\t\t'&#130;' => '&#8218;', // these are Windows CP1252 specific characters\n\t\t'&#131;' => '&#402;',  // they would look weird on non-Windows browsers\n\t\t'&#132;' => '&#8222;',\n\t\t'&#133;' => '&#8230;',\n\t\t'&#134;' => '&#8224;',\n\t\t'&#135;' => '&#8225;',\n\t\t'&#136;' => '&#710;',\n\t\t'&#137;' => '&#8240;',\n\t\t'&#138;' => '&#352;',\n\t\t'&#139;' => '&#8249;',\n\t\t'&#140;' => '&#338;',\n\t\t'&#141;' => '',\n\t\t'&#142;' => '&#381;',\n\t\t'&#143;' => '',\n\t\t'&#144;' => '',\n\t\t'&#145;' => '&#8216;',\n\t\t'&#146;' => '&#8217;',\n\t\t'&#147;' => '&#8220;',\n\t\t'&#148;' => '&#8221;',\n\t\t'&#149;' => '&#8226;',\n\t\t'&#150;' => '&#8211;',\n\t\t'&#151;' => '&#8212;',\n\t\t'&#152;' => '&#732;',\n\t\t'&#153;' => '&#8482;',\n\t\t'&#154;' => '&#353;',\n\t\t'&#155;' => '&#8250;',\n\t\t'&#156;' => '&#339;',\n\t\t'&#157;' => '',\n\t\t'&#158;' => '&#382;',\n\t\t'&#159;' => '&#376;'\n\t);\n\n\tif ( strpos( $content, '&#1' ) !== false ) {\n\t\t$content = strtr( $content, $wp_htmltranswinuni );\n\t}\n\n\treturn $content;\n}\n\n/**\n * Balances tags if forced to, or if the 'use_balanceTags' option is set to true.\n *\n * @since 0.71\n *\n * @param string $text  Text to be balanced\n * @param bool   $force If true, forces balancing, ignoring the value of the option. Default false.\n * @return string Balanced text\n */\nfunction balanceTags( $text, $force = false ) {\n\tif ( $force || get_option('use_balanceTags') == 1 ) {\n\t\treturn force_balance_tags( $text );\n\t} else {\n\t\treturn $text;\n\t}\n}\n\n/**\n * Balances tags of string using a modified stack.\n *\n * @since 2.0.4\n *\n * @author Leonard Lin <leonard@acm.org>\n * @license GPL\n * @copyright November 4, 2001\n * @version 1.1\n * @todo Make better - change loop condition to $text in 1.2\n * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004\n *\t\t1.1  Fixed handling of append/stack pop order of end text\n *\t\t\t Added Cleaning Hooks\n *\t\t1.0  First Version\n *\n * @param string $text Text to be balanced.\n * @return string Balanced text.\n */\nfunction force_balance_tags( $text ) {\n\t$tagstack = array();\n\t$stacksize = 0;\n\t$tagqueue = '';\n\t$newtext = '';\n\t// Known single-entity/self-closing tags\n\t$single_tags = array( 'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param', 'source' );\n\t// Tags that can be immediately nested within themselves\n\t$nestable_tags = array( 'blockquote', 'div', 'object', 'q', 'span' );\n\n\t// WP bug fix for comments - in case you REALLY meant to type '< !--'\n\t$text = str_replace('< !--', '<    !--', $text);\n\t// WP bug fix for LOVE <3 (and other situations with '<' before a number)\n\t$text = preg_replace('#<([0-9]{1})#', '&lt;$1', $text);\n\n\twhile ( preg_match(\"/<(\\/?[\\w:]*)\\s*([^>]*)>/\", $text, $regex) ) {\n\t\t$newtext .= $tagqueue;\n\n\t\t$i = strpos($text, $regex[0]);\n\t\t$l = strlen($regex[0]);\n\n\t\t// clear the shifter\n\t\t$tagqueue = '';\n\t\t// Pop or Push\n\t\tif ( isset($regex[1][0]) && '/' == $regex[1][0] ) { // End Tag\n\t\t\t$tag = strtolower(substr($regex[1],1));\n\t\t\t// if too many closing tags\n\t\t\tif ( $stacksize <= 0 ) {\n\t\t\t\t$tag = '';\n\t\t\t\t// or close to be safe $tag = '/' . $tag;\n\t\t\t}\n\t\t\t// if stacktop value = tag close value then pop\n\t\t\telseif ( $tagstack[$stacksize - 1] == $tag ) { // found closing tag\n\t\t\t\t$tag = '</' . $tag . '>'; // Close Tag\n\t\t\t\t// Pop\n\t\t\t\tarray_pop( $tagstack );\n\t\t\t\t$stacksize--;\n\t\t\t} else { // closing tag not at top, search for it\n\t\t\t\tfor ( $j = $stacksize-1; $j >= 0; $j-- ) {\n\t\t\t\t\tif ( $tagstack[$j] == $tag ) {\n\t\t\t\t\t// add tag to tagqueue\n\t\t\t\t\t\tfor ( $k = $stacksize-1; $k >= $j; $k--) {\n\t\t\t\t\t\t\t$tagqueue .= '</' . array_pop( $tagstack ) . '>';\n\t\t\t\t\t\t\t$stacksize--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$tag = '';\n\t\t\t}\n\t\t} else { // Begin Tag\n\t\t\t$tag = strtolower($regex[1]);\n\n\t\t\t// Tag Cleaning\n\n\t\t\t// If it's an empty tag \"< >\", do nothing\n\t\t\tif ( '' == $tag ) {\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\t// ElseIf it presents itself as a self-closing tag...\n\t\t\telseif ( substr( $regex[2], -1 ) == '/' ) {\n\t\t\t\t// ...but it isn't a known single-entity self-closing tag, then don't let it be treated as such and\n\t\t\t\t// immediately close it with a closing tag (the tag will encapsulate no text as a result)\n\t\t\t\tif ( ! in_array( $tag, $single_tags ) )\n\t\t\t\t\t$regex[2] = trim( substr( $regex[2], 0, -1 ) ) . \"></$tag\";\n\t\t\t}\n\t\t\t// ElseIf it's a known single-entity tag but it doesn't close itself, do so\n\t\t\telseif ( in_array($tag, $single_tags) ) {\n\t\t\t\t$regex[2] .= '/';\n\t\t\t}\n\t\t\t// Else it's not a single-entity tag\n\t\t\telse {\n\t\t\t\t// If the top of the stack is the same as the tag we want to push, close previous tag\n\t\t\t\tif ( $stacksize > 0 && !in_array($tag, $nestable_tags) && $tagstack[$stacksize - 1] == $tag ) {\n\t\t\t\t\t$tagqueue = '</' . array_pop( $tagstack ) . '>';\n\t\t\t\t\t$stacksize--;\n\t\t\t\t}\n\t\t\t\t$stacksize = array_push( $tagstack, $tag );\n\t\t\t}\n\n\t\t\t// Attributes\n\t\t\t$attributes = $regex[2];\n\t\t\tif ( ! empty( $attributes ) && $attributes[0] != '>' )\n\t\t\t\t$attributes = ' ' . $attributes;\n\n\t\t\t$tag = '<' . $tag . $attributes . '>';\n\t\t\t//If already queuing a close tag, then put this tag on, too\n\t\t\tif ( !empty($tagqueue) ) {\n\t\t\t\t$tagqueue .= $tag;\n\t\t\t\t$tag = '';\n\t\t\t}\n\t\t}\n\t\t$newtext .= substr($text, 0, $i) . $tag;\n\t\t$text = substr($text, $i + $l);\n\t}\n\n\t// Clear Tag Queue\n\t$newtext .= $tagqueue;\n\n\t// Add Remaining text\n\t$newtext .= $text;\n\n\t// Empty Stack\n\twhile( $x = array_pop($tagstack) )\n\t\t$newtext .= '</' . $x . '>'; // Add remaining tags to close\n\n\t// WP fix for the bug with HTML comments\n\t$newtext = str_replace(\"< !--\",\"<!--\",$newtext);\n\t$newtext = str_replace(\"<    !--\",\"< !--\",$newtext);\n\n\treturn $newtext;\n}\n\n/**\n * Acts on text which is about to be edited.\n *\n * The $content is run through esc_textarea(), which uses htmlspecialchars()\n * to convert special characters to HTML entities. If `$richedit` is set to true,\n * it is simply a holder for the {@see 'format_to_edit'} filter.\n *\n * @since 0.71\n * @since 4.4.0 The `$richedit` parameter was renamed to `$rich_text` for clarity.\n *\n * @param string $content   The text about to be edited.\n * @param bool   $rich_text Optional. Whether `$content` should be considered rich text,\n *                          in which case it would not be passed through esc_textarea().\n *                          Default false.\n * @return string The text after the filter (and possibly htmlspecialchars()) has been run.\n */\nfunction format_to_edit( $content, $rich_text = false ) {\n\t/**\n\t * Filters the text to be formatted for editing.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $content The text, prior to formatting for editing.\n\t */\n\t$content = apply_filters( 'format_to_edit', $content );\n\tif ( ! $rich_text )\n\t\t$content = esc_textarea( $content );\n\treturn $content;\n}\n\n/**\n * Add leading zeros when necessary.\n *\n * If you set the threshold to '4' and the number is '10', then you will get\n * back '0010'. If you set the threshold to '4' and the number is '5000', then you\n * will get back '5000'.\n *\n * Uses sprintf to append the amount of zeros based on the $threshold parameter\n * and the size of the number. If the number is large enough, then no zeros will\n * be appended.\n *\n * @since 0.71\n *\n * @param int $number     Number to append zeros to if not greater than threshold.\n * @param int $threshold  Digit places number needs to be to not have zeros added.\n * @return string Adds leading zeros to number if needed.\n */\nfunction zeroise( $number, $threshold ) {\n\treturn sprintf( '%0' . $threshold . 's', $number );\n}\n\n/**\n * Adds backslashes before letters and before a number at the start of a string.\n *\n * @since 0.71\n *\n * @param string $string Value to which backslashes will be added.\n * @return string String with backslashes inserted.\n */\nfunction backslashit( $string ) {\n\tif ( isset( $string[0] ) && $string[0] >= '0' && $string[0] <= '9' )\n\t\t$string = '\\\\\\\\' . $string;\n\treturn addcslashes( $string, 'A..Za..z' );\n}\n\n/**\n * Appends a trailing slash.\n *\n * Will remove trailing forward and backslashes if it exists already before adding\n * a trailing forward slash. This prevents double slashing a string or path.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 1.2.0\n *\n * @param string $string What to add the trailing slash to.\n * @return string String with trailing slash added.\n */\nfunction trailingslashit( $string ) {\n\treturn untrailingslashit( $string ) . '/';\n}\n\n/**\n * Removes trailing forward slashes and backslashes if they exist.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 2.2.0\n *\n * @param string $string What to remove the trailing slashes from.\n * @return string String without the trailing slashes.\n */\nfunction untrailingslashit( $string ) {\n\treturn rtrim( $string, '/\\\\' );\n}\n\n/**\n * Adds slashes to escape strings.\n *\n * Slashes will first be removed if magic_quotes_gpc is set, see {@link\n * https://secure.php.net/magic_quotes} for more details.\n *\n * @since 0.71\n *\n * @param string $gpc The string returned from HTTP request data.\n * @return string Returns a string escaped with slashes.\n */\nfunction addslashes_gpc($gpc) {\n\tif ( get_magic_quotes_gpc() )\n\t\t$gpc = stripslashes($gpc);\n\n\treturn wp_slash($gpc);\n}\n\n/**\n * Navigates through an array, object, or scalar, and removes slashes from the values.\n *\n * @since 2.0.0\n *\n * @param mixed $value The value to be stripped.\n * @return mixed Stripped value.\n */\nfunction stripslashes_deep( $value ) {\n\treturn map_deep( $value, 'stripslashes_from_strings_only' );\n}\n\n/**\n * Callback function for `stripslashes_deep()` which strips slashes from strings.\n *\n * @since 4.4.0\n *\n * @param mixed $value The array or string to be stripped.\n * @return mixed $value The stripped value.\n */\nfunction stripslashes_from_strings_only( $value ) {\n\treturn is_string( $value ) ? stripslashes( $value ) : $value;\n}\n\n/**\n * Navigates through an array, object, or scalar, and encodes the values to be used in a URL.\n *\n * @since 2.2.0\n *\n * @param mixed $value The array or string to be encoded.\n * @return mixed $value The encoded value.\n */\nfunction urlencode_deep( $value ) {\n\treturn map_deep( $value, 'urlencode' );\n}\n\n/**\n * Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL.\n *\n * @since 3.4.0\n *\n * @param mixed $value The array or string to be encoded.\n * @return mixed $value The encoded value.\n */\nfunction rawurlencode_deep( $value ) {\n\treturn map_deep( $value, 'rawurlencode' );\n}\n\n/**\n * Navigates through an array, object, or scalar, and decodes URL-encoded values\n *\n * @since 4.4.0\n *\n * @param mixed $value The array or string to be decoded.\n * @return mixed $value The decoded value.\n */\nfunction urldecode_deep( $value ) {\n\treturn map_deep( $value, 'urldecode' );\n}\n\n/**\n * Converts email addresses characters to HTML entities to block spam bots.\n *\n * @since 0.71\n *\n * @param string $email_address Email address.\n * @param int    $hex_encoding  Optional. Set to 1 to enable hex encoding.\n * @return string Converted email address.\n */\nfunction antispambot( $email_address, $hex_encoding = 0 ) {\n\t$email_no_spam_address = '';\n\tfor ( $i = 0, $len = strlen( $email_address ); $i < $len; $i++ ) {\n\t\t$j = rand( 0, 1 + $hex_encoding );\n\t\tif ( $j == 0 ) {\n\t\t\t$email_no_spam_address .= '&#' . ord( $email_address[$i] ) . ';';\n\t\t} elseif ( $j == 1 ) {\n\t\t\t$email_no_spam_address .= $email_address[$i];\n\t\t} elseif ( $j == 2 ) {\n\t\t\t$email_no_spam_address .= '%' . zeroise( dechex( ord( $email_address[$i] ) ), 2 );\n\t\t}\n\t}\n\n\treturn str_replace( '@', '&#64;', $email_no_spam_address );\n}\n\n/**\n * Callback to convert URI match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URI address.\n */\nfunction _make_url_clickable_cb( $matches ) {\n\t$url = $matches[2];\n\n\tif ( ')' == $matches[3] && strpos( $url, '(' ) ) {\n\t\t// If the trailing character is a closing parethesis, and the URL has an opening parenthesis in it, add the closing parenthesis to the URL.\n\t\t// Then we can let the parenthesis balancer do its thing below.\n\t\t$url .= $matches[3];\n\t\t$suffix = '';\n\t} else {\n\t\t$suffix = $matches[3];\n\t}\n\n\t// Include parentheses in the URL only if paired\n\twhile ( substr_count( $url, '(' ) < substr_count( $url, ')' ) ) {\n\t\t$suffix = strrchr( $url, ')' ) . $suffix;\n\t\t$url = substr( $url, 0, strrpos( $url, ')' ) );\n\t}\n\n\t$url = esc_url($url);\n\tif ( empty($url) )\n\t\treturn $matches[0];\n\n\treturn $matches[1] . \"<a href=\\\"$url\\\" rel=\\\"nofollow\\\">$url</a>\" . $suffix;\n}\n\n/**\n * Callback to convert URL match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URL address.\n */\nfunction _make_web_ftp_clickable_cb( $matches ) {\n\t$ret = '';\n\t$dest = $matches[2];\n\t$dest = 'http://' . $dest;\n\n\t// removed trailing [.,;:)] from URL\n\tif ( in_array( substr($dest, -1), array('.', ',', ';', ':', ')') ) === true ) {\n\t\t$ret = substr($dest, -1);\n\t\t$dest = substr($dest, 0, strlen($dest)-1);\n\t}\n\n\t$dest = esc_url($dest);\n\tif ( empty($dest) )\n\t\treturn $matches[0];\n\n\treturn $matches[1] . \"<a href=\\\"$dest\\\" rel=\\\"nofollow\\\">$dest</a>$ret\";\n}\n\n/**\n * Callback to convert email address match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with email address.\n */\nfunction _make_email_clickable_cb( $matches ) {\n\t$email = $matches[2] . '@' . $matches[3];\n\treturn $matches[1] . \"<a href=\\\"mailto:$email\\\">$email</a>\";\n}\n\n/**\n * Convert plaintext URI to HTML links.\n *\n * Converts URI, www and ftp, and email addresses. Finishes by fixing links\n * within links.\n *\n * @since 0.71\n *\n * @param string $text Content to convert URIs.\n * @return string Content with converted URIs.\n */\nfunction make_clickable( $text ) {\n\t$r = '';\n\t$textarr = preg_split( '/(<[^<>]+>)/', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); // split out HTML tags\n\t$nested_code_pre = 0; // Keep track of how many levels link is nested inside <pre> or <code>\n\tforeach ( $textarr as $piece ) {\n\n\t\tif ( preg_match( '|^<code[\\s>]|i', $piece ) || preg_match( '|^<pre[\\s>]|i', $piece ) || preg_match( '|^<script[\\s>]|i', $piece ) || preg_match( '|^<style[\\s>]|i', $piece ) )\n\t\t\t$nested_code_pre++;\n\t\telseif ( $nested_code_pre && ( '</code>' === strtolower( $piece ) || '</pre>' === strtolower( $piece ) || '</script>' === strtolower( $piece ) || '</style>' === strtolower( $piece ) ) )\n\t\t\t$nested_code_pre--;\n\n\t\tif ( $nested_code_pre || empty( $piece ) || ( $piece[0] === '<' && ! preg_match( '|^<\\s*[\\w]{1,20}+://|', $piece ) ) ) {\n\t\t\t$r .= $piece;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Long strings might contain expensive edge cases ...\n\t\tif ( 10000 < strlen( $piece ) ) {\n\t\t\t// ... break it up\n\t\t\tforeach ( _split_str_by_whitespace( $piece, 2100 ) as $chunk ) { // 2100: Extra room for scheme and leading and trailing paretheses\n\t\t\t\tif ( 2101 < strlen( $chunk ) ) {\n\t\t\t\t\t$r .= $chunk; // Too big, no whitespace: bail.\n\t\t\t\t} else {\n\t\t\t\t\t$r .= make_clickable( $chunk );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$ret = \" $piece \"; // Pad with whitespace to simplify the regexes\n\n\t\t\t$url_clickable = '~\n\t\t\t\t([\\\\s(<.,;:!?])                                        # 1: Leading whitespace, or punctuation\n\t\t\t\t(                                                      # 2: URL\n\t\t\t\t\t[\\\\w]{1,20}+://                                # Scheme and hier-part prefix\n\t\t\t\t\t(?=\\S{1,2000}\\s)                               # Limit to URLs less than about 2000 characters long\n\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]*+         # Non-punctuation URL character\n\t\t\t\t\t(?:                                            # Unroll the Loop: Only allow puctuation URL character if followed by a non-punctuation URL character\n\t\t\t\t\t\t[\\'.,;:!?)]                            # Punctuation URL character\n\t\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]++ # Non-punctuation URL character\n\t\t\t\t\t)*\n\t\t\t\t)\n\t\t\t\t(\\)?)                                                  # 3: Trailing closing parenthesis (for parethesis balancing post processing)\n\t\t\t~xS'; // The regex is a non-anchored pattern and does not have a single fixed starting character.\n\t\t\t      // Tell PCRE to spend more time optimizing since, when used on a page load, it will probably be used several times.\n\n\t\t\t$ret = preg_replace_callback( $url_clickable, '_make_url_clickable_cb', $ret );\n\n\t\t\t$ret = preg_replace_callback( '#([\\s>])((www|ftp)\\.[\\w\\\\x80-\\\\xff\\#$%&~/.\\-;:=,?@\\[\\]+]+)#is', '_make_web_ftp_clickable_cb', $ret );\n\t\t\t$ret = preg_replace_callback( '#([\\s>])([.0-9a-z_+-]+)@(([0-9a-z-]+\\.)+[0-9a-z]{2,})#i', '_make_email_clickable_cb', $ret );\n\n\t\t\t$ret = substr( $ret, 1, -1 ); // Remove our whitespace padding.\n\t\t\t$r .= $ret;\n\t\t}\n\t}\n\n\t// Cleanup of accidental links within links\n\treturn preg_replace( '#(<a([ \\r\\n\\t]+[^>]+?>|>))<a [^>]+?>([^>]+?)</a></a>#i', \"$1$3</a>\", $r );\n}\n\n/**\n * Breaks a string into chunks by splitting at whitespace characters.\n * The length of each returned chunk is as close to the specified length goal as possible,\n * with the caveat that each chunk includes its trailing delimiter.\n * Chunks longer than the goal are guaranteed to not have any inner whitespace.\n *\n * Joining the returned chunks with empty delimiters reconstructs the input string losslessly.\n *\n * Input string must have no null characters (or eventual transformations on output chunks must not care about null characters)\n *\n *     _split_str_by_whitespace( \"1234 67890 1234 67890a cd 1234   890 123456789 1234567890a    45678   1 3 5 7 90 \", 10 ) ==\n *     array (\n *         0 => '1234 67890 ',  // 11 characters: Perfect split\n *         1 => '1234 ',        //  5 characters: '1234 67890a' was too long\n *         2 => '67890a cd ',   // 10 characters: '67890a cd 1234' was too long\n *         3 => '1234   890 ',  // 11 characters: Perfect split\n *         4 => '123456789 ',   // 10 characters: '123456789 1234567890a' was too long\n *         5 => '1234567890a ', // 12 characters: Too long, but no inner whitespace on which to split\n *         6 => '   45678   ',  // 11 characters: Perfect split\n *         7 => '1 3 5 7 90 ',  // 11 characters: End of $string\n *     );\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $string The string to split.\n * @param int    $goal   The desired chunk length.\n * @return array Numeric array of chunks.\n */\nfunction _split_str_by_whitespace( $string, $goal ) {\n\t$chunks = array();\n\n\t$string_nullspace = strtr( $string, \"\\r\\n\\t\\v\\f \", \"\\000\\000\\000\\000\\000\\000\" );\n\n\twhile ( $goal < strlen( $string_nullspace ) ) {\n\t\t$pos = strrpos( substr( $string_nullspace, 0, $goal + 1 ), \"\\000\" );\n\n\t\tif ( false === $pos ) {\n\t\t\t$pos = strpos( $string_nullspace, \"\\000\", $goal + 1 );\n\t\t\tif ( false === $pos ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$chunks[] = substr( $string, 0, $pos + 1 );\n\t\t$string = substr( $string, $pos + 1 );\n\t\t$string_nullspace = substr( $string_nullspace, $pos + 1 );\n\t}\n\n\tif ( $string ) {\n\t\t$chunks[] = $string;\n\t}\n\n\treturn $chunks;\n}\n\n/**\n * Adds rel nofollow string to all HTML A elements in content.\n *\n * @since 1.5.0\n *\n * @param string $text Content that may contain HTML A elements.\n * @return string Converted content.\n */\nfunction wp_rel_nofollow( $text ) {\n\t// This is a pre save filter, so text is already escaped.\n\t$text = stripslashes($text);\n\t$text = preg_replace_callback('|<a (.+?)>|i', 'wp_rel_nofollow_callback', $text);\n\treturn wp_slash( $text );\n}\n\n/**\n * Callback to add rel=nofollow string to HTML A element.\n *\n * Will remove already existing rel=\"nofollow\" and rel='nofollow' from the\n * string to prevent from invalidating (X)HTML.\n *\n * @since 2.3.0\n *\n * @param array $matches Single Match\n * @return string HTML A Element with rel nofollow.\n */\nfunction wp_rel_nofollow_callback( $matches ) {\n\t$text = $matches[1];\n\t$atts = shortcode_parse_atts( $matches[1] );\n\t$rel  = 'nofollow';\n\n\tif ( preg_match( '%href=[\"\\'](' . preg_quote( set_url_scheme( home_url(), 'http' ) ) . ')%i', $text ) ||\n\t     preg_match( '%href=[\"\\'](' . preg_quote( set_url_scheme( home_url(), 'https' ) ) . ')%i', $text )\n\t) {\n\t\treturn \"<a $text>\";\n\t}\n\n\tif ( ! empty( $atts['rel'] ) ) {\n\t\t$parts = array_map( 'trim', explode( ' ', $atts['rel'] ) );\n\t\tif ( false === array_search( 'nofollow', $parts ) ) {\n\t\t\t$parts[] = 'nofollow';\n\t\t}\n\t\t$rel = implode( ' ', $parts );\n\t\tunset( $atts['rel'] );\n\n\t\t$html = '';\n\t\tforeach ( $atts as $name => $value ) {\n\t\t\t$html .= \"{$name}=\\\"$value\\\" \";\n\t\t}\n\t\t$text = trim( $html );\n\t}\n\treturn \"<a $text rel=\\\"$rel\\\">\";\n}\n\n/**\n * Convert one smiley code to the icon graphic file equivalent.\n *\n * Callback handler for convert_smilies().\n *\n * Looks up one smiley code in the $wpsmiliestrans global array and returns an\n * `<img>` string for that smiley.\n *\n * @since 2.8.0\n *\n * @global array $wpsmiliestrans\n *\n * @param array $matches Single match. Smiley code to convert to image.\n * @return string Image string for smiley.\n */\nfunction translate_smiley( $matches ) {\n\tglobal $wpsmiliestrans;\n\n\tif ( count( $matches ) == 0 )\n\t\treturn '';\n\n\t$smiley = trim( reset( $matches ) );\n\t$img = $wpsmiliestrans[ $smiley ];\n\n\t$matches = array();\n\t$ext = preg_match( '/\\.([^.]+)$/', $img, $matches ) ? strtolower( $matches[1] ) : false;\n\t$image_exts = array( 'jpg', 'jpeg', 'jpe', 'gif', 'png' );\n\n\t// Don't convert smilies that aren't images - they're probably emoji.\n\tif ( ! in_array( $ext, $image_exts ) ) {\n\t\treturn $img;\n\t}\n\n\t/**\n\t * Filters the Smiley image URL before it's used in the image element.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $smiley_url URL for the smiley image.\n\t * @param string $img        Filename for the smiley image.\n\t * @param string $site_url   Site URL, as returned by site_url().\n\t */\n\t$src_url = apply_filters( 'smilies_src', includes_url( \"images/smilies/$img\" ), $img, site_url() );\n\n\treturn sprintf( '<img src=\"%s\" alt=\"%s\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />', esc_url( $src_url ), esc_attr( $smiley ) );\n}\n\n/**\n * Convert text equivalent of smilies to images.\n *\n * Will only convert smilies if the option 'use_smilies' is true and the global\n * used in the function isn't empty.\n *\n * @since 0.71\n *\n * @global string|array $wp_smiliessearch\n *\n * @param string $text Content to convert smilies from text.\n * @return string Converted content with text smilies replaced with images.\n */\nfunction convert_smilies( $text ) {\n\tglobal $wp_smiliessearch;\n\t$output = '';\n\tif ( get_option( 'use_smilies' ) && ! empty( $wp_smiliessearch ) ) {\n\t\t// HTML loop taken from texturize function, could possible be consolidated\n\t\t$textarr = preg_split( '/(<.*>)/U', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); // capture the tags as well as in between\n\t\t$stop = count( $textarr );// loop stuff\n\n\t\t// Ignore proessing of specific tags\n\t\t$tags_to_ignore = 'code|pre|style|script|textarea';\n\t\t$ignore_block_element = '';\n\n\t\tfor ( $i = 0; $i < $stop; $i++ ) {\n\t\t\t$content = $textarr[$i];\n\n\t\t\t// If we're in an ignore block, wait until we find its closing tag\n\t\t\tif ( '' == $ignore_block_element && preg_match( '/^<(' . $tags_to_ignore . ')>/', $content, $matches ) )  {\n\t\t\t\t$ignore_block_element = $matches[1];\n\t\t\t}\n\n\t\t\t// If it's not a tag and not in ignore block\n\t\t\tif ( '' ==  $ignore_block_element && strlen( $content ) > 0 && '<' != $content[0] ) {\n\t\t\t\t$content = preg_replace_callback( $wp_smiliessearch, 'translate_smiley', $content );\n\t\t\t}\n\n\t\t\t// did we exit ignore block\n\t\t\tif ( '' != $ignore_block_element && '</' . $ignore_block_element . '>' == $content )  {\n\t\t\t\t$ignore_block_element = '';\n\t\t\t}\n\n\t\t\t$output .= $content;\n\t\t}\n\t} else {\n\t\t// return default text.\n\t\t$output = $text;\n\t}\n\treturn $output;\n}\n\n/**\n * Verifies that an email is valid.\n *\n * Does not grok i18n domains. Not RFC compliant.\n *\n * @since 0.71\n *\n * @param string $email      Email address to verify.\n * @param bool   $deprecated Deprecated.\n * @return string|bool Either false or the valid email address.\n */\nfunction is_email( $email, $deprecated = false ) {\n\tif ( ! empty( $deprecated ) )\n\t\t_deprecated_argument( __FUNCTION__, '3.0.0' );\n\n\t// Test for the minimum length the email can be\n\tif ( strlen( $email ) < 6 ) {\n\t\t/**\n\t\t * Filters whether an email address is valid.\n\t\t *\n\t\t * This filter is evaluated under several different contexts, such as 'email_too_short',\n\t\t * 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits',\n\t\t * 'domain_no_periods', 'sub_hyphen_limits', 'sub_invalid_chars', or no specific context.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param bool   $is_email Whether the email address has passed the is_email() checks. Default false.\n\t\t * @param string $email    The email address being checked.\n\t\t * @param string $context  Context under which the email was tested.\n\t\t */\n\t\treturn apply_filters( 'is_email', false, $email, 'email_too_short' );\n\t}\n\n\t// Test for an @ character after the first position\n\tif ( strpos( $email, '@', 1 ) === false ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'email_no_at' );\n\t}\n\n\t// Split out the local and domain parts\n\tlist( $local, $domain ) = explode( '@', $email, 2 );\n\n\t// LOCAL PART\n\t// Test for invalid characters\n\tif ( !preg_match( '/^[a-zA-Z0-9!#$%&\\'*+\\/=?^_`{|}~\\.-]+$/', $local ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'local_invalid_chars' );\n\t}\n\n\t// DOMAIN PART\n\t// Test for sequences of periods\n\tif ( preg_match( '/\\.{2,}/', $domain ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_period_sequence' );\n\t}\n\n\t// Test for leading and trailing periods and whitespace\n\tif ( trim( $domain, \" \\t\\n\\r\\0\\x0B.\" ) !== $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_period_limits' );\n\t}\n\n\t// Split the domain into subs\n\t$subs = explode( '.', $domain );\n\n\t// Assume the domain will have at least two subs\n\tif ( 2 > count( $subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_no_periods' );\n\t}\n\n\t// Loop through each sub\n\tforeach ( $subs as $sub ) {\n\t\t// Test for leading and trailing hyphens and whitespace\n\t\tif ( trim( $sub, \" \\t\\n\\r\\0\\x0B-\" ) !== $sub ) {\n\t\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\t\treturn apply_filters( 'is_email', false, $email, 'sub_hyphen_limits' );\n\t\t}\n\n\t\t// Test for invalid characters\n\t\tif ( !preg_match('/^[a-z0-9-]+$/i', $sub ) ) {\n\t\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\t\treturn apply_filters( 'is_email', false, $email, 'sub_invalid_chars' );\n\t\t}\n\t}\n\n\t// Congratulations your email made it!\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters( 'is_email', $email, $email, null );\n}\n\n/**\n * Convert to ASCII from email subjects.\n *\n * @since 1.2.0\n *\n * @param string $string Subject line\n * @return string Converted string to ASCII\n */\nfunction wp_iso_descrambler( $string ) {\n\t/* this may only work with iso-8859-1, I'm afraid */\n\tif (!preg_match('#\\=\\?(.+)\\?Q\\?(.+)\\?\\=#i', $string, $matches)) {\n\t\treturn $string;\n\t} else {\n\t\t$subject = str_replace('_', ' ', $matches[2]);\n\t\treturn preg_replace_callback( '#\\=([0-9a-f]{2})#i', '_wp_iso_convert', $subject );\n\t}\n}\n\n/**\n * Helper function to convert hex encoded chars to ASCII\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $match The preg_replace_callback matches array\n * @return string Converted chars\n */\nfunction _wp_iso_convert( $match ) {\n\treturn chr( hexdec( strtolower( $match[1] ) ) );\n}\n\n/**\n * Returns a date in the GMT equivalent.\n *\n * Requires and returns a date in the Y-m-d H:i:s format. If there is a\n * timezone_string available, the date is assumed to be in that timezone,\n * otherwise it simply subtracts the value of the 'gmt_offset' option. Return\n * format can be overridden using the $format parameter.\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date (default is Y-m-d H:i:s)\n * @return string GMT version of the date provided.\n */\nfunction get_gmt_from_date( $string, $format = 'Y-m-d H:i:s' ) {\n\t$tz = get_option( 'timezone_string' );\n\tif ( $tz ) {\n\t\t$datetime = date_create( $string, new DateTimeZone( $tz ) );\n\t\tif ( ! $datetime ) {\n\t\t\treturn gmdate( $format, 0 );\n\t\t}\n\t\t$datetime->setTimezone( new DateTimeZone( 'UTC' ) );\n\t\t$string_gmt = $datetime->format( $format );\n\t} else {\n\t\tif ( ! preg_match( '#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches ) ) {\n\t\t\t$datetime = strtotime( $string );\n\t\t\tif ( false === $datetime ) {\n\t\t\t\treturn gmdate( $format, 0 );\n\t\t\t}\n\t\t\treturn gmdate( $format, $datetime );\n\t\t}\n\t\t$string_time = gmmktime( $matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1] );\n\t\t$string_gmt = gmdate( $format, $string_time - get_option( 'gmt_offset' ) * HOUR_IN_SECONDS );\n\t}\n\treturn $string_gmt;\n}\n\n/**\n * Converts a GMT date into the correct format for the blog.\n *\n * Requires and returns a date in the Y-m-d H:i:s format. If there is a\n * timezone_string available, the returned date is in that timezone, otherwise\n * it simply adds the value of gmt_offset. Return format can be overridden\n * using the $format parameter\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date (default is Y-m-d H:i:s)\n * @return string Formatted date relative to the timezone / GMT offset.\n */\nfunction get_date_from_gmt( $string, $format = 'Y-m-d H:i:s' ) {\n\t$tz = get_option( 'timezone_string' );\n\tif ( $tz ) {\n\t\t$datetime = date_create( $string, new DateTimeZone( 'UTC' ) );\n\t\tif ( ! $datetime )\n\t\t\treturn date( $format, 0 );\n\t\t$datetime->setTimezone( new DateTimeZone( $tz ) );\n\t\t$string_localtime = $datetime->format( $format );\n\t} else {\n\t\tif ( ! preg_match('#([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2}) ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})#', $string, $matches) )\n\t\t\treturn date( $format, 0 );\n\t\t$string_time = gmmktime( $matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1] );\n\t\t$string_localtime = gmdate( $format, $string_time + get_option( 'gmt_offset' ) * HOUR_IN_SECONDS );\n\t}\n\treturn $string_localtime;\n}\n\n/**\n * Computes an offset in seconds from an iso8601 timezone.\n *\n * @since 1.5.0\n *\n * @param string $timezone Either 'Z' for 0 offset or '\u00b1hhmm'.\n * @return int|float The offset in seconds.\n */\nfunction iso8601_timezone_to_offset( $timezone ) {\n\t// $timezone is either 'Z' or '[+|-]hhmm'\n\tif ($timezone == 'Z') {\n\t\t$offset = 0;\n\t} else {\n\t\t$sign    = (substr($timezone, 0, 1) == '+') ? 1 : -1;\n\t\t$hours   = intval(substr($timezone, 1, 2));\n\t\t$minutes = intval(substr($timezone, 3, 4)) / 60;\n\t\t$offset  = $sign * HOUR_IN_SECONDS * ($hours + $minutes);\n\t}\n\treturn $offset;\n}\n\n/**\n * Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt].\n *\n * @since 1.5.0\n *\n * @param string $date_string Date and time in ISO 8601 format {@link https://en.wikipedia.org/wiki/ISO_8601}.\n * @param string $timezone    Optional. If set to GMT returns the time minus gmt_offset. Default is 'user'.\n * @return string The date and time in MySQL DateTime format - Y-m-d H:i:s.\n */\nfunction iso8601_to_datetime( $date_string, $timezone = 'user' ) {\n\t$timezone = strtolower($timezone);\n\n\tif ($timezone == 'gmt') {\n\n\t\tpreg_match('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\\+|\\-][0-9]{2,4}){0,1}#', $date_string, $date_bits);\n\n\t\tif (!empty($date_bits[7])) { // we have a timezone, so let's compute an offset\n\t\t\t$offset = iso8601_timezone_to_offset($date_bits[7]);\n\t\t} else { // we don't have a timezone, so we assume user local timezone (not server's!)\n\t\t\t$offset = HOUR_IN_SECONDS * get_option('gmt_offset');\n\t\t}\n\n\t\t$timestamp = gmmktime($date_bits[4], $date_bits[5], $date_bits[6], $date_bits[2], $date_bits[3], $date_bits[1]);\n\t\t$timestamp -= $offset;\n\n\t\treturn gmdate('Y-m-d H:i:s', $timestamp);\n\n\t} elseif ($timezone == 'user') {\n\t\treturn preg_replace('#([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(Z|[\\+|\\-][0-9]{2,4}){0,1}#', '$1-$2-$3 $4:$5:$6', $date_string);\n\t}\n}\n\n/**\n * Strips out all characters that are not allowable in an email.\n *\n * @since 1.5.0\n *\n * @param string $email Email address to filter.\n * @return string Filtered email address.\n */\nfunction sanitize_email( $email ) {\n\t// Test for the minimum length the email can be\n\tif ( strlen( $email ) < 6 ) {\n\t\t/**\n\t\t * Filters a sanitized email address.\n\t\t *\n\t\t * This filter is evaluated under several contexts, including 'email_too_short',\n\t\t * 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits',\n\t\t * 'domain_no_periods', 'domain_no_valid_subs', or no context.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $email   The sanitized email address.\n\t\t * @param string $email   The email address, as provided to sanitize_email().\n\t\t * @param string $message A message to pass to the user.\n\t\t */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'email_too_short' );\n\t}\n\n\t// Test for an @ character after the first position\n\tif ( strpos( $email, '@', 1 ) === false ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'email_no_at' );\n\t}\n\n\t// Split out the local and domain parts\n\tlist( $local, $domain ) = explode( '@', $email, 2 );\n\n\t// LOCAL PART\n\t// Test for invalid characters\n\t$local = preg_replace( '/[^a-zA-Z0-9!#$%&\\'*+\\/=?^_`{|}~\\.-]/', '', $local );\n\tif ( '' === $local ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'local_invalid_chars' );\n\t}\n\n\t// DOMAIN PART\n\t// Test for sequences of periods\n\t$domain = preg_replace( '/\\.{2,}/', '', $domain );\n\tif ( '' === $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_period_sequence' );\n\t}\n\n\t// Test for leading and trailing periods and whitespace\n\t$domain = trim( $domain, \" \\t\\n\\r\\0\\x0B.\" );\n\tif ( '' === $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_period_limits' );\n\t}\n\n\t// Split the domain into subs\n\t$subs = explode( '.', $domain );\n\n\t// Assume the domain will have at least two subs\n\tif ( 2 > count( $subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_no_periods' );\n\t}\n\n\t// Create an array that will contain valid subs\n\t$new_subs = array();\n\n\t// Loop through each sub\n\tforeach ( $subs as $sub ) {\n\t\t// Test for leading and trailing hyphens\n\t\t$sub = trim( $sub, \" \\t\\n\\r\\0\\x0B-\" );\n\n\t\t// Test for invalid characters\n\t\t$sub = preg_replace( '/[^a-z0-9-]+/i', '', $sub );\n\n\t\t// If there's anything left, add it to the valid subs\n\t\tif ( '' !== $sub ) {\n\t\t\t$new_subs[] = $sub;\n\t\t}\n\t}\n\n\t// If there aren't 2 or more valid subs\n\tif ( 2 > count( $new_subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_no_valid_subs' );\n\t}\n\n\t// Join valid subs into the new domain\n\t$domain = join( '.', $new_subs );\n\n\t// Put the email back together\n\t$email = $local . '@' . $domain;\n\n\t// Congratulations your email made it!\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters( 'sanitize_email', $email, $email, null );\n}\n\n/**\n * Determines the difference between two timestamps.\n *\n * The difference is returned in a human readable format such as \"1 hour\",\n * \"5 mins\", \"2 days\".\n *\n * @since 1.5.0\n *\n * @param int $from Unix timestamp from which the difference begins.\n * @param int $to   Optional. Unix timestamp to end the time difference. Default becomes time() if not set.\n * @return string Human readable time difference.\n */\nfunction human_time_diff( $from, $to = '' ) {\n\tif ( empty( $to ) ) {\n\t\t$to = time();\n\t}\n\n\t$diff = (int) abs( $to - $from );\n\n\tif ( $diff < HOUR_IN_SECONDS ) {\n\t\t$mins = round( $diff / MINUTE_IN_SECONDS );\n\t\tif ( $mins <= 1 )\n\t\t\t$mins = 1;\n\t\t/* translators: Time difference between two dates, in minutes (min=minute). 1: Number of minutes */\n\t\t$since = sprintf( _n( '%s min', '%s mins', $mins ), $mins );\n\t} elseif ( $diff < DAY_IN_SECONDS && $diff >= HOUR_IN_SECONDS ) {\n\t\t$hours = round( $diff / HOUR_IN_SECONDS );\n\t\tif ( $hours <= 1 )\n\t\t\t$hours = 1;\n\t\t/* translators: Time difference between two dates, in hours. 1: Number of hours */\n\t\t$since = sprintf( _n( '%s hour', '%s hours', $hours ), $hours );\n\t} elseif ( $diff < WEEK_IN_SECONDS && $diff >= DAY_IN_SECONDS ) {\n\t\t$days = round( $diff / DAY_IN_SECONDS );\n\t\tif ( $days <= 1 )\n\t\t\t$days = 1;\n\t\t/* translators: Time difference between two dates, in days. 1: Number of days */\n\t\t$since = sprintf( _n( '%s day', '%s days', $days ), $days );\n\t} elseif ( $diff < MONTH_IN_SECONDS && $diff >= WEEK_IN_SECONDS ) {\n\t\t$weeks = round( $diff / WEEK_IN_SECONDS );\n\t\tif ( $weeks <= 1 )\n\t\t\t$weeks = 1;\n\t\t/* translators: Time difference between two dates, in weeks. 1: Number of weeks */\n\t\t$since = sprintf( _n( '%s week', '%s weeks', $weeks ), $weeks );\n\t} elseif ( $diff < YEAR_IN_SECONDS && $diff >= MONTH_IN_SECONDS ) {\n\t\t$months = round( $diff / MONTH_IN_SECONDS );\n\t\tif ( $months <= 1 )\n\t\t\t$months = 1;\n\t\t/* translators: Time difference between two dates, in months. 1: Number of months */\n\t\t$since = sprintf( _n( '%s month', '%s months', $months ), $months );\n\t} elseif ( $diff >= YEAR_IN_SECONDS ) {\n\t\t$years = round( $diff / YEAR_IN_SECONDS );\n\t\tif ( $years <= 1 )\n\t\t\t$years = 1;\n\t\t/* translators: Time difference between two dates, in years. 1: Number of years */\n\t\t$since = sprintf( _n( '%s year', '%s years', $years ), $years );\n\t}\n\n\t/**\n\t * Filters the human readable difference between two timestamps.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param string $since The difference in human readable text.\n\t * @param int    $diff  The difference in seconds.\n\t * @param int    $from  Unix timestamp from which the difference begins.\n\t * @param int    $to    Unix timestamp to end the time difference.\n\t */\n\treturn apply_filters( 'human_time_diff', $since, $diff, $from, $to );\n}\n\n/**\n * Generates an excerpt from the content, if needed.\n *\n * The excerpt word amount will be 55 words and if the amount is greater than\n * that, then the string ' [&hellip;]' will be appended to the excerpt. If the string\n * is less than 55 words, then the content will be returned as is.\n *\n * The 55 word limit can be modified by plugins/themes using the {@see 'excerpt_length'} filter\n * The ' [&hellip;]' string can be modified by plugins/themes using the {@see 'excerpt_more'} filter\n *\n * @since 1.5.0\n *\n * @param string $text Optional. The excerpt. If set to empty, an excerpt is generated.\n * @return string The excerpt.\n */\nfunction wp_trim_excerpt( $text = '' ) {\n\t$raw_excerpt = $text;\n\tif ( '' == $text ) {\n\t\t$text = get_the_content('');\n\n\t\t$text = strip_shortcodes( $text );\n\n\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t$text = apply_filters( 'the_content', $text );\n\t\t$text = str_replace(']]>', ']]&gt;', $text);\n\n\t\t/**\n\t\t * Filters the number of words in an excerpt.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param int $number The number of words. Default 55.\n\t\t */\n\t\t$excerpt_length = apply_filters( 'excerpt_length', 55 );\n\t\t/**\n\t\t * Filters the string in the \"more\" link displayed after a trimmed excerpt.\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param string $more_string The string shown within the more link.\n\t\t */\n\t\t$excerpt_more = apply_filters( 'excerpt_more', ' ' . '[&hellip;]' );\n\t\t$text = wp_trim_words( $text, $excerpt_length, $excerpt_more );\n\t}\n\t/**\n\t * Filters the trimmed excerpt string.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $text        The trimmed text.\n\t * @param string $raw_excerpt The text prior to trimming.\n\t */\n\treturn apply_filters( 'wp_trim_excerpt', $text, $raw_excerpt );\n}\n\n/**\n * Trims text to a certain number of words.\n *\n * This function is localized. For languages that count 'words' by the individual\n * character (such as East Asian languages), the $num_words argument will apply\n * to the number of individual characters.\n *\n * @since 3.3.0\n *\n * @param string $text      Text to trim.\n * @param int    $num_words Number of words. Default 55.\n * @param string $more      Optional. What to append if $text needs to be trimmed. Default '&hellip;'.\n * @return string Trimmed text.\n */\nfunction wp_trim_words( $text, $num_words = 55, $more = null ) {\n\tif ( null === $more ) {\n\t\t$more = __( '&hellip;' );\n\t}\n\n\t$original_text = $text;\n\t$text = wp_strip_all_tags( $text );\n\n\t/*\n\t * translators: If your word count is based on single characters (e.g. East Asian characters),\n\t * enter 'characters_excluding_spaces' or 'characters_including_spaces'. Otherwise, enter 'words'.\n\t * Do not translate into your own language.\n\t */\n\tif ( strpos( _x( 'words', 'Word count type. Do not translate!' ), 'characters' ) === 0 && preg_match( '/^utf\\-?8$/i', get_option( 'blog_charset' ) ) ) {\n\t\t$text = trim( preg_replace( \"/[\\n\\r\\t ]+/\", ' ', $text ), ' ' );\n\t\tpreg_match_all( '/./u', $text, $words_array );\n\t\t$words_array = array_slice( $words_array[0], 0, $num_words + 1 );\n\t\t$sep = '';\n\t} else {\n\t\t$words_array = preg_split( \"/[\\n\\r\\t ]+/\", $text, $num_words + 1, PREG_SPLIT_NO_EMPTY );\n\t\t$sep = ' ';\n\t}\n\n\tif ( count( $words_array ) > $num_words ) {\n\t\tarray_pop( $words_array );\n\t\t$text = implode( $sep, $words_array );\n\t\t$text = $text . $more;\n\t} else {\n\t\t$text = implode( $sep, $words_array );\n\t}\n\n\t/**\n\t * Filters the text content after words have been trimmed.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $text          The trimmed text.\n\t * @param int    $num_words     The number of words to trim the text to. Default 55.\n\t * @param string $more          An optional string to append to the end of the trimmed text, e.g. &hellip;.\n\t * @param string $original_text The text before it was trimmed.\n\t */\n\treturn apply_filters( 'wp_trim_words', $text, $num_words, $more, $original_text );\n}\n\n/**\n * Converts named entities into numbered entities.\n *\n * @since 1.5.1\n *\n * @param string $text The text within which entities will be converted.\n * @return string Text with converted entities.\n */\nfunction ent2ncr( $text ) {\n\n\t/**\n\t * Filters text before named entities are converted into numbered entities.\n\t *\n\t * A non-null string must be returned for the filter to be evaluated.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param null   $converted_text The text to be converted. Default null.\n\t * @param string $text           The text prior to entity conversion.\n\t */\n\t$filtered = apply_filters( 'pre_ent2ncr', null, $text );\n\tif ( null !== $filtered )\n\t\treturn $filtered;\n\n\t$to_ncr = array(\n\t\t'&quot;' => '&#34;',\n\t\t'&amp;' => '&#38;',\n\t\t'&lt;' => '&#60;',\n\t\t'&gt;' => '&#62;',\n\t\t'|' => '&#124;',\n\t\t'&nbsp;' => '&#160;',\n\t\t'&iexcl;' => '&#161;',\n\t\t'&cent;' => '&#162;',\n\t\t'&pound;' => '&#163;',\n\t\t'&curren;' => '&#164;',\n\t\t'&yen;' => '&#165;',\n\t\t'&brvbar;' => '&#166;',\n\t\t'&brkbar;' => '&#166;',\n\t\t'&sect;' => '&#167;',\n\t\t'&uml;' => '&#168;',\n\t\t'&die;' => '&#168;',\n\t\t'&copy;' => '&#169;',\n\t\t'&ordf;' => '&#170;',\n\t\t'&laquo;' => '&#171;',\n\t\t'&not;' => '&#172;',\n\t\t'&shy;' => '&#173;',\n\t\t'&reg;' => '&#174;',\n\t\t'&macr;' => '&#175;',\n\t\t'&hibar;' => '&#175;',\n\t\t'&deg;' => '&#176;',\n\t\t'&plusmn;' => '&#177;',\n\t\t'&sup2;' => '&#178;',\n\t\t'&sup3;' => '&#179;',\n\t\t'&acute;' => '&#180;',\n\t\t'&micro;' => '&#181;',\n\t\t'&para;' => '&#182;',\n\t\t'&middot;' => '&#183;',\n\t\t'&cedil;' => '&#184;',\n\t\t'&sup1;' => '&#185;',\n\t\t'&ordm;' => '&#186;',\n\t\t'&raquo;' => '&#187;',\n\t\t'&frac14;' => '&#188;',\n\t\t'&frac12;' => '&#189;',\n\t\t'&frac34;' => '&#190;',\n\t\t'&iquest;' => '&#191;',\n\t\t'&Agrave;' => '&#192;',\n\t\t'&Aacute;' => '&#193;',\n\t\t'&Acirc;' => '&#194;',\n\t\t'&Atilde;' => '&#195;',\n\t\t'&Auml;' => '&#196;',\n\t\t'&Aring;' => '&#197;',\n\t\t'&AElig;' => '&#198;',\n\t\t'&Ccedil;' => '&#199;',\n\t\t'&Egrave;' => '&#200;',\n\t\t'&Eacute;' => '&#201;',\n\t\t'&Ecirc;' => '&#202;',\n\t\t'&Euml;' => '&#203;',\n\t\t'&Igrave;' => '&#204;',\n\t\t'&Iacute;' => '&#205;',\n\t\t'&Icirc;' => '&#206;',\n\t\t'&Iuml;' => '&#207;',\n\t\t'&ETH;' => '&#208;',\n\t\t'&Ntilde;' => '&#209;',\n\t\t'&Ograve;' => '&#210;',\n\t\t'&Oacute;' => '&#211;',\n\t\t'&Ocirc;' => '&#212;',\n\t\t'&Otilde;' => '&#213;',\n\t\t'&Ouml;' => '&#214;',\n\t\t'&times;' => '&#215;',\n\t\t'&Oslash;' => '&#216;',\n\t\t'&Ugrave;' => '&#217;',\n\t\t'&Uacute;' => '&#218;',\n\t\t'&Ucirc;' => '&#219;',\n\t\t'&Uuml;' => '&#220;',\n\t\t'&Yacute;' => '&#221;',\n\t\t'&THORN;' => '&#222;',\n\t\t'&szlig;' => '&#223;',\n\t\t'&agrave;' => '&#224;',\n\t\t'&aacute;' => '&#225;',\n\t\t'&acirc;' => '&#226;',\n\t\t'&atilde;' => '&#227;',\n\t\t'&auml;' => '&#228;',\n\t\t'&aring;' => '&#229;',\n\t\t'&aelig;' => '&#230;',\n\t\t'&ccedil;' => '&#231;',\n\t\t'&egrave;' => '&#232;',\n\t\t'&eacute;' => '&#233;',\n\t\t'&ecirc;' => '&#234;',\n\t\t'&euml;' => '&#235;',\n\t\t'&igrave;' => '&#236;',\n\t\t'&iacute;' => '&#237;',\n\t\t'&icirc;' => '&#238;',\n\t\t'&iuml;' => '&#239;',\n\t\t'&eth;' => '&#240;',\n\t\t'&ntilde;' => '&#241;',\n\t\t'&ograve;' => '&#242;',\n\t\t'&oacute;' => '&#243;',\n\t\t'&ocirc;' => '&#244;',\n\t\t'&otilde;' => '&#245;',\n\t\t'&ouml;' => '&#246;',\n\t\t'&divide;' => '&#247;',\n\t\t'&oslash;' => '&#248;',\n\t\t'&ugrave;' => '&#249;',\n\t\t'&uacute;' => '&#250;',\n\t\t'&ucirc;' => '&#251;',\n\t\t'&uuml;' => '&#252;',\n\t\t'&yacute;' => '&#253;',\n\t\t'&thorn;' => '&#254;',\n\t\t'&yuml;' => '&#255;',\n\t\t'&OElig;' => '&#338;',\n\t\t'&oelig;' => '&#339;',\n\t\t'&Scaron;' => '&#352;',\n\t\t'&scaron;' => '&#353;',\n\t\t'&Yuml;' => '&#376;',\n\t\t'&fnof;' => '&#402;',\n\t\t'&circ;' => '&#710;',\n\t\t'&tilde;' => '&#732;',\n\t\t'&Alpha;' => '&#913;',\n\t\t'&Beta;' => '&#914;',\n\t\t'&Gamma;' => '&#915;',\n\t\t'&Delta;' => '&#916;',\n\t\t'&Epsilon;' => '&#917;',\n\t\t'&Zeta;' => '&#918;',\n\t\t'&Eta;' => '&#919;',\n\t\t'&Theta;' => '&#920;',\n\t\t'&Iota;' => '&#921;',\n\t\t'&Kappa;' => '&#922;',\n\t\t'&Lambda;' => '&#923;',\n\t\t'&Mu;' => '&#924;',\n\t\t'&Nu;' => '&#925;',\n\t\t'&Xi;' => '&#926;',\n\t\t'&Omicron;' => '&#927;',\n\t\t'&Pi;' => '&#928;',\n\t\t'&Rho;' => '&#929;',\n\t\t'&Sigma;' => '&#931;',\n\t\t'&Tau;' => '&#932;',\n\t\t'&Upsilon;' => '&#933;',\n\t\t'&Phi;' => '&#934;',\n\t\t'&Chi;' => '&#935;',\n\t\t'&Psi;' => '&#936;',\n\t\t'&Omega;' => '&#937;',\n\t\t'&alpha;' => '&#945;',\n\t\t'&beta;' => '&#946;',\n\t\t'&gamma;' => '&#947;',\n\t\t'&delta;' => '&#948;',\n\t\t'&epsilon;' => '&#949;',\n\t\t'&zeta;' => '&#950;',\n\t\t'&eta;' => '&#951;',\n\t\t'&theta;' => '&#952;',\n\t\t'&iota;' => '&#953;',\n\t\t'&kappa;' => '&#954;',\n\t\t'&lambda;' => '&#955;',\n\t\t'&mu;' => '&#956;',\n\t\t'&nu;' => '&#957;',\n\t\t'&xi;' => '&#958;',\n\t\t'&omicron;' => '&#959;',\n\t\t'&pi;' => '&#960;',\n\t\t'&rho;' => '&#961;',\n\t\t'&sigmaf;' => '&#962;',\n\t\t'&sigma;' => '&#963;',\n\t\t'&tau;' => '&#964;',\n\t\t'&upsilon;' => '&#965;',\n\t\t'&phi;' => '&#966;',\n\t\t'&chi;' => '&#967;',\n\t\t'&psi;' => '&#968;',\n\t\t'&omega;' => '&#969;',\n\t\t'&thetasym;' => '&#977;',\n\t\t'&upsih;' => '&#978;',\n\t\t'&piv;' => '&#982;',\n\t\t'&ensp;' => '&#8194;',\n\t\t'&emsp;' => '&#8195;',\n\t\t'&thinsp;' => '&#8201;',\n\t\t'&zwnj;' => '&#8204;',\n\t\t'&zwj;' => '&#8205;',\n\t\t'&lrm;' => '&#8206;',\n\t\t'&rlm;' => '&#8207;',\n\t\t'&ndash;' => '&#8211;',\n\t\t'&mdash;' => '&#8212;',\n\t\t'&lsquo;' => '&#8216;',\n\t\t'&rsquo;' => '&#8217;',\n\t\t'&sbquo;' => '&#8218;',\n\t\t'&ldquo;' => '&#8220;',\n\t\t'&rdquo;' => '&#8221;',\n\t\t'&bdquo;' => '&#8222;',\n\t\t'&dagger;' => '&#8224;',\n\t\t'&Dagger;' => '&#8225;',\n\t\t'&bull;' => '&#8226;',\n\t\t'&hellip;' => '&#8230;',\n\t\t'&permil;' => '&#8240;',\n\t\t'&prime;' => '&#8242;',\n\t\t'&Prime;' => '&#8243;',\n\t\t'&lsaquo;' => '&#8249;',\n\t\t'&rsaquo;' => '&#8250;',\n\t\t'&oline;' => '&#8254;',\n\t\t'&frasl;' => '&#8260;',\n\t\t'&euro;' => '&#8364;',\n\t\t'&image;' => '&#8465;',\n\t\t'&weierp;' => '&#8472;',\n\t\t'&real;' => '&#8476;',\n\t\t'&trade;' => '&#8482;',\n\t\t'&alefsym;' => '&#8501;',\n\t\t'&crarr;' => '&#8629;',\n\t\t'&lArr;' => '&#8656;',\n\t\t'&uArr;' => '&#8657;',\n\t\t'&rArr;' => '&#8658;',\n\t\t'&dArr;' => '&#8659;',\n\t\t'&hArr;' => '&#8660;',\n\t\t'&forall;' => '&#8704;',\n\t\t'&part;' => '&#8706;',\n\t\t'&exist;' => '&#8707;',\n\t\t'&empty;' => '&#8709;',\n\t\t'&nabla;' => '&#8711;',\n\t\t'&isin;' => '&#8712;',\n\t\t'&notin;' => '&#8713;',\n\t\t'&ni;' => '&#8715;',\n\t\t'&prod;' => '&#8719;',\n\t\t'&sum;' => '&#8721;',\n\t\t'&minus;' => '&#8722;',\n\t\t'&lowast;' => '&#8727;',\n\t\t'&radic;' => '&#8730;',\n\t\t'&prop;' => '&#8733;',\n\t\t'&infin;' => '&#8734;',\n\t\t'&ang;' => '&#8736;',\n\t\t'&and;' => '&#8743;',\n\t\t'&or;' => '&#8744;',\n\t\t'&cap;' => '&#8745;',\n\t\t'&cup;' => '&#8746;',\n\t\t'&int;' => '&#8747;',\n\t\t'&there4;' => '&#8756;',\n\t\t'&sim;' => '&#8764;',\n\t\t'&cong;' => '&#8773;',\n\t\t'&asymp;' => '&#8776;',\n\t\t'&ne;' => '&#8800;',\n\t\t'&equiv;' => '&#8801;',\n\t\t'&le;' => '&#8804;',\n\t\t'&ge;' => '&#8805;',\n\t\t'&sub;' => '&#8834;',\n\t\t'&sup;' => '&#8835;',\n\t\t'&nsub;' => '&#8836;',\n\t\t'&sube;' => '&#8838;',\n\t\t'&supe;' => '&#8839;',\n\t\t'&oplus;' => '&#8853;',\n\t\t'&otimes;' => '&#8855;',\n\t\t'&perp;' => '&#8869;',\n\t\t'&sdot;' => '&#8901;',\n\t\t'&lceil;' => '&#8968;',\n\t\t'&rceil;' => '&#8969;',\n\t\t'&lfloor;' => '&#8970;',\n\t\t'&rfloor;' => '&#8971;',\n\t\t'&lang;' => '&#9001;',\n\t\t'&rang;' => '&#9002;',\n\t\t'&larr;' => '&#8592;',\n\t\t'&uarr;' => '&#8593;',\n\t\t'&rarr;' => '&#8594;',\n\t\t'&darr;' => '&#8595;',\n\t\t'&harr;' => '&#8596;',\n\t\t'&loz;' => '&#9674;',\n\t\t'&spades;' => '&#9824;',\n\t\t'&clubs;' => '&#9827;',\n\t\t'&hearts;' => '&#9829;',\n\t\t'&diams;' => '&#9830;'\n\t);\n\n\treturn str_replace( array_keys($to_ncr), array_values($to_ncr), $text );\n}\n\n/**\n * Formats text for the editor.\n *\n * Generally the browsers treat everything inside a textarea as text, but\n * it is still a good idea to HTML entity encode `<`, `>` and `&` in the content.\n *\n * The filter {@see 'format_for_editor'} is applied here. If `$text` is empty the\n * filter will be applied to an empty string.\n *\n * @since 4.3.0\n *\n * @see _WP_Editors::editor()\n *\n * @param string $text           The text to be formatted.\n * @param string $default_editor The default editor for the current user.\n *                               It is usually either 'html' or 'tinymce'.\n * @return string The formatted text after filter is applied.\n */\nfunction format_for_editor( $text, $default_editor = null ) {\n\tif ( $text ) {\n\t\t$text = htmlspecialchars( $text, ENT_NOQUOTES, get_option( 'blog_charset' ) );\n\t}\n\n\t/**\n\t * Filters the text after it is formatted for the editor.\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param string $text           The formatted text.\n\t * @param string $default_editor The default editor for the current user.\n\t *                               It is usually either 'html' or 'tinymce'.\n\t */\n\treturn apply_filters( 'format_for_editor', $text, $default_editor );\n}\n\n/**\n * Perform a deep string replace operation to ensure the values in $search are no longer present\n *\n * Repeats the replacement operation until it no longer replaces anything so as to remove \"nested\" values\n * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that\n * str_replace would return\n *\n * @since 2.8.1\n * @access private\n *\n * @param string|array $search  The value being searched for, otherwise known as the needle.\n *                              An array may be used to designate multiple needles.\n * @param string       $subject The string being searched and replaced on, otherwise known as the haystack.\n * @return string The string with the replaced svalues.\n */\nfunction _deep_replace( $search, $subject ) {\n\t$subject = (string) $subject;\n\n\t$count = 1;\n\twhile ( $count ) {\n\t\t$subject = str_replace( $search, '', $subject, $count );\n\t}\n\n\treturn $subject;\n}\n\n/**\n * Escapes data for use in a MySQL query.\n *\n * Usually you should prepare queries using wpdb::prepare().\n * Sometimes, spot-escaping is required or useful. One example\n * is preparing an array for use in an IN clause.\n *\n * NOTE: Since 4.8.3, '%' characters will be replaced with a placeholder string,\n * this prevents certain SQLi attacks from taking place. This change in behaviour\n * may cause issues for code that expects the return value of esc_sql() to be useable\n * for other purposes.\n *\n * @since 2.8.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string|array $data Unescaped data\n * @return string|array Escaped data\n */\nfunction esc_sql( $data ) {\n\tglobal $wpdb;\n\treturn $wpdb->_escape( $data );\n}\n\n/**\n * Checks and cleans a URL.\n *\n * A number of characters are removed from the URL. If the URL is for displaying\n * (the default behaviour) ampersands are also replaced. The {@see 'clean_url'} filter\n * is applied to the returned cleaned URL.\n *\n * @since 2.8.0\n *\n * @param string $url       The URL to be cleaned.\n * @param array  $protocols Optional. An array of acceptable protocols.\n *\t\t                    Defaults to return value of wp_allowed_protocols()\n * @param string $_context  Private. Use esc_url_raw() for database usage.\n * @return string The cleaned $url after the {@see 'clean_url'} filter is applied.\n */\nfunction esc_url( $url, $protocols = null, $_context = 'display' ) {\n\t$original_url = $url;\n\n\tif ( '' == $url )\n\t\treturn $url;\n\n\t$url = str_replace( ' ', '%20', $url );\n\t$url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\\|*\\'()\\[\\]\\\\x80-\\\\xff]|i', '', $url);\n\n\tif ( '' === $url ) {\n\t\treturn $url;\n\t}\n\n\tif ( 0 !== stripos( $url, 'mailto:' ) ) {\n\t\t$strip = array('%0d', '%0a', '%0D', '%0A');\n\t\t$url = _deep_replace($strip, $url);\n\t}\n\n\t$url = str_replace(';//', '://', $url);\n\t/* If the URL doesn't appear to contain a scheme, we\n\t * presume it needs http:// prepended (unless a relative\n\t * link starting with /, # or ? or a php file).\n\t */\n\tif ( strpos($url, ':') === false && ! in_array( $url[0], array( '/', '#', '?' ) ) &&\n\t\t! preg_match('/^[a-z0-9-]+?\\.php/i', $url) )\n\t\t$url = 'http://' . $url;\n\n\t// Replace ampersands and single quotes only when displaying.\n\tif ( 'display' == $_context ) {\n\t\t$url = wp_kses_normalize_entities( $url );\n\t\t$url = str_replace( '&amp;', '&#038;', $url );\n\t\t$url = str_replace( \"'\", '&#039;', $url );\n\t}\n\n\tif ( ( false !== strpos( $url, '[' ) ) || ( false !== strpos( $url, ']' ) ) ) {\n\n\t\t$parsed = wp_parse_url( $url );\n\t\t$front  = '';\n\n\t\tif ( isset( $parsed['scheme'] ) ) {\n\t\t\t$front .= $parsed['scheme'] . '://';\n\t\t} elseif ( '/' === $url[0] ) {\n\t\t\t$front .= '//';\n\t\t}\n\n\t\tif ( isset( $parsed['user'] ) ) {\n\t\t\t$front .= $parsed['user'];\n\t\t}\n\n\t\tif ( isset( $parsed['pass'] ) ) {\n\t\t\t$front .= ':' . $parsed['pass'];\n\t\t}\n\n\t\tif ( isset( $parsed['user'] ) || isset( $parsed['pass'] ) ) {\n\t\t\t$front .= '@';\n\t\t}\n\n\t\tif ( isset( $parsed['host'] ) ) {\n\t\t\t$front .= $parsed['host'];\n\t\t}\n\n\t\tif ( isset( $parsed['port'] ) ) {\n\t\t\t$front .= ':' . $parsed['port'];\n\t\t}\n\n\t\t$end_dirty = str_replace( $front, '', $url );\n\t\t$end_clean = str_replace( array( '[', ']' ), array( '%5B', '%5D' ), $end_dirty );\n\t\t$url       = str_replace( $end_dirty, $end_clean, $url );\n\n\t}\n\n\tif ( '/' === $url[0] ) {\n\t\t$good_protocol_url = $url;\n\t} else {\n\t\tif ( ! is_array( $protocols ) )\n\t\t\t$protocols = wp_allowed_protocols();\n\t\t$good_protocol_url = wp_kses_bad_protocol( $url, $protocols );\n\t\tif ( strtolower( $good_protocol_url ) != strtolower( $url ) )\n\t\t\treturn '';\n\t}\n\n\t/**\n\t * Filters a string cleaned and escaped for output as a URL.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $good_protocol_url The cleaned URL to be returned.\n\t * @param string $original_url      The URL prior to cleaning.\n\t * @param string $_context          If 'display', replace ampersands and single quotes only.\n\t */\n\treturn apply_filters( 'clean_url', $good_protocol_url, $original_url, $_context );\n}\n\n/**\n * Performs esc_url() for database usage.\n *\n * @since 2.8.0\n *\n * @param string $url       The URL to be cleaned.\n * @param array  $protocols An array of acceptable protocols.\n * @return string The cleaned URL.\n */\nfunction esc_url_raw( $url, $protocols = null ) {\n\treturn esc_url( $url, $protocols, 'db' );\n}\n\n/**\n * Convert entities, while preserving already-encoded entities.\n *\n * @link https://secure.php.net/htmlentities Borrowed from the PHP Manual user notes.\n *\n * @since 1.2.2\n *\n * @param string $myHTML The text to be converted.\n * @return string Converted text.\n */\nfunction htmlentities2( $myHTML ) {\n\t$translation_table = get_html_translation_table( HTML_ENTITIES, ENT_QUOTES );\n\t$translation_table[chr(38)] = '&';\n\treturn preg_replace( \"/&(?![A-Za-z]{0,4}\\w{2,3};|#[0-9]{2,3};)/\", \"&amp;\", strtr($myHTML, $translation_table) );\n}\n\n/**\n * Escape single quotes, htmlspecialchar \" < > &, and fix line endings.\n *\n * Escapes text strings for echoing in JS. It is intended to be used for inline JS\n * (in a tag attribute, for example onclick=\"...\"). Note that the strings have to\n * be in single quotes. The {@see 'js_escape'} filter is also applied here.\n *\n * @since 2.8.0\n *\n * @param string $text The text to be escaped.\n * @return string Escaped text.\n */\nfunction esc_js( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_COMPAT );\n\t$safe_text = preg_replace( '/&#(x)?0*(?(1)27|39);?/i', \"'\", stripslashes( $safe_text ) );\n\t$safe_text = str_replace( \"\\r\", '', $safe_text );\n\t$safe_text = str_replace( \"\\n\", '\\\\n', addslashes( $safe_text ) );\n\t/**\n\t * Filters a string cleaned and escaped for output in JavaScript.\n\t *\n\t * Text passed to esc_js() is stripped of invalid or special characters,\n\t * and properly slashed for output.\n\t *\n\t * @since 2.0.6\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n \t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'js_escape', $safe_text, $text );\n}\n\n/**\n * Escaping for HTML blocks.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_html( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );\n\t/**\n\t * Filters a string cleaned and escaped for output in HTML.\n\t *\n\t * Text passed to esc_html() is stripped of invalid or special characters\n\t * before output.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n \t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'esc_html', $safe_text, $text );\n}\n\n/**\n * Escaping for HTML attributes.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_attr( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );\n\t/**\n\t * Filters a string cleaned and escaped for output in an HTML attribute.\n\t *\n\t * Text passed to esc_attr() is stripped of invalid or special characters\n\t * before output.\n\t *\n\t * @since 2.0.6\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n \t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'attribute_escape', $safe_text, $text );\n}\n\n/**\n * Escaping for textarea values.\n *\n * @since 3.1.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_textarea( $text ) {\n\t$safe_text = htmlspecialchars( $text, ENT_QUOTES, get_option( 'blog_charset' ) );\n\t/**\n\t * Filters a string cleaned and escaped for output in a textarea element.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n \t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'esc_textarea', $safe_text, $text );\n}\n\n/**\n * Escape an HTML tag name.\n *\n * @since 2.5.0\n *\n * @param string $tag_name\n * @return string\n */\nfunction tag_escape( $tag_name ) {\n\t$safe_tag = strtolower( preg_replace('/[^a-zA-Z0-9_:]/', '', $tag_name) );\n\t/**\n\t * Filters a string cleaned and escaped for output as an HTML tag.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $safe_tag The tag name after it has been escaped.\n \t * @param string $tag_name The text before it was escaped.\n\t */\n\treturn apply_filters( 'tag_escape', $safe_tag, $tag_name );\n}\n\n/**\n * Convert full URL paths to absolute paths.\n *\n * Removes the http or https protocols and the domain. Keeps the path '/' at the\n * beginning, so it isn't a true relative link, but from the web root base.\n *\n * @since 2.1.0\n * @since 4.1.0 Support was added for relative URLs.\n *\n * @param string $link Full URL path.\n * @return string Absolute path.\n */\nfunction wp_make_link_relative( $link ) {\n\treturn preg_replace( '|^(https?:)?//[^/]+(/?.*)|i', '$2', $link );\n}\n\n/**\n * Sanitises various option values based on the nature of the option.\n *\n * This is basically a switch statement which will pass $value through a number\n * of functions depending on the $option.\n *\n * @since 2.0.5\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $option The name of the option.\n * @param string $value  The unsanitised value.\n * @return string Sanitized value.\n */\nfunction sanitize_option( $option, $value ) {\n\tglobal $wpdb;\n\n\t$original_value = $value;\n\t$error = '';\n\n\tswitch ( $option ) {\n\t\tcase 'admin_email' :\n\t\tcase 'new_admin_email' :\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = sanitize_email( $value );\n\t\t\t\tif ( ! is_email( $value ) ) {\n\t\t\t\t\t$error = __( 'The email address entered did not appear to be a valid email address. Please enter a valid email address.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'thumbnail_size_w':\n\t\tcase 'thumbnail_size_h':\n\t\tcase 'medium_size_w':\n\t\tcase 'medium_size_h':\n\t\tcase 'medium_large_size_w':\n\t\tcase 'medium_large_size_h':\n\t\tcase 'large_size_w':\n\t\tcase 'large_size_h':\n\t\tcase 'mailserver_port':\n\t\tcase 'comment_max_links':\n\t\tcase 'page_on_front':\n\t\tcase 'page_for_posts':\n\t\tcase 'rss_excerpt_length':\n\t\tcase 'default_category':\n\t\tcase 'default_email_category':\n\t\tcase 'default_link_category':\n\t\tcase 'close_comments_days_old':\n\t\tcase 'comments_per_page':\n\t\tcase 'thread_comments_depth':\n\t\tcase 'users_can_register':\n\t\tcase 'start_of_week':\n\t\tcase 'site_icon':\n\t\t\t$value = absint( $value );\n\t\t\tbreak;\n\n\t\tcase 'posts_per_page':\n\t\tcase 'posts_per_rss':\n\t\t\t$value = (int) $value;\n\t\t\tif ( empty($value) )\n\t\t\t\t$value = 1;\n\t\t\tif ( $value < -1 )\n\t\t\t\t$value = abs($value);\n\t\t\tbreak;\n\n\t\tcase 'default_ping_status':\n\t\tcase 'default_comment_status':\n\t\t\t// Options that if not there have 0 value but need to be something like \"closed\"\n\t\t\tif ( $value == '0' || $value == '')\n\t\t\t\t$value = 'closed';\n\t\t\tbreak;\n\n\t\tcase 'blogdescription':\n\t\tcase 'blogname':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( $value !== $original_value ) {\n\t\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', wp_encode_emoji( $original_value ) );\n\t\t\t}\n\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = esc_html( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'blog_charset':\n\t\t\t$value = preg_replace('/[^a-zA-Z0-9_-]/', '', $value); // strips slashes\n\t\t\tbreak;\n\n\t\tcase 'blog_public':\n\t\t\t// This is the value if the settings checkbox is not checked on POST. Don't rely on this.\n\t\t\tif ( null === $value )\n\t\t\t\t$value = 1;\n\t\t\telse\n\t\t\t\t$value = intval( $value );\n\t\t\tbreak;\n\n\t\tcase 'date_format':\n\t\tcase 'time_format':\n\t\tcase 'mailserver_url':\n\t\tcase 'mailserver_login':\n\t\tcase 'mailserver_pass':\n\t\tcase 'upload_path':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = strip_tags( $value );\n\t\t\t\t$value = wp_kses_data( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'ping_sites':\n\t\t\t$value = explode( \"\\n\", $value );\n\t\t\t$value = array_filter( array_map( 'trim', $value ) );\n\t\t\t$value = array_filter( array_map( 'esc_url_raw', $value ) );\n\t\t\t$value = implode( \"\\n\", $value );\n\t\t\tbreak;\n\n\t\tcase 'gmt_offset':\n\t\t\t$value = preg_replace('/[^0-9:.-]/', '', $value); // strips slashes\n\t\t\tbreak;\n\n\t\tcase 'siteurl':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( preg_match( '#http(s?)://(.+)#i', $value ) ) {\n\t\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t} else {\n\t\t\t\t\t$error = __( 'The WordPress address you entered did not appear to be a valid URL. Please enter a valid URL.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'home':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( preg_match( '#http(s?)://(.+)#i', $value ) ) {\n\t\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t} else {\n\t\t\t\t\t$error = __( 'The Site address you entered did not appear to be a valid URL. Please enter a valid URL.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'WPLANG':\n\t\t\t$allowed = get_available_languages();\n\t\t\tif ( ! is_multisite() && defined( 'WPLANG' ) && '' !== WPLANG && 'en_US' !== WPLANG ) {\n\t\t\t\t$allowed[] = WPLANG;\n\t\t\t}\n\t\t\tif ( ! in_array( $value, $allowed ) && ! empty( $value ) ) {\n\t\t\t\t$value = get_option( $option );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'illegal_names':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( ! is_array( $value ) )\n\t\t\t\t\t$value = explode( ' ', $value );\n\n\t\t\t\t$value = array_values( array_filter( array_map( 'trim', $value ) ) );\n\n\t\t\t\tif ( ! $value )\n\t\t\t\t\t$value = '';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'limited_email_domains':\n\t\tcase 'banned_email_domains':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( ! is_array( $value ) )\n\t\t\t\t\t$value = explode( \"\\n\", $value );\n\n\t\t\t\t$domains = array_values( array_filter( array_map( 'trim', $value ) ) );\n\t\t\t\t$value = array();\n\n\t\t\t\tforeach ( $domains as $domain ) {\n\t\t\t\t\tif ( ! preg_match( '/(--|\\.\\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\\.])+$|', $domain ) ) {\n\t\t\t\t\t\t$value[] = $domain;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( ! $value )\n\t\t\t\t\t$value = '';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'timezone_string':\n\t\t\t$allowed_zones = timezone_identifiers_list();\n\t\t\tif ( ! in_array( $value, $allowed_zones ) && ! empty( $value ) ) {\n\t\t\t\t$error = __( 'The timezone you have entered is not valid. Please select a valid timezone.' );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'permalink_structure':\n\t\tcase 'category_base':\n\t\tcase 'tag_base':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t$value = str_replace( 'http://', '', $value );\n\t\t\t}\n\n\t\t\tif ( 'permalink_structure' === $option && '' !== $value && ! preg_match( '/%[^\\/%]+%/', $value ) ) {\n\t\t\t\t$error = sprintf(\n\t\t\t\t\t/* translators: %s: Codex URL */\n\t\t\t\t\t__( 'A structure tag is required when using custom permalinks. <a href=\"%s\">Learn more</a>' ),\n\t\t\t\t\t__( 'https://codex.wordpress.org/Using_Permalinks#Choosing_your_permalink_structure' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'default_role' :\n\t\t\tif ( ! get_role( $value ) && get_role( 'subscriber' ) )\n\t\t\t\t$value = 'subscriber';\n\t\t\tbreak;\n\n\t\tcase 'moderation_keys':\n\t\tcase 'blacklist_keys':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = explode( \"\\n\", $value );\n\t\t\t\t$value = array_filter( array_map( 'trim', $value ) );\n\t\t\t\t$value = array_unique( $value );\n\t\t\t\t$value = implode( \"\\n\", $value );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif ( ! empty( $error ) ) {\n\t\t$value = get_option( $option );\n\t\tif ( function_exists( 'add_settings_error' ) ) {\n\t\t\tadd_settings_error( $option, \"invalid_{$option}\", $error );\n\t\t}\n\t}\n\n\t/**\n\t * Filters an option value following sanitization.\n\t *\n\t * @since 2.3.0\n\t * @since 4.3.0 Added the `$original_value` parameter.\n\t *\n\t * @param string $value          The sanitized option value.\n\t * @param string $option         The option name.\n\t * @param string $original_value The original value passed to the function.\n\t */\n\treturn apply_filters( \"sanitize_option_{$option}\", $value, $option, $original_value );\n}\n\n/**\n * Maps a function to all non-iterable elements of an array or an object.\n *\n * This is similar to `array_walk_recursive()` but acts upon objects too.\n *\n * @since 4.4.0\n *\n * @param mixed    $value    The array, object, or scalar.\n * @param callable $callback The function to map onto $value.\n * @return mixed The value with the callback applied to all non-arrays and non-objects inside it.\n */\nfunction map_deep( $value, $callback ) {\n\tif ( is_array( $value ) ) {\n\t\tforeach ( $value as $index => $item ) {\n\t\t\t$value[ $index ] = map_deep( $item, $callback );\n\t\t}\n\t} elseif ( is_object( $value ) ) {\n\t\t$object_vars = get_object_vars( $value );\n\t\tforeach ( $object_vars as $property_name => $property_value ) {\n\t\t\t$value->$property_name = map_deep( $property_value, $callback );\n\t\t}\n\t} else {\n\t\t$value = call_user_func( $callback, $value );\n\t}\n\n\treturn $value;\n}\n\n/**\n * Parses a string into variables to be stored in an array.\n *\n * Uses {@link https://secure.php.net/parse_str parse_str()} and stripslashes if\n * {@link https://secure.php.net/magic_quotes magic_quotes_gpc} is on.\n *\n * @since 2.2.1\n *\n * @param string $string The string to be parsed.\n * @param array  $array  Variables will be stored in this array.\n */\nfunction wp_parse_str( $string, &$array ) {\n\tparse_str( $string, $array );\n\tif ( get_magic_quotes_gpc() )\n\t\t$array = stripslashes_deep( $array );\n\t/**\n\t * Filters the array of variables derived from a parsed string.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param array $array The array populated with variables.\n\t */\n\t$array = apply_filters( 'wp_parse_str', $array );\n}\n\n/**\n * Convert lone less than signs.\n *\n * KSES already converts lone greater than signs.\n *\n * @since 2.3.0\n *\n * @param string $text Text to be converted.\n * @return string Converted text.\n */\nfunction wp_pre_kses_less_than( $text ) {\n\treturn preg_replace_callback('%<[^>]*?((?=<)|>|$)%', 'wp_pre_kses_less_than_callback', $text);\n}\n\n/**\n * Callback function used by preg_replace.\n *\n * @since 2.3.0\n *\n * @param array $matches Populated by matches to preg_replace.\n * @return string The text returned after esc_html if needed.\n */\nfunction wp_pre_kses_less_than_callback( $matches ) {\n\tif ( false === strpos($matches[0], '>') )\n\t\treturn esc_html($matches[0]);\n\treturn $matches[0];\n}\n\n/**\n * WordPress implementation of PHP sprintf() with filters.\n *\n * @since 2.5.0\n * @link https://secure.php.net/sprintf\n *\n * @param string $pattern   The string which formatted args are inserted.\n * @param mixed  $args ,... Arguments to be formatted into the $pattern string.\n * @return string The formatted string.\n */\nfunction wp_sprintf( $pattern ) {\n\t$args = func_get_args();\n\t$len = strlen($pattern);\n\t$start = 0;\n\t$result = '';\n\t$arg_index = 0;\n\twhile ( $len > $start ) {\n\t\t// Last character: append and break\n\t\tif ( strlen($pattern) - 1 == $start ) {\n\t\t\t$result .= substr($pattern, -1);\n\t\t\tbreak;\n\t\t}\n\n\t\t// Literal %: append and continue\n\t\tif ( substr($pattern, $start, 2) == '%%' ) {\n\t\t\t$start += 2;\n\t\t\t$result .= '%';\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Get fragment before next %\n\t\t$end = strpos($pattern, '%', $start + 1);\n\t\tif ( false === $end )\n\t\t\t$end = $len;\n\t\t$fragment = substr($pattern, $start, $end - $start);\n\n\t\t// Fragment has a specifier\n\t\tif ( $pattern[$start] == '%' ) {\n\t\t\t// Find numbered arguments or take the next one in order\n\t\t\tif ( preg_match('/^%(\\d+)\\$/', $fragment, $matches) ) {\n\t\t\t\t$arg = isset($args[$matches[1]]) ? $args[$matches[1]] : '';\n\t\t\t\t$fragment = str_replace(\"%{$matches[1]}$\", '%', $fragment);\n\t\t\t} else {\n\t\t\t\t++$arg_index;\n\t\t\t\t$arg = isset($args[$arg_index]) ? $args[$arg_index] : '';\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Filters a fragment from the pattern passed to wp_sprintf().\n\t\t\t *\n\t\t\t * If the fragment is unchanged, then sprintf() will be run on the fragment.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $fragment A fragment from the pattern.\n\t\t\t * @param string $arg      The argument.\n\t\t\t */\n\t\t\t$_fragment = apply_filters( 'wp_sprintf', $fragment, $arg );\n\t\t\tif ( $_fragment != $fragment )\n\t\t\t\t$fragment = $_fragment;\n\t\t\telse\n\t\t\t\t$fragment = sprintf($fragment, strval($arg) );\n\t\t}\n\n\t\t// Append to result and move to next fragment\n\t\t$result .= $fragment;\n\t\t$start = $end;\n\t}\n\treturn $result;\n}\n\n/**\n * Localize list items before the rest of the content.\n *\n * The '%l' must be at the first characters can then contain the rest of the\n * content. The list items will have ', ', ', and', and ' and ' added depending\n * on the amount of list items in the $args parameter.\n *\n * @since 2.5.0\n *\n * @param string $pattern Content containing '%l' at the beginning.\n * @param array  $args    List items to prepend to the content and replace '%l'.\n * @return string Localized list items and rest of the content.\n */\nfunction wp_sprintf_l( $pattern, $args ) {\n\t// Not a match\n\tif ( substr($pattern, 0, 2) != '%l' )\n\t\treturn $pattern;\n\n\t// Nothing to work with\n\tif ( empty($args) )\n\t\treturn '';\n\n\t/**\n\t * Filters the translated delimiters used by wp_sprintf_l().\n\t * Placeholders (%s) are included to assist translators and then\n\t * removed before the array of strings reaches the filter.\n\t *\n\t * Please note: Ampersands and entities should be avoided here.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param array $delimiters An array of translated delimiters.\n\t */\n\t$l = apply_filters( 'wp_sprintf_l', array(\n\t\t/* translators: used to join items in a list with more than 2 items */\n\t\t'between'          => sprintf( __('%s, %s'), '', '' ),\n\t\t/* translators: used to join last two items in a list with more than 2 times */\n\t\t'between_last_two' => sprintf( __('%s, and %s'), '', '' ),\n\t\t/* translators: used to join items in a list with only 2 items */\n\t\t'between_only_two' => sprintf( __('%s and %s'), '', '' ),\n\t) );\n\n\t$args = (array) $args;\n\t$result = array_shift($args);\n\tif ( count($args) == 1 )\n\t\t$result .= $l['between_only_two'] . array_shift($args);\n\t// Loop when more than two args\n\t$i = count($args);\n\twhile ( $i ) {\n\t\t$arg = array_shift($args);\n\t\t$i--;\n\t\tif ( 0 == $i )\n\t\t\t$result .= $l['between_last_two'] . $arg;\n\t\telse\n\t\t\t$result .= $l['between'] . $arg;\n\t}\n\treturn $result . substr($pattern, 2);\n}\n\n/**\n * Safely extracts not more than the first $count characters from html string.\n *\n * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT*\n * be counted as one character. For example &amp; will be counted as 4, &lt; as\n * 3, etc.\n *\n * @since 2.5.0\n *\n * @param string $str   String to get the excerpt from.\n * @param int    $count Maximum number of characters to take.\n * @param string $more  Optional. What to append if $str needs to be trimmed. Defaults to empty string.\n * @return string The excerpt.\n */\nfunction wp_html_excerpt( $str, $count, $more = null ) {\n\tif ( null === $more )\n\t\t$more = '';\n\t$str = wp_strip_all_tags( $str, true );\n\t$excerpt = mb_substr( $str, 0, $count );\n\t// remove part of an entity at the end\n\t$excerpt = preg_replace( '/&[^;\\s]{0,6}$/', '', $excerpt );\n\tif ( $str != $excerpt )\n\t\t$excerpt = trim( $excerpt ) . $more;\n\treturn $excerpt;\n}\n\n/**\n * Add a Base url to relative links in passed content.\n *\n * By default it supports the 'src' and 'href' attributes. However this can be\n * changed via the 3rd param.\n *\n * @since 2.7.0\n *\n * @global string $_links_add_base\n *\n * @param string $content String to search for links in.\n * @param string $base    The base URL to prefix to links.\n * @param array  $attrs   The attributes which should be processed.\n * @return string The processed content.\n */\nfunction links_add_base_url( $content, $base, $attrs = array('src', 'href') ) {\n\tglobal $_links_add_base;\n\t$_links_add_base = $base;\n\t$attrs = implode('|', (array)$attrs);\n\treturn preg_replace_callback( \"!($attrs)=(['\\\"])(.+?)\\\\2!i\", '_links_add_base', $content );\n}\n\n/**\n * Callback to add a base url to relative links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @global string $_links_add_base\n *\n * @param string $m The matched link.\n * @return string The processed link.\n */\nfunction _links_add_base( $m ) {\n\tglobal $_links_add_base;\n\t//1 = attribute name  2 = quotation mark  3 = URL\n\treturn $m[1] . '=' . $m[2] .\n\t\t( preg_match( '#^(\\w{1,20}):#', $m[3], $protocol ) && in_array( $protocol[1], wp_allowed_protocols() ) ?\n\t\t\t$m[3] :\n\t\t\tWP_Http::make_absolute_url( $m[3], $_links_add_base )\n\t\t)\n\t\t. $m[2];\n}\n\n/**\n * Adds a Target attribute to all links in passed content.\n *\n * This function by default only applies to `<a>` tags, however this can be\n * modified by the 3rd param.\n *\n * *NOTE:* Any current target attributed will be stripped and replaced.\n *\n * @since 2.7.0\n *\n * @global string $_links_add_target\n *\n * @param string $content String to search for links in.\n * @param string $target  The Target to add to the links.\n * @param array  $tags    An array of tags to apply to.\n * @return string The processed content.\n */\nfunction links_add_target( $content, $target = '_blank', $tags = array('a') ) {\n\tglobal $_links_add_target;\n\t$_links_add_target = $target;\n\t$tags = implode('|', (array)$tags);\n\treturn preg_replace_callback( \"!<($tags)([^>]*)>!i\", '_links_add_target', $content );\n}\n\n/**\n * Callback to add a target attribute to all links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @global string $_links_add_target\n *\n * @param string $m The matched link.\n * @return string The processed link.\n */\nfunction _links_add_target( $m ) {\n\tglobal $_links_add_target;\n\t$tag = $m[1];\n\t$link = preg_replace('|( target=([\\'\"])(.*?)\\2)|i', '', $m[2]);\n\treturn '<' . $tag . $link . ' target=\"' . esc_attr( $_links_add_target ) . '\">';\n}\n\n/**\n * Normalize EOL characters and strip duplicate whitespace.\n *\n * @since 2.7.0\n *\n * @param string $str The string to normalize.\n * @return string The normalized string.\n */\nfunction normalize_whitespace( $str ) {\n\t$str  = trim( $str );\n\t$str  = str_replace( \"\\r\", \"\\n\", $str );\n\t$str  = preg_replace( array( '/\\n+/', '/[ \\t]+/' ), array( \"\\n\", ' ' ), $str );\n\treturn $str;\n}\n\n/**\n * Properly strip all HTML tags including script and style\n *\n * This differs from strip_tags() because it removes the contents of\n * the `<script>` and `<style>` tags. E.g. `strip_tags( '<script>something</script>' )`\n * will return 'something'. wp_strip_all_tags will return ''\n *\n * @since 2.9.0\n *\n * @param string $string        String containing HTML tags\n * @param bool   $remove_breaks Optional. Whether to remove left over line breaks and white space chars\n * @return string The processed string.\n */\nfunction wp_strip_all_tags($string, $remove_breaks = false) {\n\t$string = preg_replace( '@<(script|style)[^>]*?>.*?</\\\\1>@si', '', $string );\n\t$string = strip_tags($string);\n\n\tif ( $remove_breaks )\n\t\t$string = preg_replace('/[\\r\\n\\t ]+/', ' ', $string);\n\n\treturn trim( $string );\n}\n\n/**\n * Sanitizes a string from user input or from the database.\n *\n * - Checks for invalid UTF-8,\n * - Converts single `<` characters to entities\n * - Strips all tags\n * - Removes line breaks, tabs, and extra whitespace\n * - Strips octets\n *\n * @since 2.9.0\n *\n * @see sanitize_textarea_field()\n * @see wp_check_invalid_utf8()\n * @see wp_strip_all_tags()\n *\n * @param string $str String to sanitize.\n * @return string Sanitized string.\n */\nfunction sanitize_text_field( $str ) {\n\t$filtered = _sanitize_text_fields( $str, false );\n\n\t/**\n\t * Filters a sanitized text field string.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $filtered The sanitized string.\n\t * @param string $str      The string prior to being sanitized.\n\t */\n\treturn apply_filters( 'sanitize_text_field', $filtered, $str );\n}\n\n/**\n * Sanitizes a multiline string from user input or from the database.\n *\n * The function is like sanitize_text_field(), but preserves\n * new lines (\\n) and other whitespace, which are legitimate\n * input in textarea elements.\n *\n * @see sanitize_text_field()\n *\n * @since 4.7.0\n *\n * @param string $str String to sanitize.\n * @return string Sanitized string.\n */\nfunction sanitize_textarea_field( $str ) {\n\t$filtered = _sanitize_text_fields( $str, true );\n\n\t/**\n\t * Filters a sanitized textarea field string.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param string $filtered The sanitized string.\n\t * @param string $str      The string prior to being sanitized.\n\t */\n\treturn apply_filters( 'sanitize_textarea_field', $filtered, $str );\n}\n\n/**\n * Internal helper function to sanitize a string from user input or from the db\n *\n * @since 4.7.0\n * @access private\n *\n * @param string $str String to sanitize.\n * @param bool $keep_newlines optional Whether to keep newlines. Default: false.\n * @return string Sanitized string.\n */\nfunction _sanitize_text_fields( $str, $keep_newlines = false ) {\n\t$filtered = wp_check_invalid_utf8( $str );\n\n\tif ( strpos($filtered, '<') !== false ) {\n\t\t$filtered = wp_pre_kses_less_than( $filtered );\n\t\t// This will strip extra whitespace for us.\n\t\t$filtered = wp_strip_all_tags( $filtered, false );\n\n\t\t// Use html entities in a special case to make sure no later\n\t\t// newline stripping stage could lead to a functional tag\n\t\t$filtered = str_replace(\"<\\n\", \"&lt;\\n\", $filtered);\n\t}\n\n\tif ( ! $keep_newlines ) {\n\t\t$filtered = preg_replace( '/[\\r\\n\\t ]+/', ' ', $filtered );\n\t}\n\t$filtered = trim( $filtered );\n\n\t$found = false;\n\twhile ( preg_match('/%[a-f0-9]{2}/i', $filtered, $match) ) {\n\t\t$filtered = str_replace($match[0], '', $filtered);\n\t\t$found = true;\n\t}\n\n\tif ( $found ) {\n\t\t// Strip out the whitespace that may now exist after removing the octets.\n\t\t$filtered = trim( preg_replace('/ +/', ' ', $filtered) );\n\t}\n\n\treturn $filtered;\n}\n\n/**\n * i18n friendly version of basename()\n *\n * @since 3.1.0\n *\n * @param string $path   A path.\n * @param string $suffix If the filename ends in suffix this will also be cut off.\n * @return string\n */\nfunction wp_basename( $path, $suffix = '' ) {\n\treturn urldecode( basename( str_replace( array( '%2F', '%5C' ), '/', urlencode( $path ) ), $suffix ) );\n}\n\n/**\n * Forever eliminate \"Wordpress\" from the planet (or at least the little bit we can influence).\n *\n * Violating our coding standards for a good function name.\n *\n * @since 3.0.0\n *\n * @staticvar string|false $dblq\n *\n * @param string $text The text to be modified.\n * @return string The modified text.\n */\nfunction capital_P_dangit( $text ) {\n\t// Simple replacement for titles\n\t$current_filter = current_filter();\n\tif ( 'the_title' === $current_filter || 'wp_title' === $current_filter )\n\t\treturn str_replace( 'Wordpress', 'WordPress', $text );\n\t// Still here? Use the more judicious replacement\n\tstatic $dblq = false;\n\tif ( false === $dblq ) {\n\t\t$dblq = _x( '&#8220;', 'opening curly double quote' );\n\t}\n\treturn str_replace(\n\t\tarray( ' Wordpress', '&#8216;Wordpress', $dblq . 'Wordpress', '>Wordpress', '(Wordpress' ),\n\t\tarray( ' WordPress', '&#8216;WordPress', $dblq . 'WordPress', '>WordPress', '(WordPress' ),\n\t$text );\n}\n\n/**\n * Sanitize a mime type\n *\n * @since 3.1.3\n *\n * @param string $mime_type Mime type\n * @return string Sanitized mime type\n */\nfunction sanitize_mime_type( $mime_type ) {\n\t$sani_mime_type = preg_replace( '/[^-+*.a-zA-Z0-9\\/]/', '', $mime_type );\n\t/**\n\t * Filters a mime type following sanitization.\n\t *\n\t * @since 3.1.3\n\t *\n\t * @param string $sani_mime_type The sanitized mime type.\n\t * @param string $mime_type      The mime type prior to sanitization.\n\t */\n\treturn apply_filters( 'sanitize_mime_type', $sani_mime_type, $mime_type );\n}\n\n/**\n * Sanitize space or carriage return separated URLs that are used to send trackbacks.\n *\n * @since 3.4.0\n *\n * @param string $to_ping Space or carriage return separated URLs\n * @return string URLs starting with the http or https protocol, separated by a carriage return.\n */\nfunction sanitize_trackback_urls( $to_ping ) {\n\t$urls_to_ping = preg_split( '/[\\r\\n\\t ]/', trim( $to_ping ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach ( $urls_to_ping as $k => $url ) {\n\t\tif ( !preg_match( '#^https?://.#i', $url ) )\n\t\t\tunset( $urls_to_ping[$k] );\n\t}\n\t$urls_to_ping = array_map( 'esc_url_raw', $urls_to_ping );\n\t$urls_to_ping = implode( \"\\n\", $urls_to_ping );\n\t/**\n\t * Filters a list of trackback URLs following sanitization.\n\t *\n\t * The string returned here consists of a space or carriage return-delimited list\n\t * of trackback URLs.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $urls_to_ping Sanitized space or carriage return separated URLs.\n\t * @param string $to_ping      Space or carriage return separated URLs before sanitization.\n\t */\n\treturn apply_filters( 'sanitize_trackback_urls', $urls_to_ping, $to_ping );\n}\n\n/**\n * Add slashes to a string or array of strings.\n *\n * This should be used when preparing data for core API that expects slashed data.\n * This should not be used to escape data going directly into an SQL query.\n *\n * @since 3.6.0\n *\n * @param string|array $value String or array of strings to slash.\n * @return string|array Slashed $value\n */\nfunction wp_slash( $value ) {\n\tif ( is_array( $value ) ) {\n\t\tforeach ( $value as $k => $v ) {\n\t\t\tif ( is_array( $v ) ) {\n\t\t\t\t$value[$k] = wp_slash( $v );\n\t\t\t} else {\n\t\t\t\t$value[$k] = addslashes( $v );\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$value = addslashes( $value );\n\t}\n\n\treturn $value;\n}\n\n/**\n * Remove slashes from a string or array of strings.\n *\n * This should be used to remove slashes from data passed to core API that\n * expects data to be unslashed.\n *\n * @since 3.6.0\n *\n * @param string|array $value String or array of strings to unslash.\n * @return string|array Unslashed $value\n */\nfunction wp_unslash( $value ) {\n\treturn stripslashes_deep( $value );\n}\n\n/**\n * Extract and return the first URL from passed content.\n *\n * @since 3.6.0\n *\n * @param string $content A string which might contain a URL.\n * @return string|false The found URL.\n */\nfunction get_url_in_content( $content ) {\n\tif ( empty( $content ) ) {\n\t\treturn false;\n\t}\n\n\tif ( preg_match( '/<a\\s[^>]*?href=([\\'\"])(.+?)\\1/is', $content, $matches ) ) {\n\t\treturn esc_url_raw( $matches[2] );\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns the regexp for common whitespace characters.\n *\n * By default, spaces include new lines, tabs, nbsp entities, and the UTF-8 nbsp.\n * This is designed to replace the PCRE \\s sequence.  In ticket #22692, that\n * sequence was found to be unreliable due to random inclusion of the A0 byte.\n *\n * @since 4.0.0\n *\n * @staticvar string $spaces\n *\n * @return string The spaces regexp.\n */\nfunction wp_spaces_regexp() {\n\tstatic $spaces = '';\n\n\tif ( empty( $spaces ) ) {\n\t\t/**\n\t\t * Filters the regexp for common whitespace characters.\n\t\t *\n\t\t * This string is substituted for the \\s sequence as needed in regular\n\t\t * expressions. For websites not written in English, different characters\n\t\t * may represent whitespace. For websites not encoded in UTF-8, the 0xC2 0xA0\n\t\t * sequence may not be in use.\n\t\t *\n\t\t * @since 4.0.0\n\t\t *\n\t\t * @param string $spaces Regexp pattern for matching common whitespace characters.\n\t\t */\n\t\t$spaces = apply_filters( 'wp_spaces_regexp', '[\\r\\n\\t ]|\\xC2\\xA0|&nbsp;' );\n\t}\n\n\treturn $spaces;\n}\n\n/**\n * Print the important emoji-related styles.\n *\n * @since 4.2.0\n *\n * @staticvar bool $printed\n */\nfunction print_emoji_styles() {\n\tstatic $printed = false;\n\n\tif ( $printed ) {\n\t\treturn;\n\t}\n\n\t$printed = true;\n?>\n<style type=\"text/css\">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<?php\n}\n\n/**\n * Print the inline Emoji detection script if it is not already printed.\n *\n * @since 4.2.0\n * @staticvar bool $printed\n */\nfunction print_emoji_detection_script() {\n\tstatic $printed = false;\n\n\tif ( $printed ) {\n\t\treturn;\n\t}\n\n\t$printed = true;\n\n\t_print_emoji_detection_script();\n}\n\n/**\n * Prints inline Emoji dection script\n *\n * @ignore\n * @since 4.6.0\n * @access private\n */\nfunction _print_emoji_detection_script() {\n\t$settings = array(\n\t\t/**\n\t\t * Filters the URL where emoji png images are hosted.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string The emoji base URL for png images.\n\t\t */\n\t\t'baseUrl' => apply_filters( 'emoji_url', 'https://s.w.org/images/core/emoji/2.3/72x72/' ),\n\n\t\t/**\n\t\t * Filters the extension of the emoji png files.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string The emoji extension for png files. Default .png.\n\t\t */\n\t\t'ext' => apply_filters( 'emoji_ext', '.png' ),\n\n\t\t/**\n\t\t * Filters the URL where emoji SVG images are hosted.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param string The emoji base URL for svg images.\n\t\t */\n\t\t'svgUrl' => apply_filters( 'emoji_svg_url', 'https://s.w.org/images/core/emoji/2.3/svg/' ),\n\n\t\t/**\n\t\t * Filters the extension of the emoji SVG files.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param string The emoji extension for svg files. Default .svg.\n\t\t */\n\t\t'svgExt' => apply_filters( 'emoji_svg_ext', '.svg' ),\n\t);\n\n\t$version = 'ver=' . get_bloginfo( 'version' );\n\n\tif ( SCRIPT_DEBUG ) {\n\t\t$settings['source'] = array(\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'wpemoji' => apply_filters( 'script_loader_src', includes_url( \"js/wp-emoji.js?$version\" ), 'wpemoji' ),\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'twemoji' => apply_filters( 'script_loader_src', includes_url( \"js/twemoji.js?$version\" ), 'twemoji' ),\n\t\t);\n\n\t\t?>\n\t\t<script type=\"text/javascript\">\n\t\t\twindow._wpemojiSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\t<?php readfile( ABSPATH . WPINC . \"/js/wp-emoji-loader.js\" ); ?>\n\t\t</script>\n\t\t<?php\n\t} else {\n\t\t$settings['source'] = array(\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'concatemoji' => apply_filters( 'script_loader_src', includes_url( \"js/wp-emoji-release.min.js?$version\" ), 'concatemoji' ),\n\t\t);\n\n\t\t/*\n\t\t * If you're looking at a src version of this file, you'll see an \"include\"\n\t\t * statement below. This is used by the `grunt build` process to directly\n\t\t * include a minified version of wp-emoji-loader.js, instead of using the\n\t\t * readfile() method from above.\n\t\t *\n\t\t * If you're looking at a build version of this file, you'll see a string of\n\t\t * minified JavaScript. If you need to debug it, please turn on SCRIPT_DEBUG\n\t\t * and edit wp-emoji-loader.js directly.\n\t\t */\n\t\t?>\n\t\t<script type=\"text/javascript\">\n\t\t\twindow._wpemojiSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\t!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline=\"top\",l.font=\"600 32px Arial\",a){case\"flag\":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case\"emoji\":return b=d([55358,56794,8205,9794,65039],[55358,56794,8203,9794,65039]),!b}return!1}function f(a){var c=b.createElement(\"script\");c.src=a,c.defer=c.type=\"text/javascript\",b.getElementsByTagName(\"head\")[0].appendChild(c)}var g,h,i,j,k=b.createElement(\"canvas\"),l=k.getContext&&k.getContext(\"2d\");for(j=Array(\"flag\",\"emoji\"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],\"flag\"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener(\"DOMContentLoaded\",h,!1),a.addEventListener(\"load\",h,!1)):(a.attachEvent(\"onload\",h),b.attachEvent(\"onreadystatechange\",function(){\"complete\"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<?php\n\t}\n}\n\n/**\n * Convert emoji characters to their equivalent HTML entity.\n *\n * This allows us to store emoji in a DB using the utf8 character set.\n *\n * @since 4.2.0\n *\n * @param string $content The content to encode.\n * @return string The encoded content.\n */\nfunction wp_encode_emoji( $content ) {\n\t$emoji = _wp_emoji_list( 'partials' );\n\n\tforeach ( $emoji as $emojum ) {\n\t\tif ( version_compare( phpversion(), '5.4', '<' ) ) {\n\t\t\t$emoji_char = html_entity_decode( $emojum, ENT_COMPAT, 'UTF-8' );\n\t\t} else {\n\t\t\t$emoji_char = html_entity_decode( $emojum );\n\t\t}\n\t\tif ( false !== strpos( $content, $emoji_char ) ) {\n\t\t\t$content = preg_replace( \"/$emoji_char/\", $emojum, $content );\n\t\t}\n\t}\n\n\treturn $content;\n}\n\n/**\n * Convert emoji to a static img element.\n *\n * @since 4.2.0\n *\n * @param string $text The content to encode.\n * @return string The encoded content.\n */\nfunction wp_staticize_emoji( $text ) {\n\tif ( false === strpos( $text, '&#x' ) ) {\n\t\tif ( ( function_exists( 'mb_check_encoding' ) && mb_check_encoding( $text, 'ASCII' ) ) || ! preg_match( '/[^\\x00-\\x7F]/', $text ) ) {\n\t\t\t// The text doesn't contain anything that might be emoji, so we can return early.\n\t\t\treturn $text;\n\t\t} else {\n\t\t\t$encoded_text = wp_encode_emoji( $text );\n\t\t\tif ( $encoded_text === $text ) {\n\t\t\t\treturn $encoded_text;\n\t\t\t}\n\n\t\t\t$text = $encoded_text;\n\t\t}\n\t}\n\n\t$emoji = _wp_emoji_list( 'entities' );\n\n\t// Quickly narrow down the list of emoji that might be in the text and need replacing.\n\t$possible_emoji = array();\n\tforeach( $emoji as $emojum ) {\n\t\tif ( false !== strpos( $text, $emojum ) ) {\n\t\t\tif ( version_compare( phpversion(), '5.4', '<' ) ) {\n\t\t\t\t$possible_emoji[ $emojum ] = html_entity_decode( $emojum, ENT_COMPAT, 'UTF-8' );\n\t\t\t} else {\n\t\t\t\t$possible_emoji[ $emojum ] = html_entity_decode( $emojum );\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! $possible_emoji ) {\n\t\treturn $text;\n\t}\n\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$cdn_url = apply_filters( 'emoji_url', 'https://s.w.org/images/core/emoji/2.3/72x72/' );\n\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$ext = apply_filters( 'emoji_ext', '.png' );\n\n\t$output = '';\n\t/*\n\t * HTML loop taken from smiley function, which was taken from texturize function.\n\t * It'll never be consolidated.\n\t *\n\t * First, capture the tags as well as in between.\n\t */\n\t$textarr = preg_split( '/(<.*>)/U', $text, -1, PREG_SPLIT_DELIM_CAPTURE );\n\t$stop = count( $textarr );\n\n\t// Ignore processing of specific tags.\n\t$tags_to_ignore = 'code|pre|style|script|textarea';\n\t$ignore_block_element = '';\n\n\tfor ( $i = 0; $i < $stop; $i++ ) {\n\t\t$content = $textarr[$i];\n\n\t\t// If we're in an ignore block, wait until we find its closing tag.\n\t\tif ( '' == $ignore_block_element && preg_match( '/^<(' . $tags_to_ignore . ')>/', $content, $matches ) )  {\n\t\t\t$ignore_block_element = $matches[1];\n\t\t}\n\n\t\t// If it's not a tag and not in ignore block.\n\t\tif ( '' ==  $ignore_block_element && strlen( $content ) > 0 && '<' != $content[0] && false !== strpos( $content, '&#x' ) ) {\n\t\t\tforeach ( $possible_emoji as $emojum => $emoji_char ) {\n\t\t\t\tif ( false === strpos( $content, $emojum ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$file = str_replace( ';&#x', '-', $emojum );\n\t\t\t\t$file = str_replace( array( '&#x', ';'), '', $file );\n\n\t\t\t\t$entity = sprintf( '<img src=\"%s\" alt=\"%s\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />', $cdn_url . $file . $ext, $emoji_char );\n\n\t\t\t\t$content = str_replace( $emojum, $entity, $content );\n\t\t\t}\n\t\t}\n\n\t\t// Did we exit ignore block.\n\t\tif ( '' != $ignore_block_element && '</' . $ignore_block_element . '>' == $content )  {\n\t\t\t$ignore_block_element = '';\n\t\t}\n\n\t\t$output .= $content;\n\t}\n\n\t// Finally, remove any stray U+FE0F characters\n\t$output = str_replace( '&#xfe0f;', '', $output );\n\n\treturn $output;\n}\n\n/**\n * Convert emoji in emails into static images.\n *\n * @since 4.2.0\n *\n * @param array $mail The email data array.\n * @return array The email data array, with emoji in the message staticized.\n */\nfunction wp_staticize_emoji_for_email( $mail ) {\n\tif ( ! isset( $mail['message'] ) ) {\n\t\treturn $mail;\n\t}\n\n\t/*\n\t * We can only transform the emoji into images if it's a text/html email.\n\t * To do that, here's a cut down version of the same process that happens\n\t * in wp_mail() - get the Content-Type from the headers, if there is one,\n\t * then pass it through the wp_mail_content_type filter, in case a plugin\n\t * is handling changing the Content-Type.\n\t */\n\t$headers = array();\n\tif ( isset( $mail['headers'] ) ) {\n\t\tif ( is_array( $mail['headers'] ) ) {\n\t\t\t$headers = $mail['headers'];\n\t\t} else {\n\t\t\t$headers = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $mail['headers'] ) );\n\t\t}\n\t}\n\n\tforeach ( $headers as $header ) {\n\t\tif ( strpos($header, ':') === false ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Explode them out.\n\t\tlist( $name, $content ) = explode( ':', trim( $header ), 2 );\n\n\t\t// Cleanup crew.\n\t\t$name    = trim( $name    );\n\t\t$content = trim( $content );\n\n\t\tif ( 'content-type' === strtolower( $name ) ) {\n\t\t\tif ( strpos( $content, ';' ) !== false ) {\n\t\t\t\tlist( $type, $charset ) = explode( ';', $content );\n\t\t\t\t$content_type = trim( $type );\n\t\t\t} else {\n\t\t\t\t$content_type = trim( $content );\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Set Content-Type if we don't have a content-type from the input headers.\n\tif ( ! isset( $content_type ) ) {\n\t\t$content_type = 'text/plain';\n\t}\n\n\t/** This filter is documented in wp-includes/pluggable.php */\n\t$content_type = apply_filters( 'wp_mail_content_type', $content_type );\n\n\tif ( 'text/html' === $content_type ) {\n\t\t$mail['message'] = wp_staticize_emoji( $mail['message'] );\n\t}\n\n\treturn $mail;\n}\n\n/**\n * Returns a arrays of emoji data.\n *\n * These arrays automatically built from the regex in twemoji.js - if they need to be updated,\n * you should update the regex there, then run the `grunt precommit:emoji` job.\n *\n * @since 4.9.0\n * @access private\n *\n * @param string $type Optional. Which array type to return. Accepts 'partials' or 'entities', default 'entities'.\n * @return array An array to match all emoji that WordPress recognises.\n */\nfunction _wp_emoji_list( $type = 'entities' ) {\n\t// Do not remove the START/END comments - they're used to find where to insert the arrays.\n\n\t// START: emoji arrays\n\t$entities = array('&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f469;','&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f468;','&#x1f468;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f468;','&#x1f3f4;&#xe0067;&#xe0062;&#xe0073;&#xe0063;&#xe0074;&#xe007f;','&#x1f3f4;&#xe0067;&#xe0062;&#xe0077;&#xe006c;&#xe0073;&#xe007f;','&#x1f3f4;&#xe0067;&#xe0062;&#xe0065;&#xe006e;&#xe0067;&#xe007f;','&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f466;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f468;','&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f468;','&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f469;','&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f466;&#x200d;&#x1f466;','&#x1f937;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9dd;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9dd;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9dd;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9dd;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9dc;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9dc;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f468;&#x1f3fb;&#x200d;&#x2695;&#xfe0f;','&#x1f468;&#x1f3fb;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x1f3fb;&#x200d;&#x2708;&#xfe0f;','&#x1f9dc;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9dc;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9dc;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9db;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9db;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9db;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f468;&#x1f3fc;&#x200d;&#x2695;&#xfe0f;','&#x1f468;&#x1f3fc;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x1f3fc;&#x200d;&#x2708;&#xfe0f;','&#x1f9db;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9db;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f468;&#x1f3fd;&#x200d;&#x2695;&#xfe0f;','&#x1f468;&#x1f3fd;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x1f3fd;&#x200d;&#x2708;&#xfe0f;','&#x1f9d9;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9d9;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9d9;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9d9;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9d9;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9d9;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9d8;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f468;&#x1f3fe;&#x200d;&#x2695;&#xfe0f;','&#x1f468;&#x1f3fe;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x1f3fe;&#x200d;&#x2708;&#xfe0f;','&#x1f9d8;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9d8;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9d8;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9d8;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9d7;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9d7;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9d7;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f9d7;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9d7;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f9d7;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f468;&#x1f3ff;&#x200d;&#x2695;&#xfe0f;','&#x1f468;&#x1f3ff;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x1f3ff;&#x200d;&#x2708;&#xfe0f;','&#x1f9d7;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9d7;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9d7;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9d7;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f9d6;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3c3;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3c3;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3c3;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3c3;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f9d6;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f9d6;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f93e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f93e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f93e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f93e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f93e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f93d;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f93d;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f93d;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f469;&#x1f3fb;&#x200d;&#x2695;&#xfe0f;','&#x1f469;&#x1f3fb;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x1f3fb;&#x200d;&#x2708;&#xfe0f;','&#x1f93d;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f93d;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f469;&#x1f3fc;&#x200d;&#x2695;&#xfe0f;','&#x1f469;&#x1f3fc;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x1f3fc;&#x200d;&#x2708;&#xfe0f;','&#x1f938;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f938;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f938;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f938;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f938;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f937;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f937;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f937;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f469;&#x1f3fd;&#x200d;&#x2695;&#xfe0f;','&#x1f469;&#x1f3fd;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x1f3fd;&#x200d;&#x2708;&#xfe0f;','&#x1f937;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f937;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f937;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f937;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f937;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f937;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f926;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f926;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f926;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f469;&#x1f3fe;&#x200d;&#x2695;&#xfe0f;','&#x1f469;&#x1f3fe;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x1f3fe;&#x200d;&#x2708;&#xfe0f;','&#x1f926;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f926;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6b6;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f6b6;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f6b6;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f6b6;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f469;&#x1f3ff;&#x200d;&#x2695;&#xfe0f;','&#x1f469;&#x1f3ff;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x1f3ff;&#x200d;&#x2708;&#xfe0f;','&#x1f6b6;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f6b5;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f3cb;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f46e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f46e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f46e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f46e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f3c3;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f575;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f575;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f575;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f575;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f575;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f647;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f647;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f647;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f647;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f647;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f64d;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f64b;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f64b;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f64b;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f64b;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f64b;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x1f64d;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x1f64d;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f64d;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x1f64d;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#xfe0f;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;','&#x1f3cc;&#xfe0f;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#xfe0f;&#x200d;&#x2640;&#xfe0f;','&#x1f575;&#xfe0f;&#x200d;&#x2642;&#xfe0f;','&#x1f3cc;&#xfe0f;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;','&#x26f9;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;','&#x26f9;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;','&#x26f9;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;','&#x1f3cb;&#xfe0f;&#x200d;&#x2640;&#xfe0f;','&#x26f9;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#xfe0f;&#x200d;&#x2642;&#xfe0f;','&#x26f9;&#xfe0f;&#x200d;&#x2640;&#xfe0f;','&#x1f468;&#x1f3fc;&#x200d;&#x1f33e;','&#x1f469;&#x1f3ff;&#x200d;&#x1f692;','&#x1f469;&#x1f3ff;&#x200d;&#x1f680;','&#x1f469;&#x1f3ff;&#x200d;&#x1f52c;','&#x1f469;&#x1f3ff;&#x200d;&#x1f527;','&#x1f469;&#x1f3ff;&#x200d;&#x1f4bc;','&#x1f469;&#x1f3ff;&#x200d;&#x1f4bb;','&#x1f469;&#x1f3ff;&#x200d;&#x1f3ed;','&#x1f469;&#x1f3ff;&#x200d;&#x1f3eb;','&#x1f469;&#x1f3ff;&#x200d;&#x1f3a8;','&#x1f469;&#x1f3ff;&#x200d;&#x1f3a4;','&#x1f469;&#x1f3ff;&#x200d;&#x1f393;','&#x1f469;&#x1f3ff;&#x200d;&#x1f373;','&#x1f469;&#x1f3ff;&#x200d;&#x1f33e;','&#x1f469;&#x1f3fe;&#x200d;&#x1f692;','&#x1f469;&#x1f3fe;&#x200d;&#x1f680;','&#x1f469;&#x1f3fe;&#x200d;&#x1f52c;','&#x1f469;&#x1f3fe;&#x200d;&#x1f527;','&#x1f469;&#x1f3fe;&#x200d;&#x1f4bc;','&#x1f469;&#x1f3fe;&#x200d;&#x1f4bb;','&#x1f469;&#x1f3fe;&#x200d;&#x1f3ed;','&#x1f469;&#x1f3fe;&#x200d;&#x1f3eb;','&#x1f469;&#x1f3fe;&#x200d;&#x1f3a8;','&#x1f469;&#x1f3fe;&#x200d;&#x1f3a4;','&#x1f469;&#x1f3fe;&#x200d;&#x1f393;','&#x1f469;&#x1f3fe;&#x200d;&#x1f373;','&#x1f469;&#x1f3fe;&#x200d;&#x1f33e;','&#x1f469;&#x1f3fd;&#x200d;&#x1f692;','&#x1f469;&#x1f3fd;&#x200d;&#x1f680;','&#x1f469;&#x1f3fd;&#x200d;&#x1f52c;','&#x1f469;&#x1f3fd;&#x200d;&#x1f527;','&#x1f469;&#x1f3fd;&#x200d;&#x1f4bc;','&#x1f469;&#x1f3fd;&#x200d;&#x1f4bb;','&#x1f469;&#x1f3fd;&#x200d;&#x1f3ed;','&#x1f469;&#x1f3fd;&#x200d;&#x1f3eb;','&#x1f469;&#x1f3fd;&#x200d;&#x1f3a8;','&#x1f469;&#x1f3fd;&#x200d;&#x1f3a4;','&#x1f469;&#x1f3fd;&#x200d;&#x1f393;','&#x1f469;&#x1f3fd;&#x200d;&#x1f373;','&#x1f469;&#x1f3fd;&#x200d;&#x1f33e;','&#x1f469;&#x1f3fc;&#x200d;&#x1f692;','&#x1f469;&#x1f3fc;&#x200d;&#x1f680;','&#x1f469;&#x1f3fc;&#x200d;&#x1f52c;','&#x1f469;&#x1f3fc;&#x200d;&#x1f527;','&#x1f469;&#x1f3fc;&#x200d;&#x1f4bc;','&#x1f469;&#x1f3fc;&#x200d;&#x1f4bb;','&#x1f469;&#x1f3fc;&#x200d;&#x1f3ed;','&#x1f469;&#x1f3fc;&#x200d;&#x1f3eb;','&#x1f469;&#x1f3fc;&#x200d;&#x1f3a8;','&#x1f469;&#x1f3fc;&#x200d;&#x1f3a4;','&#x1f469;&#x1f3fc;&#x200d;&#x1f393;','&#x1f469;&#x1f3fc;&#x200d;&#x1f373;','&#x1f469;&#x1f3fc;&#x200d;&#x1f33e;','&#x1f469;&#x1f3fb;&#x200d;&#x1f692;','&#x1f469;&#x1f3fb;&#x200d;&#x1f680;','&#x1f469;&#x1f3fb;&#x200d;&#x1f52c;','&#x1f469;&#x1f3fb;&#x200d;&#x1f527;','&#x1f469;&#x1f3fb;&#x200d;&#x1f4bc;','&#x1f469;&#x1f3fb;&#x200d;&#x1f4bb;','&#x1f469;&#x1f3fb;&#x200d;&#x1f3ed;','&#x1f469;&#x1f3fb;&#x200d;&#x1f3eb;','&#x1f469;&#x1f3fb;&#x200d;&#x1f3a8;','&#x1f469;&#x1f3fb;&#x200d;&#x1f3a4;','&#x1f469;&#x1f3fb;&#x200d;&#x1f393;','&#x1f468;&#x1f3fb;&#x200d;&#x1f692;','&#x1f469;&#x1f3fb;&#x200d;&#x1f33e;','&#x1f468;&#x1f3fb;&#x200d;&#x1f33e;','&#x1f468;&#x1f3fb;&#x200d;&#x1f373;','&#x1f468;&#x1f3fb;&#x200d;&#x1f393;','&#x1f468;&#x1f3fb;&#x200d;&#x1f3a4;','&#x1f468;&#x1f3fb;&#x200d;&#x1f3a8;','&#x1f468;&#x1f3fb;&#x200d;&#x1f3eb;','&#x1f468;&#x1f3fb;&#x200d;&#x1f3ed;','&#x1f468;&#x1f3fb;&#x200d;&#x1f4bb;','&#x1f468;&#x1f3fb;&#x200d;&#x1f4bc;','&#x1f468;&#x1f3fb;&#x200d;&#x1f527;','&#x1f468;&#x1f3fb;&#x200d;&#x1f52c;','&#x1f468;&#x1f3fb;&#x200d;&#x1f680;','&#x1f468;&#x1f3ff;&#x200d;&#x1f692;','&#x1f468;&#x1f3ff;&#x200d;&#x1f680;','&#x1f468;&#x1f3ff;&#x200d;&#x1f52c;','&#x1f468;&#x1f3ff;&#x200d;&#x1f527;','&#x1f468;&#x1f3ff;&#x200d;&#x1f4bc;','&#x1f468;&#x1f3ff;&#x200d;&#x1f4bb;','&#x1f468;&#x1f3ff;&#x200d;&#x1f3ed;','&#x1f468;&#x1f3ff;&#x200d;&#x1f3eb;','&#x1f468;&#x1f3ff;&#x200d;&#x1f3a8;','&#x1f468;&#x1f3ff;&#x200d;&#x1f3a4;','&#x1f468;&#x1f3ff;&#x200d;&#x1f393;','&#x1f468;&#x1f3ff;&#x200d;&#x1f373;','&#x1f468;&#x1f3ff;&#x200d;&#x1f33e;','&#x1f468;&#x1f3fe;&#x200d;&#x1f692;','&#x1f468;&#x1f3fe;&#x200d;&#x1f680;','&#x1f468;&#x1f3fe;&#x200d;&#x1f52c;','&#x1f468;&#x1f3fe;&#x200d;&#x1f527;','&#x1f468;&#x1f3fe;&#x200d;&#x1f4bc;','&#x1f468;&#x1f3fe;&#x200d;&#x1f4bb;','&#x1f468;&#x1f3fe;&#x200d;&#x1f3ed;','&#x1f468;&#x1f3fe;&#x200d;&#x1f3eb;','&#x1f468;&#x1f3fe;&#x200d;&#x1f3a8;','&#x1f468;&#x1f3fe;&#x200d;&#x1f3a4;','&#x1f468;&#x1f3fe;&#x200d;&#x1f393;','&#x1f468;&#x1f3fe;&#x200d;&#x1f373;','&#x1f468;&#x1f3fe;&#x200d;&#x1f33e;','&#x1f468;&#x1f3fd;&#x200d;&#x1f692;','&#x1f468;&#x1f3fd;&#x200d;&#x1f680;','&#x1f468;&#x1f3fd;&#x200d;&#x1f52c;','&#x1f468;&#x1f3fd;&#x200d;&#x1f527;','&#x1f468;&#x1f3fd;&#x200d;&#x1f4bc;','&#x1f468;&#x1f3fd;&#x200d;&#x1f4bb;','&#x1f468;&#x1f3fd;&#x200d;&#x1f3ed;','&#x1f468;&#x1f3fd;&#x200d;&#x1f3eb;','&#x1f468;&#x1f3fd;&#x200d;&#x1f3a8;','&#x1f468;&#x1f3fd;&#x200d;&#x1f3a4;','&#x1f468;&#x1f3fd;&#x200d;&#x1f393;','&#x1f468;&#x1f3fd;&#x200d;&#x1f373;','&#x1f468;&#x1f3fd;&#x200d;&#x1f33e;','&#x1f468;&#x1f3fc;&#x200d;&#x1f692;','&#x1f468;&#x1f3fc;&#x200d;&#x1f680;','&#x1f468;&#x1f3fc;&#x200d;&#x1f52c;','&#x1f468;&#x1f3fc;&#x200d;&#x1f527;','&#x1f468;&#x1f3fc;&#x200d;&#x1f4bc;','&#x1f468;&#x1f3fc;&#x200d;&#x1f4bb;','&#x1f468;&#x1f3fc;&#x200d;&#x1f3ed;','&#x1f468;&#x1f3fc;&#x200d;&#x1f3eb;','&#x1f468;&#x1f3fc;&#x200d;&#x1f3a8;','&#x1f468;&#x1f3fc;&#x200d;&#x1f3a4;','&#x1f468;&#x1f3fc;&#x200d;&#x1f393;','&#x1f468;&#x1f3fc;&#x200d;&#x1f373;','&#x1f469;&#x1f3fb;&#x200d;&#x1f373;','&#x1f3f3;&#xfe0f;&#x200d;&#x1f308;','&#x1f468;&#x200d;&#x2696;&#xfe0f;','&#x1f468;&#x200d;&#x2695;&#xfe0f;','&#x1f9dd;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x200d;&#x2640;&#xfe0f;','&#x1f93e;&#x200d;&#x2642;&#xfe0f;','&#x1f482;&#x200d;&#x2640;&#xfe0f;','&#x1f481;&#x200d;&#x2642;&#xfe0f;','&#x1f481;&#x200d;&#x2640;&#xfe0f;','&#x1f477;&#x200d;&#x2642;&#xfe0f;','&#x1f477;&#x200d;&#x2640;&#xfe0f;','&#x1f473;&#x200d;&#x2642;&#xfe0f;','&#x1f926;&#x200d;&#x2640;&#xfe0f;','&#x1f926;&#x200d;&#x2642;&#xfe0f;','&#x1f473;&#x200d;&#x2640;&#xfe0f;','&#x1f9dc;&#x200d;&#x2642;&#xfe0f;','&#x1f9d6;&#x200d;&#x2640;&#xfe0f;','&#x1f9d6;&#x200d;&#x2642;&#xfe0f;','&#x1f9dc;&#x200d;&#x2640;&#xfe0f;','&#x1f471;&#x200d;&#x2642;&#xfe0f;','&#x1f471;&#x200d;&#x2640;&#xfe0f;','&#x1f46f;&#x200d;&#x2642;&#xfe0f;','&#x1f6a3;&#x200d;&#x2640;&#xfe0f;','&#x1f6a3;&#x200d;&#x2642;&#xfe0f;','&#x1f46f;&#x200d;&#x2640;&#xfe0f;','&#x1f46e;&#x200d;&#x2642;&#xfe0f;','&#x1f46e;&#x200d;&#x2640;&#xfe0f;','&#x1f469;&#x200d;&#x2708;&#xfe0f;','&#x1f9d7;&#x200d;&#x2640;&#xfe0f;','&#x1f9d7;&#x200d;&#x2642;&#xfe0f;','&#x1f937;&#x200d;&#x2640;&#xfe0f;','&#x1f937;&#x200d;&#x2642;&#xfe0f;','&#x1f469;&#x200d;&#x2696;&#xfe0f;','&#x1f469;&#x200d;&#x2695;&#xfe0f;','&#x1f3c3;&#x200d;&#x2640;&#xfe0f;','&#x1f3c3;&#x200d;&#x2642;&#xfe0f;','&#x1f3c4;&#x200d;&#x2640;&#xfe0f;','&#x1f3c4;&#x200d;&#x2642;&#xfe0f;','&#x1f6b4;&#x200d;&#x2640;&#xfe0f;','&#x1f6b4;&#x200d;&#x2642;&#xfe0f;','&#x1f9d8;&#x200d;&#x2640;&#xfe0f;','&#x1f9d8;&#x200d;&#x2642;&#xfe0f;','&#x1f3ca;&#x200d;&#x2640;&#xfe0f;','&#x1f3ca;&#x200d;&#x2642;&#xfe0f;','&#x1f938;&#x200d;&#x2640;&#xfe0f;','&#x1f938;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x200d;&#x2640;&#xfe0f;','&#x1f3f4;&#x200d;&#x2620;&#xfe0f;','&#x1f9df;&#x200d;&#x2642;&#xfe0f;','&#x1f9df;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x200d;&#x2640;&#xfe0f;','&#x1f9d9;&#x200d;&#x2642;&#xfe0f;','&#x1f9de;&#x200d;&#x2642;&#xfe0f;','&#x1f9de;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x200d;&#x2640;&#xfe0f;','&#x1f6b5;&#x200d;&#x2642;&#xfe0f;','&#x1f939;&#x200d;&#x2640;&#xfe0f;','&#x1f939;&#x200d;&#x2642;&#xfe0f;','&#x1f93c;&#x200d;&#x2640;&#xfe0f;','&#x1f93c;&#x200d;&#x2642;&#xfe0f;','&#x1f9dd;&#x200d;&#x2642;&#xfe0f;','&#x1f64d;&#x200d;&#x2642;&#xfe0f;','&#x1f9da;&#x200d;&#x2640;&#xfe0f;','&#x1f9da;&#x200d;&#x2642;&#xfe0f;','&#x1f647;&#x200d;&#x2640;&#xfe0f;','&#x1f646;&#x200d;&#x2642;&#xfe0f;','&#x1f646;&#x200d;&#x2640;&#xfe0f;','&#x1f645;&#x200d;&#x2642;&#xfe0f;','&#x1f645;&#x200d;&#x2640;&#xfe0f;','&#x1f487;&#x200d;&#x2642;&#xfe0f;','&#x1f487;&#x200d;&#x2640;&#xfe0f;','&#x1f486;&#x200d;&#x2642;&#xfe0f;','&#x1f64b;&#x200d;&#x2640;&#xfe0f;','&#x1f93d;&#x200d;&#x2642;&#xfe0f;','&#x1f9db;&#x200d;&#x2640;&#xfe0f;','&#x1f9db;&#x200d;&#x2642;&#xfe0f;','&#x1f6b6;&#x200d;&#x2640;&#xfe0f;','&#x1f6b6;&#x200d;&#x2642;&#xfe0f;','&#x1f486;&#x200d;&#x2640;&#xfe0f;','&#x1f482;&#x200d;&#x2642;&#xfe0f;','&#x1f64e;&#x200d;&#x2640;&#xfe0f;','&#x1f64e;&#x200d;&#x2642;&#xfe0f;','&#x1f468;&#x200d;&#x2708;&#xfe0f;','&#x1f93d;&#x200d;&#x2640;&#xfe0f;','&#x1f468;&#x200d;&#x1f33e;','&#x1f468;&#x200d;&#x1f393;','&#x1f468;&#x200d;&#x1f3a4;','&#x1f468;&#x200d;&#x1f3a8;','&#x1f468;&#x200d;&#x1f3eb;','&#x1f468;&#x200d;&#x1f3ed;','&#x1f468;&#x200d;&#x1f466;','&#x1f468;&#x200d;&#x1f467;','&#x1f468;&#x200d;&#x1f4bb;','&#x1f468;&#x200d;&#x1f4bc;','&#x1f468;&#x200d;&#x1f527;','&#x1f468;&#x200d;&#x1f52c;','&#x1f468;&#x200d;&#x1f680;','&#x1f441;&#x200d;&#x1f5e8;','&#x1f468;&#x200d;&#x1f692;','&#x1f468;&#x200d;&#x1f373;','&#x1f469;&#x200d;&#x1f373;','&#x1f469;&#x200d;&#x1f393;','&#x1f469;&#x200d;&#x1f3a4;','&#x1f469;&#x200d;&#x1f3a8;','&#x1f469;&#x200d;&#x1f3eb;','&#x1f469;&#x200d;&#x1f3ed;','&#x1f469;&#x200d;&#x1f466;','&#x1f469;&#x200d;&#x1f467;','&#x1f469;&#x200d;&#x1f4bb;','&#x1f469;&#x200d;&#x1f4bc;','&#x1f469;&#x200d;&#x1f527;','&#x1f469;&#x200d;&#x1f52c;','&#x1f469;&#x200d;&#x1f680;','&#x1f469;&#x200d;&#x1f692;','&#x1f469;&#x200d;&#x1f33e;','&#x1f1e7;&#x1f1f2;','&#x1f1e7;&#x1f1f3;','&#x1f471;&#x1f3fe;','&#x1f3ca;&#x1f3fc;','&#x1f1e7;&#x1f1f4;','&#x1f471;&#x1f3ff;','&#x1f1e7;&#x1f1f6;','&#x1f3ca;&#x1f3fd;','&#x1f472;&#x1f3fb;','&#x1f472;&#x1f3fc;','&#x1f472;&#x1f3fd;','&#x1f472;&#x1f3fe;','&#x1f472;&#x1f3ff;','&#x1f1e7;&#x1f1f7;','&#x1f1e7;&#x1f1f8;','&#x1f473;&#x1f3fb;','&#x1f3ca;&#x1f3fe;','&#x1f1e7;&#x1f1f9;','&#x1f473;&#x1f3fc;','&#x1f1e7;&#x1f1fb;','&#x1f3ca;&#x1f3ff;','&#x1f473;&#x1f3fd;','&#x1f1e7;&#x1f1fc;','&#x1f1e7;&#x1f1fe;','&#x1f473;&#x1f3fe;','&#x1f1e7;&#x1f1ff;','&#x1f1e8;&#x1f1e6;','&#x1f473;&#x1f3ff;','&#x1f3cb;&#x1f3fb;','&#x1f1e8;&#x1f1e8;','&#x1f474;&#x1f3fb;','&#x1f474;&#x1f3fc;','&#x1f474;&#x1f3fd;','&#x1f474;&#x1f3fe;','&#x1f474;&#x1f3ff;','&#x1f475;&#x1f3fb;','&#x1f475;&#x1f3fc;','&#x1f475;&#x1f3fd;','&#x1f475;&#x1f3fe;','&#x1f475;&#x1f3ff;','&#x1f476;&#x1f3fb;','&#x1f476;&#x1f3fc;','&#x1f476;&#x1f3fd;','&#x1f476;&#x1f3fe;','&#x1f476;&#x1f3ff;','&#x1f1e8;&#x1f1e9;','&#x1f3cb;&#x1f3fc;','&#x1f477;&#x1f3fb;','&#x1f1e8;&#x1f1eb;','&#x1f1e8;&#x1f1ec;','&#x1f477;&#x1f3fc;','&#x1f3cb;&#x1f3fd;','&#x1f1e8;&#x1f1ed;','&#x1f477;&#x1f3fd;','&#x1f1e8;&#x1f1ee;','&#x1f3cb;&#x1f3fe;','&#x1f477;&#x1f3fe;','&#x1f1e8;&#x1f1f0;','&#x1f1e8;&#x1f1f1;','&#x1f477;&#x1f3ff;','&#x1f3cb;&#x1f3ff;','&#x1f1e8;&#x1f1f2;','&#x1f478;&#x1f3fb;','&#x1f478;&#x1f3fc;','&#x1f478;&#x1f3fd;','&#x1f478;&#x1f3fe;','&#x1f478;&#x1f3ff;','&#x1f47c;&#x1f3fb;','&#x1f47c;&#x1f3fc;','&#x1f47c;&#x1f3fd;','&#x1f47c;&#x1f3fe;','&#x1f47c;&#x1f3ff;','&#x1f1e8;&#x1f1f3;','&#x1f1e8;&#x1f1f4;','&#x1f481;&#x1f3fb;','&#x1f1e8;&#x1f1f5;','&#x1f3cc;&#x1f3fb;','&#x1f481;&#x1f3fc;','&#x1f1e8;&#x1f1f7;','&#x1f1e8;&#x1f1fa;','&#x1f481;&#x1f3fd;','&#x1f3cc;&#x1f3fc;','&#x1f1e8;&#x1f1fb;','&#x1f481;&#x1f3fe;','&#x1f1e8;&#x1f1fc;','&#x1f3cc;&#x1f3fd;','&#x1f481;&#x1f3ff;','&#x1f1e8;&#x1f1fd;','&#x1f1e8;&#x1f1fe;','&#x1f3cc;&#x1f3fe;','&#x1f1e8;&#x1f1ff;','&#x1f482;&#x1f3fb;','&#x1f1e9;&#x1f1ea;','&#x1f3cc;&#x1f3ff;','&#x1f482;&#x1f3fc;','&#x1f1e9;&#x1f1ec;','&#x1f1e9;&#x1f1ef;','&#x1f482;&#x1f3fd;','&#x1f1e9;&#x1f1f0;','&#x1f1e9;&#x1f1f2;','&#x1f482;&#x1f3fe;','&#x1f1e9;&#x1f1f4;','&#x1f1e9;&#x1f1ff;','&#x1f482;&#x1f3ff;','&#x1f1ea;&#x1f1e6;','&#x1f1ea;&#x1f1e8;','&#x1f483;&#x1f3fb;','&#x1f483;&#x1f3fc;','&#x1f483;&#x1f3fd;','&#x1f483;&#x1f3fe;','&#x1f483;&#x1f3ff;','&#x1f485;&#x1f3fb;','&#x1f485;&#x1f3fc;','&#x1f485;&#x1f3fd;','&#x1f485;&#x1f3fe;','&#x1f485;&#x1f3ff;','&#x1f442;&#x1f3fb;','&#x1f442;&#x1f3fc;','&#x1f486;&#x1f3fb;','&#x1f442;&#x1f3fd;','&#x1f442;&#x1f3fe;','&#x1f486;&#x1f3fc;','&#x1f442;&#x1f3ff;','&#x1f443;&#x1f3fb;','&#x1f486;&#x1f3fd;','&#x1f443;&#x1f3fc;','&#x1f443;&#x1f3fd;','&#x1f486;&#x1f3fe;','&#x1f443;&#x1f3fe;','&#x1f443;&#x1f3ff;','&#x1f486;&#x1f3ff;','&#x1f446;&#x1f3fb;','&#x1f446;&#x1f3fc;','&#x1f446;&#x1f3fd;','&#x1f446;&#x1f3fe;','&#x1f487;&#x1f3fb;','&#x1f446;&#x1f3ff;','&#x1f447;&#x1f3fb;','&#x1f487;&#x1f3fc;','&#x1f447;&#x1f3fc;','&#x1f447;&#x1f3fd;','&#x1f487;&#x1f3fd;','&#x1f447;&#x1f3fe;','&#x1f447;&#x1f3ff;','&#x1f487;&#x1f3fe;','&#x1f448;&#x1f3fb;','&#x1f448;&#x1f3fc;','&#x1f487;&#x1f3ff;','&#x1f448;&#x1f3fd;','&#x1f448;&#x1f3fe;','&#x1f4aa;&#x1f3fb;','&#x1f4aa;&#x1f3fc;','&#x1f4aa;&#x1f3fd;','&#x1f4aa;&#x1f3fe;','&#x1f4aa;&#x1f3ff;','&#x1f574;&#x1f3fb;','&#x1f574;&#x1f3fc;','&#x1f574;&#x1f3fd;','&#x1f574;&#x1f3fe;','&#x1f574;&#x1f3ff;','&#x1f448;&#x1f3ff;','&#x1f449;&#x1f3fb;','&#x1f575;&#x1f3fb;','&#x1f449;&#x1f3fc;','&#x1f449;&#x1f3fd;','&#x1f575;&#x1f3fc;','&#x1f449;&#x1f3fe;','&#x1f449;&#x1f3ff;','&#x1f575;&#x1f3fd;','&#x1f44a;&#x1f3fb;','&#x1f44a;&#x1f3fc;','&#x1f575;&#x1f3fe;','&#x1f44a;&#x1f3fd;','&#x1f44a;&#x1f3fe;','&#x1f575;&#x1f3ff;','&#x1f44a;&#x1f3ff;','&#x1f44b;&#x1f3fb;','&#x1f57a;&#x1f3fb;','&#x1f57a;&#x1f3fc;','&#x1f57a;&#x1f3fd;','&#x1f57a;&#x1f3fe;','&#x1f57a;&#x1f3ff;','&#x1f590;&#x1f3fb;','&#x1f590;&#x1f3fc;','&#x1f590;&#x1f3fd;','&#x1f590;&#x1f3fe;','&#x1f590;&#x1f3ff;','&#x1f595;&#x1f3fb;','&#x1f595;&#x1f3fc;','&#x1f595;&#x1f3fd;','&#x1f595;&#x1f3fe;','&#x1f595;&#x1f3ff;','&#x1f596;&#x1f3fb;','&#x1f596;&#x1f3fc;','&#x1f596;&#x1f3fd;','&#x1f596;&#x1f3fe;','&#x1f596;&#x1f3ff;','&#x1f44b;&#x1f3fc;','&#x1f44b;&#x1f3fd;','&#x1f645;&#x1f3fb;','&#x1f44b;&#x1f3fe;','&#x1f44b;&#x1f3ff;','&#x1f645;&#x1f3fc;','&#x1f44c;&#x1f3fb;','&#x1f44c;&#x1f3fc;','&#x1f645;&#x1f3fd;','&#x1f1e6;&#x1f1e8;','&#x1f44c;&#x1f3fe;','&#x1f645;&#x1f3fe;','&#x1f44c;&#x1f3ff;','&#x1f44d;&#x1f3fb;','&#x1f645;&#x1f3ff;','&#x1f44d;&#x1f3fc;','&#x1f44d;&#x1f3fd;','&#x1f44d;&#x1f3fe;','&#x1f44d;&#x1f3ff;','&#x1f646;&#x1f3fb;','&#x1f44e;&#x1f3fb;','&#x1f44e;&#x1f3fc;','&#x1f646;&#x1f3fc;','&#x1f44e;&#x1f3fd;','&#x1f44e;&#x1f3fe;','&#x1f646;&#x1f3fd;','&#x1f44e;&#x1f3ff;','&#x1f44f;&#x1f3fb;','&#x1f646;&#x1f3fe;','&#x1f44f;&#x1f3fc;','&#x1f44f;&#x1f3fd;','&#x1f646;&#x1f3ff;','&#x1f44f;&#x1f3fe;','&#x1f44f;&#x1f3ff;','&#x1f450;&#x1f3fb;','&#x1f450;&#x1f3fc;','&#x1f647;&#x1f3fb;','&#x1f450;&#x1f3fd;','&#x1f450;&#x1f3fe;','&#x1f647;&#x1f3fc;','&#x1f450;&#x1f3ff;','&#x1f466;&#x1f3fb;','&#x1f647;&#x1f3fd;','&#x1f466;&#x1f3fc;','&#x1f466;&#x1f3fd;','&#x1f647;&#x1f3fe;','&#x1f466;&#x1f3fe;','&#x1f466;&#x1f3ff;','&#x1f647;&#x1f3ff;','&#x1f467;&#x1f3fb;','&#x1f467;&#x1f3fc;','&#x1f467;&#x1f3fd;','&#x1f467;&#x1f3fe;','&#x1f64b;&#x1f3fb;','&#x1f467;&#x1f3ff;','&#x1f1ea;&#x1f1ea;','&#x1f64b;&#x1f3fc;','&#x1f1ea;&#x1f1ec;','&#x1f1ea;&#x1f1ed;','&#x1f64b;&#x1f3fd;','&#x1f1ea;&#x1f1f7;','&#x1f1ea;&#x1f1f8;','&#x1f64b;&#x1f3fe;','&#x1f1ea;&#x1f1f9;','&#x1f1ea;&#x1f1fa;','&#x1f64b;&#x1f3ff;','&#x1f1eb;&#x1f1ee;','&#x1f1eb;&#x1f1ef;','&#x1f64c;&#x1f3fb;','&#x1f64c;&#x1f3fc;','&#x1f64c;&#x1f3fd;','&#x1f64c;&#x1f3fe;','&#x1f64c;&#x1f3ff;','&#x1f1eb;&#x1f1f0;','&#x1f1eb;&#x1f1f2;','&#x1f64d;&#x1f3fb;','&#x1f1eb;&#x1f1f4;','&#x1f1eb;&#x1f1f7;','&#x1f64d;&#x1f3fc;','&#x1f1ec;&#x1f1e6;','&#x1f1ec;&#x1f1e7;','&#x1f64d;&#x1f3fd;','&#x1f1ec;&#x1f1e9;','&#x1f468;&#x1f3fb;','&#x1f64d;&#x1f3fe;','&#x1f1ec;&#x1f1ea;','&#x1f1ec;&#x1f1eb;','&#x1f64d;&#x1f3ff;','&#x1f1ec;&#x1f1ec;','&#x1f1ec;&#x1f1ed;','&#x1f1ec;&#x1f1ee;','&#x1f1ec;&#x1f1f1;','&#x1f64e;&#x1f3fb;','&#x1f1ec;&#x1f1f2;','&#x1f1ec;&#x1f1f3;','&#x1f64e;&#x1f3fc;','&#x1f1ec;&#x1f1f5;','&#x1f1ec;&#x1f1f6;','&#x1f64e;&#x1f3fd;','&#x1f1ec;&#x1f1f7;','&#x1f1ec;&#x1f1f8;','&#x1f64e;&#x1f3fe;','&#x1f1ec;&#x1f1f9;','&#x1f1ec;&#x1f1fa;','&#x1f64e;&#x1f3ff;','&#x1f1ec;&#x1f1fc;','&#x1f1ec;&#x1f1fe;','&#x1f64f;&#x1f3fb;','&#x1f64f;&#x1f3fc;','&#x1f64f;&#x1f3fd;','&#x1f64f;&#x1f3fe;','&#x1f64f;&#x1f3ff;','&#x1f468;&#x1f3fc;','&#x1f1ed;&#x1f1f0;','&#x1f6a3;&#x1f3fb;','&#x1f1ed;&#x1f1f2;','&#x1f1ed;&#x1f1f3;','&#x1f6a3;&#x1f3fc;','&#x1f1ed;&#x1f1f7;','&#x1f1ed;&#x1f1f9;','&#x1f6a3;&#x1f3fd;','&#x1f1ed;&#x1f1fa;','&#x1f1ee;&#x1f1e8;','&#x1f6a3;&#x1f3fe;','&#x1f1ee;&#x1f1e9;','&#x1f1ee;&#x1f1ea;','&#x1f6a3;&#x1f3ff;','&#x1f1ee;&#x1f1f1;','&#x1f1ee;&#x1f1f2;','&#x1f1ee;&#x1f1f3;','&#x1f1ee;&#x1f1f4;','&#x1f6b4;&#x1f3fb;','&#x1f1ee;&#x1f1f6;','&#x1f1ee;&#x1f1f7;','&#x1f6b4;&#x1f3fc;','&#x1f1ee;&#x1f1f8;','&#x1f468;&#x1f3fd;','&#x1f6b4;&#x1f3fd;','&#x1f1ee;&#x1f1f9;','&#x1f1ef;&#x1f1ea;','&#x1f6b4;&#x1f3fe;','&#x1f1ef;&#x1f1f2;','&#x1f1ef;&#x1f1f4;','&#x1f6b4;&#x1f3ff;','&#x1f1ef;&#x1f1f5;','&#x1f1f0;&#x1f1ea;','&#x1f1f0;&#x1f1ec;','&#x1f1f0;&#x1f1ed;','&#x1f6b5;&#x1f3fb;','&#x1f1f0;&#x1f1ee;','&#x1f1f0;&#x1f1f2;','&#x1f6b5;&#x1f3fc;','&#x1f1f0;&#x1f1f3;','&#x1f1f0;&#x1f1f5;','&#x1f6b5;&#x1f3fd;','&#x1f1f0;&#x1f1f7;','&#x1f1f0;&#x1f1fc;','&#x1f6b5;&#x1f3fe;','&#x1f1f0;&#x1f1fe;','&#x1f1f0;&#x1f1ff;','&#x1f6b5;&#x1f3ff;','&#x1f468;&#x1f3fe;','&#x1f1f1;&#x1f1e6;','&#x1f1f1;&#x1f1e7;','&#x1f1f1;&#x1f1e8;','&#x1f6b6;&#x1f3fb;','&#x1f1f1;&#x1f1ee;','&#x1f1f1;&#x1f1f0;','&#x1f6b6;&#x1f3fc;','&#x1f1f1;&#x1f1f7;','&#x1f1f1;&#x1f1f8;','&#x1f6b6;&#x1f3fd;','&#x1f1f1;&#x1f1f9;','&#x1f1f1;&#x1f1fa;','&#x1f6b6;&#x1f3fe;','&#x1f1f1;&#x1f1fb;','&#x1f1f1;&#x1f1fe;','&#x1f6b6;&#x1f3ff;','&#x1f1f2;&#x1f1e6;','&#x1f1f2;&#x1f1e8;','&#x1f6c0;&#x1f3fb;','&#x1f6c0;&#x1f3fc;','&#x1f6c0;&#x1f3fd;','&#x1f6c0;&#x1f3fe;','&#x1f6c0;&#x1f3ff;','&#x1f6cc;&#x1f3fb;','&#x1f6cc;&#x1f3fc;','&#x1f6cc;&#x1f3fd;','&#x1f6cc;&#x1f3fe;','&#x1f6cc;&#x1f3ff;','&#x1f918;&#x1f3fb;','&#x1f918;&#x1f3fc;','&#x1f918;&#x1f3fd;','&#x1f918;&#x1f3fe;','&#x1f918;&#x1f3ff;','&#x1f919;&#x1f3fb;','&#x1f919;&#x1f3fc;','&#x1f919;&#x1f3fd;','&#x1f919;&#x1f3fe;','&#x1f919;&#x1f3ff;','&#x1f91a;&#x1f3fb;','&#x1f91a;&#x1f3fc;','&#x1f91a;&#x1f3fd;','&#x1f91a;&#x1f3fe;','&#x1f91a;&#x1f3ff;','&#x1f91b;&#x1f3fb;','&#x1f91b;&#x1f3fc;','&#x1f91b;&#x1f3fd;','&#x1f91b;&#x1f3fe;','&#x1f91b;&#x1f3ff;','&#x1f91c;&#x1f3fb;','&#x1f91c;&#x1f3fc;','&#x1f91c;&#x1f3fd;','&#x1f91c;&#x1f3fe;','&#x1f91c;&#x1f3ff;','&#x1f91e;&#x1f3fb;','&#x1f91e;&#x1f3fc;','&#x1f91e;&#x1f3fd;','&#x1f91e;&#x1f3fe;','&#x1f91e;&#x1f3ff;','&#x1f91f;&#x1f3fb;','&#x1f91f;&#x1f3fc;','&#x1f91f;&#x1f3fd;','&#x1f91f;&#x1f3fe;','&#x1f91f;&#x1f3ff;','&#x1f1f2;&#x1f1e9;','&#x1f1f2;&#x1f1ea;','&#x1f926;&#x1f3fb;','&#x1f1f2;&#x1f1eb;','&#x1f468;&#x1f3ff;','&#x1f926;&#x1f3fc;','&#x1f1f2;&#x1f1ec;','&#x1f1f2;&#x1f1ed;','&#x1f926;&#x1f3fd;','&#x1f1f2;&#x1f1f0;','&#x1f1f2;&#x1f1f1;','&#x1f926;&#x1f3fe;','&#x1f1f2;&#x1f1f2;','&#x1f1f2;&#x1f1f3;','&#x1f926;&#x1f3ff;','&#x1f1f2;&#x1f1f4;','&#x1f1f2;&#x1f1f5;','&#x1f930;&#x1f3fb;','&#x1f930;&#x1f3fc;','&#x1f930;&#x1f3fd;','&#x1f930;&#x1f3fe;','&#x1f930;&#x1f3ff;','&#x1f931;&#x1f3fb;','&#x1f931;&#x1f3fc;','&#x1f931;&#x1f3fd;','&#x1f931;&#x1f3fe;','&#x1f931;&#x1f3ff;','&#x1f932;&#x1f3fb;','&#x1f932;&#x1f3fc;','&#x1f932;&#x1f3fd;','&#x1f932;&#x1f3fe;','&#x1f932;&#x1f3ff;','&#x1f933;&#x1f3fb;','&#x1f933;&#x1f3fc;','&#x1f933;&#x1f3fd;','&#x1f933;&#x1f3fe;','&#x1f933;&#x1f3ff;','&#x1f934;&#x1f3fb;','&#x1f934;&#x1f3fc;','&#x1f934;&#x1f3fd;','&#x1f934;&#x1f3fe;','&#x1f934;&#x1f3ff;','&#x1f935;&#x1f3fb;','&#x1f935;&#x1f3fc;','&#x1f935;&#x1f3fd;','&#x1f935;&#x1f3fe;','&#x1f935;&#x1f3ff;','&#x1f936;&#x1f3fb;','&#x1f936;&#x1f3fc;','&#x1f936;&#x1f3fd;','&#x1f936;&#x1f3fe;','&#x1f936;&#x1f3ff;','&#x1f1f2;&#x1f1f6;','&#x1f1f2;&#x1f1f7;','&#x1f937;&#x1f3fb;','&#x1f1f2;&#x1f1f8;','&#x1f1f2;&#x1f1f9;','&#x1f937;&#x1f3fc;','&#x1f1f2;&#x1f1fa;','&#x1f1f2;&#x1f1fb;','&#x1f937;&#x1f3fd;','&#x1f1f2;&#x1f1fc;','&#x1f1f2;&#x1f1fd;','&#x1f937;&#x1f3fe;','&#x1f1f2;&#x1f1fe;','&#x1f1f2;&#x1f1ff;','&#x1f937;&#x1f3ff;','&#x1f1f3;&#x1f1e6;','&#x1f1f3;&#x1f1e8;','&#x1f1f3;&#x1f1ea;','&#x1f1f3;&#x1f1eb;','&#x1f938;&#x1f3fb;','&#x1f1f3;&#x1f1ec;','&#x1f1f3;&#x1f1ee;','&#x1f938;&#x1f3fc;','&#x1f1f3;&#x1f1f1;','&#x1f1f3;&#x1f1f4;','&#x1f938;&#x1f3fd;','&#x1f1f3;&#x1f1f5;','&#x1f1f3;&#x1f1f7;','&#x1f938;&#x1f3fe;','&#x1f1f3;&#x1f1fa;','&#x1f1f3;&#x1f1ff;','&#x1f938;&#x1f3ff;','&#x1f1f4;&#x1f1f2;','&#x1f1f5;&#x1f1e6;','&#x1f1f5;&#x1f1ea;','&#x1f1f5;&#x1f1eb;','&#x1f939;&#x1f3fb;','&#x1f1f5;&#x1f1ec;','&#x1f1f5;&#x1f1ed;','&#x1f939;&#x1f3fc;','&#x1f1f5;&#x1f1f0;','&#x1f1f5;&#x1f1f1;','&#x1f939;&#x1f3fd;','&#x1f1f5;&#x1f1f2;','&#x1f1f5;&#x1f1f3;','&#x1f939;&#x1f3fe;','&#x1f1f5;&#x1f1f7;','&#x1f1f5;&#x1f1f8;','&#x1f939;&#x1f3ff;','&#x1f1f5;&#x1f1f9;','&#x1f1f5;&#x1f1fc;','&#x1f1f5;&#x1f1fe;','&#x1f1f6;&#x1f1e6;','&#x1f1f7;&#x1f1ea;','&#x1f1f7;&#x1f1f4;','&#x1f93d;&#x1f3fb;','&#x1f1f7;&#x1f1f8;','&#x1f469;&#x1f3fb;','&#x1f93d;&#x1f3fc;','&#x1f1f7;&#x1f1fa;','&#x1f1f7;&#x1f1fc;','&#x1f93d;&#x1f3fd;','&#x1f1f8;&#x1f1e6;','&#x1f1f8;&#x1f1e7;','&#x1f93d;&#x1f3fe;','&#x1f1f8;&#x1f1e8;','&#x1f1f8;&#x1f1e9;','&#x1f93d;&#x1f3ff;','&#x1f1f8;&#x1f1ea;','&#x1f1f8;&#x1f1ec;','&#x1f1e6;&#x1f1e9;','&#x1f1f8;&#x1f1ee;','&#x1f93e;&#x1f3fb;','&#x1f1f8;&#x1f1ef;','&#x1f1f8;&#x1f1f0;','&#x1f93e;&#x1f3fc;','&#x1f1f8;&#x1f1f1;','&#x1f1f8;&#x1f1f2;','&#x1f93e;&#x1f3fd;','&#x1f1f8;&#x1f1f3;','&#x1f1f8;&#x1f1f4;','&#x1f93e;&#x1f3fe;','&#x1f469;&#x1f3fc;','&#x1f1f8;&#x1f1f7;','&#x1f93e;&#x1f3ff;','&#x1f1f8;&#x1f1f8;','&#x1f1f8;&#x1f1f9;','&#x1f9d1;&#x1f3fb;','&#x1f9d1;&#x1f3fc;','&#x1f9d1;&#x1f3fd;','&#x1f9d1;&#x1f3fe;','&#x1f9d1;&#x1f3ff;','&#x1f9d2;&#x1f3fb;','&#x1f9d2;&#x1f3fc;','&#x1f9d2;&#x1f3fd;','&#x1f9d2;&#x1f3fe;','&#x1f9d2;&#x1f3ff;','&#x1f9d3;&#x1f3fb;','&#x1f9d3;&#x1f3fc;','&#x1f9d3;&#x1f3fd;','&#x1f9d3;&#x1f3fe;','&#x1f9d3;&#x1f3ff;','&#x1f9d4;&#x1f3fb;','&#x1f9d4;&#x1f3fc;','&#x1f9d4;&#x1f3fd;','&#x1f9d4;&#x1f3fe;','&#x1f9d4;&#x1f3ff;','&#x1f9d5;&#x1f3fb;','&#x1f9d5;&#x1f3fc;','&#x1f9d5;&#x1f3fd;','&#x1f9d5;&#x1f3fe;','&#x1f9d5;&#x1f3ff;','&#x1f1f8;&#x1f1fb;','&#x1f1f8;&#x1f1fd;','&#x1f9d6;&#x1f3fb;','&#x1f1f8;&#x1f1fe;','&#x1f1f8;&#x1f1ff;','&#x1f9d6;&#x1f3fc;','&#x1f1f9;&#x1f1e6;','&#x1f1f9;&#x1f1e8;','&#x1f9d6;&#x1f3fd;','&#x1f1f9;&#x1f1e9;','&#x1f1f9;&#x1f1eb;','&#x1f9d6;&#x1f3fe;','&#x1f1f9;&#x1f1ec;','&#x1f1f9;&#x1f1ed;','&#x1f9d6;&#x1f3ff;','&#x1f1f9;&#x1f1ef;','&#x1f1f9;&#x1f1f0;','&#x1f1f9;&#x1f1f1;','&#x1f469;&#x1f3fd;','&#x1f9d7;&#x1f3fb;','&#x1f1f9;&#x1f1f2;','&#x1f1f9;&#x1f1f3;','&#x1f9d7;&#x1f3fc;','&#x1f1f9;&#x1f1f4;','&#x1f1f9;&#x1f1f7;','&#x1f9d7;&#x1f3fd;','&#x1f1f9;&#x1f1f9;','&#x1f1f9;&#x1f1fb;','&#x1f9d7;&#x1f3fe;','&#x1f1f9;&#x1f1fc;','&#x1f1f9;&#x1f1ff;','&#x1f9d7;&#x1f3ff;','&#x1f1fa;&#x1f1e6;','&#x1f1fa;&#x1f1ec;','&#x1f1fa;&#x1f1f2;','&#x1f1fa;&#x1f1f3;','&#x1f9d8;&#x1f3fb;','&#x1f1fa;&#x1f1f8;','&#x1f1fa;&#x1f1fe;','&#x1f9d8;&#x1f3fc;','&#x1f1fa;&#x1f1ff;','&#x1f1fb;&#x1f1e6;','&#x1f9d8;&#x1f3fd;','&#x1f469;&#x1f3fe;','&#x1f1fb;&#x1f1e8;','&#x1f9d8;&#x1f3fe;','&#x1f1fb;&#x1f1ea;','&#x1f1fb;&#x1f1ec;','&#x1f9d8;&#x1f3ff;','&#x1f1fb;&#x1f1ee;','&#x1f1fb;&#x1f1f3;','&#x1f1fb;&#x1f1fa;','&#x1f1fc;&#x1f1eb;','&#x1f9d9;&#x1f3fb;','&#x1f1fc;&#x1f1f8;','&#x1f1fd;&#x1f1f0;','&#x1f9d9;&#x1f3fc;','&#x1f1fe;&#x1f1ea;','&#x1f1fe;&#x1f1f9;','&#x1f9d9;&#x1f3fd;','&#x1f1ff;&#x1f1e6;','&#x1f1ff;&#x1f1f2;','&#x1f9d9;&#x1f3fe;','&#x1f1ff;&#x1f1fc;','&#x1f385;&#x1f3fb;','&#x1f9d9;&#x1f3ff;','&#x1f385;&#x1f3fc;','&#x1f469;&#x1f3ff;','&#x1f385;&#x1f3fd;','&#x1f385;&#x1f3fe;','&#x1f9da;&#x1f3fb;','&#x1f385;&#x1f3ff;','&#x1f3c2;&#x1f3fb;','&#x1f9da;&#x1f3fc;','&#x1f3c2;&#x1f3fc;','&#x1f3c2;&#x1f3fd;','&#x1f9da;&#x1f3fd;','&#x1f3c2;&#x1f3fe;','&#x1f3c2;&#x1f3ff;','&#x1f9da;&#x1f3fe;','&#x1f44c;&#x1f3fd;','&#x1f1e6;&#x1f1ea;','&#x1f9da;&#x1f3ff;','&#x1f3c3;&#x1f3fb;','&#x1f1e6;&#x1f1eb;','&#x1f1e6;&#x1f1ec;','&#x1f3c3;&#x1f3fc;','&#x1f9db;&#x1f3fb;','&#x1f1e6;&#x1f1ee;','&#x1f1e6;&#x1f1f1;','&#x1f9db;&#x1f3fc;','&#x1f3c3;&#x1f3fd;','&#x1f1e6;&#x1f1f2;','&#x1f9db;&#x1f3fd;','&#x1f1e6;&#x1f1f4;','&#x1f3c3;&#x1f3fe;','&#x1f9db;&#x1f3fe;','&#x1f1e6;&#x1f1f6;','&#x1f1e6;&#x1f1f7;','&#x1f9db;&#x1f3ff;','&#x1f3c3;&#x1f3ff;','&#x1f1e6;&#x1f1f8;','&#x1f1e6;&#x1f1f9;','&#x1f1e6;&#x1f1fa;','&#x1f9dc;&#x1f3fb;','&#x1f1e6;&#x1f1fc;','&#x1f3c4;&#x1f3fb;','&#x1f9dc;&#x1f3fc;','&#x1f1e6;&#x1f1fd;','&#x1f1e6;&#x1f1ff;','&#x1f9dc;&#x1f3fd;','&#x1f3c4;&#x1f3fc;','&#x1f1e7;&#x1f1e6;','&#x1f9dc;&#x1f3fe;','&#x1f46e;&#x1f3fb;','&#x1f1e7;&#x1f1e7;','&#x1f9dc;&#x1f3ff;','&#x1f3c4;&#x1f3fd;','&#x1f46e;&#x1f3fc;','&#x1f1e7;&#x1f1e9;','&#x1f1e7;&#x1f1ea;','&#x1f9dd;&#x1f3fb;','&#x1f46e;&#x1f3fd;','&#x1f3c4;&#x1f3fe;','&#x1f9dd;&#x1f3fc;','&#x1f1e7;&#x1f1eb;','&#x1f46e;&#x1f3fe;','&#x1f9dd;&#x1f3fd;','&#x1f1e7;&#x1f1ec;','&#x1f3c4;&#x1f3ff;','&#x1f9dd;&#x1f3fe;','&#x1f46e;&#x1f3ff;','&#x1f1e7;&#x1f1ed;','&#x1f9dd;&#x1f3ff;','&#x1f1e7;&#x1f1ee;','&#x1f3c7;&#x1f3fb;','&#x1f3c7;&#x1f3fc;','&#x1f470;&#x1f3fb;','&#x1f470;&#x1f3fc;','&#x1f470;&#x1f3fd;','&#x1f470;&#x1f3fe;','&#x1f470;&#x1f3ff;','&#x1f3c7;&#x1f3fd;','&#x1f3c7;&#x1f3fe;','&#x1f471;&#x1f3fb;','&#x1f3c7;&#x1f3ff;','&#x1f1e7;&#x1f1ef;','&#x1f471;&#x1f3fc;','&#x1f1e7;&#x1f1f1;','&#x1f3ca;&#x1f3fb;','&#x1f471;&#x1f3fd;','&#x1f1f8;&#x1f1ed;','&#x270d;&#x1f3ff;','&#x26f9;&#x1f3fb;','&#x270d;&#x1f3fe;','&#x270d;&#x1f3fd;','&#x270d;&#x1f3fc;','&#x270d;&#x1f3fb;','&#x270c;&#x1f3ff;','&#x270c;&#x1f3fe;','&#x270c;&#x1f3fd;','&#x270c;&#x1f3fc;','&#x270c;&#x1f3fb;','&#x270b;&#x1f3ff;','&#x270b;&#x1f3fe;','&#x270b;&#x1f3fd;','&#x270b;&#x1f3fc;','&#x270b;&#x1f3fb;','&#x270a;&#x1f3ff;','&#x270a;&#x1f3fe;','&#x270a;&#x1f3fd;','&#x270a;&#x1f3fc;','&#x270a;&#x1f3fb;','&#x26f7;&#x1f3fd;','&#x26f7;&#x1f3fe;','&#x26f9;&#x1f3ff;','&#x261d;&#x1f3ff;','&#x261d;&#x1f3fe;','&#x26f9;&#x1f3fe;','&#x261d;&#x1f3fd;','&#x261d;&#x1f3fc;','&#x26f9;&#x1f3fd;','&#x261d;&#x1f3fb;','&#x26f7;&#x1f3ff;','&#x26f9;&#x1f3fc;','&#x26f7;&#x1f3fb;','&#x26f7;&#x1f3fc;','&#x34;&#x20e3;','&#x23;&#x20e3;','&#x30;&#x20e3;','&#x31;&#x20e3;','&#x32;&#x20e3;','&#x33;&#x20e3;','&#x2a;&#x20e3;','&#x35;&#x20e3;','&#x36;&#x20e3;','&#x37;&#x20e3;','&#x38;&#x20e3;','&#x39;&#x20e3;','&#x1f1f3;','&#x1f554;','&#x1f555;','&#x1f556;','&#x1f557;','&#x1f558;','&#x1f559;','&#x1f55a;','&#x1f55b;','&#x1f55c;','&#x1f55d;','&#x1f55e;','&#x1f55f;','&#x1f560;','&#x1f561;','&#x1f562;','&#x1f563;','&#x1f564;','&#x1f565;','&#x1f566;','&#x1f567;','&#x1f56f;','&#x1f570;','&#x1f573;','&#x1f387;','&#x1f388;','&#x1f389;','&#x1f38a;','&#x1f38b;','&#x1f574;','&#x1f38c;','&#x1f38d;','&#x1f38e;','&#x1f38f;','&#x1f390;','&#x1f391;','&#x1f392;','&#x1f393;','&#x1f396;','&#x1f397;','&#x1f399;','&#x1f39a;','&#x1f39b;','&#x1f39e;','&#x1f39f;','&#x1f3a0;','&#x1f3a1;','&#x1f575;','&#x1f576;','&#x1f577;','&#x1f578;','&#x1f579;','&#x1f3a2;','&#x1f3a3;','&#x1f3a4;','&#x1f3a5;','&#x1f3a6;','&#x1f57a;','&#x1f587;','&#x1f58a;','&#x1f58b;','&#x1f58c;','&#x1f58d;','&#x1f3a7;','&#x1f3a8;','&#x1f3a9;','&#x1f3aa;','&#x1f3ab;','&#x1f590;','&#x1f3ac;','&#x1f3ad;','&#x1f3ae;','&#x1f3af;','&#x1f3b0;','&#x1f595;','&#x1f3b1;','&#x1f3b2;','&#x1f3b3;','&#x1f3b4;','&#x1f3b5;','&#x1f596;','&#x1f5a4;','&#x1f5a5;','&#x1f5a8;','&#x1f5b1;','&#x1f5b2;','&#x1f5bc;','&#x1f5c2;','&#x1f5c3;','&#x1f5c4;','&#x1f5d1;','&#x1f5d2;','&#x1f5d3;','&#x1f5dc;','&#x1f5dd;','&#x1f5de;','&#x1f5e1;','&#x1f5e3;','&#x1f5e8;','&#x1f5ef;','&#x1f5f3;','&#x1f5fa;','&#x1f5fb;','&#x1f5fc;','&#x1f5fd;','&#x1f5fe;','&#x1f5ff;','&#x1f600;','&#x1f601;','&#x1f602;','&#x1f603;','&#x1f604;','&#x1f605;','&#x1f606;','&#x1f607;','&#x1f608;','&#x1f609;','&#x1f60a;','&#x1f60b;','&#x1f60c;','&#x1f60d;','&#x1f60e;','&#x1f60f;','&#x1f610;','&#x1f611;','&#x1f612;','&#x1f613;','&#x1f614;','&#x1f615;','&#x1f616;','&#x1f617;','&#x1f618;','&#x1f619;','&#x1f61a;','&#x1f61b;','&#x1f61c;','&#x1f61d;','&#x1f61e;','&#x1f61f;','&#x1f620;','&#x1f621;','&#x1f622;','&#x1f623;','&#x1f624;','&#x1f625;','&#x1f626;','&#x1f627;','&#x1f628;','&#x1f629;','&#x1f62a;','&#x1f62b;','&#x1f62c;','&#x1f62d;','&#x1f62e;','&#x1f62f;','&#x1f630;','&#x1f631;','&#x1f632;','&#x1f633;','&#x1f634;','&#x1f635;','&#x1f636;','&#x1f637;','&#x1f638;','&#x1f639;','&#x1f63a;','&#x1f63b;','&#x1f63c;','&#x1f63d;','&#x1f63e;','&#x1f63f;','&#x1f640;','&#x1f641;','&#x1f642;','&#x1f643;','&#x1f644;','&#x1f3b6;','&#x1f3b7;','&#x1f3b8;','&#x1f3b9;','&#x1f3ba;','&#x1f3bb;','&#x1f3bc;','&#x1f3bd;','&#x1f3be;','&#x1f3bf;','&#x1f3c0;','&#x1f3c1;','&#x1f1e7;','&#x1f1ee;','&#x1f1ea;','&#x1f1f7;','&#x1f1f1;','&#x1f645;','&#x1f3c2;','&#x1f18e;','&#x1f191;','&#x1f1e8;','&#x1f1f9;','&#x1f1ef;','&#x1f192;','&#x1f1ec;','&#x1f193;','&#x1f0cf;','&#x1f194;','&#x1f1f4;','&#x1f1fa;','&#x1f1eb;','&#x1f195;','&#x1f196;','&#x1f197;','&#x1f646;','&#x1f1ed;','&#x1f3c3;','&#x1f198;','&#x1f1e9;','&#x1f1fb;','&#x1f1f0;','&#x1f199;','&#x1f1fc;','&#x1f19a;','&#x1f1fd;','&#x1f1f8;','&#x1f004;','&#x1f1fe;','&#x1f1e6;','&#x1f170;','&#x1f171;','&#x1f1ff;','&#x1f647;','&#x1f648;','&#x1f649;','&#x1f64a;','&#x1f201;','&#x1f202;','&#x1f3c4;','&#x1f3c5;','&#x1f3c6;','&#x1f21a;','&#x1f22f;','&#x1f232;','&#x1f233;','&#x1f234;','&#x1f3c7;','&#x1f468;','&#x1f3c8;','&#x1f3c9;','&#x1f235;','&#x1f236;','&#x1f237;','&#x1f64b;','&#x1f238;','&#x1f239;','&#x1f23a;','&#x1f250;','&#x1f251;','&#x1f64c;','&#x1f300;','&#x1f301;','&#x1f302;','&#x1f303;','&#x1f304;','&#x1f305;','&#x1f306;','&#x1f307;','&#x1f308;','&#x1f3ca;','&#x1f309;','&#x1f30a;','&#x1f30b;','&#x1f30c;','&#x1f30d;','&#x1f30e;','&#x1f30f;','&#x1f64d;','&#x1f310;','&#x1f311;','&#x1f312;','&#x1f313;','&#x1f314;','&#x1f315;','&#x1f316;','&#x1f317;','&#x1f318;','&#x1f319;','&#x1f3cb;','&#x1f31a;','&#x1f31b;','&#x1f31c;','&#x1f31d;','&#x1f31e;','&#x1f31f;','&#x1f64e;','&#x1f320;','&#x1f321;','&#x1f324;','&#x1f325;','&#x1f326;','&#x1f64f;','&#x1f680;','&#x1f681;','&#x1f682;','&#x1f683;','&#x1f684;','&#x1f685;','&#x1f686;','&#x1f687;','&#x1f688;','&#x1f689;','&#x1f68a;','&#x1f68b;','&#x1f68c;','&#x1f68d;','&#x1f68e;','&#x1f68f;','&#x1f690;','&#x1f691;','&#x1f692;','&#x1f693;','&#x1f694;','&#x1f695;','&#x1f696;','&#x1f697;','&#x1f698;','&#x1f699;','&#x1f69a;','&#x1f69b;','&#x1f69c;','&#x1f69d;','&#x1f69e;','&#x1f69f;','&#x1f6a0;','&#x1f6a1;','&#x1f6a2;','&#x1f327;','&#x1f328;','&#x1f329;','&#x1f32a;','&#x1f32b;','&#x1f32c;','&#x1f3cc;','&#x1f3cd;','&#x1f3ce;','&#x1f3cf;','&#x1f3d0;','&#x1f3d1;','&#x1f3d2;','&#x1f3d3;','&#x1f3d4;','&#x1f3d5;','&#x1f3d6;','&#x1f6a3;','&#x1f6a4;','&#x1f6a5;','&#x1f6a6;','&#x1f6a7;','&#x1f6a8;','&#x1f6a9;','&#x1f6aa;','&#x1f6ab;','&#x1f6ac;','&#x1f6ad;','&#x1f6ae;','&#x1f6af;','&#x1f6b0;','&#x1f6b1;','&#x1f6b2;','&#x1f6b3;','&#x1f3d7;','&#x1f3d8;','&#x1f3d9;','&#x1f3da;','&#x1f3db;','&#x1f3dc;','&#x1f3dd;','&#x1f3de;','&#x1f3df;','&#x1f3e0;','&#x1f3e1;','&#x1f3e2;','&#x1f3e3;','&#x1f3e4;','&#x1f3e5;','&#x1f3e6;','&#x1f3e7;','&#x1f6b4;','&#x1f3e8;','&#x1f3e9;','&#x1f3ea;','&#x1f3eb;','&#x1f3ec;','&#x1f3ed;','&#x1f3ee;','&#x1f3ef;','&#x1f3f0;','&#x1f32d;','&#x1f3f3;','&#x1f32e;','&#x1f32f;','&#x1f330;','&#x1f331;','&#x1f3f4;','&#x1f3f5;','&#x1f6b5;','&#x1f3f7;','&#x1f3f8;','&#x1f3f9;','&#x1f3fa;','&#x1f3fb;','&#x1f3fc;','&#x1f3fd;','&#x1f3fe;','&#x1f3ff;','&#x1f400;','&#x1f401;','&#x1f402;','&#x1f403;','&#x1f404;','&#x1f405;','&#x1f469;','&#x1f46a;','&#x1f6b6;','&#x1f6b7;','&#x1f6b8;','&#x1f6b9;','&#x1f6ba;','&#x1f6bb;','&#x1f6bc;','&#x1f6bd;','&#x1f6be;','&#x1f6bf;','&#x1f46b;','&#x1f46c;','&#x1f46d;','&#x1f406;','&#x1f407;','&#x1f6c0;','&#x1f6c1;','&#x1f6c2;','&#x1f6c3;','&#x1f6c4;','&#x1f6c5;','&#x1f6cb;','&#x1f408;','&#x1f409;','&#x1f40a;','&#x1f40b;','&#x1f40c;','&#x1f6cc;','&#x1f6cd;','&#x1f6ce;','&#x1f6cf;','&#x1f6d0;','&#x1f6d1;','&#x1f6d2;','&#x1f6e0;','&#x1f6e1;','&#x1f6e2;','&#x1f6e3;','&#x1f6e4;','&#x1f6e5;','&#x1f6e9;','&#x1f6eb;','&#x1f6ec;','&#x1f6f0;','&#x1f6f3;','&#x1f6f4;','&#x1f6f5;','&#x1f6f6;','&#x1f6f7;','&#x1f6f8;','&#x1f910;','&#x1f911;','&#x1f912;','&#x1f913;','&#x1f914;','&#x1f915;','&#x1f916;','&#x1f917;','&#x1f40d;','&#x1f40e;','&#x1f40f;','&#x1f410;','&#x1f411;','&#x1f918;','&#x1f412;','&#x1f413;','&#x1f414;','&#x1f415;','&#x1f416;','&#x1f919;','&#x1f46e;','&#x1f417;','&#x1f418;','&#x1f46f;','&#x1f419;','&#x1f91a;','&#x1f41a;','&#x1f41b;','&#x1f41c;','&#x1f41d;','&#x1f470;','&#x1f91b;','&#x1f41e;','&#x1f41f;','&#x1f420;','&#x1f421;','&#x1f422;','&#x1f91c;','&#x1f91d;','&#x1f423;','&#x1f424;','&#x1f425;','&#x1f426;','&#x1f427;','&#x1f91e;','&#x1f428;','&#x1f429;','&#x1f42a;','&#x1f42b;','&#x1f42c;','&#x1f91f;','&#x1f920;','&#x1f921;','&#x1f922;','&#x1f923;','&#x1f924;','&#x1f925;','&#x1f42d;','&#x1f42e;','&#x1f471;','&#x1f42f;','&#x1f430;','&#x1f431;','&#x1f432;','&#x1f433;','&#x1f472;','&#x1f434;','&#x1f435;','&#x1f436;','&#x1f437;','&#x1f438;','&#x1f439;','&#x1f43a;','&#x1f43b;','&#x1f926;','&#x1f927;','&#x1f928;','&#x1f929;','&#x1f92a;','&#x1f92b;','&#x1f92c;','&#x1f92d;','&#x1f92e;','&#x1f92f;','&#x1f43c;','&#x1f43d;','&#x1f43e;','&#x1f43f;','&#x1f440;','&#x1f930;','&#x1f332;','&#x1f441;','&#x1f333;','&#x1f334;','&#x1f473;','&#x1f931;','&#x1f335;','&#x1f336;','&#x1f337;','&#x1f442;','&#x1f338;','&#x1f932;','&#x1f474;','&#x1f339;','&#x1f33a;','&#x1f33b;','&#x1f33c;','&#x1f933;','&#x1f443;','&#x1f475;','&#x1f444;','&#x1f445;','&#x1f33d;','&#x1f934;','&#x1f33e;','&#x1f33f;','&#x1f476;','&#x1f340;','&#x1f341;','&#x1f935;','&#x1f446;','&#x1f342;','&#x1f343;','&#x1f344;','&#x1f345;','&#x1f936;','&#x1f346;','&#x1f447;','&#x1f347;','&#x1f348;','&#x1f349;','&#x1f34a;','&#x1f34b;','&#x1f448;','&#x1f34c;','&#x1f34d;','&#x1f477;','&#x1f34e;','&#x1f34f;','&#x1f350;','&#x1f449;','&#x1f351;','&#x1f478;','&#x1f937;','&#x1f479;','&#x1f47a;','&#x1f47b;','&#x1f352;','&#x1f353;','&#x1f354;','&#x1f355;','&#x1f44a;','&#x1f47c;','&#x1f47d;','&#x1f47e;','&#x1f47f;','&#x1f480;','&#x1f356;','&#x1f357;','&#x1f358;','&#x1f359;','&#x1f938;','&#x1f35a;','&#x1f44b;','&#x1f35b;','&#x1f35c;','&#x1f35d;','&#x1f35e;','&#x1f35f;','&#x1f44c;','&#x1f360;','&#x1f361;','&#x1f362;','&#x1f363;','&#x1f364;','&#x1f481;','&#x1f44d;','&#x1f365;','&#x1f366;','&#x1f939;','&#x1f93a;','&#x1f367;','&#x1f368;','&#x1f93c;','&#x1f369;','&#x1f44e;','&#x1f36a;','&#x1f36b;','&#x1f36c;','&#x1f36d;','&#x1f36e;','&#x1f44f;','&#x1f36f;','&#x1f370;','&#x1f371;','&#x1f372;','&#x1f482;','&#x1f373;','&#x1f450;','&#x1f451;','&#x1f452;','&#x1f93d;','&#x1f453;','&#x1f483;','&#x1f484;','&#x1f454;','&#x1f455;','&#x1f456;','&#x1f457;','&#x1f458;','&#x1f485;','&#x1f459;','&#x1f45a;','&#x1f45b;','&#x1f45c;','&#x1f45d;','&#x1f45e;','&#x1f45f;','&#x1f460;','&#x1f93e;','&#x1f940;','&#x1f941;','&#x1f942;','&#x1f943;','&#x1f944;','&#x1f945;','&#x1f947;','&#x1f948;','&#x1f949;','&#x1f94a;','&#x1f94b;','&#x1f94c;','&#x1f950;','&#x1f951;','&#x1f952;','&#x1f953;','&#x1f954;','&#x1f955;','&#x1f956;','&#x1f957;','&#x1f958;','&#x1f959;','&#x1f95a;','&#x1f95b;','&#x1f95c;','&#x1f95d;','&#x1f95e;','&#x1f95f;','&#x1f960;','&#x1f961;','&#x1f962;','&#x1f963;','&#x1f964;','&#x1f965;','&#x1f966;','&#x1f967;','&#x1f968;','&#x1f969;','&#x1f96a;','&#x1f96b;','&#x1f980;','&#x1f981;','&#x1f982;','&#x1f983;','&#x1f984;','&#x1f985;','&#x1f986;','&#x1f987;','&#x1f988;','&#x1f989;','&#x1f98a;','&#x1f98b;','&#x1f98c;','&#x1f98d;','&#x1f98e;','&#x1f98f;','&#x1f990;','&#x1f991;','&#x1f992;','&#x1f993;','&#x1f994;','&#x1f995;','&#x1f996;','&#x1f997;','&#x1f9c0;','&#x1f9d0;','&#x1f461;','&#x1f462;','&#x1f463;','&#x1f464;','&#x1f465;','&#x1f9d1;','&#x1f374;','&#x1f375;','&#x1f376;','&#x1f377;','&#x1f486;','&#x1f9d2;','&#x1f378;','&#x1f466;','&#x1f379;','&#x1f37a;','&#x1f37b;','&#x1f9d3;','&#x1f37c;','&#x1f37d;','&#x1f467;','&#x1f37e;','&#x1f37f;','&#x1f9d4;','&#x1f380;','&#x1f381;','&#x1f382;','&#x1f383;','&#x1f384;','&#x1f9d5;','&#x1f1f5;','&#x1f17e;','&#x1f487;','&#x1f488;','&#x1f489;','&#x1f48a;','&#x1f48b;','&#x1f48c;','&#x1f48d;','&#x1f48e;','&#x1f48f;','&#x1f490;','&#x1f491;','&#x1f492;','&#x1f493;','&#x1f494;','&#x1f495;','&#x1f9d6;','&#x1f496;','&#x1f497;','&#x1f498;','&#x1f499;','&#x1f49a;','&#x1f49b;','&#x1f49c;','&#x1f49d;','&#x1f49e;','&#x1f49f;','&#x1f4a0;','&#x1f4a1;','&#x1f4a2;','&#x1f4a3;','&#x1f4a4;','&#x1f4a5;','&#x1f4a6;','&#x1f9d7;','&#x1f4a7;','&#x1f4a8;','&#x1f4a9;','&#x1f1f6;','&#x1f1f2;','&#x1f17f;','&#x1f385;','&#x1f386;','&#x1f4aa;','&#x1f4ab;','&#x1f4ac;','&#x1f4ad;','&#x1f4ae;','&#x1f4af;','&#x1f4b0;','&#x1f4b1;','&#x1f4b2;','&#x1f9d8;','&#x1f4b3;','&#x1f4b4;','&#x1f4b5;','&#x1f4b6;','&#x1f4b7;','&#x1f4b8;','&#x1f4b9;','&#x1f4ba;','&#x1f4bb;','&#x1f4bc;','&#x1f4bd;','&#x1f4be;','&#x1f4bf;','&#x1f4c0;','&#x1f4c1;','&#x1f4c2;','&#x1f4c3;','&#x1f9d9;','&#x1f4c4;','&#x1f4c5;','&#x1f4c6;','&#x1f4c7;','&#x1f4c8;','&#x1f4c9;','&#x1f4ca;','&#x1f4cb;','&#x1f4cc;','&#x1f4cd;','&#x1f4ce;','&#x1f4cf;','&#x1f4d0;','&#x1f4d1;','&#x1f4d2;','&#x1f4d3;','&#x1f4d4;','&#x1f9da;','&#x1f4d5;','&#x1f4d6;','&#x1f4d7;','&#x1f4d8;','&#x1f4d9;','&#x1f4da;','&#x1f4db;','&#x1f4dc;','&#x1f4dd;','&#x1f4de;','&#x1f4df;','&#x1f4e0;','&#x1f4e1;','&#x1f4e2;','&#x1f4e3;','&#x1f4e4;','&#x1f4e5;','&#x1f9db;','&#x1f4e6;','&#x1f4e7;','&#x1f4e8;','&#x1f4e9;','&#x1f4ea;','&#x1f4eb;','&#x1f4ec;','&#x1f4ed;','&#x1f4ee;','&#x1f4ef;','&#x1f4f0;','&#x1f4f1;','&#x1f4f2;','&#x1f4f3;','&#x1f4f4;','&#x1f4f5;','&#x1f4f6;','&#x1f9dc;','&#x1f4f7;','&#x1f4f8;','&#x1f4f9;','&#x1f4fa;','&#x1f4fb;','&#x1f4fc;','&#x1f4fd;','&#x1f4ff;','&#x1f500;','&#x1f501;','&#x1f502;','&#x1f503;','&#x1f504;','&#x1f505;','&#x1f506;','&#x1f507;','&#x1f508;','&#x1f9dd;','&#x1f509;','&#x1f50a;','&#x1f9de;','&#x1f50b;','&#x1f50c;','&#x1f9df;','&#x1f9e0;','&#x1f9e1;','&#x1f9e2;','&#x1f9e3;','&#x1f9e4;','&#x1f9e5;','&#x1f9e6;','&#x1f50d;','&#x1f50e;','&#x1f50f;','&#x1f510;','&#x1f511;','&#x1f512;','&#x1f513;','&#x1f514;','&#x1f515;','&#x1f516;','&#x1f517;','&#x1f518;','&#x1f519;','&#x1f51a;','&#x1f51b;','&#x1f51c;','&#x1f51d;','&#x1f51e;','&#x1f51f;','&#x1f520;','&#x1f521;','&#x1f522;','&#x1f523;','&#x1f524;','&#x1f525;','&#x1f526;','&#x1f527;','&#x1f528;','&#x1f529;','&#x1f52a;','&#x1f52b;','&#x1f52c;','&#x1f52d;','&#x1f52e;','&#x1f52f;','&#x1f530;','&#x1f531;','&#x1f532;','&#x1f533;','&#x1f534;','&#x1f535;','&#x1f536;','&#x1f537;','&#x1f538;','&#x1f539;','&#x1f53a;','&#x1f53b;','&#x1f53c;','&#x1f53d;','&#x1f549;','&#x1f54a;','&#x1f54b;','&#x1f54c;','&#x1f54d;','&#x1f54e;','&#x1f550;','&#x1f551;','&#x1f552;','&#x1f553;','&#x25aa;','&#x2626;','&#x262e;','&#x262f;','&#x2638;','&#x2639;','&#x263a;','&#x2640;','&#x2642;','&#x2648;','&#x2649;','&#x264a;','&#x264b;','&#x264c;','&#x264d;','&#x264e;','&#x264f;','&#x2650;','&#x2651;','&#x2652;','&#x2653;','&#x2660;','&#x2663;','&#x2665;','&#x2666;','&#x2668;','&#x267b;','&#x267f;','&#x2692;','&#x2693;','&#x2694;','&#x2695;','&#x2696;','&#x2697;','&#x2699;','&#x269b;','&#x269c;','&#x26a0;','&#x26a1;','&#x26aa;','&#x26ab;','&#x26b0;','&#x26b1;','&#x26bd;','&#x26be;','&#x26c4;','&#x26c5;','&#x26c8;','&#x26ce;','&#x26cf;','&#x26d1;','&#x26d3;','&#x26d4;','&#x26e9;','&#x26ea;','&#x26f0;','&#x26f1;','&#x26f2;','&#x26f3;','&#x26f4;','&#x26f5;','&#x2623;','&#x2622;','&#x2620;','&#x261d;','&#x2618;','&#x26f7;','&#x26f8;','&#x2615;','&#x2614;','&#x2611;','&#x260e;','&#x2604;','&#x2603;','&#x2602;','&#x2601;','&#x2600;','&#x25fe;','&#x25fd;','&#x25fc;','&#x25fb;','&#x25c0;','&#x25b6;','&#x25ab;','&#x262a;','&#x26f9;','&#x26fa;','&#x26fd;','&#x2702;','&#x2705;','&#x2708;','&#x2709;','&#x24c2;','&#x23fa;','&#x23f9;','&#x23f8;','&#x23f3;','&#x270a;','&#x23f2;','&#x23f1;','&#x23f0;','&#x23ef;','&#x23ee;','&#x270b;','&#x23ed;','&#x23ec;','&#x23eb;','&#x23ea;','&#x23e9;','&#x270c;','&#x23cf;','&#x2328;','&#x231b;','&#x231a;','&#x21aa;','&#x270d;','&#x270f;','&#x2712;','&#x2714;','&#x2716;','&#x271d;','&#x2721;','&#x2728;','&#x2733;','&#x2734;','&#x2744;','&#x2747;','&#x274c;','&#x274e;','&#x2753;','&#x2754;','&#x2755;','&#x2757;','&#x2763;','&#x2764;','&#x2795;','&#x2796;','&#x2797;','&#x27a1;','&#x27b0;','&#x27bf;','&#x2934;','&#x2935;','&#x21a9;','&#x2b05;','&#x2b06;','&#x2b07;','&#x2b1b;','&#x2b1c;','&#x2b50;','&#x2b55;','&#x2199;','&#x3030;','&#x303d;','&#x2198;','&#x2197;','&#x3297;','&#x3299;','&#x2196;','&#x2195;','&#x2194;','&#x2139;','&#x2122;','&#x2049;','&#x203c;','&#xe50a;');\n\t$partials = array('&#x1f004;','&#x1f0cf;','&#x1f170;','&#x1f171;','&#x1f17e;','&#x1f17f;','&#x1f18e;','&#x1f191;','&#x1f192;','&#x1f193;','&#x1f194;','&#x1f195;','&#x1f196;','&#x1f197;','&#x1f198;','&#x1f199;','&#x1f19a;','&#x1f1e6;','&#x1f1e8;','&#x1f1e9;','&#x1f1ea;','&#x1f1eb;','&#x1f1ec;','&#x1f1ee;','&#x1f1f1;','&#x1f1f2;','&#x1f1f4;','&#x1f1f6;','&#x1f1f7;','&#x1f1f8;','&#x1f1f9;','&#x1f1fa;','&#x1f1fc;','&#x1f1fd;','&#x1f1ff;','&#x1f1e7;','&#x1f1ed;','&#x1f1ef;','&#x1f1f3;','&#x1f1fb;','&#x1f1fe;','&#x1f1f0;','&#x1f1f5;','&#x1f201;','&#x1f202;','&#x1f21a;','&#x1f22f;','&#x1f232;','&#x1f233;','&#x1f234;','&#x1f235;','&#x1f236;','&#x1f237;','&#x1f238;','&#x1f239;','&#x1f23a;','&#x1f250;','&#x1f251;','&#x1f300;','&#x1f301;','&#x1f302;','&#x1f303;','&#x1f304;','&#x1f305;','&#x1f306;','&#x1f307;','&#x1f308;','&#x1f309;','&#x1f30a;','&#x1f30b;','&#x1f30c;','&#x1f30d;','&#x1f30e;','&#x1f30f;','&#x1f310;','&#x1f311;','&#x1f312;','&#x1f313;','&#x1f314;','&#x1f315;','&#x1f316;','&#x1f317;','&#x1f318;','&#x1f319;','&#x1f31a;','&#x1f31b;','&#x1f31c;','&#x1f31d;','&#x1f31e;','&#x1f31f;','&#x1f320;','&#x1f321;','&#x1f324;','&#x1f325;','&#x1f326;','&#x1f327;','&#x1f328;','&#x1f329;','&#x1f32a;','&#x1f32b;','&#x1f32c;','&#x1f32d;','&#x1f32e;','&#x1f32f;','&#x1f330;','&#x1f331;','&#x1f332;','&#x1f333;','&#x1f334;','&#x1f335;','&#x1f336;','&#x1f337;','&#x1f338;','&#x1f339;','&#x1f33a;','&#x1f33b;','&#x1f33c;','&#x1f33d;','&#x1f33e;','&#x1f33f;','&#x1f340;','&#x1f341;','&#x1f342;','&#x1f343;','&#x1f344;','&#x1f345;','&#x1f346;','&#x1f347;','&#x1f348;','&#x1f349;','&#x1f34a;','&#x1f34b;','&#x1f34c;','&#x1f34d;','&#x1f34e;','&#x1f34f;','&#x1f350;','&#x1f351;','&#x1f352;','&#x1f353;','&#x1f354;','&#x1f355;','&#x1f356;','&#x1f357;','&#x1f358;','&#x1f359;','&#x1f35a;','&#x1f35b;','&#x1f35c;','&#x1f35d;','&#x1f35e;','&#x1f35f;','&#x1f360;','&#x1f361;','&#x1f362;','&#x1f363;','&#x1f364;','&#x1f365;','&#x1f366;','&#x1f367;','&#x1f368;','&#x1f369;','&#x1f36a;','&#x1f36b;','&#x1f36c;','&#x1f36d;','&#x1f36e;','&#x1f36f;','&#x1f370;','&#x1f371;','&#x1f372;','&#x1f373;','&#x1f374;','&#x1f375;','&#x1f376;','&#x1f377;','&#x1f378;','&#x1f379;','&#x1f37a;','&#x1f37b;','&#x1f37c;','&#x1f37d;','&#x1f37e;','&#x1f37f;','&#x1f380;','&#x1f381;','&#x1f382;','&#x1f383;','&#x1f384;','&#x1f385;','&#x1f3fb;','&#x1f3fc;','&#x1f3fd;','&#x1f3fe;','&#x1f3ff;','&#x1f386;','&#x1f387;','&#x1f388;','&#x1f389;','&#x1f38a;','&#x1f38b;','&#x1f38c;','&#x1f38d;','&#x1f38e;','&#x1f38f;','&#x1f390;','&#x1f391;','&#x1f392;','&#x1f393;','&#x1f396;','&#x1f397;','&#x1f399;','&#x1f39a;','&#x1f39b;','&#x1f39e;','&#x1f39f;','&#x1f3a0;','&#x1f3a1;','&#x1f3a2;','&#x1f3a3;','&#x1f3a4;','&#x1f3a5;','&#x1f3a6;','&#x1f3a7;','&#x1f3a8;','&#x1f3a9;','&#x1f3aa;','&#x1f3ab;','&#x1f3ac;','&#x1f3ad;','&#x1f3ae;','&#x1f3af;','&#x1f3b0;','&#x1f3b1;','&#x1f3b2;','&#x1f3b3;','&#x1f3b4;','&#x1f3b5;','&#x1f3b6;','&#x1f3b7;','&#x1f3b8;','&#x1f3b9;','&#x1f3ba;','&#x1f3bb;','&#x1f3bc;','&#x1f3bd;','&#x1f3be;','&#x1f3bf;','&#x1f3c0;','&#x1f3c1;','&#x1f3c2;','&#x1f3c3;','&#x200d;','&#x2640;','&#xfe0f;','&#x2642;','&#x1f3c4;','&#x1f3c5;','&#x1f3c6;','&#x1f3c7;','&#x1f3c8;','&#x1f3c9;','&#x1f3ca;','&#x1f3cb;','&#x1f3cc;','&#x1f3cd;','&#x1f3ce;','&#x1f3cf;','&#x1f3d0;','&#x1f3d1;','&#x1f3d2;','&#x1f3d3;','&#x1f3d4;','&#x1f3d5;','&#x1f3d6;','&#x1f3d7;','&#x1f3d8;','&#x1f3d9;','&#x1f3da;','&#x1f3db;','&#x1f3dc;','&#x1f3dd;','&#x1f3de;','&#x1f3df;','&#x1f3e0;','&#x1f3e1;','&#x1f3e2;','&#x1f3e3;','&#x1f3e4;','&#x1f3e5;','&#x1f3e6;','&#x1f3e7;','&#x1f3e8;','&#x1f3e9;','&#x1f3ea;','&#x1f3eb;','&#x1f3ec;','&#x1f3ed;','&#x1f3ee;','&#x1f3ef;','&#x1f3f0;','&#x1f3f3;','&#x1f3f4;','&#x2620;','&#xe0067;','&#xe0062;','&#xe0065;','&#xe006e;','&#xe007f;','&#xe0073;','&#xe0063;','&#xe0074;','&#xe0077;','&#xe006c;','&#x1f3f5;','&#x1f3f7;','&#x1f3f8;','&#x1f3f9;','&#x1f3fa;','&#x1f400;','&#x1f401;','&#x1f402;','&#x1f403;','&#x1f404;','&#x1f405;','&#x1f406;','&#x1f407;','&#x1f408;','&#x1f409;','&#x1f40a;','&#x1f40b;','&#x1f40c;','&#x1f40d;','&#x1f40e;','&#x1f40f;','&#x1f410;','&#x1f411;','&#x1f412;','&#x1f413;','&#x1f414;','&#x1f415;','&#x1f416;','&#x1f417;','&#x1f418;','&#x1f419;','&#x1f41a;','&#x1f41b;','&#x1f41c;','&#x1f41d;','&#x1f41e;','&#x1f41f;','&#x1f420;','&#x1f421;','&#x1f422;','&#x1f423;','&#x1f424;','&#x1f425;','&#x1f426;','&#x1f427;','&#x1f428;','&#x1f429;','&#x1f42a;','&#x1f42b;','&#x1f42c;','&#x1f42d;','&#x1f42e;','&#x1f42f;','&#x1f430;','&#x1f431;','&#x1f432;','&#x1f433;','&#x1f434;','&#x1f435;','&#x1f436;','&#x1f437;','&#x1f438;','&#x1f439;','&#x1f43a;','&#x1f43b;','&#x1f43c;','&#x1f43d;','&#x1f43e;','&#x1f43f;','&#x1f440;','&#x1f441;','&#x1f5e8;','&#x1f442;','&#x1f443;','&#x1f444;','&#x1f445;','&#x1f446;','&#x1f447;','&#x1f448;','&#x1f449;','&#x1f44a;','&#x1f44b;','&#x1f44c;','&#x1f44d;','&#x1f44e;','&#x1f44f;','&#x1f450;','&#x1f451;','&#x1f452;','&#x1f453;','&#x1f454;','&#x1f455;','&#x1f456;','&#x1f457;','&#x1f458;','&#x1f459;','&#x1f45a;','&#x1f45b;','&#x1f45c;','&#x1f45d;','&#x1f45e;','&#x1f45f;','&#x1f460;','&#x1f461;','&#x1f462;','&#x1f463;','&#x1f464;','&#x1f465;','&#x1f466;','&#x1f467;','&#x1f468;','&#x1f4bb;','&#x1f4bc;','&#x1f527;','&#x1f52c;','&#x1f680;','&#x1f692;','&#x2695;','&#x2696;','&#x2708;','&#x1f469;','&#x2764;','&#x1f48b;','&#x1f46a;','&#x1f46b;','&#x1f46c;','&#x1f46d;','&#x1f46e;','&#x1f46f;','&#x1f470;','&#x1f471;','&#x1f472;','&#x1f473;','&#x1f474;','&#x1f475;','&#x1f476;','&#x1f477;','&#x1f478;','&#x1f479;','&#x1f47a;','&#x1f47b;','&#x1f47c;','&#x1f47d;','&#x1f47e;','&#x1f47f;','&#x1f480;','&#x1f481;','&#x1f482;','&#x1f483;','&#x1f484;','&#x1f485;','&#x1f486;','&#x1f487;','&#x1f488;','&#x1f489;','&#x1f48a;','&#x1f48c;','&#x1f48d;','&#x1f48e;','&#x1f48f;','&#x1f490;','&#x1f491;','&#x1f492;','&#x1f493;','&#x1f494;','&#x1f495;','&#x1f496;','&#x1f497;','&#x1f498;','&#x1f499;','&#x1f49a;','&#x1f49b;','&#x1f49c;','&#x1f49d;','&#x1f49e;','&#x1f49f;','&#x1f4a0;','&#x1f4a1;','&#x1f4a2;','&#x1f4a3;','&#x1f4a4;','&#x1f4a5;','&#x1f4a6;','&#x1f4a7;','&#x1f4a8;','&#x1f4a9;','&#x1f4aa;','&#x1f4ab;','&#x1f4ac;','&#x1f4ad;','&#x1f4ae;','&#x1f4af;','&#x1f4b0;','&#x1f4b1;','&#x1f4b2;','&#x1f4b3;','&#x1f4b4;','&#x1f4b5;','&#x1f4b6;','&#x1f4b7;','&#x1f4b8;','&#x1f4b9;','&#x1f4ba;','&#x1f4bd;','&#x1f4be;','&#x1f4bf;','&#x1f4c0;','&#x1f4c1;','&#x1f4c2;','&#x1f4c3;','&#x1f4c4;','&#x1f4c5;','&#x1f4c6;','&#x1f4c7;','&#x1f4c8;','&#x1f4c9;','&#x1f4ca;','&#x1f4cb;','&#x1f4cc;','&#x1f4cd;','&#x1f4ce;','&#x1f4cf;','&#x1f4d0;','&#x1f4d1;','&#x1f4d2;','&#x1f4d3;','&#x1f4d4;','&#x1f4d5;','&#x1f4d6;','&#x1f4d7;','&#x1f4d8;','&#x1f4d9;','&#x1f4da;','&#x1f4db;','&#x1f4dc;','&#x1f4dd;','&#x1f4de;','&#x1f4df;','&#x1f4e0;','&#x1f4e1;','&#x1f4e2;','&#x1f4e3;','&#x1f4e4;','&#x1f4e5;','&#x1f4e6;','&#x1f4e7;','&#x1f4e8;','&#x1f4e9;','&#x1f4ea;','&#x1f4eb;','&#x1f4ec;','&#x1f4ed;','&#x1f4ee;','&#x1f4ef;','&#x1f4f0;','&#x1f4f1;','&#x1f4f2;','&#x1f4f3;','&#x1f4f4;','&#x1f4f5;','&#x1f4f6;','&#x1f4f7;','&#x1f4f8;','&#x1f4f9;','&#x1f4fa;','&#x1f4fb;','&#x1f4fc;','&#x1f4fd;','&#x1f4ff;','&#x1f500;','&#x1f501;','&#x1f502;','&#x1f503;','&#x1f504;','&#x1f505;','&#x1f506;','&#x1f507;','&#x1f508;','&#x1f509;','&#x1f50a;','&#x1f50b;','&#x1f50c;','&#x1f50d;','&#x1f50e;','&#x1f50f;','&#x1f510;','&#x1f511;','&#x1f512;','&#x1f513;','&#x1f514;','&#x1f515;','&#x1f516;','&#x1f517;','&#x1f518;','&#x1f519;','&#x1f51a;','&#x1f51b;','&#x1f51c;','&#x1f51d;','&#x1f51e;','&#x1f51f;','&#x1f520;','&#x1f521;','&#x1f522;','&#x1f523;','&#x1f524;','&#x1f525;','&#x1f526;','&#x1f528;','&#x1f529;','&#x1f52a;','&#x1f52b;','&#x1f52d;','&#x1f52e;','&#x1f52f;','&#x1f530;','&#x1f531;','&#x1f532;','&#x1f533;','&#x1f534;','&#x1f535;','&#x1f536;','&#x1f537;','&#x1f538;','&#x1f539;','&#x1f53a;','&#x1f53b;','&#x1f53c;','&#x1f53d;','&#x1f549;','&#x1f54a;','&#x1f54b;','&#x1f54c;','&#x1f54d;','&#x1f54e;','&#x1f550;','&#x1f551;','&#x1f552;','&#x1f553;','&#x1f554;','&#x1f555;','&#x1f556;','&#x1f557;','&#x1f558;','&#x1f559;','&#x1f55a;','&#x1f55b;','&#x1f55c;','&#x1f55d;','&#x1f55e;','&#x1f55f;','&#x1f560;','&#x1f561;','&#x1f562;','&#x1f563;','&#x1f564;','&#x1f565;','&#x1f566;','&#x1f567;','&#x1f56f;','&#x1f570;','&#x1f573;','&#x1f574;','&#x1f575;','&#x1f576;','&#x1f577;','&#x1f578;','&#x1f579;','&#x1f57a;','&#x1f587;','&#x1f58a;','&#x1f58b;','&#x1f58c;','&#x1f58d;','&#x1f590;','&#x1f595;','&#x1f596;','&#x1f5a4;','&#x1f5a5;','&#x1f5a8;','&#x1f5b1;','&#x1f5b2;','&#x1f5bc;','&#x1f5c2;','&#x1f5c3;','&#x1f5c4;','&#x1f5d1;','&#x1f5d2;','&#x1f5d3;','&#x1f5dc;','&#x1f5dd;','&#x1f5de;','&#x1f5e1;','&#x1f5e3;','&#x1f5ef;','&#x1f5f3;','&#x1f5fa;','&#x1f5fb;','&#x1f5fc;','&#x1f5fd;','&#x1f5fe;','&#x1f5ff;','&#x1f600;','&#x1f601;','&#x1f602;','&#x1f603;','&#x1f604;','&#x1f605;','&#x1f606;','&#x1f607;','&#x1f608;','&#x1f609;','&#x1f60a;','&#x1f60b;','&#x1f60c;','&#x1f60d;','&#x1f60e;','&#x1f60f;','&#x1f610;','&#x1f611;','&#x1f612;','&#x1f613;','&#x1f614;','&#x1f615;','&#x1f616;','&#x1f617;','&#x1f618;','&#x1f619;','&#x1f61a;','&#x1f61b;','&#x1f61c;','&#x1f61d;','&#x1f61e;','&#x1f61f;','&#x1f620;','&#x1f621;','&#x1f622;','&#x1f623;','&#x1f624;','&#x1f625;','&#x1f626;','&#x1f627;','&#x1f628;','&#x1f629;','&#x1f62a;','&#x1f62b;','&#x1f62c;','&#x1f62d;','&#x1f62e;','&#x1f62f;','&#x1f630;','&#x1f631;','&#x1f632;','&#x1f633;','&#x1f634;','&#x1f635;','&#x1f636;','&#x1f637;','&#x1f638;','&#x1f639;','&#x1f63a;','&#x1f63b;','&#x1f63c;','&#x1f63d;','&#x1f63e;','&#x1f63f;','&#x1f640;','&#x1f641;','&#x1f642;','&#x1f643;','&#x1f644;','&#x1f645;','&#x1f646;','&#x1f647;','&#x1f648;','&#x1f649;','&#x1f64a;','&#x1f64b;','&#x1f64c;','&#x1f64d;','&#x1f64e;','&#x1f64f;','&#x1f681;','&#x1f682;','&#x1f683;','&#x1f684;','&#x1f685;','&#x1f686;','&#x1f687;','&#x1f688;','&#x1f689;','&#x1f68a;','&#x1f68b;','&#x1f68c;','&#x1f68d;','&#x1f68e;','&#x1f68f;','&#x1f690;','&#x1f691;','&#x1f693;','&#x1f694;','&#x1f695;','&#x1f696;','&#x1f697;','&#x1f698;','&#x1f699;','&#x1f69a;','&#x1f69b;','&#x1f69c;','&#x1f69d;','&#x1f69e;','&#x1f69f;','&#x1f6a0;','&#x1f6a1;','&#x1f6a2;','&#x1f6a3;','&#x1f6a4;','&#x1f6a5;','&#x1f6a6;','&#x1f6a7;','&#x1f6a8;','&#x1f6a9;','&#x1f6aa;','&#x1f6ab;','&#x1f6ac;','&#x1f6ad;','&#x1f6ae;','&#x1f6af;','&#x1f6b0;','&#x1f6b1;','&#x1f6b2;','&#x1f6b3;','&#x1f6b4;','&#x1f6b5;','&#x1f6b6;','&#x1f6b7;','&#x1f6b8;','&#x1f6b9;','&#x1f6ba;','&#x1f6bb;','&#x1f6bc;','&#x1f6bd;','&#x1f6be;','&#x1f6bf;','&#x1f6c0;','&#x1f6c1;','&#x1f6c2;','&#x1f6c3;','&#x1f6c4;','&#x1f6c5;','&#x1f6cb;','&#x1f6cc;','&#x1f6cd;','&#x1f6ce;','&#x1f6cf;','&#x1f6d0;','&#x1f6d1;','&#x1f6d2;','&#x1f6e0;','&#x1f6e1;','&#x1f6e2;','&#x1f6e3;','&#x1f6e4;','&#x1f6e5;','&#x1f6e9;','&#x1f6eb;','&#x1f6ec;','&#x1f6f0;','&#x1f6f3;','&#x1f6f4;','&#x1f6f5;','&#x1f6f6;','&#x1f6f7;','&#x1f6f8;','&#x1f910;','&#x1f911;','&#x1f912;','&#x1f913;','&#x1f914;','&#x1f915;','&#x1f916;','&#x1f917;','&#x1f918;','&#x1f919;','&#x1f91a;','&#x1f91b;','&#x1f91c;','&#x1f91d;','&#x1f91e;','&#x1f91f;','&#x1f920;','&#x1f921;','&#x1f922;','&#x1f923;','&#x1f924;','&#x1f925;','&#x1f926;','&#x1f927;','&#x1f928;','&#x1f929;','&#x1f92a;','&#x1f92b;','&#x1f92c;','&#x1f92d;','&#x1f92e;','&#x1f92f;','&#x1f930;','&#x1f931;','&#x1f932;','&#x1f933;','&#x1f934;','&#x1f935;','&#x1f936;','&#x1f937;','&#x1f938;','&#x1f939;','&#x1f93a;','&#x1f93c;','&#x1f93d;','&#x1f93e;','&#x1f940;','&#x1f941;','&#x1f942;','&#x1f943;','&#x1f944;','&#x1f945;','&#x1f947;','&#x1f948;','&#x1f949;','&#x1f94a;','&#x1f94b;','&#x1f94c;','&#x1f950;','&#x1f951;','&#x1f952;','&#x1f953;','&#x1f954;','&#x1f955;','&#x1f956;','&#x1f957;','&#x1f958;','&#x1f959;','&#x1f95a;','&#x1f95b;','&#x1f95c;','&#x1f95d;','&#x1f95e;','&#x1f95f;','&#x1f960;','&#x1f961;','&#x1f962;','&#x1f963;','&#x1f964;','&#x1f965;','&#x1f966;','&#x1f967;','&#x1f968;','&#x1f969;','&#x1f96a;','&#x1f96b;','&#x1f980;','&#x1f981;','&#x1f982;','&#x1f983;','&#x1f984;','&#x1f985;','&#x1f986;','&#x1f987;','&#x1f988;','&#x1f989;','&#x1f98a;','&#x1f98b;','&#x1f98c;','&#x1f98d;','&#x1f98e;','&#x1f98f;','&#x1f990;','&#x1f991;','&#x1f992;','&#x1f993;','&#x1f994;','&#x1f995;','&#x1f996;','&#x1f997;','&#x1f9c0;','&#x1f9d0;','&#x1f9d1;','&#x1f9d2;','&#x1f9d3;','&#x1f9d4;','&#x1f9d5;','&#x1f9d6;','&#x1f9d7;','&#x1f9d8;','&#x1f9d9;','&#x1f9da;','&#x1f9db;','&#x1f9dc;','&#x1f9dd;','&#x1f9de;','&#x1f9df;','&#x1f9e0;','&#x1f9e1;','&#x1f9e2;','&#x1f9e3;','&#x1f9e4;','&#x1f9e5;','&#x1f9e6;','&#x203c;','&#x2049;','&#x2122;','&#x2139;','&#x2194;','&#x2195;','&#x2196;','&#x2197;','&#x2198;','&#x2199;','&#x21a9;','&#x21aa;','&#x20e3;','&#x231a;','&#x231b;','&#x2328;','&#x23cf;','&#x23e9;','&#x23ea;','&#x23eb;','&#x23ec;','&#x23ed;','&#x23ee;','&#x23ef;','&#x23f0;','&#x23f1;','&#x23f2;','&#x23f3;','&#x23f8;','&#x23f9;','&#x23fa;','&#x24c2;','&#x25aa;','&#x25ab;','&#x25b6;','&#x25c0;','&#x25fb;','&#x25fc;','&#x25fd;','&#x25fe;','&#x2600;','&#x2601;','&#x2602;','&#x2603;','&#x2604;','&#x260e;','&#x2611;','&#x2614;','&#x2615;','&#x2618;','&#x261d;','&#x2622;','&#x2623;','&#x2626;','&#x262a;','&#x262e;','&#x262f;','&#x2638;','&#x2639;','&#x263a;','&#x2648;','&#x2649;','&#x264a;','&#x264b;','&#x264c;','&#x264d;','&#x264e;','&#x264f;','&#x2650;','&#x2651;','&#x2652;','&#x2653;','&#x2660;','&#x2663;','&#x2665;','&#x2666;','&#x2668;','&#x267b;','&#x267f;','&#x2692;','&#x2693;','&#x2694;','&#x2697;','&#x2699;','&#x269b;','&#x269c;','&#x26a0;','&#x26a1;','&#x26aa;','&#x26ab;','&#x26b0;','&#x26b1;','&#x26bd;','&#x26be;','&#x26c4;','&#x26c5;','&#x26c8;','&#x26ce;','&#x26cf;','&#x26d1;','&#x26d3;','&#x26d4;','&#x26e9;','&#x26ea;','&#x26f0;','&#x26f1;','&#x26f2;','&#x26f3;','&#x26f4;','&#x26f5;','&#x26f7;','&#x26f8;','&#x26f9;','&#x26fa;','&#x26fd;','&#x2702;','&#x2705;','&#x2709;','&#x270a;','&#x270b;','&#x270c;','&#x270d;','&#x270f;','&#x2712;','&#x2714;','&#x2716;','&#x271d;','&#x2721;','&#x2728;','&#x2733;','&#x2734;','&#x2744;','&#x2747;','&#x274c;','&#x274e;','&#x2753;','&#x2754;','&#x2755;','&#x2757;','&#x2763;','&#x2795;','&#x2796;','&#x2797;','&#x27a1;','&#x27b0;','&#x27bf;','&#x2934;','&#x2935;','&#x2b05;','&#x2b06;','&#x2b07;','&#x2b1b;','&#x2b1c;','&#x2b50;','&#x2b55;','&#x3030;','&#x303d;','&#x3297;','&#x3299;','&#xe50a;');\n\t// END: emoji arrays\n\n\tif ( 'entities' === $type ) {\n\t\treturn $entities;\n\t}\n\n\treturn $partials;\n}\n\n/**\n * Shorten a URL, to be used as link text.\n *\n * @since 1.2.0\n * @since 4.4.0 Moved to wp-includes/formatting.php from wp-admin/includes/misc.php and added $length param.\n *\n * @param string $url    URL to shorten.\n * @param int    $length Optional. Maximum length of the shortened URL. Default 35 characters.\n * @return string Shortened URL.\n */\nfunction url_shorten( $url, $length = 35 ) {\n\t$stripped = str_replace( array( 'https://', 'http://', 'www.' ), '', $url );\n\t$short_url = untrailingslashit( $stripped );\n\n\tif ( strlen( $short_url ) > $length ) {\n\t\t$short_url = substr( $short_url, 0, $length - 3 ) . '&hellip;';\n\t}\n\treturn $short_url;\n}\n\n/**\n * Sanitizes a hex color.\n *\n * Returns either '', a 3 or 6 digit hex color (with #), or nothing.\n * For sanitizing values without a #, see sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|void\n */\nfunction sanitize_hex_color( $color ) {\n\tif ( '' === $color ) {\n\t\treturn '';\n\t}\n\n\t// 3 or 6 hex digits, or the empty string.\n\tif ( preg_match('|^#([A-Fa-f0-9]{3}){1,2}$|', $color ) ) {\n\t\treturn $color;\n\t}\n}\n\n/**\n * Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible.\n *\n * Saving hex colors without a hash puts the burden of adding the hash on the\n * UI, which makes it difficult to use or upgrade to other color types such as\n * rgba, hsl, rgb, and html color names.\n *\n * Returns either '', a 3 or 6 digit hex color (without a #), or null.\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|null\n */\nfunction sanitize_hex_color_no_hash( $color ) {\n\t$color = ltrim( $color, '#' );\n\n\tif ( '' === $color ) {\n\t\treturn '';\n\t}\n\n\treturn sanitize_hex_color( '#' . $color ) ? $color : null;\n}\n\n/**\n * Ensures that any hex color is properly hashed.\n * Otherwise, returns value untouched.\n *\n * This method should only be necessary if using sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string\n */\nfunction maybe_hash_hex_color( $color ) {\n\tif ( $unhashed = sanitize_hex_color_no_hash( $color ) ) {\n\t\treturn '#' . $unhashed;\n\t}\n\n\treturn $color;\n}\n", "<?php\n/**\n * Core Metadata API\n *\n * Functions for retrieving and manipulating metadata of various WordPress object types. Metadata\n * for an object is a represented by a simple key-value pair. Objects may contain multiple\n * metadata entries that share the same key and differ only in their value.\n *\n * @package WordPress\n * @subpackage Meta\n */\n\n/**\n * Add metadata for the specified object.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id  ID of the object metadata is for\n * @param string $meta_key   Metadata key\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param bool   $unique     Optional, default is false.\n *                           Whether the specified metadata key should be unique for the object.\n *                           If true, and the object already has a value for the specified metadata key,\n *                           no change will be made.\n * @return int|false The meta ID on success, false on failure.\n */\nfunction add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique = false) {\n\tglobal $wpdb;\n\n\tif ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) ) {\n\t\treturn false;\n\t}\n\n\t$object_id = absint( $object_id );\n\tif ( ! $object_id ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$column = sanitize_key($meta_type . '_id');\n\n\t// expected_slashed ($meta_key)\n\t$meta_key = wp_unslash($meta_key);\n\t$meta_value = wp_unslash($meta_value);\n\t$meta_value = sanitize_meta( $meta_key, $meta_value, $meta_type );\n\n\t/**\n\t * Filters whether to add metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user). Returning a non-null value\n\t * will effectively short-circuit the function.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param null|bool $check      Whether to allow adding metadata for the given type.\n\t * @param int       $object_id  Object ID.\n\t * @param string    $meta_key   Meta key.\n\t * @param mixed     $meta_value Meta value. Must be serializable if non-scalar.\n\t * @param bool      $unique     Whether the specified meta key should be unique\n\t *                              for the object. Optional. Default false.\n\t */\n\t$check = apply_filters( \"add_{$meta_type}_metadata\", null, $object_id, $meta_key, $meta_value, $unique );\n\tif ( null !== $check )\n\t\treturn $check;\n\n\tif ( $unique && $wpdb->get_var( $wpdb->prepare(\n\t\t\"SELECT COUNT(*) FROM $table WHERE meta_key = %s AND $column = %d\",\n\t\t$meta_key, $object_id ) ) )\n\t\treturn false;\n\n\t$_meta_value = $meta_value;\n\t$meta_value = maybe_serialize( $meta_value );\n\n\t/**\n\t * Fires immediately before meta of a specific type is added.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user).\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param int    $object_id  Object ID.\n\t * @param string $meta_key   Meta key.\n\t * @param mixed  $meta_value Meta value.\n\t */\n\tdo_action( \"add_{$meta_type}_meta\", $object_id, $meta_key, $_meta_value );\n\n\t$result = $wpdb->insert( $table, array(\n\t\t$column => $object_id,\n\t\t'meta_key' => $meta_key,\n\t\t'meta_value' => $meta_value\n\t) );\n\n\tif ( ! $result )\n\t\treturn false;\n\n\t$mid = (int) $wpdb->insert_id;\n\n\twp_cache_delete($object_id, $meta_type . '_meta');\n\n\t/**\n\t * Fires immediately after meta of a specific type is added.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user).\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int    $mid        The meta ID after successful update.\n\t * @param int    $object_id  Object ID.\n\t * @param string $meta_key   Meta key.\n\t * @param mixed  $meta_value Meta value.\n\t */\n\tdo_action( \"added_{$meta_type}_meta\", $mid, $object_id, $meta_key, $_meta_value );\n\n\treturn $mid;\n}\n\n/**\n * Update metadata for the specified object. If no value already exists for the specified object\n * ID and metadata key, the metadata will be added.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id  ID of the object metadata is for\n * @param string $meta_key   Metadata key\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param mixed  $prev_value Optional. If specified, only update existing metadata entries with\n * \t\t                     the specified value. Otherwise, update all entries.\n * @return int|bool Meta ID if the key didn't exist, true on successful update, false on failure.\n */\nfunction update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value = '') {\n\tglobal $wpdb;\n\n\tif ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) ) {\n\t\treturn false;\n\t}\n\n\t$object_id = absint( $object_id );\n\tif ( ! $object_id ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$column = sanitize_key($meta_type . '_id');\n\t$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';\n\n\t// expected_slashed ($meta_key)\n\t$raw_meta_key = $meta_key;\n\t$meta_key = wp_unslash($meta_key);\n\t$passed_value = $meta_value;\n\t$meta_value = wp_unslash($meta_value);\n\t$meta_value = sanitize_meta( $meta_key, $meta_value, $meta_type );\n\n\t/**\n\t * Filters whether to update metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user). Returning a non-null value\n\t * will effectively short-circuit the function.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param null|bool $check      Whether to allow updating metadata for the given type.\n\t * @param int       $object_id  Object ID.\n\t * @param string    $meta_key   Meta key.\n\t * @param mixed     $meta_value Meta value. Must be serializable if non-scalar.\n\t * @param mixed     $prev_value Optional. If specified, only update existing\n\t *                              metadata entries with the specified value.\n\t *                              Otherwise, update all entries.\n\t */\n\t$check = apply_filters( \"update_{$meta_type}_metadata\", null, $object_id, $meta_key, $meta_value, $prev_value );\n\tif ( null !== $check )\n\t\treturn (bool) $check;\n\n\t// Compare existing value to new value if no prev value given and the key exists only once.\n\tif ( empty($prev_value) ) {\n\t\t$old_value = get_metadata($meta_type, $object_id, $meta_key);\n\t\tif ( count($old_value) == 1 ) {\n\t\t\tif ( $old_value[0] === $meta_value )\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t$meta_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT $id_column FROM $table WHERE meta_key = %s AND $column = %d\", $meta_key, $object_id ) );\n\tif ( empty( $meta_ids ) ) {\n\t\treturn add_metadata( $meta_type, $object_id, $raw_meta_key, $passed_value );\n\t}\n\n\t$_meta_value = $meta_value;\n\t$meta_value = maybe_serialize( $meta_value );\n\n\t$data  = compact( 'meta_value' );\n\t$where = array( $column => $object_id, 'meta_key' => $meta_key );\n\n\tif ( !empty( $prev_value ) ) {\n\t\t$prev_value = maybe_serialize($prev_value);\n\t\t$where['meta_value'] = $prev_value;\n\t}\n\n\tforeach ( $meta_ids as $meta_id ) {\n\t\t/**\n\t\t * Fires immediately before updating metadata of a specific type.\n\t\t *\n\t\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t\t * object type (comment, post, or user).\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param int    $meta_id    ID of the metadata entry to update.\n\t\t * @param int    $object_id  Object ID.\n\t\t * @param string $meta_key   Meta key.\n\t\t * @param mixed  $meta_value Meta value.\n\t\t */\n\t\tdo_action( \"update_{$meta_type}_meta\", $meta_id, $object_id, $meta_key, $_meta_value );\n\n\t\tif ( 'post' == $meta_type ) {\n\t\t\t/**\n\t\t\t * Fires immediately before updating a post's metadata.\n\t\t\t *\n\t\t\t * @since 2.9.0\n\t\t\t *\n\t\t\t * @param int    $meta_id    ID of metadata entry to update.\n\t\t\t * @param int    $object_id  Object ID.\n\t\t\t * @param string $meta_key   Meta key.\n\t\t\t * @param mixed  $meta_value Meta value.\n\t\t\t */\n\t\t\tdo_action( 'update_postmeta', $meta_id, $object_id, $meta_key, $meta_value );\n\t\t}\n\t}\n\n\t$result = $wpdb->update( $table, $data, $where );\n\tif ( ! $result )\n\t\treturn false;\n\n\twp_cache_delete($object_id, $meta_type . '_meta');\n\n\tforeach ( $meta_ids as $meta_id ) {\n\t\t/**\n\t\t * Fires immediately after updating metadata of a specific type.\n\t\t *\n\t\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t\t * object type (comment, post, or user).\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param int    $meta_id    ID of updated metadata entry.\n\t\t * @param int    $object_id  Object ID.\n\t\t * @param string $meta_key   Meta key.\n\t\t * @param mixed  $meta_value Meta value.\n\t\t */\n\t\tdo_action( \"updated_{$meta_type}_meta\", $meta_id, $object_id, $meta_key, $_meta_value );\n\n\t\tif ( 'post' == $meta_type ) {\n\t\t\t/**\n\t\t\t * Fires immediately after updating a post's metadata.\n\t\t\t *\n\t\t\t * @since 2.9.0\n\t\t\t *\n\t\t\t * @param int    $meta_id    ID of updated metadata entry.\n\t\t\t * @param int    $object_id  Object ID.\n\t\t\t * @param string $meta_key   Meta key.\n\t\t\t * @param mixed  $meta_value Meta value.\n\t\t\t */\n\t\t\tdo_action( 'updated_postmeta', $meta_id, $object_id, $meta_key, $meta_value );\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Delete metadata for the specified object.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id  ID of the object metadata is for\n * @param string $meta_key   Metadata key\n * @param mixed  $meta_value Optional. Metadata value. Must be serializable if non-scalar. If specified, only delete\n *                           metadata entries with this value. Otherwise, delete all entries with the specified meta_key.\n *                           Pass `null, `false`, or an empty string to skip this check. (For backward compatibility,\n *                           it is not possible to pass an empty string to delete those entries with an empty string\n *                           for a value.)\n * @param bool   $delete_all Optional, default is false. If true, delete matching metadata entries for all objects,\n *                           ignoring the specified object_id. Otherwise, only delete matching metadata entries for\n *                           the specified object_id.\n * @return bool True on successful delete, false on failure.\n */\nfunction delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = false) {\n\tglobal $wpdb;\n\n\tif ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) && ! $delete_all ) {\n\t\treturn false;\n\t}\n\n\t$object_id = absint( $object_id );\n\tif ( ! $object_id && ! $delete_all ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$type_column = sanitize_key($meta_type . '_id');\n\t$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';\n\t// expected_slashed ($meta_key)\n\t$meta_key = wp_unslash($meta_key);\n\t$meta_value = wp_unslash($meta_value);\n\n\t/**\n\t * Filters whether to delete metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user). Returning a non-null value\n\t * will effectively short-circuit the function.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param null|bool $delete     Whether to allow metadata deletion of the given type.\n\t * @param int       $object_id  Object ID.\n\t * @param string    $meta_key   Meta key.\n\t * @param mixed     $meta_value Meta value. Must be serializable if non-scalar.\n\t * @param bool      $delete_all Whether to delete the matching metadata entries\n\t *                              for all objects, ignoring the specified $object_id.\n\t *                              Default false.\n\t */\n\t$check = apply_filters( \"delete_{$meta_type}_metadata\", null, $object_id, $meta_key, $meta_value, $delete_all );\n\tif ( null !== $check )\n\t\treturn (bool) $check;\n\n\t$_meta_value = $meta_value;\n\t$meta_value = maybe_serialize( $meta_value );\n\n\t$query = $wpdb->prepare( \"SELECT $id_column FROM $table WHERE meta_key = %s\", $meta_key );\n\n\tif ( !$delete_all )\n\t\t$query .= $wpdb->prepare(\" AND $type_column = %d\", $object_id );\n\n\tif ( '' !== $meta_value && null !== $meta_value && false !== $meta_value )\n\t\t$query .= $wpdb->prepare(\" AND meta_value = %s\", $meta_value );\n\n\t$meta_ids = $wpdb->get_col( $query );\n\tif ( !count( $meta_ids ) )\n\t\treturn false;\n\n\tif ( $delete_all ) {\n\t\tif ( '' !== $meta_value && null !== $meta_value && false !== $meta_value ) {\n\t\t\t$object_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT $type_column FROM $table WHERE meta_key = %s AND meta_value = %s\", $meta_key, $meta_value ) );\n\t\t} else {\n\t\t\t$object_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT $type_column FROM $table WHERE meta_key = %s\", $meta_key ) );\n\t\t}\n\t}\n\n\t/**\n\t * Fires immediately before deleting metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user).\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param array  $meta_ids   An array of metadata entry IDs to delete.\n\t * @param int    $object_id  Object ID.\n\t * @param string $meta_key   Meta key.\n\t * @param mixed  $meta_value Meta value.\n\t */\n\tdo_action( \"delete_{$meta_type}_meta\", $meta_ids, $object_id, $meta_key, $_meta_value );\n\n\t// Old-style action.\n\tif ( 'post' == $meta_type ) {\n\t\t/**\n\t\t * Fires immediately before deleting metadata for a post.\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param array $meta_ids An array of post metadata entry IDs to delete.\n\t\t */\n\t\tdo_action( 'delete_postmeta', $meta_ids );\n\t}\n\n\t$query = \"DELETE FROM $table WHERE $id_column IN( \" . implode( ',', $meta_ids ) . \" )\";\n\n\t$count = $wpdb->query($query);\n\n\tif ( !$count )\n\t\treturn false;\n\n\tif ( $delete_all ) {\n\t\tforeach ( (array) $object_ids as $o_id ) {\n\t\t\twp_cache_delete($o_id, $meta_type . '_meta');\n\t\t}\n\t} else {\n\t\twp_cache_delete($object_id, $meta_type . '_meta');\n\t}\n\n\t/**\n\t * Fires immediately after deleting metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook name, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user).\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param array  $meta_ids   An array of deleted metadata entry IDs.\n\t * @param int    $object_id  Object ID.\n\t * @param string $meta_key   Meta key.\n\t * @param mixed  $meta_value Meta value.\n\t */\n\tdo_action( \"deleted_{$meta_type}_meta\", $meta_ids, $object_id, $meta_key, $_meta_value );\n\n\t// Old-style action.\n\tif ( 'post' == $meta_type ) {\n\t\t/**\n\t\t * Fires immediately after deleting metadata for a post.\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param array $meta_ids An array of deleted post metadata entry IDs.\n\t\t */\n\t\tdo_action( 'deleted_postmeta', $meta_ids );\n\t}\n\n\treturn true;\n}\n\n/**\n * Retrieve metadata for the specified object.\n *\n * @since 2.9.0\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id ID of the object metadata is for\n * @param string $meta_key  Optional. Metadata key. If not specified, retrieve all metadata for\n * \t\t                    the specified object.\n * @param bool   $single    Optional, default is false.\n *                          If true, return only the first value of the specified meta_key.\n *                          This parameter has no effect if meta_key is not specified.\n * @return mixed Single metadata value, or array of values\n */\nfunction get_metadata($meta_type, $object_id, $meta_key = '', $single = false) {\n\tif ( ! $meta_type || ! is_numeric( $object_id ) ) {\n\t\treturn false;\n\t}\n\n\t$object_id = absint( $object_id );\n\tif ( ! $object_id ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Filters whether to retrieve metadata of a specific type.\n\t *\n\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t * object type (comment, post, or user). Returning a non-null value\n\t * will effectively short-circuit the function.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param null|array|string $value     The value get_metadata() should return - a single metadata value,\n\t *                                     or an array of values.\n\t * @param int               $object_id Object ID.\n\t * @param string            $meta_key  Meta key.\n\t * @param bool              $single    Whether to return only the first value of the specified $meta_key.\n\t */\n\t$check = apply_filters( \"get_{$meta_type}_metadata\", null, $object_id, $meta_key, $single );\n\tif ( null !== $check ) {\n\t\tif ( $single && is_array( $check ) )\n\t\t\treturn $check[0];\n\t\telse\n\t\t\treturn $check;\n\t}\n\n\t$meta_cache = wp_cache_get($object_id, $meta_type . '_meta');\n\n\tif ( !$meta_cache ) {\n\t\t$meta_cache = update_meta_cache( $meta_type, array( $object_id ) );\n\t\t$meta_cache = $meta_cache[$object_id];\n\t}\n\n\tif ( ! $meta_key ) {\n\t\treturn $meta_cache;\n\t}\n\n\tif ( isset($meta_cache[$meta_key]) ) {\n\t\tif ( $single )\n\t\t\treturn maybe_unserialize( $meta_cache[$meta_key][0] );\n\t\telse\n\t\t\treturn array_map('maybe_unserialize', $meta_cache[$meta_key]);\n\t}\n\n\tif ($single)\n\t\treturn '';\n\telse\n\t\treturn array();\n}\n\n/**\n * Determine if a meta key is set for a given object\n *\n * @since 3.3.0\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $object_id ID of the object metadata is for\n * @param string $meta_key  Metadata key.\n * @return bool True of the key is set, false if not.\n */\nfunction metadata_exists( $meta_type, $object_id, $meta_key ) {\n\tif ( ! $meta_type || ! is_numeric( $object_id ) ) {\n\t\treturn false;\n\t}\n\n\t$object_id = absint( $object_id );\n\tif ( ! $object_id ) {\n\t\treturn false;\n\t}\n\n\t/** This filter is documented in wp-includes/meta.php */\n\t$check = apply_filters( \"get_{$meta_type}_metadata\", null, $object_id, $meta_key, true );\n\tif ( null !== $check )\n\t\treturn (bool) $check;\n\n\t$meta_cache = wp_cache_get( $object_id, $meta_type . '_meta' );\n\n\tif ( !$meta_cache ) {\n\t\t$meta_cache = update_meta_cache( $meta_type, array( $object_id ) );\n\t\t$meta_cache = $meta_cache[$object_id];\n\t}\n\n\tif ( isset( $meta_cache[ $meta_key ] ) )\n\t\treturn true;\n\n\treturn false;\n}\n\n/**\n * Get meta data by meta ID\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, term, or user).\n * @param int    $meta_id   ID for a specific meta row\n * @return object|false Meta object or false.\n */\nfunction get_metadata_by_mid( $meta_type, $meta_id ) {\n\tglobal $wpdb;\n\n\tif ( ! $meta_type || ! is_numeric( $meta_id ) || floor( $meta_id ) != $meta_id ) {\n\t\treturn false;\n\t}\n\n\t$meta_id = intval( $meta_id );\n\tif ( $meta_id <= 0 ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$id_column = ( 'user' == $meta_type ) ? 'umeta_id' : 'meta_id';\n\n\t$meta = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM $table WHERE $id_column = %d\", $meta_id ) );\n\n\tif ( empty( $meta ) )\n\t\treturn false;\n\n\tif ( isset( $meta->meta_value ) )\n\t\t$meta->meta_value = maybe_unserialize( $meta->meta_value );\n\n\treturn $meta;\n}\n\n/**\n * Update meta data by meta ID\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int    $meta_id    ID for a specific meta row\n * @param string $meta_value Metadata value\n * @param string $meta_key   Optional, you can provide a meta key to update it\n * @return bool True on successful update, false on failure.\n */\nfunction update_metadata_by_mid( $meta_type, $meta_id, $meta_value, $meta_key = false ) {\n\tglobal $wpdb;\n\n\t// Make sure everything is valid.\n\tif ( ! $meta_type || ! is_numeric( $meta_id ) || floor( $meta_id ) != $meta_id ) {\n\t\treturn false;\n\t}\n\n\t$meta_id = intval( $meta_id );\n\tif ( $meta_id <= 0 ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$column = sanitize_key($meta_type . '_id');\n\t$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';\n\n\t// Fetch the meta and go on if it's found.\n\tif ( $meta = get_metadata_by_mid( $meta_type, $meta_id ) ) {\n\t\t$original_key = $meta->meta_key;\n\t\t$object_id = $meta->{$column};\n\n\t\t// If a new meta_key (last parameter) was specified, change the meta key,\n\t\t// otherwise use the original key in the update statement.\n\t\tif ( false === $meta_key ) {\n\t\t\t$meta_key = $original_key;\n\t\t} elseif ( ! is_string( $meta_key ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Sanitize the meta\n\t\t$_meta_value = $meta_value;\n\t\t$meta_value = sanitize_meta( $meta_key, $meta_value, $meta_type );\n\t\t$meta_value = maybe_serialize( $meta_value );\n\n\t\t// Format the data query arguments.\n\t\t$data = array(\n\t\t\t'meta_key' => $meta_key,\n\t\t\t'meta_value' => $meta_value\n\t\t);\n\n\t\t// Format the where query arguments.\n\t\t$where = array();\n\t\t$where[$id_column] = $meta_id;\n\n\t\t/** This action is documented in wp-includes/meta.php */\n\t\tdo_action( \"update_{$meta_type}_meta\", $meta_id, $object_id, $meta_key, $_meta_value );\n\n\t\tif ( 'post' == $meta_type ) {\n\t\t\t/** This action is documented in wp-includes/meta.php */\n\t\t\tdo_action( 'update_postmeta', $meta_id, $object_id, $meta_key, $meta_value );\n\t\t}\n\n\t\t// Run the update query, all fields in $data are %s, $where is a %d.\n\t\t$result = $wpdb->update( $table, $data, $where, '%s', '%d' );\n\t\tif ( ! $result )\n\t\t\treturn false;\n\n\t\t// Clear the caches.\n\t\twp_cache_delete($object_id, $meta_type . '_meta');\n\n\t\t/** This action is documented in wp-includes/meta.php */\n\t\tdo_action( \"updated_{$meta_type}_meta\", $meta_id, $object_id, $meta_key, $_meta_value );\n\n\t\tif ( 'post' == $meta_type ) {\n\t\t\t/** This action is documented in wp-includes/meta.php */\n\t\t\tdo_action( 'updated_postmeta', $meta_id, $object_id, $meta_key, $meta_value );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// And if the meta was not found.\n\treturn false;\n}\n\n/**\n * Delete meta data by meta ID\n *\n * @since 3.3.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, term, or user).\n * @param int    $meta_id   ID for a specific meta row\n * @return bool True on successful delete, false on failure.\n */\nfunction delete_metadata_by_mid( $meta_type, $meta_id ) {\n\tglobal $wpdb;\n\n\t// Make sure everything is valid.\n\tif ( ! $meta_type || ! is_numeric( $meta_id ) || floor( $meta_id ) != $meta_id ) {\n\t\treturn false;\n\t}\n\n\t$meta_id = intval( $meta_id );\n\tif ( $meta_id <= 0 ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t// object and id columns\n\t$column = sanitize_key($meta_type . '_id');\n\t$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';\n\n\t// Fetch the meta and go on if it's found.\n\tif ( $meta = get_metadata_by_mid( $meta_type, $meta_id ) ) {\n\t\t$object_id = $meta->{$column};\n\n\t\t/** This action is documented in wp-includes/meta.php */\n\t\tdo_action( \"delete_{$meta_type}_meta\", (array) $meta_id, $object_id, $meta->meta_key, $meta->meta_value );\n\n\t\t// Old-style action.\n\t\tif ( 'post' == $meta_type || 'comment' == $meta_type ) {\n\t\t\t/**\n\t\t\t * Fires immediately before deleting post or comment metadata of a specific type.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t\t\t * object type (post or comment).\n\t\t\t *\n\t\t\t * @since 3.4.0\n\t\t\t *\n\t\t\t * @param int $meta_id ID of the metadata entry to delete.\n\t\t\t */\n\t\t\tdo_action( \"delete_{$meta_type}meta\", $meta_id );\n\t\t}\n\n\t\t// Run the query, will return true if deleted, false otherwise\n\t\t$result = (bool) $wpdb->delete( $table, array( $id_column => $meta_id ) );\n\n\t\t// Clear the caches.\n\t\twp_cache_delete($object_id, $meta_type . '_meta');\n\n\t\t/** This action is documented in wp-includes/meta.php */\n\t\tdo_action( \"deleted_{$meta_type}_meta\", (array) $meta_id, $object_id, $meta->meta_key, $meta->meta_value );\n\n\t\t// Old-style action.\n\t\tif ( 'post' == $meta_type || 'comment' == $meta_type ) {\n\t\t\t/**\n\t\t\t * Fires immediately after deleting post or comment metadata of a specific type.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook, `$meta_type`, refers to the meta\n\t\t\t * object type (post or comment).\n\t\t\t *\n\t\t\t * @since 3.4.0\n\t\t\t *\n\t\t\t * @param int $meta_ids Deleted metadata entry ID.\n\t\t\t */\n\t\t\tdo_action( \"deleted_{$meta_type}meta\", $meta_id );\n\t\t}\n\n\t\treturn $result;\n\n\t}\n\n\t// Meta id was not found.\n\treturn false;\n}\n\n/**\n * Update the metadata cache for the specified objects.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string    $meta_type  Type of object metadata is for (e.g., comment, post, or user)\n * @param int|array $object_ids Array or comma delimited list of object IDs to update cache for\n * @return array|false Metadata cache for the specified objects, or false on failure.\n */\nfunction update_meta_cache($meta_type, $object_ids) {\n\tglobal $wpdb;\n\n\tif ( ! $meta_type || ! $object_ids ) {\n\t\treturn false;\n\t}\n\n\t$table = _get_meta_table( $meta_type );\n\tif ( ! $table ) {\n\t\treturn false;\n\t}\n\n\t$column = sanitize_key($meta_type . '_id');\n\n\tif ( !is_array($object_ids) ) {\n\t\t$object_ids = preg_replace('|[^0-9,]|', '', $object_ids);\n\t\t$object_ids = explode(',', $object_ids);\n\t}\n\n\t$object_ids = array_map('intval', $object_ids);\n\n\t$cache_key = $meta_type . '_meta';\n\t$ids = array();\n\t$cache = array();\n\tforeach ( $object_ids as $id ) {\n\t\t$cached_object = wp_cache_get( $id, $cache_key );\n\t\tif ( false === $cached_object )\n\t\t\t$ids[] = $id;\n\t\telse\n\t\t\t$cache[$id] = $cached_object;\n\t}\n\n\tif ( empty( $ids ) )\n\t\treturn $cache;\n\n\t// Get meta info\n\t$id_list = join( ',', $ids );\n\t$id_column = 'user' == $meta_type ? 'umeta_id' : 'meta_id';\n\t$meta_list = $wpdb->get_results( \"SELECT $column, meta_key, meta_value FROM $table WHERE $column IN ($id_list) ORDER BY $id_column ASC\", ARRAY_A );\n\n\tif ( !empty($meta_list) ) {\n\t\tforeach ( $meta_list as $metarow) {\n\t\t\t$mpid = intval($metarow[$column]);\n\t\t\t$mkey = $metarow['meta_key'];\n\t\t\t$mval = $metarow['meta_value'];\n\n\t\t\t// Force subkeys to be array type:\n\t\t\tif ( !isset($cache[$mpid]) || !is_array($cache[$mpid]) )\n\t\t\t\t$cache[$mpid] = array();\n\t\t\tif ( !isset($cache[$mpid][$mkey]) || !is_array($cache[$mpid][$mkey]) )\n\t\t\t\t$cache[$mpid][$mkey] = array();\n\n\t\t\t// Add a value to the current pid/key:\n\t\t\t$cache[$mpid][$mkey][] = $mval;\n\t\t}\n\t}\n\n\tforeach ( $ids as $id ) {\n\t\tif ( ! isset($cache[$id]) )\n\t\t\t$cache[$id] = array();\n\t\twp_cache_add( $id, $cache[$id], $cache_key );\n\t}\n\n\treturn $cache;\n}\n\n/**\n * Retrieves the queue for lazy-loading metadata.\n *\n * @since 4.5.0\n *\n * @return WP_Metadata_Lazyloader $lazyloader Metadata lazyloader queue.\n */\nfunction wp_metadata_lazyloader() {\n\tstatic $wp_metadata_lazyloader;\n\n\tif ( null === $wp_metadata_lazyloader ) {\n\t\t$wp_metadata_lazyloader = new WP_Metadata_Lazyloader();\n\t}\n\n\treturn $wp_metadata_lazyloader;\n}\n\n/**\n * Given a meta query, generates SQL clauses to be appended to a main query.\n *\n * @since 3.2.0\n *\n * @see WP_Meta_Query\n *\n * @param array $meta_query         A meta query.\n * @param string $type              Type of meta.\n * @param string $primary_table     Primary database table name.\n * @param string $primary_id_column Primary ID column name.\n * @param object $context           Optional. The main query object\n * @return array Associative array of `JOIN` and `WHERE` SQL.\n */\nfunction get_meta_sql( $meta_query, $type, $primary_table, $primary_id_column, $context = null ) {\n\t$meta_query_obj = new WP_Meta_Query( $meta_query );\n\treturn $meta_query_obj->get_sql( $type, $primary_table, $primary_id_column, $context );\n}\n\n/**\n * Retrieve the name of the metadata table for the specified object type.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $type Type of object to get metadata table for (e.g., comment, post, or user)\n * @return string|false Metadata table name, or false if no metadata table exists\n */\nfunction _get_meta_table($type) {\n\tglobal $wpdb;\n\n\t$table_name = $type . 'meta';\n\n\tif ( empty($wpdb->$table_name) )\n\t\treturn false;\n\n\treturn $wpdb->$table_name;\n}\n\n/**\n * Determine whether a meta key is protected.\n *\n * @since 3.1.3\n *\n * @param string      $meta_key Meta key\n * @param string|null $meta_type\n * @return bool True if the key is protected, false otherwise.\n */\nfunction is_protected_meta( $meta_key, $meta_type = null ) {\n\t$protected = ( '_' == $meta_key[0] );\n\n\t/**\n\t * Filters whether a meta key is protected.\n\t *\n\t * @since 3.2.0\n\t *\n\t * @param bool   $protected Whether the key is protected. Default false.\n\t * @param string $meta_key  Meta key.\n\t * @param string $meta_type Meta type.\n\t */\n\treturn apply_filters( 'is_protected_meta', $protected, $meta_key, $meta_type );\n}\n\n/**\n * Sanitize meta value.\n *\n * @since 3.1.3\n *\n * @param string $meta_key       Meta key.\n * @param mixed  $meta_value     Meta value to sanitize.\n * @param string $object_type    Type of object the meta is registered to.\n *\n * @return mixed Sanitized $meta_value.\n */\nfunction sanitize_meta( $meta_key, $meta_value, $object_type ) {\n\t/**\n\t * Filters the sanitization of a specific meta key of a specific meta type.\n\t *\n\t * The dynamic portions of the hook name, `$meta_type`, and `$meta_key`,\n\t * refer to the metadata object type (comment, post, or user) and the meta\n\t * key value, respectively.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param mixed  $meta_value      Meta value to sanitize.\n\t * @param string $meta_key        Meta key.\n\t * @param string $object_type     Object type.\n\t */\n\treturn apply_filters( \"sanitize_{$object_type}_meta_{$meta_key}\", $meta_value, $meta_key, $object_type );\n}\n\n/**\n * Registers a meta key.\n *\n * @since 3.3.0\n * @since 4.6.0 {@link https://core.trac.wordpress.org/ticket/35658 Modified\n *              to support an array of data to attach to registered meta keys}. Previous arguments for\n *              `$sanitize_callback` and `$auth_callback` have been folded into this array.\n *\n * @param string $object_type    Type of object this meta is registered to.\n * @param string $meta_key       Meta key to register.\n * @param array  $args {\n *     Data used to describe the meta key when registered.\n *\n *     @type string $type              The type of data associated with this meta key.\n *                                     Valid values are 'string', 'boolean', 'integer', and 'number'.\n *     @type string $description       A description of the data attached to this meta key.\n *     @type bool   $single            Whether the meta key has one value per object, or an array of values per object.\n *     @type string $sanitize_callback A function or method to call when sanitizing `$meta_key` data.\n *     @type string $auth_callback     Optional. A function or method to call when performing edit_post_meta, add_post_meta, and delete_post_meta capability checks.\n *     @type bool   $show_in_rest      Whether data associated with this meta key can be considered public.\n * }\n * @param string|array $deprecated Deprecated. Use `$args` instead.\n *\n * @return bool True if the meta key was successfully registered in the global array, false if not.\n *                       Registering a meta key with distinct sanitize and auth callbacks will fire those\n *                       callbacks, but will not add to the global registry.\n */\nfunction register_meta( $object_type, $meta_key, $args, $deprecated = null ) {\n\tglobal $wp_meta_keys;\n\n\tif ( ! is_array( $wp_meta_keys ) ) {\n\t\t$wp_meta_keys = array();\n\t}\n\n\t$defaults = array(\n\t\t'type'              => 'string',\n\t\t'description'       => '',\n\t\t'single'            => false,\n\t\t'sanitize_callback' => null,\n\t\t'auth_callback'     => null,\n\t\t'show_in_rest'      => false,\n\t);\n\n\t// There used to be individual args for sanitize and auth callbacks\n\t$has_old_sanitize_cb = false;\n\t$has_old_auth_cb = false;\n\n\tif ( is_callable( $args ) ) {\n\t\t$args = array(\n\t\t\t'sanitize_callback' => $args,\n\t\t);\n\n\t\t$has_old_sanitize_cb = true;\n\t} else {\n\t\t$args = (array) $args;\n\t}\n\n\tif ( is_callable( $deprecated ) ) {\n\t\t$args['auth_callback'] = $deprecated;\n\t\t$has_old_auth_cb = true;\n\t}\n\n\t/**\n\t * Filters the registration arguments when registering meta.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param array  $args        Array of meta registration arguments.\n\t * @param array  $defaults    Array of default arguments.\n\t * @param string $object_type Object type.\n\t * @param string $meta_key    Meta key.\n\t */\n\t$args = apply_filters( 'register_meta_args', $args, $defaults, $object_type, $meta_key );\n\t$args = wp_parse_args( $args, $defaults );\n\n\t// If `auth_callback` is not provided, fall back to `is_protected_meta()`.\n\tif ( empty( $args['auth_callback'] ) ) {\n\t\tif ( is_protected_meta( $meta_key, $object_type ) ) {\n\t\t\t$args['auth_callback'] = '__return_false';\n\t\t} else {\n\t\t\t$args['auth_callback'] = '__return_true';\n\t\t}\n\t}\n\n\t// Back-compat: old sanitize and auth callbacks are applied to all of an object type.\n\tif ( is_callable( $args['sanitize_callback'] ) ) {\n\t\tadd_filter( \"sanitize_{$object_type}_meta_{$meta_key}\", $args['sanitize_callback'], 10, 3 );\n\t}\n\n\tif ( is_callable( $args['auth_callback'] ) ) {\n\t\tadd_filter( \"auth_{$object_type}_meta_{$meta_key}\", $args['auth_callback'], 10, 6 );\n\t}\n\n\t// Global registry only contains meta keys registered with the array of arguments added in 4.6.0.\n\tif ( ! $has_old_auth_cb && ! $has_old_sanitize_cb ) {\n\t\t$wp_meta_keys[ $object_type ][ $meta_key ] = $args;\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks if a meta key is registered.\n *\n * @since 4.6.0\n *\n * @param string $object_type    The type of object.\n * @param string $meta_key       The meta key.\n *\n * @return bool True if the meta key is registered to the object type. False if not.\n */\nfunction registered_meta_key_exists( $object_type, $meta_key ) {\n\tglobal $wp_meta_keys;\n\n\tif ( ! is_array( $wp_meta_keys ) ) {\n\t\treturn false;\n\t}\n\n\tif ( ! isset( $wp_meta_keys[ $object_type ] ) ) {\n\t\treturn false;\n\t}\n\n\tif ( isset( $wp_meta_keys[ $object_type ][ $meta_key ] ) ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Unregisters a meta key from the list of registered keys.\n *\n * @since 4.6.0\n *\n * @param string $object_type The type of object.\n * @param string $meta_key    The meta key.\n * @return bool True if successful. False if the meta key was not registered.\n */\nfunction unregister_meta_key( $object_type, $meta_key ) {\n\tglobal $wp_meta_keys;\n\n\tif ( ! registered_meta_key_exists( $object_type, $meta_key ) ) {\n\t\treturn false;\n\t}\n\n\t$args = $wp_meta_keys[ $object_type ][ $meta_key ];\n\n\tif ( isset( $args['sanitize_callback'] ) && is_callable( $args['sanitize_callback'] ) ) {\n\t\tremove_filter( \"sanitize_{$object_type}_meta_{$meta_key}\", $args['sanitize_callback'] );\n\t}\n\n\tif ( isset( $args['auth_callback'] ) && is_callable( $args['auth_callback'] ) ) {\n\t\tremove_filter( \"auth_{$object_type}_meta_{$meta_key}\", $args['auth_callback'] );\n\t}\n\n\tunset( $wp_meta_keys[ $object_type ][ $meta_key ] );\n\n\t// Do some clean up\n\tif ( empty( $wp_meta_keys[ $object_type ] ) ) {\n\t\tunset( $wp_meta_keys[ $object_type ] );\n\t}\n\n\treturn true;\n}\n\n/**\n * Retrieves a list of registered meta keys for an object type.\n *\n * @since 4.6.0\n *\n * @param string $object_type The type of object. Post, comment, user, term.\n * @return array List of registered meta keys.\n */\nfunction get_registered_meta_keys( $object_type ) {\n\tglobal $wp_meta_keys;\n\n\tif ( ! is_array( $wp_meta_keys ) || ! isset( $wp_meta_keys[ $object_type ] ) ) {\n\t\treturn array();\n\t}\n\n\treturn $wp_meta_keys[ $object_type ];\n}\n\n/**\n * Retrieves registered metadata for a specified object.\n *\n * @since 4.6.0\n *\n * @param string $object_type Type of object to request metadata for. (e.g. comment, post, term, user)\n * @param int    $object_id   ID of the object the metadata is for.\n * @param string $meta_key    Optional. Registered metadata key. If not specified, retrieve all registered\n *                            metadata for the specified object.\n * @return mixed A single value or array of values for a key if specified. An array of all registered keys\n *               and values for an object ID if not.\n */\nfunction get_registered_metadata( $object_type, $object_id, $meta_key = '' ) {\n\tif ( ! empty( $meta_key ) ) {\n\t\tif ( ! registered_meta_key_exists( $object_type, $meta_key ) ) {\n\t\t\treturn false;\n\t\t}\n\t\t$meta_keys = get_registered_meta_keys( $object_type );\n\t\t$meta_key_data = $meta_keys[ $meta_key ];\n\n\t\t$data = get_metadata( $object_type, $object_id, $meta_key, $meta_key_data['single'] );\n\n\t\treturn $data;\n\t}\n\n\t$data = get_metadata( $object_type, $object_id );\n\n\t$meta_keys = get_registered_meta_keys( $object_type );\n\t$registered_data = array();\n\n\t// Someday, array_filter()\n\tforeach ( $meta_keys as $k => $v ) {\n\t\tif ( isset( $data[ $k ] ) ) {\n\t\t\t$registered_data[ $k ] = $data[ $k ];\n\t\t}\n\t}\n\n\treturn $registered_data;\n}\n\n/**\n * Filter out `register_meta()` args based on a whitelist.\n * `register_meta()` args may change over time, so requiring the whitelist\n * to be explicitly turned off is a warranty seal of sorts.\n *\n * @access private\n * @since  4.6.0\n *\n * @param  array $args         Arguments from `register_meta()`.\n * @param  array $default_args Default arguments for `register_meta()`.\n *\n * @return array Filtered arguments.\n */\nfunction _wp_register_meta_args_whitelist( $args, $default_args ) {\n\t$whitelist = array_keys( $default_args );\n\n\t// In an anonymous function world, this would be better as an array_filter()\n\tforeach ( $args as $key => $value ) {\n\t\tif ( ! in_array( $key, $whitelist ) ) {\n\t\t\tunset( $args[ $key ] );\n\t\t}\n\t}\n\n\treturn $args;\n}\n", "<?php\n/**\n * Core Post API\n *\n * @package WordPress\n * @subpackage Post\n */\n\n//\n// Post Type Registration\n//\n\n/**\n * Creates the initial post types when 'init' action is fired.\n *\n * See {@see 'init'}.\n *\n * @since 2.9.0\n */\nfunction create_initial_post_types() {\n\tregister_post_type( 'post', array(\n\t\t'labels' => array(\n\t\t\t'name_admin_bar' => _x( 'Post', 'add new from admin bar' ),\n\t\t),\n\t\t'public'  => true,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */\n\t\t'capability_type' => 'post',\n\t\t'map_meta_cap' => true,\n\t\t'menu_position' => 5,\n\t\t'hierarchical' => false,\n\t\t'rewrite' => false,\n\t\t'query_var' => false,\n\t\t'delete_with_user' => true,\n\t\t'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'trackbacks', 'custom-fields', 'comments', 'revisions', 'post-formats' ),\n\t\t'show_in_rest' => true,\n\t\t'rest_base' => 'posts',\n\t\t'rest_controller_class' => 'WP_REST_Posts_Controller',\n\t) );\n\n\tregister_post_type( 'page', array(\n\t\t'labels' => array(\n\t\t\t'name_admin_bar' => _x( 'Page', 'add new from admin bar' ),\n\t\t),\n\t\t'public' => true,\n\t\t'publicly_queryable' => false,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */\n\t\t'capability_type' => 'page',\n\t\t'map_meta_cap' => true,\n\t\t'menu_position' => 20,\n\t\t'hierarchical' => true,\n\t\t'rewrite' => false,\n\t\t'query_var' => false,\n\t\t'delete_with_user' => true,\n\t\t'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'page-attributes', 'custom-fields', 'comments', 'revisions' ),\n\t\t'show_in_rest' => true,\n\t\t'rest_base' => 'pages',\n\t\t'rest_controller_class' => 'WP_REST_Posts_Controller',\n\t) );\n\n\tregister_post_type( 'attachment', array(\n\t\t'labels' => array(\n\t\t\t'name' => _x('Media', 'post type general name'),\n\t\t\t'name_admin_bar' => _x( 'Media', 'add new from admin bar' ),\n\t\t\t'add_new' => _x( 'Add New', 'add new media' ),\n \t\t\t'edit_item' => __( 'Edit Media' ),\n \t\t\t'view_item' => __( 'View Attachment Page' ),\n\t\t\t'attributes' => __( 'Attachment Attributes' ),\n\t\t),\n\t\t'public' => true,\n\t\t'show_ui' => true,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'_edit_link' => 'post.php?post=%d', /* internal use only. don't use this when registering your own post type. */\n\t\t'capability_type' => 'post',\n\t\t'capabilities' => array(\n\t\t\t'create_posts' => 'upload_files',\n\t\t),\n\t\t'map_meta_cap' => true,\n\t\t'hierarchical' => false,\n\t\t'rewrite' => false,\n\t\t'query_var' => false,\n\t\t'show_in_nav_menus' => false,\n\t\t'delete_with_user' => true,\n\t\t'supports' => array( 'title', 'author', 'comments' ),\n\t\t'show_in_rest' => true,\n\t\t'rest_base' => 'media',\n\t\t'rest_controller_class' => 'WP_REST_Attachments_Controller',\n\t) );\n\tadd_post_type_support( 'attachment:audio', 'thumbnail' );\n\tadd_post_type_support( 'attachment:video', 'thumbnail' );\n\n\tregister_post_type( 'revision', array(\n\t\t'labels' => array(\n\t\t\t'name' => __( 'Revisions' ),\n\t\t\t'singular_name' => __( 'Revision' ),\n\t\t),\n\t\t'public' => false,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'_edit_link' => 'revision.php?revision=%d', /* internal use only. don't use this when registering your own post type. */\n\t\t'capability_type' => 'post',\n\t\t'map_meta_cap' => true,\n\t\t'hierarchical' => false,\n\t\t'rewrite' => false,\n\t\t'query_var' => false,\n\t\t'can_export' => false,\n\t\t'delete_with_user' => true,\n\t\t'supports' => array( 'author' ),\n\t) );\n\n\tregister_post_type( 'nav_menu_item', array(\n\t\t'labels' => array(\n\t\t\t'name' => __( 'Navigation Menu Items' ),\n\t\t\t'singular_name' => __( 'Navigation Menu Item' ),\n\t\t),\n\t\t'public' => false,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'hierarchical' => false,\n\t\t'rewrite' => false,\n\t\t'delete_with_user' => false,\n\t\t'query_var' => false,\n\t) );\n\n\tregister_post_type( 'custom_css', array(\n\t\t'labels' => array(\n\t\t\t'name'          => __( 'Custom CSS' ),\n\t\t\t'singular_name' => __( 'Custom CSS' ),\n\t\t),\n\t\t'public'           => false,\n\t\t'hierarchical'     => false,\n\t\t'rewrite'          => false,\n\t\t'query_var'        => false,\n\t\t'delete_with_user' => false,\n\t\t'can_export'       => true,\n\t\t'_builtin'         => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'supports'         => array( 'title', 'revisions' ),\n\t\t'capabilities'     => array(\n\t\t\t'delete_posts'           => 'edit_theme_options',\n\t\t\t'delete_post'            => 'edit_theme_options',\n\t\t\t'delete_published_posts' => 'edit_theme_options',\n\t\t\t'delete_private_posts'   => 'edit_theme_options',\n\t\t\t'delete_others_posts'    => 'edit_theme_options',\n\t\t\t'edit_post'              => 'edit_css',\n\t\t\t'edit_posts'             => 'edit_css',\n\t\t\t'edit_others_posts'      => 'edit_css',\n\t\t\t'edit_published_posts'   => 'edit_css',\n\t\t\t'read_post'              => 'read',\n\t\t\t'read_private_posts'     => 'read',\n\t\t\t'publish_posts'          => 'edit_theme_options',\n\t\t),\n\t) );\n\n\tregister_post_type( 'customize_changeset', array(\n\t\t'labels' => array(\n\t\t\t'name'               => _x( 'Changesets', 'post type general name' ),\n\t\t\t'singular_name'      => _x( 'Changeset', 'post type singular name' ),\n\t\t\t'menu_name'          => _x( 'Changesets', 'admin menu' ),\n\t\t\t'name_admin_bar'     => _x( 'Changeset', 'add new on admin bar' ),\n\t\t\t'add_new'            => _x( 'Add New', 'Customize Changeset' ),\n\t\t\t'add_new_item'       => __( 'Add New Changeset' ),\n\t\t\t'new_item'           => __( 'New Changeset' ),\n\t\t\t'edit_item'          => __( 'Edit Changeset' ),\n\t\t\t'view_item'          => __( 'View Changeset' ),\n\t\t\t'all_items'          => __( 'All Changesets' ),\n\t\t\t'search_items'       => __( 'Search Changesets' ),\n\t\t\t'not_found'          => __( 'No changesets found.' ),\n\t\t\t'not_found_in_trash' => __( 'No changesets found in Trash.' ),\n\t\t),\n\t\t'public' => false,\n\t\t'_builtin' => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'map_meta_cap' => true,\n\t\t'hierarchical' => false,\n\t\t'rewrite' => false,\n\t\t'query_var' => false,\n\t\t'can_export' => false,\n\t\t'delete_with_user' => false,\n\t\t'supports' => array( 'title', 'author' ),\n\t\t'capability_type' => 'customize_changeset',\n\t\t'capabilities' => array(\n\t\t\t'create_posts' => 'customize',\n\t\t\t'delete_others_posts' => 'customize',\n\t\t\t'delete_post' => 'customize',\n\t\t\t'delete_posts' => 'customize',\n\t\t\t'delete_private_posts' => 'customize',\n\t\t\t'delete_published_posts' => 'customize',\n\t\t\t'edit_others_posts' => 'customize',\n\t\t\t'edit_post' => 'customize',\n\t\t\t'edit_posts' => 'customize',\n\t\t\t'edit_private_posts' => 'customize',\n\t\t\t'edit_published_posts' => 'do_not_allow',\n\t\t\t'publish_posts' => 'customize',\n\t\t\t'read' => 'read',\n\t\t\t'read_post' => 'customize',\n\t\t\t'read_private_posts' => 'customize',\n\t\t),\n\t) );\n\n\tregister_post_type( 'oembed_cache', array(\n\t\t'labels' => array(\n\t\t\t'name'          => __( 'oEmbed Responses' ),\n\t\t\t'singular_name' => __( 'oEmbed Response' ),\n\t\t),\n\t\t'public'           => false,\n\t\t'hierarchical'     => false,\n\t\t'rewrite'          => false,\n\t\t'query_var'        => false,\n\t\t'delete_with_user' => false,\n\t\t'can_export'       => false,\n\t\t'_builtin'         => true, /* internal use only. don't use this when registering your own post type. */\n\t\t'supports'         => array(),\n\t) );\n\n\tregister_post_status( 'publish', array(\n\t\t'label'       => _x( 'Published', 'post status' ),\n\t\t'public'      => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop( 'Published <span class=\"count\">(%s)</span>', 'Published <span class=\"count\">(%s)</span>' ),\n\t) );\n\n\tregister_post_status( 'future', array(\n\t\t'label'       => _x( 'Scheduled', 'post status' ),\n\t\t'protected'   => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop('Scheduled <span class=\"count\">(%s)</span>', 'Scheduled <span class=\"count\">(%s)</span>' ),\n\t) );\n\n\tregister_post_status( 'draft', array(\n\t\t'label'       => _x( 'Draft', 'post status' ),\n\t\t'protected'   => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop( 'Draft <span class=\"count\">(%s)</span>', 'Drafts <span class=\"count\">(%s)</span>' ),\n\t) );\n\n\tregister_post_status( 'pending', array(\n\t\t'label'       => _x( 'Pending', 'post status' ),\n\t\t'protected'   => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop( 'Pending <span class=\"count\">(%s)</span>', 'Pending <span class=\"count\">(%s)</span>' ),\n\t) );\n\n\tregister_post_status( 'private', array(\n\t\t'label'       => _x( 'Private', 'post status' ),\n\t\t'private'     => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop( 'Private <span class=\"count\">(%s)</span>', 'Private <span class=\"count\">(%s)</span>' ),\n\t) );\n\n\tregister_post_status( 'trash', array(\n\t\t'label'       => _x( 'Trash', 'post status' ),\n\t\t'internal'    => true,\n\t\t'_builtin'    => true, /* internal use only. */\n\t\t'label_count' => _n_noop( 'Trash <span class=\"count\">(%s)</span>', 'Trash <span class=\"count\">(%s)</span>' ),\n\t\t'show_in_admin_status_list' => true,\n\t) );\n\n\tregister_post_status( 'auto-draft', array(\n\t\t'label'    => 'auto-draft',\n\t\t'internal' => true,\n\t\t'_builtin' => true, /* internal use only. */\n\t) );\n\n\tregister_post_status( 'inherit', array(\n\t\t'label'    => 'inherit',\n\t\t'internal' => true,\n\t\t'_builtin' => true, /* internal use only. */\n\t\t'exclude_from_search' => false,\n\t) );\n}\n\n/**\n * Retrieve attached file path based on attachment ID.\n *\n * By default the path will go through the 'get_attached_file' filter, but\n * passing a true to the $unfiltered argument of get_attached_file() will\n * return the file path unfiltered.\n *\n * The function works by getting the single post meta name, named\n * '_wp_attached_file' and returning it. This is a convenience function to\n * prevent looking up the meta name and provide a mechanism for sending the\n * attached filename through a filter.\n *\n * @since 2.0.0\n *\n * @param int  $attachment_id Attachment ID.\n * @param bool $unfiltered    Optional. Whether to apply filters. Default false.\n * @return string|false The file path to where the attached file should be, false otherwise.\n */\nfunction get_attached_file( $attachment_id, $unfiltered = false ) {\n\t$file = get_post_meta( $attachment_id, '_wp_attached_file', true );\n\n\t// If the file is relative, prepend upload dir.\n\tif ( $file && 0 !== strpos( $file, '/' ) && ! preg_match( '|^.:\\\\\\|', $file ) && ( ( $uploads = wp_get_upload_dir() ) && false === $uploads['error'] ) ) {\n\t\t$file = $uploads['basedir'] . \"/$file\";\n\t}\n\n\tif ( $unfiltered ) {\n\t\treturn $file;\n\t}\n\n\t/**\n\t * Filters the attached file based on the given ID.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $file          Path to attached file.\n\t * @param int    $attachment_id Attachment ID.\n\t */\n\treturn apply_filters( 'get_attached_file', $file, $attachment_id );\n}\n\n/**\n * Update attachment file path based on attachment ID.\n *\n * Used to update the file path of the attachment, which uses post meta name\n * '_wp_attached_file' to store the path of the attachment.\n *\n * @since 2.1.0\n *\n * @param int    $attachment_id Attachment ID.\n * @param string $file          File path for the attachment.\n * @return bool True on success, false on failure.\n */\nfunction update_attached_file( $attachment_id, $file ) {\n\tif ( !get_post( $attachment_id ) )\n\t\treturn false;\n\n\t/**\n\t * Filters the path to the attached file to update.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $file          Path to the attached file to update.\n\t * @param int    $attachment_id Attachment ID.\n\t */\n\t$file = apply_filters( 'update_attached_file', $file, $attachment_id );\n\n\tif ( $file = _wp_relative_upload_path( $file ) )\n\t\treturn update_post_meta( $attachment_id, '_wp_attached_file', $file );\n\telse\n\t\treturn delete_post_meta( $attachment_id, '_wp_attached_file' );\n}\n\n/**\n * Return relative path to an uploaded file.\n *\n * The path is relative to the current upload dir.\n *\n * @since 2.9.0\n *\n * @param string $path Full path to the file.\n * @return string Relative path on success, unchanged path on failure.\n */\nfunction _wp_relative_upload_path( $path ) {\n\t$new_path = $path;\n\n\t$uploads = wp_get_upload_dir();\n\tif ( 0 === strpos( $new_path, $uploads['basedir'] ) ) {\n\t\t\t$new_path = str_replace( $uploads['basedir'], '', $new_path );\n\t\t\t$new_path = ltrim( $new_path, '/' );\n\t}\n\n\t/**\n\t * Filters the relative path to an uploaded file.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $new_path Relative path to the file.\n\t * @param string $path     Full path to the file.\n\t */\n\treturn apply_filters( '_wp_relative_upload_path', $new_path, $path );\n}\n\n/**\n * Retrieve all children of the post parent ID.\n *\n * Normally, without any enhancements, the children would apply to pages. In the\n * context of the inner workings of WordPress, pages, posts, and attachments\n * share the same table, so therefore the functionality could apply to any one\n * of them. It is then noted that while this function does not work on posts, it\n * does not mean that it won't work on posts. It is recommended that you know\n * what context you wish to retrieve the children of.\n *\n * Attachments may also be made the child of a post, so if that is an accurate\n * statement (which needs to be verified), it would then be possible to get\n * all of the attachments for a post. Attachments have since changed since\n * version 2.5, so this is most likely inaccurate, but serves generally as an\n * example of what is possible.\n *\n * The arguments listed as defaults are for this function and also of the\n * get_posts() function. The arguments are combined with the get_children defaults\n * and are then passed to the get_posts() function, which accepts additional arguments.\n * You can replace the defaults in this function, listed below and the additional\n * arguments listed in the get_posts() function.\n *\n * The 'post_parent' is the most important argument and important attention\n * needs to be paid to the $args parameter. If you pass either an object or an\n * integer (number), then just the 'post_parent' is grabbed and everything else\n * is lost. If you don't specify any arguments, then it is assumed that you are\n * in The Loop and the post parent will be grabbed for from the current post.\n *\n * The 'post_parent' argument is the ID to get the children. The 'numberposts'\n * is the amount of posts to retrieve that has a default of '-1', which is\n * used to get all of the posts. Giving a number higher than 0 will only\n * retrieve that amount of posts.\n *\n * The 'post_type' and 'post_status' arguments can be used to choose what\n * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress\n * post types are 'post', 'pages', and 'attachments'. The 'post_status'\n * argument will accept any post status within the write administration panels.\n *\n * @since 2.0.0\n *\n * @see get_posts()\n * @todo Check validity of description.\n *\n * @global WP_Post $post\n *\n * @param mixed  $args   Optional. User defined arguments for replacing the defaults. Default empty.\n * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                       a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @return array Array of children, where the type of each element is determined by $output parameter.\n *               Empty array on failure.\n */\nfunction get_children( $args = '', $output = OBJECT ) {\n\t$kids = array();\n\tif ( empty( $args ) ) {\n\t\tif ( isset( $GLOBALS['post'] ) ) {\n\t\t\t$args = array('post_parent' => (int) $GLOBALS['post']->post_parent );\n\t\t} else {\n\t\t\treturn $kids;\n\t\t}\n\t} elseif ( is_object( $args ) ) {\n\t\t$args = array('post_parent' => (int) $args->post_parent );\n\t} elseif ( is_numeric( $args ) ) {\n\t\t$args = array('post_parent' => (int) $args);\n\t}\n\n\t$defaults = array(\n\t\t'numberposts' => -1, 'post_type' => 'any',\n\t\t'post_status' => 'any', 'post_parent' => 0,\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$children = get_posts( $r );\n\n\tif ( ! $children )\n\t\treturn $kids;\n\n\tif ( ! empty( $r['fields'] ) )\n\t\treturn $children;\n\n\tupdate_post_cache($children);\n\n\tforeach ( $children as $key => $child )\n\t\t$kids[$child->ID] = $children[$key];\n\n\tif ( $output == OBJECT ) {\n\t\treturn $kids;\n\t} elseif ( $output == ARRAY_A ) {\n\t\t$weeuns = array();\n\t\tforeach ( (array) $kids as $kid ) {\n\t\t\t$weeuns[$kid->ID] = get_object_vars($kids[$kid->ID]);\n\t\t}\n\t\treturn $weeuns;\n\t} elseif ( $output == ARRAY_N ) {\n\t\t$babes = array();\n\t\tforeach ( (array) $kids as $kid ) {\n\t\t\t$babes[$kid->ID] = array_values(get_object_vars($kids[$kid->ID]));\n\t\t}\n\t\treturn $babes;\n\t} else {\n\t\treturn $kids;\n\t}\n}\n\n/**\n * Get extended entry info (<!--more-->).\n *\n * There should not be any space after the second dash and before the word\n * 'more'. There can be text or space(s) after the word 'more', but won't be\n * referenced.\n *\n * The returned array has 'main', 'extended', and 'more_text' keys. Main has the text before\n * the `<!--more-->`. The 'extended' key has the content after the\n * `<!--more-->` comment. The 'more_text' key has the custom \"Read More\" text.\n *\n * @since 1.0.0\n *\n * @param string $post Post content.\n * @return array Post before ('main'), after ('extended'), and custom read more ('more_text').\n */\nfunction get_extended( $post ) {\n\t//Match the new style more links.\n\tif ( preg_match('/<!--more(.*?)?-->/', $post, $matches) ) {\n\t\tlist($main, $extended) = explode($matches[0], $post, 2);\n\t\t$more_text = $matches[1];\n\t} else {\n\t\t$main = $post;\n\t\t$extended = '';\n\t\t$more_text = '';\n\t}\n\n\t//  leading and trailing whitespace.\n\t$main = preg_replace('/^[\\s]*(.*)[\\s]*$/', '\\\\1', $main);\n\t$extended = preg_replace('/^[\\s]*(.*)[\\s]*$/', '\\\\1', $extended);\n\t$more_text = preg_replace('/^[\\s]*(.*)[\\s]*$/', '\\\\1', $more_text);\n\n\treturn array( 'main' => $main, 'extended' => $extended, 'more_text' => $more_text );\n}\n\n/**\n * Retrieves post data given a post ID or post object.\n *\n * See sanitize_post() for optional $filter values. Also, the parameter\n * `$post`, must be given as a variable, since it is passed by reference.\n *\n * @since 1.5.1\n *\n * @global WP_Post $post\n *\n * @param int|WP_Post|null $post   Optional. Post ID or post object. Defaults to global $post.\n * @param string           $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                 a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string           $filter Optional. Type of filter to apply. Accepts 'raw', 'edit', 'db',\n *                                 or 'display'. Default 'raw'.\n * @return WP_Post|array|null Type corresponding to $output on success or null on failure.\n *                            When $output is OBJECT, a `WP_Post` instance is returned.\n */\nfunction get_post( $post = null, $output = OBJECT, $filter = 'raw' ) {\n\tif ( empty( $post ) && isset( $GLOBALS['post'] ) )\n\t\t$post = $GLOBALS['post'];\n\n\tif ( $post instanceof WP_Post ) {\n\t\t$_post = $post;\n\t} elseif ( is_object( $post ) ) {\n\t\tif ( empty( $post->filter ) ) {\n\t\t\t$_post = sanitize_post( $post, 'raw' );\n\t\t\t$_post = new WP_Post( $_post );\n\t\t} elseif ( 'raw' == $post->filter ) {\n\t\t\t$_post = new WP_Post( $post );\n\t\t} else {\n\t\t\t$_post = WP_Post::get_instance( $post->ID );\n\t\t}\n\t} else {\n\t\t$_post = WP_Post::get_instance( $post );\n\t}\n\n\tif ( ! $_post )\n\t\treturn null;\n\n\t$_post = $_post->filter( $filter );\n\n\tif ( $output == ARRAY_A )\n\t\treturn $_post->to_array();\n\telseif ( $output == ARRAY_N )\n\t\treturn array_values( $_post->to_array() );\n\n\treturn $_post;\n}\n\n/**\n * Retrieve ancestors of a post.\n *\n * @since 2.5.0\n *\n * @param int|WP_Post $post Post ID or post object.\n * @return array Ancestor IDs or empty array if none are found.\n */\nfunction get_post_ancestors( $post ) {\n\t$post = get_post( $post );\n\n\tif ( ! $post || empty( $post->post_parent ) || $post->post_parent == $post->ID )\n\t\treturn array();\n\n\t$ancestors = array();\n\n\t$id = $ancestors[] = $post->post_parent;\n\n\twhile ( $ancestor = get_post( $id ) ) {\n\t\t// Loop detection: If the ancestor has been seen before, break.\n\t\tif ( empty( $ancestor->post_parent ) || ( $ancestor->post_parent == $post->ID ) || in_array( $ancestor->post_parent, $ancestors ) )\n\t\t\tbreak;\n\n\t\t$id = $ancestors[] = $ancestor->post_parent;\n\t}\n\n\treturn $ancestors;\n}\n\n/**\n * Retrieve data from a post field based on Post ID.\n *\n * Examples of the post field will be, 'post_type', 'post_status', 'post_content',\n * etc and based off of the post object property or key names.\n *\n * The context values are based off of the taxonomy filter functions and\n * supported values are found within those functions.\n *\n * @since 2.3.0\n * @since 4.5.0 The `$post` parameter was made optional.\n *\n * @see sanitize_post_field()\n *\n * @param string      $field   Post field name.\n * @param int|WP_Post $post    Optional. Post ID or post object. Defaults to current post.\n * @param string      $context Optional. How to filter the field. Accepts 'raw', 'edit', 'db',\n *                             or 'display'. Default 'display'.\n * @return string The value of the post field on success, empty string on failure.\n */\nfunction get_post_field( $field, $post = null, $context = 'display' ) {\n\t$post = get_post( $post );\n\n\tif ( !$post )\n\t\treturn '';\n\n\tif ( !isset($post->$field) )\n\t\treturn '';\n\n\treturn sanitize_post_field($field, $post->$field, $post->ID, $context);\n}\n\n/**\n * Retrieve the mime type of an attachment based on the ID.\n *\n * This function can be used with any post type, but it makes more sense with\n * attachments.\n *\n * @since 2.0.0\n *\n * @param int|WP_Post $ID Optional. Post ID or post object. Default empty.\n * @return string|false The mime type on success, false on failure.\n */\nfunction get_post_mime_type( $ID = '' ) {\n\t$post = get_post($ID);\n\n\tif ( is_object($post) )\n\t\treturn $post->post_mime_type;\n\n\treturn false;\n}\n\n/**\n * Retrieve the post status based on the Post ID.\n *\n * If the post ID is of an attachment, then the parent post status will be given\n * instead.\n *\n * @since 2.0.0\n *\n * @param int|WP_Post $ID Optional. Post ID or post object. Default empty.\n * @return string|false Post status on success, false on failure.\n */\nfunction get_post_status( $ID = '' ) {\n\t$post = get_post($ID);\n\n\tif ( !is_object($post) )\n\t\treturn false;\n\n\tif ( 'attachment' == $post->post_type ) {\n\t\tif ( 'private' == $post->post_status )\n\t\t\treturn 'private';\n\n\t\t// Unattached attachments are assumed to be published.\n\t\tif ( ( 'inherit' == $post->post_status ) && ( 0 == $post->post_parent) )\n\t\t\treturn 'publish';\n\n\t\t// Inherit status from the parent.\n\t\tif ( $post->post_parent && ( $post->ID != $post->post_parent ) ) {\n\t\t\t$parent_post_status = get_post_status( $post->post_parent );\n\t\t\tif ( 'trash' == $parent_post_status ) {\n\t\t\t\treturn get_post_meta( $post->post_parent, '_wp_trash_meta_status', true );\n\t\t\t} else {\n\t\t\t\treturn $parent_post_status;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Filters the post status.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string  $post_status The post status.\n\t * @param WP_Post $post        The post object.\n\t */\n\treturn apply_filters( 'get_post_status', $post->post_status, $post );\n}\n\n/**\n * Retrieve all of the WordPress supported post statuses.\n *\n * Posts have a limited set of valid status values, this provides the\n * post_status values and descriptions.\n *\n * @since 2.5.0\n *\n * @return array List of post statuses.\n */\nfunction get_post_statuses() {\n\t$status = array(\n\t\t'draft'   => __( 'Draft' ),\n\t\t'pending' => __( 'Pending Review' ),\n\t\t'private' => __( 'Private' ),\n\t\t'publish' => __( 'Published' )\n\t);\n\n\treturn $status;\n}\n\n/**\n * Retrieve all of the WordPress support page statuses.\n *\n * Pages have a limited set of valid status values, this provides the\n * post_status values and descriptions.\n *\n * @since 2.5.0\n *\n * @return array List of page statuses.\n */\nfunction get_page_statuses() {\n\t$status = array(\n\t\t'draft'   => __( 'Draft' ),\n\t\t'private' => __( 'Private' ),\n\t\t'publish' => __( 'Published' )\n\t);\n\n\treturn $status;\n}\n\n/**\n * Register a post status. Do not use before init.\n *\n * A simple function for creating or modifying a post status based on the\n * parameters given. The function will accept an array (second optional\n * parameter), along with a string for the post status name.\n *\n * Arguments prefixed with an _underscore shouldn't be used by plugins and themes.\n *\n * @since 3.0.0\n * @global array $wp_post_statuses Inserts new post status object into the list\n *\n * @param string $post_status Name of the post status.\n * @param array|string $args {\n *     Optional. Array or string of post status arguments.\n *\n *     @type bool|string $label                     A descriptive name for the post status marked\n *                                                  for translation. Defaults to value of $post_status.\n *     @type bool|array  $label_count               Descriptive text to use for nooped plurals.\n *                                                  Default array of $label, twice\n *     @type bool        $exclude_from_search       Whether to exclude posts with this post status\n *                                                  from search results. Default is value of $internal.\n *     @type bool        $_builtin                  Whether the status is built-in. Core-use only.\n *                                                  Default false.\n *     @type bool        $public                    Whether posts of this status should be shown\n *                                                  in the front end of the site. Default false.\n *     @type bool        $internal                  Whether the status is for internal use only.\n *                                                  Default false.\n *     @type bool        $protected                 Whether posts with this status should be protected.\n *                                                  Default false.\n *     @type bool        $private                   Whether posts with this status should be private.\n *                                                  Default false.\n *     @type bool        $publicly_queryable        Whether posts with this status should be publicly-\n *                                                  queryable. Default is value of $public.\n *     @type bool        $show_in_admin_all_list    Whether to include posts in the edit listing for\n *                                                  their post type. Default is value of $internal.\n *     @type bool        $show_in_admin_status_list Show in the list of statuses with post counts at\n *                                                  the top of the edit listings,\n *                                                  e.g. All (12) | Published (9) | My Custom Status (2)\n *                                                  Default is value of $internal.\n * }\n * @return object\n */\nfunction register_post_status( $post_status, $args = array() ) {\n\tglobal $wp_post_statuses;\n\n\tif (!is_array($wp_post_statuses))\n\t\t$wp_post_statuses = array();\n\n\t// Args prefixed with an underscore are reserved for internal use.\n\t$defaults = array(\n\t\t'label' => false,\n\t\t'label_count' => false,\n\t\t'exclude_from_search' => null,\n\t\t'_builtin' => false,\n\t\t'public' => null,\n\t\t'internal' => null,\n\t\t'protected' => null,\n\t\t'private' => null,\n\t\t'publicly_queryable' => null,\n\t\t'show_in_admin_status_list' => null,\n\t\t'show_in_admin_all_list' => null,\n\t);\n\t$args = wp_parse_args($args, $defaults);\n\t$args = (object) $args;\n\n\t$post_status = sanitize_key($post_status);\n\t$args->name = $post_status;\n\n\t// Set various defaults.\n\tif ( null === $args->public && null === $args->internal && null === $args->protected && null === $args->private )\n\t\t$args->internal = true;\n\n\tif ( null === $args->public  )\n\t\t$args->public = false;\n\n\tif ( null === $args->private  )\n\t\t$args->private = false;\n\n\tif ( null === $args->protected  )\n\t\t$args->protected = false;\n\n\tif ( null === $args->internal  )\n\t\t$args->internal = false;\n\n\tif ( null === $args->publicly_queryable )\n\t\t$args->publicly_queryable = $args->public;\n\n\tif ( null === $args->exclude_from_search )\n\t\t$args->exclude_from_search = $args->internal;\n\n\tif ( null === $args->show_in_admin_all_list )\n\t\t$args->show_in_admin_all_list = !$args->internal;\n\n\tif ( null === $args->show_in_admin_status_list )\n\t\t$args->show_in_admin_status_list = !$args->internal;\n\n\tif ( false === $args->label )\n\t\t$args->label = $post_status;\n\n\tif ( false === $args->label_count )\n\t\t$args->label_count = _n_noop( $args->label, $args->label );\n\n\t$wp_post_statuses[$post_status] = $args;\n\n\treturn $args;\n}\n\n/**\n * Retrieve a post status object by name.\n *\n * @since 3.0.0\n *\n * @global array $wp_post_statuses List of post statuses.\n *\n * @see register_post_status()\n *\n * @param string $post_status The name of a registered post status.\n * @return object|null A post status object.\n */\nfunction get_post_status_object( $post_status ) {\n\tglobal $wp_post_statuses;\n\n\tif ( empty($wp_post_statuses[$post_status]) )\n\t\treturn null;\n\n\treturn $wp_post_statuses[$post_status];\n}\n\n/**\n * Get a list of post statuses.\n *\n * @since 3.0.0\n *\n * @global array $wp_post_statuses List of post statuses.\n *\n * @see register_post_status()\n *\n * @param array|string $args     Optional. Array or string of post status arguments to compare against\n *                               properties of the global `$wp_post_statuses objects`. Default empty array.\n * @param string       $output   Optional. The type of output to return, either 'names' or 'objects'. Default 'names'.\n * @param string       $operator Optional. The logical operation to perform. 'or' means only one element\n *                               from the array needs to match; 'and' means all elements must match.\n *                               Default 'and'.\n * @return array A list of post status names or objects.\n */\nfunction get_post_stati( $args = array(), $output = 'names', $operator = 'and' ) {\n\tglobal $wp_post_statuses;\n\n\t$field = ('names' == $output) ? 'name' : false;\n\n\treturn wp_filter_object_list($wp_post_statuses, $args, $operator, $field);\n}\n\n/**\n * Whether the post type is hierarchical.\n *\n * A false return value might also mean that the post type does not exist.\n *\n * @since 3.0.0\n *\n * @see get_post_type_object()\n *\n * @param string $post_type Post type name\n * @return bool Whether post type is hierarchical.\n */\nfunction is_post_type_hierarchical( $post_type ) {\n\tif ( ! post_type_exists( $post_type ) )\n\t\treturn false;\n\n\t$post_type = get_post_type_object( $post_type );\n\treturn $post_type->hierarchical;\n}\n\n/**\n * Check if a post type is registered.\n *\n * @since 3.0.0\n *\n * @see get_post_type_object()\n *\n * @param string $post_type Post type name.\n * @return bool Whether post type is registered.\n */\nfunction post_type_exists( $post_type ) {\n\treturn (bool) get_post_type_object( $post_type );\n}\n\n/**\n * Retrieves the post type of the current post or of a given post.\n *\n * @since 2.1.0\n *\n * @param int|WP_Post|null $post Optional. Post ID or post object. Default is global $post.\n * @return string|false          Post type on success, false on failure.\n */\nfunction get_post_type( $post = null ) {\n\tif ( $post = get_post( $post ) )\n\t\treturn $post->post_type;\n\n\treturn false;\n}\n\n/**\n * Retrieves a post type object by name.\n *\n * @since 3.0.0\n * @since 4.6.0 Object returned is now an instance of WP_Post_Type.\n *\n * @global array $wp_post_types List of post types.\n *\n * @see register_post_type()\n *\n * @param string $post_type The name of a registered post type.\n * @return WP_Post_Type|null WP_Post_Type object if it exists, null otherwise.\n */\nfunction get_post_type_object( $post_type ) {\n\tglobal $wp_post_types;\n\n\tif ( ! is_scalar( $post_type ) || empty( $wp_post_types[ $post_type ] ) ) {\n\t\treturn null;\n\t}\n\n\treturn $wp_post_types[ $post_type ];\n}\n\n/**\n * Get a list of all registered post type objects.\n *\n * @since 2.9.0\n *\n * @global array $wp_post_types List of post types.\n *\n * @see register_post_type() for accepted arguments.\n *\n * @param array|string $args     Optional. An array of key => value arguments to match against\n *                               the post type objects. Default empty array.\n * @param string       $output   Optional. The type of output to return. Accepts post type 'names'\n *                               or 'objects'. Default 'names'.\n * @param string       $operator Optional. The logical operation to perform. 'or' means only one\n *                               element from the array needs to match; 'and' means all elements\n *                               must match; 'not' means no elements may match. Default 'and'.\n * @return array A list of post type names or objects.\n */\nfunction get_post_types( $args = array(), $output = 'names', $operator = 'and' ) {\n\tglobal $wp_post_types;\n\n\t$field = ('names' == $output) ? 'name' : false;\n\n\treturn wp_filter_object_list($wp_post_types, $args, $operator, $field);\n}\n\n/**\n * Registers a post type.\n *\n * Note: Post type registrations should not be hooked before the\n * {@see 'init'} action. Also, any taxonomy connections should be\n * registered via the `$taxonomies` argument to ensure consistency\n * when hooks such as {@see 'parse_query'} or {@see 'pre_get_posts'}\n * are used.\n *\n * Post types can support any number of built-in core features such\n * as meta boxes, custom fields, post thumbnails, post statuses,\n * comments, and more. See the `$supports` argument for a complete\n * list of supported features.\n *\n * @since 2.9.0\n * @since 3.0.0 The `show_ui` argument is now enforced on the new post screen.\n * @since 4.4.0 The `show_ui` argument is now enforced on the post type listing\n *              screen and post editing screen.\n * @since 4.6.0 Post type object returned is now an instance of WP_Post_Type.\n * @since 4.7.0 Introduced `show_in_rest`, 'rest_base' and 'rest_controller_class'\n *              arguments to register the post type in REST API.\n *\n * @global array $wp_post_types List of post types.\n *\n * @param string $post_type Post type key. Must not exceed 20 characters and may\n *                          only contain lowercase alphanumeric characters, dashes,\n *                          and underscores. See sanitize_key().\n * @param array|string $args {\n *     Array or string of arguments for registering a post type.\n *\n *     @type string      $label                 Name of the post type shown in the menu. Usually plural.\n *                                              Default is value of $labels['name'].\n *     @type array       $labels                An array of labels for this post type. If not set, post\n *                                              labels are inherited for non-hierarchical types and page\n *                                              labels for hierarchical ones. See get_post_type_labels() for a full\n *                                              list of supported labels.\n *     @type string      $description           A short descriptive summary of what the post type is.\n *                                              Default empty.\n *     @type bool        $public                Whether a post type is intended for use publicly either via\n *                                              the admin interface or by front-end users. While the default\n *                                              settings of $exclude_from_search, $publicly_queryable, $show_ui,\n *                                              and $show_in_nav_menus are inherited from public, each does not\n *                                              rely on this relationship and controls a very specific intention.\n *                                              Default false.\n *     @type bool        $hierarchical          Whether the post type is hierarchical (e.g. page). Default false.\n *     @type bool        $exclude_from_search   Whether to exclude posts with this post type from front end search\n *                                              results. Default is the opposite value of $public.\n *     @type bool        $publicly_queryable    Whether queries can be performed on the front end for the post type\n *                                              as part of parse_request(). Endpoints would include:\n *                                              * ?post_type={post_type_key}\n *                                              * ?{post_type_key}={single_post_slug}\n *                                              * ?{post_type_query_var}={single_post_slug}\n *                                              If not set, the default is inherited from $public.\n *     @type bool        $show_ui               Whether to generate and allow a UI for managing this post type in the\n *                                              admin. Default is value of $public.\n *     @type bool        $show_in_menu          Where to show the post type in the admin menu. To work, $show_ui\n *                                              must be true. If true, the post type is shown in its own top level\n *                                              menu. If false, no menu is shown. If a string of an existing top\n *                                              level menu (eg. 'tools.php' or 'edit.php?post_type=page'), the post\n *                                              type will be placed as a sub-menu of that.\n *                                              Default is value of $show_ui.\n *     @type bool        $show_in_nav_menus     Makes this post type available for selection in navigation menus.\n *                                              Default is value $public.\n *     @type bool        $show_in_admin_bar     Makes this post type available via the admin bar. Default is value\n *                                              of $show_in_menu.\n *     @type bool        $show_in_rest          Whether to add the post type route in the REST API 'wp/v2' namespace.\n *     @type string      $rest_base             To change the base url of REST API route. Default is $post_type.\n *     @type string      $rest_controller_class REST API Controller class name. Default is 'WP_REST_Posts_Controller'.\n *     @type int         $menu_position         The position in the menu order the post type should appear. To work,\n *                                              $show_in_menu must be true. Default null (at the bottom).\n *     @type string      $menu_icon             The url to the icon to be used for this menu. Pass a base64-encoded\n *                                              SVG using a data URI, which will be colored to match the color scheme\n *                                              -- this should begin with 'data:image/svg+xml;base64,'. Pass the name\n *                                              of a Dashicons helper class to use a font icon, e.g.\n *                                              'dashicons-chart-pie'. Pass 'none' to leave div.wp-menu-image empty\n *                                              so an icon can be added via CSS. Defaults to use the posts icon.\n *     @type string      $capability_type       The string to use to build the read, edit, and delete capabilities.\n *                                              May be passed as an array to allow for alternative plurals when using\n *                                              this argument as a base to construct the capabilities, e.g.\n *                                              array('story', 'stories'). Default 'post'.\n *     @type array       $capabilities          Array of capabilities for this post type. $capability_type is used\n *                                              as a base to construct capabilities by default.\n *                                              See get_post_type_capabilities().\n *     @type bool        $map_meta_cap          Whether to use the internal default meta capability handling.\n *                                              Default false.\n *     @type array       $supports              Core feature(s) the post type supports. Serves as an alias for calling\n *                                              add_post_type_support() directly. Core features include 'title',\n *                                              'editor', 'comments', 'revisions', 'trackbacks', 'author', 'excerpt',\n *                                              'page-attributes', 'thumbnail', 'custom-fields', and 'post-formats'.\n *                                              Additionally, the 'revisions' feature dictates whether the post type\n *                                              will store revisions, and the 'comments' feature dictates whether the\n *                                              comments count will show on the edit screen. Defaults is an array\n *                                              containing 'title' and 'editor'.\n *     @type callable    $register_meta_box_cb  Provide a callback function that sets up the meta boxes for the\n *                                              edit form. Do remove_meta_box() and add_meta_box() calls in the\n *                                              callback. Default null.\n *     @type array       $taxonomies            An array of taxonomy identifiers that will be registered for the\n *                                              post type. Taxonomies can be registered later with register_taxonomy()\n *                                              or register_taxonomy_for_object_type().\n *                                              Default empty array.\n *     @type bool|string $has_archive           Whether there should be post type archives, or if a string, the\n *                                              archive slug to use. Will generate the proper rewrite rules if\n *                                              $rewrite is enabled. Default false.\n *     @type bool|array  $rewrite              {\n *         Triggers the handling of rewrites for this post type. To prevent rewrite, set to false.\n *         Defaults to true, using $post_type as slug. To specify rewrite rules, an array can be\n *         passed with any of these keys:\n *\n *         @type string $slug       Customize the permastruct slug. Defaults to $post_type key.\n *         @type bool   $with_front Whether the permastruct should be prepended with WP_Rewrite::$front.\n *                                  Default true.\n *         @type bool   $feeds      Whether the feed permastruct should be built for this post type.\n *                                  Default is value of $has_archive.\n *         @type bool   $pages      Whether the permastruct should provide for pagination. Default true.\n *         @type const  $ep_mask    Endpoint mask to assign. If not specified and permalink_epmask is set,\n *                                  inherits from $permalink_epmask. If not specified and permalink_epmask\n *                                  is not set, defaults to EP_PERMALINK.\n *     }\n *     @type string|bool $query_var             Sets the query_var key for this post type. Defaults to $post_type\n *                                              key. If false, a post type cannot be loaded at\n *                                              ?{query_var}={post_slug}. If specified as a string, the query\n *                                              ?{query_var_string}={post_slug} will be valid.\n *     @type bool        $can_export            Whether to allow this post type to be exported. Default true.\n *     @type bool        $delete_with_user      Whether to delete posts of this type when deleting a user. If true,\n *                                              posts of this type belonging to the user will be moved to trash\n *                                              when then user is deleted. If false, posts of this type belonging\n *                                              to the user will *not* be trashed or deleted. If not set (the default),\n *                                              posts are trashed if post_type_supports('author'). Otherwise posts\n *                                              are not trashed or deleted. Default null.\n *     @type bool        $_builtin              FOR INTERNAL USE ONLY! True if this post type is a native or\n *                                              \"built-in\" post_type. Default false.\n *     @type string      $_edit_link            FOR INTERNAL USE ONLY! URL segment to use for edit link of\n *                                              this post type. Default 'post.php?post=%d'.\n * }\n * @return WP_Post_Type|WP_Error The registered post type object, or an error object.\n */\nfunction register_post_type( $post_type, $args = array() ) {\n\tglobal $wp_post_types;\n\n\tif ( ! is_array( $wp_post_types ) ) {\n\t\t$wp_post_types = array();\n\t}\n\n\t// Sanitize post type name\n\t$post_type = sanitize_key( $post_type );\n\n\tif ( empty( $post_type ) || strlen( $post_type ) > 20 ) {\n\t\t_doing_it_wrong( __FUNCTION__, __( 'Post type names must be between 1 and 20 characters in length.' ), '4.2.0' );\n\t\treturn new WP_Error( 'post_type_length_invalid', __( 'Post type names must be between 1 and 20 characters in length.' ) );\n\t}\n\n\t$post_type_object = new WP_Post_Type( $post_type, $args );\n\t$post_type_object->add_supports();\n\t$post_type_object->add_rewrite_rules();\n\t$post_type_object->register_meta_boxes();\n\n\t$wp_post_types[ $post_type ] = $post_type_object;\n\n\t$post_type_object->add_hooks();\n\t$post_type_object->register_taxonomies();\n\n\t/**\n\t * Fires after a post type is registered.\n\t *\n\t * @since 3.3.0\n\t * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.\n\t *\n\t * @param string       $post_type        Post type.\n\t * @param WP_Post_Type $post_type_object Arguments used to register the post type.\n\t */\n\tdo_action( 'registered_post_type', $post_type, $post_type_object );\n\n\treturn $post_type_object;\n}\n\n/**\n * Unregisters a post type.\n *\n * Can not be used to unregister built-in post types.\n *\n * @since 4.5.0\n *\n * @global array $wp_post_types List of post types.\n *\n * @param string $post_type Post type to unregister.\n * @return bool|WP_Error True on success, WP_Error on failure or if the post type doesn't exist.\n */\nfunction unregister_post_type( $post_type ) {\n\tglobal $wp_post_types;\n\n\tif ( ! post_type_exists( $post_type ) ) {\n\t\treturn new WP_Error( 'invalid_post_type', __( 'Invalid post type.' ) );\n\t}\n\n\t$post_type_object = get_post_type_object( $post_type );\n\n\t// Do not allow unregistering internal post types.\n\tif ( $post_type_object->_builtin ) {\n\t\treturn new WP_Error( 'invalid_post_type', __( 'Unregistering a built-in post type is not allowed' ) );\n\t}\n\n\t$post_type_object->remove_supports();\n\t$post_type_object->remove_rewrite_rules();\n\t$post_type_object->unregister_meta_boxes();\n\t$post_type_object->remove_hooks();\n\t$post_type_object->unregister_taxonomies();\n\n\tunset( $wp_post_types[ $post_type ] );\n\n\t/**\n\t * Fires after a post type was unregistered.\n\t *\n\t * @since 4.5.0\n\t *\n\t * @param string $post_type Post type key.\n\t */\n\tdo_action( 'unregistered_post_type', $post_type );\n\n\treturn true;\n}\n\n/**\n * Build an object with all post type capabilities out of a post type object\n *\n * Post type capabilities use the 'capability_type' argument as a base, if the\n * capability is not set in the 'capabilities' argument array or if the\n * 'capabilities' argument is not supplied.\n *\n * The capability_type argument can optionally be registered as an array, with\n * the first value being singular and the second plural, e.g. array('story, 'stories')\n * Otherwise, an 's' will be added to the value for the plural form. After\n * registration, capability_type will always be a string of the singular value.\n *\n * By default, seven keys are accepted as part of the capabilities array:\n *\n * - edit_post, read_post, and delete_post are meta capabilities, which are then\n *   generally mapped to corresponding primitive capabilities depending on the\n *   context, which would be the post being edited/read/deleted and the user or\n *   role being checked. Thus these capabilities would generally not be granted\n *   directly to users or roles.\n *\n * - edit_posts - Controls whether objects of this post type can be edited.\n * - edit_others_posts - Controls whether objects of this type owned by other users\n *   can be edited. If the post type does not support an author, then this will\n *   behave like edit_posts.\n * - publish_posts - Controls publishing objects of this post type.\n * - read_private_posts - Controls whether private objects can be read.\n *\n * These four primitive capabilities are checked in core in various locations.\n * There are also seven other primitive capabilities which are not referenced\n * directly in core, except in map_meta_cap(), which takes the three aforementioned\n * meta capabilities and translates them into one or more primitive capabilities\n * that must then be checked against the user or role, depending on the context.\n *\n * - read - Controls whether objects of this post type can be read.\n * - delete_posts - Controls whether objects of this post type can be deleted.\n * - delete_private_posts - Controls whether private objects can be deleted.\n * - delete_published_posts - Controls whether published objects can be deleted.\n * - delete_others_posts - Controls whether objects owned by other users can be\n *   can be deleted. If the post type does not support an author, then this will\n *   behave like delete_posts.\n * - edit_private_posts - Controls whether private objects can be edited.\n * - edit_published_posts - Controls whether published objects can be edited.\n *\n * These additional capabilities are only used in map_meta_cap(). Thus, they are\n * only assigned by default if the post type is registered with the 'map_meta_cap'\n * argument set to true (default is false).\n *\n * @since 3.0.0\n *\n * @see register_post_type()\n * @see map_meta_cap()\n *\n * @param object $args Post type registration arguments.\n * @return object Object with all the capabilities as member variables.\n */\nfunction get_post_type_capabilities( $args ) {\n\tif ( ! is_array( $args->capability_type ) )\n\t\t$args->capability_type = array( $args->capability_type, $args->capability_type . 's' );\n\n\t// Singular base for meta capabilities, plural base for primitive capabilities.\n\tlist( $singular_base, $plural_base ) = $args->capability_type;\n\n\t$default_capabilities = array(\n\t\t// Meta capabilities\n\t\t'edit_post'          => 'edit_'         . $singular_base,\n\t\t'read_post'          => 'read_'         . $singular_base,\n\t\t'delete_post'        => 'delete_'       . $singular_base,\n\t\t// Primitive capabilities used outside of map_meta_cap():\n\t\t'edit_posts'         => 'edit_'         . $plural_base,\n\t\t'edit_others_posts'  => 'edit_others_'  . $plural_base,\n\t\t'publish_posts'      => 'publish_'      . $plural_base,\n\t\t'read_private_posts' => 'read_private_' . $plural_base,\n\t);\n\n\t// Primitive capabilities used within map_meta_cap():\n\tif ( $args->map_meta_cap ) {\n\t\t$default_capabilities_for_mapping = array(\n\t\t\t'read'                   => 'read',\n\t\t\t'delete_posts'           => 'delete_'           . $plural_base,\n\t\t\t'delete_private_posts'   => 'delete_private_'   . $plural_base,\n\t\t\t'delete_published_posts' => 'delete_published_' . $plural_base,\n\t\t\t'delete_others_posts'    => 'delete_others_'    . $plural_base,\n\t\t\t'edit_private_posts'     => 'edit_private_'     . $plural_base,\n\t\t\t'edit_published_posts'   => 'edit_published_'   . $plural_base,\n\t\t);\n\t\t$default_capabilities = array_merge( $default_capabilities, $default_capabilities_for_mapping );\n\t}\n\n\t$capabilities = array_merge( $default_capabilities, $args->capabilities );\n\n\t// Post creation capability simply maps to edit_posts by default:\n\tif ( ! isset( $capabilities['create_posts'] ) )\n\t\t$capabilities['create_posts'] = $capabilities['edit_posts'];\n\n\t// Remember meta capabilities for future reference.\n\tif ( $args->map_meta_cap )\n\t\t_post_type_meta_capabilities( $capabilities );\n\n\treturn (object) $capabilities;\n}\n\n/**\n * Store or return a list of post type meta caps for map_meta_cap().\n *\n * @since 3.1.0\n * @access private\n *\n * @global array $post_type_meta_caps Used to store meta capabilities.\n *\n * @param array $capabilities Post type meta capabilities.\n */\nfunction _post_type_meta_capabilities( $capabilities = null ) {\n\tglobal $post_type_meta_caps;\n\n\tforeach ( $capabilities as $core => $custom ) {\n\t\tif ( in_array( $core, array( 'read_post', 'delete_post', 'edit_post' ) ) ) {\n\t\t\t$post_type_meta_caps[ $custom ] = $core;\n\t\t}\n\t}\n}\n\n/**\n * Builds an object with all post type labels out of a post type object.\n *\n * Accepted keys of the label array in the post type object:\n *\n * - `name` - General name for the post type, usually plural. The same and overridden\n *          by `$post_type_object->label`. Default is 'Posts' / 'Pages'.\n * - `singular_name` - Name for one object of this post type. Default is 'Post' / 'Page'.\n * - `add_new` - Default is 'Add New' for both hierarchical and non-hierarchical types.\n *             When internationalizing this string, please use a {@link https://codex.wordpress.org/I18n_for_WordPress_Developers#Disambiguation_by_context gettext context}\n *             matching your post type. Example: `_x( 'Add New', 'product', 'textdomain' );`.\n * - `add_new_item` - Label for adding a new singular item. Default is 'Add New Post' / 'Add New Page'.\n * - `edit_item` - Label for editing a singular item. Default is 'Edit Post' / 'Edit Page'.\n * - `new_item` - Label for the new item page title. Default is 'New Post' / 'New Page'.\n * - `view_item` - Label for viewing a singular item. Default is 'View Post' / 'View Page'.\n * - `view_items` - Label for viewing post type archives. Default is 'View Posts' / 'View Pages'.\n * - `search_items` - Label for searching plural items. Default is 'Search Posts' / 'Search Pages'.\n * - `not_found` - Label used when no items are found. Default is 'No posts found' / 'No pages found'.\n * - `not_found_in_trash` - Label used when no items are in the trash. Default is 'No posts found in Trash' /\n *                        'No pages found in Trash'.\n * - `parent_item_colon` - Label used to prefix parents of hierarchical items. Not used on non-hierarchical\n *                       post types. Default is 'Parent Page:'.\n * - `all_items` - Label to signify all items in a submenu link. Default is 'All Posts' / 'All Pages'.\n * - `archives` - Label for archives in nav menus. Default is 'Post Archives' / 'Page Archives'.\n * - `attributes` - Label for the attributes meta box. Default is 'Post Attributes' / 'Page Attributes'.\n * - `insert_into_item` - Label for the media frame button. Default is 'Insert into post' / 'Insert into page'.\n * - `uploaded_to_this_item` - Label for the media frame filter. Default is 'Uploaded to this post' /\n *                           'Uploaded to this page'.\n * - `featured_image` - Label for the Featured Image meta box title. Default is 'Featured Image'.\n * - `set_featured_image` - Label for setting the featured image. Default is 'Set featured image'.\n * - `remove_featured_image` - Label for removing the featured image. Default is 'Remove featured image'.\n * - `use_featured_image` - Label in the media frame for using a featured image. Default is 'Use as featured image'.\n * - `menu_name` - Label for the menu name. Default is the same as `name`.\n * - `filter_items_list` - Label for the table views hidden heading. Default is 'Filter posts list' /\n *                       'Filter pages list'.\n * - `items_list_navigation` - Label for the table pagination hidden heading. Default is 'Posts list navigation' /\n *                           'Pages list navigation'.\n * - `items_list` - Label for the table hidden heading. Default is 'Posts list' / 'Pages list'.\n *\n * Above, the first default value is for non-hierarchical post types (like posts)\n * and the second one is for hierarchical post types (like pages).\n *\n * Note: To set labels used in post type admin notices, see the {@see 'post_updated_messages'} filter.\n *\n * @since 3.0.0\n * @since 4.3.0 Added the `featured_image`, `set_featured_image`, `remove_featured_image`,\n *              and `use_featured_image` labels.\n * @since 4.4.0 Added the `archives`, `insert_into_item`, `uploaded_to_this_item`, `filter_items_list`,\n *              `items_list_navigation`, and `items_list` labels.\n * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.\n * @since 4.7.0 Added the `view_items` and `attributes` labels.\n *\n * @access private\n *\n * @param object|WP_Post_Type $post_type_object Post type object.\n * @return object Object with all the labels as member variables.\n */\nfunction get_post_type_labels( $post_type_object ) {\n\t$nohier_vs_hier_defaults = array(\n\t\t'name' => array( _x('Posts', 'post type general name'), _x('Pages', 'post type general name') ),\n\t\t'singular_name' => array( _x('Post', 'post type singular name'), _x('Page', 'post type singular name') ),\n\t\t'add_new' => array( _x('Add New', 'post'), _x('Add New', 'page') ),\n\t\t'add_new_item' => array( __('Add New Post'), __('Add New Page') ),\n\t\t'edit_item' => array( __('Edit Post'), __('Edit Page') ),\n\t\t'new_item' => array( __('New Post'), __('New Page') ),\n\t\t'view_item' => array( __('View Post'), __('View Page') ),\n\t\t'view_items' => array( __('View Posts'), __('View Pages') ),\n\t\t'search_items' => array( __('Search Posts'), __('Search Pages') ),\n\t\t'not_found' => array( __('No posts found.'), __('No pages found.') ),\n\t\t'not_found_in_trash' => array( __('No posts found in Trash.'), __('No pages found in Trash.') ),\n\t\t'parent_item_colon' => array( null, __('Parent Page:') ),\n\t\t'all_items' => array( __( 'All Posts' ), __( 'All Pages' ) ),\n\t\t'archives' => array( __( 'Post Archives' ), __( 'Page Archives' ) ),\n\t\t'attributes' => array( __( 'Post Attributes' ), __( 'Page Attributes' ) ),\n\t\t'insert_into_item' => array( __( 'Insert into post' ), __( 'Insert into page' ) ),\n\t\t'uploaded_to_this_item' => array( __( 'Uploaded to this post' ), __( 'Uploaded to this page' ) ),\n\t\t'featured_image' => array( _x( 'Featured Image', 'post' ), _x( 'Featured Image', 'page' ) ),\n\t\t'set_featured_image' => array( _x( 'Set featured image', 'post' ), _x( 'Set featured image', 'page' ) ),\n\t\t'remove_featured_image' => array( _x( 'Remove featured image', 'post' ), _x( 'Remove featured image', 'page' ) ),\n\t\t'use_featured_image' => array( _x( 'Use as featured image', 'post' ), _x( 'Use as featured image', 'page' ) ),\n\t\t'filter_items_list' => array( __( 'Filter posts list' ), __( 'Filter pages list' ) ),\n\t\t'items_list_navigation' => array( __( 'Posts list navigation' ), __( 'Pages list navigation' ) ),\n\t\t'items_list' => array( __( 'Posts list' ), __( 'Pages list' ) ),\n\t);\n\t$nohier_vs_hier_defaults['menu_name'] = $nohier_vs_hier_defaults['name'];\n\n\t$labels = _get_custom_object_labels( $post_type_object, $nohier_vs_hier_defaults );\n\n\t$post_type = $post_type_object->name;\n\n\t$default_labels = clone $labels;\n\n\t/**\n\t * Filters the labels of a specific post type.\n\t *\n\t * The dynamic portion of the hook name, `$post_type`, refers to\n\t * the post type slug.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @see get_post_type_labels() for the full list of labels.\n\t *\n\t * @param object $labels Object with labels for the post type as member variables.\n\t */\n\t$labels = apply_filters( \"post_type_labels_{$post_type}\", $labels );\n\n\t// Ensure that the filtered labels contain all required default values.\n\t$labels = (object) array_merge( (array) $default_labels, (array) $labels );\n\n\treturn $labels;\n}\n\n/**\n * Build an object with custom-something object (post type, taxonomy) labels\n * out of a custom-something object\n *\n * @since 3.0.0\n * @access private\n *\n * @param object $object                  A custom-something object.\n * @param array  $nohier_vs_hier_defaults Hierarchical vs non-hierarchical default labels.\n * @return object Object containing labels for the given custom-something object.\n */\nfunction _get_custom_object_labels( $object, $nohier_vs_hier_defaults ) {\n\t$object->labels = (array) $object->labels;\n\n\tif ( isset( $object->label ) && empty( $object->labels['name'] ) )\n\t\t$object->labels['name'] = $object->label;\n\n\tif ( !isset( $object->labels['singular_name'] ) && isset( $object->labels['name'] ) )\n\t\t$object->labels['singular_name'] = $object->labels['name'];\n\n\tif ( ! isset( $object->labels['name_admin_bar'] ) )\n\t\t$object->labels['name_admin_bar'] = isset( $object->labels['singular_name'] ) ? $object->labels['singular_name'] : $object->name;\n\n\tif ( !isset( $object->labels['menu_name'] ) && isset( $object->labels['name'] ) )\n\t\t$object->labels['menu_name'] = $object->labels['name'];\n\n\tif ( !isset( $object->labels['all_items'] ) && isset( $object->labels['menu_name'] ) )\n\t\t$object->labels['all_items'] = $object->labels['menu_name'];\n\n\tif ( !isset( $object->labels['archives'] ) && isset( $object->labels['all_items'] ) ) {\n\t\t$object->labels['archives'] = $object->labels['all_items'];\n\t}\n\n\t$defaults = array();\n\tforeach ( $nohier_vs_hier_defaults as $key => $value ) {\n\t\t$defaults[$key] = $object->hierarchical ? $value[1] : $value[0];\n\t}\n\t$labels = array_merge( $defaults, $object->labels );\n\t$object->labels = (object) $object->labels;\n\n\treturn (object) $labels;\n}\n\n/**\n * Add submenus for post types.\n *\n * @access private\n * @since 3.1.0\n */\nfunction _add_post_type_submenus() {\n\tforeach ( get_post_types( array( 'show_ui' => true ) ) as $ptype ) {\n\t\t$ptype_obj = get_post_type_object( $ptype );\n\t\t// Sub-menus only.\n\t\tif ( ! $ptype_obj->show_in_menu || $ptype_obj->show_in_menu === true )\n\t\t\tcontinue;\n\t\tadd_submenu_page( $ptype_obj->show_in_menu, $ptype_obj->labels->name, $ptype_obj->labels->all_items, $ptype_obj->cap->edit_posts, \"edit.php?post_type=$ptype\" );\n\t}\n}\n\n/**\n * Register support of certain features for a post type.\n *\n * All core features are directly associated with a functional area of the edit\n * screen, such as the editor or a meta box. Features include: 'title', 'editor',\n * 'comments', 'revisions', 'trackbacks', 'author', 'excerpt', 'page-attributes',\n * 'thumbnail', 'custom-fields', and 'post-formats'.\n *\n * Additionally, the 'revisions' feature dictates whether the post type will\n * store revisions, and the 'comments' feature dictates whether the comments\n * count will show on the edit screen.\n *\n * @since 3.0.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string       $post_type The post type for which to add the feature.\n * @param string|array $feature   The feature being added, accepts an array of\n *                                feature strings or a single string.\n */\nfunction add_post_type_support( $post_type, $feature ) {\n\tglobal $_wp_post_type_features;\n\n\t$features = (array) $feature;\n\tforeach ($features as $feature) {\n\t\tif ( func_num_args() == 2 )\n\t\t\t$_wp_post_type_features[$post_type][$feature] = true;\n\t\telse\n\t\t\t$_wp_post_type_features[$post_type][$feature] = array_slice( func_get_args(), 2 );\n\t}\n}\n\n/**\n * Remove support for a feature from a post type.\n *\n * @since 3.0.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string $post_type The post type for which to remove the feature.\n * @param string $feature   The feature being removed.\n */\nfunction remove_post_type_support( $post_type, $feature ) {\n\tglobal $_wp_post_type_features;\n\n\tunset( $_wp_post_type_features[ $post_type ][ $feature ] );\n}\n\n/**\n * Get all the post type features\n *\n * @since 3.4.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string $post_type The post type.\n * @return array Post type supports list.\n */\nfunction get_all_post_type_supports( $post_type ) {\n\tglobal $_wp_post_type_features;\n\n\tif ( isset( $_wp_post_type_features[$post_type] ) )\n\t\treturn $_wp_post_type_features[$post_type];\n\n\treturn array();\n}\n\n/**\n * Check a post type's support for a given feature.\n *\n * @since 3.0.0\n *\n * @global array $_wp_post_type_features\n *\n * @param string $post_type The post type being checked.\n * @param string $feature   The feature being checked.\n * @return bool Whether the post type supports the given feature.\n */\nfunction post_type_supports( $post_type, $feature ) {\n\tglobal $_wp_post_type_features;\n\n\treturn ( isset( $_wp_post_type_features[$post_type][$feature] ) );\n}\n\n/**\n * Retrieves a list of post type names that support a specific feature.\n *\n * @since 4.5.0\n *\n * @global array $_wp_post_type_features Post type features\n *\n * @param array|string $feature  Single feature or an array of features the post types should support.\n * @param string       $operator Optional. The logical operation to perform. 'or' means\n *                               only one element from the array needs to match; 'and'\n *                               means all elements must match; 'not' means no elements may\n *                               match. Default 'and'.\n * @return array A list of post type names.\n */\nfunction get_post_types_by_support( $feature, $operator = 'and' ) {\n\tglobal $_wp_post_type_features;\n\n\t$features = array_fill_keys( (array) $feature, true );\n\n\treturn array_keys( wp_filter_object_list( $_wp_post_type_features, $features, $operator ) );\n}\n\n/**\n * Update the post type for the post ID.\n *\n * The page or post cache will be cleaned for the post ID.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $post_id   Optional. Post ID to change post type. Default 0.\n * @param string $post_type Optional. Post type. Accepts 'post' or 'page' to\n *                          name a few. Default 'post'.\n * @return int|false Amount of rows changed. Should be 1 for success and 0 for failure.\n */\nfunction set_post_type( $post_id = 0, $post_type = 'post' ) {\n\tglobal $wpdb;\n\n\t$post_type = sanitize_post_field('post_type', $post_type, $post_id, 'db');\n\t$return = $wpdb->update( $wpdb->posts, array('post_type' => $post_type), array('ID' => $post_id) );\n\n\tclean_post_cache( $post_id );\n\n\treturn $return;\n}\n\n/**\n * Determines whether a post type is considered \"viewable\".\n *\n * For built-in post types such as posts and pages, the 'public' value will be evaluated.\n * For all others, the 'publicly_queryable' value will be used.\n *\n * @since 4.4.0\n * @since 4.5.0 Added the ability to pass a post type name in addition to object.\n * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.\n *\n * @param string|WP_Post_Type $post_type Post type name or object.\n * @return bool Whether the post type should be considered viewable.\n */\nfunction is_post_type_viewable( $post_type ) {\n\tif ( is_scalar( $post_type ) ) {\n\t\t$post_type = get_post_type_object( $post_type );\n\t\tif ( ! $post_type ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn $post_type->publicly_queryable || ( $post_type->_builtin && $post_type->public );\n}\n\n/**\n * Retrieve list of latest posts or posts matching criteria.\n *\n * The defaults are as follows:\n *\n * @since 1.2.0\n *\n * @see WP_Query::parse_query()\n *\n * @param array $args {\n *     Optional. Arguments to retrieve posts. See WP_Query::parse_query() for all\n *     available arguments.\n *\n *     @type int        $numberposts      Total number of posts to retrieve. Is an alias of $posts_per_page\n *                                        in WP_Query. Accepts -1 for all. Default 5.\n *     @type int|string $category         Category ID or comma-separated list of IDs (this or any children).\n *                                        Is an alias of $cat in WP_Query. Default 0.\n *     @type array      $include          An array of post IDs to retrieve, sticky posts will be included.\n *                                        Is an alias of $post__in in WP_Query. Default empty array.\n *     @type array      $exclude          An array of post IDs not to retrieve. Default empty array.\n *     @type bool       $suppress_filters Whether to suppress filters. Default true.\n * }\n * @return array List of posts.\n */\nfunction get_posts( $args = null ) {\n\t$defaults = array(\n\t\t'numberposts' => 5,\n\t\t'category' => 0, 'orderby' => 'date',\n\t\t'order' => 'DESC', 'include' => array(),\n\t\t'exclude' => array(), 'meta_key' => '',\n\t\t'meta_value' =>'', 'post_type' => 'post',\n\t\t'suppress_filters' => true\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\tif ( empty( $r['post_status'] ) )\n\t\t$r['post_status'] = ( 'attachment' == $r['post_type'] ) ? 'inherit' : 'publish';\n\tif ( ! empty($r['numberposts']) && empty($r['posts_per_page']) )\n\t\t$r['posts_per_page'] = $r['numberposts'];\n\tif ( ! empty($r['category']) )\n\t\t$r['cat'] = $r['category'];\n\tif ( ! empty($r['include']) ) {\n\t\t$incposts = wp_parse_id_list( $r['include'] );\n\t\t$r['posts_per_page'] = count($incposts);  // only the number of posts included\n\t\t$r['post__in'] = $incposts;\n\t} elseif ( ! empty($r['exclude']) )\n\t\t$r['post__not_in'] = wp_parse_id_list( $r['exclude'] );\n\n\t$r['ignore_sticky_posts'] = true;\n\t$r['no_found_rows'] = true;\n\n\t$get_posts = new WP_Query;\n\treturn $get_posts->query($r);\n\n}\n\n//\n// Post meta functions\n//\n\n/**\n * Add meta data field to a post.\n *\n * Post meta data is called \"Custom Fields\" on the Administration Screen.\n *\n * @since 1.5.0\n *\n * @param int    $post_id    Post ID.\n * @param string $meta_key   Metadata name.\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param bool   $unique     Optional. Whether the same key should not be added.\n *                           Default false.\n * @return int|false Meta ID on success, false on failure.\n */\nfunction add_post_meta( $post_id, $meta_key, $meta_value, $unique = false ) {\n\t// Make sure meta is added to the post, not a revision.\n\tif ( $the_post = wp_is_post_revision($post_id) )\n\t\t$post_id = $the_post;\n\n\t$added = add_metadata( 'post', $post_id, $meta_key, $meta_value, $unique );\n\tif ( $added ) {\n\t\twp_cache_set( 'last_changed', microtime(), 'posts' );\n\t}\n\treturn $added;\n}\n\n/**\n * Remove metadata matching criteria from a post.\n *\n * You can match based on the key, or key and value. Removing based on key and\n * value, will keep from removing duplicate metadata with the same key. It also\n * allows removing all metadata matching key, if needed.\n *\n * @since 1.5.0\n *\n * @param int    $post_id    Post ID.\n * @param string $meta_key   Metadata name.\n * @param mixed  $meta_value Optional. Metadata value. Must be serializable if\n *                           non-scalar. Default empty.\n * @return bool True on success, false on failure.\n */\nfunction delete_post_meta( $post_id, $meta_key, $meta_value = '' ) {\n\t// Make sure meta is added to the post, not a revision.\n\tif ( $the_post = wp_is_post_revision($post_id) )\n\t\t$post_id = $the_post;\n\n\t$deleted = delete_metadata( 'post', $post_id, $meta_key, $meta_value );\n\tif ( $deleted ) {\n\t\twp_cache_set( 'last_changed', microtime(), 'posts' );\n\t}\n\treturn $deleted;\n}\n\n/**\n * Retrieve post meta field for a post.\n *\n * @since 1.5.0\n *\n * @param int    $post_id Post ID.\n * @param string $key     Optional. The meta key to retrieve. By default, returns\n *                        data for all keys. Default empty.\n * @param bool   $single  Optional. Whether to return a single value. Default false.\n * @return mixed Will be an array if $single is false. Will be value of meta data\n *               field if $single is true.\n */\nfunction get_post_meta( $post_id, $key = '', $single = false ) {\n\treturn get_metadata('post', $post_id, $key, $single);\n}\n\n/**\n * Update post meta field based on post ID.\n *\n * Use the $prev_value parameter to differentiate between meta fields with the\n * same key and post ID.\n *\n * If the meta field for the post does not exist, it will be added.\n *\n * @since 1.5.0\n *\n * @param int    $post_id    Post ID.\n * @param string $meta_key   Metadata key.\n * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.\n * @param mixed  $prev_value Optional. Previous value to check before removing.\n *                           Default empty.\n * @return int|bool Meta ID if the key didn't exist, true on successful update,\n *                  false on failure.\n */\nfunction update_post_meta( $post_id, $meta_key, $meta_value, $prev_value = '' ) {\n\t// Make sure meta is added to the post, not a revision.\n\tif ( $the_post = wp_is_post_revision($post_id) )\n\t\t$post_id = $the_post;\n\n\t$updated = update_metadata( 'post', $post_id, $meta_key, $meta_value, $prev_value );\n\tif ( $updated ) {\n\t\twp_cache_set( 'last_changed', microtime(), 'posts' );\n\t}\n\treturn $updated;\n}\n\n/**\n * Delete everything from post meta matching meta key.\n *\n * @since 2.3.0\n *\n * @param string $post_meta_key Key to search for when deleting.\n * @return bool Whether the post meta key was deleted from the database.\n */\nfunction delete_post_meta_by_key( $post_meta_key ) {\n\t$deleted = delete_metadata( 'post', null, $post_meta_key, '', true );\n\tif ( $deleted ) {\n\t\twp_cache_set( 'last_changed', microtime(), 'posts' );\n\t}\n\treturn $deleted;\n}\n\n/**\n * Retrieve post meta fields, based on post ID.\n *\n * The post meta fields are retrieved from the cache where possible,\n * so the function is optimized to be called more than once.\n *\n * @since 1.2.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return array Post meta for the given post.\n */\nfunction get_post_custom( $post_id = 0 ) {\n\t$post_id = absint( $post_id );\n\tif ( ! $post_id )\n\t\t$post_id = get_the_ID();\n\n\treturn get_post_meta( $post_id );\n}\n\n/**\n * Retrieve meta field names for a post.\n *\n * If there are no meta fields, then nothing (null) will be returned.\n *\n * @since 1.2.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return array|void Array of the keys, if retrieved.\n */\nfunction get_post_custom_keys( $post_id = 0 ) {\n\t$custom = get_post_custom( $post_id );\n\n\tif ( !is_array($custom) )\n\t\treturn;\n\n\tif ( $keys = array_keys($custom) )\n\t\treturn $keys;\n}\n\n/**\n * Retrieve values for a custom post field.\n *\n * The parameters must not be considered optional. All of the post meta fields\n * will be retrieved and only the meta field key values returned.\n *\n * @since 1.2.0\n *\n * @param string $key     Optional. Meta field key. Default empty.\n * @param int    $post_id Optional. Post ID. Default is ID of the global $post.\n * @return array|null Meta field values.\n */\nfunction get_post_custom_values( $key = '', $post_id = 0 ) {\n\tif ( !$key )\n\t\treturn null;\n\n\t$custom = get_post_custom($post_id);\n\n\treturn isset($custom[$key]) ? $custom[$key] : null;\n}\n\n/**\n * Check if post is sticky.\n *\n * Sticky posts should remain at the top of The Loop. If the post ID is not\n * given, then The Loop ID for the current post will be used.\n *\n * @since 2.7.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return bool Whether post is sticky.\n */\nfunction is_sticky( $post_id = 0 ) {\n\t$post_id = absint( $post_id );\n\n\tif ( ! $post_id )\n\t\t$post_id = get_the_ID();\n\n\t$stickies = get_option( 'sticky_posts' );\n\n\tif ( ! is_array( $stickies ) )\n\t\treturn false;\n\n\tif ( in_array( $post_id, $stickies ) )\n\t\treturn true;\n\n\treturn false;\n}\n\n/**\n * Sanitize every post field.\n *\n * If the context is 'raw', then the post object or array will get minimal\n * sanitization of the integer fields.\n *\n * @since 2.3.0\n *\n * @see sanitize_post_field()\n *\n * @param object|WP_Post|array $post    The Post Object or Array\n * @param string               $context Optional. How to sanitize post fields.\n *                                      Accepts 'raw', 'edit', 'db', or 'display'.\n *                                      Default 'display'.\n * @return object|WP_Post|array The now sanitized Post Object or Array (will be the\n *                              same type as $post).\n */\nfunction sanitize_post( $post, $context = 'display' ) {\n\tif ( is_object($post) ) {\n\t\t// Check if post already filtered for this context.\n\t\tif ( isset($post->filter) && $context == $post->filter )\n\t\t\treturn $post;\n\t\tif ( !isset($post->ID) )\n\t\t\t$post->ID = 0;\n\t\tforeach ( array_keys(get_object_vars($post)) as $field )\n\t\t\t$post->$field = sanitize_post_field($field, $post->$field, $post->ID, $context);\n\t\t$post->filter = $context;\n\t} elseif ( is_array( $post ) ) {\n\t\t// Check if post already filtered for this context.\n\t\tif ( isset($post['filter']) && $context == $post['filter'] )\n\t\t\treturn $post;\n\t\tif ( !isset($post['ID']) )\n\t\t\t$post['ID'] = 0;\n\t\tforeach ( array_keys($post) as $field )\n\t\t\t$post[$field] = sanitize_post_field($field, $post[$field], $post['ID'], $context);\n\t\t$post['filter'] = $context;\n\t}\n\treturn $post;\n}\n\n/**\n * Sanitize post field based on context.\n *\n * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and\n * 'js'. The 'display' context is used by default. 'attribute' and 'js' contexts\n * are treated like 'display' when calling filters.\n *\n * @since 2.3.0\n * @since 4.4.0 Like `sanitize_post()`, `$context` defaults to 'display'.\n *\n * @param string $field   The Post Object field name.\n * @param mixed  $value   The Post Object value.\n * @param int    $post_id Post ID.\n * @param string $context Optional. How to sanitize post fields. Looks for 'raw', 'edit',\n *                        'db', 'display', 'attribute' and 'js'. Default 'display'.\n * @return mixed Sanitized value.\n */\nfunction sanitize_post_field( $field, $value, $post_id, $context = 'display' ) {\n\t$int_fields = array('ID', 'post_parent', 'menu_order');\n\tif ( in_array($field, $int_fields) )\n\t\t$value = (int) $value;\n\n\t// Fields which contain arrays of integers.\n\t$array_int_fields = array( 'ancestors' );\n\tif ( in_array($field, $array_int_fields) ) {\n\t\t$value = array_map( 'absint', $value);\n\t\treturn $value;\n\t}\n\n\tif ( 'raw' == $context )\n\t\treturn $value;\n\n\t$prefixed = false;\n\tif ( false !== strpos($field, 'post_') ) {\n\t\t$prefixed = true;\n\t\t$field_no_prefix = str_replace('post_', '', $field);\n\t}\n\n\tif ( 'edit' == $context ) {\n\t\t$format_to_edit = array('post_content', 'post_excerpt', 'post_title', 'post_password');\n\n\t\tif ( $prefixed ) {\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific post field to edit.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field`, refers to the post\n\t\t\t * field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed $value   Value of the post field.\n\t\t\t * @param int   $post_id Post ID.\n\t\t\t */\n\t\t\t$value = apply_filters( \"edit_{$field}\", $value, $post_id );\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific post field to edit.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field_no_prefix`, refers to\n\t\t\t * the post field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed $value   Value of the post field.\n\t\t\t * @param int   $post_id Post ID.\n\t\t\t */\n\t\t\t$value = apply_filters( \"{$field_no_prefix}_edit_pre\", $value, $post_id );\n\t\t} else {\n\t\t\t$value = apply_filters( \"edit_post_{$field}\", $value, $post_id );\n\t\t}\n\n\t\tif ( in_array($field, $format_to_edit) ) {\n\t\t\tif ( 'post_content' == $field )\n\t\t\t\t$value = format_to_edit($value, user_can_richedit());\n\t\t\telse\n\t\t\t\t$value = format_to_edit($value);\n\t\t} else {\n\t\t\t$value = esc_attr($value);\n\t\t}\n\t} elseif ( 'db' == $context ) {\n\t\tif ( $prefixed ) {\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific post field before saving.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field`, refers to the post\n\t\t\t * field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed $value Value of the post field.\n\t\t\t */\n\t\t\t$value = apply_filters( \"pre_{$field}\", $value );\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific field before saving.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field_no_prefix`, refers\n\t\t\t * to the post field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed $value Value of the post field.\n\t\t\t */\n\t\t\t$value = apply_filters( \"{$field_no_prefix}_save_pre\", $value );\n\t\t} else {\n\t\t\t$value = apply_filters( \"pre_post_{$field}\", $value );\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific post field before saving.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field`, refers to the post\n\t\t\t * field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed $value Value of the post field.\n\t\t\t */\n\t\t\t$value = apply_filters( \"{$field}_pre\", $value );\n\t\t}\n\t} else {\n\n\t\t// Use display filters by default.\n\t\tif ( $prefixed ) {\n\n\t\t\t/**\n\t\t\t * Filters the value of a specific post field for display.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$field`, refers to the post\n\t\t\t * field name.\n\t\t\t *\n\t\t\t * @since 2.3.0\n\t\t\t *\n\t\t\t * @param mixed  $value   Value of the prefixed post field.\n\t\t\t * @param int    $post_id Post ID.\n\t\t\t * @param string $context Context for how to sanitize the field. Possible\n\t\t\t *                        values include 'raw', 'edit', 'db', 'display',\n\t\t\t *                        'attribute' and 'js'.\n\t\t\t */\n\t\t\t$value = apply_filters( \"{$field}\", $value, $post_id, $context );\n\t\t} else {\n\t\t\t$value = apply_filters( \"post_{$field}\", $value, $post_id, $context );\n\t\t}\n\n\t\tif ( 'attribute' == $context ) {\n\t\t\t$value = esc_attr( $value );\n\t\t} elseif ( 'js' == $context ) {\n\t\t\t$value = esc_js( $value );\n\t\t}\n\t}\n\n\treturn $value;\n}\n\n/**\n * Make a post sticky.\n *\n * Sticky posts should be displayed at the top of the front page.\n *\n * @since 2.7.0\n *\n * @param int $post_id Post ID.\n */\nfunction stick_post( $post_id ) {\n\t$stickies = get_option('sticky_posts');\n\n\tif ( !is_array($stickies) )\n\t\t$stickies = array($post_id);\n\n\tif ( ! in_array($post_id, $stickies) )\n\t\t$stickies[] = $post_id;\n\n\t$updated = update_option( 'sticky_posts', $stickies );\n\n\tif ( $updated ) {\n\t\t/**\n\t\t * Fires once a post has been added to the sticky list.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param int $post_id ID of the post that was stuck.\n\t\t */\n\t\tdo_action( 'post_stuck', $post_id );\n\t}\n}\n\n/**\n * Un-stick a post.\n *\n * Sticky posts should be displayed at the top of the front page.\n *\n * @since 2.7.0\n *\n * @param int $post_id Post ID.\n */\nfunction unstick_post( $post_id ) {\n\t$stickies = get_option('sticky_posts');\n\n\tif ( !is_array($stickies) )\n\t\treturn;\n\n\tif ( ! in_array($post_id, $stickies) )\n\t\treturn;\n\n\t$offset = array_search($post_id, $stickies);\n\tif ( false === $offset )\n\t\treturn;\n\n\tarray_splice($stickies, $offset, 1);\n\n\t$updated = update_option( 'sticky_posts', $stickies );\n\n\tif ( $updated ) {\n\t\t/**\n\t\t * Fires once a post has been removed from the sticky list.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param int $post_id ID of the post that was unstuck.\n\t\t */\n\t\tdo_action( 'post_unstuck', $post_id );\n\t}\n}\n\n/**\n * Return the cache key for wp_count_posts() based on the passed arguments.\n *\n * @since 3.9.0\n *\n * @param string $type Optional. Post type to retrieve count Default 'post'.\n * @param string $perm Optional. 'readable' or empty. Default empty.\n * @return string The cache key.\n */\nfunction _count_posts_cache_key( $type = 'post', $perm = '' ) {\n\t$cache_key = 'posts-' . $type;\n\tif ( 'readable' == $perm && is_user_logged_in() ) {\n\t\t$post_type_object = get_post_type_object( $type );\n\t\tif ( $post_type_object && ! current_user_can( $post_type_object->cap->read_private_posts ) ) {\n\t\t\t$cache_key .= '_' . $perm . '_' . get_current_user_id();\n\t\t}\n\t}\n\treturn $cache_key;\n}\n\n/**\n * Count number of posts of a post type and if user has permissions to view.\n *\n * This function provides an efficient method of finding the amount of post's\n * type a blog has. Another method is to count the amount of items in\n * get_posts(), but that method has a lot of overhead with doing so. Therefore,\n * when developing for 2.5+, use this function instead.\n *\n * The $perm parameter checks for 'readable' value and if the user can read\n * private posts, it will display that for the user that is signed in.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $type Optional. Post type to retrieve count. Default 'post'.\n * @param string $perm Optional. 'readable' or empty. Default empty.\n * @return object Number of posts for each status.\n */\nfunction wp_count_posts( $type = 'post', $perm = '' ) {\n\tglobal $wpdb;\n\n\tif ( ! post_type_exists( $type ) )\n\t\treturn new stdClass;\n\n\t$cache_key = _count_posts_cache_key( $type, $perm );\n\n\t$counts = wp_cache_get( $cache_key, 'counts' );\n\tif ( false !== $counts ) {\n\t\t/** This filter is documented in wp-includes/post.php */\n\t\treturn apply_filters( 'wp_count_posts', $counts, $type, $perm );\n\t}\n\n\t$query = \"SELECT post_status, COUNT( * ) AS num_posts FROM {$wpdb->posts} WHERE post_type = %s\";\n\tif ( 'readable' == $perm && is_user_logged_in() ) {\n\t\t$post_type_object = get_post_type_object($type);\n\t\tif ( ! current_user_can( $post_type_object->cap->read_private_posts ) ) {\n\t\t\t$query .= $wpdb->prepare( \" AND (post_status != 'private' OR ( post_author = %d AND post_status = 'private' ))\",\n\t\t\t\tget_current_user_id()\n\t\t\t);\n\t\t}\n\t}\n\t$query .= ' GROUP BY post_status';\n\n\t$results = (array) $wpdb->get_results( $wpdb->prepare( $query, $type ), ARRAY_A );\n\t$counts = array_fill_keys( get_post_stati(), 0 );\n\n\tforeach ( $results as $row ) {\n\t\t$counts[ $row['post_status'] ] = $row['num_posts'];\n\t}\n\n\t$counts = (object) $counts;\n\twp_cache_set( $cache_key, $counts, 'counts' );\n\n\t/**\n\t * Modify returned post counts by status for the current post type.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param object $counts An object containing the current post_type's post\n\t *                       counts by status.\n\t * @param string $type   Post type.\n\t * @param string $perm   The permission to determine if the posts are 'readable'\n\t *                       by the current user.\n\t */\n\treturn apply_filters( 'wp_count_posts', $counts, $type, $perm );\n}\n\n/**\n * Count number of attachments for the mime type(s).\n *\n * If you set the optional mime_type parameter, then an array will still be\n * returned, but will only have the item you are looking for. It does not give\n * you the number of attachments that are children of a post. You can get that\n * by counting the number of children that post has.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string|array $mime_type Optional. Array or comma-separated list of\n *                                MIME patterns. Default empty.\n * @return object An object containing the attachment counts by mime type.\n */\nfunction wp_count_attachments( $mime_type = '' ) {\n\tglobal $wpdb;\n\n\t$and = wp_post_mime_type_where( $mime_type );\n\t$count = $wpdb->get_results( \"SELECT post_mime_type, COUNT( * ) AS num_posts FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' $and GROUP BY post_mime_type\", ARRAY_A );\n\n\t$counts = array();\n\tforeach ( (array) $count as $row ) {\n\t\t$counts[ $row['post_mime_type'] ] = $row['num_posts'];\n\t}\n\t$counts['trash'] = $wpdb->get_var( \"SELECT COUNT( * ) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status = 'trash' $and\");\n\n\t/**\n\t * Modify returned attachment counts by mime type.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param object $counts    An object containing the attachment counts by\n\t *                          mime type.\n\t * @param string $mime_type The mime type pattern used to filter the attachments\n\t *                          counted.\n\t */\n\treturn apply_filters( 'wp_count_attachments', (object) $counts, $mime_type );\n}\n\n/**\n * Get default post mime types.\n *\n * @since 2.9.0\n *\n * @return array List of post mime types.\n */\nfunction get_post_mime_types() {\n\t$post_mime_types = array(\t//\tarray( adj, noun )\n\t\t'image' => array(__('Images'), __('Manage Images'), _n_noop('Image <span class=\"count\">(%s)</span>', 'Images <span class=\"count\">(%s)</span>')),\n\t\t'audio' => array(__('Audio'), __('Manage Audio'), _n_noop('Audio <span class=\"count\">(%s)</span>', 'Audio <span class=\"count\">(%s)</span>')),\n\t\t'video' => array(__('Video'), __('Manage Video'), _n_noop('Video <span class=\"count\">(%s)</span>', 'Video <span class=\"count\">(%s)</span>')),\n\t);\n\n\t/**\n\t * Filters the default list of post mime types.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param array $post_mime_types Default list of post mime types.\n\t */\n\treturn apply_filters( 'post_mime_types', $post_mime_types );\n}\n\n/**\n * Check a MIME-Type against a list.\n *\n * If the wildcard_mime_types parameter is a string, it must be comma separated\n * list. If the real_mime_types is a string, it is also comma separated to\n * create the list.\n *\n * @since 2.5.0\n *\n * @param string|array $wildcard_mime_types Mime types, e.g. audio/mpeg or image (same as image/*)\n *                                          or flash (same as *flash*).\n * @param string|array $real_mime_types     Real post mime type values.\n * @return array array(wildcard=>array(real types)).\n */\nfunction wp_match_mime_types( $wildcard_mime_types, $real_mime_types ) {\n\t$matches = array();\n\tif ( is_string( $wildcard_mime_types ) ) {\n\t\t$wildcard_mime_types = array_map( 'trim', explode( ',', $wildcard_mime_types ) );\n\t}\n\tif ( is_string( $real_mime_types ) ) {\n\t\t$real_mime_types = array_map( 'trim', explode( ',', $real_mime_types ) );\n\t}\n\n\t$patternses = array();\n\t$wild = '[-._a-z0-9]*';\n\n\tforeach ( (array) $wildcard_mime_types as $type ) {\n\t\t$mimes = array_map( 'trim', explode( ',', $type ) );\n\t\tforeach ( $mimes as $mime ) {\n\t\t\t$regex = str_replace( '__wildcard__', $wild, preg_quote( str_replace( '*', '__wildcard__', $mime ) ) );\n\t\t\t$patternses[][$type] = \"^$regex$\";\n\t\t\tif ( false === strpos( $mime, '/' ) ) {\n\t\t\t\t$patternses[][$type] = \"^$regex/\";\n\t\t\t\t$patternses[][$type] = $regex;\n\t\t\t}\n\t\t}\n\t}\n\tasort( $patternses );\n\n\tforeach ( $patternses as $patterns ) {\n\t\tforeach ( $patterns as $type => $pattern ) {\n\t\t\tforeach ( (array) $real_mime_types as $real ) {\n\t\t\t\tif ( preg_match( \"#$pattern#\", $real ) && ( empty( $matches[$type] ) || false === array_search( $real, $matches[$type] ) ) ) {\n\t\t\t\t\t$matches[$type][] = $real;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $matches;\n}\n\n/**\n * Convert MIME types into SQL.\n *\n * @since 2.5.0\n *\n * @param string|array $post_mime_types List of mime types or comma separated string\n *                                      of mime types.\n * @param string       $table_alias     Optional. Specify a table alias, if needed.\n *                                      Default empty.\n * @return string The SQL AND clause for mime searching.\n */\nfunction wp_post_mime_type_where( $post_mime_types, $table_alias = '' ) {\n\t$where = '';\n\t$wildcards = array('', '%', '%/%');\n\tif ( is_string($post_mime_types) )\n\t\t$post_mime_types = array_map('trim', explode(',', $post_mime_types));\n\n\t$wheres = array();\n\n\tforeach ( (array) $post_mime_types as $mime_type ) {\n\t\t$mime_type = preg_replace('/\\s/', '', $mime_type);\n\t\t$slashpos = strpos($mime_type, '/');\n\t\tif ( false !== $slashpos ) {\n\t\t\t$mime_group = preg_replace('/[^-*.a-zA-Z0-9]/', '', substr($mime_type, 0, $slashpos));\n\t\t\t$mime_subgroup = preg_replace('/[^-*.+a-zA-Z0-9]/', '', substr($mime_type, $slashpos + 1));\n\t\t\tif ( empty($mime_subgroup) )\n\t\t\t\t$mime_subgroup = '*';\n\t\t\telse\n\t\t\t\t$mime_subgroup = str_replace('/', '', $mime_subgroup);\n\t\t\t$mime_pattern = \"$mime_group/$mime_subgroup\";\n\t\t} else {\n\t\t\t$mime_pattern = preg_replace('/[^-*.a-zA-Z0-9]/', '', $mime_type);\n\t\t\tif ( false === strpos($mime_pattern, '*') )\n\t\t\t\t$mime_pattern .= '/*';\n\t\t}\n\n\t\t$mime_pattern = preg_replace('/\\*+/', '%', $mime_pattern);\n\n\t\tif ( in_array( $mime_type, $wildcards ) )\n\t\t\treturn '';\n\n\t\tif ( false !== strpos($mime_pattern, '%') )\n\t\t\t$wheres[] = empty($table_alias) ? \"post_mime_type LIKE '$mime_pattern'\" : \"$table_alias.post_mime_type LIKE '$mime_pattern'\";\n\t\telse\n\t\t\t$wheres[] = empty($table_alias) ? \"post_mime_type = '$mime_pattern'\" : \"$table_alias.post_mime_type = '$mime_pattern'\";\n\t}\n\tif ( !empty($wheres) )\n\t\t$where = ' AND (' . join(' OR ', $wheres) . ') ';\n\treturn $where;\n}\n\n/**\n * Trash or delete a post or page.\n *\n * When the post and page is permanently deleted, everything that is tied to\n * it is deleted also. This includes comments, post meta fields, and terms\n * associated with the post.\n *\n * The post or page is moved to trash instead of permanently deleted unless\n * trash is disabled, item is already in the trash, or $force_delete is true.\n *\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n * @see wp_delete_attachment()\n * @see wp_trash_post()\n *\n * @param int  $postid       Optional. Post ID. Default 0.\n * @param bool $force_delete Optional. Whether to bypass trash and force deletion.\n *                           Default false.\n * @return WP_Post|false|null Post data on success, false or null on failure.\n */\nfunction wp_delete_post( $postid = 0, $force_delete = false ) {\n\tglobal $wpdb;\n\n\t$post = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM $wpdb->posts WHERE ID = %d\", $postid ) );\n\n\tif ( ! $post ) {\n\t\treturn $post;\n\t}\n\n\t$post = get_post( $post );\n\n\tif ( ! $force_delete && ( 'post' === $post->post_type || 'page' === $post->post_type ) && 'trash' !== get_post_status( $postid ) && EMPTY_TRASH_DAYS ) {\n\t\treturn wp_trash_post( $postid );\n\t}\n\n\tif ( 'attachment' === $post->post_type ) {\n\t\treturn wp_delete_attachment( $postid, $force_delete );\n\t}\n\n\t/**\n\t * Filters whether a post deletion should take place.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param bool    $delete       Whether to go forward with deletion.\n\t * @param WP_Post $post         Post object.\n\t * @param bool    $force_delete Whether to bypass the trash.\n\t */\n\t$check = apply_filters( 'pre_delete_post', null, $post, $force_delete );\n\tif ( null !== $check ) {\n\t\treturn $check;\n\t}\n\n\t/**\n\t * Fires before a post is deleted, at the start of wp_delete_post().\n\t *\n\t * @since 3.2.0\n\t *\n\t * @see wp_delete_post()\n\t *\n\t * @param int $postid Post ID.\n\t */\n\tdo_action( 'before_delete_post', $postid );\n\n\tdelete_post_meta($postid,'_wp_trash_meta_status');\n\tdelete_post_meta($postid,'_wp_trash_meta_time');\n\n\twp_delete_object_term_relationships($postid, get_object_taxonomies($post->post_type));\n\n\t$parent_data = array( 'post_parent' => $post->post_parent );\n\t$parent_where = array( 'post_parent' => $postid );\n\n\tif ( is_post_type_hierarchical( $post->post_type ) ) {\n\t\t// Point children of this page to its parent, also clean the cache of affected children.\n\t\t$children_query = $wpdb->prepare( \"SELECT * FROM $wpdb->posts WHERE post_parent = %d AND post_type = %s\", $postid, $post->post_type );\n\t\t$children = $wpdb->get_results( $children_query );\n\t\tif ( $children ) {\n\t\t\t$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => $post->post_type ) );\n\t\t}\n\t}\n\n\t// Do raw query. wp_get_post_revisions() is filtered.\n\t$revision_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT ID FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'revision'\", $postid ) );\n\t// Use wp_delete_post (via wp_delete_post_revision) again. Ensures any meta/misplaced data gets cleaned up.\n\tforeach ( $revision_ids as $revision_id )\n\t\twp_delete_post_revision( $revision_id );\n\n\t// Point all attachments to this post up one level.\n\t$wpdb->update( $wpdb->posts, $parent_data, $parent_where + array( 'post_type' => 'attachment' ) );\n\n\twp_defer_comment_counting( true );\n\n\t$comment_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d\", $postid ));\n\tforeach ( $comment_ids as $comment_id ) {\n\t\twp_delete_comment( $comment_id, true );\n\t}\n\n\twp_defer_comment_counting( false );\n\n\t$post_meta_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d \", $postid ));\n\tforeach ( $post_meta_ids as $mid )\n\t\tdelete_metadata_by_mid( 'post', $mid );\n\n\t/**\n\t * Fires immediately before a post is deleted from the database.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param int $postid Post ID.\n\t */\n\tdo_action( 'delete_post', $postid );\n\t$result = $wpdb->delete( $wpdb->posts, array( 'ID' => $postid ) );\n\tif ( ! $result ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Fires immediately after a post is deleted from the database.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param int $postid Post ID.\n\t */\n\tdo_action( 'deleted_post', $postid );\n\n\tclean_post_cache( $post );\n\n\tif ( is_post_type_hierarchical( $post->post_type ) && $children ) {\n\t\tforeach ( $children as $child )\n\t\t\tclean_post_cache( $child );\n\t}\n\n\twp_clear_scheduled_hook('publish_future_post', array( $postid ) );\n\n\t/**\n\t * Fires after a post is deleted, at the conclusion of wp_delete_post().\n\t *\n\t * @since 3.2.0\n\t *\n\t * @see wp_delete_post()\n\t *\n\t * @param int $postid Post ID.\n\t */\n\tdo_action( 'after_delete_post', $postid );\n\n\treturn $post;\n}\n\n/**\n * Reset the page_on_front, show_on_front, and page_for_post settings when\n * a linked page is deleted or trashed.\n *\n * Also ensures the post is no longer sticky.\n *\n * @since 3.7.0\n * @access private\n *\n * @param int $post_id Post ID.\n */\nfunction _reset_front_page_settings_for_post( $post_id ) {\n\t$post = get_post( $post_id );\n\tif ( 'page' == $post->post_type ) {\n\t \t/*\n\t \t * If the page is defined in option page_on_front or post_for_posts,\n\t \t * adjust the corresponding options.\n\t \t */\n\t\tif ( get_option( 'page_on_front' ) == $post->ID ) {\n\t\t\tupdate_option( 'show_on_front', 'posts' );\n\t\t\tupdate_option( 'page_on_front', 0 );\n\t\t}\n\t\tif ( get_option( 'page_for_posts' ) == $post->ID ) {\n\t\t\tdelete_option( 'page_for_posts', 0 );\n\t\t}\n\t}\n\tunstick_post( $post->ID );\n}\n\n/**\n * Move a post or page to the Trash\n *\n * If trash is disabled, the post or page is permanently deleted.\n *\n * @since 2.9.0\n *\n * @see wp_delete_post()\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post\n *                     if EMPTY_TRASH_DAYS equals true.\n * @return WP_Post|false|null Post data on success, false or null on failure.\n */\nfunction wp_trash_post( $post_id = 0 ) {\n\tif ( ! EMPTY_TRASH_DAYS ) {\n\t\treturn wp_delete_post( $post_id, true );\n\t}\n\n\t$post = get_post( $post_id );\n\n\tif ( ! $post ) {\n\t\treturn $post;\n\t}\n\n\tif ( 'trash' === $post->post_status ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Filters whether a post trashing should take place.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param bool    $trash Whether to go forward with trashing.\n\t * @param WP_Post $post  Post object.\n\t */\n\t$check = apply_filters( 'pre_trash_post', null, $post );\n\tif ( null !== $check ) {\n\t\treturn $check;\n\t}\n\n\t/**\n\t * Fires before a post is sent to the trash.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'wp_trash_post', $post_id );\n\n\tadd_post_meta( $post_id, '_wp_trash_meta_status', $post->post_status );\n\tadd_post_meta( $post_id, '_wp_trash_meta_time', time() );\n\n\twp_update_post( array( 'ID' => $post_id, 'post_status' => 'trash' ) );\n\n\twp_trash_post_comments( $post_id );\n\n\t/**\n\t * Fires after a post is sent to the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'trashed_post', $post_id );\n\n\treturn $post;\n}\n\n/**\n * Restore a post or page from the Trash.\n *\n * @since 2.9.0\n *\n * @param int $post_id Optional. Post ID. Default is ID of the global $post.\n * @return WP_Post|false|null Post data on success, false or null on failure.\n */\nfunction wp_untrash_post( $post_id = 0 ) {\n\t$post = get_post( $post_id );\n\n\tif ( ! $post ) {\n\t\treturn $post;\n\t}\n\n\tif ( 'trash' !== $post->post_status ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Filters whether a post untrashing should take place.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param bool    $untrash Whether to go forward with untrashing.\n\t * @param WP_Post $post    Post object.\n\t */\n\t$check = apply_filters( 'pre_untrash_post', null, $post );\n\tif ( null !== $check ) {\n\t\treturn $check;\n\t}\n\n\t/**\n\t * Fires before a post is restored from the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'untrash_post', $post_id );\n\n\t$post_status = get_post_meta( $post_id, '_wp_trash_meta_status', true );\n\n\tdelete_post_meta( $post_id, '_wp_trash_meta_status' );\n\tdelete_post_meta( $post_id, '_wp_trash_meta_time' );\n\n\twp_update_post( array( 'ID' => $post_id, 'post_status' => $post_status ) );\n\n\twp_untrash_post_comments( $post_id );\n\n\t/**\n\t * Fires after a post is restored from the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'untrashed_post', $post_id );\n\n\treturn $post;\n}\n\n/**\n * Moves comments for a post to the trash.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post|null $post Optional. Post ID or post object. Defaults to global $post.\n * @return mixed|void False on failure.\n */\nfunction wp_trash_post_comments( $post = null ) {\n\tglobal $wpdb;\n\n\t$post = get_post($post);\n\tif ( empty($post) )\n\t\treturn;\n\n\t$post_id = $post->ID;\n\n\t/**\n\t * Fires before comments are sent to the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'trash_post_comments', $post_id );\n\n\t$comments = $wpdb->get_results( $wpdb->prepare(\"SELECT comment_ID, comment_approved FROM $wpdb->comments WHERE comment_post_ID = %d\", $post_id) );\n\tif ( empty($comments) )\n\t\treturn;\n\n\t// Cache current status for each comment.\n\t$statuses = array();\n\tforeach ( $comments as $comment )\n\t\t$statuses[$comment->comment_ID] = $comment->comment_approved;\n\tadd_post_meta($post_id, '_wp_trash_meta_comments_status', $statuses);\n\n\t// Set status for all comments to post-trashed.\n\t$result = $wpdb->update($wpdb->comments, array('comment_approved' => 'post-trashed'), array('comment_post_ID' => $post_id));\n\n\tclean_comment_cache( array_keys($statuses) );\n\n\t/**\n\t * Fires after comments are sent to the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int   $post_id  Post ID.\n\t * @param array $statuses Array of comment statuses.\n\t */\n\tdo_action( 'trashed_post_comments', $post_id, $statuses );\n\n\treturn $result;\n}\n\n/**\n * Restore comments for a post from the trash.\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post|null $post Optional. Post ID or post object. Defaults to global $post.\n * @return true|void\n */\nfunction wp_untrash_post_comments( $post = null ) {\n\tglobal $wpdb;\n\n\t$post = get_post($post);\n\tif ( empty($post) )\n\t\treturn;\n\n\t$post_id = $post->ID;\n\n\t$statuses = get_post_meta($post_id, '_wp_trash_meta_comments_status', true);\n\n\tif ( empty($statuses) )\n\t\treturn true;\n\n\t/**\n\t * Fires before comments are restored for a post from the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'untrash_post_comments', $post_id );\n\n\t// Restore each comment to its original status.\n\t$group_by_status = array();\n\tforeach ( $statuses as $comment_id => $comment_status )\n\t\t$group_by_status[$comment_status][] = $comment_id;\n\n\tforeach ( $group_by_status as $status => $comments ) {\n\t\t// Sanity check. This shouldn't happen.\n\t\tif ( 'post-trashed' == $status ) {\n\t\t\t$status = '0';\n\t\t}\n\t\t$comments_in = implode( ', ', array_map( 'intval', $comments ) );\n\t\t$wpdb->query( $wpdb->prepare( \"UPDATE $wpdb->comments SET comment_approved = %s WHERE comment_ID IN ($comments_in)\", $status ) );\n\t}\n\n\tclean_comment_cache( array_keys($statuses) );\n\n\tdelete_post_meta($post_id, '_wp_trash_meta_comments_status');\n\n\t/**\n\t * Fires after comments are restored for a post from the trash.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param int $post_id Post ID.\n\t */\n\tdo_action( 'untrashed_post_comments', $post_id );\n}\n\n/**\n * Retrieve the list of categories for a post.\n *\n * Compatibility layer for themes and plugins. Also an easy layer of abstraction\n * away from the complexity of the taxonomy layer.\n *\n * @since 2.1.0\n *\n * @see wp_get_object_terms()\n *\n * @param int   $post_id Optional. The Post ID. Does not default to the ID of the\n *                       global $post. Default 0.\n * @param array $args    Optional. Category query parameters. Default empty array.\n *                       See WP_Term_Query::__construct() for supported arguments.\n * @return array|WP_Error List of categories. If the `$fields` argument passed via `$args` is 'all' or\n *                        'all_with_object_id', an array of WP_Term objects will be returned. If `$fields`\n *                        is 'ids', an array of category ids. If `$fields` is 'names', an array of category names.\n *                        WP_Error object if 'category' taxonomy doesn't exist.\n */\nfunction wp_get_post_categories( $post_id = 0, $args = array() ) {\n\t$post_id = (int) $post_id;\n\n\t$defaults = array('fields' => 'ids');\n\t$args = wp_parse_args( $args, $defaults );\n\n\t$cats = wp_get_object_terms($post_id, 'category', $args);\n\treturn $cats;\n}\n\n/**\n * Retrieve the tags for a post.\n *\n * There is only one default for this function, called 'fields' and by default\n * is set to 'all'. There are other defaults that can be overridden in\n * wp_get_object_terms().\n *\n * @since 2.3.0\n *\n * @param int   $post_id Optional. The Post ID. Does not default to the ID of the\n *                       global $post. Default 0.\n * @param array $args    Optional. Tag query parameters. Default empty array.\n *                       See WP_Term_Query::__construct() for supported arguments.\n * @return array|WP_Error Array of WP_Term objects on success or empty array if no tags were found.\n *                        WP_Error object if 'post_tag' taxonomy doesn't exist.\n */\nfunction wp_get_post_tags( $post_id = 0, $args = array() ) {\n\treturn wp_get_post_terms( $post_id, 'post_tag', $args);\n}\n\n/**\n * Retrieves the terms for a post.\n *\n * @since 2.8.0\n *\n * @param int          $post_id  Optional. The Post ID. Does not default to the ID of the\n *                               global $post. Default 0.\n * @param string|array $taxonomy Optional. The taxonomy slug or array of slugs for which\n *                               to retrieve terms. Default 'post_tag'.\n * @param array        $args     {\n *     Optional. Term query parameters. See WP_Term_Query::__construct() for supported arguments.\n *\n *     @type string $fields Term fields to retrieve. Default 'all'.\n * }\n * @return array|WP_Error Array of WP_Term objects on success or empty array if no terms were found.\n *                        WP_Error object if `$taxonomy` doesn't exist.\n */\nfunction wp_get_post_terms( $post_id = 0, $taxonomy = 'post_tag', $args = array() ) {\n\t$post_id = (int) $post_id;\n\n\t$defaults = array('fields' => 'all');\n\t$args = wp_parse_args( $args, $defaults );\n\n\t$tags = wp_get_object_terms($post_id, $taxonomy, $args);\n\n\treturn $tags;\n}\n\n/**\n * Retrieve a number of recent posts.\n *\n * @since 1.0.0\n *\n * @see get_posts()\n *\n * @param array  $args   Optional. Arguments to retrieve posts. Default empty array.\n * @param string $output Optional. The required return type. One of OBJECT or ARRAY_A, which correspond to\n *                       a WP_Post object or an associative array, respectively. Default ARRAY_A.\n * @return array|false Array of recent posts, where the type of each element is determined by $output parameter.\n *                     Empty array on failure.\n */\nfunction wp_get_recent_posts( $args = array(), $output = ARRAY_A ) {\n\n\tif ( is_numeric( $args ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.1.0', __( 'Passing an integer number of posts is deprecated. Pass an array of arguments instead.' ) );\n\t\t$args = array( 'numberposts' => absint( $args ) );\n\t}\n\n\t// Set default arguments.\n\t$defaults = array(\n\t\t'numberposts' => 10, 'offset' => 0,\n\t\t'category' => 0, 'orderby' => 'post_date',\n\t\t'order' => 'DESC', 'include' => '',\n\t\t'exclude' => '', 'meta_key' => '',\n\t\t'meta_value' =>'', 'post_type' => 'post', 'post_status' => 'draft, publish, future, pending, private',\n\t\t'suppress_filters' => true\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$results = get_posts( $r );\n\n\t// Backward compatibility. Prior to 3.1 expected posts to be returned in array.\n\tif ( ARRAY_A == $output ){\n\t\tforeach ( $results as $key => $result ) {\n\t\t\t$results[$key] = get_object_vars( $result );\n\t\t}\n\t\treturn $results ? $results : array();\n\t}\n\n\treturn $results ? $results : false;\n\n}\n\n/**\n * Insert or update a post.\n *\n * If the $postarr parameter has 'ID' set to a value, then post will be updated.\n *\n * You can set the post date manually, by setting the values for 'post_date'\n * and 'post_date_gmt' keys. You can close the comments or open the comments by\n * setting the value for 'comment_status' key.\n *\n * @since 1.0.0\n * @since 4.2.0 Support was added for encoding emoji in the post title, content, and excerpt.\n * @since 4.4.0 A 'meta_input' array can now be passed to `$postarr` to add post meta data.\n *\n * @see sanitize_post()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $postarr {\n *     An array of elements that make up a post to update or insert.\n *\n *     @type int    $ID                    The post ID. If equal to something other than 0,\n *                                         the post with that ID will be updated. Default 0.\n *     @type int    $post_author           The ID of the user who added the post. Default is\n *                                         the current user ID.\n *     @type string $post_date             The date of the post. Default is the current time.\n *     @type string $post_date_gmt         The date of the post in the GMT timezone. Default is\n *                                         the value of `$post_date`.\n *     @type mixed  $post_content          The post content. Default empty.\n *     @type string $post_content_filtered The filtered post content. Default empty.\n *     @type string $post_title            The post title. Default empty.\n *     @type string $post_excerpt          The post excerpt. Default empty.\n *     @type string $post_status           The post status. Default 'draft'.\n *     @type string $post_type             The post type. Default 'post'.\n *     @type string $comment_status        Whether the post can accept comments. Accepts 'open' or 'closed'.\n *                                         Default is the value of 'default_comment_status' option.\n *     @type string $ping_status           Whether the post can accept pings. Accepts 'open' or 'closed'.\n *                                         Default is the value of 'default_ping_status' option.\n *     @type string $post_password         The password to access the post. Default empty.\n *     @type string $post_name             The post name. Default is the sanitized post title\n *                                         when creating a new post.\n *     @type string $to_ping               Space or carriage return-separated list of URLs to ping.\n *                                         Default empty.\n *     @type string $pinged                Space or carriage return-separated list of URLs that have\n *                                         been pinged. Default empty.\n *     @type string $post_modified         The date when the post was last modified. Default is\n *                                         the current time.\n *     @type string $post_modified_gmt     The date when the post was last modified in the GMT\n *                                         timezone. Default is the current time.\n *     @type int    $post_parent           Set this for the post it belongs to, if any. Default 0.\n *     @type int    $menu_order            The order the post should be displayed in. Default 0.\n *     @type string $post_mime_type        The mime type of the post. Default empty.\n *     @type string $guid                  Global Unique ID for referencing the post. Default empty.\n *     @type array  $post_category         Array of category names, slugs, or IDs.\n *                                         Defaults to value of the 'default_category' option.\n *     @type array  $tags_input            Array of tag names, slugs, or IDs. Default empty.\n *     @type array  $tax_input             Array of taxonomy terms keyed by their taxonomy name. Default empty.\n *     @type array  $meta_input            Array of post meta values keyed by their post meta key. Default empty.\n * }\n * @param bool  $wp_error Optional. Whether to return a WP_Error on failure. Default false.\n * @return int|WP_Error The post ID on success. The value 0 or WP_Error on failure.\n */\nfunction wp_insert_post( $postarr, $wp_error = false ) {\n\tglobal $wpdb;\n\n\t$user_id = get_current_user_id();\n\n\t$defaults = array(\n\t\t'post_author' => $user_id,\n\t\t'post_content' => '',\n\t\t'post_content_filtered' => '',\n\t\t'post_title' => '',\n\t\t'post_excerpt' => '',\n\t\t'post_status' => 'draft',\n\t\t'post_type' => 'post',\n\t\t'comment_status' => '',\n\t\t'ping_status' => '',\n\t\t'post_password' => '',\n\t\t'to_ping' =>  '',\n\t\t'pinged' => '',\n\t\t'post_parent' => 0,\n\t\t'menu_order' => 0,\n\t\t'guid' => '',\n\t\t'import_id' => 0,\n\t\t'context' => '',\n\t);\n\n\t$postarr = wp_parse_args($postarr, $defaults);\n\n\tunset( $postarr[ 'filter' ] );\n\n\t$postarr = sanitize_post($postarr, 'db');\n\n\t// Are we updating or creating?\n\t$post_ID = 0;\n\t$update = false;\n\t$guid = $postarr['guid'];\n\n\tif ( ! empty( $postarr['ID'] ) ) {\n\t\t$update = true;\n\n\t\t// Get the post ID and GUID.\n\t\t$post_ID = $postarr['ID'];\n\t\t$post_before = get_post( $post_ID );\n\t\tif ( is_null( $post_before ) ) {\n\t\t\tif ( $wp_error ) {\n\t\t\t\treturn new WP_Error( 'invalid_post', __( 'Invalid post ID.' ) );\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\n\t\t$guid = get_post_field( 'guid', $post_ID );\n\t\t$previous_status = get_post_field('post_status', $post_ID );\n\t} else {\n\t\t$previous_status = 'new';\n\t}\n\n\t$post_type = empty( $postarr['post_type'] ) ? 'post' : $postarr['post_type'];\n\n\t$post_title = $postarr['post_title'];\n\t$post_content = $postarr['post_content'];\n\t$post_excerpt = $postarr['post_excerpt'];\n\tif ( isset( $postarr['post_name'] ) ) {\n\t\t$post_name = $postarr['post_name'];\n\t} elseif ( $update ) {\n\t\t// For an update, don't modify the post_name if it wasn't supplied as an argument.\n\t\t$post_name = $post_before->post_name;\n\t}\n\n\t$maybe_empty = 'attachment' !== $post_type\n\t\t&& ! $post_content && ! $post_title && ! $post_excerpt\n\t\t&& post_type_supports( $post_type, 'editor' )\n\t\t&& post_type_supports( $post_type, 'title' )\n\t\t&& post_type_supports( $post_type, 'excerpt' );\n\n\t/**\n\t * Filters whether the post should be considered \"empty\".\n\t *\n\t * The post is considered \"empty\" if both:\n\t * 1. The post type supports the title, editor, and excerpt fields\n\t * 2. The title, editor, and excerpt fields are all empty\n\t *\n\t * Returning a truthy value to the filter will effectively short-circuit\n\t * the new post being inserted, returning 0. If $wp_error is true, a WP_Error\n\t * will be returned instead.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param bool  $maybe_empty Whether the post should be considered \"empty\".\n\t * @param array $postarr     Array of post data.\n\t */\n\tif ( apply_filters( 'wp_insert_post_empty_content', $maybe_empty, $postarr ) ) {\n\t\tif ( $wp_error ) {\n\t\t\treturn new WP_Error( 'empty_content', __( 'Content, title, and excerpt are empty.' ) );\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t$post_status = empty( $postarr['post_status'] ) ? 'draft' : $postarr['post_status'];\n\tif ( 'attachment' === $post_type && ! in_array( $post_status, array( 'inherit', 'private', 'trash', 'auto-draft' ), true ) ) {\n\t\t$post_status = 'inherit';\n\t}\n\n\tif ( ! empty( $postarr['post_category'] ) ) {\n\t\t// Filter out empty terms.\n\t\t$post_category = array_filter( $postarr['post_category'] );\n\t}\n\n\t// Make sure we set a valid category.\n\tif ( empty( $post_category ) || 0 == count( $post_category ) || ! is_array( $post_category ) ) {\n\t\t// 'post' requires at least one category.\n\t\tif ( 'post' == $post_type && 'auto-draft' != $post_status ) {\n\t\t\t$post_category = array( get_option('default_category') );\n\t\t} else {\n\t\t\t$post_category = array();\n\t\t}\n\t}\n\n\t// Don't allow contributors to set the post slug for pending review posts.\n\tif ( 'pending' == $post_status && !current_user_can( 'publish_posts' ) ) {\n\t\t$post_name = '';\n\t}\n\n\t/*\n\t * Create a valid post name. Drafts and pending posts are allowed to have\n\t * an empty post name.\n\t */\n\tif ( empty($post_name) ) {\n\t\tif ( !in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) ) {\n\t\t\t$post_name = sanitize_title($post_title);\n\t\t} else {\n\t\t\t$post_name = '';\n\t\t}\n\t} else {\n\t\t// On updates, we need to check to see if it's using the old, fixed sanitization context.\n\t\t$check_name = sanitize_title( $post_name, '', 'old-save' );\n\t\tif ( $update && strtolower( urlencode( $post_name ) ) == $check_name && get_post_field( 'post_name', $post_ID ) == $check_name ) {\n\t\t\t$post_name = $check_name;\n\t\t} else { // new post, or slug has changed.\n\t\t\t$post_name = sanitize_title($post_name);\n\t\t}\n\t}\n\n\t/*\n\t * If the post date is empty (due to having been new or a draft) and status\n\t * is not 'draft' or 'pending', set date to now.\n\t */\n\tif ( empty( $postarr['post_date'] ) || '0000-00-00 00:00:00' == $postarr['post_date'] ) {\n\t\tif ( empty( $postarr['post_date_gmt'] ) || '0000-00-00 00:00:00' == $postarr['post_date_gmt'] ) {\n\t\t\t$post_date = current_time( 'mysql' );\n\t\t} else {\n\t\t\t$post_date = get_date_from_gmt( $postarr['post_date_gmt'] );\n\t\t}\n\t} else {\n\t\t$post_date = $postarr['post_date'];\n\t}\n\n\t// Validate the date.\n\t$mm = substr( $post_date, 5, 2 );\n\t$jj = substr( $post_date, 8, 2 );\n\t$aa = substr( $post_date, 0, 4 );\n\t$valid_date = wp_checkdate( $mm, $jj, $aa, $post_date );\n\tif ( ! $valid_date ) {\n\t\tif ( $wp_error ) {\n\t\t\treturn new WP_Error( 'invalid_date', __( 'Invalid date.' ) );\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tif ( empty( $postarr['post_date_gmt'] ) || '0000-00-00 00:00:00' == $postarr['post_date_gmt'] ) {\n\t\tif ( ! in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) ) {\n\t\t\t$post_date_gmt = get_gmt_from_date( $post_date );\n\t\t} else {\n\t\t\t$post_date_gmt = '0000-00-00 00:00:00';\n\t\t}\n\t} else {\n\t\t$post_date_gmt = $postarr['post_date_gmt'];\n\t}\n\n\tif ( $update || '0000-00-00 00:00:00' == $post_date ) {\n\t\t$post_modified     = current_time( 'mysql' );\n\t\t$post_modified_gmt = current_time( 'mysql', 1 );\n\t} else {\n\t\t$post_modified     = $post_date;\n\t\t$post_modified_gmt = $post_date_gmt;\n\t}\n\n\tif ( 'attachment' !== $post_type ) {\n\t\tif ( 'publish' == $post_status ) {\n\t\t\t$now = gmdate('Y-m-d H:i:59');\n\t\t\tif ( mysql2date('U', $post_date_gmt, false) > mysql2date('U', $now, false) ) {\n\t\t\t\t$post_status = 'future';\n\t\t\t}\n\t\t} elseif ( 'future' == $post_status ) {\n\t\t\t$now = gmdate('Y-m-d H:i:59');\n\t\t\tif ( mysql2date('U', $post_date_gmt, false) <= mysql2date('U', $now, false) ) {\n\t\t\t\t$post_status = 'publish';\n\t\t\t}\n\t\t}\n\t}\n\n\t// Comment status.\n\tif ( empty( $postarr['comment_status'] ) ) {\n\t\tif ( $update ) {\n\t\t\t$comment_status = 'closed';\n\t\t} else {\n\t\t\t$comment_status = get_default_comment_status( $post_type );\n\t\t}\n\t} else {\n\t\t$comment_status = $postarr['comment_status'];\n\t}\n\n\t// These variables are needed by compact() later.\n\t$post_content_filtered = $postarr['post_content_filtered'];\n\t$post_author = isset( $postarr['post_author'] ) ? $postarr['post_author'] : $user_id;\n\t$ping_status = empty( $postarr['ping_status'] ) ? get_default_comment_status( $post_type, 'pingback' ) : $postarr['ping_status'];\n\t$to_ping = isset( $postarr['to_ping'] ) ? sanitize_trackback_urls( $postarr['to_ping'] ) : '';\n\t$pinged = isset( $postarr['pinged'] ) ? $postarr['pinged'] : '';\n\t$import_id = isset( $postarr['import_id'] ) ? $postarr['import_id'] : 0;\n\n\t/*\n\t * The 'wp_insert_post_parent' filter expects all variables to be present.\n\t * Previously, these variables would have already been extracted\n\t */\n\tif ( isset( $postarr['menu_order'] ) ) {\n\t\t$menu_order = (int) $postarr['menu_order'];\n\t} else {\n\t\t$menu_order = 0;\n\t}\n\n\t$post_password = isset( $postarr['post_password'] ) ? $postarr['post_password'] : '';\n\tif ( 'private' == $post_status ) {\n\t\t$post_password = '';\n\t}\n\n\tif ( isset( $postarr['post_parent'] ) ) {\n\t\t$post_parent = (int) $postarr['post_parent'];\n\t} else {\n\t\t$post_parent = 0;\n\t}\n\n\t/**\n\t * Filters the post parent -- used to check for and prevent hierarchy loops.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param int   $post_parent Post parent ID.\n\t * @param int   $post_ID     Post ID.\n\t * @param array $new_postarr Array of parsed post data.\n\t * @param array $postarr     Array of sanitized, but otherwise unmodified post data.\n\t */\n\t$post_parent = apply_filters( 'wp_insert_post_parent', $post_parent, $post_ID, compact( array_keys( $postarr ) ), $postarr );\n\n\t/*\n\t * If the post is being untrashed and it has a desired slug stored in post meta,\n\t * reassign it.\n\t */\n\tif ( 'trash' === $previous_status && 'trash' !== $post_status ) {\n\t\t$desired_post_slug = get_post_meta( $post_ID, '_wp_desired_post_slug', true );\n\t\tif ( $desired_post_slug ) {\n\t\t\tdelete_post_meta( $post_ID, '_wp_desired_post_slug' );\n\t\t\t$post_name = $desired_post_slug;\n\t\t}\n\t}\n\n\t// If a trashed post has the desired slug, change it and let this post have it.\n\tif ( 'trash' !== $post_status && $post_name ) {\n\t\twp_add_trashed_suffix_to_post_name_for_trashed_posts( $post_name, $post_ID );\n\t}\n\n\t// When trashing an existing post, change its slug to allow non-trashed posts to use it.\n\tif ( 'trash' === $post_status && 'trash' !== $previous_status && 'new' !== $previous_status ) {\n\t\t$post_name = wp_add_trashed_suffix_to_post_name_for_post( $post_ID );\n\t}\n\n\t$post_name = wp_unique_post_slug( $post_name, $post_ID, $post_status, $post_type, $post_parent );\n\n\t// Don't unslash.\n\t$post_mime_type = isset( $postarr['post_mime_type'] ) ? $postarr['post_mime_type'] : '';\n\n\t// Expected_slashed (everything!).\n\t$data = compact( 'post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_content_filtered', 'post_title', 'post_excerpt', 'post_status', 'post_type', 'comment_status', 'ping_status', 'post_password', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_parent', 'menu_order', 'post_mime_type', 'guid' );\n\n\t$emoji_fields = array( 'post_title', 'post_content', 'post_excerpt' );\n\n\tforeach ( $emoji_fields as $emoji_field ) {\n\t\tif ( isset( $data[ $emoji_field ] ) ) {\n\t\t\t$charset = $wpdb->get_col_charset( $wpdb->posts, $emoji_field );\n\t\t\tif ( 'utf8' === $charset ) {\n\t\t\t\t$data[ $emoji_field ] = wp_encode_emoji( $data[ $emoji_field ] );\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( 'attachment' === $post_type ) {\n\t\t/**\n\t\t * Filters attachment post data before it is updated in or added to the database.\n\t\t *\n\t\t * @since 3.9.0\n\t\t *\n\t\t * @param array $data    An array of sanitized attachment post data.\n\t\t * @param array $postarr An array of unsanitized attachment post data.\n\t\t */\n\t\t$data = apply_filters( 'wp_insert_attachment_data', $data, $postarr );\n\t} else {\n\t\t/**\n\t\t * Filters slashed post data just before it is inserted into the database.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param array $data    An array of slashed post data.\n\t\t * @param array $postarr An array of sanitized, but otherwise unmodified post data.\n\t\t */\n\t\t$data = apply_filters( 'wp_insert_post_data', $data, $postarr );\n\t}\n\t$data = wp_unslash( $data );\n\t$where = array( 'ID' => $post_ID );\n\n\tif ( $update ) {\n\t\t/**\n\t\t * Fires immediately before an existing post is updated in the database.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param int   $post_ID Post ID.\n\t\t * @param array $data    Array of unslashed post data.\n\t\t */\n\t\tdo_action( 'pre_post_update', $post_ID, $data );\n\t\tif ( false === $wpdb->update( $wpdb->posts, $data, $where ) ) {\n\t\t\tif ( $wp_error ) {\n\t\t\t\treturn new WP_Error('db_update_error', __('Could not update post in the database'), $wpdb->last_error);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// If there is a suggested ID, use it if not already present.\n\t\tif ( ! empty( $import_id ) ) {\n\t\t\t$import_id = (int) $import_id;\n\t\t\tif ( ! $wpdb->get_var( $wpdb->prepare(\"SELECT ID FROM $wpdb->posts WHERE ID = %d\", $import_id) ) ) {\n\t\t\t\t$data['ID'] = $import_id;\n\t\t\t}\n\t\t}\n\t\tif ( false === $wpdb->insert( $wpdb->posts, $data ) ) {\n\t\t\tif ( $wp_error ) {\n\t\t\t\treturn new WP_Error('db_insert_error', __('Could not insert post into the database'), $wpdb->last_error);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\t$post_ID = (int) $wpdb->insert_id;\n\n\t\t// Use the newly generated $post_ID.\n\t\t$where = array( 'ID' => $post_ID );\n\t}\n\n\tif ( empty( $data['post_name'] ) && ! in_array( $data['post_status'], array( 'draft', 'pending', 'auto-draft' ) ) ) {\n\t\t$data['post_name'] = wp_unique_post_slug( sanitize_title( $data['post_title'], $post_ID ), $post_ID, $data['post_status'], $post_type, $post_parent );\n\t\t$wpdb->update( $wpdb->posts, array( 'post_name' => $data['post_name'] ), $where );\n\t\tclean_post_cache( $post_ID );\n\t}\n\n\tif ( is_object_in_taxonomy( $post_type, 'category' ) ) {\n\t\twp_set_post_categories( $post_ID, $post_category );\n\t}\n\n\tif ( isset( $postarr['tags_input'] ) && is_object_in_taxonomy( $post_type, 'post_tag' ) ) {\n\t\twp_set_post_tags( $post_ID, $postarr['tags_input'] );\n\t}\n\n\t// New-style support for all custom taxonomies.\n\tif ( ! empty( $postarr['tax_input'] ) ) {\n\t\tforeach ( $postarr['tax_input'] as $taxonomy => $tags ) {\n\t\t\t$taxonomy_obj = get_taxonomy($taxonomy);\n\t\t\tif ( ! $taxonomy_obj ) {\n\t\t\t\t/* translators: %s: taxonomy name */\n\t\t\t\t_doing_it_wrong( __FUNCTION__, sprintf( __( 'Invalid taxonomy: %s.' ), $taxonomy ), '4.4.0' );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// array = hierarchical, string = non-hierarchical.\n\t\t\tif ( is_array( $tags ) ) {\n\t\t\t\t$tags = array_filter($tags);\n\t\t\t}\n\t\t\tif ( current_user_can( $taxonomy_obj->cap->assign_terms ) ) {\n\t\t\t\twp_set_post_terms( $post_ID, $tags, $taxonomy );\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! empty( $postarr['meta_input'] ) ) {\n\t\tforeach ( $postarr['meta_input'] as $field => $value ) {\n\t\t\tupdate_post_meta( $post_ID, $field, $value );\n\t\t}\n\t}\n\n\t$current_guid = get_post_field( 'guid', $post_ID );\n\n\t// Set GUID.\n\tif ( ! $update && '' == $current_guid ) {\n\t\t$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post_ID ) ), $where );\n\t}\n\n\tif ( 'attachment' === $postarr['post_type'] ) {\n\t\tif ( ! empty( $postarr['file'] ) ) {\n\t\t\tupdate_attached_file( $post_ID, $postarr['file'] );\n\t\t}\n\n\t\tif ( ! empty( $postarr['context'] ) ) {\n\t\t\tadd_post_meta( $post_ID, '_wp_attachment_context', $postarr['context'], true );\n\t\t}\n\t}\n\n\t// Set or remove featured image.\n\tif ( isset( $postarr['_thumbnail_id'] ) ) {\n\t\t$thumbnail_support = current_theme_supports( 'post-thumbnails', $post_type ) && post_type_supports( $post_type, 'thumbnail' ) || 'revision' === $post_type;\n\t\tif ( ! $thumbnail_support && 'attachment' === $post_type && $post_mime_type ) {\n\t\t\tif ( wp_attachment_is( 'audio', $post_ID ) ) {\n\t\t\t\t$thumbnail_support = post_type_supports( 'attachment:audio', 'thumbnail' ) || current_theme_supports( 'post-thumbnails', 'attachment:audio' );\n\t\t\t} elseif ( wp_attachment_is( 'video', $post_ID ) ) {\n\t\t\t\t$thumbnail_support = post_type_supports( 'attachment:video', 'thumbnail' ) || current_theme_supports( 'post-thumbnails', 'attachment:video' );\n\t\t\t}\n\t\t}\n\n\t\tif ( $thumbnail_support ) {\n\t\t\t$thumbnail_id = intval( $postarr['_thumbnail_id'] );\n\t\t\tif ( -1 === $thumbnail_id ) {\n\t\t\t\tdelete_post_thumbnail( $post_ID );\n\t\t\t} else {\n\t\t\t\tset_post_thumbnail( $post_ID, $thumbnail_id );\n\t\t\t}\n\t\t}\n\t}\n\n\tclean_post_cache( $post_ID );\n\n\t$post = get_post( $post_ID );\n\n\tif ( ! empty( $postarr['page_template'] ) ) {\n\t\t$post->page_template = $postarr['page_template'];\n\t\t$page_templates = wp_get_theme()->get_page_templates( $post );\n\t\tif ( 'default' != $postarr['page_template'] && ! isset( $page_templates[ $postarr['page_template'] ] ) ) {\n\t\t\tif ( $wp_error ) {\n\t\t\t\treturn new WP_Error( 'invalid_page_template', __( 'Invalid page template.' ) );\n\t\t\t}\n\t\t\tupdate_post_meta( $post_ID, '_wp_page_template', 'default' );\n\t\t} else {\n\t\t\tupdate_post_meta( $post_ID, '_wp_page_template', $postarr['page_template'] );\n\t\t}\n\t}\n\n\tif ( 'attachment' !== $postarr['post_type'] ) {\n\t\twp_transition_post_status( $data['post_status'], $previous_status, $post );\n\t} else {\n\t\tif ( $update ) {\n\t\t\t/**\n\t\t\t * Fires once an existing attachment has been updated.\n\t\t\t *\n\t\t\t * @since 2.0.0\n\t\t\t *\n\t\t\t * @param int $post_ID Attachment ID.\n\t\t\t */\n\t\t\tdo_action( 'edit_attachment', $post_ID );\n\t\t\t$post_after = get_post( $post_ID );\n\n\t\t\t/**\n\t\t\t * Fires once an existing attachment has been updated.\n\t\t\t *\n\t\t\t * @since 4.4.0\n\t\t\t *\n\t\t\t * @param int     $post_ID      Post ID.\n\t\t\t * @param WP_Post $post_after   Post object following the update.\n\t\t\t * @param WP_Post $post_before  Post object before the update.\n\t\t\t */\n\t\t\tdo_action( 'attachment_updated', $post_ID, $post_after, $post_before );\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * Fires once an attachment has been added.\n\t\t\t *\n\t\t\t * @since 2.0.0\n\t\t\t *\n\t\t\t * @param int $post_ID Attachment ID.\n\t\t\t */\n\t\t\tdo_action( 'add_attachment', $post_ID );\n\t\t}\n\n\t\treturn $post_ID;\n\t}\n\n\tif ( $update ) {\n\t\t/**\n\t\t * Fires once an existing post has been updated.\n\t\t *\n\t\t * @since 1.2.0\n\t\t *\n\t\t * @param int     $post_ID Post ID.\n\t\t * @param WP_Post $post    Post object.\n\t\t */\n\t\tdo_action( 'edit_post', $post_ID, $post );\n\t\t$post_after = get_post($post_ID);\n\n\t\t/**\n\t\t * Fires once an existing post has been updated.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param int     $post_ID      Post ID.\n\t\t * @param WP_Post $post_after   Post object following the update.\n\t\t * @param WP_Post $post_before  Post object before the update.\n\t\t */\n\t\tdo_action( 'post_updated', $post_ID, $post_after, $post_before);\n\t}\n\n\t/**\n\t * Fires once a post has been saved.\n\t *\n\t * The dynamic portion of the hook name, `$post->post_type`, refers to\n\t * the post type slug.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param int     $post_ID Post ID.\n\t * @param WP_Post $post    Post object.\n\t * @param bool    $update  Whether this is an existing post being updated or not.\n\t */\n\tdo_action( \"save_post_{$post->post_type}\", $post_ID, $post, $update );\n\n\t/**\n\t * Fires once a post has been saved.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param int     $post_ID Post ID.\n\t * @param WP_Post $post    Post object.\n\t * @param bool    $update  Whether this is an existing post being updated or not.\n\t */\n\tdo_action( 'save_post', $post_ID, $post, $update );\n\n\t/**\n\t * Fires once a post has been saved.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param int     $post_ID Post ID.\n\t * @param WP_Post $post    Post object.\n\t * @param bool    $update  Whether this is an existing post being updated or not.\n\t */\n\tdo_action( 'wp_insert_post', $post_ID, $post, $update );\n\n\treturn $post_ID;\n}\n\n/**\n * Update a post with new post data.\n *\n * The date does not have to be set for drafts. You can set the date and it will\n * not be overridden.\n *\n * @since 1.0.0\n *\n * @param array|object $postarr  Optional. Post data. Arrays are expected to be escaped,\n *                               objects are not. Default array.\n * @param bool         $wp_error Optional. Allow return of WP_Error on failure. Default false.\n * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success.\n */\nfunction wp_update_post( $postarr = array(), $wp_error = false ) {\n\tif ( is_object($postarr) ) {\n\t\t// Non-escaped post was passed.\n\t\t$postarr = get_object_vars($postarr);\n\t\t$postarr = wp_slash($postarr);\n\t}\n\n\t// First, get all of the original fields.\n\t$post = get_post($postarr['ID'], ARRAY_A);\n\n\tif ( is_null( $post ) ) {\n\t\tif ( $wp_error )\n\t\t\treturn new WP_Error( 'invalid_post', __( 'Invalid post ID.' ) );\n\t\treturn 0;\n\t}\n\n\t// Escape data pulled from DB.\n\t$post = wp_slash($post);\n\n\t// Passed post category list overwrites existing category list if not empty.\n\tif ( isset($postarr['post_category']) && is_array($postarr['post_category'])\n\t\t\t && 0 != count($postarr['post_category']) )\n\t\t$post_cats = $postarr['post_category'];\n\telse\n\t\t$post_cats = $post['post_category'];\n\n\t// Drafts shouldn't be assigned a date unless explicitly done so by the user.\n\tif ( isset( $post['post_status'] ) && in_array($post['post_status'], array('draft', 'pending', 'auto-draft')) && empty($postarr['edit_date']) &&\n\t\t\t ('0000-00-00 00:00:00' == $post['post_date_gmt']) )\n\t\t$clear_date = true;\n\telse\n\t\t$clear_date = false;\n\n\t// Merge old and new fields with new fields overwriting old ones.\n\t$postarr = array_merge($post, $postarr);\n\t$postarr['post_category'] = $post_cats;\n\tif ( $clear_date ) {\n\t\t$postarr['post_date'] = current_time('mysql');\n\t\t$postarr['post_date_gmt'] = '';\n\t}\n\n\tif ($postarr['post_type'] == 'attachment')\n\t\treturn wp_insert_attachment($postarr);\n\n\treturn wp_insert_post( $postarr, $wp_error );\n}\n\n/**\n * Publish a post by transitioning the post status.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post $post Post ID or post object.\n */\nfunction wp_publish_post( $post ) {\n\tglobal $wpdb;\n\n\tif ( ! $post = get_post( $post ) )\n\t\treturn;\n\n\tif ( 'publish' == $post->post_status )\n\t\treturn;\n\n\t$wpdb->update( $wpdb->posts, array( 'post_status' => 'publish' ), array( 'ID' => $post->ID ) );\n\n\tclean_post_cache( $post->ID );\n\n\t$old_status = $post->post_status;\n\t$post->post_status = 'publish';\n\twp_transition_post_status( 'publish', $old_status, $post );\n\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( 'edit_post', $post->ID, $post );\n\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( \"save_post_{$post->post_type}\", $post->ID, $post, true );\n\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( 'save_post', $post->ID, $post, true );\n\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( 'wp_insert_post', $post->ID, $post, true );\n}\n\n/**\n * Publish future post and make sure post ID has future post status.\n *\n * Invoked by cron 'publish_future_post' event. This safeguard prevents cron\n * from publishing drafts, etc.\n *\n * @since 2.5.0\n *\n * @param int|WP_Post $post_id Post ID or post object.\n */\nfunction check_and_publish_future_post( $post_id ) {\n\t$post = get_post($post_id);\n\n\tif ( empty($post) )\n\t\treturn;\n\n\tif ( 'future' != $post->post_status )\n\t\treturn;\n\n\t$time = strtotime( $post->post_date_gmt . ' GMT' );\n\n\t// Uh oh, someone jumped the gun!\n\tif ( $time > time() ) {\n\t\twp_clear_scheduled_hook( 'publish_future_post', array( $post_id ) ); // clear anything else in the system\n\t\twp_schedule_single_event( $time, 'publish_future_post', array( $post_id ) );\n\t\treturn;\n\t}\n\n\t// wp_publish_post() returns no meaningful value.\n\twp_publish_post( $post_id );\n}\n\n/**\n * Computes a unique slug for the post, when given the desired slug and some post details.\n *\n * @since 2.8.0\n *\n * @global wpdb       $wpdb WordPress database abstraction object.\n * @global WP_Rewrite $wp_rewrite\n *\n * @param string $slug        The desired slug (post_name).\n * @param int    $post_ID     Post ID.\n * @param string $post_status No uniqueness checks are made if the post is still draft or pending.\n * @param string $post_type   Post type.\n * @param int    $post_parent Post parent ID.\n * @return string Unique slug for the post, based on $post_name (with a -1, -2, etc. suffix)\n */\nfunction wp_unique_post_slug( $slug, $post_ID, $post_status, $post_type, $post_parent ) {\n\tif ( in_array( $post_status, array( 'draft', 'pending', 'auto-draft' ) ) || ( 'inherit' == $post_status && 'revision' == $post_type ) )\n\t\treturn $slug;\n\n\tglobal $wpdb, $wp_rewrite;\n\n\t$original_slug = $slug;\n\n\t$feeds = $wp_rewrite->feeds;\n\tif ( ! is_array( $feeds ) )\n\t\t$feeds = array();\n\n\tif ( 'attachment' == $post_type ) {\n\t\t// Attachment slugs must be unique across all types.\n\t\t$check_sql = \"SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND ID != %d LIMIT 1\";\n\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID ) );\n\n\t\t/**\n\t\t * Filters whether the post slug would make a bad attachment slug.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool   $bad_slug Whether the slug would be bad as an attachment slug.\n\t\t * @param string $slug     The post slug.\n\t\t */\n\t\tif ( $post_name_check || in_array( $slug, $feeds ) || 'embed' === $slug || apply_filters( 'wp_unique_post_slug_is_bad_attachment_slug', false, $slug ) ) {\n\t\t\t$suffix = 2;\n\t\t\tdo {\n\t\t\t\t$alt_post_name = _truncate_post_slug( $slug, 200 - ( strlen( $suffix ) + 1 ) ) . \"-$suffix\";\n\t\t\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_ID ) );\n\t\t\t\t$suffix++;\n\t\t\t} while ( $post_name_check );\n\t\t\t$slug = $alt_post_name;\n\t\t}\n\t} elseif ( is_post_type_hierarchical( $post_type ) ) {\n\t\tif ( 'nav_menu_item' == $post_type )\n\t\t\treturn $slug;\n\n\t\t/*\n\t\t * Page slugs must be unique within their own trees. Pages are in a separate\n\t\t * namespace than posts so page slugs are allowed to overlap post slugs.\n\t\t */\n\t\t$check_sql = \"SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type IN ( %s, 'attachment' ) AND ID != %d AND post_parent = %d LIMIT 1\";\n\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_type, $post_ID, $post_parent ) );\n\n\t\t/**\n\t\t * Filters whether the post slug would make a bad hierarchical post slug.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool   $bad_slug    Whether the post slug would be bad in a hierarchical post context.\n\t\t * @param string $slug        The post slug.\n\t\t * @param string $post_type   Post type.\n\t\t * @param int    $post_parent Post parent ID.\n\t\t */\n\t\tif ( $post_name_check || in_array( $slug, $feeds ) || 'embed' === $slug || preg_match( \"@^($wp_rewrite->pagination_base)?\\d+$@\", $slug )  || apply_filters( 'wp_unique_post_slug_is_bad_hierarchical_slug', false, $slug, $post_type, $post_parent ) ) {\n\t\t\t$suffix = 2;\n\t\t\tdo {\n\t\t\t\t$alt_post_name = _truncate_post_slug( $slug, 200 - ( strlen( $suffix ) + 1 ) ) . \"-$suffix\";\n\t\t\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_type, $post_ID, $post_parent ) );\n\t\t\t\t$suffix++;\n\t\t\t} while ( $post_name_check );\n\t\t\t$slug = $alt_post_name;\n\t\t}\n\t} else {\n\t\t// Post slugs must be unique across all posts.\n\t\t$check_sql = \"SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND post_type = %s AND ID != %d LIMIT 1\";\n\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_type, $post_ID ) );\n\n\t\t// Prevent new post slugs that could result in URLs that conflict with date archives.\n\t\t$post = get_post( $post_ID );\n\t\t$conflicts_with_date_archive = false;\n\t\tif ( 'post' === $post_type && ( ! $post || $post->post_name !== $slug ) && preg_match( '/^[0-9]+$/', $slug ) && $slug_num = intval( $slug ) ) {\n\t\t\t$permastructs   = array_values( array_filter( explode( '/', get_option( 'permalink_structure' ) ) ) );\n\t\t\t$postname_index = array_search( '%postname%', $permastructs );\n\n\t\t\t/*\n\t\t\t * Potential date clashes are as follows:\n\t\t\t *\n\t\t\t * - Any integer in the first permastruct position could be a year.\n\t\t\t * - An integer between 1 and 12 that follows 'year' conflicts with 'monthnum'.\n\t\t\t * - An integer between 1 and 31 that follows 'monthnum' conflicts with 'day'.\n\t\t\t */\n\t\t\tif ( 0 === $postname_index ||\n\t\t\t\t( $postname_index && '%year%' === $permastructs[ $postname_index - 1 ] && 13 > $slug_num ) ||\n\t\t\t\t( $postname_index && '%monthnum%' === $permastructs[ $postname_index - 1 ] && 32 > $slug_num )\n\t\t\t) {\n\t\t\t\t$conflicts_with_date_archive = true;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters whether the post slug would be bad as a flat slug.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param bool   $bad_slug  Whether the post slug would be bad as a flat slug.\n\t\t * @param string $slug      The post slug.\n\t\t * @param string $post_type Post type.\n\t\t */\n\t\tif ( $post_name_check || in_array( $slug, $feeds ) || 'embed' === $slug || $conflicts_with_date_archive || apply_filters( 'wp_unique_post_slug_is_bad_flat_slug', false, $slug, $post_type ) ) {\n\t\t\t$suffix = 2;\n\t\t\tdo {\n\t\t\t\t$alt_post_name = _truncate_post_slug( $slug, 200 - ( strlen( $suffix ) + 1 ) ) . \"-$suffix\";\n\t\t\t\t$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $alt_post_name, $post_type, $post_ID ) );\n\t\t\t\t$suffix++;\n\t\t\t} while ( $post_name_check );\n\t\t\t$slug = $alt_post_name;\n\t\t}\n\t}\n\n\t/**\n\t * Filters the unique post slug.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $slug          The post slug.\n\t * @param int    $post_ID       Post ID.\n\t * @param string $post_status   The post status.\n\t * @param string $post_type     Post type.\n\t * @param int    $post_parent   Post parent ID\n\t * @param string $original_slug The original post slug.\n\t */\n\treturn apply_filters( 'wp_unique_post_slug', $slug, $post_ID, $post_status, $post_type, $post_parent, $original_slug );\n}\n\n/**\n * Truncate a post slug.\n *\n * @since 3.6.0\n * @access private\n *\n * @see utf8_uri_encode()\n *\n * @param string $slug   The slug to truncate.\n * @param int    $length Optional. Max length of the slug. Default 200 (characters).\n * @return string The truncated slug.\n */\nfunction _truncate_post_slug( $slug, $length = 200 ) {\n\tif ( strlen( $slug ) > $length ) {\n\t\t$decoded_slug = urldecode( $slug );\n\t\tif ( $decoded_slug === $slug )\n\t\t\t$slug = substr( $slug, 0, $length );\n\t\telse\n\t\t\t$slug = utf8_uri_encode( $decoded_slug, $length );\n\t}\n\n\treturn rtrim( $slug, '-' );\n}\n\n/**\n * Add tags to a post.\n *\n * @see wp_set_post_tags()\n *\n * @since 2.3.0\n *\n * @param int          $post_id Optional. The Post ID. Does not default to the ID of the global $post.\n * @param string|array $tags    Optional. An array of tags to set for the post, or a string of tags\n *                              separated by commas. Default empty.\n * @return array|false|WP_Error Array of affected term IDs. WP_Error or false on failure.\n */\nfunction wp_add_post_tags( $post_id = 0, $tags = '' ) {\n\treturn wp_set_post_tags($post_id, $tags, true);\n}\n\n/**\n * Set the tags for a post.\n *\n * @since 2.3.0\n *\n * @see wp_set_object_terms()\n *\n * @param int          $post_id Optional. The Post ID. Does not default to the ID of the global $post.\n * @param string|array $tags    Optional. An array of tags to set for the post, or a string of tags\n *                              separated by commas. Default empty.\n * @param bool         $append  Optional. If true, don't delete existing tags, just add on. If false,\n *                              replace the tags with the new tags. Default false.\n * @return array|false|WP_Error Array of term taxonomy IDs of affected terms. WP_Error or false on failure.\n */\nfunction wp_set_post_tags( $post_id = 0, $tags = '', $append = false ) {\n\treturn wp_set_post_terms( $post_id, $tags, 'post_tag', $append);\n}\n\n/**\n * Set the terms for a post.\n *\n * @since 2.8.0\n *\n * @see wp_set_object_terms()\n *\n * @param int          $post_id  Optional. The Post ID. Does not default to the ID of the global $post.\n * @param string|array $tags     Optional. An array of terms to set for the post, or a string of terms\n *                               separated by commas. Default empty.\n * @param string       $taxonomy Optional. Taxonomy name. Default 'post_tag'.\n * @param bool         $append   Optional. If true, don't delete existing terms, just add on. If false,\n *                               replace the terms with the new terms. Default false.\n * @return array|false|WP_Error Array of term taxonomy IDs of affected terms. WP_Error or false on failure.\n */\nfunction wp_set_post_terms( $post_id = 0, $tags = '', $taxonomy = 'post_tag', $append = false ) {\n\t$post_id = (int) $post_id;\n\n\tif ( !$post_id )\n\t\treturn false;\n\n\tif ( empty($tags) )\n\t\t$tags = array();\n\n\tif ( ! is_array( $tags ) ) {\n\t\t$comma = _x( ',', 'tag delimiter' );\n\t\tif ( ',' !== $comma )\n\t\t\t$tags = str_replace( $comma, ',', $tags );\n\t\t$tags = explode( ',', trim( $tags, \" \\n\\t\\r\\0\\x0B,\" ) );\n\t}\n\n\t/*\n\t * Hierarchical taxonomies must always pass IDs rather than names so that\n\t * children with the same names but different parents aren't confused.\n\t */\n\tif ( is_taxonomy_hierarchical( $taxonomy ) ) {\n\t\t$tags = array_unique( array_map( 'intval', $tags ) );\n\t}\n\n\treturn wp_set_object_terms( $post_id, $tags, $taxonomy, $append );\n}\n\n/**\n * Set categories for a post.\n *\n * If the post categories parameter is not set, then the default category is\n * going used.\n *\n * @since 2.1.0\n *\n * @param int       $post_ID         Optional. The Post ID. Does not default to the ID\n *                                   of the global $post. Default 0.\n * @param array|int $post_categories Optional. List of categories or ID of category.\n *                                   Default empty array.\n * @param bool      $append         If true, don't delete existing categories, just add on.\n *                                  If false, replace the categories with the new categories.\n * @return array|false|WP_Error Array of term taxonomy IDs of affected categories. WP_Error or false on failure.\n */\nfunction wp_set_post_categories( $post_ID = 0, $post_categories = array(), $append = false ) {\n\t$post_ID = (int) $post_ID;\n\t$post_type = get_post_type( $post_ID );\n\t$post_status = get_post_status( $post_ID );\n\t// If $post_categories isn't already an array, make it one:\n\t$post_categories = (array) $post_categories;\n\tif ( empty( $post_categories ) ) {\n\t\tif ( 'post' == $post_type && 'auto-draft' != $post_status ) {\n\t\t\t$post_categories = array( get_option('default_category') );\n\t\t\t$append = false;\n\t\t} else {\n\t\t\t$post_categories = array();\n\t\t}\n\t} elseif ( 1 == count( $post_categories ) && '' == reset( $post_categories ) ) {\n\t\treturn true;\n\t}\n\n\treturn wp_set_post_terms( $post_ID, $post_categories, 'category', $append );\n}\n\n/**\n * Fires actions related to the transitioning of a post's status.\n *\n * When a post is saved, the post status is \"transitioned\" from one status to another,\n * though this does not always mean the status has actually changed before and after\n * the save. This function fires a number of action hooks related to that transition:\n * the generic {@see 'transition_post_status'} action, as well as the dynamic hooks\n * {@see '$old_status_to_$new_status'} and {@see '$new_status_$post->post_type'}. Note\n * that the function does not transition the post object in the database.\n *\n * For instance: When publishing a post for the first time, the post status may transition\n * from 'draft' \u2013 or some other status \u2013 to 'publish'. However, if a post is already\n * published and is simply being updated, the \"old\" and \"new\" statuses may both be 'publish'\n * before and after the transition.\n *\n * @since 2.3.0\n *\n * @param string  $new_status Transition to this post status.\n * @param string  $old_status Previous post status.\n * @param WP_Post $post Post data.\n */\nfunction wp_transition_post_status( $new_status, $old_status, $post ) {\n\t/**\n\t * Fires when a post is transitioned from one status to another.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string  $new_status New post status.\n\t * @param string  $old_status Old post status.\n\t * @param WP_Post $post       Post object.\n\t */\n\tdo_action( 'transition_post_status', $new_status, $old_status, $post );\n\n\t/**\n\t * Fires when a post is transitioned from one status to another.\n\t *\n\t * The dynamic portions of the hook name, `$new_status` and `$old status`,\n\t * refer to the old and new post statuses, respectively.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param WP_Post $post Post object.\n\t */\n\tdo_action( \"{$old_status}_to_{$new_status}\", $post );\n\n\t/**\n\t * Fires when a post is transitioned from one status to another.\n\t *\n\t * The dynamic portions of the hook name, `$new_status` and `$post->post_type`,\n\t * refer to the new post status and post type, respectively.\n\t *\n\t * Please note: When this action is hooked using a particular post status (like\n\t * 'publish', as `publish_{$post->post_type}`), it will fire both when a post is\n\t * first transitioned to that status from something else, as well as upon\n\t * subsequent post updates (old and new status are both the same).\n\t *\n\t * Therefore, if you are looking to only fire a callback when a post is first\n\t * transitioned to a status, use the {@see 'transition_post_status'} hook instead.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param int     $post_id Post ID.\n\t * @param WP_Post $post    Post object.\n\t */\n\tdo_action( \"{$new_status}_{$post->post_type}\", $post->ID, $post );\n}\n\n//\n// Comment, trackback, and pingback functions.\n//\n\n/**\n * Add a URL to those already pinged.\n *\n * @since 1.5.0\n * @since 4.7.0 $post_id can be a WP_Post object.\n * @since 4.7.0 $uri can be an array of URIs.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int|WP_Post  $post_id Post object or ID.\n * @param string|array $uri     Ping URI or array of URIs.\n * @return int|false How many rows were updated.\n */\nfunction add_ping( $post_id, $uri ) {\n\tglobal $wpdb;\n\n\t$post = get_post( $post_id );\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\t$pung = trim( $post->pinged );\n\t$pung = preg_split( '/\\s/', $pung );\n\n\tif ( is_array( $uri ) ) {\n\t\t$pung = array_merge( $pung, $uri );\n\t}\n\telse {\n\t\t$pung[] = $uri;\n\t}\n\t$new = implode(\"\\n\", $pung);\n\n\t/**\n\t * Filters the new ping URL to add for the given post.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param string $new New ping URL to add.\n\t */\n\t$new = apply_filters( 'add_ping', $new );\n\n\t$return = $wpdb->update( $wpdb->posts, array( 'pinged' => $new ), array( 'ID' => $post->ID ) );\n\tclean_post_cache( $post->ID );\n\treturn $return;\n}\n\n/**\n * Retrieve enclosures already enclosed for a post.\n *\n * @since 1.5.0\n *\n * @param int $post_id Post ID.\n * @return array List of enclosures.\n */\nfunction get_enclosed( $post_id ) {\n\t$custom_fields = get_post_custom( $post_id );\n\t$pung = array();\n\tif ( !is_array( $custom_fields ) )\n\t\treturn $pung;\n\n\tforeach ( $custom_fields as $key => $val ) {\n\t\tif ( 'enclosure' != $key || !is_array( $val ) )\n\t\t\tcontinue;\n\t\tforeach ( $val as $enc ) {\n\t\t\t$enclosure = explode( \"\\n\", $enc );\n\t\t\t$pung[] = trim( $enclosure[ 0 ] );\n\t\t}\n\t}\n\n\t/**\n\t * Filters the list of enclosures already enclosed for the given post.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param array $pung    Array of enclosures for the given post.\n\t * @param int   $post_id Post ID.\n\t */\n\treturn apply_filters( 'get_enclosed', $pung, $post_id );\n}\n\n/**\n * Retrieve URLs already pinged for a post.\n *\n * @since 1.5.0\n *\n * @since 4.7.0 $post_id can be a WP_Post object.\n *\n * @param int|WP_Post $post_id Post ID or object.\n * @return array\n */\nfunction get_pung( $post_id ) {\n\t$post = get_post( $post_id );\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\t$pung = trim( $post->pinged );\n\t$pung = preg_split( '/\\s/', $pung );\n\n\t/**\n\t * Filters the list of already-pinged URLs for the given post.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param array $pung Array of URLs already pinged for the given post.\n\t */\n\treturn apply_filters( 'get_pung', $pung );\n}\n\n/**\n * Retrieve URLs that need to be pinged.\n *\n * @since 1.5.0\n * @since 4.7.0 $post_id can be a WP_Post object.\n *\n * @param int|WP_Post $post_id Post Object or ID\n * @return array\n */\nfunction get_to_ping( $post_id ) {\n\t$post = get_post( $post_id );\n\n\tif ( ! $post ) {\n\t\treturn false;\n\t}\n\n\t$to_ping = sanitize_trackback_urls( $post->to_ping );\n\t$to_ping = preg_split('/\\s/', $to_ping, -1, PREG_SPLIT_NO_EMPTY);\n\n\t/**\n\t * Filters the list of URLs yet to ping for the given post.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param array $to_ping List of URLs yet to ping.\n\t */\n\treturn apply_filters( 'get_to_ping', $to_ping );\n}\n\n/**\n * Do trackbacks for a list of URLs.\n *\n * @since 1.0.0\n *\n * @param string $tb_list Comma separated list of URLs.\n * @param int    $post_id Post ID.\n */\nfunction trackback_url_list( $tb_list, $post_id ) {\n\tif ( ! empty( $tb_list ) ) {\n\t\t// Get post data.\n\t\t$postdata = get_post( $post_id, ARRAY_A );\n\n\t\t// Form an excerpt.\n\t\t$excerpt = strip_tags( $postdata['post_excerpt'] ? $postdata['post_excerpt'] : $postdata['post_content'] );\n\n\t\tif ( strlen( $excerpt ) > 255 ) {\n\t\t\t$excerpt = substr( $excerpt, 0, 252 ) . '&hellip;';\n\t\t}\n\n\t\t$trackback_urls = explode( ',', $tb_list );\n\t\tforeach ( (array) $trackback_urls as $tb_url ) {\n\t\t\t$tb_url = trim( $tb_url );\n\t\t\ttrackback( $tb_url, wp_unslash( $postdata['post_title'] ), $excerpt, $post_id );\n\t\t}\n\t}\n}\n\n//\n// Page functions\n//\n\n/**\n * Get a list of page IDs.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return array List of page IDs.\n */\nfunction get_all_page_ids() {\n\tglobal $wpdb;\n\n\t$page_ids = wp_cache_get('all_page_ids', 'posts');\n\tif ( ! is_array( $page_ids ) ) {\n\t\t$page_ids = $wpdb->get_col(\"SELECT ID FROM $wpdb->posts WHERE post_type = 'page'\");\n\t\twp_cache_add('all_page_ids', $page_ids, 'posts');\n\t}\n\n\treturn $page_ids;\n}\n\n/**\n * Retrieves page data given a page ID or page object.\n *\n * Use get_post() instead of get_page().\n *\n * @since 1.5.1\n * @deprecated 3.5.0 Use get_post()\n *\n * @param mixed  $page   Page object or page ID. Passed by reference.\n * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                       a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string $filter Optional. How the return value should be filtered. Accepts 'raw',\n *                       'edit', 'db', 'display'. Default 'raw'.\n * @return WP_Post|array|null WP_Post (or array) on success, or null on failure.\n */\nfunction get_page( $page, $output = OBJECT, $filter = 'raw') {\n\treturn get_post( $page, $output, $filter );\n}\n\n/**\n * Retrieves a page given its path.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string       $page_path Page path.\n * @param string       $output    Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string|array $post_type Optional. Post type or array of post types. Default 'page'.\n * @return WP_Post|array|null WP_Post (or array) on success, or null on failure.\n */\nfunction get_page_by_path( $page_path, $output = OBJECT, $post_type = 'page' ) {\n\tglobal $wpdb;\n\n\t$last_changed = wp_cache_get_last_changed( 'posts' );\n\n\t$hash = md5( $page_path . serialize( $post_type ) );\n\t$cache_key = \"get_page_by_path:$hash:$last_changed\";\n\t$cached = wp_cache_get( $cache_key, 'posts' );\n\tif ( false !== $cached ) {\n\t\t// Special case: '0' is a bad `$page_path`.\n\t\tif ( '0' === $cached || 0 === $cached ) {\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn get_post( $cached, $output );\n\t\t}\n\t}\n\n\t$page_path = rawurlencode(urldecode($page_path));\n\t$page_path = str_replace('%2F', '/', $page_path);\n\t$page_path = str_replace('%20', ' ', $page_path);\n\t$parts = explode( '/', trim( $page_path, '/' ) );\n\t$parts = array_map( 'sanitize_title_for_query', $parts );\n\t$escaped_parts = esc_sql( $parts );\n\n\t$in_string = \"'\" . implode( \"','\", $escaped_parts ) . \"'\";\n\n\tif ( is_array( $post_type ) ) {\n\t\t$post_types = $post_type;\n\t} else {\n\t\t$post_types = array( $post_type, 'attachment' );\n\t}\n\n\t$post_types = esc_sql( $post_types );\n\t$post_type_in_string = \"'\" . implode( \"','\", $post_types ) . \"'\";\n\t$sql = \"\n\t\tSELECT ID, post_name, post_parent, post_type\n\t\tFROM $wpdb->posts\n\t\tWHERE post_name IN ($in_string)\n\t\tAND post_type IN ($post_type_in_string)\n\t\";\n\n\t$pages = $wpdb->get_results( $sql, OBJECT_K );\n\n\t$revparts = array_reverse( $parts );\n\n\t$foundid = 0;\n\tforeach ( (array) $pages as $page ) {\n\t\tif ( $page->post_name == $revparts[0] ) {\n\t\t\t$count = 0;\n\t\t\t$p = $page;\n\n\t\t\t/*\n\t\t\t * Loop through the given path parts from right to left,\n\t\t\t * ensuring each matches the post ancestry.\n\t\t\t */\n\t\t\twhile ( $p->post_parent != 0 && isset( $pages[ $p->post_parent ] ) ) {\n\t\t\t\t$count++;\n\t\t\t\t$parent = $pages[ $p->post_parent ];\n\t\t\t\tif ( ! isset( $revparts[ $count ] ) || $parent->post_name != $revparts[ $count ] )\n\t\t\t\t\tbreak;\n\t\t\t\t$p = $parent;\n\t\t\t}\n\n\t\t\tif ( $p->post_parent == 0 && $count+1 == count( $revparts ) && $p->post_name == $revparts[ $count ] ) {\n\t\t\t\t$foundid = $page->ID;\n\t\t\t\tif ( $page->post_type == $post_type )\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// We cache misses as well as hits.\n\twp_cache_set( $cache_key, $foundid, 'posts' );\n\n\tif ( $foundid ) {\n\t\treturn get_post( $foundid, $output );\n\t}\n}\n\n/**\n * Retrieve a page given its title.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string       $page_title Page title\n * @param string       $output     Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n *                                 a WP_Post object, an associative array, or a numeric array, respectively. Default OBJECT.\n * @param string|array $post_type  Optional. Post type or array of post types. Default 'page'.\n * @return WP_Post|array|null WP_Post (or array) on success, or null on failure.\n */\nfunction get_page_by_title( $page_title, $output = OBJECT, $post_type = 'page' ) {\n\tglobal $wpdb;\n\n\tif ( is_array( $post_type ) ) {\n\t\t$post_type = esc_sql( $post_type );\n\t\t$post_type_in_string = \"'\" . implode( \"','\", $post_type ) . \"'\";\n\t\t$sql = $wpdb->prepare( \"\n\t\t\tSELECT ID\n\t\t\tFROM $wpdb->posts\n\t\t\tWHERE post_title = %s\n\t\t\tAND post_type IN ($post_type_in_string)\n\t\t\", $page_title );\n\t} else {\n\t\t$sql = $wpdb->prepare( \"\n\t\t\tSELECT ID\n\t\t\tFROM $wpdb->posts\n\t\t\tWHERE post_title = %s\n\t\t\tAND post_type = %s\n\t\t\", $page_title, $post_type );\n\t}\n\n\t$page = $wpdb->get_var( $sql );\n\n\tif ( $page ) {\n\t\treturn get_post( $page, $output );\n\t}\n}\n\n/**\n * Identify descendants of a given page ID in a list of page objects.\n *\n * Descendants are identified from the `$pages` array passed to the function. No database queries are performed.\n *\n * @since 1.5.1\n *\n * @param int   $page_id Page ID.\n * @param array $pages   List of page objects from which descendants should be identified.\n * @return array List of page children.\n */\nfunction get_page_children( $page_id, $pages ) {\n\t// Build a hash of ID -> children.\n\t$children = array();\n\tforeach ( (array) $pages as $page ) {\n\t\t$children[ intval( $page->post_parent ) ][] = $page;\n\t}\n\n\t$page_list = array();\n\n\t// Start the search by looking at immediate children.\n\tif ( isset( $children[ $page_id ] ) ) {\n\t\t// Always start at the end of the stack in order to preserve original `$pages` order.\n\t\t$to_look = array_reverse( $children[ $page_id ] );\n\n\t\twhile ( $to_look ) {\n\t\t\t$p = array_pop( $to_look );\n\t\t\t$page_list[] = $p;\n\t\t\tif ( isset( $children[ $p->ID ] ) ) {\n\t\t\t\tforeach ( array_reverse( $children[ $p->ID ] ) as $child ) {\n\t\t\t\t\t// Append to the `$to_look` stack to descend the tree.\n\t\t\t\t\t$to_look[] = $child;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $page_list;\n}\n\n/**\n * Order the pages with children under parents in a flat list.\n *\n * It uses auxiliary structure to hold parent-children relationships and\n * runs in O(N) complexity\n *\n * @since 2.0.0\n *\n * @param array $pages   Posts array (passed by reference).\n * @param int   $page_id Optional. Parent page ID. Default 0.\n * @return array A list arranged by hierarchy. Children immediately follow their parents.\n */\nfunction get_page_hierarchy( &$pages, $page_id = 0 ) {\n\tif ( empty( $pages ) ) {\n\t\treturn array();\n\t}\n\n\t$children = array();\n\tforeach ( (array) $pages as $p ) {\n\t\t$parent_id = intval( $p->post_parent );\n\t\t$children[ $parent_id ][] = $p;\n\t}\n\n\t$result = array();\n\t_page_traverse_name( $page_id, $children, $result );\n\n\treturn $result;\n}\n\n/**\n * Traverse and return all the nested children post names of a root page.\n *\n * $children contains parent-children relations\n *\n * @since 2.9.0\n *\n * @see _page_traverse_name()\n *\n * @param int   $page_id   Page ID.\n * @param array $children  Parent-children relations (passed by reference).\n * @param array $result    Result (passed by reference).\n */\nfunction _page_traverse_name( $page_id, &$children, &$result ){\n\tif ( isset( $children[ $page_id ] ) ){\n\t\tforeach ( (array)$children[ $page_id ] as $child ) {\n\t\t\t$result[ $child->ID ] = $child->post_name;\n\t\t\t_page_traverse_name( $child->ID, $children, $result );\n\t\t}\n\t}\n}\n\n/**\n * Build the URI path for a page.\n *\n * Sub pages will be in the \"directory\" under the parent page post name.\n *\n * @since 1.5.0\n * @since 4.6.0 Converted the `$page` parameter to optional.\n *\n * @param WP_Post|object|int $page Optional. Page ID or WP_Post object. Default is global $post.\n * @return string|false Page URI, false on error.\n */\nfunction get_page_uri( $page = 0 ) {\n\tif ( ! $page instanceof WP_Post ) {\n\t\t$page = get_post( $page );\n\t}\n\n\tif ( ! $page )\n\t\treturn false;\n\n\t$uri = $page->post_name;\n\n\tforeach ( $page->ancestors as $parent ) {\n\t\t$parent = get_post( $parent );\n\t\tif ( $parent && $parent->post_name ) {\n\t\t\t$uri = $parent->post_name . '/' . $uri;\n\t\t}\n\t}\n\n\t/**\n\t * Filters the URI for a page.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string  $uri  Page URI.\n\t * @param WP_Post $page Page object.\n\t */\n\treturn apply_filters( 'get_page_uri', $uri, $page );\n}\n\n/**\n * Retrieve a list of pages (or hierarchical post type items).\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @since 1.5.0\n *\n * @param array|string $args {\n *     Optional. Array or string of arguments to retrieve pages.\n *\n *     @type int          $child_of     Page ID to return child and grandchild pages of. Note: The value\n *                                      of `$hierarchical` has no bearing on whether `$child_of` returns\n *                                      hierarchical results. Default 0, or no restriction.\n *     @type string       $sort_order   How to sort retrieved pages. Accepts 'ASC', 'DESC'. Default 'ASC'.\n *     @type string       $sort_column  What columns to sort pages by, comma-separated. Accepts 'post_author',\n *                                      'post_date', 'post_title', 'post_name', 'post_modified', 'menu_order',\n *                                      'post_modified_gmt', 'post_parent', 'ID', 'rand', 'comment_count'.\n *                                      'post_' can be omitted for any values that start with it.\n *                                      Default 'post_title'.\n *     @type bool         $hierarchical Whether to return pages hierarchically. If false in conjunction with\n *                                      `$child_of` also being false, both arguments will be disregarded.\n *                                      Default true.\n *     @type array        $exclude      Array of page IDs to exclude. Default empty array.\n *     @type array        $include      Array of page IDs to include. Cannot be used with `$child_of`,\n *                                      `$parent`, `$exclude`, `$meta_key`, `$meta_value`, or `$hierarchical`.\n *                                      Default empty array.\n *     @type string       $meta_key     Only include pages with this meta key. Default empty.\n *     @type string       $meta_value   Only include pages with this meta value. Requires `$meta_key`.\n *                                      Default empty.\n *     @type string       $authors      A comma-separated list of author IDs. Default empty.\n *     @type int          $parent       Page ID to return direct children of. Default -1, or no restriction.\n *     @type string|array $exclude_tree Comma-separated string or array of page IDs to exclude.\n *                                      Default empty array.\n *     @type int          $number       The number of pages to return. Default 0, or all pages.\n *     @type int          $offset       The number of pages to skip before returning. Requires `$number`.\n *                                      Default 0.\n *     @type string       $post_type    The post type to query. Default 'page'.\n *     @type string|array $post_status  A comma-separated list or array of post statuses to include.\n *                                      Default 'publish'.\n * }\n * @return array|false List of pages matching defaults or `$args`.\n */\nfunction get_pages( $args = array() ) {\n\tglobal $wpdb;\n\n\t$defaults = array(\n\t\t'child_of'     => 0,\n\t\t'sort_order'   => 'ASC',\n\t\t'sort_column'  => 'post_title',\n\t\t'hierarchical' => 1,\n\t\t'exclude'      => array(),\n\t\t'include'      => array(),\n\t\t'meta_key'     => '',\n\t\t'meta_value'   => '',\n\t\t'authors'      => '',\n\t\t'parent'       => -1,\n\t\t'exclude_tree' => array(),\n\t\t'number'       => '',\n\t\t'offset'       => 0,\n\t\t'post_type'    => 'page',\n\t\t'post_status'  => 'publish',\n\t);\n\n\t$r = wp_parse_args( $args, $defaults );\n\n\t$number = (int) $r['number'];\n\t$offset = (int) $r['offset'];\n\t$child_of = (int) $r['child_of'];\n\t$hierarchical = $r['hierarchical'];\n\t$exclude = $r['exclude'];\n\t$meta_key = $r['meta_key'];\n\t$meta_value = $r['meta_value'];\n\t$parent = $r['parent'];\n\t$post_status = $r['post_status'];\n\n\t// Make sure the post type is hierarchical.\n\t$hierarchical_post_types = get_post_types( array( 'hierarchical' => true ) );\n\tif ( ! in_array( $r['post_type'], $hierarchical_post_types ) ) {\n\t\treturn false;\n\t}\n\n\tif ( $parent > 0 && ! $child_of ) {\n\t\t$hierarchical = false;\n\t}\n\n\t// Make sure we have a valid post status.\n\tif ( ! is_array( $post_status ) ) {\n\t\t$post_status = explode( ',', $post_status );\n\t}\n\tif ( array_diff( $post_status, get_post_stati() ) ) {\n\t\treturn false;\n\t}\n\n\t// $args can be whatever, only use the args defined in defaults to compute the key.\n\t$key = md5( serialize( wp_array_slice_assoc( $r, array_keys( $defaults ) ) ) );\n\t$last_changed = wp_cache_get_last_changed( 'posts' );\n\n\t$cache_key = \"get_pages:$key:$last_changed\";\n\tif ( $cache = wp_cache_get( $cache_key, 'posts' ) ) {\n\t\t// Convert to WP_Post instances.\n\t\t$pages = array_map( 'get_post', $cache );\n\t\t/** This filter is documented in wp-includes/post.php */\n\t\t$pages = apply_filters( 'get_pages', $pages, $r );\n\t\treturn $pages;\n\t}\n\n\t$inclusions = '';\n\tif ( ! empty( $r['include'] ) ) {\n\t\t$child_of = 0; //ignore child_of, parent, exclude, meta_key, and meta_value params if using include\n\t\t$parent = -1;\n\t\t$exclude = '';\n\t\t$meta_key = '';\n\t\t$meta_value = '';\n\t\t$hierarchical = false;\n\t\t$incpages = wp_parse_id_list( $r['include'] );\n\t\tif ( ! empty( $incpages ) ) {\n\t\t\t$inclusions = ' AND ID IN (' . implode( ',', $incpages ) .  ')';\n\t\t}\n\t}\n\n\t$exclusions = '';\n\tif ( ! empty( $exclude ) ) {\n\t\t$expages = wp_parse_id_list( $exclude );\n\t\tif ( ! empty( $expages ) ) {\n\t\t\t$exclusions = ' AND ID NOT IN (' . implode( ',', $expages ) .  ')';\n\t\t}\n\t}\n\n\t$author_query = '';\n\tif ( ! empty( $r['authors'] ) ) {\n\t\t$post_authors = preg_split( '/[\\s,]+/', $r['authors'] );\n\n\t\tif ( ! empty( $post_authors ) ) {\n\t\t\tforeach ( $post_authors as $post_author ) {\n\t\t\t\t//Do we have an author id or an author login?\n\t\t\t\tif ( 0 == intval($post_author) ) {\n\t\t\t\t\t$post_author = get_user_by('login', $post_author);\n\t\t\t\t\tif ( empty( $post_author ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif ( empty( $post_author->ID ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$post_author = $post_author->ID;\n\t\t\t\t}\n\n\t\t\t\tif ( '' == $author_query ) {\n\t\t\t\t\t$author_query = $wpdb->prepare(' post_author = %d ', $post_author);\n\t\t\t\t} else {\n\t\t\t\t\t$author_query .= $wpdb->prepare(' OR post_author = %d ', $post_author);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( '' != $author_query ) {\n\t\t\t\t$author_query = \" AND ($author_query)\";\n\t\t\t}\n\t\t}\n\t}\n\n\t$join = '';\n\t$where = \"$exclusions $inclusions \";\n\tif ( '' !== $meta_key || '' !== $meta_value ) {\n\t\t$join = \" LEFT JOIN $wpdb->postmeta ON ( $wpdb->posts.ID = $wpdb->postmeta.post_id )\";\n\n\t\t// meta_key and meta_value might be slashed\n\t\t$meta_key = wp_unslash($meta_key);\n\t\t$meta_value = wp_unslash($meta_value);\n\t\tif ( '' !== $meta_key ) {\n\t\t\t$where .= $wpdb->prepare(\" AND $wpdb->postmeta.meta_key = %s\", $meta_key);\n\t\t}\n\t\tif ( '' !== $meta_value ) {\n\t\t\t$where .= $wpdb->prepare(\" AND $wpdb->postmeta.meta_value = %s\", $meta_value);\n\t\t}\n\n\t}\n\n\tif ( is_array( $parent ) ) {\n\t\t$post_parent__in = implode( ',', array_map( 'absint', (array) $parent ) );\n\t\tif ( ! empty( $post_parent__in ) ) {\n\t\t\t$where .= \" AND post_parent IN ($post_parent__in)\";\n\t\t}\n\t} elseif ( $parent >= 0 ) {\n\t\t$where .= $wpdb->prepare(' AND post_parent = %d ', $parent);\n\t}\n\n\tif ( 1 == count( $post_status ) ) {\n\t\t$where_post_type = $wpdb->prepare( \"post_type = %s AND post_status = %s\", $r['post_type'], reset( $post_status ) );\n\t} else {\n\t\t$post_status = implode( \"', '\", $post_status );\n\t\t$where_post_type = $wpdb->prepare( \"post_type = %s AND post_status IN ('$post_status')\", $r['post_type'] );\n\t}\n\n\t$orderby_array = array();\n\t$allowed_keys = array( 'author', 'post_author', 'date', 'post_date', 'title', 'post_title', 'name', 'post_name', 'modified',\n\t\t'post_modified', 'modified_gmt', 'post_modified_gmt', 'menu_order', 'parent', 'post_parent',\n\t\t'ID', 'rand', 'comment_count' );\n\n\tforeach ( explode( ',', $r['sort_column'] ) as $orderby ) {\n\t\t$orderby = trim( $orderby );\n\t\tif ( ! in_array( $orderby, $allowed_keys ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tswitch ( $orderby ) {\n\t\t\tcase 'menu_order':\n\t\t\t\tbreak;\n\t\t\tcase 'ID':\n\t\t\t\t$orderby = \"$wpdb->posts.ID\";\n\t\t\t\tbreak;\n\t\t\tcase 'rand':\n\t\t\t\t$orderby = 'RAND()';\n\t\t\t\tbreak;\n\t\t\tcase 'comment_count':\n\t\t\t\t$orderby = \"$wpdb->posts.comment_count\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif ( 0 === strpos( $orderby, 'post_' ) ) {\n\t\t\t\t\t$orderby = \"$wpdb->posts.\" . $orderby;\n\t\t\t\t} else {\n\t\t\t\t\t$orderby = \"$wpdb->posts.post_\" . $orderby;\n\t\t\t\t}\n\t\t}\n\n\t\t$orderby_array[] = $orderby;\n\n\t}\n\t$sort_column = ! empty( $orderby_array ) ? implode( ',', $orderby_array ) : \"$wpdb->posts.post_title\";\n\n\t$sort_order = strtoupper( $r['sort_order'] );\n\tif ( '' !== $sort_order && ! in_array( $sort_order, array( 'ASC', 'DESC' ) ) ) {\n\t\t$sort_order = 'ASC';\n\t}\n\n\t$query = \"SELECT * FROM $wpdb->posts $join WHERE ($where_post_type) $where \";\n\t$query .= $author_query;\n\t$query .= \" ORDER BY \" . $sort_column . \" \" . $sort_order ;\n\n\tif ( ! empty( $number ) ) {\n\t\t$query .= ' LIMIT ' . $offset . ',' . $number;\n\t}\n\n\t$pages = $wpdb->get_results($query);\n\n\tif ( empty($pages) ) {\n\t\t/** This filter is documented in wp-includes/post.php */\n\t\t$pages = apply_filters( 'get_pages', array(), $r );\n\t\treturn $pages;\n\t}\n\n\t// Sanitize before caching so it'll only get done once.\n\t$num_pages = count($pages);\n\tfor ($i = 0; $i < $num_pages; $i++) {\n\t\t$pages[$i] = sanitize_post($pages[$i], 'raw');\n\t}\n\n\t// Update cache.\n\tupdate_post_cache( $pages );\n\n\tif ( $child_of || $hierarchical ) {\n\t\t$pages = get_page_children($child_of, $pages);\n\t}\n\n\tif ( ! empty( $r['exclude_tree'] ) ) {\n\t\t$exclude = wp_parse_id_list( $r['exclude_tree'] );\n\t\tforeach ( $exclude as $id ) {\n\t\t\t$children = get_page_children( $id, $pages );\n\t\t\tforeach ( $children as $child ) {\n\t\t\t\t$exclude[] = $child->ID;\n\t\t\t}\n\t\t}\n\n\t\t$num_pages = count( $pages );\n\t\tfor ( $i = 0; $i < $num_pages; $i++ ) {\n\t\t\tif ( in_array( $pages[$i]->ID, $exclude ) ) {\n\t\t\t\tunset( $pages[$i] );\n\t\t\t}\n\t\t}\n\t}\n\n\t$page_structure = array();\n\tforeach ( $pages as $page ) {\n\t\t$page_structure[] = $page->ID;\n\t}\n\n\twp_cache_set( $cache_key, $page_structure, 'posts' );\n\n\t// Convert to WP_Post instances\n\t$pages = array_map( 'get_post', $pages );\n\n\t/**\n\t * Filters the retrieved list of pages.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param array $pages List of pages to retrieve.\n\t * @param array $r     Array of get_pages() arguments.\n\t */\n\treturn apply_filters( 'get_pages', $pages, $r );\n}\n\n//\n// Attachment functions\n//\n\n/**\n * Check if the attachment URI is local one and is really an attachment.\n *\n * @since 2.0.0\n *\n * @param string $url URL to check\n * @return bool True on success, false on failure.\n */\nfunction is_local_attachment($url) {\n\tif (strpos($url, home_url()) === false)\n\t\treturn false;\n\tif (strpos($url, home_url('/?attachment_id=')) !== false)\n\t\treturn true;\n\tif ( $id = url_to_postid($url) ) {\n\t\t$post = get_post($id);\n\t\tif ( 'attachment' == $post->post_type )\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Insert an attachment.\n *\n * If you set the 'ID' in the $args parameter, it will mean that you are\n * updating and attempt to update the attachment. You can also set the\n * attachment name or title by setting the key 'post_name' or 'post_title'.\n *\n * You can set the dates for the attachment manually by setting the 'post_date'\n * and 'post_date_gmt' keys' values.\n *\n * By default, the comments will use the default settings for whether the\n * comments are allowed. You can close them manually or keep them open by\n * setting the value for the 'comment_status' key.\n *\n * @since 2.0.0\n * @since 4.7.0 Added the `$wp_error` parameter to allow a WP_Error to be returned on failure.\n *\n * @see wp_insert_post()\n *\n * @param string|array $args     Arguments for inserting an attachment.\n * @param string       $file     Optional. Filename.\n * @param int          $parent   Optional. Parent post ID.\n * @param bool         $wp_error Optional. Whether to return a WP_Error on failure. Default false.\n * @return int|WP_Error The attachment ID on success. The value 0 or WP_Error on failure.\n */\nfunction wp_insert_attachment( $args, $file = false, $parent = 0, $wp_error = false ) {\n\t$defaults = array(\n\t\t'file'        => $file,\n\t\t'post_parent' => 0\n\t);\n\n\t$data = wp_parse_args( $args, $defaults );\n\n\tif ( ! empty( $parent ) ) {\n\t\t$data['post_parent'] = $parent;\n\t}\n\n\t$data['post_type'] = 'attachment';\n\n\treturn wp_insert_post( $data, $wp_error );\n}\n\n/**\n * Trash or delete an attachment.\n *\n * When an attachment is permanently deleted, the file will also be removed.\n * Deletion removes all post meta fields, taxonomy, comments, etc. associated\n * with the attachment (except the main post).\n *\n * The attachment is moved to the trash instead of permanently deleted unless trash\n * for media is disabled, item is already in the trash, or $force_delete is true.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int  $post_id      Attachment ID.\n * @param bool $force_delete Optional. Whether to bypass trash and force deletion.\n *                           Default false.\n * @return WP_Post|false|null Post data on success, false or null on failure.\n */\nfunction wp_delete_attachment( $post_id, $force_delete = false ) {\n\tglobal $wpdb;\n\n\t$post = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM $wpdb->posts WHERE ID = %d\", $post_id ) );\n\n\tif ( ! $post ) {\n\t\treturn $post;\n\t}\n\n\t$post = get_post( $post );\n\n\tif ( 'attachment' !== $post->post_type ) {\n\t\treturn false;\n\t}\n\n\tif ( ! $force_delete && EMPTY_TRASH_DAYS && MEDIA_TRASH && 'trash' !== $post->post_status ) {\n\t\treturn wp_trash_post( $post_id );\n\t}\n\n\tdelete_post_meta($post_id, '_wp_trash_meta_status');\n\tdelete_post_meta($post_id, '_wp_trash_meta_time');\n\n\t$meta = wp_get_attachment_metadata( $post_id );\n\t$backup_sizes = get_post_meta( $post->ID, '_wp_attachment_backup_sizes', true );\n\t$file = get_attached_file( $post_id );\n\n\tif ( is_multisite() )\n\t\tdelete_transient( 'dirsize_cache' );\n\n\t/**\n\t * Fires before an attachment is deleted, at the start of wp_delete_attachment().\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param int $post_id Attachment ID.\n\t */\n\tdo_action( 'delete_attachment', $post_id );\n\n\twp_delete_object_term_relationships($post_id, array('category', 'post_tag'));\n\twp_delete_object_term_relationships($post_id, get_object_taxonomies($post->post_type));\n\n\t// Delete all for any posts.\n\tdelete_metadata( 'post', null, '_thumbnail_id', $post_id, true );\n\n\twp_defer_comment_counting( true );\n\n\t$comment_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT comment_ID FROM $wpdb->comments WHERE comment_post_ID = %d\", $post_id ));\n\tforeach ( $comment_ids as $comment_id ) {\n\t\twp_delete_comment( $comment_id, true );\n\t}\n\n\twp_defer_comment_counting( false );\n\n\t$post_meta_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d \", $post_id ));\n\tforeach ( $post_meta_ids as $mid )\n\t\tdelete_metadata_by_mid( 'post', $mid );\n\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( 'delete_post', $post_id );\n\t$result = $wpdb->delete( $wpdb->posts, array( 'ID' => $post_id ) );\n\tif ( ! $result ) {\n\t\treturn false;\n\t}\n\t/** This action is documented in wp-includes/post.php */\n\tdo_action( 'deleted_post', $post_id );\n\n\t$uploadpath = wp_get_upload_dir();\n\n\tif ( ! empty($meta['thumb']) ) {\n\t\t// Don't delete the thumb if another attachment uses it.\n\t\tif (! $wpdb->get_row( $wpdb->prepare( \"SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = '_wp_attachment_metadata' AND meta_value LIKE %s AND post_id <> %d\", '%' . $wpdb->esc_like( $meta['thumb'] ) . '%', $post_id)) ) {\n\t\t\t$thumbfile = str_replace(basename($file), $meta['thumb'], $file);\n\t\t\t/** This filter is documented in wp-includes/functions.php */\n\t\t\t$thumbfile = apply_filters( 'wp_delete_file', $thumbfile );\n\t\t\t@ unlink( path_join($uploadpath['basedir'], $thumbfile) );\n\t\t}\n\t}\n\n\t// Remove intermediate and backup images if there are any.\n\tif ( isset( $meta['sizes'] ) && is_array( $meta['sizes'] ) ) {\n\t\tforeach ( $meta['sizes'] as $size => $sizeinfo ) {\n\t\t\t$intermediate_file = str_replace( basename( $file ), $sizeinfo['file'], $file );\n\t\t\t/** This filter is documented in wp-includes/functions.php */\n\t\t\t$intermediate_file = apply_filters( 'wp_delete_file', $intermediate_file );\n\t\t\t@ unlink( path_join( $uploadpath['basedir'], $intermediate_file ) );\n\t\t}\n\t}\n\n\tif ( is_array($backup_sizes) ) {\n\t\tforeach ( $backup_sizes as $size ) {\n\t\t\t$del_file = path_join( dirname($meta['file']), $size['file'] );\n\t\t\t/** This filter is documented in wp-includes/functions.php */\n\t\t\t$del_file = apply_filters( 'wp_delete_file', $del_file );\n\t\t\t@ unlink( path_join($uploadpath['basedir'], $del_file) );\n\t\t}\n\t}\n\n\twp_delete_file( $file );\n\n\tclean_post_cache( $post );\n\n\treturn $post;\n}\n\n/**\n * Retrieve attachment meta field for attachment ID.\n *\n * @since 2.1.0\n *\n * @param int  $attachment_id Attachment post ID. Defaults to global $post.\n * @param bool $unfiltered    Optional. If true, filters are not run. Default false.\n * @return mixed Attachment meta field. False on failure.\n */\nfunction wp_get_attachment_metadata( $attachment_id = 0, $unfiltered = false ) {\n\t$attachment_id = (int) $attachment_id;\n\tif ( ! $post = get_post( $attachment_id ) ) {\n\t\treturn false;\n\t}\n\n\t$data = get_post_meta( $post->ID, '_wp_attachment_metadata', true );\n\n\tif ( $unfiltered )\n\t\treturn $data;\n\n\t/**\n\t * Filters the attachment meta data.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param array|bool $data          Array of meta data for the given attachment, or false\n\t *                                  if the object does not exist.\n\t * @param int        $attachment_id Attachment post ID.\n\t */\n\treturn apply_filters( 'wp_get_attachment_metadata', $data, $post->ID );\n}\n\n/**\n * Update metadata for an attachment.\n *\n * @since 2.1.0\n *\n * @param int   $attachment_id Attachment post ID.\n * @param array $data          Attachment meta data.\n * @return int|bool False if $post is invalid.\n */\nfunction wp_update_attachment_metadata( $attachment_id, $data ) {\n\t$attachment_id = (int) $attachment_id;\n\tif ( ! $post = get_post( $attachment_id ) ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Filters the updated attachment meta data.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param array $data          Array of updated attachment meta data.\n\t * @param int   $attachment_id Attachment post ID.\n\t */\n\tif ( $data = apply_filters( 'wp_update_attachment_metadata', $data, $post->ID ) )\n\t\treturn update_post_meta( $post->ID, '_wp_attachment_metadata', $data );\n\telse\n\t\treturn delete_post_meta( $post->ID, '_wp_attachment_metadata' );\n}\n\n/**\n * Retrieve the URL for an attachment.\n *\n * @since 2.1.0\n *\n * @global string $pagenow\n *\n * @param int $attachment_id Optional. Attachment post ID. Defaults to global $post.\n * @return string|false Attachment URL, otherwise false.\n */\nfunction wp_get_attachment_url( $attachment_id = 0 ) {\n\t$attachment_id = (int) $attachment_id;\n\tif ( ! $post = get_post( $attachment_id ) ) {\n\t\treturn false;\n\t}\n\n\tif ( 'attachment' != $post->post_type )\n\t\treturn false;\n\n\t$url = '';\n\t// Get attached file.\n\tif ( $file = get_post_meta( $post->ID, '_wp_attached_file', true ) ) {\n\t\t// Get upload directory.\n\t\tif ( ( $uploads = wp_get_upload_dir() ) && false === $uploads['error'] ) {\n\t\t\t// Check that the upload base exists in the file location.\n\t\t\tif ( 0 === strpos( $file, $uploads['basedir'] ) ) {\n\t\t\t\t// Replace file location with url location.\n\t\t\t\t$url = str_replace($uploads['basedir'], $uploads['baseurl'], $file);\n\t\t\t} elseif ( false !== strpos($file, 'wp-content/uploads') ) {\n\t\t\t\t// Get the directory name relative to the basedir (back compat for pre-2.7 uploads)\n\t\t\t\t$url = trailingslashit( $uploads['baseurl'] . '/' . _wp_get_attachment_relative_path( $file ) ) . basename( $file );\n\t\t\t} else {\n\t\t\t\t// It's a newly-uploaded file, therefore $file is relative to the basedir.\n\t\t\t\t$url = $uploads['baseurl'] . \"/$file\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * If any of the above options failed, Fallback on the GUID as used pre-2.7,\n\t * not recommended to rely upon this.\n\t */\n\tif ( empty($url) ) {\n\t\t$url = get_the_guid( $post->ID );\n\t}\n\n\t// On SSL front end, URLs should be HTTPS.\n\tif ( is_ssl() && ! is_admin() && 'wp-login.php' !== $GLOBALS['pagenow'] ) {\n\t\t$url = set_url_scheme( $url );\n\t}\n\n\t/**\n\t * Filters the attachment URL.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $url           URL for the given attachment.\n\t * @param int    $attachment_id Attachment post ID.\n\t */\n\t$url = apply_filters( 'wp_get_attachment_url', $url, $post->ID );\n\n\tif ( empty( $url ) )\n\t\treturn false;\n\n\treturn $url;\n}\n\n/**\n * Retrieves the caption for an attachment.\n *\n * @since 4.6.0\n *\n * @param int $post_id Optional. Attachment ID. Default is the ID of the global `$post`.\n * @return string|false False on failure. Attachment caption on success.\n */\nfunction wp_get_attachment_caption( $post_id = 0 ) {\n\t$post_id = (int) $post_id;\n\tif ( ! $post = get_post( $post_id ) ) {\n\t\treturn false;\n\t}\n\n\tif ( 'attachment' !== $post->post_type ) {\n\t\treturn false;\n\t}\n\n\t$caption = $post->post_excerpt;\n\n\t/**\n\t * Filters the attachment caption.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param string $caption Caption for the given attachment.\n\t * @param int    $post_id Attachment ID.\n\t */\n\treturn apply_filters( 'wp_get_attachment_caption', $caption, $post->ID );\n}\n\n/**\n * Retrieve thumbnail for an attachment.\n *\n * @since 2.1.0\n *\n * @param int $post_id Optional. Attachment ID. Default 0.\n * @return string|false False on failure. Thumbnail file path on success.\n */\nfunction wp_get_attachment_thumb_file( $post_id = 0 ) {\n\t$post_id = (int) $post_id;\n\tif ( !$post = get_post( $post_id ) )\n\t\treturn false;\n\tif ( !is_array( $imagedata = wp_get_attachment_metadata( $post->ID ) ) )\n\t\treturn false;\n\n\t$file = get_attached_file( $post->ID );\n\n\tif ( !empty($imagedata['thumb']) && ($thumbfile = str_replace(basename($file), $imagedata['thumb'], $file)) && file_exists($thumbfile) ) {\n\t\t/**\n\t\t * Filters the attachment thumbnail file path.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param string $thumbfile File path to the attachment thumbnail.\n\t\t * @param int    $post_id   Attachment ID.\n\t\t */\n\t\treturn apply_filters( 'wp_get_attachment_thumb_file', $thumbfile, $post->ID );\n\t}\n\treturn false;\n}\n\n/**\n * Retrieve URL for an attachment thumbnail.\n *\n * @since 2.1.0\n *\n * @param int $post_id Optional. Attachment ID. Default 0.\n * @return string|false False on failure. Thumbnail URL on success.\n */\nfunction wp_get_attachment_thumb_url( $post_id = 0 ) {\n\t$post_id = (int) $post_id;\n\tif ( !$post = get_post( $post_id ) )\n\t\treturn false;\n\tif ( !$url = wp_get_attachment_url( $post->ID ) )\n\t\treturn false;\n\n\t$sized = image_downsize( $post_id, 'thumbnail' );\n\tif ( $sized )\n\t\treturn $sized[0];\n\n\tif ( !$thumb = wp_get_attachment_thumb_file( $post->ID ) )\n\t\treturn false;\n\n\t$url = str_replace(basename($url), basename($thumb), $url);\n\n\t/**\n\t * Filters the attachment thumbnail URL.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $url     URL for the attachment thumbnail.\n\t * @param int    $post_id Attachment ID.\n\t */\n\treturn apply_filters( 'wp_get_attachment_thumb_url', $url, $post->ID );\n}\n\n/**\n * Verifies an attachment is of a given type.\n *\n * @since 4.2.0\n *\n * @param string      $type Attachment type. Accepts 'image', 'audio', or 'video'.\n * @param int|WP_Post $post Optional. Attachment ID or object. Default is global $post.\n * @return bool True if one of the accepted types, false otherwise.\n */\nfunction wp_attachment_is( $type, $post = null ) {\n\tif ( ! $post = get_post( $post ) ) {\n\t\treturn false;\n\t}\n\n\tif ( ! $file = get_attached_file( $post->ID ) ) {\n\t\treturn false;\n\t}\n\n\tif ( 0 === strpos( $post->post_mime_type, $type . '/' ) ) {\n\t\treturn true;\n\t}\n\n\t$check = wp_check_filetype( $file );\n\tif ( empty( $check['ext'] ) ) {\n\t\treturn false;\n\t}\n\n\t$ext = $check['ext'];\n\n\tif ( 'import' !== $post->post_mime_type ) {\n\t\treturn $type === $ext;\n\t}\n\n\tswitch ( $type ) {\n\tcase 'image':\n\t\t$image_exts = array( 'jpg', 'jpeg', 'jpe', 'gif', 'png' );\n\t\treturn in_array( $ext, $image_exts );\n\n\tcase 'audio':\n\t\treturn in_array( $ext, wp_get_audio_extensions() );\n\n\tcase 'video':\n\t\treturn in_array( $ext, wp_get_video_extensions() );\n\n\tdefault:\n\t\treturn $type === $ext;\n\t}\n}\n\n/**\n * Checks if the attachment is an image.\n *\n * @since 2.1.0\n * @since 4.2.0 Modified into wrapper for wp_attachment_is() and\n *              allowed WP_Post object to be passed.\n *\n * @param int|WP_Post $post Optional. Attachment ID or object. Default is global $post.\n * @return bool Whether the attachment is an image.\n */\nfunction wp_attachment_is_image( $post = null ) {\n\treturn wp_attachment_is( 'image', $post );\n}\n\n/**\n * Retrieve the icon for a MIME type.\n *\n * @since 2.1.0\n *\n * @param string|int $mime MIME type or attachment ID.\n * @return string|false Icon, false otherwise.\n */\nfunction wp_mime_type_icon( $mime = 0 ) {\n\tif ( !is_numeric($mime) )\n\t\t$icon = wp_cache_get(\"mime_type_icon_$mime\");\n\n\t$post_id = 0;\n\tif ( empty($icon) ) {\n\t\t$post_mimes = array();\n\t\tif ( is_numeric($mime) ) {\n\t\t\t$mime = (int) $mime;\n\t\t\tif ( $post = get_post( $mime ) ) {\n\t\t\t\t$post_id = (int) $post->ID;\n\t\t\t\t$file = get_attached_file( $post_id );\n\t\t\t\t$ext = preg_replace('/^.+?\\.([^.]+)$/', '$1', $file);\n\t\t\t\tif ( !empty($ext) ) {\n\t\t\t\t\t$post_mimes[] = $ext;\n\t\t\t\t\tif ( $ext_type = wp_ext2type( $ext ) )\n\t\t\t\t\t\t$post_mimes[] = $ext_type;\n\t\t\t\t}\n\t\t\t\t$mime = $post->post_mime_type;\n\t\t\t} else {\n\t\t\t\t$mime = 0;\n\t\t\t}\n\t\t} else {\n\t\t\t$post_mimes[] = $mime;\n\t\t}\n\n\t\t$icon_files = wp_cache_get('icon_files');\n\n\t\tif ( !is_array($icon_files) ) {\n\t\t\t/**\n\t\t\t * Filters the icon directory path.\n\t\t\t *\n\t\t\t * @since 2.0.0\n\t\t\t *\n\t\t\t * @param string $path Icon directory absolute path.\n\t\t\t */\n\t\t\t$icon_dir = apply_filters( 'icon_dir', ABSPATH . WPINC . '/images/media' );\n\n\t\t\t/**\n\t\t\t * Filters the icon directory URI.\n\t\t\t *\n\t\t\t * @since 2.0.0\n\t\t\t *\n\t\t\t * @param string $uri Icon directory URI.\n\t\t\t */\n\t\t\t$icon_dir_uri = apply_filters( 'icon_dir_uri', includes_url( 'images/media' ) );\n\n\t\t\t/**\n\t\t\t * Filters the list of icon directory URIs.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param array $uris List of icon directory URIs.\n\t\t\t */\n\t\t\t$dirs = apply_filters( 'icon_dirs', array( $icon_dir => $icon_dir_uri ) );\n\t\t\t$icon_files = array();\n\t\t\twhile ( $dirs ) {\n\t\t\t\t$keys = array_keys( $dirs );\n\t\t\t\t$dir = array_shift( $keys );\n\t\t\t\t$uri = array_shift($dirs);\n\t\t\t\tif ( $dh = opendir($dir) ) {\n\t\t\t\t\twhile ( false !== $file = readdir($dh) ) {\n\t\t\t\t\t\t$file = basename($file);\n\t\t\t\t\t\tif ( substr($file, 0, 1) == '.' )\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif ( !in_array(strtolower(substr($file, -4)), array('.png', '.gif', '.jpg') ) ) {\n\t\t\t\t\t\t\tif ( is_dir(\"$dir/$file\") )\n\t\t\t\t\t\t\t\t$dirs[\"$dir/$file\"] = \"$uri/$file\";\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$icon_files[\"$dir/$file\"] = \"$uri/$file\";\n\t\t\t\t\t}\n\t\t\t\t\tclosedir($dh);\n\t\t\t\t}\n\t\t\t}\n\t\t\twp_cache_add( 'icon_files', $icon_files, 'default', 600 );\n\t\t}\n\n\t\t$types = array();\n\t\t// Icon basename - extension = MIME wildcard.\n\t\tforeach ( $icon_files as $file => $uri )\n\t\t\t$types[ preg_replace('/^([^.]*).*$/', '$1', basename($file)) ] =& $icon_files[$file];\n\n\t\tif ( ! empty($mime) ) {\n\t\t\t$post_mimes[] = substr($mime, 0, strpos($mime, '/'));\n\t\t\t$post_mimes[] = substr($mime, strpos($mime, '/') + 1);\n\t\t\t$post_mimes[] = str_replace('/', '_', $mime);\n\t\t}\n\n\t\t$matches = wp_match_mime_types(array_keys($types), $post_mimes);\n\t\t$matches['default'] = array('default');\n\n\t\tforeach ( $matches as $match => $wilds ) {\n\t\t\tforeach ( $wilds as $wild ) {\n\t\t\t\tif ( ! isset( $types[ $wild ] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$icon = $types[ $wild ];\n\t\t\t\tif ( ! is_numeric( $mime ) ) {\n\t\t\t\t\twp_cache_add( \"mime_type_icon_$mime\", $icon );\n\t\t\t\t}\n\t\t\t\tbreak 2;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Filters the mime type icon.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $icon    Path to the mime type icon.\n\t * @param string $mime    Mime type.\n\t * @param int    $post_id Attachment ID. Will equal 0 if the function passed\n\t *                        the mime type.\n\t */\n\treturn apply_filters( 'wp_mime_type_icon', $icon, $mime, $post_id );\n}\n\n/**\n * Check for changed slugs for published post objects and save the old slug.\n *\n * The function is used when a post object of any type is updated,\n * by comparing the current and previous post objects.\n *\n * If the slug was changed and not already part of the old slugs then it will be\n * added to the post meta field ('_wp_old_slug') for storing old slugs for that\n * post.\n *\n * The most logically usage of this function is redirecting changed post objects, so\n * that those that linked to an changed post will be redirected to the new post.\n *\n * @since 2.1.0\n *\n * @param int     $post_id     Post ID.\n * @param WP_Post $post        The Post Object\n * @param WP_Post $post_before The Previous Post Object\n */\nfunction wp_check_for_changed_slugs( $post_id, $post, $post_before ) {\n\t// Don't bother if it hasn't changed.\n\tif ( $post->post_name == $post_before->post_name ) {\n\t\treturn;\n\t}\n\n\t// We're only concerned with published, non-hierarchical objects.\n\tif ( ! ( 'publish' === $post->post_status || ( 'attachment' === get_post_type( $post ) && 'inherit' === $post->post_status ) ) || is_post_type_hierarchical( $post->post_type ) ) {\n\t\treturn;\n\t}\n\n\t$old_slugs = (array) get_post_meta( $post_id, '_wp_old_slug' );\n\n\t// If we haven't added this old slug before, add it now.\n\tif ( ! empty( $post_before->post_name ) && ! in_array( $post_before->post_name, $old_slugs ) ) {\n\t\tadd_post_meta( $post_id, '_wp_old_slug', $post_before->post_name );\n\t}\n\n\t// If the new slug was used previously, delete it from the list.\n\tif ( in_array( $post->post_name, $old_slugs ) ) {\n\t\tdelete_post_meta( $post_id, '_wp_old_slug', $post->post_name );\n\t}\n}\n\n/**\n * Retrieve the private post SQL based on capability.\n *\n * This function provides a standardized way to appropriately select on the\n * post_status of a post type. The function will return a piece of SQL code\n * that can be added to a WHERE clause; this SQL is constructed to allow all\n * published posts, and all private posts to which the user has access.\n *\n * @since 2.2.0\n * @since 4.3.0 Added the ability to pass an array to `$post_type`.\n *\n * @param string|array $post_type Single post type or an array of post types. Currently only supports 'post' or 'page'.\n * @return string SQL code that can be added to a where clause.\n */\nfunction get_private_posts_cap_sql( $post_type ) {\n\treturn get_posts_by_author_sql( $post_type, false );\n}\n\n/**\n * Retrieve the post SQL based on capability, author, and type.\n *\n * @since 3.0.0\n * @since 4.3.0 Introduced the ability to pass an array of post types to `$post_type`.\n *\n * @see get_private_posts_cap_sql()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array|string   $post_type   Single post type or an array of post types.\n * @param bool           $full        Optional. Returns a full WHERE statement instead of just\n *                                    an 'andalso' term. Default true.\n * @param int            $post_author Optional. Query posts having a single author ID. Default null.\n * @param bool           $public_only Optional. Only return public posts. Skips cap checks for\n *                                    $current_user.  Default false.\n * @return string SQL WHERE code that can be added to a query.\n */\nfunction get_posts_by_author_sql( $post_type, $full = true, $post_author = null, $public_only = false ) {\n\tglobal $wpdb;\n\n\tif ( is_array( $post_type ) ) {\n\t\t$post_types = $post_type;\n\t} else {\n\t\t$post_types = array( $post_type );\n\t}\n\n\t$post_type_clauses = array();\n\tforeach ( $post_types as $post_type ) {\n\t\t$post_type_obj = get_post_type_object( $post_type );\n\t\tif ( ! $post_type_obj ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/**\n\t\t * Filters the capability to read private posts for a custom post type\n\t\t * when generating SQL for getting posts by author.\n\t\t *\n\t\t * @since 2.2.0\n\t\t * @deprecated 3.2.0 The hook transitioned from \"somewhat useless\" to \"totally useless\".\n\t\t *\n\t\t * @param string $cap Capability.\n\t\t */\n\t\tif ( ! $cap = apply_filters( 'pub_priv_sql_capability', '' ) ) {\n\t\t\t$cap = current_user_can( $post_type_obj->cap->read_private_posts );\n\t\t}\n\n\t\t// Only need to check the cap if $public_only is false.\n\t\t$post_status_sql = \"post_status = 'publish'\";\n\t\tif ( false === $public_only ) {\n\t\t\tif ( $cap ) {\n\t\t\t\t// Does the user have the capability to view private posts? Guess so.\n\t\t\t\t$post_status_sql .= \" OR post_status = 'private'\";\n\t\t\t} elseif ( is_user_logged_in() ) {\n\t\t\t\t// Users can view their own private posts.\n\t\t\t\t$id = get_current_user_id();\n\t\t\t\tif ( null === $post_author || ! $full ) {\n\t\t\t\t\t$post_status_sql .= \" OR post_status = 'private' AND post_author = $id\";\n\t\t\t\t} elseif ( $id == (int) $post_author ) {\n\t\t\t\t\t$post_status_sql .= \" OR post_status = 'private'\";\n\t\t\t\t} // else none\n\t\t\t} // else none\n\t\t}\n\n\t\t$post_type_clauses[] = \"( post_type = '\" . $post_type . \"' AND ( $post_status_sql ) )\";\n\t}\n\n\tif ( empty( $post_type_clauses ) ) {\n\t\treturn $full ? 'WHERE 1 = 0' : '1 = 0';\n\t}\n\n\t$sql = '( '. implode( ' OR ', $post_type_clauses ) . ' )';\n\n\tif ( null !== $post_author ) {\n\t\t$sql .= $wpdb->prepare( ' AND post_author = %d', $post_author );\n\t}\n\n\tif ( $full ) {\n\t\t$sql = 'WHERE ' . $sql;\n\t}\n\n\treturn $sql;\n}\n\n/**\n * Retrieve the date that the last post was published.\n *\n * The server timezone is the default and is the difference between GMT and\n * server time. The 'blog' value is the date when the last post was posted. The\n * 'gmt' is when the last post was posted in GMT formatted date.\n *\n * @since 0.71\n * @since 4.4.0 The `$post_type` argument was added.\n *\n * @param string $timezone  Optional. The timezone for the timestamp. Accepts 'server', 'blog', or 'gmt'.\n *                          'server' uses the server's internal timezone.\n *                          'blog' uses the `post_modified` field, which proxies to the timezone set for the site.\n *                          'gmt' uses the `post_modified_gmt` field.\n *                          Default 'server'.\n * @param string $post_type Optional. The post type to check. Default 'any'.\n * @return string The date of the last post.\n */\nfunction get_lastpostdate( $timezone = 'server', $post_type = 'any' ) {\n\t/**\n\t * Filters the date the last post was published.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $date     Date the last post was published.\n\t * @param string $timezone Location to use for getting the post published date.\n\t *                         See get_lastpostdate() for accepted `$timezone` values.\n\t */\n\treturn apply_filters( 'get_lastpostdate', _get_last_post_time( $timezone, 'date', $post_type ), $timezone );\n}\n\n/**\n * Get the timestamp of the last time any post was modified.\n *\n * The server timezone is the default and is the difference between GMT and\n * server time. The 'blog' value is just when the last post was modified. The\n * 'gmt' is when the last post was modified in GMT time.\n *\n * @since 1.2.0\n * @since 4.4.0 The `$post_type` argument was added.\n *\n * @param string $timezone  Optional. The timezone for the timestamp. See get_lastpostdate()\n *                          for information on accepted values.\n *                          Default 'server'.\n * @param string $post_type Optional. The post type to check. Default 'any'.\n * @return string The timestamp.\n */\nfunction get_lastpostmodified( $timezone = 'server', $post_type = 'any' ) {\n\t/**\n\t * Pre-filter the return value of get_lastpostmodified() before the query is run.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $lastpostmodified Date the last post was modified.\n\t *                                 Returning anything other than false will short-circuit the function.\n\t * @param string $timezone         Location to use for getting the post modified date.\n\t *                                 See get_lastpostdate() for accepted `$timezone` values.\n\t * @param string $post_type        The post type to check.\n\t */\n\t$lastpostmodified = apply_filters( 'pre_get_lastpostmodified', false, $timezone, $post_type );\n\tif ( false !== $lastpostmodified ) {\n\t\treturn $lastpostmodified;\n\t}\n\n\t$lastpostmodified = _get_last_post_time( $timezone, 'modified', $post_type );\n\n\t$lastpostdate = get_lastpostdate($timezone);\n\tif ( $lastpostdate > $lastpostmodified ) {\n\t\t$lastpostmodified = $lastpostdate;\n\t}\n\n\t/**\n\t * Filters the date the last post was modified.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $lastpostmodified Date the last post was modified.\n\t * @param string $timezone         Location to use for getting the post modified date.\n\t *                                 See get_lastpostdate() for accepted `$timezone` values.\n\t */\n\treturn apply_filters( 'get_lastpostmodified', $lastpostmodified, $timezone );\n}\n\n/**\n * Get the timestamp of the last time any post was modified or published.\n *\n * @since 3.1.0\n * @since 4.4.0 The `$post_type` argument was added.\n * @access private\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $timezone  The timezone for the timestamp. See get_lastpostdate().\n *                          for information on accepted values.\n * @param string $field     Post field to check. Accepts 'date' or 'modified'.\n * @param string $post_type Optional. The post type to check. Default 'any'.\n * @return string|false The timestamp.\n */\nfunction _get_last_post_time( $timezone, $field, $post_type = 'any' ) {\n\tglobal $wpdb;\n\n\tif ( ! in_array( $field, array( 'date', 'modified' ) ) ) {\n\t\treturn false;\n\t}\n\n\t$timezone = strtolower( $timezone );\n\n\t$key = \"lastpost{$field}:$timezone\";\n\tif ( 'any' !== $post_type ) {\n\t\t$key .= ':' . sanitize_key( $post_type );\n\t}\n\n\t$date = wp_cache_get( $key, 'timeinfo' );\n\tif ( false !== $date ) {\n\t\treturn $date;\n\t}\n\n\tif ( 'any' === $post_type ) {\n\t\t$post_types = get_post_types( array( 'public' => true ) );\n\t\tarray_walk( $post_types, array( $wpdb, 'escape_by_ref' ) );\n\t\t$post_types = \"'\" . implode( \"', '\", $post_types ) . \"'\";\n\t} else {\n\t\t$post_types = \"'\" . sanitize_key( $post_type ) . \"'\";\n\t}\n\n\tswitch ( $timezone ) {\n\t\tcase 'gmt':\n\t\t\t$date = $wpdb->get_var(\"SELECT post_{$field}_gmt FROM $wpdb->posts WHERE post_status = 'publish' AND post_type IN ({$post_types}) ORDER BY post_{$field}_gmt DESC LIMIT 1\");\n\t\t\tbreak;\n\t\tcase 'blog':\n\t\t\t$date = $wpdb->get_var(\"SELECT post_{$field} FROM $wpdb->posts WHERE post_status = 'publish' AND post_type IN ({$post_types}) ORDER BY post_{$field}_gmt DESC LIMIT 1\");\n\t\t\tbreak;\n\t\tcase 'server':\n\t\t\t$add_seconds_server = date( 'Z' );\n\t\t\t$date = $wpdb->get_var(\"SELECT DATE_ADD(post_{$field}_gmt, INTERVAL '$add_seconds_server' SECOND) FROM $wpdb->posts WHERE post_status = 'publish' AND post_type IN ({$post_types}) ORDER BY post_{$field}_gmt DESC LIMIT 1\");\n\t\t\tbreak;\n\t}\n\n\tif ( $date ) {\n\t\twp_cache_set( $key, $date, 'timeinfo' );\n\n\t\treturn $date;\n\t}\n\n\treturn false;\n}\n\n/**\n * Updates posts in cache.\n *\n * @since 1.5.1\n *\n * @param array $posts Array of post objects (passed by reference).\n */\nfunction update_post_cache( &$posts ) {\n\tif ( ! $posts )\n\t\treturn;\n\n\tforeach ( $posts as $post )\n\t\twp_cache_add( $post->ID, $post, 'posts' );\n}\n\n/**\n * Will clean the post in the cache.\n *\n * Cleaning means delete from the cache of the post. Will call to clean the term\n * object cache associated with the post ID.\n *\n * This function not run if $_wp_suspend_cache_invalidation is not empty. See\n * wp_suspend_cache_invalidation().\n *\n * @since 2.0.0\n *\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @param int|WP_Post $post Post ID or post object to remove from the cache.\n */\nfunction clean_post_cache( $post ) {\n\tglobal $_wp_suspend_cache_invalidation;\n\n\tif ( ! empty( $_wp_suspend_cache_invalidation ) )\n\t\treturn;\n\n\t$post = get_post( $post );\n\tif ( empty( $post ) )\n\t\treturn;\n\n\twp_cache_delete( $post->ID, 'posts' );\n\twp_cache_delete( $post->ID, 'post_meta' );\n\n\tclean_object_term_cache( $post->ID, $post->post_type );\n\n\twp_cache_delete( 'wp_get_archives', 'general' );\n\n\t/**\n\t * Fires immediately after the given post's cache is cleaned.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param int     $post_id Post ID.\n\t * @param WP_Post $post    Post object.\n\t */\n\tdo_action( 'clean_post_cache', $post->ID, $post );\n\n\tif ( 'page' == $post->post_type ) {\n\t\twp_cache_delete( 'all_page_ids', 'posts' );\n\n\t\t/**\n\t\t * Fires immediately after the given page's cache is cleaned.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param int $post_id Post ID.\n\t\t */\n\t\tdo_action( 'clean_page_cache', $post->ID );\n\t}\n\n\twp_cache_set( 'last_changed', microtime(), 'posts' );\n}\n\n/**\n * Call major cache updating functions for list of Post objects.\n *\n * @since 1.5.0\n *\n * @param array  $posts             Array of Post objects\n * @param string $post_type         Optional. Post type. Default 'post'.\n * @param bool   $update_term_cache Optional. Whether to update the term cache. Default true.\n * @param bool   $update_meta_cache Optional. Whether to update the meta cache. Default true.\n */\nfunction update_post_caches( &$posts, $post_type = 'post', $update_term_cache = true, $update_meta_cache = true ) {\n\t// No point in doing all this work if we didn't match any posts.\n\tif ( !$posts )\n\t\treturn;\n\n\tupdate_post_cache($posts);\n\n\t$post_ids = array();\n\tforeach ( $posts as $post )\n\t\t$post_ids[] = $post->ID;\n\n\tif ( ! $post_type )\n\t\t$post_type = 'any';\n\n\tif ( $update_term_cache ) {\n\t\tif ( is_array($post_type) ) {\n\t\t\t$ptypes = $post_type;\n\t\t} elseif ( 'any' == $post_type ) {\n\t\t\t$ptypes = array();\n\t\t\t// Just use the post_types in the supplied posts.\n\t\t\tforeach ( $posts as $post ) {\n\t\t\t\t$ptypes[] = $post->post_type;\n\t\t\t}\n\t\t\t$ptypes = array_unique($ptypes);\n\t\t} else {\n\t\t\t$ptypes = array($post_type);\n\t\t}\n\n\t\tif ( ! empty($ptypes) )\n\t\t\tupdate_object_term_cache($post_ids, $ptypes);\n\t}\n\n\tif ( $update_meta_cache )\n\t\tupdate_postmeta_cache($post_ids);\n}\n\n/**\n * Updates metadata cache for list of post IDs.\n *\n * Performs SQL query to retrieve the metadata for the post IDs and updates the\n * metadata cache for the posts. Therefore, the functions, which call this\n * function, do not need to perform SQL queries on their own.\n *\n * @since 2.1.0\n *\n * @param array $post_ids List of post IDs.\n * @return array|false Returns false if there is nothing to update or an array\n *                     of metadata.\n */\nfunction update_postmeta_cache( $post_ids ) {\n\treturn update_meta_cache('post', $post_ids);\n}\n\n/**\n * Will clean the attachment in the cache.\n *\n * Cleaning means delete from the cache. Optionally will clean the term\n * object cache associated with the attachment ID.\n *\n * This function will not run if $_wp_suspend_cache_invalidation is not empty.\n *\n * @since 3.0.0\n *\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @param int  $id          The attachment ID in the cache to clean.\n * @param bool $clean_terms Optional. Whether to clean terms cache. Default false.\n */\nfunction clean_attachment_cache( $id, $clean_terms = false ) {\n\tglobal $_wp_suspend_cache_invalidation;\n\n\tif ( !empty($_wp_suspend_cache_invalidation) )\n\t\treturn;\n\n\t$id = (int) $id;\n\n\twp_cache_delete($id, 'posts');\n\twp_cache_delete($id, 'post_meta');\n\n\tif ( $clean_terms )\n\t\tclean_object_term_cache($id, 'attachment');\n\n\t/**\n\t * Fires after the given attachment's cache is cleaned.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param int $id Attachment ID.\n\t */\n\tdo_action( 'clean_attachment_cache', $id );\n}\n\n//\n// Hooks\n//\n\n/**\n * Hook for managing future post transitions to published.\n *\n * @since 2.3.0\n * @access private\n *\n * @see wp_clear_scheduled_hook()\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string  $new_status New post status.\n * @param string  $old_status Previous post status.\n * @param WP_Post $post       Post object.\n */\nfunction _transition_post_status( $new_status, $old_status, $post ) {\n\tglobal $wpdb;\n\n\tif ( $old_status != 'publish' && $new_status == 'publish' ) {\n\t\t// Reset GUID if transitioning to publish and it is empty.\n\t\tif ( '' == get_the_guid($post->ID) )\n\t\t\t$wpdb->update( $wpdb->posts, array( 'guid' => get_permalink( $post->ID ) ), array( 'ID' => $post->ID ) );\n\n\t\t/**\n\t\t * Fires when a post's status is transitioned from private to published.\n\t\t *\n\t\t * @since 1.5.0\n\t\t * @deprecated 2.3.0 Use 'private_to_publish' instead.\n\t\t *\n\t\t * @param int $post_id Post ID.\n\t\t */\n\t\tdo_action('private_to_published', $post->ID);\n\t}\n\n\t// If published posts changed clear the lastpostmodified cache.\n\tif ( 'publish' == $new_status || 'publish' == $old_status) {\n\t\tforeach ( array( 'server', 'gmt', 'blog' ) as $timezone ) {\n\t\t\twp_cache_delete( \"lastpostmodified:$timezone\", 'timeinfo' );\n\t\t\twp_cache_delete( \"lastpostdate:$timezone\", 'timeinfo' );\n\t\t\twp_cache_delete( \"lastpostdate:$timezone:{$post->post_type}\", 'timeinfo' );\n\t\t}\n\t}\n\n\tif ( $new_status !== $old_status ) {\n\t\twp_cache_delete( _count_posts_cache_key( $post->post_type ), 'counts' );\n\t\twp_cache_delete( _count_posts_cache_key( $post->post_type, 'readable' ), 'counts' );\n\t}\n\n\t// Always clears the hook in case the post status bounced from future to draft.\n\twp_clear_scheduled_hook('publish_future_post', array( $post->ID ) );\n}\n\n/**\n * Hook used to schedule publication for a post marked for the future.\n *\n * The $post properties used and must exist are 'ID' and 'post_date_gmt'.\n *\n * @since 2.3.0\n * @access private\n *\n * @param int     $deprecated Not used. Can be set to null. Never implemented. Not marked\n *                            as deprecated with _deprecated_argument() as it conflicts with\n *                            wp_transition_post_status() and the default filter for _future_post_hook().\n * @param WP_Post $post       Post object.\n */\nfunction _future_post_hook( $deprecated, $post ) {\n\twp_clear_scheduled_hook( 'publish_future_post', array( $post->ID ) );\n\twp_schedule_single_event( strtotime( get_gmt_from_date( $post->post_date ) . ' GMT') , 'publish_future_post', array( $post->ID ) );\n}\n\n/**\n * Hook to schedule pings and enclosures when a post is published.\n *\n * Uses XMLRPC_REQUEST and WP_IMPORTING constants.\n *\n * @since 2.3.0\n * @access private\n *\n * @param int $post_id The ID in the database table of the post being published.\n */\nfunction _publish_post_hook( $post_id ) {\n\tif ( defined( 'XMLRPC_REQUEST' ) ) {\n\t\t/**\n\t\t * Fires when _publish_post_hook() is called during an XML-RPC request.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param int $post_id Post ID.\n\t\t */\n\t\tdo_action( 'xmlrpc_publish_post', $post_id );\n\t}\n\n\tif ( defined('WP_IMPORTING') )\n\t\treturn;\n\n\tif ( get_option('default_pingback_flag') )\n\t\tadd_post_meta( $post_id, '_pingme', '1' );\n\tadd_post_meta( $post_id, '_encloseme', '1' );\n\n\tif ( ! wp_next_scheduled( 'do_pings' ) ) {\n\t\twp_schedule_single_event( time(), 'do_pings' );\n\t}\n}\n\n/**\n * Return the post's parent's post_ID\n *\n * @since 3.1.0\n *\n * @param int $post_ID\n *\n * @return int|false Post parent ID, otherwise false.\n */\nfunction wp_get_post_parent_id( $post_ID ) {\n\t$post = get_post( $post_ID );\n\tif ( !$post || is_wp_error( $post ) )\n\t\treturn false;\n\treturn (int) $post->post_parent;\n}\n\n/**\n * Check the given subset of the post hierarchy for hierarchy loops.\n *\n * Prevents loops from forming and breaks those that it finds. Attached\n * to the {@see 'wp_insert_post_parent'} filter.\n *\n * @since 3.1.0\n *\n * @see wp_find_hierarchy_loop()\n *\n * @param int $post_parent ID of the parent for the post we're checking.\n * @param int $post_ID     ID of the post we're checking.\n * @return int The new post_parent for the post, 0 otherwise.\n */\nfunction wp_check_post_hierarchy_for_loops( $post_parent, $post_ID ) {\n\t// Nothing fancy here - bail.\n\tif ( !$post_parent )\n\t\treturn 0;\n\n\t// New post can't cause a loop.\n\tif ( empty( $post_ID ) )\n\t\treturn $post_parent;\n\n\t// Can't be its own parent.\n\tif ( $post_parent == $post_ID )\n\t\treturn 0;\n\n\t// Now look for larger loops.\n\tif ( !$loop = wp_find_hierarchy_loop( 'wp_get_post_parent_id', $post_ID, $post_parent ) )\n\t\treturn $post_parent; // No loop\n\n\t// Setting $post_parent to the given value causes a loop.\n\tif ( isset( $loop[$post_ID] ) )\n\t\treturn 0;\n\n\t// There's a loop, but it doesn't contain $post_ID. Break the loop.\n\tforeach ( array_keys( $loop ) as $loop_member )\n\t\twp_update_post( array( 'ID' => $loop_member, 'post_parent' => 0 ) );\n\n\treturn $post_parent;\n}\n\n/**\n * Set a post thumbnail.\n *\n * @since 3.1.0\n *\n * @param int|WP_Post $post         Post ID or post object where thumbnail should be attached.\n * @param int         $thumbnail_id Thumbnail to attach.\n * @return int|bool True on success, false on failure.\n */\nfunction set_post_thumbnail( $post, $thumbnail_id ) {\n\t$post = get_post( $post );\n\t$thumbnail_id = absint( $thumbnail_id );\n\tif ( $post && $thumbnail_id && get_post( $thumbnail_id ) ) {\n\t\tif ( wp_get_attachment_image( $thumbnail_id, 'thumbnail' ) )\n\t\t\treturn update_post_meta( $post->ID, '_thumbnail_id', $thumbnail_id );\n\t\telse\n\t\t\treturn delete_post_meta( $post->ID, '_thumbnail_id' );\n\t}\n\treturn false;\n}\n\n/**\n * Remove a post thumbnail.\n *\n * @since 3.3.0\n *\n * @param int|WP_Post $post Post ID or post object where thumbnail should be removed from.\n * @return bool True on success, false on failure.\n */\nfunction delete_post_thumbnail( $post ) {\n\t$post = get_post( $post );\n\tif ( $post )\n\t\treturn delete_post_meta( $post->ID, '_thumbnail_id' );\n\treturn false;\n}\n\n/**\n * Delete auto-drafts for new posts that are > 7 days old.\n *\n * @since 3.4.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n */\nfunction wp_delete_auto_drafts() {\n\tglobal $wpdb;\n\n\t// Cleanup old auto-drafts more than 7 days old.\n\t$old_posts = $wpdb->get_col( \"SELECT ID FROM $wpdb->posts WHERE post_status = 'auto-draft' AND DATE_SUB( NOW(), INTERVAL 7 DAY ) > post_date\" );\n\tforeach ( (array) $old_posts as $delete ) {\n\t\t// Force delete.\n\t\twp_delete_post( $delete, true );\n\t}\n}\n\n/**\n * Queues posts for lazy-loading of term meta.\n *\n * @since 4.5.0\n *\n * @param array $posts Array of WP_Post objects.\n */\nfunction wp_queue_posts_for_term_meta_lazyload( $posts ) {\n\t$post_type_taxonomies = $term_ids = array();\n\tforeach ( $posts as $post ) {\n\t\tif ( ! ( $post instanceof WP_Post ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( ! isset( $post_type_taxonomies[ $post->post_type ] ) ) {\n\t\t\t$post_type_taxonomies[ $post->post_type ] = get_object_taxonomies( $post->post_type );\n\t\t}\n\n\t\tforeach ( $post_type_taxonomies[ $post->post_type ] as $taxonomy ) {\n\t\t\t// Term cache should already be primed by `update_post_term_cache()`.\n\t\t\t$terms = get_object_term_cache( $post->ID, $taxonomy );\n\t\t\tif ( false !== $terms ) {\n\t\t\t\tforeach ( $terms as $term ) {\n\t\t\t\t\tif ( ! isset( $term_ids[ $term->term_id ] ) ) {\n\t\t\t\t\t\t$term_ids[] = $term->term_id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( $term_ids ) {\n\t\t$lazyloader = wp_metadata_lazyloader();\n\t\t$lazyloader->queue_objects( 'term', $term_ids );\n\t}\n}\n\n/**\n * Update the custom taxonomies' term counts when a post's status is changed.\n *\n * For example, default posts term counts (for custom taxonomies) don't include\n * private / draft posts.\n *\n * @since 3.3.0\n * @access private\n *\n * @param string  $new_status New post status.\n * @param string  $old_status Old post status.\n * @param WP_Post $post       Post object.\n */\nfunction _update_term_count_on_transition_post_status( $new_status, $old_status, $post ) {\n\t// Update counts for the post's terms.\n\tforeach ( (array) get_object_taxonomies( $post->post_type ) as $taxonomy ) {\n\t\t$tt_ids = wp_get_object_terms( $post->ID, $taxonomy, array( 'fields' => 'tt_ids' ) );\n\t\twp_update_term_count( $tt_ids, $taxonomy );\n\t}\n}\n\n/**\n * Adds any posts from the given ids to the cache that do not already exist in cache\n *\n * @since 3.4.0\n * @access private\n *\n * @see update_post_caches()\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $ids               ID list.\n * @param bool  $update_term_cache Optional. Whether to update the term cache. Default true.\n * @param bool  $update_meta_cache Optional. Whether to update the meta cache. Default true.\n */\nfunction _prime_post_caches( $ids, $update_term_cache = true, $update_meta_cache = true ) {\n\tglobal $wpdb;\n\n\t$non_cached_ids = _get_non_cached_ids( $ids, 'posts' );\n\tif ( !empty( $non_cached_ids ) ) {\n\t\t$fresh_posts = $wpdb->get_results( sprintf( \"SELECT $wpdb->posts.* FROM $wpdb->posts WHERE ID IN (%s)\", join( \",\", $non_cached_ids ) ) );\n\n\t\tupdate_post_caches( $fresh_posts, 'any', $update_term_cache, $update_meta_cache );\n\t}\n}\n\n/**\n * Adds a suffix if any trashed posts have a given slug.\n *\n * Store its desired (i.e. current) slug so it can try to reclaim it\n * if the post is untrashed.\n *\n * For internal use.\n *\n * @since 4.5.0\n * @access private\n *\n * @param string $post_name Slug.\n * @param string $post_ID   Optional. Post ID that should be ignored. Default 0.\n */\nfunction wp_add_trashed_suffix_to_post_name_for_trashed_posts( $post_name, $post_ID = 0 ) {\n\t$trashed_posts_with_desired_slug = get_posts( array(\n\t\t'name' => $post_name,\n\t\t'post_status' => 'trash',\n\t\t'post_type' => 'any',\n\t\t'nopaging' => true,\n\t\t'post__not_in' => array( $post_ID )\n\t) );\n\n\tif ( ! empty( $trashed_posts_with_desired_slug ) ) {\n\t\tforeach ( $trashed_posts_with_desired_slug as $_post ) {\n\t\t\twp_add_trashed_suffix_to_post_name_for_post( $_post );\n\t\t}\n\t}\n}\n\n/**\n * Adds a trashed suffix for a given post.\n *\n * Store its desired (i.e. current) slug so it can try to reclaim it\n * if the post is untrashed.\n *\n * For internal use.\n *\n * @since 4.5.0\n * @access private\n *\n * @param WP_Post $post The post.\n * @return string New slug for the post.\n */\nfunction wp_add_trashed_suffix_to_post_name_for_post( $post ) {\n\tglobal $wpdb;\n\n\t$post = get_post( $post );\n\n\tif ( '__trashed' === substr( $post->post_name, -9 ) ) {\n\t\treturn $post->post_name;\n\t}\n\tadd_post_meta( $post->ID, '_wp_desired_post_slug', $post->post_name );\n\t$post_name = _truncate_post_slug( $post->post_name, 191 ) . '__trashed';\n\t$wpdb->update( $wpdb->posts, array( 'post_name' => $post_name ), array( 'ID' => $post->ID ) );\n\tclean_post_cache( $post->ID );\n\treturn $post_name;\n}\n\n/**\n * Filter the SQL clauses of an attachment query to include filenames.\n *\n * @since 4.7.0\n * @access private\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $clauses An array including WHERE, GROUP BY, JOIN, ORDER BY,\n *                       DISTINCT, fields (SELECT), and LIMITS clauses.\n * @return array The modified clauses.\n */\nfunction _filter_query_attachment_filenames( $clauses ) {\n\tglobal $wpdb;\n\tremove_filter( 'posts_clauses', __FUNCTION__ );\n\n\t// Add a LEFT JOIN of the postmeta table so we don't trample existing JOINs.\n\t$clauses['join'] .= \" LEFT JOIN {$wpdb->postmeta} AS sq1 ON ( {$wpdb->posts}.ID = sq1.post_id AND sq1.meta_key = '_wp_attached_file' )\";\n\n\t$clauses['groupby'] = \"{$wpdb->posts}.ID\";\n\n\t$clauses['where'] = preg_replace(\n\t\t\"/\\({$wpdb->posts}.post_content (NOT LIKE|LIKE) (\\'[^']+\\')\\)/\",\n\t\t\"$0 OR ( sq1.meta_value $1 $2 )\",\n\t\t$clauses['where'] );\n\n\treturn $clauses;\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.9-RC1-42056';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4607-20170918';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n", "<?php\n/**\n * WordPress DB Class\n *\n * Original code from {@link http://php.justinvincent.com Justin Vincent (justin@visunet.ie)}\n *\n * @package WordPress\n * @subpackage Database\n * @since 0.71\n */\n\n/**\n * @since 0.71\n */\ndefine( 'EZSQL_VERSION', 'WP1.25' );\n\n/**\n * @since 0.71\n */\ndefine( 'OBJECT', 'OBJECT' );\ndefine( 'object', 'OBJECT' ); // Back compat.\n\n/**\n * @since 2.5.0\n */\ndefine( 'OBJECT_K', 'OBJECT_K' );\n\n/**\n * @since 0.71\n */\ndefine( 'ARRAY_A', 'ARRAY_A' );\n\n/**\n * @since 0.71\n */\ndefine( 'ARRAY_N', 'ARRAY_N' );\n\n/**\n * WordPress Database Access Abstraction Object\n *\n * It is possible to replace this class with your own\n * by setting the $wpdb global variable in wp-content/db.php\n * file to your class. The wpdb class will still be included,\n * so you can extend it or simply use your own.\n *\n * @link https://codex.wordpress.org/Function_Reference/wpdb_Class\n *\n * @since 0.71\n */\nclass wpdb {\n\n\t/**\n\t * Whether to show SQL/DB errors.\n\t *\n\t * Default behavior is to show errors if both WP_DEBUG and WP_DEBUG_DISPLAY\n\t * evaluated to true.\n\t *\n\t * @since 0.71\n\t * @var bool\n\t */\n\tvar $show_errors = false;\n\n\t/**\n\t * Whether to suppress errors during the DB bootstrapping.\n\t *\n\t * @since 2.5.0\n\t * @var bool\n\t */\n\tvar $suppress_errors = false;\n\n\t/**\n\t * The last error during query.\n\t *\n\t * @since 2.5.0\n\t * @var string\n\t */\n\tpublic $last_error = '';\n\n\t/**\n\t * Amount of queries made\n\t *\n\t * @since 1.2.0\n\t * @var int\n\t */\n\tpublic $num_queries = 0;\n\n\t/**\n\t * Count of rows returned by previous query\n\t *\n\t * @since 0.71\n\t * @var int\n\t */\n\tpublic $num_rows = 0;\n\n\t/**\n\t * Count of affected rows by previous query\n\t *\n\t * @since 0.71\n\t * @var int\n\t */\n\tvar $rows_affected = 0;\n\n\t/**\n\t * The ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).\n\t *\n\t * @since 0.71\n\t * @var int\n\t */\n\tpublic $insert_id = 0;\n\n\t/**\n\t * Last query made\n\t *\n\t * @since 0.71\n\t * @var array\n\t */\n\tvar $last_query;\n\n\t/**\n\t * Results of the last query made\n\t *\n\t * @since 0.71\n\t * @var array|null\n\t */\n\tvar $last_result;\n\n\t/**\n\t * MySQL result, which is either a resource or boolean.\n\t *\n\t * @since 0.71\n\t * @var mixed\n\t */\n\tprotected $result;\n\n\t/**\n\t * Cached column info, for sanity checking data before inserting\n\t *\n\t * @since 4.2.0\n\t * @var array\n\t */\n\tprotected $col_meta = array();\n\n\t/**\n\t * Calculated character sets on tables\n\t *\n\t * @since 4.2.0\n\t * @var array\n\t */\n\tprotected $table_charset = array();\n\n\t/**\n\t * Whether text fields in the current query need to be sanity checked.\n\t *\n\t * @since 4.2.0\n\t * @var bool\n\t */\n\tprotected $check_current_query = true;\n\n\t/**\n\t * Flag to ensure we don't run into recursion problems when checking the collation.\n\t *\n\t * @since 4.2.0\n\t * @see wpdb::check_safe_collation()\n\t * @var bool\n\t */\n\tprivate $checking_collation = false;\n\n\t/**\n\t * Saved info on the table column\n\t *\n\t * @since 0.71\n\t * @var array\n\t */\n\tprotected $col_info;\n\n\t/**\n\t * Saved queries that were executed\n\t *\n\t * @since 1.5.0\n\t * @var array\n\t */\n\tvar $queries;\n\n\t/**\n\t * The number of times to retry reconnecting before dying.\n\t *\n\t * @since 3.9.0\n\t * @see wpdb::check_connection()\n\t * @var int\n\t */\n\tprotected $reconnect_retries = 5;\n\n\t/**\n\t * WordPress table prefix\n\t *\n\t * You can set this to have multiple WordPress installations\n\t * in a single database. The second reason is for possible\n\t * security precautions.\n\t *\n\t * @since 2.5.0\n\t * @var string\n\t */\n\tpublic $prefix = '';\n\n\t/**\n\t * WordPress base table prefix.\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\t public $base_prefix;\n\n\t/**\n\t * Whether the database queries are ready to start executing.\n\t *\n\t * @since 2.3.2\n\t * @var bool\n\t */\n\tvar $ready = false;\n\n\t/**\n\t * Blog ID.\n\t *\n\t * @since 3.0.0\n\t * @var int\n\t */\n\tpublic $blogid = 0;\n\n\t/**\n\t * Site ID.\n\t *\n\t * @since 3.0.0\n\t * @var int\n\t */\n\tpublic $siteid = 0;\n\n\t/**\n\t * List of WordPress per-blog tables\n\t *\n\t * @since 2.5.0\n\t * @see wpdb::tables()\n\t * @var array\n\t */\n\tvar $tables = array( 'posts', 'comments', 'links', 'options', 'postmeta',\n\t\t'terms', 'term_taxonomy', 'term_relationships', 'termmeta', 'commentmeta' );\n\n\t/**\n\t * List of deprecated WordPress tables\n\t *\n\t * categories, post2cat, and link2cat were deprecated in 2.3.0, db version 5539\n\t *\n\t * @since 2.9.0\n\t * @see wpdb::tables()\n\t * @var array\n\t */\n\tvar $old_tables = array( 'categories', 'post2cat', 'link2cat' );\n\n\t/**\n\t * List of WordPress global tables\n\t *\n\t * @since 3.0.0\n\t * @see wpdb::tables()\n\t * @var array\n\t */\n\tvar $global_tables = array( 'users', 'usermeta' );\n\n\t/**\n\t * List of Multisite global tables\n\t *\n\t * @since 3.0.0\n\t * @see wpdb::tables()\n\t * @var array\n\t */\n\tvar $ms_global_tables = array( 'blogs', 'signups', 'site', 'sitemeta',\n\t\t'sitecategories', 'registration_log', 'blog_versions' );\n\n\t/**\n\t * WordPress Comments table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $comments;\n\n\t/**\n\t * WordPress Comment Metadata table\n\t *\n\t * @since 2.9.0\n\t * @var string\n\t */\n\tpublic $commentmeta;\n\n\t/**\n\t * WordPress Links table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $links;\n\n\t/**\n\t * WordPress Options table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $options;\n\n\t/**\n\t * WordPress Post Metadata table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $postmeta;\n\n\t/**\n\t * WordPress Posts table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $posts;\n\n\t/**\n\t * WordPress Terms table\n\t *\n\t * @since 2.3.0\n\t * @var string\n\t */\n\tpublic $terms;\n\n\t/**\n\t * WordPress Term Relationships table\n\t *\n\t * @since 2.3.0\n\t * @var string\n\t */\n\tpublic $term_relationships;\n\n\t/**\n\t * WordPress Term Taxonomy table\n\t *\n\t * @since 2.3.0\n\t * @var string\n\t */\n\tpublic $term_taxonomy;\n\n\t/**\n\t * WordPress Term Meta table.\n\t *\n\t * @since 4.4.0\n\t * @var string\n\t */\n\tpublic $termmeta;\n\n\t//\n\t// Global and Multisite tables\n\t//\n\n\t/**\n\t * WordPress User Metadata table\n\t *\n\t * @since 2.3.0\n\t * @var string\n\t */\n\tpublic $usermeta;\n\n\t/**\n\t * WordPress Users table\n\t *\n\t * @since 1.5.0\n\t * @var string\n\t */\n\tpublic $users;\n\n\t/**\n\t * Multisite Blogs table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $blogs;\n\n\t/**\n\t * Multisite Blog Versions table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $blog_versions;\n\n\t/**\n\t * Multisite Registration Log table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $registration_log;\n\n\t/**\n\t * Multisite Signups table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $signups;\n\n\t/**\n\t * Multisite Sites table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $site;\n\n\t/**\n\t * Multisite Sitewide Terms table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $sitecategories;\n\n\t/**\n\t * Multisite Site Metadata table\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $sitemeta;\n\n\t/**\n\t * Format specifiers for DB columns. Columns not listed here default to %s. Initialized during WP load.\n\t *\n\t * Keys are column names, values are format types: 'ID' => '%d'\n\t *\n\t * @since 2.8.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::insert()\n\t * @see wpdb::update()\n\t * @see wpdb::delete()\n\t * @see wp_set_wpdb_vars()\n\t * @var array\n\t */\n\tpublic $field_types = array();\n\n\t/**\n\t * Database table columns charset\n\t *\n\t * @since 2.2.0\n\t * @var string\n\t */\n\tpublic $charset;\n\n\t/**\n\t * Database table columns collate\n\t *\n\t * @since 2.2.0\n\t * @var string\n\t */\n\tpublic $collate;\n\n\t/**\n\t * Database Username\n\t *\n\t * @since 2.9.0\n\t * @var string\n\t */\n\tprotected $dbuser;\n\n\t/**\n\t * Database Password\n\t *\n\t * @since 3.1.0\n\t * @var string\n\t */\n\tprotected $dbpassword;\n\n\t/**\n\t * Database Name\n\t *\n\t * @since 3.1.0\n\t * @var string\n\t */\n\tprotected $dbname;\n\n\t/**\n\t * Database Host\n\t *\n\t * @since 3.1.0\n\t * @var string\n\t */\n\tprotected $dbhost;\n\n\t/**\n\t * Database Handle\n\t *\n\t * @since 0.71\n\t * @var string\n\t */\n\tprotected $dbh;\n\n\t/**\n\t * A textual description of the last query/get_row/get_var call\n\t *\n\t * @since 3.0.0\n\t * @var string\n\t */\n\tpublic $func_call;\n\n\t/**\n\t * Whether MySQL is used as the database engine.\n\t *\n\t * Set in WPDB::db_connect() to true, by default. This is used when checking\n\t * against the required MySQL version for WordPress. Normally, a replacement\n\t * database drop-in (db.php) will skip these checks, but setting this to true\n\t * will force the checks to occur.\n\t *\n\t * @since 3.3.0\n\t * @var bool\n\t */\n\tpublic $is_mysql = null;\n\n\t/**\n\t * A list of incompatible SQL modes.\n\t *\n\t * @since 3.9.0\n\t * @var array\n\t */\n\tprotected $incompatible_modes = array( 'NO_ZERO_DATE', 'ONLY_FULL_GROUP_BY',\n\t\t'STRICT_TRANS_TABLES', 'STRICT_ALL_TABLES', 'TRADITIONAL' );\n\n\t/**\n\t * Whether to use mysqli over mysql.\n\t *\n\t * @since 3.9.0\n\t * @var bool\n\t */\n\tprivate $use_mysqli = false;\n\n\t/**\n\t * Whether we've managed to successfully connect at some point\n\t *\n\t * @since 3.9.0\n\t * @var bool\n\t */\n\tprivate $has_connected = false;\n\n\t/**\n\t * Connects to the database server and selects a database\n\t *\n\t * PHP5 style constructor for compatibility with PHP5. Does\n\t * the actual setting up of the class properties and connection\n\t * to the database.\n\t *\n\t * @link https://core.trac.wordpress.org/ticket/3354\n\t * @since 2.0.8\n\t *\n\t * @global string $wp_version\n\t *\n\t * @param string $dbuser     MySQL database user\n\t * @param string $dbpassword MySQL database password\n\t * @param string $dbname     MySQL database name\n\t * @param string $dbhost     MySQL database host\n\t */\n\tpublic function __construct( $dbuser, $dbpassword, $dbname, $dbhost ) {\n\t\tregister_shutdown_function( array( $this, '__destruct' ) );\n\n\t\tif ( WP_DEBUG && WP_DEBUG_DISPLAY )\n\t\t\t$this->show_errors();\n\n\t\t/* Use ext/mysqli if it exists and:\n\t\t *  - WP_USE_EXT_MYSQL is defined as false, or\n\t\t *  - We are a development version of WordPress, or\n\t\t *  - We are running PHP 5.5 or greater, or\n\t\t *  - ext/mysql is not loaded.\n\t\t */\n\t\tif ( function_exists( 'mysqli_connect' ) ) {\n\t\t\tif ( defined( 'WP_USE_EXT_MYSQL' ) ) {\n\t\t\t\t$this->use_mysqli = ! WP_USE_EXT_MYSQL;\n\t\t\t} elseif ( version_compare( phpversion(), '5.5', '>=' ) || ! function_exists( 'mysql_connect' ) ) {\n\t\t\t\t$this->use_mysqli = true;\n\t\t\t} elseif ( false !== strpos( $GLOBALS['wp_version'], '-' ) ) {\n\t\t\t\t$this->use_mysqli = true;\n\t\t\t}\n\t\t}\n\n\t\t$this->dbuser = $dbuser;\n\t\t$this->dbpassword = $dbpassword;\n\t\t$this->dbname = $dbname;\n\t\t$this->dbhost = $dbhost;\n\n\t\t// wp-config.php creation will manually connect when ready.\n\t\tif ( defined( 'WP_SETUP_CONFIG' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->db_connect();\n\t}\n\n\t/**\n\t * PHP5 style destructor and will run when database object is destroyed.\n\t *\n\t * @see wpdb::__construct()\n\t * @since 2.0.8\n\t * @return true\n\t */\n\tpublic function __destruct() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Makes private properties readable for backward compatibility.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param string $name The private member to get, and optionally process\n\t * @return mixed The private member\n\t */\n\tpublic function __get( $name ) {\n\t\tif ( 'col_info' === $name )\n\t\t\t$this->load_col_info();\n\n\t\treturn $this->$name;\n\t}\n\n\t/**\n\t * Makes private properties settable for backward compatibility.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param string $name  The private member to set\n\t * @param mixed  $value The value to set\n\t */\n\tpublic function __set( $name, $value ) {\n\t\t$protected_members = array(\n\t\t\t'col_meta',\n\t\t\t'table_charset',\n\t\t\t'check_current_query',\n\t\t);\n\t\tif (  in_array( $name, $protected_members, true ) ) {\n\t\t\treturn;\n\t\t}\n\t\t$this->$name = $value;\n\t}\n\n\t/**\n\t * Makes private properties check-able for backward compatibility.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param string $name  The private member to check\n\t *\n\t * @return bool If the member is set or not\n\t */\n\tpublic function __isset( $name ) {\n\t\treturn isset( $this->$name );\n\t}\n\n\t/**\n\t * Makes private properties un-settable for backward compatibility.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param string $name  The private member to unset\n\t */\n\tpublic function __unset( $name ) {\n\t\tunset( $this->$name );\n\t}\n\n\t/**\n\t * Set $this->charset and $this->collate\n\t *\n\t * @since 3.1.0\n\t */\n\tpublic function init_charset() {\n\t\t$charset = '';\n\t\t$collate = '';\n\n\t\tif ( function_exists('is_multisite') && is_multisite() ) {\n\t\t\t$charset = 'utf8';\n\t\t\tif ( defined( 'DB_COLLATE' ) && DB_COLLATE ) {\n\t\t\t\t$collate = DB_COLLATE;\n\t\t\t} else {\n\t\t\t\t$collate = 'utf8_general_ci';\n\t\t\t}\n\t\t} elseif ( defined( 'DB_COLLATE' ) ) {\n\t\t\t$collate = DB_COLLATE;\n\t\t}\n\n\t\tif ( defined( 'DB_CHARSET' ) ) {\n\t\t\t$charset = DB_CHARSET;\n\t\t}\n\n\t\t$charset_collate = $this->determine_charset( $charset, $collate );\n\n\t\t$this->charset = $charset_collate['charset'];\n\t\t$this->collate = $charset_collate['collate'];\n\t}\n\n\t/**\n\t * Determines the best charset and collation to use given a charset and collation.\n\t *\n\t * For example, when able, utf8mb4 should be used instead of utf8.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param string $charset The character set to check.\n\t * @param string $collate The collation to check.\n\t * @return array The most appropriate character set and collation to use.\n\t */\n\tpublic function determine_charset( $charset, $collate ) {\n\t\tif ( ( $this->use_mysqli && ! ( $this->dbh instanceof mysqli ) ) || empty( $this->dbh ) ) {\n\t\t\treturn compact( 'charset', 'collate' );\n\t\t}\n\n\t\tif ( 'utf8' === $charset && $this->has_cap( 'utf8mb4' ) ) {\n\t\t\t$charset = 'utf8mb4';\n\t\t}\n\n\t\tif ( 'utf8mb4' === $charset && ! $this->has_cap( 'utf8mb4' ) ) {\n\t\t\t$charset = 'utf8';\n\t\t\t$collate = str_replace( 'utf8mb4_', 'utf8_', $collate );\n\t\t}\n\n\t\tif ( 'utf8mb4' === $charset ) {\n\t\t\t// _general_ is outdated, so we can upgrade it to _unicode_, instead.\n\t\t\tif ( ! $collate || 'utf8_general_ci' === $collate ) {\n\t\t\t\t$collate = 'utf8mb4_unicode_ci';\n\t\t\t} else {\n\t\t\t\t$collate = str_replace( 'utf8_', 'utf8mb4_', $collate );\n\t\t\t}\n\t\t}\n\n\t\t// _unicode_520_ is a better collation, we should use that when it's available.\n\t\tif ( $this->has_cap( 'utf8mb4_520' ) && 'utf8mb4_unicode_ci' === $collate ) {\n\t\t\t$collate = 'utf8mb4_unicode_520_ci';\n\t\t}\n\n\t\treturn compact( 'charset', 'collate' );\n\t}\n\n\t/**\n\t * Sets the connection's character set.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param resource $dbh     The resource given by mysql_connect\n\t * @param string   $charset Optional. The character set. Default null.\n\t * @param string   $collate Optional. The collation. Default null.\n\t */\n\tpublic function set_charset( $dbh, $charset = null, $collate = null ) {\n\t\tif ( ! isset( $charset ) )\n\t\t\t$charset = $this->charset;\n\t\tif ( ! isset( $collate ) )\n\t\t\t$collate = $this->collate;\n\t\tif ( $this->has_cap( 'collation' ) && ! empty( $charset ) ) {\n\t\t\t$set_charset_succeeded = true;\n\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\tif ( function_exists( 'mysqli_set_charset' ) && $this->has_cap( 'set_charset' ) ) {\n\t\t\t\t\t$set_charset_succeeded = mysqli_set_charset( $dbh, $charset );\n\t\t\t\t}\n\n\t\t\t\tif ( $set_charset_succeeded ) {\n\t\t\t\t\t$query = $this->prepare( 'SET NAMES %s', $charset );\n\t\t\t\t\tif ( ! empty( $collate ) )\n\t\t\t\t\t\t$query .= $this->prepare( ' COLLATE %s', $collate );\n\t\t\t\t\tmysqli_query( $dbh, $query );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( function_exists( 'mysql_set_charset' ) && $this->has_cap( 'set_charset' ) ) {\n\t\t\t\t\t$set_charset_succeeded = mysql_set_charset( $charset, $dbh );\n\t\t\t\t}\n\t\t\t\tif ( $set_charset_succeeded ) {\n\t\t\t\t\t$query = $this->prepare( 'SET NAMES %s', $charset );\n\t\t\t\t\tif ( ! empty( $collate ) )\n\t\t\t\t\t\t$query .= $this->prepare( ' COLLATE %s', $collate );\n\t\t\t\t\tmysql_query( $query, $dbh );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Change the current SQL mode, and ensure its WordPress compatibility.\n\t *\n\t * If no modes are passed, it will ensure the current MySQL server\n\t * modes are compatible.\n\t *\n\t * @since 3.9.0\n\t *\n\t * @param array $modes Optional. A list of SQL modes to set.\n\t */\n\tpublic function set_sql_mode( $modes = array() ) {\n\t\tif ( empty( $modes ) ) {\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t$res = mysqli_query( $this->dbh, 'SELECT @@SESSION.sql_mode' );\n\t\t\t} else {\n\t\t\t\t$res = mysql_query( 'SELECT @@SESSION.sql_mode', $this->dbh );\n\t\t\t}\n\n\t\t\tif ( empty( $res ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t$modes_array = mysqli_fetch_array( $res );\n\t\t\t\tif ( empty( $modes_array[0] ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t$modes_str = $modes_array[0];\n\t\t\t} else {\n\t\t\t\t$modes_str = mysql_result( $res, 0 );\n\t\t\t}\n\n\t\t\tif ( empty( $modes_str ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$modes = explode( ',', $modes_str );\n\t\t}\n\n\t\t$modes = array_change_key_case( $modes, CASE_UPPER );\n\n\t\t/**\n\t\t * Filters the list of incompatible SQL modes to exclude.\n\t\t *\n\t\t * @since 3.9.0\n\t\t *\n\t\t * @param array $incompatible_modes An array of incompatible modes.\n\t\t */\n\t\t$incompatible_modes = (array) apply_filters( 'incompatible_sql_modes', $this->incompatible_modes );\n\n\t\tforeach ( $modes as $i => $mode ) {\n\t\t\tif ( in_array( $mode, $incompatible_modes ) ) {\n\t\t\t\tunset( $modes[ $i ] );\n\t\t\t}\n\t\t}\n\n\t\t$modes_str = implode( ',', $modes );\n\n\t\tif ( $this->use_mysqli ) {\n\t\t\tmysqli_query( $this->dbh, \"SET SESSION sql_mode='$modes_str'\" );\n\t\t} else {\n\t\t\tmysql_query( \"SET SESSION sql_mode='$modes_str'\", $this->dbh );\n\t\t}\n\t}\n\n\t/**\n\t * Sets the table prefix for the WordPress tables.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $prefix          Alphanumeric name for the new prefix.\n\t * @param bool   $set_table_names Optional. Whether the table names, e.g. wpdb::$posts, should be updated or not.\n\t * @return string|WP_Error Old prefix or WP_Error on error\n\t */\n\tpublic function set_prefix( $prefix, $set_table_names = true ) {\n\n\t\tif ( preg_match( '|[^a-z0-9_]|i', $prefix ) )\n\t\t\treturn new WP_Error('invalid_db_prefix', 'Invalid database prefix' );\n\n\t\t$old_prefix = is_multisite() ? '' : $prefix;\n\n\t\tif ( isset( $this->base_prefix ) )\n\t\t\t$old_prefix = $this->base_prefix;\n\n\t\t$this->base_prefix = $prefix;\n\n\t\tif ( $set_table_names ) {\n\t\t\tforeach ( $this->tables( 'global' ) as $table => $prefixed_table )\n\t\t\t\t$this->$table = $prefixed_table;\n\n\t\t\tif ( is_multisite() && empty( $this->blogid ) )\n\t\t\t\treturn $old_prefix;\n\n\t\t\t$this->prefix = $this->get_blog_prefix();\n\n\t\t\tforeach ( $this->tables( 'blog' ) as $table => $prefixed_table )\n\t\t\t\t$this->$table = $prefixed_table;\n\n\t\t\tforeach ( $this->tables( 'old' ) as $table => $prefixed_table )\n\t\t\t\t$this->$table = $prefixed_table;\n\t\t}\n\t\treturn $old_prefix;\n\t}\n\n\t/**\n\t * Sets blog id.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param int $blog_id\n\t * @param int $network_id Optional.\n\t * @return int previous blog id\n\t */\n\tpublic function set_blog_id( $blog_id, $network_id = 0 ) {\n\t\tif ( ! empty( $network_id ) ) {\n\t\t\t$this->siteid = $network_id;\n\t\t}\n\n\t\t$old_blog_id  = $this->blogid;\n\t\t$this->blogid = $blog_id;\n\n\t\t$this->prefix = $this->get_blog_prefix();\n\n\t\tforeach ( $this->tables( 'blog' ) as $table => $prefixed_table )\n\t\t\t$this->$table = $prefixed_table;\n\n\t\tforeach ( $this->tables( 'old' ) as $table => $prefixed_table )\n\t\t\t$this->$table = $prefixed_table;\n\n\t\treturn $old_blog_id;\n\t}\n\n\t/**\n\t * Gets blog prefix.\n\t *\n\t * @since 3.0.0\n\t * @param int $blog_id Optional.\n\t * @return string Blog prefix.\n\t */\n\tpublic function get_blog_prefix( $blog_id = null ) {\n\t\tif ( is_multisite() ) {\n\t\t\tif ( null === $blog_id )\n\t\t\t\t$blog_id = $this->blogid;\n\t\t\t$blog_id = (int) $blog_id;\n\t\t\tif ( defined( 'MULTISITE' ) && ( 0 == $blog_id || 1 == $blog_id ) )\n\t\t\t\treturn $this->base_prefix;\n\t\t\telse\n\t\t\t\treturn $this->base_prefix . $blog_id . '_';\n\t\t} else {\n\t\t\treturn $this->base_prefix;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array of WordPress tables.\n\t *\n\t * Also allows for the CUSTOM_USER_TABLE and CUSTOM_USER_META_TABLE to\n\t * override the WordPress users and usermeta tables that would otherwise\n\t * be determined by the prefix.\n\t *\n\t * The scope argument can take one of the following:\n\t *\n\t * 'all' - returns 'all' and 'global' tables. No old tables are returned.\n\t * 'blog' - returns the blog-level tables for the queried blog.\n\t * 'global' - returns the global tables for the installation, returning multisite tables only if running multisite.\n\t * 'ms_global' - returns the multisite global tables, regardless if current installation is multisite.\n\t * 'old' - returns tables which are deprecated.\n\t *\n\t * @since 3.0.0\n\t * @uses wpdb::$tables\n\t * @uses wpdb::$old_tables\n\t * @uses wpdb::$global_tables\n\t * @uses wpdb::$ms_global_tables\n\t *\n\t * @param string $scope   Optional. Can be all, global, ms_global, blog, or old tables. Defaults to all.\n\t * @param bool   $prefix  Optional. Whether to include table prefixes. Default true. If blog\n\t *                        prefix is requested, then the custom users and usermeta tables will be mapped.\n\t * @param int    $blog_id Optional. The blog_id to prefix. Defaults to wpdb::$blogid. Used only when prefix is requested.\n\t * @return array Table names. When a prefix is requested, the key is the unprefixed table name.\n\t */\n\tpublic function tables( $scope = 'all', $prefix = true, $blog_id = 0 ) {\n\t\tswitch ( $scope ) {\n\t\t\tcase 'all' :\n\t\t\t\t$tables = array_merge( $this->global_tables, $this->tables );\n\t\t\t\tif ( is_multisite() )\n\t\t\t\t\t$tables = array_merge( $tables, $this->ms_global_tables );\n\t\t\t\tbreak;\n\t\t\tcase 'blog' :\n\t\t\t\t$tables = $this->tables;\n\t\t\t\tbreak;\n\t\t\tcase 'global' :\n\t\t\t\t$tables = $this->global_tables;\n\t\t\t\tif ( is_multisite() )\n\t\t\t\t\t$tables = array_merge( $tables, $this->ms_global_tables );\n\t\t\t\tbreak;\n\t\t\tcase 'ms_global' :\n\t\t\t\t$tables = $this->ms_global_tables;\n\t\t\t\tbreak;\n\t\t\tcase 'old' :\n\t\t\t\t$tables = $this->old_tables;\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\treturn array();\n\t\t}\n\n\t\tif ( $prefix ) {\n\t\t\tif ( ! $blog_id )\n\t\t\t\t$blog_id = $this->blogid;\n\t\t\t$blog_prefix = $this->get_blog_prefix( $blog_id );\n\t\t\t$base_prefix = $this->base_prefix;\n\t\t\t$global_tables = array_merge( $this->global_tables, $this->ms_global_tables );\n\t\t\tforeach ( $tables as $k => $table ) {\n\t\t\t\tif ( in_array( $table, $global_tables ) )\n\t\t\t\t\t$tables[ $table ] = $base_prefix . $table;\n\t\t\t\telse\n\t\t\t\t\t$tables[ $table ] = $blog_prefix . $table;\n\t\t\t\tunset( $tables[ $k ] );\n\t\t\t}\n\n\t\t\tif ( isset( $tables['users'] ) && defined( 'CUSTOM_USER_TABLE' ) )\n\t\t\t\t$tables['users'] = CUSTOM_USER_TABLE;\n\n\t\t\tif ( isset( $tables['usermeta'] ) && defined( 'CUSTOM_USER_META_TABLE' ) )\n\t\t\t\t$tables['usermeta'] = CUSTOM_USER_META_TABLE;\n\t\t}\n\n\t\treturn $tables;\n\t}\n\n\t/**\n\t * Selects a database using the current database connection.\n\t *\n\t * The database name will be changed based on the current database\n\t * connection. On failure, the execution will bail and display an DB error.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string        $db  MySQL database name\n\t * @param resource|null $dbh Optional link identifier.\n\t */\n\tpublic function select( $db, $dbh = null ) {\n\t\tif ( is_null($dbh) )\n\t\t\t$dbh = $this->dbh;\n\n\t\tif ( $this->use_mysqli ) {\n\t\t\t$success = mysqli_select_db( $dbh, $db );\n\t\t} else {\n\t\t\t$success = mysql_select_db( $db, $dbh );\n\t\t}\n\t\tif ( ! $success ) {\n\t\t\t$this->ready = false;\n\t\t\tif ( ! did_action( 'template_redirect' ) ) {\n\t\t\t\twp_load_translations_early();\n\n\t\t\t\t$message = '<h1>' . __( 'Can&#8217;t select database' ) . \"</h1>\\n\";\n\n\t\t\t\t$message .= '<p>' . sprintf(\n\t\t\t\t\t/* translators: %s: database name */\n\t\t\t\t\t__( 'We were able to connect to the database server (which means your username and password is okay) but not able to select the %s database.' ),\n\t\t\t\t\t'<code>' . htmlspecialchars( $db, ENT_QUOTES ) . '</code>'\n\t\t\t\t) . \"</p>\\n\";\n\n\t\t\t\t$message .= \"<ul>\\n\";\n\t\t\t\t$message .= '<li>' . __( 'Are you sure it exists?' ) . \"</li>\\n\";\n\n\t\t\t\t$message .= '<li>' . sprintf(\n\t\t\t\t\t/* translators: 1: database user, 2: database name */\n\t\t\t\t\t__( 'Does the user %1$s have permission to use the %2$s database?' ),\n\t\t\t\t\t'<code>' . htmlspecialchars( $this->dbuser, ENT_QUOTES )  . '</code>',\n\t\t\t\t\t'<code>' . htmlspecialchars( $db, ENT_QUOTES ) . '</code>'\n\t\t\t\t) . \"</li>\\n\";\n\n\t\t\t\t$message .= '<li>' . sprintf(\n\t\t\t\t\t/* translators: %s: database name */\n\t\t\t\t\t__( 'On some systems the name of your database is prefixed with your username, so it would be like <code>username_%1$s</code>. Could that be the problem?' ),\n\t\t\t\t\thtmlspecialchars( $db, ENT_QUOTES )\n\t\t\t\t). \"</li>\\n\";\n\n\t\t\t\t$message .= \"</ul>\\n\";\n\n\t\t\t\t$message .= '<p>' . sprintf(\n\t\t\t\t\t/* translators: %s: support forums URL */\n\t\t\t\t\t__( 'If you don&#8217;t know how to set up a database you should <strong>contact your host</strong>. If all else fails you may find help at the <a href=\"%s\">WordPress Support Forums</a>.' ),\n\t\t\t\t\t__( 'https://wordpress.org/support/' )\n\t\t\t\t) . \"</p>\\n\";\n\n\t\t\t\t$this->bail( $message, 'db_select_fail' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Do not use, deprecated.\n\t *\n\t * Use esc_sql() or wpdb::prepare() instead.\n\t *\n\t * @since 2.8.0\n\t * @deprecated 3.6.0 Use wpdb::prepare()\n\t * @see wpdb::prepare\n\t * @see esc_sql()\n\t *\n\t * @param string $string\n\t * @return string\n\t */\n\tfunction _weak_escape( $string ) {\n\t\tif ( func_num_args() === 1 && function_exists( '_deprecated_function' ) )\n\t\t\t_deprecated_function( __METHOD__, '3.6.0', 'wpdb::prepare() or esc_sql()' );\n\t\treturn addslashes( $string );\n\t}\n\n\t/**\n\t * Real escape, using mysqli_real_escape_string() or mysql_real_escape_string()\n\t *\n\t * @see mysqli_real_escape_string()\n\t * @see mysql_real_escape_string()\n\t * @since 2.8.0\n\t *\n\t * @param  string $string to escape\n\t * @return string escaped\n\t */\n\tfunction _real_escape( $string ) {\n\t\tif ( $this->dbh ) {\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t$escaped = mysqli_real_escape_string( $this->dbh, $string );\n\t\t\t} else {\n\t\t\t\t$escaped = mysql_real_escape_string( $string, $this->dbh );\n\t\t\t}\n\t\t} else {\n\t\t\t$class = get_class( $this );\n\t\t\tif ( function_exists( '__' ) ) {\n\t\t\t\t/* translators: %s: database access abstraction class, usually wpdb or a class extending wpdb */\n\t\t\t\t_doing_it_wrong( $class, sprintf( __( '%s must set a database connection for use with escaping.' ), $class ), '3.6.0' );\n\t\t\t} else {\n\t\t\t\t_doing_it_wrong( $class, sprintf( '%s must set a database connection for use with escaping.', $class ), '3.6.0' );\n\t\t\t}\n\t\t\t$escaped = addslashes( $string );\n\t\t}\n\n\t\treturn $this->add_placeholder_escape( $escaped );\n\t}\n\n\t/**\n\t * Escape data. Works on arrays.\n\t *\n\t * @uses wpdb::_real_escape()\n\t * @since  2.8.0\n\t *\n\t * @param  string|array $data\n\t * @return string|array escaped\n\t */\n\tpublic function _escape( $data ) {\n\t\tif ( is_array( $data ) ) {\n\t\t\tforeach ( $data as $k => $v ) {\n\t\t\t\tif ( is_array( $v ) ) {\n\t\t\t\t\t$data[$k] = $this->_escape( $v );\n\t\t\t\t} else {\n\t\t\t\t\t$data[$k] = $this->_real_escape( $v );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$data = $this->_real_escape( $data );\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Do not use, deprecated.\n\t *\n\t * Use esc_sql() or wpdb::prepare() instead.\n\t *\n\t * @since 0.71\n\t * @deprecated 3.6.0 Use wpdb::prepare()\n\t * @see wpdb::prepare()\n\t * @see esc_sql()\n\t *\n\t * @param mixed $data\n\t * @return mixed\n\t */\n\tpublic function escape( $data ) {\n\t\tif ( func_num_args() === 1 && function_exists( '_deprecated_function' ) )\n\t\t\t_deprecated_function( __METHOD__, '3.6.0', 'wpdb::prepare() or esc_sql()' );\n\t\tif ( is_array( $data ) ) {\n\t\t\tforeach ( $data as $k => $v ) {\n\t\t\t\tif ( is_array( $v ) )\n\t\t\t\t\t$data[$k] = $this->escape( $v, 'recursive' );\n\t\t\t\telse\n\t\t\t\t\t$data[$k] = $this->_weak_escape( $v, 'internal' );\n\t\t\t}\n\t\t} else {\n\t\t\t$data = $this->_weak_escape( $data, 'internal' );\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Escapes content by reference for insertion into the database, for security\n\t *\n\t * @uses wpdb::_real_escape()\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $string to escape\n\t */\n\tpublic function escape_by_ref( &$string ) {\n\t\tif ( ! is_float( $string ) )\n\t\t\t$string = $this->_real_escape( $string );\n\t}\n\n\t/**\n\t * Prepares a SQL query for safe execution. Uses sprintf()-like syntax.\n\t *\n\t * The following placeholders can be used in the query string:\n\t *   %d (integer)\n\t *   %f (float)\n\t *   %s (string)\n\t *\n\t * All placeholders MUST be left unquoted in the query string. A corresponding argument MUST be passed for each placeholder.\n\t *\n\t * For compatibility with old behavior, numbered or formatted string placeholders (eg, %1$s, %5s) will not have quotes\n\t * added by this function, so should be passed with appropriate quotes around them for your usage.\n\t *\n\t * Literal percentage signs (%) in the query string must be written as %%. Percentage wildcards (for example,\n\t * to use in LIKE syntax) must be passed via a substitution argument containing the complete LIKE string, these\n\t * cannot be inserted directly in the query string. Also see {@see esc_like()}.\n\t *\n\t * Arguments may be passed as individual arguments to the method, or as a single array containing all arguments. A combination\n\t * of the two is not supported.\n\t *\n\t * Examples:\n\t *     $wpdb->prepare( \"SELECT * FROM `table` WHERE `column` = %s AND `field` = %d OR `other_field` LIKE %s\", array( 'foo', 1337, '%bar' ) );\n\t *     $wpdb->prepare( \"SELECT DATE_FORMAT(`field`, '%%c') FROM `table` WHERE `column` = %s\", 'foo' );\n\t *\n\t * @link https://secure.php.net/sprintf Description of syntax.\n\t * @since 2.3.0\n\t *\n\t * @param string      $query    Query statement with sprintf()-like placeholders\n\t * @param array|mixed $args     The array of variables to substitute into the query's placeholders if being called with an array of arguments,\n\t *                              or the first variable to substitute into the query's placeholders if being called with individual arguments.\n\t * @param mixed       $args,... further variables to substitute into the query's placeholders if being called wih individual arguments.\n\t * @return string|void Sanitized query string, if there is a query to prepare.\n\t */\n\tpublic function prepare( $query, $args ) {\n\t\tif ( is_null( $query ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// This is not meant to be foolproof -- but it will catch obviously incorrect usage.\n\t\tif ( strpos( $query, '%' ) === false ) {\n\t\t\twp_load_translations_early();\n\t\t\t_doing_it_wrong( 'wpdb::prepare', sprintf( __( 'The query argument of %s must have a placeholder.' ), 'wpdb::prepare()' ), '3.9.0' );\n\t\t}\n\n\t\t$args = func_get_args();\n\t\tarray_shift( $args );\n\n\t\t// If args were passed as an array (as in vsprintf), move them up.\n\t\t$passed_as_array = false;\n\t\tif ( is_array( $args[0] ) && count( $args ) == 1 ) {\n\t\t\t$passed_as_array = true;\n\t\t\t$args = $args[0];\n\t\t}\n\n\t\tforeach ( $args as $arg ) {\n\t\t\tif ( ! is_scalar( $arg ) && ! is_null( $arg ) ) {\n\t\t\t\twp_load_translations_early();\n\t\t\t\t_doing_it_wrong( 'wpdb::prepare', sprintf( __( 'Unsupported value type (%s).' ), gettype( $arg ) ), '4.8.2' );\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Specify the formatting allowed in a placeholder. The following are allowed:\n\t\t *\n\t\t * - Sign specifier. eg, $+d\n\t\t * - Numbered placeholders. eg, %1$s\n\t\t * - Padding specifier, including custom padding characters. eg, %05s, %'#5s\n\t\t * - Alignment specifier. eg, %05-s\n\t\t * - Precision specifier. eg, %.2f\n\t\t */\n\t\t$allowed_format = '(?:[1-9][0-9]*[$])?[-+0-9]*(?: |0|\\'.)?[-+0-9]*(?:\\.[0-9]+)?';\n\n\t\t/*\n\t\t * If a %s placeholder already has quotes around it, removing the existing quotes and re-inserting them\n\t\t * ensures the quotes are consistent.\n\t\t *\n\t\t * For backwards compatibility, this is only applied to %s, and not to placeholders like %1$s, which are frequently\n\t\t * used in the middle of longer strings, or as table name placeholders.\n\t\t */\n\t\t$query = str_replace( \"'%s'\", '%s', $query ); // Strip any existing single quotes.\n\t\t$query = str_replace( '\"%s\"', '%s', $query ); // Strip any existing double quotes.\n\t\t$query = preg_replace( '/(?<!%)%s/', \"'%s'\", $query ); // Quote the strings, avoiding escaped strings like %%s.\n\n\t\t$query = preg_replace( \"/(?<!%)(%($allowed_format)?f)/\" , '%\\\\2F', $query ); // Force floats to be locale unaware.\n\n\t\t$query = preg_replace( \"/%(?:%|$|(?!($allowed_format)?[sdF]))/\", '%%\\\\1', $query ); // Escape any unescaped percents.\n\n\t\t// Count the number of valid placeholders in the query.\n\t\t$placeholders = preg_match_all( \"/(^|[^%]|(%%)+)%($allowed_format)?[sdF]/\", $query, $matches );\n\n\t\tif ( count( $args ) !== $placeholders ) {\n\t\t\tif ( 1 === $placeholders && $passed_as_array ) {\n\t\t\t\t// If the passed query only expected one argument, but the wrong number of arguments were sent as an array, bail.\n\t\t\t\twp_load_translations_early();\n\t\t\t\t_doing_it_wrong( 'wpdb::prepare', __( 'The query only expected one placeholder, but an array of multiple placeholders was sent.' ), '4.9.0' );\n\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * If we don't have the right number of placeholders, but they were passed as individual arguments,\n\t\t\t\t * or we were expecting multiple arguments in an array, throw a warning.\n\t\t\t\t */\n\t\t\t\twp_load_translations_early();\n\t\t\t\t_doing_it_wrong( 'wpdb::prepare',\n\t\t\t\t\t/* translators: 1: number of placeholders, 2: number of arguments passed */\n\t\t\t\t\tsprintf( __( 'The query does not contain the correct number of placeholders (%1$d) for the number of arguments passed (%2$d).' ),\n\t\t\t\t\t\t$placeholders,\n\t\t\t\t\t\tcount( $args ) ),\n\t\t\t\t\t'4.8.3'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tarray_walk( $args, array( $this, 'escape_by_ref' ) );\n\t\t$query = @vsprintf( $query, $args );\n\n\t\treturn $this->add_placeholder_escape( $query );\n\t}\n\n\t/**\n\t * First half of escaping for LIKE special characters % and _ before preparing for MySQL.\n\t *\n\t * Use this only before wpdb::prepare() or esc_sql().  Reversing the order is very bad for security.\n\t *\n\t * Example Prepared Statement:\n\t *\n\t *     $wild = '%';\n\t *     $find = 'only 43% of planets';\n\t *     $like = $wild . $wpdb->esc_like( $find ) . $wild;\n\t *     $sql  = $wpdb->prepare( \"SELECT * FROM $wpdb->posts WHERE post_content LIKE %s\", $like );\n\t *\n\t * Example Escape Chain:\n\t *\n\t *     $sql  = esc_sql( $wpdb->esc_like( $input ) );\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param string $text The raw text to be escaped. The input typed by the user should have no\n\t *                     extra or deleted slashes.\n\t * @return string Text in the form of a LIKE phrase. The output is not SQL safe. Call $wpdb::prepare()\n\t *                or real_escape next.\n\t */\n\tpublic function esc_like( $text ) {\n\t\treturn addcslashes( $text, '_%\\\\' );\n\t}\n\n\t/**\n\t * Print SQL/DB error.\n\t *\n\t * @since 0.71\n\t * @global array $EZSQL_ERROR Stores error information of query and error string\n\t *\n\t * @param string $str The error to display\n\t * @return false|void False if the showing of errors is disabled.\n\t */\n\tpublic function print_error( $str = '' ) {\n\t\tglobal $EZSQL_ERROR;\n\n\t\tif ( !$str ) {\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t$str = mysqli_error( $this->dbh );\n\t\t\t} else {\n\t\t\t\t$str = mysql_error( $this->dbh );\n\t\t\t}\n\t\t}\n\t\t$EZSQL_ERROR[] = array( 'query' => $this->last_query, 'error_str' => $str );\n\n\t\tif ( $this->suppress_errors )\n\t\t\treturn false;\n\n\t\twp_load_translations_early();\n\n\t\tif ( $caller = $this->get_caller() ) {\n\t\t\t/* translators: 1: Database error message, 2: SQL query, 3: Name of the calling function */\n\t\t\t$error_str = sprintf( __( 'WordPress database error %1$s for query %2$s made by %3$s' ), $str, $this->last_query, $caller );\n\t\t} else {\n\t\t\t/* translators: 1: Database error message, 2: SQL query */\n\t\t\t$error_str = sprintf( __( 'WordPress database error %1$s for query %2$s' ), $str, $this->last_query );\n\t\t}\n\n\t\terror_log( $error_str );\n\n\t\t// Are we showing errors?\n\t\tif ( ! $this->show_errors )\n\t\t\treturn false;\n\n\t\t// If there is an error then take note of it\n\t\tif ( is_multisite() ) {\n\t\t\t$msg = sprintf(\n\t\t\t\t\"%s [%s]\\n%s\\n\",\n\t\t\t\t__( 'WordPress database error:' ),\n\t\t\t\t$str,\n\t\t\t\t$this->last_query\n\t\t\t);\n\n\t\t\tif ( defined( 'ERRORLOGFILE' ) ) {\n\t\t\t\terror_log( $msg, 3, ERRORLOGFILE );\n\t\t\t}\n\t\t\tif ( defined( 'DIEONDBERROR' ) ) {\n\t\t\t\twp_die( $msg );\n\t\t\t}\n\t\t} else {\n\t\t\t$str   = htmlspecialchars( $str, ENT_QUOTES );\n\t\t\t$query = htmlspecialchars( $this->last_query, ENT_QUOTES );\n\n\t\t\tprintf(\n\t\t\t\t'<div id=\"error\"><p class=\"wpdberror\"><strong>%s</strong> [%s]<br /><code>%s</code></p></div>',\n\t\t\t\t__( 'WordPress database error:' ),\n\t\t\t\t$str,\n\t\t\t\t$query\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Enables showing of database errors.\n\t *\n\t * This function should be used only to enable showing of errors.\n\t * wpdb::hide_errors() should be used instead for hiding of errors. However,\n\t * this function can be used to enable and disable showing of database\n\t * errors.\n\t *\n\t * @since 0.71\n\t * @see wpdb::hide_errors()\n\t *\n\t * @param bool $show Whether to show or hide errors\n\t * @return bool Old value for showing errors.\n\t */\n\tpublic function show_errors( $show = true ) {\n\t\t$errors = $this->show_errors;\n\t\t$this->show_errors = $show;\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * Disables showing of database errors.\n\t *\n\t * By default database errors are not shown.\n\t *\n\t * @since 0.71\n\t * @see wpdb::show_errors()\n\t *\n\t * @return bool Whether showing of errors was active\n\t */\n\tpublic function hide_errors() {\n\t\t$show = $this->show_errors;\n\t\t$this->show_errors = false;\n\t\treturn $show;\n\t}\n\n\t/**\n\t * Whether to suppress database errors.\n\t *\n\t * By default database errors are suppressed, with a simple\n\t * call to this function they can be enabled.\n\t *\n\t * @since 2.5.0\n\t * @see wpdb::hide_errors()\n\t * @param bool $suppress Optional. New value. Defaults to true.\n\t * @return bool Old value\n\t */\n\tpublic function suppress_errors( $suppress = true ) {\n\t\t$errors = $this->suppress_errors;\n\t\t$this->suppress_errors = (bool) $suppress;\n\t\treturn $errors;\n\t}\n\n\t/**\n\t * Kill cached query results.\n\t *\n\t * @since 0.71\n\t */\n\tpublic function flush() {\n\t\t$this->last_result = array();\n\t\t$this->col_info    = null;\n\t\t$this->last_query  = null;\n\t\t$this->rows_affected = $this->num_rows = 0;\n\t\t$this->last_error  = '';\n\n\t\tif ( $this->use_mysqli && $this->result instanceof mysqli_result ) {\n\t\t\tmysqli_free_result( $this->result );\n\t\t\t$this->result = null;\n\n\t\t\t// Sanity check before using the handle\n\t\t\tif ( empty( $this->dbh ) || !( $this->dbh instanceof mysqli ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Clear out any results from a multi-query\n\t\t\twhile ( mysqli_more_results( $this->dbh ) ) {\n\t\t\t\tmysqli_next_result( $this->dbh );\n\t\t\t}\n\t\t} elseif ( is_resource( $this->result ) ) {\n\t\t\tmysql_free_result( $this->result );\n\t\t}\n\t}\n\n\t/**\n\t * Connect to and select database.\n\t *\n\t * If $allow_bail is false, the lack of database connection will need\n\t * to be handled manually.\n\t *\n\t * @since 3.0.0\n\t * @since 3.9.0 $allow_bail parameter added.\n\t *\n\t * @param bool $allow_bail Optional. Allows the function to bail. Default true.\n\t * @return bool True with a successful connection, false on failure.\n\t */\n\tpublic function db_connect( $allow_bail = true ) {\n\t\t$this->is_mysql = true;\n\n\t\t/*\n\t\t * Deprecated in 3.9+ when using MySQLi. No equivalent\n\t\t * $new_link parameter exists for mysqli_* functions.\n\t\t */\n\t\t$new_link = defined( 'MYSQL_NEW_LINK' ) ? MYSQL_NEW_LINK : true;\n\t\t$client_flags = defined( 'MYSQL_CLIENT_FLAGS' ) ? MYSQL_CLIENT_FLAGS : 0;\n\n\t\tif ( $this->use_mysqli ) {\n\t\t\t$this->dbh = mysqli_init();\n\n\t\t\t$host    = $this->dbhost;\n\t\t\t$port    = null;\n\t\t\t$socket  = null;\n\t\t\t$is_ipv6 = false;\n\n\t\t\tif ( $host_data = $this->parse_db_host( $this->dbhost ) ) {\n\t\t\t\tlist( $host, $port, $socket, $is_ipv6 ) = $host_data;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * If using the `mysqlnd` library, the IPv6 address needs to be\n\t\t\t * enclosed in square brackets, whereas it doesn't while using the\n\t\t\t * `libmysqlclient` library.\n\t\t\t * @see https://bugs.php.net/bug.php?id=67563\n\t\t\t */\n\t\t\tif ( $is_ipv6 && extension_loaded( 'mysqlnd' ) ) {\n\t\t\t\t$host = \"[$host]\";\n\t\t\t}\n\n\t\t\tif ( WP_DEBUG ) {\n\t\t\t\tmysqli_real_connect( $this->dbh, $host, $this->dbuser, $this->dbpassword, null, $port, $socket, $client_flags );\n\t\t\t} else {\n\t\t\t\t@mysqli_real_connect( $this->dbh, $host, $this->dbuser, $this->dbpassword, null, $port, $socket, $client_flags );\n\t\t\t}\n\n\t\t\tif ( $this->dbh->connect_errno ) {\n\t\t\t\t$this->dbh = null;\n\n\t\t\t\t/*\n\t\t\t\t * It's possible ext/mysqli is misconfigured. Fall back to ext/mysql if:\n\t\t \t\t *  - We haven't previously connected, and\n\t\t \t\t *  - WP_USE_EXT_MYSQL isn't set to false, and\n\t\t \t\t *  - ext/mysql is loaded.\n\t\t \t\t */\n\t\t\t\t$attempt_fallback = true;\n\n\t\t\t\tif ( $this->has_connected ) {\n\t\t\t\t\t$attempt_fallback = false;\n\t\t\t\t} elseif ( defined( 'WP_USE_EXT_MYSQL' ) && ! WP_USE_EXT_MYSQL ) {\n\t\t\t\t\t$attempt_fallback = false;\n\t\t\t\t} elseif ( ! function_exists( 'mysql_connect' ) ) {\n\t\t\t\t\t$attempt_fallback = false;\n\t\t\t\t}\n\n\t\t\t\tif ( $attempt_fallback ) {\n\t\t\t\t\t$this->use_mysqli = false;\n\t\t\t\t\treturn $this->db_connect( $allow_bail );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ( WP_DEBUG ) {\n\t\t\t\t$this->dbh = mysql_connect( $this->dbhost, $this->dbuser, $this->dbpassword, $new_link, $client_flags );\n\t\t\t} else {\n\t\t\t\t$this->dbh = @mysql_connect( $this->dbhost, $this->dbuser, $this->dbpassword, $new_link, $client_flags );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $this->dbh && $allow_bail ) {\n\t\t\twp_load_translations_early();\n\n\t\t\t// Load custom DB error template, if present.\n\t\t\tif ( file_exists( WP_CONTENT_DIR . '/db-error.php' ) ) {\n\t\t\t\trequire_once( WP_CONTENT_DIR . '/db-error.php' );\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\t$message = '<h1>' . __( 'Error establishing a database connection' ) . \"</h1>\\n\";\n\n\t\t\t$message .= '<p>' . sprintf(\n\t\t\t\t/* translators: 1: wp-config.php. 2: database host */\n\t\t\t\t__( 'This either means that the username and password information in your %1$s file is incorrect or we can&#8217;t contact the database server at %2$s. This could mean your host&#8217;s database server is down.' ),\n\t\t\t\t'<code>wp-config.php</code>',\n\t\t\t\t'<code>' . htmlspecialchars( $this->dbhost, ENT_QUOTES ) . '</code>'\n\t\t\t) . \"</p>\\n\";\n\n\t\t\t$message .= \"<ul>\\n\";\n\t\t\t$message .= '<li>' . __( 'Are you sure you have the correct username and password?' ) . \"</li>\\n\";\n\t\t\t$message .= '<li>' . __( 'Are you sure that you have typed the correct hostname?' ) . \"</li>\\n\";\n\t\t\t$message .= '<li>' . __( 'Are you sure that the database server is running?' ) . \"</li>\\n\";\n\t\t\t$message .= \"</ul>\\n\";\n\n\t\t\t$message .= '<p>' . sprintf(\n\t\t\t\t/* translators: %s: support forums URL */\n\t\t\t\t__( 'If you&#8217;re unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href=\"%s\">WordPress Support Forums</a>.' ),\n\t\t\t\t__( 'https://wordpress.org/support/' )\n\t\t\t) . \"</p>\\n\";\n\n\t\t\t$this->bail( $message, 'db_connect_fail' );\n\n\t\t\treturn false;\n\t\t} elseif ( $this->dbh ) {\n\t\t\tif ( ! $this->has_connected ) {\n\t\t\t\t$this->init_charset();\n\t\t\t}\n\n\t\t\t$this->has_connected = true;\n\n\t\t\t$this->set_charset( $this->dbh );\n\n\t\t\t$this->ready = true;\n\t\t\t$this->set_sql_mode();\n\t\t\t$this->select( $this->dbname, $this->dbh );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Parse the DB_HOST setting to interpret it for mysqli_real_connect.\n\t *\n\t * mysqli_real_connect doesn't support the host param including a port or\n\t * socket like mysql_connect does. This duplicates how mysql_connect detects\n\t * a port and/or socket file.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param string $host The DB_HOST setting to parse.\n\t * @return array|bool Array containing the host, the port, the socket and whether\n\t *                    it is an IPv6 address, in that order. If $host couldn't be parsed,\n\t *                    returns false.\n\t */\n\tpublic function parse_db_host( $host ) {\n\t\t$port    = null;\n\t\t$socket  = null;\n\t\t$is_ipv6 = false;\n\n\t\t// We need to check for an IPv6 address first.\n\t\t// An IPv6 address will always contain at least two colons.\n\t\tif ( substr_count( $host, ':' ) > 1 ) {\n\t\t\t$pattern = '#^(?:\\[)?(?<host>[0-9a-fA-F:]+)(?:\\]:(?<port>[\\d]+))?(?:/(?<socket>.+))?#';\n\t\t\t$is_ipv6 = true;\n\t\t} else {\n\t\t\t// We seem to be dealing with an IPv4 address.\n\t\t\t$pattern = '#^(?<host>[^:/]*)(?::(?<port>[\\d]+))?(?::(?<socket>.+))?#';\n\t\t}\n\n\t\t$matches = array();\n\t\t$result = preg_match( $pattern, $host, $matches );\n\n\t\tif ( 1 !== $result ) {\n\t\t\t// Couldn't parse the address, bail.\n\t\t\treturn false;\n\t\t}\n\n\t\t$host = '';\n\t\tforeach ( array( 'host', 'port', 'socket' ) as $component ) {\n\t\t\tif ( ! empty( $matches[ $component ] ) ) {\n\t\t\t\t$$component = $matches[ $component ];\n\t\t\t}\n\t\t}\n\n\t\treturn array( $host, $port, $socket, $is_ipv6 );\n\t}\n\n\t/**\n\t * Checks that the connection to the database is still up. If not, try to reconnect.\n\t *\n\t * If this function is unable to reconnect, it will forcibly die, or if after the\n\t * the {@see 'template_redirect'} hook has been fired, return false instead.\n\t *\n\t * If $allow_bail is false, the lack of database connection will need\n\t * to be handled manually.\n\t *\n\t * @since 3.9.0\n\t *\n\t * @param bool $allow_bail Optional. Allows the function to bail. Default true.\n\t * @return bool|void True if the connection is up.\n\t */\n\tpublic function check_connection( $allow_bail = true ) {\n\t\tif ( $this->use_mysqli ) {\n\t\t\tif ( ! empty( $this->dbh ) && mysqli_ping( $this->dbh ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! empty( $this->dbh ) && mysql_ping( $this->dbh ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t$error_reporting = false;\n\n\t\t// Disable warnings, as we don't want to see a multitude of \"unable to connect\" messages\n\t\tif ( WP_DEBUG ) {\n\t\t\t$error_reporting = error_reporting();\n\t\t\terror_reporting( $error_reporting & ~E_WARNING );\n\t\t}\n\n\t\tfor ( $tries = 1; $tries <= $this->reconnect_retries; $tries++ ) {\n\t\t\t// On the last try, re-enable warnings. We want to see a single instance of the\n\t\t\t// \"unable to connect\" message on the bail() screen, if it appears.\n\t\t\tif ( $this->reconnect_retries === $tries && WP_DEBUG ) {\n\t\t\t\terror_reporting( $error_reporting );\n\t\t\t}\n\n\t\t\tif ( $this->db_connect( false ) ) {\n\t\t\t\tif ( $error_reporting ) {\n\t\t\t\t\terror_reporting( $error_reporting );\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tsleep( 1 );\n\t\t}\n\n\t\t// If template_redirect has already happened, it's too late for wp_die()/dead_db().\n\t\t// Let's just return and hope for the best.\n\t\tif ( did_action( 'template_redirect' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( ! $allow_bail ) {\n\t\t\treturn false;\n\t\t}\n\n\t\twp_load_translations_early();\n\n\t\t$message = '<h1>' . __( 'Error reconnecting to the database' ) . \"</h1>\\n\";\n\n\t\t$message .= '<p>' . sprintf(\n\t\t\t/* translators: %s: database host */\n\t\t\t__( 'This means that we lost contact with the database server at %s. This could mean your host&#8217;s database server is down.' ),\n\t\t\t'<code>' . htmlspecialchars( $this->dbhost, ENT_QUOTES ) . '</code>'\n\t\t) . \"</p>\\n\";\n\n\t\t$message .= \"<ul>\\n\";\n\t\t$message .= '<li>' . __( 'Are you sure that the database server is running?' ) . \"</li>\\n\";\n\t\t$message .= '<li>' . __( 'Are you sure that the database server is not under particularly heavy load?' ) . \"</li>\\n\";\n\t\t$message .= \"</ul>\\n\";\n\n\t\t$message .= '<p>' . sprintf(\n\t\t\t/* translators: %s: support forums URL */\n\t\t\t__( 'If you&#8217;re unsure what these terms mean you should probably contact your host. If you still need help you can always visit the <a href=\"%s\">WordPress Support Forums</a>.' ),\n\t\t\t__( 'https://wordpress.org/support/' )\n\t\t) . \"</p>\\n\";\n\n\t\t// We weren't able to reconnect, so we better bail.\n\t\t$this->bail( $message, 'db_connect_fail' );\n\n\t\t// Call dead_db() if bail didn't die, because this database is no more. It has ceased to be (at least temporarily).\n\t\tdead_db();\n\t}\n\n\t/**\n\t * Perform a MySQL database query, using current database connection.\n\t *\n\t * More information can be found on the codex page.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $query Database query\n\t * @return int|false Number of rows affected/selected or false on error\n\t */\n\tpublic function query( $query ) {\n\t\tif ( ! $this->ready ) {\n\t\t\t$this->check_current_query = true;\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Filters the database query.\n\t\t *\n\t\t * Some queries are made before the plugins have been loaded,\n\t\t * and thus cannot be filtered with this method.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param string $query Database query.\n\t\t */\n\t\t$query = apply_filters( 'query', $query );\n\n\t\t$this->flush();\n\n\t\t// Log how the function was called\n\t\t$this->func_call = \"\\$db->query(\\\"$query\\\")\";\n\n\t\t// If we're writing to the database, make sure the query will write safely.\n\t\tif ( $this->check_current_query && ! $this->check_ascii( $query ) ) {\n\t\t\t$stripped_query = $this->strip_invalid_text_from_query( $query );\n\t\t\t// strip_invalid_text_from_query() can perform queries, so we need\n\t\t\t// to flush again, just to make sure everything is clear.\n\t\t\t$this->flush();\n\t\t\tif ( $stripped_query !== $query ) {\n\t\t\t\t$this->insert_id = 0;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t$this->check_current_query = true;\n\n\t\t// Keep track of the last query for debug.\n\t\t$this->last_query = $query;\n\n\t\t$this->_do_query( $query );\n\n\t\t// MySQL server has gone away, try to reconnect.\n\t\t$mysql_errno = 0;\n\t\tif ( ! empty( $this->dbh ) ) {\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\tif ( $this->dbh instanceof mysqli ) {\n\t\t\t\t\t$mysql_errno = mysqli_errno( $this->dbh );\n\t\t\t\t} else {\n\t\t\t\t\t// $dbh is defined, but isn't a real connection.\n\t\t\t\t\t// Something has gone horribly wrong, let's try a reconnect.\n\t\t\t\t\t$mysql_errno = 2006;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( is_resource( $this->dbh ) ) {\n\t\t\t\t\t$mysql_errno = mysql_errno( $this->dbh );\n\t\t\t\t} else {\n\t\t\t\t\t$mysql_errno = 2006;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( empty( $this->dbh ) || 2006 == $mysql_errno ) {\n\t\t\tif ( $this->check_connection() ) {\n\t\t\t\t$this->_do_query( $query );\n\t\t\t} else {\n\t\t\t\t$this->insert_id = 0;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// If there is an error then take note of it.\n\t\tif ( $this->use_mysqli ) {\n\t\t\tif ( $this->dbh instanceof mysqli ) {\n\t\t\t\t$this->last_error = mysqli_error( $this->dbh );\n\t\t\t} else {\n\t\t\t\t$this->last_error = __( 'Unable to retrieve the error message from MySQL' );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( is_resource( $this->dbh ) ) {\n\t\t\t\t$this->last_error = mysql_error( $this->dbh );\n\t\t\t} else {\n\t\t\t\t$this->last_error = __( 'Unable to retrieve the error message from MySQL' );\n\t\t\t}\n\t\t}\n\n\t\tif ( $this->last_error ) {\n\t\t\t// Clear insert_id on a subsequent failed insert.\n\t\t\tif ( $this->insert_id && preg_match( '/^\\s*(insert|replace)\\s/i', $query ) )\n\t\t\t\t$this->insert_id = 0;\n\n\t\t\t$this->print_error();\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( preg_match( '/^\\s*(create|alter|truncate|drop)\\s/i', $query ) ) {\n\t\t\t$return_val = $this->result;\n\t\t} elseif ( preg_match( '/^\\s*(insert|delete|update|replace)\\s/i', $query ) ) {\n\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t$this->rows_affected = mysqli_affected_rows( $this->dbh );\n\t\t\t} else {\n\t\t\t\t$this->rows_affected = mysql_affected_rows( $this->dbh );\n\t\t\t}\n\t\t\t// Take note of the insert_id\n\t\t\tif ( preg_match( '/^\\s*(insert|replace)\\s/i', $query ) ) {\n\t\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t\t$this->insert_id = mysqli_insert_id( $this->dbh );\n\t\t\t\t} else {\n\t\t\t\t\t$this->insert_id = mysql_insert_id( $this->dbh );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Return number of rows affected\n\t\t\t$return_val = $this->rows_affected;\n\t\t} else {\n\t\t\t$num_rows = 0;\n\t\t\tif ( $this->use_mysqli && $this->result instanceof mysqli_result ) {\n\t\t\t\twhile ( $row = mysqli_fetch_object( $this->result ) ) {\n\t\t\t\t\t$this->last_result[$num_rows] = $row;\n\t\t\t\t\t$num_rows++;\n\t\t\t\t}\n\t\t\t} elseif ( is_resource( $this->result ) ) {\n\t\t\t\twhile ( $row = mysql_fetch_object( $this->result ) ) {\n\t\t\t\t\t$this->last_result[$num_rows] = $row;\n\t\t\t\t\t$num_rows++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Log number of rows the query returned\n\t\t\t// and return number of rows selected\n\t\t\t$this->num_rows = $num_rows;\n\t\t\t$return_val     = $num_rows;\n\t\t}\n\n\t\treturn $return_val;\n\t}\n\n\t/**\n\t * Internal function to perform the mysql_query() call.\n\t *\n\t * @since 3.9.0\n\t *\n\t * @see wpdb::query()\n\t *\n\t * @param string $query The query to run.\n\t */\n\tprivate function _do_query( $query ) {\n\t\tif ( defined( 'SAVEQUERIES' ) && SAVEQUERIES ) {\n\t\t\t$this->timer_start();\n\t\t}\n\n\t\tif ( ! empty( $this->dbh ) && $this->use_mysqli ) {\n\t\t\t$this->result = mysqli_query( $this->dbh, $query );\n\t\t} elseif ( ! empty( $this->dbh ) ) {\n\t\t\t$this->result = mysql_query( $query, $this->dbh );\n\t\t}\n\t\t$this->num_queries++;\n\n\t\tif ( defined( 'SAVEQUERIES' ) && SAVEQUERIES ) {\n\t\t\t$this->queries[] = array( $query, $this->timer_stop(), $this->get_caller() );\n\t\t}\n\t}\n\n\t/**\n\t * Generates and returns a placeholder escape string for use in queries returned by ::prepare().\n\t *\n\t * @since 4.8.3\n\t *\n\t * @return string String to escape placeholders.\n\t */\n\tpublic function placeholder_escape() {\n\t\tstatic $placeholder;\n\n\t\tif ( ! $placeholder ) {\n\t\t\t// If ext/hash is not present, compat.php's hash_hmac() does not support sha256.\n\t\t\t$algo = function_exists( 'hash' ) ? 'sha256' : 'sha1';\n\t\t\t// Old WP installs may not have AUTH_SALT defined.\n\t\t\t$salt = defined( 'AUTH_SALT' ) ? AUTH_SALT : rand();\n\n\t\t\t$placeholder = '{' . hash_hmac( $algo, uniqid( $salt, true ), $salt ) . '}';\n\t\t}\n\n\t\t/*\n\t\t * Add the filter to remove the placeholder escaper. Uses priority 0, so that anything\n\t\t * else attached to this filter will recieve the query with the placeholder string removed.\n\t\t */\n\t\tif ( ! has_filter( 'query', array( $this, 'remove_placeholder_escape' ) ) ) {\n\t\t\tadd_filter( 'query', array( $this, 'remove_placeholder_escape' ), 0 );\n\t\t}\n\n\t\treturn $placeholder;\n\t}\n\n\t/**\n\t * Adds a placeholder escape string, to escape anything that resembles a printf() placeholder.\n\t *\n\t * @since 4.8.3\n\t *\n\t * @param string $query The query to escape.\n\t * @return string The query with the placeholder escape string inserted where necessary.\n\t */\n\tpublic function add_placeholder_escape( $query ) {\n\t\t/*\n\t\t * To prevent returning anything that even vaguely resembles a placeholder,\n\t\t * we clobber every % we can find.\n\t\t */\n\t\treturn str_replace( '%', $this->placeholder_escape(), $query );\n\t}\n\n\t/**\n\t * Removes the placeholder escape strings from a query.\n\t *\n\t * @since 4.8.3\n\t *\n\t * @param string $query The query from which the placeholder will be removed.\n\t * @return string The query with the placeholder removed.\n\t */\n\tpublic function remove_placeholder_escape( $query ) {\n\t\treturn str_replace( $this->placeholder_escape(), '%', $query );\n\t}\n\n\t/**\n\t * Insert a row into a table.\n\t *\n\t *     wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )\n\t *     wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )\n\t *\n\t * @since 2.5.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::$field_types\n\t * @see wp_set_wpdb_vars()\n\t *\n\t * @param string       $table  Table name\n\t * @param array        $data   Data to insert (in column => value pairs).\n\t *                             Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n\t *                             Sending a null value will cause the column to be set to NULL - the corresponding format is ignored in this case.\n\t * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data.\n\t *                             If string, that format will be used for all of the values in $data.\n\t *                             A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                             If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n\t * @return int|false The number of rows inserted, or false on error.\n\t */\n\tpublic function insert( $table, $data, $format = null ) {\n\t\treturn $this->_insert_replace_helper( $table, $data, $format, 'INSERT' );\n\t}\n\n\t/**\n\t * Replace a row into a table.\n\t *\n\t *     wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )\n\t *     wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )\n\t *\n\t * @since 3.0.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::$field_types\n\t * @see wp_set_wpdb_vars()\n\t *\n\t * @param string       $table  Table name\n\t * @param array        $data   Data to insert (in column => value pairs).\n\t *                             Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n\t *                             Sending a null value will cause the column to be set to NULL - the corresponding format is ignored in this case.\n\t * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data.\n\t *                             If string, that format will be used for all of the values in $data.\n\t *                             A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                             If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n\t * @return int|false The number of rows affected, or false on error.\n\t */\n\tpublic function replace( $table, $data, $format = null ) {\n\t\treturn $this->_insert_replace_helper( $table, $data, $format, 'REPLACE' );\n\t}\n\n\t/**\n\t * Helper function for insert and replace.\n\t *\n\t * Runs an insert or replace query based on $type argument.\n\t *\n\t * @since 3.0.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::$field_types\n\t * @see wp_set_wpdb_vars()\n\t *\n\t * @param string       $table  Table name\n\t * @param array        $data   Data to insert (in column => value pairs).\n\t *                             Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n\t *                             Sending a null value will cause the column to be set to NULL - the corresponding format is ignored in this case.\n\t * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data.\n\t *                             If string, that format will be used for all of the values in $data.\n\t *                             A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                             If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n\t * @param string $type         Optional. What type of operation is this? INSERT or REPLACE. Defaults to INSERT.\n\t * @return int|false The number of rows affected, or false on error.\n\t */\n\tfunction _insert_replace_helper( $table, $data, $format = null, $type = 'INSERT' ) {\n\t\t$this->insert_id = 0;\n\n\t\tif ( ! in_array( strtoupper( $type ), array( 'REPLACE', 'INSERT' ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$data = $this->process_fields( $table, $data, $format );\n\t\tif ( false === $data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$formats = $values = array();\n\t\tforeach ( $data as $value ) {\n\t\t\tif ( is_null( $value['value'] ) ) {\n\t\t\t\t$formats[] = 'NULL';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$formats[] = $value['format'];\n\t\t\t$values[]  = $value['value'];\n\t\t}\n\n\t\t$fields  = '`' . implode( '`, `', array_keys( $data ) ) . '`';\n\t\t$formats = implode( ', ', $formats );\n\n\t\t$sql = \"$type INTO `$table` ($fields) VALUES ($formats)\";\n\n\t\t$this->check_current_query = false;\n\t\treturn $this->query( $this->prepare( $sql, $values ) );\n\t}\n\n\t/**\n\t * Update a row in the table\n\t *\n\t *     wpdb::update( 'table', array( 'column' => 'foo', 'field' => 'bar' ), array( 'ID' => 1 ) )\n\t *     wpdb::update( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( 'ID' => 1 ), array( '%s', '%d' ), array( '%d' ) )\n\t *\n\t * @since 2.5.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::$field_types\n\t * @see wp_set_wpdb_vars()\n\t *\n\t * @param string       $table        Table name\n\t * @param array        $data         Data to update (in column => value pairs).\n\t *                                   Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n\t *                                   Sending a null value will cause the column to be set to NULL - the corresponding\n\t *                                   format is ignored in this case.\n\t * @param array        $where        A named array of WHERE clauses (in column => value pairs).\n\t *                                   Multiple clauses will be joined with ANDs.\n\t *                                   Both $where columns and $where values should be \"raw\".\n\t *                                   Sending a null value will create an IS NULL comparison - the corresponding format will be ignored in this case.\n\t * @param array|string $format       Optional. An array of formats to be mapped to each of the values in $data.\n\t *                                   If string, that format will be used for all of the values in $data.\n\t *                                   A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                                   If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n\t * @param array|string $where_format Optional. An array of formats to be mapped to each of the values in $where.\n\t *                                   If string, that format will be used for all of the items in $where.\n\t *                                   A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                                   If omitted, all values in $where will be treated as strings.\n\t * @return int|false The number of rows updated, or false on error.\n\t */\n\tpublic function update( $table, $data, $where, $format = null, $where_format = null ) {\n\t\tif ( ! is_array( $data ) || ! is_array( $where ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$data = $this->process_fields( $table, $data, $format );\n\t\tif ( false === $data ) {\n\t\t\treturn false;\n\t\t}\n\t\t$where = $this->process_fields( $table, $where, $where_format );\n\t\tif ( false === $where ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$fields = $conditions = $values = array();\n\t\tforeach ( $data as $field => $value ) {\n\t\t\tif ( is_null( $value['value'] ) ) {\n\t\t\t\t$fields[] = \"`$field` = NULL\";\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$fields[] = \"`$field` = \" . $value['format'];\n\t\t\t$values[] = $value['value'];\n\t\t}\n\t\tforeach ( $where as $field => $value ) {\n\t\t\tif ( is_null( $value['value'] ) ) {\n\t\t\t\t$conditions[] = \"`$field` IS NULL\";\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$conditions[] = \"`$field` = \" . $value['format'];\n\t\t\t$values[] = $value['value'];\n\t\t}\n\n\t\t$fields = implode( ', ', $fields );\n\t\t$conditions = implode( ' AND ', $conditions );\n\n\t\t$sql = \"UPDATE `$table` SET $fields WHERE $conditions\";\n\n\t\t$this->check_current_query = false;\n\t\treturn $this->query( $this->prepare( $sql, $values ) );\n\t}\n\n\t/**\n\t * Delete a row in the table\n\t *\n\t *     wpdb::delete( 'table', array( 'ID' => 1 ) )\n\t *     wpdb::delete( 'table', array( 'ID' => 1 ), array( '%d' ) )\n\t *\n\t * @since 3.4.0\n\t * @see wpdb::prepare()\n\t * @see wpdb::$field_types\n\t * @see wp_set_wpdb_vars()\n\t *\n\t * @param string       $table        Table name\n\t * @param array        $where        A named array of WHERE clauses (in column => value pairs).\n\t *                                   Multiple clauses will be joined with ANDs.\n\t *                                   Both $where columns and $where values should be \"raw\".\n\t *                                   Sending a null value will create an IS NULL comparison - the corresponding format will be ignored in this case.\n\t * @param array|string $where_format Optional. An array of formats to be mapped to each of the values in $where.\n\t *                                   If string, that format will be used for all of the items in $where.\n\t *                                   A format is one of '%d', '%f', '%s' (integer, float, string).\n\t *                                   If omitted, all values in $where will be treated as strings unless otherwise specified in wpdb::$field_types.\n\t * @return int|false The number of rows updated, or false on error.\n\t */\n\tpublic function delete( $table, $where, $where_format = null ) {\n\t\tif ( ! is_array( $where ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$where = $this->process_fields( $table, $where, $where_format );\n\t\tif ( false === $where ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$conditions = $values = array();\n\t\tforeach ( $where as $field => $value ) {\n\t\t\tif ( is_null( $value['value'] ) ) {\n\t\t\t\t$conditions[] = \"`$field` IS NULL\";\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$conditions[] = \"`$field` = \" . $value['format'];\n\t\t\t$values[] = $value['value'];\n\t\t}\n\n\t\t$conditions = implode( ' AND ', $conditions );\n\n\t\t$sql = \"DELETE FROM `$table` WHERE $conditions\";\n\n\t\t$this->check_current_query = false;\n\t\treturn $this->query( $this->prepare( $sql, $values ) );\n\t}\n\n\t/**\n\t * Processes arrays of field/value pairs and field formats.\n\t *\n\t * This is a helper method for wpdb's CRUD methods, which take field/value\n\t * pairs for inserts, updates, and where clauses. This method first pairs\n\t * each value with a format. Then it determines the charset of that field,\n\t * using that to determine if any invalid text would be stripped. If text is\n\t * stripped, then field processing is rejected and the query fails.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $table  Table name.\n\t * @param array  $data   Field/value pair.\n\t * @param mixed  $format Format for each field.\n\t * @return array|false Returns an array of fields that contain paired values\n\t *                    and formats. Returns false for invalid values.\n\t */\n\tprotected function process_fields( $table, $data, $format ) {\n\t\t$data = $this->process_field_formats( $data, $format );\n\t\tif ( false === $data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$data = $this->process_field_charsets( $data, $table );\n\t\tif ( false === $data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$data = $this->process_field_lengths( $data, $table );\n\t\tif ( false === $data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$converted_data = $this->strip_invalid_text( $data );\n\n\t\tif ( $data !== $converted_data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Prepares arrays of value/format pairs as passed to wpdb CRUD methods.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param array $data   Array of fields to values.\n\t * @param mixed $format Formats to be mapped to the values in $data.\n\t * @return array Array, keyed by field names with values being an array\n\t *               of 'value' and 'format' keys.\n\t */\n\tprotected function process_field_formats( $data, $format ) {\n\t\t$formats = $original_formats = (array) $format;\n\n\t\tforeach ( $data as $field => $value ) {\n\t\t\t$value = array(\n\t\t\t\t'value'  => $value,\n\t\t\t\t'format' => '%s',\n\t\t\t);\n\n\t\t\tif ( ! empty( $format ) ) {\n\t\t\t\t$value['format'] = array_shift( $formats );\n\t\t\t\tif ( ! $value['format'] ) {\n\t\t\t\t\t$value['format'] = reset( $original_formats );\n\t\t\t\t}\n\t\t\t} elseif ( isset( $this->field_types[ $field ] ) ) {\n\t\t\t\t$value['format'] = $this->field_types[ $field ];\n\t\t\t}\n\n\t\t\t$data[ $field ] = $value;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Adds field charsets to field/value/format arrays generated by\n\t * the wpdb::process_field_formats() method.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param array  $data  As it comes from the wpdb::process_field_formats() method.\n\t * @param string $table Table name.\n\t * @return array|false The same array as $data with additional 'charset' keys.\n\t */\n\tprotected function process_field_charsets( $data, $table ) {\n\t\tforeach ( $data as $field => $value ) {\n\t\t\tif ( '%d' === $value['format'] || '%f' === $value['format'] ) {\n\t\t\t\t/*\n\t\t\t\t * We can skip this field if we know it isn't a string.\n\t\t\t\t * This checks %d/%f versus ! %s because its sprintf() could take more.\n\t\t\t\t */\n\t\t\t\t$value['charset'] = false;\n\t\t\t} else {\n\t\t\t\t$value['charset'] = $this->get_col_charset( $table, $field );\n\t\t\t\tif ( is_wp_error( $value['charset'] ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$data[ $field ] = $value;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * For string fields, record the maximum string length that field can safely save.\n\t *\n\t * @since 4.2.1\n\t *\n\t * @param array  $data  As it comes from the wpdb::process_field_charsets() method.\n\t * @param string $table Table name.\n\t * @return array|false The same array as $data with additional 'length' keys, or false if\n\t *                     any of the values were too long for their corresponding field.\n\t */\n\tprotected function process_field_lengths( $data, $table ) {\n\t\tforeach ( $data as $field => $value ) {\n\t\t\tif ( '%d' === $value['format'] || '%f' === $value['format'] ) {\n\t\t\t\t/*\n\t\t\t\t * We can skip this field if we know it isn't a string.\n\t\t\t\t * This checks %d/%f versus ! %s because its sprintf() could take more.\n\t\t\t\t */\n\t\t\t\t$value['length'] = false;\n\t\t\t} else {\n\t\t\t\t$value['length'] = $this->get_col_length( $table, $field );\n\t\t\t\tif ( is_wp_error( $value['length'] ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$data[ $field ] = $value;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Retrieve one variable from the database.\n\t *\n\t * Executes a SQL query and returns the value from the SQL result.\n\t * If the SQL result contains more than one column and/or more than one row, this function returns the value in the column and row specified.\n\t * If $query is null, this function returns the value in the specified column and row from the previous SQL result.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string|null $query Optional. SQL query. Defaults to null, use the result from the previous query.\n\t * @param int         $x     Optional. Column of value to return. Indexed from 0.\n\t * @param int         $y     Optional. Row of value to return. Indexed from 0.\n\t * @return string|null Database query result (as string), or null on failure\n\t */\n\tpublic function get_var( $query = null, $x = 0, $y = 0 ) {\n\t\t$this->func_call = \"\\$db->get_var(\\\"$query\\\", $x, $y)\";\n\n\t\tif ( $this->check_current_query && $this->check_safe_collation( $query ) ) {\n\t\t\t$this->check_current_query = false;\n\t\t}\n\n\t\tif ( $query ) {\n\t\t\t$this->query( $query );\n\t\t}\n\n\t\t// Extract var out of cached results based x,y vals\n\t\tif ( !empty( $this->last_result[$y] ) ) {\n\t\t\t$values = array_values( get_object_vars( $this->last_result[$y] ) );\n\t\t}\n\n\t\t// If there is a value return it else return null\n\t\treturn ( isset( $values[$x] ) && $values[$x] !== '' ) ? $values[$x] : null;\n\t}\n\n\t/**\n\t * Retrieve one row from the database.\n\t *\n\t * Executes a SQL query and returns the row from the SQL result.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string|null $query  SQL query.\n\t * @param string      $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to\n\t *                            an stdClass object, an associative array, or a numeric array, respectively. Default OBJECT.\n\t * @param int         $y      Optional. Row to return. Indexed from 0.\n\t * @return array|object|null|void Database query result in format specified by $output or null on failure\n\t */\n\tpublic function get_row( $query = null, $output = OBJECT, $y = 0 ) {\n\t\t$this->func_call = \"\\$db->get_row(\\\"$query\\\",$output,$y)\";\n\n\t\tif ( $this->check_current_query && $this->check_safe_collation( $query ) ) {\n\t\t\t$this->check_current_query = false;\n\t\t}\n\n\t\tif ( $query ) {\n\t\t\t$this->query( $query );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( !isset( $this->last_result[$y] ) )\n\t\t\treturn null;\n\n\t\tif ( $output == OBJECT ) {\n\t\t\treturn $this->last_result[$y] ? $this->last_result[$y] : null;\n\t\t} elseif ( $output == ARRAY_A ) {\n\t\t\treturn $this->last_result[$y] ? get_object_vars( $this->last_result[$y] ) : null;\n\t\t} elseif ( $output == ARRAY_N ) {\n\t\t\treturn $this->last_result[$y] ? array_values( get_object_vars( $this->last_result[$y] ) ) : null;\n\t\t} elseif ( strtoupper( $output ) === OBJECT ) {\n\t\t\t// Back compat for OBJECT being previously case insensitive.\n\t\t\treturn $this->last_result[$y] ? $this->last_result[$y] : null;\n\t\t} else {\n\t\t\t$this->print_error( \" \\$db->get_row(string query, output type, int offset) -- Output type must be one of: OBJECT, ARRAY_A, ARRAY_N\" );\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve one column from the database.\n\t *\n\t * Executes a SQL query and returns the column from the SQL result.\n\t * If the SQL result contains more than one column, this function returns the column specified.\n\t * If $query is null, this function returns the specified column from the previous SQL result.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string|null $query Optional. SQL query. Defaults to previous query.\n\t * @param int         $x     Optional. Column to return. Indexed from 0.\n\t * @return array Database query result. Array indexed from 0 by SQL result row number.\n\t */\n\tpublic function get_col( $query = null , $x = 0 ) {\n\t\tif ( $this->check_current_query && $this->check_safe_collation( $query ) ) {\n\t\t\t$this->check_current_query = false;\n\t\t}\n\n\t\tif ( $query ) {\n\t\t\t$this->query( $query );\n\t\t}\n\n\t\t$new_array = array();\n\t\t// Extract the column values\n\t\tfor ( $i = 0, $j = count( $this->last_result ); $i < $j; $i++ ) {\n\t\t\t$new_array[$i] = $this->get_var( null, $x, $i );\n\t\t}\n\t\treturn $new_array;\n\t}\n\n\t/**\n\t * Retrieve an entire SQL result set from the database (i.e., many rows)\n\t *\n\t * Executes a SQL query and returns the entire SQL result.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $query  SQL query.\n\t * @param string $output Optional. Any of ARRAY_A | ARRAY_N | OBJECT | OBJECT_K constants.\n\t *                       With one of the first three, return an array of rows indexed from 0 by SQL result row number.\n\t *                       Each row is an associative array (column => value, ...), a numerically indexed array (0 => value, ...), or an object. ( ->column = value ), respectively.\n\t *                       With OBJECT_K, return an associative array of row objects keyed by the value of each row's first column's value.\n\t *                       Duplicate keys are discarded.\n\t * @return array|object|null Database query results\n\t */\n\tpublic function get_results( $query = null, $output = OBJECT ) {\n\t\t$this->func_call = \"\\$db->get_results(\\\"$query\\\", $output)\";\n\n\t\tif ( $this->check_current_query && $this->check_safe_collation( $query ) ) {\n\t\t\t$this->check_current_query = false;\n\t\t}\n\n\t\tif ( $query ) {\n\t\t\t$this->query( $query );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t\t$new_array = array();\n\t\tif ( $output == OBJECT ) {\n\t\t\t// Return an integer-keyed array of row objects\n\t\t\treturn $this->last_result;\n\t\t} elseif ( $output == OBJECT_K ) {\n\t\t\t// Return an array of row objects with keys from column 1\n\t\t\t// (Duplicates are discarded)\n\t\t\tforeach ( $this->last_result as $row ) {\n\t\t\t\t$var_by_ref = get_object_vars( $row );\n\t\t\t\t$key = array_shift( $var_by_ref );\n\t\t\t\tif ( ! isset( $new_array[ $key ] ) )\n\t\t\t\t\t$new_array[ $key ] = $row;\n\t\t\t}\n\t\t\treturn $new_array;\n\t\t} elseif ( $output == ARRAY_A || $output == ARRAY_N ) {\n\t\t\t// Return an integer-keyed array of...\n\t\t\tif ( $this->last_result ) {\n\t\t\t\tforeach ( (array) $this->last_result as $row ) {\n\t\t\t\t\tif ( $output == ARRAY_N ) {\n\t\t\t\t\t\t// ...integer-keyed row arrays\n\t\t\t\t\t\t$new_array[] = array_values( get_object_vars( $row ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ...column name-keyed row arrays\n\t\t\t\t\t\t$new_array[] = get_object_vars( $row );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $new_array;\n\t\t} elseif ( strtoupper( $output ) === OBJECT ) {\n\t\t\t// Back compat for OBJECT being previously case insensitive.\n\t\t\treturn $this->last_result;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Retrieves the character set for the given table.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $table Table name.\n\t * @return string|WP_Error Table character set, WP_Error object if it couldn't be found.\n\t */\n\tprotected function get_table_charset( $table ) {\n\t\t$tablekey = strtolower( $table );\n\n\t\t/**\n\t\t * Filters the table charset value before the DB is checked.\n\t\t *\n\t\t * Passing a non-null value to the filter will effectively short-circuit\n\t\t * checking the DB for the charset, returning that value instead.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string $charset The character set to use. Default null.\n\t\t * @param string $table   The name of the table being checked.\n\t\t */\n\t\t$charset = apply_filters( 'pre_get_table_charset', null, $table );\n\t\tif ( null !== $charset ) {\n\t\t\treturn $charset;\n\t\t}\n\n\t\tif ( isset( $this->table_charset[ $tablekey ] ) ) {\n\t\t\treturn $this->table_charset[ $tablekey ];\n\t\t}\n\n\t\t$charsets = $columns = array();\n\n\t\t$table_parts = explode( '.', $table );\n\t\t$table = '`' . implode( '`.`', $table_parts ) . '`';\n\t\t$results = $this->get_results( \"SHOW FULL COLUMNS FROM $table\" );\n\t\tif ( ! $results ) {\n\t\t\treturn new WP_Error( 'wpdb_get_table_charset_failure' );\n\t\t}\n\n\t\tforeach ( $results as $column ) {\n\t\t\t$columns[ strtolower( $column->Field ) ] = $column;\n\t\t}\n\n\t\t$this->col_meta[ $tablekey ] = $columns;\n\n\t\tforeach ( $columns as $column ) {\n\t\t\tif ( ! empty( $column->Collation ) ) {\n\t\t\t\tlist( $charset ) = explode( '_', $column->Collation );\n\n\t\t\t\t// If the current connection can't support utf8mb4 characters, let's only send 3-byte utf8 characters.\n\t\t\t\tif ( 'utf8mb4' === $charset && ! $this->has_cap( 'utf8mb4' ) ) {\n\t\t\t\t\t$charset = 'utf8';\n\t\t\t\t}\n\n\t\t\t\t$charsets[ strtolower( $charset ) ] = true;\n\t\t\t}\n\n\t\t\tlist( $type ) = explode( '(', $column->Type );\n\n\t\t\t// A binary/blob means the whole query gets treated like this.\n\t\t\tif ( in_array( strtoupper( $type ), array( 'BINARY', 'VARBINARY', 'TINYBLOB', 'MEDIUMBLOB', 'BLOB', 'LONGBLOB' ) ) ) {\n\t\t\t\t$this->table_charset[ $tablekey ] = 'binary';\n\t\t\t\treturn 'binary';\n\t\t\t}\n\t\t}\n\n\t\t// utf8mb3 is an alias for utf8.\n\t\tif ( isset( $charsets['utf8mb3'] ) ) {\n\t\t\t$charsets['utf8'] = true;\n\t\t\tunset( $charsets['utf8mb3'] );\n\t\t}\n\n\t\t// Check if we have more than one charset in play.\n\t\t$count = count( $charsets );\n\t\tif ( 1 === $count ) {\n\t\t\t$charset = key( $charsets );\n\t\t} elseif ( 0 === $count ) {\n\t\t\t// No charsets, assume this table can store whatever.\n\t\t\t$charset = false;\n\t\t} else {\n\t\t\t// More than one charset. Remove latin1 if present and recalculate.\n\t\t\tunset( $charsets['latin1'] );\n\t\t\t$count = count( $charsets );\n\t\t\tif ( 1 === $count ) {\n\t\t\t\t// Only one charset (besides latin1).\n\t\t\t\t$charset = key( $charsets );\n\t\t\t} elseif ( 2 === $count && isset( $charsets['utf8'], $charsets['utf8mb4'] ) ) {\n\t\t\t\t// Two charsets, but they're utf8 and utf8mb4, use utf8.\n\t\t\t\t$charset = 'utf8';\n\t\t\t} else {\n\t\t\t\t// Two mixed character sets. ascii.\n\t\t\t\t$charset = 'ascii';\n\t\t\t}\n\t\t}\n\n\t\t$this->table_charset[ $tablekey ] = $charset;\n\t\treturn $charset;\n\t}\n\n\t/**\n\t * Retrieves the character set for the given column.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $table  Table name.\n\t * @param string $column Column name.\n\t * @return string|false|WP_Error Column character set as a string. False if the column has no\n\t *                               character set. WP_Error object if there was an error.\n\t */\n\tpublic function get_col_charset( $table, $column ) {\n\t\t$tablekey = strtolower( $table );\n\t\t$columnkey = strtolower( $column );\n\n\t\t/**\n\t\t * Filters the column charset value before the DB is checked.\n\t\t *\n\t\t * Passing a non-null value to the filter will short-circuit\n\t\t * checking the DB for the charset, returning that value instead.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string $charset The character set to use. Default null.\n\t\t * @param string $table   The name of the table being checked.\n\t\t * @param string $column  The name of the column being checked.\n\t\t */\n\t\t$charset = apply_filters( 'pre_get_col_charset', null, $table, $column );\n\t\tif ( null !== $charset ) {\n\t\t\treturn $charset;\n\t\t}\n\n\t\t// Skip this entirely if this isn't a MySQL database.\n\t\tif ( empty( $this->is_mysql ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( empty( $this->table_charset[ $tablekey ] ) ) {\n\t\t\t// This primes column information for us.\n\t\t\t$table_charset = $this->get_table_charset( $table );\n\t\t\tif ( is_wp_error( $table_charset ) ) {\n\t\t\t\treturn $table_charset;\n\t\t\t}\n\t\t}\n\n\t\t// If still no column information, return the table charset.\n\t\tif ( empty( $this->col_meta[ $tablekey ] ) ) {\n\t\t\treturn $this->table_charset[ $tablekey ];\n\t\t}\n\n\t\t// If this column doesn't exist, return the table charset.\n\t\tif ( empty( $this->col_meta[ $tablekey ][ $columnkey ] ) ) {\n\t\t\treturn $this->table_charset[ $tablekey ];\n\t\t}\n\n\t\t// Return false when it's not a string column.\n\t\tif ( empty( $this->col_meta[ $tablekey ][ $columnkey ]->Collation ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlist( $charset ) = explode( '_', $this->col_meta[ $tablekey ][ $columnkey ]->Collation );\n\t\treturn $charset;\n\t}\n\n\t/**\n\t * Retrieve the maximum string length allowed in a given column.\n\t * The length may either be specified as a byte length or a character length.\n\t *\n\t * @since 4.2.1\n\t *\n\t * @param string $table  Table name.\n\t * @param string $column Column name.\n\t * @return array|false|WP_Error array( 'length' => (int), 'type' => 'byte' | 'char' )\n\t *                              false if the column has no length (for example, numeric column)\n\t *                              WP_Error object if there was an error.\n\t */\n\tpublic function get_col_length( $table, $column ) {\n\t\t$tablekey = strtolower( $table );\n\t\t$columnkey = strtolower( $column );\n\n\t\t// Skip this entirely if this isn't a MySQL database.\n\t\tif ( empty( $this->is_mysql ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( empty( $this->col_meta[ $tablekey ] ) ) {\n\t\t\t// This primes column information for us.\n\t\t\t$table_charset = $this->get_table_charset( $table );\n\t\t\tif ( is_wp_error( $table_charset ) ) {\n\t\t\t\treturn $table_charset;\n\t\t\t}\n\t\t}\n\n\t\tif ( empty( $this->col_meta[ $tablekey ][ $columnkey ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$typeinfo = explode( '(', $this->col_meta[ $tablekey ][ $columnkey ]->Type );\n\n\t\t$type = strtolower( $typeinfo[0] );\n\t\tif ( ! empty( $typeinfo[1] ) ) {\n\t\t\t$length = trim( $typeinfo[1], ')' );\n\t\t} else {\n\t\t\t$length = false;\n\t\t}\n\n\t\tswitch( $type ) {\n\t\t\tcase 'char':\n\t\t\tcase 'varchar':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'char',\n\t\t\t\t\t'length' => (int) $length,\n\t\t\t\t);\n\n\t\t\tcase 'binary':\n\t\t\tcase 'varbinary':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'byte',\n\t\t\t\t\t'length' => (int) $length,\n\t\t\t\t);\n\n\t\t\tcase 'tinyblob':\n\t\t\tcase 'tinytext':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'byte',\n\t\t\t\t\t'length' => 255,        // 2^8 - 1\n\t\t\t\t);\n\n\t\t\tcase 'blob':\n\t\t\tcase 'text':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'byte',\n\t\t\t\t\t'length' => 65535,      // 2^16 - 1\n\t\t\t\t);\n\n\t\t\tcase 'mediumblob':\n\t\t\tcase 'mediumtext':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'byte',\n\t\t\t\t\t'length' => 16777215,   // 2^24 - 1\n\t\t\t\t);\n\n\t\t\tcase 'longblob':\n\t\t\tcase 'longtext':\n\t\t\t\treturn array(\n\t\t\t\t\t'type'   => 'byte',\n\t\t\t\t\t'length' => 4294967295, // 2^32 - 1\n\t\t\t\t);\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Check if a string is ASCII.\n\t *\n\t * The negative regex is faster for non-ASCII strings, as it allows\n\t * the search to finish as soon as it encounters a non-ASCII character.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $string String to check.\n\t * @return bool True if ASCII, false if not.\n\t */\n\tprotected function check_ascii( $string ) {\n\t\tif ( function_exists( 'mb_check_encoding' ) ) {\n\t\t\tif ( mb_check_encoding( $string, 'ASCII' ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} elseif ( ! preg_match( '/[^\\x00-\\x7F]/', $string ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if the query is accessing a collation considered safe on the current version of MySQL.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $query The query to check.\n\t * @return bool True if the collation is safe, false if it isn't.\n\t */\n\tprotected function check_safe_collation( $query ) {\n\t\tif ( $this->checking_collation ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// We don't need to check the collation for queries that don't read data.\n\t\t$query = ltrim( $query, \"\\r\\n\\t (\" );\n\t\tif ( preg_match( '/^(?:SHOW|DESCRIBE|DESC|EXPLAIN|CREATE)\\s/i', $query ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// All-ASCII queries don't need extra checking.\n\t\tif ( $this->check_ascii( $query ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t$table = $this->get_table_from_query( $query );\n\t\tif ( ! $table ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->checking_collation = true;\n\t\t$collation = $this->get_table_charset( $table );\n\t\t$this->checking_collation = false;\n\n\t\t// Tables with no collation, or latin1 only, don't need extra checking.\n\t\tif ( false === $collation || 'latin1' === $collation ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t$table = strtolower( $table );\n\t\tif ( empty( $this->col_meta[ $table ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If any of the columns don't have one of these collations, it needs more sanity checking.\n\t\tforeach ( $this->col_meta[ $table ] as $col ) {\n\t\t\tif ( empty( $col->Collation ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( ! in_array( $col->Collation, array( 'utf8_general_ci', 'utf8_bin', 'utf8mb4_general_ci', 'utf8mb4_bin' ), true ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Strips any invalid characters based on value/charset pairs.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param array $data Array of value arrays. Each value array has the keys\n\t *                    'value' and 'charset'. An optional 'ascii' key can be\n\t *                    set to false to avoid redundant ASCII checks.\n\t * @return array|WP_Error The $data parameter, with invalid characters removed from\n\t *                        each value. This works as a passthrough: any additional keys\n\t *                        such as 'field' are retained in each value array. If we cannot\n\t *                        remove invalid characters, a WP_Error object is returned.\n\t */\n\tprotected function strip_invalid_text( $data ) {\n\t\t$db_check_string = false;\n\n\t\tforeach ( $data as &$value ) {\n\t\t\t$charset = $value['charset'];\n\n\t\t\tif ( is_array( $value['length'] ) ) {\n\t\t\t\t$length = $value['length']['length'];\n\t\t\t\t$truncate_by_byte_length = 'byte' === $value['length']['type'];\n\t\t\t} else {\n\t\t\t\t$length = false;\n\t\t\t\t// Since we have no length, we'll never truncate.\n\t\t\t\t// Initialize the variable to false. true would take us\n\t\t\t\t// through an unnecessary (for this case) codepath below.\n\t\t\t\t$truncate_by_byte_length = false;\n\t\t\t}\n\n\t\t\t// There's no charset to work with.\n\t\t\tif ( false === $charset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Column isn't a string.\n\t\t\tif ( ! is_string( $value['value'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$needs_validation = true;\n\t\t\tif (\n\t\t\t\t// latin1 can store any byte sequence\n\t\t\t\t'latin1' === $charset\n\t\t\t||\n\t\t\t\t// ASCII is always OK.\n\t\t\t\t( ! isset( $value['ascii'] ) && $this->check_ascii( $value['value'] ) )\n\t\t\t) {\n\t\t\t\t$truncate_by_byte_length = true;\n\t\t\t\t$needs_validation = false;\n\t\t\t}\n\n\t\t\tif ( $truncate_by_byte_length ) {\n\t\t\t\tmbstring_binary_safe_encoding();\n\t\t\t\tif ( false !== $length && strlen( $value['value'] ) > $length ) {\n\t\t\t\t\t$value['value'] = substr( $value['value'], 0, $length );\n\t\t\t\t}\n\t\t\t\treset_mbstring_encoding();\n\n\t\t\t\tif ( ! $needs_validation ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// utf8 can be handled by regex, which is a bunch faster than a DB lookup.\n\t\t\tif ( ( 'utf8' === $charset || 'utf8mb3' === $charset || 'utf8mb4' === $charset ) && function_exists( 'mb_strlen' ) ) {\n\t\t\t\t$regex = '/\n\t\t\t\t\t(\n\t\t\t\t\t\t(?: [\\x00-\\x7F]                  # single-byte sequences   0xxxxxxx\n\t\t\t\t\t\t|   [\\xC2-\\xDF][\\x80-\\xBF]       # double-byte sequences   110xxxxx 10xxxxxx\n\t\t\t\t\t\t|   \\xE0[\\xA0-\\xBF][\\x80-\\xBF]   # triple-byte sequences   1110xxxx 10xxxxxx * 2\n\t\t\t\t\t\t|   [\\xE1-\\xEC][\\x80-\\xBF]{2}\n\t\t\t\t\t\t|   \\xED[\\x80-\\x9F][\\x80-\\xBF]\n\t\t\t\t\t\t|   [\\xEE-\\xEF][\\x80-\\xBF]{2}';\n\n\t\t\t\tif ( 'utf8mb4' === $charset ) {\n\t\t\t\t\t$regex .= '\n\t\t\t\t\t\t|    \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3\n\t\t\t\t\t\t|    [\\xF1-\\xF3][\\x80-\\xBF]{3}\n\t\t\t\t\t\t|    \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2}\n\t\t\t\t\t';\n\t\t\t\t}\n\n\t\t\t\t$regex .= '){1,40}                          # ...one or more times\n\t\t\t\t\t)\n\t\t\t\t\t| .                                  # anything else\n\t\t\t\t\t/x';\n\t\t\t\t$value['value'] = preg_replace( $regex, '$1', $value['value'] );\n\n\n\t\t\t\tif ( false !== $length && mb_strlen( $value['value'], 'UTF-8' ) > $length ) {\n\t\t\t\t\t$value['value'] = mb_substr( $value['value'], 0, $length, 'UTF-8' );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// We couldn't use any local conversions, send it to the DB.\n\t\t\t$value['db'] = $db_check_string = true;\n\t\t}\n\t\tunset( $value ); // Remove by reference.\n\n\t\tif ( $db_check_string ) {\n\t\t\t$queries = array();\n\t\t\tforeach ( $data as $col => $value ) {\n\t\t\t\tif ( ! empty( $value['db'] ) ) {\n\t\t\t\t\t// We're going to need to truncate by characters or bytes, depending on the length value we have.\n\t\t\t\t\tif ( 'byte' === $value['length']['type'] ) {\n\t\t\t\t\t\t// Using binary causes LEFT() to truncate by bytes.\n\t\t\t\t\t\t$charset = 'binary';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$charset = $value['charset'];\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $this->charset ) {\n\t\t\t\t\t\t$connection_charset = $this->charset;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t\t\t\t$connection_charset = mysqli_character_set_name( $this->dbh );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$connection_charset = mysql_client_encoding();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( is_array( $value['length'] ) ) {\n\t\t\t\t\t\t$length = sprintf( '%.0f', $value['length']['length'] );\n\t\t\t\t\t\t$queries[ $col ] = $this->prepare( \"CONVERT( LEFT( CONVERT( %s USING $charset ), $length ) USING $connection_charset )\", $value['value'] );\n\t\t\t\t\t} else if ( 'binary' !== $charset ) {\n\t\t\t\t\t\t// If we don't have a length, there's no need to convert binary - it will always return the same result.\n\t\t\t\t\t\t$queries[ $col ] = $this->prepare( \"CONVERT( CONVERT( %s USING $charset ) USING $connection_charset )\", $value['value'] );\n\t\t\t\t\t}\n\n\t\t\t\t\tunset( $data[ $col ]['db'] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$sql = array();\n\t\t\tforeach ( $queries as $column => $query ) {\n\t\t\t\tif ( ! $query ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$sql[] = $query . \" AS x_$column\";\n\t\t\t}\n\n\t\t\t$this->check_current_query = false;\n\t\t\t$row = $this->get_row( \"SELECT \" . implode( ', ', $sql ), ARRAY_A );\n\t\t\tif ( ! $row ) {\n\t\t\t\treturn new WP_Error( 'wpdb_strip_invalid_text_failure' );\n\t\t\t}\n\n\t\t\tforeach ( array_keys( $data ) as $column ) {\n\t\t\t\tif ( isset( $row[\"x_$column\"] ) ) {\n\t\t\t\t\t$data[ $column ]['value'] = $row[\"x_$column\"];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Strips any invalid characters from the query.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $query Query to convert.\n\t * @return string|WP_Error The converted query, or a WP_Error object if the conversion fails.\n\t */\n\tprotected function strip_invalid_text_from_query( $query ) {\n\t\t// We don't need to check the collation for queries that don't read data.\n\t\t$trimmed_query = ltrim( $query, \"\\r\\n\\t (\" );\n\t\tif ( preg_match( '/^(?:SHOW|DESCRIBE|DESC|EXPLAIN|CREATE)\\s/i', $trimmed_query ) ) {\n\t\t\treturn $query;\n\t\t}\n\n\t\t$table = $this->get_table_from_query( $query );\n\t\tif ( $table ) {\n\t\t\t$charset = $this->get_table_charset( $table );\n\t\t\tif ( is_wp_error( $charset ) ) {\n\t\t\t\treturn $charset;\n\t\t\t}\n\n\t\t\t// We can't reliably strip text from tables containing binary/blob columns\n\t\t\tif ( 'binary' === $charset ) {\n\t\t\t\treturn $query;\n\t\t\t}\n\t\t} else {\n\t\t\t$charset = $this->charset;\n\t\t}\n\n\t\t$data = array(\n\t\t\t'value'   => $query,\n\t\t\t'charset' => $charset,\n\t\t\t'ascii'   => false,\n\t\t\t'length'  => false,\n\t\t);\n\n\t\t$data = $this->strip_invalid_text( array( $data ) );\n\t\tif ( is_wp_error( $data ) ) {\n\t\t\treturn $data;\n\t\t}\n\n\t\treturn $data[0]['value'];\n\t}\n\n\t/**\n\t * Strips any invalid characters from the string for a given table and column.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $table  Table name.\n\t * @param string $column Column name.\n\t * @param string $value  The text to check.\n\t * @return string|WP_Error The converted string, or a WP_Error object if the conversion fails.\n\t */\n\tpublic function strip_invalid_text_for_column( $table, $column, $value ) {\n\t\tif ( ! is_string( $value ) ) {\n\t\t\treturn $value;\n\t\t}\n\n\t\t$charset = $this->get_col_charset( $table, $column );\n\t\tif ( ! $charset ) {\n\t\t\t// Not a string column.\n\t\t\treturn $value;\n\t\t} elseif ( is_wp_error( $charset ) ) {\n\t\t\t// Bail on real errors.\n\t\t\treturn $charset;\n\t\t}\n\n\t\t$data = array(\n\t\t\t$column => array(\n\t\t\t\t'value'   => $value,\n\t\t\t\t'charset' => $charset,\n\t\t\t\t'length'  => $this->get_col_length( $table, $column ),\n\t\t\t)\n\t\t);\n\n\t\t$data = $this->strip_invalid_text( $data );\n\t\tif ( is_wp_error( $data ) ) {\n\t\t\treturn $data;\n\t\t}\n\n\t\treturn $data[ $column ]['value'];\n\t}\n\n\t/**\n\t * Find the first table name referenced in a query.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $query The query to search.\n\t * @return string|false $table The table name found, or false if a table couldn't be found.\n\t */\n\tprotected function get_table_from_query( $query ) {\n\t\t// Remove characters that can legally trail the table name.\n\t\t$query = rtrim( $query, ';/-#' );\n\n\t\t// Allow (select...) union [...] style queries. Use the first query's table name.\n\t\t$query = ltrim( $query, \"\\r\\n\\t (\" );\n\n\t\t// Strip everything between parentheses except nested selects.\n\t\t$query = preg_replace( '/\\((?!\\s*select)[^(]*?\\)/is', '()', $query );\n\n\t\t// Quickly match most common queries.\n\t\tif ( preg_match( '/^\\s*(?:'\n\t\t\t\t. 'SELECT.*?\\s+FROM'\n\t\t\t\t. '|INSERT(?:\\s+LOW_PRIORITY|\\s+DELAYED|\\s+HIGH_PRIORITY)?(?:\\s+IGNORE)?(?:\\s+INTO)?'\n\t\t\t\t. '|REPLACE(?:\\s+LOW_PRIORITY|\\s+DELAYED)?(?:\\s+INTO)?'\n\t\t\t\t. '|UPDATE(?:\\s+LOW_PRIORITY)?(?:\\s+IGNORE)?'\n\t\t\t\t. '|DELETE(?:\\s+LOW_PRIORITY|\\s+QUICK|\\s+IGNORE)*(?:.+?FROM)?'\n\t\t\t\t. ')\\s+((?:[0-9a-zA-Z$_.`-]|[\\xC2-\\xDF][\\x80-\\xBF])+)/is', $query, $maybe ) ) {\n\t\t\treturn str_replace( '`', '', $maybe[1] );\n\t\t}\n\n\t\t// SHOW TABLE STATUS and SHOW TABLES WHERE Name = 'wp_posts'\n\t\tif ( preg_match( '/^\\s*SHOW\\s+(?:TABLE\\s+STATUS|(?:FULL\\s+)?TABLES).+WHERE\\s+Name\\s*=\\s*(\"|\\')((?:[0-9a-zA-Z$_.-]|[\\xC2-\\xDF][\\x80-\\xBF])+)\\\\1/is', $query, $maybe ) ) {\n\t\t\treturn $maybe[2];\n\t\t}\n\n\t\t// SHOW TABLE STATUS LIKE and SHOW TABLES LIKE 'wp\\_123\\_%'\n\t\t// This quoted LIKE operand seldom holds a full table name.\n\t\t// It is usually a pattern for matching a prefix so we just\n\t\t// strip the trailing % and unescape the _ to get 'wp_123_'\n\t\t// which drop-ins can use for routing these SQL statements.\n\t\tif ( preg_match( '/^\\s*SHOW\\s+(?:TABLE\\s+STATUS|(?:FULL\\s+)?TABLES)\\s+(?:WHERE\\s+Name\\s+)?LIKE\\s*(\"|\\')((?:[\\\\\\\\0-9a-zA-Z$_.-]|[\\xC2-\\xDF][\\x80-\\xBF])+)%?\\\\1/is', $query, $maybe ) ) {\n\t\t\treturn str_replace( '\\\\_', '_', $maybe[2] );\n\t\t}\n\n\t\t// Big pattern for the rest of the table-related queries.\n\t\tif ( preg_match( '/^\\s*(?:'\n\t\t\t\t. '(?:EXPLAIN\\s+(?:EXTENDED\\s+)?)?SELECT.*?\\s+FROM'\n\t\t\t\t. '|DESCRIBE|DESC|EXPLAIN|HANDLER'\n\t\t\t\t. '|(?:LOCK|UNLOCK)\\s+TABLE(?:S)?'\n\t\t\t\t. '|(?:RENAME|OPTIMIZE|BACKUP|RESTORE|CHECK|CHECKSUM|ANALYZE|REPAIR).*\\s+TABLE'\n\t\t\t\t. '|TRUNCATE(?:\\s+TABLE)?'\n\t\t\t\t. '|CREATE(?:\\s+TEMPORARY)?\\s+TABLE(?:\\s+IF\\s+NOT\\s+EXISTS)?'\n\t\t\t\t. '|ALTER(?:\\s+IGNORE)?\\s+TABLE'\n\t\t\t\t. '|DROP\\s+TABLE(?:\\s+IF\\s+EXISTS)?'\n\t\t\t\t. '|CREATE(?:\\s+\\w+)?\\s+INDEX.*\\s+ON'\n\t\t\t\t. '|DROP\\s+INDEX.*\\s+ON'\n\t\t\t\t. '|LOAD\\s+DATA.*INFILE.*INTO\\s+TABLE'\n\t\t\t\t. '|(?:GRANT|REVOKE).*ON\\s+TABLE'\n\t\t\t\t. '|SHOW\\s+(?:.*FROM|.*TABLE)'\n\t\t\t\t. ')\\s+\\(*\\s*((?:[0-9a-zA-Z$_.`-]|[\\xC2-\\xDF][\\x80-\\xBF])+)\\s*\\)*/is', $query, $maybe ) ) {\n\t\t\treturn str_replace( '`', '', $maybe[1] );\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Load the column metadata from the last query.\n\t *\n\t * @since 3.5.0\n\t *\n\t */\n\tprotected function load_col_info() {\n\t\tif ( $this->col_info )\n\t\t\treturn;\n\n\t\tif ( $this->use_mysqli ) {\n\t\t\t$num_fields = mysqli_num_fields( $this->result );\n\t\t\tfor ( $i = 0; $i < $num_fields; $i++ ) {\n\t\t\t\t$this->col_info[ $i ] = mysqli_fetch_field( $this->result );\n\t\t\t}\n\t\t} else {\n\t\t\t$num_fields = mysql_num_fields( $this->result );\n\t\t\tfor ( $i = 0; $i < $num_fields; $i++ ) {\n\t\t\t\t$this->col_info[ $i ] = mysql_fetch_field( $this->result, $i );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve column metadata from the last query.\n\t *\n\t * @since 0.71\n\t *\n\t * @param string $info_type  Optional. Type one of name, table, def, max_length, not_null, primary_key, multiple_key, unique_key, numeric, blob, type, unsigned, zerofill\n\t * @param int    $col_offset Optional. 0: col name. 1: which table the col's in. 2: col's max length. 3: if the col is numeric. 4: col's type\n\t * @return mixed Column Results\n\t */\n\tpublic function get_col_info( $info_type = 'name', $col_offset = -1 ) {\n\t\t$this->load_col_info();\n\n\t\tif ( $this->col_info ) {\n\t\t\tif ( $col_offset == -1 ) {\n\t\t\t\t$i = 0;\n\t\t\t\t$new_array = array();\n\t\t\t\tforeach ( (array) $this->col_info as $col ) {\n\t\t\t\t\t$new_array[$i] = $col->{$info_type};\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\treturn $new_array;\n\t\t\t} else {\n\t\t\t\treturn $this->col_info[$col_offset]->{$info_type};\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Starts the timer, for debugging purposes.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @return true\n\t */\n\tpublic function timer_start() {\n\t\t$this->time_start = microtime( true );\n\t\treturn true;\n\t}\n\n\t/**\n\t * Stops the debugging timer.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @return float Total time spent on the query, in seconds\n\t */\n\tpublic function timer_stop() {\n\t\treturn ( microtime( true ) - $this->time_start );\n\t}\n\n\t/**\n\t * Wraps errors in a nice header and footer and dies.\n\t *\n\t * Will not die if wpdb::$show_errors is false.\n\t *\n\t * @since 1.5.0\n\t *\n\t * @param string $message    The Error message\n\t * @param string $error_code Optional. A Computer readable string to identify the error.\n\t * @return false|void\n\t */\n\tpublic function bail( $message, $error_code = '500' ) {\n\t\tif ( !$this->show_errors ) {\n\t\t\tif ( class_exists( 'WP_Error', false ) ) {\n\t\t\t\t$this->error = new WP_Error($error_code, $message);\n\t\t\t} else {\n\t\t\t\t$this->error = $message;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\twp_die($message);\n\t}\n\n\n\t/**\n\t * Closes the current database connection.\n\t *\n\t * @since 4.5.0\n\t *\n\t * @return bool True if the connection was successfully closed, false if it wasn't,\n\t *              or the connection doesn't exist.\n\t */\n\tpublic function close() {\n\t\tif ( ! $this->dbh ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( $this->use_mysqli ) {\n\t\t\t$closed = mysqli_close( $this->dbh );\n\t\t} else {\n\t\t\t$closed = mysql_close( $this->dbh );\n\t\t}\n\n\t\tif ( $closed ) {\n\t\t\t$this->dbh = null;\n\t\t\t$this->ready = false;\n\t\t\t$this->has_connected = false;\n\t\t}\n\n\t\treturn $closed;\n\t}\n\n\t/**\n\t * Whether MySQL database is at least the required minimum version.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @global string $wp_version\n\t * @global string $required_mysql_version\n\t *\n\t * @return WP_Error|void\n\t */\n\tpublic function check_database_version() {\n\t\tglobal $wp_version, $required_mysql_version;\n\t\t// Make sure the server has the required MySQL version\n\t\tif ( version_compare($this->db_version(), $required_mysql_version, '<') ) {\n\t\t\t/* translators: 1: WordPress version number, 2: Minimum required MySQL version number */\n\t\t\treturn new WP_Error('database_version', sprintf( __( '<strong>ERROR</strong>: WordPress %1$s requires MySQL %2$s or higher' ), $wp_version, $required_mysql_version ));\n\t\t}\n\t}\n\n\t/**\n\t * Whether the database supports collation.\n\t *\n\t * Called when WordPress is generating the table scheme.\n\t *\n\t * Use `wpdb::has_cap( 'collation' )`.\n\t *\n\t * @since 2.5.0\n\t * @deprecated 3.5.0 Use wpdb::has_cap()\n\t *\n\t * @return bool True if collation is supported, false if version does not\n\t */\n\tpublic function supports_collation() {\n\t\t_deprecated_function( __FUNCTION__, '3.5.0', 'wpdb::has_cap( \\'collation\\' )' );\n\t\treturn $this->has_cap( 'collation' );\n\t}\n\n\t/**\n\t * The database character collate.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @return string The database character collate.\n\t */\n\tpublic function get_charset_collate() {\n\t\t$charset_collate = '';\n\n\t\tif ( ! empty( $this->charset ) )\n\t\t\t$charset_collate = \"DEFAULT CHARACTER SET $this->charset\";\n\t\tif ( ! empty( $this->collate ) )\n\t\t\t$charset_collate .= \" COLLATE $this->collate\";\n\n\t\treturn $charset_collate;\n\t}\n\n\t/**\n\t * Determine if a database supports a particular feature.\n\t *\n\t * @since 2.7.0\n\t * @since 4.1.0 Added support for the 'utf8mb4' feature.\n\t * @since 4.6.0 Added support for the 'utf8mb4_520' feature.\n\t *\n\t * @see wpdb::db_version()\n\t *\n\t * @param string $db_cap The feature to check for. Accepts 'collation',\n\t *                       'group_concat', 'subqueries', 'set_charset',\n\t *                       'utf8mb4', or 'utf8mb4_520'.\n\t * @return int|false Whether the database feature is supported, false otherwise.\n\t */\n\tpublic function has_cap( $db_cap ) {\n\t\t$version = $this->db_version();\n\n\t\tswitch ( strtolower( $db_cap ) ) {\n\t\t\tcase 'collation' :    // @since 2.5.0\n\t\t\tcase 'group_concat' : // @since 2.7.0\n\t\t\tcase 'subqueries' :   // @since 2.7.0\n\t\t\t\treturn version_compare( $version, '4.1', '>=' );\n\t\t\tcase 'set_charset' :\n\t\t\t\treturn version_compare( $version, '5.0.7', '>=' );\n\t\t\tcase 'utf8mb4' :      // @since 4.1.0\n\t\t\t\tif ( version_compare( $version, '5.5.3', '<' ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ( $this->use_mysqli ) {\n\t\t\t\t\t$client_version = mysqli_get_client_info();\n\t\t\t\t} else {\n\t\t\t\t\t$client_version = mysql_get_client_info();\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * libmysql has supported utf8mb4 since 5.5.3, same as the MySQL server.\n\t\t\t\t * mysqlnd has supported utf8mb4 since 5.0.9.\n\t\t\t\t */\n\t\t\t\tif ( false !== strpos( $client_version, 'mysqlnd' ) ) {\n\t\t\t\t\t$client_version = preg_replace( '/^\\D+([\\d.]+).*/', '$1', $client_version );\n\t\t\t\t\treturn version_compare( $client_version, '5.0.9', '>=' );\n\t\t\t\t} else {\n\t\t\t\t\treturn version_compare( $client_version, '5.5.3', '>=' );\n\t\t\t\t}\n\t\t\tcase 'utf8mb4_520' : // @since 4.6.0\n\t\t\t\treturn version_compare( $version, '5.6', '>=' );\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Retrieve the name of the function that called wpdb.\n\t *\n\t * Searches up the list of functions until it reaches\n\t * the one that would most logically had called this method.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @return string|array The name of the calling function\n\t */\n\tpublic function get_caller() {\n\t\treturn wp_debug_backtrace_summary( __CLASS__ );\n\t}\n\n\t/**\n\t * Retrieves the MySQL server version.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @return null|string Null on failure, version number on success.\n\t */\n\tpublic function db_version() {\n\t\tif ( $this->use_mysqli ) {\n\t\t\t$server_info = mysqli_get_server_info( $this->dbh );\n\t\t} else {\n\t\t\t$server_info = mysql_get_server_info( $this->dbh );\n\t\t}\n\t\treturn preg_replace( '/[^0-9.].*/', '', $server_info );\n\t}\n}\n"], "filenames": ["wp-includes/formatting.php", "wp-includes/meta.php", "wp-includes/post.php", "wp-includes/version.php", "wp-includes/wp-db.php"], "buggy_code_start_loc": [3756, 367, 4320, 7, 1109], "buggy_code_end_loc": [3756, 373, 4324, 8, 2068], "fixing_code_start_loc": [3757, 366, 4319, 7, 1109], "fixing_code_end_loc": [3762, 372, 4324, 8, 2165], "type": "CWE-89", "message": "WordPress before 4.8.3 is affected by an issue where $wpdb->prepare() can create unexpected and unsafe queries leading to potential SQL injection (SQLi) in plugins and themes, as demonstrated by a \"double prepare\" approach, a different vulnerability than CVE-2017-14723.", "other": {"cve": {"id": "CVE-2017-16510", "sourceIdentifier": "cve@mitre.org", "published": "2017-11-02T16:29:00.787", "lastModified": "2018-02-04T02:29:14.100", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "WordPress before 4.8.3 is affected by an issue where $wpdb->prepare() can create unexpected and unsafe queries leading to potential SQL injection (SQLi) in plugins and themes, as demonstrated by a \"double prepare\" approach, a different vulnerability than CVE-2017-14723."}, {"lang": "es", "value": "WordPress en versiones anteriores a la 4.8.3 se ve afectado por un problema en el que $wpdb->prepare() puede crear consultas inseguras e inesperadas que podr\u00edan provocar una inyecci\u00f3n SQL (SQLi) en plugins y temas, tal y como se ve en el enfoque \"double prepare\". Esta es una vulnerabilidad diferente a CVE-2017-14723."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.8.2", "matchCriteriaId": "55C0F562-AB38-493B-87D6-0DC9465F4E18"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/101638", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://blog.ircmaxell.com/2017/10/disclosure-wordpress-wpdb-sql-injection-technical.html", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://codex.wordpress.org/Version_4.8.3", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/a2693fd8602e3263b5925b9d799ddd577202167d", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Vendor Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2017/11/msg00003.html", "source": "cve@mitre.org"}, {"url": "https://wordpress.org/news/2017/10/wordpress-4-8-3-security-release/", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8941", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory"]}, {"url": "https://www.debian.org/security/2018/dsa-4090", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/a2693fd8602e3263b5925b9d799ddd577202167d"}}