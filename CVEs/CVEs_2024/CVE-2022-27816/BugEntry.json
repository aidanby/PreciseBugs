{"buggy_code": ["use nix::unistd;\nuse std::io::prelude::*;\nuse std::os::unix::net::UnixListener;\nuse std::{\n    env, fs,\n    path::Path,\n    process::{exit, id, Command, Stdio},\n};\nuse sysinfo::{ProcessExt, System, SystemExt};\n\nfn main() -> std::io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"swhks=trace\");\n    env_logger::init();\n\n    let pid_file_path = String::from(\"/tmp/swhks.pid\");\n    let sock_file_path = String::from(format!(\"/run/user/{}/swhkd.sock\", unistd::Uid::current()));\n\n    if Path::new(&pid_file_path).exists() {\n        log::trace!(\"Reading {} file and checking for running instances.\", pid_file_path);\n        let swhkd_pid = match fs::read_to_string(&pid_file_path) {\n            Ok(swhkd_pid) => swhkd_pid,\n            Err(e) => {\n                log::error!(\"Unable to read {} to check all running instances\", e);\n                exit(1);\n            }\n        };\n        log::debug!(\"Previous PID: {}\", swhkd_pid);\n\n        let mut sys = System::new_all();\n        sys.refresh_all();\n        for (pid, process) in sys.processes() {\n            if pid.to_string() == swhkd_pid && process.exe() == env::current_exe().unwrap() {\n                log::error!(\"Server is already running!\");\n                exit(1);\n            }\n        }\n    }\n\n    if Path::new(&sock_file_path).exists() {\n        log::trace!(\"Sockfile exists, attempting to remove it.\");\n        match fs::remove_file(&sock_file_path) {\n            Ok(_) => {\n                log::debug!(\"Removed old socket file\");\n            }\n            Err(e) => {\n                log::error!(\"Error removing the socket file!: {}\", e);\n                log::error!(\"You can manually remove the socket file: {}\", sock_file_path);\n                exit(1);\n            }\n        };\n    }\n\n    match fs::write(&pid_file_path, id().to_string()) {\n        Ok(_) => {}\n        Err(e) => {\n            log::error!(\"Unable to write to {}: {}\", pid_file_path, e);\n            exit(1);\n        }\n    }\n\n    let listener = UnixListener::bind(sock_file_path)?;\n    loop {\n        match listener.accept() {\n            Ok((mut socket, address)) => {\n                let mut response = String::new();\n                socket.read_to_string(&mut response)?;\n                run_system_command(&response);\n                log::debug!(\"Socket: {:?} Address: {:?} Response: {}\", socket, address, response);\n            }\n            Err(e) => log::error!(\"accept function failed: {:?}\", e),\n        }\n    }\n}\n\nfn run_system_command(command: &str) {\n    match Command::new(\"sh\")\n        .arg(\"-c\")\n        .arg(command)\n        .stdin(Stdio::null())\n        .stdout(Stdio::null())\n        .stderr(Stdio::null())\n        .spawn()\n    {\n        Ok(_) => {}\n        Err(e) => {\n            log::error!(\"Failed to execute {}\", command);\n            log::error!(\"Error, {}\", e);\n        }\n    }\n}\n"], "fixing_code": ["use nix::unistd;\nuse std::io::prelude::*;\nuse std::os::unix::net::UnixListener;\nuse std::{\n    env, fs,\n    path::Path,\n    process::{exit, id, Command, Stdio},\n};\nuse sysinfo::{ProcessExt, System, SystemExt};\n\nfn main() -> std::io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"swhks=trace\");\n    env_logger::init();\n\n    let pid_file_path = String::from(format!(\"/run/user/{}/swhks.pid\", unistd::Uid::current()));\n    let sock_file_path = String::from(format!(\"/run/user/{}/swhkd.sock\", unistd::Uid::current()));\n\n    if Path::new(&pid_file_path).exists() {\n        log::trace!(\"Reading {} file and checking for running instances.\", pid_file_path);\n        let swhkd_pid = match fs::read_to_string(&pid_file_path) {\n            Ok(swhkd_pid) => swhkd_pid,\n            Err(e) => {\n                log::error!(\"Unable to read {} to check all running instances\", e);\n                exit(1);\n            }\n        };\n        log::debug!(\"Previous PID: {}\", swhkd_pid);\n\n        let mut sys = System::new_all();\n        sys.refresh_all();\n        for (pid, process) in sys.processes() {\n            if pid.to_string() == swhkd_pid && process.exe() == env::current_exe().unwrap() {\n                log::error!(\"Server is already running!\");\n                exit(1);\n            }\n        }\n    }\n\n    if Path::new(&sock_file_path).exists() {\n        log::trace!(\"Sockfile exists, attempting to remove it.\");\n        match fs::remove_file(&sock_file_path) {\n            Ok(_) => {\n                log::debug!(\"Removed old socket file\");\n            }\n            Err(e) => {\n                log::error!(\"Error removing the socket file!: {}\", e);\n                log::error!(\"You can manually remove the socket file: {}\", sock_file_path);\n                exit(1);\n            }\n        };\n    }\n\n    match fs::write(&pid_file_path, id().to_string()) {\n        Ok(_) => {}\n        Err(e) => {\n            log::error!(\"Unable to write to {}: {}\", pid_file_path, e);\n            exit(1);\n        }\n    }\n\n    let listener = UnixListener::bind(sock_file_path)?;\n    loop {\n        match listener.accept() {\n            Ok((mut socket, address)) => {\n                let mut response = String::new();\n                socket.read_to_string(&mut response)?;\n                run_system_command(&response);\n                log::debug!(\"Socket: {:?} Address: {:?} Response: {}\", socket, address, response);\n            }\n            Err(e) => log::error!(\"accept function failed: {:?}\", e),\n        }\n    }\n}\n\nfn run_system_command(command: &str) {\n    match Command::new(\"sh\")\n        .arg(\"-c\")\n        .arg(command)\n        .stdin(Stdio::null())\n        .stdout(Stdio::null())\n        .stderr(Stdio::null())\n        .spawn()\n    {\n        Ok(_) => {}\n        Err(e) => {\n            log::error!(\"Failed to execute {}\", command);\n            log::error!(\"Error, {}\", e);\n        }\n    }\n}\n"], "filenames": ["src/server.rs"], "buggy_code_start_loc": [15], "buggy_code_end_loc": [16], "fixing_code_start_loc": [15], "fixing_code_end_loc": [16], "type": "CWE-59", "message": "SWHKD 1.1.5 unsafely uses the /tmp/swhks.pid pathname. There can be data loss or a denial of service.", "other": {"cve": {"id": "CVE-2022-27816", "sourceIdentifier": "cve@mitre.org", "published": "2022-03-30T02:15:09.017", "lastModified": "2022-10-27T14:28:43.023", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SWHKD 1.1.5 unsafely uses the /tmp/swhks.pid pathname. There can be data loss or a denial of service."}, {"lang": "es", "value": "SWHKD versi\u00f3n 1.1.5. usa de forma no segura la ruta /tmp/swhks.pid. Puede producirse una p\u00e9rdida de datos o una denegaci\u00f3n de servicio"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:M/Au:N/C:N/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 3.3}, "baseSeverity": "LOW", "exploitabilityScore": 3.4, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-59"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:waycrate:swhkd:1.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "6C4A9210-751B-49B0-8AD4-CDDA0593D448"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2022/04/14/1", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/waycrate/swhkd/commit/0b620a09605afb815c6d8d8953bbb7a10a8c0575", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/waycrate/swhkd/releases", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/waycrate/swhkd/commit/0b620a09605afb815c6d8d8953bbb7a10a8c0575"}}