{"buggy_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Component\\Utils\\ChamiloApi;\nuse Chamilo\\CoreBundle\\Entity\\Skill as SkillEntity;\nuse Chamilo\\CoreBundle\\Entity\\SkillRelUser as SkillRelUserEntity;\nuse Chamilo\\SkillBundle\\Entity\\SkillRelCourse;\nuse Chamilo\\SkillBundle\\Entity\\SkillRelItem;\nuse Chamilo\\SkillBundle\\Entity\\SkillRelItemRelUser;\nuse Chamilo\\UserBundle\\Entity\\User;\nuse Fhaculty\\Graph\\Graph;\nuse Fhaculty\\Graph\\Vertex;\n\n/**\n * Class SkillProfile.\n *\n * @todo break the file in different classes\n */\nclass SkillProfile extends Model\n{\n    public $columns = ['id', 'name', 'description'];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL_PROFILE);\n        $this->table_rel_profile = Database::get_main_table(TABLE_MAIN_SKILL_REL_PROFILE);\n    }\n\n    /**\n     * @return array\n     */\n    public function getProfiles()\n    {\n        $sql = \"SELECT * FROM $this->table p\n                INNER JOIN $this->table_rel_profile sp\n                ON (p.id = sp.profile_id) \";\n        $result = Database::query($sql);\n        $profiles = Database::store_result($result, 'ASSOC');\n\n        return $profiles;\n    }\n\n    /**\n     * This function is for editing profile info from profile_id.\n     *\n     * @param int    $profileId\n     * @param string $name\n     * @param string $description\n     *\n     * @return bool\n     */\n    public function updateProfileInfo($profileId, $name, $description)\n    {\n        $profileId = (int) $profileId;\n\n        if (empty($profileId)) {\n            return false;\n        }\n\n        $name = Database::escape_string($name);\n        $description = Database::escape_string($description);\n\n        $sql = \"UPDATE $this->table SET\n                    name = '$name',\n                    description = '$description'\n                WHERE id = $profileId \";\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Call the save method of the parent class and the SkillRelProfile object.\n     *\n     * @param array $params\n     * @param bool  $show_query Whether to show the query in parent save() method\n     *\n     * @return mixed Profile ID or false if incomplete params\n     */\n    public function save($params, $show_query = false)\n    {\n        if (!empty($params)) {\n            $profile_id = parent::save($params, $show_query);\n            if ($profile_id) {\n                $skill_rel_profile = new SkillRelProfile();\n                if (isset($params['skills'])) {\n                    foreach ($params['skills'] as $skill_id) {\n                        $attributes = [\n                            'skill_id' => $skill_id,\n                            'profile_id' => $profile_id,\n                        ];\n                        $skill_rel_profile->save($attributes);\n                    }\n                }\n\n                return $profile_id;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Delete a skill profile.\n     *\n     * @param int $id The skill profile id\n     *\n     * @return bool Whether delete a skill profile\n     */\n    public function delete($id)\n    {\n        Database::delete(\n            $this->table_rel_profile,\n            [\n                'profile_id' => $id,\n            ]\n        );\n\n        return parent::delete($id);\n    }\n}\n\n/**\n * Class SkillRelProfile.\n */\nclass SkillRelProfile extends Model\n{\n    public $columns = ['id', 'skill_id', 'profile_id'];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL_REL_PROFILE);\n        $this->tableProfile = Database::get_main_table(TABLE_MAIN_SKILL_PROFILE);\n    }\n\n    /**\n     * @param int $profileId\n     *\n     * @return array\n     */\n    public function getSkillsByProfile($profileId)\n    {\n        $profileId = (int) $profileId;\n        $skills = $this->get_all(['where' => ['profile_id = ? ' => $profileId]]);\n        $return = [];\n        if (!empty($skills)) {\n            foreach ($skills as $skill_data) {\n                $return[] = $skill_data['skill_id'];\n            }\n        }\n\n        return $return;\n    }\n\n    /**\n     * This function is for getting profile info from profile_id.\n     *\n     * @param int $profileId\n     *\n     * @return array\n     */\n    public function getProfileInfo($profileId)\n    {\n        $profileId = (int) $profileId;\n        $sql = \"SELECT * FROM $this->table p\n                INNER JOIN $this->tableProfile pr\n                ON (pr.id = p.profile_id)\n                WHERE p.profile_id = \".$profileId;\n        $result = Database::query($sql);\n        $profileData = Database::fetch_array($result, 'ASSOC');\n\n        return $profileData;\n    }\n}\n\n/**\n * Class SkillRelSkill.\n */\nclass SkillRelSkill extends Model\n{\n    public $columns = ['skill_id', 'parent_id', 'relation_type', 'level'];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL_REL_SKILL);\n        $this->tableSkill = Database::get_main_table(TABLE_MAIN_SKILL);\n    }\n\n    /**\n     * Gets an element.\n     *\n     * @param int $id\n     *\n     * @return array\n     */\n    public function getSkillInfo($id)\n    {\n        $id = (int) $id;\n\n        if (empty($id)) {\n            return [];\n        }\n\n        $result = Database::select(\n            '*',\n            $this->table,\n            ['where' => ['skill_id = ?' => $id]],\n            'first'\n        );\n\n        return $result;\n    }\n\n    /**\n     * @param int  $skillId\n     * @param bool $add_child_info\n     *\n     * @return array\n     */\n    public function getSkillParents($skillId, $add_child_info = true)\n    {\n        $skillId = (int) $skillId;\n        $sql = 'SELECT child.* FROM '.$this->table.' child\n                LEFT JOIN '.$this->table.' parent\n                ON child.parent_id = parent.skill_id\n                WHERE child.skill_id = '.$skillId.' ';\n        $result = Database::query($sql);\n        $skill = Database::store_result($result, 'ASSOC');\n        $skill = isset($skill[0]) ? $skill[0] : null;\n\n        $parents = [];\n        if (!empty($skill)) {\n            if ($skill['parent_id'] != null) {\n                $parents = self::getSkillParents($skill['parent_id']);\n            }\n            if ($add_child_info) {\n                $parents[] = $skill;\n            }\n        }\n\n        return $parents;\n    }\n\n    /**\n     * @param int $skillId\n     *\n     * @return array\n     */\n    public function getDirectParents($skillId)\n    {\n        $skillId = (int) $skillId;\n        $sql = 'SELECT parent_id as skill_id\n                FROM '.$this->table.'\n                WHERE skill_id = '.$skillId;\n        $result = Database::query($sql);\n        $skill = Database::store_result($result, 'ASSOC');\n        $skill = isset($skill[0]) ? $skill[0] : null;\n        $parents = [];\n        if (!empty($skill)) {\n            $parents[] = $skill;\n        }\n\n        return $parents;\n    }\n\n    /**\n     * @param int  $skill_id\n     * @param bool $load_user_data\n     * @param bool $user_id\n     *\n     * @return array\n     */\n    public function getChildren(\n        $skill_id,\n        $load_user_data = false,\n        $user_id = false,\n        $order = ''\n    ) {\n        $skill_id = (int) $skill_id;\n        $sql = 'SELECT parent.* FROM '.$this->tableSkill.' skill\n                INNER JOIN '.$this->table.' parent\n                ON parent.id = skill.id\n                WHERE parent_id = '.$skill_id.'\n                ORDER BY skill.name ASC';\n        $result = Database::query($sql);\n        $skills = Database::store_result($result, 'ASSOC');\n\n        $skill_obj = new Skill();\n        $skill_rel_user = new SkillRelUser();\n\n        if ($load_user_data) {\n            $passed_skills = $skill_rel_user->getUserSkills($user_id);\n            $done_skills = [];\n            foreach ($passed_skills as $done_skill) {\n                $done_skills[] = $done_skill['skill_id'];\n            }\n        }\n\n        if (!empty($skills)) {\n            foreach ($skills as &$skill) {\n                $skill['data'] = $skill_obj->get($skill['skill_id']);\n                if (isset($skill['data']) && !empty($skill['data'])) {\n                    if (!empty($done_skills)) {\n                        $skill['data']['passed'] = 0;\n                        if (in_array($skill['skill_id'], $done_skills)) {\n                            $skill['data']['passed'] = 1;\n                        }\n                    }\n                } else {\n                    $skill = null;\n                }\n            }\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return bool\n     */\n    public function updateBySkill($params)\n    {\n        $result = Database::update(\n            $this->table,\n            $params,\n            ['skill_id = ? ' => $params['skill_id']]\n        );\n        if ($result) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $skill_id\n     * @param int $parent_id\n     *\n     * @return bool\n     */\n    public function relationExists($skill_id, $parent_id)\n    {\n        $result = $this->find(\n            'all',\n            [\n                'where' => [\n                    'skill_id = ? AND parent_id = ?' => [\n                        $skill_id,\n                        $parent_id,\n                    ],\n                ],\n            ]\n        );\n\n        if (!empty($result)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n/**\n * Class SkillRelGradebook.\n */\nclass SkillRelGradebook extends Model\n{\n    public $columns = ['id', 'gradebook_id', 'skill_id'];\n\n    /**\n     * SkillRelGradebook constructor.\n     */\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL_REL_GRADEBOOK);\n    }\n\n    /**\n     * @param int $gradebookId\n     * @param int $skillId\n     *\n     * @return bool\n     */\n    public function existsGradeBookSkill($gradebookId, $skillId)\n    {\n        $result = $this->find(\n            'all',\n            [\n                'where' => [\n                    'gradebook_id = ? AND skill_id = ?' => [\n                        $gradebookId,\n                        $skillId,\n                    ],\n                ],\n            ]\n        );\n        if (!empty($result)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Gets an element.\n     */\n    public function getSkillInfo($skill_id, $gradebookId)\n    {\n        if (empty($skill_id)) {\n            return [];\n        }\n        $result = Database::select(\n            '*',\n            $this->table,\n            [\n                'where' => [\n                    'skill_id = ? AND gradebook_id = ? ' => [\n                        $skill_id,\n                        $gradebookId,\n                    ],\n                ],\n            ],\n            'first'\n        );\n\n        return $result;\n    }\n\n    /**\n     * @param int   $skill_id\n     * @param array $gradebook_list\n     */\n    public function updateGradeBookListBySkill($skill_id, $gradebook_list)\n    {\n        $original_gradebook_list = $this->find(\n            'all',\n            ['where' => ['skill_id = ?' => [$skill_id]]]\n        );\n        $gradebooks_to_remove = [];\n        $gradebooks_to_add = [];\n        $original_gradebook_list_ids = [];\n\n        if (!empty($original_gradebook_list)) {\n            foreach ($original_gradebook_list as $gradebook) {\n                if (!in_array($gradebook['gradebook_id'], $gradebook_list)) {\n                    $gradebooks_to_remove[] = $gradebook['id'];\n                }\n            }\n            foreach ($original_gradebook_list as $gradebook_item) {\n                $original_gradebook_list_ids[] = $gradebook_item['gradebook_id'];\n            }\n        }\n\n        if (!empty($gradebook_list)) {\n            foreach ($gradebook_list as $gradebook_id) {\n                if (!in_array($gradebook_id, $original_gradebook_list_ids)) {\n                    $gradebooks_to_add[] = $gradebook_id;\n                }\n            }\n        }\n\n        if (!empty($gradebooks_to_remove)) {\n            foreach ($gradebooks_to_remove as $id) {\n                $this->delete($id);\n            }\n        }\n\n        if (!empty($gradebooks_to_add)) {\n            foreach ($gradebooks_to_add as $gradebook_id) {\n                $attributes = [\n                    'skill_id' => $skill_id,\n                    'gradebook_id' => $gradebook_id,\n                ];\n                $this->save($attributes);\n            }\n        }\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return bool|void\n     */\n    public function updateBySkill($params)\n    {\n        $skillInfo = $this->existsGradeBookSkill(\n            $params['gradebook_id'],\n            $params['skill_id']\n        );\n\n        if ($skillInfo) {\n            return;\n        } else {\n            $result = $this->save($params);\n        }\n        if ($result) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n/**\n * Class SkillRelUser.\n */\nclass SkillRelUser extends Model\n{\n    public $columns = [\n        'id',\n        'user_id',\n        'skill_id',\n        'acquired_skill_at',\n        'assigned_by',\n        'course_id',\n        'session_id',\n    ];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL_REL_USER);\n    }\n\n    /**\n     * @param array $skill_list\n     *\n     * @return array\n     */\n    public function getUserBySkills($skill_list)\n    {\n        $users = [];\n        if (!empty($skill_list)) {\n            $skill_list = array_map('intval', $skill_list);\n            $skill_list = implode(\"', '\", $skill_list);\n\n            $sql = \"SELECT user_id FROM {$this->table}\n                    WHERE skill_id IN ('$skill_list') \";\n\n            $result = Database::query($sql);\n            $users = Database::store_result($result, 'ASSOC');\n        }\n\n        return $users;\n    }\n\n    /**\n     * Get the achieved skills for the user.\n     *\n     * @param int $userId\n     * @param int $courseId  Optional. The course id\n     * @param int $sessionId Optional. The session id\n     *\n     * @return array The skill list. Otherwise return false\n     */\n    public function getUserSkills($userId, $courseId = 0, $sessionId = 0)\n    {\n        if (empty($userId)) {\n            return [];\n        }\n\n        $courseId = (int) $courseId;\n        $sessionId = $sessionId ? (int) $sessionId : null;\n        $whereConditions = [\n            'user_id = ? ' => (int) $userId,\n        ];\n\n        if ($sessionId > 0) {\n            $whereConditions['AND course_id = ? '] = $courseId;\n            $whereConditions['AND session_id = ? '] = $sessionId;\n        } else {\n            $whereConditions['AND course_id = ? AND session_id is NULL'] = $courseId;\n        }\n\n        $result = Database::select(\n            'skill_id',\n            $this->table,\n            [\n                'where' => $whereConditions,\n            ],\n            'all'\n        );\n\n        return $result;\n    }\n\n    /**\n     * Get the relation data between user and skill.\n     *\n     * @param int $userId    The user id\n     * @param int $skillId   The skill id\n     * @param int $courseId  Optional. The course id\n     * @param int $sessionId Optional. The session id\n     *\n     * @return array The relation data. Otherwise return false\n     */\n    public function getByUserAndSkill($userId, $skillId, $courseId = 0, $sessionId = 0)\n    {\n        $sql = \"SELECT * FROM {$this->table} WHERE user_id = %d AND skill_id = %d \";\n\n        if ($courseId > 0) {\n            $sql .= \"AND course_id = %d \".api_get_session_condition($sessionId, true);\n        }\n\n        $sql = sprintf(\n            $sql,\n            $userId,\n            $skillId,\n            $courseId\n        );\n\n        $result = Database::query($sql);\n\n        return Database::fetch_assoc($result);\n    }\n\n    /**\n     * Delete a user skill by course.\n     *\n     * @param int $userId\n     * @param int $courseId\n     * @param int $sessionId\n     */\n    public function deleteUserSkill($userId, $courseId, $sessionId = 0)\n    {\n        $whereSession = ($sessionId ? \" AND session_id = $sessionId\" : \" AND session_id IS NULL\");\n        $sql = \"DELETE FROM {$this->table}\n                WHERE\n                      user_id = $userId AND\n                      course_id = $courseId\n                      $whereSession\";\n\n        Database::query($sql);\n    }\n\n    /**\n     * Get the URL for the issue.\n     *\n     * @return string\n     */\n    public static function getIssueUrl(SkillRelUserEntity $skillIssue)\n    {\n        return api_get_path(WEB_PATH).\"badge/{$skillIssue->getId()}\";\n    }\n\n    /**\n     * Get the URL for the All issues page.\n     *\n     * @return string\n     */\n    public static function getIssueUrlAll(SkillRelUserEntity $skillIssue)\n    {\n        return api_get_path(WEB_PATH).\"skill/{$skillIssue->getSkill()->getId()}/user/{$skillIssue->getUser()->getId()}\";\n    }\n\n    /**\n     * Get the URL for the assertion.\n     *\n     * @return string\n     */\n    public static function getAssertionUrl(SkillRelUserEntity $skillIssue)\n    {\n        $url = api_get_path(WEB_CODE_PATH).'badge/assertion.php?';\n\n        $url .= http_build_query([\n            'user' => $skillIssue->getUser()->getId(),\n            'skill' => $skillIssue->getSkill()->getId(),\n            'course' => $skillIssue->getCourse() ? $skillIssue->getCourse()->getId() : 0,\n            'session' => $skillIssue->getSession() ? $skillIssue->getSession()->getId() : 0,\n        ]);\n\n        return $url;\n    }\n}\n\n/**\n * Class Skill.\n */\nclass Skill extends Model\n{\n    public $columns = [\n        'id',\n        'name',\n        'description',\n        'access_url_id',\n        'short_code',\n        'icon',\n        'criteria',\n    ];\n    public $required = ['name'];\n\n    /** Array of colours by depth, for the coffee wheel. Each depth has 4 col */\n    /*var $colours = array(\n      0 => array('#f9f0ab', '#ecc099', '#e098b0', '#ebe378'),\n      1 => array('#d5dda1', '#4a5072', '#8dae43', '#72659d'),\n      2 => array('#b28647', '#2e6093', '#393e64', '#1e8323'),\n      3 => array('#9f6652', '#9f6652', '#9f6652', '#9f6652'),\n      4 => array('#af643c', '#af643c', '#af643c', '#af643c'),\n      5 => array('#72659d', '#72659d', '#72659d', '#72659d'),\n      6 => array('#8a6e9e', '#8a6e9e', '#8a6e9e', '#8a6e9e'),\n      7 => array('#92538c', '#92538c', '#92538c', '#92538c'),\n      8 => array('#2e6093', '#2e6093', '#2e6093', '#2e6093'),\n      9 => array('#3a5988', '#3a5988', '#3a5988', '#3a5988'),\n     10 => array('#393e64', '#393e64', '#393e64', '#393e64'),\n    );*/\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL);\n        $this->table_user = Database::get_main_table(TABLE_MAIN_USER);\n        $this->table_skill_rel_gradebook = Database::get_main_table(TABLE_MAIN_SKILL_REL_GRADEBOOK);\n        $this->table_skill_rel_user = Database::get_main_table(TABLE_MAIN_SKILL_REL_USER);\n        $this->table_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $this->table_skill_rel_skill = Database::get_main_table(TABLE_MAIN_SKILL_REL_SKILL);\n        $this->table_gradebook = Database::get_main_table(TABLE_MAIN_GRADEBOOK_CATEGORY);\n        $this->sessionTable = Database::get_main_table(TABLE_MAIN_SESSION);\n    }\n\n    /**\n     * Gets an element.\n     *\n     * @param int $id\n     *\n     * @return array|mixed\n     */\n    public function get($id)\n    {\n        $result = parent::get($id);\n        if (empty($result)) {\n            return [];\n        }\n\n        $path = api_get_path(WEB_UPLOAD_PATH).'badges/';\n        if (!empty($result['icon'])) {\n            $iconSmall = sprintf(\n                '%s-small.png',\n                sha1($result['name'])\n            );\n\n            $iconBig = sprintf(\n                '%s.png',\n                sha1($result['name'])\n            );\n\n            $iconMini = $path.$iconSmall;\n            $iconSmall = $path.$iconSmall;\n            $iconBig = $path.$iconBig;\n        } else {\n            $iconMini = Display::returnIconPath('badges-default.png', ICON_SIZE_MEDIUM);\n            $iconSmall = Display::returnIconPath('badges-default.png', ICON_SIZE_BIG);\n            $iconBig = Display::returnIconPath('badges-default.png', ICON_SIZE_HUGE);\n        }\n\n        $result['icon_mini'] = $iconMini;\n        $result['icon_small'] = $iconSmall;\n        $result['icon_big'] = $iconBig;\n\n        $result['img_mini'] = Display::img($iconBig, $result['name'], ['width' => ICON_SIZE_MEDIUM]);\n        $result['img_big'] = Display::img($iconBig, $result['name']);\n        $result['img_small'] = Display::img($iconSmall, $result['name']);\n        $result['name'] = self::translateName($result['name']);\n        $result['short_code'] = self::translateCode($result['short_code']);\n\n        return $result;\n    }\n\n    /**\n     * @param array  $skills\n     * @param string $imageSize     mini|small|big\n     * @param bool   $addDivWrapper\n     *\n     * @return string\n     */\n    public function processSkillList($skills, $imageSize = '', $addDivWrapper = true)\n    {\n        if (empty($skills)) {\n            return '';\n        }\n\n        if (empty($imageSize)) {\n            $imageSize = 'img_small';\n        } else {\n            $imageSize = \"img_$imageSize\";\n        }\n\n        $html = '';\n        if ($addDivWrapper) {\n            $html = '<div class=\"scrollbar-inner badges-sidebar\">';\n        }\n        $html .= '<ul class=\"list-unstyled list-badges\">';\n        foreach ($skills as $skill) {\n            if (isset($skill['data'])) {\n                $skill = $skill['data'];\n            }\n            $html .= '<li class=\"thumbnail\">';\n            $item = $skill[$imageSize];\n            $item .= '<div class=\"caption\">\n                        <p class=\"text-center\">'.$skill['name'].'</p>\n                      </div>';\n            if (isset($skill['url'])) {\n                $html .= Display::url($item, $skill['url'], ['target' => '_blank']);\n            } else {\n                $html .= $item;\n            }\n            $html .= '</li>';\n        }\n        $html .= '</ul>';\n\n        if ($addDivWrapper) {\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * @param $skills\n     * @param string $imageSize mini|small|big\n     * @param string $style\n     * @param bool   $showBadge\n     * @param bool   $showTitle\n     *\n     * @return string\n     */\n    public function processSkillListSimple($skills, $imageSize = '', $style = '', $showBadge = true, $showTitle = true)\n    {\n        if (empty($skills)) {\n            return '';\n        }\n\n        $isHierarchicalTable = api_get_configuration_value('table_of_hierarchical_skill_presentation');\n\n        if (empty($imageSize)) {\n            $imageSize = 'img_small';\n        } else {\n            $imageSize = \"img_$imageSize\";\n        }\n\n        $html = '';\n        foreach ($skills as $skill) {\n            if (isset($skill['data'])) {\n                $skill = $skill['data'];\n            }\n\n            $item = '';\n            if ($showBadge) {\n                $item = '<div class=\"item\">'.$skill[$imageSize].'</div>';\n            }\n\n            $name = '<div class=\"caption\">'.$skill['name'].'</div>';\n            if (!empty($skill['short_code'])) {\n                $name = $skill['short_code'];\n            }\n\n            if (!$isHierarchicalTable) {\n                //$item .= '<br />';\n            }\n\n            if ($showTitle) {\n                $item .= $name;\n            }\n\n            if (isset($skill['url'])) {\n                $html .= Display::url($item, $skill['url'], ['target' => '_blank', 'style' => $style]);\n            } else {\n                $html .= Display::url($item, '#', ['target' => '_blank', 'style' => $style]);\n            }\n        }\n\n        return $html;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return array\n     */\n    public function getSkillInfo($id)\n    {\n        $skillRelSkill = new SkillRelSkill();\n        $skillInfo = $this->get($id);\n        if (!empty($skillInfo)) {\n            $skillInfo['extra'] = $skillRelSkill->getSkillInfo($id);\n            $skillInfo['gradebooks'] = $this->getGradebooksBySkill($id);\n        }\n\n        return $skillInfo;\n    }\n\n    /**\n     * @param array $skill_list\n     *\n     * @return array\n     */\n    public function getSkillsInfo($skill_list)\n    {\n        $skill_list = array_map('intval', $skill_list);\n        $skill_list = implode(\"', '\", $skill_list);\n\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE id IN ('$skill_list') \";\n\n        $result = Database::query($sql);\n        $skills = Database::store_result($result, 'ASSOC');\n\n        foreach ($skills as &$skill) {\n            if (!$skill['icon']) {\n                continue;\n            }\n\n            $skill['icon_small'] = sprintf(\n                'badges/%s-small.png',\n                sha1($skill['name'])\n            );\n            $skill['name'] = self::translateName($skill['name']);\n            $skill['short_code'] = self::translateCode($skill['short_code']);\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param bool $load_user_data\n     * @param bool $user_id\n     * @param int  $id\n     * @param int  $parent_id\n     *\n     * @return array\n     */\n    public function get_all(\n        $load_user_data = false,\n        $user_id = false,\n        $id = null,\n        $parent_id = null\n    ) {\n        $id_condition = '';\n        if (!empty($id)) {\n            $id = (int) $id;\n            $id_condition = \" WHERE s.id = $id\";\n        }\n\n        if (!empty($parent_id)) {\n            $parent_id = (int) $parent_id;\n            if (empty($id_condition)) {\n                $id_condition = \" WHERE ss.parent_id = $parent_id\";\n            } else {\n                $id_condition = \" AND ss.parent_id = $parent_id\";\n            }\n        }\n\n        $sql = \"SELECT\n                    s.id,\n                    s.name,\n                    s.description,\n                    ss.parent_id,\n                    ss.relation_type,\n                    s.icon,\n                    s.short_code,\n                    s.status\n                FROM {$this->table} s\n                INNER JOIN {$this->table_skill_rel_skill} ss\n                ON (s.id = ss.skill_id) $id_condition\n                ORDER BY ss.id, ss.parent_id\";\n\n        $result = Database::query($sql);\n        $skills = [];\n        $webPath = api_get_path(WEB_UPLOAD_PATH);\n        if (Database::num_rows($result)) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $skillInfo = self::get($row['id']);\n\n                $row['img_mini'] = $skillInfo['img_mini'];\n                $row['img_big'] = $skillInfo['img_big'];\n                $row['img_small'] = $skillInfo['img_small'];\n\n                $row['name'] = self::translateName($row['name']);\n                $row['short_code'] = self::translateCode($row['short_code']);\n                $skillRelSkill = new SkillRelSkill();\n                $parents = $skillRelSkill->getSkillParents($row['id']);\n                $row['level'] = count($parents) - 1;\n                $row['gradebooks'] = $this->getGradebooksBySkill($row['id']);\n                $skills[$row['id']] = $row;\n            }\n        }\n\n        // Load all children of the parent_id\n        if (!empty($skills) && !empty($parent_id)) {\n            foreach ($skills as $skill) {\n                $children = self::get_all($load_user_data, $user_id, $id, $skill['id']);\n                if (!empty($children)) {\n                    //$skills = array_merge($skills, $children);\n                    $skills = $skills + $children;\n                }\n            }\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param int $skill_id\n     *\n     * @return array|resource\n     */\n    public function getGradebooksBySkill($skill_id)\n    {\n        $skill_id = (int) $skill_id;\n        $sql = \"SELECT g.* FROM {$this->table_gradebook} g\n                INNER JOIN {$this->table_skill_rel_gradebook} sg\n                ON g.id = sg.gradebook_id\n                WHERE sg.skill_id = $skill_id\";\n        $result = Database::query($sql);\n        $result = Database::store_result($result, 'ASSOC');\n\n        return $result;\n    }\n\n    /**\n     * Get one level children.\n     *\n     * @param int  $skill_id\n     * @param bool $load_user_data\n     *\n     * @return array\n     */\n    public function getChildren($skill_id, $load_user_data = false)\n    {\n        $skillRelSkill = new SkillRelSkill();\n        if ($load_user_data) {\n            $user_id = api_get_user_id();\n            $skills = $skillRelSkill->getChildren($skill_id, true, $user_id);\n        } else {\n            $skills = $skillRelSkill->getChildren($skill_id);\n        }\n\n        return $skills;\n    }\n\n    /**\n     * Get all children of the current node (recursive).\n     *\n     * @param int $skillId\n     *\n     * @return array\n     */\n    public function getAllChildren($skillId)\n    {\n        $skillRelSkill = new SkillRelSkill();\n        $children = $skillRelSkill->getChildren($skillId);\n        foreach ($children as $child) {\n            $subChildren = $this->getAllChildren($child['id']);\n        }\n\n        if (!empty($subChildren)) {\n            $children = array_merge($children, $subChildren);\n        }\n\n        return $children;\n    }\n\n    /**\n     * Gets all parents from from the wanted skill.\n     */\n    public function get_parents($skillId)\n    {\n        $skillRelSkill = new SkillRelSkill();\n        $skills = $skillRelSkill->getSkillParents($skillId, true);\n        foreach ($skills as &$skill) {\n            $skill['data'] = $this->get($skill['skill_id']);\n        }\n\n        return $skills;\n    }\n\n    /**\n     * All direct parents.\n     *\n     * @param int $skillId\n     *\n     * @return array\n     */\n    public function getDirectParents($skillId)\n    {\n        $skillRelSkill = new SkillRelSkill();\n        $skills = $skillRelSkill->getDirectParents($skillId, true);\n        if (!empty($skills)) {\n            foreach ($skills as &$skill) {\n                $skillData = $this->get($skill['skill_id']);\n                if (empty($skillData)) {\n                    continue;\n                }\n                $skill['data'] = $skillData;\n                $skill_info2 = $skillRelSkill->getSkillInfo($skill['skill_id']);\n                $parentId = isset($skill_info2['parent_id']) ? isset($skill_info2['parent_id']) : 0;\n                $skill['data']['parent_id'] = $parentId;\n            }\n\n            return $skills;\n        }\n\n        return [];\n    }\n\n    /**\n     * Adds a new skill.\n     *\n     * @param array $params\n     *\n     * @return bool|null\n     */\n    public function add($params)\n    {\n        if (!isset($params['parent_id'])) {\n            $params['parent_id'] = 1;\n        }\n\n        if (!is_array($params['parent_id'])) {\n            $params['parent_id'] = [$params['parent_id']];\n        }\n\n        $skillRelSkill = new SkillRelSkill();\n        $skillRelGradebook = new SkillRelGradebook();\n\n        // Saving name, description\n        $skill_id = $this->save($params);\n        if ($skill_id) {\n            // Saving skill_rel_skill (parent_id, relation_type)\n            foreach ($params['parent_id'] as $parent_id) {\n                $relation_exists = $skillRelSkill->relationExists($skill_id, $parent_id);\n                if (!$relation_exists) {\n                    $attributes = [\n                        'skill_id' => $skill_id,\n                        'parent_id' => $parent_id,\n                        'relation_type' => isset($params['relation_type']) ? $params['relation_type'] : 0,\n                        //'level'         => $params['level'],\n                    ];\n                    $skillRelSkill->save($attributes);\n                }\n            }\n\n            if (!empty($params['gradebook_id'])) {\n                foreach ($params['gradebook_id'] as $gradebook_id) {\n                    $attributes = [];\n                    $attributes['gradebook_id'] = $gradebook_id;\n                    $attributes['skill_id'] = $skill_id;\n                    $skillRelGradebook->save($attributes);\n                }\n            }\n\n            return $skill_id;\n        }\n\n        return null;\n    }\n\n    /**\n     * @param int      $userId\n     * @param Category $category\n     * @param int      $courseId\n     * @param int      $sessionId\n     *\n     * @return bool\n     */\n    public function addSkillToUser(\n        $userId,\n        $category,\n        $courseId,\n        $sessionId\n    ) {\n        $skill_gradebook = new SkillRelGradebook();\n        $skill_rel_user = new SkillRelUser();\n\n        if (empty($category)) {\n            return false;\n        }\n\n        $enableGradeSubCategorySkills = (true === api_get_configuration_value('gradebook_enable_subcategory_skills_independant_assignement'));\n        // Load subcategories\n        if (empty($category->get_parent_id())) {\n            $subCategories = $category->get_subcategories(\n                $userId,\n                $category->get_course_code(),\n                $category->get_session_id()\n            );\n            $scoreSubCategories = $this->getSubCategoryResultScore($category, $userId);\n            if (!empty($subCategories)) {\n                /** @var Category $subCategory */\n                foreach ($subCategories as $subCategory) {\n                    $scoreChecked = true;\n                    if (!empty($scoreSubCategories[$subCategory->get_id()])) {\n                        $resultScore = $scoreSubCategories[$subCategory->get_id()];\n                        $scoreChecked = ($resultScore['user_score'] >= $resultScore['min_score']);\n                    }\n                    if ($scoreChecked) {\n                        $this->addSkillToUser($userId, $subCategory, $courseId, $sessionId);\n                    }\n                }\n            }\n        }\n\n        $gradebookId = $category->get_id();\n        $skill_gradebooks = $skill_gradebook->get_all(['where' => ['gradebook_id = ?' => $gradebookId]]);\n\n        // It checks if gradebook is passed to add the skill\n        if ($enableGradeSubCategorySkills) {\n            $userFinished = Category::userFinishedCourse(\n                $userId,\n                $category,\n                true\n            );\n            if (!$userFinished) {\n                return false;\n            }\n        }\n\n        if (!empty($skill_gradebooks)) {\n            foreach ($skill_gradebooks as $skill_gradebook) {\n                $hasSkill = $this->userHasSkill(\n                    $userId,\n                    $skill_gradebook['skill_id'],\n                    $courseId,\n                    $sessionId\n                );\n\n                if (!$hasSkill) {\n                    $params = [\n                        'user_id' => $userId,\n                        'skill_id' => $skill_gradebook['skill_id'],\n                        'acquired_skill_at' => api_get_utc_datetime(),\n                        'course_id' => (int) $courseId,\n                        'session_id' => $sessionId ? (int) $sessionId : null,\n                    ];\n\n                    $skill_rel_user->save($params);\n\n                    // It sends notifications about user skills from gradebook\n                    $badgeAssignationNotification = api_get_configuration_value('badge_assignation_notification');\n                    if ($badgeAssignationNotification) {\n                        $entityManager = Database::getManager();\n                        $skillRepo = $entityManager->getRepository('ChamiloCoreBundle:Skill');\n                        $skill = $skillRepo->find($skill_gradebook['skill_id']);\n                        if ($skill) {\n                            $user = api_get_user_entity($userId);\n                            $url = api_get_path(WEB_PATH).\"skill/{$skill_gradebook['skill_id']}/user/{$userId}\";\n                            $message = sprintf(\n                                get_lang('YouXHaveAchievedTheSkillYToSeeFollowLinkZ'),\n                                $user->getFirstname(),\n                                $skill->getName(),\n                                Display::url($url, $url, ['target' => '_blank'])\n                            );\n                            MessageManager::send_message(\n                                $user->getId(),\n                                get_lang('YouHaveAchievedANewSkill'),\n                                $message\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Get the results of user in a subCategory.\n     *\n     * @param $category\n     * @param $userId\n     *\n     * @return array\n     */\n    public function getSubCategoryResultScore($category, $userId)\n    {\n        $scoreSubCategories = [];\n        if (true === api_get_configuration_value('gradebook_enable_subcategory_skills_independant_assignement')) {\n            $subCategories = $category->get_subcategories(\n                $userId,\n                $category->get_course_code(),\n                $category->get_session_id()\n            );\n            $alleval = $category->get_evaluations($userId, false, $category->get_course_code(),\n                $category->get_session_id());\n            $alllink = $category->get_links($userId, true, $category->get_course_code(), $category->get_session_id());\n            $datagen = new GradebookDataGenerator($subCategories, $alleval, $alllink);\n            $gradeResult = $datagen->get_data();\n            foreach ($gradeResult as $data) {\n                /** @var AbstractLink $item */\n                $item = $data[0];\n                if (Category::class === get_class($item)) {\n                    $scoreSubCategories[$item->get_id()]['min_score'] = $item->getCertificateMinScore();\n                    $scoreSubCategories[$item->get_id()]['user_score'] = round($data['result_score'][0]);\n                }\n            }\n        }\n\n        return $scoreSubCategories;\n    }\n\n    /* Deletes a skill */\n    public function delete($skill_id)\n    {\n        /*$params = array('skill_id' => $skill_id);\n\n        $skillRelSkill     = new SkillRelSkill();\n        $skills = $skillRelSkill->get_all(array('where'=>array('skill_id = ?' =>$skill_id)));\n\n        $skill_rel_profile     = new SkillRelProfile();\n        $skillRelGradebook = new SkillRelGradebook();\n        $skill_rel_user     = new SkillRelUser();\n\n        $this->delete($skill_id);\n\n        $skillRelGradebook->delete($params);*/\n    }\n\n    /**\n     * @param array $params\n     */\n    public function edit($params)\n    {\n        if (!isset($params['parent_id'])) {\n            $params['parent_id'] = 1;\n        }\n\n        $params['gradebook_id'] = isset($params['gradebook_id']) ? $params['gradebook_id'] : [];\n\n        $skillRelSkill = new SkillRelSkill();\n        $skillRelGradebook = new SkillRelGradebook();\n\n        // Saving name, description\n        $this->update($params);\n        $skillId = $params['id'];\n\n        if ($skillId) {\n            // Saving skill_rel_skill (parent_id, relation_type)\n            if (!is_array($params['parent_id'])) {\n                $params['parent_id'] = [$params['parent_id']];\n            }\n\n            // Cannot change parent of root\n            if ($skillId == 1) {\n                $params['parent_id'] = 0;\n            }\n\n            foreach ($params['parent_id'] as $parent_id) {\n                $relation_exists = $skillRelSkill->relationExists($skillId, $parent_id);\n                if (!$relation_exists) {\n                    $attributes = [\n                        'skill_id' => $skillId,\n                        'parent_id' => $parent_id,\n                        'relation_type' => $params['relation_type'],\n                        //'level'         => $params['level'],\n                    ];\n                    $skillRelSkill->updateBySkill($attributes);\n                }\n            }\n\n            $skillRelGradebook->updateGradeBookListBySkill(\n                $skillId,\n                $params['gradebook_id']\n            );\n\n            return $skillId;\n        }\n\n        return null;\n    }\n\n    /**\n     * Get user's skills.\n     *\n     * @param int  $userId\n     * @param bool $getSkillData\n     * @param int  $courseId\n     * @param int  $sessionId\n     *\n     * @return array\n     */\n    public function getUserSkills($userId, $getSkillData = false, $courseId = 0, $sessionId = 0)\n    {\n        $userId = (int) $userId;\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n\n        $courseCondition = '';\n        if (!empty($courseId)) {\n            $courseCondition = \" AND course_id = $courseId \";\n        }\n\n        $sessionCondition = '';\n        if (!empty($sessionId)) {\n            $sessionCondition = \" AND course_id = $sessionId \";\n        }\n\n        $sql = 'SELECT DISTINCT\n                    s.id,\n                    s.name,\n                    s.icon,\n                    u.id as issue,\n                    u.acquired_skill_at,\n                    u.course_id\n                FROM '.$this->table_skill_rel_user.' u\n                INNER JOIN '.$this->table.' s\n                ON u.skill_id = s.id\n                WHERE\n                    user_id = '.$userId.' '.$sessionCondition.' '.$courseCondition;\n\n        $result = Database::query($sql);\n        $skills = Database::store_result($result, 'ASSOC');\n        $skillList = [];\n        if (!empty($skills)) {\n            foreach ($skills as $skill) {\n                if ($getSkillData) {\n                    $skillData = $this->get($skill['id']);\n                    $skillData['url'] = api_get_path(WEB_PATH).'badge/'.$skill['id'].'/user/'.$userId;\n                    $skillList[$skill['id']] = array_merge($skill, $skillData);\n                } else {\n                    $skillList[$skill['id']] = $skill['id'];\n                }\n            }\n        }\n\n        return $skillList;\n    }\n\n    /**\n     * @param array $skills\n     * @param int   $level\n     *\n     * @return string\n     */\n    public function processVertex(Vertex $vertex, $skills = [], $level = 0)\n    {\n        $isHierarchicalTable = api_get_configuration_value('table_of_hierarchical_skill_presentation');\n        $subTable = '';\n        if ($vertex->getVerticesEdgeTo()->count() > 0) {\n            if ($isHierarchicalTable) {\n                $subTable .= '<ul>';\n            }\n            foreach ($vertex->getVerticesEdgeTo() as $subVertex) {\n                $data = $subVertex->getAttribute('graphviz.data');\n                $passed = in_array($data['id'], array_keys($skills));\n                $transparency = '';\n                if ($passed === false) {\n                    // @todo use css class\n                    $transparency = 'opacity: 0.4; filter: alpha(opacity=40);';\n                }\n\n                if ($isHierarchicalTable) {\n                    $label = $this->processSkillListSimple([$data], 'mini', $transparency);\n                    $subTable .= '<li>'.$label;\n                    $subTable .= $this->processVertex($subVertex, $skills, $level + 1);\n                    $subTable .= '</li>';\n                } else {\n                    $imageSize = 'mini';\n                    if ($level == 2) {\n                        $imageSize = 'small';\n                    }\n                    $showTitle = true;\n                    if ($level > 2) {\n                        $showTitle = false;\n                    }\n\n                    $label = $this->processSkillListSimple([$data], $imageSize, $transparency, true, $showTitle);\n                    $subTable .= '<div class=\"thumbnail\" style=\"float:left; margin-right:5px; \">';\n                    $subTable .= '<div style=\"'.$transparency.'\">';\n\n                    $subTable .= '<div style=\"text-align: center\">';\n                    $subTable .= $label;\n                    $subTable .= '</div>';\n\n                    $subTable .= '</div>';\n                    $subTable .= $this->processVertex($subVertex, $skills, $level + 1);\n                    $subTable .= '</div>';\n                }\n            }\n\n            if ($isHierarchicalTable) {\n                $subTable .= '</ul>';\n            }\n        }\n\n        return $subTable;\n    }\n\n    /**\n     * @param int  $userId\n     * @param int  $courseId\n     * @param int  $sessionId\n     * @param bool $addTitle\n     *\n     * @return array\n     */\n    public function getUserSkillsTable($userId, $courseId = 0, $sessionId = 0, $addTitle = true)\n    {\n        $skills = $this->getUserSkills($userId, true, $courseId, $sessionId);\n        $courseTempList = [];\n        $tableRows = [];\n        $skillParents = [];\n        foreach ($skills as $resultData) {\n            $parents = $this->get_parents($resultData['id']);\n            foreach ($parents as $parentData) {\n                $parentData['passed'] = in_array($parentData['id'], array_keys($skills));\n                if ($parentData['passed'] && isset($skills[$parentData['id']]['url'])) {\n                    $parentData['data']['url'] = $skills[$parentData['id']]['url'];\n                }\n                $skillParents[$resultData['id']][$parentData['id']] = $parentData;\n            }\n        }\n\n        foreach ($skills as $resultData) {\n            $courseId = $resultData['course_id'];\n            if (!empty($courseId)) {\n                if (isset($courseTempList[$courseId])) {\n                    $courseInfo = $courseTempList[$courseId];\n                } else {\n                    $courseInfo = api_get_course_info_by_id($courseId);\n                    $courseTempList[$courseId] = $courseInfo;\n                }\n            } else {\n                $courseInfo = [];\n            }\n            $tableRow = [\n                'skill_badge' => $resultData['img_small'],\n                'skill_name' => self::translateName($resultData['name']),\n                'short_code' => $resultData['short_code'],\n                'skill_url' => $resultData['url'],\n                'achieved_at' => api_get_local_time($resultData['acquired_skill_at']),\n                'course_image' => '',\n                'course_name' => '',\n            ];\n\n            if (!empty($courseInfo)) {\n                $tableRow['course_image'] = $courseInfo['course_image'];\n                $tableRow['course_name'] = $courseInfo['title'];\n            }\n            $tableRows[] = $tableRow;\n        }\n\n        $isHierarchicalTable = api_get_configuration_value('table_of_hierarchical_skill_presentation');\n        $allowLevels = api_get_configuration_value('skill_levels_names');\n\n        $tableResult = '<div id=\"skillList\">';\n        if ($isHierarchicalTable) {\n            $tableResult = '<div class=\"table-responsive\">';\n        }\n\n        if ($addTitle) {\n            $tableResult .= Display::page_subheader(get_lang('AchievedSkills'));\n            $tableResult .= '<div class=\"skills-badges\">';\n        }\n\n        if (!empty($skillParents)) {\n            if (empty($allowLevels)) {\n                $tableResult .= $this->processSkillListSimple($skills);\n            } else {\n                $graph = new Graph();\n                $graph->setAttribute('graphviz.graph.rankdir', 'LR');\n                foreach ($skillParents as $skillId => $parentList) {\n                    $old = null;\n                    foreach ($parentList as $parent) {\n                        if ($graph->hasVertex($parent['id'])) {\n                            $current = $graph->getVertex($parent['id']);\n                        } else {\n                            $current = $graph->createVertex($parent['id']);\n                            $current->setAttribute('graphviz.data', $parent['data']);\n                        }\n\n                        if (!empty($old)) {\n                            if ($graph->hasVertex($old['id'])) {\n                                $nextVertex = $graph->getVertex($old['id']);\n                            } else {\n                                $nextVertex = $graph->createVertex($old['id']);\n                                $nextVertex->setAttribute('graphviz.data', $old['data']);\n                            }\n\n                            if (!$nextVertex->hasEdgeTo($current)) {\n                                $nextVertex->createEdgeTo($current);\n                            }\n                        }\n                        $old = $parent;\n                    }\n                }\n\n                if ($isHierarchicalTable) {\n                    $table = '<table class =\"table table-bordered\">';\n                    // Getting \"root\" vertex\n                    $root = $graph->getVertex(1);\n                    $table .= '<tr>';\n                    /** @var Vertex $vertex */\n                    foreach ($root->getVerticesEdgeTo() as $vertex) {\n                        $data = $vertex->getAttribute('graphviz.data');\n\n                        $passed = in_array($data['id'], array_keys($skills));\n                        $transparency = '';\n                        if ($passed === false) {\n                            // @todo use a css class\n                            $transparency = 'opacity: 0.4; filter: alpha(opacity=40);';\n                        }\n\n                        $label = $this->processSkillListSimple([$data], 'mini', $transparency);\n                        $table .= '<td >';\n\n                        $table .= '<div class=\"skills_chart\"> <ul><li>'.$label;\n                        $table .= $this->processVertex($vertex, $skills);\n                        $table .= '</ul></li></div>';\n                        $table .= '</td>';\n                    }\n                    $table .= '</tr></table>';\n                } else {\n                    // Getting \"root\" vertex\n                    $root = $graph->getVertex(1);\n                    $table = '';\n                    /** @var Vertex $vertex */\n                    foreach ($root->getVerticesEdgeTo() as $vertex) {\n                        $data = $vertex->getAttribute('graphviz.data');\n\n                        $passed = in_array($data['id'], array_keys($skills));\n                        $transparency = '';\n                        if ($passed === false) {\n                            // @todo use a css class\n                            $transparency = 'opacity: 0.4; filter: alpha(opacity=40);';\n                        }\n\n                        $label = $this->processSkillListSimple([$data], 'mini', $transparency, false);\n\n                        $skillTable = $this->processVertex($vertex, $skills, 2);\n                        $table .= \"<h3>$label</h3>\";\n\n                        if (!empty($skillTable)) {\n                            $table .= '<table class =\"table table-bordered\">';\n                            $table .= '<tr>';\n                            $table .= '<td>';\n                            $table .= '<div>';\n                            $table .= $skillTable;\n                            $table .= '</div>';\n                            $table .= '</td>';\n                            $table .= '</tr></table>';\n                        }\n                    }\n                }\n\n                $tableResult .= $table;\n            }\n        } else {\n            $tableResult .= get_lang('WithoutAchievedSkills');\n        }\n\n        if ($addTitle) {\n            $tableResult .= '</div>';\n        }\n        $tableResult .= '</div>';\n\n        return [\n            'skills' => $tableRows,\n            'table' => $tableResult,\n        ];\n    }\n\n    /**\n     * @param int  $user_id\n     * @param int  $skill_id\n     * @param bool $return_flat_array\n     * @param bool $add_root\n     *\n     * @return array|null\n     */\n    public function getSkillsTree(\n        $user_id = null,\n        $skill_id = null,\n        $return_flat_array = false,\n        $add_root = false\n    ) {\n        if ($skill_id == 1) {\n            $skill_id = 0;\n        }\n        if (isset($user_id) && !empty($user_id)) {\n            $skills = $this->get_all(true, $user_id, null, $skill_id);\n        } else {\n            $skills = $this->get_all(false, false, null, $skill_id);\n        }\n\n        $original_skill = $this->list = $skills;\n\n        // Show 1 item\n        if (!empty($skill_id)) {\n            if ($add_root) {\n                if (!empty($skill_id)) {\n                    // Default root node\n                    $skills[1] = [\n                        'id' => '1',\n                        'name' => get_lang('Root'),\n                        'parent_id' => '0',\n                        'status' => 1,\n                    ];\n                    $skillInfo = $this->getSkillInfo($skill_id);\n\n                    // 2nd node\n                    $skills[$skill_id] = $skillInfo;\n                    // Uncomment code below to hide the searched skill\n                    $skills[$skill_id]['data']['parent_id'] = $skillInfo['extra']['parent_id'];\n                    $skills[$skill_id]['parent_id'] = 1;\n                }\n            }\n        }\n\n        $refs = [];\n        $skills_tree = null;\n\n        // Create references for all nodes\n        $flat_array = [];\n        $family = [];\n        if (!empty($skills)) {\n            foreach ($skills as &$skill) {\n                if ($skill['parent_id'] == 0) {\n                    $skill['parent_id'] = 'root';\n                }\n\n                // because except main keys (id, name, children) others keys\n                // are not saved while in the space tree\n                $skill['data'] = ['parent_id' => $skill['parent_id']];\n\n                // If a short code was defined, send the short code to replace\n                // skill name (to shorten the text in the wheel)\n                if (!empty($skill['short_code']) &&\n                    api_get_setting('show_full_skill_name_on_skill_wheel') === 'false'\n                ) {\n                    $skill['data']['short_code'] = $skill['short_code'];\n                }\n\n                $skill['data']['name'] = $skill['name'];\n                $skill['data']['status'] = $skill['status'];\n\n                // In order to paint all members of a family with the same color\n                if (empty($skill_id)) {\n                    if ($skill['parent_id'] == 1) {\n                        $family[$skill['id']] = $this->getAllChildren($skill['id']);\n                    }\n                } else {\n                    if ($skill['parent_id'] == $skill_id) {\n                        $family[$skill['id']] = $this->getAllChildren($skill['id']);\n                    }\n                    /*if ($skill_id == $skill['id']) {\n                        $skill['parent_id'] = 1;\n                    }*/\n                }\n\n                if (!isset($skill['data']['real_parent_id'])) {\n                    $skill['data']['real_parent_id'] = $skill['parent_id'];\n                }\n\n                // User achieved the skill (depends in the gradebook with certification)\n                $skill['data']['achieved'] = false;\n                if ($user_id) {\n                    $skill['data']['achieved'] = $this->userHasSkill(\n                        $user_id,\n                        $skill['id']\n                    );\n                }\n\n                // Check if the skill has related gradebooks\n                $skill['data']['skill_has_gradebook'] = false;\n                if (isset($skill['gradebooks']) && !empty($skill['gradebooks'])) {\n                    $skill['data']['skill_has_gradebook'] = true;\n                }\n                $refs[$skill['id']] = &$skill;\n                $flat_array[$skill['id']] = &$skill;\n            }\n\n            // Checking family value\n\n            $family_id = 1;\n            $new_family_array = [];\n            foreach ($family as $main_family_id => $family_items) {\n                if (!empty($family_items)) {\n                    foreach ($family_items as $item) {\n                        $new_family_array[$item['id']] = $family_id;\n                    }\n                }\n                $new_family_array[$main_family_id] = $family_id;\n                $family_id++;\n            }\n\n            if (empty($original_skill)) {\n                $refs['root']['children'][0] = $skills[1];\n                $skills[$skill_id]['data']['family_id'] = 1;\n                $refs['root']['children'][0]['children'][0] = $skills[$skill_id];\n                $flat_array[$skill_id] = $skills[$skill_id];\n            } else {\n                // Moving node to the children index of their parents\n                foreach ($skills as $my_skill_id => &$skill) {\n                    if (isset($new_family_array[$skill['id']])) {\n                        $skill['data']['family_id'] = $new_family_array[$skill['id']];\n                    }\n                    $refs[$skill['parent_id']]['children'][] = &$skill;\n                    $flat_array[$my_skill_id] = $skill;\n                }\n            }\n\n            $skills_tree = [\n                'name' => get_lang('SkillRootName'),\n                'id' => 'root',\n                'children' => $refs['root']['children'],\n                'data' => [],\n            ];\n        }\n\n        if ($return_flat_array) {\n            return $flat_array;\n        }\n        unset($skills);\n\n        return $skills_tree;\n    }\n\n    /**\n     * Get skills tree as a simplified JSON structure.\n     *\n     * @param int user id\n     * @param int skill id\n     * @param bool return a flat array or not\n     * @param int depth of the skills\n     *\n     * @return string json\n     */\n    public function getSkillsTreeToJson(\n        $user_id = null,\n        $skill_id = null,\n        $return_flat_array = false,\n        $main_depth = 2\n    ) {\n        $tree = $this->getSkillsTree(\n            $user_id,\n            $skill_id,\n            $return_flat_array,\n            true\n        );\n        $simple_tree = [];\n        if (!empty($tree['children'])) {\n            foreach ($tree['children'] as $element) {\n                $children = [];\n                if (isset($element['children'])) {\n                    $children = $this->getSkillToJson($element['children'], 1, $main_depth);\n                }\n                $simple_tree[] = [\n                    'name' => $element['name'],\n                    'children' => $children,\n                ];\n            }\n        }\n\n        return json_encode($simple_tree[0]['children']);\n    }\n\n    /**\n     * Get JSON element.\n     *\n     * @param array $subtree\n     * @param int   $depth\n     * @param int   $max_depth\n     *\n     * @return array|null\n     */\n    public function getSkillToJson($subtree, $depth = 1, $max_depth = 2)\n    {\n        $simple_sub_tree = [];\n        if (is_array($subtree)) {\n            $counter = 1;\n            foreach ($subtree as $elem) {\n                $tmp = [];\n                $tmp['name'] = $elem['name'];\n                $tmp['id'] = $elem['id'];\n                $tmp['isSearched'] = self::isSearched($elem['id']);\n\n                if (isset($elem['children']) && is_array($elem['children'])) {\n                    $tmp['children'] = $this->getSkillToJson(\n                        $elem['children'],\n                        $depth + 1,\n                        $max_depth\n                    );\n                }\n\n                if ($depth > $max_depth) {\n                    continue;\n                }\n\n                $tmp['depth'] = $depth;\n                $tmp['counter'] = $counter;\n                $counter++;\n\n                if (isset($elem['data']) && is_array($elem['data'])) {\n                    foreach ($elem['data'] as $key => $item) {\n                        $tmp[$key] = $item;\n                    }\n                }\n                $simple_sub_tree[] = $tmp;\n            }\n\n            return $simple_sub_tree;\n        }\n\n        return null;\n    }\n\n    /**\n     * @param int $user_id\n     *\n     * @return bool\n     */\n    public function getUserSkillRanking($user_id)\n    {\n        $user_id = (int) $user_id;\n        $sql = \"SELECT count(skill_id) count\n                FROM {$this->table} s\n                INNER JOIN {$this->table_skill_rel_user} su\n                ON (s.id = su.skill_id)\n                WHERE user_id = $user_id\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $result = Database::fetch_row($result);\n\n            return $result[0];\n        }\n\n        return false;\n    }\n\n    /**\n     * @param $start\n     * @param $limit\n     * @param $sidx\n     * @param $sord\n     * @param $where_condition\n     *\n     * @return array\n     */\n    public function getUserListSkillRanking(\n        $start,\n        $limit,\n        $sidx,\n        $sord,\n        $where_condition\n    ) {\n        $start = (int) $start;\n        $limit = (int) $limit;\n\n        /*  ORDER BY $sidx $sord */\n        $sql = \"SELECT *, @rownum:=@rownum+1 rank FROM (\n                    SELECT u.user_id, firstname, lastname, count(username) skills_acquired\n                    FROM {$this->table} s INNER JOIN {$this->table_skill_rel_user} su ON (s.id = su.skill_id)\n                    INNER JOIN {$this->table_user} u ON u.user_id = su.user_id, (SELECT @rownum:=0) r\n                    WHERE 1=1 $where_condition\n                    GROUP BY username\n                    ORDER BY skills_acquired desc\n                    LIMIT $start , $limit)  AS T1, (SELECT @rownum:=0) r\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            return Database::store_result($result, 'ASSOC');\n        }\n\n        return [];\n    }\n\n    /**\n     * @return int\n     */\n    public function getUserListSkillRankingCount()\n    {\n        $sql = \"SELECT count(*) FROM (\n                    SELECT count(distinct 1)\n                    FROM {$this->table} s\n                    INNER JOIN {$this->table_skill_rel_user} su\n                    ON (s.id = su.skill_id)\n                    INNER JOIN {$this->table_user} u\n                    ON u.user_id = su.user_id\n                    GROUP BY username\n                 ) as T1\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $result = Database::fetch_row($result);\n\n            return $result[0];\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param string $courseCode\n     *\n     * @return int\n     */\n    public function getCountSkillsByCourse($courseCode)\n    {\n        $courseCode = Database::escape_string($courseCode);\n        $sql = \"SELECT count(skill_id) as count\n                FROM {$this->table_gradebook} g\n                INNER JOIN {$this->table_skill_rel_gradebook} sg\n                ON g.id = sg.gradebook_id\n                WHERE course_code = '$courseCode'\";\n\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $result = Database::fetch_row($result);\n\n            return $result[0];\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param int $skillId\n     *\n     * @return array\n     */\n    public function getCoursesBySkill($skillId)\n    {\n        $skillId = (int) $skillId;\n        $sql = \"SELECT c.title, c.code\n                FROM {$this->table_gradebook} g\n                INNER JOIN {$this->table_skill_rel_gradebook} sg\n                ON g.id = sg.gradebook_id\n                INNER JOIN {$this->table_course} c\n                ON c.code = g.course_code\n                WHERE sg.skill_id = $skillId\n                AND (g.session_id IS NULL OR g.session_id = 0)\";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * Check if the user has the skill.\n     *\n     * @param int $userId    The user id\n     * @param int $skillId   The skill id\n     * @param int $courseId  Optional. The course id\n     * @param int $sessionId Optional. The session id\n     *\n     * @return bool Whether the user has the skill return true. Otherwise return false\n     */\n    public function userHasSkill($userId, $skillId, $courseId = 0, $sessionId = 0)\n    {\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n\n        $whereConditions = [\n            'user_id = ? ' => (int) $userId,\n            'AND skill_id = ? ' => (int) $skillId,\n        ];\n\n        if ($courseId > 0) {\n            if ($sessionId) {\n                $whereConditions['AND course_id = ? '] = $courseId;\n                $whereConditions['AND session_id = ? '] = $sessionId;\n            } else {\n                $whereConditions['AND course_id = ? AND session_id is NULL'] = $courseId;\n            }\n        }\n\n        $result = Database::select(\n            'COUNT(1) AS qty',\n            $this->table_skill_rel_user,\n            [\n                'where' => $whereConditions,\n            ],\n            'first'\n        );\n\n        if ($result != false) {\n            if ($result['qty'] > 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if a skill is searched.\n     *\n     * @param int $id The skill id\n     *\n     * @return bool Whether el skill is searched return true. Otherwise return false\n     */\n    public static function isSearched($id)\n    {\n        $id = (int) $id;\n\n        if (empty($id)) {\n            return false;\n        }\n\n        $skillRelProfileTable = Database::get_main_table(TABLE_MAIN_SKILL_REL_PROFILE);\n\n        $result = Database::select(\n            'COUNT( DISTINCT `skill_id`) AS qty',\n            $skillRelProfileTable,\n            [\n                'where' => [\n                    'skill_id = ?' => $id,\n                ],\n            ],\n            'first'\n        );\n\n        if ($result === false) {\n            return false;\n        }\n\n        if ($result['qty'] > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the achieved skills by course.\n     *\n     * @param int $courseId The course id\n     *\n     * @return array The skills list\n     */\n    public function listAchievedByCourse($courseId)\n    {\n        $courseId = (int) $courseId;\n\n        if ($courseId == 0) {\n            return [];\n        }\n\n        $list = [];\n\n        $sql = \"SELECT\n                    course.id c_id,\n                    course.title c_name,\n                    course.directory c_directory,\n                    user.user_id,\n                    user.lastname,\n                    user.firstname,\n                    user.username,\n                    skill.id skill_id,\n                    skill.name skill_name,\n                    sru.acquired_skill_at\n                FROM {$this->table_skill_rel_user} AS sru\n                INNER JOIN {$this->table_course}\n                ON sru.course_id = course.id\n                INNER JOIN {$this->table_user}\n                ON sru.user_id = user.user_id\n                INNER JOIN {$this->table}\n                ON sru.skill_id = skill.id\n                WHERE course.id = $courseId\";\n\n        $result = Database::query($sql);\n\n        while ($row = Database::fetch_assoc($result)) {\n            $row['skill_name'] = self::translateName($row['skill_name']);\n            $list[] = $row;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Get the users list who achieved a skill.\n     *\n     * @param int $skillId The skill id\n     *\n     * @return array The users list\n     */\n    public function listUsersWhoAchieved($skillId)\n    {\n        $skillId = (int) $skillId;\n\n        if ($skillId == 0) {\n            return [];\n        }\n\n        $list = [];\n        $sql = \"SELECT\n                    course.id c_id,\n                    course.title c_name,\n                    course.directory c_directory,\n                    user.user_id,\n                    user.lastname,\n                    user.firstname,\n                    user.username,\n                    skill.id skill_id,\n                    skill.name skill_name,\n                    sru.acquired_skill_at\n                FROM {$this->table_skill_rel_user} AS sru\n                INNER JOIN {$this->table_course}\n                ON sru.course_id = course.id\n                INNER JOIN {$this->table_user}\n                ON sru.user_id = user.user_id\n                INNER JOIN {$this->table}\n                ON sru.skill_id = skill.id\n                WHERE skill.id = $skillId \";\n\n        $result = Database::query($sql);\n        while ($row = Database::fetch_assoc($result)) {\n            $row['skill_name'] = self::translateName($row['skill_name']);\n            $list[] = $row;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Get the session list where the user can achieve a skill.\n     *\n     * @param int $skillId The skill id\n     *\n     * @return array\n     */\n    public function getSessionsBySkill($skillId)\n    {\n        $skillId = (int) $skillId;\n\n        $sql = \"SELECT s.id, s.name\n                FROM {$this->table_gradebook} g\n                INNER JOIN {$this->table_skill_rel_gradebook} sg\n                ON g.id = sg.gradebook_id\n                INNER JOIN {$this->sessionTable} s\n                ON g.session_id = s.id\n                WHERE sg.skill_id = $skillId\n                AND g.session_id > 0\";\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * Check if the $fromUser can comment the $toUser skill issue.\n     *\n     * @param User $fromUser\n     * @param User $toUser\n     *\n     * @return bool\n     */\n    public static function userCanAddFeedbackToUser($fromUser, $toUser)\n    {\n        if (api_is_platform_admin()) {\n            return true;\n        }\n\n        $userRepo = UserManager::getRepository();\n        $fromUserStatus = $fromUser->getStatus();\n\n        switch ($fromUserStatus) {\n            case SESSIONADMIN:\n                if (api_get_setting('allow_session_admins_to_manage_all_sessions') === 'true') {\n                    if ($toUser->getCreatorId() === $fromUser->getId()) {\n                        return true;\n                    }\n                }\n\n                $sessionAdmins = $userRepo->getSessionAdmins($toUser);\n\n                foreach ($sessionAdmins as $sessionAdmin) {\n                    if ($sessionAdmin->getId() !== $fromUser->getId()) {\n                        continue;\n                    }\n\n                    return true;\n                }\n                break;\n            case STUDENT_BOSS:\n                $studentBosses = $userRepo->getStudentBosses($toUser);\n                foreach ($studentBosses as $studentBoss) {\n                    if ($studentBoss->getId() !== $fromUser->getId()) {\n                        continue;\n                    }\n\n                    return true;\n                }\n                break;\n            case DRH:\n                return UserManager::is_user_followed_by_drh(\n                    $toUser->getId(),\n                    $fromUser->getId()\n                );\n        }\n\n        return false;\n    }\n\n    /**\n     * If $studentId is set then check if current user has the right to see\n     * the page.\n     *\n     * @param int  $studentId check if current user has access to see $studentId\n     * @param bool $blockPage raise a api_not_allowed()\n     *\n     * @return bool\n     */\n    public static function isAllowed($studentId = 0, $blockPage = true)\n    {\n        $allowHR = api_get_setting('allow_hr_skills_management') === 'true';\n\n        if (self::isToolAvailable()) {\n            if (api_is_platform_admin(false, $allowHR)) {\n                return true;\n            }\n\n            if (!empty($studentId)) {\n                $currentUserId = api_get_user_id();\n                if ((int) $currentUserId === (int) $studentId) {\n                    return true;\n                }\n\n                $haveAccess = self::hasAccessToUserSkill(\n                    $currentUserId,\n                    $studentId\n                );\n\n                if ($haveAccess) {\n                    return true;\n                }\n            }\n        }\n\n        if ($blockPage) {\n            api_not_allowed(true);\n        }\n\n        return false;\n    }\n\n    /**\n     * @return bool\n     */\n    public static function isToolAvailable()\n    {\n        $allowTool = api_get_setting('allow_skills_tool');\n\n        if ($allowTool === 'true') {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $currentUserId\n     * @param int $studentId\n     *\n     * @return bool\n     */\n    public static function hasAccessToUserSkill($currentUserId, $studentId)\n    {\n        if (self::isToolAvailable()) {\n            if (api_is_platform_admin()) {\n                return true;\n            }\n\n            $currentUserId = (int) $currentUserId;\n            $studentId = (int) $studentId;\n\n            if ($currentUserId === $studentId) {\n                return true;\n            }\n\n            if (api_is_student_boss()) {\n                $isBoss = UserManager::userIsBossOfStudent($currentUserId, $studentId);\n                if ($isBoss) {\n                    return true;\n                }\n            }\n\n            $allow = api_get_configuration_value('allow_private_skills');\n            if ($allow === true) {\n                if (api_is_teacher()) {\n                    return UserManager::isTeacherOfStudent(\n                        $currentUserId,\n                        $studentId\n                    );\n                }\n\n                if (api_is_drh()) {\n                    return UserManager::is_user_followed_by_drh(\n                        $studentId,\n                        $currentUserId\n                    );\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get skills.\n     *\n     * @param int $userId\n     * @param int level\n     *\n     * @return array\n     */\n    public function getStudentSkills($userId, $level = 0)\n    {\n        $userId = (int) $userId;\n\n        $sql = \"SELECT s.id, s.name, sru.acquired_skill_at\n                FROM {$this->table} s\n                INNER JOIN {$this->table_skill_rel_user} sru\n                ON s.id = sru.skill_id\n                WHERE sru.user_id = $userId\";\n\n        $result = Database::query($sql);\n\n        $skills = [];\n        foreach ($result as $item) {\n            if (empty($level)) {\n                $skills[] = [\n                    'name' => self::translateName($item['name']),\n                    'acquired_skill_at' => $item['acquired_skill_at'],\n                ];\n            } else {\n                $parents = self::get_parents($item['id']);\n                // +2 because it takes into account the root\n                if (count($parents) == $level + 1) {\n                    $skills[] = [\n                        'name' => self::translateName($item['name']),\n                        'acquired_skill_at' => $item['acquired_skill_at'],\n                    ];\n                }\n            }\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return string\n     */\n    public static function translateName($name)\n    {\n        $variable = ChamiloApi::getLanguageVar($name, 'Skill');\n\n        return isset($GLOBALS[$variable]) ? $GLOBALS[$variable] : $name;\n    }\n\n    /**\n     * @param string $code\n     *\n     * @return mixed|string\n     */\n    public static function translateCode($code)\n    {\n        if (empty($code)) {\n            return '';\n        }\n\n        $variable = ChamiloApi::getLanguageVar($code, 'SkillCode');\n\n        return isset($GLOBALS[$variable]) ? $GLOBALS[$variable] : $code;\n    }\n\n    /**\n     * @param array $skillInfo\n     *\n     * @return array\n     */\n    public function setForm(FormValidator &$form, $skillInfo = [])\n    {\n        $allSkills = $this->get_all();\n        $objGradebook = new Gradebook();\n\n        $isAlreadyRootSkill = false;\n        foreach ($allSkills as $checkedSkill) {\n            if (intval($checkedSkill['parent_id']) > 0) {\n                $isAlreadyRootSkill = true;\n                break;\n            }\n        }\n\n        $skillList = $isAlreadyRootSkill ? [] : [0 => get_lang('None')];\n\n        foreach ($allSkills as $skill) {\n            if (isset($skillInfo['id']) && $skill['id'] == $skillInfo['id']) {\n                continue;\n            }\n\n            $skillList[$skill['id']] = $skill['name'];\n        }\n\n        $allGradeBooks = $objGradebook->find('all');\n\n        // This procedure is for check if there is already a Skill with no Parent (Root by default)\n        $gradeBookList = [];\n        foreach ($allGradeBooks as $gradebook) {\n            $gradeBookList[$gradebook['id']] = $gradebook['name'];\n        }\n\n        $translateUrl = api_get_path(WEB_CODE_PATH).'admin/skill_translate.php?';\n        $translateNameButton = '';\n        $translateCodeButton = '';\n        $skillId = null;\n        if (!empty($skillInfo)) {\n            $skillId = $skillInfo['id'];\n            $translateNameUrl = $translateUrl.http_build_query(['skill' => $skillId, 'action' => 'name']);\n            $translateCodeUrl = $translateUrl.http_build_query(['skill' => $skillId, 'action' => 'code']);\n            $translateNameButton = Display::toolbarButton(\n                get_lang('TranslateThisTerm'),\n                $translateNameUrl,\n                'language',\n                'link'\n            );\n            $translateCodeButton = Display::toolbarButton(\n                get_lang('TranslateThisTerm'),\n                $translateCodeUrl,\n                'language',\n                'link'\n            );\n        }\n\n        $form->addText('name', [get_lang('Name'), $translateNameButton], true, ['id' => 'name']);\n        $form->addText('short_code', [get_lang('ShortCode'), $translateCodeButton], false, ['id' => 'short_code']);\n\n        // Cannot change parent of root\n        if ($skillId != 1) {\n            $form->addSelect('parent_id', get_lang('Parent'), $skillList, ['id' => 'parent_id']);\n        }\n\n        $form->addSelect(\n            'gradebook_id',\n            [get_lang('Gradebook'), get_lang('WithCertificate')],\n            $gradeBookList,\n            ['id' => 'gradebook_id', 'multiple' => 'multiple', 'size' => 10]\n        );\n        $form->addTextarea('description', get_lang('Description'), ['id' => 'description', 'rows' => 7]);\n        $form->addTextarea('criteria', get_lang('CriteriaToEarnTheBadge'), ['id' => 'criteria', 'rows' => 7]);\n\n        // EXTRA FIELDS\n        $extraField = new ExtraField('skill');\n        $returnParams = $extraField->addElements($form, $skillId);\n\n        if (empty($skillInfo)) {\n            $form->addButtonCreate(get_lang('Add'));\n        } else {\n            $form->addButtonUpdate(get_lang('Update'));\n            $form->addHidden('id', $skillInfo['id']);\n        }\n\n        return $returnParams;\n    }\n\n    /**\n     * @return string\n     */\n    public function getToolBar()\n    {\n        $toolbar = Display::url(\n            Display::return_icon(\n                'back.png',\n                get_lang('ManageSkills'),\n                null,\n                ICON_SIZE_MEDIUM\n            ),\n            api_get_path(WEB_CODE_PATH).'admin/skill_list.php'\n        );\n        $actions = '<div class=\"actions\">'.$toolbar.'</div>';\n\n        return $actions;\n    }\n\n    /**\n     * @param SkillRelItemRelUser $skillRelItemRelUser\n     */\n    public static function getUserSkillStatusLabel(SkillRelItem $skillRelItem, SkillRelItemRelUser $skillRelItemRelUser = null, bool $addHeader = true, int $userId = 0): string\n    {\n        if (empty($skillRelItem)) {\n            return '';\n        }\n        $type = 'success';\n        if (empty($skillRelItemRelUser)) {\n            $type = '';\n        }\n        $label = '';\n        $skill = $skillRelItem->getSkill();\n        if ($addHeader) {\n            $label .= '<span id=\"skill-'.$skill->getId().'-'.$userId.'\" class=\"user_skill\" style=\"cursor:pointer\">';\n        }\n        $label .= Display::label($skill->getName(), $type);\n        if ($addHeader) {\n            $label .= '</span>&nbsp;';\n        }\n\n        return $label;\n    }\n\n    /**\n     * Attach a list of skills (skill_rel_item) potentially assigned to a user to the given form.\n     *\n     * @param int  $typeId    see ITEM_TYPE_* constants\n     * @param bool $addHeader Whether to show the 'Skills' title for this block\n     */\n    public static function addSkillsToUserForm(FormValidator $form, int $typeId, int $itemId, int $userId, int $resultId = 0, bool $addHeader = false): void\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if ($allowSkillInTools && !empty($typeId) && !empty($itemId) && !empty($userId)) {\n            $em = Database::getManager();\n            $items = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n\n            $skillRelUser = new SkillRelUser();\n            $skillUserList = $skillRelUser->getUserSkills($userId);\n            if (!empty($skillUserList)) {\n                $skillUserList = array_column($skillUserList, 'skill_id');\n            }\n\n            $skills = '';\n            /** @var SkillRelItem $skillRelItem */\n            foreach ($items as $skillRelItem) {\n                $criteria = [\n                    'user' => $userId,\n                    'skillRelItem' => $skillRelItem,\n                ];\n                $skillRelItemRelUser = $em->getRepository('ChamiloSkillBundle:SkillRelItemRelUser')->findOneBy($criteria);\n                $skills .= self::getUserSkillStatusLabel($skillRelItem, $skillRelItemRelUser, true, $userId);\n            }\n\n            if (!empty($skills)) {\n                $url = api_get_path(WEB_AJAX_PATH).'skill.ajax.php?a=update_skill_rel_user&'.api_get_cidreq();\n                $params = [\n                    'item_id' => $itemId,\n                    'type_id' => $typeId,\n                    'user_id' => $userId,\n                    'course_id' => api_get_course_int_id(),\n                    'session_id' => api_get_session_id(),\n                    'result_id' => $resultId,\n                ];\n                $params = json_encode($params);\n                if ($addHeader) {\n                    $form->addHtml(Display::page_subheader2(get_lang('Skills')));\n                }\n\n                $skillId = $skillRelItem->getSkill()->getId();\n                $elementId = 'skill-'.$skillId.'-'.$userId;\n                $html = '\n                <script>\n                    $(function() {\n                        $(\"#'.$elementId.'\").on(\"click\", function() {\n                            var params = '.$params.';\n                            $.ajax({\n                                type: \"GET\",\n                                async: false,\n                                data: params,\n                                url: \"'.$url.'&skill_id=\"+'.$skillId.',\n                                success: function(result) {\n                                    $(\"#'.$elementId.'.user_skill\").html(result);\n                                }\n                            });\n                        });\n                    });\n                </script>\n                ';\n                $form->addHtml($html);\n                $form->addLabel(get_lang('Skills'), $skills);\n                if ($addHeader) {\n                    $form->addHtml('<br />');\n                }\n            }\n        }\n    }\n\n    /**\n     * Shows a list of skills (skill_rel_item) potentially assigned to a user\n     * to the given form, with AJAX action on click to save the assignment.\n     * Assigned skills appear in a different colour.\n     *\n     * @param int  $typeId    see ITEM_TYPE_* constants\n     * @param bool $addHeader Whether to show the 'Skills' title for this block\n     */\n    public static function getAddSkillsToUserBlock(int $typeId, int $itemId, int $userId, int $resultId = 0, bool $addHeader = false): string\n    {\n        $block = '';\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if ($allowSkillInTools && !empty($typeId) && !empty($itemId) && !empty($userId)) {\n            $em = Database::getManager();\n            $items = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n\n            $skills = '';\n            /** @var SkillRelItem $skillRelItem */\n            foreach ($items as $skillRelItem) {\n                $criteria = [\n                    'user' => $userId,\n                    'skillRelItem' => $skillRelItem,\n                ];\n                $skillRelItemRelUser = $em->getRepository('ChamiloSkillBundle:SkillRelItemRelUser')->findOneBy($criteria);\n                $skills .= self::getUserSkillStatusLabel($skillRelItem, $skillRelItemRelUser, true, $userId);\n            }\n            $block .= $skills;\n\n            if (!empty($skills)) {\n                $url = api_get_path(WEB_AJAX_PATH).'skill.ajax.php?a=update_skill_rel_user&'.api_get_cidreq();\n                $params = [\n                    'item_id' => $itemId,\n                    'type_id' => $typeId,\n                    'user_id' => $userId,\n                    'course_id' => api_get_course_int_id(),\n                    'session_id' => api_get_session_id(),\n                    'result_id' => $resultId,\n                ];\n                $params = json_encode($params);\n                if ($addHeader) {\n                    $block .= Display::page_subheader2(get_lang('Skills'));\n                }\n\n                $skillId = $skillRelItem->getSkill()->getId();\n                $elementId = 'skill-'.$skillId.'-'.$userId;\n                $html = '\n                <script>\n                    $(function() {\n                        $(\"#'.$elementId.'\").on(\"click\", function() {\n                            var params = '.$params.';\n                            $.ajax({\n                                type: \"GET\",\n                                async: false,\n                                data: params,\n                                url: \"'.$url.'&skill_id=\"+'.$skillId.',\n                                success: function(result) {\n                                    $(\"#'.$elementId.'.user_skill\").html(result);\n                                }\n                            });\n                        });\n                    });\n                </script>\n                ';\n                $block .= $html;\n                //$block .= $form->addLabel(get_lang('Skills'), $skills);\n                if ($addHeader) {\n                    $block .= '<br />';\n                }\n            }\n        }\n\n        return $block;\n    }\n\n    /**\n     * Add skills select ajax for an item (exercise, lp).\n     *\n     * @param int $courseId\n     * @param int $sessionId\n     * @param int $typeId    see ITEM_TYPE_* constants\n     * @param int $itemId\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public static function addSkillsToForm(FormValidator $form, $courseId, $sessionId, $typeId, $itemId = 0)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if (!$allowSkillInTools) {\n            return [];\n        }\n\n        if (empty($sessionId)) {\n            $sessionId = null;\n        }\n\n        $em = Database::getManager();\n        $skillRelCourseRepo = $em->getRepository('ChamiloSkillBundle:SkillRelCourse');\n        $items = $skillRelCourseRepo->findBy(['course' => $courseId, 'session' => $sessionId]);\n\n        $skills = [];\n        /** @var \\Chamilo\\SkillBundle\\Entity\\SkillRelCourse $skillRelCourse */\n        foreach ($items as $skillRelCourse) {\n            $skills[] = $skillRelCourse->getSkill();\n        }\n\n        $selectedSkills = [];\n        if (!empty($itemId)) {\n            $items = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n            /** @var SkillRelItem $skillRelItem */\n            foreach ($items as $skillRelItem) {\n                $selectedSkills[] = $skillRelItem->getSkill()->getId();\n            }\n        }\n\n        self::skillsToCheckbox($form, $skills, $courseId, $sessionId, $selectedSkills);\n\n        return $skills;\n    }\n\n    /**\n     * @param int $courseId\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function getSkillRelItemsPerCourse($courseId, $sessionId = null)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        $skills = [];\n\n        if (empty($sessionId)) {\n            $sessionId = null;\n        }\n\n        if ($allowSkillInTools) {\n            $em = Database::getManager();\n            $skills = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['courseId' => $courseId, 'sessionId' => $sessionId]\n            );\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param int $itemId\n     * @param int $itemType\n     *\n     * @return array\n     */\n    public static function getItemInfo($itemId, $itemType)\n    {\n        $itemInfo = [];\n        $itemId = (int) $itemId;\n        $itemType = (int) $itemType;\n        $em = Database::getManager();\n\n        switch ($itemType) {\n            case ITEM_TYPE_EXERCISE:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CQuiz $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CQuiz')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getTitle();\n                }\n                break;\n            case ITEM_TYPE_HOTPOTATOES:\n                break;\n            case ITEM_TYPE_LINK:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CLink $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CLink')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getTitle();\n                }\n                break;\n            case ITEM_TYPE_LEARNPATH:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CLp $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CLp')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getName();\n                }\n                break;\n            case ITEM_TYPE_GRADEBOOK:\n                break;\n            case ITEM_TYPE_STUDENT_PUBLICATION:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CStudentPublication $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CStudentPublication')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getTitle();\n                }\n                break;\n            //ITEM_TYPE_FORUM', 7);\n            case ITEM_TYPE_ATTENDANCE:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CAttendance $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CAttendance')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getName();\n                }\n                break;\n            case ITEM_TYPE_SURVEY:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CSurvey $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CSurvey')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = strip_tags($item->getTitle());\n                }\n                break;\n            case ITEM_TYPE_FORUM_THREAD:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CForumThread $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CForumThread')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getThreadTitle();\n                }\n                break;\n        }\n\n        return $itemInfo;\n    }\n\n    /**\n     * @param int $typeId\n     * @param int $itemId\n     *\n     * @return array\n     */\n    public static function getSkillRelItems($typeId, $itemId)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        $skills = [];\n        if ($allowSkillInTools) {\n            $em = Database::getManager();\n            $skills = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param int $typeId\n     * @param int $itemId\n     *\n     * @return string\n     */\n    public static function getSkillRelItemsToString($typeId, $itemId)\n    {\n        $skills = self::getSkillRelItems($typeId, $itemId);\n        $skillToString = '';\n        if (!empty($skills)) {\n            /** @var SkillRelItem $skillRelItem */\n            $skillList = [];\n            foreach ($skills as $skillRelItem) {\n                $skillList[] = Display::label($skillRelItem->getSkill()->getName(), 'success');\n            }\n            $skillToString = '&nbsp;'.implode(' ', $skillList);\n        }\n\n        return $skillToString;\n    }\n\n    /**\n     * @param int $itemId\n     * @param int $typeId\n     */\n    public static function deleteSkillsFromItem($itemId, $typeId)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if ($allowSkillInTools) {\n            $itemId = (int) $itemId;\n            $typeId = (int) $typeId;\n\n            $em = Database::getManager();\n            // Delete old ones\n            $items = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n\n            /** @var SkillRelItem $skillRelItem */\n            foreach ($items as $skillRelItem) {\n                $em->remove($skillRelItem);\n            }\n            $em->flush();\n        }\n    }\n\n    /**\n     * Builds a list of skills attributable to this course+session in a checkbox input list for FormValidator.\n     *\n     * @param     $courseId\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function setSkillsToCourse(FormValidator $form, $courseId, $sessionId = 0)\n    {\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n\n        $form->addHidden('course_id', $courseId);\n        $form->addHidden('session_id', $sessionId);\n\n        if (empty($sessionId)) {\n            $sessionId = null;\n        }\n\n        $em = Database::getManager();\n        $skillRelCourseRepo = $em->getRepository('ChamiloSkillBundle:SkillRelCourse');\n        $items = $skillRelCourseRepo->findBy(['course' => $courseId, 'session' => $sessionId]);\n\n        $skillsIdList = [];\n        $skills = [];\n        /** @var \\Chamilo\\SkillBundle\\Entity\\SkillRelCourse $skillRelCourse */\n        foreach ($items as $skillRelCourse) {\n            $skillId = $skillRelCourse->getSkill()->getId();\n            $skills[] = $skillRelCourse->getSkill();\n            $skillsIdList[] = $skillId;\n        }\n\n        $group = self::skillsToCheckbox($form, $skills, $courseId, $sessionId, $skillsIdList);\n        $group->freeze();\n\n        return [];\n    }\n\n    /**\n     * Show a list of skills attributable to this course+session in a checkbox input list for FormValidator.\n     *\n     * @param       $skills\n     * @param       $courseId\n     * @param       $sessionId\n     * @param array $selectedSkills\n     *\n     * @return HTML_QuickForm_Element|HTML_QuickForm_group\n     */\n    public static function skillsToCheckbox(FormValidator $form, $skills, $courseId, $sessionId, $selectedSkills = [])\n    {\n        $em = Database::getManager();\n        $skillRelItemRepo = $em->getRepository('ChamiloSkillBundle:SkillRelItem');\n        $skillList = [];\n        /** @var \\Chamilo\\CoreBundle\\Entity\\Skill $skill */\n        foreach ($skills as $skill) {\n            $skillList[$skill->getId()] = $skill->getName();\n        }\n\n        if (!empty($skillList)) {\n            asort($skillList);\n        }\n\n        if (empty($sessionId)) {\n            $sessionId = null;\n        }\n\n        $elements = [];\n        foreach ($skillList as $skillId => $skill) {\n            $countLabel = '';\n            $skillRelItemCount = $skillRelItemRepo->count(\n                ['skill' => $skillId, 'courseId' => $courseId, 'sessionId' => $sessionId]\n            );\n            if (!empty($skillRelItemCount)) {\n                $countLabel = '&nbsp;'.Display::badge($skillRelItemCount, 'info');\n            }\n\n            $element = $form->createElement(\n                'checkbox',\n                \"skills[$skillId]\",\n                null,\n                $skill.$countLabel\n            );\n\n            if (in_array($skillId, $selectedSkills)) {\n                $element->setValue(1);\n            }\n\n            $elements[] = $element;\n        }\n\n        return $form->addGroup($elements, '', get_lang('Skills'));\n    }\n\n    /**\n     * Relate skill with an item (exercise, gradebook, lp, etc).\n     *\n     * @return bool\n     */\n    public static function saveSkillsToCourseFromForm(FormValidator $form)\n    {\n        $skills = (array) $form->getSubmitValue('skills');\n        $courseId = (int) $form->getSubmitValue('course_id');\n        $sessionId = (int) $form->getSubmitValue('session_id');\n\n        if (!empty($skills)) {\n            $skills = array_keys($skills);\n        }\n\n        return self::saveSkillsToCourse($skills, $courseId, $sessionId);\n    }\n\n    /**\n     * @param array $skills\n     * @param int   $courseId\n     * @param int   $sessionId\n     *\n     * @return bool\n     */\n    public static function saveSkillsToCourse($skills, $courseId, $sessionId)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if (!$allowSkillInTools) {\n            return false;\n        }\n\n        $em = Database::getManager();\n        $sessionId = empty($sessionId) ? null : (int) $sessionId;\n\n        $course = api_get_course_entity($courseId);\n        if (empty($course)) {\n            return false;\n        }\n\n        $session = null;\n        if (!empty($sessionId)) {\n            $session = api_get_session_entity($sessionId);\n            $courseExistsInSession = SessionManager::sessionHasCourse($sessionId, $course->getCode());\n            if (!$courseExistsInSession) {\n                return false;\n            }\n        }\n\n        // Delete old ones\n        $items = $em->getRepository('ChamiloSkillBundle:SkillRelCourse')->findBy(\n            ['course' => $courseId, 'session' => $sessionId]\n        );\n\n        if (!empty($items)) {\n            /** @var SkillRelCourse $item */\n            foreach ($items as $item) {\n                if (!in_array($item->getSkill()->getId(), $skills)) {\n                    $em->remove($item);\n                }\n            }\n            $em->flush();\n        }\n\n        // Add new one\n        if (!empty($skills)) {\n            foreach ($skills as $skillId) {\n                $item = (new SkillRelCourse())\n                    ->setCourse($course)\n                    ->setSession($session)\n                ;\n\n                /** @var SkillEntity $skill */\n                $skill = $em->getRepository('ChamiloCoreBundle:Skill')->find($skillId);\n                if ($skill) {\n                    if (!$skill->hasCourseAndSession($item)) {\n                        $skill->addToCourse($item);\n                        $em->persist($skill);\n                    }\n                }\n            }\n            $em->flush();\n        }\n\n        return true;\n    }\n\n    /**\n     * Relate skill with an item (exercise, gradebook, lp, etc).\n     *\n     * @param FormValidator $form\n     * @param int           $typeId\n     * @param int           $itemId\n     */\n    public static function saveSkills($form, $typeId, $itemId)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if ($allowSkillInTools) {\n            $userId = api_get_user_id();\n            $courseId = api_get_course_int_id();\n            if (empty($courseId)) {\n                $courseId = null;\n            }\n            $sessionId = api_get_session_id();\n            if (empty($sessionId)) {\n                $sessionId = null;\n            }\n\n            $em = Database::getManager();\n            $skills = (array) $form->getSubmitValue('skills');\n\n            $skillRelItemRelUserRepo = $em->getRepository('ChamiloSkillBundle:SkillRelItemRelUser');\n\n            // Delete old ones\n            $items = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n\n            if (!empty($items)) {\n                /** @var SkillRelItem $skillRelItem */\n                foreach ($items as $skillRelItem) {\n                    $skill = $skillRelItem->getSkill();\n                    $skillId = $skill->getId();\n                    $skillRelItemId = $skillRelItem->getId();\n                    if (!in_array($skillId, $skills)) {\n                        // Check if SkillRelItemRelUser is empty\n                        /** @var SkillRelItem[] $skillRelItemList */\n                        $skillRelItemRelUserList = $skillRelItemRelUserRepo->findBy(['skillRelItem' => $skillRelItemId]);\n                        if (empty($skillRelItemRelUserList)) {\n                            $em->remove($skillRelItem);\n                        } else {\n                            /** @var \\Chamilo\\SkillBundle\\Entity\\SkillRelItemRelUser $skillRelItemRelUser */\n                            foreach ($skillRelItemRelUserList as $skillRelItemRelUser) {\n                                Display::addFlash(\n                                    Display::return_message(\n                                        get_lang('CannotDeleteSkillBlockedByUser').'<br />'.\n                                        get_lang('User').': '.UserManager::formatUserFullName($skillRelItemRelUser->getUser()).'<br />'.\n                                        get_lang('Skill').': '.$skillRelItemRelUser->getSkillRelItem()->getSkill()->getName(),\n                                        'warning',\n                                        false\n                                    )\n                                );\n                            }\n                        }\n                    }\n                }\n                $em->flush();\n            }\n\n            // Add new one\n            if (!empty($skills)) {\n                $skills = array_keys($skills);\n                $skillRepo = $em->getRepository('ChamiloCoreBundle:Skill');\n\n                foreach ($skills as $skillId) {\n                    /** @var SkillEntity $skill */\n                    $skill = $skillRepo->find($skillId);\n                    if (null !== $skill) {\n                        if (!$skill->hasItem($typeId, $itemId)) {\n                            $skillRelItem = (new SkillRelItem())\n                                ->setItemType($typeId)\n                                ->setItemId($itemId)\n                                ->setCourseId($courseId)\n                                ->setSessionId($sessionId)\n                                ->setCreatedBy($userId)\n                                ->setUpdatedBy($userId)\n                            ;\n                            $skill->addItem($skillRelItem);\n                            $em->persist($skill);\n                            $em->persist($skillRelItem);\n                            $em->flush();\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the icon (badge image) URL.\n     *\n     * @param bool $getSmall Optional. Allow get the small image\n     *\n     * @return string\n     */\n    public static function getWebIconPath(SkillEntity $skill, $getSmall = false)\n    {\n        if ($getSmall) {\n            if (empty($skill->getIcon())) {\n                return \\Display::return_icon('badges-default.png', null, null, ICON_SIZE_BIG, null, true);\n            }\n\n            return api_get_path(WEB_UPLOAD_PATH).'badges/'.sha1($skill->getName()).'-small.png';\n        }\n\n        if (empty($skill->getIcon())) {\n            return \\Display::return_icon('badges-default.png', null, null, ICON_SIZE_HUGE, null, true);\n        }\n\n        return api_get_path(WEB_UPLOAD_PATH).\"badges/{$skill->getIcon()}\";\n    }\n\n    /**\n     * @param User                             $user\n     * @param \\Chamilo\\CoreBundle\\Entity\\Skill $skill\n     * @param int                              $levelId\n     * @param string                           $argumentation\n     * @param int                              $authorId\n     *\n     * @throws \\Doctrine\\ORM\\OptimisticLockException\n     *\n     * @return SkillRelUserEntity\n     */\n    public function addSkillToUserBadge($user, $skill, $levelId, $argumentation, $authorId)\n    {\n        $showLevels = false === api_get_configuration_value('hide_skill_levels');\n        $badgeAssignationNotification = api_get_configuration_value('badge_assignation_notification');\n\n        $entityManager = Database::getManager();\n\n        $skillUserRepo = $entityManager->getRepository('ChamiloCoreBundle:SkillRelUser');\n\n        $criteria = ['user' => $user, 'skill' => $skill];\n        $result = $skillUserRepo->findOneBy($criteria);\n\n        if (!empty($result)) {\n            return false;\n        }\n        $skillLevelRepo = $entityManager->getRepository('ChamiloSkillBundle:Level');\n\n        $skillUser = new SkillRelUserEntity();\n        $skillUser->setUser($user);\n        $skillUser->setSkill($skill);\n\n        if ($showLevels && !empty($levelId)) {\n            $level = $skillLevelRepo->find($levelId);\n            $skillUser->setAcquiredLevel($level);\n        }\n\n        $skillUser->setArgumentation($argumentation);\n        $skillUser->setArgumentationAuthorId($authorId);\n        $skillUser->setAcquiredSkillAt(new DateTime());\n        $skillUser->setAssignedBy(0);\n\n        $entityManager->persist($skillUser);\n        $entityManager->flush();\n\n        if ($badgeAssignationNotification) {\n            $url = SkillRelUser::getIssueUrlAll($skillUser);\n\n            $message = sprintf(\n                get_lang('YouXHaveAchievedTheSkillYToSeeFollowLinkZ'),\n                $user->getFirstname(),\n                $skill->getName(),\n                Display::url($url, $url, ['target' => '_blank'])\n            );\n\n            MessageManager::send_message(\n                $user->getId(),\n                get_lang('YouHaveAchievedANewSkill'),\n                $message\n            );\n        }\n\n        return $skillUser;\n    }\n}\n"], "fixing_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Component\\Utils\\ChamiloApi;\nuse Chamilo\\CoreBundle\\Entity\\Skill as SkillEntity;\nuse Chamilo\\CoreBundle\\Entity\\SkillRelUser as SkillRelUserEntity;\nuse Chamilo\\SkillBundle\\Entity\\SkillRelCourse;\nuse Chamilo\\SkillBundle\\Entity\\SkillRelItem;\nuse Chamilo\\SkillBundle\\Entity\\SkillRelItemRelUser;\nuse Chamilo\\UserBundle\\Entity\\User;\nuse Fhaculty\\Graph\\Graph;\nuse Fhaculty\\Graph\\Vertex;\n\n/**\n * Class SkillProfile.\n *\n * @todo break the file in different classes\n */\nclass SkillProfile extends Model\n{\n    public $columns = ['id', 'name', 'description'];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL_PROFILE);\n        $this->table_rel_profile = Database::get_main_table(TABLE_MAIN_SKILL_REL_PROFILE);\n    }\n\n    /**\n     * @return array\n     */\n    public function getProfiles()\n    {\n        $sql = \"SELECT * FROM $this->table p\n                INNER JOIN $this->table_rel_profile sp\n                ON (p.id = sp.profile_id) \";\n        $result = Database::query($sql);\n        $profiles = Database::store_result($result, 'ASSOC');\n\n        return $profiles;\n    }\n\n    /**\n     * This function is for editing profile info from profile_id.\n     *\n     * @param int    $profileId\n     * @param string $name\n     * @param string $description\n     *\n     * @return bool\n     */\n    public function updateProfileInfo($profileId, $name, $description)\n    {\n        $profileId = (int) $profileId;\n\n        if (empty($profileId)) {\n            return false;\n        }\n\n        $name = Database::escape_string($name);\n        $description = Database::escape_string($description);\n\n        Database::update(\n            $this->table,\n            [\n                'name' => html_filter($name),\n                'description' => html_filter($description),\n            ],\n            ['id = ?' => $profileId]\n        );\n\n        return true;\n    }\n\n    /**\n     * Call the save method of the parent class and the SkillRelProfile object.\n     *\n     * @param array $params\n     * @param bool  $show_query Whether to show the query in parent save() method\n     *\n     * @return mixed Profile ID or false if incomplete params\n     */\n    public function save($params, $show_query = false)\n    {\n        if (!empty($params)) {\n            $params['name'] = html_filter($params['name']);\n            $params['description'] = html_filter($params['description']);\n\n            $profile_id = parent::save($params, $show_query);\n            if ($profile_id) {\n                $skill_rel_profile = new SkillRelProfile();\n                if (isset($params['skills'])) {\n                    foreach ($params['skills'] as $skill_id) {\n                        $attributes = [\n                            'skill_id' => $skill_id,\n                            'profile_id' => $profile_id,\n                        ];\n                        $skill_rel_profile->save($attributes);\n                    }\n                }\n\n                return $profile_id;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Delete a skill profile.\n     *\n     * @param int $id The skill profile id\n     *\n     * @return bool Whether delete a skill profile\n     */\n    public function delete($id)\n    {\n        Database::delete(\n            $this->table_rel_profile,\n            [\n                'profile_id' => $id,\n            ]\n        );\n\n        return parent::delete($id);\n    }\n}\n\n/**\n * Class SkillRelProfile.\n */\nclass SkillRelProfile extends Model\n{\n    public $columns = ['id', 'skill_id', 'profile_id'];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL_REL_PROFILE);\n        $this->tableProfile = Database::get_main_table(TABLE_MAIN_SKILL_PROFILE);\n    }\n\n    /**\n     * @param int $profileId\n     *\n     * @return array\n     */\n    public function getSkillsByProfile($profileId)\n    {\n        $profileId = (int) $profileId;\n        $skills = $this->get_all(['where' => ['profile_id = ? ' => $profileId]]);\n        $return = [];\n        if (!empty($skills)) {\n            foreach ($skills as $skill_data) {\n                $return[] = $skill_data['skill_id'];\n            }\n        }\n\n        return $return;\n    }\n\n    /**\n     * This function is for getting profile info from profile_id.\n     *\n     * @param int $profileId\n     *\n     * @return array\n     */\n    public function getProfileInfo($profileId)\n    {\n        $profileId = (int) $profileId;\n        $sql = \"SELECT * FROM $this->table p\n                INNER JOIN $this->tableProfile pr\n                ON (pr.id = p.profile_id)\n                WHERE p.profile_id = \".$profileId;\n        $result = Database::query($sql);\n        $profileData = Database::fetch_array($result, 'ASSOC');\n\n        return $profileData;\n    }\n}\n\n/**\n * Class SkillRelSkill.\n */\nclass SkillRelSkill extends Model\n{\n    public $columns = ['skill_id', 'parent_id', 'relation_type', 'level'];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL_REL_SKILL);\n        $this->tableSkill = Database::get_main_table(TABLE_MAIN_SKILL);\n    }\n\n    /**\n     * Gets an element.\n     *\n     * @param int $id\n     *\n     * @return array\n     */\n    public function getSkillInfo($id)\n    {\n        $id = (int) $id;\n\n        if (empty($id)) {\n            return [];\n        }\n\n        $result = Database::select(\n            '*',\n            $this->table,\n            ['where' => ['skill_id = ?' => $id]],\n            'first'\n        );\n\n        return $result;\n    }\n\n    /**\n     * @param int  $skillId\n     * @param bool $add_child_info\n     *\n     * @return array\n     */\n    public function getSkillParents($skillId, $add_child_info = true)\n    {\n        $skillId = (int) $skillId;\n        $sql = 'SELECT child.* FROM '.$this->table.' child\n                LEFT JOIN '.$this->table.' parent\n                ON child.parent_id = parent.skill_id\n                WHERE child.skill_id = '.$skillId.' ';\n        $result = Database::query($sql);\n        $skill = Database::store_result($result, 'ASSOC');\n        $skill = isset($skill[0]) ? $skill[0] : null;\n\n        $parents = [];\n        if (!empty($skill)) {\n            if ($skill['parent_id'] != null) {\n                $parents = self::getSkillParents($skill['parent_id']);\n            }\n            if ($add_child_info) {\n                $parents[] = $skill;\n            }\n        }\n\n        return $parents;\n    }\n\n    /**\n     * @param int $skillId\n     *\n     * @return array\n     */\n    public function getDirectParents($skillId)\n    {\n        $skillId = (int) $skillId;\n        $sql = 'SELECT parent_id as skill_id\n                FROM '.$this->table.'\n                WHERE skill_id = '.$skillId;\n        $result = Database::query($sql);\n        $skill = Database::store_result($result, 'ASSOC');\n        $skill = isset($skill[0]) ? $skill[0] : null;\n        $parents = [];\n        if (!empty($skill)) {\n            $parents[] = $skill;\n        }\n\n        return $parents;\n    }\n\n    /**\n     * @param int  $skill_id\n     * @param bool $load_user_data\n     * @param bool $user_id\n     *\n     * @return array\n     */\n    public function getChildren(\n        $skill_id,\n        $load_user_data = false,\n        $user_id = false,\n        $order = ''\n    ) {\n        $skill_id = (int) $skill_id;\n        $sql = 'SELECT parent.* FROM '.$this->tableSkill.' skill\n                INNER JOIN '.$this->table.' parent\n                ON parent.id = skill.id\n                WHERE parent_id = '.$skill_id.'\n                ORDER BY skill.name ASC';\n        $result = Database::query($sql);\n        $skills = Database::store_result($result, 'ASSOC');\n\n        $skill_obj = new Skill();\n        $skill_rel_user = new SkillRelUser();\n\n        if ($load_user_data) {\n            $passed_skills = $skill_rel_user->getUserSkills($user_id);\n            $done_skills = [];\n            foreach ($passed_skills as $done_skill) {\n                $done_skills[] = $done_skill['skill_id'];\n            }\n        }\n\n        if (!empty($skills)) {\n            foreach ($skills as &$skill) {\n                $skill['data'] = $skill_obj->get($skill['skill_id']);\n                if (isset($skill['data']) && !empty($skill['data'])) {\n                    if (!empty($done_skills)) {\n                        $skill['data']['passed'] = 0;\n                        if (in_array($skill['skill_id'], $done_skills)) {\n                            $skill['data']['passed'] = 1;\n                        }\n                    }\n                } else {\n                    $skill = null;\n                }\n            }\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return bool\n     */\n    public function updateBySkill($params)\n    {\n        $result = Database::update(\n            $this->table,\n            $params,\n            ['skill_id = ? ' => $params['skill_id']]\n        );\n        if ($result) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $skill_id\n     * @param int $parent_id\n     *\n     * @return bool\n     */\n    public function relationExists($skill_id, $parent_id)\n    {\n        $result = $this->find(\n            'all',\n            [\n                'where' => [\n                    'skill_id = ? AND parent_id = ?' => [\n                        $skill_id,\n                        $parent_id,\n                    ],\n                ],\n            ]\n        );\n\n        if (!empty($result)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n/**\n * Class SkillRelGradebook.\n */\nclass SkillRelGradebook extends Model\n{\n    public $columns = ['id', 'gradebook_id', 'skill_id'];\n\n    /**\n     * SkillRelGradebook constructor.\n     */\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL_REL_GRADEBOOK);\n    }\n\n    /**\n     * @param int $gradebookId\n     * @param int $skillId\n     *\n     * @return bool\n     */\n    public function existsGradeBookSkill($gradebookId, $skillId)\n    {\n        $result = $this->find(\n            'all',\n            [\n                'where' => [\n                    'gradebook_id = ? AND skill_id = ?' => [\n                        $gradebookId,\n                        $skillId,\n                    ],\n                ],\n            ]\n        );\n        if (!empty($result)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Gets an element.\n     */\n    public function getSkillInfo($skill_id, $gradebookId)\n    {\n        if (empty($skill_id)) {\n            return [];\n        }\n        $result = Database::select(\n            '*',\n            $this->table,\n            [\n                'where' => [\n                    'skill_id = ? AND gradebook_id = ? ' => [\n                        $skill_id,\n                        $gradebookId,\n                    ],\n                ],\n            ],\n            'first'\n        );\n\n        return $result;\n    }\n\n    /**\n     * @param int   $skill_id\n     * @param array $gradebook_list\n     */\n    public function updateGradeBookListBySkill($skill_id, $gradebook_list)\n    {\n        $original_gradebook_list = $this->find(\n            'all',\n            ['where' => ['skill_id = ?' => [$skill_id]]]\n        );\n        $gradebooks_to_remove = [];\n        $gradebooks_to_add = [];\n        $original_gradebook_list_ids = [];\n\n        if (!empty($original_gradebook_list)) {\n            foreach ($original_gradebook_list as $gradebook) {\n                if (!in_array($gradebook['gradebook_id'], $gradebook_list)) {\n                    $gradebooks_to_remove[] = $gradebook['id'];\n                }\n            }\n            foreach ($original_gradebook_list as $gradebook_item) {\n                $original_gradebook_list_ids[] = $gradebook_item['gradebook_id'];\n            }\n        }\n\n        if (!empty($gradebook_list)) {\n            foreach ($gradebook_list as $gradebook_id) {\n                if (!in_array($gradebook_id, $original_gradebook_list_ids)) {\n                    $gradebooks_to_add[] = $gradebook_id;\n                }\n            }\n        }\n\n        if (!empty($gradebooks_to_remove)) {\n            foreach ($gradebooks_to_remove as $id) {\n                $this->delete($id);\n            }\n        }\n\n        if (!empty($gradebooks_to_add)) {\n            foreach ($gradebooks_to_add as $gradebook_id) {\n                $attributes = [\n                    'skill_id' => $skill_id,\n                    'gradebook_id' => $gradebook_id,\n                ];\n                $this->save($attributes);\n            }\n        }\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return bool|void\n     */\n    public function updateBySkill($params)\n    {\n        $skillInfo = $this->existsGradeBookSkill(\n            $params['gradebook_id'],\n            $params['skill_id']\n        );\n\n        if ($skillInfo) {\n            return;\n        } else {\n            $result = $this->save($params);\n        }\n        if ($result) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n/**\n * Class SkillRelUser.\n */\nclass SkillRelUser extends Model\n{\n    public $columns = [\n        'id',\n        'user_id',\n        'skill_id',\n        'acquired_skill_at',\n        'assigned_by',\n        'course_id',\n        'session_id',\n    ];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL_REL_USER);\n    }\n\n    /**\n     * @param array $skill_list\n     *\n     * @return array\n     */\n    public function getUserBySkills($skill_list)\n    {\n        $users = [];\n        if (!empty($skill_list)) {\n            $skill_list = array_map('intval', $skill_list);\n            $skill_list = implode(\"', '\", $skill_list);\n\n            $sql = \"SELECT user_id FROM {$this->table}\n                    WHERE skill_id IN ('$skill_list') \";\n\n            $result = Database::query($sql);\n            $users = Database::store_result($result, 'ASSOC');\n        }\n\n        return $users;\n    }\n\n    /**\n     * Get the achieved skills for the user.\n     *\n     * @param int $userId\n     * @param int $courseId  Optional. The course id\n     * @param int $sessionId Optional. The session id\n     *\n     * @return array The skill list. Otherwise return false\n     */\n    public function getUserSkills($userId, $courseId = 0, $sessionId = 0)\n    {\n        if (empty($userId)) {\n            return [];\n        }\n\n        $courseId = (int) $courseId;\n        $sessionId = $sessionId ? (int) $sessionId : null;\n        $whereConditions = [\n            'user_id = ? ' => (int) $userId,\n        ];\n\n        if ($sessionId > 0) {\n            $whereConditions['AND course_id = ? '] = $courseId;\n            $whereConditions['AND session_id = ? '] = $sessionId;\n        } else {\n            $whereConditions['AND course_id = ? AND session_id is NULL'] = $courseId;\n        }\n\n        $result = Database::select(\n            'skill_id',\n            $this->table,\n            [\n                'where' => $whereConditions,\n            ],\n            'all'\n        );\n\n        return $result;\n    }\n\n    /**\n     * Get the relation data between user and skill.\n     *\n     * @param int $userId    The user id\n     * @param int $skillId   The skill id\n     * @param int $courseId  Optional. The course id\n     * @param int $sessionId Optional. The session id\n     *\n     * @return array The relation data. Otherwise return false\n     */\n    public function getByUserAndSkill($userId, $skillId, $courseId = 0, $sessionId = 0)\n    {\n        $sql = \"SELECT * FROM {$this->table} WHERE user_id = %d AND skill_id = %d \";\n\n        if ($courseId > 0) {\n            $sql .= \"AND course_id = %d \".api_get_session_condition($sessionId, true);\n        }\n\n        $sql = sprintf(\n            $sql,\n            $userId,\n            $skillId,\n            $courseId\n        );\n\n        $result = Database::query($sql);\n\n        return Database::fetch_assoc($result);\n    }\n\n    /**\n     * Delete a user skill by course.\n     *\n     * @param int $userId\n     * @param int $courseId\n     * @param int $sessionId\n     */\n    public function deleteUserSkill($userId, $courseId, $sessionId = 0)\n    {\n        $whereSession = ($sessionId ? \" AND session_id = $sessionId\" : \" AND session_id IS NULL\");\n        $sql = \"DELETE FROM {$this->table}\n                WHERE\n                      user_id = $userId AND\n                      course_id = $courseId\n                      $whereSession\";\n\n        Database::query($sql);\n    }\n\n    /**\n     * Get the URL for the issue.\n     *\n     * @return string\n     */\n    public static function getIssueUrl(SkillRelUserEntity $skillIssue)\n    {\n        return api_get_path(WEB_PATH).\"badge/{$skillIssue->getId()}\";\n    }\n\n    /**\n     * Get the URL for the All issues page.\n     *\n     * @return string\n     */\n    public static function getIssueUrlAll(SkillRelUserEntity $skillIssue)\n    {\n        return api_get_path(WEB_PATH).\"skill/{$skillIssue->getSkill()->getId()}/user/{$skillIssue->getUser()->getId()}\";\n    }\n\n    /**\n     * Get the URL for the assertion.\n     *\n     * @return string\n     */\n    public static function getAssertionUrl(SkillRelUserEntity $skillIssue)\n    {\n        $url = api_get_path(WEB_CODE_PATH).'badge/assertion.php?';\n\n        $url .= http_build_query([\n            'user' => $skillIssue->getUser()->getId(),\n            'skill' => $skillIssue->getSkill()->getId(),\n            'course' => $skillIssue->getCourse() ? $skillIssue->getCourse()->getId() : 0,\n            'session' => $skillIssue->getSession() ? $skillIssue->getSession()->getId() : 0,\n        ]);\n\n        return $url;\n    }\n}\n\n/**\n * Class Skill.\n */\nclass Skill extends Model\n{\n    public $columns = [\n        'id',\n        'name',\n        'description',\n        'access_url_id',\n        'short_code',\n        'icon',\n        'criteria',\n    ];\n    public $required = ['name'];\n\n    /** Array of colours by depth, for the coffee wheel. Each depth has 4 col */\n    /*var $colours = array(\n      0 => array('#f9f0ab', '#ecc099', '#e098b0', '#ebe378'),\n      1 => array('#d5dda1', '#4a5072', '#8dae43', '#72659d'),\n      2 => array('#b28647', '#2e6093', '#393e64', '#1e8323'),\n      3 => array('#9f6652', '#9f6652', '#9f6652', '#9f6652'),\n      4 => array('#af643c', '#af643c', '#af643c', '#af643c'),\n      5 => array('#72659d', '#72659d', '#72659d', '#72659d'),\n      6 => array('#8a6e9e', '#8a6e9e', '#8a6e9e', '#8a6e9e'),\n      7 => array('#92538c', '#92538c', '#92538c', '#92538c'),\n      8 => array('#2e6093', '#2e6093', '#2e6093', '#2e6093'),\n      9 => array('#3a5988', '#3a5988', '#3a5988', '#3a5988'),\n     10 => array('#393e64', '#393e64', '#393e64', '#393e64'),\n    );*/\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_MAIN_SKILL);\n        $this->table_user = Database::get_main_table(TABLE_MAIN_USER);\n        $this->table_skill_rel_gradebook = Database::get_main_table(TABLE_MAIN_SKILL_REL_GRADEBOOK);\n        $this->table_skill_rel_user = Database::get_main_table(TABLE_MAIN_SKILL_REL_USER);\n        $this->table_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $this->table_skill_rel_skill = Database::get_main_table(TABLE_MAIN_SKILL_REL_SKILL);\n        $this->table_gradebook = Database::get_main_table(TABLE_MAIN_GRADEBOOK_CATEGORY);\n        $this->sessionTable = Database::get_main_table(TABLE_MAIN_SESSION);\n    }\n\n    /**\n     * Gets an element.\n     *\n     * @param int $id\n     *\n     * @return array|mixed\n     */\n    public function get($id)\n    {\n        $result = parent::get($id);\n        if (empty($result)) {\n            return [];\n        }\n\n        $path = api_get_path(WEB_UPLOAD_PATH).'badges/';\n        if (!empty($result['icon'])) {\n            $iconSmall = sprintf(\n                '%s-small.png',\n                sha1($result['name'])\n            );\n\n            $iconBig = sprintf(\n                '%s.png',\n                sha1($result['name'])\n            );\n\n            $iconMini = $path.$iconSmall;\n            $iconSmall = $path.$iconSmall;\n            $iconBig = $path.$iconBig;\n        } else {\n            $iconMini = Display::returnIconPath('badges-default.png', ICON_SIZE_MEDIUM);\n            $iconSmall = Display::returnIconPath('badges-default.png', ICON_SIZE_BIG);\n            $iconBig = Display::returnIconPath('badges-default.png', ICON_SIZE_HUGE);\n        }\n\n        $result['icon_mini'] = $iconMini;\n        $result['icon_small'] = $iconSmall;\n        $result['icon_big'] = $iconBig;\n\n        $result['img_mini'] = Display::img($iconBig, $result['name'], ['width' => ICON_SIZE_MEDIUM]);\n        $result['img_big'] = Display::img($iconBig, $result['name']);\n        $result['img_small'] = Display::img($iconSmall, $result['name']);\n        $result['name'] = self::translateName($result['name']);\n        $result['short_code'] = self::translateCode($result['short_code']);\n\n        return $result;\n    }\n\n    /**\n     * @param array  $skills\n     * @param string $imageSize     mini|small|big\n     * @param bool   $addDivWrapper\n     *\n     * @return string\n     */\n    public function processSkillList($skills, $imageSize = '', $addDivWrapper = true)\n    {\n        if (empty($skills)) {\n            return '';\n        }\n\n        if (empty($imageSize)) {\n            $imageSize = 'img_small';\n        } else {\n            $imageSize = \"img_$imageSize\";\n        }\n\n        $html = '';\n        if ($addDivWrapper) {\n            $html = '<div class=\"scrollbar-inner badges-sidebar\">';\n        }\n        $html .= '<ul class=\"list-unstyled list-badges\">';\n        foreach ($skills as $skill) {\n            if (isset($skill['data'])) {\n                $skill = $skill['data'];\n            }\n            $html .= '<li class=\"thumbnail\">';\n            $item = $skill[$imageSize];\n            $item .= '<div class=\"caption\">\n                        <p class=\"text-center\">'.$skill['name'].'</p>\n                      </div>';\n            if (isset($skill['url'])) {\n                $html .= Display::url($item, $skill['url'], ['target' => '_blank']);\n            } else {\n                $html .= $item;\n            }\n            $html .= '</li>';\n        }\n        $html .= '</ul>';\n\n        if ($addDivWrapper) {\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * @param $skills\n     * @param string $imageSize mini|small|big\n     * @param string $style\n     * @param bool   $showBadge\n     * @param bool   $showTitle\n     *\n     * @return string\n     */\n    public function processSkillListSimple($skills, $imageSize = '', $style = '', $showBadge = true, $showTitle = true)\n    {\n        if (empty($skills)) {\n            return '';\n        }\n\n        $isHierarchicalTable = api_get_configuration_value('table_of_hierarchical_skill_presentation');\n\n        if (empty($imageSize)) {\n            $imageSize = 'img_small';\n        } else {\n            $imageSize = \"img_$imageSize\";\n        }\n\n        $html = '';\n        foreach ($skills as $skill) {\n            if (isset($skill['data'])) {\n                $skill = $skill['data'];\n            }\n\n            $item = '';\n            if ($showBadge) {\n                $item = '<div class=\"item\">'.$skill[$imageSize].'</div>';\n            }\n\n            $name = '<div class=\"caption\">'.$skill['name'].'</div>';\n            if (!empty($skill['short_code'])) {\n                $name = $skill['short_code'];\n            }\n\n            if (!$isHierarchicalTable) {\n                //$item .= '<br />';\n            }\n\n            if ($showTitle) {\n                $item .= $name;\n            }\n\n            if (isset($skill['url'])) {\n                $html .= Display::url($item, $skill['url'], ['target' => '_blank', 'style' => $style]);\n            } else {\n                $html .= Display::url($item, '#', ['target' => '_blank', 'style' => $style]);\n            }\n        }\n\n        return $html;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return array\n     */\n    public function getSkillInfo($id)\n    {\n        $skillRelSkill = new SkillRelSkill();\n        $skillInfo = $this->get($id);\n        if (!empty($skillInfo)) {\n            $skillInfo['extra'] = $skillRelSkill->getSkillInfo($id);\n            $skillInfo['gradebooks'] = $this->getGradebooksBySkill($id);\n        }\n\n        return $skillInfo;\n    }\n\n    /**\n     * @param array $skill_list\n     *\n     * @return array\n     */\n    public function getSkillsInfo($skill_list)\n    {\n        $skill_list = array_map('intval', $skill_list);\n        $skill_list = implode(\"', '\", $skill_list);\n\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE id IN ('$skill_list') \";\n\n        $result = Database::query($sql);\n        $skills = Database::store_result($result, 'ASSOC');\n\n        foreach ($skills as &$skill) {\n            if (!$skill['icon']) {\n                continue;\n            }\n\n            $skill['icon_small'] = sprintf(\n                'badges/%s-small.png',\n                sha1($skill['name'])\n            );\n            $skill['name'] = self::translateName($skill['name']);\n            $skill['short_code'] = self::translateCode($skill['short_code']);\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param bool $load_user_data\n     * @param bool $user_id\n     * @param int  $id\n     * @param int  $parent_id\n     *\n     * @return array\n     */\n    public function get_all(\n        $load_user_data = false,\n        $user_id = false,\n        $id = null,\n        $parent_id = null\n    ) {\n        $id_condition = '';\n        if (!empty($id)) {\n            $id = (int) $id;\n            $id_condition = \" WHERE s.id = $id\";\n        }\n\n        if (!empty($parent_id)) {\n            $parent_id = (int) $parent_id;\n            if (empty($id_condition)) {\n                $id_condition = \" WHERE ss.parent_id = $parent_id\";\n            } else {\n                $id_condition = \" AND ss.parent_id = $parent_id\";\n            }\n        }\n\n        $sql = \"SELECT\n                    s.id,\n                    s.name,\n                    s.description,\n                    ss.parent_id,\n                    ss.relation_type,\n                    s.icon,\n                    s.short_code,\n                    s.status\n                FROM {$this->table} s\n                INNER JOIN {$this->table_skill_rel_skill} ss\n                ON (s.id = ss.skill_id) $id_condition\n                ORDER BY ss.id, ss.parent_id\";\n\n        $result = Database::query($sql);\n        $skills = [];\n        $webPath = api_get_path(WEB_UPLOAD_PATH);\n        if (Database::num_rows($result)) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $skillInfo = self::get($row['id']);\n\n                $row['img_mini'] = $skillInfo['img_mini'];\n                $row['img_big'] = $skillInfo['img_big'];\n                $row['img_small'] = $skillInfo['img_small'];\n\n                $row['name'] = self::translateName($row['name']);\n                $row['short_code'] = self::translateCode($row['short_code']);\n                $skillRelSkill = new SkillRelSkill();\n                $parents = $skillRelSkill->getSkillParents($row['id']);\n                $row['level'] = count($parents) - 1;\n                $row['gradebooks'] = $this->getGradebooksBySkill($row['id']);\n                $skills[$row['id']] = $row;\n            }\n        }\n\n        // Load all children of the parent_id\n        if (!empty($skills) && !empty($parent_id)) {\n            foreach ($skills as $skill) {\n                $children = self::get_all($load_user_data, $user_id, $id, $skill['id']);\n                if (!empty($children)) {\n                    //$skills = array_merge($skills, $children);\n                    $skills = $skills + $children;\n                }\n            }\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param int $skill_id\n     *\n     * @return array|resource\n     */\n    public function getGradebooksBySkill($skill_id)\n    {\n        $skill_id = (int) $skill_id;\n        $sql = \"SELECT g.* FROM {$this->table_gradebook} g\n                INNER JOIN {$this->table_skill_rel_gradebook} sg\n                ON g.id = sg.gradebook_id\n                WHERE sg.skill_id = $skill_id\";\n        $result = Database::query($sql);\n        $result = Database::store_result($result, 'ASSOC');\n\n        return $result;\n    }\n\n    /**\n     * Get one level children.\n     *\n     * @param int  $skill_id\n     * @param bool $load_user_data\n     *\n     * @return array\n     */\n    public function getChildren($skill_id, $load_user_data = false)\n    {\n        $skillRelSkill = new SkillRelSkill();\n        if ($load_user_data) {\n            $user_id = api_get_user_id();\n            $skills = $skillRelSkill->getChildren($skill_id, true, $user_id);\n        } else {\n            $skills = $skillRelSkill->getChildren($skill_id);\n        }\n\n        return $skills;\n    }\n\n    /**\n     * Get all children of the current node (recursive).\n     *\n     * @param int $skillId\n     *\n     * @return array\n     */\n    public function getAllChildren($skillId)\n    {\n        $skillRelSkill = new SkillRelSkill();\n        $children = $skillRelSkill->getChildren($skillId);\n        foreach ($children as $child) {\n            $subChildren = $this->getAllChildren($child['id']);\n        }\n\n        if (!empty($subChildren)) {\n            $children = array_merge($children, $subChildren);\n        }\n\n        return $children;\n    }\n\n    /**\n     * Gets all parents from from the wanted skill.\n     */\n    public function get_parents($skillId)\n    {\n        $skillRelSkill = new SkillRelSkill();\n        $skills = $skillRelSkill->getSkillParents($skillId, true);\n        foreach ($skills as &$skill) {\n            $skill['data'] = $this->get($skill['skill_id']);\n        }\n\n        return $skills;\n    }\n\n    /**\n     * All direct parents.\n     *\n     * @param int $skillId\n     *\n     * @return array\n     */\n    public function getDirectParents($skillId)\n    {\n        $skillRelSkill = new SkillRelSkill();\n        $skills = $skillRelSkill->getDirectParents($skillId, true);\n        if (!empty($skills)) {\n            foreach ($skills as &$skill) {\n                $skillData = $this->get($skill['skill_id']);\n                if (empty($skillData)) {\n                    continue;\n                }\n                $skill['data'] = $skillData;\n                $skill_info2 = $skillRelSkill->getSkillInfo($skill['skill_id']);\n                $parentId = isset($skill_info2['parent_id']) ? isset($skill_info2['parent_id']) : 0;\n                $skill['data']['parent_id'] = $parentId;\n            }\n\n            return $skills;\n        }\n\n        return [];\n    }\n\n    /**\n     * Adds a new skill.\n     *\n     * @param array $params\n     *\n     * @return bool|null\n     */\n    public function add($params)\n    {\n        if (!isset($params['parent_id'])) {\n            $params['parent_id'] = 1;\n        }\n\n        if (!is_array($params['parent_id'])) {\n            $params['parent_id'] = [$params['parent_id']];\n        }\n\n        $skillRelSkill = new SkillRelSkill();\n        $skillRelGradebook = new SkillRelGradebook();\n\n        // Saving name, description\n        $skill_id = $this->save($params);\n        if ($skill_id) {\n            // Saving skill_rel_skill (parent_id, relation_type)\n            foreach ($params['parent_id'] as $parent_id) {\n                $relation_exists = $skillRelSkill->relationExists($skill_id, $parent_id);\n                if (!$relation_exists) {\n                    $attributes = [\n                        'skill_id' => $skill_id,\n                        'parent_id' => $parent_id,\n                        'relation_type' => isset($params['relation_type']) ? $params['relation_type'] : 0,\n                        //'level'         => $params['level'],\n                    ];\n                    $skillRelSkill->save($attributes);\n                }\n            }\n\n            if (!empty($params['gradebook_id'])) {\n                foreach ($params['gradebook_id'] as $gradebook_id) {\n                    $attributes = [];\n                    $attributes['gradebook_id'] = $gradebook_id;\n                    $attributes['skill_id'] = $skill_id;\n                    $skillRelGradebook->save($attributes);\n                }\n            }\n\n            return $skill_id;\n        }\n\n        return null;\n    }\n\n    /**\n     * @param int      $userId\n     * @param Category $category\n     * @param int      $courseId\n     * @param int      $sessionId\n     *\n     * @return bool\n     */\n    public function addSkillToUser(\n        $userId,\n        $category,\n        $courseId,\n        $sessionId\n    ) {\n        $skill_gradebook = new SkillRelGradebook();\n        $skill_rel_user = new SkillRelUser();\n\n        if (empty($category)) {\n            return false;\n        }\n\n        $enableGradeSubCategorySkills = (true === api_get_configuration_value('gradebook_enable_subcategory_skills_independant_assignement'));\n        // Load subcategories\n        if (empty($category->get_parent_id())) {\n            $subCategories = $category->get_subcategories(\n                $userId,\n                $category->get_course_code(),\n                $category->get_session_id()\n            );\n            $scoreSubCategories = $this->getSubCategoryResultScore($category, $userId);\n            if (!empty($subCategories)) {\n                /** @var Category $subCategory */\n                foreach ($subCategories as $subCategory) {\n                    $scoreChecked = true;\n                    if (!empty($scoreSubCategories[$subCategory->get_id()])) {\n                        $resultScore = $scoreSubCategories[$subCategory->get_id()];\n                        $scoreChecked = ($resultScore['user_score'] >= $resultScore['min_score']);\n                    }\n                    if ($scoreChecked) {\n                        $this->addSkillToUser($userId, $subCategory, $courseId, $sessionId);\n                    }\n                }\n            }\n        }\n\n        $gradebookId = $category->get_id();\n        $skill_gradebooks = $skill_gradebook->get_all(['where' => ['gradebook_id = ?' => $gradebookId]]);\n\n        // It checks if gradebook is passed to add the skill\n        if ($enableGradeSubCategorySkills) {\n            $userFinished = Category::userFinishedCourse(\n                $userId,\n                $category,\n                true\n            );\n            if (!$userFinished) {\n                return false;\n            }\n        }\n\n        if (!empty($skill_gradebooks)) {\n            foreach ($skill_gradebooks as $skill_gradebook) {\n                $hasSkill = $this->userHasSkill(\n                    $userId,\n                    $skill_gradebook['skill_id'],\n                    $courseId,\n                    $sessionId\n                );\n\n                if (!$hasSkill) {\n                    $params = [\n                        'user_id' => $userId,\n                        'skill_id' => $skill_gradebook['skill_id'],\n                        'acquired_skill_at' => api_get_utc_datetime(),\n                        'course_id' => (int) $courseId,\n                        'session_id' => $sessionId ? (int) $sessionId : null,\n                    ];\n\n                    $skill_rel_user->save($params);\n\n                    // It sends notifications about user skills from gradebook\n                    $badgeAssignationNotification = api_get_configuration_value('badge_assignation_notification');\n                    if ($badgeAssignationNotification) {\n                        $entityManager = Database::getManager();\n                        $skillRepo = $entityManager->getRepository('ChamiloCoreBundle:Skill');\n                        $skill = $skillRepo->find($skill_gradebook['skill_id']);\n                        if ($skill) {\n                            $user = api_get_user_entity($userId);\n                            $url = api_get_path(WEB_PATH).\"skill/{$skill_gradebook['skill_id']}/user/{$userId}\";\n                            $message = sprintf(\n                                get_lang('YouXHaveAchievedTheSkillYToSeeFollowLinkZ'),\n                                $user->getFirstname(),\n                                $skill->getName(),\n                                Display::url($url, $url, ['target' => '_blank'])\n                            );\n                            MessageManager::send_message(\n                                $user->getId(),\n                                get_lang('YouHaveAchievedANewSkill'),\n                                $message\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Get the results of user in a subCategory.\n     *\n     * @param $category\n     * @param $userId\n     *\n     * @return array\n     */\n    public function getSubCategoryResultScore($category, $userId)\n    {\n        $scoreSubCategories = [];\n        if (true === api_get_configuration_value('gradebook_enable_subcategory_skills_independant_assignement')) {\n            $subCategories = $category->get_subcategories(\n                $userId,\n                $category->get_course_code(),\n                $category->get_session_id()\n            );\n            $alleval = $category->get_evaluations($userId, false, $category->get_course_code(),\n                $category->get_session_id());\n            $alllink = $category->get_links($userId, true, $category->get_course_code(), $category->get_session_id());\n            $datagen = new GradebookDataGenerator($subCategories, $alleval, $alllink);\n            $gradeResult = $datagen->get_data();\n            foreach ($gradeResult as $data) {\n                /** @var AbstractLink $item */\n                $item = $data[0];\n                if (Category::class === get_class($item)) {\n                    $scoreSubCategories[$item->get_id()]['min_score'] = $item->getCertificateMinScore();\n                    $scoreSubCategories[$item->get_id()]['user_score'] = round($data['result_score'][0]);\n                }\n            }\n        }\n\n        return $scoreSubCategories;\n    }\n\n    /* Deletes a skill */\n    public function delete($skill_id)\n    {\n        /*$params = array('skill_id' => $skill_id);\n\n        $skillRelSkill     = new SkillRelSkill();\n        $skills = $skillRelSkill->get_all(array('where'=>array('skill_id = ?' =>$skill_id)));\n\n        $skill_rel_profile     = new SkillRelProfile();\n        $skillRelGradebook = new SkillRelGradebook();\n        $skill_rel_user     = new SkillRelUser();\n\n        $this->delete($skill_id);\n\n        $skillRelGradebook->delete($params);*/\n    }\n\n    /**\n     * @param array $params\n     */\n    public function edit($params)\n    {\n        if (!isset($params['parent_id'])) {\n            $params['parent_id'] = 1;\n        }\n\n        $params['gradebook_id'] = isset($params['gradebook_id']) ? $params['gradebook_id'] : [];\n\n        $skillRelSkill = new SkillRelSkill();\n        $skillRelGradebook = new SkillRelGradebook();\n\n        // Saving name, description\n        $this->update($params);\n        $skillId = $params['id'];\n\n        if ($skillId) {\n            // Saving skill_rel_skill (parent_id, relation_type)\n            if (!is_array($params['parent_id'])) {\n                $params['parent_id'] = [$params['parent_id']];\n            }\n\n            // Cannot change parent of root\n            if ($skillId == 1) {\n                $params['parent_id'] = 0;\n            }\n\n            foreach ($params['parent_id'] as $parent_id) {\n                $relation_exists = $skillRelSkill->relationExists($skillId, $parent_id);\n                if (!$relation_exists) {\n                    $attributes = [\n                        'skill_id' => $skillId,\n                        'parent_id' => $parent_id,\n                        'relation_type' => $params['relation_type'],\n                        //'level'         => $params['level'],\n                    ];\n                    $skillRelSkill->updateBySkill($attributes);\n                }\n            }\n\n            $skillRelGradebook->updateGradeBookListBySkill(\n                $skillId,\n                $params['gradebook_id']\n            );\n\n            return $skillId;\n        }\n\n        return null;\n    }\n\n    /**\n     * Get user's skills.\n     *\n     * @param int  $userId\n     * @param bool $getSkillData\n     * @param int  $courseId\n     * @param int  $sessionId\n     *\n     * @return array\n     */\n    public function getUserSkills($userId, $getSkillData = false, $courseId = 0, $sessionId = 0)\n    {\n        $userId = (int) $userId;\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n\n        $courseCondition = '';\n        if (!empty($courseId)) {\n            $courseCondition = \" AND course_id = $courseId \";\n        }\n\n        $sessionCondition = '';\n        if (!empty($sessionId)) {\n            $sessionCondition = \" AND course_id = $sessionId \";\n        }\n\n        $sql = 'SELECT DISTINCT\n                    s.id,\n                    s.name,\n                    s.icon,\n                    u.id as issue,\n                    u.acquired_skill_at,\n                    u.course_id\n                FROM '.$this->table_skill_rel_user.' u\n                INNER JOIN '.$this->table.' s\n                ON u.skill_id = s.id\n                WHERE\n                    user_id = '.$userId.' '.$sessionCondition.' '.$courseCondition;\n\n        $result = Database::query($sql);\n        $skills = Database::store_result($result, 'ASSOC');\n        $skillList = [];\n        if (!empty($skills)) {\n            foreach ($skills as $skill) {\n                if ($getSkillData) {\n                    $skillData = $this->get($skill['id']);\n                    $skillData['url'] = api_get_path(WEB_PATH).'badge/'.$skill['id'].'/user/'.$userId;\n                    $skillList[$skill['id']] = array_merge($skill, $skillData);\n                } else {\n                    $skillList[$skill['id']] = $skill['id'];\n                }\n            }\n        }\n\n        return $skillList;\n    }\n\n    /**\n     * @param array $skills\n     * @param int   $level\n     *\n     * @return string\n     */\n    public function processVertex(Vertex $vertex, $skills = [], $level = 0)\n    {\n        $isHierarchicalTable = api_get_configuration_value('table_of_hierarchical_skill_presentation');\n        $subTable = '';\n        if ($vertex->getVerticesEdgeTo()->count() > 0) {\n            if ($isHierarchicalTable) {\n                $subTable .= '<ul>';\n            }\n            foreach ($vertex->getVerticesEdgeTo() as $subVertex) {\n                $data = $subVertex->getAttribute('graphviz.data');\n                $passed = in_array($data['id'], array_keys($skills));\n                $transparency = '';\n                if ($passed === false) {\n                    // @todo use css class\n                    $transparency = 'opacity: 0.4; filter: alpha(opacity=40);';\n                }\n\n                if ($isHierarchicalTable) {\n                    $label = $this->processSkillListSimple([$data], 'mini', $transparency);\n                    $subTable .= '<li>'.$label;\n                    $subTable .= $this->processVertex($subVertex, $skills, $level + 1);\n                    $subTable .= '</li>';\n                } else {\n                    $imageSize = 'mini';\n                    if ($level == 2) {\n                        $imageSize = 'small';\n                    }\n                    $showTitle = true;\n                    if ($level > 2) {\n                        $showTitle = false;\n                    }\n\n                    $label = $this->processSkillListSimple([$data], $imageSize, $transparency, true, $showTitle);\n                    $subTable .= '<div class=\"thumbnail\" style=\"float:left; margin-right:5px; \">';\n                    $subTable .= '<div style=\"'.$transparency.'\">';\n\n                    $subTable .= '<div style=\"text-align: center\">';\n                    $subTable .= $label;\n                    $subTable .= '</div>';\n\n                    $subTable .= '</div>';\n                    $subTable .= $this->processVertex($subVertex, $skills, $level + 1);\n                    $subTable .= '</div>';\n                }\n            }\n\n            if ($isHierarchicalTable) {\n                $subTable .= '</ul>';\n            }\n        }\n\n        return $subTable;\n    }\n\n    /**\n     * @param int  $userId\n     * @param int  $courseId\n     * @param int  $sessionId\n     * @param bool $addTitle\n     *\n     * @return array\n     */\n    public function getUserSkillsTable($userId, $courseId = 0, $sessionId = 0, $addTitle = true)\n    {\n        $skills = $this->getUserSkills($userId, true, $courseId, $sessionId);\n        $courseTempList = [];\n        $tableRows = [];\n        $skillParents = [];\n        foreach ($skills as $resultData) {\n            $parents = $this->get_parents($resultData['id']);\n            foreach ($parents as $parentData) {\n                $parentData['passed'] = in_array($parentData['id'], array_keys($skills));\n                if ($parentData['passed'] && isset($skills[$parentData['id']]['url'])) {\n                    $parentData['data']['url'] = $skills[$parentData['id']]['url'];\n                }\n                $skillParents[$resultData['id']][$parentData['id']] = $parentData;\n            }\n        }\n\n        foreach ($skills as $resultData) {\n            $courseId = $resultData['course_id'];\n            if (!empty($courseId)) {\n                if (isset($courseTempList[$courseId])) {\n                    $courseInfo = $courseTempList[$courseId];\n                } else {\n                    $courseInfo = api_get_course_info_by_id($courseId);\n                    $courseTempList[$courseId] = $courseInfo;\n                }\n            } else {\n                $courseInfo = [];\n            }\n            $tableRow = [\n                'skill_badge' => $resultData['img_small'],\n                'skill_name' => self::translateName($resultData['name']),\n                'short_code' => $resultData['short_code'],\n                'skill_url' => $resultData['url'],\n                'achieved_at' => api_get_local_time($resultData['acquired_skill_at']),\n                'course_image' => '',\n                'course_name' => '',\n            ];\n\n            if (!empty($courseInfo)) {\n                $tableRow['course_image'] = $courseInfo['course_image'];\n                $tableRow['course_name'] = $courseInfo['title'];\n            }\n            $tableRows[] = $tableRow;\n        }\n\n        $isHierarchicalTable = api_get_configuration_value('table_of_hierarchical_skill_presentation');\n        $allowLevels = api_get_configuration_value('skill_levels_names');\n\n        $tableResult = '<div id=\"skillList\">';\n        if ($isHierarchicalTable) {\n            $tableResult = '<div class=\"table-responsive\">';\n        }\n\n        if ($addTitle) {\n            $tableResult .= Display::page_subheader(get_lang('AchievedSkills'));\n            $tableResult .= '<div class=\"skills-badges\">';\n        }\n\n        if (!empty($skillParents)) {\n            if (empty($allowLevels)) {\n                $tableResult .= $this->processSkillListSimple($skills);\n            } else {\n                $graph = new Graph();\n                $graph->setAttribute('graphviz.graph.rankdir', 'LR');\n                foreach ($skillParents as $skillId => $parentList) {\n                    $old = null;\n                    foreach ($parentList as $parent) {\n                        if ($graph->hasVertex($parent['id'])) {\n                            $current = $graph->getVertex($parent['id']);\n                        } else {\n                            $current = $graph->createVertex($parent['id']);\n                            $current->setAttribute('graphviz.data', $parent['data']);\n                        }\n\n                        if (!empty($old)) {\n                            if ($graph->hasVertex($old['id'])) {\n                                $nextVertex = $graph->getVertex($old['id']);\n                            } else {\n                                $nextVertex = $graph->createVertex($old['id']);\n                                $nextVertex->setAttribute('graphviz.data', $old['data']);\n                            }\n\n                            if (!$nextVertex->hasEdgeTo($current)) {\n                                $nextVertex->createEdgeTo($current);\n                            }\n                        }\n                        $old = $parent;\n                    }\n                }\n\n                if ($isHierarchicalTable) {\n                    $table = '<table class =\"table table-bordered\">';\n                    // Getting \"root\" vertex\n                    $root = $graph->getVertex(1);\n                    $table .= '<tr>';\n                    /** @var Vertex $vertex */\n                    foreach ($root->getVerticesEdgeTo() as $vertex) {\n                        $data = $vertex->getAttribute('graphviz.data');\n\n                        $passed = in_array($data['id'], array_keys($skills));\n                        $transparency = '';\n                        if ($passed === false) {\n                            // @todo use a css class\n                            $transparency = 'opacity: 0.4; filter: alpha(opacity=40);';\n                        }\n\n                        $label = $this->processSkillListSimple([$data], 'mini', $transparency);\n                        $table .= '<td >';\n\n                        $table .= '<div class=\"skills_chart\"> <ul><li>'.$label;\n                        $table .= $this->processVertex($vertex, $skills);\n                        $table .= '</ul></li></div>';\n                        $table .= '</td>';\n                    }\n                    $table .= '</tr></table>';\n                } else {\n                    // Getting \"root\" vertex\n                    $root = $graph->getVertex(1);\n                    $table = '';\n                    /** @var Vertex $vertex */\n                    foreach ($root->getVerticesEdgeTo() as $vertex) {\n                        $data = $vertex->getAttribute('graphviz.data');\n\n                        $passed = in_array($data['id'], array_keys($skills));\n                        $transparency = '';\n                        if ($passed === false) {\n                            // @todo use a css class\n                            $transparency = 'opacity: 0.4; filter: alpha(opacity=40);';\n                        }\n\n                        $label = $this->processSkillListSimple([$data], 'mini', $transparency, false);\n\n                        $skillTable = $this->processVertex($vertex, $skills, 2);\n                        $table .= \"<h3>$label</h3>\";\n\n                        if (!empty($skillTable)) {\n                            $table .= '<table class =\"table table-bordered\">';\n                            $table .= '<tr>';\n                            $table .= '<td>';\n                            $table .= '<div>';\n                            $table .= $skillTable;\n                            $table .= '</div>';\n                            $table .= '</td>';\n                            $table .= '</tr></table>';\n                        }\n                    }\n                }\n\n                $tableResult .= $table;\n            }\n        } else {\n            $tableResult .= get_lang('WithoutAchievedSkills');\n        }\n\n        if ($addTitle) {\n            $tableResult .= '</div>';\n        }\n        $tableResult .= '</div>';\n\n        return [\n            'skills' => $tableRows,\n            'table' => $tableResult,\n        ];\n    }\n\n    /**\n     * @param int  $user_id\n     * @param int  $skill_id\n     * @param bool $return_flat_array\n     * @param bool $add_root\n     *\n     * @return array|null\n     */\n    public function getSkillsTree(\n        $user_id = null,\n        $skill_id = null,\n        $return_flat_array = false,\n        $add_root = false\n    ) {\n        if ($skill_id == 1) {\n            $skill_id = 0;\n        }\n        if (isset($user_id) && !empty($user_id)) {\n            $skills = $this->get_all(true, $user_id, null, $skill_id);\n        } else {\n            $skills = $this->get_all(false, false, null, $skill_id);\n        }\n\n        $original_skill = $this->list = $skills;\n\n        // Show 1 item\n        if (!empty($skill_id)) {\n            if ($add_root) {\n                if (!empty($skill_id)) {\n                    // Default root node\n                    $skills[1] = [\n                        'id' => '1',\n                        'name' => get_lang('Root'),\n                        'parent_id' => '0',\n                        'status' => 1,\n                    ];\n                    $skillInfo = $this->getSkillInfo($skill_id);\n\n                    // 2nd node\n                    $skills[$skill_id] = $skillInfo;\n                    // Uncomment code below to hide the searched skill\n                    $skills[$skill_id]['data']['parent_id'] = $skillInfo['extra']['parent_id'];\n                    $skills[$skill_id]['parent_id'] = 1;\n                }\n            }\n        }\n\n        $refs = [];\n        $skills_tree = null;\n\n        // Create references for all nodes\n        $flat_array = [];\n        $family = [];\n        if (!empty($skills)) {\n            foreach ($skills as &$skill) {\n                if ($skill['parent_id'] == 0) {\n                    $skill['parent_id'] = 'root';\n                }\n\n                // because except main keys (id, name, children) others keys\n                // are not saved while in the space tree\n                $skill['data'] = ['parent_id' => $skill['parent_id']];\n\n                // If a short code was defined, send the short code to replace\n                // skill name (to shorten the text in the wheel)\n                if (!empty($skill['short_code']) &&\n                    api_get_setting('show_full_skill_name_on_skill_wheel') === 'false'\n                ) {\n                    $skill['data']['short_code'] = $skill['short_code'];\n                }\n\n                $skill['data']['name'] = $skill['name'];\n                $skill['data']['status'] = $skill['status'];\n\n                // In order to paint all members of a family with the same color\n                if (empty($skill_id)) {\n                    if ($skill['parent_id'] == 1) {\n                        $family[$skill['id']] = $this->getAllChildren($skill['id']);\n                    }\n                } else {\n                    if ($skill['parent_id'] == $skill_id) {\n                        $family[$skill['id']] = $this->getAllChildren($skill['id']);\n                    }\n                    /*if ($skill_id == $skill['id']) {\n                        $skill['parent_id'] = 1;\n                    }*/\n                }\n\n                if (!isset($skill['data']['real_parent_id'])) {\n                    $skill['data']['real_parent_id'] = $skill['parent_id'];\n                }\n\n                // User achieved the skill (depends in the gradebook with certification)\n                $skill['data']['achieved'] = false;\n                if ($user_id) {\n                    $skill['data']['achieved'] = $this->userHasSkill(\n                        $user_id,\n                        $skill['id']\n                    );\n                }\n\n                // Check if the skill has related gradebooks\n                $skill['data']['skill_has_gradebook'] = false;\n                if (isset($skill['gradebooks']) && !empty($skill['gradebooks'])) {\n                    $skill['data']['skill_has_gradebook'] = true;\n                }\n                $refs[$skill['id']] = &$skill;\n                $flat_array[$skill['id']] = &$skill;\n            }\n\n            // Checking family value\n\n            $family_id = 1;\n            $new_family_array = [];\n            foreach ($family as $main_family_id => $family_items) {\n                if (!empty($family_items)) {\n                    foreach ($family_items as $item) {\n                        $new_family_array[$item['id']] = $family_id;\n                    }\n                }\n                $new_family_array[$main_family_id] = $family_id;\n                $family_id++;\n            }\n\n            if (empty($original_skill)) {\n                $refs['root']['children'][0] = $skills[1];\n                $skills[$skill_id]['data']['family_id'] = 1;\n                $refs['root']['children'][0]['children'][0] = $skills[$skill_id];\n                $flat_array[$skill_id] = $skills[$skill_id];\n            } else {\n                // Moving node to the children index of their parents\n                foreach ($skills as $my_skill_id => &$skill) {\n                    if (isset($new_family_array[$skill['id']])) {\n                        $skill['data']['family_id'] = $new_family_array[$skill['id']];\n                    }\n                    $refs[$skill['parent_id']]['children'][] = &$skill;\n                    $flat_array[$my_skill_id] = $skill;\n                }\n            }\n\n            $skills_tree = [\n                'name' => get_lang('SkillRootName'),\n                'id' => 'root',\n                'children' => $refs['root']['children'],\n                'data' => [],\n            ];\n        }\n\n        if ($return_flat_array) {\n            return $flat_array;\n        }\n        unset($skills);\n\n        return $skills_tree;\n    }\n\n    /**\n     * Get skills tree as a simplified JSON structure.\n     *\n     * @param int user id\n     * @param int skill id\n     * @param bool return a flat array or not\n     * @param int depth of the skills\n     *\n     * @return string json\n     */\n    public function getSkillsTreeToJson(\n        $user_id = null,\n        $skill_id = null,\n        $return_flat_array = false,\n        $main_depth = 2\n    ) {\n        $tree = $this->getSkillsTree(\n            $user_id,\n            $skill_id,\n            $return_flat_array,\n            true\n        );\n        $simple_tree = [];\n        if (!empty($tree['children'])) {\n            foreach ($tree['children'] as $element) {\n                $children = [];\n                if (isset($element['children'])) {\n                    $children = $this->getSkillToJson($element['children'], 1, $main_depth);\n                }\n                $simple_tree[] = [\n                    'name' => $element['name'],\n                    'children' => $children,\n                ];\n            }\n        }\n\n        return json_encode($simple_tree[0]['children']);\n    }\n\n    /**\n     * Get JSON element.\n     *\n     * @param array $subtree\n     * @param int   $depth\n     * @param int   $max_depth\n     *\n     * @return array|null\n     */\n    public function getSkillToJson($subtree, $depth = 1, $max_depth = 2)\n    {\n        $simple_sub_tree = [];\n        if (is_array($subtree)) {\n            $counter = 1;\n            foreach ($subtree as $elem) {\n                $tmp = [];\n                $tmp['name'] = $elem['name'];\n                $tmp['id'] = $elem['id'];\n                $tmp['isSearched'] = self::isSearched($elem['id']);\n\n                if (isset($elem['children']) && is_array($elem['children'])) {\n                    $tmp['children'] = $this->getSkillToJson(\n                        $elem['children'],\n                        $depth + 1,\n                        $max_depth\n                    );\n                }\n\n                if ($depth > $max_depth) {\n                    continue;\n                }\n\n                $tmp['depth'] = $depth;\n                $tmp['counter'] = $counter;\n                $counter++;\n\n                if (isset($elem['data']) && is_array($elem['data'])) {\n                    foreach ($elem['data'] as $key => $item) {\n                        $tmp[$key] = $item;\n                    }\n                }\n                $simple_sub_tree[] = $tmp;\n            }\n\n            return $simple_sub_tree;\n        }\n\n        return null;\n    }\n\n    /**\n     * @param int $user_id\n     *\n     * @return bool\n     */\n    public function getUserSkillRanking($user_id)\n    {\n        $user_id = (int) $user_id;\n        $sql = \"SELECT count(skill_id) count\n                FROM {$this->table} s\n                INNER JOIN {$this->table_skill_rel_user} su\n                ON (s.id = su.skill_id)\n                WHERE user_id = $user_id\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $result = Database::fetch_row($result);\n\n            return $result[0];\n        }\n\n        return false;\n    }\n\n    /**\n     * @param $start\n     * @param $limit\n     * @param $sidx\n     * @param $sord\n     * @param $where_condition\n     *\n     * @return array\n     */\n    public function getUserListSkillRanking(\n        $start,\n        $limit,\n        $sidx,\n        $sord,\n        $where_condition\n    ) {\n        $start = (int) $start;\n        $limit = (int) $limit;\n\n        /*  ORDER BY $sidx $sord */\n        $sql = \"SELECT *, @rownum:=@rownum+1 rank FROM (\n                    SELECT u.user_id, firstname, lastname, count(username) skills_acquired\n                    FROM {$this->table} s INNER JOIN {$this->table_skill_rel_user} su ON (s.id = su.skill_id)\n                    INNER JOIN {$this->table_user} u ON u.user_id = su.user_id, (SELECT @rownum:=0) r\n                    WHERE 1=1 $where_condition\n                    GROUP BY username\n                    ORDER BY skills_acquired desc\n                    LIMIT $start , $limit)  AS T1, (SELECT @rownum:=0) r\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            return Database::store_result($result, 'ASSOC');\n        }\n\n        return [];\n    }\n\n    /**\n     * @return int\n     */\n    public function getUserListSkillRankingCount()\n    {\n        $sql = \"SELECT count(*) FROM (\n                    SELECT count(distinct 1)\n                    FROM {$this->table} s\n                    INNER JOIN {$this->table_skill_rel_user} su\n                    ON (s.id = su.skill_id)\n                    INNER JOIN {$this->table_user} u\n                    ON u.user_id = su.user_id\n                    GROUP BY username\n                 ) as T1\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $result = Database::fetch_row($result);\n\n            return $result[0];\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param string $courseCode\n     *\n     * @return int\n     */\n    public function getCountSkillsByCourse($courseCode)\n    {\n        $courseCode = Database::escape_string($courseCode);\n        $sql = \"SELECT count(skill_id) as count\n                FROM {$this->table_gradebook} g\n                INNER JOIN {$this->table_skill_rel_gradebook} sg\n                ON g.id = sg.gradebook_id\n                WHERE course_code = '$courseCode'\";\n\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $result = Database::fetch_row($result);\n\n            return $result[0];\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param int $skillId\n     *\n     * @return array\n     */\n    public function getCoursesBySkill($skillId)\n    {\n        $skillId = (int) $skillId;\n        $sql = \"SELECT c.title, c.code\n                FROM {$this->table_gradebook} g\n                INNER JOIN {$this->table_skill_rel_gradebook} sg\n                ON g.id = sg.gradebook_id\n                INNER JOIN {$this->table_course} c\n                ON c.code = g.course_code\n                WHERE sg.skill_id = $skillId\n                AND (g.session_id IS NULL OR g.session_id = 0)\";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * Check if the user has the skill.\n     *\n     * @param int $userId    The user id\n     * @param int $skillId   The skill id\n     * @param int $courseId  Optional. The course id\n     * @param int $sessionId Optional. The session id\n     *\n     * @return bool Whether the user has the skill return true. Otherwise return false\n     */\n    public function userHasSkill($userId, $skillId, $courseId = 0, $sessionId = 0)\n    {\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n\n        $whereConditions = [\n            'user_id = ? ' => (int) $userId,\n            'AND skill_id = ? ' => (int) $skillId,\n        ];\n\n        if ($courseId > 0) {\n            if ($sessionId) {\n                $whereConditions['AND course_id = ? '] = $courseId;\n                $whereConditions['AND session_id = ? '] = $sessionId;\n            } else {\n                $whereConditions['AND course_id = ? AND session_id is NULL'] = $courseId;\n            }\n        }\n\n        $result = Database::select(\n            'COUNT(1) AS qty',\n            $this->table_skill_rel_user,\n            [\n                'where' => $whereConditions,\n            ],\n            'first'\n        );\n\n        if ($result != false) {\n            if ($result['qty'] > 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if a skill is searched.\n     *\n     * @param int $id The skill id\n     *\n     * @return bool Whether el skill is searched return true. Otherwise return false\n     */\n    public static function isSearched($id)\n    {\n        $id = (int) $id;\n\n        if (empty($id)) {\n            return false;\n        }\n\n        $skillRelProfileTable = Database::get_main_table(TABLE_MAIN_SKILL_REL_PROFILE);\n\n        $result = Database::select(\n            'COUNT( DISTINCT `skill_id`) AS qty',\n            $skillRelProfileTable,\n            [\n                'where' => [\n                    'skill_id = ?' => $id,\n                ],\n            ],\n            'first'\n        );\n\n        if ($result === false) {\n            return false;\n        }\n\n        if ($result['qty'] > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the achieved skills by course.\n     *\n     * @param int $courseId The course id\n     *\n     * @return array The skills list\n     */\n    public function listAchievedByCourse($courseId)\n    {\n        $courseId = (int) $courseId;\n\n        if ($courseId == 0) {\n            return [];\n        }\n\n        $list = [];\n\n        $sql = \"SELECT\n                    course.id c_id,\n                    course.title c_name,\n                    course.directory c_directory,\n                    user.user_id,\n                    user.lastname,\n                    user.firstname,\n                    user.username,\n                    skill.id skill_id,\n                    skill.name skill_name,\n                    sru.acquired_skill_at\n                FROM {$this->table_skill_rel_user} AS sru\n                INNER JOIN {$this->table_course}\n                ON sru.course_id = course.id\n                INNER JOIN {$this->table_user}\n                ON sru.user_id = user.user_id\n                INNER JOIN {$this->table}\n                ON sru.skill_id = skill.id\n                WHERE course.id = $courseId\";\n\n        $result = Database::query($sql);\n\n        while ($row = Database::fetch_assoc($result)) {\n            $row['skill_name'] = self::translateName($row['skill_name']);\n            $list[] = $row;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Get the users list who achieved a skill.\n     *\n     * @param int $skillId The skill id\n     *\n     * @return array The users list\n     */\n    public function listUsersWhoAchieved($skillId)\n    {\n        $skillId = (int) $skillId;\n\n        if ($skillId == 0) {\n            return [];\n        }\n\n        $list = [];\n        $sql = \"SELECT\n                    course.id c_id,\n                    course.title c_name,\n                    course.directory c_directory,\n                    user.user_id,\n                    user.lastname,\n                    user.firstname,\n                    user.username,\n                    skill.id skill_id,\n                    skill.name skill_name,\n                    sru.acquired_skill_at\n                FROM {$this->table_skill_rel_user} AS sru\n                INNER JOIN {$this->table_course}\n                ON sru.course_id = course.id\n                INNER JOIN {$this->table_user}\n                ON sru.user_id = user.user_id\n                INNER JOIN {$this->table}\n                ON sru.skill_id = skill.id\n                WHERE skill.id = $skillId \";\n\n        $result = Database::query($sql);\n        while ($row = Database::fetch_assoc($result)) {\n            $row['skill_name'] = self::translateName($row['skill_name']);\n            $list[] = $row;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Get the session list where the user can achieve a skill.\n     *\n     * @param int $skillId The skill id\n     *\n     * @return array\n     */\n    public function getSessionsBySkill($skillId)\n    {\n        $skillId = (int) $skillId;\n\n        $sql = \"SELECT s.id, s.name\n                FROM {$this->table_gradebook} g\n                INNER JOIN {$this->table_skill_rel_gradebook} sg\n                ON g.id = sg.gradebook_id\n                INNER JOIN {$this->sessionTable} s\n                ON g.session_id = s.id\n                WHERE sg.skill_id = $skillId\n                AND g.session_id > 0\";\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * Check if the $fromUser can comment the $toUser skill issue.\n     *\n     * @param User $fromUser\n     * @param User $toUser\n     *\n     * @return bool\n     */\n    public static function userCanAddFeedbackToUser($fromUser, $toUser)\n    {\n        if (api_is_platform_admin()) {\n            return true;\n        }\n\n        $userRepo = UserManager::getRepository();\n        $fromUserStatus = $fromUser->getStatus();\n\n        switch ($fromUserStatus) {\n            case SESSIONADMIN:\n                if (api_get_setting('allow_session_admins_to_manage_all_sessions') === 'true') {\n                    if ($toUser->getCreatorId() === $fromUser->getId()) {\n                        return true;\n                    }\n                }\n\n                $sessionAdmins = $userRepo->getSessionAdmins($toUser);\n\n                foreach ($sessionAdmins as $sessionAdmin) {\n                    if ($sessionAdmin->getId() !== $fromUser->getId()) {\n                        continue;\n                    }\n\n                    return true;\n                }\n                break;\n            case STUDENT_BOSS:\n                $studentBosses = $userRepo->getStudentBosses($toUser);\n                foreach ($studentBosses as $studentBoss) {\n                    if ($studentBoss->getId() !== $fromUser->getId()) {\n                        continue;\n                    }\n\n                    return true;\n                }\n                break;\n            case DRH:\n                return UserManager::is_user_followed_by_drh(\n                    $toUser->getId(),\n                    $fromUser->getId()\n                );\n        }\n\n        return false;\n    }\n\n    /**\n     * If $studentId is set then check if current user has the right to see\n     * the page.\n     *\n     * @param int  $studentId check if current user has access to see $studentId\n     * @param bool $blockPage raise a api_not_allowed()\n     *\n     * @return bool\n     */\n    public static function isAllowed($studentId = 0, $blockPage = true)\n    {\n        $allowHR = api_get_setting('allow_hr_skills_management') === 'true';\n\n        if (self::isToolAvailable()) {\n            if (api_is_platform_admin(false, $allowHR)) {\n                return true;\n            }\n\n            if (!empty($studentId)) {\n                $currentUserId = api_get_user_id();\n                if ((int) $currentUserId === (int) $studentId) {\n                    return true;\n                }\n\n                $haveAccess = self::hasAccessToUserSkill(\n                    $currentUserId,\n                    $studentId\n                );\n\n                if ($haveAccess) {\n                    return true;\n                }\n            }\n        }\n\n        if ($blockPage) {\n            api_not_allowed(true);\n        }\n\n        return false;\n    }\n\n    /**\n     * @return bool\n     */\n    public static function isToolAvailable()\n    {\n        $allowTool = api_get_setting('allow_skills_tool');\n\n        if ($allowTool === 'true') {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param int $currentUserId\n     * @param int $studentId\n     *\n     * @return bool\n     */\n    public static function hasAccessToUserSkill($currentUserId, $studentId)\n    {\n        if (self::isToolAvailable()) {\n            if (api_is_platform_admin()) {\n                return true;\n            }\n\n            $currentUserId = (int) $currentUserId;\n            $studentId = (int) $studentId;\n\n            if ($currentUserId === $studentId) {\n                return true;\n            }\n\n            if (api_is_student_boss()) {\n                $isBoss = UserManager::userIsBossOfStudent($currentUserId, $studentId);\n                if ($isBoss) {\n                    return true;\n                }\n            }\n\n            $allow = api_get_configuration_value('allow_private_skills');\n            if ($allow === true) {\n                if (api_is_teacher()) {\n                    return UserManager::isTeacherOfStudent(\n                        $currentUserId,\n                        $studentId\n                    );\n                }\n\n                if (api_is_drh()) {\n                    return UserManager::is_user_followed_by_drh(\n                        $studentId,\n                        $currentUserId\n                    );\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get skills.\n     *\n     * @param int $userId\n     * @param int level\n     *\n     * @return array\n     */\n    public function getStudentSkills($userId, $level = 0)\n    {\n        $userId = (int) $userId;\n\n        $sql = \"SELECT s.id, s.name, sru.acquired_skill_at\n                FROM {$this->table} s\n                INNER JOIN {$this->table_skill_rel_user} sru\n                ON s.id = sru.skill_id\n                WHERE sru.user_id = $userId\";\n\n        $result = Database::query($sql);\n\n        $skills = [];\n        foreach ($result as $item) {\n            if (empty($level)) {\n                $skills[] = [\n                    'name' => self::translateName($item['name']),\n                    'acquired_skill_at' => $item['acquired_skill_at'],\n                ];\n            } else {\n                $parents = self::get_parents($item['id']);\n                // +2 because it takes into account the root\n                if (count($parents) == $level + 1) {\n                    $skills[] = [\n                        'name' => self::translateName($item['name']),\n                        'acquired_skill_at' => $item['acquired_skill_at'],\n                    ];\n                }\n            }\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return string\n     */\n    public static function translateName($name)\n    {\n        $variable = ChamiloApi::getLanguageVar($name, 'Skill');\n\n        return isset($GLOBALS[$variable]) ? $GLOBALS[$variable] : $name;\n    }\n\n    /**\n     * @param string $code\n     *\n     * @return mixed|string\n     */\n    public static function translateCode($code)\n    {\n        if (empty($code)) {\n            return '';\n        }\n\n        $variable = ChamiloApi::getLanguageVar($code, 'SkillCode');\n\n        return isset($GLOBALS[$variable]) ? $GLOBALS[$variable] : $code;\n    }\n\n    /**\n     * @param array $skillInfo\n     *\n     * @return array\n     */\n    public function setForm(FormValidator &$form, $skillInfo = [])\n    {\n        $allSkills = $this->get_all();\n        $objGradebook = new Gradebook();\n\n        $isAlreadyRootSkill = false;\n        foreach ($allSkills as $checkedSkill) {\n            if (intval($checkedSkill['parent_id']) > 0) {\n                $isAlreadyRootSkill = true;\n                break;\n            }\n        }\n\n        $skillList = $isAlreadyRootSkill ? [] : [0 => get_lang('None')];\n\n        foreach ($allSkills as $skill) {\n            if (isset($skillInfo['id']) && $skill['id'] == $skillInfo['id']) {\n                continue;\n            }\n\n            $skillList[$skill['id']] = $skill['name'];\n        }\n\n        $allGradeBooks = $objGradebook->find('all');\n\n        // This procedure is for check if there is already a Skill with no Parent (Root by default)\n        $gradeBookList = [];\n        foreach ($allGradeBooks as $gradebook) {\n            $gradeBookList[$gradebook['id']] = $gradebook['name'];\n        }\n\n        $translateUrl = api_get_path(WEB_CODE_PATH).'admin/skill_translate.php?';\n        $translateNameButton = '';\n        $translateCodeButton = '';\n        $skillId = null;\n        if (!empty($skillInfo)) {\n            $skillId = $skillInfo['id'];\n            $translateNameUrl = $translateUrl.http_build_query(['skill' => $skillId, 'action' => 'name']);\n            $translateCodeUrl = $translateUrl.http_build_query(['skill' => $skillId, 'action' => 'code']);\n            $translateNameButton = Display::toolbarButton(\n                get_lang('TranslateThisTerm'),\n                $translateNameUrl,\n                'language',\n                'link'\n            );\n            $translateCodeButton = Display::toolbarButton(\n                get_lang('TranslateThisTerm'),\n                $translateCodeUrl,\n                'language',\n                'link'\n            );\n        }\n\n        $form->addText('name', [get_lang('Name'), $translateNameButton], true, ['id' => 'name']);\n        $form->addText('short_code', [get_lang('ShortCode'), $translateCodeButton], false, ['id' => 'short_code']);\n\n        // Cannot change parent of root\n        if ($skillId != 1) {\n            $form->addSelect('parent_id', get_lang('Parent'), $skillList, ['id' => 'parent_id']);\n        }\n\n        $form->addSelect(\n            'gradebook_id',\n            [get_lang('Gradebook'), get_lang('WithCertificate')],\n            $gradeBookList,\n            ['id' => 'gradebook_id', 'multiple' => 'multiple', 'size' => 10]\n        );\n        $form->addTextarea('description', get_lang('Description'), ['id' => 'description', 'rows' => 7]);\n        $form->addTextarea('criteria', get_lang('CriteriaToEarnTheBadge'), ['id' => 'criteria', 'rows' => 7]);\n\n        // EXTRA FIELDS\n        $extraField = new ExtraField('skill');\n        $returnParams = $extraField->addElements($form, $skillId);\n\n        if (empty($skillInfo)) {\n            $form->addButtonCreate(get_lang('Add'));\n        } else {\n            $form->addButtonUpdate(get_lang('Update'));\n            $form->addHidden('id', $skillInfo['id']);\n        }\n\n        return $returnParams;\n    }\n\n    /**\n     * @return string\n     */\n    public function getToolBar()\n    {\n        $toolbar = Display::url(\n            Display::return_icon(\n                'back.png',\n                get_lang('ManageSkills'),\n                null,\n                ICON_SIZE_MEDIUM\n            ),\n            api_get_path(WEB_CODE_PATH).'admin/skill_list.php'\n        );\n        $actions = '<div class=\"actions\">'.$toolbar.'</div>';\n\n        return $actions;\n    }\n\n    /**\n     * @param SkillRelItemRelUser $skillRelItemRelUser\n     */\n    public static function getUserSkillStatusLabel(SkillRelItem $skillRelItem, SkillRelItemRelUser $skillRelItemRelUser = null, bool $addHeader = true, int $userId = 0): string\n    {\n        if (empty($skillRelItem)) {\n            return '';\n        }\n        $type = 'success';\n        if (empty($skillRelItemRelUser)) {\n            $type = '';\n        }\n        $label = '';\n        $skill = $skillRelItem->getSkill();\n        if ($addHeader) {\n            $label .= '<span id=\"skill-'.$skill->getId().'-'.$userId.'\" class=\"user_skill\" style=\"cursor:pointer\">';\n        }\n        $label .= Display::label($skill->getName(), $type);\n        if ($addHeader) {\n            $label .= '</span>&nbsp;';\n        }\n\n        return $label;\n    }\n\n    /**\n     * Attach a list of skills (skill_rel_item) potentially assigned to a user to the given form.\n     *\n     * @param int  $typeId    see ITEM_TYPE_* constants\n     * @param bool $addHeader Whether to show the 'Skills' title for this block\n     */\n    public static function addSkillsToUserForm(FormValidator $form, int $typeId, int $itemId, int $userId, int $resultId = 0, bool $addHeader = false): void\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if ($allowSkillInTools && !empty($typeId) && !empty($itemId) && !empty($userId)) {\n            $em = Database::getManager();\n            $items = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n\n            $skillRelUser = new SkillRelUser();\n            $skillUserList = $skillRelUser->getUserSkills($userId);\n            if (!empty($skillUserList)) {\n                $skillUserList = array_column($skillUserList, 'skill_id');\n            }\n\n            $skills = '';\n            /** @var SkillRelItem $skillRelItem */\n            foreach ($items as $skillRelItem) {\n                $criteria = [\n                    'user' => $userId,\n                    'skillRelItem' => $skillRelItem,\n                ];\n                $skillRelItemRelUser = $em->getRepository('ChamiloSkillBundle:SkillRelItemRelUser')->findOneBy($criteria);\n                $skills .= self::getUserSkillStatusLabel($skillRelItem, $skillRelItemRelUser, true, $userId);\n            }\n\n            if (!empty($skills)) {\n                $url = api_get_path(WEB_AJAX_PATH).'skill.ajax.php?a=update_skill_rel_user&'.api_get_cidreq();\n                $params = [\n                    'item_id' => $itemId,\n                    'type_id' => $typeId,\n                    'user_id' => $userId,\n                    'course_id' => api_get_course_int_id(),\n                    'session_id' => api_get_session_id(),\n                    'result_id' => $resultId,\n                ];\n                $params = json_encode($params);\n                if ($addHeader) {\n                    $form->addHtml(Display::page_subheader2(get_lang('Skills')));\n                }\n\n                $skillId = $skillRelItem->getSkill()->getId();\n                $elementId = 'skill-'.$skillId.'-'.$userId;\n                $html = '\n                <script>\n                    $(function() {\n                        $(\"#'.$elementId.'\").on(\"click\", function() {\n                            var params = '.$params.';\n                            $.ajax({\n                                type: \"GET\",\n                                async: false,\n                                data: params,\n                                url: \"'.$url.'&skill_id=\"+'.$skillId.',\n                                success: function(result) {\n                                    $(\"#'.$elementId.'.user_skill\").html(result);\n                                }\n                            });\n                        });\n                    });\n                </script>\n                ';\n                $form->addHtml($html);\n                $form->addLabel(get_lang('Skills'), $skills);\n                if ($addHeader) {\n                    $form->addHtml('<br />');\n                }\n            }\n        }\n    }\n\n    /**\n     * Shows a list of skills (skill_rel_item) potentially assigned to a user\n     * to the given form, with AJAX action on click to save the assignment.\n     * Assigned skills appear in a different colour.\n     *\n     * @param int  $typeId    see ITEM_TYPE_* constants\n     * @param bool $addHeader Whether to show the 'Skills' title for this block\n     */\n    public static function getAddSkillsToUserBlock(int $typeId, int $itemId, int $userId, int $resultId = 0, bool $addHeader = false): string\n    {\n        $block = '';\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if ($allowSkillInTools && !empty($typeId) && !empty($itemId) && !empty($userId)) {\n            $em = Database::getManager();\n            $items = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n\n            $skills = '';\n            /** @var SkillRelItem $skillRelItem */\n            foreach ($items as $skillRelItem) {\n                $criteria = [\n                    'user' => $userId,\n                    'skillRelItem' => $skillRelItem,\n                ];\n                $skillRelItemRelUser = $em->getRepository('ChamiloSkillBundle:SkillRelItemRelUser')->findOneBy($criteria);\n                $skills .= self::getUserSkillStatusLabel($skillRelItem, $skillRelItemRelUser, true, $userId);\n            }\n            $block .= $skills;\n\n            if (!empty($skills)) {\n                $url = api_get_path(WEB_AJAX_PATH).'skill.ajax.php?a=update_skill_rel_user&'.api_get_cidreq();\n                $params = [\n                    'item_id' => $itemId,\n                    'type_id' => $typeId,\n                    'user_id' => $userId,\n                    'course_id' => api_get_course_int_id(),\n                    'session_id' => api_get_session_id(),\n                    'result_id' => $resultId,\n                ];\n                $params = json_encode($params);\n                if ($addHeader) {\n                    $block .= Display::page_subheader2(get_lang('Skills'));\n                }\n\n                $skillId = $skillRelItem->getSkill()->getId();\n                $elementId = 'skill-'.$skillId.'-'.$userId;\n                $html = '\n                <script>\n                    $(function() {\n                        $(\"#'.$elementId.'\").on(\"click\", function() {\n                            var params = '.$params.';\n                            $.ajax({\n                                type: \"GET\",\n                                async: false,\n                                data: params,\n                                url: \"'.$url.'&skill_id=\"+'.$skillId.',\n                                success: function(result) {\n                                    $(\"#'.$elementId.'.user_skill\").html(result);\n                                }\n                            });\n                        });\n                    });\n                </script>\n                ';\n                $block .= $html;\n                //$block .= $form->addLabel(get_lang('Skills'), $skills);\n                if ($addHeader) {\n                    $block .= '<br />';\n                }\n            }\n        }\n\n        return $block;\n    }\n\n    /**\n     * Add skills select ajax for an item (exercise, lp).\n     *\n     * @param int $courseId\n     * @param int $sessionId\n     * @param int $typeId    see ITEM_TYPE_* constants\n     * @param int $itemId\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public static function addSkillsToForm(FormValidator $form, $courseId, $sessionId, $typeId, $itemId = 0)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if (!$allowSkillInTools) {\n            return [];\n        }\n\n        if (empty($sessionId)) {\n            $sessionId = null;\n        }\n\n        $em = Database::getManager();\n        $skillRelCourseRepo = $em->getRepository('ChamiloSkillBundle:SkillRelCourse');\n        $items = $skillRelCourseRepo->findBy(['course' => $courseId, 'session' => $sessionId]);\n\n        $skills = [];\n        /** @var \\Chamilo\\SkillBundle\\Entity\\SkillRelCourse $skillRelCourse */\n        foreach ($items as $skillRelCourse) {\n            $skills[] = $skillRelCourse->getSkill();\n        }\n\n        $selectedSkills = [];\n        if (!empty($itemId)) {\n            $items = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n            /** @var SkillRelItem $skillRelItem */\n            foreach ($items as $skillRelItem) {\n                $selectedSkills[] = $skillRelItem->getSkill()->getId();\n            }\n        }\n\n        self::skillsToCheckbox($form, $skills, $courseId, $sessionId, $selectedSkills);\n\n        return $skills;\n    }\n\n    /**\n     * @param int $courseId\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function getSkillRelItemsPerCourse($courseId, $sessionId = null)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        $skills = [];\n\n        if (empty($sessionId)) {\n            $sessionId = null;\n        }\n\n        if ($allowSkillInTools) {\n            $em = Database::getManager();\n            $skills = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['courseId' => $courseId, 'sessionId' => $sessionId]\n            );\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param int $itemId\n     * @param int $itemType\n     *\n     * @return array\n     */\n    public static function getItemInfo($itemId, $itemType)\n    {\n        $itemInfo = [];\n        $itemId = (int) $itemId;\n        $itemType = (int) $itemType;\n        $em = Database::getManager();\n\n        switch ($itemType) {\n            case ITEM_TYPE_EXERCISE:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CQuiz $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CQuiz')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getTitle();\n                }\n                break;\n            case ITEM_TYPE_HOTPOTATOES:\n                break;\n            case ITEM_TYPE_LINK:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CLink $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CLink')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getTitle();\n                }\n                break;\n            case ITEM_TYPE_LEARNPATH:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CLp $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CLp')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getName();\n                }\n                break;\n            case ITEM_TYPE_GRADEBOOK:\n                break;\n            case ITEM_TYPE_STUDENT_PUBLICATION:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CStudentPublication $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CStudentPublication')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getTitle();\n                }\n                break;\n            //ITEM_TYPE_FORUM', 7);\n            case ITEM_TYPE_ATTENDANCE:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CAttendance $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CAttendance')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getName();\n                }\n                break;\n            case ITEM_TYPE_SURVEY:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CSurvey $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CSurvey')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = strip_tags($item->getTitle());\n                }\n                break;\n            case ITEM_TYPE_FORUM_THREAD:\n                /** @var \\Chamilo\\CourseBundle\\Entity\\CForumThread $item */\n                $item = $em->getRepository('ChamiloCourseBundle:CForumThread')->find($itemId);\n                if ($item) {\n                    $itemInfo['name'] = $item->getThreadTitle();\n                }\n                break;\n        }\n\n        return $itemInfo;\n    }\n\n    /**\n     * @param int $typeId\n     * @param int $itemId\n     *\n     * @return array\n     */\n    public static function getSkillRelItems($typeId, $itemId)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        $skills = [];\n        if ($allowSkillInTools) {\n            $em = Database::getManager();\n            $skills = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n        }\n\n        return $skills;\n    }\n\n    /**\n     * @param int $typeId\n     * @param int $itemId\n     *\n     * @return string\n     */\n    public static function getSkillRelItemsToString($typeId, $itemId)\n    {\n        $skills = self::getSkillRelItems($typeId, $itemId);\n        $skillToString = '';\n        if (!empty($skills)) {\n            /** @var SkillRelItem $skillRelItem */\n            $skillList = [];\n            foreach ($skills as $skillRelItem) {\n                $skillList[] = Display::label($skillRelItem->getSkill()->getName(), 'success');\n            }\n            $skillToString = '&nbsp;'.implode(' ', $skillList);\n        }\n\n        return $skillToString;\n    }\n\n    /**\n     * @param int $itemId\n     * @param int $typeId\n     */\n    public static function deleteSkillsFromItem($itemId, $typeId)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if ($allowSkillInTools) {\n            $itemId = (int) $itemId;\n            $typeId = (int) $typeId;\n\n            $em = Database::getManager();\n            // Delete old ones\n            $items = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n\n            /** @var SkillRelItem $skillRelItem */\n            foreach ($items as $skillRelItem) {\n                $em->remove($skillRelItem);\n            }\n            $em->flush();\n        }\n    }\n\n    /**\n     * Builds a list of skills attributable to this course+session in a checkbox input list for FormValidator.\n     *\n     * @param     $courseId\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function setSkillsToCourse(FormValidator $form, $courseId, $sessionId = 0)\n    {\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n\n        $form->addHidden('course_id', $courseId);\n        $form->addHidden('session_id', $sessionId);\n\n        if (empty($sessionId)) {\n            $sessionId = null;\n        }\n\n        $em = Database::getManager();\n        $skillRelCourseRepo = $em->getRepository('ChamiloSkillBundle:SkillRelCourse');\n        $items = $skillRelCourseRepo->findBy(['course' => $courseId, 'session' => $sessionId]);\n\n        $skillsIdList = [];\n        $skills = [];\n        /** @var \\Chamilo\\SkillBundle\\Entity\\SkillRelCourse $skillRelCourse */\n        foreach ($items as $skillRelCourse) {\n            $skillId = $skillRelCourse->getSkill()->getId();\n            $skills[] = $skillRelCourse->getSkill();\n            $skillsIdList[] = $skillId;\n        }\n\n        $group = self::skillsToCheckbox($form, $skills, $courseId, $sessionId, $skillsIdList);\n        $group->freeze();\n\n        return [];\n    }\n\n    /**\n     * Show a list of skills attributable to this course+session in a checkbox input list for FormValidator.\n     *\n     * @param       $skills\n     * @param       $courseId\n     * @param       $sessionId\n     * @param array $selectedSkills\n     *\n     * @return HTML_QuickForm_Element|HTML_QuickForm_group\n     */\n    public static function skillsToCheckbox(FormValidator $form, $skills, $courseId, $sessionId, $selectedSkills = [])\n    {\n        $em = Database::getManager();\n        $skillRelItemRepo = $em->getRepository('ChamiloSkillBundle:SkillRelItem');\n        $skillList = [];\n        /** @var \\Chamilo\\CoreBundle\\Entity\\Skill $skill */\n        foreach ($skills as $skill) {\n            $skillList[$skill->getId()] = $skill->getName();\n        }\n\n        if (!empty($skillList)) {\n            asort($skillList);\n        }\n\n        if (empty($sessionId)) {\n            $sessionId = null;\n        }\n\n        $elements = [];\n        foreach ($skillList as $skillId => $skill) {\n            $countLabel = '';\n            $skillRelItemCount = $skillRelItemRepo->count(\n                ['skill' => $skillId, 'courseId' => $courseId, 'sessionId' => $sessionId]\n            );\n            if (!empty($skillRelItemCount)) {\n                $countLabel = '&nbsp;'.Display::badge($skillRelItemCount, 'info');\n            }\n\n            $element = $form->createElement(\n                'checkbox',\n                \"skills[$skillId]\",\n                null,\n                $skill.$countLabel\n            );\n\n            if (in_array($skillId, $selectedSkills)) {\n                $element->setValue(1);\n            }\n\n            $elements[] = $element;\n        }\n\n        return $form->addGroup($elements, '', get_lang('Skills'));\n    }\n\n    /**\n     * Relate skill with an item (exercise, gradebook, lp, etc).\n     *\n     * @return bool\n     */\n    public static function saveSkillsToCourseFromForm(FormValidator $form)\n    {\n        $skills = (array) $form->getSubmitValue('skills');\n        $courseId = (int) $form->getSubmitValue('course_id');\n        $sessionId = (int) $form->getSubmitValue('session_id');\n\n        if (!empty($skills)) {\n            $skills = array_keys($skills);\n        }\n\n        return self::saveSkillsToCourse($skills, $courseId, $sessionId);\n    }\n\n    /**\n     * @param array $skills\n     * @param int   $courseId\n     * @param int   $sessionId\n     *\n     * @return bool\n     */\n    public static function saveSkillsToCourse($skills, $courseId, $sessionId)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if (!$allowSkillInTools) {\n            return false;\n        }\n\n        $em = Database::getManager();\n        $sessionId = empty($sessionId) ? null : (int) $sessionId;\n\n        $course = api_get_course_entity($courseId);\n        if (empty($course)) {\n            return false;\n        }\n\n        $session = null;\n        if (!empty($sessionId)) {\n            $session = api_get_session_entity($sessionId);\n            $courseExistsInSession = SessionManager::sessionHasCourse($sessionId, $course->getCode());\n            if (!$courseExistsInSession) {\n                return false;\n            }\n        }\n\n        // Delete old ones\n        $items = $em->getRepository('ChamiloSkillBundle:SkillRelCourse')->findBy(\n            ['course' => $courseId, 'session' => $sessionId]\n        );\n\n        if (!empty($items)) {\n            /** @var SkillRelCourse $item */\n            foreach ($items as $item) {\n                if (!in_array($item->getSkill()->getId(), $skills)) {\n                    $em->remove($item);\n                }\n            }\n            $em->flush();\n        }\n\n        // Add new one\n        if (!empty($skills)) {\n            foreach ($skills as $skillId) {\n                $item = (new SkillRelCourse())\n                    ->setCourse($course)\n                    ->setSession($session)\n                ;\n\n                /** @var SkillEntity $skill */\n                $skill = $em->getRepository('ChamiloCoreBundle:Skill')->find($skillId);\n                if ($skill) {\n                    if (!$skill->hasCourseAndSession($item)) {\n                        $skill->addToCourse($item);\n                        $em->persist($skill);\n                    }\n                }\n            }\n            $em->flush();\n        }\n\n        return true;\n    }\n\n    /**\n     * Relate skill with an item (exercise, gradebook, lp, etc).\n     *\n     * @param FormValidator $form\n     * @param int           $typeId\n     * @param int           $itemId\n     */\n    public static function saveSkills($form, $typeId, $itemId)\n    {\n        $allowSkillInTools = api_get_configuration_value('allow_skill_rel_items');\n        if ($allowSkillInTools) {\n            $userId = api_get_user_id();\n            $courseId = api_get_course_int_id();\n            if (empty($courseId)) {\n                $courseId = null;\n            }\n            $sessionId = api_get_session_id();\n            if (empty($sessionId)) {\n                $sessionId = null;\n            }\n\n            $em = Database::getManager();\n            $skills = (array) $form->getSubmitValue('skills');\n\n            $skillRelItemRelUserRepo = $em->getRepository('ChamiloSkillBundle:SkillRelItemRelUser');\n\n            // Delete old ones\n            $items = $em->getRepository('ChamiloSkillBundle:SkillRelItem')->findBy(\n                ['itemId' => $itemId, 'itemType' => $typeId]\n            );\n\n            if (!empty($items)) {\n                /** @var SkillRelItem $skillRelItem */\n                foreach ($items as $skillRelItem) {\n                    $skill = $skillRelItem->getSkill();\n                    $skillId = $skill->getId();\n                    $skillRelItemId = $skillRelItem->getId();\n                    if (!in_array($skillId, $skills)) {\n                        // Check if SkillRelItemRelUser is empty\n                        /** @var SkillRelItem[] $skillRelItemList */\n                        $skillRelItemRelUserList = $skillRelItemRelUserRepo->findBy(['skillRelItem' => $skillRelItemId]);\n                        if (empty($skillRelItemRelUserList)) {\n                            $em->remove($skillRelItem);\n                        } else {\n                            /** @var \\Chamilo\\SkillBundle\\Entity\\SkillRelItemRelUser $skillRelItemRelUser */\n                            foreach ($skillRelItemRelUserList as $skillRelItemRelUser) {\n                                Display::addFlash(\n                                    Display::return_message(\n                                        get_lang('CannotDeleteSkillBlockedByUser').'<br />'.\n                                        get_lang('User').': '.UserManager::formatUserFullName($skillRelItemRelUser->getUser()).'<br />'.\n                                        get_lang('Skill').': '.$skillRelItemRelUser->getSkillRelItem()->getSkill()->getName(),\n                                        'warning',\n                                        false\n                                    )\n                                );\n                            }\n                        }\n                    }\n                }\n                $em->flush();\n            }\n\n            // Add new one\n            if (!empty($skills)) {\n                $skills = array_keys($skills);\n                $skillRepo = $em->getRepository('ChamiloCoreBundle:Skill');\n\n                foreach ($skills as $skillId) {\n                    /** @var SkillEntity $skill */\n                    $skill = $skillRepo->find($skillId);\n                    if (null !== $skill) {\n                        if (!$skill->hasItem($typeId, $itemId)) {\n                            $skillRelItem = (new SkillRelItem())\n                                ->setItemType($typeId)\n                                ->setItemId($itemId)\n                                ->setCourseId($courseId)\n                                ->setSessionId($sessionId)\n                                ->setCreatedBy($userId)\n                                ->setUpdatedBy($userId)\n                            ;\n                            $skill->addItem($skillRelItem);\n                            $em->persist($skill);\n                            $em->persist($skillRelItem);\n                            $em->flush();\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the icon (badge image) URL.\n     *\n     * @param bool $getSmall Optional. Allow get the small image\n     *\n     * @return string\n     */\n    public static function getWebIconPath(SkillEntity $skill, $getSmall = false)\n    {\n        if ($getSmall) {\n            if (empty($skill->getIcon())) {\n                return \\Display::return_icon('badges-default.png', null, null, ICON_SIZE_BIG, null, true);\n            }\n\n            return api_get_path(WEB_UPLOAD_PATH).'badges/'.sha1($skill->getName()).'-small.png';\n        }\n\n        if (empty($skill->getIcon())) {\n            return \\Display::return_icon('badges-default.png', null, null, ICON_SIZE_HUGE, null, true);\n        }\n\n        return api_get_path(WEB_UPLOAD_PATH).\"badges/{$skill->getIcon()}\";\n    }\n\n    /**\n     * @param User                             $user\n     * @param \\Chamilo\\CoreBundle\\Entity\\Skill $skill\n     * @param int                              $levelId\n     * @param string                           $argumentation\n     * @param int                              $authorId\n     *\n     * @throws \\Doctrine\\ORM\\OptimisticLockException\n     *\n     * @return SkillRelUserEntity\n     */\n    public function addSkillToUserBadge($user, $skill, $levelId, $argumentation, $authorId)\n    {\n        $showLevels = false === api_get_configuration_value('hide_skill_levels');\n        $badgeAssignationNotification = api_get_configuration_value('badge_assignation_notification');\n\n        $entityManager = Database::getManager();\n\n        $skillUserRepo = $entityManager->getRepository('ChamiloCoreBundle:SkillRelUser');\n\n        $criteria = ['user' => $user, 'skill' => $skill];\n        $result = $skillUserRepo->findOneBy($criteria);\n\n        if (!empty($result)) {\n            return false;\n        }\n        $skillLevelRepo = $entityManager->getRepository('ChamiloSkillBundle:Level');\n\n        $skillUser = new SkillRelUserEntity();\n        $skillUser->setUser($user);\n        $skillUser->setSkill($skill);\n\n        if ($showLevels && !empty($levelId)) {\n            $level = $skillLevelRepo->find($levelId);\n            $skillUser->setAcquiredLevel($level);\n        }\n\n        $skillUser->setArgumentation($argumentation);\n        $skillUser->setArgumentationAuthorId($authorId);\n        $skillUser->setAcquiredSkillAt(new DateTime());\n        $skillUser->setAssignedBy(0);\n\n        $entityManager->persist($skillUser);\n        $entityManager->flush();\n\n        if ($badgeAssignationNotification) {\n            $url = SkillRelUser::getIssueUrlAll($skillUser);\n\n            $message = sprintf(\n                get_lang('YouXHaveAchievedTheSkillYToSeeFollowLinkZ'),\n                $user->getFirstname(),\n                $skill->getName(),\n                Display::url($url, $url, ['target' => '_blank'])\n            );\n\n            MessageManager::send_message(\n                $user->getId(),\n                get_lang('YouHaveAchievedANewSkill'),\n                $message\n            );\n        }\n\n        return $skillUser;\n    }\n}\n"], "filenames": ["main/inc/lib/skill.lib.php"], "buggy_code_start_loc": [66], "buggy_code_end_loc": [85], "fixing_code_start_loc": [66], "fixing_code_end_loc": [92], "type": "CWE-79", "message": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the skills wheel.", "other": {"cve": {"id": "CVE-2023-37066", "sourceIdentifier": "cve@mitre.org", "published": "2023-07-07T17:15:10.167", "lastModified": "2023-07-13T17:26:09.043", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the skills wheel."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.20", "matchCriteriaId": "7C09DB8C-2B3F-4EE5-B478-546C468B1E04"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/4f7b5ebf90c35999917c231276e47a4184275690", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-114-2023-06-06-Low-impact-Low-risk-XSS-through-admin-account-skills", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/4f7b5ebf90c35999917c231276e47a4184275690"}}