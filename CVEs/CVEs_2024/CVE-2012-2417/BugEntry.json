{"buggy_code": ["#\n#   ElGamal.py : ElGamal encryption/decryption and signatures\n#\n#  Part of the Python Cryptography Toolkit\n#\n#  Originally written by: A.M. Kuchling\n#\n# ===================================================================\n# The contents of this file are dedicated to the public domain.  To\n# the extent that dedication to the public domain is not available,\n# everyone is granted a worldwide, perpetual, royalty-free,\n# non-exclusive license to exercise all rights associated with the\n# contents of this file for any purpose whatsoever.\n# No rights are reserved.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n# ===================================================================\n\n\"\"\"ElGamal public-key algorithm (randomized encryption and signature).\n\nSignature algorithm\n-------------------\nThe security of the ElGamal signature scheme is based (like DSA) on the discrete\nlogarithm problem (DLP_). Given a cyclic group, a generator *g*,\nand an element *h*, it is hard to find an integer *x* such that *g^x = h*.\n\nThe group is the largest multiplicative sub-group of the integers modulo *p*,\nwith *p* prime.\nThe signer holds a value *x* (*0<x<p-1*) as private key, and its public\nkey (*g*, *p*, *y* where *y=g^x mod p*) is distributed.\n\nThe ElGamal signature is twice as big as *p*.\n\nEncryption algorithm\n--------------------\nThe security of the ElGamal encryption scheme is based on the computational\nDiffie-Hellman problem (CDH_). Given a cyclic group, a generator *g*,\nand two integers *a* and *b*, it is difficult to find\nthe element *g^{ab}* when only *g^a* and *g^b* are known, and not *a* and *b*. \n\nAs before, the group is the largest multiplicative sub-group of the integers\nmodulo *p*, with *p* prime.\nThe receiver holds a value *a* (*0<a<p-1*) as private key, and its public key\n(*g*, *p*, *b* where *b*=g^a*) is given to the sender.\n\nThe ElGamal ciphertext is twice as big as *p*.\n\nSecurity\n--------\nBoth DLP and CDH problem are believed to be difficult, and they have been proved\nsuch (and therefore secure) for more than 30 years.\n\nThe cryptographic strength is linked to the magnitude of *p*.\nIn 2012, a sufficient size for *p* is deemed to be 2048 bits.\nFor more information, see the most recent ECRYPT_ report.\n\nEven though ElGamal algorithms are in theory reasonably secure for new designs,\nin practice there are no real good reasons for using them.\nThe signature is four times larger than the equivalent DSA, and the ciphertext\nis two times larger than the equivalent RSA.\n\nFunctionality\n-------------\nThis module provides facilities for generating new ElGamal keys and for constructing\nthem from known components. ElGamal keys allows you to perform basic signing,\nverification, encryption, and decryption.\n\n    >>> from Crypto import Random\n    >>> from Crypto.Random import random\n    >>> from Crypto.PublicKey import ElGamal\n    >>> from Crypto.Util.number import GCD\n    >>> from Crypto.Hash import SHA\n    >>>\n    >>> message = \"Hello\"\n    >>> key = ElGamal.generate(1024, Random.new().read)\n    >>> h = SHA.new(message).digest()\n    >>> while 1:\n    >>>     k = random.StrongRandom().randint(1,key.p-1)\n    >>>     if GCD(k,key.p-1)==1: break\n    >>> sig = key.sign(h,k)\n    >>> ...\n    >>> if key.verify(h,sig):\n    >>>     print \"OK\"\n    >>> else:\n    >>>     print \"Incorrect signature\"\n\n.. _DLP: http://www.cosic.esat.kuleuven.be/publications/talk-78.pdf\n.. _CDH: http://en.wikipedia.org/wiki/Computational_Diffie%E2%80%93Hellman_assumption\n.. _ECRYPT: http://www.ecrypt.eu.org/documents/D.SPA.17.pdf\n\"\"\"\n\n__revision__ = \"$Id$\"\n\n__all__ = ['generate', 'construct', 'error', 'ElGamalobj']\n\nfrom Crypto.PublicKey.pubkey import *\nfrom Crypto.Util import number\n\nclass error (Exception):\n    pass\n\n# Generate an ElGamal key with N bits\ndef generate(bits, randfunc, progress_func=None):\n    \"\"\"Randomly generate a fresh, new ElGamal key.\n\n    :Parameters:\n        bits : int\n            Key length, or size (in bits) of the modulus *p*.\n            Recommended value is 2048.\n        randfunc : callable\n            Random number generation function; it should accept\n            a single integer N and return a string of random data\n            N bytes long.\n        progress_func : callable\n            Optional function that will be called with a short string\n            containing the key parameter currently being generated;\n            it's useful for interactive applications where a user is\n            waiting for a key to be generated.\n\n    :attention: You should always use a cryptographically secure random number generator,\n        such as the one defined in the ``Crypto.Random`` module; **don't** just use the\n        current time and the ``random`` module.\n\n    :Return: An ElGamal key object (`ElGamalobj`).\n    \"\"\"\n    obj=ElGamalobj()\n    # Generate prime p\n    if progress_func:\n        progress_func('p\\n')\n    obj.p=bignum(getPrime(bits, randfunc))\n    # Generate random number g\n    if progress_func:\n        progress_func('g\\n')\n    size=bits-1-(ord(randfunc(1)) & 63) # g will be from 1--64 bits smaller than p\n    if size<1:\n        size=bits-1\n    while (1):\n        obj.g=bignum(getPrime(size, randfunc))\n        if obj.g < obj.p:\n            break\n        size=(size+1) % bits\n        if size==0:\n            size=4\n    # Generate random number x\n    if progress_func:\n        progress_func('x\\n')\n    while (1):\n        size=bits-1-ord(randfunc(1)) # x will be from 1 to 256 bits smaller than p\n        if size>2:\n            break\n    while (1):\n        obj.x=bignum(getPrime(size, randfunc))\n        if obj.x < obj.p:\n            break\n        size = (size+1) % bits\n        if size==0:\n            size=4\n    if progress_func:\n        progress_func('y\\n')\n    obj.y = pow(obj.g, obj.x, obj.p)\n    return obj\n\ndef construct(tup):\n    \"\"\"Construct an ElGamal key from a tuple of valid ElGamal components.\n\n    The modulus *p* must be a prime.\n\n    The following conditions must apply:\n\n    - 1 < g < p-1\n    - g^{p-1} = 1 mod p\n    - 1 < x < p-1\n    - g^x = y mod p\n\n    :Parameters:\n        tup : tuple\n            A tuple of long integers, with 3 or 4 items\n            in the following order:\n\n            1. Modulus (*p*).\n            2. Generator (*g*).\n            3. Public key (*y*).\n            4. Private key (*x*). Optional.\n\n    :Return: An ElGamal key object (`ElGamalobj`).\n    \"\"\"\n\n    obj=ElGamalobj()\n    if len(tuple) not in [3,4]:\n        raise ValueError('argument for construct() wrong length')\n    for i in range(len(tuple)):\n        field = obj.keydata[i]\n        setattr(obj, field, tuple[i])\n    return obj\n\nclass ElGamalobj(pubkey):\n    \"\"\"Class defining an ElGamal key.\n\n    :undocumented: __getstate__, __setstate__, __repr__, __getattr__\n    \"\"\"\n\n    #: Dictionary of ElGamal parameters.\n    #:\n    #: A public key will only have the following entries:\n    #:\n    #:  - **y**, the public key.\n    #:  - **g**, the generator.\n    #:  - **p**, the modulus.\n    #:\n    #: A private key will also have:\n    #:\n    #:  - **x**, the private key.\n    keydata=['p', 'g', 'y', 'x']\n\n    def encrypt(self, plaintext, K):\n        \"\"\"Encrypt a piece of data with ElGamal.\n\n        :Parameter plaintext: The piece of data to encrypt with ElGamal.\n         It must be numerically smaller than the module (*p*).\n        :Type plaintext: byte string or long\n\n        :Parameter K: A secret number, chosen randomly in the closed\n         range *[1,p-2]*.\n        :Type K: long (recommended) or byte string (not recommended)\n\n        :Return: A tuple with two items. Each item is of the same type as the\n         plaintext (string or long).\n\n        :attention: selection of *K* is crucial for security. Generating a\n         random number larger than *p-1* and taking the modulus by *p-1* is\n         **not** secure, since smaller values will occur more frequently.\n         Generating a random number systematically smaller than *p-1*\n         (e.g. *floor((p-1)/8)* random bytes) is also **not** secure.\n         In general, it shall not be possible for an attacker to know\n         the value of any bit of K.\n\n        :attention: The number *K* shall not be reused for any other\n         operation and shall be discarded immediately.\n        \"\"\"\n        return pubkey.encrypt(self, plaintext, K)\n \n    def decrypt(self, ciphertext):\n        \"\"\"Decrypt a piece of data with ElGamal.\n\n        :Parameter ciphertext: The piece of data to decrypt with ElGamal.\n        :Type ciphertext: byte string, long or a 2-item tuple as returned\n         by `encrypt`\n\n        :Return: A byte string if ciphertext was a byte string or a tuple\n         of byte strings. A long otherwise.\n        \"\"\"\n        return pubkey.decrypt(self, ciphertext)\n\n    def sign(self, M, K):\n        \"\"\"Sign a piece of data with ElGamal.\n\n        :Parameter M: The piece of data to sign with ElGamal. It may\n         not be longer in bit size than *p-1*.\n        :Type M: byte string or long\n\n        :Parameter K: A secret number, chosen randomly in the closed\n         range *[1,p-2]* and such that *gcd(k,p-1)=1*.\n        :Type K: long (recommended) or byte string (not recommended)\n\n        :attention: selection of *K* is crucial for security. Generating a\n         random number larger than *p-1* and taking the modulus by *p-1* is\n         **not** secure, since smaller values will occur more frequently.\n         Generating a random number systematically smaller than *p-1*\n         (e.g. *floor((p-1)/8)* random bytes) is also **not** secure.\n         In general, it shall not be possible for an attacker to know\n         the value of any bit of K.\n\n        :attention: The number *K* shall not be reused for any other\n         operation and shall be discarded immediately.\n\n        :attention: It is strongly recommended to have M be a digest created\n         via a cryptographic hash, otherwise an attacker may mount an\n         existential forgery attack.\n\n        :Return: A tuple with 2 longs.\n        \"\"\"\n        return pubkey.sign(self, M, K)\n\n    def verify(self, M, signature):\n        \"\"\"Verify the validity of an ElGamal signature.\n\n        :Parameter M: The expected message.\n        :Type M: byte string or long\n\n        :Parameter signature: The ElGamal signature to verify.\n        :Type signature: A tuple with 2 longs as return by `sign`\n\n        :Return: True if the signature is correct, False otherwise.\n        \"\"\"\n        return pubkey.verify(self, M, signature)\n\n    def _encrypt(self, M, K):\n        a=pow(self.g, K, self.p)\n        b=( M*pow(self.y, K, self.p) ) % self.p\n        return ( a,b )\n\n    def _decrypt(self, M):\n        if (not hasattr(self, 'x')):\n            raise TypeError('Private key not available in this object')\n        ax=pow(M[0], self.x, self.p)\n        plaintext=(M[1] * inverse(ax, self.p ) ) % self.p\n        return plaintext\n\n    def _sign(self, M, K):\n        if (not hasattr(self, 'x')):\n            raise TypeError('Private key not available in this object')\n        p1=self.p-1\n        if (GCD(K, p1)!=1):\n            raise ValueError('Bad K value: GCD(K,p-1)!=1')\n        a=pow(self.g, K, self.p)\n        t=(M-self.x*a) % p1\n        while t<0: t=t+p1\n        b=(t*inverse(K, p1)) % p1\n        return (a, b)\n\n    def _verify(self, M, sig):\n        v1=pow(self.y, sig[0], self.p)\n        v1=(v1*pow(sig[0], sig[1], self.p)) % self.p\n        v2=pow(self.g, M, self.p)\n        if v1==v2:\n            return 1\n        return 0\n\n    def size(self):\n        return number.size(self.p) - 1\n\n    def has_private(self):\n        if hasattr(self, 'x'):\n            return 1\n        else:\n            return 0\n\n    def publickey(self):\n        return construct((self.p, self.g, self.y))\n\n\nobject=ElGamalobj\n"], "fixing_code": ["#\n#   ElGamal.py : ElGamal encryption/decryption and signatures\n#\n#  Part of the Python Cryptography Toolkit\n#\n#  Originally written by: A.M. Kuchling\n#\n# ===================================================================\n# The contents of this file are dedicated to the public domain.  To\n# the extent that dedication to the public domain is not available,\n# everyone is granted a worldwide, perpetual, royalty-free,\n# non-exclusive license to exercise all rights associated with the\n# contents of this file for any purpose whatsoever.\n# No rights are reserved.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n# ===================================================================\n\n\"\"\"ElGamal public-key algorithm (randomized encryption and signature).\n\nSignature algorithm\n-------------------\nThe security of the ElGamal signature scheme is based (like DSA) on the discrete\nlogarithm problem (DLP_). Given a cyclic group, a generator *g*,\nand an element *h*, it is hard to find an integer *x* such that *g^x = h*.\n\nThe group is the largest multiplicative sub-group of the integers modulo *p*,\nwith *p* prime.\nThe signer holds a value *x* (*0<x<p-1*) as private key, and its public\nkey (*g*, *p*, *y* where *y=g^x mod p*) is distributed.\n\nThe ElGamal signature is twice as big as *p*.\n\nEncryption algorithm\n--------------------\nThe security of the ElGamal encryption scheme is based on the computational\nDiffie-Hellman problem (CDH_). Given a cyclic group, a generator *g*,\nand two integers *a* and *b*, it is difficult to find\nthe element *g^{ab}* when only *g^a* and *g^b* are known, and not *a* and *b*. \n\nAs before, the group is the largest multiplicative sub-group of the integers\nmodulo *p*, with *p* prime.\nThe receiver holds a value *a* (*0<a<p-1*) as private key, and its public key\n(*g*, *p*, *b* where *b*=g^a*) is given to the sender.\n\nThe ElGamal ciphertext is twice as big as *p*.\n\nSecurity\n--------\nBoth DLP and CDH problem are believed to be difficult, and they have been proved\nsuch (and therefore secure) for more than 30 years.\n\nThe cryptographic strength is linked to the magnitude of *p*.\nIn 2012, a sufficient size for *p* is deemed to be 2048 bits.\nFor more information, see the most recent ECRYPT_ report.\n\nEven though ElGamal algorithms are in theory reasonably secure for new designs,\nin practice there are no real good reasons for using them.\nThe signature is four times larger than the equivalent DSA, and the ciphertext\nis two times larger than the equivalent RSA.\n\nFunctionality\n-------------\nThis module provides facilities for generating new ElGamal keys and for constructing\nthem from known components. ElGamal keys allows you to perform basic signing,\nverification, encryption, and decryption.\n\n    >>> from Crypto import Random\n    >>> from Crypto.Random import random\n    >>> from Crypto.PublicKey import ElGamal\n    >>> from Crypto.Util.number import GCD\n    >>> from Crypto.Hash import SHA\n    >>>\n    >>> message = \"Hello\"\n    >>> key = ElGamal.generate(1024, Random.new().read)\n    >>> h = SHA.new(message).digest()\n    >>> while 1:\n    >>>     k = random.StrongRandom().randint(1,key.p-1)\n    >>>     if GCD(k,key.p-1)==1: break\n    >>> sig = key.sign(h,k)\n    >>> ...\n    >>> if key.verify(h,sig):\n    >>>     print \"OK\"\n    >>> else:\n    >>>     print \"Incorrect signature\"\n\n.. _DLP: http://www.cosic.esat.kuleuven.be/publications/talk-78.pdf\n.. _CDH: http://en.wikipedia.org/wiki/Computational_Diffie%E2%80%93Hellman_assumption\n.. _ECRYPT: http://www.ecrypt.eu.org/documents/D.SPA.17.pdf\n\"\"\"\n\n__revision__ = \"$Id$\"\n\n__all__ = ['generate', 'construct', 'error', 'ElGamalobj']\n\nfrom Crypto.PublicKey.pubkey import *\nfrom Crypto.Util import number\n\nclass error (Exception):\n    pass\n\n# Generate an ElGamal key with N bits\ndef generate(bits, randfunc, progress_func=None):\n    \"\"\"Randomly generate a fresh, new ElGamal key.\n\n    The key will be safe for use for both encryption and signature\n    (although it should be used for **only one** purpose).\n\n    :Parameters:\n        bits : int\n            Key length, or size (in bits) of the modulus *p*.\n            Recommended value is 2048.\n        randfunc : callable\n            Random number generation function; it should accept\n            a single integer N and return a string of random data\n            N bytes long.\n        progress_func : callable\n            Optional function that will be called with a short string\n            containing the key parameter currently being generated;\n            it's useful for interactive applications where a user is\n            waiting for a key to be generated.\n\n    :attention: You should always use a cryptographically secure random number generator,\n        such as the one defined in the ``Crypto.Random`` module; **don't** just use the\n        current time and the ``random`` module.\n\n    :Return: An ElGamal key object (`ElGamalobj`).\n    \"\"\"\n    obj=ElGamalobj()\n    # Generate a safe prime p\n    # See Algorithm 4.86 in Handbook of Applied Cryptography\n    if progress_func:\n        progress_func('p\\n')\n    while 1:\n        q = bignum(getPrime(bits-1, randfunc))\n        obj.p = 2*q+1\n        if number.isPrime(obj.p, randfunc=randfunc):\n            break\n    # Generate generator g\n    # See Algorithm 4.80 in Handbook of Applied Cryptography\n    # Note that the order of the group is n=p-1=2q, where q is prime\n    if progress_func:\n        progress_func('g\\n')\n    while 1:\n        # We must avoid g=2 because of Bleichenbacher's attack described\n        # in \"Generating ElGamal signatures without knowning the secret key\",\n        # 1996\n        #\n        obj.g = number.getRandomRange(3, obj.p, randfunc)\n        safe = 1\n        if pow(obj.g, 2, obj.p)==1:\n            safe=0\n        if safe and pow(obj.g, q, obj.p)==1:\n            safe=0\n        # Discard g if it divides p-1 because of the attack described\n        # in Note 11.67 (iii) in HAC\n        if safe and divmod(obj.p-1, obj.g)[1]==0:\n            safe=0\n        # g^{-1} must not divide p-1 because of Khadir's attack\n        # described in \"Conditions of the generator for forging ElGamal\n        # signature\", 2011\n        ginv = number.inverse(obj.g, obj.p)\n        if safe and divmod(obj.p-1, ginv)[1]==0:\n            safe=0\n        if safe:\n            break\n    # Generate private key x\n    if progress_func:\n        progress_func('x\\n')\n    obj.x=number.getRandomRange(2, obj.p-1, randfunc)\n    # Generate public key y\n    if progress_func:\n        progress_func('y\\n')\n    obj.y = pow(obj.g, obj.x, obj.p)\n    return obj\n\ndef construct(tup):\n    \"\"\"Construct an ElGamal key from a tuple of valid ElGamal components.\n\n    The modulus *p* must be a prime.\n\n    The following conditions must apply:\n\n    - 1 < g < p-1\n    - g^{p-1} = 1 mod p\n    - 1 < x < p-1\n    - g^x = y mod p\n\n    :Parameters:\n        tup : tuple\n            A tuple of long integers, with 3 or 4 items\n            in the following order:\n\n            1. Modulus (*p*).\n            2. Generator (*g*).\n            3. Public key (*y*).\n            4. Private key (*x*). Optional.\n\n    :Return: An ElGamal key object (`ElGamalobj`).\n    \"\"\"\n\n    obj=ElGamalobj()\n    if len(tuple) not in [3,4]:\n        raise ValueError('argument for construct() wrong length')\n    for i in range(len(tuple)):\n        field = obj.keydata[i]\n        setattr(obj, field, tuple[i])\n    return obj\n\nclass ElGamalobj(pubkey):\n    \"\"\"Class defining an ElGamal key.\n\n    :undocumented: __getstate__, __setstate__, __repr__, __getattr__\n    \"\"\"\n\n    #: Dictionary of ElGamal parameters.\n    #:\n    #: A public key will only have the following entries:\n    #:\n    #:  - **y**, the public key.\n    #:  - **g**, the generator.\n    #:  - **p**, the modulus.\n    #:\n    #: A private key will also have:\n    #:\n    #:  - **x**, the private key.\n    keydata=['p', 'g', 'y', 'x']\n\n    def encrypt(self, plaintext, K):\n        \"\"\"Encrypt a piece of data with ElGamal.\n\n        :Parameter plaintext: The piece of data to encrypt with ElGamal.\n         It must be numerically smaller than the module (*p*).\n        :Type plaintext: byte string or long\n\n        :Parameter K: A secret number, chosen randomly in the closed\n         range *[1,p-2]*.\n        :Type K: long (recommended) or byte string (not recommended)\n\n        :Return: A tuple with two items. Each item is of the same type as the\n         plaintext (string or long).\n\n        :attention: selection of *K* is crucial for security. Generating a\n         random number larger than *p-1* and taking the modulus by *p-1* is\n         **not** secure, since smaller values will occur more frequently.\n         Generating a random number systematically smaller than *p-1*\n         (e.g. *floor((p-1)/8)* random bytes) is also **not** secure.\n         In general, it shall not be possible for an attacker to know\n         the value of any bit of K.\n\n        :attention: The number *K* shall not be reused for any other\n         operation and shall be discarded immediately.\n        \"\"\"\n        return pubkey.encrypt(self, plaintext, K)\n \n    def decrypt(self, ciphertext):\n        \"\"\"Decrypt a piece of data with ElGamal.\n\n        :Parameter ciphertext: The piece of data to decrypt with ElGamal.\n        :Type ciphertext: byte string, long or a 2-item tuple as returned\n         by `encrypt`\n\n        :Return: A byte string if ciphertext was a byte string or a tuple\n         of byte strings. A long otherwise.\n        \"\"\"\n        return pubkey.decrypt(self, ciphertext)\n\n    def sign(self, M, K):\n        \"\"\"Sign a piece of data with ElGamal.\n\n        :Parameter M: The piece of data to sign with ElGamal. It may\n         not be longer in bit size than *p-1*.\n        :Type M: byte string or long\n\n        :Parameter K: A secret number, chosen randomly in the closed\n         range *[1,p-2]* and such that *gcd(k,p-1)=1*.\n        :Type K: long (recommended) or byte string (not recommended)\n\n        :attention: selection of *K* is crucial for security. Generating a\n         random number larger than *p-1* and taking the modulus by *p-1* is\n         **not** secure, since smaller values will occur more frequently.\n         Generating a random number systematically smaller than *p-1*\n         (e.g. *floor((p-1)/8)* random bytes) is also **not** secure.\n         In general, it shall not be possible for an attacker to know\n         the value of any bit of K.\n\n        :attention: The number *K* shall not be reused for any other\n         operation and shall be discarded immediately.\n\n        :attention: It is strongly recommended to have M be a digest created\n         via a cryptographic hash, otherwise an attacker may mount an\n         existential forgery attack.\n\n        :Return: A tuple with 2 longs.\n        \"\"\"\n        return pubkey.sign(self, M, K)\n\n    def verify(self, M, signature):\n        \"\"\"Verify the validity of an ElGamal signature.\n\n        :Parameter M: The expected message.\n        :Type M: byte string or long\n\n        :Parameter signature: The ElGamal signature to verify.\n        :Type signature: A tuple with 2 longs as return by `sign`\n\n        :Return: True if the signature is correct, False otherwise.\n        \"\"\"\n        return pubkey.verify(self, M, signature)\n\n    def _encrypt(self, M, K):\n        a=pow(self.g, K, self.p)\n        b=( M*pow(self.y, K, self.p) ) % self.p\n        return ( a,b )\n\n    def _decrypt(self, M):\n        if (not hasattr(self, 'x')):\n            raise TypeError('Private key not available in this object')\n        ax=pow(M[0], self.x, self.p)\n        plaintext=(M[1] * inverse(ax, self.p ) ) % self.p\n        return plaintext\n\n    def _sign(self, M, K):\n        if (not hasattr(self, 'x')):\n            raise TypeError('Private key not available in this object')\n        p1=self.p-1\n        if (GCD(K, p1)!=1):\n            raise ValueError('Bad K value: GCD(K,p-1)!=1')\n        a=pow(self.g, K, self.p)\n        t=(M-self.x*a) % p1\n        while t<0: t=t+p1\n        b=(t*inverse(K, p1)) % p1\n        return (a, b)\n\n    def _verify(self, M, sig):\n        if sig[0]<1 or sig[0]>p-1:\n            return 0\n        v1=pow(self.y, sig[0], self.p)\n        v1=(v1*pow(sig[0], sig[1], self.p)) % self.p\n        v2=pow(self.g, M, self.p)\n        if v1==v2:\n            return 1\n        return 0\n\n    def size(self):\n        return number.size(self.p) - 1\n\n    def has_private(self):\n        if hasattr(self, 'x'):\n            return 1\n        else:\n            return 0\n\n    def publickey(self):\n        return construct((self.p, self.g, self.y))\n\n\nobject=ElGamalobj\n"], "filenames": ["lib/Crypto/PublicKey/ElGamal.py"], "buggy_code_start_loc": [112], "buggy_code_end_loc": [328], "fixing_code_start_loc": [113], "fixing_code_end_loc": [345], "type": "CWE-310", "message": "PyCrypto before 2.6 does not produce appropriate prime numbers when using an ElGamal scheme to generate a key, which reduces the signature space or public key space and makes it easier for attackers to conduct brute force attacks to obtain the private key.", "other": {"cve": {"id": "CVE-2012-2417", "sourceIdentifier": "cve@mitre.org", "published": "2012-06-17T03:41:40.763", "lastModified": "2017-08-29T01:31:36.867", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "PyCrypto before 2.6 does not produce appropriate prime numbers when using an ElGamal scheme to generate a key, which reduces the signature space or public key space and makes it easier for attackers to conduct brute force attacks to obtain the private key."}, {"lang": "es", "value": "Pycrypto anterior a v2.6 no genera adecuadamente los n\u00fameros primos cuando se utiliza un esquema basado en ElGamal para generar una clave, lo que reduce el espacio de la firma o el espacio de claves p\u00fablica y hace m\u00e1s f\u00e1cil para los atacantes para llevar a cabo ataques de fuerza bruta para obtener la clave privada."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-310"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.5", "matchCriteriaId": "0F321706-6D4D-4735-A12D-12053A46AA4A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:1.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "DF4C8BD3-24B8-4175-8D56-C870426EB797"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:1.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "32A09EC4-6F0F-4C33-991E-80C739B823AA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:1.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "2CCC2E0E-2253-49B8-9E42-391CD50D8D12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:1.1:alpha2:*:*:*:*:*:*", "matchCriteriaId": "CF21F7F0-84D8-44C9-99B5-CE98B58D3AB0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:1.9:alpha1:*:*:*:*:*:*", "matchCriteriaId": "8C16BEF3-223C-4B45-A18B-D7A02AEDC996"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:1.9:alpha2:*:*:*:*:*:*", "matchCriteriaId": "17269B2D-6DC5-4461-9B5E-C2117B64BE8E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:1.9:alpha3:*:*:*:*:*:*", "matchCriteriaId": "8D987E42-7693-432F-8763-7E61370DB855"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:1.9:alpha4:*:*:*:*:*:*", "matchCriteriaId": "1F10AF89-1388-4C90-878F-80FFB2FB8433"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:1.9:alpha5:*:*:*:*:*:*", "matchCriteriaId": "0AEF75BE-5255-4A0E-9CF3-1DBBDF08A265"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:1.9:alpha6:*:*:*:*:*:*", "matchCriteriaId": "C238EDF9-FC34-4438-B081-DFE7388EC2D9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:2.0:*:*:*:*:*:*:*", "matchCriteriaId": "24212CF8-4729-41AA-8293-1A81BC35928C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:2.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "8D317E0F-C1E0-4D7E-9001-FC1896280452"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:2.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "891D98BD-DC0B-4A62-B2E9-7FB6598AE024"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:2.1.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "52F16830-AD76-4154-88F5-087C32FD6237"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:2.1.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "C0437CCF-1216-419A-86F5-BD0383E69DF8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:2.1.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "50B9564B-7382-481F-8CDE-B1F5224B4FCA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:2.2:*:*:*:*:*:*:*", "matchCriteriaId": "8472A7E3-F0C1-43F0-9B65-81041F62912C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:2.3:*:*:*:*:*:*:*", "matchCriteriaId": "422198F6-1891-4D61-941A-DEF803BFDE24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:2.4:*:*:*:*:*:*:*", "matchCriteriaId": "94A14599-F0E0-4A41-91F0-4E2AABF6164D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dlitz:pycrypto:2.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "EF8CFA40-2AB0-4E13-BDE9-966095C034B5"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-June/081713.html", "source": "cve@mitre.org"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-June/081759.html", "source": "cve@mitre.org"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-June/081789.html", "source": "cve@mitre.org"}, {"url": "http://www.debian.org/security/2012/dsa-2502", "source": "cve@mitre.org"}, {"url": "http://www.mandriva.com/security/advisories?name=MDVSA-2012:117", "source": "cve@mitre.org"}, {"url": "http://www.openwall.com/lists/oss-security/2012/05/25/1", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/53687", "source": "cve@mitre.org"}, {"url": "https://bugs.launchpad.net/pycrypto/+bug/985164", "source": "cve@mitre.org"}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/75871", "source": "cve@mitre.org"}, {"url": "https://github.com/Legrandin/pycrypto/commit/9f912f13df99ad3421eff360d6a62d7dbec755c2", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/dlitz/pycrypto/blob/373ea760f21701b162e8c4912a66928ee30d401a/ChangeLog", "source": "cve@mitre.org"}, {"url": "https://hermes.opensuse.org/messages/15083589", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/Legrandin/pycrypto/commit/9f912f13df99ad3421eff360d6a62d7dbec755c2"}}