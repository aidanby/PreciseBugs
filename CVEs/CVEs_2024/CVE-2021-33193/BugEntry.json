{"buggy_code": ["                                                         -*- coding: utf-8 -*-\nChanges with Apache 2.4.49\n\nChanges with Apache 2.4.48\n\n  *) mod_proxy_wstunnel: Add ProxyWebsocketFallbackToProxyHttp to opt-out the\n     fallback to mod_proxy_http for WebSocket upgrade and tunneling.\n     [Yann Ylavic]\n\n  *) mod_proxy: Fix flushing of THRESHOLD_MIN_WRITE data while tunneling.\n     BZ 65294.  [Yann Ylavic]\n\n  *) core: Fix a regression that stripped the ETag header from 304 responses.\n     PR 61820 [Ruediger Pluem, Roy T. Fielding]\n\n  *) core: Adding SSL related inquiry functions to the server API.\n     These function are always available, even when no module providing\n     SSL is loaded. They provide their own \"shadowing\" implementation for\n     the optional functions of similar name that mod_ssl and impersonators\n     of mod_ssl provide.\n     This enables loading of several SSL providing modules when all but\n     one of them registers itself into the new hooks. Two old-style SSL\n     modules will not work, as they replace the others optional functions\n     with their own.\n     Modules using the old-style optional functions will continue to work\n     as core supplies its own versions of those.\n     The following has been added so far:\n     - ap_ssl_conn_is_ssl() to query if a connection is using SSL.\n     - ap_ssl_var_lookup() to query SSL related variables for a\n       server/connection/request.\n     - Hooks for 'ssl_conn_is_ssl' and 'ssl_var_lookup' where modules\n       providing SSL can install their own value supplying functions.\n     - ap_ssl_add_cert_files() to enable other modules like mod_md to provide\n       certificate and keys for an SSL module like mod_ssl.\n     - ap_ssl_add_fallback_cert_files() to enable other modules like mod_md to\n       provide a fallback certificate in case no 'proper' certificate is\n       available for an SSL module like mod_ssl.\n     - ap_ssl_answer_challenge() to enable other modules like mod_md to\n       provide a certificate as used in the RFC 8555 'tls-alpn-01' challenge\n       for the ACME protocol for an SSL module like mod_ssl. The function\n       and its hook provide PEM encoded data instead of file names.\n     - Hooks for 'ssl_add_cert_files', 'ssl_add_fallback_cert_files' and\n       'ssl_answer_challenge' where modules like mod_md can provide providers\n       to the above mentioned functions.\n     - These functions reside in the new 'http_ssl.h' header file.\n     [Stefan Eissing]\n\n  *) core/mod_ssl/mod_md: adding OCSP response provisioning as core feature. This\n     allows modules to access and provide OCSP response data without being tied\n     of each other. The data is exchanged in standard, portable formats (PEM encoded\n     certificates and DER encoded responses), so that the actual SSL/crypto\n     implementations used by the modules are independant of each other.\n     Registration and retrieval happen in the context of a server (server_rec)\n     which modules may use to decide if they are configured for this or not.\n     The area of changes:\n     1. core: defines 2 functions in include/http_ssl.h, so that modules may\n        register a certificate, together with its issuer certificate for OCSP\n        response provisioning and ask for current response data (DER bytes) later.\n        Also, 2 hooks are defined that allow modules to implement this OCSP\n        provisioning.\n     2. mod_ssl uses the new functions, in addition to what it did already, to\n        register its certificates this way. If no one is interested in providing\n        OCSP, it falls back to its own (if configured) stapling implementation.\n     3. mod_md registers itself at the core hooks for OCSP provisioning. Depending\n        on configuration, it will accept registrations of its own certificates only,\n        all certificates or none.\n     [Stefan Eissing]\n\n *) mod_md: v2.4.0 with improvements and bugfixes\n     - MDPrivateKeys allows the specification of several types. Beside \"RSA\" plus\n     optional key lengths elliptic curves can be configured. This means you can\n     have multiple certificates for a Managed Domain with different key types.\n     With ```MDPrivateKeys secp384r1 rsa2048``` you get one ECDSA  and one RSA\n     certificate and all modern client will use the shorter ECDSA, while older\n     client will get the RSA certificate.\n     Many thanks to @tlhackque who pushed and helped on this.\n     - Support added for MDomains consisting of a wildcard. Configuring\n     ```MDomain *.host.net``` will match all virtual hosts matching that pattern\n     and obtain one certificate for it (assuming you have 'dns-01' challenge\n     support configured). Addresses #239.\n     - Removed support for ACMEv1 servers. The only known installation used to\n     be Let's Encrypt which has disabled that version more than a year ago for\n     new accounts.\n     - Andreas Ulm (<https://github.com/root360-AndreasUlm>) implemented the\n     ```renewing``` call to ```MDMessageCmd``` that can deny a certificate\n     renewal attempt. This is useful in clustered installations, as\n     discussed in #233).\n     - New event ```challenge-setup:<type>:<domain>```, triggered when the\n     challenge data for a domain has been created. This is invoked before the\n     ACME server is told to check for it. The type is one of the ACME challenge\n     types. This is invoked for every DNS name in a MDomain.\n     - The max delay for retries has been raised to daily (this is like all\n     retries jittered somewhat to avoid repeats at fixed time of day).\n     - Certain error codes reported by the ACME server that indicate a problem\n     with the configured data now immediately switch to daily retries. For\n     example: if the ACME server rejects a contact email or a domain name,\n     frequent retries will most likely not solve the problem. But daily retries\n     still make sense as there might be an error at the server and un-supervised\n     certificate renewal is the goal. Refs #222.\n     - Test case and work around for domain names > 64 octets. Fixes #227.\n     When the first DNS name of an MD is longer than 63 octets, the certificate\n     request will not contain a CN field, but leave it up to the CA to choose one.\n     Currently, Lets Encrypt looks for a shorter name in the SAN list given and\n     fails the request if none is found. But it is really up to the CA (and what\n     browsers/libs accept here) and may change over the years. That is why\n     the decision is best made at the CA.\n     - Retry delays now have a random +/-[0-50]% modification applied to let\n     retries from several servers spread out more, should they have been\n     restarted at the same time of day.\n     - Fixed several places where the 'badNonce' return code from an ACME server\n     was not handled correctly. The test server 'pebble' simulates this behaviour\n     by default and helps nicely in verifying this behaviour. Thanks, pebble!\n     - Set the default `MDActivationDelay` to 0. This was confusing to users that\n     new certificates were deemed not usably before a day of delay. When clocks are\n     correct, using a new certificate right away should not pose a problem.\n     - When handling ACME authorization resources, the module no longer requires\n     the server to return a \"Location\" header, as was necessary in ACMEv1.\n     Fixes #216.\n     - Fixed a theoretical uninitialized read when testing for JSON error responses\n     from the ACME CA. Reported at <https://bz.apache.org/bugzilla/show_bug.cgi?id=64297>.\n     - ACME problem reports from CAs that include parameters in the Content-Type\n     header are handled correctly. (Previously, the problem text would not be\n     reported and retries could exceed CA limits.)\n     - Account Update transactions to V2 CAs now use the correct POST-AS-GET method.\n     Previously, an empty JSON object was sent - which apparently LE accepted,\n     but others reject.\n     [Stefan Eissing, @tlhackque, Andreas Ulm]\n\nChanges with Apache 2.4.47\n\n  *) mod_dav_fs: Improve logging output when failing to open files for\n     writing.  PR 64413.  [Bingyu Shen <ahshenbingyu gmail.com>]\n\n  *) mod_http2: Fixed a race condition that could lead to streams being\n     aborted (RST to the client), although a response had been produced.\n     [Stefan Eissing]\n\n  *) mod_lua: Add support to Lua 5.4  [Joe Orton, Giovanni Bechis, Ruediger Pluem]\n\n  *) MPM event/worker: Fix possible crash in child process on early signal\n     delivery.  PR 64533.  [Ruediger Pluem]\n\n  *) mod_http2: sync with github standalone version 1.15.17\n     - Log requests and sent the configured error response in case of early detected\n       errors like too many or too long headers. [Ruediger Pluem]\n     - new option 'H2OutputBuffering on/off' which controls the buffering of stream output.\n       The default is on, which is the behaviour of older mod-h2 versions. When off, all\n       bytes are made available immediately to the main connection for sending them\n       out to the client. This fixes interop issues with certain flavours of gRPC, see\n       also <https://github.com/icing/mod_h2/issues/207>.\n       [Stefan Eissing]\n\n  *) mod_unique_id: Fix potential duplicated ID generation under heavy load.\n     PR 65159\n     [Jonas M\u00fcntener <jonas.muentener ergon.ch>, Christophe Jaillet]\n\n  *) \"[mod_dav_fs etag handling] should really honor the FileETag setting\".\n     - It now does.\n     - Add \"Digest\" to FileETag directive, allowing a strong ETag to be\n       generated using a file digest.\n     - Add ap_make_etag_ex() and ap_set_etag_fd() to allow full control over\n       ETag generation.\n     - Add concept of \"binary notes\" to request_rec, allowing packed bit flags\n       to be added to a request.\n     - First binary note - AP_REQUEST_STRONG_ETAG - allows modules to force\n       the ETag to a strong ETag to comply with RFC requirements, such as those\n       mandated by various WebDAV extensions.\n     [Graham Leggett]\n\n  *) mod_proxy_http: Fix a possibly crash when the origin connection gets\n     interrupted before completion.  PR 64234.\n     [Barnim Dzwillo <dzwillo strato.de>, Ruediger Pluem]\n\n  *) mod_ssl: Do not keep connections to OCSP responders alive when doing\n     OCSP requests.  PR 64135.  [Ruediger Pluem]\n\n  *) mod_ssl: Improve the coalescing filter to buffer into larger TLS\n     records, and avoid revealing the HTTP header size via TLS record\n     boundaries (for common response generators).\n     [Joe Orton, Ruediger Pluem]     \n\n  *) mod_proxy_hcheck: Don't pile up health checks if the previous one did\n     not finish before hcinterval.  PR 63010.  [Yann Ylavic]\n\n  *) mod_session: Improve session parsing.  [Yann Yalvic]\n\n  *) mod_authnz_ldap: Prevent authentications with empty passwords for the\n     initial bind to fail with status 500. [Ruediger Pluem]\n\n  *) mod_auth_digest: Fast validation of the nonce's base64 to fail early if\n     the format can't match anyway.  [Yann Ylavic]\n\n  *) mod_proxy_fcgi: Honor \"SetEnv proxy-sendcl\" to forward a chunked\n     Transfer-Encoding from the client, spooling the request body when needed\n     to provide a Content-Length to the backend.  PR 57087.  [Yann Ylavic]\n\n  *) mod_proxy: Put mod_proxy_{connect,wstunnel} tunneling code in common in\n     proxy_util.  [Yann Ylavic]\n\n  *) mod_proxy: Improve tunneling loop to support half closed connections and\n     pending data draining (for protocols like rsync). PR 61616. [Yann Ylavic]\n\n  *) mod_proxy_http: handle Upgrade request, 101 (Switching Protocol) response\n     and switched protocol forwarding.  [Yann Ylavic]\n\n  *) mod_proxy_wstunnel: Leave Upgrade requests handling to mod_proxy_http,\n     allowing for (non-)Upgrade negotiation with the origin server.\n     [Yann Ylavic]\n\n  *) mod_proxy: Allow ProxyErrorOverride to be restricted to specific status \n     codes.  PR63628. [Martin Dr\u00f6\u00dfler <mail martindroessler.de>]\n\n  *) core: Add ReadBufferSize, FlushMaxThreshold and FlushMaxPipelined\n     directives.  [Yann Ylavic]\n\n  *) core: Ensure that aborted connections are logged as such. PR 62823\n     [Arnaud Grandville <contact@grandville.net>]\n\n  *) http: Allow unknown response status' lines returned in the form of\n     \"HTTP/x.x xxx Status xxx\".  [Yann Ylavic]\n\n  *) mod_proxy_http: Fix 100-continue deadlock for spooled request bodies,\n     leading to Request Timeout (408).  PR 63855.  [Yann Ylavic]\n\n  *) core: Remove headers on 304 Not Modified as specified by RFC7234, as\n     opposed to passing an explicit subset of headers. PR 61820.\n     [Giovanni Bechis]\n\n  *) mpm_event: Don't reset connections after lingering close, restoring prior\n     to 2.4.28 behaviour.  [Yann Ylavic]\n\n  *) mpm_event: Kill connections in keepalive state only when there is no more\n     workers available, not when the maximum number of connections is reached,\n     restoring prior to 2.4.30 behaviour.  [Yann Ylavic]\n\n  *) mod_unique_id: Use base64url encoding for UNIQUE_ID variable,\n     avoiding the use of '@'.  PR 57044.\n     [Michael Kaufmann <apache-bugzilla michael-kaufmann.ch>]\n\n  *) mod_rewrite: Extend the [CO] (cookie) flag of RewriteRule to accept a\n     SameSite attribute. [Eric Covener]\n\n  *) mod_proxy: Add proxy check_trans hook.  This allows proxy \n     modules to decline request handling at early stage.\n\n  *) mod_proxy_wstunnel: Decline requests without an Upgrade\n     header so ws/wss can be enabled overlapping with later\n     http/https.\n\n  *) mod_http2: Log requests and sent the configured error response in case of\n     early detected errors like too many or too long headers.\n     [Ruediger Pluem, Stefan Eissing]\n\n  *) mod_md: Lowered the required minimal libcurl version from 7.50 to 7.29\n     as proposed by <alexander.gerasimov codeit.pro>. [Stefan Eissing]\n\n  *) mod_ssl: Fix request body buffering with PHA in TLSv1.3.  [Joe Orton]\n\n  *) mod_proxy_uwsgi: Fix a crash when sending environment variables with no\n     value. PR 64598 [Ruediger Pluem]\n\n  *) mod_proxy: Recognize parameters from ProxyPassMatch workers with dollar\n     substitution, such that they apply to the backend connection.  Note that\n     connection reuse is disabled by default to avoid compatibility issues.\n     [Takashi Sato, Jan Kaluza, Eric Covener, Yann Ylavic, Jean-Frederic Clere]\n\nChanges with Apache 2.4.46\n\n  *) SECURITY: CVE-2020-11984 (cve.mitre.org)\n     mod_proxy_uwsgi: Malicious request may result in information disclosure\n     or RCE of existing file on the server running under a malicious process\n     environment. [Yann Ylavic]\n\n  *) SECURITY: CVE-2020-11993 (cve.mitre.org)\n     mod_http2: when throttling connection requests, log statements\n     where possibly made that result in concurrent, unsafe use of\n     a memory pool. [Stefan Eissing]\n\n  *) SECURITY: CVE-2020-9490 (cve.mitre.org)\n     mod_http2: a specially crafted value for the 'Cache-Digest' header\n     request would result in a crash when the server actually tries\n     to HTTP/2 PUSH a resource afterwards. [Stefan Eissing]\n\n  *) mod_proxy_fcgi: Fix missing APLOGNO macro argument\n     [Eric Covener, Christophe Jaillet]\n\nChanges with Apache 2.4.45\n\n  *) mod_http2: remove support for abandoned http-wg draft\n     <https://datatracker.ietf.org/doc/draft-kazuho-h2-cache-digest/>.\n     [Stefan Eissing]\n\nChanges with Apache 2.4.44\n\n  *) mod_proxy_uwsgi: Error out on HTTP header larger than 16K (hard\n     protocol limit).  [Yann Ylavic]\n\n  *) mod_http2: \n     Fixes <https://github.com/icing/mod_h2/issues/200>: \n     \"LimitRequestFields 0\" now disables the limit, as documented.\n     Fixes <https://github.com/icing/mod_h2/issues/201>: \n     Do not count repeated headers with same name against the field\n     count limit. The are merged internally, as if sent in a single HTTP/1 line.\n     [Stefan Eissing]\n\n  *) mod_http2: Avoid segfaults in case of handling certain responses for\n     already aborted connections.  [Stefan Eissing, Ruediger Pluem]\n\n  *) mod_http2: The module now handles master/secondary connections and has marked\n     methods according to use. [Stefan Eissing]\n\n  *) core: Drop an invalid Last-Modified header value coming\n     from a FCGI/CGI script instead of replacing it with Unix epoch.\n     [Yann Ylavic, Luca Toscano]\n\n  *) Add support for strict content-length parsing through addition of\n     ap_parse_strict_length() [Yann Ylavic]\n\n  *) mod_proxy_fcgi: ProxyFCGISetEnvIf unsets variables when expression\n     evaluates to false.  PR64365. [Michael K\u00f6nig <mail ikoenig.net>]\n\n  *) mod_proxy_http: flush spooled request body in one go to avoid\n     leaking (or long lived) temporary file. PR 64452. [Yann Ylavic]\n\n  *) mod_ssl: Fix a race condition and possible crash when using a proxy client\n     certificate (SSLProxyMachineCertificateFile).\n     [Armin Abfalterer <a.abfalterer gmail.com>]\n\n  *) mod_ssl: Fix memory leak in stapling code. PR63687. [Stefan Eissing]\n\n  *) mod_http2: Fixed regression that no longer set H2_STREAM_ID and H2_STREAM_TAG.\n     PR64330 [Stefan Eissing]\n\n  *) mod_http2: Fixed regression that caused connections to close when mod_reqtimeout\n     was configured with a handshake timeout. Fixes gitub issue #196.\n     [Stefan Eissing]\n\n  *) mod_proxy_http2: the \"ping\" proxy parameter\n     (see <https://httpd.apache.org/docs/2.4/mod/mod_proxy.html>) is now used\n     when checking the liveliness of a new or reused h2 connection to the backend.\n     With short durations, this makes load-balancing more responsive. The module\n     will hold back requests until ping conditions are met, using features of the\n     HTTP/2 protocol alone. [Ruediger Pluem, Stefan Eissing]\n\n  *) core: httpd is no longer linked against -lsystemd if mod_systemd\n     is enabled (and built as a DSO).  [Rainer Jung]\n\n  *) mod_proxy_http2: respect ProxyTimeout settings on backend connections\n     while waiting on incoming data. [Ruediger Pluem, Stefan Eissing]\n\nChanges with Apache 2.4.43\n\n  *) mod_ssl: Fix memory leak of OCSP stapling response. [Yann Ylavic]\n\nChanges with Apache 2.4.42\n\n  *) SECURITY: CVE-2020-1934 (cve.mitre.org)\n     mod_proxy_ftp: Use of uninitialized value with malicious backend FTP\n     server. [Eric Covener]\n\n  *) SECURITY: CVE-2020-1927 (cve.mitre.org)\n     rewrite, core: Set PCRE_DOTALL flag by default to avoid unpredictable\n     matches and substitutions with encoded line break characters.\n     The fix for CVE-2019-10098 was not effective.  [Ruediger Pluem]\n\n  *) mod_proxy_http: Fix the forwarding of requests with content body when a\n     balancer member is unavailable; the retry on the next member was issued\n     with an empty body (regression introduced in 2.4.41). PR63891. \n     [Yann Ylavic]\n\n  *) core: Use a temporary file when writing the pid file, avoiding\n     startup failure if an empty pidfile is left over from a\n     previous crashed or aborted invocation of httpd.  PR 63140.\n     [Nicolas Carrier <carrier.nicolas0 gmail.com>, Joe Orton]\n\n  *) mod_http2: Fixes issue where mod_unique_id would generate non-unique request\n     identifier under load, see <https://github.com/icing/mod_h2/issues/195>.\n     [Michael Kaufmann, Stefan Eissing]\n\n  *) mod_proxy_hcheck: Allow healthcheck expressions to use %{Content-Type}.\n     PR64140. [Renier Velazco <renier.velazco upr.edu>]\n\n  *) mod_authz_groupfile: Drop AH01666 from loglevel \"error\" to \"info\".\n     PR64172.\n\n  *) mod_usertrack: Add CookieSameSite, CookieHTTPOnly, and CookieSecure \n     to allow customization of the usertrack cookie. PR64077.\n     [Prashant Keshvani <prashant2400 gmail.com>, Eric Covener]\n\n  *) mod_proxy_ajp: Add \"secret\" parameter to proxy workers to implement legacy\n     AJP13 authentication.  PR 53098. [Dmitry A. Bakshaev <dab1818 gmail com>]\n\n  *) mpm_event: avoid possible KeepAliveTimeout off by -100 ms.\n     [Eric Covener, Yann Ylavic]\n\n  *) Add a config layout for OpenWRT. [Graham Leggett]\n\n  *) Add support for cross compiling to apxs. If apxs is being executed from\n     somewhere other than its target location, add that prefix to includes and\n     library directories. Without this, apxs would fail to find config_vars.mk\n     and exit. [Graham Leggett]\n\n  *) mod_ssl: Disable client verification on ACME ALPN challenges. Fixes github\n     issue mod_md#172 (https://github.com/icing/mod_md/issues/172).\n     [Michael Kaufmann <mail michael-kaufmann.ch>, Stefan Eissing]\n\n  *) mod_ssl: use OPENSSL_init_ssl() to initialise OpenSSL on versions 1.1+.\n     [Graham Leggett]\n\n  *) mod_ssl: Support use of private keys and certificates from an\n     OpenSSL ENGINE via PKCS#11 URIs in SSLCertificateFile/KeyFile.\n     [Anderson Sasaki <ansasaki redhat.com>, Joe Orton]\n\n  *) mod_md:\n     - Prefer MDContactEmail directive to ServerAdmin for registration. New directive\n       thanks to Timothe Litt (@tlhackque).\n     - protocol check for pre-configured \"tls-alpn-01\" challenge has been improved. It will now\n       check all matching virtual hosts for protocol support. Thanks to @mkauf.\n     - Corrected a check when OCSP stapling was configured for hosts\n       where the responsible MDomain is not clear, by Michal Karm Babacek (@Karm).\n     - Softening the restrictions where mod_md configuration directives may appear. This should\n       allow for use in <If> and <Macro> sections. If all possible variations lead to the configuration\n       you wanted in the first place, is another matter.\n     [Michael Kaufmann <mail michael-kaufmann.ch>, Timothe Litt (@tlhackque),\n      Michal Karm Babacek (@Karm), Stefan Eissing (@icing)] \n\n  *) test: Added continuous testing with Travis CI.\n     This tests various scenarios on Ubuntu with the full test suite.\n     Architectures tested: amd64, s390x, ppc64le, arm64\n     The tests pass successfully.\n     [Luca Toscano, Joe Orton, Mike Rumph, and others]\n\n  *) core: Be stricter in parsing of Transfer-Encoding headers.\n     [ZeddYu <zeddyu.lu gmail.com>, Eric Covener]\n\n  *) mod_ssl: negotiate the TLS protocol version per name based vhost\n     configuration, when linked with OpenSSL-1.1.1 or later. The base vhost's\n     SSLProtocol (from the first vhost declared on the IP:port) is now only\n     relevant if no SSLProtocol is declared for the vhost or globally,\n     otherwise the vhost or global value apply.  [Yann Ylavic]\n\n  *) mod_cgi, mod_cgid: Fix a memory leak in some error cases with large script\n     output.  PR 64096.  [Joe Orton]\n\n  *) config: Speed up graceful restarts by using pre-hashed command table. PR 64066.\n     [Giovanni Bechis <giovanni paclan.it>, Jim Jagielski]\n\n  *) mod_systemd: New module providing integration with systemd.  [Jan Kaluza]\n\n  *) mod_lua: Add r:headers_in_table, r:headers_out_table, r:err_headers_out_table,\n     r:notes_table, r:subprocess_env_table as read-only native table alternatives\n     that can be iterated over. [Eric Covener]\n\n  *) mod_http2: Fixed rare cases where a h2 worker could deadlock the main connection. \n     [Yann Ylavic, Stefan Eissing]\n\n  *) mod_lua: Accept nil assignments to the exposed tables (r.subprocess_env, \n     r.headers_out, etc) to remove the key from the table. PR63971. \n     [Eric Covener]\n\n  *) mod_http2: Fixed interaction with mod_reqtimeout. A loaded mod_http2 was disabling the\n     ssl handshake timeouts. Also, fixed a mistake of the last version that made `H2Direct` \n     always `on`, regardless of configuration. Found and reported by\n     <Armin.Abfalterer@united-security-providers.ch> and\n     <Marcial.Rion@united-security-providers.ch>. [Stefan Eissing] \n\n  *) mod_http2: Multiple field length violations in the same request no longer cause\n     several log entries to be written. [@mkauf]\n\n  *) mod_ssl: OCSP does not apply to proxy mode.  PR 63679.\n     [Lubos Uhliarik <luhliari redhat.com>, Yann Ylavic]\n\n  *) mod_proxy_html, mod_xml2enc: Fix build issues with macOS due to r1864469\n     [Jim Jagielski]\n \n  *) mod_authn_socache: Increase the maximum length of strings that can be cached by\n     the module from 100 to 256.  PR 62149 [<thorsten.meinl knime.com>]\n\n  *) mod_proxy: Fix crash by resolving pool concurrency problems. PR 63503\n     [Ruediger Pluem, Eric Covener]\n\n  *) core: On Windows, fix a start-up crash if <IfFile ...> is used with a path that is not\n     valid (For example, testing for a file on a flash drive that is not mounted)\n     [Christophe Jaillet]\n\n  *) mod_deflate, mod_brotli: honor \"Accept-Encoding: foo;q=0\" as per RFC 7231; which\n     means 'foo' is \"not acceptable\".  PR 58158 [Chistophe Jaillet]\n\n  *) mod_md v2.2.3: \n     - Configuring MDCAChallenges replaces any previous existing challenge configuration. It\n       had been additive before which was not the intended behaviour. [@mkauf]\n     - Fixing order of ACME challenges used when nothing else configured. Code now behaves as\n       documented for `MDCAChallenges`. Fixes #156. Thanks again to @mkauf for finding this.\n     - Fixing a potential, low memory null pointer dereference [thanks to @uhliarik].\n     - Fixing an incompatibility with a change in libcurl v7.66.0 that added unwanted\n       \"transfer-encoding\" to POST requests. This failed in direct communication with\n       Let's Encrypt boulder server. Thanks to @mkauf for finding and fixing. [Stefan Eissing]\n\n  *) mod_md: Adding the several new features.\n     The module offers an implementation of OCSP Stapling that can replace fully or\n     for a limited set of domains the existing one from mod_ssl. OCSP handling\n     is part of mod_md's monitoring and message notifications. If can be used\n     for sites that do not have ACME certificates.\n     The url for a CTLog Monitor can be configured. It is used in the server-status\n     to link to the external status page of a certificate.\n     The MDMessageCmd is called with argument \"installed\" when a new certificate\n     has been activated on server restart/reload. This allows for processing of\n     the new certificate, for example to applications that require it in different\n     locations or formats.\n     [Stefan Eissing]\n\n  *) mod_proxy_balancer: Fix case-sensitive referer check related to CSRF/XSS \n     protection. PR 63688. [Armin Abfalterer <a.abfalterer gmail.com>]\n\nChanges with Apache 2.4.41\n\n  *) SECURITY: CVE-2019-10097 (cve.mitre.org)\n     mod_remoteip: Fix stack buffer overflow and NULL pointer deference\n     when reading the PROXY protocol header.  [Joe Orton,\n     Daniel McCarney <cpu letsencrypt.org>]\n\n  *) SECURITY: CVE-2019-9517 (cve.mitre.org)\n     mod_http2: a malicious client could perform a DoS attack by flooding\n        a connection with requests and basically never reading responses\n        on the TCP connection. Depending on h2 worker dimensioning, it was\n        possible to block those with relatively few connections. [Stefan Eissing]\n\n  *) SECURITY: CVE-2019-10098 (cve.mitre.org)\n     rewrite, core: Set PCRE_DOTALL flag by default to avoid unpredictable\n     matches and substitutions with encoded line break characters.\n     [Yann Ylavic]\n\n  *) SECURITY: CVE-2019-10092 (cve.mitre.org)\n     Remove HTML-escaped URLs from canned error responses to prevent misleading\n     text/links being displayed via crafted links. [Eric Covener]\n\n  *) SECURITY: CVE-2019-10082 (cve.mitre.org)\n     mod_http2: Using fuzzed network input, the http/2 session\n     handling could be made to read memory after being freed,\n     during connection shutdown. [Stefan Eissing]\n\n  *) SECURITY: CVE-2019-10081 (cve.mitre.org)\n     mod_http2: HTTP/2 very early pushes, for example configured with \"H2PushResource\",\n        could lead to an overwrite of memory in the pushing request's pool,\n        leading to crashes. The memory copied is that of the configured push\n        link header values, not data supplied by the client. [Stefan Eissing]\n\n  *) mod_proxy_balancer: Improve balancer-manager protection against \n     XSS/XSRF attacks from trusted users.  [Joe Orton,\n     Niels Heinen <heinenn google.com>]\n\n  *) mod_session: Introduce SessionExpiryUpdateInterval which allows to\n     configure the session/cookie expiry's update interval. PR 57300.\n     [Paul Spangler <paul.spangler ni.com>]\n\n  *) modules/filters: Fix broken compilation when using old GCC (<4.2.x).\n     PR 63633.  [Rainer Jung, Joe Orton]\n\n  *) mod_ssl: Fix startup failure in 2.4.40 with SSLCertificateChainFile\n     configured for a domain managed by mod_md.  [Stefan Eissing]\n\nChanges with Apache 2.4.40\n\n  *) core, mod_rewrite: Set PCRE_DOTALL by default. Revert via \n     RegexDefaultOptions -DOTALL [Yann Ylavic]\n\n  *) core: Remove request details from built-in error documents [Eric Covener]\n\n  *) mod_http2: core setting \"LimitRequestFieldSize\" is not additionally checked on\n     merged header fields, just as HTTP/1.1 does. [Stefan Eissing, Michael Kaufmann]\n\n  *) mod_http2: fixed a bug that prevented proper stream cleanup when connection\n     throttling was in place. Stream resets by clients on streams initiated by them\n     are counted as possible trigger for throttling. [Stefan Eissing]\n\n  *) mod_http2/mpm_event: Fixes the behaviour when a HTTP/2 connection has nothing\n     more to write with streams ongoing (flow control block). The timeout waiting\n     for the client to send WINODW_UPDATE was incorrectly KeepAliveTimeout and not\n     Timeout as it should be. Fixes PR 63534. [Yann Ylavic, Stefan Eissing]\n\n  *) mod_proxy_balancer: Load balancer required byrequests when bytraffic chosen.\n     PR 62372. [Jim Jagielski]\n\n  *) mod_proxy_hcheck: Create the configuration for mod_proxy_hcheck\n     when used in BalancerMember. PR 60757. [Jean-Frederic Clere]\n\n  *) mod_proxy_hcheck: Mute extremely frequent debug message. [Yann Ylavic]\n\n  *) mod_ssl/mod_md: reversing dependency by letting mod_ssl offer hooks for\n     adding certificates and keys to a virtual host. An additional hook allows\n     answering special TLS connections as used in ACME challenges.\n     Adding 2 new hooks for init/get of OCSP stapling status information when\n     other modules want to provide those. Falls back to own implementation with\n     same behaviour as before.\n     [Stefan Eissing]\n  \n  *) mod_md: new features\n     - protocol\n       - supports the ACMEv2 protocol. It is the default and will be used on the next\n         certificate renewal, unless another \"MDCertificateAuthority\" is configured\n       - ACMEv2 endpoints use the GET via empty POST way of accessing resources, see\n         announcement by Let's Encrypt:       \n         https://community.letsencrypt.org/t/acme-v2-scheduled-deprecation-of-unauthenticated-resource-gets/74380\n     - challenges\n       - new challenge method 'tls-alpn-01' implemented\n       - challenge type 'tls-sni-01' has been removed as CAs do not offer this any longer\n       - supports command configuration to setup/teardown 'dns-01' challenges\n       - supports wildcard certificates when dns challenges are configured\n     - status information and monitoring\n       - a domain exposes its status at https://<domain>/.httpd/certificate-status\n       - Managed Domains are now in Apache's 'server-status' page\n       - A new handler 'md-status' exposes verbose status information in JSON format\n     - new directives\n       - \"MDCertificateFile\" and \"MDCertificateKeyFile\" to configure a\n         Managed Domain that uses static files. Auto-renewal is turned off for those.\n       - \"MDMessageCmd\" that is invoked on several events: 'renewed', 'expiring' and\n         'errored'.\n       - \"MDWarnWindow\" directive to configure when expiration warnings shall be issued.\n     [Stefan Eissing]\n\n  *) mod_mime_magic: Fix possible corruption of returned strings.\n     [Christophe Jaillet]\n\n  *) Default \"conf/magic\": Fix pattern for \"audio/x-wav\" for WAV files,\n     remove \"audio/unknown\" pattern for other RIFF files.\n     [\u00c0ngel Oll\u00e9 Bl\u00e1zquez <aollebla redhat.com>]\n\n  *) mod_proxy_http2: fixing a potential NULL pointer use in logging.\n     [Christophe Jaillet, Dr Silvio Cesare InfoSect]\n\n  *) mod_dav: Reduce the amount of memory needed when doing PROPFIND's on large\n     collections by improving the memory management. [Joe Orton, Ruediger Pluem]\n\n  *) mod_proxy_http2: adding support for handling trailers in both directions.\n     PR 63502. [Stefan Eissing]\n\n  *) mod_proxy_http: forward 100-continue, and minimize race conditions when\n     reusing backend connections. PR 60330. [Yann Ylavic, Jean-Frederic Clere]\n\n  *) mod_proxy_balancer: Fix some HTML syntax issues.  [Christophe Jaillet]\n\n  *) When using mod_status with the Event MPM, report the number of requests\n     associated with an active connection in the \"ACC\" field. Previously\n     zero was always reported with this MPM.  PR60647. [Eric Covener]\n\n  *) mod_http2: remove the no longer existing h2_ngn_shed.c from Cmake.\n     [Stefan Eissing]\n\n  *) mod_proxy/ssl: Proxy SSL client certificate configuration and other proxy\n     SSL configurations broken inside <Proxy> context.  PR 63430.\n     [Ruediger Pluem, Yann Ylavic]\n\n  *) mod_proxy: allow SSLProxyCheckPeer* usage for all proxy modules.\n     PR 61857.  [Markus Gausling <markusgausling googlemail.com>, Yann Ylavic]\n\n  *) mod_reqtimeout: Fix default rates missing (not applied) in 2.4.39.\n     PR 63325. [Yann Ylavic]\n\n  *) mod_info: Fix output of server settings for PIPE_BUF in mod_info in\n     the rare case that PIPE_BUF is defined. [Rainer Jung]\n\n  *) mod_md: Store permissions are enforced on file creation, enforcing restrictions in\n     spite of umask. Fixes <https://github.com/icing/mod_md/issues/117>. [Stefan Eissing]\n\nChanges with Apache 2.4.39\n\n  *) SECURITY: CVE-2019-0197 (cve.mitre.org)\n     mod_http2: fixes a possible crash when HTTP/2 was enabled for a http:\n     host or H2Upgrade was enabled for h2 on a https: host. An Upgrade\n     request from http/1.1 to http/2 that was not the first request on a\n     connection could lead to a misconfiguration and crash. Servers that\n     never enabled the h2 protocol or only enabled it for https: and\n     did not set \"H2Upgrade on\" are unaffected by this issue.\n     [Stefan Eissing]\n\n  *) SECURITY: CVE-2019-0196 (cve.mitre.org)\n     mod_http2: using fuzzed network input, the http/2 request\n     handling could be made to access freed memory in string\n     comparison when determining the method of a request and\n     thus process the request incorrectly. [Stefan Eissing]\n\n  *) SECURITY: CVE-2019-0211 (cve.mitre.org)\n     MPMs unix: Fix a local privilege escalation vulnerability by not\n     maintaining each child's listener bucket number in the scoreboard,\n     preventing unprivileged code like scripts run by/on the server (e.g. via\n     mod_php) from modifying it persistently to abuse the privileged main\n     process.  [Charles Fol <folcharles gmail.com>, Yann Ylavic]\n\n  *) SECURITY: CVE-2019-0217 (cve.mitre.org)\n     mod_auth_digest: Fix a race condition checking user credentials which\n     could allow a user with valid credentials to impersonate another,\n     under a threaded MPM.  PR 63124.  [Simon Kappel <simon.kappel axis.com>]\n\n  *) SECURITY: CVE-2019-0215 (cve.mitre.org)\n     mod_ssl: Fix access control bypass for per-location/per-dir client\n     certificate verification in TLSv1.3.\n\n  *) SECURITY: CVE-2019-0220 (cve.mitre.org)\n     Merge consecutive slashes in URL's. Opt-out with\n     `MergeSlashes OFF`. [Eric Covener]\n\n  *) mod_proxy/ssl: Cleanup per-request SSL configuration anytime a backend\n     connection is recycled/reused to avoid a possible crash with some SSLProxy\n     configurations in <Location> or <Proxy> context. PR 63256. [Yann Ylavic]\n\n  *) mod_log_config: Support %{c}h for conn-hostname, %h for useragent_host\n     PR 55348\n\n  *) mod_socache_redis: Support for Redis as socache storage provider.\n\n  *) core: new configuration option 'MergeSlashes on|off' that controls handling of\n     multiple, consecutive slash ('/') characters in the path component of the request URL.\n     [Eric Covener]\n     \n  *) mod_http2: when SSL renegotiation is inhibited and a 403 ErrorDocument is\n     in play, the proper HTTP/2 stream reset did not trigger with H2_ERR_HTTP_1_1_REQUIRED.\n     Fixed. [Michael Kaufmann] \n\n  *) mod_http2: new configuration directive: `H2Padding numbits` to control \n     padding of HTTP/2 payload frames. 'numbits' is a number from 0-8,\n     controlling the range of padding bytes added to a frame. The actual number\n     added is chosen randomly per frame. This applies to HEADERS, DATA and PUSH_PROMISE\n     frames equally. The default continues to be 0, e.g. no padding. [Stefan Eissing] \n  \n  *) mod_http2: ripping out all the h2_req_engine internal features now that mod_proxy_http2\n     has no more need for it. Optional functions are still declared but no longer implemented.\n     While previous mod_proxy_http2 will work with this, it is recommended to run the matching\n     versions of both modules. [Stefan Eissing]\n  \n  *) mod_proxy_http2: changed mod_proxy_http2 implementation and fixed several bugs which\n     resolve PR63170. The proxy module does now a single h2 request on the (reused)\n     connection and returns. [Stefan Eissing]\n  \n  *) mod_http2/mod_proxy_http2: proxy_http2 checks correct master connection aborted status \n     to trigger immediate shutdown of backend connections. This is now always signalled\n     by mod_http2 when the the session is being released. \n     proxy_http2 now only sends a PING frame to the backend when there is not already one\n     in flight. [Stefan Eissing]\n\n  *) mod_proxy_http2: fixed an issue where a proxy_http2 handler entered an infinite \n     loop when encountering certain errors on the backend connection. \n     See <https://bz.apache.org/bugzilla/show_bug.cgi?id=63170>. [Stefan Eissing]\n\n  *) mod_http2: Configuration directives H2Push and H2Upgrade can now be specified per \n     Location/Directory, e.g. disabling PUSH for a specific set of resources. [Stefan Eissing]\n\n  *) mod_http2: HEAD requests to some module such as mod_cgid caused the stream to\n     terminate improperly and cause a HTTP/2 PROTOCOL_ERROR. \n     Fixes <https://github.com/icing/mod_h2/issues/167>. [Michael Kaufmann]\n\n  *) http: Fix possible empty response with mod_ratelimit for HEAD requests.\n     PR 63192. [Yann Ylavic]\n\n  *) mod_cache_socache: Avoid reallocations and be safe with outgoing data\n     lifetime. [Yann Ylavic]\n\n  *) mod_http2: enable re-use of slave connections again. Fixed slave connection\n     keepalives counter. [Stefan Eissing]\n\n  *) mod_reqtimeout: Allow to configure (TLS-)handshake timeouts.\n     PR 61310. [Yann Ylavic]\n\n  *) core: Split out the ability to parse wildcard files and directories\n     from the Include/IncludeOptional directives into a generic set of\n     functions ap_dir_nofnmatch() and ap_dir_fnmatch(). [Graham Leggett]\n\n  *) mod_proxy_wstunnel: Fix websocket proxy over UDS.\n     PR 62932 <pavel dcmsys.com>\n\n  *) mod_ssl: Don't unset FIPS mode on restart unless it's forced by\n     configuration (SSLFIPS on) and not active by default in OpenSSL.\n     PR 63136. [Yann Ylavic]\n\nChanges with Apache 2.4.38\n\n  *) SECURITY: CVE-2018-17199 (cve.mitre.org)\n     mod_session: mod_session_cookie does not respect expiry time allowing\n     sessions to be reused.  [Hank Ibell]\n\n  *) SECURITY: CVE-2018-17189 (cve.mitre.org)\n     mod_http2: fixes a DoS attack vector. By sending slow request bodies\n     to resources not consuming them, httpd cleanup code occupies a server\n     thread unnecessarily. This was changed to an immediate stream reset\n     which discards all stream state and incoming data.  [Stefan Eissing]\n\n  *) SECURITY: CVE-2019-0190 (cve.mitre.org)\n     mod_ssl: Fix infinite loop triggered by a client-initiated\n     renegotiation in TLSv1.2 (or earlier) with OpenSSL 1.1.1 and\n     later.  PR 63052.  [Joe Orton]\n\n  *) mod_ssl: Clear retry flag before aborting client-initiated renegotiation.\n     PR 63052 [Joe Orton]\n\n  *) mod_negotiation: Treat LanguagePriority as case-insensitive to match\n     AddLanguage behavior and HTTP specification. PR 39730 [Christophe Jaillet]\n  \n  *) mod_md: incorrect behaviour when synchronizing ongoing ACME challenges\n     have been fixed. [Michael Kaufmann, Stefan Eissing]\n  \n  *) mod_setenvif: We can have expressions that become true if a regex pattern\n     in the expression does NOT match. In this case val is NULL\n     and we should just set the value for the environment variable \n     like in the pattern case. [Ruediger Pluem]\n\n  *) mod_session: Always decode session attributes early. [Hank Ibell]\n\n  *) core: Incorrect values for environment variables are substituted when\n     multiple environment variables are specified in a directive. [Hank Ibell]\n\n  *) mod_rewrite: Only create the global mutex used by \"RewriteMap prg:\" when\n     this type of map is present in the configuration.  PR62311.  \n     [Hank Ibell <hwibell gmail.com>]\n\n  *) mod_dav: Fix invalid Location header when a resource is created by\n     passing an absolute URI on the request line [Jim Jagielski]\n\n  *) mod_session_cookie: avoid duplicate Set-Cookie header in the response.\n     [Emmanuel Dreyfus <manu@netbsd.org>, Luca Toscano]\n\n  *) mod_ssl: clear *SSL errors before loading certificates and checking\n     afterwards. Otherwise errors are reported when other SSL using modules\n     are in play. Fixes PR 62880. [Michael Kaufmann]\n\n  *) mod_ssl: Fix the error code returned in an error path of\n     'ssl_io_filter_handshake()'. This messes-up error handling performed\n     in 'ssl_io_filter_error()' [Yann Ylavic]\n\n  *) mod_ssl: Fix $HTTPS definition for \"SSLEngine optional\" case, and fix\n     authz provider so \"Require ssl\" works correctly in HTTP/2.\n     PR 61519, 62654.  [Joe Orton, Stefan Eissing]\n\n  *) mod_proxy: If ProxyPassReverse is used for reverse mapping of relative\n     redirects, subsequent ProxyPassReverse statements, whether they are\n     relative or absolute, may fail.  PR 60408.  [Peter Haworth <pmh1wheel gmail.com>]\n  \n  *) mod_lua: Now marked as a stable module [https://s.apache.org/Xnh1]\n\nChanges with Apache 2.4.37\n\n  *) mod_ssl: Fix HTTP/2 failures when using OpenSSL 1.1.1. [Rainer Jung]\n\n  *) mod_ssl: Fix crash during SSL renegotiation with OptRenegotiate set,\n     when client certificates are available from the original handshake\n     but were originally not verified and should get verified now.\n     This is a regression in 2.4.36 (unreleased). [Ruediger Pluem]\n\n  *) mod_ssl: Correctly merge configurations that have client certificates set\n     by SSLProxyMachineCertificate{File|Path}. [Ruediger Pluem]\n\nChanges with Apache 2.4.36\n\n  *) mod_brotli, mod_deflate: Restore the separate handling of 304 Not Modified\n     responses. Regression introduced in 2.4.35.\n\n  *) mod_proxy_scgi, mod_proxy_uwsgi: improve error handling when sending the\n     body of the response. [Jim Jagielski]\n\n  *) mpm_event: Stop issuing AH00484 \"server reached MaxRequestWorkers...\" when\n     there are still idle threads available. When there are less idle threads than\n     MinSpareThreads, issue new one-time message AH10159. Matches worker MPM.\n     [Eric Covener]\n\n  *) mod_http2: adding defensive code for stream EOS handling, in case the request handler\n     missed to signal it the normal way (eos buckets). Addresses github issues \n     https://github.com/icing/mod_h2/issues/164, https://github.com/icing/mod_h2/issues/167\n     and https://github.com/icing/mod_h2/issues/170. [Stefan Eissing] \n\n  *) ab: Add client certificate support.  PR 55774.  [Graham Leggett]\n\n  *) ab: Disable printing temp key for OpenSSL before\n     version 1.0.2. SSL_get_server_tmp_key is not available\n     there. [Rainer Jung]\n\n  *) mod_ssl: Fix a regression that the configuration settings for verify mode\n     and verify depth were taken from the frontend connection in case of\n     connections by the proxy to the backend. PR 62769. [Ruediger Pluem]\n\n  *) MPMs: Initialize all runtime/asynchronous objects on a dedicated pool and\n     before signals handling to avoid lifetime issues on restart or shutdown.\n     PR 62658. [Yann Ylavic]\n\n  *) mod_ssl: Add support for OpenSSL 1.1.1 and TLSv1.3.  TLSv1.3 has\n     behavioural changes compared to v1.2 and earlier; client and\n     configuration changes should be expected.  SSLCipherSuite is\n     enhanced for TLSv1.3 ciphers, but applies at vhost level only.\n     [Stefan Eissing, Yann Ylavic, Ruediger Pluem, Joe Orton]\n\n  *) mod_auth_basic: Be less tolerant when parsing the credencial. Only spaces\n     should be accepted after the authorization scheme. \\t are also tolerated.\n     [Christophe Jaillet]\n\n  *) mod_socache_redis: New socache submodule provider to allow use\n     of Redis as storage backend. [Jim Jagielski]\n\n  *) mod_proxy_hcheck: Fix issues with interval determination. PR 62318\n     [Jim Jagielski]\n\n  *) mod_proxy_hcheck: Fix issues with TCP health checks. PR 61499\n     [Dominik Stillhard <dominik.stillhard united-security-providers.ch>]\n\n  *) mod_proxy_hcheck: take balancer's SSLProxy* directives into account.\n     [Jim Jagielski]\n\n  *) mod_status, mod_echo: Fix the display of client addresses.\n    They were truncated to 31 characters which is not enough for IPv6 addresses.\n    This is done by deprecating the use of the 'client' field and using\n    the new 'client64' field in worker_score.\n    PR 54848 [Bernhard Schmidt <berni birkenwald de>, Jim Jagielski]\n\nChanges with Apache 2.4.35\n\n  *) http: Enforce consistently no response body with both 204 and 304\n     statuses.  [Yann Ylavic]\n\n  *) mod_status: Cumulate CPU time of exited child processes in the\n     \"cu\" and \"cs\" values. Add CPU time of the parent process to the\n     \"c\" and \"s\" values.\n     [Rainer Jung]\n\n  *) mod_proxy: Improve the balancer member data shown in mod_status when\n     \"ProxyStatus\" is \"On\": add \"busy\" count and show byte counts in\n     auto mode always in units of kilobytes.  [Rainer Jung]\n\n  *) mod_status: Add cumulated response duration time in milliseconds.\n     [Rainer Jung]\n\n  *) mod_status: Complete the data shown for async MPMs in \"auto\" mode.\n     Added number of processes, number of stopping processes and number\n     of busy and idle workers.  [Rainer Jung]\n\n  *) mod_ratelimit: Don't interfere with \"chunked\" encoding, fixing regression\n     introduced in 2.4.34.  PR 62568.  [Yann Ylavic]\n\n  *) mod_proxy: Remove load order and link dependency between mod_lbmethod_*\n     modules and mod_proxy. PR 62557. [Ruediger Pluem, William Rowe]\n\n  *) Allow the argument to <IfFile>, <IfDefine>, <IfSection>, <IfDirective>,\n     and <IfModule> to be quoted.  This is primarily for the benefit of\n     <IfFile>. [Eric Covener]\n\n  *) mod_watchdog: Correct some log messages.  [Rainer Jung]\n\n  *) mod_md: When the last domain name from an MD is moved to another one,\n     that now empty MD gets moved to the store archive. PR 62572. \n     [Stefan Eissing]\n\n  *) mod_ssl: Fix merging of SSLOCSPOverrideResponder.  [Jeff Trawick,\n     [Frank Meier <frank meier ergon.ch>]\n\n  *) mod_proxy_balancer: Restore compatibility with APR 1.4.  [Joe Orton]\n\nChanges with Apache 2.4.34\n\n  *) SECURITY: CVE-2018-8011 (cve.mitre.org)\n     mod_md: DoS via Coredumps on specially crafted requests\n\n  *) SECURITY: CVE-2018-1333 (cve.mitre.org)\n     mod_http2: DoS for HTTP/2 connections by specially crafted requests\n\n  *) Introduce zh-cn and zh-tw (simplified and traditional Chinese) error\n     document translations. [CodeingBoy, popcorner]\n\n  *) event: avoid possible race conditions with modules on the child pool.\n     [Stefan Fritsch]\n\n  *) mod_proxy: Fix a corner case where the ProxyPassReverseCookieDomain or\n     ProxyPassReverseCookiePath directive could fail to update correctly\n     'domain=' or 'path=' in the 'Set-Cookie' header.  PR 61560.\n     [Christophe Jaillet]\n\n  *) mod_ratelimit: fix behavior when proxing content. PR 62362.\n     [Luca Toscano, Yann Ylavic]\n\n  *) core: Re-allow '_' (underscore) in hostnames.\n     [Eric Covener]\n\n  *) mod_authz_core: If several parameters are used in a AuthzProviderAlias\n     directive, if these parameters are not enclosed in quotation mark, only\n     the first one is handled. The other ones are silently ignored.\n     Add a message to warn about such a spurious configuration.\n     PR 62469 [Hank Ibell <hwibell gmail.com>, Christophe Jaillet]\n\n  *) mod_md: improvements and bugfixes\n     - MDNotifyCmd now takes additional parameter that are passed on to the called command.\n     - ACME challenges have better checks for interference with other modules\n     - ACME challenges are only handled for domains managed by the module, allowing\n       other ACME clients to operate for other domains in the server.\n     - better libressl integration\n\n  *) mod_proxy_wstunnel: Add default schema ports for 'ws' and 'wss'.\n     PR 62480. [Lubos Uhliarik <luhliari redhat.com>}\n\n  *) logging: Some early logging-related startup messages could be lost\n     when using syslog for the global ErrorLog. [Eric Covener]\n\n  *) mod_cache: Handle case of an invalid Expires header value RFC compliant\n     like the case of an Expires time in the past: allow to overwrite the\n     non-caching decision using CacheStoreExpired and respect Cache-Control\n     \"max-age\" and \"s-maxage\".  [Rainer Jung]\n\n  *) mod_xml2enc: Fix forwarding of error metadata/responses. PR 62180.\n     [Micha Lenk <micha lenk.info>, Yann Ylavic]\n\n  *) mod_proxy_http: Fix response header thrown away after the previous one\n     was considered too large and truncated. PR 62196. [Yann Ylavic]\n\n  *) core: Add and handle AP_GETLINE_NOSPC_EOL flag for ap_getline() family\n     of functions to consume the end of line when the buffer is exhausted.\n     PR 62198. [Yann Ylavic]\n\n  *) mod_proxy_http: Add new worker parameter 'responsefieldsize' to\n     allow maximum HTTP response header size to be increased past 8192\n     bytes.  PR 62199.  [Hank Ibell <hwibell gmail.com>]\n\n  *) mod_ssl: Extend SSLOCSPEnable with mode 'leaf' that only checks the leaf\n     of a certificate chain.  PR62112.\n     [Ricardo Martin Camarero <rickyepoderi yahoo.es>]\n\n  *) http: Fix small memory leak per request when handling persistent\n     connections.  [Ruediger Pluem, Joe Orton]\n\n  *) mod_proxy_html: Fix variable interpolation and memory allocation failure\n     in ProxyHTMLURLMap.  PR 62344.  [Ewald Dieterich <ewald mailbox.org>]\n\n  *) mod_remoteip: Fix RemoteIP{Trusted,Internal}ProxyList loading broken by 2.4.30.\n     PR 62220.  [Chritophe Jaillet, Yann Ylavic]\n\n  *) mod_remoteip: When overriding the useragent address from X-Forwarded-For,\n     zero out what had been initialized as the connection-level port.  PR59931.\n     [Hank Ibell <hwibell gmail.com>]\n\n  *) core: In ONE_PROCESS/debug mode, cleanup everything when exiting.\n     [Yann Ylavic]\n\n  *) mod_proxy_balancer: Add hot spare member type and corresponding flag (R).\n     Hot spare members are used as drop-in replacements for unusable workers\n     in the same load balancer set. This differs from hot standbys which are\n     only used when all workers in a set are unusable. PR 61140. [Jim Riggs]\n\n  *) suexec: Add --enable-suexec-capabilites support on Linux, to use\n     setuid/setgid capability bits rather than a setuid root binary.\n     [Joe Orton]\n\n  *) suexec: Add support for logging to syslog as an alternative to\n     logging to a file; use --without-suexec-logfile --with-suexec-syslog.\n     [Joe Orton]\n\n  *) mod_ssl: Restore 2.4.29 behaviour in SSL vhost merging/enabling\n     which broke some rare but previously-working configs.  [Joe Orton]\n\n  *) core, log: improve sanity checks for the ErrorLog's syslog config, and\n     explicitly allow only lowercase 'syslog' settings. PR 62102\n     [Luca Toscano, Jim Riggs, Christophe Jaillet]\n\n  *) mod_http2: accurate reporting of h2 data input/output per request via\n     mod_logio. Fixes an issue where output sizes where counted n-times on\n     reused slave connections.  [Stefan Eissing]\n     See github issue: https://github.com/icing/mod_h2/issues/158\n\n  *) mod_http2: Fix unnecessary timeout waits in case streams are aborted.\n     [Stefan Eissing]\n\n  *) mod_http2: restoring the v1.10.16 keepalive timeout behaviour of mod_http2.\n     [Stefan Eissing]\n\n  *) mod_proxy: Do not restrict the maximum pool size for backend connections\n     any longer by the maximum number of threads per process and use a better\n     default if mod_http2 is loaded.\n     [Yann Ylavic, Ruediger Pluem, Stefan Eissing, Gregg Smith]\n\n  *) mod_slotmem_shm: Add generation number to shm filename to fix races\n     with graceful restarts. PRs 62044 and 62308.  [Jim Jagielski, Yann Ylavic]\n\n  *) core: Preserve the original HTTP request method in the '%<m' LogFormat\n     when an path-based ErrorDocument is used.  PR 62186.\n     [Micha Lenk <micha lenk.info>]\n\n  *) mod_remoteip: make proxy-protocol work on slave connections, e.g. in\n     HTTP/2 requests.  [Stefan Eissing]\n     See also https://github.com/roadrunner2/mod-proxy-protocol/issues/6\n\n  *) mod_ssl: Fix merging of proxy SSL context outside <Proxy> sections,\n     regression introduced in 2.4.30. PR 62232. [Rainer Jung, Yann Ylavic]\n\n  *) mod_md: Fix compilation with OpenSSL before version 1.0.2.  [Rainer Jung]\n\n  *) mod_dumpio: do nothing below log level TRACE7.  [Yann Ylavic]\n\n  *) mod_remoteip: Restore compatibility with APR 1.4 (apr_sockaddr_is_wildcard).\n     [Eric Covener]\n\n  *) core: On ECBDIC platforms, some errors related to oversized headers\n     may be misreported or be logged as ASCII escapes.  PR 62200\n     [Hank Ibell <hwibell gmail.com>]\n\n  *) mod_ssl: Fix cmake-based build.  PR 62266.  [Rainer Jung]\n\n  *) core: Add <IfFile>, <IfDirective> and <IfSection> conditional\n     section containers.  [Eric Covener, Joe Orton]\n\n  *) rotatelogs: Add -D option to create parent directories.  PR 46669.\n     [Philippe Lantin <plantin cobaltgroup.com>, Ben Reser, Rainer Jung]\n\nChanges with Apache 2.4.33\n\n  *) core: Fix request timeout logging and possible crash for error_log hooks.\n     [Yann Ylavic]\n\n  *) mod_slomem_shm: Fix failure to create balancers's slotmems in Windows MPM,\n     where children processes need to attach them instead since they are owned\n     by the parent process already.  [Yann Ylavic]\n\n  *) ab: try all destination socket addresses returned by\n     apr_sockaddr_info_get instead of failing on first one when not available.\n     Needed for instance if localhost resolves to both ::1 and 127.0.0.1\n     e.g. if both are in /etc/hosts.  [Jan Kaluza]\n\n  *) ab: Use only one connection to determine working destination socket\n     address.  [Jan Kaluza]\n\n  *) ab: LibreSSL doesn't have or require Windows applink.c.  [Gregg L. Smith]\n\n  *) htpasswd/htdigest: Disable support for bcrypt on EBCDIC platforms.\n     apr-util's bcrypt implementation doesn't tolerate EBCDIC.  [Eric Covener]\n\n  *) htpasswd/htdbm: report the right limit when get_password() overflows.\n     [Yann Ylavic]\n\n  *) htpasswd: Don't fail in -v mode if password file is unwritable.\n     PR 61631.  [Joe Orton]\n\n  *) htpasswd: don't point to (unused) stack memory on output\n     to make static analysers happy.  PR 60634.\n     [Yann Ylavic, reported by shqking and Zhenwei Zou]\n\nChanges with Apache 2.4.32\n\n  *) mod_access_compat: Fail if a comment is found in an Allow or Deny\n     directive.  [Jan Kaluza]\n\n  *) mod_authz_host: Ignore comments after \"Require host\", logging a\n     warning, or logging an error if the line is otherwise empty.\n     [Jan Kaluza, Joe Orton]\n\n  *) rotatelogs: Fix expansion of %Z in localtime (-l) mode, and fix\n     Y2K38 bug.  [Joe Orton]\n\n  *) mod_ssl: Support SSL DN raw variable extraction without conversion\n     to UTF-8, using _RAW suffix on variable names.  [Joe Orton]\n\n  *) ab: Fix https:// connection failures (regression in 2.4.30); fix\n     crash generating CSV output for large -n.  [Joe Orton, Jan Kaluza]\n\nChanges with Apache 2.4.31 (not released)\n\n  *) mod_proxy_fcgi: Add the support for mod_proxy's flushpackets and flushwait\n     parameters. [Luca Toscano, Ruediger Pluem, Yann Ylavic]\n\n  *) mod_ldap: Avoid possible crashes, hangs, and busy loops due to\n     improper merging of the cache lock in vhost config.\n     PR 43164 [Eric Covener]\n\n  *) mpm_event: Do lingering close in worker(s).  [Yann Ylavic]\n\n  *) mpm_queue: Put fdqueue code in common for MPMs event and worker.\n     [Yann Ylavic]\n\nChanges with Apache 2.4.30 (not released)\n\n  *) SECURITY: CVE-2017-15710 (cve.mitre.org)\n     Out of bound write in mod_authnz_ldap with AuthLDAPCharsetConfig enabled\n     [Eric Covener, Luca Toscano, Yann Ylavic]\n\n  *) SECURITY: CVE-2018-1283 (cve.mitre.org)\n     mod_session: CGI-like applications that intend to read from mod_session's\n     'SessionEnv ON' could be fooled into reading user-supplied data instead.\n     [Yann Ylavic]\n\n  *) SECURITY: CVE-2018-1303 (cve.mitre.org)\n     mod_cache_socache: Fix request headers parsing to avoid a possible crash\n     with specially crafted input data.  [Ruediger Pluem]\n\n  *) SECURITY: CVE-2018-1301 (cve.mitre.org)\n     core: Possible crash with excessively long HTTP request headers.\n     Impractical to exploit with a production build and production LogLevel.\n     [Yann Ylavic]\n\n  *) SECURITY: CVE-2017-15715 (cve.mitre.org)\n     core: Configure the regular expression engine to match '$' to the end of\n     the input string only, excluding matching the end of any embedded\n     newline characters. Behavior can be changed with new directive\n     'RegexDefaultOptions'. [Yann Ylavic]\n\n  *) SECURITY: CVE-2018-1312 (cve.mitre.org)\n     mod_auth_digest: Fix generation of nonce values to prevent replay\n     attacks across servers using a common Digest domain. This change\n     may cause problems if used with round robin load balancers. PR 54637\n     [Stefan Fritsch]\n\n  *) SECURITY: CVE-2018-1302 (cve.mitre.org)\n     mod_http2: Potential crash w/ mod_http2.\n     [Stefan Eissing]\n\n  *) mod_proxy: Worker schemes and hostnames which are too large are no\n     longer fatal errors; it is logged and the truncated values are stored.\n     [Jim Jagielski]\n\n  *) mod_proxy: Allow setting options to globally defined balancer from\n     ProxyPass used in VirtualHost. Balancers are now merged using the new\n     merge_balancers method which merges the balancers options.  [Jan Kaluza]\n\n  *) logresolve: Fix incorrect behavior or segfault if -c flag is used\n     Fixes: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=823259\n     [Stefan Fritsch]\n\n  *) mod_remoteip: Add support for PROXY protocol (code donated by Cloudzilla).\n     Add ability for PROXY protocol processing to be optional to donated code.\n     See also: http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt\n     [Cloudzilla/roadrunner2@GitHub, Jim Jagielski, Daniel Ruggeri]\n\n  *) mod_proxy, mod_ssl: Handle SSLProxy* directives in <Proxy> sections,\n     allowing per backend TLS configuration.  [Yann Ylavic]\n\n  *) mod_proxy_uwsgi: Add in UWSGI proxy (sub)module. [Roberto De Ioris,\n     Jim Jagielski]\n\n  *) mod_proxy_balancer,mod_slotmem_shm: Rework SHM reuse/deletion to not\n     depend on the number of restarts (non-Unix systems) and preserve shared\n     names as much as possible on configuration changes for SHMs and persisted\n     files.  PR 62044.  [Yann Ylavic, Jim Jagielski]\n\n  *) mod_http2: obsolete code removed, no more events on beam pool destruction,\n     discourage content encoders on http2-status response (where they do not work).\n     [Stefan Eissing]\n\n  *) mpm_event: Let the listener thread do its maintenance job on resources\n     shortage.  PR 61979.  [Yann Ylavic]\n\n  *) mpm_event: Wakeup the listener to re-enable listening sockets.\n     [Yann Ylavic]\n\n  *) mod_ssl: The SSLCompression directive will now give an error if used\n     with an OpenSSL build which does not support any compression methods.\n     [Joe Orton]\n\n  *) mpm_event,worker: Mask signals for threads created by modules in child\n     init, so that they don't receive (implicitly) the ones meant for the MPM.\n     PR 62009. [Armin Abfalterer <a.abfalterer gmail com>, Yann Ylavic]\n\n  *) mod_md: new experimental, module for managing domains across virtual hosts,\n     implementing the Let's Encrypt ACMEv1 protocol to signup and renew\n     certificates. Please read the modules documentation for further instructions\n     on how to use it. [Stefan Eissing]\n\n  *) mod_proxy_html: skip documents shorter than 4 bytes\n     PR 56286 [Micha Lenk <micha lenk info>]\n\n  *) core, mpm_event: Avoid a small memory leak of the scoreboard handle, for\n     the lifetime of the connection, each time it is processed by MPM event.\n     [Yann Ylavic]\n\n  *) mpm_event: Update scoreboard status for KeepAlive state.  [Yann Ylavic]\n\n  *) mod_ldap: Fix a case where a full LDAP cache would continually fail to\n     purge old entries and log AH01323. PR61891.\n     [Hendrik Harms <hendrik.harms gmail.com>]\n\n  *) mpm_event: close connections not reported as handled by any module to\n     avoid losing track of them and leaking scoreboard entries.  PR 61551.\n     [Yann Ylavic]\n\n  *) core: A signal received while stopping could have crashed the main\n     process.  PR 61558.  [Yann Ylavic]\n\n  *) mod_ssl: support for mod_md added. [Stefan Eissing]\n\n  *) mod_proxy_html: process parsed comments immediately.\n     Fixes bug (seen in the wild when used with IBM's HTTPD bundle)\n     where parsed comments may be lost. [Nick Kew]\n\n  *) mod_proxy_html: introduce doctype for HTML 5 [Nick Kew]\n\n  *) mod_proxy_html: fix typo-bug processing \"strict\" vs \"transitional\"\n     HTML/XHTML.  PR 56457  [Nick Kew]\n\n  *) mpm_event: avoid a very unlikely race condition between the listener and\n     the workers when the latter fails to add a connection to the pollset.\n     [Yann Ylavic]\n\n  *) core: silently ignore a not existent file path when IncludeOptional\n     is used. PR 57585. [Alberto Murillo Silva <powerbsd yahoo.com>, Luca Toscano]\n\n  *) mod_macro: fix usability of globally defined macros in .htaccess files.\n     PR 57525.  [Jose Kahan <jose w3.org>, Yann Ylavic]\n\n  *) mod_rewrite, core: add the Vary header when a condition evaluates to true\n     and the related RewriteRule is used in a Directory context\n     (triggering an internal redirect). [Luca Toscano]\n\n  *) ab: Make the TLS layer aware that the underlying socket is nonblocking,\n     and use/handle POLLOUT where needed to avoid busy IOs and recover write\n     errors when appropriate.  [Yann Ylavic]\n\n  *) ab: Keep reading nonblocking to exhaust TCP or SSL buffers when previous\n     read was incomplete (the SSL case can cause the next poll() to timeout\n     since data are buffered already).  PR 61301 [Luca Toscano, Yann Ylavic]\n\n  *) mod_http2: avoid unnecessary data retrieval for a trace log. Allow certain\n     information retrievals on null bucket beams where it makes sense. [Stefan Eissing]\n\nChanges with Apache 2.4.29\n\n  *) mod_unique_id: Use output of the PRNG rather than IP address and\n     pid, avoiding sleep() call and possible DNS issues at startup,\n     plus improving randomness for IPv6-only hosts.  [Jan Kaluza]\n\n  *) mod_rewrite, core: Avoid the 'Vary: Host' response header when HTTP_HOST\n     is used in a condition that evaluates to true. PR 58231 [Luca Toscano, Yann Ylavic]\n\n  *) mod_http2: v0.10.12, removed optimization for mutex handling in bucket\n     beams that could lead to assertion failure in edge cases.\n     [Stefan Eissing]\n\n  *) mod_proxy: Fix regression for non decimal loadfactor parameter introduced\n     in 2.4.28.  [Jim Jagielski]\n\n  *) mod_authz_dbd: fix a segmentation fault if AuthzDBDQuery is not set.\n     PR 61546.  [Lubos Uhliarik <luhliari redhat.com>]\n\n  *) mod_rewrite: Add support for starting External Rewriting Programs\n     as non-root user on UNIX systems by specifying username and group\n     name as third argument of RewriteMap directive.  [Jan Kaluza]\n\n  *) core: Rewrite the Content-Length filter to avoid excessive memory\n     consumption. Chunked responses will be generated in more cases\n     than in previous releases.  PR 61222.  [Joe Orton, Ruediger Pluem]\n\n  *) mod_ssl: Fix SessionTicket callback return value, which does seem to\n     matter with OpenSSL 1.1. [Yann Ylavic]\n\nChanges with Apache 2.4.28\n\n  *) SECURITY: CVE-2017-9798 (cve.mitre.org)\n     Corrupted or freed memory access. <Limit[Except]> must now be used in the\n     main configuration file (httpd.conf) to register HTTP methods before the\n     .htaccess files.  [Yann Ylavic]\n\n  *) event: Avoid possible blocking in the listener thread when shutting down\n     connections. PR 60956.  [Yann Ylavic]\n\n  *) mod_speling: Don't embed referer data in a link in error page.\n     PR 38923 [Nick Kew]\n\n  *) htdigest: prevent a buffer overflow when a string exceeds the allowed max\n     length in a password file. PR 61511.\n     [Luca Toscano, Hanno B\u00f6ck <hanno hboeck de>]\n\n  *) mod_proxy: loadfactor parameter can now be a decimal number (eg: 1.25).\n     [Jim Jagielski]\n\n  *) mod_proxy_wstunnel: Allow upgrade to any protocol dynamically.\n     PR 61142.\n\n  *) mod_watchdog/mod_proxy_hcheck: Time intervals can now be specified\n     down to the millisecond. Supports 'mi' (minute), 'ms' (millisecond),\n     's' (second) and 'hr' (hour!) time suffixes. [Jim Jagielski]\n\n  *) mod_http2: Fix for stalling when more than 32KB are written to a\n     suspended stream.  [Stefan Eissing]\n\n  *) build: allow configuration without APR sources.  [Jacob Champion]\n\n  *) mod_ssl, ab: Fix compatibility with LibreSSL.  PR 61184.\n     [Bernard Spil <brnrd freebsd.org>, Michael Schlenker <msc contact.de>,\n      Yann Ylavic]\n\n  *) core/log: Support use of optional \"tag\" in syslog entries.\n     PR 60525. [Ben Rubson <ben.rubson gmail.com>, Jim Jagielski]\n\n  *) mod_proxy: Fix ProxyAddHeaders merging.  [Joe Orton]\n\n  *) core: Disallow multiple Listen on the same IP:port when listener buckets\n     are configured (ListenCoresBucketsRatio > 0), consistently with the single\n     bucket case (default), thus avoiding the leak of the corresponding socket\n     descriptors on graceful restart.  [Yann Ylavic]\n\n  *) event: Avoid listener periodic wake ups by using the pollset wake-ability\n     when available.  PR 57399.  [Yann Ylavic, Luca Toscano]\n\n  *) mod_proxy_wstunnel: Fix detection of unresponded request which could have\n     led to spurious HTTP 502 error messages sent on upgrade connections.\n     PR 61283.  [Yann Ylavic]\n\nChanges with Apache 2.4.27\n\n  *) SECURITY: CVE-2017-9789 (cve.mitre.org)\n     mod_http2: Read after free. When under stress, closing many connections,\n     the HTTP/2 handling code would sometimes access memory after it has been\n     freed, resulting in potentially erratic behaviour.\n     [Stefan Eissing]\n\n  *) SECURITY: CVE-2017-9788 (cve.mitre.org)\n     mod_auth_digest: Uninitialized memory reflection.  The value placeholder\n     in [Proxy-]Authorization headers type 'Digest' was not initialized or\n     reset before or between successive key=value assignments.\n     [William Rowe]\n\n  *) COMPATIBILITY: mod_lua: Remove the undocumented exported 'apr_table'\n     global variable when using Lua 5.2 or later. This was exported as a\n     side effect from luaL_register, which is no longer supported as of\n     Lua 5.2 which deprecates pollution of the global namespace.\n     [Rainer Jung]\n\n  *) COMPATIBILITY: mod_http2: Disable and give warning when using Prefork.\n     The server will continue to run, but HTTP/2 will no longer be negotiated.\n     [Stefan Eissing]\n\n  *) COMPATIBILITY: mod_proxy_fcgi: Revert to 2.4.20 FCGI behavior for the\n     default ProxyFCGIBackendType, fixing a regression with PHP-FPM. PR 61202.\n     [Jacob Champion, Jim Jagielski]\n\n  *) mod_lua: Improve compatibility with Lua 5.1, 5.2 and 5.3.\n     PR58188, PR60831, PR61245. [Rainer Jung]\n\n  *) mod_http2: Simplify ready queue, less memory and better performance. Update\n     mod_http2 version to 1.10.7. [Stefan Eissing]\n\n  *) Allow single-char field names inadvertently disallowed in 2.4.25.\n     PR 61220. [Yann Ylavic]\n\n  *) htpasswd / htdigest: Do not apply the strict permissions of the temporary\n     passwd file to a possibly existing passwd file. PR 61240. [Ruediger Pluem]\n\n  *) core: Avoid duplicate HEAD in Allow header.\n     This is a regression in 2.4.24 (unreleased), 2.4.25 and 2.4.26.\n     PR 61207. [Christophe Jaillet]\n\nChanges with Apache 2.4.26\n\n  *) SECURITY: CVE-2017-7679 (cve.mitre.org)\n     mod_mime can read one byte past the end of a buffer when sending a\n     malicious Content-Type response header.  [Yann Ylavic]\n\n  *) SECURITY: CVE-2017-7668 (cve.mitre.org)\n     The HTTP strict parsing changes added in 2.2.32 and 2.4.24 introduced a\n     bug in token list parsing, which allows ap_find_token() to search past\n     the end of its input string. By maliciously crafting a sequence of\n     request headers, an attacker may be able to cause a segmentation fault,\n     or to force ap_find_token() to return an incorrect value.\n     [Jacob Champion]\n\n  *) SECURITY: CVE-2017-7659 (cve.mitre.org)\n     A maliciously constructed HTTP/2 request could cause mod_http2 to\n     dereference a NULL pointer and crash the server process.\n\n  *) SECURITY: CVE-2017-3169 (cve.mitre.org)\n     mod_ssl may dereference a NULL pointer when third-party modules call\n     ap_hook_process_connection() during an HTTP request to an HTTPS port.\n     [Yann Ylavic]\n\n  *) SECURITY: CVE-2017-3167 (cve.mitre.org)\n     Use of the ap_get_basic_auth_pw() by third-party modules outside of the\n     authentication phase may lead to authentication requirements being\n     bypassed.\n     [Emmanuel Dreyfus <manu netbsd.org>, Jacob Champion, Eric Covener]\n\n  *) HTTP/2 support no longer tagged as \"experimental\" but is instead considered\n     fully production ready.\n\n  *) mod_http2: Fix for possible CPU busy loop introduced in v1.10.3 where a stream may keep\n     the session in continuous check for state changes that never happen.\n     [Stefan Eissing]\n\n  *) mod_proxy_wstunnel: Add \"upgrade\" parameter to allow upgrade to other\n     protocols.  [Jean-Frederic Clere]\n\n  *) MPMs unix: Place signals handlers and helpers out of DSOs to avoid\n     a possible crash if a signal is caught during (graceful) restart.\n     PR 60487.  [Yann Ylavic]\n\n  *) mod_rewrite: When a substitution is a fully qualified URL, and the\n     scheme/host/port matches the current virtual host, stop interpreting the\n     path component as a local path just because the first component of the\n     path exists in the filesystem.  Adds RewriteOption \"LegacyPrefixDocRoot\"\n     to revert to previous behavior. PR60009.\n     [Hank Ibell <hwibell gmail.com>]\n\n  *) core: ap_parse_form_data() URL-decoding doesn't work on EBCDIC\n     platforms. PR61124. [Hank Ibell <hwibell gmail.com>]\n\n  *) ab: enable option processing for setting a custom HTTP method also for\n     non-SSL builds.  [Rainer Jung]\n\n  *) core: EBCDIC fixes for interim responses with additional headers.\n     [Eric Covener]\n\n  *) mod_env: when processing a 'SetEnv' directive, warn if the environment\n     variable name includes a '='. It is likely a configuration error.\n     PR 60249 [Christophe Jaillet]\n\n  *) Evaluate nested If/ElseIf/Else configuration blocks.\n     [Luca Toscano, Jacob Champion]\n\n  *) mod_rewrite: Add 'BNP' (backreferences-no-plus) flag to RewriteRule to\n     allow spaces in backreferences to be encoded as %20 instead of '+'.\n     [Eric Covener]\n\n  *) mod_rewrite: Add the possibility to limit the escaping to specific\n     characters in backreferences by listing them in the B flag.\n     [Eric Covener]\n\n  *) mod_substitute: Fix spurious AH01328 (Line too long) errors on EBCDIC\n     systems.  [Eric Covener]\n\n  *) mod_http2: fail requests without ERROR log in case we need to read interim\n     responses and see only garbage. This can happen if proxied servers send\n     data where none should be, e.g. a body for a HEAD request. [Stefan Eissing]\n\n  *) mod_proxy_http2: adding support for Reverse Proxy Request headers.\n     [Stefan Eissing]\n\n  *) mod_http2: fixed possible deadlock that could occur when connections were\n     terminated early with ongoing streams. Fixed possible hanger with timeout\n     on race when connection considers itself idle. [Stefan Eissing]\n\n  *) mod_http2: MaxKeepAliveRequests now limits the number of times a\n     slave connection gets reused. [Stefan Eissing]\n\n  *) mod_brotli: Add a new module for dynamic Brotli (RFC 7932) compression.\n     [Evgeny Kotkov]\n\n  *) mod_proxy_http2: Fixed bug in re-attempting proxy requests after\n     connection error. Reliability of reconnect handling improved.\n     [Stefan Eissing]\n\n  *) mod_http2: better performance, eliminated need for nested locks and\n     thread privates. Moving request setups from the main connection to the\n     worker threads. Increase number of spare connections kept.\n     [Stefan Eissing]\n\n  *) mod_http2: input buffering and dynamic flow windows for increased\n     throughput. Requires nghttp2 >= v1.5.0 features. Announced at startup\n     in mod_http2 INFO log as feature 'DWINS'. [Stefan Eissing]\n\n  *) mod_http2: h2 workers with improved scalability for better scheduling\n     performance. There are H2MaxWorkers threads created at start and the\n     number is kept constant for now. [Stefan Eissing]\n\n  *) mod_http2: obsoleted option H2SessionExtraFiles, will be ignored and\n     just log a warning. [Stefan Eissing]\n\n  *) mod_autoindex: Add IndexOptions UseOldDateFormat to allow the date\n     format from 2.2 in the Last Modified column. PR60846.\n     [Hank Ibell <hwibell gmail.com>]\n\n  *) core: Add %{REMOTE_PORT} to the expression parser. PR59938\n     [Hank Ibell <hwibell gmail.com>]\n\n  *) mod_cache: Fix a regression in 2.4.25 for the forward proxy case by\n     computing and using the same entity key according to when the cache\n     checks, loads and saves the request.\n     PR 60577.  [Yann Ylavic]\n\n  *) mod_proxy_hcheck: Don't validate timed out responses.  [Yann Ylavic]\n\n  *) mod_proxy_hcheck: Ensure thread-safety when concurrent healthchecks are\n     in use (ProxyHCTPsize > 0).  PR 60071.  [Yann Ylavic, Jim Jagielski]\n\n  *) core: %{DOCUMENT_URI} used in nested SSI expressions should point to the\n     URI originally requested by the user, not the nested documents URI. This\n     restores the behavior of this variable to match the \"legacy\" SSI parser.\n     PR60624. [Hank Ibell <hwibell gmail.com>]\n\n  *) mod_proxy_fcgi: Add ProxyFCGISetEnvIf to fixup CGI environment\n     variables just before invoking the FastCGI. [Eric Covener,\n     Jacob Champion]\n\n  *) mod_proxy_fcgi: Return to 2.4.20-and-earlier behavior of leaving\n     a \"proxy:fcgi://\" prefix in the SCRIPT_FILENAME environment variable by\n     default.  Add ProxyFCGIBackendType to allow the type of backend to be\n     specified so these kinds of fixups can be restored without impacting\n     FPM. PR60576 [Eric Covener, Jim Jagielski]\n\n  *) mod_ssl: work around leaks on (graceful) restart. [Yann Ylavic]\n\n  *) mod_ssl: Add support for OpenSSL 1.1.0. [Rainer Jung]\n\n  *) Don't set SO_REUSEPORT unless ListenCoresBucketsRatio is greater\n     than zero.  [Eric Covener]\n\n  *) mod_http2: moving session cleanup to pre_close hook to avoid races with\n     modules already shut down and slave connections still operating.\n     [Stefan Eissing]\n\n  *) mod_lua: Support for Lua 5.3\n\n  *) mod_proxy_http2: support for ProxyPreserverHost directive. [Stefan Eissing]\n\n  *) mod_http2: fix for crash when running out of memory.\n     [Robert Swiecki <robert swiecki.net>, Stefan Eissing]\n\n  *) mod_proxy_fcgi: Return HTTP 504 rather than 503 in case of proxy timeout.\n     [Luca Toscano]\n\n  *) mod_http2: not counting file buckets again stream max buffer limits.\n     Effectively transferring static files in one step from slave to master\n     connection. [Stefan Eissing]\n\n  *) mod_http2: comforting ap_check_pipeline() on slave connections\n     to facilitate reuse (see https://github.com/icing/mod_h2/issues/128).\n     [Stefan Eissing, reported by Armin Abfalterer]\n\n  *) mod_http2: http/2 streams now with state handling/transitions as defined\n     in RFC7540. Stream cleanup/connection shutdown reworked to become easier\n     to understand/maintain/debug. Added many asserts on state and cleanup\n     transitions. [Stefan Eissing]\n\n  *) mod_auth_digest: Use an anonymous shared memory segment by default,\n     preventing startup failure after unclean shutdown.  PR 54622.\n     [Jan Kaluza]\n\n  *) mod_filter: Fix AddOutputFilterByType with non-content-level filters.\n     PR 58856. [Micha Lenk <micha lenk.info>]\n\n  *) mod_watchdog: Fix semaphore leak over restarts.  [Jim Jagielski]\n\n  *) mod_http2: regression fix on PR 59348, on graceful restart, ongoing\n     streams are finished normally before the final GOAWAY is sent.\n     [Stefan Eissing, <slavko gmail.com>]\n\n  *) mod_proxy: Allow the per-request environment variable \"no-proxy\" to\n     be used as an alternative to ProxyPass /path !. This is primarily\n     to set exceptions for ProxyPass specified in <Location> context.\n     Use SetEnvIf, not SetEnv. PR 60458.  [Eric Covener]\n\n  *) mod_http2: fixes PR60599, sending proper response for conditional requests\n     answered by mod_cache. [Jeff Wheelhouse, Stefan Eissing]\n\n  *) mod_http2: rework of stream resource cleanup to avoid a crash in a close\n     of a lingering connection. Prohibit special file bucket beaming for\n     shared buckets. Files sent in stream output now use the stream pool\n     as read buffer, reducing memory footprint of connections.\n     [Yann Ylavic, Stefan Eissing]\n\n  *) mod_proxy_fcgi, mod_fcgid: Fix crashes in ap_fcgi_encoded_env_len() when\n     modules add empty environment variables to the request. PR 60275.\n     [<alex2grad AT gmail.com>]\n\n  *) mod_http2: fix for possible page fault when stream is resumed during\n     session shutdown. [sidney-j-r-m (github)]\n\n  *) mod_http2: fix for h2 session ignoring new responses while already\n     open streams continue to have data available. [Stefan Eissing]\n\n  *) mod_http2: adding support for MergeTrailers directive. [Stefan Eissing]\n\n  *) mod_http2: limiting DATA frame sizes by TLS record sizes in use on the\n     connection. Flushing outgoing frames earlier. [Stefan Eissing]\n\n  *) mod_http2: cleanup beamer registry on server reload.  PR 60510.\n     [Pavel Mateja <pavel verotel.cz>, Stefan Eissing]\n\n  *) mod_proxy_{ajp,fcgi}: Fix a possible crash when reusing an established\n     backend connection, happening with LogLevel trace2 or higher configured,\n     or at any log level with compilers not detected as C99 compliant (e.g.\n     MSVC on Windows).  [Yann Ylavic]\n\n  *) mod_ext_filter: Don't interfere with \"error buckets\" issued by other\n     modules. PR 60375.  [Eric Covener, Lubos Uhliarik]\n\n  *) mod_http2: fixes https://github.com/icing/mod_h2/issues/126 e.g. beam\n     bucket lifetime handling when data is sent over temporary pools.\n     [Stefan Eissing]\n\nChanges with Apache 2.4.25\n\n  *) Fix some build issues related to various modules.\n     [Rainer Jung]\n\nChanges with Apache 2.4.24 (not released)\n\n  *) SECURITY: CVE-2016-8740 (cve.mitre.org)\n     mod_http2: Mitigate DoS memory exhaustion via endless\n     CONTINUATION frames.\n     [Naveen Tiwari <naveen.tiwari@asu.edu> and CDF/SEFCOM at Arizona State\n     University, Stefan Eissing]\n\n  *) SECURITY: CVE-2016-2161 (cve.mitre.org)\n     mod_auth_digest: Prevent segfaults during client entry allocation when\n     the shared memory space is exhausted.\n     [Maksim Malyutin <m.malyutin dsec.ru>, Eric Covener, Jacob Champion]\n\n  *) SECURITY: CVE-2016-0736 (cve.mitre.org)\n     mod_session_crypto: Authenticate the session data/cookie with a\n     MAC (SipHash) to prevent deciphering or tampering with a padding\n     oracle attack.  [Yann Ylavic, Colm MacCarthaigh]\n\n  *) SECURITY: CVE-2016-8743 (cve.mitre.org)\n     Enforce HTTP request grammar corresponding to RFC7230 for request lines\n     and request headers, to prevent response splitting and cache pollution by\n     malicious clients or downstream proxies. [William Rowe, Stefan Fritsch]\n\n  *) Validate HTTP response header grammar defined by RFC7230, resulting\n     in a 500 error in the event that invalid response header contents are\n     detected when serving the response, to avoid response splitting and cache\n     pollution by malicious clients, upstream servers or faulty modules.\n     [Stefan Fritsch, Eric Covener, Yann Ylavic]\n\n  *) core: Mitigate [f]cgi CVE-2016-5387 \"httpoxy\" issues.\n     [Dominic Scheirlinck <dominic vendhq.com>, Yann Ylavic]\n\n  *) mod_rewrite: Limit runaway memory use by short circuiting some kinds of\n     looping RewriteRules when the local path significantly exceeds\n     LimitRequestLine.  PR 60478. [Jeff Wheelhouse <apache wheelhouse.org>]\n\n  *) mod_ratelimit: Allow for initial \"burst\" amount at full speed before\n     throttling: PR 60145 [Andy Valencia <ajv-etradanalhos vsta.org>,\n     Jim Jagielski]\n\n  *) mod_socache_memcache: Provide memcache stats to mod_status.\n     [Jim Jagielski]\n\n  *) mod_file_cache: mod_file_cache should be able to serve files that\n     haven't had a Content-Type set via e.g. mod_mime. [Eric Covener]\n\n  *) http_filters: Fix potential looping in new check_headers() due to new\n     pattern of ap_die() from http header filter. Explicitly clear the\n     previous headers and body.\n\n  *) core: Drop Content-Length header and message-body from HTTP 204 responses.\n     PR 51350 [Luca Toscano]\n\n  *) mod_proxy: Honor a server scoped ProxyPass exception when ProxyPass is\n     configured in <Location>, like in 2.2. PR 60458.\n     [Eric Covener]\n\n  *) mod_lua: Fix default value of LuaInherit directive. It should be\n     'parent-first' instead of 'none', as per documentation.  PR 60419\n     [Christophe Jaillet]\n\n  *) core: New directive HttpProtocolOptions to control httpd enforcement\n     of various RFC7230 requirements. [Stefan Fritsch, William Rowe]\n\n  *) core: Permit unencoded ';' characters to appear in proxy requests and\n     Location: response headers. Corresponds to modern browser behavior.\n     [William Rowe]\n\n  *) core: ap_rgetline_core now pulls from r->proto_input_filters.\n\n  *) core: Correctly parse an IPv6 literal host specification in an absolute\n     URL in the request line. [Stefan Fritsch]\n\n  *) core: New directive RegisterHttpMethod for registering non-standard\n     HTTP methods. [Stefan Fritsch]\n\n  *) mod_socache_memcache: Pass expiration time through to memcached. PR 55445.\n     [Faidon Liambotis <paravoid debian.org>, Joe Orton]\n\n  *) mod_cache: Use the actual URI path and query-string for identifying the\n     cached entity (key), such that rewrites are taken into account when\n     running afterwards (CacheQuickHandler off).  PR 21935.  [Yann Ylavic]\n\n  *) mod_http2: new directive 'H2EarlyHints' to enable sending of HTTP status\n     103 interim responses. Disabled by default. [Stefan Eissing]\n\n  *) mod_ssl: Fix quick renegotiation (OptRenegotiaton) with no intermediate\n     in the client certificate chain.  PR 55786.  [Yann Ylavic]\n\n  *) event: Allow to use the whole allocated scoreboard (up to ServerLimit\n     slots) to avoid scoreboard full errors when some processes are finishing\n     gracefully. Also, make gracefully finishing processes close all\n     keep-alive connections. PR 53555. [Stefan Fritsch]\n\n  *) mpm_event: Don't take over scoreboard slots from gracefully finishing\n     threads. [Stefan Fritsch]\n\n  *) mpm_event: Free memory earlier when shutting down processes.\n     [Stefan Fritsch]\n\n  *) mod_status: Display the process slot number in the async connection\n     overview. [Stefan Fritsch]\n\n  *) mod_dir: Responses that go through \"FallbackResource\" might appear to\n     hang due to unterminated chunked encoding. PR58292. [Eric Covener]\n\n  *) mod_dav: Fix a potential cause of unbounded memory usage or incorrect\n     behavior in a routine that sends <DAV:response>'s to the output filters.\n     [Evgeny Kotkov]\n\n  *) mod_http2: new directive 'H2PushResource' to enable early pushes before\n     processing of the main request starts. Resources are announced to the\n     client in Link headers on a 103 early hint response.\n     All responses with status code <400 are inspected for Link header and\n     trigger pushes accordingly. 304 still does prevent pushes.\n     'H2PushResource' can mark resources as 'critical' which gives them higher\n     priority than the main resource. This leads to preferred scheduling for\n     processing and, when content is available, will send it first. 'critical'\n     is also recognized on Link headers. [Stefan Eissing]\n\n  *) mod_proxy_http2: uris in Link headers are now mapped back to a suitable\n     local url when available. Relative uris with an absolute path are mapped\n     as well. This makes reverse proxy mapping available for resources\n     announced in this header.\n     With 103 interim responses being forwarded to the main client connection,\n     this effectively allows early pushing of resources by a reverse proxied\n     backend server. [Stefan Eissing]\n\n  *) mod_proxy_http2: adding support for newly proposed 103 status code.\n     [Stefan Eissing]\n\n  *) mpm_unix: Apache fails to start if previously crashed then restarted with\n     the same PID (e.g. in container).  PR 60261.\n     [Val <valentin.bremond gmail.com>, Yann Ylavic]\n\n  *) mod_http2: unannounced and multiple interim responses (status code < 200)\n     are parsed and forwarded to client until a final response arrives.\n     [Stefan Eissing]\n\n  *) mod_proxy_http2: improved robustness when main connection is closed early\n     by resetting all ongoing streams against the backend.\n     [Stefan Eissing]\n\n  *) mod_http2: allocators from slave connections are released earlier,\n     resulting in less overall memory use on busy, long lived connections.\n     [Stefan Eissing]\n\n  *) mod_remoteip: Pick up where we left off during a subrequest rather\n     than running with the modified XFF but original TCP address.\n     PR 49839/PR 60251\n\n  *) http: Respond with \"408 Request Timeout\" when a timeout occurs while\n     reading the request body.  [Yann Ylavic]\n\n  *) mod_http2: connection shutdown revisited: corrected edge cases on\n     shutting down ongoing streams, changed log warnings to be less noisy\n     when waiting on long running tasks. [Stefan Eissing]\n\n  *) mod_http2: changed all AP_DEBUG_ASSERT to ap_assert to have them\n     available also in normal deployments. [Stefan Eissing]\n\n  *) mod_http2/mod_proxy_http2: 100-continue handling now properly implemented\n     up to the backend. Reused HTTP/2 proxy connections with more than a second\n     not used will block request bodies until a PING answer is received.\n     Requests headers are not delayed by this, since they are repeatable in\n     case of failure. This greatly increases robustness, especially with\n     busy server and/or low keepalive connections. [Stefan Eissing]\n\n  *) mod_proxy_http2: fixed duplicate symbols with mod_http2.\n     [Stefan Eissing]\n\n  *) mod_http2: rewrite of how responses and trailers are transferred between\n     master and slave connection. Reduction of internal states for tasks\n     and streams, stability. Heuristic id generation for slave connections\n     to better keep promise of connection ids unique at given point int time.\n     Fix for mod_cgid interop in high load situations.\n     Fix for handling of incoming trailers when no request body is sent.\n     [Stefan Eissing]\n\n  *) mod_http2: fix suspended handling for streams. Output could become\n     blocked in rare cases. [Stefan Eissing]\n\n  *) mpm_winnt: Prevent a denial of service when the 'data' AcceptFilter is in\n     use by replacing it with the 'connect' filter. PR 59970. [Jacob Champion]\n\n  *) mod_cgid: Resolve a case where a short CGI response causes a subsequent\n     CGI to be killed prematurely, resulting in a truncated subsequent\n     response. [Eric Covener]\n\n  *) mod_proxy_hcheck: Set health check URI and expression correctly for health\n     check worker. PR 60038 [zdeno <zdeno@scnet.sk>]\n\n  *) mod_http2: if configured with nghttp2 1.14.0 and onward, invalid request\n     headers will immediately reset the stream with a PROTOCOL error. Feature\n     logged by module on startup as 'INVHD' in info message.\n     [Stefan Eissing]\n\n  *) mod_http2: fixed handling of stream buffers during shutdown.\n     [Stefan Eissing]\n\n  *) mod_reqtimeout: Fix body timeout disabling for CONNECT requests to avoid\n     triggering mod_proxy_connect's AH01018 once the tunnel is established.\n     [Yann Ylavic]\n\n  *) ab: Set the Server Name Indication (SNI) extension on outgoing TLS\n     connections (unless -I is specified), according to the Host header (if\n     any) or the requested URL's hostname otherwise.  [Yann Ylavic]\n\n  *) mod_proxy_fcgi: avoid loops when ProxyErrorOverride is enabled\n     and the error documents are proxied. PR 55415. [Luca Toscano]\n\n  *) mod_proxy_fcgi: read the whole FCGI response even when the content\n     has not been modified (HTTP 304) or in case of a precondition failure\n     (HTTP 412) to avoid subsequent bogus reads and confusing\n     error messages logged. [Luca Toscano]\n\n  *) mod_http2: h2 status resource follows latest draft, see\n     http://www.ietf.org/id/draft-benfield-http2-debug-state-01.txt\n     [Stefan Eissing]\n\n  *) mod_http2: handling graceful shutdown gracefully, e.g. handling existing\n     streams to the end. [Stefan Eissing]\n\n  *) mod_proxy_{http,ajp,fcgi}: don't reuse backend connections with data\n     available before the request is sent.  PR 57832.  [Yann Ylavic]\n\n  *) mod_proxy_balancer: Prevent redirect loops between workers within a\n     balancer by limiting the number of redirects to the number balancer\n     members. PR 59864 [Ruediger Pluem]\n\n  *) mod_proxy: Correctly consider error response codes by the backend when\n     processing failonstatus. PR 59869 [Ruediger Pluem]\n\n  *) mod_dav: Add dav_get_provider_name() function to obtain the name\n     of the provider from mod_dav.  [Graham Leggett]\n\n  *) mod_dav: Add support for childtags to dav_error.\n     [Jari Urpalainen <jari.urpalainen nokia.com>]\n\n  *) mod_proxy_fcgi: Fix 2.4.23 breakage for mod_rewrite per-dir and query\n     string showing up in SCRIPT_FILENAME. PR59815\n\n  *) mod_include: Fix a potential memory misuse while evaluating expressions.\n     PR59844. [Eric Covener]\n\n  *) mod_http2: new H2CopyFiles directive that changes treatment of file\n     handles in responses. Necessary in order to fix broken lifetime handling\n     in modules such as mod_wsgi.\n\n  *) mod_http2: removing timeouts on master connection while requests are\n     being processed. Requests may timeout, but the master only times out when\n     no more requests are active. [Stefan Eissing]\n\n  *) mod_http2: fixes connection flush when answering SETTINGS without any\n     stream open. [Moto Ishizawa <@summerwind>, Stefan Eissing]\n\nChanges with Apache 2.4.23\n\n  *) mod_ssl: reset client-verify state of ssl when aborting renegotiations.\n     [Erki Aring <erki@example.ee>, Stefan Eissing]\n\n  *) mod_sed: Fix 'x' command processing. [Christophe Jaillet]\n\n  *) configure: Fix ./configure edge-case failures around dependencies\n     of mod_proxy_hcheck. [William Rowe, Ruediger Pluem, Jeff Trawick]\n\nChanges with Apache 2.4.22\n\n  *) mod_http2: fix for request abort when connections drops, introduced in\n     1.5.8\n\nChanges with Apache 2.4.21\n\n  *) core: Added support for HTTP code 451. PR 58985.\n     [Yehuda Katz <yehuda ymkatz.net>, Jim Jagielski]\n\n  *) ab: Use caseless matching for HTTP tokens (e.g. content-length). PR 59111.\n     [Yann Ylavic]\n\n  *) mod_http2: more rigid error handling in DATA frame assembly, leading\n     to deterministic connection errors if assembly fails.\n     [Stefan Eissing, Pal Nilsen <https://github.com/maedox>]\n\n  *) abs: Include OPENSSL_Applink when compiling on Windows, to resolve\n     failures under Visual Studio 2015 and other mismatched MSVCRT flavors.\n     PR59630 [Jan Ehrhardt <phpdev ehrhardt.nl>]\n\n  *) mod_ssl: Add \"no_crl_for_cert_ok\" flag to SSLCARevocationCheck directive\n     to opt-in previous behaviour (2.2) with CRLs verification when checking\n     certificate(s) with no corresponding CRL.  [Yann Ylavic]\n\n  *) mpm_event, mpm_worker: Fix computation of MinSpareThreads' lower bound\n     according the number of listeners buckets.  [Yann Ylavic]\n\n  *) Add ap_cstr_casecmp[n]() - placeholder of apr_cstr_casecmp[n] functions\n     for case-insensitive C/POSIX-locale token comparison.\n     [Jim Jagielski, William Rowe, Yann Ylavic, Branko \u010cibej]\n\n  *) mod_userdir: Constify and save a few bytes in the conf pool when\n     parsing the \"UserDir\" directive. [Christophe Jaillet]\n\n  *) mod_cache: Fix (max-stale with no '=') and enforce (check\n     integers after '=') Cache-Control header parsing.\n     [Christophe Jaillet]\n\n  *) core: Add -DDUMP_INCLUDES configtest option to show the tree\n     of Included configuration files.\n     [Jacob Champion <champion.pxi gmail.com>]\n\n  *) mod_proxy_fcgi: Avoid passing a filename of proxy:fcgi:// as\n     SCRIPT_FILENAME to a FastCGI server. PR59618.\n     [Jacob Champion <champion.pxi gmail.com>]\n\n  *) mod_dav: Add dav_get_provider_name() function to obtain the name\n     of the provider from mod_dav.\n     [Jari Urpalainen <jari.urpalainen nokia.com>]\n\n  *) mod_proxy_http2: properly care for HTTP2 flow control of the frontend\n     connection is HTTP/1.1. [Patch supplied by Evgeny Kotkov]\n\n  *) mod_http2: improved cleanup of connection/streams/tasks to always\n     have deterministic order regardless of event initiating it. Addresses\n     reported crashes due to memory read after free issues.\n     [Stefan Eissing]\n\n  *) mod_ssl: Correct the interaction between SSLProxyCheckPeerCN and newer\n     SSLProxyCheckPeerName directives since release 2.4.5, such that disabling\n     either disables both, and that enabling either triggers the new, more\n     comprehensive SSLProxyCheckPeerName behavior. Only a single configuration\n     remains to enable the legacy behavior, which is to explicitly disable\n     SSLProxyCheckPeerName, and enable SSLProxyCheckPeerCN. [William Rowe]\n\n  *) mod_include: add the <!--#comment ...> syntax in order to include comments\n     in a SSI file. [Christophe Jaillet based on a suggestion from Rob]\n\n  *) mod_http2: improved event handling for suspended streams, responses\n     and window updates. [Stefan Eissing]\n\n  *) mod_proxy_hcheck: Provide for dynamic background health\n     checks on reverse proxies associated with BalancerMember\n     workers. [Jim Jagielski]\n\n  *) mod_http2: Fix async write issue that led to selection of wrong timeout\n     vs. keepalive timeout selection for idle sessions. [Stefan Eissing]\n\n  *) mod_http2: checking LimitRequestLine, LimitRequestFields and\n     LimitRequestFieldSize configurated values for incoming streams. Returning\n     HTTP status 431 for too long/many headers fields and 414 for a too long\n     pseudo header. [Stefan Eissing]\n\n  *) mod_http2: tracking conn_rec->current_thread on slave connections, so\n     that mod_lua finds the correct one. Fixes PR 59542. [Stefan Eissing]\n\n  *) mod_proxy_http2: new experimental http2 proxy module for h2: and h2c: proxy\n     urls. Part of the httpd mod_proxy framework, common settings apply.\n     Requests from the same HTTP/2 frontend connection against the same backend\n     are aggregated on a single connection.\n     [Stefan Eissing]\n\n  *) mod_http2: slave connections have conn_rec->aborted flag set when a stream\n     has been reset by the client. [Stefan Eissing]\n\n  *) mod_http2: merge of some 2.4.x adaptions re filters on slave connections.\n     Small fixes in bucket beams when forwarding file buckets. Output handling\n     on master connection uses less FLUSH and passes automatically when more\n     than half of H2StreamMaxMemSize bytes have accumulated.\n     Workaround for http: when forwarding partial file buckets to keep the\n     output filter from closing these too early. [Stefan Eissing]\n\n  *) mod_http2: elimination of fixed master connection buffer for TLS\n     connections. New scratch bucket handling optimized for TLS write sizes.\n     File bucket data read directly into scratch buffers, avoiding one\n     copy. Non-TLS connections continue to pass buckets unchanged to the core\n     filters to allow sendfile() usage. [Stefan Eissing]\n\n  *) mod_http2/mod_proxy_http2: h2_request.c is no longer shared between these\n     modules. This simplifies building on platforms such as Windows, as module\n     reference used in logging is now clear. [Stefan Eissing]\n\n  *) Scoreboard: Fix a regression in 2.4.20 that causes wrong request data\n     to be displayed on the status page. PR 59333. [Yann Ylavic, William Rowe]\n\n  *) mod_http2: fixed a bug that caused mod_proxy_http2 to be called for window\n     updates on requests it had already reported done. Added synchronization\n     on early connection/stream close that lets ongoing requests safely drain\n     their input filters.\n     [Stefan Eissing]\n\n  *) mod_http2: scoreboard updates that summarize the h2 session (and replace\n     the last request information) will only happen when the session is idle or\n     in shutdown/done phase. [Stefan Eissing]\n\n  *) mod_http2: new \"bucket beam\" technology to transport buckets across\n     threads without buffer copy. Delaying response start until flush or\n     enough body data has been accumulated. Overall significantly smaller\n     memory footprint. [Stefan Eissing]\n\n  *) core: New CGIVar directive can configure REQUEST_URI to represent the\n     current URI being processed instead of always the original request.\n     [Jeff Trawick]\n\n  *) scoreboard/status: Restore behavior of showing workers' previous Client,\n     VHost and Request values when idle, like in 2.4.18 and earlier.\n\n  *) mod_http2: r->protocol changed to \"HTTP/2.0\" (was \"HTTP/2\") as this will\n     give expected syntax in CGI's SERVER_PROTOCOL is more compatible with\n     existing major/minor handling. Fixes PR 59313.\n\n  *) mod_http2: disabling mmap for file buckets transport due to segmenation\n     faults when files change on the fly.\n\nChanges with Apache 2.4.20\n\n  *) SECURITY: CVE-2016-1546 (cve.mitre.org)\n     mod_http2: restricting number of concurrent stream workers per connection\n     if client is slow.\n\n  *) core: Do not read .htaccess if AllowOverride and AllowOverrideList\n     are \"None\". PR 58528.\n     [Michael Schlenker <msc contact.de, Ruediger Pluem, Daniel Ruggeri]\n\n  *) mod_proxy_express: Fix possible use of DB handle after close.  PR 59230.\n     [Petr <pgajdos suse.cz>]\n\n  *) core/util_script: relax alphanumeric filter of environment variable names\n     on Windows to allow '(' and ')' for passing PROGRAMFILES(X86) et.al.\n     unadulterated in 64 bit versions of Windows. PR 46751.\n     [John <john leineweb de>]\n\n  *) mod_http2: incrementing keepalives on each request started so that logging\n     %k gives increasing numbers per master http2 connection.\n     New documented variables in env, usable in custom log formats: H2_PUSH,\n     H2_PUSHED, H2_PUSHED_ON, H2_STREAM_ID and H2_STREAM_TAG.\n     [Stefan Eissing]\n\n  *) mod_http2: more efficient passing of response bodies with less contention\n     and file bucket forwarding. [Stefan Eissing]\n\n  *) mod_http2: fix for missing score board updates on request count, fix for\n     memory leak on slave connection reuse. [Stefan Eissing]\n\n  *) mod_http2: Fix build on Windows from dsp files.\n     [Stefan Eissing]\n\nChanges with Apache 2.4.19\n\n  *) mod_ssl: Add missing Upgrade/Connection headers in case of TRACE or\n     OPTIONS * requests. PR 58688. [William Rowe]\n\n  *) mod_include: Add variable DOCUMENT_ARGS, with the arguments to the\n     request for the SSI document.  [Jeff Trawick]\n\n  *) mod_authz_host: Add a new \"forward-dns\" authorization type, not relying on\n     reverse DNS lookups.  [Fabien]\n\n  *) mod_proxy_http2: new experimental http2 proxy module for h2: and h2c: proxy\n     urls. Uses backend connections for concurrent requests if frontend\n     connection is http2 as well.\n     [Stefan Eissing]\n\n  *) mod_ssl: Add hooks to allow other modules to perform processing at\n     several stages of initialization and connection handling.  See\n     mod_ssl_openssl.h.  [Jeff Trawick]\n\n  *) mod_http2: disabling PUSH when client sends GOAWAY. Slave connections are\n     reused for several requests, improved performance and better memory use.\n     [Stefan Eissing]\n\n  *) mod_rewrite: Don't implicitly URL-escape the original query string\n     when no substitution has changed it (like PR50447 but server context)\n     [Evgeny Kotkov <evgeny.kotkov visualsvn.com>]\n\n  *) mod_http2: fixes problem with wrong lifetime of file buckets on main\n     connection. [Stefan Eissing]\n\n  *) mod_http2: fixes incorrect denial of requests without :authority header.\n     [Stefan Eissing]\n\n  *) mod_reqtimeout: Prevent long response times from triggering a timeout once\n     the request has been fully read.  PR 59045.  [Yann Ylavic]\n\n  *) ap_expr: expression support for variable HTTP2=on|off. [Stefan Eissing]\n\n  *) mod_http2: give control to async mpm for keepalive timeouts only when\n     no streams are open and even if only after 1 sec delay. Under load, event\n     mpm discards connections otherwise too quickly. [Stefan Eissing]\n\n  *) mod_ssl: Don't lose track of the SSL context if an unlikely failure occurs\n     in ssl_init_ssl_connection().  [Graham Leggett]\n\n  *) mod_rewrite: Add QSL|qslast flag to allow rewrites to files with\n     literal question marks in their names. PR 58777. [Eric Covener]\n\n  *) event: use pre_connection hook to properly initialize connection state for\n     slave connections. use protocol_switch hook to initialize server config\n     early based on SNI selected vhost.\n     [Stefan Eissing]\n\n  *) hostname: Test and log useragent_host per-request across various modules,\n     including the scoreboard, expression and rewrite engines, setenvif,\n     authz_host, access_compat, custom logging, ssl and REMOTE_HOST variables.\n     PR55348  [William Rowe]\n\n  *) core: Track the useragent_host per-request when mod_remoteip or similar\n     modules track a per-request useragent_ip.  Modules should be updated\n     to inquire for ap_get_useragent_host() in place of ap_get_remote_host().\n     [William Rowe]\n\n  *) core: fix a bug in <UnDefine ...> directive processing. When used, the last\n     <Define...>'ed variable was also withdrawn. PR 59019\n     [Christophe Jaillet]\n\n  *) mod_http2: Accept-Encoding is, when present on the initiating request,\n     added to push promises. This lets compressed content work in pushes.\n     by the client. [Stefan Eissing]\n\n  *) mod_http2: fixed possible read after free when streams were cancelled early\n     by the client. [Stefan Eissing]\n\n  *) mod_http2: fixed possible deadlock during connection shutdown. Thanks to\n     @FrankStolle for reporting and getting the necessary data.\n     [Stefan Eissing]\n\n  *) mod_http2: fixed apr_uint64_t formatting in a log statement to user proper\n     APR def, thanks to @Sp1l.\n\n  *) mod_http2: number of worker threads allowed to a connection is adjusting\n     dynamically. Starting with 4, the number is doubled when streams can be\n     served without block on http/2 connection flow. The number is halfed, when\n     the server has to wait on client flow control grants.\n     This can happen with a maximum frequency of 5 times per second.\n     When a connection occupies too many workers, repeatable requests\n     (GET/HEAD/OPTIONS) are cancelled and placed back in the queue. Should that\n     not suffice and a stream is busy longer than the server timeout, the\n     connection will be aborted with error code ENHANCE_YOUR_CALM.\n     This does *not* limit the number of streams a client may open, rather the\n     number of server threads a connection might use.\n     [Stefan Eissing]\n\n  *) mod_http2: allowing link header to specify multiple \"rel\" values,\n     space-separated inside a quoted string. Prohibiting push when Link\n     parameter \"nopush\" is present.\n     [Stefan Eissing]\n\n  *) mod_http2: reworked connection state handling. Idle connections accept a\n     GOAWAY from the client without further reply. Otherwise the\n     module makes a best effort to send one last GOAWAY to the client.\n\n  *) mod_http2: the values from standard directives Timeout and KeepAliveTimeout\n     properly are applied to http/2 connections.\n     [Stefan Eissing]\n\n  *) mod_http2: idle connections are returned to async mpms. new hook\n     \"pre_close_connection\" used to send GOAWAY frame when not already done.\n     Setting event mpm server config \"by hand\" for the main connection to\n     the correct negotiated server.\n     [Stefan Eissing]\n\n  *) mod_http2: keep-alive blocking reads are done with 1 second timeouts to\n     check for MPM stopping. Will announce early GOAWAY and finish processing\n     open streams, then close.\n     [Stefan Eissing]\n\n  *) mod_http2: bytes read/written on slave connections are reported via the\n     optional mod_logio functions. Fixes PR 58871.\n\n  *) prefork: Initialize the POD when running in ONE_PROCESS (or -X) mode to\n     avoid a crash.  [Jan Kaluza, Yann Ylavic]\n\n  *) mod_ssl: When SSLVerify is disabled (NONE), don't force a renegotiation if\n     the SSLVerifyDepth applied with the default/handshaken vhost differs from\n     the one applicable with the finally selected vhost.  [Yann Ylavic]\n\n  *) core: Ensure that httpd exits with an error status when the MPM fails\n     to run.  [Yann Ylavic]\n\n  *) mod_ssl: Fix a possible memory leak on restart for custom [EC]DH params.\n     [Jan Kaluza, Yann Ylavic]\n\n  *) mod_ssl: Add SSLOCSPProxyURL to add the possibility to do all queries\n     to OCSP responders through a HTTP proxy. [Ruediger Pluem]\n\n  *) mod_proxy: Play/restore the TLS-SNI on new backend connections which\n     had to be issued because the remote closed the previous/reusable one\n     during idle (keep-alive) time.  [Yann Ylavic]\n\n  *) mod_cache_socache: Fix a possible cached entity body corruption when it\n     is received from an origin server in multiple batches and forwarded by\n     mod_proxy.  [Yann Ylavic]\n\n  *) core: Add expression support to SetHandler.\n     [Eric Covener]\n\n  *) mod_remoteip: Prevent an external proxy from presenting an internal\n     proxy. PR 55962. [Mike Rumph]\n\n  *) core: Prevent a server crash in case of an invalid CONNECT request with\n     a custom error page for status code 400 that uses server side includes.\n     PR 58929 [Ruediger Pluem]\n\n  *) mod_ssl: handle TIMEOUT on empty SSL input as non-fatal, returning\n     APR_TIMEUP and preserving connection state for later retry.\n     [Stefan Eissing]\n\n  *) mod_ssl: Save some TLS record (application data) fragmentations by\n     including the last and subsequent suitable buckets when coalescing.\n     [Yann Ylavic]\n\n  *) mod_proxy_fcgi: Suppress HTTP error 503 and message 01075,\n     \"Error dispatching request\", when the cause appears to be\n     due to the client closing the connection.\n     PR58118.  [Tobias Adolph <adolph lrz.de>]\n\n  *) mod_cgid: Message AH02550, failure to flush a response to the client,\n     is now logged at TRACE1 level to match the underlying core output filter\n     severity.  [Eric Covener]\n\n  *) mime.types: add common extension \"m4a\" for MPEG 4 Audio.\n     PR 57895 [Dylan Millikin <dylan.millikin gmail.com>]\n\n  *) Added many log numbers to log statements that had none.\n     [Rainer Jung]\n\n  *) mod_log_config: Add GlobalLog to allow a globally defined log to\n     be inherited by virtual hosts that define a CustomLog.\n     [Edward Lu]\n\n  *) mod_http2: connections how keep a \"push diary\" where hashes of already\n     pushed resources are kept. See directive H2PushDiarySize for managing this.\n     Push diaries can be initialized by clients via the \"Cache-Digest\" request\n     header. This carries a base64url encoded. compressed Golomb set as described\n     in https://datatracker.ietf.org/doc/draft-kazuho-h2-cache-digest/\n     Introduced a status handler for HTTP/2 connections, giving various counters\n     and statistics about the current connection, plus its cache digest value\n     in a JSON record. Not a replacement for more HTTP/2 in the server status.\n     Configured as\n     <Location \"/http2-status\">\n         SetHandler http2-status\n     </Location>\n     [Stefan Eissing]\n\n  *) mod_http2: Fixed flushing of last GOAWAY frame. Previously, that frame\n     did not always reach the client, causing some to fail the next request.\n     Fixed calculation of last stream id accepted as described in rfc7540.\n     Reading in KEEPALIVE state now correctly shown in scoreboard.\n     Fixed possible race in connection shutdown after review by Ylavic.\n     Fixed segfault on connection shutdown, callback ran into a semi dismantled session.\n     [Stefan Eissing]\n\n  *) mod_http2: Added support for experimental accept-push-policy draft\n     (https://tools.ietf.org/html/draft-ruellan-http-accept-push-policy-00). Clients\n     may now influence server pushes by sending accept-push-policy headers.\n     [Stefan Eissing]\n\n  *) mod_http2: new r->subprocess_env variables HTTP2 and H2PUSH, set to \"on\"\n     when available for request.\n     [Stefan Eissing]\n\n  *) mod_http2: fixed bug in input window size calculation by moving chunked\n     request body encoding into later stage of processing. Fixes PR 58825.\n     [Stefan Eissing]\n\n  *) core: new hook \"pre_close_connection\" which is run before the lingering\n     close of connections is started. This gives protocol handlers one last\n     chance to use a connection before it goes down.\n     [Stefan Eissing]\n\n  *) mod_status/scoreboard: showing connection protocol in new column, new\n     ap_update_child_status methods for updating server/description. mod_ssl\n     sets vhost negotiated by servername directly.\n     [Stefan Eissing]\n\nChanges with Apache 2.4.18\n\n  *) mod_ssl: for all ssl_engine_vars.c lookups, fall back to master connection\n     if conn_rec itself holds no valid SSLConnRec*. Fixes PR58666.\n     [Stefan Eissing]\n\n  *) mod_http2: connection level window for flow control is set to protocol\n     maximum of 2GB-1, preventing window exhaustion when sending data on many\n     streams with higher cumulative window size.\n     Reducing write frequency unless push promises need to be flushed.\n     [Stefan Eissing]\n\n  *) mod_http2: required minimum version of libnghttp2 is 1.2.1\n     [Stefan Eissing]\n\n  *) mod_proxy_fdpass: Fix AH01153 error when using the default configuration.\n     In earlier version of httpd, you can explicitly set the 'flusher' parameter\n     to 'flush' as a workaround. (i.e. flusher=flush)\n     Add documentation for the 'flusher' parameter when defining a proxy worker.\n     [Christophe Jaillet]\n\n  *) mod_ssl: For the \"SSLStaplingReturnResponderErrors off\" case, make sure\n     to only staple responses with certificate status \"good\". [Kaspar Brand]\n\n  *) mod_http2: new directive 'H2PushPriority' to allow priority specifications\n     on server pushed streams according to their content-type.\n     [Stefan Eissing]\n\n  *) mod_http2: fixes crash on connection abort for a busy connection.\n     fixes crash on a request that did not produce any response.\n     [Stefan Eissing]\n\n  *) mod_http2: trailers are sent after response body if set in request_rec\n     trailers_out before the end-of-request bucket is sent through the\n     output filters. [Stefan Eissing]\n\n  *) mod_http2: incoming trailers (headers after request body) are properly\n     forwarded to the processing engine. [Stefan Eissing]\n\n  *) mod_http2: new directive 'H2Push' to en-/disable HTTP/2 server\n     pushes a server/virtual host. Pushes are initiated by the presence\n     of 'Link:' headers with relation 'preload' on a response. [Stefan Eissing]\n\n  *) mod_http2: write performance of http2 improved for larger resources,\n     especially static files. [Stefan Eissing]\n\n  *) core: if the first HTTP/1.1 request on a connection goes to a server that\n     prefers different protocols, these protocols are announced in a Upgrade:\n     header on the response, mentioning the preferred protocols.\n     [Stefan Eissing]\n\n  *) mod_http2: new directives 'H2TLSWarmUpSize' and 'H2TLSCoolDownSecs'\n     to control TLS record sizes during connection lifetime.\n     [Stefan Eissing]\n\n  *) mod_http2: new directive 'H2ModernTLSOnly' to enforce security\n     requirements of RFC 7540 on TLS connections. [Stefan Eissing]\n\n  *) core: add ap_get_protocol_upgrades() to retrieve the list of protocols\n     that a client could possibly upgrade to. Use in first request on a\n     connection to announce protocol choices. [Stefan Eissing]\n\n  *) mod_http2: reworked deallocation on connection shutdown and worker\n     abort. Separate parent pool for all workers. worker threads are joined\n     on planned worker shutdown. [Yann Ylavic, Stefan Eissing]\n\n  *) mod_ssl: when receiving requests for other virtual hosts than the handshake\n     server, the SSL parameters are checked for equality. With equal\n     configuration, requests are passed for processing. Any change will trigger\n     the old behaviour of \"421 Misdirected Request\".\n     SSL now remembers the cipher suite that was used for the last handshake.\n     This is compared against for any vhost/directory cipher specification.\n     Detailed examination of renegotiation is only done when these do not\n     match.\n     Renegotiation is 403ed when a master connection is present. Exact reason\n     is given additionally in a request note. [Stefan Eissing]\n\n  *) mod_ssl: Make the output filter more friendly with deferred write and\n     response pipelining. [Yann Ylavic, Joe Orton]\n\n  *) core: Fix scoreboard crash (SIGBUS) on hardware requiring strict 64bit\n     alignment (SPARC64, PPC64).  [Yann Ylavic]\n\n  *) mod_cache: Accept HT (Horizontal Tab) when parsing cache related header\n     fields as described in RFC7230. [Christophe Jaillet]\n\n  *) core/util_script: making REDIRECT_URL a full URL is now opt-in\n     via new 'QualifyRedirectURL' directive.\n\n  *) core: Limit to ten the number of tolerated empty lines between request,\n     and consume them before the pipelining check to avoid possible response\n     delay when reading the next request without flushing.  [Yann Ylavic]\n\n  *) mod_ssl: Extend expression parser registration to support ssl variables\n     in any expression using mod_rewrite syntax \"%{SSL:VARNAME}\" or function\n     syntax \"ssl(VARNAME)\". [Rainer Jung]\n\nChanges with Apache 2.4.17\n\n  *) mod_http2: added donated HTTP/2 implementation via core module. Similar\n     configuration options to mod_ssl. [Stefan Eissing]\n\n  *) mod_proxy: don't recycle backend announced \"Connection: close\" connections\n     to avoid reusing it should the close be effective after some new request\n     is ready to be sent.  [Yann Ylavic]\n\n  *) mod_substitute: Allow to configure the patterns merge order with the new\n     SubstituteInheritBefore on|off directive.  PR 57641\n     [Marc.Stern <Marc.Stern approach.be>, Yann Ylavic, William Rowe]\n\n  *) mod_proxy: Fix ProxySourceAddress binding failure with AH00938.\n     PR 56687.  [Arne de Bruijn <apache arbruijn.dds.nl>\n\n  *) mod_ssl: Support compilation against libssl built with OPENSSL_NO_SSL3,\n     and change the compiled-in default for SSL[Proxy]Protocol to \"all -SSLv3\",\n     in accordance with RFC 7568. PR 58349, PR 57120. [Kaspar Brand]\n\n  *) mod_ssl: append :!aNULL:!eNULL:!EXP to the cipher string settings,\n     instead of prepending !aNULL:!eNULL:!EXP: (as was the case in 2.4.7\n     and later). Enables support for configuring the SUITEB* cipher\n     strings introduced in OpenSSL 1.0.2. PR 58213. [Kaspar Brand]\n\n  *) mod_ssl: Add support for extracting the msUPN and dnsSRV forms\n     of subjectAltName entries of type \"otherName\" into\n     SSL_{CLIENT,SERVER}_SAN_OTHER_{msUPN,dnsSRV}_n environment\n     variables. Addresses PR 58020. [Jan Pazdziora <jpazdziora redhat.com>,\n     Kaspar Brand]\n\n  *) mod_logio: Fix logging of %^FB (time to first byte) on the first request on\n     an SSL connection.  PR 58454.\n     [Konstantin J. Chernov <k.j.chernov gmail.com>]\n\n  *) mod_cache: r->err_headers_out is not merged into\n     r->headers when mod_cache is enabled and the response\n     is cached for the first time. [Edward Lu]\n\n  *) mod_slotmem_shm: Fix slots/SHM files names on restart for systems that\n     can't create new (clear) slots while previous children gracefully stopping\n     still use the old ones (e.g. Windows, OS2). mod_proxy_balancer failed to\n     restart whenever the number of configured balancers/members changed during\n     restart.  PR 58024.  [Yann Ylavic]\n\n  *) core/util_script: make REDIRECT_URL a full URL.  PR 57785. [Nick Kew]\n\n  *) MPMs: Support SO_REUSEPORT to create multiple duplicated listener\n     records for scalability. [Yingqi Lu <yingqi.lu@intel.com>,\n     Jeff Trawick, Jim Jagielski, Yann Ylavic]\n\n  *) mod_alias: Introduce expression parser support for Alias, ScriptAlias\n     and Redirect. Limit Redirect expressions to directory (Location) context\n     and redirect statuses (implicit or explicit).\n     [Graham Leggett, Yann Ylavic, Ruediger Pluem]\n\n  *) mod_proxy: Fix a race condition that caused a failed worker to be retried\n     before the retry period is over. [Ruediger Pluem]\n\n  *) mod_autoindex: Allow autoindexes when neither mod_dir nor mod_mime are\n     loaded. [Eric Covener]\n\n  *) mod_rewrite:  Allow cookies set by mod_rewrite to contain ':' by accepting\n     ';' as an alternate separator.  PR47241.\n     [<bugzilla schermesser com>, Eric Covener]\n\n  *) apxs: Add HTTPD_VERSION and HTTPD_MMN to the variables available with\n     apxs -q. PR58202. [Daniel Shahaf <danielsh apache.org>]\n\n  *) mod_rewrite: Avoid a crash when lacking correct DB access permissions\n     when using RewriteMap with MapType dbd or fastdbd.  [Christophe Jaillet]\n\n  *) mod_authz_dbd: Avoid a crash when lacking correct DB access permissions.\n     PR 57868. [Jose Kahan <jose w3.org>, Yann Ylavic]\n\n  *) mod_socache_memcache: Add the 'MemcacheConnTTL' directive to control how\n     long to keep idle connections with the memcache server(s).\n     Change default value from 600 usec (!) to 15 sec. PR 58091\n     [Christophe Jaillet]\n\n  *) mod_dir: Prevent the internal identifier \"httpd/unix-directory\" from\n     appearing as a Content-Type response header when requests for a directory\n     are rewritten by mod_rewrite. [Eric Covener]\n\nChanges with Apache 2.4.16\n\n  *) http: Fix LimitRequestBody checks when there is no more bytes to read.\n     [Michael Kaufmann <mail michael-kaufmann.ch>]\n\n  *) mod_alias: Revert expression parser support for Alias, ScriptAlias\n     and Redirect due to a regression (introduced in 2.4.13, not released).\n\n  *) mod_reqtimeout: Don't let pipelining checks and keep-alive times interfere\n     with the timeouts computed for subsequent requests.  PR 56729.\n     [Eric Covener, Yann Ylavic]\n\n  *) core: Avoid a possible truncation of the faulty header included in the\n     HTML response when LimitRequestFieldSize is reached.  [Yann Ylavic]\n\n  *) mod_ldap: In some case, LDAP_NO_SUCH_ATTRIBUTE could be returned instead\n     of an error during a compare operation. [Eric Covener]\n\nChanges with Apache 2.4.15 (not released)\n\n  *) mod_ext_filter, mod_charset_lite: Avoid inadvertent filtering of protocol\n     data during read of chunked request bodies. PR 58049.\n     [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_ldap: Stop leaking LDAP connections when 'LDAPConnectionPoolTTL 0'\n     is configured.  PR 58037.  [Ted Phelps <phelps gnusto.com>]\n\n  *) core: Allow spaces after chunk-size for compatibility with implementations\n     using a pre-filled buffer.  [Yann Ylavic, Jeff Trawick]\n\n  *) mod_ssl: Remove deprecated SSLCertificateChainFile warning.\n     [Yann Ylavic]\n\nChanges with Apache 2.4.14 (not released)\n\n  *) SECURITY: CVE-2015-3183 (cve.mitre.org)\n     core: Fix chunk header parsing defect.\n     Remove apr_brigade_flatten(), buffering and duplicated code from\n     the HTTP_IN filter, parse chunks in a single pass with zero copy.\n     Limit accepted chunk-size to 2^63-1 and be strict about chunk-ext\n     authorized characters.  [Graham Leggett, Yann Ylavic]\n\n  *) SECURITY: CVE-2015-3185 (cve.mitre.org)\n     Replacement of ap_some_auth_required (unusable in Apache httpd 2.4)\n     with new ap_some_authn_required and ap_force_authn hook.  [Ben Reser]\n\nChanges with Apache 2.4.13 (not released)\n\n  *) SECURITY: CVE-2015-0253 (cve.mitre.org)\n     core: Fix a crash with ErrorDocument 400 pointing to a local URL-path\n     with the INCLUDES filter active, introduced in 2.4.11. PR 57531.\n     [Yann Ylavic]\n\n  *) SECURITY: CVE-2015-0228 (cve.mitre.org)\n     mod_lua: A maliciously crafted websockets PING after a script\n     calls r:wsupgrade() can cause a child process crash.\n     [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_proxy: Don't put the worker in error state for 500 or 503 errors\n     returned by the backend unless failonstatus is configured to.  PR 56925.\n     [Yann Ylavic]\n\n  *) core: Don't lowercase the argument to SetHandler if it begins with\n     \"proxy:unix\". PR 57968. [Eric Covener]\n\n  *) mod_ssl OCSP Stapling: Don't block initial handshakes while refreshing\n     the OCSP response for a different certificate.  mod_ssl has an additional\n     global mutex, \"ssl-stapling-refresh\".  PR 57131 (partial fix).\n     [Jeff Trawick]\n\n  *) mod_authz_dbm: Fix crashes when \"dbm-file-group\" is used and\n     authz modules were loaded in the \"wrong\" order.  [Joe Orton]\n\n  *) mod_authn_dbd, mod_authz_dbd, mod_session_dbd, mod_rewrite: Fix lifetime\n     of DB lookup entries independently of the selected DB engine.  PR 46421.\n     [Steven whitson <steven.whitson gmail com>, Jan Kaluza, Yann Ylavic].\n\n  *) In alignment with RFC 7525, the default recommended SSLCipherSuite\n     and SSLProxyCipherSuite now exclude RC4 as well as MD5. Also, the\n     default recommended SSLProtocol and SSLProxyProtocol directives now\n     exclude SSLv3. Existing configurations must be adjusted by the\n     administrator. [William Rowe]\n\n  *) mod_ssl: Add support for extracting subjectAltName entries of type\n     rfc822Name and dNSName into SSL_{CLIENT,SERVER}_SAN_{Email,DNS}_n\n     environment variables. Also addresses PR 57207. [Kaspar Brand]\n\n  *) dav_validate_request: avoid validating locks and ETags when there are\n     no If headers providing them on a resource we aren't modifying.\n     [Ben Reser]\n\n  *) mod_proxy_scgi: ProxySCGIInternalRedirect now allows an alternate\n     response header to be used by the application, for when the application\n     or framework is unable to return Location in the internal-redirect\n     form.  [Jeff Trawick]\n\n  *) core: Cleanup the request soon/even if some output filter fails to\n     handle the EOR bucket.  [Yann Ylavic]\n\n  *) mpm_event: Allow for timer events duplicates. [Jim Jagielski, Yann Ylavic]\n\n  *) mod_proxy, mod_ssl, mod_cache_socache, mod_socache_*: Support machine\n     readable server-status produced when using the \"?auto\" query string.\n     [Rainer Jung]\n\n  *) mod_status: Add more data to machine readable server-status produced\n     when using the \"?auto\" query string.  [Rainer Jung]\n\n  *) mod_ssl: Check for the Entropy Gathering Daemon (EGD) availability at\n     configure time (RAND_egd), and complain if SSLRandomSeed requires using\n     it otherwise.  [Bernard Spil <pil.oss gmail com>, Stefan Sperling,\n     Kaspar Brand]\n\n  *) mod_ssl: make sure to consistently output SSLCertificateChainFile\n     deprecation warnings, when encountered in a VirtualHost block.\n     [Falco Schwarz <hiding falco.me>]\n\n  *) mod_log_config: Add \"%{UNIT}T\" format to output request duration in\n     seconds, milliseconds or microseconds depending on UNIT (\"s\", \"ms\", \"us\").\n     [Ben Reser, Rainer Jung]\n\n  *) Allow FallbackResource to work when a directory is requested and\n     there is no autoindex nor DirectoryIndex.\n     [Jack <tjerk.meesters gmail.com>, Eric Covener]\n\n  *) mod_proxy_wstunnel: Bypass the handler while the connection is not\n     upgraded to WebSocket, so that other modules can possibly take over\n     the leading HTTP requests.  [Yann Ylavic]\n\n  *) mod_http: Fix incorrect If-Match handling. PR 57358\n     [Kunihiko Sakamoto <ksakamoto google.com>]\n\n  *) mod_ssl: Add a warning if protocol given in SSLProtocol or SSLProxyProtocol\n     will override other parameters given in the same directive. This could be\n     a missing + or - prefix.  PR 52820 [Christophe Jaillet]\n\n  *) core, modules: Avoid error response/document handling by the core if some\n     handler or input filter already did it while reading the request (causing\n     a double response body).  [Yann Ylavic]\n\n  *) mod_proxy_ajp: Fix client connection errors handling and logged status\n     when it occurs.  PR 56823.  [Yann Ylavic]\n\n  *) mod_proxy: Use the correct server name for SNI in case the backend\n     SSL connection itself is established via a proxy server.\n     PR 57139 [Szabolcs Gyurko <szabolcs gyurko.org>]\n\n  *) mod_ssl: Fix possible crash when loading server certificate constraints.\n     PR 57694. [Paul Spangler <paul.spangler ni com>, Yann Ylavic]\n\n  *) build: Don't load both mod_cgi and mod_cgid in the default configuration\n     if they're both built.  [olli hauer <ohauer gmx.de>]\n\n  *) mod_logio: Add LogIOTrackTTFB and %^FB logformat to log the time\n     taken to start writing response headers. [Eric Covener]\n\n  *) mod_ssl: Avoid compilation errors with LibreSSL related to\n     the use of ENGINE_CTRL_CHIL_SET_FORKCHECK.\n     [Stuart Henderson <sthen openbsd.org>]\n\n  *) mod_proxy_http: Use the \"Connection: close\" header for requests to\n     backends not recycling connections (disablereuse), including the default\n     reverse and forward proxies.  [Yann Ylavic]\n\n  *) mod_proxy: Add ap_connection_reusable() for checking if a connection\n     is reusable as of this point in processing.  [Jeff Trawick]\n\n  *) mod_proxy_wstunnel: Avoid an empty response by failing with 502 (Bad\n     Gateway) when no response is ever received from the backend.\n     [Jan Kaluza]\n\n  *) core_filters: Restore/disable TCP_NOPUSH option after non-blocking\n     sendfile.  PR 53253.  [Yann Ylavic]\n\n  *) mod_buffer: Forward flushed input data immediately and avoid (unlikely)\n     access to freed memory. [Yann Ylavic, Christophe Jaillet]\n\n  *) core: Add CGIPassAuth directive to control whether HTTP authorization\n     headers are passed to scripts as CGI variables.  PR 56855.  [Jeff\n     Trawick]\n\n  *) core: Initialize scoreboard's used optional functions on graceful restarts\n     to avoid a crash when relocation occurs.  PR 57177.  [Yann Ylavic]\n\n  *) mod_dav: Avoid a potential integer underflow in the lock timeout value sent\n     back to a client. The answer to a LOCK request could be an extremely large\n     integer if the time needed to lock the resource was longer that the\n     requested timeout given in the LOCK request. In such a case, we now answer\n     \"Second-0\".  PR55420\n     [Christophe Jaillet]\n\n  *) mod_cgid: Within the first minute of a server start or restart,\n     allow mod_cgid to retry connecting to its daemon process. Previously,\n     'No such file or directory: unable to connect to cgi daemon...' could\n     be logged without an actual retry. PR57685.\n     [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_proxy: Use the original (non absolute) form of the request-line's URI\n     for requests embedded in CONNECT payloads used to connect SSL backends via\n     a ProxyRemote forward-proxy.  PR 55892.  [Hendrik Harms <hendrik.harms\n     gmail com>, William Rowe, Yann Ylavic]\n\n  *) http: Make ap_die() robust against any HTTP error code and not modify\n     response status (finally logged) when nothing is to be done. PR 56035.\n     [Yann Ylavic]\n\n  *) mod_proxy_connect/wstunnel: If both client and backend sides get readable\n     at the same time, don't lose errors occurring while forwarding on the first\n     side when none occurs next on the other side, and abort.  [Yann Ylavic]\n\n  *) mod_rewrite: Improve relative substitutions in per-directory/htaccess\n     context for directories found by mod_userdir and mod_alias.  These no\n     longer require RewriteBase to be specified. [Eric Covener]\n\n  *) mod_proxy_http: Don't expect the backend to ack the \"Connection: close\" to\n     finally close those not meant to be kept alive by SetEnv proxy-nokeepalive\n     or force-proxy-request-1.0.  [Yann Ylavic]\n\n  *) core: If explicitly configured, use the KeepaliveTimeout value of the\n     virtual host which handled the latest request on the connection, or by\n     default the one of the first virtual host bound to the same IP:port.\n     PR56226.  [Yann Ylavic]\n\n  *) mod_lua: After a r:wsupgrade(), mod_lua was not properly\n     responding to a websockets PING but instead invoking the specified\n     script. PR57524. [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_ssl: Add the SSL_CLIENT_CERT_RFC4523_CEA variable, which provides\n     a combination of certificate serialNumber and issuer as defined by\n     CertificateExactMatch in RFC4523. [Graham Leggett]\n\n  *) core: Add expression support to ErrorDocument. Switch from a fixed\n     sized 664 byte array per merge to a hash table. [Graham Leggett]\n\n  *) ab: Add missing longest request (100%) to CSV export.\n     [Marcin Fabrykowski <bugzilla fabrykowski.pl>]\n\n  *) mod_macro: Clear macros before initialization to avoid use-after-free\n     on startup or restart when the module is linked statically. PR 57525\n     [apache.org tech.futurequest.net, Yann Ylavic]\n\n  *) mod_alias: Introduce expression parser support for Alias, ScriptAlias\n     and Redirect. [Graham Leggett]\n\n  *) mod_ssl: 'SSLProtocol ALL' was being ignored in virtual host context.\n     PR 57100.  [Michael Kaufmann <apache-bugzilla michael-kaufmann.ch>,\n     Yann Ylavic]\n\n  *) mpm_event: Avoid access to the scoreboard from the connection while\n     it is suspended (waiting for events).  [Eric Covener, Jeff Trawick]\n\n  *) mod_ssl: Fix renegotiation failures redirected to an ErrorDocument.\n     PR 57334.  [Yann Ylavic].\n\n  *) mod_deflate: A misplaced check prevents limiting small bodies with the\n     new inflate limits. PR56872. [Edward Lu, Eric Covener, Yann Ylavic]\n\n  *) mod_proxy_ajp: Forward SSL protocol name (SSLv3, TLSv1.1 etc.) as a\n     request attribute to the backend. Recent Tomcat versions will extract\n     it and provide it as a servlet request attribute named\n     \"org.apache.tomcat.util.net.secure_protocol_version\". [Rainer Jung]\n\n  *) core: Optimize string concatenation in expression parser when evaluating\n     a string expression. [Rainer Jung]\n\n  *) acinclude.m4: Generate #LoadModule directive in default httpd.conf for\n     every --enable-mpms-shared. PR 53882.  [olli hauer <ohauer gmx.de>,\n     Yann Ylavic]\n\n  *) mod_authn_dbd: Fix the error message logged in case of error while querying\n     the database. This is associated to AH01656 and AH01661. [Christophe Jaillet]\n\n  *) mod_authz_groupfile: Reduce the severity of AH01667 from ERROR to DEBUG,\n     because it may be evaluated inside <RequireAny>. PR55523. [Eric Covener]\n\n  *) mod_ssl: Fix small memory leak during initialization when ECDH is used.\n     [Jan Kaluza]\n\nChanges with Apache 2.4.12\n\n  *) mpm_winnt: Accept utf-8 (Unicode) service names and descriptions for\n     internationalization.  [William Rowe]\n\n  *) mpm_winnt: Normalize the error and status messages emitted by service.c,\n     the service control interface for Windows.  [William Rowe]\n\n  *) configure: Fix --enable-v4-mapped configuration on *BSD. PR 53824.\n     [ olli hauer <ohauer gmx.de>, Yann Ylavic ]\n\n  *) Reverted <DirectoryMatch > behavior regression introduced in 2.4.11\n     (not released).\n\nChanges with Apache 2.4.11 (not released)\n\n  *) SECURITY: CVE-2014-3583 (cve.mitre.org)\n     mod_proxy_fcgi: Fix a potential crash due to buffer over-read, with\n     response headers' size above 8K.  [Yann Ylavic, Jeff Trawick]\n\n  *) SECURITY: CVE-2014-3581 (cve.mitre.org)\n     mod_cache: Avoid a crash when Content-Type has an empty value.\n     PR 56924.  [Mark Montague <mark catseye.org>, Jan Kaluza]\n\n  *) SECURITY: CVE-2014-8109 (cve.mitre.org)\n     mod_lua: Fix handling of the Require line when a LuaAuthzProvider is\n     used in multiple Require directives with different arguments.\n     PR57204 [Edward Lu <Chaosed0 gmail.com>]\n\n  *) SECURITY: CVE-2013-5704 (cve.mitre.org)\n     core: HTTP trailers could be used to replace HTTP headers\n     late during request processing, potentially undoing or\n     otherwise confusing modules that examined or modified\n     request headers earlier.  Adds \"MergeTrailers\" directive to restore\n     legacy behavior.  [Edward Lu, Yann Ylavic, Joe Orton, Eric Covener]\n\n  *) mod_ssl: New directive SSLSessionTickets (On|Off).\n     The directive controls the use of TLS session tickets (RFC 5077),\n     default value is \"On\" (unchanged behavior).\n     Session ticket creation uses a random key created during web\n     server startup and recreated during restarts. No other key\n     recreation mechanism is available currently. Therefore using session\n     tickets without restarting the web server with an appropriate frequency\n     (e.g. daily) compromises perfect forward secrecy. [Rainer Jung]\n\n  *) mod_proxy_fcgi: Provide some basic alternate options for specifying\n     how PATH_INFO is passed to FastCGI backends by adding significance to\n     the value of proxy-fcgi-pathinfo. PR 55329. [Eric Covener]\n\n  *) mod_proxy_fcgi: Enable UDS backends configured with SetHandler/RewriteRule\n     to opt-in to connection reuse and other Proxy options via explicitly\n     declared \"proxy workers\" (<Proxy unix:... enablereuse=on max=...)\n     [Eric Covener]\n\n  *) mod_proxy: Add \"enablereuse\" option as the inverse of \"disablereuse\".\n     [Eric Covener]\n\n  *) mod_proxy_fcgi: Enable opt-in to TCP connection reuse by explicitly\n     setting proxy option disablereuse=off. [Eric Covener] PR 57378.\n\n  *) event: Update the internal \"connection id\" when requests\n     move from thread to thread. Reuse can confuse modules like\n     mod_cgid. PR 57435. [Michael Thorpe <mike gistnet.com>]\n\n  *) mod_proxy_fcgi: Remove proxy:balancer:// prefix from SCRIPT_FILENAME\n     passed to fastcgi backends. [Eric Covener]\n\n  *) core: Configuration files with long lines and continuation characters\n     are not read properly. PR 55910. [Manuel Mausz <manuel-as mausz.at>]\n\n  *) mod_include: the 'env' function was incorrectly handled as 'getenv' if the\n     leading 'e' was written in upper case in <!--#if expr=\"...\" -->\n     statements. [Christophe Jaillet]\n\n  *) split-logfile: Fix perl error:  'Can't use string (\"example.org:80\")\n     as a symbol ref while \"strict refs\"'. PR 56329.\n     [Holger Mauermann <mauermann gmail.com>]\n\n  *) mod_proxy: Prevent ProxyPassReverse from doing a substitution when\n     the URL parameter interpolates to an empty string. PR 56603.\n     [<ajprout hotmail.com>]\n\n  *) core: Fix -D[efined] or <Define>[d] variables lifetime across restarts.\n     PR 57328.  [Armin Abfalterer <a.abfalterer gmail.com>, Yann Ylavic].\n\n  *) mod_proxy: Preserve original request headers even if they differ\n     from the ones to be forwarded to the backend. PR 45387.\n     [Yann Ylavic]\n\n  *) mod_ssl: dump SSL IO/state for the write side of the connection(s),\n     like reads (level TRACE4). [Yann Ylavic]\n\n  *) mod_proxy_fcgi: Ignore body data from backend for 304 responses. PR 57198.\n     [Jan Kaluza]\n\n  *) mod_ssl: Do not crash when looking up SSL related variables during\n     expression evaluation on non SSL connections. PR 57070  [Ruediger Pluem]\n\n  *) mod_proxy_ajp: Fix handling of the default port (8009) in the\n     ProxyPass and <Proxy> configurations.  PR 57259.  [Yann Ylavic]\n\n  *) mpm_event: Avoid a possible use after free when notifying the end of\n     connection during lingering close.  PR 57268.  [Eric Covener, Yann Ylavic]\n\n  *) mod_ssl: Fix recognition of OCSP stapling responses that are encoded\n     improperly or too large.  [Jeff Trawick]\n\n  *) core: Add ap_log_data(), ap_log_rdata(), etc. for logging buffers.\n     [Jeff Trawick]\n\n  *) mod_proxy_fcgi, mod_authnz_fcgi: stop reading the response and issue an\n     error when parsing or forwarding the response fails. [Yann Ylavic]\n\n  *) mod_ssl: Fix a memory leak in case of graceful restarts with OpenSSL >= 0.9.8e\n     PR 53435 [tadanori <tadanori2007 yahoo.com>, Sebastian Wiedenroth <wiedi frubar.net>]\n\n  *) mod_proxy_connect: Don't issue AH02447 on sockets hangups, let the read\n     determine whether it is a normal close or a real error. PR 57168. [Yann\n     Ylavic]\n\n  *) mod_proxy_wstunnel: abort backend connection on polling error to avoid\n     further processing.  [Yann Ylavic]\n\n  *) core: Support custom ErrorDocuments for HTTP 501 and 414 status codes.\n     PR 57167 [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_proxy_connect: Fix ProxyRemote to https:// backends on EBCDIC\n     systems. PR 57092 [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_cache: Avoid a 304 response to an unconditional request when an AH00752\n     CacheLock error occurs during cache revalidation. [Eric Covener]\n\n  *) mod_ssl: Move OCSP stapling information from a per-certificate store to\n     a per-server hash. PR 54357, PR 56919. [Alex Bligh <alex alex.org.uk>,\n     Yann Ylavic, Kaspar Brand]\n\n  *) mod_cache_socache: Change average object size hint from 32 bytes to\n     2048 bytes.  [Rainer Jung]\n\n  *) mod_cache_socache: Add cache status to server-status.  [Rainer Jung]\n\n  *) event: Fix worker-listener deadlock in graceful restart.\n     PR 56960.\n\n  *) Concat strings at compile time when possible. PR 53741.\n\n  *) mod_substitute: Restrict configuration in .htaccess to\n     FileInfo as documented.  [Rainer Jung]\n\n  *) mod_substitute: Make maximum line length configurable.  [Rainer Jung]\n\n  *) mod_substitute: Fix line length limitation in case of regexp plus flatten.\n     [Rainer Jung]\n\n  *) mod_proxy: Truncated character worker names are no longer fatal\n     errors. PR53218. [Jim Jagielski]\n\n  *) mod_dav: Set r->status_line in dav_error_response. PR 55426.\n\n  *) mod_proxy_http, mod_cache: Avoid (unlikely) accesses to freed memory.\n     [Yann Ylavic, Christophe Jaillet]\n\n  *) http_protocol: fix logic in ap_method_list_(add|remove) in order:\n       - to correctly reset bits\n       - not to modify the 'method_mask' bitfield unnecessarily\n     [Christophe Jaillet]\n\n  *) mod_slotmem_shm: Increase log level for some originally debug messages.\n     [Jim Jagielski]\n\n  *) mod_ldap: In 2.4.10, some LDAP searches or comparisons might be done with\n     the wrong credentials when a backend connection is reused.\n     [Eric Covener]\n\n  *) mod_macro: Add missing APLOGNO for some Warning log messages.\n     [Christophe Jaillet]\n\n  *) mod_cache: Avoid sending 304 responses during failed revalidations\n     PR56881. [Eric Covener]\n\n  *) mod_status: Honor client IP address using mod_remoteip. PR 55886.\n     [Jim Jagielski]\n\n  *) cmake-based build for Windows: Fix incompatibility with cmake 2.8.12\n     and later.  PR 56615.  [Chuck Liu <cliu81 gmail.com>, Jeff Trawick]\n\n  *) mod_ratelimit: Drop severity of AH01455 and AH01457 (ap_pass_brigade\n     failed) messages from ERROR to TRACE1.  Other filters do not bother\n     re-reporting failures from lower level filters.  PR56832.  [Eric Covener]\n\n  *) core: Avoid useless warning message when parsing a section guarded by\n     <IfDefine foo> if $(foo) is used within the section.\n     PR 56503 [Christophe Jaillet]\n\n  *) mod_proxy_fcgi: Fix faulty logging of large amounts of stderr from the\n     application.  PR 56858.  [Manuel Mausz <manuel-asf mausz.at>]\n\n  *) mod_proxy_http: Proxy responses with error status and\n     \"ProxyErrorOverride On\" hang until proxy timeout.\n     PR53420 [Rainer Jung]\n\n  *) mod_log_config: Allow three character log formats to be registered. For\n     backwards compatibility, the first character of a three-character format\n     must be the '^' (caret) character.  [Eric Covener]\n\n  *) mod_lua: Don't quote Expires and Path values. PR 56734.\n     [Keith Mashinter, <kmashint yahoo com>]\n\n  *) mod_authz_core: Allow <AuthzProviderAlias>'es to be seen from auth\n     stanzas under virtual hosts. PR 56870. [Eric Covener]\n\nChanges with Apache 2.4.10\n\n  *) SECURITY: CVE-2014-0117 (cve.mitre.org)\n     mod_proxy: Fix crash in Connection header handling which allowed a denial\n     of service attack against a reverse proxy with a threaded MPM.\n     [Ben Reser]\n\n  *) SECURITY: CVE-2014-3523 (cve.mitre.org)\n     Fix a memory consumption denial of service in the WinNT MPM, used in all\n     Windows installations. Workaround: AcceptFilter <protocol> {none|connect}\n     [Jeff Trawick]\n\n  *) SECURITY: CVE-2014-0226 (cve.mitre.org)\n     Fix a race condition in scoreboard handling, which could lead to\n     a heap buffer overflow.  [Joe Orton, Eric Covener]\n\n  *) SECURITY: CVE-2014-0118 (cve.mitre.org)\n     mod_deflate: The DEFLATE input filter (inflates request bodies) now\n     limits the length and compression ratio of inflated request bodies to\n     avoid denial of service via highly compressed bodies.  See directives\n     DeflateInflateLimitRequestBody, DeflateInflateRatioLimit,\n     and DeflateInflateRatioBurst. [Yann Ylavic, Eric Covener]\n\n  *) SECURITY: CVE-2014-0231 (cve.mitre.org)\n     mod_cgid: Fix a denial of service against CGI scripts that do\n     not consume stdin that could lead to lingering HTTPD child processes\n     filling up the scoreboard and eventually hanging the server.  By\n     default, the client I/O timeout (Timeout directive) now applies to\n     communication with scripts.  The CGIDScriptTimeout directive can be\n     used to set a different timeout for communication with scripts.\n     [Rainer Jung, Eric Covener, Yann Ylavic]\n\n  *) mod_ssl: Extend the scope of SSLSessionCacheTimeout to sessions\n     resumed by TLS session resumption (RFC 5077). [Rainer Jung]\n\n  *) mod_deflate: Don't fail when flushing inflated data to the user-agent\n     and that coincides with the end of stream (\"Zlib error flushing inflate\n     buffer\"). PR 56196. [Christoph Fausak <christoph fausak glueckkanja.com>]\n\n  *) mod_proxy_ajp: Forward local IP address as a custom request attribute\n     like we already do for the remote port. [Rainer Jung]\n\n  *) core: Include any error notes set by modules in the canned error\n     response for 403 errors.  [Jeff Trawick]\n\n  *) mod_ssl: Set an error note for requests rejected due to\n     SSLStrictSNIVHostCheck.  [Jeff Trawick]\n\n  *) mod_ssl: Fix issue with redirects to error documents when handling\n     SNI errors.  [Jeff Trawick]\n\n  *) mod_ssl: Fix tmp DH parameter leak, adjust selection to prefer\n     larger keys and support up to 8192-bit keys.  [Ruediger Pluem,\n     Joe Orton]\n\n  *) mod_dav: Fix improper encoding in PROPFIND responses.  PR 56480.\n     [Ben Reser]\n\n  *) WinNT MPM: Improve error handling for termination events in child.\n     [Jeff Trawick]\n\n  *) mod_proxy: When ping/pong is configured for a worker, don't send or\n     forward \"100 Continue\" (interim) response to the client if it does\n     not expect one. [Yann Ylavic]\n\n  *) mod_ldap: Be more conservative with the last-used time for\n     LDAPConnectionPoolTTL. PR54587 [Eric Covener]\n\n  *) mod_ldap: LDAP connections used for authn were not respecting\n     LDAPConnectionPoolTTL. PR54587 [Eric Covener]\n\n  *) mod_proxy_fcgi: Fix occasional high CPU when handling request bodies.\n     [Jeff Trawick]\n\n  *) event MPM: Fix possible crashes (third-party modules accessing c->sbh)\n     or occasional missed mod_status updates under load. PR 56639.\n     [Edward Lu <Chaosed0 gmail com>]\n\n  *) mod_authnz_ldap: Support primitive LDAP servers do not accept\n     filters, such as \"SDBM-backed LDAP\" on z/OS, by allowing a special\n     filter \"none\" to be specified in AuthLDAPURL. [Eric Covener]\n\n  *) mod_deflate: Fix inflation of files larger than 4GB. PR 56062.\n     [Lukas Bezdicka <social v3.sk>]\n\n  *) mod_deflate: Handle Zlib header and validation bytes received in multiple\n     chunks. PR 46146. [Yann Ylavic]\n\n  *) mod_proxy: Allow reverse-proxy to be set via explicit handler.\n     [ryo takatsuki <ryotakatsuki gmail com>]\n\n  *) ab: support custom HTTP method with -m argument. PR 56604.\n     [Roman Jurkov <winfinit gmail.com>]\n\n  *) mod_proxy_balancer: Correctly encode user provided data in management\n     interface. PR 56532 [Maksymilian, <max cert.cx>]\n\n  *) mod_proxy: Don't limit the size of the connectable Unix Domain Socket\n     paths. [Graham Dumpleton, Christophe Jaillet, Yann Ylavic]\n\n  *) mod_proxy_fcgi: Support iobuffersize parameter.  [Jeff Trawick]\n\n  *) event: Send the SSL close notify alert when the KeepAliveTimeout\n     expires. PR54998. [Yann Ylavic]\n\n  *) mod_ssl: Ensure that the SSL close notify alert is flushed to the client.\n     PR54998. [Tim Kosse <tim.kosse filezilla-project.org>, Yann Ylavic]\n\n  *) mod_proxy: Shutdown (eg. SSL close notify) the backend connection before\n     closing. [Yann Ylavic]\n\n  *) mod_auth_form: Add a debug message when the fields on a form are not\n     recognised. [Graham Leggett]\n\n  *) mod_cache: Preserve non-cacheable headers forwarded from an origin 304\n     response. PR 55547.  [Yann Ylavic]\n\n  *) mod_proxy_wstunnel: Fix the use of SSL connections with the \"wss:\"\n     scheme. PR55320. [Alex Liu <alex.leo.ca gmail.com>]\n\n  *) mod_socache_shmcb: Correct counting of expirations for status display.\n     Expirations happening during retrieval were not counted. [Rainer Jung]\n\n  *) mod_cache: Retry unconditional request with the full URL (including the\n     query-string) when the origin server's 304 response does not match the\n     conditions used to revalidate the stale entry.  [Yann Ylavic].\n\n  *) mod_alias: Stop setting CONTEXT_PREFIX and CONTEXT_DOCUMENT environment\n     variables as a result of AliasMatch. [Eric Covener]\n\n  *) mod_cache: Don't add cached/revalidated entity headers to a 304 response.\n     PR 55547.  [Yann Ylavic]\n\n  *) mod_proxy_scgi: Support Unix sockets.  ap_proxy_port_of_scheme():\n     Support default SCGI port (4000).  [Jeff Trawick]\n\n  *) mod_cache: Fix AH00784 errors on Windows when the the CacheLock directive\n     is enabled.  [Eric Covener]\n\n  *) mod_expires: don't add Expires header to error responses (4xx/5xx),\n     be they generated or forwarded. PR 55669.  [Yann Ylavic]\n\n  *) mod_proxy_fcgi: Don't segfault when failing to connect to the backend.\n     (regression in 2.4.9 release) [Jeff Trawick]\n\n  *) mod_authn_socache: Fix crash at startup in certain configurations.\n     PR 56371. (regression in 2.4.7) [Jan Kaluza]\n\n  *) mod_ssl: restore argument structure for \"exec\"-type SSLPassPhraseDialog\n     programs to the form used in releases up to 2.4.7, and emulate\n     a backwards-compatible behavior for existing setups. [Kaspar Brand]\n\n  *) mod_ssl: Add SSLOCSPUseRequestNonce directive to control whether or not\n     OCSP requests should use a nonce to be checked against the responder's\n     one. PR 56233. [Yann Ylavic, Kaspar Brand]\n\n  *) mod_ssl: \"SSLEngine off\" will now override a Listen-based default\n     and does disable mod_ssl for the vhost.  [Joe Orton]\n\n  *) mod_lua: Enforce the max post size allowed via r:parsebody()\n     [Daniel Gruno]\n\n  *) mod_lua: Use binary comparison to find boundaries for multipart\n     objects, as to not terminate our search prematurely when hitting\n     a NULL byte. [Daniel Gruno]\n\n  *) mod_ssl: add workaround for SSLCertificateFile when using OpenSSL\n     versions before 0.9.8h and not specifying an SSLCertificateChainFile\n     (regression introduced with 2.4.8). PR 56410. [Kaspar Brand]\n\n  *) mod_ssl: bring SNI behavior into better conformance with RFC 6066:\n     no longer send warning-level unrecognized_name(112) alerts,\n     and limit startup warnings to cases where an OpenSSL version\n     without TLS extension support is used. PR 56241. [Kaspar Brand]\n\n  *) mod_proxy_html: Avoid some possible memory access violation in case of\n     specially crafted files, when the ProxyHTMLMeta directive is turned on.\n     Follow up of PR 56287 [Christophe Jaillet]\n\n  *) mod_auth_form: Make sure the optional functions are loaded even when\n     the AuthFormProvider isn't specified. [Graham Leggett]\n\n  *) mod_ssl: avoid processing bogus SSLCertificateKeyFile values\n     (and logging garbled file names). PR 56306. [Kaspar Brand]\n\n  *) mod_ssl: fix merging of global and vhost-level settings with the\n     SSLCertificateFile, SSLCertificateKeyFile, and SSLOpenSSLConfCmd\n     directives. PR 56353. [Kaspar Brand]\n\n  *) mod_headers: Allow the \"value\" parameter of Header and RequestHeader to\n     contain an ap_expr expression if prefixed with \"expr=\". [Eric Covener]\n\n  *) rotatelogs: Avoid creation of zombie processes when -p is used on\n     Unix platforms.  [Joe Orton]\n\n  *) mod_authnz_fcgi: New module to enable FastCGI authorizer\n     applications to authenticate and/or authorize clients.\n     [Jeff Trawick]\n\n  *) mod_proxy: Do not try to parse the regular expressions passed by\n     ProxyPassMatch as URL as they do not follow their syntax.\n     PR 56074. [Ruediger Pluem]\n\n  *) mod_reqtimeout: Resolve unexpected timeouts on keepalive requests\n     under the Event MPM. PR56216.  [Frank Meier <frank meier ergon ch>]\n\n  *) mod_proxy_fcgi: Fix sending of response without some HTTP headers\n     that might be set by filters.  PR 55558. [Jim Riggs <jim riggs.me>]\n\n  *) mod_proxy_html: Do not delete the wrong data from HTML code when a\n     \"http-equiv\" meta tag specifies a Content-Type behind any other\n     \"http-equiv\" meta tag. PR 56287 [Micha Lenk <micha lenk info>]\n\n  *) mod_proxy: Don't reuse a SSL backend connection whose requested SNI\n     differs. PR 55782.  [Yann Ylavic]\n\n  *) Add suspend_connection and resume_connection hooks to notify modules\n     when the thread/connection relationship changes.  (Should be implemented\n     for any third-party async MPMs.)  [Jeff Trawick]\n\n  *) mod_proxy_wstunnel: Don't issue AH02447 and log a 500 on routine\n     hangups from websockets origin servers. PR 56299\n     [Yann Ylavic, Edward Lu <Chaosed0 gmail com>, Eric Covener]\n\n  *) mod_proxy_wstunnel: Don't pool backend websockets connections,\n     because we need to handshake every time. PR 55890.\n     [Eric Covener]\n\n  *) mod_lua: Redesign how request record table access behaves,\n     in order to utilize the request record from within these tables.\n     [Daniel Gruno]\n\n  *) mod_lua: Add r:wspeek for peeking at WebSocket frames. [Daniel Gruno]\n\n  *) mod_lua: Log an error when the initial parsing of a Lua file fails.\n     [Daniel Gruno, Felipe Daragon <filipe syhunt com>]\n\n  *) mod_lua: Reformat and escape script error output.\n     [Daniel Gruno, Felipe Daragon <filipe syhunt com>]\n\n  *) mod_lua: URL-escape cookie keys/values to prevent tainted cookie data\n     from causing response splitting.\n     [Daniel Gruno, Felipe Daragon <filipe syhunt com>]\n\n  *) mod_lua: Disallow newlines in table values inside the request_rec,\n     to prevent HTTP Response Splitting via tainted headers.\n     [Daniel Gruno, Felipe Daragon <filipe syhunt com>]\n\n  *) mod_lua: Remove the non-working early/late arguments for\n     LuaHookCheckUserID. [Daniel Gruno]\n\n  *) mod_lua: Change IVM storage to use shm [Daniel Gruno]\n\n  *) mod_lua: More verbose error logging when a handler function cannot be\n     found. [Daniel Gruno]\n\nChanges with Apache 2.4.9\n\n  *) mod_ssl: Work around a bug in some older versions of OpenSSL that\n     would cause a crash in SSL_get_certificate for servers where the\n     certificate hadn't been sent. [Stephen Henson]\n\n  *) mod_lua: Add a fixups hook that checks if the original request is intended\n     for LuaMapHandler. This fixes a bug where FallbackResource invalidates the\n     LuaMapHandler directive in certain cases by changing the URI before the map\n     handler code executes [Daniel Gruno, Daniel Ferradal <dferradal gmail com>].\n\nChanges with Apache 2.4.8 (not released)\n\n  *) SECURITY: CVE-2014-0098 (cve.mitre.org)\n     Clean up cookie logging with fewer redundant string parsing passes.\n     Log only cookies with a value assignment. Prevents segfaults when\n     logging truncated cookies.\n     [William Rowe, Ruediger Pluem, Jim Jagielski]\n\n  *) SECURITY: CVE-2013-6438 (cve.mitre.org)\n     mod_dav: Keep track of length of cdata properly when removing\n     leading spaces. Eliminates a potential denial of service from\n     specifically crafted DAV WRITE requests\n     [Amin Tora <Amin.Tora neustar.biz>]\n\n  *) core: Support named groups and backreferences within the LocationMatch,\n     DirectoryMatch, FilesMatch and ProxyMatch directives. (Requires\n     non-ancient PCRE library) [Graham Leggett]\n\n  *) core: draft-ietf-httpbis-p1-messaging-23 corrections regarding\n     TE/CL conflicts. [Yann Ylavic, Jim Jagielski]\n\n  *) core: Detect incomplete request and response bodies, log an error and\n     forward it to the underlying filters. PR 55475 [Yann Ylavic]\n\n  *) mod_dir: Add DirectoryCheckHandler to allow a 2.2-like behavior, skipping\n     execution when a handler is already set. PR53929. [Eric Covener]\n\n  *) mod_ssl: Do not perform SNI / Host header comparison in case of a\n     forward proxy request. [Ruediger Pluem]\n\n  *) mod_ssl: Remove the hardcoded algorithm-type dependency for the\n     SSLCertificateFile and SSLCertificateKeyFile directives, to enable\n     future algorithm agility, and deprecate the SSLCertificateChainFile\n     directive (obsoleted by SSLCertificateFile). [Kaspar Brand]\n\n  *) mod_rewrite: Add RewriteOptions InheritDown, InheritDownBefore,\n     and IgnoreInherit to allow RewriteRules to be pushed from parent scopes\n     to child scopes without explicitly configuring each child scope.\n     PR56153.  [Edward Lu <Chaosed0 gmail com>]\n\n  *) prefork: Fix long delays when doing a graceful restart.\n     PR 54852 [Jim Jagielski, Arkadiusz Miskiewicz <arekm maven pl>]\n\n  *) FreeBSD: Disable IPv4-mapped listening sockets by default for versions\n     5+ instead of just for FreeBSD 5. PR 53824. [Jeff Trawick]\n\n  *) mod_proxy_wstunnel: Avoid busy loop on client errors, drop message\n     IDs 02445, 02446, and 02448 to TRACE1 from DEBUG. PR 56145.\n     [Joffroy Christen <joffroy.christen solvaxis com>, Eric Covener]\n\n  *) mod_remoteip: Correct the trusted proxy match test. PR 54651.\n     [Yoshinori Ehara <yoshinori ehara gmail com>, Eugene L <eugenel amazon com>]\n\n  *) mod_proxy_fcgi: Fix error message when an unexpected protocol version\n     number is received from the application.  PR 56110.  [Jeff Trawick]\n\n  *) mod_remoteip: Use the correct IP addresses to populate the proxy_ips field.\n     PR 55972. [Mike Rumph]\n\n  *) mod_lua: Update r:setcookie() to accept a table of options and add domain,\n     path and httponly to the list of options available to set.\n     PR 56128 [Edward Lu <Chaosed0 gmail com>, Daniel Gruno]\n\n  *) mod_lua: Fix r:setcookie() to add, rather than replace,\n     the Set-Cookie header. PR56105\n     [Kevin J Walters <kjw ms com>, Edward Lu <Chaosed0 gmail com>]\n\n  *) mod_lua: Allow for database results to be returned as a hash with\n     row-name/value pairs instead of just row-number/value. [Daniel Gruno]\n\n  *) mod_rewrite: Add %{CONN_REMOTE_ADDR} as the non-useragent counterpart to\n     %{REMOTE_ADDR}. PR 56094. [Edward Lu <Chaosed0 gmail com>]\n\n  *) WinNT MPM: If ap_run_pre_connection() fails or sets c->aborted, don't\n     save the socket for reuse by the next worker as if it were an\n     APR_SO_DISCONNECTED socket. Restores 2.2 behavior. [Eric Covener]\n\n  *) mod_dir: Don't search for a DirectoryIndex or DirectorySlash on a URL\n     that was just rewritten by mod_rewrite. PR53929. [Eric Covener]\n\n  *) mod_session: When we have a session we were unable to decode,\n     behave as if there was no session at all. [Thomas Eckert\n     <thomas.r.w.eckert gmail com>]\n\n  *) mod_session: Fix problems interpreting the SessionInclude and\n     SessionExclude configuration. PR 56038. [Erik Pearson\n     <erik adaptations.com>]\n\n  *) mod_authn_core: Allow <AuthnProviderAlias>'es to be seen from auth\n     stanzas under virtual hosts. PR 55622. [Eric Covener]\n\n  *) mod_proxy_fcgi: Use apr_socket_timeout_get instead of hard-coded\n     30 seconds timeout. [Jan Kaluza]\n\n  *) build: only search for modules (config*.m4) in known subdirectories, see\n     build/config-stubs. [Stefan Fritsch]\n\n  *) mod_cache_disk: Fix potential hangs on Windows when using mod_cache_disk.\n     PR 55833. [Eric Covener]\n\n  *) mod_ssl: Add support for OpenSSL configuration commands by introducing\n     the SSLOpenSSLConfCmd directive. [Stephen Henson, Kaspar Brand]\n\n  *) mod_proxy: Remove (never documented) <Proxy ~ wildcard-url> syntax which\n     is equivalent to <ProxyMatch wildcard-url>. [Christophe Jaillet]\n\n  *) mod_authz_user, mod_authz_host, mod_authz_groupfile, mod_authz_dbm,\n     mod_authz_dbd, mod_authnz_ldap: Support the expression parser within the\n     require directives. [Graham Leggett]\n\n  *) mod_proxy_http: Core dumped under high load. PR 50335.\n     [Jan Kaluza <jkaluza redhat.com>]\n\n  *) mod_socache_shmcb.c: Remove arbitrary restriction on shared memory size\n     previously limited to 64MB. [Jens L\u00e5\u00e5s <jelaas gmail.com>]\n\n  *) mod_lua: Use binary copy when dealing with uploads through r:parsebody()\n     to prevent truncating files. [Daniel Gruno]\n\nChanges with Apache 2.4.7\n\n  *) SECURITY: CVE-2013-4352 (cve.mitre.org)\n     mod_cache: Fix a NULL pointer deference which allowed untrusted\n     origin servers to crash mod_cache in a forward proxy\n     configuration.  [Graham Leggett]\n\n  *) APR 1.5.0 or later is now required for the event MPM.\n\n  *) slotmem_shm: Error detection. [Jim Jagielski]\n\n  *) event: Use skiplist data structure. [Jim Jagielski]\n\n  *) event: Fail at startup with message AP02405 if the APR atomic\n     implementation is not compatible with the MPM.  [Jim Jagielski]\n\n  *) mpm_unix: Add ap_mpm_podx_* implementation to avoid code duplication\n     and align w/ trunk. [Jim Jagielski]\n\n  *) Fix potential rejection of valid MaxMemFree and ThreadStackSize\n     directives.  [Mike Rumph <mike.rumph oracle.com>]\n\n  *) mod_proxy_fcgi: Remove 64K limit on encoded length of all envvars.\n     An individual envvar with an encoded length of more than 16K will be\n     omitted.  [Jeff Trawick]\n\n  *) mod_proxy_fcgi: Handle reading protocol data that is split between\n     packets.  [Jeff Trawick]\n\n  *) mod_ssl: Improve handling of ephemeral DH and ECDH keys by\n     allowing custom parameters to be configured via SSLCertificateFile,\n     and by adding standardized DH parameters for 1024/2048/3072/4096 bits.\n     Unless custom parameters are configured, the standardized parameters\n     are applied based on the certificate's RSA/DSA key size. [Kaspar Brand]\n\n  *) mod_ssl, configure: Require OpenSSL 0.9.8a or later. [Kaspar Brand]\n\n  *) mod_ssl: drop support for export-grade ciphers with ephemeral RSA\n     keys, and unconditionally disable aNULL, eNULL and EXP ciphers\n     (not overridable via SSLCipherSuite). [Kaspar Brand]\n\n  *) mod_proxy: Added support for unix domain sockets as the\n     backend server endpoint. This also introduces an unintended\n     incompatibility for third party modules using the mod_proxy\n     proxy_worker_shared structure, especially for balancer lbmethod\n     modules. [Jim Jagielski, Blaise Tarr <blaise tarr gmail com>]\n\n  *) Add experimental cmake-based build system for Windows.  [Jeff Trawick,\n     Tom Donovan]\n\n  *) event MPM: Fix possible crashes (third party modules accessing c->sbh)\n     or occasional missed mod_status updates for some keepalive requests\n     under load. [Eric Covener]\n\n  *) mod_authn_socache: Support optional initialization arguments for\n     socache providers.  [Chris Darroch]\n\n  *) mod_session: Reset the max-age on session save. PR 47476. [Alexey\n     Varlamov <alexey.v.varlamov gmail com>]\n\n  *) mod_session: After parsing the value of the header specified by the\n     SessionHeader directive, remove the value from the response. PR 55279.\n     [Graham Leggett]\n\n  *) mod_headers: Allow for format specifiers in the substitution string\n     when using Header edit. [Daniel Ruggeri]\n\n  *) mod_dav: dav_resource->uri is treated as unencoded. This was an\n     unnecessary ABI changed introduced in 2.4.6. PR 55397.\n\n  *) mod_dav: Don't require lock tokens for COPY source. PR 55306.\n\n  *) core: Don't truncate output when sending is interrupted by a signal,\n     such as from an exiting CGI process. PR 55643. [Jeff Trawick]\n\n  *) WinNT MPM: Exit the child if the parent process crashes or is terminated.\n     [Oracle Corporation]\n\n  *) Windows: Correct failure to discard stderr in some error log\n     configurations.  (Error message AH00093)  [Jeff Trawick]\n\n  *) mod_session_crypto: Allow using exec: calls to obtain session\n     encryption key.  [Daniel Ruggeri]\n\n  *) core: Add missing Reason-Phrase in HTTP response headers.\n     PR 54946. [Rainer Jung]\n\n  *) mod_rewrite: Make rewrite websocket-aware to allow proxying.\n     PR 55598. [Chris Harris <chris.harris kitware com>]\n\n  *) mod_ldap: When looking up sub-groups, use an implicit objectClass=*\n     instead of an explicit cn=* filter. [David Hawes <dhawes vt.edu>]\n\n  *) ab: Add wait time, fix processing time, and output write errors only if\n     they occurred. [Christophe Jaillet]\n\n  *) worker MPM: Don't forcibly kill worker threads if the child process is\n     exiting gracefully.  [Oracle Corporation]\n\n  *) core: apachectl -S prints wildcard name-based virtual hosts twice.\n     PR54948 [Eric Covener]\n\n  *) mod_auth_basic: Add AuthBasicUseDigestAlgorithm directive to\n     allow migration of passwords from digest to basic authentication.\n     [Chris Darroch]\n\n  *) ab: Add a new -l parameter in order not to check the length of the responses.\n     This can be useful with dynamic pages.\n     PR9945, PR27888, PR42040 [<ccikrs1 cranbrook edu>]\n\n  *) Suppress formatting of startup messages written to the console when\n     ErrorLogFormat is used.  [Jeff Trawick]\n\n  *) mod_auth_digest: Be more specific when the realm mismatches because the\n     realm has not been specified. [Graham Leggett]\n\n  *) mod_proxy: Add a note in the balancer manager stating whether changes\n     will or will not be persisted and whether settings are inherited.\n     [Daniel Ruggeri, Jim Jagielski]\n\n  *) core: Add util_fcgi.h and associated definitions and support\n     routines for FastCGI, based largely on mod_proxy_fcgi.\n     [Jeff Trawick]\n\n  *) mod_headers: Add 'Header note header-name note-name' for copying a response\n     headers value into a note. [Eric Covener]\n\n  *) mod_headers: Add 'setifempty' command to Header and RequestHeader.\n     [Eric Covener]\n\n  *) mod_logio: new format-specifier %S (sum) which is the sum of received\n     and sent byte counts.\n     PR54015 [Christophe Jaillet]\n\n  *) mod_deflate: Improve error detection when decompressing request bodies\n     with trailing garbage: handle case where trailing bytes are in\n     the same bucket. [Rainer Jung]\n\n  *) mod_authz_groupfile, mod_authz_user: Reduce severity of AH01671 and AH01663\n     from ERROR to DEBUG, since these modules do not know what mod_authz_core\n     is doing with their AUTHZ_DENIED return value. [Eric Covener]\n\n  *) mod_ldap: add TRACE5 for LDAP retries. [Eric Covener]\n\n  *) mod_ldap: retry on an LDAP timeout during authn. [Eric Covener]\n\n  *) mod_ldap: Change \"LDAPReferrals off\" to actually set the underlying LDAP\n     SDK option to OFF, and introduce \"LDAPReferrals default\" to take the SDK\n     default, sans rebind authentication callback.\n     [Jan Kaluza <kaluze AT redhat.com>]\n\n  *) core: Log a message at TRACE1 when the client aborts a connection.\n     [Eric Covener]\n\n  *) WinNT MPM: Don't crash during child process initialization if the\n     Listen protocol is unrecognized.  [Jeff Trawick]\n\n  *) modules: Fix some compiler warnings. [Guenter Knauf]\n\n  *) Sync 2.4 and trunk\n       - Avoid some memory allocation and work when TRACE1 is not activated\n       - fix typo in include guard\n       - indent\n       - No need to lower the string before removing the path, it is just\n         a waste of time...\n       - Save a few cycles\n     [Christophe Jaillet <christophe.jaillet wanadoo.fr>]\n\n  *) mod_filter: Add \"change=no\" as a proto-flag to FilterProtocol\n     to remove a providers initial flags set at registration time.\n     [Eric Covener]\n\n  *) core, mod_ssl: Enable the ability for a module to reverse the sense of\n     a poll event from a read to a write or vice versa. This is a step on\n     the way to allow mod_ssl taking full advantage of the event MPM.\n     [Graham Leggett]\n\n  *) Makefile.win: Install proper pcre DLL file during debug build install.\n     PR 55235.  [Ben Reser <ben reser org>]\n\n  *) mod_ldap: Fix a potential memory leak or corruption.  PR 54936.\n     [Zhenbo Xu <zhenbo1987 gmail com>]\n\n  *) ab: Fix potential buffer overflows when processing the T and X\n     command-line options.  PR 55360.\n     [Mike Rumph <mike.rumph oracle.com>]\n\n  *) fcgistarter: Specify SO_REUSEADDR to allow starting a server\n     with old connections in TIME_WAIT.  [Jeff Trawick]\n\n  *) core: Add open_htaccess hook which, in conjunction with dirwalk_stat\n     and post_perdir_config (introduced in 2.4.5), allows mpm-itk to be\n     used without patches to httpd core. [Stefan Fritsch]\n\n  *) support/htdbm: fix processing of -t command line switch. Regression\n     introduced in 2.4.4\n     PR 55264 [Jo Rhett <jrhett netconsonance com>]\n\n  *) mod_lua: add websocket support via r:wsupgrade, r:wswrite, r:wsread\n     and r:wsping. [Daniel Gruno]\n\n  *) mod_lua: add support for writing/reading cookies via r:getcookie and\n     r:setcookie. [Daniel Gruno]\n\n  *) mod_lua: If the first yield() of a LuaOutputFilter returns a string, it should\n     be prefixed to the response as documented. [Eric Covener]\n     Note: Not present in 2.4.7 CHANGES\n\n  *) mod_lua: Remove ETAG, Content-Length, and Content-MD5 when a LuaOutputFilter\n     is configured without mod_filter. [Eric Covener]\n     Note: Not present in 2.4.7 CHANGES\n\n  *) mod_lua: Register LuaOutputFilter scripts as changing the content and\n     content-length by default, when run my mod_filter.  Previously,\n     growing or shrinking a response that started with Content-Length set\n     would require mod_filter and FilterProtocol change=yes. [Eric Covener]\n     Note: Not present in 2.4.7 CHANGES\n\n  *) mod_lua: Return a 500 error if a LuaHook* script doesn't return a\n     numeric return code. [Eric Covener]\n     Note: Not present in 2.4.7 CHANGES\n\nChanges with Apache 2.4.6\n\n  *) Revert a broken fix for PR54948 that was applied to 2.4.5 (which was\n     not released) and found post-2.4.5 tagging.\n\nChanges with Apache 2.4.5\n\n  *) SECURITY: CVE-2013-1896 (cve.mitre.org)\n     mod_dav: Sending a MERGE request against a URI handled by mod_dav_svn with\n     the source href (sent as part of the request body as XML) pointing to a\n     URI that is not configured for DAV will trigger a segfault. [Ben Reser\n     <ben reser.org>]\n\n  *) SECURITY: CVE-2013-2249 (cve.mitre.org)\n     mod_session_dbd: Make sure that dirty flag is respected when saving\n     sessions, and ensure the session ID is changed each time the session\n     changes. This changes the format of the updatesession SQL statement.\n     Existing configurations must be changed.\n     [Takashi Sato, Graham Leggett]\n\n  *) mod_auth_basic: Add a generic mechanism to fake basic authentication\n     using the ap_expr parser. AuthBasicFake allows the administrator to\n     construct their own username and password for basic authentication based\n     on their needs. [Graham Leggett]\n\n  *) mpm_event: Check that AsyncRequestWorkerFactor is not negative. PR 54254.\n     [Jackie Zhang <jackie qq zhang gmail com>]\n\n  *) mod_proxy: Ensure we don't attempt to amend a table we are iterating\n     through, ensuring that all headers listed by Connection are removed.\n     [Graham Leggett, Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_proxy_http: Make the proxy-interim-response environment variable\n     effective by formally overriding origin server behaviour. [Graham\n     Leggett, Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_proxy: Fix seg-faults when using the global pool on threaded\n     MPMs [Thomas Eckert <thomas.r.w.eckert gmail.com>, Graham Leggett,\n     Jim Jagielski]\n\n  *) mod_deflate: Remove assumptions as to when an EOS bucket might arrive.\n     Gracefully step aside if the body size is zero. [Graham Leggett]\n\n  *) mod_ssl: Fix possible truncation of OCSP responses when reading from the\n     server.  [Joe Orton]\n\n  *) core: Support the SINGLE_LISTEN_UNSERIALIZED_ACCEPT optimization\n     on Linux kernel versions 3.x and above.  PR 55121.  [Bradley Heilbrun\n     <apache heilbrun.org>]\n\n  *) mod_cache_socache: Make sure the CacheSocacheMaxSize directive is merged\n     correctly. [Jens L\u00e5\u00e5s <jelaas gmail.com>]\n\n  *) rotatelogs: add -n number-of-files option to rotate through a number\n     of fixed-name logfiles. [Eric Covener]\n\n  *) mod_proxy: Support web-socket tunnels via mod_proxy_wstunnel.\n     [Jim Jagielski]\n\n  *) mod_cache_socache: Use the name of the socache implementation when performing\n     a lookup rather than using the raw arguments. [Martin Ksellmann\n     <martin@ksellmann.de>]\n\n  *) core: Add dirwalk_stat hook.  [Jeff Trawick]\n\n  *) core: Add post_perdir_config hook.\n     [Steinar Gunderson <sgunderson bigfoot.com>]\n\n  *) proxy_util: NULL terminate the right buffer in 'send_http_connect'.\n     [Christophe Jaillet]\n\n  *) mod_remoteip: close file in error path. [Christophe Jaillet]\n\n  *) core: make the \"default\" parameter of the \"ErrorDocument\" option case\n     insensitive. PR 54419 [Tianyin Xu <tixu cs ucsd edu>]\n\n  *) mod_proxy_html: make the \"ProxyHTMLFixups\" options case insensitive.\n     PR 54420 [Tianyin Xu <tixu cs ucsd edu>]\n\n  *) mod_cache: Make option \"CacheDisable\" in mod_cache case insensitive.\n     PR 54462 [Tianyin Xu <tixu cs ucsd edu>]\n\n  *) mod_cache: If a 304 response indicates an entity not currently cached, then\n     the cache MUST disregard the response and repeat the request without the\n     conditional. [Graham Leggett, Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_cache: Ensure that we don't attempt to replace a cached response\n     with an older response as per RFC2616 13.12. [Graham Leggett, Co-Advisor\n     <coad measurement-factory.com>]\n\n  *) core, mod_cache: Ensure RFC2616 compliance in ap_meets_conditions()\n     with weak validation combined with If-Range and Range headers. Break\n     out explicit conditional header checks to be useable elsewhere in the\n     server. Ensure weak validation RFC compliance in the byteranges filter.\n     Ensure RFC validation compliance when serving cached entities. PR 16142\n     [Graham Leggett, Co-Advisor <coad measurement-factory.com>]\n\n  *) core: Add the ability to do explicit matching on weak and strong ETags\n     as per RFC2616 Section 13.3.3. [Graham Leggett, Co-Advisor\n     <coad measurement-factory.com>]\n\n  *) mod_cache: Ensure that updated responses to HEAD requests don't get\n     mistakenly paired with a previously cached body. Ensure that any existing\n     body is removed when a HEAD request is cached. [Graham Leggett,\n     Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_cache: Honour Cache-Control: no-store in a request. [Graham Leggett]\n\n  *) mod_cache: Make sure that contradictory entity headers present in a 304\n     Not Modified response are caught and cause the entity to be removed.\n     [Graham Leggett]\n\n  *) mod_cache: Make sure Vary processing handles multivalued Vary headers and\n     multivalued headers referred to via Vary. [Graham Leggett]\n\n  *) mod_cache: When serving from cache, only the last header of a multivalued\n     header was taken into account. Fixed. Ensure that Warning headers are\n     correctly handled as per RFC2616. [Graham Leggett]\n\n  *) mod_cache: Ignore response headers specified by no-cache=header and\n     private=header as specified by RFC2616 14.9.1 What is Cacheable. Ensure\n     that these headers are still processed when multiple Cache-Control\n     headers are present in the response. PR 54706 [Graham Leggett,\n     Yann Ylavic <ylavic.dev gmail.com>]\n\n  *) mod_cache: Invalidate cached entities in response to RFC2616 Section\n     13.10 Invalidation After Updates or Deletions. PR 15868 [Graham\n     Leggett]\n\n  *) mod_dav: Improve error handling in dav_method_put(), add new\n     dav_join_error() function.  PR 54145.  [Ben Reser <ben reser.org>]\n\n  *) mod_dav: Do not fail PROPPATCH when prop namespace is not known.\n     PR 52559 [Diego Santa Cruz <diego.santaCruz spinetix.com>]\n\n  *) mod_dav: When a PROPPATCH attempts to remove a non-existent dead\n     property on a resource for which there is no dead property in the same\n     namespace httpd segfaults. PR 52559 [Diego Santa Cruz\n     <diego.santaCruz spinetix.com>]\n\n  *) mod_dav: Sending an If or If-Match header with an invalid ETag doesn't\n     result in a 412 Precondition Failed for a COPY operation. PR54610\n     [Timothy Wood <tjw omnigroup.com>]\n\n  *) mod_dav: Make sure that when we prepare an If URL for Etag comparison,\n     we compare unencoded paths. PR 53910 [Timothy Wood <tjw omnigroup.com>]\n\n  *) mod_deflate: Remove assumptions as to when an EOS bucket might arrive.\n     Gracefully step aside if the body size is zero. [Graham Leggett]\n\n  *) 'AuthGroupFile' and 'AuthUserFile' do not accept anymore the optional\n     'standard' keyword . It was unused and not documented.\n     PR54463 [Tianyin Xu <tixu cs.ucsd.edu> and Christophe Jaillet]\n\n  *) core: Do not over allocate memory within 'ap_rgetline_core' for\n     the common case. [Christophe Jaillet]\n\n  *) core: speed up (for common cases) and reduce memory usage of\n     ap_escape_logitem(). This should save 70-100 bytes in the request\n     pool for a default config. [Christophe Jaillet]\n\n  *) mod_dav: Ensure URI is correctly uriencoded on return. PR 54611\n     [Timothy Wood <tjw omnigroup.com>]\n\n  *) mod_proxy: Reject invalid values for Max-Forwards. [Graham Leggett,\n     Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_cache: RFC2616 14.9.3 The s-maxage directive also implies the\n     semantics of the proxy-revalidate directive. [Graham Leggett]\n\n  *) mod_ssl: add support for subjectAltName-based host name checking\n     in proxy mode (SSLProxyCheckPeerName). PR 54030. [Kaspar Brand]\n\n  *) core: Use the proper macro for HTTP/1.1. [Graham Leggett]\n\n  *) event MPM: Provide error handling for ThreadStackSize. PR 54311\n     [Tianyin Xu <tixu cs.ucsd.edu>, Christophe Jaillet]\n\n  *) mod_dav: Do not segfault on PROPFIND with a zero length DBM.\n     PR 52559 [Diego Santa Cruz <diego.santaCruz spinetix.com>]\n\n  *) core: Improve error message where client's request-line exceeds\n     LimitRequestLine. PR 54384 [Christophe Jaillet]\n\n  *) mod_macro: New module that provides macros within configuration files.\n     [Fabien Coelho]\n\n  *) mod_cache_socache: New cache implementation backed by mod_socache\n     that replaces mod_mem_cache known from httpd 2.2. [Graham\n     Leggett]\n\n  *) htpasswd: Add -v option to verify a password. [Stefan Fritsch]\n\n  *) mod_proxy: Add BalancerInherit and ProxyPassInherit to control\n     whether Proxy Balancers and Workers are inherited by vhosts\n     (default is On). [Jim Jagielski]\n\n  *) mod_authnz_ldap: Allow using exec: calls to obtain LDAP bind\n     password.  [Daniel Ruggeri]\n\n  *) Added balancer parameter failontimeout to allow server admin\n     to configure an IO timeout as an error in the balancer.\n     [Daniel Ruggeri]\n\n  *) mod_auth_digest: Fix crashes if shm initialization failed. [Stefan\n     Fritsch]\n\n  *) htpasswd, htdbm: Fix password generation. PR 54735. [Stefan Fritsch]\n\n  *) core: Add workaround for gcc bug on sparc/64bit. PR 52900.\n     [Stefan Fritsch]\n\n  *) mod_setenvif: Fix crash in case SetEnvif and SetEnvIfExpr are used\n     together. PR 54881. [Ruediger Pluem]\n\n  *) htdigest: Fix buffer overflow when reading digest password file\n     with very long lines. PR 54893. [Rainer Jung]\n\n  *) ap_expr: Add the ability to base64 encode and base64 decode\n     strings and to generate their SHA1 and MD5 hash.\n     [Graham Leggett, Stefan Fritsch]\n\n  *) mod_log_config: Fix crash when logging request end time for a failed\n     request.  PR 54828 [Rainer Jung]\n\n  *) mod_ssl: Catch missing, mismatched or encrypted client cert/key pairs\n     with SSLProxyMachineCertificateFile/Path directives. PR 52212, PR 54698.\n     [Keith Burdis <keith burdis.org>, Joe Orton, Kaspar Brand]\n\n  *) mod_ssl: Quiet FIPS mode weak keys disabled and FIPS not selected emits\n     in the error log to debug level.  [William Rowe]\n\n  *) mod_cache_disk: CacheMinFileSize and CacheMaxFileSize were always\n     using compiled in defaults of 1000000/1 respectively. [Eric Covener]\n\n  *) mod_lbmethod_heartbeat, mod_heartmonitor: Respect DefaultRuntimeDir/\n     DEFAULT_REL_RUNTIMEDIR for the heartbeat storage file.  [Jeff Trawick]\n\n  *) mod_include: Use new ap_expr for 'elif', like 'if',\n     if legacy parser is not specified.  PR 54548 [Tom Donovan]\n\n  *) mod_lua: Add some new functions: r:htpassword(), r:mkdir(), r:mkrdir(),\n     r:rmdir(), r:touch(), r:get_direntries(), r.date_parse_rfc().\n     [Guenter Knauf]\n\n  *) mod_lua: Add multipart form data handling. [Daniel Gruno]\n\n  *) mod_lua: If a LuaMapHandler doesn't return any value, log a warning\n     and treat it as apache2.OK. [Eric Covener]\n\n  *) mod_lua: Add bindings for apr_dbd/mod_dbd database access\n     [Daniel Gruno]\n\n  *) mod_lua: Add LuaInputFilter/LuaOutputFilter for creating content\n     filters in Lua [Daniel Gruno]\n\n  *) mod_lua: Allow scripts handled by the lua-script handler to return\n     a status code to the client (such as a 302 or a 500) [Daniel Gruno]\n\n  *) mod_lua: Decline handling 'lua-script' if the file doesn't exist,\n     rather than throwing an internal server error. [Daniel Gruno]\n\n  *) mod_lua: Add functions r:flush and r:sendfile as well as additional\n     request information to the request_rec structure. [Daniel Gruno]\n\n  *) mod_lua: Add a server scope for Lua states, which creates a pool of\n     states with manageable minimum and maximum size. [Daniel Gruno]\n\n  *) mod_lua: Add new directive, LuaMapHandler, for dynamically mapping\n     URIs to Lua scripts and functions using regular expressions.\n     [Daniel Gruno]\n\n  *) mod_lua: Add new directive LuaCodeCache for controlling in-memory\n     caching of lua scripts. [Daniel Gruno]\n\nChanges with Apache 2.4.4\n\n  *) SECURITY: CVE-2012-3499 (cve.mitre.org)\n     Various XSS flaws due to unescaped hostnames and URIs HTML output in\n     mod_info, mod_status, mod_imagemap, mod_ldap, and mod_proxy_ftp.\n     [Jim Jagielski, Stefan Fritsch, Niels Heinen <heinenn google com>]\n\n  *) SECURITY: CVE-2012-4558 (cve.mitre.org)\n     XSS in mod_proxy_balancer manager interface. [Jim Jagielski,\n     Niels Heinen <heinenn google com>]\n\n  *) mod_dir: Add support for the value 'disabled' in FallbackResource.\n     [Vincent Deffontaines]\n\n  *) mod_proxy_connect: Don't keepalive the connection to the client if the\n     backend closes the connection. PR 54474. [Pavel Mateja <pavel netsafe cz>]\n\n  *) mod_lua: Add bindings for mod_dbd/apr_dbd database access.\n     [Daniel Gruno]\n\n  *) mod_proxy: Allow for persistence of local changes made via the\n     balancer-manager between graceful/normal restarts and power\n     cycles. [Jim Jagielski]\n\n  *) mod_proxy: Fix startup crash with mis-defined balancers.\n     PR 52402. [Jim Jagielski]\n\n  *) --with-module: Fix failure to integrate them into some existing\n     module directories.  PR 40097.  [Jeff Trawick]\n\n  *) htcacheclean: Fix potential segfault if \"-p\" is omitted.  [Joe Orton]\n\n  *) mod_proxy_http: Honour special value 0 (unlimited) of LimitRequestBody\n     PR 54435.  [Pavel Mateja <pavel netsafe.cz>]\n\n  *) mod_proxy_ajp: Support unknown HTTP methods. PR 54416.\n     [Rainer Jung]\n\n  *) htcacheclean: Fix list options \"-a\" and \"-A\".\n     [Rainer Jung]\n\n  *) mod_slotmem_shm: Fix mistaken reset of num_free for restored shm.\n     [Jim Jagielski]\n\n  *) mod_proxy: non-existence of byrequests is not an immediate error.\n     [Jim Jagielski]\n\n  *) mod_proxy_balancer: Improve output of balancer-manager (re: Drn,\n     Dis, Ign, Stby). PR 52478 [Danijel <dt-ng rbfh de>]\n\n  *) configure: Fix processing of --disable-FEATURE for various features.\n     [Jeff Trawick]\n\n  *) mod_dialup/mod_http: Prevent a crash in mod_dialup in case of internal\n     redirect. PR 52230.\n\n  *) various modules, rotatelogs: Replace use of apr_file_write() with\n     apr_file_write_full() to prevent incomplete writes. PR 53131.\n     [Nicolas Viennot <apache viennot biz>, Stefan Fritsch]\n\n  *) ab: Support socket timeout (-s timeout).\n     [Guido Serra <zeph fsfe org>]\n\n  *) httxt2dbm: Correct length computation for the 'value' stored in the\n     DBM file. PR 47650 [jon buckybox com]\n\n  *) core: Be more correct about rejecting directives that cannot work in <If>\n     sections. [Stefan Fritsch]\n\n  *) core: Fix directives like LogLevel that need to know if they are invoked\n     at virtual host context or in Directory/Files/Location/If sections to\n     work properly in If sections that are not in a Directory/Files/Location.\n     [Stefan Fritsch]\n\n  *) mod_xml2enc: Fix problems with charset conversion altering the\n     Content-Length. [Micha Lenk <micha lenk info>]\n\n  *) ap_expr: Add req_novary function that allows HTTP header lookups\n     without adding the name to the Vary header. [Stefan Fritsch]\n\n  *) mod_slotmem_*: Add in new fgrab() function which forces a grab and\n     slot allocation on a specified slot. Allow for clearing of inuse\n     array. [Jim Jagielski]\n\n  *) mod_proxy_ftp: Fix segfaults on IPv4 requests to hosts with DNS\n     AAAA records. PR  40841. [Andrew Rucker Jones <arjones simultan\n     dyndns org>, <ast domdv de>, Jim Jagielski]\n\n  *) mod_auth_form: Make sure that get_notes_auth() sets the user as does\n     get_form_auth() and get_session_auth(). Makes sure that REMOTE_USER\n     does not vanish during mod_include driven subrequests. [Graham\n     Leggett]\n\n  *) mod_cache_disk: Resolve errors while revalidating disk-cached files on\n     Windows (\"...rename tempfile to datafile failed...\"). PR 38827\n     [Eric Covener]\n\n  *) mod_proxy_balancer: Bring XML output up to date. [Jim Jagielski]\n\n  *) htpasswd, htdbm: Optionally read passwords from stdin, as more\n     secure alternative to -b.  PR 40243. [Adomas Paltanavicius <adomas\n     paltanavicius gmail com>, Stefan Fritsch]\n\n  *) htpasswd, htdbm: Add support for bcrypt algorithm (requires\n     apr-util 1.5 or higher). PR 49288. [Stefan Fritsch]\n\n  *) htpasswd, htdbm: Put full 48bit of entropy into salt, improve\n     error handling. Add some of htpasswd's improvements to htdbm,\n     e.g. warn if password is truncated by crypt(). [Stefan Fritsch]\n\n  *) mod_auth_form: Support the expr parser in the\n     AuthFormLoginRequiredLocation, AuthFormLoginSuccessLocation and\n     AuthFormLogoutLocation directives. [Graham Leggett]\n\n  *) mod_ssl: Add support for TLS-SRP (Secure Remote Password key exchange\n     for TLS, RFC 5054). PR 51075. [Quinn Slack <sqs cs stanford edu>,\n     Christophe Renou, Peter Sylvester]\n\n  *) mod_rewrite: Stop mergeing RewriteBase down to subdirectories\n     unless new option 'RewriteOptions MergeBase' is configured.\n     PR 53963. [Eric Covener]\n\n  *) mod_header: Allow for exposure of loadavg and server load using new\n     format specifiers %l, %i, %b [Jim Jagielski]\n\n  *) core: Make ap_regcomp() return AP_REG_ESPACE if out of memory.  Make\n     ap_pregcomp() abort if out of memory. This raises the minimum PCRE\n     requirement to version 6.0. [Stefan Fritsch]\n\n  *) mod_proxy: Add ability to configure the sticky session separator.\n     PR 53893. [<inu inusasha de>, Jim Jagielski]\n\n  *) mod_dumpio: Correctly log large messages\n     PR 54179 [Marek Wianecki <mieszek2 interia pl>]\n\n  *) core: Don't fail at startup with AH00554 when Include points to\n     a directory without any wildcard character. [Eric Covener]\n\n  *) core: Fail startup if the argument to ServerTokens is unrecognized.\n     [Jackie Zhang  <jackie.qq.zhang gmail.com>]\n\n  *) mod_log_forensic: Don't log a spurious \"-\" if a request has been rejected\n     before mod_log_forensic could attach its id to it. [Stefan Fritsch]\n\n  *) rotatelogs: Omit the second argument for the first invocation of\n     a post-rotate program when -p is used, per the documentation.\n     [Joe Orton]\n\n  *) mod_session_dbd: fix a segmentation fault in the function dbd_remove.\n     PR 53452. [<rebanerebane gmail com>, Reimo Rebane]\n\n  *) core: Functions to provide server load values: ap_get_sload() and\n     ap_get_loadavg(). [Jim Jagielski, Jan Kaluza <jkaluza redhat.com>,\n     Jeff Trawick]\n\n  *) mod_ldap: Fix regression in handling \"server unavailable\" errors on\n     Windows.  PR 54140.  [Eric Covener]\n\n  *) syslog logging: Remove stray \", referer\" at the end of some messages.\n     [Jeff Trawick]\n\n  *) \"Iterate\" directives: Report an error if no arguments are provided.\n     [Jeff Trawick]\n\n  *) mod_ssl: Change default for SSLCompression to off, as compression\n     causes security issues in most setups. (The so called \"CRIME\" attack).\n     [Stefan Fritsch]\n\n  *) ab: add TLS1.1/TLS1.2 options to -f switch, and adapt output\n     to more accurately report the negotiated protocol. PR 53916.\n     [Nicol\u00e1s Pernas Maradei <nico emutex com>, Kaspar Brand]\n\n  *) core: ErrorDocument now works for requests without a Host header.\n     PR 48357.  [Jeff Trawick]\n\n  *) prefork: Avoid logging harmless errors during graceful stop.\n     [Joe Orton, Jeff Trawick]\n\n  *) mod_proxy: When concatting for PPR, avoid cases where we\n     concat \".../\" and \"/...\" to create \"...//...\" [Jim Jagielski]\n\n  *) mod_cache: Wrong content type and character set when\n     mod_cache serves stale content because of a proxy error.\n     PR 53539.  [Rainer Jung, Ruediger Pluem]\n\n  *) mod_proxy_ajp: Fix crash in packet dump code when logging\n     with LogLevel trace7 or trace8.  PR 53730.  [Rainer Jung]\n\n  *) httpd.conf: Removed the configuration directives setting a bad_DNT\n     environment introduced in 2.4.3. The actual directives are commented\n     out in the default conf file.\n\n  *) core: Apply length limit when logging Status header values.\n     [Jeff Trawick, Chris Darroch]\n\n  *) mod_proxy_balancer: The nonce is only derived from the UUID iff\n     not set via the 'nonce' balancer param. [Jim Jagielski]\n\n  *) mod_ssl: Match wildcard SSL certificate names in proxy mode.\n     PR 53006.  [Joe Orton]\n\n  *) Windows: Fix output of -M, -L, and similar command-line options\n     which display information about the server configuration.\n     [Jeff Trawick]\n\nChanges with Apache 2.4.3\n\n  *) SECURITY: CVE-2012-3502  (cve.mitre.org)\n     mod_proxy_ajp, mod_proxy_http: Fix an issue in back end\n     connection closing which could lead to privacy issues due\n     to a response mixup. PR 53727. [Rainer Jung]\n\n  *) SECURITY: CVE-2012-2687 (cve.mitre.org)\n     mod_negotiation: Escape filenames in variant list to prevent a\n     possible XSS for a site where untrusted users can upload files to\n     a location with MultiViews enabled. [Niels Heinen <heinenn google.com>]\n\n  *) mod_authnz_ldap: Don't try a potentially expensive nested groups\n     search before exhausting all AuthLDAPGroupAttribute checks on the\n     current group. PR 52464 [Eric Covener]\n\n  *) mod_lua: Add new directive LuaAuthzProvider to allow implementing an\n     authorization provider in lua. [Stefan Fritsch]\n\n  *) core: Be less strict when checking whether Content-Type is set to\n     \"application/x-www-form-urlencoded\" when parsing POST data,\n     or we risk losing data with an appended charset. PR 53698\n     [Petter Berntsen <petterb gmail.com>]\n\n  *) httpd.conf: Added configuration directives to set a bad_DNT environment\n     variable based on User-Agent and to remove the DNT header field from\n     incoming requests when a match occurs. This currently has the effect of\n     removing DNT from requests by MSIE 10.0 because it deliberately violates\n     the current specification of DNT semantics for HTTP. [Roy T. Fielding]\n\n  *) mod_socache_shmcb: Fix bus error due to a misalignment\n     in some 32 bit builds, especially on Solaris Sparc.\n     PR 53040.  [Rainer Jung]\n\n  *) mod_cache: Set content type in case we return stale content.\n     [Ruediger Pluem]\n\n  *) Windows: Fix SSL failures on windows with AcceptFilter https none.\n     PR 52476.  [Jeff Trawick]\n\n  *) ab: Fix read failure when targeting SSL server.  [Jeff Trawick]\n\n  *) The following now respect DefaultRuntimeDir/DEFAULT_REL_RUNTIMEDIR:\n     - mod_auth_digest: shared memory file\n     [Jeff Trawick]\n\n  *) htpasswd: Use correct file mode for checking if file is writable.\n     PR 45923. [Stefan Fritsch]\n\n  *) mod_rewrite: Fix crash with dbd RewriteMaps. PR 53663. [Mikhail T.\n     <mi apache aldan algebra com>]\n\n  *) mod_ssl: Add new directive SSLCompression to disable TLS-level\n     compression. PR 53219. [Bj\u00f6rn Jacke <bjoern j3e de>, Stefan Fritsch]\n\n  *) mod_lua: Add a few missing request_rec fields. Rename remote_ip to\n     client_ip to match conn_rec. [Stefan Fritsch]\n\n  *) mod_lua: Change prototype of vm_construct, to work around gcc bug which\n     causes a segfault. PR 52779. [Dick Snippe <Dick Snippe tech omroep nl>]\n\n  *) mpm_event: Don't count connections in lingering close state when\n     calculating how many additional connections may be accepted.\n     [Stefan Fritsch]\n\n  *) mod_ssl: If exiting during initialization because of a fatal error,\n     log a message to the main error log pointing to the appropriate\n     virtual host error log. [Stefan Fritsch]\n\n  *) mod_proxy_ajp: Reduce memory usage in case of many keep-alive requests on\n     one connection. PR 52275. [Naohiro Ooiwa <naohiro ooiwa miraclelinux com>]\n\n  *) mod_proxy_balancer: Restore balancing after a failed worker has\n     recovered when using lbmethod_bybusyness.  PR 48735.  [Jeff Trawick]\n\n  *) mod_setenvif: Compile some global regex only once during startup.\n     This should save some memory, especially with .htaccess.\n     [Stefan Fritsch]\n\n  *) core: Add the port number to the vhost's name in the scoreboard.\n     [Stefan Fritsch]\n\n  *) mod_proxy: Fix ProxyPassReverse for balancer configurations.\n     PR 45434.  [Joe Orton]\n\n  *) mod_lua: Add the parsebody function for parsing POST data. PR 53064.\n     [Daniel Gruno]\n\n  *) apxs: Use LDFLAGS from config_vars.mk in addition to CFLAGS and CPPFLAGS.\n     [Stefan Fritsch]\n\n  *) mod_proxy: Fix memory leak or possible corruption in ProxyBlock\n     implementation.  [Ruediger Pluem, Joe Orton]\n\n  *) mod_proxy: Check hostname from request URI against ProxyBlock list,\n     not forward proxy, if ProxyRemote* is configured.  [Joe Orton]\n\n  *) mod_proxy_connect: Avoid DNS lookup on hostname from request URI\n     if ProxyRemote* is configured.  PR 43697.  [Joe Orton]\n\n  *) mpm_event, mpm_worker: Remain active amidst prevalent child process\n     resource shortages.  [Jeff Trawick]\n\n  *) Add \"strict\" and \"warnings\" pragmas to Perl scripts.  [Rich Bowen]\n\n  *) The following now respect DefaultRuntimeDir/DEFAULT_REL_RUNTIMEDIR:\n     - core: the scoreboard (ScoreBoardFile), pid file (PidFile), and\n       mutexes (Mutex)\n     [Jim Jagielski]\n\n  *) ab: Fix bind() errors.  [Joe Orton]\n\n  *) mpm_event: Don't do a blocking write when starting a lingering close\n     from the listener thread. PR 52229. [Stefan Fritsch]\n\n  *) mod_so: If a filename without slashes is specified for LoadFile or\n     LoadModule and the file cannot be found in the server root directory,\n     try to use the standard dlopen() search path. [Stefan Fritsch]\n\n  *) mpm_event, mpm_worker: Fix cases where the spawn rate wasn't reduced\n     after child process resource shortages.  [Jeff Trawick]\n\n  *) mpm_prefork: Reduce spawn rate after a child process exits due to\n     unexpected poll or accept failure.  [Jeff Trawick]\n\n  *) core: Log value of Status header line in script responses rather\n     than the fixed header name.  [Chris Darroch]\n\n  *) mod_ssl: Fix handling of empty response from OCSP server.\n     [Jim Meyering <meyering redhat.com>, Joe Orton]\n\n  *) mpm_event: Fix handling of MaxConnectionsPerChild. [Stefan Fritsch]\n\n  *) mod_authz_core: If an expression in \"Require expr\" returns denied and\n     references %{REMOTE_USER}, trigger authentication and retry. PR 52892.\n     [Stefan Fritsch]\n\n  *) core: Always log if LimitRequestFieldSize triggers.  [Stefan Fritsch]\n\n  *) mod_deflate: Skip compression if compression is enabled at SSL level.\n     [Stefan Fritsch]\n\n  *) core: Add missing HTTP status codes registered with IANA.\n     [Julian Reschke <julian.reschke gmx.de>, Rainer Jung]\n\n  *) mod_ldap: Treat the \"server unavailable\" condition as a transient\n     error with all LDAP SDKs.  [Filip Valder <filip.valder vsb.cz>]\n\n  *) core: Fix spurious \"not allowed here\" error returned when the Options\n     directive is used in .htaccess and \"AllowOverride Options\" (with no\n     specific options restricted) is configured.  PR 53444. [Eric Covener]\n\n  *) mod_authz_core: Fix parsing of Require arguments in <AuthzProviderAlias>.\n     PR 53048. [Stefan Fritsch]\n\n  *) mod_log_config: Fix %{abc}C truncating cookie values at first \"=\".\n     PR 53104. [Greg Ames]\n\n  *) mod_ext_filter: Fix error_log spam when input filters are configured.\n     [Joe Orton]\n\n  *) mod_rewrite: Add \"AllowAnyURI\" option. PR 52774. [Joe Orton]\n\n  *) htdbm, htpasswd: Don't crash if crypt() fails (e.g. with FIPS enabled).\n     [Paul Wouters <pwouters redhat.com>, Joe Orton]\n\n  *) core: Use a TLS 1.0 close_notify alert for internal dummy connection if\n     the chosen listener is configured for https. [Joe Orton]\n\n  *) mod_proxy: Use the the same hostname for SNI as for the HTTP request when\n     forwarding to SSL backends. PR 53134.\n     [Michael Weiser <michael weiser.dinsnail.net>, Ruediger Pluem]\n\n  *) mod_info: Display all registered providers. [Stefan Fritsch]\n\n  *) mod_ssl: Send the error message for speaking http to an https port using\n     HTTP/1.0 instead of HTTP/0.9, and omit the link that may be wrong when\n     using SNI. PR 50823. [Stefan Fritsch]\n\n  *) core: Fix segfault in logging if r->useragent_addr or c->client_addr is\n     unset. PR 53265. [Stefan Fritsch]\n\n  *) log_server_status: Bring Perl style forward to the present, use\n     standard modules, update for new format of server-status output.\n     PR 45424. [Richard Bowen, Dave Brondsema, and others]\n\n  *) mod_sed, mod_log_debug, mod_rewrite: Symbol namespace cleanups.\n     [Joe Orton, Andr\u00e9 Malo]\n\n  *) core: Prevent \"httpd -k restart\" from killing server in presence of\n     config error. [Joe Orton]\n\n  *) mod_proxy_fcgi: If there is an error reading the headers from the\n     backend, send an error to the client. PR 52879. [Stefan Fritsch]\n\nChanges with Apache 2.4.2\n\n  *) SECURITY: CVE-2012-0883 (cve.mitre.org)\n     envvars: Fix insecure handling of LD_LIBRARY_PATH that could lead to the\n     current working directory to be searched for DSOs. [Stefan Fritsch]\n\n  *) mod_slotmem_shm: Honor DefaultRuntimeDir [Jim Jagielski]\n\n  *) mod_ssl: Fix crash with threaded MPMs due to race condition when\n     initializing EC temporary keys. [Stefan Fritsch]\n\n  *) mod_rewrite: Fix RewriteCond integer checks to be parsed correctly.\n     PR 53023. [Axel Reinhold <apache freakout.de>, Andr\u00e9 Malo]\n\n  *) mod_proxy: Add the forcerecovery balancer parameter that determines if\n     recovery for balancer workers is enforced. [Ruediger Pluem]\n\n  *) Fix MPM DSO load failure on AIX.  [Jeff Trawick]\n\n  *) mod_proxy: Correctly set up reverse proxy worker. PR 52935.\n     [Petter Berntsen <petterb gmail.com>]\n\n  *) mod_sed: Don't define PATH_MAX to a potentially undefined value, causing\n     compile problems on GNU hurd. [Stefan Fritsch]\n\n  *) core: Add ap_runtime_dir_relative() and DefaultRuntimeDir.\n     [Jeff Trawick]\n\n  *) core: Fix breakage of Listen directives with MPMs that use a\n     per-directory config. PR 52904. [Stefan Fritsch]\n\n  *) core: Disallow directives in AllowOverrideList which are only allowed\n     in VirtualHost or server context. These are usually not prepared to be\n     called in .htaccess files. [Stefan Fritsch]\n\n  *) core: In AllowOverrideList, do not allow 'None' together with other\n     directives. PR 52823. [Stefan Fritsch]\n\n  *) mod_slotmem_shm: Support DEFAULT_REL_RUNTIMEDIR for file-based shm.\n     [Jim Jagielski]\n\n  *) core: Fix merging of AllowOverrideList and ContentDigest.\n     [Stefan Fritsch]\n\n  *) mod_request: Fix validation of the KeptBodySize argument so it\n     doesn't always throw a configuration error. PR 52981 [Eric Covener]\n\n  *) core: Add filesystem paths to access denied / access failed messages\n     AH00035 and AH00036. [Eric Covener]\n\n  *) mod_dumpio: Properly handle errors from subsequent input filters.\n     PR 52914. [Stefan Fritsch]\n\n  *) Unix MPMs: Fix small memory leak in parent process if connect()\n     failed when waking up children.  [Joe Orton]\n\n  *) \"DirectoryIndex disabled\" now undoes DirectoryIndex settings in\n     the current configuration section, not just previous config sections.\n     PR 52845. [Eric Covener]\n\n  *) mod_xml2enc: Fix broken handling of EOS buckets which could lead to\n     response headers not being sent. PR 52766. [Stefan Fritsch]\n\n  *) mod_ssl: Properly free the GENERAL_NAMEs. PR 32652. [Kaspar Brand]\n\n  *) core: Check during config test that directories for the access\n     logs actually exist. PR 29941. [Stefan Fritsch]\n\n  *) mod_xml2enc, mod_proxy_html: Enable per-module loglevels.\n     [Stefan Fritsch]\n\n  *) mod_filter: Fix segfault with AddOutputFilterByType. PR 52755.\n     [Stefan Fritsch]\n\n  *) mod_session: Sessions are encoded as application/x-www-form-urlencoded\n     strings, however we do not handle the encoding of spaces properly.\n     Fixed. [Graham Leggett]\n\n  *) Configuration: Example in comment should use a path consistent\n     with the default configuration. PR 52715.\n     [Rich Bowen, Jens Schleusener, Rainer Jung]\n\n  *) Configuration: Switch documentation links from trunk to 2.4.\n     [Rainer Jung]\n\n  *) configure: Fix out of tree build using apr and apr-util in srclib.\n     [Rainer Jung]\n\nChanges with Apache 2.4.1\n\n  *) SECURITY: CVE-2012-0053 (cve.mitre.org)\n     Fix an issue in error responses that could expose \"httpOnly\" cookies\n     when no custom ErrorDocument is specified for status code 400.\n     [Eric Covener]\n\n  *) mod_proxy_balancer: Fix crash on Windows. PR 52402 [Mladen Turk]\n\n  *) core: Check during configtest that the directories for error logs exist.\n     PR 29941 [Stefan Fritsch]\n\n  *) Core configuration: add AllowOverride option to treat syntax\n     errors in .htaccess as non-fatal. PR 52439 [Nick Kew, Jim Jagielski]\n\n  *) core: Fix memory consumption in core output filter with streaming\n     bucket types like CGI or PIPE.  [Joe Orton, Stefan Fritsch]\n\n  *) configure: Disable modules at configure time if a prerequisite module\n     is not enabled. PR 52487. [Stefan Fritsch]\n\n  *) Rewrite and proxy now decline what they don't support rather\n     than fail the request. [Joe Orton]\n\n  *) Fix building against external apr plus apr-util if apr is not installed\n     in a system default path. [Rainer Jung]\n\n  *) Doxygen fixes and improvements. [Joe Orton, Igor Gali\u0107]\n\n  *) core: Fix building against PCRE 8.30 by switching from the obsolete\n     pcre_info() to pcre_fullinfo(). PR 52623 [Ruediger Pluem, Rainer Jung]\n\nChanges with Apache 2.4.0\n\n  *) SECURITY: CVE-2012-0031 (cve.mitre.org)\n     Fix scoreboard issue which could allow an unprivileged child process\n     to cause the parent to crash at shutdown rather than terminate\n     cleanly.  [Joe Orton]\n\n  *) mod_ssl: Fix compilation with xlc on AIX. PR 52394. [Stefan Fritsch]\n\n  *) SECURITY: CVE-2012-0021 (cve.mitre.org)\n     mod_log_config: Fix segfault (crash) when the '%{cookiename}C' log format\n     string is in use and a client sends a nameless, valueless cookie, causing\n     a denial of service. The issue existed since version 2.2.17 and 2.3.3.\n     PR 52256.  [Rainer Canavan <rainer-apache 7val com>]\n\n  *) mod_ssl: when compiled against OpenSSL 1.0.1 or later, allow explicit\n     control of TLSv1.1 and TLSv1.2 through the SSLProtocol directive.\n     [Kaspar Brand]\n\n  *) mod_ssl: set OPENSSL_NO_SSL_INTERN when compiling against OpenSSL 1.0.1\n     or later, to improve binary compatibility with future OpenSSL releases.\n     [Kaspar Brand]\n\n  *) mod_mime: Don't arbitrarily bypass AddOutputFilter during a ProxyPass,\n     but then allow AddOutputFilter during a RewriteRule [P]. Make mod_mime\n     behave identically in both cases. PR52342. [Graham Leggett]\n\n  *) Move ab, logresolve, httxt2dbm and apxs to bin from sbin, along with\n     corresponding man pages. [Graham Leggett]\n\n  *) Distinguish properly between the bindir and sbindir directories when\n     installing binaries. Previously all binaries were silently installed to\n     sbindir, whether they were system administration commands or not.\n     [Graham Leggett]\n\nChanges with Apache 2.3.16\n\n  *) SECURITY: CVE-2011-4317 (cve.mitre.org)\n     Resolve additional cases of URL rewriting with ProxyPassMatch or\n     RewriteRule, where particular request-URIs could result in undesired\n     backend network exposure in some configurations.\n     [Joe Orton]\n\n  *) core: Limit line length in .htaccess to 8K like in 2.2.x, to avoid\n     additional DoS potential. [Stefan Fritsch]\n\n  *) core, all modules: Add unique tag to most error log messages. [Stefan\n     Fritsch]\n\n  *) mod_socache_memcache: Change provider name from \"mc\" to \"memcache\" to\n     match module name. [Stefan Fritsch]\n\n  *) mod_slotmem_shm: Change provider name from \"shared\" to \"shm\" to match\n     module name. [Stefan Fritsch]\n\n  *) mod_ldap: Fix segfault with Solaris LDAP when enabling ldaps. This\n     requires an apr-util fix in which is available in apr-util >= 1.4.0.\n     PR 42682. [Stefan Fritsch]\n\n  *) mod_rewrite: Add the AllowNoSlash RewriteOption, which makes it possible\n     for RewriteRules to be placed in .htaccess files that match the directory\n     with no trailing slash. PR 48304.\n     [Matthew Byng-Maddick <matthew byng-maddick bbc.co.uk>]\n\n  *) mod_session_crypto: Add a SessionCryptoPassphraseFile directive so that\n     the administrator can hide the keys from the configuration. [Graham\n     Leggett]\n\n  *) Introduce a per request version of the remote IP address, which can be\n     optionally modified by a module when the effective IP of the client\n     is not the same as the real IP of the client (such as a load balancer).\n     Introduce a per connection \"peer_ip\" and a per request \"client_ip\" to\n     distinguish between the raw IP address of the connection and the effective\n     IP address of the request. [Graham Leggett]\n\n  *) ap_pass_brigade_fchk() function added. [Jim Jagielski]\n\n  *) core: Pass ap_errorlog_info struct to error log hook. [Stefan Fritsch]\n\n  *) mod_cache_disk: Make sure we check return codes on all writes and\n     attempts to close, and clean up after ourselves in these cases.\n     PR43589. [Graham Leggett]\n\n  *) mod_cache_disk: Remove the unnecessary intermediate brigade while\n     writing to disk. Fixes a problem where mod_disk_cache was leaving\n     buckets in the intermediate brigade and not passing them to out on\n     exit. [Florian S. <f_los_ch yahoo.com>, Graham Leggett]\n\n  *) mod_ssl: use a shorter setting for SSLCipherSuite in the default\n     default configuration file, and add some more information about\n     configuring a speed-optimized alternative.\n     [Kaspar Brand]\n\n  *) mod_ssl: drop support for the SSLv2 protocol. [Kaspar Brand]\n\n  *) mod_lua: Stop losing track of all but the most specific LuaHook* directives\n     when multiple per-directory config sections are used.  Adds LuaInherit\n     directive to control how parent sections are merged.  [Eric Covener]\n\n  *) Server directive display (-L): Include directives of DSOs.\n     [Jeff Trawick]\n\n  *) mod_cache: Make sure we merge headers correctly when we handle a\n     non cacheable conditional response. PR52120. [Graham Leggett]\n\n  *) Pre GA removal of components that will not be included:\n     - mod_noloris was superseded by mod_reqtimeout\n     - mod_serf\n     - mpm_simple\n     [Rainer Jung]\n\n  *) core: Set MaxMemFree 2048 by default. [Stefan Fritsch]\n\n  *) mpm_event: Fix assertion failure during very high load. [Stefan Fritsch]\n\n  *) configure: Additional modules loaded by default: mod_headers.\n     Modules moved from module set \"few\" to \"most\" and no longer loaded\n     by default: mod_actions, mod_allowmethods, mod_auth_form, mod_buffer,\n     mod_cgi(d), mod_include, mod_negotiation, mod_ratelimit, mod_request,\n     mod_userdir. [Rainer Jung]\n\n  *) mod_lua: Use the right lua scope when used as a hook. [Rainer Jung]\n\n  *) configure: Only load the really imporant modules (i.e. those enabled by\n     the 'few' selection) by default. Don't handle modules enabled with\n     --enable-foo specially. [Stefan Fritsch]\n\n  *) end-generation hook: Fix false notification of end-of-generation for\n     temporary intervals with no active MPM children.  [Jeff Trawick]\n\n  *) mod_ssl: Add support for configuring persistent TLS session ticket\n     encryption/decryption keys (useful for clustered environments).\n     [Paul Querna, Kaspar Brand]\n\n  *) mod_usertrack: Use random value instead of remote IP address.\n     [Stefan Fritsch]\n\nChanges with Apache 2.3.15\n\n  *) SECURITY: CVE-2011-3348 (cve.mitre.org)\n     mod_proxy_ajp: Respond with HTTP_NOT_IMPLEMENTED when the method is not\n     recognized.  [Jean-Frederic Clere]\n\n  *) SECURITY: CVE-2011-3192 (cve.mitre.org)\n     core: Fix handling of byte-range requests to use less memory, to avoid\n     denial of service. If the sum of all ranges in a request is larger than\n     the original file, ignore the ranges and send the complete file.\n     PR 51714. [Stefan Fritsch, Jim Jagielski, Ruediger Pluem, Eric Covener,\n     <lowprio20 gmail.com>]\n\n  *) SECURITY: CVE-2011-3607 (cve.mitre.org)\n     core: Fix integer overflow in ap_pregsub. This can be triggered e.g.\n     with mod_setenvif via a malicious .htaccess. [Stefan Fritsch]\n\n  *) SECURITY: CVE-2011-3368 (cve.mitre.org)\n     Reject requests where the request-URI does not match the HTTP\n     specification, preventing unexpected expansion of target URLs in\n     some reverse proxy configurations.  [Joe Orton]\n\n  *) configure: Load all modules in the generated default configuration\n     when using --enable-load-all-modules. [Rainer Jung]\n\n  *) mod_reqtimeout: Change the default to set some reasonable timeout\n     values. [Stefan Fritsch]\n\n  *) core, mod_dav_fs: Change default ETag to be \"size mtime\", i.e. remove\n     the inode. PR 49623. [Stefan Fritsch]\n\n  *) mod_lua: Expose SSL variables via r:ssl_var_lookup().  [Eric Covener]\n\n  *) mod_lua: LuaHook{AccessChecker,AuthChecker,CheckUserID,TranslateName}\n     can now additionally be run as \"early\" or \"late\" relative to other modules.\n     [Eric Covener]\n\n  *) configure: By default, only load those modules that are either required\n     or explicitly selected by a configure --enable-foo argument. The\n     LoadModule statements for modules enabled by --enable-mods-shared=most\n     and friends will be commented out. [Stefan Fritsch]\n\n  *) mod_lua: Prevent early Lua hooks (LuaHookTranslateName and\n     LuaHookQuickHandler) from being configured in <Directory>, <Files>,\n     and htaccess where the configuration would have been ignored.\n     [Eric Covener]\n\n  *) mod_lua: Resolve \"attempt to index local 'r' (a userdata value)\" errors\n     in LuaMapHandler scripts [Eric Covener]\n\n  *) mod_log_debug: Rename optional argument from if= to expr=, to be more\n     in line with other config directives. [Stefan Fritsch]\n\n  *) mod_headers: Require an expression to be specified with expr=, to be more\n     in line with other config directives. [Stefan Fritsch]\n\n  *) mod_substitute: To prevent overboarding memory usage, limit line length\n     to 1MB. [Stefan Fritsch]\n\n  *) mod_lua: Make the query string (r.args) writable. [Eric Covener]\n\n  *) mod_include: Add support for application/x-www-form-urlencoded encoding\n     and decoding. [Graham Leggett]\n\n  *) rotatelogs: Add -c option to force logfile creation in every rotation\n     interval, even if empty.  [Jan Kalu\u017ea <jkaluza redhat.com>]\n\n  *) core: Limit ap_pregsub() to 64K, add ap_pregsub_ex() for longer strings.\n     [Stefan Fritsch]\n\n  *) mod_session_crypto: Refactor to support the new apr_crypto API.\n     [Graham Leggett]\n\n  *) http: Add missing Location header if local URL-path is used as\n     ErrorDocument for 30x. [Stefan Fritsch]\n\n  *) mod_buffer: Make sure we step down for subrequests, but not for internal\n     redirects triggered by mod_rewrite. [Graham Leggett]\n\n  *) mod_lua: add r:construct_url as a wrapper for ap_construct_url.\n     [Eric Covener]\n\n  *) mod_remote_ip: Fix configuration of internal proxies. PR 49272.\n     [Jim Riggs <jim riggs me>]\n\n  *) mpm_winnt: Handle AcceptFilter 'none' mode correctly; resolve specific\n     server IP endpoint and remote client IP upon connection.  [William Rowe]\n\n  *) mod_setenvif: Remove OID match which is obsoleted by SetEnvIfExpr with\n     PeerExtList(). [Stefan Fritsch]\n\n  *) mpm_prefork, mpm_worker, mpm_event: If a child is created just before\n     graceful restart and then exits because of a missing lock file, don't\n     shutdown the whole server. PR 39311. [Shawn Michael\n     <smichael rightnow com>]\n\n  *) mpm_event: Check the return value from ap_run_create_connection.\n     PR 41194. [Davi Arnaut]\n\n  *) mod_mime_magic: Add signatures for PNG and SWF to the example config.\n     PR 48352. [Jeremy Wagner-Kaiser <jwagner-kaiser adknowledge com>]\n\n  *) core, unixd: Add -D DUMP_RUN_CFG option to dump some configuration items\n     from the parsed (or default) config. This is useful for init scripts that\n     need to setup temporary directories and permissions. [Stefan Fritsch]\n\n  *) core, mod_actions, mod_asis: Downgrade error log messages which accompany\n     a 404 request status from loglevel error to info. PR 35768. [Stefan\n     Fritsch]\n\n  *) core: Fix hook sorting with Perl modules. PR 45076. [Torsten Foertsch\n     <torsten foertsch gmx net>]\n\n  *) core: Enforce LimitRequestFieldSize after multiple headers with the same\n     name have been merged. [Stefan Fritsch]\n\n  *) mod_ssl: If MaxMemFree is set, ask OpenSSL >= 1.0.0 to reduce memory\n     usage.  PR 51618. [Cristian Rodr\u00edguez <crrodriguez opensuse org>,\n     Stefan Fritsch]\n\n  *) mod_ssl: At startup, when checking a server certificate whether it\n     matches the configured ServerName, also take dNSName entries in the\n     subjectAltName extension into account. PR 32652, PR 47051. [Kaspar Brand]\n\n  *) mod_substitute: Reduce memory usage and copying of data. PR 50559.\n     [Stefan Fritsch]\n\n  *) mod_ssl/proxy: enable the SNI extension for backend TLS connections\n     [Kaspar Brand]\n\n  *) Add wrappers for malloc, calloc, realloc that check for out of memory\n     situations and use them in many places. PR 51568, PR 51569, PR 51571.\n     [Stefan Fritsch]\n\n  *) Fix cross-compilation of mod_cgi/mod_cgid when APR_HAVE_STRUCT_RLIMIT is\n     false but RLIMIT_* are defined.  PR51371. [Eric Covener]\n\n  *) core: Correctly obey ServerName / ServerAlias if the Host header from the\n     request matches the VirtualHost address.\n     PR 51709. [Micha Lenk <micha lenk.info>]\n\n  *) mod_unique_id: Use random number generator to initialize counter.\n     PR 45110. [Stefan Fritsch]\n\n  *) core: Add convenience API for apr_random. [Stefan Fritsch]\n\n  *) core: Add MaxRangeOverlaps and MaxRangeReversals directives to control\n     the number of overlapping and reversing ranges (respectively) permitted\n     before returning the entire resource, with a default limit of 20.\n     [Jim Jagielski]\n\n  *) mod_ldap: Optional function uldap_ssl_supported(r) always returned false\n     if called from a virtual host with mod_ldap directives in it.  Did not\n     affect mod_authnz_ldap's usage of mod_ldap.  [Eric Covener]\n\n  *) mod_filter: Instead of dropping the Accept-Ranges header when a filter\n     registered with AP_FILTER_PROTO_NO_BYTERANGE is present,\n     set the header value to \"none\". [Eric Covener, Ruediger Pluem]\n\n  *) core: Allow MaxRanges none|unlimited|default and set 'Accept-Ranges: none'\n     in the case Ranges are being ignored with MaxRanges none.\n     [Eric Covener]\n\n  *) mod_ssl: revamp CRL-based revocation checking when validating\n     certificates of clients or proxied servers. Completely delegate\n     CRL processing to OpenSSL, and add a new [Proxy]CARevocationCheck\n     directive for controlling the revocation checking mode. [Kaspar Brand]\n\n  *) core: Add MaxRanges directive to control the number of ranges permitted\n     before returning the entire resource, with a default limit of 200.\n     [Eric Covener]\n\n  *) mod_cache: Ensure that CacheDisable can correctly appear within\n     a LocationMatch. [Graham Leggett]\n\n  *) mod_cache: Fix the moving of the CACHE filter, which erroneously\n     stood down if the original filter was not added by configuration.\n     [Graham Leggett]\n\n  *) mod_ssl: improve certificate error logging. PR 47408. [Kaspar Brand]\n\n  *) mod_authz_groupfile: Increase length limit of lines in the group file to\n     16MB. PR 43084. [Stefan Fritsch]\n\n  *) core: Increase length limit of lines in the configuration file to 16MB.\n     PR 45888. PR 50824. [Stefan Fritsch]\n\n  *) core: Add API for resizable buffers. [Stefan Fritsch]\n\n  *) mod_ldap: Enable LDAPConnectionTimeout for LDAP toolkits that have\n     LDAP_OPT_CONNECT_TIMEOUT instead of LDAP_OPT_NETWORK_TIMEOUT, such\n     as Tivoli Directory Server 6.3 and later. [Eric Covener]\n\n  *) mod_ldap: Change default number of retries from 10 to 3, and add\n     an LDAPRetries and LDAPRetryDelay directives. [Eric Covener]\n\n  *) mod_authnz_ldap: Don't retry during authentication, because this just\n     multiplies the ample retries already being done by mod_ldap. [Eric Covener]\n\n  *) configure: Allow to explicitly disable modules even with module selection\n     'reallyall'. [Stefan Fritsch]\n\n  *) mod_rewrite: Check validity of each internal (int:) RewriteMap even if the\n     RewriteEngine is disabled in server context, avoiding a crash while\n     referencing the invalid int: map at runtime. PR 50994.\n     [Ben Noordhuis <info noordhuis nl>]\n\n  *) mod_ssl, configure: require OpenSSL 0.9.7 or later. [Kaspar Brand]\n\n  *) mod_ssl: remove ssl_toolkit_compat layer. [Kaspar Brand]\n\n  *) mod_ssl, configure, ab: drop support for RSA BSAFE SSL-C toolkit.\n     [Kaspar Brand]\n\n  *) mod_usertrack: Run mod_usertrack earlier in the fixups hook to ensure the\n     cookie is set when modules such as mod_rewrite trigger a redirect. Also\n     use r->err_headers_out for the cookie, for the same reason.  PR29755.\n     [Sami J. M\u00e4kinen <sjm almamedia fi>, Eric Covener]\n\n  *) mod_proxy_http, mod_proxy_connect: Add 'proxy-status' and\n     'proxy-source-port' request notes for logging. PR 30195. [Stefan Fritsch]\n\n  *) configure: Enable ldap modules in 'all' and 'most' selections if ldap\n     is compiled into apr-util. [Stefan Fritsch]\n\n  *) core: Add ap_check_cmd_context()-check if a command is executed in\n     .htaccess file. [Stefan Fritsch]\n\n  *) mod_deflate: Fix endless loop if first bucket is metadata. PR 51590.\n     [Torsten Foertsch <torsten foertsch gmx net>]\n\n  *) mod_authn_socache: Fix to work in .htaccess if not configured anywhere\n     in httpd.conf, and introduce an AuthnCacheEnable directive.\n     PR 51991 [Nick Kew]\n\n  *) mod_xml2enc: new (formerly third-party) module supporting\n     internationalisation for filters via smart charset sniffing\n     and conversion. [Nick Kew]\n\n  *) mod_proxy_html: new (formerly third-party) module to fix up\n     HTML links in a reverse proxy situation, where a backend\n     generates URLs that are not resolvable by Clients. [Nick Kew]\n\nChanges with Apache 2.3.14\n\n  *) mod_proxy_ajp: Improve trace logging.  [Rainer Jung]\n\n  *) mod_proxy_ajp: Respect \"reuse\" flag in END_REPONSE packets.\n     [Rainer Jung]\n\n  *) mod_proxy: enable absolute URLs to be rewritten with ProxyPassReverse,\n     e.g. to reverse proxy \"Location: https://other-internal-server/login\"\n     [Nick Kew]\n\n  *) prefork, worker, event: Make sure crashes are logged to the error log if\n     httpd has already detached from the console. [Stefan Fritsch]\n\n  *) prefork, worker, event: Reduce period during startup/restart where a\n     successive signal may be lost. PR 43696. [Arun Bhalla <arun shme net>]\n\n  *) mod_allowmethods: Correct Merging of \"reset\" and do not allow an\n     empty parameter list for the AllowMethods directive. [Rainer Jung]\n\n  *) configure: Update selection of modules for 'all' and 'most'. 'all' will\n     now enable all modules except for example and test modules. Make the\n     selection for 'most' more useful (including ssl and proxy). Both 'all'\n     and 'most' will now disable modules if dependencies are missing instead\n     of aborting. If a specific module is requested with --enable-XXX=yes,\n     missing dependencies will still cause configure to exit with an error.\n     [Stefan Fritsch]\n\n  *) mod_ldap: Revert the integration of apr-ldap as ap_ldap which was done\n     in 2.3.13. [Stefan Fritsch]\n\n  *) core: For '*' or '_default_' vhosts, use a wildcard address of any\n     address family, rather than IPv4 only.  [Joe Orton]\n\n  *) core, mod_rewrite, mod_ssl, mod_nw_ssl: Make the SERVER_NAME variable\n     include [ ] for literal IPv6 addresses, as mandated by RFC 3875.\n     PR 26005. [Stefan Fritsch]\n\n  *) mod_negotiation: Fix parsing of Content-Length in type maps. PR 42203.\n     [Nagae Hidetake <nagae eagan jp>]\n\n  *) core: Add more logging to ap_scan_script_header_err* functions. Add\n     ap_scan_script_header_err*_ex functions that take a module index for\n     logging.\n     mod_cgi, mod_cgid, mod_proxy_fcgi, mod_proxy_scgi, mod_isapi: Use the\n     new functions in order to make logging configurable per-module.\n     [Stefan Fritsch]\n\n  *) mod_dir: Add DirectoryIndexRedirect to send an external redirect to\n     the proper index.  [Eric Covener]\n\n  *) mod_deflate: Don't try to compress requests with a zero sized body.\n     PR 51350. [Stefan Fritsch]\n\n  *) core: Fix startup on IPv6-only systems. PR 50592. [Joe Orton,\n     <root linkage white-void net>]\n\n  *) suexec: Add environment variables CONTEXT_DOCUMENT_ROOT, CONTEXT_PREFIX,\n     REDIRECT_ERROR_NOTES, REDIRECT_SCRIPT_FILENAME, REQUEST_SCHEME to the\n     whitelist in suexec. PR 51499. [Graham Laverty <graham reg ca>,\n     Stefan Fritsch]\n\n  *) mod_rewrite: Fix regexp RewriteCond with NoCase. [Stefan Fritsch]\n\n  *) mod_log_debug: New module that allows to log custom messages at various\n     phases in the request processing. [Stefan Fritsch]\n\n  *) mod_ssl: Add some debug logging when loading server certificates.\n     PR 37912. [Nick Burch <nick burch alfresco com>]\n\n  *) configure: Support reallyall option also for --enable-mods-static.\n     [Rainer Jung]\n\n  *) mod_socache_dc: add --with-distcache to configure for choosing\n     the distcache installation directory. [Rainer Jung]\n\n  *) mod_socache_dc: use correct build variable MOD_SOCACHE_DC_LDADD\n     instead of MOD_SOCACHE_LDADD in build macro. [Rainer Jung]\n\n  *) mod_lua, mod_deflate: respect platform specific runpath linker\n     flag. [Rainer Jung]\n\n  *) configure: Only link the httpd binary against PCRE. No other support\n     binary needs PCRE. [Rainer Jung]\n\n  *) configure: tolerate dependency checking failures for modules if\n     they have been enabled implicitly. [Rainer Jung]\n\n  *) configure: Allow to specify module specific custom linker flags via\n     the MOD_XXX_LDADD variables. [Rainer Jung]\n\nChanges with Apache 2.3.13\n\n  *) ab: Support specifying the local address to use. PR 48930.\n     [Peter Schuller <scode spotify com>]\n\n  *) core: Add support to ErrorLogFormat for logging the system unique\n     thread id under Linux. [Stefan Fritsch]\n\n  *) event: New AsyncRequestWorkerFactor directive to influence how many\n     connections will be accepted per process. [Stefan Fritsch]\n\n  *) prefork, worker, event: Rename MaxClients to MaxRequestWorkers which\n     describes more accurately what it does. [Stefan Fritsch]\n\n  *) rotatelogs: Add -p argument to specify custom program to invoke\n     after a log rotation.  PR 51285. [Sven Ulland <sveniu ifi.uio.no>,\n     Joe Orton]\n\n  *) mod_ssl: Don't do OCSP checks for valid self-issued certs. [Kaspar Brand]\n\n  *) mod_ssl: Avoid unnecessary renegotiations with SSLVerifyDepth 0.\n     PR 48215. [Kaspar Brand]\n\n  *) mod_status: Display information about asynchronous connections in the\n     server-status. PR 44377. [Stefan Fritsch]\n\n  *) mpm_event: If the number of connections of a process is very high, or if\n     all workers are busy, don't accept new connections in that process.\n     [Stefan Fritsch]\n\n  *) mpm_event: Process lingering close asynchronously instead of tying up\n     worker threads. [Jeff Trawick, Stefan Fritsch]\n\n  *) mpm_event: If MaxMemFree is set, limit the number of pools that is kept\n     around. [Stefan Fritsch]\n\n  *) mpm_event: Fix graceful restart aborting connections. PR 43359.\n     [Takashi Sato <takashi lans-tv com>]\n\n  *) mod_ssl: Disable AECDH ciphers in example config. PR 51363.\n     [Rob Stradling <rob comodo com>]\n\n  *) core: Introduce new function ap_get_conn_socket() to access the socket of\n     a connection. [Stefan Fritsch]\n\n  *) mod_data: Introduce a filter to support RFC2397 data URLs. [Graham\n     Leggett]\n\n  *) mod_userdir/mod_alias/mod_vhost_alias: Correctly set DOCUMENT_ROOT,\n     CONTEXT_DOCUMENT_ROOT, CONTEXT_PREFIX. PR 26052. PR 46198.\n     [Stefan Fritsch]\n\n  *) core: Allow to override document_root on a per-request basis. Introduce\n     new context_document_root and context_prefix which provide information\n     about non-global URI-to-directory mappings (from e.g. mod_userdir or\n     mod_alias) to scripts. PR 49705. [Stefan Fritsch]\n\n  *) core: Add <ElseIf> and <Else> to complement <If> sections.\n     [Stefan Fritsch]\n\n  *) mod_ext_filter: Remove DebugLevel option in favor of per-module loglevel.\n     [Stefan Fritsch]\n\n  *) mod_include: Make the \"#if expr\" element use the new \"ap_expr\" expression\n     parser. The old parser can still be used by setting the new directive\n     SSILegacyExprParser. [Stefan Fritsch]\n\n  *) core: Add some features to ap_expr for use by mod_include: a restricted\n     mode that does not allow to bypass request access restrictions; new\n     variables DOCUMENT_URI (alias for REQUEST_URI), LAST_MODIFIED; -A as an\n     alias for -U; an additional data entry in ap_expr_eval_ctx_t for use by\n     the consumer; an extensible ap_expr_exec_ctx() API that allows to use that\n     data entry. [Stefan Fritsch]\n\n  *) mod_include: Merge directory configs instead of one SSI* config directive\n     causing all other per-directory SSI* config directives to be reset.\n     [Stefan Fritsch]\n\n  *) mod_charset_lite: Remove DebugLevel option in favour of per-module\n     loglevel. [Stefan Fritsch]\n\n  *) core: Add ap_regexec_len() function that works with non-null-terminated\n     strings. PR 51231. [Yehezkel Horowitz <horowity checkpoint com>]\n\n  *) mod_authnz_ldap: If the LDAP server returns constraint violation,\n     don't treat this as an error but as \"auth denied\". [Stefan Fritsch]\n\n  *) mod_proxy_fcgi|scgi: Add support for \"best guess\" of PATH_INFO\n     for SCGI/FCGI. PR 50880, 50851. [Mark Montague <mark catseye.org>,\n     Jim Jagielski]\n\n  *) mod_cache: When content is served stale, and there is no means to\n     revalidate the content using ETag or Last-Modified, and we have\n     mandated no stale-on-error behaviour, stand down and don't cache.\n     Saves a cache write that will never be read.\n     [Graham Leggett]\n\n  *) mod_reqtimeout: Fix a timed out connection going into the keep-alive\n     state after a timeout when discarding a request body. PR 51103.\n     [Stefan Fritsch]\n\n  *) core: Add various file existence test operators to ap_expr.\n     [Stefan Fritsch]\n\n  *) mod_proxy_express: New mass reverse-proxy switch extension for\n     mod_proxy. [Jim Jagielski]\n\n  *) configure: Fix script error when configuring module set \"reallyall\".\n     [Rainer Jung]\n\nChanges with Apache 2.3.12\n\n  *) configure, core: Provide easier support for APR's hook probe\n     capability. [Jim Jagielski, Jeff Trawick]\n\n  *) Silence autoconf 2.68 warnings.  [Rainer Jung]\n\n  *) mod_authnz_ldap: Resolve crash when LDAP is used for authorization only\n     [Scott Hill <shill genscape.com>]\n\n  *) support: Make sure check_forensic works with mod_unique_id loaded\n     [Joe Schaefer]\n\n  *) Add child_status hook for tracking creation/termination of MPM child\n     processes.  Add end_generation hook for notification when the last\n     MPM child of a generation exits. [Jeff Trawick]\n\n  *) mod_ldap: Make LDAPSharedCacheSize 0 create a non-shared-memory cache per\n     process as opposed to disabling caching completely. This allows to use\n     the non-shared-memory cache as a workaround for the shared memory cache\n     not being available during graceful restarts. PR 48958. [Stefan Fritsch]\n\n  *) Add new ap_reserve_module_slots/ap_reserve_module_slots_directive API,\n     necessary if a module (like mod_perl) registers additional modules late\n     in the startup phase. [Stefan Fritsch]\n\n  *) core: Prevent segfault if DYNAMIC_MODULE_LIMIT is reached. PR 51072.\n     [Torsten F\u00f6rtsch <torsten foertsch gmx net>]\n\n  *) WinNT MPM: Improve robustness under heavy load.  [Jeff Trawick]\n\n  *) MinGW build improvements.  PR 49535.  [John Vandenberg\n     <jayvdb gmail.com>, Jeff Trawick]\n\n  *) core: Support module names with colons in loglevel configuration.\n     [Torsten F\u00f6rtsch <torsten foertsch gmx net>]\n\n  *) mod_ssl, ab: Support OpenSSL compiled without SSLv2 support.\n     [Stefan Fritsch]\n\n  *) core: Abort if the MPM is changed across restart.  [Jeff Trawick]\n\n  *) mod_proxy_ajp: Add support for 'ProxyErrorOverride on'. PR 50945.\n     [Peter Pramberger <peter pramberger.at>, Jim Jagielski]\n\n  *) mod_proxy_fcgi: Add support for 'ProxyErrorOverride on'. PR 50913.\n     [Mark Montague <mark catseye.org>, Jim Jagielski]\n\n  *) core: Change the APIs of ap_cfg_getline() and ap_cfg_getc() to return an\n     error code. Abort with a nice error message if a config line is too long.\n     Partial fix for PR 50824. [Stefan Fritsch]\n\n  *) mod_info: Dump config to stdout during startup if -DDUMP_CONFIG is\n     specified. PR 31956. [Stefan Fritsch]\n\n  *) Restore visibility of DEFAULT_PIDLOG to core and modules.  MPM\n     helper function ap_remove_pid() added.  [Jeff Trawick]\n\n  *) Enable DEFAULT_REL_RUNTIMEDIR on Windows and NetWare.  [various]\n\n  *) Correct C++ incompatibility with http_log.h.  [Stefan Fritsch, Jeff\n     Trawick]\n\n  *) mod_log_config: Prevent segfault. PR 50861. [Torsten F\u00f6rtsch\n     <torsten.foertsch gmx.net>]\n\n  *) core: AllowEncodedSlashes new option NoDecode to allow encoded slashes\n     in request URL path info but not decode them. Change behavior of option\n     \"On\" to decode the encoded slashes as 2.0 and 2.2 do.  PR 35256,\n     PR 46830.  [Dan Poirier]\n\n  *) mod_ssl: Check SNI hostname against Host header case-insensitively.\n     PR 49491.  [Mayank Agrawal <magrawal.08 gmail.com>]\n\n  *) mod_ldap: Add LDAPConnectionPoolTTL to give control over lifetime\n     of bound backend LDAP connections.  PR47634 [Eric Covener]\n\n  *) mod_cache: Make CacheEnable and CacheDisable configurable per\n     directory in addition to per server, making them work from within\n     a LocationMatch. [Graham Leggett]\n\n  *) worker, event, prefork: Correct several issues when built as\n     DSOs; most notably, the scoreboard was reinitialized during graceful\n     restart, such that processes of the previous generation were not\n     observable.  [Jeff Trawick]\n\nChanges with Apache 2.3.11\n\n  *) mod_win32: Added shebang check for '! so that .vbs scripts work as CGI.\n     Win32's cscript interpreter can only use a single quote as comment char.\n     [Guenter Knauf]\n\n  *) mod_proxy: balancer-manager now uses POST instead of GET.\n     [Jim Jagielski]\n\n  *) core: new util function: ap_parse_form_data(). Previously,\n     this capability was tucked away in mod_request. [Jim Jagielski]\n\n  *) core: new hook: ap_run_pre_read_request. [Jim Jagielski]\n\n  *) modules: Fix many modules that were not correctly initializing if they\n     were not active during server startup but got enabled later during a\n     graceful restart. [Stefan Fritsch]\n\n  *) core: Create new ap_state_query function that allows modules to determine\n     if the current configuration run is the initial one at server startup,\n     and if the server is started for testing/config dumping only.\n     [Stefan Fritsch]\n\n  *) mod_proxy: Runtime configuration of many parameters for existing\n     balancers via the balancer-manager. [Jim Jagielski]\n\n  *) mod_proxy: Runtime addition of new workers (BalancerMember) for existing\n     balancers via the balancer-manager. [Jim Jagielski]\n\n  *) mod_cache: When a bad Expires date is present, we need to behave as if\n     the Expires is in the past, not as if the Expires is missing. PR 16521.\n     [Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_cache: We must ignore quoted-string values that appear in a\n     Cache-Control header. PR 50199. [Graham Leggett]\n\n  *) mod_dav: Revert change to send 501 error if unknown Content-* header is\n    received for a PUT request. PR 42978. [Stefan Fritsch]\n\n  *) mod_cache: Respect s-maxage as described by RFC2616 14.9.3, which must\n     take precedence if present. PR 35247. [Graham Leggett]\n\n  *) mod_ssl: Fix a possible startup failure if multiple SSL vhosts\n     are configured with the same ServerName and private key file.\n     [Masahiro Matsuya <mmatsuya redhat.com>, Joe Orton]\n\n  *) mod_socache_dc: Make module compile by fixing some typos.\n     PR 50735 [Mark Montague <mark catseye.org>]\n\n  *) prefork: Update MPM state in children during a graceful stop or\n     restart.  PR 41743.  [Andrew Punch <andrew.punch 247realmedia.com>]\n\n  *) mod_mime: Ignore leading dots when looking for mime extensions.\n     PR 50434 [Stefan Fritsch]\n\n  *) core: Add support to set variables with the 'Define' directive. The\n     variables that can then be used in the config using the ${VAR} syntax\n     known from envvar interpolation. [Stefan Fritsch]\n\n  *) mod_proxy_http: make adding of X-Forwarded-* headers configurable.\n     ProxyAddHeaders defaults to On. [Vincent Deffontaines]\n\n  *) mod_slotmem_shm: Increase memory alignment for slotmem data.\n     [Rainer Jung]\n\n  *) mod_ssl: Add config options for OCSP: SSLOCSPResponderTimeout,\n     SSLOCSPResponseMaxAge, SSLOCSPResponseTimeSkew.\n     [Kaspar Brand <httpd-dev.2011 velox.ch>]\n\n  *) mod_ssl: Revamp output buffering to reduce network overhead for\n     output fragmented into many buckets, such as chunked HTTP responses.\n     [Joe Orton]\n\n  *) core: Apply <If> sections to all requests, not only to file base requests.\n     Allow to use <If> inside <Directory>, <Location>, and <Files> sections.\n     The merging of <If> sections now happens after the merging of <Location>\n     sections, even if an <If> section is embedded inside a <Directory> or\n     <Files> section.  [Stefan Fritsch]\n\n  *) mod_proxy: Refactor usage of shared data by dropping the scoreboard\n     and using slotmem. Create foundation for dynamic growth/changes of\n     members within a balancer. Remove BalancerNonce in favor of a\n     per-balancer 'nonce' parameter. [Jim Jagielski]\n\n  *) mod_status: Don't show slots which are disabled by MaxClients as open.\n     PR 47022 [Jordi Prats <jordi prats gmail com>, Stefan Fritsch]\n\n  *) mpm_prefork: Fix ap_mpm_query results for AP_MPMQ_MAX_DAEMONS and\n     AP_MPMQ_MAX_THREADS.\n\n  *) mod_authz_core: Fix bug in merging logic if user-based and non-user-based\n     authorization directives were mixed. [Stefan Fritsch]\n\n  *) mod_authn_socache: change directive name from AuthnCacheProvider\n     to AuthnCacheProvideFor.  The term \"provider\" is overloaded in\n     this module, and we should avoid confusion between the provider\n     of a backend (AuthnCacheSOCache) and the authn provider(s) for\n     which this module provides cacheing (AuthnCacheProvideFor).\n     [Nick Kew]\n\n  *) mod_proxy_http: Allocate the fake backend request from a child pool\n     of the backend connection, instead of misusing the pool of the frontend\n     request. Fixes a thread safety issue where buckets set aside in the\n     backend connection leak into other threads, and then disappear when\n     the frontend request is cleaned up, in turn causing corrupted buckets\n     to make other threads spin. [Graham Leggett]\n\n  *) mod_ssl: Change the format of the SSL_{CLIENT,SERVER}_{I,S}_DN variables\n     to be RFC 2253 compatible, convert non-ASCII characters to UTF8, and\n     escape other special characters with backslashes. The old format can\n     still be used with the LegacyDNStringFormat argument to SSLOptions.\n\n  *) core, mod_rewrite: Make the REQUEST_SCHEME variable available to\n     scripts and mod_rewrite. [Stefan Fritsch]\n\n  *) mod_rewrite: Allow to use arbitrary boolean expressions (ap_expr) in\n     RewriteCond. [Stefan Fritsch]\n\n  *) mod_rewrite: Allow to unset environment variables using E=!VAR.\n     PR 49512. [Mark Drayton <mark markdrayton info>, Stefan Fritsch]\n\n  *) mod_headers: Restore the 2.3.8 and earlier default for the first\n     argument of the Header directive (\"onsuccess\").  [Eric Covener]\n\n  *) core: Disallow the mixing of relative and absolute Options PR 33708.\n     [S\u00f6nke Tesch <st kino-fahrplan.de>]\n\n  *) core: When exporting request headers to HTTP_* environment variables,\n     drop variables whose names contain invalid characters. Describe in the\n     docs how to restore the old behaviour. [Malte S. Stretz <mss apache org>]\n\n  *) core: When selecting an IP-based virtual host, favor an exact match for\n     the port over a wildcard (or omitted) port instead of favoring the one\n     that came first in the configuration file. [Eric Covener]\n\n  *) core: Overlapping virtual host address/port combinations  now implicitly\n     enable name-based virtual hosting for that address.  The NameVirtualHost\n     directive has no effect, and _default_ is interpreted the same as \"*\".\n     [Eric Covener]\n\n  *) core: In the absence of any Options directives, the default is now\n     \"FollowSymlinks\" instead of \"All\".  [Igor Gali\u0107]\n\n  *) rotatelogs: Add -e option to write logs through to stdout for optional\n     further processing. [Graham Leggett]\n\n  *) mod_ssl: Correctly read full lines in input filter when the line is\n     incomplete during first read. PR 50481. [Ruediger Pluem]\n\n  *) mod_authz_core: Add AuthzSendForbiddenOnFailure directive to allow\n     sending '403 FORBIDDEN' instead of '401 UNAUTHORIZED' if authorization\n     fails for an authenticated user. PR 40721. [Stefan Fritsch]\n\nChanges with Apache 2.3.10\n\n  *) mod_rewrite: Don't implicitly URL-escape the original query string\n     when no substitution has changed it. PR 50447. [Eric Covener]\n\n  *) core: Honor 'AcceptPathInfo OFF' during internal redirects,\n     such as per-directory mod_rewrite substitutions.  PR 50349.\n     [Eric Covener]\n\n  *) mod_rewrite: Add 'RewriteOptions InheritBefore' to put the base\n     rules/conditions before the overridden rules/conditions.  PR 39313.\n     [J\u00e9r\u00f4me Grandjanny <jerome.grandjanny cea.fr>]\n\n  *) mod_autoindex: add IndexIgnoreReset to reset the list of IndexIgnored\n     filenames in higher precedence configuration sections.  PR 24243.\n     [Eric Covener]\n\n  *) mod_cgid: RLimit* directive support for mod_cgid.  PR 42135\n     [Eric Covener]\n\n  *) core: Fail startup when the argument to ServerName looks like a glob\n     or a regular expression instead of a hostname (*?[]).  PR 39863\n     [Rahul Nair <rahul.g.nair gmail.com>]\n\n  *) mod_userdir: Add merging of enable, disable, and filename arguments\n     to UserDir directive, leaving enable/disable of userlists unmerged.\n     PR 44076 [Eric Covener]\n\n  *) httpd: When no -k option is provided on the httpd command line, the server\n     was starting without checking for an existing pidfile.  PR 50350\n     [Eric Covener]\n\n  *) mod_proxy: Put the worker in error state if the SSL handshake with the\n     backend fails. PR 50332.\n     [Daniel Ruggeri <DRuggeri primary.net>, Ruediger Pluem]\n\n  *) mod_cache_disk: Fix Windows build which was broken after renaming\n     the module. [Gregg L. Smith]\n\nChanges with Apache 2.3.9\n\n  *) SECURITY: CVE-2010-1623 (cve.mitre.org)\n     Fix a denial of service attack against mod_reqtimeout.\n     [Stefan Fritsch]\n\n  *) mod_headers: Change default first argument of Header directive\n     from \"onsuccess\" to \"always\". [Eric Covener]\n\n  *) mod_include: Add the onerror attribute to the include element,\n     allowing an URL to be specified to include on error. [Graham\n     Leggett]\n\n  *) mod_cache_disk: mod_disk_cache renamed to mod_cache_disk, to be\n     consistent with the naming of other modules. [Graham Leggett]\n\n  *) mod_setenvif: Add SetEnvIfExpr directive to set env var depending on\n     expression. [Stefan Fritsch]\n\n  *) mod_proxy: Fix ProxyPassInterpolateEnv directive. PR 50292.\n     [Stefan Fritsch]\n\n  *) suEXEC: Add Suexec directive to disable suEXEC without renaming the\n     binary (Suexec Off), or force startup failure if suEXEC is required\n     but not supported (Suexec On).  Change SuexecUserGroup to fail\n     startup instead of just printing a warning if suEXEC is disabled.\n     [Jeff Trawick]\n\n  *) core: Add Error directive for aborting startup or htaccess processing\n     with a specified error message.  [Jeff Trawick]\n\n  *) mod_rewrite: Fix the RewriteEngine directive to work within a\n     location. Previously, once RewriteEngine was switched on globally,\n     it was impossible to switch off. [Graham Leggett]\n\n  *) core, mod_include, mod_ssl: Move the expression parser derived from\n     mod_include back into mod_include. Replace ap_expr with a parser\n     derived from mod_ssl's parser. Make mod_ssl use the new parser. Rework\n     ap_expr's public interface and provide hooks for modules to add variables\n     and functions. [Stefan Fritsch]\n\n  *) core: Do the hook sorting earlier so that the hooks are properly sorted\n     for the pre_config hook and during parsing the config. [Stefan Fritsch]\n\n  *) core: In the absence of any AllowOverride directives, the default is now\n     \"None\" instead of \"All\".  PR49823 [Eric Covener]\n\n  *) mod_proxy: Don't allow ProxyPass or ProxyPassReverse in\n     <Directory> or <Files>. PR47765 [Eric Covener]\n\n  *) prefork/worker/event MPMS: default value (when no directive is present)\n     of MaxConnectionsPerChild/MaxRequestsPerChild is changed to 0 from 10000\n     to match default configuration and manual. PR47782 [Eric Covener]\n\n  *) proxy_connect: Don't give up in the middle of a CONNECT tunnel\n     when the child process is starting to exit.  PR50220. [Eric Covener]\n\n  *) mod_autoindex: Fix inheritance of mod_autoindex directives into\n     contexts that don't have any mod_autoindex directives. PR47766.\n     [Eric Covener]\n\n  *) mod_rewrite: Add END flag for RewriteRule to prevent further rounds\n     of rewrite processing when a per-directory substitution occurs.\n     [Eric Covener]\n\n  *) mod_ssl: Make sure to always log an error if loading of CA certificates\n     fails. PR 40312. [Paul Tiemann <issues apache org ourdetour com>]\n\n  *) mod_dav: Send 501 error if unknown Content-* header is received for a PUT\n     request (RFC 2616 9.6). PR 42978. [Stefan Fritsch]\n\n  *) mod_dav: Send 400 error if malformed Content-Range header is received for\n     a put request (RFC 2616 14.16). PR 49825. [Stefan Fritsch]\n\n  *) mod_proxy: Release the backend connection as soon as EOS is detected,\n     so the backend isn't forced to wait for the client to eventually\n     acknowledge the data. [Graham Leggett]\n\n  *) mod_proxy: Optimise ProxyPass within a Location so that it is stored\n     per-directory, and chosen during the location walk. Make ProxyPass\n     work correctly from within a LocationMatch. [Graham Leggett]\n\n  *) core: Fix segfault if per-module LogLevel is on virtual host\n     scope. PR 50117. [Stefan Fritsch]\n\n  *) mod_proxy: Move the ProxyErrorOverride directive to have per\n     directory scope. [Graham Leggett]\n\n  *) mod_allowmethods: New module to deny certain HTTP methods without\n     interfering with authentication/authorization. [Paul Querna,\n     Igor Gali\u0107, Stefan Fritsch]\n\n  *) mod_ssl: Log certificate information and improve error message if client\n     cert verification fails. PR 50093, PR 50094. [Lassi Tuura <lat cern ch>,\n     Stefan Fritsch]\n\n  *) htcacheclean: Teach htcacheclean to limit cache size by number of\n     inodes in addition to size of files. Prevents a cache disk from\n     running out of space when many small files are cached.\n     [Graham Leggett]\n\n  *) core: Rename MaxRequestsPerChild to MaxConnectionsPerChild, which\n     describes more accurately what the directive does. The old name\n     still works but logs a warning. [Stefan Fritsch]\n\n  *) mod_cache: Optionally serve stale data when a revalidation returns a\n     5xx response, controlled by the CacheStaleOnError directive.\n     [Graham Leggett]\n\n  *) htcacheclean: Allow the listing of valid URLs within the cache, with\n     the option to list entry metadata such as sizes and times. [Graham\n     Leggett]\n\n  *) mod_cache: correctly parse quoted strings in cache headers.\n     PR 50199 [Nick Kew]\n\n  *) mod_cache: Allow control over the base URL of reverse proxied requests\n     using the CacheKeyBaseURL directive, so that the cache key can be\n     calculated from the endpoint URL instead of the server URL. [Graham\n     Leggett]\n\n  *) mod_cache: CacheLastModifiedFactor, CacheStoreNoStore, CacheStorePrivate,\n     CacheStoreExpired, CacheIgnoreNoLastMod, CacheDefaultExpire,\n     CacheMinExpire and CacheMaxExpire can be set per directory/location.\n     [Graham Leggett]\n\n  *) mod_disk_cache: CacheMaxFileSize, CacheMinFileSize, CacheReadSize and\n     CacheReadTime can be set per directory/location. [Graham Leggett]\n\n  *) core: Speed up config parsing if using a very large number of config\n     files. PR 50002 [andrew cloudaccess net]\n\n  *) mod_cache: Support the caching of HEAD requests. [Graham Leggett]\n\n  *) htcacheclean: Allow the option to round up file sizes to a given\n     block size, improving the accuracy of disk usage. [Graham Leggett]\n\n  *) mod_ssl: Add authz providers for use with mod_authz_core and its\n     RequireAny/RequireAll containers: 'ssl' (equivalent to SSLRequireSSL),\n     'ssl-verify-client' (for use with 'SSLVerifyClient optional'), and\n     'ssl-require' (expressions with same syntax as SSLRequire).\n     [Stefan Fritsch]\n\n  *) mod_ssl: Make the ssl expression parser thread-safe. It now requires\n     bison instead of yacc. [Stefan Fritsch]\n\n  *) mod_disk_cache: Change on-disk header file format to support the\n     link of the device/inode of the data file to the matching header\n     file, and to support the option of not writing a data file when\n     the data file is empty. [Graham Leggett]\n\n  *) core/mod_unique_id: Add generate_log_id hook to allow to use\n     the ID generated by mod_unique_id as error log ID for requests.\n     [Stefan Fritsch]\n\n  *) mod_cache: Make sure that we never allow a 304 Not Modified response\n     that we asked for to leak to the client should the 304 response be\n     uncacheable. PR45341 [Graham Leggett]\n\n  *) mod_cache: Add the cache_status hook to register the final cache\n     decision hit/miss/revalidate. Add optional support for an X-Cache\n     and/or an X-Cache-Detail header to add the cache status to the\n     response. PR48241 [Graham Leggett]\n\n  *) mod_authz_host: Add 'local' provider that matches connections originating\n     on the local host. PR 19938. [Stefan Fritsch]\n\n  *) Event MPM: Fix crash accessing pollset on worker thread when child\n     process is exiting.  [Jeff Trawick]\n\n  *) core: For process invocation (cgi, fcgid, piped loggers and so forth)\n     pass the system library path (LD_LIBRARY_PATH or platform-specific\n     variables) along with the system PATH, by default.  Both should be\n     overridden together as desired using PassEnv etc; see mod_env.\n     [William Rowe]\n\n  *) mod_cache: Introduce CacheStoreExpired, to allow administrators to\n     capture a stale backend response, perform If-Modified-Since requests\n     against the backend, and serving from the cache all 304 responses.\n     This restores pre-2.2.4 cache behavior.  [William Rowe]\n\n  *) mod_rewrite: Introduce <=, >= string comparison operators, and integer\n     comparators -lt, -le, -eq, -ge, and -gt.  To help bash users and drop\n     the ambiguity of the symlink test \"-ltest\", introduce -h or -L as\n     symlink test operators.  [William Rowe]\n\n  *) mod_cache: Give the cache provider the opportunity to choose to cache\n     or not cache based on the buckets present in the brigade, such as the\n     presence of a FILE bucket.\n     [Graham Leggett]\n\n  *) mod_authz_core: Allow authz providers to check args while reading the\n     config and allow to cache parsed args. Move 'all' and 'env' authz\n     providers from mod_authz_host to mod_authz_core. Add 'method' authz\n     provider depending on the HTTP method.  [Stefan Fritsch]\n\n  *) mod_include: Move the request_rec within mod_include to be\n     exposed within include_ctx_t. [Graham Leggett]\n\n  *) mod_include: Reinstate support for UTF-8 character sets by allowing a\n     variable being echoed or set to be decoded and then encoded as separate\n     steps. PR47686 [Graham Leggett]\n\n  *) mod_cache: Add a discrete commit_entity() provider function within the\n     mod_cache provider interface which is called to indicate to the\n     provider that caching is complete, giving the provider the opportunity\n     to commit temporary files permanently to the cache in an atomic\n     fashion. Replace the inconsistent use of error cleanups with a formal\n     set of pool cleanups attached to a subpool, which is destroyed on error.\n     [Graham Leggett]\n\n  *) mod_cache: Change the signature of the store_body() provider function\n     within the mod_cache provider interface to support an \"in\" brigade\n     and an \"out\" brigade instead of just a single input brigade. This\n     gives a cache provider the option to consume only part of the brigade\n     passed to it, rather than the whole brigade as was required before.\n     This fixes an out of memory and a request timeout condition that would\n     occur when the original document was a large file. Introduce\n     CacheReadSize and CacheReadTime directives to mod_disk_cache to control\n     the amount of data to attempt to cache at a time. [Graham Leggett]\n\n  *) core: Add ErrorLogFormat to allow configuring error log format, including\n     additional information that is logged once per connection or request. Add\n     error log IDs for connections and request to allow correlating error log\n     lines and the corresponding access log entry. [Stefan Fritsch]\n\n  *) core: Disable sendfile by default. [Stefan Fritsch]\n\n  *) mod_cache: Check the request to determine whether we are allowed\n     to return cached content at all, and respect a \"Cache-Control:\n     no-cache\" header from a client. Previously, \"no-cache\" would\n     behave like \"max-age=0\". [Graham Leggett]\n\n  *) mod_cache: Use a proper filter context to hold filter data instead\n     of misusing the per-request configuration. Fixes a segfault on trunk\n     when the normal handler is used. [Graham Leggett]\n\n  *) mod_cgid: Log a warning if the ScriptSock path is truncated because\n     it is too long. PR 49388.  [Stefan Fritsch]\n\n  *) vhosts: Do not allow _default_ in NameVirtualHost, or mixing *\n     and non-* ports on NameVirtualHost, or multiple NameVirtualHost\n     directives for the same address:port, or NameVirtualHost\n     directives with no matching VirtualHosts, or multiple ip-based\n     VirtualHost sections for the same address:port.  These were\n     previously accepted with a warning, but the behavior was\n     undefined.  [Dan Poirier]\n\n  *) mod_remoteip: Fix a segfault when using mod_remoteip in conjunction with\n     Allow/Deny. PR 49838.  [Andrew Skalski <voltara gmail.com>]\n\n  *) core: DirectoryMatch can now match on the end of line character ($),\n     and sub-directories of matched directories are no longer implicitly\n     matched.  PR49809 [Eric Covener]\n\n  *) Regexps: introduce new higher-level regexp utility including parsing\n     and executing perl-style regexp ops (e.g s/foo/bar/i) and regexp memory\n     [Nick Kew]\n\n  *) Proxy: support setting source address.  PR 29404\n     [Multiple contributors iterating through bugzilla,\n      Aron Ujvari <xanco nikhok.hu>, Aleksey Midenkov <asm uezku.kemsu.ru>,\n      <dan listening-station.net; trunk version Nick Kew]\n\n  *) HTTP protocol: return 400 not 503 if we have to abort due to malformed\n     chunked encoding. [Nick Kew]\n\nChanges with Apache 2.3.8\n\n  *) suexec: Support large log files. PR 45856. [Stefan Fritsch]\n\n  *) core: Abort with sensible error message if no or more than one MPM is\n     loaded. [Stefan Fritsch]\n\n  *) mod_proxy: Rename erroronstatus to failonstatus.\n     [Daniel Ruggeri <DRuggeri primary.net>]\n\n  *) mod_dav_fs: Fix broken \"creationdate\" property.\n     Regression in version 2.3.7. [Rainer Jung]\n\nChanges with Apache 2.3.7\n\n  *) SECURITY: CVE-2010-1452 (cve.mitre.org)\n     mod_dav, mod_cache, mod_session: Fix Handling of requests without a path\n     segment. PR 49246 [Mark Drayton, Jeff Trawick]\n\n  *) mod_ldap: Properly check the result returned by apr_ldap_init. PR 46076.\n     [Stefan Fritsch]\n\n  *) mod_rewrite: Log errors if rewrite map files cannot be opened. PR 49639.\n     [Stefan Fritsch]\n\n  *) mod_proxy_http: Support the 'ping' property for backend HTTP/1.1 servers\n     via leveraging 100-Continue as the initial \"request\".\n     [Jim Jagielski]\n\n  *) core/mod_authz_core: Introduce new access_checker_ex hook that enables\n     mod_authz_core to bypass authentication if access should be allowed by\n     IP address/env var/... [Stefan Fritsch]\n\n  *) core: Introduce note_auth_failure hook to allow modules to add support\n     for additional auth types. This makes ap_note_auth_failure() work with\n     mod_auth_digest again. PR 48807. [Stefan Fritsch]\n\n  *) socache modules: return APR_NOTFOUND when a lookup is not found [Nick Kew]\n\n  *) mod_authn_socache: new module [Nick Kew]\n\n  *) configure: Add reallyall option for --enable-mods-shared. [Stefan Fritsch]\n\n  *) Fix Windows build when using VC6. [Gregg L. Smith <lists glewis com>]\n\n  *) mod_rewrite: Allow to set environment variables without explicitly\n     giving a value. [Rainer Jung]\n\n  *) mod_rewrite: Remove superfluous EOL from rewrite logging. [Rainer Jung]\n\n  *) mod_include: recognise \"text/html; parameters\" as text/html\n     PR 49616 [Andrey Chernov <ache nagual.pp.ru>]\n\n  *) CGI vars: allow PATH to be set by SetEnv, consistent with LD_LIBRARY_PATH\n     PR 43906 [Nick Kew]\n\n  *) Core: Extra robustness: don't try authz and segfault if authn\n     fails to set r->user.  Log bug and return 500 instead.\n     PR 42995 [Nick Kew]\n\n  *) HTTP protocol filter: fix handling of longer chunk extensions\n     PR 49474 [<tee.bee gmx.de>]\n\n  *) Update SSL cipher suite and add example for SSLHonorCipherOrder.\n     [Lars Eilebrecht, Rainer Jung]\n\n  *) move AddOutputFilterByType from core to mod_filter.  This should\n     fix nasty side-effects that happen when content_type is set\n     more than once in processing a request, and make it fully\n     compatible with dynamic and proxied contents. [Nick Kew]\n\n  *) mod_log_config: Implement logging for sub second timestamps and\n     request end time.  [Rainer Jung]\n\nChanges with Apache 2.3.6\n\n  *) SECURITY: CVE-2009-3555 (cve.mitre.org)\n     mod_ssl: Comprehensive fix of the TLS renegotiation prefix injection\n     attack when compiled against OpenSSL version 0.9.8m or later. Introduces\n     the 'SSLInsecureRenegotiation' directive to reopen this vulnerability\n     and offer unsafe legacy renegotiation with clients which do not yet\n     support the new secure renegotiation protocol, RFC 5746.\n     [Joe Orton, and with thanks to the OpenSSL Team]\n\n  *) SECURITY: CVE-2009-3555 (cve.mitre.org)\n     mod_ssl: A partial fix for the TLS renegotiation prefix injection attack\n     by rejecting any client-initiated renegotiations. Forcibly disable\n     keepalive for the connection if there is any buffered data readable. Any\n     configuration which requires renegotiation for per-directory/location\n     access control is still vulnerable, unless using OpenSSL >= 0.9.8l.\n     [Joe Orton, Ruediger Pluem, Hartmut Keil <Hartmut.Keil adnovum.ch>]\n\n  *) SECURITY: CVE-2010-0408 (cve.mitre.org)\n     mod_proxy_ajp: Respond with HTTP_BAD_REQUEST when the body is not sent\n     when request headers indicate a request body is incoming; not a case of\n     HTTP_INTERNAL_SERVER_ERROR.  [Niku Toivola <niku.toivola sulake.com>]\n\n  *) SECURITY: CVE-2010-0425 (cve.mitre.org)\n     mod_isapi: Do not unload an isapi .dll module until the request\n     processing is completed, avoiding orphaned callback pointers.\n     [Brett Gervasoni <brettg senseofsecurity.com>, Jeff Trawick]\n\n  *) core: Filter init functions are now run strictly once per request\n     before handler invocation.  The init functions are no longer run\n     for connection filters.  PR 49328.  [Joe Orton]\n\n  *) core: Adjust the output filter chain correctly in an internal\n     redirect from a subrequest, preserving filters from the main\n     request as necessary.  PR 17629.  [Joe Orton]\n\n  *) mod_cache: Explicitly allow cache implementations to cache a 206 Partial\n     Response if they so choose to do so. Previously an attempt to cache a 206\n     was arbitrarily allowed if the response contained an Expires or\n     Cache-Control header, and arbitrarily denied if both headers were missing.\n     [Graham Leggett]\n\n  *) core: Add microsecond timestamp fractions, process id and thread id\n     to the error log. [Rainer Jung]\n\n  *) configure: The \"most\" module set gets build by default.  [Rainer Jung]\n\n  *) configure: Building dynamic modules (DSO) by default.  [Rainer Jung]\n\n  *) configure: Fix broken VPATH build when using included APR.\n     [Rainer Jung]\n\n  *) mod_session_crypto: Fix configure problem when building\n     with APR 2 and for VPATH builds with included APR.\n     [Rainer Jung]\n\n  *) mod_session_crypto: API compatibility with APR 2 crypto and\n     APR Util 1.x crypto. [Rainer Jung]\n\n  *) ab: Fix memory leak with -v2 and SSL. PR 49383.\n     [Pavel Kankovsky <peak argo troja mff cuni cz>]\n\n  *) core: Add per-module and per-directory loglevel configuration.\n           Add some more trace logging.\n     mod_rewrite: Replace RewriteLog/RewriteLogLevel with trace log levels.\n     mod_ssl: Replace LogLevelDebugDump with trace log levels.\n     mod_ssl/mod_proxy*: Adjust loglevels to be less verbose at levels info\n           and debug.\n     mod_dumpio:  Replace DumpIOLogLevel with trace log levels.\n     [Stefan Fritsch]\n\n  *) mod_ldap: LDAP caching was suppressed (and ldap-status handler returns\n     title page only) when any mod_ldap directives were used in VirtualHost\n     context.  [Eric Covener]\n\n  *) mod_disk_cache: Decline the opportunity to cache if the response is\n     a 206 Partial Content. This stops a reverse proxied partial response\n     from becoming cached, and then being served in subsequent responses.\n     [Graham Leggett]\n\n  *) mod_deflate: avoid the risk of forwarding data before headers are set.\n     PR 49369 [Matthew Steele <mdsteele google.com>]\n\n  *) mod_authnz_ldap: Ensure nested groups are checked when the\n     top-level group doesn't have any direct non-group members\n     of attributes in AuthLDAPGroupAttribute. [Eric Covener]\n\n  *) mod_authnz_ldap: Search or Comparison during authorization phase\n     can use the credentials from the authentication phase\n     (AuthLDAPSearchAsUSer,AuthLDAPCompareAsUser).\n     PR 48340 [Domenico Rotiroti, Eric Covener]\n\n  *) mod_authnz_ldap: Allow the initial DN search during authentication\n     to use the HTTP username/pass instead of an anonymous or hard-coded\n     LDAP id (AuthLDAPInitialBindAsUser, AuthLDAPInitialBindPattern).\n     [Eric Covener]\n\n  *) mod_authnz_ldap: Publish requested LDAP data with an AUTHORIZE_ prefix\n     when this module is used for authorization. See AuthLDAPAuthorizePrefix.\n     PR 45584 [Eric Covener]\n\n  *) apxs -q: Stop filtering out ':' characters from the reported values.\n     PR 45343.  [Bill Cole]\n\n  *) prefork MPM: Work around possible crashes on child exit in APR reslist\n     cleanup code.  PR 43857.  [Tom Donovan]\n\n  *) ab: fix number of requests sent by ab when keepalive is enabled.  PR 48497.\n     [Bryn Dole <dole blekko.com>]\n\n  *) Log an error for failures to read a chunk-size, and return 408 instead of\n     413 when this is due to a read timeout.  This change also fixes some cases\n     of two error documents being sent in the response for the same scenario.\n     [Eric Covener] PR49167\n\n  *) mod_proxy_balancer: Add new directive BalancerNonce to allow admin\n     to control/set the nonce used in the balancer-manager application.\n     [Jim Jagielski]\n\n  *) mod_proxy_connect: Support port ranges in AllowConnect. PR 23673.\n     [Stefan Fritsch]\n\n  *) Proxy balancer: support setting error status according to HTTP response\n     code from a backend.  PR 48939.  [Daniel Ruggeri <DRuggeri primary.net>]\n\n  *) htcacheclean: Introduce the ability to clean specific URLs from the\n     cache, if provided as an optional parameter on the command line.\n     [Graham Leggett]\n\n  *) core: Introduce the IncludeStrict directive, which explicitly fails\n     server startup if no files or directories match a wildcard path.\n     [Graham Leggett]\n\n  *) htcacheclean: Report additional statistics about entries deleted.\n     PR 48944. [Mark Drayton mark markdrayton.info]\n\n  *) Introduce SSLFIPS directive to support OpenSSL FIPS_mode; permits all\n     builds of mod_ssl to use 'SSLFIPS off' for portability, but the proper\n     build of openssl is required for 'SSLFIPS on'.  PR 46270.\n     [Dr Stephen Henson <steve openssl.org>, William Rowe]\n\n  *) mod_proxy_http: Log the port of the remote server in various messages.\n     PR 48812. [Igor Gali\u0107 <i galic brainsware org>]\n\n  *) mod_reqtimeout: Do not wrongly enforce timeouts for mod_proxy's backend\n     connections and other protocol handlers (like mod_ftp). [Stefan Fritsch]\n\n  *) mod_proxy_ajp: Really regard the operation a success, when the client\n     aborted the connection. In addition adjust the log message if the client\n     aborted the connection. [Ruediger Pluem]\n\n  *) mod_ssl: Add the 'SSLInsecureRenegotiation' directive, which\n     allows insecure renegotiation with clients which do not yet\n     support the secure renegotiation protocol.  [Joe Orton]\n\n  *) mod_ssl: Fix a potential I/O hang if a long list of trusted CAs\n     is configured for client cert auth. PR 46952.  [Joe Orton]\n\n  *) core: Only log a 408 if it is no keepalive timeout. PR 39785\n     [Ruediger Pluem,  Mark Montague <markmont umich.edu>]\n\n  *) support/rotatelogs: Add -L option to create a link to the current\n     log file.  PR 48761 [<lyndon orthanc.ca>, Dan Poirier]\n\n  *) mod_ldap: Update LDAPTrustedClientCert to consistently be a per-directory\n     setting only, matching most of the documentation and examples.\n     PR 46541 [Paul Reder, Eric Covener]\n\n  *) mod_ldap: LDAPTrustedClientCert now accepts CA_DER/CA_BASE64 argument\n     types previously allowed only in LDAPTrustedGlobalCert. [Eric Covener]\n\n  *) mod_negotiation: Preserve query string over multiviews negotiation.\n     This buglet was fixed for type maps in 2.2.6, but the same issue\n     affected multiviews and was overlooked.\n     PR 33112 [Joergen Thomsen <apache jth.net>]\n\n  *) mod_ldap: Eliminate a potential crash with multiple LDAPTrustedClientCert\n     when some are not password-protected. [Eric Covener]\n\n  *) Fix startup segfault when the Mutex directive is used but no loaded\n     modules use httpd mutexes.  PR 48787.  [Jeff Trawick]\n\n  *) Proxy: get the headers right in a HEAD request with\n     ProxyErrorOverride, by checking for an overridden error\n     before not after going into a catch-all code path.\n     PR 41646.  [Nick Kew, Stuart Children]\n\n  *) support/rotatelogs: Support the simplest log rotation case, log\n     truncation. Useful when the log is being processed in real time\n     using a command like tail. [Graham Leggett]\n\n  *) support/htcacheclean: Teach it how to write a pid file (modelled on\n     httpd's writing of a pid file) so that it becomes possible to run\n     more than one instance of htcacheclean on the same machine.\n     [Graham Leggett]\n\n  *) Log command line on startup, so there's a record of command line\n     arguments like -f.  PR 48752.  [Dan Poirier]\n\n  *) Introduce mod_reflector, a handler capable of reflecting POSTed\n     request bodies back within the response through the output filter\n     stack. Can be used to turn an output filter into a web service.\n     [Graham Leggett]\n\n  *) mod_proxy_http: Make sure that when an ErrorDocument is served\n     from a reverse proxied URL, that the subrequest respects the status\n     of the original request. This brings the behaviour of proxy_handler\n     in line with default_handler. PR 47106. [Graham Leggett]\n\n  *) Support wildcards in both the directory and file components of\n     the path specified by the Include directive. [Graham Leggett]\n\n  *) mod_proxy, mod_proxy_http: Support remote https proxies\n     by using HTTP CONNECT.  PR 19188.\n     [Philippe Dutrueux <lilas evidian.com>, Rainer Jung]\n\n  *) apxs: Fix -A and -a options to ignore whitespace in httpd.conf\n     [Philip M. Gollucci]\n\n  *) worker: Don't report server has reached MaxClients until it has.\n     Add message when server gets within MinSpareThreads of MaxClients.\n     PR 46996.  [Dan Poirier]\n\n  *) mod_session: Session expiry was being initialised, but not updated\n     on each session save, resulting in timed out sessions when there\n     should not have been. Fixed. [Graham Leggett]\n\n  *) mod_log_config: Add the R option to log the handler used within the\n     request. [Christian Folini <christian.folini netnea com>]\n\n  *) mod_include: Allow fine control over the removal of Last-Modified and\n     ETag headers within the INCLUDES filter, making it possible to cache\n     responses if desired. Fix the default value of the SSIAccessEnable\n     directive.  [Graham Leggett]\n\n  *) Add new UnDefine directive to undefine a variable. PR 35350.\n     [Stefan Fritsch]\n\n  *) Make ap_pregsub(), used by AliasMatch and friends, use the same syntax\n     for regex backreferences as mod_rewrite and mod_include: Remove the use\n     of '&' as an alias for '$0' and allow to escape any character with a\n     backslash. PR 48351. [Stefan Fritsch]\n\n  *) mod_authnz_ldap: If AuthLDAPCharsetConfig is set, also convert the\n     password to UTF-8. PR 45318.\n     [Johannes M\u00fcller <joh_m gmx.de>, Stefan Fritsch]\n\n  *) ab: Fix calculation of requests per second in HTML output. PR 48594.\n     [Stefan Fritsch]\n\n  *) mod_authnz_ldap: Failures to map a username to a DN, or to check a user\n     password now result in an informational level log entry instead of\n     warning level.  [Eric Covener]\n\nChanges with Apache 2.3.5\n\n  *) SECURITY: CVE-2010-0434 (cve.mitre.org)\n     Ensure each subrequest has a shallow copy of headers_in so that the\n     parent request headers are not corrupted.  Eliminates a problematic\n     optimization in the case of no request body.  PR 48359\n     [Jake Scott, William Rowe, Ruediger Pluem]\n\n  *) Turn static function get_server_name_for_url() into public\n     ap_get_server_name_for_url() and use it where appropriate. This\n     fixes mod_rewrite generating invalid URLs for redirects to IPv6\n     literal addresses. [Stefan Fritsch]\n\n  *) mod_ldap: Introduce new config option LDAPTimeout to set the timeout\n     for LDAP operations like bind and search. [Stefan Fritsch]\n\n  *) mod_proxy, mod_proxy_ftp: Move ProxyFtpDirCharset from mod_proxy to\n     mod_proxy_ftp. [Takashi Sato]\n\n  *) mod_proxy, mod_proxy_connect: Move AllowCONNECT from mod_proxy to\n     mod_proxy_connect. [Takashi Sato]\n\n  *) mod_cache: Do an exact match of the keys defined by\n     CacheIgnoreURLSessionIdentifiers against the querystring instead of\n     a partial match.  PR 48401.\n     [Dodou Wang <wangdong.08 gmail.com>, Ruediger Pluem]\n\n  *) mod_proxy_balancer: Fix crash in balancer-manager. [Rainer Jung]\n\n  *) Core HTTP: disable keepalive when the Client has sent\n     Expect: 100-continue\n     but we respond directly with a non-100 response.\n     Keepalive here led to data from clients continuing being treated as\n     a new request.\n     PR 47087 [Nick Kew]\n\n  *) Core: reject NULLs in request line or request headers.\n     PR 43039 [Nick Kew]\n\n  *) Core: (re)-introduce -T commandline option to suppress documentroot\n     check at startup.\n     PR 41887 [Jan van den Berg <janvdberg gmail.com>]\n\n  *) mod_autoindex: support XHTML as equivalent to HTML in IndexOptions,\n                    ScanHTMLTitles, ReadmeName, HeaderName\n     PR 48416 [Dmitry Bakshaev <dab18 izhnet.ru>, Nick Kew]\n\n  *) Proxy: Fix ProxyPassReverse with relative URL\n     Derived (slightly erroneously) from PR 38864 [Nick Kew]\n\n  *) mod_headers: align Header Edit with Header Set when used on Content-Type\n     PR 48422 [Cyril Bont\u00e9 <cyril.bonte free.fr>, Nick Kew>]\n\n  *) mod_headers: Enable multi-match-and-replace edit option\n     PR 46594 [Nick Kew]\n\n  *) mod_filter: enable it to act on non-200 responses.\n     PR 48377 [Nick Kew]\n\nChanges with Apache 2.3.4\n\n  *) Replace AcceptMutex, LockFile, RewriteLock, SSLMutex, SSLStaplingMutex,\n     and WatchdogMutexPath with a single Mutex directive.  Add APIs to\n     simplify setup and user customization of APR proc and global mutexes.\n     (See util_mutex.h.)  Build-time setting DEFAULT_LOCKFILE is no longer\n     respected; set DEFAULT_REL_RUNTIMEDIR instead.  [Jeff Trawick]\n\n  *) http_core: KeepAlive no longer accepts other than On|Off.\n     [Takashi Sato]\n\n  *) mod_dav: Remove errno from dav_error interface.  Calls to dav_new_error()\n     and dav_new_error_tag() must be adjusted to add an apr_status_t parameter.\n     [Jeff Trawick]\n\n  *) mod_authnz_ldap: Add AuthLDAPBindAuthoritative to allow Authentication to\n     try other providers in the case of an LDAP bind failure.\n     PR 46608 [Justin Erenkrantz, Joe Schaefer, Tony Stevenson]\n\n  *) Build: fix --with-module to work as documented\n     PR 43881 [Gez Saunders <gez.saunders virgin.net>]\n\nChanges with Apache 2.3.3\n\n  *) SECURITY: CVE-2009-3095 (cve.mitre.org)\n     mod_proxy_ftp: sanity check authn credentials.\n     [Stefan Fritsch <sf fritsch.de>, Joe Orton]\n\n  *) SECURITY: CVE-2009-3094 (cve.mitre.org)\n     mod_proxy_ftp: NULL pointer dereference on error paths.\n     [Stefan Fritsch <sf fritsch.de>, Joe Orton]\n\n  *) mod_ssl: enable support for ECC keys and ECDH ciphers.  Tested against\n     OpenSSL 1.0.0b3.  [Vipul Gupta <vipul.gupta sun.com>, Sander Temme]\n\n  *) mod_dav: Include uri when logging a PUT error due to connection abort.\n     PR 38149. [Stefan Fritsch]\n\n  *) mod_dav: Return 409 instead of 500 for a LOCK request if the parent\n     resource does not exist or is not a collection. PR 43465. [Stefan Fritsch]\n\n  *) mod_dav_fs: Return 409 instead of 500 for Litmus test case copy_nodestcoll\n     (a COPY request where the parent of the destination resource does not\n     exist). PR 39299. [Stefan Fritsch]\n\n  *) mod_dav_fs: Don't delete the whole file if a PUT with content-range failed.\n     PR 42896. [Stefan Fritsch]\n\n  *) mod_dav_fs: Make PUT create files atomically and no longer destroy the\n     old file if the transfer aborted. PR 39815. [Paul Querna, Stefan Fritsch]\n\n  *) mod_dav_fs: Remove inode keyed locking as this conflicts with atomically\n     creating files. On systems with inode numbers, this is a format change of\n     the DavLockDB. The old DavLockDB must be deleted on upgrade.\n     [Stefan Fritsch]\n\n  *) mod_log_config: Make ${cookie}C correctly match whole cookie names\n     instead of substrings. PR 28037. [Dan Franklin <dan dan-franklin.com>,\n     Stefan Fritsch]\n\n  *) vhost: A purely-numeric Host: header should not be treated as a port.\n     PR 44979 [Nick Kew]\n\n  *) mod_ldap: Avoid 500 errors with \"Unable to set LDAP_OPT_REFHOPLIMIT option to 5\"\n     when built against openldap by using SDK LDAP_OPT_REFHOPLIMIT defaults unless\n     LDAPReferralHopLimit is explicitly configured.\n     [Eric Covener]\n\n  *) mod_charset_lite: Honor 'CharsetOptions NoImplicitAdd'.\n     [Eric Covener]\n\n  *) mod_ssl: Add support for OCSP Stapling.  PR 43822.\n     [Dr Stephen Henson <shenson oss-institute.org>]\n\n  *) mod_socache_shmcb: Allow parens in file name if cache size is given.\n     Fixes SSLSessionCache directive mis-parsing parens in pathname.\n     PR 47945. [Stefan Fritsch]\n\n  *) htpasswd: Improve out of disk space handling. PR 30877. [Stefan Fritsch]\n\n  *) htpasswd: Use MD5 hash by default on all platforms. [Stefan Fritsch]\n\n  *) mod_sed: Reduce memory consumption when processing very long lines.\n     PR 48024 [Basant Kumar Kukreja <basant.kukreja sun.com>]\n\n  *) ab: Fix segfault in case the argument for -n is a very large number.\n     PR 47178. [Philipp Hagemeister <oss phihag.de>]\n\n  *) Allow ProxyPreserveHost to work in <Proxy> sections. PR 34901.\n     [Stefan Fritsch]\n\n  *) configure: Fix THREADED_MPMS so that mod_cgid is enabled again\n     for worker MPM. [Takashi Sato]\n\n  *) mod_dav: Provide a mechanism to obtain the request_rec and pathname\n     from the dav_resource. [Jari Urpalainen <jari.urpalainen nokia.com>,\n     Brian France <brian brianfrance.com>]\n\n  *) Build: Use install instead of cp if available on installing\n     modules to avoid segmentation fault. PR 47951. [hirose31 gmail.com]\n\n  *) mod_cache: correctly consider s-maxage in cacheability\n     decisions.  [Dan Poirier]\n\n  *) mod_logio/core: Report more accurate byte counts in mod_status if\n     mod_logio is loaded. PR 25656. [Stefan Fritsch]\n\n  *) mod_ldap: If LDAPSharedCacheSize is too small, try harder to purge\n     some cache entries and log a warning. Also increase the default\n     LDAPSharedCacheSize to 500000. This is a more realistic size suitable\n     for the default values of 1024 for LdapCacheEntries/LdapOpCacheEntries.\n     PR 46749. [Stefan Fritsch]\n\n  *) mod_rewrite: Make sure that a hostname:port isn't fully qualified if\n     the request is a CONNECT request. [Bill Zajac <billz consultla.com>]\n\n  *) mod_cache: Teach CacheEnable and CacheDisable to work from within a\n     Location section, in line with how ProxyPass works. [Graham Leggett]\n\n  *) mod_reqtimeout: New module to set timeouts and minimum data rates for\n     receiving requests from the client. [Stefan Fritsch]\n\n  *) core: Fix potential memory leaks by making sure to not destroy\n     bucket brigades that have been created by earlier filters.\n     [Stefan Fritsch]\n\n  *) core, mod_deflate, mod_sed: Reduce memory usage by reusing bucket\n     brigades in several places. [Stefan Fritsch]\n\n  *) mod_cache: Fix uri_meets_conditions() so that CacheEnable will\n     match by scheme, or by a wildcarded hostname. PR 40169\n     [Peter Grandi <pg_asf asf.for.sabi.co.uk>, Graham Leggett]\n\n  *) suxec: Allow to log an error if exec fails by setting FD_CLOEXEC\n     on the log file instead of closing it. PR 10744. [Nicolas Rachinsky]\n\n  *) mod_mime: Make RemoveType override the info from TypesConfig.\n     PR 38330. [Stefan Fritsch]\n\n  *) mod_cache: Introduce the option to run the cache from within the\n     normal request handler, and to allow fine grained control over\n     where in the filter chain content is cached. Adds CacheQuickHandler\n     directive.  [Graham Leggett]\n\n  *) core: Treat timeout reading request as 408 error, not 400.\n     Log 408 errors in access log as was done in Apache 1.3.x.\n     PR 39785 [Nobutaka Mantani <nobutaka nobutaka.org>,\n     Stefan Fritsch <sf fritsch.de>, Dan Poirier]\n\n  *) mod_ssl: Reintroduce SSL_CLIENT_S_DN, SSL_CLIENT_I_DN, SSL_SERVER_S_DN,\n     SSL_SERVER_I_DN back to the environment variables to be set by mod_ssl.\n     [Peter Sylvester <peter.sylvester edelweb.fr>]\n\n  *) mod_disk_cache: don't cache incomplete responses, per RFC 2616, 13.8.\n     PR15866.  [Dan Poirier]\n\n  *) ab: ab segfaults in verbose mode on https sites\n     PR46393.  [Ryan Niebur]\n\n  *) mod_dav: Allow other modules to become providers and add resource types\n     to the DAV response. [Jari Urpalainen <jari.urpalainen nokia.com>,\n     Brian France <brian brianfrance.com>]\n\n  *) mod_dav: Allow other modules to add things to the DAV or Allow headers\n     of an OPTIONS request. [Jari Urpalainen <jari.urpalainen nokia.com>,\n     Brian France <brian brianfrance.com>]\n\n  *) core: Lower memory usage of core output filter.\n     [Stefan Fritsch <sf sfritsch.de>]\n\n  *) mod_mime: Detect invalid use of MultiviewsMatch inside Location and\n     LocationMatch sections.  PR47754. [Dan Poirier]\n\n  *) mod_request: Make sure the KeptBodySize directive rejects values\n     that aren't valid numbers. [Graham Leggett]\n\n  *) mod_session_crypto: Sanity check should the potentially encrypted\n     session cookie be too short. [Graham Leggett]\n\n  *) mod_session.c: Prevent a segfault when session is added but not\n     configured. [Graham Leggett]\n\n  *) htcacheclean: 19 ways to fail, 1 error message. Fixed. [Graham Leggett]\n\n  *) mod_auth_digest: Fail server start when nonce count checking\n     is configured without shared memory, or md5-sess algorithm is\n     configured. [Dan Poirier]\n\n  *) mod_proxy_connect: The connect method doesn't work if the client is\n     connecting to the apache proxy through an ssl socket. Fixed.\n     PR29744. [Brad Boyer, Mark Cave-Ayland, Julian Gilbey, Fabrice Durand,\n     David Gence, Tim Dodge, Per Gunnar Hans, Emmanuel Elango,\n     Kevin Croft, Rudolf Cardinal]\n\n  *) mod_ssl: The error message when SSLCertificateFile is missing should\n     at least give the name or position of the problematic virtual host\n     definition. [Stefan Fritsch sf sfritsch.de]\n\n  *) mod_auth_digest: Fix null pointer when qop=none. [Dan Poirier]\n\n  *) Add support for HTTP PUT to ab. [Jeff Barnes <jbarnesweb yahoo.com>]\n\n  *) mod_headers: generalise the envclause to support expression\n     evaluation with ap_expr parser [Nick Kew]\n\n  *) mod_cache: Introduce the thundering herd lock, a mechanism to keep\n     the flood of requests at bay that strike a backend webserver as\n     a cached entity goes stale. [Graham Leggett]\n\n  *) mod_auth_digest: Fix usage of shared memory and re-enable it.\n     PR 16057 [Dan Poirier]\n\n  *) Preserve Port information over internal redirects\n     PR 35999 [Jonas Ringh <jonas.ringh cixit.se>]\n\n  *) Proxy: unable to connect to a backend is SERVICE_UNAVAILABLE,\n     rather than BAD_GATEWAY or (especially) NOT_FOUND.\n     PR 46971 [evanc nortel.com]\n\n  *) Various modules: Do better checking of pollset operations in order to\n     avoid segmentation faults if they fail. PR 46467\n     [Stefan Fritsch <sf sfritsch.de>]\n\n  *) mod_autoindex: Correctly create an empty cell if the description\n     for a file is missing. PR 47682 [Peter Poeml <poeml suse.de>]\n\n  *) ab: Fix broken error messages after resolver or connect() failures.\n     [Jeff Trawick]\n\n  *) SECURITY: CVE-2009-1890 (cve.mitre.org)\n     Fix a potential Denial-of-Service attack against mod_proxy in a\n     reverse proxy configuration, where a remote attacker can force a\n     proxy process to consume CPU time indefinitely.  [Nick Kew, Joe Orton]\n\n  *) SECURITY: CVE-2009-1191 (cve.mitre.org)\n     mod_proxy_ajp: Avoid delivering content from a previous request which\n     failed to send a request body. PR 46949 [Ruediger Pluem]\n\n  *) htdbm: Fix possible buffer overflow if dbm database has very\n     long values.  PR 30586 [Dan Poirier]\n\n  *) core: Return APR_EOF if request body is shorter than the length announced\n     by the client. PR 33098 [ Stefan Fritsch <sf sfritsch.de>]\n\n  *) mod_suexec: correctly set suexec_enabled when httpd is run by a\n     non-root user and may have insufficient permissions.\n     PR 42175 [Jim Radford <radford blackbean.org>]\n\n  *) mod_ssl: Fix SSL_*_DN_UID variables to use the 'userID' attribute\n     type.  PR 45107.  [Michael Str\u00f6der <michael stroeder.com>,\n     Peter Sylvester <peter.sylvester edelweb.fr>]\n\n  *) mod_proxy_http: fix case sensitivity checking transfer encoding\n     PR 47383 [Ryuzo Yamamoto <ryuzo.yamamoto gmail.com>]\n\n  *) mod_alias: ensure Redirect issues a valid URL.\n     PR 44020 [H\u00e5kon Stordahl <hakon stordahl.org>]\n\n  *) mod_dir: add FallbackResource directive, to enable admin to specify\n     an action to happen when a URL maps to no file, without resorting\n     to ErrorDocument or mod_rewrite.  PR 47184 [Nick Kew]\n\n  *) mod_cgid: Do not leak the listening Unix socket file descriptor to the\n     CGI process. PR 47335 [Korn\u00e9l P\u00e1l <kornelpal gmail.com>]\n\n  *) mod_rewrite: Remove locking for writing to the rewritelog.\n     PR 46942 [Dan Poirier <poirier pobox.com>]\n\n  *) mod_alias: check sanity in Redirect arguments.\n     PR 44729 [S\u00f6nke Tesch <st kino-fahrplan.de>, Jim Jagielski]\n\n  *) mod_proxy_http: fix Host: header for literal IPv6 addresses.\n     PR 47177 [Carlos Garcia Braschi <cgbraschi gmail.com>]\n\n  *) mod_cache: Add CacheIgnoreURLSessionIdentifiers directive to ignore\n     defined session identifiers encoded in the URL when caching.\n     [Ruediger Pluem]\n\n  *) mod_rewrite: Fix the error string returned by RewriteRule.\n     RewriteRule returned \"RewriteCond: bad flag delimiters\" when the 3rd\n     argument of RewriteRule was not started with \"[\" or not ended with \"]\".\n     PR 45082 [Vitaly Polonetsky <m_vitaly topixoft.com>]\n\n  *) Windows: Fix usage message.\n     [Rainer Jung]\n\n  *) apachectl: When passing through arguments to httpd in\n     non-SysV mode, use the \"$@\" syntax to preserve arguments.\n     [Eric Covener]\n\n  *) mod_dbd: add DBDInitSQL directive to enable SQL statements to\n     be run when a connection is opened.  PR 46827\n     [Marko Kevac <mkevac gmail.com>]\n\n  *) mod_cgid: Improve handling of long AF_UNIX socket names (ScriptSock).\n     PR 47037.  [Jeff Trawick]\n\n  *) mod_proxy_ajp: Check more strictly that the backend follows the AJP\n     protocol. [Mladen Turk]\n\n  *) mod_proxy_ajp: Forward remote port information by default.\n     [Rainer Jung]\n\n  *) Allow MPMs to be loaded dynamically, as with most other modules.  Use\n     --enable-mpms-shared={list|\"all\"} to enable.  This required changes to\n     the MPM interfaces.  Removed: mpm.h, mpm_default.h (as an installed\n     header), APACHE_MPM_DIR, MPM_NAME, ap_threads_per_child,\n     ap_max_daemons_limit, ap_my_generation, etc.  ap_mpm_query() can't be\n     called until after the register-hooks phase.  [Jeff Trawick]\n\n  *) mod_ssl: Add SSLProxyCheckPeerExpire and SSLProxyCheckPeerCN directives\n     to enable stricter checking of remote server certificates.\n     [Ruediger Pluem]\n\n  *) ab: Fix a 100% CPU loop on platforms where a failed non-blocking connect\n     returns EINPROGRESS and a subsequent poll() returns only POLLERR.\n     Observed on HP-UX.  [Eric Covener]\n\n  *) Remove broken support for BeOS, TPF, and even older platforms such\n     as A/UX, Next, and Tandem.  [Jeff Trawick]\n\n  *) mod_proxy_ftp: Add ProxyFtpListOnWildcard directive to allow files with\n     globbing characters to be retrieved instead of converted into a\n     directory listing.  PR 46789 [Dan Poirier <poirier pobox.com>]\n\n  *) Provide ap_retained_data_create()/ap_retained_data_get() for preservation\n     of module state across unload/load.  [Jeff Trawick]\n\n  *) mod_substitute: Fix a memory leak. PR 44948\n     [Dan Poirier <poirier pobox.com>]\n\nChanges with Apache 2.3.2\n\n  *) mod_mime_magic: Fix detection of compressed content. [Rainer Jung]\n\n  *) mod_negotiation: Escape paths of filenames in 406 responses to avoid\n     HTML injections and HTTP response splitting.  PR 46837.\n     [Geoff Keating <geoffk apple.com>]\n\n  *) mod_ssl: add support for type-safe STACK constructs in OpenSSL\n     development HEAD.  PR 45521.  [Kaspar Brand, Sander Temme]\n\n  *) ab: Fix maintenance of the pollset to resolve EALREADY errors\n     with kqueue (BSD/OS X) and excessive CPU with event ports (Solaris).\n     PR 44584.  Use APR_POLLSET_NOCOPY for better performance with some\n     pollset implementations.  [Jeff Trawick]\n\n  *) mod_disk_cache: The module now turns off sendfile support if\n     'EnableSendfile off' is defined globally. [Lars Eilebrecht]\n\n  *) mod_deflate: Adjust content metadata before bailing out on 304\n     responses so that the metadata does not differ from 200 response.\n     [Roy T. Fielding]\n\n  *) mod_deflate: Fix creation of invalid Etag headers. We now make sure\n     that the Etag value is properly quoted when adding the gzip marker.\n     PR 39727, 45023. [Lars Eilebrecht, Roy T. Fielding]\n\n  *) Added 20x22 icons for ODF, SVG, and XML documents.  PR 37185.\n     [Peter Harlow]\n\n  *) Disabled DefaultType directive and removed ap_default_type()\n     from core.  We now exclude Content-Type from responses for which\n     a media type has not been configured via mime.types, AddType,\n     ForceType, or some other mechanism. PR 13986. [Roy T. Fielding]\n\n  *) mod_rewrite: Add IPV6 variable to RewriteCond\n     [Ryan Phillips <ryan-apache trolocsis.com>]\n\n  *) core: Enhance KeepAliveTimeout to support a value in milliseconds.\n     PR 46275. [Takashi Sato]\n\n  *) rotatelogs: Allow size units B, K, M, G and combination of\n     time and size based rotation. [Rainer Jung]\n\n  *) rotatelogs: Add flag for verbose (debug) output. [Rainer Jung]\n\n  *) mod_ssl: Fix merging of SSLRenegBufferSize directive. PR 46508\n     [<tlhackque yahoo.com>]\n\n  *) core: Translate the the status line to ASCII on EBCDIC platforms in\n     ap_send_interim_response() and for locally generated \"100 Continue\"\n     responses.  [Eric Covener]\n\n  *) prefork: Fix child process hang during graceful restart/stop in\n     configurations with multiple listening sockets.  PR 42829.  [Joe Orton,\n     Jeff Trawick]\n\n  *) mod_session_crypto: Ensure that SessionCryptoDriver can only be\n     set in the global scope. [Graham Leggett]\n\n  *) mod_ext_filter: We need to detect failure to startup the filter\n     program (a mangled response is not acceptable).  Fix to detect\n     failure, and offer configuration option either to abort or\n     to remove the filter and continue.\n     PR 41120 [Nick Kew]\n\n  *) mod_session_crypto: Rewrite the session_crypto module against the\n     apr_crypto API. [Graham Leggett]\n\n  *) mod_auth_form: Fix a pool lifetime issue, don't remove the subrequest\n     until the main request is cleaned up. [Graham Leggett]\n\nChanges with Apache 2.3.1\n\n  *) ap_slotmem: Add in new slot-based memory access API impl., including\n     2 providers (mod_sharedmem and mod_plainmem) [Jim Jagielski,\n     Jean-Frederic Clere, Brian Akins <brian.akins turner.com>]\n\n  *) mod_include: support generating non-ASCII characters as entities in SSI\n     PR 25202 [Nick Kew]\n\n  *) core/utils: Enhance ap_escape_html API to support escaping non-ASCII chars\n     PR 25202 [Nick Kew]\n\n  *) mod_rewrite: fix \"B\" flag breakage by reverting r5589343\n    PR 45529 [Bob Ionescu <bobsiegen googlemail.com>]\n\n  *) CGI: return 504 (Gateway timeout) rather than 500 when a script\n     times out before returning status line/headers.\n     PR 42190 [Nick Kew]\n\n  *) mod_cgid: fix segfault problem on solaris.\n     PR 39332 [Masaoki Kobayashi <masaoki techfirm.co.jp>]\n\n  *) mod_proxy_scgi: Added. [Andr\u00e9 Malo]\n\n  *) mod_cache: Introduce 'no-cache' per-request environment variable\n     to prevent the saving of an otherwise cacheable response.\n     [Eric Covener]\n\n  *) mod_rewrite: Introduce DiscardPathInfo|DPI flag to stop the troublesome\n     way that per-directory rewrites append the previous notion of PATH_INFO\n     to each substitution before evaluating subsequent rules.\n     PR 38642 [Eric Covener]\n\n  *) mod_cgid: Do not add an empty argument when calling the CGI script.\n     PR 46380 [Ruediger Pluem]\n\n  *) scoreboard: Remove unused sb_type from process_score.\n     [Torsten Foertsch <torsten.foertsch gmx.net>, Chris Darroch]\n\n  *) mod_ssl: Add SSLRenegBufferSize directive to allow changing the\n     size of the buffer used for the request-body where necessary\n     during a per-dir renegotiation.  PR 39243.  [Joe Orton]\n\n  *) mod_proxy_fdpass: New module to pass a client connection over to a separate\n     process that is reading from a unix daemon socket.\n\n  *) mod_ssl: Improve environment variable extraction to be more\n     efficient and to correctly handle DNs with duplicate tags.\n     PR 45975.  [Joe Orton]\n\n  *) Remove the obsolete serial attribute from the RPM spec file. Compile\n     against the external pcre. Add missing binaries fcgistarter, and\n     mod_socache* and mod_session*. [Graham Leggett]\n\nChanges with Apache 2.3.0\n\n  *) mod_ratelimit: New module to do bandwidth rate limiting. [Paul Querna]\n\n  *) Remove X-Pad header which was added as a work around to a bug in\n     Netscape 2.x to 4.0b2. [Takashi Sato <takashi lans-tv.com>]\n\n  *) Add DTrace Statically Defined Tracing (SDT) probes.\n    [Theo Schlossnagle <jesus omniti.com>, Paul Querna]\n\n  *) mod_proxy_balancer: Move all load balancing implementations\n     as individual, self-contained mod_proxy submodules under\n     modules/proxy/balancers [Jim Jagielski]\n\n  *) Rename APIs to include ap_ prefix:\n        find_child_by_pid -> ap_find_child_by_pid\n        suck_in_APR -> ap_suck_in_APR\n        sys_privileges_handlers -> ap_sys_privileges_handlers\n        unixd_accept -> ap_unixd_accept\n        unixd_config -> ap_unixd_config\n        unixd_killpg -> ap_unixd_killpg\n        unixd_set_global_mutex_perms -> ap_unixd_set_global_mutex_perms\n        unixd_set_proc_mutex_perms -> ap_unixd_set_proc_mutex_perms\n        unixd_set_rlimit -> ap_unixd_set_rlimit\n     [Paul Querna]\n\n  *) mod_lbmethod_heartbeat: New module to load balance mod_proxy workers\n     based on heartbeats. [Paul Querna]\n\n  *) mod_heartmonitor: New module to collect heartbeats, and write out a file\n     so that other modules can load balance traffic as needed. [Paul Querna]\n\n  *) mod_heartbeat: New module to generate multicast heartbeats to know if a\n     server is online. [Paul Querna]\n\n  *) mod_buffer: Honour the flush bucket and flush the buffer in the\n     input filter. Make sure that metadata buckets are written to\n     the buffer, not to the final brigade. [Graham Leggett]\n\n  *) mod_buffer: Optimise the buffering of heap buckets when the heap\n     buckets stay exactly APR_BUCKET_BUFF_SIZE long. [Graham Leggett,\n     Ruediger Pluem]\n\n  *) mod_buffer: Optional support for buffering of the input and output\n     filter stacks. Can collapse many small buckets into fewer larger\n     buckets, and prevents excessively small chunks being sent over\n     the wire. [Graham Leggett]\n\n  *) mod_privileges: new module to make httpd on Solaris privileges-aware\n     and to enable different virtualhosts to run with different\n     privileges and Unix user/group IDs [Nick Kew]\n\n  *) mod_mem_cache: this module has been removed. [William Rowe]\n\n  *) authn/z: Remove mod_authn_default and mod_authz_default.\n     [Chris Darroch]\n\n  *) authz: Fix handling of authz configurations, make default authz\n     logic replicate 2.2.x authz logic, and replace <Satisfy*>, Reject,\n     and AuthzMergeRules directives with Match, <Match*>, and AuthzMerge\n     directives.  [Chris Darroch]\n\n  *) mod_authn_core: Prevent crash when provider alias created to\n     provider which is not yet registered.  [Chris Darroch]\n\n  *) mod_authn_core: Add AuthType of None to support disabling\n     authentication.  [Chris Darroch]\n\n  *) core: Allow <Limit> and <LimitExcept> directives to nest, and\n     constrain their use to conform with that of other access control\n     and authorization directives.  [Chris Darroch]\n\n  *) unixd: turn existing code into a module, and turn the set user/group\n     and chroot into a child_init function. [Nick Kew]\n\n  *) mod_dir: Support \"DirectoryIndex disabled\"\n     Suggested By Andr\u00e9 Warnier <aw ice-sa.com> [Eric Covener]\n\n  *) mod_ssl: Send Content-Type application/ocsp-request for POST requests to\n     OSCP responders. PR 46014 [Dr Stephen Henson <steve openssl.org>]\n\n  *) mod_authnz_ldap: don't return NULL-valued environment variables to\n     other modules.  PR 39045 [Francois Pesce <francois.pesce gmail.com>]\n\n  *) Don't adjust case in pathname components that are not of interest\n     to mod_mime.  Fixes mod_negotiation's use of such components.\n     PR 43250 [Basant Kumar Kukreja <basant.kukreja sun.com>]\n\n  *) Be tolerant in what you accept - accept slightly broken\n     status lines from a backend provided they include a valid status code.\n     PR 44995 [Rainer Jung <rainer.jung kippdata.de>]\n\n  *) New module mod_sed: filter Request/Response bodies through sed\n     [Basant Kumar Kukreja <basant.kukreja sun.com>]\n\n  *) mod_auth_form: Make sure that basic authentication is correctly\n     faked directly after login. [Graham Leggett]\n\n  *) mod_session_cookie, mod_session_dbd: Make sure cookies are set both\n     within the output headers and error output headers, so that the\n     session is maintained across redirects. [Graham Leggett]\n\n  *) mod_auth_form: Make sure the logged in user is populated correctly\n     after a form login. Fixes a missing REMOTE_USER variable directly\n     following a login. [Graham Leggett]\n\n  *) mod_session_cookie: Make sure that cookie attributes are correctly\n     included in the blank cookie when cookies are removed. This fixes an\n     inability to log out when using mod_auth_form. [Graham Leggett]\n\n  *) mod_session: Prevent a segfault when a CGI script sets a cookie with a\n     null value. [David Shane Holden <dpejesh apache.org>]\n\n  *) core, authn/z: Determine registered authn/z providers directly in\n     ap_setup_auth_internal(), which allows optional functions that just\n     wrapped ap_list_provider_names() to be removed from authn/z modules.\n     [Chris Darroch]\n\n  *) authn/z: Convert common provider version strings to macros.\n     [Chris Darroch]\n\n  *) core: When testing for slash-terminated configuration paths in\n     ap_location_walk(), don't look past the start of an empty string\n     such as that created by a <Location \"\"> directive.\n     [Chris Darroch]\n\n  *) core, mod_proxy: If a kept_body is present, it becomes safe for\n     subrequests to support message bodies. Make sure that safety\n     checks within the core and within the proxy are not triggered\n     when kept_body is present. This makes it possible to embed\n     proxied POST requests within mod_include. [Graham Leggett]\n\n  *) mod_auth_form: Make sure the input filter stack is properly set\n     up before reading the login form. Make sure the kept body filter\n     is correctly inserted to ensure the body can be read a second\n     time safely should the authn be successful. [Graham Leggett,\n     Ruediger Pluem]\n\n  *) mod_request: Insert the KEPT_BODY filter via the insert_filter\n     hook instead of during fixups. Add a safety check to ensure the\n     filters cannot be inserted more than once. [Graham Leggett,\n     Ruediger Pluem]\n\n  *) ap_cache_cacheable_headers_out() will (now) always\n     merge an error headers _before_ clearing them and _before_\n     merging in the actual entity headers and doing normal\n     hop-by-hop cleansing. [Dirk-Willem van Gulik].\n\n  *) cache: retire ap_cache_cacheable_hdrs_out() which was used\n     for both in- and out-put headers; and replace it by a single\n     ap_cache_cacheable_headers() wrapped in a in- and out-put\n     specific ap_cache_cacheable_headers_in()/out(). The latter\n     which will also merge error and ensure content-type. To keep\n     cache modules consistent with ease. This API change bumps\n     up the minor MM by one [Dirk-Willem van Gulik].\n\n  *) Move the KeptBodySize directive, kept_body filters and the\n     ap_parse_request_body function out of the http module and into a\n     new module called mod_request, reducing the size of the core.\n     [Graham Leggett]\n\n  *) mod_dbd: Handle integer configuration directive parameters with a\n     dedicated function.\n\n  *) Change the directives within the mod_session* modules to be valid\n     both inside and outside the location/directory sections, as\n     suggested by wrowe. [Graham Leggett]\n\n  *) mod_auth_form: Add a module capable of allowing end users to log\n     in using an HTML form, storing the credentials within mod_session.\n     [Graham Leggett]\n\n  *) Add a function to the http filters that is able to parse an HTML\n     form request with the type of application/x-www-form-urlencoded.\n     [Graham Leggett]\n\n  *) mod_session_crypto: Initialise SSL in the post config hook.\n     [Ruediger Pluem, Graham Leggett]\n\n  *) mod_session_dbd: Add a session implementation capable of storing\n     session information in a SQL database via the dbd interface. Useful\n     for sites where session privacy is important. [Graham Leggett]\n\n  *) mod_session_crypto: Add a session encoding implementation capable\n     of encrypting and decrypting sessions wherever they may be stored.\n     Introduces a level of privacy when sessions are stored on the\n     browser. [Graham Leggett]\n\n  *) mod_session_cookie: Add a session implementation capable of storing\n     session information within cookies on the browser. Useful for high\n     volume sites where server bound sessions are too resource intensive.\n     [Graham Leggett]\n\n  *) mod_session: Add a generic session interface to unify the different\n     attempts at saving persistent sessions across requests.\n     [Graham Leggett]\n\n  *) core, authn/z: Avoid calling access control hooks for internal requests\n     with configurations which match those of initial request.  Revert to\n     original behaviour (call access control hooks for internal requests\n     with URIs different from initial request) if any access control hooks or\n     providers are not registered as permitting this optimization.\n     Introduce wrappers for access control hook and provider registration\n     which can accept additional mode and flag data.  [Chris Darroch]\n\n  *) Introduced ap_expr API for expression evaluation.\n     This is adapted from mod_include, which is the first module\n     to use the new API.\n     [Nick Kew]\n\n  *) mod_authz_dbd: When redirecting after successful login/logout per\n     AuthzDBDRedirectQuery, do not report authorization failure, and use\n     first row returned by database query instead of last row.\n     [Chris Darroch]\n\n  *) mod_ldap: Correctly return all requested attribute values\n     when some attributes have a null value.\n     PR 44560 [Anders Kaseorg <anders kaseorg.com>]\n\n  *) core: check symlink ownership if both FollowSymlinks and\n     SymlinksIfOwnerMatch are set [Nick Kew]\n\n  *) core: fix origin checking in SymlinksIfOwnerMatch\n     PR 36783 [Robert L Mathews <rob-apache.org.bugs tigertech.net>]\n\n  *) Activate mod_cache, mod_file_cache and mod_disk_cache as part of the\n     'most' set for '--enable-modules' and '--enable-shared-mods'. Include\n     mod_mem_cache in 'all' as well. [Dirk-Willem van Gulik]\n\n  *) Also install mod_so.h, mod_rewrite.h and mod_cache.h; as these\n     contain public function declarations which are useful for\n     third party module authors. PR 42431 [Dirk-Willem van Gulik].\n\n  *) mod_dir, mod_negotiation: pass the output filter information\n     to newly created sub requests; as these are later on used\n     as true requests with an internal redirect. This allows for\n     mod_cache et.al. to trap the results of the redirect.\n     [Dirk-Willem van Gulik, Ruediger Pluem]\n\n  *) mod_ldap: Add support (taking advantage of the new APR capability)\n     for ldap rebind callback while chasing referrals. This allows direct\n     searches on LDAP servers (in particular MS Active Directory 2003+)\n     using referrals without the use of the global catalog.\n     PRs 26538, 40268, and 42557 [Paul J. Reder]\n\n  *) ApacheMonitor.exe: Introduce --kill argument for use by the\n     installer.  This will permit the installation tool to remove\n     all running instances before attempting to remove the .exe.\n     [William Rowe]\n\n  *) mod_ssl: Add support for OCSP validation of client certificates.\n     PR 41123.  [Marc Stern <marc.stern approach.be>, Joe Orton]\n\n  *) mod_serf: New module for Reverse Proxying. [Paul Querna]\n\n  *) core: Add the option to keep aside a request body up to a certain\n     size that would otherwise be discarded, to be consumed by filters\n     such as mod_include. When enabled for a directory, POST requests\n     to shtml files can be passed through to embedded scripts as POST\n     requests, rather being downgraded to GET requests. [Graham Leggett]\n\n  *) mod_ssl: Fix TLS upgrade (RFC 2817) support.  PR 41231.  [Joe Orton]\n\n  *) scoreboard: Correctly declare ap_time_process_request.\n     PR 43789 [Tom Donovan <Tom.Donovan acm.org>]\n\n  *) core; scoreboard: ap_get_scoreboard_worker(sbh) now takes the sbh member\n     from the connection rec, ap_get_scoreboard_worker(proc, thread) will now\n     provide the unusual legacy lookup.  [William Rowe]\n\n  *) mpm winnt: fix null pointer dereference\n     PR 42572 [Davi Arnaut]\n\n  *) mod_authnz_ldap, mod_authn_dbd: Tidy up the code to expose authn\n     parameters to the environment. Improve portability to\n     EBCDIC machines by using apr_toupper(). [Martin Kraemer]\n\n  *) mod_ldap, mod_authnz_ldap: Add support for nested groups (i.e. the ability\n     to authorize an authenticated user via a \"require ldap-group X\" directive\n     where the user is not in group X, but is in a subgroup contained in X.\n     PR 42891 [Paul J. Reder]\n\n  *) mod_ssl: Add support for caching SSL Sessions in memcached. [Paul Querna]\n\n  *) apxs: Enhance -q flag to print all known variables and their values\n     when invoked without variable name(s).\n     [William Rowe, Sander Temme]\n\n  *) apxs: Eliminate run-time check for mod_so.  PR 40653.\n     [David M. Lee <dmlee crossroads.com>]\n\n  *) beos MPM: Create pmain pool and run modules' child_init hooks when\n     entering ap_mpm_run(), then destroy pmain when exiting ap_mpm_run().\n     [Chris Darroch]\n\n  *) netware MPM: Destroy pmain pool when exiting ap_mpm_run() so that\n     cleanups registered in modules' child_init hooks are performed.\n     [Chris Darroch]\n\n  *) Fix issue which could cause error messages to be written to access logs\n     on Win32.  PR 40476.  [Tom Donovan <Tom.Donovan acm.org>]\n\n  *) The LockFile directive, which specifies the location of\n     the accept() mutex lockfile, is deprecated. Instead, the\n     AcceptMutex directive now takes an optional lockfile\n     location parameter, ala SSLMutex. [Jim Jagielski]\n\n  *) mod_authn_dbd: Export any additional columns queried in the SQL select\n     into the environment with the name AUTHENTICATE_<COLUMN>. This brings\n     mod_authn_dbd behaviour in line with mod_authnz_ldap. [Graham Leggett]\n\n  *) mod_dbd: Key the storage of prepared statements on the hex string\n     value of server_rec, rather than the server name, as the server name\n     may change (eg when the server name is set) at any time, causing\n     weird behaviour in modules dependent on mod_dbd. [Graham Leggett]\n\n  *) mod_proxy_fcgi: Added win32 build. [Mladen Turk]\n\n  *) sendfile_nonblocking() takes the _brigade_ as an argument, gets\n     the first bucket from the brigade, finds it not to be a FILE\n     bucket and barfs. The fix is to pass a bucket rather than a brigade.\n     [Niklas Edmundsson <nikke acc.umu.se>]\n\n  *) mod_rewrite: support rewritemap by SQL query [Nick Kew]\n\n  *) ap_get_server_version() has been removed.  Third-party modules must\n     now use ap_get_server_banner() or ap_get_server_description().\n     [Jeff Trawick]\n\n  *) All MPMs: Introduce a check_config phase between pre_config and\n     open_logs, to allow modules to review interdependent configuration\n     directive values and adjust them while messages can still be logged\n     to the console.  Handle relevant MPM directives during this phase\n     and format messages for both the console and the error log, as\n     appropriate.  [Chris Darroch]\n\n  *) core: Do not allow internal redirects like the DirectoryIndex of mod_dir\n     to circumvent the symbolic link checks imposed by FollowSymLinks and\n     SymLinksIfOwnerMatch. [Nick Kew, Ruediger Pluem, William Rowe]\n\n  *) New SSLLogLevelDebugDump [ None (default) | IO (not bytes) | Bytes ]\n     configures the I/O Dump of SSL traffic, when LogLevel is set to Debug.\n     The default is none as this is far greater debugging resolution than\n     the typical administrator is prepared to untangle.  [William Rowe]\n\n  *) mod_disk_cache: If possible, check if the size of an object to cache is\n     within the configured boundaries before actually saving data.\n     [Niklas Edmundsson <nikke acc.umu.se>]\n\n  *) Worker and event MPMs: Remove improper scoreboard updates which were\n     performed in the event of a fork() failure.  [Chris Darroch]\n\n  *) Add support for fcgi:// proxies to mod_rewrite.\n     [Markus Schiegl <ms schiegl.com>]\n\n  *) Remove incorrect comments from scoreboard.h regarding conditional\n     loading of worker_score structure with mod_status, and remove unused\n     definitions relating to old life_status field.\n     [Chris Darroch <chrisd pearsoncmg.com>]\n\n  *) Remove allocation of memory for unused array of lb_score pointers\n     in ap_init_scoreboard().  [Chris Darroch <chrisd pearsoncmg.com>]\n\n  *) Add mod_proxy_fcgi, a FastCGI back end for mod_proxy.\n     [Garrett Rooney, Jim Jagielski, Paul Querna]\n\n  *) Event MPM: Fill in the scoreboard's tid field. PR 38736.\n     [Chris Darroch <chrisd pearsoncmg.com>]\n\n  *) mod_charset_lite: Remove Content-Length when output filter can\n     invalidate it.  Warn when input filter can invalidate it.\n     [Jeff Trawick]\n\n  *) Authz: Add the new module mod_authn_core that will provide common\n     authn directives such as 'AuthType', 'AuthName'.  Move the directives\n     'AuthType' and 'AuthName' out of the core module and merge mod_authz_alias\n     into mod_authn_core. [Brad Nicholes]\n\n  *) Authz: Move the directives 'Order', 'Allow', 'Deny' and 'Satisfy'\n     into the new module mod_access_compat which can be loaded to provide\n     support for these directives.\n     [Brad Nicholes]\n\n  *) Authz: Move the 'Require' directive from the core module as well as\n     add the directives '<SatisfyAll>', '<SatisfyOne>', '<RequireAlias>'\n     and 'Reject' to mod_authz_core. The new directives introduce 'AND/OR'\n     logic into the authorization processing. [Brad Nicholes]\n\n  *) Authz: Add the new module mod_authz_core which acts as the\n     authorization provider vector and contains common authz\n     directives. [Brad Nicholes]\n\n  *) Authz: Renamed mod_authz_dbm authz providers from 'group' and\n     'file-group' to 'dbm-group' and 'dbm-file-group'. [Brad Nicholes]\n\n  *) Authz: Added the new authz providers 'env', 'ip', 'host', 'all' to handle\n     host-based access control provided by mod_authz_host and invoked\n     through the 'Require' directive. [Brad Nicholes]\n\n  *) Authz: Convert all of the authz modules from hook based to\n     provider based. [Brad Nicholes]\n\n  *) mod_cache: Add CacheMinExpire directive to set the minimum time in\n     seconds to cache a document.\n     [Brian Akins <brian.akins turner.com>, Ruediger Pluem]\n\n  *) mod_authz_dbd: SQL authz with Login/Session support [Nick Kew]\n\n  *) Fix typo in ProxyStatus syntax error message.\n     [Christophe Jaillet <christophe.jaillet wanadoo.fr>]\n\n  *) Asynchronous write completion for the Event MPM.  [Brian Pane]\n\n  *) Added an End-Of-Request bucket type.  The logging of a request and\n     the freeing of its pool are now done when the EOR bucket is destroyed.\n     This has the effect of delaying the logging until right after the last\n     of the response is sent; ap_core_output_filter() calls the access logger\n     indirectly when it destroys the EOR bucket.  [Brian Pane]\n\n  *) Rewrite of logresolve support utility: IPv6 addresses are now supported\n     and the format of statistical output has changed. [Colm MacCarthaigh]\n\n  *) Rewrite of ap_coreoutput_filter to do nonblocking writes  [Brian Pane]\n\n  *) Added new connection states for handler and write completion\n     [Brian Pane]\n\n  *) mod_cgid: Refuse to work on Solaris 10 due to OS bugs.  PR 34264.\n     [Justin Erenkrantz]\n\n  *) Teach mod_ssl to use arbitrary OIDs in an SSLRequire directive,\n     allowing string-valued client certificate attributes to be used for\n     access control, as in: SSLRequire \"value\" in OID(\"1.3.6.1.4.1.18060.1\")\n     [Martin Kraemer, David Reid]\n\n  [Apache 2.3.0-dev includes those bug fixes and changes with the\n   Apache 2.2.xx tree as documented, and except as noted, below.]\n\nChanges with Apache 2.2.x and later:\n\n  *) http://svn.apache.org/viewvc/httpd/httpd/branches/2.2.x/CHANGES?view=markup\n\nChanges with Apache 2.0.x and later:\n\n  *) http://svn.apache.org/viewvc/httpd/httpd/branches/2.0.x/CHANGES?view=markup\n", "<?xml version=\"1.0\"?>\n<!DOCTYPE modulesynopsis SYSTEM \"../style/modulesynopsis.dtd\">\n<?xml-stylesheet type=\"text/xsl\" href=\"../style/manual.en.xsl\"?>\n<!-- $LastChangedRevision$ -->\n\n<!--\n Licensed to the Apache Software Foundation (ASF) under one or more\n contributor license agreements.  See the NOTICE file distributed with\n this work for additional information regarding copyright ownership.\n The ASF licenses this file to You under the Apache License, Version 2.0\n (the \"License\"); you may not use this file except in compliance with\n the License.  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<modulesynopsis metafile=\"core.xml.meta\">\n\n<name>core</name>\n<description>Core Apache HTTP Server features that are always\navailable</description>\n<status>Core</status>\n\n<directivesynopsis>\n<name>AcceptFilter</name>\n<description>Configures optimizations for a Protocol's Listener Sockets</description>\n<syntax>AcceptFilter <var>protocol</var> <var>accept_filter</var></syntax>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p>This directive enables operating system specific optimizations for a\n       listening socket by the <directive>Protocol</directive> type.\n       The basic premise is for the kernel to not send a socket to the server\n       process until either data is received or an entire HTTP Request is buffered.\n       Only <a href=\"http://www.freebsd.org/cgi/man.cgi?query=accept_filter&amp;sektion=9\">\n       FreeBSD's Accept Filters</a>, Linux's more primitive\n       <code>TCP_DEFER_ACCEPT</code>, and Windows' optimized AcceptEx()\n       are currently supported.</p>\n\n    <p>Using <code>none</code> for an argument will disable any accept filters\n       for that protocol.  This is useful for protocols that require a server\n       send data first, such as <code>ftp:</code> or <code>nntp</code>:</p>\n    <highlight language=\"config\">\nAcceptFilter nntp none\n    </highlight>\n\n    <p>The default protocol names are <code>https</code> for port 443\n       and <code>http</code> for all other ports.  To specify that another\n       protocol is being used with a listening port, add the <var>protocol</var>\n       argument to the <directive module=\"mpm_common\">Listen</directive>\n       directive.</p>\n\n    <p>The default values on FreeBSD are:</p>\n    <highlight language=\"config\">\nAcceptFilter http httpready\nAcceptFilter https dataready\n    </highlight>\n\n    <p>The <code>httpready</code> accept filter buffers entire HTTP requests at\n       the kernel level.  Once an entire request is received, the kernel then\n       sends it to the server. See the\n       <a href=\"http://www.freebsd.org/cgi/man.cgi?query=accf_http&amp;sektion=9\">\n       accf_http(9)</a> man page for more details.  Since HTTPS requests are\n       encrypted, only the <a href=\"http://www.freebsd.org/cgi/man.cgi?query=accf_data&amp;sektion=9\">\n       accf_data(9)</a> filter is used.</p>\n\n    <p>The default values on Linux are:</p>\n    <highlight language=\"config\">\nAcceptFilter http data\nAcceptFilter https data\n    </highlight>\n\n    <p>Linux's <code>TCP_DEFER_ACCEPT</code> does not support buffering http\n       requests.  Any value besides <code>none</code> will enable\n       <code>TCP_DEFER_ACCEPT</code> on that listener. For more details\n       see the Linux\n       <a href=\"http://man7.org/linux/man-pages/man7/tcp.7.html\">\n       tcp(7)</a> man page.</p>\n\n    <p>The default values on Windows are:</p>\n    <highlight language=\"config\">\nAcceptFilter http connect\nAcceptFilter https connect\n    </highlight>\n\n    <p>Window's mpm_winnt interprets the AcceptFilter to toggle the AcceptEx()\n       API, and does not support http protocol buffering. <code>connect</code>\n       will use the AcceptEx() API, also retrieve the network endpoint\n       addresses, but like <code>none</code> the <code>connect</code> option\n       does not wait for the initial data transmission.</p>\n\n    <p>On Windows, <code>none</code> uses accept() rather than AcceptEx()\n       and will not recycle sockets between connections.  This is useful for\n       network adapters with broken driver support, as well as some virtual\n       network providers such as vpn drivers, or spam, virus or spyware\n       filters.</p>\n\n    <note type=\"warning\">\n      <title>The <code>data</code> AcceptFilter (Windows)</title>\n\n      <p>For versions 2.4.23 and prior, the Windows <code>data</code> accept\n         filter waited until data had been transmitted and the initial data\n         buffer and network endpoint addresses had been retrieved from the\n         single AcceptEx() invocation. This implementation was subject to a\n         denial of service attack and has been disabled.</p>\n\n      <p>Current releases of httpd default to the <code>connect</code> filter\n         on Windows, and will fall back to <code>connect</code> if\n         <code>data</code> is specified. Users of prior releases are encouraged\n         to add an explicit setting of <code>connect</code> for their\n         AcceptFilter, as shown above.</p>\n    </note>\n\n</usage>\n<seealso><directive module=\"core\">Protocol</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AcceptPathInfo</name>\n<description>Resources accept trailing pathname information</description>\n<syntax>AcceptPathInfo On|Off|Default</syntax>\n<default>AcceptPathInfo Default</default>\n<contextlist><context>server config</context>\n<context>virtual host</context><context>directory</context>\n<context>.htaccess</context></contextlist>\n<override>FileInfo</override>\n\n<usage>\n\n    <p>This directive controls whether requests that contain trailing\n    pathname information that follows an actual filename (or\n    non-existent file in an existing directory) will be accepted or\n    rejected.  The trailing pathname information can be made\n    available to scripts in the <code>PATH_INFO</code> environment\n    variable.</p>\n\n    <p>For example, assume the location <code>/test/</code> points to\n    a directory that contains only the single file\n    <code>here.html</code>.  Then requests for\n    <code>/test/here.html/more</code> and\n    <code>/test/nothere.html/more</code> both collect\n    <code>/more</code> as <code>PATH_INFO</code>.</p>\n\n    <p>The three possible arguments for the\n    <directive>AcceptPathInfo</directive> directive are:</p>\n    <dl>\n    <dt><code>Off</code></dt><dd>A request will only be accepted if it\n    maps to a literal path that exists.  Therefore a request with\n    trailing pathname information after the true filename such as\n    <code>/test/here.html/more</code> in the above example will return\n    a 404 NOT FOUND error.</dd>\n\n    <dt><code>On</code></dt><dd>A request will be accepted if a\n    leading path component maps to a file that exists.  The above\n    example <code>/test/here.html/more</code> will be accepted if\n    <code>/test/here.html</code> maps to a valid file.</dd>\n\n    <dt><code>Default</code></dt><dd>The treatment of requests with\n    trailing pathname information is determined by the <a\n    href=\"../handler.html\">handler</a> responsible for the request.\n    The core handler for normal files defaults to rejecting\n    <code>PATH_INFO</code> requests. Handlers that serve scripts, such as <a\n    href=\"mod_cgi.html\">cgi-script</a> and <a\n    href=\"mod_isapi.html\">isapi-handler</a>, generally accept\n    <code>PATH_INFO</code> by default.</dd>\n    </dl>\n\n    <p>The primary purpose of the <code>AcceptPathInfo</code>\n    directive is to allow you to override the handler's choice of\n    accepting or rejecting <code>PATH_INFO</code>. This override is required,\n    for example, when you use a <a href=\"../filter.html\">filter</a>, such\n    as <a href=\"mod_include.html\">INCLUDES</a>, to generate content\n    based on <code>PATH_INFO</code>.  The core handler would usually reject\n    the request, so you can use the following configuration to enable\n    such a script:</p>\n\n    <highlight language=\"config\">\n&lt;Files \"mypaths.shtml\"&gt;\n  Options +Includes\n  SetOutputFilter INCLUDES\n  AcceptPathInfo On\n&lt;/Files&gt;\n    </highlight>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AccessFileName</name>\n<description>Name of the distributed configuration file</description>\n<syntax>AccessFileName <var>filename</var> [<var>filename</var>] ...</syntax>\n<default>AccessFileName .htaccess</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>While processing a request, the server looks for\n    the first existing configuration file from this list of names in\n    every directory of the path to the document, if distributed\n    configuration files are <a href=\"#allowoverride\">enabled for that\n    directory</a>. For example:</p>\n\n    <highlight language=\"config\">\nAccessFileName .acl\n    </highlight>\n\n    <p>Before returning the document\n    <code>/usr/local/web/index.html</code>, the server will read\n    <code>/.acl</code>, <code>/usr/.acl</code>,\n    <code>/usr/local/.acl</code> and <code>/usr/local/web/.acl</code>\n    for directives unless they have been disabled with:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/\"&gt;\n    AllowOverride None\n&lt;/Directory&gt;\n    </highlight>\n</usage>\n<seealso><directive module=\"core\">AllowOverride</directive></seealso>\n<seealso><a href=\"../configuring.html\">Configuration Files</a></seealso>\n<seealso><a href=\"../howto/htaccess.html\">.htaccess Files</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AddDefaultCharset</name>\n<description>Default charset parameter to be added when a response\ncontent-type is <code>text/plain</code> or <code>text/html</code></description>\n<syntax>AddDefaultCharset On|Off|<var>charset</var></syntax>\n<default>AddDefaultCharset Off</default>\n<contextlist><context>server config</context>\n<context>virtual host</context><context>directory</context>\n<context>.htaccess</context></contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>This directive specifies a default value for the media type\n    charset parameter (the name of a character encoding) to be added\n    to a response if and only if the response's content-type is either\n    <code>text/plain</code> or <code>text/html</code>.  This should override\n    any charset specified in the body of the response via a <code>META</code>\n    element, though the exact behavior is often dependent on the user's client\n    configuration. A setting of <code>AddDefaultCharset Off</code>\n    disables this functionality. <code>AddDefaultCharset On</code> enables\n    a default charset of <code>iso-8859-1</code>. Any other value is assumed\n    to be the <var>charset</var> to be used, which should be one of the\n    <a href=\"http://www.iana.org/assignments/character-sets\">IANA registered\n    charset values</a> for use in Internet media types (MIME types).\n    For example:</p>\n\n    <highlight language=\"config\">\nAddDefaultCharset utf-8\n    </highlight>\n\n    <p><directive>AddDefaultCharset</directive> should only be used when all\n    of the text resources to which it applies are known to be in that\n    character encoding and it is too inconvenient to label their charset\n    individually. One such example is to add the charset parameter\n    to resources containing generated content, such as legacy CGI\n    scripts, that might be vulnerable to cross-site scripting attacks\n    due to user-provided data being included in the output.  Note, however,\n    that a better solution is to just fix (or delete) those scripts, since\n    setting a default charset does not protect users that have enabled\n    the \"auto-detect character encoding\" feature on their browser.</p>\n</usage>\n<seealso><directive module=\"mod_mime\">AddCharset</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AllowEncodedSlashes</name>\n<description>Determines whether encoded path separators in URLs are allowed to\nbe passed through</description>\n<syntax>AllowEncodedSlashes On|Off|NoDecode</syntax>\n<default>AllowEncodedSlashes Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n<compatibility>\nNoDecode option available in 2.3.12 and later.</compatibility>\n\n<usage>\n    <p>The <directive>AllowEncodedSlashes</directive> directive allows URLs\n    which contain encoded path separators (<code>%2F</code> for <code>/</code>\n    and additionally <code>%5C</code> for <code>\\</code> on accordant systems)\n    to be used in the path info.</p>\n\n    <p>With the default value, <code>Off</code>, such URLs are refused\n    with a 404 (Not found) error.</p>\n\n    <p>With the value <code>On</code>, such URLs are accepted, and encoded\n      slashes are decoded like all other encoded characters.</p>\n\n    <p>With the value <code>NoDecode</code>, such URLs are accepted, but\n      encoded slashes are not decoded but left in their encoded state.</p>\n\n    <p>Turning <directive>AllowEncodedSlashes</directive> <code>On</code> is\n    mostly useful when used in conjunction with <code>PATH_INFO</code>.</p>\n\n    <note><title>Note</title>\n      <p>If encoded slashes are needed in path info, use of <code>NoDecode</code> is\n      strongly recommended as a security measure.  Allowing slashes\n      to be decoded could potentially allow unsafe paths.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">AcceptPathInfo</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AllowOverride</name>\n<description>Types of directives that are allowed in\n<code>.htaccess</code> files</description>\n<syntax>AllowOverride All|None|<var>directive-type</var>\n[<var>directive-type</var>] ...</syntax>\n<default>AllowOverride None (2.3.9 and later), AllowOverride All (2.3.8 and earlier)</default>\n<contextlist><context>directory</context></contextlist>\n\n<usage>\n    <p>When the server finds an <code>.htaccess</code> file (as\n    specified by <directive module=\"core\">AccessFileName</directive>),\n    it needs to know which directives declared in that file can override\n    earlier configuration directives.</p>\n\n    <note><title>Only available in &lt;Directory&gt; sections</title>\n    <directive>AllowOverride</directive> is valid only in\n    <directive type=\"section\" module=\"core\">Directory</directive>\n    sections specified without regular expressions, not in <directive\n    type=\"section\" module=\"core\">Location</directive>, <directive\n    module=\"core\" type=\"section\">DirectoryMatch</directive> or\n    <directive type=\"section\" module=\"core\">Files</directive> sections.\n    </note>\n\n    <p>When this directive is set to <code>None</code> and <directive\n    module=\"core\">AllowOverrideList</directive> is set to\n    <code>None</code>, <a href=\"#accessfilename\">.htaccess</a> files are\n    completely ignored. In this case, the server will not even attempt\n    to read <code>.htaccess</code> files in the filesystem.</p>\n\n    <p>When this directive is set to <code>All</code>, then any\n    directive which has the .htaccess <a\n    href=\"directive-dict.html#Context\">Context</a> is allowed in\n    <code>.htaccess</code> files.</p>\n\n    <p>The <var>directive-type</var> can be one of the following\n    groupings of directives. (See the <a href=\"overrides.html\">override class\n    index</a> for an up-to-date listing of which directives are enabled by each\n    <var>directive-type</var>.)</p>\n\n    <dl>\n      <dt><a href=\"overrides.html#override-authconfig\">AuthConfig</a></dt>\n\n      <dd>\n\n      Allow use of the authorization directives (<directive\n      module=\"mod_authz_dbm\">AuthDBMGroupFile</directive>,\n      <directive module=\"mod_authn_dbm\">AuthDBMUserFile</directive>,\n      <directive module=\"mod_authz_groupfile\">AuthGroupFile</directive>,\n      <directive module=\"mod_authn_core\">AuthName</directive>,\n      <directive module=\"mod_authn_core\">AuthType</directive>, <directive\n      module=\"mod_authn_file\">AuthUserFile</directive>, <directive\n      module=\"mod_authz_core\">Require</directive>, <em>etc.</em>).</dd>\n\n      <dt><a href=\"overrides.html#override-fileinfo\">FileInfo</a></dt>\n\n      <dd>\n      Allow use of the directives controlling document types\n     (<directive module=\"core\">ErrorDocument</directive>,\n      <directive module=\"core\">ForceType</directive>,\n      <directive module=\"mod_negotiation\">LanguagePriority</directive>,\n      <directive module=\"core\">SetHandler</directive>,\n      <directive module=\"core\">SetInputFilter</directive>,\n      <directive module=\"core\">SetOutputFilter</directive>, and\n      <module>mod_mime</module> Add* and Remove* directives),\n      document meta data (<directive\n      module=\"mod_headers\">Header</directive>, <directive\n      module=\"mod_headers\">RequestHeader</directive>, <directive\n      module=\"mod_setenvif\">SetEnvIf</directive>, <directive\n      module=\"mod_setenvif\">SetEnvIfNoCase</directive>, <directive\n      module=\"mod_setenvif\">BrowserMatch</directive>, <directive\n      module=\"mod_usertrack\">CookieExpires</directive>, <directive\n      module=\"mod_usertrack\">CookieDomain</directive>, <directive\n      module=\"mod_usertrack\">CookieStyle</directive>, <directive\n      module=\"mod_usertrack\">CookieTracking</directive>, <directive\n      module=\"mod_usertrack\">CookieName</directive>),\n      <module>mod_rewrite</module> directives (<directive\n      module=\"mod_rewrite\">RewriteEngine</directive>, <directive\n      module=\"mod_rewrite\">RewriteOptions</directive>, <directive\n      module=\"mod_rewrite\">RewriteBase</directive>, <directive\n      module=\"mod_rewrite\">RewriteCond</directive>, <directive\n      module=\"mod_rewrite\">RewriteRule</directive>),\n      <module>mod_alias</module> directives (<directive\n      module=\"mod_alias\">Redirect</directive>, <directive\n      module=\"mod_alias\">RedirectTemp</directive>, <directive\n      module=\"mod_alias\">RedirectPermanent</directive>, <directive\n      module=\"mod_alias\">RedirectMatch</directive>), and\n      <directive module=\"mod_actions\">Action</directive> from\n      <module>mod_actions</module>.\n      </dd>\n\n      <dt><a href=\"overrides.html#override-indexes\">Indexes</a></dt>\n\n      <dd>\n      Allow use of the directives controlling directory indexing\n      (<directive\n      module=\"mod_autoindex\">AddDescription</directive>,\n      <directive module=\"mod_autoindex\">AddIcon</directive>, <directive\n      module=\"mod_autoindex\">AddIconByEncoding</directive>,\n      <directive module=\"mod_autoindex\">AddIconByType</directive>,\n      <directive module=\"mod_autoindex\">DefaultIcon</directive>, <directive\n      module=\"mod_dir\">DirectoryIndex</directive>, <a href=\"mod_autoindex.html#indexoptions.fancyindexing\"\n      ><code>FancyIndexing</code></a>, <directive\n      module=\"mod_autoindex\">HeaderName</directive>, <directive\n      module=\"mod_autoindex\">IndexIgnore</directive>, <directive\n      module=\"mod_autoindex\">IndexOptions</directive>, <directive\n      module=\"mod_autoindex\">ReadmeName</directive>,\n      <em>etc.</em>).</dd>\n\n      <dt><a href=\"overrides.html#override-limit\">Limit</a></dt>\n\n      <dd>\n      Allow use of the directives controlling host access (<directive\n      module=\"mod_access_compat\">Allow</directive>, <directive\n      module=\"mod_access_compat\">Deny</directive> and <directive\n      module=\"mod_access_compat\">Order</directive>).</dd>\n\n      <dt>Nonfatal=[Override|Unknown|All]</dt>\n\n      <dd>\n      Allow use of AllowOverride option to treat syntax errors in\n      .htaccess as nonfatal. Instead of causing an Internal Server\n      Error, disallowed or unrecognised directives will be ignored\n      and a warning logged:\n      <ul>\n          <li><strong>Nonfatal=Override</strong> treats directives\n              forbidden by AllowOverride as nonfatal.</li>\n          <li><strong>Nonfatal=Unknown</strong> treats unknown directives\n              as nonfatal.  This covers typos and directives implemented\n              by a module that's not present.</li>\n          <li><strong>Nonfatal=All</strong> treats both the above as nonfatal.</li>\n      </ul>\n      <p>Note that a syntax error in a valid directive will still cause\n      an internal server error.</p>\n      <note type=\"warning\"><title>Security</title>\n          Nonfatal errors may have security implications for .htaccess users.\n          For example, if AllowOverride disallows AuthConfig, users'\n          configuration designed to restrict access to a site will be disabled.\n      </note>\n      </dd>\n\n      <dt><a href=\"overrides.html#override-options\">Options</a>[=<var>Option</var>,...]</dt>\n\n      <dd>\n      Allow use of the directives controlling specific directory\n      features (<directive module=\"core\">Options</directive> and\n      <directive module=\"mod_include\">XBitHack</directive>).\n      An equal sign may be given followed by a comma-separated list, without\n      spaces, of options that may be set using the <directive\n      module=\"core\">Options</directive> command.\n\n      <note><title>Implicit disabling of Options</title>\n      <p>Even though the list of options that may be used in .htaccess files\n         can be limited with this directive, as long as any <directive\n         module=\"core\">Options</directive> directive is allowed any\n         other inherited option can be disabled by using the non-relative\n         syntax.  In other words, this mechanism cannot force a specific option\n         to remain <em>set</em> while allowing any others to be set.\n      </p></note>\n\n      <example>\n      AllowOverride Options=Indexes,MultiViews\n      </example>\n      </dd>\n    </dl>\n\n    <p>Example:</p>\n\n    <highlight language=\"config\">\nAllowOverride AuthConfig Indexes\n    </highlight>\n\n    <p>In the example above, all directives that are neither in the group\n    <code>AuthConfig</code> nor <code>Indexes</code> cause an internal\n    server error.</p>\n\n    <note><p>For security and performance reasons, do not set\n    <code>AllowOverride</code> to anything other than <code>None</code>\n    in your <code>&lt;Directory \"/\"&gt;</code> block. Instead, find (or\n    create) the <code>&lt;Directory&gt;</code> block that refers to the\n    directory where you're actually planning to place a\n    <code>.htaccess</code> file.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">AccessFileName</directive></seealso>\n<seealso><directive module=\"core\">AllowOverrideList</directive></seealso>\n<seealso><a href=\"../configuring.html\">Configuration Files</a></seealso>\n<seealso><a href=\"../howto/htaccess.html\">.htaccess Files</a></seealso>\n<seealso><a href=\"overrides.html\">Override Class Index for .htaccess</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AllowOverrideList</name>\n<description>Individual directives that are allowed in\n<code>.htaccess</code> files</description>\n<syntax>AllowOverrideList None|<var>directive</var>\n[<var>directive-type</var>] ...</syntax>\n<default>AllowOverrideList None</default>\n<contextlist><context>directory</context></contextlist>\n\n<usage>\n    <p>When the server finds an <code>.htaccess</code> file (as\n    specified by <directive module=\"core\">AccessFileName</directive>),\n    it needs to know which directives declared in that file can override\n    earlier configuration directives.</p>\n\n    <note><title>Only available in &lt;Directory&gt; sections</title>\n    <directive>AllowOverrideList</directive> is valid only in\n    <directive type=\"section\" module=\"core\">Directory</directive>\n    sections specified without regular expressions, not in <directive\n    type=\"section\" module=\"core\">Location</directive>, <directive\n    module=\"core\" type=\"section\">DirectoryMatch</directive> or\n    <directive type=\"section\" module=\"core\">Files</directive> sections.\n    </note>\n\n    <p>When this directive is set to <code>None</code> and <directive\n    module=\"core\">AllowOverride</directive> is set to <code>None</code>,\n    then <a href=\"#accessfilename\">.htaccess</a> files are completely\n    ignored.  In this case, the server will not even attempt to read\n    <code>.htaccess</code> files in the filesystem.</p>\n\n    <p>Example:</p>\n\n    <highlight language=\"config\">\nAllowOverride None\nAllowOverrideList Redirect RedirectMatch\n    </highlight>\n\n    <p>In the example above, only the <code>Redirect</code> and\n    <code>RedirectMatch</code> directives are allowed. All others will\n    cause an internal server error.</p>\n\n    <p>Example:</p>\n\n    <highlight language=\"config\">\nAllowOverride AuthConfig\nAllowOverrideList CookieTracking CookieName\n    </highlight>\n\n    <p>In the example above, <directive module=\"core\">AllowOverride\n    </directive> grants permission to the <code>AuthConfig</code>\n    directive grouping and <directive>AllowOverrideList</directive> grants\n    permission to only two directives from the <code>FileInfo</code> directive\n    grouping. All others will cause an internal server error.</p>\n</usage>\n\n<seealso><directive module=\"core\">AccessFileName</directive></seealso>\n<seealso><directive module=\"core\">AllowOverride</directive></seealso>\n<seealso><a href=\"../configuring.html\">Configuration Files</a></seealso>\n<seealso><a href=\"../howto/htaccess.html\">.htaccess Files</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>CGIMapExtension</name>\n<description>Technique for locating the interpreter for CGI\nscripts</description>\n<syntax>CGIMapExtension <var>cgi-path</var> <var>.extension</var></syntax>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>NetWare only</compatibility>\n\n<usage>\n    <p>This directive is used to control how Apache httpd finds the\n    interpreter used to run CGI scripts. For example, setting\n    <code>CGIMapExtension sys:\\foo.nlm .foo</code> will\n    cause all CGI script files with a <code>.foo</code> extension to\n    be passed to the FOO interpreter.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>CGIPassAuth</name>\n<description>Enables passing HTTP authorization headers to scripts as CGI\nvariables</description>\n<syntax>CGIPassAuth On|Off</syntax>\n<default>CGIPassAuth Off</default>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>AuthConfig</override>\n<compatibility>Available in Apache HTTP Server 2.4.13 and later</compatibility>\n\n<usage>\n    <p><directive>CGIPassAuth</directive> allows scripts access to HTTP\n    authorization headers such as <code>Authorization</code>, which is\n    required for scripts that implement HTTP Basic authentication.\n    Normally these HTTP headers are hidden from scripts. This is to disallow\n    scripts from seeing user ids and passwords used to access the server when\n    HTTP Basic authentication is enabled in the web server.  This directive\n    should be used when scripts are allowed to implement HTTP Basic\n    authentication.</p>\n\n    <p>This directive can be used instead of the compile-time setting\n    <code>SECURITY_HOLE_PASS_AUTHORIZATION</code> which has been available\n    in previous versions of Apache HTTP Server.</p>\n\n    <p>The setting is respected by any modules which use\n    <code>ap_add_common_vars()</code>, such as <module>mod_cgi</module>,\n    <module>mod_cgid</module>, <module>mod_proxy_fcgi</module>,\n    <module>mod_proxy_scgi</module>, and so on.  Notably, it affects\n    modules which don't handle the request in the usual sense but\n    still use this API; examples of this are <module>mod_include</module>\n    and <module>mod_ext_filter</module>.  Third-party modules that don't\n    use <code>ap_add_common_vars()</code> may choose to respect the setting\n    as well.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>CGIVar</name>\n<description>Controls how some CGI variables are set</description>\n<syntax>CGIVar <var>variable</var> <var>rule</var></syntax>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>Available in Apache HTTP Server 2.4.21 and later</compatibility>\n\n<usage>\n  <p>This directive controls how some CGI variables are set.</p>\n\n  <p><strong>REQUEST_URI</strong> rules:</p>\n  <dl>\n    <dt><code>original-uri</code> (default)</dt>\n    <dd>The value is taken from the original request line, and will not\n    reflect internal redirects or subrequests which change the requested\n    resource.</dd>\n    <dt><code>current-uri</code></dt>\n    <dd>The value reflects the resource currently being processed,\n    which may be different than the original request from the client\n    due to internal redirects or subrequests.</dd>\n  </dl>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ContentDigest</name>\n<description>Enables the generation of <code>Content-MD5</code> HTTP Response\nheaders</description>\n<syntax>ContentDigest On|Off</syntax>\n<default>ContentDigest Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>Options</override>\n<status>Experimental</status>\n\n<usage>\n    <p>This directive enables the generation of\n    <code>Content-MD5</code> headers as defined in RFC1864\n    respectively RFC2616.</p>\n\n    <p>MD5 is an algorithm for computing a \"message digest\"\n    (sometimes called \"fingerprint\") of arbitrary-length data, with\n    a high degree of confidence that any alterations in the data\n    will be reflected in alterations in the message digest.</p>\n\n    <p>The <code>Content-MD5</code> header provides an end-to-end\n    message integrity check (MIC) of the entity-body. A proxy or\n    client may check this header for detecting accidental\n    modification of the entity-body in transit. Example header:</p>\n\n    <example>\n      Content-MD5: AuLb7Dp1rqtRtxz2m9kRpA==\n    </example>\n\n    <p>Note that this can cause performance problems on your server\n    since the message digest is computed on every request (the\n    values are not cached).</p>\n\n    <p><code>Content-MD5</code> is only sent for documents served\n    by the <module>core</module>, and not by any module. For example,\n    SSI documents, output from CGI scripts, and byte range responses\n    do not have this header.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>DefaultRuntimeDir</name>\n<description>Base directory for the server run-time files</description>\n<syntax>DefaultRuntimeDir <var>directory-path</var></syntax>\n<default>DefaultRuntimeDir DEFAULT_REL_RUNTIMEDIR (logs/)</default>\n<contextlist><context>server config</context></contextlist>\n<compatibility>Available in Apache 2.4.2 and later</compatibility>\n\n<usage>\n    <p>The <directive>DefaultRuntimeDir</directive> directive sets the\n    directory in which the server will create various run-time files\n    (shared memory, locks, etc.). If set as a relative path, the full path\n    will be relative to <directive>ServerRoot</directive>.</p>\n\n    <p><strong>Example</strong></p>\n   <highlight language=\"config\">\nDefaultRuntimeDir scratch/\n    </highlight>\n\n    <p>The default location of <directive>DefaultRuntimeDir</directive> may be\n    modified by changing the <code>DEFAULT_REL_RUNTIMEDIR</code> #define\n    at build time.</p>\n\n   <p>Note: <directive>ServerRoot</directive> should be specified before this\n   directive is used. Otherwise, the default value of <directive>ServerRoot</directive>\n   would be used to set the base directory.</p>\n\n</usage>\n<seealso><a href=\"../misc/security_tips.html#serverroot\">the\n    security tips</a> for information on how to properly set\n    permissions on the <directive>ServerRoot</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>DefaultType</name>\n<description>This directive has no effect other than to emit warnings\nif the value is not <code>none</code>. In prior versions, DefaultType\nwould specify a default media type to assign to response content for\nwhich no other media type configuration could be found.\n</description>\n<syntax>DefaultType <var>media-type|none</var></syntax>\n<default>DefaultType none</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>The argument <code>none</code> is available in Apache httpd 2.2.7 and later.  All other choices are DISABLED for 2.3.x and later.</compatibility>\n\n<usage>\n    <p>This directive has been disabled.  For backwards compatibility\n    of configuration files, it may be specified with the value\n    <code>none</code>, meaning no default media type. For example:</p>\n\n    <highlight language=\"config\">\nDefaultType None\n    </highlight>\n\n    <p><code>DefaultType None</code> is only available in\n    httpd-2.2.7 and later.</p>\n\n    <p>Use the mime.types configuration file and the\n    <directive module=\"mod_mime\">AddType</directive> to configure media\n    type assignments via file extensions, or the\n    <directive module=\"core\">ForceType</directive> directive to configure\n    the media type for specific resources. Otherwise, the server will\n    send the response without a Content-Type header field and the\n    recipient may attempt to guess the media type.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Define</name>\n<description>Define a variable</description>\n<syntax>Define <var>parameter-name</var> [<var>parameter-value</var>]</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context></contextlist>\n\n<usage>\n    <p>In its one parameter form, <directive>Define</directive> is\n    equivalent to passing the <code>-D</code> argument to\n    <program>httpd</program>. It can be used to toggle the use of\n    <directive module=\"core\" type=\"section\">IfDefine</directive>\n    sections without needing to alter <code>-D</code> arguments in any\n    startup scripts.</p>\n\n    <p>In addition to that, if the second parameter is given, a config variable\n    is set to this value. The variable can be used in the configuration using\n    the <code>${VAR}</code> syntax. The variable is always globally defined\n    and not limited to the scope of the surrounding config section.</p>\n\n    <highlight language=\"config\">\n&lt;IfDefine TEST&gt;\n  Define servername test.example.com\n&lt;/IfDefine&gt;\n&lt;IfDefine !TEST&gt;\n  Define servername www.example.com\n  Define SSL\n&lt;/IfDefine&gt;\n\nDocumentRoot \"/var/www/${servername}/htdocs\"\n    </highlight>\n\n    <p>Variable names may not contain colon \":\" characters, to avoid clashes\n    with <directive module=\"mod_rewrite\">RewriteMap</directive>'s syntax.</p>\n\n    <note><title>Virtual Host scope and pitfalls</title>\n      <p>While this directive is supported in virtual host context,\n         the changes it makes are visible to any later configuration\n         directives, beyond any enclosing virtual host.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">UnDefine</directive></seealso>\n<seealso><directive module=\"core\">IfDefine</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>Directory</name>\n<description>Enclose a group of directives that apply only to the\nnamed file-system directory, sub-directories, and their contents.</description>\n<syntax>&lt;Directory <var>directory-path</var>&gt;\n... &lt;/Directory&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p><directive type=\"section\">Directory</directive> and\n    <code>&lt;/Directory&gt;</code> are used to enclose a group of\n    directives that will apply only to the named directory,\n    sub-directories of that directory, and the files within the respective\n    directories.  Any directive that is allowed\n    in a directory context may be used. <var>Directory-path</var> is\n    either the full path to a directory, or a wild-card string using\n    Unix shell-style matching. In a wild-card string, <code>?</code> matches\n    any single character, and <code>*</code> matches any sequences of\n    characters. You may also use <code>[]</code> character ranges. None\n    of the wildcards match a `/' character, so <code>&lt;Directory\n    \"/*/public_html\"&gt;</code> will not match\n    <code>/home/user/public_html</code>, but <code>&lt;Directory\n    \"/home/*/public_html\"&gt;</code> will match. Example:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/usr/local/httpd/htdocs\"&gt;\n  Options Indexes FollowSymLinks\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>Directory paths <em>may</em> be quoted, if you like, however, it\n    <em>must</em> be quoted if the path contains spaces. This is because a\n    space would otherwise indicate the end of an argument.</p>\n\n    <note>\n      <p>Be careful with the <var>directory-path</var> arguments:\n      They have to literally match the filesystem path which Apache httpd uses\n      to access the files. Directives applied to a particular\n      <code>&lt;Directory&gt;</code> will not apply to files accessed from\n      that same directory via a different path, such as via different symbolic\n      links.</p>\n    </note>\n\n    <p><glossary ref=\"regex\">Regular\n    expressions</glossary> can also be used, with the addition of the\n    <code>~</code> character. For example:</p>\n\n    <highlight language=\"config\">\n&lt;Directory ~ \"^/www/[0-9]{3}\"&gt;\n\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>would match directories in <code>/www/</code> that consisted of\n    three numbers.</p>\n\n    <p>If multiple (non-regular expression) <directive\n    type=\"section\">Directory</directive> sections\n    match the directory (or one of its parents) containing a document,\n    then the directives are applied in the order of shortest match\n    first, interspersed with the directives from the <a\n    href=\"#accessfilename\">.htaccess</a> files. For example,\n    with</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/\"&gt;\n  AllowOverride None\n&lt;/Directory&gt;\n\n&lt;Directory \"/home\"&gt;\n  AllowOverride FileInfo\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>for access to the document <code>/home/web/dir/doc.html</code>\n    the steps are:</p>\n\n    <ul>\n      <li>Apply directive <code>AllowOverride None</code>\n      (disabling <code>.htaccess</code> files).</li>\n\n      <li>Apply directive <code>AllowOverride FileInfo</code> (for\n      directory <code>/home</code>).</li>\n\n      <li>Apply any <code>FileInfo</code> directives in\n      <code>/home/.htaccess</code>, <code>/home/web/.htaccess</code> and\n      <code>/home/web/dir/.htaccess</code> in that order.</li>\n    </ul>\n\n    <p>Regular expressions are not considered until after all of the\n    normal sections have been applied. Then all of the regular\n    expressions are tested in the order they appeared in the\n    configuration file. For example, with</p>\n\n    <highlight language=\"config\">\n&lt;Directory ~ \"abc$\"&gt;\n  # ... directives here ...\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>the regular expression section won't be considered until after\n    all normal <directive type=\"section\">Directory</directive>s and\n    <code>.htaccess</code> files have been applied. Then the regular\n    expression will match on <code>/home/abc/public_html/abc</code> and\n    the corresponding <directive type=\"section\">Directory</directive> will\n    be applied.</p>\n\n   <p><strong>Note that the default access for\n    <code>&lt;Directory \"/\"&gt;</code> is to permit all access.\n    This means that Apache httpd will serve any file mapped from an URL. It is\n    recommended that you change this with a block such\n    as</strong></p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/\"&gt;\n  Require all denied\n&lt;/Directory&gt;\n    </highlight>\n\n    <p><strong>and then override this for directories you\n    <em>want</em> accessible. See the <a\n    href=\"../misc/security_tips.html\">Security Tips</a> page for more\n    details.</strong></p>\n\n    <p>The directory sections occur in the <code>httpd.conf</code> file.\n    <directive type=\"section\">Directory</directive> directives\n    cannot nest, and cannot appear in a <directive module=\"core\"\n    type=\"section\">Limit</directive> or <directive module=\"core\"\n    type=\"section\">LimitExcept</directive> section.</p>\n</usage>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;,\n    &lt;Location&gt; and &lt;Files&gt; sections work</a> for an\n    explanation of how these different sections are combined when a\n    request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>DirectoryMatch</name>\n<description>Enclose directives that apply to\nthe contents of file-system directories matching a regular expression.</description>\n<syntax>&lt;DirectoryMatch <var>regex</var>&gt;\n... &lt;/DirectoryMatch&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p><directive type=\"section\">DirectoryMatch</directive> and\n    <code>&lt;/DirectoryMatch&gt;</code> are used to enclose a group\n    of directives which will apply only to the named directory (and the files within),\n    the same as <directive module=\"core\" type=\"section\">Directory</directive>.\n    However, it takes as an argument a\n    <glossary ref=\"regex\">regular expression</glossary>.  For example:</p>\n\n    <highlight language=\"config\">\n&lt;DirectoryMatch \"^/www/(.+/)?[0-9]{3}/\"&gt;\n    # ...\n&lt;/DirectoryMatch&gt;\n    </highlight>\n\n    <p>matches directories in <code>/www/</code> (or any subdirectory thereof)\n    that consist of three numbers.</p>\n\n   <note><title>Compatibility</title>\n      Prior to 2.3.9, this directive implicitly applied to sub-directories\n      (like <directive module=\"core\" type=\"section\">Directory</directive>) and\n      could not match the end of line symbol ($).  In 2.3.9 and later,\n      only directories that match the expression are affected by the enclosed\n      directives.\n    </note>\n\n    <note><title>Trailing Slash</title>\n      This directive applies to requests for directories that may or may\n      not end in a trailing slash, so expressions that are anchored to the\n      end of line ($) must be written with care.\n    </note>\n\n    <p>From 2.4.8 onwards, named groups and backreferences are captured and\n    written to the environment with the corresponding name prefixed with\n    \"MATCH_\" and in upper case. This allows elements of paths to be referenced\n    from within <a href=\"../expr.html\">expressions</a> and modules like\n    <module>mod_rewrite</module>. In order to prevent confusion, numbered\n    (unnamed) backreferences are ignored. Use named groups instead.</p>\n\n    <highlight language=\"config\">\n&lt;DirectoryMatch \"^/var/www/combined/(?&lt;sitename&gt;[^/]+)\"&gt;\n    Require ldap-group cn=%{env:MATCH_SITENAME},ou=combined,o=Example\n&lt;/DirectoryMatch&gt;\n    </highlight>\n</usage>\n<seealso><directive type=\"section\" module=\"core\">Directory</directive> for\na description of how regular expressions are mixed in with normal\n<directive type=\"section\">Directory</directive>s</seealso>\n<seealso><a\nhref=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt; and\n&lt;Files&gt; sections work</a> for an explanation of how these different\nsections are combined when a request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>DocumentRoot</name>\n<description>Directory that forms the main document tree visible\nfrom the web</description>\n<syntax>DocumentRoot <var>directory-path</var></syntax>\n<default>DocumentRoot \"/usr/local/apache/htdocs\"</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>This directive sets the directory from which <program>httpd</program>\n    will serve files. Unless matched by a directive like <directive\n    module=\"mod_alias\">Alias</directive>, the server appends the\n    path from the requested URL to the document root to make the\n    path to the document. Example:</p>\n\n    <highlight language=\"config\">\nDocumentRoot \"/usr/web\"\n    </highlight>\n\n    <p>then an access to\n    <code>http://my.example.com/index.html</code> refers to\n    <code>/usr/web/index.html</code>. If the <var>directory-path</var> is\n    not absolute then it is assumed to be relative to the <directive\n    module=\"core\">ServerRoot</directive>.</p>\n\n    <p>The <directive>DocumentRoot</directive> should be specified without\n    a trailing slash.</p>\n</usage>\n<seealso><a href=\"../urlmapping.html#documentroot\">Mapping URLs to Filesystem\nLocations</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>Else</name>\n<description>Contains directives that apply only if the condition of a\nprevious <directive type=\"section\" module=\"core\">If</directive> or\n<directive type=\"section\" module=\"core\">ElseIf</directive> section is not\nsatisfied by a request at runtime</description>\n<syntax>&lt;Else&gt; ... &lt;/Else&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Nested conditions are evaluated in 2.4.26 and later</compatibility>\n\n<usage>\n    <p>The <directive type=\"section\">Else</directive> applies the enclosed\n    directives if and only if the most recent\n    <directive type=\"section\">If</directive> or\n    <directive type=\"section\">ElseIf</directive> section\n    in the same scope has not been applied.\n    For example: In </p>\n\n    <highlight language=\"config\">\n&lt;If \"-z req('Host')\"&gt;\n  # ...\n&lt;/If&gt;\n&lt;Else&gt;\n  # ...\n&lt;/Else&gt;\n    </highlight>\n\n    <p> The <directive type=\"section\">If</directive> would match HTTP/1.0\n        requests without a <var>Host:</var> header and the\n        <directive type=\"section\">Else</directive> would match requests\n        with a <var>Host:</var> header.</p>\n\n</usage>\n<seealso><directive type=\"section\" module=\"core\">If</directive></seealso>\n<seealso><directive type=\"section\" module=\"core\">ElseIf</directive></seealso>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;,\n    &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received.\n    <directive type=\"section\">If</directive>,\n    <directive type=\"section\">ElseIf</directive>, and\n    <directive type=\"section\">Else</directive> are applied last.</seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>ElseIf</name>\n<description>Contains directives that apply only if a condition is satisfied\nby a request at runtime while the condition of a previous\n<directive type=\"section\" module=\"core\">If</directive> or\n<directive type=\"section\">ElseIf</directive> section is not\nsatisfied</description>\n<syntax>&lt;ElseIf <var>expression</var>&gt; ... &lt;/ElseIf&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Nested conditions are evaluated in 2.4.26 and later</compatibility>\n\n<usage>\n    <p>The <directive type=\"section\">ElseIf</directive> applies the enclosed\n    directives if and only if both the given condition evaluates to true and\n    the most recent <directive type=\"section\">If</directive> or\n    <directive type=\"section\">ElseIf</directive> section in the same scope has\n    not been applied.  For example: In </p>\n\n    <highlight language=\"config\">\n&lt;If \"-R '10.1.0.0/16'\"&gt;\n  #...\n&lt;/If&gt;\n&lt;ElseIf \"-R '10.0.0.0/8'\"&gt;\n  #...\n&lt;/ElseIf&gt;\n&lt;Else&gt;\n  #...\n&lt;/Else&gt;\n    </highlight>\n\n    <p>The <directive type=\"section\">ElseIf</directive> would match if\n    the remote address of a request belongs to the subnet 10.0.0.0/8 but\n    not to the subnet 10.1.0.0/16.</p>\n\n</usage>\n<seealso><a href=\"../expr.html\">Expressions in Apache HTTP Server</a>,\nfor a complete reference and more examples.</seealso>\n<seealso><directive type=\"section\" module=\"core\">If</directive></seealso>\n<seealso><directive type=\"section\" module=\"core\">Else</directive></seealso>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;,\n    &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received.\n    <directive type=\"section\">If</directive>,\n    <directive type=\"section\">ElseIf</directive>, and\n    <directive type=\"section\">Else</directive> are applied last.</seealso>\n</directivesynopsis>\n\n\n\n<directivesynopsis>\n<name>EnableMMAP</name>\n<description>Use memory-mapping to read files during delivery</description>\n<syntax>EnableMMAP On|Off</syntax>\n<default>EnableMMAP On</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>This directive controls whether the <program>httpd</program> may use\n    memory-mapping if it needs to read the contents of a file during\n    delivery.  By default, when the handling of a request requires\n    access to the data within a file -- for example, when delivering a\n    server-parsed file using <module>mod_include</module> -- Apache httpd\n    memory-maps the file if the OS supports it.</p>\n\n    <p>This memory-mapping sometimes yields a performance improvement.\n    But in some environments, it is better to disable the memory-mapping\n    to prevent operational problems:</p>\n\n    <ul>\n    <li>On some multiprocessor systems, memory-mapping can reduce the\n    performance of the <program>httpd</program>.</li>\n    <li>Deleting or truncating a file while <program>httpd</program>\n      has it memory-mapped can cause <program>httpd</program> to\n      crash with a segmentation fault.\n    </li>\n    </ul>\n\n    <p>For server configurations that are vulnerable to these problems,\n    you should disable memory-mapping of delivered files by specifying:</p>\n\n    <highlight language=\"config\">\nEnableMMAP Off\n    </highlight>\n\n    <p>For NFS mounted files, this feature may be disabled explicitly for\n    the offending files by specifying:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/path-to-nfs-files\"&gt;\n  EnableMMAP Off\n&lt;/Directory&gt;\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>EnableSendfile</name>\n<description>Use the kernel sendfile support to deliver files to the client</description>\n<syntax>EnableSendfile On|Off</syntax>\n<default>EnableSendfile Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>Default changed to Off in\nversion 2.3.9.</compatibility>\n\n<usage>\n    <p>This directive controls whether <program>httpd</program> may use the\n    sendfile support from the kernel to transmit file contents to the client.\n    By default, when the handling of a request requires no access\n    to the data within a file -- for example, when delivering a\n    static file -- Apache httpd uses sendfile to deliver the file contents\n    without ever reading the file if the OS supports it.</p>\n\n    <p>This sendfile mechanism avoids separate read and send operations,\n    and buffer allocations. But on some platforms or within some\n    filesystems, it is better to disable this feature to avoid\n    operational problems:</p>\n\n    <ul>\n    <li>Some platforms may have broken sendfile support that the build\n    system did not detect, especially if the binaries were built on\n    another box and moved to such a machine with broken sendfile\n    support.</li>\n    <li>On Linux the use of sendfile triggers TCP-checksum\n    offloading bugs on certain networking cards when using IPv6.</li>\n    <li>On Linux on Itanium, <code>sendfile</code> may be unable to handle\n    files over 2GB in size.</li>\n    <li>With a network-mounted <directive\n    module=\"core\">DocumentRoot</directive> (e.g., NFS, SMB, CIFS, FUSE),\n    the kernel may be unable to serve the network file through\n    its own cache.</li>\n    </ul>\n\n    <p>For server configurations that are not vulnerable to these problems,\n    you may enable this feature by specifying:</p>\n\n    <highlight language=\"config\">\nEnableSendfile On\n    </highlight>\n\n    <p>For network mounted files, this feature may be disabled explicitly\n    for the offending files by specifying:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/path-to-nfs-files\"&gt;\n  EnableSendfile Off\n&lt;/Directory&gt;\n    </highlight>\n    <p>Please note that the per-directory and .htaccess configuration\n       of <directive>EnableSendfile</directive> is not supported by\n       <module>mod_cache_disk</module>.\n       Only global definition of <directive>EnableSendfile</directive>\n       is taken into account by the module.\n    </p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>HttpProtocolOptions</name>\n<description>Modify restrictions on HTTP Request Messages</description>\n<syntax>HttpProtocolOptions [Strict|Unsafe] [RegisteredMethods|LenientMethods]\n [Allow0.9|Require1.0]</syntax>\n<default>HttpProtocolOptions Strict LenientMethods Allow0.9</default>\n<contextlist><context>server config</context>\n<context>virtual host</context></contextlist>\n<compatibility>2.2.32 or 2.4.24 and later</compatibility>\n\n<usage>\n    <p>This directive changes the rules applied to the HTTP Request Line\n    (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.1.1\"\n      >RFC 7230 &sect;3.1.1</a>) and the HTTP Request Header Fields\n    (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\"\n      >RFC 7230 &sect;3.2</a>), which are now applied by default or using\n    the <code>Strict</code> option. Due to legacy modules, applications or\n    custom user-agents which must be deprecated the <code>Unsafe</code>\n    option has been added to revert to the legacy behaviors.</p>\n\n    <p>These rules are applied prior to request processing,\n    so must be configured at the global or default (first) matching\n    virtual host section, by IP/port interface (and not by name)\n    to be honored.</p>\n\n    <p>The directive accepts three parameters from the following list\n       of choices, applying the default to the ones not specified:</p>\n\n    <dl>\n    <dt>Strict|Unsafe</dt>\n    <dd>\n      <p>Prior to the introduction of this directive, the Apache HTTP Server\n      request message parsers were tolerant of a number of forms of input\n      which did not conform to the protocol.\n      <a href=\"https://tools.ietf.org/html/rfc7230#section-9.4\"\n        >RFC 7230 &sect;9.4 Request Splitting</a> and\n      <a href=\"https://tools.ietf.org/html/rfc7230#section-9.5\"\n        >&sect;9.5 Response Smuggling</a> call out only two of the potential\n      risks of accepting non-conformant request messages, while\n      <a href=\"https://tools.ietf.org/html/rfc7230#section-3.5\"\n           >RFC 7230 &sect;3.5</a> \"Message Parsing Robustness\" identify the\n      risks of accepting obscure whitespace and request message formatting. \n      As of the introduction of this directive, all grammar rules of the\n      specification are enforced in the default <code>Strict</code> operating\n      mode, and the strict whitespace suggested by section 3.5 is enforced\n      and cannot be relaxed.</p>\n\n      <note type=\"warning\"><title>Security risks of Unsafe</title>\n        <p>Users are strongly cautioned against toggling the <code>Unsafe</code>\n        mode of operation, particularly on outward-facing, publicly accessible\n        server deployments.  If an interface is required for faulty monitoring\n        or other custom service consumers running on an intranet, users should\n        toggle the Unsafe option only on a specific virtual host configured\n        to service their internal private network.</p>\n      </note>\n\n      <example>\n        <title>Example of a request leading to HTTP 400 with Strict mode</title>\n        # Missing CRLF<br />\n        GET / HTTP/1.0\\n\\n\n      </example>\n      <note type=\"warning\"><title>Command line tools and CRLF</title>\n        <p>Some tools need to be forced to use CRLF, otherwise httpd will return\n        a HTTP 400 response like described in the above use case. For example,\n        the <strong>OpenSSL s_client needs the -crlf parameter to work\n        properly</strong>.</p>\n        <p>The <directive module=\"mod_dumpio\">DumpIOInput</directive> directive\n        can help while reviewing the HTTP request to identify issues like the\n        absence of CRLF.</p>\n      </note>\n    </dd>\n    <dt>RegisteredMethods|LenientMethods</dt>\n    <dd>\n      <p><a href=\"https://tools.ietf.org/html/rfc7231#section-4.1\"\n           >RFC 7231 &sect;4.1</a> \"Request Methods\" \"Overview\" requires that\n      origin servers shall respond with a HTTP 501 status code when an\n      unsupported method is encountered in the request line.\n      This already happens when the <code>LenientMethods</code> option is used,\n      but administrators may wish to toggle the <code>RegisteredMethods</code>\n      option and register any non-standard methods using the\n      <directive module=\"core\">RegisterHttpMethod</directive>\n      directive, particularly if the <code>Unsafe</code>\n      option has been toggled.</p>\n\n      <note type=\"warning\"><title>Forward Proxy compatibility</title>\n        <p>The <code>RegisteredMethods</code> option should <strong>not</strong>\n        be toggled for forward proxy hosts, as the methods supported by the\n        origin servers are unknown to the proxy server.</p>\n      </note>\n\n      <example>\n        <title>Example of a request leading to HTTP 501 with LenientMethods mode</title>\n        # Unknown HTTP method<br />\n        WOW / HTTP/1.0\\r\\n\\r\\n<br /><br />\n        # Lowercase HTTP method<br />\n        get / HTTP/1.0\\r\\n\\r\\n<br />\n      </example>\n      </dd>\n      <dt>Allow0.9|Require1.0</dt>\n      <dd>\n      <p><a href=\"https://tools.ietf.org/html/rfc2616#section-19.6\"\n           >RFC 2616 &sect;19.6</a> \"Compatibility With Previous Versions\" had\n      encouraged HTTP servers to support legacy HTTP/0.9 requests. RFC 7230\n      supersedes this with \"The expectation to support HTTP/0.9 requests has\n      been removed\" and offers additional comments in \n      <a href=\"https://tools.ietf.org/html/rfc7230#appendix-A\"\n        >RFC 7230 Appendix A</a>. The <code>Require1.0</code> option allows\n      the user to remove support of the default <code>Allow0.9</code> option's\n      behavior.</p>\n\n      <example>\n        <title>Example of a request leading to HTTP 400 with Require1.0 mode</title>\n        # Unsupported HTTP version<br />\n        GET /\\r\\n\\r\\n\n      </example>\n    </dd>\n    </dl>\n    <p>Reviewing the messages logged to the\n    <directive module=\"core\">ErrorLog</directive>, configured with\n    <directive module=\"core\">LogLevel</directive> <code>debug</code> level,\n    can help identify such faulty requests along with their origin.\n    Users should pay particular attention to the 400 responses in the access\n    log for invalid requests which were unexpectedly rejected.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Error</name>\n<description>Abort configuration parsing with a custom error message</description>\n<syntax>Error <var>message</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<compatibility>2.3.9 and later</compatibility>\n\n<usage>\n    <p>If an error can be detected within the configuration, this\n    directive can be used to generate a custom error message, and halt\n    configuration parsing.  The typical use is for reporting required\n    modules which are missing from the configuration.</p>\n\n    <highlight language=\"config\">\n# Example\n# ensure that mod_include is loaded\n&lt;IfModule !include_module&gt;\n  Error \"mod_include is required by mod_foo.  Load it with LoadModule.\"\n&lt;/IfModule&gt;\n\n# ensure that exactly one of SSL,NOSSL is defined\n&lt;IfDefine SSL&gt;\n&lt;IfDefine NOSSL&gt;\n  Error \"Both SSL and NOSSL are defined.  Define only one of them.\"\n&lt;/IfDefine&gt;\n&lt;/IfDefine&gt;\n&lt;IfDefine !SSL&gt;\n&lt;IfDefine !NOSSL&gt;\n  Error \"Either SSL or NOSSL must be defined.\"\n&lt;/IfDefine&gt;\n&lt;/IfDefine&gt;\n    </highlight>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ErrorDocument</name>\n<description>What the server will return to the client\nin case of an error</description>\n<syntax>ErrorDocument <var>error-code</var> <var>document</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>In the event of a problem or error, Apache httpd can be configured\n    to do one of four things,</p>\n\n    <ol>\n      <li>output a simple hardcoded error message</li>\n\n      <li>output a customized message</li>\n\n      <li>internally redirect to a local <var>URL-path</var> to handle the\n      problem/error</li>\n\n      <li>redirect to an external <var>URL</var> to handle the\n      problem/error</li>\n    </ol>\n\n    <p>The first option is the default, while options 2-4 are\n    configured using the <directive>ErrorDocument</directive>\n    directive, which is followed by the HTTP response code and a URL\n    or a message. Apache httpd will sometimes offer additional information\n    regarding the problem/error.</p>\n\n    <p>From 2.4.13, <a href=\"../expr.html\">expression syntax</a> can be\n    used inside the directive to produce dynamic strings and URLs.</p>\n\n    <p>URLs can begin with a slash (/) for local web-paths (relative\n    to the <directive module=\"core\">DocumentRoot</directive>), or be a\n    full URL which the client can resolve. Alternatively, a message\n    can be provided to be displayed by the browser. Note that deciding\n    whether the parameter is an URL, a path or a message is performed\n    before any expression is parsed. Examples:</p>\n\n    <highlight language=\"config\">\nErrorDocument 500 http://example.com/cgi-bin/server-error.cgi\nErrorDocument 404 /errors/bad_urls.php\nErrorDocument 401 /subscription_info.html\nErrorDocument 403 \"Sorry, can't allow you access today\"\nErrorDocument 403 Forbidden!\nErrorDocument 403 /errors/forbidden.py?referrer=%{escape:%{HTTP_REFERER}}\n    </highlight>\n\n    <p>Additionally, the special value <code>default</code> can be used\n    to specify Apache httpd's simple hardcoded message.  While not required\n    under normal circumstances, <code>default</code> will restore\n    Apache httpd's simple hardcoded message for configurations that would\n    otherwise inherit an existing <directive>ErrorDocument</directive>.</p>\n\n    <highlight language=\"config\">\nErrorDocument 404 /cgi-bin/bad_urls.pl\n\n&lt;Directory \"/web/docs\"&gt;\n  ErrorDocument 404 default\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>Note that when you specify an <directive>ErrorDocument</directive>\n    that points to a remote URL (ie. anything with a method such as\n    <code>http</code> in front of it), Apache HTTP Server will send a redirect to the\n    client to tell it where to find the document, even if the\n    document ends up being on the same server. This has several\n    implications, the most important being that the client will not\n    receive the original error status code, but instead will\n    receive a redirect status code. This in turn can confuse web\n    robots and other clients which try to determine if a URL is\n    valid using the status code. In addition, if you use a remote\n    URL in an <code>ErrorDocument 401</code>, the client will not\n    know to prompt the user for a password since it will not\n    receive the 401 status code. Therefore, <strong>if you use an\n    <code>ErrorDocument 401</code> directive, then it must refer to a local\n    document.</strong></p>\n\n    <p>Microsoft Internet Explorer (MSIE) will by default ignore\n    server-generated error messages when they are \"too small\" and substitute\n    its own \"friendly\" error messages. The size threshold varies depending on\n    the type of error, but in general, if you make your error document\n    greater than 512 bytes, then MSIE will show the server-generated\n    error rather than masking it.  More information is available in\n    Microsoft Knowledge Base article <a\n    href=\"http://support.microsoft.com/default.aspx?scid=kb;en-us;Q294807\"\n    >Q294807</a>.</p>\n\n    <p>Although most error messages can be overridden, there are certain\n    circumstances where the internal messages are used regardless of the\n    setting of <directive module=\"core\">ErrorDocument</directive>.  In\n    particular, if a malformed request is detected, normal request processing\n    will be immediately halted and the internal error message returned.\n    This is necessary to guard against security problems caused by\n    bad requests.</p>\n\n    <p>If you are using mod_proxy, you may wish to enable\n    <directive module=\"mod_proxy\">ProxyErrorOverride</directive> so that you can provide\n    custom error messages on behalf of your Origin servers. If you don't enable ProxyErrorOverride,\n    Apache httpd will not generate custom error documents for proxied content.</p>\n</usage>\n\n<seealso><a href=\"../custom-error.html\">documentation of\n    customizable responses</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ErrorLog</name>\n<description>Location where the server will log errors</description>\n<syntax> ErrorLog <var>file-path</var>|syslog[:[<var>facility</var>][:<var>tag</var>]]</syntax>\n<default>ErrorLog logs/error_log (Unix) ErrorLog logs/error.log (Windows and OS/2)</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive>ErrorLog</directive> directive sets the name of\n    the file to which the server will log any errors it encounters. If\n    the <var>file-path</var> is not absolute then it is assumed to be\n    relative to the <directive module=\"core\">ServerRoot</directive>.</p>\n\n    <highlight language=\"config\">\nErrorLog \"/var/log/httpd/error_log\"\n    </highlight>\n\n    <p>If the <var>file-path</var>\n    begins with a pipe character \"<code>|</code>\" then it is assumed to be a\n    command to spawn to handle the error log.</p>\n\n    <highlight language=\"config\">\nErrorLog \"|/usr/local/bin/httpd_errors\"\n    </highlight>\n\n    <p>See the notes on <a href=\"../logs.html#piped\">piped logs</a> for\n    more information.</p>\n\n    <p>Using <code>syslog</code> instead of a filename enables logging\n    via syslogd(8) if the system supports it. The default is to use\n    syslog facility <code>local7</code>, but you can override this by\n    using the <code>syslog:<var>facility</var></code> syntax where\n    <var>facility</var> can be one of the names usually documented in\n    syslog(1).  The facility is effectively global, and if it is changed\n    in individual virtual hosts, the final facility specified affects the\n    entire server. Same rules apply for the syslog tag, which by default\n    uses the Apache binary name, <code>httpd</code> in most cases. You can\n    also override this by using the <code>syslog::<var>tag</var></code>\n    syntax.</p>\n\n    <highlight language=\"config\">\nErrorLog syslog:user\nErrorLog syslog:user:httpd.srv1\nErrorLog syslog::httpd.srv2\n    </highlight>\n\n    <p>SECURITY: See the <a\n    href=\"../misc/security_tips.html#serverroot\">security tips</a>\n    document for details on why your security could be compromised\n    if the directory where log files are stored is writable by\n    anyone other than the user that starts the server.</p>\n    <note type=\"warning\"><title>Note</title>\n      <p>When entering a file path on non-Unix platforms, care should be taken\n      to make sure that only forward slashes are used even though the platform\n      may allow the use of back slashes. In general it is a good idea to always\n      use forward slashes throughout the configuration files.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">LogLevel</directive></seealso>\n<seealso><a href=\"../logs.html\">Apache HTTP Server Log Files</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ErrorLogFormat</name>\n<description>Format specification for error log entries</description>\n<syntax> ErrorLogFormat [connection|request] <var>format</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p><directive>ErrorLogFormat</directive> allows to specify what\n    supplementary information is logged in the error log in addition to the\n    actual log message.</p>\n\n    <highlight language=\"config\">\n#Simple example\nErrorLogFormat \"[%t] [%l] [pid %P] %F: %E: [client %a] %M\"\n    </highlight>\n\n    <p>Specifying <code>connection</code> or <code>request</code> as first\n    parameter allows to specify additional formats, causing additional\n    information to be logged when the first message is logged for a specific\n    connection or request, respectively. This additional information is only\n    logged once per connection/request. If a connection or request is processed\n    without causing any log message, the additional information is not logged\n    either.</p>\n\n    <p>It can happen that some format string items do not produce output.  For\n    example, the Referer header is only present if the log message is\n    associated to a request and the log message happens at a time when the\n    Referer header has already been read from the client.  If no output is\n    produced, the default behavior is to delete everything from the preceding\n    space character to the next space character.  This means the log line is\n    implicitly divided into fields on non-whitespace to whitespace transitions.\n    If a format string item does not produce output, the whole field is\n    omitted.  For example, if the remote address <code>%a</code> in the log\n    format <code>[%t] [%l] [%a] %M&nbsp;</code> is not available, the surrounding\n    brackets are not logged either.  Space characters can be escaped with a\n    backslash to prevent them from delimiting a field.  The combination '%&nbsp;'\n    (percent space) is a zero-width field delimiter that does not produce any\n    output.</p>\n\n    <p>The above behavior can be changed by adding modifiers to the format\n    string item. A <code>-</code> (minus) modifier causes a minus to be logged if the\n    respective item does not produce any output. In once-per-connection/request\n    formats, it is also possible to use the <code>+</code> (plus) modifier. If an\n    item with the plus modifier does not produce any output, the whole line is\n    omitted.</p>\n\n    <p>A number as modifier can be used to assign a log severity level to a\n    format item. The item will only be logged if the severity of the log\n    message is not higher than the specified log severity level. The number can\n    range from 1 (alert) over 4 (warn) and 7 (debug) to 15 (trace8).</p>\n\n    <p>For example, here's what would happen if you added modifiers to\n    the <code>%{Referer}i</code> token, which logs the\n    <code>Referer</code> request header.</p>\n\n    <table border=\"1\" style=\"zebra\">\n    <columnspec><column width=\".3\"/><column width=\".7\"/></columnspec>\n\n    <tr><th>Modified Token</th><th>Meaning</th></tr>\n\n    <tr>\n    <td><code>%-{Referer}i</code></td>\n    <td>Logs a <code>-</code> if <code>Referer</code> is not set.</td>\n    </tr>\n\n    <tr>\n    <td><code>%+{Referer}i</code></td>\n    <td>Omits the entire line if <code>Referer</code> is not set.</td>\n    </tr>\n\n    <tr>\n    <td><code>%4{Referer}i</code></td>\n    <td>Logs the <code>Referer</code> only if the log message severity\n    is higher than 4.</td>\n    </tr>\n\n    </table>\n\n    <p>Some format string items accept additional parameters in braces.</p>\n\n    <table border=\"1\" style=\"zebra\">\n    <columnspec><column width=\".2\"/><column width=\".8\"/></columnspec>\n\n    <tr><th>Format&nbsp;String</th> <th>Description</th></tr>\n\n    <tr><td><code>%%</code></td>\n        <td>The percent sign</td></tr>\n\n    <tr><td><code>%a</code></td>\n        <td>Client IP address and port of the request</td></tr>\n\n    <tr><td><code>%{c}a</code></td>\n        <td>Underlying peer IP address and port of the connection (see the\n            <module>mod_remoteip</module> module)</td></tr>\n\n    <tr><td><code>%A</code></td>\n        <td>Local IP-address and port</td></tr>\n\n    <tr><td><code>%{<em>name</em>}e</code></td>\n        <td>Request environment variable <em>name</em></td></tr>\n\n    <tr><td><code>%E</code></td>\n        <td>APR/OS error status code and string</td></tr>\n\n    <tr><td><code>%F</code></td>\n        <td>Source file name and line number of the log call</td></tr>\n\n    <tr><td><code>%{<em>name</em>}i</code></td>\n        <td>Request header <em>name</em></td></tr>\n\n    <tr><td><code>%k</code></td>\n        <td>Number of keep-alive requests on this connection</td></tr>\n\n    <tr><td><code>%l</code></td>\n        <td>Loglevel of the message</td></tr>\n\n    <tr><td><code>%L</code></td>\n        <td>Log ID of the request</td></tr>\n\n    <tr><td><code>%{c}L</code></td>\n        <td>Log ID of the connection</td></tr>\n\n    <tr><td><code>%{C}L</code></td>\n        <td>Log ID of the connection if used in connection scope, empty otherwise</td></tr>\n\n    <tr><td><code>%m</code></td>\n        <td>Name of the module logging the message</td></tr>\n\n    <tr><td><code>%M</code></td>\n        <td>The actual log message</td></tr>\n\n    <tr><td><code>%{<em>name</em>}n</code></td>\n        <td>Request note <em>name</em></td></tr>\n\n    <tr><td><code>%P</code></td>\n        <td>Process ID of current process</td></tr>\n\n    <tr><td><code>%T</code></td>\n        <td>Thread ID of current thread</td></tr>\n\n    <tr><td><code>%{g}T</code></td>\n        <td>System unique thread ID of current thread (the same ID as\n            displayed by e.g. <code>top</code>; currently Linux only)</td></tr>\n\n    <tr><td><code>%t</code></td>\n        <td>The current time</td></tr>\n\n    <tr><td><code>%{u}t</code></td>\n        <td>The current time including micro-seconds</td></tr>\n\n    <tr><td><code>%{cu}t</code></td>\n        <td>The current time in compact ISO 8601 format, including\n            micro-seconds</td></tr>\n\n    <tr><td><code>%v</code></td>\n        <td>The canonical <directive module=\"core\">ServerName</directive>\n            of the current server.</td></tr>\n\n    <tr><td><code>%V</code></td>\n        <td>The server name of the server serving the request according to the\n            <directive module=\"core\" >UseCanonicalName</directive>\n            setting.</td></tr>\n\n    <tr><td><code>\\&nbsp;</code> (backslash space)</td>\n        <td>Non-field delimiting space</td></tr>\n\n    <tr><td><code>%&nbsp;</code> (percent space)</td>\n        <td>Field delimiter (no output)</td></tr>\n    </table>\n\n    <p>The log ID format <code>%L</code> produces a unique id for a connection\n    or request. This can be used to correlate which log lines belong to the\n    same connection or request, which request happens on which connection.\n    A <code>%L</code> format string is also available in\n    <module>mod_log_config</module> to allow to correlate access log entries\n    with error log lines. If <module>mod_unique_id</module> is loaded, its\n    unique id will be used as log ID for requests.</p>\n\n    <highlight language=\"config\">\n#Example (default format for threaded MPMs)\nErrorLogFormat \"[%{u}t] [%-m:%l] [pid %P:tid %T] %7F: %E: [client\\ %a] %M%&nbsp;,\\&nbsp;referer\\&nbsp;%{Referer}i\"\n    </highlight>\n\n    <p>This would result in error messages such as:</p>\n\n    <example>\n    [Thu May 12 08:28:57.652118 2011] [core:error] [pid 8777:tid 4326490112] [client ::1:58619] File does not exist: /usr/local/apache2/htdocs/favicon.ico\n    </example>\n\n    <p>Notice that, as discussed above, some fields are omitted\n    entirely because they are not defined.</p>\n\n    <highlight language=\"config\">\n#Example (similar to the 2.2.x format)\nErrorLogFormat \"[%t] [%l] %7F: %E: [client\\ %a] %M%&nbsp;,\\&nbsp;referer\\&nbsp;%{Referer}i\"\n    </highlight>\n\n    <highlight language=\"config\">\n#Advanced example with request/connection log IDs\nErrorLogFormat \"[%{uc}t] [%-m:%-l] [R:%L] [C:%{C}L] %7F: %E: %M\"\nErrorLogFormat request \"[%{uc}t] [R:%L] Request %k on C:%{c}L pid:%P tid:%T\"\nErrorLogFormat request \"[%{uc}t] [R:%L] UA:'%+{User-Agent}i'\"\nErrorLogFormat request \"[%{uc}t] [R:%L] Referer:'%+{Referer}i'\"\nErrorLogFormat connection \"[%{uc}t] [C:%{c}L] local\\ %a remote\\ %A\"\n    </highlight>\n\n</usage>\n<seealso><directive module=\"core\">ErrorLog</directive></seealso>\n<seealso><directive module=\"core\">LogLevel</directive></seealso>\n<seealso><a href=\"../logs.html\">Apache HTTP Server Log Files</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ExtendedStatus</name>\n<description>Keep track of extended status information for each\nrequest</description>\n<syntax>ExtendedStatus On|Off</syntax>\n<default>ExtendedStatus Off[*]</default>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p>This option tracks additional data per worker about the\n    currently executing request and creates a utilization summary.\n    You can see these variables during runtime by configuring\n    <module>mod_status</module>.  Note that other modules may\n    rely on this scoreboard.</p>\n\n    <p>This setting applies to the entire server and cannot be\n    enabled or disabled on a virtualhost-by-virtualhost basis.\n    The collection of extended status information can slow down\n    the server.  Also note that this setting cannot be changed\n    during a graceful restart.</p>\n\n    <note>\n    <p>Note that loading <module>mod_status</module> will change\n    the default behavior to ExtendedStatus On, while other\n    third party modules may do the same.  Such modules rely on\n    collecting detailed information about the state of all workers.\n    The default is changed by <module>mod_status</module> beginning\n    with version 2.3.6. The previous default was always Off.</p>\n    </note>\n\n</usage>\n\n</directivesynopsis>\n\n<directivesynopsis>\n<name>FileETag</name>\n<description>File attributes used to create the ETag\nHTTP response header for static files</description>\n<syntax>FileETag <var>component</var> ...</syntax>\n<default>FileETag MTime Size</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>The default used to be \"INode&nbsp;MTime&nbsp;Size\" in 2.3.14 and\nearlier.</compatibility>\n\n<usage>\n    <p>\n    The <directive>FileETag</directive> directive configures the file\n    attributes that are used to create the <code>ETag</code> (entity\n    tag) response header field when the document is based on a static file.\n    (The <code>ETag</code> value is used in cache management to save\n    network bandwidth.) The\n    <directive>FileETag</directive> directive allows you to choose\n    which of these -- if any -- should be used. The recognized keywords are:\n    </p>\n\n    <dl>\n     <dt><strong>INode</strong></dt>\n     <dd>The file's i-node number will be included in the calculation</dd>\n     <dt><strong>MTime</strong></dt>\n     <dd>The date and time the file was last modified will be included</dd>\n     <dt><strong>Size</strong></dt>\n     <dd>The number of bytes in the file will be included</dd>\n     <dt><strong>All</strong></dt>\n     <dd>All available fields will be used. This is equivalent to:\n         <highlight language=\"config\">\nFileETag INode MTime Size\n         </highlight></dd>\n     <dt><strong>Digest</strong></dt>\n     <dd>If a document is file-based, the <code>ETag</code> field will be\n       calculated by taking the digest over the file.</dd>\n     <dt><strong>None</strong></dt>\n     <dd>If a document is file-based, no <code>ETag</code> field will be\n       included in the response</dd>\n    </dl>\n\n    <p>The <code>INode</code>, <code>MTime</code>, <code>Size</code> and\n    <code>Digest</code> keywords may be prefixed with either <code>+</code>\n    or <code>-</code>, which allow changes to be made to the default setting\n    inherited from a broader scope. Any keyword appearing without such a prefix\n    immediately and completely cancels the inherited setting.</p>\n\n    <p>If a directory's configuration includes\n    <code>FileETag&nbsp;INode&nbsp;MTime&nbsp;Size</code>, and a\n    subdirectory's includes <code>FileETag&nbsp;-INode</code>,\n    the setting for that subdirectory (which will be inherited by\n    any sub-subdirectories that don't override it) will be equivalent to\n    <code>FileETag&nbsp;MTime&nbsp;Size</code>.</p>\n    <note><title>Server Side Includes</title>\n    An ETag is not generated for responses parsed by <module>mod_include</module>\n    since the response entity can change without a change of the INode, MTime,\n    Size or Digest of the static file with embedded SSI directives.\n    </note>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>Files</name>\n<description>Contains directives that apply to matched\nfilenames</description>\n<syntax>&lt;Files <var>filename</var>&gt; ... &lt;/Files&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n\n<usage>\n    <p>The <directive type=\"section\">Files</directive> directive\n    limits the scope of the enclosed directives by filename. It is comparable\n    to the <directive module=\"core\" type=\"section\">Directory</directive>\n    and <directive module=\"core\" type=\"section\">Location</directive>\n    directives. It should be matched with a <code>&lt;/Files&gt;</code>\n    directive. The directives given within this section will be applied to\n    any object with a basename (last component of filename) matching the\n    specified filename. <directive type=\"section\">Files</directive>\n    sections are processed in the order they appear in the\n    configuration file, after the <directive module=\"core\"\n    type=\"section\">Directory</directive> sections and\n    <code>.htaccess</code> files are read, but before <directive\n    type=\"section\" module=\"core\">Location</directive> sections. Note\n    that <directive type=\"section\">Files</directive> can be nested\n    inside <directive type=\"section\"\n    module=\"core\">Directory</directive> sections to restrict the\n    portion of the filesystem they apply to.</p>\n\n    <p>The <var>filename</var> argument should include a filename, or\n    a wild-card string, where <code>?</code> matches any single character,\n    and <code>*</code> matches any sequences of characters.</p>\n    <highlight language=\"config\">\n&lt;Files \"cat.html\"&gt;\n    # Insert stuff that applies to cat.html here\n&lt;/Files&gt;\n\n&lt;Files \"?at.*\"&gt;\n    # This would apply to cat.html, bat.html, hat.php and so on.\n&lt;/Files&gt;\n    </highlight>\n    <p><glossary ref=\"regex\">Regular expressions</glossary>\n    can also be used, with the addition of the\n    <code>~</code> character. For example:</p>\n\n    <highlight language=\"config\">\n&lt;Files ~ \"\\.(gif|jpe?g|png)$\"&gt;\n    #...\n&lt;/Files&gt;\n    </highlight>\n\n    <p>would match most common Internet graphics formats. <directive\n    module=\"core\" type=\"section\">FilesMatch</directive> is preferred,\n    however.</p>\n\n    <p>Note that unlike <directive type=\"section\"\n    module=\"core\">Directory</directive> and <directive type=\"section\"\n    module=\"core\">Location</directive> sections, <directive\n    type=\"section\">Files</directive> sections can be used inside\n    <code>.htaccess</code> files. This allows users to control access to\n    their own files, at a file-by-file level.</p>\n\n</usage>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;\n    and &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>FilesMatch</name>\n<description>Contains directives that apply to regular-expression matched\nfilenames</description>\n<syntax>&lt;FilesMatch <var>regex</var>&gt; ... &lt;/FilesMatch&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n\n<usage>\n    <p>The <directive type=\"section\">FilesMatch</directive> directive\n    limits the scope of the enclosed directives by filename, just as the\n    <directive module=\"core\" type=\"section\">Files</directive> directive\n    does. However, it accepts a <glossary ref=\"regex\">regular\n    expression</glossary>. For example:</p>\n\n    <highlight language=\"config\">\n&lt;FilesMatch \".+\\.(gif|jpe?g|png)$\"&gt;\n    # ...\n&lt;/FilesMatch&gt;\n    </highlight>\n\n    <p>would match most common Internet graphics formats.</p>\n\n    <note>The <code>.+</code> at the start of the regex ensures that\n    files named <code>.png</code>, or <code>.gif</code>, for example,\n    are not matched.</note>\n\n    <p>From 2.4.8 onwards, named groups and backreferences are captured and\n    written to the environment with the corresponding name prefixed with\n    \"MATCH_\" and in upper case. This allows elements of files to be referenced\n    from within <a href=\"../expr.html\">expressions</a> and modules like\n    <module>mod_rewrite</module>. In order to prevent confusion, numbered\n    (unnamed) backreferences are ignored. Use named groups instead.</p>\n\n    <highlight language=\"config\">\n&lt;FilesMatch \"^(?&lt;sitename&gt;[^/]+)\"&gt;\n    Require ldap-group cn=%{env:MATCH_SITENAME},ou=combined,o=Example\n&lt;/FilesMatch&gt;\n    </highlight>\n</usage>\n\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;\n    and &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>FlushMaxPipelined</name>\n<description>Maximum number of pipelined responses above which they are flushed\nto the network</description>\n<syntax>FlushMaxPipelined <var>number</var></syntax>\n<default>FlushMaxPipelined 5</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n<compatibility>2.4.47 and later</compatibility>\n\n<usage>\n    <p>This directive allows to configure the maximum number of pipelined\n    responses, which remain pending so long as pipelined request are received.\n    When the limit is reached, reponses are forcibly flushed to the network in\n    blocking mode, until passing under the limit again.</p>\n\n    <p><directive>FlushMaxPipelined</directive> helps constraining memory\n    usage. When set to <var>0</var> pipelining is disabled, when set to\n    <var>-1</var> there is no limit (<directive>FlushMaxThreshold</directive>\n    still applies).</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>FlushMaxThreshold</name>\n<description>Threshold above which pending data are flushed to the\nnetwork</description>\n<syntax>FlushMaxThreshold<var>number-of-bytes</var></syntax>\n<default>FlushMaxThreshold 65536</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n<compatibility>2.4.47 and later</compatibility>\n\n<usage>\n    <p>This directive allows to configure the threshold for pending output\n    data (in bytes). When the limit is reached, data are forcibly flushed to\n    the network in blocking mode, until passing under the limit again.</p>\n\n    <p><directive>FlushMaxThreshold</directive> helps constraining memory\n    usage. When set to <var>0</var> or a too small value there are actually\n    no pending data, but for threaded MPMs there can be more threads busy\n    waiting for the network thus less ones available to handle the other\n    simultaneous connections.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ForceType</name>\n<description>Forces all matching files to be served with the specified\nmedia type in the HTTP Content-Type header field</description>\n<syntax>ForceType <var>media-type</var>|None</syntax>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>When placed into an <code>.htaccess</code> file or a\n    <directive type=\"section\" module=\"core\">Directory</directive>, or\n    <directive type=\"section\" module=\"core\">Location</directive> or\n    <directive type=\"section\" module=\"core\">Files</directive>\n    section, this directive forces all matching files to be served\n    with the content type identification given by\n    <var>media-type</var>. For example, if you had a directory full of\n    GIF files, but did not want to label them all with <code>.gif</code>,\n    you might want to use:</p>\n\n    <highlight language=\"config\">\nForceType image/gif\n    </highlight>\n\n    <p>Note that this directive overrides other indirect media type\n    associations defined in mime.types or via the\n    <directive module=\"mod_mime\">AddType</directive>.</p>\n\n    <p>You can also override more general\n    <directive>ForceType</directive> settings\n    by using the value of <code>None</code>:</p>\n\n    <highlight language=\"config\">\n# force all files to be image/gif:\n&lt;Location \"/images\"&gt;\n  ForceType image/gif\n&lt;/Location&gt;\n\n# but normal mime-type associations here:\n&lt;Location \"/images/mixed\"&gt;\n  ForceType None\n&lt;/Location&gt;\n    </highlight>\n\n    <p>This directive primarily overrides the content types generated for\n    static files served out of the filesystem.  For resources other than\n    static files, where the generator of the response typically specifies\n    a Content-Type, this directive has no effect.</p>\n\n    <note><title>Note</title>\n    <p>When explicit directives such as\n    <directive module=\"core\" >SetHandler</directive> or\n    <directive module=\"mod_mime\">AddHandler</directive> do not apply\n    to the current request, the internal handler name normally set by those\n    directives is set to match the content type specified by this directive.\n    This is a historical behavior that some third-party modules\n    (such as mod_php) may use \"magic\" content types used only to signal the\n    module to take responsibility for the matching request.  Configurations\n    that rely on such \"magic\" types should be avoided by the use of\n    <directive module=\"core\" >SetHandler</directive> or\n    <directive module=\"mod_mime\">AddHandler</directive>. </p>\n    </note>\n\n</usage>\n</directivesynopsis>\n<directivesynopsis>\n<name>GprofDir</name>\n<description>Directory to write gmon.out profiling data to.  </description>\n<syntax>GprofDir <var>/tmp/gprof/</var>|<var>/tmp/gprof/</var>%</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>When the server has been compiled with gprof profiling support,\n    <directive>GprofDir</directive> causes <code>gmon.out</code> files to\n    be written to the specified directory when the process exits.  If the\n    argument ends with a percent symbol ('%'), subdirectories are created\n    for each process id.</p>\n\n    <p>This directive currently only works with the <module>prefork</module>\n    MPM.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>HostnameLookups</name>\n<description>Enables DNS lookups on client IP addresses</description>\n<syntax>HostnameLookups On|Off|Double</syntax>\n<default>HostnameLookups Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context></contextlist>\n\n<usage>\n    <p>This directive enables DNS lookups so that host names can be\n    logged (and passed to CGIs/SSIs in <code>REMOTE_HOST</code>).\n    The value <code>Double</code> refers to doing double-reverse\n    DNS lookup. That is, after a reverse lookup is performed, a forward\n    lookup is then performed on that result. At least one of the IP\n    addresses in the forward lookup must match the original\n    address. (In \"tcpwrappers\" terminology this is called\n    <code>PARANOID</code>.)</p>\n\n    <p>Regardless of the setting, when <module>mod_authz_host</module> is\n    used for controlling access by hostname, a double reverse lookup\n    will be performed.  This is necessary for security. Note that the\n    result of this double-reverse isn't generally available unless you\n    set <code>HostnameLookups Double</code>. For example, if only\n    <code>HostnameLookups On</code> and a request is made to an object\n    that is protected by hostname restrictions, regardless of whether\n    the double-reverse fails or not, CGIs will still be passed the\n    single-reverse result in <code>REMOTE_HOST</code>.</p>\n\n    <p>The default is <code>Off</code> in order to save the network\n    traffic for those sites that don't truly need the reverse\n    lookups done. It is also better for the end users because they\n    don't have to suffer the extra latency that a lookup entails.\n    Heavily loaded sites should leave this directive\n    <code>Off</code>, since DNS lookups can take considerable\n    amounts of time. The utility <program>logresolve</program>, compiled by\n    default to the <code>bin</code> subdirectory of your installation\n    directory, can be used to look up host names from logged IP addresses\n    offline.</p>\n\n    <p>Finally, if you have <a\n    href=\"mod_authz_host.html#reqhost\">hostname-based Require\n    directives</a>, a hostname lookup will be performed regardless of\n    the setting of <directive>HostnameLookups</directive>.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>If</name>\n<description>Contains directives that apply only if a condition is\nsatisfied by a request at runtime</description>\n<syntax>&lt;If <var>expression</var>&gt; ... &lt;/If&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Nested conditions are evaluated in 2.4.26 and later</compatibility>\n\n<usage>\n    <p>The <directive type=\"section\">If</directive> directive\n    evaluates an expression at runtime, and applies the enclosed\n    directives if and only if the expression evaluates to true.\n    For example:</p>\n\n    <highlight language=\"config\">\n&lt;If \"-z req('Host')\"&gt;\n    </highlight>\n\n    <p>would match HTTP/1.0 requests without a <var>Host:</var> header.\n    Expressions may contain various shell-like operators for string\n    comparison (<code>==</code>, <code>!=</code>, <code>&lt;</code>, ...),\n    integer comparison (<code>-eq</code>, <code>-ne</code>, ...),\n    and others (<code>-n</code>, <code>-z</code>, <code>-f</code>, ...).\n    It is also possible to use regular expressions, </p>\n\n    <highlight language=\"config\">\n&lt;If \"%{QUERY_STRING} =~ /(delete|commit)=.*?elem/\"&gt;\n    </highlight>\n\n    <p>shell-like pattern matches and many other operations. These operations\n    can be done on request headers (<code>req</code>), environment variables\n    (<code>env</code>), and a large number of other properties. The full\n    documentation is available in <a href=\"../expr.html\">Expressions in\n    Apache HTTP Server</a>.</p>\n\n    <p>Only directives that support the <a href=\"directive-dict.html#Context\"\n    >directory context</a> can be used within this configuration section.</p>\n\n    <note type=\"warning\">\n    Certain variables, such as <code>CONTENT_TYPE</code> and other\n    response headers, are set after &lt;If&gt; conditions have already\n    been evaluated, and so will not be available to use in this\n    directive.\n    </note>\n\n</usage>\n\n<seealso><a href=\"../expr.html\">Expressions in Apache HTTP Server</a>,\nfor a complete reference and more examples.</seealso>\n<seealso><directive type=\"section\" module=\"core\">ElseIf</directive></seealso>\n<seealso><directive type=\"section\" module=\"core\">Else</directive></seealso>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;,\n    &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received.\n    <directive type=\"section\">If</directive>,\n    <directive type=\"section\">ElseIf</directive>, and\n    <directive type=\"section\">Else</directive> are applied last.</seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>IfDefine</name>\n<description>Encloses directives that will be processed only\nif a test is true at startup</description>\n<syntax>&lt;IfDefine [!]<var>parameter-name</var>&gt; ...\n    &lt;/IfDefine&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n\n<usage>\n    <p>The <code>&lt;IfDefine <var>test</var>&gt;...&lt;/IfDefine&gt;\n    </code> section is used to mark directives that are conditional. The\n    directives within an <directive type=\"section\">IfDefine</directive>\n    section are only processed if the <var>test</var> is true. If <var>\n    test</var> is false, everything between the start and end markers is\n    ignored.</p>\n\n    <p>The <var>test</var> in the <directive type=\"section\"\n    >IfDefine</directive> section directive can be one of two forms:</p>\n\n    <ul>\n      <li><var>parameter-name</var></li>\n\n      <li><code>!</code><var>parameter-name</var></li>\n    </ul>\n\n    <p>In the former case, the directives between the start and end\n    markers are only processed if the parameter named\n    <var>parameter-name</var> is defined. The second format reverses\n    the test, and only processes the directives if\n    <var>parameter-name</var> is <strong>not</strong> defined.</p>\n\n    <p>The <var>parameter-name</var> argument is a define as given on the\n    <program>httpd</program> command line via <code>-D<var>parameter</var>\n    </code> at the time the server was started or by the <directive\n    module=\"core\">Define</directive> directive.</p>\n\n    <p><directive type=\"section\">IfDefine</directive> sections are\n    nest-able, which can be used to implement simple\n    multiple-parameter tests. Example:</p>\n\n    <example>httpd -DReverseProxy -DUseCache -DMemCache ...</example>\n    <highlight language=\"config\">\n&lt;IfDefine ReverseProxy&gt;\n  LoadModule proxy_module   modules/mod_proxy.so\n  LoadModule proxy_http_module   modules/mod_proxy_http.so\n  &lt;IfDefine UseCache&gt;\n    LoadModule cache_module   modules/mod_cache.so\n    &lt;IfDefine MemCache&gt;\n      LoadModule mem_cache_module   modules/mod_mem_cache.so\n    &lt;/IfDefine&gt;\n    &lt;IfDefine !MemCache&gt;\n      LoadModule cache_disk_module   modules/mod_cache_disk.so\n    &lt;/IfDefine&gt;\n  &lt;/IfDefine&gt;\n&lt;/IfDefine&gt;\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>IfFile</name>\n<description>Encloses directives that will be processed only\nif file exists at startup</description>\n<syntax>&lt;IfFile [!]<var>filename</var>&gt; ...\n    &lt;/IfFile&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Available in 2.4.34 and later.</compatibility>\n\n<usage>\n    <p>The <code>&lt;IfFile <var>filename</var>&gt;...&lt;/IfFile&gt;\n    </code> section is used to mark directives that are conditional on\n    the existence of a file on disk. The directives within an\n    <directive type=\"section\">IfFile</directive> section are only\n    processed if <var>filename</var> exists. If <var>filename</var>\n    doesn't exist, everything between the start and end markers is\n    ignored. <var>filename</var> can be an absolute path or a path\n    relative to the server root.</p>\n\n    <p>The <var>filename</var> in the <directive type=\"section\"\n    >IfFile</directive> section directive can take the same forms as the\n    <var>test</var> variable in the <directive type=\"section\" module=\"core\"\n    >IfDefine</directive> section, i.e. the test can be negated if the <code>\n    !</code> character is placed directly before <var>filename</var>.\n    </p>\n   \n    <p>If a relative <var>filename</var> is supplied, the check is\n    <directive module=\"core\">ServerRoot</directive> relative. In the case where\n    this directive occurs before the <directive module=\"core\">ServerRoot</directive>,\n    the path will be checked relative to the compiled-in server root or\n    the server root passed in on the command line via the <code>-d</code>\n    parameter.</p>\n    \n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>IfModule</name>\n<description>Encloses directives that are processed conditional on the\npresence or absence of a specific module</description>\n<syntax>&lt;IfModule [!]<var>module-file</var>|<var>module-identifier</var>&gt; ...\n    &lt;/IfModule&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Module identifiers are available in version 2.1 and\nlater.</compatibility>\n\n<usage>\n    <p>The <code>&lt;IfModule <var>test</var>&gt;...&lt;/IfModule&gt;</code>\n    section is used to mark directives that are conditional on the presence of\n    a specific module. The directives within an <directive type=\"section\"\n    >IfModule</directive> section are only processed if the <var>test</var>\n    is true. If <var>test</var> is false, everything between the start and\n    end markers is ignored.</p>\n\n    <p>The <var>test</var> in the <directive type=\"section\"\n    >IfModule</directive> section directive can be one of two forms:</p>\n\n    <ul>\n      <li><var>module</var></li>\n\n      <li>!<var>module</var></li>\n    </ul>\n\n    <p>In the former case, the directives between the start and end\n    markers are only processed if the module named <var>module</var>\n    is included in Apache httpd -- either compiled in or\n    dynamically loaded using <directive module=\"mod_so\"\n    >LoadModule</directive>. The second format reverses the test,\n    and only processes the directives if <var>module</var> is\n    <strong>not</strong> included.</p>\n\n    <p>The <var>module</var> argument can be either the module identifier or\n    the file name of the module, at the time it was compiled.  For example,\n    <code>rewrite_module</code> is the identifier and\n    <code>mod_rewrite.c</code> is the file name. If a module consists of\n    several source files, use the name of the file containing the string\n    <code>STANDARD20_MODULE_STUFF</code>.</p>\n\n    <p><directive type=\"section\">IfModule</directive> sections are\n    nest-able, which can be used to implement simple multiple-module\n    tests.</p>\n\n    <note>This section should only be used if you need to have one\n    configuration file that works whether or not a specific module\n    is available. In normal operation, directives need not be\n    placed in <directive type=\"section\">IfModule</directive>\n    sections.</note>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>IfDirective</name>\n<description>Encloses directives that are processed conditional on the\npresence or absence of a specific directive</description>\n<syntax>&lt;IfDirective [!]<var>directive-name</var>&gt; ...\n    &lt;/IfDirective&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Available in 2.4.34 and later.</compatibility>\n\n<usage>\n    <p>The <code>&lt;IfDirective <var>test</var>&gt;...&lt;/IfDirective&gt;</code>\n    section is used to mark directives that are conditional on the presence of\n    a specific directive. The directives within an <directive type=\"section\"\n    >IfDirective</directive> section are only processed if the <var>test</var>\n    is true. If <var>test</var> is false, everything between the start and\n    end markers is ignored.</p>\n\n    <p>The <var>test</var> in the <directive type=\"section\"\n    >IfDirective</directive> section can be one of two forms:</p>\n\n    <ul>\n      <li><var>directive-name</var></li>\n\n      <li>!<var>directive-name</var></li>\n    </ul>\n\n    <p>In the former case, the directives between the start and end\n    markers are only processed if a directive of the given name is\n    available at the time of processing.  The second format reverses the test,\n    and only processes the directives if <var>directive-name</var> is\n    <strong>not</strong> available.</p>\n\n    <note>This section should only be used if you need to have one\n    configuration file that works across multiple versions of\n    <program>httpd</program>, regardless of whether a particular\n    directive is available. In normal operation, directives need not\n    be placed in <directive type=\"section\">IfDirective</directive>\n    sections.</note>\n</usage>\n<seealso><directive module=\"core\" type=\"section\">IfSection</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>IfSection</name>\n<description>Encloses directives that are processed conditional on the\npresence or absence of a specific section directive</description>\n<syntax>&lt;IfSection [!]<var>section-name</var>&gt; ...\n    &lt;/IfSection&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Available in 2.4.34 and later.</compatibility>\n\n<usage>\n    <p>The <code>&lt;IfSection\n    <var>test</var>&gt;...&lt;/IfSection&gt;</code> section is used\n    to mark directives that are conditional on the presence of a\n    specific section directive.  A section directive is any directive\n    such as <directive type=\"section\">VirtualHost</directive> which\n    encloses other directives, and has a directive name with a leading\n    \"&lt;\".</p>\n\n    <p>The directives within an <directive type=\"section\"\n    >IfSection</directive> section are only processed if the <var>test</var>\n    is true. If <var>test</var> is false, everything between the start and\n    end markers is ignored.</p>\n\n    <p>The <var>section-name</var> must be specified without either\n    the leading \"&lt;\" or closing \"&gt;\".  The <var>test</var> in the\n    <directive type=\"section\">IfSection</directive> section can be one\n    of two forms:</p>\n\n    <ul>\n      <li><var>section-name</var></li>\n      <li>!<var>section-name</var></li>\n    </ul>\n\n    <p>In the former case, the directives between the start and end\n    markers are only processed if a section directive of the given\n    name is available at the time of processing.  The second format\n    reverses the test, and only processes the directives if\n    <var>section-name</var> is <strong>not</strong> an available\n    section directive.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\n&lt;IfSection VirtualHost&gt;\n   ...\n&lt;/IfSection&gt;\n    </highlight>\n    \n    <note>This section should only be used if you need to have one\n    configuration file that works across multiple versions of <program>httpd</program>,\n    regardless of whether a particular section directive is\n    available. In normal operation, directives need not be placed in\n    <directive type=\"section\">IfSection</directive> sections.</note>\n</usage>\n<seealso><directive module=\"core\" type=\"section\">IfDirective</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Include</name>\n<description>Includes other configuration files from within\nthe server configuration files</description>\n<syntax>Include <var>file-path</var>|<var>directory-path</var>|<var>wildcard</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context>\n</contextlist>\n<compatibility>Directory\nwildcard matching available in 2.3.6 and later</compatibility>\n\n<usage>\n    <p>This directive allows inclusion of other configuration files\n    from within the server configuration files.</p>\n\n    <p>Shell-style (<code>fnmatch()</code>) wildcard characters can be used\n    in the filename or directory parts of the path to include several files\n    at once, in alphabetical order. In addition, if\n    <directive>Include</directive> points to a directory, rather than a file,\n    Apache httpd will read all files in that directory and any subdirectory.\n    However, including entire directories is not recommended, because it is\n    easy to accidentally leave temporary files in a directory that can cause\n    <program>httpd</program> to fail. Instead, we encourage you to use the\n    wildcard syntax shown below, to include files that match a particular\n    pattern, such as *.conf, for example.</p>\n\n    <p>The <directive module=\"core\">Include</directive> directive will\n    <strong>fail with an error</strong> if a wildcard expression does not\n    match any file. The <directive module=\"core\">IncludeOptional</directive>\n    directive can be used if non-matching wildcards should be ignored.</p>\n\n    <p>The file path specified may be an absolute path, or may be relative\n    to the <directive module=\"core\">ServerRoot</directive> directory.</p>\n\n    <p>Examples:</p>\n\n    <highlight language=\"config\">\nInclude /usr/local/apache2/conf/ssl.conf\nInclude /usr/local/apache2/conf/vhosts/*.conf\n    </highlight>\n\n    <p>Or, providing paths relative to your <directive\n    module=\"core\">ServerRoot</directive> directory:</p>\n\n    <highlight language=\"config\">\nInclude conf/ssl.conf\nInclude conf/vhosts/*.conf\n    </highlight>\n\n    <p>Wildcards may be included in the directory or file portion of the\n    path. This example will fail if there is no subdirectory in conf/vhosts\n    that contains at least one *.conf file:</p>\n\n    <highlight language=\"config\">\nInclude conf/vhosts/*/*.conf\n    </highlight>\n\n    <p>Alternatively, the following command will just be ignored in case of\n    missing files or directories:</p>\n\n    <highlight language=\"config\">\nIncludeOptional conf/vhosts/*/*.conf\n    </highlight>\n\n</usage>\n\n<seealso><directive module=\"core\">IncludeOptional</directive></seealso>\n<seealso><program>apachectl</program></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>IncludeOptional</name>\n<description>Includes other configuration files from within\nthe server configuration files</description>\n<syntax>IncludeOptional <var>file-path</var>|<var>directory-path</var>|<var>wildcard</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context>\n</contextlist>\n<compatibility>Available in 2.3.6 and later. Not existent file paths without wildcards\n               do not cause SyntaxError after 2.4.30</compatibility>\n\n<usage>\n    <p>This directive allows inclusion of other configuration files\n    from within the server configuration files. It works identically to the\n    <directive module=\"core\">Include</directive> directive, but it will be\n    silently ignored (instead of causing an error) if wildcards are used and\n    they do not match any file or directory or if a file path does not exist\n    on the file system.</p>\n</usage>\n\n<seealso><directive module=\"core\">Include</directive></seealso>\n<seealso><program>apachectl</program></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>KeepAlive</name>\n<description>Enables HTTP persistent connections</description>\n<syntax>KeepAlive On|Off</syntax>\n<default>KeepAlive On</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The Keep-Alive extension to HTTP/1.0 and the persistent\n    connection feature of HTTP/1.1 provide long-lived HTTP sessions\n    which allow multiple requests to be sent over the same TCP\n    connection. In some cases this has been shown to result in an\n    almost 50% speedup in latency times for HTML documents with\n    many images. To enable Keep-Alive connections, set\n    <code>KeepAlive On</code>.</p>\n\n    <p>For HTTP/1.0 clients, Keep-Alive connections will only be\n    used if they are specifically requested by a client. In\n    addition, a Keep-Alive connection with an HTTP/1.0 client can\n    only be used when the length of the content is known in\n    advance. This implies that dynamic content such as CGI output,\n    SSI pages, and server-generated directory listings will\n    generally not use Keep-Alive connections to HTTP/1.0 clients.\n    For HTTP/1.1 clients, persistent connections are the default\n    unless otherwise specified. If the client requests it, chunked\n    encoding will be used in order to send content of unknown\n    length over persistent connections.</p>\n\n    <p>When a client uses a Keep-Alive connection, it will be counted\n    as a single \"request\" for the <directive module=\"mpm_common\"\n    >MaxConnectionsPerChild</directive> directive, regardless\n    of how many requests are sent using the connection.</p>\n</usage>\n\n<seealso><directive module=\"core\">MaxKeepAliveRequests</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>KeepAliveTimeout</name>\n<description>Amount of time the server will wait for subsequent\nrequests on a persistent connection</description>\n<syntax>KeepAliveTimeout <var>num</var>[ms]</syntax>\n<default>KeepAliveTimeout 5</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The number of seconds Apache httpd will wait for a subsequent\n    request before closing the connection. By adding a postfix of ms the\n    timeout can be also set in milliseconds. Once a request has been\n    received, the timeout value specified by the\n    <directive module=\"core\">Timeout</directive> directive applies.</p>\n\n    <p>Setting <directive>KeepAliveTimeout</directive> to a high value\n    may cause performance problems in heavily loaded servers. The\n    higher the timeout, the more server processes will be kept\n    occupied waiting on connections with idle clients.</p>\n\n    <p>If <directive>KeepAliveTimeout</directive> is <strong>not</strong>\n    set for a name-based virtual host, the value of the first defined\n    virtual host best matching the local IP and port will be used.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>Limit</name>\n<description>Restrict enclosed access controls to only certain HTTP\nmethods</description>\n<syntax>&lt;Limit <var>method</var> [<var>method</var>] ... &gt; ...\n    &lt;/Limit&gt;</syntax>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>AuthConfig, Limit</override>\n\n<usage>\n    <p>Access controls are normally effective for\n    <strong>all</strong> access methods, and this is the usual\n    desired behavior. <strong>In the general case, access control\n    directives should not be placed within a\n    <directive type=\"section\">Limit</directive> section.</strong></p>\n\n    <p>The purpose of the <directive type=\"section\">Limit</directive>\n    directive is to restrict the effect of the access controls to the\n    nominated HTTP methods. For all other methods, the access\n    restrictions that are enclosed in the <directive\n    type=\"section\">Limit</directive> bracket <strong>will have no\n    effect</strong>. The following example applies the access control\n    only to the methods <code>POST</code>, <code>PUT</code>, and\n    <code>DELETE</code>, leaving all other methods unprotected:</p>\n\n    <highlight language=\"config\">\n&lt;Limit POST PUT DELETE&gt;\n  Require valid-user\n&lt;/Limit&gt;\n    </highlight>\n\n    <p>The method names listed can be one or more of: <code>GET</code>,\n    <code>POST</code>, <code>PUT</code>, <code>DELETE</code>,\n    <code>CONNECT</code>, <code>OPTIONS</code>,\n    <code>PATCH</code>, <code>PROPFIND</code>, <code>PROPPATCH</code>,\n    <code>MKCOL</code>, <code>COPY</code>, <code>MOVE</code>,\n    <code>LOCK</code>, and <code>UNLOCK</code>. <strong>The method name is\n    case-sensitive.</strong> If <code>GET</code> is used, it will also\n    restrict <code>HEAD</code> requests. The <code>TRACE</code> method\n    cannot be limited (see <directive module=\"core\"\n    >TraceEnable</directive>).</p>\n\n    <note type=\"warning\">A <directive type=\"section\"\n    module=\"core\">LimitExcept</directive> section should always be\n    used in preference to a <directive type=\"section\">Limit</directive>\n    section when restricting access, since a <directive type=\"section\"\n    module=\"core\">LimitExcept</directive> section provides protection\n    against arbitrary methods.</note>\n\n    <p>The <directive type=\"section\">Limit</directive> and\n    <directive type=\"section\" module=\"core\">LimitExcept</directive>\n    directives may be nested.  In this case, each successive level of\n    <directive type=\"section\">Limit</directive> or <directive\n    type=\"section\" module=\"core\">LimitExcept</directive> directives must\n    further restrict the set of methods to which access controls apply.</p>\n\n    <note type=\"warning\">When using\n    <directive type=\"section\">Limit</directive> or\n    <directive type=\"section\">LimitExcept</directive> directives with\n    the <directive module=\"mod_authz_core\">Require</directive> directive,\n    note that the first <directive module=\"mod_authz_core\">Require</directive>\n    to succeed authorizes the request, regardless of the presence of other\n    <directive module=\"mod_authz_core\">Require</directive> directives.</note>\n\n    <p>For example, given the following configuration, all users will\n    be authorized for <code>POST</code> requests, and the\n    <code>Require group editors</code> directive will be ignored\n    in all cases:</p>\n\n    <highlight language=\"config\">\n&lt;LimitExcept GET&gt;\n  Require valid-user\n&lt;/LimitExcept&gt;\n&lt;Limit POST&gt;\n  Require group editors\n&lt;/Limit&gt;\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>LimitExcept</name>\n<description>Restrict access controls to all HTTP methods\nexcept the named ones</description>\n<syntax>&lt;LimitExcept <var>method</var> [<var>method</var>] ... &gt; ...\n    &lt;/LimitExcept&gt;</syntax>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>AuthConfig, Limit</override>\n\n<usage>\n    <p><directive type=\"section\">LimitExcept</directive> and\n    <code>&lt;/LimitExcept&gt;</code> are used to enclose\n    a group of access control directives which will then apply to any\n    HTTP access method <strong>not</strong> listed in the arguments;\n    i.e., it is the opposite of a <directive type=\"section\"\n    module=\"core\">Limit</directive> section and can be used to control\n    both standard and nonstandard/unrecognized methods. See the\n    documentation for <directive module=\"core\"\n    type=\"section\">Limit</directive> for more details.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\n&lt;LimitExcept POST GET&gt;\n  Require valid-user\n&lt;/LimitExcept&gt;\n    </highlight>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitInternalRecursion</name>\n<description>Determine maximum number of internal redirects and nested\nsubrequests</description>\n<syntax>LimitInternalRecursion <var>number</var> [<var>number</var>]</syntax>\n<default>LimitInternalRecursion 10</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>An internal redirect happens, for example, when using the <directive\n    module=\"mod_actions\">Action</directive> directive, which internally\n    redirects the original request to a CGI script. A subrequest is Apache httpd's\n    mechanism to find out what would happen for some URI if it were requested.\n    For example, <module>mod_dir</module> uses subrequests to look for the\n    files listed in the <directive module=\"mod_dir\">DirectoryIndex</directive>\n    directive.</p>\n\n    <p><directive>LimitInternalRecursion</directive> prevents the server\n    from crashing when entering an infinite loop of internal redirects or\n    subrequests. Such loops are usually caused by misconfigurations.</p>\n\n    <p>The directive stores two different limits, which are evaluated on\n    per-request basis. The first <var>number</var> is the maximum number of\n    internal redirects that may follow each other. The second <var>number</var>\n    determines how deeply subrequests may be nested. If you specify only one\n    <var>number</var>, it will be assigned to both limits.</p>\n\n    <highlight language=\"config\">\nLimitInternalRecursion 5\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitRequestBody</name>\n<description>Restricts the total size of the HTTP request body sent\nfrom the client</description>\n<syntax>LimitRequestBody <var>bytes</var></syntax>\n<default>LimitRequestBody 0</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n\n<usage>\n    <p>This directive specifies the number of <var>bytes</var> from 0\n    (meaning unlimited) to 2147483647 (2GB) that are allowed in a\n    request body. See the note below for the limited applicability\n    to proxy requests.</p>\n\n    <p>The <directive>LimitRequestBody</directive> directive allows\n    the user to set a limit on the allowed size of an HTTP request\n    message body within the context in which the directive is given\n    (server, per-directory, per-file or per-location). If the client\n    request exceeds that limit, the server will return an error\n    response instead of servicing the request. The size of a normal\n    request message body will vary greatly depending on the nature of\n    the resource and the methods allowed on that resource. CGI scripts\n    typically use the message body for retrieving form information.\n    Implementations of the <code>PUT</code> method will require\n    a value at least as large as any representation that the server\n    wishes to accept for that resource.</p>\n\n    <p>This directive gives the server administrator greater\n    control over abnormal client request behavior, which may be\n    useful for avoiding some forms of denial-of-service\n    attacks.</p>\n\n    <p>If, for example, you are permitting file upload to a particular\n    location and wish to limit the size of the uploaded file to 100K,\n    you might use the following directive:</p>\n\n    <highlight language=\"config\">\nLimitRequestBody 102400\n    </highlight>\n\n    <note><p>For a full description of how this directive is interpreted by\n    proxy requests, see the <module>mod_proxy</module> documentation.</p>\n    </note>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitRequestFields</name>\n<description>Limits the number of HTTP request header fields that\nwill be accepted from the client</description>\n<syntax>LimitRequestFields <var>number</var></syntax>\n<default>LimitRequestFields 100</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n\n<usage>\n    <p>Setting <var>number</var> at 0 means unlimited.\n    The default value is defined by the compile-time\n    constant <code>DEFAULT_LIMIT_REQUEST_FIELDS</code> (100 as\n    distributed).</p>\n\n    <p>The <directive>LimitRequestFields</directive> directive allows\n    the server administrator to modify the limit on the number of\n    request header fields allowed in an HTTP request. A server needs\n    this value to be larger than the number of fields that a normal\n    client request might include. The number of request header fields\n    used by a client rarely exceeds 20, but this may vary among\n    different client implementations, often depending upon the extent\n    to which a user has configured their browser to support detailed\n    content negotiation. Optional HTTP extensions are often expressed\n    using request header fields.</p>\n\n    <p>This directive gives the server administrator greater\n    control over abnormal client request behavior, which may be\n    useful for avoiding some forms of denial-of-service attacks.\n    The value should be increased if normal clients see an error\n    response from the server that indicates too many fields were\n    sent in the request.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\nLimitRequestFields 50\n    </highlight>\n\n     <note type=\"warning\"><title>Warning</title>\n     <p> When name-based virtual hosting is used, the value for this\n     directive is taken from the default (first-listed) virtual host for the\n     local IP and port combination.</p>\n     </note>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitRequestFieldSize</name>\n<description>Limits the size of the HTTP request header allowed from the\nclient</description>\n<syntax>LimitRequestFieldSize <var>bytes</var></syntax>\n<default>LimitRequestFieldSize 8190</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n\n<usage>\n    <p>This directive specifies the number of <var>bytes</var>\n    that will be allowed in an HTTP request header.</p>\n\n    <p>The <directive>LimitRequestFieldSize</directive> directive\n    allows the server administrator to set the limit\n    on the allowed size of an HTTP request header field. A server\n    needs this value to be large enough to hold any one header field\n    from a normal client request. The size of a normal request header\n    field will vary greatly among different client implementations,\n    often depending upon the extent to which a user has configured\n    their browser to support detailed content negotiation. SPNEGO\n    authentication headers can be up to 12392 bytes.</p>\n\n    <p>This directive gives the server administrator greater\n    control over abnormal client request behavior, which may be\n    useful for avoiding some forms of denial-of-service attacks.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\nLimitRequestFieldSize 4094\n    </highlight>\n\n    <note>Under normal conditions, the value should not be changed from\n    the default.</note>\n\n    <note type=\"warning\"><title>Warning</title>\n    <p> When name-based virtual hosting is used, the value for this\n    directive is taken from the default (first-listed) virtual host best\n    matching the current IP address and port combination.</p>\n    </note>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitRequestLine</name>\n<description>Limit the size of the HTTP request line that will be accepted\nfrom the client</description>\n<syntax>LimitRequestLine <var>bytes</var></syntax>\n<default>LimitRequestLine 8190</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n\n<usage>\n    <p>This directive sets the number of <var>bytes</var> that will be\n    allowed on the HTTP request-line.</p>\n\n    <p>The <directive>LimitRequestLine</directive> directive allows\n    the server administrator to set the limit on the allowed size\n    of a client's HTTP request-line. Since the request-line consists of the\n    HTTP method, URI, and protocol version, the\n    <directive>LimitRequestLine</directive> directive places a\n    restriction on the length of a request-URI allowed for a request\n    on the server. A server needs this value to be large enough to\n    hold any of its resource names, including any information that\n    might be passed in the query part of a <code>GET</code> request.</p>\n\n    <p>This directive gives the server administrator greater\n    control over abnormal client request behavior, which may be\n    useful for avoiding some forms of denial-of-service attacks.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\nLimitRequestLine 4094\n    </highlight>\n\n    <note>Under normal conditions, the value should not be changed from\n    the default.</note>\n\n    <note type=\"warning\"><title>Warning</title>\n    <p> When name-based virtual hosting is used, the value for this\n    directive is taken from the default (first-listed) virtual host best\n    matching the current IP address and port combination.</p>\n    </note>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitXMLRequestBody</name>\n<description>Limits the size of an XML-based request body</description>\n<syntax>LimitXMLRequestBody <var>bytes</var></syntax>\n<default>LimitXMLRequestBody 1000000</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context></contextlist>\n<override>All</override>\n\n<usage>\n    <p>Limit (in bytes) on maximum size of an XML-based request\n    body. A value of <code>0</code> will disable any checking.</p>\n\n    <p>Example:</p>\n\n    <highlight language=\"config\">\nLimitXMLRequestBody 0\n    </highlight>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>Location</name>\n<description>Applies the enclosed directives only to matching\nURLs</description>\n<syntax>&lt;Location\n    <var>URL-path</var>|<var>URL</var>&gt; ... &lt;/Location&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive type=\"section\">Location</directive> directive\n    limits the scope of the enclosed directives by URL. It is similar to the\n    <directive type=\"section\" module=\"core\">Directory</directive>\n    directive, and starts a subsection which is terminated with a\n    <code>&lt;/Location&gt;</code> directive. <directive\n    type=\"section\">Location</directive> sections are processed in the\n    order they appear in the configuration file, after the <directive\n    type=\"section\" module=\"core\">Directory</directive> sections and\n    <code>.htaccess</code> files are read, and after the <directive\n    type=\"section\" module=\"core\">Files</directive> sections.</p>\n\n    <p><directive type=\"section\">Location</directive> sections operate\n    completely outside the filesystem.  This has several consequences.\n    Most importantly, <directive type=\"section\">Location</directive>\n    directives should not be used to control access to filesystem\n    locations.  Since several different URLs may map to the same\n    filesystem location, such access controls may by circumvented.</p>\n\n    <p>The enclosed directives will be applied to the request if the path component\n    of the URL meets <em>any</em> of the following criteria:\n    </p>\n    <ul>\n      <li>The specified location matches exactly the path component of the URL.\n      </li>\n      <li>The specified location, which ends in a forward slash, is a prefix\n      of the path component of the URL (treated as a context root).\n      </li>\n      <li>The specified location, with the addition of a trailing slash, is a\n      prefix of the path component of the URL (also treated as a context root).\n      </li>\n    </ul>\n    <p>\n    In the example below, where no trailing slash is used, requests to\n    /private1, /private1/ and /private1/file.txt will have the enclosed\n    directives applied, but /private1other would not.\n    </p>\n    <highlight language=\"config\">\n&lt;Location \"/private1\"&gt;\n    #  ...\n&lt;/Location&gt;\n    </highlight>\n    <p>\n    In the example below, where a trailing slash is used, requests to\n    /private2/ and /private2/file.txt will have the enclosed\n    directives applied, but /private2 and /private2other would not.\n    </p>\n    <highlight language=\"config\">\n&lt;Location \"/private2<em>/</em>\"&gt;\n    # ...\n&lt;/Location&gt;\n    </highlight>\n\n    <note><title>When to use <directive\n    type=\"section\">Location</directive></title>\n\n    <p>Use <directive type=\"section\">Location</directive> to apply\n    directives to content that lives outside the filesystem.  For\n    content that lives in the filesystem, use <directive\n    type=\"section\" module=\"core\">Directory</directive> and <directive\n    type=\"section\" module=\"core\">Files</directive>.  An exception is\n    <code>&lt;Location \"/\"&gt;</code>, which is an easy way to\n    apply a configuration to the entire server.</p>\n    </note>\n\n    <p>For all origin (non-proxy) requests, the URL to be matched is a\n    URL-path of the form <code>/path/</code>.  <em>No scheme, hostname,\n    port, or query string may be included.</em>  For proxy requests, the\n    URL to be matched is of the form\n    <code>scheme://servername/path</code>, and you must include the\n    prefix.</p>\n\n    <p>The URL may use wildcards. In a wild-card string, <code>?</code> matches\n    any single character, and <code>*</code> matches any sequences of\n    characters. Neither wildcard character matches a / in the URL-path.</p>\n\n    <p><glossary ref=\"regex\">Regular expressions</glossary>\n    can also be used, with the addition of the <code>~</code>\n    character. For example:</p>\n\n    <highlight language=\"config\">\n&lt;Location ~ \"/(extra|special)/data\"&gt;\n    #...\n&lt;/Location&gt;\n    </highlight>\n\n    <p>would match URLs that contained the substring <code>/extra/data</code>\n    or <code>/special/data</code>. The directive <directive\n    type=\"section\" module=\"core\">LocationMatch</directive> behaves\n    identical to the regex version of <directive\n    type=\"section\">Location</directive>, and is preferred, for the\n    simple reason that <code>~</code> is hard to distinguish from\n    <code>-</code> in many fonts.</p>\n\n    <p>The <directive type=\"section\">Location</directive>\n    functionality is especially useful when combined with the\n    <directive module=\"core\">SetHandler</directive>\n    directive. For example, to enable status requests but allow them\n    only from browsers at <code>example.com</code>, you might use:</p>\n\n    <highlight language=\"config\">\n&lt;Location \"/status\"&gt;\n  SetHandler server-status\n  Require host example.com\n&lt;/Location&gt;\n    </highlight>\n\n    <note><title>Note about / (slash)</title>\n      <p>The slash character has special meaning depending on where in a\n      URL it appears. People may be used to its behavior in the filesystem\n      where multiple adjacent slashes are frequently collapsed to a single\n      slash (<em>i.e.</em>, <code>/home///foo</code> is the same as\n      <code>/home/foo</code>). In URL-space this is not necessarily true.\n      The <directive type=\"section\" module=\"core\">LocationMatch</directive>\n      directive and the regex version of <directive type=\"section\"\n      >Location</directive> require you to explicitly specify multiple\n      slashes if that is your intention.</p>\n\n      <p>For example, <code>&lt;LocationMatch \"^/abc\"&gt;</code> would match\n      the request URL <code>/abc</code> but not the request URL <code>\n      //abc</code>. The (non-regex) <directive type=\"section\"\n      >Location</directive> directive behaves similarly when used for\n      proxy requests. But when (non-regex) <directive type=\"section\"\n      >Location</directive> is used for non-proxy requests it will\n      implicitly match multiple slashes with a single slash. For example,\n      if you specify <code>&lt;Location \"/abc/def\"&gt;</code> and the\n      request is to <code>/abc//def</code> then it will match.</p>\n    </note>\n</usage>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;\n    and &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received.</seealso>\n<seealso><directive module=\"core\">LocationMatch</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>LocationMatch</name>\n<description>Applies the enclosed directives only to regular-expression\nmatching URLs</description>\n<syntax>&lt;LocationMatch\n    <var>regex</var>&gt; ... &lt;/LocationMatch&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive type=\"section\">LocationMatch</directive> directive\n    limits the scope of the enclosed directives by URL, in an identical manner\n    to <directive module=\"core\" type=\"section\">Location</directive>. However,\n    it takes a <glossary ref=\"regex\">regular expression</glossary>\n    as an argument instead of a simple string. For example:</p>\n\n    <highlight language=\"config\">\n&lt;LocationMatch \"/(extra|special)/data\"&gt;\n    # ...\n&lt;/LocationMatch&gt;\n    </highlight>\n\n    <p>would match URLs that contained the substring <code>/extra/data</code>\n    or <code>/special/data</code>.</p>\n\n    <note><p>If the intent is that a URL <strong>starts with</strong>\n    <code>/extra/data</code>, rather than merely\n    <strong>contains</strong> <code>/extra/data</code>, prefix the\n    regular expression with a <code>^</code> to require this.</p>\n\n    <highlight language=\"config\">\n&lt;LocationMatch \"^/(extra|special)/data\"&gt;\n    </highlight>\n    </note>\n\n    <p>From 2.4.8 onwards, named groups and backreferences are captured and\n    written to the environment with the corresponding name prefixed with\n    \"MATCH_\" and in upper case. This allows elements of URLs to be referenced\n    from within <a href=\"../expr.html\">expressions</a> and modules like\n    <module>mod_rewrite</module>. In order to prevent confusion, numbered\n    (unnamed) backreferences are ignored. Use named groups instead.</p>\n\n    <highlight language=\"config\">\n&lt;LocationMatch \"^/combined/(?&lt;sitename&gt;[^/]+)\"&gt;\n    Require ldap-group cn=%{env:MATCH_SITENAME},ou=combined,o=Example\n&lt;/LocationMatch&gt;\n    </highlight>\n\n    <note><title>Note about / (slash)</title>\n      <p>The slash character has special meaning depending on where in a\n      URL it appears. People may be used to its behavior in the filesystem\n      where multiple adjacent slashes are frequently collapsed to a single\n      slash (<em>i.e.</em>, <code>/home///foo</code> is the same as\n      <code>/home/foo</code>). In URL-space this is not necessarily true.\n      The <directive type=\"section\" module=\"core\">LocationMatch</directive>\n      directive and the regex version of <directive type=\"section\"\n      >Location</directive> require you to explicitly specify multiple\n      slashes if that is your intention.</p>\n\n      <p>For example, <code>&lt;LocationMatch \"^/abc\"&gt;</code> would match\n      the request URL <code>/abc</code> but not the request URL <code>\n      //abc</code>. The (non-regex) <directive type=\"section\"\n      >Location</directive> directive behaves similarly when used for\n      proxy requests. But when (non-regex) <directive type=\"section\"\n      >Location</directive> is used for non-proxy requests it will\n      implicitly match multiple slashes with a single slash. For example,\n      if you specify <code>&lt;Location \"/abc/def\"&gt;</code> and the\n      request is to <code>/abc//def</code> then it will match.</p>\n    </note>\n</usage>\n\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;\n    and &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LogLevel</name>\n<description>Controls the verbosity of the ErrorLog</description>\n<syntax>LogLevel [<var>module</var>:]<var>level</var>\n    [<var>module</var>:<var>level</var>] ...\n</syntax>\n<default>LogLevel warn</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context>\n</contextlist>\n<compatibility>Per-module and per-directory configuration is available in\n    Apache HTTP Server 2.3.6 and later</compatibility>\n\n<usage>\n    <p><directive>LogLevel</directive> adjusts the verbosity of the\n    messages recorded in the error logs (see <directive\n    module=\"core\">ErrorLog</directive> directive). The following\n    <var>level</var>s are available, in order of decreasing\n    significance:</p>\n\n    <table border=\"1\">\n    <columnspec><column width=\".2\"/><column width=\".3\"/><column width=\".5\"/>\n    </columnspec>\n      <tr>\n        <th><strong>Level</strong> </th>\n\n        <th><strong>Description</strong> </th>\n\n        <th><strong>Example</strong> </th>\n      </tr>\n\n      <tr>\n        <td><code>emerg</code> </td>\n\n        <td>Emergencies - system is unusable.</td>\n\n        <td>\"Child cannot open lock file. Exiting\"</td>\n      </tr>\n\n      <tr>\n        <td><code>alert</code> </td>\n\n        <td>Action must be taken immediately.</td>\n\n        <td>\"getpwuid: couldn't determine user name from uid\"</td>\n      </tr>\n\n      <tr>\n        <td><code>crit</code> </td>\n\n        <td>Critical Conditions.</td>\n\n        <td>\"socket: Failed to get a socket, exiting child\"</td>\n      </tr>\n\n      <tr>\n        <td><code>error</code> </td>\n\n        <td>Error conditions.</td>\n\n        <td>\"Premature end of script headers\"</td>\n      </tr>\n\n      <tr>\n        <td><code>warn</code> </td>\n\n        <td>Warning conditions.</td>\n\n        <td>\"child process 1234 did not exit, sending another\n        SIGHUP\"</td>\n      </tr>\n\n      <tr>\n        <td><code>notice</code> </td>\n\n        <td>Normal but significant condition.</td>\n\n        <td>\"httpd: caught SIGBUS, attempting to dump core in\n        ...\"</td>\n      </tr>\n\n      <tr>\n        <td><code>info</code> </td>\n\n        <td>Informational.</td>\n\n        <td>\"Server seems busy, (you may need to increase\n        StartServers, or Min/MaxSpareServers)...\"</td>\n      </tr>\n\n      <tr>\n        <td><code>debug</code> </td>\n\n        <td>Debug-level messages</td>\n\n        <td>\"Opening config file ...\"</td>\n      </tr>\n      <tr>\n        <td><code>trace1</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"proxy: FTP: control connection complete\"</td>\n      </tr>\n      <tr>\n        <td><code>trace2</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"proxy: CONNECT: sending the CONNECT request to the remote proxy\"</td>\n      </tr>\n      <tr>\n        <td><code>trace3</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"openssl: Handshake: start\"</td>\n      </tr>\n      <tr>\n        <td><code>trace4</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"read from buffered SSL brigade, mode 0, 17 bytes\"</td>\n      </tr>\n      <tr>\n        <td><code>trace5</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"map lookup FAILED: map=rewritemap key=keyname\"</td>\n      </tr>\n      <tr>\n        <td><code>trace6</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"cache lookup FAILED, forcing new map lookup\"</td>\n      </tr>\n      <tr>\n        <td><code>trace7</code> </td>\n\n        <td>Trace messages, dumping large amounts of data</td>\n\n        <td>\"| 0000: 02 23 44 30 13 40 ac 34 df 3d bf 9a 19 49 39 15 |\"</td>\n      </tr>\n      <tr>\n        <td><code>trace8</code> </td>\n\n        <td>Trace messages, dumping large amounts of data</td>\n\n        <td>\"| 0000: 02 23 44 30 13 40 ac 34 df 3d bf 9a 19 49 39 15 |\"</td>\n      </tr>\n    </table>\n\n    <p>When a particular level is specified, messages from all\n    other levels of higher significance will be reported as well.\n    <em>E.g.</em>, when <code>LogLevel info</code> is specified,\n    then messages with log levels of <code>notice</code> and\n    <code>warn</code> will also be posted.</p>\n\n    <p>Using a level of at least <code>crit</code> is\n    recommended.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\nLogLevel notice\n    </highlight>\n\n    <note><title>Note</title>\n      <p>When logging to a regular file, messages of the level\n      <code>notice</code> cannot be suppressed and thus are always\n      logged. However, this doesn't apply when logging is done\n      using <code>syslog</code>.</p>\n    </note>\n\n    <p>Specifying a level without a module name will reset the level\n    for all modules to that level.  Specifying a level with a module\n    name will set the level for that module only. It is possible to\n    use the module source file name, the module identifier, or the\n    module identifier with the trailing <code>_module</code> omitted\n    as module specification. This means the following three specifications\n    are equivalent:</p>\n\n    <highlight language=\"config\">\nLogLevel info ssl:warn\nLogLevel info mod_ssl.c:warn\nLogLevel info ssl_module:warn\n    </highlight>\n\n    <p>It is also possible to change the level per directory:</p>\n\n    <highlight language=\"config\">\nLogLevel info\n&lt;Directory \"/usr/local/apache/htdocs/app\"&gt;\n  LogLevel debug\n&lt;/Directory&gt;\n    </highlight>\n\n    <note>\n        Per directory loglevel configuration only affects messages that are\n        logged after the request has been parsed and that are associated with\n        the request. Log messages which are associated with the connection or\n        the server are not affected.\n    </note>\n</usage>\n<seealso><directive module=\"core\">ErrorLog</directive></seealso>\n<seealso><directive module=\"core\">ErrorLogFormat</directive></seealso>\n<seealso><a href=\"../logs.html\">Apache HTTP Server Log Files</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>MaxKeepAliveRequests</name>\n<description>Number of requests allowed on a persistent\nconnection</description>\n<syntax>MaxKeepAliveRequests <var>number</var></syntax>\n<default>MaxKeepAliveRequests 100</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive>MaxKeepAliveRequests</directive> directive\n    limits the number of requests allowed per connection when\n    <directive module=\"core\" >KeepAlive</directive> is on. If it is\n    set to <code>0</code>, unlimited requests will be allowed. We\n    recommend that this setting be kept to a high value for maximum\n    server performance.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\nMaxKeepAliveRequests 500\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>MaxRanges</name>\n<description>Number of ranges allowed before returning the complete\nresource </description>\n<syntax>MaxRanges default | unlimited | none | <var>number-of-ranges</var></syntax>\n<default>MaxRanges 200</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context>\n</contextlist>\n<compatibility>Available in Apache HTTP Server 2.3.15 and later</compatibility>\n\n<usage>\n    <p>The <directive>MaxRanges</directive> directive\n    limits the number of HTTP ranges the server is willing to\n    return to the client. If more ranges than permitted are requested,\n    the complete resource is returned instead.</p>\n\n    <dl>\n      <dt><strong>default</strong></dt>\n      <dd>Limits the number of ranges to a compile-time default of 200.</dd>\n\n      <dt><strong>none</strong></dt>\n      <dd>Range headers are ignored.</dd>\n\n      <dt><strong>unlimited</strong></dt>\n      <dd>The server does not limit the number of ranges it is\n          willing to satisfy.</dd>\n\n      <dt><var>number-of-ranges</var></dt>\n      <dd>A positive number representing the maximum number of ranges the\n      server is willing to satisfy.</dd>\n    </dl>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n    <name>MaxRangeOverlaps</name>\n    <description>Number of overlapping ranges (eg: <code>100-200,150-300</code>) allowed before returning the complete\n        resource </description>\n    <syntax>MaxRangeOverlaps default | unlimited | none | <var>number-of-ranges</var></syntax>\n    <default>MaxRangeOverlaps 20</default>\n    <contextlist><context>server config</context><context>virtual host</context>\n        <context>directory</context>\n    </contextlist>\n    <compatibility>Available in Apache HTTP Server 2.3.15 and later</compatibility>\n\n    <usage>\n        <p>The <directive>MaxRangeOverlaps</directive> directive\n            limits the number of overlapping HTTP ranges the server is willing to\n            return to the client. If more overlapping ranges than permitted are requested,\n            the complete resource is returned instead.</p>\n\n        <dl>\n            <dt><strong>default</strong></dt>\n            <dd>Limits the number of overlapping ranges to a compile-time default of 20.</dd>\n\n            <dt><strong>none</strong></dt>\n            <dd>No overlapping Range headers are allowed.</dd>\n\n            <dt><strong>unlimited</strong></dt>\n            <dd>The server does not limit the number of overlapping ranges it is\n                willing to satisfy.</dd>\n\n            <dt><var>number-of-ranges</var></dt>\n            <dd>A positive number representing the maximum number of overlapping ranges the\n                server is willing to satisfy.</dd>\n        </dl>\n    </usage>\n</directivesynopsis>\n\n<directivesynopsis>\n    <name>MaxRangeReversals</name>\n    <description>Number of range reversals (eg: <code>100-200,50-70</code>) allowed before returning the complete\n        resource </description>\n    <syntax>MaxRangeReversals default | unlimited | none | <var>number-of-ranges</var></syntax>\n    <default>MaxRangeReversals 20</default>\n    <contextlist><context>server config</context><context>virtual host</context>\n        <context>directory</context>\n    </contextlist>\n    <compatibility>Available in Apache HTTP Server 2.3.15 and later</compatibility>\n\n    <usage>\n        <p>The <directive>MaxRangeReversals</directive> directive\n            limits the number of HTTP Range reversals the server is willing to\n            return to the client. If more ranges reversals than permitted are requested,\n            the complete resource is returned instead.</p>\n\n        <dl>\n            <dt><strong>default</strong></dt>\n            <dd>Limits the number of range reversals to a compile-time default of 20.</dd>\n\n            <dt><strong>none</strong></dt>\n            <dd>No Range reversals headers are allowed.</dd>\n\n            <dt><strong>unlimited</strong></dt>\n            <dd>The server does not limit the number of range reversals it is\n                willing to satisfy.</dd>\n\n            <dt><var>number-of-ranges</var></dt>\n            <dd>A positive number representing the maximum number of range reversals the\n                server is willing to satisfy.</dd>\n        </dl>\n    </usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Mutex</name>\n<description>Configures mutex mechanism and lock file directory for all\nor specified mutexes</description>\n<syntax>Mutex <var>mechanism</var> [default|<var>mutex-name</var>] ... [OmitPID]</syntax>\n<default>Mutex default</default>\n<contextlist><context>server config</context></contextlist>\n<compatibility>Available in Apache HTTP Server 2.3.4 and later</compatibility>\n\n<usage>\n    <p>The <directive>Mutex</directive> directive sets the mechanism,\n    and optionally the lock file location, that httpd and modules use\n    to serialize access to resources.  Specify <code>default</code> as\n    the second argument to change the settings for all mutexes; specify\n    a mutex name (see table below) as the second argument to override\n    defaults only for that mutex.</p>\n\n    <p>The <directive>Mutex</directive> directive is typically used in\n    the following exceptional situations:</p>\n\n    <ul>\n        <li>change the mutex mechanism when the default mechanism selected\n        by <glossary>APR</glossary> has a functional or performance\n        problem</li>\n\n        <li>change the directory used by file-based mutexes when the\n        default directory does not support locking</li>\n    </ul>\n\n    <note><title>Supported modules</title>\n    <p>This directive only configures mutexes which have been registered\n    with the core server using the <code>ap_mutex_register()</code> API.\n    All modules bundled with httpd support the <directive>Mutex</directive>\n    directive, but third-party modules may not.  Consult the documentation\n    of the third-party module, which must indicate the mutex name(s) which\n    can be configured if this directive is supported.</p>\n    </note>\n\n    <p>The following mutex <em>mechanisms</em> are available:</p>\n    <ul>\n        <li><code>default | yes</code>\n        <p>This selects the default locking implementation, as determined by\n        <glossary>APR</glossary>.  The default locking implementation can\n        be displayed by running <program>httpd</program> with the\n        <code>-V</code> option.</p></li>\n\n        <li><code>none | no</code>\n        <p>This effectively disables the mutex, and is only allowed for a\n        mutex if the module indicates that it is a valid choice.  Consult the\n        module documentation for more information.</p></li>\n\n        <li><code>posixsem</code>\n        <p>This is a mutex variant based on a Posix semaphore.</p>\n\n        <note type=\"warning\"><title>Warning</title>\n        <p>The semaphore ownership is not recovered if a thread in the process\n        holding the mutex segfaults, resulting in a hang of the web server.</p>\n        </note>\n        </li>\n\n        <li><code>sysvsem</code>\n        <p>This is a mutex variant based on a SystemV IPC semaphore.</p>\n\n        <note type=\"warning\"><title>Warning</title>\n        <p>It is possible to \"leak\" SysV semaphores if processes crash\n        before the semaphore is removed.</p>\n\t</note>\n\n        <note type=\"warning\"><title>Security</title>\n        <p>The semaphore API allows for a denial of service attack by any\n        CGIs running under the same uid as the webserver (<em>i.e.</em>,\n        all CGIs, unless you use something like <program>suexec</program>\n        or <code>cgiwrapper</code>).</p>\n\t</note>\n        </li>\n\n        <li><code>sem</code>\n        <p>This selects the \"best\" available semaphore implementation, choosing\n        between Posix and SystemV IPC semaphores, in that order.</p></li>\n\n        <li><code>pthread</code>\n        <p>This is a mutex variant based on cross-process Posix thread\n        mutexes.</p>\n\n        <note type=\"warning\"><title>Warning</title>\n        <p>On most systems, if a child process terminates abnormally while\n        holding a mutex that uses this implementation, the server will deadlock\n        and stop responding to requests.  When this occurs, the server will\n        require a manual restart to recover.</p>\n        <p>Solaris and Linux are notable exceptions as they provide a mechanism which\n        usually allows the mutex to be recovered after a child process\n        terminates abnormally while holding a mutex.</p>\n        <p>If your system is POSIX compliant or if it implements the\n        <code>pthread_mutexattr_setrobust_np()</code> function, you may be able\n        to use the <code>pthread</code> option safely.</p>\n        </note>\n        </li>\n\n        <li><code>fcntl:/path/to/mutex</code>\n        <p>This is a mutex variant where a physical (lock-)file and the\n        <code>fcntl()</code> function are used as the mutex.</p>\n\n        <note type=\"warning\"><title>Warning</title>\n        <p>When multiple mutexes based on this mechanism are used within\n        multi-threaded, multi-process environments, deadlock errors (EDEADLK)\n        can be reported for valid mutex operations if <code>fcntl()</code>\n        is not thread-aware, such as on Solaris.</p>\n\t</note>\n        </li>\n\n        <li><code>flock:/path/to/mutex</code>\n        <p>This is similar to the <code>fcntl:/path/to/mutex</code> method\n        with the exception that the <code>flock()</code> function is used to\n        provide file locking.</p></li>\n\n        <li><code>file:/path/to/mutex</code>\n        <p>This selects the \"best\" available file locking implementation,\n        choosing between <code>fcntl</code> and <code>flock</code>, in that\n        order.</p></li>\n    </ul>\n\n    <p>Most mechanisms are only available on selected platforms, where the\n    underlying platform and <glossary>APR</glossary> support it.  Mechanisms\n    which aren't available on all platforms are <em>posixsem</em>,\n    <em>sysvsem</em>, <em>sem</em>, <em>pthread</em>, <em>fcntl</em>,\n    <em>flock</em>, and <em>file</em>.</p>\n\n    <p>With the file-based mechanisms <em>fcntl</em> and <em>flock</em>,\n    the path, if provided, is a directory where the lock file will be created.\n    The default directory is httpd's run-time file directory relative to\n    <directive module=\"core\">ServerRoot</directive>.  Always use a local disk\n    filesystem for <code>/path/to/mutex</code> and never a directory residing\n    on a NFS- or AFS-filesystem.  The basename of the file will be the mutex\n    type, an optional instance string provided by the module, and unless the\n    <code>OmitPID</code> keyword is specified, the process id of the httpd\n    parent process will be appended to make the file name unique, avoiding\n    conflicts when multiple httpd instances share a lock file directory.  For\n    example, if the mutex name is <code>mpm-accept</code> and the lock file\n    directory is <code>/var/httpd/locks</code>, the lock file name for the\n    httpd instance with parent process id 12345 would be\n    <code>/var/httpd/locks/mpm-accept.12345</code>.</p>\n\n    <note type=\"warning\"><title>Security</title>\n    <p>It is best to <em>avoid</em> putting mutex files in a world-writable\n    directory such as <code>/var/tmp</code> because someone could create\n    a denial of service attack and prevent the server from starting by\n    creating a lockfile with the same name as the one the server will try\n    to create.</p>\n    </note>\n\n    <p>The following table documents the names of mutexes used by httpd\n    and bundled modules.</p>\n\n    <table border=\"1\" style=\"zebra\">\n        <tr>\n            <th>Mutex name</th>\n            <th>Module(s)</th>\n            <th>Protected resource</th>\n\t</tr>\n        <tr>\n            <td><code>mpm-accept</code></td>\n            <td><module>prefork</module> and <module>worker</module> MPMs</td>\n            <td>incoming connections, to avoid the thundering herd problem;\n            for more information, refer to the\n            <a href=\"../misc/perf-tuning.html\">performance tuning</a>\n            documentation</td>\n\t</tr>\n        <tr>\n            <td><code>authdigest-client</code></td>\n            <td><module>mod_auth_digest</module></td>\n            <td>client list in shared memory</td>\n\t</tr>\n        <tr>\n            <td><code>authdigest-opaque</code></td>\n            <td><module>mod_auth_digest</module></td>\n            <td>counter in shared memory</td>\n\t</tr>\n        <tr>\n            <td><code>ldap-cache</code></td>\n            <td><module>mod_ldap</module></td>\n            <td>LDAP result cache</td>\n\t</tr>\n        <tr>\n            <td><code>rewrite-map</code></td>\n            <td><module>mod_rewrite</module></td>\n            <td>communication with external mapping programs, to avoid\n            intermixed I/O from multiple requests</td>\n\t</tr>\n        <tr>\n            <td><code>ssl-cache</code></td>\n            <td><module>mod_ssl</module></td>\n            <td>SSL session cache</td>\n\t</tr>\n        <tr>\n            <td><code>ssl-stapling</code></td>\n            <td><module>mod_ssl</module></td>\n            <td>OCSP stapling response cache</td>\n\t</tr>\n        <tr>\n            <td><code>watchdog-callback</code></td>\n            <td><module>mod_watchdog</module></td>\n            <td>callback function of a particular client module</td>\n\t</tr>\n    </table>\n\n    <p>The <code>OmitPID</code> keyword suppresses the addition of the httpd\n    parent process id from the lock file name.</p>\n\n    <p>In the following example, the mutex mechanism for the MPM accept\n    mutex will be changed from the compiled-in default to <code>fcntl</code>,\n    with the associated lock file created in directory\n    <code>/var/httpd/locks</code>.  The mutex mechanism for all other mutexes\n    will be changed from the compiled-in default to <code>sysvsem</code>.</p>\n\n    <highlight language=\"config\">\nMutex sysvsem default\nMutex fcntl:/var/httpd/locks mpm-accept\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>NameVirtualHost</name>\n<description>DEPRECATED: Designates an IP address for name-virtual\nhosting</description>\n<syntax>NameVirtualHost <var>addr</var>[:<var>port</var>]</syntax>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n\n<p>Prior to 2.3.11, <directive>NameVirtualHost</directive> was required\nto instruct the server that a particular IP address and port combination\nwas usable as a name-based virtual host.  In 2.3.11 and later,\nany time an IP address and port combination is used in multiple virtual\nhosts, name-based virtual hosting is automatically enabled for that address.</p>\n\n<p>This directive currently has no effect.</p>\n</usage>\n\n<seealso><a href=\"../vhosts/\">Virtual Hosts\ndocumentation</a></seealso>\n\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Options</name>\n<description>Configures what features are available in a particular\ndirectory</description>\n<syntax>Options\n    [+|-]<var>option</var> [[+|-]<var>option</var>] ...</syntax>\n<default>Options FollowSymlinks</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>Options</override>\n<compatibility>The default was changed from All to FollowSymlinks in 2.3.11</compatibility>\n\n<usage>\n    <p>The <directive>Options</directive> directive controls which\n    server features are available in a particular directory.</p>\n\n    <p><var>option</var> can be set to <code>None</code>, in which\n    case none of the extra features are enabled, or one or more of\n    the following:</p>\n\n    <dl>\n      <dt><code>All</code></dt>\n\n      <dd>All options except for <code>MultiViews</code>.</dd>\n\n      <dt><code>ExecCGI</code></dt>\n\n      <dd>\n      Execution of CGI scripts using <module>mod_cgi</module>\n      is permitted.</dd>\n\n      <dt><code>FollowSymLinks</code></dt>\n\n      <dd>\n      The server will follow symbolic links in this directory. This is\n      the default setting.\n      <note>\n      <p>Even though the server follows the symlink it does <em>not</em>\n      change the pathname used to match against <directive type=\"section\"\n      module=\"core\">Directory</directive> sections.</p>\n\n      <p>The <code>FollowSymLinks</code> and\n      <code>SymLinksIfOwnerMatch</code> <directive\n      module=\"core\">Options</directive> work only in <directive\n      type=\"section\" module=\"core\">Directory</directive> sections or\n      <code>.htaccess</code> files.</p>\n\n      <p>Omitting this option should not be considered a security restriction,\n      since symlink testing is subject to race conditions that make it\n      circumventable.</p>\n      </note></dd>\n\n      <dt><code>Includes</code></dt>\n\n      <dd>\n      Server-side includes provided by <module>mod_include</module>\n      are permitted.</dd>\n\n      <dt><code>IncludesNOEXEC</code></dt>\n\n      <dd>\n\n      Server-side includes are permitted, but the <code>#exec\n      cmd</code> and <code>#exec cgi</code> are disabled. It is still\n      possible to <code>#include virtual</code> CGI scripts from\n      <directive module=\"mod_alias\">ScriptAlias</directive>ed\n      directories.</dd>\n\n      <dt><code>Indexes</code></dt>\n\n      <dd>\n      If a URL which maps to a directory is requested and there\n      is no <directive module=\"mod_dir\">DirectoryIndex</directive>\n      (<em>e.g.</em>, <code>index.html</code>) in that directory, then\n      <module>mod_autoindex</module> will return a formatted listing\n      of the directory.</dd>\n\n      <dt><code>MultiViews</code></dt>\n\n      <dd>\n      <a href=\"../content-negotiation.html\">Content negotiated</a>\n      \"MultiViews\" are allowed using\n      <module>mod_negotiation</module>.\n      <note><title>Note</title> <p>This option gets ignored if set\n      anywhere other than <directive module=\"core\" type=\"section\"\n      >Directory</directive>, as <module>mod_negotiation</module>\n      needs real resources to compare against and evaluate from.</p></note>\n      </dd>\n\n      <dt><code>SymLinksIfOwnerMatch</code></dt>\n\n      <dd>The server will only follow symbolic links for which the\n      target file or directory is owned by the same user id as the\n      link.\n\n      <note><title>Note</title>\n      <p>The <code>FollowSymLinks</code> and\n      <code>SymLinksIfOwnerMatch</code> <directive\n      module=\"core\">Options</directive> work only in <directive\n      type=\"section\" module=\"core\">Directory</directive> sections or\n      <code>.htaccess</code> files.</p>\n\n      <p>This option should not be considered a security restriction,\n      since symlink testing is subject to race conditions that make it\n      circumventable.</p>\n      </note> </dd>\n    </dl>\n\n    <p>Normally, if multiple <directive>Options</directive> could\n    apply to a directory, then the most specific one is used and\n    others are ignored; the options are not merged. (See <a\n    href=\"../sections.html#merging\">how sections are merged</a>.)\n    However if <em>all</em> the options on the\n    <directive>Options</directive> directive are preceded by a\n    <code>+</code> or <code>-</code> symbol, the options are\n    merged. Any options preceded by a <code>+</code> are added to the\n    options currently in force, and any options preceded by a\n    <code>-</code> are removed from the options currently in\n    force. </p>\n\n    <note><title>Note</title>\n    <p>Mixing <directive>Options</directive> with a <code>+</code> or\n    <code>-</code> with those without is not valid syntax and will be\n    rejected during server startup by the syntax check with an abort.</p>\n    </note>\n\n    <p>For example, without any <code>+</code> and <code>-</code> symbols:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/web/docs\"&gt;\n  Options Indexes FollowSymLinks\n&lt;/Directory&gt;\n\n&lt;Directory \"/web/docs/spec\"&gt;\n  Options Includes\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>then only <code>Includes</code> will be set for the\n    <code>/web/docs/spec</code> directory. However if the second\n    <directive>Options</directive> directive uses the <code>+</code> and\n    <code>-</code> symbols:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/web/docs\"&gt;\n  Options Indexes FollowSymLinks\n&lt;/Directory&gt;\n\n&lt;Directory \"/web/docs/spec\"&gt;\n  Options +Includes -Indexes\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>then the options <code>FollowSymLinks</code> and\n    <code>Includes</code> are set for the <code>/web/docs/spec</code>\n    directory.</p>\n\n    <note><title>Note</title>\n      <p>Using <code>-IncludesNOEXEC</code> or\n      <code>-Includes</code> disables server-side includes completely\n      regardless of the previous setting.</p>\n    </note>\n\n    <p>The default in the absence of any other settings is\n    <code>FollowSymlinks</code>.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Protocol</name>\n<description>Protocol for a listening socket</description>\n<syntax>Protocol <var>protocol</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n<compatibility>Available in Apache 2.1.5 and later.\nOn Windows, from Apache 2.3.3 and later.</compatibility>\n\n<usage>\n    <p>This directive specifies the protocol used for a specific listening socket.\n       The protocol is used to determine which module should handle a request and\n       to apply protocol specific optimizations with the <directive>AcceptFilter</directive>\n       directive.</p>\n \n    <p>This directive not required for most\n       configurations. If not specified, <code>https</code> is the default for\n       port 443 and <code>http</code> the default for all other ports.  The\n       protocol is used to determine which module should handle a request, and\n       to apply protocol specific optimizations with the\n       <directive module=\"core\">AcceptFilter</directive> directive.</p>\n\n    <p>For example, if you are running <code>https</code> on a non-standard port,\n       specify the protocol explicitly:</p>\n\n    <highlight language=\"config\">\nProtocol https\n    </highlight>\n\n    <p>You can also specify the protocol using the <directive module=\"mpm_common\">Listen</directive> directive.</p>\n</usage>\n<seealso><directive module=\"core\">AcceptFilter</directive></seealso>\n<seealso><directive module=\"mpm_common\">Listen</directive></seealso>\n</directivesynopsis>\n\n\n<directivesynopsis>\n    <name>Protocols</name>\n    <description>Protocols available for a server/virtual host</description>\n    <syntax>Protocols <var>protocol</var> ...</syntax>\n    <default>Protocols http/1.1</default>\n    <contextlist><context>server config</context><context>virtual host</context></contextlist>\n    <compatibility>Only available from Apache 2.4.17 and later.</compatibility>\n    \n    <usage>\n        <p>This directive specifies the list of protocols supported for a\n            server/virtual host. The list determines the allowed protocols\n            a client may negotiate for this server/host.</p>\n        \n        <p>You need to set protocols if you want to extend the available\n            protocols for a server/host. By default, only the http/1.1 protocol\n            (which includes the compatibility with 1.0 and 0.9 clients) is\n            allowed.</p>\n        \n        <p>For example, if you want to support HTTP/2 for a server with TLS, \n            specify:</p>\n        \n        <highlight language=\"config\">\nProtocols h2 http/1.1\n        </highlight>\n\n        <p>Valid protocols are <code>http/1.1</code> for http and https connections,\n            <code>h2</code> on https connections and <code>h2c</code> for http\n            connections. Modules may enable more protocols.</p>\n        \n        <p>It is safe to specify protocols that are unavailable/disabled. Such\n        protocol names will simply be ignored.</p>\n        \n        <p>Protocols specified in base servers are inherited for virtual hosts \n            only if the virtual host has no own Protocols directive. Or, the other\n            way around, Protocols directives in virtual hosts replace any\n            such directive in the base server.\n        </p>\n\n    </usage>\n    <seealso><directive module=\"core\">ProtocolsHonorOrder</directive></seealso>\n</directivesynopsis>\n\n\n<directivesynopsis>\n    <name>ProtocolsHonorOrder</name>\n    <description>Determines if order of Protocols determines precedence during negotiation</description>\n    <syntax>ProtocolsHonorOrder On|Off</syntax>\n    <default>ProtocolsHonorOrder On</default>\n    <contextlist><context>server config</context><context>virtual host</context></contextlist>\n    <compatibility>Only available from Apache 2.4.17 and later.</compatibility>\n    \n    <usage>\n        <p>This directive specifies if the server should honor the order in which\n        the <directive>Protocols</directive> directive lists protocols.</p>\n        \n        <p>If configured Off, the client supplied list order of protocols has \n            precedence over the order in the server configuration.</p>\n        \n        <p>With <directive>ProtocolsHonorOrder</directive> set to <code>on</code> \n            (default), the client ordering does not matter and only the ordering \n            in the server settings influences the outcome of the protocol \n            negotiation.</p>\n        \n    </usage>\n    <seealso><directive module=\"core\">Protocols</directive></seealso>\n</directivesynopsis>\n\n\n<directivesynopsis>\n<name>ReadBufferSize</name>\n<description>Size of the buffers used to read data</description>\n<syntax>ReadBufferSize <var>bytes</var></syntax>\n<default>ReadBufferSize 8192</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context></contextlist>\n<compatibility>2.4.27 and later</compatibility>\n\n<usage>\n    <p>This directive allows to configure the size (in bytes) of the memory\n    buffer used to read data from the network or files.</p>\n\n    <p>A larger buffer can increase peformances with larger data, but consumes\n    more memory per connection. The minimum configurable size is\n    <var>1024</var>.</p>\n</usage>\n</directivesynopsis>\n \n\n<directivesynopsis>\n    <name>RegexDefaultOptions</name>\n    <description>Allow to configure global/default options for regexes</description>\n    <syntax>RegexDefaultOptions [none] [+|-]<var>option</var> [[+|-]<var>option</var>] ...</syntax>\n    <default>RegexDefaultOptions DOTALL DOLLAR_ENDONLY</default>\n    <contextlist><context>server config</context></contextlist>\n    <compatibility>Only available from Apache 2.4.30 and later.</compatibility>\n    \n    <usage>\n        <p>This directive adds some default behavior to ANY regular expression\n        used afterwards.</p>\n\n        <p>Any option preceded by a '+' is added to the already set options.<br />\n        Any option preceded by a '-' is removed from the already set options.<br />\n        Any option without a '+' or a '-' will be set, removing any other\n        already set option.<br />\n        The <code>none</code> keyword resets any already set options.</p>\n\n        <p><var>option</var> can be:</p>\n        <dl>\n            <dt><code>ICASE</code></dt>\n            <dd>Use a case-insensitive match.</dd>\n\n            <dt><code>EXTENDED</code></dt>\n            <dd>Perl's /x flag, ignore (unescaped-)spaces and comments in the pattern.</dd>\n\n            <dt><code>DOTALL</code></dt>\n            <dd>Perl's /s flag, '.' matches newline characters.</dd>\n\n            <dt><code>DOLLAR_ENDONLY</code></dt>\n            <dd>'$' matches at end of subject string only.</dd>\n        </dl>\n        <highlight language=\"config\">\n# Add the ICASE option for all regexes by default\nRegexDefaultOptions +ICASE\n...\n# Remove the default DOLLAR_ENDONLY option, but keep any other one\nRegexDefaultOptions -DOLLAR_ENDONLY\n...\n# Set the DOTALL option only, resetting any other one\nRegexDefaultOptions DOTALL\n...\n# Reset all defined options\nRegexDefaultOptions none\n...\n        </highlight>\n    </usage>\n</directivesynopsis>\n\n\n<directivesynopsis>\n<name>RLimitCPU</name>\n<description>Limits the CPU consumption of processes launched\nby Apache httpd children</description>\n<syntax>RLimitCPU <var>seconds</var>|max [<var>seconds</var>|max]</syntax>\n<default>Unset; uses operating system defaults</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context></contextlist>\n<override>All</override>\n\n<usage>\n    <p>Takes 1 or 2 parameters. The first parameter sets the soft\n    resource limit for all processes and the second parameter sets\n    the maximum resource limit. Either parameter can be a number,\n    or <code>max</code> to indicate to the server that the limit should\n    be set to the maximum allowed by the operating system\n    configuration. Raising the maximum resource limit requires that\n    the server is running as <code>root</code> or in the initial startup\n    phase.</p>\n\n    <p>This applies to processes forked from Apache httpd children\n    servicing requests, not the Apache httpd children themselves. This\n    includes CGI scripts and SSI exec commands, but not any\n    processes forked from the Apache httpd parent, such as piped\n    logs.</p>\n\n    <p>CPU resource limits are expressed in seconds per\n    process.</p>\n</usage>\n<seealso><directive module=\"core\">RLimitMEM</directive></seealso>\n<seealso><directive module=\"core\">RLimitNPROC</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>RLimitMEM</name>\n<description>Limits the memory consumption of processes launched\nby Apache httpd children</description>\n<syntax>RLimitMEM <var>bytes</var>|max [<var>bytes</var>|max]</syntax>\n<default>Unset; uses operating system defaults</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context></contextlist>\n<override>All</override>\n\n<usage>\n    <p>Takes 1 or 2 parameters. The first parameter sets the soft\n    resource limit for all processes and the second parameter sets\n    the maximum resource limit. Either parameter can be a number,\n    or <code>max</code> to indicate to the server that the limit should\n    be set to the maximum allowed by the operating system\n    configuration. Raising the maximum resource limit requires that\n    the server is running as <code>root</code> or in the initial startup\n    phase.</p>\n\n    <p>This applies to processes forked from Apache httpd children\n    servicing requests, not the Apache httpd children themselves. This\n    includes CGI scripts and SSI exec commands, but not any\n    processes forked from the Apache httpd parent, such as piped\n    logs.</p>\n\n    <p>Memory resource limits are expressed in bytes per\n    process.</p>\n</usage>\n<seealso><directive module=\"core\">RLimitCPU</directive></seealso>\n<seealso><directive module=\"core\">RLimitNPROC</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>RLimitNPROC</name>\n<description>Limits the number of processes that can be launched by\nprocesses launched by Apache httpd children</description>\n<syntax>RLimitNPROC <var>number</var>|max [<var>number</var>|max]</syntax>\n<default>Unset; uses operating system defaults</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context></contextlist>\n<override>All</override>\n\n<usage>\n    <p>Takes 1 or 2 parameters. The first parameter sets the soft\n    resource limit for all processes, and the second parameter sets\n    the maximum resource limit. Either parameter can be a number,\n    or <code>max</code> to indicate to the server that the limit\n    should be set to the maximum allowed by the operating system\n    configuration. Raising the maximum resource limit requires that\n    the server is running as <code>root</code> or in the initial startup\n    phase.</p>\n\n    <p>This applies to processes forked from Apache httpd children\n    servicing requests, not the Apache httpd children themselves. This\n    includes CGI scripts and SSI exec commands, but not any\n    processes forked from the Apache httpd parent, such as piped\n    logs.</p>\n\n    <p>Process limits control the number of processes per user.</p>\n\n    <note><title>Note</title>\n      <p>If CGI processes are <strong>not</strong> running\n      under user ids other than the web server user id, this directive\n      will limit the number of processes that the server itself can\n      create. Evidence of this situation will be indicated by\n      <strong><code>cannot fork</code></strong> messages in the\n      <code>error_log</code>.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">RLimitMEM</directive></seealso>\n<seealso><directive module=\"core\">RLimitCPU</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ScriptInterpreterSource</name>\n<description>Technique for locating the interpreter for CGI\nscripts</description>\n<syntax>ScriptInterpreterSource Registry|Registry-Strict|Script</syntax>\n<default>ScriptInterpreterSource Script</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context></contextlist>\n<override>FileInfo</override>\n<compatibility>Win32 only.</compatibility>\n\n<usage>\n    <p>This directive is used to control how Apache httpd finds the\n    interpreter used to run CGI scripts. The default setting is\n    <code>Script</code>. This causes Apache httpd to use the interpreter pointed to\n    by the shebang line (first line, starting with <code>#!</code>) in the\n    script. On Win32 systems this line usually looks like:</p>\n\n    <highlight language=\"perl\">\n#!C:/Perl/bin/perl.exe\n    </highlight>\n\n    <p>or, if <code>perl</code> is in the <code>PATH</code>, simply:</p>\n\n    <highlight language=\"perl\">\n#!perl\n    </highlight>\n\n    <p>Setting <code>ScriptInterpreterSource Registry</code> will\n    cause the Windows Registry tree <code>HKEY_CLASSES_ROOT</code> to be\n    searched using the script file extension (e.g., <code>.pl</code>) as a\n    search key. The command defined by the registry subkey\n    <code>Shell\\ExecCGI\\Command</code> or, if it does not exist, by the subkey\n    <code>Shell\\Open\\Command</code> is used to open the script file. If the\n    registry keys cannot be found, Apache httpd falls back to the behavior of the\n    <code>Script</code> option.</p>\n\n    <note type=\"warning\"><title>Security</title>\n    <p>Be careful when using <code>ScriptInterpreterSource\n    Registry</code> with <directive\n    module=\"mod_alias\">ScriptAlias</directive>'ed directories, because\n    Apache httpd will try to execute <strong>every</strong> file within this\n    directory. The <code>Registry</code> setting may cause undesired\n    program calls on files which are typically not executed. For\n    example, the default open command on <code>.htm</code> files on\n    most Windows systems will execute Microsoft Internet Explorer, so\n    any HTTP request for an <code>.htm</code> file existing within the\n    script directory would start the browser in the background on the\n    server. This is a good way to crash your system within a minute or\n    so.</p>\n    </note>\n\n    <p>The option <code>Registry-Strict</code>\n    does the same thing as <code>Registry</code> but uses only the\n    subkey <code>Shell\\ExecCGI\\Command</code>. The\n    <code>ExecCGI</code> key is not a common one. It must be\n    configured manually in the windows registry and hence prevents\n    accidental program calls on your system.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>SeeRequestTail</name>\n<description>Determine if mod_status displays the first 63 characters\nof a request or the last 63, assuming the request itself is greater than\n63 chars.</description>\n<syntax>SeeRequestTail On|Off</syntax>\n<default>SeeRequestTail Off</default>\n<contextlist><context>server config</context></contextlist>\n<compatibility>Available in Apache httpd 2.2.7 and later.</compatibility>\n\n<usage>\n    <p>mod_status with <code>ExtendedStatus On</code>\n    displays the actual request being handled.\n    For historical purposes, only 63 characters of the request\n    are actually stored for display purposes. This directive\n    controls whether the 1st 63 characters are stored (the previous\n    behavior and the default) or if the last 63 characters are. This\n    is only applicable, of course, if the length of the request is\n    64 characters or greater.</p>\n\n    <p>If Apache httpd is handling <code\n    >GET&nbsp;/disk1/storage/apache/htdocs/images/imagestore1/food/apples.jpg&nbsp;HTTP/1.1</code\n    > mod_status displays as follows:\n    </p>\n\n    <table border=\"1\">\n      <tr>\n        <th>Off (default)</th>\n        <td>GET&nbsp;/disk1/storage/apache/htdocs/images/imagestore1/food/apples</td>\n      </tr>\n      <tr>\n        <th>On</th>\n        <td>orage/apache/htdocs/images/imagestore1/food/apples.jpg&nbsp;HTTP/1.1</td>\n      </tr>\n    </table>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerAdmin</name>\n<description>Email address that the server includes in error\nmessages sent to the client</description>\n<syntax>ServerAdmin <var>email-address</var>|<var>URL</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive>ServerAdmin</directive> sets the contact address\n    that the server includes in any error messages it returns to the\n    client. If the <code>httpd</code> doesn't recognize the supplied argument\n    as an URL, it\n    assumes, that it's an <var>email-address</var> and prepends it with\n    <code>mailto:</code> in hyperlink targets. However, it's recommended to\n    actually use an email address, since there are a lot of CGI scripts that\n    make that assumption. If you want to use an URL, it should point to another\n    server under your control. Otherwise users may not be able to contact you in\n    case of errors.</p>\n\n    <p>It may be worth setting up a dedicated address for this, e.g.</p>\n\n    <highlight language=\"config\">\nServerAdmin www-admin@foo.example.com\n    </highlight>\n    <p>as users do not always mention that they are talking about the\n    server!</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerAlias</name>\n<description>Alternate names for a host used when matching requests\nto name-virtual hosts</description>\n<syntax>ServerAlias <var>hostname</var> [<var>hostname</var>] ...</syntax>\n<contextlist><context>virtual host</context></contextlist>\n\n<usage>\n    <p>The <directive>ServerAlias</directive> directive sets the\n    alternate names for a host, for use with <a\n    href=\"../vhosts/name-based.html\">name-based virtual hosts</a>. The\n    <directive>ServerAlias</directive> may include wildcards, if appropriate.</p>\n\n    <highlight language=\"config\">\n&lt;VirtualHost *:80&gt;\n  ServerName server.example.com\n  ServerAlias server server2.example.com server2\n  ServerAlias *.example.com\n  UseCanonicalName Off\n  # ...\n&lt;/VirtualHost&gt;\n    </highlight>\n\n    <p>Name-based virtual hosts for the best-matching set of  <directive\n    type=\"section\" module=\"core\">virtualhost</directive>s are processed\n    in the order they appear in the configuration.  The first matching <directive\n    module=\"core\">ServerName</directive> or <directive module=\"core\"\n    >ServerAlias</directive> is used, with no different precedence for wildcards\n    (nor for ServerName vs. ServerAlias).  </p>\n\n    <p>The complete list of names in the <directive type=\"section\" module=\"core\"\n    >VirtualHost</directive>\n    directive are treated just like a (non wildcard)\n    <directive>ServerAlias</directive>.</p>\n\n</usage>\n<seealso><directive module=\"core\">UseCanonicalName</directive></seealso>\n<seealso><a href=\"../vhosts/\">Apache HTTP Server Virtual Host documentation</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerName</name>\n<description>Hostname and port that the server uses to identify\nitself</description>\n<syntax>ServerName [<var>scheme</var>://]<var>domain-name</var>|<var>ip-address</var>[:<var>port</var>]</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive>ServerName</directive> directive sets the\n    request scheme, hostname and port that the server uses to identify itself.\n    </p>\n\n    <p><directive>ServerName</directive> is used (possibly\n    in conjunction with <directive module=\"core\">ServerAlias</directive>) to uniquely\n    identify a virtual host, when using <a\n    href=\"../vhosts/name-based.html\">name-based virtual hosts</a>.</p>\n\n    <p>Additionally, this is used when\n    creating self-referential redirection URLs when \n    <directive module=\"core\">UseCanonicalName</directive> is set to a non-default\n    value.</p>\n\n    <p>For example, if the name of the\n    machine hosting the web server is <code>simple.example.com</code>,\n    but the machine also has the DNS alias <code>www.example.com</code>\n    and you wish the web server to be so identified, the following\n    directive should be used:</p>\n\n    <highlight language=\"config\">\nServerName www.example.com\n    </highlight>\n\n    <p>The <directive>ServerName</directive> directive\n    may appear anywhere within the definition of a server. However,\n    each appearance overrides the previous appearance (within that\n    server).</p>\n\n    <p>If no <directive>ServerName</directive> is specified, the\n    server attempts to deduce the client visible hostname by first asking \n    the operating system for the system hostname, and if that fails, \n    performing a reverse lookup on an IP address present on the system.</p>\n\n    <p>If no port is specified in the\n    <directive>ServerName</directive>, then the server will use the\n    port from the incoming request. For optimal reliability and\n    predictability, you should specify an explicit hostname and port\n    using the <directive>ServerName</directive> directive.</p>\n\n    <p>If you are using <a\n    href=\"../vhosts/name-based.html\">name-based virtual hosts</a>,\n    the <directive>ServerName</directive> inside a\n    <directive type=\"section\" module=\"core\">VirtualHost</directive>\n    section specifies what hostname must appear in the request's\n    <code>Host:</code> header to match this virtual host.</p>\n\n    <p>Sometimes, the server runs behind a device that processes SSL,\n    such as a reverse proxy, load balancer or SSL offload\n    appliance. When this is the case, specify the\n    <code>https://</code> scheme and the port number to which the\n    clients connect in the <directive>ServerName</directive> directive\n    to make sure that the server generates the correct\n    self-referential URLs.\n    </p>\n\n    <p>See the description of the\n    <directive module=\"core\">UseCanonicalName</directive> and\n    <directive module=\"core\">UseCanonicalPhysicalPort</directive> directives for\n    settings which determine whether self-referential URLs (e.g., by the\n    <module>mod_dir</module> module) will refer to the\n    specified port, or to the port number given in the client's request.\n    </p>\n\n    <note type=\"warning\">\n    <p>Failure to set <directive>ServerName</directive> to a name that\n    your server can resolve to an IP address will result in a startup\n    warning. <code>httpd</code> will then use whatever hostname it can\n    determine, using the system's <code>hostname</code> command. This\n    will almost never be the hostname you actually want.</p>\n    <example>\n    httpd: Could not reliably determine the server's fully qualified domain name, using rocinante.local for ServerName\n    </example>\n    </note>\n\n</usage>\n\n<seealso><a href=\"../dns-caveats.html\">Issues Regarding DNS and\n    Apache HTTP Server</a></seealso>\n<seealso><a href=\"../vhosts/\">Apache HTTP Server virtual host\n    documentation</a></seealso>\n<seealso><directive module=\"core\">UseCanonicalName</directive></seealso>\n<seealso><directive module=\"core\">UseCanonicalPhysicalPort</directive></seealso>\n<seealso><directive module=\"core\">ServerAlias</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerPath</name>\n<description>Legacy URL pathname for a name-based virtual host that\nis accessed by an incompatible browser</description>\n<syntax>ServerPath <var>URL-path</var></syntax>\n<contextlist><context>virtual host</context></contextlist>\n\n<usage>\n    <p>The <directive>ServerPath</directive> directive sets the legacy\n    URL pathname for a host, for use with <a\n    href=\"../vhosts/\">name-based virtual hosts</a>.</p>\n</usage>\n<seealso><a href=\"../vhosts/\">Apache HTTP Server Virtual Host documentation</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerRoot</name>\n<description>Base directory for the server installation</description>\n<syntax>ServerRoot <var>directory-path</var></syntax>\n<default>ServerRoot /usr/local/apache</default>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p>The <directive>ServerRoot</directive> directive sets the\n    directory in which the server lives. Typically it will contain the\n    subdirectories <code>conf/</code> and <code>logs/</code>. Relative\n    paths in other configuration directives (such as <directive\n    module=\"core\">Include</directive> or <directive\n    module=\"mod_so\">LoadModule</directive>, for example) are taken as\n    relative to this directory.</p>\n\n    <highlight language=\"config\">\nServerRoot \"/home/httpd\"\n    </highlight>\n\n    <p>The default location of <directive>ServerRoot</directive> may be\n    modified by using the <code>--prefix</code> argument to\n    <a href=\"../programs/configure.html\"><code>configure</code></a>, and\n    most third-party distributions of the server have a different\n    default location from the one listed above.</p>\n\n</usage>\n<seealso><a href=\"../invoking.html\">the <code>-d</code>\n    option to <code>httpd</code></a></seealso>\n<seealso><a href=\"../misc/security_tips.html#serverroot\">the\n    security tips</a> for information on how to properly set\n    permissions on the <directive>ServerRoot</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerSignature</name>\n<description>Configures the footer on server-generated documents</description>\n<syntax>ServerSignature On|Off|EMail</syntax>\n<default>ServerSignature Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n\n<usage>\n    <p>The <directive>ServerSignature</directive> directive allows the\n    configuration of a trailing footer line under server-generated\n    documents (error messages, <module>mod_proxy</module> ftp directory\n    listings, <module>mod_info</module> output, ...). The reason why you\n    would want to enable such a footer line is that in a chain of proxies,\n    the user often has no possibility to tell which of the chained servers\n    actually produced a returned error message.</p>\n\n    <p>The <code>Off</code>\n    setting, which is the default, suppresses the footer line.\n    The <code>On</code> setting simply adds a line with the\n    server version number and <directive\n    module=\"core\">ServerName</directive> of the serving virtual host,\n    and the <code>EMail</code> setting additionally creates a\n    \"mailto:\" reference to the <directive\n    module=\"core\">ServerAdmin</directive> of the referenced\n    document.</p>\n\n    <p>The details of the server version number\n    presented are controlled by the <directive\n    module=\"core\">ServerTokens</directive> directive.</p>\n</usage>\n<seealso><directive module=\"core\">ServerTokens</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerTokens</name>\n<description>Configures the <code>Server</code> HTTP response\nheader</description>\n<syntax>ServerTokens Major|Minor|Min[imal]|Prod[uctOnly]|OS|Full</syntax>\n<default>ServerTokens Full</default>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p>This directive controls whether <code>Server</code> response\n    header field which is sent back to clients includes a\n    description of the generic OS-type of the server as well as\n    information about compiled-in modules.</p>\n\n    <dl>\n      <dt><code>ServerTokens Full</code> (or not specified)</dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server: Apache/2.4.2\n      (Unix) PHP/4.2.2 MyMod/1.2</code></dd>\n\n      <dt><code>ServerTokens Prod[uctOnly]</code></dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server:\n      Apache</code></dd>\n\n      <dt><code>ServerTokens Major</code></dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server:\n      Apache/2</code></dd>\n\n      <dt><code>ServerTokens Minor</code></dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server:\n      Apache/2.4</code></dd>\n\n      <dt><code>ServerTokens Min[imal]</code></dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server:\n      Apache/2.4.2</code></dd>\n\n      <dt><code>ServerTokens OS</code></dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server: Apache/2.4.2\n      (Unix)</code></dd>\n\n    </dl>\n\n    <p>This setting applies to the entire server, and cannot be\n    enabled or disabled on a virtualhost-by-virtualhost basis.</p>\n\n    <p>This directive also controls the\n    information presented by the <directive\n    module=\"core\">ServerSignature</directive> directive.</p>\n\n    <note>Setting <directive>ServerTokens</directive> to less than\n    <code>minimal</code> is not recommended because it makes it more\n    difficult to debug interoperational problems. Also note that\n    disabling the Server: header does nothing at all to make your\n    server more secure. The idea of \"security through obscurity\"\n    is a myth and leads to a false sense of safety.</note>\n\n</usage>\n<seealso><directive module=\"core\">ServerSignature</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>SetHandler</name>\n<description>Forces all matching files to be processed by a\nhandler</description>\n<syntax>SetHandler <var>handler-name</var>|none|<var>expression</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>expression argument 2.4.19 and later</compatibility>\n\n<usage>\n    <p>When placed into an <code>.htaccess</code> file or a\n    <directive type=\"section\" module=\"core\">Directory</directive> or\n    <directive type=\"section\" module=\"core\">Location</directive>\n    section, this directive forces all matching files to be parsed\n    through the <a href=\"../handler.html\">handler</a> given by\n    <var>handler-name</var>. For example, if you had a directory you\n    wanted to be parsed entirely as imagemap rule files, regardless\n    of extension, you might put the following into an\n    <code>.htaccess</code> file in that directory:</p>\n\n    <highlight language=\"config\">\nSetHandler imap-file\n    </highlight>\n\n    <p>Another example: if you wanted to have the server display a\n    status report whenever a URL of\n    <code>http://servername/status</code> was called, you might put\n    the following into <code>httpd.conf</code>:</p>\n\n    <highlight language=\"config\">\n&lt;Location \"/status\"&gt;\n  SetHandler server-status\n&lt;/Location&gt;\n    </highlight>\n\n    <p>You could also use this directive to configure a particular\n    handler for files with a particular file extension. For example:</p>\n\n    <highlight language=\"config\">\n&lt;FilesMatch \"\\.php$\"&gt;\n    SetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;\n    </highlight>\n\n    <p>String-valued expressions can be used to reference per-request \n    variables, including backreferences to named regular expressions:</p>\n\n    <highlight language=\"config\">\n&lt;LocationMatch ^/app/(?&lt;sub&gt;[^/]+)/&gt;\n     SetHandler \"proxy:unix:/var/run/app_%{env:MATCH_sub}.sock|fcgi://localhost:8080\"\n&lt;/LocationMatch&gt;\n    </highlight>\n\n    <p>You can override an earlier defined <directive>SetHandler</directive>\n    directive by using the value <code>None</code>.</p>\n\n    <note><title>Note</title>\n    <p>Because <directive>SetHandler</directive> overrides default handlers,\n    normal behavior such as handling of URLs ending in a slash (/) as\n    directories or index files is suppressed.</p></note>\n</usage>\n\n<seealso><directive module=\"mod_mime\">AddHandler</directive></seealso>\n\n</directivesynopsis>\n\n<directivesynopsis>\n<name>SetInputFilter</name>\n<description>Sets the filters that will process client requests and POST\ninput</description>\n<syntax>SetInputFilter <var>filter</var>[;<var>filter</var>...]</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>The <directive>SetInputFilter</directive> directive sets the\n    filter or filters which will process client requests and POST\n    input when they are received by the server. This is in addition to\n    any filters defined elsewhere, including the\n    <directive module=\"mod_mime\">AddInputFilter</directive>\n    directive.</p>\n\n    <p>If more than one filter is specified, they must be separated\n    by semicolons in the order in which they should process the\n    content.</p>\n</usage>\n<seealso><a href=\"../filter.html\">Filters</a> documentation</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>SetOutputFilter</name>\n<description>Sets the filters that will process responses from the\nserver</description>\n<syntax>SetOutputFilter <var>filter</var>[;<var>filter</var>...]</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>The <directive>SetOutputFilter</directive> directive sets the filters\n    which will process responses from the server before they are\n    sent to the client. This is in addition to any filters defined\n    elsewhere, including the\n    <directive module=\"mod_mime\">AddOutputFilter</directive>\n    directive.</p>\n\n    <p>For example, the following configuration will process all files\n    in the <code>/www/data/</code> directory for server-side\n    includes.</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/www/data/\"&gt;\n  SetOutputFilter INCLUDES\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>If more than one filter is specified, they must be separated\n    by semicolons in the order in which they should process the\n    content.</p>\n</usage>\n<seealso><a href=\"../filter.html\">Filters</a> documentation</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>TimeOut</name>\n<description>Amount of time the server will wait for\ncertain events before failing a request</description>\n<syntax>TimeOut <var>seconds</var></syntax>\n<default>TimeOut 60</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n\n<usage>\n    <p>The <directive>TimeOut</directive> directive defines the length\n    of time Apache httpd will wait for I/O in various circumstances:</p>\n\n    <ul>\n      <li><p>When reading data from the client, the length of time to\n      wait for a TCP packet to arrive if the read buffer is\n      empty.</p>\n      <p> For initial data on a new connection, this directive doesn't\n      take effect until after any configured <directive module=\"core\">\n      AcceptFilter</directive> has passed the new connection to the server.</p>\n      </li>\n\n      <li>When writing data to the client, the length of time to wait\n      for an acknowledgement of a packet if the send buffer is\n      full.</li>\n\n      <li>In <module>mod_cgi</module> and <module>mod_cgid</module>,\n      the length of time to wait for any individual block of output\n      from a CGI script.</li>\n\n      <li>In <module>mod_ext_filter</module>, the length of time to\n      wait for output from a filtering process.</li>\n\n      <li>In <module>mod_proxy</module>, the default timeout value if\n      <directive module=\"mod_proxy\">ProxyTimeout</directive> is not\n      configured.</li>\n    </ul>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>TraceEnable</name>\n<description>Determines the behavior on <code>TRACE</code> requests</description>\n<syntax>TraceEnable <var>[on|off|extended]</var></syntax>\n<default>TraceEnable on</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n\n<usage>\n    <p>This directive overrides the behavior of <code>TRACE</code> for both\n    the core server and <module>mod_proxy</module>.  The default\n    <code>TraceEnable on</code> permits <code>TRACE</code> requests per\n    RFC 2616, which disallows any request body to accompany the request.\n    <code>TraceEnable off</code> causes the core server and\n    <module>mod_proxy</module> to return a <code>405</code> (Method not\n    allowed) error to the client.</p>\n\n    <p>Finally, for testing and diagnostic purposes only, request\n    bodies may be allowed using the non-compliant <code>TraceEnable\n    extended</code> directive.  The core (as an origin server) will\n    restrict the request body to 64Kb (plus 8Kb for chunk headers if\n    <code>Transfer-Encoding: chunked</code> is used).  The core will\n    reflect the full headers and all chunk headers with the response\n    body.  As a proxy server, the request body is not restricted to 64Kb.</p>\n\n    <note><title>Note</title>\n\n    <p>Despite claims to the contrary, enabling the <code>TRACE</code>\n    method does not expose any security vulnerability in Apache httpd.\n    The <code>TRACE</code> method is defined by the HTTP/1.1\n    specification and implementations are expected to support it.</p>\n    \n    </note>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>UnDefine</name>\n<description>Undefine the existence of a variable</description>\n<syntax>UnDefine <var>parameter-name</var></syntax>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p>Undoes the effect of a <directive module=\"core\">Define</directive> or\n    of passing a <code>-D</code> argument to <program>httpd</program>.</p>\n    <p>This directive can be used to toggle the use of <directive module=\"core\"\n    type=\"section\">IfDefine</directive> sections without needing to alter\n    <code>-D</code> arguments in any startup scripts.</p>\n\n    <p>Variable names may not contain colon \":\" characters, to avoid clashes\n    with <directive module=\"mod_rewrite\">RewriteMap</directive>'s syntax.</p>\n\n    <note><title>Virtual Host scope and pitfalls</title>\n      <p>While this directive is supported in virtual host context,\n         the changes it makes are visible to any later configuration\n         directives, beyond any enclosing virtual host.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">Define</directive></seealso>\n<seealso><directive module=\"core\">IfDefine</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>UseCanonicalName</name>\n<description>Configures how the server determines its own name and\nport</description>\n<syntax>UseCanonicalName On|Off|DNS</syntax>\n<default>UseCanonicalName Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context></contextlist>\n\n<usage>\n    <p>In many situations Apache httpd must construct a <em>self-referential</em>\n    URL -- that is, a URL that refers back to the same server. With\n    <code>UseCanonicalName On</code> Apache httpd will use the hostname and port\n    specified in the <directive module=\"core\">ServerName</directive>\n    directive to construct the canonical name for the server. This name\n    is used in all self-referential URLs, and for the values of\n    <code>SERVER_NAME</code> and <code>SERVER_PORT</code> in CGIs.</p>\n\n    <p>With <code>UseCanonicalName Off</code> Apache httpd will form\n    self-referential URLs using the hostname and port supplied by\n    the client if any are supplied (otherwise it will use the\n    canonical name, as defined above). These values are the same\n    that are used to implement <a\n    href=\"../vhosts/name-based.html\">name-based virtual hosts</a>\n    and are available with the same clients. The CGI variables\n    <code>SERVER_NAME</code> and <code>SERVER_PORT</code> will be\n    constructed from the client supplied values as well.</p>\n\n    <p>An example where this may be useful is on an intranet server\n    where you have users connecting to the machine using short\n    names such as <code>www</code>. You'll notice that if the users\n    type a shortname and a URL which is a directory, such as\n    <code>http://www/splat</code>, <em>without the trailing\n    slash</em>, then Apache httpd will redirect them to\n    <code>http://www.example.com/splat/</code>. If you have\n    authentication enabled, this will cause the user to have to\n    authenticate twice (once for <code>www</code> and once again\n    for <code>www.example.com</code> -- see <a\n    href=\"http://wiki.apache.org/httpd/FAQ#Why_does_Apache_ask_for_my_password_twice_before_serving_a_file.3F\">\n    the FAQ on this subject for more information</a>). But if\n    <directive>UseCanonicalName</directive> is set <code>Off</code>, then\n    Apache httpd will redirect to <code>http://www/splat/</code>.</p>\n\n    <p>There is a third option, <code>UseCanonicalName DNS</code>,\n    which is intended for use with mass IP-based virtual hosting to\n    support ancient clients that do not provide a\n    <code>Host:</code> header. With this option, Apache httpd does a\n    reverse DNS lookup on the server IP address that the client\n    connected to in order to work out self-referential URLs.</p>\n\n    <note type=\"warning\"><title>Warning</title>\n    <p>If CGIs make assumptions about the values of <code>SERVER_NAME</code>,\n    they may be broken by this option. The client is essentially free\n    to give whatever value they want as a hostname. But if the CGI is\n    only using <code>SERVER_NAME</code> to construct self-referential URLs,\n    then it should be just fine.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">UseCanonicalPhysicalPort</directive></seealso>\n<seealso><directive module=\"core\">ServerName</directive></seealso>\n<seealso><directive module=\"mpm_common\">Listen</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>UseCanonicalPhysicalPort</name>\n<description>Configures how the server determines its own port</description>\n<syntax>UseCanonicalPhysicalPort On|Off</syntax>\n<default>UseCanonicalPhysicalPort Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context></contextlist>\n\n<usage>\n    <p>In many situations Apache httpd must construct a <em>self-referential</em>\n    URL -- that is, a URL that refers back to the same server. With\n    <code>UseCanonicalPhysicalPort On</code>, Apache httpd will, when\n    constructing the canonical port for the server to honor\n    the <directive module=\"core\">UseCanonicalName</directive> directive,\n    provide the actual physical port number being used by this request\n    as a potential port. With <code>UseCanonicalPhysicalPort Off</code>,\n    Apache httpd will not ever use the actual physical port number, instead\n    relying on all configured information to construct a valid port number.</p>\n\n    <note><title>Note</title>\n    <p>The ordering of the lookup when the physical port is used is as\n    follows:</p>\n     <dl>\n     <dt><code>UseCanonicalName On</code></dt>\n     <dd>\n     <ol>\n      <li>Port provided in <directive module=\"core\">Servername</directive></li>\n      <li>Physical port</li>\n      <li>Default port</li>\n     </ol>\n     </dd>\n     <dt><code>UseCanonicalName Off | DNS</code></dt>\n     <dd>\n     <ol>\n      <li>Parsed port from <code>Host:</code> header</li>\n      <li>Physical port</li>\n      <li>Port provided in <directive module=\"core\">Servername</directive></li>\n      <li>Default port</li>\n     </ol>\n     </dd>\n     </dl>\n\n    <p>With <code>UseCanonicalPhysicalPort Off</code>, the\n    physical ports are removed from the ordering.</p>\n    </note>\n\n</usage>\n<seealso><directive module=\"core\">UseCanonicalName</directive></seealso>\n<seealso><directive module=\"core\">ServerName</directive></seealso>\n<seealso><directive module=\"mpm_common\">Listen</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>VirtualHost</name>\n<description>Contains directives that apply only to a specific\nhostname or IP address</description>\n<syntax>&lt;VirtualHost\n    <var>addr</var>[:<var>port</var>] [<var>addr</var>[:<var>port</var>]]\n    ...&gt; ... &lt;/VirtualHost&gt;</syntax>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p><directive type=\"section\">VirtualHost</directive> and\n    <code>&lt;/VirtualHost&gt;</code> are used to enclose a group of\n    directives that will apply only to a particular virtual host. Any\n    directive that is allowed in a virtual host context may be\n    used. When the server receives a request for a document on a\n    particular virtual host, it uses the configuration directives\n    enclosed in the <directive type=\"section\">VirtualHost</directive>\n    section. <var>Addr</var> can be any of the following, optionally followed by\n    a colon and a port number (or *):</p>\n\n    <ul>\n      <li>The IP address of the virtual host;</li>\n\n      <li>A fully qualified domain name for the IP address of the\n      virtual host (not recommended);</li>\n\n      <li>The character <code>*</code>, which acts as a wildcard and matches\n      any IP address.</li>\n\n      <li>The string <code>_default_</code>, which is an alias for <code>*</code></li>\n\n    </ul>\n\n    <highlight language=\"config\">\n&lt;VirtualHost 10.1.2.3:80&gt;\n  ServerAdmin webmaster@host.example.com\n  DocumentRoot \"/www/docs/host.example.com\"\n  ServerName host.example.com\n  ErrorLog \"logs/host.example.com-error_log\"\n  TransferLog \"logs/host.example.com-access_log\"\n&lt;/VirtualHost&gt;\n    </highlight>\n\n\n    <p>IPv6 addresses must be specified in square brackets because\n    the optional port number could not be determined otherwise.  An\n    IPv6 example is shown below:</p>\n\n    <highlight language=\"config\">\n&lt;VirtualHost [2001:db8::a00:20ff:fea7:ccea]:80&gt;\n  ServerAdmin webmaster@host.example.com\n  DocumentRoot \"/www/docs/host.example.com\"\n  ServerName host.example.com\n  ErrorLog \"logs/host.example.com-error_log\"\n  TransferLog \"logs/host.example.com-access_log\"\n&lt;/VirtualHost&gt;\n    </highlight>\n\n    <p>Each Virtual Host must correspond to a different IP address,\n    different port number, or a different host name for the server,\n    in the former case the server machine must be configured to\n    accept IP packets for multiple addresses. (If the machine does\n    not have multiple network interfaces, then this can be\n    accomplished with the <code>ifconfig alias</code> command -- if\n    your OS supports it).</p>\n\n    <note><title>Note</title>\n    <p>The use of <directive type=\"section\">VirtualHost</directive> does\n    <strong>not</strong> affect what addresses Apache httpd listens on. You\n    may need to ensure that Apache httpd is listening on the correct addresses\n    using <directive module=\"mpm_common\">Listen</directive>.</p>\n    </note>\n\n    <p>A <directive module=\"core\">ServerName</directive> should be\n    specified inside each <directive\n    type=\"section\">VirtualHost</directive> block. If it is absent, the\n    <directive module=\"core\">ServerName</directive> from the \"main\"\n    server configuration will be inherited.</p>\n\n    <p>When a request is received, the server first maps it to the best matching\n    <directive type=\"section\">VirtualHost</directive> based on the local\n    IP address and port combination only.  Non-wildcards have a higher\n    precedence. If no match based on IP and port occurs at all, the\n    \"main\" server configuration is used.</p>\n\n    <p>If multiple virtual hosts contain the best matching IP address and port,\n    the server selects from these virtual hosts the best match based on the\n    requested hostname.  If no matching name-based virtual host is found,\n    then the first listed virtual host that matched the IP address will be\n    used.  As a consequence, the first listed virtual host for a given IP address\n    and port combination is the default virtual host for that IP and port\n    combination.</p>\n\n    <note type=\"warning\"><title>Security</title>\n    <p>See the <a href=\"../misc/security_tips.html\">security tips</a>\n    document for details on why your security could be compromised if the\n    directory where log files are stored is writable by anyone other\n    than the user that starts the server.</p>\n    </note>\n</usage>\n<seealso><a href=\"../vhosts/\">Apache HTTP Server Virtual Host documentation</a></seealso>\n<seealso><a href=\"../dns-caveats.html\">Issues Regarding DNS and\n    Apache HTTP Server</a></seealso>\n<seealso><a href=\"../bind.html\">Setting\n    which addresses and ports Apache HTTP Server uses</a></seealso>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;\n    and &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>MergeTrailers</name>\n<description>Determines whether trailers are merged into headers</description>\n<syntax>MergeTrailers [on|off]</syntax>\n<default>MergeTrailers off</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n<compatibility>2.4.11 and later</compatibility>\n\n<usage>\n    <p>This directive controls whether HTTP trailers are copied into the\n    internal representation of HTTP headers. This merging occurs when the\n    request body has been completely consumed, long after most header\n    processing would have a chance to examine or modify request headers.</p>\n    <p>This option is provided for compatibility with releases prior to 2.4.11,\n    where trailers were always merged.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>QualifyRedirectURL</name>\n<description>Controls whether the REDIRECT_URL environment variable is\n             fully qualified</description>\n<syntax>QualifyRedirectURL On|Off</syntax>\n<default>QualifyRedirectURL Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>Directive supported in 2.4.18 and later. 2.4.17 acted\nas if 'QualifyRedirectURL On' was configured.</compatibility>\n\n<usage>\n    <p>This directive controls whether the server will ensure that the \n    REDIRECT_URL environment variable is fully qualified.  By default, \n    the variable contains the verbatim URL requested by the client, \n    such as \"/index.html\".  With <directive\n    >QualifyRedirectURL On</directive>, the same request would result in a\n    value such as \"http://www.example.com/index.html\".</p>\n    <p>Even without this directive set, when a request is issued against a \n    fully qualified URL, REDIRECT_URL will remain fully qualified.\n    </p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>RegisterHttpMethod</name>\n<description>Register non-standard HTTP methods</description>\n<syntax>RegisterHttpMethod <var>method</var> [<var>method</var> [...]]</syntax>\n<contextlist><context>server config</context></contextlist>\n<compatibility>Available in Apache HTTP Server 2.4.24 and later</compatibility>\n\n<usage>\n<p>This directive may be used to register additional HTTP methods.  This is\nnecessary if non-standard methods need to be used with directives that accept \nmethod names as parameters, or to allow particular non-standard methods to be \nused via proxy or CGI script when the server has been configured to only pass \nrecognized methods to modules.</p>\n</usage>\n<seealso><directive module=\"core\">HTTPProtocolOptions</directive></seealso>\n<seealso><directive module=\"mod_allowmethods\">AllowMethods</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>MergeSlashes</name>\n<description>Controls whether the server merges consecutive slashes in URLs.\n</description>\n<syntax>MergeSlashes ON|OFF</syntax>\n<default>MergeSlashes ON</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n<compatibility>Added in 2.4.39</compatibility>\n\n<usage>\n    <p>By default, the server merges (or collapses) multiple consecutive slash\n    ('/') characters in the path component of the request URL.</p>\n\n    <p>When mapping URL's to the filesystem, these multiple slashes are not \n    significant.  However, URL's handled other ways, such as by CGI or proxy,\n    might prefer to retain the significance of multiple consecutive slashes. \n    In these cases <directive>MergeSlashes</directive> can be set to \n    <em>OFF</em> to retain the multiple consecutive slashes.  In these\n    configurations, regular expressions used in the configuration file that match\n    the path component of the URL (<directive>LocationMatch</directive>,\n    <directive>RewriteRule</directive>, ...) need to take into account multiple \n    consecutive slashes.</p>\n</usage>\n</directivesynopsis>\n\n</modulesynopsis>\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  ap_mmn.h\n * @brief Module Magic Number\n *\n * @defgroup APACHE_CORE_MMN Module Magic Number\n * @ingroup  APACHE_CORE\n * @{\n */\n\n#ifndef APACHE_AP_MMN_H\n#define APACHE_AP_MMN_H\n\n/*\n * MODULE_MAGIC_NUMBER_MAJOR\n * Major API changes that could cause compatibility problems for older modules\n * such as structure size changes.  No binary compatibility is possible across\n * a change in the major version.\n *\n * MODULE_MAGIC_NUMBER_MINOR\n * Minor API changes that do not cause binary compatibility problems.\n * Should be reset to 0 when upgrading MODULE_MAGIC_NUMBER_MAJOR.\n *\n * See the AP_MODULE_MAGIC_AT_LEAST macro below for an example.\n */\n\n/*\n * 20010224   (2.0.13-dev) MODULE_MAGIC_COOKIE reset to \"AP20\"\n * 20010523   (2.0.19-dev) bump for scoreboard structure reordering\n * 20010627   (2.0.19-dev) more API changes than I can count\n * 20010726   (2.0.22-dev) more big API changes\n * 20010808   (2.0.23-dev) dir d_is_absolute bit introduced, bucket changes, etc\n * 20010825   (2.0.25-dev) removed d_is_absolute, introduced map_to_storage hook\n * 20011002   (2.0.26-dev) removed 1.3-deprecated request_rec.content_language\n * 20011127   (2.0.29-dev) bump for postconfig hook change, and removal of\n *                         socket from connection record\n * 20011212   (2.0.30-dev) bump for new used_path_info member of request_rec\n * 20011218   (2.0.30-dev) bump for new sbh member of conn_rec, different\n *                         declarations for scoreboard, new parameter to\n *                         create_connection hook\n * 20020102   (2.0.30-dev) bump for changed type of limit_req_body in\n *                         core_dir_config\n * 20020109   (2.0.31-dev) bump for changed shm and scoreboard declarations\n * 20020111   (2.0.31-dev) bump for ETag fields added at end of cor_dir_config\n * 20020114   (2.0.31-dev) mod_dav changed how it asks its provider to fulfill\n *                         a GET request\n * 20020118   (2.0.31-dev) Input filtering split of blocking and mode\n * 20020127   (2.0.31-dev) bump for pre_mpm hook change\n * 20020128   (2.0.31-dev) bump for pre_config hook change\n * 20020218   (2.0.33-dev) bump for AddOutputFilterByType directive\n * 20020220   (2.0.33-dev) bump for scoreboard.h structure change\n * 20020302   (2.0.33-dev) bump for protocol_filter additions.\n * 20020306   (2.0.34-dev) bump for filter type renames.\n * 20020318   (2.0.34-dev) mod_dav's API for REPORT generation changed\n * 20020319   (2.0.34-dev) M_INVALID changed, plus new M_* methods for RFC 3253\n * 20020327   (2.0.35-dev) Add parameter to quick_handler hook\n * 20020329   (2.0.35-dev) bump for addition of freelists to bucket API\n * 20020329.1 (2.0.36)     minor bump for new arg to opt fn ap_cgi_build_command\n * 20020506   (2.0.37-dev) Removed r->boundary in request_rec.\n * 20020529   (2.0.37-dev) Standardized the names of some apr_pool_*_set funcs\n * 20020602   (2.0.37-dev) Bucket API change (metadata buckets)\n * 20020612   (2.0.38-dev) Changed server_rec->[keep_alive_]timeout to apr time\n * 20020625   (2.0.40-dev) Changed conn_rec->keepalive to an enumeration\n * 20020628   (2.0.40-dev) Added filter_init to filter registration functions\n * 20020903   (2.0.41-dev) APR's error constants changed\n * 20020903.1 (2.1.0-dev)  allow_encoded_slashes added to core_dir_config\n * 20020903.2 (2.0.46-dev) add ap_escape_logitem\n * 20030213.1 (2.1.0-dev)  changed log_writer optional fn's to return previous\n *                         handler\n * 20030821   (2.1.0-dev)  bumped mod_include's entire API\n * 20030821.1 (2.1.0-dev)  added XHTML doctypes\n * 20030821.2 (2.1.0-dev)  added ap_escape_errorlog_item\n * 20030821.3 (2.1.0-dev)  added ap_get_server_revision / ap_version_t\n * 20040425   (2.1.0-dev)  removed ap_add_named_module API\n *                         changed ap_add_module, ap_add_loaded_module,\n *                         ap_setup_prelinked_modules,\n *                         ap_process_resource_config\n * 20040425.1 (2.1.0-dev)  Added ap_module_symbol_t and\n *                         ap_prelinked_module_symbols\n * 20050101.0 (2.1.2-dev)  Axed misnamed http_method for http_scheme\n *                         (which it was!)\n * 20050127.0 (2.1.3-dev)  renamed regex_t->ap_regex_t,\n *                         regmatch_t->ap_regmatch_t, REG_*->AP_REG_*,\n *                         removed reg* in place of ap_reg*; added ap_regex.h\n * 20050217.0 (2.1.3-dev)  Axed find_child_by_pid, mpm_*_completion_context\n *                         (winnt mpm) symbols from the public sector, and\n *                         decorated real_exit_code with ap_ in the win32/os.h.\n * 20050305.0 (2.1.4-dev)  added pid and generation fields to worker_score\n * 20050305.1 (2.1.5-dev)  added ap_vhost_iterate_given_conn.\n * 20050305.2 (2.1.5-dev)  added AP_INIT_TAKE_ARGV.\n * 20050305.3 (2.1.5-dev)  added Protocol Framework.\n * 20050701.0 (2.1.7-dev)  Bump MODULE_MAGIC_COOKIE to \"AP21\"!\n * 20050701.1 (2.1.7-dev)  trace_enable member added to core server_config\n * 20050708.0 (2.1.7-dev)  Bump MODULE_MAGIC_COOKIE to \"AP22\"!\n * 20050708.1 (2.1.7-dev)  add proxy request_status hook (minor)\n * 20050919.0 (2.1.8-dev)  mod_ssl ssl_ext_list optional function added\n * 20051005.0 (2.1.8-dev)  NET_TIME filter eliminated\n * 20051005.0 (2.3.0-dev)  Bump MODULE_MAGIC_COOKIE to \"AP24\"!\n * 20051115.0 (2.3.0-dev)  Added use_canonical_phys_port to core_dir_config\n * 20060110.0 (2.3.0-dev)  Conversion of Authz to be provider based\n *                         addition of <SatisfyAll><SatisfyOne>\n *                         removal of Satisfy, Allow, Deny, Order\n * 20060110.1 (2.3.0-dev)  minex and minex_set members added to\n *                         cache_server_conf (minor)\n * 20060110.2 (2.3.0-dev)  flush_packets and flush_wait members added to\n *                         proxy_server (minor)\n * 20060110.3 (2.3.0-dev)  added inreslist member to proxy_conn_rec (minor)\n * 20060110.4 (2.3.0-dev)  Added server_scheme member to server_rec (minor)\n * 20060905.0 (2.3.0-dev)  Replaced ap_get_server_version() with\n *                         ap_get_server_banner() and ap_get_server_description()\n * 20060905.1 (2.3.0-dev)  Enable retry=0 for the worker (minor)\n * 20060905.2 (2.3.0-dev)  Added ap_all_available_mutexes_string,\n *                         ap_available_mutexes_string and\n *                         ap_parse_mutex()\n * 20060905.3 (2.3.0-dev)  Added conn_rec::clogging_input_filters.\n * 20060905.4 (2.3.0-dev)  Added proxy_balancer::sticky_path.\n * 20060905.5 (2.3.0-dev)  Added ap_mpm_safe_kill()\n * 20070823.0 (2.3.0-dev)  Removed ap_all_available_mutexes_string,\n *                         ap_available_mutexes_string for macros\n * 20070823.1 (2.3.0-dev)  add ap_send_interim_response()\n * 20071023.0 (2.3.0-dev)  add ap_get_scoreboard(sbh) split from the less\n *                         conventional ap_get_scoreboard(proc, thread)\n * 20071023.1 (2.3.0-dev)  Add flags field to struct proxy_alias\n * 20071023.2 (2.3.0-dev)  Add ap_mod_status_reqtail\n * 20071023.3 (2.3.0-dev)  Declare ap_time_process_request() as part of the\n *                         public scoreboard API.\n * 20071108.1 (2.3.0-dev)  Add the optional kept_body brigade to request_rec\n * 20071108.2 (2.3.0-dev)  Add st and keep fields to struct util_ldap_connection_t\n * 20071108.3 (2.3.0-dev)  Add API guarantee for adding connection filters\n *                         with non-NULL request_rec pointer (ap_add_*_filter*)\n * 20071108.4 (2.3.0-dev)  Add ap_proxy_ssl_connection_cleanup\n * 20071108.5 (2.3.0-dev)  Add *scpool to proxy_conn_rec structure\n * 20071108.6 (2.3.0-dev)  Add *r and need_flush to proxy_conn_rec structure\n * 20071108.7 (2.3.0-dev)  Add *ftp_directory_charset to proxy_dir_conf\n * 20071108.8 (2.3.0-dev)  Add optional function ap_logio_add_bytes_in() to mog_logio\n * 20071108.9 (2.3.0-dev)  Add chroot support to unixd_config\n * 20071108.10(2.3.0-dev)  Introduce new ap_expr API\n * 20071108.11(2.3.0-dev)  Revise/Expand new ap_expr API\n * 20071108.12(2.3.0-dev)  Remove ap_expr_clone from the API (same day it was added)\n * 20080403.0 (2.3.0-dev)  Add condition field to core dir config\n * 20080403.1 (2.3.0-dev)  Add authn/z hook and provider registration wrappers.\n * 20080403.2 (2.3.0-dev)  Add ap_escape_path_segment_buffer() and ap_unescape_all().\n * 20080407.0 (2.3.0-dev)  Remove ap_graceful_stop_signalled.\n * 20080407.1              Deprecate ap_cache_cacheable_hdrs_out and add two\n *                         generalized ap_cache_cacheable_headers_(in|out).\n * 20080528.0 (2.3.0-dev)  Switch order of ftp_directory_charset and\n *                         interpolate_env in proxy_dir_conf.\n *                         Rationale: see r661069.\n * 20080528.1 (2.3.0-dev)  add has_realm_hash() to authn_provider struct\n * 20080722.0 (2.3.0-dev)  remove has_realm_hash() from authn_provider struct\n * 20080722.1 (2.3.0-dev)  Add conn_timeout and conn_timeout_set to\n *                         proxy_worker struct.\n * 20080722.2 (2.3.0-dev)  Add scolonsep to proxy_balancer\n * 20080829.0 (2.3.0-dev)  Add cookie attributes when removing cookies\n * 20080830.0 (2.3.0-dev)  Cookies can be set on headers_out and err_headers_out\n * 20080920.0 (2.3.0-dev)  Add ap_mpm_register_timed_callback.\n * 20080920.1 (2.3.0-dev)  Export mod_rewrite.h in the public API.\n * 20080920.2 (2.3.0-dev)  Added ap_timeout_parameter_parse to util.c / httpd.h\n * 20081101.0 (2.3.0-dev)  Remove unused AUTHZ_GROUP_NOTE define.\n * 20081102.0 (2.3.0-dev)  Remove authz_provider_list, authz_request_state,\n *                         and AUTHZ_ACCESS_PASSED_NOTE.\n * 20081104.0 (2.3.0-dev)  Remove r and need_flush fields from proxy_conn_rec\n *                         as they are no longer used and add\n *                         ap_proxy_buckets_lifetime_transform to mod_proxy.h\n * 20081129.0 (2.3.0-dev)  Move AP_FILTER_ERROR and AP_NOBODY_READ|WROTE\n *                         from util_filter.h to httpd.h and change their\n *                         numeric values so they do not overlap with other\n *                         potential status codes\n * 20081201.0 (2.3.0-dev)  Rename several APIs to include ap_ prefix.\n * 20081201.1 (2.3.0-dev)  Added ap_args_to_table and ap_body_to_table.\n * 20081212.0 (2.3.0-dev)  Remove sb_type from process_score in scoreboard.h.\n * 20081231.0 (2.3.0-dev)  Switch ap_escape_html API: add ap_escape_html2,\n *                         and make ap_escape_html a macro for it.\n * 20090130.0 (2.3.2-dev)  Add ap_ prefix to unixd_setup_child().\n * 20090131.0 (2.3.2-dev)  Remove ap_default_type(), disable DefaultType\n * 20090208.0 (2.3.2-dev)  Add conn_rec::current_thread.\n * 20090208.1 (2.3.3-dev)  Add ap_retained_data_create()/ap_retained_data_get()\n * 20090401.0 (2.3.3-dev)  Remove ap_threads_per_child, ap_max_daemons_limit,\n *                         ap_my_generation, etc.  ap_mpm_query() can't be called\n *                         until after the register-hooks phase.\n * 20090401.1 (2.3.3-dev)  Protected log.c internals, http_log.h changes\n * 20090401.2 (2.3.3-dev)  Added tmp_flush_bb to core_output_filter_ctx_t\n * 20090401.3 (2.3.3-dev)  Added DAV options provider to mod_dav.h\n * 20090925.0 (2.3.3-dev)  Added server_rec::context and added *server_rec\n *                         param to ap_wait_or_timeout()\n * 20090925.1 (2.3.3-dev)  Add optional function ap_logio_get_last_bytes() to\n *                         mod_logio\n * 20091011.0 (2.3.3-dev)  Move preserve_host{,_set} from proxy_server_conf to\n *                         proxy_dir_conf\n * 20091011.1 (2.3.3-dev)  add debug_level to util_ldap_state_t\n * 20091031.0 (2.3.3-dev)  remove public LDAP referral-related macros\n * 20091119.0 (2.3.4-dev)  dav_error interface uses apr_status_t parm, not errno\n * 20091119.1 (2.3.4-dev)  ap_mutex_register(), ap_{proc,global}_mutex_create()\n * 20091229.0 (2.3.5-dev)  Move allowed_connect_ports from proxy_server_conf\n *                         to mod_proxy_connect\n * 20091230.0 (2.3.5-dev)  Move ftp_directory_charset from proxy_dir_conf\n *                         to proxy_ftp_dir_conf(mod_proxy_ftp)\n * 20091230.1 (2.3.5-dev)  add util_ldap_state_t.opTimeout\n * 20091230.2 (2.3.5-dev)  add ap_get_server_name_for_url()\n * 20091230.3 (2.3.6-dev)  add ap_parse_log_level()\n * 20091230.4 (2.3.6-dev)  export ap_process_request_after_handler() for mod_serf\n * 20100208.0 (2.3.6-dev)  ap_socache_provider_t API changes to store and iterate\n * 20100208.1 (2.3.6-dev)  Added forward member to proxy_conn_rec\n * 20100208.2 (2.3.6-dev)  Added ap_log_command_line().\n * 20100223.0 (2.3.6-dev)  LDAP client_certs per-server moved to per-dir\n * 20100223.1 (2.3.6-dev)  Added ap_process_fnmatch_configs().\n * 20100504.0 (2.3.6-dev)  Added name arg to ap_{proc,global}_mutex_create().\n * 20100604.0 (2.3.6-dev)  Remove unused core_dir_config::loglevel\n * 20100606.0 (2.3.6-dev)  Make ap_log_*error macro wrappers around\n *                         ap_log_*error_ to save argument preparation and\n *                         function call overhead.\n *                         Introduce per-module loglevels, including new APIs\n *                         APLOG_USE_MODULE() and AP_DECLARE_MODULE().\n * 20100606.1 (2.3.6-dev)  Added extended timestamp formatting via\n *                         ap_recent_ctime_ex().\n * 20100609.0 (2.3.6-dev)  Dropped ap_body_to_table due to missing constraints.\n * 20100609.1 (2.3.7-dev)  Introduce ap_log_cserror()\n * 20100609.2 (2.3.7-dev)  Add deferred write pool to core_output_filter_ctx\n * 20100625.0 (2.3.7-dev)  Add 'userctx' to socache iterator callback prototype\n * 20100630.0 (2.3.7-dev)  make module_levels vector of char instead of int\n * 20100701.0 (2.3.7-dev)  re-order struct members to improve alignment\n * 20100701.1 (2.3.7-dev)  add note_auth_failure hook\n * 20100701.2 (2.3.7-dev)  add ap_proxy_*_wid() functions\n * 20100714.0 (2.3.7-dev)  add access_checker_ex hook, add AUTHZ_DENIED_NO_USER\n *                         to authz_status, call authz providers twice to allow\n *                         authz without authenticated user\n * 20100719.0 (2.3.7-dev)  Add symbol name parameter to ap_add_module and\n *                         ap_add_loaded_module. Add ap_find_module_short_name\n * 20100723.0 (2.3.7-dev)  Remove ct_output_filters from core rec\n * 20100723.1 (2.3.7-dev)  Added ap_proxy_hashfunc() and hash elements to\n *                         proxy worker structs\n * 20100723.2 (2.3.7-dev)  Add ap_request_has_body()\n * 20100723.3 (2.3.8-dev)  Add ap_check_mpm()\n * 20100905.0 (2.3.9-dev)  Add log_id to conn and req recs. Add error log\n *                         format handlers. Support AP_CTIME_OPTION_COMPACT in\n *                         ap_recent_ctime_ex().\n * 20100905.1 (2.3.9-dev)  Add ap_cache_check_allowed()\n * 20100912.0 (2.3.9-dev)  Add an additional \"out\" brigade parameter to the\n *                         mod_cache store_body() provider function.\n * 20100916.0 (2.3.9-dev)  Add commit_entity() to the mod_cache provider\n *                         interface.\n * 20100918.0 (2.3.9-dev)  Move the request_rec within mod_include to be\n *                         exposed within include_ctx_t.\n * 20100919.0 (2.3.9-dev)  Authz providers: Add parsed_require_line parameter\n *                         to check_authorization() function. Add\n *                         parse_require_line() function.\n * 20100919.1 (2.3.9-dev)  Introduce ap_rxplus util/API\n * 20100921.0 (2.3.9-dev)  Add an apr_bucket_brigade to the create_entity\n *                         provider interface for mod_cache.h.\n * 20100922.0 (2.3.9-dev)  Move cache_* functions from mod_cache.h to a\n *                         private header file.\n * 20100923.0 (2.3.9-dev)  Remove MOD_CACHE_REQUEST_REC, remove deprecated\n *                         ap_cache_cacheable_hdrs_out, trim cache_object_t,\n *                         make ap_cache_accept_headers, ap_cache_accept_headers\n *                         ap_cache_try_lock, ap_cache_check_freshness,\n *                         cache_server_conf, cache_enable, cache_disable,\n *                         cache_request_rec and cache_provider_list private.\n * 20100923.1 (2.3.9-dev)  Add cache_status hook.\n * 20100923.2 (2.3.9-dev)  Add generate_log_id hook.\n *                         Make root parameter of ap_expr_eval() const.\n * 20100923.3 (2.3.9-dev)  Add \"last\" member to ap_directive_t\n * 20101012.0 (2.3.9-dev)  Add header to cache_status hook.\n * 20101016.0 (2.3.9-dev)  Remove ap_cache_check_allowed().\n * 20101017.0 (2.3.9-dev)  Make ap_cache_control() public, add cache_control_t\n *                         to mod_disk_cache format.\n * 20101106.0 (2.3.9-dev)  Replace the ap_expr parser derived from\n *                         mod_include's parser with one derived from\n *                         mod_ssl's parser. Clean up ap_expr's public\n *                         interface.\n * 20101106.1 (2.3.9-dev)  Add ap_pool_cleanup_set_null() generic cleanup\n * 20101106.2 (2.3.9-dev)  Add suexec_disabled_reason field to ap_unixd_config\n * 20101113.0 (2.3.9-dev)  Add source address to mod_proxy.h\n * 20101113.1 (2.3.9-dev)  Add ap_set_flag_slot_char()\n * 20101113.2 (2.3.9-dev)  Add ap_expr_exec_re()\n * 20101204.0 (2.3.10-dev) Add _t to ap_expr's typedef names\n * 20101223.0 (2.3.11-dev) Remove cleaned from proxy_conn_rec.\n * 20101223.1 (2.3.11-dev) Rework mod_proxy, et.al. Remove proxy_worker_stat\n *                         and replace w/ proxy_worker_shared; remove worker\n *                         info from scoreboard and use slotmem; Allow\n *                         dynamic growth of balancer members; Remove\n *                         BalancerNonce in favor of 'nonce' parameter.\n * 20110117.0 (2.3.11-dev) Merge <If> sections in separate step (ap_if_walk).\n *                         Add core_dir_config->sec_if. Add ap_add_if_conf().\n *                         Add pool argument to ap_add_file_conf().\n * 20110117.1 (2.3.11-dev) Add ap_pstr2_alnum() and ap_str2_alnum()\n * 20110203.0 (2.3.11-dev) Raise DYNAMIC_MODULE_LIMIT to 256\n * 20110203.1 (2.3.11-dev) Add ap_state_query()\n * 20110203.2 (2.3.11-dev) Add ap_run_pre_read_request() hook and\n *                         ap_parse_form_data() util\n * 20110312.0 (2.3.12-dev) remove uldap_connection_cleanup and add\n                           util_ldap_state_t.connectionPoolTTL,\n                           util_ldap_connection_t.freed, and\n                           util_ldap_connection_t.rebind_pool.\n * 20110312.1 (2.3.12-dev) Add core_dir_config.decode_encoded_slashes.\n * 20110328.0 (2.3.12-dev) change type and name of connectionPoolTTL in util_ldap_state_t\n                           connectionPoolTTL (connection_pool_ttl, int->apr_interval_t)\n * 20110329.0 (2.3.12-dev) Change single-bit signed fields to unsigned in\n *                         proxy and cache interfaces.\n *                         Change ap_configfile_t/ap_cfg_getline()/\n *                         ap_cfg_getc() API, add ap_pcfg_strerror()\n *                         Axe mpm_note_child_killed hook, change\n *                         ap_reclaim_child_process and ap_recover_child_process\n *                         interfaces.\n * 20110329.1 (2.3.12-dev) Add ap_reserve_module_slots()/ap_reserve_module_slots_directive()\n *                         change AP_CORE_DECLARE to AP_DECLARE: ap_create_request_config()\n *                         change AP_DECLARE to AP_CORE_DECLARE: ap_register_log_hooks()\n * 20110329.2 (2.3.12-dev) Add child_status and end_generation hooks.\n * 20110329.3 (2.3.12-dev) Add format field to ap_errorlog_info.\n * 20110329.4 (2.3.13-dev) bgrowth and max_balancers to proxy_server_conf.\n * 20110329.5 (2.3.13-dev) Add ap_regexec_len()\n * 20110329.6 (2.3.13-dev) Add AP_EXPR_FLAGS_RESTRICTED, ap_expr_eval_ctx_t->data,\n *                         ap_expr_exec_ctx()\n * 20110604.0 (2.3.13-dev) Make ap_rputs() inline\n * 20110605.0 (2.3.13-dev) add core_dir_config->condition_ifelse, change return\n *                         type of ap_add_if_conf().\n *                         Add members of core_request_config: document_root,\n *                         context_document_root, context_prefix.\n *                         Add ap_context_*(), ap_set_context_info(), ap_set_document_root()\n * 20110605.1 (2.3.13-dev) add ap_(get|set)_core_module_config()\n * 20110605.2 (2.3.13-dev) add ap_get_conn_socket()\n * 20110619.0 (2.3.13-dev) add async connection infos to process_score in scoreboard,\n *                         add ap_start_lingering_close(),\n *                         add conn_state_e:CONN_STATE_LINGER_NORMAL and CONN_STATE_LINGER_SHORT\n * 20110619.1 (2.3.13-dev) add ap_str_toupper()\n * 20110702.0 (2.3.14-dev) make ap_expr_parse_cmd() macro wrapper for new\n *                         ap_expr_parse_cmd_mi() function, add ap_expr_str_*() functions,\n *                         rename AP_EXPR_FLAGS_* -> AP_EXPR_FLAG_*\n * 20110702.1 (2.3.14-dev) Add ap_scan_script_header_err*_ex functions\n * 20110723.0 (2.3.14-dev) Revert addition of ap_ldap*\n * 20110724.0 (2.3.14-dev) Add override_list as parameter to ap_parse_htaccess\n *                         Add member override_list to cmd_parms_struct,\n *                         core_dir_config and htaccess_result\n * 20110724.1 (2.3.15-dev) add NOT_IN_HTACCESS\n * 20110724.2 (2.3.15-dev) retries and retry_delay in util_ldap_state_t\n * 20110724.3 (2.3.15-dev) add util_varbuf.h / ap_varbuf API\n * 20110724.4 (2.3.15-dev) add max_ranges to core_dir_config\n * 20110724.5 (2.3.15-dev) add ap_set_accept_ranges()\n * 20110724.6 (2.3.15-dev) add max_overlaps and max_reversals to core_dir_config\n * 20110724.7 (2.3.15-dev) add ap_random_insecure_bytes(), ap_random_pick()\n * 20110724.8 (2.3.15-dev) add ap_abort_on_oom(), ap_malloc(), ap_calloc(),\n *                         ap_realloc()\n * 20110724.9 (2.3.15-dev) add ap_varbuf_pdup() and ap_varbuf_regsub()\n * 20110724.10(2.3.15-dev) Export ap_max_mem_free\n * 20111009.0 (2.3.15-dev) Remove ap_proxy_removestr(),\n *                         add ap_unixd_config.group_name\n * 20111014.0 (2.3.15-dev) Remove cookie_path_str and cookie_domain_str from\n *                         proxy_dir_conf\n * 20111025.0 (2.3.15-dev) Add return value and maxlen to ap_varbuf_regsub(),\n *                         add ap_pregsub_ex()\n * 20111025.1 (2.3.15-dev) Add ap_escape_urlencoded(), ap_escape_urlencoded_buffer()\n *                         and ap_unescape_urlencoded().\n * 20111025.2 (2.3.15-dev) Add ap_lua_ssl_val to mod_lua\n * 20111025.3 (2.4.0-dev)  Add reclvl to ap_expr_eval_ctx_t\n * 20111122.0 (2.4.0-dev)  Remove parts of conn_state_t that are private to the MPM\n * 20111123.0 (2.4.0-dev)  Pass ap_errorlog_info struct to error_log hook,\n *                         add pool to ap_errorlog_info.\n * 20111130.0 (2.4.0-dev)  c->remote_ip becomes c->peer_ip and r->client_ip,\n *                         c->remote_addr becomes c->peer_addr and r->client_addr\n * 20111201.0 (2.4.0-dev)  Add invalidate_entity() to the cache provider.\n * 20111202.0 (2.4.0-dev)  Use apr_status_t across mod_session API.\n * 20111202.1 (2.4.0-dev)  add APLOGNO()\n * 20111203.0 (2.4.0-dev)  Optional ap_proxy_retry_worker(), remove\n *                         ap_proxy_string_read(), ap_cache_liststr(),\n *                         ap_proxy_buckets_lifetime_transform(),\n *                         ap_proxy_date_canon(), ap_proxy_is_ipaddr(),\n *                         ap_proxy_is_domainname(), ap_proxy_is_hostname(),\n *                         ap_proxy_is_word(), ap_proxy_hex2sec(),\n *                         ap_proxy_sec2hex(), ap_proxy_make_fake_req(),\n *                         ap_proxy_strmatch_path, ap_proxy_strmatch_domain,\n *                         ap_proxy_table_unmerge(), proxy_lb_workers.\n * 20120109.0 (2.4.1-dev)  Changes sizeof(overrides_t) in core config.\n * 20120109.1 (2.4.1-dev)  remove sb_type in global_score.\n * 20120109.2 (2.4.1-dev)  Make core_output_filter_ctx_t and core_ctx_t\n *                         private;\n *                         move core_net rec definition to http_core.h;\n *                         add insert_network_bucket hook, AP_DECLINED\n * 20120211.0 (2.4.1-dev)  Change re_nsub in ap_regex_t from apr_size_t to int.\n * 20120211.1 (2.4.2-dev)  Add AP_HAVE_C99\n * 20120211.2 (2.4.2-dev)  Add ap_runtime_dir_relative\n * 20120211.3 (2.4.2-dev)  Add forcerecovery to proxy_balancer_shared struct\n * 20120211.4 (2.4.3-dev)  Add ap_list_provider_groups()\n * 20120211.5 (2.4.3-dev)  Add missing HTTP status codes registered with IANA.\n * 20120211.6 (2.4.3-dev)  Add ap_proxy_checkproxyblock2.\n * 20120211.7 (2.4.3-dev)  Add ap_get_loadavg()\n * 20120211.8 (2.4.3-dev)  Add sticky_separator to proxy_balancer_shared struct.\n * 20120211.9 (2.4.4-dev)  Add fgrab() to ap_slotmem_provider_t.\n * 20120211.10 (2.4.4-dev) Add in bal_persist field to proxy_server_conf\n * 20120211.11 (2.4.4-dev) Add ap_bin2hex()\n * 20120211.12 (2.4.5-dev) Add ap_remove_input|output_filter_byhandle()\n * 20120211.13 (2.4.5-dev) Add ap_get_exec_line\n * 20120211.14 (2.4.5-dev) Add ppinherit and inherit to proxy_server_conf\n * 20120211.15 (2.4.5-dev) Add dav_join_error()\n * 20120211.16 (2.4.5-dev) Add cache_control_t.invalidated\n * 20120211.17 (2.4.5-dev) Add ap_find_etag_weak(), ap_find_etag_strong()\n * 20120211.18 (2.4.5-dev) Add ap_condition_e, ap_condition_if_match(),\n *                         ap_condition_if_unmodified_since(),\n *                         ap_condition_if_none_match(),\n *                         ap_condition_if_modified_since(),\n *                         ap_condition_if_range()\n * 20120211.19 (2.4.5-dev) Add post_perdir_config hook.\n * 20120211.20 (2.4.5-dev) Add dirwalk_stat hook.\n * 20120211.21 (2.4.5-dev) Add in ap_proxy_create_hdrbrgd() and\n *                         ap_proxy_pass_brigade()\n * 20120211.22 (2.4.5-dev) No longer prevent usage of strtoul()\n * 20120211.23 (2.4.5-dev) Add ap_proxy_clear_connection()\n * 20120211.24 (2.4.7-dev) add open_htaccess hook.\n * 20120211.25 (2.4.7-dev) Add conn_sense_e\n * 20120211.26 (2.4.7-dev) Add util_fcgi.h, FastCGI protocol support\n * 20120211.27 (2.4.7-dev) Add ap_podx_restart_t and ap_mpm_podx_*\n * 20120211.28 (2.4.7-dev) Add ap_regname\n * 20120211.29 (2.4.7-dev) Add uds_path to proxy_conn_rec and proxy_worker_shared.\n *                         The change to proxy_worker_shared is an\n *                         unintended API break, especially for balancer\n *                         lbmethod modules.\n * 20120211.30 (2.4.7-dev) REWRITE_REDIRECT_HANDLER_NAME in mod_rewrite.h\n * 20120211.31 (2.4.7-dev) Add ap_proxy_port_of_scheme()\n * 20120211.32 (2.4.10-dev) Add SSL reusable SNI to mod_proxy.h's proxy_conn_rec\n * 20120211.33 (2.4.10-dev) Add suspend_connection and resume_connection hooks\n * 20120211.34 (2.4.10-dev) AP_DEFAULT_HANDLER_NAME/AP_IS_DEFAULT_HANDLER_NAME\n * 20120211.35 (2.4.10-dev) Add \"r\", \"must_rebind\", and last_backend_conn\n                            to util_ldap_connection_t\n * 20120211.36 (2.4.10-dev) Add ap_copy_scoreboard_worker()\n * 20120211.37 (2.4.11-dev) Add r->trailers_{in,out}\n * 20120211.38 (2.4.11-dev) Added ap_shutdown_conn().\n * 20120211.39 (2.4.11-dev) Add ap_proxy_connect_uds().\n * 20120211.40 (2.4.11-dev) Add ap_log_data(), ap_log_rdata(), etc.\n * 20120211.41 (2.4.11-dev) Add ap_proxy_de_socketfy to mod_proxy.h\n * 20120211.42 (2.4.13-dev) Add response_code_exprs to http_core.h\n * 20120211.43 (2.4.13-dev) Add keep_alive_timeout_set to server_rec\n * 20120211.44 (2.4.13-dev) Add cgi_pass_auth and AP_CGI_PASS_AUTH_* to\n *                          core_dir_config\n * 20120211.45 (2.4.13-dev) Add ap_proxy_connection_reusable()\n * 20120211.46 (2.4.13-dev) Add ap_map_http_request_error()\n * 20120211.47 (2.4.13-dev) Add ap_some_authn_required, ap_force_authn hook.\n *                          Deprecate broken ap_some_auth_required.\n * 20120211.48 (2.4.17-dev) Added ap_log_mpm_common().\n * 20120211.49 (2.4.17-dev) Add listener bucket in scoreboard.h's process_score.\n * 20120211.50 (2.4.17-dev) Add ap_set_listencbratio(), ap_close_listeners_ex(),\n *                          ap_duplicate_listeners(), ap_num_listen_buckets and\n *                          ap_have_so_reuseport to ap_listen.h.\n * 20120211.51 (2.4.17-dev) Add protocols and protocols_honor_order to\n *                          core_server_config. Add hooks protocol_propose\n *                          protocol_switch and protocol_get. Add\n *                          ap_select_protocol(), ap_switch_protocol(),\n *                          ap_get_protocol(). Add HTTP_MISDIRECTED_REQUEST.\n *                          Added ap_parse_token_list_strict() to httpd.h\n * 20120211.52 (2.4.17-dev) Add master conn_rec* member in conn_rec.\n * 20120211.53 (2.4.19-dev) Add expr_handler to core_dir_config.\n * 20120211.54 (2.4.19-dev) Add ap_proxy_buckets_lifetime_transform and\n *                          ap_proxy_transfer_between_connections to\n *                          mod_proxy.h\n * 20120211.55 (2.4.19-dev) Add new ap_update_child_status...() methods,\n *                          add protocol to worker_score in scoreboard.h,\n *                          Add pre_close connection hook and\n *                          ap_prep_lingering_close().\n * 20120211.56 (2.4.19-dev) Split useragent_host from the conn_rec into\n *                          the request_rec, with ap_get_useragent_host()\n * 20120211.57 (2.4.19-dev) Add mod_ssl_openssl.h and OpenSSL-specific hooks\n * 20120211.58 (2.4.21-dev) Add cgi_var_rules to core_dir_config.\n * 20120211.59 (2.4.21-dev) Add ap_getword_conf2[_nc](),\n *                          ap_proxy_is_socket_connected() and\n *                          extended proxy_worker_shared.\n * 20120211.60 (2.4.21-dev) Add dav_get_provider_name.\n * 20120211.61 (2.4.21-dev) Add ap_cstr_casecmp[n]() - placeholder of apr_ fns\n * 20120211.62 (2.4.24-dev) Add childtags to dav_error.\n * 20120211.63 (2.4.24-dev) Add dav_begin_multistatus, dav_send_one_response,\n *                          dav_finish_multistatus, dav_send_multistatus,\n *                          dav_handle_err, dav_failed_proppatch,\n *                          dav_success_proppatch.\n * 20120211.64 (2.4.24-dev) Add ap_proxy_check_backend(), and tmp_bb to struct\n *                          proxy_conn_rec.\n * 20120211.65 (2.4.24-dev) Add ap_check_pipeline().\n * 20120211.66 (2.4.24-dev) Rename ap_proxy_check_backend() to\n *                          ap_proxy_check_connection().\n * 20120211.67 (2.4.24-dev) Add http09_enable, http_conformance, and\n *                          http_methods to core_server_config\n *                          Add ap_scan_http_field_token(),\n *                          ap_scan_http_field_content(),\n *                          and ap_scan_vchar_obstext()\n *                          Replaced fold boolean with with multiple bit flags\n *                          to ap_[r]getline()\n * 20120211.68 (2.4.26-dev) Add ap_get_basic_auth_components() and deprecate\n *                          ap_get_basic_auth_pw()\n * 20120211.69 (2.4.30-dev) Add ap_update_sb_handle()\n * 20120211.70 (2.4.30-dev) Add flags field to module_struct and function\n *                          ap_get_module_flags()\n * 20120211.71 (2.4.30-dev) Add optional proxy_{hook,run}_section_post_config(),\n *                          ap_proxy_connection_create_ex() and section_config\n *                          to struct proxy_{worker,balancer} in mod_proxy.h,\n *                          and optional ssl_engine_set() to mod_ssl.h.\n * 20120211.72 (2.4.30-dev) Add NOT_IN_DIR_CONTEXT replacing NOT_IN_DIR_LOC_FILE\n *                          semantics\n * 20120211.73 (2.4.30-dev) Add failontimeout_set, growth_set and lbmethod_set\n *                          to proxy_balancer struct\n * 20120211.74 (2.4.30-dev) Add AP_REG_DOLLAR_ENDONLY, ap_regcomp_get_default_cflags\n *                          ap_regcomp_set_default_cflags and\n *                          ap_regcomp_default_cflag_by_name\n * 20120211.75 (2.4.30-dev) Add hostname_ex to proxy_worker_shared\n * 20120211.76 (2.4.30-dev) Add CONN_STATE_NUM to enum conn_state_e\n * 20120211.77 (2.4.34-dev) Add ap_exists_directive()\n * 20120211.78 (2.4.34-dev) Add response_field_size to proxy_worker_shared \n * 20120211.79 (2.4.34-dev) Add AP_GETLINE_NOSPC_EOL flag to http_protocol.h\n * 20120211.80 (2.4.35-dev) Add new ap_update_global_status() method and\n *                          times field in the global_score structure in\n *                          scoreboard.h.\n * 20120211.81 (2.4.35-dev) Add new duration field to worker_score struct in\n *                          scoreboard.h\n * 20120211.82 (2.4.35-dev) Add optional function declaration for\n *                          ap_proxy_balancer_get_best_worker to mod_proxy.h.\n * 20120211.83 (2.4.35-dev) Add client64 field to worker_score struct\n * 20120211.84 (2.4.35-dev) Add ap_no2slash_ex() and merge_slashes to \n *                          core_server_conf.\n * 20120211.85 (2.4.40-dev) add ap_set_conn_count().\n * 20120211.86 (2.4.40-dev) Add forward_100_continue{,_set} to proxy_dir_conf\n * 20120211.87 (2.4.40-dev) Add dav_popen_propdb\n * 20120211.88 (2.4.40-dev) Add ap_dir_nofnmatch() and ap_dir_fnmatch().\n * 20120211.89 (2.4.42-dev) Add add dns_pool to proxy_conn_pool and define\n *                          AP_VOLATILIZE_T.\n * 20120211.90 (2.4.42-dev) AP_REG_DEFAULT macro in ap_regex.h\n * 20120211.91 (2.4.42-dev) Add ap_is_chunked() in httpd.h\n * 20120211.92 (2.4.42-dev) AP_REG_NO_DEFAULT macro in ap_regex.h\n * 20120211.93 (2.4.44-dev) Add ap_parse_strict_length()\n * 20120211.94 (2.4.47-dev) Add ap_proxy_define_match_worker()\n * 20120211.95 (2.4.47-dev) Add proxy check_trans hook\n * 20120211.96 (2.4.47-dev) Add ap_get_status_line_ex()\n * 20120211.97 (2.4.47-dev) Add read_buf_size member to core_dir_config,\n *                          flush_max_threshold and flush_max_pipelined to\n *                          core_server_config, and ap_get_read_buf_size().\n * 20120211.98 (2.4.47-dev) Add ap_proxy_should_override to mod_proxy.h\n * 20120211.99 (2.4.47-dev) Add proxy_tunnel_rec, ap_proxy_tunnel_create()\n *                          and ap_proxy_tunnel_run() to proxy_util.\n * 20120211.99 (2.4.47-dev) Add ap_proxy_worker_can_upgrade()\n * 20120211.100 (2.4.47-dev) Add ap_proxy_prefetch_input(),\n *                           ap_proxy_spool_input() and\n *                           ap_proxy_read_input().\n * 20120211.101 (2.4.47-dev) ETAG_DIGEST in http_core.h. struct etag_rec,\n *                           ap_make_etag_ex() and ap_set_etag_fd() in\n *                           http_protocol.h. ap_request_bnotes_t,\n *                           AP_REQUEST_STRONG_ETAG, AP_REQUEST_GET_BNOTE,\n *                           AP_REQUEST_SET_BNOTE and AP_REQUEST_IS_STRONG_ETAG\n *                           in httpd.h.\n * 20120211.102 (2.4.47-dev) Add ap_ssl_conn_is_ssl()/ap_ssl_var_lookup() and hooks\n * 20120211.103 (2.4.47-dev) Add ap_ssl_add_cert_files, ap_ssl_add_fallback_cert_files\n *                           and ap_ssl_answer_challenge and hooks.\n * 20120211.104 (2.4.47-dev) Move ap_ssl_* into new http_ssl.h header file\n * 20120211.105 (2.4.47-dev) Add ap_ssl_ocsp* hooks and functions to http_ssl.h.\n */\n\n#define MODULE_MAGIC_COOKIE 0x41503234UL /* \"AP24\" */\n\n#ifndef MODULE_MAGIC_NUMBER_MAJOR\n#define MODULE_MAGIC_NUMBER_MAJOR 20120211\n#endif\n#define MODULE_MAGIC_NUMBER_MINOR 105                 /* 0...n */\n\n/**\n * Determine if the server's current MODULE_MAGIC_NUMBER is at least a\n * specified value.\n *\n * Useful for testing for features.\n * For example, suppose you wish to use the apr_table_overlap\n *    function.  You can do this:\n *\n * \\code\n * #if AP_MODULE_MAGIC_AT_LEAST(19980812,2)\n *     ... use apr_table_overlap()\n * #else\n *     ... alternative code which doesn't use apr_table_overlap()\n * #endif\n * \\endcode\n *\n * @param major The major module magic number\n * @param minor The minor module magic number\n * @def AP_MODULE_MAGIC_AT_LEAST(int major, int minor)\n */\n#define AP_MODULE_MAGIC_AT_LEAST(major,minor)           \\\n    ((major) < MODULE_MAGIC_NUMBER_MAJOR                \\\n     || ((major) == MODULE_MAGIC_NUMBER_MAJOR           \\\n         && (minor) <= MODULE_MAGIC_NUMBER_MINOR))\n\n/** @deprecated present for backwards compatibility */\n#define MODULE_MAGIC_NUMBER MODULE_MAGIC_NUMBER_MAJOR\n#define MODULE_MAGIC_AT_LEAST old_broken_macro_we_hope_you_are_not_using\n\n#endif /* !APACHE_AP_MMN_H */\n/** @} */\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  http_core.h\n * @brief CORE HTTP Daemon\n *\n * @defgroup APACHE_CORE_HTTPD Core HTTP Daemon\n * @ingroup  APACHE_CORE\n * @{\n */\n\n#ifndef APACHE_HTTP_CORE_H\n#define APACHE_HTTP_CORE_H\n\n#include \"apr.h\"\n#include \"apr_hash.h\"\n#include \"apr_optional.h\"\n#include \"util_filter.h\"\n#include \"ap_expr.h\"\n#include \"apr_tables.h\"\n\n#include \"http_config.h\"\n\n#if APR_HAVE_STRUCT_RLIMIT\n#include <sys/time.h>\n#include <sys/resource.h>\n#endif\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* ****************************************************************\n *\n * The most basic server code is encapsulated in a single module\n * known as the core, which is just *barely* functional enough to\n * serve documents, though not terribly well.\n *\n * Largely for NCSA back-compatibility reasons, the core needs to\n * make pieces of its config structures available to other modules.\n * The accessors are declared here, along with the interpretation\n * of one of them (allow_options).\n */\n\n/**\n * @defgroup APACHE_CORE_HTTPD_ACESSORS Acessors\n *\n * @brief File/Directory Accessor directives\n *\n * @{\n */\n\n/** No directives */\n#define OPT_NONE 0\n/** Indexes directive */\n#define OPT_INDEXES 1\n/** SSI is enabled without exec= permission  */\n#define OPT_INCLUDES 2\n/**  FollowSymLinks directive */\n#define OPT_SYM_LINKS 4\n/**  ExecCGI directive */\n#define OPT_EXECCGI 8\n/**  directive unset */\n#define OPT_UNSET 16\n/**  SSI exec= permission is permitted, iff OPT_INCLUDES is also set */\n#define OPT_INC_WITH_EXEC 32\n/** SymLinksIfOwnerMatch directive */\n#define OPT_SYM_OWNER 64\n/** MultiViews directive */\n#define OPT_MULTI 128\n/**  All directives */\n#define OPT_ALL (OPT_INDEXES|OPT_INCLUDES|OPT_INC_WITH_EXEC|OPT_SYM_LINKS|OPT_EXECCGI)\n/** @} */\n\n/**\n * @defgroup get_remote_host Remote Host Resolution\n * @ingroup APACHE_CORE_HTTPD\n * @{\n */\n/** REMOTE_HOST returns the hostname, or NULL if the hostname\n * lookup fails.  It will force a DNS lookup according to the\n * HostnameLookups setting.\n */\n#define REMOTE_HOST (0)\n\n/** REMOTE_NAME returns the hostname, or the dotted quad if the\n * hostname lookup fails.  It will force a DNS lookup according\n * to the HostnameLookups setting.\n */\n#define REMOTE_NAME (1)\n\n/** REMOTE_NOLOOKUP is like REMOTE_NAME except that a DNS lookup is\n * never forced.\n */\n#define REMOTE_NOLOOKUP (2)\n\n/** REMOTE_DOUBLE_REV will always force a DNS lookup, and also force\n * a double reverse lookup, regardless of the HostnameLookups\n * setting.  The result is the (double reverse checked) hostname,\n * or NULL if any of the lookups fail.\n */\n#define REMOTE_DOUBLE_REV (3)\n\n/** @} // get_remote_host */\n\n/** all of the requirements must be met */\n#define SATISFY_ALL 0\n/**  any of the requirements must be met */\n#define SATISFY_ANY 1\n/** There are no applicable satisfy lines */\n#define SATISFY_NOSPEC 2\n\n/** Make sure we don't write less than 8000 bytes at any one time.\n */\n#define AP_MIN_BYTES_TO_WRITE  8000\n\n/** default maximum of internal redirects */\n# define AP_DEFAULT_MAX_INTERNAL_REDIRECTS 10\n\n/** default maximum subrequest nesting level */\n# define AP_DEFAULT_MAX_SUBREQ_DEPTH 10\n\n/**\n * Retrieve the value of Options for this request\n * @param r The current request\n * @return the Options bitmask\n */\nAP_DECLARE(int) ap_allow_options(request_rec *r);\n\n/**\n * Retrieve the value of the AllowOverride for this request\n * @param r The current request\n * @return the overrides bitmask\n */\nAP_DECLARE(int) ap_allow_overrides(request_rec *r);\n\n/**\n * Retrieve the document root for this server\n * @param r The current request\n * @warning Don't use this!  If your request went through a Userdir, or\n * something like that, it'll screw you.  But it's back-compatible...\n * @return The document root\n */\nAP_DECLARE(const char *) ap_document_root(request_rec *r);\n\n/**\n * Lookup the remote user agent's DNS name or IP address\n * @ingroup get_remote_host\n * @param req The current request\n * @param type The type of lookup to perform.  One of:\n * <pre>\n *     REMOTE_HOST returns the hostname, or NULL if the hostname\n *                 lookup fails.  It will force a DNS lookup according to the\n *                 HostnameLookups setting.\n *     REMOTE_NAME returns the hostname, or the dotted quad if the\n *                 hostname lookup fails.  It will force a DNS lookup according\n *                 to the HostnameLookups setting.\n *     REMOTE_NOLOOKUP is like REMOTE_NAME except that a DNS lookup is\n *                     never forced.\n *     REMOTE_DOUBLE_REV will always force a DNS lookup, and also force\n *                   a double reverse lookup, regardless of the HostnameLookups\n *                   setting.  The result is the (double reverse checked)\n *                   hostname, or NULL if any of the lookups fail.\n * </pre>\n * @param str_is_ip unless NULL is passed, this will be set to non-zero on\n *        output when an IP address string is returned\n * @return The remote hostname (based on the request useragent_ip)\n */\nAP_DECLARE(const char *) ap_get_useragent_host(request_rec *req, int type,\n                                               int *str_is_ip);\n\n/**\n * Lookup the remote client's DNS name or IP address\n * @ingroup get_remote_host\n * @param conn The current connection\n * @param dir_config The directory config vector from the request\n * @param type The type of lookup to perform.  One of:\n * <pre>\n *     REMOTE_HOST returns the hostname, or NULL if the hostname\n *                 lookup fails.  It will force a DNS lookup according to the\n *                 HostnameLookups setting.\n *     REMOTE_NAME returns the hostname, or the dotted quad if the\n *                 hostname lookup fails.  It will force a DNS lookup according\n *                 to the HostnameLookups setting.\n *     REMOTE_NOLOOKUP is like REMOTE_NAME except that a DNS lookup is\n *                     never forced.\n *     REMOTE_DOUBLE_REV will always force a DNS lookup, and also force\n *                   a double reverse lookup, regardless of the HostnameLookups\n *                   setting.  The result is the (double reverse checked)\n *                   hostname, or NULL if any of the lookups fail.\n * </pre>\n * @param str_is_ip unless NULL is passed, this will be set to non-zero on output when an IP address\n *        string is returned\n * @return The remote hostname (based on the connection client_ip)\n */\nAP_DECLARE(const char *) ap_get_remote_host(conn_rec *conn, void *dir_config, int type, int *str_is_ip);\n\n/**\n * Retrieve the login name of the remote user.  Undef if it could not be\n * determined\n * @param r The current request\n * @return The user logged in to the client machine\n */\nAP_DECLARE(const char *) ap_get_remote_logname(request_rec *r);\n\n/* Used for constructing self-referencing URLs, and things like SERVER_PORT,\n * and SERVER_NAME.\n */\n/**\n * build a fully qualified URL from the uri and information in the request rec\n * @param p The pool to allocate the URL from\n * @param uri The path to the requested file\n * @param r The current request\n * @return A fully qualified URL\n */\nAP_DECLARE(char *) ap_construct_url(apr_pool_t *p, const char *uri, request_rec *r);\n\n/**\n * Get the current server name from the request\n * @param r The current request\n * @return the server name\n */\nAP_DECLARE(const char *) ap_get_server_name(request_rec *r);\n\n/**\n * Get the current server name from the request for the purposes\n * of using in a URL.  If the server name is an IPv6 literal\n * address, it will be returned in URL format (e.g., \"[fe80::1]\").\n * @param r The current request\n * @return the server name\n */\nAP_DECLARE(const char *) ap_get_server_name_for_url(request_rec *r);\n\n/**\n * Get the current server port\n * @param r The current request\n * @return The server's port\n */\nAP_DECLARE(apr_port_t) ap_get_server_port(const request_rec *r);\n\n/**\n * Get the size of read buffers\n * @param r The current request\n * @return The read buffers size\n */\nAP_DECLARE(apr_size_t) ap_get_read_buf_size(const request_rec *r);\n\n/**\n * Return the limit on bytes in request msg body\n * @param r The current request\n * @return the maximum number of bytes in the request msg body\n */\nAP_DECLARE(apr_off_t) ap_get_limit_req_body(const request_rec *r);\n\n/**\n * Return the limit on bytes in XML request msg body\n * @param r The current request\n * @return the maximum number of bytes in XML request msg body\n */\nAP_DECLARE(apr_size_t) ap_get_limit_xml_body(const request_rec *r);\n\n/**\n * Install a custom response handler for a given status\n * @param r The current request\n * @param status The status for which the custom response should be used\n * @param string The custom response.  This can be a static string, a file\n *               or a URL\n */\nAP_DECLARE(void) ap_custom_response(request_rec *r, int status, const char *string);\n\n/**\n * Check if the current request is beyond the configured max. number of redirects or subrequests\n * @param r The current request\n * @return true (is exceeded) or false\n */\nAP_DECLARE(int) ap_is_recursion_limit_exceeded(const request_rec *r);\n\n/**\n * Check for a definition from the server command line\n * @param name The define to check for\n * @return 1 if defined, 0 otherwise\n */\nAP_DECLARE(int) ap_exists_config_define(const char *name);\n/* FIXME! See STATUS about how */\nAP_DECLARE_NONSTD(int) ap_core_translate(request_rec *r);\n\n/* Authentication stuff.  This is one of the places where compatibility\n * with the old config files *really* hurts; they don't discriminate at\n * all between different authentication schemes, meaning that we need\n * to maintain common state for all of them in the core, and make it\n * available to the other modules through interfaces.\n */\n\n/** @see require_line */\ntypedef struct require_line require_line;\n\n/**\n * @brief A structure to keep track of authorization requirements\n*/\nstruct require_line {\n    /** Where the require line is in the config file. */\n    apr_int64_t method_mask;\n    /** The complete string from the command line */\n    char *requirement;\n};\n\n/**\n * Return the type of authorization required for this request\n * @param r The current request\n * @return The authorization required\n */\nAP_DECLARE(const char *) ap_auth_type(request_rec *r);\n\n/**\n * Return the current Authorization realm\n * @param r The current request\n * @return The current authorization realm\n */\nAP_DECLARE(const char *) ap_auth_name(request_rec *r);\n\n/**\n * How the requires lines must be met.\n * @param r The current request\n * @return How the requirements must be met.  One of:\n * <pre>\n *      SATISFY_ANY    -- any of the requirements must be met.\n *      SATISFY_ALL    -- all of the requirements must be met.\n *      SATISFY_NOSPEC -- There are no applicable satisfy lines\n * </pre>\n */\nAP_DECLARE(int) ap_satisfies(request_rec *r);\n\n/**\n * Core is also unlike other modules in being implemented in more than\n * one file... so, data structures are declared here, even though most of\n * the code that cares really is in http_core.c.  Also, another accessor.\n */\nAP_DECLARE_DATA extern module core_module;\n\n/**\n * Accessor for core_module's specific data. Equivalent to\n * ap_get_module_config(cv, &core_module) but more efficient.\n * @param cv The vector in which the modules configuration is stored.\n *        usually r->per_dir_config or s->module_config\n * @return The module-specific data\n */\nAP_DECLARE(void *) ap_get_core_module_config(const ap_conf_vector_t *cv);\n\n/**\n * Accessor to set core_module's specific data. Equivalent to\n * ap_set_module_config(cv, &core_module, val) but more efficient.\n * @param cv The vector in which the modules configuration is stored.\n *        usually r->per_dir_config or s->module_config\n * @param val The module-specific data to set\n */\nAP_DECLARE(void) ap_set_core_module_config(ap_conf_vector_t *cv, void *val);\n\n/** Get the socket from the core network filter. This should be used instead of\n * accessing the core connection config directly.\n * @param c The connection record\n * @return The socket\n */\nAP_DECLARE(apr_socket_t *) ap_get_conn_socket(conn_rec *c);\n\n#ifndef AP_DEBUG\n#define AP_CORE_MODULE_INDEX  0\n#define ap_get_core_module_config(v) \\\n    (((void **)(v))[AP_CORE_MODULE_INDEX])\n#define ap_set_core_module_config(v, val) \\\n    ((((void **)(v))[AP_CORE_MODULE_INDEX]) = (val))\n#else\n#define AP_CORE_MODULE_INDEX  (AP_DEBUG_ASSERT(core_module.module_index == 0), 0)\n#endif\n\n/**\n * @brief  Per-request configuration\n*/\ntypedef struct {\n    /** bucket brigade used by getline for look-ahead and\n     * ap_get_client_block for holding left-over request body */\n    struct apr_bucket_brigade *bb;\n\n    /** an array of per-request working data elements, accessed\n     * by ID using ap_get_request_note()\n     * (Use ap_register_request_note() during initialization\n     * to add elements)\n     */\n    void **notes;\n\n    /** Custom response strings registered via ap_custom_response(),\n     * or NULL; check per-dir config if nothing found here\n     */\n    char **response_code_strings; /* from ap_custom_response(), not from\n                                   * ErrorDocument\n                                   */\n\n    /** per-request document root of the server. This allows mass vhosting\n     * modules better compatibility with some scripts. Normally the\n     * context_* info should be used instead */\n    const char *document_root;\n\n    /*\n     * more fine-grained context information which is set by modules like\n     * mod_alias and mod_userdir\n     */\n    /** the context root directory on disk for the current resource,\n     *  without trailing slash\n     */\n    const char *context_document_root;\n    /** the URI prefix that corresponds to the context_document_root directory,\n     *  without trailing slash\n     */\n    const char *context_prefix;\n\n    /** There is a script processor installed on the output filter chain,\n     * so it needs the default_handler to deliver a (script) file into\n     * the chain so it can process it. Normally, default_handler only\n     * serves files on a GET request (assuming the file is actual content),\n     * since other methods are not content-retrieval. This flag overrides\n     * that behavior, stating that the \"content\" is actually a script and\n     * won't actually be delivered as the response for the non-GET method.\n     */\n    int deliver_script;\n\n    /** Should addition of charset= be suppressed for this request?\n     */\n    int suppress_charset;\n} core_request_config;\n\n/* Standard entries that are guaranteed to be accessible via\n * ap_get_request_note() for each request (additional entries\n * can be added with ap_register_request_note())\n */\n#define AP_NOTE_DIRECTORY_WALK 0\n#define AP_NOTE_LOCATION_WALK  1\n#define AP_NOTE_FILE_WALK      2\n#define AP_NOTE_IF_WALK        3\n#define AP_NUM_STD_NOTES       4\n\n/**\n * Reserve an element in the core_request_config->notes array\n * for some application-specific data\n * @return An integer key that can be passed to ap_get_request_note()\n *         during request processing to access this element for the\n *         current request.\n */\nAP_DECLARE(apr_size_t) ap_register_request_note(void);\n\n/**\n * Retrieve a pointer to an element in the core_request_config->notes array\n * @param r The request\n * @param note_num  A key for the element: either a value obtained from\n *        ap_register_request_note() or one of the predefined AP_NOTE_*\n *        values.\n * @return NULL if the note_num is invalid, otherwise a pointer to the\n *         requested note element.\n * @remark At the start of a request, each note element is NULL.  The\n *         handle provided by ap_get_request_note() is a pointer-to-pointer\n *         so that the caller can point the element to some app-specific\n *         data structure.  The caller should guarantee that any such\n *         structure will last as long as the request itself.\n */\nAP_DECLARE(void **) ap_get_request_note(request_rec *r, apr_size_t note_num);\n\n\ntypedef unsigned char allow_options_t;\ntypedef unsigned int overrides_t;\n\n/*\n * Bits of info that go into making an ETag for a file\n * document.  Why a long?  Because char historically\n * proved too short for Options, and int can be different\n * sizes on different platforms.\n */\ntypedef unsigned long etag_components_t;\n\n#define ETAG_UNSET  0\n#define ETAG_NONE   (1 << 0)\n#define ETAG_MTIME  (1 << 1)\n#define ETAG_INODE  (1 << 2)\n#define ETAG_SIZE   (1 << 3)\n#define ETAG_DIGEST (1 << 4)\n#define ETAG_ALL    (ETAG_MTIME | ETAG_INODE | ETAG_SIZE)\n/* This is the default value used */\n#define ETAG_BACKWARD (ETAG_MTIME | ETAG_SIZE)\n\n/* Generic ON/OFF/UNSET for unsigned int foo :2 */\n#define AP_CORE_CONFIG_OFF   (0)\n#define AP_CORE_CONFIG_ON    (1)\n#define AP_CORE_CONFIG_UNSET (2)\n\n/* Generic merge of flag */\n#define AP_CORE_MERGE_FLAG(field, to, base, over) to->field = \\\n               over->field != AP_CORE_CONFIG_UNSET            \\\n               ? over->field                                  \\\n               : base->field                                   \n\n/**\n * @brief Server Signature Enumeration\n */\ntypedef enum {\n    srv_sig_unset,\n    srv_sig_off,\n    srv_sig_on,\n    srv_sig_withmail\n} server_signature_e;\n\n/**\n * @brief Per-directory configuration\n */\ntypedef struct {\n    /** path of the directory/regex/etc. see also d_is_fnmatch/absolute below */\n    char *d;\n    /** the number of slashes in d */\n    unsigned d_components;\n\n    /** If (opts & OPT_UNSET) then no absolute assignment to options has\n     * been made.\n     * invariant: (opts_add & opts_remove) == 0\n     * Which said another way means that the last relative (options + or -)\n     * assignment made to each bit is recorded in exactly one of opts_add\n     * or opts_remove.\n     */\n    allow_options_t opts;\n    allow_options_t opts_add;\n    allow_options_t opts_remove;\n    overrides_t override;\n    allow_options_t override_opts;\n\n    /* Used to be the custom response config. No longer used. */\n    char **response_code_strings; /* from ErrorDocument, not from\n                                   * ap_custom_response() */\n\n    /* Hostname resolution etc */\n#define HOSTNAME_LOOKUP_OFF     0\n#define HOSTNAME_LOOKUP_ON      1\n#define HOSTNAME_LOOKUP_DOUBLE  2\n#define HOSTNAME_LOOKUP_UNSET   3\n    unsigned int hostname_lookups : 4;\n\n    unsigned int content_md5 : 2;  /* calculate Content-MD5? */\n\n#define USE_CANONICAL_NAME_OFF   (0)\n#define USE_CANONICAL_NAME_ON    (1)\n#define USE_CANONICAL_NAME_DNS   (2)\n#define USE_CANONICAL_NAME_UNSET (3)\n    unsigned use_canonical_name : 2;\n\n    /* since is_fnmatch(conf->d) was being called so frequently in\n     * directory_walk() and its relatives, this field was created and\n     * is set to the result of that call.\n     */\n    unsigned d_is_fnmatch : 1;\n\n    /* should we force a charset on any outgoing parameterless content-type?\n     * if so, which charset?\n     */\n#define ADD_DEFAULT_CHARSET_OFF   (0)\n#define ADD_DEFAULT_CHARSET_ON    (1)\n#define ADD_DEFAULT_CHARSET_UNSET (2)\n    unsigned add_default_charset : 2;\n    const char *add_default_charset_name;\n\n    /* System Resource Control */\n#ifdef RLIMIT_CPU\n    struct rlimit *limit_cpu;\n#endif\n#if defined (RLIMIT_DATA) || defined (RLIMIT_VMEM) || defined(RLIMIT_AS)\n    struct rlimit *limit_mem;\n#endif\n#ifdef RLIMIT_NPROC\n    struct rlimit *limit_nproc;\n#endif\n    apr_off_t limit_req_body;      /* limit on bytes in request msg body */\n    long limit_xml_body;           /* limit on bytes in XML request msg body */\n\n    /* logging options */\n\n    server_signature_e server_signature;\n\n    /* Access control */\n    apr_array_header_t *sec_file;\n    apr_array_header_t *sec_if;\n    ap_regex_t *r;\n\n    const char *mime_type;       /* forced with ForceType  */\n    const char *handler;         /* forced by something other than SetHandler */\n    const char *output_filters;  /* forced with SetOutputFilters */\n    const char *input_filters;   /* forced with SetInputFilters */\n    int accept_path_info;        /* forced with AcceptPathInfo */\n\n    /*\n     * What attributes/data should be included in ETag generation?\n     */\n    etag_components_t etag_bits;\n    etag_components_t etag_add;\n    etag_components_t etag_remove;\n\n    /*\n     * Run-time performance tuning\n     */\n#define ENABLE_MMAP_OFF    (0)\n#define ENABLE_MMAP_ON     (1)\n#define ENABLE_MMAP_UNSET  (2)\n    unsigned int enable_mmap : 2;  /* whether files in this dir can be mmap'ed */\n\n#define ENABLE_SENDFILE_OFF    (0)\n#define ENABLE_SENDFILE_ON     (1)\n#define ENABLE_SENDFILE_UNSET  (2)\n    unsigned int enable_sendfile : 2;  /* files in this dir can be sendfile'ed */\n\n#define USE_CANONICAL_PHYS_PORT_OFF   (0)\n#define USE_CANONICAL_PHYS_PORT_ON    (1)\n#define USE_CANONICAL_PHYS_PORT_UNSET (2)\n    unsigned int use_canonical_phys_port : 2;\n\n    unsigned int allow_encoded_slashes : 1; /* URLs may contain %2f w/o being\n                                             * pitched indiscriminately */\n    unsigned int decode_encoded_slashes : 1; /* whether to decode encoded slashes in URLs */\n\n#define AP_CONDITION_IF        1\n#define AP_CONDITION_ELSE      2\n#define AP_CONDITION_ELSEIF    (AP_CONDITION_ELSE|AP_CONDITION_IF)\n    unsigned int condition_ifelse : 2; /* is this an <If>, <ElseIf>, or <Else> */\n\n    ap_expr_info_t *condition;   /* Conditionally merge <If> sections */\n\n    /** per-dir log config */\n    struct ap_logconf *log;\n\n    /** Table of directives allowed per AllowOverrideList */\n    apr_table_t *override_list;\n\n#define AP_MAXRANGES_UNSET     -1\n#define AP_MAXRANGES_DEFAULT   -2\n#define AP_MAXRANGES_UNLIMITED -3\n#define AP_MAXRANGES_NORANGES   0\n    /** Number of Ranges before returning HTTP_OK. **/\n    int max_ranges;\n    /** Max number of Range overlaps (merges) allowed **/\n    int max_overlaps;\n    /** Max number of Range reversals (eg: 200-300, 100-125) allowed **/\n    int max_reversals;\n\n    /** Named back references */\n    apr_array_header_t *refs;\n\n    /** Custom response config with expression support. The hash table\n     * contains compiled expressions keyed against the custom response\n     * code.\n     */\n    apr_hash_t *response_code_exprs;\n\n#define AP_CGI_PASS_AUTH_OFF     (0)\n#define AP_CGI_PASS_AUTH_ON      (1)\n#define AP_CGI_PASS_AUTH_UNSET   (2)\n    /** CGIPassAuth: Whether HTTP authorization headers will be passed to\n     * scripts as CGI variables; affects all modules calling\n     * ap_add_common_vars(), as well as any others using this field as \n     * advice\n     */\n    unsigned int cgi_pass_auth : 2;\n    unsigned int qualify_redirect_url :2;\n    ap_expr_info_t  *expr_handler;         /* forced with SetHandler */\n\n    /** Table of rules for building CGI variables, NULL if none configured */\n    apr_hash_t *cgi_var_rules;\n\n    apr_size_t read_buf_size;\n} core_dir_config;\n\n/* macro to implement off by default behaviour */\n#define AP_SENDFILE_ENABLED(x) \\\n    ((x) == ENABLE_SENDFILE_ON ? APR_SENDFILE_ENABLED : 0)\n\n/* Per-server core configuration */\n\ntypedef struct {\n\n    char *gprof_dir;\n\n    /* Name translations --- we want the core to be able to do *something*\n     * so it's at least a minimally functional web server on its own (and\n     * can be tested that way).  But let's keep it to the bare minimum:\n     */\n    const char *ap_document_root;\n\n    /* Access control */\n\n    char *access_name;\n    apr_array_header_t *sec_dir;\n    apr_array_header_t *sec_url;\n\n    /* recursion backstopper */\n    int redirect_limit; /* maximum number of internal redirects */\n    int subreq_limit;   /* maximum nesting level of subrequests */\n\n    const char *protocol;\n    apr_table_t *accf_map;\n\n    /* array of ap_errorlog_format_item for error log format string */\n    apr_array_header_t *error_log_format;\n    /*\n     * two arrays of arrays of ap_errorlog_format_item for additional information\n     * logged to the error log once per connection/request\n     */\n    apr_array_header_t *error_log_conn;\n    apr_array_header_t *error_log_req;\n\n    /* TRACE control */\n#define AP_TRACE_UNSET    -1\n#define AP_TRACE_DISABLE   0\n#define AP_TRACE_ENABLE    1\n#define AP_TRACE_EXTENDED  2\n    int trace_enable;\n#define AP_MERGE_TRAILERS_UNSET    0\n#define AP_MERGE_TRAILERS_ENABLE   1\n#define AP_MERGE_TRAILERS_DISABLE  2\n    int merge_trailers;\n\n    apr_array_header_t *protocols;\n    int protocols_honor_order;\n\n#define AP_HTTP09_UNSET   0\n#define AP_HTTP09_ENABLE  1\n#define AP_HTTP09_DISABLE 2\n    char http09_enable;\n\n#define AP_HTTP_CONFORMANCE_UNSET     0\n#define AP_HTTP_CONFORMANCE_UNSAFE    1\n#define AP_HTTP_CONFORMANCE_STRICT    2\n    char http_conformance;\n\n#define AP_HTTP_METHODS_UNSET         0\n#define AP_HTTP_METHODS_LENIENT       1\n#define AP_HTTP_METHODS_REGISTERED    2\n    char http_methods;\n    unsigned int merge_slashes;\n \n    apr_size_t   flush_max_threshold;\n    apr_int32_t  flush_max_pipelined;\n} core_server_config;\n\n/* for AddOutputFiltersByType in core.c */\nvoid ap_add_output_filters_by_type(request_rec *r);\n\n/* for http_config.c */\nvoid ap_core_reorder_directories(apr_pool_t *, server_rec *);\n\n/* for mod_perl */\nAP_CORE_DECLARE(void) ap_add_per_dir_conf(server_rec *s, void *dir_config);\nAP_CORE_DECLARE(void) ap_add_per_url_conf(server_rec *s, void *url_config);\nAP_CORE_DECLARE(void) ap_add_file_conf(apr_pool_t *p, core_dir_config *conf, void *url_config);\nAP_CORE_DECLARE(const char *) ap_add_if_conf(apr_pool_t *p, core_dir_config *conf, void *url_config);\nAP_CORE_DECLARE_NONSTD(const char *) ap_limit_section(cmd_parms *cmd, void *dummy, const char *arg);\n\n/* Core filters; not exported. */\napr_status_t ap_core_input_filter(ap_filter_t *f, apr_bucket_brigade *b,\n                                  ap_input_mode_t mode, apr_read_type_e block,\n                                  apr_off_t readbytes);\napr_status_t ap_core_output_filter(ap_filter_t *f, apr_bucket_brigade *b);\n\n\nAP_DECLARE(const char*) ap_get_server_protocol(server_rec* s);\nAP_DECLARE(void) ap_set_server_protocol(server_rec* s, const char* proto);\n\ntypedef struct core_output_filter_ctx core_output_filter_ctx_t;\ntypedef struct core_filter_ctx        core_ctx_t;\n\ntypedef struct core_net_rec {\n    /** Connection to the client */\n    apr_socket_t *client_socket;\n\n    /** connection record */\n    conn_rec *c;\n\n    core_output_filter_ctx_t *out_ctx;\n    core_ctx_t *in_ctx;\n} core_net_rec;\n\n/**\n * Insert the network bucket into the core input filter's input brigade.\n * This hook is intended for MPMs or protocol modules that need to do special\n * socket setup.\n * @param c The connection\n * @param bb The brigade to insert the bucket into\n * @param socket The socket to put into a bucket\n * @return AP_DECLINED if the current function does not handle this connection,\n *         APR_SUCCESS or an error otherwise.\n */\nAP_DECLARE_HOOK(apr_status_t, insert_network_bucket,\n                (conn_rec *c, apr_bucket_brigade *bb, apr_socket_t *socket))\n\n/* ----------------------------------------------------------------------\n *\n * Runtime status/management\n */\n\ntypedef enum {\n    ap_mgmt_type_string,\n    ap_mgmt_type_long,\n    ap_mgmt_type_hash\n} ap_mgmt_type_e;\n\ntypedef union {\n    const char *s_value;\n    long i_value;\n    apr_hash_t *h_value;\n} ap_mgmt_value;\n\ntypedef struct {\n    const char *description;\n    const char *name;\n    ap_mgmt_type_e vtype;\n    ap_mgmt_value v;\n} ap_mgmt_item_t;\n\n/* Handles for core filters */\nAP_DECLARE_DATA extern ap_filter_rec_t *ap_subreq_core_filter_handle;\nAP_DECLARE_DATA extern ap_filter_rec_t *ap_core_output_filter_handle;\nAP_DECLARE_DATA extern ap_filter_rec_t *ap_content_length_filter_handle;\nAP_DECLARE_DATA extern ap_filter_rec_t *ap_core_input_filter_handle;\n\n/**\n * This hook provdes a way for modules to provide metrics/statistics about\n * their operational status.\n *\n * @param p A pool to use to create entries in the hash table\n * @param val The name of the parameter(s) that is wanted. This is\n *            tree-structured would be in the form ('*' is all the tree,\n *            'module.*' all of the module , 'module.foo.*', or\n *            'module.foo.bar' )\n * @param ht The hash table to store the results. Keys are item names, and\n *           the values point to ap_mgmt_item_t structures.\n * @ingroup hooks\n */\nAP_DECLARE_HOOK(int, get_mgmt_items,\n                (apr_pool_t *p, const char * val, apr_hash_t *ht))\n\n/* ---------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n *\n * I/O logging with mod_logio\n */\n\nAPR_DECLARE_OPTIONAL_FN(void, ap_logio_add_bytes_out,\n                        (conn_rec *c, apr_off_t bytes));\n\nAPR_DECLARE_OPTIONAL_FN(void, ap_logio_add_bytes_in,\n                        (conn_rec *c, apr_off_t bytes));\n\nAPR_DECLARE_OPTIONAL_FN(apr_off_t, ap_logio_get_last_bytes, (conn_rec *c));\n\n/* ----------------------------------------------------------------------\n *\n * Error log formats\n */\n\n/**\n * The info structure passed to callback functions of errorlog handlers.\n * Not all information is available in all contexts. In particular, all\n * pointers may be NULL.\n */\ntypedef struct ap_errorlog_info {\n    /** current server_rec.\n     *  Should be preferred over c->base_server and r->server\n     */\n    const server_rec *s;\n\n    /** current conn_rec.\n     *  Should be preferred over r->connection\n     */\n    const conn_rec *c;\n\n    /** current request_rec. */\n    const request_rec *r;\n    /** r->main if r is a subrequest, otherwise equal to r */\n    const request_rec *rmain;\n\n    /** pool passed to ap_log_perror, NULL otherwise */\n    apr_pool_t *pool;\n\n    /** name of source file where the log message was produced, NULL if N/A. */\n    const char *file;\n    /** line number in the source file, 0 if N/A */\n    int line;\n\n    /** module index of module that produced the log message, APLOG_NO_MODULE if N/A. */\n    int module_index;\n    /** log level of error message (flags like APLOG_STARTUP have been removed), -1 if N/A */\n    int level;\n\n    /** apr error status related to the log message, 0 if no error */\n    apr_status_t status;\n\n    /** 1 if logging to syslog, 0 otherwise */\n    int using_syslog;\n    /** 1 if APLOG_STARTUP was set for the log message, 0 otherwise */\n    int startup;\n\n    /** message format */\n    const char *format;\n} ap_errorlog_info;\n\n/**\n * callback function prototype for a external errorlog handler\n * @note To avoid unbounded memory usage, these functions must not allocate\n * memory from the server, connection, or request pools. If an errorlog\n * handler absolutely needs a pool to pass to other functions, it must create\n * and destroy a sub-pool.\n */\ntypedef int ap_errorlog_handler_fn_t(const ap_errorlog_info *info,\n                                     const char *arg, char *buf, int buflen);\n\n/**\n * Register external errorlog handler\n * @param p config pool to use\n * @param tag the new format specifier (i.e. the letter after the %)\n * @param handler the handler function\n * @param flags flags (reserved, set to 0)\n */\nAP_DECLARE(void) ap_register_errorlog_handler(apr_pool_t *p, char *tag,\n                                              ap_errorlog_handler_fn_t *handler,\n                                              int flags);\n\ntypedef struct ap_errorlog_handler {\n    ap_errorlog_handler_fn_t *func;\n    int flags; /* for future extensions */\n} ap_errorlog_handler;\n\n  /** item starts a new field */\n#define AP_ERRORLOG_FLAG_FIELD_SEP       1\n  /** item is the actual error message */\n#define AP_ERRORLOG_FLAG_MESSAGE         2\n  /** skip whole line if item is zero-length */\n#define AP_ERRORLOG_FLAG_REQUIRED        4\n  /** log zero-length item as '-' */\n#define AP_ERRORLOG_FLAG_NULL_AS_HYPHEN  8\n\ntypedef struct {\n    /** ap_errorlog_handler function */\n    ap_errorlog_handler_fn_t *func;\n    /** argument passed to item in {} */\n    const char *arg;\n    /** a combination of the AP_ERRORLOG_* flags */\n    unsigned int flags;\n    /** only log item if the message's log level is higher than this */\n    unsigned int min_loglevel;\n} ap_errorlog_format_item;\n\n/**\n * hook method to log error messages\n * @ingroup hooks\n * @param info pointer to ap_errorlog_info struct which contains all\n *        the details\n * @param errstr the (unformatted) message to log\n * @warning Allocating from the usual pools (pool, info->c->pool, info->p->pool)\n *          must be avoided because it can cause memory leaks.\n *          Use a subpool if necessary.\n */\nAP_DECLARE_HOOK(void, error_log, (const ap_errorlog_info *info,\n                                  const char *errstr))\n\nAP_CORE_DECLARE(void) ap_register_log_hooks(apr_pool_t *p);\nAP_CORE_DECLARE(void) ap_register_config_hooks(apr_pool_t *p);\n\n/* ----------------------------------------------------------------------\n *\n * ident lookups with mod_ident\n */\n\nAPR_DECLARE_OPTIONAL_FN(const char *, ap_ident_lookup,\n                        (request_rec *r));\n\n/* ----------------------------------------------------------------------\n *\n * authorization values with mod_authz_core\n */\n\nAPR_DECLARE_OPTIONAL_FN(int, authz_some_auth_required, (request_rec *r));\nAPR_DECLARE_OPTIONAL_FN(const char *, authn_ap_auth_type, (request_rec *r));\nAPR_DECLARE_OPTIONAL_FN(const char *, authn_ap_auth_name, (request_rec *r));\n\n/* ----------------------------------------------------------------------\n *\n * authorization values with mod_access_compat\n */\n\nAPR_DECLARE_OPTIONAL_FN(int, access_compat_ap_satisfies, (request_rec *r));\n\n/* ---------------------------------------------------------------------- */\n\n/** Query the server for some state information\n * @param query_code Which information is requested\n * @return the requested state information\n */\nAP_DECLARE(int) ap_state_query(int query_code);\n\n/*\n * possible values for query_code in ap_state_query()\n */\n\n  /** current status of the server */\n#define AP_SQ_MAIN_STATE        0\n  /** are we going to serve requests or are we just testing/dumping config */\n#define AP_SQ_RUN_MODE          1\n    /** generation of the top-level apache parent */\n#define AP_SQ_CONFIG_GEN        2\n\n/*\n * return values for ap_state_query()\n */\n\n  /** return value for unknown query_code */\n#define AP_SQ_NOT_SUPPORTED       -1\n\n/* values returned for AP_SQ_MAIN_STATE */\n  /** before the config preflight */\n#define AP_SQ_MS_INITIAL_STARTUP   1\n  /** initial configuration run for setting up log config, etc. */\n#define AP_SQ_MS_CREATE_PRE_CONFIG 2\n  /** tearing down configuration */\n#define AP_SQ_MS_DESTROY_CONFIG    3\n  /** normal configuration run */\n#define AP_SQ_MS_CREATE_CONFIG     4\n  /** running the MPM */\n#define AP_SQ_MS_RUN_MPM           5\n  /** cleaning up for exit */\n#define AP_SQ_MS_EXITING           6\n\n/* values returned for AP_SQ_RUN_MODE */\n  /** command line not yet parsed */\n#define AP_SQ_RM_UNKNOWN           1\n  /** normal operation (server requests or signal server) */\n#define AP_SQ_RM_NORMAL            2\n  /** config test only */\n#define AP_SQ_RM_CONFIG_TEST       3\n  /** only dump some parts of the config */\n#define AP_SQ_RM_CONFIG_DUMP       4\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif  /* !APACHE_HTTP_CORE_H */\n/** @} */\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  http_protocol.h\n * @brief HTTP protocol handling\n *\n * @defgroup APACHE_CORE_PROTO HTTP Protocol Handling\n * @ingroup  APACHE_CORE\n * @{\n */\n\n#ifndef APACHE_HTTP_PROTOCOL_H\n#define APACHE_HTTP_PROTOCOL_H\n\n#include \"httpd.h\"\n#include \"apr_portable.h\"\n#include \"apr_mmap.h\"\n#include \"apr_buckets.h\"\n#include \"util_filter.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * This hook allows modules to insert filters for the current error response\n * @param r the current request\n * @ingroup hooks\n */\nAP_DECLARE_HOOK(void,insert_error_filter,(request_rec *r))\n\n/** This is an optimization.  We keep a record of the filter_rec that\n * stores the old_write filter, so that we can avoid strcmp's later.\n */\nAP_DECLARE_DATA extern ap_filter_rec_t *ap_old_write_func;\n\n/*\n * Prototypes for routines which either talk directly back to the user,\n * or control the ones that eventually do.\n */\n\n/**\n * Read a request and fill in the fields.\n * @param c The current connection\n * @return The new request_rec\n */\nrequest_rec *ap_read_request(conn_rec *c);\n\n/**\n * Read the mime-encoded headers.\n * @param r The current request\n */\nAP_DECLARE(void) ap_get_mime_headers(request_rec *r);\n\n/**\n * Optimized version of ap_get_mime_headers() that requires a\n * temporary brigade to work with\n * @param r The current request\n * @param bb temp brigade\n */\nAP_DECLARE(void) ap_get_mime_headers_core(request_rec *r,\n                                          apr_bucket_brigade *bb);\n\n/* Finish up stuff after a request */\n\n/**\n * Called at completion of sending the response.  It sends the terminating\n * protocol information.\n * @param r The current request\n */\nAP_DECLARE(void) ap_finalize_request_protocol(request_rec *r);\n\n/**\n * Send error back to client.\n * @param r The current request\n * @param recursive_error last arg indicates error status in case we get\n *      an error in the process of trying to deal with an ErrorDocument\n *      to handle some other error.  In that case, we print the default\n *      report for the first thing that went wrong, and more briefly report\n *      on the problem with the ErrorDocument.\n */\nAP_DECLARE(void) ap_send_error_response(request_rec *r, int recursive_error);\n\n/* Set last modified header line from the lastmod date of the associated file.\n * Also, set content length.\n *\n * May return an error status, typically HTTP_NOT_MODIFIED (that when the\n * permit_cache argument is set to one).\n */\n\n/**\n * Set the content length for this request\n * @param r The current request\n * @param length The new content length\n */\nAP_DECLARE(void) ap_set_content_length(request_rec *r, apr_off_t length);\n\n/**\n * Set the keepalive status for this request\n * @param r The current request\n * @return 1 if keepalive can be set, 0 otherwise\n */\nAP_DECLARE(int) ap_set_keepalive(request_rec *r);\n\n/**\n * Return the latest rational time from a request/mtime pair.  Mtime is\n * returned unless it's in the future, in which case we return the current time.\n * @param r The current request\n * @param mtime The last modified time\n * @return the latest rational time.\n */\nAP_DECLARE(apr_time_t) ap_rationalize_mtime(request_rec *r, apr_time_t mtime);\n\n/**\n * Build the content-type that should be sent to the client from the\n * content-type specified.  The following rules are followed:\n *    - if type is NULL or \"\", return NULL (do not set content-type).\n *    - if charset adding is disabled, stop processing and return type.\n *    - then, if there are no parameters on type, add the default charset\n *    - return type\n * @param r The current request\n * @param type The content type\n * @return The content-type\n */\nAP_DECLARE(const char *) ap_make_content_type(request_rec *r,\n                                              const char *type);\n\n/**\n * Precompile metadata structures used by ap_make_content_type()\n * @param pool The pool to use for allocations\n */\nAP_DECLARE(void) ap_setup_make_content_type(apr_pool_t *pool);\n\n/** A structure with the ingredients for a file based etag */\ntypedef struct etag_rec etag_rec;\n\n/**\n * @brief A structure with the ingredients for a file based etag\n */\nstruct etag_rec {\n    /** Optional vary list validator */\n    const char *vlist_validator;\n    /** Time when the request started */\n    apr_time_t request_time;\n    /** finfo.protection (st_mode) set to zero if no such file */\n    apr_finfo_t *finfo;\n    /** File pathname used when generating a digest */\n    const char *pathname;\n    /** File descriptor used when generating a digest */\n    apr_file_t *fd;\n    /** Force a non-digest etag to be weak */\n    int force_weak;\n};\n\n/**\n * Construct an entity tag from the resource information.  If it's a real\n * file, build in some of the file characteristics.\n * @param r The current request\n * @param force_weak Force the entity tag to be weak - it could be modified\n *                   again in as short an interval.\n * @return The entity tag\n */\nAP_DECLARE(char *) ap_make_etag(request_rec *r, int force_weak);\n\n/**\n * Construct an entity tag from information provided in the etag_rec\n * structure.\n * @param r The current request\n * @param er The etag record, containing ingredients for the etag.\n */\nAP_DECLARE(char *) ap_make_etag_ex(request_rec *r, etag_rec *er);\n\n/**\n * Set the E-tag outgoing header\n * @param r The current request\n */\nAP_DECLARE(void) ap_set_etag(request_rec *r);\n\n/**\n * Set the E-tag outgoing header, with the option of forcing a strong ETag.\n * @param r The current request\n * @param fd The file descriptor\n */\nAP_DECLARE(void) ap_set_etag_fd(request_rec *r, apr_file_t *fd);\n\n/**\n * Set the last modified time for the file being sent\n * @param r The current request\n */\nAP_DECLARE(void) ap_set_last_modified(request_rec *r);\n\ntypedef enum {\n    AP_CONDITION_NONE,\n    AP_CONDITION_NOMATCH,\n    AP_CONDITION_WEAK,\n    AP_CONDITION_STRONG\n} ap_condition_e;\n\n/**\n * Tests conditional request rules for the If-Match header.\n * @param r The current request\n * @param headers The response headers to check against\n * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH\n *         if the header does not match, AP_CONDITION_STRONG for a strong\n *         match. Weak matches are not permitted for the If-Match header.\n */\nAP_DECLARE(ap_condition_e) ap_condition_if_match(request_rec *r,\n        apr_table_t *headers);\n\n/**\n * Tests conditional request rules for the If-Unmodified-Since header.\n * @param r The current request\n * @param headers The response headers to check against\n * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH\n *         if the header does not match, AP_CONDITION_WEAK if a weak match\n *         was present and allowed by RFC2616, AP_CONDITION_STRONG for a\n *         strong match.\n */\nAP_DECLARE(ap_condition_e) ap_condition_if_unmodified_since(request_rec *r,\n        apr_table_t *headers);\n\n/**\n * Tests conditional request rules for the If-None-Match header.\n * @param r The current request\n * @param headers The response headers to check against\n * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH\n *         if the header does not match, AP_CONDITION_WEAK if a weak match\n *         was present and allowed by RFC2616, AP_CONDITION_STRONG for a\n *         strong match.\n */\nAP_DECLARE(ap_condition_e) ap_condition_if_none_match(request_rec *r,\n        apr_table_t *headers);\n\n/**\n * Tests conditional request rules for the If-Modified-Since header.\n * @param r The current request\n * @param headers The response headers to check against\n * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH\n *         if the header does not match, AP_CONDITION_WEAK if a weak match\n *         was present and allowed by RFC2616, AP_CONDITION_STRONG for a\n *         strong match.\n */\nAP_DECLARE(ap_condition_e) ap_condition_if_modified_since(request_rec *r,\n        apr_table_t *headers);\n\n/**\n * Tests conditional request rules for the If-Range header.\n * @param r The current request\n * @param headers The response headers to check against\n * @return AP_CONDITION_NONE if either the If-Range or Range header is\n *         missing, AP_CONDITION_NOMATCH if the header does not match,\n *         AP_CONDITION_STRONG for a strong match. Weak matches are not\n *         permitted for the If-Range header.\n */\nAP_DECLARE(ap_condition_e) ap_condition_if_range(request_rec *r,\n        apr_table_t *headers);\n\n/**\n * Implements condition GET rules for HTTP/1.1 specification.  This function\n * inspects the client headers and determines if the response fulfills\n * the requirements specified.\n * @param r The current request\n * @return OK if the response fulfills the condition GET rules, some\n *         other status code otherwise\n */\nAP_DECLARE(int) ap_meets_conditions(request_rec *r);\n\n/* Other ways to send stuff at the client.  All of these keep track\n * of bytes_sent automatically.  This indirection is intended to make\n * it a little more painless to slide things like HTTP-NG packetization\n * underneath the main body of the code later.  In the meantime, it lets\n * us centralize a bit of accounting (bytes_sent).\n *\n * These also return the number of bytes written by the call.\n * They should only be called with a timeout registered, for obvious reaasons.\n * (Ditto the send_header stuff).\n */\n\n/**\n * Send an entire file to the client, using sendfile if supported by the\n * current platform\n * @param fd The file to send.\n * @param r The current request\n * @param offset Offset into the file to start sending.\n * @param length Amount of data to send\n * @param nbytes Amount of data actually sent\n */\nAP_DECLARE(apr_status_t) ap_send_fd(apr_file_t *fd, request_rec *r, apr_off_t offset,\n                                   apr_size_t length, apr_size_t *nbytes);\n\n#if APR_HAS_MMAP\n/**\n * Send an MMAP'ed file to the client\n * @param mm The MMAP'ed file to send\n * @param r The current request\n * @param offset The offset into the MMAP to start sending\n * @param length The amount of data to send\n * @return The number of bytes sent\n */\nAP_DECLARE(apr_size_t) ap_send_mmap(apr_mmap_t *mm,\n                                    request_rec *r,\n                                    apr_size_t offset,\n                                    apr_size_t length);\n#endif\n\n\n/**\n * Register a new request method, and return the offset that will be\n * associated with that method.\n *\n * @param p        The pool to create registered method numbers from.\n * @param methname The name of the new method to register.\n * @return         An int value representing an offset into a bitmask.\n */\nAP_DECLARE(int) ap_method_register(apr_pool_t *p, const char *methname);\n\n/**\n * Initialize the method_registry and allocate memory for it.\n *\n * @param p Pool to allocate memory for the registry from.\n */\nAP_DECLARE(void) ap_method_registry_init(apr_pool_t *p);\n\n/**\n * This is a convenience macro to ease with checking a mask\n * against a method name.\n */\n#define AP_METHOD_CHECK_ALLOWED(mask, methname) \\\n    ((mask) & (AP_METHOD_BIT << ap_method_number_of((methname))))\n\n/**\n * Create a new method list with the specified number of preallocated\n * slots for extension methods.\n *\n * @param   p       Pointer to a pool in which the structure should be\n *                  allocated.\n * @param   nelts   Number of preallocated extension slots\n * @return  Pointer to the newly created structure.\n */\nAP_DECLARE(ap_method_list_t *) ap_make_method_list(apr_pool_t *p, int nelts);\n\n\n/**\n * Copy a method list\n *\n * @param   dest List to copy to\n * @param   src  List to copy from\n */\nAP_DECLARE(void) ap_copy_method_list(ap_method_list_t *dest,\n                                     ap_method_list_t *src);\n\n/**\n * Search for an HTTP method name in an ap_method_list_t structure, and\n * return true if found.\n *\n * @param   method  String containing the name of the method to check.\n * @param   l       Pointer to a method list, such as r->allowed_methods.\n * @return  1 if method is in the list, otherwise 0\n */\nAP_DECLARE(int) ap_method_in_list(ap_method_list_t *l, const char *method);\n\n/**\n * Add an HTTP method name to an ap_method_list_t structure if it isn't\n * already listed.\n *\n * @param   method  String containing the name of the method to check.\n * @param   l       Pointer to a method list, such as r->allowed_methods.\n * @return  None.\n */\nAP_DECLARE(void) ap_method_list_add(ap_method_list_t *l, const char *method);\n\n/**\n * Remove an HTTP method name from an ap_method_list_t structure.\n *\n * @param   l       Pointer to a method list, such as r->allowed_methods.\n * @param   method  String containing the name of the method to remove.\n * @return  None.\n */\nAP_DECLARE(void) ap_method_list_remove(ap_method_list_t *l,\n                                       const char *method);\n\n/**\n * Reset a method list to be completely empty.\n *\n * @param   l       Pointer to a method list, such as r->allowed_methods.\n * @return  None.\n */\nAP_DECLARE(void) ap_clear_method_list(ap_method_list_t *l);\n\n/**\n * Set the content type for this request (r->content_type).\n * @param r The current request\n * @param ct The new content type\n * @warning This function must be called to set r->content_type in order\n * for the AddOutputFilterByType directive to work correctly.\n */\nAP_DECLARE(void) ap_set_content_type(request_rec *r, const char *ct);\n\n/**\n * Set the Accept-Ranges header for this response\n * @param r The current request\n */\nAP_DECLARE(void) ap_set_accept_ranges(request_rec *r);\n\n\n/* Hmmm... could macrofy these for now, and maybe forever, though the\n * definitions of the macros would get a whole lot hairier.\n */\n\n/**\n * Output one character for this request\n * @param c the character to output\n * @param r the current request\n * @return The number of bytes sent\n */\nAP_DECLARE(int) ap_rputc(int c, request_rec *r);\n\n/**\n * Write a buffer for the current request\n * @param buf The buffer to write\n * @param nbyte The number of bytes to send from the buffer\n * @param r The current request\n * @return The number of bytes sent\n */\nAP_DECLARE(int) ap_rwrite(const void *buf, int nbyte, request_rec *r);\n\n/**\n * Output a string for the current request\n * @param str The string to output\n * @param r The current request\n * @return The number of bytes sent\n * @note ap_rputs may be implemented as macro or inline function\n */\nstatic APR_INLINE int ap_rputs(const char *str, request_rec *r)\n{\n    return ap_rwrite(str, (int)strlen(str), r);\n}\n\n/**\n * Write an unspecified number of strings to the request\n * @param r The current request\n * @param ... The strings to write\n * @return The number of bytes sent\n */\nAP_DECLARE_NONSTD(int) ap_rvputs(request_rec *r,...)\n                       AP_FN_ATTR_SENTINEL;\n\n/**\n * Output data to the client in a printf format\n * @param r The current request\n * @param fmt The format string\n * @param vlist The arguments to use to fill out the format string\n * @return The number of bytes sent\n */\nAP_DECLARE(int) ap_vrprintf(request_rec *r, const char *fmt, va_list vlist);\n\n/**\n * Output data to the client in a printf format\n * @param r The current request\n * @param fmt The format string\n * @param ... The arguments to use to fill out the format string\n * @return The number of bytes sent\n */\nAP_DECLARE_NONSTD(int) ap_rprintf(request_rec *r, const char *fmt,...)\n                                __attribute__((format(printf,2,3)));\n\n/**\n * Flush all of the data for the current request to the client\n * @param r The current request\n * @return 0 on success, -1 if an error occurred\n */\nAP_DECLARE(int) ap_rflush(request_rec *r);\n\n/**\n * Index used in custom_responses array for a specific error code\n * (only use outside protocol.c is in getting them configured).\n * @param status HTTP status code\n * @return The index of the response\n */\nAP_DECLARE(int) ap_index_of_response(int status);\n\n/**\n * Return the Status-Line for a given status code (excluding the\n * HTTP-Version field). If an invalid or unknown status code is\n * passed, \"500 Internal Server Error\" will be returned.\n * @param status The HTTP status code\n * @return The Status-Line\n */\nAP_DECLARE(const char *) ap_get_status_line(int status);\n\n/**\n * Return the Status-Line for a given status code (excluding the\n * HTTP-Version field). If an invalid status code is passed,\n * \"500 Internal Server Error\" will be returned, whereas an unknown\n * status will be returned like \"xxx Status xxx\".\n * @param p The pool to allocate from when status is unknown\n * @param status The HTTP status code\n * @return The Status-Line\n */\nAP_DECLARE(const char *) ap_get_status_line_ex(apr_pool_t *p, int status);\n\n/* Reading a block of data from the client connection (e.g., POST arg) */\n\n/**\n * Setup the client to allow Apache to read the request body.\n * @param r The current request\n * @param read_policy How the server should interpret a chunked\n *                    transfer-encoding.  One of: <pre>\n *    REQUEST_NO_BODY          Send 413 error if message has any body\n *    REQUEST_CHUNKED_ERROR    Send 411 error if body without Content-Length\n *    REQUEST_CHUNKED_DECHUNK  If chunked, remove the chunks for me.\n * </pre>\n * @return either OK or an error code\n */\nAP_DECLARE(int) ap_setup_client_block(request_rec *r, int read_policy);\n\n/**\n * Determine if the client has sent any data.  This also sends a\n * 100 Continue response to HTTP/1.1 clients, so modules should not be called\n * until the module is ready to read content.\n * @warning Never call this function more than once.\n * @param r The current request\n * @return 0 if there is no message to read, 1 otherwise\n */\nAP_DECLARE(int) ap_should_client_block(request_rec *r);\n\n/**\n * Call this in a loop.  It will put data into a buffer and return the length\n * of the input block\n * @param r The current request\n * @param buffer The buffer in which to store the data\n * @param bufsiz The size of the buffer\n * @return Number of bytes inserted into the buffer.  When done reading, 0\n *         if EOF, or -1 if there was an error\n */\nAP_DECLARE(long) ap_get_client_block(request_rec *r, char *buffer, apr_size_t bufsiz);\n\n/**\n * Map specific APR codes returned by the filter stack to HTTP error\n * codes, or the default status code provided. Use it as follows:\n *\n * return ap_map_http_request_error(rv, HTTP_BAD_REQUEST);\n *\n * If the filter has already handled the error, AP_FILTER_ERROR will\n * be returned, which is cleanly passed through.\n *\n * These mappings imply that the filter stack is reading from the\n * downstream client, the proxy will map these codes differently.\n * @param rv APR status code\n * @param status Default HTTP code should the APR code not be recognised\n * @return Mapped HTTP status code\n */\nAP_DECLARE(int) ap_map_http_request_error(apr_status_t rv, int status);\n\n/**\n * In HTTP/1.1, any method can have a body.  However, most GET handlers\n * wouldn't know what to do with a request body if they received one.\n * This helper routine tests for and reads any message body in the request,\n * simply discarding whatever it receives.  We need to do this because\n * failing to read the request body would cause it to be interpreted\n * as the next request on a persistent connection.\n * @param r The current request\n * @return error status if request is malformed, OK otherwise\n */\nAP_DECLARE(int) ap_discard_request_body(request_rec *r);\n\n/**\n * Setup the output headers so that the client knows how to authenticate\n * itself the next time, if an authentication request failed.\n * @param r The current request\n */\nAP_DECLARE(void) ap_note_auth_failure(request_rec *r);\n\n/**\n * @deprecated @see ap_note_auth_failure\n */\nAP_DECLARE(void) ap_note_basic_auth_failure(request_rec *r);\n\n/**\n * @deprecated @see ap_note_auth_failure\n */\nAP_DECLARE(void) ap_note_digest_auth_failure(request_rec *r);\n\n/**\n * This hook allows modules to add support for a specific auth type to\n * ap_note_auth_failure\n * @param r the current request\n * @param auth_type the configured auth_type\n * @return OK, DECLINED\n */\nAP_DECLARE_HOOK(int, note_auth_failure, (request_rec *r, const char *auth_type))\n\n/**\n * Get the password from the request headers. This function has multiple side\n * effects due to its prior use in the old authentication framework.\n * ap_get_basic_auth_components() should be preferred.\n *\n * @deprecated @see ap_get_basic_auth_components\n * @param r The current request\n * @param pw The password as set in the headers\n * @return 0 (OK) if it set the 'pw' argument (and assured\n *         a correct value in r->user); otherwise it returns\n *         an error code, either HTTP_INTERNAL_SERVER_ERROR if things are\n *         really confused, HTTP_UNAUTHORIZED if no authentication at all\n *         seemed to be in use, or DECLINED if there was authentication but\n *         it wasn't Basic (in which case, the caller should presumably\n *         decline as well).\n */\nAP_DECLARE(int) ap_get_basic_auth_pw(request_rec *r, const char **pw);\n\n#define AP_GET_BASIC_AUTH_PW_NOTE \"AP_GET_BASIC_AUTH_PW_NOTE\"\n\n/**\n * Get the username and/or password from the request's Basic authentication\n * headers. Unlike ap_get_basic_auth_pw(), calling this function has no side\n * effects on the passed request_rec.\n *\n * @param r The current request\n * @param username If not NULL, set to the username sent by the client\n * @param password If not NULL, set to the password sent by the client\n * @return APR_SUCCESS if the credentials were successfully parsed and returned;\n *         APR_EINVAL if there was no authentication header sent or if the\n *         client was not using the Basic authentication scheme. username and\n *         password are unchanged on failure.\n */\nAP_DECLARE(apr_status_t) ap_get_basic_auth_components(const request_rec *r,\n                                                      const char **username,\n                                                      const char **password);\n\n/**\n * parse_uri: break apart the uri\n * @warning Side Effects:\n *    @li sets r->args to rest after '?' (or NULL if no '?')\n *    @li sets r->uri to request uri (without r->args part)\n *    @li sets r->hostname (if not set already) from request (scheme://host:port)\n * @param r The current request\n * @param uri The uri to break apart\n */\nAP_CORE_DECLARE(void) ap_parse_uri(request_rec *r, const char *uri);\n\n#define AP_GETLINE_FOLD 1 /* Whether to merge continuation lines */\n#define AP_GETLINE_CRLF 2 /* Whether line ends must be in the form CR LF */\n#define AP_GETLINE_NOSPC_EOL 4 /* Whether to consume up to and including the\n                                  end of line on APR_ENOSPC */\n\n/**\n * Get the next line of input for the request\n * @param s The buffer into which to read the line\n * @param n The size of the buffer\n * @param r The request\n * @param flags Bit flag of multiple parsing options\n *              AP_GETLINE_FOLD Whether to merge continuation lines\n *              AP_GETLINE_CRLF Whether line ends must be in the form CR LF\n * @return The length of the line, if successful\n *         n, if the line is too big to fit in the buffer\n *         -1 for miscellaneous errors\n */\nAP_DECLARE(int) ap_getline(char *s, int n, request_rec *r, int flags);\n\n/**\n * Get the next line of input for the request\n *\n * Note: on ASCII boxes, ap_rgetline is a macro which simply calls\n *       ap_rgetline_core to get the line of input.\n *\n *       on EBCDIC boxes, ap_rgetline is a wrapper function which\n *       translates ASCII protocol lines to the local EBCDIC code page\n *       after getting the line of input.\n *\n * @param s Pointer to the pointer to the buffer into which the line\n *          should be read; if *s==NULL, a buffer of the necessary size\n *          to hold the data will be allocated from the request pool\n * @param n The size of the buffer\n * @param read The length of the line.\n * @param r The request\n * @param flags Bit flag of multiple parsing options\n *              AP_GETLINE_FOLD Whether to merge continuation lines\n *              AP_GETLINE_CRLF Whether line ends must be in the form CR LF\n * @param bb Working brigade to use when reading buckets\n * @return APR_SUCCESS, if successful\n *         APR_ENOSPC, if the line is too big to fit in the buffer\n *         Other errors where appropriate\n */\n#if APR_CHARSET_EBCDIC\nAP_DECLARE(apr_status_t) ap_rgetline(char **s, apr_size_t n,\n                                     apr_size_t *read,\n                                     request_rec *r, int flags,\n                                     apr_bucket_brigade *bb);\n#else /* ASCII box */\n#define ap_rgetline(s, n, read, r, fold, bb) \\\n        ap_rgetline_core((s), (n), (read), (r), (fold), (bb))\n#endif\n\n/** @see ap_rgetline */\nAP_DECLARE(apr_status_t) ap_rgetline_core(char **s, apr_size_t n,\n                                          apr_size_t *read,\n                                          request_rec *r, int flags,\n                                          apr_bucket_brigade *bb);\n\n/**\n * Get the method number associated with the given string, assumed to\n * contain an HTTP method.  Returns M_INVALID if not recognized.\n * @param method A string containing a valid HTTP method\n * @return The method number\n */\nAP_DECLARE(int) ap_method_number_of(const char *method);\n\n/**\n * Get the method name associated with the given internal method\n * number.  Returns NULL if not recognized.\n * @param p A pool to use for temporary allocations.\n * @param methnum An integer value corresponding to an internal method number\n * @return The name corresponding to the method number\n */\nAP_DECLARE(const char *) ap_method_name_of(apr_pool_t *p, int methnum);\n\n\n/* Hooks */\n/*\n * pre_read_request --- run right before read_request_line(),\n *                  and not run during any subrequests.\n */\n/**\n * This hook allows modules to affect the request or connection immediately before\n * the request has been read, and before any other phases have been processes.\n * @param r The current request of the soon-to-be-read request\n * @param c The connection\n * @return None/void\n */\nAP_DECLARE_HOOK(void,pre_read_request,(request_rec *r, conn_rec *c))\n\n/*\n * post_read_request --- run right after read_request or internal_redirect,\n *                  and not run during any subrequests.\n */\n/**\n * This hook allows modules to affect the request immediately after the request\n * has been read, and before any other phases have been processes.  This allows\n * modules to make decisions based upon the input header fields\n * @param r The current request\n * @return OK or DECLINED\n */\nAP_DECLARE_HOOK(int,post_read_request,(request_rec *r))\n\n/**\n * This hook allows modules to perform any module-specific logging activities\n * over and above the normal server things.\n * @param r The current request\n * @return OK, DECLINED, or HTTP_...\n */\nAP_DECLARE_HOOK(int,log_transaction,(request_rec *r))\n\n/**\n * This hook allows modules to retrieve the http scheme for a request.  This\n * allows Apache modules to easily extend the schemes that Apache understands\n * @param r The current request\n * @return The http scheme from the request\n */\nAP_DECLARE_HOOK(const char *,http_scheme,(const request_rec *r))\n\n/**\n * Return the default port from the current request\n * @param r The current request\n * @return The current port\n */\nAP_DECLARE_HOOK(apr_port_t,default_port,(const request_rec *r))\n\n\n#define AP_PROTOCOL_HTTP1        \"http/1.1\"\n\n/**\n * Determine the list of protocols available for a connection/request. This may\n * be collected with or without any request sent, in which case the request is \n * NULL. Or it may be triggered by the request received, e.g. through the \n * \"Upgrade\" header.\n *\n * This hook will be run whenever protocols are being negotiated (ALPN as\n * one example). It may also be invoked at other times, e.g. when the server\n * wants to advertise protocols it is capable of switching to.\n * \n * The identifiers for protocols are taken from the TLS extension type ALPN:\n * https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xml\n *\n * If no protocols are added to the proposals, the server not perform any\n * switch. If the protocol selected from the proposals is the protocol\n * already in place, also no protocol switch will be invoked.\n *\n * The client may already have announced the protocols it is willing to\n * accept. These will then be listed as offers. This parameter may also\n * be NULL, indicating that offers from the client are not known and\n * the hooks should propose all protocols that are valid for the\n * current connection/request.\n *\n * All hooks are run, unless one returns an error. Proposals may contain\n * duplicates. The order in which proposals are added is usually ignored.\n * \n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected\n * @param offers A list of protocol identifiers offered by the client or\n *               NULL to indicated that the hooks are free to propose \n * @param proposals The list of protocol identifiers proposed by the hooks\n * @return OK or DECLINED\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE_HOOK(int,protocol_propose,(conn_rec *c, request_rec *r,\n                                      server_rec *s,\n                                      const apr_array_header_t *offers,\n                                      apr_array_header_t *proposals))\n\n/**\n * Perform a protocol switch on the connection. The exact requirements for\n * that depend on the protocol in place and the one switched to. The first \n * protocol module to handle the switch is the last module run.\n * \n * For a connection level switch (r == NULL), the handler must on return\n * leave the conn_rec in a state suitable for processing the switched\n * protocol, e.g. correct filters in place.\n *\n * For a request triggered switch (r != NULL), the protocol switch is done\n * before the response is sent out. When switching from \"http/1.1\" via Upgrade\n * header, the 101 intermediate response will have been sent. The\n * hook needs then to process the connection until it can be closed. Which\n * the server will enforce on hook return.\n * Any error the hook might encounter must already be sent by the hook itself\n * to the client in whatever form the new protocol requires.\n *\n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected\n * @param protocol The protocol identifier we try to switch to\n * @return OK or DECLINED\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE_HOOK(int,protocol_switch,(conn_rec *c, request_rec *r,\n                                     server_rec *s,\n                                     const char *protocol))\n\n/**\n * Return the protocol used on the connection. Modules implementing\n * protocol switching must register here and return the correct protocol\n * identifier for connections they switched.\n *\n * To find out the protocol for the current connection, better call\n * @see ap_get_protocol which internally uses this hook.\n *\n * @param c The current connection\n * @return The identifier of the protocol in place or NULL\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE_HOOK(const char *,protocol_get,(const conn_rec *c))\n\n/**\n * Get the protocols that the connection and optional request may\n * upgrade to - besides the protocol currently active on the connection. These\n * values may be used to announce to a client what choices it has.\n *\n * If report_all == 0, only protocols more preferable than the one currently\n * being used, are reported. Otherwise, all available protocols beside the\n * current one are being reported.\n *\n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected or NULL\n * @param report_all include also protocols less preferred than the current one\n * @param pupgrades on return, possible protocols to upgrade to in descending order \n *                 of preference. Maybe NULL if none are available.    \n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE(apr_status_t) ap_get_protocol_upgrades(conn_rec *c, request_rec *r, \n                                                  server_rec *s, int report_all, \n                                                  const apr_array_header_t **pupgrades);\n                                                  \n/**\n * Select a protocol for the given connection and optional request. Will return\n * the protocol identifier selected which may be the protocol already in place\n * on the connection. The selected protocol will be NULL if non of the given\n * choices could be agreed upon (e.g. no proposal as made).\n *\n * A special case is where the choices itself is NULL (instead of empty). In\n * this case there are no restrictions imposed on protocol selection.\n *\n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected\n * @param choices A list of protocol identifiers, normally the clients whishes\n * @return The selected protocol or NULL if no protocol could be agreed upon\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE(const char *) ap_select_protocol(conn_rec *c, request_rec *r, \n                                            server_rec *s,\n                                            const apr_array_header_t *choices);\n\n/**\n * Perform the actual protocol switch. The protocol given must have been\n * selected before on the very same connection and request pair.\n *\n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected\n * @param protocol the protocol to switch to\n * @return APR_SUCCESS, if caller may continue processing as usual\n *         APR_EOF,     if caller needs to stop processing the connection\n *         APR_EINVAL,  if the protocol is already in place\n *         APR_NOTIMPL, if no module performed the switch\n *         Other errors where appropriate\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE(apr_status_t) ap_switch_protocol(conn_rec *c, request_rec *r, \n                                            server_rec *s,\n                                            const char *protocol);\n\n/**\n * Call the protocol_get hook to determine the protocol currently in use\n * for the given connection.\n *\n * Unless another protocol has been switch to, will default to\n * @see AP_PROTOCOL_HTTP1 and modules implementing a  new protocol must\n * report a switched connection via the protocol_get hook.\n *\n * @param c The connection to determine the protocol for\n * @return the protocol in use, never NULL\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE(const char *) ap_get_protocol(conn_rec *c);\n\n/**\n * Check if the given protocol is an allowed choice on the given\n * combination of connection, request and server. \n *\n * When server is NULL, it is taken from request_rec, unless\n * request_rec is NULL. Then it is taken from the connection base\n * server.\n *\n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected or NULL\n * @param protocol the protocol to switch to\n * @return != 0 iff protocol is allowed\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE(int) ap_is_allowed_protocol(conn_rec *c, request_rec *r,\n                                       server_rec *s, const char *protocol);\n\n/** @see ap_bucket_type_error */\ntypedef struct ap_bucket_error ap_bucket_error;\n\n/**\n * @struct ap_bucket_error\n * @brief  A bucket referring to an HTTP error\n *\n * This bucket can be passed down the filter stack to indicate that an\n * HTTP error occurred while running a filter.  In order for this bucket\n * to be used successfully, it MUST be sent as the first bucket in the\n * first brigade to be sent from a given filter.\n */\nstruct ap_bucket_error {\n    /** Number of buckets using this memory */\n    apr_bucket_refcount refcount;\n    /** The error code */\n    int status;\n    /** The error string */\n    const char    *data;\n};\n\n/** @see ap_bucket_type_error */\nAP_DECLARE_DATA extern const apr_bucket_type_t ap_bucket_type_error;\n\n/**\n * Determine if a bucket is an error bucket\n * @param e The bucket to inspect\n * @return true or false\n */\n#define AP_BUCKET_IS_ERROR(e)         (e->type == &ap_bucket_type_error)\n\n/**\n * Make the bucket passed in an error bucket\n * @param b The bucket to make into an error bucket\n * @param error The HTTP error code to put in the bucket.\n * @param buf An optional error string to put in the bucket.\n * @param p A pool to allocate out of.\n * @return The new bucket, or NULL if allocation failed\n */\nAP_DECLARE(apr_bucket *) ap_bucket_error_make(apr_bucket *b, int error,\n                const char *buf, apr_pool_t *p);\n\n/**\n * Create a bucket referring to an HTTP error.\n * @param error The HTTP error code to put in the bucket.\n * @param buf An optional error string to put in the bucket.\n * @param p A pool to allocate the error string out of.\n * @param list The bucket allocator from which to allocate the bucket\n * @return The new bucket, or NULL if allocation failed\n */\nAP_DECLARE(apr_bucket *) ap_bucket_error_create(int error, const char *buf,\n                                                apr_pool_t *p,\n                                                apr_bucket_alloc_t *list);\n\nAP_DECLARE_NONSTD(apr_status_t) ap_byterange_filter(ap_filter_t *f, apr_bucket_brigade *b);\nAP_DECLARE_NONSTD(apr_status_t) ap_http_header_filter(ap_filter_t *f, apr_bucket_brigade *b);\nAP_DECLARE_NONSTD(apr_status_t) ap_content_length_filter(ap_filter_t *,\n                                                              apr_bucket_brigade *);\nAP_DECLARE_NONSTD(apr_status_t) ap_old_write_filter(ap_filter_t *f, apr_bucket_brigade *b);\n\n/**\n * Sett up the protocol fields for subsidiary requests\n * @param rnew New Sub Request\n * @param r current request\n */\nAP_DECLARE(void) ap_set_sub_req_protocol(request_rec *rnew, const request_rec *r);\n\n/**\n * A wrapup function to keep the internal accounting straight.\n * Indicates that there is no more content coming.\n * @param sub_r Subrequest that is now compete\n */\nAP_DECLARE(void) ap_finalize_sub_req_protocol(request_rec *sub_r);\n\n/**\n * Send an interim (HTTP 1xx) response immediately.\n * @param r The request\n * @param send_headers Whether to send&clear headers in r->headers_out\n */\nAP_DECLARE(void) ap_send_interim_response(request_rec *r, int send_headers);\n\n\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif  /* !APACHE_HTTP_PROTOCOL_H */\n/** @} */\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  http_vhost.h\n * @brief Virtual Host package\n *\n * @defgroup APACHE_CORE_VHOST Virtual Host Package\n * @ingroup  APACHE_CORE\n * @{\n */\n\n#ifndef APACHE_HTTP_VHOST_H\n#define APACHE_HTTP_VHOST_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * called before any config is read\n * @param p Pool to allocate out of\n */\nAP_DECLARE(void) ap_init_vhost_config(apr_pool_t *p);\n\n/**\n * called after the config has been read to compile the tables needed to do\n * the run-time vhost lookups\n * @param p The pool to allocate out of\n * @param main_server The start of the virtual host list\n */\nAP_DECLARE(void) ap_fini_vhost_config(apr_pool_t *p, server_rec *main_server);\n\n/**\n * handle addresses in \"<VirtualHost>\" statement\n * @param p The pool to allocate out of\n * @param hostname The hostname in the VirtualHost statement\n * @param s The list of Virtual Hosts.\n */\nconst char *ap_parse_vhost_addrs(apr_pool_t *p, const char *hostname, server_rec *s);\n\n/**\n * handle NameVirtualHost directive\n * @param cmd Command Parameters structure\n * @param dummy NOT USED\n * @param arg a host of the form \"<address>[:port]\"\n */\nAP_DECLARE_NONSTD(const char *)ap_set_name_virtual_host(cmd_parms *cmd,\n                                                        void *dummy,\n                                                        const char *arg);\n\n/**\n * Callback function for every Name Based Virtual Host.\n * @param baton Opaque user object\n * @param conn The current Connection\n * @param s The current Server\n * @see ap_vhost_iterate_given_conn\n * @return 0 on success, any non-zero return will stop the iteration.\n */\ntypedef int(*ap_vhost_iterate_conn_cb)(void* baton, conn_rec* conn, server_rec* s);\n\n/**\n * For every virtual host on this connection, call func_cb.\n * @param conn The current connection\n * @param func_cb Function called for every Name Based Virtual Host for this\n *                connection.\n * @param baton Opaque object passed to func_cb.\n * @return The return value from func_cb.\n * @note If func_cb returns non-zero, the function will return at this point,\n *       and not continue iterating the virtual hosts.\n */\nAP_DECLARE(int) ap_vhost_iterate_given_conn(conn_rec *conn,\n                                            ap_vhost_iterate_conn_cb func_cb,\n                                            void* baton);\n\n/**\n * given an ip address only, give our best guess as to what vhost it is\n * @param conn The current connection\n */\nAP_DECLARE(void) ap_update_vhost_given_ip(conn_rec *conn);\n\n/**\n * ap_update_vhost_given_ip is never enough, and this is always called after\n * the headers have been read.  It may change r->server.\n * @param r The current request\n */\nAP_DECLARE(void) ap_update_vhost_from_headers(request_rec *r);\n\n/**\n * Match the host in the header with the hostname of the server for this\n * request.\n * @param r The current request\n * @param host The hostname in the headers\n * @param port The port from the headers\n * @return return 1 if the host:port matches any of the aliases of r->server,\n * return 0 otherwise\n */\nAP_DECLARE(int) ap_matches_request_vhost(request_rec *r, const char *host,\n    apr_port_t port);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif  /* !APACHE_HTTP_VHOST_H */\n/** @} */\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n \n#include <assert.h>\n\n#include <apr_strings.h>\n#include <ap_mmn.h>\n\n#include <httpd.h>\n#include <http_core.h>\n#include <http_connection.h>\n#include <http_protocol.h>\n#include <http_request.h>\n#include <http_log.h>\n#include <http_vhost.h>\n#include <util_filter.h>\n#include <ap_mpm.h>\n#include <mod_core.h>\n#include <scoreboard.h>\n\n#include \"h2_private.h\"\n#include \"h2_config.h\"\n#include \"h2_push.h\"\n#include \"h2_request.h\"\n#include \"h2_util.h\"\n\n\ntypedef struct {\n    apr_table_t *headers;\n    apr_pool_t *pool;\n    apr_status_t status;\n} h1_ctx;\n\nstatic int set_h1_header(void *ctx, const char *key, const char *value)\n{\n    h1_ctx *x = ctx;\n    int was_added;\n    h2_req_add_header(x->headers, x->pool, key, strlen(key), value, strlen(value), 0, &was_added);\n    return 1;\n}\n\napr_status_t h2_request_rcreate(h2_request **preq, apr_pool_t *pool, \n                                request_rec *r)\n{\n    h2_request *req;\n    const char *scheme, *authority, *path;\n    h1_ctx x;\n    \n    *preq = NULL;\n    scheme = apr_pstrdup(pool, r->parsed_uri.scheme? r->parsed_uri.scheme\n              : ap_http_scheme(r));\n    authority = apr_pstrdup(pool, r->hostname);\n    path = apr_uri_unparse(pool, &r->parsed_uri, APR_URI_UNP_OMITSITEPART);\n    \n    if (!r->method || !scheme || !r->hostname || !path) {\n        return APR_EINVAL;\n    }\n\n    if (!ap_strchr_c(authority, ':') && r->server && r->server->port) {\n        apr_port_t defport = apr_uri_port_of_scheme(scheme);\n        if (defport != r->server->port) {\n            /* port info missing and port is not default for scheme: append */\n            authority = apr_psprintf(pool, \"%s:%d\", authority,\n                                     (int)r->server->port);\n        }\n    }\n    \n    req = apr_pcalloc(pool, sizeof(*req));\n    req->method      = apr_pstrdup(pool, r->method);\n    req->scheme      = scheme;\n    req->authority   = authority;\n    req->path        = path;\n    req->headers     = apr_table_make(pool, 10);\n    req->http_status = H2_HTTP_STATUS_UNSET;\n    if (r->server) {\n        req->serialize = h2_config_rgeti(r, H2_CONF_SER_HEADERS);\n    }\n\n    x.pool = pool;\n    x.headers = req->headers;\n    x.status = APR_SUCCESS;\n    apr_table_do(set_h1_header, &x, r->headers_in, NULL);\n    \n    *preq = req;\n    return x.status;\n}\n\napr_status_t h2_request_add_header(h2_request *req, apr_pool_t *pool, \n                                   const char *name, size_t nlen,\n                                   const char *value, size_t vlen,\n                                   size_t max_field_len, int *pwas_added)\n{\n    apr_status_t status = APR_SUCCESS;\n    \n    *pwas_added = 0;\n    if (nlen <= 0) {\n        return status;\n    }\n    \n    if (name[0] == ':') {\n        /* pseudo header, see ch. 8.1.2.3, always should come first */\n        if (!apr_is_empty_table(req->headers)) {\n            ap_log_perror(APLOG_MARK, APLOG_ERR, 0, pool,\n                          APLOGNO(02917) \n                          \"h2_request: pseudo header after request start\");\n            return APR_EGENERAL;\n        }\n        \n        if (H2_HEADER_METHOD_LEN == nlen\n            && !strncmp(H2_HEADER_METHOD, name, nlen)) {\n            req->method = apr_pstrndup(pool, value, vlen);\n        }\n        else if (H2_HEADER_SCHEME_LEN == nlen\n                 && !strncmp(H2_HEADER_SCHEME, name, nlen)) {\n            req->scheme = apr_pstrndup(pool, value, vlen);\n        }\n        else if (H2_HEADER_PATH_LEN == nlen\n                 && !strncmp(H2_HEADER_PATH, name, nlen)) {\n            req->path = apr_pstrndup(pool, value, vlen);\n        }\n        else if (H2_HEADER_AUTH_LEN == nlen\n                 && !strncmp(H2_HEADER_AUTH, name, nlen)) {\n            req->authority = apr_pstrndup(pool, value, vlen);\n        }\n        else {\n            char buffer[32];\n            memset(buffer, 0, 32);\n            strncpy(buffer, name, (nlen > 31)? 31 : nlen);\n            ap_log_perror(APLOG_MARK, APLOG_WARNING, 0, pool,\n                          APLOGNO(02954) \n                          \"h2_request: ignoring unknown pseudo header %s\",\n                          buffer);\n        }\n    }\n    else {\n        /* non-pseudo header, add to table */\n        status = h2_req_add_header(req->headers, pool, name, nlen, value, vlen, \n                                   max_field_len, pwas_added);\n    }\n    \n    return status;\n}\n\napr_status_t h2_request_end_headers(h2_request *req, apr_pool_t *pool, int eos, size_t raw_bytes)\n{\n    const char *s;\n    \n    /* rfc7540, ch. 8.1.2.3:\n     * - if we have :authority, it overrides any Host header \n     * - :authority MUST be omitted when converting h1->h2, so we\n     *   might get a stream without, but then Host needs to be there */\n    if (!req->authority) {\n        const char *host = apr_table_get(req->headers, \"Host\");\n        if (!host) {\n            return APR_BADARG;\n        }\n        req->authority = host;\n    }\n    else {\n        apr_table_setn(req->headers, \"Host\", req->authority);\n    }\n\n    s = apr_table_get(req->headers, \"Content-Length\");\n    if (!s) {\n        /* HTTP/2 does not need a Content-Length for framing, but our\n         * internal request processing is used to HTTP/1.1, so we\n         * need to either add a Content-Length or a Transfer-Encoding\n         * if any content can be expected. */\n        if (!eos) {\n            /* We have not seen a content-length and have no eos,\n             * simulate a chunked encoding for our HTTP/1.1 infrastructure,\n             * in case we have \"H2SerializeHeaders on\" here\n             */\n            req->chunked = 1;\n            apr_table_mergen(req->headers, \"Transfer-Encoding\", \"chunked\");\n        }\n        else if (apr_table_get(req->headers, \"Content-Type\")) {\n            /* If we have a content-type, but already seen eos, no more\n             * data will come. Signal a zero content length explicitly.\n             */\n            apr_table_setn(req->headers, \"Content-Length\", \"0\");\n        }\n    }\n    req->raw_bytes += raw_bytes;\n    \n    return APR_SUCCESS;\n}\n\nh2_request *h2_request_clone(apr_pool_t *p, const h2_request *src)\n{\n    h2_request *dst = apr_pmemdup(p, src, sizeof(*dst));\n    dst->method       = apr_pstrdup(p, src->method);\n    dst->scheme       = apr_pstrdup(p, src->scheme);\n    dst->authority    = apr_pstrdup(p, src->authority);\n    dst->path         = apr_pstrdup(p, src->path);\n    dst->headers      = apr_table_clone(p, src->headers);\n    return dst;\n}\n\n#if !AP_MODULE_MAGIC_AT_LEAST(20150222, 13)\nstatic request_rec *my_ap_create_request(conn_rec *c)\n{\n    apr_pool_t *p;\n    request_rec *r;\n\n    apr_pool_create(&p, c->pool);\n    apr_pool_tag(p, \"request\");\n    r = apr_pcalloc(p, sizeof(request_rec));\n    AP_READ_REQUEST_ENTRY((intptr_t)r, (uintptr_t)c);\n    r->pool            = p;\n    r->connection      = c;\n    r->server          = c->base_server;\n    \n    r->user            = NULL;\n    r->ap_auth_type    = NULL;\n    \n    r->allowed_methods = ap_make_method_list(p, 2);\n\n    r->headers_in      = apr_table_make(r->pool, 5);\n    r->trailers_in     = apr_table_make(r->pool, 5);\n    r->subprocess_env  = apr_table_make(r->pool, 25);\n    r->headers_out     = apr_table_make(r->pool, 12);\n    r->err_headers_out = apr_table_make(r->pool, 5);\n    r->trailers_out    = apr_table_make(r->pool, 5);\n    r->notes           = apr_table_make(r->pool, 5);\n    \n    r->request_config  = ap_create_request_config(r->pool);\n    /* Must be set before we run create request hook */\n    \n    r->proto_output_filters = c->output_filters;\n    r->output_filters  = r->proto_output_filters;\n    r->proto_input_filters = c->input_filters;\n    r->input_filters   = r->proto_input_filters;\n    ap_run_create_request(r);\n    r->per_dir_config  = r->server->lookup_defaults;\n    \n    r->sent_bodyct     = 0;                      /* bytect isn't for body */\n    \n    r->read_length     = 0;\n    r->read_body       = REQUEST_NO_BODY;\n    \n    r->status          = HTTP_OK;  /* Until further notice */\n    r->header_only     = 0;\n    r->the_request     = NULL;\n    \n    /* Begin by presuming any module can make its own path_info assumptions,\n     * until some module interjects and changes the value.\n     */\n    r->used_path_info = AP_REQ_DEFAULT_PATH_INFO;\n    \n    r->useragent_addr = c->client_addr;\n    r->useragent_ip = c->client_ip;\n    \n    return r;\n}\n#endif\n\nrequest_rec *h2_request_create_rec(const h2_request *req, conn_rec *c)\n{\n    int access_status;\n\n#if AP_MODULE_MAGIC_AT_LEAST(20150222, 13)\n    request_rec *r = ap_create_request(c);\n#else\n    request_rec *r = my_ap_create_request(c);\n#endif\n\n#if AP_MODULE_MAGIC_AT_LEAST(20200331, 3)\n    ap_run_pre_read_request(r, c);\n\n    /* Time to populate r with the data we have. */\n    r->request_time = req->request_time;\n    r->the_request = apr_psprintf(r->pool, \"%s %s HTTP/2.0\",\n                                  req->method, req->path ? req->path : \"\");\n    r->headers_in = apr_table_clone(r->pool, req->headers);\n\n    /* Start with r->hostname = NULL, ap_check_request_header() will get it\n     * form Host: header, otherwise we get complains about port numbers.\n     */\n    r->hostname = NULL;\n\n    /* Validate HTTP/1 request and select vhost. */\n    if (!ap_parse_request_line(r) || !ap_check_request_header(r)) {\n        /* we may have switched to another server still */\n        r->per_dir_config = r->server->lookup_defaults;\n        if (req->http_status != H2_HTTP_STATUS_UNSET) {\n            access_status = req->http_status;\n            /* Be safe and close the connection */\n            c->keepalive = AP_CONN_CLOSE;\n        }\n        else {\n            access_status = r->status;\n        }\n        r->status = HTTP_OK;\n        goto die;\n    }\n#else\n    {\n        const char *s;\n\n        r->headers_in = apr_table_clone(r->pool, req->headers);\n        ap_run_pre_read_request(r, c);\n\n        /* Time to populate r with the data we have. */\n        r->request_time = req->request_time;\n        r->method = apr_pstrdup(r->pool, req->method);\n        /* Provide quick information about the request method as soon as known */\n        r->method_number = ap_method_number_of(r->method);\n        if (r->method_number == M_GET && r->method[0] == 'H') {\n            r->header_only = 1;\n        }\n        ap_parse_uri(r, req->path ? req->path : \"\");\n        r->protocol = (char*)\"HTTP/2.0\";\n        r->proto_num = HTTP_VERSION(2, 0);\n        r->the_request = apr_psprintf(r->pool, \"%s %s HTTP/2.0\",\n                                      r->method, req->path ? req->path : \"\");\n\n        /* Start with r->hostname = NULL, ap_check_request_header() will get it\n         * form Host: header, otherwise we get complains about port numbers.\n         */\n        r->hostname = NULL;\n        ap_update_vhost_from_headers(r);\n\n         /* we may have switched to another server */\n         r->per_dir_config = r->server->lookup_defaults;\n\n         s = apr_table_get(r->headers_in, \"Expect\");\n         if (s && s[0]) {\n            if (ap_cstr_casecmp(s, \"100-continue\") == 0) {\n                r->expecting_100 = 1;\n            }\n            else {\n                r->status = HTTP_EXPECTATION_FAILED;\n                access_status = r->status;\n                goto die;\n            }\n         }\n    }\n#endif\n\n    /* we may have switched to another server */\n    r->per_dir_config = r->server->lookup_defaults;\n\n    if (req->http_status != H2_HTTP_STATUS_UNSET) {\n        access_status = req->http_status;\n        r->status = HTTP_OK;\n        /* Be safe and close the connection */\n        c->keepalive = AP_CONN_CLOSE;\n        goto die;\n    }\n\n    /*\n     * Add the HTTP_IN filter here to ensure that ap_discard_request_body\n     * called by ap_die and by ap_send_error_response works correctly on\n     * status codes that do not cause the connection to be dropped and\n     * in situations where the connection should be kept alive.\n     */\n    ap_add_input_filter_handle(ap_http_input_filter_handle,\n                               NULL, r, r->connection);\n    \n    if ((access_status = ap_run_post_read_request(r))) {\n        /* Request check post hooks failed. An example of this would be a\n         * request for a vhost where h2 is disabled --> 421.\n         */\n        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, c, APLOGNO(03367)\n                      \"h2_request: access_status=%d, request_create failed\",\n                      access_status);\n        goto die;\n    }\n\n    AP_READ_REQUEST_SUCCESS((uintptr_t)r, (char *)r->method, \n                            (char *)r->uri, (char *)r->server->defn_name, \n                            r->status);\n    return r;\n\ndie:\n    ap_die(access_status, r);\n\n    /* ap_die() sent the response through the output filters, we must now\n     * end the request with an EOR bucket for stream/pipeline accounting.\n     */\n    {\n        apr_bucket_brigade *eor_bb;\n#if AP_MODULE_MAGIC_AT_LEAST(20180905, 1)\n        eor_bb = ap_acquire_brigade(c);\n        APR_BRIGADE_INSERT_TAIL(eor_bb,\n                                ap_bucket_eor_create(c->bucket_alloc, r));\n        ap_pass_brigade(c->output_filters, eor_bb);\n        ap_release_brigade(c, eor_bb);\n#else\n        eor_bb = apr_brigade_create(c->pool, c->bucket_alloc);\n        APR_BRIGADE_INSERT_TAIL(eor_bb,\n                                ap_bucket_eor_create(c->bucket_alloc, r));\n        ap_pass_brigade(c->output_filters, eor_bb);\n        apr_brigade_destroy(eor_bb);\n#endif\n    }\n\n    r = NULL;\n    AP_READ_REQUEST_FAILURE((uintptr_t)r);\n    return NULL;\n}\n\n\n\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include \"apr.h\"\n#include \"apr_strings.h\"\n#include \"apr_lib.h\"\n#include \"apr_fnmatch.h\"\n#include \"apr_hash.h\"\n#include \"apr_thread_proc.h\"    /* for RLIMIT stuff */\n#include \"apr_random.h\"\n\n#include \"apr_version.h\"\n#if APR_MAJOR_VERSION < 2\n#include \"apu_version.h\"\n#endif\n\n#define APR_WANT_IOVEC\n#define APR_WANT_STRFUNC\n#define APR_WANT_MEMFUNC\n#include \"apr_want.h\"\n\n#include \"ap_config.h\"\n#include \"httpd.h\"\n#include \"http_config.h\"\n#include \"http_core.h\"\n#include \"http_protocol.h\" /* For index_of_response().  Grump. */\n#include \"http_request.h\"\n#include \"http_ssl.h\"\n#include \"http_vhost.h\"\n#include \"http_main.h\"     /* For the default_handler below... */\n#include \"http_log.h\"\n#include \"util_md5.h\"\n#include \"http_connection.h\"\n#include \"apr_buckets.h\"\n#include \"util_filter.h\"\n#include \"util_ebcdic.h\"\n#include \"util_mutex.h\"\n#include \"util_time.h\"\n#include \"mpm_common.h\"\n#include \"scoreboard.h\"\n#include \"mod_core.h\"\n#include \"mod_proxy.h\"\n#include \"ap_listen.h\"\n#include \"ap_regex.h\"\n\n#include \"mod_so.h\" /* for ap_find_loaded_module_symbol */\n\n#if defined(RLIMIT_CPU) || defined (RLIMIT_DATA) || defined (RLIMIT_VMEM) || defined(RLIMIT_AS) || defined (RLIMIT_NPROC)\n#include \"unixd.h\"\n#endif\n#if APR_HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n/* LimitRequestBody handling */\n#define AP_LIMIT_REQ_BODY_UNSET         ((apr_off_t) -1)\n#define AP_DEFAULT_LIMIT_REQ_BODY       ((apr_off_t) 0)\n\n/* LimitXMLRequestBody handling */\n#define AP_LIMIT_UNSET                  ((long) -1)\n#define AP_DEFAULT_LIMIT_XML_BODY       ((apr_size_t)1000000)\n\n#define AP_MIN_SENDFILE_BYTES           (256)\n\n/* maximum include nesting level */\n#ifndef AP_MAX_INCLUDE_DEPTH\n#define AP_MAX_INCLUDE_DEPTH            (128)\n#endif\n\n/* valid in core-conf, but not in runtime r->used_path_info */\n#define AP_ACCEPT_PATHINFO_UNSET 3\n\n#define AP_CONTENT_MD5_OFF   0\n#define AP_CONTENT_MD5_ON    1\n#define AP_CONTENT_MD5_UNSET 2\n\n#define AP_FLUSH_MAX_THRESHOLD 65535\n#define AP_FLUSH_MAX_PIPELINED 4\n\nAPR_HOOK_STRUCT(\n    APR_HOOK_LINK(get_mgmt_items)\n    APR_HOOK_LINK(insert_network_bucket)\n)\n\nAP_IMPLEMENT_HOOK_RUN_ALL(int, get_mgmt_items,\n                          (apr_pool_t *p, const char *val, apr_hash_t *ht),\n                          (p, val, ht), OK, DECLINED)\n\nAP_IMPLEMENT_HOOK_RUN_FIRST(apr_status_t, insert_network_bucket,\n                            (conn_rec *c, apr_bucket_brigade *bb,\n                             apr_socket_t *socket),\n                            (c, bb, socket), AP_DECLINED)\n\n/* Server core module... This module provides support for really basic\n * server operations, including options and commands which control the\n * operation of other modules.  Consider this the bureaucracy module.\n *\n * The core module also defines handlers, etc., to handle just enough\n * to allow a server with the core module ONLY to actually serve documents.\n *\n * This file could almost be mod_core.c, except for the stuff which affects\n * the http_conf_globals.\n */\n\n/* we know core's module_index is 0 */\n#undef APLOG_MODULE_INDEX\n#define APLOG_MODULE_INDEX AP_CORE_MODULE_INDEX\n\n/* Handles for core filters */\nAP_DECLARE_DATA ap_filter_rec_t *ap_subreq_core_filter_handle;\nAP_DECLARE_DATA ap_filter_rec_t *ap_core_output_filter_handle;\nAP_DECLARE_DATA ap_filter_rec_t *ap_content_length_filter_handle;\nAP_DECLARE_DATA ap_filter_rec_t *ap_core_input_filter_handle;\n\n/* Provide ap_document_root_check storage and default value = true */\nAP_DECLARE_DATA int ap_document_root_check = 1;\n\n/* magic pointer for ErrorDocument xxx \"default\" */\nstatic char errordocument_default;\n\n/* Global state allocated out of pconf: variables here MUST be\n * cleared/reset in reset_config(), a pconf cleanup, to avoid the\n * variable getting reused after the pool is cleared. */\nstatic apr_array_header_t *saved_server_config_defines = NULL;\nstatic apr_table_t *server_config_defined_vars = NULL;\nAP_DECLARE_DATA const char *ap_runtime_dir = NULL;\n\nAP_DECLARE_DATA int ap_main_state = AP_SQ_MS_INITIAL_STARTUP;\nAP_DECLARE_DATA int ap_run_mode = AP_SQ_RM_UNKNOWN;\nAP_DECLARE_DATA int ap_config_generation = 0;\n\nstatic void *create_core_dir_config(apr_pool_t *a, char *dir)\n{\n    core_dir_config *conf;\n\n    conf = (core_dir_config *)apr_pcalloc(a, sizeof(core_dir_config));\n\n    /* conf->r and conf->d[_*] are initialized by dirsection() or left NULL */\n\n    conf->opts = dir ? OPT_UNSET : OPT_UNSET|OPT_SYM_LINKS;\n    conf->opts_add = conf->opts_remove = OPT_NONE;\n    conf->override = OR_UNSET|OR_NONE;\n    conf->override_opts = OPT_UNSET | OPT_ALL | OPT_SYM_OWNER | OPT_MULTI;\n\n    conf->content_md5 = AP_CONTENT_MD5_UNSET;\n    conf->accept_path_info = AP_ACCEPT_PATHINFO_UNSET;\n\n    conf->use_canonical_name = USE_CANONICAL_NAME_UNSET;\n    conf->use_canonical_phys_port = USE_CANONICAL_PHYS_PORT_UNSET;\n\n    conf->hostname_lookups = HOSTNAME_LOOKUP_UNSET;\n\n    /*\n     * left as NULL (we use apr_pcalloc):\n     * conf->limit_cpu = NULL;\n     * conf->limit_mem = NULL;\n     * conf->limit_nproc = NULL;\n     * conf->sec_file = NULL;\n     * conf->sec_if   = NULL;\n     */\n\n    conf->limit_req_body = AP_LIMIT_REQ_BODY_UNSET;\n    conf->limit_xml_body = AP_LIMIT_UNSET;\n\n    conf->server_signature = srv_sig_unset;\n\n    conf->add_default_charset = ADD_DEFAULT_CHARSET_UNSET;\n    conf->add_default_charset_name = DEFAULT_ADD_DEFAULT_CHARSET_NAME;\n\n    /* Overriding all negotiation\n     * Set NULL by apr_pcalloc:\n     * conf->mime_type = NULL;\n     * conf->handler = NULL;\n     * conf->output_filters = NULL;\n     * conf->input_filters = NULL;\n     */\n\n    /*\n     * Flag for use of inodes in ETags.\n     */\n    conf->etag_bits = ETAG_UNSET;\n    conf->etag_add = ETAG_UNSET;\n    conf->etag_remove = ETAG_UNSET;\n\n    conf->enable_mmap = ENABLE_MMAP_UNSET;\n    conf->enable_sendfile = ENABLE_SENDFILE_UNSET;\n    conf->allow_encoded_slashes = 0;\n    conf->decode_encoded_slashes = 0;\n\n    conf->max_ranges = AP_MAXRANGES_UNSET;\n    conf->max_overlaps = AP_MAXRANGES_UNSET;\n    conf->max_reversals = AP_MAXRANGES_UNSET;\n\n    conf->cgi_pass_auth = AP_CGI_PASS_AUTH_UNSET;\n    conf->qualify_redirect_url = AP_CORE_CONFIG_UNSET; \n\n    return (void *)conf;\n}\n\nstatic void *merge_core_dir_configs(apr_pool_t *a, void *basev, void *newv)\n{\n    core_dir_config *base = (core_dir_config *)basev;\n    core_dir_config *new = (core_dir_config *)newv;\n    core_dir_config *conf;\n\n    /* Create this conf by duplicating the base, replacing elements\n     * (or creating copies for merging) where new-> values exist.\n     */\n    conf = (core_dir_config *)apr_pmemdup(a, base, sizeof(core_dir_config));\n\n    conf->d = new->d;\n    conf->d_is_fnmatch = new->d_is_fnmatch;\n    conf->d_components = new->d_components;\n    conf->r = new->r;\n    conf->refs = new->refs;\n    conf->condition = new->condition;\n\n    if (new->opts & OPT_UNSET) {\n        /* there was no explicit setting of new->opts, so we merge\n         * preserve the invariant (opts_add & opts_remove) == 0\n         */\n        conf->opts_add = (conf->opts_add & ~new->opts_remove) | new->opts_add;\n        conf->opts_remove = (conf->opts_remove & ~new->opts_add)\n                            | new->opts_remove;\n        conf->opts = (conf->opts & ~conf->opts_remove) | conf->opts_add;\n\n        /* If Includes was enabled with exec in the base config, but\n         * was enabled without exec in the new config, then disable\n         * exec in the merged set. */\n        if (((base->opts & (OPT_INCLUDES|OPT_INC_WITH_EXEC))\n             == (OPT_INCLUDES|OPT_INC_WITH_EXEC))\n            && ((new->opts & (OPT_INCLUDES|OPT_INC_WITH_EXEC))\n                == OPT_INCLUDES)) {\n            conf->opts &= ~OPT_INC_WITH_EXEC;\n        }\n    }\n    else {\n        /* otherwise we just copy, because an explicit opts setting\n         * overrides all earlier +/- modifiers\n         */\n        conf->opts = new->opts;\n        conf->opts_add = new->opts_add;\n        conf->opts_remove = new->opts_remove;\n    }\n\n    if (!(new->override & OR_UNSET)) {\n        conf->override = new->override;\n    }\n\n    if (!(new->override_opts & OPT_UNSET)) {\n        conf->override_opts = new->override_opts;\n    }\n\n    if (new->override_list != NULL) {\n        conf->override_list = new->override_list;\n    }\n\n    if (conf->response_code_exprs == NULL) {\n        conf->response_code_exprs = new->response_code_exprs;\n    }\n    else if (new->response_code_exprs != NULL) {\n        conf->response_code_exprs = apr_hash_overlay(a,\n                new->response_code_exprs, conf->response_code_exprs);\n    }\n    /* Otherwise we simply use the base->response_code_exprs array\n     */\n\n    if (new->hostname_lookups != HOSTNAME_LOOKUP_UNSET) {\n        conf->hostname_lookups = new->hostname_lookups;\n    }\n\n    if (new->content_md5 != AP_CONTENT_MD5_UNSET) {\n        conf->content_md5 = new->content_md5;\n    }\n\n    if (new->accept_path_info != AP_ACCEPT_PATHINFO_UNSET) {\n        conf->accept_path_info = new->accept_path_info;\n    }\n\n    if (new->use_canonical_name != USE_CANONICAL_NAME_UNSET) {\n        conf->use_canonical_name = new->use_canonical_name;\n    }\n\n    if (new->use_canonical_phys_port != USE_CANONICAL_PHYS_PORT_UNSET) {\n        conf->use_canonical_phys_port = new->use_canonical_phys_port;\n    }\n\n#ifdef RLIMIT_CPU\n    if (new->limit_cpu) {\n        conf->limit_cpu = new->limit_cpu;\n    }\n#endif\n\n#if defined(RLIMIT_DATA) || defined(RLIMIT_VMEM) || defined(RLIMIT_AS)\n    if (new->limit_mem) {\n        conf->limit_mem = new->limit_mem;\n    }\n#endif\n\n#ifdef RLIMIT_NPROC\n    if (new->limit_nproc) {\n        conf->limit_nproc = new->limit_nproc;\n    }\n#endif\n\n    if (new->limit_req_body != AP_LIMIT_REQ_BODY_UNSET) {\n        conf->limit_req_body = new->limit_req_body;\n    }\n\n    if (new->limit_xml_body != AP_LIMIT_UNSET)\n        conf->limit_xml_body = new->limit_xml_body;\n\n    if (!conf->sec_file) {\n        conf->sec_file = new->sec_file;\n    }\n    else if (new->sec_file) {\n        /* If we merge, the merge-result must have its own array\n         */\n        conf->sec_file = apr_array_append(a, base->sec_file, new->sec_file);\n    }\n    /* Otherwise we simply use the base->sec_file array\n     */\n\n    if (!conf->sec_if) {\n        conf->sec_if = new->sec_if;\n    }\n    else if (new->sec_if) {\n        /* If we merge, the merge-result must have its own array\n         */\n        conf->sec_if = apr_array_append(a, base->sec_if, new->sec_if);\n    }\n    /* Otherwise we simply use the base->sec_if array\n     */\n\n    if (new->server_signature != srv_sig_unset) {\n        conf->server_signature = new->server_signature;\n    }\n\n    if (new->add_default_charset != ADD_DEFAULT_CHARSET_UNSET) {\n        conf->add_default_charset = new->add_default_charset;\n        conf->add_default_charset_name = new->add_default_charset_name;\n    }\n\n    /* Overriding all negotiation\n     */\n    if (new->mime_type) {\n        conf->mime_type = new->mime_type;\n    }\n\n    if (new->handler) {\n        conf->handler = new->handler;\n    }\n    if (new->expr_handler) {\n        conf->expr_handler = new->expr_handler;\n    }\n\n    if (new->output_filters) {\n        conf->output_filters = new->output_filters;\n    }\n\n    if (new->input_filters) {\n        conf->input_filters = new->input_filters;\n    }\n\n    /*\n     * Now merge the setting of the FileETag directive.\n     */\n    if (new->etag_bits == ETAG_UNSET) {\n        conf->etag_add =\n            (conf->etag_add & (~ new->etag_remove)) | new->etag_add;\n        conf->etag_remove =\n            (conf->etag_remove & (~ new->etag_add)) | new->etag_remove;\n        conf->etag_bits =\n            (conf->etag_bits & (~ conf->etag_remove)) | conf->etag_add;\n    }\n    else {\n        conf->etag_bits = new->etag_bits;\n        conf->etag_add = new->etag_add;\n        conf->etag_remove = new->etag_remove;\n    }\n\n    if (conf->etag_bits != ETAG_NONE) {\n        conf->etag_bits &= (~ ETAG_NONE);\n    }\n\n    if (new->enable_mmap != ENABLE_MMAP_UNSET) {\n        conf->enable_mmap = new->enable_mmap;\n    }\n\n    if (new->enable_sendfile != ENABLE_SENDFILE_UNSET) {\n        conf->enable_sendfile = new->enable_sendfile;\n    }\n \n    if (new->read_buf_size) {\n        conf->read_buf_size = new->read_buf_size;\n    }\n    else {\n        conf->read_buf_size = base->read_buf_size;\n    }\n\n    conf->allow_encoded_slashes = new->allow_encoded_slashes;\n    conf->decode_encoded_slashes = new->decode_encoded_slashes;\n\n    if (new->log) {\n        if (!conf->log) {\n            conf->log = new->log;\n        }\n        else {\n            conf->log = ap_new_log_config(a, new->log);\n            ap_merge_log_config(base->log, conf->log);\n        }\n    }\n\n    conf->max_ranges = new->max_ranges != AP_MAXRANGES_UNSET ? new->max_ranges : base->max_ranges;\n    conf->max_overlaps = new->max_overlaps != AP_MAXRANGES_UNSET ? new->max_overlaps : base->max_overlaps;\n    conf->max_reversals = new->max_reversals != AP_MAXRANGES_UNSET ? new->max_reversals : base->max_reversals;\n\n    conf->cgi_pass_auth = new->cgi_pass_auth != AP_CGI_PASS_AUTH_UNSET ? new->cgi_pass_auth : base->cgi_pass_auth;\n\n    if (new->cgi_var_rules) {\n        if (!conf->cgi_var_rules) {\n            conf->cgi_var_rules = new->cgi_var_rules;\n        }\n        else {\n            conf->cgi_var_rules = apr_hash_overlay(a, new->cgi_var_rules, conf->cgi_var_rules);\n        }\n    }\n\n    AP_CORE_MERGE_FLAG(qualify_redirect_url, conf, base, new);\n\n    return (void*)conf;\n}\n\n#if APR_HAS_SO_ACCEPTFILTER\n#ifndef ACCEPT_FILTER_NAME\n#define ACCEPT_FILTER_NAME \"httpready\"\n#ifdef __FreeBSD_version\n#if __FreeBSD_version < 411000 /* httpready broken before 4.1.1 */\n#undef ACCEPT_FILTER_NAME\n#define ACCEPT_FILTER_NAME \"dataready\"\n#endif\n#endif\n#endif\n#endif\n\nstatic void *create_core_server_config(apr_pool_t *a, server_rec *s)\n{\n    core_server_config *conf;\n    int is_virtual = s->is_virtual;\n\n    conf = (core_server_config *)apr_pcalloc(a, sizeof(core_server_config));\n\n    /* global-default / global-only settings */\n\n    if (!is_virtual) {\n        conf->ap_document_root = DOCUMENT_LOCATION;\n        conf->access_name = DEFAULT_ACCESS_FNAME;\n\n        /* A mapping only makes sense in the global context */\n        conf->accf_map = apr_table_make(a, 5);\n#if APR_HAS_SO_ACCEPTFILTER\n        apr_table_setn(conf->accf_map, \"http\", ACCEPT_FILTER_NAME);\n        apr_table_setn(conf->accf_map, \"https\", \"dataready\");\n#elif defined(WIN32)\n        /* 'data' is disabled on Windows due to a DoS vuln (PR 59970) */\n        apr_table_setn(conf->accf_map, \"http\", \"connect\");\n        apr_table_setn(conf->accf_map, \"https\", \"connect\");\n#else\n        apr_table_setn(conf->accf_map, \"http\", \"data\");\n        apr_table_setn(conf->accf_map, \"https\", \"data\");\n#endif\n\n        conf->flush_max_threshold = AP_FLUSH_MAX_THRESHOLD;\n        conf->flush_max_pipelined = AP_FLUSH_MAX_PIPELINED;\n    }\n    else {\n        conf->flush_max_pipelined = -1;\n    }\n\n    /* initialization, no special case for global context */\n\n    conf->sec_dir = apr_array_make(a, 40, sizeof(ap_conf_vector_t *));\n    conf->sec_url = apr_array_make(a, 40, sizeof(ap_conf_vector_t *));\n\n    /* pcalloc'ed - we have NULL's/0's\n    conf->gprof_dir = NULL;\n\n    ** recursion stopper; 0 == unset\n    conf->redirect_limit = 0;\n    conf->subreq_limit = 0;\n\n    conf->protocol = NULL;\n     */\n\n    conf->trace_enable = AP_TRACE_UNSET;\n\n    conf->protocols = apr_array_make(a, 5, sizeof(const char *));\n    conf->protocols_honor_order = -1;\n    conf->merge_slashes = AP_CORE_CONFIG_UNSET; \n    \n    return (void *)conf;\n}\n\nstatic void *merge_core_server_configs(apr_pool_t *p, void *basev, void *virtv)\n{\n    core_server_config *base = (core_server_config *)basev;\n    core_server_config *virt = (core_server_config *)virtv;\n    core_server_config *conf = (core_server_config *)\n                               apr_pmemdup(p, base, sizeof(core_server_config));\n\n    if (virt->ap_document_root)\n        conf->ap_document_root = virt->ap_document_root;\n\n    if (virt->access_name)\n        conf->access_name = virt->access_name;\n\n    /* XXX optimize to keep base->sec_ pointers if virt->sec_ array is empty */\n    conf->sec_dir = apr_array_append(p, base->sec_dir, virt->sec_dir);\n    conf->sec_url = apr_array_append(p, base->sec_url, virt->sec_url);\n\n    if (virt->redirect_limit)\n        conf->redirect_limit = virt->redirect_limit;\n\n    if (virt->subreq_limit)\n        conf->subreq_limit = virt->subreq_limit;\n\n    if (virt->trace_enable != AP_TRACE_UNSET)\n        conf->trace_enable = virt->trace_enable;\n\n    if (virt->http09_enable != AP_HTTP09_UNSET)\n        conf->http09_enable = virt->http09_enable;\n\n    if (virt->http_conformance != AP_HTTP_CONFORMANCE_UNSET)\n        conf->http_conformance = virt->http_conformance;\n\n    if (virt->http_methods != AP_HTTP_METHODS_UNSET)\n        conf->http_methods = virt->http_methods;\n\n    /* no action for virt->accf_map, not allowed per-vhost */\n\n    if (virt->protocol)\n        conf->protocol = virt->protocol;\n\n    if (virt->gprof_dir)\n        conf->gprof_dir = virt->gprof_dir;\n\n    if (virt->error_log_format)\n        conf->error_log_format = virt->error_log_format;\n\n    if (virt->error_log_conn)\n        conf->error_log_conn = virt->error_log_conn;\n\n    if (virt->error_log_req)\n        conf->error_log_req = virt->error_log_req;\n\n    conf->merge_trailers = (virt->merge_trailers != AP_MERGE_TRAILERS_UNSET)\n                           ? virt->merge_trailers\n                           : base->merge_trailers;\n\n    conf->protocols = ((virt->protocols->nelts > 0)? \n                       virt->protocols : base->protocols);\n    conf->protocols_honor_order = ((virt->protocols_honor_order < 0)?\n                                       base->protocols_honor_order :\n                                       virt->protocols_honor_order);\n    AP_CORE_MERGE_FLAG(merge_slashes, conf, base, virt);\n    \n\n    conf->flush_max_threshold = (virt->flush_max_threshold)\n                                  ? virt->flush_max_threshold\n                                  : base->flush_max_threshold;\n    conf->flush_max_pipelined = (virt->flush_max_pipelined >= 0)\n                                  ? virt->flush_max_pipelined\n                                  : base->flush_max_pipelined;\n\n    return conf;\n}\n\n/* Add per-directory configuration entry (for <directory> section);\n * these are part of the core server config.\n */\n\nAP_CORE_DECLARE(void) ap_add_per_dir_conf(server_rec *s, void *dir_config)\n{\n    core_server_config *sconf = ap_get_core_module_config(s->module_config);\n    void **new_space = (void **)apr_array_push(sconf->sec_dir);\n\n    *new_space = dir_config;\n}\n\nAP_CORE_DECLARE(void) ap_add_per_url_conf(server_rec *s, void *url_config)\n{\n    core_server_config *sconf = ap_get_core_module_config(s->module_config);\n    void **new_space = (void **)apr_array_push(sconf->sec_url);\n\n    *new_space = url_config;\n}\n\nAP_CORE_DECLARE(void) ap_add_file_conf(apr_pool_t *p, core_dir_config *conf,\n                                       void *url_config)\n{\n    void **new_space;\n\n    if (!conf->sec_file)\n        conf->sec_file = apr_array_make(p, 2, sizeof(ap_conf_vector_t *));\n\n    new_space = (void **)apr_array_push(conf->sec_file);\n    *new_space = url_config;\n}\n\nAP_CORE_DECLARE(const char *) ap_add_if_conf(apr_pool_t *p,\n                                             core_dir_config *conf,\n                                             void *if_config)\n{\n    void **new_space;\n    core_dir_config *new = ap_get_module_config(if_config, &core_module);\n\n    if (!conf->sec_if) {\n        conf->sec_if = apr_array_make(p, 2, sizeof(ap_conf_vector_t *));\n    }\n    if (new->condition_ifelse & AP_CONDITION_ELSE) {\n        int have_if = 0;\n        if (conf->sec_if->nelts > 0) {\n            core_dir_config *last;\n            ap_conf_vector_t *lastelt = APR_ARRAY_IDX(conf->sec_if,\n                                                      conf->sec_if->nelts - 1,\n                                                      ap_conf_vector_t *);\n            last = ap_get_module_config(lastelt, &core_module);\n            if (last->condition_ifelse & AP_CONDITION_IF)\n                have_if = 1;\n        }\n        if (!have_if)\n            return \"<Else> or <ElseIf> section without previous <If> or \"\n                   \"<ElseIf> section in same scope\";\n    }\n\n    new_space = (void **)apr_array_push(conf->sec_if);\n    *new_space = if_config;\n    return NULL;\n}\n\n\n/* We need to do a stable sort, qsort isn't stable.  So to make it stable\n * we'll be maintaining the original index into the list, and using it\n * as the minor key during sorting.  The major key is the number of\n * components (where the root component is zero).\n */\nstruct reorder_sort_rec {\n    ap_conf_vector_t *elt;\n    int orig_index;\n};\n\nstatic int reorder_sorter(const void *va, const void *vb)\n{\n    const struct reorder_sort_rec *a = va;\n    const struct reorder_sort_rec *b = vb;\n    core_dir_config *core_a;\n    core_dir_config *core_b;\n\n    core_a = ap_get_core_module_config(a->elt);\n    core_b = ap_get_core_module_config(b->elt);\n\n    /* a regex always sorts after a non-regex\n     */\n    if (!core_a->r && core_b->r) {\n        return -1;\n    }\n    else if (core_a->r && !core_b->r) {\n        return 1;\n    }\n\n    /* we always sort next by the number of components\n     */\n    if (core_a->d_components < core_b->d_components) {\n        return -1;\n    }\n    else if (core_a->d_components > core_b->d_components) {\n        return 1;\n    }\n\n    /* They have the same number of components, we now have to compare\n     * the minor key to maintain the original order (from the config.)\n     */\n    return a->orig_index - b->orig_index;\n}\n\nvoid ap_core_reorder_directories(apr_pool_t *p, server_rec *s)\n{\n    core_server_config *sconf;\n    apr_array_header_t *sec_dir;\n    struct reorder_sort_rec *sortbin;\n    int nelts;\n    ap_conf_vector_t **elts;\n    int i;\n    apr_pool_t *tmp;\n\n    sconf = ap_get_core_module_config(s->module_config);\n    sec_dir = sconf->sec_dir;\n    nelts = sec_dir->nelts;\n    elts = (ap_conf_vector_t **)sec_dir->elts;\n\n    if (!nelts) {\n        /* simple case of already being sorted... */\n        /* We're not checking this condition to be fast... we're checking\n         * it to avoid trying to palloc zero bytes, which can trigger some\n         * memory debuggers to barf\n         */\n        return;\n    }\n\n    /* we have to allocate tmp space to do a stable sort */\n    apr_pool_create(&tmp, p);\n    apr_pool_tag(tmp, \"core_reorder_directories\");\n    sortbin = apr_palloc(tmp, sec_dir->nelts * sizeof(*sortbin));\n    for (i = 0; i < nelts; ++i) {\n        sortbin[i].orig_index = i;\n        sortbin[i].elt = elts[i];\n    }\n\n    qsort(sortbin, nelts, sizeof(*sortbin), reorder_sorter);\n\n    /* and now copy back to the original array */\n    for (i = 0; i < nelts; ++i) {\n        elts[i] = sortbin[i].elt;\n    }\n\n    apr_pool_destroy(tmp);\n}\n\n/*****************************************************************\n *\n * There are some elements of the core config structures in which\n * other modules have a legitimate interest (this is ugly, but necessary\n * to preserve NCSA back-compatibility).  So, we have a bunch of accessors\n * here...\n */\n\nAP_DECLARE(int) ap_allow_options(request_rec *r)\n{\n    core_dir_config *conf =\n      (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    return conf->opts;\n}\n\nAP_DECLARE(int) ap_allow_overrides(request_rec *r)\n{\n    core_dir_config *conf;\n    conf = (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    return conf->override;\n}\n\n/*\n * Optional function coming from mod_authn_core, used for\n * retrieving the type of authorization\n */\nstatic APR_OPTIONAL_FN_TYPE(authn_ap_auth_type) *authn_ap_auth_type;\n\nAP_DECLARE(const char *) ap_auth_type(request_rec *r)\n{\n    if (authn_ap_auth_type) {\n        return authn_ap_auth_type(r);\n    }\n    return NULL;\n}\n\n/*\n * Optional function coming from mod_authn_core, used for\n * retrieving the authorization realm\n */\nstatic APR_OPTIONAL_FN_TYPE(authn_ap_auth_name) *authn_ap_auth_name;\n\nAP_DECLARE(const char *) ap_auth_name(request_rec *r)\n{\n    if (authn_ap_auth_name) {\n        return authn_ap_auth_name(r);\n    }\n    return NULL;\n}\n\n/*\n * Optional function coming from mod_access_compat, used to determine how\n   access control interacts with authentication/authorization\n */\nstatic APR_OPTIONAL_FN_TYPE(access_compat_ap_satisfies) *access_compat_ap_satisfies;\n\nAP_DECLARE(int) ap_satisfies(request_rec *r)\n{\n    if (access_compat_ap_satisfies) {\n        return access_compat_ap_satisfies(r);\n    }\n    return SATISFY_NOSPEC;\n}\n\nAP_DECLARE(const char *) ap_document_root(request_rec *r) /* Don't use this! */\n{\n    core_server_config *sconf;\n    core_request_config *rconf = ap_get_core_module_config(r->request_config);\n    if (rconf->document_root)\n        return rconf->document_root;\n    sconf = ap_get_core_module_config(r->server->module_config);\n    return sconf->ap_document_root;\n}\n\nAP_DECLARE(const char *) ap_context_prefix(request_rec *r)\n{\n    core_request_config *conf = ap_get_core_module_config(r->request_config);\n    if (conf->context_prefix)\n        return conf->context_prefix;\n    else\n        return \"\";\n}\n\nAP_DECLARE(const char *) ap_context_document_root(request_rec *r)\n{\n    core_request_config *conf = ap_get_core_module_config(r->request_config);\n    if (conf->context_document_root)\n        return conf->context_document_root;\n    else\n        return ap_document_root(r);\n}\n\nAP_DECLARE(void) ap_set_document_root(request_rec *r, const char *document_root)\n{\n    core_request_config *conf = ap_get_core_module_config(r->request_config);\n    conf->document_root = document_root;\n}\n\nAP_DECLARE(void) ap_set_context_info(request_rec *r, const char *context_prefix,\n                                     const char *context_document_root)\n{\n    core_request_config *conf = ap_get_core_module_config(r->request_config);\n    if (context_prefix)\n        conf->context_prefix = context_prefix;\n    if (context_document_root)\n        conf->context_document_root = context_document_root;\n}\n\n/* Should probably just get rid of this... the only code that cares is\n * part of the core anyway (and in fact, it isn't publicised to other\n * modules).\n */\n\nchar *ap_response_code_string(request_rec *r, int error_index)\n{\n    core_dir_config *dirconf;\n    core_request_config *reqconf = ap_get_core_module_config(r->request_config);\n    const char *err;\n    const char *response;\n    ap_expr_info_t *expr;\n\n    /* check for string registered via ap_custom_response() first */\n    if (reqconf->response_code_strings != NULL\n            && reqconf->response_code_strings[error_index] != NULL) {\n        return reqconf->response_code_strings[error_index];\n    }\n\n    /* check for string specified via ErrorDocument */\n    dirconf = ap_get_core_module_config(r->per_dir_config);\n\n    if (!dirconf->response_code_exprs) {\n        return NULL;\n    }\n\n    expr = apr_hash_get(dirconf->response_code_exprs, &error_index,\n            sizeof(error_index));\n    if (!expr) {\n        return NULL;\n    }\n\n    /* special token to indicate revert back to default */\n    if ((char *) expr == &errordocument_default) {\n        return NULL;\n    }\n\n    err = NULL;\n    response = ap_expr_str_exec(r, expr, &err);\n    if (err) {\n        ap_log_rerror(\n                APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(02841) \"core: ErrorDocument: can't \"\n                \"evaluate require expression: %s\", err);\n        return NULL;\n    }\n\n    /* alas, duplication required as we return not-const */\n    return apr_pstrdup(r->pool, response);\n}\n\n\n/* Code from Harald Hanche-Olsen <hanche@imf.unit.no> */\nstatic APR_INLINE int do_double_reverse (int double_reverse,\n                                         const char *remote_host,\n                                         apr_sockaddr_t *client_addr,\n                                         apr_pool_t *pool)\n{\n    apr_sockaddr_t *sa;\n    apr_status_t rv;\n\n    if (double_reverse) {\n        /* already done */\n        return double_reverse;\n    }\n\n    if (remote_host == NULL || remote_host[0] == '\\0') {\n        /* single reverse failed, so don't bother */\n        return -1;\n    }\n\n    rv = apr_sockaddr_info_get(&sa, remote_host, APR_UNSPEC, 0, 0, pool);\n    if (rv == APR_SUCCESS) {\n        while (sa) {\n            if (apr_sockaddr_equal(sa, client_addr)) {\n                return 1;\n            }\n\n            sa = sa->next;\n        }\n    }\n\n    return -1;\n}\n\nAP_DECLARE(const char *) ap_get_remote_host(conn_rec *conn, void *dir_config,\n                                            int type, int *str_is_ip)\n{\n    int hostname_lookups;\n    int ignored_str_is_ip;\n\n    if (!str_is_ip) { /* caller doesn't want to know */\n        str_is_ip = &ignored_str_is_ip;\n    }\n    *str_is_ip = 0;\n\n    /* If we haven't checked the host name, and we want to */\n    if (dir_config) {\n        hostname_lookups = ((core_dir_config *)ap_get_core_module_config(dir_config))\n                           ->hostname_lookups;\n\n        if (hostname_lookups == HOSTNAME_LOOKUP_UNSET) {\n            hostname_lookups = HOSTNAME_LOOKUP_OFF;\n        }\n    }\n    else {\n        /* the default */\n        hostname_lookups = HOSTNAME_LOOKUP_OFF;\n    }\n\n    if (type != REMOTE_NOLOOKUP\n        && conn->remote_host == NULL\n        && (type == REMOTE_DOUBLE_REV\n        || hostname_lookups != HOSTNAME_LOOKUP_OFF)) {\n\n        if (apr_getnameinfo(&conn->remote_host, conn->client_addr, 0)\n            == APR_SUCCESS) {\n            ap_str_tolower(conn->remote_host);\n\n            if (hostname_lookups == HOSTNAME_LOOKUP_DOUBLE) {\n                conn->double_reverse = do_double_reverse(conn->double_reverse,\n                                                         conn->remote_host,\n                                                         conn->client_addr,\n                                                         conn->pool);\n                if (conn->double_reverse != 1) {\n                    conn->remote_host = NULL;\n                }\n            }\n        }\n\n        /* if failed, set it to the NULL string to indicate error */\n        if (conn->remote_host == NULL) {\n            conn->remote_host = \"\";\n        }\n    }\n\n    if (type == REMOTE_DOUBLE_REV) {\n        conn->double_reverse = do_double_reverse(conn->double_reverse,\n                                                 conn->remote_host,\n                                                 conn->client_addr, conn->pool);\n        if (conn->double_reverse == -1) {\n            return NULL;\n        }\n    }\n\n    /*\n     * Return the desired information; either the remote DNS name, if found,\n     * or either NULL (if the hostname was requested) or the IP address\n     * (if any identifier was requested).\n     */\n    if (conn->remote_host != NULL && conn->remote_host[0] != '\\0') {\n        return conn->remote_host;\n    }\n    else {\n        if (type == REMOTE_HOST || type == REMOTE_DOUBLE_REV) {\n            return NULL;\n        }\n        else {\n            *str_is_ip = 1;\n            return conn->client_ip;\n        }\n    }\n}\n\nAP_DECLARE(const char *) ap_get_useragent_host(request_rec *r,\n                                               int type, int *str_is_ip)\n{\n    conn_rec *conn = r->connection;\n    int hostname_lookups;\n    int ignored_str_is_ip;\n\n    /* Guard here when examining the host before the read_request hook\n     * has populated an r->useragent_addr\n     */\n    if (!r->useragent_addr || (r->useragent_addr == conn->client_addr)) {\n        return ap_get_remote_host(conn, r->per_dir_config, type, str_is_ip);\n    }\n\n    if (!str_is_ip) { /* caller doesn't want to know */\n        str_is_ip = &ignored_str_is_ip;\n    }\n    *str_is_ip = 0;\n\n    hostname_lookups = ((core_dir_config *)\n                        ap_get_core_module_config(r->per_dir_config))\n                            ->hostname_lookups;\n    if (hostname_lookups == HOSTNAME_LOOKUP_UNSET) {\n        hostname_lookups = HOSTNAME_LOOKUP_OFF;\n    }\n\n    if (type != REMOTE_NOLOOKUP\n        && r->useragent_host == NULL\n        && (type == REMOTE_DOUBLE_REV\n        || hostname_lookups != HOSTNAME_LOOKUP_OFF)) {\n\n        if (apr_getnameinfo(&r->useragent_host, r->useragent_addr, 0)\n            == APR_SUCCESS) {\n            ap_str_tolower(r->useragent_host);\n\n            if (hostname_lookups == HOSTNAME_LOOKUP_DOUBLE) {\n                r->double_reverse = do_double_reverse(r->double_reverse,\n                                                      r->useragent_host,\n                                                      r->useragent_addr,\n                                                      r->pool);\n                if (r->double_reverse != 1) {\n                    r->useragent_host = NULL;\n                }\n            }\n        }\n\n        /* if failed, set it to the NULL string to indicate error */\n        if (r->useragent_host == NULL) {\n            r->useragent_host = \"\";\n        }\n    }\n\n    if (type == REMOTE_DOUBLE_REV) {\n        r->double_reverse = do_double_reverse(r->double_reverse,\n                                              r->useragent_host,\n                                              r->useragent_addr, r->pool);\n        if (r->double_reverse == -1) {\n            return NULL;\n        }\n    }\n\n    /*\n     * Return the desired information; either the remote DNS name, if found,\n     * or either NULL (if the hostname was requested) or the IP address\n     * (if any identifier was requested).\n     */\n    if (r->useragent_host != NULL && r->useragent_host[0] != '\\0') {\n        return r->useragent_host;\n    }\n    else {\n        if (type == REMOTE_HOST || type == REMOTE_DOUBLE_REV) {\n            return NULL;\n        }\n        else {\n            *str_is_ip = 1;\n            return r->useragent_ip;\n        }\n    }\n}\n\n/*\n * Optional function coming from mod_ident, used for looking up ident user\n */\nstatic APR_OPTIONAL_FN_TYPE(ap_ident_lookup) *ident_lookup;\n\nAP_DECLARE(const char *) ap_get_remote_logname(request_rec *r)\n{\n    if (r->connection->remote_logname != NULL) {\n        return r->connection->remote_logname;\n    }\n\n    if (ident_lookup) {\n        return ident_lookup(r);\n    }\n\n    return NULL;\n}\n\n/* There are two options regarding what the \"name\" of a server is.  The\n * \"canonical\" name as defined by ServerName and Port, or the \"client's\n * name\" as supplied by a possible Host: header or full URI.\n *\n * The DNS option to UseCanonicalName causes this routine to do a\n * reverse lookup on the local IP address of the connection and use\n * that for the ServerName. This makes its value more reliable while\n * at the same time allowing Demon's magic virtual hosting to work.\n * The assumption is that DNS lookups are sufficiently quick...\n * -- fanf 1998-10-03\n */\nAP_DECLARE(const char *) ap_get_server_name(request_rec *r)\n{\n    conn_rec *conn = r->connection;\n    core_dir_config *d;\n    const char *retval;\n\n    d = (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    switch (d->use_canonical_name) {\n        case USE_CANONICAL_NAME_ON:\n            retval = r->server->server_hostname;\n            break;\n        case USE_CANONICAL_NAME_DNS:\n            if (conn->local_host == NULL) {\n                if (apr_getnameinfo(&conn->local_host,\n                                conn->local_addr, 0) != APR_SUCCESS)\n                    conn->local_host = apr_pstrdup(conn->pool,\n                                               r->server->server_hostname);\n                else {\n                    ap_str_tolower(conn->local_host);\n                }\n            }\n            retval = conn->local_host;\n            break;\n        case USE_CANONICAL_NAME_OFF:\n        case USE_CANONICAL_NAME_UNSET:\n            retval = r->hostname ? r->hostname : r->server->server_hostname;\n            break;\n        default:\n            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00109)\n                         \"ap_get_server_name: Invalid UCN Option somehow\");\n            retval = \"localhost\";\n            break;\n    }\n    return retval;\n}\n\n/*\n * Get the current server name from the request for the purposes\n * of using in a URL.  If the server name is an IPv6 literal\n * address, it will be returned in URL format (e.g., \"[fe80::1]\").\n */\nAP_DECLARE(const char *) ap_get_server_name_for_url(request_rec *r)\n{\n    const char *plain_server_name = ap_get_server_name(r);\n\n#if APR_HAVE_IPV6\n    if (ap_strchr_c(plain_server_name, ':')) { /* IPv6 literal? */\n        return apr_pstrcat(r->pool, \"[\", plain_server_name, \"]\", NULL);\n    }\n#endif\n    return plain_server_name;\n}\n\nAP_DECLARE(apr_port_t) ap_get_server_port(const request_rec *r)\n{\n    apr_port_t port;\n    core_dir_config *d =\n      (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    switch (d->use_canonical_name) {\n        case USE_CANONICAL_NAME_OFF:\n        case USE_CANONICAL_NAME_DNS:\n        case USE_CANONICAL_NAME_UNSET:\n            if (d->use_canonical_phys_port == USE_CANONICAL_PHYS_PORT_ON)\n                port = r->parsed_uri.port_str ? r->parsed_uri.port :\n                       r->connection->local_addr->port ? r->connection->local_addr->port :\n                       r->server->port ? r->server->port :\n                       ap_default_port(r);\n            else /* USE_CANONICAL_PHYS_PORT_OFF or USE_CANONICAL_PHYS_PORT_UNSET */\n                port = r->parsed_uri.port_str ? r->parsed_uri.port :\n                       r->server->port ? r->server->port :\n                       ap_default_port(r);\n            break;\n        case USE_CANONICAL_NAME_ON:\n            /* With UseCanonicalName on (and in all versions prior to 1.3)\n             * Apache will use the hostname and port specified in the\n             * ServerName directive to construct a canonical name for the\n             * server. (If no port was specified in the ServerName\n             * directive, Apache uses the port supplied by the client if\n             * any is supplied, and finally the default port for the protocol\n             * used.\n             */\n            if (d->use_canonical_phys_port == USE_CANONICAL_PHYS_PORT_ON)\n                port = r->server->port ? r->server->port :\n                       r->connection->local_addr->port ? r->connection->local_addr->port :\n                       ap_default_port(r);\n            else /* USE_CANONICAL_PHYS_PORT_OFF or USE_CANONICAL_PHYS_PORT_UNSET */\n                port = r->server->port ? r->server->port :\n                       ap_default_port(r);\n            break;\n        default:\n            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00110)\n                         \"ap_get_server_port: Invalid UCN Option somehow\");\n            port = ap_default_port(r);\n            break;\n    }\n\n    return port;\n}\n\nAP_DECLARE(char *) ap_construct_url(apr_pool_t *p, const char *uri,\n                                    request_rec *r)\n{\n    unsigned port = ap_get_server_port(r);\n    const char *host = ap_get_server_name_for_url(r);\n\n    if (ap_is_default_port(port, r)) {\n        return apr_pstrcat(p, ap_http_scheme(r), \"://\", host, uri, NULL);\n    }\n\n    return apr_psprintf(p, \"%s://%s:%u%s\", ap_http_scheme(r), host, port, uri);\n}\n\nAP_DECLARE(apr_off_t) ap_get_limit_req_body(const request_rec *r)\n{\n    core_dir_config *d =\n      (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    if (d->limit_req_body == AP_LIMIT_REQ_BODY_UNSET) {\n        return AP_DEFAULT_LIMIT_REQ_BODY;\n    }\n\n    return d->limit_req_body;\n}\n\nAP_DECLARE(apr_size_t) ap_get_read_buf_size(const request_rec *r)\n{\n    core_dir_config *d = ap_get_core_module_config(r->per_dir_config);\n\n    return d->read_buf_size ? d->read_buf_size : AP_IOBUFSIZE;\n}\n\n\n/*****************************************************************\n *\n * Commands... this module handles almost all of the NCSA httpd.conf\n * commands, but most of the old srm.conf is in the modules.\n */\n\n\n/* returns a parent if it matches the given directive */\nstatic const ap_directive_t * find_parent(const ap_directive_t *dirp,\n                                          const char *what)\n{\n    while (dirp->parent != NULL) {\n        dirp = dirp->parent;\n\n        /* ### it would be nice to have atom-ized directives */\n        if (ap_cstr_casecmp(dirp->directive, what) == 0)\n            return dirp;\n    }\n\n    return NULL;\n}\n\nAP_DECLARE(const char *) ap_check_cmd_context(cmd_parms *cmd,\n                                              unsigned forbidden)\n{\n    const char *gt = (cmd->cmd->name[0] == '<'\n                      && cmd->cmd->name[strlen(cmd->cmd->name)-1] != '>')\n                         ? \">\" : \"\";\n    const ap_directive_t *found;\n\n    if ((forbidden & NOT_IN_VIRTUALHOST) && cmd->server->is_virtual) {\n        return apr_pstrcat(cmd->pool, cmd->cmd->name, gt,\n                           \" cannot occur within <VirtualHost> section\", NULL);\n    }\n\n    if ((forbidden & NOT_IN_DIR_CONTEXT) && cmd->limited != -1) {\n        return apr_pstrcat(cmd->pool, cmd->cmd->name, gt,\n                           \" cannot occur within <Limit> or <LimitExcept> \"\n                           \"section\", NULL);\n    }\n\n    if ((forbidden & NOT_IN_HTACCESS) && (cmd->pool == cmd->temp_pool)) {\n         return apr_pstrcat(cmd->pool, cmd->cmd->name, gt,\n                            \" cannot occur within htaccess files\", NULL);\n    }\n\n    if ((forbidden & NOT_IN_DIR_LOC_FILE) == NOT_IN_DIR_LOC_FILE) {\n        if (cmd->path != NULL) {\n            return apr_pstrcat(cmd->pool, cmd->cmd->name, gt,\n                            \" cannot occur within directory context\", NULL);\n        }\n        if (cmd->cmd->req_override & EXEC_ON_READ) {\n            /* EXEC_ON_READ must be NOT_IN_DIR_LOC_FILE, if not, it will\n             * (deliberately) segfault below in the individual tests...\n             */\n            return NULL;\n        }\n    }\n\n    if (((forbidden & NOT_IN_DIRECTORY)\n         && ((found = find_parent(cmd->directive, \"<Directory\"))\n             || (found = find_parent(cmd->directive, \"<DirectoryMatch\"))))\n        || ((forbidden & NOT_IN_LOCATION)\n            && ((found = find_parent(cmd->directive, \"<Location\"))\n                || (found = find_parent(cmd->directive, \"<LocationMatch\"))))\n        || ((forbidden & NOT_IN_FILES)\n            && ((found = find_parent(cmd->directive, \"<Files\"))\n                || (found = find_parent(cmd->directive, \"<FilesMatch\"))\n                || (found = find_parent(cmd->directive, \"<If\"))\n                || (found = find_parent(cmd->directive, \"<ElseIf\"))\n                || (found = find_parent(cmd->directive, \"<Else\"))))\n        || ((forbidden & NOT_IN_PROXY)\n            && ((found = find_parent(cmd->directive, \"<Proxy\"))\n                || (found = find_parent(cmd->directive, \"<ProxyMatch\"))))) {\n        return apr_pstrcat(cmd->pool, cmd->cmd->name, gt,\n                           \" cannot occur within \", found->directive,\n                           \"> section\", NULL);\n    }\n\n    return NULL;\n}\n\nstatic const char *set_access_name(cmd_parms *cmd, void *dummy,\n                                   const char *arg)\n{\n    void *sconf = cmd->server->module_config;\n    core_server_config *conf = ap_get_core_module_config(sconf);\n\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    conf->access_name = apr_pstrdup(cmd->pool, arg);\n    return NULL;\n}\n\nAP_DECLARE(const char *) ap_resolve_env(apr_pool_t *p, const char * word)\n{\n# define SMALL_EXPANSION 5\n    struct sll {\n        struct sll *next;\n        const char *string;\n        apr_size_t len;\n    } *result, *current, sresult[SMALL_EXPANSION];\n    char *res_buf, *cp;\n    const char *s, *e, *ep;\n    unsigned spc;\n    apr_size_t outlen;\n\n    s = ap_strchr_c(word, '$');\n    if (!s) {\n        return word;\n    }\n\n    /* well, actually something to do */\n    ep = word + strlen(word);\n    spc = 0;\n    result = current = &(sresult[spc++]);\n    current->next = NULL;\n    current->string = word;\n    current->len = s - word;\n    outlen = current->len;\n\n    do {\n        /* prepare next entry */\n        if (current->len) {\n            current->next = (spc < SMALL_EXPANSION)\n                            ? &(sresult[spc++])\n                            : (struct sll *)apr_palloc(p,\n                                                       sizeof(*current->next));\n            current = current->next;\n            current->next = NULL;\n            current->len = 0;\n        }\n\n        if (*s == '$') {\n            if (s[1] == '{' && (e = ap_strchr_c(s+2, '}'))) {\n                char *name = apr_pstrmemdup(p, s+2, e-s-2);\n                word = NULL;\n                if (server_config_defined_vars)\n                    word = apr_table_get(server_config_defined_vars, name);\n                if (!word)\n                    word = apr_pstrdup(p, getenv(name));\n                if (word) {\n                    current->string = word;\n                    current->len = strlen(word);\n                    outlen += current->len;\n                }\n                else {\n                    if (ap_strchr(name, ':') == 0)\n                        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, NULL, APLOGNO(00111)\n                                     \"Config variable ${%s} is not defined\",\n                                     name);\n                    current->string = s;\n                    current->len = e - s + 1;\n                    outlen += current->len;\n                }\n                s = e + 1;\n            }\n            else {\n                current->string = s++;\n                current->len = 1;\n                ++outlen;\n            }\n        }\n        else {\n            word = s;\n            s = ap_strchr_c(s, '$');\n            current->string = word;\n            current->len = s ? s - word : ep - word;\n            outlen += current->len;\n        }\n    } while (s && *s);\n\n    /* assemble result */\n    res_buf = cp = apr_palloc(p, outlen + 1);\n    do {\n        if (result->len) {\n            memcpy(cp, result->string, result->len);\n            cp += result->len;\n        }\n        result = result->next;\n    } while (result);\n    res_buf[outlen] = '\\0';\n\n    return res_buf;\n}\n\nstatic int reset_config_defines(void *dummy)\n{\n    ap_server_config_defines = saved_server_config_defines;\n    saved_server_config_defines = NULL;\n    server_config_defined_vars = NULL;\n    ap_runtime_dir = NULL;\n    return OK;\n}\n\n/*\n * Make sure we can revert the effects of Define/UnDefine when restarting.\n * This function must be called once per loading of the config, before\n * ap_server_config_defines is changed. This may be during reading of the\n * config, which is even before the pre_config hook is run (due to\n * EXEC_ON_READ for Define/UnDefine).\n */\nstatic void init_config_defines(apr_pool_t *pconf)\n{\n    saved_server_config_defines = ap_server_config_defines;\n    /* Use apr_array_copy instead of apr_array_copy_hdr because it does not\n     * protect from the way unset_define removes entries.\n     */\n    ap_server_config_defines = apr_array_copy(pconf, ap_server_config_defines);\n}\n\nstatic const char *set_define(cmd_parms *cmd, void *dummy,\n                              const char *name, const char *value)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);\n    if (err)\n        return err;\n    if (ap_strchr_c(name, ':') != NULL) {\n        return \"Variable name must not contain ':'\";\n    }\n\n    if (!saved_server_config_defines) {\n        init_config_defines(cmd->pool);\n    }\n    if (!ap_exists_config_define(name)) {\n        *(const char **)apr_array_push(ap_server_config_defines) = name;\n    }\n    if (value) {\n        if (!server_config_defined_vars) {\n            server_config_defined_vars = apr_table_make(cmd->pool, 5);\n        }\n        apr_table_setn(server_config_defined_vars, name, value);\n    }\n\n    return NULL;\n}\n\nstatic const char *unset_define(cmd_parms *cmd, void *dummy,\n                                const char *name)\n{\n    int i;\n    const char **defines;\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);\n    if (err)\n        return err;\n    if (ap_strchr_c(name, ':') != NULL) {\n        return \"Variable name must not contain ':'\";\n    }\n\n    if (!saved_server_config_defines) {\n        init_config_defines(cmd->pool);\n    }\n\n    defines = (const char **)ap_server_config_defines->elts;\n    for (i = 0; i < ap_server_config_defines->nelts; i++) {\n        if (strcmp(defines[i], name) == 0) {\n            defines[i] = *(const char **)apr_array_pop(ap_server_config_defines);\n            break;\n        }\n    }\n\n    if (server_config_defined_vars) {\n        apr_table_unset(server_config_defined_vars, name);\n    }\n\n    return NULL;\n}\n\nstatic const char *generate_error(cmd_parms *cmd, void *dummy,\n                                  const char *arg)\n{\n    if (!arg || !*arg) {\n        return \"The Error directive was used with no message.\";\n    }\n\n    if (*arg == '\"' || *arg == '\\'') { /* strip off quotes */\n        apr_size_t len = strlen(arg);\n        char last = *(arg + len - 1);\n\n        if (*arg == last) {\n            return apr_pstrndup(cmd->pool, arg + 1, len - 2);\n        }\n    }\n\n    return arg;\n}\n\n#ifdef GPROF\nstatic const char *set_gprof_dir(cmd_parms *cmd, void *dummy, const char *arg)\n{\n    void *sconf = cmd->server->module_config;\n    core_server_config *conf = ap_get_core_module_config(sconf);\n\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    conf->gprof_dir = apr_pstrdup(cmd->pool, arg);\n    return NULL;\n}\n#endif /*GPROF*/\n\nstatic const char *set_add_default_charset(cmd_parms *cmd,\n                                           void *d_, const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (!ap_cstr_casecmp(arg, \"Off\")) {\n       d->add_default_charset = ADD_DEFAULT_CHARSET_OFF;\n    }\n    else if (!ap_cstr_casecmp(arg, \"On\")) {\n       d->add_default_charset = ADD_DEFAULT_CHARSET_ON;\n       d->add_default_charset_name = DEFAULT_ADD_DEFAULT_CHARSET_NAME;\n    }\n    else {\n       d->add_default_charset = ADD_DEFAULT_CHARSET_ON;\n       d->add_default_charset_name = arg;\n    }\n\n    return NULL;\n}\n\nstatic const char *set_document_root(cmd_parms *cmd, void *dummy,\n                                     const char *arg)\n{\n    void *sconf = cmd->server->module_config;\n    core_server_config *conf = ap_get_core_module_config(sconf);\n\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    /* When ap_document_root_check is false; skip all the stuff below */\n    if (!ap_document_root_check) {\n       conf->ap_document_root = arg;\n       return NULL;\n    }\n\n    /* Make it absolute, relative to ServerRoot */\n    arg = ap_server_root_relative(cmd->pool, arg);\n    if (arg == NULL) {\n        return \"DocumentRoot must be a directory\";\n    }\n\n    /* TODO: ap_configtestonly */\n    if (apr_filepath_merge((char**)&conf->ap_document_root, NULL, arg,\n                           APR_FILEPATH_TRUENAME, cmd->pool) != APR_SUCCESS\n        || !ap_is_directory(cmd->temp_pool, arg)) {\n        if (cmd->server->is_virtual) {\n            ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0,\n                          cmd->pool, APLOGNO(00112)\n                          \"Warning: DocumentRoot [%s] does not exist\",\n                          arg);\n            conf->ap_document_root = arg;\n        }\n        else {\n            return apr_psprintf(cmd->pool, \n                                \"DocumentRoot '%s' is not a directory, or is not readable\",\n                                arg);\n        }\n    }\n    return NULL;\n}\n\nAP_DECLARE(void) ap_custom_response(request_rec *r, int status,\n                                    const char *string)\n{\n    core_request_config *conf = ap_get_core_module_config(r->request_config);\n    int idx;\n\n    if (conf->response_code_strings == NULL) {\n        conf->response_code_strings =\n            apr_pcalloc(r->pool,\n                        sizeof(*conf->response_code_strings) * RESPONSE_CODES);\n    }\n\n    idx = ap_index_of_response(status);\n\n    conf->response_code_strings[idx] =\n       ((ap_is_url(string) || (*string == '/')) && (*string != '\"')) ?\n       apr_pstrdup(r->pool, string) : apr_pstrcat(r->pool, \"\\\"\", string, NULL);\n}\n\nstatic const char *set_error_document(cmd_parms *cmd, void *conf_,\n                                      const char *errno_str, const char *msg)\n{\n    core_dir_config *conf = conf_;\n    int error_number, index_number, idx500;\n    enum { MSG, LOCAL_PATH, REMOTE_PATH } what = MSG;\n\n    /* 1st parameter should be a 3 digit number, which we recognize;\n     * convert it into an array index\n     */\n    error_number = atoi(errno_str);\n    idx500 = ap_index_of_response(HTTP_INTERNAL_SERVER_ERROR);\n\n    if (error_number == HTTP_INTERNAL_SERVER_ERROR) {\n        index_number = idx500;\n    }\n    else if ((index_number = ap_index_of_response(error_number)) == idx500) {\n        return apr_pstrcat(cmd->pool, \"Unsupported HTTP response code \",\n                           errno_str, NULL);\n    }\n\n    /* Heuristic to determine second argument. */\n    if (ap_strchr_c(msg,' '))\n        what = MSG;\n    else if (msg[0] == '/')\n        what = LOCAL_PATH;\n    else if (ap_is_url(msg))\n        what = REMOTE_PATH;\n    else\n        what = MSG;\n\n    /* The entry should be ignored if it is a full URL for a 401 error */\n\n    if (error_number == 401 && what == REMOTE_PATH) {\n        ap_log_error(APLOG_MARK, APLOG_NOTICE, 0, cmd->server, APLOGNO(00113)\n                     \"%s:%d cannot use a full URL in a 401 ErrorDocument \"\n                     \"directive --- ignoring!\", cmd->directive->filename, cmd->directive->line_num);\n    }\n    else { /* Store it... */\n        if (conf->response_code_exprs == NULL) {\n            conf->response_code_exprs = apr_hash_make(cmd->pool);\n        }\n\n        if (ap_cstr_casecmp(msg, \"default\") == 0) {\n            /* special case: ErrorDocument 404 default restores the\n             * canned server error response\n             */\n            apr_hash_set(conf->response_code_exprs,\n                    apr_pmemdup(cmd->pool, &index_number, sizeof(index_number)),\n                    sizeof(index_number), &errordocument_default);\n        }\n        else {\n            ap_expr_info_t *expr;\n            const char *expr_err = NULL;\n\n            /* hack. Prefix a \" if it is a msg; as that is what\n             * http_protocol.c relies on to distinguish between\n             * a msg and a (local) path.\n             */\n            const char *response =\n                    (what == MSG) ? apr_pstrcat(cmd->pool, \"\\\"\", msg, NULL) :\n                            apr_pstrdup(cmd->pool, msg);\n\n            expr = ap_expr_parse_cmd(cmd, response, AP_EXPR_FLAG_STRING_RESULT,\n                    &expr_err, NULL);\n\n            if (expr_err) {\n                return apr_pstrcat(cmd->temp_pool,\n                                   \"Cannot parse expression in ErrorDocument: \",\n                                   expr_err, NULL);\n            }\n\n            apr_hash_set(conf->response_code_exprs,\n                    apr_pmemdup(cmd->pool, &index_number, sizeof(index_number)),\n                    sizeof(index_number), expr);\n\n        }\n    }\n\n    return NULL;\n}\n\nstatic const char *set_allow_opts(cmd_parms *cmd, allow_options_t *opts,\n                                  const char *l)\n{\n    allow_options_t opt;\n    int first = 1;\n\n    char *w, *p = (char *) l;\n    char *tok_state;\n\n    while ((w = apr_strtok(p, \",\", &tok_state)) != NULL) {\n\n        if (first) {\n            p = NULL;\n            *opts = OPT_NONE;\n            first = 0;\n        }\n\n        if (!ap_cstr_casecmp(w, \"Indexes\")) {\n            opt = OPT_INDEXES;\n        }\n        else if (!ap_cstr_casecmp(w, \"Includes\")) {\n            /* If Includes is permitted, both Includes and\n             * IncludesNOEXEC may be changed. */\n            opt = (OPT_INCLUDES | OPT_INC_WITH_EXEC);\n        }\n        else if (!ap_cstr_casecmp(w, \"IncludesNOEXEC\")) {\n            opt = OPT_INCLUDES;\n        }\n        else if (!ap_cstr_casecmp(w, \"FollowSymLinks\")) {\n            opt = OPT_SYM_LINKS;\n        }\n        else if (!ap_cstr_casecmp(w, \"SymLinksIfOwnerMatch\")) {\n            opt = OPT_SYM_OWNER;\n        }\n        else if (!ap_cstr_casecmp(w, \"ExecCGI\")) {\n            opt = OPT_EXECCGI;\n        }\n        else if (!ap_cstr_casecmp(w, \"MultiViews\")) {\n            opt = OPT_MULTI;\n        }\n        else if (!ap_cstr_casecmp(w, \"RunScripts\")) { /* AI backcompat. Yuck */\n            opt = OPT_MULTI|OPT_EXECCGI;\n        }\n        else if (!ap_cstr_casecmp(w, \"None\")) {\n            opt = OPT_NONE;\n        }\n        else if (!ap_cstr_casecmp(w, \"All\")) {\n            opt = OPT_ALL;\n        }\n        else {\n            return apr_pstrcat(cmd->pool, \"Illegal option \", w, NULL);\n        }\n\n        *opts |= opt;\n    }\n\n    (*opts) &= (~OPT_UNSET);\n\n    return NULL;\n}\n\nstatic const char *set_override(cmd_parms *cmd, void *d_, const char *l)\n{\n    core_dir_config *d = d_;\n    char *w;\n    char *k, *v;\n    const char *err;\n\n    /* Throw a warning if we're in <Location> or <Files> */\n    if (ap_check_cmd_context(cmd, NOT_IN_LOCATION | NOT_IN_FILES)) {\n        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, APLOGNO(00114)\n                     \"Useless use of AllowOverride in line %d of %s.\",\n                     cmd->directive->line_num, cmd->directive->filename);\n    }\n    if ((err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS)) != NULL)\n        return err;\n\n    d->override = OR_NONE;\n    while (l[0]) {\n        w = ap_getword_conf(cmd->temp_pool, &l);\n\n        k = w;\n        v = strchr(k, '=');\n        if (v) {\n                *v++ = '\\0';\n        }\n\n        if (!ap_cstr_casecmp(w, \"Limit\")) {\n            d->override |= OR_LIMIT;\n        }\n        else if (!ap_cstr_casecmp(k, \"Options\")) {\n            d->override |= OR_OPTIONS;\n            if (v)\n                set_allow_opts(cmd, &(d->override_opts), v);\n            else\n                d->override_opts = OPT_ALL;\n        }\n        else if (!ap_cstr_casecmp(w, \"FileInfo\")) {\n            d->override |= OR_FILEINFO;\n        }\n        else if (!ap_cstr_casecmp(w, \"AuthConfig\")) {\n            d->override |= OR_AUTHCFG;\n        }\n        else if (!ap_cstr_casecmp(w, \"Indexes\")) {\n            d->override |= OR_INDEXES;\n        }\n        else if (!ap_cstr_casecmp(w, \"Nonfatal\")) {\n            if (!v) {\n                return apr_pstrcat(cmd->pool, \"=Override, =Unknown or =All expected after \", w, NULL);\n            }\n            else if (!ap_cstr_casecmp(v, \"Override\")) {\n                d->override |= NONFATAL_OVERRIDE;\n            }\n            else if (!ap_cstr_casecmp(v, \"Unknown\")) {\n                d->override |= NONFATAL_UNKNOWN;\n            }\n            else if (!ap_cstr_casecmp(v, \"All\")) {\n                d->override |= NONFATAL_ALL;\n            }\n        }\n        else if (!ap_cstr_casecmp(w, \"None\")) {\n            d->override = OR_NONE;\n        }\n        else if (!ap_cstr_casecmp(w, \"All\")) {\n            d->override = OR_ALL;\n        }\n        else {\n            return apr_pstrcat(cmd->pool, \"Illegal override option \", w, NULL);\n        }\n\n        d->override &= ~OR_UNSET;\n    }\n\n    return NULL;\n}\n\nstatic const char *set_cgi_pass_auth(cmd_parms *cmd, void *d_, int flag)\n{\n    core_dir_config *d = d_;\n\n    d->cgi_pass_auth = flag ? AP_CGI_PASS_AUTH_ON : AP_CGI_PASS_AUTH_OFF;\n\n    return NULL;\n}\n\nstatic const char *set_cgi_var(cmd_parms *cmd, void *d_,\n                               const char *var, const char *rule_)\n{\n    core_dir_config *d = d_;\n    char *rule = apr_pstrdup(cmd->pool, rule_);\n\n    ap_str_tolower(rule);\n\n    if (!strcmp(var, \"REQUEST_URI\")) {\n        if (strcmp(rule, \"current-uri\") && strcmp(rule, \"original-uri\")) {\n            return \"Valid rules for REQUEST_URI are 'current-uri' and 'original-uri'\";\n        }\n    }\n    else {\n        return apr_pstrcat(cmd->pool, \"Unrecognized CGI variable: \\\"\",\n                           var, \"\\\"\", NULL);\n    }\n\n    if (!d->cgi_var_rules) {\n        d->cgi_var_rules = apr_hash_make(cmd->pool);\n    }\n    apr_hash_set(d->cgi_var_rules, var, APR_HASH_KEY_STRING, rule);\n    return NULL;\n}\n\nstatic const char *set_qualify_redirect_url(cmd_parms *cmd, void *d_, int flag)\n{\n    core_dir_config *d = d_;\n\n    d->qualify_redirect_url = flag ? AP_CORE_CONFIG_ON : AP_CORE_CONFIG_OFF;\n\n    return NULL;\n}\n\nstatic const char *set_core_server_flag(cmd_parms *cmd, void *s_, int flag)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    return ap_set_flag_slot(cmd, conf, flag);\n}\n\nstatic const char *set_override_list(cmd_parms *cmd, void *d_, int argc, char *const argv[])\n{\n    core_dir_config *d = d_;\n    int i;\n    const char *err;\n\n    /* Throw a warning if we're in <Location> or <Files> */\n    if (ap_check_cmd_context(cmd, NOT_IN_LOCATION | NOT_IN_FILES)) {\n        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, APLOGNO(00115)\n                     \"Useless use of AllowOverrideList at %s:%d\",\n                     cmd->directive->filename, cmd->directive->line_num);\n    }\n    if ((err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS)) != NULL)\n        return err;\n\n    d->override_list = apr_table_make(cmd->pool, argc);\n\n    for (i = 0; i < argc; i++) {\n        if (!ap_cstr_casecmp(argv[i], \"None\")) {\n            if (argc != 1) {\n                return \"'None' not allowed with other directives in \"\n                       \"AllowOverrideList\";\n            }\n            return NULL;\n        }\n        else {\n            const command_rec *result = NULL;\n            module *mod = ap_top_module;\n\n            result = ap_find_command_in_modules(argv[i], &mod);\n            if (result == NULL) {\n                ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server,\n                             APLOGNO(00116) \"Discarding unrecognized \"\n                             \"directive `%s' in AllowOverrideList at %s:%d\",\n                             argv[i], cmd->directive->filename,\n                             cmd->directive->line_num);\n                continue;\n            }\n            else if ((result->req_override & (OR_ALL|ACCESS_CONF)) == 0) {\n                ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server,\n                             APLOGNO(02304) \"Discarding directive `%s' not \"\n                             \"allowed in AllowOverrideList at %s:%d\",\n                             argv[i], cmd->directive->filename,\n                             cmd->directive->line_num);\n                continue;\n            }\n            else {\n                apr_table_setn(d->override_list, argv[i], \"1\");\n            }\n        }\n    }\n\n    return NULL;\n}\n\nstatic const char *set_options(cmd_parms *cmd, void *d_, const char *l)\n{\n    core_dir_config *d = d_;\n    allow_options_t opt;\n    int first = 1;\n    int merge = 0;\n    int all_none = 0;\n    char action;\n\n    while (l[0]) {\n        char *w = ap_getword_conf(cmd->temp_pool, &l);\n        action = '\\0';\n\n        if (*w == '+' || *w == '-') {\n            action = *(w++);\n            if (!merge && !first && !all_none) {\n                return \"Either all Options must start with + or -, or no Option may.\";\n            }\n            merge = 1;\n        }\n        else if (first) {\n            d->opts = OPT_NONE;\n        }\n        else if (merge) {\n            return \"Either all Options must start with + or -, or no Option may.\";\n        }\n\n        if (!ap_cstr_casecmp(w, \"Indexes\")) {\n            opt = OPT_INDEXES;\n        }\n        else if (!ap_cstr_casecmp(w, \"Includes\")) {\n            opt = (OPT_INCLUDES | OPT_INC_WITH_EXEC);\n        }\n        else if (!ap_cstr_casecmp(w, \"IncludesNOEXEC\")) {\n            opt = OPT_INCLUDES;\n        }\n        else if (!ap_cstr_casecmp(w, \"FollowSymLinks\")) {\n            opt = OPT_SYM_LINKS;\n        }\n        else if (!ap_cstr_casecmp(w, \"SymLinksIfOwnerMatch\")) {\n            opt = OPT_SYM_OWNER;\n        }\n        else if (!ap_cstr_casecmp(w, \"ExecCGI\")) {\n            opt = OPT_EXECCGI;\n        }\n        else if (!ap_cstr_casecmp(w, \"MultiViews\")) {\n            opt = OPT_MULTI;\n        }\n        else if (!ap_cstr_casecmp(w, \"RunScripts\")) { /* AI backcompat. Yuck */\n            opt = OPT_MULTI|OPT_EXECCGI;\n        }\n        else if (!ap_cstr_casecmp(w, \"None\")) {\n            if (!first) {\n                return \"'Options None' must be the first Option given.\";\n            }\n            else if (merge) { /* Only works since None may not follow any other option. */\n                return \"You may not use 'Options +None' or 'Options -None'.\";\n            }\n            opt = OPT_NONE;\n            all_none = 1;\n        }\n        else if (!ap_cstr_casecmp(w, \"All\")) {\n            if (!first) {\n                return \"'Options All' must be the first option given.\";\n            }\n            else if (merge) { /* Only works since All may not follow any other option. */\n                return \"You may not use 'Options +All' or 'Options -All'.\";\n            }\n            opt = OPT_ALL;\n            all_none = 1;\n        }\n        else {\n            return apr_pstrcat(cmd->pool, \"Illegal option \", w, NULL);\n        }\n\n        if ( (cmd->override_opts & opt) != opt ) {\n            return apr_pstrcat(cmd->pool, \"Option \", w, \" not allowed here\", NULL);\n        }\n        else if (action == '-') {\n            /* we ensure the invariant (d->opts_add & d->opts_remove) == 0 */\n            d->opts_remove |= opt;\n            d->opts_add &= ~opt;\n            d->opts &= ~opt;\n        }\n        else if (action == '+') {\n            d->opts_add |= opt;\n            d->opts_remove &= ~opt;\n            d->opts |= opt;\n        }\n        else {\n            d->opts |= opt;\n        }\n\n        first = 0;\n    }\n\n    return NULL;\n}\n\nstatic const char *set_default_type(cmd_parms *cmd, void *d_,\n                                   const char *arg)\n{\n    if ((ap_cstr_casecmp(arg, \"off\") != 0) && (ap_cstr_casecmp(arg, \"none\") != 0)) {\n        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, APLOGNO(00117)\n              \"Ignoring deprecated use of DefaultType in line %d of %s.\",\n                     cmd->directive->line_num, cmd->directive->filename);\n    }\n\n    return NULL;\n}\n\nstatic const char *set_sethandler(cmd_parms *cmd,\n                                     void *d_,\n                                     const char *arg_)\n{\n    core_dir_config *dirconf = d_;\n    const char *err;\n    dirconf->expr_handler = ap_expr_parse_cmd(cmd, arg_,\n                                          AP_EXPR_FLAG_STRING_RESULT,\n                                          &err, NULL);\n    if (err) {\n        return apr_pstrcat(cmd->pool,\n                \"Can't parse expression : \", err, NULL);\n    }\n    return NULL;\n}\n\n/*\n * Note what data should be used when forming file ETag values.\n * It would be nicer to do this as an ITERATE, but then we couldn't\n * remember the +/- state properly.\n */\nstatic const char *set_etag_bits(cmd_parms *cmd, void *mconfig,\n                                 const char *args_p)\n{\n    core_dir_config *cfg;\n    etag_components_t bit;\n    char action;\n    char *token;\n    const char *args;\n    int valid;\n    int first;\n    int explicit;\n\n    cfg = (core_dir_config *)mconfig;\n\n    args = args_p;\n    first = 1;\n    explicit = 0;\n    while (args[0] != '\\0') {\n        action = '*';\n        bit = ETAG_UNSET;\n        valid = 1;\n        token = ap_getword_conf(cmd->temp_pool, &args);\n        if ((*token == '+') || (*token == '-')) {\n            action = *token;\n            token++;\n        }\n        else {\n            /*\n             * The occurrence of an absolute setting wipes\n             * out any previous relative ones.  The first such\n             * occurrence forgets any inherited ones, too.\n             */\n            if (first) {\n                cfg->etag_bits = ETAG_UNSET;\n                cfg->etag_add = ETAG_UNSET;\n                cfg->etag_remove = ETAG_UNSET;\n                first = 0;\n            }\n        }\n\n        if (ap_cstr_casecmp(token, \"None\") == 0) {\n            if (action != '*') {\n                valid = 0;\n            }\n            else {\n                cfg->etag_bits = bit = ETAG_NONE;\n                explicit = 1;\n            }\n        }\n        else if (ap_cstr_casecmp(token, \"All\") == 0) {\n            if (action != '*') {\n                valid = 0;\n            }\n            else {\n                explicit = 1;\n                cfg->etag_bits = bit = ETAG_ALL;\n            }\n        }\n        else if (ap_cstr_casecmp(token, \"Size\") == 0) {\n            bit = ETAG_SIZE;\n        }\n        else if ((ap_cstr_casecmp(token, \"LMTime\") == 0)\n                 || (ap_cstr_casecmp(token, \"MTime\") == 0)\n                 || (ap_cstr_casecmp(token, \"LastModified\") == 0)) {\n            bit = ETAG_MTIME;\n        }\n        else if (ap_cstr_casecmp(token, \"INode\") == 0) {\n            bit = ETAG_INODE;\n        }\n        else if (ap_cstr_casecmp(token, \"Digest\") == 0) {\n            bit = ETAG_DIGEST;\n        }\n        else {\n            return apr_pstrcat(cmd->pool, \"Unknown keyword '\",\n                               token, \"' for \", cmd->cmd->name,\n                               \" directive\", NULL);\n        }\n\n        if (! valid) {\n            return apr_pstrcat(cmd->pool, cmd->cmd->name, \" keyword '\",\n                               token, \"' cannot be used with '+' or '-'\",\n                               NULL);\n        }\n\n        if (action == '+') {\n            /*\n             * Make sure it's in the 'add' list and absent from the\n             * 'subtract' list.\n             */\n            cfg->etag_add |= bit;\n            cfg->etag_remove &= (~ bit);\n        }\n        else if (action == '-') {\n            cfg->etag_remove |= bit;\n            cfg->etag_add &= (~ bit);\n        }\n        else {\n            /*\n             * Non-relative values wipe out any + or - values\n             * accumulated so far.\n             */\n            cfg->etag_bits |= bit;\n            cfg->etag_add = ETAG_UNSET;\n            cfg->etag_remove = ETAG_UNSET;\n            explicit = 1;\n        }\n    }\n\n    /*\n     * Any setting at all will clear the 'None' and 'Unset' bits.\n     */\n\n    if (cfg->etag_add != ETAG_UNSET) {\n        cfg->etag_add &= (~ ETAG_UNSET);\n    }\n\n    if (cfg->etag_remove != ETAG_UNSET) {\n        cfg->etag_remove &= (~ ETAG_UNSET);\n    }\n\n    if (explicit) {\n        cfg->etag_bits &= (~ ETAG_UNSET);\n\n        if ((cfg->etag_bits & ETAG_NONE) != ETAG_NONE) {\n            cfg->etag_bits &= (~ ETAG_NONE);\n        }\n    }\n\n    return NULL;\n}\n\nstatic const char *set_enable_mmap(cmd_parms *cmd, void *d_,\n                                   const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        d->enable_mmap = ENABLE_MMAP_ON;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        d->enable_mmap = ENABLE_MMAP_OFF;\n    }\n    else {\n        return \"parameter must be 'on' or 'off'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_enable_sendfile(cmd_parms *cmd, void *d_,\n                                   const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        d->enable_sendfile = ENABLE_SENDFILE_ON;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        d->enable_sendfile = ENABLE_SENDFILE_OFF;\n    }\n    else {\n        return \"parameter must be 'on' or 'off'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_read_buf_size(cmd_parms *cmd, void *d_,\n                                     const char *arg)\n{\n    core_dir_config *d = d_;\n    apr_off_t size;\n    char *end;\n\n    if (apr_strtoff(&size, arg, &end, 10)\n            || *end || size < 0 || size > APR_UINT32_MAX)\n        return apr_pstrcat(cmd->pool,\n                           \"parameter must be a number between 0 and \"\n                           APR_STRINGIFY(APR_UINT32_MAX) \"): \",\n                           arg, NULL);\n\n    d->read_buf_size = (apr_size_t)size;\n\n    return NULL;\n}\n\nstatic const char *set_flush_max_threshold(cmd_parms *cmd, void *d_,\n                                           const char *arg)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    apr_off_t size;\n    char *end;\n\n    if (apr_strtoff(&size, arg, &end, 10)\n            || *end || size < 0 || size > APR_UINT32_MAX)\n        return apr_pstrcat(cmd->pool,\n                           \"parameter must be a number between 0 and \"\n                           APR_STRINGIFY(APR_UINT32_MAX) \"): \",\n                           arg, NULL);\n\n    conf->flush_max_threshold = (apr_size_t)size;\n\n    return NULL;\n}\n\nstatic const char *set_flush_max_pipelined(cmd_parms *cmd, void *d_,\n                                           const char *arg)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    apr_off_t num;\n    char *end;\n\n    if (apr_strtoff(&num, arg, &end, 10)\n            || *end || num < -1 || num > APR_INT32_MAX)\n        return apr_pstrcat(cmd->pool,\n                           \"parameter must be a number between -1 and \"\n                           APR_STRINGIFY(APR_INT32_MAX) \": \",\n                           arg, NULL);\n\n    conf->flush_max_pipelined = (apr_int32_t)num;\n\n    return NULL;\n}\n\n/*\n * Report a missing-'>' syntax error.\n */\nstatic char *unclosed_directive(cmd_parms *cmd)\n{\n    return apr_pstrcat(cmd->pool, cmd->cmd->name,\n                       \"> directive missing closing '>'\", NULL);\n}\n\n/*\n * Report a missing args in '<Foo >' syntax error.\n */\nstatic char *missing_container_arg(cmd_parms *cmd)\n{\n    return apr_pstrcat(cmd->pool, cmd->cmd->name,\n                       \"> directive requires additional arguments\", NULL);\n}\n\nAP_CORE_DECLARE_NONSTD(const char *) ap_limit_section(cmd_parms *cmd,\n                                                      void *dummy,\n                                                      const char *arg)\n{\n    const char *endp = ap_strrchr_c(arg, '>');\n    const char *limited_methods;\n    void *tog = cmd->cmd->cmd_data;\n    apr_int64_t limited = 0;\n    apr_int64_t old_limited = cmd->limited;\n    const char *errmsg;\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    limited_methods = apr_pstrmemdup(cmd->temp_pool, arg, endp - arg);\n\n    if (!limited_methods[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    while (limited_methods[0]) {\n        char *method = ap_getword_conf(cmd->temp_pool, &limited_methods);\n        int methnum;\n\n        /* check for builtin or module registered method number */\n        methnum = ap_method_number_of(method);\n\n        if (methnum == M_TRACE && !tog) {\n            return \"TRACE cannot be controlled by <Limit>, see TraceEnable\";\n        }\n        else if (methnum == M_INVALID) {\n            /* method has not been registered yet, but resource restriction\n             * is always checked before method handling, so register it.\n             */\n            if (cmd->pool == cmd->temp_pool) {\n                /* In .htaccess, we can't globally register new methods. */\n                return apr_psprintf(cmd->pool, \"Could not register method '%s' \"\n                                   \"for %s from .htaccess configuration\",\n                                    method, cmd->cmd->name);\n            }\n            methnum = ap_method_register(cmd->pool,\n                                         apr_pstrdup(cmd->pool, method));\n        }\n\n        limited |= (AP_METHOD_BIT << methnum);\n    }\n\n    /* Killing two features with one function,\n     * if (tog == NULL) <Limit>, else <LimitExcept>\n     */\n    limited = tog ? ~limited : limited;\n\n    if (!(old_limited & limited)) {\n        return apr_pstrcat(cmd->pool, cmd->cmd->name,\n                           \"> directive excludes all methods\", NULL);\n    }\n    else if ((old_limited & limited) == old_limited) {\n        return apr_pstrcat(cmd->pool, cmd->cmd->name,\n                           \"> directive specifies methods already excluded\",\n                           NULL);\n    }\n\n    cmd->limited &= limited;\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd, cmd->context);\n\n    cmd->limited = old_limited;\n\n    return errmsg;\n}\n\n/* XXX: Bogus - need to do this differently (at least OS2/Netware suffer\n * the same problem!!!\n * We use this in <DirectoryMatch> and <FilesMatch>, to ensure that\n * people don't get bitten by wrong-cased regex matches\n */\n\n#ifdef WIN32\n#define USE_ICASE AP_REG_ICASE\n#else\n#define USE_ICASE 0\n#endif\n\nstatic const char *dirsection(cmd_parms *cmd, void *mconfig, const char *arg)\n{\n    const char *errmsg;\n    const char *endp = ap_strrchr_c(arg, '>');\n    int old_overrides = cmd->override;\n    char *old_path = cmd->path;\n    core_dir_config *conf;\n    ap_conf_vector_t *new_dir_conf = ap_create_per_dir_config(cmd->pool);\n    ap_regex_t *r = NULL;\n    const command_rec *thiscmd = cmd->cmd;\n\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrndup(cmd->temp_pool, arg, endp - arg);\n\n    if (!arg[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    cmd->path = ap_getword_conf(cmd->pool, &arg);\n    cmd->override = OR_ALL|ACCESS_CONF;\n\n    if (!strcmp(cmd->path, \"~\")) {\n        cmd->path = ap_getword_conf(cmd->pool, &arg);\n        if (!cmd->path)\n            return \"<Directory ~ > block must specify a path\";\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED|USE_ICASE);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n    else if (thiscmd->cmd_data) { /* <DirectoryMatch> */\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED|USE_ICASE);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n    else if (strcmp(cmd->path, \"/\") != 0)\n    {\n        char *newpath;\n\n        /*\n         * Ensure that the pathname is canonical, and append the trailing /\n         */\n        apr_status_t rv = apr_filepath_merge(&newpath, NULL, cmd->path,\n                                             APR_FILEPATH_TRUENAME, cmd->pool);\n        if (rv != APR_SUCCESS && rv != APR_EPATHWILD) {\n            return apr_pstrcat(cmd->pool, \"<Directory \\\"\", cmd->path,\n                               \"\\\"> path is invalid.\", NULL);\n        }\n\n        cmd->path = newpath;\n        if (cmd->path[strlen(cmd->path) - 1] != '/')\n            cmd->path = apr_pstrcat(cmd->pool, cmd->path, \"/\", NULL);\n    }\n\n    /* initialize our config and fetch it */\n    conf = ap_set_config_vectors(cmd->server, new_dir_conf, cmd->path,\n                                 &core_module, cmd->pool);\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd, new_dir_conf);\n    if (errmsg != NULL)\n        return errmsg;\n\n    conf->r = r;\n    conf->d = cmd->path;\n    conf->d_is_fnmatch = (apr_fnmatch_test(conf->d) != 0);\n\n    if (r) {\n        conf->refs = apr_array_make(cmd->pool, 8, sizeof(char *));\n        ap_regname(r, conf->refs, AP_REG_MATCH, 1);\n    }\n\n    /* Make this explicit - the \"/\" root has 0 elements, that is, we\n     * will always merge it, and it will always sort and merge first.\n     * All others are sorted and tested by the number of slashes.\n     */\n    if (strcmp(conf->d, \"/\") == 0)\n        conf->d_components = 0;\n    else\n        conf->d_components = ap_count_dirs(conf->d);\n\n    ap_add_per_dir_conf(cmd->server, new_dir_conf);\n\n    if (*arg != '\\0') {\n        return apr_pstrcat(cmd->pool, \"Multiple \", thiscmd->name,\n                           \"> arguments not (yet) supported.\", NULL);\n    }\n\n    cmd->path = old_path;\n    cmd->override = old_overrides;\n\n    return NULL;\n}\n\nstatic const char *urlsection(cmd_parms *cmd, void *mconfig, const char *arg)\n{\n    const char *errmsg;\n    const char *endp = ap_strrchr_c(arg, '>');\n    int old_overrides = cmd->override;\n    char *old_path = cmd->path;\n    core_dir_config *conf;\n    ap_regex_t *r = NULL;\n    const command_rec *thiscmd = cmd->cmd;\n    ap_conf_vector_t *new_url_conf = ap_create_per_dir_config(cmd->pool);\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrndup(cmd->temp_pool, arg, endp - arg);\n\n    if (!arg[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    cmd->path = ap_getword_conf(cmd->pool, &arg);\n    cmd->override = OR_ALL|ACCESS_CONF;\n\n    if (thiscmd->cmd_data) { /* <LocationMatch> */\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n    else if (!strcmp(cmd->path, \"~\")) {\n        cmd->path = ap_getword_conf(cmd->pool, &arg);\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n\n    /* initialize our config and fetch it */\n    conf = ap_set_config_vectors(cmd->server, new_url_conf, cmd->path,\n                                 &core_module, cmd->pool);\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd, new_url_conf);\n    if (errmsg != NULL)\n        return errmsg;\n\n    conf->d = apr_pstrdup(cmd->pool, cmd->path);     /* No mangling, please */\n    conf->d_is_fnmatch = apr_fnmatch_test(conf->d) != 0;\n    conf->r = r;\n\n    if (r) {\n        conf->refs = apr_array_make(cmd->pool, 8, sizeof(char *));\n        ap_regname(r, conf->refs, AP_REG_MATCH, 1);\n    }\n\n    ap_add_per_url_conf(cmd->server, new_url_conf);\n\n    if (*arg != '\\0') {\n        return apr_pstrcat(cmd->pool, \"Multiple \", thiscmd->name,\n                           \"> arguments not (yet) supported.\", NULL);\n    }\n\n    cmd->path = old_path;\n    cmd->override = old_overrides;\n\n    return NULL;\n}\n\nstatic const char *filesection(cmd_parms *cmd, void *mconfig, const char *arg)\n{\n    const char *errmsg;\n    const char *endp = ap_strrchr_c(arg, '>');\n    int old_overrides = cmd->override;\n    char *old_path = cmd->path;\n    core_dir_config *conf;\n    ap_regex_t *r = NULL;\n    const command_rec *thiscmd = cmd->cmd;\n    ap_conf_vector_t *new_file_conf = ap_create_per_dir_config(cmd->pool);\n    const char *err = ap_check_cmd_context(cmd,\n                                           NOT_IN_LOCATION | NOT_IN_LIMIT);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrndup(cmd->temp_pool, arg, endp - arg);\n\n    if (!arg[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    cmd->path = ap_getword_conf(cmd->pool, &arg);\n    /* Only if not an .htaccess file */\n    if (!old_path) {\n        cmd->override = OR_ALL|ACCESS_CONF;\n    }\n\n    if (thiscmd->cmd_data) { /* <FilesMatch> */\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED|USE_ICASE);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n    else if (!strcmp(cmd->path, \"~\")) {\n        cmd->path = ap_getword_conf(cmd->pool, &arg);\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED|USE_ICASE);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n    else {\n        char *newpath;\n        /* Ensure that the pathname is canonical, but we\n         * can't test the case/aliases without a fixed path */\n        if (apr_filepath_merge(&newpath, \"\", cmd->path,\n                               0, cmd->pool) != APR_SUCCESS)\n                return apr_pstrcat(cmd->pool, \"<Files \\\"\", cmd->path,\n                               \"\\\"> is invalid.\", NULL);\n        cmd->path = newpath;\n    }\n\n    /* initialize our config and fetch it */\n    conf = ap_set_config_vectors(cmd->server, new_file_conf, cmd->path,\n                                 &core_module, cmd->pool);\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd, new_file_conf);\n    if (errmsg != NULL)\n        return errmsg;\n\n    conf->d = cmd->path;\n    conf->d_is_fnmatch = apr_fnmatch_test(conf->d) != 0;\n    conf->r = r;\n\n    if (r) {\n        conf->refs = apr_array_make(cmd->pool, 8, sizeof(char *));\n        ap_regname(r, conf->refs, AP_REG_MATCH, 1);\n    }\n\n    ap_add_file_conf(cmd->pool, (core_dir_config *)mconfig, new_file_conf);\n\n    if (*arg != '\\0') {\n        return apr_pstrcat(cmd->pool, \"Multiple \", thiscmd->name,\n                           \"> arguments not (yet) supported.\", NULL);\n    }\n\n    cmd->path = old_path;\n    cmd->override = old_overrides;\n\n    return NULL;\n}\n\n#define COND_IF      ((void *)1)\n#define COND_ELSE    ((void *)2)\n#define COND_ELSEIF  ((void *)3)\n\nstatic const char *ifsection(cmd_parms *cmd, void *mconfig, const char *arg)\n{\n    const char *errmsg;\n    const char *endp = ap_strrchr_c(arg, '>');\n    int old_overrides = cmd->override;\n    char *old_path = cmd->path;\n    core_dir_config *conf;\n    const command_rec *thiscmd = cmd->cmd;\n    ap_conf_vector_t *new_if_conf = ap_create_per_dir_config(cmd->pool);\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_LIMIT);\n    const char *condition;\n    const char *expr_err;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrndup(cmd->temp_pool, arg, endp - arg);\n\n    /*\n     * Set a dummy value so that other directives notice that they are inside\n     * a config section.\n     */\n    cmd->path = \"*If\";\n    /* Only if not an .htaccess file */\n    if (!old_path) {\n        cmd->override = OR_ALL|ACCESS_CONF;\n    }\n\n    /* initialize our config and fetch it */\n    conf = ap_set_config_vectors(cmd->server, new_if_conf, cmd->path,\n                                 &core_module, cmd->pool);\n\n    if (cmd->cmd->cmd_data == COND_IF)\n        conf->condition_ifelse = AP_CONDITION_IF;\n    else if (cmd->cmd->cmd_data == COND_ELSEIF)\n        conf->condition_ifelse = AP_CONDITION_ELSEIF;\n    else if (cmd->cmd->cmd_data == COND_ELSE)\n        conf->condition_ifelse = AP_CONDITION_ELSE;\n    else\n        ap_assert(0);\n\n    if (conf->condition_ifelse == AP_CONDITION_ELSE) {\n        if (arg[0])\n            return \"<Else> does not take an argument\";\n    }\n    else {\n        if (!arg[0])\n            return missing_container_arg(cmd);\n        condition = ap_getword_conf(cmd->pool, &arg);\n        conf->condition = ap_expr_parse_cmd(cmd, condition, 0, &expr_err, NULL);\n        if (expr_err)\n            return apr_psprintf(cmd->pool, \"Cannot parse condition clause: %s\",\n                                expr_err);\n    }\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd, new_if_conf);\n    if (errmsg != NULL)\n        return errmsg;\n\n    conf->d = cmd->path;\n    conf->d_is_fnmatch = 0;\n    conf->r = NULL;\n\n    errmsg = ap_add_if_conf(cmd->pool, (core_dir_config *)mconfig, new_if_conf);\n    if (errmsg != NULL)\n        return errmsg;\n\n    if (*arg != '\\0') {\n        return apr_pstrcat(cmd->pool, \"Multiple \", thiscmd->name,\n                           \"> arguments not supported.\", NULL);\n    }\n\n    cmd->path = old_path;\n    cmd->override = old_overrides;\n\n    return NULL;\n}\n\nstatic module *find_module(server_rec *s, const char *name)\n{\n    module *found = ap_find_linked_module(name);\n\n    /* search prelinked stuff */\n    if (!found) {\n        ap_module_symbol_t *current = ap_prelinked_module_symbols;\n\n        for (; current->name; ++current) {\n            if (!strcmp(current->name, name)) {\n                found = current->modp;\n                break;\n            }\n        }\n    }\n\n    /* search dynamic stuff */\n    if (!found) {\n        APR_OPTIONAL_FN_TYPE(ap_find_loaded_module_symbol) *check_symbol =\n            APR_RETRIEVE_OPTIONAL_FN(ap_find_loaded_module_symbol);\n\n        if (check_symbol) {\n            /*\n             * There are two phases where calling ap_find_loaded_module_symbol\n             * is problematic:\n             *\n             * During reading of the config, ap_server_conf is invalid but s\n             * points to the main server config, if passed from cmd->server\n             * of an EXEC_ON_READ directive.\n             *\n             * During config parsing, s may be a virtual host that would cause\n             * a segfault in mod_so if passed to ap_find_loaded_module_symbol,\n             * because mod_so's server config for vhosts is initialized later.\n             * But ap_server_conf is already set at this time.\n             *\n             * Therefore we use s if it is not virtual and ap_server_conf if\n             * s is virtual.\n             */\n            found = check_symbol(s->is_virtual ? ap_server_conf : s, name);\n        }\n    }\n\n    return found;\n}\n\n/* Callback function type used by start_cond_section. */\ntypedef int (*test_cond_section_fn)(cmd_parms *cmd, const char *arg);\n\n/* Implementation of <IfXXXXX>-style conditional sections.  Callback\n * to test condition must be in cmd->info, matching function type\n * test_cond_section_fn. */\nstatic const char *start_cond_section(cmd_parms *cmd, void *mconfig, const char *arg)\n{\n    const char *endp = ap_strrchr_c(arg, '>');\n    int result, not = (arg[0] == '!');\n    test_cond_section_fn testfn = (test_cond_section_fn)cmd->info;\n    const char *arg1;\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrmemdup(cmd->temp_pool, arg, endp - arg);\n\n    if (not) {\n        arg++;\n    }\n\n    arg1 = ap_getword_conf(cmd->temp_pool, &arg);\n\n    if (!arg1[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    result = testfn(cmd, arg1);\n\n    if ((!not && result) || (not && !result)) {\n        ap_directive_t *parent = NULL;\n        ap_directive_t *current = NULL;\n        const char *retval;\n\n        retval = ap_build_cont_config(cmd->pool, cmd->temp_pool, cmd,\n                                      &current, &parent, (char *)cmd->cmd->name);\n        *(ap_directive_t **)mconfig = current;\n        return retval;\n    }\n    else {\n        *(ap_directive_t **)mconfig = NULL;\n        return ap_soak_end_container(cmd, (char *)cmd->cmd->name);\n    }\n}\n\n/* Callback to implement <IfModule> test for start_cond_section. */\nstatic int test_ifmod_section(cmd_parms *cmd, const char *arg)\n{\n    return find_module(cmd->server, arg) != NULL;\n}\n\nAP_DECLARE(int) ap_exists_config_define(const char *name)\n{\n    return ap_array_str_contains(ap_server_config_defines, name);\n}\n\nstatic int test_ifdefine_section(cmd_parms *cmd, const char *arg)\n{\n    return ap_exists_config_define(arg);\n}\n\nstatic int test_iffile_section(cmd_parms *cmd, const char *arg)\n{\n    const char *relative;\n    apr_finfo_t sb;\n\n    /*\n     * At least on Windows, if the path we are testing is not valid (for example\n     * a path on a USB key that is not plugged), 'ap_server_root_relative()' will\n     * return NULL. In such a case, consider that the file is not there and that\n     * the section should be skipped.\n     */\n    relative = ap_server_root_relative(cmd->temp_pool, arg);\n    return (relative &&\n           (apr_stat(&sb, relative, APR_FINFO_TYPE, cmd->temp_pool) == APR_SUCCESS));\n}\n\nstatic int test_ifdirective_section(cmd_parms *cmd, const char *arg)\n{\n    return ap_exists_directive(cmd->temp_pool, arg);\n}\n\nstatic int test_ifsection_section(cmd_parms *cmd, const char *arg)\n{\n    const char *name = apr_pstrcat(cmd->temp_pool, \"<\", arg, NULL);\n    return ap_exists_directive(cmd->temp_pool, name);\n}\n\n/* httpd.conf commands... beginning with the <VirtualHost> business */\n\nstatic const char *virtualhost_section(cmd_parms *cmd, void *dummy,\n                                       const char *arg)\n{\n    server_rec *main_server = cmd->server, *s;\n    const char *errmsg;\n    const char *endp = ap_strrchr_c(arg, '>');\n    apr_pool_t *p = cmd->pool;\n\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n    if (err != NULL) {\n        return err;\n    }\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrndup(cmd->temp_pool, arg, endp - arg);\n\n    if (!arg[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    /* FIXME: There's another feature waiting to happen here -- since you\n        can now put multiple addresses/names on a single <VirtualHost>\n        you might want to use it to group common definitions and then\n        define other \"subhosts\" with their individual differences.  But\n        personally I'd rather just do it with a macro preprocessor. -djg */\n    if (main_server->is_virtual) {\n        return \"<VirtualHost> doesn't nest!\";\n    }\n\n    errmsg = ap_init_virtual_host(p, arg, main_server, &s);\n    if (errmsg) {\n        return errmsg;\n    }\n\n    s->next = main_server->next;\n    main_server->next = s;\n\n    s->defn_name = cmd->directive->filename;\n    s->defn_line_number = cmd->directive->line_num;\n\n    cmd->server = s;\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd,\n                            s->lookup_defaults);\n\n    cmd->server = main_server;\n\n    return errmsg;\n}\n\nstatic const char *set_regex_default_options(cmd_parms *cmd,\n                                             void *dummy,\n                                             const char *arg)\n{\n    const command_rec *thiscmd = cmd->cmd;\n    int cflags, cflag;\n\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n    if (err != NULL) {\n        return err;\n    }\n\n    cflags = ap_regcomp_get_default_cflags();\n    while (*arg) {\n        const char *name = ap_getword_conf(cmd->pool, &arg);\n        int how = 0;\n\n        if (strcasecmp(name, \"none\") == 0) {\n            cflags = 0;\n            continue;\n        }\n\n        if (*name == '+') {\n            name++;\n            how = +1;\n        }\n        else if (*name == '-') {\n            name++;\n            how = -1;\n        }\n\n        cflag = ap_regcomp_default_cflag_by_name(name);\n        if (!cflag) {\n            return apr_psprintf(cmd->pool, \"%s: option '%s' unknown\",\n                                thiscmd->name, name);\n        }\n\n        if (how > 0) {\n            cflags |= cflag;\n        }\n        else if (how < 0) {\n            cflags &= ~cflag;\n        }\n        else {\n            cflags = cflag;\n        }\n    }\n    ap_regcomp_set_default_cflags(cflags);\n\n    return NULL;\n}\n\nstatic const char *set_server_alias(cmd_parms *cmd, void *dummy,\n                                    const char *arg)\n{\n    if (!cmd->server->names) {\n        return \"ServerAlias only used in <VirtualHost>\";\n    }\n\n    while (*arg) {\n        char **item, *name = ap_getword_conf(cmd->pool, &arg);\n\n        if (ap_is_matchexp(name)) {\n            item = (char **)apr_array_push(cmd->server->wild_names);\n        }\n        else {\n            item = (char **)apr_array_push(cmd->server->names);\n        }\n\n        *item = name;\n    }\n\n    return NULL;\n}\n\nstatic const char *set_accf_map(cmd_parms *cmd, void *dummy,\n                                const char *iproto, const char* iaccf)\n{\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    char* proto;\n    char* accf;\n    if (err != NULL) {\n        return err;\n    }\n\n    proto = apr_pstrdup(cmd->pool, iproto);\n    ap_str_tolower(proto);\n    accf = apr_pstrdup(cmd->pool, iaccf);\n    ap_str_tolower(accf);\n    apr_table_setn(conf->accf_map, proto, accf);\n\n    return NULL;\n}\n\nAP_DECLARE(const char*) ap_get_server_protocol(server_rec* s)\n{\n    core_server_config *conf = ap_get_core_module_config(s->module_config);\n    return conf->protocol;\n}\n\nAP_DECLARE(void) ap_set_server_protocol(server_rec* s, const char* proto)\n{\n    core_server_config *conf = ap_get_core_module_config(s->module_config);\n    conf->protocol = proto;\n}\n\nstatic const char *set_protocol(cmd_parms *cmd, void *dummy,\n                                const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    char* proto;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    proto = apr_pstrdup(cmd->pool, arg);\n    ap_str_tolower(proto);\n    conf->protocol = proto;\n\n    return NULL;\n}\n\nstatic const char *set_server_string_slot(cmd_parms *cmd, void *dummy,\n                                          const char *arg)\n{\n    /* This one's pretty generic... */\n\n    int offset = (int)(long)cmd->info;\n    char *struct_ptr = (char *)cmd->server;\n\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    *(const char **)(struct_ptr + offset) = arg;\n    return NULL;\n}\n\n/*\n * The ServerName directive takes one argument with format\n * [scheme://]fully-qualified-domain-name[:port], for instance\n * ServerName www.example.com\n * ServerName www.example.com:80\n * ServerName https://www.example.com:443\n */\n\nstatic const char *server_hostname_port(cmd_parms *cmd, void *dummy, const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    const char *portstr, *part;\n    char *scheme;\n    int port;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if (apr_fnmatch_test(arg))\n        return apr_pstrcat(cmd->temp_pool, \"Invalid ServerName \\\"\", arg,\n                \"\\\" use ServerAlias to set multiple server names.\", NULL);\n\n    part = ap_strstr_c(arg, \"://\");\n\n    if (part) {\n      scheme = apr_pstrndup(cmd->pool, arg, part - arg);\n      ap_str_tolower(scheme);\n      cmd->server->server_scheme = (const char *)scheme;\n      part += 3;\n    } else {\n      part = arg;\n    }\n\n    portstr = ap_strchr_c(part, ':');\n    if (portstr) {\n        cmd->server->server_hostname = apr_pstrndup(cmd->pool, part,\n                                                    portstr - part);\n        portstr++;\n        port = atoi(portstr);\n        if (port <= 0 || port >= 65536) { /* 65536 == 1<<16 */\n            return apr_pstrcat(cmd->temp_pool, \"The port number \\\"\", arg,\n                          \"\\\" is outside the appropriate range \"\n                          \"(i.e., 1..65535).\", NULL);\n        }\n    }\n    else {\n        cmd->server->server_hostname = apr_pstrdup(cmd->pool, part);\n        port = 0;\n    }\n\n    cmd->server->port = port;\n    return NULL;\n}\n\nstatic const char *set_signature_flag(cmd_parms *cmd, void *d_,\n                                      const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"On\") == 0) {\n        d->server_signature = srv_sig_on;\n    }\n    else if (ap_cstr_casecmp(arg, \"Off\") == 0) {\n        d->server_signature = srv_sig_off;\n    }\n    else if (ap_cstr_casecmp(arg, \"EMail\") == 0) {\n        d->server_signature = srv_sig_withmail;\n    }\n    else {\n        return \"ServerSignature: use one of: off | on | email\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_server_root(cmd_parms *cmd, void *dummy,\n                                   const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if ((apr_filepath_merge((char**)&ap_server_root, NULL, arg,\n                            APR_FILEPATH_TRUENAME, cmd->pool) != APR_SUCCESS)\n        || !ap_is_directory(cmd->temp_pool, ap_server_root)) {\n        return \"ServerRoot must be a valid directory\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_runtime_dir(cmd_parms *cmd, void *dummy, const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if ((apr_filepath_merge((char**)&ap_runtime_dir, NULL,\n                            ap_server_root_relative(cmd->temp_pool, arg),\n                            APR_FILEPATH_TRUENAME, cmd->pool) != APR_SUCCESS)\n        || !ap_is_directory(cmd->temp_pool, ap_runtime_dir)) {\n        return \"DefaultRuntimeDir must be a valid directory, absolute or relative to ServerRoot\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_timeout(cmd_parms *cmd, void *dummy, const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    cmd->server->timeout = apr_time_from_sec(atoi(arg));\n    return NULL;\n}\n\nstatic const char *set_allow2f(cmd_parms *cmd, void *d_, const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (0 == ap_cstr_casecmp(arg, \"on\")) {\n        d->allow_encoded_slashes = 1;\n        d->decode_encoded_slashes = 1; /* for compatibility with 2.0 & 2.2 */\n    } else if (0 == ap_cstr_casecmp(arg, \"off\")) {\n        d->allow_encoded_slashes = 0;\n        d->decode_encoded_slashes = 0;\n    } else if (0 == ap_cstr_casecmp(arg, \"nodecode\")) {\n        d->allow_encoded_slashes = 1;\n        d->decode_encoded_slashes = 0;\n    } else {\n        return apr_pstrcat(cmd->pool,\n                           cmd->cmd->name, \" must be On, Off, or NoDecode\",\n                           NULL);\n    }\n    return NULL;\n}\n\nstatic const char *set_hostname_lookups(cmd_parms *cmd, void *d_,\n                                        const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (!ap_cstr_casecmp(arg, \"on\")) {\n        d->hostname_lookups = HOSTNAME_LOOKUP_ON;\n    }\n    else if (!ap_cstr_casecmp(arg, \"off\")) {\n        d->hostname_lookups = HOSTNAME_LOOKUP_OFF;\n    }\n    else if (!ap_cstr_casecmp(arg, \"double\")) {\n        d->hostname_lookups = HOSTNAME_LOOKUP_DOUBLE;\n    }\n    else {\n        return \"parameter must be 'on', 'off', or 'double'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_serverpath(cmd_parms *cmd, void *dummy,\n                                  const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    cmd->server->path = arg;\n    cmd->server->pathlen = (int)strlen(arg);\n    return NULL;\n}\n\nstatic const char *set_content_md5(cmd_parms *cmd, void *d_, int arg)\n{\n    core_dir_config *d = d_;\n\n    d->content_md5 = arg ? AP_CONTENT_MD5_ON : AP_CONTENT_MD5_OFF;\n    return NULL;\n}\n\nstatic const char *set_accept_path_info(cmd_parms *cmd, void *d_, const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        d->accept_path_info = AP_REQ_ACCEPT_PATH_INFO;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        d->accept_path_info = AP_REQ_REJECT_PATH_INFO;\n    }\n    else if (ap_cstr_casecmp(arg, \"default\") == 0) {\n        d->accept_path_info = AP_REQ_DEFAULT_PATH_INFO;\n    }\n    else {\n        return \"AcceptPathInfo must be set to on, off or default\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_use_canonical_name(cmd_parms *cmd, void *d_,\n                                          const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        d->use_canonical_name = USE_CANONICAL_NAME_ON;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        d->use_canonical_name = USE_CANONICAL_NAME_OFF;\n    }\n    else if (ap_cstr_casecmp(arg, \"dns\") == 0) {\n        d->use_canonical_name = USE_CANONICAL_NAME_DNS;\n    }\n    else {\n        return \"parameter must be 'on', 'off', or 'dns'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_use_canonical_phys_port(cmd_parms *cmd, void *d_,\n                                          const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        d->use_canonical_phys_port = USE_CANONICAL_PHYS_PORT_ON;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        d->use_canonical_phys_port = USE_CANONICAL_PHYS_PORT_OFF;\n    }\n    else {\n        return \"parameter must be 'on' or 'off'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *include_config (cmd_parms *cmd, void *dummy,\n                                   const char *name)\n{\n    ap_directive_t *conftree = NULL;\n    const char *conffile, *error;\n    unsigned *recursion;\n    int optional = cmd->cmd->cmd_data ? 1 : 0;\n    void *data;\n\n    /* NOTE: ap_include_sentinel is also used by ap_process_resource_config()\n     * during DUMP_INCLUDES; don't change its type or remove it without updating\n     * the other.\n     */\n    apr_pool_userdata_get(&data, \"ap_include_sentinel\", cmd->pool);\n    if (data) {\n        recursion = data;\n    }\n    else {\n        data = recursion = apr_palloc(cmd->pool, sizeof(*recursion));\n        *recursion = 0;\n        apr_pool_userdata_setn(data, \"ap_include_sentinel\", NULL, cmd->pool);\n    }\n\n    if (++*recursion > AP_MAX_INCLUDE_DEPTH) {\n        *recursion = 0;\n        return apr_psprintf(cmd->pool, \"Exceeded maximum include depth of %u, \"\n                            \"There appears to be a recursion.\",\n                            AP_MAX_INCLUDE_DEPTH);\n    }\n\n    conffile = ap_server_root_relative(cmd->pool, name);\n    if (!conffile) {\n        *recursion = 0;\n        return apr_pstrcat(cmd->pool, \"Invalid Include path \",\n                           name, NULL);\n    }\n\n    if (ap_exists_config_define(\"DUMP_INCLUDES\")) {\n        unsigned *line_number;\n\n        /* NOTE: ap_include_lineno is used by ap_process_resource_config()\n         * during DUMP_INCLUDES; don't change its type or remove it without\n         * updating the other.\n         */\n        apr_pool_userdata_get(&data, \"ap_include_lineno\", cmd->pool);\n        if (data) {\n            line_number = data;\n        } else {\n            data = line_number = apr_palloc(cmd->pool, sizeof(*line_number));\n            apr_pool_userdata_setn(data, \"ap_include_lineno\", NULL, cmd->pool);\n        }\n\n        *line_number = cmd->config_file->line_number;\n    }\n\n    error = ap_process_fnmatch_configs(cmd->server, conffile, &conftree,\n                                       cmd->pool, cmd->temp_pool,\n                                       optional);\n    if (error) {\n        *recursion = 0;\n        return error;\n    }\n\n    *(ap_directive_t **)dummy = conftree;\n\n    /* recursion level done */\n    if (*recursion) {\n        --*recursion;\n    }\n\n    return NULL;\n}\n\nstatic const char *set_loglevel(cmd_parms *cmd, void *config_, const char *arg_)\n{\n    char *level_str;\n    int level;\n    module *module;\n    char *arg = apr_pstrdup(cmd->temp_pool, arg_);\n    struct ap_logconf *log;\n    const char *err;\n\n    if (cmd->path) {\n        core_dir_config *dconf = config_;\n        if (!dconf->log) {\n            dconf->log = ap_new_log_config(cmd->pool, NULL);\n        }\n        log = dconf->log;\n    }\n    else {\n        log = &cmd->server->log;\n    }\n\n    if (arg == NULL)\n        return \"LogLevel requires level keyword or module loglevel specifier\";\n\n    level_str = ap_strrchr(arg, ':');\n\n    if (level_str == NULL) {\n        err = ap_parse_log_level(arg, &log->level);\n        if (err != NULL)\n            return err;\n        ap_reset_module_loglevels(log, APLOG_NO_MODULE);\n        ap_log_error(APLOG_MARK, APLOG_TRACE3, 0, cmd->server,\n                     \"Setting LogLevel for all modules to %s\", arg);\n        return NULL;\n    }\n\n    *level_str++ = '\\0';\n    if (!*level_str) {\n        return apr_psprintf(cmd->temp_pool, \"Module specifier '%s' must be \"\n                            \"followed by a log level keyword\", arg);\n    }\n\n    err = ap_parse_log_level(level_str, &level);\n    if (err != NULL)\n        return apr_psprintf(cmd->temp_pool, \"%s:%s: %s\", arg, level_str, err);\n\n    if ((module = find_module(cmd->server, arg)) == NULL) {\n        char *name = apr_psprintf(cmd->temp_pool, \"%s_module\", arg);\n        ap_log_error(APLOG_MARK, APLOG_TRACE6, 0, cmd->server,\n                     \"Cannot find module '%s', trying '%s'\", arg, name);\n        module = find_module(cmd->server, name);\n    }\n\n    if (module == NULL) {\n        return apr_psprintf(cmd->temp_pool, \"Cannot find module %s\", arg);\n    }\n\n    ap_set_module_loglevel(cmd->pool, log, module->module_index, level);\n    ap_log_error(APLOG_MARK, APLOG_TRACE3, 0, cmd->server,\n                 \"Setting LogLevel for module %s to %s\", module->name,\n                 level_str);\n\n    return NULL;\n}\n\nAP_DECLARE(const char *) ap_psignature(const char *prefix, request_rec *r)\n{\n    char sport[20];\n    core_dir_config *conf;\n\n    conf = (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n    if ((conf->server_signature == srv_sig_off)\n            || (conf->server_signature == srv_sig_unset)) {\n        return \"\";\n    }\n\n    apr_snprintf(sport, sizeof sport, \"%u\", (unsigned) ap_get_server_port(r));\n\n    if (conf->server_signature == srv_sig_withmail) {\n        return apr_pstrcat(r->pool, prefix, \"<address>\",\n                           ap_get_server_banner(),\n                           \" Server at <a href=\\\"\",\n                           ap_is_url(r->server->server_admin) ? \"\" : \"mailto:\",\n                           ap_escape_html(r->pool, r->server->server_admin),\n                           \"\\\">\",\n                           ap_escape_html(r->pool, ap_get_server_name(r)),\n                           \"</a> Port \", sport,\n                           \"</address>\\n\", NULL);\n    }\n\n    return apr_pstrcat(r->pool, prefix, \"<address>\", ap_get_server_banner(),\n                       \" Server at \",\n                       ap_escape_html(r->pool, ap_get_server_name(r)),\n                       \" Port \", sport,\n                       \"</address>\\n\", NULL);\n}\n\n/*\n * Handle a request to include the server's OS platform in the Server\n * response header field (the ServerTokens directive).  Unfortunately\n * this requires a new global in order to communicate the setting back to\n * http_main so it can insert the information in the right place in the\n * string.\n */\n\nstatic char *server_banner = NULL;\nstatic int banner_locked = 0;\nstatic const char *server_description = NULL;\n\nenum server_token_type {\n    SrvTk_MAJOR,         /* eg: Apache/2 */\n    SrvTk_MINOR,         /* eg. Apache/2.0 */\n    SrvTk_MINIMAL,       /* eg: Apache/2.0.41 */\n    SrvTk_OS,            /* eg: Apache/2.0.41 (UNIX) */\n    SrvTk_FULL,          /* eg: Apache/2.0.41 (UNIX) PHP/4.2.2 FooBar/1.2b */\n    SrvTk_PRODUCT_ONLY   /* eg: Apache */\n};\nstatic enum server_token_type ap_server_tokens = SrvTk_FULL;\n\nstatic apr_status_t reset_banner(void *dummy)\n{\n    banner_locked = 0;\n    ap_server_tokens = SrvTk_FULL;\n    server_banner = NULL;\n    server_description = NULL;\n    return APR_SUCCESS;\n}\n\nAP_DECLARE(void) ap_get_server_revision(ap_version_t *version)\n{\n    version->major = AP_SERVER_MAJORVERSION_NUMBER;\n    version->minor = AP_SERVER_MINORVERSION_NUMBER;\n    version->patch = AP_SERVER_PATCHLEVEL_NUMBER;\n    version->add_string = AP_SERVER_ADD_STRING;\n}\n\nAP_DECLARE(const char *) ap_get_server_description(void)\n{\n    return server_description ? server_description :\n        AP_SERVER_BASEVERSION \" (\" PLATFORM \")\";\n}\n\nAP_DECLARE(const char *) ap_get_server_banner(void)\n{\n    return server_banner ? server_banner : AP_SERVER_BASEVERSION;\n}\n\nAP_DECLARE(void) ap_add_version_component(apr_pool_t *pconf, const char *component)\n{\n    if (! banner_locked) {\n        /*\n         * If the version string is null, register our cleanup to reset the\n         * pointer on pool destruction. We also know that, if NULL,\n         * we are adding the original SERVER_BASEVERSION string.\n         */\n        if (server_banner == NULL) {\n            apr_pool_cleanup_register(pconf, NULL, reset_banner,\n                                      apr_pool_cleanup_null);\n            server_banner = apr_pstrdup(pconf, component);\n        }\n        else {\n            /*\n             * Tack the given component identifier to the end of\n             * the existing string.\n             */\n            server_banner = apr_pstrcat(pconf, server_banner, \" \",\n                                        component, NULL);\n        }\n    }\n    server_description = apr_pstrcat(pconf, server_description, \" \",\n                                     component, NULL);\n}\n\n/*\n * This routine adds the real server base identity to the banner string,\n * and then locks out changes until the next reconfig.\n */\nstatic void set_banner(apr_pool_t *pconf)\n{\n    if (ap_server_tokens == SrvTk_PRODUCT_ONLY) {\n        ap_add_version_component(pconf, AP_SERVER_BASEPRODUCT);\n    }\n    else if (ap_server_tokens == SrvTk_MINIMAL) {\n        ap_add_version_component(pconf, AP_SERVER_BASEVERSION);\n    }\n    else if (ap_server_tokens == SrvTk_MINOR) {\n        ap_add_version_component(pconf, AP_SERVER_BASEPRODUCT \"/\" AP_SERVER_MINORREVISION);\n    }\n    else if (ap_server_tokens == SrvTk_MAJOR) {\n        ap_add_version_component(pconf, AP_SERVER_BASEPRODUCT \"/\" AP_SERVER_MAJORVERSION);\n    }\n    else {\n        ap_add_version_component(pconf, AP_SERVER_BASEVERSION \" (\" PLATFORM \")\");\n    }\n\n    /*\n     * Lock the server_banner string if we're not displaying\n     * the full set of tokens\n     */\n    if (ap_server_tokens != SrvTk_FULL) {\n        banner_locked++;\n    }\n    server_description = AP_SERVER_BASEVERSION \" (\" PLATFORM \")\";\n}\n\nstatic const char *set_serv_tokens(cmd_parms *cmd, void *dummy,\n                                   const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if (!ap_cstr_casecmp(arg, \"OS\")) {\n        ap_server_tokens = SrvTk_OS;\n    }\n    else if (!ap_cstr_casecmp(arg, \"Min\") || !ap_cstr_casecmp(arg, \"Minimal\")) {\n        ap_server_tokens = SrvTk_MINIMAL;\n    }\n    else if (!ap_cstr_casecmp(arg, \"Major\")) {\n        ap_server_tokens = SrvTk_MAJOR;\n    }\n    else if (!ap_cstr_casecmp(arg, \"Minor\") ) {\n        ap_server_tokens = SrvTk_MINOR;\n    }\n    else if (!ap_cstr_casecmp(arg, \"Prod\") || !ap_cstr_casecmp(arg, \"ProductOnly\")) {\n        ap_server_tokens = SrvTk_PRODUCT_ONLY;\n    }\n    else if (!ap_cstr_casecmp(arg, \"Full\")) {\n        ap_server_tokens = SrvTk_FULL;\n    }\n    else {\n        return \"ServerTokens takes 1 argument: 'Prod(uctOnly)', 'Major', 'Minor', 'Min(imal)', 'OS', or 'Full'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_limit_req_line(cmd_parms *cmd, void *dummy,\n                                      const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    int lim;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    lim = atoi(arg);\n    if (lim < 0) {\n        return apr_pstrcat(cmd->temp_pool, \"LimitRequestLine \\\"\", arg,\n                           \"\\\" must be a non-negative integer\", NULL);\n    }\n\n    cmd->server->limit_req_line = lim;\n    return NULL;\n}\n\nstatic const char *set_limit_req_fieldsize(cmd_parms *cmd, void *dummy,\n                                           const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    int lim;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    lim = atoi(arg);\n    if (lim < 0) {\n        return apr_pstrcat(cmd->temp_pool, \"LimitRequestFieldsize \\\"\", arg,\n                          \"\\\" must be a non-negative integer\",\n                          NULL);\n    }\n\n    cmd->server->limit_req_fieldsize = lim;\n    return NULL;\n}\n\nstatic const char *set_limit_req_fields(cmd_parms *cmd, void *dummy,\n                                        const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    int lim;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    lim = atoi(arg);\n    if (lim < 0) {\n        return apr_pstrcat(cmd->temp_pool, \"LimitRequestFields \\\"\", arg,\n                           \"\\\" must be a non-negative integer (0 = no limit)\",\n                           NULL);\n    }\n\n    cmd->server->limit_req_fields = lim;\n    return NULL;\n}\n\nstatic const char *set_limit_req_body(cmd_parms *cmd, void *conf_,\n                                      const char *arg)\n{\n    core_dir_config *conf = conf_;\n    char *errp;\n\n    if (APR_SUCCESS != apr_strtoff(&conf->limit_req_body, arg, &errp, 10)) {\n        return \"LimitRequestBody argument is not parsable.\";\n    }\n    if (*errp || conf->limit_req_body < 0) {\n        return \"LimitRequestBody requires a non-negative integer.\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_limit_xml_req_body(cmd_parms *cmd, void *conf_,\n                                          const char *arg)\n{\n    core_dir_config *conf = conf_;\n\n    conf->limit_xml_body = atol(arg);\n    if (conf->limit_xml_body < 0)\n        return \"LimitXMLRequestBody requires a non-negative integer.\";\n\n    return NULL;\n}\n\nstatic const char *set_max_ranges(cmd_parms *cmd, void *conf_, const char *arg)\n{\n    core_dir_config *conf = conf_;\n    int val = 0;\n\n    if (!ap_cstr_casecmp(arg, \"none\")) {\n        val = AP_MAXRANGES_NORANGES;\n    }\n    else if (!ap_cstr_casecmp(arg, \"default\")) {\n        val = AP_MAXRANGES_DEFAULT;\n    }\n    else if (!ap_cstr_casecmp(arg, \"unlimited\")) {\n        val = AP_MAXRANGES_UNLIMITED;\n    }\n    else {\n        val = atoi(arg);\n        if (val <= 0)\n            return \"MaxRanges requires 'none', 'default', 'unlimited' or \"\n                   \"a positive integer\";\n    }\n\n    conf->max_ranges = val;\n\n    return NULL;\n}\n\nstatic const char *set_max_overlaps(cmd_parms *cmd, void *conf_, const char *arg)\n{\n    core_dir_config *conf = conf_;\n    int val = 0;\n\n    if (!ap_cstr_casecmp(arg, \"none\")) {\n        val = AP_MAXRANGES_NORANGES;\n    }\n    else if (!ap_cstr_casecmp(arg, \"default\")) {\n        val = AP_MAXRANGES_DEFAULT;\n    }\n    else if (!ap_cstr_casecmp(arg, \"unlimited\")) {\n        val = AP_MAXRANGES_UNLIMITED;\n    }\n    else {\n        val = atoi(arg);\n        if (val <= 0)\n            return \"MaxRangeOverlaps requires 'none', 'default', 'unlimited' or \"\n            \"a positive integer\";\n    }\n\n    conf->max_overlaps = val;\n\n    return NULL;\n}\n\nstatic const char *set_max_reversals(cmd_parms *cmd, void *conf_, const char *arg)\n{\n    core_dir_config *conf = conf_;\n    int val = 0;\n\n    if (!ap_cstr_casecmp(arg, \"none\")) {\n        val = AP_MAXRANGES_NORANGES;\n    }\n    else if (!ap_cstr_casecmp(arg, \"default\")) {\n        val = AP_MAXRANGES_DEFAULT;\n    }\n    else if (!ap_cstr_casecmp(arg, \"unlimited\")) {\n        val = AP_MAXRANGES_UNLIMITED;\n    }\n    else {\n        val = atoi(arg);\n        if (val <= 0)\n            return \"MaxRangeReversals requires 'none', 'default', 'unlimited' or \"\n            \"a positive integer\";\n    }\n\n    conf->max_reversals = val;\n\n    return NULL;\n}\n\nAP_DECLARE(apr_size_t) ap_get_limit_xml_body(const request_rec *r)\n{\n    core_dir_config *conf;\n\n    conf = ap_get_core_module_config(r->per_dir_config);\n    if (conf->limit_xml_body == AP_LIMIT_UNSET)\n        return AP_DEFAULT_LIMIT_XML_BODY;\n\n    return (apr_size_t)conf->limit_xml_body;\n}\n\n#if !defined (RLIMIT_CPU) || !(defined (RLIMIT_DATA) || defined (RLIMIT_VMEM) || defined(RLIMIT_AS)) || !defined (RLIMIT_NPROC)\nstatic const char *no_set_limit(cmd_parms *cmd, void *conf_,\n                                const char *arg, const char *arg2)\n{\n    ap_log_error(APLOG_MARK, APLOG_ERR, 0, cmd->server, APLOGNO(00118)\n                \"%s not supported on this platform\", cmd->cmd->name);\n\n    return NULL;\n}\n#endif\n\n#ifdef RLIMIT_CPU\nstatic const char *set_limit_cpu(cmd_parms *cmd, void *conf_,\n                                 const char *arg, const char *arg2)\n{\n    core_dir_config *conf = conf_;\n\n    ap_unixd_set_rlimit(cmd, &conf->limit_cpu, arg, arg2, RLIMIT_CPU);\n    return NULL;\n}\n#endif\n\n#if defined (RLIMIT_DATA) || defined (RLIMIT_VMEM) || defined(RLIMIT_AS)\nstatic const char *set_limit_mem(cmd_parms *cmd, void *conf_,\n                                 const char *arg, const char * arg2)\n{\n    core_dir_config *conf = conf_;\n\n#if defined(RLIMIT_AS)\n    ap_unixd_set_rlimit(cmd, &conf->limit_mem, arg, arg2 ,RLIMIT_AS);\n#elif defined(RLIMIT_DATA)\n    ap_unixd_set_rlimit(cmd, &conf->limit_mem, arg, arg2, RLIMIT_DATA);\n#elif defined(RLIMIT_VMEM)\n    ap_unixd_set_rlimit(cmd, &conf->limit_mem, arg, arg2, RLIMIT_VMEM);\n#endif\n\n    return NULL;\n}\n#endif\n\n#ifdef RLIMIT_NPROC\nstatic const char *set_limit_nproc(cmd_parms *cmd, void *conf_,\n                                   const char *arg, const char * arg2)\n{\n    core_dir_config *conf = conf_;\n\n    ap_unixd_set_rlimit(cmd, &conf->limit_nproc, arg, arg2, RLIMIT_NPROC);\n    return NULL;\n}\n#endif\n\nstatic const char *set_recursion_limit(cmd_parms *cmd, void *dummy,\n                                       const char *arg1, const char *arg2)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    int limit = atoi(arg1);\n\n    if (limit <= 0) {\n        return \"The recursion limit must be greater than zero.\";\n    }\n    if (limit < 4) {\n        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, APLOGNO(00119)\n                     \"Limiting internal redirects to very low numbers may \"\n                     \"cause normal requests to fail.\");\n    }\n\n    conf->redirect_limit = limit;\n\n    if (arg2) {\n        limit = atoi(arg2);\n\n        if (limit <= 0) {\n            return \"The recursion limit must be greater than zero.\";\n        }\n        if (limit < 4) {\n            ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, APLOGNO(00120)\n                         \"Limiting the subrequest depth to a very low level may\"\n                         \" cause normal requests to fail.\");\n        }\n    }\n\n    conf->subreq_limit = limit;\n\n    return NULL;\n}\n\nstatic void log_backtrace(const request_rec *r)\n{\n    const request_rec *top = r;\n\n    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00121)\n                  \"r->uri = %s\", r->uri ? r->uri : \"(unexpectedly NULL)\");\n\n    while (top && (top->prev || top->main)) {\n        if (top->prev) {\n            top = top->prev;\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00122)\n                          \"redirected from r->uri = %s\",\n                          top->uri ? top->uri : \"(unexpectedly NULL)\");\n        }\n\n        if (!top->prev && top->main) {\n            top = top->main;\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00123)\n                          \"subrequested from r->uri = %s\",\n                          top->uri ? top->uri : \"(unexpectedly NULL)\");\n        }\n    }\n}\n\n/*\n * check whether redirect limit is reached\n */\nAP_DECLARE(int) ap_is_recursion_limit_exceeded(const request_rec *r)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(r->server->module_config);\n    const request_rec *top = r;\n    int redirects = 0, subreqs = 0;\n    int rlimit = conf->redirect_limit\n                 ? conf->redirect_limit\n                 : AP_DEFAULT_MAX_INTERNAL_REDIRECTS;\n    int slimit = conf->subreq_limit\n                 ? conf->subreq_limit\n                 : AP_DEFAULT_MAX_SUBREQ_DEPTH;\n\n\n    while (top->prev || top->main) {\n        if (top->prev) {\n            if (++redirects >= rlimit) {\n                /* uuh, too much. */\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00124)\n                              \"Request exceeded the limit of %d internal \"\n                              \"redirects due to probable configuration error. \"\n                              \"Use 'LimitInternalRecursion' to increase the \"\n                              \"limit if necessary. Use 'LogLevel debug' to get \"\n                              \"a backtrace.\", rlimit);\n\n                /* post backtrace */\n                log_backtrace(r);\n\n                /* return failure */\n                return 1;\n            }\n\n            top = top->prev;\n        }\n\n        if (!top->prev && top->main) {\n            if (++subreqs >= slimit) {\n                /* uuh, too much. */\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00125)\n                              \"Request exceeded the limit of %d subrequest \"\n                              \"nesting levels due to probable configuration \"\n                              \"error. Use 'LimitInternalRecursion' to increase \"\n                              \"the limit if necessary. Use 'LogLevel debug' to \"\n                              \"get a backtrace.\", slimit);\n\n                /* post backtrace */\n                log_backtrace(r);\n\n                /* return failure */\n                return 1;\n            }\n\n            top = top->main;\n        }\n    }\n\n    /* recursion state: ok */\n    return 0;\n}\n\nstatic const char *set_trace_enable(cmd_parms *cmd, void *dummy,\n                                    const char *arg1)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n\n    if (ap_cstr_casecmp(arg1, \"on\") == 0) {\n        conf->trace_enable = AP_TRACE_ENABLE;\n    }\n    else if (ap_cstr_casecmp(arg1, \"off\") == 0) {\n        conf->trace_enable = AP_TRACE_DISABLE;\n    }\n    else if (ap_cstr_casecmp(arg1, \"extended\") == 0) {\n        conf->trace_enable = AP_TRACE_EXTENDED;\n    }\n    else {\n        return \"TraceEnable must be one of 'on', 'off', or 'extended'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_protocols(cmd_parms *cmd, void *dummy,\n                                 const char *arg)\n{\n    core_server_config *conf =\n    ap_get_core_module_config(cmd->server->module_config);\n    const char **np;\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n\n    if (err) {\n        return err;\n    }\n    \n    np = (const char **)apr_array_push(conf->protocols);\n    *np = arg;\n\n    return NULL;\n}\n\nstatic const char *set_protocols_honor_order(cmd_parms *cmd, void *dummy,\n                                             const char *arg)\n{\n    core_server_config *conf =\n    ap_get_core_module_config(cmd->server->module_config);\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    \n    if (err) {\n        return err;\n    }\n    \n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        conf->protocols_honor_order = 1;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        conf->protocols_honor_order = 0;\n    }\n    else {\n        return \"ProtocolsHonorOrder must be 'on' or 'off'\";\n    }\n    \n    return NULL;\n}\n\nstatic const char *set_http_protocol_options(cmd_parms *cmd, void *dummy,\n                                             const char *arg)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n\n    if (strcasecmp(arg, \"allow0.9\") == 0)\n        conf->http09_enable |= AP_HTTP09_ENABLE;\n    else if (strcasecmp(arg, \"require1.0\") == 0)\n        conf->http09_enable |= AP_HTTP09_DISABLE;\n    else if (strcasecmp(arg, \"strict\") == 0)\n        conf->http_conformance |= AP_HTTP_CONFORMANCE_STRICT;\n    else if (strcasecmp(arg, \"unsafe\") == 0)\n        conf->http_conformance |= AP_HTTP_CONFORMANCE_UNSAFE;\n    else if (strcasecmp(arg, \"registeredmethods\") == 0)\n        conf->http_methods |= AP_HTTP_METHODS_REGISTERED;\n    else if (strcasecmp(arg, \"lenientmethods\") == 0)\n        conf->http_methods |= AP_HTTP_METHODS_LENIENT;\n    else\n        return \"HttpProtocolOptions accepts \"\n               \"'Unsafe' or 'Strict' (default), \"\n               \"'RegisteredMethods' or 'LenientMethods' (default), and \"\n               \"'Require1.0' or 'Allow0.9' (default)\";\n\n    if ((conf->http09_enable & AP_HTTP09_ENABLE)\n            && (conf->http09_enable & AP_HTTP09_DISABLE))\n        return \"HttpProtocolOptions 'Allow0.9' and 'Require1.0'\"\n               \" are mutually exclusive\";\n\n    if ((conf->http_conformance & AP_HTTP_CONFORMANCE_STRICT)\n            && (conf->http_conformance & AP_HTTP_CONFORMANCE_UNSAFE))\n        return \"HttpProtocolOptions 'Strict' and 'Unsafe'\"\n               \" are mutually exclusive\";\n\n    if ((conf->http_methods & AP_HTTP_METHODS_REGISTERED)\n            && (conf->http_methods & AP_HTTP_METHODS_LENIENT))\n        return \"HttpProtocolOptions 'RegisteredMethods' and 'LenientMethods'\"\n               \" are mutually exclusive\";\n\n    return NULL;\n}\n\nstatic const char *set_http_method(cmd_parms *cmd, void *conf, const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n    if (err != NULL)\n        return err;\n    ap_method_register(cmd->pool, arg);\n    return NULL;\n}\n\nstatic apr_hash_t *errorlog_hash;\n\nstatic int log_constant_item(const ap_errorlog_info *info, const char *arg,\n                             char *buf, int buflen)\n{\n    char *end = apr_cpystrn(buf, arg, buflen);\n    return end - buf;\n}\n\nstatic char *parse_errorlog_misc_string(apr_pool_t *p,\n                                        ap_errorlog_format_item *it,\n                                        const char **sa)\n{\n    const char *s;\n    char scratch[MAX_STRING_LEN];\n    char *d = scratch;\n    /*\n     * non-leading white space terminates this string to allow the next field\n     * separator to be inserted\n     */\n    int at_start = 1;\n\n    it->func = log_constant_item;\n    s = *sa;\n\n    while (*s && *s != '%' && (*s != ' ' || at_start) && d < scratch + MAX_STRING_LEN) {\n        if (*s != '\\\\') {\n            if (*s != ' ') {\n                at_start = 0;\n            }\n            *d++ = *s++;\n        }\n        else {\n            s++;\n            switch (*s) {\n            case 'r':\n                *d++ = '\\r';\n                s++;\n                break;\n            case 'n':\n                *d++ = '\\n';\n                s++;\n                break;\n            case 't':\n                *d++ = '\\t';\n                s++;\n                break;\n            case '\\0':\n                /* handle end of string */\n                *d++ = '\\\\';\n                break;\n            default:\n                /* copy next char verbatim */\n                *d++ = *s++;\n                break;\n            }\n        }\n    }\n    *d = '\\0';\n    it->arg = apr_pstrdup(p, scratch);\n\n    *sa = s;\n    return NULL;\n}\n\nstatic char *parse_errorlog_item(apr_pool_t *p, ap_errorlog_format_item *it,\n                                 const char **sa)\n{\n    const char *s = *sa;\n    ap_errorlog_handler *handler;\n    int i;\n\n    if (*s != '%') {\n        if (*s == ' ') {\n            it->flags |= AP_ERRORLOG_FLAG_FIELD_SEP;\n        }\n        return parse_errorlog_misc_string(p, it, sa);\n    }\n\n    ++s;\n\n    if (*s == ' ') {\n        /* percent-space (% ) is a field separator */\n        it->flags |= AP_ERRORLOG_FLAG_FIELD_SEP;\n        *sa = ++s;\n        /* recurse */\n        return parse_errorlog_item(p, it, sa);\n    }\n    else if (*s == '%') {\n        it->arg = \"%\";\n        it->func = log_constant_item;\n        *sa = ++s;\n        return NULL;\n    }\n\n    while (*s) {\n        switch (*s) {\n        case '{':\n            ++s;\n            it->arg = ap_getword(p, &s, '}');\n            break;\n        case '+':\n            ++s;\n            it->flags |= AP_ERRORLOG_FLAG_REQUIRED;\n            break;\n        case '-':\n            ++s;\n            it->flags |= AP_ERRORLOG_FLAG_NULL_AS_HYPHEN;\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            i = *s - '0';\n            while (apr_isdigit(*++s))\n                i = i * 10 + (*s) - '0';\n            it->min_loglevel = i;\n            break;\n        case 'M':\n            it->func = NULL;\n            it->flags |= AP_ERRORLOG_FLAG_MESSAGE;\n            *sa = ++s;\n            return NULL;\n        default:\n            handler = (ap_errorlog_handler *)apr_hash_get(errorlog_hash, s, 1);\n            if (!handler) {\n                char dummy[2];\n\n                dummy[0] = *s;\n                dummy[1] = '\\0';\n                return apr_pstrcat(p, \"Unrecognized error log format directive %\",\n                               dummy, NULL);\n            }\n            it->func = handler->func;\n            *sa = ++s;\n            return NULL;\n        }\n    }\n\n    return \"Ran off end of error log format parsing args to some directive\";\n}\n\nstatic apr_array_header_t *parse_errorlog_string(apr_pool_t *p,\n                                                 const char *s,\n                                                 const char **err,\n                                                 int is_main_fmt)\n{\n    apr_array_header_t *a = apr_array_make(p, 30,\n                                           sizeof(ap_errorlog_format_item));\n    char *res;\n    int seen_msg_fmt = 0;\n\n    while (s && *s) {\n        ap_errorlog_format_item *item =\n            (ap_errorlog_format_item *)apr_array_push(a);\n        memset(item, 0, sizeof(*item));\n        res = parse_errorlog_item(p, item, &s);\n        if (res) {\n            *err = res;\n            return NULL;\n        }\n        if (item->flags & AP_ERRORLOG_FLAG_MESSAGE) {\n            if (!is_main_fmt) {\n                *err = \"%M cannot be used in once-per-request or \"\n                       \"once-per-connection formats\";\n                return NULL;\n            }\n            seen_msg_fmt = 1;\n        }\n        if (is_main_fmt && item->flags & AP_ERRORLOG_FLAG_REQUIRED) {\n            *err = \"The '+' flag cannot be used in the main error log format\";\n            return NULL;\n        }\n        if (!is_main_fmt && item->min_loglevel) {\n            *err = \"The loglevel cannot be used as a condition in \"\n                   \"once-per-request or once-per-connection formats\";\n            return NULL;\n        }\n        if (item->min_loglevel > APLOG_TRACE8) {\n            *err = \"The specified loglevel modifier is out of range\";\n            return NULL;\n        }\n    }\n\n    if (is_main_fmt && !seen_msg_fmt) {\n        *err = \"main ErrorLogFormat must contain message format string '%M'\";\n        return NULL;\n    }\n\n    return a;\n}\n\nstatic const char *set_errorlog_format(cmd_parms *cmd, void *dummy,\n                                       const char *arg1, const char *arg2)\n{\n    const char *err_string = NULL;\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n\n    if (!arg2) {\n        conf->error_log_format = parse_errorlog_string(cmd->pool, arg1,\n                                                       &err_string, 1);\n    }\n    else if (!ap_cstr_casecmp(arg1, \"connection\")) {\n        if (!conf->error_log_conn) {\n            conf->error_log_conn = apr_array_make(cmd->pool, 5,\n                                                  sizeof(apr_array_header_t *));\n        }\n\n        if (*arg2) {\n            apr_array_header_t **e;\n            e = (apr_array_header_t **) apr_array_push(conf->error_log_conn);\n            *e = parse_errorlog_string(cmd->pool, arg2, &err_string, 0);\n        }\n    }\n    else if (!ap_cstr_casecmp(arg1, \"request\")) {\n        if (!conf->error_log_req) {\n            conf->error_log_req = apr_array_make(cmd->pool, 5,\n                                                 sizeof(apr_array_header_t *));\n        }\n\n        if (*arg2) {\n            apr_array_header_t **e;\n            e = (apr_array_header_t **) apr_array_push(conf->error_log_req);\n            *e = parse_errorlog_string(cmd->pool, arg2, &err_string, 0);\n        }\n    }\n    else {\n        err_string = \"ErrorLogFormat type must be one of request, connection\";\n    }\n\n    return err_string;\n}\n\nAP_DECLARE(void) ap_register_errorlog_handler(apr_pool_t *p, char *tag,\n                                              ap_errorlog_handler_fn_t *handler,\n                                              int flags)\n{\n    ap_errorlog_handler *log_struct = apr_palloc(p, sizeof(*log_struct));\n    log_struct->func = handler;\n    log_struct->flags = flags;\n\n    apr_hash_set(errorlog_hash, tag, 1, (const void *)log_struct);\n}\n\n\nstatic const char *set_merge_trailers(cmd_parms *cmd, void *dummy, int arg)\n{\n    core_server_config *conf = ap_get_module_config(cmd->server->module_config,\n                                                    &core_module);\n    conf->merge_trailers = (arg ? AP_MERGE_TRAILERS_ENABLE :\n            AP_MERGE_TRAILERS_DISABLE);\n\n    return NULL;\n}\n\n/* Note --- ErrorDocument will now work from .htaccess files.\n * The AllowOverride of Fileinfo allows webmasters to turn it off\n */\n\nstatic const command_rec core_cmds[] = {\n\n/* Old access config file commands */\n\nAP_INIT_RAW_ARGS(\"<Directory\", dirsection, NULL, RSRC_CONF,\n  \"Container for directives affecting resources located in the specified \"\n  \"directories\"),\nAP_INIT_RAW_ARGS(\"<Location\", urlsection, NULL, RSRC_CONF,\n  \"Container for directives affecting resources accessed through the \"\n  \"specified URL paths\"),\nAP_INIT_RAW_ARGS(\"<VirtualHost\", virtualhost_section, NULL, RSRC_CONF,\n  \"Container to map directives to a particular virtual host, takes one or \"\n  \"more host addresses\"),\nAP_INIT_RAW_ARGS(\"<Files\", filesection, NULL, OR_ALL,\n  \"Container for directives affecting files matching specified patterns\"),\nAP_INIT_RAW_ARGS(\"<Limit\", ap_limit_section, NULL, OR_LIMIT | OR_AUTHCFG,\n  \"Container for authentication directives when accessed using specified HTTP \"\n  \"methods\"),\nAP_INIT_RAW_ARGS(\"<LimitExcept\", ap_limit_section, (void*)1,\n                 OR_LIMIT | OR_AUTHCFG,\n  \"Container for authentication directives to be applied when any HTTP \"\n  \"method other than those specified is used to access the resource\"),\nAP_INIT_RAW_ARGS(\"<IfModule\", start_cond_section, (void *)test_ifmod_section,\n              EXEC_ON_READ | OR_ALL,\n  \"Container for directives based on existence of specified modules\"),\nAP_INIT_RAW_ARGS(\"<IfDefine\", start_cond_section, (void *)test_ifdefine_section,\n              EXEC_ON_READ | OR_ALL,\n  \"Container for directives based on existence of command line defines\"),\nAP_INIT_RAW_ARGS(\"<IfFile\", start_cond_section, (void *)test_iffile_section,\n              EXEC_ON_READ | OR_ALL,\n  \"Container for directives based on existence of files on disk\"),\nAP_INIT_RAW_ARGS(\"<IfDirective\", start_cond_section, (void *)test_ifdirective_section,\n              EXEC_ON_READ | OR_ALL,\n  \"Container for directives based on existence of named directive\"),\nAP_INIT_RAW_ARGS(\"<IfSection\", start_cond_section, (void *)test_ifsection_section,\n              EXEC_ON_READ | OR_ALL,\n  \"Container for directives based on existence of named section\"),\nAP_INIT_RAW_ARGS(\"<DirectoryMatch\", dirsection, (void*)1, RSRC_CONF,\n  \"Container for directives affecting resources located in the \"\n  \"specified directories\"),\nAP_INIT_RAW_ARGS(\"<LocationMatch\", urlsection, (void*)1, RSRC_CONF,\n  \"Container for directives affecting resources accessed through the \"\n  \"specified URL paths\"),\nAP_INIT_RAW_ARGS(\"<FilesMatch\", filesection, (void*)1, OR_ALL,\n  \"Container for directives affecting files matching specified patterns\"),\n#ifdef GPROF\nAP_INIT_TAKE1(\"GprofDir\", set_gprof_dir, NULL, RSRC_CONF,\n  \"Directory to plop gmon.out files\"),\n#endif\nAP_INIT_TAKE1(\"AddDefaultCharset\", set_add_default_charset, NULL, OR_FILEINFO,\n  \"The name of the default charset to add to any Content-Type without one or 'Off' to disable\"),\nAP_INIT_TAKE1(\"AcceptPathInfo\", set_accept_path_info, NULL, OR_FILEINFO,\n  \"Set to on or off for PATH_INFO to be accepted by handlers, or default for the per-handler preference\"),\nAP_INIT_TAKE12(\"Define\", set_define, NULL, EXEC_ON_READ|ACCESS_CONF|RSRC_CONF,\n              \"Define a variable, optionally to a value.  Same as passing -D to the command line.\"),\nAP_INIT_TAKE1(\"UnDefine\", unset_define, NULL, EXEC_ON_READ|ACCESS_CONF|RSRC_CONF,\n              \"Undefine the existence of a variable. Undo a Define.\"),\nAP_INIT_RAW_ARGS(\"Error\", generate_error, NULL, OR_ALL,\n                 \"Generate error message from within configuration\"),\nAP_INIT_RAW_ARGS(\"<If\", ifsection, COND_IF, OR_ALL,\n  \"Container for directives to be conditionally applied\"),\nAP_INIT_RAW_ARGS(\"<ElseIf\", ifsection, COND_ELSEIF, OR_ALL,\n  \"Container for directives to be conditionally applied\"),\nAP_INIT_RAW_ARGS(\"<Else\", ifsection, COND_ELSE, OR_ALL,\n  \"Container for directives to be conditionally applied\"),\n\n/* Old resource config file commands */\n\nAP_INIT_RAW_ARGS(\"AccessFileName\", set_access_name, NULL, RSRC_CONF,\n  \"Name(s) of per-directory config files (default: .htaccess)\"),\nAP_INIT_TAKE1(\"DocumentRoot\", set_document_root, NULL, RSRC_CONF,\n  \"Root directory of the document tree\"),\nAP_INIT_TAKE2(\"ErrorDocument\", set_error_document, NULL, OR_FILEINFO,\n  \"Change responses for HTTP errors\"),\nAP_INIT_RAW_ARGS(\"AllowOverride\", set_override, NULL, ACCESS_CONF,\n  \"Controls what groups of directives can be configured by per-directory \"\n  \"config files\"),\nAP_INIT_TAKE_ARGV(\"AllowOverrideList\", set_override_list, NULL, ACCESS_CONF,\n  \"Controls what individual directives can be configured by per-directory \"\n  \"config files\"),\nAP_INIT_RAW_ARGS(\"Options\", set_options, NULL, OR_OPTIONS,\n  \"Set a number of attributes for a given directory\"),\nAP_INIT_TAKE1(\"DefaultType\", set_default_type, NULL, OR_FILEINFO,\n  \"the default media type for otherwise untyped files (DEPRECATED)\"),\nAP_INIT_RAW_ARGS(\"FileETag\", set_etag_bits, NULL, OR_FILEINFO,\n  \"Specify components used to construct a file's ETag\"),\nAP_INIT_TAKE1(\"EnableMMAP\", set_enable_mmap, NULL, OR_FILEINFO,\n  \"Controls whether memory-mapping may be used to read files\"),\nAP_INIT_TAKE1(\"EnableSendfile\", set_enable_sendfile, NULL, OR_FILEINFO,\n  \"Controls whether sendfile may be used to transmit files\"),\nAP_INIT_TAKE1(\"ReadBufferSize\", set_read_buf_size, NULL, ACCESS_CONF|RSRC_CONF,\n  \"Size (in bytes) of the memory buffers used to read data\"),\nAP_INIT_TAKE1(\"FlushMaxThreshold\", set_flush_max_threshold, NULL, RSRC_CONF,\n  \"Maximum threshold above which pending data are flushed to the network\"),\nAP_INIT_TAKE1(\"FlushMaxPipelined\", set_flush_max_pipelined, NULL, RSRC_CONF,\n  \"Maximum number of pipelined responses (pending) above which they are \"\n  \"flushed to the network\"),\n\n/* Old server config file commands */\n\nAP_INIT_TAKE1(\"Protocol\", set_protocol, NULL, RSRC_CONF,\n  \"Set the Protocol for httpd to use.\"),\nAP_INIT_TAKE2(\"AcceptFilter\", set_accf_map, NULL, RSRC_CONF,\n  \"Set the Accept Filter to use for a protocol\"),\nAP_INIT_TAKE1(\"Port\", ap_set_deprecated, NULL, RSRC_CONF,\n  \"Port was replaced with Listen in Apache 2.0\"),\nAP_INIT_TAKE1(\"HostnameLookups\", set_hostname_lookups, NULL,\n  ACCESS_CONF|RSRC_CONF,\n  \"\\\"on\\\" to enable, \\\"off\\\" to disable reverse DNS lookups, or \\\"double\\\" to \"\n  \"enable double-reverse DNS lookups\"),\nAP_INIT_TAKE1(\"ServerAdmin\", set_server_string_slot,\n  (void *)APR_OFFSETOF(server_rec, server_admin), RSRC_CONF,\n  \"The email address of the server administrator\"),\nAP_INIT_TAKE1(\"ServerName\", server_hostname_port, NULL, RSRC_CONF,\n  \"The hostname and port of the server\"),\nAP_INIT_TAKE1(\"ServerSignature\", set_signature_flag, NULL, OR_ALL,\n  \"En-/disable server signature (on|off|email)\"),\nAP_INIT_TAKE1(\"ServerRoot\", set_server_root, NULL, RSRC_CONF | EXEC_ON_READ,\n  \"Common directory of server-related files (logs, confs, etc.)\"),\nAP_INIT_TAKE1(\"DefaultRuntimeDir\", set_runtime_dir, NULL, RSRC_CONF | EXEC_ON_READ,\n  \"Common directory for run-time files (shared memory, locks, etc.)\"),\nAP_INIT_TAKE1(\"ErrorLog\", set_server_string_slot,\n  (void *)APR_OFFSETOF(server_rec, error_fname), RSRC_CONF,\n  \"The filename of the error log\"),\nAP_INIT_TAKE12(\"ErrorLogFormat\", set_errorlog_format, NULL, RSRC_CONF,\n  \"Format string for the ErrorLog\"),\nAP_INIT_RAW_ARGS(\"ServerAlias\", set_server_alias, NULL, RSRC_CONF,\n  \"A name or names alternately used to access the server\"),\nAP_INIT_TAKE1(\"ServerPath\", set_serverpath, NULL, RSRC_CONF,\n  \"The pathname the server can be reached at\"),\nAP_INIT_TAKE1(\"Timeout\", set_timeout, NULL, RSRC_CONF,\n  \"Timeout duration (sec)\"),\nAP_INIT_FLAG(\"ContentDigest\", set_content_md5, NULL, OR_OPTIONS,\n  \"whether or not to send a Content-MD5 header with each request\"),\nAP_INIT_TAKE1(\"UseCanonicalName\", set_use_canonical_name, NULL,\n  RSRC_CONF|ACCESS_CONF,\n  \"How to work out the ServerName : Port when constructing URLs\"),\nAP_INIT_TAKE1(\"UseCanonicalPhysicalPort\", set_use_canonical_phys_port, NULL,\n  RSRC_CONF|ACCESS_CONF,\n  \"Whether to use the physical Port when constructing URLs\"),\n/* TODO: RlimitFoo should all be part of mod_cgi, not in the core */\n/* TODO: ListenBacklog in MPM */\nAP_INIT_TAKE1(\"Include\", include_config, NULL,\n  (RSRC_CONF | ACCESS_CONF | EXEC_ON_READ),\n  \"Name(s) of the config file(s) to be included; fails if the wildcard does \"\n  \"not match at least one file\"),\nAP_INIT_TAKE1(\"IncludeOptional\", include_config, (void*)1,\n  (RSRC_CONF | ACCESS_CONF | EXEC_ON_READ),\n  \"Name or pattern of the config file(s) to be included; ignored if the file \"\n  \"does not exist or the pattern does not match any files\"),\nAP_INIT_ITERATE(\"LogLevel\", set_loglevel, NULL, RSRC_CONF|ACCESS_CONF,\n  \"Level of verbosity in error logging\"),\nAP_INIT_TAKE1(\"NameVirtualHost\", ap_set_name_virtual_host, NULL, RSRC_CONF,\n  \"A numeric IP address:port, or the name of a host\"),\nAP_INIT_TAKE1(\"ServerTokens\", set_serv_tokens, NULL, RSRC_CONF,\n  \"Determine tokens displayed in the Server: header - Min(imal), \"\n  \"Major, Minor, Prod(uctOnly), OS, or Full\"),\nAP_INIT_TAKE1(\"LimitRequestLine\", set_limit_req_line, NULL, RSRC_CONF,\n  \"Limit on maximum size of an HTTP request line\"),\nAP_INIT_TAKE1(\"LimitRequestFieldsize\", set_limit_req_fieldsize, NULL,\n  RSRC_CONF,\n  \"Limit on maximum size of an HTTP request header field\"),\nAP_INIT_TAKE1(\"LimitRequestFields\", set_limit_req_fields, NULL, RSRC_CONF,\n  \"Limit (0 = unlimited) on max number of header fields in a request message\"),\nAP_INIT_TAKE1(\"LimitRequestBody\", set_limit_req_body,\n  (void*)APR_OFFSETOF(core_dir_config, limit_req_body), OR_ALL,\n  \"Limit (in bytes) on maximum size of request message body\"),\nAP_INIT_TAKE1(\"LimitXMLRequestBody\", set_limit_xml_req_body, NULL, OR_ALL,\n              \"Limit (in bytes) on maximum size of an XML-based request \"\n              \"body\"),\nAP_INIT_RAW_ARGS(\"Mutex\", ap_set_mutex, NULL, RSRC_CONF,\n                 \"mutex (or \\\"default\\\") and mechanism\"),\n\nAP_INIT_TAKE1(\"MaxRanges\", set_max_ranges, NULL, RSRC_CONF|ACCESS_CONF,\n              \"Maximum number of Ranges in a request before returning the entire \"\n              \"resource, or 0 for unlimited\"),\nAP_INIT_TAKE1(\"MaxRangeOverlaps\", set_max_overlaps, NULL, RSRC_CONF|ACCESS_CONF,\n              \"Maximum number of overlaps in Ranges in a request before returning the entire \"\n              \"resource, or 0 for unlimited\"),\nAP_INIT_TAKE1(\"MaxRangeReversals\", set_max_reversals, NULL, RSRC_CONF|ACCESS_CONF,\n              \"Maximum number of reversals in Ranges in a request before returning the entire \"\n              \"resource, or 0 for unlimited\"),\n/* System Resource Controls */\n#ifdef RLIMIT_CPU\nAP_INIT_TAKE12(\"RLimitCPU\", set_limit_cpu,\n  (void*)APR_OFFSETOF(core_dir_config, limit_cpu),\n  OR_ALL, \"Soft/hard limits for max CPU usage in seconds\"),\n#else\nAP_INIT_TAKE12(\"RLimitCPU\", no_set_limit, NULL,\n  OR_ALL, \"Soft/hard limits for max CPU usage in seconds\"),\n#endif\n#if defined (RLIMIT_DATA) || defined (RLIMIT_VMEM) || defined (RLIMIT_AS)\nAP_INIT_TAKE12(\"RLimitMEM\", set_limit_mem,\n  (void*)APR_OFFSETOF(core_dir_config, limit_mem),\n  OR_ALL, \"Soft/hard limits for max memory usage per process\"),\n#else\nAP_INIT_TAKE12(\"RLimitMEM\", no_set_limit, NULL,\n  OR_ALL, \"Soft/hard limits for max memory usage per process\"),\n#endif\n#ifdef RLIMIT_NPROC\nAP_INIT_TAKE12(\"RLimitNPROC\", set_limit_nproc,\n  (void*)APR_OFFSETOF(core_dir_config, limit_nproc),\n  OR_ALL, \"soft/hard limits for max number of processes per uid\"),\n#else\nAP_INIT_TAKE12(\"RLimitNPROC\", no_set_limit, NULL,\n   OR_ALL, \"soft/hard limits for max number of processes per uid\"),\n#endif\n\nAP_INIT_RAW_ARGS(\"RegexDefaultOptions\", set_regex_default_options, NULL, RSRC_CONF,\n                 \"default options for regexes (prefixed by '+' to add, '-' to del)\"),\n\n/* internal recursion stopper */\nAP_INIT_TAKE12(\"LimitInternalRecursion\", set_recursion_limit, NULL, RSRC_CONF,\n              \"maximum recursion depth of internal redirects and subrequests\"),\n\nAP_INIT_FLAG(\"CGIPassAuth\", set_cgi_pass_auth, NULL, OR_AUTHCFG,\n             \"Controls whether HTTP authorization headers, normally hidden, will \"\n             \"be passed to scripts\"),\nAP_INIT_TAKE2(\"CGIVar\", set_cgi_var, NULL, OR_FILEINFO,\n              \"Controls how some CGI variables are set\"),\nAP_INIT_FLAG(\"QualifyRedirectURL\", set_qualify_redirect_url, NULL, OR_FILEINFO,\n             \"Controls whether the REDIRECT_URL environment variable is fully \"\n             \"qualified\"),\n\nAP_INIT_TAKE1(\"ForceType\", ap_set_string_slot_lower,\n       (void *)APR_OFFSETOF(core_dir_config, mime_type), OR_FILEINFO,\n     \"a mime type that overrides other configured type\"),\nAP_INIT_TAKE1(\"SetHandler\", set_sethandler, NULL, OR_FILEINFO,\n   \"a handler name that overrides any other configured handler\"),\nAP_INIT_TAKE1(\"SetOutputFilter\", ap_set_string_slot,\n       (void *)APR_OFFSETOF(core_dir_config, output_filters), OR_FILEINFO,\n   \"filter (or ; delimited list of filters) to be run on the request content\"),\nAP_INIT_TAKE1(\"SetInputFilter\", ap_set_string_slot,\n       (void *)APR_OFFSETOF(core_dir_config, input_filters), OR_FILEINFO,\n   \"filter (or ; delimited list of filters) to be run on the request body\"),\nAP_INIT_TAKE1(\"AllowEncodedSlashes\", set_allow2f, NULL, RSRC_CONF,\n             \"Allow URLs containing '/' encoded as '%2F'\"),\n\n/* scoreboard.c directives */\nAP_INIT_TAKE1(\"ScoreBoardFile\", ap_set_scoreboard, NULL, RSRC_CONF,\n              \"A file for Apache to maintain runtime process management information\"),\nAP_INIT_FLAG(\"ExtendedStatus\", ap_set_extended_status, NULL, RSRC_CONF,\n             \"\\\"On\\\" to track extended status information, \\\"Off\\\" to disable\"),\nAP_INIT_FLAG(\"SeeRequestTail\", ap_set_reqtail, NULL, RSRC_CONF,\n             \"For extended status, \\\"On\\\" to see the last 63 chars of \"\n             \"the request line, \\\"Off\\\" (default) to see the first 63\"),\n\n/*\n * These are default configuration directives that mpms can/should\n * pay attention to.\n * XXX These are not for all platforms, and even some Unix MPMs might not want\n * some directives.\n */\nAP_INIT_TAKE1(\"PidFile\",  ap_mpm_set_pidfile, NULL, RSRC_CONF,\n              \"A file for logging the server process ID\"),\nAP_INIT_TAKE1(\"MaxRequestsPerChild\", ap_mpm_set_max_requests, NULL, RSRC_CONF,\n              \"Maximum number of connections a particular child serves before \"\n              \"dying. (DEPRECATED, use MaxConnectionsPerChild)\"),\nAP_INIT_TAKE1(\"MaxConnectionsPerChild\", ap_mpm_set_max_requests, NULL, RSRC_CONF,\n              \"Maximum number of connections a particular child serves before dying.\"),\nAP_INIT_TAKE1(\"CoreDumpDirectory\", ap_mpm_set_coredumpdir, NULL, RSRC_CONF,\n              \"The location of the directory Apache changes to before dumping core\"),\nAP_INIT_TAKE1(\"MaxMemFree\", ap_mpm_set_max_mem_free, NULL, RSRC_CONF,\n              \"Maximum number of 1k blocks a particular child's allocator may hold.\"),\nAP_INIT_TAKE1(\"ThreadStackSize\", ap_mpm_set_thread_stacksize, NULL, RSRC_CONF,\n              \"Size in bytes of stack used by threads handling client connections\"),\n#if AP_ENABLE_EXCEPTION_HOOK\nAP_INIT_TAKE1(\"EnableExceptionHook\", ap_mpm_set_exception_hook, NULL, RSRC_CONF,\n              \"Controls whether exception hook may be called after a crash\"),\n#endif\nAP_INIT_TAKE1(\"TraceEnable\", set_trace_enable, NULL, RSRC_CONF,\n              \"'on' (default), 'off' or 'extended' to trace request body content\"),\nAP_INIT_FLAG(\"MergeTrailers\", set_merge_trailers, NULL, RSRC_CONF,\n              \"merge request trailers into request headers or not\"),\nAP_INIT_ITERATE(\"Protocols\", set_protocols, NULL, RSRC_CONF,\n                \"Controls which protocols are allowed\"),\nAP_INIT_TAKE1(\"ProtocolsHonorOrder\", set_protocols_honor_order, NULL, RSRC_CONF,\n              \"'off' (default) or 'on' to respect given order of protocols, \"\n              \"by default the client specified order determines selection\"),\nAP_INIT_ITERATE(\"HttpProtocolOptions\", set_http_protocol_options, NULL, RSRC_CONF,\n                \"'Allow0.9' or 'Require1.0' (default); \"\n                \"'RegisteredMethods' or 'LenientMethods' (default); \"\n                \"'Unsafe' or 'Strict' (default). Sets HTTP acceptance rules\"),\nAP_INIT_ITERATE(\"RegisterHttpMethod\", set_http_method, NULL, RSRC_CONF,\n                \"Registers non-standard HTTP methods\"),\nAP_INIT_FLAG(\"MergeSlashes\", set_core_server_flag, \n             (void *)APR_OFFSETOF(core_server_config, merge_slashes),  \n             RSRC_CONF,\n             \"Controls whether consecutive slashes in the URI path are merged\"),\n{ NULL }\n};\n\n/*****************************************************************\n *\n * Core handlers for various phases of server operation...\n */\n\nAP_DECLARE_NONSTD(int) ap_core_translate(request_rec *r)\n{\n    apr_status_t rv;\n    char *path;\n\n    /* XXX this seems too specific, this should probably become\n     * some general-case test\n     */\n    if (r->proxyreq) {\n        return HTTP_FORBIDDEN;\n    }\n    if (!r->uri || ((r->uri[0] != '/') && strcmp(r->uri, \"*\"))) {\n        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00126)\n                     \"Invalid URI in request '%s' '%s'\", r->uri, r->the_request);\n        return HTTP_BAD_REQUEST;\n    }\n\n    if (r->server->path\n        && !strncmp(r->uri, r->server->path, r->server->pathlen)\n        && (r->server->path[r->server->pathlen - 1] == '/'\n            || r->uri[r->server->pathlen] == '/'\n            || r->uri[r->server->pathlen] == '\\0'))\n    {\n        path = r->uri + r->server->pathlen;\n    }\n    else {\n        path = r->uri;\n    }\n    /*\n     * Make sure that we do not mess up the translation by adding two\n     * /'s in a row.  This happens under windows when the document\n     * root ends with a /\n     */\n    /* skip all leading /'s (e.g. http://localhost///foo)\n     * so we are looking at only the relative path.\n     */\n    while (*path == '/') {\n        ++path;\n    }\n    if ((rv = apr_filepath_merge(&r->filename, ap_document_root(r), path,\n                                 APR_FILEPATH_TRUENAME\n                               | APR_FILEPATH_SECUREROOT, r->pool))\n                != APR_SUCCESS) {\n        ap_log_rerror(APLOG_MARK, APLOG_ERR, rv, r, APLOGNO(00127)\n                     \"Cannot map %s to file\", r->the_request);\n        return HTTP_FORBIDDEN;\n    }\n    r->canonical_filename = r->filename;\n\n    return OK;\n}\n\n/*****************************************************************\n *\n * Test the filesystem name through directory_walk and file_walk\n */\nstatic int core_map_to_storage(request_rec *r)\n{\n    int access_status;\n\n    if ((access_status = ap_directory_walk(r))) {\n        return access_status;\n    }\n\n    if ((access_status = ap_file_walk(r))) {\n        return access_status;\n    }\n\n    return OK;\n}\n\n\nstatic int do_nothing(request_rec *r) { return OK; }\n\nstatic int core_override_type(request_rec *r)\n{\n    core_dir_config *conf =\n        (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    /* Check for overrides with ForceType / SetHandler\n     */\n    if (conf->mime_type && strcmp(conf->mime_type, \"none\"))\n        ap_set_content_type(r, (char*) conf->mime_type);\n\n    if (conf->expr_handler) { \n        const char *err;\n        const char *val;\n        val = ap_expr_str_exec(r, conf->expr_handler, &err);\n        if (err) {\n            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(03154)\n                          \"Can't evaluate handler expression: %s\", err);\n            return HTTP_INTERNAL_SERVER_ERROR;\n        }\n\n        if (val != ap_strstr_c(val, \"proxy:unix\")) { \n            /* Retained for compatibility --  but not for UDS */\n            char *tmp = apr_pstrdup(r->pool, val);\n            ap_str_tolower(tmp);\n            val = tmp;\n        }\n\n        if (strcmp(val, \"none\")) { \n            r->handler = val;\n        }\n    }\n    else if (conf->handler && strcmp(conf->handler, \"none\")) { \n        r->handler = conf->handler;\n    }\n\n    /* Deal with the poor soul who is trying to force path_info to be\n     * accepted within the core_handler, where they will let the subreq\n     * address its contents.  This is toggled by the user in the very\n     * beginning of the fixup phase (here!), so modules should override the user's\n     * discretion in their own module fixup phase.  It is tristate, if\n     * the user doesn't specify, the result is AP_REQ_DEFAULT_PATH_INFO.\n     * (which the module may interpret to its own customary behavior.)\n     * It won't be touched if the value is no longer AP_ACCEPT_PATHINFO_UNSET,\n     * so any module changing the value prior to the fixup phase\n     * OVERRIDES the user's choice.\n     */\n    if ((r->used_path_info == AP_REQ_DEFAULT_PATH_INFO)\n        && (conf->accept_path_info != AP_ACCEPT_PATHINFO_UNSET)) {\n        /* No module knew better, and the user coded AcceptPathInfo */\n        r->used_path_info = conf->accept_path_info;\n    }\n\n    return OK;\n}\n\nstatic int default_handler(request_rec *r)\n{\n    conn_rec *c = r->connection;\n    apr_bucket_brigade *bb;\n    apr_bucket *e;\n    core_dir_config *d;\n    int errstatus;\n    apr_file_t *fd = NULL;\n    apr_status_t status;\n    /* XXX if/when somebody writes a content-md5 filter we either need to\n     *     remove this support or coordinate when to use the filter vs.\n     *     when to use this code\n     *     The current choice of when to compute the md5 here matches the 1.3\n     *     support fairly closely (unlike 1.3, we don't handle computing md5\n     *     when the charset is translated).\n     */\n    int bld_content_md5;\n\n    d = (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n    bld_content_md5 = (d->content_md5 == AP_CONTENT_MD5_ON)\n                      && r->output_filters->frec->ftype != AP_FTYPE_RESOURCE;\n\n    ap_allow_standard_methods(r, MERGE_ALLOW, M_GET, M_OPTIONS, M_POST, -1);\n\n    /* If filters intend to consume the request body, they must\n     * register an InputFilter to slurp the contents of the POST\n     * data from the POST input stream.  It no longer exists when\n     * the output filters are invoked by the default handler.\n     */\n    if ((errstatus = ap_discard_request_body(r)) != OK) {\n        return errstatus;\n    }\n\n    if (r->method_number == M_GET || r->method_number == M_POST) {\n        if (r->finfo.filetype == APR_NOFILE) {\n            ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00128)\n                          \"File does not exist: %s\",\n                          apr_pstrcat(r->pool, r->filename, r->path_info, NULL));\n            return HTTP_NOT_FOUND;\n        }\n\n        /* Don't try to serve a dir.  Some OSs do weird things with\n         * raw I/O on a dir.\n         */\n        if (r->finfo.filetype == APR_DIR) {\n            ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00129)\n                          \"Attempt to serve directory: %s\", r->filename);\n            return HTTP_NOT_FOUND;\n        }\n\n        if ((r->used_path_info != AP_REQ_ACCEPT_PATH_INFO) &&\n            r->path_info && *r->path_info)\n        {\n            /* default to reject */\n            ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00130)\n                          \"File does not exist: %s\",\n                          apr_pstrcat(r->pool, r->filename, r->path_info, NULL));\n            return HTTP_NOT_FOUND;\n        }\n\n        /* We understood the (non-GET) method, but it might not be legal for\n           this particular resource. Check to see if the 'deliver_script'\n           flag is set. If so, then we go ahead and deliver the file since\n           it isn't really content (only GET normally returns content).\n\n           Note: based on logic further above, the only possible non-GET\n           method at this point is POST. In the future, we should enable\n           script delivery for all methods.  */\n        if (r->method_number != M_GET) {\n            core_request_config *req_cfg;\n\n            req_cfg = ap_get_core_module_config(r->request_config);\n            if (!req_cfg->deliver_script) {\n                /* The flag hasn't been set for this request. Punt. */\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00131)\n                              \"This resource does not accept the %s method.\",\n                              r->method);\n                return HTTP_METHOD_NOT_ALLOWED;\n            }\n        }\n\n\n        if ((status = apr_file_open(&fd, r->filename, APR_READ | APR_BINARY\n#if APR_HAS_SENDFILE\n                            | AP_SENDFILE_ENABLED(d->enable_sendfile)\n#endif\n                                    , 0, r->pool)) != APR_SUCCESS) {\n            ap_log_rerror(APLOG_MARK, APLOG_ERR, status, r, APLOGNO(00132)\n                          \"file permissions deny server access: %s\", r->filename);\n            return HTTP_FORBIDDEN;\n        }\n\n        ap_update_mtime(r, r->finfo.mtime);\n        ap_set_last_modified(r);\n        ap_set_etag_fd(r, fd);\n        ap_set_accept_ranges(r);\n        ap_set_content_length(r, r->finfo.size);\n        if (bld_content_md5) {\n            apr_table_setn(r->headers_out, \"Content-MD5\",\n                           ap_md5digest(r->pool, fd));\n        }\n\n        bb = apr_brigade_create(r->pool, c->bucket_alloc);\n\n        if ((errstatus = ap_meets_conditions(r)) != OK) {\n            apr_file_close(fd);\n            r->status = errstatus;\n        }\n        else {\n            e = apr_brigade_insert_file(bb, fd, 0, r->finfo.size, r->pool);\n\n#if APR_HAS_MMAP\n            if (d->enable_mmap == ENABLE_MMAP_OFF) {\n                (void)apr_bucket_file_enable_mmap(e, 0);\n            }\n#endif\n#if APR_MAJOR_VERSION > 1 || (APU_MAJOR_VERSION == 1 && APU_MINOR_VERSION >= 6)\n            if (d->read_buf_size) {\n                apr_bucket_file_set_buf_size(e, d->read_buf_size);\n            }\n#endif\n        }\n\n        e = apr_bucket_eos_create(c->bucket_alloc);\n        APR_BRIGADE_INSERT_TAIL(bb, e);\n\n        status = ap_pass_brigade(r->output_filters, bb);\n        apr_brigade_cleanup(bb);\n\n        if (status == APR_SUCCESS\n            || r->status != HTTP_OK\n            || c->aborted) {\n            return OK;\n        }\n        else {\n            /* no way to know what type of error occurred */\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, status, r, APLOGNO(00133)\n                          \"default_handler: ap_pass_brigade returned %i\",\n                          status);\n            return AP_FILTER_ERROR;\n        }\n    }\n    else {              /* unusual method (not GET or POST) */\n        if (r->method_number == M_INVALID) {\n            /* See if this looks like an undecrypted SSL handshake attempt.\n             * It's safe to look a couple bytes into the_request if it exists, as it's\n             * always allocated at least MIN_LINE_ALLOC (80) bytes.\n             */\n            if (r->the_request\n                && r->the_request[0] == 0x16\n                && (r->the_request[1] == 0x2 || r->the_request[1] == 0x3)) {\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00134)\n                              \"Invalid method in request %s - possible attempt to establish SSL connection on non-SSL port\", r->the_request);\n            } else {\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00135)\n                              \"Invalid method in request %s\", r->the_request);\n            }\n            return HTTP_NOT_IMPLEMENTED;\n        }\n\n        if (r->method_number == M_OPTIONS) {\n            return ap_send_http_options(r);\n        }\n        return HTTP_METHOD_NOT_ALLOWED;\n    }\n}\n\n/* Optional function coming from mod_logio, used for logging of output\n * traffic\n */\nAPR_OPTIONAL_FN_TYPE(ap_logio_add_bytes_out) *ap__logio_add_bytes_out;\nAPR_OPTIONAL_FN_TYPE(authz_some_auth_required) *ap__authz_ap_some_auth_required;\n\n/* Insist that at least one module will undertake to provide system\n * security by dropping startup privileges.\n */\nstatic int sys_privileges = 0;\nAP_DECLARE(int) ap_sys_privileges_handlers(int inc)\n{\n    sys_privileges += inc;\n    return sys_privileges;\n}\n\nstatic int check_errorlog_dir(apr_pool_t *p, server_rec *s)\n{\n    if (!s->error_fname || s->error_fname[0] == '|'\n        || strcmp(s->error_fname, \"syslog\") == 0\n        || strncmp(s->error_fname, \"syslog:\", 7) == 0) {\n        return APR_SUCCESS;\n    }\n    else {\n        char *abs = ap_server_root_relative(p, s->error_fname);\n        char *dir = ap_make_dirstr_parent(p, abs);\n        apr_finfo_t finfo;\n        apr_status_t rv = apr_stat(&finfo, dir, APR_FINFO_TYPE, p);\n        if (rv == APR_SUCCESS && finfo.filetype != APR_DIR)\n            rv = APR_ENOTDIR;\n        if (rv != APR_SUCCESS) {\n            const char *desc = \"main error log\";\n            if (s->defn_name)\n                desc = apr_psprintf(p, \"error log of vhost defined at %s:%d\",\n                                    s->defn_name, s->defn_line_number);\n            ap_log_error(APLOG_MARK, APLOG_STARTUP|APLOG_EMERG, rv,\n                          ap_server_conf, APLOGNO(02291)\n                         \"Cannot access directory '%s' for %s\", dir, desc);\n            return !OK;\n        }\n    }\n    return OK;\n}\n\nstatic int core_check_config(apr_pool_t *pconf, apr_pool_t *plog, apr_pool_t *ptemp, server_rec *s)\n{\n    int rv = OK;\n    while (s) {\n        if (check_errorlog_dir(ptemp, s) != OK)\n            rv = !OK;\n        s = s->next;\n    }\n    return rv;\n}\n\n\nstatic int core_pre_config(apr_pool_t *pconf, apr_pool_t *plog, apr_pool_t *ptemp)\n{\n    ap_mutex_init(pconf);\n\n    if (!saved_server_config_defines)\n        init_config_defines(pconf);\n    apr_pool_cleanup_register(pconf, NULL, reset_config_defines,\n                              apr_pool_cleanup_null);\n\n    ap_regcomp_set_default_cflags(AP_REG_DEFAULT);\n\n    mpm_common_pre_config(pconf);\n\n    return OK;\n}\n\nstatic int core_post_config(apr_pool_t *pconf, apr_pool_t *plog, apr_pool_t *ptemp, server_rec *s)\n{\n    ap__logio_add_bytes_out = APR_RETRIEVE_OPTIONAL_FN(ap_logio_add_bytes_out);\n    ident_lookup = APR_RETRIEVE_OPTIONAL_FN(ap_ident_lookup);\n    ap__authz_ap_some_auth_required = APR_RETRIEVE_OPTIONAL_FN(authz_some_auth_required);\n    authn_ap_auth_type = APR_RETRIEVE_OPTIONAL_FN(authn_ap_auth_type);\n    authn_ap_auth_name = APR_RETRIEVE_OPTIONAL_FN(authn_ap_auth_name);\n    access_compat_ap_satisfies = APR_RETRIEVE_OPTIONAL_FN(access_compat_ap_satisfies);\n\n    set_banner(pconf);\n    ap_setup_make_content_type(pconf);\n    ap_setup_auth_internal(ptemp);\n    ap_setup_ssl_optional_fns(pconf);\n    if (!sys_privileges) {\n        ap_log_error(APLOG_MARK, APLOG_CRIT, 0, NULL, APLOGNO(00136)\n                     \"Server MUST relinquish startup privileges before \"\n                     \"accepting connections.  Please ensure mod_unixd \"\n                     \"or other system security module is loaded.\");\n        return !OK;\n    }\n    apr_pool_cleanup_register(pconf, NULL, ap_mpm_end_gen_helper,\n                              apr_pool_cleanup_null);\n    return OK;\n}\n\nstatic void core_insert_filter(request_rec *r)\n{\n    core_dir_config *conf = (core_dir_config *)\n                            ap_get_core_module_config(r->per_dir_config);\n    const char *filter, *filters = conf->output_filters;\n\n    if (filters) {\n        while (*filters && (filter = ap_getword(r->pool, &filters, ';'))) {\n            ap_add_output_filter(filter, NULL, r, r->connection);\n        }\n    }\n\n    filters = conf->input_filters;\n    if (filters) {\n        while (*filters && (filter = ap_getword(r->pool, &filters, ';'))) {\n            ap_add_input_filter(filter, NULL, r, r->connection);\n        }\n    }\n}\n\nstatic apr_size_t num_request_notes = AP_NUM_STD_NOTES;\n\nstatic apr_status_t reset_request_notes(void *dummy)\n{\n    num_request_notes = AP_NUM_STD_NOTES;\n    return APR_SUCCESS;\n}\n\nAP_DECLARE(apr_size_t) ap_register_request_note(void)\n{\n    apr_pool_cleanup_register(apr_hook_global_pool, NULL, reset_request_notes,\n                              apr_pool_cleanup_null);\n    return num_request_notes++;\n}\n\nAP_DECLARE(void **) ap_get_request_note(request_rec *r, apr_size_t note_num)\n{\n    core_request_config *req_cfg;\n\n    if (note_num >= num_request_notes) {\n        return NULL;\n    }\n\n    req_cfg = (core_request_config *)\n        ap_get_core_module_config(r->request_config);\n\n    if (!req_cfg) {\n        return NULL;\n    }\n\n    return &(req_cfg->notes[note_num]);\n}\n\nAP_DECLARE(apr_socket_t *) ap_get_conn_socket(conn_rec *c)\n{\n    return ap_get_core_module_config(c->conn_config);\n}\n\nstatic int core_create_req(request_rec *r)\n{\n    /* Alloc the config struct and the array of request notes in\n     * a single block for efficiency\n     */\n    core_request_config *req_cfg;\n\n    req_cfg = apr_pcalloc(r->pool, sizeof(core_request_config) +\n                          sizeof(void *) * num_request_notes);\n    req_cfg->notes = (void **)((char *)req_cfg + sizeof(core_request_config));\n\n    /* ### temporarily enable script delivery as the default */\n    req_cfg->deliver_script = 1;\n\n    if (r->main) {\n        core_request_config *main_req_cfg = (core_request_config *)\n            ap_get_core_module_config(r->main->request_config);\n        req_cfg->bb = main_req_cfg->bb;\n    }\n    else {\n        req_cfg->bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    }\n\n    ap_set_core_module_config(r->request_config, req_cfg);\n\n    return OK;\n}\n\nstatic int core_create_proxy_req(request_rec *r, request_rec *pr)\n{\n    return core_create_req(pr);\n}\n\nstatic conn_rec *core_create_conn(apr_pool_t *ptrans, server_rec *server,\n                                  apr_socket_t *csd, long id, void *sbh,\n                                  apr_bucket_alloc_t *alloc)\n{\n    apr_status_t rv;\n    conn_rec *c = (conn_rec *) apr_pcalloc(ptrans, sizeof(conn_rec));\n\n    c->sbh = sbh;\n    ap_update_child_status(c->sbh, SERVER_BUSY_READ, NULL);\n\n    /* Got a connection structure, so initialize what fields we can\n     * (the rest are zeroed out by pcalloc).\n     */\n    c->pool = ptrans;\n    c->conn_config = ap_create_conn_config(ptrans);\n    c->notes = apr_table_make(ptrans, 5);\n\n    if ((rv = apr_socket_addr_get(&c->local_addr, APR_LOCAL, csd))\n        != APR_SUCCESS) {\n        ap_log_error(APLOG_MARK, APLOG_INFO, rv, server, APLOGNO(00137)\n                     \"apr_socket_addr_get(APR_LOCAL)\");\n        apr_socket_close(csd);\n        return NULL;\n    }\n    if (apr_sockaddr_ip_get(&c->local_ip, c->local_addr)) {\n#if APR_HAVE_SOCKADDR_UN\n        if (c->local_addr->family == APR_UNIX) {\n            c->local_ip = apr_pstrndup(c->pool, c->local_addr->ipaddr_ptr,\n                                       c->local_addr->ipaddr_len);\n        }\n        else\n#endif\n        c->local_ip = apr_pstrdup(c->pool, \"unknown\");\n    }\n\n    if ((rv = apr_socket_addr_get(&c->client_addr, APR_REMOTE, csd))\n        != APR_SUCCESS) {\n        ap_log_error(APLOG_MARK, APLOG_INFO, rv, server, APLOGNO(00138)\n                     \"apr_socket_addr_get(APR_REMOTE)\");\n        apr_socket_close(csd);\n        return NULL;\n    }\n    if (apr_sockaddr_ip_get(&c->client_ip, c->client_addr)) {\n#if APR_HAVE_SOCKADDR_UN\n        if (c->client_addr->family == APR_UNIX) {\n            c->client_ip = apr_pstrndup(c->pool, c->client_addr->ipaddr_ptr,\n                                        c->client_addr->ipaddr_len);\n        }\n        else\n#endif\n        c->client_ip = apr_pstrdup(c->pool, \"unknown\");\n    }\n\n    c->base_server = server;\n\n    c->id = id;\n    c->bucket_alloc = alloc;\n\n    c->clogging_input_filters = 0;\n\n    return c;\n}\n\nstatic int core_pre_connection(conn_rec *c, void *csd)\n{\n    core_net_rec *net = apr_palloc(c->pool, sizeof(*net));\n    apr_status_t rv;\n\n    /* The Nagle algorithm says that we should delay sending partial\n     * packets in hopes of getting more data.  We don't want to do\n     * this; we are not telnet.  There are bad interactions between\n     * persistent connections and Nagle's algorithm that have very severe\n     * performance penalties.  (Failing to disable Nagle is not much of a\n     * problem with simple HTTP.)\n     */\n    rv = apr_socket_opt_set(csd, APR_TCP_NODELAY, 1);\n    if (rv != APR_SUCCESS && rv != APR_ENOTIMPL) {\n        /* expected cause is that the client disconnected already,\n         * hence the debug level\n         */\n        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, rv, c, APLOGNO(00139)\n                      \"apr_socket_opt_set(APR_TCP_NODELAY)\");\n    }\n\n    /* The core filter requires the timeout mode to be set, which\n     * incidentally sets the socket to be nonblocking.  If this\n     * is not initialized correctly, Linux - for example - will\n     * be initially blocking, while Solaris will be non blocking\n     * and any initial read will fail.\n     */\n    rv = apr_socket_timeout_set(csd, c->base_server->timeout);\n    if (rv != APR_SUCCESS) {\n        /* expected cause is that the client disconnected already */\n        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, rv, c, APLOGNO(00140)\n                      \"apr_socket_timeout_set\");\n    }\n\n    net->c = c;\n    net->in_ctx = NULL;\n    net->out_ctx = NULL;\n    net->client_socket = csd;\n\n    ap_set_core_module_config(net->c->conn_config, csd);\n    ap_add_input_filter_handle(ap_core_input_filter_handle, net, NULL, net->c);\n    ap_add_output_filter_handle(ap_core_output_filter_handle, net, NULL, net->c);\n    return DONE;\n}\n\nAP_DECLARE(int) ap_state_query(int query)\n{\n    switch (query) {\n    case AP_SQ_MAIN_STATE:\n        return ap_main_state;\n    case AP_SQ_RUN_MODE:\n        return ap_run_mode;\n    case AP_SQ_CONFIG_GEN:\n        return ap_config_generation;\n    default:\n        return AP_SQ_NOT_SUPPORTED;\n    }\n}\n\nstatic apr_random_t *rng = NULL;\n#if APR_HAS_THREADS\nstatic apr_thread_mutex_t *rng_mutex = NULL;\n#endif\n\nstatic void core_child_init(apr_pool_t *pchild, server_rec *s)\n{\n    apr_proc_t proc;\n#if APR_HAS_THREADS\n    int threaded_mpm;\n    if (ap_mpm_query(AP_MPMQ_IS_THREADED, &threaded_mpm) == APR_SUCCESS\n        && threaded_mpm)\n    {\n        apr_thread_mutex_create(&rng_mutex, APR_THREAD_MUTEX_DEFAULT, pchild);\n    }\n#endif\n    /* The MPMs use plain fork() and not apr_proc_fork(), so we have to call\n     * apr_random_after_fork() manually in the child\n     */\n    proc.pid = getpid();\n    apr_random_after_fork(&proc);\n}\n\nstatic void core_optional_fn_retrieve(void)\n{\n    ap_init_scoreboard(NULL);\n}\n\nAP_CORE_DECLARE(void) ap_random_parent_after_fork(void)\n{\n    /*\n     * To ensure that the RNG state in the parent changes after the fork, we\n     * pull some data from the RNG and discard it. This ensures that the RNG\n     * states in the children are different even after the pid wraps around.\n     * As we only use apr_random for insecure random bytes, pulling 2 bytes\n     * should be enough.\n     * XXX: APR should probably have some dedicated API to do this, but it\n     * XXX: currently doesn't.\n     */\n    apr_uint16_t data;\n    apr_random_insecure_bytes(rng, &data, sizeof(data));\n}\n\nAP_CORE_DECLARE(void) ap_init_rng(apr_pool_t *p)\n{\n    unsigned char seed[8];\n    apr_status_t rv;\n    rng = apr_random_standard_new(p);\n    do {\n        rv = apr_generate_random_bytes(seed, sizeof(seed));\n        if (rv != APR_SUCCESS)\n            goto error;\n        apr_random_add_entropy(rng, seed, sizeof(seed));\n        rv = apr_random_insecure_ready(rng);\n    } while (rv == APR_ENOTENOUGHENTROPY);\n    if (rv == APR_SUCCESS)\n        return;\nerror:\n    ap_log_error(APLOG_MARK, APLOG_CRIT, rv, NULL, APLOGNO(00141)\n                 \"Could not initialize random number generator\");\n    exit(1);\n}\n\nAP_DECLARE(void) ap_random_insecure_bytes(void *buf, apr_size_t size)\n{\n#if APR_HAS_THREADS\n    if (rng_mutex)\n        apr_thread_mutex_lock(rng_mutex);\n#endif\n    /* apr_random_insecure_bytes can only fail with APR_ENOTENOUGHENTROPY,\n     * and we have ruled that out during initialization. Therefore we don't\n     * need to check the return code.\n     */\n    apr_random_insecure_bytes(rng, buf, size);\n#if APR_HAS_THREADS\n    if (rng_mutex)\n        apr_thread_mutex_unlock(rng_mutex);\n#endif\n}\n\n/*\n * Finding a random number in a range.\n *      n' = a + n(b-a+1)/(M+1)\n * where:\n *      n' = random number in range\n *      a  = low end of range\n *      b  = high end of range\n *      n  = random number of 0..M\n *      M  = maxint\n * Algorithm 'borrowed' from PHP's rand() function.\n */\n#define RAND_RANGE(__n, __min, __max, __tmax) \\\n(__n) = (__min) + (long) ((double) ((__max) - (__min) + 1.0) * ((__n) / ((__tmax) + 1.0)))\nAP_DECLARE(apr_uint32_t) ap_random_pick(apr_uint32_t min, apr_uint32_t max)\n{\n    apr_uint32_t number;\n#if (!__GNUC__ || __GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8) || \\\n     !__sparc__ || APR_SIZEOF_VOIDP != 8)\n    /* This triggers a gcc bug on sparc/64bit with gcc < 4.8, PR 52900 */\n    if (max < 16384) {\n        apr_uint16_t num16;\n        ap_random_insecure_bytes(&num16, sizeof(num16));\n        RAND_RANGE(num16, min, max, APR_UINT16_MAX);\n        number = num16;\n    }\n    else\n#endif\n    {\n        ap_random_insecure_bytes(&number, sizeof(number));\n        RAND_RANGE(number, min, max, APR_UINT32_MAX);\n    }\n    return number;\n}\n\nstatic apr_status_t core_insert_network_bucket(conn_rec *c,\n                                               apr_bucket_brigade *bb,\n                                               apr_socket_t *socket)\n{\n    apr_bucket *e = apr_bucket_socket_create(socket, c->bucket_alloc);\n    APR_BRIGADE_INSERT_TAIL(bb, e);\n    return APR_SUCCESS;\n}\n\nstatic apr_status_t core_dirwalk_stat(apr_finfo_t *finfo, request_rec *r,\n                                      apr_int32_t wanted) \n{\n    return apr_stat(finfo, r->filename, wanted, r->pool);\n}\n\nstatic void core_dump_config(apr_pool_t *p, server_rec *s)\n{\n    core_server_config *sconf = ap_get_core_module_config(s->module_config);\n    apr_file_t *out = NULL;\n    const char *tmp;\n    const char **defines;\n    int i;\n    if (!ap_exists_config_define(\"DUMP_RUN_CFG\"))\n        return;\n\n    apr_file_open_stdout(&out, p);\n    apr_file_printf(out, \"ServerRoot: \\\"%s\\\"\\n\", ap_server_root);\n    tmp = ap_server_root_relative(p, sconf->ap_document_root);\n    apr_file_printf(out, \"Main DocumentRoot: \\\"%s\\\"\\n\", tmp);\n    if (s->error_fname[0] != '|'\n        && strcmp(s->error_fname, \"syslog\") != 0\n        && strncmp(s->error_fname, \"syslog:\", 7) != 0)\n        tmp = ap_server_root_relative(p, s->error_fname);\n    else\n        tmp = s->error_fname;\n    apr_file_printf(out, \"Main ErrorLog: \\\"%s\\\"\\n\", tmp);\n    if (ap_scoreboard_fname) {\n        tmp = ap_server_root_relative(p, ap_scoreboard_fname);\n        apr_file_printf(out, \"ScoreBoardFile: \\\"%s\\\"\\n\", tmp);\n    }\n    ap_dump_mutexes(p, s, out);\n    ap_mpm_dump_pidfile(p, out);\n\n    defines = (const char **)ap_server_config_defines->elts;\n    for (i = 0; i < ap_server_config_defines->nelts; i++) {\n        const char *name = defines[i];\n        const char *val = NULL;\n        if (server_config_defined_vars)\n           val = apr_table_get(server_config_defined_vars, name);\n        if (val)\n            apr_file_printf(out, \"Define: %s=%s\\n\", name, val);\n        else\n            apr_file_printf(out, \"Define: %s\\n\", name);\n    }\n}\n\nstatic int core_upgrade_handler(request_rec *r)\n{\n    conn_rec *c = r->connection;\n    const char *upgrade;\n\n    if (c->master) {\n        /* Not possible to perform an HTTP/1.1 upgrade from a slave\n         * connection. */\n        return DECLINED;\n    }\n    \n    upgrade = apr_table_get(r->headers_in, \"Upgrade\");\n    if (upgrade && *upgrade) {\n        const char *conn = apr_table_get(r->headers_in, \"Connection\");\n        if (ap_find_token(r->pool, conn, \"upgrade\")) {\n            apr_array_header_t *offers = NULL;\n            const char *err;\n            \n            err = ap_parse_token_list_strict(r->pool, upgrade, &offers, 0);\n            if (err) {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02910)\n                              \"parsing Upgrade header: %s\", err);\n                return DECLINED;\n            }\n            \n            if (offers && offers->nelts > 0) {\n                const char *protocol = ap_select_protocol(c, r, NULL, offers);\n                if (protocol && strcmp(protocol, ap_get_protocol(c))) {\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02909)\n                                  \"Upgrade selects '%s'\", protocol);\n                    /* Let the client know what we are upgrading to. */\n                    apr_table_clear(r->headers_out);\n                    apr_table_setn(r->headers_out, \"Upgrade\", protocol);\n                    apr_table_setn(r->headers_out, \"Connection\", \"Upgrade\");\n                    \n                    r->status = HTTP_SWITCHING_PROTOCOLS;\n                    r->status_line = ap_get_status_line(r->status);\n                    ap_send_interim_response(r, 1);\n\n                    ap_switch_protocol(c, r, r->server, protocol);\n\n                    /* make sure httpd closes the connection after this */\n                    c->keepalive = AP_CONN_CLOSE;\n                    return DONE;\n                }\n            }\n        }\n    }\n    else if (!c->keepalives) {\n        /* first request on a master connection, if we have protocols other\n         * than the current one enabled here, announce them to the\n         * client. If the client is already talking a protocol with requests\n         * on slave connections, leave it be. */\n        const apr_array_header_t *upgrades;\n        ap_get_protocol_upgrades(c, r, NULL, 0, &upgrades);\n        if (upgrades && upgrades->nelts > 0) {\n            char *protocols = apr_array_pstrcat(r->pool, upgrades, ',');\n            apr_table_setn(r->headers_out, \"Upgrade\", protocols);\n            apr_table_setn(r->headers_out, \"Connection\", \"Upgrade\");\n        }\n    }\n    \n    return DECLINED;\n}\n\nstatic int core_upgrade_storage(request_rec *r)\n{\n    if ((r->method_number == M_OPTIONS) && r->uri && (r->uri[0] == '*') &&\n        (r->uri[1] == '\\0')) {\n        return core_upgrade_handler(r);\n    }\n    return DECLINED;\n}\n\nstatic void register_hooks(apr_pool_t *p)\n{\n    errorlog_hash = apr_hash_make(p);\n    ap_register_log_hooks(p);\n    ap_register_config_hooks(p);\n    ap_expr_init(p);\n\n    /* create_connection and pre_connection should always be hooked\n     * APR_HOOK_REALLY_LAST by core to give other modules the opportunity\n     * to install alternate network transports and stop other functions\n     * from being run.\n     */\n    ap_hook_create_connection(core_create_conn, NULL, NULL,\n                              APR_HOOK_REALLY_LAST);\n    ap_hook_pre_connection(core_pre_connection, NULL, NULL,\n                           APR_HOOK_REALLY_LAST);\n\n    ap_hook_pre_config(core_pre_config, NULL, NULL, APR_HOOK_REALLY_FIRST);\n    ap_hook_post_config(core_post_config,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_check_config(core_check_config,NULL,NULL,APR_HOOK_FIRST);\n    ap_hook_test_config(core_dump_config,NULL,NULL,APR_HOOK_FIRST);\n    ap_hook_translate_name(ap_core_translate,NULL,NULL,APR_HOOK_REALLY_LAST);\n    ap_hook_map_to_storage(core_upgrade_storage,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_map_to_storage(core_map_to_storage,NULL,NULL,APR_HOOK_REALLY_LAST);\n    ap_hook_open_logs(ap_open_logs,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_child_init(core_child_init,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_child_init(ap_logs_child_init,NULL,NULL,APR_HOOK_MIDDLE);\n    ap_hook_handler(core_upgrade_handler,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_handler(default_handler,NULL,NULL,APR_HOOK_REALLY_LAST);\n    /* FIXME: I suspect we can eliminate the need for these do_nothings - Ben */\n    ap_hook_type_checker(do_nothing,NULL,NULL,APR_HOOK_REALLY_LAST);\n    ap_hook_fixups(core_override_type,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_create_request(core_create_req, NULL, NULL, APR_HOOK_MIDDLE);\n    APR_OPTIONAL_HOOK(proxy, create_req, core_create_proxy_req, NULL, NULL,\n                      APR_HOOK_MIDDLE);\n    ap_hook_pre_mpm(ap_create_scoreboard, NULL, NULL, APR_HOOK_MIDDLE);\n    ap_hook_child_status(ap_core_child_status, NULL, NULL, APR_HOOK_MIDDLE);\n    ap_hook_insert_network_bucket(core_insert_network_bucket, NULL, NULL,\n                                  APR_HOOK_REALLY_LAST);\n    ap_hook_dirwalk_stat(core_dirwalk_stat, NULL, NULL, APR_HOOK_REALLY_LAST);\n    ap_hook_open_htaccess(ap_open_htaccess, NULL, NULL, APR_HOOK_REALLY_LAST);\n    ap_hook_optional_fn_retrieve(core_optional_fn_retrieve, NULL, NULL,\n                                 APR_HOOK_MIDDLE);\n    \n    /* register the core's insert_filter hook and register core-provided\n     * filters\n     */\n    ap_hook_insert_filter(core_insert_filter, NULL, NULL, APR_HOOK_MIDDLE);\n\n    ap_core_input_filter_handle =\n        ap_register_input_filter(\"CORE_IN\", ap_core_input_filter,\n                                 NULL, AP_FTYPE_NETWORK);\n    ap_content_length_filter_handle =\n        ap_register_output_filter(\"CONTENT_LENGTH\", ap_content_length_filter,\n                                  NULL, AP_FTYPE_PROTOCOL);\n    ap_core_output_filter_handle =\n        ap_register_output_filter(\"CORE\", ap_core_output_filter,\n                                  NULL, AP_FTYPE_NETWORK);\n    ap_subreq_core_filter_handle =\n        ap_register_output_filter(\"SUBREQ_CORE\", ap_sub_req_output_filter,\n                                  NULL, AP_FTYPE_CONTENT_SET);\n    ap_old_write_func =\n        ap_register_output_filter(\"OLD_WRITE\", ap_old_write_filter,\n                                  NULL, AP_FTYPE_RESOURCE - 10);\n}\n\nAP_DECLARE_MODULE(core) = {\n    MPM20_MODULE_STUFF,\n    AP_PLATFORM_REWRITE_ARGS_HOOK, /* hook to run before apache parses args */\n    create_core_dir_config,       /* create per-directory config structure */\n    merge_core_dir_configs,       /* merge per-directory config structures */\n    create_core_server_config,    /* create per-server config structure */\n    merge_core_server_configs,    /* merge per-server config structures */\n    core_cmds,                    /* command apr_table_t */\n    register_hooks                /* register hooks */\n};\n\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  core_filters.c\n * @brief Core input/output network filters.\n */\n\n#include \"apr.h\"\n#include \"apr_strings.h\"\n#include \"apr_lib.h\"\n#include \"apr_fnmatch.h\"\n#include \"apr_hash.h\"\n#include \"apr_thread_proc.h\"    /* for RLIMIT stuff */\n\n#define APR_WANT_IOVEC\n#define APR_WANT_STRFUNC\n#define APR_WANT_MEMFUNC\n#include \"apr_want.h\"\n\n#include \"ap_config.h\"\n#include \"httpd.h\"\n#include \"http_config.h\"\n#include \"http_core.h\"\n#include \"http_protocol.h\" /* For index_of_response().  Grump. */\n#include \"http_request.h\"\n#include \"http_vhost.h\"\n#include \"http_main.h\"     /* For the default_handler below... */\n#include \"http_log.h\"\n#include \"util_md5.h\"\n#include \"http_connection.h\"\n#include \"apr_buckets.h\"\n#include \"util_filter.h\"\n#include \"util_ebcdic.h\"\n#include \"mpm_common.h\"\n#include \"scoreboard.h\"\n#include \"mod_core.h\"\n#include \"ap_listen.h\"\n\n#include \"mod_so.h\" /* for ap_find_loaded_module_symbol */\n\n#define AP_MIN_SENDFILE_BYTES           (256)\n\n/**\n * Remove all zero length buckets from the brigade.\n */\n#define BRIGADE_NORMALIZE(b) \\\ndo { \\\n    apr_bucket *e = APR_BRIGADE_FIRST(b); \\\n    do {  \\\n        if (e->length == 0 && !APR_BUCKET_IS_METADATA(e)) { \\\n            apr_bucket *d; \\\n            d = APR_BUCKET_NEXT(e); \\\n            apr_bucket_delete(e); \\\n            e = d; \\\n        } \\\n        else { \\\n            e = APR_BUCKET_NEXT(e); \\\n        } \\\n    } while (!APR_BRIGADE_EMPTY(b) && (e != APR_BRIGADE_SENTINEL(b))); \\\n} while (0)\n\n/* we know core's module_index is 0 */\n#undef APLOG_MODULE_INDEX\n#define APLOG_MODULE_INDEX AP_CORE_MODULE_INDEX\n\nstruct core_output_filter_ctx {\n    apr_bucket_brigade *buffered_bb;\n    apr_pool_t *deferred_write_pool;\n    apr_size_t bytes_written;\n    struct iovec *vec;\n    apr_size_t nvec;\n};\n\nstruct core_filter_ctx {\n    apr_bucket_brigade *b;\n    apr_bucket_brigade *tmpbb;\n};\n\n\napr_status_t ap_core_input_filter(ap_filter_t *f, apr_bucket_brigade *b,\n                                  ap_input_mode_t mode, apr_read_type_e block,\n                                  apr_off_t readbytes)\n{\n    apr_status_t rv;\n    core_net_rec *net = f->ctx;\n    core_ctx_t *ctx = net->in_ctx;\n    const char *str;\n    apr_size_t len;\n\n    if (mode == AP_MODE_INIT) {\n        /*\n         * this mode is for filters that might need to 'initialize'\n         * a connection before reading request data from a client.\n         * NNTP over SSL for example needs to handshake before the\n         * server sends the welcome message.\n         * such filters would have changed the mode before this point\n         * is reached.  however, protocol modules such as NNTP should\n         * not need to know anything about SSL.  given the example, if\n         * SSL is not in the filter chain, AP_MODE_INIT is a noop.\n         */\n        return APR_SUCCESS;\n    }\n\n    if (!ctx)\n    {\n        net->in_ctx = ctx = apr_palloc(f->c->pool, sizeof(*ctx));\n        ctx->b = apr_brigade_create(f->c->pool, f->c->bucket_alloc);\n        ctx->tmpbb = apr_brigade_create(f->c->pool, f->c->bucket_alloc);\n        /* seed the brigade with the client socket. */\n        rv = ap_run_insert_network_bucket(f->c, ctx->b, net->client_socket);\n        if (rv != APR_SUCCESS)\n            return rv;\n    }\n    else if (APR_BRIGADE_EMPTY(ctx->b)) {\n        return APR_EOF;\n    }\n\n    /* ### This is bad. */\n    BRIGADE_NORMALIZE(ctx->b);\n\n    /* check for empty brigade again *AFTER* BRIGADE_NORMALIZE()\n     * If we have lost our socket bucket (see above), we are EOF.\n     *\n     * Ideally, this should be returning SUCCESS with EOS bucket, but\n     * some higher-up APIs (spec. read_request_line via ap_rgetline)\n     * want an error code. */\n    if (APR_BRIGADE_EMPTY(ctx->b)) {\n        return APR_EOF;\n    }\n\n    if (mode == AP_MODE_GETLINE) {\n        /* we are reading a single LF line, e.g. the HTTP headers */\n        rv = apr_brigade_split_line(b, ctx->b, block, HUGE_STRING_LEN);\n        /* We should treat EAGAIN here the same as we do for EOF (brigade is\n         * empty).  We do this by returning whatever we have read.  This may\n         * or may not be bogus, but is consistent (for now) with EOF logic.\n         */\n        if (APR_STATUS_IS_EAGAIN(rv) && block == APR_NONBLOCK_READ) {\n            rv = APR_SUCCESS;\n        }\n        return rv;\n    }\n\n    /* ### AP_MODE_PEEK is a horrific name for this mode because we also\n     * eat any CRLFs that we see.  That's not the obvious intention of\n     * this mode.  Determine whether anyone actually uses this or not. */\n    if (mode == AP_MODE_EATCRLF) {\n        apr_bucket *e;\n        const char *c;\n\n        /* The purpose of this loop is to ignore any CRLF (or LF) at the end\n         * of a request.  Many browsers send extra lines at the end of POST\n         * requests.  We use the PEEK method to determine if there is more\n         * data on the socket, so that we know if we should delay sending the\n         * end of one request until we have served the second request in a\n         * pipelined situation.  We don't want to actually delay sending a\n         * response if the server finds a CRLF (or LF), becuause that doesn't\n         * mean that there is another request, just a blank line.\n         */\n        while (1) {\n            if (APR_BRIGADE_EMPTY(ctx->b))\n                return APR_EOF;\n\n            e = APR_BRIGADE_FIRST(ctx->b);\n\n            rv = apr_bucket_read(e, &str, &len, APR_NONBLOCK_READ);\n\n            if (rv != APR_SUCCESS)\n                return rv;\n\n            c = str;\n            while (c < str + len) {\n                if (*c == APR_ASCII_LF)\n                    c++;\n                else if (*c == APR_ASCII_CR && *(c + 1) == APR_ASCII_LF)\n                    c += 2;\n                else\n                    return APR_SUCCESS;\n            }\n\n            /* If we reach here, we were a bucket just full of CRLFs, so\n             * just toss the bucket. */\n            /* FIXME: Is this the right thing to do in the core? */\n            apr_bucket_delete(e);\n        }\n        return APR_SUCCESS;\n    }\n\n    /* If mode is EXHAUSTIVE, we want to just read everything until the end\n     * of the brigade, which in this case means the end of the socket.\n     * To do this, we attach the brigade that has currently been setaside to\n     * the brigade that was passed down, and send that brigade back.\n     *\n     * NOTE:  This is VERY dangerous to use, and should only be done with\n     * extreme caution.  FWLIW, this would be needed by an MPM like Perchild;\n     * such an MPM can easily request the socket and all data that has been\n     * read, which means that it can pass it to the correct child process.\n     */\n    if (mode == AP_MODE_EXHAUSTIVE) {\n        apr_bucket *e;\n\n        /* Tack on any buckets that were set aside. */\n        APR_BRIGADE_CONCAT(b, ctx->b);\n\n        /* Since we've just added all potential buckets (which will most\n         * likely simply be the socket bucket) we know this is the end,\n         * so tack on an EOS too. */\n        /* We have read until the brigade was empty, so we know that we\n         * must be EOS. */\n        e = apr_bucket_eos_create(f->c->bucket_alloc);\n        APR_BRIGADE_INSERT_TAIL(b, e);\n        return APR_SUCCESS;\n    }\n\n    /* read up to the amount they specified. */\n    if (mode == AP_MODE_READBYTES || mode == AP_MODE_SPECULATIVE) {\n        apr_bucket *e;\n\n        AP_DEBUG_ASSERT(readbytes > 0);\n\n        e = APR_BRIGADE_FIRST(ctx->b);\n        rv = apr_bucket_read(e, &str, &len, block);\n\n        if (APR_STATUS_IS_EAGAIN(rv) && block == APR_NONBLOCK_READ) {\n            /* getting EAGAIN for a blocking read is an error; for a\n             * non-blocking read, return an empty brigade. */\n            return APR_SUCCESS;\n        }\n        else if (rv != APR_SUCCESS) {\n            return rv;\n        }\n        else if (block == APR_BLOCK_READ && len == 0) {\n            /* We wanted to read some bytes in blocking mode.  We read\n             * 0 bytes.  Hence, we now assume we are EOS.\n             *\n             * When we are in normal mode, return an EOS bucket to the\n             * caller.\n             * When we are in speculative mode, leave ctx->b empty, so\n             * that the next call returns an EOS bucket.\n             */\n            apr_bucket_delete(e);\n\n            if (mode == AP_MODE_READBYTES) {\n                e = apr_bucket_eos_create(f->c->bucket_alloc);\n                APR_BRIGADE_INSERT_TAIL(b, e);\n            }\n            return APR_SUCCESS;\n        }\n\n        /* Have we read as much data as we wanted (be greedy)? */\n        if (len < readbytes) {\n            apr_size_t bucket_len;\n\n            rv = APR_SUCCESS;\n            /* We already registered the data in e in len */\n            e = APR_BUCKET_NEXT(e);\n            while ((len < readbytes) && (rv == APR_SUCCESS)\n                   && (e != APR_BRIGADE_SENTINEL(ctx->b))) {\n                /* Check for the availability of buckets with known length */\n                if (e->length != (apr_size_t)-1) {\n                    len += e->length;\n                    e = APR_BUCKET_NEXT(e);\n                }\n                else {\n                    /*\n                     * Read from bucket, but non blocking. If there isn't any\n                     * more data, well than this is fine as well, we will\n                     * not wait for more since we already got some and we are\n                     * only checking if there isn't more.\n                     */\n                    rv = apr_bucket_read(e, &str, &bucket_len,\n                                         APR_NONBLOCK_READ);\n                    if (rv == APR_SUCCESS) {\n                        len += bucket_len;\n                        e = APR_BUCKET_NEXT(e);\n                    }\n                }\n            }\n        }\n\n        /* We can only return at most what we read. */\n        if (len < readbytes) {\n            readbytes = len;\n        }\n\n        rv = apr_brigade_partition(ctx->b, readbytes, &e);\n        if (rv != APR_SUCCESS) {\n            return rv;\n        }\n\n        /* Must do move before CONCAT */\n        ctx->tmpbb = apr_brigade_split_ex(ctx->b, e, ctx->tmpbb);\n\n        if (mode == AP_MODE_READBYTES) {\n            APR_BRIGADE_CONCAT(b, ctx->b);\n        }\n        else if (mode == AP_MODE_SPECULATIVE) {\n            apr_bucket *copy_bucket;\n\n            for (e = APR_BRIGADE_FIRST(ctx->b);\n                 e != APR_BRIGADE_SENTINEL(ctx->b);\n                 e = APR_BUCKET_NEXT(e))\n            {\n                rv = apr_bucket_copy(e, &copy_bucket);\n                if (rv != APR_SUCCESS) {\n                    return rv;\n                }\n                APR_BRIGADE_INSERT_TAIL(b, copy_bucket);\n            }\n        }\n\n        /* Take what was originally there and place it back on ctx->b */\n        APR_BRIGADE_CONCAT(ctx->b, ctx->tmpbb);\n    }\n    return APR_SUCCESS;\n}\n\nstatic void setaside_remaining_output(ap_filter_t *f,\n                                      core_output_filter_ctx_t *ctx,\n                                      apr_bucket_brigade *bb,\n                                      conn_rec *c);\n\nstatic apr_status_t send_brigade_nonblocking(apr_socket_t *s,\n                                             apr_bucket_brigade *bb,\n                                             core_output_filter_ctx_t *ctx,\n                                             conn_rec *c);\n\nstatic apr_status_t writev_nonblocking(apr_socket_t *s,\n                                       apr_bucket_brigade *bb,\n                                       core_output_filter_ctx_t *ctx,\n                                       apr_size_t bytes_to_write,\n                                       apr_size_t nvec,\n                                       conn_rec *c);\n\n#if APR_HAS_SENDFILE\nstatic apr_status_t sendfile_nonblocking(apr_socket_t *s,\n                                         apr_bucket *bucket,\n                                         core_output_filter_ctx_t *ctx,\n                                         conn_rec *c);\n#endif\n\n/* XXX: Should these be configurable parameters? */\n#define THRESHOLD_MIN_WRITE 4096\n\n/* Optional function coming from mod_logio, used for logging of output\n * traffic\n */\nextern APR_OPTIONAL_FN_TYPE(ap_logio_add_bytes_out) *ap__logio_add_bytes_out;\n\nstatic int should_send_brigade(apr_bucket_brigade *bb, conn_rec *c, int *flush)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(c->base_server->module_config);\n    apr_size_t total_bytes = 0, non_file_bytes = 0;\n    apr_uint32_t eor_buckets = 0;\n    apr_bucket *bucket;\n    int need_flush = 0;\n\n    /* Scan through the brigade and decide whether we need to flush it,\n     * based on the following rules:\n     *\n     *  a) The brigade contains a flush bucket: Do a blocking write\n     *     of everything up that point.\n     *\n     *  b) The request is in CONN_STATE_HANDLER state, and the brigade\n     *     contains at least flush_max_threshold bytes in non-file\n     *     buckets: Do blocking writes until the amount of data in the\n     *     buffer is less than flush_max_threshold.  (The point of this\n     *     rule is to provide flow control, in case a handler is\n     *     streaming out lots of data faster than the data can be\n     *     sent to the client.)\n     *\n     *  c) The request is in CONN_STATE_HANDLER state, and the brigade\n     *     contains at least flush_max_pipelined EOR buckets:\n     *     Do blocking writes until less than flush_max_pipelined EOR\n     *     buckets are left. (The point of this rule is to prevent too many\n     *     FDs being kept open by pipelined requests, possibly allowing a\n     *     DoS).\n     *\n     *  d) The brigade contains a morphing bucket: otherwise ap_save_brigade()\n     *     could read the whole bucket into memory.\n     */\n    for (bucket = APR_BRIGADE_FIRST(bb);\n         bucket != APR_BRIGADE_SENTINEL(bb);\n         bucket = APR_BUCKET_NEXT(bucket)) {\n\n        if (!APR_BUCKET_IS_METADATA(bucket)) {\n            if (bucket->length == (apr_size_t)-1) {\n                if (flush) {\n                    ap_log_cerror(APLOG_MARK, APLOG_TRACE6, 0, c,\n                                  \"core_output_filter: flushing because \"\n                                  \"of morphing bucket\");\n                }\n                need_flush = 1;\n                break;\n            }\n\n            total_bytes += bucket->length;\n            if (!APR_BUCKET_IS_FILE(bucket)) {\n                non_file_bytes += bucket->length;\n                if (non_file_bytes > conf->flush_max_threshold) {\n                    if (flush) {\n                        ap_log_cerror(APLOG_MARK, APLOG_TRACE6, 0, c,\n                                      \"core_output_filter: flushing because \"\n                                      \"of max threshold\");\n                    }\n                    need_flush = 1;\n                    break;\n                }\n            }\n        }\n        else if (APR_BUCKET_IS_FLUSH(bucket)) {\n            if (flush) {\n                ap_log_cerror(APLOG_MARK, APLOG_TRACE6, 0, c,\n                              \"core_output_filter: flushing because \"\n                              \"of FLUSH bucket\");\n            }\n            need_flush = 1;\n            break;\n        }\n        else if (AP_BUCKET_IS_EOR(bucket)\n                 && conf->flush_max_pipelined >= 0\n                 && ++eor_buckets > conf->flush_max_pipelined) {\n            if (flush) {\n                ap_log_cerror(APLOG_MARK, APLOG_TRACE6, 0, c,\n                              \"core_output_filter: flushing because \"\n                              \"of max pipelined\");\n            }\n            need_flush = 1;\n            break;\n        }\n    }\n    if (flush) {\n        *flush = need_flush;\n    }\n\n    /* Also send if above flush_min_threshold, or if there are FILE buckets */\n    return (need_flush\n            || total_bytes >= THRESHOLD_MIN_WRITE\n            || total_bytes > non_file_bytes);\n}\n\napr_status_t ap_core_output_filter(ap_filter_t *f, apr_bucket_brigade *new_bb)\n{\n    conn_rec *c = f->c;\n    core_net_rec *net = f->ctx;\n    core_output_filter_ctx_t *ctx = net->out_ctx;\n    apr_bucket_brigade *bb = NULL;\n    apr_status_t rv = APR_SUCCESS;\n\n    /* Fail quickly if the connection has already been aborted. */\n    if (c->aborted) {\n        if (new_bb != NULL) {\n            apr_brigade_cleanup(new_bb);\n        }\n        return APR_ECONNABORTED;\n    }\n\n    if (ctx == NULL) {\n        ctx = apr_pcalloc(c->pool, sizeof(*ctx));\n        net->out_ctx = (core_output_filter_ctx_t *)ctx;\n        /*\n         * Need to create buffered_bb brigade with correct lifetime. Passing\n         * NULL to ap_save_brigade() would result in a brigade\n         * allocated from bb->pool which might be wrong.\n         */\n        ctx->buffered_bb = apr_brigade_create(c->pool, c->bucket_alloc);\n    }\n\n    if (new_bb != NULL)\n        bb = new_bb;\n\n    if ((ctx->buffered_bb != NULL) &&\n        !APR_BRIGADE_EMPTY(ctx->buffered_bb)) {\n        if (new_bb != NULL) {\n            APR_BRIGADE_PREPEND(bb, ctx->buffered_bb);\n        }\n        else {\n            bb = ctx->buffered_bb;\n        }\n    }\n    else if (new_bb == NULL) {\n        c->data_in_output_filters = 0;\n        return APR_SUCCESS;\n    }\n\n    if (!new_bb || should_send_brigade(bb, c, NULL)) {\n        apr_socket_t *sock = net->client_socket;\n        apr_interval_time_t sock_timeout = 0;\n\n        /* Non-blocking writes on the socket in any case. */\n        apr_socket_timeout_get(sock, &sock_timeout);\n        apr_socket_timeout_set(sock, 0);\n\n        do {\n            rv = send_brigade_nonblocking(sock, bb, ctx, c);\n            if (new_bb && APR_STATUS_IS_EAGAIN(rv)) {\n                /* Scan through the brigade and decide whether we must absolutely\n                 * flush the remaining data, based on should_send_brigade() &flush\n                 * rules. If so, wait for writability and retry, otherwise we did\n                 * our best already and can wait for the next call.\n                 */\n                int flush;\n                (void)should_send_brigade(bb, c, &flush);\n                if (flush) {\n                    apr_int32_t nfd;\n                    apr_pollfd_t pfd;\n                    memset(&pfd, 0, sizeof(pfd));\n                    pfd.reqevents = APR_POLLOUT;\n                    pfd.desc_type = APR_POLL_SOCKET;\n                    pfd.desc.s = sock;\n                    pfd.p = c->pool;\n                    do {\n                        rv = apr_poll(&pfd, 1, &nfd, sock_timeout);\n                    } while (APR_STATUS_IS_EINTR(rv));\n                }\n            }\n        } while (rv == APR_SUCCESS && !APR_BRIGADE_EMPTY(bb));\n\n        /* Restore original socket timeout before leaving. */\n        apr_socket_timeout_set(sock, sock_timeout);\n    }\n\n    if (rv != APR_SUCCESS && !APR_STATUS_IS_EAGAIN(rv)) {\n        /* The client has aborted the connection */\n        ap_log_cerror(\n                APLOG_MARK, APLOG_TRACE1, rv, c,\n                \"core_output_filter: writing data to the network\");\n        /*\n         * Set c->aborted before apr_brigade_cleanup to have the correct status\n         * when logging the request as apr_brigade_cleanup triggers the logging\n         * of the request if it contains an EOR bucket.\n         */\n        c->aborted = 1;\n        apr_brigade_cleanup(bb);\n        return rv;\n    }\n\n    setaside_remaining_output(f, ctx, bb, c);\n    return APR_SUCCESS;\n}\n\n/*\n * This function assumes that either ctx->buffered_bb == NULL, or\n * ctx->buffered_bb is empty, or ctx->buffered_bb == bb\n */\nstatic void setaside_remaining_output(ap_filter_t *f,\n                                      core_output_filter_ctx_t *ctx,\n                                      apr_bucket_brigade *bb,\n                                      conn_rec *c)\n{\n    apr_bucket *bucket;\n\n    /* Don't set aside leading empty buckets, all previous data have been\n     * consumed so it's safe to delete them now.\n     */\n    while (((bucket = APR_BRIGADE_FIRST(bb)) != APR_BRIGADE_SENTINEL(bb)) &&\n           (APR_BUCKET_IS_METADATA(bucket) || (bucket->length == 0))) {\n        apr_bucket_delete(bucket);\n    }\n\n    c->data_in_output_filters = 0;\n    if (!APR_BRIGADE_EMPTY(bb)) {\n        c->data_in_output_filters = 1;\n        if (bb != ctx->buffered_bb) {\n            if (!ctx->deferred_write_pool) {\n                apr_pool_create(&ctx->deferred_write_pool, c->pool);\n                apr_pool_tag(ctx->deferred_write_pool, \"deferred_write\");\n            }\n            ap_save_brigade(f, &(ctx->buffered_bb), &bb,\n                            ctx->deferred_write_pool);\n        }\n    }\n    else if (ctx->deferred_write_pool) {\n        /*\n         * There are no more requests in the pipeline. We can just clear the\n         * pool.\n         */\n        apr_pool_clear(ctx->deferred_write_pool);\n    }\n}\n\n#ifndef APR_MAX_IOVEC_SIZE\n#define NVEC_MIN 16\n#define NVEC_MAX NVEC_MIN\n#else\n#if APR_MAX_IOVEC_SIZE > 16\n#define NVEC_MIN 16\n#else\n#define NVEC_MIN APR_MAX_IOVEC_SIZE\n#endif\n#define NVEC_MAX APR_MAX_IOVEC_SIZE\n#endif\n\nstatic APR_INLINE int is_in_memory_bucket(apr_bucket *b)\n{\n    /* These buckets' data are already in memory. */\n    return APR_BUCKET_IS_HEAP(b)\n           || APR_BUCKET_IS_POOL(b)\n           || APR_BUCKET_IS_TRANSIENT(b)\n           || APR_BUCKET_IS_IMMORTAL(b);\n}\n\n#if APR_HAS_SENDFILE\nstatic APR_INLINE int can_sendfile_bucket(apr_bucket *b)\n{\n    /* Use sendfile to send the bucket unless:\n     *   - the bucket is not a file bucket, or\n     *   - the file is too small for sendfile to be useful, or\n     *   - sendfile is disabled in the httpd config via \"EnableSendfile off\".\n     */\n    if (APR_BUCKET_IS_FILE(b) && b->length >= AP_MIN_SENDFILE_BYTES) {\n        apr_file_t *file = ((apr_bucket_file *)b->data)->fd;\n        return apr_file_flags_get(file) & APR_SENDFILE_ENABLED;\n    }\n    else {\n        return 0;\n    }\n}\n#endif\n\nstatic apr_status_t send_brigade_nonblocking(apr_socket_t *s,\n                                             apr_bucket_brigade *bb,\n                                             core_output_filter_ctx_t *ctx,\n                                             conn_rec *c)\n{\n    apr_status_t rv = APR_SUCCESS;\n    core_server_config *conf =\n        ap_get_core_module_config(c->base_server->module_config);\n    apr_size_t nvec = 0, nbytes = 0;\n    apr_bucket *bucket, *next;\n    const char *data;\n    apr_size_t length;\n\n    for (bucket = APR_BRIGADE_FIRST(bb);\n         bucket != APR_BRIGADE_SENTINEL(bb);\n         bucket = next) {\n        next = APR_BUCKET_NEXT(bucket);\n\n#if APR_HAS_SENDFILE\n        if (can_sendfile_bucket(bucket)) {\n            if (nvec > 0) {\n                (void)apr_socket_opt_set(s, APR_TCP_NOPUSH, 1);\n                rv = writev_nonblocking(s, bb, ctx, nbytes, nvec, c);\n                if (rv != APR_SUCCESS) {\n                    goto cleanup;\n                }\n                nbytes = 0;\n                nvec = 0;\n            }\n            rv = sendfile_nonblocking(s, bucket, ctx, c);\n            if (rv != APR_SUCCESS) {\n                goto cleanup;\n            }\n            continue;\n        }\n#endif /* APR_HAS_SENDFILE */\n\n        if (bucket->length) {\n            /* Non-blocking read first, in case this is a morphing\n             * bucket type. */\n            rv = apr_bucket_read(bucket, &data, &length, APR_NONBLOCK_READ);\n            if (APR_STATUS_IS_EAGAIN(rv)) {\n                /* Read would block; flush any pending data and retry. */\n                if (nvec) {\n                    rv = writev_nonblocking(s, bb, ctx, nbytes, nvec, c);\n                    if (rv != APR_SUCCESS) {\n                        goto cleanup;\n                    }\n                    nbytes = 0;\n                    nvec = 0;\n                }\n                (void)apr_socket_opt_set(s, APR_TCP_NOPUSH, 0);\n\n                rv = apr_bucket_read(bucket, &data, &length, APR_BLOCK_READ);\n            }\n            if (rv != APR_SUCCESS) {\n                goto cleanup;\n            }\n\n            /* reading may have split the bucket, so recompute next: */\n            next = APR_BUCKET_NEXT(bucket);\n        }\n\n        if (!bucket->length) {\n            /* Don't delete empty buckets until all the previous ones have been\n             * sent (nvec == 0); this must happen in sequence since metabuckets\n             * like EOR could free the data still pointed to by the iovec. So\n             * unless the latter is empty, let writev_nonblocking() cleanup the\n             * brigade in order.\n             */\n            if (!nvec) {\n                apr_bucket_delete(bucket);\n            }\n            continue;\n        }\n\n        /* Make sure that these new data fit in our iovec. */\n        if (nvec == ctx->nvec) {\n            if (nvec == NVEC_MAX) {\n                (void)apr_socket_opt_set(s, APR_TCP_NOPUSH, 1);\n                rv = writev_nonblocking(s, bb, ctx, nbytes, nvec, c);\n                if (rv != APR_SUCCESS) {\n                    goto cleanup;\n                }\n                nbytes = 0;\n                nvec = 0;\n            }\n            else {\n                struct iovec *newvec;\n                apr_size_t newn = nvec * 2;\n                if (newn < NVEC_MIN) {\n                    newn = NVEC_MIN;\n                }\n                else if (newn > NVEC_MAX) {\n                    newn = NVEC_MAX;\n                }\n                newvec = apr_palloc(c->pool, newn * sizeof(struct iovec));\n                if (nvec) {\n                    memcpy(newvec, ctx->vec, nvec * sizeof(struct iovec));\n                }\n                ctx->vec = newvec;\n                ctx->nvec = newn;\n            }\n        }\n        nbytes += length;\n        ctx->vec[nvec].iov_base = (void *)data;\n        ctx->vec[nvec].iov_len = length;\n        nvec++;\n\n        /* Flush above max threshold, unless the brigade still contains in\n         * memory buckets which we want to try writing in the same pass (if\n         * we are at the end of the brigade, the write will happen outside\n         * the loop anyway).\n         */\n        if (nbytes > conf->flush_max_threshold\n                && next != APR_BRIGADE_SENTINEL(bb)\n                && !is_in_memory_bucket(next)) {\n            (void)apr_socket_opt_set(s, APR_TCP_NOPUSH, 1);\n            rv = writev_nonblocking(s, bb, ctx, nbytes, nvec, c);\n            if (rv != APR_SUCCESS) {\n                goto cleanup;\n            }\n            nbytes = 0;\n            nvec = 0;\n        }\n    }\n    if (nvec > 0) {\n        rv = writev_nonblocking(s, bb, ctx, nbytes, nvec, c);\n    }\n\ncleanup:\n    (void)apr_socket_opt_set(s, APR_TCP_NOPUSH, 0);\n    return rv;\n}\n\nstatic apr_status_t writev_nonblocking(apr_socket_t *s,\n                                       apr_bucket_brigade *bb,\n                                       core_output_filter_ctx_t *ctx,\n                                       apr_size_t bytes_to_write,\n                                       apr_size_t nvec,\n                                       conn_rec *c)\n{\n    apr_status_t rv;\n    struct iovec *vec = ctx->vec;\n    apr_size_t bytes_written = 0;\n    apr_size_t i, offset = 0;\n\n    do {\n        apr_size_t n = 0;\n        rv = apr_socket_sendv(s, vec + offset, nvec - offset, &n);\n        bytes_written += n;\n\n        for (i = offset; i < nvec; ) {\n            apr_bucket *bucket = APR_BRIGADE_FIRST(bb);\n            if (!bucket->length) {\n                apr_bucket_delete(bucket);\n            }\n            else if (n >= vec[i].iov_len) {\n                apr_bucket_delete(bucket);\n                n -= vec[i++].iov_len;\n                offset++;\n            }\n            else {\n                if (n) {\n                    apr_bucket_split(bucket, n);\n                    apr_bucket_delete(bucket);\n                    vec[i].iov_len -= n;\n                    vec[i].iov_base = (char *) vec[i].iov_base + n;\n                }\n                break;\n            }\n        }\n    } while (rv == APR_SUCCESS && bytes_written < bytes_to_write);\n\n    if ((ap__logio_add_bytes_out != NULL) && (bytes_written > 0)) {\n        ap__logio_add_bytes_out(c, bytes_written);\n    }\n    ctx->bytes_written += bytes_written;\n\n    ap_log_cerror(APLOG_MARK, APLOG_TRACE6, rv, c,\n                  \"writev_nonblocking: %\"APR_SIZE_T_FMT\"/%\"APR_SIZE_T_FMT,\n                  bytes_written, bytes_to_write);\n    return rv;\n}\n\n#if APR_HAS_SENDFILE\n\nstatic apr_status_t sendfile_nonblocking(apr_socket_t *s,\n                                         apr_bucket *bucket,\n                                         core_output_filter_ctx_t *ctx,\n                                         conn_rec *c)\n{\n    apr_status_t rv;\n    apr_file_t *file = ((apr_bucket_file *)bucket->data)->fd;\n    apr_size_t bytes_written = bucket->length; /* bytes_to_write for now */\n    apr_off_t file_offset = bucket->start;\n\n    rv = apr_socket_sendfile(s, file, NULL, &file_offset, &bytes_written, 0);\n    if ((ap__logio_add_bytes_out != NULL) && (bytes_written > 0)) {\n        ap__logio_add_bytes_out(c, bytes_written);\n    }\n    ctx->bytes_written += bytes_written;\n\n    ap_log_cerror(APLOG_MARK, APLOG_TRACE6, rv, c,\n                  \"sendfile_nonblocking: %\" APR_SIZE_T_FMT \"/%\" APR_SIZE_T_FMT,\n                  bytes_written, bucket->length);\n    if (bytes_written >= bucket->length) {\n        apr_bucket_delete(bucket);\n    }\n    else if (bytes_written > 0) {\n        apr_bucket_split(bucket, bytes_written);\n        apr_bucket_delete(bucket);\n        if (rv == APR_SUCCESS) {\n            rv = APR_EAGAIN;\n        }\n    }\n    return rv;\n}\n\n#endif\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * protocol.c --- routines which directly communicate with the client.\n *\n * Code originally by Rob McCool; much redone by Robert S. Thau\n * and the Apache Software Foundation.\n */\n\n#include \"apr.h\"\n#include \"apr_strings.h\"\n#include \"apr_buckets.h\"\n#include \"apr_lib.h\"\n#include \"apr_signal.h\"\n#include \"apr_strmatch.h\"\n\n#define APR_WANT_STDIO          /* for sscanf */\n#define APR_WANT_STRFUNC\n#define APR_WANT_MEMFUNC\n#include \"apr_want.h\"\n\n#include \"util_filter.h\"\n#include \"ap_config.h\"\n#include \"httpd.h\"\n#include \"http_config.h\"\n#include \"http_core.h\"\n#include \"http_protocol.h\"\n#include \"http_main.h\"\n#include \"http_request.h\"\n#include \"http_vhost.h\"\n#include \"http_log.h\"           /* For errors detected in basic auth common\n                                 * support code... */\n#include \"mod_core.h\"\n#include \"util_charset.h\"\n#include \"util_ebcdic.h\"\n#include \"scoreboard.h\"\n\n#if APR_HAVE_STDARG_H\n#include <stdarg.h>\n#endif\n#if APR_HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n/* we know core's module_index is 0 */\n#undef APLOG_MODULE_INDEX\n#define APLOG_MODULE_INDEX AP_CORE_MODULE_INDEX\n\nAPR_HOOK_STRUCT(\n    APR_HOOK_LINK(pre_read_request)\n    APR_HOOK_LINK(post_read_request)\n    APR_HOOK_LINK(log_transaction)\n    APR_HOOK_LINK(http_scheme)\n    APR_HOOK_LINK(default_port)\n    APR_HOOK_LINK(note_auth_failure)\n    APR_HOOK_LINK(protocol_propose)\n    APR_HOOK_LINK(protocol_switch)\n    APR_HOOK_LINK(protocol_get)\n)\n\nAP_DECLARE_DATA ap_filter_rec_t *ap_old_write_func = NULL;\n\n\n/* Patterns to match in ap_make_content_type() */\nstatic const char *needcset[] = {\n    \"text/plain\",\n    \"text/html\",\n    NULL\n};\nstatic const apr_strmatch_pattern **needcset_patterns;\nstatic const apr_strmatch_pattern *charset_pattern;\n\nAP_DECLARE(void) ap_setup_make_content_type(apr_pool_t *pool)\n{\n    int i;\n    for (i = 0; needcset[i]; i++) {\n        continue;\n    }\n    needcset_patterns = (const apr_strmatch_pattern **)\n        apr_palloc(pool, (i + 1) * sizeof(apr_strmatch_pattern *));\n    for (i = 0; needcset[i]; i++) {\n        needcset_patterns[i] = apr_strmatch_precompile(pool, needcset[i], 0);\n    }\n    needcset_patterns[i] = NULL;\n    charset_pattern = apr_strmatch_precompile(pool, \"charset=\", 0);\n}\n\n/*\n * Builds the content-type that should be sent to the client from the\n * content-type specified.  The following rules are followed:\n *    - if type is NULL or \"\", return NULL (do not set content-type).\n *    - if charset adding is disabled, stop processing and return type.\n *    - then, if there are no parameters on type, add the default charset\n *    - return type\n */\nAP_DECLARE(const char *)ap_make_content_type(request_rec *r, const char *type)\n{\n    const apr_strmatch_pattern **pcset;\n    core_dir_config *conf =\n        (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n    core_request_config *request_conf;\n    apr_size_t type_len;\n\n    if (!type || *type == '\\0') {\n        return NULL;\n    }\n\n    if (conf->add_default_charset != ADD_DEFAULT_CHARSET_ON) {\n        return type;\n    }\n\n    request_conf = ap_get_core_module_config(r->request_config);\n    if (request_conf->suppress_charset) {\n        return type;\n    }\n\n    type_len = strlen(type);\n\n    if (apr_strmatch(charset_pattern, type, type_len) != NULL) {\n        /* already has parameter, do nothing */\n        /* XXX we don't check the validity */\n        ;\n    }\n    else {\n        /* see if it makes sense to add the charset. At present,\n         * we only add it if the Content-type is one of needcset[]\n         */\n        for (pcset = needcset_patterns; *pcset ; pcset++) {\n            if (apr_strmatch(*pcset, type, type_len) != NULL) {\n                struct iovec concat[3];\n                concat[0].iov_base = (void *)type;\n                concat[0].iov_len = type_len;\n                concat[1].iov_base = (void *)\"; charset=\";\n                concat[1].iov_len = sizeof(\"; charset=\") - 1;\n                concat[2].iov_base = (void *)(conf->add_default_charset_name);\n                concat[2].iov_len = strlen(conf->add_default_charset_name);\n                type = apr_pstrcatv(r->pool, concat, 3, NULL);\n                break;\n            }\n        }\n    }\n\n    return type;\n}\n\nAP_DECLARE(void) ap_set_content_length(request_rec *r, apr_off_t clength)\n{\n    r->clength = clength;\n    apr_table_setn(r->headers_out, \"Content-Length\",\n                   apr_off_t_toa(r->pool, clength));\n}\n\n/*\n * Return the latest rational time from a request/mtime (modification time)\n * pair.  We return the mtime unless it's in the future, in which case we\n * return the current time.  We use the request time as a reference in order\n * to limit the number of calls to time().  We don't check for futurosity\n * unless the mtime is at least as new as the reference.\n */\nAP_DECLARE(apr_time_t) ap_rationalize_mtime(request_rec *r, apr_time_t mtime)\n{\n    apr_time_t now;\n\n    /* For all static responses, it's almost certain that the file was\n     * last modified before the beginning of the request.  So there's\n     * no reason to call time(NULL) again.  But if the response has been\n     * created on demand, then it might be newer than the time the request\n     * started.  In this event we really have to call time(NULL) again\n     * so that we can give the clients the most accurate Last-Modified.  If we\n     * were given a time in the future, we return the current time - the\n     * Last-Modified can't be in the future.\n     */\n    now = (mtime < r->request_time) ? r->request_time : apr_time_now();\n    return (mtime > now) ? now : mtime;\n}\n\n/* Get a line of protocol input, including any continuation lines\n * caused by MIME folding (or broken clients) if fold != 0, and place it\n * in the buffer s, of size n bytes, without the ending newline.\n * \n * Pulls from r->proto_input_filters instead of r->input_filters for\n * stricter protocol adherence and better input filter behavior during\n * chunked trailer processing (for http).\n *\n * If s is NULL, ap_rgetline_core will allocate necessary memory from r->pool.\n *\n * Returns APR_SUCCESS if there are no problems and sets *read to be\n * the full length of s.\n *\n * APR_ENOSPC is returned if there is not enough buffer space.\n * Other errors may be returned on other errors.\n *\n * The [CR]LF are *not* returned in the buffer.  Therefore, a *read of 0\n * indicates that an empty line was read.\n *\n * Notes: Because the buffer uses 1 char for NUL, the most we can return is\n *        (n - 1) actual characters.\n *\n *        If no LF is detected on the last line due to a dropped connection\n *        or a full buffer, that's considered an error.\n */\nAP_DECLARE(apr_status_t) ap_rgetline_core(char **s, apr_size_t n,\n                                          apr_size_t *read, request_rec *r,\n                                          int flags, apr_bucket_brigade *bb)\n{\n    apr_status_t rv;\n    apr_bucket *e;\n    apr_size_t bytes_handled = 0, current_alloc = 0;\n    char *pos, *last_char = *s;\n    int do_alloc = (*s == NULL), saw_eos = 0;\n    int fold = flags & AP_GETLINE_FOLD;\n    int crlf = flags & AP_GETLINE_CRLF;\n    int nospc_eol = flags & AP_GETLINE_NOSPC_EOL;\n    int saw_eol = 0, saw_nospc = 0;\n\n    if (!n) {\n        /* Needs room for NUL byte at least */\n        *read = 0;\n        return APR_BADARG;\n    }\n\n    /*\n     * Initialize last_char as otherwise a random value will be compared\n     * against APR_ASCII_LF at the end of the loop if bb only contains\n     * zero-length buckets.\n     */\n    if (last_char)\n        *last_char = '\\0';\n\n    do {\n        apr_brigade_cleanup(bb);\n        rv = ap_get_brigade(r->proto_input_filters, bb, AP_MODE_GETLINE,\n                            APR_BLOCK_READ, 0);\n        if (rv != APR_SUCCESS) {\n            goto cleanup;\n        }\n\n        /* Something horribly wrong happened.  Someone didn't block! \n         * (this also happens at the end of each keepalive connection)\n         */\n        if (APR_BRIGADE_EMPTY(bb)) {\n            rv = APR_EGENERAL;\n            goto cleanup;\n        }\n\n        for (e = APR_BRIGADE_FIRST(bb);\n             e != APR_BRIGADE_SENTINEL(bb);\n             e = APR_BUCKET_NEXT(e))\n        {\n            const char *str;\n            apr_size_t len;\n\n            /* If we see an EOS, don't bother doing anything more. */\n            if (APR_BUCKET_IS_EOS(e)) {\n                saw_eos = 1;\n                break;\n            }\n\n            rv = apr_bucket_read(e, &str, &len, APR_BLOCK_READ);\n            if (rv != APR_SUCCESS) {\n                goto cleanup;\n            }\n\n            if (len == 0) {\n                /* no use attempting a zero-byte alloc (hurts when\n                 * using --with-efence --enable-pool-debug) or\n                 * doing any of the other logic either\n                 */\n                continue;\n            }\n\n            /* Would this overrun our buffer?  If so, we'll die. */\n            if (n < bytes_handled + len) {\n                /* Before we die, let's fill the buffer up to its limit (i.e.\n                 * fall through with the remaining length, if any), setting\n                 * saw_eol on LF to stop the outer loop appropriately; we may\n                 * come back here once the buffer is filled (no LF seen), and\n                 * either be done at that time or continue to wait for LF here\n                 * if nospc_eol is set.\n                 *\n                 * But there is also a corner cases which we want to address,\n                 * namely if the buffer is overrun by the final LF only (i.e.\n                 * the CR fits in); this is not really an overrun since we'll\n                 * strip the CR finally (and use it for NUL byte), but anyway\n                 * we have to handle the case so that it's not returned to the\n                 * caller as part of the truncated line (it's not!). This is\n                 * easier to consider that LF is out of counting and thus fall\n                 * through with no error (saw_eol is set to 2 so that we later\n                 * ignore LF handling already done here), while folding and\n                 * nospc_eol logics continue to work (or fail) appropriately.\n                 */\n                saw_eol = (str[len - 1] == APR_ASCII_LF);\n                if (/* First time around */\n                    saw_eol && !saw_nospc\n                    /*  Single LF completing the buffered CR, */\n                    && ((len == 1 && ((*s)[bytes_handled - 1] == APR_ASCII_CR))\n                    /*  or trailing CRLF overuns by LF only */\n                        || (len > 1 && str[len - 2] == APR_ASCII_CR\n                            && n - bytes_handled + 1 == len))) {\n                    /* In both cases *last_char is (to be) the CR stripped by\n                     * later 'bytes_handled = last_char - *s'.\n                     */\n                    saw_eol = 2;\n                }\n                else {\n                    /* In any other case we'd lose data. */\n                    rv = APR_ENOSPC;\n                    saw_nospc = 1;\n                }\n                len = n - bytes_handled;\n                if (!len) {\n                    if (saw_eol) {\n                        break;\n                    }\n                    if (nospc_eol) {\n                        continue;\n                    }\n                    goto cleanup;\n                }\n            }\n\n            /* Do we have to handle the allocation ourselves? */\n            if (do_alloc) {\n                /* We'll assume the common case where one bucket is enough. */\n                if (!*s) {\n                    current_alloc = len;\n                    *s = apr_palloc(r->pool, current_alloc + 1);\n                }\n                else if (bytes_handled + len > current_alloc) {\n                    /* Increase the buffer size */\n                    apr_size_t new_size = current_alloc * 2;\n                    char *new_buffer;\n\n                    if (bytes_handled + len > new_size) {\n                        new_size = (bytes_handled + len) * 2;\n                    }\n\n                    new_buffer = apr_palloc(r->pool, new_size + 1);\n\n                    /* Copy what we already had. */\n                    memcpy(new_buffer, *s, bytes_handled);\n                    current_alloc = new_size;\n                    *s = new_buffer;\n                }\n            }\n\n            /* Just copy the rest of the data to the end of the old buffer. */\n            pos = *s + bytes_handled;\n            memcpy(pos, str, len);\n            last_char = pos + len - 1;\n\n            /* We've now processed that new data - update accordingly. */\n            bytes_handled += len;\n        }\n\n        /* If we got a full line of input, stop reading */\n        if (last_char && (*last_char == APR_ASCII_LF)) {\n            saw_eol = 1;\n        }\n    } while (!saw_eol);\n\n    if (rv != APR_SUCCESS) {\n        /* End of line after APR_ENOSPC above */\n        goto cleanup;\n    }\n\n    /* Now terminate the string at the end of the line;\n     * if the last-but-one character is a CR, terminate there.\n     * LF is handled above (not accounted) when saw_eol == 2,\n     * the last char is CR to terminate at still.\n     */\n    if (saw_eol < 2) {\n        if (last_char > *s && last_char[-1] == APR_ASCII_CR) {\n            last_char--;\n        }\n        else if (crlf) {\n            rv = APR_EINVAL;\n            goto cleanup;\n        }\n    }\n    bytes_handled = last_char - *s;\n\n    /* If we're folding, we have more work to do.\n     *\n     * Note that if an EOS was seen, we know we can't have another line.\n     */\n    if (fold && bytes_handled && !saw_eos) {\n        for (;;) {\n            const char *str;\n            apr_size_t len;\n            char c;\n\n            /* Clear the temp brigade for this filter read. */\n            apr_brigade_cleanup(bb);\n\n            /* We only care about the first byte. */\n            rv = ap_get_brigade(r->proto_input_filters, bb, AP_MODE_SPECULATIVE,\n                                APR_BLOCK_READ, 1);\n            if (rv != APR_SUCCESS) {\n                goto cleanup;\n            }\n\n            if (APR_BRIGADE_EMPTY(bb)) {\n                break;\n            }\n\n            e = APR_BRIGADE_FIRST(bb);\n\n            /* If we see an EOS, don't bother doing anything more. */\n            if (APR_BUCKET_IS_EOS(e)) {\n                break;\n            }\n\n            rv = apr_bucket_read(e, &str, &len, APR_BLOCK_READ);\n            if (rv != APR_SUCCESS) {\n                apr_brigade_cleanup(bb);\n                goto cleanup;\n            }\n\n            /* Found one, so call ourselves again to get the next line.\n             *\n             * FIXME: If the folding line is completely blank, should we\n             * stop folding?  Does that require also looking at the next\n             * char?\n             */\n            /* When we call destroy, the buckets are deleted, so save that\n             * one character we need.  This simplifies our execution paths\n             * at the cost of one character read.\n             */\n            c = *str;\n            if (c == APR_ASCII_BLANK || c == APR_ASCII_TAB) {\n                /* Do we have enough space? We may be full now. */\n                if (bytes_handled >= n) {\n                    rv = APR_ENOSPC;\n                    goto cleanup;\n                }\n                else {\n                    apr_size_t next_size, next_len;\n                    char *tmp;\n\n                    /* If we're doing the allocations for them, we have to\n                     * give ourselves a NULL and copy it on return.\n                     */\n                    if (do_alloc) {\n                        tmp = NULL;\n                    }\n                    else {\n                        tmp = last_char;\n                    }\n\n                    next_size = n - bytes_handled;\n\n                    rv = ap_rgetline_core(&tmp, next_size, &next_len, r,\n                                          flags & ~AP_GETLINE_FOLD, bb);\n                    if (rv != APR_SUCCESS) {\n                        goto cleanup;\n                    }\n\n                    if (do_alloc && next_len > 0) {\n                        char *new_buffer;\n                        apr_size_t new_size = bytes_handled + next_len + 1;\n\n                        /* we need to alloc an extra byte for a null */\n                        new_buffer = apr_palloc(r->pool, new_size);\n\n                        /* Copy what we already had. */\n                        memcpy(new_buffer, *s, bytes_handled);\n\n                        /* copy the new line, including the trailing null */\n                        memcpy(new_buffer + bytes_handled, tmp, next_len);\n                        *s = new_buffer;\n                    }\n\n                    last_char += next_len;\n                    bytes_handled += next_len;\n                }\n            }\n            else { /* next character is not tab or space */\n                break;\n            }\n        }\n    }\n\ncleanup:\n    if (bytes_handled >= n) {\n        bytes_handled = n - 1;\n    }\n\n    *read = bytes_handled;\n    if (*s) {\n        /* ensure the string is NUL terminated */\n        (*s)[*read] = '\\0';\n\n        /* PR#43039: We shouldn't accept NULL bytes within the line */\n        bytes_handled = strlen(*s);\n        if (bytes_handled < *read) {\n            *read = bytes_handled;\n            if (rv == APR_SUCCESS) {\n                rv = APR_EINVAL;\n            }\n        }\n    }\n    return rv;\n}\n\n#if APR_CHARSET_EBCDIC\nAP_DECLARE(apr_status_t) ap_rgetline(char **s, apr_size_t n,\n                                     apr_size_t *read, request_rec *r,\n                                     int fold, apr_bucket_brigade *bb)\n{\n    /* on ASCII boxes, ap_rgetline is a macro which simply invokes\n     * ap_rgetline_core with the same parms\n     *\n     * on EBCDIC boxes, each complete http protocol input line needs to be\n     * translated into the code page used by the compiler.  Since\n     * ap_rgetline_core uses recursion, we do the translation in a wrapper\n     * function to ensure that each input character gets translated only once.\n     */\n    apr_status_t rv;\n\n    rv = ap_rgetline_core(s, n, read, r, fold, bb);\n    if (rv == APR_SUCCESS || APR_STATUS_IS_ENOSPC(rv)) {\n        ap_xlate_proto_from_ascii(*s, *read);\n    }\n    return rv;\n}\n#endif\n\nAP_DECLARE(int) ap_getline(char *s, int n, request_rec *r, int flags)\n{\n    char *tmp_s = s;\n    apr_status_t rv;\n    apr_size_t len;\n    apr_bucket_brigade *tmp_bb;\n\n    if (n < 1) {\n        /* Can't work since we always NUL terminate */\n        return -1;\n    }\n\n    tmp_bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    rv = ap_rgetline(&tmp_s, n, &len, r, flags, tmp_bb);\n    apr_brigade_destroy(tmp_bb);\n\n    /* Map the out-of-space condition to the old API. */\n    if (rv == APR_ENOSPC) {\n        return n;\n    }\n\n    /* Anything else is just bad. */\n    if (rv != APR_SUCCESS) {\n        return -1;\n    }\n\n    return (int)len;\n}\n\n/* parse_uri: break apart the uri\n * Side Effects:\n * - sets r->args to rest after '?' (or NULL if no '?')\n * - sets r->uri to request uri (without r->args part)\n * - sets r->hostname (if not set already) from request (scheme://host:port)\n */\nAP_CORE_DECLARE(void) ap_parse_uri(request_rec *r, const char *uri)\n{\n    int status = HTTP_OK;\n\n    r->unparsed_uri = apr_pstrdup(r->pool, uri);\n\n    /* http://issues.apache.org/bugzilla/show_bug.cgi?id=31875\n     * http://issues.apache.org/bugzilla/show_bug.cgi?id=28450\n     *\n     * This is not in fact a URI, it's a path.  That matters in the\n     * case of a leading double-slash.  We need to resolve the issue\n     * by normalizing that out before treating it as a URI.\n     */\n    while ((uri[0] == '/') && (uri[1] == '/')) {\n        ++uri ;\n    }\n    if (r->method_number == M_CONNECT) {\n        status = apr_uri_parse_hostinfo(r->pool, uri, &r->parsed_uri);\n    }\n    else {\n        status = apr_uri_parse(r->pool, uri, &r->parsed_uri);\n    }\n\n    if (status == APR_SUCCESS) {\n        /* if it has a scheme we may need to do absoluteURI vhost stuff */\n        if (r->parsed_uri.scheme\n            && !ap_cstr_casecmp(r->parsed_uri.scheme, ap_http_scheme(r))) {\n            r->hostname = r->parsed_uri.hostname;\n        }\n        else if (r->method_number == M_CONNECT) {\n            r->hostname = r->parsed_uri.hostname;\n        }\n\n        r->args = r->parsed_uri.query;\n        r->uri = r->parsed_uri.path ? r->parsed_uri.path\n                 : apr_pstrdup(r->pool, \"/\");\n\n#if defined(OS2) || defined(WIN32)\n        /* Handle path translations for OS/2 and plug security hole.\n         * This will prevent \"http://www.wherever.com/..\\..\\/\" from\n         * returning a directory for the root drive.\n         */\n        {\n            char *x;\n\n            for (x = r->uri; (x = strchr(x, '\\\\')) != NULL; )\n                *x = '/';\n        }\n#endif /* OS2 || WIN32 */\n    }\n    else {\n        r->args = NULL;\n        r->hostname = NULL;\n        r->status = HTTP_BAD_REQUEST;             /* set error status */\n        r->uri = apr_pstrdup(r->pool, uri);\n    }\n}\n\n/* get the length of the field name for logging, but no more than 80 bytes */\n#define LOG_NAME_MAX_LEN 80\nstatic int field_name_len(const char *field)\n{\n    const char *end = ap_strchr_c(field, ':');\n    if (end == NULL || end - field > LOG_NAME_MAX_LEN)\n        return LOG_NAME_MAX_LEN;\n    return end - field;\n}\n\nstatic int read_request_line(request_rec *r, apr_bucket_brigade *bb)\n{\n    enum {\n        rrl_none, rrl_badmethod, rrl_badwhitespace, rrl_excesswhitespace,\n        rrl_missinguri, rrl_baduri, rrl_badprotocol, rrl_trailingtext,\n        rrl_badmethod09, rrl_reject09\n    } deferred_error = rrl_none;\n    char *ll;\n    char *uri;\n    apr_size_t len;\n    int num_blank_lines = DEFAULT_LIMIT_BLANK_LINES;\n    core_server_config *conf = ap_get_core_module_config(r->server->module_config);\n    int strict = (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE);\n\n    /* Read past empty lines until we get a real request line,\n     * a read error, the connection closes (EOF), or we timeout.\n     *\n     * We skip empty lines because browsers have to tack a CRLF on to the end\n     * of POSTs to support old CERN webservers.  But note that we may not\n     * have flushed any previous response completely to the client yet.\n     * We delay the flush as long as possible so that we can improve\n     * performance for clients that are pipelining requests.  If a request\n     * is pipelined then we won't block during the (implicit) read() below.\n     * If the requests aren't pipelined, then the client is still waiting\n     * for the final buffer flush from us, and we will block in the implicit\n     * read().  B_SAFEREAD ensures that the BUFF layer flushes if it will\n     * have to block during a read.\n     */\n\n    do {\n        apr_status_t rv;\n\n        /* ensure ap_rgetline allocates memory each time thru the loop\n         * if there are empty lines\n         */\n        r->the_request = NULL;\n        rv = ap_rgetline(&(r->the_request), (apr_size_t)(r->server->limit_req_line + 2),\n                         &len, r, strict ? AP_GETLINE_CRLF : 0, bb);\n\n        if (rv != APR_SUCCESS) {\n            r->request_time = apr_time_now();\n\n            /* ap_rgetline returns APR_ENOSPC if it fills up the\n             * buffer before finding the end-of-line.  This is only going to\n             * happen if it exceeds the configured limit for a request-line.\n             */\n            if (APR_STATUS_IS_ENOSPC(rv)) {\n                r->status = HTTP_REQUEST_URI_TOO_LARGE;\n            }\n            else if (APR_STATUS_IS_TIMEUP(rv)) {\n                r->status = HTTP_REQUEST_TIME_OUT;\n            }\n            else if (APR_STATUS_IS_EINVAL(rv)) {\n                r->status = HTTP_BAD_REQUEST;\n            }\n            r->proto_num = HTTP_VERSION(1,0);\n            r->protocol  = apr_pstrdup(r->pool, \"HTTP/1.0\");\n            return 0;\n        }\n    } while ((len <= 0) && (--num_blank_lines >= 0));\n\n    if (APLOGrtrace5(r)) {\n        ap_log_rerror(APLOG_MARK, APLOG_TRACE5, 0, r,\n                      \"Request received from client: %s\",\n                      ap_escape_logitem(r->pool, r->the_request));\n    }\n\n    r->request_time = apr_time_now();\n\n    r->method = r->the_request;\n\n    /* If there is whitespace before a method, skip it and mark in error */\n    if (apr_isspace(*r->method)) {\n        deferred_error = rrl_badwhitespace; \n        for ( ; apr_isspace(*r->method); ++r->method)\n            ; \n    }\n\n    /* Scan the method up to the next whitespace, ensure it contains only\n     * valid http-token characters, otherwise mark in error\n     */\n    if (strict) {\n        ll = (char*) ap_scan_http_token(r->method);\n    }\n    else {\n        ll = (char*) ap_scan_vchar_obstext(r->method);\n    }\n\n    if (((ll == r->method) || (*ll && !apr_isspace(*ll)))\n            && deferred_error == rrl_none) {\n        deferred_error = rrl_badmethod;\n        ll = strpbrk(ll, \"\\t\\n\\v\\f\\r \");\n    }\n\n    /* Verify method terminated with a single SP, or mark as specific error */\n    if (!ll) {\n        if (deferred_error == rrl_none)\n            deferred_error = rrl_missinguri;\n        r->protocol = uri = \"\";\n        len = 0;\n        goto rrl_done;\n    }\n    else if (strict && ll[0] && apr_isspace(ll[1])\n             && deferred_error == rrl_none) {\n        deferred_error = rrl_excesswhitespace; \n    }\n\n    /* Advance uri pointer over leading whitespace, NUL terminate the method\n     * If non-SP whitespace is encountered, mark as specific error\n     */\n    for (uri = ll; apr_isspace(*uri); ++uri) \n        if (*uri != ' ' && deferred_error == rrl_none)\n            deferred_error = rrl_badwhitespace; \n    *ll = '\\0';\n\n    if (!*uri && deferred_error == rrl_none)\n        deferred_error = rrl_missinguri;\n\n    /* Scan the URI up to the next whitespace, ensure it contains no raw\n     * control characters, otherwise mark in error\n     */\n    ll = (char*) ap_scan_vchar_obstext(uri);\n    if (ll == uri || (*ll && !apr_isspace(*ll))) {\n        deferred_error = rrl_baduri;\n        ll = strpbrk(ll, \"\\t\\n\\v\\f\\r \");\n    }\n\n    /* Verify URI terminated with a single SP, or mark as specific error */\n    if (!ll) {\n        r->protocol = \"\";\n        len = 0;\n        goto rrl_done;\n    }\n    else if (strict && ll[0] && apr_isspace(ll[1])\n             && deferred_error == rrl_none) {\n        deferred_error = rrl_excesswhitespace; \n    }\n\n    /* Advance protocol pointer over leading whitespace, NUL terminate the uri\n     * If non-SP whitespace is encountered, mark as specific error\n     */\n    for (r->protocol = ll; apr_isspace(*r->protocol); ++r->protocol) \n        if (*r->protocol != ' ' && deferred_error == rrl_none)\n            deferred_error = rrl_badwhitespace; \n    *ll = '\\0';\n\n    /* Scan the protocol up to the next whitespace, validation comes later */\n    if (!(ll = (char*) ap_scan_vchar_obstext(r->protocol))) {\n        len = strlen(r->protocol);\n        goto rrl_done;\n    }\n    len = ll - r->protocol;\n\n    /* Advance over trailing whitespace, if found mark in error,\n     * determine if trailing text is found, unconditionally mark in error,\n     * finally NUL terminate the protocol string\n     */\n    if (*ll && !apr_isspace(*ll)) {\n        deferred_error = rrl_badprotocol;\n    }\n    else if (strict && *ll) {\n        deferred_error = rrl_excesswhitespace;\n    }\n    else {\n        for ( ; apr_isspace(*ll); ++ll)\n            if (*ll != ' ' && deferred_error == rrl_none)\n                deferred_error = rrl_badwhitespace; \n        if (*ll && deferred_error == rrl_none)\n            deferred_error = rrl_trailingtext;\n    }\n    *((char *)r->protocol + len) = '\\0';\n\nrrl_done:\n    /* For internal integrity and palloc efficiency, reconstruct the_request\n     * in one palloc, using only single SP characters, per spec.\n     */\n    r->the_request = apr_pstrcat(r->pool, r->method, *uri ? \" \" : NULL, uri,\n                                 *r->protocol ? \" \" : NULL, r->protocol, NULL);\n\n    if (len == 8\n            && r->protocol[0] == 'H' && r->protocol[1] == 'T'\n            && r->protocol[2] == 'T' && r->protocol[3] == 'P'\n            && r->protocol[4] == '/' && apr_isdigit(r->protocol[5])\n            && r->protocol[6] == '.' && apr_isdigit(r->protocol[7])\n            && r->protocol[5] != '0') {\n        r->assbackwards = 0;\n        r->proto_num = HTTP_VERSION(r->protocol[5] - '0', r->protocol[7] - '0');\n    }\n    else if (len == 8\n                 && (r->protocol[0] == 'H' || r->protocol[0] == 'h')\n                 && (r->protocol[1] == 'T' || r->protocol[1] == 't')\n                 && (r->protocol[2] == 'T' || r->protocol[2] == 't')\n                 && (r->protocol[3] == 'P' || r->protocol[3] == 'p')\n                 && r->protocol[4] == '/' && apr_isdigit(r->protocol[5])\n                 && r->protocol[6] == '.' && apr_isdigit(r->protocol[7])\n                 && r->protocol[5] != '0') {\n        r->assbackwards = 0;\n        r->proto_num = HTTP_VERSION(r->protocol[5] - '0', r->protocol[7] - '0');\n        if (strict && deferred_error == rrl_none)\n            deferred_error = rrl_badprotocol;\n        else\n            memcpy((char*)r->protocol, \"HTTP\", 4);\n    }\n    else if (r->protocol[0]) {\n        r->proto_num = HTTP_VERSION(0, 9);\n        /* Defer setting the r->protocol string till error msg is composed */\n        if (deferred_error == rrl_none)\n            deferred_error = rrl_badprotocol;\n    }\n    else {\n        r->assbackwards = 1;\n        r->protocol  = apr_pstrdup(r->pool, \"HTTP/0.9\");\n        r->proto_num = HTTP_VERSION(0, 9);\n    }\n\n    /* Determine the method_number and parse the uri prior to invoking error\n     * handling, such that these fields are available for substitution\n     */\n    r->method_number = ap_method_number_of(r->method);\n    if (r->method_number == M_GET && r->method[0] == 'H')\n        r->header_only = 1;\n\n    ap_parse_uri(r, uri);\n\n    /* With the request understood, we can consider HTTP/0.9 specific errors */\n    if (r->proto_num == HTTP_VERSION(0, 9) && deferred_error == rrl_none) {\n        if (conf->http09_enable == AP_HTTP09_DISABLE)\n            deferred_error = rrl_reject09;\n        else if (strict && (r->method_number != M_GET || r->header_only))\n            deferred_error = rrl_badmethod09;\n    }\n\n    /* Now that the method, uri and protocol are all processed,\n     * we can safely resume any deferred error reporting\n     */\n    if (deferred_error != rrl_none) {\n        if (deferred_error == rrl_badmethod)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03445)\n                          \"HTTP Request Line; Invalid method token: '%.*s'\",\n                          field_name_len(r->method), r->method);\n        else if (deferred_error == rrl_badmethod09)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03444)\n                          \"HTTP Request Line; Invalid method token: '%.*s'\"\n                          \" (only GET is allowed for HTTP/0.9 requests)\",\n                          field_name_len(r->method), r->method);\n        else if (deferred_error == rrl_missinguri)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03446)\n                          \"HTTP Request Line; Missing URI\");\n        else if (deferred_error == rrl_baduri)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03454)\n                          \"HTTP Request Line; URI incorrectly encoded: '%.*s'\",\n                          field_name_len(r->unparsed_uri), r->unparsed_uri);\n        else if (deferred_error == rrl_badwhitespace)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03447)\n                          \"HTTP Request Line; Invalid whitespace\");\n        else if (deferred_error == rrl_excesswhitespace)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03448)\n                          \"HTTP Request Line; Excess whitespace \"\n                          \"(disallowed by HttpProtocolOptions Strict)\");\n        else if (deferred_error == rrl_trailingtext)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03449)\n                          \"HTTP Request Line; Extraneous text found '%.*s' \"\n                          \"(perhaps whitespace was injected?)\",\n                          field_name_len(ll), ll);\n        else if (deferred_error == rrl_reject09)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02401)\n                          \"HTTP Request Line; Rejected HTTP/0.9 request\");\n        else if (deferred_error == rrl_badprotocol)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02418)\n                          \"HTTP Request Line; Unrecognized protocol '%.*s' \"\n                          \"(perhaps whitespace was injected?)\",\n                          field_name_len(r->protocol), r->protocol);\n        r->status = HTTP_BAD_REQUEST;\n        goto rrl_failed;\n    }\n\n    if (conf->http_methods == AP_HTTP_METHODS_REGISTERED\n            && r->method_number == M_INVALID) {\n        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02423)\n                      \"HTTP Request Line; Unrecognized HTTP method: '%.*s' \"\n                      \"(disallowed by RegisteredMethods)\",\n                      field_name_len(r->method), r->method);\n        r->status = HTTP_NOT_IMPLEMENTED;\n        /* This can't happen in an HTTP/0.9 request, we verified GET above */\n        return 0;\n    }\n\n    if (r->status != HTTP_OK) {\n        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03450)\n                      \"HTTP Request Line; Unable to parse URI: '%.*s'\",\n                      field_name_len(r->uri), r->uri);\n        goto rrl_failed;\n    }\n\n    if (strict) {\n        if (r->parsed_uri.fragment) {\n            /* RFC3986 3.5: no fragment */\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02421)\n                          \"HTTP Request Line; URI must not contain a fragment\");\n            r->status = HTTP_BAD_REQUEST;\n            goto rrl_failed;\n        }\n        if (r->parsed_uri.user || r->parsed_uri.password) {\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02422)\n                          \"HTTP Request Line; URI must not contain a \"\n                          \"username/password\");\n            r->status = HTTP_BAD_REQUEST;\n            goto rrl_failed;\n        }\n    }\n\n    return 1;\n\nrrl_failed:\n    if (r->proto_num == HTTP_VERSION(0, 9)) {\n        /* Send all parsing and protocol error response with 1.x behavior,\n         * and reserve 505 errors for actual HTTP protocols presented.\n         * As called out in RFC7230 3.5, any errors parsing the protocol\n         * from the request line are nearly always misencoded HTTP/1.x\n         * requests. Only a valid 0.9 request with no parsing errors\n         * at all may be treated as a simple request, if allowed.\n         */\n        r->assbackwards = 0;\n        r->connection->keepalive = AP_CONN_CLOSE;\n        r->proto_num = HTTP_VERSION(1, 0);\n        r->protocol  = apr_pstrdup(r->pool, \"HTTP/1.0\");\n    }\n    return 0;\n}\n\nstatic int table_do_fn_check_lengths(void *r_, const char *key,\n                                     const char *value)\n{\n    request_rec *r = r_;\n    if (value == NULL || r->server->limit_req_fieldsize >= strlen(value) )\n        return 1;\n\n    r->status = HTTP_BAD_REQUEST;\n    apr_table_setn(r->notes, \"error-notes\",\n                   \"Size of a request header field exceeds server limit.\");\n    ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00560) \"Request \"\n                  \"header exceeds LimitRequestFieldSize after merging: %.*s\",\n                  field_name_len(key), key);\n    return 0;\n}\n\nAP_DECLARE(void) ap_get_mime_headers_core(request_rec *r, apr_bucket_brigade *bb)\n{\n    char *last_field = NULL;\n    apr_size_t last_len = 0;\n    apr_size_t alloc_len = 0;\n    char *field;\n    char *value;\n    apr_size_t len;\n    int fields_read = 0;\n    char *tmp_field;\n    core_server_config *conf = ap_get_core_module_config(r->server->module_config);\n    int strict = (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE);\n\n    /*\n     * Read header lines until we get the empty separator line, a read error,\n     * the connection closes (EOF), reach the server limit, or we timeout.\n     */\n    while(1) {\n        apr_status_t rv;\n\n        field = NULL;\n        rv = ap_rgetline(&field, r->server->limit_req_fieldsize + 2,\n                         &len, r, strict ? AP_GETLINE_CRLF : 0, bb);\n\n        if (rv != APR_SUCCESS) {\n            if (APR_STATUS_IS_TIMEUP(rv)) {\n                r->status = HTTP_REQUEST_TIME_OUT;\n            }\n            else {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, rv, r, \n                              \"Failed to read request header line %s\", field);\n                r->status = HTTP_BAD_REQUEST;\n            }\n\n            /* ap_rgetline returns APR_ENOSPC if it fills up the buffer before\n             * finding the end-of-line.  This is only going to happen if it\n             * exceeds the configured limit for a field size.\n             */\n            if (rv == APR_ENOSPC) {\n                apr_table_setn(r->notes, \"error-notes\",\n                               \"Size of a request header field \"\n                               \"exceeds server limit.\");\n                ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00561)\n                              \"Request header exceeds LimitRequestFieldSize%s\"\n                              \"%.*s\",\n                              (field && *field) ? \": \" : \"\",\n                              (field) ? field_name_len(field) : 0,\n                              (field) ? field : \"\");\n            }\n            return;\n        }\n\n        /* For all header values, and all obs-fold lines, the presence of\n         * additional whitespace is a no-op, so collapse trailing whitespace\n         * to save buffer allocation and optimize copy operations.\n         * Do not remove the last single whitespace under any condition.\n         */\n        while (len > 1 && (field[len-1] == '\\t' || field[len-1] == ' ')) {\n            field[--len] = '\\0';\n        } \n\n        if (*field == '\\t' || *field == ' ') {\n\n            /* Append any newly-read obs-fold line onto the preceding\n             * last_field line we are processing\n             */\n            apr_size_t fold_len;\n\n            if (last_field == NULL) {\n                r->status = HTTP_BAD_REQUEST;\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03442)\n                              \"Line folding encountered before first\"\n                              \" header line\");\n                return;\n            }\n\n            if (field[1] == '\\0') {\n                r->status = HTTP_BAD_REQUEST;\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03443)\n                              \"Empty folded line encountered\");\n                return;\n            }\n\n            /* Leading whitespace on an obs-fold line can be\n             * similarly discarded */\n            while (field[1] == '\\t' || field[1] == ' ') {\n                ++field; --len;\n            }\n\n            /* This line is a continuation of the preceding line(s),\n             * so append it to the line that we've set aside.\n             * Note: this uses a power-of-two allocator to avoid\n             * doing O(n) allocs and using O(n^2) space for\n             * continuations that span many many lines.\n             */\n            fold_len = last_len + len + 1; /* trailing null */\n\n            if (fold_len >= (apr_size_t)(r->server->limit_req_fieldsize)) {\n                r->status = HTTP_BAD_REQUEST;\n                /* report what we have accumulated so far before the\n                 * overflow (last_field) as the field with the problem\n                 */\n                apr_table_setn(r->notes, \"error-notes\",\n                               \"Size of a request header field \"\n                               \"exceeds server limit.\");\n                ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00562)\n                              \"Request header exceeds LimitRequestFieldSize \"\n                              \"after folding: %.*s\",\n                              field_name_len(last_field), last_field);\n                return;\n            }\n\n            if (fold_len > alloc_len) {\n                char *fold_buf;\n                alloc_len += alloc_len;\n                if (fold_len > alloc_len) {\n                    alloc_len = fold_len;\n                }\n                fold_buf = (char *)apr_palloc(r->pool, alloc_len);\n                memcpy(fold_buf, last_field, last_len);\n                last_field = fold_buf;\n            }\n            memcpy(last_field + last_len, field, len +1); /* +1 for nul */\n            /* Replace obs-fold w/ SP per RFC 7230 3.2.4 */\n            last_field[last_len] = ' ';\n            last_len += len;\n\n            /* We've appended this obs-fold line to last_len, proceed to\n             * read the next input line\n             */\n            continue;\n        }\n        else if (last_field != NULL) {\n\n            /* Process the previous last_field header line with all obs-folded\n             * segments already concatenated (this is not operating on the\n             * most recently read input line).\n             */\n\n            if (r->server->limit_req_fields\n                    && (++fields_read > r->server->limit_req_fields)) {\n                r->status = HTTP_BAD_REQUEST;\n                apr_table_setn(r->notes, \"error-notes\",\n                               \"The number of request header fields \"\n                               \"exceeds this server's limit.\");\n                ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00563)\n                              \"Number of request headers exceeds \"\n                              \"LimitRequestFields\");\n                return;\n            }\n\n            if (!strict)\n            {\n                /* Not Strict ('Unsafe' mode), using the legacy parser */\n\n                if (!(value = strchr(last_field, ':'))) { /* Find ':' or */\n                    r->status = HTTP_BAD_REQUEST;   /* abort bad request */\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00564)\n                                  \"Request header field is missing ':' \"\n                                  \"separator: %.*s\", (int)LOG_NAME_MAX_LEN,\n                                  last_field);\n                    return;\n                }\n\n                if (value == last_field) {\n                    r->status = HTTP_BAD_REQUEST;\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03453)\n                                  \"Request header field name was empty\");\n                    return;\n                }\n\n                *value++ = '\\0'; /* NUL-terminate at colon */\n\n                if (strpbrk(last_field, \"\\t\\n\\v\\f\\r \")) {\n                    r->status = HTTP_BAD_REQUEST;\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03452)\n                                  \"Request header field name presented\"\n                                  \" invalid whitespace\");\n                    return;\n                }\n\n                while (*value == ' ' || *value == '\\t') {\n                     ++value;            /* Skip to start of value   */\n                }\n\n                if (strpbrk(value, \"\\n\\v\\f\\r\")) {\n                    r->status = HTTP_BAD_REQUEST;\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03451)\n                                  \"Request header field value presented\"\n                                  \" bad whitespace\");\n                    return;\n                }\n            }\n            else /* Using strict RFC7230 parsing */\n            {\n                /* Ensure valid token chars before ':' per RFC 7230 3.2.4 */\n                value = (char *)ap_scan_http_token(last_field);\n                if ((value == last_field) || *value != ':') {\n                    r->status = HTTP_BAD_REQUEST;\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02426)\n                                  \"Request header field name is malformed: \"\n                                  \"%.*s\", (int)LOG_NAME_MAX_LEN, last_field);\n                    return;\n                }\n\n                *value++ = '\\0'; /* NUL-terminate last_field name at ':' */\n\n                while (*value == ' ' || *value == '\\t') {\n                    ++value;     /* Skip LWS of value */\n                }\n\n                /* Find invalid, non-HT ctrl char, or the trailing NULL */\n                tmp_field = (char *)ap_scan_http_field_content(value);\n\n                /* Reject value for all garbage input (CTRLs excluding HT)\n                 * e.g. only VCHAR / SP / HT / obs-text are allowed per\n                 * RFC7230 3.2.6 - leave all more explicit rule enforcement\n                 * for specific header handler logic later in the cycle\n                 */\n                if (*tmp_field != '\\0') {\n                    r->status = HTTP_BAD_REQUEST;\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02427)\n                                  \"Request header value is malformed: \"\n                                  \"%.*s\", (int)LOG_NAME_MAX_LEN, value);\n                    return;\n                }\n            }\n\n            apr_table_addn(r->headers_in, last_field, value);\n\n            /* This last_field header is now stored in headers_in,\n             * resume processing of the current input line.\n             */\n        }\n\n        /* Found the terminating empty end-of-headers line, stop. */\n        if (len == 0) {\n            break;\n        }\n\n        /* Keep track of this new header line so that we can extend it across\n         * any obs-fold or parse it on the next loop iteration. We referenced\n         * our previously allocated buffer in r->headers_in,\n         * so allocate a fresh buffer if required.\n         */\n        alloc_len = 0;\n        last_field = field;\n        last_len = len;\n    }\n\n    /* Combine multiple message-header fields with the same\n     * field-name, following RFC 2616, 4.2.\n     */\n    apr_table_compress(r->headers_in, APR_OVERLAP_TABLES_MERGE);\n\n    /* enforce LimitRequestFieldSize for merged headers */\n    apr_table_do(table_do_fn_check_lengths, r, r->headers_in, NULL);\n}\n\nAP_DECLARE(void) ap_get_mime_headers(request_rec *r)\n{\n    apr_bucket_brigade *tmp_bb;\n    tmp_bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    ap_get_mime_headers_core(r, tmp_bb);\n    apr_brigade_destroy(tmp_bb);\n}\n\nrequest_rec *ap_read_request(conn_rec *conn)\n{\n    request_rec *r;\n    apr_pool_t *p;\n    const char *expect;\n    int access_status;\n    apr_bucket_brigade *tmp_bb;\n    apr_socket_t *csd;\n    apr_interval_time_t cur_timeout;\n\n\n    apr_pool_create(&p, conn->pool);\n    apr_pool_tag(p, \"request\");\n    r = apr_pcalloc(p, sizeof(request_rec));\n    AP_READ_REQUEST_ENTRY((intptr_t)r, (uintptr_t)conn);\n    r->pool            = p;\n    r->connection      = conn;\n    r->server          = conn->base_server;\n\n    r->user            = NULL;\n    r->ap_auth_type    = NULL;\n\n    r->allowed_methods = ap_make_method_list(p, 2);\n\n    r->headers_in      = apr_table_make(r->pool, 25);\n    r->trailers_in     = apr_table_make(r->pool, 5);\n    r->subprocess_env  = apr_table_make(r->pool, 25);\n    r->headers_out     = apr_table_make(r->pool, 12);\n    r->err_headers_out = apr_table_make(r->pool, 5);\n    r->trailers_out    = apr_table_make(r->pool, 5);\n    r->notes           = apr_table_make(r->pool, 5);\n\n    r->request_config  = ap_create_request_config(r->pool);\n    /* Must be set before we run create request hook */\n\n    r->proto_output_filters = conn->output_filters;\n    r->output_filters  = r->proto_output_filters;\n    r->proto_input_filters = conn->input_filters;\n    r->input_filters   = r->proto_input_filters;\n    ap_run_create_request(r);\n    r->per_dir_config  = r->server->lookup_defaults;\n\n    r->sent_bodyct     = 0;                      /* bytect isn't for body */\n\n    r->read_length     = 0;\n    r->read_body       = REQUEST_NO_BODY;\n\n    r->status          = HTTP_OK;  /* Until further notice */\n    r->the_request     = NULL;\n\n    /* Begin by presuming any module can make its own path_info assumptions,\n     * until some module interjects and changes the value.\n     */\n    r->used_path_info = AP_REQ_DEFAULT_PATH_INFO;\n\n    r->useragent_addr = conn->client_addr;\n    r->useragent_ip = conn->client_ip;\n\n    tmp_bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    conn->keepalive = AP_CONN_UNKNOWN;\n\n    ap_run_pre_read_request(r, conn);\n\n    /* Get the request... */\n    if (!read_request_line(r, tmp_bb)) {\n        switch (r->status) {\n        case HTTP_REQUEST_URI_TOO_LARGE:\n        case HTTP_BAD_REQUEST:\n        case HTTP_VERSION_NOT_SUPPORTED:\n        case HTTP_NOT_IMPLEMENTED:\n            if (r->status == HTTP_REQUEST_URI_TOO_LARGE) {\n                ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00565)\n                              \"request failed: client's request-line exceeds LimitRequestLine (longer than %d)\",\n                              r->server->limit_req_line);\n            }\n            else if (r->method == NULL) {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00566)\n                              \"request failed: malformed request line\");\n            }\n            access_status = r->status;\n            r->status = HTTP_OK;\n            ap_die(access_status, r);\n            ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);\n            ap_run_log_transaction(r);\n            r = NULL;\n            apr_brigade_destroy(tmp_bb);\n            goto traceout;\n        case HTTP_REQUEST_TIME_OUT:\n            ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, NULL);\n            if (!r->connection->keepalives)\n                ap_run_log_transaction(r);\n            apr_brigade_destroy(tmp_bb);\n            goto traceout;\n        default:\n            apr_brigade_destroy(tmp_bb);\n            r = NULL;\n            goto traceout;\n        }\n    }\n\n    /* We may have been in keep_alive_timeout mode, so toggle back\n     * to the normal timeout mode as we fetch the header lines,\n     * as necessary.\n     */\n    csd = ap_get_conn_socket(conn);\n    apr_socket_timeout_get(csd, &cur_timeout);\n    if (cur_timeout != conn->base_server->timeout) {\n        apr_socket_timeout_set(csd, conn->base_server->timeout);\n        cur_timeout = conn->base_server->timeout;\n    }\n\n    if (!r->assbackwards) {\n        const char *tenc, *clen;\n\n        ap_get_mime_headers_core(r, tmp_bb);\n        if (r->status != HTTP_OK) {\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00567)\n                          \"request failed: error reading the headers\");\n            ap_send_error_response(r, 0);\n            ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);\n            ap_run_log_transaction(r);\n            apr_brigade_destroy(tmp_bb);\n            goto traceout;\n        }\n\n        clen = apr_table_get(r->headers_in, \"Content-Length\");\n        if (clen) {\n            apr_off_t cl;\n\n            if (!ap_parse_strict_length(&cl, clen)) {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(10242)\n                              \"client sent invalid Content-Length \"\n                              \"(%s): %s\", clen, r->uri);\n                r->status = HTTP_BAD_REQUEST;\n                conn->keepalive = AP_CONN_CLOSE;\n                ap_send_error_response(r, 0);\n                ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);\n                ap_run_log_transaction(r);\n                apr_brigade_destroy(tmp_bb);\n                goto traceout;\n            }\n        }\n\n        tenc = apr_table_get(r->headers_in, \"Transfer-Encoding\");\n        if (tenc) {\n            /* https://tools.ietf.org/html/rfc7230\n             * Section 3.3.3.3: \"If a Transfer-Encoding header field is\n             * present in a request and the chunked transfer coding is not\n             * the final encoding ...; the server MUST respond with the 400\n             * (Bad Request) status code and then close the connection\".\n             */\n            if (!ap_is_chunked(r->pool, tenc)) {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02539)\n                              \"client sent unknown Transfer-Encoding \"\n                              \"(%s): %s\", tenc, r->uri);\n                r->status = HTTP_BAD_REQUEST;\n                conn->keepalive = AP_CONN_CLOSE;\n                ap_send_error_response(r, 0);\n                ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);\n                ap_run_log_transaction(r);\n                apr_brigade_destroy(tmp_bb);\n                goto traceout;\n            }\n\n            /* https://tools.ietf.org/html/rfc7230\n             * Section 3.3.3.3: \"If a message is received with both a\n             * Transfer-Encoding and a Content-Length header field, the\n             * Transfer-Encoding overrides the Content-Length. ... A sender\n             * MUST remove the received Content-Length field\".\n             */\n            if (clen) {\n                apr_table_unset(r->headers_in, \"Content-Length\");\n\n                /* Don't reuse this connection anyway to avoid confusion with\n                 * intermediaries and request/reponse spltting.\n                 */\n                conn->keepalive = AP_CONN_CLOSE;\n            }\n        }\n    }\n\n    apr_brigade_destroy(tmp_bb);\n\n    /* update what we think the virtual host is based on the headers we've\n     * now read. may update status.\n     */\n    ap_update_vhost_from_headers(r);\n    access_status = r->status;\n\n    /* Toggle to the Host:-based vhost's timeout mode to fetch the\n     * request body and send the response body, if needed.\n     */\n    if (cur_timeout != r->server->timeout) {\n        apr_socket_timeout_set(csd, r->server->timeout);\n        cur_timeout = r->server->timeout;\n    }\n\n    /* we may have switched to another server */\n    r->per_dir_config = r->server->lookup_defaults;\n\n    if ((!r->hostname && (r->proto_num >= HTTP_VERSION(1, 1)))\n        || ((r->proto_num == HTTP_VERSION(1, 1))\n            && !apr_table_get(r->headers_in, \"Host\"))) {\n        /*\n         * Client sent us an HTTP/1.1 or later request without telling us the\n         * hostname, either with a full URL or a Host: header. We therefore\n         * need to (as per the 1.1 spec) send an error.  As a special case,\n         * HTTP/1.1 mentions twice (S9, S14.23) that a request MUST contain\n         * a Host: header, and the server MUST respond with 400 if it doesn't.\n         */\n        access_status = HTTP_BAD_REQUEST;\n        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00569)\n                      \"client sent HTTP/1.1 request without hostname \"\n                      \"(see RFC2616 section 14.23): %s\", r->uri);\n    }\n\n    /*\n     * Add the HTTP_IN filter here to ensure that ap_discard_request_body\n     * called by ap_die and by ap_send_error_response works correctly on\n     * status codes that do not cause the connection to be dropped and\n     * in situations where the connection should be kept alive.\n     */\n\n    ap_add_input_filter_handle(ap_http_input_filter_handle,\n                               NULL, r, r->connection);\n\n    if (access_status != HTTP_OK\n        || (access_status = ap_run_post_read_request(r))) {\n        ap_die(access_status, r);\n        ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);\n        ap_run_log_transaction(r);\n        r = NULL;\n        goto traceout;\n    }\n\n    if (((expect = apr_table_get(r->headers_in, \"Expect\")) != NULL)\n        && (expect[0] != '\\0')) {\n        /*\n         * The Expect header field was added to HTTP/1.1 after RFC 2068\n         * as a means to signal when a 100 response is desired and,\n         * unfortunately, to signal a poor man's mandatory extension that\n         * the server must understand or return 417 Expectation Failed.\n         */\n        if (ap_cstr_casecmp(expect, \"100-continue\") == 0) {\n            r->expecting_100 = 1;\n        }\n        else {\n            r->status = HTTP_EXPECTATION_FAILED;\n            ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00570)\n                          \"client sent an unrecognized expectation value of \"\n                          \"Expect: %s\", expect);\n            ap_send_error_response(r, 0);\n            ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, r);\n            ap_run_log_transaction(r);\n            goto traceout;\n        }\n    }\n\n    AP_READ_REQUEST_SUCCESS((uintptr_t)r, (char *)r->method, (char *)r->uri, (char *)r->server->defn_name, r->status);\n    return r;\n    traceout:\n    AP_READ_REQUEST_FAILURE((uintptr_t)r);\n    return r;\n}\n\n/* if a request with a body creates a subrequest, remove original request's\n * input headers which pertain to the body which has already been read.\n * out-of-line helper function for ap_set_sub_req_protocol.\n */\n\nstatic void strip_headers_request_body(request_rec *rnew)\n{\n    apr_table_unset(rnew->headers_in, \"Content-Encoding\");\n    apr_table_unset(rnew->headers_in, \"Content-Language\");\n    apr_table_unset(rnew->headers_in, \"Content-Length\");\n    apr_table_unset(rnew->headers_in, \"Content-Location\");\n    apr_table_unset(rnew->headers_in, \"Content-MD5\");\n    apr_table_unset(rnew->headers_in, \"Content-Range\");\n    apr_table_unset(rnew->headers_in, \"Content-Type\");\n    apr_table_unset(rnew->headers_in, \"Expires\");\n    apr_table_unset(rnew->headers_in, \"Last-Modified\");\n    apr_table_unset(rnew->headers_in, \"Transfer-Encoding\");\n}\n\n/*\n * A couple of other functions which initialize some of the fields of\n * a request structure, as appropriate for adjuncts of one kind or another\n * to a request in progress.  Best here, rather than elsewhere, since\n * *someone* has to set the protocol-specific fields...\n */\n\nAP_DECLARE(void) ap_set_sub_req_protocol(request_rec *rnew,\n                                         const request_rec *r)\n{\n    rnew->the_request     = r->the_request;  /* Keep original request-line */\n\n    rnew->assbackwards    = 1;   /* Don't send headers from this. */\n    rnew->no_local_copy   = 1;   /* Don't try to send HTTP_NOT_MODIFIED for a\n                                  * fragment. */\n    rnew->method          = \"GET\";\n    rnew->method_number   = M_GET;\n    rnew->protocol        = \"INCLUDED\";\n\n    rnew->status          = HTTP_OK;\n\n    rnew->headers_in      = apr_table_copy(rnew->pool, r->headers_in);\n    rnew->trailers_in     = apr_table_copy(rnew->pool, r->trailers_in);\n\n    /* did the original request have a body?  (e.g. POST w/SSI tags)\n     * if so, make sure the subrequest doesn't inherit body headers\n     */\n    if (!r->kept_body && (apr_table_get(r->headers_in, \"Content-Length\")\n        || apr_table_get(r->headers_in, \"Transfer-Encoding\"))) {\n        strip_headers_request_body(rnew);\n    }\n    rnew->subprocess_env  = apr_table_copy(rnew->pool, r->subprocess_env);\n    rnew->headers_out     = apr_table_make(rnew->pool, 5);\n    rnew->err_headers_out = apr_table_make(rnew->pool, 5);\n    rnew->trailers_out    = apr_table_make(rnew->pool, 5);\n    rnew->notes           = apr_table_make(rnew->pool, 5);\n\n    rnew->expecting_100   = r->expecting_100;\n    rnew->read_length     = r->read_length;\n    rnew->read_body       = REQUEST_NO_BODY;\n\n    rnew->main = (request_rec *) r;\n}\n\nstatic void end_output_stream(request_rec *r)\n{\n    conn_rec *c = r->connection;\n    apr_bucket_brigade *bb;\n    apr_bucket *b;\n\n    bb = apr_brigade_create(r->pool, c->bucket_alloc);\n    b = apr_bucket_eos_create(c->bucket_alloc);\n    APR_BRIGADE_INSERT_TAIL(bb, b);\n    ap_pass_brigade(r->output_filters, bb);\n}\n\nAP_DECLARE(void) ap_finalize_sub_req_protocol(request_rec *sub)\n{\n    /* tell the filter chain there is no more content coming */\n    if (!sub->eos_sent) {\n        end_output_stream(sub);\n    }\n}\n\n/* finalize_request_protocol is called at completion of sending the\n * response.  Its sole purpose is to send the terminating protocol\n * information for any wrappers around the response message body\n * (i.e., transfer encodings).  It should have been named finalize_response.\n */\nAP_DECLARE(void) ap_finalize_request_protocol(request_rec *r)\n{\n    (void) ap_discard_request_body(r);\n\n    /* tell the filter chain there is no more content coming */\n    if (!r->eos_sent) {\n        end_output_stream(r);\n    }\n}\n\n/*\n * Support for the Basic authentication protocol, and a bit for Digest.\n */\nAP_DECLARE(void) ap_note_auth_failure(request_rec *r)\n{\n    const char *type = ap_auth_type(r);\n    if (type) {\n        ap_run_note_auth_failure(r, type);\n    }\n    else {\n        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00571)\n                      \"need AuthType to note auth failure: %s\", r->uri);\n    }\n}\n\nAP_DECLARE(void) ap_note_basic_auth_failure(request_rec *r)\n{\n    ap_note_auth_failure(r);\n}\n\nAP_DECLARE(void) ap_note_digest_auth_failure(request_rec *r)\n{\n    ap_note_auth_failure(r);\n}\n\nAP_DECLARE(int) ap_get_basic_auth_pw(request_rec *r, const char **pw)\n{\n    const char *auth_line = apr_table_get(r->headers_in,\n                                          (PROXYREQ_PROXY == r->proxyreq)\n                                              ? \"Proxy-Authorization\"\n                                              : \"Authorization\");\n    const char *t;\n\n    if (!(t = ap_auth_type(r)) || ap_cstr_casecmp(t, \"Basic\"))\n        return DECLINED;\n\n    if (!ap_auth_name(r)) {\n        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00572) \n                      \"need AuthName: %s\", r->uri);\n        return HTTP_INTERNAL_SERVER_ERROR;\n    }\n\n    if (!auth_line) {\n        ap_note_auth_failure(r);\n        return HTTP_UNAUTHORIZED;\n    }\n\n    if (ap_cstr_casecmp(ap_getword(r->pool, &auth_line, ' '), \"Basic\")) {\n        /* Client tried to authenticate using wrong auth scheme */\n        ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00573)\n                      \"client used wrong authentication scheme: %s\", r->uri);\n        ap_note_auth_failure(r);\n        return HTTP_UNAUTHORIZED;\n    }\n\n    while (*auth_line == ' ' || *auth_line == '\\t') {\n        auth_line++;\n    }\n\n    t = ap_pbase64decode(r->pool, auth_line);\n    r->user = ap_getword_nulls (r->pool, &t, ':');\n    apr_table_setn(r->notes, AP_GET_BASIC_AUTH_PW_NOTE, \"1\");\n    r->ap_auth_type = \"Basic\";\n\n    *pw = t;\n\n    return OK;\n}\n\nAP_DECLARE(apr_status_t) ap_get_basic_auth_components(const request_rec *r,\n                                                      const char **username,\n                                                      const char **password)\n{\n    const char *auth_header;\n    const char *credentials;\n    const char *decoded;\n    const char *user;\n\n    auth_header = (PROXYREQ_PROXY == r->proxyreq) ? \"Proxy-Authorization\"\n                                                  : \"Authorization\";\n    credentials = apr_table_get(r->headers_in, auth_header);\n\n    if (!credentials) {\n        /* No auth header. */\n        return APR_EINVAL;\n    }\n\n    if (ap_cstr_casecmp(ap_getword(r->pool, &credentials, ' '), \"Basic\")) {\n        /* These aren't Basic credentials. */\n        return APR_EINVAL;\n    }\n\n    while (*credentials == ' ' || *credentials == '\\t') {\n        credentials++;\n    }\n\n    /* XXX Our base64 decoding functions don't actually error out if the string\n     * we give it isn't base64; they'll just silently stop and hand us whatever\n     * they've parsed up to that point.\n     *\n     * Since this function is supposed to be a drop-in replacement for the\n     * deprecated ap_get_basic_auth_pw(), don't fix this for 2.4.x.\n     */\n    decoded = ap_pbase64decode(r->pool, credentials);\n    user = ap_getword_nulls(r->pool, &decoded, ':');\n\n    if (username) {\n        *username = user;\n    }\n    if (password) {\n        *password = decoded;\n    }\n\n    return APR_SUCCESS;\n}\n\nstruct content_length_ctx {\n    int data_sent;  /* true if the C-L filter has already sent at\n                     * least one bucket on to the next output filter\n                     * for this request\n                     */\n    apr_bucket_brigade *tmpbb;\n};\n\n/* This filter computes the content length, but it also computes the number\n * of bytes sent to the client.  This means that this filter will always run\n * through all of the buckets in all brigades\n */\nAP_CORE_DECLARE_NONSTD(apr_status_t) ap_content_length_filter(\n    ap_filter_t *f,\n    apr_bucket_brigade *b)\n{\n    request_rec *r = f->r;\n    struct content_length_ctx *ctx;\n    apr_bucket *e;\n    int eos = 0;\n    apr_read_type_e eblock = APR_NONBLOCK_READ;\n\n    ctx = f->ctx;\n    if (!ctx) {\n        f->ctx = ctx = apr_palloc(r->pool, sizeof(*ctx));\n        ctx->data_sent = 0;\n        ctx->tmpbb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    }\n\n    /* Loop through the brigade to count the length. To avoid\n     * arbitrary memory consumption with morphing bucket types, this\n     * loop will stop and pass on the brigade when necessary. */\n    e = APR_BRIGADE_FIRST(b);\n    while (e != APR_BRIGADE_SENTINEL(b)) {\n        apr_status_t rv;\n\n        if (APR_BUCKET_IS_EOS(e)) {\n            eos = 1;\n            break;\n        }\n        /* For a flush bucket, fall through to pass the brigade and\n         * flush now. */\n        else if (APR_BUCKET_IS_FLUSH(e)) {\n            e = APR_BUCKET_NEXT(e);\n        }\n        /* For metadata bucket types other than FLUSH, loop. */\n        else if (APR_BUCKET_IS_METADATA(e)) {\n            e = APR_BUCKET_NEXT(e);\n            continue;\n        }\n        /* For determinate length data buckets, count the length and\n         * continue. */\n        else if (e->length != (apr_size_t)-1) {\n            r->bytes_sent += e->length;\n            e = APR_BUCKET_NEXT(e);\n            continue;\n        }\n        /* For indeterminate length data buckets, perform one read. */\n        else /* e->length == (apr_size_t)-1 */ {\n            apr_size_t len;\n            const char *ignored;\n        \n            rv = apr_bucket_read(e, &ignored, &len, eblock);\n            if ((rv != APR_SUCCESS) && !APR_STATUS_IS_EAGAIN(rv)) {\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, rv, r, APLOGNO(00574)\n                              \"ap_content_length_filter: \"\n                              \"apr_bucket_read() failed\");\n                return rv;\n            }\n            if (rv == APR_SUCCESS) {\n                eblock = APR_NONBLOCK_READ;\n                e = APR_BUCKET_NEXT(e);\n                r->bytes_sent += len;\n            }\n            else if (APR_STATUS_IS_EAGAIN(rv)) {\n                apr_bucket *flush;\n\n                /* Next read must block. */\n                eblock = APR_BLOCK_READ;\n\n                /* Ensure the last bucket to pass down is a flush if\n                 * the next read will block. */\n                flush = apr_bucket_flush_create(f->c->bucket_alloc);\n                APR_BUCKET_INSERT_BEFORE(e, flush);\n            }\n        }\n\n        /* Optimization: if the next bucket is EOS (directly after a\n         * bucket morphed to the heap, or a flush), short-cut to\n         * handle EOS straight away - allowing C-L to be determined\n         * for content which is already entirely in memory. */\n        if (e != APR_BRIGADE_SENTINEL(b) && APR_BUCKET_IS_EOS(e)) {\n            continue;\n        }\n\n        /* On reaching here, pass on everything in the brigade up to\n         * this point. */\n        apr_brigade_split_ex(b, e, ctx->tmpbb);\n        \n        rv = ap_pass_brigade(f->next, b);\n        if (rv != APR_SUCCESS) {\n            return rv;\n        }\n        else if (f->c->aborted) {\n            return APR_ECONNABORTED;\n        }\n        apr_brigade_cleanup(b);\n        APR_BRIGADE_CONCAT(b, ctx->tmpbb);\n        e = APR_BRIGADE_FIRST(b);\n        \n        ctx->data_sent = 1;\n    }\n\n    /* If we've now seen the entire response and it's otherwise\n     * okay to set the C-L in the response header, then do so now.\n     *\n     * We can only set a C-L in the response header if we haven't already\n     * sent any buckets on to the next output filter for this request.\n     */\n    if (ctx->data_sent == 0 && eos &&\n        /* don't whack the C-L if it has already been set for a HEAD\n         * by something like proxy.  the brigade only has an EOS bucket\n         * in this case, making r->bytes_sent zero.\n         *\n         * if r->bytes_sent > 0 we have a (temporary) body whose length may\n         * have been changed by a filter.  the C-L header might not have been\n         * updated so we do it here.  long term it would be cleaner to have\n         * such filters update or remove the C-L header, and just use it\n         * if present.\n         */\n        !((r->header_only || AP_STATUS_IS_HEADER_ONLY(r->status)) && r->bytes_sent == 0 &&\n            apr_table_get(r->headers_out, \"Content-Length\"))) {\n        ap_set_content_length(r, r->bytes_sent);\n    }\n\n    ctx->data_sent = 1;\n    return ap_pass_brigade(f->next, b);\n}\n\n/*\n * Send the body of a response to the client.\n */\nAP_DECLARE(apr_status_t) ap_send_fd(apr_file_t *fd, request_rec *r,\n                                    apr_off_t offset, apr_size_t len,\n                                    apr_size_t *nbytes)\n{\n    conn_rec *c = r->connection;\n    apr_bucket_brigade *bb = NULL;\n    apr_status_t rv;\n\n    bb = apr_brigade_create(r->pool, c->bucket_alloc);\n\n    apr_brigade_insert_file(bb, fd, offset, len, r->pool);\n\n    rv = ap_pass_brigade(r->output_filters, bb);\n    if (rv != APR_SUCCESS) {\n        *nbytes = 0; /* no way to tell how many were actually sent */\n    }\n    else {\n        *nbytes = len;\n    }\n\n    return rv;\n}\n\n#if APR_HAS_MMAP\n/* send data from an in-memory buffer */\nAP_DECLARE(apr_size_t) ap_send_mmap(apr_mmap_t *mm,\n                                    request_rec *r,\n                                    apr_size_t offset,\n                                    apr_size_t length)\n{\n    conn_rec *c = r->connection;\n    apr_bucket_brigade *bb = NULL;\n    apr_bucket *b;\n\n    bb = apr_brigade_create(r->pool, c->bucket_alloc);\n    b = apr_bucket_mmap_create(mm, offset, length, c->bucket_alloc);\n    APR_BRIGADE_INSERT_TAIL(bb, b);\n    ap_pass_brigade(r->output_filters, bb);\n\n    return mm->size; /* XXX - change API to report apr_status_t? */\n}\n#endif /* APR_HAS_MMAP */\n\ntypedef struct {\n    apr_bucket_brigade *bb;\n    apr_bucket_brigade *tmpbb;\n} old_write_filter_ctx;\n\nAP_CORE_DECLARE_NONSTD(apr_status_t) ap_old_write_filter(\n    ap_filter_t *f, apr_bucket_brigade *bb)\n{\n    old_write_filter_ctx *ctx = f->ctx;\n\n    AP_DEBUG_ASSERT(ctx);\n\n    if (ctx->bb != NULL) {\n        /* whatever is coming down the pipe (we don't care), we\n         * can simply insert our buffered data at the front and\n         * pass the whole bundle down the chain.\n         */\n        APR_BRIGADE_PREPEND(bb, ctx->bb);\n    }\n\n    return ap_pass_brigade(f->next, bb);\n}\n\nstatic ap_filter_t *insert_old_write_filter(request_rec *r)\n{\n    ap_filter_t *f;\n    old_write_filter_ctx *ctx;\n\n    /* future optimization: record some flags in the request_rec to\n     * say whether we've added our filter, and whether it is first.\n     */\n\n    /* this will typically exit on the first test */\n    for (f = r->output_filters; f != NULL; f = f->next) {\n        if (ap_old_write_func == f->frec)\n            break;\n    }\n\n    if (f == NULL) {\n        /* our filter hasn't been added yet */\n        ctx = apr_pcalloc(r->pool, sizeof(*ctx));\n        ctx->tmpbb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n\n        ap_add_output_filter(\"OLD_WRITE\", ctx, r, r->connection);\n        f = r->output_filters;\n    }\n\n    return f;\n}\n\nstatic apr_status_t buffer_output(request_rec *r,\n                                  const char *str, apr_size_t len)\n{\n    conn_rec *c = r->connection;\n    ap_filter_t *f;\n    old_write_filter_ctx *ctx;\n\n    if (len == 0)\n        return APR_SUCCESS;\n\n    f = insert_old_write_filter(r);\n    ctx = f->ctx;\n\n    /* if the first filter is not our buffering filter, then we have to\n     * deliver the content through the normal filter chain\n     */\n    if (f != r->output_filters) {\n        apr_status_t rv;\n        apr_bucket *b = apr_bucket_transient_create(str, len, c->bucket_alloc);\n        APR_BRIGADE_INSERT_TAIL(ctx->tmpbb, b);\n\n        rv = ap_pass_brigade(r->output_filters, ctx->tmpbb);\n        apr_brigade_cleanup(ctx->tmpbb);\n        return rv;\n    }\n\n    if (ctx->bb == NULL) {\n        ctx->bb = apr_brigade_create(r->pool, c->bucket_alloc);\n    }\n\n    return ap_fwrite(f->next, ctx->bb, str, len);\n}\n\nAP_DECLARE(int) ap_rputc(int c, request_rec *r)\n{\n    char c2 = (char)c;\n\n    if (r->connection->aborted) {\n        return -1;\n    }\n\n    if (buffer_output(r, &c2, 1) != APR_SUCCESS)\n        return -1;\n\n    return c;\n}\n\nAP_DECLARE(int) ap_rwrite(const void *buf, int nbyte, request_rec *r)\n{\n    if (r->connection->aborted)\n        return -1;\n\n    if (buffer_output(r, buf, nbyte) != APR_SUCCESS)\n        return -1;\n\n    return nbyte;\n}\n\nstruct ap_vrprintf_data {\n    apr_vformatter_buff_t vbuff;\n    request_rec *r;\n    char *buff;\n};\n\n/* Flush callback for apr_vformatter; returns -1 on error. */\nstatic int r_flush(apr_vformatter_buff_t *buff)\n{\n    /* callback function passed to ap_vformatter to be called when\n     * vformatter needs to write into buff and buff.curpos > buff.endpos */\n\n    /* ap_vrprintf_data passed as a apr_vformatter_buff_t, which is then\n     * \"downcast\" to an ap_vrprintf_data */\n    struct ap_vrprintf_data *vd = (struct ap_vrprintf_data*)buff;\n\n    if (vd->r->connection->aborted)\n        return -1;\n\n    /* r_flush is called when vbuff is completely full */\n    if (buffer_output(vd->r, vd->buff, AP_IOBUFSIZE)) {\n        return -1;\n    }\n\n    /* reset the buffer position */\n    vd->vbuff.curpos = vd->buff;\n    vd->vbuff.endpos = vd->buff + AP_IOBUFSIZE;\n\n    return 0;\n}\n\nAP_DECLARE(int) ap_vrprintf(request_rec *r, const char *fmt, va_list va)\n{\n    int written;\n    struct ap_vrprintf_data vd;\n    char vrprintf_buf[AP_IOBUFSIZE];\n\n    vd.vbuff.curpos = vrprintf_buf;\n    vd.vbuff.endpos = vrprintf_buf + AP_IOBUFSIZE;\n    vd.r = r;\n    vd.buff = vrprintf_buf;\n\n    if (r->connection->aborted)\n        return -1;\n\n    written = apr_vformatter(r_flush, &vd.vbuff, fmt, va);\n\n    if (written != -1) {\n        int n = vd.vbuff.curpos - vrprintf_buf;\n\n        /* last call to buffer_output, to finish clearing the buffer */\n        if (buffer_output(r, vrprintf_buf, n) != APR_SUCCESS)\n            return -1;\n\n        written += n;\n    }\n\n    return written;\n}\n\nAP_DECLARE_NONSTD(int) ap_rprintf(request_rec *r, const char *fmt, ...)\n{\n    va_list va;\n    int n;\n\n    if (r->connection->aborted)\n        return -1;\n\n    va_start(va, fmt);\n    n = ap_vrprintf(r, fmt, va);\n    va_end(va);\n\n    return n;\n}\n\nAP_DECLARE_NONSTD(int) ap_rvputs(request_rec *r, ...)\n{\n    va_list va;\n    const char *s;\n    apr_size_t len;\n    apr_size_t written = 0;\n\n    if (r->connection->aborted)\n        return -1;\n\n    /* ### TODO: if the total output is large, put all the strings\n     * ### into a single brigade, rather than flushing each time we\n     * ### fill the buffer\n     */\n    va_start(va, r);\n    while (1) {\n        s = va_arg(va, const char *);\n        if (s == NULL)\n            break;\n\n        len = strlen(s);\n        if (buffer_output(r, s, len) != APR_SUCCESS) {\n            va_end(va);\n            return -1;\n        }\n\n        written += len;\n    }\n    va_end(va);\n\n    return written;\n}\n\nAP_DECLARE(int) ap_rflush(request_rec *r)\n{\n    conn_rec *c = r->connection;\n    apr_bucket *b;\n    ap_filter_t *f;\n    old_write_filter_ctx *ctx;\n    apr_status_t rv;\n\n    f = insert_old_write_filter(r);\n    ctx = f->ctx;\n\n    b = apr_bucket_flush_create(c->bucket_alloc);\n    APR_BRIGADE_INSERT_TAIL(ctx->tmpbb, b);\n\n    rv = ap_pass_brigade(r->output_filters, ctx->tmpbb);\n    apr_brigade_cleanup(ctx->tmpbb);\n    if (rv != APR_SUCCESS)\n        return -1;\n\n    return 0;\n}\n\n/*\n * This function sets the Last-Modified output header field to the value\n * of the mtime field in the request structure - rationalized to keep it from\n * being in the future.\n */\nAP_DECLARE(void) ap_set_last_modified(request_rec *r)\n{\n    if (!r->assbackwards) {\n        apr_time_t mod_time = ap_rationalize_mtime(r, r->mtime);\n        char *datestr = apr_palloc(r->pool, APR_RFC822_DATE_LEN);\n\n        apr_rfc822_date(datestr, mod_time);\n        apr_table_setn(r->headers_out, \"Last-Modified\", datestr);\n    }\n}\n\ntypedef struct hdr_ptr {\n    ap_filter_t *f;\n    apr_bucket_brigade *bb;\n} hdr_ptr;\n \n#if APR_CHARSET_EBCDIC\nstatic int send_header(void *data, const char *key, const char *val)\n{\n    char *header_line = NULL;\n    hdr_ptr *hdr = (hdr_ptr*)data;\n\n    header_line = apr_pstrcat(hdr->bb->p, key, \": \", val, CRLF, NULL);\n    ap_xlate_proto_to_ascii(header_line, strlen(header_line));\n    ap_fputs(hdr->f, hdr->bb, header_line);\n    return 1;\n}\n#else\nstatic int send_header(void *data, const char *key, const char *val)\n{\n     ap_fputstrs(((hdr_ptr*)data)->f, ((hdr_ptr*)data)->bb,\n                 key, \": \", val, CRLF, NULL);\n     return 1;\n }\n#endif\n\nAP_DECLARE(void) ap_send_interim_response(request_rec *r, int send_headers)\n{\n    hdr_ptr x;\n    char *response_line = NULL;\n    const char *status_line;\n    request_rec *rr;\n\n    if (r->proto_num < HTTP_VERSION(1,1)) {\n        /* don't send interim response to HTTP/1.0 Client */\n        return;\n    }\n    if (!ap_is_HTTP_INFO(r->status)) {\n        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00575)\n                      \"Status is %d - not sending interim response\", r->status);\n        return;\n    }\n    if (r->status == HTTP_CONTINUE) {\n        if (!r->expecting_100) {\n            /*\n             * Don't send 100-Continue when there was no Expect: 100-continue\n             * in the request headers. For origin servers this is a SHOULD NOT\n             * for proxies it is a MUST NOT according to RFC 2616 8.2.3\n             */\n            return;\n        }\n\n        /* if we send an interim response, we're no longer in a state of\n         * expecting one.  Also, this could feasibly be in a subrequest,\n         * so we need to propagate the fact that we responded.\n         */\n        for (rr = r; rr != NULL; rr = rr->main) {\n            rr->expecting_100 = 0;\n        }\n    }\n\n    status_line = r->status_line;\n    if (status_line == NULL) {\n        status_line = ap_get_status_line_ex(r->pool, r->status);\n    }\n    response_line = apr_pstrcat(r->pool,\n                                AP_SERVER_PROTOCOL \" \", status_line, CRLF,\n                                NULL);\n    ap_xlate_proto_to_ascii(response_line, strlen(response_line));\n\n    x.f = r->connection->output_filters;\n    x.bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n\n    ap_fputs(x.f, x.bb, response_line);\n    if (send_headers) {\n        apr_table_do(send_header, &x, r->headers_out, NULL);\n        apr_table_clear(r->headers_out);\n    }\n    ap_fputs(x.f, x.bb, CRLF_ASCII);\n    ap_fflush(x.f, x.bb);\n    apr_brigade_destroy(x.bb);\n}\n\n/*\n * Compare two protocol identifier. Result is similar to strcmp():\n * 0 gives same precedence, >0 means proto1 is preferred.\n */\nstatic int protocol_cmp(const apr_array_header_t *preferences,\n                        const char *proto1,\n                        const char *proto2)\n{\n    if (preferences && preferences->nelts > 0) {\n        int index1 = ap_array_str_index(preferences, proto1, 0);\n        int index2 = ap_array_str_index(preferences, proto2, 0);\n        if (index2 > index1) {\n            return (index1 >= 0) ? 1 : -1;\n        }\n        else if (index1 > index2) {\n            return (index2 >= 0) ? -1 : 1;\n        }\n    }\n    /* both have the same index (maybe -1 or no pref configured) and we compare\n     * the names so that spdy3 gets precedence over spdy2. That makes\n     * the outcome at least deterministic. */\n    return strcmp(proto1, proto2);\n}\n\nAP_DECLARE(const char *) ap_get_protocol(conn_rec *c)\n{\n    const char *protocol = ap_run_protocol_get(c);\n    return protocol? protocol : AP_PROTOCOL_HTTP1;\n}\n\nAP_DECLARE(apr_status_t) ap_get_protocol_upgrades(conn_rec *c, request_rec *r, \n                                                  server_rec *s, int report_all, \n                                                  const apr_array_header_t **pupgrades)\n{\n    apr_pool_t *pool = r? r->pool : c->pool;\n    core_server_config *conf;\n    const char *existing;\n    apr_array_header_t *upgrades = NULL;\n\n    if (!s) {\n        s = (r? r->server : c->base_server);\n    }\n    conf = ap_get_core_module_config(s->module_config);\n    \n    if (conf->protocols->nelts > 0) {\n        existing = ap_get_protocol(c);\n        if (conf->protocols->nelts > 1 \n            || !ap_array_str_contains(conf->protocols, existing)) {\n            int i;\n            \n            /* possibly more than one choice or one, but not the\n             * existing. (TODO: maybe 426 and Upgrade then?) */\n            upgrades = apr_array_make(pool, conf->protocols->nelts + 1, \n                                      sizeof(char *));\n            for (i = 0; i < conf->protocols->nelts; i++) {\n                const char *p = APR_ARRAY_IDX(conf->protocols, i, char *);\n                if (strcmp(existing, p)) {\n                    /* not the one we have and possible, add in this order */\n                    APR_ARRAY_PUSH(upgrades, const char*) = p;\n                }\n                else if (!report_all) {\n                    break;\n                }\n            }\n        }\n    }\n    \n    *pupgrades = upgrades;\n    return APR_SUCCESS;\n}\n\nAP_DECLARE(const char *) ap_select_protocol(conn_rec *c, request_rec *r, \n                                            server_rec *s,\n                                            const apr_array_header_t *choices)\n{\n    apr_pool_t *pool = r? r->pool : c->pool;\n    core_server_config *conf;\n    const char *protocol = NULL, *existing;\n    apr_array_header_t *proposals;\n\n    if (!s) {\n        s = (r? r->server : c->base_server);\n    }\n    conf = ap_get_core_module_config(s->module_config);\n    \n    if (APLOGcdebug(c)) {\n        const char *p = apr_array_pstrcat(pool, conf->protocols, ',');\n        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, c, APLOGNO(03155) \n                      \"select protocol from %s, choices=%s for server %s\", \n                      p, apr_array_pstrcat(pool, choices, ','),\n                      s->server_hostname);\n    }\n\n    if (conf->protocols->nelts <= 0) {\n        /* nothing configured, by default, we only allow http/1.1 here.\n         * For now...\n         */\n        if (ap_array_str_contains(choices, AP_PROTOCOL_HTTP1)) {\n            return AP_PROTOCOL_HTTP1;\n        }\n        else {\n            return NULL;\n        }\n    }\n\n    proposals = apr_array_make(pool, choices->nelts + 1, sizeof(char *));\n    ap_run_protocol_propose(c, r, s, choices, proposals);\n\n    /* If the existing protocol has not been proposed, but is a choice,\n     * add it to the proposals implicitly.\n     */\n    existing = ap_get_protocol(c);\n    if (!ap_array_str_contains(proposals, existing)\n        && ap_array_str_contains(choices, existing)) {\n        APR_ARRAY_PUSH(proposals, const char*) = existing;\n    }\n\n    if (proposals->nelts > 0) {\n        int i;\n        const apr_array_header_t *prefs = NULL;\n\n        /* Default for protocols_honor_order is 'on' or != 0 */\n        if (conf->protocols_honor_order == 0 && choices->nelts > 0) {\n            prefs = choices;\n        }\n        else {\n            prefs = conf->protocols;\n        }\n\n        /* Select the most preferred protocol */\n        if (APLOGcdebug(c)) {\n            ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, c, APLOGNO(03156) \n                          \"select protocol, proposals=%s preferences=%s configured=%s\", \n                          apr_array_pstrcat(pool, proposals, ','),\n                          apr_array_pstrcat(pool, prefs, ','),\n                          apr_array_pstrcat(pool, conf->protocols, ','));\n        }\n        for (i = 0; i < proposals->nelts; ++i) {\n            const char *p = APR_ARRAY_IDX(proposals, i, const char *);\n            if (!ap_array_str_contains(conf->protocols, p)) {\n                /* not a configured protocol here */\n                continue;\n            }\n            else if (!protocol \n                     || (protocol_cmp(prefs, protocol, p) < 0)) {\n                /* none selected yet or this one has preference */\n                protocol = p;\n            }\n        }\n    }\n    if (APLOGcdebug(c)) {\n        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, c, APLOGNO(03157)\n                      \"selected protocol=%s\", \n                      protocol? protocol : \"(none)\");\n    }\n\n    return protocol;\n}\n\nAP_DECLARE(apr_status_t) ap_switch_protocol(conn_rec *c, request_rec *r, \n                                            server_rec *s,\n                                            const char *protocol)\n{\n    const char *current = ap_get_protocol(c);\n    int rc;\n    \n    if (!strcmp(current, protocol)) {\n        ap_log_cerror(APLOG_MARK, APLOG_WARNING, 0, c, APLOGNO(02906)\n                      \"already at it, protocol_switch to %s\", \n                      protocol);\n        return APR_SUCCESS;\n    }\n    \n    rc = ap_run_protocol_switch(c, r, s, protocol);\n    switch (rc) {\n        case DECLINED:\n            ap_log_cerror(APLOG_MARK, APLOG_ERR, 0, c, APLOGNO(02907)\n                          \"no implementation for protocol_switch to %s\", \n                          protocol);\n            return APR_ENOTIMPL;\n        case OK:\n        case DONE:\n            return APR_SUCCESS;\n        default:\n            ap_log_cerror(APLOG_MARK, APLOG_ERR, 0, c, APLOGNO(02905)\n                          \"unexpected return code %d from protocol_switch to %s\"\n                          , rc, protocol);\n            return APR_EOF;\n    }    \n}\n\nAP_DECLARE(int) ap_is_allowed_protocol(conn_rec *c, request_rec *r,\n                                       server_rec *s, const char *protocol)\n{\n    core_server_config *conf;\n\n    if (!s) {\n        s = (r? r->server : c->base_server);\n    }\n    conf = ap_get_core_module_config(s->module_config);\n    \n    if (conf->protocols->nelts > 0) {\n        return ap_array_str_contains(conf->protocols, protocol);\n    }\n    return !strcmp(AP_PROTOCOL_HTTP1, protocol);\n}\n\n\nAP_IMPLEMENT_HOOK_VOID(pre_read_request,\n                       (request_rec *r, conn_rec *c),\n                       (r, c))\nAP_IMPLEMENT_HOOK_RUN_ALL(int,post_read_request,\n                          (request_rec *r), (r), OK, DECLINED)\nAP_IMPLEMENT_HOOK_RUN_ALL(int,log_transaction,\n                          (request_rec *r), (r), OK, DECLINED)\nAP_IMPLEMENT_HOOK_RUN_FIRST(const char *,http_scheme,\n                            (const request_rec *r), (r), NULL)\nAP_IMPLEMENT_HOOK_RUN_FIRST(unsigned short,default_port,\n                            (const request_rec *r), (r), 0)\nAP_IMPLEMENT_HOOK_RUN_FIRST(int, note_auth_failure,\n                            (request_rec *r, const char *auth_type),\n                            (r, auth_type), DECLINED)\nAP_IMPLEMENT_HOOK_RUN_ALL(int,protocol_propose,\n                          (conn_rec *c, request_rec *r, server_rec *s,\n                           const apr_array_header_t *offers,\n                           apr_array_header_t *proposals), \n                          (c, r, s, offers, proposals), OK, DECLINED)\nAP_IMPLEMENT_HOOK_RUN_FIRST(int,protocol_switch,\n                            (conn_rec *c, request_rec *r, server_rec *s,\n                             const char *protocol), \n                            (c, r, s, protocol), DECLINED)\nAP_IMPLEMENT_HOOK_RUN_FIRST(const char *,protocol_get,\n                            (const conn_rec *c), (c), NULL)\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  vhost.c\n * @brief functions pertaining to virtual host addresses\n *        (configuration and run-time)\n */\n\n#include \"apr.h\"\n#include \"apr_strings.h\"\n#include \"apr_lib.h\"\n\n#define APR_WANT_STRFUNC\n#include \"apr_want.h\"\n\n#include \"ap_config.h\"\n#include \"httpd.h\"\n#include \"http_config.h\"\n#include \"http_log.h\"\n#include \"http_vhost.h\"\n#include \"http_protocol.h\"\n#include \"http_core.h\"\n\n#if APR_HAVE_ARPA_INET_H\n#include <arpa/inet.h>\n#endif\n\n/* we know core's module_index is 0 */\n#undef APLOG_MODULE_INDEX\n#define APLOG_MODULE_INDEX AP_CORE_MODULE_INDEX\n\n/*\n * After all the definitions there's an explanation of how it's all put\n * together.\n */\n\n/* meta-list of name-vhosts.  Each server_rec can be in possibly multiple\n * lists of name-vhosts.\n */\ntypedef struct name_chain name_chain;\nstruct name_chain {\n    name_chain *next;\n    server_addr_rec *sar;       /* the record causing it to be in\n                                 * this chain (needed for port comparisons) */\n    server_rec *server;         /* the server to use on a match */\n};\n\n/* meta-list of ip addresses.  Each server_rec can be in possibly multiple\n * hash chains since it can have multiple ips.\n */\ntypedef struct ipaddr_chain ipaddr_chain;\nstruct ipaddr_chain {\n    ipaddr_chain *next;\n    server_addr_rec *sar;       /* the record causing it to be in\n                                 * this chain (need for both ip addr and port\n                                 * comparisons) */\n    server_rec *server;         /* the server to use if this matches */\n    name_chain *names;          /* if non-NULL then a list of name-vhosts\n                                 * sharing this address */\n    name_chain *initialnames;   /* no runtime use, temporary storage of first\n                                 * NVH'es names */\n};\n\n/* This defines the size of the hash table used for hashing ip addresses\n * of virtual hosts.  It must be a power of two.\n */\n#ifndef IPHASH_TABLE_SIZE\n#define IPHASH_TABLE_SIZE 256\n#endif\n\n/* A (n) bucket hash table, each entry has a pointer to a server rec and\n * a pointer to the other entries in that bucket.  Each individual address,\n * even for virtualhosts with multiple addresses, has an entry in this hash\n * table.  There are extra buckets for _default_, and name-vhost entries.\n *\n * Note that after config time this is constant, so it is thread-safe.\n */\nstatic ipaddr_chain *iphash_table[IPHASH_TABLE_SIZE];\n\n/* dump out statistics about the hash function */\n/* #define IPHASH_STATISTICS */\n\n/* list of the _default_ servers */\nstatic ipaddr_chain *default_list;\n\n/* whether a config error was seen */\nstatic int config_error = 0;\n\n/* config check function */\nstatic int vhost_check_config(apr_pool_t *p, apr_pool_t *plog,\n                              apr_pool_t *ptemp, server_rec *s);\n\n/*\n * How it's used:\n *\n * The ip address determines which chain in iphash_table is interesting, then\n * a comparison is done down that chain to find the first ipaddr_chain whose\n * sar matches the address:port pair.\n *\n * If that ipaddr_chain has names == NULL then you're done, it's an ip-vhost.\n *\n * Otherwise it's a name-vhost list, and the default is the server in the\n * ipaddr_chain record.  We tuck away the ipaddr_chain record in the\n * conn_rec field vhost_lookup_data.  Later on after the headers we get a\n * second chance, and we use the name_chain to figure out what name-vhost\n * matches the headers.\n *\n * If there was no ip address match in the iphash_table then do a lookup\n * in the default_list.\n *\n * How it's put together ... well you should be able to figure that out\n * from how it's used.  Or something like that.\n */\n\n\n/* called at the beginning of the config */\nAP_DECLARE(void) ap_init_vhost_config(apr_pool_t *p)\n{\n    memset(iphash_table, 0, sizeof(iphash_table));\n    default_list = NULL;\n    ap_hook_check_config(vhost_check_config, NULL, NULL, APR_HOOK_MIDDLE);\n}\n\n\n/*\n * Parses a host of the form <address>[:port]\n * paddr is used to create a list in the order of input\n * **paddr is the ->next pointer of the last entry (or s->addrs)\n * *paddr is the variable used to keep track of **paddr between calls\n * port is the default port to assume\n */\nstatic const char *get_addresses(apr_pool_t *p, const char *w_,\n                                 server_addr_rec ***paddr,\n                                 apr_port_t default_port)\n{\n    apr_sockaddr_t *my_addr;\n    server_addr_rec *sar;\n    char *w, *host, *scope_id;\n    int wild_port;\n    apr_size_t wlen;\n    apr_port_t port;\n    apr_status_t rv;\n\n    if (*w_ == '\\0')\n        return NULL;\n\n    wlen = strlen(w_);                   /* wlen must be > 0 at this point */\n    w = apr_pstrmemdup(p, w_, wlen);\n    /* apr_parse_addr_port() doesn't understand \":*\" so handle that first. */\n    wild_port = 0;\n    if (w[wlen - 1] == '*') {\n        if (wlen < 2) {\n            wild_port = 1;\n        }\n        else if (w[wlen - 2] == ':') {\n            w[wlen - 2] = '\\0';\n            wild_port = 1;\n        }\n    }\n    rv = apr_parse_addr_port(&host, &scope_id, &port, w, p);\n    /* If the string is \"80\", apr_parse_addr_port() will be happy and set\n     * host to NULL and port to 80, so watch out for that.\n     */\n    if (rv != APR_SUCCESS) {\n        return \"The address or port is invalid\";\n    }\n    if (!host) {\n        return \"Missing address for VirtualHost\";\n    }\n    if (scope_id) {\n        return \"Scope ids are not supported\";\n    }\n    if (!port && !wild_port) {\n        port = default_port;\n    }\n\n    if (strcmp(host, \"*\") == 0 || strcasecmp(host, \"_default_\") == 0) {\n        rv = apr_sockaddr_info_get(&my_addr, NULL, APR_UNSPEC, port, 0, p);\n        if (rv) {\n            return \"Could not determine a wildcard address ('0.0.0.0') -- \"\n                \"check resolver configuration.\";\n        }\n    }\n    else {\n        rv = apr_sockaddr_info_get(&my_addr, host, APR_UNSPEC, port, 0, p);\n        if (rv != APR_SUCCESS) {\n            ap_log_error(APLOG_MARK, APLOG_ERR, rv, NULL, APLOGNO(00547)\n                \"Could not resolve host name %s -- ignoring!\", host);\n            return NULL;\n        }\n    }\n\n    /* Remember all addresses for the host */\n\n    do {\n        sar = apr_pcalloc(p, sizeof(server_addr_rec));\n        **paddr = sar;\n        *paddr = &sar->next;\n        sar->host_addr = my_addr;\n        sar->host_port = port;\n        sar->virthost = host;\n        my_addr = my_addr->next;\n    } while (my_addr);\n\n    return NULL;\n}\n\n\n/* parse the <VirtualHost> addresses */\nconst char *ap_parse_vhost_addrs(apr_pool_t *p,\n                                 const char *hostname,\n                                 server_rec *s)\n{\n    server_addr_rec **addrs;\n    const char *err;\n\n    /* start the list of addresses */\n    addrs = &s->addrs;\n    while (hostname[0]) {\n        err = get_addresses(p, ap_getword_conf(p, &hostname), &addrs, s->port);\n        if (err) {\n            *addrs = NULL;\n            return err;\n        }\n    }\n    /* terminate the list */\n    *addrs = NULL;\n    if (s->addrs) {\n        if (s->addrs->host_port) {\n            /* override the default port which is inherited from main_server */\n            s->port = s->addrs->host_port;\n        }\n    }\n    return NULL;\n}\n\n\nAP_DECLARE_NONSTD(const char *)ap_set_name_virtual_host(cmd_parms *cmd,\n                                                        void *dummy,\n                                                        const char *arg)\n{\n    static int warnonce = 0;\n    if (++warnonce == 1) {\n        ap_log_error(APLOG_MARK, APLOG_NOTICE|APLOG_STARTUP, APR_SUCCESS, NULL, APLOGNO(00548)\n                     \"NameVirtualHost has no effect and will be removed in the \"\n                     \"next release %s:%d\",\n                     cmd->directive->filename,\n                     cmd->directive->line_num);\n    }\n\n    return NULL;\n}\n\n\n/* hash table statistics, keep this in here for the beta period so\n * we can find out if the hash function is ok\n */\n#ifdef IPHASH_STATISTICS\nstatic int iphash_compare(const void *a, const void *b)\n{\n    return (*(const int *) b - *(const int *) a);\n}\n\n\nstatic void dump_iphash_statistics(server_rec *main_s)\n{\n    unsigned count[IPHASH_TABLE_SIZE];\n    int i;\n    ipaddr_chain *src;\n    unsigned total;\n    char buf[HUGE_STRING_LEN];\n    char *p;\n\n    total = 0;\n    for (i = 0; i < IPHASH_TABLE_SIZE; ++i) {\n        count[i] = 0;\n        for (src = iphash_table[i]; src; src = src->next) {\n            ++count[i];\n            if (i < IPHASH_TABLE_SIZE) {\n                /* don't count the slop buckets in the total */\n                ++total;\n            }\n        }\n    }\n    qsort(count, IPHASH_TABLE_SIZE, sizeof(count[0]), iphash_compare);\n    p = buf + apr_snprintf(buf, sizeof(buf),\n                           APLOGNO(03235) \"iphash: total hashed = %u, avg chain = %u, \"\n                           \"chain lengths (count x len):\",\n                           total, total / IPHASH_TABLE_SIZE);\n    total = 1;\n    for (i = 1; i < IPHASH_TABLE_SIZE; ++i) {\n        if (count[i - 1] != count[i]) {\n            p += apr_snprintf(p, sizeof(buf) - (p - buf), \" %ux%u\",\n                              total, count[i - 1]);\n            total = 1;\n        }\n        else {\n            ++total;\n        }\n    }\n    p += apr_snprintf(p, sizeof(buf) - (p - buf), \" %ux%u\",\n                      total, count[IPHASH_TABLE_SIZE - 1]);\n    /* Intentional no APLOGNO */\n    /* buf provides APLOGNO */\n    ap_log_error(APLOG_MARK, APLOG_DEBUG, main_s, buf);\n}\n#endif\n\n\n/* This hashing function is designed to get good distribution in the cases\n * where the server is handling entire \"networks\" of servers.  i.e. a\n * whack of /24s.  This is probably the most common configuration for\n * ISPs with large virtual servers.\n *\n * NOTE: This function is symmetric (i.e. collapses all 4 octets\n * into one), so machine byte order (big/little endianness) does not matter.\n *\n * Hash function provided by David Hankins.\n */\nstatic APR_INLINE unsigned hash_inaddr(unsigned key)\n{\n    key ^= (key >> 16);\n    return ((key >> 8) ^ key) % IPHASH_TABLE_SIZE;\n}\n\nstatic APR_INLINE unsigned hash_addr(struct apr_sockaddr_t *sa)\n{\n    unsigned key;\n\n    /* The key is the last four bytes of the IP address.\n     * For IPv4, this is the entire address, as always.\n     * For IPv6, this is usually part of the MAC address.\n     */\n    key = *(unsigned *)((char *)sa->ipaddr_ptr + sa->ipaddr_len - 4);\n    return hash_inaddr(key);\n}\n\nstatic ipaddr_chain *new_ipaddr_chain(apr_pool_t *p,\n                                      server_rec *s, server_addr_rec *sar)\n{\n    ipaddr_chain *new;\n\n    new = apr_palloc(p, sizeof(*new));\n    new->names = NULL;\n    new->initialnames = NULL;\n    new->server = s;\n    new->sar = sar;\n    new->next = NULL;\n    return new;\n}\n\n\nstatic name_chain *new_name_chain(apr_pool_t *p,\n                                  server_rec *s, server_addr_rec *sar)\n{\n    name_chain *new;\n\n    new = apr_palloc(p, sizeof(*new));\n    new->server = s;\n    new->sar = sar;\n    new->next = NULL;\n    return new;\n}\n\n\nstatic APR_INLINE ipaddr_chain *find_ipaddr(apr_sockaddr_t *sa)\n{\n    unsigned bucket;\n    ipaddr_chain *trav = NULL;\n    ipaddr_chain *wild_match = NULL;\n\n    /* scan the hash table for an exact match first */\n    bucket = hash_addr(sa);\n    for (trav = iphash_table[bucket]; trav; trav = trav->next) {\n        server_addr_rec *sar = trav->sar;\n        apr_sockaddr_t *cur = sar->host_addr;\n\n        if (cur->port == sa->port) {\n            if (apr_sockaddr_equal(cur, sa)) {\n                return trav;\n            }\n        }\n        if (wild_match == NULL && (cur->port == 0 || sa->port == 0)) {\n            if (apr_sockaddr_equal(cur, sa)) {\n                /* don't break, continue looking for an exact match */\n                wild_match = trav;\n            }\n        }\n    }\n    return wild_match;\n}\n\nstatic ipaddr_chain *find_default_server(apr_port_t port)\n{\n    server_addr_rec *sar;\n    ipaddr_chain *trav = NULL;\n    ipaddr_chain *wild_match = NULL;\n\n    for (trav = default_list; trav; trav = trav->next) {\n        sar = trav->sar;\n        if (sar->host_port == port) {\n            /* match! */\n            return trav;\n        }\n        if (wild_match == NULL && sar->host_port == 0) {\n            /* don't break, continue looking for an exact match */\n            wild_match = trav;\n        }\n    }\n    return wild_match;\n}\n\n#if APR_HAVE_IPV6\n#define IS_IN6_ANYADDR(ad) ((ad)->family == APR_INET6                   \\\n                            && IN6_IS_ADDR_UNSPECIFIED(&(ad)->sa.sin6.sin6_addr))\n#else\n#define IS_IN6_ANYADDR(ad) (0)\n#endif\n\nstatic void dump_a_vhost(apr_file_t *f, ipaddr_chain *ic)\n{\n    name_chain *nc;\n    int len;\n    char buf[MAX_STRING_LEN];\n    apr_sockaddr_t *ha = ic->sar->host_addr;\n\n    if ((ha->family == APR_INET && ha->sa.sin.sin_addr.s_addr == INADDR_ANY)\n        || IS_IN6_ANYADDR(ha)) {\n        len = apr_snprintf(buf, sizeof(buf), \"*:%u\",\n                           ic->sar->host_port);\n    }\n    else {\n        len = apr_snprintf(buf, sizeof(buf), \"%pI\", ha);\n    }\n    if (ic->sar->host_port == 0) {\n        buf[len-1] = '*';\n    }\n    if (ic->names == NULL) {\n        apr_file_printf(f, \"%-22s %s (%s:%u)\\n\", buf,\n                        ic->server->server_hostname,\n                        ic->server->defn_name, ic->server->defn_line_number);\n        return;\n    }\n    apr_file_printf(f, \"%-22s is a NameVirtualHost\\n\"\n                    \"%8s default server %s (%s:%u)\\n\",\n                    buf, \"\", ic->server->server_hostname,\n                    ic->server->defn_name, ic->server->defn_line_number);\n    for (nc = ic->names; nc; nc = nc->next) {\n        if (nc->sar->host_port) {\n            apr_file_printf(f, \"%8s port %u \", \"\", nc->sar->host_port);\n        }\n        else {\n            apr_file_printf(f, \"%8s port * \", \"\");\n        }\n        apr_file_printf(f, \"namevhost %s (%s:%u)\\n\",\n                        nc->server->server_hostname,\n                        nc->server->defn_name, nc->server->defn_line_number);\n        if (nc->server->names) {\n            apr_array_header_t *names = nc->server->names;\n            char **name = (char **)names->elts;\n            int i;\n            for (i = 0; i < names->nelts; ++i) {\n                if (name[i]) {\n                    apr_file_printf(f, \"%16s alias %s\\n\", \"\", name[i]);\n                }\n            }\n        }\n        if (nc->server->wild_names) {\n            apr_array_header_t *names = nc->server->wild_names;\n            char **name = (char **)names->elts;\n            int i;\n            for (i = 0; i < names->nelts; ++i) {\n                if (name[i]) {\n                    apr_file_printf(f, \"%16s wild alias %s\\n\", \"\", name[i]);\n                }\n            }\n        }\n    }\n}\n\nstatic void dump_vhost_config(apr_file_t *f)\n{\n    ipaddr_chain *ic;\n    int i;\n\n    apr_file_printf(f, \"VirtualHost configuration:\\n\");\n\n    /* non-wildcard servers */\n    for (i = 0; i < IPHASH_TABLE_SIZE; ++i) {\n        for (ic = iphash_table[i]; ic; ic = ic->next) {\n            dump_a_vhost(f, ic);\n        }\n    }\n\n    /* wildcard servers */\n    for (ic = default_list; ic; ic = ic->next) {\n        dump_a_vhost(f, ic);\n    }\n}\n\n\n/*\n * When a second or later virtual host maps to the same IP chain,\n * add the relevant server names to the chain.  Special care is taken\n * to avoid adding ic->names until we're sure there are multiple VH'es.\n */\nstatic void add_name_vhost_config(apr_pool_t *p, server_rec *main_s,\n                                 server_rec *s, server_addr_rec *sar,\n                                 ipaddr_chain *ic)\n{\n\n   name_chain *nc = new_name_chain(p, s, sar);\n   nc->next = ic->names;\n\n   /* iterating backwards, so each one we see becomes the current default server */\n   ic->server = s;\n\n   if (ic->names == NULL) {\n       if (ic->initialnames == NULL) {\n           /* first pass, set these names aside in case we see another VH.\n            * Until then, this looks like an IP-based VH to runtime.\n            */\n           ic->initialnames = nc;\n       }\n       else {\n           /* second pass through this chain -- this really is an NVH, and we\n            * have two sets of names to link in.\n            */\n           nc->next = ic->initialnames;\n           ic->names = nc;\n           ic->initialnames = NULL;\n       }\n   }\n   else {\n       /* 3rd or more -- just keep stacking the names */\n       ic->names = nc;\n   }\n}\n\n/* compile the tables and such we need to do the run-time vhost lookups */\nAP_DECLARE(void) ap_fini_vhost_config(apr_pool_t *p, server_rec *main_s)\n{\n    server_addr_rec *sar;\n    int has_default_vhost_addr;\n    server_rec *s;\n    int i;\n    ipaddr_chain **iphash_table_tail[IPHASH_TABLE_SIZE];\n\n    /* Main host first */\n    s = main_s;\n\n    if (!s->server_hostname) {\n        s->server_hostname = ap_get_local_host(p);\n    }\n\n    /* initialize the tails */\n    for (i = 0; i < IPHASH_TABLE_SIZE; ++i) {\n        iphash_table_tail[i] = &iphash_table[i];\n    }\n\n    /* The next things to go into the hash table are the virtual hosts\n     * themselves.  They're listed off of main_s->next in the reverse\n     * order they occurred in the config file, so we insert them at\n     * the iphash_table_tail but don't advance the tail.\n     */\n\n    for (s = main_s->next; s; s = s->next) {\n        server_addr_rec *sar_prev = NULL;\n        has_default_vhost_addr = 0;\n        for (sar = s->addrs; sar; sar = sar->next) {\n            ipaddr_chain *ic;\n            char inaddr_any[16] = {0}; /* big enough to handle IPv4 or IPv6 */\n            /* XXX: this treats 0.0.0.0 as a \"default\" server which matches no-exact-match for IPv6 */\n            if (!memcmp(sar->host_addr->ipaddr_ptr, inaddr_any, sar->host_addr->ipaddr_len)) {\n                ic = find_default_server(sar->host_port);\n\n                if (ic && sar->host_port == ic->sar->host_port) { /* we're a match for an existing \"default server\"  */\n                    if (!sar_prev || memcmp(sar_prev->host_addr->ipaddr_ptr, inaddr_any, sar_prev->host_addr->ipaddr_len)\n                                  || sar_prev->host_port != sar->host_port) { \n                        add_name_vhost_config(p, main_s, s, sar, ic);\n                    }\n                }\n                else { \n                    /* No default server, or we found a default server but\n                    ** exactly one of us is a wildcard port, which means we want\n                    ** two ip-based vhosts not an NVH with two names\n                    */\n                    ic = new_ipaddr_chain(p, s, sar);\n                    ic->next = default_list;\n                    default_list = ic;\n                    add_name_vhost_config(p, main_s, s, sar, ic);\n                }\n                has_default_vhost_addr = 1;\n            }\n            else {\n                /* see if it matches something we've already got */\n                ic = find_ipaddr(sar->host_addr);\n\n                if (!ic || sar->host_port != ic->sar->host_port) {\n                    /* No matching server, or we found a matching server but\n                    ** exactly one of us is a wildcard port, which means we want\n                    ** two ip-based vhosts not an NVH with two names\n                    */\n                    unsigned bucket = hash_addr(sar->host_addr);\n                    ic = new_ipaddr_chain(p, s, sar);\n                    ic->next = *iphash_table_tail[bucket];\n                    *iphash_table_tail[bucket] = ic;\n                }\n                add_name_vhost_config(p, main_s, s, sar, ic);\n            }\n            sar_prev = sar;\n        }\n\n        /* Ok now we want to set up a server_hostname if the user was\n         * silly enough to forget one.\n         * XXX: This is silly we should just crash and burn.\n         */\n        if (!s->server_hostname) {\n            if (has_default_vhost_addr) {\n                s->server_hostname = main_s->server_hostname;\n            }\n            else if (!s->addrs) {\n                /* what else can we do?  at this point this vhost has\n                    no configured name, probably because they used\n                    DNS in the VirtualHost statement.  It's disabled\n                    anyhow by the host matching code.  -djg */\n                s->server_hostname =\n                    apr_pstrdup(p, \"bogus_host_without_forward_dns\");\n            }\n            else {\n                apr_status_t rv;\n                char *hostname;\n\n                rv = apr_getnameinfo(&hostname, s->addrs->host_addr, 0);\n                if (rv == APR_SUCCESS) {\n                    s->server_hostname = apr_pstrdup(p, hostname);\n                }\n                else {\n                    /* again, what can we do?  They didn't specify a\n                       ServerName, and their DNS isn't working. -djg */\n                    char *ipaddr_str;\n\n                    apr_sockaddr_ip_get(&ipaddr_str, s->addrs->host_addr);\n                    ap_log_error(APLOG_MARK, APLOG_ERR, rv, main_s, APLOGNO(00549)\n                                 \"Failed to resolve server name \"\n                                 \"for %s (check DNS) -- or specify an explicit \"\n                                 \"ServerName\",\n                                 ipaddr_str);\n                    s->server_hostname =\n                        apr_pstrdup(p, \"bogus_host_without_reverse_dns\");\n                }\n            }\n        }\n    }\n\n#ifdef IPHASH_STATISTICS\n    dump_iphash_statistics(main_s);\n#endif\n    if (ap_exists_config_define(\"DUMP_VHOSTS\")) {\n        apr_file_t *thefile = NULL;\n        apr_file_open_stdout(&thefile, p);\n        dump_vhost_config(thefile);\n    }\n}\n\nstatic int vhost_check_config(apr_pool_t *p, apr_pool_t *plog,\n                              apr_pool_t *ptemp, server_rec *s)\n{\n    return config_error ? !OK : OK;\n}\n\n/*****************************************************************************\n * run-time vhost matching functions\n */\n\nstatic apr_status_t fix_hostname_v6_literal(request_rec *r, char *host)\n{\n    char *dst;\n    int double_colon = 0;\n\n    for (dst = host; *dst; dst++) {\n        if (apr_isxdigit(*dst)) {\n            if (apr_isupper(*dst)) {\n                *dst = apr_tolower(*dst);\n            }\n        }\n        else if (*dst == ':') {\n            if (*(dst + 1) == ':') {\n                if (double_colon)\n                    return APR_EINVAL;\n                double_colon = 1;\n            }\n            else if (*(dst + 1) == '.') {\n                return APR_EINVAL;\n            }\n        }\n        else if (*dst == '.') {\n            /* For IPv4-mapped IPv6 addresses like ::FFFF:129.144.52.38 */\n            if (*(dst + 1) == ':' || *(dst + 1) == '.')\n                return APR_EINVAL;\n        }\n        else {\n            return APR_EINVAL;\n        }\n    }\n    return APR_SUCCESS;\n}\n\nstatic apr_status_t fix_hostname_non_v6(request_rec *r, char *host)\n{\n    char *dst;\n\n    for (dst = host; *dst; dst++) {\n        if (apr_islower(*dst)) {\n            /* leave char unchanged */\n        }\n        else if (*dst == '.') {\n            if (*(dst + 1) == '.') {\n                return APR_EINVAL;\n            }\n        }\n        else if (apr_isupper(*dst)) {\n            *dst = apr_tolower(*dst);\n        }\n        else if (*dst == '/' || *dst == '\\\\') {\n            return APR_EINVAL;\n        }\n    }\n    /* strip trailing gubbins */\n    if (dst > host && dst[-1] == '.') {\n        dst[-1] = '\\0';\n    }\n    return APR_SUCCESS;\n}\n\n/*\n * If strict mode ever becomes the default, this should be folded into\n * fix_hostname_non_v6()\n */\nstatic apr_status_t strict_hostname_check(request_rec *r, char *host)\n{\n    char *ch;\n    int is_dotted_decimal = 1, leading_zeroes = 0, dots = 0;\n\n    for (ch = host; *ch; ch++) {\n        if (apr_isalpha(*ch) || *ch == '-' || *ch == '_') {\n            is_dotted_decimal = 0;\n        }\n        else if (ch[0] == '.') {\n            dots++;\n            if (ch[1] == '0' && apr_isdigit(ch[2]))\n                leading_zeroes = 1;\n        }\n        else if (!apr_isdigit(*ch)) {\n           /* also takes care of multiple Host headers by denying commas */\n            goto bad;\n        }\n    }\n    if (is_dotted_decimal) {\n        if (host[0] == '.' || (host[0] == '0' && apr_isdigit(host[1])))\n            leading_zeroes = 1;\n        if (leading_zeroes || dots != 3) {\n            /* RFC 3986 7.4 */\n            goto bad;\n        }\n    }\n    else {\n        /* The top-level domain must start with a letter (RFC 1123 2.1) */\n        while (ch > host && *ch != '.')\n            ch--;\n        if (ch[0] == '.' && ch[1] != '\\0' && !apr_isalpha(ch[1]))\n            goto bad;\n    }\n    return APR_SUCCESS;\n\nbad:\n    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02415)\n                  \"[strict] Invalid host name '%s'%s%.6s\",\n                  host, *ch ? \", problem near: \" : \"\", ch);\n    return APR_EINVAL;\n}\n\n/* Lowercase and remove any trailing dot and/or :port from the hostname,\n * and check that it is sane.\n *\n * In most configurations the exact syntax of the hostname isn't\n * important so strict sanity checking isn't necessary. However, in\n * mass hosting setups (using mod_vhost_alias or mod_rewrite) where\n * the hostname is interpolated into the filename, we need to be sure\n * that the interpolation doesn't expose parts of the filesystem.\n * We don't do strict RFC 952 / RFC 1123 syntax checking in order\n * to support iDNS and people who erroneously use underscores.\n * Instead we just check for filesystem metacharacters: directory\n * separators / and \\ and sequences of more than one dot.\n */\nstatic int fix_hostname(request_rec *r, const char *host_header,\n                        unsigned http_conformance)\n{\n    const char *src;\n    char *host, *scope_id;\n    apr_port_t port;\n    apr_status_t rv;\n    const char *c;\n    int is_v6literal = 0;\n    int strict = (http_conformance != AP_HTTP_CONFORMANCE_UNSAFE);\n\n    src = host_header ? host_header : r->hostname;\n\n    /* According to RFC 2616, Host header field CAN be blank */\n    if (!*src) {\n        return is_v6literal;\n    }\n\n    /* apr_parse_addr_port will interpret a bare integer as a port\n     * which is incorrect in this context.  So treat it separately.\n     */\n    for (c = src; apr_isdigit(*c); ++c);\n    if (!*c) {\n        /* pure integer */\n        if (strict) {\n            /* RFC 3986 7.4 */\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02416)\n                         \"[strict] purely numeric host names not allowed: %s\",\n                         src);\n            goto bad_nolog;\n        }\n        r->hostname = src;\n        return is_v6literal;\n    }\n\n    if (host_header) {\n        rv = apr_parse_addr_port(&host, &scope_id, &port, src, r->pool);\n        if (rv != APR_SUCCESS || scope_id)\n            goto bad;\n        if (port) {\n            /* Don't throw the Host: header's port number away:\n               save it in parsed_uri -- ap_get_server_port() needs it! */\n            /* @@@ XXX there should be a better way to pass the port.\n             *         Like r->hostname, there should be a r->portno\n             */\n            r->parsed_uri.port = port;\n            r->parsed_uri.port_str = apr_itoa(r->pool, (int)port);\n        }\n        if (host_header[0] == '[')\n            is_v6literal = 1;\n    }\n    else {\n        /*\n         * Already parsed, surrounding [ ] (if IPv6 literal) and :port have\n         * already been removed.\n         */\n        host = apr_pstrdup(r->pool, r->hostname);\n        if (ap_strchr(host, ':') != NULL)\n            is_v6literal = 1;\n    }\n\n    if (is_v6literal) {\n        rv = fix_hostname_v6_literal(r, host);\n    }\n    else {\n        rv = fix_hostname_non_v6(r, host);\n        if (strict && rv == APR_SUCCESS)\n            rv = strict_hostname_check(r, host);\n    }\n    if (rv != APR_SUCCESS)\n        goto bad;\n\n    r->hostname = host;\n    return is_v6literal;\n\nbad:\n    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00550)\n                  \"Client sent malformed Host header: %s\",\n                  src);\nbad_nolog:\n    r->status = HTTP_BAD_REQUEST;\n    return is_v6literal;\n}\n\n/* return 1 if host matches ServerName or ServerAliases */\nstatic int matches_aliases(server_rec *s, const char *host)\n{\n    int i;\n    apr_array_header_t *names;\n\n    /* match ServerName */\n    if (!strcasecmp(host, s->server_hostname)) {\n        return 1;\n    }\n\n    /* search all the aliases from ServerAlias directive */\n    names = s->names;\n    if (names) {\n        char **name = (char **) names->elts;\n        for (i = 0; i < names->nelts; ++i) {\n            if (!name[i]) continue;\n            if (!strcasecmp(host, name[i]))\n                return 1;\n        }\n    }\n    names = s->wild_names;\n    if (names) {\n        char **name = (char **) names->elts;\n        for (i = 0; i < names->nelts; ++i) {\n            if (!name[i]) continue;\n            if (!ap_strcasecmp_match(host, name[i]))\n                return 1;\n        }\n    }\n    return 0;\n}\n\n\n/* Suppose a request came in on the same socket as this r, and included\n * a header \"Host: host:port\", would it map to r->server?  It's more\n * than just that though.  When we do the normal matches for each request\n * we don't even bother considering Host: etc on non-namevirtualhosts,\n * we just call it a match.  But here we require the host:port to match\n * the ServerName and/or ServerAliases.\n */\nAP_DECLARE(int) ap_matches_request_vhost(request_rec *r, const char *host,\n                                         apr_port_t port)\n{\n    server_rec *s;\n    server_addr_rec *sar;\n\n    s = r->server;\n\n    /* search all the <VirtualHost> values */\n    /* XXX: If this is a NameVirtualHost then we may not be doing the Right Thing\n     * consider:\n     *\n     *     NameVirtualHost 10.1.1.1\n     *     <VirtualHost 10.1.1.1>\n     *     ServerName v1\n     *     </VirtualHost>\n     *     <VirtualHost 10.1.1.1>\n     *     ServerName v2\n     *     </VirtualHost>\n     *\n     * Suppose r->server is v2, and we're asked to match \"10.1.1.1\".  We'll say\n     * \"yup it's v2\", when really it isn't... if a request came in for 10.1.1.1\n     * it would really go to v1.\n     */\n    for (sar = s->addrs; sar; sar = sar->next) {\n        if ((sar->host_port == 0 || port == sar->host_port)\n            && !strcasecmp(host, sar->virthost)) {\n            return 1;\n        }\n    }\n\n    /* the Port has to match now, because the rest don't have ports associated\n     * with them. */\n    if (port != s->port) {\n        return 0;\n    }\n\n    return matches_aliases(s, host);\n}\n\n\nstatic void check_hostalias(request_rec *r)\n{\n    /*\n     * Even if the request has a Host: header containing a port we ignore\n     * that port.  We always use the physical port of the socket.  There\n     * are a few reasons for this:\n     *\n     * - the default of 80 or 443 for SSL is easier to handle this way\n     * - there is less of a possibility of a security problem\n     * - it simplifies the data structure\n     * - the client may have no idea that a proxy somewhere along the way\n     *   translated the request to another ip:port\n     * - except for the addresses from the VirtualHost line, none of the other\n     *   names we'll match have ports associated with them\n     */\n    const char *host = r->hostname;\n    apr_port_t port;\n    server_rec *s;\n    server_rec *virthost_s;\n    server_rec *last_s;\n    name_chain *src;\n\n    virthost_s = NULL;\n    last_s = NULL;\n\n    port = r->connection->local_addr->port;\n\n    /* Recall that the name_chain is a list of server_addr_recs, some of\n     * whose ports may not match.  Also each server may appear more than\n     * once in the chain -- specifically, it will appear once for each\n     * address from its VirtualHost line which matched.  We only want to\n     * do the full ServerName/ServerAlias comparisons once for each\n     * server, fortunately we know that all the VirtualHost addresses for\n     * a single server are adjacent to each other.\n     */\n\n    for (src = r->connection->vhost_lookup_data; src; src = src->next) {\n        server_addr_rec *sar;\n\n        /* We only consider addresses on the name_chain which have a matching\n         * port\n         */\n        sar = src->sar;\n        if (sar->host_port != 0 && port != sar->host_port) {\n            continue;\n        }\n\n        s = src->server;\n\n        /* If we still need to do ServerName and ServerAlias checks for this\n         * server, do them now.\n         */\n        if (s != last_s) {\n            /* does it match any ServerName or ServerAlias directive? */\n            if (matches_aliases(s, host)) {\n                goto found;\n            }\n        }\n\n        /* Fallback: does it match the virthost from the sar? */\n        if (!strcasecmp(host, sar->virthost)) {\n            /* only the first match is used */\n            if (virthost_s == NULL) {\n                virthost_s = s;\n            }\n        }\n\n        last_s = s;\n    }\n\n    /* If ServerName and ServerAlias check failed, we end up here.  If it\n     * matches a VirtualHost, virthost_s is set. Use that as fallback\n     */\n    if (virthost_s) {\n        s = virthost_s;\n        goto found;\n    }\n\n    return;\n\nfound:\n    /* s is the first matching server, we're done */\n    r->server = s;\n}\n\n\nstatic void check_serverpath(request_rec *r)\n{\n    server_rec *s;\n    server_rec *last_s;\n    name_chain *src;\n    apr_port_t port;\n\n    port = r->connection->local_addr->port;\n\n    /*\n     * This is in conjunction with the ServerPath code in http_core, so we\n     * get the right host attached to a non- Host-sending request.\n     *\n     * See the comment in check_hostalias about how each vhost can be\n     * listed multiple times.\n     */\n\n    last_s = NULL;\n    for (src = r->connection->vhost_lookup_data; src; src = src->next) {\n        /* We only consider addresses on the name_chain which have a matching\n         * port\n         */\n        if (src->sar->host_port != 0 && port != src->sar->host_port) {\n            continue;\n        }\n\n        s = src->server;\n        if (s == last_s) {\n            continue;\n        }\n        last_s = s;\n\n        if (s->path && !strncmp(r->uri, s->path, s->pathlen) &&\n            (s->path[s->pathlen - 1] == '/' ||\n             r->uri[s->pathlen] == '/' ||\n             r->uri[s->pathlen] == '\\0')) {\n            r->server = s;\n            return;\n        }\n    }\n}\n\nstatic APR_INLINE const char *construct_host_header(request_rec *r,\n                                                    int is_v6literal)\n{\n    struct iovec iov[5];\n    apr_size_t nvec = 0;\n    /*\n     * We cannot use ap_get_server_name/port here, because we must\n     * ignore UseCanonicalName/Port.\n     */\n    if (is_v6literal) {\n        iov[nvec].iov_base = \"[\";\n        iov[nvec].iov_len = 1;\n        nvec++;\n    }\n    iov[nvec].iov_base = (void *)r->hostname;\n    iov[nvec].iov_len = strlen(r->hostname);\n    nvec++;\n    if (is_v6literal) {\n        iov[nvec].iov_base = \"]\";\n        iov[nvec].iov_len = 1;\n        nvec++;\n    }\n    if (r->parsed_uri.port_str) {\n        iov[nvec].iov_base = \":\";\n        iov[nvec].iov_len = 1;\n        nvec++;\n        iov[nvec].iov_base = r->parsed_uri.port_str;\n        iov[nvec].iov_len = strlen(r->parsed_uri.port_str);\n        nvec++;\n    }\n    return apr_pstrcatv(r->pool, iov, nvec, NULL);\n}\n\nAP_DECLARE(void) ap_update_vhost_from_headers(request_rec *r)\n{\n    core_server_config *conf = ap_get_core_module_config(r->server->module_config);\n    const char *host_header = apr_table_get(r->headers_in, \"Host\");\n    int is_v6literal = 0;\n    int have_hostname_from_url = 0;\n\n    if (r->hostname) {\n        /*\n         * If there was a host part in the Request-URI, ignore the 'Host'\n         * header.\n         */\n        have_hostname_from_url = 1;\n        is_v6literal = fix_hostname(r, NULL, conf->http_conformance);\n    }\n    else if (host_header != NULL) {\n        is_v6literal = fix_hostname(r, host_header, conf->http_conformance);\n    }\n    if (r->status != HTTP_OK)\n        return;\n\n    if (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE) {\n        /*\n         * If we have both hostname from an absoluteURI and a Host header,\n         * we must ignore the Host header (RFC 2616 5.2).\n         * To enforce this, we reset the Host header to the value from the\n         * request line.\n         */\n        if (have_hostname_from_url && host_header != NULL) {\n            const char *repl = construct_host_header(r, is_v6literal);\n            apr_table_setn(r->headers_in, \"Host\", repl);\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02417)\n                          \"Replacing host header '%s' with host '%s' given \"\n                          \"in the request uri\", host_header, repl);\n        }\n    }\n\n    /* check if we tucked away a name_chain */\n    if (r->connection->vhost_lookup_data) {\n        if (r->hostname)\n            check_hostalias(r);\n        else\n            check_serverpath(r);\n    }\n}\n\n/**\n * For every virtual host on this connection, call func_cb.\n */\nAP_DECLARE(int) ap_vhost_iterate_given_conn(conn_rec *conn,\n                                            ap_vhost_iterate_conn_cb func_cb,\n                                            void* baton)\n{\n    server_rec *s;\n    server_rec *last_s;\n    name_chain *src;\n    apr_port_t port;\n    int rv = 0;\n\n    if (conn->vhost_lookup_data) {\n        last_s = NULL;\n        port = conn->local_addr->port;\n\n        for (src = conn->vhost_lookup_data; src; src = src->next) {\n            server_addr_rec *sar;\n\n            /* We only consider addresses on the name_chain which have a\n             * matching port.\n             */\n            sar = src->sar;\n            if (sar->host_port != 0 && port != sar->host_port) {\n                continue;\n            }\n\n            s = src->server;\n\n            if (s == last_s) {\n                /* we've already done a callback for this vhost. */\n                continue;\n            }\n\n            last_s = s;\n\n            rv = func_cb(baton, conn, s);\n\n            if (rv != 0) {\n                break;\n            }\n        }\n    }\n    else {\n        rv = func_cb(baton, conn, conn->base_server);\n    }\n\n    return rv;\n}\n\n/* Called for a new connection which has a known local_addr.  Note that the\n * new connection is assumed to have conn->server == main server.\n */\nAP_DECLARE(void) ap_update_vhost_given_ip(conn_rec *conn)\n{\n    ipaddr_chain *trav;\n    apr_port_t port;\n\n    /* scan the hash table for an exact match first */\n    trav = find_ipaddr(conn->local_addr);\n\n    if (trav) {\n        /* save the name_chain for later in case this is a name-vhost */\n        conn->vhost_lookup_data = trav->names;\n        conn->base_server = trav->server;\n        return;\n    }\n\n    /* maybe there's a default server or wildcard name-based vhost\n     * matching this port\n     */\n    port = conn->local_addr->port;\n\n    trav = find_default_server(port);\n    if (trav) {\n        conn->vhost_lookup_data = trav->names;\n        conn->base_server = trav->server;\n        return;\n    }\n\n    /* otherwise we're stuck with just the main server\n     * and no name-based vhosts\n     */\n    conn->vhost_lookup_data = NULL;\n}\n"], "fixing_code": ["                                                         -*- coding: utf-8 -*-\nChanges with Apache 2.4.49\n\n  *) core: Split ap_create_request() from ap_read_request(). [Graham Leggett]\n\n  *) core, h2: common ap_parse_request_line() and ap_check_request_header()\n     code. [Yann Ylavic]\n\n  *) core: Add StrictHostCheck to allow unconfigured hostnames to be\n     rejected. [Eric Covener]\n\nChanges with Apache 2.4.48\n\n  *) mod_proxy_wstunnel: Add ProxyWebsocketFallbackToProxyHttp to opt-out the\n     fallback to mod_proxy_http for WebSocket upgrade and tunneling.\n     [Yann Ylavic]\n\n  *) mod_proxy: Fix flushing of THRESHOLD_MIN_WRITE data while tunneling.\n     BZ 65294.  [Yann Ylavic]\n\n  *) core: Fix a regression that stripped the ETag header from 304 responses.\n     PR 61820 [Ruediger Pluem, Roy T. Fielding]\n\n  *) core: Adding SSL related inquiry functions to the server API.\n     These function are always available, even when no module providing\n     SSL is loaded. They provide their own \"shadowing\" implementation for\n     the optional functions of similar name that mod_ssl and impersonators\n     of mod_ssl provide.\n     This enables loading of several SSL providing modules when all but\n     one of them registers itself into the new hooks. Two old-style SSL\n     modules will not work, as they replace the others optional functions\n     with their own.\n     Modules using the old-style optional functions will continue to work\n     as core supplies its own versions of those.\n     The following has been added so far:\n     - ap_ssl_conn_is_ssl() to query if a connection is using SSL.\n     - ap_ssl_var_lookup() to query SSL related variables for a\n       server/connection/request.\n     - Hooks for 'ssl_conn_is_ssl' and 'ssl_var_lookup' where modules\n       providing SSL can install their own value supplying functions.\n     - ap_ssl_add_cert_files() to enable other modules like mod_md to provide\n       certificate and keys for an SSL module like mod_ssl.\n     - ap_ssl_add_fallback_cert_files() to enable other modules like mod_md to\n       provide a fallback certificate in case no 'proper' certificate is\n       available for an SSL module like mod_ssl.\n     - ap_ssl_answer_challenge() to enable other modules like mod_md to\n       provide a certificate as used in the RFC 8555 'tls-alpn-01' challenge\n       for the ACME protocol for an SSL module like mod_ssl. The function\n       and its hook provide PEM encoded data instead of file names.\n     - Hooks for 'ssl_add_cert_files', 'ssl_add_fallback_cert_files' and\n       'ssl_answer_challenge' where modules like mod_md can provide providers\n       to the above mentioned functions.\n     - These functions reside in the new 'http_ssl.h' header file.\n     [Stefan Eissing]\n\n  *) core/mod_ssl/mod_md: adding OCSP response provisioning as core feature. This\n     allows modules to access and provide OCSP response data without being tied\n     of each other. The data is exchanged in standard, portable formats (PEM encoded\n     certificates and DER encoded responses), so that the actual SSL/crypto\n     implementations used by the modules are independant of each other.\n     Registration and retrieval happen in the context of a server (server_rec)\n     which modules may use to decide if they are configured for this or not.\n     The area of changes:\n     1. core: defines 2 functions in include/http_ssl.h, so that modules may\n        register a certificate, together with its issuer certificate for OCSP\n        response provisioning and ask for current response data (DER bytes) later.\n        Also, 2 hooks are defined that allow modules to implement this OCSP\n        provisioning.\n     2. mod_ssl uses the new functions, in addition to what it did already, to\n        register its certificates this way. If no one is interested in providing\n        OCSP, it falls back to its own (if configured) stapling implementation.\n     3. mod_md registers itself at the core hooks for OCSP provisioning. Depending\n        on configuration, it will accept registrations of its own certificates only,\n        all certificates or none.\n     [Stefan Eissing]\n\n *) mod_md: v2.4.0 with improvements and bugfixes\n     - MDPrivateKeys allows the specification of several types. Beside \"RSA\" plus\n     optional key lengths elliptic curves can be configured. This means you can\n     have multiple certificates for a Managed Domain with different key types.\n     With ```MDPrivateKeys secp384r1 rsa2048``` you get one ECDSA  and one RSA\n     certificate and all modern client will use the shorter ECDSA, while older\n     client will get the RSA certificate.\n     Many thanks to @tlhackque who pushed and helped on this.\n     - Support added for MDomains consisting of a wildcard. Configuring\n     ```MDomain *.host.net``` will match all virtual hosts matching that pattern\n     and obtain one certificate for it (assuming you have 'dns-01' challenge\n     support configured). Addresses #239.\n     - Removed support for ACMEv1 servers. The only known installation used to\n     be Let's Encrypt which has disabled that version more than a year ago for\n     new accounts.\n     - Andreas Ulm (<https://github.com/root360-AndreasUlm>) implemented the\n     ```renewing``` call to ```MDMessageCmd``` that can deny a certificate\n     renewal attempt. This is useful in clustered installations, as\n     discussed in #233).\n     - New event ```challenge-setup:<type>:<domain>```, triggered when the\n     challenge data for a domain has been created. This is invoked before the\n     ACME server is told to check for it. The type is one of the ACME challenge\n     types. This is invoked for every DNS name in a MDomain.\n     - The max delay for retries has been raised to daily (this is like all\n     retries jittered somewhat to avoid repeats at fixed time of day).\n     - Certain error codes reported by the ACME server that indicate a problem\n     with the configured data now immediately switch to daily retries. For\n     example: if the ACME server rejects a contact email or a domain name,\n     frequent retries will most likely not solve the problem. But daily retries\n     still make sense as there might be an error at the server and un-supervised\n     certificate renewal is the goal. Refs #222.\n     - Test case and work around for domain names > 64 octets. Fixes #227.\n     When the first DNS name of an MD is longer than 63 octets, the certificate\n     request will not contain a CN field, but leave it up to the CA to choose one.\n     Currently, Lets Encrypt looks for a shorter name in the SAN list given and\n     fails the request if none is found. But it is really up to the CA (and what\n     browsers/libs accept here) and may change over the years. That is why\n     the decision is best made at the CA.\n     - Retry delays now have a random +/-[0-50]% modification applied to let\n     retries from several servers spread out more, should they have been\n     restarted at the same time of day.\n     - Fixed several places where the 'badNonce' return code from an ACME server\n     was not handled correctly. The test server 'pebble' simulates this behaviour\n     by default and helps nicely in verifying this behaviour. Thanks, pebble!\n     - Set the default `MDActivationDelay` to 0. This was confusing to users that\n     new certificates were deemed not usably before a day of delay. When clocks are\n     correct, using a new certificate right away should not pose a problem.\n     - When handling ACME authorization resources, the module no longer requires\n     the server to return a \"Location\" header, as was necessary in ACMEv1.\n     Fixes #216.\n     - Fixed a theoretical uninitialized read when testing for JSON error responses\n     from the ACME CA. Reported at <https://bz.apache.org/bugzilla/show_bug.cgi?id=64297>.\n     - ACME problem reports from CAs that include parameters in the Content-Type\n     header are handled correctly. (Previously, the problem text would not be\n     reported and retries could exceed CA limits.)\n     - Account Update transactions to V2 CAs now use the correct POST-AS-GET method.\n     Previously, an empty JSON object was sent - which apparently LE accepted,\n     but others reject.\n     [Stefan Eissing, @tlhackque, Andreas Ulm]\n\nChanges with Apache 2.4.47\n\n  *) mod_dav_fs: Improve logging output when failing to open files for\n     writing.  PR 64413.  [Bingyu Shen <ahshenbingyu gmail.com>]\n\n  *) mod_http2: Fixed a race condition that could lead to streams being\n     aborted (RST to the client), although a response had been produced.\n     [Stefan Eissing]\n\n  *) mod_lua: Add support to Lua 5.4  [Joe Orton, Giovanni Bechis, Ruediger Pluem]\n\n  *) MPM event/worker: Fix possible crash in child process on early signal\n     delivery.  PR 64533.  [Ruediger Pluem]\n\n  *) mod_http2: sync with github standalone version 1.15.17\n     - Log requests and sent the configured error response in case of early detected\n       errors like too many or too long headers. [Ruediger Pluem]\n     - new option 'H2OutputBuffering on/off' which controls the buffering of stream output.\n       The default is on, which is the behaviour of older mod-h2 versions. When off, all\n       bytes are made available immediately to the main connection for sending them\n       out to the client. This fixes interop issues with certain flavours of gRPC, see\n       also <https://github.com/icing/mod_h2/issues/207>.\n       [Stefan Eissing]\n\n  *) mod_unique_id: Fix potential duplicated ID generation under heavy load.\n     PR 65159\n     [Jonas M\u00fcntener <jonas.muentener ergon.ch>, Christophe Jaillet]\n\n  *) \"[mod_dav_fs etag handling] should really honor the FileETag setting\".\n     - It now does.\n     - Add \"Digest\" to FileETag directive, allowing a strong ETag to be\n       generated using a file digest.\n     - Add ap_make_etag_ex() and ap_set_etag_fd() to allow full control over\n       ETag generation.\n     - Add concept of \"binary notes\" to request_rec, allowing packed bit flags\n       to be added to a request.\n     - First binary note - AP_REQUEST_STRONG_ETAG - allows modules to force\n       the ETag to a strong ETag to comply with RFC requirements, such as those\n       mandated by various WebDAV extensions.\n     [Graham Leggett]\n\n  *) mod_proxy_http: Fix a possibly crash when the origin connection gets\n     interrupted before completion.  PR 64234.\n     [Barnim Dzwillo <dzwillo strato.de>, Ruediger Pluem]\n\n  *) mod_ssl: Do not keep connections to OCSP responders alive when doing\n     OCSP requests.  PR 64135.  [Ruediger Pluem]\n\n  *) mod_ssl: Improve the coalescing filter to buffer into larger TLS\n     records, and avoid revealing the HTTP header size via TLS record\n     boundaries (for common response generators).\n     [Joe Orton, Ruediger Pluem]     \n\n  *) mod_proxy_hcheck: Don't pile up health checks if the previous one did\n     not finish before hcinterval.  PR 63010.  [Yann Ylavic]\n\n  *) mod_session: Improve session parsing.  [Yann Yalvic]\n\n  *) mod_authnz_ldap: Prevent authentications with empty passwords for the\n     initial bind to fail with status 500. [Ruediger Pluem]\n\n  *) mod_auth_digest: Fast validation of the nonce's base64 to fail early if\n     the format can't match anyway.  [Yann Ylavic]\n\n  *) mod_proxy_fcgi: Honor \"SetEnv proxy-sendcl\" to forward a chunked\n     Transfer-Encoding from the client, spooling the request body when needed\n     to provide a Content-Length to the backend.  PR 57087.  [Yann Ylavic]\n\n  *) mod_proxy: Put mod_proxy_{connect,wstunnel} tunneling code in common in\n     proxy_util.  [Yann Ylavic]\n\n  *) mod_proxy: Improve tunneling loop to support half closed connections and\n     pending data draining (for protocols like rsync). PR 61616. [Yann Ylavic]\n\n  *) mod_proxy_http: handle Upgrade request, 101 (Switching Protocol) response\n     and switched protocol forwarding.  [Yann Ylavic]\n\n  *) mod_proxy_wstunnel: Leave Upgrade requests handling to mod_proxy_http,\n     allowing for (non-)Upgrade negotiation with the origin server.\n     [Yann Ylavic]\n\n  *) mod_proxy: Allow ProxyErrorOverride to be restricted to specific status \n     codes.  PR63628. [Martin Dr\u00f6\u00dfler <mail martindroessler.de>]\n\n  *) core: Add ReadBufferSize, FlushMaxThreshold and FlushMaxPipelined\n     directives.  [Yann Ylavic]\n\n  *) core: Ensure that aborted connections are logged as such. PR 62823\n     [Arnaud Grandville <contact@grandville.net>]\n\n  *) http: Allow unknown response status' lines returned in the form of\n     \"HTTP/x.x xxx Status xxx\".  [Yann Ylavic]\n\n  *) mod_proxy_http: Fix 100-continue deadlock for spooled request bodies,\n     leading to Request Timeout (408).  PR 63855.  [Yann Ylavic]\n\n  *) core: Remove headers on 304 Not Modified as specified by RFC7234, as\n     opposed to passing an explicit subset of headers. PR 61820.\n     [Giovanni Bechis]\n\n  *) mpm_event: Don't reset connections after lingering close, restoring prior\n     to 2.4.28 behaviour.  [Yann Ylavic]\n\n  *) mpm_event: Kill connections in keepalive state only when there is no more\n     workers available, not when the maximum number of connections is reached,\n     restoring prior to 2.4.30 behaviour.  [Yann Ylavic]\n\n  *) mod_unique_id: Use base64url encoding for UNIQUE_ID variable,\n     avoiding the use of '@'.  PR 57044.\n     [Michael Kaufmann <apache-bugzilla michael-kaufmann.ch>]\n\n  *) mod_rewrite: Extend the [CO] (cookie) flag of RewriteRule to accept a\n     SameSite attribute. [Eric Covener]\n\n  *) mod_proxy: Add proxy check_trans hook.  This allows proxy \n     modules to decline request handling at early stage.\n\n  *) mod_proxy_wstunnel: Decline requests without an Upgrade\n     header so ws/wss can be enabled overlapping with later\n     http/https.\n\n  *) mod_http2: Log requests and sent the configured error response in case of\n     early detected errors like too many or too long headers.\n     [Ruediger Pluem, Stefan Eissing]\n\n  *) mod_md: Lowered the required minimal libcurl version from 7.50 to 7.29\n     as proposed by <alexander.gerasimov codeit.pro>. [Stefan Eissing]\n\n  *) mod_ssl: Fix request body buffering with PHA in TLSv1.3.  [Joe Orton]\n\n  *) mod_proxy_uwsgi: Fix a crash when sending environment variables with no\n     value. PR 64598 [Ruediger Pluem]\n\n  *) mod_proxy: Recognize parameters from ProxyPassMatch workers with dollar\n     substitution, such that they apply to the backend connection.  Note that\n     connection reuse is disabled by default to avoid compatibility issues.\n     [Takashi Sato, Jan Kaluza, Eric Covener, Yann Ylavic, Jean-Frederic Clere]\n\nChanges with Apache 2.4.46\n\n  *) SECURITY: CVE-2020-11984 (cve.mitre.org)\n     mod_proxy_uwsgi: Malicious request may result in information disclosure\n     or RCE of existing file on the server running under a malicious process\n     environment. [Yann Ylavic]\n\n  *) SECURITY: CVE-2020-11993 (cve.mitre.org)\n     mod_http2: when throttling connection requests, log statements\n     where possibly made that result in concurrent, unsafe use of\n     a memory pool. [Stefan Eissing]\n\n  *) SECURITY: CVE-2020-9490 (cve.mitre.org)\n     mod_http2: a specially crafted value for the 'Cache-Digest' header\n     request would result in a crash when the server actually tries\n     to HTTP/2 PUSH a resource afterwards. [Stefan Eissing]\n\n  *) mod_proxy_fcgi: Fix missing APLOGNO macro argument\n     [Eric Covener, Christophe Jaillet]\n\nChanges with Apache 2.4.45\n\n  *) mod_http2: remove support for abandoned http-wg draft\n     <https://datatracker.ietf.org/doc/draft-kazuho-h2-cache-digest/>.\n     [Stefan Eissing]\n\nChanges with Apache 2.4.44\n\n  *) mod_proxy_uwsgi: Error out on HTTP header larger than 16K (hard\n     protocol limit).  [Yann Ylavic]\n\n  *) mod_http2: \n     Fixes <https://github.com/icing/mod_h2/issues/200>: \n     \"LimitRequestFields 0\" now disables the limit, as documented.\n     Fixes <https://github.com/icing/mod_h2/issues/201>: \n     Do not count repeated headers with same name against the field\n     count limit. The are merged internally, as if sent in a single HTTP/1 line.\n     [Stefan Eissing]\n\n  *) mod_http2: Avoid segfaults in case of handling certain responses for\n     already aborted connections.  [Stefan Eissing, Ruediger Pluem]\n\n  *) mod_http2: The module now handles master/secondary connections and has marked\n     methods according to use. [Stefan Eissing]\n\n  *) core: Drop an invalid Last-Modified header value coming\n     from a FCGI/CGI script instead of replacing it with Unix epoch.\n     [Yann Ylavic, Luca Toscano]\n\n  *) Add support for strict content-length parsing through addition of\n     ap_parse_strict_length() [Yann Ylavic]\n\n  *) mod_proxy_fcgi: ProxyFCGISetEnvIf unsets variables when expression\n     evaluates to false.  PR64365. [Michael K\u00f6nig <mail ikoenig.net>]\n\n  *) mod_proxy_http: flush spooled request body in one go to avoid\n     leaking (or long lived) temporary file. PR 64452. [Yann Ylavic]\n\n  *) mod_ssl: Fix a race condition and possible crash when using a proxy client\n     certificate (SSLProxyMachineCertificateFile).\n     [Armin Abfalterer <a.abfalterer gmail.com>]\n\n  *) mod_ssl: Fix memory leak in stapling code. PR63687. [Stefan Eissing]\n\n  *) mod_http2: Fixed regression that no longer set H2_STREAM_ID and H2_STREAM_TAG.\n     PR64330 [Stefan Eissing]\n\n  *) mod_http2: Fixed regression that caused connections to close when mod_reqtimeout\n     was configured with a handshake timeout. Fixes gitub issue #196.\n     [Stefan Eissing]\n\n  *) mod_proxy_http2: the \"ping\" proxy parameter\n     (see <https://httpd.apache.org/docs/2.4/mod/mod_proxy.html>) is now used\n     when checking the liveliness of a new or reused h2 connection to the backend.\n     With short durations, this makes load-balancing more responsive. The module\n     will hold back requests until ping conditions are met, using features of the\n     HTTP/2 protocol alone. [Ruediger Pluem, Stefan Eissing]\n\n  *) core: httpd is no longer linked against -lsystemd if mod_systemd\n     is enabled (and built as a DSO).  [Rainer Jung]\n\n  *) mod_proxy_http2: respect ProxyTimeout settings on backend connections\n     while waiting on incoming data. [Ruediger Pluem, Stefan Eissing]\n\nChanges with Apache 2.4.43\n\n  *) mod_ssl: Fix memory leak of OCSP stapling response. [Yann Ylavic]\n\nChanges with Apache 2.4.42\n\n  *) SECURITY: CVE-2020-1934 (cve.mitre.org)\n     mod_proxy_ftp: Use of uninitialized value with malicious backend FTP\n     server. [Eric Covener]\n\n  *) SECURITY: CVE-2020-1927 (cve.mitre.org)\n     rewrite, core: Set PCRE_DOTALL flag by default to avoid unpredictable\n     matches and substitutions with encoded line break characters.\n     The fix for CVE-2019-10098 was not effective.  [Ruediger Pluem]\n\n  *) mod_proxy_http: Fix the forwarding of requests with content body when a\n     balancer member is unavailable; the retry on the next member was issued\n     with an empty body (regression introduced in 2.4.41). PR63891. \n     [Yann Ylavic]\n\n  *) core: Use a temporary file when writing the pid file, avoiding\n     startup failure if an empty pidfile is left over from a\n     previous crashed or aborted invocation of httpd.  PR 63140.\n     [Nicolas Carrier <carrier.nicolas0 gmail.com>, Joe Orton]\n\n  *) mod_http2: Fixes issue where mod_unique_id would generate non-unique request\n     identifier under load, see <https://github.com/icing/mod_h2/issues/195>.\n     [Michael Kaufmann, Stefan Eissing]\n\n  *) mod_proxy_hcheck: Allow healthcheck expressions to use %{Content-Type}.\n     PR64140. [Renier Velazco <renier.velazco upr.edu>]\n\n  *) mod_authz_groupfile: Drop AH01666 from loglevel \"error\" to \"info\".\n     PR64172.\n\n  *) mod_usertrack: Add CookieSameSite, CookieHTTPOnly, and CookieSecure \n     to allow customization of the usertrack cookie. PR64077.\n     [Prashant Keshvani <prashant2400 gmail.com>, Eric Covener]\n\n  *) mod_proxy_ajp: Add \"secret\" parameter to proxy workers to implement legacy\n     AJP13 authentication.  PR 53098. [Dmitry A. Bakshaev <dab1818 gmail com>]\n\n  *) mpm_event: avoid possible KeepAliveTimeout off by -100 ms.\n     [Eric Covener, Yann Ylavic]\n\n  *) Add a config layout for OpenWRT. [Graham Leggett]\n\n  *) Add support for cross compiling to apxs. If apxs is being executed from\n     somewhere other than its target location, add that prefix to includes and\n     library directories. Without this, apxs would fail to find config_vars.mk\n     and exit. [Graham Leggett]\n\n  *) mod_ssl: Disable client verification on ACME ALPN challenges. Fixes github\n     issue mod_md#172 (https://github.com/icing/mod_md/issues/172).\n     [Michael Kaufmann <mail michael-kaufmann.ch>, Stefan Eissing]\n\n  *) mod_ssl: use OPENSSL_init_ssl() to initialise OpenSSL on versions 1.1+.\n     [Graham Leggett]\n\n  *) mod_ssl: Support use of private keys and certificates from an\n     OpenSSL ENGINE via PKCS#11 URIs in SSLCertificateFile/KeyFile.\n     [Anderson Sasaki <ansasaki redhat.com>, Joe Orton]\n\n  *) mod_md:\n     - Prefer MDContactEmail directive to ServerAdmin for registration. New directive\n       thanks to Timothe Litt (@tlhackque).\n     - protocol check for pre-configured \"tls-alpn-01\" challenge has been improved. It will now\n       check all matching virtual hosts for protocol support. Thanks to @mkauf.\n     - Corrected a check when OCSP stapling was configured for hosts\n       where the responsible MDomain is not clear, by Michal Karm Babacek (@Karm).\n     - Softening the restrictions where mod_md configuration directives may appear. This should\n       allow for use in <If> and <Macro> sections. If all possible variations lead to the configuration\n       you wanted in the first place, is another matter.\n     [Michael Kaufmann <mail michael-kaufmann.ch>, Timothe Litt (@tlhackque),\n      Michal Karm Babacek (@Karm), Stefan Eissing (@icing)] \n\n  *) test: Added continuous testing with Travis CI.\n     This tests various scenarios on Ubuntu with the full test suite.\n     Architectures tested: amd64, s390x, ppc64le, arm64\n     The tests pass successfully.\n     [Luca Toscano, Joe Orton, Mike Rumph, and others]\n\n  *) core: Be stricter in parsing of Transfer-Encoding headers.\n     [ZeddYu <zeddyu.lu gmail.com>, Eric Covener]\n\n  *) mod_ssl: negotiate the TLS protocol version per name based vhost\n     configuration, when linked with OpenSSL-1.1.1 or later. The base vhost's\n     SSLProtocol (from the first vhost declared on the IP:port) is now only\n     relevant if no SSLProtocol is declared for the vhost or globally,\n     otherwise the vhost or global value apply.  [Yann Ylavic]\n\n  *) mod_cgi, mod_cgid: Fix a memory leak in some error cases with large script\n     output.  PR 64096.  [Joe Orton]\n\n  *) config: Speed up graceful restarts by using pre-hashed command table. PR 64066.\n     [Giovanni Bechis <giovanni paclan.it>, Jim Jagielski]\n\n  *) mod_systemd: New module providing integration with systemd.  [Jan Kaluza]\n\n  *) mod_lua: Add r:headers_in_table, r:headers_out_table, r:err_headers_out_table,\n     r:notes_table, r:subprocess_env_table as read-only native table alternatives\n     that can be iterated over. [Eric Covener]\n\n  *) mod_http2: Fixed rare cases where a h2 worker could deadlock the main connection. \n     [Yann Ylavic, Stefan Eissing]\n\n  *) mod_lua: Accept nil assignments to the exposed tables (r.subprocess_env, \n     r.headers_out, etc) to remove the key from the table. PR63971. \n     [Eric Covener]\n\n  *) mod_http2: Fixed interaction with mod_reqtimeout. A loaded mod_http2 was disabling the\n     ssl handshake timeouts. Also, fixed a mistake of the last version that made `H2Direct` \n     always `on`, regardless of configuration. Found and reported by\n     <Armin.Abfalterer@united-security-providers.ch> and\n     <Marcial.Rion@united-security-providers.ch>. [Stefan Eissing] \n\n  *) mod_http2: Multiple field length violations in the same request no longer cause\n     several log entries to be written. [@mkauf]\n\n  *) mod_ssl: OCSP does not apply to proxy mode.  PR 63679.\n     [Lubos Uhliarik <luhliari redhat.com>, Yann Ylavic]\n\n  *) mod_proxy_html, mod_xml2enc: Fix build issues with macOS due to r1864469\n     [Jim Jagielski]\n \n  *) mod_authn_socache: Increase the maximum length of strings that can be cached by\n     the module from 100 to 256.  PR 62149 [<thorsten.meinl knime.com>]\n\n  *) mod_proxy: Fix crash by resolving pool concurrency problems. PR 63503\n     [Ruediger Pluem, Eric Covener]\n\n  *) core: On Windows, fix a start-up crash if <IfFile ...> is used with a path that is not\n     valid (For example, testing for a file on a flash drive that is not mounted)\n     [Christophe Jaillet]\n\n  *) mod_deflate, mod_brotli: honor \"Accept-Encoding: foo;q=0\" as per RFC 7231; which\n     means 'foo' is \"not acceptable\".  PR 58158 [Chistophe Jaillet]\n\n  *) mod_md v2.2.3: \n     - Configuring MDCAChallenges replaces any previous existing challenge configuration. It\n       had been additive before which was not the intended behaviour. [@mkauf]\n     - Fixing order of ACME challenges used when nothing else configured. Code now behaves as\n       documented for `MDCAChallenges`. Fixes #156. Thanks again to @mkauf for finding this.\n     - Fixing a potential, low memory null pointer dereference [thanks to @uhliarik].\n     - Fixing an incompatibility with a change in libcurl v7.66.0 that added unwanted\n       \"transfer-encoding\" to POST requests. This failed in direct communication with\n       Let's Encrypt boulder server. Thanks to @mkauf for finding and fixing. [Stefan Eissing]\n\n  *) mod_md: Adding the several new features.\n     The module offers an implementation of OCSP Stapling that can replace fully or\n     for a limited set of domains the existing one from mod_ssl. OCSP handling\n     is part of mod_md's monitoring and message notifications. If can be used\n     for sites that do not have ACME certificates.\n     The url for a CTLog Monitor can be configured. It is used in the server-status\n     to link to the external status page of a certificate.\n     The MDMessageCmd is called with argument \"installed\" when a new certificate\n     has been activated on server restart/reload. This allows for processing of\n     the new certificate, for example to applications that require it in different\n     locations or formats.\n     [Stefan Eissing]\n\n  *) mod_proxy_balancer: Fix case-sensitive referer check related to CSRF/XSS \n     protection. PR 63688. [Armin Abfalterer <a.abfalterer gmail.com>]\n\nChanges with Apache 2.4.41\n\n  *) SECURITY: CVE-2019-10097 (cve.mitre.org)\n     mod_remoteip: Fix stack buffer overflow and NULL pointer deference\n     when reading the PROXY protocol header.  [Joe Orton,\n     Daniel McCarney <cpu letsencrypt.org>]\n\n  *) SECURITY: CVE-2019-9517 (cve.mitre.org)\n     mod_http2: a malicious client could perform a DoS attack by flooding\n        a connection with requests and basically never reading responses\n        on the TCP connection. Depending on h2 worker dimensioning, it was\n        possible to block those with relatively few connections. [Stefan Eissing]\n\n  *) SECURITY: CVE-2019-10098 (cve.mitre.org)\n     rewrite, core: Set PCRE_DOTALL flag by default to avoid unpredictable\n     matches and substitutions with encoded line break characters.\n     [Yann Ylavic]\n\n  *) SECURITY: CVE-2019-10092 (cve.mitre.org)\n     Remove HTML-escaped URLs from canned error responses to prevent misleading\n     text/links being displayed via crafted links. [Eric Covener]\n\n  *) SECURITY: CVE-2019-10082 (cve.mitre.org)\n     mod_http2: Using fuzzed network input, the http/2 session\n     handling could be made to read memory after being freed,\n     during connection shutdown. [Stefan Eissing]\n\n  *) SECURITY: CVE-2019-10081 (cve.mitre.org)\n     mod_http2: HTTP/2 very early pushes, for example configured with \"H2PushResource\",\n        could lead to an overwrite of memory in the pushing request's pool,\n        leading to crashes. The memory copied is that of the configured push\n        link header values, not data supplied by the client. [Stefan Eissing]\n\n  *) mod_proxy_balancer: Improve balancer-manager protection against \n     XSS/XSRF attacks from trusted users.  [Joe Orton,\n     Niels Heinen <heinenn google.com>]\n\n  *) mod_session: Introduce SessionExpiryUpdateInterval which allows to\n     configure the session/cookie expiry's update interval. PR 57300.\n     [Paul Spangler <paul.spangler ni.com>]\n\n  *) modules/filters: Fix broken compilation when using old GCC (<4.2.x).\n     PR 63633.  [Rainer Jung, Joe Orton]\n\n  *) mod_ssl: Fix startup failure in 2.4.40 with SSLCertificateChainFile\n     configured for a domain managed by mod_md.  [Stefan Eissing]\n\nChanges with Apache 2.4.40\n\n  *) core, mod_rewrite: Set PCRE_DOTALL by default. Revert via \n     RegexDefaultOptions -DOTALL [Yann Ylavic]\n\n  *) core: Remove request details from built-in error documents [Eric Covener]\n\n  *) mod_http2: core setting \"LimitRequestFieldSize\" is not additionally checked on\n     merged header fields, just as HTTP/1.1 does. [Stefan Eissing, Michael Kaufmann]\n\n  *) mod_http2: fixed a bug that prevented proper stream cleanup when connection\n     throttling was in place. Stream resets by clients on streams initiated by them\n     are counted as possible trigger for throttling. [Stefan Eissing]\n\n  *) mod_http2/mpm_event: Fixes the behaviour when a HTTP/2 connection has nothing\n     more to write with streams ongoing (flow control block). The timeout waiting\n     for the client to send WINODW_UPDATE was incorrectly KeepAliveTimeout and not\n     Timeout as it should be. Fixes PR 63534. [Yann Ylavic, Stefan Eissing]\n\n  *) mod_proxy_balancer: Load balancer required byrequests when bytraffic chosen.\n     PR 62372. [Jim Jagielski]\n\n  *) mod_proxy_hcheck: Create the configuration for mod_proxy_hcheck\n     when used in BalancerMember. PR 60757. [Jean-Frederic Clere]\n\n  *) mod_proxy_hcheck: Mute extremely frequent debug message. [Yann Ylavic]\n\n  *) mod_ssl/mod_md: reversing dependency by letting mod_ssl offer hooks for\n     adding certificates and keys to a virtual host. An additional hook allows\n     answering special TLS connections as used in ACME challenges.\n     Adding 2 new hooks for init/get of OCSP stapling status information when\n     other modules want to provide those. Falls back to own implementation with\n     same behaviour as before.\n     [Stefan Eissing]\n  \n  *) mod_md: new features\n     - protocol\n       - supports the ACMEv2 protocol. It is the default and will be used on the next\n         certificate renewal, unless another \"MDCertificateAuthority\" is configured\n       - ACMEv2 endpoints use the GET via empty POST way of accessing resources, see\n         announcement by Let's Encrypt:       \n         https://community.letsencrypt.org/t/acme-v2-scheduled-deprecation-of-unauthenticated-resource-gets/74380\n     - challenges\n       - new challenge method 'tls-alpn-01' implemented\n       - challenge type 'tls-sni-01' has been removed as CAs do not offer this any longer\n       - supports command configuration to setup/teardown 'dns-01' challenges\n       - supports wildcard certificates when dns challenges are configured\n     - status information and monitoring\n       - a domain exposes its status at https://<domain>/.httpd/certificate-status\n       - Managed Domains are now in Apache's 'server-status' page\n       - A new handler 'md-status' exposes verbose status information in JSON format\n     - new directives\n       - \"MDCertificateFile\" and \"MDCertificateKeyFile\" to configure a\n         Managed Domain that uses static files. Auto-renewal is turned off for those.\n       - \"MDMessageCmd\" that is invoked on several events: 'renewed', 'expiring' and\n         'errored'.\n       - \"MDWarnWindow\" directive to configure when expiration warnings shall be issued.\n     [Stefan Eissing]\n\n  *) mod_mime_magic: Fix possible corruption of returned strings.\n     [Christophe Jaillet]\n\n  *) Default \"conf/magic\": Fix pattern for \"audio/x-wav\" for WAV files,\n     remove \"audio/unknown\" pattern for other RIFF files.\n     [\u00c0ngel Oll\u00e9 Bl\u00e1zquez <aollebla redhat.com>]\n\n  *) mod_proxy_http2: fixing a potential NULL pointer use in logging.\n     [Christophe Jaillet, Dr Silvio Cesare InfoSect]\n\n  *) mod_dav: Reduce the amount of memory needed when doing PROPFIND's on large\n     collections by improving the memory management. [Joe Orton, Ruediger Pluem]\n\n  *) mod_proxy_http2: adding support for handling trailers in both directions.\n     PR 63502. [Stefan Eissing]\n\n  *) mod_proxy_http: forward 100-continue, and minimize race conditions when\n     reusing backend connections. PR 60330. [Yann Ylavic, Jean-Frederic Clere]\n\n  *) mod_proxy_balancer: Fix some HTML syntax issues.  [Christophe Jaillet]\n\n  *) When using mod_status with the Event MPM, report the number of requests\n     associated with an active connection in the \"ACC\" field. Previously\n     zero was always reported with this MPM.  PR60647. [Eric Covener]\n\n  *) mod_http2: remove the no longer existing h2_ngn_shed.c from Cmake.\n     [Stefan Eissing]\n\n  *) mod_proxy/ssl: Proxy SSL client certificate configuration and other proxy\n     SSL configurations broken inside <Proxy> context.  PR 63430.\n     [Ruediger Pluem, Yann Ylavic]\n\n  *) mod_proxy: allow SSLProxyCheckPeer* usage for all proxy modules.\n     PR 61857.  [Markus Gausling <markusgausling googlemail.com>, Yann Ylavic]\n\n  *) mod_reqtimeout: Fix default rates missing (not applied) in 2.4.39.\n     PR 63325. [Yann Ylavic]\n\n  *) mod_info: Fix output of server settings for PIPE_BUF in mod_info in\n     the rare case that PIPE_BUF is defined. [Rainer Jung]\n\n  *) mod_md: Store permissions are enforced on file creation, enforcing restrictions in\n     spite of umask. Fixes <https://github.com/icing/mod_md/issues/117>. [Stefan Eissing]\n\nChanges with Apache 2.4.39\n\n  *) SECURITY: CVE-2019-0197 (cve.mitre.org)\n     mod_http2: fixes a possible crash when HTTP/2 was enabled for a http:\n     host or H2Upgrade was enabled for h2 on a https: host. An Upgrade\n     request from http/1.1 to http/2 that was not the first request on a\n     connection could lead to a misconfiguration and crash. Servers that\n     never enabled the h2 protocol or only enabled it for https: and\n     did not set \"H2Upgrade on\" are unaffected by this issue.\n     [Stefan Eissing]\n\n  *) SECURITY: CVE-2019-0196 (cve.mitre.org)\n     mod_http2: using fuzzed network input, the http/2 request\n     handling could be made to access freed memory in string\n     comparison when determining the method of a request and\n     thus process the request incorrectly. [Stefan Eissing]\n\n  *) SECURITY: CVE-2019-0211 (cve.mitre.org)\n     MPMs unix: Fix a local privilege escalation vulnerability by not\n     maintaining each child's listener bucket number in the scoreboard,\n     preventing unprivileged code like scripts run by/on the server (e.g. via\n     mod_php) from modifying it persistently to abuse the privileged main\n     process.  [Charles Fol <folcharles gmail.com>, Yann Ylavic]\n\n  *) SECURITY: CVE-2019-0217 (cve.mitre.org)\n     mod_auth_digest: Fix a race condition checking user credentials which\n     could allow a user with valid credentials to impersonate another,\n     under a threaded MPM.  PR 63124.  [Simon Kappel <simon.kappel axis.com>]\n\n  *) SECURITY: CVE-2019-0215 (cve.mitre.org)\n     mod_ssl: Fix access control bypass for per-location/per-dir client\n     certificate verification in TLSv1.3.\n\n  *) SECURITY: CVE-2019-0220 (cve.mitre.org)\n     Merge consecutive slashes in URL's. Opt-out with\n     `MergeSlashes OFF`. [Eric Covener]\n\n  *) mod_proxy/ssl: Cleanup per-request SSL configuration anytime a backend\n     connection is recycled/reused to avoid a possible crash with some SSLProxy\n     configurations in <Location> or <Proxy> context. PR 63256. [Yann Ylavic]\n\n  *) mod_log_config: Support %{c}h for conn-hostname, %h for useragent_host\n     PR 55348\n\n  *) mod_socache_redis: Support for Redis as socache storage provider.\n\n  *) core: new configuration option 'MergeSlashes on|off' that controls handling of\n     multiple, consecutive slash ('/') characters in the path component of the request URL.\n     [Eric Covener]\n     \n  *) mod_http2: when SSL renegotiation is inhibited and a 403 ErrorDocument is\n     in play, the proper HTTP/2 stream reset did not trigger with H2_ERR_HTTP_1_1_REQUIRED.\n     Fixed. [Michael Kaufmann] \n\n  *) mod_http2: new configuration directive: `H2Padding numbits` to control \n     padding of HTTP/2 payload frames. 'numbits' is a number from 0-8,\n     controlling the range of padding bytes added to a frame. The actual number\n     added is chosen randomly per frame. This applies to HEADERS, DATA and PUSH_PROMISE\n     frames equally. The default continues to be 0, e.g. no padding. [Stefan Eissing] \n  \n  *) mod_http2: ripping out all the h2_req_engine internal features now that mod_proxy_http2\n     has no more need for it. Optional functions are still declared but no longer implemented.\n     While previous mod_proxy_http2 will work with this, it is recommended to run the matching\n     versions of both modules. [Stefan Eissing]\n  \n  *) mod_proxy_http2: changed mod_proxy_http2 implementation and fixed several bugs which\n     resolve PR63170. The proxy module does now a single h2 request on the (reused)\n     connection and returns. [Stefan Eissing]\n  \n  *) mod_http2/mod_proxy_http2: proxy_http2 checks correct master connection aborted status \n     to trigger immediate shutdown of backend connections. This is now always signalled\n     by mod_http2 when the the session is being released. \n     proxy_http2 now only sends a PING frame to the backend when there is not already one\n     in flight. [Stefan Eissing]\n\n  *) mod_proxy_http2: fixed an issue where a proxy_http2 handler entered an infinite \n     loop when encountering certain errors on the backend connection. \n     See <https://bz.apache.org/bugzilla/show_bug.cgi?id=63170>. [Stefan Eissing]\n\n  *) mod_http2: Configuration directives H2Push and H2Upgrade can now be specified per \n     Location/Directory, e.g. disabling PUSH for a specific set of resources. [Stefan Eissing]\n\n  *) mod_http2: HEAD requests to some module such as mod_cgid caused the stream to\n     terminate improperly and cause a HTTP/2 PROTOCOL_ERROR. \n     Fixes <https://github.com/icing/mod_h2/issues/167>. [Michael Kaufmann]\n\n  *) http: Fix possible empty response with mod_ratelimit for HEAD requests.\n     PR 63192. [Yann Ylavic]\n\n  *) mod_cache_socache: Avoid reallocations and be safe with outgoing data\n     lifetime. [Yann Ylavic]\n\n  *) mod_http2: enable re-use of slave connections again. Fixed slave connection\n     keepalives counter. [Stefan Eissing]\n\n  *) mod_reqtimeout: Allow to configure (TLS-)handshake timeouts.\n     PR 61310. [Yann Ylavic]\n\n  *) core: Split out the ability to parse wildcard files and directories\n     from the Include/IncludeOptional directives into a generic set of\n     functions ap_dir_nofnmatch() and ap_dir_fnmatch(). [Graham Leggett]\n\n  *) mod_proxy_wstunnel: Fix websocket proxy over UDS.\n     PR 62932 <pavel dcmsys.com>\n\n  *) mod_ssl: Don't unset FIPS mode on restart unless it's forced by\n     configuration (SSLFIPS on) and not active by default in OpenSSL.\n     PR 63136. [Yann Ylavic]\n\nChanges with Apache 2.4.38\n\n  *) SECURITY: CVE-2018-17199 (cve.mitre.org)\n     mod_session: mod_session_cookie does not respect expiry time allowing\n     sessions to be reused.  [Hank Ibell]\n\n  *) SECURITY: CVE-2018-17189 (cve.mitre.org)\n     mod_http2: fixes a DoS attack vector. By sending slow request bodies\n     to resources not consuming them, httpd cleanup code occupies a server\n     thread unnecessarily. This was changed to an immediate stream reset\n     which discards all stream state and incoming data.  [Stefan Eissing]\n\n  *) SECURITY: CVE-2019-0190 (cve.mitre.org)\n     mod_ssl: Fix infinite loop triggered by a client-initiated\n     renegotiation in TLSv1.2 (or earlier) with OpenSSL 1.1.1 and\n     later.  PR 63052.  [Joe Orton]\n\n  *) mod_ssl: Clear retry flag before aborting client-initiated renegotiation.\n     PR 63052 [Joe Orton]\n\n  *) mod_negotiation: Treat LanguagePriority as case-insensitive to match\n     AddLanguage behavior and HTTP specification. PR 39730 [Christophe Jaillet]\n  \n  *) mod_md: incorrect behaviour when synchronizing ongoing ACME challenges\n     have been fixed. [Michael Kaufmann, Stefan Eissing]\n  \n  *) mod_setenvif: We can have expressions that become true if a regex pattern\n     in the expression does NOT match. In this case val is NULL\n     and we should just set the value for the environment variable \n     like in the pattern case. [Ruediger Pluem]\n\n  *) mod_session: Always decode session attributes early. [Hank Ibell]\n\n  *) core: Incorrect values for environment variables are substituted when\n     multiple environment variables are specified in a directive. [Hank Ibell]\n\n  *) mod_rewrite: Only create the global mutex used by \"RewriteMap prg:\" when\n     this type of map is present in the configuration.  PR62311.  \n     [Hank Ibell <hwibell gmail.com>]\n\n  *) mod_dav: Fix invalid Location header when a resource is created by\n     passing an absolute URI on the request line [Jim Jagielski]\n\n  *) mod_session_cookie: avoid duplicate Set-Cookie header in the response.\n     [Emmanuel Dreyfus <manu@netbsd.org>, Luca Toscano]\n\n  *) mod_ssl: clear *SSL errors before loading certificates and checking\n     afterwards. Otherwise errors are reported when other SSL using modules\n     are in play. Fixes PR 62880. [Michael Kaufmann]\n\n  *) mod_ssl: Fix the error code returned in an error path of\n     'ssl_io_filter_handshake()'. This messes-up error handling performed\n     in 'ssl_io_filter_error()' [Yann Ylavic]\n\n  *) mod_ssl: Fix $HTTPS definition for \"SSLEngine optional\" case, and fix\n     authz provider so \"Require ssl\" works correctly in HTTP/2.\n     PR 61519, 62654.  [Joe Orton, Stefan Eissing]\n\n  *) mod_proxy: If ProxyPassReverse is used for reverse mapping of relative\n     redirects, subsequent ProxyPassReverse statements, whether they are\n     relative or absolute, may fail.  PR 60408.  [Peter Haworth <pmh1wheel gmail.com>]\n  \n  *) mod_lua: Now marked as a stable module [https://s.apache.org/Xnh1]\n\nChanges with Apache 2.4.37\n\n  *) mod_ssl: Fix HTTP/2 failures when using OpenSSL 1.1.1. [Rainer Jung]\n\n  *) mod_ssl: Fix crash during SSL renegotiation with OptRenegotiate set,\n     when client certificates are available from the original handshake\n     but were originally not verified and should get verified now.\n     This is a regression in 2.4.36 (unreleased). [Ruediger Pluem]\n\n  *) mod_ssl: Correctly merge configurations that have client certificates set\n     by SSLProxyMachineCertificate{File|Path}. [Ruediger Pluem]\n\nChanges with Apache 2.4.36\n\n  *) mod_brotli, mod_deflate: Restore the separate handling of 304 Not Modified\n     responses. Regression introduced in 2.4.35.\n\n  *) mod_proxy_scgi, mod_proxy_uwsgi: improve error handling when sending the\n     body of the response. [Jim Jagielski]\n\n  *) mpm_event: Stop issuing AH00484 \"server reached MaxRequestWorkers...\" when\n     there are still idle threads available. When there are less idle threads than\n     MinSpareThreads, issue new one-time message AH10159. Matches worker MPM.\n     [Eric Covener]\n\n  *) mod_http2: adding defensive code for stream EOS handling, in case the request handler\n     missed to signal it the normal way (eos buckets). Addresses github issues \n     https://github.com/icing/mod_h2/issues/164, https://github.com/icing/mod_h2/issues/167\n     and https://github.com/icing/mod_h2/issues/170. [Stefan Eissing] \n\n  *) ab: Add client certificate support.  PR 55774.  [Graham Leggett]\n\n  *) ab: Disable printing temp key for OpenSSL before\n     version 1.0.2. SSL_get_server_tmp_key is not available\n     there. [Rainer Jung]\n\n  *) mod_ssl: Fix a regression that the configuration settings for verify mode\n     and verify depth were taken from the frontend connection in case of\n     connections by the proxy to the backend. PR 62769. [Ruediger Pluem]\n\n  *) MPMs: Initialize all runtime/asynchronous objects on a dedicated pool and\n     before signals handling to avoid lifetime issues on restart or shutdown.\n     PR 62658. [Yann Ylavic]\n\n  *) mod_ssl: Add support for OpenSSL 1.1.1 and TLSv1.3.  TLSv1.3 has\n     behavioural changes compared to v1.2 and earlier; client and\n     configuration changes should be expected.  SSLCipherSuite is\n     enhanced for TLSv1.3 ciphers, but applies at vhost level only.\n     [Stefan Eissing, Yann Ylavic, Ruediger Pluem, Joe Orton]\n\n  *) mod_auth_basic: Be less tolerant when parsing the credencial. Only spaces\n     should be accepted after the authorization scheme. \\t are also tolerated.\n     [Christophe Jaillet]\n\n  *) mod_socache_redis: New socache submodule provider to allow use\n     of Redis as storage backend. [Jim Jagielski]\n\n  *) mod_proxy_hcheck: Fix issues with interval determination. PR 62318\n     [Jim Jagielski]\n\n  *) mod_proxy_hcheck: Fix issues with TCP health checks. PR 61499\n     [Dominik Stillhard <dominik.stillhard united-security-providers.ch>]\n\n  *) mod_proxy_hcheck: take balancer's SSLProxy* directives into account.\n     [Jim Jagielski]\n\n  *) mod_status, mod_echo: Fix the display of client addresses.\n    They were truncated to 31 characters which is not enough for IPv6 addresses.\n    This is done by deprecating the use of the 'client' field and using\n    the new 'client64' field in worker_score.\n    PR 54848 [Bernhard Schmidt <berni birkenwald de>, Jim Jagielski]\n\nChanges with Apache 2.4.35\n\n  *) http: Enforce consistently no response body with both 204 and 304\n     statuses.  [Yann Ylavic]\n\n  *) mod_status: Cumulate CPU time of exited child processes in the\n     \"cu\" and \"cs\" values. Add CPU time of the parent process to the\n     \"c\" and \"s\" values.\n     [Rainer Jung]\n\n  *) mod_proxy: Improve the balancer member data shown in mod_status when\n     \"ProxyStatus\" is \"On\": add \"busy\" count and show byte counts in\n     auto mode always in units of kilobytes.  [Rainer Jung]\n\n  *) mod_status: Add cumulated response duration time in milliseconds.\n     [Rainer Jung]\n\n  *) mod_status: Complete the data shown for async MPMs in \"auto\" mode.\n     Added number of processes, number of stopping processes and number\n     of busy and idle workers.  [Rainer Jung]\n\n  *) mod_ratelimit: Don't interfere with \"chunked\" encoding, fixing regression\n     introduced in 2.4.34.  PR 62568.  [Yann Ylavic]\n\n  *) mod_proxy: Remove load order and link dependency between mod_lbmethod_*\n     modules and mod_proxy. PR 62557. [Ruediger Pluem, William Rowe]\n\n  *) Allow the argument to <IfFile>, <IfDefine>, <IfSection>, <IfDirective>,\n     and <IfModule> to be quoted.  This is primarily for the benefit of\n     <IfFile>. [Eric Covener]\n\n  *) mod_watchdog: Correct some log messages.  [Rainer Jung]\n\n  *) mod_md: When the last domain name from an MD is moved to another one,\n     that now empty MD gets moved to the store archive. PR 62572. \n     [Stefan Eissing]\n\n  *) mod_ssl: Fix merging of SSLOCSPOverrideResponder.  [Jeff Trawick,\n     [Frank Meier <frank meier ergon.ch>]\n\n  *) mod_proxy_balancer: Restore compatibility with APR 1.4.  [Joe Orton]\n\nChanges with Apache 2.4.34\n\n  *) SECURITY: CVE-2018-8011 (cve.mitre.org)\n     mod_md: DoS via Coredumps on specially crafted requests\n\n  *) SECURITY: CVE-2018-1333 (cve.mitre.org)\n     mod_http2: DoS for HTTP/2 connections by specially crafted requests\n\n  *) Introduce zh-cn and zh-tw (simplified and traditional Chinese) error\n     document translations. [CodeingBoy, popcorner]\n\n  *) event: avoid possible race conditions with modules on the child pool.\n     [Stefan Fritsch]\n\n  *) mod_proxy: Fix a corner case where the ProxyPassReverseCookieDomain or\n     ProxyPassReverseCookiePath directive could fail to update correctly\n     'domain=' or 'path=' in the 'Set-Cookie' header.  PR 61560.\n     [Christophe Jaillet]\n\n  *) mod_ratelimit: fix behavior when proxing content. PR 62362.\n     [Luca Toscano, Yann Ylavic]\n\n  *) core: Re-allow '_' (underscore) in hostnames.\n     [Eric Covener]\n\n  *) mod_authz_core: If several parameters are used in a AuthzProviderAlias\n     directive, if these parameters are not enclosed in quotation mark, only\n     the first one is handled. The other ones are silently ignored.\n     Add a message to warn about such a spurious configuration.\n     PR 62469 [Hank Ibell <hwibell gmail.com>, Christophe Jaillet]\n\n  *) mod_md: improvements and bugfixes\n     - MDNotifyCmd now takes additional parameter that are passed on to the called command.\n     - ACME challenges have better checks for interference with other modules\n     - ACME challenges are only handled for domains managed by the module, allowing\n       other ACME clients to operate for other domains in the server.\n     - better libressl integration\n\n  *) mod_proxy_wstunnel: Add default schema ports for 'ws' and 'wss'.\n     PR 62480. [Lubos Uhliarik <luhliari redhat.com>}\n\n  *) logging: Some early logging-related startup messages could be lost\n     when using syslog for the global ErrorLog. [Eric Covener]\n\n  *) mod_cache: Handle case of an invalid Expires header value RFC compliant\n     like the case of an Expires time in the past: allow to overwrite the\n     non-caching decision using CacheStoreExpired and respect Cache-Control\n     \"max-age\" and \"s-maxage\".  [Rainer Jung]\n\n  *) mod_xml2enc: Fix forwarding of error metadata/responses. PR 62180.\n     [Micha Lenk <micha lenk.info>, Yann Ylavic]\n\n  *) mod_proxy_http: Fix response header thrown away after the previous one\n     was considered too large and truncated. PR 62196. [Yann Ylavic]\n\n  *) core: Add and handle AP_GETLINE_NOSPC_EOL flag for ap_getline() family\n     of functions to consume the end of line when the buffer is exhausted.\n     PR 62198. [Yann Ylavic]\n\n  *) mod_proxy_http: Add new worker parameter 'responsefieldsize' to\n     allow maximum HTTP response header size to be increased past 8192\n     bytes.  PR 62199.  [Hank Ibell <hwibell gmail.com>]\n\n  *) mod_ssl: Extend SSLOCSPEnable with mode 'leaf' that only checks the leaf\n     of a certificate chain.  PR62112.\n     [Ricardo Martin Camarero <rickyepoderi yahoo.es>]\n\n  *) http: Fix small memory leak per request when handling persistent\n     connections.  [Ruediger Pluem, Joe Orton]\n\n  *) mod_proxy_html: Fix variable interpolation and memory allocation failure\n     in ProxyHTMLURLMap.  PR 62344.  [Ewald Dieterich <ewald mailbox.org>]\n\n  *) mod_remoteip: Fix RemoteIP{Trusted,Internal}ProxyList loading broken by 2.4.30.\n     PR 62220.  [Chritophe Jaillet, Yann Ylavic]\n\n  *) mod_remoteip: When overriding the useragent address from X-Forwarded-For,\n     zero out what had been initialized as the connection-level port.  PR59931.\n     [Hank Ibell <hwibell gmail.com>]\n\n  *) core: In ONE_PROCESS/debug mode, cleanup everything when exiting.\n     [Yann Ylavic]\n\n  *) mod_proxy_balancer: Add hot spare member type and corresponding flag (R).\n     Hot spare members are used as drop-in replacements for unusable workers\n     in the same load balancer set. This differs from hot standbys which are\n     only used when all workers in a set are unusable. PR 61140. [Jim Riggs]\n\n  *) suexec: Add --enable-suexec-capabilites support on Linux, to use\n     setuid/setgid capability bits rather than a setuid root binary.\n     [Joe Orton]\n\n  *) suexec: Add support for logging to syslog as an alternative to\n     logging to a file; use --without-suexec-logfile --with-suexec-syslog.\n     [Joe Orton]\n\n  *) mod_ssl: Restore 2.4.29 behaviour in SSL vhost merging/enabling\n     which broke some rare but previously-working configs.  [Joe Orton]\n\n  *) core, log: improve sanity checks for the ErrorLog's syslog config, and\n     explicitly allow only lowercase 'syslog' settings. PR 62102\n     [Luca Toscano, Jim Riggs, Christophe Jaillet]\n\n  *) mod_http2: accurate reporting of h2 data input/output per request via\n     mod_logio. Fixes an issue where output sizes where counted n-times on\n     reused slave connections.  [Stefan Eissing]\n     See github issue: https://github.com/icing/mod_h2/issues/158\n\n  *) mod_http2: Fix unnecessary timeout waits in case streams are aborted.\n     [Stefan Eissing]\n\n  *) mod_http2: restoring the v1.10.16 keepalive timeout behaviour of mod_http2.\n     [Stefan Eissing]\n\n  *) mod_proxy: Do not restrict the maximum pool size for backend connections\n     any longer by the maximum number of threads per process and use a better\n     default if mod_http2 is loaded.\n     [Yann Ylavic, Ruediger Pluem, Stefan Eissing, Gregg Smith]\n\n  *) mod_slotmem_shm: Add generation number to shm filename to fix races\n     with graceful restarts. PRs 62044 and 62308.  [Jim Jagielski, Yann Ylavic]\n\n  *) core: Preserve the original HTTP request method in the '%<m' LogFormat\n     when an path-based ErrorDocument is used.  PR 62186.\n     [Micha Lenk <micha lenk.info>]\n\n  *) mod_remoteip: make proxy-protocol work on slave connections, e.g. in\n     HTTP/2 requests.  [Stefan Eissing]\n     See also https://github.com/roadrunner2/mod-proxy-protocol/issues/6\n\n  *) mod_ssl: Fix merging of proxy SSL context outside <Proxy> sections,\n     regression introduced in 2.4.30. PR 62232. [Rainer Jung, Yann Ylavic]\n\n  *) mod_md: Fix compilation with OpenSSL before version 1.0.2.  [Rainer Jung]\n\n  *) mod_dumpio: do nothing below log level TRACE7.  [Yann Ylavic]\n\n  *) mod_remoteip: Restore compatibility with APR 1.4 (apr_sockaddr_is_wildcard).\n     [Eric Covener]\n\n  *) core: On ECBDIC platforms, some errors related to oversized headers\n     may be misreported or be logged as ASCII escapes.  PR 62200\n     [Hank Ibell <hwibell gmail.com>]\n\n  *) mod_ssl: Fix cmake-based build.  PR 62266.  [Rainer Jung]\n\n  *) core: Add <IfFile>, <IfDirective> and <IfSection> conditional\n     section containers.  [Eric Covener, Joe Orton]\n\n  *) rotatelogs: Add -D option to create parent directories.  PR 46669.\n     [Philippe Lantin <plantin cobaltgroup.com>, Ben Reser, Rainer Jung]\n\nChanges with Apache 2.4.33\n\n  *) core: Fix request timeout logging and possible crash for error_log hooks.\n     [Yann Ylavic]\n\n  *) mod_slomem_shm: Fix failure to create balancers's slotmems in Windows MPM,\n     where children processes need to attach them instead since they are owned\n     by the parent process already.  [Yann Ylavic]\n\n  *) ab: try all destination socket addresses returned by\n     apr_sockaddr_info_get instead of failing on first one when not available.\n     Needed for instance if localhost resolves to both ::1 and 127.0.0.1\n     e.g. if both are in /etc/hosts.  [Jan Kaluza]\n\n  *) ab: Use only one connection to determine working destination socket\n     address.  [Jan Kaluza]\n\n  *) ab: LibreSSL doesn't have or require Windows applink.c.  [Gregg L. Smith]\n\n  *) htpasswd/htdigest: Disable support for bcrypt on EBCDIC platforms.\n     apr-util's bcrypt implementation doesn't tolerate EBCDIC.  [Eric Covener]\n\n  *) htpasswd/htdbm: report the right limit when get_password() overflows.\n     [Yann Ylavic]\n\n  *) htpasswd: Don't fail in -v mode if password file is unwritable.\n     PR 61631.  [Joe Orton]\n\n  *) htpasswd: don't point to (unused) stack memory on output\n     to make static analysers happy.  PR 60634.\n     [Yann Ylavic, reported by shqking and Zhenwei Zou]\n\nChanges with Apache 2.4.32\n\n  *) mod_access_compat: Fail if a comment is found in an Allow or Deny\n     directive.  [Jan Kaluza]\n\n  *) mod_authz_host: Ignore comments after \"Require host\", logging a\n     warning, or logging an error if the line is otherwise empty.\n     [Jan Kaluza, Joe Orton]\n\n  *) rotatelogs: Fix expansion of %Z in localtime (-l) mode, and fix\n     Y2K38 bug.  [Joe Orton]\n\n  *) mod_ssl: Support SSL DN raw variable extraction without conversion\n     to UTF-8, using _RAW suffix on variable names.  [Joe Orton]\n\n  *) ab: Fix https:// connection failures (regression in 2.4.30); fix\n     crash generating CSV output for large -n.  [Joe Orton, Jan Kaluza]\n\nChanges with Apache 2.4.31 (not released)\n\n  *) mod_proxy_fcgi: Add the support for mod_proxy's flushpackets and flushwait\n     parameters. [Luca Toscano, Ruediger Pluem, Yann Ylavic]\n\n  *) mod_ldap: Avoid possible crashes, hangs, and busy loops due to\n     improper merging of the cache lock in vhost config.\n     PR 43164 [Eric Covener]\n\n  *) mpm_event: Do lingering close in worker(s).  [Yann Ylavic]\n\n  *) mpm_queue: Put fdqueue code in common for MPMs event and worker.\n     [Yann Ylavic]\n\nChanges with Apache 2.4.30 (not released)\n\n  *) SECURITY: CVE-2017-15710 (cve.mitre.org)\n     Out of bound write in mod_authnz_ldap with AuthLDAPCharsetConfig enabled\n     [Eric Covener, Luca Toscano, Yann Ylavic]\n\n  *) SECURITY: CVE-2018-1283 (cve.mitre.org)\n     mod_session: CGI-like applications that intend to read from mod_session's\n     'SessionEnv ON' could be fooled into reading user-supplied data instead.\n     [Yann Ylavic]\n\n  *) SECURITY: CVE-2018-1303 (cve.mitre.org)\n     mod_cache_socache: Fix request headers parsing to avoid a possible crash\n     with specially crafted input data.  [Ruediger Pluem]\n\n  *) SECURITY: CVE-2018-1301 (cve.mitre.org)\n     core: Possible crash with excessively long HTTP request headers.\n     Impractical to exploit with a production build and production LogLevel.\n     [Yann Ylavic]\n\n  *) SECURITY: CVE-2017-15715 (cve.mitre.org)\n     core: Configure the regular expression engine to match '$' to the end of\n     the input string only, excluding matching the end of any embedded\n     newline characters. Behavior can be changed with new directive\n     'RegexDefaultOptions'. [Yann Ylavic]\n\n  *) SECURITY: CVE-2018-1312 (cve.mitre.org)\n     mod_auth_digest: Fix generation of nonce values to prevent replay\n     attacks across servers using a common Digest domain. This change\n     may cause problems if used with round robin load balancers. PR 54637\n     [Stefan Fritsch]\n\n  *) SECURITY: CVE-2018-1302 (cve.mitre.org)\n     mod_http2: Potential crash w/ mod_http2.\n     [Stefan Eissing]\n\n  *) mod_proxy: Worker schemes and hostnames which are too large are no\n     longer fatal errors; it is logged and the truncated values are stored.\n     [Jim Jagielski]\n\n  *) mod_proxy: Allow setting options to globally defined balancer from\n     ProxyPass used in VirtualHost. Balancers are now merged using the new\n     merge_balancers method which merges the balancers options.  [Jan Kaluza]\n\n  *) logresolve: Fix incorrect behavior or segfault if -c flag is used\n     Fixes: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=823259\n     [Stefan Fritsch]\n\n  *) mod_remoteip: Add support for PROXY protocol (code donated by Cloudzilla).\n     Add ability for PROXY protocol processing to be optional to donated code.\n     See also: http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt\n     [Cloudzilla/roadrunner2@GitHub, Jim Jagielski, Daniel Ruggeri]\n\n  *) mod_proxy, mod_ssl: Handle SSLProxy* directives in <Proxy> sections,\n     allowing per backend TLS configuration.  [Yann Ylavic]\n\n  *) mod_proxy_uwsgi: Add in UWSGI proxy (sub)module. [Roberto De Ioris,\n     Jim Jagielski]\n\n  *) mod_proxy_balancer,mod_slotmem_shm: Rework SHM reuse/deletion to not\n     depend on the number of restarts (non-Unix systems) and preserve shared\n     names as much as possible on configuration changes for SHMs and persisted\n     files.  PR 62044.  [Yann Ylavic, Jim Jagielski]\n\n  *) mod_http2: obsolete code removed, no more events on beam pool destruction,\n     discourage content encoders on http2-status response (where they do not work).\n     [Stefan Eissing]\n\n  *) mpm_event: Let the listener thread do its maintenance job on resources\n     shortage.  PR 61979.  [Yann Ylavic]\n\n  *) mpm_event: Wakeup the listener to re-enable listening sockets.\n     [Yann Ylavic]\n\n  *) mod_ssl: The SSLCompression directive will now give an error if used\n     with an OpenSSL build which does not support any compression methods.\n     [Joe Orton]\n\n  *) mpm_event,worker: Mask signals for threads created by modules in child\n     init, so that they don't receive (implicitly) the ones meant for the MPM.\n     PR 62009. [Armin Abfalterer <a.abfalterer gmail com>, Yann Ylavic]\n\n  *) mod_md: new experimental, module for managing domains across virtual hosts,\n     implementing the Let's Encrypt ACMEv1 protocol to signup and renew\n     certificates. Please read the modules documentation for further instructions\n     on how to use it. [Stefan Eissing]\n\n  *) mod_proxy_html: skip documents shorter than 4 bytes\n     PR 56286 [Micha Lenk <micha lenk info>]\n\n  *) core, mpm_event: Avoid a small memory leak of the scoreboard handle, for\n     the lifetime of the connection, each time it is processed by MPM event.\n     [Yann Ylavic]\n\n  *) mpm_event: Update scoreboard status for KeepAlive state.  [Yann Ylavic]\n\n  *) mod_ldap: Fix a case where a full LDAP cache would continually fail to\n     purge old entries and log AH01323. PR61891.\n     [Hendrik Harms <hendrik.harms gmail.com>]\n\n  *) mpm_event: close connections not reported as handled by any module to\n     avoid losing track of them and leaking scoreboard entries.  PR 61551.\n     [Yann Ylavic]\n\n  *) core: A signal received while stopping could have crashed the main\n     process.  PR 61558.  [Yann Ylavic]\n\n  *) mod_ssl: support for mod_md added. [Stefan Eissing]\n\n  *) mod_proxy_html: process parsed comments immediately.\n     Fixes bug (seen in the wild when used with IBM's HTTPD bundle)\n     where parsed comments may be lost. [Nick Kew]\n\n  *) mod_proxy_html: introduce doctype for HTML 5 [Nick Kew]\n\n  *) mod_proxy_html: fix typo-bug processing \"strict\" vs \"transitional\"\n     HTML/XHTML.  PR 56457  [Nick Kew]\n\n  *) mpm_event: avoid a very unlikely race condition between the listener and\n     the workers when the latter fails to add a connection to the pollset.\n     [Yann Ylavic]\n\n  *) core: silently ignore a not existent file path when IncludeOptional\n     is used. PR 57585. [Alberto Murillo Silva <powerbsd yahoo.com>, Luca Toscano]\n\n  *) mod_macro: fix usability of globally defined macros in .htaccess files.\n     PR 57525.  [Jose Kahan <jose w3.org>, Yann Ylavic]\n\n  *) mod_rewrite, core: add the Vary header when a condition evaluates to true\n     and the related RewriteRule is used in a Directory context\n     (triggering an internal redirect). [Luca Toscano]\n\n  *) ab: Make the TLS layer aware that the underlying socket is nonblocking,\n     and use/handle POLLOUT where needed to avoid busy IOs and recover write\n     errors when appropriate.  [Yann Ylavic]\n\n  *) ab: Keep reading nonblocking to exhaust TCP or SSL buffers when previous\n     read was incomplete (the SSL case can cause the next poll() to timeout\n     since data are buffered already).  PR 61301 [Luca Toscano, Yann Ylavic]\n\n  *) mod_http2: avoid unnecessary data retrieval for a trace log. Allow certain\n     information retrievals on null bucket beams where it makes sense. [Stefan Eissing]\n\nChanges with Apache 2.4.29\n\n  *) mod_unique_id: Use output of the PRNG rather than IP address and\n     pid, avoiding sleep() call and possible DNS issues at startup,\n     plus improving randomness for IPv6-only hosts.  [Jan Kaluza]\n\n  *) mod_rewrite, core: Avoid the 'Vary: Host' response header when HTTP_HOST\n     is used in a condition that evaluates to true. PR 58231 [Luca Toscano, Yann Ylavic]\n\n  *) mod_http2: v0.10.12, removed optimization for mutex handling in bucket\n     beams that could lead to assertion failure in edge cases.\n     [Stefan Eissing]\n\n  *) mod_proxy: Fix regression for non decimal loadfactor parameter introduced\n     in 2.4.28.  [Jim Jagielski]\n\n  *) mod_authz_dbd: fix a segmentation fault if AuthzDBDQuery is not set.\n     PR 61546.  [Lubos Uhliarik <luhliari redhat.com>]\n\n  *) mod_rewrite: Add support for starting External Rewriting Programs\n     as non-root user on UNIX systems by specifying username and group\n     name as third argument of RewriteMap directive.  [Jan Kaluza]\n\n  *) core: Rewrite the Content-Length filter to avoid excessive memory\n     consumption. Chunked responses will be generated in more cases\n     than in previous releases.  PR 61222.  [Joe Orton, Ruediger Pluem]\n\n  *) mod_ssl: Fix SessionTicket callback return value, which does seem to\n     matter with OpenSSL 1.1. [Yann Ylavic]\n\nChanges with Apache 2.4.28\n\n  *) SECURITY: CVE-2017-9798 (cve.mitre.org)\n     Corrupted or freed memory access. <Limit[Except]> must now be used in the\n     main configuration file (httpd.conf) to register HTTP methods before the\n     .htaccess files.  [Yann Ylavic]\n\n  *) event: Avoid possible blocking in the listener thread when shutting down\n     connections. PR 60956.  [Yann Ylavic]\n\n  *) mod_speling: Don't embed referer data in a link in error page.\n     PR 38923 [Nick Kew]\n\n  *) htdigest: prevent a buffer overflow when a string exceeds the allowed max\n     length in a password file. PR 61511.\n     [Luca Toscano, Hanno B\u00f6ck <hanno hboeck de>]\n\n  *) mod_proxy: loadfactor parameter can now be a decimal number (eg: 1.25).\n     [Jim Jagielski]\n\n  *) mod_proxy_wstunnel: Allow upgrade to any protocol dynamically.\n     PR 61142.\n\n  *) mod_watchdog/mod_proxy_hcheck: Time intervals can now be specified\n     down to the millisecond. Supports 'mi' (minute), 'ms' (millisecond),\n     's' (second) and 'hr' (hour!) time suffixes. [Jim Jagielski]\n\n  *) mod_http2: Fix for stalling when more than 32KB are written to a\n     suspended stream.  [Stefan Eissing]\n\n  *) build: allow configuration without APR sources.  [Jacob Champion]\n\n  *) mod_ssl, ab: Fix compatibility with LibreSSL.  PR 61184.\n     [Bernard Spil <brnrd freebsd.org>, Michael Schlenker <msc contact.de>,\n      Yann Ylavic]\n\n  *) core/log: Support use of optional \"tag\" in syslog entries.\n     PR 60525. [Ben Rubson <ben.rubson gmail.com>, Jim Jagielski]\n\n  *) mod_proxy: Fix ProxyAddHeaders merging.  [Joe Orton]\n\n  *) core: Disallow multiple Listen on the same IP:port when listener buckets\n     are configured (ListenCoresBucketsRatio > 0), consistently with the single\n     bucket case (default), thus avoiding the leak of the corresponding socket\n     descriptors on graceful restart.  [Yann Ylavic]\n\n  *) event: Avoid listener periodic wake ups by using the pollset wake-ability\n     when available.  PR 57399.  [Yann Ylavic, Luca Toscano]\n\n  *) mod_proxy_wstunnel: Fix detection of unresponded request which could have\n     led to spurious HTTP 502 error messages sent on upgrade connections.\n     PR 61283.  [Yann Ylavic]\n\nChanges with Apache 2.4.27\n\n  *) SECURITY: CVE-2017-9789 (cve.mitre.org)\n     mod_http2: Read after free. When under stress, closing many connections,\n     the HTTP/2 handling code would sometimes access memory after it has been\n     freed, resulting in potentially erratic behaviour.\n     [Stefan Eissing]\n\n  *) SECURITY: CVE-2017-9788 (cve.mitre.org)\n     mod_auth_digest: Uninitialized memory reflection.  The value placeholder\n     in [Proxy-]Authorization headers type 'Digest' was not initialized or\n     reset before or between successive key=value assignments.\n     [William Rowe]\n\n  *) COMPATIBILITY: mod_lua: Remove the undocumented exported 'apr_table'\n     global variable when using Lua 5.2 or later. This was exported as a\n     side effect from luaL_register, which is no longer supported as of\n     Lua 5.2 which deprecates pollution of the global namespace.\n     [Rainer Jung]\n\n  *) COMPATIBILITY: mod_http2: Disable and give warning when using Prefork.\n     The server will continue to run, but HTTP/2 will no longer be negotiated.\n     [Stefan Eissing]\n\n  *) COMPATIBILITY: mod_proxy_fcgi: Revert to 2.4.20 FCGI behavior for the\n     default ProxyFCGIBackendType, fixing a regression with PHP-FPM. PR 61202.\n     [Jacob Champion, Jim Jagielski]\n\n  *) mod_lua: Improve compatibility with Lua 5.1, 5.2 and 5.3.\n     PR58188, PR60831, PR61245. [Rainer Jung]\n\n  *) mod_http2: Simplify ready queue, less memory and better performance. Update\n     mod_http2 version to 1.10.7. [Stefan Eissing]\n\n  *) Allow single-char field names inadvertently disallowed in 2.4.25.\n     PR 61220. [Yann Ylavic]\n\n  *) htpasswd / htdigest: Do not apply the strict permissions of the temporary\n     passwd file to a possibly existing passwd file. PR 61240. [Ruediger Pluem]\n\n  *) core: Avoid duplicate HEAD in Allow header.\n     This is a regression in 2.4.24 (unreleased), 2.4.25 and 2.4.26.\n     PR 61207. [Christophe Jaillet]\n\nChanges with Apache 2.4.26\n\n  *) SECURITY: CVE-2017-7679 (cve.mitre.org)\n     mod_mime can read one byte past the end of a buffer when sending a\n     malicious Content-Type response header.  [Yann Ylavic]\n\n  *) SECURITY: CVE-2017-7668 (cve.mitre.org)\n     The HTTP strict parsing changes added in 2.2.32 and 2.4.24 introduced a\n     bug in token list parsing, which allows ap_find_token() to search past\n     the end of its input string. By maliciously crafting a sequence of\n     request headers, an attacker may be able to cause a segmentation fault,\n     or to force ap_find_token() to return an incorrect value.\n     [Jacob Champion]\n\n  *) SECURITY: CVE-2017-7659 (cve.mitre.org)\n     A maliciously constructed HTTP/2 request could cause mod_http2 to\n     dereference a NULL pointer and crash the server process.\n\n  *) SECURITY: CVE-2017-3169 (cve.mitre.org)\n     mod_ssl may dereference a NULL pointer when third-party modules call\n     ap_hook_process_connection() during an HTTP request to an HTTPS port.\n     [Yann Ylavic]\n\n  *) SECURITY: CVE-2017-3167 (cve.mitre.org)\n     Use of the ap_get_basic_auth_pw() by third-party modules outside of the\n     authentication phase may lead to authentication requirements being\n     bypassed.\n     [Emmanuel Dreyfus <manu netbsd.org>, Jacob Champion, Eric Covener]\n\n  *) HTTP/2 support no longer tagged as \"experimental\" but is instead considered\n     fully production ready.\n\n  *) mod_http2: Fix for possible CPU busy loop introduced in v1.10.3 where a stream may keep\n     the session in continuous check for state changes that never happen.\n     [Stefan Eissing]\n\n  *) mod_proxy_wstunnel: Add \"upgrade\" parameter to allow upgrade to other\n     protocols.  [Jean-Frederic Clere]\n\n  *) MPMs unix: Place signals handlers and helpers out of DSOs to avoid\n     a possible crash if a signal is caught during (graceful) restart.\n     PR 60487.  [Yann Ylavic]\n\n  *) mod_rewrite: When a substitution is a fully qualified URL, and the\n     scheme/host/port matches the current virtual host, stop interpreting the\n     path component as a local path just because the first component of the\n     path exists in the filesystem.  Adds RewriteOption \"LegacyPrefixDocRoot\"\n     to revert to previous behavior. PR60009.\n     [Hank Ibell <hwibell gmail.com>]\n\n  *) core: ap_parse_form_data() URL-decoding doesn't work on EBCDIC\n     platforms. PR61124. [Hank Ibell <hwibell gmail.com>]\n\n  *) ab: enable option processing for setting a custom HTTP method also for\n     non-SSL builds.  [Rainer Jung]\n\n  *) core: EBCDIC fixes for interim responses with additional headers.\n     [Eric Covener]\n\n  *) mod_env: when processing a 'SetEnv' directive, warn if the environment\n     variable name includes a '='. It is likely a configuration error.\n     PR 60249 [Christophe Jaillet]\n\n  *) Evaluate nested If/ElseIf/Else configuration blocks.\n     [Luca Toscano, Jacob Champion]\n\n  *) mod_rewrite: Add 'BNP' (backreferences-no-plus) flag to RewriteRule to\n     allow spaces in backreferences to be encoded as %20 instead of '+'.\n     [Eric Covener]\n\n  *) mod_rewrite: Add the possibility to limit the escaping to specific\n     characters in backreferences by listing them in the B flag.\n     [Eric Covener]\n\n  *) mod_substitute: Fix spurious AH01328 (Line too long) errors on EBCDIC\n     systems.  [Eric Covener]\n\n  *) mod_http2: fail requests without ERROR log in case we need to read interim\n     responses and see only garbage. This can happen if proxied servers send\n     data where none should be, e.g. a body for a HEAD request. [Stefan Eissing]\n\n  *) mod_proxy_http2: adding support for Reverse Proxy Request headers.\n     [Stefan Eissing]\n\n  *) mod_http2: fixed possible deadlock that could occur when connections were\n     terminated early with ongoing streams. Fixed possible hanger with timeout\n     on race when connection considers itself idle. [Stefan Eissing]\n\n  *) mod_http2: MaxKeepAliveRequests now limits the number of times a\n     slave connection gets reused. [Stefan Eissing]\n\n  *) mod_brotli: Add a new module for dynamic Brotli (RFC 7932) compression.\n     [Evgeny Kotkov]\n\n  *) mod_proxy_http2: Fixed bug in re-attempting proxy requests after\n     connection error. Reliability of reconnect handling improved.\n     [Stefan Eissing]\n\n  *) mod_http2: better performance, eliminated need for nested locks and\n     thread privates. Moving request setups from the main connection to the\n     worker threads. Increase number of spare connections kept.\n     [Stefan Eissing]\n\n  *) mod_http2: input buffering and dynamic flow windows for increased\n     throughput. Requires nghttp2 >= v1.5.0 features. Announced at startup\n     in mod_http2 INFO log as feature 'DWINS'. [Stefan Eissing]\n\n  *) mod_http2: h2 workers with improved scalability for better scheduling\n     performance. There are H2MaxWorkers threads created at start and the\n     number is kept constant for now. [Stefan Eissing]\n\n  *) mod_http2: obsoleted option H2SessionExtraFiles, will be ignored and\n     just log a warning. [Stefan Eissing]\n\n  *) mod_autoindex: Add IndexOptions UseOldDateFormat to allow the date\n     format from 2.2 in the Last Modified column. PR60846.\n     [Hank Ibell <hwibell gmail.com>]\n\n  *) core: Add %{REMOTE_PORT} to the expression parser. PR59938\n     [Hank Ibell <hwibell gmail.com>]\n\n  *) mod_cache: Fix a regression in 2.4.25 for the forward proxy case by\n     computing and using the same entity key according to when the cache\n     checks, loads and saves the request.\n     PR 60577.  [Yann Ylavic]\n\n  *) mod_proxy_hcheck: Don't validate timed out responses.  [Yann Ylavic]\n\n  *) mod_proxy_hcheck: Ensure thread-safety when concurrent healthchecks are\n     in use (ProxyHCTPsize > 0).  PR 60071.  [Yann Ylavic, Jim Jagielski]\n\n  *) core: %{DOCUMENT_URI} used in nested SSI expressions should point to the\n     URI originally requested by the user, not the nested documents URI. This\n     restores the behavior of this variable to match the \"legacy\" SSI parser.\n     PR60624. [Hank Ibell <hwibell gmail.com>]\n\n  *) mod_proxy_fcgi: Add ProxyFCGISetEnvIf to fixup CGI environment\n     variables just before invoking the FastCGI. [Eric Covener,\n     Jacob Champion]\n\n  *) mod_proxy_fcgi: Return to 2.4.20-and-earlier behavior of leaving\n     a \"proxy:fcgi://\" prefix in the SCRIPT_FILENAME environment variable by\n     default.  Add ProxyFCGIBackendType to allow the type of backend to be\n     specified so these kinds of fixups can be restored without impacting\n     FPM. PR60576 [Eric Covener, Jim Jagielski]\n\n  *) mod_ssl: work around leaks on (graceful) restart. [Yann Ylavic]\n\n  *) mod_ssl: Add support for OpenSSL 1.1.0. [Rainer Jung]\n\n  *) Don't set SO_REUSEPORT unless ListenCoresBucketsRatio is greater\n     than zero.  [Eric Covener]\n\n  *) mod_http2: moving session cleanup to pre_close hook to avoid races with\n     modules already shut down and slave connections still operating.\n     [Stefan Eissing]\n\n  *) mod_lua: Support for Lua 5.3\n\n  *) mod_proxy_http2: support for ProxyPreserverHost directive. [Stefan Eissing]\n\n  *) mod_http2: fix for crash when running out of memory.\n     [Robert Swiecki <robert swiecki.net>, Stefan Eissing]\n\n  *) mod_proxy_fcgi: Return HTTP 504 rather than 503 in case of proxy timeout.\n     [Luca Toscano]\n\n  *) mod_http2: not counting file buckets again stream max buffer limits.\n     Effectively transferring static files in one step from slave to master\n     connection. [Stefan Eissing]\n\n  *) mod_http2: comforting ap_check_pipeline() on slave connections\n     to facilitate reuse (see https://github.com/icing/mod_h2/issues/128).\n     [Stefan Eissing, reported by Armin Abfalterer]\n\n  *) mod_http2: http/2 streams now with state handling/transitions as defined\n     in RFC7540. Stream cleanup/connection shutdown reworked to become easier\n     to understand/maintain/debug. Added many asserts on state and cleanup\n     transitions. [Stefan Eissing]\n\n  *) mod_auth_digest: Use an anonymous shared memory segment by default,\n     preventing startup failure after unclean shutdown.  PR 54622.\n     [Jan Kaluza]\n\n  *) mod_filter: Fix AddOutputFilterByType with non-content-level filters.\n     PR 58856. [Micha Lenk <micha lenk.info>]\n\n  *) mod_watchdog: Fix semaphore leak over restarts.  [Jim Jagielski]\n\n  *) mod_http2: regression fix on PR 59348, on graceful restart, ongoing\n     streams are finished normally before the final GOAWAY is sent.\n     [Stefan Eissing, <slavko gmail.com>]\n\n  *) mod_proxy: Allow the per-request environment variable \"no-proxy\" to\n     be used as an alternative to ProxyPass /path !. This is primarily\n     to set exceptions for ProxyPass specified in <Location> context.\n     Use SetEnvIf, not SetEnv. PR 60458.  [Eric Covener]\n\n  *) mod_http2: fixes PR60599, sending proper response for conditional requests\n     answered by mod_cache. [Jeff Wheelhouse, Stefan Eissing]\n\n  *) mod_http2: rework of stream resource cleanup to avoid a crash in a close\n     of a lingering connection. Prohibit special file bucket beaming for\n     shared buckets. Files sent in stream output now use the stream pool\n     as read buffer, reducing memory footprint of connections.\n     [Yann Ylavic, Stefan Eissing]\n\n  *) mod_proxy_fcgi, mod_fcgid: Fix crashes in ap_fcgi_encoded_env_len() when\n     modules add empty environment variables to the request. PR 60275.\n     [<alex2grad AT gmail.com>]\n\n  *) mod_http2: fix for possible page fault when stream is resumed during\n     session shutdown. [sidney-j-r-m (github)]\n\n  *) mod_http2: fix for h2 session ignoring new responses while already\n     open streams continue to have data available. [Stefan Eissing]\n\n  *) mod_http2: adding support for MergeTrailers directive. [Stefan Eissing]\n\n  *) mod_http2: limiting DATA frame sizes by TLS record sizes in use on the\n     connection. Flushing outgoing frames earlier. [Stefan Eissing]\n\n  *) mod_http2: cleanup beamer registry on server reload.  PR 60510.\n     [Pavel Mateja <pavel verotel.cz>, Stefan Eissing]\n\n  *) mod_proxy_{ajp,fcgi}: Fix a possible crash when reusing an established\n     backend connection, happening with LogLevel trace2 or higher configured,\n     or at any log level with compilers not detected as C99 compliant (e.g.\n     MSVC on Windows).  [Yann Ylavic]\n\n  *) mod_ext_filter: Don't interfere with \"error buckets\" issued by other\n     modules. PR 60375.  [Eric Covener, Lubos Uhliarik]\n\n  *) mod_http2: fixes https://github.com/icing/mod_h2/issues/126 e.g. beam\n     bucket lifetime handling when data is sent over temporary pools.\n     [Stefan Eissing]\n\nChanges with Apache 2.4.25\n\n  *) Fix some build issues related to various modules.\n     [Rainer Jung]\n\nChanges with Apache 2.4.24 (not released)\n\n  *) SECURITY: CVE-2016-8740 (cve.mitre.org)\n     mod_http2: Mitigate DoS memory exhaustion via endless\n     CONTINUATION frames.\n     [Naveen Tiwari <naveen.tiwari@asu.edu> and CDF/SEFCOM at Arizona State\n     University, Stefan Eissing]\n\n  *) SECURITY: CVE-2016-2161 (cve.mitre.org)\n     mod_auth_digest: Prevent segfaults during client entry allocation when\n     the shared memory space is exhausted.\n     [Maksim Malyutin <m.malyutin dsec.ru>, Eric Covener, Jacob Champion]\n\n  *) SECURITY: CVE-2016-0736 (cve.mitre.org)\n     mod_session_crypto: Authenticate the session data/cookie with a\n     MAC (SipHash) to prevent deciphering or tampering with a padding\n     oracle attack.  [Yann Ylavic, Colm MacCarthaigh]\n\n  *) SECURITY: CVE-2016-8743 (cve.mitre.org)\n     Enforce HTTP request grammar corresponding to RFC7230 for request lines\n     and request headers, to prevent response splitting and cache pollution by\n     malicious clients or downstream proxies. [William Rowe, Stefan Fritsch]\n\n  *) Validate HTTP response header grammar defined by RFC7230, resulting\n     in a 500 error in the event that invalid response header contents are\n     detected when serving the response, to avoid response splitting and cache\n     pollution by malicious clients, upstream servers or faulty modules.\n     [Stefan Fritsch, Eric Covener, Yann Ylavic]\n\n  *) core: Mitigate [f]cgi CVE-2016-5387 \"httpoxy\" issues.\n     [Dominic Scheirlinck <dominic vendhq.com>, Yann Ylavic]\n\n  *) mod_rewrite: Limit runaway memory use by short circuiting some kinds of\n     looping RewriteRules when the local path significantly exceeds\n     LimitRequestLine.  PR 60478. [Jeff Wheelhouse <apache wheelhouse.org>]\n\n  *) mod_ratelimit: Allow for initial \"burst\" amount at full speed before\n     throttling: PR 60145 [Andy Valencia <ajv-etradanalhos vsta.org>,\n     Jim Jagielski]\n\n  *) mod_socache_memcache: Provide memcache stats to mod_status.\n     [Jim Jagielski]\n\n  *) mod_file_cache: mod_file_cache should be able to serve files that\n     haven't had a Content-Type set via e.g. mod_mime. [Eric Covener]\n\n  *) http_filters: Fix potential looping in new check_headers() due to new\n     pattern of ap_die() from http header filter. Explicitly clear the\n     previous headers and body.\n\n  *) core: Drop Content-Length header and message-body from HTTP 204 responses.\n     PR 51350 [Luca Toscano]\n\n  *) mod_proxy: Honor a server scoped ProxyPass exception when ProxyPass is\n     configured in <Location>, like in 2.2. PR 60458.\n     [Eric Covener]\n\n  *) mod_lua: Fix default value of LuaInherit directive. It should be\n     'parent-first' instead of 'none', as per documentation.  PR 60419\n     [Christophe Jaillet]\n\n  *) core: New directive HttpProtocolOptions to control httpd enforcement\n     of various RFC7230 requirements. [Stefan Fritsch, William Rowe]\n\n  *) core: Permit unencoded ';' characters to appear in proxy requests and\n     Location: response headers. Corresponds to modern browser behavior.\n     [William Rowe]\n\n  *) core: ap_rgetline_core now pulls from r->proto_input_filters.\n\n  *) core: Correctly parse an IPv6 literal host specification in an absolute\n     URL in the request line. [Stefan Fritsch]\n\n  *) core: New directive RegisterHttpMethod for registering non-standard\n     HTTP methods. [Stefan Fritsch]\n\n  *) mod_socache_memcache: Pass expiration time through to memcached. PR 55445.\n     [Faidon Liambotis <paravoid debian.org>, Joe Orton]\n\n  *) mod_cache: Use the actual URI path and query-string for identifying the\n     cached entity (key), such that rewrites are taken into account when\n     running afterwards (CacheQuickHandler off).  PR 21935.  [Yann Ylavic]\n\n  *) mod_http2: new directive 'H2EarlyHints' to enable sending of HTTP status\n     103 interim responses. Disabled by default. [Stefan Eissing]\n\n  *) mod_ssl: Fix quick renegotiation (OptRenegotiaton) with no intermediate\n     in the client certificate chain.  PR 55786.  [Yann Ylavic]\n\n  *) event: Allow to use the whole allocated scoreboard (up to ServerLimit\n     slots) to avoid scoreboard full errors when some processes are finishing\n     gracefully. Also, make gracefully finishing processes close all\n     keep-alive connections. PR 53555. [Stefan Fritsch]\n\n  *) mpm_event: Don't take over scoreboard slots from gracefully finishing\n     threads. [Stefan Fritsch]\n\n  *) mpm_event: Free memory earlier when shutting down processes.\n     [Stefan Fritsch]\n\n  *) mod_status: Display the process slot number in the async connection\n     overview. [Stefan Fritsch]\n\n  *) mod_dir: Responses that go through \"FallbackResource\" might appear to\n     hang due to unterminated chunked encoding. PR58292. [Eric Covener]\n\n  *) mod_dav: Fix a potential cause of unbounded memory usage or incorrect\n     behavior in a routine that sends <DAV:response>'s to the output filters.\n     [Evgeny Kotkov]\n\n  *) mod_http2: new directive 'H2PushResource' to enable early pushes before\n     processing of the main request starts. Resources are announced to the\n     client in Link headers on a 103 early hint response.\n     All responses with status code <400 are inspected for Link header and\n     trigger pushes accordingly. 304 still does prevent pushes.\n     'H2PushResource' can mark resources as 'critical' which gives them higher\n     priority than the main resource. This leads to preferred scheduling for\n     processing and, when content is available, will send it first. 'critical'\n     is also recognized on Link headers. [Stefan Eissing]\n\n  *) mod_proxy_http2: uris in Link headers are now mapped back to a suitable\n     local url when available. Relative uris with an absolute path are mapped\n     as well. This makes reverse proxy mapping available for resources\n     announced in this header.\n     With 103 interim responses being forwarded to the main client connection,\n     this effectively allows early pushing of resources by a reverse proxied\n     backend server. [Stefan Eissing]\n\n  *) mod_proxy_http2: adding support for newly proposed 103 status code.\n     [Stefan Eissing]\n\n  *) mpm_unix: Apache fails to start if previously crashed then restarted with\n     the same PID (e.g. in container).  PR 60261.\n     [Val <valentin.bremond gmail.com>, Yann Ylavic]\n\n  *) mod_http2: unannounced and multiple interim responses (status code < 200)\n     are parsed and forwarded to client until a final response arrives.\n     [Stefan Eissing]\n\n  *) mod_proxy_http2: improved robustness when main connection is closed early\n     by resetting all ongoing streams against the backend.\n     [Stefan Eissing]\n\n  *) mod_http2: allocators from slave connections are released earlier,\n     resulting in less overall memory use on busy, long lived connections.\n     [Stefan Eissing]\n\n  *) mod_remoteip: Pick up where we left off during a subrequest rather\n     than running with the modified XFF but original TCP address.\n     PR 49839/PR 60251\n\n  *) http: Respond with \"408 Request Timeout\" when a timeout occurs while\n     reading the request body.  [Yann Ylavic]\n\n  *) mod_http2: connection shutdown revisited: corrected edge cases on\n     shutting down ongoing streams, changed log warnings to be less noisy\n     when waiting on long running tasks. [Stefan Eissing]\n\n  *) mod_http2: changed all AP_DEBUG_ASSERT to ap_assert to have them\n     available also in normal deployments. [Stefan Eissing]\n\n  *) mod_http2/mod_proxy_http2: 100-continue handling now properly implemented\n     up to the backend. Reused HTTP/2 proxy connections with more than a second\n     not used will block request bodies until a PING answer is received.\n     Requests headers are not delayed by this, since they are repeatable in\n     case of failure. This greatly increases robustness, especially with\n     busy server and/or low keepalive connections. [Stefan Eissing]\n\n  *) mod_proxy_http2: fixed duplicate symbols with mod_http2.\n     [Stefan Eissing]\n\n  *) mod_http2: rewrite of how responses and trailers are transferred between\n     master and slave connection. Reduction of internal states for tasks\n     and streams, stability. Heuristic id generation for slave connections\n     to better keep promise of connection ids unique at given point int time.\n     Fix for mod_cgid interop in high load situations.\n     Fix for handling of incoming trailers when no request body is sent.\n     [Stefan Eissing]\n\n  *) mod_http2: fix suspended handling for streams. Output could become\n     blocked in rare cases. [Stefan Eissing]\n\n  *) mpm_winnt: Prevent a denial of service when the 'data' AcceptFilter is in\n     use by replacing it with the 'connect' filter. PR 59970. [Jacob Champion]\n\n  *) mod_cgid: Resolve a case where a short CGI response causes a subsequent\n     CGI to be killed prematurely, resulting in a truncated subsequent\n     response. [Eric Covener]\n\n  *) mod_proxy_hcheck: Set health check URI and expression correctly for health\n     check worker. PR 60038 [zdeno <zdeno@scnet.sk>]\n\n  *) mod_http2: if configured with nghttp2 1.14.0 and onward, invalid request\n     headers will immediately reset the stream with a PROTOCOL error. Feature\n     logged by module on startup as 'INVHD' in info message.\n     [Stefan Eissing]\n\n  *) mod_http2: fixed handling of stream buffers during shutdown.\n     [Stefan Eissing]\n\n  *) mod_reqtimeout: Fix body timeout disabling for CONNECT requests to avoid\n     triggering mod_proxy_connect's AH01018 once the tunnel is established.\n     [Yann Ylavic]\n\n  *) ab: Set the Server Name Indication (SNI) extension on outgoing TLS\n     connections (unless -I is specified), according to the Host header (if\n     any) or the requested URL's hostname otherwise.  [Yann Ylavic]\n\n  *) mod_proxy_fcgi: avoid loops when ProxyErrorOverride is enabled\n     and the error documents are proxied. PR 55415. [Luca Toscano]\n\n  *) mod_proxy_fcgi: read the whole FCGI response even when the content\n     has not been modified (HTTP 304) or in case of a precondition failure\n     (HTTP 412) to avoid subsequent bogus reads and confusing\n     error messages logged. [Luca Toscano]\n\n  *) mod_http2: h2 status resource follows latest draft, see\n     http://www.ietf.org/id/draft-benfield-http2-debug-state-01.txt\n     [Stefan Eissing]\n\n  *) mod_http2: handling graceful shutdown gracefully, e.g. handling existing\n     streams to the end. [Stefan Eissing]\n\n  *) mod_proxy_{http,ajp,fcgi}: don't reuse backend connections with data\n     available before the request is sent.  PR 57832.  [Yann Ylavic]\n\n  *) mod_proxy_balancer: Prevent redirect loops between workers within a\n     balancer by limiting the number of redirects to the number balancer\n     members. PR 59864 [Ruediger Pluem]\n\n  *) mod_proxy: Correctly consider error response codes by the backend when\n     processing failonstatus. PR 59869 [Ruediger Pluem]\n\n  *) mod_dav: Add dav_get_provider_name() function to obtain the name\n     of the provider from mod_dav.  [Graham Leggett]\n\n  *) mod_dav: Add support for childtags to dav_error.\n     [Jari Urpalainen <jari.urpalainen nokia.com>]\n\n  *) mod_proxy_fcgi: Fix 2.4.23 breakage for mod_rewrite per-dir and query\n     string showing up in SCRIPT_FILENAME. PR59815\n\n  *) mod_include: Fix a potential memory misuse while evaluating expressions.\n     PR59844. [Eric Covener]\n\n  *) mod_http2: new H2CopyFiles directive that changes treatment of file\n     handles in responses. Necessary in order to fix broken lifetime handling\n     in modules such as mod_wsgi.\n\n  *) mod_http2: removing timeouts on master connection while requests are\n     being processed. Requests may timeout, but the master only times out when\n     no more requests are active. [Stefan Eissing]\n\n  *) mod_http2: fixes connection flush when answering SETTINGS without any\n     stream open. [Moto Ishizawa <@summerwind>, Stefan Eissing]\n\nChanges with Apache 2.4.23\n\n  *) mod_ssl: reset client-verify state of ssl when aborting renegotiations.\n     [Erki Aring <erki@example.ee>, Stefan Eissing]\n\n  *) mod_sed: Fix 'x' command processing. [Christophe Jaillet]\n\n  *) configure: Fix ./configure edge-case failures around dependencies\n     of mod_proxy_hcheck. [William Rowe, Ruediger Pluem, Jeff Trawick]\n\nChanges with Apache 2.4.22\n\n  *) mod_http2: fix for request abort when connections drops, introduced in\n     1.5.8\n\nChanges with Apache 2.4.21\n\n  *) core: Added support for HTTP code 451. PR 58985.\n     [Yehuda Katz <yehuda ymkatz.net>, Jim Jagielski]\n\n  *) ab: Use caseless matching for HTTP tokens (e.g. content-length). PR 59111.\n     [Yann Ylavic]\n\n  *) mod_http2: more rigid error handling in DATA frame assembly, leading\n     to deterministic connection errors if assembly fails.\n     [Stefan Eissing, Pal Nilsen <https://github.com/maedox>]\n\n  *) abs: Include OPENSSL_Applink when compiling on Windows, to resolve\n     failures under Visual Studio 2015 and other mismatched MSVCRT flavors.\n     PR59630 [Jan Ehrhardt <phpdev ehrhardt.nl>]\n\n  *) mod_ssl: Add \"no_crl_for_cert_ok\" flag to SSLCARevocationCheck directive\n     to opt-in previous behaviour (2.2) with CRLs verification when checking\n     certificate(s) with no corresponding CRL.  [Yann Ylavic]\n\n  *) mpm_event, mpm_worker: Fix computation of MinSpareThreads' lower bound\n     according the number of listeners buckets.  [Yann Ylavic]\n\n  *) Add ap_cstr_casecmp[n]() - placeholder of apr_cstr_casecmp[n] functions\n     for case-insensitive C/POSIX-locale token comparison.\n     [Jim Jagielski, William Rowe, Yann Ylavic, Branko \u010cibej]\n\n  *) mod_userdir: Constify and save a few bytes in the conf pool when\n     parsing the \"UserDir\" directive. [Christophe Jaillet]\n\n  *) mod_cache: Fix (max-stale with no '=') and enforce (check\n     integers after '=') Cache-Control header parsing.\n     [Christophe Jaillet]\n\n  *) core: Add -DDUMP_INCLUDES configtest option to show the tree\n     of Included configuration files.\n     [Jacob Champion <champion.pxi gmail.com>]\n\n  *) mod_proxy_fcgi: Avoid passing a filename of proxy:fcgi:// as\n     SCRIPT_FILENAME to a FastCGI server. PR59618.\n     [Jacob Champion <champion.pxi gmail.com>]\n\n  *) mod_dav: Add dav_get_provider_name() function to obtain the name\n     of the provider from mod_dav.\n     [Jari Urpalainen <jari.urpalainen nokia.com>]\n\n  *) mod_proxy_http2: properly care for HTTP2 flow control of the frontend\n     connection is HTTP/1.1. [Patch supplied by Evgeny Kotkov]\n\n  *) mod_http2: improved cleanup of connection/streams/tasks to always\n     have deterministic order regardless of event initiating it. Addresses\n     reported crashes due to memory read after free issues.\n     [Stefan Eissing]\n\n  *) mod_ssl: Correct the interaction between SSLProxyCheckPeerCN and newer\n     SSLProxyCheckPeerName directives since release 2.4.5, such that disabling\n     either disables both, and that enabling either triggers the new, more\n     comprehensive SSLProxyCheckPeerName behavior. Only a single configuration\n     remains to enable the legacy behavior, which is to explicitly disable\n     SSLProxyCheckPeerName, and enable SSLProxyCheckPeerCN. [William Rowe]\n\n  *) mod_include: add the <!--#comment ...> syntax in order to include comments\n     in a SSI file. [Christophe Jaillet based on a suggestion from Rob]\n\n  *) mod_http2: improved event handling for suspended streams, responses\n     and window updates. [Stefan Eissing]\n\n  *) mod_proxy_hcheck: Provide for dynamic background health\n     checks on reverse proxies associated with BalancerMember\n     workers. [Jim Jagielski]\n\n  *) mod_http2: Fix async write issue that led to selection of wrong timeout\n     vs. keepalive timeout selection for idle sessions. [Stefan Eissing]\n\n  *) mod_http2: checking LimitRequestLine, LimitRequestFields and\n     LimitRequestFieldSize configurated values for incoming streams. Returning\n     HTTP status 431 for too long/many headers fields and 414 for a too long\n     pseudo header. [Stefan Eissing]\n\n  *) mod_http2: tracking conn_rec->current_thread on slave connections, so\n     that mod_lua finds the correct one. Fixes PR 59542. [Stefan Eissing]\n\n  *) mod_proxy_http2: new experimental http2 proxy module for h2: and h2c: proxy\n     urls. Part of the httpd mod_proxy framework, common settings apply.\n     Requests from the same HTTP/2 frontend connection against the same backend\n     are aggregated on a single connection.\n     [Stefan Eissing]\n\n  *) mod_http2: slave connections have conn_rec->aborted flag set when a stream\n     has been reset by the client. [Stefan Eissing]\n\n  *) mod_http2: merge of some 2.4.x adaptions re filters on slave connections.\n     Small fixes in bucket beams when forwarding file buckets. Output handling\n     on master connection uses less FLUSH and passes automatically when more\n     than half of H2StreamMaxMemSize bytes have accumulated.\n     Workaround for http: when forwarding partial file buckets to keep the\n     output filter from closing these too early. [Stefan Eissing]\n\n  *) mod_http2: elimination of fixed master connection buffer for TLS\n     connections. New scratch bucket handling optimized for TLS write sizes.\n     File bucket data read directly into scratch buffers, avoiding one\n     copy. Non-TLS connections continue to pass buckets unchanged to the core\n     filters to allow sendfile() usage. [Stefan Eissing]\n\n  *) mod_http2/mod_proxy_http2: h2_request.c is no longer shared between these\n     modules. This simplifies building on platforms such as Windows, as module\n     reference used in logging is now clear. [Stefan Eissing]\n\n  *) Scoreboard: Fix a regression in 2.4.20 that causes wrong request data\n     to be displayed on the status page. PR 59333. [Yann Ylavic, William Rowe]\n\n  *) mod_http2: fixed a bug that caused mod_proxy_http2 to be called for window\n     updates on requests it had already reported done. Added synchronization\n     on early connection/stream close that lets ongoing requests safely drain\n     their input filters.\n     [Stefan Eissing]\n\n  *) mod_http2: scoreboard updates that summarize the h2 session (and replace\n     the last request information) will only happen when the session is idle or\n     in shutdown/done phase. [Stefan Eissing]\n\n  *) mod_http2: new \"bucket beam\" technology to transport buckets across\n     threads without buffer copy. Delaying response start until flush or\n     enough body data has been accumulated. Overall significantly smaller\n     memory footprint. [Stefan Eissing]\n\n  *) core: New CGIVar directive can configure REQUEST_URI to represent the\n     current URI being processed instead of always the original request.\n     [Jeff Trawick]\n\n  *) scoreboard/status: Restore behavior of showing workers' previous Client,\n     VHost and Request values when idle, like in 2.4.18 and earlier.\n\n  *) mod_http2: r->protocol changed to \"HTTP/2.0\" (was \"HTTP/2\") as this will\n     give expected syntax in CGI's SERVER_PROTOCOL is more compatible with\n     existing major/minor handling. Fixes PR 59313.\n\n  *) mod_http2: disabling mmap for file buckets transport due to segmenation\n     faults when files change on the fly.\n\nChanges with Apache 2.4.20\n\n  *) SECURITY: CVE-2016-1546 (cve.mitre.org)\n     mod_http2: restricting number of concurrent stream workers per connection\n     if client is slow.\n\n  *) core: Do not read .htaccess if AllowOverride and AllowOverrideList\n     are \"None\". PR 58528.\n     [Michael Schlenker <msc contact.de, Ruediger Pluem, Daniel Ruggeri]\n\n  *) mod_proxy_express: Fix possible use of DB handle after close.  PR 59230.\n     [Petr <pgajdos suse.cz>]\n\n  *) core/util_script: relax alphanumeric filter of environment variable names\n     on Windows to allow '(' and ')' for passing PROGRAMFILES(X86) et.al.\n     unadulterated in 64 bit versions of Windows. PR 46751.\n     [John <john leineweb de>]\n\n  *) mod_http2: incrementing keepalives on each request started so that logging\n     %k gives increasing numbers per master http2 connection.\n     New documented variables in env, usable in custom log formats: H2_PUSH,\n     H2_PUSHED, H2_PUSHED_ON, H2_STREAM_ID and H2_STREAM_TAG.\n     [Stefan Eissing]\n\n  *) mod_http2: more efficient passing of response bodies with less contention\n     and file bucket forwarding. [Stefan Eissing]\n\n  *) mod_http2: fix for missing score board updates on request count, fix for\n     memory leak on slave connection reuse. [Stefan Eissing]\n\n  *) mod_http2: Fix build on Windows from dsp files.\n     [Stefan Eissing]\n\nChanges with Apache 2.4.19\n\n  *) mod_ssl: Add missing Upgrade/Connection headers in case of TRACE or\n     OPTIONS * requests. PR 58688. [William Rowe]\n\n  *) mod_include: Add variable DOCUMENT_ARGS, with the arguments to the\n     request for the SSI document.  [Jeff Trawick]\n\n  *) mod_authz_host: Add a new \"forward-dns\" authorization type, not relying on\n     reverse DNS lookups.  [Fabien]\n\n  *) mod_proxy_http2: new experimental http2 proxy module for h2: and h2c: proxy\n     urls. Uses backend connections for concurrent requests if frontend\n     connection is http2 as well.\n     [Stefan Eissing]\n\n  *) mod_ssl: Add hooks to allow other modules to perform processing at\n     several stages of initialization and connection handling.  See\n     mod_ssl_openssl.h.  [Jeff Trawick]\n\n  *) mod_http2: disabling PUSH when client sends GOAWAY. Slave connections are\n     reused for several requests, improved performance and better memory use.\n     [Stefan Eissing]\n\n  *) mod_rewrite: Don't implicitly URL-escape the original query string\n     when no substitution has changed it (like PR50447 but server context)\n     [Evgeny Kotkov <evgeny.kotkov visualsvn.com>]\n\n  *) mod_http2: fixes problem with wrong lifetime of file buckets on main\n     connection. [Stefan Eissing]\n\n  *) mod_http2: fixes incorrect denial of requests without :authority header.\n     [Stefan Eissing]\n\n  *) mod_reqtimeout: Prevent long response times from triggering a timeout once\n     the request has been fully read.  PR 59045.  [Yann Ylavic]\n\n  *) ap_expr: expression support for variable HTTP2=on|off. [Stefan Eissing]\n\n  *) mod_http2: give control to async mpm for keepalive timeouts only when\n     no streams are open and even if only after 1 sec delay. Under load, event\n     mpm discards connections otherwise too quickly. [Stefan Eissing]\n\n  *) mod_ssl: Don't lose track of the SSL context if an unlikely failure occurs\n     in ssl_init_ssl_connection().  [Graham Leggett]\n\n  *) mod_rewrite: Add QSL|qslast flag to allow rewrites to files with\n     literal question marks in their names. PR 58777. [Eric Covener]\n\n  *) event: use pre_connection hook to properly initialize connection state for\n     slave connections. use protocol_switch hook to initialize server config\n     early based on SNI selected vhost.\n     [Stefan Eissing]\n\n  *) hostname: Test and log useragent_host per-request across various modules,\n     including the scoreboard, expression and rewrite engines, setenvif,\n     authz_host, access_compat, custom logging, ssl and REMOTE_HOST variables.\n     PR55348  [William Rowe]\n\n  *) core: Track the useragent_host per-request when mod_remoteip or similar\n     modules track a per-request useragent_ip.  Modules should be updated\n     to inquire for ap_get_useragent_host() in place of ap_get_remote_host().\n     [William Rowe]\n\n  *) core: fix a bug in <UnDefine ...> directive processing. When used, the last\n     <Define...>'ed variable was also withdrawn. PR 59019\n     [Christophe Jaillet]\n\n  *) mod_http2: Accept-Encoding is, when present on the initiating request,\n     added to push promises. This lets compressed content work in pushes.\n     by the client. [Stefan Eissing]\n\n  *) mod_http2: fixed possible read after free when streams were cancelled early\n     by the client. [Stefan Eissing]\n\n  *) mod_http2: fixed possible deadlock during connection shutdown. Thanks to\n     @FrankStolle for reporting and getting the necessary data.\n     [Stefan Eissing]\n\n  *) mod_http2: fixed apr_uint64_t formatting in a log statement to user proper\n     APR def, thanks to @Sp1l.\n\n  *) mod_http2: number of worker threads allowed to a connection is adjusting\n     dynamically. Starting with 4, the number is doubled when streams can be\n     served without block on http/2 connection flow. The number is halfed, when\n     the server has to wait on client flow control grants.\n     This can happen with a maximum frequency of 5 times per second.\n     When a connection occupies too many workers, repeatable requests\n     (GET/HEAD/OPTIONS) are cancelled and placed back in the queue. Should that\n     not suffice and a stream is busy longer than the server timeout, the\n     connection will be aborted with error code ENHANCE_YOUR_CALM.\n     This does *not* limit the number of streams a client may open, rather the\n     number of server threads a connection might use.\n     [Stefan Eissing]\n\n  *) mod_http2: allowing link header to specify multiple \"rel\" values,\n     space-separated inside a quoted string. Prohibiting push when Link\n     parameter \"nopush\" is present.\n     [Stefan Eissing]\n\n  *) mod_http2: reworked connection state handling. Idle connections accept a\n     GOAWAY from the client without further reply. Otherwise the\n     module makes a best effort to send one last GOAWAY to the client.\n\n  *) mod_http2: the values from standard directives Timeout and KeepAliveTimeout\n     properly are applied to http/2 connections.\n     [Stefan Eissing]\n\n  *) mod_http2: idle connections are returned to async mpms. new hook\n     \"pre_close_connection\" used to send GOAWAY frame when not already done.\n     Setting event mpm server config \"by hand\" for the main connection to\n     the correct negotiated server.\n     [Stefan Eissing]\n\n  *) mod_http2: keep-alive blocking reads are done with 1 second timeouts to\n     check for MPM stopping. Will announce early GOAWAY and finish processing\n     open streams, then close.\n     [Stefan Eissing]\n\n  *) mod_http2: bytes read/written on slave connections are reported via the\n     optional mod_logio functions. Fixes PR 58871.\n\n  *) prefork: Initialize the POD when running in ONE_PROCESS (or -X) mode to\n     avoid a crash.  [Jan Kaluza, Yann Ylavic]\n\n  *) mod_ssl: When SSLVerify is disabled (NONE), don't force a renegotiation if\n     the SSLVerifyDepth applied with the default/handshaken vhost differs from\n     the one applicable with the finally selected vhost.  [Yann Ylavic]\n\n  *) core: Ensure that httpd exits with an error status when the MPM fails\n     to run.  [Yann Ylavic]\n\n  *) mod_ssl: Fix a possible memory leak on restart for custom [EC]DH params.\n     [Jan Kaluza, Yann Ylavic]\n\n  *) mod_ssl: Add SSLOCSPProxyURL to add the possibility to do all queries\n     to OCSP responders through a HTTP proxy. [Ruediger Pluem]\n\n  *) mod_proxy: Play/restore the TLS-SNI on new backend connections which\n     had to be issued because the remote closed the previous/reusable one\n     during idle (keep-alive) time.  [Yann Ylavic]\n\n  *) mod_cache_socache: Fix a possible cached entity body corruption when it\n     is received from an origin server in multiple batches and forwarded by\n     mod_proxy.  [Yann Ylavic]\n\n  *) core: Add expression support to SetHandler.\n     [Eric Covener]\n\n  *) mod_remoteip: Prevent an external proxy from presenting an internal\n     proxy. PR 55962. [Mike Rumph]\n\n  *) core: Prevent a server crash in case of an invalid CONNECT request with\n     a custom error page for status code 400 that uses server side includes.\n     PR 58929 [Ruediger Pluem]\n\n  *) mod_ssl: handle TIMEOUT on empty SSL input as non-fatal, returning\n     APR_TIMEUP and preserving connection state for later retry.\n     [Stefan Eissing]\n\n  *) mod_ssl: Save some TLS record (application data) fragmentations by\n     including the last and subsequent suitable buckets when coalescing.\n     [Yann Ylavic]\n\n  *) mod_proxy_fcgi: Suppress HTTP error 503 and message 01075,\n     \"Error dispatching request\", when the cause appears to be\n     due to the client closing the connection.\n     PR58118.  [Tobias Adolph <adolph lrz.de>]\n\n  *) mod_cgid: Message AH02550, failure to flush a response to the client,\n     is now logged at TRACE1 level to match the underlying core output filter\n     severity.  [Eric Covener]\n\n  *) mime.types: add common extension \"m4a\" for MPEG 4 Audio.\n     PR 57895 [Dylan Millikin <dylan.millikin gmail.com>]\n\n  *) Added many log numbers to log statements that had none.\n     [Rainer Jung]\n\n  *) mod_log_config: Add GlobalLog to allow a globally defined log to\n     be inherited by virtual hosts that define a CustomLog.\n     [Edward Lu]\n\n  *) mod_http2: connections how keep a \"push diary\" where hashes of already\n     pushed resources are kept. See directive H2PushDiarySize for managing this.\n     Push diaries can be initialized by clients via the \"Cache-Digest\" request\n     header. This carries a base64url encoded. compressed Golomb set as described\n     in https://datatracker.ietf.org/doc/draft-kazuho-h2-cache-digest/\n     Introduced a status handler for HTTP/2 connections, giving various counters\n     and statistics about the current connection, plus its cache digest value\n     in a JSON record. Not a replacement for more HTTP/2 in the server status.\n     Configured as\n     <Location \"/http2-status\">\n         SetHandler http2-status\n     </Location>\n     [Stefan Eissing]\n\n  *) mod_http2: Fixed flushing of last GOAWAY frame. Previously, that frame\n     did not always reach the client, causing some to fail the next request.\n     Fixed calculation of last stream id accepted as described in rfc7540.\n     Reading in KEEPALIVE state now correctly shown in scoreboard.\n     Fixed possible race in connection shutdown after review by Ylavic.\n     Fixed segfault on connection shutdown, callback ran into a semi dismantled session.\n     [Stefan Eissing]\n\n  *) mod_http2: Added support for experimental accept-push-policy draft\n     (https://tools.ietf.org/html/draft-ruellan-http-accept-push-policy-00). Clients\n     may now influence server pushes by sending accept-push-policy headers.\n     [Stefan Eissing]\n\n  *) mod_http2: new r->subprocess_env variables HTTP2 and H2PUSH, set to \"on\"\n     when available for request.\n     [Stefan Eissing]\n\n  *) mod_http2: fixed bug in input window size calculation by moving chunked\n     request body encoding into later stage of processing. Fixes PR 58825.\n     [Stefan Eissing]\n\n  *) core: new hook \"pre_close_connection\" which is run before the lingering\n     close of connections is started. This gives protocol handlers one last\n     chance to use a connection before it goes down.\n     [Stefan Eissing]\n\n  *) mod_status/scoreboard: showing connection protocol in new column, new\n     ap_update_child_status methods for updating server/description. mod_ssl\n     sets vhost negotiated by servername directly.\n     [Stefan Eissing]\n\nChanges with Apache 2.4.18\n\n  *) mod_ssl: for all ssl_engine_vars.c lookups, fall back to master connection\n     if conn_rec itself holds no valid SSLConnRec*. Fixes PR58666.\n     [Stefan Eissing]\n\n  *) mod_http2: connection level window for flow control is set to protocol\n     maximum of 2GB-1, preventing window exhaustion when sending data on many\n     streams with higher cumulative window size.\n     Reducing write frequency unless push promises need to be flushed.\n     [Stefan Eissing]\n\n  *) mod_http2: required minimum version of libnghttp2 is 1.2.1\n     [Stefan Eissing]\n\n  *) mod_proxy_fdpass: Fix AH01153 error when using the default configuration.\n     In earlier version of httpd, you can explicitly set the 'flusher' parameter\n     to 'flush' as a workaround. (i.e. flusher=flush)\n     Add documentation for the 'flusher' parameter when defining a proxy worker.\n     [Christophe Jaillet]\n\n  *) mod_ssl: For the \"SSLStaplingReturnResponderErrors off\" case, make sure\n     to only staple responses with certificate status \"good\". [Kaspar Brand]\n\n  *) mod_http2: new directive 'H2PushPriority' to allow priority specifications\n     on server pushed streams according to their content-type.\n     [Stefan Eissing]\n\n  *) mod_http2: fixes crash on connection abort for a busy connection.\n     fixes crash on a request that did not produce any response.\n     [Stefan Eissing]\n\n  *) mod_http2: trailers are sent after response body if set in request_rec\n     trailers_out before the end-of-request bucket is sent through the\n     output filters. [Stefan Eissing]\n\n  *) mod_http2: incoming trailers (headers after request body) are properly\n     forwarded to the processing engine. [Stefan Eissing]\n\n  *) mod_http2: new directive 'H2Push' to en-/disable HTTP/2 server\n     pushes a server/virtual host. Pushes are initiated by the presence\n     of 'Link:' headers with relation 'preload' on a response. [Stefan Eissing]\n\n  *) mod_http2: write performance of http2 improved for larger resources,\n     especially static files. [Stefan Eissing]\n\n  *) core: if the first HTTP/1.1 request on a connection goes to a server that\n     prefers different protocols, these protocols are announced in a Upgrade:\n     header on the response, mentioning the preferred protocols.\n     [Stefan Eissing]\n\n  *) mod_http2: new directives 'H2TLSWarmUpSize' and 'H2TLSCoolDownSecs'\n     to control TLS record sizes during connection lifetime.\n     [Stefan Eissing]\n\n  *) mod_http2: new directive 'H2ModernTLSOnly' to enforce security\n     requirements of RFC 7540 on TLS connections. [Stefan Eissing]\n\n  *) core: add ap_get_protocol_upgrades() to retrieve the list of protocols\n     that a client could possibly upgrade to. Use in first request on a\n     connection to announce protocol choices. [Stefan Eissing]\n\n  *) mod_http2: reworked deallocation on connection shutdown and worker\n     abort. Separate parent pool for all workers. worker threads are joined\n     on planned worker shutdown. [Yann Ylavic, Stefan Eissing]\n\n  *) mod_ssl: when receiving requests for other virtual hosts than the handshake\n     server, the SSL parameters are checked for equality. With equal\n     configuration, requests are passed for processing. Any change will trigger\n     the old behaviour of \"421 Misdirected Request\".\n     SSL now remembers the cipher suite that was used for the last handshake.\n     This is compared against for any vhost/directory cipher specification.\n     Detailed examination of renegotiation is only done when these do not\n     match.\n     Renegotiation is 403ed when a master connection is present. Exact reason\n     is given additionally in a request note. [Stefan Eissing]\n\n  *) mod_ssl: Make the output filter more friendly with deferred write and\n     response pipelining. [Yann Ylavic, Joe Orton]\n\n  *) core: Fix scoreboard crash (SIGBUS) on hardware requiring strict 64bit\n     alignment (SPARC64, PPC64).  [Yann Ylavic]\n\n  *) mod_cache: Accept HT (Horizontal Tab) when parsing cache related header\n     fields as described in RFC7230. [Christophe Jaillet]\n\n  *) core/util_script: making REDIRECT_URL a full URL is now opt-in\n     via new 'QualifyRedirectURL' directive.\n\n  *) core: Limit to ten the number of tolerated empty lines between request,\n     and consume them before the pipelining check to avoid possible response\n     delay when reading the next request without flushing.  [Yann Ylavic]\n\n  *) mod_ssl: Extend expression parser registration to support ssl variables\n     in any expression using mod_rewrite syntax \"%{SSL:VARNAME}\" or function\n     syntax \"ssl(VARNAME)\". [Rainer Jung]\n\nChanges with Apache 2.4.17\n\n  *) mod_http2: added donated HTTP/2 implementation via core module. Similar\n     configuration options to mod_ssl. [Stefan Eissing]\n\n  *) mod_proxy: don't recycle backend announced \"Connection: close\" connections\n     to avoid reusing it should the close be effective after some new request\n     is ready to be sent.  [Yann Ylavic]\n\n  *) mod_substitute: Allow to configure the patterns merge order with the new\n     SubstituteInheritBefore on|off directive.  PR 57641\n     [Marc.Stern <Marc.Stern approach.be>, Yann Ylavic, William Rowe]\n\n  *) mod_proxy: Fix ProxySourceAddress binding failure with AH00938.\n     PR 56687.  [Arne de Bruijn <apache arbruijn.dds.nl>\n\n  *) mod_ssl: Support compilation against libssl built with OPENSSL_NO_SSL3,\n     and change the compiled-in default for SSL[Proxy]Protocol to \"all -SSLv3\",\n     in accordance with RFC 7568. PR 58349, PR 57120. [Kaspar Brand]\n\n  *) mod_ssl: append :!aNULL:!eNULL:!EXP to the cipher string settings,\n     instead of prepending !aNULL:!eNULL:!EXP: (as was the case in 2.4.7\n     and later). Enables support for configuring the SUITEB* cipher\n     strings introduced in OpenSSL 1.0.2. PR 58213. [Kaspar Brand]\n\n  *) mod_ssl: Add support for extracting the msUPN and dnsSRV forms\n     of subjectAltName entries of type \"otherName\" into\n     SSL_{CLIENT,SERVER}_SAN_OTHER_{msUPN,dnsSRV}_n environment\n     variables. Addresses PR 58020. [Jan Pazdziora <jpazdziora redhat.com>,\n     Kaspar Brand]\n\n  *) mod_logio: Fix logging of %^FB (time to first byte) on the first request on\n     an SSL connection.  PR 58454.\n     [Konstantin J. Chernov <k.j.chernov gmail.com>]\n\n  *) mod_cache: r->err_headers_out is not merged into\n     r->headers when mod_cache is enabled and the response\n     is cached for the first time. [Edward Lu]\n\n  *) mod_slotmem_shm: Fix slots/SHM files names on restart for systems that\n     can't create new (clear) slots while previous children gracefully stopping\n     still use the old ones (e.g. Windows, OS2). mod_proxy_balancer failed to\n     restart whenever the number of configured balancers/members changed during\n     restart.  PR 58024.  [Yann Ylavic]\n\n  *) core/util_script: make REDIRECT_URL a full URL.  PR 57785. [Nick Kew]\n\n  *) MPMs: Support SO_REUSEPORT to create multiple duplicated listener\n     records for scalability. [Yingqi Lu <yingqi.lu@intel.com>,\n     Jeff Trawick, Jim Jagielski, Yann Ylavic]\n\n  *) mod_alias: Introduce expression parser support for Alias, ScriptAlias\n     and Redirect. Limit Redirect expressions to directory (Location) context\n     and redirect statuses (implicit or explicit).\n     [Graham Leggett, Yann Ylavic, Ruediger Pluem]\n\n  *) mod_proxy: Fix a race condition that caused a failed worker to be retried\n     before the retry period is over. [Ruediger Pluem]\n\n  *) mod_autoindex: Allow autoindexes when neither mod_dir nor mod_mime are\n     loaded. [Eric Covener]\n\n  *) mod_rewrite:  Allow cookies set by mod_rewrite to contain ':' by accepting\n     ';' as an alternate separator.  PR47241.\n     [<bugzilla schermesser com>, Eric Covener]\n\n  *) apxs: Add HTTPD_VERSION and HTTPD_MMN to the variables available with\n     apxs -q. PR58202. [Daniel Shahaf <danielsh apache.org>]\n\n  *) mod_rewrite: Avoid a crash when lacking correct DB access permissions\n     when using RewriteMap with MapType dbd or fastdbd.  [Christophe Jaillet]\n\n  *) mod_authz_dbd: Avoid a crash when lacking correct DB access permissions.\n     PR 57868. [Jose Kahan <jose w3.org>, Yann Ylavic]\n\n  *) mod_socache_memcache: Add the 'MemcacheConnTTL' directive to control how\n     long to keep idle connections with the memcache server(s).\n     Change default value from 600 usec (!) to 15 sec. PR 58091\n     [Christophe Jaillet]\n\n  *) mod_dir: Prevent the internal identifier \"httpd/unix-directory\" from\n     appearing as a Content-Type response header when requests for a directory\n     are rewritten by mod_rewrite. [Eric Covener]\n\nChanges with Apache 2.4.16\n\n  *) http: Fix LimitRequestBody checks when there is no more bytes to read.\n     [Michael Kaufmann <mail michael-kaufmann.ch>]\n\n  *) mod_alias: Revert expression parser support for Alias, ScriptAlias\n     and Redirect due to a regression (introduced in 2.4.13, not released).\n\n  *) mod_reqtimeout: Don't let pipelining checks and keep-alive times interfere\n     with the timeouts computed for subsequent requests.  PR 56729.\n     [Eric Covener, Yann Ylavic]\n\n  *) core: Avoid a possible truncation of the faulty header included in the\n     HTML response when LimitRequestFieldSize is reached.  [Yann Ylavic]\n\n  *) mod_ldap: In some case, LDAP_NO_SUCH_ATTRIBUTE could be returned instead\n     of an error during a compare operation. [Eric Covener]\n\nChanges with Apache 2.4.15 (not released)\n\n  *) mod_ext_filter, mod_charset_lite: Avoid inadvertent filtering of protocol\n     data during read of chunked request bodies. PR 58049.\n     [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_ldap: Stop leaking LDAP connections when 'LDAPConnectionPoolTTL 0'\n     is configured.  PR 58037.  [Ted Phelps <phelps gnusto.com>]\n\n  *) core: Allow spaces after chunk-size for compatibility with implementations\n     using a pre-filled buffer.  [Yann Ylavic, Jeff Trawick]\n\n  *) mod_ssl: Remove deprecated SSLCertificateChainFile warning.\n     [Yann Ylavic]\n\nChanges with Apache 2.4.14 (not released)\n\n  *) SECURITY: CVE-2015-3183 (cve.mitre.org)\n     core: Fix chunk header parsing defect.\n     Remove apr_brigade_flatten(), buffering and duplicated code from\n     the HTTP_IN filter, parse chunks in a single pass with zero copy.\n     Limit accepted chunk-size to 2^63-1 and be strict about chunk-ext\n     authorized characters.  [Graham Leggett, Yann Ylavic]\n\n  *) SECURITY: CVE-2015-3185 (cve.mitre.org)\n     Replacement of ap_some_auth_required (unusable in Apache httpd 2.4)\n     with new ap_some_authn_required and ap_force_authn hook.  [Ben Reser]\n\nChanges with Apache 2.4.13 (not released)\n\n  *) SECURITY: CVE-2015-0253 (cve.mitre.org)\n     core: Fix a crash with ErrorDocument 400 pointing to a local URL-path\n     with the INCLUDES filter active, introduced in 2.4.11. PR 57531.\n     [Yann Ylavic]\n\n  *) SECURITY: CVE-2015-0228 (cve.mitre.org)\n     mod_lua: A maliciously crafted websockets PING after a script\n     calls r:wsupgrade() can cause a child process crash.\n     [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_proxy: Don't put the worker in error state for 500 or 503 errors\n     returned by the backend unless failonstatus is configured to.  PR 56925.\n     [Yann Ylavic]\n\n  *) core: Don't lowercase the argument to SetHandler if it begins with\n     \"proxy:unix\". PR 57968. [Eric Covener]\n\n  *) mod_ssl OCSP Stapling: Don't block initial handshakes while refreshing\n     the OCSP response for a different certificate.  mod_ssl has an additional\n     global mutex, \"ssl-stapling-refresh\".  PR 57131 (partial fix).\n     [Jeff Trawick]\n\n  *) mod_authz_dbm: Fix crashes when \"dbm-file-group\" is used and\n     authz modules were loaded in the \"wrong\" order.  [Joe Orton]\n\n  *) mod_authn_dbd, mod_authz_dbd, mod_session_dbd, mod_rewrite: Fix lifetime\n     of DB lookup entries independently of the selected DB engine.  PR 46421.\n     [Steven whitson <steven.whitson gmail com>, Jan Kaluza, Yann Ylavic].\n\n  *) In alignment with RFC 7525, the default recommended SSLCipherSuite\n     and SSLProxyCipherSuite now exclude RC4 as well as MD5. Also, the\n     default recommended SSLProtocol and SSLProxyProtocol directives now\n     exclude SSLv3. Existing configurations must be adjusted by the\n     administrator. [William Rowe]\n\n  *) mod_ssl: Add support for extracting subjectAltName entries of type\n     rfc822Name and dNSName into SSL_{CLIENT,SERVER}_SAN_{Email,DNS}_n\n     environment variables. Also addresses PR 57207. [Kaspar Brand]\n\n  *) dav_validate_request: avoid validating locks and ETags when there are\n     no If headers providing them on a resource we aren't modifying.\n     [Ben Reser]\n\n  *) mod_proxy_scgi: ProxySCGIInternalRedirect now allows an alternate\n     response header to be used by the application, for when the application\n     or framework is unable to return Location in the internal-redirect\n     form.  [Jeff Trawick]\n\n  *) core: Cleanup the request soon/even if some output filter fails to\n     handle the EOR bucket.  [Yann Ylavic]\n\n  *) mpm_event: Allow for timer events duplicates. [Jim Jagielski, Yann Ylavic]\n\n  *) mod_proxy, mod_ssl, mod_cache_socache, mod_socache_*: Support machine\n     readable server-status produced when using the \"?auto\" query string.\n     [Rainer Jung]\n\n  *) mod_status: Add more data to machine readable server-status produced\n     when using the \"?auto\" query string.  [Rainer Jung]\n\n  *) mod_ssl: Check for the Entropy Gathering Daemon (EGD) availability at\n     configure time (RAND_egd), and complain if SSLRandomSeed requires using\n     it otherwise.  [Bernard Spil <pil.oss gmail com>, Stefan Sperling,\n     Kaspar Brand]\n\n  *) mod_ssl: make sure to consistently output SSLCertificateChainFile\n     deprecation warnings, when encountered in a VirtualHost block.\n     [Falco Schwarz <hiding falco.me>]\n\n  *) mod_log_config: Add \"%{UNIT}T\" format to output request duration in\n     seconds, milliseconds or microseconds depending on UNIT (\"s\", \"ms\", \"us\").\n     [Ben Reser, Rainer Jung]\n\n  *) Allow FallbackResource to work when a directory is requested and\n     there is no autoindex nor DirectoryIndex.\n     [Jack <tjerk.meesters gmail.com>, Eric Covener]\n\n  *) mod_proxy_wstunnel: Bypass the handler while the connection is not\n     upgraded to WebSocket, so that other modules can possibly take over\n     the leading HTTP requests.  [Yann Ylavic]\n\n  *) mod_http: Fix incorrect If-Match handling. PR 57358\n     [Kunihiko Sakamoto <ksakamoto google.com>]\n\n  *) mod_ssl: Add a warning if protocol given in SSLProtocol or SSLProxyProtocol\n     will override other parameters given in the same directive. This could be\n     a missing + or - prefix.  PR 52820 [Christophe Jaillet]\n\n  *) core, modules: Avoid error response/document handling by the core if some\n     handler or input filter already did it while reading the request (causing\n     a double response body).  [Yann Ylavic]\n\n  *) mod_proxy_ajp: Fix client connection errors handling and logged status\n     when it occurs.  PR 56823.  [Yann Ylavic]\n\n  *) mod_proxy: Use the correct server name for SNI in case the backend\n     SSL connection itself is established via a proxy server.\n     PR 57139 [Szabolcs Gyurko <szabolcs gyurko.org>]\n\n  *) mod_ssl: Fix possible crash when loading server certificate constraints.\n     PR 57694. [Paul Spangler <paul.spangler ni com>, Yann Ylavic]\n\n  *) build: Don't load both mod_cgi and mod_cgid in the default configuration\n     if they're both built.  [olli hauer <ohauer gmx.de>]\n\n  *) mod_logio: Add LogIOTrackTTFB and %^FB logformat to log the time\n     taken to start writing response headers. [Eric Covener]\n\n  *) mod_ssl: Avoid compilation errors with LibreSSL related to\n     the use of ENGINE_CTRL_CHIL_SET_FORKCHECK.\n     [Stuart Henderson <sthen openbsd.org>]\n\n  *) mod_proxy_http: Use the \"Connection: close\" header for requests to\n     backends not recycling connections (disablereuse), including the default\n     reverse and forward proxies.  [Yann Ylavic]\n\n  *) mod_proxy: Add ap_connection_reusable() for checking if a connection\n     is reusable as of this point in processing.  [Jeff Trawick]\n\n  *) mod_proxy_wstunnel: Avoid an empty response by failing with 502 (Bad\n     Gateway) when no response is ever received from the backend.\n     [Jan Kaluza]\n\n  *) core_filters: Restore/disable TCP_NOPUSH option after non-blocking\n     sendfile.  PR 53253.  [Yann Ylavic]\n\n  *) mod_buffer: Forward flushed input data immediately and avoid (unlikely)\n     access to freed memory. [Yann Ylavic, Christophe Jaillet]\n\n  *) core: Add CGIPassAuth directive to control whether HTTP authorization\n     headers are passed to scripts as CGI variables.  PR 56855.  [Jeff\n     Trawick]\n\n  *) core: Initialize scoreboard's used optional functions on graceful restarts\n     to avoid a crash when relocation occurs.  PR 57177.  [Yann Ylavic]\n\n  *) mod_dav: Avoid a potential integer underflow in the lock timeout value sent\n     back to a client. The answer to a LOCK request could be an extremely large\n     integer if the time needed to lock the resource was longer that the\n     requested timeout given in the LOCK request. In such a case, we now answer\n     \"Second-0\".  PR55420\n     [Christophe Jaillet]\n\n  *) mod_cgid: Within the first minute of a server start or restart,\n     allow mod_cgid to retry connecting to its daemon process. Previously,\n     'No such file or directory: unable to connect to cgi daemon...' could\n     be logged without an actual retry. PR57685.\n     [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_proxy: Use the original (non absolute) form of the request-line's URI\n     for requests embedded in CONNECT payloads used to connect SSL backends via\n     a ProxyRemote forward-proxy.  PR 55892.  [Hendrik Harms <hendrik.harms\n     gmail com>, William Rowe, Yann Ylavic]\n\n  *) http: Make ap_die() robust against any HTTP error code and not modify\n     response status (finally logged) when nothing is to be done. PR 56035.\n     [Yann Ylavic]\n\n  *) mod_proxy_connect/wstunnel: If both client and backend sides get readable\n     at the same time, don't lose errors occurring while forwarding on the first\n     side when none occurs next on the other side, and abort.  [Yann Ylavic]\n\n  *) mod_rewrite: Improve relative substitutions in per-directory/htaccess\n     context for directories found by mod_userdir and mod_alias.  These no\n     longer require RewriteBase to be specified. [Eric Covener]\n\n  *) mod_proxy_http: Don't expect the backend to ack the \"Connection: close\" to\n     finally close those not meant to be kept alive by SetEnv proxy-nokeepalive\n     or force-proxy-request-1.0.  [Yann Ylavic]\n\n  *) core: If explicitly configured, use the KeepaliveTimeout value of the\n     virtual host which handled the latest request on the connection, or by\n     default the one of the first virtual host bound to the same IP:port.\n     PR56226.  [Yann Ylavic]\n\n  *) mod_lua: After a r:wsupgrade(), mod_lua was not properly\n     responding to a websockets PING but instead invoking the specified\n     script. PR57524. [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_ssl: Add the SSL_CLIENT_CERT_RFC4523_CEA variable, which provides\n     a combination of certificate serialNumber and issuer as defined by\n     CertificateExactMatch in RFC4523. [Graham Leggett]\n\n  *) core: Add expression support to ErrorDocument. Switch from a fixed\n     sized 664 byte array per merge to a hash table. [Graham Leggett]\n\n  *) ab: Add missing longest request (100%) to CSV export.\n     [Marcin Fabrykowski <bugzilla fabrykowski.pl>]\n\n  *) mod_macro: Clear macros before initialization to avoid use-after-free\n     on startup or restart when the module is linked statically. PR 57525\n     [apache.org tech.futurequest.net, Yann Ylavic]\n\n  *) mod_alias: Introduce expression parser support for Alias, ScriptAlias\n     and Redirect. [Graham Leggett]\n\n  *) mod_ssl: 'SSLProtocol ALL' was being ignored in virtual host context.\n     PR 57100.  [Michael Kaufmann <apache-bugzilla michael-kaufmann.ch>,\n     Yann Ylavic]\n\n  *) mpm_event: Avoid access to the scoreboard from the connection while\n     it is suspended (waiting for events).  [Eric Covener, Jeff Trawick]\n\n  *) mod_ssl: Fix renegotiation failures redirected to an ErrorDocument.\n     PR 57334.  [Yann Ylavic].\n\n  *) mod_deflate: A misplaced check prevents limiting small bodies with the\n     new inflate limits. PR56872. [Edward Lu, Eric Covener, Yann Ylavic]\n\n  *) mod_proxy_ajp: Forward SSL protocol name (SSLv3, TLSv1.1 etc.) as a\n     request attribute to the backend. Recent Tomcat versions will extract\n     it and provide it as a servlet request attribute named\n     \"org.apache.tomcat.util.net.secure_protocol_version\". [Rainer Jung]\n\n  *) core: Optimize string concatenation in expression parser when evaluating\n     a string expression. [Rainer Jung]\n\n  *) acinclude.m4: Generate #LoadModule directive in default httpd.conf for\n     every --enable-mpms-shared. PR 53882.  [olli hauer <ohauer gmx.de>,\n     Yann Ylavic]\n\n  *) mod_authn_dbd: Fix the error message logged in case of error while querying\n     the database. This is associated to AH01656 and AH01661. [Christophe Jaillet]\n\n  *) mod_authz_groupfile: Reduce the severity of AH01667 from ERROR to DEBUG,\n     because it may be evaluated inside <RequireAny>. PR55523. [Eric Covener]\n\n  *) mod_ssl: Fix small memory leak during initialization when ECDH is used.\n     [Jan Kaluza]\n\nChanges with Apache 2.4.12\n\n  *) mpm_winnt: Accept utf-8 (Unicode) service names and descriptions for\n     internationalization.  [William Rowe]\n\n  *) mpm_winnt: Normalize the error and status messages emitted by service.c,\n     the service control interface for Windows.  [William Rowe]\n\n  *) configure: Fix --enable-v4-mapped configuration on *BSD. PR 53824.\n     [ olli hauer <ohauer gmx.de>, Yann Ylavic ]\n\n  *) Reverted <DirectoryMatch > behavior regression introduced in 2.4.11\n     (not released).\n\nChanges with Apache 2.4.11 (not released)\n\n  *) SECURITY: CVE-2014-3583 (cve.mitre.org)\n     mod_proxy_fcgi: Fix a potential crash due to buffer over-read, with\n     response headers' size above 8K.  [Yann Ylavic, Jeff Trawick]\n\n  *) SECURITY: CVE-2014-3581 (cve.mitre.org)\n     mod_cache: Avoid a crash when Content-Type has an empty value.\n     PR 56924.  [Mark Montague <mark catseye.org>, Jan Kaluza]\n\n  *) SECURITY: CVE-2014-8109 (cve.mitre.org)\n     mod_lua: Fix handling of the Require line when a LuaAuthzProvider is\n     used in multiple Require directives with different arguments.\n     PR57204 [Edward Lu <Chaosed0 gmail.com>]\n\n  *) SECURITY: CVE-2013-5704 (cve.mitre.org)\n     core: HTTP trailers could be used to replace HTTP headers\n     late during request processing, potentially undoing or\n     otherwise confusing modules that examined or modified\n     request headers earlier.  Adds \"MergeTrailers\" directive to restore\n     legacy behavior.  [Edward Lu, Yann Ylavic, Joe Orton, Eric Covener]\n\n  *) mod_ssl: New directive SSLSessionTickets (On|Off).\n     The directive controls the use of TLS session tickets (RFC 5077),\n     default value is \"On\" (unchanged behavior).\n     Session ticket creation uses a random key created during web\n     server startup and recreated during restarts. No other key\n     recreation mechanism is available currently. Therefore using session\n     tickets without restarting the web server with an appropriate frequency\n     (e.g. daily) compromises perfect forward secrecy. [Rainer Jung]\n\n  *) mod_proxy_fcgi: Provide some basic alternate options for specifying\n     how PATH_INFO is passed to FastCGI backends by adding significance to\n     the value of proxy-fcgi-pathinfo. PR 55329. [Eric Covener]\n\n  *) mod_proxy_fcgi: Enable UDS backends configured with SetHandler/RewriteRule\n     to opt-in to connection reuse and other Proxy options via explicitly\n     declared \"proxy workers\" (<Proxy unix:... enablereuse=on max=...)\n     [Eric Covener]\n\n  *) mod_proxy: Add \"enablereuse\" option as the inverse of \"disablereuse\".\n     [Eric Covener]\n\n  *) mod_proxy_fcgi: Enable opt-in to TCP connection reuse by explicitly\n     setting proxy option disablereuse=off. [Eric Covener] PR 57378.\n\n  *) event: Update the internal \"connection id\" when requests\n     move from thread to thread. Reuse can confuse modules like\n     mod_cgid. PR 57435. [Michael Thorpe <mike gistnet.com>]\n\n  *) mod_proxy_fcgi: Remove proxy:balancer:// prefix from SCRIPT_FILENAME\n     passed to fastcgi backends. [Eric Covener]\n\n  *) core: Configuration files with long lines and continuation characters\n     are not read properly. PR 55910. [Manuel Mausz <manuel-as mausz.at>]\n\n  *) mod_include: the 'env' function was incorrectly handled as 'getenv' if the\n     leading 'e' was written in upper case in <!--#if expr=\"...\" -->\n     statements. [Christophe Jaillet]\n\n  *) split-logfile: Fix perl error:  'Can't use string (\"example.org:80\")\n     as a symbol ref while \"strict refs\"'. PR 56329.\n     [Holger Mauermann <mauermann gmail.com>]\n\n  *) mod_proxy: Prevent ProxyPassReverse from doing a substitution when\n     the URL parameter interpolates to an empty string. PR 56603.\n     [<ajprout hotmail.com>]\n\n  *) core: Fix -D[efined] or <Define>[d] variables lifetime across restarts.\n     PR 57328.  [Armin Abfalterer <a.abfalterer gmail.com>, Yann Ylavic].\n\n  *) mod_proxy: Preserve original request headers even if they differ\n     from the ones to be forwarded to the backend. PR 45387.\n     [Yann Ylavic]\n\n  *) mod_ssl: dump SSL IO/state for the write side of the connection(s),\n     like reads (level TRACE4). [Yann Ylavic]\n\n  *) mod_proxy_fcgi: Ignore body data from backend for 304 responses. PR 57198.\n     [Jan Kaluza]\n\n  *) mod_ssl: Do not crash when looking up SSL related variables during\n     expression evaluation on non SSL connections. PR 57070  [Ruediger Pluem]\n\n  *) mod_proxy_ajp: Fix handling of the default port (8009) in the\n     ProxyPass and <Proxy> configurations.  PR 57259.  [Yann Ylavic]\n\n  *) mpm_event: Avoid a possible use after free when notifying the end of\n     connection during lingering close.  PR 57268.  [Eric Covener, Yann Ylavic]\n\n  *) mod_ssl: Fix recognition of OCSP stapling responses that are encoded\n     improperly or too large.  [Jeff Trawick]\n\n  *) core: Add ap_log_data(), ap_log_rdata(), etc. for logging buffers.\n     [Jeff Trawick]\n\n  *) mod_proxy_fcgi, mod_authnz_fcgi: stop reading the response and issue an\n     error when parsing or forwarding the response fails. [Yann Ylavic]\n\n  *) mod_ssl: Fix a memory leak in case of graceful restarts with OpenSSL >= 0.9.8e\n     PR 53435 [tadanori <tadanori2007 yahoo.com>, Sebastian Wiedenroth <wiedi frubar.net>]\n\n  *) mod_proxy_connect: Don't issue AH02447 on sockets hangups, let the read\n     determine whether it is a normal close or a real error. PR 57168. [Yann\n     Ylavic]\n\n  *) mod_proxy_wstunnel: abort backend connection on polling error to avoid\n     further processing.  [Yann Ylavic]\n\n  *) core: Support custom ErrorDocuments for HTTP 501 and 414 status codes.\n     PR 57167 [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_proxy_connect: Fix ProxyRemote to https:// backends on EBCDIC\n     systems. PR 57092 [Edward Lu <Chaosed0 gmail.com>]\n\n  *) mod_cache: Avoid a 304 response to an unconditional request when an AH00752\n     CacheLock error occurs during cache revalidation. [Eric Covener]\n\n  *) mod_ssl: Move OCSP stapling information from a per-certificate store to\n     a per-server hash. PR 54357, PR 56919. [Alex Bligh <alex alex.org.uk>,\n     Yann Ylavic, Kaspar Brand]\n\n  *) mod_cache_socache: Change average object size hint from 32 bytes to\n     2048 bytes.  [Rainer Jung]\n\n  *) mod_cache_socache: Add cache status to server-status.  [Rainer Jung]\n\n  *) event: Fix worker-listener deadlock in graceful restart.\n     PR 56960.\n\n  *) Concat strings at compile time when possible. PR 53741.\n\n  *) mod_substitute: Restrict configuration in .htaccess to\n     FileInfo as documented.  [Rainer Jung]\n\n  *) mod_substitute: Make maximum line length configurable.  [Rainer Jung]\n\n  *) mod_substitute: Fix line length limitation in case of regexp plus flatten.\n     [Rainer Jung]\n\n  *) mod_proxy: Truncated character worker names are no longer fatal\n     errors. PR53218. [Jim Jagielski]\n\n  *) mod_dav: Set r->status_line in dav_error_response. PR 55426.\n\n  *) mod_proxy_http, mod_cache: Avoid (unlikely) accesses to freed memory.\n     [Yann Ylavic, Christophe Jaillet]\n\n  *) http_protocol: fix logic in ap_method_list_(add|remove) in order:\n       - to correctly reset bits\n       - not to modify the 'method_mask' bitfield unnecessarily\n     [Christophe Jaillet]\n\n  *) mod_slotmem_shm: Increase log level for some originally debug messages.\n     [Jim Jagielski]\n\n  *) mod_ldap: In 2.4.10, some LDAP searches or comparisons might be done with\n     the wrong credentials when a backend connection is reused.\n     [Eric Covener]\n\n  *) mod_macro: Add missing APLOGNO for some Warning log messages.\n     [Christophe Jaillet]\n\n  *) mod_cache: Avoid sending 304 responses during failed revalidations\n     PR56881. [Eric Covener]\n\n  *) mod_status: Honor client IP address using mod_remoteip. PR 55886.\n     [Jim Jagielski]\n\n  *) cmake-based build for Windows: Fix incompatibility with cmake 2.8.12\n     and later.  PR 56615.  [Chuck Liu <cliu81 gmail.com>, Jeff Trawick]\n\n  *) mod_ratelimit: Drop severity of AH01455 and AH01457 (ap_pass_brigade\n     failed) messages from ERROR to TRACE1.  Other filters do not bother\n     re-reporting failures from lower level filters.  PR56832.  [Eric Covener]\n\n  *) core: Avoid useless warning message when parsing a section guarded by\n     <IfDefine foo> if $(foo) is used within the section.\n     PR 56503 [Christophe Jaillet]\n\n  *) mod_proxy_fcgi: Fix faulty logging of large amounts of stderr from the\n     application.  PR 56858.  [Manuel Mausz <manuel-asf mausz.at>]\n\n  *) mod_proxy_http: Proxy responses with error status and\n     \"ProxyErrorOverride On\" hang until proxy timeout.\n     PR53420 [Rainer Jung]\n\n  *) mod_log_config: Allow three character log formats to be registered. For\n     backwards compatibility, the first character of a three-character format\n     must be the '^' (caret) character.  [Eric Covener]\n\n  *) mod_lua: Don't quote Expires and Path values. PR 56734.\n     [Keith Mashinter, <kmashint yahoo com>]\n\n  *) mod_authz_core: Allow <AuthzProviderAlias>'es to be seen from auth\n     stanzas under virtual hosts. PR 56870. [Eric Covener]\n\nChanges with Apache 2.4.10\n\n  *) SECURITY: CVE-2014-0117 (cve.mitre.org)\n     mod_proxy: Fix crash in Connection header handling which allowed a denial\n     of service attack against a reverse proxy with a threaded MPM.\n     [Ben Reser]\n\n  *) SECURITY: CVE-2014-3523 (cve.mitre.org)\n     Fix a memory consumption denial of service in the WinNT MPM, used in all\n     Windows installations. Workaround: AcceptFilter <protocol> {none|connect}\n     [Jeff Trawick]\n\n  *) SECURITY: CVE-2014-0226 (cve.mitre.org)\n     Fix a race condition in scoreboard handling, which could lead to\n     a heap buffer overflow.  [Joe Orton, Eric Covener]\n\n  *) SECURITY: CVE-2014-0118 (cve.mitre.org)\n     mod_deflate: The DEFLATE input filter (inflates request bodies) now\n     limits the length and compression ratio of inflated request bodies to\n     avoid denial of service via highly compressed bodies.  See directives\n     DeflateInflateLimitRequestBody, DeflateInflateRatioLimit,\n     and DeflateInflateRatioBurst. [Yann Ylavic, Eric Covener]\n\n  *) SECURITY: CVE-2014-0231 (cve.mitre.org)\n     mod_cgid: Fix a denial of service against CGI scripts that do\n     not consume stdin that could lead to lingering HTTPD child processes\n     filling up the scoreboard and eventually hanging the server.  By\n     default, the client I/O timeout (Timeout directive) now applies to\n     communication with scripts.  The CGIDScriptTimeout directive can be\n     used to set a different timeout for communication with scripts.\n     [Rainer Jung, Eric Covener, Yann Ylavic]\n\n  *) mod_ssl: Extend the scope of SSLSessionCacheTimeout to sessions\n     resumed by TLS session resumption (RFC 5077). [Rainer Jung]\n\n  *) mod_deflate: Don't fail when flushing inflated data to the user-agent\n     and that coincides with the end of stream (\"Zlib error flushing inflate\n     buffer\"). PR 56196. [Christoph Fausak <christoph fausak glueckkanja.com>]\n\n  *) mod_proxy_ajp: Forward local IP address as a custom request attribute\n     like we already do for the remote port. [Rainer Jung]\n\n  *) core: Include any error notes set by modules in the canned error\n     response for 403 errors.  [Jeff Trawick]\n\n  *) mod_ssl: Set an error note for requests rejected due to\n     SSLStrictSNIVHostCheck.  [Jeff Trawick]\n\n  *) mod_ssl: Fix issue with redirects to error documents when handling\n     SNI errors.  [Jeff Trawick]\n\n  *) mod_ssl: Fix tmp DH parameter leak, adjust selection to prefer\n     larger keys and support up to 8192-bit keys.  [Ruediger Pluem,\n     Joe Orton]\n\n  *) mod_dav: Fix improper encoding in PROPFIND responses.  PR 56480.\n     [Ben Reser]\n\n  *) WinNT MPM: Improve error handling for termination events in child.\n     [Jeff Trawick]\n\n  *) mod_proxy: When ping/pong is configured for a worker, don't send or\n     forward \"100 Continue\" (interim) response to the client if it does\n     not expect one. [Yann Ylavic]\n\n  *) mod_ldap: Be more conservative with the last-used time for\n     LDAPConnectionPoolTTL. PR54587 [Eric Covener]\n\n  *) mod_ldap: LDAP connections used for authn were not respecting\n     LDAPConnectionPoolTTL. PR54587 [Eric Covener]\n\n  *) mod_proxy_fcgi: Fix occasional high CPU when handling request bodies.\n     [Jeff Trawick]\n\n  *) event MPM: Fix possible crashes (third-party modules accessing c->sbh)\n     or occasional missed mod_status updates under load. PR 56639.\n     [Edward Lu <Chaosed0 gmail com>]\n\n  *) mod_authnz_ldap: Support primitive LDAP servers do not accept\n     filters, such as \"SDBM-backed LDAP\" on z/OS, by allowing a special\n     filter \"none\" to be specified in AuthLDAPURL. [Eric Covener]\n\n  *) mod_deflate: Fix inflation of files larger than 4GB. PR 56062.\n     [Lukas Bezdicka <social v3.sk>]\n\n  *) mod_deflate: Handle Zlib header and validation bytes received in multiple\n     chunks. PR 46146. [Yann Ylavic]\n\n  *) mod_proxy: Allow reverse-proxy to be set via explicit handler.\n     [ryo takatsuki <ryotakatsuki gmail com>]\n\n  *) ab: support custom HTTP method with -m argument. PR 56604.\n     [Roman Jurkov <winfinit gmail.com>]\n\n  *) mod_proxy_balancer: Correctly encode user provided data in management\n     interface. PR 56532 [Maksymilian, <max cert.cx>]\n\n  *) mod_proxy: Don't limit the size of the connectable Unix Domain Socket\n     paths. [Graham Dumpleton, Christophe Jaillet, Yann Ylavic]\n\n  *) mod_proxy_fcgi: Support iobuffersize parameter.  [Jeff Trawick]\n\n  *) event: Send the SSL close notify alert when the KeepAliveTimeout\n     expires. PR54998. [Yann Ylavic]\n\n  *) mod_ssl: Ensure that the SSL close notify alert is flushed to the client.\n     PR54998. [Tim Kosse <tim.kosse filezilla-project.org>, Yann Ylavic]\n\n  *) mod_proxy: Shutdown (eg. SSL close notify) the backend connection before\n     closing. [Yann Ylavic]\n\n  *) mod_auth_form: Add a debug message when the fields on a form are not\n     recognised. [Graham Leggett]\n\n  *) mod_cache: Preserve non-cacheable headers forwarded from an origin 304\n     response. PR 55547.  [Yann Ylavic]\n\n  *) mod_proxy_wstunnel: Fix the use of SSL connections with the \"wss:\"\n     scheme. PR55320. [Alex Liu <alex.leo.ca gmail.com>]\n\n  *) mod_socache_shmcb: Correct counting of expirations for status display.\n     Expirations happening during retrieval were not counted. [Rainer Jung]\n\n  *) mod_cache: Retry unconditional request with the full URL (including the\n     query-string) when the origin server's 304 response does not match the\n     conditions used to revalidate the stale entry.  [Yann Ylavic].\n\n  *) mod_alias: Stop setting CONTEXT_PREFIX and CONTEXT_DOCUMENT environment\n     variables as a result of AliasMatch. [Eric Covener]\n\n  *) mod_cache: Don't add cached/revalidated entity headers to a 304 response.\n     PR 55547.  [Yann Ylavic]\n\n  *) mod_proxy_scgi: Support Unix sockets.  ap_proxy_port_of_scheme():\n     Support default SCGI port (4000).  [Jeff Trawick]\n\n  *) mod_cache: Fix AH00784 errors on Windows when the the CacheLock directive\n     is enabled.  [Eric Covener]\n\n  *) mod_expires: don't add Expires header to error responses (4xx/5xx),\n     be they generated or forwarded. PR 55669.  [Yann Ylavic]\n\n  *) mod_proxy_fcgi: Don't segfault when failing to connect to the backend.\n     (regression in 2.4.9 release) [Jeff Trawick]\n\n  *) mod_authn_socache: Fix crash at startup in certain configurations.\n     PR 56371. (regression in 2.4.7) [Jan Kaluza]\n\n  *) mod_ssl: restore argument structure for \"exec\"-type SSLPassPhraseDialog\n     programs to the form used in releases up to 2.4.7, and emulate\n     a backwards-compatible behavior for existing setups. [Kaspar Brand]\n\n  *) mod_ssl: Add SSLOCSPUseRequestNonce directive to control whether or not\n     OCSP requests should use a nonce to be checked against the responder's\n     one. PR 56233. [Yann Ylavic, Kaspar Brand]\n\n  *) mod_ssl: \"SSLEngine off\" will now override a Listen-based default\n     and does disable mod_ssl for the vhost.  [Joe Orton]\n\n  *) mod_lua: Enforce the max post size allowed via r:parsebody()\n     [Daniel Gruno]\n\n  *) mod_lua: Use binary comparison to find boundaries for multipart\n     objects, as to not terminate our search prematurely when hitting\n     a NULL byte. [Daniel Gruno]\n\n  *) mod_ssl: add workaround for SSLCertificateFile when using OpenSSL\n     versions before 0.9.8h and not specifying an SSLCertificateChainFile\n     (regression introduced with 2.4.8). PR 56410. [Kaspar Brand]\n\n  *) mod_ssl: bring SNI behavior into better conformance with RFC 6066:\n     no longer send warning-level unrecognized_name(112) alerts,\n     and limit startup warnings to cases where an OpenSSL version\n     without TLS extension support is used. PR 56241. [Kaspar Brand]\n\n  *) mod_proxy_html: Avoid some possible memory access violation in case of\n     specially crafted files, when the ProxyHTMLMeta directive is turned on.\n     Follow up of PR 56287 [Christophe Jaillet]\n\n  *) mod_auth_form: Make sure the optional functions are loaded even when\n     the AuthFormProvider isn't specified. [Graham Leggett]\n\n  *) mod_ssl: avoid processing bogus SSLCertificateKeyFile values\n     (and logging garbled file names). PR 56306. [Kaspar Brand]\n\n  *) mod_ssl: fix merging of global and vhost-level settings with the\n     SSLCertificateFile, SSLCertificateKeyFile, and SSLOpenSSLConfCmd\n     directives. PR 56353. [Kaspar Brand]\n\n  *) mod_headers: Allow the \"value\" parameter of Header and RequestHeader to\n     contain an ap_expr expression if prefixed with \"expr=\". [Eric Covener]\n\n  *) rotatelogs: Avoid creation of zombie processes when -p is used on\n     Unix platforms.  [Joe Orton]\n\n  *) mod_authnz_fcgi: New module to enable FastCGI authorizer\n     applications to authenticate and/or authorize clients.\n     [Jeff Trawick]\n\n  *) mod_proxy: Do not try to parse the regular expressions passed by\n     ProxyPassMatch as URL as they do not follow their syntax.\n     PR 56074. [Ruediger Pluem]\n\n  *) mod_reqtimeout: Resolve unexpected timeouts on keepalive requests\n     under the Event MPM. PR56216.  [Frank Meier <frank meier ergon ch>]\n\n  *) mod_proxy_fcgi: Fix sending of response without some HTTP headers\n     that might be set by filters.  PR 55558. [Jim Riggs <jim riggs.me>]\n\n  *) mod_proxy_html: Do not delete the wrong data from HTML code when a\n     \"http-equiv\" meta tag specifies a Content-Type behind any other\n     \"http-equiv\" meta tag. PR 56287 [Micha Lenk <micha lenk info>]\n\n  *) mod_proxy: Don't reuse a SSL backend connection whose requested SNI\n     differs. PR 55782.  [Yann Ylavic]\n\n  *) Add suspend_connection and resume_connection hooks to notify modules\n     when the thread/connection relationship changes.  (Should be implemented\n     for any third-party async MPMs.)  [Jeff Trawick]\n\n  *) mod_proxy_wstunnel: Don't issue AH02447 and log a 500 on routine\n     hangups from websockets origin servers. PR 56299\n     [Yann Ylavic, Edward Lu <Chaosed0 gmail com>, Eric Covener]\n\n  *) mod_proxy_wstunnel: Don't pool backend websockets connections,\n     because we need to handshake every time. PR 55890.\n     [Eric Covener]\n\n  *) mod_lua: Redesign how request record table access behaves,\n     in order to utilize the request record from within these tables.\n     [Daniel Gruno]\n\n  *) mod_lua: Add r:wspeek for peeking at WebSocket frames. [Daniel Gruno]\n\n  *) mod_lua: Log an error when the initial parsing of a Lua file fails.\n     [Daniel Gruno, Felipe Daragon <filipe syhunt com>]\n\n  *) mod_lua: Reformat and escape script error output.\n     [Daniel Gruno, Felipe Daragon <filipe syhunt com>]\n\n  *) mod_lua: URL-escape cookie keys/values to prevent tainted cookie data\n     from causing response splitting.\n     [Daniel Gruno, Felipe Daragon <filipe syhunt com>]\n\n  *) mod_lua: Disallow newlines in table values inside the request_rec,\n     to prevent HTTP Response Splitting via tainted headers.\n     [Daniel Gruno, Felipe Daragon <filipe syhunt com>]\n\n  *) mod_lua: Remove the non-working early/late arguments for\n     LuaHookCheckUserID. [Daniel Gruno]\n\n  *) mod_lua: Change IVM storage to use shm [Daniel Gruno]\n\n  *) mod_lua: More verbose error logging when a handler function cannot be\n     found. [Daniel Gruno]\n\nChanges with Apache 2.4.9\n\n  *) mod_ssl: Work around a bug in some older versions of OpenSSL that\n     would cause a crash in SSL_get_certificate for servers where the\n     certificate hadn't been sent. [Stephen Henson]\n\n  *) mod_lua: Add a fixups hook that checks if the original request is intended\n     for LuaMapHandler. This fixes a bug where FallbackResource invalidates the\n     LuaMapHandler directive in certain cases by changing the URI before the map\n     handler code executes [Daniel Gruno, Daniel Ferradal <dferradal gmail com>].\n\nChanges with Apache 2.4.8 (not released)\n\n  *) SECURITY: CVE-2014-0098 (cve.mitre.org)\n     Clean up cookie logging with fewer redundant string parsing passes.\n     Log only cookies with a value assignment. Prevents segfaults when\n     logging truncated cookies.\n     [William Rowe, Ruediger Pluem, Jim Jagielski]\n\n  *) SECURITY: CVE-2013-6438 (cve.mitre.org)\n     mod_dav: Keep track of length of cdata properly when removing\n     leading spaces. Eliminates a potential denial of service from\n     specifically crafted DAV WRITE requests\n     [Amin Tora <Amin.Tora neustar.biz>]\n\n  *) core: Support named groups and backreferences within the LocationMatch,\n     DirectoryMatch, FilesMatch and ProxyMatch directives. (Requires\n     non-ancient PCRE library) [Graham Leggett]\n\n  *) core: draft-ietf-httpbis-p1-messaging-23 corrections regarding\n     TE/CL conflicts. [Yann Ylavic, Jim Jagielski]\n\n  *) core: Detect incomplete request and response bodies, log an error and\n     forward it to the underlying filters. PR 55475 [Yann Ylavic]\n\n  *) mod_dir: Add DirectoryCheckHandler to allow a 2.2-like behavior, skipping\n     execution when a handler is already set. PR53929. [Eric Covener]\n\n  *) mod_ssl: Do not perform SNI / Host header comparison in case of a\n     forward proxy request. [Ruediger Pluem]\n\n  *) mod_ssl: Remove the hardcoded algorithm-type dependency for the\n     SSLCertificateFile and SSLCertificateKeyFile directives, to enable\n     future algorithm agility, and deprecate the SSLCertificateChainFile\n     directive (obsoleted by SSLCertificateFile). [Kaspar Brand]\n\n  *) mod_rewrite: Add RewriteOptions InheritDown, InheritDownBefore,\n     and IgnoreInherit to allow RewriteRules to be pushed from parent scopes\n     to child scopes without explicitly configuring each child scope.\n     PR56153.  [Edward Lu <Chaosed0 gmail com>]\n\n  *) prefork: Fix long delays when doing a graceful restart.\n     PR 54852 [Jim Jagielski, Arkadiusz Miskiewicz <arekm maven pl>]\n\n  *) FreeBSD: Disable IPv4-mapped listening sockets by default for versions\n     5+ instead of just for FreeBSD 5. PR 53824. [Jeff Trawick]\n\n  *) mod_proxy_wstunnel: Avoid busy loop on client errors, drop message\n     IDs 02445, 02446, and 02448 to TRACE1 from DEBUG. PR 56145.\n     [Joffroy Christen <joffroy.christen solvaxis com>, Eric Covener]\n\n  *) mod_remoteip: Correct the trusted proxy match test. PR 54651.\n     [Yoshinori Ehara <yoshinori ehara gmail com>, Eugene L <eugenel amazon com>]\n\n  *) mod_proxy_fcgi: Fix error message when an unexpected protocol version\n     number is received from the application.  PR 56110.  [Jeff Trawick]\n\n  *) mod_remoteip: Use the correct IP addresses to populate the proxy_ips field.\n     PR 55972. [Mike Rumph]\n\n  *) mod_lua: Update r:setcookie() to accept a table of options and add domain,\n     path and httponly to the list of options available to set.\n     PR 56128 [Edward Lu <Chaosed0 gmail com>, Daniel Gruno]\n\n  *) mod_lua: Fix r:setcookie() to add, rather than replace,\n     the Set-Cookie header. PR56105\n     [Kevin J Walters <kjw ms com>, Edward Lu <Chaosed0 gmail com>]\n\n  *) mod_lua: Allow for database results to be returned as a hash with\n     row-name/value pairs instead of just row-number/value. [Daniel Gruno]\n\n  *) mod_rewrite: Add %{CONN_REMOTE_ADDR} as the non-useragent counterpart to\n     %{REMOTE_ADDR}. PR 56094. [Edward Lu <Chaosed0 gmail com>]\n\n  *) WinNT MPM: If ap_run_pre_connection() fails or sets c->aborted, don't\n     save the socket for reuse by the next worker as if it were an\n     APR_SO_DISCONNECTED socket. Restores 2.2 behavior. [Eric Covener]\n\n  *) mod_dir: Don't search for a DirectoryIndex or DirectorySlash on a URL\n     that was just rewritten by mod_rewrite. PR53929. [Eric Covener]\n\n  *) mod_session: When we have a session we were unable to decode,\n     behave as if there was no session at all. [Thomas Eckert\n     <thomas.r.w.eckert gmail com>]\n\n  *) mod_session: Fix problems interpreting the SessionInclude and\n     SessionExclude configuration. PR 56038. [Erik Pearson\n     <erik adaptations.com>]\n\n  *) mod_authn_core: Allow <AuthnProviderAlias>'es to be seen from auth\n     stanzas under virtual hosts. PR 55622. [Eric Covener]\n\n  *) mod_proxy_fcgi: Use apr_socket_timeout_get instead of hard-coded\n     30 seconds timeout. [Jan Kaluza]\n\n  *) build: only search for modules (config*.m4) in known subdirectories, see\n     build/config-stubs. [Stefan Fritsch]\n\n  *) mod_cache_disk: Fix potential hangs on Windows when using mod_cache_disk.\n     PR 55833. [Eric Covener]\n\n  *) mod_ssl: Add support for OpenSSL configuration commands by introducing\n     the SSLOpenSSLConfCmd directive. [Stephen Henson, Kaspar Brand]\n\n  *) mod_proxy: Remove (never documented) <Proxy ~ wildcard-url> syntax which\n     is equivalent to <ProxyMatch wildcard-url>. [Christophe Jaillet]\n\n  *) mod_authz_user, mod_authz_host, mod_authz_groupfile, mod_authz_dbm,\n     mod_authz_dbd, mod_authnz_ldap: Support the expression parser within the\n     require directives. [Graham Leggett]\n\n  *) mod_proxy_http: Core dumped under high load. PR 50335.\n     [Jan Kaluza <jkaluza redhat.com>]\n\n  *) mod_socache_shmcb.c: Remove arbitrary restriction on shared memory size\n     previously limited to 64MB. [Jens L\u00e5\u00e5s <jelaas gmail.com>]\n\n  *) mod_lua: Use binary copy when dealing with uploads through r:parsebody()\n     to prevent truncating files. [Daniel Gruno]\n\nChanges with Apache 2.4.7\n\n  *) SECURITY: CVE-2013-4352 (cve.mitre.org)\n     mod_cache: Fix a NULL pointer deference which allowed untrusted\n     origin servers to crash mod_cache in a forward proxy\n     configuration.  [Graham Leggett]\n\n  *) APR 1.5.0 or later is now required for the event MPM.\n\n  *) slotmem_shm: Error detection. [Jim Jagielski]\n\n  *) event: Use skiplist data structure. [Jim Jagielski]\n\n  *) event: Fail at startup with message AP02405 if the APR atomic\n     implementation is not compatible with the MPM.  [Jim Jagielski]\n\n  *) mpm_unix: Add ap_mpm_podx_* implementation to avoid code duplication\n     and align w/ trunk. [Jim Jagielski]\n\n  *) Fix potential rejection of valid MaxMemFree and ThreadStackSize\n     directives.  [Mike Rumph <mike.rumph oracle.com>]\n\n  *) mod_proxy_fcgi: Remove 64K limit on encoded length of all envvars.\n     An individual envvar with an encoded length of more than 16K will be\n     omitted.  [Jeff Trawick]\n\n  *) mod_proxy_fcgi: Handle reading protocol data that is split between\n     packets.  [Jeff Trawick]\n\n  *) mod_ssl: Improve handling of ephemeral DH and ECDH keys by\n     allowing custom parameters to be configured via SSLCertificateFile,\n     and by adding standardized DH parameters for 1024/2048/3072/4096 bits.\n     Unless custom parameters are configured, the standardized parameters\n     are applied based on the certificate's RSA/DSA key size. [Kaspar Brand]\n\n  *) mod_ssl, configure: Require OpenSSL 0.9.8a or later. [Kaspar Brand]\n\n  *) mod_ssl: drop support for export-grade ciphers with ephemeral RSA\n     keys, and unconditionally disable aNULL, eNULL and EXP ciphers\n     (not overridable via SSLCipherSuite). [Kaspar Brand]\n\n  *) mod_proxy: Added support for unix domain sockets as the\n     backend server endpoint. This also introduces an unintended\n     incompatibility for third party modules using the mod_proxy\n     proxy_worker_shared structure, especially for balancer lbmethod\n     modules. [Jim Jagielski, Blaise Tarr <blaise tarr gmail com>]\n\n  *) Add experimental cmake-based build system for Windows.  [Jeff Trawick,\n     Tom Donovan]\n\n  *) event MPM: Fix possible crashes (third party modules accessing c->sbh)\n     or occasional missed mod_status updates for some keepalive requests\n     under load. [Eric Covener]\n\n  *) mod_authn_socache: Support optional initialization arguments for\n     socache providers.  [Chris Darroch]\n\n  *) mod_session: Reset the max-age on session save. PR 47476. [Alexey\n     Varlamov <alexey.v.varlamov gmail com>]\n\n  *) mod_session: After parsing the value of the header specified by the\n     SessionHeader directive, remove the value from the response. PR 55279.\n     [Graham Leggett]\n\n  *) mod_headers: Allow for format specifiers in the substitution string\n     when using Header edit. [Daniel Ruggeri]\n\n  *) mod_dav: dav_resource->uri is treated as unencoded. This was an\n     unnecessary ABI changed introduced in 2.4.6. PR 55397.\n\n  *) mod_dav: Don't require lock tokens for COPY source. PR 55306.\n\n  *) core: Don't truncate output when sending is interrupted by a signal,\n     such as from an exiting CGI process. PR 55643. [Jeff Trawick]\n\n  *) WinNT MPM: Exit the child if the parent process crashes or is terminated.\n     [Oracle Corporation]\n\n  *) Windows: Correct failure to discard stderr in some error log\n     configurations.  (Error message AH00093)  [Jeff Trawick]\n\n  *) mod_session_crypto: Allow using exec: calls to obtain session\n     encryption key.  [Daniel Ruggeri]\n\n  *) core: Add missing Reason-Phrase in HTTP response headers.\n     PR 54946. [Rainer Jung]\n\n  *) mod_rewrite: Make rewrite websocket-aware to allow proxying.\n     PR 55598. [Chris Harris <chris.harris kitware com>]\n\n  *) mod_ldap: When looking up sub-groups, use an implicit objectClass=*\n     instead of an explicit cn=* filter. [David Hawes <dhawes vt.edu>]\n\n  *) ab: Add wait time, fix processing time, and output write errors only if\n     they occurred. [Christophe Jaillet]\n\n  *) worker MPM: Don't forcibly kill worker threads if the child process is\n     exiting gracefully.  [Oracle Corporation]\n\n  *) core: apachectl -S prints wildcard name-based virtual hosts twice.\n     PR54948 [Eric Covener]\n\n  *) mod_auth_basic: Add AuthBasicUseDigestAlgorithm directive to\n     allow migration of passwords from digest to basic authentication.\n     [Chris Darroch]\n\n  *) ab: Add a new -l parameter in order not to check the length of the responses.\n     This can be useful with dynamic pages.\n     PR9945, PR27888, PR42040 [<ccikrs1 cranbrook edu>]\n\n  *) Suppress formatting of startup messages written to the console when\n     ErrorLogFormat is used.  [Jeff Trawick]\n\n  *) mod_auth_digest: Be more specific when the realm mismatches because the\n     realm has not been specified. [Graham Leggett]\n\n  *) mod_proxy: Add a note in the balancer manager stating whether changes\n     will or will not be persisted and whether settings are inherited.\n     [Daniel Ruggeri, Jim Jagielski]\n\n  *) core: Add util_fcgi.h and associated definitions and support\n     routines for FastCGI, based largely on mod_proxy_fcgi.\n     [Jeff Trawick]\n\n  *) mod_headers: Add 'Header note header-name note-name' for copying a response\n     headers value into a note. [Eric Covener]\n\n  *) mod_headers: Add 'setifempty' command to Header and RequestHeader.\n     [Eric Covener]\n\n  *) mod_logio: new format-specifier %S (sum) which is the sum of received\n     and sent byte counts.\n     PR54015 [Christophe Jaillet]\n\n  *) mod_deflate: Improve error detection when decompressing request bodies\n     with trailing garbage: handle case where trailing bytes are in\n     the same bucket. [Rainer Jung]\n\n  *) mod_authz_groupfile, mod_authz_user: Reduce severity of AH01671 and AH01663\n     from ERROR to DEBUG, since these modules do not know what mod_authz_core\n     is doing with their AUTHZ_DENIED return value. [Eric Covener]\n\n  *) mod_ldap: add TRACE5 for LDAP retries. [Eric Covener]\n\n  *) mod_ldap: retry on an LDAP timeout during authn. [Eric Covener]\n\n  *) mod_ldap: Change \"LDAPReferrals off\" to actually set the underlying LDAP\n     SDK option to OFF, and introduce \"LDAPReferrals default\" to take the SDK\n     default, sans rebind authentication callback.\n     [Jan Kaluza <kaluze AT redhat.com>]\n\n  *) core: Log a message at TRACE1 when the client aborts a connection.\n     [Eric Covener]\n\n  *) WinNT MPM: Don't crash during child process initialization if the\n     Listen protocol is unrecognized.  [Jeff Trawick]\n\n  *) modules: Fix some compiler warnings. [Guenter Knauf]\n\n  *) Sync 2.4 and trunk\n       - Avoid some memory allocation and work when TRACE1 is not activated\n       - fix typo in include guard\n       - indent\n       - No need to lower the string before removing the path, it is just\n         a waste of time...\n       - Save a few cycles\n     [Christophe Jaillet <christophe.jaillet wanadoo.fr>]\n\n  *) mod_filter: Add \"change=no\" as a proto-flag to FilterProtocol\n     to remove a providers initial flags set at registration time.\n     [Eric Covener]\n\n  *) core, mod_ssl: Enable the ability for a module to reverse the sense of\n     a poll event from a read to a write or vice versa. This is a step on\n     the way to allow mod_ssl taking full advantage of the event MPM.\n     [Graham Leggett]\n\n  *) Makefile.win: Install proper pcre DLL file during debug build install.\n     PR 55235.  [Ben Reser <ben reser org>]\n\n  *) mod_ldap: Fix a potential memory leak or corruption.  PR 54936.\n     [Zhenbo Xu <zhenbo1987 gmail com>]\n\n  *) ab: Fix potential buffer overflows when processing the T and X\n     command-line options.  PR 55360.\n     [Mike Rumph <mike.rumph oracle.com>]\n\n  *) fcgistarter: Specify SO_REUSEADDR to allow starting a server\n     with old connections in TIME_WAIT.  [Jeff Trawick]\n\n  *) core: Add open_htaccess hook which, in conjunction with dirwalk_stat\n     and post_perdir_config (introduced in 2.4.5), allows mpm-itk to be\n     used without patches to httpd core. [Stefan Fritsch]\n\n  *) support/htdbm: fix processing of -t command line switch. Regression\n     introduced in 2.4.4\n     PR 55264 [Jo Rhett <jrhett netconsonance com>]\n\n  *) mod_lua: add websocket support via r:wsupgrade, r:wswrite, r:wsread\n     and r:wsping. [Daniel Gruno]\n\n  *) mod_lua: add support for writing/reading cookies via r:getcookie and\n     r:setcookie. [Daniel Gruno]\n\n  *) mod_lua: If the first yield() of a LuaOutputFilter returns a string, it should\n     be prefixed to the response as documented. [Eric Covener]\n     Note: Not present in 2.4.7 CHANGES\n\n  *) mod_lua: Remove ETAG, Content-Length, and Content-MD5 when a LuaOutputFilter\n     is configured without mod_filter. [Eric Covener]\n     Note: Not present in 2.4.7 CHANGES\n\n  *) mod_lua: Register LuaOutputFilter scripts as changing the content and\n     content-length by default, when run my mod_filter.  Previously,\n     growing or shrinking a response that started with Content-Length set\n     would require mod_filter and FilterProtocol change=yes. [Eric Covener]\n     Note: Not present in 2.4.7 CHANGES\n\n  *) mod_lua: Return a 500 error if a LuaHook* script doesn't return a\n     numeric return code. [Eric Covener]\n     Note: Not present in 2.4.7 CHANGES\n\nChanges with Apache 2.4.6\n\n  *) Revert a broken fix for PR54948 that was applied to 2.4.5 (which was\n     not released) and found post-2.4.5 tagging.\n\nChanges with Apache 2.4.5\n\n  *) SECURITY: CVE-2013-1896 (cve.mitre.org)\n     mod_dav: Sending a MERGE request against a URI handled by mod_dav_svn with\n     the source href (sent as part of the request body as XML) pointing to a\n     URI that is not configured for DAV will trigger a segfault. [Ben Reser\n     <ben reser.org>]\n\n  *) SECURITY: CVE-2013-2249 (cve.mitre.org)\n     mod_session_dbd: Make sure that dirty flag is respected when saving\n     sessions, and ensure the session ID is changed each time the session\n     changes. This changes the format of the updatesession SQL statement.\n     Existing configurations must be changed.\n     [Takashi Sato, Graham Leggett]\n\n  *) mod_auth_basic: Add a generic mechanism to fake basic authentication\n     using the ap_expr parser. AuthBasicFake allows the administrator to\n     construct their own username and password for basic authentication based\n     on their needs. [Graham Leggett]\n\n  *) mpm_event: Check that AsyncRequestWorkerFactor is not negative. PR 54254.\n     [Jackie Zhang <jackie qq zhang gmail com>]\n\n  *) mod_proxy: Ensure we don't attempt to amend a table we are iterating\n     through, ensuring that all headers listed by Connection are removed.\n     [Graham Leggett, Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_proxy_http: Make the proxy-interim-response environment variable\n     effective by formally overriding origin server behaviour. [Graham\n     Leggett, Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_proxy: Fix seg-faults when using the global pool on threaded\n     MPMs [Thomas Eckert <thomas.r.w.eckert gmail.com>, Graham Leggett,\n     Jim Jagielski]\n\n  *) mod_deflate: Remove assumptions as to when an EOS bucket might arrive.\n     Gracefully step aside if the body size is zero. [Graham Leggett]\n\n  *) mod_ssl: Fix possible truncation of OCSP responses when reading from the\n     server.  [Joe Orton]\n\n  *) core: Support the SINGLE_LISTEN_UNSERIALIZED_ACCEPT optimization\n     on Linux kernel versions 3.x and above.  PR 55121.  [Bradley Heilbrun\n     <apache heilbrun.org>]\n\n  *) mod_cache_socache: Make sure the CacheSocacheMaxSize directive is merged\n     correctly. [Jens L\u00e5\u00e5s <jelaas gmail.com>]\n\n  *) rotatelogs: add -n number-of-files option to rotate through a number\n     of fixed-name logfiles. [Eric Covener]\n\n  *) mod_proxy: Support web-socket tunnels via mod_proxy_wstunnel.\n     [Jim Jagielski]\n\n  *) mod_cache_socache: Use the name of the socache implementation when performing\n     a lookup rather than using the raw arguments. [Martin Ksellmann\n     <martin@ksellmann.de>]\n\n  *) core: Add dirwalk_stat hook.  [Jeff Trawick]\n\n  *) core: Add post_perdir_config hook.\n     [Steinar Gunderson <sgunderson bigfoot.com>]\n\n  *) proxy_util: NULL terminate the right buffer in 'send_http_connect'.\n     [Christophe Jaillet]\n\n  *) mod_remoteip: close file in error path. [Christophe Jaillet]\n\n  *) core: make the \"default\" parameter of the \"ErrorDocument\" option case\n     insensitive. PR 54419 [Tianyin Xu <tixu cs ucsd edu>]\n\n  *) mod_proxy_html: make the \"ProxyHTMLFixups\" options case insensitive.\n     PR 54420 [Tianyin Xu <tixu cs ucsd edu>]\n\n  *) mod_cache: Make option \"CacheDisable\" in mod_cache case insensitive.\n     PR 54462 [Tianyin Xu <tixu cs ucsd edu>]\n\n  *) mod_cache: If a 304 response indicates an entity not currently cached, then\n     the cache MUST disregard the response and repeat the request without the\n     conditional. [Graham Leggett, Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_cache: Ensure that we don't attempt to replace a cached response\n     with an older response as per RFC2616 13.12. [Graham Leggett, Co-Advisor\n     <coad measurement-factory.com>]\n\n  *) core, mod_cache: Ensure RFC2616 compliance in ap_meets_conditions()\n     with weak validation combined with If-Range and Range headers. Break\n     out explicit conditional header checks to be useable elsewhere in the\n     server. Ensure weak validation RFC compliance in the byteranges filter.\n     Ensure RFC validation compliance when serving cached entities. PR 16142\n     [Graham Leggett, Co-Advisor <coad measurement-factory.com>]\n\n  *) core: Add the ability to do explicit matching on weak and strong ETags\n     as per RFC2616 Section 13.3.3. [Graham Leggett, Co-Advisor\n     <coad measurement-factory.com>]\n\n  *) mod_cache: Ensure that updated responses to HEAD requests don't get\n     mistakenly paired with a previously cached body. Ensure that any existing\n     body is removed when a HEAD request is cached. [Graham Leggett,\n     Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_cache: Honour Cache-Control: no-store in a request. [Graham Leggett]\n\n  *) mod_cache: Make sure that contradictory entity headers present in a 304\n     Not Modified response are caught and cause the entity to be removed.\n     [Graham Leggett]\n\n  *) mod_cache: Make sure Vary processing handles multivalued Vary headers and\n     multivalued headers referred to via Vary. [Graham Leggett]\n\n  *) mod_cache: When serving from cache, only the last header of a multivalued\n     header was taken into account. Fixed. Ensure that Warning headers are\n     correctly handled as per RFC2616. [Graham Leggett]\n\n  *) mod_cache: Ignore response headers specified by no-cache=header and\n     private=header as specified by RFC2616 14.9.1 What is Cacheable. Ensure\n     that these headers are still processed when multiple Cache-Control\n     headers are present in the response. PR 54706 [Graham Leggett,\n     Yann Ylavic <ylavic.dev gmail.com>]\n\n  *) mod_cache: Invalidate cached entities in response to RFC2616 Section\n     13.10 Invalidation After Updates or Deletions. PR 15868 [Graham\n     Leggett]\n\n  *) mod_dav: Improve error handling in dav_method_put(), add new\n     dav_join_error() function.  PR 54145.  [Ben Reser <ben reser.org>]\n\n  *) mod_dav: Do not fail PROPPATCH when prop namespace is not known.\n     PR 52559 [Diego Santa Cruz <diego.santaCruz spinetix.com>]\n\n  *) mod_dav: When a PROPPATCH attempts to remove a non-existent dead\n     property on a resource for which there is no dead property in the same\n     namespace httpd segfaults. PR 52559 [Diego Santa Cruz\n     <diego.santaCruz spinetix.com>]\n\n  *) mod_dav: Sending an If or If-Match header with an invalid ETag doesn't\n     result in a 412 Precondition Failed for a COPY operation. PR54610\n     [Timothy Wood <tjw omnigroup.com>]\n\n  *) mod_dav: Make sure that when we prepare an If URL for Etag comparison,\n     we compare unencoded paths. PR 53910 [Timothy Wood <tjw omnigroup.com>]\n\n  *) mod_deflate: Remove assumptions as to when an EOS bucket might arrive.\n     Gracefully step aside if the body size is zero. [Graham Leggett]\n\n  *) 'AuthGroupFile' and 'AuthUserFile' do not accept anymore the optional\n     'standard' keyword . It was unused and not documented.\n     PR54463 [Tianyin Xu <tixu cs.ucsd.edu> and Christophe Jaillet]\n\n  *) core: Do not over allocate memory within 'ap_rgetline_core' for\n     the common case. [Christophe Jaillet]\n\n  *) core: speed up (for common cases) and reduce memory usage of\n     ap_escape_logitem(). This should save 70-100 bytes in the request\n     pool for a default config. [Christophe Jaillet]\n\n  *) mod_dav: Ensure URI is correctly uriencoded on return. PR 54611\n     [Timothy Wood <tjw omnigroup.com>]\n\n  *) mod_proxy: Reject invalid values for Max-Forwards. [Graham Leggett,\n     Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_cache: RFC2616 14.9.3 The s-maxage directive also implies the\n     semantics of the proxy-revalidate directive. [Graham Leggett]\n\n  *) mod_ssl: add support for subjectAltName-based host name checking\n     in proxy mode (SSLProxyCheckPeerName). PR 54030. [Kaspar Brand]\n\n  *) core: Use the proper macro for HTTP/1.1. [Graham Leggett]\n\n  *) event MPM: Provide error handling for ThreadStackSize. PR 54311\n     [Tianyin Xu <tixu cs.ucsd.edu>, Christophe Jaillet]\n\n  *) mod_dav: Do not segfault on PROPFIND with a zero length DBM.\n     PR 52559 [Diego Santa Cruz <diego.santaCruz spinetix.com>]\n\n  *) core: Improve error message where client's request-line exceeds\n     LimitRequestLine. PR 54384 [Christophe Jaillet]\n\n  *) mod_macro: New module that provides macros within configuration files.\n     [Fabien Coelho]\n\n  *) mod_cache_socache: New cache implementation backed by mod_socache\n     that replaces mod_mem_cache known from httpd 2.2. [Graham\n     Leggett]\n\n  *) htpasswd: Add -v option to verify a password. [Stefan Fritsch]\n\n  *) mod_proxy: Add BalancerInherit and ProxyPassInherit to control\n     whether Proxy Balancers and Workers are inherited by vhosts\n     (default is On). [Jim Jagielski]\n\n  *) mod_authnz_ldap: Allow using exec: calls to obtain LDAP bind\n     password.  [Daniel Ruggeri]\n\n  *) Added balancer parameter failontimeout to allow server admin\n     to configure an IO timeout as an error in the balancer.\n     [Daniel Ruggeri]\n\n  *) mod_auth_digest: Fix crashes if shm initialization failed. [Stefan\n     Fritsch]\n\n  *) htpasswd, htdbm: Fix password generation. PR 54735. [Stefan Fritsch]\n\n  *) core: Add workaround for gcc bug on sparc/64bit. PR 52900.\n     [Stefan Fritsch]\n\n  *) mod_setenvif: Fix crash in case SetEnvif and SetEnvIfExpr are used\n     together. PR 54881. [Ruediger Pluem]\n\n  *) htdigest: Fix buffer overflow when reading digest password file\n     with very long lines. PR 54893. [Rainer Jung]\n\n  *) ap_expr: Add the ability to base64 encode and base64 decode\n     strings and to generate their SHA1 and MD5 hash.\n     [Graham Leggett, Stefan Fritsch]\n\n  *) mod_log_config: Fix crash when logging request end time for a failed\n     request.  PR 54828 [Rainer Jung]\n\n  *) mod_ssl: Catch missing, mismatched or encrypted client cert/key pairs\n     with SSLProxyMachineCertificateFile/Path directives. PR 52212, PR 54698.\n     [Keith Burdis <keith burdis.org>, Joe Orton, Kaspar Brand]\n\n  *) mod_ssl: Quiet FIPS mode weak keys disabled and FIPS not selected emits\n     in the error log to debug level.  [William Rowe]\n\n  *) mod_cache_disk: CacheMinFileSize and CacheMaxFileSize were always\n     using compiled in defaults of 1000000/1 respectively. [Eric Covener]\n\n  *) mod_lbmethod_heartbeat, mod_heartmonitor: Respect DefaultRuntimeDir/\n     DEFAULT_REL_RUNTIMEDIR for the heartbeat storage file.  [Jeff Trawick]\n\n  *) mod_include: Use new ap_expr for 'elif', like 'if',\n     if legacy parser is not specified.  PR 54548 [Tom Donovan]\n\n  *) mod_lua: Add some new functions: r:htpassword(), r:mkdir(), r:mkrdir(),\n     r:rmdir(), r:touch(), r:get_direntries(), r.date_parse_rfc().\n     [Guenter Knauf]\n\n  *) mod_lua: Add multipart form data handling. [Daniel Gruno]\n\n  *) mod_lua: If a LuaMapHandler doesn't return any value, log a warning\n     and treat it as apache2.OK. [Eric Covener]\n\n  *) mod_lua: Add bindings for apr_dbd/mod_dbd database access\n     [Daniel Gruno]\n\n  *) mod_lua: Add LuaInputFilter/LuaOutputFilter for creating content\n     filters in Lua [Daniel Gruno]\n\n  *) mod_lua: Allow scripts handled by the lua-script handler to return\n     a status code to the client (such as a 302 or a 500) [Daniel Gruno]\n\n  *) mod_lua: Decline handling 'lua-script' if the file doesn't exist,\n     rather than throwing an internal server error. [Daniel Gruno]\n\n  *) mod_lua: Add functions r:flush and r:sendfile as well as additional\n     request information to the request_rec structure. [Daniel Gruno]\n\n  *) mod_lua: Add a server scope for Lua states, which creates a pool of\n     states with manageable minimum and maximum size. [Daniel Gruno]\n\n  *) mod_lua: Add new directive, LuaMapHandler, for dynamically mapping\n     URIs to Lua scripts and functions using regular expressions.\n     [Daniel Gruno]\n\n  *) mod_lua: Add new directive LuaCodeCache for controlling in-memory\n     caching of lua scripts. [Daniel Gruno]\n\nChanges with Apache 2.4.4\n\n  *) SECURITY: CVE-2012-3499 (cve.mitre.org)\n     Various XSS flaws due to unescaped hostnames and URIs HTML output in\n     mod_info, mod_status, mod_imagemap, mod_ldap, and mod_proxy_ftp.\n     [Jim Jagielski, Stefan Fritsch, Niels Heinen <heinenn google com>]\n\n  *) SECURITY: CVE-2012-4558 (cve.mitre.org)\n     XSS in mod_proxy_balancer manager interface. [Jim Jagielski,\n     Niels Heinen <heinenn google com>]\n\n  *) mod_dir: Add support for the value 'disabled' in FallbackResource.\n     [Vincent Deffontaines]\n\n  *) mod_proxy_connect: Don't keepalive the connection to the client if the\n     backend closes the connection. PR 54474. [Pavel Mateja <pavel netsafe cz>]\n\n  *) mod_lua: Add bindings for mod_dbd/apr_dbd database access.\n     [Daniel Gruno]\n\n  *) mod_proxy: Allow for persistence of local changes made via the\n     balancer-manager between graceful/normal restarts and power\n     cycles. [Jim Jagielski]\n\n  *) mod_proxy: Fix startup crash with mis-defined balancers.\n     PR 52402. [Jim Jagielski]\n\n  *) --with-module: Fix failure to integrate them into some existing\n     module directories.  PR 40097.  [Jeff Trawick]\n\n  *) htcacheclean: Fix potential segfault if \"-p\" is omitted.  [Joe Orton]\n\n  *) mod_proxy_http: Honour special value 0 (unlimited) of LimitRequestBody\n     PR 54435.  [Pavel Mateja <pavel netsafe.cz>]\n\n  *) mod_proxy_ajp: Support unknown HTTP methods. PR 54416.\n     [Rainer Jung]\n\n  *) htcacheclean: Fix list options \"-a\" and \"-A\".\n     [Rainer Jung]\n\n  *) mod_slotmem_shm: Fix mistaken reset of num_free for restored shm.\n     [Jim Jagielski]\n\n  *) mod_proxy: non-existence of byrequests is not an immediate error.\n     [Jim Jagielski]\n\n  *) mod_proxy_balancer: Improve output of balancer-manager (re: Drn,\n     Dis, Ign, Stby). PR 52478 [Danijel <dt-ng rbfh de>]\n\n  *) configure: Fix processing of --disable-FEATURE for various features.\n     [Jeff Trawick]\n\n  *) mod_dialup/mod_http: Prevent a crash in mod_dialup in case of internal\n     redirect. PR 52230.\n\n  *) various modules, rotatelogs: Replace use of apr_file_write() with\n     apr_file_write_full() to prevent incomplete writes. PR 53131.\n     [Nicolas Viennot <apache viennot biz>, Stefan Fritsch]\n\n  *) ab: Support socket timeout (-s timeout).\n     [Guido Serra <zeph fsfe org>]\n\n  *) httxt2dbm: Correct length computation for the 'value' stored in the\n     DBM file. PR 47650 [jon buckybox com]\n\n  *) core: Be more correct about rejecting directives that cannot work in <If>\n     sections. [Stefan Fritsch]\n\n  *) core: Fix directives like LogLevel that need to know if they are invoked\n     at virtual host context or in Directory/Files/Location/If sections to\n     work properly in If sections that are not in a Directory/Files/Location.\n     [Stefan Fritsch]\n\n  *) mod_xml2enc: Fix problems with charset conversion altering the\n     Content-Length. [Micha Lenk <micha lenk info>]\n\n  *) ap_expr: Add req_novary function that allows HTTP header lookups\n     without adding the name to the Vary header. [Stefan Fritsch]\n\n  *) mod_slotmem_*: Add in new fgrab() function which forces a grab and\n     slot allocation on a specified slot. Allow for clearing of inuse\n     array. [Jim Jagielski]\n\n  *) mod_proxy_ftp: Fix segfaults on IPv4 requests to hosts with DNS\n     AAAA records. PR  40841. [Andrew Rucker Jones <arjones simultan\n     dyndns org>, <ast domdv de>, Jim Jagielski]\n\n  *) mod_auth_form: Make sure that get_notes_auth() sets the user as does\n     get_form_auth() and get_session_auth(). Makes sure that REMOTE_USER\n     does not vanish during mod_include driven subrequests. [Graham\n     Leggett]\n\n  *) mod_cache_disk: Resolve errors while revalidating disk-cached files on\n     Windows (\"...rename tempfile to datafile failed...\"). PR 38827\n     [Eric Covener]\n\n  *) mod_proxy_balancer: Bring XML output up to date. [Jim Jagielski]\n\n  *) htpasswd, htdbm: Optionally read passwords from stdin, as more\n     secure alternative to -b.  PR 40243. [Adomas Paltanavicius <adomas\n     paltanavicius gmail com>, Stefan Fritsch]\n\n  *) htpasswd, htdbm: Add support for bcrypt algorithm (requires\n     apr-util 1.5 or higher). PR 49288. [Stefan Fritsch]\n\n  *) htpasswd, htdbm: Put full 48bit of entropy into salt, improve\n     error handling. Add some of htpasswd's improvements to htdbm,\n     e.g. warn if password is truncated by crypt(). [Stefan Fritsch]\n\n  *) mod_auth_form: Support the expr parser in the\n     AuthFormLoginRequiredLocation, AuthFormLoginSuccessLocation and\n     AuthFormLogoutLocation directives. [Graham Leggett]\n\n  *) mod_ssl: Add support for TLS-SRP (Secure Remote Password key exchange\n     for TLS, RFC 5054). PR 51075. [Quinn Slack <sqs cs stanford edu>,\n     Christophe Renou, Peter Sylvester]\n\n  *) mod_rewrite: Stop mergeing RewriteBase down to subdirectories\n     unless new option 'RewriteOptions MergeBase' is configured.\n     PR 53963. [Eric Covener]\n\n  *) mod_header: Allow for exposure of loadavg and server load using new\n     format specifiers %l, %i, %b [Jim Jagielski]\n\n  *) core: Make ap_regcomp() return AP_REG_ESPACE if out of memory.  Make\n     ap_pregcomp() abort if out of memory. This raises the minimum PCRE\n     requirement to version 6.0. [Stefan Fritsch]\n\n  *) mod_proxy: Add ability to configure the sticky session separator.\n     PR 53893. [<inu inusasha de>, Jim Jagielski]\n\n  *) mod_dumpio: Correctly log large messages\n     PR 54179 [Marek Wianecki <mieszek2 interia pl>]\n\n  *) core: Don't fail at startup with AH00554 when Include points to\n     a directory without any wildcard character. [Eric Covener]\n\n  *) core: Fail startup if the argument to ServerTokens is unrecognized.\n     [Jackie Zhang  <jackie.qq.zhang gmail.com>]\n\n  *) mod_log_forensic: Don't log a spurious \"-\" if a request has been rejected\n     before mod_log_forensic could attach its id to it. [Stefan Fritsch]\n\n  *) rotatelogs: Omit the second argument for the first invocation of\n     a post-rotate program when -p is used, per the documentation.\n     [Joe Orton]\n\n  *) mod_session_dbd: fix a segmentation fault in the function dbd_remove.\n     PR 53452. [<rebanerebane gmail com>, Reimo Rebane]\n\n  *) core: Functions to provide server load values: ap_get_sload() and\n     ap_get_loadavg(). [Jim Jagielski, Jan Kaluza <jkaluza redhat.com>,\n     Jeff Trawick]\n\n  *) mod_ldap: Fix regression in handling \"server unavailable\" errors on\n     Windows.  PR 54140.  [Eric Covener]\n\n  *) syslog logging: Remove stray \", referer\" at the end of some messages.\n     [Jeff Trawick]\n\n  *) \"Iterate\" directives: Report an error if no arguments are provided.\n     [Jeff Trawick]\n\n  *) mod_ssl: Change default for SSLCompression to off, as compression\n     causes security issues in most setups. (The so called \"CRIME\" attack).\n     [Stefan Fritsch]\n\n  *) ab: add TLS1.1/TLS1.2 options to -f switch, and adapt output\n     to more accurately report the negotiated protocol. PR 53916.\n     [Nicol\u00e1s Pernas Maradei <nico emutex com>, Kaspar Brand]\n\n  *) core: ErrorDocument now works for requests without a Host header.\n     PR 48357.  [Jeff Trawick]\n\n  *) prefork: Avoid logging harmless errors during graceful stop.\n     [Joe Orton, Jeff Trawick]\n\n  *) mod_proxy: When concatting for PPR, avoid cases where we\n     concat \".../\" and \"/...\" to create \"...//...\" [Jim Jagielski]\n\n  *) mod_cache: Wrong content type and character set when\n     mod_cache serves stale content because of a proxy error.\n     PR 53539.  [Rainer Jung, Ruediger Pluem]\n\n  *) mod_proxy_ajp: Fix crash in packet dump code when logging\n     with LogLevel trace7 or trace8.  PR 53730.  [Rainer Jung]\n\n  *) httpd.conf: Removed the configuration directives setting a bad_DNT\n     environment introduced in 2.4.3. The actual directives are commented\n     out in the default conf file.\n\n  *) core: Apply length limit when logging Status header values.\n     [Jeff Trawick, Chris Darroch]\n\n  *) mod_proxy_balancer: The nonce is only derived from the UUID iff\n     not set via the 'nonce' balancer param. [Jim Jagielski]\n\n  *) mod_ssl: Match wildcard SSL certificate names in proxy mode.\n     PR 53006.  [Joe Orton]\n\n  *) Windows: Fix output of -M, -L, and similar command-line options\n     which display information about the server configuration.\n     [Jeff Trawick]\n\nChanges with Apache 2.4.3\n\n  *) SECURITY: CVE-2012-3502  (cve.mitre.org)\n     mod_proxy_ajp, mod_proxy_http: Fix an issue in back end\n     connection closing which could lead to privacy issues due\n     to a response mixup. PR 53727. [Rainer Jung]\n\n  *) SECURITY: CVE-2012-2687 (cve.mitre.org)\n     mod_negotiation: Escape filenames in variant list to prevent a\n     possible XSS for a site where untrusted users can upload files to\n     a location with MultiViews enabled. [Niels Heinen <heinenn google.com>]\n\n  *) mod_authnz_ldap: Don't try a potentially expensive nested groups\n     search before exhausting all AuthLDAPGroupAttribute checks on the\n     current group. PR 52464 [Eric Covener]\n\n  *) mod_lua: Add new directive LuaAuthzProvider to allow implementing an\n     authorization provider in lua. [Stefan Fritsch]\n\n  *) core: Be less strict when checking whether Content-Type is set to\n     \"application/x-www-form-urlencoded\" when parsing POST data,\n     or we risk losing data with an appended charset. PR 53698\n     [Petter Berntsen <petterb gmail.com>]\n\n  *) httpd.conf: Added configuration directives to set a bad_DNT environment\n     variable based on User-Agent and to remove the DNT header field from\n     incoming requests when a match occurs. This currently has the effect of\n     removing DNT from requests by MSIE 10.0 because it deliberately violates\n     the current specification of DNT semantics for HTTP. [Roy T. Fielding]\n\n  *) mod_socache_shmcb: Fix bus error due to a misalignment\n     in some 32 bit builds, especially on Solaris Sparc.\n     PR 53040.  [Rainer Jung]\n\n  *) mod_cache: Set content type in case we return stale content.\n     [Ruediger Pluem]\n\n  *) Windows: Fix SSL failures on windows with AcceptFilter https none.\n     PR 52476.  [Jeff Trawick]\n\n  *) ab: Fix read failure when targeting SSL server.  [Jeff Trawick]\n\n  *) The following now respect DefaultRuntimeDir/DEFAULT_REL_RUNTIMEDIR:\n     - mod_auth_digest: shared memory file\n     [Jeff Trawick]\n\n  *) htpasswd: Use correct file mode for checking if file is writable.\n     PR 45923. [Stefan Fritsch]\n\n  *) mod_rewrite: Fix crash with dbd RewriteMaps. PR 53663. [Mikhail T.\n     <mi apache aldan algebra com>]\n\n  *) mod_ssl: Add new directive SSLCompression to disable TLS-level\n     compression. PR 53219. [Bj\u00f6rn Jacke <bjoern j3e de>, Stefan Fritsch]\n\n  *) mod_lua: Add a few missing request_rec fields. Rename remote_ip to\n     client_ip to match conn_rec. [Stefan Fritsch]\n\n  *) mod_lua: Change prototype of vm_construct, to work around gcc bug which\n     causes a segfault. PR 52779. [Dick Snippe <Dick Snippe tech omroep nl>]\n\n  *) mpm_event: Don't count connections in lingering close state when\n     calculating how many additional connections may be accepted.\n     [Stefan Fritsch]\n\n  *) mod_ssl: If exiting during initialization because of a fatal error,\n     log a message to the main error log pointing to the appropriate\n     virtual host error log. [Stefan Fritsch]\n\n  *) mod_proxy_ajp: Reduce memory usage in case of many keep-alive requests on\n     one connection. PR 52275. [Naohiro Ooiwa <naohiro ooiwa miraclelinux com>]\n\n  *) mod_proxy_balancer: Restore balancing after a failed worker has\n     recovered when using lbmethod_bybusyness.  PR 48735.  [Jeff Trawick]\n\n  *) mod_setenvif: Compile some global regex only once during startup.\n     This should save some memory, especially with .htaccess.\n     [Stefan Fritsch]\n\n  *) core: Add the port number to the vhost's name in the scoreboard.\n     [Stefan Fritsch]\n\n  *) mod_proxy: Fix ProxyPassReverse for balancer configurations.\n     PR 45434.  [Joe Orton]\n\n  *) mod_lua: Add the parsebody function for parsing POST data. PR 53064.\n     [Daniel Gruno]\n\n  *) apxs: Use LDFLAGS from config_vars.mk in addition to CFLAGS and CPPFLAGS.\n     [Stefan Fritsch]\n\n  *) mod_proxy: Fix memory leak or possible corruption in ProxyBlock\n     implementation.  [Ruediger Pluem, Joe Orton]\n\n  *) mod_proxy: Check hostname from request URI against ProxyBlock list,\n     not forward proxy, if ProxyRemote* is configured.  [Joe Orton]\n\n  *) mod_proxy_connect: Avoid DNS lookup on hostname from request URI\n     if ProxyRemote* is configured.  PR 43697.  [Joe Orton]\n\n  *) mpm_event, mpm_worker: Remain active amidst prevalent child process\n     resource shortages.  [Jeff Trawick]\n\n  *) Add \"strict\" and \"warnings\" pragmas to Perl scripts.  [Rich Bowen]\n\n  *) The following now respect DefaultRuntimeDir/DEFAULT_REL_RUNTIMEDIR:\n     - core: the scoreboard (ScoreBoardFile), pid file (PidFile), and\n       mutexes (Mutex)\n     [Jim Jagielski]\n\n  *) ab: Fix bind() errors.  [Joe Orton]\n\n  *) mpm_event: Don't do a blocking write when starting a lingering close\n     from the listener thread. PR 52229. [Stefan Fritsch]\n\n  *) mod_so: If a filename without slashes is specified for LoadFile or\n     LoadModule and the file cannot be found in the server root directory,\n     try to use the standard dlopen() search path. [Stefan Fritsch]\n\n  *) mpm_event, mpm_worker: Fix cases where the spawn rate wasn't reduced\n     after child process resource shortages.  [Jeff Trawick]\n\n  *) mpm_prefork: Reduce spawn rate after a child process exits due to\n     unexpected poll or accept failure.  [Jeff Trawick]\n\n  *) core: Log value of Status header line in script responses rather\n     than the fixed header name.  [Chris Darroch]\n\n  *) mod_ssl: Fix handling of empty response from OCSP server.\n     [Jim Meyering <meyering redhat.com>, Joe Orton]\n\n  *) mpm_event: Fix handling of MaxConnectionsPerChild. [Stefan Fritsch]\n\n  *) mod_authz_core: If an expression in \"Require expr\" returns denied and\n     references %{REMOTE_USER}, trigger authentication and retry. PR 52892.\n     [Stefan Fritsch]\n\n  *) core: Always log if LimitRequestFieldSize triggers.  [Stefan Fritsch]\n\n  *) mod_deflate: Skip compression if compression is enabled at SSL level.\n     [Stefan Fritsch]\n\n  *) core: Add missing HTTP status codes registered with IANA.\n     [Julian Reschke <julian.reschke gmx.de>, Rainer Jung]\n\n  *) mod_ldap: Treat the \"server unavailable\" condition as a transient\n     error with all LDAP SDKs.  [Filip Valder <filip.valder vsb.cz>]\n\n  *) core: Fix spurious \"not allowed here\" error returned when the Options\n     directive is used in .htaccess and \"AllowOverride Options\" (with no\n     specific options restricted) is configured.  PR 53444. [Eric Covener]\n\n  *) mod_authz_core: Fix parsing of Require arguments in <AuthzProviderAlias>.\n     PR 53048. [Stefan Fritsch]\n\n  *) mod_log_config: Fix %{abc}C truncating cookie values at first \"=\".\n     PR 53104. [Greg Ames]\n\n  *) mod_ext_filter: Fix error_log spam when input filters are configured.\n     [Joe Orton]\n\n  *) mod_rewrite: Add \"AllowAnyURI\" option. PR 52774. [Joe Orton]\n\n  *) htdbm, htpasswd: Don't crash if crypt() fails (e.g. with FIPS enabled).\n     [Paul Wouters <pwouters redhat.com>, Joe Orton]\n\n  *) core: Use a TLS 1.0 close_notify alert for internal dummy connection if\n     the chosen listener is configured for https. [Joe Orton]\n\n  *) mod_proxy: Use the the same hostname for SNI as for the HTTP request when\n     forwarding to SSL backends. PR 53134.\n     [Michael Weiser <michael weiser.dinsnail.net>, Ruediger Pluem]\n\n  *) mod_info: Display all registered providers. [Stefan Fritsch]\n\n  *) mod_ssl: Send the error message for speaking http to an https port using\n     HTTP/1.0 instead of HTTP/0.9, and omit the link that may be wrong when\n     using SNI. PR 50823. [Stefan Fritsch]\n\n  *) core: Fix segfault in logging if r->useragent_addr or c->client_addr is\n     unset. PR 53265. [Stefan Fritsch]\n\n  *) log_server_status: Bring Perl style forward to the present, use\n     standard modules, update for new format of server-status output.\n     PR 45424. [Richard Bowen, Dave Brondsema, and others]\n\n  *) mod_sed, mod_log_debug, mod_rewrite: Symbol namespace cleanups.\n     [Joe Orton, Andr\u00e9 Malo]\n\n  *) core: Prevent \"httpd -k restart\" from killing server in presence of\n     config error. [Joe Orton]\n\n  *) mod_proxy_fcgi: If there is an error reading the headers from the\n     backend, send an error to the client. PR 52879. [Stefan Fritsch]\n\nChanges with Apache 2.4.2\n\n  *) SECURITY: CVE-2012-0883 (cve.mitre.org)\n     envvars: Fix insecure handling of LD_LIBRARY_PATH that could lead to the\n     current working directory to be searched for DSOs. [Stefan Fritsch]\n\n  *) mod_slotmem_shm: Honor DefaultRuntimeDir [Jim Jagielski]\n\n  *) mod_ssl: Fix crash with threaded MPMs due to race condition when\n     initializing EC temporary keys. [Stefan Fritsch]\n\n  *) mod_rewrite: Fix RewriteCond integer checks to be parsed correctly.\n     PR 53023. [Axel Reinhold <apache freakout.de>, Andr\u00e9 Malo]\n\n  *) mod_proxy: Add the forcerecovery balancer parameter that determines if\n     recovery for balancer workers is enforced. [Ruediger Pluem]\n\n  *) Fix MPM DSO load failure on AIX.  [Jeff Trawick]\n\n  *) mod_proxy: Correctly set up reverse proxy worker. PR 52935.\n     [Petter Berntsen <petterb gmail.com>]\n\n  *) mod_sed: Don't define PATH_MAX to a potentially undefined value, causing\n     compile problems on GNU hurd. [Stefan Fritsch]\n\n  *) core: Add ap_runtime_dir_relative() and DefaultRuntimeDir.\n     [Jeff Trawick]\n\n  *) core: Fix breakage of Listen directives with MPMs that use a\n     per-directory config. PR 52904. [Stefan Fritsch]\n\n  *) core: Disallow directives in AllowOverrideList which are only allowed\n     in VirtualHost or server context. These are usually not prepared to be\n     called in .htaccess files. [Stefan Fritsch]\n\n  *) core: In AllowOverrideList, do not allow 'None' together with other\n     directives. PR 52823. [Stefan Fritsch]\n\n  *) mod_slotmem_shm: Support DEFAULT_REL_RUNTIMEDIR for file-based shm.\n     [Jim Jagielski]\n\n  *) core: Fix merging of AllowOverrideList and ContentDigest.\n     [Stefan Fritsch]\n\n  *) mod_request: Fix validation of the KeptBodySize argument so it\n     doesn't always throw a configuration error. PR 52981 [Eric Covener]\n\n  *) core: Add filesystem paths to access denied / access failed messages\n     AH00035 and AH00036. [Eric Covener]\n\n  *) mod_dumpio: Properly handle errors from subsequent input filters.\n     PR 52914. [Stefan Fritsch]\n\n  *) Unix MPMs: Fix small memory leak in parent process if connect()\n     failed when waking up children.  [Joe Orton]\n\n  *) \"DirectoryIndex disabled\" now undoes DirectoryIndex settings in\n     the current configuration section, not just previous config sections.\n     PR 52845. [Eric Covener]\n\n  *) mod_xml2enc: Fix broken handling of EOS buckets which could lead to\n     response headers not being sent. PR 52766. [Stefan Fritsch]\n\n  *) mod_ssl: Properly free the GENERAL_NAMEs. PR 32652. [Kaspar Brand]\n\n  *) core: Check during config test that directories for the access\n     logs actually exist. PR 29941. [Stefan Fritsch]\n\n  *) mod_xml2enc, mod_proxy_html: Enable per-module loglevels.\n     [Stefan Fritsch]\n\n  *) mod_filter: Fix segfault with AddOutputFilterByType. PR 52755.\n     [Stefan Fritsch]\n\n  *) mod_session: Sessions are encoded as application/x-www-form-urlencoded\n     strings, however we do not handle the encoding of spaces properly.\n     Fixed. [Graham Leggett]\n\n  *) Configuration: Example in comment should use a path consistent\n     with the default configuration. PR 52715.\n     [Rich Bowen, Jens Schleusener, Rainer Jung]\n\n  *) Configuration: Switch documentation links from trunk to 2.4.\n     [Rainer Jung]\n\n  *) configure: Fix out of tree build using apr and apr-util in srclib.\n     [Rainer Jung]\n\nChanges with Apache 2.4.1\n\n  *) SECURITY: CVE-2012-0053 (cve.mitre.org)\n     Fix an issue in error responses that could expose \"httpOnly\" cookies\n     when no custom ErrorDocument is specified for status code 400.\n     [Eric Covener]\n\n  *) mod_proxy_balancer: Fix crash on Windows. PR 52402 [Mladen Turk]\n\n  *) core: Check during configtest that the directories for error logs exist.\n     PR 29941 [Stefan Fritsch]\n\n  *) Core configuration: add AllowOverride option to treat syntax\n     errors in .htaccess as non-fatal. PR 52439 [Nick Kew, Jim Jagielski]\n\n  *) core: Fix memory consumption in core output filter with streaming\n     bucket types like CGI or PIPE.  [Joe Orton, Stefan Fritsch]\n\n  *) configure: Disable modules at configure time if a prerequisite module\n     is not enabled. PR 52487. [Stefan Fritsch]\n\n  *) Rewrite and proxy now decline what they don't support rather\n     than fail the request. [Joe Orton]\n\n  *) Fix building against external apr plus apr-util if apr is not installed\n     in a system default path. [Rainer Jung]\n\n  *) Doxygen fixes and improvements. [Joe Orton, Igor Gali\u0107]\n\n  *) core: Fix building against PCRE 8.30 by switching from the obsolete\n     pcre_info() to pcre_fullinfo(). PR 52623 [Ruediger Pluem, Rainer Jung]\n\nChanges with Apache 2.4.0\n\n  *) SECURITY: CVE-2012-0031 (cve.mitre.org)\n     Fix scoreboard issue which could allow an unprivileged child process\n     to cause the parent to crash at shutdown rather than terminate\n     cleanly.  [Joe Orton]\n\n  *) mod_ssl: Fix compilation with xlc on AIX. PR 52394. [Stefan Fritsch]\n\n  *) SECURITY: CVE-2012-0021 (cve.mitre.org)\n     mod_log_config: Fix segfault (crash) when the '%{cookiename}C' log format\n     string is in use and a client sends a nameless, valueless cookie, causing\n     a denial of service. The issue existed since version 2.2.17 and 2.3.3.\n     PR 52256.  [Rainer Canavan <rainer-apache 7val com>]\n\n  *) mod_ssl: when compiled against OpenSSL 1.0.1 or later, allow explicit\n     control of TLSv1.1 and TLSv1.2 through the SSLProtocol directive.\n     [Kaspar Brand]\n\n  *) mod_ssl: set OPENSSL_NO_SSL_INTERN when compiling against OpenSSL 1.0.1\n     or later, to improve binary compatibility with future OpenSSL releases.\n     [Kaspar Brand]\n\n  *) mod_mime: Don't arbitrarily bypass AddOutputFilter during a ProxyPass,\n     but then allow AddOutputFilter during a RewriteRule [P]. Make mod_mime\n     behave identically in both cases. PR52342. [Graham Leggett]\n\n  *) Move ab, logresolve, httxt2dbm and apxs to bin from sbin, along with\n     corresponding man pages. [Graham Leggett]\n\n  *) Distinguish properly between the bindir and sbindir directories when\n     installing binaries. Previously all binaries were silently installed to\n     sbindir, whether they were system administration commands or not.\n     [Graham Leggett]\n\nChanges with Apache 2.3.16\n\n  *) SECURITY: CVE-2011-4317 (cve.mitre.org)\n     Resolve additional cases of URL rewriting with ProxyPassMatch or\n     RewriteRule, where particular request-URIs could result in undesired\n     backend network exposure in some configurations.\n     [Joe Orton]\n\n  *) core: Limit line length in .htaccess to 8K like in 2.2.x, to avoid\n     additional DoS potential. [Stefan Fritsch]\n\n  *) core, all modules: Add unique tag to most error log messages. [Stefan\n     Fritsch]\n\n  *) mod_socache_memcache: Change provider name from \"mc\" to \"memcache\" to\n     match module name. [Stefan Fritsch]\n\n  *) mod_slotmem_shm: Change provider name from \"shared\" to \"shm\" to match\n     module name. [Stefan Fritsch]\n\n  *) mod_ldap: Fix segfault with Solaris LDAP when enabling ldaps. This\n     requires an apr-util fix in which is available in apr-util >= 1.4.0.\n     PR 42682. [Stefan Fritsch]\n\n  *) mod_rewrite: Add the AllowNoSlash RewriteOption, which makes it possible\n     for RewriteRules to be placed in .htaccess files that match the directory\n     with no trailing slash. PR 48304.\n     [Matthew Byng-Maddick <matthew byng-maddick bbc.co.uk>]\n\n  *) mod_session_crypto: Add a SessionCryptoPassphraseFile directive so that\n     the administrator can hide the keys from the configuration. [Graham\n     Leggett]\n\n  *) Introduce a per request version of the remote IP address, which can be\n     optionally modified by a module when the effective IP of the client\n     is not the same as the real IP of the client (such as a load balancer).\n     Introduce a per connection \"peer_ip\" and a per request \"client_ip\" to\n     distinguish between the raw IP address of the connection and the effective\n     IP address of the request. [Graham Leggett]\n\n  *) ap_pass_brigade_fchk() function added. [Jim Jagielski]\n\n  *) core: Pass ap_errorlog_info struct to error log hook. [Stefan Fritsch]\n\n  *) mod_cache_disk: Make sure we check return codes on all writes and\n     attempts to close, and clean up after ourselves in these cases.\n     PR43589. [Graham Leggett]\n\n  *) mod_cache_disk: Remove the unnecessary intermediate brigade while\n     writing to disk. Fixes a problem where mod_disk_cache was leaving\n     buckets in the intermediate brigade and not passing them to out on\n     exit. [Florian S. <f_los_ch yahoo.com>, Graham Leggett]\n\n  *) mod_ssl: use a shorter setting for SSLCipherSuite in the default\n     default configuration file, and add some more information about\n     configuring a speed-optimized alternative.\n     [Kaspar Brand]\n\n  *) mod_ssl: drop support for the SSLv2 protocol. [Kaspar Brand]\n\n  *) mod_lua: Stop losing track of all but the most specific LuaHook* directives\n     when multiple per-directory config sections are used.  Adds LuaInherit\n     directive to control how parent sections are merged.  [Eric Covener]\n\n  *) Server directive display (-L): Include directives of DSOs.\n     [Jeff Trawick]\n\n  *) mod_cache: Make sure we merge headers correctly when we handle a\n     non cacheable conditional response. PR52120. [Graham Leggett]\n\n  *) Pre GA removal of components that will not be included:\n     - mod_noloris was superseded by mod_reqtimeout\n     - mod_serf\n     - mpm_simple\n     [Rainer Jung]\n\n  *) core: Set MaxMemFree 2048 by default. [Stefan Fritsch]\n\n  *) mpm_event: Fix assertion failure during very high load. [Stefan Fritsch]\n\n  *) configure: Additional modules loaded by default: mod_headers.\n     Modules moved from module set \"few\" to \"most\" and no longer loaded\n     by default: mod_actions, mod_allowmethods, mod_auth_form, mod_buffer,\n     mod_cgi(d), mod_include, mod_negotiation, mod_ratelimit, mod_request,\n     mod_userdir. [Rainer Jung]\n\n  *) mod_lua: Use the right lua scope when used as a hook. [Rainer Jung]\n\n  *) configure: Only load the really imporant modules (i.e. those enabled by\n     the 'few' selection) by default. Don't handle modules enabled with\n     --enable-foo specially. [Stefan Fritsch]\n\n  *) end-generation hook: Fix false notification of end-of-generation for\n     temporary intervals with no active MPM children.  [Jeff Trawick]\n\n  *) mod_ssl: Add support for configuring persistent TLS session ticket\n     encryption/decryption keys (useful for clustered environments).\n     [Paul Querna, Kaspar Brand]\n\n  *) mod_usertrack: Use random value instead of remote IP address.\n     [Stefan Fritsch]\n\nChanges with Apache 2.3.15\n\n  *) SECURITY: CVE-2011-3348 (cve.mitre.org)\n     mod_proxy_ajp: Respond with HTTP_NOT_IMPLEMENTED when the method is not\n     recognized.  [Jean-Frederic Clere]\n\n  *) SECURITY: CVE-2011-3192 (cve.mitre.org)\n     core: Fix handling of byte-range requests to use less memory, to avoid\n     denial of service. If the sum of all ranges in a request is larger than\n     the original file, ignore the ranges and send the complete file.\n     PR 51714. [Stefan Fritsch, Jim Jagielski, Ruediger Pluem, Eric Covener,\n     <lowprio20 gmail.com>]\n\n  *) SECURITY: CVE-2011-3607 (cve.mitre.org)\n     core: Fix integer overflow in ap_pregsub. This can be triggered e.g.\n     with mod_setenvif via a malicious .htaccess. [Stefan Fritsch]\n\n  *) SECURITY: CVE-2011-3368 (cve.mitre.org)\n     Reject requests where the request-URI does not match the HTTP\n     specification, preventing unexpected expansion of target URLs in\n     some reverse proxy configurations.  [Joe Orton]\n\n  *) configure: Load all modules in the generated default configuration\n     when using --enable-load-all-modules. [Rainer Jung]\n\n  *) mod_reqtimeout: Change the default to set some reasonable timeout\n     values. [Stefan Fritsch]\n\n  *) core, mod_dav_fs: Change default ETag to be \"size mtime\", i.e. remove\n     the inode. PR 49623. [Stefan Fritsch]\n\n  *) mod_lua: Expose SSL variables via r:ssl_var_lookup().  [Eric Covener]\n\n  *) mod_lua: LuaHook{AccessChecker,AuthChecker,CheckUserID,TranslateName}\n     can now additionally be run as \"early\" or \"late\" relative to other modules.\n     [Eric Covener]\n\n  *) configure: By default, only load those modules that are either required\n     or explicitly selected by a configure --enable-foo argument. The\n     LoadModule statements for modules enabled by --enable-mods-shared=most\n     and friends will be commented out. [Stefan Fritsch]\n\n  *) mod_lua: Prevent early Lua hooks (LuaHookTranslateName and\n     LuaHookQuickHandler) from being configured in <Directory>, <Files>,\n     and htaccess where the configuration would have been ignored.\n     [Eric Covener]\n\n  *) mod_lua: Resolve \"attempt to index local 'r' (a userdata value)\" errors\n     in LuaMapHandler scripts [Eric Covener]\n\n  *) mod_log_debug: Rename optional argument from if= to expr=, to be more\n     in line with other config directives. [Stefan Fritsch]\n\n  *) mod_headers: Require an expression to be specified with expr=, to be more\n     in line with other config directives. [Stefan Fritsch]\n\n  *) mod_substitute: To prevent overboarding memory usage, limit line length\n     to 1MB. [Stefan Fritsch]\n\n  *) mod_lua: Make the query string (r.args) writable. [Eric Covener]\n\n  *) mod_include: Add support for application/x-www-form-urlencoded encoding\n     and decoding. [Graham Leggett]\n\n  *) rotatelogs: Add -c option to force logfile creation in every rotation\n     interval, even if empty.  [Jan Kalu\u017ea <jkaluza redhat.com>]\n\n  *) core: Limit ap_pregsub() to 64K, add ap_pregsub_ex() for longer strings.\n     [Stefan Fritsch]\n\n  *) mod_session_crypto: Refactor to support the new apr_crypto API.\n     [Graham Leggett]\n\n  *) http: Add missing Location header if local URL-path is used as\n     ErrorDocument for 30x. [Stefan Fritsch]\n\n  *) mod_buffer: Make sure we step down for subrequests, but not for internal\n     redirects triggered by mod_rewrite. [Graham Leggett]\n\n  *) mod_lua: add r:construct_url as a wrapper for ap_construct_url.\n     [Eric Covener]\n\n  *) mod_remote_ip: Fix configuration of internal proxies. PR 49272.\n     [Jim Riggs <jim riggs me>]\n\n  *) mpm_winnt: Handle AcceptFilter 'none' mode correctly; resolve specific\n     server IP endpoint and remote client IP upon connection.  [William Rowe]\n\n  *) mod_setenvif: Remove OID match which is obsoleted by SetEnvIfExpr with\n     PeerExtList(). [Stefan Fritsch]\n\n  *) mpm_prefork, mpm_worker, mpm_event: If a child is created just before\n     graceful restart and then exits because of a missing lock file, don't\n     shutdown the whole server. PR 39311. [Shawn Michael\n     <smichael rightnow com>]\n\n  *) mpm_event: Check the return value from ap_run_create_connection.\n     PR 41194. [Davi Arnaut]\n\n  *) mod_mime_magic: Add signatures for PNG and SWF to the example config.\n     PR 48352. [Jeremy Wagner-Kaiser <jwagner-kaiser adknowledge com>]\n\n  *) core, unixd: Add -D DUMP_RUN_CFG option to dump some configuration items\n     from the parsed (or default) config. This is useful for init scripts that\n     need to setup temporary directories and permissions. [Stefan Fritsch]\n\n  *) core, mod_actions, mod_asis: Downgrade error log messages which accompany\n     a 404 request status from loglevel error to info. PR 35768. [Stefan\n     Fritsch]\n\n  *) core: Fix hook sorting with Perl modules. PR 45076. [Torsten Foertsch\n     <torsten foertsch gmx net>]\n\n  *) core: Enforce LimitRequestFieldSize after multiple headers with the same\n     name have been merged. [Stefan Fritsch]\n\n  *) mod_ssl: If MaxMemFree is set, ask OpenSSL >= 1.0.0 to reduce memory\n     usage.  PR 51618. [Cristian Rodr\u00edguez <crrodriguez opensuse org>,\n     Stefan Fritsch]\n\n  *) mod_ssl: At startup, when checking a server certificate whether it\n     matches the configured ServerName, also take dNSName entries in the\n     subjectAltName extension into account. PR 32652, PR 47051. [Kaspar Brand]\n\n  *) mod_substitute: Reduce memory usage and copying of data. PR 50559.\n     [Stefan Fritsch]\n\n  *) mod_ssl/proxy: enable the SNI extension for backend TLS connections\n     [Kaspar Brand]\n\n  *) Add wrappers for malloc, calloc, realloc that check for out of memory\n     situations and use them in many places. PR 51568, PR 51569, PR 51571.\n     [Stefan Fritsch]\n\n  *) Fix cross-compilation of mod_cgi/mod_cgid when APR_HAVE_STRUCT_RLIMIT is\n     false but RLIMIT_* are defined.  PR51371. [Eric Covener]\n\n  *) core: Correctly obey ServerName / ServerAlias if the Host header from the\n     request matches the VirtualHost address.\n     PR 51709. [Micha Lenk <micha lenk.info>]\n\n  *) mod_unique_id: Use random number generator to initialize counter.\n     PR 45110. [Stefan Fritsch]\n\n  *) core: Add convenience API for apr_random. [Stefan Fritsch]\n\n  *) core: Add MaxRangeOverlaps and MaxRangeReversals directives to control\n     the number of overlapping and reversing ranges (respectively) permitted\n     before returning the entire resource, with a default limit of 20.\n     [Jim Jagielski]\n\n  *) mod_ldap: Optional function uldap_ssl_supported(r) always returned false\n     if called from a virtual host with mod_ldap directives in it.  Did not\n     affect mod_authnz_ldap's usage of mod_ldap.  [Eric Covener]\n\n  *) mod_filter: Instead of dropping the Accept-Ranges header when a filter\n     registered with AP_FILTER_PROTO_NO_BYTERANGE is present,\n     set the header value to \"none\". [Eric Covener, Ruediger Pluem]\n\n  *) core: Allow MaxRanges none|unlimited|default and set 'Accept-Ranges: none'\n     in the case Ranges are being ignored with MaxRanges none.\n     [Eric Covener]\n\n  *) mod_ssl: revamp CRL-based revocation checking when validating\n     certificates of clients or proxied servers. Completely delegate\n     CRL processing to OpenSSL, and add a new [Proxy]CARevocationCheck\n     directive for controlling the revocation checking mode. [Kaspar Brand]\n\n  *) core: Add MaxRanges directive to control the number of ranges permitted\n     before returning the entire resource, with a default limit of 200.\n     [Eric Covener]\n\n  *) mod_cache: Ensure that CacheDisable can correctly appear within\n     a LocationMatch. [Graham Leggett]\n\n  *) mod_cache: Fix the moving of the CACHE filter, which erroneously\n     stood down if the original filter was not added by configuration.\n     [Graham Leggett]\n\n  *) mod_ssl: improve certificate error logging. PR 47408. [Kaspar Brand]\n\n  *) mod_authz_groupfile: Increase length limit of lines in the group file to\n     16MB. PR 43084. [Stefan Fritsch]\n\n  *) core: Increase length limit of lines in the configuration file to 16MB.\n     PR 45888. PR 50824. [Stefan Fritsch]\n\n  *) core: Add API for resizable buffers. [Stefan Fritsch]\n\n  *) mod_ldap: Enable LDAPConnectionTimeout for LDAP toolkits that have\n     LDAP_OPT_CONNECT_TIMEOUT instead of LDAP_OPT_NETWORK_TIMEOUT, such\n     as Tivoli Directory Server 6.3 and later. [Eric Covener]\n\n  *) mod_ldap: Change default number of retries from 10 to 3, and add\n     an LDAPRetries and LDAPRetryDelay directives. [Eric Covener]\n\n  *) mod_authnz_ldap: Don't retry during authentication, because this just\n     multiplies the ample retries already being done by mod_ldap. [Eric Covener]\n\n  *) configure: Allow to explicitly disable modules even with module selection\n     'reallyall'. [Stefan Fritsch]\n\n  *) mod_rewrite: Check validity of each internal (int:) RewriteMap even if the\n     RewriteEngine is disabled in server context, avoiding a crash while\n     referencing the invalid int: map at runtime. PR 50994.\n     [Ben Noordhuis <info noordhuis nl>]\n\n  *) mod_ssl, configure: require OpenSSL 0.9.7 or later. [Kaspar Brand]\n\n  *) mod_ssl: remove ssl_toolkit_compat layer. [Kaspar Brand]\n\n  *) mod_ssl, configure, ab: drop support for RSA BSAFE SSL-C toolkit.\n     [Kaspar Brand]\n\n  *) mod_usertrack: Run mod_usertrack earlier in the fixups hook to ensure the\n     cookie is set when modules such as mod_rewrite trigger a redirect. Also\n     use r->err_headers_out for the cookie, for the same reason.  PR29755.\n     [Sami J. M\u00e4kinen <sjm almamedia fi>, Eric Covener]\n\n  *) mod_proxy_http, mod_proxy_connect: Add 'proxy-status' and\n     'proxy-source-port' request notes for logging. PR 30195. [Stefan Fritsch]\n\n  *) configure: Enable ldap modules in 'all' and 'most' selections if ldap\n     is compiled into apr-util. [Stefan Fritsch]\n\n  *) core: Add ap_check_cmd_context()-check if a command is executed in\n     .htaccess file. [Stefan Fritsch]\n\n  *) mod_deflate: Fix endless loop if first bucket is metadata. PR 51590.\n     [Torsten Foertsch <torsten foertsch gmx net>]\n\n  *) mod_authn_socache: Fix to work in .htaccess if not configured anywhere\n     in httpd.conf, and introduce an AuthnCacheEnable directive.\n     PR 51991 [Nick Kew]\n\n  *) mod_xml2enc: new (formerly third-party) module supporting\n     internationalisation for filters via smart charset sniffing\n     and conversion. [Nick Kew]\n\n  *) mod_proxy_html: new (formerly third-party) module to fix up\n     HTML links in a reverse proxy situation, where a backend\n     generates URLs that are not resolvable by Clients. [Nick Kew]\n\nChanges with Apache 2.3.14\n\n  *) mod_proxy_ajp: Improve trace logging.  [Rainer Jung]\n\n  *) mod_proxy_ajp: Respect \"reuse\" flag in END_REPONSE packets.\n     [Rainer Jung]\n\n  *) mod_proxy: enable absolute URLs to be rewritten with ProxyPassReverse,\n     e.g. to reverse proxy \"Location: https://other-internal-server/login\"\n     [Nick Kew]\n\n  *) prefork, worker, event: Make sure crashes are logged to the error log if\n     httpd has already detached from the console. [Stefan Fritsch]\n\n  *) prefork, worker, event: Reduce period during startup/restart where a\n     successive signal may be lost. PR 43696. [Arun Bhalla <arun shme net>]\n\n  *) mod_allowmethods: Correct Merging of \"reset\" and do not allow an\n     empty parameter list for the AllowMethods directive. [Rainer Jung]\n\n  *) configure: Update selection of modules for 'all' and 'most'. 'all' will\n     now enable all modules except for example and test modules. Make the\n     selection for 'most' more useful (including ssl and proxy). Both 'all'\n     and 'most' will now disable modules if dependencies are missing instead\n     of aborting. If a specific module is requested with --enable-XXX=yes,\n     missing dependencies will still cause configure to exit with an error.\n     [Stefan Fritsch]\n\n  *) mod_ldap: Revert the integration of apr-ldap as ap_ldap which was done\n     in 2.3.13. [Stefan Fritsch]\n\n  *) core: For '*' or '_default_' vhosts, use a wildcard address of any\n     address family, rather than IPv4 only.  [Joe Orton]\n\n  *) core, mod_rewrite, mod_ssl, mod_nw_ssl: Make the SERVER_NAME variable\n     include [ ] for literal IPv6 addresses, as mandated by RFC 3875.\n     PR 26005. [Stefan Fritsch]\n\n  *) mod_negotiation: Fix parsing of Content-Length in type maps. PR 42203.\n     [Nagae Hidetake <nagae eagan jp>]\n\n  *) core: Add more logging to ap_scan_script_header_err* functions. Add\n     ap_scan_script_header_err*_ex functions that take a module index for\n     logging.\n     mod_cgi, mod_cgid, mod_proxy_fcgi, mod_proxy_scgi, mod_isapi: Use the\n     new functions in order to make logging configurable per-module.\n     [Stefan Fritsch]\n\n  *) mod_dir: Add DirectoryIndexRedirect to send an external redirect to\n     the proper index.  [Eric Covener]\n\n  *) mod_deflate: Don't try to compress requests with a zero sized body.\n     PR 51350. [Stefan Fritsch]\n\n  *) core: Fix startup on IPv6-only systems. PR 50592. [Joe Orton,\n     <root linkage white-void net>]\n\n  *) suexec: Add environment variables CONTEXT_DOCUMENT_ROOT, CONTEXT_PREFIX,\n     REDIRECT_ERROR_NOTES, REDIRECT_SCRIPT_FILENAME, REQUEST_SCHEME to the\n     whitelist in suexec. PR 51499. [Graham Laverty <graham reg ca>,\n     Stefan Fritsch]\n\n  *) mod_rewrite: Fix regexp RewriteCond with NoCase. [Stefan Fritsch]\n\n  *) mod_log_debug: New module that allows to log custom messages at various\n     phases in the request processing. [Stefan Fritsch]\n\n  *) mod_ssl: Add some debug logging when loading server certificates.\n     PR 37912. [Nick Burch <nick burch alfresco com>]\n\n  *) configure: Support reallyall option also for --enable-mods-static.\n     [Rainer Jung]\n\n  *) mod_socache_dc: add --with-distcache to configure for choosing\n     the distcache installation directory. [Rainer Jung]\n\n  *) mod_socache_dc: use correct build variable MOD_SOCACHE_DC_LDADD\n     instead of MOD_SOCACHE_LDADD in build macro. [Rainer Jung]\n\n  *) mod_lua, mod_deflate: respect platform specific runpath linker\n     flag. [Rainer Jung]\n\n  *) configure: Only link the httpd binary against PCRE. No other support\n     binary needs PCRE. [Rainer Jung]\n\n  *) configure: tolerate dependency checking failures for modules if\n     they have been enabled implicitly. [Rainer Jung]\n\n  *) configure: Allow to specify module specific custom linker flags via\n     the MOD_XXX_LDADD variables. [Rainer Jung]\n\nChanges with Apache 2.3.13\n\n  *) ab: Support specifying the local address to use. PR 48930.\n     [Peter Schuller <scode spotify com>]\n\n  *) core: Add support to ErrorLogFormat for logging the system unique\n     thread id under Linux. [Stefan Fritsch]\n\n  *) event: New AsyncRequestWorkerFactor directive to influence how many\n     connections will be accepted per process. [Stefan Fritsch]\n\n  *) prefork, worker, event: Rename MaxClients to MaxRequestWorkers which\n     describes more accurately what it does. [Stefan Fritsch]\n\n  *) rotatelogs: Add -p argument to specify custom program to invoke\n     after a log rotation.  PR 51285. [Sven Ulland <sveniu ifi.uio.no>,\n     Joe Orton]\n\n  *) mod_ssl: Don't do OCSP checks for valid self-issued certs. [Kaspar Brand]\n\n  *) mod_ssl: Avoid unnecessary renegotiations with SSLVerifyDepth 0.\n     PR 48215. [Kaspar Brand]\n\n  *) mod_status: Display information about asynchronous connections in the\n     server-status. PR 44377. [Stefan Fritsch]\n\n  *) mpm_event: If the number of connections of a process is very high, or if\n     all workers are busy, don't accept new connections in that process.\n     [Stefan Fritsch]\n\n  *) mpm_event: Process lingering close asynchronously instead of tying up\n     worker threads. [Jeff Trawick, Stefan Fritsch]\n\n  *) mpm_event: If MaxMemFree is set, limit the number of pools that is kept\n     around. [Stefan Fritsch]\n\n  *) mpm_event: Fix graceful restart aborting connections. PR 43359.\n     [Takashi Sato <takashi lans-tv com>]\n\n  *) mod_ssl: Disable AECDH ciphers in example config. PR 51363.\n     [Rob Stradling <rob comodo com>]\n\n  *) core: Introduce new function ap_get_conn_socket() to access the socket of\n     a connection. [Stefan Fritsch]\n\n  *) mod_data: Introduce a filter to support RFC2397 data URLs. [Graham\n     Leggett]\n\n  *) mod_userdir/mod_alias/mod_vhost_alias: Correctly set DOCUMENT_ROOT,\n     CONTEXT_DOCUMENT_ROOT, CONTEXT_PREFIX. PR 26052. PR 46198.\n     [Stefan Fritsch]\n\n  *) core: Allow to override document_root on a per-request basis. Introduce\n     new context_document_root and context_prefix which provide information\n     about non-global URI-to-directory mappings (from e.g. mod_userdir or\n     mod_alias) to scripts. PR 49705. [Stefan Fritsch]\n\n  *) core: Add <ElseIf> and <Else> to complement <If> sections.\n     [Stefan Fritsch]\n\n  *) mod_ext_filter: Remove DebugLevel option in favor of per-module loglevel.\n     [Stefan Fritsch]\n\n  *) mod_include: Make the \"#if expr\" element use the new \"ap_expr\" expression\n     parser. The old parser can still be used by setting the new directive\n     SSILegacyExprParser. [Stefan Fritsch]\n\n  *) core: Add some features to ap_expr for use by mod_include: a restricted\n     mode that does not allow to bypass request access restrictions; new\n     variables DOCUMENT_URI (alias for REQUEST_URI), LAST_MODIFIED; -A as an\n     alias for -U; an additional data entry in ap_expr_eval_ctx_t for use by\n     the consumer; an extensible ap_expr_exec_ctx() API that allows to use that\n     data entry. [Stefan Fritsch]\n\n  *) mod_include: Merge directory configs instead of one SSI* config directive\n     causing all other per-directory SSI* config directives to be reset.\n     [Stefan Fritsch]\n\n  *) mod_charset_lite: Remove DebugLevel option in favour of per-module\n     loglevel. [Stefan Fritsch]\n\n  *) core: Add ap_regexec_len() function that works with non-null-terminated\n     strings. PR 51231. [Yehezkel Horowitz <horowity checkpoint com>]\n\n  *) mod_authnz_ldap: If the LDAP server returns constraint violation,\n     don't treat this as an error but as \"auth denied\". [Stefan Fritsch]\n\n  *) mod_proxy_fcgi|scgi: Add support for \"best guess\" of PATH_INFO\n     for SCGI/FCGI. PR 50880, 50851. [Mark Montague <mark catseye.org>,\n     Jim Jagielski]\n\n  *) mod_cache: When content is served stale, and there is no means to\n     revalidate the content using ETag or Last-Modified, and we have\n     mandated no stale-on-error behaviour, stand down and don't cache.\n     Saves a cache write that will never be read.\n     [Graham Leggett]\n\n  *) mod_reqtimeout: Fix a timed out connection going into the keep-alive\n     state after a timeout when discarding a request body. PR 51103.\n     [Stefan Fritsch]\n\n  *) core: Add various file existence test operators to ap_expr.\n     [Stefan Fritsch]\n\n  *) mod_proxy_express: New mass reverse-proxy switch extension for\n     mod_proxy. [Jim Jagielski]\n\n  *) configure: Fix script error when configuring module set \"reallyall\".\n     [Rainer Jung]\n\nChanges with Apache 2.3.12\n\n  *) configure, core: Provide easier support for APR's hook probe\n     capability. [Jim Jagielski, Jeff Trawick]\n\n  *) Silence autoconf 2.68 warnings.  [Rainer Jung]\n\n  *) mod_authnz_ldap: Resolve crash when LDAP is used for authorization only\n     [Scott Hill <shill genscape.com>]\n\n  *) support: Make sure check_forensic works with mod_unique_id loaded\n     [Joe Schaefer]\n\n  *) Add child_status hook for tracking creation/termination of MPM child\n     processes.  Add end_generation hook for notification when the last\n     MPM child of a generation exits. [Jeff Trawick]\n\n  *) mod_ldap: Make LDAPSharedCacheSize 0 create a non-shared-memory cache per\n     process as opposed to disabling caching completely. This allows to use\n     the non-shared-memory cache as a workaround for the shared memory cache\n     not being available during graceful restarts. PR 48958. [Stefan Fritsch]\n\n  *) Add new ap_reserve_module_slots/ap_reserve_module_slots_directive API,\n     necessary if a module (like mod_perl) registers additional modules late\n     in the startup phase. [Stefan Fritsch]\n\n  *) core: Prevent segfault if DYNAMIC_MODULE_LIMIT is reached. PR 51072.\n     [Torsten F\u00f6rtsch <torsten foertsch gmx net>]\n\n  *) WinNT MPM: Improve robustness under heavy load.  [Jeff Trawick]\n\n  *) MinGW build improvements.  PR 49535.  [John Vandenberg\n     <jayvdb gmail.com>, Jeff Trawick]\n\n  *) core: Support module names with colons in loglevel configuration.\n     [Torsten F\u00f6rtsch <torsten foertsch gmx net>]\n\n  *) mod_ssl, ab: Support OpenSSL compiled without SSLv2 support.\n     [Stefan Fritsch]\n\n  *) core: Abort if the MPM is changed across restart.  [Jeff Trawick]\n\n  *) mod_proxy_ajp: Add support for 'ProxyErrorOverride on'. PR 50945.\n     [Peter Pramberger <peter pramberger.at>, Jim Jagielski]\n\n  *) mod_proxy_fcgi: Add support for 'ProxyErrorOverride on'. PR 50913.\n     [Mark Montague <mark catseye.org>, Jim Jagielski]\n\n  *) core: Change the APIs of ap_cfg_getline() and ap_cfg_getc() to return an\n     error code. Abort with a nice error message if a config line is too long.\n     Partial fix for PR 50824. [Stefan Fritsch]\n\n  *) mod_info: Dump config to stdout during startup if -DDUMP_CONFIG is\n     specified. PR 31956. [Stefan Fritsch]\n\n  *) Restore visibility of DEFAULT_PIDLOG to core and modules.  MPM\n     helper function ap_remove_pid() added.  [Jeff Trawick]\n\n  *) Enable DEFAULT_REL_RUNTIMEDIR on Windows and NetWare.  [various]\n\n  *) Correct C++ incompatibility with http_log.h.  [Stefan Fritsch, Jeff\n     Trawick]\n\n  *) mod_log_config: Prevent segfault. PR 50861. [Torsten F\u00f6rtsch\n     <torsten.foertsch gmx.net>]\n\n  *) core: AllowEncodedSlashes new option NoDecode to allow encoded slashes\n     in request URL path info but not decode them. Change behavior of option\n     \"On\" to decode the encoded slashes as 2.0 and 2.2 do.  PR 35256,\n     PR 46830.  [Dan Poirier]\n\n  *) mod_ssl: Check SNI hostname against Host header case-insensitively.\n     PR 49491.  [Mayank Agrawal <magrawal.08 gmail.com>]\n\n  *) mod_ldap: Add LDAPConnectionPoolTTL to give control over lifetime\n     of bound backend LDAP connections.  PR47634 [Eric Covener]\n\n  *) mod_cache: Make CacheEnable and CacheDisable configurable per\n     directory in addition to per server, making them work from within\n     a LocationMatch. [Graham Leggett]\n\n  *) worker, event, prefork: Correct several issues when built as\n     DSOs; most notably, the scoreboard was reinitialized during graceful\n     restart, such that processes of the previous generation were not\n     observable.  [Jeff Trawick]\n\nChanges with Apache 2.3.11\n\n  *) mod_win32: Added shebang check for '! so that .vbs scripts work as CGI.\n     Win32's cscript interpreter can only use a single quote as comment char.\n     [Guenter Knauf]\n\n  *) mod_proxy: balancer-manager now uses POST instead of GET.\n     [Jim Jagielski]\n\n  *) core: new util function: ap_parse_form_data(). Previously,\n     this capability was tucked away in mod_request. [Jim Jagielski]\n\n  *) core: new hook: ap_run_pre_read_request. [Jim Jagielski]\n\n  *) modules: Fix many modules that were not correctly initializing if they\n     were not active during server startup but got enabled later during a\n     graceful restart. [Stefan Fritsch]\n\n  *) core: Create new ap_state_query function that allows modules to determine\n     if the current configuration run is the initial one at server startup,\n     and if the server is started for testing/config dumping only.\n     [Stefan Fritsch]\n\n  *) mod_proxy: Runtime configuration of many parameters for existing\n     balancers via the balancer-manager. [Jim Jagielski]\n\n  *) mod_proxy: Runtime addition of new workers (BalancerMember) for existing\n     balancers via the balancer-manager. [Jim Jagielski]\n\n  *) mod_cache: When a bad Expires date is present, we need to behave as if\n     the Expires is in the past, not as if the Expires is missing. PR 16521.\n     [Co-Advisor <coad measurement-factory.com>]\n\n  *) mod_cache: We must ignore quoted-string values that appear in a\n     Cache-Control header. PR 50199. [Graham Leggett]\n\n  *) mod_dav: Revert change to send 501 error if unknown Content-* header is\n    received for a PUT request. PR 42978. [Stefan Fritsch]\n\n  *) mod_cache: Respect s-maxage as described by RFC2616 14.9.3, which must\n     take precedence if present. PR 35247. [Graham Leggett]\n\n  *) mod_ssl: Fix a possible startup failure if multiple SSL vhosts\n     are configured with the same ServerName and private key file.\n     [Masahiro Matsuya <mmatsuya redhat.com>, Joe Orton]\n\n  *) mod_socache_dc: Make module compile by fixing some typos.\n     PR 50735 [Mark Montague <mark catseye.org>]\n\n  *) prefork: Update MPM state in children during a graceful stop or\n     restart.  PR 41743.  [Andrew Punch <andrew.punch 247realmedia.com>]\n\n  *) mod_mime: Ignore leading dots when looking for mime extensions.\n     PR 50434 [Stefan Fritsch]\n\n  *) core: Add support to set variables with the 'Define' directive. The\n     variables that can then be used in the config using the ${VAR} syntax\n     known from envvar interpolation. [Stefan Fritsch]\n\n  *) mod_proxy_http: make adding of X-Forwarded-* headers configurable.\n     ProxyAddHeaders defaults to On. [Vincent Deffontaines]\n\n  *) mod_slotmem_shm: Increase memory alignment for slotmem data.\n     [Rainer Jung]\n\n  *) mod_ssl: Add config options for OCSP: SSLOCSPResponderTimeout,\n     SSLOCSPResponseMaxAge, SSLOCSPResponseTimeSkew.\n     [Kaspar Brand <httpd-dev.2011 velox.ch>]\n\n  *) mod_ssl: Revamp output buffering to reduce network overhead for\n     output fragmented into many buckets, such as chunked HTTP responses.\n     [Joe Orton]\n\n  *) core: Apply <If> sections to all requests, not only to file base requests.\n     Allow to use <If> inside <Directory>, <Location>, and <Files> sections.\n     The merging of <If> sections now happens after the merging of <Location>\n     sections, even if an <If> section is embedded inside a <Directory> or\n     <Files> section.  [Stefan Fritsch]\n\n  *) mod_proxy: Refactor usage of shared data by dropping the scoreboard\n     and using slotmem. Create foundation for dynamic growth/changes of\n     members within a balancer. Remove BalancerNonce in favor of a\n     per-balancer 'nonce' parameter. [Jim Jagielski]\n\n  *) mod_status: Don't show slots which are disabled by MaxClients as open.\n     PR 47022 [Jordi Prats <jordi prats gmail com>, Stefan Fritsch]\n\n  *) mpm_prefork: Fix ap_mpm_query results for AP_MPMQ_MAX_DAEMONS and\n     AP_MPMQ_MAX_THREADS.\n\n  *) mod_authz_core: Fix bug in merging logic if user-based and non-user-based\n     authorization directives were mixed. [Stefan Fritsch]\n\n  *) mod_authn_socache: change directive name from AuthnCacheProvider\n     to AuthnCacheProvideFor.  The term \"provider\" is overloaded in\n     this module, and we should avoid confusion between the provider\n     of a backend (AuthnCacheSOCache) and the authn provider(s) for\n     which this module provides cacheing (AuthnCacheProvideFor).\n     [Nick Kew]\n\n  *) mod_proxy_http: Allocate the fake backend request from a child pool\n     of the backend connection, instead of misusing the pool of the frontend\n     request. Fixes a thread safety issue where buckets set aside in the\n     backend connection leak into other threads, and then disappear when\n     the frontend request is cleaned up, in turn causing corrupted buckets\n     to make other threads spin. [Graham Leggett]\n\n  *) mod_ssl: Change the format of the SSL_{CLIENT,SERVER}_{I,S}_DN variables\n     to be RFC 2253 compatible, convert non-ASCII characters to UTF8, and\n     escape other special characters with backslashes. The old format can\n     still be used with the LegacyDNStringFormat argument to SSLOptions.\n\n  *) core, mod_rewrite: Make the REQUEST_SCHEME variable available to\n     scripts and mod_rewrite. [Stefan Fritsch]\n\n  *) mod_rewrite: Allow to use arbitrary boolean expressions (ap_expr) in\n     RewriteCond. [Stefan Fritsch]\n\n  *) mod_rewrite: Allow to unset environment variables using E=!VAR.\n     PR 49512. [Mark Drayton <mark markdrayton info>, Stefan Fritsch]\n\n  *) mod_headers: Restore the 2.3.8 and earlier default for the first\n     argument of the Header directive (\"onsuccess\").  [Eric Covener]\n\n  *) core: Disallow the mixing of relative and absolute Options PR 33708.\n     [S\u00f6nke Tesch <st kino-fahrplan.de>]\n\n  *) core: When exporting request headers to HTTP_* environment variables,\n     drop variables whose names contain invalid characters. Describe in the\n     docs how to restore the old behaviour. [Malte S. Stretz <mss apache org>]\n\n  *) core: When selecting an IP-based virtual host, favor an exact match for\n     the port over a wildcard (or omitted) port instead of favoring the one\n     that came first in the configuration file. [Eric Covener]\n\n  *) core: Overlapping virtual host address/port combinations  now implicitly\n     enable name-based virtual hosting for that address.  The NameVirtualHost\n     directive has no effect, and _default_ is interpreted the same as \"*\".\n     [Eric Covener]\n\n  *) core: In the absence of any Options directives, the default is now\n     \"FollowSymlinks\" instead of \"All\".  [Igor Gali\u0107]\n\n  *) rotatelogs: Add -e option to write logs through to stdout for optional\n     further processing. [Graham Leggett]\n\n  *) mod_ssl: Correctly read full lines in input filter when the line is\n     incomplete during first read. PR 50481. [Ruediger Pluem]\n\n  *) mod_authz_core: Add AuthzSendForbiddenOnFailure directive to allow\n     sending '403 FORBIDDEN' instead of '401 UNAUTHORIZED' if authorization\n     fails for an authenticated user. PR 40721. [Stefan Fritsch]\n\nChanges with Apache 2.3.10\n\n  *) mod_rewrite: Don't implicitly URL-escape the original query string\n     when no substitution has changed it. PR 50447. [Eric Covener]\n\n  *) core: Honor 'AcceptPathInfo OFF' during internal redirects,\n     such as per-directory mod_rewrite substitutions.  PR 50349.\n     [Eric Covener]\n\n  *) mod_rewrite: Add 'RewriteOptions InheritBefore' to put the base\n     rules/conditions before the overridden rules/conditions.  PR 39313.\n     [J\u00e9r\u00f4me Grandjanny <jerome.grandjanny cea.fr>]\n\n  *) mod_autoindex: add IndexIgnoreReset to reset the list of IndexIgnored\n     filenames in higher precedence configuration sections.  PR 24243.\n     [Eric Covener]\n\n  *) mod_cgid: RLimit* directive support for mod_cgid.  PR 42135\n     [Eric Covener]\n\n  *) core: Fail startup when the argument to ServerName looks like a glob\n     or a regular expression instead of a hostname (*?[]).  PR 39863\n     [Rahul Nair <rahul.g.nair gmail.com>]\n\n  *) mod_userdir: Add merging of enable, disable, and filename arguments\n     to UserDir directive, leaving enable/disable of userlists unmerged.\n     PR 44076 [Eric Covener]\n\n  *) httpd: When no -k option is provided on the httpd command line, the server\n     was starting without checking for an existing pidfile.  PR 50350\n     [Eric Covener]\n\n  *) mod_proxy: Put the worker in error state if the SSL handshake with the\n     backend fails. PR 50332.\n     [Daniel Ruggeri <DRuggeri primary.net>, Ruediger Pluem]\n\n  *) mod_cache_disk: Fix Windows build which was broken after renaming\n     the module. [Gregg L. Smith]\n\nChanges with Apache 2.3.9\n\n  *) SECURITY: CVE-2010-1623 (cve.mitre.org)\n     Fix a denial of service attack against mod_reqtimeout.\n     [Stefan Fritsch]\n\n  *) mod_headers: Change default first argument of Header directive\n     from \"onsuccess\" to \"always\". [Eric Covener]\n\n  *) mod_include: Add the onerror attribute to the include element,\n     allowing an URL to be specified to include on error. [Graham\n     Leggett]\n\n  *) mod_cache_disk: mod_disk_cache renamed to mod_cache_disk, to be\n     consistent with the naming of other modules. [Graham Leggett]\n\n  *) mod_setenvif: Add SetEnvIfExpr directive to set env var depending on\n     expression. [Stefan Fritsch]\n\n  *) mod_proxy: Fix ProxyPassInterpolateEnv directive. PR 50292.\n     [Stefan Fritsch]\n\n  *) suEXEC: Add Suexec directive to disable suEXEC without renaming the\n     binary (Suexec Off), or force startup failure if suEXEC is required\n     but not supported (Suexec On).  Change SuexecUserGroup to fail\n     startup instead of just printing a warning if suEXEC is disabled.\n     [Jeff Trawick]\n\n  *) core: Add Error directive for aborting startup or htaccess processing\n     with a specified error message.  [Jeff Trawick]\n\n  *) mod_rewrite: Fix the RewriteEngine directive to work within a\n     location. Previously, once RewriteEngine was switched on globally,\n     it was impossible to switch off. [Graham Leggett]\n\n  *) core, mod_include, mod_ssl: Move the expression parser derived from\n     mod_include back into mod_include. Replace ap_expr with a parser\n     derived from mod_ssl's parser. Make mod_ssl use the new parser. Rework\n     ap_expr's public interface and provide hooks for modules to add variables\n     and functions. [Stefan Fritsch]\n\n  *) core: Do the hook sorting earlier so that the hooks are properly sorted\n     for the pre_config hook and during parsing the config. [Stefan Fritsch]\n\n  *) core: In the absence of any AllowOverride directives, the default is now\n     \"None\" instead of \"All\".  PR49823 [Eric Covener]\n\n  *) mod_proxy: Don't allow ProxyPass or ProxyPassReverse in\n     <Directory> or <Files>. PR47765 [Eric Covener]\n\n  *) prefork/worker/event MPMS: default value (when no directive is present)\n     of MaxConnectionsPerChild/MaxRequestsPerChild is changed to 0 from 10000\n     to match default configuration and manual. PR47782 [Eric Covener]\n\n  *) proxy_connect: Don't give up in the middle of a CONNECT tunnel\n     when the child process is starting to exit.  PR50220. [Eric Covener]\n\n  *) mod_autoindex: Fix inheritance of mod_autoindex directives into\n     contexts that don't have any mod_autoindex directives. PR47766.\n     [Eric Covener]\n\n  *) mod_rewrite: Add END flag for RewriteRule to prevent further rounds\n     of rewrite processing when a per-directory substitution occurs.\n     [Eric Covener]\n\n  *) mod_ssl: Make sure to always log an error if loading of CA certificates\n     fails. PR 40312. [Paul Tiemann <issues apache org ourdetour com>]\n\n  *) mod_dav: Send 501 error if unknown Content-* header is received for a PUT\n     request (RFC 2616 9.6). PR 42978. [Stefan Fritsch]\n\n  *) mod_dav: Send 400 error if malformed Content-Range header is received for\n     a put request (RFC 2616 14.16). PR 49825. [Stefan Fritsch]\n\n  *) mod_proxy: Release the backend connection as soon as EOS is detected,\n     so the backend isn't forced to wait for the client to eventually\n     acknowledge the data. [Graham Leggett]\n\n  *) mod_proxy: Optimise ProxyPass within a Location so that it is stored\n     per-directory, and chosen during the location walk. Make ProxyPass\n     work correctly from within a LocationMatch. [Graham Leggett]\n\n  *) core: Fix segfault if per-module LogLevel is on virtual host\n     scope. PR 50117. [Stefan Fritsch]\n\n  *) mod_proxy: Move the ProxyErrorOverride directive to have per\n     directory scope. [Graham Leggett]\n\n  *) mod_allowmethods: New module to deny certain HTTP methods without\n     interfering with authentication/authorization. [Paul Querna,\n     Igor Gali\u0107, Stefan Fritsch]\n\n  *) mod_ssl: Log certificate information and improve error message if client\n     cert verification fails. PR 50093, PR 50094. [Lassi Tuura <lat cern ch>,\n     Stefan Fritsch]\n\n  *) htcacheclean: Teach htcacheclean to limit cache size by number of\n     inodes in addition to size of files. Prevents a cache disk from\n     running out of space when many small files are cached.\n     [Graham Leggett]\n\n  *) core: Rename MaxRequestsPerChild to MaxConnectionsPerChild, which\n     describes more accurately what the directive does. The old name\n     still works but logs a warning. [Stefan Fritsch]\n\n  *) mod_cache: Optionally serve stale data when a revalidation returns a\n     5xx response, controlled by the CacheStaleOnError directive.\n     [Graham Leggett]\n\n  *) htcacheclean: Allow the listing of valid URLs within the cache, with\n     the option to list entry metadata such as sizes and times. [Graham\n     Leggett]\n\n  *) mod_cache: correctly parse quoted strings in cache headers.\n     PR 50199 [Nick Kew]\n\n  *) mod_cache: Allow control over the base URL of reverse proxied requests\n     using the CacheKeyBaseURL directive, so that the cache key can be\n     calculated from the endpoint URL instead of the server URL. [Graham\n     Leggett]\n\n  *) mod_cache: CacheLastModifiedFactor, CacheStoreNoStore, CacheStorePrivate,\n     CacheStoreExpired, CacheIgnoreNoLastMod, CacheDefaultExpire,\n     CacheMinExpire and CacheMaxExpire can be set per directory/location.\n     [Graham Leggett]\n\n  *) mod_disk_cache: CacheMaxFileSize, CacheMinFileSize, CacheReadSize and\n     CacheReadTime can be set per directory/location. [Graham Leggett]\n\n  *) core: Speed up config parsing if using a very large number of config\n     files. PR 50002 [andrew cloudaccess net]\n\n  *) mod_cache: Support the caching of HEAD requests. [Graham Leggett]\n\n  *) htcacheclean: Allow the option to round up file sizes to a given\n     block size, improving the accuracy of disk usage. [Graham Leggett]\n\n  *) mod_ssl: Add authz providers for use with mod_authz_core and its\n     RequireAny/RequireAll containers: 'ssl' (equivalent to SSLRequireSSL),\n     'ssl-verify-client' (for use with 'SSLVerifyClient optional'), and\n     'ssl-require' (expressions with same syntax as SSLRequire).\n     [Stefan Fritsch]\n\n  *) mod_ssl: Make the ssl expression parser thread-safe. It now requires\n     bison instead of yacc. [Stefan Fritsch]\n\n  *) mod_disk_cache: Change on-disk header file format to support the\n     link of the device/inode of the data file to the matching header\n     file, and to support the option of not writing a data file when\n     the data file is empty. [Graham Leggett]\n\n  *) core/mod_unique_id: Add generate_log_id hook to allow to use\n     the ID generated by mod_unique_id as error log ID for requests.\n     [Stefan Fritsch]\n\n  *) mod_cache: Make sure that we never allow a 304 Not Modified response\n     that we asked for to leak to the client should the 304 response be\n     uncacheable. PR45341 [Graham Leggett]\n\n  *) mod_cache: Add the cache_status hook to register the final cache\n     decision hit/miss/revalidate. Add optional support for an X-Cache\n     and/or an X-Cache-Detail header to add the cache status to the\n     response. PR48241 [Graham Leggett]\n\n  *) mod_authz_host: Add 'local' provider that matches connections originating\n     on the local host. PR 19938. [Stefan Fritsch]\n\n  *) Event MPM: Fix crash accessing pollset on worker thread when child\n     process is exiting.  [Jeff Trawick]\n\n  *) core: For process invocation (cgi, fcgid, piped loggers and so forth)\n     pass the system library path (LD_LIBRARY_PATH or platform-specific\n     variables) along with the system PATH, by default.  Both should be\n     overridden together as desired using PassEnv etc; see mod_env.\n     [William Rowe]\n\n  *) mod_cache: Introduce CacheStoreExpired, to allow administrators to\n     capture a stale backend response, perform If-Modified-Since requests\n     against the backend, and serving from the cache all 304 responses.\n     This restores pre-2.2.4 cache behavior.  [William Rowe]\n\n  *) mod_rewrite: Introduce <=, >= string comparison operators, and integer\n     comparators -lt, -le, -eq, -ge, and -gt.  To help bash users and drop\n     the ambiguity of the symlink test \"-ltest\", introduce -h or -L as\n     symlink test operators.  [William Rowe]\n\n  *) mod_cache: Give the cache provider the opportunity to choose to cache\n     or not cache based on the buckets present in the brigade, such as the\n     presence of a FILE bucket.\n     [Graham Leggett]\n\n  *) mod_authz_core: Allow authz providers to check args while reading the\n     config and allow to cache parsed args. Move 'all' and 'env' authz\n     providers from mod_authz_host to mod_authz_core. Add 'method' authz\n     provider depending on the HTTP method.  [Stefan Fritsch]\n\n  *) mod_include: Move the request_rec within mod_include to be\n     exposed within include_ctx_t. [Graham Leggett]\n\n  *) mod_include: Reinstate support for UTF-8 character sets by allowing a\n     variable being echoed or set to be decoded and then encoded as separate\n     steps. PR47686 [Graham Leggett]\n\n  *) mod_cache: Add a discrete commit_entity() provider function within the\n     mod_cache provider interface which is called to indicate to the\n     provider that caching is complete, giving the provider the opportunity\n     to commit temporary files permanently to the cache in an atomic\n     fashion. Replace the inconsistent use of error cleanups with a formal\n     set of pool cleanups attached to a subpool, which is destroyed on error.\n     [Graham Leggett]\n\n  *) mod_cache: Change the signature of the store_body() provider function\n     within the mod_cache provider interface to support an \"in\" brigade\n     and an \"out\" brigade instead of just a single input brigade. This\n     gives a cache provider the option to consume only part of the brigade\n     passed to it, rather than the whole brigade as was required before.\n     This fixes an out of memory and a request timeout condition that would\n     occur when the original document was a large file. Introduce\n     CacheReadSize and CacheReadTime directives to mod_disk_cache to control\n     the amount of data to attempt to cache at a time. [Graham Leggett]\n\n  *) core: Add ErrorLogFormat to allow configuring error log format, including\n     additional information that is logged once per connection or request. Add\n     error log IDs for connections and request to allow correlating error log\n     lines and the corresponding access log entry. [Stefan Fritsch]\n\n  *) core: Disable sendfile by default. [Stefan Fritsch]\n\n  *) mod_cache: Check the request to determine whether we are allowed\n     to return cached content at all, and respect a \"Cache-Control:\n     no-cache\" header from a client. Previously, \"no-cache\" would\n     behave like \"max-age=0\". [Graham Leggett]\n\n  *) mod_cache: Use a proper filter context to hold filter data instead\n     of misusing the per-request configuration. Fixes a segfault on trunk\n     when the normal handler is used. [Graham Leggett]\n\n  *) mod_cgid: Log a warning if the ScriptSock path is truncated because\n     it is too long. PR 49388.  [Stefan Fritsch]\n\n  *) vhosts: Do not allow _default_ in NameVirtualHost, or mixing *\n     and non-* ports on NameVirtualHost, or multiple NameVirtualHost\n     directives for the same address:port, or NameVirtualHost\n     directives with no matching VirtualHosts, or multiple ip-based\n     VirtualHost sections for the same address:port.  These were\n     previously accepted with a warning, but the behavior was\n     undefined.  [Dan Poirier]\n\n  *) mod_remoteip: Fix a segfault when using mod_remoteip in conjunction with\n     Allow/Deny. PR 49838.  [Andrew Skalski <voltara gmail.com>]\n\n  *) core: DirectoryMatch can now match on the end of line character ($),\n     and sub-directories of matched directories are no longer implicitly\n     matched.  PR49809 [Eric Covener]\n\n  *) Regexps: introduce new higher-level regexp utility including parsing\n     and executing perl-style regexp ops (e.g s/foo/bar/i) and regexp memory\n     [Nick Kew]\n\n  *) Proxy: support setting source address.  PR 29404\n     [Multiple contributors iterating through bugzilla,\n      Aron Ujvari <xanco nikhok.hu>, Aleksey Midenkov <asm uezku.kemsu.ru>,\n      <dan listening-station.net; trunk version Nick Kew]\n\n  *) HTTP protocol: return 400 not 503 if we have to abort due to malformed\n     chunked encoding. [Nick Kew]\n\nChanges with Apache 2.3.8\n\n  *) suexec: Support large log files. PR 45856. [Stefan Fritsch]\n\n  *) core: Abort with sensible error message if no or more than one MPM is\n     loaded. [Stefan Fritsch]\n\n  *) mod_proxy: Rename erroronstatus to failonstatus.\n     [Daniel Ruggeri <DRuggeri primary.net>]\n\n  *) mod_dav_fs: Fix broken \"creationdate\" property.\n     Regression in version 2.3.7. [Rainer Jung]\n\nChanges with Apache 2.3.7\n\n  *) SECURITY: CVE-2010-1452 (cve.mitre.org)\n     mod_dav, mod_cache, mod_session: Fix Handling of requests without a path\n     segment. PR 49246 [Mark Drayton, Jeff Trawick]\n\n  *) mod_ldap: Properly check the result returned by apr_ldap_init. PR 46076.\n     [Stefan Fritsch]\n\n  *) mod_rewrite: Log errors if rewrite map files cannot be opened. PR 49639.\n     [Stefan Fritsch]\n\n  *) mod_proxy_http: Support the 'ping' property for backend HTTP/1.1 servers\n     via leveraging 100-Continue as the initial \"request\".\n     [Jim Jagielski]\n\n  *) core/mod_authz_core: Introduce new access_checker_ex hook that enables\n     mod_authz_core to bypass authentication if access should be allowed by\n     IP address/env var/... [Stefan Fritsch]\n\n  *) core: Introduce note_auth_failure hook to allow modules to add support\n     for additional auth types. This makes ap_note_auth_failure() work with\n     mod_auth_digest again. PR 48807. [Stefan Fritsch]\n\n  *) socache modules: return APR_NOTFOUND when a lookup is not found [Nick Kew]\n\n  *) mod_authn_socache: new module [Nick Kew]\n\n  *) configure: Add reallyall option for --enable-mods-shared. [Stefan Fritsch]\n\n  *) Fix Windows build when using VC6. [Gregg L. Smith <lists glewis com>]\n\n  *) mod_rewrite: Allow to set environment variables without explicitly\n     giving a value. [Rainer Jung]\n\n  *) mod_rewrite: Remove superfluous EOL from rewrite logging. [Rainer Jung]\n\n  *) mod_include: recognise \"text/html; parameters\" as text/html\n     PR 49616 [Andrey Chernov <ache nagual.pp.ru>]\n\n  *) CGI vars: allow PATH to be set by SetEnv, consistent with LD_LIBRARY_PATH\n     PR 43906 [Nick Kew]\n\n  *) Core: Extra robustness: don't try authz and segfault if authn\n     fails to set r->user.  Log bug and return 500 instead.\n     PR 42995 [Nick Kew]\n\n  *) HTTP protocol filter: fix handling of longer chunk extensions\n     PR 49474 [<tee.bee gmx.de>]\n\n  *) Update SSL cipher suite and add example for SSLHonorCipherOrder.\n     [Lars Eilebrecht, Rainer Jung]\n\n  *) move AddOutputFilterByType from core to mod_filter.  This should\n     fix nasty side-effects that happen when content_type is set\n     more than once in processing a request, and make it fully\n     compatible with dynamic and proxied contents. [Nick Kew]\n\n  *) mod_log_config: Implement logging for sub second timestamps and\n     request end time.  [Rainer Jung]\n\nChanges with Apache 2.3.6\n\n  *) SECURITY: CVE-2009-3555 (cve.mitre.org)\n     mod_ssl: Comprehensive fix of the TLS renegotiation prefix injection\n     attack when compiled against OpenSSL version 0.9.8m or later. Introduces\n     the 'SSLInsecureRenegotiation' directive to reopen this vulnerability\n     and offer unsafe legacy renegotiation with clients which do not yet\n     support the new secure renegotiation protocol, RFC 5746.\n     [Joe Orton, and with thanks to the OpenSSL Team]\n\n  *) SECURITY: CVE-2009-3555 (cve.mitre.org)\n     mod_ssl: A partial fix for the TLS renegotiation prefix injection attack\n     by rejecting any client-initiated renegotiations. Forcibly disable\n     keepalive for the connection if there is any buffered data readable. Any\n     configuration which requires renegotiation for per-directory/location\n     access control is still vulnerable, unless using OpenSSL >= 0.9.8l.\n     [Joe Orton, Ruediger Pluem, Hartmut Keil <Hartmut.Keil adnovum.ch>]\n\n  *) SECURITY: CVE-2010-0408 (cve.mitre.org)\n     mod_proxy_ajp: Respond with HTTP_BAD_REQUEST when the body is not sent\n     when request headers indicate a request body is incoming; not a case of\n     HTTP_INTERNAL_SERVER_ERROR.  [Niku Toivola <niku.toivola sulake.com>]\n\n  *) SECURITY: CVE-2010-0425 (cve.mitre.org)\n     mod_isapi: Do not unload an isapi .dll module until the request\n     processing is completed, avoiding orphaned callback pointers.\n     [Brett Gervasoni <brettg senseofsecurity.com>, Jeff Trawick]\n\n  *) core: Filter init functions are now run strictly once per request\n     before handler invocation.  The init functions are no longer run\n     for connection filters.  PR 49328.  [Joe Orton]\n\n  *) core: Adjust the output filter chain correctly in an internal\n     redirect from a subrequest, preserving filters from the main\n     request as necessary.  PR 17629.  [Joe Orton]\n\n  *) mod_cache: Explicitly allow cache implementations to cache a 206 Partial\n     Response if they so choose to do so. Previously an attempt to cache a 206\n     was arbitrarily allowed if the response contained an Expires or\n     Cache-Control header, and arbitrarily denied if both headers were missing.\n     [Graham Leggett]\n\n  *) core: Add microsecond timestamp fractions, process id and thread id\n     to the error log. [Rainer Jung]\n\n  *) configure: The \"most\" module set gets build by default.  [Rainer Jung]\n\n  *) configure: Building dynamic modules (DSO) by default.  [Rainer Jung]\n\n  *) configure: Fix broken VPATH build when using included APR.\n     [Rainer Jung]\n\n  *) mod_session_crypto: Fix configure problem when building\n     with APR 2 and for VPATH builds with included APR.\n     [Rainer Jung]\n\n  *) mod_session_crypto: API compatibility with APR 2 crypto and\n     APR Util 1.x crypto. [Rainer Jung]\n\n  *) ab: Fix memory leak with -v2 and SSL. PR 49383.\n     [Pavel Kankovsky <peak argo troja mff cuni cz>]\n\n  *) core: Add per-module and per-directory loglevel configuration.\n           Add some more trace logging.\n     mod_rewrite: Replace RewriteLog/RewriteLogLevel with trace log levels.\n     mod_ssl: Replace LogLevelDebugDump with trace log levels.\n     mod_ssl/mod_proxy*: Adjust loglevels to be less verbose at levels info\n           and debug.\n     mod_dumpio:  Replace DumpIOLogLevel with trace log levels.\n     [Stefan Fritsch]\n\n  *) mod_ldap: LDAP caching was suppressed (and ldap-status handler returns\n     title page only) when any mod_ldap directives were used in VirtualHost\n     context.  [Eric Covener]\n\n  *) mod_disk_cache: Decline the opportunity to cache if the response is\n     a 206 Partial Content. This stops a reverse proxied partial response\n     from becoming cached, and then being served in subsequent responses.\n     [Graham Leggett]\n\n  *) mod_deflate: avoid the risk of forwarding data before headers are set.\n     PR 49369 [Matthew Steele <mdsteele google.com>]\n\n  *) mod_authnz_ldap: Ensure nested groups are checked when the\n     top-level group doesn't have any direct non-group members\n     of attributes in AuthLDAPGroupAttribute. [Eric Covener]\n\n  *) mod_authnz_ldap: Search or Comparison during authorization phase\n     can use the credentials from the authentication phase\n     (AuthLDAPSearchAsUSer,AuthLDAPCompareAsUser).\n     PR 48340 [Domenico Rotiroti, Eric Covener]\n\n  *) mod_authnz_ldap: Allow the initial DN search during authentication\n     to use the HTTP username/pass instead of an anonymous or hard-coded\n     LDAP id (AuthLDAPInitialBindAsUser, AuthLDAPInitialBindPattern).\n     [Eric Covener]\n\n  *) mod_authnz_ldap: Publish requested LDAP data with an AUTHORIZE_ prefix\n     when this module is used for authorization. See AuthLDAPAuthorizePrefix.\n     PR 45584 [Eric Covener]\n\n  *) apxs -q: Stop filtering out ':' characters from the reported values.\n     PR 45343.  [Bill Cole]\n\n  *) prefork MPM: Work around possible crashes on child exit in APR reslist\n     cleanup code.  PR 43857.  [Tom Donovan]\n\n  *) ab: fix number of requests sent by ab when keepalive is enabled.  PR 48497.\n     [Bryn Dole <dole blekko.com>]\n\n  *) Log an error for failures to read a chunk-size, and return 408 instead of\n     413 when this is due to a read timeout.  This change also fixes some cases\n     of two error documents being sent in the response for the same scenario.\n     [Eric Covener] PR49167\n\n  *) mod_proxy_balancer: Add new directive BalancerNonce to allow admin\n     to control/set the nonce used in the balancer-manager application.\n     [Jim Jagielski]\n\n  *) mod_proxy_connect: Support port ranges in AllowConnect. PR 23673.\n     [Stefan Fritsch]\n\n  *) Proxy balancer: support setting error status according to HTTP response\n     code from a backend.  PR 48939.  [Daniel Ruggeri <DRuggeri primary.net>]\n\n  *) htcacheclean: Introduce the ability to clean specific URLs from the\n     cache, if provided as an optional parameter on the command line.\n     [Graham Leggett]\n\n  *) core: Introduce the IncludeStrict directive, which explicitly fails\n     server startup if no files or directories match a wildcard path.\n     [Graham Leggett]\n\n  *) htcacheclean: Report additional statistics about entries deleted.\n     PR 48944. [Mark Drayton mark markdrayton.info]\n\n  *) Introduce SSLFIPS directive to support OpenSSL FIPS_mode; permits all\n     builds of mod_ssl to use 'SSLFIPS off' for portability, but the proper\n     build of openssl is required for 'SSLFIPS on'.  PR 46270.\n     [Dr Stephen Henson <steve openssl.org>, William Rowe]\n\n  *) mod_proxy_http: Log the port of the remote server in various messages.\n     PR 48812. [Igor Gali\u0107 <i galic brainsware org>]\n\n  *) mod_reqtimeout: Do not wrongly enforce timeouts for mod_proxy's backend\n     connections and other protocol handlers (like mod_ftp). [Stefan Fritsch]\n\n  *) mod_proxy_ajp: Really regard the operation a success, when the client\n     aborted the connection. In addition adjust the log message if the client\n     aborted the connection. [Ruediger Pluem]\n\n  *) mod_ssl: Add the 'SSLInsecureRenegotiation' directive, which\n     allows insecure renegotiation with clients which do not yet\n     support the secure renegotiation protocol.  [Joe Orton]\n\n  *) mod_ssl: Fix a potential I/O hang if a long list of trusted CAs\n     is configured for client cert auth. PR 46952.  [Joe Orton]\n\n  *) core: Only log a 408 if it is no keepalive timeout. PR 39785\n     [Ruediger Pluem,  Mark Montague <markmont umich.edu>]\n\n  *) support/rotatelogs: Add -L option to create a link to the current\n     log file.  PR 48761 [<lyndon orthanc.ca>, Dan Poirier]\n\n  *) mod_ldap: Update LDAPTrustedClientCert to consistently be a per-directory\n     setting only, matching most of the documentation and examples.\n     PR 46541 [Paul Reder, Eric Covener]\n\n  *) mod_ldap: LDAPTrustedClientCert now accepts CA_DER/CA_BASE64 argument\n     types previously allowed only in LDAPTrustedGlobalCert. [Eric Covener]\n\n  *) mod_negotiation: Preserve query string over multiviews negotiation.\n     This buglet was fixed for type maps in 2.2.6, but the same issue\n     affected multiviews and was overlooked.\n     PR 33112 [Joergen Thomsen <apache jth.net>]\n\n  *) mod_ldap: Eliminate a potential crash with multiple LDAPTrustedClientCert\n     when some are not password-protected. [Eric Covener]\n\n  *) Fix startup segfault when the Mutex directive is used but no loaded\n     modules use httpd mutexes.  PR 48787.  [Jeff Trawick]\n\n  *) Proxy: get the headers right in a HEAD request with\n     ProxyErrorOverride, by checking for an overridden error\n     before not after going into a catch-all code path.\n     PR 41646.  [Nick Kew, Stuart Children]\n\n  *) support/rotatelogs: Support the simplest log rotation case, log\n     truncation. Useful when the log is being processed in real time\n     using a command like tail. [Graham Leggett]\n\n  *) support/htcacheclean: Teach it how to write a pid file (modelled on\n     httpd's writing of a pid file) so that it becomes possible to run\n     more than one instance of htcacheclean on the same machine.\n     [Graham Leggett]\n\n  *) Log command line on startup, so there's a record of command line\n     arguments like -f.  PR 48752.  [Dan Poirier]\n\n  *) Introduce mod_reflector, a handler capable of reflecting POSTed\n     request bodies back within the response through the output filter\n     stack. Can be used to turn an output filter into a web service.\n     [Graham Leggett]\n\n  *) mod_proxy_http: Make sure that when an ErrorDocument is served\n     from a reverse proxied URL, that the subrequest respects the status\n     of the original request. This brings the behaviour of proxy_handler\n     in line with default_handler. PR 47106. [Graham Leggett]\n\n  *) Support wildcards in both the directory and file components of\n     the path specified by the Include directive. [Graham Leggett]\n\n  *) mod_proxy, mod_proxy_http: Support remote https proxies\n     by using HTTP CONNECT.  PR 19188.\n     [Philippe Dutrueux <lilas evidian.com>, Rainer Jung]\n\n  *) apxs: Fix -A and -a options to ignore whitespace in httpd.conf\n     [Philip M. Gollucci]\n\n  *) worker: Don't report server has reached MaxClients until it has.\n     Add message when server gets within MinSpareThreads of MaxClients.\n     PR 46996.  [Dan Poirier]\n\n  *) mod_session: Session expiry was being initialised, but not updated\n     on each session save, resulting in timed out sessions when there\n     should not have been. Fixed. [Graham Leggett]\n\n  *) mod_log_config: Add the R option to log the handler used within the\n     request. [Christian Folini <christian.folini netnea com>]\n\n  *) mod_include: Allow fine control over the removal of Last-Modified and\n     ETag headers within the INCLUDES filter, making it possible to cache\n     responses if desired. Fix the default value of the SSIAccessEnable\n     directive.  [Graham Leggett]\n\n  *) Add new UnDefine directive to undefine a variable. PR 35350.\n     [Stefan Fritsch]\n\n  *) Make ap_pregsub(), used by AliasMatch and friends, use the same syntax\n     for regex backreferences as mod_rewrite and mod_include: Remove the use\n     of '&' as an alias for '$0' and allow to escape any character with a\n     backslash. PR 48351. [Stefan Fritsch]\n\n  *) mod_authnz_ldap: If AuthLDAPCharsetConfig is set, also convert the\n     password to UTF-8. PR 45318.\n     [Johannes M\u00fcller <joh_m gmx.de>, Stefan Fritsch]\n\n  *) ab: Fix calculation of requests per second in HTML output. PR 48594.\n     [Stefan Fritsch]\n\n  *) mod_authnz_ldap: Failures to map a username to a DN, or to check a user\n     password now result in an informational level log entry instead of\n     warning level.  [Eric Covener]\n\nChanges with Apache 2.3.5\n\n  *) SECURITY: CVE-2010-0434 (cve.mitre.org)\n     Ensure each subrequest has a shallow copy of headers_in so that the\n     parent request headers are not corrupted.  Eliminates a problematic\n     optimization in the case of no request body.  PR 48359\n     [Jake Scott, William Rowe, Ruediger Pluem]\n\n  *) Turn static function get_server_name_for_url() into public\n     ap_get_server_name_for_url() and use it where appropriate. This\n     fixes mod_rewrite generating invalid URLs for redirects to IPv6\n     literal addresses. [Stefan Fritsch]\n\n  *) mod_ldap: Introduce new config option LDAPTimeout to set the timeout\n     for LDAP operations like bind and search. [Stefan Fritsch]\n\n  *) mod_proxy, mod_proxy_ftp: Move ProxyFtpDirCharset from mod_proxy to\n     mod_proxy_ftp. [Takashi Sato]\n\n  *) mod_proxy, mod_proxy_connect: Move AllowCONNECT from mod_proxy to\n     mod_proxy_connect. [Takashi Sato]\n\n  *) mod_cache: Do an exact match of the keys defined by\n     CacheIgnoreURLSessionIdentifiers against the querystring instead of\n     a partial match.  PR 48401.\n     [Dodou Wang <wangdong.08 gmail.com>, Ruediger Pluem]\n\n  *) mod_proxy_balancer: Fix crash in balancer-manager. [Rainer Jung]\n\n  *) Core HTTP: disable keepalive when the Client has sent\n     Expect: 100-continue\n     but we respond directly with a non-100 response.\n     Keepalive here led to data from clients continuing being treated as\n     a new request.\n     PR 47087 [Nick Kew]\n\n  *) Core: reject NULLs in request line or request headers.\n     PR 43039 [Nick Kew]\n\n  *) Core: (re)-introduce -T commandline option to suppress documentroot\n     check at startup.\n     PR 41887 [Jan van den Berg <janvdberg gmail.com>]\n\n  *) mod_autoindex: support XHTML as equivalent to HTML in IndexOptions,\n                    ScanHTMLTitles, ReadmeName, HeaderName\n     PR 48416 [Dmitry Bakshaev <dab18 izhnet.ru>, Nick Kew]\n\n  *) Proxy: Fix ProxyPassReverse with relative URL\n     Derived (slightly erroneously) from PR 38864 [Nick Kew]\n\n  *) mod_headers: align Header Edit with Header Set when used on Content-Type\n     PR 48422 [Cyril Bont\u00e9 <cyril.bonte free.fr>, Nick Kew>]\n\n  *) mod_headers: Enable multi-match-and-replace edit option\n     PR 46594 [Nick Kew]\n\n  *) mod_filter: enable it to act on non-200 responses.\n     PR 48377 [Nick Kew]\n\nChanges with Apache 2.3.4\n\n  *) Replace AcceptMutex, LockFile, RewriteLock, SSLMutex, SSLStaplingMutex,\n     and WatchdogMutexPath with a single Mutex directive.  Add APIs to\n     simplify setup and user customization of APR proc and global mutexes.\n     (See util_mutex.h.)  Build-time setting DEFAULT_LOCKFILE is no longer\n     respected; set DEFAULT_REL_RUNTIMEDIR instead.  [Jeff Trawick]\n\n  *) http_core: KeepAlive no longer accepts other than On|Off.\n     [Takashi Sato]\n\n  *) mod_dav: Remove errno from dav_error interface.  Calls to dav_new_error()\n     and dav_new_error_tag() must be adjusted to add an apr_status_t parameter.\n     [Jeff Trawick]\n\n  *) mod_authnz_ldap: Add AuthLDAPBindAuthoritative to allow Authentication to\n     try other providers in the case of an LDAP bind failure.\n     PR 46608 [Justin Erenkrantz, Joe Schaefer, Tony Stevenson]\n\n  *) Build: fix --with-module to work as documented\n     PR 43881 [Gez Saunders <gez.saunders virgin.net>]\n\nChanges with Apache 2.3.3\n\n  *) SECURITY: CVE-2009-3095 (cve.mitre.org)\n     mod_proxy_ftp: sanity check authn credentials.\n     [Stefan Fritsch <sf fritsch.de>, Joe Orton]\n\n  *) SECURITY: CVE-2009-3094 (cve.mitre.org)\n     mod_proxy_ftp: NULL pointer dereference on error paths.\n     [Stefan Fritsch <sf fritsch.de>, Joe Orton]\n\n  *) mod_ssl: enable support for ECC keys and ECDH ciphers.  Tested against\n     OpenSSL 1.0.0b3.  [Vipul Gupta <vipul.gupta sun.com>, Sander Temme]\n\n  *) mod_dav: Include uri when logging a PUT error due to connection abort.\n     PR 38149. [Stefan Fritsch]\n\n  *) mod_dav: Return 409 instead of 500 for a LOCK request if the parent\n     resource does not exist or is not a collection. PR 43465. [Stefan Fritsch]\n\n  *) mod_dav_fs: Return 409 instead of 500 for Litmus test case copy_nodestcoll\n     (a COPY request where the parent of the destination resource does not\n     exist). PR 39299. [Stefan Fritsch]\n\n  *) mod_dav_fs: Don't delete the whole file if a PUT with content-range failed.\n     PR 42896. [Stefan Fritsch]\n\n  *) mod_dav_fs: Make PUT create files atomically and no longer destroy the\n     old file if the transfer aborted. PR 39815. [Paul Querna, Stefan Fritsch]\n\n  *) mod_dav_fs: Remove inode keyed locking as this conflicts with atomically\n     creating files. On systems with inode numbers, this is a format change of\n     the DavLockDB. The old DavLockDB must be deleted on upgrade.\n     [Stefan Fritsch]\n\n  *) mod_log_config: Make ${cookie}C correctly match whole cookie names\n     instead of substrings. PR 28037. [Dan Franklin <dan dan-franklin.com>,\n     Stefan Fritsch]\n\n  *) vhost: A purely-numeric Host: header should not be treated as a port.\n     PR 44979 [Nick Kew]\n\n  *) mod_ldap: Avoid 500 errors with \"Unable to set LDAP_OPT_REFHOPLIMIT option to 5\"\n     when built against openldap by using SDK LDAP_OPT_REFHOPLIMIT defaults unless\n     LDAPReferralHopLimit is explicitly configured.\n     [Eric Covener]\n\n  *) mod_charset_lite: Honor 'CharsetOptions NoImplicitAdd'.\n     [Eric Covener]\n\n  *) mod_ssl: Add support for OCSP Stapling.  PR 43822.\n     [Dr Stephen Henson <shenson oss-institute.org>]\n\n  *) mod_socache_shmcb: Allow parens in file name if cache size is given.\n     Fixes SSLSessionCache directive mis-parsing parens in pathname.\n     PR 47945. [Stefan Fritsch]\n\n  *) htpasswd: Improve out of disk space handling. PR 30877. [Stefan Fritsch]\n\n  *) htpasswd: Use MD5 hash by default on all platforms. [Stefan Fritsch]\n\n  *) mod_sed: Reduce memory consumption when processing very long lines.\n     PR 48024 [Basant Kumar Kukreja <basant.kukreja sun.com>]\n\n  *) ab: Fix segfault in case the argument for -n is a very large number.\n     PR 47178. [Philipp Hagemeister <oss phihag.de>]\n\n  *) Allow ProxyPreserveHost to work in <Proxy> sections. PR 34901.\n     [Stefan Fritsch]\n\n  *) configure: Fix THREADED_MPMS so that mod_cgid is enabled again\n     for worker MPM. [Takashi Sato]\n\n  *) mod_dav: Provide a mechanism to obtain the request_rec and pathname\n     from the dav_resource. [Jari Urpalainen <jari.urpalainen nokia.com>,\n     Brian France <brian brianfrance.com>]\n\n  *) Build: Use install instead of cp if available on installing\n     modules to avoid segmentation fault. PR 47951. [hirose31 gmail.com]\n\n  *) mod_cache: correctly consider s-maxage in cacheability\n     decisions.  [Dan Poirier]\n\n  *) mod_logio/core: Report more accurate byte counts in mod_status if\n     mod_logio is loaded. PR 25656. [Stefan Fritsch]\n\n  *) mod_ldap: If LDAPSharedCacheSize is too small, try harder to purge\n     some cache entries and log a warning. Also increase the default\n     LDAPSharedCacheSize to 500000. This is a more realistic size suitable\n     for the default values of 1024 for LdapCacheEntries/LdapOpCacheEntries.\n     PR 46749. [Stefan Fritsch]\n\n  *) mod_rewrite: Make sure that a hostname:port isn't fully qualified if\n     the request is a CONNECT request. [Bill Zajac <billz consultla.com>]\n\n  *) mod_cache: Teach CacheEnable and CacheDisable to work from within a\n     Location section, in line with how ProxyPass works. [Graham Leggett]\n\n  *) mod_reqtimeout: New module to set timeouts and minimum data rates for\n     receiving requests from the client. [Stefan Fritsch]\n\n  *) core: Fix potential memory leaks by making sure to not destroy\n     bucket brigades that have been created by earlier filters.\n     [Stefan Fritsch]\n\n  *) core, mod_deflate, mod_sed: Reduce memory usage by reusing bucket\n     brigades in several places. [Stefan Fritsch]\n\n  *) mod_cache: Fix uri_meets_conditions() so that CacheEnable will\n     match by scheme, or by a wildcarded hostname. PR 40169\n     [Peter Grandi <pg_asf asf.for.sabi.co.uk>, Graham Leggett]\n\n  *) suxec: Allow to log an error if exec fails by setting FD_CLOEXEC\n     on the log file instead of closing it. PR 10744. [Nicolas Rachinsky]\n\n  *) mod_mime: Make RemoveType override the info from TypesConfig.\n     PR 38330. [Stefan Fritsch]\n\n  *) mod_cache: Introduce the option to run the cache from within the\n     normal request handler, and to allow fine grained control over\n     where in the filter chain content is cached. Adds CacheQuickHandler\n     directive.  [Graham Leggett]\n\n  *) core: Treat timeout reading request as 408 error, not 400.\n     Log 408 errors in access log as was done in Apache 1.3.x.\n     PR 39785 [Nobutaka Mantani <nobutaka nobutaka.org>,\n     Stefan Fritsch <sf fritsch.de>, Dan Poirier]\n\n  *) mod_ssl: Reintroduce SSL_CLIENT_S_DN, SSL_CLIENT_I_DN, SSL_SERVER_S_DN,\n     SSL_SERVER_I_DN back to the environment variables to be set by mod_ssl.\n     [Peter Sylvester <peter.sylvester edelweb.fr>]\n\n  *) mod_disk_cache: don't cache incomplete responses, per RFC 2616, 13.8.\n     PR15866.  [Dan Poirier]\n\n  *) ab: ab segfaults in verbose mode on https sites\n     PR46393.  [Ryan Niebur]\n\n  *) mod_dav: Allow other modules to become providers and add resource types\n     to the DAV response. [Jari Urpalainen <jari.urpalainen nokia.com>,\n     Brian France <brian brianfrance.com>]\n\n  *) mod_dav: Allow other modules to add things to the DAV or Allow headers\n     of an OPTIONS request. [Jari Urpalainen <jari.urpalainen nokia.com>,\n     Brian France <brian brianfrance.com>]\n\n  *) core: Lower memory usage of core output filter.\n     [Stefan Fritsch <sf sfritsch.de>]\n\n  *) mod_mime: Detect invalid use of MultiviewsMatch inside Location and\n     LocationMatch sections.  PR47754. [Dan Poirier]\n\n  *) mod_request: Make sure the KeptBodySize directive rejects values\n     that aren't valid numbers. [Graham Leggett]\n\n  *) mod_session_crypto: Sanity check should the potentially encrypted\n     session cookie be too short. [Graham Leggett]\n\n  *) mod_session.c: Prevent a segfault when session is added but not\n     configured. [Graham Leggett]\n\n  *) htcacheclean: 19 ways to fail, 1 error message. Fixed. [Graham Leggett]\n\n  *) mod_auth_digest: Fail server start when nonce count checking\n     is configured without shared memory, or md5-sess algorithm is\n     configured. [Dan Poirier]\n\n  *) mod_proxy_connect: The connect method doesn't work if the client is\n     connecting to the apache proxy through an ssl socket. Fixed.\n     PR29744. [Brad Boyer, Mark Cave-Ayland, Julian Gilbey, Fabrice Durand,\n     David Gence, Tim Dodge, Per Gunnar Hans, Emmanuel Elango,\n     Kevin Croft, Rudolf Cardinal]\n\n  *) mod_ssl: The error message when SSLCertificateFile is missing should\n     at least give the name or position of the problematic virtual host\n     definition. [Stefan Fritsch sf sfritsch.de]\n\n  *) mod_auth_digest: Fix null pointer when qop=none. [Dan Poirier]\n\n  *) Add support for HTTP PUT to ab. [Jeff Barnes <jbarnesweb yahoo.com>]\n\n  *) mod_headers: generalise the envclause to support expression\n     evaluation with ap_expr parser [Nick Kew]\n\n  *) mod_cache: Introduce the thundering herd lock, a mechanism to keep\n     the flood of requests at bay that strike a backend webserver as\n     a cached entity goes stale. [Graham Leggett]\n\n  *) mod_auth_digest: Fix usage of shared memory and re-enable it.\n     PR 16057 [Dan Poirier]\n\n  *) Preserve Port information over internal redirects\n     PR 35999 [Jonas Ringh <jonas.ringh cixit.se>]\n\n  *) Proxy: unable to connect to a backend is SERVICE_UNAVAILABLE,\n     rather than BAD_GATEWAY or (especially) NOT_FOUND.\n     PR 46971 [evanc nortel.com]\n\n  *) Various modules: Do better checking of pollset operations in order to\n     avoid segmentation faults if they fail. PR 46467\n     [Stefan Fritsch <sf sfritsch.de>]\n\n  *) mod_autoindex: Correctly create an empty cell if the description\n     for a file is missing. PR 47682 [Peter Poeml <poeml suse.de>]\n\n  *) ab: Fix broken error messages after resolver or connect() failures.\n     [Jeff Trawick]\n\n  *) SECURITY: CVE-2009-1890 (cve.mitre.org)\n     Fix a potential Denial-of-Service attack against mod_proxy in a\n     reverse proxy configuration, where a remote attacker can force a\n     proxy process to consume CPU time indefinitely.  [Nick Kew, Joe Orton]\n\n  *) SECURITY: CVE-2009-1191 (cve.mitre.org)\n     mod_proxy_ajp: Avoid delivering content from a previous request which\n     failed to send a request body. PR 46949 [Ruediger Pluem]\n\n  *) htdbm: Fix possible buffer overflow if dbm database has very\n     long values.  PR 30586 [Dan Poirier]\n\n  *) core: Return APR_EOF if request body is shorter than the length announced\n     by the client. PR 33098 [ Stefan Fritsch <sf sfritsch.de>]\n\n  *) mod_suexec: correctly set suexec_enabled when httpd is run by a\n     non-root user and may have insufficient permissions.\n     PR 42175 [Jim Radford <radford blackbean.org>]\n\n  *) mod_ssl: Fix SSL_*_DN_UID variables to use the 'userID' attribute\n     type.  PR 45107.  [Michael Str\u00f6der <michael stroeder.com>,\n     Peter Sylvester <peter.sylvester edelweb.fr>]\n\n  *) mod_proxy_http: fix case sensitivity checking transfer encoding\n     PR 47383 [Ryuzo Yamamoto <ryuzo.yamamoto gmail.com>]\n\n  *) mod_alias: ensure Redirect issues a valid URL.\n     PR 44020 [H\u00e5kon Stordahl <hakon stordahl.org>]\n\n  *) mod_dir: add FallbackResource directive, to enable admin to specify\n     an action to happen when a URL maps to no file, without resorting\n     to ErrorDocument or mod_rewrite.  PR 47184 [Nick Kew]\n\n  *) mod_cgid: Do not leak the listening Unix socket file descriptor to the\n     CGI process. PR 47335 [Korn\u00e9l P\u00e1l <kornelpal gmail.com>]\n\n  *) mod_rewrite: Remove locking for writing to the rewritelog.\n     PR 46942 [Dan Poirier <poirier pobox.com>]\n\n  *) mod_alias: check sanity in Redirect arguments.\n     PR 44729 [S\u00f6nke Tesch <st kino-fahrplan.de>, Jim Jagielski]\n\n  *) mod_proxy_http: fix Host: header for literal IPv6 addresses.\n     PR 47177 [Carlos Garcia Braschi <cgbraschi gmail.com>]\n\n  *) mod_cache: Add CacheIgnoreURLSessionIdentifiers directive to ignore\n     defined session identifiers encoded in the URL when caching.\n     [Ruediger Pluem]\n\n  *) mod_rewrite: Fix the error string returned by RewriteRule.\n     RewriteRule returned \"RewriteCond: bad flag delimiters\" when the 3rd\n     argument of RewriteRule was not started with \"[\" or not ended with \"]\".\n     PR 45082 [Vitaly Polonetsky <m_vitaly topixoft.com>]\n\n  *) Windows: Fix usage message.\n     [Rainer Jung]\n\n  *) apachectl: When passing through arguments to httpd in\n     non-SysV mode, use the \"$@\" syntax to preserve arguments.\n     [Eric Covener]\n\n  *) mod_dbd: add DBDInitSQL directive to enable SQL statements to\n     be run when a connection is opened.  PR 46827\n     [Marko Kevac <mkevac gmail.com>]\n\n  *) mod_cgid: Improve handling of long AF_UNIX socket names (ScriptSock).\n     PR 47037.  [Jeff Trawick]\n\n  *) mod_proxy_ajp: Check more strictly that the backend follows the AJP\n     protocol. [Mladen Turk]\n\n  *) mod_proxy_ajp: Forward remote port information by default.\n     [Rainer Jung]\n\n  *) Allow MPMs to be loaded dynamically, as with most other modules.  Use\n     --enable-mpms-shared={list|\"all\"} to enable.  This required changes to\n     the MPM interfaces.  Removed: mpm.h, mpm_default.h (as an installed\n     header), APACHE_MPM_DIR, MPM_NAME, ap_threads_per_child,\n     ap_max_daemons_limit, ap_my_generation, etc.  ap_mpm_query() can't be\n     called until after the register-hooks phase.  [Jeff Trawick]\n\n  *) mod_ssl: Add SSLProxyCheckPeerExpire and SSLProxyCheckPeerCN directives\n     to enable stricter checking of remote server certificates.\n     [Ruediger Pluem]\n\n  *) ab: Fix a 100% CPU loop on platforms where a failed non-blocking connect\n     returns EINPROGRESS and a subsequent poll() returns only POLLERR.\n     Observed on HP-UX.  [Eric Covener]\n\n  *) Remove broken support for BeOS, TPF, and even older platforms such\n     as A/UX, Next, and Tandem.  [Jeff Trawick]\n\n  *) mod_proxy_ftp: Add ProxyFtpListOnWildcard directive to allow files with\n     globbing characters to be retrieved instead of converted into a\n     directory listing.  PR 46789 [Dan Poirier <poirier pobox.com>]\n\n  *) Provide ap_retained_data_create()/ap_retained_data_get() for preservation\n     of module state across unload/load.  [Jeff Trawick]\n\n  *) mod_substitute: Fix a memory leak. PR 44948\n     [Dan Poirier <poirier pobox.com>]\n\nChanges with Apache 2.3.2\n\n  *) mod_mime_magic: Fix detection of compressed content. [Rainer Jung]\n\n  *) mod_negotiation: Escape paths of filenames in 406 responses to avoid\n     HTML injections and HTTP response splitting.  PR 46837.\n     [Geoff Keating <geoffk apple.com>]\n\n  *) mod_ssl: add support for type-safe STACK constructs in OpenSSL\n     development HEAD.  PR 45521.  [Kaspar Brand, Sander Temme]\n\n  *) ab: Fix maintenance of the pollset to resolve EALREADY errors\n     with kqueue (BSD/OS X) and excessive CPU with event ports (Solaris).\n     PR 44584.  Use APR_POLLSET_NOCOPY for better performance with some\n     pollset implementations.  [Jeff Trawick]\n\n  *) mod_disk_cache: The module now turns off sendfile support if\n     'EnableSendfile off' is defined globally. [Lars Eilebrecht]\n\n  *) mod_deflate: Adjust content metadata before bailing out on 304\n     responses so that the metadata does not differ from 200 response.\n     [Roy T. Fielding]\n\n  *) mod_deflate: Fix creation of invalid Etag headers. We now make sure\n     that the Etag value is properly quoted when adding the gzip marker.\n     PR 39727, 45023. [Lars Eilebrecht, Roy T. Fielding]\n\n  *) Added 20x22 icons for ODF, SVG, and XML documents.  PR 37185.\n     [Peter Harlow]\n\n  *) Disabled DefaultType directive and removed ap_default_type()\n     from core.  We now exclude Content-Type from responses for which\n     a media type has not been configured via mime.types, AddType,\n     ForceType, or some other mechanism. PR 13986. [Roy T. Fielding]\n\n  *) mod_rewrite: Add IPV6 variable to RewriteCond\n     [Ryan Phillips <ryan-apache trolocsis.com>]\n\n  *) core: Enhance KeepAliveTimeout to support a value in milliseconds.\n     PR 46275. [Takashi Sato]\n\n  *) rotatelogs: Allow size units B, K, M, G and combination of\n     time and size based rotation. [Rainer Jung]\n\n  *) rotatelogs: Add flag for verbose (debug) output. [Rainer Jung]\n\n  *) mod_ssl: Fix merging of SSLRenegBufferSize directive. PR 46508\n     [<tlhackque yahoo.com>]\n\n  *) core: Translate the the status line to ASCII on EBCDIC platforms in\n     ap_send_interim_response() and for locally generated \"100 Continue\"\n     responses.  [Eric Covener]\n\n  *) prefork: Fix child process hang during graceful restart/stop in\n     configurations with multiple listening sockets.  PR 42829.  [Joe Orton,\n     Jeff Trawick]\n\n  *) mod_session_crypto: Ensure that SessionCryptoDriver can only be\n     set in the global scope. [Graham Leggett]\n\n  *) mod_ext_filter: We need to detect failure to startup the filter\n     program (a mangled response is not acceptable).  Fix to detect\n     failure, and offer configuration option either to abort or\n     to remove the filter and continue.\n     PR 41120 [Nick Kew]\n\n  *) mod_session_crypto: Rewrite the session_crypto module against the\n     apr_crypto API. [Graham Leggett]\n\n  *) mod_auth_form: Fix a pool lifetime issue, don't remove the subrequest\n     until the main request is cleaned up. [Graham Leggett]\n\nChanges with Apache 2.3.1\n\n  *) ap_slotmem: Add in new slot-based memory access API impl., including\n     2 providers (mod_sharedmem and mod_plainmem) [Jim Jagielski,\n     Jean-Frederic Clere, Brian Akins <brian.akins turner.com>]\n\n  *) mod_include: support generating non-ASCII characters as entities in SSI\n     PR 25202 [Nick Kew]\n\n  *) core/utils: Enhance ap_escape_html API to support escaping non-ASCII chars\n     PR 25202 [Nick Kew]\n\n  *) mod_rewrite: fix \"B\" flag breakage by reverting r5589343\n    PR 45529 [Bob Ionescu <bobsiegen googlemail.com>]\n\n  *) CGI: return 504 (Gateway timeout) rather than 500 when a script\n     times out before returning status line/headers.\n     PR 42190 [Nick Kew]\n\n  *) mod_cgid: fix segfault problem on solaris.\n     PR 39332 [Masaoki Kobayashi <masaoki techfirm.co.jp>]\n\n  *) mod_proxy_scgi: Added. [Andr\u00e9 Malo]\n\n  *) mod_cache: Introduce 'no-cache' per-request environment variable\n     to prevent the saving of an otherwise cacheable response.\n     [Eric Covener]\n\n  *) mod_rewrite: Introduce DiscardPathInfo|DPI flag to stop the troublesome\n     way that per-directory rewrites append the previous notion of PATH_INFO\n     to each substitution before evaluating subsequent rules.\n     PR 38642 [Eric Covener]\n\n  *) mod_cgid: Do not add an empty argument when calling the CGI script.\n     PR 46380 [Ruediger Pluem]\n\n  *) scoreboard: Remove unused sb_type from process_score.\n     [Torsten Foertsch <torsten.foertsch gmx.net>, Chris Darroch]\n\n  *) mod_ssl: Add SSLRenegBufferSize directive to allow changing the\n     size of the buffer used for the request-body where necessary\n     during a per-dir renegotiation.  PR 39243.  [Joe Orton]\n\n  *) mod_proxy_fdpass: New module to pass a client connection over to a separate\n     process that is reading from a unix daemon socket.\n\n  *) mod_ssl: Improve environment variable extraction to be more\n     efficient and to correctly handle DNs with duplicate tags.\n     PR 45975.  [Joe Orton]\n\n  *) Remove the obsolete serial attribute from the RPM spec file. Compile\n     against the external pcre. Add missing binaries fcgistarter, and\n     mod_socache* and mod_session*. [Graham Leggett]\n\nChanges with Apache 2.3.0\n\n  *) mod_ratelimit: New module to do bandwidth rate limiting. [Paul Querna]\n\n  *) Remove X-Pad header which was added as a work around to a bug in\n     Netscape 2.x to 4.0b2. [Takashi Sato <takashi lans-tv.com>]\n\n  *) Add DTrace Statically Defined Tracing (SDT) probes.\n    [Theo Schlossnagle <jesus omniti.com>, Paul Querna]\n\n  *) mod_proxy_balancer: Move all load balancing implementations\n     as individual, self-contained mod_proxy submodules under\n     modules/proxy/balancers [Jim Jagielski]\n\n  *) Rename APIs to include ap_ prefix:\n        find_child_by_pid -> ap_find_child_by_pid\n        suck_in_APR -> ap_suck_in_APR\n        sys_privileges_handlers -> ap_sys_privileges_handlers\n        unixd_accept -> ap_unixd_accept\n        unixd_config -> ap_unixd_config\n        unixd_killpg -> ap_unixd_killpg\n        unixd_set_global_mutex_perms -> ap_unixd_set_global_mutex_perms\n        unixd_set_proc_mutex_perms -> ap_unixd_set_proc_mutex_perms\n        unixd_set_rlimit -> ap_unixd_set_rlimit\n     [Paul Querna]\n\n  *) mod_lbmethod_heartbeat: New module to load balance mod_proxy workers\n     based on heartbeats. [Paul Querna]\n\n  *) mod_heartmonitor: New module to collect heartbeats, and write out a file\n     so that other modules can load balance traffic as needed. [Paul Querna]\n\n  *) mod_heartbeat: New module to generate multicast heartbeats to know if a\n     server is online. [Paul Querna]\n\n  *) mod_buffer: Honour the flush bucket and flush the buffer in the\n     input filter. Make sure that metadata buckets are written to\n     the buffer, not to the final brigade. [Graham Leggett]\n\n  *) mod_buffer: Optimise the buffering of heap buckets when the heap\n     buckets stay exactly APR_BUCKET_BUFF_SIZE long. [Graham Leggett,\n     Ruediger Pluem]\n\n  *) mod_buffer: Optional support for buffering of the input and output\n     filter stacks. Can collapse many small buckets into fewer larger\n     buckets, and prevents excessively small chunks being sent over\n     the wire. [Graham Leggett]\n\n  *) mod_privileges: new module to make httpd on Solaris privileges-aware\n     and to enable different virtualhosts to run with different\n     privileges and Unix user/group IDs [Nick Kew]\n\n  *) mod_mem_cache: this module has been removed. [William Rowe]\n\n  *) authn/z: Remove mod_authn_default and mod_authz_default.\n     [Chris Darroch]\n\n  *) authz: Fix handling of authz configurations, make default authz\n     logic replicate 2.2.x authz logic, and replace <Satisfy*>, Reject,\n     and AuthzMergeRules directives with Match, <Match*>, and AuthzMerge\n     directives.  [Chris Darroch]\n\n  *) mod_authn_core: Prevent crash when provider alias created to\n     provider which is not yet registered.  [Chris Darroch]\n\n  *) mod_authn_core: Add AuthType of None to support disabling\n     authentication.  [Chris Darroch]\n\n  *) core: Allow <Limit> and <LimitExcept> directives to nest, and\n     constrain their use to conform with that of other access control\n     and authorization directives.  [Chris Darroch]\n\n  *) unixd: turn existing code into a module, and turn the set user/group\n     and chroot into a child_init function. [Nick Kew]\n\n  *) mod_dir: Support \"DirectoryIndex disabled\"\n     Suggested By Andr\u00e9 Warnier <aw ice-sa.com> [Eric Covener]\n\n  *) mod_ssl: Send Content-Type application/ocsp-request for POST requests to\n     OSCP responders. PR 46014 [Dr Stephen Henson <steve openssl.org>]\n\n  *) mod_authnz_ldap: don't return NULL-valued environment variables to\n     other modules.  PR 39045 [Francois Pesce <francois.pesce gmail.com>]\n\n  *) Don't adjust case in pathname components that are not of interest\n     to mod_mime.  Fixes mod_negotiation's use of such components.\n     PR 43250 [Basant Kumar Kukreja <basant.kukreja sun.com>]\n\n  *) Be tolerant in what you accept - accept slightly broken\n     status lines from a backend provided they include a valid status code.\n     PR 44995 [Rainer Jung <rainer.jung kippdata.de>]\n\n  *) New module mod_sed: filter Request/Response bodies through sed\n     [Basant Kumar Kukreja <basant.kukreja sun.com>]\n\n  *) mod_auth_form: Make sure that basic authentication is correctly\n     faked directly after login. [Graham Leggett]\n\n  *) mod_session_cookie, mod_session_dbd: Make sure cookies are set both\n     within the output headers and error output headers, so that the\n     session is maintained across redirects. [Graham Leggett]\n\n  *) mod_auth_form: Make sure the logged in user is populated correctly\n     after a form login. Fixes a missing REMOTE_USER variable directly\n     following a login. [Graham Leggett]\n\n  *) mod_session_cookie: Make sure that cookie attributes are correctly\n     included in the blank cookie when cookies are removed. This fixes an\n     inability to log out when using mod_auth_form. [Graham Leggett]\n\n  *) mod_session: Prevent a segfault when a CGI script sets a cookie with a\n     null value. [David Shane Holden <dpejesh apache.org>]\n\n  *) core, authn/z: Determine registered authn/z providers directly in\n     ap_setup_auth_internal(), which allows optional functions that just\n     wrapped ap_list_provider_names() to be removed from authn/z modules.\n     [Chris Darroch]\n\n  *) authn/z: Convert common provider version strings to macros.\n     [Chris Darroch]\n\n  *) core: When testing for slash-terminated configuration paths in\n     ap_location_walk(), don't look past the start of an empty string\n     such as that created by a <Location \"\"> directive.\n     [Chris Darroch]\n\n  *) core, mod_proxy: If a kept_body is present, it becomes safe for\n     subrequests to support message bodies. Make sure that safety\n     checks within the core and within the proxy are not triggered\n     when kept_body is present. This makes it possible to embed\n     proxied POST requests within mod_include. [Graham Leggett]\n\n  *) mod_auth_form: Make sure the input filter stack is properly set\n     up before reading the login form. Make sure the kept body filter\n     is correctly inserted to ensure the body can be read a second\n     time safely should the authn be successful. [Graham Leggett,\n     Ruediger Pluem]\n\n  *) mod_request: Insert the KEPT_BODY filter via the insert_filter\n     hook instead of during fixups. Add a safety check to ensure the\n     filters cannot be inserted more than once. [Graham Leggett,\n     Ruediger Pluem]\n\n  *) ap_cache_cacheable_headers_out() will (now) always\n     merge an error headers _before_ clearing them and _before_\n     merging in the actual entity headers and doing normal\n     hop-by-hop cleansing. [Dirk-Willem van Gulik].\n\n  *) cache: retire ap_cache_cacheable_hdrs_out() which was used\n     for both in- and out-put headers; and replace it by a single\n     ap_cache_cacheable_headers() wrapped in a in- and out-put\n     specific ap_cache_cacheable_headers_in()/out(). The latter\n     which will also merge error and ensure content-type. To keep\n     cache modules consistent with ease. This API change bumps\n     up the minor MM by one [Dirk-Willem van Gulik].\n\n  *) Move the KeptBodySize directive, kept_body filters and the\n     ap_parse_request_body function out of the http module and into a\n     new module called mod_request, reducing the size of the core.\n     [Graham Leggett]\n\n  *) mod_dbd: Handle integer configuration directive parameters with a\n     dedicated function.\n\n  *) Change the directives within the mod_session* modules to be valid\n     both inside and outside the location/directory sections, as\n     suggested by wrowe. [Graham Leggett]\n\n  *) mod_auth_form: Add a module capable of allowing end users to log\n     in using an HTML form, storing the credentials within mod_session.\n     [Graham Leggett]\n\n  *) Add a function to the http filters that is able to parse an HTML\n     form request with the type of application/x-www-form-urlencoded.\n     [Graham Leggett]\n\n  *) mod_session_crypto: Initialise SSL in the post config hook.\n     [Ruediger Pluem, Graham Leggett]\n\n  *) mod_session_dbd: Add a session implementation capable of storing\n     session information in a SQL database via the dbd interface. Useful\n     for sites where session privacy is important. [Graham Leggett]\n\n  *) mod_session_crypto: Add a session encoding implementation capable\n     of encrypting and decrypting sessions wherever they may be stored.\n     Introduces a level of privacy when sessions are stored on the\n     browser. [Graham Leggett]\n\n  *) mod_session_cookie: Add a session implementation capable of storing\n     session information within cookies on the browser. Useful for high\n     volume sites where server bound sessions are too resource intensive.\n     [Graham Leggett]\n\n  *) mod_session: Add a generic session interface to unify the different\n     attempts at saving persistent sessions across requests.\n     [Graham Leggett]\n\n  *) core, authn/z: Avoid calling access control hooks for internal requests\n     with configurations which match those of initial request.  Revert to\n     original behaviour (call access control hooks for internal requests\n     with URIs different from initial request) if any access control hooks or\n     providers are not registered as permitting this optimization.\n     Introduce wrappers for access control hook and provider registration\n     which can accept additional mode and flag data.  [Chris Darroch]\n\n  *) Introduced ap_expr API for expression evaluation.\n     This is adapted from mod_include, which is the first module\n     to use the new API.\n     [Nick Kew]\n\n  *) mod_authz_dbd: When redirecting after successful login/logout per\n     AuthzDBDRedirectQuery, do not report authorization failure, and use\n     first row returned by database query instead of last row.\n     [Chris Darroch]\n\n  *) mod_ldap: Correctly return all requested attribute values\n     when some attributes have a null value.\n     PR 44560 [Anders Kaseorg <anders kaseorg.com>]\n\n  *) core: check symlink ownership if both FollowSymlinks and\n     SymlinksIfOwnerMatch are set [Nick Kew]\n\n  *) core: fix origin checking in SymlinksIfOwnerMatch\n     PR 36783 [Robert L Mathews <rob-apache.org.bugs tigertech.net>]\n\n  *) Activate mod_cache, mod_file_cache and mod_disk_cache as part of the\n     'most' set for '--enable-modules' and '--enable-shared-mods'. Include\n     mod_mem_cache in 'all' as well. [Dirk-Willem van Gulik]\n\n  *) Also install mod_so.h, mod_rewrite.h and mod_cache.h; as these\n     contain public function declarations which are useful for\n     third party module authors. PR 42431 [Dirk-Willem van Gulik].\n\n  *) mod_dir, mod_negotiation: pass the output filter information\n     to newly created sub requests; as these are later on used\n     as true requests with an internal redirect. This allows for\n     mod_cache et.al. to trap the results of the redirect.\n     [Dirk-Willem van Gulik, Ruediger Pluem]\n\n  *) mod_ldap: Add support (taking advantage of the new APR capability)\n     for ldap rebind callback while chasing referrals. This allows direct\n     searches on LDAP servers (in particular MS Active Directory 2003+)\n     using referrals without the use of the global catalog.\n     PRs 26538, 40268, and 42557 [Paul J. Reder]\n\n  *) ApacheMonitor.exe: Introduce --kill argument for use by the\n     installer.  This will permit the installation tool to remove\n     all running instances before attempting to remove the .exe.\n     [William Rowe]\n\n  *) mod_ssl: Add support for OCSP validation of client certificates.\n     PR 41123.  [Marc Stern <marc.stern approach.be>, Joe Orton]\n\n  *) mod_serf: New module for Reverse Proxying. [Paul Querna]\n\n  *) core: Add the option to keep aside a request body up to a certain\n     size that would otherwise be discarded, to be consumed by filters\n     such as mod_include. When enabled for a directory, POST requests\n     to shtml files can be passed through to embedded scripts as POST\n     requests, rather being downgraded to GET requests. [Graham Leggett]\n\n  *) mod_ssl: Fix TLS upgrade (RFC 2817) support.  PR 41231.  [Joe Orton]\n\n  *) scoreboard: Correctly declare ap_time_process_request.\n     PR 43789 [Tom Donovan <Tom.Donovan acm.org>]\n\n  *) core; scoreboard: ap_get_scoreboard_worker(sbh) now takes the sbh member\n     from the connection rec, ap_get_scoreboard_worker(proc, thread) will now\n     provide the unusual legacy lookup.  [William Rowe]\n\n  *) mpm winnt: fix null pointer dereference\n     PR 42572 [Davi Arnaut]\n\n  *) mod_authnz_ldap, mod_authn_dbd: Tidy up the code to expose authn\n     parameters to the environment. Improve portability to\n     EBCDIC machines by using apr_toupper(). [Martin Kraemer]\n\n  *) mod_ldap, mod_authnz_ldap: Add support for nested groups (i.e. the ability\n     to authorize an authenticated user via a \"require ldap-group X\" directive\n     where the user is not in group X, but is in a subgroup contained in X.\n     PR 42891 [Paul J. Reder]\n\n  *) mod_ssl: Add support for caching SSL Sessions in memcached. [Paul Querna]\n\n  *) apxs: Enhance -q flag to print all known variables and their values\n     when invoked without variable name(s).\n     [William Rowe, Sander Temme]\n\n  *) apxs: Eliminate run-time check for mod_so.  PR 40653.\n     [David M. Lee <dmlee crossroads.com>]\n\n  *) beos MPM: Create pmain pool and run modules' child_init hooks when\n     entering ap_mpm_run(), then destroy pmain when exiting ap_mpm_run().\n     [Chris Darroch]\n\n  *) netware MPM: Destroy pmain pool when exiting ap_mpm_run() so that\n     cleanups registered in modules' child_init hooks are performed.\n     [Chris Darroch]\n\n  *) Fix issue which could cause error messages to be written to access logs\n     on Win32.  PR 40476.  [Tom Donovan <Tom.Donovan acm.org>]\n\n  *) The LockFile directive, which specifies the location of\n     the accept() mutex lockfile, is deprecated. Instead, the\n     AcceptMutex directive now takes an optional lockfile\n     location parameter, ala SSLMutex. [Jim Jagielski]\n\n  *) mod_authn_dbd: Export any additional columns queried in the SQL select\n     into the environment with the name AUTHENTICATE_<COLUMN>. This brings\n     mod_authn_dbd behaviour in line with mod_authnz_ldap. [Graham Leggett]\n\n  *) mod_dbd: Key the storage of prepared statements on the hex string\n     value of server_rec, rather than the server name, as the server name\n     may change (eg when the server name is set) at any time, causing\n     weird behaviour in modules dependent on mod_dbd. [Graham Leggett]\n\n  *) mod_proxy_fcgi: Added win32 build. [Mladen Turk]\n\n  *) sendfile_nonblocking() takes the _brigade_ as an argument, gets\n     the first bucket from the brigade, finds it not to be a FILE\n     bucket and barfs. The fix is to pass a bucket rather than a brigade.\n     [Niklas Edmundsson <nikke acc.umu.se>]\n\n  *) mod_rewrite: support rewritemap by SQL query [Nick Kew]\n\n  *) ap_get_server_version() has been removed.  Third-party modules must\n     now use ap_get_server_banner() or ap_get_server_description().\n     [Jeff Trawick]\n\n  *) All MPMs: Introduce a check_config phase between pre_config and\n     open_logs, to allow modules to review interdependent configuration\n     directive values and adjust them while messages can still be logged\n     to the console.  Handle relevant MPM directives during this phase\n     and format messages for both the console and the error log, as\n     appropriate.  [Chris Darroch]\n\n  *) core: Do not allow internal redirects like the DirectoryIndex of mod_dir\n     to circumvent the symbolic link checks imposed by FollowSymLinks and\n     SymLinksIfOwnerMatch. [Nick Kew, Ruediger Pluem, William Rowe]\n\n  *) New SSLLogLevelDebugDump [ None (default) | IO (not bytes) | Bytes ]\n     configures the I/O Dump of SSL traffic, when LogLevel is set to Debug.\n     The default is none as this is far greater debugging resolution than\n     the typical administrator is prepared to untangle.  [William Rowe]\n\n  *) mod_disk_cache: If possible, check if the size of an object to cache is\n     within the configured boundaries before actually saving data.\n     [Niklas Edmundsson <nikke acc.umu.se>]\n\n  *) Worker and event MPMs: Remove improper scoreboard updates which were\n     performed in the event of a fork() failure.  [Chris Darroch]\n\n  *) Add support for fcgi:// proxies to mod_rewrite.\n     [Markus Schiegl <ms schiegl.com>]\n\n  *) Remove incorrect comments from scoreboard.h regarding conditional\n     loading of worker_score structure with mod_status, and remove unused\n     definitions relating to old life_status field.\n     [Chris Darroch <chrisd pearsoncmg.com>]\n\n  *) Remove allocation of memory for unused array of lb_score pointers\n     in ap_init_scoreboard().  [Chris Darroch <chrisd pearsoncmg.com>]\n\n  *) Add mod_proxy_fcgi, a FastCGI back end for mod_proxy.\n     [Garrett Rooney, Jim Jagielski, Paul Querna]\n\n  *) Event MPM: Fill in the scoreboard's tid field. PR 38736.\n     [Chris Darroch <chrisd pearsoncmg.com>]\n\n  *) mod_charset_lite: Remove Content-Length when output filter can\n     invalidate it.  Warn when input filter can invalidate it.\n     [Jeff Trawick]\n\n  *) Authz: Add the new module mod_authn_core that will provide common\n     authn directives such as 'AuthType', 'AuthName'.  Move the directives\n     'AuthType' and 'AuthName' out of the core module and merge mod_authz_alias\n     into mod_authn_core. [Brad Nicholes]\n\n  *) Authz: Move the directives 'Order', 'Allow', 'Deny' and 'Satisfy'\n     into the new module mod_access_compat which can be loaded to provide\n     support for these directives.\n     [Brad Nicholes]\n\n  *) Authz: Move the 'Require' directive from the core module as well as\n     add the directives '<SatisfyAll>', '<SatisfyOne>', '<RequireAlias>'\n     and 'Reject' to mod_authz_core. The new directives introduce 'AND/OR'\n     logic into the authorization processing. [Brad Nicholes]\n\n  *) Authz: Add the new module mod_authz_core which acts as the\n     authorization provider vector and contains common authz\n     directives. [Brad Nicholes]\n\n  *) Authz: Renamed mod_authz_dbm authz providers from 'group' and\n     'file-group' to 'dbm-group' and 'dbm-file-group'. [Brad Nicholes]\n\n  *) Authz: Added the new authz providers 'env', 'ip', 'host', 'all' to handle\n     host-based access control provided by mod_authz_host and invoked\n     through the 'Require' directive. [Brad Nicholes]\n\n  *) Authz: Convert all of the authz modules from hook based to\n     provider based. [Brad Nicholes]\n\n  *) mod_cache: Add CacheMinExpire directive to set the minimum time in\n     seconds to cache a document.\n     [Brian Akins <brian.akins turner.com>, Ruediger Pluem]\n\n  *) mod_authz_dbd: SQL authz with Login/Session support [Nick Kew]\n\n  *) Fix typo in ProxyStatus syntax error message.\n     [Christophe Jaillet <christophe.jaillet wanadoo.fr>]\n\n  *) Asynchronous write completion for the Event MPM.  [Brian Pane]\n\n  *) Added an End-Of-Request bucket type.  The logging of a request and\n     the freeing of its pool are now done when the EOR bucket is destroyed.\n     This has the effect of delaying the logging until right after the last\n     of the response is sent; ap_core_output_filter() calls the access logger\n     indirectly when it destroys the EOR bucket.  [Brian Pane]\n\n  *) Rewrite of logresolve support utility: IPv6 addresses are now supported\n     and the format of statistical output has changed. [Colm MacCarthaigh]\n\n  *) Rewrite of ap_coreoutput_filter to do nonblocking writes  [Brian Pane]\n\n  *) Added new connection states for handler and write completion\n     [Brian Pane]\n\n  *) mod_cgid: Refuse to work on Solaris 10 due to OS bugs.  PR 34264.\n     [Justin Erenkrantz]\n\n  *) Teach mod_ssl to use arbitrary OIDs in an SSLRequire directive,\n     allowing string-valued client certificate attributes to be used for\n     access control, as in: SSLRequire \"value\" in OID(\"1.3.6.1.4.1.18060.1\")\n     [Martin Kraemer, David Reid]\n\n  [Apache 2.3.0-dev includes those bug fixes and changes with the\n   Apache 2.2.xx tree as documented, and except as noted, below.]\n\nChanges with Apache 2.2.x and later:\n\n  *) http://svn.apache.org/viewvc/httpd/httpd/branches/2.2.x/CHANGES?view=markup\n\nChanges with Apache 2.0.x and later:\n\n  *) http://svn.apache.org/viewvc/httpd/httpd/branches/2.0.x/CHANGES?view=markup\n", "<?xml version=\"1.0\"?>\n<!DOCTYPE modulesynopsis SYSTEM \"../style/modulesynopsis.dtd\">\n<?xml-stylesheet type=\"text/xsl\" href=\"../style/manual.en.xsl\"?>\n<!-- $LastChangedRevision$ -->\n\n<!--\n Licensed to the Apache Software Foundation (ASF) under one or more\n contributor license agreements.  See the NOTICE file distributed with\n this work for additional information regarding copyright ownership.\n The ASF licenses this file to You under the Apache License, Version 2.0\n (the \"License\"); you may not use this file except in compliance with\n the License.  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<modulesynopsis metafile=\"core.xml.meta\">\n\n<name>core</name>\n<description>Core Apache HTTP Server features that are always\navailable</description>\n<status>Core</status>\n\n<directivesynopsis>\n<name>AcceptFilter</name>\n<description>Configures optimizations for a Protocol's Listener Sockets</description>\n<syntax>AcceptFilter <var>protocol</var> <var>accept_filter</var></syntax>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p>This directive enables operating system specific optimizations for a\n       listening socket by the <directive>Protocol</directive> type.\n       The basic premise is for the kernel to not send a socket to the server\n       process until either data is received or an entire HTTP Request is buffered.\n       Only <a href=\"http://www.freebsd.org/cgi/man.cgi?query=accept_filter&amp;sektion=9\">\n       FreeBSD's Accept Filters</a>, Linux's more primitive\n       <code>TCP_DEFER_ACCEPT</code>, and Windows' optimized AcceptEx()\n       are currently supported.</p>\n\n    <p>Using <code>none</code> for an argument will disable any accept filters\n       for that protocol.  This is useful for protocols that require a server\n       send data first, such as <code>ftp:</code> or <code>nntp</code>:</p>\n    <highlight language=\"config\">\nAcceptFilter nntp none\n    </highlight>\n\n    <p>The default protocol names are <code>https</code> for port 443\n       and <code>http</code> for all other ports.  To specify that another\n       protocol is being used with a listening port, add the <var>protocol</var>\n       argument to the <directive module=\"mpm_common\">Listen</directive>\n       directive.</p>\n\n    <p>The default values on FreeBSD are:</p>\n    <highlight language=\"config\">\nAcceptFilter http httpready\nAcceptFilter https dataready\n    </highlight>\n\n    <p>The <code>httpready</code> accept filter buffers entire HTTP requests at\n       the kernel level.  Once an entire request is received, the kernel then\n       sends it to the server. See the\n       <a href=\"http://www.freebsd.org/cgi/man.cgi?query=accf_http&amp;sektion=9\">\n       accf_http(9)</a> man page for more details.  Since HTTPS requests are\n       encrypted, only the <a href=\"http://www.freebsd.org/cgi/man.cgi?query=accf_data&amp;sektion=9\">\n       accf_data(9)</a> filter is used.</p>\n\n    <p>The default values on Linux are:</p>\n    <highlight language=\"config\">\nAcceptFilter http data\nAcceptFilter https data\n    </highlight>\n\n    <p>Linux's <code>TCP_DEFER_ACCEPT</code> does not support buffering http\n       requests.  Any value besides <code>none</code> will enable\n       <code>TCP_DEFER_ACCEPT</code> on that listener. For more details\n       see the Linux\n       <a href=\"http://man7.org/linux/man-pages/man7/tcp.7.html\">\n       tcp(7)</a> man page.</p>\n\n    <p>The default values on Windows are:</p>\n    <highlight language=\"config\">\nAcceptFilter http connect\nAcceptFilter https connect\n    </highlight>\n\n    <p>Window's mpm_winnt interprets the AcceptFilter to toggle the AcceptEx()\n       API, and does not support http protocol buffering. <code>connect</code>\n       will use the AcceptEx() API, also retrieve the network endpoint\n       addresses, but like <code>none</code> the <code>connect</code> option\n       does not wait for the initial data transmission.</p>\n\n    <p>On Windows, <code>none</code> uses accept() rather than AcceptEx()\n       and will not recycle sockets between connections.  This is useful for\n       network adapters with broken driver support, as well as some virtual\n       network providers such as vpn drivers, or spam, virus or spyware\n       filters.</p>\n\n    <note type=\"warning\">\n      <title>The <code>data</code> AcceptFilter (Windows)</title>\n\n      <p>For versions 2.4.23 and prior, the Windows <code>data</code> accept\n         filter waited until data had been transmitted and the initial data\n         buffer and network endpoint addresses had been retrieved from the\n         single AcceptEx() invocation. This implementation was subject to a\n         denial of service attack and has been disabled.</p>\n\n      <p>Current releases of httpd default to the <code>connect</code> filter\n         on Windows, and will fall back to <code>connect</code> if\n         <code>data</code> is specified. Users of prior releases are encouraged\n         to add an explicit setting of <code>connect</code> for their\n         AcceptFilter, as shown above.</p>\n    </note>\n\n</usage>\n<seealso><directive module=\"core\">Protocol</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AcceptPathInfo</name>\n<description>Resources accept trailing pathname information</description>\n<syntax>AcceptPathInfo On|Off|Default</syntax>\n<default>AcceptPathInfo Default</default>\n<contextlist><context>server config</context>\n<context>virtual host</context><context>directory</context>\n<context>.htaccess</context></contextlist>\n<override>FileInfo</override>\n\n<usage>\n\n    <p>This directive controls whether requests that contain trailing\n    pathname information that follows an actual filename (or\n    non-existent file in an existing directory) will be accepted or\n    rejected.  The trailing pathname information can be made\n    available to scripts in the <code>PATH_INFO</code> environment\n    variable.</p>\n\n    <p>For example, assume the location <code>/test/</code> points to\n    a directory that contains only the single file\n    <code>here.html</code>.  Then requests for\n    <code>/test/here.html/more</code> and\n    <code>/test/nothere.html/more</code> both collect\n    <code>/more</code> as <code>PATH_INFO</code>.</p>\n\n    <p>The three possible arguments for the\n    <directive>AcceptPathInfo</directive> directive are:</p>\n    <dl>\n    <dt><code>Off</code></dt><dd>A request will only be accepted if it\n    maps to a literal path that exists.  Therefore a request with\n    trailing pathname information after the true filename such as\n    <code>/test/here.html/more</code> in the above example will return\n    a 404 NOT FOUND error.</dd>\n\n    <dt><code>On</code></dt><dd>A request will be accepted if a\n    leading path component maps to a file that exists.  The above\n    example <code>/test/here.html/more</code> will be accepted if\n    <code>/test/here.html</code> maps to a valid file.</dd>\n\n    <dt><code>Default</code></dt><dd>The treatment of requests with\n    trailing pathname information is determined by the <a\n    href=\"../handler.html\">handler</a> responsible for the request.\n    The core handler for normal files defaults to rejecting\n    <code>PATH_INFO</code> requests. Handlers that serve scripts, such as <a\n    href=\"mod_cgi.html\">cgi-script</a> and <a\n    href=\"mod_isapi.html\">isapi-handler</a>, generally accept\n    <code>PATH_INFO</code> by default.</dd>\n    </dl>\n\n    <p>The primary purpose of the <code>AcceptPathInfo</code>\n    directive is to allow you to override the handler's choice of\n    accepting or rejecting <code>PATH_INFO</code>. This override is required,\n    for example, when you use a <a href=\"../filter.html\">filter</a>, such\n    as <a href=\"mod_include.html\">INCLUDES</a>, to generate content\n    based on <code>PATH_INFO</code>.  The core handler would usually reject\n    the request, so you can use the following configuration to enable\n    such a script:</p>\n\n    <highlight language=\"config\">\n&lt;Files \"mypaths.shtml\"&gt;\n  Options +Includes\n  SetOutputFilter INCLUDES\n  AcceptPathInfo On\n&lt;/Files&gt;\n    </highlight>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AccessFileName</name>\n<description>Name of the distributed configuration file</description>\n<syntax>AccessFileName <var>filename</var> [<var>filename</var>] ...</syntax>\n<default>AccessFileName .htaccess</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>While processing a request, the server looks for\n    the first existing configuration file from this list of names in\n    every directory of the path to the document, if distributed\n    configuration files are <a href=\"#allowoverride\">enabled for that\n    directory</a>. For example:</p>\n\n    <highlight language=\"config\">\nAccessFileName .acl\n    </highlight>\n\n    <p>Before returning the document\n    <code>/usr/local/web/index.html</code>, the server will read\n    <code>/.acl</code>, <code>/usr/.acl</code>,\n    <code>/usr/local/.acl</code> and <code>/usr/local/web/.acl</code>\n    for directives unless they have been disabled with:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/\"&gt;\n    AllowOverride None\n&lt;/Directory&gt;\n    </highlight>\n</usage>\n<seealso><directive module=\"core\">AllowOverride</directive></seealso>\n<seealso><a href=\"../configuring.html\">Configuration Files</a></seealso>\n<seealso><a href=\"../howto/htaccess.html\">.htaccess Files</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AddDefaultCharset</name>\n<description>Default charset parameter to be added when a response\ncontent-type is <code>text/plain</code> or <code>text/html</code></description>\n<syntax>AddDefaultCharset On|Off|<var>charset</var></syntax>\n<default>AddDefaultCharset Off</default>\n<contextlist><context>server config</context>\n<context>virtual host</context><context>directory</context>\n<context>.htaccess</context></contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>This directive specifies a default value for the media type\n    charset parameter (the name of a character encoding) to be added\n    to a response if and only if the response's content-type is either\n    <code>text/plain</code> or <code>text/html</code>.  This should override\n    any charset specified in the body of the response via a <code>META</code>\n    element, though the exact behavior is often dependent on the user's client\n    configuration. A setting of <code>AddDefaultCharset Off</code>\n    disables this functionality. <code>AddDefaultCharset On</code> enables\n    a default charset of <code>iso-8859-1</code>. Any other value is assumed\n    to be the <var>charset</var> to be used, which should be one of the\n    <a href=\"http://www.iana.org/assignments/character-sets\">IANA registered\n    charset values</a> for use in Internet media types (MIME types).\n    For example:</p>\n\n    <highlight language=\"config\">\nAddDefaultCharset utf-8\n    </highlight>\n\n    <p><directive>AddDefaultCharset</directive> should only be used when all\n    of the text resources to which it applies are known to be in that\n    character encoding and it is too inconvenient to label their charset\n    individually. One such example is to add the charset parameter\n    to resources containing generated content, such as legacy CGI\n    scripts, that might be vulnerable to cross-site scripting attacks\n    due to user-provided data being included in the output.  Note, however,\n    that a better solution is to just fix (or delete) those scripts, since\n    setting a default charset does not protect users that have enabled\n    the \"auto-detect character encoding\" feature on their browser.</p>\n</usage>\n<seealso><directive module=\"mod_mime\">AddCharset</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AllowEncodedSlashes</name>\n<description>Determines whether encoded path separators in URLs are allowed to\nbe passed through</description>\n<syntax>AllowEncodedSlashes On|Off|NoDecode</syntax>\n<default>AllowEncodedSlashes Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n<compatibility>\nNoDecode option available in 2.3.12 and later.</compatibility>\n\n<usage>\n    <p>The <directive>AllowEncodedSlashes</directive> directive allows URLs\n    which contain encoded path separators (<code>%2F</code> for <code>/</code>\n    and additionally <code>%5C</code> for <code>\\</code> on accordant systems)\n    to be used in the path info.</p>\n\n    <p>With the default value, <code>Off</code>, such URLs are refused\n    with a 404 (Not found) error.</p>\n\n    <p>With the value <code>On</code>, such URLs are accepted, and encoded\n      slashes are decoded like all other encoded characters.</p>\n\n    <p>With the value <code>NoDecode</code>, such URLs are accepted, but\n      encoded slashes are not decoded but left in their encoded state.</p>\n\n    <p>Turning <directive>AllowEncodedSlashes</directive> <code>On</code> is\n    mostly useful when used in conjunction with <code>PATH_INFO</code>.</p>\n\n    <note><title>Note</title>\n      <p>If encoded slashes are needed in path info, use of <code>NoDecode</code> is\n      strongly recommended as a security measure.  Allowing slashes\n      to be decoded could potentially allow unsafe paths.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">AcceptPathInfo</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AllowOverride</name>\n<description>Types of directives that are allowed in\n<code>.htaccess</code> files</description>\n<syntax>AllowOverride All|None|<var>directive-type</var>\n[<var>directive-type</var>] ...</syntax>\n<default>AllowOverride None (2.3.9 and later), AllowOverride All (2.3.8 and earlier)</default>\n<contextlist><context>directory</context></contextlist>\n\n<usage>\n    <p>When the server finds an <code>.htaccess</code> file (as\n    specified by <directive module=\"core\">AccessFileName</directive>),\n    it needs to know which directives declared in that file can override\n    earlier configuration directives.</p>\n\n    <note><title>Only available in &lt;Directory&gt; sections</title>\n    <directive>AllowOverride</directive> is valid only in\n    <directive type=\"section\" module=\"core\">Directory</directive>\n    sections specified without regular expressions, not in <directive\n    type=\"section\" module=\"core\">Location</directive>, <directive\n    module=\"core\" type=\"section\">DirectoryMatch</directive> or\n    <directive type=\"section\" module=\"core\">Files</directive> sections.\n    </note>\n\n    <p>When this directive is set to <code>None</code> and <directive\n    module=\"core\">AllowOverrideList</directive> is set to\n    <code>None</code>, <a href=\"#accessfilename\">.htaccess</a> files are\n    completely ignored. In this case, the server will not even attempt\n    to read <code>.htaccess</code> files in the filesystem.</p>\n\n    <p>When this directive is set to <code>All</code>, then any\n    directive which has the .htaccess <a\n    href=\"directive-dict.html#Context\">Context</a> is allowed in\n    <code>.htaccess</code> files.</p>\n\n    <p>The <var>directive-type</var> can be one of the following\n    groupings of directives. (See the <a href=\"overrides.html\">override class\n    index</a> for an up-to-date listing of which directives are enabled by each\n    <var>directive-type</var>.)</p>\n\n    <dl>\n      <dt><a href=\"overrides.html#override-authconfig\">AuthConfig</a></dt>\n\n      <dd>\n\n      Allow use of the authorization directives (<directive\n      module=\"mod_authz_dbm\">AuthDBMGroupFile</directive>,\n      <directive module=\"mod_authn_dbm\">AuthDBMUserFile</directive>,\n      <directive module=\"mod_authz_groupfile\">AuthGroupFile</directive>,\n      <directive module=\"mod_authn_core\">AuthName</directive>,\n      <directive module=\"mod_authn_core\">AuthType</directive>, <directive\n      module=\"mod_authn_file\">AuthUserFile</directive>, <directive\n      module=\"mod_authz_core\">Require</directive>, <em>etc.</em>).</dd>\n\n      <dt><a href=\"overrides.html#override-fileinfo\">FileInfo</a></dt>\n\n      <dd>\n      Allow use of the directives controlling document types\n     (<directive module=\"core\">ErrorDocument</directive>,\n      <directive module=\"core\">ForceType</directive>,\n      <directive module=\"mod_negotiation\">LanguagePriority</directive>,\n      <directive module=\"core\">SetHandler</directive>,\n      <directive module=\"core\">SetInputFilter</directive>,\n      <directive module=\"core\">SetOutputFilter</directive>, and\n      <module>mod_mime</module> Add* and Remove* directives),\n      document meta data (<directive\n      module=\"mod_headers\">Header</directive>, <directive\n      module=\"mod_headers\">RequestHeader</directive>, <directive\n      module=\"mod_setenvif\">SetEnvIf</directive>, <directive\n      module=\"mod_setenvif\">SetEnvIfNoCase</directive>, <directive\n      module=\"mod_setenvif\">BrowserMatch</directive>, <directive\n      module=\"mod_usertrack\">CookieExpires</directive>, <directive\n      module=\"mod_usertrack\">CookieDomain</directive>, <directive\n      module=\"mod_usertrack\">CookieStyle</directive>, <directive\n      module=\"mod_usertrack\">CookieTracking</directive>, <directive\n      module=\"mod_usertrack\">CookieName</directive>),\n      <module>mod_rewrite</module> directives (<directive\n      module=\"mod_rewrite\">RewriteEngine</directive>, <directive\n      module=\"mod_rewrite\">RewriteOptions</directive>, <directive\n      module=\"mod_rewrite\">RewriteBase</directive>, <directive\n      module=\"mod_rewrite\">RewriteCond</directive>, <directive\n      module=\"mod_rewrite\">RewriteRule</directive>),\n      <module>mod_alias</module> directives (<directive\n      module=\"mod_alias\">Redirect</directive>, <directive\n      module=\"mod_alias\">RedirectTemp</directive>, <directive\n      module=\"mod_alias\">RedirectPermanent</directive>, <directive\n      module=\"mod_alias\">RedirectMatch</directive>), and\n      <directive module=\"mod_actions\">Action</directive> from\n      <module>mod_actions</module>.\n      </dd>\n\n      <dt><a href=\"overrides.html#override-indexes\">Indexes</a></dt>\n\n      <dd>\n      Allow use of the directives controlling directory indexing\n      (<directive\n      module=\"mod_autoindex\">AddDescription</directive>,\n      <directive module=\"mod_autoindex\">AddIcon</directive>, <directive\n      module=\"mod_autoindex\">AddIconByEncoding</directive>,\n      <directive module=\"mod_autoindex\">AddIconByType</directive>,\n      <directive module=\"mod_autoindex\">DefaultIcon</directive>, <directive\n      module=\"mod_dir\">DirectoryIndex</directive>, <a href=\"mod_autoindex.html#indexoptions.fancyindexing\"\n      ><code>FancyIndexing</code></a>, <directive\n      module=\"mod_autoindex\">HeaderName</directive>, <directive\n      module=\"mod_autoindex\">IndexIgnore</directive>, <directive\n      module=\"mod_autoindex\">IndexOptions</directive>, <directive\n      module=\"mod_autoindex\">ReadmeName</directive>,\n      <em>etc.</em>).</dd>\n\n      <dt><a href=\"overrides.html#override-limit\">Limit</a></dt>\n\n      <dd>\n      Allow use of the directives controlling host access (<directive\n      module=\"mod_access_compat\">Allow</directive>, <directive\n      module=\"mod_access_compat\">Deny</directive> and <directive\n      module=\"mod_access_compat\">Order</directive>).</dd>\n\n      <dt>Nonfatal=[Override|Unknown|All]</dt>\n\n      <dd>\n      Allow use of AllowOverride option to treat syntax errors in\n      .htaccess as nonfatal. Instead of causing an Internal Server\n      Error, disallowed or unrecognised directives will be ignored\n      and a warning logged:\n      <ul>\n          <li><strong>Nonfatal=Override</strong> treats directives\n              forbidden by AllowOverride as nonfatal.</li>\n          <li><strong>Nonfatal=Unknown</strong> treats unknown directives\n              as nonfatal.  This covers typos and directives implemented\n              by a module that's not present.</li>\n          <li><strong>Nonfatal=All</strong> treats both the above as nonfatal.</li>\n      </ul>\n      <p>Note that a syntax error in a valid directive will still cause\n      an internal server error.</p>\n      <note type=\"warning\"><title>Security</title>\n          Nonfatal errors may have security implications for .htaccess users.\n          For example, if AllowOverride disallows AuthConfig, users'\n          configuration designed to restrict access to a site will be disabled.\n      </note>\n      </dd>\n\n      <dt><a href=\"overrides.html#override-options\">Options</a>[=<var>Option</var>,...]</dt>\n\n      <dd>\n      Allow use of the directives controlling specific directory\n      features (<directive module=\"core\">Options</directive> and\n      <directive module=\"mod_include\">XBitHack</directive>).\n      An equal sign may be given followed by a comma-separated list, without\n      spaces, of options that may be set using the <directive\n      module=\"core\">Options</directive> command.\n\n      <note><title>Implicit disabling of Options</title>\n      <p>Even though the list of options that may be used in .htaccess files\n         can be limited with this directive, as long as any <directive\n         module=\"core\">Options</directive> directive is allowed any\n         other inherited option can be disabled by using the non-relative\n         syntax.  In other words, this mechanism cannot force a specific option\n         to remain <em>set</em> while allowing any others to be set.\n      </p></note>\n\n      <example>\n      AllowOverride Options=Indexes,MultiViews\n      </example>\n      </dd>\n    </dl>\n\n    <p>Example:</p>\n\n    <highlight language=\"config\">\nAllowOverride AuthConfig Indexes\n    </highlight>\n\n    <p>In the example above, all directives that are neither in the group\n    <code>AuthConfig</code> nor <code>Indexes</code> cause an internal\n    server error.</p>\n\n    <note><p>For security and performance reasons, do not set\n    <code>AllowOverride</code> to anything other than <code>None</code>\n    in your <code>&lt;Directory \"/\"&gt;</code> block. Instead, find (or\n    create) the <code>&lt;Directory&gt;</code> block that refers to the\n    directory where you're actually planning to place a\n    <code>.htaccess</code> file.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">AccessFileName</directive></seealso>\n<seealso><directive module=\"core\">AllowOverrideList</directive></seealso>\n<seealso><a href=\"../configuring.html\">Configuration Files</a></seealso>\n<seealso><a href=\"../howto/htaccess.html\">.htaccess Files</a></seealso>\n<seealso><a href=\"overrides.html\">Override Class Index for .htaccess</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>AllowOverrideList</name>\n<description>Individual directives that are allowed in\n<code>.htaccess</code> files</description>\n<syntax>AllowOverrideList None|<var>directive</var>\n[<var>directive-type</var>] ...</syntax>\n<default>AllowOverrideList None</default>\n<contextlist><context>directory</context></contextlist>\n\n<usage>\n    <p>When the server finds an <code>.htaccess</code> file (as\n    specified by <directive module=\"core\">AccessFileName</directive>),\n    it needs to know which directives declared in that file can override\n    earlier configuration directives.</p>\n\n    <note><title>Only available in &lt;Directory&gt; sections</title>\n    <directive>AllowOverrideList</directive> is valid only in\n    <directive type=\"section\" module=\"core\">Directory</directive>\n    sections specified without regular expressions, not in <directive\n    type=\"section\" module=\"core\">Location</directive>, <directive\n    module=\"core\" type=\"section\">DirectoryMatch</directive> or\n    <directive type=\"section\" module=\"core\">Files</directive> sections.\n    </note>\n\n    <p>When this directive is set to <code>None</code> and <directive\n    module=\"core\">AllowOverride</directive> is set to <code>None</code>,\n    then <a href=\"#accessfilename\">.htaccess</a> files are completely\n    ignored.  In this case, the server will not even attempt to read\n    <code>.htaccess</code> files in the filesystem.</p>\n\n    <p>Example:</p>\n\n    <highlight language=\"config\">\nAllowOverride None\nAllowOverrideList Redirect RedirectMatch\n    </highlight>\n\n    <p>In the example above, only the <code>Redirect</code> and\n    <code>RedirectMatch</code> directives are allowed. All others will\n    cause an internal server error.</p>\n\n    <p>Example:</p>\n\n    <highlight language=\"config\">\nAllowOverride AuthConfig\nAllowOverrideList CookieTracking CookieName\n    </highlight>\n\n    <p>In the example above, <directive module=\"core\">AllowOverride\n    </directive> grants permission to the <code>AuthConfig</code>\n    directive grouping and <directive>AllowOverrideList</directive> grants\n    permission to only two directives from the <code>FileInfo</code> directive\n    grouping. All others will cause an internal server error.</p>\n</usage>\n\n<seealso><directive module=\"core\">AccessFileName</directive></seealso>\n<seealso><directive module=\"core\">AllowOverride</directive></seealso>\n<seealso><a href=\"../configuring.html\">Configuration Files</a></seealso>\n<seealso><a href=\"../howto/htaccess.html\">.htaccess Files</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>CGIMapExtension</name>\n<description>Technique for locating the interpreter for CGI\nscripts</description>\n<syntax>CGIMapExtension <var>cgi-path</var> <var>.extension</var></syntax>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>NetWare only</compatibility>\n\n<usage>\n    <p>This directive is used to control how Apache httpd finds the\n    interpreter used to run CGI scripts. For example, setting\n    <code>CGIMapExtension sys:\\foo.nlm .foo</code> will\n    cause all CGI script files with a <code>.foo</code> extension to\n    be passed to the FOO interpreter.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>CGIPassAuth</name>\n<description>Enables passing HTTP authorization headers to scripts as CGI\nvariables</description>\n<syntax>CGIPassAuth On|Off</syntax>\n<default>CGIPassAuth Off</default>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>AuthConfig</override>\n<compatibility>Available in Apache HTTP Server 2.4.13 and later</compatibility>\n\n<usage>\n    <p><directive>CGIPassAuth</directive> allows scripts access to HTTP\n    authorization headers such as <code>Authorization</code>, which is\n    required for scripts that implement HTTP Basic authentication.\n    Normally these HTTP headers are hidden from scripts. This is to disallow\n    scripts from seeing user ids and passwords used to access the server when\n    HTTP Basic authentication is enabled in the web server.  This directive\n    should be used when scripts are allowed to implement HTTP Basic\n    authentication.</p>\n\n    <p>This directive can be used instead of the compile-time setting\n    <code>SECURITY_HOLE_PASS_AUTHORIZATION</code> which has been available\n    in previous versions of Apache HTTP Server.</p>\n\n    <p>The setting is respected by any modules which use\n    <code>ap_add_common_vars()</code>, such as <module>mod_cgi</module>,\n    <module>mod_cgid</module>, <module>mod_proxy_fcgi</module>,\n    <module>mod_proxy_scgi</module>, and so on.  Notably, it affects\n    modules which don't handle the request in the usual sense but\n    still use this API; examples of this are <module>mod_include</module>\n    and <module>mod_ext_filter</module>.  Third-party modules that don't\n    use <code>ap_add_common_vars()</code> may choose to respect the setting\n    as well.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>CGIVar</name>\n<description>Controls how some CGI variables are set</description>\n<syntax>CGIVar <var>variable</var> <var>rule</var></syntax>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>Available in Apache HTTP Server 2.4.21 and later</compatibility>\n\n<usage>\n  <p>This directive controls how some CGI variables are set.</p>\n\n  <p><strong>REQUEST_URI</strong> rules:</p>\n  <dl>\n    <dt><code>original-uri</code> (default)</dt>\n    <dd>The value is taken from the original request line, and will not\n    reflect internal redirects or subrequests which change the requested\n    resource.</dd>\n    <dt><code>current-uri</code></dt>\n    <dd>The value reflects the resource currently being processed,\n    which may be different than the original request from the client\n    due to internal redirects or subrequests.</dd>\n  </dl>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ContentDigest</name>\n<description>Enables the generation of <code>Content-MD5</code> HTTP Response\nheaders</description>\n<syntax>ContentDigest On|Off</syntax>\n<default>ContentDigest Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>Options</override>\n<status>Experimental</status>\n\n<usage>\n    <p>This directive enables the generation of\n    <code>Content-MD5</code> headers as defined in RFC1864\n    respectively RFC2616.</p>\n\n    <p>MD5 is an algorithm for computing a \"message digest\"\n    (sometimes called \"fingerprint\") of arbitrary-length data, with\n    a high degree of confidence that any alterations in the data\n    will be reflected in alterations in the message digest.</p>\n\n    <p>The <code>Content-MD5</code> header provides an end-to-end\n    message integrity check (MIC) of the entity-body. A proxy or\n    client may check this header for detecting accidental\n    modification of the entity-body in transit. Example header:</p>\n\n    <example>\n      Content-MD5: AuLb7Dp1rqtRtxz2m9kRpA==\n    </example>\n\n    <p>Note that this can cause performance problems on your server\n    since the message digest is computed on every request (the\n    values are not cached).</p>\n\n    <p><code>Content-MD5</code> is only sent for documents served\n    by the <module>core</module>, and not by any module. For example,\n    SSI documents, output from CGI scripts, and byte range responses\n    do not have this header.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>DefaultRuntimeDir</name>\n<description>Base directory for the server run-time files</description>\n<syntax>DefaultRuntimeDir <var>directory-path</var></syntax>\n<default>DefaultRuntimeDir DEFAULT_REL_RUNTIMEDIR (logs/)</default>\n<contextlist><context>server config</context></contextlist>\n<compatibility>Available in Apache 2.4.2 and later</compatibility>\n\n<usage>\n    <p>The <directive>DefaultRuntimeDir</directive> directive sets the\n    directory in which the server will create various run-time files\n    (shared memory, locks, etc.). If set as a relative path, the full path\n    will be relative to <directive>ServerRoot</directive>.</p>\n\n    <p><strong>Example</strong></p>\n   <highlight language=\"config\">\nDefaultRuntimeDir scratch/\n    </highlight>\n\n    <p>The default location of <directive>DefaultRuntimeDir</directive> may be\n    modified by changing the <code>DEFAULT_REL_RUNTIMEDIR</code> #define\n    at build time.</p>\n\n   <p>Note: <directive>ServerRoot</directive> should be specified before this\n   directive is used. Otherwise, the default value of <directive>ServerRoot</directive>\n   would be used to set the base directory.</p>\n\n</usage>\n<seealso><a href=\"../misc/security_tips.html#serverroot\">the\n    security tips</a> for information on how to properly set\n    permissions on the <directive>ServerRoot</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>DefaultType</name>\n<description>This directive has no effect other than to emit warnings\nif the value is not <code>none</code>. In prior versions, DefaultType\nwould specify a default media type to assign to response content for\nwhich no other media type configuration could be found.\n</description>\n<syntax>DefaultType <var>media-type|none</var></syntax>\n<default>DefaultType none</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>The argument <code>none</code> is available in Apache httpd 2.2.7 and later.  All other choices are DISABLED for 2.3.x and later.</compatibility>\n\n<usage>\n    <p>This directive has been disabled.  For backwards compatibility\n    of configuration files, it may be specified with the value\n    <code>none</code>, meaning no default media type. For example:</p>\n\n    <highlight language=\"config\">\nDefaultType None\n    </highlight>\n\n    <p><code>DefaultType None</code> is only available in\n    httpd-2.2.7 and later.</p>\n\n    <p>Use the mime.types configuration file and the\n    <directive module=\"mod_mime\">AddType</directive> to configure media\n    type assignments via file extensions, or the\n    <directive module=\"core\">ForceType</directive> directive to configure\n    the media type for specific resources. Otherwise, the server will\n    send the response without a Content-Type header field and the\n    recipient may attempt to guess the media type.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Define</name>\n<description>Define a variable</description>\n<syntax>Define <var>parameter-name</var> [<var>parameter-value</var>]</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context></contextlist>\n\n<usage>\n    <p>In its one parameter form, <directive>Define</directive> is\n    equivalent to passing the <code>-D</code> argument to\n    <program>httpd</program>. It can be used to toggle the use of\n    <directive module=\"core\" type=\"section\">IfDefine</directive>\n    sections without needing to alter <code>-D</code> arguments in any\n    startup scripts.</p>\n\n    <p>In addition to that, if the second parameter is given, a config variable\n    is set to this value. The variable can be used in the configuration using\n    the <code>${VAR}</code> syntax. The variable is always globally defined\n    and not limited to the scope of the surrounding config section.</p>\n\n    <highlight language=\"config\">\n&lt;IfDefine TEST&gt;\n  Define servername test.example.com\n&lt;/IfDefine&gt;\n&lt;IfDefine !TEST&gt;\n  Define servername www.example.com\n  Define SSL\n&lt;/IfDefine&gt;\n\nDocumentRoot \"/var/www/${servername}/htdocs\"\n    </highlight>\n\n    <p>Variable names may not contain colon \":\" characters, to avoid clashes\n    with <directive module=\"mod_rewrite\">RewriteMap</directive>'s syntax.</p>\n\n    <note><title>Virtual Host scope and pitfalls</title>\n      <p>While this directive is supported in virtual host context,\n         the changes it makes are visible to any later configuration\n         directives, beyond any enclosing virtual host.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">UnDefine</directive></seealso>\n<seealso><directive module=\"core\">IfDefine</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>Directory</name>\n<description>Enclose a group of directives that apply only to the\nnamed file-system directory, sub-directories, and their contents.</description>\n<syntax>&lt;Directory <var>directory-path</var>&gt;\n... &lt;/Directory&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p><directive type=\"section\">Directory</directive> and\n    <code>&lt;/Directory&gt;</code> are used to enclose a group of\n    directives that will apply only to the named directory,\n    sub-directories of that directory, and the files within the respective\n    directories.  Any directive that is allowed\n    in a directory context may be used. <var>Directory-path</var> is\n    either the full path to a directory, or a wild-card string using\n    Unix shell-style matching. In a wild-card string, <code>?</code> matches\n    any single character, and <code>*</code> matches any sequences of\n    characters. You may also use <code>[]</code> character ranges. None\n    of the wildcards match a `/' character, so <code>&lt;Directory\n    \"/*/public_html\"&gt;</code> will not match\n    <code>/home/user/public_html</code>, but <code>&lt;Directory\n    \"/home/*/public_html\"&gt;</code> will match. Example:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/usr/local/httpd/htdocs\"&gt;\n  Options Indexes FollowSymLinks\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>Directory paths <em>may</em> be quoted, if you like, however, it\n    <em>must</em> be quoted if the path contains spaces. This is because a\n    space would otherwise indicate the end of an argument.</p>\n\n    <note>\n      <p>Be careful with the <var>directory-path</var> arguments:\n      They have to literally match the filesystem path which Apache httpd uses\n      to access the files. Directives applied to a particular\n      <code>&lt;Directory&gt;</code> will not apply to files accessed from\n      that same directory via a different path, such as via different symbolic\n      links.</p>\n    </note>\n\n    <p><glossary ref=\"regex\">Regular\n    expressions</glossary> can also be used, with the addition of the\n    <code>~</code> character. For example:</p>\n\n    <highlight language=\"config\">\n&lt;Directory ~ \"^/www/[0-9]{3}\"&gt;\n\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>would match directories in <code>/www/</code> that consisted of\n    three numbers.</p>\n\n    <p>If multiple (non-regular expression) <directive\n    type=\"section\">Directory</directive> sections\n    match the directory (or one of its parents) containing a document,\n    then the directives are applied in the order of shortest match\n    first, interspersed with the directives from the <a\n    href=\"#accessfilename\">.htaccess</a> files. For example,\n    with</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/\"&gt;\n  AllowOverride None\n&lt;/Directory&gt;\n\n&lt;Directory \"/home\"&gt;\n  AllowOverride FileInfo\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>for access to the document <code>/home/web/dir/doc.html</code>\n    the steps are:</p>\n\n    <ul>\n      <li>Apply directive <code>AllowOverride None</code>\n      (disabling <code>.htaccess</code> files).</li>\n\n      <li>Apply directive <code>AllowOverride FileInfo</code> (for\n      directory <code>/home</code>).</li>\n\n      <li>Apply any <code>FileInfo</code> directives in\n      <code>/home/.htaccess</code>, <code>/home/web/.htaccess</code> and\n      <code>/home/web/dir/.htaccess</code> in that order.</li>\n    </ul>\n\n    <p>Regular expressions are not considered until after all of the\n    normal sections have been applied. Then all of the regular\n    expressions are tested in the order they appeared in the\n    configuration file. For example, with</p>\n\n    <highlight language=\"config\">\n&lt;Directory ~ \"abc$\"&gt;\n  # ... directives here ...\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>the regular expression section won't be considered until after\n    all normal <directive type=\"section\">Directory</directive>s and\n    <code>.htaccess</code> files have been applied. Then the regular\n    expression will match on <code>/home/abc/public_html/abc</code> and\n    the corresponding <directive type=\"section\">Directory</directive> will\n    be applied.</p>\n\n   <p><strong>Note that the default access for\n    <code>&lt;Directory \"/\"&gt;</code> is to permit all access.\n    This means that Apache httpd will serve any file mapped from an URL. It is\n    recommended that you change this with a block such\n    as</strong></p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/\"&gt;\n  Require all denied\n&lt;/Directory&gt;\n    </highlight>\n\n    <p><strong>and then override this for directories you\n    <em>want</em> accessible. See the <a\n    href=\"../misc/security_tips.html\">Security Tips</a> page for more\n    details.</strong></p>\n\n    <p>The directory sections occur in the <code>httpd.conf</code> file.\n    <directive type=\"section\">Directory</directive> directives\n    cannot nest, and cannot appear in a <directive module=\"core\"\n    type=\"section\">Limit</directive> or <directive module=\"core\"\n    type=\"section\">LimitExcept</directive> section.</p>\n</usage>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;,\n    &lt;Location&gt; and &lt;Files&gt; sections work</a> for an\n    explanation of how these different sections are combined when a\n    request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>DirectoryMatch</name>\n<description>Enclose directives that apply to\nthe contents of file-system directories matching a regular expression.</description>\n<syntax>&lt;DirectoryMatch <var>regex</var>&gt;\n... &lt;/DirectoryMatch&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p><directive type=\"section\">DirectoryMatch</directive> and\n    <code>&lt;/DirectoryMatch&gt;</code> are used to enclose a group\n    of directives which will apply only to the named directory (and the files within),\n    the same as <directive module=\"core\" type=\"section\">Directory</directive>.\n    However, it takes as an argument a\n    <glossary ref=\"regex\">regular expression</glossary>.  For example:</p>\n\n    <highlight language=\"config\">\n&lt;DirectoryMatch \"^/www/(.+/)?[0-9]{3}/\"&gt;\n    # ...\n&lt;/DirectoryMatch&gt;\n    </highlight>\n\n    <p>matches directories in <code>/www/</code> (or any subdirectory thereof)\n    that consist of three numbers.</p>\n\n   <note><title>Compatibility</title>\n      Prior to 2.3.9, this directive implicitly applied to sub-directories\n      (like <directive module=\"core\" type=\"section\">Directory</directive>) and\n      could not match the end of line symbol ($).  In 2.3.9 and later,\n      only directories that match the expression are affected by the enclosed\n      directives.\n    </note>\n\n    <note><title>Trailing Slash</title>\n      This directive applies to requests for directories that may or may\n      not end in a trailing slash, so expressions that are anchored to the\n      end of line ($) must be written with care.\n    </note>\n\n    <p>From 2.4.8 onwards, named groups and backreferences are captured and\n    written to the environment with the corresponding name prefixed with\n    \"MATCH_\" and in upper case. This allows elements of paths to be referenced\n    from within <a href=\"../expr.html\">expressions</a> and modules like\n    <module>mod_rewrite</module>. In order to prevent confusion, numbered\n    (unnamed) backreferences are ignored. Use named groups instead.</p>\n\n    <highlight language=\"config\">\n&lt;DirectoryMatch \"^/var/www/combined/(?&lt;sitename&gt;[^/]+)\"&gt;\n    Require ldap-group cn=%{env:MATCH_SITENAME},ou=combined,o=Example\n&lt;/DirectoryMatch&gt;\n    </highlight>\n</usage>\n<seealso><directive type=\"section\" module=\"core\">Directory</directive> for\na description of how regular expressions are mixed in with normal\n<directive type=\"section\">Directory</directive>s</seealso>\n<seealso><a\nhref=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt; and\n&lt;Files&gt; sections work</a> for an explanation of how these different\nsections are combined when a request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>DocumentRoot</name>\n<description>Directory that forms the main document tree visible\nfrom the web</description>\n<syntax>DocumentRoot <var>directory-path</var></syntax>\n<default>DocumentRoot \"/usr/local/apache/htdocs\"</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>This directive sets the directory from which <program>httpd</program>\n    will serve files. Unless matched by a directive like <directive\n    module=\"mod_alias\">Alias</directive>, the server appends the\n    path from the requested URL to the document root to make the\n    path to the document. Example:</p>\n\n    <highlight language=\"config\">\nDocumentRoot \"/usr/web\"\n    </highlight>\n\n    <p>then an access to\n    <code>http://my.example.com/index.html</code> refers to\n    <code>/usr/web/index.html</code>. If the <var>directory-path</var> is\n    not absolute then it is assumed to be relative to the <directive\n    module=\"core\">ServerRoot</directive>.</p>\n\n    <p>The <directive>DocumentRoot</directive> should be specified without\n    a trailing slash.</p>\n</usage>\n<seealso><a href=\"../urlmapping.html#documentroot\">Mapping URLs to Filesystem\nLocations</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>Else</name>\n<description>Contains directives that apply only if the condition of a\nprevious <directive type=\"section\" module=\"core\">If</directive> or\n<directive type=\"section\" module=\"core\">ElseIf</directive> section is not\nsatisfied by a request at runtime</description>\n<syntax>&lt;Else&gt; ... &lt;/Else&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Nested conditions are evaluated in 2.4.26 and later</compatibility>\n\n<usage>\n    <p>The <directive type=\"section\">Else</directive> applies the enclosed\n    directives if and only if the most recent\n    <directive type=\"section\">If</directive> or\n    <directive type=\"section\">ElseIf</directive> section\n    in the same scope has not been applied.\n    For example: In </p>\n\n    <highlight language=\"config\">\n&lt;If \"-z req('Host')\"&gt;\n  # ...\n&lt;/If&gt;\n&lt;Else&gt;\n  # ...\n&lt;/Else&gt;\n    </highlight>\n\n    <p> The <directive type=\"section\">If</directive> would match HTTP/1.0\n        requests without a <var>Host:</var> header and the\n        <directive type=\"section\">Else</directive> would match requests\n        with a <var>Host:</var> header.</p>\n\n</usage>\n<seealso><directive type=\"section\" module=\"core\">If</directive></seealso>\n<seealso><directive type=\"section\" module=\"core\">ElseIf</directive></seealso>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;,\n    &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received.\n    <directive type=\"section\">If</directive>,\n    <directive type=\"section\">ElseIf</directive>, and\n    <directive type=\"section\">Else</directive> are applied last.</seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>ElseIf</name>\n<description>Contains directives that apply only if a condition is satisfied\nby a request at runtime while the condition of a previous\n<directive type=\"section\" module=\"core\">If</directive> or\n<directive type=\"section\">ElseIf</directive> section is not\nsatisfied</description>\n<syntax>&lt;ElseIf <var>expression</var>&gt; ... &lt;/ElseIf&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Nested conditions are evaluated in 2.4.26 and later</compatibility>\n\n<usage>\n    <p>The <directive type=\"section\">ElseIf</directive> applies the enclosed\n    directives if and only if both the given condition evaluates to true and\n    the most recent <directive type=\"section\">If</directive> or\n    <directive type=\"section\">ElseIf</directive> section in the same scope has\n    not been applied.  For example: In </p>\n\n    <highlight language=\"config\">\n&lt;If \"-R '10.1.0.0/16'\"&gt;\n  #...\n&lt;/If&gt;\n&lt;ElseIf \"-R '10.0.0.0/8'\"&gt;\n  #...\n&lt;/ElseIf&gt;\n&lt;Else&gt;\n  #...\n&lt;/Else&gt;\n    </highlight>\n\n    <p>The <directive type=\"section\">ElseIf</directive> would match if\n    the remote address of a request belongs to the subnet 10.0.0.0/8 but\n    not to the subnet 10.1.0.0/16.</p>\n\n</usage>\n<seealso><a href=\"../expr.html\">Expressions in Apache HTTP Server</a>,\nfor a complete reference and more examples.</seealso>\n<seealso><directive type=\"section\" module=\"core\">If</directive></seealso>\n<seealso><directive type=\"section\" module=\"core\">Else</directive></seealso>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;,\n    &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received.\n    <directive type=\"section\">If</directive>,\n    <directive type=\"section\">ElseIf</directive>, and\n    <directive type=\"section\">Else</directive> are applied last.</seealso>\n</directivesynopsis>\n\n\n\n<directivesynopsis>\n<name>EnableMMAP</name>\n<description>Use memory-mapping to read files during delivery</description>\n<syntax>EnableMMAP On|Off</syntax>\n<default>EnableMMAP On</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>This directive controls whether the <program>httpd</program> may use\n    memory-mapping if it needs to read the contents of a file during\n    delivery.  By default, when the handling of a request requires\n    access to the data within a file -- for example, when delivering a\n    server-parsed file using <module>mod_include</module> -- Apache httpd\n    memory-maps the file if the OS supports it.</p>\n\n    <p>This memory-mapping sometimes yields a performance improvement.\n    But in some environments, it is better to disable the memory-mapping\n    to prevent operational problems:</p>\n\n    <ul>\n    <li>On some multiprocessor systems, memory-mapping can reduce the\n    performance of the <program>httpd</program>.</li>\n    <li>Deleting or truncating a file while <program>httpd</program>\n      has it memory-mapped can cause <program>httpd</program> to\n      crash with a segmentation fault.\n    </li>\n    </ul>\n\n    <p>For server configurations that are vulnerable to these problems,\n    you should disable memory-mapping of delivered files by specifying:</p>\n\n    <highlight language=\"config\">\nEnableMMAP Off\n    </highlight>\n\n    <p>For NFS mounted files, this feature may be disabled explicitly for\n    the offending files by specifying:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/path-to-nfs-files\"&gt;\n  EnableMMAP Off\n&lt;/Directory&gt;\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>EnableSendfile</name>\n<description>Use the kernel sendfile support to deliver files to the client</description>\n<syntax>EnableSendfile On|Off</syntax>\n<default>EnableSendfile Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>Default changed to Off in\nversion 2.3.9.</compatibility>\n\n<usage>\n    <p>This directive controls whether <program>httpd</program> may use the\n    sendfile support from the kernel to transmit file contents to the client.\n    By default, when the handling of a request requires no access\n    to the data within a file -- for example, when delivering a\n    static file -- Apache httpd uses sendfile to deliver the file contents\n    without ever reading the file if the OS supports it.</p>\n\n    <p>This sendfile mechanism avoids separate read and send operations,\n    and buffer allocations. But on some platforms or within some\n    filesystems, it is better to disable this feature to avoid\n    operational problems:</p>\n\n    <ul>\n    <li>Some platforms may have broken sendfile support that the build\n    system did not detect, especially if the binaries were built on\n    another box and moved to such a machine with broken sendfile\n    support.</li>\n    <li>On Linux the use of sendfile triggers TCP-checksum\n    offloading bugs on certain networking cards when using IPv6.</li>\n    <li>On Linux on Itanium, <code>sendfile</code> may be unable to handle\n    files over 2GB in size.</li>\n    <li>With a network-mounted <directive\n    module=\"core\">DocumentRoot</directive> (e.g., NFS, SMB, CIFS, FUSE),\n    the kernel may be unable to serve the network file through\n    its own cache.</li>\n    </ul>\n\n    <p>For server configurations that are not vulnerable to these problems,\n    you may enable this feature by specifying:</p>\n\n    <highlight language=\"config\">\nEnableSendfile On\n    </highlight>\n\n    <p>For network mounted files, this feature may be disabled explicitly\n    for the offending files by specifying:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/path-to-nfs-files\"&gt;\n  EnableSendfile Off\n&lt;/Directory&gt;\n    </highlight>\n    <p>Please note that the per-directory and .htaccess configuration\n       of <directive>EnableSendfile</directive> is not supported by\n       <module>mod_cache_disk</module>.\n       Only global definition of <directive>EnableSendfile</directive>\n       is taken into account by the module.\n    </p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>HttpProtocolOptions</name>\n<description>Modify restrictions on HTTP Request Messages</description>\n<syntax>HttpProtocolOptions [Strict|Unsafe] [RegisteredMethods|LenientMethods]\n [Allow0.9|Require1.0]</syntax>\n<default>HttpProtocolOptions Strict LenientMethods Allow0.9</default>\n<contextlist><context>server config</context>\n<context>virtual host</context></contextlist>\n<compatibility>2.2.32 or 2.4.24 and later</compatibility>\n\n<usage>\n    <p>This directive changes the rules applied to the HTTP Request Line\n    (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.1.1\"\n      >RFC 7230 &sect;3.1.1</a>) and the HTTP Request Header Fields\n    (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\"\n      >RFC 7230 &sect;3.2</a>), which are now applied by default or using\n    the <code>Strict</code> option. Due to legacy modules, applications or\n    custom user-agents which must be deprecated the <code>Unsafe</code>\n    option has been added to revert to the legacy behaviors.</p>\n\n    <p>These rules are applied prior to request processing,\n    so must be configured at the global or default (first) matching\n    virtual host section, by IP/port interface (and not by name)\n    to be honored.</p>\n\n    <p>The directive accepts three parameters from the following list\n       of choices, applying the default to the ones not specified:</p>\n\n    <dl>\n    <dt>Strict|Unsafe</dt>\n    <dd>\n      <p>Prior to the introduction of this directive, the Apache HTTP Server\n      request message parsers were tolerant of a number of forms of input\n      which did not conform to the protocol.\n      <a href=\"https://tools.ietf.org/html/rfc7230#section-9.4\"\n        >RFC 7230 &sect;9.4 Request Splitting</a> and\n      <a href=\"https://tools.ietf.org/html/rfc7230#section-9.5\"\n        >&sect;9.5 Response Smuggling</a> call out only two of the potential\n      risks of accepting non-conformant request messages, while\n      <a href=\"https://tools.ietf.org/html/rfc7230#section-3.5\"\n           >RFC 7230 &sect;3.5</a> \"Message Parsing Robustness\" identify the\n      risks of accepting obscure whitespace and request message formatting. \n      As of the introduction of this directive, all grammar rules of the\n      specification are enforced in the default <code>Strict</code> operating\n      mode, and the strict whitespace suggested by section 3.5 is enforced\n      and cannot be relaxed.</p>\n\n      <note type=\"warning\"><title>Security risks of Unsafe</title>\n        <p>Users are strongly cautioned against toggling the <code>Unsafe</code>\n        mode of operation, particularly on outward-facing, publicly accessible\n        server deployments.  If an interface is required for faulty monitoring\n        or other custom service consumers running on an intranet, users should\n        toggle the Unsafe option only on a specific virtual host configured\n        to service their internal private network.</p>\n      </note>\n\n      <example>\n        <title>Example of a request leading to HTTP 400 with Strict mode</title>\n        # Missing CRLF<br />\n        GET / HTTP/1.0\\n\\n\n      </example>\n      <note type=\"warning\"><title>Command line tools and CRLF</title>\n        <p>Some tools need to be forced to use CRLF, otherwise httpd will return\n        a HTTP 400 response like described in the above use case. For example,\n        the <strong>OpenSSL s_client needs the -crlf parameter to work\n        properly</strong>.</p>\n        <p>The <directive module=\"mod_dumpio\">DumpIOInput</directive> directive\n        can help while reviewing the HTTP request to identify issues like the\n        absence of CRLF.</p>\n      </note>\n    </dd>\n    <dt>RegisteredMethods|LenientMethods</dt>\n    <dd>\n      <p><a href=\"https://tools.ietf.org/html/rfc7231#section-4.1\"\n           >RFC 7231 &sect;4.1</a> \"Request Methods\" \"Overview\" requires that\n      origin servers shall respond with a HTTP 501 status code when an\n      unsupported method is encountered in the request line.\n      This already happens when the <code>LenientMethods</code> option is used,\n      but administrators may wish to toggle the <code>RegisteredMethods</code>\n      option and register any non-standard methods using the\n      <directive module=\"core\">RegisterHttpMethod</directive>\n      directive, particularly if the <code>Unsafe</code>\n      option has been toggled.</p>\n\n      <note type=\"warning\"><title>Forward Proxy compatibility</title>\n        <p>The <code>RegisteredMethods</code> option should <strong>not</strong>\n        be toggled for forward proxy hosts, as the methods supported by the\n        origin servers are unknown to the proxy server.</p>\n      </note>\n\n      <example>\n        <title>Example of a request leading to HTTP 501 with LenientMethods mode</title>\n        # Unknown HTTP method<br />\n        WOW / HTTP/1.0\\r\\n\\r\\n<br /><br />\n        # Lowercase HTTP method<br />\n        get / HTTP/1.0\\r\\n\\r\\n<br />\n      </example>\n      </dd>\n      <dt>Allow0.9|Require1.0</dt>\n      <dd>\n      <p><a href=\"https://tools.ietf.org/html/rfc2616#section-19.6\"\n           >RFC 2616 &sect;19.6</a> \"Compatibility With Previous Versions\" had\n      encouraged HTTP servers to support legacy HTTP/0.9 requests. RFC 7230\n      supersedes this with \"The expectation to support HTTP/0.9 requests has\n      been removed\" and offers additional comments in \n      <a href=\"https://tools.ietf.org/html/rfc7230#appendix-A\"\n        >RFC 7230 Appendix A</a>. The <code>Require1.0</code> option allows\n      the user to remove support of the default <code>Allow0.9</code> option's\n      behavior.</p>\n\n      <example>\n        <title>Example of a request leading to HTTP 400 with Require1.0 mode</title>\n        # Unsupported HTTP version<br />\n        GET /\\r\\n\\r\\n\n      </example>\n    </dd>\n    </dl>\n    <p>Reviewing the messages logged to the\n    <directive module=\"core\">ErrorLog</directive>, configured with\n    <directive module=\"core\">LogLevel</directive> <code>debug</code> level,\n    can help identify such faulty requests along with their origin.\n    Users should pay particular attention to the 400 responses in the access\n    log for invalid requests which were unexpectedly rejected.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Error</name>\n<description>Abort configuration parsing with a custom error message</description>\n<syntax>Error <var>message</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<compatibility>2.3.9 and later</compatibility>\n\n<usage>\n    <p>If an error can be detected within the configuration, this\n    directive can be used to generate a custom error message, and halt\n    configuration parsing.  The typical use is for reporting required\n    modules which are missing from the configuration.</p>\n\n    <highlight language=\"config\">\n# Example\n# ensure that mod_include is loaded\n&lt;IfModule !include_module&gt;\n  Error \"mod_include is required by mod_foo.  Load it with LoadModule.\"\n&lt;/IfModule&gt;\n\n# ensure that exactly one of SSL,NOSSL is defined\n&lt;IfDefine SSL&gt;\n&lt;IfDefine NOSSL&gt;\n  Error \"Both SSL and NOSSL are defined.  Define only one of them.\"\n&lt;/IfDefine&gt;\n&lt;/IfDefine&gt;\n&lt;IfDefine !SSL&gt;\n&lt;IfDefine !NOSSL&gt;\n  Error \"Either SSL or NOSSL must be defined.\"\n&lt;/IfDefine&gt;\n&lt;/IfDefine&gt;\n    </highlight>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ErrorDocument</name>\n<description>What the server will return to the client\nin case of an error</description>\n<syntax>ErrorDocument <var>error-code</var> <var>document</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>In the event of a problem or error, Apache httpd can be configured\n    to do one of four things,</p>\n\n    <ol>\n      <li>output a simple hardcoded error message</li>\n\n      <li>output a customized message</li>\n\n      <li>internally redirect to a local <var>URL-path</var> to handle the\n      problem/error</li>\n\n      <li>redirect to an external <var>URL</var> to handle the\n      problem/error</li>\n    </ol>\n\n    <p>The first option is the default, while options 2-4 are\n    configured using the <directive>ErrorDocument</directive>\n    directive, which is followed by the HTTP response code and a URL\n    or a message. Apache httpd will sometimes offer additional information\n    regarding the problem/error.</p>\n\n    <p>From 2.4.13, <a href=\"../expr.html\">expression syntax</a> can be\n    used inside the directive to produce dynamic strings and URLs.</p>\n\n    <p>URLs can begin with a slash (/) for local web-paths (relative\n    to the <directive module=\"core\">DocumentRoot</directive>), or be a\n    full URL which the client can resolve. Alternatively, a message\n    can be provided to be displayed by the browser. Note that deciding\n    whether the parameter is an URL, a path or a message is performed\n    before any expression is parsed. Examples:</p>\n\n    <highlight language=\"config\">\nErrorDocument 500 http://example.com/cgi-bin/server-error.cgi\nErrorDocument 404 /errors/bad_urls.php\nErrorDocument 401 /subscription_info.html\nErrorDocument 403 \"Sorry, can't allow you access today\"\nErrorDocument 403 Forbidden!\nErrorDocument 403 /errors/forbidden.py?referrer=%{escape:%{HTTP_REFERER}}\n    </highlight>\n\n    <p>Additionally, the special value <code>default</code> can be used\n    to specify Apache httpd's simple hardcoded message.  While not required\n    under normal circumstances, <code>default</code> will restore\n    Apache httpd's simple hardcoded message for configurations that would\n    otherwise inherit an existing <directive>ErrorDocument</directive>.</p>\n\n    <highlight language=\"config\">\nErrorDocument 404 /cgi-bin/bad_urls.pl\n\n&lt;Directory \"/web/docs\"&gt;\n  ErrorDocument 404 default\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>Note that when you specify an <directive>ErrorDocument</directive>\n    that points to a remote URL (ie. anything with a method such as\n    <code>http</code> in front of it), Apache HTTP Server will send a redirect to the\n    client to tell it where to find the document, even if the\n    document ends up being on the same server. This has several\n    implications, the most important being that the client will not\n    receive the original error status code, but instead will\n    receive a redirect status code. This in turn can confuse web\n    robots and other clients which try to determine if a URL is\n    valid using the status code. In addition, if you use a remote\n    URL in an <code>ErrorDocument 401</code>, the client will not\n    know to prompt the user for a password since it will not\n    receive the 401 status code. Therefore, <strong>if you use an\n    <code>ErrorDocument 401</code> directive, then it must refer to a local\n    document.</strong></p>\n\n    <p>Microsoft Internet Explorer (MSIE) will by default ignore\n    server-generated error messages when they are \"too small\" and substitute\n    its own \"friendly\" error messages. The size threshold varies depending on\n    the type of error, but in general, if you make your error document\n    greater than 512 bytes, then MSIE will show the server-generated\n    error rather than masking it.  More information is available in\n    Microsoft Knowledge Base article <a\n    href=\"http://support.microsoft.com/default.aspx?scid=kb;en-us;Q294807\"\n    >Q294807</a>.</p>\n\n    <p>Although most error messages can be overridden, there are certain\n    circumstances where the internal messages are used regardless of the\n    setting of <directive module=\"core\">ErrorDocument</directive>.  In\n    particular, if a malformed request is detected, normal request processing\n    will be immediately halted and the internal error message returned.\n    This is necessary to guard against security problems caused by\n    bad requests.</p>\n\n    <p>If you are using mod_proxy, you may wish to enable\n    <directive module=\"mod_proxy\">ProxyErrorOverride</directive> so that you can provide\n    custom error messages on behalf of your Origin servers. If you don't enable ProxyErrorOverride,\n    Apache httpd will not generate custom error documents for proxied content.</p>\n</usage>\n\n<seealso><a href=\"../custom-error.html\">documentation of\n    customizable responses</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ErrorLog</name>\n<description>Location where the server will log errors</description>\n<syntax> ErrorLog <var>file-path</var>|syslog[:[<var>facility</var>][:<var>tag</var>]]</syntax>\n<default>ErrorLog logs/error_log (Unix) ErrorLog logs/error.log (Windows and OS/2)</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive>ErrorLog</directive> directive sets the name of\n    the file to which the server will log any errors it encounters. If\n    the <var>file-path</var> is not absolute then it is assumed to be\n    relative to the <directive module=\"core\">ServerRoot</directive>.</p>\n\n    <highlight language=\"config\">\nErrorLog \"/var/log/httpd/error_log\"\n    </highlight>\n\n    <p>If the <var>file-path</var>\n    begins with a pipe character \"<code>|</code>\" then it is assumed to be a\n    command to spawn to handle the error log.</p>\n\n    <highlight language=\"config\">\nErrorLog \"|/usr/local/bin/httpd_errors\"\n    </highlight>\n\n    <p>See the notes on <a href=\"../logs.html#piped\">piped logs</a> for\n    more information.</p>\n\n    <p>Using <code>syslog</code> instead of a filename enables logging\n    via syslogd(8) if the system supports it. The default is to use\n    syslog facility <code>local7</code>, but you can override this by\n    using the <code>syslog:<var>facility</var></code> syntax where\n    <var>facility</var> can be one of the names usually documented in\n    syslog(1).  The facility is effectively global, and if it is changed\n    in individual virtual hosts, the final facility specified affects the\n    entire server. Same rules apply for the syslog tag, which by default\n    uses the Apache binary name, <code>httpd</code> in most cases. You can\n    also override this by using the <code>syslog::<var>tag</var></code>\n    syntax.</p>\n\n    <highlight language=\"config\">\nErrorLog syslog:user\nErrorLog syslog:user:httpd.srv1\nErrorLog syslog::httpd.srv2\n    </highlight>\n\n    <p>SECURITY: See the <a\n    href=\"../misc/security_tips.html#serverroot\">security tips</a>\n    document for details on why your security could be compromised\n    if the directory where log files are stored is writable by\n    anyone other than the user that starts the server.</p>\n    <note type=\"warning\"><title>Note</title>\n      <p>When entering a file path on non-Unix platforms, care should be taken\n      to make sure that only forward slashes are used even though the platform\n      may allow the use of back slashes. In general it is a good idea to always\n      use forward slashes throughout the configuration files.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">LogLevel</directive></seealso>\n<seealso><a href=\"../logs.html\">Apache HTTP Server Log Files</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ErrorLogFormat</name>\n<description>Format specification for error log entries</description>\n<syntax> ErrorLogFormat [connection|request] <var>format</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p><directive>ErrorLogFormat</directive> allows to specify what\n    supplementary information is logged in the error log in addition to the\n    actual log message.</p>\n\n    <highlight language=\"config\">\n#Simple example\nErrorLogFormat \"[%t] [%l] [pid %P] %F: %E: [client %a] %M\"\n    </highlight>\n\n    <p>Specifying <code>connection</code> or <code>request</code> as first\n    parameter allows to specify additional formats, causing additional\n    information to be logged when the first message is logged for a specific\n    connection or request, respectively. This additional information is only\n    logged once per connection/request. If a connection or request is processed\n    without causing any log message, the additional information is not logged\n    either.</p>\n\n    <p>It can happen that some format string items do not produce output.  For\n    example, the Referer header is only present if the log message is\n    associated to a request and the log message happens at a time when the\n    Referer header has already been read from the client.  If no output is\n    produced, the default behavior is to delete everything from the preceding\n    space character to the next space character.  This means the log line is\n    implicitly divided into fields on non-whitespace to whitespace transitions.\n    If a format string item does not produce output, the whole field is\n    omitted.  For example, if the remote address <code>%a</code> in the log\n    format <code>[%t] [%l] [%a] %M&nbsp;</code> is not available, the surrounding\n    brackets are not logged either.  Space characters can be escaped with a\n    backslash to prevent them from delimiting a field.  The combination '%&nbsp;'\n    (percent space) is a zero-width field delimiter that does not produce any\n    output.</p>\n\n    <p>The above behavior can be changed by adding modifiers to the format\n    string item. A <code>-</code> (minus) modifier causes a minus to be logged if the\n    respective item does not produce any output. In once-per-connection/request\n    formats, it is also possible to use the <code>+</code> (plus) modifier. If an\n    item with the plus modifier does not produce any output, the whole line is\n    omitted.</p>\n\n    <p>A number as modifier can be used to assign a log severity level to a\n    format item. The item will only be logged if the severity of the log\n    message is not higher than the specified log severity level. The number can\n    range from 1 (alert) over 4 (warn) and 7 (debug) to 15 (trace8).</p>\n\n    <p>For example, here's what would happen if you added modifiers to\n    the <code>%{Referer}i</code> token, which logs the\n    <code>Referer</code> request header.</p>\n\n    <table border=\"1\" style=\"zebra\">\n    <columnspec><column width=\".3\"/><column width=\".7\"/></columnspec>\n\n    <tr><th>Modified Token</th><th>Meaning</th></tr>\n\n    <tr>\n    <td><code>%-{Referer}i</code></td>\n    <td>Logs a <code>-</code> if <code>Referer</code> is not set.</td>\n    </tr>\n\n    <tr>\n    <td><code>%+{Referer}i</code></td>\n    <td>Omits the entire line if <code>Referer</code> is not set.</td>\n    </tr>\n\n    <tr>\n    <td><code>%4{Referer}i</code></td>\n    <td>Logs the <code>Referer</code> only if the log message severity\n    is higher than 4.</td>\n    </tr>\n\n    </table>\n\n    <p>Some format string items accept additional parameters in braces.</p>\n\n    <table border=\"1\" style=\"zebra\">\n    <columnspec><column width=\".2\"/><column width=\".8\"/></columnspec>\n\n    <tr><th>Format&nbsp;String</th> <th>Description</th></tr>\n\n    <tr><td><code>%%</code></td>\n        <td>The percent sign</td></tr>\n\n    <tr><td><code>%a</code></td>\n        <td>Client IP address and port of the request</td></tr>\n\n    <tr><td><code>%{c}a</code></td>\n        <td>Underlying peer IP address and port of the connection (see the\n            <module>mod_remoteip</module> module)</td></tr>\n\n    <tr><td><code>%A</code></td>\n        <td>Local IP-address and port</td></tr>\n\n    <tr><td><code>%{<em>name</em>}e</code></td>\n        <td>Request environment variable <em>name</em></td></tr>\n\n    <tr><td><code>%E</code></td>\n        <td>APR/OS error status code and string</td></tr>\n\n    <tr><td><code>%F</code></td>\n        <td>Source file name and line number of the log call</td></tr>\n\n    <tr><td><code>%{<em>name</em>}i</code></td>\n        <td>Request header <em>name</em></td></tr>\n\n    <tr><td><code>%k</code></td>\n        <td>Number of keep-alive requests on this connection</td></tr>\n\n    <tr><td><code>%l</code></td>\n        <td>Loglevel of the message</td></tr>\n\n    <tr><td><code>%L</code></td>\n        <td>Log ID of the request</td></tr>\n\n    <tr><td><code>%{c}L</code></td>\n        <td>Log ID of the connection</td></tr>\n\n    <tr><td><code>%{C}L</code></td>\n        <td>Log ID of the connection if used in connection scope, empty otherwise</td></tr>\n\n    <tr><td><code>%m</code></td>\n        <td>Name of the module logging the message</td></tr>\n\n    <tr><td><code>%M</code></td>\n        <td>The actual log message</td></tr>\n\n    <tr><td><code>%{<em>name</em>}n</code></td>\n        <td>Request note <em>name</em></td></tr>\n\n    <tr><td><code>%P</code></td>\n        <td>Process ID of current process</td></tr>\n\n    <tr><td><code>%T</code></td>\n        <td>Thread ID of current thread</td></tr>\n\n    <tr><td><code>%{g}T</code></td>\n        <td>System unique thread ID of current thread (the same ID as\n            displayed by e.g. <code>top</code>; currently Linux only)</td></tr>\n\n    <tr><td><code>%t</code></td>\n        <td>The current time</td></tr>\n\n    <tr><td><code>%{u}t</code></td>\n        <td>The current time including micro-seconds</td></tr>\n\n    <tr><td><code>%{cu}t</code></td>\n        <td>The current time in compact ISO 8601 format, including\n            micro-seconds</td></tr>\n\n    <tr><td><code>%v</code></td>\n        <td>The canonical <directive module=\"core\">ServerName</directive>\n            of the current server.</td></tr>\n\n    <tr><td><code>%V</code></td>\n        <td>The server name of the server serving the request according to the\n            <directive module=\"core\" >UseCanonicalName</directive>\n            setting.</td></tr>\n\n    <tr><td><code>\\&nbsp;</code> (backslash space)</td>\n        <td>Non-field delimiting space</td></tr>\n\n    <tr><td><code>%&nbsp;</code> (percent space)</td>\n        <td>Field delimiter (no output)</td></tr>\n    </table>\n\n    <p>The log ID format <code>%L</code> produces a unique id for a connection\n    or request. This can be used to correlate which log lines belong to the\n    same connection or request, which request happens on which connection.\n    A <code>%L</code> format string is also available in\n    <module>mod_log_config</module> to allow to correlate access log entries\n    with error log lines. If <module>mod_unique_id</module> is loaded, its\n    unique id will be used as log ID for requests.</p>\n\n    <highlight language=\"config\">\n#Example (default format for threaded MPMs)\nErrorLogFormat \"[%{u}t] [%-m:%l] [pid %P:tid %T] %7F: %E: [client\\ %a] %M%&nbsp;,\\&nbsp;referer\\&nbsp;%{Referer}i\"\n    </highlight>\n\n    <p>This would result in error messages such as:</p>\n\n    <example>\n    [Thu May 12 08:28:57.652118 2011] [core:error] [pid 8777:tid 4326490112] [client ::1:58619] File does not exist: /usr/local/apache2/htdocs/favicon.ico\n    </example>\n\n    <p>Notice that, as discussed above, some fields are omitted\n    entirely because they are not defined.</p>\n\n    <highlight language=\"config\">\n#Example (similar to the 2.2.x format)\nErrorLogFormat \"[%t] [%l] %7F: %E: [client\\ %a] %M%&nbsp;,\\&nbsp;referer\\&nbsp;%{Referer}i\"\n    </highlight>\n\n    <highlight language=\"config\">\n#Advanced example with request/connection log IDs\nErrorLogFormat \"[%{uc}t] [%-m:%-l] [R:%L] [C:%{C}L] %7F: %E: %M\"\nErrorLogFormat request \"[%{uc}t] [R:%L] Request %k on C:%{c}L pid:%P tid:%T\"\nErrorLogFormat request \"[%{uc}t] [R:%L] UA:'%+{User-Agent}i'\"\nErrorLogFormat request \"[%{uc}t] [R:%L] Referer:'%+{Referer}i'\"\nErrorLogFormat connection \"[%{uc}t] [C:%{c}L] local\\ %a remote\\ %A\"\n    </highlight>\n\n</usage>\n<seealso><directive module=\"core\">ErrorLog</directive></seealso>\n<seealso><directive module=\"core\">LogLevel</directive></seealso>\n<seealso><a href=\"../logs.html\">Apache HTTP Server Log Files</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ExtendedStatus</name>\n<description>Keep track of extended status information for each\nrequest</description>\n<syntax>ExtendedStatus On|Off</syntax>\n<default>ExtendedStatus Off[*]</default>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p>This option tracks additional data per worker about the\n    currently executing request and creates a utilization summary.\n    You can see these variables during runtime by configuring\n    <module>mod_status</module>.  Note that other modules may\n    rely on this scoreboard.</p>\n\n    <p>This setting applies to the entire server and cannot be\n    enabled or disabled on a virtualhost-by-virtualhost basis.\n    The collection of extended status information can slow down\n    the server.  Also note that this setting cannot be changed\n    during a graceful restart.</p>\n\n    <note>\n    <p>Note that loading <module>mod_status</module> will change\n    the default behavior to ExtendedStatus On, while other\n    third party modules may do the same.  Such modules rely on\n    collecting detailed information about the state of all workers.\n    The default is changed by <module>mod_status</module> beginning\n    with version 2.3.6. The previous default was always Off.</p>\n    </note>\n\n</usage>\n\n</directivesynopsis>\n\n<directivesynopsis>\n<name>FileETag</name>\n<description>File attributes used to create the ETag\nHTTP response header for static files</description>\n<syntax>FileETag <var>component</var> ...</syntax>\n<default>FileETag MTime Size</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>The default used to be \"INode&nbsp;MTime&nbsp;Size\" in 2.3.14 and\nearlier.</compatibility>\n\n<usage>\n    <p>\n    The <directive>FileETag</directive> directive configures the file\n    attributes that are used to create the <code>ETag</code> (entity\n    tag) response header field when the document is based on a static file.\n    (The <code>ETag</code> value is used in cache management to save\n    network bandwidth.) The\n    <directive>FileETag</directive> directive allows you to choose\n    which of these -- if any -- should be used. The recognized keywords are:\n    </p>\n\n    <dl>\n     <dt><strong>INode</strong></dt>\n     <dd>The file's i-node number will be included in the calculation</dd>\n     <dt><strong>MTime</strong></dt>\n     <dd>The date and time the file was last modified will be included</dd>\n     <dt><strong>Size</strong></dt>\n     <dd>The number of bytes in the file will be included</dd>\n     <dt><strong>All</strong></dt>\n     <dd>All available fields will be used. This is equivalent to:\n         <highlight language=\"config\">\nFileETag INode MTime Size\n         </highlight></dd>\n     <dt><strong>Digest</strong></dt>\n     <dd>If a document is file-based, the <code>ETag</code> field will be\n       calculated by taking the digest over the file.</dd>\n     <dt><strong>None</strong></dt>\n     <dd>If a document is file-based, no <code>ETag</code> field will be\n       included in the response</dd>\n    </dl>\n\n    <p>The <code>INode</code>, <code>MTime</code>, <code>Size</code> and\n    <code>Digest</code> keywords may be prefixed with either <code>+</code>\n    or <code>-</code>, which allow changes to be made to the default setting\n    inherited from a broader scope. Any keyword appearing without such a prefix\n    immediately and completely cancels the inherited setting.</p>\n\n    <p>If a directory's configuration includes\n    <code>FileETag&nbsp;INode&nbsp;MTime&nbsp;Size</code>, and a\n    subdirectory's includes <code>FileETag&nbsp;-INode</code>,\n    the setting for that subdirectory (which will be inherited by\n    any sub-subdirectories that don't override it) will be equivalent to\n    <code>FileETag&nbsp;MTime&nbsp;Size</code>.</p>\n    <note><title>Server Side Includes</title>\n    An ETag is not generated for responses parsed by <module>mod_include</module>\n    since the response entity can change without a change of the INode, MTime,\n    Size or Digest of the static file with embedded SSI directives.\n    </note>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>Files</name>\n<description>Contains directives that apply to matched\nfilenames</description>\n<syntax>&lt;Files <var>filename</var>&gt; ... &lt;/Files&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n\n<usage>\n    <p>The <directive type=\"section\">Files</directive> directive\n    limits the scope of the enclosed directives by filename. It is comparable\n    to the <directive module=\"core\" type=\"section\">Directory</directive>\n    and <directive module=\"core\" type=\"section\">Location</directive>\n    directives. It should be matched with a <code>&lt;/Files&gt;</code>\n    directive. The directives given within this section will be applied to\n    any object with a basename (last component of filename) matching the\n    specified filename. <directive type=\"section\">Files</directive>\n    sections are processed in the order they appear in the\n    configuration file, after the <directive module=\"core\"\n    type=\"section\">Directory</directive> sections and\n    <code>.htaccess</code> files are read, but before <directive\n    type=\"section\" module=\"core\">Location</directive> sections. Note\n    that <directive type=\"section\">Files</directive> can be nested\n    inside <directive type=\"section\"\n    module=\"core\">Directory</directive> sections to restrict the\n    portion of the filesystem they apply to.</p>\n\n    <p>The <var>filename</var> argument should include a filename, or\n    a wild-card string, where <code>?</code> matches any single character,\n    and <code>*</code> matches any sequences of characters.</p>\n    <highlight language=\"config\">\n&lt;Files \"cat.html\"&gt;\n    # Insert stuff that applies to cat.html here\n&lt;/Files&gt;\n\n&lt;Files \"?at.*\"&gt;\n    # This would apply to cat.html, bat.html, hat.php and so on.\n&lt;/Files&gt;\n    </highlight>\n    <p><glossary ref=\"regex\">Regular expressions</glossary>\n    can also be used, with the addition of the\n    <code>~</code> character. For example:</p>\n\n    <highlight language=\"config\">\n&lt;Files ~ \"\\.(gif|jpe?g|png)$\"&gt;\n    #...\n&lt;/Files&gt;\n    </highlight>\n\n    <p>would match most common Internet graphics formats. <directive\n    module=\"core\" type=\"section\">FilesMatch</directive> is preferred,\n    however.</p>\n\n    <p>Note that unlike <directive type=\"section\"\n    module=\"core\">Directory</directive> and <directive type=\"section\"\n    module=\"core\">Location</directive> sections, <directive\n    type=\"section\">Files</directive> sections can be used inside\n    <code>.htaccess</code> files. This allows users to control access to\n    their own files, at a file-by-file level.</p>\n\n</usage>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;\n    and &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>FilesMatch</name>\n<description>Contains directives that apply to regular-expression matched\nfilenames</description>\n<syntax>&lt;FilesMatch <var>regex</var>&gt; ... &lt;/FilesMatch&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n\n<usage>\n    <p>The <directive type=\"section\">FilesMatch</directive> directive\n    limits the scope of the enclosed directives by filename, just as the\n    <directive module=\"core\" type=\"section\">Files</directive> directive\n    does. However, it accepts a <glossary ref=\"regex\">regular\n    expression</glossary>. For example:</p>\n\n    <highlight language=\"config\">\n&lt;FilesMatch \".+\\.(gif|jpe?g|png)$\"&gt;\n    # ...\n&lt;/FilesMatch&gt;\n    </highlight>\n\n    <p>would match most common Internet graphics formats.</p>\n\n    <note>The <code>.+</code> at the start of the regex ensures that\n    files named <code>.png</code>, or <code>.gif</code>, for example,\n    are not matched.</note>\n\n    <p>From 2.4.8 onwards, named groups and backreferences are captured and\n    written to the environment with the corresponding name prefixed with\n    \"MATCH_\" and in upper case. This allows elements of files to be referenced\n    from within <a href=\"../expr.html\">expressions</a> and modules like\n    <module>mod_rewrite</module>. In order to prevent confusion, numbered\n    (unnamed) backreferences are ignored. Use named groups instead.</p>\n\n    <highlight language=\"config\">\n&lt;FilesMatch \"^(?&lt;sitename&gt;[^/]+)\"&gt;\n    Require ldap-group cn=%{env:MATCH_SITENAME},ou=combined,o=Example\n&lt;/FilesMatch&gt;\n    </highlight>\n</usage>\n\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;\n    and &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>FlushMaxPipelined</name>\n<description>Maximum number of pipelined responses above which they are flushed\nto the network</description>\n<syntax>FlushMaxPipelined <var>number</var></syntax>\n<default>FlushMaxPipelined 5</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n<compatibility>2.4.47 and later</compatibility>\n\n<usage>\n    <p>This directive allows to configure the maximum number of pipelined\n    responses, which remain pending so long as pipelined request are received.\n    When the limit is reached, reponses are forcibly flushed to the network in\n    blocking mode, until passing under the limit again.</p>\n\n    <p><directive>FlushMaxPipelined</directive> helps constraining memory\n    usage. When set to <var>0</var> pipelining is disabled, when set to\n    <var>-1</var> there is no limit (<directive>FlushMaxThreshold</directive>\n    still applies).</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>FlushMaxThreshold</name>\n<description>Threshold above which pending data are flushed to the\nnetwork</description>\n<syntax>FlushMaxThreshold<var>number-of-bytes</var></syntax>\n<default>FlushMaxThreshold 65536</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n<compatibility>2.4.47 and later</compatibility>\n\n<usage>\n    <p>This directive allows to configure the threshold for pending output\n    data (in bytes). When the limit is reached, data are forcibly flushed to\n    the network in blocking mode, until passing under the limit again.</p>\n\n    <p><directive>FlushMaxThreshold</directive> helps constraining memory\n    usage. When set to <var>0</var> or a too small value there are actually\n    no pending data, but for threaded MPMs there can be more threads busy\n    waiting for the network thus less ones available to handle the other\n    simultaneous connections.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ForceType</name>\n<description>Forces all matching files to be served with the specified\nmedia type in the HTTP Content-Type header field</description>\n<syntax>ForceType <var>media-type</var>|None</syntax>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>When placed into an <code>.htaccess</code> file or a\n    <directive type=\"section\" module=\"core\">Directory</directive>, or\n    <directive type=\"section\" module=\"core\">Location</directive> or\n    <directive type=\"section\" module=\"core\">Files</directive>\n    section, this directive forces all matching files to be served\n    with the content type identification given by\n    <var>media-type</var>. For example, if you had a directory full of\n    GIF files, but did not want to label them all with <code>.gif</code>,\n    you might want to use:</p>\n\n    <highlight language=\"config\">\nForceType image/gif\n    </highlight>\n\n    <p>Note that this directive overrides other indirect media type\n    associations defined in mime.types or via the\n    <directive module=\"mod_mime\">AddType</directive>.</p>\n\n    <p>You can also override more general\n    <directive>ForceType</directive> settings\n    by using the value of <code>None</code>:</p>\n\n    <highlight language=\"config\">\n# force all files to be image/gif:\n&lt;Location \"/images\"&gt;\n  ForceType image/gif\n&lt;/Location&gt;\n\n# but normal mime-type associations here:\n&lt;Location \"/images/mixed\"&gt;\n  ForceType None\n&lt;/Location&gt;\n    </highlight>\n\n    <p>This directive primarily overrides the content types generated for\n    static files served out of the filesystem.  For resources other than\n    static files, where the generator of the response typically specifies\n    a Content-Type, this directive has no effect.</p>\n\n    <note><title>Note</title>\n    <p>When explicit directives such as\n    <directive module=\"core\" >SetHandler</directive> or\n    <directive module=\"mod_mime\">AddHandler</directive> do not apply\n    to the current request, the internal handler name normally set by those\n    directives is set to match the content type specified by this directive.\n    This is a historical behavior that some third-party modules\n    (such as mod_php) may use \"magic\" content types used only to signal the\n    module to take responsibility for the matching request.  Configurations\n    that rely on such \"magic\" types should be avoided by the use of\n    <directive module=\"core\" >SetHandler</directive> or\n    <directive module=\"mod_mime\">AddHandler</directive>. </p>\n    </note>\n\n</usage>\n</directivesynopsis>\n<directivesynopsis>\n<name>GprofDir</name>\n<description>Directory to write gmon.out profiling data to.  </description>\n<syntax>GprofDir <var>/tmp/gprof/</var>|<var>/tmp/gprof/</var>%</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>When the server has been compiled with gprof profiling support,\n    <directive>GprofDir</directive> causes <code>gmon.out</code> files to\n    be written to the specified directory when the process exits.  If the\n    argument ends with a percent symbol ('%'), subdirectories are created\n    for each process id.</p>\n\n    <p>This directive currently only works with the <module>prefork</module>\n    MPM.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>HostnameLookups</name>\n<description>Enables DNS lookups on client IP addresses</description>\n<syntax>HostnameLookups On|Off|Double</syntax>\n<default>HostnameLookups Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context></contextlist>\n\n<usage>\n    <p>This directive enables DNS lookups so that host names can be\n    logged (and passed to CGIs/SSIs in <code>REMOTE_HOST</code>).\n    The value <code>Double</code> refers to doing double-reverse\n    DNS lookup. That is, after a reverse lookup is performed, a forward\n    lookup is then performed on that result. At least one of the IP\n    addresses in the forward lookup must match the original\n    address. (In \"tcpwrappers\" terminology this is called\n    <code>PARANOID</code>.)</p>\n\n    <p>Regardless of the setting, when <module>mod_authz_host</module> is\n    used for controlling access by hostname, a double reverse lookup\n    will be performed.  This is necessary for security. Note that the\n    result of this double-reverse isn't generally available unless you\n    set <code>HostnameLookups Double</code>. For example, if only\n    <code>HostnameLookups On</code> and a request is made to an object\n    that is protected by hostname restrictions, regardless of whether\n    the double-reverse fails or not, CGIs will still be passed the\n    single-reverse result in <code>REMOTE_HOST</code>.</p>\n\n    <p>The default is <code>Off</code> in order to save the network\n    traffic for those sites that don't truly need the reverse\n    lookups done. It is also better for the end users because they\n    don't have to suffer the extra latency that a lookup entails.\n    Heavily loaded sites should leave this directive\n    <code>Off</code>, since DNS lookups can take considerable\n    amounts of time. The utility <program>logresolve</program>, compiled by\n    default to the <code>bin</code> subdirectory of your installation\n    directory, can be used to look up host names from logged IP addresses\n    offline.</p>\n\n    <p>Finally, if you have <a\n    href=\"mod_authz_host.html#reqhost\">hostname-based Require\n    directives</a>, a hostname lookup will be performed regardless of\n    the setting of <directive>HostnameLookups</directive>.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>If</name>\n<description>Contains directives that apply only if a condition is\nsatisfied by a request at runtime</description>\n<syntax>&lt;If <var>expression</var>&gt; ... &lt;/If&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Nested conditions are evaluated in 2.4.26 and later</compatibility>\n\n<usage>\n    <p>The <directive type=\"section\">If</directive> directive\n    evaluates an expression at runtime, and applies the enclosed\n    directives if and only if the expression evaluates to true.\n    For example:</p>\n\n    <highlight language=\"config\">\n&lt;If \"-z req('Host')\"&gt;\n    </highlight>\n\n    <p>would match HTTP/1.0 requests without a <var>Host:</var> header.\n    Expressions may contain various shell-like operators for string\n    comparison (<code>==</code>, <code>!=</code>, <code>&lt;</code>, ...),\n    integer comparison (<code>-eq</code>, <code>-ne</code>, ...),\n    and others (<code>-n</code>, <code>-z</code>, <code>-f</code>, ...).\n    It is also possible to use regular expressions, </p>\n\n    <highlight language=\"config\">\n&lt;If \"%{QUERY_STRING} =~ /(delete|commit)=.*?elem/\"&gt;\n    </highlight>\n\n    <p>shell-like pattern matches and many other operations. These operations\n    can be done on request headers (<code>req</code>), environment variables\n    (<code>env</code>), and a large number of other properties. The full\n    documentation is available in <a href=\"../expr.html\">Expressions in\n    Apache HTTP Server</a>.</p>\n\n    <p>Only directives that support the <a href=\"directive-dict.html#Context\"\n    >directory context</a> can be used within this configuration section.</p>\n\n    <note type=\"warning\">\n    Certain variables, such as <code>CONTENT_TYPE</code> and other\n    response headers, are set after &lt;If&gt; conditions have already\n    been evaluated, and so will not be available to use in this\n    directive.\n    </note>\n\n</usage>\n\n<seealso><a href=\"../expr.html\">Expressions in Apache HTTP Server</a>,\nfor a complete reference and more examples.</seealso>\n<seealso><directive type=\"section\" module=\"core\">ElseIf</directive></seealso>\n<seealso><directive type=\"section\" module=\"core\">Else</directive></seealso>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;,\n    &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received.\n    <directive type=\"section\">If</directive>,\n    <directive type=\"section\">ElseIf</directive>, and\n    <directive type=\"section\">Else</directive> are applied last.</seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>IfDefine</name>\n<description>Encloses directives that will be processed only\nif a test is true at startup</description>\n<syntax>&lt;IfDefine [!]<var>parameter-name</var>&gt; ...\n    &lt;/IfDefine&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n\n<usage>\n    <p>The <code>&lt;IfDefine <var>test</var>&gt;...&lt;/IfDefine&gt;\n    </code> section is used to mark directives that are conditional. The\n    directives within an <directive type=\"section\">IfDefine</directive>\n    section are only processed if the <var>test</var> is true. If <var>\n    test</var> is false, everything between the start and end markers is\n    ignored.</p>\n\n    <p>The <var>test</var> in the <directive type=\"section\"\n    >IfDefine</directive> section directive can be one of two forms:</p>\n\n    <ul>\n      <li><var>parameter-name</var></li>\n\n      <li><code>!</code><var>parameter-name</var></li>\n    </ul>\n\n    <p>In the former case, the directives between the start and end\n    markers are only processed if the parameter named\n    <var>parameter-name</var> is defined. The second format reverses\n    the test, and only processes the directives if\n    <var>parameter-name</var> is <strong>not</strong> defined.</p>\n\n    <p>The <var>parameter-name</var> argument is a define as given on the\n    <program>httpd</program> command line via <code>-D<var>parameter</var>\n    </code> at the time the server was started or by the <directive\n    module=\"core\">Define</directive> directive.</p>\n\n    <p><directive type=\"section\">IfDefine</directive> sections are\n    nest-able, which can be used to implement simple\n    multiple-parameter tests. Example:</p>\n\n    <example>httpd -DReverseProxy -DUseCache -DMemCache ...</example>\n    <highlight language=\"config\">\n&lt;IfDefine ReverseProxy&gt;\n  LoadModule proxy_module   modules/mod_proxy.so\n  LoadModule proxy_http_module   modules/mod_proxy_http.so\n  &lt;IfDefine UseCache&gt;\n    LoadModule cache_module   modules/mod_cache.so\n    &lt;IfDefine MemCache&gt;\n      LoadModule mem_cache_module   modules/mod_mem_cache.so\n    &lt;/IfDefine&gt;\n    &lt;IfDefine !MemCache&gt;\n      LoadModule cache_disk_module   modules/mod_cache_disk.so\n    &lt;/IfDefine&gt;\n  &lt;/IfDefine&gt;\n&lt;/IfDefine&gt;\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>IfFile</name>\n<description>Encloses directives that will be processed only\nif file exists at startup</description>\n<syntax>&lt;IfFile [!]<var>filename</var>&gt; ...\n    &lt;/IfFile&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Available in 2.4.34 and later.</compatibility>\n\n<usage>\n    <p>The <code>&lt;IfFile <var>filename</var>&gt;...&lt;/IfFile&gt;\n    </code> section is used to mark directives that are conditional on\n    the existence of a file on disk. The directives within an\n    <directive type=\"section\">IfFile</directive> section are only\n    processed if <var>filename</var> exists. If <var>filename</var>\n    doesn't exist, everything between the start and end markers is\n    ignored. <var>filename</var> can be an absolute path or a path\n    relative to the server root.</p>\n\n    <p>The <var>filename</var> in the <directive type=\"section\"\n    >IfFile</directive> section directive can take the same forms as the\n    <var>test</var> variable in the <directive type=\"section\" module=\"core\"\n    >IfDefine</directive> section, i.e. the test can be negated if the <code>\n    !</code> character is placed directly before <var>filename</var>.\n    </p>\n   \n    <p>If a relative <var>filename</var> is supplied, the check is\n    <directive module=\"core\">ServerRoot</directive> relative. In the case where\n    this directive occurs before the <directive module=\"core\">ServerRoot</directive>,\n    the path will be checked relative to the compiled-in server root or\n    the server root passed in on the command line via the <code>-d</code>\n    parameter.</p>\n    \n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>IfModule</name>\n<description>Encloses directives that are processed conditional on the\npresence or absence of a specific module</description>\n<syntax>&lt;IfModule [!]<var>module-file</var>|<var>module-identifier</var>&gt; ...\n    &lt;/IfModule&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Module identifiers are available in version 2.1 and\nlater.</compatibility>\n\n<usage>\n    <p>The <code>&lt;IfModule <var>test</var>&gt;...&lt;/IfModule&gt;</code>\n    section is used to mark directives that are conditional on the presence of\n    a specific module. The directives within an <directive type=\"section\"\n    >IfModule</directive> section are only processed if the <var>test</var>\n    is true. If <var>test</var> is false, everything between the start and\n    end markers is ignored.</p>\n\n    <p>The <var>test</var> in the <directive type=\"section\"\n    >IfModule</directive> section directive can be one of two forms:</p>\n\n    <ul>\n      <li><var>module</var></li>\n\n      <li>!<var>module</var></li>\n    </ul>\n\n    <p>In the former case, the directives between the start and end\n    markers are only processed if the module named <var>module</var>\n    is included in Apache httpd -- either compiled in or\n    dynamically loaded using <directive module=\"mod_so\"\n    >LoadModule</directive>. The second format reverses the test,\n    and only processes the directives if <var>module</var> is\n    <strong>not</strong> included.</p>\n\n    <p>The <var>module</var> argument can be either the module identifier or\n    the file name of the module, at the time it was compiled.  For example,\n    <code>rewrite_module</code> is the identifier and\n    <code>mod_rewrite.c</code> is the file name. If a module consists of\n    several source files, use the name of the file containing the string\n    <code>STANDARD20_MODULE_STUFF</code>.</p>\n\n    <p><directive type=\"section\">IfModule</directive> sections are\n    nest-able, which can be used to implement simple multiple-module\n    tests.</p>\n\n    <note>This section should only be used if you need to have one\n    configuration file that works whether or not a specific module\n    is available. In normal operation, directives need not be\n    placed in <directive type=\"section\">IfModule</directive>\n    sections.</note>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>IfDirective</name>\n<description>Encloses directives that are processed conditional on the\npresence or absence of a specific directive</description>\n<syntax>&lt;IfDirective [!]<var>directive-name</var>&gt; ...\n    &lt;/IfDirective&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Available in 2.4.34 and later.</compatibility>\n\n<usage>\n    <p>The <code>&lt;IfDirective <var>test</var>&gt;...&lt;/IfDirective&gt;</code>\n    section is used to mark directives that are conditional on the presence of\n    a specific directive. The directives within an <directive type=\"section\"\n    >IfDirective</directive> section are only processed if the <var>test</var>\n    is true. If <var>test</var> is false, everything between the start and\n    end markers is ignored.</p>\n\n    <p>The <var>test</var> in the <directive type=\"section\"\n    >IfDirective</directive> section can be one of two forms:</p>\n\n    <ul>\n      <li><var>directive-name</var></li>\n\n      <li>!<var>directive-name</var></li>\n    </ul>\n\n    <p>In the former case, the directives between the start and end\n    markers are only processed if a directive of the given name is\n    available at the time of processing.  The second format reverses the test,\n    and only processes the directives if <var>directive-name</var> is\n    <strong>not</strong> available.</p>\n\n    <note>This section should only be used if you need to have one\n    configuration file that works across multiple versions of\n    <program>httpd</program>, regardless of whether a particular\n    directive is available. In normal operation, directives need not\n    be placed in <directive type=\"section\">IfDirective</directive>\n    sections.</note>\n</usage>\n<seealso><directive module=\"core\" type=\"section\">IfSection</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>IfSection</name>\n<description>Encloses directives that are processed conditional on the\npresence or absence of a specific section directive</description>\n<syntax>&lt;IfSection [!]<var>section-name</var>&gt; ...\n    &lt;/IfSection&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n<compatibility>Available in 2.4.34 and later.</compatibility>\n\n<usage>\n    <p>The <code>&lt;IfSection\n    <var>test</var>&gt;...&lt;/IfSection&gt;</code> section is used\n    to mark directives that are conditional on the presence of a\n    specific section directive.  A section directive is any directive\n    such as <directive type=\"section\">VirtualHost</directive> which\n    encloses other directives, and has a directive name with a leading\n    \"&lt;\".</p>\n\n    <p>The directives within an <directive type=\"section\"\n    >IfSection</directive> section are only processed if the <var>test</var>\n    is true. If <var>test</var> is false, everything between the start and\n    end markers is ignored.</p>\n\n    <p>The <var>section-name</var> must be specified without either\n    the leading \"&lt;\" or closing \"&gt;\".  The <var>test</var> in the\n    <directive type=\"section\">IfSection</directive> section can be one\n    of two forms:</p>\n\n    <ul>\n      <li><var>section-name</var></li>\n      <li>!<var>section-name</var></li>\n    </ul>\n\n    <p>In the former case, the directives between the start and end\n    markers are only processed if a section directive of the given\n    name is available at the time of processing.  The second format\n    reverses the test, and only processes the directives if\n    <var>section-name</var> is <strong>not</strong> an available\n    section directive.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\n&lt;IfSection VirtualHost&gt;\n   ...\n&lt;/IfSection&gt;\n    </highlight>\n    \n    <note>This section should only be used if you need to have one\n    configuration file that works across multiple versions of <program>httpd</program>,\n    regardless of whether a particular section directive is\n    available. In normal operation, directives need not be placed in\n    <directive type=\"section\">IfSection</directive> sections.</note>\n</usage>\n<seealso><directive module=\"core\" type=\"section\">IfDirective</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Include</name>\n<description>Includes other configuration files from within\nthe server configuration files</description>\n<syntax>Include <var>file-path</var>|<var>directory-path</var>|<var>wildcard</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context>\n</contextlist>\n<compatibility>Directory\nwildcard matching available in 2.3.6 and later</compatibility>\n\n<usage>\n    <p>This directive allows inclusion of other configuration files\n    from within the server configuration files.</p>\n\n    <p>Shell-style (<code>fnmatch()</code>) wildcard characters can be used\n    in the filename or directory parts of the path to include several files\n    at once, in alphabetical order. In addition, if\n    <directive>Include</directive> points to a directory, rather than a file,\n    Apache httpd will read all files in that directory and any subdirectory.\n    However, including entire directories is not recommended, because it is\n    easy to accidentally leave temporary files in a directory that can cause\n    <program>httpd</program> to fail. Instead, we encourage you to use the\n    wildcard syntax shown below, to include files that match a particular\n    pattern, such as *.conf, for example.</p>\n\n    <p>The <directive module=\"core\">Include</directive> directive will\n    <strong>fail with an error</strong> if a wildcard expression does not\n    match any file. The <directive module=\"core\">IncludeOptional</directive>\n    directive can be used if non-matching wildcards should be ignored.</p>\n\n    <p>The file path specified may be an absolute path, or may be relative\n    to the <directive module=\"core\">ServerRoot</directive> directory.</p>\n\n    <p>Examples:</p>\n\n    <highlight language=\"config\">\nInclude /usr/local/apache2/conf/ssl.conf\nInclude /usr/local/apache2/conf/vhosts/*.conf\n    </highlight>\n\n    <p>Or, providing paths relative to your <directive\n    module=\"core\">ServerRoot</directive> directory:</p>\n\n    <highlight language=\"config\">\nInclude conf/ssl.conf\nInclude conf/vhosts/*.conf\n    </highlight>\n\n    <p>Wildcards may be included in the directory or file portion of the\n    path. This example will fail if there is no subdirectory in conf/vhosts\n    that contains at least one *.conf file:</p>\n\n    <highlight language=\"config\">\nInclude conf/vhosts/*/*.conf\n    </highlight>\n\n    <p>Alternatively, the following command will just be ignored in case of\n    missing files or directories:</p>\n\n    <highlight language=\"config\">\nIncludeOptional conf/vhosts/*/*.conf\n    </highlight>\n\n</usage>\n\n<seealso><directive module=\"core\">IncludeOptional</directive></seealso>\n<seealso><program>apachectl</program></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>IncludeOptional</name>\n<description>Includes other configuration files from within\nthe server configuration files</description>\n<syntax>IncludeOptional <var>file-path</var>|<var>directory-path</var>|<var>wildcard</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context>\n</contextlist>\n<compatibility>Available in 2.3.6 and later. Not existent file paths without wildcards\n               do not cause SyntaxError after 2.4.30</compatibility>\n\n<usage>\n    <p>This directive allows inclusion of other configuration files\n    from within the server configuration files. It works identically to the\n    <directive module=\"core\">Include</directive> directive, but it will be\n    silently ignored (instead of causing an error) if wildcards are used and\n    they do not match any file or directory or if a file path does not exist\n    on the file system.</p>\n</usage>\n\n<seealso><directive module=\"core\">Include</directive></seealso>\n<seealso><program>apachectl</program></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>KeepAlive</name>\n<description>Enables HTTP persistent connections</description>\n<syntax>KeepAlive On|Off</syntax>\n<default>KeepAlive On</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The Keep-Alive extension to HTTP/1.0 and the persistent\n    connection feature of HTTP/1.1 provide long-lived HTTP sessions\n    which allow multiple requests to be sent over the same TCP\n    connection. In some cases this has been shown to result in an\n    almost 50% speedup in latency times for HTML documents with\n    many images. To enable Keep-Alive connections, set\n    <code>KeepAlive On</code>.</p>\n\n    <p>For HTTP/1.0 clients, Keep-Alive connections will only be\n    used if they are specifically requested by a client. In\n    addition, a Keep-Alive connection with an HTTP/1.0 client can\n    only be used when the length of the content is known in\n    advance. This implies that dynamic content such as CGI output,\n    SSI pages, and server-generated directory listings will\n    generally not use Keep-Alive connections to HTTP/1.0 clients.\n    For HTTP/1.1 clients, persistent connections are the default\n    unless otherwise specified. If the client requests it, chunked\n    encoding will be used in order to send content of unknown\n    length over persistent connections.</p>\n\n    <p>When a client uses a Keep-Alive connection, it will be counted\n    as a single \"request\" for the <directive module=\"mpm_common\"\n    >MaxConnectionsPerChild</directive> directive, regardless\n    of how many requests are sent using the connection.</p>\n</usage>\n\n<seealso><directive module=\"core\">MaxKeepAliveRequests</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>KeepAliveTimeout</name>\n<description>Amount of time the server will wait for subsequent\nrequests on a persistent connection</description>\n<syntax>KeepAliveTimeout <var>num</var>[ms]</syntax>\n<default>KeepAliveTimeout 5</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The number of seconds Apache httpd will wait for a subsequent\n    request before closing the connection. By adding a postfix of ms the\n    timeout can be also set in milliseconds. Once a request has been\n    received, the timeout value specified by the\n    <directive module=\"core\">Timeout</directive> directive applies.</p>\n\n    <p>Setting <directive>KeepAliveTimeout</directive> to a high value\n    may cause performance problems in heavily loaded servers. The\n    higher the timeout, the more server processes will be kept\n    occupied waiting on connections with idle clients.</p>\n\n    <p>If <directive>KeepAliveTimeout</directive> is <strong>not</strong>\n    set for a name-based virtual host, the value of the first defined\n    virtual host best matching the local IP and port will be used.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>Limit</name>\n<description>Restrict enclosed access controls to only certain HTTP\nmethods</description>\n<syntax>&lt;Limit <var>method</var> [<var>method</var>] ... &gt; ...\n    &lt;/Limit&gt;</syntax>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>AuthConfig, Limit</override>\n\n<usage>\n    <p>Access controls are normally effective for\n    <strong>all</strong> access methods, and this is the usual\n    desired behavior. <strong>In the general case, access control\n    directives should not be placed within a\n    <directive type=\"section\">Limit</directive> section.</strong></p>\n\n    <p>The purpose of the <directive type=\"section\">Limit</directive>\n    directive is to restrict the effect of the access controls to the\n    nominated HTTP methods. For all other methods, the access\n    restrictions that are enclosed in the <directive\n    type=\"section\">Limit</directive> bracket <strong>will have no\n    effect</strong>. The following example applies the access control\n    only to the methods <code>POST</code>, <code>PUT</code>, and\n    <code>DELETE</code>, leaving all other methods unprotected:</p>\n\n    <highlight language=\"config\">\n&lt;Limit POST PUT DELETE&gt;\n  Require valid-user\n&lt;/Limit&gt;\n    </highlight>\n\n    <p>The method names listed can be one or more of: <code>GET</code>,\n    <code>POST</code>, <code>PUT</code>, <code>DELETE</code>,\n    <code>CONNECT</code>, <code>OPTIONS</code>,\n    <code>PATCH</code>, <code>PROPFIND</code>, <code>PROPPATCH</code>,\n    <code>MKCOL</code>, <code>COPY</code>, <code>MOVE</code>,\n    <code>LOCK</code>, and <code>UNLOCK</code>. <strong>The method name is\n    case-sensitive.</strong> If <code>GET</code> is used, it will also\n    restrict <code>HEAD</code> requests. The <code>TRACE</code> method\n    cannot be limited (see <directive module=\"core\"\n    >TraceEnable</directive>).</p>\n\n    <note type=\"warning\">A <directive type=\"section\"\n    module=\"core\">LimitExcept</directive> section should always be\n    used in preference to a <directive type=\"section\">Limit</directive>\n    section when restricting access, since a <directive type=\"section\"\n    module=\"core\">LimitExcept</directive> section provides protection\n    against arbitrary methods.</note>\n\n    <p>The <directive type=\"section\">Limit</directive> and\n    <directive type=\"section\" module=\"core\">LimitExcept</directive>\n    directives may be nested.  In this case, each successive level of\n    <directive type=\"section\">Limit</directive> or <directive\n    type=\"section\" module=\"core\">LimitExcept</directive> directives must\n    further restrict the set of methods to which access controls apply.</p>\n\n    <note type=\"warning\">When using\n    <directive type=\"section\">Limit</directive> or\n    <directive type=\"section\">LimitExcept</directive> directives with\n    the <directive module=\"mod_authz_core\">Require</directive> directive,\n    note that the first <directive module=\"mod_authz_core\">Require</directive>\n    to succeed authorizes the request, regardless of the presence of other\n    <directive module=\"mod_authz_core\">Require</directive> directives.</note>\n\n    <p>For example, given the following configuration, all users will\n    be authorized for <code>POST</code> requests, and the\n    <code>Require group editors</code> directive will be ignored\n    in all cases:</p>\n\n    <highlight language=\"config\">\n&lt;LimitExcept GET&gt;\n  Require valid-user\n&lt;/LimitExcept&gt;\n&lt;Limit POST&gt;\n  Require group editors\n&lt;/Limit&gt;\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>LimitExcept</name>\n<description>Restrict access controls to all HTTP methods\nexcept the named ones</description>\n<syntax>&lt;LimitExcept <var>method</var> [<var>method</var>] ... &gt; ...\n    &lt;/LimitExcept&gt;</syntax>\n<contextlist><context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>AuthConfig, Limit</override>\n\n<usage>\n    <p><directive type=\"section\">LimitExcept</directive> and\n    <code>&lt;/LimitExcept&gt;</code> are used to enclose\n    a group of access control directives which will then apply to any\n    HTTP access method <strong>not</strong> listed in the arguments;\n    i.e., it is the opposite of a <directive type=\"section\"\n    module=\"core\">Limit</directive> section and can be used to control\n    both standard and nonstandard/unrecognized methods. See the\n    documentation for <directive module=\"core\"\n    type=\"section\">Limit</directive> for more details.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\n&lt;LimitExcept POST GET&gt;\n  Require valid-user\n&lt;/LimitExcept&gt;\n    </highlight>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitInternalRecursion</name>\n<description>Determine maximum number of internal redirects and nested\nsubrequests</description>\n<syntax>LimitInternalRecursion <var>number</var> [<var>number</var>]</syntax>\n<default>LimitInternalRecursion 10</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>An internal redirect happens, for example, when using the <directive\n    module=\"mod_actions\">Action</directive> directive, which internally\n    redirects the original request to a CGI script. A subrequest is Apache httpd's\n    mechanism to find out what would happen for some URI if it were requested.\n    For example, <module>mod_dir</module> uses subrequests to look for the\n    files listed in the <directive module=\"mod_dir\">DirectoryIndex</directive>\n    directive.</p>\n\n    <p><directive>LimitInternalRecursion</directive> prevents the server\n    from crashing when entering an infinite loop of internal redirects or\n    subrequests. Such loops are usually caused by misconfigurations.</p>\n\n    <p>The directive stores two different limits, which are evaluated on\n    per-request basis. The first <var>number</var> is the maximum number of\n    internal redirects that may follow each other. The second <var>number</var>\n    determines how deeply subrequests may be nested. If you specify only one\n    <var>number</var>, it will be assigned to both limits.</p>\n\n    <highlight language=\"config\">\nLimitInternalRecursion 5\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitRequestBody</name>\n<description>Restricts the total size of the HTTP request body sent\nfrom the client</description>\n<syntax>LimitRequestBody <var>bytes</var></syntax>\n<default>LimitRequestBody 0</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n\n<usage>\n    <p>This directive specifies the number of <var>bytes</var> from 0\n    (meaning unlimited) to 2147483647 (2GB) that are allowed in a\n    request body. See the note below for the limited applicability\n    to proxy requests.</p>\n\n    <p>The <directive>LimitRequestBody</directive> directive allows\n    the user to set a limit on the allowed size of an HTTP request\n    message body within the context in which the directive is given\n    (server, per-directory, per-file or per-location). If the client\n    request exceeds that limit, the server will return an error\n    response instead of servicing the request. The size of a normal\n    request message body will vary greatly depending on the nature of\n    the resource and the methods allowed on that resource. CGI scripts\n    typically use the message body for retrieving form information.\n    Implementations of the <code>PUT</code> method will require\n    a value at least as large as any representation that the server\n    wishes to accept for that resource.</p>\n\n    <p>This directive gives the server administrator greater\n    control over abnormal client request behavior, which may be\n    useful for avoiding some forms of denial-of-service\n    attacks.</p>\n\n    <p>If, for example, you are permitting file upload to a particular\n    location and wish to limit the size of the uploaded file to 100K,\n    you might use the following directive:</p>\n\n    <highlight language=\"config\">\nLimitRequestBody 102400\n    </highlight>\n\n    <note><p>For a full description of how this directive is interpreted by\n    proxy requests, see the <module>mod_proxy</module> documentation.</p>\n    </note>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitRequestFields</name>\n<description>Limits the number of HTTP request header fields that\nwill be accepted from the client</description>\n<syntax>LimitRequestFields <var>number</var></syntax>\n<default>LimitRequestFields 100</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n\n<usage>\n    <p>Setting <var>number</var> at 0 means unlimited.\n    The default value is defined by the compile-time\n    constant <code>DEFAULT_LIMIT_REQUEST_FIELDS</code> (100 as\n    distributed).</p>\n\n    <p>The <directive>LimitRequestFields</directive> directive allows\n    the server administrator to modify the limit on the number of\n    request header fields allowed in an HTTP request. A server needs\n    this value to be larger than the number of fields that a normal\n    client request might include. The number of request header fields\n    used by a client rarely exceeds 20, but this may vary among\n    different client implementations, often depending upon the extent\n    to which a user has configured their browser to support detailed\n    content negotiation. Optional HTTP extensions are often expressed\n    using request header fields.</p>\n\n    <p>This directive gives the server administrator greater\n    control over abnormal client request behavior, which may be\n    useful for avoiding some forms of denial-of-service attacks.\n    The value should be increased if normal clients see an error\n    response from the server that indicates too many fields were\n    sent in the request.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\nLimitRequestFields 50\n    </highlight>\n\n     <note type=\"warning\"><title>Warning</title>\n     <p> When name-based virtual hosting is used, the value for this\n     directive is taken from the default (first-listed) virtual host for the\n     local IP and port combination.</p>\n     </note>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitRequestFieldSize</name>\n<description>Limits the size of the HTTP request header allowed from the\nclient</description>\n<syntax>LimitRequestFieldSize <var>bytes</var></syntax>\n<default>LimitRequestFieldSize 8190</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n\n<usage>\n    <p>This directive specifies the number of <var>bytes</var>\n    that will be allowed in an HTTP request header.</p>\n\n    <p>The <directive>LimitRequestFieldSize</directive> directive\n    allows the server administrator to set the limit\n    on the allowed size of an HTTP request header field. A server\n    needs this value to be large enough to hold any one header field\n    from a normal client request. The size of a normal request header\n    field will vary greatly among different client implementations,\n    often depending upon the extent to which a user has configured\n    their browser to support detailed content negotiation. SPNEGO\n    authentication headers can be up to 12392 bytes.</p>\n\n    <p>This directive gives the server administrator greater\n    control over abnormal client request behavior, which may be\n    useful for avoiding some forms of denial-of-service attacks.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\nLimitRequestFieldSize 4094\n    </highlight>\n\n    <note>Under normal conditions, the value should not be changed from\n    the default.</note>\n\n    <note type=\"warning\"><title>Warning</title>\n    <p> When name-based virtual hosting is used, the value for this\n    directive is taken from the default (first-listed) virtual host best\n    matching the current IP address and port combination.</p>\n    </note>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitRequestLine</name>\n<description>Limit the size of the HTTP request line that will be accepted\nfrom the client</description>\n<syntax>LimitRequestLine <var>bytes</var></syntax>\n<default>LimitRequestLine 8190</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n\n<usage>\n    <p>This directive sets the number of <var>bytes</var> that will be\n    allowed on the HTTP request-line.</p>\n\n    <p>The <directive>LimitRequestLine</directive> directive allows\n    the server administrator to set the limit on the allowed size\n    of a client's HTTP request-line. Since the request-line consists of the\n    HTTP method, URI, and protocol version, the\n    <directive>LimitRequestLine</directive> directive places a\n    restriction on the length of a request-URI allowed for a request\n    on the server. A server needs this value to be large enough to\n    hold any of its resource names, including any information that\n    might be passed in the query part of a <code>GET</code> request.</p>\n\n    <p>This directive gives the server administrator greater\n    control over abnormal client request behavior, which may be\n    useful for avoiding some forms of denial-of-service attacks.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\nLimitRequestLine 4094\n    </highlight>\n\n    <note>Under normal conditions, the value should not be changed from\n    the default.</note>\n\n    <note type=\"warning\"><title>Warning</title>\n    <p> When name-based virtual hosting is used, the value for this\n    directive is taken from the default (first-listed) virtual host best\n    matching the current IP address and port combination.</p>\n    </note>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LimitXMLRequestBody</name>\n<description>Limits the size of an XML-based request body</description>\n<syntax>LimitXMLRequestBody <var>bytes</var></syntax>\n<default>LimitXMLRequestBody 1000000</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context></contextlist>\n<override>All</override>\n\n<usage>\n    <p>Limit (in bytes) on maximum size of an XML-based request\n    body. A value of <code>0</code> will disable any checking.</p>\n\n    <p>Example:</p>\n\n    <highlight language=\"config\">\nLimitXMLRequestBody 0\n    </highlight>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>Location</name>\n<description>Applies the enclosed directives only to matching\nURLs</description>\n<syntax>&lt;Location\n    <var>URL-path</var>|<var>URL</var>&gt; ... &lt;/Location&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive type=\"section\">Location</directive> directive\n    limits the scope of the enclosed directives by URL. It is similar to the\n    <directive type=\"section\" module=\"core\">Directory</directive>\n    directive, and starts a subsection which is terminated with a\n    <code>&lt;/Location&gt;</code> directive. <directive\n    type=\"section\">Location</directive> sections are processed in the\n    order they appear in the configuration file, after the <directive\n    type=\"section\" module=\"core\">Directory</directive> sections and\n    <code>.htaccess</code> files are read, and after the <directive\n    type=\"section\" module=\"core\">Files</directive> sections.</p>\n\n    <p><directive type=\"section\">Location</directive> sections operate\n    completely outside the filesystem.  This has several consequences.\n    Most importantly, <directive type=\"section\">Location</directive>\n    directives should not be used to control access to filesystem\n    locations.  Since several different URLs may map to the same\n    filesystem location, such access controls may by circumvented.</p>\n\n    <p>The enclosed directives will be applied to the request if the path component\n    of the URL meets <em>any</em> of the following criteria:\n    </p>\n    <ul>\n      <li>The specified location matches exactly the path component of the URL.\n      </li>\n      <li>The specified location, which ends in a forward slash, is a prefix\n      of the path component of the URL (treated as a context root).\n      </li>\n      <li>The specified location, with the addition of a trailing slash, is a\n      prefix of the path component of the URL (also treated as a context root).\n      </li>\n    </ul>\n    <p>\n    In the example below, where no trailing slash is used, requests to\n    /private1, /private1/ and /private1/file.txt will have the enclosed\n    directives applied, but /private1other would not.\n    </p>\n    <highlight language=\"config\">\n&lt;Location \"/private1\"&gt;\n    #  ...\n&lt;/Location&gt;\n    </highlight>\n    <p>\n    In the example below, where a trailing slash is used, requests to\n    /private2/ and /private2/file.txt will have the enclosed\n    directives applied, but /private2 and /private2other would not.\n    </p>\n    <highlight language=\"config\">\n&lt;Location \"/private2<em>/</em>\"&gt;\n    # ...\n&lt;/Location&gt;\n    </highlight>\n\n    <note><title>When to use <directive\n    type=\"section\">Location</directive></title>\n\n    <p>Use <directive type=\"section\">Location</directive> to apply\n    directives to content that lives outside the filesystem.  For\n    content that lives in the filesystem, use <directive\n    type=\"section\" module=\"core\">Directory</directive> and <directive\n    type=\"section\" module=\"core\">Files</directive>.  An exception is\n    <code>&lt;Location \"/\"&gt;</code>, which is an easy way to\n    apply a configuration to the entire server.</p>\n    </note>\n\n    <p>For all origin (non-proxy) requests, the URL to be matched is a\n    URL-path of the form <code>/path/</code>.  <em>No scheme, hostname,\n    port, or query string may be included.</em>  For proxy requests, the\n    URL to be matched is of the form\n    <code>scheme://servername/path</code>, and you must include the\n    prefix.</p>\n\n    <p>The URL may use wildcards. In a wild-card string, <code>?</code> matches\n    any single character, and <code>*</code> matches any sequences of\n    characters. Neither wildcard character matches a / in the URL-path.</p>\n\n    <p><glossary ref=\"regex\">Regular expressions</glossary>\n    can also be used, with the addition of the <code>~</code>\n    character. For example:</p>\n\n    <highlight language=\"config\">\n&lt;Location ~ \"/(extra|special)/data\"&gt;\n    #...\n&lt;/Location&gt;\n    </highlight>\n\n    <p>would match URLs that contained the substring <code>/extra/data</code>\n    or <code>/special/data</code>. The directive <directive\n    type=\"section\" module=\"core\">LocationMatch</directive> behaves\n    identical to the regex version of <directive\n    type=\"section\">Location</directive>, and is preferred, for the\n    simple reason that <code>~</code> is hard to distinguish from\n    <code>-</code> in many fonts.</p>\n\n    <p>The <directive type=\"section\">Location</directive>\n    functionality is especially useful when combined with the\n    <directive module=\"core\">SetHandler</directive>\n    directive. For example, to enable status requests but allow them\n    only from browsers at <code>example.com</code>, you might use:</p>\n\n    <highlight language=\"config\">\n&lt;Location \"/status\"&gt;\n  SetHandler server-status\n  Require host example.com\n&lt;/Location&gt;\n    </highlight>\n\n    <note><title>Note about / (slash)</title>\n      <p>The slash character has special meaning depending on where in a\n      URL it appears. People may be used to its behavior in the filesystem\n      where multiple adjacent slashes are frequently collapsed to a single\n      slash (<em>i.e.</em>, <code>/home///foo</code> is the same as\n      <code>/home/foo</code>). In URL-space this is not necessarily true.\n      The <directive type=\"section\" module=\"core\">LocationMatch</directive>\n      directive and the regex version of <directive type=\"section\"\n      >Location</directive> require you to explicitly specify multiple\n      slashes if that is your intention.</p>\n\n      <p>For example, <code>&lt;LocationMatch \"^/abc\"&gt;</code> would match\n      the request URL <code>/abc</code> but not the request URL <code>\n      //abc</code>. The (non-regex) <directive type=\"section\"\n      >Location</directive> directive behaves similarly when used for\n      proxy requests. But when (non-regex) <directive type=\"section\"\n      >Location</directive> is used for non-proxy requests it will\n      implicitly match multiple slashes with a single slash. For example,\n      if you specify <code>&lt;Location \"/abc/def\"&gt;</code> and the\n      request is to <code>/abc//def</code> then it will match.</p>\n    </note>\n</usage>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;\n    and &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received.</seealso>\n<seealso><directive module=\"core\">LocationMatch</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>LocationMatch</name>\n<description>Applies the enclosed directives only to regular-expression\nmatching URLs</description>\n<syntax>&lt;LocationMatch\n    <var>regex</var>&gt; ... &lt;/LocationMatch&gt;</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive type=\"section\">LocationMatch</directive> directive\n    limits the scope of the enclosed directives by URL, in an identical manner\n    to <directive module=\"core\" type=\"section\">Location</directive>. However,\n    it takes a <glossary ref=\"regex\">regular expression</glossary>\n    as an argument instead of a simple string. For example:</p>\n\n    <highlight language=\"config\">\n&lt;LocationMatch \"/(extra|special)/data\"&gt;\n    # ...\n&lt;/LocationMatch&gt;\n    </highlight>\n\n    <p>would match URLs that contained the substring <code>/extra/data</code>\n    or <code>/special/data</code>.</p>\n\n    <note><p>If the intent is that a URL <strong>starts with</strong>\n    <code>/extra/data</code>, rather than merely\n    <strong>contains</strong> <code>/extra/data</code>, prefix the\n    regular expression with a <code>^</code> to require this.</p>\n\n    <highlight language=\"config\">\n&lt;LocationMatch \"^/(extra|special)/data\"&gt;\n    </highlight>\n    </note>\n\n    <p>From 2.4.8 onwards, named groups and backreferences are captured and\n    written to the environment with the corresponding name prefixed with\n    \"MATCH_\" and in upper case. This allows elements of URLs to be referenced\n    from within <a href=\"../expr.html\">expressions</a> and modules like\n    <module>mod_rewrite</module>. In order to prevent confusion, numbered\n    (unnamed) backreferences are ignored. Use named groups instead.</p>\n\n    <highlight language=\"config\">\n&lt;LocationMatch \"^/combined/(?&lt;sitename&gt;[^/]+)\"&gt;\n    Require ldap-group cn=%{env:MATCH_SITENAME},ou=combined,o=Example\n&lt;/LocationMatch&gt;\n    </highlight>\n\n    <note><title>Note about / (slash)</title>\n      <p>The slash character has special meaning depending on where in a\n      URL it appears. People may be used to its behavior in the filesystem\n      where multiple adjacent slashes are frequently collapsed to a single\n      slash (<em>i.e.</em>, <code>/home///foo</code> is the same as\n      <code>/home/foo</code>). In URL-space this is not necessarily true.\n      The <directive type=\"section\" module=\"core\">LocationMatch</directive>\n      directive and the regex version of <directive type=\"section\"\n      >Location</directive> require you to explicitly specify multiple\n      slashes if that is your intention.</p>\n\n      <p>For example, <code>&lt;LocationMatch \"^/abc\"&gt;</code> would match\n      the request URL <code>/abc</code> but not the request URL <code>\n      //abc</code>. The (non-regex) <directive type=\"section\"\n      >Location</directive> directive behaves similarly when used for\n      proxy requests. But when (non-regex) <directive type=\"section\"\n      >Location</directive> is used for non-proxy requests it will\n      implicitly match multiple slashes with a single slash. For example,\n      if you specify <code>&lt;Location \"/abc/def\"&gt;</code> and the\n      request is to <code>/abc//def</code> then it will match.</p>\n    </note>\n</usage>\n\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;\n    and &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>LogLevel</name>\n<description>Controls the verbosity of the ErrorLog</description>\n<syntax>LogLevel [<var>module</var>:]<var>level</var>\n    [<var>module</var>:<var>level</var>] ...\n</syntax>\n<default>LogLevel warn</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context>\n</contextlist>\n<compatibility>Per-module and per-directory configuration is available in\n    Apache HTTP Server 2.3.6 and later</compatibility>\n\n<usage>\n    <p><directive>LogLevel</directive> adjusts the verbosity of the\n    messages recorded in the error logs (see <directive\n    module=\"core\">ErrorLog</directive> directive). The following\n    <var>level</var>s are available, in order of decreasing\n    significance:</p>\n\n    <table border=\"1\">\n    <columnspec><column width=\".2\"/><column width=\".3\"/><column width=\".5\"/>\n    </columnspec>\n      <tr>\n        <th><strong>Level</strong> </th>\n\n        <th><strong>Description</strong> </th>\n\n        <th><strong>Example</strong> </th>\n      </tr>\n\n      <tr>\n        <td><code>emerg</code> </td>\n\n        <td>Emergencies - system is unusable.</td>\n\n        <td>\"Child cannot open lock file. Exiting\"</td>\n      </tr>\n\n      <tr>\n        <td><code>alert</code> </td>\n\n        <td>Action must be taken immediately.</td>\n\n        <td>\"getpwuid: couldn't determine user name from uid\"</td>\n      </tr>\n\n      <tr>\n        <td><code>crit</code> </td>\n\n        <td>Critical Conditions.</td>\n\n        <td>\"socket: Failed to get a socket, exiting child\"</td>\n      </tr>\n\n      <tr>\n        <td><code>error</code> </td>\n\n        <td>Error conditions.</td>\n\n        <td>\"Premature end of script headers\"</td>\n      </tr>\n\n      <tr>\n        <td><code>warn</code> </td>\n\n        <td>Warning conditions.</td>\n\n        <td>\"child process 1234 did not exit, sending another\n        SIGHUP\"</td>\n      </tr>\n\n      <tr>\n        <td><code>notice</code> </td>\n\n        <td>Normal but significant condition.</td>\n\n        <td>\"httpd: caught SIGBUS, attempting to dump core in\n        ...\"</td>\n      </tr>\n\n      <tr>\n        <td><code>info</code> </td>\n\n        <td>Informational.</td>\n\n        <td>\"Server seems busy, (you may need to increase\n        StartServers, or Min/MaxSpareServers)...\"</td>\n      </tr>\n\n      <tr>\n        <td><code>debug</code> </td>\n\n        <td>Debug-level messages</td>\n\n        <td>\"Opening config file ...\"</td>\n      </tr>\n      <tr>\n        <td><code>trace1</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"proxy: FTP: control connection complete\"</td>\n      </tr>\n      <tr>\n        <td><code>trace2</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"proxy: CONNECT: sending the CONNECT request to the remote proxy\"</td>\n      </tr>\n      <tr>\n        <td><code>trace3</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"openssl: Handshake: start\"</td>\n      </tr>\n      <tr>\n        <td><code>trace4</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"read from buffered SSL brigade, mode 0, 17 bytes\"</td>\n      </tr>\n      <tr>\n        <td><code>trace5</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"map lookup FAILED: map=rewritemap key=keyname\"</td>\n      </tr>\n      <tr>\n        <td><code>trace6</code> </td>\n\n        <td>Trace messages</td>\n\n        <td>\"cache lookup FAILED, forcing new map lookup\"</td>\n      </tr>\n      <tr>\n        <td><code>trace7</code> </td>\n\n        <td>Trace messages, dumping large amounts of data</td>\n\n        <td>\"| 0000: 02 23 44 30 13 40 ac 34 df 3d bf 9a 19 49 39 15 |\"</td>\n      </tr>\n      <tr>\n        <td><code>trace8</code> </td>\n\n        <td>Trace messages, dumping large amounts of data</td>\n\n        <td>\"| 0000: 02 23 44 30 13 40 ac 34 df 3d bf 9a 19 49 39 15 |\"</td>\n      </tr>\n    </table>\n\n    <p>When a particular level is specified, messages from all\n    other levels of higher significance will be reported as well.\n    <em>E.g.</em>, when <code>LogLevel info</code> is specified,\n    then messages with log levels of <code>notice</code> and\n    <code>warn</code> will also be posted.</p>\n\n    <p>Using a level of at least <code>crit</code> is\n    recommended.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\nLogLevel notice\n    </highlight>\n\n    <note><title>Note</title>\n      <p>When logging to a regular file, messages of the level\n      <code>notice</code> cannot be suppressed and thus are always\n      logged. However, this doesn't apply when logging is done\n      using <code>syslog</code>.</p>\n    </note>\n\n    <p>Specifying a level without a module name will reset the level\n    for all modules to that level.  Specifying a level with a module\n    name will set the level for that module only. It is possible to\n    use the module source file name, the module identifier, or the\n    module identifier with the trailing <code>_module</code> omitted\n    as module specification. This means the following three specifications\n    are equivalent:</p>\n\n    <highlight language=\"config\">\nLogLevel info ssl:warn\nLogLevel info mod_ssl.c:warn\nLogLevel info ssl_module:warn\n    </highlight>\n\n    <p>It is also possible to change the level per directory:</p>\n\n    <highlight language=\"config\">\nLogLevel info\n&lt;Directory \"/usr/local/apache/htdocs/app\"&gt;\n  LogLevel debug\n&lt;/Directory&gt;\n    </highlight>\n\n    <note>\n        Per directory loglevel configuration only affects messages that are\n        logged after the request has been parsed and that are associated with\n        the request. Log messages which are associated with the connection or\n        the server are not affected.\n    </note>\n</usage>\n<seealso><directive module=\"core\">ErrorLog</directive></seealso>\n<seealso><directive module=\"core\">ErrorLogFormat</directive></seealso>\n<seealso><a href=\"../logs.html\">Apache HTTP Server Log Files</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>MaxKeepAliveRequests</name>\n<description>Number of requests allowed on a persistent\nconnection</description>\n<syntax>MaxKeepAliveRequests <var>number</var></syntax>\n<default>MaxKeepAliveRequests 100</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive>MaxKeepAliveRequests</directive> directive\n    limits the number of requests allowed per connection when\n    <directive module=\"core\" >KeepAlive</directive> is on. If it is\n    set to <code>0</code>, unlimited requests will be allowed. We\n    recommend that this setting be kept to a high value for maximum\n    server performance.</p>\n\n    <p>For example:</p>\n\n    <highlight language=\"config\">\nMaxKeepAliveRequests 500\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>MaxRanges</name>\n<description>Number of ranges allowed before returning the complete\nresource </description>\n<syntax>MaxRanges default | unlimited | none | <var>number-of-ranges</var></syntax>\n<default>MaxRanges 200</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context>\n</contextlist>\n<compatibility>Available in Apache HTTP Server 2.3.15 and later</compatibility>\n\n<usage>\n    <p>The <directive>MaxRanges</directive> directive\n    limits the number of HTTP ranges the server is willing to\n    return to the client. If more ranges than permitted are requested,\n    the complete resource is returned instead.</p>\n\n    <dl>\n      <dt><strong>default</strong></dt>\n      <dd>Limits the number of ranges to a compile-time default of 200.</dd>\n\n      <dt><strong>none</strong></dt>\n      <dd>Range headers are ignored.</dd>\n\n      <dt><strong>unlimited</strong></dt>\n      <dd>The server does not limit the number of ranges it is\n          willing to satisfy.</dd>\n\n      <dt><var>number-of-ranges</var></dt>\n      <dd>A positive number representing the maximum number of ranges the\n      server is willing to satisfy.</dd>\n    </dl>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n    <name>MaxRangeOverlaps</name>\n    <description>Number of overlapping ranges (eg: <code>100-200,150-300</code>) allowed before returning the complete\n        resource </description>\n    <syntax>MaxRangeOverlaps default | unlimited | none | <var>number-of-ranges</var></syntax>\n    <default>MaxRangeOverlaps 20</default>\n    <contextlist><context>server config</context><context>virtual host</context>\n        <context>directory</context>\n    </contextlist>\n    <compatibility>Available in Apache HTTP Server 2.3.15 and later</compatibility>\n\n    <usage>\n        <p>The <directive>MaxRangeOverlaps</directive> directive\n            limits the number of overlapping HTTP ranges the server is willing to\n            return to the client. If more overlapping ranges than permitted are requested,\n            the complete resource is returned instead.</p>\n\n        <dl>\n            <dt><strong>default</strong></dt>\n            <dd>Limits the number of overlapping ranges to a compile-time default of 20.</dd>\n\n            <dt><strong>none</strong></dt>\n            <dd>No overlapping Range headers are allowed.</dd>\n\n            <dt><strong>unlimited</strong></dt>\n            <dd>The server does not limit the number of overlapping ranges it is\n                willing to satisfy.</dd>\n\n            <dt><var>number-of-ranges</var></dt>\n            <dd>A positive number representing the maximum number of overlapping ranges the\n                server is willing to satisfy.</dd>\n        </dl>\n    </usage>\n</directivesynopsis>\n\n<directivesynopsis>\n    <name>MaxRangeReversals</name>\n    <description>Number of range reversals (eg: <code>100-200,50-70</code>) allowed before returning the complete\n        resource </description>\n    <syntax>MaxRangeReversals default | unlimited | none | <var>number-of-ranges</var></syntax>\n    <default>MaxRangeReversals 20</default>\n    <contextlist><context>server config</context><context>virtual host</context>\n        <context>directory</context>\n    </contextlist>\n    <compatibility>Available in Apache HTTP Server 2.3.15 and later</compatibility>\n\n    <usage>\n        <p>The <directive>MaxRangeReversals</directive> directive\n            limits the number of HTTP Range reversals the server is willing to\n            return to the client. If more ranges reversals than permitted are requested,\n            the complete resource is returned instead.</p>\n\n        <dl>\n            <dt><strong>default</strong></dt>\n            <dd>Limits the number of range reversals to a compile-time default of 20.</dd>\n\n            <dt><strong>none</strong></dt>\n            <dd>No Range reversals headers are allowed.</dd>\n\n            <dt><strong>unlimited</strong></dt>\n            <dd>The server does not limit the number of range reversals it is\n                willing to satisfy.</dd>\n\n            <dt><var>number-of-ranges</var></dt>\n            <dd>A positive number representing the maximum number of range reversals the\n                server is willing to satisfy.</dd>\n        </dl>\n    </usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Mutex</name>\n<description>Configures mutex mechanism and lock file directory for all\nor specified mutexes</description>\n<syntax>Mutex <var>mechanism</var> [default|<var>mutex-name</var>] ... [OmitPID]</syntax>\n<default>Mutex default</default>\n<contextlist><context>server config</context></contextlist>\n<compatibility>Available in Apache HTTP Server 2.3.4 and later</compatibility>\n\n<usage>\n    <p>The <directive>Mutex</directive> directive sets the mechanism,\n    and optionally the lock file location, that httpd and modules use\n    to serialize access to resources.  Specify <code>default</code> as\n    the second argument to change the settings for all mutexes; specify\n    a mutex name (see table below) as the second argument to override\n    defaults only for that mutex.</p>\n\n    <p>The <directive>Mutex</directive> directive is typically used in\n    the following exceptional situations:</p>\n\n    <ul>\n        <li>change the mutex mechanism when the default mechanism selected\n        by <glossary>APR</glossary> has a functional or performance\n        problem</li>\n\n        <li>change the directory used by file-based mutexes when the\n        default directory does not support locking</li>\n    </ul>\n\n    <note><title>Supported modules</title>\n    <p>This directive only configures mutexes which have been registered\n    with the core server using the <code>ap_mutex_register()</code> API.\n    All modules bundled with httpd support the <directive>Mutex</directive>\n    directive, but third-party modules may not.  Consult the documentation\n    of the third-party module, which must indicate the mutex name(s) which\n    can be configured if this directive is supported.</p>\n    </note>\n\n    <p>The following mutex <em>mechanisms</em> are available:</p>\n    <ul>\n        <li><code>default | yes</code>\n        <p>This selects the default locking implementation, as determined by\n        <glossary>APR</glossary>.  The default locking implementation can\n        be displayed by running <program>httpd</program> with the\n        <code>-V</code> option.</p></li>\n\n        <li><code>none | no</code>\n        <p>This effectively disables the mutex, and is only allowed for a\n        mutex if the module indicates that it is a valid choice.  Consult the\n        module documentation for more information.</p></li>\n\n        <li><code>posixsem</code>\n        <p>This is a mutex variant based on a Posix semaphore.</p>\n\n        <note type=\"warning\"><title>Warning</title>\n        <p>The semaphore ownership is not recovered if a thread in the process\n        holding the mutex segfaults, resulting in a hang of the web server.</p>\n        </note>\n        </li>\n\n        <li><code>sysvsem</code>\n        <p>This is a mutex variant based on a SystemV IPC semaphore.</p>\n\n        <note type=\"warning\"><title>Warning</title>\n        <p>It is possible to \"leak\" SysV semaphores if processes crash\n        before the semaphore is removed.</p>\n\t</note>\n\n        <note type=\"warning\"><title>Security</title>\n        <p>The semaphore API allows for a denial of service attack by any\n        CGIs running under the same uid as the webserver (<em>i.e.</em>,\n        all CGIs, unless you use something like <program>suexec</program>\n        or <code>cgiwrapper</code>).</p>\n\t</note>\n        </li>\n\n        <li><code>sem</code>\n        <p>This selects the \"best\" available semaphore implementation, choosing\n        between Posix and SystemV IPC semaphores, in that order.</p></li>\n\n        <li><code>pthread</code>\n        <p>This is a mutex variant based on cross-process Posix thread\n        mutexes.</p>\n\n        <note type=\"warning\"><title>Warning</title>\n        <p>On most systems, if a child process terminates abnormally while\n        holding a mutex that uses this implementation, the server will deadlock\n        and stop responding to requests.  When this occurs, the server will\n        require a manual restart to recover.</p>\n        <p>Solaris and Linux are notable exceptions as they provide a mechanism which\n        usually allows the mutex to be recovered after a child process\n        terminates abnormally while holding a mutex.</p>\n        <p>If your system is POSIX compliant or if it implements the\n        <code>pthread_mutexattr_setrobust_np()</code> function, you may be able\n        to use the <code>pthread</code> option safely.</p>\n        </note>\n        </li>\n\n        <li><code>fcntl:/path/to/mutex</code>\n        <p>This is a mutex variant where a physical (lock-)file and the\n        <code>fcntl()</code> function are used as the mutex.</p>\n\n        <note type=\"warning\"><title>Warning</title>\n        <p>When multiple mutexes based on this mechanism are used within\n        multi-threaded, multi-process environments, deadlock errors (EDEADLK)\n        can be reported for valid mutex operations if <code>fcntl()</code>\n        is not thread-aware, such as on Solaris.</p>\n\t</note>\n        </li>\n\n        <li><code>flock:/path/to/mutex</code>\n        <p>This is similar to the <code>fcntl:/path/to/mutex</code> method\n        with the exception that the <code>flock()</code> function is used to\n        provide file locking.</p></li>\n\n        <li><code>file:/path/to/mutex</code>\n        <p>This selects the \"best\" available file locking implementation,\n        choosing between <code>fcntl</code> and <code>flock</code>, in that\n        order.</p></li>\n    </ul>\n\n    <p>Most mechanisms are only available on selected platforms, where the\n    underlying platform and <glossary>APR</glossary> support it.  Mechanisms\n    which aren't available on all platforms are <em>posixsem</em>,\n    <em>sysvsem</em>, <em>sem</em>, <em>pthread</em>, <em>fcntl</em>,\n    <em>flock</em>, and <em>file</em>.</p>\n\n    <p>With the file-based mechanisms <em>fcntl</em> and <em>flock</em>,\n    the path, if provided, is a directory where the lock file will be created.\n    The default directory is httpd's run-time file directory relative to\n    <directive module=\"core\">ServerRoot</directive>.  Always use a local disk\n    filesystem for <code>/path/to/mutex</code> and never a directory residing\n    on a NFS- or AFS-filesystem.  The basename of the file will be the mutex\n    type, an optional instance string provided by the module, and unless the\n    <code>OmitPID</code> keyword is specified, the process id of the httpd\n    parent process will be appended to make the file name unique, avoiding\n    conflicts when multiple httpd instances share a lock file directory.  For\n    example, if the mutex name is <code>mpm-accept</code> and the lock file\n    directory is <code>/var/httpd/locks</code>, the lock file name for the\n    httpd instance with parent process id 12345 would be\n    <code>/var/httpd/locks/mpm-accept.12345</code>.</p>\n\n    <note type=\"warning\"><title>Security</title>\n    <p>It is best to <em>avoid</em> putting mutex files in a world-writable\n    directory such as <code>/var/tmp</code> because someone could create\n    a denial of service attack and prevent the server from starting by\n    creating a lockfile with the same name as the one the server will try\n    to create.</p>\n    </note>\n\n    <p>The following table documents the names of mutexes used by httpd\n    and bundled modules.</p>\n\n    <table border=\"1\" style=\"zebra\">\n        <tr>\n            <th>Mutex name</th>\n            <th>Module(s)</th>\n            <th>Protected resource</th>\n\t</tr>\n        <tr>\n            <td><code>mpm-accept</code></td>\n            <td><module>prefork</module> and <module>worker</module> MPMs</td>\n            <td>incoming connections, to avoid the thundering herd problem;\n            for more information, refer to the\n            <a href=\"../misc/perf-tuning.html\">performance tuning</a>\n            documentation</td>\n\t</tr>\n        <tr>\n            <td><code>authdigest-client</code></td>\n            <td><module>mod_auth_digest</module></td>\n            <td>client list in shared memory</td>\n\t</tr>\n        <tr>\n            <td><code>authdigest-opaque</code></td>\n            <td><module>mod_auth_digest</module></td>\n            <td>counter in shared memory</td>\n\t</tr>\n        <tr>\n            <td><code>ldap-cache</code></td>\n            <td><module>mod_ldap</module></td>\n            <td>LDAP result cache</td>\n\t</tr>\n        <tr>\n            <td><code>rewrite-map</code></td>\n            <td><module>mod_rewrite</module></td>\n            <td>communication with external mapping programs, to avoid\n            intermixed I/O from multiple requests</td>\n\t</tr>\n        <tr>\n            <td><code>ssl-cache</code></td>\n            <td><module>mod_ssl</module></td>\n            <td>SSL session cache</td>\n\t</tr>\n        <tr>\n            <td><code>ssl-stapling</code></td>\n            <td><module>mod_ssl</module></td>\n            <td>OCSP stapling response cache</td>\n\t</tr>\n        <tr>\n            <td><code>watchdog-callback</code></td>\n            <td><module>mod_watchdog</module></td>\n            <td>callback function of a particular client module</td>\n\t</tr>\n    </table>\n\n    <p>The <code>OmitPID</code> keyword suppresses the addition of the httpd\n    parent process id from the lock file name.</p>\n\n    <p>In the following example, the mutex mechanism for the MPM accept\n    mutex will be changed from the compiled-in default to <code>fcntl</code>,\n    with the associated lock file created in directory\n    <code>/var/httpd/locks</code>.  The mutex mechanism for all other mutexes\n    will be changed from the compiled-in default to <code>sysvsem</code>.</p>\n\n    <highlight language=\"config\">\nMutex sysvsem default\nMutex fcntl:/var/httpd/locks mpm-accept\n    </highlight>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>NameVirtualHost</name>\n<description>DEPRECATED: Designates an IP address for name-virtual\nhosting</description>\n<syntax>NameVirtualHost <var>addr</var>[:<var>port</var>]</syntax>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n\n<p>Prior to 2.3.11, <directive>NameVirtualHost</directive> was required\nto instruct the server that a particular IP address and port combination\nwas usable as a name-based virtual host.  In 2.3.11 and later,\nany time an IP address and port combination is used in multiple virtual\nhosts, name-based virtual hosting is automatically enabled for that address.</p>\n\n<p>This directive currently has no effect.</p>\n</usage>\n\n<seealso><a href=\"../vhosts/\">Virtual Hosts\ndocumentation</a></seealso>\n\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Options</name>\n<description>Configures what features are available in a particular\ndirectory</description>\n<syntax>Options\n    [+|-]<var>option</var> [[+|-]<var>option</var>] ...</syntax>\n<default>Options FollowSymlinks</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>Options</override>\n<compatibility>The default was changed from All to FollowSymlinks in 2.3.11</compatibility>\n\n<usage>\n    <p>The <directive>Options</directive> directive controls which\n    server features are available in a particular directory.</p>\n\n    <p><var>option</var> can be set to <code>None</code>, in which\n    case none of the extra features are enabled, or one or more of\n    the following:</p>\n\n    <dl>\n      <dt><code>All</code></dt>\n\n      <dd>All options except for <code>MultiViews</code>.</dd>\n\n      <dt><code>ExecCGI</code></dt>\n\n      <dd>\n      Execution of CGI scripts using <module>mod_cgi</module>\n      is permitted.</dd>\n\n      <dt><code>FollowSymLinks</code></dt>\n\n      <dd>\n      The server will follow symbolic links in this directory. This is\n      the default setting.\n      <note>\n      <p>Even though the server follows the symlink it does <em>not</em>\n      change the pathname used to match against <directive type=\"section\"\n      module=\"core\">Directory</directive> sections.</p>\n\n      <p>The <code>FollowSymLinks</code> and\n      <code>SymLinksIfOwnerMatch</code> <directive\n      module=\"core\">Options</directive> work only in <directive\n      type=\"section\" module=\"core\">Directory</directive> sections or\n      <code>.htaccess</code> files.</p>\n\n      <p>Omitting this option should not be considered a security restriction,\n      since symlink testing is subject to race conditions that make it\n      circumventable.</p>\n      </note></dd>\n\n      <dt><code>Includes</code></dt>\n\n      <dd>\n      Server-side includes provided by <module>mod_include</module>\n      are permitted.</dd>\n\n      <dt><code>IncludesNOEXEC</code></dt>\n\n      <dd>\n\n      Server-side includes are permitted, but the <code>#exec\n      cmd</code> and <code>#exec cgi</code> are disabled. It is still\n      possible to <code>#include virtual</code> CGI scripts from\n      <directive module=\"mod_alias\">ScriptAlias</directive>ed\n      directories.</dd>\n\n      <dt><code>Indexes</code></dt>\n\n      <dd>\n      If a URL which maps to a directory is requested and there\n      is no <directive module=\"mod_dir\">DirectoryIndex</directive>\n      (<em>e.g.</em>, <code>index.html</code>) in that directory, then\n      <module>mod_autoindex</module> will return a formatted listing\n      of the directory.</dd>\n\n      <dt><code>MultiViews</code></dt>\n\n      <dd>\n      <a href=\"../content-negotiation.html\">Content negotiated</a>\n      \"MultiViews\" are allowed using\n      <module>mod_negotiation</module>.\n      <note><title>Note</title> <p>This option gets ignored if set\n      anywhere other than <directive module=\"core\" type=\"section\"\n      >Directory</directive>, as <module>mod_negotiation</module>\n      needs real resources to compare against and evaluate from.</p></note>\n      </dd>\n\n      <dt><code>SymLinksIfOwnerMatch</code></dt>\n\n      <dd>The server will only follow symbolic links for which the\n      target file or directory is owned by the same user id as the\n      link.\n\n      <note><title>Note</title>\n      <p>The <code>FollowSymLinks</code> and\n      <code>SymLinksIfOwnerMatch</code> <directive\n      module=\"core\">Options</directive> work only in <directive\n      type=\"section\" module=\"core\">Directory</directive> sections or\n      <code>.htaccess</code> files.</p>\n\n      <p>This option should not be considered a security restriction,\n      since symlink testing is subject to race conditions that make it\n      circumventable.</p>\n      </note> </dd>\n    </dl>\n\n    <p>Normally, if multiple <directive>Options</directive> could\n    apply to a directory, then the most specific one is used and\n    others are ignored; the options are not merged. (See <a\n    href=\"../sections.html#merging\">how sections are merged</a>.)\n    However if <em>all</em> the options on the\n    <directive>Options</directive> directive are preceded by a\n    <code>+</code> or <code>-</code> symbol, the options are\n    merged. Any options preceded by a <code>+</code> are added to the\n    options currently in force, and any options preceded by a\n    <code>-</code> are removed from the options currently in\n    force. </p>\n\n    <note><title>Note</title>\n    <p>Mixing <directive>Options</directive> with a <code>+</code> or\n    <code>-</code> with those without is not valid syntax and will be\n    rejected during server startup by the syntax check with an abort.</p>\n    </note>\n\n    <p>For example, without any <code>+</code> and <code>-</code> symbols:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/web/docs\"&gt;\n  Options Indexes FollowSymLinks\n&lt;/Directory&gt;\n\n&lt;Directory \"/web/docs/spec\"&gt;\n  Options Includes\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>then only <code>Includes</code> will be set for the\n    <code>/web/docs/spec</code> directory. However if the second\n    <directive>Options</directive> directive uses the <code>+</code> and\n    <code>-</code> symbols:</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/web/docs\"&gt;\n  Options Indexes FollowSymLinks\n&lt;/Directory&gt;\n\n&lt;Directory \"/web/docs/spec\"&gt;\n  Options +Includes -Indexes\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>then the options <code>FollowSymLinks</code> and\n    <code>Includes</code> are set for the <code>/web/docs/spec</code>\n    directory.</p>\n\n    <note><title>Note</title>\n      <p>Using <code>-IncludesNOEXEC</code> or\n      <code>-Includes</code> disables server-side includes completely\n      regardless of the previous setting.</p>\n    </note>\n\n    <p>The default in the absence of any other settings is\n    <code>FollowSymlinks</code>.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>Protocol</name>\n<description>Protocol for a listening socket</description>\n<syntax>Protocol <var>protocol</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n<compatibility>Available in Apache 2.1.5 and later.\nOn Windows, from Apache 2.3.3 and later.</compatibility>\n\n<usage>\n    <p>This directive specifies the protocol used for a specific listening socket.\n       The protocol is used to determine which module should handle a request and\n       to apply protocol specific optimizations with the <directive>AcceptFilter</directive>\n       directive.</p>\n \n    <p>This directive not required for most\n       configurations. If not specified, <code>https</code> is the default for\n       port 443 and <code>http</code> the default for all other ports.  The\n       protocol is used to determine which module should handle a request, and\n       to apply protocol specific optimizations with the\n       <directive module=\"core\">AcceptFilter</directive> directive.</p>\n\n    <p>For example, if you are running <code>https</code> on a non-standard port,\n       specify the protocol explicitly:</p>\n\n    <highlight language=\"config\">\nProtocol https\n    </highlight>\n\n    <p>You can also specify the protocol using the <directive module=\"mpm_common\">Listen</directive> directive.</p>\n</usage>\n<seealso><directive module=\"core\">AcceptFilter</directive></seealso>\n<seealso><directive module=\"mpm_common\">Listen</directive></seealso>\n</directivesynopsis>\n\n\n<directivesynopsis>\n    <name>Protocols</name>\n    <description>Protocols available for a server/virtual host</description>\n    <syntax>Protocols <var>protocol</var> ...</syntax>\n    <default>Protocols http/1.1</default>\n    <contextlist><context>server config</context><context>virtual host</context></contextlist>\n    <compatibility>Only available from Apache 2.4.17 and later.</compatibility>\n    \n    <usage>\n        <p>This directive specifies the list of protocols supported for a\n            server/virtual host. The list determines the allowed protocols\n            a client may negotiate for this server/host.</p>\n        \n        <p>You need to set protocols if you want to extend the available\n            protocols for a server/host. By default, only the http/1.1 protocol\n            (which includes the compatibility with 1.0 and 0.9 clients) is\n            allowed.</p>\n        \n        <p>For example, if you want to support HTTP/2 for a server with TLS, \n            specify:</p>\n        \n        <highlight language=\"config\">\nProtocols h2 http/1.1\n        </highlight>\n\n        <p>Valid protocols are <code>http/1.1</code> for http and https connections,\n            <code>h2</code> on https connections and <code>h2c</code> for http\n            connections. Modules may enable more protocols.</p>\n        \n        <p>It is safe to specify protocols that are unavailable/disabled. Such\n        protocol names will simply be ignored.</p>\n        \n        <p>Protocols specified in base servers are inherited for virtual hosts \n            only if the virtual host has no own Protocols directive. Or, the other\n            way around, Protocols directives in virtual hosts replace any\n            such directive in the base server.\n        </p>\n\n    </usage>\n    <seealso><directive module=\"core\">ProtocolsHonorOrder</directive></seealso>\n</directivesynopsis>\n\n\n<directivesynopsis>\n    <name>ProtocolsHonorOrder</name>\n    <description>Determines if order of Protocols determines precedence during negotiation</description>\n    <syntax>ProtocolsHonorOrder On|Off</syntax>\n    <default>ProtocolsHonorOrder On</default>\n    <contextlist><context>server config</context><context>virtual host</context></contextlist>\n    <compatibility>Only available from Apache 2.4.17 and later.</compatibility>\n    \n    <usage>\n        <p>This directive specifies if the server should honor the order in which\n        the <directive>Protocols</directive> directive lists protocols.</p>\n        \n        <p>If configured Off, the client supplied list order of protocols has \n            precedence over the order in the server configuration.</p>\n        \n        <p>With <directive>ProtocolsHonorOrder</directive> set to <code>on</code> \n            (default), the client ordering does not matter and only the ordering \n            in the server settings influences the outcome of the protocol \n            negotiation.</p>\n        \n    </usage>\n    <seealso><directive module=\"core\">Protocols</directive></seealso>\n</directivesynopsis>\n\n\n<directivesynopsis>\n<name>ReadBufferSize</name>\n<description>Size of the buffers used to read data</description>\n<syntax>ReadBufferSize <var>bytes</var></syntax>\n<default>ReadBufferSize 8192</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context></contextlist>\n<compatibility>2.4.27 and later</compatibility>\n\n<usage>\n    <p>This directive allows to configure the size (in bytes) of the memory\n    buffer used to read data from the network or files.</p>\n\n    <p>A larger buffer can increase peformances with larger data, but consumes\n    more memory per connection. The minimum configurable size is\n    <var>1024</var>.</p>\n</usage>\n</directivesynopsis>\n \n\n<directivesynopsis>\n    <name>RegexDefaultOptions</name>\n    <description>Allow to configure global/default options for regexes</description>\n    <syntax>RegexDefaultOptions [none] [+|-]<var>option</var> [[+|-]<var>option</var>] ...</syntax>\n    <default>RegexDefaultOptions DOTALL DOLLAR_ENDONLY</default>\n    <contextlist><context>server config</context></contextlist>\n    <compatibility>Only available from Apache 2.4.30 and later.</compatibility>\n    \n    <usage>\n        <p>This directive adds some default behavior to ANY regular expression\n        used afterwards.</p>\n\n        <p>Any option preceded by a '+' is added to the already set options.<br />\n        Any option preceded by a '-' is removed from the already set options.<br />\n        Any option without a '+' or a '-' will be set, removing any other\n        already set option.<br />\n        The <code>none</code> keyword resets any already set options.</p>\n\n        <p><var>option</var> can be:</p>\n        <dl>\n            <dt><code>ICASE</code></dt>\n            <dd>Use a case-insensitive match.</dd>\n\n            <dt><code>EXTENDED</code></dt>\n            <dd>Perl's /x flag, ignore (unescaped-)spaces and comments in the pattern.</dd>\n\n            <dt><code>DOTALL</code></dt>\n            <dd>Perl's /s flag, '.' matches newline characters.</dd>\n\n            <dt><code>DOLLAR_ENDONLY</code></dt>\n            <dd>'$' matches at end of subject string only.</dd>\n        </dl>\n        <highlight language=\"config\">\n# Add the ICASE option for all regexes by default\nRegexDefaultOptions +ICASE\n...\n# Remove the default DOLLAR_ENDONLY option, but keep any other one\nRegexDefaultOptions -DOLLAR_ENDONLY\n...\n# Set the DOTALL option only, resetting any other one\nRegexDefaultOptions DOTALL\n...\n# Reset all defined options\nRegexDefaultOptions none\n...\n        </highlight>\n    </usage>\n</directivesynopsis>\n\n\n<directivesynopsis>\n<name>RLimitCPU</name>\n<description>Limits the CPU consumption of processes launched\nby Apache httpd children</description>\n<syntax>RLimitCPU <var>seconds</var>|max [<var>seconds</var>|max]</syntax>\n<default>Unset; uses operating system defaults</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context></contextlist>\n<override>All</override>\n\n<usage>\n    <p>Takes 1 or 2 parameters. The first parameter sets the soft\n    resource limit for all processes and the second parameter sets\n    the maximum resource limit. Either parameter can be a number,\n    or <code>max</code> to indicate to the server that the limit should\n    be set to the maximum allowed by the operating system\n    configuration. Raising the maximum resource limit requires that\n    the server is running as <code>root</code> or in the initial startup\n    phase.</p>\n\n    <p>This applies to processes forked from Apache httpd children\n    servicing requests, not the Apache httpd children themselves. This\n    includes CGI scripts and SSI exec commands, but not any\n    processes forked from the Apache httpd parent, such as piped\n    logs.</p>\n\n    <p>CPU resource limits are expressed in seconds per\n    process.</p>\n</usage>\n<seealso><directive module=\"core\">RLimitMEM</directive></seealso>\n<seealso><directive module=\"core\">RLimitNPROC</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>RLimitMEM</name>\n<description>Limits the memory consumption of processes launched\nby Apache httpd children</description>\n<syntax>RLimitMEM <var>bytes</var>|max [<var>bytes</var>|max]</syntax>\n<default>Unset; uses operating system defaults</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context></contextlist>\n<override>All</override>\n\n<usage>\n    <p>Takes 1 or 2 parameters. The first parameter sets the soft\n    resource limit for all processes and the second parameter sets\n    the maximum resource limit. Either parameter can be a number,\n    or <code>max</code> to indicate to the server that the limit should\n    be set to the maximum allowed by the operating system\n    configuration. Raising the maximum resource limit requires that\n    the server is running as <code>root</code> or in the initial startup\n    phase.</p>\n\n    <p>This applies to processes forked from Apache httpd children\n    servicing requests, not the Apache httpd children themselves. This\n    includes CGI scripts and SSI exec commands, but not any\n    processes forked from the Apache httpd parent, such as piped\n    logs.</p>\n\n    <p>Memory resource limits are expressed in bytes per\n    process.</p>\n</usage>\n<seealso><directive module=\"core\">RLimitCPU</directive></seealso>\n<seealso><directive module=\"core\">RLimitNPROC</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>RLimitNPROC</name>\n<description>Limits the number of processes that can be launched by\nprocesses launched by Apache httpd children</description>\n<syntax>RLimitNPROC <var>number</var>|max [<var>number</var>|max]</syntax>\n<default>Unset; uses operating system defaults</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context></contextlist>\n<override>All</override>\n\n<usage>\n    <p>Takes 1 or 2 parameters. The first parameter sets the soft\n    resource limit for all processes, and the second parameter sets\n    the maximum resource limit. Either parameter can be a number,\n    or <code>max</code> to indicate to the server that the limit\n    should be set to the maximum allowed by the operating system\n    configuration. Raising the maximum resource limit requires that\n    the server is running as <code>root</code> or in the initial startup\n    phase.</p>\n\n    <p>This applies to processes forked from Apache httpd children\n    servicing requests, not the Apache httpd children themselves. This\n    includes CGI scripts and SSI exec commands, but not any\n    processes forked from the Apache httpd parent, such as piped\n    logs.</p>\n\n    <p>Process limits control the number of processes per user.</p>\n\n    <note><title>Note</title>\n      <p>If CGI processes are <strong>not</strong> running\n      under user ids other than the web server user id, this directive\n      will limit the number of processes that the server itself can\n      create. Evidence of this situation will be indicated by\n      <strong><code>cannot fork</code></strong> messages in the\n      <code>error_log</code>.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">RLimitMEM</directive></seealso>\n<seealso><directive module=\"core\">RLimitCPU</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ScriptInterpreterSource</name>\n<description>Technique for locating the interpreter for CGI\nscripts</description>\n<syntax>ScriptInterpreterSource Registry|Registry-Strict|Script</syntax>\n<default>ScriptInterpreterSource Script</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context></contextlist>\n<override>FileInfo</override>\n<compatibility>Win32 only.</compatibility>\n\n<usage>\n    <p>This directive is used to control how Apache httpd finds the\n    interpreter used to run CGI scripts. The default setting is\n    <code>Script</code>. This causes Apache httpd to use the interpreter pointed to\n    by the shebang line (first line, starting with <code>#!</code>) in the\n    script. On Win32 systems this line usually looks like:</p>\n\n    <highlight language=\"perl\">\n#!C:/Perl/bin/perl.exe\n    </highlight>\n\n    <p>or, if <code>perl</code> is in the <code>PATH</code>, simply:</p>\n\n    <highlight language=\"perl\">\n#!perl\n    </highlight>\n\n    <p>Setting <code>ScriptInterpreterSource Registry</code> will\n    cause the Windows Registry tree <code>HKEY_CLASSES_ROOT</code> to be\n    searched using the script file extension (e.g., <code>.pl</code>) as a\n    search key. The command defined by the registry subkey\n    <code>Shell\\ExecCGI\\Command</code> or, if it does not exist, by the subkey\n    <code>Shell\\Open\\Command</code> is used to open the script file. If the\n    registry keys cannot be found, Apache httpd falls back to the behavior of the\n    <code>Script</code> option.</p>\n\n    <note type=\"warning\"><title>Security</title>\n    <p>Be careful when using <code>ScriptInterpreterSource\n    Registry</code> with <directive\n    module=\"mod_alias\">ScriptAlias</directive>'ed directories, because\n    Apache httpd will try to execute <strong>every</strong> file within this\n    directory. The <code>Registry</code> setting may cause undesired\n    program calls on files which are typically not executed. For\n    example, the default open command on <code>.htm</code> files on\n    most Windows systems will execute Microsoft Internet Explorer, so\n    any HTTP request for an <code>.htm</code> file existing within the\n    script directory would start the browser in the background on the\n    server. This is a good way to crash your system within a minute or\n    so.</p>\n    </note>\n\n    <p>The option <code>Registry-Strict</code>\n    does the same thing as <code>Registry</code> but uses only the\n    subkey <code>Shell\\ExecCGI\\Command</code>. The\n    <code>ExecCGI</code> key is not a common one. It must be\n    configured manually in the windows registry and hence prevents\n    accidental program calls on your system.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>SeeRequestTail</name>\n<description>Determine if mod_status displays the first 63 characters\nof a request or the last 63, assuming the request itself is greater than\n63 chars.</description>\n<syntax>SeeRequestTail On|Off</syntax>\n<default>SeeRequestTail Off</default>\n<contextlist><context>server config</context></contextlist>\n<compatibility>Available in Apache httpd 2.2.7 and later.</compatibility>\n\n<usage>\n    <p>mod_status with <code>ExtendedStatus On</code>\n    displays the actual request being handled.\n    For historical purposes, only 63 characters of the request\n    are actually stored for display purposes. This directive\n    controls whether the 1st 63 characters are stored (the previous\n    behavior and the default) or if the last 63 characters are. This\n    is only applicable, of course, if the length of the request is\n    64 characters or greater.</p>\n\n    <p>If Apache httpd is handling <code\n    >GET&nbsp;/disk1/storage/apache/htdocs/images/imagestore1/food/apples.jpg&nbsp;HTTP/1.1</code\n    > mod_status displays as follows:\n    </p>\n\n    <table border=\"1\">\n      <tr>\n        <th>Off (default)</th>\n        <td>GET&nbsp;/disk1/storage/apache/htdocs/images/imagestore1/food/apples</td>\n      </tr>\n      <tr>\n        <th>On</th>\n        <td>orage/apache/htdocs/images/imagestore1/food/apples.jpg&nbsp;HTTP/1.1</td>\n      </tr>\n    </table>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerAdmin</name>\n<description>Email address that the server includes in error\nmessages sent to the client</description>\n<syntax>ServerAdmin <var>email-address</var>|<var>URL</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive>ServerAdmin</directive> sets the contact address\n    that the server includes in any error messages it returns to the\n    client. If the <code>httpd</code> doesn't recognize the supplied argument\n    as an URL, it\n    assumes, that it's an <var>email-address</var> and prepends it with\n    <code>mailto:</code> in hyperlink targets. However, it's recommended to\n    actually use an email address, since there are a lot of CGI scripts that\n    make that assumption. If you want to use an URL, it should point to another\n    server under your control. Otherwise users may not be able to contact you in\n    case of errors.</p>\n\n    <p>It may be worth setting up a dedicated address for this, e.g.</p>\n\n    <highlight language=\"config\">\nServerAdmin www-admin@foo.example.com\n    </highlight>\n    <p>as users do not always mention that they are talking about the\n    server!</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerAlias</name>\n<description>Alternate names for a host used when matching requests\nto name-virtual hosts</description>\n<syntax>ServerAlias <var>hostname</var> [<var>hostname</var>] ...</syntax>\n<contextlist><context>virtual host</context></contextlist>\n\n<usage>\n    <p>The <directive>ServerAlias</directive> directive sets the\n    alternate names for a host, for use with <a\n    href=\"../vhosts/name-based.html\">name-based virtual hosts</a>. The\n    <directive>ServerAlias</directive> may include wildcards, if appropriate.</p>\n\n    <highlight language=\"config\">\n&lt;VirtualHost *:80&gt;\n  ServerName server.example.com\n  ServerAlias server server2.example.com server2\n  ServerAlias *.example.com\n  UseCanonicalName Off\n  # ...\n&lt;/VirtualHost&gt;\n    </highlight>\n\n    <p>Name-based virtual hosts for the best-matching set of  <directive\n    type=\"section\" module=\"core\">virtualhost</directive>s are processed\n    in the order they appear in the configuration.  The first matching <directive\n    module=\"core\">ServerName</directive> or <directive module=\"core\"\n    >ServerAlias</directive> is used, with no different precedence for wildcards\n    (nor for ServerName vs. ServerAlias).  </p>\n\n    <p>The complete list of names in the <directive type=\"section\" module=\"core\"\n    >VirtualHost</directive>\n    directive are treated just like a (non wildcard)\n    <directive>ServerAlias</directive>.</p>\n\n</usage>\n<seealso><directive module=\"core\">UseCanonicalName</directive></seealso>\n<seealso><a href=\"../vhosts/\">Apache HTTP Server Virtual Host documentation</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerName</name>\n<description>Hostname and port that the server uses to identify\nitself</description>\n<syntax>ServerName [<var>scheme</var>://]<var>domain-name</var>|<var>ip-address</var>[:<var>port</var>]</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n\n<usage>\n    <p>The <directive>ServerName</directive> directive sets the\n    request scheme, hostname and port that the server uses to identify itself.\n    </p>\n\n    <p><directive>ServerName</directive> is used (possibly\n    in conjunction with <directive module=\"core\">ServerAlias</directive>) to uniquely\n    identify a virtual host, when using <a\n    href=\"../vhosts/name-based.html\">name-based virtual hosts</a>.</p>\n\n    <p>Additionally, this is used when\n    creating self-referential redirection URLs when \n    <directive module=\"core\">UseCanonicalName</directive> is set to a non-default\n    value.</p>\n\n    <p>For example, if the name of the\n    machine hosting the web server is <code>simple.example.com</code>,\n    but the machine also has the DNS alias <code>www.example.com</code>\n    and you wish the web server to be so identified, the following\n    directive should be used:</p>\n\n    <highlight language=\"config\">\nServerName www.example.com\n    </highlight>\n\n    <p>The <directive>ServerName</directive> directive\n    may appear anywhere within the definition of a server. However,\n    each appearance overrides the previous appearance (within that\n    server).</p>\n\n    <p>If no <directive>ServerName</directive> is specified, the\n    server attempts to deduce the client visible hostname by first asking \n    the operating system for the system hostname, and if that fails, \n    performing a reverse lookup on an IP address present on the system.</p>\n\n    <p>If no port is specified in the\n    <directive>ServerName</directive>, then the server will use the\n    port from the incoming request. For optimal reliability and\n    predictability, you should specify an explicit hostname and port\n    using the <directive>ServerName</directive> directive.</p>\n\n    <p>If you are using <a\n    href=\"../vhosts/name-based.html\">name-based virtual hosts</a>,\n    the <directive>ServerName</directive> inside a\n    <directive type=\"section\" module=\"core\">VirtualHost</directive>\n    section specifies what hostname must appear in the request's\n    <code>Host:</code> header to match this virtual host.</p>\n\n    <p>Sometimes, the server runs behind a device that processes SSL,\n    such as a reverse proxy, load balancer or SSL offload\n    appliance. When this is the case, specify the\n    <code>https://</code> scheme and the port number to which the\n    clients connect in the <directive>ServerName</directive> directive\n    to make sure that the server generates the correct\n    self-referential URLs.\n    </p>\n\n    <p>See the description of the\n    <directive module=\"core\">UseCanonicalName</directive> and\n    <directive module=\"core\">UseCanonicalPhysicalPort</directive> directives for\n    settings which determine whether self-referential URLs (e.g., by the\n    <module>mod_dir</module> module) will refer to the\n    specified port, or to the port number given in the client's request.\n    </p>\n\n    <note type=\"warning\">\n    <p>Failure to set <directive>ServerName</directive> to a name that\n    your server can resolve to an IP address will result in a startup\n    warning. <code>httpd</code> will then use whatever hostname it can\n    determine, using the system's <code>hostname</code> command. This\n    will almost never be the hostname you actually want.</p>\n    <example>\n    httpd: Could not reliably determine the server's fully qualified domain name, using rocinante.local for ServerName\n    </example>\n    </note>\n\n</usage>\n\n<seealso><a href=\"../dns-caveats.html\">Issues Regarding DNS and\n    Apache HTTP Server</a></seealso>\n<seealso><a href=\"../vhosts/\">Apache HTTP Server virtual host\n    documentation</a></seealso>\n<seealso><directive module=\"core\">UseCanonicalName</directive></seealso>\n<seealso><directive module=\"core\">UseCanonicalPhysicalPort</directive></seealso>\n<seealso><directive module=\"core\">ServerAlias</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerPath</name>\n<description>Legacy URL pathname for a name-based virtual host that\nis accessed by an incompatible browser</description>\n<syntax>ServerPath <var>URL-path</var></syntax>\n<contextlist><context>virtual host</context></contextlist>\n\n<usage>\n    <p>The <directive>ServerPath</directive> directive sets the legacy\n    URL pathname for a host, for use with <a\n    href=\"../vhosts/\">name-based virtual hosts</a>.</p>\n</usage>\n<seealso><a href=\"../vhosts/\">Apache HTTP Server Virtual Host documentation</a></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerRoot</name>\n<description>Base directory for the server installation</description>\n<syntax>ServerRoot <var>directory-path</var></syntax>\n<default>ServerRoot /usr/local/apache</default>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p>The <directive>ServerRoot</directive> directive sets the\n    directory in which the server lives. Typically it will contain the\n    subdirectories <code>conf/</code> and <code>logs/</code>. Relative\n    paths in other configuration directives (such as <directive\n    module=\"core\">Include</directive> or <directive\n    module=\"mod_so\">LoadModule</directive>, for example) are taken as\n    relative to this directory.</p>\n\n    <highlight language=\"config\">\nServerRoot \"/home/httpd\"\n    </highlight>\n\n    <p>The default location of <directive>ServerRoot</directive> may be\n    modified by using the <code>--prefix</code> argument to\n    <a href=\"../programs/configure.html\"><code>configure</code></a>, and\n    most third-party distributions of the server have a different\n    default location from the one listed above.</p>\n\n</usage>\n<seealso><a href=\"../invoking.html\">the <code>-d</code>\n    option to <code>httpd</code></a></seealso>\n<seealso><a href=\"../misc/security_tips.html#serverroot\">the\n    security tips</a> for information on how to properly set\n    permissions on the <directive>ServerRoot</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerSignature</name>\n<description>Configures the footer on server-generated documents</description>\n<syntax>ServerSignature On|Off|EMail</syntax>\n<default>ServerSignature Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>All</override>\n\n<usage>\n    <p>The <directive>ServerSignature</directive> directive allows the\n    configuration of a trailing footer line under server-generated\n    documents (error messages, <module>mod_proxy</module> ftp directory\n    listings, <module>mod_info</module> output, ...). The reason why you\n    would want to enable such a footer line is that in a chain of proxies,\n    the user often has no possibility to tell which of the chained servers\n    actually produced a returned error message.</p>\n\n    <p>The <code>Off</code>\n    setting, which is the default, suppresses the footer line.\n    The <code>On</code> setting simply adds a line with the\n    server version number and <directive\n    module=\"core\">ServerName</directive> of the serving virtual host,\n    and the <code>EMail</code> setting additionally creates a\n    \"mailto:\" reference to the <directive\n    module=\"core\">ServerAdmin</directive> of the referenced\n    document.</p>\n\n    <p>The details of the server version number\n    presented are controlled by the <directive\n    module=\"core\">ServerTokens</directive> directive.</p>\n</usage>\n<seealso><directive module=\"core\">ServerTokens</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>ServerTokens</name>\n<description>Configures the <code>Server</code> HTTP response\nheader</description>\n<syntax>ServerTokens Major|Minor|Min[imal]|Prod[uctOnly]|OS|Full</syntax>\n<default>ServerTokens Full</default>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p>This directive controls whether <code>Server</code> response\n    header field which is sent back to clients includes a\n    description of the generic OS-type of the server as well as\n    information about compiled-in modules.</p>\n\n    <dl>\n      <dt><code>ServerTokens Full</code> (or not specified)</dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server: Apache/2.4.2\n      (Unix) PHP/4.2.2 MyMod/1.2</code></dd>\n\n      <dt><code>ServerTokens Prod[uctOnly]</code></dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server:\n      Apache</code></dd>\n\n      <dt><code>ServerTokens Major</code></dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server:\n      Apache/2</code></dd>\n\n      <dt><code>ServerTokens Minor</code></dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server:\n      Apache/2.4</code></dd>\n\n      <dt><code>ServerTokens Min[imal]</code></dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server:\n      Apache/2.4.2</code></dd>\n\n      <dt><code>ServerTokens OS</code></dt>\n\n      <dd>Server sends (<em>e.g.</em>): <code>Server: Apache/2.4.2\n      (Unix)</code></dd>\n\n    </dl>\n\n    <p>This setting applies to the entire server, and cannot be\n    enabled or disabled on a virtualhost-by-virtualhost basis.</p>\n\n    <p>This directive also controls the\n    information presented by the <directive\n    module=\"core\">ServerSignature</directive> directive.</p>\n\n    <note>Setting <directive>ServerTokens</directive> to less than\n    <code>minimal</code> is not recommended because it makes it more\n    difficult to debug interoperational problems. Also note that\n    disabling the Server: header does nothing at all to make your\n    server more secure. The idea of \"security through obscurity\"\n    is a myth and leads to a false sense of safety.</note>\n\n</usage>\n<seealso><directive module=\"core\">ServerSignature</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>SetHandler</name>\n<description>Forces all matching files to be processed by a\nhandler</description>\n<syntax>SetHandler <var>handler-name</var>|none|<var>expression</var></syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>expression argument 2.4.19 and later</compatibility>\n\n<usage>\n    <p>When placed into an <code>.htaccess</code> file or a\n    <directive type=\"section\" module=\"core\">Directory</directive> or\n    <directive type=\"section\" module=\"core\">Location</directive>\n    section, this directive forces all matching files to be parsed\n    through the <a href=\"../handler.html\">handler</a> given by\n    <var>handler-name</var>. For example, if you had a directory you\n    wanted to be parsed entirely as imagemap rule files, regardless\n    of extension, you might put the following into an\n    <code>.htaccess</code> file in that directory:</p>\n\n    <highlight language=\"config\">\nSetHandler imap-file\n    </highlight>\n\n    <p>Another example: if you wanted to have the server display a\n    status report whenever a URL of\n    <code>http://servername/status</code> was called, you might put\n    the following into <code>httpd.conf</code>:</p>\n\n    <highlight language=\"config\">\n&lt;Location \"/status\"&gt;\n  SetHandler server-status\n&lt;/Location&gt;\n    </highlight>\n\n    <p>You could also use this directive to configure a particular\n    handler for files with a particular file extension. For example:</p>\n\n    <highlight language=\"config\">\n&lt;FilesMatch \"\\.php$\"&gt;\n    SetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;\n    </highlight>\n\n    <p>String-valued expressions can be used to reference per-request \n    variables, including backreferences to named regular expressions:</p>\n\n    <highlight language=\"config\">\n&lt;LocationMatch ^/app/(?&lt;sub&gt;[^/]+)/&gt;\n     SetHandler \"proxy:unix:/var/run/app_%{env:MATCH_sub}.sock|fcgi://localhost:8080\"\n&lt;/LocationMatch&gt;\n    </highlight>\n\n    <p>You can override an earlier defined <directive>SetHandler</directive>\n    directive by using the value <code>None</code>.</p>\n\n    <note><title>Note</title>\n    <p>Because <directive>SetHandler</directive> overrides default handlers,\n    normal behavior such as handling of URLs ending in a slash (/) as\n    directories or index files is suppressed.</p></note>\n</usage>\n\n<seealso><directive module=\"mod_mime\">AddHandler</directive></seealso>\n\n</directivesynopsis>\n\n<directivesynopsis>\n<name>SetInputFilter</name>\n<description>Sets the filters that will process client requests and POST\ninput</description>\n<syntax>SetInputFilter <var>filter</var>[;<var>filter</var>...]</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>The <directive>SetInputFilter</directive> directive sets the\n    filter or filters which will process client requests and POST\n    input when they are received by the server. This is in addition to\n    any filters defined elsewhere, including the\n    <directive module=\"mod_mime\">AddInputFilter</directive>\n    directive.</p>\n\n    <p>If more than one filter is specified, they must be separated\n    by semicolons in the order in which they should process the\n    content.</p>\n</usage>\n<seealso><a href=\"../filter.html\">Filters</a> documentation</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>SetOutputFilter</name>\n<description>Sets the filters that will process responses from the\nserver</description>\n<syntax>SetOutputFilter <var>filter</var>[;<var>filter</var>...]</syntax>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context><context>.htaccess</context>\n</contextlist>\n<override>FileInfo</override>\n\n<usage>\n    <p>The <directive>SetOutputFilter</directive> directive sets the filters\n    which will process responses from the server before they are\n    sent to the client. This is in addition to any filters defined\n    elsewhere, including the\n    <directive module=\"mod_mime\">AddOutputFilter</directive>\n    directive.</p>\n\n    <p>For example, the following configuration will process all files\n    in the <code>/www/data/</code> directory for server-side\n    includes.</p>\n\n    <highlight language=\"config\">\n&lt;Directory \"/www/data/\"&gt;\n  SetOutputFilter INCLUDES\n&lt;/Directory&gt;\n    </highlight>\n\n    <p>If more than one filter is specified, they must be separated\n    by semicolons in the order in which they should process the\n    content.</p>\n</usage>\n<seealso><a href=\"../filter.html\">Filters</a> documentation</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>TimeOut</name>\n<description>Amount of time the server will wait for\ncertain events before failing a request</description>\n<syntax>TimeOut <var>seconds</var></syntax>\n<default>TimeOut 60</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n\n<usage>\n    <p>The <directive>TimeOut</directive> directive defines the length\n    of time Apache httpd will wait for I/O in various circumstances:</p>\n\n    <ul>\n      <li><p>When reading data from the client, the length of time to\n      wait for a TCP packet to arrive if the read buffer is\n      empty.</p>\n      <p> For initial data on a new connection, this directive doesn't\n      take effect until after any configured <directive module=\"core\">\n      AcceptFilter</directive> has passed the new connection to the server.</p>\n      </li>\n\n      <li>When writing data to the client, the length of time to wait\n      for an acknowledgement of a packet if the send buffer is\n      full.</li>\n\n      <li>In <module>mod_cgi</module> and <module>mod_cgid</module>,\n      the length of time to wait for any individual block of output\n      from a CGI script.</li>\n\n      <li>In <module>mod_ext_filter</module>, the length of time to\n      wait for output from a filtering process.</li>\n\n      <li>In <module>mod_proxy</module>, the default timeout value if\n      <directive module=\"mod_proxy\">ProxyTimeout</directive> is not\n      configured.</li>\n    </ul>\n\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>TraceEnable</name>\n<description>Determines the behavior on <code>TRACE</code> requests</description>\n<syntax>TraceEnable <var>[on|off|extended]</var></syntax>\n<default>TraceEnable on</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n\n<usage>\n    <p>This directive overrides the behavior of <code>TRACE</code> for both\n    the core server and <module>mod_proxy</module>.  The default\n    <code>TraceEnable on</code> permits <code>TRACE</code> requests per\n    RFC 2616, which disallows any request body to accompany the request.\n    <code>TraceEnable off</code> causes the core server and\n    <module>mod_proxy</module> to return a <code>405</code> (Method not\n    allowed) error to the client.</p>\n\n    <p>Finally, for testing and diagnostic purposes only, request\n    bodies may be allowed using the non-compliant <code>TraceEnable\n    extended</code> directive.  The core (as an origin server) will\n    restrict the request body to 64Kb (plus 8Kb for chunk headers if\n    <code>Transfer-Encoding: chunked</code> is used).  The core will\n    reflect the full headers and all chunk headers with the response\n    body.  As a proxy server, the request body is not restricted to 64Kb.</p>\n\n    <note><title>Note</title>\n\n    <p>Despite claims to the contrary, enabling the <code>TRACE</code>\n    method does not expose any security vulnerability in Apache httpd.\n    The <code>TRACE</code> method is defined by the HTTP/1.1\n    specification and implementations are expected to support it.</p>\n    \n    </note>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>UnDefine</name>\n<description>Undefine the existence of a variable</description>\n<syntax>UnDefine <var>parameter-name</var></syntax>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p>Undoes the effect of a <directive module=\"core\">Define</directive> or\n    of passing a <code>-D</code> argument to <program>httpd</program>.</p>\n    <p>This directive can be used to toggle the use of <directive module=\"core\"\n    type=\"section\">IfDefine</directive> sections without needing to alter\n    <code>-D</code> arguments in any startup scripts.</p>\n\n    <p>Variable names may not contain colon \":\" characters, to avoid clashes\n    with <directive module=\"mod_rewrite\">RewriteMap</directive>'s syntax.</p>\n\n    <note><title>Virtual Host scope and pitfalls</title>\n      <p>While this directive is supported in virtual host context,\n         the changes it makes are visible to any later configuration\n         directives, beyond any enclosing virtual host.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">Define</directive></seealso>\n<seealso><directive module=\"core\">IfDefine</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>UseCanonicalName</name>\n<description>Configures how the server determines its own name and\nport</description>\n<syntax>UseCanonicalName On|Off|DNS</syntax>\n<default>UseCanonicalName Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context></contextlist>\n\n<usage>\n    <p>In many situations Apache httpd must construct a <em>self-referential</em>\n    URL -- that is, a URL that refers back to the same server. With\n    <code>UseCanonicalName On</code> Apache httpd will use the hostname and port\n    specified in the <directive module=\"core\">ServerName</directive>\n    directive to construct the canonical name for the server. This name\n    is used in all self-referential URLs, and for the values of\n    <code>SERVER_NAME</code> and <code>SERVER_PORT</code> in CGIs.</p>\n\n    <p>With <code>UseCanonicalName Off</code> Apache httpd will form\n    self-referential URLs using the hostname and port supplied by\n    the client if any are supplied (otherwise it will use the\n    canonical name, as defined above). These values are the same\n    that are used to implement <a\n    href=\"../vhosts/name-based.html\">name-based virtual hosts</a>\n    and are available with the same clients. The CGI variables\n    <code>SERVER_NAME</code> and <code>SERVER_PORT</code> will be\n    constructed from the client supplied values as well.</p>\n\n    <p>An example where this may be useful is on an intranet server\n    where you have users connecting to the machine using short\n    names such as <code>www</code>. You'll notice that if the users\n    type a shortname and a URL which is a directory, such as\n    <code>http://www/splat</code>, <em>without the trailing\n    slash</em>, then Apache httpd will redirect them to\n    <code>http://www.example.com/splat/</code>. If you have\n    authentication enabled, this will cause the user to have to\n    authenticate twice (once for <code>www</code> and once again\n    for <code>www.example.com</code> -- see <a\n    href=\"http://wiki.apache.org/httpd/FAQ#Why_does_Apache_ask_for_my_password_twice_before_serving_a_file.3F\">\n    the FAQ on this subject for more information</a>). But if\n    <directive>UseCanonicalName</directive> is set <code>Off</code>, then\n    Apache httpd will redirect to <code>http://www/splat/</code>.</p>\n\n    <p>There is a third option, <code>UseCanonicalName DNS</code>,\n    which is intended for use with mass IP-based virtual hosting to\n    support ancient clients that do not provide a\n    <code>Host:</code> header. With this option, Apache httpd does a\n    reverse DNS lookup on the server IP address that the client\n    connected to in order to work out self-referential URLs.</p>\n\n    <note type=\"warning\"><title>Warning</title>\n    <p>If CGIs make assumptions about the values of <code>SERVER_NAME</code>,\n    they may be broken by this option. The client is essentially free\n    to give whatever value they want as a hostname. But if the CGI is\n    only using <code>SERVER_NAME</code> to construct self-referential URLs,\n    then it should be just fine.</p>\n    </note>\n</usage>\n<seealso><directive module=\"core\">UseCanonicalPhysicalPort</directive></seealso>\n<seealso><directive module=\"core\">ServerName</directive></seealso>\n<seealso><directive module=\"mpm_common\">Listen</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>UseCanonicalPhysicalPort</name>\n<description>Configures how the server determines its own port</description>\n<syntax>UseCanonicalPhysicalPort On|Off</syntax>\n<default>UseCanonicalPhysicalPort Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context></contextlist>\n\n<usage>\n    <p>In many situations Apache httpd must construct a <em>self-referential</em>\n    URL -- that is, a URL that refers back to the same server. With\n    <code>UseCanonicalPhysicalPort On</code>, Apache httpd will, when\n    constructing the canonical port for the server to honor\n    the <directive module=\"core\">UseCanonicalName</directive> directive,\n    provide the actual physical port number being used by this request\n    as a potential port. With <code>UseCanonicalPhysicalPort Off</code>,\n    Apache httpd will not ever use the actual physical port number, instead\n    relying on all configured information to construct a valid port number.</p>\n\n    <note><title>Note</title>\n    <p>The ordering of the lookup when the physical port is used is as\n    follows:</p>\n     <dl>\n     <dt><code>UseCanonicalName On</code></dt>\n     <dd>\n     <ol>\n      <li>Port provided in <directive module=\"core\">Servername</directive></li>\n      <li>Physical port</li>\n      <li>Default port</li>\n     </ol>\n     </dd>\n     <dt><code>UseCanonicalName Off | DNS</code></dt>\n     <dd>\n     <ol>\n      <li>Parsed port from <code>Host:</code> header</li>\n      <li>Physical port</li>\n      <li>Port provided in <directive module=\"core\">Servername</directive></li>\n      <li>Default port</li>\n     </ol>\n     </dd>\n     </dl>\n\n    <p>With <code>UseCanonicalPhysicalPort Off</code>, the\n    physical ports are removed from the ordering.</p>\n    </note>\n\n</usage>\n<seealso><directive module=\"core\">UseCanonicalName</directive></seealso>\n<seealso><directive module=\"core\">ServerName</directive></seealso>\n<seealso><directive module=\"mpm_common\">Listen</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis type=\"section\">\n<name>VirtualHost</name>\n<description>Contains directives that apply only to a specific\nhostname or IP address</description>\n<syntax>&lt;VirtualHost\n    <var>addr</var>[:<var>port</var>] [<var>addr</var>[:<var>port</var>]]\n    ...&gt; ... &lt;/VirtualHost&gt;</syntax>\n<contextlist><context>server config</context></contextlist>\n\n<usage>\n    <p><directive type=\"section\">VirtualHost</directive> and\n    <code>&lt;/VirtualHost&gt;</code> are used to enclose a group of\n    directives that will apply only to a particular virtual host. Any\n    directive that is allowed in a virtual host context may be\n    used. When the server receives a request for a document on a\n    particular virtual host, it uses the configuration directives\n    enclosed in the <directive type=\"section\">VirtualHost</directive>\n    section. <var>Addr</var> can be any of the following, optionally followed by\n    a colon and a port number (or *):</p>\n\n    <ul>\n      <li>The IP address of the virtual host;</li>\n\n      <li>A fully qualified domain name for the IP address of the\n      virtual host (not recommended);</li>\n\n      <li>The character <code>*</code>, which acts as a wildcard and matches\n      any IP address.</li>\n\n      <li>The string <code>_default_</code>, which is an alias for <code>*</code></li>\n\n    </ul>\n\n    <highlight language=\"config\">\n&lt;VirtualHost 10.1.2.3:80&gt;\n  ServerAdmin webmaster@host.example.com\n  DocumentRoot \"/www/docs/host.example.com\"\n  ServerName host.example.com\n  ErrorLog \"logs/host.example.com-error_log\"\n  TransferLog \"logs/host.example.com-access_log\"\n&lt;/VirtualHost&gt;\n    </highlight>\n\n\n    <p>IPv6 addresses must be specified in square brackets because\n    the optional port number could not be determined otherwise.  An\n    IPv6 example is shown below:</p>\n\n    <highlight language=\"config\">\n&lt;VirtualHost [2001:db8::a00:20ff:fea7:ccea]:80&gt;\n  ServerAdmin webmaster@host.example.com\n  DocumentRoot \"/www/docs/host.example.com\"\n  ServerName host.example.com\n  ErrorLog \"logs/host.example.com-error_log\"\n  TransferLog \"logs/host.example.com-access_log\"\n&lt;/VirtualHost&gt;\n    </highlight>\n\n    <p>Each Virtual Host must correspond to a different IP address,\n    different port number, or a different host name for the server,\n    in the former case the server machine must be configured to\n    accept IP packets for multiple addresses. (If the machine does\n    not have multiple network interfaces, then this can be\n    accomplished with the <code>ifconfig alias</code> command -- if\n    your OS supports it).</p>\n\n    <note><title>Note</title>\n    <p>The use of <directive type=\"section\">VirtualHost</directive> does\n    <strong>not</strong> affect what addresses Apache httpd listens on. You\n    may need to ensure that Apache httpd is listening on the correct addresses\n    using <directive module=\"mpm_common\">Listen</directive>.</p>\n    </note>\n\n    <p>A <directive module=\"core\">ServerName</directive> should be\n    specified inside each <directive\n    type=\"section\">VirtualHost</directive> block. If it is absent, the\n    <directive module=\"core\">ServerName</directive> from the \"main\"\n    server configuration will be inherited.</p>\n\n    <p>When a request is received, the server first maps it to the best matching\n    <directive type=\"section\">VirtualHost</directive> based on the local\n    IP address and port combination only.  Non-wildcards have a higher\n    precedence. If no match based on IP and port occurs at all, the\n    \"main\" server configuration is used.</p>\n\n    <p>If multiple virtual hosts contain the best matching IP address and port,\n    the server selects from these virtual hosts the best match based on the\n    requested hostname.  If no matching name-based virtual host is found,\n    then the first listed virtual host that matched the IP address will be\n    used.  As a consequence, the first listed virtual host for a given IP address\n    and port combination is the default virtual host for that IP and port\n    combination.</p>\n\n    <note type=\"warning\"><title>Security</title>\n    <p>See the <a href=\"../misc/security_tips.html\">security tips</a>\n    document for details on why your security could be compromised if the\n    directory where log files are stored is writable by anyone other\n    than the user that starts the server.</p>\n    </note>\n</usage>\n<seealso><a href=\"../vhosts/\">Apache HTTP Server Virtual Host documentation</a></seealso>\n<seealso><a href=\"../dns-caveats.html\">Issues Regarding DNS and\n    Apache HTTP Server</a></seealso>\n<seealso><a href=\"../bind.html\">Setting\n    which addresses and ports Apache HTTP Server uses</a></seealso>\n<seealso><a href=\"../sections.html\">How &lt;Directory&gt;, &lt;Location&gt;\n    and &lt;Files&gt; sections work</a> for an explanation of how these\n    different sections are combined when a request is received</seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>MergeTrailers</name>\n<description>Determines whether trailers are merged into headers</description>\n<syntax>MergeTrailers [on|off]</syntax>\n<default>MergeTrailers off</default>\n<contextlist><context>server config</context><context>virtual host</context></contextlist>\n<compatibility>2.4.11 and later</compatibility>\n\n<usage>\n    <p>This directive controls whether HTTP trailers are copied into the\n    internal representation of HTTP headers. This merging occurs when the\n    request body has been completely consumed, long after most header\n    processing would have a chance to examine or modify request headers.</p>\n    <p>This option is provided for compatibility with releases prior to 2.4.11,\n    where trailers were always merged.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>QualifyRedirectURL</name>\n<description>Controls whether the REDIRECT_URL environment variable is\n             fully qualified</description>\n<syntax>QualifyRedirectURL On|Off</syntax>\n<default>QualifyRedirectURL Off</default>\n<contextlist><context>server config</context><context>virtual host</context>\n<context>directory</context>\n</contextlist>\n<override>FileInfo</override>\n<compatibility>Directive supported in 2.4.18 and later. 2.4.17 acted\nas if 'QualifyRedirectURL On' was configured.</compatibility>\n\n<usage>\n    <p>This directive controls whether the server will ensure that the \n    REDIRECT_URL environment variable is fully qualified.  By default, \n    the variable contains the verbatim URL requested by the client, \n    such as \"/index.html\".  With <directive\n    >QualifyRedirectURL On</directive>, the same request would result in a\n    value such as \"http://www.example.com/index.html\".</p>\n    <p>Even without this directive set, when a request is issued against a \n    fully qualified URL, REDIRECT_URL will remain fully qualified.\n    </p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>RegisterHttpMethod</name>\n<description>Register non-standard HTTP methods</description>\n<syntax>RegisterHttpMethod <var>method</var> [<var>method</var> [...]]</syntax>\n<contextlist><context>server config</context></contextlist>\n<compatibility>Available in Apache HTTP Server 2.4.24 and later</compatibility>\n\n<usage>\n<p>This directive may be used to register additional HTTP methods.  This is\nnecessary if non-standard methods need to be used with directives that accept \nmethod names as parameters, or to allow particular non-standard methods to be \nused via proxy or CGI script when the server has been configured to only pass \nrecognized methods to modules.</p>\n</usage>\n<seealso><directive module=\"core\">HTTPProtocolOptions</directive></seealso>\n<seealso><directive module=\"mod_allowmethods\">AllowMethods</directive></seealso>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>StrictHostCheck</name>\n<description>Controls whether the server requires the requested hostname be\n             listed enumerated in the virtual host handling the request\n             </description>\n<syntax>StrictHostCheck ON|OFF</syntax>\n<default>StrictHostCheck OFF</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n<compatibility>Added in 2.5.1</compatibility>\n\n<usage>\n    <p>By default, the server will respond to requests for any hostname,\n    including requests addressed to unexpected or unconfigured hostnames. \n    While this is convenient, it is sometimes desirable to limit what hostnames\n    a backend application handles since it will often generate self-referential\n    responses.</p>\n\n    <p>By setting <directive>StrictHostCheck</directive> to <em>ON</em>,\n    the server will return an HTTP 400 error if the requested hostname\n    hasn't been explicitly listed by either <directive module=\"core\"\n    >ServerName</directive> or <directive module=\"core\"\n    >ServerAlias</directive> in the virtual host that best matches the\n    details of the incoming connection.</p>\n\n   <p>This directive also allows matching of the requested hostname to hostnames\n   specified within the opening <directive module=\"core\">VirtualHost</directive>\n   tag, which is a relatively obscure configuration mechanism that acts like\n   additional <directive module=\"core\">ServerAlias</directive> entries.</p>\n\n   <p>This directive has no affect in non-default virtual hosts. The value\n   inherited from the global server configuration, or the default virtualhost \n   for the ip:port the underlying connection, determine the effective value.</p>\n</usage>\n</directivesynopsis>\n\n<directivesynopsis>\n<name>MergeSlashes</name>\n<description>Controls whether the server merges consecutive slashes in URLs.\n</description>\n<syntax>MergeSlashes ON|OFF</syntax>\n<default>MergeSlashes ON</default>\n<contextlist><context>server config</context><context>virtual host</context>\n</contextlist>\n<compatibility>Added in 2.4.39</compatibility>\n\n<usage>\n    <p>By default, the server merges (or collapses) multiple consecutive slash\n    ('/') characters in the path component of the request URL.</p>\n\n    <p>When mapping URL's to the filesystem, these multiple slashes are not \n    significant.  However, URL's handled other ways, such as by CGI or proxy,\n    might prefer to retain the significance of multiple consecutive slashes. \n    In these cases <directive>MergeSlashes</directive> can be set to \n    <em>OFF</em> to retain the multiple consecutive slashes.  In these\n    configurations, regular expressions used in the configuration file that match\n    the path component of the URL (<directive>LocationMatch</directive>,\n    <directive>RewriteRule</directive>, ...) need to take into account multiple \n    consecutive slashes.</p>\n</usage>\n</directivesynopsis>\n\n</modulesynopsis>\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  ap_mmn.h\n * @brief Module Magic Number\n *\n * @defgroup APACHE_CORE_MMN Module Magic Number\n * @ingroup  APACHE_CORE\n * @{\n */\n\n#ifndef APACHE_AP_MMN_H\n#define APACHE_AP_MMN_H\n\n/*\n * MODULE_MAGIC_NUMBER_MAJOR\n * Major API changes that could cause compatibility problems for older modules\n * such as structure size changes.  No binary compatibility is possible across\n * a change in the major version.\n *\n * MODULE_MAGIC_NUMBER_MINOR\n * Minor API changes that do not cause binary compatibility problems.\n * Should be reset to 0 when upgrading MODULE_MAGIC_NUMBER_MAJOR.\n *\n * See the AP_MODULE_MAGIC_AT_LEAST macro below for an example.\n */\n\n/*\n * 20010224   (2.0.13-dev) MODULE_MAGIC_COOKIE reset to \"AP20\"\n * 20010523   (2.0.19-dev) bump for scoreboard structure reordering\n * 20010627   (2.0.19-dev) more API changes than I can count\n * 20010726   (2.0.22-dev) more big API changes\n * 20010808   (2.0.23-dev) dir d_is_absolute bit introduced, bucket changes, etc\n * 20010825   (2.0.25-dev) removed d_is_absolute, introduced map_to_storage hook\n * 20011002   (2.0.26-dev) removed 1.3-deprecated request_rec.content_language\n * 20011127   (2.0.29-dev) bump for postconfig hook change, and removal of\n *                         socket from connection record\n * 20011212   (2.0.30-dev) bump for new used_path_info member of request_rec\n * 20011218   (2.0.30-dev) bump for new sbh member of conn_rec, different\n *                         declarations for scoreboard, new parameter to\n *                         create_connection hook\n * 20020102   (2.0.30-dev) bump for changed type of limit_req_body in\n *                         core_dir_config\n * 20020109   (2.0.31-dev) bump for changed shm and scoreboard declarations\n * 20020111   (2.0.31-dev) bump for ETag fields added at end of cor_dir_config\n * 20020114   (2.0.31-dev) mod_dav changed how it asks its provider to fulfill\n *                         a GET request\n * 20020118   (2.0.31-dev) Input filtering split of blocking and mode\n * 20020127   (2.0.31-dev) bump for pre_mpm hook change\n * 20020128   (2.0.31-dev) bump for pre_config hook change\n * 20020218   (2.0.33-dev) bump for AddOutputFilterByType directive\n * 20020220   (2.0.33-dev) bump for scoreboard.h structure change\n * 20020302   (2.0.33-dev) bump for protocol_filter additions.\n * 20020306   (2.0.34-dev) bump for filter type renames.\n * 20020318   (2.0.34-dev) mod_dav's API for REPORT generation changed\n * 20020319   (2.0.34-dev) M_INVALID changed, plus new M_* methods for RFC 3253\n * 20020327   (2.0.35-dev) Add parameter to quick_handler hook\n * 20020329   (2.0.35-dev) bump for addition of freelists to bucket API\n * 20020329.1 (2.0.36)     minor bump for new arg to opt fn ap_cgi_build_command\n * 20020506   (2.0.37-dev) Removed r->boundary in request_rec.\n * 20020529   (2.0.37-dev) Standardized the names of some apr_pool_*_set funcs\n * 20020602   (2.0.37-dev) Bucket API change (metadata buckets)\n * 20020612   (2.0.38-dev) Changed server_rec->[keep_alive_]timeout to apr time\n * 20020625   (2.0.40-dev) Changed conn_rec->keepalive to an enumeration\n * 20020628   (2.0.40-dev) Added filter_init to filter registration functions\n * 20020903   (2.0.41-dev) APR's error constants changed\n * 20020903.1 (2.1.0-dev)  allow_encoded_slashes added to core_dir_config\n * 20020903.2 (2.0.46-dev) add ap_escape_logitem\n * 20030213.1 (2.1.0-dev)  changed log_writer optional fn's to return previous\n *                         handler\n * 20030821   (2.1.0-dev)  bumped mod_include's entire API\n * 20030821.1 (2.1.0-dev)  added XHTML doctypes\n * 20030821.2 (2.1.0-dev)  added ap_escape_errorlog_item\n * 20030821.3 (2.1.0-dev)  added ap_get_server_revision / ap_version_t\n * 20040425   (2.1.0-dev)  removed ap_add_named_module API\n *                         changed ap_add_module, ap_add_loaded_module,\n *                         ap_setup_prelinked_modules,\n *                         ap_process_resource_config\n * 20040425.1 (2.1.0-dev)  Added ap_module_symbol_t and\n *                         ap_prelinked_module_symbols\n * 20050101.0 (2.1.2-dev)  Axed misnamed http_method for http_scheme\n *                         (which it was!)\n * 20050127.0 (2.1.3-dev)  renamed regex_t->ap_regex_t,\n *                         regmatch_t->ap_regmatch_t, REG_*->AP_REG_*,\n *                         removed reg* in place of ap_reg*; added ap_regex.h\n * 20050217.0 (2.1.3-dev)  Axed find_child_by_pid, mpm_*_completion_context\n *                         (winnt mpm) symbols from the public sector, and\n *                         decorated real_exit_code with ap_ in the win32/os.h.\n * 20050305.0 (2.1.4-dev)  added pid and generation fields to worker_score\n * 20050305.1 (2.1.5-dev)  added ap_vhost_iterate_given_conn.\n * 20050305.2 (2.1.5-dev)  added AP_INIT_TAKE_ARGV.\n * 20050305.3 (2.1.5-dev)  added Protocol Framework.\n * 20050701.0 (2.1.7-dev)  Bump MODULE_MAGIC_COOKIE to \"AP21\"!\n * 20050701.1 (2.1.7-dev)  trace_enable member added to core server_config\n * 20050708.0 (2.1.7-dev)  Bump MODULE_MAGIC_COOKIE to \"AP22\"!\n * 20050708.1 (2.1.7-dev)  add proxy request_status hook (minor)\n * 20050919.0 (2.1.8-dev)  mod_ssl ssl_ext_list optional function added\n * 20051005.0 (2.1.8-dev)  NET_TIME filter eliminated\n * 20051005.0 (2.3.0-dev)  Bump MODULE_MAGIC_COOKIE to \"AP24\"!\n * 20051115.0 (2.3.0-dev)  Added use_canonical_phys_port to core_dir_config\n * 20060110.0 (2.3.0-dev)  Conversion of Authz to be provider based\n *                         addition of <SatisfyAll><SatisfyOne>\n *                         removal of Satisfy, Allow, Deny, Order\n * 20060110.1 (2.3.0-dev)  minex and minex_set members added to\n *                         cache_server_conf (minor)\n * 20060110.2 (2.3.0-dev)  flush_packets and flush_wait members added to\n *                         proxy_server (minor)\n * 20060110.3 (2.3.0-dev)  added inreslist member to proxy_conn_rec (minor)\n * 20060110.4 (2.3.0-dev)  Added server_scheme member to server_rec (minor)\n * 20060905.0 (2.3.0-dev)  Replaced ap_get_server_version() with\n *                         ap_get_server_banner() and ap_get_server_description()\n * 20060905.1 (2.3.0-dev)  Enable retry=0 for the worker (minor)\n * 20060905.2 (2.3.0-dev)  Added ap_all_available_mutexes_string,\n *                         ap_available_mutexes_string and\n *                         ap_parse_mutex()\n * 20060905.3 (2.3.0-dev)  Added conn_rec::clogging_input_filters.\n * 20060905.4 (2.3.0-dev)  Added proxy_balancer::sticky_path.\n * 20060905.5 (2.3.0-dev)  Added ap_mpm_safe_kill()\n * 20070823.0 (2.3.0-dev)  Removed ap_all_available_mutexes_string,\n *                         ap_available_mutexes_string for macros\n * 20070823.1 (2.3.0-dev)  add ap_send_interim_response()\n * 20071023.0 (2.3.0-dev)  add ap_get_scoreboard(sbh) split from the less\n *                         conventional ap_get_scoreboard(proc, thread)\n * 20071023.1 (2.3.0-dev)  Add flags field to struct proxy_alias\n * 20071023.2 (2.3.0-dev)  Add ap_mod_status_reqtail\n * 20071023.3 (2.3.0-dev)  Declare ap_time_process_request() as part of the\n *                         public scoreboard API.\n * 20071108.1 (2.3.0-dev)  Add the optional kept_body brigade to request_rec\n * 20071108.2 (2.3.0-dev)  Add st and keep fields to struct util_ldap_connection_t\n * 20071108.3 (2.3.0-dev)  Add API guarantee for adding connection filters\n *                         with non-NULL request_rec pointer (ap_add_*_filter*)\n * 20071108.4 (2.3.0-dev)  Add ap_proxy_ssl_connection_cleanup\n * 20071108.5 (2.3.0-dev)  Add *scpool to proxy_conn_rec structure\n * 20071108.6 (2.3.0-dev)  Add *r and need_flush to proxy_conn_rec structure\n * 20071108.7 (2.3.0-dev)  Add *ftp_directory_charset to proxy_dir_conf\n * 20071108.8 (2.3.0-dev)  Add optional function ap_logio_add_bytes_in() to mog_logio\n * 20071108.9 (2.3.0-dev)  Add chroot support to unixd_config\n * 20071108.10(2.3.0-dev)  Introduce new ap_expr API\n * 20071108.11(2.3.0-dev)  Revise/Expand new ap_expr API\n * 20071108.12(2.3.0-dev)  Remove ap_expr_clone from the API (same day it was added)\n * 20080403.0 (2.3.0-dev)  Add condition field to core dir config\n * 20080403.1 (2.3.0-dev)  Add authn/z hook and provider registration wrappers.\n * 20080403.2 (2.3.0-dev)  Add ap_escape_path_segment_buffer() and ap_unescape_all().\n * 20080407.0 (2.3.0-dev)  Remove ap_graceful_stop_signalled.\n * 20080407.1              Deprecate ap_cache_cacheable_hdrs_out and add two\n *                         generalized ap_cache_cacheable_headers_(in|out).\n * 20080528.0 (2.3.0-dev)  Switch order of ftp_directory_charset and\n *                         interpolate_env in proxy_dir_conf.\n *                         Rationale: see r661069.\n * 20080528.1 (2.3.0-dev)  add has_realm_hash() to authn_provider struct\n * 20080722.0 (2.3.0-dev)  remove has_realm_hash() from authn_provider struct\n * 20080722.1 (2.3.0-dev)  Add conn_timeout and conn_timeout_set to\n *                         proxy_worker struct.\n * 20080722.2 (2.3.0-dev)  Add scolonsep to proxy_balancer\n * 20080829.0 (2.3.0-dev)  Add cookie attributes when removing cookies\n * 20080830.0 (2.3.0-dev)  Cookies can be set on headers_out and err_headers_out\n * 20080920.0 (2.3.0-dev)  Add ap_mpm_register_timed_callback.\n * 20080920.1 (2.3.0-dev)  Export mod_rewrite.h in the public API.\n * 20080920.2 (2.3.0-dev)  Added ap_timeout_parameter_parse to util.c / httpd.h\n * 20081101.0 (2.3.0-dev)  Remove unused AUTHZ_GROUP_NOTE define.\n * 20081102.0 (2.3.0-dev)  Remove authz_provider_list, authz_request_state,\n *                         and AUTHZ_ACCESS_PASSED_NOTE.\n * 20081104.0 (2.3.0-dev)  Remove r and need_flush fields from proxy_conn_rec\n *                         as they are no longer used and add\n *                         ap_proxy_buckets_lifetime_transform to mod_proxy.h\n * 20081129.0 (2.3.0-dev)  Move AP_FILTER_ERROR and AP_NOBODY_READ|WROTE\n *                         from util_filter.h to httpd.h and change their\n *                         numeric values so they do not overlap with other\n *                         potential status codes\n * 20081201.0 (2.3.0-dev)  Rename several APIs to include ap_ prefix.\n * 20081201.1 (2.3.0-dev)  Added ap_args_to_table and ap_body_to_table.\n * 20081212.0 (2.3.0-dev)  Remove sb_type from process_score in scoreboard.h.\n * 20081231.0 (2.3.0-dev)  Switch ap_escape_html API: add ap_escape_html2,\n *                         and make ap_escape_html a macro for it.\n * 20090130.0 (2.3.2-dev)  Add ap_ prefix to unixd_setup_child().\n * 20090131.0 (2.3.2-dev)  Remove ap_default_type(), disable DefaultType\n * 20090208.0 (2.3.2-dev)  Add conn_rec::current_thread.\n * 20090208.1 (2.3.3-dev)  Add ap_retained_data_create()/ap_retained_data_get()\n * 20090401.0 (2.3.3-dev)  Remove ap_threads_per_child, ap_max_daemons_limit,\n *                         ap_my_generation, etc.  ap_mpm_query() can't be called\n *                         until after the register-hooks phase.\n * 20090401.1 (2.3.3-dev)  Protected log.c internals, http_log.h changes\n * 20090401.2 (2.3.3-dev)  Added tmp_flush_bb to core_output_filter_ctx_t\n * 20090401.3 (2.3.3-dev)  Added DAV options provider to mod_dav.h\n * 20090925.0 (2.3.3-dev)  Added server_rec::context and added *server_rec\n *                         param to ap_wait_or_timeout()\n * 20090925.1 (2.3.3-dev)  Add optional function ap_logio_get_last_bytes() to\n *                         mod_logio\n * 20091011.0 (2.3.3-dev)  Move preserve_host{,_set} from proxy_server_conf to\n *                         proxy_dir_conf\n * 20091011.1 (2.3.3-dev)  add debug_level to util_ldap_state_t\n * 20091031.0 (2.3.3-dev)  remove public LDAP referral-related macros\n * 20091119.0 (2.3.4-dev)  dav_error interface uses apr_status_t parm, not errno\n * 20091119.1 (2.3.4-dev)  ap_mutex_register(), ap_{proc,global}_mutex_create()\n * 20091229.0 (2.3.5-dev)  Move allowed_connect_ports from proxy_server_conf\n *                         to mod_proxy_connect\n * 20091230.0 (2.3.5-dev)  Move ftp_directory_charset from proxy_dir_conf\n *                         to proxy_ftp_dir_conf(mod_proxy_ftp)\n * 20091230.1 (2.3.5-dev)  add util_ldap_state_t.opTimeout\n * 20091230.2 (2.3.5-dev)  add ap_get_server_name_for_url()\n * 20091230.3 (2.3.6-dev)  add ap_parse_log_level()\n * 20091230.4 (2.3.6-dev)  export ap_process_request_after_handler() for mod_serf\n * 20100208.0 (2.3.6-dev)  ap_socache_provider_t API changes to store and iterate\n * 20100208.1 (2.3.6-dev)  Added forward member to proxy_conn_rec\n * 20100208.2 (2.3.6-dev)  Added ap_log_command_line().\n * 20100223.0 (2.3.6-dev)  LDAP client_certs per-server moved to per-dir\n * 20100223.1 (2.3.6-dev)  Added ap_process_fnmatch_configs().\n * 20100504.0 (2.3.6-dev)  Added name arg to ap_{proc,global}_mutex_create().\n * 20100604.0 (2.3.6-dev)  Remove unused core_dir_config::loglevel\n * 20100606.0 (2.3.6-dev)  Make ap_log_*error macro wrappers around\n *                         ap_log_*error_ to save argument preparation and\n *                         function call overhead.\n *                         Introduce per-module loglevels, including new APIs\n *                         APLOG_USE_MODULE() and AP_DECLARE_MODULE().\n * 20100606.1 (2.3.6-dev)  Added extended timestamp formatting via\n *                         ap_recent_ctime_ex().\n * 20100609.0 (2.3.6-dev)  Dropped ap_body_to_table due to missing constraints.\n * 20100609.1 (2.3.7-dev)  Introduce ap_log_cserror()\n * 20100609.2 (2.3.7-dev)  Add deferred write pool to core_output_filter_ctx\n * 20100625.0 (2.3.7-dev)  Add 'userctx' to socache iterator callback prototype\n * 20100630.0 (2.3.7-dev)  make module_levels vector of char instead of int\n * 20100701.0 (2.3.7-dev)  re-order struct members to improve alignment\n * 20100701.1 (2.3.7-dev)  add note_auth_failure hook\n * 20100701.2 (2.3.7-dev)  add ap_proxy_*_wid() functions\n * 20100714.0 (2.3.7-dev)  add access_checker_ex hook, add AUTHZ_DENIED_NO_USER\n *                         to authz_status, call authz providers twice to allow\n *                         authz without authenticated user\n * 20100719.0 (2.3.7-dev)  Add symbol name parameter to ap_add_module and\n *                         ap_add_loaded_module. Add ap_find_module_short_name\n * 20100723.0 (2.3.7-dev)  Remove ct_output_filters from core rec\n * 20100723.1 (2.3.7-dev)  Added ap_proxy_hashfunc() and hash elements to\n *                         proxy worker structs\n * 20100723.2 (2.3.7-dev)  Add ap_request_has_body()\n * 20100723.3 (2.3.8-dev)  Add ap_check_mpm()\n * 20100905.0 (2.3.9-dev)  Add log_id to conn and req recs. Add error log\n *                         format handlers. Support AP_CTIME_OPTION_COMPACT in\n *                         ap_recent_ctime_ex().\n * 20100905.1 (2.3.9-dev)  Add ap_cache_check_allowed()\n * 20100912.0 (2.3.9-dev)  Add an additional \"out\" brigade parameter to the\n *                         mod_cache store_body() provider function.\n * 20100916.0 (2.3.9-dev)  Add commit_entity() to the mod_cache provider\n *                         interface.\n * 20100918.0 (2.3.9-dev)  Move the request_rec within mod_include to be\n *                         exposed within include_ctx_t.\n * 20100919.0 (2.3.9-dev)  Authz providers: Add parsed_require_line parameter\n *                         to check_authorization() function. Add\n *                         parse_require_line() function.\n * 20100919.1 (2.3.9-dev)  Introduce ap_rxplus util/API\n * 20100921.0 (2.3.9-dev)  Add an apr_bucket_brigade to the create_entity\n *                         provider interface for mod_cache.h.\n * 20100922.0 (2.3.9-dev)  Move cache_* functions from mod_cache.h to a\n *                         private header file.\n * 20100923.0 (2.3.9-dev)  Remove MOD_CACHE_REQUEST_REC, remove deprecated\n *                         ap_cache_cacheable_hdrs_out, trim cache_object_t,\n *                         make ap_cache_accept_headers, ap_cache_accept_headers\n *                         ap_cache_try_lock, ap_cache_check_freshness,\n *                         cache_server_conf, cache_enable, cache_disable,\n *                         cache_request_rec and cache_provider_list private.\n * 20100923.1 (2.3.9-dev)  Add cache_status hook.\n * 20100923.2 (2.3.9-dev)  Add generate_log_id hook.\n *                         Make root parameter of ap_expr_eval() const.\n * 20100923.3 (2.3.9-dev)  Add \"last\" member to ap_directive_t\n * 20101012.0 (2.3.9-dev)  Add header to cache_status hook.\n * 20101016.0 (2.3.9-dev)  Remove ap_cache_check_allowed().\n * 20101017.0 (2.3.9-dev)  Make ap_cache_control() public, add cache_control_t\n *                         to mod_disk_cache format.\n * 20101106.0 (2.3.9-dev)  Replace the ap_expr parser derived from\n *                         mod_include's parser with one derived from\n *                         mod_ssl's parser. Clean up ap_expr's public\n *                         interface.\n * 20101106.1 (2.3.9-dev)  Add ap_pool_cleanup_set_null() generic cleanup\n * 20101106.2 (2.3.9-dev)  Add suexec_disabled_reason field to ap_unixd_config\n * 20101113.0 (2.3.9-dev)  Add source address to mod_proxy.h\n * 20101113.1 (2.3.9-dev)  Add ap_set_flag_slot_char()\n * 20101113.2 (2.3.9-dev)  Add ap_expr_exec_re()\n * 20101204.0 (2.3.10-dev) Add _t to ap_expr's typedef names\n * 20101223.0 (2.3.11-dev) Remove cleaned from proxy_conn_rec.\n * 20101223.1 (2.3.11-dev) Rework mod_proxy, et.al. Remove proxy_worker_stat\n *                         and replace w/ proxy_worker_shared; remove worker\n *                         info from scoreboard and use slotmem; Allow\n *                         dynamic growth of balancer members; Remove\n *                         BalancerNonce in favor of 'nonce' parameter.\n * 20110117.0 (2.3.11-dev) Merge <If> sections in separate step (ap_if_walk).\n *                         Add core_dir_config->sec_if. Add ap_add_if_conf().\n *                         Add pool argument to ap_add_file_conf().\n * 20110117.1 (2.3.11-dev) Add ap_pstr2_alnum() and ap_str2_alnum()\n * 20110203.0 (2.3.11-dev) Raise DYNAMIC_MODULE_LIMIT to 256\n * 20110203.1 (2.3.11-dev) Add ap_state_query()\n * 20110203.2 (2.3.11-dev) Add ap_run_pre_read_request() hook and\n *                         ap_parse_form_data() util\n * 20110312.0 (2.3.12-dev) remove uldap_connection_cleanup and add\n                           util_ldap_state_t.connectionPoolTTL,\n                           util_ldap_connection_t.freed, and\n                           util_ldap_connection_t.rebind_pool.\n * 20110312.1 (2.3.12-dev) Add core_dir_config.decode_encoded_slashes.\n * 20110328.0 (2.3.12-dev) change type and name of connectionPoolTTL in util_ldap_state_t\n                           connectionPoolTTL (connection_pool_ttl, int->apr_interval_t)\n * 20110329.0 (2.3.12-dev) Change single-bit signed fields to unsigned in\n *                         proxy and cache interfaces.\n *                         Change ap_configfile_t/ap_cfg_getline()/\n *                         ap_cfg_getc() API, add ap_pcfg_strerror()\n *                         Axe mpm_note_child_killed hook, change\n *                         ap_reclaim_child_process and ap_recover_child_process\n *                         interfaces.\n * 20110329.1 (2.3.12-dev) Add ap_reserve_module_slots()/ap_reserve_module_slots_directive()\n *                         change AP_CORE_DECLARE to AP_DECLARE: ap_create_request_config()\n *                         change AP_DECLARE to AP_CORE_DECLARE: ap_register_log_hooks()\n * 20110329.2 (2.3.12-dev) Add child_status and end_generation hooks.\n * 20110329.3 (2.3.12-dev) Add format field to ap_errorlog_info.\n * 20110329.4 (2.3.13-dev) bgrowth and max_balancers to proxy_server_conf.\n * 20110329.5 (2.3.13-dev) Add ap_regexec_len()\n * 20110329.6 (2.3.13-dev) Add AP_EXPR_FLAGS_RESTRICTED, ap_expr_eval_ctx_t->data,\n *                         ap_expr_exec_ctx()\n * 20110604.0 (2.3.13-dev) Make ap_rputs() inline\n * 20110605.0 (2.3.13-dev) add core_dir_config->condition_ifelse, change return\n *                         type of ap_add_if_conf().\n *                         Add members of core_request_config: document_root,\n *                         context_document_root, context_prefix.\n *                         Add ap_context_*(), ap_set_context_info(), ap_set_document_root()\n * 20110605.1 (2.3.13-dev) add ap_(get|set)_core_module_config()\n * 20110605.2 (2.3.13-dev) add ap_get_conn_socket()\n * 20110619.0 (2.3.13-dev) add async connection infos to process_score in scoreboard,\n *                         add ap_start_lingering_close(),\n *                         add conn_state_e:CONN_STATE_LINGER_NORMAL and CONN_STATE_LINGER_SHORT\n * 20110619.1 (2.3.13-dev) add ap_str_toupper()\n * 20110702.0 (2.3.14-dev) make ap_expr_parse_cmd() macro wrapper for new\n *                         ap_expr_parse_cmd_mi() function, add ap_expr_str_*() functions,\n *                         rename AP_EXPR_FLAGS_* -> AP_EXPR_FLAG_*\n * 20110702.1 (2.3.14-dev) Add ap_scan_script_header_err*_ex functions\n * 20110723.0 (2.3.14-dev) Revert addition of ap_ldap*\n * 20110724.0 (2.3.14-dev) Add override_list as parameter to ap_parse_htaccess\n *                         Add member override_list to cmd_parms_struct,\n *                         core_dir_config and htaccess_result\n * 20110724.1 (2.3.15-dev) add NOT_IN_HTACCESS\n * 20110724.2 (2.3.15-dev) retries and retry_delay in util_ldap_state_t\n * 20110724.3 (2.3.15-dev) add util_varbuf.h / ap_varbuf API\n * 20110724.4 (2.3.15-dev) add max_ranges to core_dir_config\n * 20110724.5 (2.3.15-dev) add ap_set_accept_ranges()\n * 20110724.6 (2.3.15-dev) add max_overlaps and max_reversals to core_dir_config\n * 20110724.7 (2.3.15-dev) add ap_random_insecure_bytes(), ap_random_pick()\n * 20110724.8 (2.3.15-dev) add ap_abort_on_oom(), ap_malloc(), ap_calloc(),\n *                         ap_realloc()\n * 20110724.9 (2.3.15-dev) add ap_varbuf_pdup() and ap_varbuf_regsub()\n * 20110724.10(2.3.15-dev) Export ap_max_mem_free\n * 20111009.0 (2.3.15-dev) Remove ap_proxy_removestr(),\n *                         add ap_unixd_config.group_name\n * 20111014.0 (2.3.15-dev) Remove cookie_path_str and cookie_domain_str from\n *                         proxy_dir_conf\n * 20111025.0 (2.3.15-dev) Add return value and maxlen to ap_varbuf_regsub(),\n *                         add ap_pregsub_ex()\n * 20111025.1 (2.3.15-dev) Add ap_escape_urlencoded(), ap_escape_urlencoded_buffer()\n *                         and ap_unescape_urlencoded().\n * 20111025.2 (2.3.15-dev) Add ap_lua_ssl_val to mod_lua\n * 20111025.3 (2.4.0-dev)  Add reclvl to ap_expr_eval_ctx_t\n * 20111122.0 (2.4.0-dev)  Remove parts of conn_state_t that are private to the MPM\n * 20111123.0 (2.4.0-dev)  Pass ap_errorlog_info struct to error_log hook,\n *                         add pool to ap_errorlog_info.\n * 20111130.0 (2.4.0-dev)  c->remote_ip becomes c->peer_ip and r->client_ip,\n *                         c->remote_addr becomes c->peer_addr and r->client_addr\n * 20111201.0 (2.4.0-dev)  Add invalidate_entity() to the cache provider.\n * 20111202.0 (2.4.0-dev)  Use apr_status_t across mod_session API.\n * 20111202.1 (2.4.0-dev)  add APLOGNO()\n * 20111203.0 (2.4.0-dev)  Optional ap_proxy_retry_worker(), remove\n *                         ap_proxy_string_read(), ap_cache_liststr(),\n *                         ap_proxy_buckets_lifetime_transform(),\n *                         ap_proxy_date_canon(), ap_proxy_is_ipaddr(),\n *                         ap_proxy_is_domainname(), ap_proxy_is_hostname(),\n *                         ap_proxy_is_word(), ap_proxy_hex2sec(),\n *                         ap_proxy_sec2hex(), ap_proxy_make_fake_req(),\n *                         ap_proxy_strmatch_path, ap_proxy_strmatch_domain,\n *                         ap_proxy_table_unmerge(), proxy_lb_workers.\n * 20120109.0 (2.4.1-dev)  Changes sizeof(overrides_t) in core config.\n * 20120109.1 (2.4.1-dev)  remove sb_type in global_score.\n * 20120109.2 (2.4.1-dev)  Make core_output_filter_ctx_t and core_ctx_t\n *                         private;\n *                         move core_net rec definition to http_core.h;\n *                         add insert_network_bucket hook, AP_DECLINED\n * 20120211.0 (2.4.1-dev)  Change re_nsub in ap_regex_t from apr_size_t to int.\n * 20120211.1 (2.4.2-dev)  Add AP_HAVE_C99\n * 20120211.2 (2.4.2-dev)  Add ap_runtime_dir_relative\n * 20120211.3 (2.4.2-dev)  Add forcerecovery to proxy_balancer_shared struct\n * 20120211.4 (2.4.3-dev)  Add ap_list_provider_groups()\n * 20120211.5 (2.4.3-dev)  Add missing HTTP status codes registered with IANA.\n * 20120211.6 (2.4.3-dev)  Add ap_proxy_checkproxyblock2.\n * 20120211.7 (2.4.3-dev)  Add ap_get_loadavg()\n * 20120211.8 (2.4.3-dev)  Add sticky_separator to proxy_balancer_shared struct.\n * 20120211.9 (2.4.4-dev)  Add fgrab() to ap_slotmem_provider_t.\n * 20120211.10 (2.4.4-dev) Add in bal_persist field to proxy_server_conf\n * 20120211.11 (2.4.4-dev) Add ap_bin2hex()\n * 20120211.12 (2.4.5-dev) Add ap_remove_input|output_filter_byhandle()\n * 20120211.13 (2.4.5-dev) Add ap_get_exec_line\n * 20120211.14 (2.4.5-dev) Add ppinherit and inherit to proxy_server_conf\n * 20120211.15 (2.4.5-dev) Add dav_join_error()\n * 20120211.16 (2.4.5-dev) Add cache_control_t.invalidated\n * 20120211.17 (2.4.5-dev) Add ap_find_etag_weak(), ap_find_etag_strong()\n * 20120211.18 (2.4.5-dev) Add ap_condition_e, ap_condition_if_match(),\n *                         ap_condition_if_unmodified_since(),\n *                         ap_condition_if_none_match(),\n *                         ap_condition_if_modified_since(),\n *                         ap_condition_if_range()\n * 20120211.19 (2.4.5-dev) Add post_perdir_config hook.\n * 20120211.20 (2.4.5-dev) Add dirwalk_stat hook.\n * 20120211.21 (2.4.5-dev) Add in ap_proxy_create_hdrbrgd() and\n *                         ap_proxy_pass_brigade()\n * 20120211.22 (2.4.5-dev) No longer prevent usage of strtoul()\n * 20120211.23 (2.4.5-dev) Add ap_proxy_clear_connection()\n * 20120211.24 (2.4.7-dev) add open_htaccess hook.\n * 20120211.25 (2.4.7-dev) Add conn_sense_e\n * 20120211.26 (2.4.7-dev) Add util_fcgi.h, FastCGI protocol support\n * 20120211.27 (2.4.7-dev) Add ap_podx_restart_t and ap_mpm_podx_*\n * 20120211.28 (2.4.7-dev) Add ap_regname\n * 20120211.29 (2.4.7-dev) Add uds_path to proxy_conn_rec and proxy_worker_shared.\n *                         The change to proxy_worker_shared is an\n *                         unintended API break, especially for balancer\n *                         lbmethod modules.\n * 20120211.30 (2.4.7-dev) REWRITE_REDIRECT_HANDLER_NAME in mod_rewrite.h\n * 20120211.31 (2.4.7-dev) Add ap_proxy_port_of_scheme()\n * 20120211.32 (2.4.10-dev) Add SSL reusable SNI to mod_proxy.h's proxy_conn_rec\n * 20120211.33 (2.4.10-dev) Add suspend_connection and resume_connection hooks\n * 20120211.34 (2.4.10-dev) AP_DEFAULT_HANDLER_NAME/AP_IS_DEFAULT_HANDLER_NAME\n * 20120211.35 (2.4.10-dev) Add \"r\", \"must_rebind\", and last_backend_conn\n                            to util_ldap_connection_t\n * 20120211.36 (2.4.10-dev) Add ap_copy_scoreboard_worker()\n * 20120211.37 (2.4.11-dev) Add r->trailers_{in,out}\n * 20120211.38 (2.4.11-dev) Added ap_shutdown_conn().\n * 20120211.39 (2.4.11-dev) Add ap_proxy_connect_uds().\n * 20120211.40 (2.4.11-dev) Add ap_log_data(), ap_log_rdata(), etc.\n * 20120211.41 (2.4.11-dev) Add ap_proxy_de_socketfy to mod_proxy.h\n * 20120211.42 (2.4.13-dev) Add response_code_exprs to http_core.h\n * 20120211.43 (2.4.13-dev) Add keep_alive_timeout_set to server_rec\n * 20120211.44 (2.4.13-dev) Add cgi_pass_auth and AP_CGI_PASS_AUTH_* to\n *                          core_dir_config\n * 20120211.45 (2.4.13-dev) Add ap_proxy_connection_reusable()\n * 20120211.46 (2.4.13-dev) Add ap_map_http_request_error()\n * 20120211.47 (2.4.13-dev) Add ap_some_authn_required, ap_force_authn hook.\n *                          Deprecate broken ap_some_auth_required.\n * 20120211.48 (2.4.17-dev) Added ap_log_mpm_common().\n * 20120211.49 (2.4.17-dev) Add listener bucket in scoreboard.h's process_score.\n * 20120211.50 (2.4.17-dev) Add ap_set_listencbratio(), ap_close_listeners_ex(),\n *                          ap_duplicate_listeners(), ap_num_listen_buckets and\n *                          ap_have_so_reuseport to ap_listen.h.\n * 20120211.51 (2.4.17-dev) Add protocols and protocols_honor_order to\n *                          core_server_config. Add hooks protocol_propose\n *                          protocol_switch and protocol_get. Add\n *                          ap_select_protocol(), ap_switch_protocol(),\n *                          ap_get_protocol(). Add HTTP_MISDIRECTED_REQUEST.\n *                          Added ap_parse_token_list_strict() to httpd.h\n * 20120211.52 (2.4.17-dev) Add master conn_rec* member in conn_rec.\n * 20120211.53 (2.4.19-dev) Add expr_handler to core_dir_config.\n * 20120211.54 (2.4.19-dev) Add ap_proxy_buckets_lifetime_transform and\n *                          ap_proxy_transfer_between_connections to\n *                          mod_proxy.h\n * 20120211.55 (2.4.19-dev) Add new ap_update_child_status...() methods,\n *                          add protocol to worker_score in scoreboard.h,\n *                          Add pre_close connection hook and\n *                          ap_prep_lingering_close().\n * 20120211.56 (2.4.19-dev) Split useragent_host from the conn_rec into\n *                          the request_rec, with ap_get_useragent_host()\n * 20120211.57 (2.4.19-dev) Add mod_ssl_openssl.h and OpenSSL-specific hooks\n * 20120211.58 (2.4.21-dev) Add cgi_var_rules to core_dir_config.\n * 20120211.59 (2.4.21-dev) Add ap_getword_conf2[_nc](),\n *                          ap_proxy_is_socket_connected() and\n *                          extended proxy_worker_shared.\n * 20120211.60 (2.4.21-dev) Add dav_get_provider_name.\n * 20120211.61 (2.4.21-dev) Add ap_cstr_casecmp[n]() - placeholder of apr_ fns\n * 20120211.62 (2.4.24-dev) Add childtags to dav_error.\n * 20120211.63 (2.4.24-dev) Add dav_begin_multistatus, dav_send_one_response,\n *                          dav_finish_multistatus, dav_send_multistatus,\n *                          dav_handle_err, dav_failed_proppatch,\n *                          dav_success_proppatch.\n * 20120211.64 (2.4.24-dev) Add ap_proxy_check_backend(), and tmp_bb to struct\n *                          proxy_conn_rec.\n * 20120211.65 (2.4.24-dev) Add ap_check_pipeline().\n * 20120211.66 (2.4.24-dev) Rename ap_proxy_check_backend() to\n *                          ap_proxy_check_connection().\n * 20120211.67 (2.4.24-dev) Add http09_enable, http_conformance, and\n *                          http_methods to core_server_config\n *                          Add ap_scan_http_field_token(),\n *                          ap_scan_http_field_content(),\n *                          and ap_scan_vchar_obstext()\n *                          Replaced fold boolean with with multiple bit flags\n *                          to ap_[r]getline()\n * 20120211.68 (2.4.26-dev) Add ap_get_basic_auth_components() and deprecate\n *                          ap_get_basic_auth_pw()\n * 20120211.69 (2.4.30-dev) Add ap_update_sb_handle()\n * 20120211.70 (2.4.30-dev) Add flags field to module_struct and function\n *                          ap_get_module_flags()\n * 20120211.71 (2.4.30-dev) Add optional proxy_{hook,run}_section_post_config(),\n *                          ap_proxy_connection_create_ex() and section_config\n *                          to struct proxy_{worker,balancer} in mod_proxy.h,\n *                          and optional ssl_engine_set() to mod_ssl.h.\n * 20120211.72 (2.4.30-dev) Add NOT_IN_DIR_CONTEXT replacing NOT_IN_DIR_LOC_FILE\n *                          semantics\n * 20120211.73 (2.4.30-dev) Add failontimeout_set, growth_set and lbmethod_set\n *                          to proxy_balancer struct\n * 20120211.74 (2.4.30-dev) Add AP_REG_DOLLAR_ENDONLY, ap_regcomp_get_default_cflags\n *                          ap_regcomp_set_default_cflags and\n *                          ap_regcomp_default_cflag_by_name\n * 20120211.75 (2.4.30-dev) Add hostname_ex to proxy_worker_shared\n * 20120211.76 (2.4.30-dev) Add CONN_STATE_NUM to enum conn_state_e\n * 20120211.77 (2.4.34-dev) Add ap_exists_directive()\n * 20120211.78 (2.4.34-dev) Add response_field_size to proxy_worker_shared \n * 20120211.79 (2.4.34-dev) Add AP_GETLINE_NOSPC_EOL flag to http_protocol.h\n * 20120211.80 (2.4.35-dev) Add new ap_update_global_status() method and\n *                          times field in the global_score structure in\n *                          scoreboard.h.\n * 20120211.81 (2.4.35-dev) Add new duration field to worker_score struct in\n *                          scoreboard.h\n * 20120211.82 (2.4.35-dev) Add optional function declaration for\n *                          ap_proxy_balancer_get_best_worker to mod_proxy.h.\n * 20120211.83 (2.4.35-dev) Add client64 field to worker_score struct\n * 20120211.84 (2.4.35-dev) Add ap_no2slash_ex() and merge_slashes to \n *                          core_server_conf.\n * 20120211.85 (2.4.40-dev) add ap_set_conn_count().\n * 20120211.86 (2.4.40-dev) Add forward_100_continue{,_set} to proxy_dir_conf\n * 20120211.87 (2.4.40-dev) Add dav_popen_propdb\n * 20120211.88 (2.4.40-dev) Add ap_dir_nofnmatch() and ap_dir_fnmatch().\n * 20120211.89 (2.4.42-dev) Add add dns_pool to proxy_conn_pool and define\n *                          AP_VOLATILIZE_T.\n * 20120211.90 (2.4.42-dev) AP_REG_DEFAULT macro in ap_regex.h\n * 20120211.91 (2.4.42-dev) Add ap_is_chunked() in httpd.h\n * 20120211.92 (2.4.42-dev) AP_REG_NO_DEFAULT macro in ap_regex.h\n * 20120211.93 (2.4.44-dev) Add ap_parse_strict_length()\n * 20120211.94 (2.4.47-dev) Add ap_proxy_define_match_worker()\n * 20120211.95 (2.4.47-dev) Add proxy check_trans hook\n * 20120211.96 (2.4.47-dev) Add ap_get_status_line_ex()\n * 20120211.97 (2.4.47-dev) Add read_buf_size member to core_dir_config,\n *                          flush_max_threshold and flush_max_pipelined to\n *                          core_server_config, and ap_get_read_buf_size().\n * 20120211.98 (2.4.47-dev) Add ap_proxy_should_override to mod_proxy.h\n * 20120211.99 (2.4.47-dev) Add proxy_tunnel_rec, ap_proxy_tunnel_create()\n *                          and ap_proxy_tunnel_run() to proxy_util.\n * 20120211.99 (2.4.47-dev) Add ap_proxy_worker_can_upgrade()\n * 20120211.100 (2.4.47-dev) Add ap_proxy_prefetch_input(),\n *                           ap_proxy_spool_input() and\n *                           ap_proxy_read_input().\n * 20120211.101 (2.4.47-dev) ETAG_DIGEST in http_core.h. struct etag_rec,\n *                           ap_make_etag_ex() and ap_set_etag_fd() in\n *                           http_protocol.h. ap_request_bnotes_t,\n *                           AP_REQUEST_STRONG_ETAG, AP_REQUEST_GET_BNOTE,\n *                           AP_REQUEST_SET_BNOTE and AP_REQUEST_IS_STRONG_ETAG\n *                           in httpd.h.\n * 20120211.102 (2.4.47-dev) Add ap_ssl_conn_is_ssl()/ap_ssl_var_lookup() and hooks\n * 20120211.103 (2.4.47-dev) Add ap_ssl_add_cert_files, ap_ssl_add_fallback_cert_files\n *                           and ap_ssl_answer_challenge and hooks.\n * 20120211.104 (2.4.47-dev) Move ap_ssl_* into new http_ssl.h header file\n * 20120211.105 (2.4.47-dev) Add ap_ssl_ocsp* hooks and functions to http_ssl.h.\n * 20120211.106 (2.4.47-dev) Add ap_create_request().\n * 20120211.107 (2.4.47-dev) Add ap_parse_request_line() and\n *                           ap_check_request_header()\n */\n\n#define MODULE_MAGIC_COOKIE 0x41503234UL /* \"AP24\" */\n\n#ifndef MODULE_MAGIC_NUMBER_MAJOR\n#define MODULE_MAGIC_NUMBER_MAJOR 20120211\n#endif\n#define MODULE_MAGIC_NUMBER_MINOR 107                 /* 0...n */\n\n/**\n * Determine if the server's current MODULE_MAGIC_NUMBER is at least a\n * specified value.\n *\n * Useful for testing for features.\n * For example, suppose you wish to use the apr_table_overlap\n *    function.  You can do this:\n *\n * \\code\n * #if AP_MODULE_MAGIC_AT_LEAST(19980812,2)\n *     ... use apr_table_overlap()\n * #else\n *     ... alternative code which doesn't use apr_table_overlap()\n * #endif\n * \\endcode\n *\n * @param major The major module magic number\n * @param minor The minor module magic number\n * @def AP_MODULE_MAGIC_AT_LEAST(int major, int minor)\n */\n#define AP_MODULE_MAGIC_AT_LEAST(major,minor)           \\\n    ((major) < MODULE_MAGIC_NUMBER_MAJOR                \\\n     || ((major) == MODULE_MAGIC_NUMBER_MAJOR           \\\n         && (minor) <= MODULE_MAGIC_NUMBER_MINOR))\n\n/** @deprecated present for backwards compatibility */\n#define MODULE_MAGIC_NUMBER MODULE_MAGIC_NUMBER_MAJOR\n#define MODULE_MAGIC_AT_LEAST old_broken_macro_we_hope_you_are_not_using\n\n#endif /* !APACHE_AP_MMN_H */\n/** @} */\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  http_core.h\n * @brief CORE HTTP Daemon\n *\n * @defgroup APACHE_CORE_HTTPD Core HTTP Daemon\n * @ingroup  APACHE_CORE\n * @{\n */\n\n#ifndef APACHE_HTTP_CORE_H\n#define APACHE_HTTP_CORE_H\n\n#include \"apr.h\"\n#include \"apr_hash.h\"\n#include \"apr_optional.h\"\n#include \"util_filter.h\"\n#include \"ap_expr.h\"\n#include \"apr_tables.h\"\n\n#include \"http_config.h\"\n\n#if APR_HAVE_STRUCT_RLIMIT\n#include <sys/time.h>\n#include <sys/resource.h>\n#endif\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* ****************************************************************\n *\n * The most basic server code is encapsulated in a single module\n * known as the core, which is just *barely* functional enough to\n * serve documents, though not terribly well.\n *\n * Largely for NCSA back-compatibility reasons, the core needs to\n * make pieces of its config structures available to other modules.\n * The accessors are declared here, along with the interpretation\n * of one of them (allow_options).\n */\n\n/**\n * @defgroup APACHE_CORE_HTTPD_ACESSORS Acessors\n *\n * @brief File/Directory Accessor directives\n *\n * @{\n */\n\n/** No directives */\n#define OPT_NONE 0\n/** Indexes directive */\n#define OPT_INDEXES 1\n/** SSI is enabled without exec= permission  */\n#define OPT_INCLUDES 2\n/**  FollowSymLinks directive */\n#define OPT_SYM_LINKS 4\n/**  ExecCGI directive */\n#define OPT_EXECCGI 8\n/**  directive unset */\n#define OPT_UNSET 16\n/**  SSI exec= permission is permitted, iff OPT_INCLUDES is also set */\n#define OPT_INC_WITH_EXEC 32\n/** SymLinksIfOwnerMatch directive */\n#define OPT_SYM_OWNER 64\n/** MultiViews directive */\n#define OPT_MULTI 128\n/**  All directives */\n#define OPT_ALL (OPT_INDEXES|OPT_INCLUDES|OPT_INC_WITH_EXEC|OPT_SYM_LINKS|OPT_EXECCGI)\n/** @} */\n\n/**\n * @defgroup get_remote_host Remote Host Resolution\n * @ingroup APACHE_CORE_HTTPD\n * @{\n */\n/** REMOTE_HOST returns the hostname, or NULL if the hostname\n * lookup fails.  It will force a DNS lookup according to the\n * HostnameLookups setting.\n */\n#define REMOTE_HOST (0)\n\n/** REMOTE_NAME returns the hostname, or the dotted quad if the\n * hostname lookup fails.  It will force a DNS lookup according\n * to the HostnameLookups setting.\n */\n#define REMOTE_NAME (1)\n\n/** REMOTE_NOLOOKUP is like REMOTE_NAME except that a DNS lookup is\n * never forced.\n */\n#define REMOTE_NOLOOKUP (2)\n\n/** REMOTE_DOUBLE_REV will always force a DNS lookup, and also force\n * a double reverse lookup, regardless of the HostnameLookups\n * setting.  The result is the (double reverse checked) hostname,\n * or NULL if any of the lookups fail.\n */\n#define REMOTE_DOUBLE_REV (3)\n\n/** @} // get_remote_host */\n\n/** all of the requirements must be met */\n#define SATISFY_ALL 0\n/**  any of the requirements must be met */\n#define SATISFY_ANY 1\n/** There are no applicable satisfy lines */\n#define SATISFY_NOSPEC 2\n\n/** Make sure we don't write less than 8000 bytes at any one time.\n */\n#define AP_MIN_BYTES_TO_WRITE  8000\n\n/** default maximum of internal redirects */\n# define AP_DEFAULT_MAX_INTERNAL_REDIRECTS 10\n\n/** default maximum subrequest nesting level */\n# define AP_DEFAULT_MAX_SUBREQ_DEPTH 10\n\n/**\n * Retrieve the value of Options for this request\n * @param r The current request\n * @return the Options bitmask\n */\nAP_DECLARE(int) ap_allow_options(request_rec *r);\n\n/**\n * Retrieve the value of the AllowOverride for this request\n * @param r The current request\n * @return the overrides bitmask\n */\nAP_DECLARE(int) ap_allow_overrides(request_rec *r);\n\n/**\n * Retrieve the document root for this server\n * @param r The current request\n * @warning Don't use this!  If your request went through a Userdir, or\n * something like that, it'll screw you.  But it's back-compatible...\n * @return The document root\n */\nAP_DECLARE(const char *) ap_document_root(request_rec *r);\n\n/**\n * Lookup the remote user agent's DNS name or IP address\n * @ingroup get_remote_host\n * @param req The current request\n * @param type The type of lookup to perform.  One of:\n * <pre>\n *     REMOTE_HOST returns the hostname, or NULL if the hostname\n *                 lookup fails.  It will force a DNS lookup according to the\n *                 HostnameLookups setting.\n *     REMOTE_NAME returns the hostname, or the dotted quad if the\n *                 hostname lookup fails.  It will force a DNS lookup according\n *                 to the HostnameLookups setting.\n *     REMOTE_NOLOOKUP is like REMOTE_NAME except that a DNS lookup is\n *                     never forced.\n *     REMOTE_DOUBLE_REV will always force a DNS lookup, and also force\n *                   a double reverse lookup, regardless of the HostnameLookups\n *                   setting.  The result is the (double reverse checked)\n *                   hostname, or NULL if any of the lookups fail.\n * </pre>\n * @param str_is_ip unless NULL is passed, this will be set to non-zero on\n *        output when an IP address string is returned\n * @return The remote hostname (based on the request useragent_ip)\n */\nAP_DECLARE(const char *) ap_get_useragent_host(request_rec *req, int type,\n                                               int *str_is_ip);\n\n/**\n * Lookup the remote client's DNS name or IP address\n * @ingroup get_remote_host\n * @param conn The current connection\n * @param dir_config The directory config vector from the request\n * @param type The type of lookup to perform.  One of:\n * <pre>\n *     REMOTE_HOST returns the hostname, or NULL if the hostname\n *                 lookup fails.  It will force a DNS lookup according to the\n *                 HostnameLookups setting.\n *     REMOTE_NAME returns the hostname, or the dotted quad if the\n *                 hostname lookup fails.  It will force a DNS lookup according\n *                 to the HostnameLookups setting.\n *     REMOTE_NOLOOKUP is like REMOTE_NAME except that a DNS lookup is\n *                     never forced.\n *     REMOTE_DOUBLE_REV will always force a DNS lookup, and also force\n *                   a double reverse lookup, regardless of the HostnameLookups\n *                   setting.  The result is the (double reverse checked)\n *                   hostname, or NULL if any of the lookups fail.\n * </pre>\n * @param str_is_ip unless NULL is passed, this will be set to non-zero on output when an IP address\n *        string is returned\n * @return The remote hostname (based on the connection client_ip)\n */\nAP_DECLARE(const char *) ap_get_remote_host(conn_rec *conn, void *dir_config, int type, int *str_is_ip);\n\n/**\n * Retrieve the login name of the remote user.  Undef if it could not be\n * determined\n * @param r The current request\n * @return The user logged in to the client machine\n */\nAP_DECLARE(const char *) ap_get_remote_logname(request_rec *r);\n\n/* Used for constructing self-referencing URLs, and things like SERVER_PORT,\n * and SERVER_NAME.\n */\n/**\n * build a fully qualified URL from the uri and information in the request rec\n * @param p The pool to allocate the URL from\n * @param uri The path to the requested file\n * @param r The current request\n * @return A fully qualified URL\n */\nAP_DECLARE(char *) ap_construct_url(apr_pool_t *p, const char *uri, request_rec *r);\n\n/**\n * Get the current server name from the request\n * @param r The current request\n * @return the server name\n */\nAP_DECLARE(const char *) ap_get_server_name(request_rec *r);\n\n/**\n * Get the current server name from the request for the purposes\n * of using in a URL.  If the server name is an IPv6 literal\n * address, it will be returned in URL format (e.g., \"[fe80::1]\").\n * @param r The current request\n * @return the server name\n */\nAP_DECLARE(const char *) ap_get_server_name_for_url(request_rec *r);\n\n/**\n * Get the current server port\n * @param r The current request\n * @return The server's port\n */\nAP_DECLARE(apr_port_t) ap_get_server_port(const request_rec *r);\n\n/**\n * Get the size of read buffers\n * @param r The current request\n * @return The read buffers size\n */\nAP_DECLARE(apr_size_t) ap_get_read_buf_size(const request_rec *r);\n\n/**\n * Return the limit on bytes in request msg body\n * @param r The current request\n * @return the maximum number of bytes in the request msg body\n */\nAP_DECLARE(apr_off_t) ap_get_limit_req_body(const request_rec *r);\n\n/**\n * Return the limit on bytes in XML request msg body\n * @param r The current request\n * @return the maximum number of bytes in XML request msg body\n */\nAP_DECLARE(apr_size_t) ap_get_limit_xml_body(const request_rec *r);\n\n/**\n * Install a custom response handler for a given status\n * @param r The current request\n * @param status The status for which the custom response should be used\n * @param string The custom response.  This can be a static string, a file\n *               or a URL\n */\nAP_DECLARE(void) ap_custom_response(request_rec *r, int status, const char *string);\n\n/**\n * Check if the current request is beyond the configured max. number of redirects or subrequests\n * @param r The current request\n * @return true (is exceeded) or false\n */\nAP_DECLARE(int) ap_is_recursion_limit_exceeded(const request_rec *r);\n\n/**\n * Check for a definition from the server command line\n * @param name The define to check for\n * @return 1 if defined, 0 otherwise\n */\nAP_DECLARE(int) ap_exists_config_define(const char *name);\n/* FIXME! See STATUS about how */\nAP_DECLARE_NONSTD(int) ap_core_translate(request_rec *r);\n\n/* Authentication stuff.  This is one of the places where compatibility\n * with the old config files *really* hurts; they don't discriminate at\n * all between different authentication schemes, meaning that we need\n * to maintain common state for all of them in the core, and make it\n * available to the other modules through interfaces.\n */\n\n/** @see require_line */\ntypedef struct require_line require_line;\n\n/**\n * @brief A structure to keep track of authorization requirements\n*/\nstruct require_line {\n    /** Where the require line is in the config file. */\n    apr_int64_t method_mask;\n    /** The complete string from the command line */\n    char *requirement;\n};\n\n/**\n * Return the type of authorization required for this request\n * @param r The current request\n * @return The authorization required\n */\nAP_DECLARE(const char *) ap_auth_type(request_rec *r);\n\n/**\n * Return the current Authorization realm\n * @param r The current request\n * @return The current authorization realm\n */\nAP_DECLARE(const char *) ap_auth_name(request_rec *r);\n\n/**\n * How the requires lines must be met.\n * @param r The current request\n * @return How the requirements must be met.  One of:\n * <pre>\n *      SATISFY_ANY    -- any of the requirements must be met.\n *      SATISFY_ALL    -- all of the requirements must be met.\n *      SATISFY_NOSPEC -- There are no applicable satisfy lines\n * </pre>\n */\nAP_DECLARE(int) ap_satisfies(request_rec *r);\n\n/**\n * Core is also unlike other modules in being implemented in more than\n * one file... so, data structures are declared here, even though most of\n * the code that cares really is in http_core.c.  Also, another accessor.\n */\nAP_DECLARE_DATA extern module core_module;\n\n/**\n * Accessor for core_module's specific data. Equivalent to\n * ap_get_module_config(cv, &core_module) but more efficient.\n * @param cv The vector in which the modules configuration is stored.\n *        usually r->per_dir_config or s->module_config\n * @return The module-specific data\n */\nAP_DECLARE(void *) ap_get_core_module_config(const ap_conf_vector_t *cv);\n\n/**\n * Accessor to set core_module's specific data. Equivalent to\n * ap_set_module_config(cv, &core_module, val) but more efficient.\n * @param cv The vector in which the modules configuration is stored.\n *        usually r->per_dir_config or s->module_config\n * @param val The module-specific data to set\n */\nAP_DECLARE(void) ap_set_core_module_config(ap_conf_vector_t *cv, void *val);\n\n/** Get the socket from the core network filter. This should be used instead of\n * accessing the core connection config directly.\n * @param c The connection record\n * @return The socket\n */\nAP_DECLARE(apr_socket_t *) ap_get_conn_socket(conn_rec *c);\n\n#ifndef AP_DEBUG\n#define AP_CORE_MODULE_INDEX  0\n#define ap_get_core_module_config(v) \\\n    (((void **)(v))[AP_CORE_MODULE_INDEX])\n#define ap_set_core_module_config(v, val) \\\n    ((((void **)(v))[AP_CORE_MODULE_INDEX]) = (val))\n#else\n#define AP_CORE_MODULE_INDEX  (AP_DEBUG_ASSERT(core_module.module_index == 0), 0)\n#endif\n\n/**\n * @brief  Per-request configuration\n*/\ntypedef struct {\n    /** bucket brigade used by getline for look-ahead and\n     * ap_get_client_block for holding left-over request body */\n    struct apr_bucket_brigade *bb;\n\n    /** an array of per-request working data elements, accessed\n     * by ID using ap_get_request_note()\n     * (Use ap_register_request_note() during initialization\n     * to add elements)\n     */\n    void **notes;\n\n    /** Custom response strings registered via ap_custom_response(),\n     * or NULL; check per-dir config if nothing found here\n     */\n    char **response_code_strings; /* from ap_custom_response(), not from\n                                   * ErrorDocument\n                                   */\n\n    /** per-request document root of the server. This allows mass vhosting\n     * modules better compatibility with some scripts. Normally the\n     * context_* info should be used instead */\n    const char *document_root;\n\n    /*\n     * more fine-grained context information which is set by modules like\n     * mod_alias and mod_userdir\n     */\n    /** the context root directory on disk for the current resource,\n     *  without trailing slash\n     */\n    const char *context_document_root;\n    /** the URI prefix that corresponds to the context_document_root directory,\n     *  without trailing slash\n     */\n    const char *context_prefix;\n\n    /** There is a script processor installed on the output filter chain,\n     * so it needs the default_handler to deliver a (script) file into\n     * the chain so it can process it. Normally, default_handler only\n     * serves files on a GET request (assuming the file is actual content),\n     * since other methods are not content-retrieval. This flag overrides\n     * that behavior, stating that the \"content\" is actually a script and\n     * won't actually be delivered as the response for the non-GET method.\n     */\n    int deliver_script;\n\n    /** Should addition of charset= be suppressed for this request?\n     */\n    int suppress_charset;\n} core_request_config;\n\n/* Standard entries that are guaranteed to be accessible via\n * ap_get_request_note() for each request (additional entries\n * can be added with ap_register_request_note())\n */\n#define AP_NOTE_DIRECTORY_WALK 0\n#define AP_NOTE_LOCATION_WALK  1\n#define AP_NOTE_FILE_WALK      2\n#define AP_NOTE_IF_WALK        3\n#define AP_NUM_STD_NOTES       4\n\n/**\n * Reserve an element in the core_request_config->notes array\n * for some application-specific data\n * @return An integer key that can be passed to ap_get_request_note()\n *         during request processing to access this element for the\n *         current request.\n */\nAP_DECLARE(apr_size_t) ap_register_request_note(void);\n\n/**\n * Retrieve a pointer to an element in the core_request_config->notes array\n * @param r The request\n * @param note_num  A key for the element: either a value obtained from\n *        ap_register_request_note() or one of the predefined AP_NOTE_*\n *        values.\n * @return NULL if the note_num is invalid, otherwise a pointer to the\n *         requested note element.\n * @remark At the start of a request, each note element is NULL.  The\n *         handle provided by ap_get_request_note() is a pointer-to-pointer\n *         so that the caller can point the element to some app-specific\n *         data structure.  The caller should guarantee that any such\n *         structure will last as long as the request itself.\n */\nAP_DECLARE(void **) ap_get_request_note(request_rec *r, apr_size_t note_num);\n\n\ntypedef unsigned char allow_options_t;\ntypedef unsigned int overrides_t;\n\n/*\n * Bits of info that go into making an ETag for a file\n * document.  Why a long?  Because char historically\n * proved too short for Options, and int can be different\n * sizes on different platforms.\n */\ntypedef unsigned long etag_components_t;\n\n#define ETAG_UNSET  0\n#define ETAG_NONE   (1 << 0)\n#define ETAG_MTIME  (1 << 1)\n#define ETAG_INODE  (1 << 2)\n#define ETAG_SIZE   (1 << 3)\n#define ETAG_DIGEST (1 << 4)\n#define ETAG_ALL    (ETAG_MTIME | ETAG_INODE | ETAG_SIZE)\n/* This is the default value used */\n#define ETAG_BACKWARD (ETAG_MTIME | ETAG_SIZE)\n\n/* Generic ON/OFF/UNSET for unsigned int foo :2 */\n#define AP_CORE_CONFIG_OFF   (0)\n#define AP_CORE_CONFIG_ON    (1)\n#define AP_CORE_CONFIG_UNSET (2)\n\n/* Generic merge of flag */\n#define AP_CORE_MERGE_FLAG(field, to, base, over) to->field = \\\n               over->field != AP_CORE_CONFIG_UNSET            \\\n               ? over->field                                  \\\n               : base->field                                   \n\n/**\n * @brief Server Signature Enumeration\n */\ntypedef enum {\n    srv_sig_unset,\n    srv_sig_off,\n    srv_sig_on,\n    srv_sig_withmail\n} server_signature_e;\n\n/**\n * @brief Per-directory configuration\n */\ntypedef struct {\n    /** path of the directory/regex/etc. see also d_is_fnmatch/absolute below */\n    char *d;\n    /** the number of slashes in d */\n    unsigned d_components;\n\n    /** If (opts & OPT_UNSET) then no absolute assignment to options has\n     * been made.\n     * invariant: (opts_add & opts_remove) == 0\n     * Which said another way means that the last relative (options + or -)\n     * assignment made to each bit is recorded in exactly one of opts_add\n     * or opts_remove.\n     */\n    allow_options_t opts;\n    allow_options_t opts_add;\n    allow_options_t opts_remove;\n    overrides_t override;\n    allow_options_t override_opts;\n\n    /* Used to be the custom response config. No longer used. */\n    char **response_code_strings; /* from ErrorDocument, not from\n                                   * ap_custom_response() */\n\n    /* Hostname resolution etc */\n#define HOSTNAME_LOOKUP_OFF     0\n#define HOSTNAME_LOOKUP_ON      1\n#define HOSTNAME_LOOKUP_DOUBLE  2\n#define HOSTNAME_LOOKUP_UNSET   3\n    unsigned int hostname_lookups : 4;\n\n    unsigned int content_md5 : 2;  /* calculate Content-MD5? */\n\n#define USE_CANONICAL_NAME_OFF   (0)\n#define USE_CANONICAL_NAME_ON    (1)\n#define USE_CANONICAL_NAME_DNS   (2)\n#define USE_CANONICAL_NAME_UNSET (3)\n    unsigned use_canonical_name : 2;\n\n    /* since is_fnmatch(conf->d) was being called so frequently in\n     * directory_walk() and its relatives, this field was created and\n     * is set to the result of that call.\n     */\n    unsigned d_is_fnmatch : 1;\n\n    /* should we force a charset on any outgoing parameterless content-type?\n     * if so, which charset?\n     */\n#define ADD_DEFAULT_CHARSET_OFF   (0)\n#define ADD_DEFAULT_CHARSET_ON    (1)\n#define ADD_DEFAULT_CHARSET_UNSET (2)\n    unsigned add_default_charset : 2;\n    const char *add_default_charset_name;\n\n    /* System Resource Control */\n#ifdef RLIMIT_CPU\n    struct rlimit *limit_cpu;\n#endif\n#if defined (RLIMIT_DATA) || defined (RLIMIT_VMEM) || defined(RLIMIT_AS)\n    struct rlimit *limit_mem;\n#endif\n#ifdef RLIMIT_NPROC\n    struct rlimit *limit_nproc;\n#endif\n    apr_off_t limit_req_body;      /* limit on bytes in request msg body */\n    long limit_xml_body;           /* limit on bytes in XML request msg body */\n\n    /* logging options */\n\n    server_signature_e server_signature;\n\n    /* Access control */\n    apr_array_header_t *sec_file;\n    apr_array_header_t *sec_if;\n    ap_regex_t *r;\n\n    const char *mime_type;       /* forced with ForceType  */\n    const char *handler;         /* forced by something other than SetHandler */\n    const char *output_filters;  /* forced with SetOutputFilters */\n    const char *input_filters;   /* forced with SetInputFilters */\n    int accept_path_info;        /* forced with AcceptPathInfo */\n\n    /*\n     * What attributes/data should be included in ETag generation?\n     */\n    etag_components_t etag_bits;\n    etag_components_t etag_add;\n    etag_components_t etag_remove;\n\n    /*\n     * Run-time performance tuning\n     */\n#define ENABLE_MMAP_OFF    (0)\n#define ENABLE_MMAP_ON     (1)\n#define ENABLE_MMAP_UNSET  (2)\n    unsigned int enable_mmap : 2;  /* whether files in this dir can be mmap'ed */\n\n#define ENABLE_SENDFILE_OFF    (0)\n#define ENABLE_SENDFILE_ON     (1)\n#define ENABLE_SENDFILE_UNSET  (2)\n    unsigned int enable_sendfile : 2;  /* files in this dir can be sendfile'ed */\n\n#define USE_CANONICAL_PHYS_PORT_OFF   (0)\n#define USE_CANONICAL_PHYS_PORT_ON    (1)\n#define USE_CANONICAL_PHYS_PORT_UNSET (2)\n    unsigned int use_canonical_phys_port : 2;\n\n    unsigned int allow_encoded_slashes : 1; /* URLs may contain %2f w/o being\n                                             * pitched indiscriminately */\n    unsigned int decode_encoded_slashes : 1; /* whether to decode encoded slashes in URLs */\n\n#define AP_CONDITION_IF        1\n#define AP_CONDITION_ELSE      2\n#define AP_CONDITION_ELSEIF    (AP_CONDITION_ELSE|AP_CONDITION_IF)\n    unsigned int condition_ifelse : 2; /* is this an <If>, <ElseIf>, or <Else> */\n\n    ap_expr_info_t *condition;   /* Conditionally merge <If> sections */\n\n    /** per-dir log config */\n    struct ap_logconf *log;\n\n    /** Table of directives allowed per AllowOverrideList */\n    apr_table_t *override_list;\n\n#define AP_MAXRANGES_UNSET     -1\n#define AP_MAXRANGES_DEFAULT   -2\n#define AP_MAXRANGES_UNLIMITED -3\n#define AP_MAXRANGES_NORANGES   0\n    /** Number of Ranges before returning HTTP_OK. **/\n    int max_ranges;\n    /** Max number of Range overlaps (merges) allowed **/\n    int max_overlaps;\n    /** Max number of Range reversals (eg: 200-300, 100-125) allowed **/\n    int max_reversals;\n\n    /** Named back references */\n    apr_array_header_t *refs;\n\n    /** Custom response config with expression support. The hash table\n     * contains compiled expressions keyed against the custom response\n     * code.\n     */\n    apr_hash_t *response_code_exprs;\n\n#define AP_CGI_PASS_AUTH_OFF     (0)\n#define AP_CGI_PASS_AUTH_ON      (1)\n#define AP_CGI_PASS_AUTH_UNSET   (2)\n    /** CGIPassAuth: Whether HTTP authorization headers will be passed to\n     * scripts as CGI variables; affects all modules calling\n     * ap_add_common_vars(), as well as any others using this field as \n     * advice\n     */\n    unsigned int cgi_pass_auth : 2;\n    unsigned int qualify_redirect_url :2;\n    ap_expr_info_t  *expr_handler;         /* forced with SetHandler */\n\n    /** Table of rules for building CGI variables, NULL if none configured */\n    apr_hash_t *cgi_var_rules;\n\n    apr_size_t read_buf_size;\n} core_dir_config;\n\n/* macro to implement off by default behaviour */\n#define AP_SENDFILE_ENABLED(x) \\\n    ((x) == ENABLE_SENDFILE_ON ? APR_SENDFILE_ENABLED : 0)\n\n/* Per-server core configuration */\n\ntypedef struct {\n\n    char *gprof_dir;\n\n    /* Name translations --- we want the core to be able to do *something*\n     * so it's at least a minimally functional web server on its own (and\n     * can be tested that way).  But let's keep it to the bare minimum:\n     */\n    const char *ap_document_root;\n\n    /* Access control */\n\n    char *access_name;\n    apr_array_header_t *sec_dir;\n    apr_array_header_t *sec_url;\n\n    /* recursion backstopper */\n    int redirect_limit; /* maximum number of internal redirects */\n    int subreq_limit;   /* maximum nesting level of subrequests */\n\n    const char *protocol;\n    apr_table_t *accf_map;\n\n    /* array of ap_errorlog_format_item for error log format string */\n    apr_array_header_t *error_log_format;\n    /*\n     * two arrays of arrays of ap_errorlog_format_item for additional information\n     * logged to the error log once per connection/request\n     */\n    apr_array_header_t *error_log_conn;\n    apr_array_header_t *error_log_req;\n\n    /* TRACE control */\n#define AP_TRACE_UNSET    -1\n#define AP_TRACE_DISABLE   0\n#define AP_TRACE_ENABLE    1\n#define AP_TRACE_EXTENDED  2\n    int trace_enable;\n#define AP_MERGE_TRAILERS_UNSET    0\n#define AP_MERGE_TRAILERS_ENABLE   1\n#define AP_MERGE_TRAILERS_DISABLE  2\n    int merge_trailers;\n\n    apr_array_header_t *protocols;\n    int protocols_honor_order;\n\n#define AP_HTTP09_UNSET   0\n#define AP_HTTP09_ENABLE  1\n#define AP_HTTP09_DISABLE 2\n    char http09_enable;\n\n#define AP_HTTP_CONFORMANCE_UNSET     0\n#define AP_HTTP_CONFORMANCE_UNSAFE    1\n#define AP_HTTP_CONFORMANCE_STRICT    2\n    char http_conformance;\n\n#define AP_HTTP_METHODS_UNSET         0\n#define AP_HTTP_METHODS_LENIENT       1\n#define AP_HTTP_METHODS_REGISTERED    2\n    char http_methods;\n    unsigned int merge_slashes;\n \n    apr_size_t   flush_max_threshold;\n    apr_int32_t  flush_max_pipelined;\n    unsigned int strict_host_check;\n} core_server_config;\n\n/* for AddOutputFiltersByType in core.c */\nvoid ap_add_output_filters_by_type(request_rec *r);\n\n/* for http_config.c */\nvoid ap_core_reorder_directories(apr_pool_t *, server_rec *);\n\n/* for mod_perl */\nAP_CORE_DECLARE(void) ap_add_per_dir_conf(server_rec *s, void *dir_config);\nAP_CORE_DECLARE(void) ap_add_per_url_conf(server_rec *s, void *url_config);\nAP_CORE_DECLARE(void) ap_add_file_conf(apr_pool_t *p, core_dir_config *conf, void *url_config);\nAP_CORE_DECLARE(const char *) ap_add_if_conf(apr_pool_t *p, core_dir_config *conf, void *url_config);\nAP_CORE_DECLARE_NONSTD(const char *) ap_limit_section(cmd_parms *cmd, void *dummy, const char *arg);\n\n/* Core filters; not exported. */\napr_status_t ap_core_input_filter(ap_filter_t *f, apr_bucket_brigade *b,\n                                  ap_input_mode_t mode, apr_read_type_e block,\n                                  apr_off_t readbytes);\napr_status_t ap_core_output_filter(ap_filter_t *f, apr_bucket_brigade *b);\n\n\nAP_DECLARE(const char*) ap_get_server_protocol(server_rec* s);\nAP_DECLARE(void) ap_set_server_protocol(server_rec* s, const char* proto);\n\ntypedef struct core_output_filter_ctx core_output_filter_ctx_t;\ntypedef struct core_filter_ctx        core_ctx_t;\n\nstruct core_filter_ctx {\n    apr_bucket_brigade *b;\n    apr_bucket_brigade *tmpbb;\n};\n\ntypedef struct core_net_rec {\n    /** Connection to the client */\n    apr_socket_t *client_socket;\n\n    /** connection record */\n    conn_rec *c;\n\n    core_output_filter_ctx_t *out_ctx;\n    core_ctx_t *in_ctx;\n} core_net_rec;\n\n/**\n * Insert the network bucket into the core input filter's input brigade.\n * This hook is intended for MPMs or protocol modules that need to do special\n * socket setup.\n * @param c The connection\n * @param bb The brigade to insert the bucket into\n * @param socket The socket to put into a bucket\n * @return AP_DECLINED if the current function does not handle this connection,\n *         APR_SUCCESS or an error otherwise.\n */\nAP_DECLARE_HOOK(apr_status_t, insert_network_bucket,\n                (conn_rec *c, apr_bucket_brigade *bb, apr_socket_t *socket))\n\n/* ----------------------------------------------------------------------\n *\n * Runtime status/management\n */\n\ntypedef enum {\n    ap_mgmt_type_string,\n    ap_mgmt_type_long,\n    ap_mgmt_type_hash\n} ap_mgmt_type_e;\n\ntypedef union {\n    const char *s_value;\n    long i_value;\n    apr_hash_t *h_value;\n} ap_mgmt_value;\n\ntypedef struct {\n    const char *description;\n    const char *name;\n    ap_mgmt_type_e vtype;\n    ap_mgmt_value v;\n} ap_mgmt_item_t;\n\n/* Handles for core filters */\nAP_DECLARE_DATA extern ap_filter_rec_t *ap_subreq_core_filter_handle;\nAP_DECLARE_DATA extern ap_filter_rec_t *ap_core_output_filter_handle;\nAP_DECLARE_DATA extern ap_filter_rec_t *ap_content_length_filter_handle;\nAP_DECLARE_DATA extern ap_filter_rec_t *ap_core_input_filter_handle;\n\n/**\n * This hook provdes a way for modules to provide metrics/statistics about\n * their operational status.\n *\n * @param p A pool to use to create entries in the hash table\n * @param val The name of the parameter(s) that is wanted. This is\n *            tree-structured would be in the form ('*' is all the tree,\n *            'module.*' all of the module , 'module.foo.*', or\n *            'module.foo.bar' )\n * @param ht The hash table to store the results. Keys are item names, and\n *           the values point to ap_mgmt_item_t structures.\n * @ingroup hooks\n */\nAP_DECLARE_HOOK(int, get_mgmt_items,\n                (apr_pool_t *p, const char * val, apr_hash_t *ht))\n\n/* ---------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n *\n * I/O logging with mod_logio\n */\n\nAPR_DECLARE_OPTIONAL_FN(void, ap_logio_add_bytes_out,\n                        (conn_rec *c, apr_off_t bytes));\n\nAPR_DECLARE_OPTIONAL_FN(void, ap_logio_add_bytes_in,\n                        (conn_rec *c, apr_off_t bytes));\n\nAPR_DECLARE_OPTIONAL_FN(apr_off_t, ap_logio_get_last_bytes, (conn_rec *c));\n\n/* ----------------------------------------------------------------------\n *\n * Error log formats\n */\n\n/**\n * The info structure passed to callback functions of errorlog handlers.\n * Not all information is available in all contexts. In particular, all\n * pointers may be NULL.\n */\ntypedef struct ap_errorlog_info {\n    /** current server_rec.\n     *  Should be preferred over c->base_server and r->server\n     */\n    const server_rec *s;\n\n    /** current conn_rec.\n     *  Should be preferred over r->connection\n     */\n    const conn_rec *c;\n\n    /** current request_rec. */\n    const request_rec *r;\n    /** r->main if r is a subrequest, otherwise equal to r */\n    const request_rec *rmain;\n\n    /** pool passed to ap_log_perror, NULL otherwise */\n    apr_pool_t *pool;\n\n    /** name of source file where the log message was produced, NULL if N/A. */\n    const char *file;\n    /** line number in the source file, 0 if N/A */\n    int line;\n\n    /** module index of module that produced the log message, APLOG_NO_MODULE if N/A. */\n    int module_index;\n    /** log level of error message (flags like APLOG_STARTUP have been removed), -1 if N/A */\n    int level;\n\n    /** apr error status related to the log message, 0 if no error */\n    apr_status_t status;\n\n    /** 1 if logging to syslog, 0 otherwise */\n    int using_syslog;\n    /** 1 if APLOG_STARTUP was set for the log message, 0 otherwise */\n    int startup;\n\n    /** message format */\n    const char *format;\n} ap_errorlog_info;\n\n/**\n * callback function prototype for a external errorlog handler\n * @note To avoid unbounded memory usage, these functions must not allocate\n * memory from the server, connection, or request pools. If an errorlog\n * handler absolutely needs a pool to pass to other functions, it must create\n * and destroy a sub-pool.\n */\ntypedef int ap_errorlog_handler_fn_t(const ap_errorlog_info *info,\n                                     const char *arg, char *buf, int buflen);\n\n/**\n * Register external errorlog handler\n * @param p config pool to use\n * @param tag the new format specifier (i.e. the letter after the %)\n * @param handler the handler function\n * @param flags flags (reserved, set to 0)\n */\nAP_DECLARE(void) ap_register_errorlog_handler(apr_pool_t *p, char *tag,\n                                              ap_errorlog_handler_fn_t *handler,\n                                              int flags);\n\ntypedef struct ap_errorlog_handler {\n    ap_errorlog_handler_fn_t *func;\n    int flags; /* for future extensions */\n} ap_errorlog_handler;\n\n  /** item starts a new field */\n#define AP_ERRORLOG_FLAG_FIELD_SEP       1\n  /** item is the actual error message */\n#define AP_ERRORLOG_FLAG_MESSAGE         2\n  /** skip whole line if item is zero-length */\n#define AP_ERRORLOG_FLAG_REQUIRED        4\n  /** log zero-length item as '-' */\n#define AP_ERRORLOG_FLAG_NULL_AS_HYPHEN  8\n\ntypedef struct {\n    /** ap_errorlog_handler function */\n    ap_errorlog_handler_fn_t *func;\n    /** argument passed to item in {} */\n    const char *arg;\n    /** a combination of the AP_ERRORLOG_* flags */\n    unsigned int flags;\n    /** only log item if the message's log level is higher than this */\n    unsigned int min_loglevel;\n} ap_errorlog_format_item;\n\n/**\n * hook method to log error messages\n * @ingroup hooks\n * @param info pointer to ap_errorlog_info struct which contains all\n *        the details\n * @param errstr the (unformatted) message to log\n * @warning Allocating from the usual pools (pool, info->c->pool, info->p->pool)\n *          must be avoided because it can cause memory leaks.\n *          Use a subpool if necessary.\n */\nAP_DECLARE_HOOK(void, error_log, (const ap_errorlog_info *info,\n                                  const char *errstr))\n\nAP_CORE_DECLARE(void) ap_register_log_hooks(apr_pool_t *p);\nAP_CORE_DECLARE(void) ap_register_config_hooks(apr_pool_t *p);\n\n/* ----------------------------------------------------------------------\n *\n * ident lookups with mod_ident\n */\n\nAPR_DECLARE_OPTIONAL_FN(const char *, ap_ident_lookup,\n                        (request_rec *r));\n\n/* ----------------------------------------------------------------------\n *\n * authorization values with mod_authz_core\n */\n\nAPR_DECLARE_OPTIONAL_FN(int, authz_some_auth_required, (request_rec *r));\nAPR_DECLARE_OPTIONAL_FN(const char *, authn_ap_auth_type, (request_rec *r));\nAPR_DECLARE_OPTIONAL_FN(const char *, authn_ap_auth_name, (request_rec *r));\n\n/* ----------------------------------------------------------------------\n *\n * authorization values with mod_access_compat\n */\n\nAPR_DECLARE_OPTIONAL_FN(int, access_compat_ap_satisfies, (request_rec *r));\n\n/* ---------------------------------------------------------------------- */\n\n/** Query the server for some state information\n * @param query_code Which information is requested\n * @return the requested state information\n */\nAP_DECLARE(int) ap_state_query(int query_code);\n\n/*\n * possible values for query_code in ap_state_query()\n */\n\n  /** current status of the server */\n#define AP_SQ_MAIN_STATE        0\n  /** are we going to serve requests or are we just testing/dumping config */\n#define AP_SQ_RUN_MODE          1\n    /** generation of the top-level apache parent */\n#define AP_SQ_CONFIG_GEN        2\n\n/*\n * return values for ap_state_query()\n */\n\n  /** return value for unknown query_code */\n#define AP_SQ_NOT_SUPPORTED       -1\n\n/* values returned for AP_SQ_MAIN_STATE */\n  /** before the config preflight */\n#define AP_SQ_MS_INITIAL_STARTUP   1\n  /** initial configuration run for setting up log config, etc. */\n#define AP_SQ_MS_CREATE_PRE_CONFIG 2\n  /** tearing down configuration */\n#define AP_SQ_MS_DESTROY_CONFIG    3\n  /** normal configuration run */\n#define AP_SQ_MS_CREATE_CONFIG     4\n  /** running the MPM */\n#define AP_SQ_MS_RUN_MPM           5\n  /** cleaning up for exit */\n#define AP_SQ_MS_EXITING           6\n\n/* values returned for AP_SQ_RUN_MODE */\n  /** command line not yet parsed */\n#define AP_SQ_RM_UNKNOWN           1\n  /** normal operation (server requests or signal server) */\n#define AP_SQ_RM_NORMAL            2\n  /** config test only */\n#define AP_SQ_RM_CONFIG_TEST       3\n  /** only dump some parts of the config */\n#define AP_SQ_RM_CONFIG_DUMP       4\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif  /* !APACHE_HTTP_CORE_H */\n/** @} */\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  http_protocol.h\n * @brief HTTP protocol handling\n *\n * @defgroup APACHE_CORE_PROTO HTTP Protocol Handling\n * @ingroup  APACHE_CORE\n * @{\n */\n\n#ifndef APACHE_HTTP_PROTOCOL_H\n#define APACHE_HTTP_PROTOCOL_H\n\n#include \"httpd.h\"\n#include \"apr_portable.h\"\n#include \"apr_mmap.h\"\n#include \"apr_buckets.h\"\n#include \"util_filter.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * This hook allows modules to insert filters for the current error response\n * @param r the current request\n * @ingroup hooks\n */\nAP_DECLARE_HOOK(void,insert_error_filter,(request_rec *r))\n\n/** This is an optimization.  We keep a record of the filter_rec that\n * stores the old_write filter, so that we can avoid strcmp's later.\n */\nAP_DECLARE_DATA extern ap_filter_rec_t *ap_old_write_func;\n\n/*\n * Prototypes for routines which either talk directly back to the user,\n * or control the ones that eventually do.\n */\n\n/**\n * Read an empty request and set reasonable defaults.\n * @param c The current connection\n * @return The new request_rec\n */\nAP_DECLARE(request_rec *) ap_create_request(conn_rec *c);\n\n/**\n * Read a request and fill in the fields.\n * @param c The current connection\n * @return The new request_rec\n */\nrequest_rec *ap_read_request(conn_rec *c);\n\n/**\n * Parse and validate the request line.\n * @param r The current request\n * @return 1 on success, 0 on failure\n */\nAP_DECLARE(int) ap_parse_request_line(request_rec *r);\n\n/**\n * Validate the request header and select vhost.\n * @param r The current request\n * @return 1 on success, 0 on failure\n */\nAP_DECLARE(int) ap_check_request_header(request_rec *r);\n\n/**\n * Read the mime-encoded headers.\n * @param r The current request\n */\nAP_DECLARE(void) ap_get_mime_headers(request_rec *r);\n\n/**\n * Optimized version of ap_get_mime_headers() that requires a\n * temporary brigade to work with\n * @param r The current request\n * @param bb temp brigade\n */\nAP_DECLARE(void) ap_get_mime_headers_core(request_rec *r,\n                                          apr_bucket_brigade *bb);\n\n/* Finish up stuff after a request */\n\n/**\n * Called at completion of sending the response.  It sends the terminating\n * protocol information.\n * @param r The current request\n */\nAP_DECLARE(void) ap_finalize_request_protocol(request_rec *r);\n\n/**\n * Send error back to client.\n * @param r The current request\n * @param recursive_error last arg indicates error status in case we get\n *      an error in the process of trying to deal with an ErrorDocument\n *      to handle some other error.  In that case, we print the default\n *      report for the first thing that went wrong, and more briefly report\n *      on the problem with the ErrorDocument.\n */\nAP_DECLARE(void) ap_send_error_response(request_rec *r, int recursive_error);\n\n/* Set last modified header line from the lastmod date of the associated file.\n * Also, set content length.\n *\n * May return an error status, typically HTTP_NOT_MODIFIED (that when the\n * permit_cache argument is set to one).\n */\n\n/**\n * Set the content length for this request\n * @param r The current request\n * @param length The new content length\n */\nAP_DECLARE(void) ap_set_content_length(request_rec *r, apr_off_t length);\n\n/**\n * Set the keepalive status for this request\n * @param r The current request\n * @return 1 if keepalive can be set, 0 otherwise\n */\nAP_DECLARE(int) ap_set_keepalive(request_rec *r);\n\n/**\n * Return the latest rational time from a request/mtime pair.  Mtime is\n * returned unless it's in the future, in which case we return the current time.\n * @param r The current request\n * @param mtime The last modified time\n * @return the latest rational time.\n */\nAP_DECLARE(apr_time_t) ap_rationalize_mtime(request_rec *r, apr_time_t mtime);\n\n/**\n * Build the content-type that should be sent to the client from the\n * content-type specified.  The following rules are followed:\n *    - if type is NULL or \"\", return NULL (do not set content-type).\n *    - if charset adding is disabled, stop processing and return type.\n *    - then, if there are no parameters on type, add the default charset\n *    - return type\n * @param r The current request\n * @param type The content type\n * @return The content-type\n */\nAP_DECLARE(const char *) ap_make_content_type(request_rec *r,\n                                              const char *type);\n\n/**\n * Precompile metadata structures used by ap_make_content_type()\n * @param pool The pool to use for allocations\n */\nAP_DECLARE(void) ap_setup_make_content_type(apr_pool_t *pool);\n\n/** A structure with the ingredients for a file based etag */\ntypedef struct etag_rec etag_rec;\n\n/**\n * @brief A structure with the ingredients for a file based etag\n */\nstruct etag_rec {\n    /** Optional vary list validator */\n    const char *vlist_validator;\n    /** Time when the request started */\n    apr_time_t request_time;\n    /** finfo.protection (st_mode) set to zero if no such file */\n    apr_finfo_t *finfo;\n    /** File pathname used when generating a digest */\n    const char *pathname;\n    /** File descriptor used when generating a digest */\n    apr_file_t *fd;\n    /** Force a non-digest etag to be weak */\n    int force_weak;\n};\n\n/**\n * Construct an entity tag from the resource information.  If it's a real\n * file, build in some of the file characteristics.\n * @param r The current request\n * @param force_weak Force the entity tag to be weak - it could be modified\n *                   again in as short an interval.\n * @return The entity tag\n */\nAP_DECLARE(char *) ap_make_etag(request_rec *r, int force_weak);\n\n/**\n * Construct an entity tag from information provided in the etag_rec\n * structure.\n * @param r The current request\n * @param er The etag record, containing ingredients for the etag.\n */\nAP_DECLARE(char *) ap_make_etag_ex(request_rec *r, etag_rec *er);\n\n/**\n * Set the E-tag outgoing header\n * @param r The current request\n */\nAP_DECLARE(void) ap_set_etag(request_rec *r);\n\n/**\n * Set the E-tag outgoing header, with the option of forcing a strong ETag.\n * @param r The current request\n * @param fd The file descriptor\n */\nAP_DECLARE(void) ap_set_etag_fd(request_rec *r, apr_file_t *fd);\n\n/**\n * Set the last modified time for the file being sent\n * @param r The current request\n */\nAP_DECLARE(void) ap_set_last_modified(request_rec *r);\n\ntypedef enum {\n    AP_CONDITION_NONE,\n    AP_CONDITION_NOMATCH,\n    AP_CONDITION_WEAK,\n    AP_CONDITION_STRONG\n} ap_condition_e;\n\n/**\n * Tests conditional request rules for the If-Match header.\n * @param r The current request\n * @param headers The response headers to check against\n * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH\n *         if the header does not match, AP_CONDITION_STRONG for a strong\n *         match. Weak matches are not permitted for the If-Match header.\n */\nAP_DECLARE(ap_condition_e) ap_condition_if_match(request_rec *r,\n        apr_table_t *headers);\n\n/**\n * Tests conditional request rules for the If-Unmodified-Since header.\n * @param r The current request\n * @param headers The response headers to check against\n * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH\n *         if the header does not match, AP_CONDITION_WEAK if a weak match\n *         was present and allowed by RFC2616, AP_CONDITION_STRONG for a\n *         strong match.\n */\nAP_DECLARE(ap_condition_e) ap_condition_if_unmodified_since(request_rec *r,\n        apr_table_t *headers);\n\n/**\n * Tests conditional request rules for the If-None-Match header.\n * @param r The current request\n * @param headers The response headers to check against\n * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH\n *         if the header does not match, AP_CONDITION_WEAK if a weak match\n *         was present and allowed by RFC2616, AP_CONDITION_STRONG for a\n *         strong match.\n */\nAP_DECLARE(ap_condition_e) ap_condition_if_none_match(request_rec *r,\n        apr_table_t *headers);\n\n/**\n * Tests conditional request rules for the If-Modified-Since header.\n * @param r The current request\n * @param headers The response headers to check against\n * @return AP_CONDITION_NONE if the header is missing, AP_CONDITION_NOMATCH\n *         if the header does not match, AP_CONDITION_WEAK if a weak match\n *         was present and allowed by RFC2616, AP_CONDITION_STRONG for a\n *         strong match.\n */\nAP_DECLARE(ap_condition_e) ap_condition_if_modified_since(request_rec *r,\n        apr_table_t *headers);\n\n/**\n * Tests conditional request rules for the If-Range header.\n * @param r The current request\n * @param headers The response headers to check against\n * @return AP_CONDITION_NONE if either the If-Range or Range header is\n *         missing, AP_CONDITION_NOMATCH if the header does not match,\n *         AP_CONDITION_STRONG for a strong match. Weak matches are not\n *         permitted for the If-Range header.\n */\nAP_DECLARE(ap_condition_e) ap_condition_if_range(request_rec *r,\n        apr_table_t *headers);\n\n/**\n * Implements condition GET rules for HTTP/1.1 specification.  This function\n * inspects the client headers and determines if the response fulfills\n * the requirements specified.\n * @param r The current request\n * @return OK if the response fulfills the condition GET rules, some\n *         other status code otherwise\n */\nAP_DECLARE(int) ap_meets_conditions(request_rec *r);\n\n/* Other ways to send stuff at the client.  All of these keep track\n * of bytes_sent automatically.  This indirection is intended to make\n * it a little more painless to slide things like HTTP-NG packetization\n * underneath the main body of the code later.  In the meantime, it lets\n * us centralize a bit of accounting (bytes_sent).\n *\n * These also return the number of bytes written by the call.\n * They should only be called with a timeout registered, for obvious reaasons.\n * (Ditto the send_header stuff).\n */\n\n/**\n * Send an entire file to the client, using sendfile if supported by the\n * current platform\n * @param fd The file to send.\n * @param r The current request\n * @param offset Offset into the file to start sending.\n * @param length Amount of data to send\n * @param nbytes Amount of data actually sent\n */\nAP_DECLARE(apr_status_t) ap_send_fd(apr_file_t *fd, request_rec *r, apr_off_t offset,\n                                   apr_size_t length, apr_size_t *nbytes);\n\n#if APR_HAS_MMAP\n/**\n * Send an MMAP'ed file to the client\n * @param mm The MMAP'ed file to send\n * @param r The current request\n * @param offset The offset into the MMAP to start sending\n * @param length The amount of data to send\n * @return The number of bytes sent\n */\nAP_DECLARE(apr_size_t) ap_send_mmap(apr_mmap_t *mm,\n                                    request_rec *r,\n                                    apr_size_t offset,\n                                    apr_size_t length);\n#endif\n\n\n/**\n * Register a new request method, and return the offset that will be\n * associated with that method.\n *\n * @param p        The pool to create registered method numbers from.\n * @param methname The name of the new method to register.\n * @return         An int value representing an offset into a bitmask.\n */\nAP_DECLARE(int) ap_method_register(apr_pool_t *p, const char *methname);\n\n/**\n * Initialize the method_registry and allocate memory for it.\n *\n * @param p Pool to allocate memory for the registry from.\n */\nAP_DECLARE(void) ap_method_registry_init(apr_pool_t *p);\n\n/**\n * This is a convenience macro to ease with checking a mask\n * against a method name.\n */\n#define AP_METHOD_CHECK_ALLOWED(mask, methname) \\\n    ((mask) & (AP_METHOD_BIT << ap_method_number_of((methname))))\n\n/**\n * Create a new method list with the specified number of preallocated\n * slots for extension methods.\n *\n * @param   p       Pointer to a pool in which the structure should be\n *                  allocated.\n * @param   nelts   Number of preallocated extension slots\n * @return  Pointer to the newly created structure.\n */\nAP_DECLARE(ap_method_list_t *) ap_make_method_list(apr_pool_t *p, int nelts);\n\n\n/**\n * Copy a method list\n *\n * @param   dest List to copy to\n * @param   src  List to copy from\n */\nAP_DECLARE(void) ap_copy_method_list(ap_method_list_t *dest,\n                                     ap_method_list_t *src);\n\n/**\n * Search for an HTTP method name in an ap_method_list_t structure, and\n * return true if found.\n *\n * @param   method  String containing the name of the method to check.\n * @param   l       Pointer to a method list, such as r->allowed_methods.\n * @return  1 if method is in the list, otherwise 0\n */\nAP_DECLARE(int) ap_method_in_list(ap_method_list_t *l, const char *method);\n\n/**\n * Add an HTTP method name to an ap_method_list_t structure if it isn't\n * already listed.\n *\n * @param   method  String containing the name of the method to check.\n * @param   l       Pointer to a method list, such as r->allowed_methods.\n * @return  None.\n */\nAP_DECLARE(void) ap_method_list_add(ap_method_list_t *l, const char *method);\n\n/**\n * Remove an HTTP method name from an ap_method_list_t structure.\n *\n * @param   l       Pointer to a method list, such as r->allowed_methods.\n * @param   method  String containing the name of the method to remove.\n * @return  None.\n */\nAP_DECLARE(void) ap_method_list_remove(ap_method_list_t *l,\n                                       const char *method);\n\n/**\n * Reset a method list to be completely empty.\n *\n * @param   l       Pointer to a method list, such as r->allowed_methods.\n * @return  None.\n */\nAP_DECLARE(void) ap_clear_method_list(ap_method_list_t *l);\n\n/**\n * Set the content type for this request (r->content_type).\n * @param r The current request\n * @param ct The new content type\n * @warning This function must be called to set r->content_type in order\n * for the AddOutputFilterByType directive to work correctly.\n */\nAP_DECLARE(void) ap_set_content_type(request_rec *r, const char *ct);\n\n/**\n * Set the Accept-Ranges header for this response\n * @param r The current request\n */\nAP_DECLARE(void) ap_set_accept_ranges(request_rec *r);\n\n\n/* Hmmm... could macrofy these for now, and maybe forever, though the\n * definitions of the macros would get a whole lot hairier.\n */\n\n/**\n * Output one character for this request\n * @param c the character to output\n * @param r the current request\n * @return The number of bytes sent\n */\nAP_DECLARE(int) ap_rputc(int c, request_rec *r);\n\n/**\n * Write a buffer for the current request\n * @param buf The buffer to write\n * @param nbyte The number of bytes to send from the buffer\n * @param r The current request\n * @return The number of bytes sent\n */\nAP_DECLARE(int) ap_rwrite(const void *buf, int nbyte, request_rec *r);\n\n/**\n * Output a string for the current request\n * @param str The string to output\n * @param r The current request\n * @return The number of bytes sent\n * @note ap_rputs may be implemented as macro or inline function\n */\nstatic APR_INLINE int ap_rputs(const char *str, request_rec *r)\n{\n    return ap_rwrite(str, (int)strlen(str), r);\n}\n\n/**\n * Write an unspecified number of strings to the request\n * @param r The current request\n * @param ... The strings to write\n * @return The number of bytes sent\n */\nAP_DECLARE_NONSTD(int) ap_rvputs(request_rec *r,...)\n                       AP_FN_ATTR_SENTINEL;\n\n/**\n * Output data to the client in a printf format\n * @param r The current request\n * @param fmt The format string\n * @param vlist The arguments to use to fill out the format string\n * @return The number of bytes sent\n */\nAP_DECLARE(int) ap_vrprintf(request_rec *r, const char *fmt, va_list vlist);\n\n/**\n * Output data to the client in a printf format\n * @param r The current request\n * @param fmt The format string\n * @param ... The arguments to use to fill out the format string\n * @return The number of bytes sent\n */\nAP_DECLARE_NONSTD(int) ap_rprintf(request_rec *r, const char *fmt,...)\n                                __attribute__((format(printf,2,3)));\n\n/**\n * Flush all of the data for the current request to the client\n * @param r The current request\n * @return 0 on success, -1 if an error occurred\n */\nAP_DECLARE(int) ap_rflush(request_rec *r);\n\n/**\n * Index used in custom_responses array for a specific error code\n * (only use outside protocol.c is in getting them configured).\n * @param status HTTP status code\n * @return The index of the response\n */\nAP_DECLARE(int) ap_index_of_response(int status);\n\n/**\n * Return the Status-Line for a given status code (excluding the\n * HTTP-Version field). If an invalid or unknown status code is\n * passed, \"500 Internal Server Error\" will be returned.\n * @param status The HTTP status code\n * @return The Status-Line\n */\nAP_DECLARE(const char *) ap_get_status_line(int status);\n\n/**\n * Return the Status-Line for a given status code (excluding the\n * HTTP-Version field). If an invalid status code is passed,\n * \"500 Internal Server Error\" will be returned, whereas an unknown\n * status will be returned like \"xxx Status xxx\".\n * @param p The pool to allocate from when status is unknown\n * @param status The HTTP status code\n * @return The Status-Line\n */\nAP_DECLARE(const char *) ap_get_status_line_ex(apr_pool_t *p, int status);\n\n/* Reading a block of data from the client connection (e.g., POST arg) */\n\n/**\n * Setup the client to allow Apache to read the request body.\n * @param r The current request\n * @param read_policy How the server should interpret a chunked\n *                    transfer-encoding.  One of: <pre>\n *    REQUEST_NO_BODY          Send 413 error if message has any body\n *    REQUEST_CHUNKED_ERROR    Send 411 error if body without Content-Length\n *    REQUEST_CHUNKED_DECHUNK  If chunked, remove the chunks for me.\n * </pre>\n * @return either OK or an error code\n */\nAP_DECLARE(int) ap_setup_client_block(request_rec *r, int read_policy);\n\n/**\n * Determine if the client has sent any data.  This also sends a\n * 100 Continue response to HTTP/1.1 clients, so modules should not be called\n * until the module is ready to read content.\n * @warning Never call this function more than once.\n * @param r The current request\n * @return 0 if there is no message to read, 1 otherwise\n */\nAP_DECLARE(int) ap_should_client_block(request_rec *r);\n\n/**\n * Call this in a loop.  It will put data into a buffer and return the length\n * of the input block\n * @param r The current request\n * @param buffer The buffer in which to store the data\n * @param bufsiz The size of the buffer\n * @return Number of bytes inserted into the buffer.  When done reading, 0\n *         if EOF, or -1 if there was an error\n */\nAP_DECLARE(long) ap_get_client_block(request_rec *r, char *buffer, apr_size_t bufsiz);\n\n/**\n * Map specific APR codes returned by the filter stack to HTTP error\n * codes, or the default status code provided. Use it as follows:\n *\n * return ap_map_http_request_error(rv, HTTP_BAD_REQUEST);\n *\n * If the filter has already handled the error, AP_FILTER_ERROR will\n * be returned, which is cleanly passed through.\n *\n * These mappings imply that the filter stack is reading from the\n * downstream client, the proxy will map these codes differently.\n * @param rv APR status code\n * @param status Default HTTP code should the APR code not be recognised\n * @return Mapped HTTP status code\n */\nAP_DECLARE(int) ap_map_http_request_error(apr_status_t rv, int status);\n\n/**\n * In HTTP/1.1, any method can have a body.  However, most GET handlers\n * wouldn't know what to do with a request body if they received one.\n * This helper routine tests for and reads any message body in the request,\n * simply discarding whatever it receives.  We need to do this because\n * failing to read the request body would cause it to be interpreted\n * as the next request on a persistent connection.\n * @param r The current request\n * @return error status if request is malformed, OK otherwise\n */\nAP_DECLARE(int) ap_discard_request_body(request_rec *r);\n\n/**\n * Setup the output headers so that the client knows how to authenticate\n * itself the next time, if an authentication request failed.\n * @param r The current request\n */\nAP_DECLARE(void) ap_note_auth_failure(request_rec *r);\n\n/**\n * @deprecated @see ap_note_auth_failure\n */\nAP_DECLARE(void) ap_note_basic_auth_failure(request_rec *r);\n\n/**\n * @deprecated @see ap_note_auth_failure\n */\nAP_DECLARE(void) ap_note_digest_auth_failure(request_rec *r);\n\n/**\n * This hook allows modules to add support for a specific auth type to\n * ap_note_auth_failure\n * @param r the current request\n * @param auth_type the configured auth_type\n * @return OK, DECLINED\n */\nAP_DECLARE_HOOK(int, note_auth_failure, (request_rec *r, const char *auth_type))\n\n/**\n * Get the password from the request headers. This function has multiple side\n * effects due to its prior use in the old authentication framework.\n * ap_get_basic_auth_components() should be preferred.\n *\n * @deprecated @see ap_get_basic_auth_components\n * @param r The current request\n * @param pw The password as set in the headers\n * @return 0 (OK) if it set the 'pw' argument (and assured\n *         a correct value in r->user); otherwise it returns\n *         an error code, either HTTP_INTERNAL_SERVER_ERROR if things are\n *         really confused, HTTP_UNAUTHORIZED if no authentication at all\n *         seemed to be in use, or DECLINED if there was authentication but\n *         it wasn't Basic (in which case, the caller should presumably\n *         decline as well).\n */\nAP_DECLARE(int) ap_get_basic_auth_pw(request_rec *r, const char **pw);\n\n#define AP_GET_BASIC_AUTH_PW_NOTE \"AP_GET_BASIC_AUTH_PW_NOTE\"\n\n/**\n * Get the username and/or password from the request's Basic authentication\n * headers. Unlike ap_get_basic_auth_pw(), calling this function has no side\n * effects on the passed request_rec.\n *\n * @param r The current request\n * @param username If not NULL, set to the username sent by the client\n * @param password If not NULL, set to the password sent by the client\n * @return APR_SUCCESS if the credentials were successfully parsed and returned;\n *         APR_EINVAL if there was no authentication header sent or if the\n *         client was not using the Basic authentication scheme. username and\n *         password are unchanged on failure.\n */\nAP_DECLARE(apr_status_t) ap_get_basic_auth_components(const request_rec *r,\n                                                      const char **username,\n                                                      const char **password);\n\n/**\n * parse_uri: break apart the uri\n * @warning Side Effects:\n *    @li sets r->args to rest after '?' (or NULL if no '?')\n *    @li sets r->uri to request uri (without r->args part)\n *    @li sets r->hostname (if not set already) from request (scheme://host:port)\n * @param r The current request\n * @param uri The uri to break apart\n */\nAP_CORE_DECLARE(void) ap_parse_uri(request_rec *r, const char *uri);\n\n#define AP_GETLINE_FOLD 1 /* Whether to merge continuation lines */\n#define AP_GETLINE_CRLF 2 /* Whether line ends must be in the form CR LF */\n#define AP_GETLINE_NOSPC_EOL 4 /* Whether to consume up to and including the\n                                  end of line on APR_ENOSPC */\n\n/**\n * Get the next line of input for the request\n * @param s The buffer into which to read the line\n * @param n The size of the buffer\n * @param r The request\n * @param flags Bit flag of multiple parsing options\n *              AP_GETLINE_FOLD Whether to merge continuation lines\n *              AP_GETLINE_CRLF Whether line ends must be in the form CR LF\n * @return The length of the line, if successful\n *         n, if the line is too big to fit in the buffer\n *         -1 for miscellaneous errors\n */\nAP_DECLARE(int) ap_getline(char *s, int n, request_rec *r, int flags);\n\n/**\n * Get the next line of input for the request\n *\n * Note: on ASCII boxes, ap_rgetline is a macro which simply calls\n *       ap_rgetline_core to get the line of input.\n *\n *       on EBCDIC boxes, ap_rgetline is a wrapper function which\n *       translates ASCII protocol lines to the local EBCDIC code page\n *       after getting the line of input.\n *\n * @param s Pointer to the pointer to the buffer into which the line\n *          should be read; if *s==NULL, a buffer of the necessary size\n *          to hold the data will be allocated from the request pool\n * @param n The size of the buffer\n * @param read The length of the line.\n * @param r The request\n * @param flags Bit flag of multiple parsing options\n *              AP_GETLINE_FOLD Whether to merge continuation lines\n *              AP_GETLINE_CRLF Whether line ends must be in the form CR LF\n * @param bb Working brigade to use when reading buckets\n * @return APR_SUCCESS, if successful\n *         APR_ENOSPC, if the line is too big to fit in the buffer\n *         Other errors where appropriate\n */\n#if APR_CHARSET_EBCDIC\nAP_DECLARE(apr_status_t) ap_rgetline(char **s, apr_size_t n,\n                                     apr_size_t *read,\n                                     request_rec *r, int flags,\n                                     apr_bucket_brigade *bb);\n#else /* ASCII box */\n#define ap_rgetline(s, n, read, r, fold, bb) \\\n        ap_rgetline_core((s), (n), (read), (r), (fold), (bb))\n#endif\n\n/** @see ap_rgetline */\nAP_DECLARE(apr_status_t) ap_rgetline_core(char **s, apr_size_t n,\n                                          apr_size_t *read,\n                                          request_rec *r, int flags,\n                                          apr_bucket_brigade *bb);\n\n/**\n * Get the method number associated with the given string, assumed to\n * contain an HTTP method.  Returns M_INVALID if not recognized.\n * @param method A string containing a valid HTTP method\n * @return The method number\n */\nAP_DECLARE(int) ap_method_number_of(const char *method);\n\n/**\n * Get the method name associated with the given internal method\n * number.  Returns NULL if not recognized.\n * @param p A pool to use for temporary allocations.\n * @param methnum An integer value corresponding to an internal method number\n * @return The name corresponding to the method number\n */\nAP_DECLARE(const char *) ap_method_name_of(apr_pool_t *p, int methnum);\n\n\n/* Hooks */\n/*\n * pre_read_request --- run right before read_request_line(),\n *                  and not run during any subrequests.\n */\n/**\n * This hook allows modules to affect the request or connection immediately before\n * the request has been read, and before any other phases have been processes.\n * @param r The current request of the soon-to-be-read request\n * @param c The connection\n * @return None/void\n */\nAP_DECLARE_HOOK(void,pre_read_request,(request_rec *r, conn_rec *c))\n\n/*\n * post_read_request --- run right after read_request or internal_redirect,\n *                  and not run during any subrequests.\n */\n/**\n * This hook allows modules to affect the request immediately after the request\n * has been read, and before any other phases have been processes.  This allows\n * modules to make decisions based upon the input header fields\n * @param r The current request\n * @return OK or DECLINED\n */\nAP_DECLARE_HOOK(int,post_read_request,(request_rec *r))\n\n/**\n * This hook allows modules to perform any module-specific logging activities\n * over and above the normal server things.\n * @param r The current request\n * @return OK, DECLINED, or HTTP_...\n */\nAP_DECLARE_HOOK(int,log_transaction,(request_rec *r))\n\n/**\n * This hook allows modules to retrieve the http scheme for a request.  This\n * allows Apache modules to easily extend the schemes that Apache understands\n * @param r The current request\n * @return The http scheme from the request\n */\nAP_DECLARE_HOOK(const char *,http_scheme,(const request_rec *r))\n\n/**\n * Return the default port from the current request\n * @param r The current request\n * @return The current port\n */\nAP_DECLARE_HOOK(apr_port_t,default_port,(const request_rec *r))\n\n\n#define AP_PROTOCOL_HTTP1        \"http/1.1\"\n\n/**\n * Determine the list of protocols available for a connection/request. This may\n * be collected with or without any request sent, in which case the request is \n * NULL. Or it may be triggered by the request received, e.g. through the \n * \"Upgrade\" header.\n *\n * This hook will be run whenever protocols are being negotiated (ALPN as\n * one example). It may also be invoked at other times, e.g. when the server\n * wants to advertise protocols it is capable of switching to.\n * \n * The identifiers for protocols are taken from the TLS extension type ALPN:\n * https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xml\n *\n * If no protocols are added to the proposals, the server not perform any\n * switch. If the protocol selected from the proposals is the protocol\n * already in place, also no protocol switch will be invoked.\n *\n * The client may already have announced the protocols it is willing to\n * accept. These will then be listed as offers. This parameter may also\n * be NULL, indicating that offers from the client are not known and\n * the hooks should propose all protocols that are valid for the\n * current connection/request.\n *\n * All hooks are run, unless one returns an error. Proposals may contain\n * duplicates. The order in which proposals are added is usually ignored.\n * \n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected\n * @param offers A list of protocol identifiers offered by the client or\n *               NULL to indicated that the hooks are free to propose \n * @param proposals The list of protocol identifiers proposed by the hooks\n * @return OK or DECLINED\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE_HOOK(int,protocol_propose,(conn_rec *c, request_rec *r,\n                                      server_rec *s,\n                                      const apr_array_header_t *offers,\n                                      apr_array_header_t *proposals))\n\n/**\n * Perform a protocol switch on the connection. The exact requirements for\n * that depend on the protocol in place and the one switched to. The first \n * protocol module to handle the switch is the last module run.\n * \n * For a connection level switch (r == NULL), the handler must on return\n * leave the conn_rec in a state suitable for processing the switched\n * protocol, e.g. correct filters in place.\n *\n * For a request triggered switch (r != NULL), the protocol switch is done\n * before the response is sent out. When switching from \"http/1.1\" via Upgrade\n * header, the 101 intermediate response will have been sent. The\n * hook needs then to process the connection until it can be closed. Which\n * the server will enforce on hook return.\n * Any error the hook might encounter must already be sent by the hook itself\n * to the client in whatever form the new protocol requires.\n *\n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected\n * @param protocol The protocol identifier we try to switch to\n * @return OK or DECLINED\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE_HOOK(int,protocol_switch,(conn_rec *c, request_rec *r,\n                                     server_rec *s,\n                                     const char *protocol))\n\n/**\n * Return the protocol used on the connection. Modules implementing\n * protocol switching must register here and return the correct protocol\n * identifier for connections they switched.\n *\n * To find out the protocol for the current connection, better call\n * @see ap_get_protocol which internally uses this hook.\n *\n * @param c The current connection\n * @return The identifier of the protocol in place or NULL\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE_HOOK(const char *,protocol_get,(const conn_rec *c))\n\n/**\n * Get the protocols that the connection and optional request may\n * upgrade to - besides the protocol currently active on the connection. These\n * values may be used to announce to a client what choices it has.\n *\n * If report_all == 0, only protocols more preferable than the one currently\n * being used, are reported. Otherwise, all available protocols beside the\n * current one are being reported.\n *\n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected or NULL\n * @param report_all include also protocols less preferred than the current one\n * @param pupgrades on return, possible protocols to upgrade to in descending order \n *                 of preference. Maybe NULL if none are available.    \n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE(apr_status_t) ap_get_protocol_upgrades(conn_rec *c, request_rec *r, \n                                                  server_rec *s, int report_all, \n                                                  const apr_array_header_t **pupgrades);\n                                                  \n/**\n * Select a protocol for the given connection and optional request. Will return\n * the protocol identifier selected which may be the protocol already in place\n * on the connection. The selected protocol will be NULL if non of the given\n * choices could be agreed upon (e.g. no proposal as made).\n *\n * A special case is where the choices itself is NULL (instead of empty). In\n * this case there are no restrictions imposed on protocol selection.\n *\n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected\n * @param choices A list of protocol identifiers, normally the clients whishes\n * @return The selected protocol or NULL if no protocol could be agreed upon\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE(const char *) ap_select_protocol(conn_rec *c, request_rec *r, \n                                            server_rec *s,\n                                            const apr_array_header_t *choices);\n\n/**\n * Perform the actual protocol switch. The protocol given must have been\n * selected before on the very same connection and request pair.\n *\n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected\n * @param protocol the protocol to switch to\n * @return APR_SUCCESS, if caller may continue processing as usual\n *         APR_EOF,     if caller needs to stop processing the connection\n *         APR_EINVAL,  if the protocol is already in place\n *         APR_NOTIMPL, if no module performed the switch\n *         Other errors where appropriate\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE(apr_status_t) ap_switch_protocol(conn_rec *c, request_rec *r, \n                                            server_rec *s,\n                                            const char *protocol);\n\n/**\n * Call the protocol_get hook to determine the protocol currently in use\n * for the given connection.\n *\n * Unless another protocol has been switch to, will default to\n * @see AP_PROTOCOL_HTTP1 and modules implementing a  new protocol must\n * report a switched connection via the protocol_get hook.\n *\n * @param c The connection to determine the protocol for\n * @return the protocol in use, never NULL\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE(const char *) ap_get_protocol(conn_rec *c);\n\n/**\n * Check if the given protocol is an allowed choice on the given\n * combination of connection, request and server. \n *\n * When server is NULL, it is taken from request_rec, unless\n * request_rec is NULL. Then it is taken from the connection base\n * server.\n *\n * @param c The current connection\n * @param r The current request or NULL\n * @param s The server/virtual host selected or NULL\n * @param protocol the protocol to switch to\n * @return != 0 iff protocol is allowed\n * @bug This API or implementation and order of operations should be considered\n * experimental and will continue to evolve in future 2.4 releases, with\n * a corresponding minor module magic number (MMN) bump to indicate the\n * API revision level.\n */\nAP_DECLARE(int) ap_is_allowed_protocol(conn_rec *c, request_rec *r,\n                                       server_rec *s, const char *protocol);\n\n/** @see ap_bucket_type_error */\ntypedef struct ap_bucket_error ap_bucket_error;\n\n/**\n * @struct ap_bucket_error\n * @brief  A bucket referring to an HTTP error\n *\n * This bucket can be passed down the filter stack to indicate that an\n * HTTP error occurred while running a filter.  In order for this bucket\n * to be used successfully, it MUST be sent as the first bucket in the\n * first brigade to be sent from a given filter.\n */\nstruct ap_bucket_error {\n    /** Number of buckets using this memory */\n    apr_bucket_refcount refcount;\n    /** The error code */\n    int status;\n    /** The error string */\n    const char    *data;\n};\n\n/** @see ap_bucket_type_error */\nAP_DECLARE_DATA extern const apr_bucket_type_t ap_bucket_type_error;\n\n/**\n * Determine if a bucket is an error bucket\n * @param e The bucket to inspect\n * @return true or false\n */\n#define AP_BUCKET_IS_ERROR(e)         (e->type == &ap_bucket_type_error)\n\n/**\n * Make the bucket passed in an error bucket\n * @param b The bucket to make into an error bucket\n * @param error The HTTP error code to put in the bucket.\n * @param buf An optional error string to put in the bucket.\n * @param p A pool to allocate out of.\n * @return The new bucket, or NULL if allocation failed\n */\nAP_DECLARE(apr_bucket *) ap_bucket_error_make(apr_bucket *b, int error,\n                const char *buf, apr_pool_t *p);\n\n/**\n * Create a bucket referring to an HTTP error.\n * @param error The HTTP error code to put in the bucket.\n * @param buf An optional error string to put in the bucket.\n * @param p A pool to allocate the error string out of.\n * @param list The bucket allocator from which to allocate the bucket\n * @return The new bucket, or NULL if allocation failed\n */\nAP_DECLARE(apr_bucket *) ap_bucket_error_create(int error, const char *buf,\n                                                apr_pool_t *p,\n                                                apr_bucket_alloc_t *list);\n\nAP_DECLARE_NONSTD(apr_status_t) ap_byterange_filter(ap_filter_t *f, apr_bucket_brigade *b);\nAP_DECLARE_NONSTD(apr_status_t) ap_http_header_filter(ap_filter_t *f, apr_bucket_brigade *b);\nAP_DECLARE_NONSTD(apr_status_t) ap_content_length_filter(ap_filter_t *,\n                                                              apr_bucket_brigade *);\nAP_DECLARE_NONSTD(apr_status_t) ap_old_write_filter(ap_filter_t *f, apr_bucket_brigade *b);\n\n/**\n * Sett up the protocol fields for subsidiary requests\n * @param rnew New Sub Request\n * @param r current request\n */\nAP_DECLARE(void) ap_set_sub_req_protocol(request_rec *rnew, const request_rec *r);\n\n/**\n * A wrapup function to keep the internal accounting straight.\n * Indicates that there is no more content coming.\n * @param sub_r Subrequest that is now compete\n */\nAP_DECLARE(void) ap_finalize_sub_req_protocol(request_rec *sub_r);\n\n/**\n * Send an interim (HTTP 1xx) response immediately.\n * @param r The request\n * @param send_headers Whether to send&clear headers in r->headers_out\n */\nAP_DECLARE(void) ap_send_interim_response(request_rec *r, int send_headers);\n\n\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif  /* !APACHE_HTTP_PROTOCOL_H */\n/** @} */\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  http_vhost.h\n * @brief Virtual Host package\n *\n * @defgroup APACHE_CORE_VHOST Virtual Host Package\n * @ingroup  APACHE_CORE\n * @{\n */\n\n#ifndef APACHE_HTTP_VHOST_H\n#define APACHE_HTTP_VHOST_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * called before any config is read\n * @param p Pool to allocate out of\n */\nAP_DECLARE(void) ap_init_vhost_config(apr_pool_t *p);\n\n/**\n * called after the config has been read to compile the tables needed to do\n * the run-time vhost lookups\n * @param p The pool to allocate out of\n * @param main_server The start of the virtual host list\n */\nAP_DECLARE(void) ap_fini_vhost_config(apr_pool_t *p, server_rec *main_server);\n\n/**\n * handle addresses in \"<VirtualHost>\" statement\n * @param p The pool to allocate out of\n * @param hostname The hostname in the VirtualHost statement\n * @param s The list of Virtual Hosts.\n */\nconst char *ap_parse_vhost_addrs(apr_pool_t *p, const char *hostname, server_rec *s);\n\n/**\n * handle NameVirtualHost directive\n * @param cmd Command Parameters structure\n * @param dummy NOT USED\n * @param arg a host of the form \"<address>[:port]\"\n */\nAP_DECLARE_NONSTD(const char *)ap_set_name_virtual_host(cmd_parms *cmd,\n                                                        void *dummy,\n                                                        const char *arg);\n\n/**\n * Callback function for every Name Based Virtual Host.\n * @param baton Opaque user object\n * @param conn The current Connection\n * @param s The current Server\n * @see ap_vhost_iterate_given_conn\n * @return 0 on success, any non-zero return will stop the iteration.\n */\ntypedef int(*ap_vhost_iterate_conn_cb)(void* baton, conn_rec* conn, server_rec* s);\n\n/**\n * For every virtual host on this connection, call func_cb.\n * @param conn The current connection\n * @param func_cb Function called for every Name Based Virtual Host for this\n *                connection.\n * @param baton Opaque object passed to func_cb.\n * @return The return value from func_cb.\n * @note If func_cb returns non-zero, the function will return at this point,\n *       and not continue iterating the virtual hosts.\n */\nAP_DECLARE(int) ap_vhost_iterate_given_conn(conn_rec *conn,\n                                            ap_vhost_iterate_conn_cb func_cb,\n                                            void* baton);\n\n/**\n * given an ip address only, give our best guess as to what vhost it is\n * @param conn The current connection\n */\nAP_DECLARE(void) ap_update_vhost_given_ip(conn_rec *conn);\n\n/**\n * ap_update_vhost_given_ip is never enough, and this is always called after\n * the headers have been read.  It may change r->server.\n * @param r The current request\n */\nAP_DECLARE(void) ap_update_vhost_from_headers(request_rec *r);\n\n/**\n * Updates r->server with the best name-based virtual host match, within\n * the chain of matching virtual hosts selected by ap_update_vhost_given_ip.\n * @param r The current request\n * @param require_match 1 to return an HTTP error if the requested hostname is\n * not explicitly matched to a VirtualHost. \n * @return return HTTP_OK unless require_match was specified and the requested\n * hostname did not match any ServerName, ServerAlias, or VirtualHost \n * address-spec.\n */\nAP_DECLARE(int) ap_update_vhost_from_headers_ex(request_rec *r, int require_match);\n\n\n/**\n * Match the host in the header with the hostname of the server for this\n * request.\n * @param r The current request\n * @param host The hostname in the headers\n * @param port The port from the headers\n * @return return 1 if the host:port matches any of the aliases of r->server,\n * return 0 otherwise\n */\nAP_DECLARE(int) ap_matches_request_vhost(request_rec *r, const char *host,\n    apr_port_t port);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif  /* !APACHE_HTTP_VHOST_H */\n/** @} */\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n \n#include <assert.h>\n\n#include <apr_strings.h>\n#include <ap_mmn.h>\n\n#include <httpd.h>\n#include <http_core.h>\n#include <http_connection.h>\n#include <http_protocol.h>\n#include <http_request.h>\n#include <http_log.h>\n#include <http_vhost.h>\n#include <util_filter.h>\n#include <ap_mpm.h>\n#include <mod_core.h>\n#include <scoreboard.h>\n\n#include \"h2_private.h\"\n#include \"h2_config.h\"\n#include \"h2_push.h\"\n#include \"h2_request.h\"\n#include \"h2_util.h\"\n\n\ntypedef struct {\n    apr_table_t *headers;\n    apr_pool_t *pool;\n    apr_status_t status;\n} h1_ctx;\n\nstatic int set_h1_header(void *ctx, const char *key, const char *value)\n{\n    h1_ctx *x = ctx;\n    int was_added;\n    h2_req_add_header(x->headers, x->pool, key, strlen(key), value, strlen(value), 0, &was_added);\n    return 1;\n}\n\napr_status_t h2_request_rcreate(h2_request **preq, apr_pool_t *pool, \n                                request_rec *r)\n{\n    h2_request *req;\n    const char *scheme, *authority, *path;\n    h1_ctx x;\n    \n    *preq = NULL;\n    scheme = apr_pstrdup(pool, r->parsed_uri.scheme? r->parsed_uri.scheme\n              : ap_http_scheme(r));\n    authority = apr_pstrdup(pool, r->hostname);\n    path = apr_uri_unparse(pool, &r->parsed_uri, APR_URI_UNP_OMITSITEPART);\n    \n    if (!r->method || !scheme || !r->hostname || !path) {\n        return APR_EINVAL;\n    }\n\n    if (!ap_strchr_c(authority, ':') && r->server && r->server->port) {\n        apr_port_t defport = apr_uri_port_of_scheme(scheme);\n        if (defport != r->server->port) {\n            /* port info missing and port is not default for scheme: append */\n            authority = apr_psprintf(pool, \"%s:%d\", authority,\n                                     (int)r->server->port);\n        }\n    }\n    \n    req = apr_pcalloc(pool, sizeof(*req));\n    req->method      = apr_pstrdup(pool, r->method);\n    req->scheme      = scheme;\n    req->authority   = authority;\n    req->path        = path;\n    req->headers     = apr_table_make(pool, 10);\n    req->http_status = H2_HTTP_STATUS_UNSET;\n    if (r->server) {\n        req->serialize = h2_config_rgeti(r, H2_CONF_SER_HEADERS);\n    }\n\n    x.pool = pool;\n    x.headers = req->headers;\n    x.status = APR_SUCCESS;\n    apr_table_do(set_h1_header, &x, r->headers_in, NULL);\n    \n    *preq = req;\n    return x.status;\n}\n\napr_status_t h2_request_add_header(h2_request *req, apr_pool_t *pool, \n                                   const char *name, size_t nlen,\n                                   const char *value, size_t vlen,\n                                   size_t max_field_len, int *pwas_added)\n{\n    apr_status_t status = APR_SUCCESS;\n    \n    *pwas_added = 0;\n    if (nlen <= 0) {\n        return status;\n    }\n    \n    if (name[0] == ':') {\n        /* pseudo header, see ch. 8.1.2.3, always should come first */\n        if (!apr_is_empty_table(req->headers)) {\n            ap_log_perror(APLOG_MARK, APLOG_ERR, 0, pool,\n                          APLOGNO(02917) \n                          \"h2_request: pseudo header after request start\");\n            return APR_EGENERAL;\n        }\n        \n        if (H2_HEADER_METHOD_LEN == nlen\n            && !strncmp(H2_HEADER_METHOD, name, nlen)) {\n            req->method = apr_pstrndup(pool, value, vlen);\n        }\n        else if (H2_HEADER_SCHEME_LEN == nlen\n                 && !strncmp(H2_HEADER_SCHEME, name, nlen)) {\n            req->scheme = apr_pstrndup(pool, value, vlen);\n        }\n        else if (H2_HEADER_PATH_LEN == nlen\n                 && !strncmp(H2_HEADER_PATH, name, nlen)) {\n            req->path = apr_pstrndup(pool, value, vlen);\n        }\n        else if (H2_HEADER_AUTH_LEN == nlen\n                 && !strncmp(H2_HEADER_AUTH, name, nlen)) {\n            req->authority = apr_pstrndup(pool, value, vlen);\n        }\n        else {\n            char buffer[32];\n            memset(buffer, 0, 32);\n            strncpy(buffer, name, (nlen > 31)? 31 : nlen);\n            ap_log_perror(APLOG_MARK, APLOG_WARNING, 0, pool,\n                          APLOGNO(02954) \n                          \"h2_request: ignoring unknown pseudo header %s\",\n                          buffer);\n        }\n    }\n    else {\n        /* non-pseudo header, add to table */\n        status = h2_req_add_header(req->headers, pool, name, nlen, value, vlen, \n                                   max_field_len, pwas_added);\n    }\n    \n    return status;\n}\n\napr_status_t h2_request_end_headers(h2_request *req, apr_pool_t *pool, int eos, size_t raw_bytes)\n{\n    const char *s;\n    \n    /* rfc7540, ch. 8.1.2.3:\n     * - if we have :authority, it overrides any Host header \n     * - :authority MUST be omitted when converting h1->h2, so we\n     *   might get a stream without, but then Host needs to be there */\n    if (!req->authority) {\n        const char *host = apr_table_get(req->headers, \"Host\");\n        if (!host) {\n            return APR_BADARG;\n        }\n        req->authority = host;\n    }\n    else {\n        apr_table_setn(req->headers, \"Host\", req->authority);\n    }\n\n    s = apr_table_get(req->headers, \"Content-Length\");\n    if (!s) {\n        /* HTTP/2 does not need a Content-Length for framing, but our\n         * internal request processing is used to HTTP/1.1, so we\n         * need to either add a Content-Length or a Transfer-Encoding\n         * if any content can be expected. */\n        if (!eos) {\n            /* We have not seen a content-length and have no eos,\n             * simulate a chunked encoding for our HTTP/1.1 infrastructure,\n             * in case we have \"H2SerializeHeaders on\" here\n             */\n            req->chunked = 1;\n            apr_table_mergen(req->headers, \"Transfer-Encoding\", \"chunked\");\n        }\n        else if (apr_table_get(req->headers, \"Content-Type\")) {\n            /* If we have a content-type, but already seen eos, no more\n             * data will come. Signal a zero content length explicitly.\n             */\n            apr_table_setn(req->headers, \"Content-Length\", \"0\");\n        }\n    }\n    req->raw_bytes += raw_bytes;\n    \n    return APR_SUCCESS;\n}\n\nh2_request *h2_request_clone(apr_pool_t *p, const h2_request *src)\n{\n    h2_request *dst = apr_pmemdup(p, src, sizeof(*dst));\n    dst->method       = apr_pstrdup(p, src->method);\n    dst->scheme       = apr_pstrdup(p, src->scheme);\n    dst->authority    = apr_pstrdup(p, src->authority);\n    dst->path         = apr_pstrdup(p, src->path);\n    dst->headers      = apr_table_clone(p, src->headers);\n    return dst;\n}\n\nrequest_rec *h2_request_create_rec(const h2_request *req, conn_rec *c)\n{\n    int access_status = HTTP_OK;    \n\n    request_rec *r = ap_create_request(c);\n\n    ap_run_pre_read_request(r, c);\n\n    /* Time to populate r with the data we have. */\n    r->request_time = req->request_time;\n    r->the_request = apr_psprintf(r->pool, \"%s %s HTTP/2.0\",\n                                  req->method, req->path ? req->path : \"\");\n    r->headers_in = apr_table_clone(r->pool, req->headers);\n\n    /* Start with r->hostname = NULL, ap_check_request_header() will get it\n     * form Host: header, otherwise we get complains about port numbers.\n     */\n    r->hostname = NULL;\n\n    /* Validate HTTP/1 request and select vhost. */\n    if (!ap_parse_request_line(r) || !ap_check_request_header(r)) {\n        /* we may have switched to another server still */\n        r->per_dir_config = r->server->lookup_defaults;\n        if (req->http_status != H2_HTTP_STATUS_UNSET) {\n            access_status = req->http_status;\n            /* Be safe and close the connection */\n            c->keepalive = AP_CONN_CLOSE;\n        }\n        else {\n            access_status = r->status;\n        }\n        r->status = HTTP_OK;\n        goto die;\n    }\n\n    /* we may have switched to another server */\n    r->per_dir_config = r->server->lookup_defaults;\n\n    if (req->http_status != H2_HTTP_STATUS_UNSET) {\n        access_status = req->http_status;\n        r->status = HTTP_OK;\n        /* Be safe and close the connection */\n        c->keepalive = AP_CONN_CLOSE;\n        goto die;\n    }\n\n    /*\n     * Add the HTTP_IN filter here to ensure that ap_discard_request_body\n     * called by ap_die and by ap_send_error_response works correctly on\n     * status codes that do not cause the connection to be dropped and\n     * in situations where the connection should be kept alive.\n     */\n    ap_add_input_filter_handle(ap_http_input_filter_handle,\n                               NULL, r, r->connection);\n    \n    if ((access_status = ap_run_post_read_request(r))) {\n        /* Request check post hooks failed. An example of this would be a\n         * request for a vhost where h2 is disabled --> 421.\n         */\n        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, c, APLOGNO(03367)\n                      \"h2_request: access_status=%d, request_create failed\",\n                      access_status);\n        goto die;\n    }\n\n    AP_READ_REQUEST_SUCCESS((uintptr_t)r, (char *)r->method, \n                            (char *)r->uri, (char *)r->server->defn_name, \n                            r->status);\n    return r;\n\ndie:\n    ap_die(access_status, r);\n\n    /* ap_die() sent the response through the output filters, we must now\n     * end the request with an EOR bucket for stream/pipeline accounting.\n     */\n    {\n        apr_bucket_brigade *eor_bb;\n#if AP_MODULE_MAGIC_AT_LEAST(20180905, 1)\n        eor_bb = ap_acquire_brigade(c);\n        APR_BRIGADE_INSERT_TAIL(eor_bb,\n                                ap_bucket_eor_create(c->bucket_alloc, r));\n        ap_pass_brigade(c->output_filters, eor_bb);\n        ap_release_brigade(c, eor_bb);\n#else\n        eor_bb = apr_brigade_create(c->pool, c->bucket_alloc);\n        APR_BRIGADE_INSERT_TAIL(eor_bb,\n                                ap_bucket_eor_create(c->bucket_alloc, r));\n        ap_pass_brigade(c->output_filters, eor_bb);\n        apr_brigade_destroy(eor_bb);\n#endif\n    }\n\n    r = NULL;\n    AP_READ_REQUEST_FAILURE((uintptr_t)r);\n    return NULL;\n}\n\n\n\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include \"apr.h\"\n#include \"apr_strings.h\"\n#include \"apr_lib.h\"\n#include \"apr_fnmatch.h\"\n#include \"apr_hash.h\"\n#include \"apr_thread_proc.h\"    /* for RLIMIT stuff */\n#include \"apr_random.h\"\n\n#include \"apr_version.h\"\n#if APR_MAJOR_VERSION < 2\n#include \"apu_version.h\"\n#endif\n\n#define APR_WANT_IOVEC\n#define APR_WANT_STRFUNC\n#define APR_WANT_MEMFUNC\n#include \"apr_want.h\"\n\n#include \"ap_config.h\"\n#include \"httpd.h\"\n#include \"http_config.h\"\n#include \"http_core.h\"\n#include \"http_protocol.h\" /* For index_of_response().  Grump. */\n#include \"http_request.h\"\n#include \"http_ssl.h\"\n#include \"http_vhost.h\"\n#include \"http_main.h\"     /* For the default_handler below... */\n#include \"http_log.h\"\n#include \"util_md5.h\"\n#include \"http_connection.h\"\n#include \"apr_buckets.h\"\n#include \"util_filter.h\"\n#include \"util_ebcdic.h\"\n#include \"util_mutex.h\"\n#include \"util_time.h\"\n#include \"mpm_common.h\"\n#include \"scoreboard.h\"\n#include \"mod_core.h\"\n#include \"mod_proxy.h\"\n#include \"ap_listen.h\"\n#include \"ap_regex.h\"\n\n#include \"mod_so.h\" /* for ap_find_loaded_module_symbol */\n\n#if defined(RLIMIT_CPU) || defined (RLIMIT_DATA) || defined (RLIMIT_VMEM) || defined(RLIMIT_AS) || defined (RLIMIT_NPROC)\n#include \"unixd.h\"\n#endif\n#if APR_HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n/* LimitRequestBody handling */\n#define AP_LIMIT_REQ_BODY_UNSET         ((apr_off_t) -1)\n#define AP_DEFAULT_LIMIT_REQ_BODY       ((apr_off_t) 0)\n\n/* LimitXMLRequestBody handling */\n#define AP_LIMIT_UNSET                  ((long) -1)\n#define AP_DEFAULT_LIMIT_XML_BODY       ((apr_size_t)1000000)\n\n#define AP_MIN_SENDFILE_BYTES           (256)\n\n/* maximum include nesting level */\n#ifndef AP_MAX_INCLUDE_DEPTH\n#define AP_MAX_INCLUDE_DEPTH            (128)\n#endif\n\n/* valid in core-conf, but not in runtime r->used_path_info */\n#define AP_ACCEPT_PATHINFO_UNSET 3\n\n#define AP_CONTENT_MD5_OFF   0\n#define AP_CONTENT_MD5_ON    1\n#define AP_CONTENT_MD5_UNSET 2\n\n#define AP_FLUSH_MAX_THRESHOLD 65535\n#define AP_FLUSH_MAX_PIPELINED 4\n\nAPR_HOOK_STRUCT(\n    APR_HOOK_LINK(get_mgmt_items)\n    APR_HOOK_LINK(insert_network_bucket)\n)\n\nAP_IMPLEMENT_HOOK_RUN_ALL(int, get_mgmt_items,\n                          (apr_pool_t *p, const char *val, apr_hash_t *ht),\n                          (p, val, ht), OK, DECLINED)\n\nAP_IMPLEMENT_HOOK_RUN_FIRST(apr_status_t, insert_network_bucket,\n                            (conn_rec *c, apr_bucket_brigade *bb,\n                             apr_socket_t *socket),\n                            (c, bb, socket), AP_DECLINED)\n\n/* Server core module... This module provides support for really basic\n * server operations, including options and commands which control the\n * operation of other modules.  Consider this the bureaucracy module.\n *\n * The core module also defines handlers, etc., to handle just enough\n * to allow a server with the core module ONLY to actually serve documents.\n *\n * This file could almost be mod_core.c, except for the stuff which affects\n * the http_conf_globals.\n */\n\n/* we know core's module_index is 0 */\n#undef APLOG_MODULE_INDEX\n#define APLOG_MODULE_INDEX AP_CORE_MODULE_INDEX\n\n/* Handles for core filters */\nAP_DECLARE_DATA ap_filter_rec_t *ap_subreq_core_filter_handle;\nAP_DECLARE_DATA ap_filter_rec_t *ap_core_output_filter_handle;\nAP_DECLARE_DATA ap_filter_rec_t *ap_content_length_filter_handle;\nAP_DECLARE_DATA ap_filter_rec_t *ap_core_input_filter_handle;\n\n/* Provide ap_document_root_check storage and default value = true */\nAP_DECLARE_DATA int ap_document_root_check = 1;\n\n/* magic pointer for ErrorDocument xxx \"default\" */\nstatic char errordocument_default;\n\n/* Global state allocated out of pconf: variables here MUST be\n * cleared/reset in reset_config(), a pconf cleanup, to avoid the\n * variable getting reused after the pool is cleared. */\nstatic apr_array_header_t *saved_server_config_defines = NULL;\nstatic apr_table_t *server_config_defined_vars = NULL;\nAP_DECLARE_DATA const char *ap_runtime_dir = NULL;\n\nAP_DECLARE_DATA int ap_main_state = AP_SQ_MS_INITIAL_STARTUP;\nAP_DECLARE_DATA int ap_run_mode = AP_SQ_RM_UNKNOWN;\nAP_DECLARE_DATA int ap_config_generation = 0;\n\nstatic void *create_core_dir_config(apr_pool_t *a, char *dir)\n{\n    core_dir_config *conf;\n\n    conf = (core_dir_config *)apr_pcalloc(a, sizeof(core_dir_config));\n\n    /* conf->r and conf->d[_*] are initialized by dirsection() or left NULL */\n\n    conf->opts = dir ? OPT_UNSET : OPT_UNSET|OPT_SYM_LINKS;\n    conf->opts_add = conf->opts_remove = OPT_NONE;\n    conf->override = OR_UNSET|OR_NONE;\n    conf->override_opts = OPT_UNSET | OPT_ALL | OPT_SYM_OWNER | OPT_MULTI;\n\n    conf->content_md5 = AP_CONTENT_MD5_UNSET;\n    conf->accept_path_info = AP_ACCEPT_PATHINFO_UNSET;\n\n    conf->use_canonical_name = USE_CANONICAL_NAME_UNSET;\n    conf->use_canonical_phys_port = USE_CANONICAL_PHYS_PORT_UNSET;\n\n    conf->hostname_lookups = HOSTNAME_LOOKUP_UNSET;\n\n    /*\n     * left as NULL (we use apr_pcalloc):\n     * conf->limit_cpu = NULL;\n     * conf->limit_mem = NULL;\n     * conf->limit_nproc = NULL;\n     * conf->sec_file = NULL;\n     * conf->sec_if   = NULL;\n     */\n\n    conf->limit_req_body = AP_LIMIT_REQ_BODY_UNSET;\n    conf->limit_xml_body = AP_LIMIT_UNSET;\n\n    conf->server_signature = srv_sig_unset;\n\n    conf->add_default_charset = ADD_DEFAULT_CHARSET_UNSET;\n    conf->add_default_charset_name = DEFAULT_ADD_DEFAULT_CHARSET_NAME;\n\n    /* Overriding all negotiation\n     * Set NULL by apr_pcalloc:\n     * conf->mime_type = NULL;\n     * conf->handler = NULL;\n     * conf->output_filters = NULL;\n     * conf->input_filters = NULL;\n     */\n\n    /*\n     * Flag for use of inodes in ETags.\n     */\n    conf->etag_bits = ETAG_UNSET;\n    conf->etag_add = ETAG_UNSET;\n    conf->etag_remove = ETAG_UNSET;\n\n    conf->enable_mmap = ENABLE_MMAP_UNSET;\n    conf->enable_sendfile = ENABLE_SENDFILE_UNSET;\n    conf->allow_encoded_slashes = 0;\n    conf->decode_encoded_slashes = 0;\n\n    conf->max_ranges = AP_MAXRANGES_UNSET;\n    conf->max_overlaps = AP_MAXRANGES_UNSET;\n    conf->max_reversals = AP_MAXRANGES_UNSET;\n\n    conf->cgi_pass_auth = AP_CGI_PASS_AUTH_UNSET;\n    conf->qualify_redirect_url = AP_CORE_CONFIG_UNSET; \n\n    return (void *)conf;\n}\n\nstatic void *merge_core_dir_configs(apr_pool_t *a, void *basev, void *newv)\n{\n    core_dir_config *base = (core_dir_config *)basev;\n    core_dir_config *new = (core_dir_config *)newv;\n    core_dir_config *conf;\n\n    /* Create this conf by duplicating the base, replacing elements\n     * (or creating copies for merging) where new-> values exist.\n     */\n    conf = (core_dir_config *)apr_pmemdup(a, base, sizeof(core_dir_config));\n\n    conf->d = new->d;\n    conf->d_is_fnmatch = new->d_is_fnmatch;\n    conf->d_components = new->d_components;\n    conf->r = new->r;\n    conf->refs = new->refs;\n    conf->condition = new->condition;\n\n    if (new->opts & OPT_UNSET) {\n        /* there was no explicit setting of new->opts, so we merge\n         * preserve the invariant (opts_add & opts_remove) == 0\n         */\n        conf->opts_add = (conf->opts_add & ~new->opts_remove) | new->opts_add;\n        conf->opts_remove = (conf->opts_remove & ~new->opts_add)\n                            | new->opts_remove;\n        conf->opts = (conf->opts & ~conf->opts_remove) | conf->opts_add;\n\n        /* If Includes was enabled with exec in the base config, but\n         * was enabled without exec in the new config, then disable\n         * exec in the merged set. */\n        if (((base->opts & (OPT_INCLUDES|OPT_INC_WITH_EXEC))\n             == (OPT_INCLUDES|OPT_INC_WITH_EXEC))\n            && ((new->opts & (OPT_INCLUDES|OPT_INC_WITH_EXEC))\n                == OPT_INCLUDES)) {\n            conf->opts &= ~OPT_INC_WITH_EXEC;\n        }\n    }\n    else {\n        /* otherwise we just copy, because an explicit opts setting\n         * overrides all earlier +/- modifiers\n         */\n        conf->opts = new->opts;\n        conf->opts_add = new->opts_add;\n        conf->opts_remove = new->opts_remove;\n    }\n\n    if (!(new->override & OR_UNSET)) {\n        conf->override = new->override;\n    }\n\n    if (!(new->override_opts & OPT_UNSET)) {\n        conf->override_opts = new->override_opts;\n    }\n\n    if (new->override_list != NULL) {\n        conf->override_list = new->override_list;\n    }\n\n    if (conf->response_code_exprs == NULL) {\n        conf->response_code_exprs = new->response_code_exprs;\n    }\n    else if (new->response_code_exprs != NULL) {\n        conf->response_code_exprs = apr_hash_overlay(a,\n                new->response_code_exprs, conf->response_code_exprs);\n    }\n    /* Otherwise we simply use the base->response_code_exprs array\n     */\n\n    if (new->hostname_lookups != HOSTNAME_LOOKUP_UNSET) {\n        conf->hostname_lookups = new->hostname_lookups;\n    }\n\n    if (new->content_md5 != AP_CONTENT_MD5_UNSET) {\n        conf->content_md5 = new->content_md5;\n    }\n\n    if (new->accept_path_info != AP_ACCEPT_PATHINFO_UNSET) {\n        conf->accept_path_info = new->accept_path_info;\n    }\n\n    if (new->use_canonical_name != USE_CANONICAL_NAME_UNSET) {\n        conf->use_canonical_name = new->use_canonical_name;\n    }\n\n    if (new->use_canonical_phys_port != USE_CANONICAL_PHYS_PORT_UNSET) {\n        conf->use_canonical_phys_port = new->use_canonical_phys_port;\n    }\n\n#ifdef RLIMIT_CPU\n    if (new->limit_cpu) {\n        conf->limit_cpu = new->limit_cpu;\n    }\n#endif\n\n#if defined(RLIMIT_DATA) || defined(RLIMIT_VMEM) || defined(RLIMIT_AS)\n    if (new->limit_mem) {\n        conf->limit_mem = new->limit_mem;\n    }\n#endif\n\n#ifdef RLIMIT_NPROC\n    if (new->limit_nproc) {\n        conf->limit_nproc = new->limit_nproc;\n    }\n#endif\n\n    if (new->limit_req_body != AP_LIMIT_REQ_BODY_UNSET) {\n        conf->limit_req_body = new->limit_req_body;\n    }\n\n    if (new->limit_xml_body != AP_LIMIT_UNSET)\n        conf->limit_xml_body = new->limit_xml_body;\n\n    if (!conf->sec_file) {\n        conf->sec_file = new->sec_file;\n    }\n    else if (new->sec_file) {\n        /* If we merge, the merge-result must have its own array\n         */\n        conf->sec_file = apr_array_append(a, base->sec_file, new->sec_file);\n    }\n    /* Otherwise we simply use the base->sec_file array\n     */\n\n    if (!conf->sec_if) {\n        conf->sec_if = new->sec_if;\n    }\n    else if (new->sec_if) {\n        /* If we merge, the merge-result must have its own array\n         */\n        conf->sec_if = apr_array_append(a, base->sec_if, new->sec_if);\n    }\n    /* Otherwise we simply use the base->sec_if array\n     */\n\n    if (new->server_signature != srv_sig_unset) {\n        conf->server_signature = new->server_signature;\n    }\n\n    if (new->add_default_charset != ADD_DEFAULT_CHARSET_UNSET) {\n        conf->add_default_charset = new->add_default_charset;\n        conf->add_default_charset_name = new->add_default_charset_name;\n    }\n\n    /* Overriding all negotiation\n     */\n    if (new->mime_type) {\n        conf->mime_type = new->mime_type;\n    }\n\n    if (new->handler) {\n        conf->handler = new->handler;\n    }\n    if (new->expr_handler) {\n        conf->expr_handler = new->expr_handler;\n    }\n\n    if (new->output_filters) {\n        conf->output_filters = new->output_filters;\n    }\n\n    if (new->input_filters) {\n        conf->input_filters = new->input_filters;\n    }\n\n    /*\n     * Now merge the setting of the FileETag directive.\n     */\n    if (new->etag_bits == ETAG_UNSET) {\n        conf->etag_add =\n            (conf->etag_add & (~ new->etag_remove)) | new->etag_add;\n        conf->etag_remove =\n            (conf->etag_remove & (~ new->etag_add)) | new->etag_remove;\n        conf->etag_bits =\n            (conf->etag_bits & (~ conf->etag_remove)) | conf->etag_add;\n    }\n    else {\n        conf->etag_bits = new->etag_bits;\n        conf->etag_add = new->etag_add;\n        conf->etag_remove = new->etag_remove;\n    }\n\n    if (conf->etag_bits != ETAG_NONE) {\n        conf->etag_bits &= (~ ETAG_NONE);\n    }\n\n    if (new->enable_mmap != ENABLE_MMAP_UNSET) {\n        conf->enable_mmap = new->enable_mmap;\n    }\n\n    if (new->enable_sendfile != ENABLE_SENDFILE_UNSET) {\n        conf->enable_sendfile = new->enable_sendfile;\n    }\n \n    if (new->read_buf_size) {\n        conf->read_buf_size = new->read_buf_size;\n    }\n    else {\n        conf->read_buf_size = base->read_buf_size;\n    }\n\n    conf->allow_encoded_slashes = new->allow_encoded_slashes;\n    conf->decode_encoded_slashes = new->decode_encoded_slashes;\n\n    if (new->log) {\n        if (!conf->log) {\n            conf->log = new->log;\n        }\n        else {\n            conf->log = ap_new_log_config(a, new->log);\n            ap_merge_log_config(base->log, conf->log);\n        }\n    }\n\n    conf->max_ranges = new->max_ranges != AP_MAXRANGES_UNSET ? new->max_ranges : base->max_ranges;\n    conf->max_overlaps = new->max_overlaps != AP_MAXRANGES_UNSET ? new->max_overlaps : base->max_overlaps;\n    conf->max_reversals = new->max_reversals != AP_MAXRANGES_UNSET ? new->max_reversals : base->max_reversals;\n\n    conf->cgi_pass_auth = new->cgi_pass_auth != AP_CGI_PASS_AUTH_UNSET ? new->cgi_pass_auth : base->cgi_pass_auth;\n\n    if (new->cgi_var_rules) {\n        if (!conf->cgi_var_rules) {\n            conf->cgi_var_rules = new->cgi_var_rules;\n        }\n        else {\n            conf->cgi_var_rules = apr_hash_overlay(a, new->cgi_var_rules, conf->cgi_var_rules);\n        }\n    }\n\n    AP_CORE_MERGE_FLAG(qualify_redirect_url, conf, base, new);\n\n    return (void*)conf;\n}\n\n#if APR_HAS_SO_ACCEPTFILTER\n#ifndef ACCEPT_FILTER_NAME\n#define ACCEPT_FILTER_NAME \"httpready\"\n#ifdef __FreeBSD_version\n#if __FreeBSD_version < 411000 /* httpready broken before 4.1.1 */\n#undef ACCEPT_FILTER_NAME\n#define ACCEPT_FILTER_NAME \"dataready\"\n#endif\n#endif\n#endif\n#endif\n\nstatic void *create_core_server_config(apr_pool_t *a, server_rec *s)\n{\n    core_server_config *conf;\n    int is_virtual = s->is_virtual;\n\n    conf = (core_server_config *)apr_pcalloc(a, sizeof(core_server_config));\n\n    /* global-default / global-only settings */\n\n    if (!is_virtual) {\n        conf->ap_document_root = DOCUMENT_LOCATION;\n        conf->access_name = DEFAULT_ACCESS_FNAME;\n\n        /* A mapping only makes sense in the global context */\n        conf->accf_map = apr_table_make(a, 5);\n#if APR_HAS_SO_ACCEPTFILTER\n        apr_table_setn(conf->accf_map, \"http\", ACCEPT_FILTER_NAME);\n        apr_table_setn(conf->accf_map, \"https\", \"dataready\");\n#elif defined(WIN32)\n        /* 'data' is disabled on Windows due to a DoS vuln (PR 59970) */\n        apr_table_setn(conf->accf_map, \"http\", \"connect\");\n        apr_table_setn(conf->accf_map, \"https\", \"connect\");\n#else\n        apr_table_setn(conf->accf_map, \"http\", \"data\");\n        apr_table_setn(conf->accf_map, \"https\", \"data\");\n#endif\n\n        conf->flush_max_threshold = AP_FLUSH_MAX_THRESHOLD;\n        conf->flush_max_pipelined = AP_FLUSH_MAX_PIPELINED;\n    }\n    else {\n        conf->flush_max_pipelined = -1;\n    }\n\n    /* initialization, no special case for global context */\n\n    conf->sec_dir = apr_array_make(a, 40, sizeof(ap_conf_vector_t *));\n    conf->sec_url = apr_array_make(a, 40, sizeof(ap_conf_vector_t *));\n\n    /* pcalloc'ed - we have NULL's/0's\n    conf->gprof_dir = NULL;\n\n    ** recursion stopper; 0 == unset\n    conf->redirect_limit = 0;\n    conf->subreq_limit = 0;\n\n    conf->protocol = NULL;\n     */\n\n    conf->trace_enable = AP_TRACE_UNSET;\n\n    conf->protocols = apr_array_make(a, 5, sizeof(const char *));\n    conf->protocols_honor_order = -1;\n    conf->merge_slashes = AP_CORE_CONFIG_UNSET; \n    \n    conf->strict_host_check= AP_CORE_CONFIG_UNSET; \n\n    return (void *)conf;\n}\n\nstatic void *merge_core_server_configs(apr_pool_t *p, void *basev, void *virtv)\n{\n    core_server_config *base = (core_server_config *)basev;\n    core_server_config *virt = (core_server_config *)virtv;\n    core_server_config *conf = (core_server_config *)\n                               apr_pmemdup(p, base, sizeof(core_server_config));\n\n    if (virt->ap_document_root)\n        conf->ap_document_root = virt->ap_document_root;\n\n    if (virt->access_name)\n        conf->access_name = virt->access_name;\n\n    /* XXX optimize to keep base->sec_ pointers if virt->sec_ array is empty */\n    conf->sec_dir = apr_array_append(p, base->sec_dir, virt->sec_dir);\n    conf->sec_url = apr_array_append(p, base->sec_url, virt->sec_url);\n\n    if (virt->redirect_limit)\n        conf->redirect_limit = virt->redirect_limit;\n\n    if (virt->subreq_limit)\n        conf->subreq_limit = virt->subreq_limit;\n\n    if (virt->trace_enable != AP_TRACE_UNSET)\n        conf->trace_enable = virt->trace_enable;\n\n    if (virt->http09_enable != AP_HTTP09_UNSET)\n        conf->http09_enable = virt->http09_enable;\n\n    if (virt->http_conformance != AP_HTTP_CONFORMANCE_UNSET)\n        conf->http_conformance = virt->http_conformance;\n\n    if (virt->http_methods != AP_HTTP_METHODS_UNSET)\n        conf->http_methods = virt->http_methods;\n\n    /* no action for virt->accf_map, not allowed per-vhost */\n\n    if (virt->protocol)\n        conf->protocol = virt->protocol;\n\n    if (virt->gprof_dir)\n        conf->gprof_dir = virt->gprof_dir;\n\n    if (virt->error_log_format)\n        conf->error_log_format = virt->error_log_format;\n\n    if (virt->error_log_conn)\n        conf->error_log_conn = virt->error_log_conn;\n\n    if (virt->error_log_req)\n        conf->error_log_req = virt->error_log_req;\n\n    conf->merge_trailers = (virt->merge_trailers != AP_MERGE_TRAILERS_UNSET)\n                           ? virt->merge_trailers\n                           : base->merge_trailers;\n\n    conf->protocols = ((virt->protocols->nelts > 0)? \n                       virt->protocols : base->protocols);\n    conf->protocols_honor_order = ((virt->protocols_honor_order < 0)?\n                                       base->protocols_honor_order :\n                                       virt->protocols_honor_order);\n    AP_CORE_MERGE_FLAG(merge_slashes, conf, base, virt);\n    \n\n    conf->flush_max_threshold = (virt->flush_max_threshold)\n                                  ? virt->flush_max_threshold\n                                  : base->flush_max_threshold;\n    conf->flush_max_pipelined = (virt->flush_max_pipelined >= 0)\n                                  ? virt->flush_max_pipelined\n                                  : base->flush_max_pipelined;\n\n    conf->strict_host_check = (virt->strict_host_check != AP_CORE_CONFIG_UNSET)\n                              ? virt->strict_host_check \n                              : base->strict_host_check;\n\n    AP_CORE_MERGE_FLAG(strict_host_check, conf, base, virt);\n\n    return conf;\n}\n\n/* Add per-directory configuration entry (for <directory> section);\n * these are part of the core server config.\n */\n\nAP_CORE_DECLARE(void) ap_add_per_dir_conf(server_rec *s, void *dir_config)\n{\n    core_server_config *sconf = ap_get_core_module_config(s->module_config);\n    void **new_space = (void **)apr_array_push(sconf->sec_dir);\n\n    *new_space = dir_config;\n}\n\nAP_CORE_DECLARE(void) ap_add_per_url_conf(server_rec *s, void *url_config)\n{\n    core_server_config *sconf = ap_get_core_module_config(s->module_config);\n    void **new_space = (void **)apr_array_push(sconf->sec_url);\n\n    *new_space = url_config;\n}\n\nAP_CORE_DECLARE(void) ap_add_file_conf(apr_pool_t *p, core_dir_config *conf,\n                                       void *url_config)\n{\n    void **new_space;\n\n    if (!conf->sec_file)\n        conf->sec_file = apr_array_make(p, 2, sizeof(ap_conf_vector_t *));\n\n    new_space = (void **)apr_array_push(conf->sec_file);\n    *new_space = url_config;\n}\n\nAP_CORE_DECLARE(const char *) ap_add_if_conf(apr_pool_t *p,\n                                             core_dir_config *conf,\n                                             void *if_config)\n{\n    void **new_space;\n    core_dir_config *new = ap_get_module_config(if_config, &core_module);\n\n    if (!conf->sec_if) {\n        conf->sec_if = apr_array_make(p, 2, sizeof(ap_conf_vector_t *));\n    }\n    if (new->condition_ifelse & AP_CONDITION_ELSE) {\n        int have_if = 0;\n        if (conf->sec_if->nelts > 0) {\n            core_dir_config *last;\n            ap_conf_vector_t *lastelt = APR_ARRAY_IDX(conf->sec_if,\n                                                      conf->sec_if->nelts - 1,\n                                                      ap_conf_vector_t *);\n            last = ap_get_module_config(lastelt, &core_module);\n            if (last->condition_ifelse & AP_CONDITION_IF)\n                have_if = 1;\n        }\n        if (!have_if)\n            return \"<Else> or <ElseIf> section without previous <If> or \"\n                   \"<ElseIf> section in same scope\";\n    }\n\n    new_space = (void **)apr_array_push(conf->sec_if);\n    *new_space = if_config;\n    return NULL;\n}\n\n\n/* We need to do a stable sort, qsort isn't stable.  So to make it stable\n * we'll be maintaining the original index into the list, and using it\n * as the minor key during sorting.  The major key is the number of\n * components (where the root component is zero).\n */\nstruct reorder_sort_rec {\n    ap_conf_vector_t *elt;\n    int orig_index;\n};\n\nstatic int reorder_sorter(const void *va, const void *vb)\n{\n    const struct reorder_sort_rec *a = va;\n    const struct reorder_sort_rec *b = vb;\n    core_dir_config *core_a;\n    core_dir_config *core_b;\n\n    core_a = ap_get_core_module_config(a->elt);\n    core_b = ap_get_core_module_config(b->elt);\n\n    /* a regex always sorts after a non-regex\n     */\n    if (!core_a->r && core_b->r) {\n        return -1;\n    }\n    else if (core_a->r && !core_b->r) {\n        return 1;\n    }\n\n    /* we always sort next by the number of components\n     */\n    if (core_a->d_components < core_b->d_components) {\n        return -1;\n    }\n    else if (core_a->d_components > core_b->d_components) {\n        return 1;\n    }\n\n    /* They have the same number of components, we now have to compare\n     * the minor key to maintain the original order (from the config.)\n     */\n    return a->orig_index - b->orig_index;\n}\n\nvoid ap_core_reorder_directories(apr_pool_t *p, server_rec *s)\n{\n    core_server_config *sconf;\n    apr_array_header_t *sec_dir;\n    struct reorder_sort_rec *sortbin;\n    int nelts;\n    ap_conf_vector_t **elts;\n    int i;\n    apr_pool_t *tmp;\n\n    sconf = ap_get_core_module_config(s->module_config);\n    sec_dir = sconf->sec_dir;\n    nelts = sec_dir->nelts;\n    elts = (ap_conf_vector_t **)sec_dir->elts;\n\n    if (!nelts) {\n        /* simple case of already being sorted... */\n        /* We're not checking this condition to be fast... we're checking\n         * it to avoid trying to palloc zero bytes, which can trigger some\n         * memory debuggers to barf\n         */\n        return;\n    }\n\n    /* we have to allocate tmp space to do a stable sort */\n    apr_pool_create(&tmp, p);\n    apr_pool_tag(tmp, \"core_reorder_directories\");\n    sortbin = apr_palloc(tmp, sec_dir->nelts * sizeof(*sortbin));\n    for (i = 0; i < nelts; ++i) {\n        sortbin[i].orig_index = i;\n        sortbin[i].elt = elts[i];\n    }\n\n    qsort(sortbin, nelts, sizeof(*sortbin), reorder_sorter);\n\n    /* and now copy back to the original array */\n    for (i = 0; i < nelts; ++i) {\n        elts[i] = sortbin[i].elt;\n    }\n\n    apr_pool_destroy(tmp);\n}\n\n/*****************************************************************\n *\n * There are some elements of the core config structures in which\n * other modules have a legitimate interest (this is ugly, but necessary\n * to preserve NCSA back-compatibility).  So, we have a bunch of accessors\n * here...\n */\n\nAP_DECLARE(int) ap_allow_options(request_rec *r)\n{\n    core_dir_config *conf =\n      (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    return conf->opts;\n}\n\nAP_DECLARE(int) ap_allow_overrides(request_rec *r)\n{\n    core_dir_config *conf;\n    conf = (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    return conf->override;\n}\n\n/*\n * Optional function coming from mod_authn_core, used for\n * retrieving the type of authorization\n */\nstatic APR_OPTIONAL_FN_TYPE(authn_ap_auth_type) *authn_ap_auth_type;\n\nAP_DECLARE(const char *) ap_auth_type(request_rec *r)\n{\n    if (authn_ap_auth_type) {\n        return authn_ap_auth_type(r);\n    }\n    return NULL;\n}\n\n/*\n * Optional function coming from mod_authn_core, used for\n * retrieving the authorization realm\n */\nstatic APR_OPTIONAL_FN_TYPE(authn_ap_auth_name) *authn_ap_auth_name;\n\nAP_DECLARE(const char *) ap_auth_name(request_rec *r)\n{\n    if (authn_ap_auth_name) {\n        return authn_ap_auth_name(r);\n    }\n    return NULL;\n}\n\n/*\n * Optional function coming from mod_access_compat, used to determine how\n   access control interacts with authentication/authorization\n */\nstatic APR_OPTIONAL_FN_TYPE(access_compat_ap_satisfies) *access_compat_ap_satisfies;\n\nAP_DECLARE(int) ap_satisfies(request_rec *r)\n{\n    if (access_compat_ap_satisfies) {\n        return access_compat_ap_satisfies(r);\n    }\n    return SATISFY_NOSPEC;\n}\n\nAP_DECLARE(const char *) ap_document_root(request_rec *r) /* Don't use this! */\n{\n    core_server_config *sconf;\n    core_request_config *rconf = ap_get_core_module_config(r->request_config);\n    if (rconf->document_root)\n        return rconf->document_root;\n    sconf = ap_get_core_module_config(r->server->module_config);\n    return sconf->ap_document_root;\n}\n\nAP_DECLARE(const char *) ap_context_prefix(request_rec *r)\n{\n    core_request_config *conf = ap_get_core_module_config(r->request_config);\n    if (conf->context_prefix)\n        return conf->context_prefix;\n    else\n        return \"\";\n}\n\nAP_DECLARE(const char *) ap_context_document_root(request_rec *r)\n{\n    core_request_config *conf = ap_get_core_module_config(r->request_config);\n    if (conf->context_document_root)\n        return conf->context_document_root;\n    else\n        return ap_document_root(r);\n}\n\nAP_DECLARE(void) ap_set_document_root(request_rec *r, const char *document_root)\n{\n    core_request_config *conf = ap_get_core_module_config(r->request_config);\n    conf->document_root = document_root;\n}\n\nAP_DECLARE(void) ap_set_context_info(request_rec *r, const char *context_prefix,\n                                     const char *context_document_root)\n{\n    core_request_config *conf = ap_get_core_module_config(r->request_config);\n    if (context_prefix)\n        conf->context_prefix = context_prefix;\n    if (context_document_root)\n        conf->context_document_root = context_document_root;\n}\n\n/* Should probably just get rid of this... the only code that cares is\n * part of the core anyway (and in fact, it isn't publicised to other\n * modules).\n */\n\nchar *ap_response_code_string(request_rec *r, int error_index)\n{\n    core_dir_config *dirconf;\n    core_request_config *reqconf = ap_get_core_module_config(r->request_config);\n    const char *err;\n    const char *response;\n    ap_expr_info_t *expr;\n\n    /* check for string registered via ap_custom_response() first */\n    if (reqconf->response_code_strings != NULL\n            && reqconf->response_code_strings[error_index] != NULL) {\n        return reqconf->response_code_strings[error_index];\n    }\n\n    /* check for string specified via ErrorDocument */\n    dirconf = ap_get_core_module_config(r->per_dir_config);\n\n    if (!dirconf->response_code_exprs) {\n        return NULL;\n    }\n\n    expr = apr_hash_get(dirconf->response_code_exprs, &error_index,\n            sizeof(error_index));\n    if (!expr) {\n        return NULL;\n    }\n\n    /* special token to indicate revert back to default */\n    if ((char *) expr == &errordocument_default) {\n        return NULL;\n    }\n\n    err = NULL;\n    response = ap_expr_str_exec(r, expr, &err);\n    if (err) {\n        ap_log_rerror(\n                APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(02841) \"core: ErrorDocument: can't \"\n                \"evaluate require expression: %s\", err);\n        return NULL;\n    }\n\n    /* alas, duplication required as we return not-const */\n    return apr_pstrdup(r->pool, response);\n}\n\n\n/* Code from Harald Hanche-Olsen <hanche@imf.unit.no> */\nstatic APR_INLINE int do_double_reverse (int double_reverse,\n                                         const char *remote_host,\n                                         apr_sockaddr_t *client_addr,\n                                         apr_pool_t *pool)\n{\n    apr_sockaddr_t *sa;\n    apr_status_t rv;\n\n    if (double_reverse) {\n        /* already done */\n        return double_reverse;\n    }\n\n    if (remote_host == NULL || remote_host[0] == '\\0') {\n        /* single reverse failed, so don't bother */\n        return -1;\n    }\n\n    rv = apr_sockaddr_info_get(&sa, remote_host, APR_UNSPEC, 0, 0, pool);\n    if (rv == APR_SUCCESS) {\n        while (sa) {\n            if (apr_sockaddr_equal(sa, client_addr)) {\n                return 1;\n            }\n\n            sa = sa->next;\n        }\n    }\n\n    return -1;\n}\n\nAP_DECLARE(const char *) ap_get_remote_host(conn_rec *conn, void *dir_config,\n                                            int type, int *str_is_ip)\n{\n    int hostname_lookups;\n    int ignored_str_is_ip;\n\n    if (!str_is_ip) { /* caller doesn't want to know */\n        str_is_ip = &ignored_str_is_ip;\n    }\n    *str_is_ip = 0;\n\n    /* If we haven't checked the host name, and we want to */\n    if (dir_config) {\n        hostname_lookups = ((core_dir_config *)ap_get_core_module_config(dir_config))\n                           ->hostname_lookups;\n\n        if (hostname_lookups == HOSTNAME_LOOKUP_UNSET) {\n            hostname_lookups = HOSTNAME_LOOKUP_OFF;\n        }\n    }\n    else {\n        /* the default */\n        hostname_lookups = HOSTNAME_LOOKUP_OFF;\n    }\n\n    if (type != REMOTE_NOLOOKUP\n        && conn->remote_host == NULL\n        && (type == REMOTE_DOUBLE_REV\n        || hostname_lookups != HOSTNAME_LOOKUP_OFF)) {\n\n        if (apr_getnameinfo(&conn->remote_host, conn->client_addr, 0)\n            == APR_SUCCESS) {\n            ap_str_tolower(conn->remote_host);\n\n            if (hostname_lookups == HOSTNAME_LOOKUP_DOUBLE) {\n                conn->double_reverse = do_double_reverse(conn->double_reverse,\n                                                         conn->remote_host,\n                                                         conn->client_addr,\n                                                         conn->pool);\n                if (conn->double_reverse != 1) {\n                    conn->remote_host = NULL;\n                }\n            }\n        }\n\n        /* if failed, set it to the NULL string to indicate error */\n        if (conn->remote_host == NULL) {\n            conn->remote_host = \"\";\n        }\n    }\n\n    if (type == REMOTE_DOUBLE_REV) {\n        conn->double_reverse = do_double_reverse(conn->double_reverse,\n                                                 conn->remote_host,\n                                                 conn->client_addr, conn->pool);\n        if (conn->double_reverse == -1) {\n            return NULL;\n        }\n    }\n\n    /*\n     * Return the desired information; either the remote DNS name, if found,\n     * or either NULL (if the hostname was requested) or the IP address\n     * (if any identifier was requested).\n     */\n    if (conn->remote_host != NULL && conn->remote_host[0] != '\\0') {\n        return conn->remote_host;\n    }\n    else {\n        if (type == REMOTE_HOST || type == REMOTE_DOUBLE_REV) {\n            return NULL;\n        }\n        else {\n            *str_is_ip = 1;\n            return conn->client_ip;\n        }\n    }\n}\n\nAP_DECLARE(const char *) ap_get_useragent_host(request_rec *r,\n                                               int type, int *str_is_ip)\n{\n    conn_rec *conn = r->connection;\n    int hostname_lookups;\n    int ignored_str_is_ip;\n\n    /* Guard here when examining the host before the read_request hook\n     * has populated an r->useragent_addr\n     */\n    if (!r->useragent_addr || (r->useragent_addr == conn->client_addr)) {\n        return ap_get_remote_host(conn, r->per_dir_config, type, str_is_ip);\n    }\n\n    if (!str_is_ip) { /* caller doesn't want to know */\n        str_is_ip = &ignored_str_is_ip;\n    }\n    *str_is_ip = 0;\n\n    hostname_lookups = ((core_dir_config *)\n                        ap_get_core_module_config(r->per_dir_config))\n                            ->hostname_lookups;\n    if (hostname_lookups == HOSTNAME_LOOKUP_UNSET) {\n        hostname_lookups = HOSTNAME_LOOKUP_OFF;\n    }\n\n    if (type != REMOTE_NOLOOKUP\n        && r->useragent_host == NULL\n        && (type == REMOTE_DOUBLE_REV\n        || hostname_lookups != HOSTNAME_LOOKUP_OFF)) {\n\n        if (apr_getnameinfo(&r->useragent_host, r->useragent_addr, 0)\n            == APR_SUCCESS) {\n            ap_str_tolower(r->useragent_host);\n\n            if (hostname_lookups == HOSTNAME_LOOKUP_DOUBLE) {\n                r->double_reverse = do_double_reverse(r->double_reverse,\n                                                      r->useragent_host,\n                                                      r->useragent_addr,\n                                                      r->pool);\n                if (r->double_reverse != 1) {\n                    r->useragent_host = NULL;\n                }\n            }\n        }\n\n        /* if failed, set it to the NULL string to indicate error */\n        if (r->useragent_host == NULL) {\n            r->useragent_host = \"\";\n        }\n    }\n\n    if (type == REMOTE_DOUBLE_REV) {\n        r->double_reverse = do_double_reverse(r->double_reverse,\n                                              r->useragent_host,\n                                              r->useragent_addr, r->pool);\n        if (r->double_reverse == -1) {\n            return NULL;\n        }\n    }\n\n    /*\n     * Return the desired information; either the remote DNS name, if found,\n     * or either NULL (if the hostname was requested) or the IP address\n     * (if any identifier was requested).\n     */\n    if (r->useragent_host != NULL && r->useragent_host[0] != '\\0') {\n        return r->useragent_host;\n    }\n    else {\n        if (type == REMOTE_HOST || type == REMOTE_DOUBLE_REV) {\n            return NULL;\n        }\n        else {\n            *str_is_ip = 1;\n            return r->useragent_ip;\n        }\n    }\n}\n\n/*\n * Optional function coming from mod_ident, used for looking up ident user\n */\nstatic APR_OPTIONAL_FN_TYPE(ap_ident_lookup) *ident_lookup;\n\nAP_DECLARE(const char *) ap_get_remote_logname(request_rec *r)\n{\n    if (r->connection->remote_logname != NULL) {\n        return r->connection->remote_logname;\n    }\n\n    if (ident_lookup) {\n        return ident_lookup(r);\n    }\n\n    return NULL;\n}\n\n/* There are two options regarding what the \"name\" of a server is.  The\n * \"canonical\" name as defined by ServerName and Port, or the \"client's\n * name\" as supplied by a possible Host: header or full URI.\n *\n * The DNS option to UseCanonicalName causes this routine to do a\n * reverse lookup on the local IP address of the connection and use\n * that for the ServerName. This makes its value more reliable while\n * at the same time allowing Demon's magic virtual hosting to work.\n * The assumption is that DNS lookups are sufficiently quick...\n * -- fanf 1998-10-03\n */\nAP_DECLARE(const char *) ap_get_server_name(request_rec *r)\n{\n    conn_rec *conn = r->connection;\n    core_dir_config *d;\n    const char *retval;\n\n    d = (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    switch (d->use_canonical_name) {\n        case USE_CANONICAL_NAME_ON:\n            retval = r->server->server_hostname;\n            break;\n        case USE_CANONICAL_NAME_DNS:\n            if (conn->local_host == NULL) {\n                if (apr_getnameinfo(&conn->local_host,\n                                conn->local_addr, 0) != APR_SUCCESS)\n                    conn->local_host = apr_pstrdup(conn->pool,\n                                               r->server->server_hostname);\n                else {\n                    ap_str_tolower(conn->local_host);\n                }\n            }\n            retval = conn->local_host;\n            break;\n        case USE_CANONICAL_NAME_OFF:\n        case USE_CANONICAL_NAME_UNSET:\n            retval = r->hostname ? r->hostname : r->server->server_hostname;\n            break;\n        default:\n            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00109)\n                         \"ap_get_server_name: Invalid UCN Option somehow\");\n            retval = \"localhost\";\n            break;\n    }\n    return retval;\n}\n\n/*\n * Get the current server name from the request for the purposes\n * of using in a URL.  If the server name is an IPv6 literal\n * address, it will be returned in URL format (e.g., \"[fe80::1]\").\n */\nAP_DECLARE(const char *) ap_get_server_name_for_url(request_rec *r)\n{\n    const char *plain_server_name = ap_get_server_name(r);\n\n#if APR_HAVE_IPV6\n    if (ap_strchr_c(plain_server_name, ':')) { /* IPv6 literal? */\n        return apr_pstrcat(r->pool, \"[\", plain_server_name, \"]\", NULL);\n    }\n#endif\n    return plain_server_name;\n}\n\nAP_DECLARE(apr_port_t) ap_get_server_port(const request_rec *r)\n{\n    apr_port_t port;\n    core_dir_config *d =\n      (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    switch (d->use_canonical_name) {\n        case USE_CANONICAL_NAME_OFF:\n        case USE_CANONICAL_NAME_DNS:\n        case USE_CANONICAL_NAME_UNSET:\n            if (d->use_canonical_phys_port == USE_CANONICAL_PHYS_PORT_ON)\n                port = r->parsed_uri.port_str ? r->parsed_uri.port :\n                       r->connection->local_addr->port ? r->connection->local_addr->port :\n                       r->server->port ? r->server->port :\n                       ap_default_port(r);\n            else /* USE_CANONICAL_PHYS_PORT_OFF or USE_CANONICAL_PHYS_PORT_UNSET */\n                port = r->parsed_uri.port_str ? r->parsed_uri.port :\n                       r->server->port ? r->server->port :\n                       ap_default_port(r);\n            break;\n        case USE_CANONICAL_NAME_ON:\n            /* With UseCanonicalName on (and in all versions prior to 1.3)\n             * Apache will use the hostname and port specified in the\n             * ServerName directive to construct a canonical name for the\n             * server. (If no port was specified in the ServerName\n             * directive, Apache uses the port supplied by the client if\n             * any is supplied, and finally the default port for the protocol\n             * used.\n             */\n            if (d->use_canonical_phys_port == USE_CANONICAL_PHYS_PORT_ON)\n                port = r->server->port ? r->server->port :\n                       r->connection->local_addr->port ? r->connection->local_addr->port :\n                       ap_default_port(r);\n            else /* USE_CANONICAL_PHYS_PORT_OFF or USE_CANONICAL_PHYS_PORT_UNSET */\n                port = r->server->port ? r->server->port :\n                       ap_default_port(r);\n            break;\n        default:\n            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00110)\n                         \"ap_get_server_port: Invalid UCN Option somehow\");\n            port = ap_default_port(r);\n            break;\n    }\n\n    return port;\n}\n\nAP_DECLARE(char *) ap_construct_url(apr_pool_t *p, const char *uri,\n                                    request_rec *r)\n{\n    unsigned port = ap_get_server_port(r);\n    const char *host = ap_get_server_name_for_url(r);\n\n    if (ap_is_default_port(port, r)) {\n        return apr_pstrcat(p, ap_http_scheme(r), \"://\", host, uri, NULL);\n    }\n\n    return apr_psprintf(p, \"%s://%s:%u%s\", ap_http_scheme(r), host, port, uri);\n}\n\nAP_DECLARE(apr_off_t) ap_get_limit_req_body(const request_rec *r)\n{\n    core_dir_config *d =\n      (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    if (d->limit_req_body == AP_LIMIT_REQ_BODY_UNSET) {\n        return AP_DEFAULT_LIMIT_REQ_BODY;\n    }\n\n    return d->limit_req_body;\n}\n\nAP_DECLARE(apr_size_t) ap_get_read_buf_size(const request_rec *r)\n{\n    core_dir_config *d = ap_get_core_module_config(r->per_dir_config);\n\n    return d->read_buf_size ? d->read_buf_size : AP_IOBUFSIZE;\n}\n\n\n/*****************************************************************\n *\n * Commands... this module handles almost all of the NCSA httpd.conf\n * commands, but most of the old srm.conf is in the modules.\n */\n\n\n/* returns a parent if it matches the given directive */\nstatic const ap_directive_t * find_parent(const ap_directive_t *dirp,\n                                          const char *what)\n{\n    while (dirp->parent != NULL) {\n        dirp = dirp->parent;\n\n        /* ### it would be nice to have atom-ized directives */\n        if (ap_cstr_casecmp(dirp->directive, what) == 0)\n            return dirp;\n    }\n\n    return NULL;\n}\n\nAP_DECLARE(const char *) ap_check_cmd_context(cmd_parms *cmd,\n                                              unsigned forbidden)\n{\n    const char *gt = (cmd->cmd->name[0] == '<'\n                      && cmd->cmd->name[strlen(cmd->cmd->name)-1] != '>')\n                         ? \">\" : \"\";\n    const ap_directive_t *found;\n\n    if ((forbidden & NOT_IN_VIRTUALHOST) && cmd->server->is_virtual) {\n        return apr_pstrcat(cmd->pool, cmd->cmd->name, gt,\n                           \" cannot occur within <VirtualHost> section\", NULL);\n    }\n\n    if ((forbidden & NOT_IN_DIR_CONTEXT) && cmd->limited != -1) {\n        return apr_pstrcat(cmd->pool, cmd->cmd->name, gt,\n                           \" cannot occur within <Limit> or <LimitExcept> \"\n                           \"section\", NULL);\n    }\n\n    if ((forbidden & NOT_IN_HTACCESS) && (cmd->pool == cmd->temp_pool)) {\n         return apr_pstrcat(cmd->pool, cmd->cmd->name, gt,\n                            \" cannot occur within htaccess files\", NULL);\n    }\n\n    if ((forbidden & NOT_IN_DIR_LOC_FILE) == NOT_IN_DIR_LOC_FILE) {\n        if (cmd->path != NULL) {\n            return apr_pstrcat(cmd->pool, cmd->cmd->name, gt,\n                            \" cannot occur within directory context\", NULL);\n        }\n        if (cmd->cmd->req_override & EXEC_ON_READ) {\n            /* EXEC_ON_READ must be NOT_IN_DIR_LOC_FILE, if not, it will\n             * (deliberately) segfault below in the individual tests...\n             */\n            return NULL;\n        }\n    }\n\n    if (((forbidden & NOT_IN_DIRECTORY)\n         && ((found = find_parent(cmd->directive, \"<Directory\"))\n             || (found = find_parent(cmd->directive, \"<DirectoryMatch\"))))\n        || ((forbidden & NOT_IN_LOCATION)\n            && ((found = find_parent(cmd->directive, \"<Location\"))\n                || (found = find_parent(cmd->directive, \"<LocationMatch\"))))\n        || ((forbidden & NOT_IN_FILES)\n            && ((found = find_parent(cmd->directive, \"<Files\"))\n                || (found = find_parent(cmd->directive, \"<FilesMatch\"))\n                || (found = find_parent(cmd->directive, \"<If\"))\n                || (found = find_parent(cmd->directive, \"<ElseIf\"))\n                || (found = find_parent(cmd->directive, \"<Else\"))))\n        || ((forbidden & NOT_IN_PROXY)\n            && ((found = find_parent(cmd->directive, \"<Proxy\"))\n                || (found = find_parent(cmd->directive, \"<ProxyMatch\"))))) {\n        return apr_pstrcat(cmd->pool, cmd->cmd->name, gt,\n                           \" cannot occur within \", found->directive,\n                           \"> section\", NULL);\n    }\n\n    return NULL;\n}\n\nstatic const char *set_access_name(cmd_parms *cmd, void *dummy,\n                                   const char *arg)\n{\n    void *sconf = cmd->server->module_config;\n    core_server_config *conf = ap_get_core_module_config(sconf);\n\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    conf->access_name = apr_pstrdup(cmd->pool, arg);\n    return NULL;\n}\n\nAP_DECLARE(const char *) ap_resolve_env(apr_pool_t *p, const char * word)\n{\n# define SMALL_EXPANSION 5\n    struct sll {\n        struct sll *next;\n        const char *string;\n        apr_size_t len;\n    } *result, *current, sresult[SMALL_EXPANSION];\n    char *res_buf, *cp;\n    const char *s, *e, *ep;\n    unsigned spc;\n    apr_size_t outlen;\n\n    s = ap_strchr_c(word, '$');\n    if (!s) {\n        return word;\n    }\n\n    /* well, actually something to do */\n    ep = word + strlen(word);\n    spc = 0;\n    result = current = &(sresult[spc++]);\n    current->next = NULL;\n    current->string = word;\n    current->len = s - word;\n    outlen = current->len;\n\n    do {\n        /* prepare next entry */\n        if (current->len) {\n            current->next = (spc < SMALL_EXPANSION)\n                            ? &(sresult[spc++])\n                            : (struct sll *)apr_palloc(p,\n                                                       sizeof(*current->next));\n            current = current->next;\n            current->next = NULL;\n            current->len = 0;\n        }\n\n        if (*s == '$') {\n            if (s[1] == '{' && (e = ap_strchr_c(s+2, '}'))) {\n                char *name = apr_pstrmemdup(p, s+2, e-s-2);\n                word = NULL;\n                if (server_config_defined_vars)\n                    word = apr_table_get(server_config_defined_vars, name);\n                if (!word)\n                    word = apr_pstrdup(p, getenv(name));\n                if (word) {\n                    current->string = word;\n                    current->len = strlen(word);\n                    outlen += current->len;\n                }\n                else {\n                    if (ap_strchr(name, ':') == 0)\n                        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, NULL, APLOGNO(00111)\n                                     \"Config variable ${%s} is not defined\",\n                                     name);\n                    current->string = s;\n                    current->len = e - s + 1;\n                    outlen += current->len;\n                }\n                s = e + 1;\n            }\n            else {\n                current->string = s++;\n                current->len = 1;\n                ++outlen;\n            }\n        }\n        else {\n            word = s;\n            s = ap_strchr_c(s, '$');\n            current->string = word;\n            current->len = s ? s - word : ep - word;\n            outlen += current->len;\n        }\n    } while (s && *s);\n\n    /* assemble result */\n    res_buf = cp = apr_palloc(p, outlen + 1);\n    do {\n        if (result->len) {\n            memcpy(cp, result->string, result->len);\n            cp += result->len;\n        }\n        result = result->next;\n    } while (result);\n    res_buf[outlen] = '\\0';\n\n    return res_buf;\n}\n\nstatic int reset_config_defines(void *dummy)\n{\n    ap_server_config_defines = saved_server_config_defines;\n    saved_server_config_defines = NULL;\n    server_config_defined_vars = NULL;\n    ap_runtime_dir = NULL;\n    return OK;\n}\n\n/*\n * Make sure we can revert the effects of Define/UnDefine when restarting.\n * This function must be called once per loading of the config, before\n * ap_server_config_defines is changed. This may be during reading of the\n * config, which is even before the pre_config hook is run (due to\n * EXEC_ON_READ for Define/UnDefine).\n */\nstatic void init_config_defines(apr_pool_t *pconf)\n{\n    saved_server_config_defines = ap_server_config_defines;\n    /* Use apr_array_copy instead of apr_array_copy_hdr because it does not\n     * protect from the way unset_define removes entries.\n     */\n    ap_server_config_defines = apr_array_copy(pconf, ap_server_config_defines);\n}\n\nstatic const char *set_define(cmd_parms *cmd, void *dummy,\n                              const char *name, const char *value)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);\n    if (err)\n        return err;\n    if (ap_strchr_c(name, ':') != NULL) {\n        return \"Variable name must not contain ':'\";\n    }\n\n    if (!saved_server_config_defines) {\n        init_config_defines(cmd->pool);\n    }\n    if (!ap_exists_config_define(name)) {\n        *(const char **)apr_array_push(ap_server_config_defines) = name;\n    }\n    if (value) {\n        if (!server_config_defined_vars) {\n            server_config_defined_vars = apr_table_make(cmd->pool, 5);\n        }\n        apr_table_setn(server_config_defined_vars, name, value);\n    }\n\n    return NULL;\n}\n\nstatic const char *unset_define(cmd_parms *cmd, void *dummy,\n                                const char *name)\n{\n    int i;\n    const char **defines;\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS);\n    if (err)\n        return err;\n    if (ap_strchr_c(name, ':') != NULL) {\n        return \"Variable name must not contain ':'\";\n    }\n\n    if (!saved_server_config_defines) {\n        init_config_defines(cmd->pool);\n    }\n\n    defines = (const char **)ap_server_config_defines->elts;\n    for (i = 0; i < ap_server_config_defines->nelts; i++) {\n        if (strcmp(defines[i], name) == 0) {\n            defines[i] = *(const char **)apr_array_pop(ap_server_config_defines);\n            break;\n        }\n    }\n\n    if (server_config_defined_vars) {\n        apr_table_unset(server_config_defined_vars, name);\n    }\n\n    return NULL;\n}\n\nstatic const char *generate_error(cmd_parms *cmd, void *dummy,\n                                  const char *arg)\n{\n    if (!arg || !*arg) {\n        return \"The Error directive was used with no message.\";\n    }\n\n    if (*arg == '\"' || *arg == '\\'') { /* strip off quotes */\n        apr_size_t len = strlen(arg);\n        char last = *(arg + len - 1);\n\n        if (*arg == last) {\n            return apr_pstrndup(cmd->pool, arg + 1, len - 2);\n        }\n    }\n\n    return arg;\n}\n\n#ifdef GPROF\nstatic const char *set_gprof_dir(cmd_parms *cmd, void *dummy, const char *arg)\n{\n    void *sconf = cmd->server->module_config;\n    core_server_config *conf = ap_get_core_module_config(sconf);\n\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    conf->gprof_dir = apr_pstrdup(cmd->pool, arg);\n    return NULL;\n}\n#endif /*GPROF*/\n\nstatic const char *set_add_default_charset(cmd_parms *cmd,\n                                           void *d_, const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (!ap_cstr_casecmp(arg, \"Off\")) {\n       d->add_default_charset = ADD_DEFAULT_CHARSET_OFF;\n    }\n    else if (!ap_cstr_casecmp(arg, \"On\")) {\n       d->add_default_charset = ADD_DEFAULT_CHARSET_ON;\n       d->add_default_charset_name = DEFAULT_ADD_DEFAULT_CHARSET_NAME;\n    }\n    else {\n       d->add_default_charset = ADD_DEFAULT_CHARSET_ON;\n       d->add_default_charset_name = arg;\n    }\n\n    return NULL;\n}\n\nstatic const char *set_document_root(cmd_parms *cmd, void *dummy,\n                                     const char *arg)\n{\n    void *sconf = cmd->server->module_config;\n    core_server_config *conf = ap_get_core_module_config(sconf);\n\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    /* When ap_document_root_check is false; skip all the stuff below */\n    if (!ap_document_root_check) {\n       conf->ap_document_root = arg;\n       return NULL;\n    }\n\n    /* Make it absolute, relative to ServerRoot */\n    arg = ap_server_root_relative(cmd->pool, arg);\n    if (arg == NULL) {\n        return \"DocumentRoot must be a directory\";\n    }\n\n    /* TODO: ap_configtestonly */\n    if (apr_filepath_merge((char**)&conf->ap_document_root, NULL, arg,\n                           APR_FILEPATH_TRUENAME, cmd->pool) != APR_SUCCESS\n        || !ap_is_directory(cmd->temp_pool, arg)) {\n        if (cmd->server->is_virtual) {\n            ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0,\n                          cmd->pool, APLOGNO(00112)\n                          \"Warning: DocumentRoot [%s] does not exist\",\n                          arg);\n            conf->ap_document_root = arg;\n        }\n        else {\n            return apr_psprintf(cmd->pool, \n                                \"DocumentRoot '%s' is not a directory, or is not readable\",\n                                arg);\n        }\n    }\n    return NULL;\n}\n\nAP_DECLARE(void) ap_custom_response(request_rec *r, int status,\n                                    const char *string)\n{\n    core_request_config *conf = ap_get_core_module_config(r->request_config);\n    int idx;\n\n    if (conf->response_code_strings == NULL) {\n        conf->response_code_strings =\n            apr_pcalloc(r->pool,\n                        sizeof(*conf->response_code_strings) * RESPONSE_CODES);\n    }\n\n    idx = ap_index_of_response(status);\n\n    conf->response_code_strings[idx] =\n       ((ap_is_url(string) || (*string == '/')) && (*string != '\"')) ?\n       apr_pstrdup(r->pool, string) : apr_pstrcat(r->pool, \"\\\"\", string, NULL);\n}\n\nstatic const char *set_error_document(cmd_parms *cmd, void *conf_,\n                                      const char *errno_str, const char *msg)\n{\n    core_dir_config *conf = conf_;\n    int error_number, index_number, idx500;\n    enum { MSG, LOCAL_PATH, REMOTE_PATH } what = MSG;\n\n    /* 1st parameter should be a 3 digit number, which we recognize;\n     * convert it into an array index\n     */\n    error_number = atoi(errno_str);\n    idx500 = ap_index_of_response(HTTP_INTERNAL_SERVER_ERROR);\n\n    if (error_number == HTTP_INTERNAL_SERVER_ERROR) {\n        index_number = idx500;\n    }\n    else if ((index_number = ap_index_of_response(error_number)) == idx500) {\n        return apr_pstrcat(cmd->pool, \"Unsupported HTTP response code \",\n                           errno_str, NULL);\n    }\n\n    /* Heuristic to determine second argument. */\n    if (ap_strchr_c(msg,' '))\n        what = MSG;\n    else if (msg[0] == '/')\n        what = LOCAL_PATH;\n    else if (ap_is_url(msg))\n        what = REMOTE_PATH;\n    else\n        what = MSG;\n\n    /* The entry should be ignored if it is a full URL for a 401 error */\n\n    if (error_number == 401 && what == REMOTE_PATH) {\n        ap_log_error(APLOG_MARK, APLOG_NOTICE, 0, cmd->server, APLOGNO(00113)\n                     \"%s:%d cannot use a full URL in a 401 ErrorDocument \"\n                     \"directive --- ignoring!\", cmd->directive->filename, cmd->directive->line_num);\n    }\n    else { /* Store it... */\n        if (conf->response_code_exprs == NULL) {\n            conf->response_code_exprs = apr_hash_make(cmd->pool);\n        }\n\n        if (ap_cstr_casecmp(msg, \"default\") == 0) {\n            /* special case: ErrorDocument 404 default restores the\n             * canned server error response\n             */\n            apr_hash_set(conf->response_code_exprs,\n                    apr_pmemdup(cmd->pool, &index_number, sizeof(index_number)),\n                    sizeof(index_number), &errordocument_default);\n        }\n        else {\n            ap_expr_info_t *expr;\n            const char *expr_err = NULL;\n\n            /* hack. Prefix a \" if it is a msg; as that is what\n             * http_protocol.c relies on to distinguish between\n             * a msg and a (local) path.\n             */\n            const char *response =\n                    (what == MSG) ? apr_pstrcat(cmd->pool, \"\\\"\", msg, NULL) :\n                            apr_pstrdup(cmd->pool, msg);\n\n            expr = ap_expr_parse_cmd(cmd, response, AP_EXPR_FLAG_STRING_RESULT,\n                    &expr_err, NULL);\n\n            if (expr_err) {\n                return apr_pstrcat(cmd->temp_pool,\n                                   \"Cannot parse expression in ErrorDocument: \",\n                                   expr_err, NULL);\n            }\n\n            apr_hash_set(conf->response_code_exprs,\n                    apr_pmemdup(cmd->pool, &index_number, sizeof(index_number)),\n                    sizeof(index_number), expr);\n\n        }\n    }\n\n    return NULL;\n}\n\nstatic const char *set_allow_opts(cmd_parms *cmd, allow_options_t *opts,\n                                  const char *l)\n{\n    allow_options_t opt;\n    int first = 1;\n\n    char *w, *p = (char *) l;\n    char *tok_state;\n\n    while ((w = apr_strtok(p, \",\", &tok_state)) != NULL) {\n\n        if (first) {\n            p = NULL;\n            *opts = OPT_NONE;\n            first = 0;\n        }\n\n        if (!ap_cstr_casecmp(w, \"Indexes\")) {\n            opt = OPT_INDEXES;\n        }\n        else if (!ap_cstr_casecmp(w, \"Includes\")) {\n            /* If Includes is permitted, both Includes and\n             * IncludesNOEXEC may be changed. */\n            opt = (OPT_INCLUDES | OPT_INC_WITH_EXEC);\n        }\n        else if (!ap_cstr_casecmp(w, \"IncludesNOEXEC\")) {\n            opt = OPT_INCLUDES;\n        }\n        else if (!ap_cstr_casecmp(w, \"FollowSymLinks\")) {\n            opt = OPT_SYM_LINKS;\n        }\n        else if (!ap_cstr_casecmp(w, \"SymLinksIfOwnerMatch\")) {\n            opt = OPT_SYM_OWNER;\n        }\n        else if (!ap_cstr_casecmp(w, \"ExecCGI\")) {\n            opt = OPT_EXECCGI;\n        }\n        else if (!ap_cstr_casecmp(w, \"MultiViews\")) {\n            opt = OPT_MULTI;\n        }\n        else if (!ap_cstr_casecmp(w, \"RunScripts\")) { /* AI backcompat. Yuck */\n            opt = OPT_MULTI|OPT_EXECCGI;\n        }\n        else if (!ap_cstr_casecmp(w, \"None\")) {\n            opt = OPT_NONE;\n        }\n        else if (!ap_cstr_casecmp(w, \"All\")) {\n            opt = OPT_ALL;\n        }\n        else {\n            return apr_pstrcat(cmd->pool, \"Illegal option \", w, NULL);\n        }\n\n        *opts |= opt;\n    }\n\n    (*opts) &= (~OPT_UNSET);\n\n    return NULL;\n}\n\nstatic const char *set_override(cmd_parms *cmd, void *d_, const char *l)\n{\n    core_dir_config *d = d_;\n    char *w;\n    char *k, *v;\n    const char *err;\n\n    /* Throw a warning if we're in <Location> or <Files> */\n    if (ap_check_cmd_context(cmd, NOT_IN_LOCATION | NOT_IN_FILES)) {\n        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, APLOGNO(00114)\n                     \"Useless use of AllowOverride in line %d of %s.\",\n                     cmd->directive->line_num, cmd->directive->filename);\n    }\n    if ((err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS)) != NULL)\n        return err;\n\n    d->override = OR_NONE;\n    while (l[0]) {\n        w = ap_getword_conf(cmd->temp_pool, &l);\n\n        k = w;\n        v = strchr(k, '=');\n        if (v) {\n                *v++ = '\\0';\n        }\n\n        if (!ap_cstr_casecmp(w, \"Limit\")) {\n            d->override |= OR_LIMIT;\n        }\n        else if (!ap_cstr_casecmp(k, \"Options\")) {\n            d->override |= OR_OPTIONS;\n            if (v)\n                set_allow_opts(cmd, &(d->override_opts), v);\n            else\n                d->override_opts = OPT_ALL;\n        }\n        else if (!ap_cstr_casecmp(w, \"FileInfo\")) {\n            d->override |= OR_FILEINFO;\n        }\n        else if (!ap_cstr_casecmp(w, \"AuthConfig\")) {\n            d->override |= OR_AUTHCFG;\n        }\n        else if (!ap_cstr_casecmp(w, \"Indexes\")) {\n            d->override |= OR_INDEXES;\n        }\n        else if (!ap_cstr_casecmp(w, \"Nonfatal\")) {\n            if (!v) {\n                return apr_pstrcat(cmd->pool, \"=Override, =Unknown or =All expected after \", w, NULL);\n            }\n            else if (!ap_cstr_casecmp(v, \"Override\")) {\n                d->override |= NONFATAL_OVERRIDE;\n            }\n            else if (!ap_cstr_casecmp(v, \"Unknown\")) {\n                d->override |= NONFATAL_UNKNOWN;\n            }\n            else if (!ap_cstr_casecmp(v, \"All\")) {\n                d->override |= NONFATAL_ALL;\n            }\n        }\n        else if (!ap_cstr_casecmp(w, \"None\")) {\n            d->override = OR_NONE;\n        }\n        else if (!ap_cstr_casecmp(w, \"All\")) {\n            d->override = OR_ALL;\n        }\n        else {\n            return apr_pstrcat(cmd->pool, \"Illegal override option \", w, NULL);\n        }\n\n        d->override &= ~OR_UNSET;\n    }\n\n    return NULL;\n}\n\nstatic const char *set_cgi_pass_auth(cmd_parms *cmd, void *d_, int flag)\n{\n    core_dir_config *d = d_;\n\n    d->cgi_pass_auth = flag ? AP_CGI_PASS_AUTH_ON : AP_CGI_PASS_AUTH_OFF;\n\n    return NULL;\n}\n\nstatic const char *set_cgi_var(cmd_parms *cmd, void *d_,\n                               const char *var, const char *rule_)\n{\n    core_dir_config *d = d_;\n    char *rule = apr_pstrdup(cmd->pool, rule_);\n\n    ap_str_tolower(rule);\n\n    if (!strcmp(var, \"REQUEST_URI\")) {\n        if (strcmp(rule, \"current-uri\") && strcmp(rule, \"original-uri\")) {\n            return \"Valid rules for REQUEST_URI are 'current-uri' and 'original-uri'\";\n        }\n    }\n    else {\n        return apr_pstrcat(cmd->pool, \"Unrecognized CGI variable: \\\"\",\n                           var, \"\\\"\", NULL);\n    }\n\n    if (!d->cgi_var_rules) {\n        d->cgi_var_rules = apr_hash_make(cmd->pool);\n    }\n    apr_hash_set(d->cgi_var_rules, var, APR_HASH_KEY_STRING, rule);\n    return NULL;\n}\n\nstatic const char *set_qualify_redirect_url(cmd_parms *cmd, void *d_, int flag)\n{\n    core_dir_config *d = d_;\n\n    d->qualify_redirect_url = flag ? AP_CORE_CONFIG_ON : AP_CORE_CONFIG_OFF;\n\n    return NULL;\n}\n\nstatic const char *set_core_server_flag(cmd_parms *cmd, void *s_, int flag)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    return ap_set_flag_slot(cmd, conf, flag);\n}\n\nstatic const char *set_override_list(cmd_parms *cmd, void *d_, int argc, char *const argv[])\n{\n    core_dir_config *d = d_;\n    int i;\n    const char *err;\n\n    /* Throw a warning if we're in <Location> or <Files> */\n    if (ap_check_cmd_context(cmd, NOT_IN_LOCATION | NOT_IN_FILES)) {\n        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, APLOGNO(00115)\n                     \"Useless use of AllowOverrideList at %s:%d\",\n                     cmd->directive->filename, cmd->directive->line_num);\n    }\n    if ((err = ap_check_cmd_context(cmd, NOT_IN_HTACCESS)) != NULL)\n        return err;\n\n    d->override_list = apr_table_make(cmd->pool, argc);\n\n    for (i = 0; i < argc; i++) {\n        if (!ap_cstr_casecmp(argv[i], \"None\")) {\n            if (argc != 1) {\n                return \"'None' not allowed with other directives in \"\n                       \"AllowOverrideList\";\n            }\n            return NULL;\n        }\n        else {\n            const command_rec *result = NULL;\n            module *mod = ap_top_module;\n\n            result = ap_find_command_in_modules(argv[i], &mod);\n            if (result == NULL) {\n                ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server,\n                             APLOGNO(00116) \"Discarding unrecognized \"\n                             \"directive `%s' in AllowOverrideList at %s:%d\",\n                             argv[i], cmd->directive->filename,\n                             cmd->directive->line_num);\n                continue;\n            }\n            else if ((result->req_override & (OR_ALL|ACCESS_CONF)) == 0) {\n                ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server,\n                             APLOGNO(02304) \"Discarding directive `%s' not \"\n                             \"allowed in AllowOverrideList at %s:%d\",\n                             argv[i], cmd->directive->filename,\n                             cmd->directive->line_num);\n                continue;\n            }\n            else {\n                apr_table_setn(d->override_list, argv[i], \"1\");\n            }\n        }\n    }\n\n    return NULL;\n}\n\nstatic const char *set_options(cmd_parms *cmd, void *d_, const char *l)\n{\n    core_dir_config *d = d_;\n    allow_options_t opt;\n    int first = 1;\n    int merge = 0;\n    int all_none = 0;\n    char action;\n\n    while (l[0]) {\n        char *w = ap_getword_conf(cmd->temp_pool, &l);\n        action = '\\0';\n\n        if (*w == '+' || *w == '-') {\n            action = *(w++);\n            if (!merge && !first && !all_none) {\n                return \"Either all Options must start with + or -, or no Option may.\";\n            }\n            merge = 1;\n        }\n        else if (first) {\n            d->opts = OPT_NONE;\n        }\n        else if (merge) {\n            return \"Either all Options must start with + or -, or no Option may.\";\n        }\n\n        if (!ap_cstr_casecmp(w, \"Indexes\")) {\n            opt = OPT_INDEXES;\n        }\n        else if (!ap_cstr_casecmp(w, \"Includes\")) {\n            opt = (OPT_INCLUDES | OPT_INC_WITH_EXEC);\n        }\n        else if (!ap_cstr_casecmp(w, \"IncludesNOEXEC\")) {\n            opt = OPT_INCLUDES;\n        }\n        else if (!ap_cstr_casecmp(w, \"FollowSymLinks\")) {\n            opt = OPT_SYM_LINKS;\n        }\n        else if (!ap_cstr_casecmp(w, \"SymLinksIfOwnerMatch\")) {\n            opt = OPT_SYM_OWNER;\n        }\n        else if (!ap_cstr_casecmp(w, \"ExecCGI\")) {\n            opt = OPT_EXECCGI;\n        }\n        else if (!ap_cstr_casecmp(w, \"MultiViews\")) {\n            opt = OPT_MULTI;\n        }\n        else if (!ap_cstr_casecmp(w, \"RunScripts\")) { /* AI backcompat. Yuck */\n            opt = OPT_MULTI|OPT_EXECCGI;\n        }\n        else if (!ap_cstr_casecmp(w, \"None\")) {\n            if (!first) {\n                return \"'Options None' must be the first Option given.\";\n            }\n            else if (merge) { /* Only works since None may not follow any other option. */\n                return \"You may not use 'Options +None' or 'Options -None'.\";\n            }\n            opt = OPT_NONE;\n            all_none = 1;\n        }\n        else if (!ap_cstr_casecmp(w, \"All\")) {\n            if (!first) {\n                return \"'Options All' must be the first option given.\";\n            }\n            else if (merge) { /* Only works since All may not follow any other option. */\n                return \"You may not use 'Options +All' or 'Options -All'.\";\n            }\n            opt = OPT_ALL;\n            all_none = 1;\n        }\n        else {\n            return apr_pstrcat(cmd->pool, \"Illegal option \", w, NULL);\n        }\n\n        if ( (cmd->override_opts & opt) != opt ) {\n            return apr_pstrcat(cmd->pool, \"Option \", w, \" not allowed here\", NULL);\n        }\n        else if (action == '-') {\n            /* we ensure the invariant (d->opts_add & d->opts_remove) == 0 */\n            d->opts_remove |= opt;\n            d->opts_add &= ~opt;\n            d->opts &= ~opt;\n        }\n        else if (action == '+') {\n            d->opts_add |= opt;\n            d->opts_remove &= ~opt;\n            d->opts |= opt;\n        }\n        else {\n            d->opts |= opt;\n        }\n\n        first = 0;\n    }\n\n    return NULL;\n}\n\nstatic const char *set_default_type(cmd_parms *cmd, void *d_,\n                                   const char *arg)\n{\n    if ((ap_cstr_casecmp(arg, \"off\") != 0) && (ap_cstr_casecmp(arg, \"none\") != 0)) {\n        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, APLOGNO(00117)\n              \"Ignoring deprecated use of DefaultType in line %d of %s.\",\n                     cmd->directive->line_num, cmd->directive->filename);\n    }\n\n    return NULL;\n}\n\nstatic const char *set_sethandler(cmd_parms *cmd,\n                                     void *d_,\n                                     const char *arg_)\n{\n    core_dir_config *dirconf = d_;\n    const char *err;\n    dirconf->expr_handler = ap_expr_parse_cmd(cmd, arg_,\n                                          AP_EXPR_FLAG_STRING_RESULT,\n                                          &err, NULL);\n    if (err) {\n        return apr_pstrcat(cmd->pool,\n                \"Can't parse expression : \", err, NULL);\n    }\n    return NULL;\n}\n\n/*\n * Note what data should be used when forming file ETag values.\n * It would be nicer to do this as an ITERATE, but then we couldn't\n * remember the +/- state properly.\n */\nstatic const char *set_etag_bits(cmd_parms *cmd, void *mconfig,\n                                 const char *args_p)\n{\n    core_dir_config *cfg;\n    etag_components_t bit;\n    char action;\n    char *token;\n    const char *args;\n    int valid;\n    int first;\n    int explicit;\n\n    cfg = (core_dir_config *)mconfig;\n\n    args = args_p;\n    first = 1;\n    explicit = 0;\n    while (args[0] != '\\0') {\n        action = '*';\n        bit = ETAG_UNSET;\n        valid = 1;\n        token = ap_getword_conf(cmd->temp_pool, &args);\n        if ((*token == '+') || (*token == '-')) {\n            action = *token;\n            token++;\n        }\n        else {\n            /*\n             * The occurrence of an absolute setting wipes\n             * out any previous relative ones.  The first such\n             * occurrence forgets any inherited ones, too.\n             */\n            if (first) {\n                cfg->etag_bits = ETAG_UNSET;\n                cfg->etag_add = ETAG_UNSET;\n                cfg->etag_remove = ETAG_UNSET;\n                first = 0;\n            }\n        }\n\n        if (ap_cstr_casecmp(token, \"None\") == 0) {\n            if (action != '*') {\n                valid = 0;\n            }\n            else {\n                cfg->etag_bits = bit = ETAG_NONE;\n                explicit = 1;\n            }\n        }\n        else if (ap_cstr_casecmp(token, \"All\") == 0) {\n            if (action != '*') {\n                valid = 0;\n            }\n            else {\n                explicit = 1;\n                cfg->etag_bits = bit = ETAG_ALL;\n            }\n        }\n        else if (ap_cstr_casecmp(token, \"Size\") == 0) {\n            bit = ETAG_SIZE;\n        }\n        else if ((ap_cstr_casecmp(token, \"LMTime\") == 0)\n                 || (ap_cstr_casecmp(token, \"MTime\") == 0)\n                 || (ap_cstr_casecmp(token, \"LastModified\") == 0)) {\n            bit = ETAG_MTIME;\n        }\n        else if (ap_cstr_casecmp(token, \"INode\") == 0) {\n            bit = ETAG_INODE;\n        }\n        else if (ap_cstr_casecmp(token, \"Digest\") == 0) {\n            bit = ETAG_DIGEST;\n        }\n        else {\n            return apr_pstrcat(cmd->pool, \"Unknown keyword '\",\n                               token, \"' for \", cmd->cmd->name,\n                               \" directive\", NULL);\n        }\n\n        if (! valid) {\n            return apr_pstrcat(cmd->pool, cmd->cmd->name, \" keyword '\",\n                               token, \"' cannot be used with '+' or '-'\",\n                               NULL);\n        }\n\n        if (action == '+') {\n            /*\n             * Make sure it's in the 'add' list and absent from the\n             * 'subtract' list.\n             */\n            cfg->etag_add |= bit;\n            cfg->etag_remove &= (~ bit);\n        }\n        else if (action == '-') {\n            cfg->etag_remove |= bit;\n            cfg->etag_add &= (~ bit);\n        }\n        else {\n            /*\n             * Non-relative values wipe out any + or - values\n             * accumulated so far.\n             */\n            cfg->etag_bits |= bit;\n            cfg->etag_add = ETAG_UNSET;\n            cfg->etag_remove = ETAG_UNSET;\n            explicit = 1;\n        }\n    }\n\n    /*\n     * Any setting at all will clear the 'None' and 'Unset' bits.\n     */\n\n    if (cfg->etag_add != ETAG_UNSET) {\n        cfg->etag_add &= (~ ETAG_UNSET);\n    }\n\n    if (cfg->etag_remove != ETAG_UNSET) {\n        cfg->etag_remove &= (~ ETAG_UNSET);\n    }\n\n    if (explicit) {\n        cfg->etag_bits &= (~ ETAG_UNSET);\n\n        if ((cfg->etag_bits & ETAG_NONE) != ETAG_NONE) {\n            cfg->etag_bits &= (~ ETAG_NONE);\n        }\n    }\n\n    return NULL;\n}\n\nstatic const char *set_enable_mmap(cmd_parms *cmd, void *d_,\n                                   const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        d->enable_mmap = ENABLE_MMAP_ON;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        d->enable_mmap = ENABLE_MMAP_OFF;\n    }\n    else {\n        return \"parameter must be 'on' or 'off'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_enable_sendfile(cmd_parms *cmd, void *d_,\n                                   const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        d->enable_sendfile = ENABLE_SENDFILE_ON;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        d->enable_sendfile = ENABLE_SENDFILE_OFF;\n    }\n    else {\n        return \"parameter must be 'on' or 'off'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_read_buf_size(cmd_parms *cmd, void *d_,\n                                     const char *arg)\n{\n    core_dir_config *d = d_;\n    apr_off_t size;\n    char *end;\n\n    if (apr_strtoff(&size, arg, &end, 10)\n            || *end || size < 0 || size > APR_UINT32_MAX)\n        return apr_pstrcat(cmd->pool,\n                           \"parameter must be a number between 0 and \"\n                           APR_STRINGIFY(APR_UINT32_MAX) \"): \",\n                           arg, NULL);\n\n    d->read_buf_size = (apr_size_t)size;\n\n    return NULL;\n}\n\nstatic const char *set_flush_max_threshold(cmd_parms *cmd, void *d_,\n                                           const char *arg)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    apr_off_t size;\n    char *end;\n\n    if (apr_strtoff(&size, arg, &end, 10)\n            || *end || size < 0 || size > APR_UINT32_MAX)\n        return apr_pstrcat(cmd->pool,\n                           \"parameter must be a number between 0 and \"\n                           APR_STRINGIFY(APR_UINT32_MAX) \"): \",\n                           arg, NULL);\n\n    conf->flush_max_threshold = (apr_size_t)size;\n\n    return NULL;\n}\n\nstatic const char *set_flush_max_pipelined(cmd_parms *cmd, void *d_,\n                                           const char *arg)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    apr_off_t num;\n    char *end;\n\n    if (apr_strtoff(&num, arg, &end, 10)\n            || *end || num < -1 || num > APR_INT32_MAX)\n        return apr_pstrcat(cmd->pool,\n                           \"parameter must be a number between -1 and \"\n                           APR_STRINGIFY(APR_INT32_MAX) \": \",\n                           arg, NULL);\n\n    conf->flush_max_pipelined = (apr_int32_t)num;\n\n    return NULL;\n}\n\n/*\n * Report a missing-'>' syntax error.\n */\nstatic char *unclosed_directive(cmd_parms *cmd)\n{\n    return apr_pstrcat(cmd->pool, cmd->cmd->name,\n                       \"> directive missing closing '>'\", NULL);\n}\n\n/*\n * Report a missing args in '<Foo >' syntax error.\n */\nstatic char *missing_container_arg(cmd_parms *cmd)\n{\n    return apr_pstrcat(cmd->pool, cmd->cmd->name,\n                       \"> directive requires additional arguments\", NULL);\n}\n\nAP_CORE_DECLARE_NONSTD(const char *) ap_limit_section(cmd_parms *cmd,\n                                                      void *dummy,\n                                                      const char *arg)\n{\n    const char *endp = ap_strrchr_c(arg, '>');\n    const char *limited_methods;\n    void *tog = cmd->cmd->cmd_data;\n    apr_int64_t limited = 0;\n    apr_int64_t old_limited = cmd->limited;\n    const char *errmsg;\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    limited_methods = apr_pstrmemdup(cmd->temp_pool, arg, endp - arg);\n\n    if (!limited_methods[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    while (limited_methods[0]) {\n        char *method = ap_getword_conf(cmd->temp_pool, &limited_methods);\n        int methnum;\n\n        /* check for builtin or module registered method number */\n        methnum = ap_method_number_of(method);\n\n        if (methnum == M_TRACE && !tog) {\n            return \"TRACE cannot be controlled by <Limit>, see TraceEnable\";\n        }\n        else if (methnum == M_INVALID) {\n            /* method has not been registered yet, but resource restriction\n             * is always checked before method handling, so register it.\n             */\n            if (cmd->pool == cmd->temp_pool) {\n                /* In .htaccess, we can't globally register new methods. */\n                return apr_psprintf(cmd->pool, \"Could not register method '%s' \"\n                                   \"for %s from .htaccess configuration\",\n                                    method, cmd->cmd->name);\n            }\n            methnum = ap_method_register(cmd->pool,\n                                         apr_pstrdup(cmd->pool, method));\n        }\n\n        limited |= (AP_METHOD_BIT << methnum);\n    }\n\n    /* Killing two features with one function,\n     * if (tog == NULL) <Limit>, else <LimitExcept>\n     */\n    limited = tog ? ~limited : limited;\n\n    if (!(old_limited & limited)) {\n        return apr_pstrcat(cmd->pool, cmd->cmd->name,\n                           \"> directive excludes all methods\", NULL);\n    }\n    else if ((old_limited & limited) == old_limited) {\n        return apr_pstrcat(cmd->pool, cmd->cmd->name,\n                           \"> directive specifies methods already excluded\",\n                           NULL);\n    }\n\n    cmd->limited &= limited;\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd, cmd->context);\n\n    cmd->limited = old_limited;\n\n    return errmsg;\n}\n\n/* XXX: Bogus - need to do this differently (at least OS2/Netware suffer\n * the same problem!!!\n * We use this in <DirectoryMatch> and <FilesMatch>, to ensure that\n * people don't get bitten by wrong-cased regex matches\n */\n\n#ifdef WIN32\n#define USE_ICASE AP_REG_ICASE\n#else\n#define USE_ICASE 0\n#endif\n\nstatic const char *dirsection(cmd_parms *cmd, void *mconfig, const char *arg)\n{\n    const char *errmsg;\n    const char *endp = ap_strrchr_c(arg, '>');\n    int old_overrides = cmd->override;\n    char *old_path = cmd->path;\n    core_dir_config *conf;\n    ap_conf_vector_t *new_dir_conf = ap_create_per_dir_config(cmd->pool);\n    ap_regex_t *r = NULL;\n    const command_rec *thiscmd = cmd->cmd;\n\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrndup(cmd->temp_pool, arg, endp - arg);\n\n    if (!arg[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    cmd->path = ap_getword_conf(cmd->pool, &arg);\n    cmd->override = OR_ALL|ACCESS_CONF;\n\n    if (!strcmp(cmd->path, \"~\")) {\n        cmd->path = ap_getword_conf(cmd->pool, &arg);\n        if (!cmd->path)\n            return \"<Directory ~ > block must specify a path\";\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED|USE_ICASE);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n    else if (thiscmd->cmd_data) { /* <DirectoryMatch> */\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED|USE_ICASE);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n    else if (strcmp(cmd->path, \"/\") != 0)\n    {\n        char *newpath;\n\n        /*\n         * Ensure that the pathname is canonical, and append the trailing /\n         */\n        apr_status_t rv = apr_filepath_merge(&newpath, NULL, cmd->path,\n                                             APR_FILEPATH_TRUENAME, cmd->pool);\n        if (rv != APR_SUCCESS && rv != APR_EPATHWILD) {\n            return apr_pstrcat(cmd->pool, \"<Directory \\\"\", cmd->path,\n                               \"\\\"> path is invalid.\", NULL);\n        }\n\n        cmd->path = newpath;\n        if (cmd->path[strlen(cmd->path) - 1] != '/')\n            cmd->path = apr_pstrcat(cmd->pool, cmd->path, \"/\", NULL);\n    }\n\n    /* initialize our config and fetch it */\n    conf = ap_set_config_vectors(cmd->server, new_dir_conf, cmd->path,\n                                 &core_module, cmd->pool);\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd, new_dir_conf);\n    if (errmsg != NULL)\n        return errmsg;\n\n    conf->r = r;\n    conf->d = cmd->path;\n    conf->d_is_fnmatch = (apr_fnmatch_test(conf->d) != 0);\n\n    if (r) {\n        conf->refs = apr_array_make(cmd->pool, 8, sizeof(char *));\n        ap_regname(r, conf->refs, AP_REG_MATCH, 1);\n    }\n\n    /* Make this explicit - the \"/\" root has 0 elements, that is, we\n     * will always merge it, and it will always sort and merge first.\n     * All others are sorted and tested by the number of slashes.\n     */\n    if (strcmp(conf->d, \"/\") == 0)\n        conf->d_components = 0;\n    else\n        conf->d_components = ap_count_dirs(conf->d);\n\n    ap_add_per_dir_conf(cmd->server, new_dir_conf);\n\n    if (*arg != '\\0') {\n        return apr_pstrcat(cmd->pool, \"Multiple \", thiscmd->name,\n                           \"> arguments not (yet) supported.\", NULL);\n    }\n\n    cmd->path = old_path;\n    cmd->override = old_overrides;\n\n    return NULL;\n}\n\nstatic const char *urlsection(cmd_parms *cmd, void *mconfig, const char *arg)\n{\n    const char *errmsg;\n    const char *endp = ap_strrchr_c(arg, '>');\n    int old_overrides = cmd->override;\n    char *old_path = cmd->path;\n    core_dir_config *conf;\n    ap_regex_t *r = NULL;\n    const command_rec *thiscmd = cmd->cmd;\n    ap_conf_vector_t *new_url_conf = ap_create_per_dir_config(cmd->pool);\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrndup(cmd->temp_pool, arg, endp - arg);\n\n    if (!arg[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    cmd->path = ap_getword_conf(cmd->pool, &arg);\n    cmd->override = OR_ALL|ACCESS_CONF;\n\n    if (thiscmd->cmd_data) { /* <LocationMatch> */\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n    else if (!strcmp(cmd->path, \"~\")) {\n        cmd->path = ap_getword_conf(cmd->pool, &arg);\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n\n    /* initialize our config and fetch it */\n    conf = ap_set_config_vectors(cmd->server, new_url_conf, cmd->path,\n                                 &core_module, cmd->pool);\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd, new_url_conf);\n    if (errmsg != NULL)\n        return errmsg;\n\n    conf->d = apr_pstrdup(cmd->pool, cmd->path);     /* No mangling, please */\n    conf->d_is_fnmatch = apr_fnmatch_test(conf->d) != 0;\n    conf->r = r;\n\n    if (r) {\n        conf->refs = apr_array_make(cmd->pool, 8, sizeof(char *));\n        ap_regname(r, conf->refs, AP_REG_MATCH, 1);\n    }\n\n    ap_add_per_url_conf(cmd->server, new_url_conf);\n\n    if (*arg != '\\0') {\n        return apr_pstrcat(cmd->pool, \"Multiple \", thiscmd->name,\n                           \"> arguments not (yet) supported.\", NULL);\n    }\n\n    cmd->path = old_path;\n    cmd->override = old_overrides;\n\n    return NULL;\n}\n\nstatic const char *filesection(cmd_parms *cmd, void *mconfig, const char *arg)\n{\n    const char *errmsg;\n    const char *endp = ap_strrchr_c(arg, '>');\n    int old_overrides = cmd->override;\n    char *old_path = cmd->path;\n    core_dir_config *conf;\n    ap_regex_t *r = NULL;\n    const command_rec *thiscmd = cmd->cmd;\n    ap_conf_vector_t *new_file_conf = ap_create_per_dir_config(cmd->pool);\n    const char *err = ap_check_cmd_context(cmd,\n                                           NOT_IN_LOCATION | NOT_IN_LIMIT);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrndup(cmd->temp_pool, arg, endp - arg);\n\n    if (!arg[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    cmd->path = ap_getword_conf(cmd->pool, &arg);\n    /* Only if not an .htaccess file */\n    if (!old_path) {\n        cmd->override = OR_ALL|ACCESS_CONF;\n    }\n\n    if (thiscmd->cmd_data) { /* <FilesMatch> */\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED|USE_ICASE);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n    else if (!strcmp(cmd->path, \"~\")) {\n        cmd->path = ap_getword_conf(cmd->pool, &arg);\n        r = ap_pregcomp(cmd->pool, cmd->path, AP_REG_EXTENDED|USE_ICASE);\n        if (!r) {\n            return \"Regex could not be compiled\";\n        }\n    }\n    else {\n        char *newpath;\n        /* Ensure that the pathname is canonical, but we\n         * can't test the case/aliases without a fixed path */\n        if (apr_filepath_merge(&newpath, \"\", cmd->path,\n                               0, cmd->pool) != APR_SUCCESS)\n                return apr_pstrcat(cmd->pool, \"<Files \\\"\", cmd->path,\n                               \"\\\"> is invalid.\", NULL);\n        cmd->path = newpath;\n    }\n\n    /* initialize our config and fetch it */\n    conf = ap_set_config_vectors(cmd->server, new_file_conf, cmd->path,\n                                 &core_module, cmd->pool);\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd, new_file_conf);\n    if (errmsg != NULL)\n        return errmsg;\n\n    conf->d = cmd->path;\n    conf->d_is_fnmatch = apr_fnmatch_test(conf->d) != 0;\n    conf->r = r;\n\n    if (r) {\n        conf->refs = apr_array_make(cmd->pool, 8, sizeof(char *));\n        ap_regname(r, conf->refs, AP_REG_MATCH, 1);\n    }\n\n    ap_add_file_conf(cmd->pool, (core_dir_config *)mconfig, new_file_conf);\n\n    if (*arg != '\\0') {\n        return apr_pstrcat(cmd->pool, \"Multiple \", thiscmd->name,\n                           \"> arguments not (yet) supported.\", NULL);\n    }\n\n    cmd->path = old_path;\n    cmd->override = old_overrides;\n\n    return NULL;\n}\n\n#define COND_IF      ((void *)1)\n#define COND_ELSE    ((void *)2)\n#define COND_ELSEIF  ((void *)3)\n\nstatic const char *ifsection(cmd_parms *cmd, void *mconfig, const char *arg)\n{\n    const char *errmsg;\n    const char *endp = ap_strrchr_c(arg, '>');\n    int old_overrides = cmd->override;\n    char *old_path = cmd->path;\n    core_dir_config *conf;\n    const command_rec *thiscmd = cmd->cmd;\n    ap_conf_vector_t *new_if_conf = ap_create_per_dir_config(cmd->pool);\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_LIMIT);\n    const char *condition;\n    const char *expr_err;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrndup(cmd->temp_pool, arg, endp - arg);\n\n    /*\n     * Set a dummy value so that other directives notice that they are inside\n     * a config section.\n     */\n    cmd->path = \"*If\";\n    /* Only if not an .htaccess file */\n    if (!old_path) {\n        cmd->override = OR_ALL|ACCESS_CONF;\n    }\n\n    /* initialize our config and fetch it */\n    conf = ap_set_config_vectors(cmd->server, new_if_conf, cmd->path,\n                                 &core_module, cmd->pool);\n\n    if (cmd->cmd->cmd_data == COND_IF)\n        conf->condition_ifelse = AP_CONDITION_IF;\n    else if (cmd->cmd->cmd_data == COND_ELSEIF)\n        conf->condition_ifelse = AP_CONDITION_ELSEIF;\n    else if (cmd->cmd->cmd_data == COND_ELSE)\n        conf->condition_ifelse = AP_CONDITION_ELSE;\n    else\n        ap_assert(0);\n\n    if (conf->condition_ifelse == AP_CONDITION_ELSE) {\n        if (arg[0])\n            return \"<Else> does not take an argument\";\n    }\n    else {\n        if (!arg[0])\n            return missing_container_arg(cmd);\n        condition = ap_getword_conf(cmd->pool, &arg);\n        conf->condition = ap_expr_parse_cmd(cmd, condition, 0, &expr_err, NULL);\n        if (expr_err)\n            return apr_psprintf(cmd->pool, \"Cannot parse condition clause: %s\",\n                                expr_err);\n    }\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd, new_if_conf);\n    if (errmsg != NULL)\n        return errmsg;\n\n    conf->d = cmd->path;\n    conf->d_is_fnmatch = 0;\n    conf->r = NULL;\n\n    errmsg = ap_add_if_conf(cmd->pool, (core_dir_config *)mconfig, new_if_conf);\n    if (errmsg != NULL)\n        return errmsg;\n\n    if (*arg != '\\0') {\n        return apr_pstrcat(cmd->pool, \"Multiple \", thiscmd->name,\n                           \"> arguments not supported.\", NULL);\n    }\n\n    cmd->path = old_path;\n    cmd->override = old_overrides;\n\n    return NULL;\n}\n\nstatic module *find_module(server_rec *s, const char *name)\n{\n    module *found = ap_find_linked_module(name);\n\n    /* search prelinked stuff */\n    if (!found) {\n        ap_module_symbol_t *current = ap_prelinked_module_symbols;\n\n        for (; current->name; ++current) {\n            if (!strcmp(current->name, name)) {\n                found = current->modp;\n                break;\n            }\n        }\n    }\n\n    /* search dynamic stuff */\n    if (!found) {\n        APR_OPTIONAL_FN_TYPE(ap_find_loaded_module_symbol) *check_symbol =\n            APR_RETRIEVE_OPTIONAL_FN(ap_find_loaded_module_symbol);\n\n        if (check_symbol) {\n            /*\n             * There are two phases where calling ap_find_loaded_module_symbol\n             * is problematic:\n             *\n             * During reading of the config, ap_server_conf is invalid but s\n             * points to the main server config, if passed from cmd->server\n             * of an EXEC_ON_READ directive.\n             *\n             * During config parsing, s may be a virtual host that would cause\n             * a segfault in mod_so if passed to ap_find_loaded_module_symbol,\n             * because mod_so's server config for vhosts is initialized later.\n             * But ap_server_conf is already set at this time.\n             *\n             * Therefore we use s if it is not virtual and ap_server_conf if\n             * s is virtual.\n             */\n            found = check_symbol(s->is_virtual ? ap_server_conf : s, name);\n        }\n    }\n\n    return found;\n}\n\n/* Callback function type used by start_cond_section. */\ntypedef int (*test_cond_section_fn)(cmd_parms *cmd, const char *arg);\n\n/* Implementation of <IfXXXXX>-style conditional sections.  Callback\n * to test condition must be in cmd->info, matching function type\n * test_cond_section_fn. */\nstatic const char *start_cond_section(cmd_parms *cmd, void *mconfig, const char *arg)\n{\n    const char *endp = ap_strrchr_c(arg, '>');\n    int result, not = (arg[0] == '!');\n    test_cond_section_fn testfn = (test_cond_section_fn)cmd->info;\n    const char *arg1;\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrmemdup(cmd->temp_pool, arg, endp - arg);\n\n    if (not) {\n        arg++;\n    }\n\n    arg1 = ap_getword_conf(cmd->temp_pool, &arg);\n\n    if (!arg1[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    result = testfn(cmd, arg1);\n\n    if ((!not && result) || (not && !result)) {\n        ap_directive_t *parent = NULL;\n        ap_directive_t *current = NULL;\n        const char *retval;\n\n        retval = ap_build_cont_config(cmd->pool, cmd->temp_pool, cmd,\n                                      &current, &parent, (char *)cmd->cmd->name);\n        *(ap_directive_t **)mconfig = current;\n        return retval;\n    }\n    else {\n        *(ap_directive_t **)mconfig = NULL;\n        return ap_soak_end_container(cmd, (char *)cmd->cmd->name);\n    }\n}\n\n/* Callback to implement <IfModule> test for start_cond_section. */\nstatic int test_ifmod_section(cmd_parms *cmd, const char *arg)\n{\n    return find_module(cmd->server, arg) != NULL;\n}\n\nAP_DECLARE(int) ap_exists_config_define(const char *name)\n{\n    return ap_array_str_contains(ap_server_config_defines, name);\n}\n\nstatic int test_ifdefine_section(cmd_parms *cmd, const char *arg)\n{\n    return ap_exists_config_define(arg);\n}\n\nstatic int test_iffile_section(cmd_parms *cmd, const char *arg)\n{\n    const char *relative;\n    apr_finfo_t sb;\n\n    /*\n     * At least on Windows, if the path we are testing is not valid (for example\n     * a path on a USB key that is not plugged), 'ap_server_root_relative()' will\n     * return NULL. In such a case, consider that the file is not there and that\n     * the section should be skipped.\n     */\n    relative = ap_server_root_relative(cmd->temp_pool, arg);\n    return (relative &&\n           (apr_stat(&sb, relative, APR_FINFO_TYPE, cmd->temp_pool) == APR_SUCCESS));\n}\n\nstatic int test_ifdirective_section(cmd_parms *cmd, const char *arg)\n{\n    return ap_exists_directive(cmd->temp_pool, arg);\n}\n\nstatic int test_ifsection_section(cmd_parms *cmd, const char *arg)\n{\n    const char *name = apr_pstrcat(cmd->temp_pool, \"<\", arg, NULL);\n    return ap_exists_directive(cmd->temp_pool, name);\n}\n\n/* httpd.conf commands... beginning with the <VirtualHost> business */\n\nstatic const char *virtualhost_section(cmd_parms *cmd, void *dummy,\n                                       const char *arg)\n{\n    server_rec *main_server = cmd->server, *s;\n    const char *errmsg;\n    const char *endp = ap_strrchr_c(arg, '>');\n    apr_pool_t *p = cmd->pool;\n\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n    if (err != NULL) {\n        return err;\n    }\n\n    if (endp == NULL) {\n        return unclosed_directive(cmd);\n    }\n\n    arg = apr_pstrndup(cmd->temp_pool, arg, endp - arg);\n\n    if (!arg[0]) {\n        return missing_container_arg(cmd);\n    }\n\n    /* FIXME: There's another feature waiting to happen here -- since you\n        can now put multiple addresses/names on a single <VirtualHost>\n        you might want to use it to group common definitions and then\n        define other \"subhosts\" with their individual differences.  But\n        personally I'd rather just do it with a macro preprocessor. -djg */\n    if (main_server->is_virtual) {\n        return \"<VirtualHost> doesn't nest!\";\n    }\n\n    errmsg = ap_init_virtual_host(p, arg, main_server, &s);\n    if (errmsg) {\n        return errmsg;\n    }\n\n    s->next = main_server->next;\n    main_server->next = s;\n\n    s->defn_name = cmd->directive->filename;\n    s->defn_line_number = cmd->directive->line_num;\n\n    cmd->server = s;\n\n    errmsg = ap_walk_config(cmd->directive->first_child, cmd,\n                            s->lookup_defaults);\n\n    cmd->server = main_server;\n\n    return errmsg;\n}\n\nstatic const char *set_regex_default_options(cmd_parms *cmd,\n                                             void *dummy,\n                                             const char *arg)\n{\n    const command_rec *thiscmd = cmd->cmd;\n    int cflags, cflag;\n\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n    if (err != NULL) {\n        return err;\n    }\n\n    cflags = ap_regcomp_get_default_cflags();\n    while (*arg) {\n        const char *name = ap_getword_conf(cmd->pool, &arg);\n        int how = 0;\n\n        if (strcasecmp(name, \"none\") == 0) {\n            cflags = 0;\n            continue;\n        }\n\n        if (*name == '+') {\n            name++;\n            how = +1;\n        }\n        else if (*name == '-') {\n            name++;\n            how = -1;\n        }\n\n        cflag = ap_regcomp_default_cflag_by_name(name);\n        if (!cflag) {\n            return apr_psprintf(cmd->pool, \"%s: option '%s' unknown\",\n                                thiscmd->name, name);\n        }\n\n        if (how > 0) {\n            cflags |= cflag;\n        }\n        else if (how < 0) {\n            cflags &= ~cflag;\n        }\n        else {\n            cflags = cflag;\n        }\n    }\n    ap_regcomp_set_default_cflags(cflags);\n\n    return NULL;\n}\n\nstatic const char *set_server_alias(cmd_parms *cmd, void *dummy,\n                                    const char *arg)\n{\n    if (!cmd->server->names) {\n        return \"ServerAlias only used in <VirtualHost>\";\n    }\n\n    while (*arg) {\n        char **item, *name = ap_getword_conf(cmd->pool, &arg);\n\n        if (ap_is_matchexp(name)) {\n            item = (char **)apr_array_push(cmd->server->wild_names);\n        }\n        else {\n            item = (char **)apr_array_push(cmd->server->names);\n        }\n\n        *item = name;\n    }\n\n    return NULL;\n}\n\nstatic const char *set_accf_map(cmd_parms *cmd, void *dummy,\n                                const char *iproto, const char* iaccf)\n{\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    char* proto;\n    char* accf;\n    if (err != NULL) {\n        return err;\n    }\n\n    proto = apr_pstrdup(cmd->pool, iproto);\n    ap_str_tolower(proto);\n    accf = apr_pstrdup(cmd->pool, iaccf);\n    ap_str_tolower(accf);\n    apr_table_setn(conf->accf_map, proto, accf);\n\n    return NULL;\n}\n\nAP_DECLARE(const char*) ap_get_server_protocol(server_rec* s)\n{\n    core_server_config *conf = ap_get_core_module_config(s->module_config);\n    return conf->protocol;\n}\n\nAP_DECLARE(void) ap_set_server_protocol(server_rec* s, const char* proto)\n{\n    core_server_config *conf = ap_get_core_module_config(s->module_config);\n    conf->protocol = proto;\n}\n\nstatic const char *set_protocol(cmd_parms *cmd, void *dummy,\n                                const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    char* proto;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    proto = apr_pstrdup(cmd->pool, arg);\n    ap_str_tolower(proto);\n    conf->protocol = proto;\n\n    return NULL;\n}\n\nstatic const char *set_server_string_slot(cmd_parms *cmd, void *dummy,\n                                          const char *arg)\n{\n    /* This one's pretty generic... */\n\n    int offset = (int)(long)cmd->info;\n    char *struct_ptr = (char *)cmd->server;\n\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    if (err != NULL) {\n        return err;\n    }\n\n    *(const char **)(struct_ptr + offset) = arg;\n    return NULL;\n}\n\n/*\n * The ServerName directive takes one argument with format\n * [scheme://]fully-qualified-domain-name[:port], for instance\n * ServerName www.example.com\n * ServerName www.example.com:80\n * ServerName https://www.example.com:443\n */\n\nstatic const char *server_hostname_port(cmd_parms *cmd, void *dummy, const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    const char *portstr, *part;\n    char *scheme;\n    int port;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if (apr_fnmatch_test(arg))\n        return apr_pstrcat(cmd->temp_pool, \"Invalid ServerName \\\"\", arg,\n                \"\\\" use ServerAlias to set multiple server names.\", NULL);\n\n    part = ap_strstr_c(arg, \"://\");\n\n    if (part) {\n      scheme = apr_pstrndup(cmd->pool, arg, part - arg);\n      ap_str_tolower(scheme);\n      cmd->server->server_scheme = (const char *)scheme;\n      part += 3;\n    } else {\n      part = arg;\n    }\n\n    portstr = ap_strchr_c(part, ':');\n    if (portstr) {\n        cmd->server->server_hostname = apr_pstrndup(cmd->pool, part,\n                                                    portstr - part);\n        portstr++;\n        port = atoi(portstr);\n        if (port <= 0 || port >= 65536) { /* 65536 == 1<<16 */\n            return apr_pstrcat(cmd->temp_pool, \"The port number \\\"\", arg,\n                          \"\\\" is outside the appropriate range \"\n                          \"(i.e., 1..65535).\", NULL);\n        }\n    }\n    else {\n        cmd->server->server_hostname = apr_pstrdup(cmd->pool, part);\n        port = 0;\n    }\n\n    cmd->server->port = port;\n    return NULL;\n}\n\nstatic const char *set_signature_flag(cmd_parms *cmd, void *d_,\n                                      const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"On\") == 0) {\n        d->server_signature = srv_sig_on;\n    }\n    else if (ap_cstr_casecmp(arg, \"Off\") == 0) {\n        d->server_signature = srv_sig_off;\n    }\n    else if (ap_cstr_casecmp(arg, \"EMail\") == 0) {\n        d->server_signature = srv_sig_withmail;\n    }\n    else {\n        return \"ServerSignature: use one of: off | on | email\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_server_root(cmd_parms *cmd, void *dummy,\n                                   const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if ((apr_filepath_merge((char**)&ap_server_root, NULL, arg,\n                            APR_FILEPATH_TRUENAME, cmd->pool) != APR_SUCCESS)\n        || !ap_is_directory(cmd->temp_pool, ap_server_root)) {\n        return \"ServerRoot must be a valid directory\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_runtime_dir(cmd_parms *cmd, void *dummy, const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if ((apr_filepath_merge((char**)&ap_runtime_dir, NULL,\n                            ap_server_root_relative(cmd->temp_pool, arg),\n                            APR_FILEPATH_TRUENAME, cmd->pool) != APR_SUCCESS)\n        || !ap_is_directory(cmd->temp_pool, ap_runtime_dir)) {\n        return \"DefaultRuntimeDir must be a valid directory, absolute or relative to ServerRoot\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_timeout(cmd_parms *cmd, void *dummy, const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    cmd->server->timeout = apr_time_from_sec(atoi(arg));\n    return NULL;\n}\n\nstatic const char *set_allow2f(cmd_parms *cmd, void *d_, const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (0 == ap_cstr_casecmp(arg, \"on\")) {\n        d->allow_encoded_slashes = 1;\n        d->decode_encoded_slashes = 1; /* for compatibility with 2.0 & 2.2 */\n    } else if (0 == ap_cstr_casecmp(arg, \"off\")) {\n        d->allow_encoded_slashes = 0;\n        d->decode_encoded_slashes = 0;\n    } else if (0 == ap_cstr_casecmp(arg, \"nodecode\")) {\n        d->allow_encoded_slashes = 1;\n        d->decode_encoded_slashes = 0;\n    } else {\n        return apr_pstrcat(cmd->pool,\n                           cmd->cmd->name, \" must be On, Off, or NoDecode\",\n                           NULL);\n    }\n    return NULL;\n}\n\nstatic const char *set_hostname_lookups(cmd_parms *cmd, void *d_,\n                                        const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (!ap_cstr_casecmp(arg, \"on\")) {\n        d->hostname_lookups = HOSTNAME_LOOKUP_ON;\n    }\n    else if (!ap_cstr_casecmp(arg, \"off\")) {\n        d->hostname_lookups = HOSTNAME_LOOKUP_OFF;\n    }\n    else if (!ap_cstr_casecmp(arg, \"double\")) {\n        d->hostname_lookups = HOSTNAME_LOOKUP_DOUBLE;\n    }\n    else {\n        return \"parameter must be 'on', 'off', or 'double'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_serverpath(cmd_parms *cmd, void *dummy,\n                                  const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    cmd->server->path = arg;\n    cmd->server->pathlen = (int)strlen(arg);\n    return NULL;\n}\n\nstatic const char *set_content_md5(cmd_parms *cmd, void *d_, int arg)\n{\n    core_dir_config *d = d_;\n\n    d->content_md5 = arg ? AP_CONTENT_MD5_ON : AP_CONTENT_MD5_OFF;\n    return NULL;\n}\n\nstatic const char *set_accept_path_info(cmd_parms *cmd, void *d_, const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        d->accept_path_info = AP_REQ_ACCEPT_PATH_INFO;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        d->accept_path_info = AP_REQ_REJECT_PATH_INFO;\n    }\n    else if (ap_cstr_casecmp(arg, \"default\") == 0) {\n        d->accept_path_info = AP_REQ_DEFAULT_PATH_INFO;\n    }\n    else {\n        return \"AcceptPathInfo must be set to on, off or default\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_use_canonical_name(cmd_parms *cmd, void *d_,\n                                          const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        d->use_canonical_name = USE_CANONICAL_NAME_ON;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        d->use_canonical_name = USE_CANONICAL_NAME_OFF;\n    }\n    else if (ap_cstr_casecmp(arg, \"dns\") == 0) {\n        d->use_canonical_name = USE_CANONICAL_NAME_DNS;\n    }\n    else {\n        return \"parameter must be 'on', 'off', or 'dns'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_use_canonical_phys_port(cmd_parms *cmd, void *d_,\n                                          const char *arg)\n{\n    core_dir_config *d = d_;\n\n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        d->use_canonical_phys_port = USE_CANONICAL_PHYS_PORT_ON;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        d->use_canonical_phys_port = USE_CANONICAL_PHYS_PORT_OFF;\n    }\n    else {\n        return \"parameter must be 'on' or 'off'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *include_config (cmd_parms *cmd, void *dummy,\n                                   const char *name)\n{\n    ap_directive_t *conftree = NULL;\n    const char *conffile, *error;\n    unsigned *recursion;\n    int optional = cmd->cmd->cmd_data ? 1 : 0;\n    void *data;\n\n    /* NOTE: ap_include_sentinel is also used by ap_process_resource_config()\n     * during DUMP_INCLUDES; don't change its type or remove it without updating\n     * the other.\n     */\n    apr_pool_userdata_get(&data, \"ap_include_sentinel\", cmd->pool);\n    if (data) {\n        recursion = data;\n    }\n    else {\n        data = recursion = apr_palloc(cmd->pool, sizeof(*recursion));\n        *recursion = 0;\n        apr_pool_userdata_setn(data, \"ap_include_sentinel\", NULL, cmd->pool);\n    }\n\n    if (++*recursion > AP_MAX_INCLUDE_DEPTH) {\n        *recursion = 0;\n        return apr_psprintf(cmd->pool, \"Exceeded maximum include depth of %u, \"\n                            \"There appears to be a recursion.\",\n                            AP_MAX_INCLUDE_DEPTH);\n    }\n\n    conffile = ap_server_root_relative(cmd->pool, name);\n    if (!conffile) {\n        *recursion = 0;\n        return apr_pstrcat(cmd->pool, \"Invalid Include path \",\n                           name, NULL);\n    }\n\n    if (ap_exists_config_define(\"DUMP_INCLUDES\")) {\n        unsigned *line_number;\n\n        /* NOTE: ap_include_lineno is used by ap_process_resource_config()\n         * during DUMP_INCLUDES; don't change its type or remove it without\n         * updating the other.\n         */\n        apr_pool_userdata_get(&data, \"ap_include_lineno\", cmd->pool);\n        if (data) {\n            line_number = data;\n        } else {\n            data = line_number = apr_palloc(cmd->pool, sizeof(*line_number));\n            apr_pool_userdata_setn(data, \"ap_include_lineno\", NULL, cmd->pool);\n        }\n\n        *line_number = cmd->config_file->line_number;\n    }\n\n    error = ap_process_fnmatch_configs(cmd->server, conffile, &conftree,\n                                       cmd->pool, cmd->temp_pool,\n                                       optional);\n    if (error) {\n        *recursion = 0;\n        return error;\n    }\n\n    *(ap_directive_t **)dummy = conftree;\n\n    /* recursion level done */\n    if (*recursion) {\n        --*recursion;\n    }\n\n    return NULL;\n}\n\nstatic const char *set_loglevel(cmd_parms *cmd, void *config_, const char *arg_)\n{\n    char *level_str;\n    int level;\n    module *module;\n    char *arg = apr_pstrdup(cmd->temp_pool, arg_);\n    struct ap_logconf *log;\n    const char *err;\n\n    if (cmd->path) {\n        core_dir_config *dconf = config_;\n        if (!dconf->log) {\n            dconf->log = ap_new_log_config(cmd->pool, NULL);\n        }\n        log = dconf->log;\n    }\n    else {\n        log = &cmd->server->log;\n    }\n\n    if (arg == NULL)\n        return \"LogLevel requires level keyword or module loglevel specifier\";\n\n    level_str = ap_strrchr(arg, ':');\n\n    if (level_str == NULL) {\n        err = ap_parse_log_level(arg, &log->level);\n        if (err != NULL)\n            return err;\n        ap_reset_module_loglevels(log, APLOG_NO_MODULE);\n        ap_log_error(APLOG_MARK, APLOG_TRACE3, 0, cmd->server,\n                     \"Setting LogLevel for all modules to %s\", arg);\n        return NULL;\n    }\n\n    *level_str++ = '\\0';\n    if (!*level_str) {\n        return apr_psprintf(cmd->temp_pool, \"Module specifier '%s' must be \"\n                            \"followed by a log level keyword\", arg);\n    }\n\n    err = ap_parse_log_level(level_str, &level);\n    if (err != NULL)\n        return apr_psprintf(cmd->temp_pool, \"%s:%s: %s\", arg, level_str, err);\n\n    if ((module = find_module(cmd->server, arg)) == NULL) {\n        char *name = apr_psprintf(cmd->temp_pool, \"%s_module\", arg);\n        ap_log_error(APLOG_MARK, APLOG_TRACE6, 0, cmd->server,\n                     \"Cannot find module '%s', trying '%s'\", arg, name);\n        module = find_module(cmd->server, name);\n    }\n\n    if (module == NULL) {\n        return apr_psprintf(cmd->temp_pool, \"Cannot find module %s\", arg);\n    }\n\n    ap_set_module_loglevel(cmd->pool, log, module->module_index, level);\n    ap_log_error(APLOG_MARK, APLOG_TRACE3, 0, cmd->server,\n                 \"Setting LogLevel for module %s to %s\", module->name,\n                 level_str);\n\n    return NULL;\n}\n\nAP_DECLARE(const char *) ap_psignature(const char *prefix, request_rec *r)\n{\n    char sport[20];\n    core_dir_config *conf;\n\n    conf = (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n    if ((conf->server_signature == srv_sig_off)\n            || (conf->server_signature == srv_sig_unset)) {\n        return \"\";\n    }\n\n    apr_snprintf(sport, sizeof sport, \"%u\", (unsigned) ap_get_server_port(r));\n\n    if (conf->server_signature == srv_sig_withmail) {\n        return apr_pstrcat(r->pool, prefix, \"<address>\",\n                           ap_get_server_banner(),\n                           \" Server at <a href=\\\"\",\n                           ap_is_url(r->server->server_admin) ? \"\" : \"mailto:\",\n                           ap_escape_html(r->pool, r->server->server_admin),\n                           \"\\\">\",\n                           ap_escape_html(r->pool, ap_get_server_name(r)),\n                           \"</a> Port \", sport,\n                           \"</address>\\n\", NULL);\n    }\n\n    return apr_pstrcat(r->pool, prefix, \"<address>\", ap_get_server_banner(),\n                       \" Server at \",\n                       ap_escape_html(r->pool, ap_get_server_name(r)),\n                       \" Port \", sport,\n                       \"</address>\\n\", NULL);\n}\n\n/*\n * Handle a request to include the server's OS platform in the Server\n * response header field (the ServerTokens directive).  Unfortunately\n * this requires a new global in order to communicate the setting back to\n * http_main so it can insert the information in the right place in the\n * string.\n */\n\nstatic char *server_banner = NULL;\nstatic int banner_locked = 0;\nstatic const char *server_description = NULL;\n\nenum server_token_type {\n    SrvTk_MAJOR,         /* eg: Apache/2 */\n    SrvTk_MINOR,         /* eg. Apache/2.0 */\n    SrvTk_MINIMAL,       /* eg: Apache/2.0.41 */\n    SrvTk_OS,            /* eg: Apache/2.0.41 (UNIX) */\n    SrvTk_FULL,          /* eg: Apache/2.0.41 (UNIX) PHP/4.2.2 FooBar/1.2b */\n    SrvTk_PRODUCT_ONLY   /* eg: Apache */\n};\nstatic enum server_token_type ap_server_tokens = SrvTk_FULL;\n\nstatic apr_status_t reset_banner(void *dummy)\n{\n    banner_locked = 0;\n    ap_server_tokens = SrvTk_FULL;\n    server_banner = NULL;\n    server_description = NULL;\n    return APR_SUCCESS;\n}\n\nAP_DECLARE(void) ap_get_server_revision(ap_version_t *version)\n{\n    version->major = AP_SERVER_MAJORVERSION_NUMBER;\n    version->minor = AP_SERVER_MINORVERSION_NUMBER;\n    version->patch = AP_SERVER_PATCHLEVEL_NUMBER;\n    version->add_string = AP_SERVER_ADD_STRING;\n}\n\nAP_DECLARE(const char *) ap_get_server_description(void)\n{\n    return server_description ? server_description :\n        AP_SERVER_BASEVERSION \" (\" PLATFORM \")\";\n}\n\nAP_DECLARE(const char *) ap_get_server_banner(void)\n{\n    return server_banner ? server_banner : AP_SERVER_BASEVERSION;\n}\n\nAP_DECLARE(void) ap_add_version_component(apr_pool_t *pconf, const char *component)\n{\n    if (! banner_locked) {\n        /*\n         * If the version string is null, register our cleanup to reset the\n         * pointer on pool destruction. We also know that, if NULL,\n         * we are adding the original SERVER_BASEVERSION string.\n         */\n        if (server_banner == NULL) {\n            apr_pool_cleanup_register(pconf, NULL, reset_banner,\n                                      apr_pool_cleanup_null);\n            server_banner = apr_pstrdup(pconf, component);\n        }\n        else {\n            /*\n             * Tack the given component identifier to the end of\n             * the existing string.\n             */\n            server_banner = apr_pstrcat(pconf, server_banner, \" \",\n                                        component, NULL);\n        }\n    }\n    server_description = apr_pstrcat(pconf, server_description, \" \",\n                                     component, NULL);\n}\n\n/*\n * This routine adds the real server base identity to the banner string,\n * and then locks out changes until the next reconfig.\n */\nstatic void set_banner(apr_pool_t *pconf)\n{\n    if (ap_server_tokens == SrvTk_PRODUCT_ONLY) {\n        ap_add_version_component(pconf, AP_SERVER_BASEPRODUCT);\n    }\n    else if (ap_server_tokens == SrvTk_MINIMAL) {\n        ap_add_version_component(pconf, AP_SERVER_BASEVERSION);\n    }\n    else if (ap_server_tokens == SrvTk_MINOR) {\n        ap_add_version_component(pconf, AP_SERVER_BASEPRODUCT \"/\" AP_SERVER_MINORREVISION);\n    }\n    else if (ap_server_tokens == SrvTk_MAJOR) {\n        ap_add_version_component(pconf, AP_SERVER_BASEPRODUCT \"/\" AP_SERVER_MAJORVERSION);\n    }\n    else {\n        ap_add_version_component(pconf, AP_SERVER_BASEVERSION \" (\" PLATFORM \")\");\n    }\n\n    /*\n     * Lock the server_banner string if we're not displaying\n     * the full set of tokens\n     */\n    if (ap_server_tokens != SrvTk_FULL) {\n        banner_locked++;\n    }\n    server_description = AP_SERVER_BASEVERSION \" (\" PLATFORM \")\";\n}\n\nstatic const char *set_serv_tokens(cmd_parms *cmd, void *dummy,\n                                   const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if (!ap_cstr_casecmp(arg, \"OS\")) {\n        ap_server_tokens = SrvTk_OS;\n    }\n    else if (!ap_cstr_casecmp(arg, \"Min\") || !ap_cstr_casecmp(arg, \"Minimal\")) {\n        ap_server_tokens = SrvTk_MINIMAL;\n    }\n    else if (!ap_cstr_casecmp(arg, \"Major\")) {\n        ap_server_tokens = SrvTk_MAJOR;\n    }\n    else if (!ap_cstr_casecmp(arg, \"Minor\") ) {\n        ap_server_tokens = SrvTk_MINOR;\n    }\n    else if (!ap_cstr_casecmp(arg, \"Prod\") || !ap_cstr_casecmp(arg, \"ProductOnly\")) {\n        ap_server_tokens = SrvTk_PRODUCT_ONLY;\n    }\n    else if (!ap_cstr_casecmp(arg, \"Full\")) {\n        ap_server_tokens = SrvTk_FULL;\n    }\n    else {\n        return \"ServerTokens takes 1 argument: 'Prod(uctOnly)', 'Major', 'Minor', 'Min(imal)', 'OS', or 'Full'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_limit_req_line(cmd_parms *cmd, void *dummy,\n                                      const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    int lim;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    lim = atoi(arg);\n    if (lim < 0) {\n        return apr_pstrcat(cmd->temp_pool, \"LimitRequestLine \\\"\", arg,\n                           \"\\\" must be a non-negative integer\", NULL);\n    }\n\n    cmd->server->limit_req_line = lim;\n    return NULL;\n}\n\nstatic const char *set_limit_req_fieldsize(cmd_parms *cmd, void *dummy,\n                                           const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    int lim;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    lim = atoi(arg);\n    if (lim < 0) {\n        return apr_pstrcat(cmd->temp_pool, \"LimitRequestFieldsize \\\"\", arg,\n                          \"\\\" must be a non-negative integer\",\n                          NULL);\n    }\n\n    cmd->server->limit_req_fieldsize = lim;\n    return NULL;\n}\n\nstatic const char *set_limit_req_fields(cmd_parms *cmd, void *dummy,\n                                        const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    int lim;\n\n    if (err != NULL) {\n        return err;\n    }\n\n    lim = atoi(arg);\n    if (lim < 0) {\n        return apr_pstrcat(cmd->temp_pool, \"LimitRequestFields \\\"\", arg,\n                           \"\\\" must be a non-negative integer (0 = no limit)\",\n                           NULL);\n    }\n\n    cmd->server->limit_req_fields = lim;\n    return NULL;\n}\n\nstatic const char *set_limit_req_body(cmd_parms *cmd, void *conf_,\n                                      const char *arg)\n{\n    core_dir_config *conf = conf_;\n    char *errp;\n\n    if (APR_SUCCESS != apr_strtoff(&conf->limit_req_body, arg, &errp, 10)) {\n        return \"LimitRequestBody argument is not parsable.\";\n    }\n    if (*errp || conf->limit_req_body < 0) {\n        return \"LimitRequestBody requires a non-negative integer.\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_limit_xml_req_body(cmd_parms *cmd, void *conf_,\n                                          const char *arg)\n{\n    core_dir_config *conf = conf_;\n\n    conf->limit_xml_body = atol(arg);\n    if (conf->limit_xml_body < 0)\n        return \"LimitXMLRequestBody requires a non-negative integer.\";\n\n    return NULL;\n}\n\nstatic const char *set_max_ranges(cmd_parms *cmd, void *conf_, const char *arg)\n{\n    core_dir_config *conf = conf_;\n    int val = 0;\n\n    if (!ap_cstr_casecmp(arg, \"none\")) {\n        val = AP_MAXRANGES_NORANGES;\n    }\n    else if (!ap_cstr_casecmp(arg, \"default\")) {\n        val = AP_MAXRANGES_DEFAULT;\n    }\n    else if (!ap_cstr_casecmp(arg, \"unlimited\")) {\n        val = AP_MAXRANGES_UNLIMITED;\n    }\n    else {\n        val = atoi(arg);\n        if (val <= 0)\n            return \"MaxRanges requires 'none', 'default', 'unlimited' or \"\n                   \"a positive integer\";\n    }\n\n    conf->max_ranges = val;\n\n    return NULL;\n}\n\nstatic const char *set_max_overlaps(cmd_parms *cmd, void *conf_, const char *arg)\n{\n    core_dir_config *conf = conf_;\n    int val = 0;\n\n    if (!ap_cstr_casecmp(arg, \"none\")) {\n        val = AP_MAXRANGES_NORANGES;\n    }\n    else if (!ap_cstr_casecmp(arg, \"default\")) {\n        val = AP_MAXRANGES_DEFAULT;\n    }\n    else if (!ap_cstr_casecmp(arg, \"unlimited\")) {\n        val = AP_MAXRANGES_UNLIMITED;\n    }\n    else {\n        val = atoi(arg);\n        if (val <= 0)\n            return \"MaxRangeOverlaps requires 'none', 'default', 'unlimited' or \"\n            \"a positive integer\";\n    }\n\n    conf->max_overlaps = val;\n\n    return NULL;\n}\n\nstatic const char *set_max_reversals(cmd_parms *cmd, void *conf_, const char *arg)\n{\n    core_dir_config *conf = conf_;\n    int val = 0;\n\n    if (!ap_cstr_casecmp(arg, \"none\")) {\n        val = AP_MAXRANGES_NORANGES;\n    }\n    else if (!ap_cstr_casecmp(arg, \"default\")) {\n        val = AP_MAXRANGES_DEFAULT;\n    }\n    else if (!ap_cstr_casecmp(arg, \"unlimited\")) {\n        val = AP_MAXRANGES_UNLIMITED;\n    }\n    else {\n        val = atoi(arg);\n        if (val <= 0)\n            return \"MaxRangeReversals requires 'none', 'default', 'unlimited' or \"\n            \"a positive integer\";\n    }\n\n    conf->max_reversals = val;\n\n    return NULL;\n}\n\nAP_DECLARE(apr_size_t) ap_get_limit_xml_body(const request_rec *r)\n{\n    core_dir_config *conf;\n\n    conf = ap_get_core_module_config(r->per_dir_config);\n    if (conf->limit_xml_body == AP_LIMIT_UNSET)\n        return AP_DEFAULT_LIMIT_XML_BODY;\n\n    return (apr_size_t)conf->limit_xml_body;\n}\n\n#if !defined (RLIMIT_CPU) || !(defined (RLIMIT_DATA) || defined (RLIMIT_VMEM) || defined(RLIMIT_AS)) || !defined (RLIMIT_NPROC)\nstatic const char *no_set_limit(cmd_parms *cmd, void *conf_,\n                                const char *arg, const char *arg2)\n{\n    ap_log_error(APLOG_MARK, APLOG_ERR, 0, cmd->server, APLOGNO(00118)\n                \"%s not supported on this platform\", cmd->cmd->name);\n\n    return NULL;\n}\n#endif\n\n#ifdef RLIMIT_CPU\nstatic const char *set_limit_cpu(cmd_parms *cmd, void *conf_,\n                                 const char *arg, const char *arg2)\n{\n    core_dir_config *conf = conf_;\n\n    ap_unixd_set_rlimit(cmd, &conf->limit_cpu, arg, arg2, RLIMIT_CPU);\n    return NULL;\n}\n#endif\n\n#if defined (RLIMIT_DATA) || defined (RLIMIT_VMEM) || defined(RLIMIT_AS)\nstatic const char *set_limit_mem(cmd_parms *cmd, void *conf_,\n                                 const char *arg, const char * arg2)\n{\n    core_dir_config *conf = conf_;\n\n#if defined(RLIMIT_AS)\n    ap_unixd_set_rlimit(cmd, &conf->limit_mem, arg, arg2 ,RLIMIT_AS);\n#elif defined(RLIMIT_DATA)\n    ap_unixd_set_rlimit(cmd, &conf->limit_mem, arg, arg2, RLIMIT_DATA);\n#elif defined(RLIMIT_VMEM)\n    ap_unixd_set_rlimit(cmd, &conf->limit_mem, arg, arg2, RLIMIT_VMEM);\n#endif\n\n    return NULL;\n}\n#endif\n\n#ifdef RLIMIT_NPROC\nstatic const char *set_limit_nproc(cmd_parms *cmd, void *conf_,\n                                   const char *arg, const char * arg2)\n{\n    core_dir_config *conf = conf_;\n\n    ap_unixd_set_rlimit(cmd, &conf->limit_nproc, arg, arg2, RLIMIT_NPROC);\n    return NULL;\n}\n#endif\n\nstatic const char *set_recursion_limit(cmd_parms *cmd, void *dummy,\n                                       const char *arg1, const char *arg2)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n    int limit = atoi(arg1);\n\n    if (limit <= 0) {\n        return \"The recursion limit must be greater than zero.\";\n    }\n    if (limit < 4) {\n        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, APLOGNO(00119)\n                     \"Limiting internal redirects to very low numbers may \"\n                     \"cause normal requests to fail.\");\n    }\n\n    conf->redirect_limit = limit;\n\n    if (arg2) {\n        limit = atoi(arg2);\n\n        if (limit <= 0) {\n            return \"The recursion limit must be greater than zero.\";\n        }\n        if (limit < 4) {\n            ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, APLOGNO(00120)\n                         \"Limiting the subrequest depth to a very low level may\"\n                         \" cause normal requests to fail.\");\n        }\n    }\n\n    conf->subreq_limit = limit;\n\n    return NULL;\n}\n\nstatic void log_backtrace(const request_rec *r)\n{\n    const request_rec *top = r;\n\n    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00121)\n                  \"r->uri = %s\", r->uri ? r->uri : \"(unexpectedly NULL)\");\n\n    while (top && (top->prev || top->main)) {\n        if (top->prev) {\n            top = top->prev;\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00122)\n                          \"redirected from r->uri = %s\",\n                          top->uri ? top->uri : \"(unexpectedly NULL)\");\n        }\n\n        if (!top->prev && top->main) {\n            top = top->main;\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00123)\n                          \"subrequested from r->uri = %s\",\n                          top->uri ? top->uri : \"(unexpectedly NULL)\");\n        }\n    }\n}\n\n/*\n * check whether redirect limit is reached\n */\nAP_DECLARE(int) ap_is_recursion_limit_exceeded(const request_rec *r)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(r->server->module_config);\n    const request_rec *top = r;\n    int redirects = 0, subreqs = 0;\n    int rlimit = conf->redirect_limit\n                 ? conf->redirect_limit\n                 : AP_DEFAULT_MAX_INTERNAL_REDIRECTS;\n    int slimit = conf->subreq_limit\n                 ? conf->subreq_limit\n                 : AP_DEFAULT_MAX_SUBREQ_DEPTH;\n\n\n    while (top->prev || top->main) {\n        if (top->prev) {\n            if (++redirects >= rlimit) {\n                /* uuh, too much. */\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00124)\n                              \"Request exceeded the limit of %d internal \"\n                              \"redirects due to probable configuration error. \"\n                              \"Use 'LimitInternalRecursion' to increase the \"\n                              \"limit if necessary. Use 'LogLevel debug' to get \"\n                              \"a backtrace.\", rlimit);\n\n                /* post backtrace */\n                log_backtrace(r);\n\n                /* return failure */\n                return 1;\n            }\n\n            top = top->prev;\n        }\n\n        if (!top->prev && top->main) {\n            if (++subreqs >= slimit) {\n                /* uuh, too much. */\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00125)\n                              \"Request exceeded the limit of %d subrequest \"\n                              \"nesting levels due to probable configuration \"\n                              \"error. Use 'LimitInternalRecursion' to increase \"\n                              \"the limit if necessary. Use 'LogLevel debug' to \"\n                              \"get a backtrace.\", slimit);\n\n                /* post backtrace */\n                log_backtrace(r);\n\n                /* return failure */\n                return 1;\n            }\n\n            top = top->main;\n        }\n    }\n\n    /* recursion state: ok */\n    return 0;\n}\n\nstatic const char *set_trace_enable(cmd_parms *cmd, void *dummy,\n                                    const char *arg1)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n\n    if (ap_cstr_casecmp(arg1, \"on\") == 0) {\n        conf->trace_enable = AP_TRACE_ENABLE;\n    }\n    else if (ap_cstr_casecmp(arg1, \"off\") == 0) {\n        conf->trace_enable = AP_TRACE_DISABLE;\n    }\n    else if (ap_cstr_casecmp(arg1, \"extended\") == 0) {\n        conf->trace_enable = AP_TRACE_EXTENDED;\n    }\n    else {\n        return \"TraceEnable must be one of 'on', 'off', or 'extended'\";\n    }\n\n    return NULL;\n}\n\nstatic const char *set_protocols(cmd_parms *cmd, void *dummy,\n                                 const char *arg)\n{\n    core_server_config *conf =\n    ap_get_core_module_config(cmd->server->module_config);\n    const char **np;\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n\n    if (err) {\n        return err;\n    }\n    \n    np = (const char **)apr_array_push(conf->protocols);\n    *np = arg;\n\n    return NULL;\n}\n\nstatic const char *set_protocols_honor_order(cmd_parms *cmd, void *dummy,\n                                             const char *arg)\n{\n    core_server_config *conf =\n    ap_get_core_module_config(cmd->server->module_config);\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_CONTEXT);\n    \n    if (err) {\n        return err;\n    }\n    \n    if (ap_cstr_casecmp(arg, \"on\") == 0) {\n        conf->protocols_honor_order = 1;\n    }\n    else if (ap_cstr_casecmp(arg, \"off\") == 0) {\n        conf->protocols_honor_order = 0;\n    }\n    else {\n        return \"ProtocolsHonorOrder must be 'on' or 'off'\";\n    }\n    \n    return NULL;\n}\n\nstatic const char *set_http_protocol_options(cmd_parms *cmd, void *dummy,\n                                             const char *arg)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n\n    if (strcasecmp(arg, \"allow0.9\") == 0)\n        conf->http09_enable |= AP_HTTP09_ENABLE;\n    else if (strcasecmp(arg, \"require1.0\") == 0)\n        conf->http09_enable |= AP_HTTP09_DISABLE;\n    else if (strcasecmp(arg, \"strict\") == 0)\n        conf->http_conformance |= AP_HTTP_CONFORMANCE_STRICT;\n    else if (strcasecmp(arg, \"unsafe\") == 0)\n        conf->http_conformance |= AP_HTTP_CONFORMANCE_UNSAFE;\n    else if (strcasecmp(arg, \"registeredmethods\") == 0)\n        conf->http_methods |= AP_HTTP_METHODS_REGISTERED;\n    else if (strcasecmp(arg, \"lenientmethods\") == 0)\n        conf->http_methods |= AP_HTTP_METHODS_LENIENT;\n    else\n        return \"HttpProtocolOptions accepts \"\n               \"'Unsafe' or 'Strict' (default), \"\n               \"'RegisteredMethods' or 'LenientMethods' (default), and \"\n               \"'Require1.0' or 'Allow0.9' (default)\";\n\n    if ((conf->http09_enable & AP_HTTP09_ENABLE)\n            && (conf->http09_enable & AP_HTTP09_DISABLE))\n        return \"HttpProtocolOptions 'Allow0.9' and 'Require1.0'\"\n               \" are mutually exclusive\";\n\n    if ((conf->http_conformance & AP_HTTP_CONFORMANCE_STRICT)\n            && (conf->http_conformance & AP_HTTP_CONFORMANCE_UNSAFE))\n        return \"HttpProtocolOptions 'Strict' and 'Unsafe'\"\n               \" are mutually exclusive\";\n\n    if ((conf->http_methods & AP_HTTP_METHODS_REGISTERED)\n            && (conf->http_methods & AP_HTTP_METHODS_LENIENT))\n        return \"HttpProtocolOptions 'RegisteredMethods' and 'LenientMethods'\"\n               \" are mutually exclusive\";\n\n    return NULL;\n}\n\nstatic const char *set_http_method(cmd_parms *cmd, void *conf, const char *arg)\n{\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n    if (err != NULL)\n        return err;\n    ap_method_register(cmd->pool, arg);\n    return NULL;\n}\n\nstatic apr_hash_t *errorlog_hash;\n\nstatic int log_constant_item(const ap_errorlog_info *info, const char *arg,\n                             char *buf, int buflen)\n{\n    char *end = apr_cpystrn(buf, arg, buflen);\n    return end - buf;\n}\n\nstatic char *parse_errorlog_misc_string(apr_pool_t *p,\n                                        ap_errorlog_format_item *it,\n                                        const char **sa)\n{\n    const char *s;\n    char scratch[MAX_STRING_LEN];\n    char *d = scratch;\n    /*\n     * non-leading white space terminates this string to allow the next field\n     * separator to be inserted\n     */\n    int at_start = 1;\n\n    it->func = log_constant_item;\n    s = *sa;\n\n    while (*s && *s != '%' && (*s != ' ' || at_start) && d < scratch + MAX_STRING_LEN) {\n        if (*s != '\\\\') {\n            if (*s != ' ') {\n                at_start = 0;\n            }\n            *d++ = *s++;\n        }\n        else {\n            s++;\n            switch (*s) {\n            case 'r':\n                *d++ = '\\r';\n                s++;\n                break;\n            case 'n':\n                *d++ = '\\n';\n                s++;\n                break;\n            case 't':\n                *d++ = '\\t';\n                s++;\n                break;\n            case '\\0':\n                /* handle end of string */\n                *d++ = '\\\\';\n                break;\n            default:\n                /* copy next char verbatim */\n                *d++ = *s++;\n                break;\n            }\n        }\n    }\n    *d = '\\0';\n    it->arg = apr_pstrdup(p, scratch);\n\n    *sa = s;\n    return NULL;\n}\n\nstatic char *parse_errorlog_item(apr_pool_t *p, ap_errorlog_format_item *it,\n                                 const char **sa)\n{\n    const char *s = *sa;\n    ap_errorlog_handler *handler;\n    int i;\n\n    if (*s != '%') {\n        if (*s == ' ') {\n            it->flags |= AP_ERRORLOG_FLAG_FIELD_SEP;\n        }\n        return parse_errorlog_misc_string(p, it, sa);\n    }\n\n    ++s;\n\n    if (*s == ' ') {\n        /* percent-space (% ) is a field separator */\n        it->flags |= AP_ERRORLOG_FLAG_FIELD_SEP;\n        *sa = ++s;\n        /* recurse */\n        return parse_errorlog_item(p, it, sa);\n    }\n    else if (*s == '%') {\n        it->arg = \"%\";\n        it->func = log_constant_item;\n        *sa = ++s;\n        return NULL;\n    }\n\n    while (*s) {\n        switch (*s) {\n        case '{':\n            ++s;\n            it->arg = ap_getword(p, &s, '}');\n            break;\n        case '+':\n            ++s;\n            it->flags |= AP_ERRORLOG_FLAG_REQUIRED;\n            break;\n        case '-':\n            ++s;\n            it->flags |= AP_ERRORLOG_FLAG_NULL_AS_HYPHEN;\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            i = *s - '0';\n            while (apr_isdigit(*++s))\n                i = i * 10 + (*s) - '0';\n            it->min_loglevel = i;\n            break;\n        case 'M':\n            it->func = NULL;\n            it->flags |= AP_ERRORLOG_FLAG_MESSAGE;\n            *sa = ++s;\n            return NULL;\n        default:\n            handler = (ap_errorlog_handler *)apr_hash_get(errorlog_hash, s, 1);\n            if (!handler) {\n                char dummy[2];\n\n                dummy[0] = *s;\n                dummy[1] = '\\0';\n                return apr_pstrcat(p, \"Unrecognized error log format directive %\",\n                               dummy, NULL);\n            }\n            it->func = handler->func;\n            *sa = ++s;\n            return NULL;\n        }\n    }\n\n    return \"Ran off end of error log format parsing args to some directive\";\n}\n\nstatic apr_array_header_t *parse_errorlog_string(apr_pool_t *p,\n                                                 const char *s,\n                                                 const char **err,\n                                                 int is_main_fmt)\n{\n    apr_array_header_t *a = apr_array_make(p, 30,\n                                           sizeof(ap_errorlog_format_item));\n    char *res;\n    int seen_msg_fmt = 0;\n\n    while (s && *s) {\n        ap_errorlog_format_item *item =\n            (ap_errorlog_format_item *)apr_array_push(a);\n        memset(item, 0, sizeof(*item));\n        res = parse_errorlog_item(p, item, &s);\n        if (res) {\n            *err = res;\n            return NULL;\n        }\n        if (item->flags & AP_ERRORLOG_FLAG_MESSAGE) {\n            if (!is_main_fmt) {\n                *err = \"%M cannot be used in once-per-request or \"\n                       \"once-per-connection formats\";\n                return NULL;\n            }\n            seen_msg_fmt = 1;\n        }\n        if (is_main_fmt && item->flags & AP_ERRORLOG_FLAG_REQUIRED) {\n            *err = \"The '+' flag cannot be used in the main error log format\";\n            return NULL;\n        }\n        if (!is_main_fmt && item->min_loglevel) {\n            *err = \"The loglevel cannot be used as a condition in \"\n                   \"once-per-request or once-per-connection formats\";\n            return NULL;\n        }\n        if (item->min_loglevel > APLOG_TRACE8) {\n            *err = \"The specified loglevel modifier is out of range\";\n            return NULL;\n        }\n    }\n\n    if (is_main_fmt && !seen_msg_fmt) {\n        *err = \"main ErrorLogFormat must contain message format string '%M'\";\n        return NULL;\n    }\n\n    return a;\n}\n\nstatic const char *set_errorlog_format(cmd_parms *cmd, void *dummy,\n                                       const char *arg1, const char *arg2)\n{\n    const char *err_string = NULL;\n    core_server_config *conf =\n        ap_get_core_module_config(cmd->server->module_config);\n\n    if (!arg2) {\n        conf->error_log_format = parse_errorlog_string(cmd->pool, arg1,\n                                                       &err_string, 1);\n    }\n    else if (!ap_cstr_casecmp(arg1, \"connection\")) {\n        if (!conf->error_log_conn) {\n            conf->error_log_conn = apr_array_make(cmd->pool, 5,\n                                                  sizeof(apr_array_header_t *));\n        }\n\n        if (*arg2) {\n            apr_array_header_t **e;\n            e = (apr_array_header_t **) apr_array_push(conf->error_log_conn);\n            *e = parse_errorlog_string(cmd->pool, arg2, &err_string, 0);\n        }\n    }\n    else if (!ap_cstr_casecmp(arg1, \"request\")) {\n        if (!conf->error_log_req) {\n            conf->error_log_req = apr_array_make(cmd->pool, 5,\n                                                 sizeof(apr_array_header_t *));\n        }\n\n        if (*arg2) {\n            apr_array_header_t **e;\n            e = (apr_array_header_t **) apr_array_push(conf->error_log_req);\n            *e = parse_errorlog_string(cmd->pool, arg2, &err_string, 0);\n        }\n    }\n    else {\n        err_string = \"ErrorLogFormat type must be one of request, connection\";\n    }\n\n    return err_string;\n}\n\nAP_DECLARE(void) ap_register_errorlog_handler(apr_pool_t *p, char *tag,\n                                              ap_errorlog_handler_fn_t *handler,\n                                              int flags)\n{\n    ap_errorlog_handler *log_struct = apr_palloc(p, sizeof(*log_struct));\n    log_struct->func = handler;\n    log_struct->flags = flags;\n\n    apr_hash_set(errorlog_hash, tag, 1, (const void *)log_struct);\n}\n\n\nstatic const char *set_merge_trailers(cmd_parms *cmd, void *dummy, int arg)\n{\n    core_server_config *conf = ap_get_module_config(cmd->server->module_config,\n                                                    &core_module);\n    conf->merge_trailers = (arg ? AP_MERGE_TRAILERS_ENABLE :\n            AP_MERGE_TRAILERS_DISABLE);\n\n    return NULL;\n}\n\n/* Note --- ErrorDocument will now work from .htaccess files.\n * The AllowOverride of Fileinfo allows webmasters to turn it off\n */\n\nstatic const command_rec core_cmds[] = {\n\n/* Old access config file commands */\n\nAP_INIT_RAW_ARGS(\"<Directory\", dirsection, NULL, RSRC_CONF,\n  \"Container for directives affecting resources located in the specified \"\n  \"directories\"),\nAP_INIT_RAW_ARGS(\"<Location\", urlsection, NULL, RSRC_CONF,\n  \"Container for directives affecting resources accessed through the \"\n  \"specified URL paths\"),\nAP_INIT_RAW_ARGS(\"<VirtualHost\", virtualhost_section, NULL, RSRC_CONF,\n  \"Container to map directives to a particular virtual host, takes one or \"\n  \"more host addresses\"),\nAP_INIT_RAW_ARGS(\"<Files\", filesection, NULL, OR_ALL,\n  \"Container for directives affecting files matching specified patterns\"),\nAP_INIT_RAW_ARGS(\"<Limit\", ap_limit_section, NULL, OR_LIMIT | OR_AUTHCFG,\n  \"Container for authentication directives when accessed using specified HTTP \"\n  \"methods\"),\nAP_INIT_RAW_ARGS(\"<LimitExcept\", ap_limit_section, (void*)1,\n                 OR_LIMIT | OR_AUTHCFG,\n  \"Container for authentication directives to be applied when any HTTP \"\n  \"method other than those specified is used to access the resource\"),\nAP_INIT_RAW_ARGS(\"<IfModule\", start_cond_section, (void *)test_ifmod_section,\n              EXEC_ON_READ | OR_ALL,\n  \"Container for directives based on existence of specified modules\"),\nAP_INIT_RAW_ARGS(\"<IfDefine\", start_cond_section, (void *)test_ifdefine_section,\n              EXEC_ON_READ | OR_ALL,\n  \"Container for directives based on existence of command line defines\"),\nAP_INIT_RAW_ARGS(\"<IfFile\", start_cond_section, (void *)test_iffile_section,\n              EXEC_ON_READ | OR_ALL,\n  \"Container for directives based on existence of files on disk\"),\nAP_INIT_RAW_ARGS(\"<IfDirective\", start_cond_section, (void *)test_ifdirective_section,\n              EXEC_ON_READ | OR_ALL,\n  \"Container for directives based on existence of named directive\"),\nAP_INIT_RAW_ARGS(\"<IfSection\", start_cond_section, (void *)test_ifsection_section,\n              EXEC_ON_READ | OR_ALL,\n  \"Container for directives based on existence of named section\"),\nAP_INIT_RAW_ARGS(\"<DirectoryMatch\", dirsection, (void*)1, RSRC_CONF,\n  \"Container for directives affecting resources located in the \"\n  \"specified directories\"),\nAP_INIT_RAW_ARGS(\"<LocationMatch\", urlsection, (void*)1, RSRC_CONF,\n  \"Container for directives affecting resources accessed through the \"\n  \"specified URL paths\"),\nAP_INIT_RAW_ARGS(\"<FilesMatch\", filesection, (void*)1, OR_ALL,\n  \"Container for directives affecting files matching specified patterns\"),\n#ifdef GPROF\nAP_INIT_TAKE1(\"GprofDir\", set_gprof_dir, NULL, RSRC_CONF,\n  \"Directory to plop gmon.out files\"),\n#endif\nAP_INIT_TAKE1(\"AddDefaultCharset\", set_add_default_charset, NULL, OR_FILEINFO,\n  \"The name of the default charset to add to any Content-Type without one or 'Off' to disable\"),\nAP_INIT_TAKE1(\"AcceptPathInfo\", set_accept_path_info, NULL, OR_FILEINFO,\n  \"Set to on or off for PATH_INFO to be accepted by handlers, or default for the per-handler preference\"),\nAP_INIT_TAKE12(\"Define\", set_define, NULL, EXEC_ON_READ|ACCESS_CONF|RSRC_CONF,\n              \"Define a variable, optionally to a value.  Same as passing -D to the command line.\"),\nAP_INIT_TAKE1(\"UnDefine\", unset_define, NULL, EXEC_ON_READ|ACCESS_CONF|RSRC_CONF,\n              \"Undefine the existence of a variable. Undo a Define.\"),\nAP_INIT_RAW_ARGS(\"Error\", generate_error, NULL, OR_ALL,\n                 \"Generate error message from within configuration\"),\nAP_INIT_RAW_ARGS(\"<If\", ifsection, COND_IF, OR_ALL,\n  \"Container for directives to be conditionally applied\"),\nAP_INIT_RAW_ARGS(\"<ElseIf\", ifsection, COND_ELSEIF, OR_ALL,\n  \"Container for directives to be conditionally applied\"),\nAP_INIT_RAW_ARGS(\"<Else\", ifsection, COND_ELSE, OR_ALL,\n  \"Container for directives to be conditionally applied\"),\n\n/* Old resource config file commands */\n\nAP_INIT_RAW_ARGS(\"AccessFileName\", set_access_name, NULL, RSRC_CONF,\n  \"Name(s) of per-directory config files (default: .htaccess)\"),\nAP_INIT_TAKE1(\"DocumentRoot\", set_document_root, NULL, RSRC_CONF,\n  \"Root directory of the document tree\"),\nAP_INIT_TAKE2(\"ErrorDocument\", set_error_document, NULL, OR_FILEINFO,\n  \"Change responses for HTTP errors\"),\nAP_INIT_RAW_ARGS(\"AllowOverride\", set_override, NULL, ACCESS_CONF,\n  \"Controls what groups of directives can be configured by per-directory \"\n  \"config files\"),\nAP_INIT_TAKE_ARGV(\"AllowOverrideList\", set_override_list, NULL, ACCESS_CONF,\n  \"Controls what individual directives can be configured by per-directory \"\n  \"config files\"),\nAP_INIT_RAW_ARGS(\"Options\", set_options, NULL, OR_OPTIONS,\n  \"Set a number of attributes for a given directory\"),\nAP_INIT_TAKE1(\"DefaultType\", set_default_type, NULL, OR_FILEINFO,\n  \"the default media type for otherwise untyped files (DEPRECATED)\"),\nAP_INIT_RAW_ARGS(\"FileETag\", set_etag_bits, NULL, OR_FILEINFO,\n  \"Specify components used to construct a file's ETag\"),\nAP_INIT_TAKE1(\"EnableMMAP\", set_enable_mmap, NULL, OR_FILEINFO,\n  \"Controls whether memory-mapping may be used to read files\"),\nAP_INIT_TAKE1(\"EnableSendfile\", set_enable_sendfile, NULL, OR_FILEINFO,\n  \"Controls whether sendfile may be used to transmit files\"),\nAP_INIT_TAKE1(\"ReadBufferSize\", set_read_buf_size, NULL, ACCESS_CONF|RSRC_CONF,\n  \"Size (in bytes) of the memory buffers used to read data\"),\nAP_INIT_TAKE1(\"FlushMaxThreshold\", set_flush_max_threshold, NULL, RSRC_CONF,\n  \"Maximum threshold above which pending data are flushed to the network\"),\nAP_INIT_TAKE1(\"FlushMaxPipelined\", set_flush_max_pipelined, NULL, RSRC_CONF,\n  \"Maximum number of pipelined responses (pending) above which they are \"\n  \"flushed to the network\"),\n\n/* Old server config file commands */\n\nAP_INIT_TAKE1(\"Protocol\", set_protocol, NULL, RSRC_CONF,\n  \"Set the Protocol for httpd to use.\"),\nAP_INIT_TAKE2(\"AcceptFilter\", set_accf_map, NULL, RSRC_CONF,\n  \"Set the Accept Filter to use for a protocol\"),\nAP_INIT_TAKE1(\"Port\", ap_set_deprecated, NULL, RSRC_CONF,\n  \"Port was replaced with Listen in Apache 2.0\"),\nAP_INIT_TAKE1(\"HostnameLookups\", set_hostname_lookups, NULL,\n  ACCESS_CONF|RSRC_CONF,\n  \"\\\"on\\\" to enable, \\\"off\\\" to disable reverse DNS lookups, or \\\"double\\\" to \"\n  \"enable double-reverse DNS lookups\"),\nAP_INIT_TAKE1(\"ServerAdmin\", set_server_string_slot,\n  (void *)APR_OFFSETOF(server_rec, server_admin), RSRC_CONF,\n  \"The email address of the server administrator\"),\nAP_INIT_TAKE1(\"ServerName\", server_hostname_port, NULL, RSRC_CONF,\n  \"The hostname and port of the server\"),\nAP_INIT_TAKE1(\"ServerSignature\", set_signature_flag, NULL, OR_ALL,\n  \"En-/disable server signature (on|off|email)\"),\nAP_INIT_TAKE1(\"ServerRoot\", set_server_root, NULL, RSRC_CONF | EXEC_ON_READ,\n  \"Common directory of server-related files (logs, confs, etc.)\"),\nAP_INIT_TAKE1(\"DefaultRuntimeDir\", set_runtime_dir, NULL, RSRC_CONF | EXEC_ON_READ,\n  \"Common directory for run-time files (shared memory, locks, etc.)\"),\nAP_INIT_TAKE1(\"ErrorLog\", set_server_string_slot,\n  (void *)APR_OFFSETOF(server_rec, error_fname), RSRC_CONF,\n  \"The filename of the error log\"),\nAP_INIT_TAKE12(\"ErrorLogFormat\", set_errorlog_format, NULL, RSRC_CONF,\n  \"Format string for the ErrorLog\"),\nAP_INIT_RAW_ARGS(\"ServerAlias\", set_server_alias, NULL, RSRC_CONF,\n  \"A name or names alternately used to access the server\"),\nAP_INIT_TAKE1(\"ServerPath\", set_serverpath, NULL, RSRC_CONF,\n  \"The pathname the server can be reached at\"),\nAP_INIT_TAKE1(\"Timeout\", set_timeout, NULL, RSRC_CONF,\n  \"Timeout duration (sec)\"),\nAP_INIT_FLAG(\"ContentDigest\", set_content_md5, NULL, OR_OPTIONS,\n  \"whether or not to send a Content-MD5 header with each request\"),\nAP_INIT_TAKE1(\"UseCanonicalName\", set_use_canonical_name, NULL,\n  RSRC_CONF|ACCESS_CONF,\n  \"How to work out the ServerName : Port when constructing URLs\"),\nAP_INIT_TAKE1(\"UseCanonicalPhysicalPort\", set_use_canonical_phys_port, NULL,\n  RSRC_CONF|ACCESS_CONF,\n  \"Whether to use the physical Port when constructing URLs\"),\n/* TODO: RlimitFoo should all be part of mod_cgi, not in the core */\n/* TODO: ListenBacklog in MPM */\nAP_INIT_TAKE1(\"Include\", include_config, NULL,\n  (RSRC_CONF | ACCESS_CONF | EXEC_ON_READ),\n  \"Name(s) of the config file(s) to be included; fails if the wildcard does \"\n  \"not match at least one file\"),\nAP_INIT_TAKE1(\"IncludeOptional\", include_config, (void*)1,\n  (RSRC_CONF | ACCESS_CONF | EXEC_ON_READ),\n  \"Name or pattern of the config file(s) to be included; ignored if the file \"\n  \"does not exist or the pattern does not match any files\"),\nAP_INIT_ITERATE(\"LogLevel\", set_loglevel, NULL, RSRC_CONF|ACCESS_CONF,\n  \"Level of verbosity in error logging\"),\nAP_INIT_TAKE1(\"NameVirtualHost\", ap_set_name_virtual_host, NULL, RSRC_CONF,\n  \"A numeric IP address:port, or the name of a host\"),\nAP_INIT_TAKE1(\"ServerTokens\", set_serv_tokens, NULL, RSRC_CONF,\n  \"Determine tokens displayed in the Server: header - Min(imal), \"\n  \"Major, Minor, Prod(uctOnly), OS, or Full\"),\nAP_INIT_TAKE1(\"LimitRequestLine\", set_limit_req_line, NULL, RSRC_CONF,\n  \"Limit on maximum size of an HTTP request line\"),\nAP_INIT_TAKE1(\"LimitRequestFieldsize\", set_limit_req_fieldsize, NULL,\n  RSRC_CONF,\n  \"Limit on maximum size of an HTTP request header field\"),\nAP_INIT_TAKE1(\"LimitRequestFields\", set_limit_req_fields, NULL, RSRC_CONF,\n  \"Limit (0 = unlimited) on max number of header fields in a request message\"),\nAP_INIT_TAKE1(\"LimitRequestBody\", set_limit_req_body,\n  (void*)APR_OFFSETOF(core_dir_config, limit_req_body), OR_ALL,\n  \"Limit (in bytes) on maximum size of request message body\"),\nAP_INIT_TAKE1(\"LimitXMLRequestBody\", set_limit_xml_req_body, NULL, OR_ALL,\n              \"Limit (in bytes) on maximum size of an XML-based request \"\n              \"body\"),\nAP_INIT_RAW_ARGS(\"Mutex\", ap_set_mutex, NULL, RSRC_CONF,\n                 \"mutex (or \\\"default\\\") and mechanism\"),\n\nAP_INIT_TAKE1(\"MaxRanges\", set_max_ranges, NULL, RSRC_CONF|ACCESS_CONF,\n              \"Maximum number of Ranges in a request before returning the entire \"\n              \"resource, or 0 for unlimited\"),\nAP_INIT_TAKE1(\"MaxRangeOverlaps\", set_max_overlaps, NULL, RSRC_CONF|ACCESS_CONF,\n              \"Maximum number of overlaps in Ranges in a request before returning the entire \"\n              \"resource, or 0 for unlimited\"),\nAP_INIT_TAKE1(\"MaxRangeReversals\", set_max_reversals, NULL, RSRC_CONF|ACCESS_CONF,\n              \"Maximum number of reversals in Ranges in a request before returning the entire \"\n              \"resource, or 0 for unlimited\"),\n/* System Resource Controls */\n#ifdef RLIMIT_CPU\nAP_INIT_TAKE12(\"RLimitCPU\", set_limit_cpu,\n  (void*)APR_OFFSETOF(core_dir_config, limit_cpu),\n  OR_ALL, \"Soft/hard limits for max CPU usage in seconds\"),\n#else\nAP_INIT_TAKE12(\"RLimitCPU\", no_set_limit, NULL,\n  OR_ALL, \"Soft/hard limits for max CPU usage in seconds\"),\n#endif\n#if defined (RLIMIT_DATA) || defined (RLIMIT_VMEM) || defined (RLIMIT_AS)\nAP_INIT_TAKE12(\"RLimitMEM\", set_limit_mem,\n  (void*)APR_OFFSETOF(core_dir_config, limit_mem),\n  OR_ALL, \"Soft/hard limits for max memory usage per process\"),\n#else\nAP_INIT_TAKE12(\"RLimitMEM\", no_set_limit, NULL,\n  OR_ALL, \"Soft/hard limits for max memory usage per process\"),\n#endif\n#ifdef RLIMIT_NPROC\nAP_INIT_TAKE12(\"RLimitNPROC\", set_limit_nproc,\n  (void*)APR_OFFSETOF(core_dir_config, limit_nproc),\n  OR_ALL, \"soft/hard limits for max number of processes per uid\"),\n#else\nAP_INIT_TAKE12(\"RLimitNPROC\", no_set_limit, NULL,\n   OR_ALL, \"soft/hard limits for max number of processes per uid\"),\n#endif\n\nAP_INIT_RAW_ARGS(\"RegexDefaultOptions\", set_regex_default_options, NULL, RSRC_CONF,\n                 \"default options for regexes (prefixed by '+' to add, '-' to del)\"),\n\n/* internal recursion stopper */\nAP_INIT_TAKE12(\"LimitInternalRecursion\", set_recursion_limit, NULL, RSRC_CONF,\n              \"maximum recursion depth of internal redirects and subrequests\"),\n\nAP_INIT_FLAG(\"CGIPassAuth\", set_cgi_pass_auth, NULL, OR_AUTHCFG,\n             \"Controls whether HTTP authorization headers, normally hidden, will \"\n             \"be passed to scripts\"),\nAP_INIT_TAKE2(\"CGIVar\", set_cgi_var, NULL, OR_FILEINFO,\n              \"Controls how some CGI variables are set\"),\nAP_INIT_FLAG(\"QualifyRedirectURL\", set_qualify_redirect_url, NULL, OR_FILEINFO,\n             \"Controls whether the REDIRECT_URL environment variable is fully \"\n             \"qualified\"),\nAP_INIT_FLAG(\"StrictHostCheck\", set_core_server_flag, \n             (void *)APR_OFFSETOF(core_server_config, strict_host_check),  \n             RSRC_CONF,\n             \"Controls whether a hostname match is required\"),\nAP_INIT_TAKE1(\"ForceType\", ap_set_string_slot_lower,\n       (void *)APR_OFFSETOF(core_dir_config, mime_type), OR_FILEINFO,\n     \"a mime type that overrides other configured type\"),\nAP_INIT_TAKE1(\"SetHandler\", set_sethandler, NULL, OR_FILEINFO,\n   \"a handler name that overrides any other configured handler\"),\nAP_INIT_TAKE1(\"SetOutputFilter\", ap_set_string_slot,\n       (void *)APR_OFFSETOF(core_dir_config, output_filters), OR_FILEINFO,\n   \"filter (or ; delimited list of filters) to be run on the request content\"),\nAP_INIT_TAKE1(\"SetInputFilter\", ap_set_string_slot,\n       (void *)APR_OFFSETOF(core_dir_config, input_filters), OR_FILEINFO,\n   \"filter (or ; delimited list of filters) to be run on the request body\"),\nAP_INIT_TAKE1(\"AllowEncodedSlashes\", set_allow2f, NULL, RSRC_CONF,\n             \"Allow URLs containing '/' encoded as '%2F'\"),\n\n/* scoreboard.c directives */\nAP_INIT_TAKE1(\"ScoreBoardFile\", ap_set_scoreboard, NULL, RSRC_CONF,\n              \"A file for Apache to maintain runtime process management information\"),\nAP_INIT_FLAG(\"ExtendedStatus\", ap_set_extended_status, NULL, RSRC_CONF,\n             \"\\\"On\\\" to track extended status information, \\\"Off\\\" to disable\"),\nAP_INIT_FLAG(\"SeeRequestTail\", ap_set_reqtail, NULL, RSRC_CONF,\n             \"For extended status, \\\"On\\\" to see the last 63 chars of \"\n             \"the request line, \\\"Off\\\" (default) to see the first 63\"),\n\n/*\n * These are default configuration directives that mpms can/should\n * pay attention to.\n * XXX These are not for all platforms, and even some Unix MPMs might not want\n * some directives.\n */\nAP_INIT_TAKE1(\"PidFile\",  ap_mpm_set_pidfile, NULL, RSRC_CONF,\n              \"A file for logging the server process ID\"),\nAP_INIT_TAKE1(\"MaxRequestsPerChild\", ap_mpm_set_max_requests, NULL, RSRC_CONF,\n              \"Maximum number of connections a particular child serves before \"\n              \"dying. (DEPRECATED, use MaxConnectionsPerChild)\"),\nAP_INIT_TAKE1(\"MaxConnectionsPerChild\", ap_mpm_set_max_requests, NULL, RSRC_CONF,\n              \"Maximum number of connections a particular child serves before dying.\"),\nAP_INIT_TAKE1(\"CoreDumpDirectory\", ap_mpm_set_coredumpdir, NULL, RSRC_CONF,\n              \"The location of the directory Apache changes to before dumping core\"),\nAP_INIT_TAKE1(\"MaxMemFree\", ap_mpm_set_max_mem_free, NULL, RSRC_CONF,\n              \"Maximum number of 1k blocks a particular child's allocator may hold.\"),\nAP_INIT_TAKE1(\"ThreadStackSize\", ap_mpm_set_thread_stacksize, NULL, RSRC_CONF,\n              \"Size in bytes of stack used by threads handling client connections\"),\n#if AP_ENABLE_EXCEPTION_HOOK\nAP_INIT_TAKE1(\"EnableExceptionHook\", ap_mpm_set_exception_hook, NULL, RSRC_CONF,\n              \"Controls whether exception hook may be called after a crash\"),\n#endif\nAP_INIT_TAKE1(\"TraceEnable\", set_trace_enable, NULL, RSRC_CONF,\n              \"'on' (default), 'off' or 'extended' to trace request body content\"),\nAP_INIT_FLAG(\"MergeTrailers\", set_merge_trailers, NULL, RSRC_CONF,\n              \"merge request trailers into request headers or not\"),\nAP_INIT_ITERATE(\"Protocols\", set_protocols, NULL, RSRC_CONF,\n                \"Controls which protocols are allowed\"),\nAP_INIT_TAKE1(\"ProtocolsHonorOrder\", set_protocols_honor_order, NULL, RSRC_CONF,\n              \"'off' (default) or 'on' to respect given order of protocols, \"\n              \"by default the client specified order determines selection\"),\nAP_INIT_ITERATE(\"HttpProtocolOptions\", set_http_protocol_options, NULL, RSRC_CONF,\n                \"'Allow0.9' or 'Require1.0' (default); \"\n                \"'RegisteredMethods' or 'LenientMethods' (default); \"\n                \"'Unsafe' or 'Strict' (default). Sets HTTP acceptance rules\"),\nAP_INIT_ITERATE(\"RegisterHttpMethod\", set_http_method, NULL, RSRC_CONF,\n                \"Registers non-standard HTTP methods\"),\nAP_INIT_FLAG(\"MergeSlashes\", set_core_server_flag, \n             (void *)APR_OFFSETOF(core_server_config, merge_slashes),  \n             RSRC_CONF,\n             \"Controls whether consecutive slashes in the URI path are merged\"),\n{ NULL }\n};\n\n/*****************************************************************\n *\n * Core handlers for various phases of server operation...\n */\n\nAP_DECLARE_NONSTD(int) ap_core_translate(request_rec *r)\n{\n    apr_status_t rv;\n    char *path;\n\n    /* XXX this seems too specific, this should probably become\n     * some general-case test\n     */\n    if (r->proxyreq) {\n        return HTTP_FORBIDDEN;\n    }\n    if (!r->uri || ((r->uri[0] != '/') && strcmp(r->uri, \"*\"))) {\n        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00126)\n                     \"Invalid URI in request '%s' '%s'\", r->uri, r->the_request);\n        return HTTP_BAD_REQUEST;\n    }\n\n    if (r->server->path\n        && !strncmp(r->uri, r->server->path, r->server->pathlen)\n        && (r->server->path[r->server->pathlen - 1] == '/'\n            || r->uri[r->server->pathlen] == '/'\n            || r->uri[r->server->pathlen] == '\\0'))\n    {\n        path = r->uri + r->server->pathlen;\n    }\n    else {\n        path = r->uri;\n    }\n    /*\n     * Make sure that we do not mess up the translation by adding two\n     * /'s in a row.  This happens under windows when the document\n     * root ends with a /\n     */\n    /* skip all leading /'s (e.g. http://localhost///foo)\n     * so we are looking at only the relative path.\n     */\n    while (*path == '/') {\n        ++path;\n    }\n    if ((rv = apr_filepath_merge(&r->filename, ap_document_root(r), path,\n                                 APR_FILEPATH_TRUENAME\n                               | APR_FILEPATH_SECUREROOT, r->pool))\n                != APR_SUCCESS) {\n        ap_log_rerror(APLOG_MARK, APLOG_ERR, rv, r, APLOGNO(00127)\n                     \"Cannot map %s to file\", r->the_request);\n        return HTTP_FORBIDDEN;\n    }\n    r->canonical_filename = r->filename;\n\n    return OK;\n}\n\n/*****************************************************************\n *\n * Test the filesystem name through directory_walk and file_walk\n */\nstatic int core_map_to_storage(request_rec *r)\n{\n    int access_status;\n\n    if ((access_status = ap_directory_walk(r))) {\n        return access_status;\n    }\n\n    if ((access_status = ap_file_walk(r))) {\n        return access_status;\n    }\n\n    return OK;\n}\n\n\nstatic int do_nothing(request_rec *r) { return OK; }\n\nstatic int core_override_type(request_rec *r)\n{\n    core_dir_config *conf =\n        (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n\n    /* Check for overrides with ForceType / SetHandler\n     */\n    if (conf->mime_type && strcmp(conf->mime_type, \"none\"))\n        ap_set_content_type(r, (char*) conf->mime_type);\n\n    if (conf->expr_handler) { \n        const char *err;\n        const char *val;\n        val = ap_expr_str_exec(r, conf->expr_handler, &err);\n        if (err) {\n            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(03154)\n                          \"Can't evaluate handler expression: %s\", err);\n            return HTTP_INTERNAL_SERVER_ERROR;\n        }\n\n        if (val != ap_strstr_c(val, \"proxy:unix\")) { \n            /* Retained for compatibility --  but not for UDS */\n            char *tmp = apr_pstrdup(r->pool, val);\n            ap_str_tolower(tmp);\n            val = tmp;\n        }\n\n        if (strcmp(val, \"none\")) { \n            r->handler = val;\n        }\n    }\n    else if (conf->handler && strcmp(conf->handler, \"none\")) { \n        r->handler = conf->handler;\n    }\n\n    /* Deal with the poor soul who is trying to force path_info to be\n     * accepted within the core_handler, where they will let the subreq\n     * address its contents.  This is toggled by the user in the very\n     * beginning of the fixup phase (here!), so modules should override the user's\n     * discretion in their own module fixup phase.  It is tristate, if\n     * the user doesn't specify, the result is AP_REQ_DEFAULT_PATH_INFO.\n     * (which the module may interpret to its own customary behavior.)\n     * It won't be touched if the value is no longer AP_ACCEPT_PATHINFO_UNSET,\n     * so any module changing the value prior to the fixup phase\n     * OVERRIDES the user's choice.\n     */\n    if ((r->used_path_info == AP_REQ_DEFAULT_PATH_INFO)\n        && (conf->accept_path_info != AP_ACCEPT_PATHINFO_UNSET)) {\n        /* No module knew better, and the user coded AcceptPathInfo */\n        r->used_path_info = conf->accept_path_info;\n    }\n\n    return OK;\n}\n\nstatic int default_handler(request_rec *r)\n{\n    conn_rec *c = r->connection;\n    apr_bucket_brigade *bb;\n    apr_bucket *e;\n    core_dir_config *d;\n    int errstatus;\n    apr_file_t *fd = NULL;\n    apr_status_t status;\n    /* XXX if/when somebody writes a content-md5 filter we either need to\n     *     remove this support or coordinate when to use the filter vs.\n     *     when to use this code\n     *     The current choice of when to compute the md5 here matches the 1.3\n     *     support fairly closely (unlike 1.3, we don't handle computing md5\n     *     when the charset is translated).\n     */\n    int bld_content_md5;\n\n    d = (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n    bld_content_md5 = (d->content_md5 == AP_CONTENT_MD5_ON)\n                      && r->output_filters->frec->ftype != AP_FTYPE_RESOURCE;\n\n    ap_allow_standard_methods(r, MERGE_ALLOW, M_GET, M_OPTIONS, M_POST, -1);\n\n    /* If filters intend to consume the request body, they must\n     * register an InputFilter to slurp the contents of the POST\n     * data from the POST input stream.  It no longer exists when\n     * the output filters are invoked by the default handler.\n     */\n    if ((errstatus = ap_discard_request_body(r)) != OK) {\n        return errstatus;\n    }\n\n    if (r->method_number == M_GET || r->method_number == M_POST) {\n        if (r->finfo.filetype == APR_NOFILE) {\n            ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00128)\n                          \"File does not exist: %s\",\n                          apr_pstrcat(r->pool, r->filename, r->path_info, NULL));\n            return HTTP_NOT_FOUND;\n        }\n\n        /* Don't try to serve a dir.  Some OSs do weird things with\n         * raw I/O on a dir.\n         */\n        if (r->finfo.filetype == APR_DIR) {\n            ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00129)\n                          \"Attempt to serve directory: %s\", r->filename);\n            return HTTP_NOT_FOUND;\n        }\n\n        if ((r->used_path_info != AP_REQ_ACCEPT_PATH_INFO) &&\n            r->path_info && *r->path_info)\n        {\n            /* default to reject */\n            ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00130)\n                          \"File does not exist: %s\",\n                          apr_pstrcat(r->pool, r->filename, r->path_info, NULL));\n            return HTTP_NOT_FOUND;\n        }\n\n        /* We understood the (non-GET) method, but it might not be legal for\n           this particular resource. Check to see if the 'deliver_script'\n           flag is set. If so, then we go ahead and deliver the file since\n           it isn't really content (only GET normally returns content).\n\n           Note: based on logic further above, the only possible non-GET\n           method at this point is POST. In the future, we should enable\n           script delivery for all methods.  */\n        if (r->method_number != M_GET) {\n            core_request_config *req_cfg;\n\n            req_cfg = ap_get_core_module_config(r->request_config);\n            if (!req_cfg->deliver_script) {\n                /* The flag hasn't been set for this request. Punt. */\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00131)\n                              \"This resource does not accept the %s method.\",\n                              r->method);\n                return HTTP_METHOD_NOT_ALLOWED;\n            }\n        }\n\n\n        if ((status = apr_file_open(&fd, r->filename, APR_READ | APR_BINARY\n#if APR_HAS_SENDFILE\n                            | AP_SENDFILE_ENABLED(d->enable_sendfile)\n#endif\n                                    , 0, r->pool)) != APR_SUCCESS) {\n            ap_log_rerror(APLOG_MARK, APLOG_ERR, status, r, APLOGNO(00132)\n                          \"file permissions deny server access: %s\", r->filename);\n            return HTTP_FORBIDDEN;\n        }\n\n        ap_update_mtime(r, r->finfo.mtime);\n        ap_set_last_modified(r);\n        ap_set_etag_fd(r, fd);\n        ap_set_accept_ranges(r);\n        ap_set_content_length(r, r->finfo.size);\n        if (bld_content_md5) {\n            apr_table_setn(r->headers_out, \"Content-MD5\",\n                           ap_md5digest(r->pool, fd));\n        }\n\n        bb = apr_brigade_create(r->pool, c->bucket_alloc);\n\n        if ((errstatus = ap_meets_conditions(r)) != OK) {\n            apr_file_close(fd);\n            r->status = errstatus;\n        }\n        else {\n            e = apr_brigade_insert_file(bb, fd, 0, r->finfo.size, r->pool);\n\n#if APR_HAS_MMAP\n            if (d->enable_mmap == ENABLE_MMAP_OFF) {\n                (void)apr_bucket_file_enable_mmap(e, 0);\n            }\n#endif\n#if APR_MAJOR_VERSION > 1 || (APU_MAJOR_VERSION == 1 && APU_MINOR_VERSION >= 6)\n            if (d->read_buf_size) {\n                apr_bucket_file_set_buf_size(e, d->read_buf_size);\n            }\n#endif\n        }\n\n        e = apr_bucket_eos_create(c->bucket_alloc);\n        APR_BRIGADE_INSERT_TAIL(bb, e);\n\n        status = ap_pass_brigade(r->output_filters, bb);\n        apr_brigade_cleanup(bb);\n\n        if (status == APR_SUCCESS\n            || r->status != HTTP_OK\n            || c->aborted) {\n            return OK;\n        }\n        else {\n            /* no way to know what type of error occurred */\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, status, r, APLOGNO(00133)\n                          \"default_handler: ap_pass_brigade returned %i\",\n                          status);\n            return AP_FILTER_ERROR;\n        }\n    }\n    else {              /* unusual method (not GET or POST) */\n        if (r->method_number == M_INVALID) {\n            /* See if this looks like an undecrypted SSL handshake attempt.\n             * It's safe to look a couple bytes into the_request if it exists, as it's\n             * always allocated at least MIN_LINE_ALLOC (80) bytes.\n             */\n            if (r->the_request\n                && r->the_request[0] == 0x16\n                && (r->the_request[1] == 0x2 || r->the_request[1] == 0x3)) {\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00134)\n                              \"Invalid method in request %s - possible attempt to establish SSL connection on non-SSL port\", r->the_request);\n            } else {\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00135)\n                              \"Invalid method in request %s\", r->the_request);\n            }\n            return HTTP_NOT_IMPLEMENTED;\n        }\n\n        if (r->method_number == M_OPTIONS) {\n            return ap_send_http_options(r);\n        }\n        return HTTP_METHOD_NOT_ALLOWED;\n    }\n}\n\n/* Optional function coming from mod_logio, used for logging of output\n * traffic\n */\nAPR_OPTIONAL_FN_TYPE(ap_logio_add_bytes_out) *ap__logio_add_bytes_out;\nAPR_OPTIONAL_FN_TYPE(authz_some_auth_required) *ap__authz_ap_some_auth_required;\n\n/* Insist that at least one module will undertake to provide system\n * security by dropping startup privileges.\n */\nstatic int sys_privileges = 0;\nAP_DECLARE(int) ap_sys_privileges_handlers(int inc)\n{\n    sys_privileges += inc;\n    return sys_privileges;\n}\n\nstatic int check_errorlog_dir(apr_pool_t *p, server_rec *s)\n{\n    if (!s->error_fname || s->error_fname[0] == '|'\n        || strcmp(s->error_fname, \"syslog\") == 0\n        || strncmp(s->error_fname, \"syslog:\", 7) == 0) {\n        return APR_SUCCESS;\n    }\n    else {\n        char *abs = ap_server_root_relative(p, s->error_fname);\n        char *dir = ap_make_dirstr_parent(p, abs);\n        apr_finfo_t finfo;\n        apr_status_t rv = apr_stat(&finfo, dir, APR_FINFO_TYPE, p);\n        if (rv == APR_SUCCESS && finfo.filetype != APR_DIR)\n            rv = APR_ENOTDIR;\n        if (rv != APR_SUCCESS) {\n            const char *desc = \"main error log\";\n            if (s->defn_name)\n                desc = apr_psprintf(p, \"error log of vhost defined at %s:%d\",\n                                    s->defn_name, s->defn_line_number);\n            ap_log_error(APLOG_MARK, APLOG_STARTUP|APLOG_EMERG, rv,\n                          ap_server_conf, APLOGNO(02291)\n                         \"Cannot access directory '%s' for %s\", dir, desc);\n            return !OK;\n        }\n    }\n    return OK;\n}\n\nstatic int core_check_config(apr_pool_t *pconf, apr_pool_t *plog, apr_pool_t *ptemp, server_rec *s)\n{\n    int rv = OK;\n    while (s) {\n        if (check_errorlog_dir(ptemp, s) != OK)\n            rv = !OK;\n        s = s->next;\n    }\n    return rv;\n}\n\n\nstatic int core_pre_config(apr_pool_t *pconf, apr_pool_t *plog, apr_pool_t *ptemp)\n{\n    ap_mutex_init(pconf);\n\n    if (!saved_server_config_defines)\n        init_config_defines(pconf);\n    apr_pool_cleanup_register(pconf, NULL, reset_config_defines,\n                              apr_pool_cleanup_null);\n\n    ap_regcomp_set_default_cflags(AP_REG_DEFAULT);\n\n    mpm_common_pre_config(pconf);\n\n    return OK;\n}\n\nstatic int core_post_config(apr_pool_t *pconf, apr_pool_t *plog, apr_pool_t *ptemp, server_rec *s)\n{\n    ap__logio_add_bytes_out = APR_RETRIEVE_OPTIONAL_FN(ap_logio_add_bytes_out);\n    ident_lookup = APR_RETRIEVE_OPTIONAL_FN(ap_ident_lookup);\n    ap__authz_ap_some_auth_required = APR_RETRIEVE_OPTIONAL_FN(authz_some_auth_required);\n    authn_ap_auth_type = APR_RETRIEVE_OPTIONAL_FN(authn_ap_auth_type);\n    authn_ap_auth_name = APR_RETRIEVE_OPTIONAL_FN(authn_ap_auth_name);\n    access_compat_ap_satisfies = APR_RETRIEVE_OPTIONAL_FN(access_compat_ap_satisfies);\n\n    set_banner(pconf);\n    ap_setup_make_content_type(pconf);\n    ap_setup_auth_internal(ptemp);\n    ap_setup_ssl_optional_fns(pconf);\n    if (!sys_privileges) {\n        ap_log_error(APLOG_MARK, APLOG_CRIT, 0, NULL, APLOGNO(00136)\n                     \"Server MUST relinquish startup privileges before \"\n                     \"accepting connections.  Please ensure mod_unixd \"\n                     \"or other system security module is loaded.\");\n        return !OK;\n    }\n    apr_pool_cleanup_register(pconf, NULL, ap_mpm_end_gen_helper,\n                              apr_pool_cleanup_null);\n    return OK;\n}\n\nstatic void core_insert_filter(request_rec *r)\n{\n    core_dir_config *conf = (core_dir_config *)\n                            ap_get_core_module_config(r->per_dir_config);\n    const char *filter, *filters = conf->output_filters;\n\n    if (filters) {\n        while (*filters && (filter = ap_getword(r->pool, &filters, ';'))) {\n            ap_add_output_filter(filter, NULL, r, r->connection);\n        }\n    }\n\n    filters = conf->input_filters;\n    if (filters) {\n        while (*filters && (filter = ap_getword(r->pool, &filters, ';'))) {\n            ap_add_input_filter(filter, NULL, r, r->connection);\n        }\n    }\n}\n\nstatic apr_size_t num_request_notes = AP_NUM_STD_NOTES;\n\nstatic apr_status_t reset_request_notes(void *dummy)\n{\n    num_request_notes = AP_NUM_STD_NOTES;\n    return APR_SUCCESS;\n}\n\nAP_DECLARE(apr_size_t) ap_register_request_note(void)\n{\n    apr_pool_cleanup_register(apr_hook_global_pool, NULL, reset_request_notes,\n                              apr_pool_cleanup_null);\n    return num_request_notes++;\n}\n\nAP_DECLARE(void **) ap_get_request_note(request_rec *r, apr_size_t note_num)\n{\n    core_request_config *req_cfg;\n\n    if (note_num >= num_request_notes) {\n        return NULL;\n    }\n\n    req_cfg = (core_request_config *)\n        ap_get_core_module_config(r->request_config);\n\n    if (!req_cfg) {\n        return NULL;\n    }\n\n    return &(req_cfg->notes[note_num]);\n}\n\nAP_DECLARE(apr_socket_t *) ap_get_conn_socket(conn_rec *c)\n{\n    return ap_get_core_module_config(c->conn_config);\n}\n\nstatic int core_create_req(request_rec *r)\n{\n    /* Alloc the config struct and the array of request notes in\n     * a single block for efficiency\n     */\n    core_request_config *req_cfg;\n\n    req_cfg = apr_pcalloc(r->pool, sizeof(core_request_config) +\n                          sizeof(void *) * num_request_notes);\n    req_cfg->notes = (void **)((char *)req_cfg + sizeof(core_request_config));\n\n    /* ### temporarily enable script delivery as the default */\n    req_cfg->deliver_script = 1;\n\n    if (r->main) {\n        core_request_config *main_req_cfg = (core_request_config *)\n            ap_get_core_module_config(r->main->request_config);\n        req_cfg->bb = main_req_cfg->bb;\n    }\n    else {\n        req_cfg->bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    }\n\n    ap_set_core_module_config(r->request_config, req_cfg);\n\n    return OK;\n}\n\nstatic int core_create_proxy_req(request_rec *r, request_rec *pr)\n{\n    return core_create_req(pr);\n}\n\nstatic conn_rec *core_create_conn(apr_pool_t *ptrans, server_rec *server,\n                                  apr_socket_t *csd, long id, void *sbh,\n                                  apr_bucket_alloc_t *alloc)\n{\n    apr_status_t rv;\n    conn_rec *c = (conn_rec *) apr_pcalloc(ptrans, sizeof(conn_rec));\n\n    c->sbh = sbh;\n    ap_update_child_status(c->sbh, SERVER_BUSY_READ, NULL);\n\n    /* Got a connection structure, so initialize what fields we can\n     * (the rest are zeroed out by pcalloc).\n     */\n    c->pool = ptrans;\n    c->conn_config = ap_create_conn_config(ptrans);\n    c->notes = apr_table_make(ptrans, 5);\n\n    if ((rv = apr_socket_addr_get(&c->local_addr, APR_LOCAL, csd))\n        != APR_SUCCESS) {\n        ap_log_error(APLOG_MARK, APLOG_INFO, rv, server, APLOGNO(00137)\n                     \"apr_socket_addr_get(APR_LOCAL)\");\n        apr_socket_close(csd);\n        return NULL;\n    }\n    if (apr_sockaddr_ip_get(&c->local_ip, c->local_addr)) {\n#if APR_HAVE_SOCKADDR_UN\n        if (c->local_addr->family == APR_UNIX) {\n            c->local_ip = apr_pstrndup(c->pool, c->local_addr->ipaddr_ptr,\n                                       c->local_addr->ipaddr_len);\n        }\n        else\n#endif\n        c->local_ip = apr_pstrdup(c->pool, \"unknown\");\n    }\n\n    if ((rv = apr_socket_addr_get(&c->client_addr, APR_REMOTE, csd))\n        != APR_SUCCESS) {\n        ap_log_error(APLOG_MARK, APLOG_INFO, rv, server, APLOGNO(00138)\n                     \"apr_socket_addr_get(APR_REMOTE)\");\n        apr_socket_close(csd);\n        return NULL;\n    }\n    if (apr_sockaddr_ip_get(&c->client_ip, c->client_addr)) {\n#if APR_HAVE_SOCKADDR_UN\n        if (c->client_addr->family == APR_UNIX) {\n            c->client_ip = apr_pstrndup(c->pool, c->client_addr->ipaddr_ptr,\n                                        c->client_addr->ipaddr_len);\n        }\n        else\n#endif\n        c->client_ip = apr_pstrdup(c->pool, \"unknown\");\n    }\n\n    c->base_server = server;\n\n    c->id = id;\n    c->bucket_alloc = alloc;\n\n    c->clogging_input_filters = 0;\n\n    return c;\n}\n\nstatic int core_pre_connection(conn_rec *c, void *csd)\n{\n    core_net_rec *net = apr_palloc(c->pool, sizeof(*net));\n    apr_status_t rv;\n\n    /* The Nagle algorithm says that we should delay sending partial\n     * packets in hopes of getting more data.  We don't want to do\n     * this; we are not telnet.  There are bad interactions between\n     * persistent connections and Nagle's algorithm that have very severe\n     * performance penalties.  (Failing to disable Nagle is not much of a\n     * problem with simple HTTP.)\n     */\n    rv = apr_socket_opt_set(csd, APR_TCP_NODELAY, 1);\n    if (rv != APR_SUCCESS && rv != APR_ENOTIMPL) {\n        /* expected cause is that the client disconnected already,\n         * hence the debug level\n         */\n        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, rv, c, APLOGNO(00139)\n                      \"apr_socket_opt_set(APR_TCP_NODELAY)\");\n    }\n\n    /* The core filter requires the timeout mode to be set, which\n     * incidentally sets the socket to be nonblocking.  If this\n     * is not initialized correctly, Linux - for example - will\n     * be initially blocking, while Solaris will be non blocking\n     * and any initial read will fail.\n     */\n    rv = apr_socket_timeout_set(csd, c->base_server->timeout);\n    if (rv != APR_SUCCESS) {\n        /* expected cause is that the client disconnected already */\n        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, rv, c, APLOGNO(00140)\n                      \"apr_socket_timeout_set\");\n    }\n\n    net->c = c;\n    net->in_ctx = NULL;\n    net->out_ctx = NULL;\n    net->client_socket = csd;\n\n    ap_set_core_module_config(net->c->conn_config, csd);\n    ap_add_input_filter_handle(ap_core_input_filter_handle, net, NULL, net->c);\n    ap_add_output_filter_handle(ap_core_output_filter_handle, net, NULL, net->c);\n    return DONE;\n}\n\nAP_DECLARE(int) ap_state_query(int query)\n{\n    switch (query) {\n    case AP_SQ_MAIN_STATE:\n        return ap_main_state;\n    case AP_SQ_RUN_MODE:\n        return ap_run_mode;\n    case AP_SQ_CONFIG_GEN:\n        return ap_config_generation;\n    default:\n        return AP_SQ_NOT_SUPPORTED;\n    }\n}\n\nstatic apr_random_t *rng = NULL;\n#if APR_HAS_THREADS\nstatic apr_thread_mutex_t *rng_mutex = NULL;\n#endif\n\nstatic void core_child_init(apr_pool_t *pchild, server_rec *s)\n{\n    apr_proc_t proc;\n#if APR_HAS_THREADS\n    int threaded_mpm;\n    if (ap_mpm_query(AP_MPMQ_IS_THREADED, &threaded_mpm) == APR_SUCCESS\n        && threaded_mpm)\n    {\n        apr_thread_mutex_create(&rng_mutex, APR_THREAD_MUTEX_DEFAULT, pchild);\n    }\n#endif\n    /* The MPMs use plain fork() and not apr_proc_fork(), so we have to call\n     * apr_random_after_fork() manually in the child\n     */\n    proc.pid = getpid();\n    apr_random_after_fork(&proc);\n}\n\nstatic void core_optional_fn_retrieve(void)\n{\n    ap_init_scoreboard(NULL);\n}\n\nAP_CORE_DECLARE(void) ap_random_parent_after_fork(void)\n{\n    /*\n     * To ensure that the RNG state in the parent changes after the fork, we\n     * pull some data from the RNG and discard it. This ensures that the RNG\n     * states in the children are different even after the pid wraps around.\n     * As we only use apr_random for insecure random bytes, pulling 2 bytes\n     * should be enough.\n     * XXX: APR should probably have some dedicated API to do this, but it\n     * XXX: currently doesn't.\n     */\n    apr_uint16_t data;\n    apr_random_insecure_bytes(rng, &data, sizeof(data));\n}\n\nAP_CORE_DECLARE(void) ap_init_rng(apr_pool_t *p)\n{\n    unsigned char seed[8];\n    apr_status_t rv;\n    rng = apr_random_standard_new(p);\n    do {\n        rv = apr_generate_random_bytes(seed, sizeof(seed));\n        if (rv != APR_SUCCESS)\n            goto error;\n        apr_random_add_entropy(rng, seed, sizeof(seed));\n        rv = apr_random_insecure_ready(rng);\n    } while (rv == APR_ENOTENOUGHENTROPY);\n    if (rv == APR_SUCCESS)\n        return;\nerror:\n    ap_log_error(APLOG_MARK, APLOG_CRIT, rv, NULL, APLOGNO(00141)\n                 \"Could not initialize random number generator\");\n    exit(1);\n}\n\nAP_DECLARE(void) ap_random_insecure_bytes(void *buf, apr_size_t size)\n{\n#if APR_HAS_THREADS\n    if (rng_mutex)\n        apr_thread_mutex_lock(rng_mutex);\n#endif\n    /* apr_random_insecure_bytes can only fail with APR_ENOTENOUGHENTROPY,\n     * and we have ruled that out during initialization. Therefore we don't\n     * need to check the return code.\n     */\n    apr_random_insecure_bytes(rng, buf, size);\n#if APR_HAS_THREADS\n    if (rng_mutex)\n        apr_thread_mutex_unlock(rng_mutex);\n#endif\n}\n\n/*\n * Finding a random number in a range.\n *      n' = a + n(b-a+1)/(M+1)\n * where:\n *      n' = random number in range\n *      a  = low end of range\n *      b  = high end of range\n *      n  = random number of 0..M\n *      M  = maxint\n * Algorithm 'borrowed' from PHP's rand() function.\n */\n#define RAND_RANGE(__n, __min, __max, __tmax) \\\n(__n) = (__min) + (long) ((double) ((__max) - (__min) + 1.0) * ((__n) / ((__tmax) + 1.0)))\nAP_DECLARE(apr_uint32_t) ap_random_pick(apr_uint32_t min, apr_uint32_t max)\n{\n    apr_uint32_t number;\n#if (!__GNUC__ || __GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8) || \\\n     !__sparc__ || APR_SIZEOF_VOIDP != 8)\n    /* This triggers a gcc bug on sparc/64bit with gcc < 4.8, PR 52900 */\n    if (max < 16384) {\n        apr_uint16_t num16;\n        ap_random_insecure_bytes(&num16, sizeof(num16));\n        RAND_RANGE(num16, min, max, APR_UINT16_MAX);\n        number = num16;\n    }\n    else\n#endif\n    {\n        ap_random_insecure_bytes(&number, sizeof(number));\n        RAND_RANGE(number, min, max, APR_UINT32_MAX);\n    }\n    return number;\n}\n\nstatic apr_status_t core_insert_network_bucket(conn_rec *c,\n                                               apr_bucket_brigade *bb,\n                                               apr_socket_t *socket)\n{\n    apr_bucket *e = apr_bucket_socket_create(socket, c->bucket_alloc);\n    APR_BRIGADE_INSERT_TAIL(bb, e);\n    return APR_SUCCESS;\n}\n\nstatic apr_status_t core_dirwalk_stat(apr_finfo_t *finfo, request_rec *r,\n                                      apr_int32_t wanted) \n{\n    return apr_stat(finfo, r->filename, wanted, r->pool);\n}\n\nstatic void core_dump_config(apr_pool_t *p, server_rec *s)\n{\n    core_server_config *sconf = ap_get_core_module_config(s->module_config);\n    apr_file_t *out = NULL;\n    const char *tmp;\n    const char **defines;\n    int i;\n    if (!ap_exists_config_define(\"DUMP_RUN_CFG\"))\n        return;\n\n    apr_file_open_stdout(&out, p);\n    apr_file_printf(out, \"ServerRoot: \\\"%s\\\"\\n\", ap_server_root);\n    tmp = ap_server_root_relative(p, sconf->ap_document_root);\n    apr_file_printf(out, \"Main DocumentRoot: \\\"%s\\\"\\n\", tmp);\n    if (s->error_fname[0] != '|'\n        && strcmp(s->error_fname, \"syslog\") != 0\n        && strncmp(s->error_fname, \"syslog:\", 7) != 0)\n        tmp = ap_server_root_relative(p, s->error_fname);\n    else\n        tmp = s->error_fname;\n    apr_file_printf(out, \"Main ErrorLog: \\\"%s\\\"\\n\", tmp);\n    if (ap_scoreboard_fname) {\n        tmp = ap_server_root_relative(p, ap_scoreboard_fname);\n        apr_file_printf(out, \"ScoreBoardFile: \\\"%s\\\"\\n\", tmp);\n    }\n    ap_dump_mutexes(p, s, out);\n    ap_mpm_dump_pidfile(p, out);\n\n    defines = (const char **)ap_server_config_defines->elts;\n    for (i = 0; i < ap_server_config_defines->nelts; i++) {\n        const char *name = defines[i];\n        const char *val = NULL;\n        if (server_config_defined_vars)\n           val = apr_table_get(server_config_defined_vars, name);\n        if (val)\n            apr_file_printf(out, \"Define: %s=%s\\n\", name, val);\n        else\n            apr_file_printf(out, \"Define: %s\\n\", name);\n    }\n}\n\nstatic int core_upgrade_handler(request_rec *r)\n{\n    conn_rec *c = r->connection;\n    const char *upgrade;\n\n    if (c->master) {\n        /* Not possible to perform an HTTP/1.1 upgrade from a slave\n         * connection. */\n        return DECLINED;\n    }\n    \n    upgrade = apr_table_get(r->headers_in, \"Upgrade\");\n    if (upgrade && *upgrade) {\n        const char *conn = apr_table_get(r->headers_in, \"Connection\");\n        if (ap_find_token(r->pool, conn, \"upgrade\")) {\n            apr_array_header_t *offers = NULL;\n            const char *err;\n            \n            err = ap_parse_token_list_strict(r->pool, upgrade, &offers, 0);\n            if (err) {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02910)\n                              \"parsing Upgrade header: %s\", err);\n                return DECLINED;\n            }\n            \n            if (offers && offers->nelts > 0) {\n                const char *protocol = ap_select_protocol(c, r, NULL, offers);\n                if (protocol && strcmp(protocol, ap_get_protocol(c))) {\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02909)\n                                  \"Upgrade selects '%s'\", protocol);\n                    /* Let the client know what we are upgrading to. */\n                    apr_table_clear(r->headers_out);\n                    apr_table_setn(r->headers_out, \"Upgrade\", protocol);\n                    apr_table_setn(r->headers_out, \"Connection\", \"Upgrade\");\n                    \n                    r->status = HTTP_SWITCHING_PROTOCOLS;\n                    r->status_line = ap_get_status_line(r->status);\n                    ap_send_interim_response(r, 1);\n\n                    ap_switch_protocol(c, r, r->server, protocol);\n\n                    /* make sure httpd closes the connection after this */\n                    c->keepalive = AP_CONN_CLOSE;\n                    return DONE;\n                }\n            }\n        }\n    }\n    else if (!c->keepalives) {\n        /* first request on a master connection, if we have protocols other\n         * than the current one enabled here, announce them to the\n         * client. If the client is already talking a protocol with requests\n         * on slave connections, leave it be. */\n        const apr_array_header_t *upgrades;\n        ap_get_protocol_upgrades(c, r, NULL, 0, &upgrades);\n        if (upgrades && upgrades->nelts > 0) {\n            char *protocols = apr_array_pstrcat(r->pool, upgrades, ',');\n            apr_table_setn(r->headers_out, \"Upgrade\", protocols);\n            apr_table_setn(r->headers_out, \"Connection\", \"Upgrade\");\n        }\n    }\n    \n    return DECLINED;\n}\n\nstatic int core_upgrade_storage(request_rec *r)\n{\n    if ((r->method_number == M_OPTIONS) && r->uri && (r->uri[0] == '*') &&\n        (r->uri[1] == '\\0')) {\n        return core_upgrade_handler(r);\n    }\n    return DECLINED;\n}\n\nstatic void register_hooks(apr_pool_t *p)\n{\n    errorlog_hash = apr_hash_make(p);\n    ap_register_log_hooks(p);\n    ap_register_config_hooks(p);\n    ap_expr_init(p);\n\n    /* create_connection and pre_connection should always be hooked\n     * APR_HOOK_REALLY_LAST by core to give other modules the opportunity\n     * to install alternate network transports and stop other functions\n     * from being run.\n     */\n    ap_hook_create_connection(core_create_conn, NULL, NULL,\n                              APR_HOOK_REALLY_LAST);\n    ap_hook_pre_connection(core_pre_connection, NULL, NULL,\n                           APR_HOOK_REALLY_LAST);\n\n    ap_hook_pre_config(core_pre_config, NULL, NULL, APR_HOOK_REALLY_FIRST);\n    ap_hook_post_config(core_post_config,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_check_config(core_check_config,NULL,NULL,APR_HOOK_FIRST);\n    ap_hook_test_config(core_dump_config,NULL,NULL,APR_HOOK_FIRST);\n    ap_hook_translate_name(ap_core_translate,NULL,NULL,APR_HOOK_REALLY_LAST);\n    ap_hook_map_to_storage(core_upgrade_storage,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_map_to_storage(core_map_to_storage,NULL,NULL,APR_HOOK_REALLY_LAST);\n    ap_hook_open_logs(ap_open_logs,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_child_init(core_child_init,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_child_init(ap_logs_child_init,NULL,NULL,APR_HOOK_MIDDLE);\n    ap_hook_handler(core_upgrade_handler,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_handler(default_handler,NULL,NULL,APR_HOOK_REALLY_LAST);\n    /* FIXME: I suspect we can eliminate the need for these do_nothings - Ben */\n    ap_hook_type_checker(do_nothing,NULL,NULL,APR_HOOK_REALLY_LAST);\n    ap_hook_fixups(core_override_type,NULL,NULL,APR_HOOK_REALLY_FIRST);\n    ap_hook_create_request(core_create_req, NULL, NULL, APR_HOOK_MIDDLE);\n    APR_OPTIONAL_HOOK(proxy, create_req, core_create_proxy_req, NULL, NULL,\n                      APR_HOOK_MIDDLE);\n    ap_hook_pre_mpm(ap_create_scoreboard, NULL, NULL, APR_HOOK_MIDDLE);\n    ap_hook_child_status(ap_core_child_status, NULL, NULL, APR_HOOK_MIDDLE);\n    ap_hook_insert_network_bucket(core_insert_network_bucket, NULL, NULL,\n                                  APR_HOOK_REALLY_LAST);\n    ap_hook_dirwalk_stat(core_dirwalk_stat, NULL, NULL, APR_HOOK_REALLY_LAST);\n    ap_hook_open_htaccess(ap_open_htaccess, NULL, NULL, APR_HOOK_REALLY_LAST);\n    ap_hook_optional_fn_retrieve(core_optional_fn_retrieve, NULL, NULL,\n                                 APR_HOOK_MIDDLE);\n    \n    /* register the core's insert_filter hook and register core-provided\n     * filters\n     */\n    ap_hook_insert_filter(core_insert_filter, NULL, NULL, APR_HOOK_MIDDLE);\n\n    ap_core_input_filter_handle =\n        ap_register_input_filter(\"CORE_IN\", ap_core_input_filter,\n                                 NULL, AP_FTYPE_NETWORK);\n    ap_content_length_filter_handle =\n        ap_register_output_filter(\"CONTENT_LENGTH\", ap_content_length_filter,\n                                  NULL, AP_FTYPE_PROTOCOL);\n    ap_core_output_filter_handle =\n        ap_register_output_filter(\"CORE\", ap_core_output_filter,\n                                  NULL, AP_FTYPE_NETWORK);\n    ap_subreq_core_filter_handle =\n        ap_register_output_filter(\"SUBREQ_CORE\", ap_sub_req_output_filter,\n                                  NULL, AP_FTYPE_CONTENT_SET);\n    ap_old_write_func =\n        ap_register_output_filter(\"OLD_WRITE\", ap_old_write_filter,\n                                  NULL, AP_FTYPE_RESOURCE - 10);\n}\n\nAP_DECLARE_MODULE(core) = {\n    MPM20_MODULE_STUFF,\n    AP_PLATFORM_REWRITE_ARGS_HOOK, /* hook to run before apache parses args */\n    create_core_dir_config,       /* create per-directory config structure */\n    merge_core_dir_configs,       /* merge per-directory config structures */\n    create_core_server_config,    /* create per-server config structure */\n    merge_core_server_configs,    /* merge per-server config structures */\n    core_cmds,                    /* command apr_table_t */\n    register_hooks                /* register hooks */\n};\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  core_filters.c\n * @brief Core input/output network filters.\n */\n\n#include \"apr.h\"\n#include \"apr_strings.h\"\n#include \"apr_lib.h\"\n#include \"apr_fnmatch.h\"\n#include \"apr_hash.h\"\n#include \"apr_thread_proc.h\"    /* for RLIMIT stuff */\n\n#define APR_WANT_IOVEC\n#define APR_WANT_STRFUNC\n#define APR_WANT_MEMFUNC\n#include \"apr_want.h\"\n\n#include \"ap_config.h\"\n#include \"httpd.h\"\n#include \"http_config.h\"\n#include \"http_core.h\"\n#include \"http_protocol.h\" /* For index_of_response().  Grump. */\n#include \"http_request.h\"\n#include \"http_vhost.h\"\n#include \"http_main.h\"     /* For the default_handler below... */\n#include \"http_log.h\"\n#include \"util_md5.h\"\n#include \"http_connection.h\"\n#include \"apr_buckets.h\"\n#include \"util_filter.h\"\n#include \"util_ebcdic.h\"\n#include \"mpm_common.h\"\n#include \"scoreboard.h\"\n#include \"mod_core.h\"\n#include \"ap_listen.h\"\n\n#include \"mod_so.h\" /* for ap_find_loaded_module_symbol */\n\n#define AP_MIN_SENDFILE_BYTES           (256)\n\n/**\n * Remove all zero length buckets from the brigade.\n */\n#define BRIGADE_NORMALIZE(b) \\\ndo { \\\n    apr_bucket *e = APR_BRIGADE_FIRST(b); \\\n    do {  \\\n        if (e->length == 0 && !APR_BUCKET_IS_METADATA(e)) { \\\n            apr_bucket *d; \\\n            d = APR_BUCKET_NEXT(e); \\\n            apr_bucket_delete(e); \\\n            e = d; \\\n        } \\\n        else { \\\n            e = APR_BUCKET_NEXT(e); \\\n        } \\\n    } while (!APR_BRIGADE_EMPTY(b) && (e != APR_BRIGADE_SENTINEL(b))); \\\n} while (0)\n\n/* we know core's module_index is 0 */\n#undef APLOG_MODULE_INDEX\n#define APLOG_MODULE_INDEX AP_CORE_MODULE_INDEX\n\nstruct core_output_filter_ctx {\n    apr_bucket_brigade *buffered_bb;\n    apr_pool_t *deferred_write_pool;\n    apr_size_t bytes_written;\n    struct iovec *vec;\n    apr_size_t nvec;\n};\n\n\napr_status_t ap_core_input_filter(ap_filter_t *f, apr_bucket_brigade *b,\n                                  ap_input_mode_t mode, apr_read_type_e block,\n                                  apr_off_t readbytes)\n{\n    apr_status_t rv;\n    core_net_rec *net = f->ctx;\n    core_ctx_t *ctx = net->in_ctx;\n    const char *str;\n    apr_size_t len;\n\n    if (mode == AP_MODE_INIT) {\n        /*\n         * this mode is for filters that might need to 'initialize'\n         * a connection before reading request data from a client.\n         * NNTP over SSL for example needs to handshake before the\n         * server sends the welcome message.\n         * such filters would have changed the mode before this point\n         * is reached.  however, protocol modules such as NNTP should\n         * not need to know anything about SSL.  given the example, if\n         * SSL is not in the filter chain, AP_MODE_INIT is a noop.\n         */\n        return APR_SUCCESS;\n    }\n\n    if (!ctx)\n    {\n        net->in_ctx = ctx = apr_palloc(f->c->pool, sizeof(*ctx));\n        ctx->b = apr_brigade_create(f->c->pool, f->c->bucket_alloc);\n        ctx->tmpbb = apr_brigade_create(f->c->pool, f->c->bucket_alloc);\n        /* seed the brigade with the client socket. */\n        rv = ap_run_insert_network_bucket(f->c, ctx->b, net->client_socket);\n        if (rv != APR_SUCCESS)\n            return rv;\n    }\n    else if (APR_BRIGADE_EMPTY(ctx->b)) {\n        return APR_EOF;\n    }\n\n    /* ### This is bad. */\n    BRIGADE_NORMALIZE(ctx->b);\n\n    /* check for empty brigade again *AFTER* BRIGADE_NORMALIZE()\n     * If we have lost our socket bucket (see above), we are EOF.\n     *\n     * Ideally, this should be returning SUCCESS with EOS bucket, but\n     * some higher-up APIs (spec. read_request_line via ap_rgetline)\n     * want an error code. */\n    if (APR_BRIGADE_EMPTY(ctx->b)) {\n        return APR_EOF;\n    }\n\n    if (mode == AP_MODE_GETLINE) {\n        /* we are reading a single LF line, e.g. the HTTP headers */\n        rv = apr_brigade_split_line(b, ctx->b, block, HUGE_STRING_LEN);\n        /* We should treat EAGAIN here the same as we do for EOF (brigade is\n         * empty).  We do this by returning whatever we have read.  This may\n         * or may not be bogus, but is consistent (for now) with EOF logic.\n         */\n        if (APR_STATUS_IS_EAGAIN(rv) && block == APR_NONBLOCK_READ) {\n            rv = APR_SUCCESS;\n        }\n        return rv;\n    }\n\n    /* ### AP_MODE_PEEK is a horrific name for this mode because we also\n     * eat any CRLFs that we see.  That's not the obvious intention of\n     * this mode.  Determine whether anyone actually uses this or not. */\n    if (mode == AP_MODE_EATCRLF) {\n        apr_bucket *e;\n        const char *c;\n\n        /* The purpose of this loop is to ignore any CRLF (or LF) at the end\n         * of a request.  Many browsers send extra lines at the end of POST\n         * requests.  We use the PEEK method to determine if there is more\n         * data on the socket, so that we know if we should delay sending the\n         * end of one request until we have served the second request in a\n         * pipelined situation.  We don't want to actually delay sending a\n         * response if the server finds a CRLF (or LF), becuause that doesn't\n         * mean that there is another request, just a blank line.\n         */\n        while (1) {\n            if (APR_BRIGADE_EMPTY(ctx->b))\n                return APR_EOF;\n\n            e = APR_BRIGADE_FIRST(ctx->b);\n\n            rv = apr_bucket_read(e, &str, &len, APR_NONBLOCK_READ);\n\n            if (rv != APR_SUCCESS)\n                return rv;\n\n            c = str;\n            while (c < str + len) {\n                if (*c == APR_ASCII_LF)\n                    c++;\n                else if (*c == APR_ASCII_CR && *(c + 1) == APR_ASCII_LF)\n                    c += 2;\n                else\n                    return APR_SUCCESS;\n            }\n\n            /* If we reach here, we were a bucket just full of CRLFs, so\n             * just toss the bucket. */\n            /* FIXME: Is this the right thing to do in the core? */\n            apr_bucket_delete(e);\n        }\n        return APR_SUCCESS;\n    }\n\n    /* If mode is EXHAUSTIVE, we want to just read everything until the end\n     * of the brigade, which in this case means the end of the socket.\n     * To do this, we attach the brigade that has currently been setaside to\n     * the brigade that was passed down, and send that brigade back.\n     *\n     * NOTE:  This is VERY dangerous to use, and should only be done with\n     * extreme caution.  FWLIW, this would be needed by an MPM like Perchild;\n     * such an MPM can easily request the socket and all data that has been\n     * read, which means that it can pass it to the correct child process.\n     */\n    if (mode == AP_MODE_EXHAUSTIVE) {\n        apr_bucket *e;\n\n        /* Tack on any buckets that were set aside. */\n        APR_BRIGADE_CONCAT(b, ctx->b);\n\n        /* Since we've just added all potential buckets (which will most\n         * likely simply be the socket bucket) we know this is the end,\n         * so tack on an EOS too. */\n        /* We have read until the brigade was empty, so we know that we\n         * must be EOS. */\n        e = apr_bucket_eos_create(f->c->bucket_alloc);\n        APR_BRIGADE_INSERT_TAIL(b, e);\n        return APR_SUCCESS;\n    }\n\n    /* read up to the amount they specified. */\n    if (mode == AP_MODE_READBYTES || mode == AP_MODE_SPECULATIVE) {\n        apr_bucket *e;\n\n        AP_DEBUG_ASSERT(readbytes > 0);\n\n        e = APR_BRIGADE_FIRST(ctx->b);\n        rv = apr_bucket_read(e, &str, &len, block);\n\n        if (APR_STATUS_IS_EAGAIN(rv) && block == APR_NONBLOCK_READ) {\n            /* getting EAGAIN for a blocking read is an error; for a\n             * non-blocking read, return an empty brigade. */\n            return APR_SUCCESS;\n        }\n        else if (rv != APR_SUCCESS) {\n            return rv;\n        }\n        else if (block == APR_BLOCK_READ && len == 0) {\n            /* We wanted to read some bytes in blocking mode.  We read\n             * 0 bytes.  Hence, we now assume we are EOS.\n             *\n             * When we are in normal mode, return an EOS bucket to the\n             * caller.\n             * When we are in speculative mode, leave ctx->b empty, so\n             * that the next call returns an EOS bucket.\n             */\n            apr_bucket_delete(e);\n\n            if (mode == AP_MODE_READBYTES) {\n                e = apr_bucket_eos_create(f->c->bucket_alloc);\n                APR_BRIGADE_INSERT_TAIL(b, e);\n            }\n            return APR_SUCCESS;\n        }\n\n        /* Have we read as much data as we wanted (be greedy)? */\n        if (len < readbytes) {\n            apr_size_t bucket_len;\n\n            rv = APR_SUCCESS;\n            /* We already registered the data in e in len */\n            e = APR_BUCKET_NEXT(e);\n            while ((len < readbytes) && (rv == APR_SUCCESS)\n                   && (e != APR_BRIGADE_SENTINEL(ctx->b))) {\n                /* Check for the availability of buckets with known length */\n                if (e->length != (apr_size_t)-1) {\n                    len += e->length;\n                    e = APR_BUCKET_NEXT(e);\n                }\n                else {\n                    /*\n                     * Read from bucket, but non blocking. If there isn't any\n                     * more data, well than this is fine as well, we will\n                     * not wait for more since we already got some and we are\n                     * only checking if there isn't more.\n                     */\n                    rv = apr_bucket_read(e, &str, &bucket_len,\n                                         APR_NONBLOCK_READ);\n                    if (rv == APR_SUCCESS) {\n                        len += bucket_len;\n                        e = APR_BUCKET_NEXT(e);\n                    }\n                }\n            }\n        }\n\n        /* We can only return at most what we read. */\n        if (len < readbytes) {\n            readbytes = len;\n        }\n\n        rv = apr_brigade_partition(ctx->b, readbytes, &e);\n        if (rv != APR_SUCCESS) {\n            return rv;\n        }\n\n        /* Must do move before CONCAT */\n        ctx->tmpbb = apr_brigade_split_ex(ctx->b, e, ctx->tmpbb);\n\n        if (mode == AP_MODE_READBYTES) {\n            APR_BRIGADE_CONCAT(b, ctx->b);\n        }\n        else if (mode == AP_MODE_SPECULATIVE) {\n            apr_bucket *copy_bucket;\n\n            for (e = APR_BRIGADE_FIRST(ctx->b);\n                 e != APR_BRIGADE_SENTINEL(ctx->b);\n                 e = APR_BUCKET_NEXT(e))\n            {\n                rv = apr_bucket_copy(e, &copy_bucket);\n                if (rv != APR_SUCCESS) {\n                    return rv;\n                }\n                APR_BRIGADE_INSERT_TAIL(b, copy_bucket);\n            }\n        }\n\n        /* Take what was originally there and place it back on ctx->b */\n        APR_BRIGADE_CONCAT(ctx->b, ctx->tmpbb);\n    }\n    return APR_SUCCESS;\n}\n\nstatic void setaside_remaining_output(ap_filter_t *f,\n                                      core_output_filter_ctx_t *ctx,\n                                      apr_bucket_brigade *bb,\n                                      conn_rec *c);\n\nstatic apr_status_t send_brigade_nonblocking(apr_socket_t *s,\n                                             apr_bucket_brigade *bb,\n                                             core_output_filter_ctx_t *ctx,\n                                             conn_rec *c);\n\nstatic apr_status_t writev_nonblocking(apr_socket_t *s,\n                                       apr_bucket_brigade *bb,\n                                       core_output_filter_ctx_t *ctx,\n                                       apr_size_t bytes_to_write,\n                                       apr_size_t nvec,\n                                       conn_rec *c);\n\n#if APR_HAS_SENDFILE\nstatic apr_status_t sendfile_nonblocking(apr_socket_t *s,\n                                         apr_bucket *bucket,\n                                         core_output_filter_ctx_t *ctx,\n                                         conn_rec *c);\n#endif\n\n/* XXX: Should these be configurable parameters? */\n#define THRESHOLD_MIN_WRITE 4096\n\n/* Optional function coming from mod_logio, used for logging of output\n * traffic\n */\nextern APR_OPTIONAL_FN_TYPE(ap_logio_add_bytes_out) *ap__logio_add_bytes_out;\n\nstatic int should_send_brigade(apr_bucket_brigade *bb, conn_rec *c, int *flush)\n{\n    core_server_config *conf =\n        ap_get_core_module_config(c->base_server->module_config);\n    apr_size_t total_bytes = 0, non_file_bytes = 0;\n    apr_uint32_t eor_buckets = 0;\n    apr_bucket *bucket;\n    int need_flush = 0;\n\n    /* Scan through the brigade and decide whether we need to flush it,\n     * based on the following rules:\n     *\n     *  a) The brigade contains a flush bucket: Do a blocking write\n     *     of everything up that point.\n     *\n     *  b) The request is in CONN_STATE_HANDLER state, and the brigade\n     *     contains at least flush_max_threshold bytes in non-file\n     *     buckets: Do blocking writes until the amount of data in the\n     *     buffer is less than flush_max_threshold.  (The point of this\n     *     rule is to provide flow control, in case a handler is\n     *     streaming out lots of data faster than the data can be\n     *     sent to the client.)\n     *\n     *  c) The request is in CONN_STATE_HANDLER state, and the brigade\n     *     contains at least flush_max_pipelined EOR buckets:\n     *     Do blocking writes until less than flush_max_pipelined EOR\n     *     buckets are left. (The point of this rule is to prevent too many\n     *     FDs being kept open by pipelined requests, possibly allowing a\n     *     DoS).\n     *\n     *  d) The brigade contains a morphing bucket: otherwise ap_save_brigade()\n     *     could read the whole bucket into memory.\n     */\n    for (bucket = APR_BRIGADE_FIRST(bb);\n         bucket != APR_BRIGADE_SENTINEL(bb);\n         bucket = APR_BUCKET_NEXT(bucket)) {\n\n        if (!APR_BUCKET_IS_METADATA(bucket)) {\n            if (bucket->length == (apr_size_t)-1) {\n                if (flush) {\n                    ap_log_cerror(APLOG_MARK, APLOG_TRACE6, 0, c,\n                                  \"core_output_filter: flushing because \"\n                                  \"of morphing bucket\");\n                }\n                need_flush = 1;\n                break;\n            }\n\n            total_bytes += bucket->length;\n            if (!APR_BUCKET_IS_FILE(bucket)) {\n                non_file_bytes += bucket->length;\n                if (non_file_bytes > conf->flush_max_threshold) {\n                    if (flush) {\n                        ap_log_cerror(APLOG_MARK, APLOG_TRACE6, 0, c,\n                                      \"core_output_filter: flushing because \"\n                                      \"of max threshold\");\n                    }\n                    need_flush = 1;\n                    break;\n                }\n            }\n        }\n        else if (APR_BUCKET_IS_FLUSH(bucket)) {\n            if (flush) {\n                ap_log_cerror(APLOG_MARK, APLOG_TRACE6, 0, c,\n                              \"core_output_filter: flushing because \"\n                              \"of FLUSH bucket\");\n            }\n            need_flush = 1;\n            break;\n        }\n        else if (AP_BUCKET_IS_EOR(bucket)\n                 && conf->flush_max_pipelined >= 0\n                 && ++eor_buckets > conf->flush_max_pipelined) {\n            if (flush) {\n                ap_log_cerror(APLOG_MARK, APLOG_TRACE6, 0, c,\n                              \"core_output_filter: flushing because \"\n                              \"of max pipelined\");\n            }\n            need_flush = 1;\n            break;\n        }\n    }\n    if (flush) {\n        *flush = need_flush;\n    }\n\n    /* Also send if above flush_min_threshold, or if there are FILE buckets */\n    return (need_flush\n            || total_bytes >= THRESHOLD_MIN_WRITE\n            || total_bytes > non_file_bytes);\n}\n\napr_status_t ap_core_output_filter(ap_filter_t *f, apr_bucket_brigade *new_bb)\n{\n    conn_rec *c = f->c;\n    core_net_rec *net = f->ctx;\n    core_output_filter_ctx_t *ctx = net->out_ctx;\n    apr_bucket_brigade *bb = NULL;\n    apr_status_t rv = APR_SUCCESS;\n\n    /* Fail quickly if the connection has already been aborted. */\n    if (c->aborted) {\n        if (new_bb != NULL) {\n            apr_brigade_cleanup(new_bb);\n        }\n        return APR_ECONNABORTED;\n    }\n\n    if (ctx == NULL) {\n        ctx = apr_pcalloc(c->pool, sizeof(*ctx));\n        net->out_ctx = (core_output_filter_ctx_t *)ctx;\n        /*\n         * Need to create buffered_bb brigade with correct lifetime. Passing\n         * NULL to ap_save_brigade() would result in a brigade\n         * allocated from bb->pool which might be wrong.\n         */\n        ctx->buffered_bb = apr_brigade_create(c->pool, c->bucket_alloc);\n    }\n\n    if (new_bb != NULL)\n        bb = new_bb;\n\n    if ((ctx->buffered_bb != NULL) &&\n        !APR_BRIGADE_EMPTY(ctx->buffered_bb)) {\n        if (new_bb != NULL) {\n            APR_BRIGADE_PREPEND(bb, ctx->buffered_bb);\n        }\n        else {\n            bb = ctx->buffered_bb;\n        }\n    }\n    else if (new_bb == NULL) {\n        c->data_in_output_filters = 0;\n        return APR_SUCCESS;\n    }\n\n    if (!new_bb || should_send_brigade(bb, c, NULL)) {\n        apr_socket_t *sock = net->client_socket;\n        apr_interval_time_t sock_timeout = 0;\n\n        /* Non-blocking writes on the socket in any case. */\n        apr_socket_timeout_get(sock, &sock_timeout);\n        apr_socket_timeout_set(sock, 0);\n\n        do {\n            rv = send_brigade_nonblocking(sock, bb, ctx, c);\n            if (new_bb && APR_STATUS_IS_EAGAIN(rv)) {\n                /* Scan through the brigade and decide whether we must absolutely\n                 * flush the remaining data, based on should_send_brigade() &flush\n                 * rules. If so, wait for writability and retry, otherwise we did\n                 * our best already and can wait for the next call.\n                 */\n                int flush;\n                (void)should_send_brigade(bb, c, &flush);\n                if (flush) {\n                    apr_int32_t nfd;\n                    apr_pollfd_t pfd;\n                    memset(&pfd, 0, sizeof(pfd));\n                    pfd.reqevents = APR_POLLOUT;\n                    pfd.desc_type = APR_POLL_SOCKET;\n                    pfd.desc.s = sock;\n                    pfd.p = c->pool;\n                    do {\n                        rv = apr_poll(&pfd, 1, &nfd, sock_timeout);\n                    } while (APR_STATUS_IS_EINTR(rv));\n                }\n            }\n        } while (rv == APR_SUCCESS && !APR_BRIGADE_EMPTY(bb));\n\n        /* Restore original socket timeout before leaving. */\n        apr_socket_timeout_set(sock, sock_timeout);\n    }\n\n    if (rv != APR_SUCCESS && !APR_STATUS_IS_EAGAIN(rv)) {\n        /* The client has aborted the connection */\n        ap_log_cerror(\n                APLOG_MARK, APLOG_TRACE1, rv, c,\n                \"core_output_filter: writing data to the network\");\n        /*\n         * Set c->aborted before apr_brigade_cleanup to have the correct status\n         * when logging the request as apr_brigade_cleanup triggers the logging\n         * of the request if it contains an EOR bucket.\n         */\n        c->aborted = 1;\n        apr_brigade_cleanup(bb);\n        return rv;\n    }\n\n    setaside_remaining_output(f, ctx, bb, c);\n    return APR_SUCCESS;\n}\n\n/*\n * This function assumes that either ctx->buffered_bb == NULL, or\n * ctx->buffered_bb is empty, or ctx->buffered_bb == bb\n */\nstatic void setaside_remaining_output(ap_filter_t *f,\n                                      core_output_filter_ctx_t *ctx,\n                                      apr_bucket_brigade *bb,\n                                      conn_rec *c)\n{\n    apr_bucket *bucket;\n\n    /* Don't set aside leading empty buckets, all previous data have been\n     * consumed so it's safe to delete them now.\n     */\n    while (((bucket = APR_BRIGADE_FIRST(bb)) != APR_BRIGADE_SENTINEL(bb)) &&\n           (APR_BUCKET_IS_METADATA(bucket) || (bucket->length == 0))) {\n        apr_bucket_delete(bucket);\n    }\n\n    c->data_in_output_filters = 0;\n    if (!APR_BRIGADE_EMPTY(bb)) {\n        c->data_in_output_filters = 1;\n        if (bb != ctx->buffered_bb) {\n            if (!ctx->deferred_write_pool) {\n                apr_pool_create(&ctx->deferred_write_pool, c->pool);\n                apr_pool_tag(ctx->deferred_write_pool, \"deferred_write\");\n            }\n            ap_save_brigade(f, &(ctx->buffered_bb), &bb,\n                            ctx->deferred_write_pool);\n        }\n    }\n    else if (ctx->deferred_write_pool) {\n        /*\n         * There are no more requests in the pipeline. We can just clear the\n         * pool.\n         */\n        apr_pool_clear(ctx->deferred_write_pool);\n    }\n}\n\n#ifndef APR_MAX_IOVEC_SIZE\n#define NVEC_MIN 16\n#define NVEC_MAX NVEC_MIN\n#else\n#if APR_MAX_IOVEC_SIZE > 16\n#define NVEC_MIN 16\n#else\n#define NVEC_MIN APR_MAX_IOVEC_SIZE\n#endif\n#define NVEC_MAX APR_MAX_IOVEC_SIZE\n#endif\n\nstatic APR_INLINE int is_in_memory_bucket(apr_bucket *b)\n{\n    /* These buckets' data are already in memory. */\n    return APR_BUCKET_IS_HEAP(b)\n           || APR_BUCKET_IS_POOL(b)\n           || APR_BUCKET_IS_TRANSIENT(b)\n           || APR_BUCKET_IS_IMMORTAL(b);\n}\n\n#if APR_HAS_SENDFILE\nstatic APR_INLINE int can_sendfile_bucket(apr_bucket *b)\n{\n    /* Use sendfile to send the bucket unless:\n     *   - the bucket is not a file bucket, or\n     *   - the file is too small for sendfile to be useful, or\n     *   - sendfile is disabled in the httpd config via \"EnableSendfile off\".\n     */\n    if (APR_BUCKET_IS_FILE(b) && b->length >= AP_MIN_SENDFILE_BYTES) {\n        apr_file_t *file = ((apr_bucket_file *)b->data)->fd;\n        return apr_file_flags_get(file) & APR_SENDFILE_ENABLED;\n    }\n    else {\n        return 0;\n    }\n}\n#endif\n\nstatic apr_status_t send_brigade_nonblocking(apr_socket_t *s,\n                                             apr_bucket_brigade *bb,\n                                             core_output_filter_ctx_t *ctx,\n                                             conn_rec *c)\n{\n    apr_status_t rv = APR_SUCCESS;\n    core_server_config *conf =\n        ap_get_core_module_config(c->base_server->module_config);\n    apr_size_t nvec = 0, nbytes = 0;\n    apr_bucket *bucket, *next;\n    const char *data;\n    apr_size_t length;\n\n    for (bucket = APR_BRIGADE_FIRST(bb);\n         bucket != APR_BRIGADE_SENTINEL(bb);\n         bucket = next) {\n        next = APR_BUCKET_NEXT(bucket);\n\n#if APR_HAS_SENDFILE\n        if (can_sendfile_bucket(bucket)) {\n            if (nvec > 0) {\n                (void)apr_socket_opt_set(s, APR_TCP_NOPUSH, 1);\n                rv = writev_nonblocking(s, bb, ctx, nbytes, nvec, c);\n                if (rv != APR_SUCCESS) {\n                    goto cleanup;\n                }\n                nbytes = 0;\n                nvec = 0;\n            }\n            rv = sendfile_nonblocking(s, bucket, ctx, c);\n            if (rv != APR_SUCCESS) {\n                goto cleanup;\n            }\n            continue;\n        }\n#endif /* APR_HAS_SENDFILE */\n\n        if (bucket->length) {\n            /* Non-blocking read first, in case this is a morphing\n             * bucket type. */\n            rv = apr_bucket_read(bucket, &data, &length, APR_NONBLOCK_READ);\n            if (APR_STATUS_IS_EAGAIN(rv)) {\n                /* Read would block; flush any pending data and retry. */\n                if (nvec) {\n                    rv = writev_nonblocking(s, bb, ctx, nbytes, nvec, c);\n                    if (rv != APR_SUCCESS) {\n                        goto cleanup;\n                    }\n                    nbytes = 0;\n                    nvec = 0;\n                }\n                (void)apr_socket_opt_set(s, APR_TCP_NOPUSH, 0);\n\n                rv = apr_bucket_read(bucket, &data, &length, APR_BLOCK_READ);\n            }\n            if (rv != APR_SUCCESS) {\n                goto cleanup;\n            }\n\n            /* reading may have split the bucket, so recompute next: */\n            next = APR_BUCKET_NEXT(bucket);\n        }\n\n        if (!bucket->length) {\n            /* Don't delete empty buckets until all the previous ones have been\n             * sent (nvec == 0); this must happen in sequence since metabuckets\n             * like EOR could free the data still pointed to by the iovec. So\n             * unless the latter is empty, let writev_nonblocking() cleanup the\n             * brigade in order.\n             */\n            if (!nvec) {\n                apr_bucket_delete(bucket);\n            }\n            continue;\n        }\n\n        /* Make sure that these new data fit in our iovec. */\n        if (nvec == ctx->nvec) {\n            if (nvec == NVEC_MAX) {\n                (void)apr_socket_opt_set(s, APR_TCP_NOPUSH, 1);\n                rv = writev_nonblocking(s, bb, ctx, nbytes, nvec, c);\n                if (rv != APR_SUCCESS) {\n                    goto cleanup;\n                }\n                nbytes = 0;\n                nvec = 0;\n            }\n            else {\n                struct iovec *newvec;\n                apr_size_t newn = nvec * 2;\n                if (newn < NVEC_MIN) {\n                    newn = NVEC_MIN;\n                }\n                else if (newn > NVEC_MAX) {\n                    newn = NVEC_MAX;\n                }\n                newvec = apr_palloc(c->pool, newn * sizeof(struct iovec));\n                if (nvec) {\n                    memcpy(newvec, ctx->vec, nvec * sizeof(struct iovec));\n                }\n                ctx->vec = newvec;\n                ctx->nvec = newn;\n            }\n        }\n        nbytes += length;\n        ctx->vec[nvec].iov_base = (void *)data;\n        ctx->vec[nvec].iov_len = length;\n        nvec++;\n\n        /* Flush above max threshold, unless the brigade still contains in\n         * memory buckets which we want to try writing in the same pass (if\n         * we are at the end of the brigade, the write will happen outside\n         * the loop anyway).\n         */\n        if (nbytes > conf->flush_max_threshold\n                && next != APR_BRIGADE_SENTINEL(bb)\n                && !is_in_memory_bucket(next)) {\n            (void)apr_socket_opt_set(s, APR_TCP_NOPUSH, 1);\n            rv = writev_nonblocking(s, bb, ctx, nbytes, nvec, c);\n            if (rv != APR_SUCCESS) {\n                goto cleanup;\n            }\n            nbytes = 0;\n            nvec = 0;\n        }\n    }\n    if (nvec > 0) {\n        rv = writev_nonblocking(s, bb, ctx, nbytes, nvec, c);\n    }\n\ncleanup:\n    (void)apr_socket_opt_set(s, APR_TCP_NOPUSH, 0);\n    return rv;\n}\n\nstatic apr_status_t writev_nonblocking(apr_socket_t *s,\n                                       apr_bucket_brigade *bb,\n                                       core_output_filter_ctx_t *ctx,\n                                       apr_size_t bytes_to_write,\n                                       apr_size_t nvec,\n                                       conn_rec *c)\n{\n    apr_status_t rv;\n    struct iovec *vec = ctx->vec;\n    apr_size_t bytes_written = 0;\n    apr_size_t i, offset = 0;\n\n    do {\n        apr_size_t n = 0;\n        rv = apr_socket_sendv(s, vec + offset, nvec - offset, &n);\n        bytes_written += n;\n\n        for (i = offset; i < nvec; ) {\n            apr_bucket *bucket = APR_BRIGADE_FIRST(bb);\n            if (!bucket->length) {\n                apr_bucket_delete(bucket);\n            }\n            else if (n >= vec[i].iov_len) {\n                apr_bucket_delete(bucket);\n                n -= vec[i++].iov_len;\n                offset++;\n            }\n            else {\n                if (n) {\n                    apr_bucket_split(bucket, n);\n                    apr_bucket_delete(bucket);\n                    vec[i].iov_len -= n;\n                    vec[i].iov_base = (char *) vec[i].iov_base + n;\n                }\n                break;\n            }\n        }\n    } while (rv == APR_SUCCESS && bytes_written < bytes_to_write);\n\n    if ((ap__logio_add_bytes_out != NULL) && (bytes_written > 0)) {\n        ap__logio_add_bytes_out(c, bytes_written);\n    }\n    ctx->bytes_written += bytes_written;\n\n    ap_log_cerror(APLOG_MARK, APLOG_TRACE6, rv, c,\n                  \"writev_nonblocking: %\"APR_SIZE_T_FMT\"/%\"APR_SIZE_T_FMT,\n                  bytes_written, bytes_to_write);\n    return rv;\n}\n\n#if APR_HAS_SENDFILE\n\nstatic apr_status_t sendfile_nonblocking(apr_socket_t *s,\n                                         apr_bucket *bucket,\n                                         core_output_filter_ctx_t *ctx,\n                                         conn_rec *c)\n{\n    apr_status_t rv;\n    apr_file_t *file = ((apr_bucket_file *)bucket->data)->fd;\n    apr_size_t bytes_written = bucket->length; /* bytes_to_write for now */\n    apr_off_t file_offset = bucket->start;\n\n    rv = apr_socket_sendfile(s, file, NULL, &file_offset, &bytes_written, 0);\n    if ((ap__logio_add_bytes_out != NULL) && (bytes_written > 0)) {\n        ap__logio_add_bytes_out(c, bytes_written);\n    }\n    ctx->bytes_written += bytes_written;\n\n    ap_log_cerror(APLOG_MARK, APLOG_TRACE6, rv, c,\n                  \"sendfile_nonblocking: %\" APR_SIZE_T_FMT \"/%\" APR_SIZE_T_FMT,\n                  bytes_written, bucket->length);\n    if (bytes_written >= bucket->length) {\n        apr_bucket_delete(bucket);\n    }\n    else if (bytes_written > 0) {\n        apr_bucket_split(bucket, bytes_written);\n        apr_bucket_delete(bucket);\n        if (rv == APR_SUCCESS) {\n            rv = APR_EAGAIN;\n        }\n    }\n    return rv;\n}\n\n#endif\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * protocol.c --- routines which directly communicate with the client.\n *\n * Code originally by Rob McCool; much redone by Robert S. Thau\n * and the Apache Software Foundation.\n */\n\n#include \"apr.h\"\n#include \"apr_strings.h\"\n#include \"apr_buckets.h\"\n#include \"apr_lib.h\"\n#include \"apr_signal.h\"\n#include \"apr_strmatch.h\"\n\n#define APR_WANT_STDIO          /* for sscanf */\n#define APR_WANT_STRFUNC\n#define APR_WANT_MEMFUNC\n#include \"apr_want.h\"\n\n#include \"util_filter.h\"\n#include \"ap_config.h\"\n#include \"httpd.h\"\n#include \"http_config.h\"\n#include \"http_core.h\"\n#include \"http_protocol.h\"\n#include \"http_main.h\"\n#include \"http_request.h\"\n#include \"http_vhost.h\"\n#include \"http_log.h\"           /* For errors detected in basic auth common\n                                 * support code... */\n#include \"mod_core.h\"\n#include \"util_charset.h\"\n#include \"util_ebcdic.h\"\n#include \"scoreboard.h\"\n\n#if APR_HAVE_STDARG_H\n#include <stdarg.h>\n#endif\n#if APR_HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n/* we know core's module_index is 0 */\n#undef APLOG_MODULE_INDEX\n#define APLOG_MODULE_INDEX AP_CORE_MODULE_INDEX\n\nAPR_HOOK_STRUCT(\n    APR_HOOK_LINK(pre_read_request)\n    APR_HOOK_LINK(post_read_request)\n    APR_HOOK_LINK(log_transaction)\n    APR_HOOK_LINK(http_scheme)\n    APR_HOOK_LINK(default_port)\n    APR_HOOK_LINK(note_auth_failure)\n    APR_HOOK_LINK(protocol_propose)\n    APR_HOOK_LINK(protocol_switch)\n    APR_HOOK_LINK(protocol_get)\n)\n\nAP_DECLARE_DATA ap_filter_rec_t *ap_old_write_func = NULL;\n\n\n/* Patterns to match in ap_make_content_type() */\nstatic const char *needcset[] = {\n    \"text/plain\",\n    \"text/html\",\n    NULL\n};\nstatic const apr_strmatch_pattern **needcset_patterns;\nstatic const apr_strmatch_pattern *charset_pattern;\n\nAP_DECLARE(void) ap_setup_make_content_type(apr_pool_t *pool)\n{\n    int i;\n    for (i = 0; needcset[i]; i++) {\n        continue;\n    }\n    needcset_patterns = (const apr_strmatch_pattern **)\n        apr_palloc(pool, (i + 1) * sizeof(apr_strmatch_pattern *));\n    for (i = 0; needcset[i]; i++) {\n        needcset_patterns[i] = apr_strmatch_precompile(pool, needcset[i], 0);\n    }\n    needcset_patterns[i] = NULL;\n    charset_pattern = apr_strmatch_precompile(pool, \"charset=\", 0);\n}\n\n/*\n * Builds the content-type that should be sent to the client from the\n * content-type specified.  The following rules are followed:\n *    - if type is NULL or \"\", return NULL (do not set content-type).\n *    - if charset adding is disabled, stop processing and return type.\n *    - then, if there are no parameters on type, add the default charset\n *    - return type\n */\nAP_DECLARE(const char *)ap_make_content_type(request_rec *r, const char *type)\n{\n    const apr_strmatch_pattern **pcset;\n    core_dir_config *conf =\n        (core_dir_config *)ap_get_core_module_config(r->per_dir_config);\n    core_request_config *request_conf;\n    apr_size_t type_len;\n\n    if (!type || *type == '\\0') {\n        return NULL;\n    }\n\n    if (conf->add_default_charset != ADD_DEFAULT_CHARSET_ON) {\n        return type;\n    }\n\n    request_conf = ap_get_core_module_config(r->request_config);\n    if (request_conf->suppress_charset) {\n        return type;\n    }\n\n    type_len = strlen(type);\n\n    if (apr_strmatch(charset_pattern, type, type_len) != NULL) {\n        /* already has parameter, do nothing */\n        /* XXX we don't check the validity */\n        ;\n    }\n    else {\n        /* see if it makes sense to add the charset. At present,\n         * we only add it if the Content-type is one of needcset[]\n         */\n        for (pcset = needcset_patterns; *pcset ; pcset++) {\n            if (apr_strmatch(*pcset, type, type_len) != NULL) {\n                struct iovec concat[3];\n                concat[0].iov_base = (void *)type;\n                concat[0].iov_len = type_len;\n                concat[1].iov_base = (void *)\"; charset=\";\n                concat[1].iov_len = sizeof(\"; charset=\") - 1;\n                concat[2].iov_base = (void *)(conf->add_default_charset_name);\n                concat[2].iov_len = strlen(conf->add_default_charset_name);\n                type = apr_pstrcatv(r->pool, concat, 3, NULL);\n                break;\n            }\n        }\n    }\n\n    return type;\n}\n\nAP_DECLARE(void) ap_set_content_length(request_rec *r, apr_off_t clength)\n{\n    r->clength = clength;\n    apr_table_setn(r->headers_out, \"Content-Length\",\n                   apr_off_t_toa(r->pool, clength));\n}\n\n/*\n * Return the latest rational time from a request/mtime (modification time)\n * pair.  We return the mtime unless it's in the future, in which case we\n * return the current time.  We use the request time as a reference in order\n * to limit the number of calls to time().  We don't check for futurosity\n * unless the mtime is at least as new as the reference.\n */\nAP_DECLARE(apr_time_t) ap_rationalize_mtime(request_rec *r, apr_time_t mtime)\n{\n    apr_time_t now;\n\n    /* For all static responses, it's almost certain that the file was\n     * last modified before the beginning of the request.  So there's\n     * no reason to call time(NULL) again.  But if the response has been\n     * created on demand, then it might be newer than the time the request\n     * started.  In this event we really have to call time(NULL) again\n     * so that we can give the clients the most accurate Last-Modified.  If we\n     * were given a time in the future, we return the current time - the\n     * Last-Modified can't be in the future.\n     */\n    now = (mtime < r->request_time) ? r->request_time : apr_time_now();\n    return (mtime > now) ? now : mtime;\n}\n\n/* Get a line of protocol input, including any continuation lines\n * caused by MIME folding (or broken clients) if fold != 0, and place it\n * in the buffer s, of size n bytes, without the ending newline.\n * \n * Pulls from r->proto_input_filters instead of r->input_filters for\n * stricter protocol adherence and better input filter behavior during\n * chunked trailer processing (for http).\n *\n * If s is NULL, ap_rgetline_core will allocate necessary memory from r->pool.\n *\n * Returns APR_SUCCESS if there are no problems and sets *read to be\n * the full length of s.\n *\n * APR_ENOSPC is returned if there is not enough buffer space.\n * Other errors may be returned on other errors.\n *\n * The [CR]LF are *not* returned in the buffer.  Therefore, a *read of 0\n * indicates that an empty line was read.\n *\n * Notes: Because the buffer uses 1 char for NUL, the most we can return is\n *        (n - 1) actual characters.\n *\n *        If no LF is detected on the last line due to a dropped connection\n *        or a full buffer, that's considered an error.\n */\nAP_DECLARE(apr_status_t) ap_rgetline_core(char **s, apr_size_t n,\n                                          apr_size_t *read, request_rec *r,\n                                          int flags, apr_bucket_brigade *bb)\n{\n    apr_status_t rv;\n    apr_bucket *e;\n    apr_size_t bytes_handled = 0, current_alloc = 0;\n    char *pos, *last_char = *s;\n    int do_alloc = (*s == NULL), saw_eos = 0;\n    int fold = flags & AP_GETLINE_FOLD;\n    int crlf = flags & AP_GETLINE_CRLF;\n    int nospc_eol = flags & AP_GETLINE_NOSPC_EOL;\n    int saw_eol = 0, saw_nospc = 0;\n\n    if (!n) {\n        /* Needs room for NUL byte at least */\n        *read = 0;\n        return APR_BADARG;\n    }\n\n    /*\n     * Initialize last_char as otherwise a random value will be compared\n     * against APR_ASCII_LF at the end of the loop if bb only contains\n     * zero-length buckets.\n     */\n    if (last_char)\n        *last_char = '\\0';\n\n    do {\n        apr_brigade_cleanup(bb);\n        rv = ap_get_brigade(r->proto_input_filters, bb, AP_MODE_GETLINE,\n                            APR_BLOCK_READ, 0);\n        if (rv != APR_SUCCESS) {\n            goto cleanup;\n        }\n\n        /* Something horribly wrong happened.  Someone didn't block! \n         * (this also happens at the end of each keepalive connection)\n         */\n        if (APR_BRIGADE_EMPTY(bb)) {\n            rv = APR_EGENERAL;\n            goto cleanup;\n        }\n\n        for (e = APR_BRIGADE_FIRST(bb);\n             e != APR_BRIGADE_SENTINEL(bb);\n             e = APR_BUCKET_NEXT(e))\n        {\n            const char *str;\n            apr_size_t len;\n\n            /* If we see an EOS, don't bother doing anything more. */\n            if (APR_BUCKET_IS_EOS(e)) {\n                saw_eos = 1;\n                break;\n            }\n\n            rv = apr_bucket_read(e, &str, &len, APR_BLOCK_READ);\n            if (rv != APR_SUCCESS) {\n                goto cleanup;\n            }\n\n            if (len == 0) {\n                /* no use attempting a zero-byte alloc (hurts when\n                 * using --with-efence --enable-pool-debug) or\n                 * doing any of the other logic either\n                 */\n                continue;\n            }\n\n            /* Would this overrun our buffer?  If so, we'll die. */\n            if (n < bytes_handled + len) {\n                /* Before we die, let's fill the buffer up to its limit (i.e.\n                 * fall through with the remaining length, if any), setting\n                 * saw_eol on LF to stop the outer loop appropriately; we may\n                 * come back here once the buffer is filled (no LF seen), and\n                 * either be done at that time or continue to wait for LF here\n                 * if nospc_eol is set.\n                 *\n                 * But there is also a corner cases which we want to address,\n                 * namely if the buffer is overrun by the final LF only (i.e.\n                 * the CR fits in); this is not really an overrun since we'll\n                 * strip the CR finally (and use it for NUL byte), but anyway\n                 * we have to handle the case so that it's not returned to the\n                 * caller as part of the truncated line (it's not!). This is\n                 * easier to consider that LF is out of counting and thus fall\n                 * through with no error (saw_eol is set to 2 so that we later\n                 * ignore LF handling already done here), while folding and\n                 * nospc_eol logics continue to work (or fail) appropriately.\n                 */\n                saw_eol = (str[len - 1] == APR_ASCII_LF);\n                if (/* First time around */\n                    saw_eol && !saw_nospc\n                    /*  Single LF completing the buffered CR, */\n                    && ((len == 1 && ((*s)[bytes_handled - 1] == APR_ASCII_CR))\n                    /*  or trailing CRLF overuns by LF only */\n                        || (len > 1 && str[len - 2] == APR_ASCII_CR\n                            && n - bytes_handled + 1 == len))) {\n                    /* In both cases *last_char is (to be) the CR stripped by\n                     * later 'bytes_handled = last_char - *s'.\n                     */\n                    saw_eol = 2;\n                }\n                else {\n                    /* In any other case we'd lose data. */\n                    rv = APR_ENOSPC;\n                    saw_nospc = 1;\n                }\n                len = n - bytes_handled;\n                if (!len) {\n                    if (saw_eol) {\n                        break;\n                    }\n                    if (nospc_eol) {\n                        continue;\n                    }\n                    goto cleanup;\n                }\n            }\n\n            /* Do we have to handle the allocation ourselves? */\n            if (do_alloc) {\n                /* We'll assume the common case where one bucket is enough. */\n                if (!*s) {\n                    current_alloc = len;\n                    *s = apr_palloc(r->pool, current_alloc + 1);\n                }\n                else if (bytes_handled + len > current_alloc) {\n                    /* Increase the buffer size */\n                    apr_size_t new_size = current_alloc * 2;\n                    char *new_buffer;\n\n                    if (bytes_handled + len > new_size) {\n                        new_size = (bytes_handled + len) * 2;\n                    }\n\n                    new_buffer = apr_palloc(r->pool, new_size + 1);\n\n                    /* Copy what we already had. */\n                    memcpy(new_buffer, *s, bytes_handled);\n                    current_alloc = new_size;\n                    *s = new_buffer;\n                }\n            }\n\n            /* Just copy the rest of the data to the end of the old buffer. */\n            pos = *s + bytes_handled;\n            memcpy(pos, str, len);\n            last_char = pos + len - 1;\n\n            /* We've now processed that new data - update accordingly. */\n            bytes_handled += len;\n        }\n\n        /* If we got a full line of input, stop reading */\n        if (last_char && (*last_char == APR_ASCII_LF)) {\n            saw_eol = 1;\n        }\n    } while (!saw_eol);\n\n    if (rv != APR_SUCCESS) {\n        /* End of line after APR_ENOSPC above */\n        goto cleanup;\n    }\n\n    /* Now terminate the string at the end of the line;\n     * if the last-but-one character is a CR, terminate there.\n     * LF is handled above (not accounted) when saw_eol == 2,\n     * the last char is CR to terminate at still.\n     */\n    if (saw_eol < 2) {\n        if (last_char > *s && last_char[-1] == APR_ASCII_CR) {\n            last_char--;\n        }\n        else if (crlf) {\n            rv = APR_EINVAL;\n            goto cleanup;\n        }\n    }\n    bytes_handled = last_char - *s;\n\n    /* If we're folding, we have more work to do.\n     *\n     * Note that if an EOS was seen, we know we can't have another line.\n     */\n    if (fold && bytes_handled && !saw_eos) {\n        for (;;) {\n            const char *str;\n            apr_size_t len;\n            char c;\n\n            /* Clear the temp brigade for this filter read. */\n            apr_brigade_cleanup(bb);\n\n            /* We only care about the first byte. */\n            rv = ap_get_brigade(r->proto_input_filters, bb, AP_MODE_SPECULATIVE,\n                                APR_BLOCK_READ, 1);\n            if (rv != APR_SUCCESS) {\n                goto cleanup;\n            }\n\n            if (APR_BRIGADE_EMPTY(bb)) {\n                break;\n            }\n\n            e = APR_BRIGADE_FIRST(bb);\n\n            /* If we see an EOS, don't bother doing anything more. */\n            if (APR_BUCKET_IS_EOS(e)) {\n                break;\n            }\n\n            rv = apr_bucket_read(e, &str, &len, APR_BLOCK_READ);\n            if (rv != APR_SUCCESS) {\n                apr_brigade_cleanup(bb);\n                goto cleanup;\n            }\n\n            /* Found one, so call ourselves again to get the next line.\n             *\n             * FIXME: If the folding line is completely blank, should we\n             * stop folding?  Does that require also looking at the next\n             * char?\n             */\n            /* When we call destroy, the buckets are deleted, so save that\n             * one character we need.  This simplifies our execution paths\n             * at the cost of one character read.\n             */\n            c = *str;\n            if (c == APR_ASCII_BLANK || c == APR_ASCII_TAB) {\n                /* Do we have enough space? We may be full now. */\n                if (bytes_handled >= n) {\n                    rv = APR_ENOSPC;\n                    goto cleanup;\n                }\n                else {\n                    apr_size_t next_size, next_len;\n                    char *tmp;\n\n                    /* If we're doing the allocations for them, we have to\n                     * give ourselves a NULL and copy it on return.\n                     */\n                    if (do_alloc) {\n                        tmp = NULL;\n                    }\n                    else {\n                        tmp = last_char;\n                    }\n\n                    next_size = n - bytes_handled;\n\n                    rv = ap_rgetline_core(&tmp, next_size, &next_len, r,\n                                          flags & ~AP_GETLINE_FOLD, bb);\n                    if (rv != APR_SUCCESS) {\n                        goto cleanup;\n                    }\n\n                    if (do_alloc && next_len > 0) {\n                        char *new_buffer;\n                        apr_size_t new_size = bytes_handled + next_len + 1;\n\n                        /* we need to alloc an extra byte for a null */\n                        new_buffer = apr_palloc(r->pool, new_size);\n\n                        /* Copy what we already had. */\n                        memcpy(new_buffer, *s, bytes_handled);\n\n                        /* copy the new line, including the trailing null */\n                        memcpy(new_buffer + bytes_handled, tmp, next_len);\n                        *s = new_buffer;\n                    }\n\n                    last_char += next_len;\n                    bytes_handled += next_len;\n                }\n            }\n            else { /* next character is not tab or space */\n                break;\n            }\n        }\n    }\n\ncleanup:\n    if (bytes_handled >= n) {\n        bytes_handled = n - 1;\n    }\n\n    *read = bytes_handled;\n    if (*s) {\n        /* ensure the string is NUL terminated */\n        (*s)[*read] = '\\0';\n\n        /* PR#43039: We shouldn't accept NULL bytes within the line */\n        bytes_handled = strlen(*s);\n        if (bytes_handled < *read) {\n            *read = bytes_handled;\n            if (rv == APR_SUCCESS) {\n                rv = APR_EINVAL;\n            }\n        }\n    }\n    return rv;\n}\n\n#if APR_CHARSET_EBCDIC\nAP_DECLARE(apr_status_t) ap_rgetline(char **s, apr_size_t n,\n                                     apr_size_t *read, request_rec *r,\n                                     int fold, apr_bucket_brigade *bb)\n{\n    /* on ASCII boxes, ap_rgetline is a macro which simply invokes\n     * ap_rgetline_core with the same parms\n     *\n     * on EBCDIC boxes, each complete http protocol input line needs to be\n     * translated into the code page used by the compiler.  Since\n     * ap_rgetline_core uses recursion, we do the translation in a wrapper\n     * function to ensure that each input character gets translated only once.\n     */\n    apr_status_t rv;\n\n    rv = ap_rgetline_core(s, n, read, r, fold, bb);\n    if (rv == APR_SUCCESS || APR_STATUS_IS_ENOSPC(rv)) {\n        ap_xlate_proto_from_ascii(*s, *read);\n    }\n    return rv;\n}\n#endif\n\nAP_DECLARE(int) ap_getline(char *s, int n, request_rec *r, int flags)\n{\n    char *tmp_s = s;\n    apr_status_t rv;\n    apr_size_t len;\n    apr_bucket_brigade *tmp_bb;\n\n    if (n < 1) {\n        /* Can't work since we always NUL terminate */\n        return -1;\n    }\n\n    tmp_bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    rv = ap_rgetline(&tmp_s, n, &len, r, flags, tmp_bb);\n    apr_brigade_destroy(tmp_bb);\n\n    /* Map the out-of-space condition to the old API. */\n    if (rv == APR_ENOSPC) {\n        return n;\n    }\n\n    /* Anything else is just bad. */\n    if (rv != APR_SUCCESS) {\n        return -1;\n    }\n\n    return (int)len;\n}\n\n/* parse_uri: break apart the uri\n * Side Effects:\n * - sets r->args to rest after '?' (or NULL if no '?')\n * - sets r->uri to request uri (without r->args part)\n * - sets r->hostname (if not set already) from request (scheme://host:port)\n */\nAP_CORE_DECLARE(void) ap_parse_uri(request_rec *r, const char *uri)\n{\n    int status = HTTP_OK;\n\n    r->unparsed_uri = apr_pstrdup(r->pool, uri);\n\n    /* http://issues.apache.org/bugzilla/show_bug.cgi?id=31875\n     * http://issues.apache.org/bugzilla/show_bug.cgi?id=28450\n     *\n     * This is not in fact a URI, it's a path.  That matters in the\n     * case of a leading double-slash.  We need to resolve the issue\n     * by normalizing that out before treating it as a URI.\n     */\n    while ((uri[0] == '/') && (uri[1] == '/')) {\n        ++uri ;\n    }\n    if (r->method_number == M_CONNECT) {\n        status = apr_uri_parse_hostinfo(r->pool, uri, &r->parsed_uri);\n    }\n    else {\n        status = apr_uri_parse(r->pool, uri, &r->parsed_uri);\n    }\n\n    if (status == APR_SUCCESS) {\n        /* if it has a scheme we may need to do absoluteURI vhost stuff */\n        if (r->parsed_uri.scheme\n            && !ap_cstr_casecmp(r->parsed_uri.scheme, ap_http_scheme(r))) {\n            r->hostname = r->parsed_uri.hostname;\n        }\n        else if (r->method_number == M_CONNECT) {\n            r->hostname = r->parsed_uri.hostname;\n        }\n\n        r->args = r->parsed_uri.query;\n        if (r->parsed_uri.path) {\n            r->uri = r->parsed_uri.path;\n        }\n        else if (r->method_number == M_OPTIONS) {\n            r->uri = apr_pstrdup(r->pool, \"*\");\n        }\n        else {\n            r->uri = apr_pstrdup(r->pool, \"/\");\n        }\n\n#if defined(OS2) || defined(WIN32)\n        /* Handle path translations for OS/2 and plug security hole.\n         * This will prevent \"http://www.wherever.com/..\\..\\/\" from\n         * returning a directory for the root drive.\n         */\n        {\n            char *x;\n\n            for (x = r->uri; (x = strchr(x, '\\\\')) != NULL; )\n                *x = '/';\n        }\n#endif /* OS2 || WIN32 */\n    }\n    else {\n        r->args = NULL;\n        r->hostname = NULL;\n        r->status = HTTP_BAD_REQUEST;             /* set error status */\n        r->uri = apr_pstrdup(r->pool, uri);\n    }\n}\n\n/* get the length of the field name for logging, but no more than 80 bytes */\n#define LOG_NAME_MAX_LEN 80\nstatic int field_name_len(const char *field)\n{\n    const char *end = ap_strchr_c(field, ':');\n    if (end == NULL || end - field > LOG_NAME_MAX_LEN)\n        return LOG_NAME_MAX_LEN;\n    return end - field;\n}\n\nstatic int read_request_line(request_rec *r, apr_bucket_brigade *bb)\n{\n    apr_size_t len;\n    int num_blank_lines = DEFAULT_LIMIT_BLANK_LINES;\n    core_server_config *conf = ap_get_core_module_config(r->server->module_config);\n    int strict = (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE);\n\n    /* Read past empty lines until we get a real request line,\n     * a read error, the connection closes (EOF), or we timeout.\n     *\n     * We skip empty lines because browsers have to tack a CRLF on to the end\n     * of POSTs to support old CERN webservers.  But note that we may not\n     * have flushed any previous response completely to the client yet.\n     * We delay the flush as long as possible so that we can improve\n     * performance for clients that are pipelining requests.  If a request\n     * is pipelined then we won't block during the (implicit) read() below.\n     * If the requests aren't pipelined, then the client is still waiting\n     * for the final buffer flush from us, and we will block in the implicit\n     * read().  B_SAFEREAD ensures that the BUFF layer flushes if it will\n     * have to block during a read.\n     */\n\n    do {\n        apr_status_t rv;\n\n        /* ensure ap_rgetline allocates memory each time thru the loop\n         * if there are empty lines\n         */\n        r->the_request = NULL;\n        rv = ap_rgetline(&(r->the_request), (apr_size_t)(r->server->limit_req_line + 2),\n                         &len, r, strict ? AP_GETLINE_CRLF : 0, bb);\n\n        if (rv != APR_SUCCESS) {\n            r->request_time = apr_time_now();\n\n            /* ap_rgetline returns APR_ENOSPC if it fills up the\n             * buffer before finding the end-of-line.  This is only going to\n             * happen if it exceeds the configured limit for a request-line.\n             */\n            if (APR_STATUS_IS_ENOSPC(rv)) {\n                r->status = HTTP_REQUEST_URI_TOO_LARGE;\n            }\n            else if (APR_STATUS_IS_TIMEUP(rv)) {\n                r->status = HTTP_REQUEST_TIME_OUT;\n            }\n            else if (APR_STATUS_IS_EINVAL(rv)) {\n                r->status = HTTP_BAD_REQUEST;\n            }\n            r->proto_num = HTTP_VERSION(1,0);\n            r->protocol  = apr_pstrdup(r->pool, \"HTTP/1.0\");\n            return 0;\n        }\n    } while ((len <= 0) && (--num_blank_lines >= 0));\n\n    if (APLOGrtrace5(r)) {\n        ap_log_rerror(APLOG_MARK, APLOG_TRACE5, 0, r,\n                      \"Request received from client: %s\",\n                      ap_escape_logitem(r->pool, r->the_request));\n    }\n\n    r->request_time = apr_time_now();\n    return 1;\n}\n\nAP_DECLARE(int) ap_parse_request_line(request_rec *r)\n{\n    core_server_config *conf = ap_get_core_module_config(r->server->module_config);\n    int strict = (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE);\n    enum {\n        rrl_none, rrl_badmethod, rrl_badwhitespace, rrl_excesswhitespace,\n        rrl_missinguri, rrl_baduri, rrl_badprotocol, rrl_trailingtext,\n        rrl_badmethod09, rrl_reject09\n    } deferred_error = rrl_none;\n    apr_size_t len = 0;\n    char *uri, *ll;\n\n    r->method = r->the_request;\n\n    /* If there is whitespace before a method, skip it and mark in error */\n    if (apr_isspace(*r->method)) {\n        deferred_error = rrl_badwhitespace; \n        for ( ; apr_isspace(*r->method); ++r->method)\n            ; \n    }\n\n    /* Scan the method up to the next whitespace, ensure it contains only\n     * valid http-token characters, otherwise mark in error\n     */\n    if (strict) {\n        ll = (char*) ap_scan_http_token(r->method);\n    }\n    else {\n        ll = (char*) ap_scan_vchar_obstext(r->method);\n    }\n\n    if (((ll == r->method) || (*ll && !apr_isspace(*ll)))\n            && deferred_error == rrl_none) {\n        deferred_error = rrl_badmethod;\n        ll = strpbrk(ll, \"\\t\\n\\v\\f\\r \");\n    }\n\n    /* Verify method terminated with a single SP, or mark as specific error */\n    if (!ll) {\n        if (deferred_error == rrl_none)\n            deferred_error = rrl_missinguri;\n        r->protocol = uri = \"\";\n        goto rrl_done;\n    }\n    else if (strict && ll[0] && apr_isspace(ll[1])\n             && deferred_error == rrl_none) {\n        deferred_error = rrl_excesswhitespace; \n    }\n\n    /* Advance uri pointer over leading whitespace, NUL terminate the method\n     * If non-SP whitespace is encountered, mark as specific error\n     */\n    for (uri = ll; apr_isspace(*uri); ++uri) \n        if (*uri != ' ' && deferred_error == rrl_none)\n            deferred_error = rrl_badwhitespace; \n    *ll = '\\0';\n\n    if (!*uri && deferred_error == rrl_none)\n        deferred_error = rrl_missinguri;\n\n    /* Scan the URI up to the next whitespace, ensure it contains no raw\n     * control characters, otherwise mark in error\n     */\n    ll = (char*) ap_scan_vchar_obstext(uri);\n    if (ll == uri || (*ll && !apr_isspace(*ll))) {\n        deferred_error = rrl_baduri;\n        ll = strpbrk(ll, \"\\t\\n\\v\\f\\r \");\n    }\n\n    /* Verify URI terminated with a single SP, or mark as specific error */\n    if (!ll) {\n        r->protocol = \"\";\n        goto rrl_done;\n    }\n    else if (strict && ll[0] && apr_isspace(ll[1])\n             && deferred_error == rrl_none) {\n        deferred_error = rrl_excesswhitespace; \n    }\n\n    /* Advance protocol pointer over leading whitespace, NUL terminate the uri\n     * If non-SP whitespace is encountered, mark as specific error\n     */\n    for (r->protocol = ll; apr_isspace(*r->protocol); ++r->protocol) \n        if (*r->protocol != ' ' && deferred_error == rrl_none)\n            deferred_error = rrl_badwhitespace; \n    *ll = '\\0';\n\n    /* Scan the protocol up to the next whitespace, validation comes later */\n    if (!(ll = (char*) ap_scan_vchar_obstext(r->protocol))) {\n        len = strlen(r->protocol);\n        goto rrl_done;\n    }\n    len = ll - r->protocol;\n\n    /* Advance over trailing whitespace, if found mark in error,\n     * determine if trailing text is found, unconditionally mark in error,\n     * finally NUL terminate the protocol string\n     */\n    if (*ll && !apr_isspace(*ll)) {\n        deferred_error = rrl_badprotocol;\n    }\n    else if (strict && *ll) {\n        deferred_error = rrl_excesswhitespace;\n    }\n    else {\n        for ( ; apr_isspace(*ll); ++ll)\n            if (*ll != ' ' && deferred_error == rrl_none)\n                deferred_error = rrl_badwhitespace; \n        if (*ll && deferred_error == rrl_none)\n            deferred_error = rrl_trailingtext;\n    }\n    *((char *)r->protocol + len) = '\\0';\n\nrrl_done:\n    /* For internal integrity and palloc efficiency, reconstruct the_request\n     * in one palloc, using only single SP characters, per spec.\n     */\n    r->the_request = apr_pstrcat(r->pool, r->method, *uri ? \" \" : NULL, uri,\n                                 *r->protocol ? \" \" : NULL, r->protocol, NULL);\n\n    if (len == 8\n            && r->protocol[0] == 'H' && r->protocol[1] == 'T'\n            && r->protocol[2] == 'T' && r->protocol[3] == 'P'\n            && r->protocol[4] == '/' && apr_isdigit(r->protocol[5])\n            && r->protocol[6] == '.' && apr_isdigit(r->protocol[7])\n            && r->protocol[5] != '0') {\n        r->assbackwards = 0;\n        r->proto_num = HTTP_VERSION(r->protocol[5] - '0', r->protocol[7] - '0');\n    }\n    else if (len == 8\n                 && (r->protocol[0] == 'H' || r->protocol[0] == 'h')\n                 && (r->protocol[1] == 'T' || r->protocol[1] == 't')\n                 && (r->protocol[2] == 'T' || r->protocol[2] == 't')\n                 && (r->protocol[3] == 'P' || r->protocol[3] == 'p')\n                 && r->protocol[4] == '/' && apr_isdigit(r->protocol[5])\n                 && r->protocol[6] == '.' && apr_isdigit(r->protocol[7])\n                 && r->protocol[5] != '0') {\n        r->assbackwards = 0;\n        r->proto_num = HTTP_VERSION(r->protocol[5] - '0', r->protocol[7] - '0');\n        if (strict && deferred_error == rrl_none)\n            deferred_error = rrl_badprotocol;\n        else\n            memcpy((char*)r->protocol, \"HTTP\", 4);\n    }\n    else if (r->protocol[0]) {\n        r->proto_num = HTTP_VERSION(0, 9);\n        /* Defer setting the r->protocol string till error msg is composed */\n        if (deferred_error == rrl_none)\n            deferred_error = rrl_badprotocol;\n    }\n    else {\n        r->assbackwards = 1;\n        r->protocol  = apr_pstrdup(r->pool, \"HTTP/0.9\");\n        r->proto_num = HTTP_VERSION(0, 9);\n    }\n\n    /* Determine the method_number and parse the uri prior to invoking error\n     * handling, such that these fields are available for substitution\n     */\n    r->method_number = ap_method_number_of(r->method);\n    if (r->method_number == M_GET && r->method[0] == 'H')\n        r->header_only = 1;\n\n    ap_parse_uri(r, uri);\n    if (r->status == HTTP_OK\n            && (r->parsed_uri.path != NULL)\n            && (r->parsed_uri.path[0] != '/')\n            && (r->method_number != M_OPTIONS\n                || strcmp(r->parsed_uri.path, \"*\") != 0)) {\n        /* Invalid request-target per RFC 7230 section 5.3 */\n        r->status = HTTP_BAD_REQUEST;\n    }\n\n    /* With the request understood, we can consider HTTP/0.9 specific errors */\n    if (r->proto_num == HTTP_VERSION(0, 9) && deferred_error == rrl_none) {\n        if (conf->http09_enable == AP_HTTP09_DISABLE)\n            deferred_error = rrl_reject09;\n        else if (strict && (r->method_number != M_GET || r->header_only))\n            deferred_error = rrl_badmethod09;\n    }\n\n    /* Now that the method, uri and protocol are all processed,\n     * we can safely resume any deferred error reporting\n     */\n    if (deferred_error != rrl_none) {\n        if (deferred_error == rrl_badmethod)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03445)\n                          \"HTTP Request Line; Invalid method token: '%.*s'\",\n                          field_name_len(r->method), r->method);\n        else if (deferred_error == rrl_badmethod09)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03444)\n                          \"HTTP Request Line; Invalid method token: '%.*s'\"\n                          \" (only GET is allowed for HTTP/0.9 requests)\",\n                          field_name_len(r->method), r->method);\n        else if (deferred_error == rrl_missinguri)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03446)\n                          \"HTTP Request Line; Missing URI\");\n        else if (deferred_error == rrl_baduri)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03454)\n                          \"HTTP Request Line; URI incorrectly encoded: '%.*s'\",\n                          field_name_len(r->unparsed_uri), r->unparsed_uri);\n        else if (deferred_error == rrl_badwhitespace)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03447)\n                          \"HTTP Request Line; Invalid whitespace\");\n        else if (deferred_error == rrl_excesswhitespace)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03448)\n                          \"HTTP Request Line; Excess whitespace \"\n                          \"(disallowed by HttpProtocolOptions Strict)\");\n        else if (deferred_error == rrl_trailingtext)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03449)\n                          \"HTTP Request Line; Extraneous text found '%.*s' \"\n                          \"(perhaps whitespace was injected?)\",\n                          field_name_len(ll), ll);\n        else if (deferred_error == rrl_reject09)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02401)\n                          \"HTTP Request Line; Rejected HTTP/0.9 request\");\n        else if (deferred_error == rrl_badprotocol)\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02418)\n                          \"HTTP Request Line; Unrecognized protocol '%.*s' \"\n                          \"(perhaps whitespace was injected?)\",\n                          field_name_len(r->protocol), r->protocol);\n        r->status = HTTP_BAD_REQUEST;\n        goto rrl_failed;\n    }\n\n    if (conf->http_methods == AP_HTTP_METHODS_REGISTERED\n            && r->method_number == M_INVALID) {\n        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02423)\n                      \"HTTP Request Line; Unrecognized HTTP method: '%.*s' \"\n                      \"(disallowed by RegisteredMethods)\",\n                      field_name_len(r->method), r->method);\n        r->status = HTTP_NOT_IMPLEMENTED;\n        /* This can't happen in an HTTP/0.9 request, we verified GET above */\n        return 0;\n    }\n\n    if (r->status != HTTP_OK) {\n        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03450)\n                      \"HTTP Request Line; Unable to parse URI: '%.*s'\",\n                      field_name_len(r->uri), r->uri);\n        goto rrl_failed;\n    }\n\n    if (strict) {\n        if (r->parsed_uri.fragment) {\n            /* RFC3986 3.5: no fragment */\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02421)\n                          \"HTTP Request Line; URI must not contain a fragment\");\n            r->status = HTTP_BAD_REQUEST;\n            goto rrl_failed;\n        }\n        if (r->parsed_uri.user || r->parsed_uri.password) {\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02422)\n                          \"HTTP Request Line; URI must not contain a \"\n                          \"username/password\");\n            r->status = HTTP_BAD_REQUEST;\n            goto rrl_failed;\n        }\n    }\n\n    return 1;\n\nrrl_failed:\n    if (r->proto_num == HTTP_VERSION(0, 9)) {\n        /* Send all parsing and protocol error response with 1.x behavior,\n         * and reserve 505 errors for actual HTTP protocols presented.\n         * As called out in RFC7230 3.5, any errors parsing the protocol\n         * from the request line are nearly always misencoded HTTP/1.x\n         * requests. Only a valid 0.9 request with no parsing errors\n         * at all may be treated as a simple request, if allowed.\n         */\n        r->assbackwards = 0;\n        r->connection->keepalive = AP_CONN_CLOSE;\n        r->proto_num = HTTP_VERSION(1, 0);\n        r->protocol  = apr_pstrdup(r->pool, \"HTTP/1.0\");\n    }\n    return 0;\n}\n\nAP_DECLARE(int) ap_check_request_header(request_rec *r)\n{\n    core_server_config *conf;\n    int strict_host_check;\n    const char *expect;\n    int access_status;\n\n    conf = ap_get_core_module_config(r->server->module_config);\n\n    /* update what we think the virtual host is based on the headers we've\n     * now read. may update status.\n     */\n    strict_host_check = (conf->strict_host_check == AP_CORE_CONFIG_ON);\n    access_status = ap_update_vhost_from_headers_ex(r, strict_host_check);\n    if (strict_host_check && access_status != HTTP_OK) { \n        if (r->server == ap_server_conf) { \n            ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(10156)\n                          \"Requested hostname '%s' did not match any ServerName/ServerAlias \"\n                          \"in the global server configuration \", r->hostname);\n        }\n        else { \n            ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, APLOGNO(10157)\n                          \"Requested hostname '%s' did not match any ServerName/ServerAlias \"\n                          \"in the matching virtual host (default vhost for \"\n                          \"current connection is %s:%u)\", \n                          r->hostname, r->server->defn_name, r->server->defn_line_number);\n        }\n        r->status = access_status;\n    }\n    if (r->status != HTTP_OK) { \n        return 0;\n    }\n\n    if ((!r->hostname && (r->proto_num >= HTTP_VERSION(1, 1)))\n        || ((r->proto_num == HTTP_VERSION(1, 1))\n            && !apr_table_get(r->headers_in, \"Host\"))) {\n        /*\n         * Client sent us an HTTP/1.1 or later request without telling us the\n         * hostname, either with a full URL or a Host: header. We therefore\n         * need to (as per the 1.1 spec) send an error.  As a special case,\n         * HTTP/1.1 mentions twice (S9, S14.23) that a request MUST contain\n         * a Host: header, and the server MUST respond with 400 if it doesn't.\n         */\n        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00569)\n                      \"client sent HTTP/1.1 request without hostname \"\n                      \"(see RFC2616 section 14.23): %s\", r->uri);\n        r->status = HTTP_BAD_REQUEST;\n        return 0;\n    }\n\n    if (((expect = apr_table_get(r->headers_in, \"Expect\")) != NULL)\n        && (expect[0] != '\\0')) {\n        /*\n         * The Expect header field was added to HTTP/1.1 after RFC 2068\n         * as a means to signal when a 100 response is desired and,\n         * unfortunately, to signal a poor man's mandatory extension that\n         * the server must understand or return 417 Expectation Failed.\n         */\n        if (ap_cstr_casecmp(expect, \"100-continue\") == 0) {\n            r->expecting_100 = 1;\n        }\n        else {\n            ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00570)\n                          \"client sent an unrecognized expectation value \"\n                          \"of Expect: %s\", expect);\n            r->status = HTTP_EXPECTATION_FAILED;\n            return 0;\n        }\n    }\n\n    return 1;\n}\n\nstatic int table_do_fn_check_lengths(void *r_, const char *key,\n                                     const char *value)\n{\n    request_rec *r = r_;\n    if (value == NULL || r->server->limit_req_fieldsize >= strlen(value) )\n        return 1;\n\n    r->status = HTTP_BAD_REQUEST;\n    apr_table_setn(r->notes, \"error-notes\",\n                   \"Size of a request header field exceeds server limit.\");\n    ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00560) \"Request \"\n                  \"header exceeds LimitRequestFieldSize after merging: %.*s\",\n                  field_name_len(key), key);\n    return 0;\n}\n\nAP_DECLARE(void) ap_get_mime_headers_core(request_rec *r, apr_bucket_brigade *bb)\n{\n    char *last_field = NULL;\n    apr_size_t last_len = 0;\n    apr_size_t alloc_len = 0;\n    char *field;\n    char *value;\n    apr_size_t len;\n    int fields_read = 0;\n    char *tmp_field;\n    core_server_config *conf = ap_get_core_module_config(r->server->module_config);\n    int strict = (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE);\n\n    /*\n     * Read header lines until we get the empty separator line, a read error,\n     * the connection closes (EOF), reach the server limit, or we timeout.\n     */\n    while(1) {\n        apr_status_t rv;\n\n        field = NULL;\n        rv = ap_rgetline(&field, r->server->limit_req_fieldsize + 2,\n                         &len, r, strict ? AP_GETLINE_CRLF : 0, bb);\n\n        if (rv != APR_SUCCESS) {\n            if (APR_STATUS_IS_TIMEUP(rv)) {\n                r->status = HTTP_REQUEST_TIME_OUT;\n            }\n            else {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, rv, r, \n                              \"Failed to read request header line %s\", field);\n                r->status = HTTP_BAD_REQUEST;\n            }\n\n            /* ap_rgetline returns APR_ENOSPC if it fills up the buffer before\n             * finding the end-of-line.  This is only going to happen if it\n             * exceeds the configured limit for a field size.\n             */\n            if (rv == APR_ENOSPC) {\n                apr_table_setn(r->notes, \"error-notes\",\n                               \"Size of a request header field \"\n                               \"exceeds server limit.\");\n                ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00561)\n                              \"Request header exceeds LimitRequestFieldSize%s\"\n                              \"%.*s\",\n                              (field && *field) ? \": \" : \"\",\n                              (field) ? field_name_len(field) : 0,\n                              (field) ? field : \"\");\n            }\n            return;\n        }\n\n        /* For all header values, and all obs-fold lines, the presence of\n         * additional whitespace is a no-op, so collapse trailing whitespace\n         * to save buffer allocation and optimize copy operations.\n         * Do not remove the last single whitespace under any condition.\n         */\n        while (len > 1 && (field[len-1] == '\\t' || field[len-1] == ' ')) {\n            field[--len] = '\\0';\n        } \n\n        if (*field == '\\t' || *field == ' ') {\n\n            /* Append any newly-read obs-fold line onto the preceding\n             * last_field line we are processing\n             */\n            apr_size_t fold_len;\n\n            if (last_field == NULL) {\n                r->status = HTTP_BAD_REQUEST;\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03442)\n                              \"Line folding encountered before first\"\n                              \" header line\");\n                return;\n            }\n\n            if (field[1] == '\\0') {\n                r->status = HTTP_BAD_REQUEST;\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03443)\n                              \"Empty folded line encountered\");\n                return;\n            }\n\n            /* Leading whitespace on an obs-fold line can be\n             * similarly discarded */\n            while (field[1] == '\\t' || field[1] == ' ') {\n                ++field; --len;\n            }\n\n            /* This line is a continuation of the preceding line(s),\n             * so append it to the line that we've set aside.\n             * Note: this uses a power-of-two allocator to avoid\n             * doing O(n) allocs and using O(n^2) space for\n             * continuations that span many many lines.\n             */\n            fold_len = last_len + len + 1; /* trailing null */\n\n            if (fold_len >= (apr_size_t)(r->server->limit_req_fieldsize)) {\n                r->status = HTTP_BAD_REQUEST;\n                /* report what we have accumulated so far before the\n                 * overflow (last_field) as the field with the problem\n                 */\n                apr_table_setn(r->notes, \"error-notes\",\n                               \"Size of a request header field \"\n                               \"exceeds server limit.\");\n                ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00562)\n                              \"Request header exceeds LimitRequestFieldSize \"\n                              \"after folding: %.*s\",\n                              field_name_len(last_field), last_field);\n                return;\n            }\n\n            if (fold_len > alloc_len) {\n                char *fold_buf;\n                alloc_len += alloc_len;\n                if (fold_len > alloc_len) {\n                    alloc_len = fold_len;\n                }\n                fold_buf = (char *)apr_palloc(r->pool, alloc_len);\n                memcpy(fold_buf, last_field, last_len);\n                last_field = fold_buf;\n            }\n            memcpy(last_field + last_len, field, len +1); /* +1 for nul */\n            /* Replace obs-fold w/ SP per RFC 7230 3.2.4 */\n            last_field[last_len] = ' ';\n            last_len += len;\n\n            /* We've appended this obs-fold line to last_len, proceed to\n             * read the next input line\n             */\n            continue;\n        }\n        else if (last_field != NULL) {\n\n            /* Process the previous last_field header line with all obs-folded\n             * segments already concatenated (this is not operating on the\n             * most recently read input line).\n             */\n\n            if (r->server->limit_req_fields\n                    && (++fields_read > r->server->limit_req_fields)) {\n                r->status = HTTP_BAD_REQUEST;\n                apr_table_setn(r->notes, \"error-notes\",\n                               \"The number of request header fields \"\n                               \"exceeds this server's limit.\");\n                ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00563)\n                              \"Number of request headers exceeds \"\n                              \"LimitRequestFields\");\n                return;\n            }\n\n            if (!strict)\n            {\n                /* Not Strict ('Unsafe' mode), using the legacy parser */\n\n                if (!(value = strchr(last_field, ':'))) { /* Find ':' or */\n                    r->status = HTTP_BAD_REQUEST;   /* abort bad request */\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00564)\n                                  \"Request header field is missing ':' \"\n                                  \"separator: %.*s\", (int)LOG_NAME_MAX_LEN,\n                                  last_field);\n                    return;\n                }\n\n                if (value == last_field) {\n                    r->status = HTTP_BAD_REQUEST;\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03453)\n                                  \"Request header field name was empty\");\n                    return;\n                }\n\n                *value++ = '\\0'; /* NUL-terminate at colon */\n\n                if (strpbrk(last_field, \"\\t\\n\\v\\f\\r \")) {\n                    r->status = HTTP_BAD_REQUEST;\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03452)\n                                  \"Request header field name presented\"\n                                  \" invalid whitespace\");\n                    return;\n                }\n\n                while (*value == ' ' || *value == '\\t') {\n                     ++value;            /* Skip to start of value   */\n                }\n\n                if (strpbrk(value, \"\\n\\v\\f\\r\")) {\n                    r->status = HTTP_BAD_REQUEST;\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(03451)\n                                  \"Request header field value presented\"\n                                  \" bad whitespace\");\n                    return;\n                }\n            }\n            else /* Using strict RFC7230 parsing */\n            {\n                /* Ensure valid token chars before ':' per RFC 7230 3.2.4 */\n                value = (char *)ap_scan_http_token(last_field);\n                if ((value == last_field) || *value != ':') {\n                    r->status = HTTP_BAD_REQUEST;\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02426)\n                                  \"Request header field name is malformed: \"\n                                  \"%.*s\", (int)LOG_NAME_MAX_LEN, last_field);\n                    return;\n                }\n\n                *value++ = '\\0'; /* NUL-terminate last_field name at ':' */\n\n                while (*value == ' ' || *value == '\\t') {\n                    ++value;     /* Skip LWS of value */\n                }\n\n                /* Find invalid, non-HT ctrl char, or the trailing NULL */\n                tmp_field = (char *)ap_scan_http_field_content(value);\n\n                /* Reject value for all garbage input (CTRLs excluding HT)\n                 * e.g. only VCHAR / SP / HT / obs-text are allowed per\n                 * RFC7230 3.2.6 - leave all more explicit rule enforcement\n                 * for specific header handler logic later in the cycle\n                 */\n                if (*tmp_field != '\\0') {\n                    r->status = HTTP_BAD_REQUEST;\n                    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02427)\n                                  \"Request header value is malformed: \"\n                                  \"%.*s\", (int)LOG_NAME_MAX_LEN, value);\n                    return;\n                }\n            }\n\n            apr_table_addn(r->headers_in, last_field, value);\n\n            /* This last_field header is now stored in headers_in,\n             * resume processing of the current input line.\n             */\n        }\n\n        /* Found the terminating empty end-of-headers line, stop. */\n        if (len == 0) {\n            break;\n        }\n\n        /* Keep track of this new header line so that we can extend it across\n         * any obs-fold or parse it on the next loop iteration. We referenced\n         * our previously allocated buffer in r->headers_in,\n         * so allocate a fresh buffer if required.\n         */\n        alloc_len = 0;\n        last_field = field;\n        last_len = len;\n    }\n\n    /* Combine multiple message-header fields with the same\n     * field-name, following RFC 2616, 4.2.\n     */\n    apr_table_compress(r->headers_in, APR_OVERLAP_TABLES_MERGE);\n\n    /* enforce LimitRequestFieldSize for merged headers */\n    apr_table_do(table_do_fn_check_lengths, r, r->headers_in, NULL);\n}\n\nAP_DECLARE(void) ap_get_mime_headers(request_rec *r)\n{\n    apr_bucket_brigade *tmp_bb;\n    tmp_bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    ap_get_mime_headers_core(r, tmp_bb);\n    apr_brigade_destroy(tmp_bb);\n}\n\nAP_DECLARE(request_rec *) ap_create_request(conn_rec *conn)\n{\n    request_rec *r;\n    apr_pool_t *p;\n\n    apr_pool_create(&p, conn->pool);\n    apr_pool_tag(p, \"request\");\n    r = apr_pcalloc(p, sizeof(request_rec));\n    AP_READ_REQUEST_ENTRY((intptr_t)r, (uintptr_t)conn);\n    r->pool            = p;\n    r->connection      = conn;\n    r->server          = conn->base_server;\n\n    r->user            = NULL;\n    r->ap_auth_type    = NULL;\n\n    r->allowed_methods = ap_make_method_list(p, 2);\n\n    r->headers_in      = apr_table_make(r->pool, 25);\n    r->trailers_in     = apr_table_make(r->pool, 5);\n    r->subprocess_env  = apr_table_make(r->pool, 25);\n    r->headers_out     = apr_table_make(r->pool, 12);\n    r->err_headers_out = apr_table_make(r->pool, 5);\n    r->trailers_out    = apr_table_make(r->pool, 5);\n    r->notes           = apr_table_make(r->pool, 5);\n\n    r->request_config  = ap_create_request_config(r->pool);\n    /* Must be set before we run create request hook */\n\n    r->proto_output_filters = conn->output_filters;\n    r->output_filters  = r->proto_output_filters;\n    r->proto_input_filters = conn->input_filters;\n    r->input_filters   = r->proto_input_filters;\n    ap_run_create_request(r);\n    r->per_dir_config  = r->server->lookup_defaults;\n\n    r->sent_bodyct     = 0;                      /* bytect isn't for body */\n\n    r->read_length     = 0;\n    r->read_body       = REQUEST_NO_BODY;\n\n    r->status          = HTTP_OK;  /* Until further notice */\n    r->header_only     = 0;\n    r->the_request     = NULL;\n\n    /* Begin by presuming any module can make its own path_info assumptions,\n     * until some module interjects and changes the value.\n     */\n    r->used_path_info = AP_REQ_DEFAULT_PATH_INFO;\n\n    r->useragent_addr = conn->client_addr;\n    r->useragent_ip = conn->client_ip;\n\n    return r;\n}\n\n/* Apply the server's timeout/config to the connection/request. */\nstatic void apply_server_config(request_rec *r)\n{\n    apr_socket_t *csd;\n\n    csd = ap_get_conn_socket(r->connection);\n    apr_socket_timeout_set(csd, r->server->timeout);\n\n    r->per_dir_config = r->server->lookup_defaults;\n}\n\nrequest_rec *ap_read_request(conn_rec *conn)\n{\n    int access_status;\n    apr_bucket_brigade *tmp_bb;\n\n    request_rec *r = ap_create_request(conn);\n\n    tmp_bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    conn->keepalive = AP_CONN_UNKNOWN;\n\n    ap_run_pre_read_request(r, conn);\n\n    /* Get the request... */\n    if (!read_request_line(r, tmp_bb) || !ap_parse_request_line(r)) {\n        apr_brigade_cleanup(tmp_bb);\n        switch (r->status) {\n        case HTTP_REQUEST_URI_TOO_LARGE:\n        case HTTP_BAD_REQUEST:\n        case HTTP_VERSION_NOT_SUPPORTED:\n        case HTTP_NOT_IMPLEMENTED:\n            if (r->status == HTTP_REQUEST_URI_TOO_LARGE) {\n                ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00565)\n                              \"request failed: client's request-line exceeds LimitRequestLine (longer than %d)\",\n                              r->server->limit_req_line);\n            }\n            else if (r->method == NULL) {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00566)\n                              \"request failed: malformed request line\");\n            }\n            access_status = r->status;\n            goto die_unusable_input;\n\n        case HTTP_REQUEST_TIME_OUT:\n            /* Just log, no further action on this connection. */\n            ap_update_child_status(conn->sbh, SERVER_BUSY_LOG, NULL);\n            if (!r->connection->keepalives)\n                ap_run_log_transaction(r);\n            break;\n        }\n        /* Not worth dying with. */\n        conn->keepalive = AP_CONN_CLOSE;\n        apr_pool_destroy(r->pool);\n        goto ignore;\n    }\n    apr_brigade_cleanup(tmp_bb);\n\n    /* We may have been in keep_alive_timeout mode, so toggle back\n     * to the normal timeout mode as we fetch the header lines,\n     * as necessary.\n     */\n    apply_server_config(r);\n\n    if (!r->assbackwards) {\n        const char *tenc, *clen;\n\n        ap_get_mime_headers_core(r, tmp_bb);\n        apr_brigade_cleanup(tmp_bb);\n        if (r->status != HTTP_OK) {\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00567)\n                          \"request failed: error reading the headers\");\n            access_status = r->status;\n            goto die_unusable_input;\n        }\n\n        clen = apr_table_get(r->headers_in, \"Content-Length\");\n        if (clen) {\n            apr_off_t cl;\n\n            if (!ap_parse_strict_length(&cl, clen)) {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(10242)\n                              \"client sent invalid Content-Length \"\n                              \"(%s): %s\", clen, r->uri);\n                access_status = HTTP_BAD_REQUEST;\n                goto die_unusable_input;\n            }\n        }\n\n        tenc = apr_table_get(r->headers_in, \"Transfer-Encoding\");\n        if (tenc) {\n            /* https://tools.ietf.org/html/rfc7230\n             * Section 3.3.3.3: \"If a Transfer-Encoding header field is\n             * present in a request and the chunked transfer coding is not\n             * the final encoding ...; the server MUST respond with the 400\n             * (Bad Request) status code and then close the connection\".\n             */\n            if (!ap_is_chunked(r->pool, tenc)) {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02539)\n                              \"client sent unknown Transfer-Encoding \"\n                              \"(%s): %s\", tenc, r->uri);\n                access_status = HTTP_BAD_REQUEST;\n                goto die_unusable_input;\n            }\n\n            /* https://tools.ietf.org/html/rfc7230\n             * Section 3.3.3.3: \"If a message is received with both a\n             * Transfer-Encoding and a Content-Length header field, the\n             * Transfer-Encoding overrides the Content-Length. ... A sender\n             * MUST remove the received Content-Length field\".\n             */\n            if (clen) {\n                apr_table_unset(r->headers_in, \"Content-Length\");\n\n                /* Don't reuse this connection anyway to avoid confusion with\n                 * intermediaries and request/reponse spltting.\n                 */\n                conn->keepalive = AP_CONN_CLOSE;\n            }\n        }\n    }\n\n    /*\n     * Add the HTTP_IN filter here to ensure that ap_discard_request_body\n     * called by ap_die and by ap_send_error_response works correctly on\n     * status codes that do not cause the connection to be dropped and\n     * in situations where the connection should be kept alive.\n     */\n    ap_add_input_filter_handle(ap_http_input_filter_handle,\n                               NULL, r, r->connection);\n\n    /* Validate Host/Expect headers and select vhost. */\n    if (!ap_check_request_header(r)) {\n        /* we may have switched to another server still */\n        apply_server_config(r);\n        access_status = r->status;\n        goto die_before_hooks;\n    }\n\n    /* we may have switched to another server */\n    apply_server_config(r);\n\n    if ((access_status = ap_run_post_read_request(r))) {\n        goto die;\n    }\n\n    AP_READ_REQUEST_SUCCESS((uintptr_t)r, (char *)r->method,\n                            (char *)r->uri, (char *)r->server->defn_name,\n                            r->status);\n    return r;\n\n    /* Everything falls through on failure */\n\ndie_unusable_input:\n    /* Input filters are in an undeterminate state, cleanup (including\n     * CORE_IN's socket) such that any further attempt to read is EOF.\n     */\n    {\n        ap_filter_t *f = conn->input_filters;\n        while (f) {\n            if (f->frec == ap_core_input_filter_handle) {\n                core_net_rec *net = f->ctx;\n                apr_brigade_cleanup(net->in_ctx->b);\n                break;\n            }\n            ap_remove_input_filter(f);\n            f = f->next;\n        }\n        conn->input_filters = r->input_filters = f;\n        conn->keepalive = AP_CONN_CLOSE;\n    }\n\ndie_before_hooks:\n    /* First call to ap_die() (non recursive) */\n    r->status = HTTP_OK;\n\ndie:\n    ap_die(access_status, r);\n\n    /* ap_die() sent the response through the output filters, we must now\n     * end the request with an EOR bucket for stream/pipeline accounting.\n     */\n    {\n        apr_bucket_brigade *eor_bb;\n        eor_bb = apr_brigade_create(conn->pool, conn->bucket_alloc);\n        APR_BRIGADE_INSERT_TAIL(eor_bb,\n                                ap_bucket_eor_create(conn->bucket_alloc, r));\n        ap_pass_brigade(conn->output_filters, eor_bb);\n        apr_brigade_cleanup(eor_bb);\n    }\n\nignore:\n    r = NULL;\n    AP_READ_REQUEST_FAILURE((uintptr_t)r);\n    return NULL;\n}\n\n/* if a request with a body creates a subrequest, remove original request's\n * input headers which pertain to the body which has already been read.\n * out-of-line helper function for ap_set_sub_req_protocol.\n */\n\nstatic void strip_headers_request_body(request_rec *rnew)\n{\n    apr_table_unset(rnew->headers_in, \"Content-Encoding\");\n    apr_table_unset(rnew->headers_in, \"Content-Language\");\n    apr_table_unset(rnew->headers_in, \"Content-Length\");\n    apr_table_unset(rnew->headers_in, \"Content-Location\");\n    apr_table_unset(rnew->headers_in, \"Content-MD5\");\n    apr_table_unset(rnew->headers_in, \"Content-Range\");\n    apr_table_unset(rnew->headers_in, \"Content-Type\");\n    apr_table_unset(rnew->headers_in, \"Expires\");\n    apr_table_unset(rnew->headers_in, \"Last-Modified\");\n    apr_table_unset(rnew->headers_in, \"Transfer-Encoding\");\n}\n\n/*\n * A couple of other functions which initialize some of the fields of\n * a request structure, as appropriate for adjuncts of one kind or another\n * to a request in progress.  Best here, rather than elsewhere, since\n * *someone* has to set the protocol-specific fields...\n */\n\nAP_DECLARE(void) ap_set_sub_req_protocol(request_rec *rnew,\n                                         const request_rec *r)\n{\n    rnew->the_request     = r->the_request;  /* Keep original request-line */\n\n    rnew->assbackwards    = 1;   /* Don't send headers from this. */\n    rnew->no_local_copy   = 1;   /* Don't try to send HTTP_NOT_MODIFIED for a\n                                  * fragment. */\n    rnew->method          = \"GET\";\n    rnew->method_number   = M_GET;\n    rnew->protocol        = \"INCLUDED\";\n\n    rnew->status          = HTTP_OK;\n\n    rnew->headers_in      = apr_table_copy(rnew->pool, r->headers_in);\n    rnew->trailers_in     = apr_table_copy(rnew->pool, r->trailers_in);\n\n    /* did the original request have a body?  (e.g. POST w/SSI tags)\n     * if so, make sure the subrequest doesn't inherit body headers\n     */\n    if (!r->kept_body && (apr_table_get(r->headers_in, \"Content-Length\")\n        || apr_table_get(r->headers_in, \"Transfer-Encoding\"))) {\n        strip_headers_request_body(rnew);\n    }\n    rnew->subprocess_env  = apr_table_copy(rnew->pool, r->subprocess_env);\n    rnew->headers_out     = apr_table_make(rnew->pool, 5);\n    rnew->err_headers_out = apr_table_make(rnew->pool, 5);\n    rnew->trailers_out    = apr_table_make(rnew->pool, 5);\n    rnew->notes           = apr_table_make(rnew->pool, 5);\n\n    rnew->expecting_100   = r->expecting_100;\n    rnew->read_length     = r->read_length;\n    rnew->read_body       = REQUEST_NO_BODY;\n\n    rnew->main = (request_rec *) r;\n}\n\nstatic void end_output_stream(request_rec *r)\n{\n    conn_rec *c = r->connection;\n    apr_bucket_brigade *bb;\n    apr_bucket *b;\n\n    bb = apr_brigade_create(r->pool, c->bucket_alloc);\n    b = apr_bucket_eos_create(c->bucket_alloc);\n    APR_BRIGADE_INSERT_TAIL(bb, b);\n    ap_pass_brigade(r->output_filters, bb);\n}\n\nAP_DECLARE(void) ap_finalize_sub_req_protocol(request_rec *sub)\n{\n    /* tell the filter chain there is no more content coming */\n    if (!sub->eos_sent) {\n        end_output_stream(sub);\n    }\n}\n\n/* finalize_request_protocol is called at completion of sending the\n * response.  Its sole purpose is to send the terminating protocol\n * information for any wrappers around the response message body\n * (i.e., transfer encodings).  It should have been named finalize_response.\n */\nAP_DECLARE(void) ap_finalize_request_protocol(request_rec *r)\n{\n    (void) ap_discard_request_body(r);\n\n    /* tell the filter chain there is no more content coming */\n    if (!r->eos_sent) {\n        end_output_stream(r);\n    }\n}\n\n/*\n * Support for the Basic authentication protocol, and a bit for Digest.\n */\nAP_DECLARE(void) ap_note_auth_failure(request_rec *r)\n{\n    const char *type = ap_auth_type(r);\n    if (type) {\n        ap_run_note_auth_failure(r, type);\n    }\n    else {\n        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00571)\n                      \"need AuthType to note auth failure: %s\", r->uri);\n    }\n}\n\nAP_DECLARE(void) ap_note_basic_auth_failure(request_rec *r)\n{\n    ap_note_auth_failure(r);\n}\n\nAP_DECLARE(void) ap_note_digest_auth_failure(request_rec *r)\n{\n    ap_note_auth_failure(r);\n}\n\nAP_DECLARE(int) ap_get_basic_auth_pw(request_rec *r, const char **pw)\n{\n    const char *auth_line = apr_table_get(r->headers_in,\n                                          (PROXYREQ_PROXY == r->proxyreq)\n                                              ? \"Proxy-Authorization\"\n                                              : \"Authorization\");\n    const char *t;\n\n    if (!(t = ap_auth_type(r)) || ap_cstr_casecmp(t, \"Basic\"))\n        return DECLINED;\n\n    if (!ap_auth_name(r)) {\n        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(00572) \n                      \"need AuthName: %s\", r->uri);\n        return HTTP_INTERNAL_SERVER_ERROR;\n    }\n\n    if (!auth_line) {\n        ap_note_auth_failure(r);\n        return HTTP_UNAUTHORIZED;\n    }\n\n    if (ap_cstr_casecmp(ap_getword(r->pool, &auth_line, ' '), \"Basic\")) {\n        /* Client tried to authenticate using wrong auth scheme */\n        ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, APLOGNO(00573)\n                      \"client used wrong authentication scheme: %s\", r->uri);\n        ap_note_auth_failure(r);\n        return HTTP_UNAUTHORIZED;\n    }\n\n    while (*auth_line == ' ' || *auth_line == '\\t') {\n        auth_line++;\n    }\n\n    t = ap_pbase64decode(r->pool, auth_line);\n    r->user = ap_getword_nulls (r->pool, &t, ':');\n    apr_table_setn(r->notes, AP_GET_BASIC_AUTH_PW_NOTE, \"1\");\n    r->ap_auth_type = \"Basic\";\n\n    *pw = t;\n\n    return OK;\n}\n\nAP_DECLARE(apr_status_t) ap_get_basic_auth_components(const request_rec *r,\n                                                      const char **username,\n                                                      const char **password)\n{\n    const char *auth_header;\n    const char *credentials;\n    const char *decoded;\n    const char *user;\n\n    auth_header = (PROXYREQ_PROXY == r->proxyreq) ? \"Proxy-Authorization\"\n                                                  : \"Authorization\";\n    credentials = apr_table_get(r->headers_in, auth_header);\n\n    if (!credentials) {\n        /* No auth header. */\n        return APR_EINVAL;\n    }\n\n    if (ap_cstr_casecmp(ap_getword(r->pool, &credentials, ' '), \"Basic\")) {\n        /* These aren't Basic credentials. */\n        return APR_EINVAL;\n    }\n\n    while (*credentials == ' ' || *credentials == '\\t') {\n        credentials++;\n    }\n\n    /* XXX Our base64 decoding functions don't actually error out if the string\n     * we give it isn't base64; they'll just silently stop and hand us whatever\n     * they've parsed up to that point.\n     *\n     * Since this function is supposed to be a drop-in replacement for the\n     * deprecated ap_get_basic_auth_pw(), don't fix this for 2.4.x.\n     */\n    decoded = ap_pbase64decode(r->pool, credentials);\n    user = ap_getword_nulls(r->pool, &decoded, ':');\n\n    if (username) {\n        *username = user;\n    }\n    if (password) {\n        *password = decoded;\n    }\n\n    return APR_SUCCESS;\n}\n\nstruct content_length_ctx {\n    int data_sent;  /* true if the C-L filter has already sent at\n                     * least one bucket on to the next output filter\n                     * for this request\n                     */\n    apr_bucket_brigade *tmpbb;\n};\n\n/* This filter computes the content length, but it also computes the number\n * of bytes sent to the client.  This means that this filter will always run\n * through all of the buckets in all brigades\n */\nAP_CORE_DECLARE_NONSTD(apr_status_t) ap_content_length_filter(\n    ap_filter_t *f,\n    apr_bucket_brigade *b)\n{\n    request_rec *r = f->r;\n    struct content_length_ctx *ctx;\n    apr_bucket *e;\n    int eos = 0;\n    apr_read_type_e eblock = APR_NONBLOCK_READ;\n\n    ctx = f->ctx;\n    if (!ctx) {\n        f->ctx = ctx = apr_palloc(r->pool, sizeof(*ctx));\n        ctx->data_sent = 0;\n        ctx->tmpbb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    }\n\n    /* Loop through the brigade to count the length. To avoid\n     * arbitrary memory consumption with morphing bucket types, this\n     * loop will stop and pass on the brigade when necessary. */\n    e = APR_BRIGADE_FIRST(b);\n    while (e != APR_BRIGADE_SENTINEL(b)) {\n        apr_status_t rv;\n\n        if (APR_BUCKET_IS_EOS(e)) {\n            eos = 1;\n            break;\n        }\n        /* For a flush bucket, fall through to pass the brigade and\n         * flush now. */\n        else if (APR_BUCKET_IS_FLUSH(e)) {\n            e = APR_BUCKET_NEXT(e);\n        }\n        /* For metadata bucket types other than FLUSH, loop. */\n        else if (APR_BUCKET_IS_METADATA(e)) {\n            e = APR_BUCKET_NEXT(e);\n            continue;\n        }\n        /* For determinate length data buckets, count the length and\n         * continue. */\n        else if (e->length != (apr_size_t)-1) {\n            r->bytes_sent += e->length;\n            e = APR_BUCKET_NEXT(e);\n            continue;\n        }\n        /* For indeterminate length data buckets, perform one read. */\n        else /* e->length == (apr_size_t)-1 */ {\n            apr_size_t len;\n            const char *ignored;\n        \n            rv = apr_bucket_read(e, &ignored, &len, eblock);\n            if ((rv != APR_SUCCESS) && !APR_STATUS_IS_EAGAIN(rv)) {\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, rv, r, APLOGNO(00574)\n                              \"ap_content_length_filter: \"\n                              \"apr_bucket_read() failed\");\n                return rv;\n            }\n            if (rv == APR_SUCCESS) {\n                eblock = APR_NONBLOCK_READ;\n                e = APR_BUCKET_NEXT(e);\n                r->bytes_sent += len;\n            }\n            else if (APR_STATUS_IS_EAGAIN(rv)) {\n                apr_bucket *flush;\n\n                /* Next read must block. */\n                eblock = APR_BLOCK_READ;\n\n                /* Ensure the last bucket to pass down is a flush if\n                 * the next read will block. */\n                flush = apr_bucket_flush_create(f->c->bucket_alloc);\n                APR_BUCKET_INSERT_BEFORE(e, flush);\n            }\n        }\n\n        /* Optimization: if the next bucket is EOS (directly after a\n         * bucket morphed to the heap, or a flush), short-cut to\n         * handle EOS straight away - allowing C-L to be determined\n         * for content which is already entirely in memory. */\n        if (e != APR_BRIGADE_SENTINEL(b) && APR_BUCKET_IS_EOS(e)) {\n            continue;\n        }\n\n        /* On reaching here, pass on everything in the brigade up to\n         * this point. */\n        apr_brigade_split_ex(b, e, ctx->tmpbb);\n        \n        rv = ap_pass_brigade(f->next, b);\n        if (rv != APR_SUCCESS) {\n            return rv;\n        }\n        else if (f->c->aborted) {\n            return APR_ECONNABORTED;\n        }\n        apr_brigade_cleanup(b);\n        APR_BRIGADE_CONCAT(b, ctx->tmpbb);\n        e = APR_BRIGADE_FIRST(b);\n        \n        ctx->data_sent = 1;\n    }\n\n    /* If we've now seen the entire response and it's otherwise\n     * okay to set the C-L in the response header, then do so now.\n     *\n     * We can only set a C-L in the response header if we haven't already\n     * sent any buckets on to the next output filter for this request.\n     */\n    if (ctx->data_sent == 0 && eos &&\n        /* don't whack the C-L if it has already been set for a HEAD\n         * by something like proxy.  the brigade only has an EOS bucket\n         * in this case, making r->bytes_sent zero.\n         *\n         * if r->bytes_sent > 0 we have a (temporary) body whose length may\n         * have been changed by a filter.  the C-L header might not have been\n         * updated so we do it here.  long term it would be cleaner to have\n         * such filters update or remove the C-L header, and just use it\n         * if present.\n         */\n        !((r->header_only || AP_STATUS_IS_HEADER_ONLY(r->status)) && r->bytes_sent == 0 &&\n            apr_table_get(r->headers_out, \"Content-Length\"))) {\n        ap_set_content_length(r, r->bytes_sent);\n    }\n\n    ctx->data_sent = 1;\n    return ap_pass_brigade(f->next, b);\n}\n\n/*\n * Send the body of a response to the client.\n */\nAP_DECLARE(apr_status_t) ap_send_fd(apr_file_t *fd, request_rec *r,\n                                    apr_off_t offset, apr_size_t len,\n                                    apr_size_t *nbytes)\n{\n    conn_rec *c = r->connection;\n    apr_bucket_brigade *bb = NULL;\n    apr_status_t rv;\n\n    bb = apr_brigade_create(r->pool, c->bucket_alloc);\n\n    apr_brigade_insert_file(bb, fd, offset, len, r->pool);\n\n    rv = ap_pass_brigade(r->output_filters, bb);\n    if (rv != APR_SUCCESS) {\n        *nbytes = 0; /* no way to tell how many were actually sent */\n    }\n    else {\n        *nbytes = len;\n    }\n\n    return rv;\n}\n\n#if APR_HAS_MMAP\n/* send data from an in-memory buffer */\nAP_DECLARE(apr_size_t) ap_send_mmap(apr_mmap_t *mm,\n                                    request_rec *r,\n                                    apr_size_t offset,\n                                    apr_size_t length)\n{\n    conn_rec *c = r->connection;\n    apr_bucket_brigade *bb = NULL;\n    apr_bucket *b;\n\n    bb = apr_brigade_create(r->pool, c->bucket_alloc);\n    b = apr_bucket_mmap_create(mm, offset, length, c->bucket_alloc);\n    APR_BRIGADE_INSERT_TAIL(bb, b);\n    ap_pass_brigade(r->output_filters, bb);\n\n    return mm->size; /* XXX - change API to report apr_status_t? */\n}\n#endif /* APR_HAS_MMAP */\n\ntypedef struct {\n    apr_bucket_brigade *bb;\n    apr_bucket_brigade *tmpbb;\n} old_write_filter_ctx;\n\nAP_CORE_DECLARE_NONSTD(apr_status_t) ap_old_write_filter(\n    ap_filter_t *f, apr_bucket_brigade *bb)\n{\n    old_write_filter_ctx *ctx = f->ctx;\n\n    AP_DEBUG_ASSERT(ctx);\n\n    if (ctx->bb != NULL) {\n        /* whatever is coming down the pipe (we don't care), we\n         * can simply insert our buffered data at the front and\n         * pass the whole bundle down the chain.\n         */\n        APR_BRIGADE_PREPEND(bb, ctx->bb);\n    }\n\n    return ap_pass_brigade(f->next, bb);\n}\n\nstatic ap_filter_t *insert_old_write_filter(request_rec *r)\n{\n    ap_filter_t *f;\n    old_write_filter_ctx *ctx;\n\n    /* future optimization: record some flags in the request_rec to\n     * say whether we've added our filter, and whether it is first.\n     */\n\n    /* this will typically exit on the first test */\n    for (f = r->output_filters; f != NULL; f = f->next) {\n        if (ap_old_write_func == f->frec)\n            break;\n    }\n\n    if (f == NULL) {\n        /* our filter hasn't been added yet */\n        ctx = apr_pcalloc(r->pool, sizeof(*ctx));\n        ctx->tmpbb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n\n        ap_add_output_filter(\"OLD_WRITE\", ctx, r, r->connection);\n        f = r->output_filters;\n    }\n\n    return f;\n}\n\nstatic apr_status_t buffer_output(request_rec *r,\n                                  const char *str, apr_size_t len)\n{\n    conn_rec *c = r->connection;\n    ap_filter_t *f;\n    old_write_filter_ctx *ctx;\n\n    if (len == 0)\n        return APR_SUCCESS;\n\n    f = insert_old_write_filter(r);\n    ctx = f->ctx;\n\n    /* if the first filter is not our buffering filter, then we have to\n     * deliver the content through the normal filter chain\n     */\n    if (f != r->output_filters) {\n        apr_status_t rv;\n        apr_bucket *b = apr_bucket_transient_create(str, len, c->bucket_alloc);\n        APR_BRIGADE_INSERT_TAIL(ctx->tmpbb, b);\n\n        rv = ap_pass_brigade(r->output_filters, ctx->tmpbb);\n        apr_brigade_cleanup(ctx->tmpbb);\n        return rv;\n    }\n\n    if (ctx->bb == NULL) {\n        ctx->bb = apr_brigade_create(r->pool, c->bucket_alloc);\n    }\n\n    return ap_fwrite(f->next, ctx->bb, str, len);\n}\n\nAP_DECLARE(int) ap_rputc(int c, request_rec *r)\n{\n    char c2 = (char)c;\n\n    if (r->connection->aborted) {\n        return -1;\n    }\n\n    if (buffer_output(r, &c2, 1) != APR_SUCCESS)\n        return -1;\n\n    return c;\n}\n\nAP_DECLARE(int) ap_rwrite(const void *buf, int nbyte, request_rec *r)\n{\n    if (r->connection->aborted)\n        return -1;\n\n    if (buffer_output(r, buf, nbyte) != APR_SUCCESS)\n        return -1;\n\n    return nbyte;\n}\n\nstruct ap_vrprintf_data {\n    apr_vformatter_buff_t vbuff;\n    request_rec *r;\n    char *buff;\n};\n\n/* Flush callback for apr_vformatter; returns -1 on error. */\nstatic int r_flush(apr_vformatter_buff_t *buff)\n{\n    /* callback function passed to ap_vformatter to be called when\n     * vformatter needs to write into buff and buff.curpos > buff.endpos */\n\n    /* ap_vrprintf_data passed as a apr_vformatter_buff_t, which is then\n     * \"downcast\" to an ap_vrprintf_data */\n    struct ap_vrprintf_data *vd = (struct ap_vrprintf_data*)buff;\n\n    if (vd->r->connection->aborted)\n        return -1;\n\n    /* r_flush is called when vbuff is completely full */\n    if (buffer_output(vd->r, vd->buff, AP_IOBUFSIZE)) {\n        return -1;\n    }\n\n    /* reset the buffer position */\n    vd->vbuff.curpos = vd->buff;\n    vd->vbuff.endpos = vd->buff + AP_IOBUFSIZE;\n\n    return 0;\n}\n\nAP_DECLARE(int) ap_vrprintf(request_rec *r, const char *fmt, va_list va)\n{\n    int written;\n    struct ap_vrprintf_data vd;\n    char vrprintf_buf[AP_IOBUFSIZE];\n\n    vd.vbuff.curpos = vrprintf_buf;\n    vd.vbuff.endpos = vrprintf_buf + AP_IOBUFSIZE;\n    vd.r = r;\n    vd.buff = vrprintf_buf;\n\n    if (r->connection->aborted)\n        return -1;\n\n    written = apr_vformatter(r_flush, &vd.vbuff, fmt, va);\n\n    if (written != -1) {\n        int n = vd.vbuff.curpos - vrprintf_buf;\n\n        /* last call to buffer_output, to finish clearing the buffer */\n        if (buffer_output(r, vrprintf_buf, n) != APR_SUCCESS)\n            return -1;\n\n        written += n;\n    }\n\n    return written;\n}\n\nAP_DECLARE_NONSTD(int) ap_rprintf(request_rec *r, const char *fmt, ...)\n{\n    va_list va;\n    int n;\n\n    if (r->connection->aborted)\n        return -1;\n\n    va_start(va, fmt);\n    n = ap_vrprintf(r, fmt, va);\n    va_end(va);\n\n    return n;\n}\n\nAP_DECLARE_NONSTD(int) ap_rvputs(request_rec *r, ...)\n{\n    va_list va;\n    const char *s;\n    apr_size_t len;\n    apr_size_t written = 0;\n\n    if (r->connection->aborted)\n        return -1;\n\n    /* ### TODO: if the total output is large, put all the strings\n     * ### into a single brigade, rather than flushing each time we\n     * ### fill the buffer\n     */\n    va_start(va, r);\n    while (1) {\n        s = va_arg(va, const char *);\n        if (s == NULL)\n            break;\n\n        len = strlen(s);\n        if (buffer_output(r, s, len) != APR_SUCCESS) {\n            va_end(va);\n            return -1;\n        }\n\n        written += len;\n    }\n    va_end(va);\n\n    return written;\n}\n\nAP_DECLARE(int) ap_rflush(request_rec *r)\n{\n    conn_rec *c = r->connection;\n    apr_bucket *b;\n    ap_filter_t *f;\n    old_write_filter_ctx *ctx;\n    apr_status_t rv;\n\n    f = insert_old_write_filter(r);\n    ctx = f->ctx;\n\n    b = apr_bucket_flush_create(c->bucket_alloc);\n    APR_BRIGADE_INSERT_TAIL(ctx->tmpbb, b);\n\n    rv = ap_pass_brigade(r->output_filters, ctx->tmpbb);\n    apr_brigade_cleanup(ctx->tmpbb);\n    if (rv != APR_SUCCESS)\n        return -1;\n\n    return 0;\n}\n\n/*\n * This function sets the Last-Modified output header field to the value\n * of the mtime field in the request structure - rationalized to keep it from\n * being in the future.\n */\nAP_DECLARE(void) ap_set_last_modified(request_rec *r)\n{\n    if (!r->assbackwards) {\n        apr_time_t mod_time = ap_rationalize_mtime(r, r->mtime);\n        char *datestr = apr_palloc(r->pool, APR_RFC822_DATE_LEN);\n\n        apr_rfc822_date(datestr, mod_time);\n        apr_table_setn(r->headers_out, \"Last-Modified\", datestr);\n    }\n}\n\ntypedef struct hdr_ptr {\n    ap_filter_t *f;\n    apr_bucket_brigade *bb;\n} hdr_ptr;\n \n#if APR_CHARSET_EBCDIC\nstatic int send_header(void *data, const char *key, const char *val)\n{\n    char *header_line = NULL;\n    hdr_ptr *hdr = (hdr_ptr*)data;\n\n    header_line = apr_pstrcat(hdr->bb->p, key, \": \", val, CRLF, NULL);\n    ap_xlate_proto_to_ascii(header_line, strlen(header_line));\n    ap_fputs(hdr->f, hdr->bb, header_line);\n    return 1;\n}\n#else\nstatic int send_header(void *data, const char *key, const char *val)\n{\n     ap_fputstrs(((hdr_ptr*)data)->f, ((hdr_ptr*)data)->bb,\n                 key, \": \", val, CRLF, NULL);\n     return 1;\n }\n#endif\n\nAP_DECLARE(void) ap_send_interim_response(request_rec *r, int send_headers)\n{\n    hdr_ptr x;\n    char *response_line = NULL;\n    const char *status_line;\n    request_rec *rr;\n\n    if (r->proto_num < HTTP_VERSION(1,1)) {\n        /* don't send interim response to HTTP/1.0 Client */\n        return;\n    }\n    if (!ap_is_HTTP_INFO(r->status)) {\n        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00575)\n                      \"Status is %d - not sending interim response\", r->status);\n        return;\n    }\n    if (r->status == HTTP_CONTINUE) {\n        if (!r->expecting_100) {\n            /*\n             * Don't send 100-Continue when there was no Expect: 100-continue\n             * in the request headers. For origin servers this is a SHOULD NOT\n             * for proxies it is a MUST NOT according to RFC 2616 8.2.3\n             */\n            return;\n        }\n\n        /* if we send an interim response, we're no longer in a state of\n         * expecting one.  Also, this could feasibly be in a subrequest,\n         * so we need to propagate the fact that we responded.\n         */\n        for (rr = r; rr != NULL; rr = rr->main) {\n            rr->expecting_100 = 0;\n        }\n    }\n\n    status_line = r->status_line;\n    if (status_line == NULL) {\n        status_line = ap_get_status_line_ex(r->pool, r->status);\n    }\n    response_line = apr_pstrcat(r->pool,\n                                AP_SERVER_PROTOCOL \" \", status_line, CRLF,\n                                NULL);\n    ap_xlate_proto_to_ascii(response_line, strlen(response_line));\n\n    x.f = r->connection->output_filters;\n    x.bb = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n\n    ap_fputs(x.f, x.bb, response_line);\n    if (send_headers) {\n        apr_table_do(send_header, &x, r->headers_out, NULL);\n        apr_table_clear(r->headers_out);\n    }\n    ap_fputs(x.f, x.bb, CRLF_ASCII);\n    ap_fflush(x.f, x.bb);\n    apr_brigade_destroy(x.bb);\n}\n\n/*\n * Compare two protocol identifier. Result is similar to strcmp():\n * 0 gives same precedence, >0 means proto1 is preferred.\n */\nstatic int protocol_cmp(const apr_array_header_t *preferences,\n                        const char *proto1,\n                        const char *proto2)\n{\n    if (preferences && preferences->nelts > 0) {\n        int index1 = ap_array_str_index(preferences, proto1, 0);\n        int index2 = ap_array_str_index(preferences, proto2, 0);\n        if (index2 > index1) {\n            return (index1 >= 0) ? 1 : -1;\n        }\n        else if (index1 > index2) {\n            return (index2 >= 0) ? -1 : 1;\n        }\n    }\n    /* both have the same index (maybe -1 or no pref configured) and we compare\n     * the names so that spdy3 gets precedence over spdy2. That makes\n     * the outcome at least deterministic. */\n    return strcmp(proto1, proto2);\n}\n\nAP_DECLARE(const char *) ap_get_protocol(conn_rec *c)\n{\n    const char *protocol = ap_run_protocol_get(c);\n    return protocol? protocol : AP_PROTOCOL_HTTP1;\n}\n\nAP_DECLARE(apr_status_t) ap_get_protocol_upgrades(conn_rec *c, request_rec *r, \n                                                  server_rec *s, int report_all, \n                                                  const apr_array_header_t **pupgrades)\n{\n    apr_pool_t *pool = r? r->pool : c->pool;\n    core_server_config *conf;\n    const char *existing;\n    apr_array_header_t *upgrades = NULL;\n\n    if (!s) {\n        s = (r? r->server : c->base_server);\n    }\n    conf = ap_get_core_module_config(s->module_config);\n    \n    if (conf->protocols->nelts > 0) {\n        existing = ap_get_protocol(c);\n        if (conf->protocols->nelts > 1 \n            || !ap_array_str_contains(conf->protocols, existing)) {\n            int i;\n            \n            /* possibly more than one choice or one, but not the\n             * existing. (TODO: maybe 426 and Upgrade then?) */\n            upgrades = apr_array_make(pool, conf->protocols->nelts + 1, \n                                      sizeof(char *));\n            for (i = 0; i < conf->protocols->nelts; i++) {\n                const char *p = APR_ARRAY_IDX(conf->protocols, i, char *);\n                if (strcmp(existing, p)) {\n                    /* not the one we have and possible, add in this order */\n                    APR_ARRAY_PUSH(upgrades, const char*) = p;\n                }\n                else if (!report_all) {\n                    break;\n                }\n            }\n        }\n    }\n    \n    *pupgrades = upgrades;\n    return APR_SUCCESS;\n}\n\nAP_DECLARE(const char *) ap_select_protocol(conn_rec *c, request_rec *r, \n                                            server_rec *s,\n                                            const apr_array_header_t *choices)\n{\n    apr_pool_t *pool = r? r->pool : c->pool;\n    core_server_config *conf;\n    const char *protocol = NULL, *existing;\n    apr_array_header_t *proposals;\n\n    if (!s) {\n        s = (r? r->server : c->base_server);\n    }\n    conf = ap_get_core_module_config(s->module_config);\n    \n    if (APLOGcdebug(c)) {\n        const char *p = apr_array_pstrcat(pool, conf->protocols, ',');\n        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, c, APLOGNO(03155) \n                      \"select protocol from %s, choices=%s for server %s\", \n                      p, apr_array_pstrcat(pool, choices, ','),\n                      s->server_hostname);\n    }\n\n    if (conf->protocols->nelts <= 0) {\n        /* nothing configured, by default, we only allow http/1.1 here.\n         * For now...\n         */\n        if (ap_array_str_contains(choices, AP_PROTOCOL_HTTP1)) {\n            return AP_PROTOCOL_HTTP1;\n        }\n        else {\n            return NULL;\n        }\n    }\n\n    proposals = apr_array_make(pool, choices->nelts + 1, sizeof(char *));\n    ap_run_protocol_propose(c, r, s, choices, proposals);\n\n    /* If the existing protocol has not been proposed, but is a choice,\n     * add it to the proposals implicitly.\n     */\n    existing = ap_get_protocol(c);\n    if (!ap_array_str_contains(proposals, existing)\n        && ap_array_str_contains(choices, existing)) {\n        APR_ARRAY_PUSH(proposals, const char*) = existing;\n    }\n\n    if (proposals->nelts > 0) {\n        int i;\n        const apr_array_header_t *prefs = NULL;\n\n        /* Default for protocols_honor_order is 'on' or != 0 */\n        if (conf->protocols_honor_order == 0 && choices->nelts > 0) {\n            prefs = choices;\n        }\n        else {\n            prefs = conf->protocols;\n        }\n\n        /* Select the most preferred protocol */\n        if (APLOGcdebug(c)) {\n            ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, c, APLOGNO(03156) \n                          \"select protocol, proposals=%s preferences=%s configured=%s\", \n                          apr_array_pstrcat(pool, proposals, ','),\n                          apr_array_pstrcat(pool, prefs, ','),\n                          apr_array_pstrcat(pool, conf->protocols, ','));\n        }\n        for (i = 0; i < proposals->nelts; ++i) {\n            const char *p = APR_ARRAY_IDX(proposals, i, const char *);\n            if (!ap_array_str_contains(conf->protocols, p)) {\n                /* not a configured protocol here */\n                continue;\n            }\n            else if (!protocol \n                     || (protocol_cmp(prefs, protocol, p) < 0)) {\n                /* none selected yet or this one has preference */\n                protocol = p;\n            }\n        }\n    }\n    if (APLOGcdebug(c)) {\n        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, c, APLOGNO(03157)\n                      \"selected protocol=%s\", \n                      protocol? protocol : \"(none)\");\n    }\n\n    return protocol;\n}\n\nAP_DECLARE(apr_status_t) ap_switch_protocol(conn_rec *c, request_rec *r, \n                                            server_rec *s,\n                                            const char *protocol)\n{\n    const char *current = ap_get_protocol(c);\n    int rc;\n    \n    if (!strcmp(current, protocol)) {\n        ap_log_cerror(APLOG_MARK, APLOG_WARNING, 0, c, APLOGNO(02906)\n                      \"already at it, protocol_switch to %s\", \n                      protocol);\n        return APR_SUCCESS;\n    }\n    \n    rc = ap_run_protocol_switch(c, r, s, protocol);\n    switch (rc) {\n        case DECLINED:\n            ap_log_cerror(APLOG_MARK, APLOG_ERR, 0, c, APLOGNO(02907)\n                          \"no implementation for protocol_switch to %s\", \n                          protocol);\n            return APR_ENOTIMPL;\n        case OK:\n        case DONE:\n            return APR_SUCCESS;\n        default:\n            ap_log_cerror(APLOG_MARK, APLOG_ERR, 0, c, APLOGNO(02905)\n                          \"unexpected return code %d from protocol_switch to %s\"\n                          , rc, protocol);\n            return APR_EOF;\n    }    \n}\n\nAP_DECLARE(int) ap_is_allowed_protocol(conn_rec *c, request_rec *r,\n                                       server_rec *s, const char *protocol)\n{\n    core_server_config *conf;\n\n    if (!s) {\n        s = (r? r->server : c->base_server);\n    }\n    conf = ap_get_core_module_config(s->module_config);\n    \n    if (conf->protocols->nelts > 0) {\n        return ap_array_str_contains(conf->protocols, protocol);\n    }\n    return !strcmp(AP_PROTOCOL_HTTP1, protocol);\n}\n\n\nAP_IMPLEMENT_HOOK_VOID(pre_read_request,\n                       (request_rec *r, conn_rec *c),\n                       (r, c))\nAP_IMPLEMENT_HOOK_RUN_ALL(int,post_read_request,\n                          (request_rec *r), (r), OK, DECLINED)\nAP_IMPLEMENT_HOOK_RUN_ALL(int,log_transaction,\n                          (request_rec *r), (r), OK, DECLINED)\nAP_IMPLEMENT_HOOK_RUN_FIRST(const char *,http_scheme,\n                            (const request_rec *r), (r), NULL)\nAP_IMPLEMENT_HOOK_RUN_FIRST(unsigned short,default_port,\n                            (const request_rec *r), (r), 0)\nAP_IMPLEMENT_HOOK_RUN_FIRST(int, note_auth_failure,\n                            (request_rec *r, const char *auth_type),\n                            (r, auth_type), DECLINED)\nAP_IMPLEMENT_HOOK_RUN_ALL(int,protocol_propose,\n                          (conn_rec *c, request_rec *r, server_rec *s,\n                           const apr_array_header_t *offers,\n                           apr_array_header_t *proposals), \n                          (c, r, s, offers, proposals), OK, DECLINED)\nAP_IMPLEMENT_HOOK_RUN_FIRST(int,protocol_switch,\n                            (conn_rec *c, request_rec *r, server_rec *s,\n                             const char *protocol), \n                            (c, r, s, protocol), DECLINED)\nAP_IMPLEMENT_HOOK_RUN_FIRST(const char *,protocol_get,\n                            (const conn_rec *c), (c), NULL)\n", "/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file  vhost.c\n * @brief functions pertaining to virtual host addresses\n *        (configuration and run-time)\n */\n\n#include \"apr.h\"\n#include \"apr_strings.h\"\n#include \"apr_lib.h\"\n\n#define APR_WANT_STRFUNC\n#include \"apr_want.h\"\n\n#include \"ap_config.h\"\n#include \"httpd.h\"\n#include \"http_config.h\"\n#include \"http_log.h\"\n#include \"http_vhost.h\"\n#include \"http_protocol.h\"\n#include \"http_core.h\"\n#include \"http_main.h\"\n\n#if APR_HAVE_ARPA_INET_H\n#include <arpa/inet.h>\n#endif\n\n/* we know core's module_index is 0 */\n#undef APLOG_MODULE_INDEX\n#define APLOG_MODULE_INDEX AP_CORE_MODULE_INDEX\n\n/*\n * After all the definitions there's an explanation of how it's all put\n * together.\n */\n\n/* meta-list of name-vhosts.  Each server_rec can be in possibly multiple\n * lists of name-vhosts.\n */\ntypedef struct name_chain name_chain;\nstruct name_chain {\n    name_chain *next;\n    server_addr_rec *sar;       /* the record causing it to be in\n                                 * this chain (needed for port comparisons) */\n    server_rec *server;         /* the server to use on a match */\n};\n\n/* meta-list of ip addresses.  Each server_rec can be in possibly multiple\n * hash chains since it can have multiple ips.\n */\ntypedef struct ipaddr_chain ipaddr_chain;\nstruct ipaddr_chain {\n    ipaddr_chain *next;\n    server_addr_rec *sar;       /* the record causing it to be in\n                                 * this chain (need for both ip addr and port\n                                 * comparisons) */\n    server_rec *server;         /* the server to use if this matches */\n    name_chain *names;          /* if non-NULL then a list of name-vhosts\n                                 * sharing this address */\n    name_chain *initialnames;   /* no runtime use, temporary storage of first\n                                 * NVH'es names */\n};\n\n/* This defines the size of the hash table used for hashing ip addresses\n * of virtual hosts.  It must be a power of two.\n */\n#ifndef IPHASH_TABLE_SIZE\n#define IPHASH_TABLE_SIZE 256\n#endif\n\n/* A (n) bucket hash table, each entry has a pointer to a server rec and\n * a pointer to the other entries in that bucket.  Each individual address,\n * even for virtualhosts with multiple addresses, has an entry in this hash\n * table.  There are extra buckets for _default_, and name-vhost entries.\n *\n * Note that after config time this is constant, so it is thread-safe.\n */\nstatic ipaddr_chain *iphash_table[IPHASH_TABLE_SIZE];\n\n/* dump out statistics about the hash function */\n/* #define IPHASH_STATISTICS */\n\n/* list of the _default_ servers */\nstatic ipaddr_chain *default_list;\n\n/* whether a config error was seen */\nstatic int config_error = 0;\n\n/* config check function */\nstatic int vhost_check_config(apr_pool_t *p, apr_pool_t *plog,\n                              apr_pool_t *ptemp, server_rec *s);\n\n/*\n * How it's used:\n *\n * The ip address determines which chain in iphash_table is interesting, then\n * a comparison is done down that chain to find the first ipaddr_chain whose\n * sar matches the address:port pair.\n *\n * If that ipaddr_chain has names == NULL then you're done, it's an ip-vhost.\n *\n * Otherwise it's a name-vhost list, and the default is the server in the\n * ipaddr_chain record.  We tuck away the ipaddr_chain record in the\n * conn_rec field vhost_lookup_data.  Later on after the headers we get a\n * second chance, and we use the name_chain to figure out what name-vhost\n * matches the headers.\n *\n * If there was no ip address match in the iphash_table then do a lookup\n * in the default_list.\n *\n * How it's put together ... well you should be able to figure that out\n * from how it's used.  Or something like that.\n */\n\n\n/* called at the beginning of the config */\nAP_DECLARE(void) ap_init_vhost_config(apr_pool_t *p)\n{\n    memset(iphash_table, 0, sizeof(iphash_table));\n    default_list = NULL;\n    ap_hook_check_config(vhost_check_config, NULL, NULL, APR_HOOK_MIDDLE);\n}\n\n\n/*\n * Parses a host of the form <address>[:port]\n * paddr is used to create a list in the order of input\n * **paddr is the ->next pointer of the last entry (or s->addrs)\n * *paddr is the variable used to keep track of **paddr between calls\n * port is the default port to assume\n */\nstatic const char *get_addresses(apr_pool_t *p, const char *w_,\n                                 server_addr_rec ***paddr,\n                                 apr_port_t default_port)\n{\n    apr_sockaddr_t *my_addr;\n    server_addr_rec *sar;\n    char *w, *host, *scope_id;\n    int wild_port;\n    apr_size_t wlen;\n    apr_port_t port;\n    apr_status_t rv;\n\n    if (*w_ == '\\0')\n        return NULL;\n\n    wlen = strlen(w_);                   /* wlen must be > 0 at this point */\n    w = apr_pstrmemdup(p, w_, wlen);\n    /* apr_parse_addr_port() doesn't understand \":*\" so handle that first. */\n    wild_port = 0;\n    if (w[wlen - 1] == '*') {\n        if (wlen < 2) {\n            wild_port = 1;\n        }\n        else if (w[wlen - 2] == ':') {\n            w[wlen - 2] = '\\0';\n            wild_port = 1;\n        }\n    }\n    rv = apr_parse_addr_port(&host, &scope_id, &port, w, p);\n    /* If the string is \"80\", apr_parse_addr_port() will be happy and set\n     * host to NULL and port to 80, so watch out for that.\n     */\n    if (rv != APR_SUCCESS) {\n        return \"The address or port is invalid\";\n    }\n    if (!host) {\n        return \"Missing address for VirtualHost\";\n    }\n    if (scope_id) {\n        return \"Scope ids are not supported\";\n    }\n    if (!port && !wild_port) {\n        port = default_port;\n    }\n\n    if (strcmp(host, \"*\") == 0 || strcasecmp(host, \"_default_\") == 0) {\n        rv = apr_sockaddr_info_get(&my_addr, NULL, APR_UNSPEC, port, 0, p);\n        if (rv) {\n            return \"Could not determine a wildcard address ('0.0.0.0') -- \"\n                \"check resolver configuration.\";\n        }\n    }\n    else {\n        rv = apr_sockaddr_info_get(&my_addr, host, APR_UNSPEC, port, 0, p);\n        if (rv != APR_SUCCESS) {\n            ap_log_error(APLOG_MARK, APLOG_ERR, rv, NULL, APLOGNO(00547)\n                \"Could not resolve host name %s -- ignoring!\", host);\n            return NULL;\n        }\n    }\n\n    /* Remember all addresses for the host */\n\n    do {\n        sar = apr_pcalloc(p, sizeof(server_addr_rec));\n        **paddr = sar;\n        *paddr = &sar->next;\n        sar->host_addr = my_addr;\n        sar->host_port = port;\n        sar->virthost = host;\n        my_addr = my_addr->next;\n    } while (my_addr);\n\n    return NULL;\n}\n\n\n/* parse the <VirtualHost> addresses */\nconst char *ap_parse_vhost_addrs(apr_pool_t *p,\n                                 const char *hostname,\n                                 server_rec *s)\n{\n    server_addr_rec **addrs;\n    const char *err;\n\n    /* start the list of addresses */\n    addrs = &s->addrs;\n    while (hostname[0]) {\n        err = get_addresses(p, ap_getword_conf(p, &hostname), &addrs, s->port);\n        if (err) {\n            *addrs = NULL;\n            return err;\n        }\n    }\n    /* terminate the list */\n    *addrs = NULL;\n    if (s->addrs) {\n        if (s->addrs->host_port) {\n            /* override the default port which is inherited from main_server */\n            s->port = s->addrs->host_port;\n        }\n    }\n    return NULL;\n}\n\n\nAP_DECLARE_NONSTD(const char *)ap_set_name_virtual_host(cmd_parms *cmd,\n                                                        void *dummy,\n                                                        const char *arg)\n{\n    static int warnonce = 0;\n    if (++warnonce == 1) {\n        ap_log_error(APLOG_MARK, APLOG_NOTICE|APLOG_STARTUP, APR_SUCCESS, NULL, APLOGNO(00548)\n                     \"NameVirtualHost has no effect and will be removed in the \"\n                     \"next release %s:%d\",\n                     cmd->directive->filename,\n                     cmd->directive->line_num);\n    }\n\n    return NULL;\n}\n\n\n/* hash table statistics, keep this in here for the beta period so\n * we can find out if the hash function is ok\n */\n#ifdef IPHASH_STATISTICS\nstatic int iphash_compare(const void *a, const void *b)\n{\n    return (*(const int *) b - *(const int *) a);\n}\n\n\nstatic void dump_iphash_statistics(server_rec *main_s)\n{\n    unsigned count[IPHASH_TABLE_SIZE];\n    int i;\n    ipaddr_chain *src;\n    unsigned total;\n    char buf[HUGE_STRING_LEN];\n    char *p;\n\n    total = 0;\n    for (i = 0; i < IPHASH_TABLE_SIZE; ++i) {\n        count[i] = 0;\n        for (src = iphash_table[i]; src; src = src->next) {\n            ++count[i];\n            if (i < IPHASH_TABLE_SIZE) {\n                /* don't count the slop buckets in the total */\n                ++total;\n            }\n        }\n    }\n    qsort(count, IPHASH_TABLE_SIZE, sizeof(count[0]), iphash_compare);\n    p = buf + apr_snprintf(buf, sizeof(buf),\n                           APLOGNO(03235) \"iphash: total hashed = %u, avg chain = %u, \"\n                           \"chain lengths (count x len):\",\n                           total, total / IPHASH_TABLE_SIZE);\n    total = 1;\n    for (i = 1; i < IPHASH_TABLE_SIZE; ++i) {\n        if (count[i - 1] != count[i]) {\n            p += apr_snprintf(p, sizeof(buf) - (p - buf), \" %ux%u\",\n                              total, count[i - 1]);\n            total = 1;\n        }\n        else {\n            ++total;\n        }\n    }\n    p += apr_snprintf(p, sizeof(buf) - (p - buf), \" %ux%u\",\n                      total, count[IPHASH_TABLE_SIZE - 1]);\n    /* Intentional no APLOGNO */\n    /* buf provides APLOGNO */\n    ap_log_error(APLOG_MARK, APLOG_DEBUG, main_s, buf);\n}\n#endif\n\n\n/* This hashing function is designed to get good distribution in the cases\n * where the server is handling entire \"networks\" of servers.  i.e. a\n * whack of /24s.  This is probably the most common configuration for\n * ISPs with large virtual servers.\n *\n * NOTE: This function is symmetric (i.e. collapses all 4 octets\n * into one), so machine byte order (big/little endianness) does not matter.\n *\n * Hash function provided by David Hankins.\n */\nstatic APR_INLINE unsigned hash_inaddr(unsigned key)\n{\n    key ^= (key >> 16);\n    return ((key >> 8) ^ key) % IPHASH_TABLE_SIZE;\n}\n\nstatic APR_INLINE unsigned hash_addr(struct apr_sockaddr_t *sa)\n{\n    unsigned key;\n\n    /* The key is the last four bytes of the IP address.\n     * For IPv4, this is the entire address, as always.\n     * For IPv6, this is usually part of the MAC address.\n     */\n    key = *(unsigned *)((char *)sa->ipaddr_ptr + sa->ipaddr_len - 4);\n    return hash_inaddr(key);\n}\n\nstatic ipaddr_chain *new_ipaddr_chain(apr_pool_t *p,\n                                      server_rec *s, server_addr_rec *sar)\n{\n    ipaddr_chain *new;\n\n    new = apr_palloc(p, sizeof(*new));\n    new->names = NULL;\n    new->initialnames = NULL;\n    new->server = s;\n    new->sar = sar;\n    new->next = NULL;\n    return new;\n}\n\n\nstatic name_chain *new_name_chain(apr_pool_t *p,\n                                  server_rec *s, server_addr_rec *sar)\n{\n    name_chain *new;\n\n    new = apr_palloc(p, sizeof(*new));\n    new->server = s;\n    new->sar = sar;\n    new->next = NULL;\n    return new;\n}\n\n\nstatic APR_INLINE ipaddr_chain *find_ipaddr(apr_sockaddr_t *sa)\n{\n    unsigned bucket;\n    ipaddr_chain *trav = NULL;\n    ipaddr_chain *wild_match = NULL;\n\n    /* scan the hash table for an exact match first */\n    bucket = hash_addr(sa);\n    for (trav = iphash_table[bucket]; trav; trav = trav->next) {\n        server_addr_rec *sar = trav->sar;\n        apr_sockaddr_t *cur = sar->host_addr;\n\n        if (cur->port == sa->port) {\n            if (apr_sockaddr_equal(cur, sa)) {\n                return trav;\n            }\n        }\n        if (wild_match == NULL && (cur->port == 0 || sa->port == 0)) {\n            if (apr_sockaddr_equal(cur, sa)) {\n                /* don't break, continue looking for an exact match */\n                wild_match = trav;\n            }\n        }\n    }\n    return wild_match;\n}\n\nstatic ipaddr_chain *find_default_server(apr_port_t port)\n{\n    server_addr_rec *sar;\n    ipaddr_chain *trav = NULL;\n    ipaddr_chain *wild_match = NULL;\n\n    for (trav = default_list; trav; trav = trav->next) {\n        sar = trav->sar;\n        if (sar->host_port == port) {\n            /* match! */\n            return trav;\n        }\n        if (wild_match == NULL && sar->host_port == 0) {\n            /* don't break, continue looking for an exact match */\n            wild_match = trav;\n        }\n    }\n    return wild_match;\n}\n\n#if APR_HAVE_IPV6\n#define IS_IN6_ANYADDR(ad) ((ad)->family == APR_INET6                   \\\n                            && IN6_IS_ADDR_UNSPECIFIED(&(ad)->sa.sin6.sin6_addr))\n#else\n#define IS_IN6_ANYADDR(ad) (0)\n#endif\n\nstatic void dump_a_vhost(apr_file_t *f, ipaddr_chain *ic)\n{\n    name_chain *nc;\n    int len;\n    char buf[MAX_STRING_LEN];\n    apr_sockaddr_t *ha = ic->sar->host_addr;\n\n    if ((ha->family == APR_INET && ha->sa.sin.sin_addr.s_addr == INADDR_ANY)\n        || IS_IN6_ANYADDR(ha)) {\n        len = apr_snprintf(buf, sizeof(buf), \"*:%u\",\n                           ic->sar->host_port);\n    }\n    else {\n        len = apr_snprintf(buf, sizeof(buf), \"%pI\", ha);\n    }\n    if (ic->sar->host_port == 0) {\n        buf[len-1] = '*';\n    }\n    if (ic->names == NULL) {\n        apr_file_printf(f, \"%-22s %s (%s:%u)\\n\", buf,\n                        ic->server->server_hostname,\n                        ic->server->defn_name, ic->server->defn_line_number);\n        return;\n    }\n    apr_file_printf(f, \"%-22s is a NameVirtualHost\\n\"\n                    \"%8s default server %s (%s:%u)\\n\",\n                    buf, \"\", ic->server->server_hostname,\n                    ic->server->defn_name, ic->server->defn_line_number);\n    for (nc = ic->names; nc; nc = nc->next) {\n        if (nc->sar->host_port) {\n            apr_file_printf(f, \"%8s port %u \", \"\", nc->sar->host_port);\n        }\n        else {\n            apr_file_printf(f, \"%8s port * \", \"\");\n        }\n        apr_file_printf(f, \"namevhost %s (%s:%u)\\n\",\n                        nc->server->server_hostname,\n                        nc->server->defn_name, nc->server->defn_line_number);\n        if (nc->server->names) {\n            apr_array_header_t *names = nc->server->names;\n            char **name = (char **)names->elts;\n            int i;\n            for (i = 0; i < names->nelts; ++i) {\n                if (name[i]) {\n                    apr_file_printf(f, \"%16s alias %s\\n\", \"\", name[i]);\n                }\n            }\n        }\n        if (nc->server->wild_names) {\n            apr_array_header_t *names = nc->server->wild_names;\n            char **name = (char **)names->elts;\n            int i;\n            for (i = 0; i < names->nelts; ++i) {\n                if (name[i]) {\n                    apr_file_printf(f, \"%16s wild alias %s\\n\", \"\", name[i]);\n                }\n            }\n        }\n    }\n}\n\nstatic void dump_vhost_config(apr_file_t *f)\n{\n    ipaddr_chain *ic;\n    int i;\n\n    apr_file_printf(f, \"VirtualHost configuration:\\n\");\n\n    /* non-wildcard servers */\n    for (i = 0; i < IPHASH_TABLE_SIZE; ++i) {\n        for (ic = iphash_table[i]; ic; ic = ic->next) {\n            dump_a_vhost(f, ic);\n        }\n    }\n\n    /* wildcard servers */\n    for (ic = default_list; ic; ic = ic->next) {\n        dump_a_vhost(f, ic);\n    }\n}\n\n\n/*\n * When a second or later virtual host maps to the same IP chain,\n * add the relevant server names to the chain.  Special care is taken\n * to avoid adding ic->names until we're sure there are multiple VH'es.\n */\nstatic void add_name_vhost_config(apr_pool_t *p, server_rec *main_s,\n                                 server_rec *s, server_addr_rec *sar,\n                                 ipaddr_chain *ic)\n{\n\n   name_chain *nc = new_name_chain(p, s, sar);\n   nc->next = ic->names;\n\n   /* iterating backwards, so each one we see becomes the current default server */\n   ic->server = s;\n\n   if (ic->names == NULL) {\n       if (ic->initialnames == NULL) {\n           /* first pass, set these names aside in case we see another VH.\n            * Until then, this looks like an IP-based VH to runtime.\n            */\n           ic->initialnames = nc;\n       }\n       else {\n           /* second pass through this chain -- this really is an NVH, and we\n            * have two sets of names to link in.\n            */\n           nc->next = ic->initialnames;\n           ic->names = nc;\n           ic->initialnames = NULL;\n       }\n   }\n   else {\n       /* 3rd or more -- just keep stacking the names */\n       ic->names = nc;\n   }\n}\n\n/* compile the tables and such we need to do the run-time vhost lookups */\nAP_DECLARE(void) ap_fini_vhost_config(apr_pool_t *p, server_rec *main_s)\n{\n    server_addr_rec *sar;\n    int has_default_vhost_addr;\n    server_rec *s;\n    int i;\n    ipaddr_chain **iphash_table_tail[IPHASH_TABLE_SIZE];\n\n    /* Main host first */\n    s = main_s;\n\n    if (!s->server_hostname) {\n        s->server_hostname = ap_get_local_host(p);\n    }\n\n    /* initialize the tails */\n    for (i = 0; i < IPHASH_TABLE_SIZE; ++i) {\n        iphash_table_tail[i] = &iphash_table[i];\n    }\n\n    /* The next things to go into the hash table are the virtual hosts\n     * themselves.  They're listed off of main_s->next in the reverse\n     * order they occurred in the config file, so we insert them at\n     * the iphash_table_tail but don't advance the tail.\n     */\n\n    for (s = main_s->next; s; s = s->next) {\n        server_addr_rec *sar_prev = NULL;\n        has_default_vhost_addr = 0;\n        for (sar = s->addrs; sar; sar = sar->next) {\n            ipaddr_chain *ic;\n            char inaddr_any[16] = {0}; /* big enough to handle IPv4 or IPv6 */\n            /* XXX: this treats 0.0.0.0 as a \"default\" server which matches no-exact-match for IPv6 */\n            if (!memcmp(sar->host_addr->ipaddr_ptr, inaddr_any, sar->host_addr->ipaddr_len)) {\n                ic = find_default_server(sar->host_port);\n\n                if (ic && sar->host_port == ic->sar->host_port) { /* we're a match for an existing \"default server\"  */\n                    if (!sar_prev || memcmp(sar_prev->host_addr->ipaddr_ptr, inaddr_any, sar_prev->host_addr->ipaddr_len)\n                                  || sar_prev->host_port != sar->host_port) { \n                        add_name_vhost_config(p, main_s, s, sar, ic);\n                    }\n                }\n                else { \n                    /* No default server, or we found a default server but\n                    ** exactly one of us is a wildcard port, which means we want\n                    ** two ip-based vhosts not an NVH with two names\n                    */\n                    ic = new_ipaddr_chain(p, s, sar);\n                    ic->next = default_list;\n                    default_list = ic;\n                    add_name_vhost_config(p, main_s, s, sar, ic);\n                }\n                has_default_vhost_addr = 1;\n            }\n            else {\n                /* see if it matches something we've already got */\n                ic = find_ipaddr(sar->host_addr);\n\n                if (!ic || sar->host_port != ic->sar->host_port) {\n                    /* No matching server, or we found a matching server but\n                    ** exactly one of us is a wildcard port, which means we want\n                    ** two ip-based vhosts not an NVH with two names\n                    */\n                    unsigned bucket = hash_addr(sar->host_addr);\n                    ic = new_ipaddr_chain(p, s, sar);\n                    ic->next = *iphash_table_tail[bucket];\n                    *iphash_table_tail[bucket] = ic;\n                }\n                add_name_vhost_config(p, main_s, s, sar, ic);\n            }\n            sar_prev = sar;\n        }\n\n        /* Ok now we want to set up a server_hostname if the user was\n         * silly enough to forget one.\n         * XXX: This is silly we should just crash and burn.\n         */\n        if (!s->server_hostname) {\n            if (has_default_vhost_addr) {\n                s->server_hostname = main_s->server_hostname;\n            }\n            else if (!s->addrs) {\n                /* what else can we do?  at this point this vhost has\n                    no configured name, probably because they used\n                    DNS in the VirtualHost statement.  It's disabled\n                    anyhow by the host matching code.  -djg */\n                s->server_hostname =\n                    apr_pstrdup(p, \"bogus_host_without_forward_dns\");\n            }\n            else {\n                apr_status_t rv;\n                char *hostname;\n\n                rv = apr_getnameinfo(&hostname, s->addrs->host_addr, 0);\n                if (rv == APR_SUCCESS) {\n                    s->server_hostname = apr_pstrdup(p, hostname);\n                }\n                else {\n                    /* again, what can we do?  They didn't specify a\n                       ServerName, and their DNS isn't working. -djg */\n                    char *ipaddr_str;\n\n                    apr_sockaddr_ip_get(&ipaddr_str, s->addrs->host_addr);\n                    ap_log_error(APLOG_MARK, APLOG_ERR, rv, main_s, APLOGNO(00549)\n                                 \"Failed to resolve server name \"\n                                 \"for %s (check DNS) -- or specify an explicit \"\n                                 \"ServerName\",\n                                 ipaddr_str);\n                    s->server_hostname =\n                        apr_pstrdup(p, \"bogus_host_without_reverse_dns\");\n                }\n            }\n        }\n    }\n\n#ifdef IPHASH_STATISTICS\n    dump_iphash_statistics(main_s);\n#endif\n    if (ap_exists_config_define(\"DUMP_VHOSTS\")) {\n        apr_file_t *thefile = NULL;\n        apr_file_open_stdout(&thefile, p);\n        dump_vhost_config(thefile);\n    }\n}\n\nstatic int vhost_check_config(apr_pool_t *p, apr_pool_t *plog,\n                              apr_pool_t *ptemp, server_rec *s)\n{\n    return config_error ? !OK : OK;\n}\n\n/*****************************************************************************\n * run-time vhost matching functions\n */\n\nstatic apr_status_t fix_hostname_v6_literal(request_rec *r, char *host)\n{\n    char *dst;\n    int double_colon = 0;\n\n    for (dst = host; *dst; dst++) {\n        if (apr_isxdigit(*dst)) {\n            if (apr_isupper(*dst)) {\n                *dst = apr_tolower(*dst);\n            }\n        }\n        else if (*dst == ':') {\n            if (*(dst + 1) == ':') {\n                if (double_colon)\n                    return APR_EINVAL;\n                double_colon = 1;\n            }\n            else if (*(dst + 1) == '.') {\n                return APR_EINVAL;\n            }\n        }\n        else if (*dst == '.') {\n            /* For IPv4-mapped IPv6 addresses like ::FFFF:129.144.52.38 */\n            if (*(dst + 1) == ':' || *(dst + 1) == '.')\n                return APR_EINVAL;\n        }\n        else {\n            return APR_EINVAL;\n        }\n    }\n    return APR_SUCCESS;\n}\n\nstatic apr_status_t fix_hostname_non_v6(request_rec *r, char *host)\n{\n    char *dst;\n\n    for (dst = host; *dst; dst++) {\n        if (apr_islower(*dst)) {\n            /* leave char unchanged */\n        }\n        else if (*dst == '.') {\n            if (*(dst + 1) == '.') {\n                return APR_EINVAL;\n            }\n        }\n        else if (apr_isupper(*dst)) {\n            *dst = apr_tolower(*dst);\n        }\n        else if (*dst == '/' || *dst == '\\\\') {\n            return APR_EINVAL;\n        }\n    }\n    /* strip trailing gubbins */\n    if (dst > host && dst[-1] == '.') {\n        dst[-1] = '\\0';\n    }\n    return APR_SUCCESS;\n}\n\n/*\n * If strict mode ever becomes the default, this should be folded into\n * fix_hostname_non_v6()\n */\nstatic apr_status_t strict_hostname_check(request_rec *r, char *host)\n{\n    char *ch;\n    int is_dotted_decimal = 1, leading_zeroes = 0, dots = 0;\n\n    for (ch = host; *ch; ch++) {\n        if (apr_isalpha(*ch) || *ch == '-' || *ch == '_') {\n            is_dotted_decimal = 0;\n        }\n        else if (ch[0] == '.') {\n            dots++;\n            if (ch[1] == '0' && apr_isdigit(ch[2]))\n                leading_zeroes = 1;\n        }\n        else if (!apr_isdigit(*ch)) {\n           /* also takes care of multiple Host headers by denying commas */\n            goto bad;\n        }\n    }\n    if (is_dotted_decimal) {\n        if (host[0] == '.' || (host[0] == '0' && apr_isdigit(host[1])))\n            leading_zeroes = 1;\n        if (leading_zeroes || dots != 3) {\n            /* RFC 3986 7.4 */\n            goto bad;\n        }\n    }\n    else {\n        /* The top-level domain must start with a letter (RFC 1123 2.1) */\n        while (ch > host && *ch != '.')\n            ch--;\n        if (ch[0] == '.' && ch[1] != '\\0' && !apr_isalpha(ch[1]))\n            goto bad;\n    }\n    return APR_SUCCESS;\n\nbad:\n    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02415)\n                  \"[strict] Invalid host name '%s'%s%.6s\",\n                  host, *ch ? \", problem near: \" : \"\", ch);\n    return APR_EINVAL;\n}\n\n/* Lowercase and remove any trailing dot and/or :port from the hostname,\n * and check that it is sane.\n *\n * In most configurations the exact syntax of the hostname isn't\n * important so strict sanity checking isn't necessary. However, in\n * mass hosting setups (using mod_vhost_alias or mod_rewrite) where\n * the hostname is interpolated into the filename, we need to be sure\n * that the interpolation doesn't expose parts of the filesystem.\n * We don't do strict RFC 952 / RFC 1123 syntax checking in order\n * to support iDNS and people who erroneously use underscores.\n * Instead we just check for filesystem metacharacters: directory\n * separators / and \\ and sequences of more than one dot.\n */\nstatic int fix_hostname(request_rec *r, const char *host_header,\n                        unsigned http_conformance)\n{\n    const char *src;\n    char *host, *scope_id;\n    apr_port_t port;\n    apr_status_t rv;\n    const char *c;\n    int is_v6literal = 0;\n    int strict = (http_conformance != AP_HTTP_CONFORMANCE_UNSAFE);\n\n    src = host_header ? host_header : r->hostname;\n\n    /* According to RFC 2616, Host header field CAN be blank */\n    if (!*src) {\n        return is_v6literal;\n    }\n\n    /* apr_parse_addr_port will interpret a bare integer as a port\n     * which is incorrect in this context.  So treat it separately.\n     */\n    for (c = src; apr_isdigit(*c); ++c);\n    if (!*c) {\n        /* pure integer */\n        if (strict) {\n            /* RFC 3986 7.4 */\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02416)\n                         \"[strict] purely numeric host names not allowed: %s\",\n                         src);\n            goto bad_nolog;\n        }\n        r->hostname = src;\n        return is_v6literal;\n    }\n\n    if (host_header) {\n        rv = apr_parse_addr_port(&host, &scope_id, &port, src, r->pool);\n        if (rv != APR_SUCCESS || scope_id)\n            goto bad;\n        if (port) {\n            /* Don't throw the Host: header's port number away:\n               save it in parsed_uri -- ap_get_server_port() needs it! */\n            /* @@@ XXX there should be a better way to pass the port.\n             *         Like r->hostname, there should be a r->portno\n             */\n            r->parsed_uri.port = port;\n            r->parsed_uri.port_str = apr_itoa(r->pool, (int)port);\n        }\n        if (host_header[0] == '[')\n            is_v6literal = 1;\n    }\n    else {\n        /*\n         * Already parsed, surrounding [ ] (if IPv6 literal) and :port have\n         * already been removed.\n         */\n        host = apr_pstrdup(r->pool, r->hostname);\n        if (ap_strchr(host, ':') != NULL)\n            is_v6literal = 1;\n    }\n\n    if (is_v6literal) {\n        rv = fix_hostname_v6_literal(r, host);\n    }\n    else {\n        rv = fix_hostname_non_v6(r, host);\n        if (strict && rv == APR_SUCCESS)\n            rv = strict_hostname_check(r, host);\n    }\n    if (rv != APR_SUCCESS)\n        goto bad;\n\n    r->hostname = host;\n    return is_v6literal;\n\nbad:\n    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00550)\n                  \"Client sent malformed Host header: %s\",\n                  src);\nbad_nolog:\n    r->status = HTTP_BAD_REQUEST;\n    return is_v6literal;\n}\n\n/* return 1 if host matches ServerName or ServerAliases */\nstatic int matches_aliases(server_rec *s, const char *host)\n{\n    int i;\n    apr_array_header_t *names;\n\n    /* match ServerName */\n    if (!strcasecmp(host, s->server_hostname)) {\n        return 1;\n    }\n\n    /* search all the aliases from ServerAlias directive */\n    names = s->names;\n    if (names) {\n        char **name = (char **) names->elts;\n        for (i = 0; i < names->nelts; ++i) {\n            if (!name[i]) continue;\n            if (!strcasecmp(host, name[i]))\n                return 1;\n        }\n    }\n    names = s->wild_names;\n    if (names) {\n        char **name = (char **) names->elts;\n        for (i = 0; i < names->nelts; ++i) {\n            if (!name[i]) continue;\n            if (!ap_strcasecmp_match(host, name[i]))\n                return 1;\n        }\n    }\n    return 0;\n}\n\n\n/* Suppose a request came in on the same socket as this r, and included\n * a header \"Host: host:port\", would it map to r->server?  It's more\n * than just that though.  When we do the normal matches for each request\n * we don't even bother considering Host: etc on non-namevirtualhosts,\n * we just call it a match.  But here we require the host:port to match\n * the ServerName and/or ServerAliases.\n */\nAP_DECLARE(int) ap_matches_request_vhost(request_rec *r, const char *host,\n                                         apr_port_t port)\n{\n    server_rec *s;\n    server_addr_rec *sar;\n\n    s = r->server;\n\n    /* search all the <VirtualHost> values */\n    /* XXX: If this is a NameVirtualHost then we may not be doing the Right Thing\n     * consider:\n     *\n     *     NameVirtualHost 10.1.1.1\n     *     <VirtualHost 10.1.1.1>\n     *     ServerName v1\n     *     </VirtualHost>\n     *     <VirtualHost 10.1.1.1>\n     *     ServerName v2\n     *     </VirtualHost>\n     *\n     * Suppose r->server is v2, and we're asked to match \"10.1.1.1\".  We'll say\n     * \"yup it's v2\", when really it isn't... if a request came in for 10.1.1.1\n     * it would really go to v1.\n     */\n    for (sar = s->addrs; sar; sar = sar->next) {\n        if ((sar->host_port == 0 || port == sar->host_port)\n            && !strcasecmp(host, sar->virthost)) {\n            return 1;\n        }\n    }\n\n    /* the Port has to match now, because the rest don't have ports associated\n     * with them. */\n    if (port != s->port) {\n        return 0;\n    }\n\n    return matches_aliases(s, host);\n}\n\n\n/*\n * Updates r->server from ServerName/ServerAlias. Per the interaction\n * of ip and name-based vhosts, it only looks in the best match from the\n * connection-level ip-based matching.\n * Returns HTTP_BAD_REQUEST if there was no match.\n */\nstatic int update_server_from_aliases(request_rec *r)\n{\n    /*\n     * Even if the request has a Host: header containing a port we ignore\n     * that port.  We always use the physical port of the socket.  There\n     * are a few reasons for this:\n     *\n     * - the default of 80 or 443 for SSL is easier to handle this way\n     * - there is less of a possibility of a security problem\n     * - it simplifies the data structure\n     * - the client may have no idea that a proxy somewhere along the way\n     *   translated the request to another ip:port\n     * - except for the addresses from the VirtualHost line, none of the other\n     *   names we'll match have ports associated with them\n     */\n    const char *host = r->hostname;\n    apr_port_t port;\n    server_rec *s;\n    server_rec *virthost_s;\n    server_rec *last_s;\n    name_chain *src;\n\n    virthost_s = NULL;\n    last_s = NULL;\n\n    port = r->connection->local_addr->port;\n\n    /* Recall that the name_chain is a list of server_addr_recs, some of\n     * whose ports may not match.  Also each server may appear more than\n     * once in the chain -- specifically, it will appear once for each\n     * address from its VirtualHost line which matched.  We only want to\n     * do the full ServerName/ServerAlias comparisons once for each\n     * server, fortunately we know that all the VirtualHost addresses for\n     * a single server are adjacent to each other.\n     */\n\n    for (src = r->connection->vhost_lookup_data; src; src = src->next) {\n        server_addr_rec *sar;\n\n        /* We only consider addresses on the name_chain which have a matching\n         * port\n         */\n        sar = src->sar;\n        if (sar->host_port != 0 && port != sar->host_port) {\n            continue;\n        }\n\n        s = src->server;\n\n        /* If we still need to do ServerName and ServerAlias checks for this\n         * server, do them now.\n         */\n        if (s != last_s) {\n            /* does it match any ServerName or ServerAlias directive? */\n            if (matches_aliases(s, host)) {\n                goto found;\n            }\n        }\n\n        /* Fallback: does it match the virthost from the sar? */\n        if (!strcasecmp(host, sar->virthost)) {\n            /* only the first match is used */\n            if (virthost_s == NULL) {\n                virthost_s = s;\n            }\n        }\n\n        last_s = s;\n    }\n\n    /* If ServerName and ServerAlias check failed, we end up here.  If it\n     * matches a VirtualHost, virthost_s is set. Use that as fallback\n     */\n    if (virthost_s) {\n        s = virthost_s;\n        goto found;\n    }\n\n    if (!r->connection->vhost_lookup_data) { \n        if (matches_aliases(r->server, host)) {\n            s = r->server;\n            goto found;\n        }\n    }\n    return HTTP_BAD_REQUEST;\n\nfound:\n    /* s is the first matching server, we're done */\n    r->server = s;\n    return HTTP_OK;\n}\n\n\nstatic void check_serverpath(request_rec *r)\n{\n    server_rec *s;\n    server_rec *last_s;\n    name_chain *src;\n    apr_port_t port;\n\n    port = r->connection->local_addr->port;\n\n    /*\n     * This is in conjunction with the ServerPath code in http_core, so we\n     * get the right host attached to a non- Host-sending request.\n     *\n     * See the comment in update_server_from_aliases about how each vhost can be\n     * listed multiple times.\n     */\n\n    last_s = NULL;\n    for (src = r->connection->vhost_lookup_data; src; src = src->next) {\n        /* We only consider addresses on the name_chain which have a matching\n         * port\n         */\n        if (src->sar->host_port != 0 && port != src->sar->host_port) {\n            continue;\n        }\n\n        s = src->server;\n        if (s == last_s) {\n            continue;\n        }\n        last_s = s;\n\n        if (s->path && !strncmp(r->uri, s->path, s->pathlen) &&\n            (s->path[s->pathlen - 1] == '/' ||\n             r->uri[s->pathlen] == '/' ||\n             r->uri[s->pathlen] == '\\0')) {\n            r->server = s;\n            return;\n        }\n    }\n}\n\nstatic APR_INLINE const char *construct_host_header(request_rec *r,\n                                                    int is_v6literal)\n{\n    struct iovec iov[5];\n    apr_size_t nvec = 0;\n    /*\n     * We cannot use ap_get_server_name/port here, because we must\n     * ignore UseCanonicalName/Port.\n     */\n    if (is_v6literal) {\n        iov[nvec].iov_base = \"[\";\n        iov[nvec].iov_len = 1;\n        nvec++;\n    }\n    iov[nvec].iov_base = (void *)r->hostname;\n    iov[nvec].iov_len = strlen(r->hostname);\n    nvec++;\n    if (is_v6literal) {\n        iov[nvec].iov_base = \"]\";\n        iov[nvec].iov_len = 1;\n        nvec++;\n    }\n    if (r->parsed_uri.port_str) {\n        iov[nvec].iov_base = \":\";\n        iov[nvec].iov_len = 1;\n        nvec++;\n        iov[nvec].iov_base = r->parsed_uri.port_str;\n        iov[nvec].iov_len = strlen(r->parsed_uri.port_str);\n        nvec++;\n    }\n    return apr_pstrcatv(r->pool, iov, nvec, NULL);\n}\n\nAP_DECLARE(void) ap_update_vhost_from_headers(request_rec *r)\n{\n    ap_update_vhost_from_headers_ex(r, 0);\n}\n\nAP_DECLARE(int) ap_update_vhost_from_headers_ex(request_rec *r, int require_match)\n{\n    core_server_config *conf = ap_get_core_module_config(r->server->module_config);\n    const char *host_header = apr_table_get(r->headers_in, \"Host\");\n    int is_v6literal = 0;\n    int have_hostname_from_url = 0;\n    int rc = HTTP_OK;\n\n    if (r->hostname) {\n        /*\n         * If there was a host part in the Request-URI, ignore the 'Host'\n         * header.\n         */\n        have_hostname_from_url = 1;\n        is_v6literal = fix_hostname(r, NULL, conf->http_conformance);\n    }\n    else if (host_header != NULL) {\n        is_v6literal = fix_hostname(r, host_header, conf->http_conformance);\n    }\n    if (!require_match && r->status != HTTP_OK)\n        return HTTP_OK;\n\n    if (conf->http_conformance != AP_HTTP_CONFORMANCE_UNSAFE) {\n        /*\n         * If we have both hostname from an absoluteURI and a Host header,\n         * we must ignore the Host header (RFC 2616 5.2).\n         * To enforce this, we reset the Host header to the value from the\n         * request line.\n         */\n        if (have_hostname_from_url && host_header != NULL) {\n            const char *repl = construct_host_header(r, is_v6literal);\n            apr_table_setn(r->headers_in, \"Host\", repl);\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(02417)\n                          \"Replacing host header '%s' with host '%s' given \"\n                          \"in the request uri\", host_header, repl);\n        }\n    }\n\n    /* check if we tucked away a name_chain */\n    if (r->connection->vhost_lookup_data) {\n        if (r->hostname)\n            rc = update_server_from_aliases(r);\n        else\n            check_serverpath(r);\n    }\n    else if (require_match && r->hostname) { \n        /* check the base server config */\n        rc = update_server_from_aliases(r);\n    }\n    \n    return rc;\n}\n\n/**\n * For every virtual host on this connection, call func_cb.\n */\nAP_DECLARE(int) ap_vhost_iterate_given_conn(conn_rec *conn,\n                                            ap_vhost_iterate_conn_cb func_cb,\n                                            void* baton)\n{\n    server_rec *s;\n    server_rec *last_s;\n    name_chain *src;\n    apr_port_t port;\n    int rv = 0;\n\n    if (conn->vhost_lookup_data) {\n        last_s = NULL;\n        port = conn->local_addr->port;\n\n        for (src = conn->vhost_lookup_data; src; src = src->next) {\n            server_addr_rec *sar;\n\n            /* We only consider addresses on the name_chain which have a\n             * matching port.\n             */\n            sar = src->sar;\n            if (sar->host_port != 0 && port != sar->host_port) {\n                continue;\n            }\n\n            s = src->server;\n\n            if (s == last_s) {\n                /* we've already done a callback for this vhost. */\n                continue;\n            }\n\n            last_s = s;\n\n            rv = func_cb(baton, conn, s);\n\n            if (rv != 0) {\n                break;\n            }\n        }\n    }\n    else {\n        rv = func_cb(baton, conn, conn->base_server);\n    }\n\n    return rv;\n}\n\n/* Called for a new connection which has a known local_addr.  Note that the\n * new connection is assumed to have conn->server == main server.\n */\nAP_DECLARE(void) ap_update_vhost_given_ip(conn_rec *conn)\n{\n    ipaddr_chain *trav;\n    apr_port_t port;\n\n    /* scan the hash table for an exact match first */\n    trav = find_ipaddr(conn->local_addr);\n\n    if (trav) {\n        /* save the name_chain for later in case this is a name-vhost */\n        conn->vhost_lookup_data = trav->names;\n        conn->base_server = trav->server;\n        return;\n    }\n\n    /* maybe there's a default server or wildcard name-based vhost\n     * matching this port\n     */\n    port = conn->local_addr->port;\n\n    trav = find_default_server(port);\n    if (trav) {\n        conn->vhost_lookup_data = trav->names;\n        conn->base_server = trav->server;\n        return;\n    }\n\n    /* otherwise we're stuck with just the main server\n     * and no name-based vhosts\n     */\n    conn->vhost_lookup_data = NULL;\n}\n"], "filenames": ["CHANGES", "docs/manual/mod/core.xml", "include/ap_mmn.h", "include/http_core.h", "include/http_protocol.h", "include/http_vhost.h", "modules/http2/h2_request.c", "server/core.c", "server/core_filters.c", "server/protocol.c", "server/vhost.c"], "buggy_code_start_loc": [2, 5209, 561, 756, 56, 102, 213, 513, 86, 612, 36], "buggy_code_end_loc": [2, 5209, 570, 783, 61, 102, 353, 5627, 91, 1522, 1180], "fixing_code_start_loc": [3, 5210, 562, 757, 57, 103, 212, 514, 85, 612, 37], "fixing_code_end_loc": [11, 5246, 573, 790, 83, 116, 246, 5636, 85, 1602, 1207], "type": "NVD-CWE-Other", "message": "A crafted method sent through HTTP/2 will bypass validation and be forwarded by mod_proxy, which can lead to request splitting or cache poisoning. This issue affects Apache HTTP Server 2.4.17 to 2.4.48.", "other": {"cve": {"id": "CVE-2021-33193", "sourceIdentifier": "security@apache.org", "published": "2021-08-16T08:15:11.480", "lastModified": "2023-03-03T19:15:10.363", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A crafted method sent through HTTP/2 will bypass validation and be forwarded by mod_proxy, which can lead to request splitting or cache poisoning. This issue affects Apache HTTP Server 2.4.17 to 2.4.48."}, {"lang": "es", "value": "Un m\u00e9todo dise\u00f1ado enviado mediante HTTP/2 omitir\u00e1 la comprobaci\u00f3n y ser\u00e1 reenviado por mod_proxy, lo que puede conllevar a la divisi\u00f3n de peticiones o el envenenamiento de la cach\u00e9. Este problema afecta a Apache HTTP Server versiones 2.4.17 a 2.4.48."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:apache:http_server:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.17", "versionEndIncluding": "2.4.48", "matchCriteriaId": "C700D9C3-7023-48A7-8A76-70597D99829E"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:34:*:*:*:*:*:*:*", "matchCriteriaId": "A930E247-0B43-43CB-98FF-6CE7B8189835"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:35:*:*:*:*:*:*:*", "matchCriteriaId": "80E516C0-98A4-4ADE-B69F-66A772E2BAAA"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tenable:tenable.sc:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.19.1", "matchCriteriaId": "A686FAF0-1383-4BBB-B7F5-CBCCAB55B356"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:secure_backup:*:*:*:*:*:*:*:*", "versionEndExcluding": "18.1.0.1.0", "matchCriteriaId": "C01E8B82-71C7-4A4A-A70A-7B147524AB4A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:zfs_storage_appliance_kit:8.8:*:*:*:*:*:*:*", "matchCriteriaId": "D3E503FB-6279-4D4A-91D8-E237ECF9D2B0"}]}]}], "references": [{"url": "https://github.com/apache/httpd/commit/ecebcc035ccd8d0e2984fe41420d9e944f456b3c.patch", "source": "security@apache.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/re4162adc051c1a0a79e7a24093f3776373e8733abaff57253fef341d@%3Ccvs.httpd.apache.org%3E", "source": "security@apache.org", "tags": ["Mailing List", "Patch", "Vendor Advisory"]}, {"url": "https://lists.apache.org/thread.html/ree7519d71415ecdd170ff1889cab552d71758d2ba2904a17ded21a70@%3Ccvs.httpd.apache.org%3E", "source": "security@apache.org", "tags": ["Mailing List", "Patch", "Vendor Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2023/03/msg00002.html", "source": "security@apache.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DSM6UWQICBJ2TU727RENU3HBKEAFLT6T/", "source": "security@apache.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/EUVJVRJRBW5QVX4OY3NOHZDQ3B3YOTSG/", "source": "security@apache.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://portswigger.net/research/http2", "source": "security@apache.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202208-20", "source": "security@apache.org", "tags": ["Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20210917-0004/", "source": "security@apache.org", "tags": ["Third Party Advisory"]}, {"url": "https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-apache-httpd-2.4.49-VWL69sWQ", "source": "security@apache.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuapr2022.html", "source": "security@apache.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujan2022.html", "source": "security@apache.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.tenable.com/security/tns-2021-17", "source": "security@apache.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/apache/httpd/commit/ecebcc035ccd8d0e2984fe41420d9e944f456b3c.patch"}}