{"buggy_code": ["<?php\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Enterprise License (PEL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PEL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\BruteforceProtectedControllerInterface;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\BruteforceProtectionHandler;\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\Configuration\\TemplatePhp;\nuse Pimcore\\Controller\\EventedControllerInterface;\nuse Pimcore\\Event\\Admin\\Login\\LostPasswordEvent;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Templating\\Model\\ViewModel;\nuse Pimcore\\Tool;\nuse Pimcore\\Tool\\Authentication;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Core\\Security;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n\nclass LoginController extends AdminController implements BruteforceProtectedControllerInterface, EventedControllerInterface\n{\n    public function onKernelController(FilterControllerEvent $event)\n    {\n        // use browser language for login page if possible\n        $locale = 'en';\n\n        $availableLocales = Tool\\Admin::getLanguages();\n        foreach ($event->getRequest()->getLanguages() as $userLocale) {\n            if (in_array($userLocale, $availableLocales)) {\n                $locale = $userLocale;\n                break;\n            }\n        }\n\n        $this->get('translator')->setLocale($locale);\n    }\n\n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n    }\n\n    /**\n     * @Route(\"/login\", name=\"pimcore_admin_login\")\n     * @Route(\"/login/\", name=\"pimcore_admin_login_fallback\")\n     *\n     * @TemplatePhp()\n     */\n    public function loginAction(Request $request)\n    {\n        if ($request->get('_route') === 'pimcore_admin_login_fallback') {\n            return $this->redirectToRoute('pimcore_admin_login', $request->query->all(), Response::HTTP_MOVED_PERMANENTLY);\n        }\n\n        $user = $this->getAdminUser();\n        if ($user instanceof UserInterface) {\n            return $this->redirectToRoute('pimcore_admin_index');\n        }\n\n        $view = $this->buildLoginPageViewModel();\n\n        if ($request->get('auth_failed')) {\n            $view->error = 'error_auth_failed';\n        }\n        if ($request->get('session_expired')) {\n            $view->error = 'error_session_expired';\n        }\n\n        return $view;\n    }\n\n    /**\n     * @Route(\"/logout\", name=\"pimcore_admin_logout\")\n     */\n    public function logoutAction()\n    {\n        // this route will never be matched, but will be handled by the logout handler\n    }\n\n    /**\n     * Dummy route used to check authentication\n     *\n     * @Route(\"/login/login\", name=\"pimcore_admin_login_check\")\n     *\n     * @see AdminAuthenticator for the security implementation\n     */\n    public function loginCheckAction()\n    {\n        // just in case the authenticator didn't redirect\n        return new RedirectResponse($this->generateUrl('pimcore_admin_login'));\n    }\n\n    /**\n     * @Route(\"/login/lostpassword\")\n     * @TemplatePhp()\n     */\n    public function lostpasswordAction(Request $request, BruteforceProtectionHandler $bruteforceProtectionHandler)\n    {\n        $view = $this->buildLoginPageViewModel();\n        $error = null;\n\n        if ($request->getMethod() === 'POST' && $username = $request->get('username')) {\n            $user = User::getByName($username);\n\n            if ($user instanceof User) {\n                if (!$user->isActive()) {\n                    $error = 'user inactive';\n                }\n\n                if (!$user->getEmail()) {\n                    $error = 'user has no email address';\n                }\n\n                if (!$user->getPassword()) {\n                    $error = 'user has no password';\n                }\n            } else {\n                $error = 'user unknown';\n            }\n\n            if (!$error) {\n                $token = Authentication::generateToken($username, $user->getPassword());\n\n                $loginUrl = $this->generateUrl('pimcore_admin_login_check', [\n                    'username' => $username,\n                    'token' => $token,\n                    'reset' => 'true'\n                ], UrlGeneratorInterface::ABSOLUTE_URL);\n\n                try {\n                    $event = new LostPasswordEvent($user, $loginUrl);\n                    $this->get('event_dispatcher')->dispatch(AdminEvents::LOGIN_LOSTPASSWORD, $event);\n\n                    // only send mail if it wasn't prevented in event\n                    if ($event->getSendMail()) {\n                        $mail = Tool::getMail([$user->getEmail()], 'Pimcore lost password service');\n                        $mail->setIgnoreDebugMode(true);\n                        $mail->setBodyText(\"Login to pimcore and change your password using the following link. This temporary login link will expire in 24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                        $mail->send();\n                    }\n\n                    // directly return event response\n                    if ($event->hasResponse()) {\n                        return $event->getResponse();\n                    }\n                } catch (\\Exception $e) {\n                    $error = 'could not send email';\n                }\n            }\n\n            if ($error) {\n                Logger::error('Lost password service: ' . $error);\n                $bruteforceProtectionHandler->addEntry($request->get('username'), $request);\n            }\n        }\n\n        return $view;\n    }\n\n    /**\n     * @Route(\"/login/deeplink\")\n     * @TemplatePhp()\n     */\n    public function deeplinkAction(Request $request)\n    {\n        // check for deeplink\n        $queryString = $_SERVER['QUERY_STRING'];\n\n        if (preg_match('/(document|asset|object)_([0-9]+)_([a-z]+)/', $queryString, $deeplink)) {\n            $deeplink = $deeplink[0];\n            $perspective = strip_tags($request->get('perspective'));\n\n            if (strpos($queryString, 'token')) {\n                $url = $this->generateUrl('pimcore_admin_login', [\n                    'deeplink' => $deeplink,\n                    'perspective' => $perspective\n                ]);\n\n                $url .= '&' . $queryString;\n\n                return $this->redirect($url);\n            } elseif ($queryString) {\n                return new ViewModel([\n                    'tab' => $deeplink,\n                    'perspective' => $perspective\n                ]);\n            }\n        }\n    }\n\n    /**\n     * @return ViewModel\n     */\n    protected function buildLoginPageViewModel()\n    {\n        $bundleManager = $this->get('pimcore.extension.bundle_manager');\n\n        $view = new ViewModel([\n            'config' => Config::getSystemConfig(),\n            'pluginCssPaths' => $bundleManager->getCssPaths()\n        ]);\n\n        return $view;\n    }\n\n    /**\n     * @Route(\"/login/2fa\", name=\"pimcore_admin_2fa\")\n     *\n     * @param Request $request\n     *\n     * @TemplatePhp()\n     */\n    public function twoFactorAuthenticationAction(Request $request)\n    {\n        $view = $this->buildLoginPageViewModel();\n\n        if ($request->hasSession()) {\n            $session = $request->getSession();\n            $authException = $session->get(Security::AUTHENTICATION_ERROR);\n            if ($authException instanceof AuthenticationException) {\n                $session->remove(Security::AUTHENTICATION_ERROR);\n\n                $view->error = $authException->getMessage();\n            }\n        } else {\n            $view->error = 'No session available, it either timed out or cookies are not enabled.';\n        }\n\n        return $view;\n    }\n\n    /**\n     * @Route(\"/login/2fa-verify\", name=\"pimcore_admin_2fa-verify\")\n     *\n     * @param Request $request\n     */\n    public function twoFactorAuthenticationVerifyAction(Request $request)\n    {\n    }\n}\n", "<?php\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Enterprise License (PEL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PEL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Controller\\EventedControllerInterface;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Tool;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\nclass UserController extends AdminController implements EventedControllerInterface\n{\n    /**\n     * @Route(\"/user/tree-get-childs-by-id\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Listing();\n        $list->setCondition('parentId = ?', intval($request->get('node')));\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user->getId() && $user->getName() != 'system') {\n                    $users[] = $this->getTreeNodeConfig($user);\n                }\n            }\n        }\n\n        return $this->adminJson($users);\n    }\n\n    /**\n     * @param $user\n     *\n     * @return array\n     */\n    protected function getTreeNodeConfig($user)\n    {\n        $tmpUser = [\n            'id' => $user->getId(),\n            'text' => $user->getName(),\n            'elementType' => 'user',\n            'type' => $user->getType(),\n            'qtipCfg' => [\n                'title' => 'ID: ' . $user->getId()\n            ]\n        ];\n\n        // set type specific settings\n        if ($user instanceof User\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($user->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_user';\n            if (!$user->getActive()) {\n                $tmpUser['cls'] = ' pimcore_unpublished';\n            }\n            $tmpUser['allowChildren'] = false;\n            $tmpUser['admin'] = $user->isAdmin();\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        try {\n            $type = $request->get('type');\n\n            $className = User\\Service::getClassNameForType($type);\n            $user = $className::create([\n                'parentId' => intval($request->get('parentId')),\n                'name' => trim($request->get('name')),\n                'password' => '',\n                'active' => $request->get('active')\n            ]);\n\n            if ($request->get('rid')) {\n                $rid = $request->get('rid');\n                $rObject = $className::getById($rid);\n                if ($rObject) {\n                    if ($type == 'user' || $type == 'role') {\n                        $user->setParentId($rObject->getParentId());\n                        if ($rObject->getClasses()) {\n                            $user->setClasses(implode(',', $rObject->getClasses()));\n                        }\n                        if ($rObject->getDocTypes()) {\n                            $user->setDocTypes(implode(',', $rObject->getDocTypes()));\n                        }\n\n                        $keys = ['asset', 'document', 'object'];\n                        foreach ($keys as $key) {\n                            $getter = 'getWorkspaces' . ucfirst($key);\n                            $setter = 'setWorkspaces' . ucfirst($key);\n                            $workspaces = $rObject->$getter();\n                            $clonedWorkspaces = [];\n                            if (is_array($workspaces)) {\n                                foreach ($workspaces as $workspace) {\n                                    $vars = get_object_vars($workspace);\n                                    if ($key == 'object') {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\DataObject';\n                                    } else {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . ucfirst($key);\n                                    }\n                                    $newWorkspace = new $workspaceClass();\n                                    foreach ($vars as $varKey => $varValue) {\n                                        $newWorkspace->$varKey = $varValue;\n                                    }\n                                    $newWorkspace->setUserId($user->getId());\n                                    $clonedWorkspaces[] = $newWorkspace;\n                                }\n                            }\n\n                            $user->$setter($clonedWorkspaces);\n                        }\n\n                        $user->setPermissions($rObject->getPermissions());\n\n                        if ($type == 'user') {\n                            $user->setAdmin(false);\n                            if ($this->getAdminUser()->isAdmin()) {\n                                $user->setAdmin($rObject->getAdmin());\n                            }\n                            $user->setActive($rObject->getActive());\n                            $user->setRoles($rObject->getRoles());\n                            $user->setWelcomeScreen($rObject->getWelcomescreen());\n                            $user->setMemorizeTabs($rObject->getMemorizeTabs());\n                            $user->setCloseWarning($rObject->getCloseWarning());\n                        }\n\n                        $user->save();\n                    }\n                }\n            }\n\n            return $this->adminJson([\n                'success' => true,\n                'id' => $user->getId()\n            ]);\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @param $node\n     * @param $currentList\n     * @param $roleMode\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    protected function populateChildNodes($node, &$currentList, $roleMode)\n    {\n        $currentUser = \\Pimcore\\Tool\\Admin::getCurrentUser();\n\n        $list = $roleMode ? new User\\Role\\Listing() : new User\\Listing();\n        $list->setCondition('parentId = ?', $node->getId());\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $childList = $roleMode ? $list->getRoles() : $list->getUsers();\n        if (is_array($childList)) {\n            foreach ($childList as $user) {\n                if ($user->getId() == $currentUser->getId()) {\n                    throw new \\Exception('Cannot delete current user');\n                }\n                if ($user->getId() && $currentUser->getId() && $user->getName() != 'system') {\n                    $currentList[] = $user;\n                    $this->populateChildNodes($user, $currentList, $roleMode);\n                }\n            }\n        }\n\n        return $currentList;\n    }\n\n    /**\n     * @Route(\"/user/delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteAction(Request $request)\n    {\n        $user = User\\AbstractUser::getById(intval($request->get('id')));\n\n        // only admins are allowed to delete admins and folders\n        // because a folder might contain an admin user, so it is simply not allowed for users with the \"users\" permission\n        if (($user instanceof User\\Folder && !$this->getAdminUser()->isAdmin()) || ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin())) {\n            throw new \\Exception('You are not allowed to delete this user');\n        } else {\n            if ($user instanceof User\\Role\\Folder) {\n                $list = [$user];\n                $this->populateChildNodes($user, $list, $user instanceof User\\Role\\Folder);\n                $listCount = count($list);\n                for ($i = $listCount - 1; $i >= 0; $i--) {\n                    // iterate over the list from the so that nothing can get \"lost\"\n                    $user = $list[$i];\n                    $user->delete();\n                }\n            } else {\n                if ($user->getId()) {\n                    if ($user instanceof User\\Role) {\n                        // #1431 remove user-role relations\n                        $userRoleRelationListing = new User\\Listing();\n                        $userRoleRelationListing->setCondition('FIND_IN_SET(' . $user->getId() . ',roles)');\n                        $userRoleRelationListing = $userRoleRelationListing->load();\n                        if ($userRoleRelationListing) {\n                            /** @var $relatedUser User */\n                            foreach ($userRoleRelationListing as $relatedUser) {\n                                $userRoles = $relatedUser->getRoles();\n                                if (is_array($userRoles)) {\n                                    $key = array_search($user->getId(), $userRoles);\n                                    if (false !== $key) {\n                                        unset($userRoles[$key]);\n                                        $relatedUser->setRoles($userRoles);\n                                        $relatedUser->save();\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    $user->delete();\n                }\n            }\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function updateAction(Request $request)\n    {\n        $user = User\\AbstractUser::getById(intval($request->get('id')));\n\n        if ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw new \\Exception('Only admin users are allowed to modify admin users');\n        }\n\n        if ($request->get('data')) {\n            $values = $this->decodeJson($request->get('data'), true);\n\n            if (!empty($values['password'])) {\n                if (strlen($values['password']) < 10) {\n                    throw new \\Exception('Passwords have to be at least 10 characters long');\n                }\n                $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['password']);\n            }\n\n            // check if there are permissions transmitted, if so reset them all to false (they will be set later)\n            foreach ($values as $key => $value) {\n                if (strpos($key, 'permission_') === 0) {\n                    if (method_exists($user, 'setAllAclToFalse')) {\n                        $user->setAllAclToFalse();\n                    }\n                    break;\n                }\n            }\n\n            if (isset($values['2fa_required'])) {\n                $user->setTwoFactorAuthentication('required', (bool) $values['2fa_required']);\n            }\n\n            $user->setValues($values);\n\n            // only admins are allowed to create admin users\n            // if the logged in user isn't an admin, set admin always to false\n            if (!$this->getAdminUser()->isAdmin() && $user instanceof User) {\n                if ($user instanceof User) {\n                    $user->setAdmin(false);\n                }\n            }\n\n            // check for permissions\n            $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n            $availableUserPermissions = $availableUserPermissionsList->load();\n\n            foreach ($availableUserPermissions as $permission) {\n                if (isset($values['permission_' . $permission->getKey()])) {\n                    $user->setPermission($permission->getKey(), (bool) $values['permission_' . $permission->getKey()]);\n                }\n            }\n\n            // check for workspaces\n            if ($request->get('workspaces')) {\n                $processedPaths = ['object' => [], 'asset' => [], 'document' => []]; //array to find if there are multiple entries for a path\n                $workspaces = $this->decodeJson($request->get('workspaces'), true);\n                foreach ($workspaces as $type => $spaces) {\n                    $newWorkspaces = [];\n                    foreach ($spaces as $space) {\n                        if (in_array($space['path'], $processedPaths[$type])) {\n                            throw new \\Exception('Error saving workspaces as multiple entries found for path \"' . $space['path'] .'\" in '.$this->trans(\"$type\") . 's');\n                        }\n\n                        $element = Element\\Service::getElementByPath($type, $space['path']);\n                        if ($element) {\n                            $className = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . Element\\Service::getBaseClassNameForElement($type);\n                            $workspace = new $className();\n                            $workspace->setValues($space);\n\n                            $workspace->setCid($element->getId());\n                            $workspace->setCpath($element->getRealFullPath());\n                            $workspace->setUserId($user->getId());\n\n                            $newWorkspaces[] = $workspace;\n                            $processedPaths[$type][] = $space['path'];\n                        }\n                    }\n                    $user->{'setWorkspaces' . ucfirst($type)}($newWorkspaces);\n                }\n            }\n        }\n\n        if ($request->get('keyBindings')) {\n            $keyBindings = json_decode($request->get('keyBindings'), true);\n            $tmpArray = [];\n            foreach ($keyBindings as $action => $item) {\n                $tmpArray[] = json_decode($item, true);\n            }\n            $tmpArray = array_values(array_filter($tmpArray));\n            $tmpArray = json_encode($tmpArray);\n\n            $user->setKeyBindings($tmpArray);\n        }\n\n        $user->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getAction(Request $request)\n    {\n        if (intval($request->get('id')) < 1) {\n            return $this->adminJson(['success' => false]);\n        }\n\n        /**\n         * @var $user User\n         */\n        $user = User::getById(intval($request->get('id')));\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw new \\Exception('Only admin users are allowed to modify admin users');\n        }\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $user->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                }\n            }\n        }\n\n        // object <=> user dependencies\n        $userObjects = DataObject\\Service::getObjectsReferencingUser($user->getId());\n        $userObjectData = [];\n\n        foreach ($userObjects as $o) {\n            $hasHidden = false;\n            if ($o->isAllowed('list')) {\n                $userObjectData[] = [\n                    'path' => $o->getRealFullPath(),\n                    'id' => $o->getId(),\n                    'subtype' => $o->getClass()->getName()\n                ];\n            } else {\n                $hasHidden = true;\n            }\n        }\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n\n        // get available roles\n        $list = new User\\Role\\Listing();\n        $list->setCondition('`type` = ?', ['role']);\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = [$role->getId(), $role->getName()];\n            }\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['twoFactorAuthentication']['isActive'] = ($user->getTwoFactorAuthentication('enabled') || $user->getTwoFactorAuthentication('secret'));\n        unset($userData['password']);\n        unset($userData['twoFactorAuthentication']['secret']);\n\n        $availablePerspectives = \\Pimcore\\Config::getAvailablePerspectives(null);\n\n        $conf = \\Pimcore\\Config::getSystemConfig();\n\n        return $this->adminJson([\n            'success' => true,\n            'wsenabled' => $conf->webservice->enabled,\n            'user' => $userData,\n            'roles' => $roles,\n            'permissions' => $user->generatePermissionList(),\n            'availablePermissions' => $availableUserPermissions,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages(),\n            'objectDependencies' => [\n                'hasHidden' => $hasHidden,\n                'dependencies' => $userObjectData\n            ]\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-minimal\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getMinimalAction(Request $request)\n    {\n        $user = User::getById(intval($request->get('id')));\n        $user->setPassword(null);\n\n        $minimalUserData['id'] = $user->getId();\n        $minimalUserData['admin'] = $user->isAdmin();\n        $minimalUserData['active'] = $user->isActive();\n        $minimalUserData['permissionInfo']['assets'] = $user->isAllowed('assets');\n        $minimalUserData['permissionInfo']['documents'] = $user->isAllowed('documents');\n        $minimalUserData['permissionInfo']['objects'] = $user->isAllowed('objects');\n\n        return $this->adminJson($minimalUserData);\n    }\n\n    /**\n     * @Route(\"/user/upload-current-user-image\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function uploadCurrentUserImageAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                return $this->uploadImageAction($request);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/update-current-user\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                $values = $this->decodeJson($request->get('data'), true);\n\n                unset($values['name']);\n                unset($values['id']);\n                unset($values['admin']);\n                unset($values['permissions']);\n                unset($values['roles']);\n                unset($values['active']);\n\n                if (!empty($values['new_password'])) {\n                    $oldPasswordCheck = false;\n\n                    if (empty($values['old_password'])) {\n                        // if the user want to reset the password, the old password isn't required\n                        $oldPasswordCheck = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n                            if ($adminSession->get('password_reset')) {\n                                return true;\n                            }\n\n                            return false;\n                        });\n                    } else {\n                        // the password has to match\n                        $checkUser = Tool\\Authentication::authenticatePlaintext($user->getName(), $values['old_password']);\n                        if ($checkUser) {\n                            $oldPasswordCheck = true;\n                        }\n                    }\n\n                    if (strlen($values['new_password']) < 10) {\n                        throw new \\Exception('Passwords have to be at least 10 characters long');\n                    }\n\n                    if ($oldPasswordCheck && $values['new_password'] == $values['retype_password']) {\n                        $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['new_password']);\n                    } else {\n                        return $this->adminJson(['success' => false, 'message' => 'password_cannot_be_changed']);\n                    }\n                }\n\n                $user->setValues($values);\n\n                if ($request->get('keyBindings')) {\n                    $keyBindings = json_decode($request->get('keyBindings'), true);\n                    $tmpArray = [];\n                    foreach ($keyBindings as $action => $item) {\n                        $tmpArray[] = json_decode($item, true);\n                    }\n                    $tmpArray = array_values(array_filter($tmpArray));\n                    $tmpArray = json_encode($tmpArray);\n\n                    $user->setKeyBindings($tmpArray);\n                }\n\n                $user->save();\n\n                return $this->adminJson(['success' => true]);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/get-current-user\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n\n        $list = new User\\Permission\\Definition\\Listing();\n        $definitions = $list->load();\n\n        foreach ($definitions as $definition) {\n            $user->setPermission($definition->getKey(), $user->isAllowed($definition->getKey()));\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['keyBindings'] = $user->getKeyBindings();\n\n        unset($userData['password']);\n        $userData['twoFactorAuthentication'] = $user->getTwoFactorAuthentication();\n        unset($userData['twoFactorAuthentication']['secret']);\n        $userData['twoFactorAuthentication']['isActive'] = $user->getTwoFactorAuthentication('enabled') && $user->getTwoFactorAuthentication('secret');\n\n        $userData['isPasswordReset'] = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            return $adminSession->get('password_reset');\n        });\n\n        $response = new Response('pimcore.currentuser = ' . $this->encodeJson($userData));\n        $response->headers->set('Content-Type', 'text/javascript');\n\n        return $response;\n    }\n\n    /* ROLES */\n\n    /**\n     * @Route(\"/user/role-tree-get-childs-by-id\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleTreeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Role\\Listing();\n        $list->setCondition('parentId = ?', intval($request->get('node')));\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = $this->getRoleTreeNodeConfig($role);\n            }\n        }\n\n        return $this->adminJson($roles);\n    }\n\n    /**\n     * @param $role\n     *\n     * @return array\n     */\n    protected function getRoleTreeNodeConfig($role)\n    {\n        $tmpUser = [\n            'id' => $role->getId(),\n            'text' => $role->getName(),\n            'elementType' => 'role',\n            'qtipCfg' => [\n                'title' => 'ID: ' . $role->getId()\n            ]\n        ];\n\n        // set type specific settings\n        if ($role instanceof User\\Role\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($role->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_roles';\n            $tmpUser['allowChildren'] = false;\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/role-get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleGetAction(Request $request)\n    {\n        $role = User\\Role::getById(intval($request->get('id')));\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $role->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                }\n            }\n        }\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n\n        $availablePerspectives = \\Pimcore\\Config::getAvailablePerspectives(null);\n\n        return $this->adminJson([\n            'success' => true,\n            'role' => $role,\n            'permissions' => $role->generatePermissionList(),\n            'classes' => $role->getClasses(),\n            'docTypes' => $role->getDocTypes(),\n            'availablePermissions' => $availableUserPermissions,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages()\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/upload-image\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function uploadImageAction(Request $request)\n    {\n        if ($request->get('id')) {\n            if ($this->getAdminUser()->getId() != $request->get('id')) {\n                $this->checkPermission('users');\n            }\n            $id = $request->get('id');\n        } else {\n            $id = $this->getAdminUser()->getId();\n        }\n\n        $userObj = User::getById($id);\n\n        if ($userObj->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw new \\Exception('Only admin users are allowed to modify admin users');\n        }\n\n        $userObj->setImage($_FILES['Filedata']['tmp_name']);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/user/renew-2fa-qr-secret\", methods={\"GET\"})\n     *\n     * @param Request $request\n     */\n    public function renew2FaSecretAction(Request $request)\n    {\n        $this->checkCsrfToken($request);\n\n        $user = $this->getAdminUser();\n        $proxyUser = $this->getAdminUser(true);\n\n        $twoFactorService = $this->get('scheb_two_factor.security.google_authenticator');\n        $newSecret = $twoFactorService->generateSecret();\n        $user->setTwoFactorAuthentication('enabled', true);\n        $user->setTwoFactorAuthentication('type', 'google');\n        $user->setTwoFactorAuthentication('secret', $newSecret);\n        $user->save();\n\n        Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            Tool\\Session::regenerateId();\n            $adminSession->set('2fa_required', true);\n        });\n\n        $twoFactorService = $this->get('scheb_two_factor.security.google_authenticator');\n        $url = $twoFactorService->getQRContent($proxyUser);\n\n        $code = new \\Endroid\\QrCode\\QrCode;\n        $code->setWriterByName('png');\n        $code->setText($url);\n        $code->setSize(200);\n\n        $qrCodeFile = PIMCORE_PRIVATE_VAR . '/qr-code-' . uniqid() . '.png';\n        $code->writeFile($qrCodeFile);\n\n        $response = new BinaryFileResponse($qrCodeFile);\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/user/disable-2fa\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     */\n    public function disable2FaSecretAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        $success = false;\n\n        if (!$user->getTwoFactorAuthentication('required')) {\n            $user->setTwoFactorAuthentication([]);\n            $user->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/reset-2fa-secret\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     */\n    public function reset2FaSecretAction(Request $request)\n    {\n        /**\n         * @var $user User\n         */\n        $user = User::getById(intval($request->get('id')));\n        $success = true;\n        $user->setTwoFactorAuthentication('enabled', false);\n        $user->setTwoFactorAuthentication('secret', '');\n        $user->save();\n\n        return $this->adminJson([\n            'success' => $success\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-image\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     */\n    public function getImageAction(Request $request)\n    {\n        if ($request->get('id')) {\n            if ($this->getAdminUser()->getId() != $request->get('id')) {\n                $this->checkPermission('users');\n            }\n            $id = $request->get('id');\n        } else {\n            $id = $this->getAdminUser()->getId();\n        }\n\n        /** @var User $userObj */\n        $userObj = User::getById($id);\n        $thumb = $userObj->getImage();\n\n        $response = new BinaryFileResponse($thumb);\n        $response->headers->set('Content-Type', 'image/png');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/user/get-token-login-link\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getTokenLoginLinkAction(Request $request)\n    {\n        /** @var User $user */\n        $user = User::getById($request->get('id'));\n\n        if (!$user) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_invalid_user_error'),\n            ], Response::HTTP_NOT_FOUND);\n        }\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_as_admin_non_admin_user_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        if (empty($user->getPassword())) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_no_password_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        $token = Tool\\Authentication::generateToken($user->getName(), $user->getPassword());\n        $link = $request->getScheme() . '://' . $request->getHttpHost() . '/admin/login/login?username=' . $user->getName() . '&token=' . $token;\n\n        return $this->adminJson([\n            'success' => true,\n            'link' => $link\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/search\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function searchAction(Request $request)\n    {\n        $q = '%' . $request->get('query') . '%';\n\n        $list = new User\\Listing();\n        $list->setCondition('name LIKE ? OR firstname LIKE ? OR lastname LIKE ? OR email LIKE ? OR id = ?', [$q, $q, $q, $q, intval($request->get('query'))]);\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user instanceof User && $user->getId() && $user->getName() != 'system') {\n                    $users[] = [\n                        'id' => $user->getId(),\n                        'name' => $user->getName(),\n                        'email' => $user->getEmail(),\n                        'firstname' => $user->getFirstname(),\n                        'lastname' => $user->getLastname(),\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'users' => $users\n        ]);\n    }\n\n    /**\n     * @param FilterControllerEvent $event\n     */\n    public function onKernelController(FilterControllerEvent $event)\n    {\n        $isMasterRequest = $event->isMasterRequest();\n        if (!$isMasterRequest) {\n            return;\n        }\n\n        // check permissions\n        $unrestrictedActions = [\n            'getCurrentUserAction', 'updateCurrentUserAction', 'getAvailablePermissionsAction', 'getMinimalAction',\n            'getImageAction', 'uploadCurrentUserImageAction', 'disable2FaSecretAction', 'renew2FaSecretAction',\n            'getUsersForSharingAction', 'getRolesForSharingAction'\n        ];\n\n        $this->checkActionPermission($event, 'users', $unrestrictedActions);\n    }\n\n    /**\n     * @param FilterResponseEvent $event\n     */\n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n        // nothing to do\n    }\n\n    /**\n     * @param Request $request\n     * @Route(\"/user/get-users-for-sharing\", methods={\"GET\"})\n     */\n    public function getUsersForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getUsersAction($request);\n    }\n\n    /**\n     * @param Request $request\n     * @Route(\"/user/get-roles-for-sharing\", methods={\"GET\"}))\n     */\n    public function getRolesForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getRolesAction($request);\n    }\n\n    /**\n     * @param Request $request\n     * @Route(\"/user/get-users\", methods={\"GET\"})\n     */\n    public function getUsersAction(Request $request)\n    {\n        $users = [];\n\n        // get available user\n        $list = new \\Pimcore\\Model\\User\\Listing();\n\n        $conditions = [ 'type = \"user\"' ];\n\n        if (!$request->get('include_current_user')) {\n            $conditions[] = 'id != ' . $this->getAdminUser()->getId();\n        }\n\n        $list->setCondition(implode(' AND ', $conditions));\n\n        $list->load();\n        $userList = $list->getUsers();\n\n        foreach ($userList as $user) {\n            if (!$request->get('permission') || $user->isAllowed($request->get('permission'))) {\n                $users[] = [\n                    'id' => $user->getId(),\n                    'label' => $user->getUsername()\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($users), 'data' => $users]);\n    }\n\n    /**\n     * @param Request $request\n     * @Route(\"/user/get-roles\", methods={\"GET\"})\n     */\n    public function getRolesAction(Request $request)\n    {\n        $roles = [];\n        $list = new \\Pimcore\\Model\\User\\Role\\Listing();\n\n        $list->setCondition('type = \"role\"');\n        $list->load();\n        $roleList = $list->getRoles();\n\n        /** @var $role User\\Role */\n        foreach ($roleList as $role) {\n            if (!$request->get('permission') || in_array($request->get('permission'), $role->getPermissions())) {\n                $roles[] = [\n                    'id' => $role->getId(),\n                    'label' => $role->getName()\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($roles), 'data' => $roles]);\n    }\n\n    /**\n     * @param Request $request\n     * @Route(\"/user/get-default-key-bindings\", methods={\"GET\"})\n     */\n    public function getDefaultKeyBindingsAction(Request $request)\n    {\n        $data = User::getDefaultKeyBindings();\n\n        return $this->adminJson(['success' => true, 'data' => $data]);\n    }\n\n    /**\n     * @Route(\"/user/invitationlink\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return \\Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function invitationLinkAction(Request $request)\n    {\n        $success = false;\n        $message = '';\n\n        if ($username = $request->get('username')) {\n            $user = User::getByName($username);\n            if ($user instanceof User) {\n                if (!$user->isActive()) {\n                    $message .= 'User inactive  <br />';\n                }\n\n                if (!$user->getEmail()) {\n                    $message .= 'User has no email address <br />';\n                }\n            } else {\n                $message .= 'User unknown <br />';\n            }\n\n            if (empty($message)) {\n                //generate random password if user has no password\n                if (!$user->getPassword()) {\n                    $user->setPassword(md5(uniqid()));\n                    $user->save();\n                }\n\n                $token = Tool\\Authentication::generateToken($username, $user->getPassword());\n\n                $loginUrl = $this->generateUrl('pimcore_admin_login_check', [\n                    'username' => $username,\n                    'token' => $token,\n                    'reset' => 'true'\n                ], UrlGeneratorInterface::ABSOLUTE_URL);\n\n                try {\n                    $mail = Tool::getMail([$user->getEmail()], 'Pimcore login invitation for ' . Tool::getHostname());\n                    $mail->setIgnoreDebugMode(true);\n                    $mail->setBodyText(\"Login to pimcore and change your password using the following link. This temporary login link will expire in  24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                    $res = $mail->send();\n\n                    $success = true;\n                    $message = sprintf($this->trans('invitation_link_sent'), $user->getEmail());\n                } catch (\\Exception $e) {\n                    $message .= 'could not send email';\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'message' => $message\n        ]);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Enterprise License (PEL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PEL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\BruteforceProtectedControllerInterface;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\BruteforceProtectionHandler;\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\Configuration\\TemplatePhp;\nuse Pimcore\\Controller\\EventedControllerInterface;\nuse Pimcore\\Event\\Admin\\Login\\LostPasswordEvent;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Templating\\Model\\ViewModel;\nuse Pimcore\\Tool;\nuse Pimcore\\Tool\\Authentication;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Core\\Security;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n\nclass LoginController extends AdminController implements BruteforceProtectedControllerInterface, EventedControllerInterface\n{\n    public function onKernelController(FilterControllerEvent $event)\n    {\n        // use browser language for login page if possible\n        $locale = 'en';\n\n        $availableLocales = Tool\\Admin::getLanguages();\n        foreach ($event->getRequest()->getLanguages() as $userLocale) {\n            if (in_array($userLocale, $availableLocales)) {\n                $locale = $userLocale;\n                break;\n            }\n        }\n\n        $this->get('translator')->setLocale($locale);\n    }\n\n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n    }\n\n    /**\n     * @Route(\"/login\", name=\"pimcore_admin_login\")\n     * @Route(\"/login/\", name=\"pimcore_admin_login_fallback\")\n     *\n     * @TemplatePhp()\n     */\n    public function loginAction(Request $request)\n    {\n        if ($request->get('_route') === 'pimcore_admin_login_fallback') {\n            return $this->redirectToRoute('pimcore_admin_login', $request->query->all(), Response::HTTP_MOVED_PERMANENTLY);\n        }\n\n        $user = $this->getAdminUser();\n        if ($user instanceof UserInterface) {\n            return $this->redirectToRoute('pimcore_admin_index');\n        }\n\n        $view = $this->buildLoginPageViewModel();\n\n        if ($request->get('auth_failed')) {\n            $view->error = 'error_auth_failed';\n        }\n        if ($request->get('session_expired')) {\n            $view->error = 'error_session_expired';\n        }\n\n        return $view;\n    }\n\n    /**\n     * @Route(\"/logout\", name=\"pimcore_admin_logout\")\n     */\n    public function logoutAction()\n    {\n        // this route will never be matched, but will be handled by the logout handler\n    }\n\n    /**\n     * Dummy route used to check authentication\n     *\n     * @Route(\"/login/login\", name=\"pimcore_admin_login_check\")\n     *\n     * @see AdminAuthenticator for the security implementation\n     */\n    public function loginCheckAction()\n    {\n        // just in case the authenticator didn't redirect\n        return new RedirectResponse($this->generateUrl('pimcore_admin_login'));\n    }\n\n    /**\n     * @Route(\"/login/lostpassword\")\n     * @TemplatePhp()\n     */\n    public function lostpasswordAction(Request $request, BruteforceProtectionHandler $bruteforceProtectionHandler)\n    {\n        $view = $this->buildLoginPageViewModel();\n        $error = null;\n\n        if ($request->getMethod() === 'POST' && $username = $request->get('username')) {\n            $user = User::getByName($username);\n\n            if ($user instanceof User) {\n                if (!$user->isActive()) {\n                    $error = 'user inactive';\n                }\n\n                if (!$user->getEmail()) {\n                    $error = 'user has no email address';\n                }\n\n                if (!$user->getPassword()) {\n                    $error = 'user has no password';\n                }\n            } else {\n                $error = 'user unknown';\n            }\n\n            if (!$error) {\n                $token = Authentication::generateToken($username, $user->getPassword());\n\n                $loginUrl = $this->generateUrl('pimcore_admin_login_check', [\n                    'username' => $username,\n                    'token' => $token,\n                    'reset' => 'true'\n                ], UrlGeneratorInterface::ABSOLUTE_URL);\n\n                try {\n                    $event = new LostPasswordEvent($user, $loginUrl);\n                    $this->get('event_dispatcher')->dispatch(AdminEvents::LOGIN_LOSTPASSWORD, $event);\n\n                    // only send mail if it wasn't prevented in event\n                    if ($event->getSendMail()) {\n                        $mail = Tool::getMail([$user->getEmail()], 'Pimcore lost password service');\n                        $mail->setIgnoreDebugMode(true);\n                        $mail->setBodyText(\"Login to pimcore and change your password using the following link. This temporary login link will expire in 24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                        $mail->send();\n                    }\n\n                    // directly return event response\n                    if ($event->hasResponse()) {\n                        return $event->getResponse();\n                    }\n                } catch (\\Exception $e) {\n                    $error = 'could not send email';\n                }\n            }\n\n            if ($error) {\n                Logger::error('Lost password service: ' . $error);\n                $bruteforceProtectionHandler->addEntry($request->get('username'), $request);\n            }\n        }\n\n        return $view;\n    }\n\n    /**\n     * @Route(\"/login/deeplink\")\n     * @TemplatePhp()\n     */\n    public function deeplinkAction(Request $request)\n    {\n        // check for deeplink\n        $queryString = $_SERVER['QUERY_STRING'];\n\n        if (preg_match('/(document|asset|object)_([0-9]+)_([a-z]+)/', $queryString, $deeplink)) {\n            $deeplink = $deeplink[0];\n            $perspective = strip_tags($request->get('perspective'));\n\n            if (strpos($queryString, 'token')) {\n                $url = $this->generateUrl('pimcore_admin_login', [\n                    'deeplink' => $deeplink,\n                    'perspective' => $perspective\n                ]);\n\n                $url .= '&' . $queryString;\n\n                return $this->redirect($url);\n            } elseif ($queryString) {\n                return new ViewModel([\n                    'tab' => $deeplink,\n                    'perspective' => $perspective\n                ]);\n            }\n        }\n    }\n\n    /**\n     * @return ViewModel\n     */\n    protected function buildLoginPageViewModel()\n    {\n        $bundleManager = $this->get('pimcore.extension.bundle_manager');\n\n        $view = new ViewModel([\n            'config' => Config::getSystemConfig(),\n            'pluginCssPaths' => $bundleManager->getCssPaths()\n        ]);\n\n        return $view;\n    }\n\n    /**\n     * @Route(\"/login/2fa\", name=\"pimcore_admin_2fa\")\n     * @TemplatePhp()\n     */\n    public function twoFactorAuthenticationAction(Request $request, BruteforceProtectionHandler $bruteforceProtectionHandler)\n    {\n        $view = $this->buildLoginPageViewModel();\n\n        if ($request->hasSession()) {\n\n            // we have to call the check here manually, because BruteforceProtectionListener uses the 'username' from the request\n            $bruteforceProtectionHandler->checkProtection($this->getAdminUser()->getName(), $request);\n\n            $session = $request->getSession();\n            $authException = $session->get(Security::AUTHENTICATION_ERROR);\n            if ($authException instanceof AuthenticationException) {\n                $session->remove(Security::AUTHENTICATION_ERROR);\n\n                $view->error = $authException->getMessage();\n\n                $bruteforceProtectionHandler->addEntry($this->getAdminUser()->getName(), $request);\n            }\n        } else {\n            $view->error = 'No session available, it either timed out or cookies are not enabled.';\n        }\n\n        return $view;\n    }\n\n    /**\n     * @Route(\"/login/2fa-verify\", name=\"pimcore_admin_2fa-verify\")\n     *\n     * @param Request $request\n     */\n    public function twoFactorAuthenticationVerifyAction(Request $request)\n    {\n    }\n}\n", "<?php\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Enterprise License (PEL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PEL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Controller\\EventedControllerInterface;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Tool;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\nclass UserController extends AdminController implements EventedControllerInterface\n{\n    /**\n     * @Route(\"/user/tree-get-childs-by-id\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Listing();\n        $list->setCondition('parentId = ?', intval($request->get('node')));\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user->getId() && $user->getName() != 'system') {\n                    $users[] = $this->getTreeNodeConfig($user);\n                }\n            }\n        }\n\n        return $this->adminJson($users);\n    }\n\n    /**\n     * @param $user\n     *\n     * @return array\n     */\n    protected function getTreeNodeConfig($user)\n    {\n        $tmpUser = [\n            'id' => $user->getId(),\n            'text' => $user->getName(),\n            'elementType' => 'user',\n            'type' => $user->getType(),\n            'qtipCfg' => [\n                'title' => 'ID: ' . $user->getId()\n            ]\n        ];\n\n        // set type specific settings\n        if ($user instanceof User\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($user->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_user';\n            if (!$user->getActive()) {\n                $tmpUser['cls'] = ' pimcore_unpublished';\n            }\n            $tmpUser['allowChildren'] = false;\n            $tmpUser['admin'] = $user->isAdmin();\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        try {\n            $type = $request->get('type');\n\n            $className = User\\Service::getClassNameForType($type);\n            $user = $className::create([\n                'parentId' => intval($request->get('parentId')),\n                'name' => trim($request->get('name')),\n                'password' => '',\n                'active' => $request->get('active')\n            ]);\n\n            if ($request->get('rid')) {\n                $rid = $request->get('rid');\n                $rObject = $className::getById($rid);\n                if ($rObject) {\n                    if ($type == 'user' || $type == 'role') {\n                        $user->setParentId($rObject->getParentId());\n                        if ($rObject->getClasses()) {\n                            $user->setClasses(implode(',', $rObject->getClasses()));\n                        }\n                        if ($rObject->getDocTypes()) {\n                            $user->setDocTypes(implode(',', $rObject->getDocTypes()));\n                        }\n\n                        $keys = ['asset', 'document', 'object'];\n                        foreach ($keys as $key) {\n                            $getter = 'getWorkspaces' . ucfirst($key);\n                            $setter = 'setWorkspaces' . ucfirst($key);\n                            $workspaces = $rObject->$getter();\n                            $clonedWorkspaces = [];\n                            if (is_array($workspaces)) {\n                                foreach ($workspaces as $workspace) {\n                                    $vars = get_object_vars($workspace);\n                                    if ($key == 'object') {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\DataObject';\n                                    } else {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . ucfirst($key);\n                                    }\n                                    $newWorkspace = new $workspaceClass();\n                                    foreach ($vars as $varKey => $varValue) {\n                                        $newWorkspace->$varKey = $varValue;\n                                    }\n                                    $newWorkspace->setUserId($user->getId());\n                                    $clonedWorkspaces[] = $newWorkspace;\n                                }\n                            }\n\n                            $user->$setter($clonedWorkspaces);\n                        }\n\n                        $user->setPermissions($rObject->getPermissions());\n\n                        if ($type == 'user') {\n                            $user->setAdmin(false);\n                            if ($this->getAdminUser()->isAdmin()) {\n                                $user->setAdmin($rObject->getAdmin());\n                            }\n                            $user->setActive($rObject->getActive());\n                            $user->setRoles($rObject->getRoles());\n                            $user->setWelcomeScreen($rObject->getWelcomescreen());\n                            $user->setMemorizeTabs($rObject->getMemorizeTabs());\n                            $user->setCloseWarning($rObject->getCloseWarning());\n                        }\n\n                        $user->save();\n                    }\n                }\n            }\n\n            return $this->adminJson([\n                'success' => true,\n                'id' => $user->getId()\n            ]);\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @param $node\n     * @param $currentList\n     * @param $roleMode\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    protected function populateChildNodes($node, &$currentList, $roleMode)\n    {\n        $currentUser = \\Pimcore\\Tool\\Admin::getCurrentUser();\n\n        $list = $roleMode ? new User\\Role\\Listing() : new User\\Listing();\n        $list->setCondition('parentId = ?', $node->getId());\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $childList = $roleMode ? $list->getRoles() : $list->getUsers();\n        if (is_array($childList)) {\n            foreach ($childList as $user) {\n                if ($user->getId() == $currentUser->getId()) {\n                    throw new \\Exception('Cannot delete current user');\n                }\n                if ($user->getId() && $currentUser->getId() && $user->getName() != 'system') {\n                    $currentList[] = $user;\n                    $this->populateChildNodes($user, $currentList, $roleMode);\n                }\n            }\n        }\n\n        return $currentList;\n    }\n\n    /**\n     * @Route(\"/user/delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteAction(Request $request)\n    {\n        $user = User\\AbstractUser::getById(intval($request->get('id')));\n\n        // only admins are allowed to delete admins and folders\n        // because a folder might contain an admin user, so it is simply not allowed for users with the \"users\" permission\n        if (($user instanceof User\\Folder && !$this->getAdminUser()->isAdmin()) || ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin())) {\n            throw new \\Exception('You are not allowed to delete this user');\n        } else {\n            if ($user instanceof User\\Role\\Folder) {\n                $list = [$user];\n                $this->populateChildNodes($user, $list, $user instanceof User\\Role\\Folder);\n                $listCount = count($list);\n                for ($i = $listCount - 1; $i >= 0; $i--) {\n                    // iterate over the list from the so that nothing can get \"lost\"\n                    $user = $list[$i];\n                    $user->delete();\n                }\n            } else {\n                if ($user->getId()) {\n                    if ($user instanceof User\\Role) {\n                        // #1431 remove user-role relations\n                        $userRoleRelationListing = new User\\Listing();\n                        $userRoleRelationListing->setCondition('FIND_IN_SET(' . $user->getId() . ',roles)');\n                        $userRoleRelationListing = $userRoleRelationListing->load();\n                        if ($userRoleRelationListing) {\n                            /** @var $relatedUser User */\n                            foreach ($userRoleRelationListing as $relatedUser) {\n                                $userRoles = $relatedUser->getRoles();\n                                if (is_array($userRoles)) {\n                                    $key = array_search($user->getId(), $userRoles);\n                                    if (false !== $key) {\n                                        unset($userRoles[$key]);\n                                        $relatedUser->setRoles($userRoles);\n                                        $relatedUser->save();\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    $user->delete();\n                }\n            }\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function updateAction(Request $request)\n    {\n        $user = User\\AbstractUser::getById(intval($request->get('id')));\n\n        if ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw new \\Exception('Only admin users are allowed to modify admin users');\n        }\n\n        if ($request->get('data')) {\n            $values = $this->decodeJson($request->get('data'), true);\n\n            if (!empty($values['password'])) {\n                if (strlen($values['password']) < 10) {\n                    throw new \\Exception('Passwords have to be at least 10 characters long');\n                }\n                $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['password']);\n            }\n\n            // check if there are permissions transmitted, if so reset them all to false (they will be set later)\n            foreach ($values as $key => $value) {\n                if (strpos($key, 'permission_') === 0) {\n                    if (method_exists($user, 'setAllAclToFalse')) {\n                        $user->setAllAclToFalse();\n                    }\n                    break;\n                }\n            }\n\n            if (isset($values['2fa_required'])) {\n                $user->setTwoFactorAuthentication('required', (bool) $values['2fa_required']);\n            }\n\n            $user->setValues($values);\n\n            // only admins are allowed to create admin users\n            // if the logged in user isn't an admin, set admin always to false\n            if (!$this->getAdminUser()->isAdmin() && $user instanceof User) {\n                if ($user instanceof User) {\n                    $user->setAdmin(false);\n                }\n            }\n\n            // check for permissions\n            $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n            $availableUserPermissions = $availableUserPermissionsList->load();\n\n            foreach ($availableUserPermissions as $permission) {\n                if (isset($values['permission_' . $permission->getKey()])) {\n                    $user->setPermission($permission->getKey(), (bool) $values['permission_' . $permission->getKey()]);\n                }\n            }\n\n            // check for workspaces\n            if ($request->get('workspaces')) {\n                $processedPaths = ['object' => [], 'asset' => [], 'document' => []]; //array to find if there are multiple entries for a path\n                $workspaces = $this->decodeJson($request->get('workspaces'), true);\n                foreach ($workspaces as $type => $spaces) {\n                    $newWorkspaces = [];\n                    foreach ($spaces as $space) {\n                        if (in_array($space['path'], $processedPaths[$type])) {\n                            throw new \\Exception('Error saving workspaces as multiple entries found for path \"' . $space['path'] .'\" in '.$this->trans(\"$type\") . 's');\n                        }\n\n                        $element = Element\\Service::getElementByPath($type, $space['path']);\n                        if ($element) {\n                            $className = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . Element\\Service::getBaseClassNameForElement($type);\n                            $workspace = new $className();\n                            $workspace->setValues($space);\n\n                            $workspace->setCid($element->getId());\n                            $workspace->setCpath($element->getRealFullPath());\n                            $workspace->setUserId($user->getId());\n\n                            $newWorkspaces[] = $workspace;\n                            $processedPaths[$type][] = $space['path'];\n                        }\n                    }\n                    $user->{'setWorkspaces' . ucfirst($type)}($newWorkspaces);\n                }\n            }\n        }\n\n        if ($request->get('keyBindings')) {\n            $keyBindings = json_decode($request->get('keyBindings'), true);\n            $tmpArray = [];\n            foreach ($keyBindings as $action => $item) {\n                $tmpArray[] = json_decode($item, true);\n            }\n            $tmpArray = array_values(array_filter($tmpArray));\n            $tmpArray = json_encode($tmpArray);\n\n            $user->setKeyBindings($tmpArray);\n        }\n\n        $user->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getAction(Request $request)\n    {\n        if (intval($request->get('id')) < 1) {\n            return $this->adminJson(['success' => false]);\n        }\n\n        /**\n         * @var $user User\n         */\n        $user = User::getById(intval($request->get('id')));\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw new \\Exception('Only admin users are allowed to modify admin users');\n        }\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $user->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                }\n            }\n        }\n\n        // object <=> user dependencies\n        $userObjects = DataObject\\Service::getObjectsReferencingUser($user->getId());\n        $userObjectData = [];\n\n        foreach ($userObjects as $o) {\n            $hasHidden = false;\n            if ($o->isAllowed('list')) {\n                $userObjectData[] = [\n                    'path' => $o->getRealFullPath(),\n                    'id' => $o->getId(),\n                    'subtype' => $o->getClass()->getName()\n                ];\n            } else {\n                $hasHidden = true;\n            }\n        }\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n\n        // get available roles\n        $list = new User\\Role\\Listing();\n        $list->setCondition('`type` = ?', ['role']);\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = [$role->getId(), $role->getName()];\n            }\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['twoFactorAuthentication']['isActive'] = ($user->getTwoFactorAuthentication('enabled') || $user->getTwoFactorAuthentication('secret'));\n        unset($userData['password']);\n        unset($userData['twoFactorAuthentication']['secret']);\n\n        $availablePerspectives = \\Pimcore\\Config::getAvailablePerspectives(null);\n\n        $conf = \\Pimcore\\Config::getSystemConfig();\n\n        return $this->adminJson([\n            'success' => true,\n            'wsenabled' => $conf->webservice->enabled,\n            'user' => $userData,\n            'roles' => $roles,\n            'permissions' => $user->generatePermissionList(),\n            'availablePermissions' => $availableUserPermissions,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages(),\n            'objectDependencies' => [\n                'hasHidden' => $hasHidden,\n                'dependencies' => $userObjectData\n            ]\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-minimal\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getMinimalAction(Request $request)\n    {\n        $user = User::getById(intval($request->get('id')));\n        $user->setPassword(null);\n\n        $minimalUserData['id'] = $user->getId();\n        $minimalUserData['admin'] = $user->isAdmin();\n        $minimalUserData['active'] = $user->isActive();\n        $minimalUserData['permissionInfo']['assets'] = $user->isAllowed('assets');\n        $minimalUserData['permissionInfo']['documents'] = $user->isAllowed('documents');\n        $minimalUserData['permissionInfo']['objects'] = $user->isAllowed('objects');\n\n        return $this->adminJson($minimalUserData);\n    }\n\n    /**\n     * @Route(\"/user/upload-current-user-image\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function uploadCurrentUserImageAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                return $this->uploadImageAction($request);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/update-current-user\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                $values = $this->decodeJson($request->get('data'), true);\n\n                unset($values['name']);\n                unset($values['id']);\n                unset($values['admin']);\n                unset($values['permissions']);\n                unset($values['roles']);\n                unset($values['active']);\n\n                if (!empty($values['new_password'])) {\n                    $oldPasswordCheck = false;\n\n                    if (empty($values['old_password'])) {\n                        // if the user want to reset the password, the old password isn't required\n                        $oldPasswordCheck = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n                            if ($adminSession->get('password_reset')) {\n                                return true;\n                            }\n\n                            return false;\n                        });\n                    } else {\n                        // the password has to match\n                        $checkUser = Tool\\Authentication::authenticatePlaintext($user->getName(), $values['old_password']);\n                        if ($checkUser) {\n                            $oldPasswordCheck = true;\n                        }\n                    }\n\n                    if (strlen($values['new_password']) < 10) {\n                        throw new \\Exception('Passwords have to be at least 10 characters long');\n                    }\n\n                    if ($oldPasswordCheck && $values['new_password'] == $values['retype_password']) {\n                        $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['new_password']);\n                    } else {\n                        return $this->adminJson(['success' => false, 'message' => 'password_cannot_be_changed']);\n                    }\n                }\n\n                $user->setValues($values);\n\n                if ($request->get('keyBindings')) {\n                    $keyBindings = json_decode($request->get('keyBindings'), true);\n                    $tmpArray = [];\n                    foreach ($keyBindings as $action => $item) {\n                        $tmpArray[] = json_decode($item, true);\n                    }\n                    $tmpArray = array_values(array_filter($tmpArray));\n                    $tmpArray = json_encode($tmpArray);\n\n                    $user->setKeyBindings($tmpArray);\n                }\n\n                $user->save();\n\n                return $this->adminJson(['success' => true]);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/get-current-user\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n\n        $list = new User\\Permission\\Definition\\Listing();\n        $definitions = $list->load();\n\n        foreach ($definitions as $definition) {\n            $user->setPermission($definition->getKey(), $user->isAllowed($definition->getKey()));\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['keyBindings'] = $user->getKeyBindings();\n\n        unset($userData['password']);\n        $userData['twoFactorAuthentication'] = $user->getTwoFactorAuthentication();\n        unset($userData['twoFactorAuthentication']['secret']);\n        $userData['twoFactorAuthentication']['isActive'] = $user->getTwoFactorAuthentication('enabled') && $user->getTwoFactorAuthentication('secret');\n\n        $userData['isPasswordReset'] = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            return $adminSession->get('password_reset');\n        });\n\n        $response = new Response('pimcore.currentuser = ' . $this->encodeJson($userData));\n        $response->headers->set('Content-Type', 'text/javascript');\n\n        return $response;\n    }\n\n    /* ROLES */\n\n    /**\n     * @Route(\"/user/role-tree-get-childs-by-id\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleTreeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Role\\Listing();\n        $list->setCondition('parentId = ?', intval($request->get('node')));\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = $this->getRoleTreeNodeConfig($role);\n            }\n        }\n\n        return $this->adminJson($roles);\n    }\n\n    /**\n     * @param $role\n     *\n     * @return array\n     */\n    protected function getRoleTreeNodeConfig($role)\n    {\n        $tmpUser = [\n            'id' => $role->getId(),\n            'text' => $role->getName(),\n            'elementType' => 'role',\n            'qtipCfg' => [\n                'title' => 'ID: ' . $role->getId()\n            ]\n        ];\n\n        // set type specific settings\n        if ($role instanceof User\\Role\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($role->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_roles';\n            $tmpUser['allowChildren'] = false;\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/role-get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleGetAction(Request $request)\n    {\n        $role = User\\Role::getById(intval($request->get('id')));\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $role->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                }\n            }\n        }\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n\n        $availablePerspectives = \\Pimcore\\Config::getAvailablePerspectives(null);\n\n        return $this->adminJson([\n            'success' => true,\n            'role' => $role,\n            'permissions' => $role->generatePermissionList(),\n            'classes' => $role->getClasses(),\n            'docTypes' => $role->getDocTypes(),\n            'availablePermissions' => $availableUserPermissions,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages()\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/upload-image\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function uploadImageAction(Request $request)\n    {\n        if ($request->get('id')) {\n            if ($this->getAdminUser()->getId() != $request->get('id')) {\n                $this->checkPermission('users');\n            }\n            $id = $request->get('id');\n        } else {\n            $id = $this->getAdminUser()->getId();\n        }\n\n        $userObj = User::getById($id);\n\n        if ($userObj->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw new \\Exception('Only admin users are allowed to modify admin users');\n        }\n\n        $userObj->setImage($_FILES['Filedata']['tmp_name']);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/user/renew-2fa-qr-secret\", methods={\"GET\"})\n     *\n     * @param Request $request\n     */\n    public function renew2FaSecretAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        $proxyUser = $this->getAdminUser(true);\n\n        $twoFactorService = $this->get('scheb_two_factor.security.google_authenticator');\n        $newSecret = $twoFactorService->generateSecret();\n        $user->setTwoFactorAuthentication('enabled', true);\n        $user->setTwoFactorAuthentication('type', 'google');\n        $user->setTwoFactorAuthentication('secret', $newSecret);\n        $user->save();\n\n        Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            Tool\\Session::regenerateId();\n            $adminSession->set('2fa_required', true);\n        });\n\n        $twoFactorService = $this->get('scheb_two_factor.security.google_authenticator');\n        $url = $twoFactorService->getQRContent($proxyUser);\n\n        $code = new \\Endroid\\QrCode\\QrCode;\n        $code->setWriterByName('png');\n        $code->setText($url);\n        $code->setSize(200);\n\n        $qrCodeFile = PIMCORE_PRIVATE_VAR . '/qr-code-' . uniqid() . '.png';\n        $code->writeFile($qrCodeFile);\n\n        $response = new BinaryFileResponse($qrCodeFile);\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/user/disable-2fa\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     */\n    public function disable2FaSecretAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        $success = false;\n\n        if (!$user->getTwoFactorAuthentication('required')) {\n            $user->setTwoFactorAuthentication([]);\n            $user->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/reset-2fa-secret\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     */\n    public function reset2FaSecretAction(Request $request)\n    {\n        /**\n         * @var $user User\n         */\n        $user = User::getById(intval($request->get('id')));\n        $success = true;\n        $user->setTwoFactorAuthentication('enabled', false);\n        $user->setTwoFactorAuthentication('secret', '');\n        $user->save();\n\n        return $this->adminJson([\n            'success' => $success\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-image\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     */\n    public function getImageAction(Request $request)\n    {\n        if ($request->get('id')) {\n            if ($this->getAdminUser()->getId() != $request->get('id')) {\n                $this->checkPermission('users');\n            }\n            $id = $request->get('id');\n        } else {\n            $id = $this->getAdminUser()->getId();\n        }\n\n        /** @var User $userObj */\n        $userObj = User::getById($id);\n        $thumb = $userObj->getImage();\n\n        $response = new BinaryFileResponse($thumb);\n        $response->headers->set('Content-Type', 'image/png');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/user/get-token-login-link\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getTokenLoginLinkAction(Request $request)\n    {\n        /** @var User $user */\n        $user = User::getById($request->get('id'));\n\n        if (!$user) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_invalid_user_error'),\n            ], Response::HTTP_NOT_FOUND);\n        }\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_as_admin_non_admin_user_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        if (empty($user->getPassword())) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_no_password_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        $token = Tool\\Authentication::generateToken($user->getName(), $user->getPassword());\n        $link = $request->getScheme() . '://' . $request->getHttpHost() . '/admin/login/login?username=' . $user->getName() . '&token=' . $token;\n\n        return $this->adminJson([\n            'success' => true,\n            'link' => $link\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/search\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function searchAction(Request $request)\n    {\n        $q = '%' . $request->get('query') . '%';\n\n        $list = new User\\Listing();\n        $list->setCondition('name LIKE ? OR firstname LIKE ? OR lastname LIKE ? OR email LIKE ? OR id = ?', [$q, $q, $q, $q, intval($request->get('query'))]);\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user instanceof User && $user->getId() && $user->getName() != 'system') {\n                    $users[] = [\n                        'id' => $user->getId(),\n                        'name' => $user->getName(),\n                        'email' => $user->getEmail(),\n                        'firstname' => $user->getFirstname(),\n                        'lastname' => $user->getLastname(),\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'users' => $users\n        ]);\n    }\n\n    /**\n     * @param FilterControllerEvent $event\n     */\n    public function onKernelController(FilterControllerEvent $event)\n    {\n        $isMasterRequest = $event->isMasterRequest();\n        if (!$isMasterRequest) {\n            return;\n        }\n\n        // check permissions\n        $unrestrictedActions = [\n            'getCurrentUserAction', 'updateCurrentUserAction', 'getAvailablePermissionsAction', 'getMinimalAction',\n            'getImageAction', 'uploadCurrentUserImageAction', 'disable2FaSecretAction', 'renew2FaSecretAction',\n            'getUsersForSharingAction', 'getRolesForSharingAction'\n        ];\n\n        $this->checkActionPermission($event, 'users', $unrestrictedActions);\n    }\n\n    /**\n     * @param FilterResponseEvent $event\n     */\n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n        // nothing to do\n    }\n\n    /**\n     * @param Request $request\n     * @Route(\"/user/get-users-for-sharing\", methods={\"GET\"})\n     */\n    public function getUsersForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getUsersAction($request);\n    }\n\n    /**\n     * @param Request $request\n     * @Route(\"/user/get-roles-for-sharing\", methods={\"GET\"}))\n     */\n    public function getRolesForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getRolesAction($request);\n    }\n\n    /**\n     * @param Request $request\n     * @Route(\"/user/get-users\", methods={\"GET\"})\n     */\n    public function getUsersAction(Request $request)\n    {\n        $users = [];\n\n        // get available user\n        $list = new \\Pimcore\\Model\\User\\Listing();\n\n        $conditions = [ 'type = \"user\"' ];\n\n        if (!$request->get('include_current_user')) {\n            $conditions[] = 'id != ' . $this->getAdminUser()->getId();\n        }\n\n        $list->setCondition(implode(' AND ', $conditions));\n\n        $list->load();\n        $userList = $list->getUsers();\n\n        foreach ($userList as $user) {\n            if (!$request->get('permission') || $user->isAllowed($request->get('permission'))) {\n                $users[] = [\n                    'id' => $user->getId(),\n                    'label' => $user->getUsername()\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($users), 'data' => $users]);\n    }\n\n    /**\n     * @param Request $request\n     * @Route(\"/user/get-roles\", methods={\"GET\"})\n     */\n    public function getRolesAction(Request $request)\n    {\n        $roles = [];\n        $list = new \\Pimcore\\Model\\User\\Role\\Listing();\n\n        $list->setCondition('type = \"role\"');\n        $list->load();\n        $roleList = $list->getRoles();\n\n        /** @var $role User\\Role */\n        foreach ($roleList as $role) {\n            if (!$request->get('permission') || in_array($request->get('permission'), $role->getPermissions())) {\n                $roles[] = [\n                    'id' => $role->getId(),\n                    'label' => $role->getName()\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($roles), 'data' => $roles]);\n    }\n\n    /**\n     * @param Request $request\n     * @Route(\"/user/get-default-key-bindings\", methods={\"GET\"})\n     */\n    public function getDefaultKeyBindingsAction(Request $request)\n    {\n        $data = User::getDefaultKeyBindings();\n\n        return $this->adminJson(['success' => true, 'data' => $data]);\n    }\n\n    /**\n     * @Route(\"/user/invitationlink\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return \\Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function invitationLinkAction(Request $request)\n    {\n        $success = false;\n        $message = '';\n\n        if ($username = $request->get('username')) {\n            $user = User::getByName($username);\n            if ($user instanceof User) {\n                if (!$user->isActive()) {\n                    $message .= 'User inactive  <br />';\n                }\n\n                if (!$user->getEmail()) {\n                    $message .= 'User has no email address <br />';\n                }\n            } else {\n                $message .= 'User unknown <br />';\n            }\n\n            if (empty($message)) {\n                //generate random password if user has no password\n                if (!$user->getPassword()) {\n                    $user->setPassword(md5(uniqid()));\n                    $user->save();\n                }\n\n                $token = Tool\\Authentication::generateToken($username, $user->getPassword());\n\n                $loginUrl = $this->generateUrl('pimcore_admin_login_check', [\n                    'username' => $username,\n                    'token' => $token,\n                    'reset' => 'true'\n                ], UrlGeneratorInterface::ABSOLUTE_URL);\n\n                try {\n                    $mail = Tool::getMail([$user->getEmail()], 'Pimcore login invitation for ' . Tool::getHostname());\n                    $mail->setIgnoreDebugMode(true);\n                    $mail->setBodyText(\"Login to pimcore and change your password using the following link. This temporary login link will expire in  24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                    $res = $mail->send();\n\n                    $success = true;\n                    $message = sprintf($this->trans('invitation_link_sent'), $user->getEmail());\n                } catch (\\Exception $e) {\n                    $message .= 'could not send email';\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'message' => $message\n        ]);\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/LoginController.php", "bundles/AdminBundle/Controller/Admin/UserController.php"], "buggy_code_start_loc": [228, 802], "buggy_code_end_loc": [243, 804], "fixing_code_start_loc": [228, 801], "fixing_code_end_loc": [247, 801], "type": "CWE-307", "message": "Pimcore before 6.2.2 lacks brute force protection for the 2FA token.", "other": {"cve": {"id": "CVE-2019-18985", "sourceIdentifier": "cve@mitre.org", "published": "2019-11-15T05:15:12.987", "lastModified": "2019-11-19T15:29:37.077", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pimcore before 6.2.2 lacks brute force protection for the 2FA token."}, {"lang": "es", "value": "Pimcore versiones anteriores a la versi\u00f3n 6.2.2, carece de protecci\u00f3n de fuerza bruta para el token 2FA."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-307"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.2.2", "matchCriteriaId": "FC1E711F-EA7D-4A6E-B1CF-43EE13E12654"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/9f2d075243a8392c114d9a8028858b9faf041e2d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/pimcore/pimcore/compare/v6.2.1...v6.2.2", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/9f2d075243a8392c114d9a8028858b9faf041e2d"}}