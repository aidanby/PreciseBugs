{"buggy_code": ["# PrivateAddressCheck\n\n[![Build Status](https://travis-ci.org/jtdowney/private_address_check.svg?branch=master)](https://travis-ci.org/jtdowney/private_address_check)\n[![Code Climate](https://codeclimate.com/github/jtdowney/private_address_check/badges/gpa.svg)](https://codeclimate.com/github/jtdowney/private_address_check)\n\nChecks if a URL or hostname would cause a request to a private network (RFC 1918). This is useful in preventing attacks like [Server Side Request Forgery](https://cwe.mitre.org/data/definitions/918.html).\n\n## Requirements\n\n* Ruby >= 2.0\n\n## Installation\n\nAdd this line to your application's Gemfile:\n\n```ruby\ngem 'private_address_check'\n```\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install private_address_check\n\n## Usage\n\n```ruby\nrequire \"private_address_check\"\n\nPrivateAddressCheck.private_address?(\"8.8.8.8\") # => false\nPrivateAddressCheck.private_address?(\"10.10.10.2\") # => true\nPrivateAddressCheck.private_address?(\"127.0.0.1\") # => true\nPrivateAddressCheck.private_address?(\"172.16.2.10\") # => true\nPrivateAddressCheck.private_address?(\"192.168.1.10\") # => true\nPrivateAddressCheck.private_address?(\"fd00::2\") # => true\nPrivateAddressCheck.resolves_to_private_address?(\"github.com\") # => false\nPrivateAddressCheck.resolves_to_private_address?(\"localhost\") # => true\n\nrequire \"private_address_check/tcpsocket_ext\"\nrequire \"net/http\"\nrequire \"uri\"\n\nNet::HTTP.get_response(URI.parse(\"http://192.168.1.1\")) # => attempts connection like normal\n\nPrivateAddressCheck.only_public_connections do\n  Net::HTTP.get_response(URI.parse(\"http://192.168.1.1\"))\nend\n# => raises PrivateAddressCheck::PrivateConnectionAttemptedError\n```\n\n## Development\n\nAfter checking out the repo, run `bin/setup` to install dependencies. Then, run `rake test` to run the tests. You can also run `bin/console` for an interactive prompt that will allow you to experiment.\n\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release`, which will create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/jtdowney/private_address_check. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.\n\n\n## License\n\nThe gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\n\n", "module PrivateAddressCheck\n  PrivateConnectionAttemptedError = Class.new(StandardError)\n\n  module_function\n\n  def only_public_connections\n    Thread.current[:private_address_check] = true\n    yield\n  ensure\n    Thread.current[:private_address_check] = false\n  end\nend\n\nTCPSocket.class_eval do\n  alias initialize_without_private_address_check initialize\n\n  def initialize(remote_host, remote_port, local_host = nil, local_port = nil)\n    if Thread.current[:private_address_check] && PrivateAddressCheck.resolves_to_private_address?(remote_host)\n      raise PrivateAddressCheck::PrivateConnectionAttemptedError\n    end\n\n    initialize_without_private_address_check(remote_host, remote_port, local_host, local_port)\n  end\nend\n", "require 'test_helper'\nrequire 'private_address_check/tcpsocket_ext'\n\nclass TCPSocketExtTest < Minitest::Test\n  def test_private_address\n    assert_raises PrivateAddressCheck::PrivateConnectionAttemptedError do\n      PrivateAddressCheck.only_public_connections do\n        TCPSocket.new(\"localhost\", 80)\n      end\n    end\n  end\n\n  def test_public_address\n    connected = false\n    PrivateAddressCheck.only_public_connections do\n      TCPSocket.new(\"example.com\", 80)\n      connected = true\n    end\n\n    assert connected\n  end\n\n  def test_invalid_domain\n    assert_raises SocketError do\n      PrivateAddressCheck.only_public_connections do\n        TCPSocket.new(\"not_a_domain\", 80)\n      end\n    end\n  end\nend\n"], "fixing_code": ["# PrivateAddressCheck\n\n[![Build Status](https://travis-ci.org/jtdowney/private_address_check.svg?branch=master)](https://travis-ci.org/jtdowney/private_address_check)\n[![Code Climate](https://codeclimate.com/github/jtdowney/private_address_check/badges/gpa.svg)](https://codeclimate.com/github/jtdowney/private_address_check)\n\nChecks if a URL or hostname would cause a request to a private network (RFC 1918). This is useful in preventing attacks like [Server Side Request Forgery](https://cwe.mitre.org/data/definitions/918.html).\n\n## Requirements\n\n* Ruby >= 2.0\n\n## Installation\n\nAdd this line to your application's Gemfile:\n\n```ruby\ngem 'private_address_check'\n```\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install private_address_check\n\n## Usage\n\n```ruby\nrequire \"private_address_check\"\n\nPrivateAddressCheck.private_address?(\"8.8.8.8\") # => false\nPrivateAddressCheck.private_address?(\"10.10.10.2\") # => true\nPrivateAddressCheck.private_address?(\"127.0.0.1\") # => true\nPrivateAddressCheck.private_address?(\"172.16.2.10\") # => true\nPrivateAddressCheck.private_address?(\"192.168.1.10\") # => true\nPrivateAddressCheck.private_address?(\"fd00::2\") # => true\nPrivateAddressCheck.resolves_to_private_address?(\"github.com\") # => false\nPrivateAddressCheck.resolves_to_private_address?(\"localhost\") # => true\n\nrequire \"private_address_check/tcpsocket_ext\"\nrequire \"net/http\"\nrequire \"uri\"\n\nNet::HTTP.get_response(URI.parse(\"http://192.168.1.1\")) # => attempts connection like normal\n\nPrivateAddressCheck.only_public_connections do\n  Net::HTTP.get_response(URI.parse(\"http://192.168.1.1\"))\nend\n# => raises PrivateAddressCheck::PrivateConnectionAttemptedError\n```\n\n## Development\n\nAfter checking out the repo, run `bin/setup` to install dependencies. Then, run `rake test` to run the tests. You can also run `bin/console` for an interactive prompt that will allow you to experiment.\n\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release`, which will create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/jtdowney/private_address_check. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.\n\n## Security\n\nIf you've found a security issue in `private_address_check`, please reach out to @jtdowney via email to report.\n\n### Time of check to time of use\n\nA library like `private_address_check` is going to be easily susceptible to attacks like [time of check to time of use](https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use). DNS entries with a TTL of 0 can trigger this case where the initial resolution is a public address by the subsequent resolution is a private address. There are some possible defenses and workarounds:\n\n- Use the TCPSocket extension in this library which checks the address the socket uses. This is most useful if your system is built on native Ruby like Net::HTTP.\n- Use a feature like the `resolve` capability in curl and [curb](https://www.rubydoc.info/github/taf2/curb/Curl/Easy#resolve=-instance_method) to force the resolution to a pre-checked IP address.\n- Implement your own caching DNS resolver with something like dnsmasq or unbound. These tools let you set a minimum cache time that can override the TTL of 0.\n\n## License\n\nThe gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\n", "module PrivateAddressCheck\n  PrivateConnectionAttemptedError = Class.new(StandardError)\n\n  module_function\n\n  def only_public_connections\n    Thread.current[:private_address_check] = true\n    yield\n  ensure\n    Thread.current[:private_address_check] = false\n  end\nend\n\nTCPSocket.class_eval do\n  alias initialize_without_private_address_check initialize\n\n  def initialize(*args)\n    initialize_without_private_address_check(*args)\n    if Thread.current[:private_address_check] && PrivateAddressCheck.resolves_to_private_address?(remote_address.ip_address)\n      raise PrivateAddressCheck::PrivateConnectionAttemptedError\n    end\n  end\nend\n", "require 'test_helper'\nrequire 'private_address_check/tcpsocket_ext'\n\nclass TCPSocketExtTest < Minitest::Test\n  def test_private_address\n    server = TCPServer.new(63453)\n    thread = Thread.start { server.accept }\n    assert_raises PrivateAddressCheck::PrivateConnectionAttemptedError do\n      PrivateAddressCheck.only_public_connections do\n        TCPSocket.new(\"localhost\", 63453)\n      end\n    end\n  ensure\n    thread.exit if thread\n  end\n\n  def test_public_address\n    connected = false\n    PrivateAddressCheck.only_public_connections do\n      TCPSocket.new(\"example.com\", 80)\n      connected = true\n    end\n\n    assert connected\n  end\n\n  def test_invalid_domain\n    assert_raises SocketError do\n      PrivateAddressCheck.only_public_connections do\n        TCPSocket.new(\"not_a_domain\", 80)\n      end\n    end\n  end\nend\n"], "filenames": ["README.md", "lib/private_address_check/tcpsocket_ext.rb", "test/private_address_check/tcpsocket_ext_test.rb"], "buggy_code_start_loc": [63, 17, 5], "buggy_code_end_loc": [69, 23, 10], "fixing_code_start_loc": [64, 17, 6], "fixing_code_end_loc": [78, 21, 15], "type": "CWE-362", "message": "private_address_check ruby gem before 0.5.0 is vulnerable to a time-of-check time-of-use (TOCTOU) race condition due to the address the socket uses not being checked. DNS entries with a TTL of 0 can trigger this case where the initial resolution is a public address but the subsequent resolution is a private address.", "other": {"cve": {"id": "CVE-2018-3759", "sourceIdentifier": "support@hackerone.com", "published": "2018-06-13T15:29:00.267", "lastModified": "2019-10-09T23:40:35.590", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "private_address_check ruby gem before 0.5.0 is vulnerable to a time-of-check time-of-use (TOCTOU) race condition due to the address the socket uses not being checked. DNS entries with a TTL of 0 can trigger this case where the initial resolution is a public address but the subsequent resolution is a private address."}, {"lang": "es", "value": "La gema de Ruby private_address_check en versiones anteriores a la 0.5.0 es vulnerable a una condici\u00f3n de carrera TOCTOU (time-of-check time-of-use) debido a que no se comprueba la direcci\u00f3n empleada por el socket. Las entradas DNS con un TLL de 0 pueden desencadenar este caso donde la resoluci\u00f3n inicial es una direcci\u00f3n p\u00fablica, pero la siguiente es una direcci\u00f3n privada."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.7, "baseSeverity": "LOW"}, "exploitabilityScore": 2.2, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-362"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-362"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:private_address_check_project:private_address_check:*:*:*:*:*:ruby:*:*", "versionEndExcluding": "0.5.0", "matchCriteriaId": "6FCBC921-366D-465C-9171-A5F2101A6078"}]}]}], "references": [{"url": "https://github.com/jtdowney/private_address_check/commit/4068228187db87fea7577f7020099399772bb147", "source": "support@hackerone.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jtdowney/private_address_check/commit/4068228187db87fea7577f7020099399772bb147"}}