{"buggy_code": ["![Rdiffweb Banner](https://gitlab.com/ikus-soft/rdiffweb/-/raw/master/doc/_static/banner.png)\n\n<p align=\"center\">\n<strong>\n<a href=\"https://www.rdiffweb.org\">website</a>\n\u2022 <a href=\"https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/\">docs</a>\n\u2022 <a href=\"https://groups.google.com/d/forum/rdiffweb\">community</a>\n\u2022 <a href=\"https://rdiffweb-demo.ikus-soft.com/\">demo</a>\n</strong>\n</p>\n\n<p align=\"center\">\n<a href=\"LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/ikus060/rdiffweb\"></a>\n<a href=\"https://gitlab.com/ikus-soft/rdiffweb/pipelines\"><img alt=\"Build\" src=\"https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Quality Gate Minarca Client\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=alert_status\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Coverage\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=coverage\"></a>\n<a href=\"https://bestpractices.coreinfrastructure.org/projects/6583\"><img src=\"https://bestpractices.coreinfrastructure.org/projects/6583/badge\"></a>\n</p>\n\n<h1 align=\"center\">\nWelcome to Rdiffweb\n</h1>\n\nRdiffweb is a web application that allows you to view repositories generated\nby [rdiff-backup](https://rdiff-backup.net/). The purpose of this\napplication is to ease the management of backups and quickly restore your data\nwith a rich and powerful web interface.\n\nRdiffweb is written in Python and is released as open source project under the \nGNU GENERAL PUBLIC LICENSE (GPL). All source code and documentation are\nCopyright Rdiffweb contributors.\n\nRdiffweb is actively developed by [IKUS Soft](https://www.ikus-soft.com/)\nsince November 2014.\n\nThe Rdiffweb source code is hosted on [Gitlab](https://gitlab.com/ikus-soft/rdiffweb)\nand mirrored to [Github](https://github.com/ikus060/rdiffweb).\n\nThe Rdiffweb website is https://rdiffweb.org/.\n\n## Features\n\nWith its rich web interface Rdiffweb provide a notable list of features:\n\n * Browse your backup\n * Restore single file or multiple files as an archived\n * Users authentication via local database and LDAP\n * Users authorization\n * Email notification when backup is not successful\n * Configurable repository encoding\n * Configurable retention period\n * Backup statistics visualization using graphs\n * SSH Keys management\n * Disk quota visualization\n * File and folder deletion\n\n## Demo\n\nIf you quickly want to check how Rdiffweb is behaving, you may try our demo server hosted on:\n\n[https://rdiffweb-demo.ikus-soft.com/](https://rdiffweb-demo.ikus-soft.com/)\n\nUse the following credential to login:\n\n * Username: admin\n * Password: admin123\n\n## Installation & Docker usage\n\nFor detailed installation steps, read the [Installation documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/installation.html).\n\n## Current Build Status\n\n[![Build Status](https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg)](https://gitlab.com/ikus-soft/rdiffweb/pipelines)\n\n## Download\n\nYou should read the [Documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/index.html) to properly install Rdiffweb in your environment.\n\n**Docker**\n\n    docker pull ikus060/rdiffweb\n    \n**Debian**\n\n    curl -L https://www.ikus-soft.com/archive/rdiffweb/public.key | apt-key add - \n    echo \"deb https://nexus.ikus-soft.com/repository/apt-release-bullseye/ bullseye main\" > /etc/apt/sources.list.d/rdiffweb.list\n    apt update\n    apt install rdiffweb\n\n**Pypi**\n\n    pip install rdiffweb\n\n## Support\n\n### Mailing list\n\nRdiffweb users should use the [Rdiffweb mailing list](https://groups.google.com/forum/#!forum/rdiffweb).\n\n### Bug Reports\n\nBug reports should be reported on the Rdiffweb Gitlab at https://gitlab.com/ikus-soft/rdiffweb/-/issues\n\n### Professional support\n\nProfessional support for Rdiffweb is available by contacting [IKUS Soft](https://www.ikus-soft.com/en/support/#form).\n\n# Changelog\n\n## Next Release - 2.5.0\n\nThis next release focus on two-factor-authentication as a measure to increase security of user's account.\n\n* Store User's session information into database\n* Update ldap plugin to load additional attributes from LDAP server\n* Improve `/status` page error handling when `session_statistics` cannot be read\n* Add support for Ubuntu Jammy\n* Upgrade from Bootstrap v3 to v4 #204\n* Replace Fontello by Font-Awesome v4\n* Use CSS variables `var()` to customize themes\n* Remove usage of Jquery.validate\n* Replace custom timsort by jquery DataTables #205\n* Add Active Session managements #203\n  * Active session should be visible in user's profiles\n  * Active session may be revoked by user\n  * Active session should be visible in administration view\n  * Action session may be revoke by administrator\n  * Show number of active users within the last 24 hours in dashboard\n* Handle migration of older Rdiffweb database by adding the missing `repos.Encoding`, `repos.keepdays` and `users.role` columns #185\n* Replace deprecated references of `disutils.spawn.find_executable()` by `shutil.which()` #208\n* Add two-factor authentication with email verification #201\n* Generate a new session on login and 2FA #220\n* Enforce permission on /etc/rdiffweb configuration folder\n* Enforce validation on fullname, username and email\n* Limit incorrect attempts to change the user's password to prevent brute force attacks #225 [CVE-2022-3273](https://nvd.nist.gov/vuln/detail/CVE-2022-3273)\n* Enforce password policy new password cannot be set as new password [CVE-2022-3376](https://nvd.nist.gov/vuln/detail/CVE-2022-3376)\n* Enforce better rate limit on login, mfa, password change and API [CVE-2022-3439](https://nvd.nist.gov/vuln/detail/CVE-2022-3439) [CVE-2022-3456](https://nvd.nist.gov/vuln/detail/CVE-2022-3456)\n* Enforce 'Origin' validation [CVE-2022-3457](https://nvd.nist.gov/vuln/detail/CVE-2022-3457)\n\nBreaking changes:\n\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n* `session-dir` is deprecated and should be replace by `rate-limit-dir`. User's session are stored in database.\n* previous `.css` customization are not barkward compatible\n\n## 2.4.10 (2022-10-03)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate path traversal vulnerability [CVE-2022-3389](https://nvd.nist.gov/vuln/detail/CVE-2022-3389)\n\n## 2.4.9 (2022-09-28)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add `Cache-Control` and other security headers [CVE-2022-3292](https://nvd.nist.gov/vuln/detail/CVE-2022-3292)\n* Enforce password policy using `password-score` based on [zxcvbn](https://github.com/dropbox/zxcvbn) [CVE-2022-3326](https://nvd.nist.gov/vuln/detail/CVE-2022-3326)\n\n## 2.4.8 (2022-09-26)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Clean-up invalid path on error page\n* Limit username field length [CVE-2022-3290](https://nvd.nist.gov/vuln/detail/CVE-2022-3290)\n* Limit user's email field length [CVE-2022-3272](https://nvd.nist.gov/vuln/detail/CVE-2022-3272)\n* Limit user's root directory field length [CVE-2022-3295](https://nvd.nist.gov/vuln/detail/CVE-2022-3295)\n* Limit SSH Key title field length [CVE-2022-3298](https://nvd.nist.gov/vuln/detail/CVE-2022-3298)\n\n## 2.4.7 (2002-09-21)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Generate a new session on login and 2FA #220 [CVE-2022-3269](https://nvd.nist.gov/vuln/detail/CVE-2022-3269)\n* Mitigate CSRF on user's settings #221 [CVE-2022-3274](https://nvd.nist.gov/vuln/detail/CVE-2022-3274)\n\n## 2.4.6 (2022-09-20)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Support MarkupSafe<3 for Debian bookworm\n* Mitigate CSRF on user's notification settings #216 [CVE-2022-3233](https://nvd.nist.gov/vuln/detail/CVE-2022-3233)\n* Mitigate CSRF on repository settings #217 [CVE-2022-3267](https://nvd.nist.gov/vuln/detail/CVE-2022-3267)\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session on HTTP Error #218 [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174)\n\n## 2.4.5 (2002-09-16)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF on repository deletion and user deletion [CVE-2022-3232](https://nvd.nist.gov/vuln/detail/CVE-2022-3232) #214 #215\n\n## 2.4.4 (2002-09-15)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use `X-Real-IP` to identify client IP address to mitigate Brute-Force attack #213\n\n## 2.4.3 (2022-09-14)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF in profile's SSH Keys [CVE-2022-3221](https://nvd.nist.gov/vuln/detail/CVE-2022-3221) #212\n\n## 2.4.2 (2022-09-12)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session. [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174) #209\n* Avoid leakage of the stack trace in the default error page. [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3175) #210\n* Enforce minimum and maximum password length [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3179) #211\n\n## 2.4.1 (2022-09-08)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add Clickjacking Defense [CVE-2022-3167](https://nvd.nist.gov/vuln/detail/CVE-2022-3167)\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n\n## 2.4.0 (2022-06-21)\n\nThis new release brings a lot of improvement since the last version, multiple bug fixes\nto make the application stable. A couple of new features to improve the overall\nusability and a new security feature to block a brute force attack.\n\n* Add RateLimit to login page and API to mitigate robots attacks #167\n* Send email notification only if `email-sender` option is defined to avoid raising exception in logs #176\n* Support file restore cancellation without leaving `rdiffweb-restore` process in `<defunct>` state #174\n* Replace `python-ldap` by `ldap3` a pure python implementation to avoid dependencies on `sasl` and `ldap` binaries #186\n* Reffactor core module to allow better extendability and reusability #183\n* Add support for Debian Bookworm #180\n* Add support for Ubuntu Impish #175\n* Add rdiff-backup version to administration view\n* Run unit test during Debian build package\n* Refresh repository list automatically when required #188 #189\n* Fix error 500 displayed in status page #191\n* Improve repository browsing speed by minimizing the number of I/O call #192\n* Publish Docker image directly to DockerHub #144\n* Add REST API to manage sshkeys\n\nBreaking changes:\n\n* Ldap Password changes is not supported anymore.\n* Ldap Check Shadow expire config is not supported anymore. It should be replace by a custom filter.\n* Drop CentOS 7 and CentOS 8 support\n\n## 2.3.9 (2022-01-05)\n\nMaintenance release to fix minor issues\n\n* Improve date parsing for `backup.log` to avoid printing exception in logs #170\n* Return HTTP error 403 for invalid symlink to avoid returning a misleading HTTP 500 Server Error #168\n* Show a user friendly error message when trying to create a new user with an existing username #169\n* Handle repository without last-backup date during the notification process to ensure notifications are sent #171\n* Replace CherryPy `storage_type` by `storage_class` to avoid warning in logs\n* Update code to avoid deprecation warning where applicable\n* Add Flake8 validation to improve code quality\n* Remove Ubuntu Groovy support\n\n## 2.3.8 (2021-12-01)\n\n* Push all artefacts to nexus server including binaries and documentation\n* Fix `Chart.js` loading on Debian bullseye #164\n* Update installation steps documentation\n* Improve LDAP authentication to lookup entire directory\n* Fix usage of `--ldap-add-user-default-userroot` to avoid error related to wrong encoding\n* Improve authentication mechanics\n* Avoid raising an HTTP error 500 when login form receive invalid payload\n* Mitigate open redirect vulnerability in login form\n\n## 2.3.7 (2021-10-21)\n\n * To avoid backward compatibility issue, revert CSRF Token validation\n * Mitigate CSRF vulnerability using cookies with `SameSite=Lax`\n * Mitigate CSRF vulnerability by validating the `Origin` header when a form is submited\n * Improve usage of WTForm for all form validation\n * Update installation stepd for debian #162\n * Build Ubuntu packages and publish them to our APT repo\n\n## 2.3.6 (2021-10-20)\n\n * Broken build\n\n## 2.3.5 (2021-10-18)\n\n * Mitigate CSRF vulnerability to user, ssh and repo management with CSRF Token\n\n## 2.3.4 (2021-09-20)\n\n * Skip email notification if `email-host` configuration is not provided #157\n * Skip email notification when the new attribute value has the same value #159\n * USE LDAP `mail` attribute when creating new user from LDAP directory #156\n\n## 2.3.3 (2021-09-10)\n\n * Provide a new theme `blue` to match IKUS Soft colors #158\n\n## 2.3.2 (2021-09-07)\n\n * Automatically update user's repository list based on user's home directory\n\n## 2.3.1 (2021-07-14)\n\n * Update default `session-dir` location to `/var/lib/rdiffweb/session` to avoid using `/var/run` #148\n\n## 2.3.0 (2021-07-06)\n\n * Improve timezone handling to display date with local timezone using javascript #143\n * Improve charts by replacing d3js by chartkick #122\n * Replace the status view by something meaningful with chartkick #122\n * Provide Docker image with Rdiffweb `docker pull ikus060/rdiffweb` #55\n * Fix file and folder sorting #143\n\n## 2.2.0 (2021-05-11)\n \n * Debian package:\n   * Add rdiff-backup as dependencies to comply with Debian packaging rules\n   * Multiple other fixed to control files\n   * Use debhelper-compat (= 13)\n   * Use debhelper-compat (= 13)\n   * Run test during packaging\n   * Create default folder `/var/run/rdiffweb/sessions` to store user session\n * Use ConfigArgPare for configuration to support configuration file, environment variables and arguments to configure rdiffweb #114\n * Fix cache in localization module\n * Add `ldap-add-default-role` and `ldap-add-default-userroot` option to define default value for role and user root when creating user from LDAP #125\n * Support PostgreSQL database by replacing our storage layer by SQLAlchemy #126\n * Fix to retrieve user quota only for valid user_root #135\n * Add option `disable-ssh-keys` to disable SSH Key management\n * Use absolute URL everywhere\n * Add support for `X-Forwarded-For`, `X-Forwarded-proto` and other reverse proxy header when generating absolute URL\n * Drop Debian Stretch support\n * Implement a new background scheduler using apscheduler #82\n * Use background job to send email notification to avoid blocking web page loading #47\n * Use background job to delete repository to avoid blocking web page loading #48\n * Allow deleting a specific file or folder from the history using `rdiff-backup-delete` #128\n * Improve support for `session-dir` #131\n * Add option `admin-password` to define administrator password for better security\n * Improve performance of repository browsing \n * Add a new view to display logs of a specific repository\n * Allow downloading the log\n * Define a default limit to graph statistics to make it display faster\n * Fix `get-quota-cmd` option to properly return a value\n\n## 2.1.0 (2021-01-15)\n\n* Debian package: Remove dh-systemd from Debian build dependencies (https://bugs.debian.org/871312we)\n* Improve Quota management:\n  * `QuotaSetCmd`, `QuotaGetCmd` and `QuotaUsedCmd` options could be used to customize how to set the quota for your environment.\n  * Display user's quota in User View\n  * Display user's quota in Admin View\n  * Allow admin to update user quota from Admin View when `QuotaSetCmd` is defined.\n  * Allow admin to define user quota using human readable value (e.g.: GiB, TiB, etc.)\n  * Improve logging around quota management\n* Improve robustness when service is starting\n* Improve robustness when repository has wrong permission defined (e.g.: when some files not readable)\n* Add user id in Admin view\n* Replace `UserObject(1)` by the actual username in log file to improve debugging\n\n## 2.0.0 (2020-12-04)\n\n* Re-implement logic to update repositories views to remove duplicates and avoid nesting repo. #107\n* Handle elapsed time of days in the graph. Thanks [Nathaniel van Diepen](https://github.com/Eeems) contributions.\n* Rebrand all link to ikus-soft.com\n* Update documentation to install rdiffweb\n* Remove obsolete minify dependency\n* Drop support for python2\n* Provide null translation if translation catalogues are not found\n* Pass a LANG environment variable to rdiff-backup restore process to fix encoding issue #112\n* Remove obsolete python shebang\n* Remove execution bit (+x) on python modules\n* Provide `--help` and `--version` on `rdiffweb` executable\n* Improve cherrypy version detection\n* Do not update translation files (.mo) during build\n\n## 1.5.0 (2020-06-24)\n\nThis minor release introduce official support of rdiffweb on Debian Bullseye. It also includes some usability improvements.\n\n * Change formatting of Last Backup date for \"Updated 3 weeks ago\" to ease the readability\n * Add support for Debian Bullseye\n * Add support for Python 3.8 (#104)\n * Add warning in the users list view when a root directory is invalid (#30)\n * Add options to control search depthness (#1)\n * Print a warning in the log when the \"DefaultTheme\" value is not valid (#90)\n\n## 1.4.0 (2020-05-20)\n\nThanks to our sponsor, this release introduce a feature to have better control over the user's permission by defining 3 different levels of privilege: Admin, Maintainer and User. This addition allows you to have better control on what your users can or can't do.\n\n * Fix single repository discovery when a user's home is a rdiff-backup repository\n * [SPONSORED] Add a new setting at the user level to define the user's role. Admin,\n   Maintainer and User. Admin are allowed to do everything. Maintainer are\n   allow to browse and delete repo. Users are only allowed to browse. #94\n * Add \"Powered by\" in the web interface footer #91\n * Display a nice error message when trying to delete admin user #93\n * Introduce usage of wtforms and flash in admin users for better form validation. #96 #97\n * Update French translation\n\n## 1.3.2 (2020-04-23)\n\nThis minor releases fixed issues found while testing release 1.3.0.\n\n * Fix lookup of executable rdiff-backup and rdiffweb-restore to search in current virtualenv first\n * Fix repository view when multiple repo path are conflicting\n * Fix logging of rdiffweb-restore subprocess\n\n## 1.3.1 (2020-04-10)\n\nThis minor release enforces security of the password stored in rdiffweb database to make use of a better encryption using SSHA.\nOnly new passwords will make use of the SSHA scheme.\n\n * Enforce password encryption by using SSHA scheme #88\n\n## 1.3.0 (2020-04-07)\n\nThis release focuses on improving the restore of big archives. The download should be much faster to start. Major enhancement was made to offload the processing outside the web server. And all of this is still compatible with rdiff-backup v1.2.8 and the latest v2.0.0.\n\n * Restore file and folder in a subprocess to make the download start faster\n * Fix encoding of archive on Python3.6 (CentOS 7) by using PAX format\n * Add support to restore files and folders using rdiff-backup2\n * Remove obsolete dependencies `pysqlite2`\n * Fix issue creating duplicate entries of repository in the database\n\n## 1.2.2 (2020-03-05)\n\nThis release provides little improvement to the v1.2.x including official support of rdiff-backup v2.0.0.\n\n * Enhance the repository to invite users to refresh the repository when the view is empty.\n * Support rdiff-backup v2.0.0\n * Deprecate support for cherrypy 4, 5, 6 and 7\n * Improve loading of repository data (cache status and entries)\n * Restore compatibility with SQLite 3.7 (CentOS7)\n\nKnown issues:\n\n * Filename encoding in tar.gz and zip file might not be accurate if you are running Python 3.6 (CentOS7)\n\n\n## 1.2.1 (2020-02-08)\n\nLittle bug fix following the previous release\n\n * Fix 404 error when trying to access other users repo as admin\n * Fix logging format for cherrypy logs to matches rdiffweb format\n * Add log rotation by default\n\n## 1.2.0 (2020-01-30)\n\nThis release focus on improving the database layers for better extendability to add more type of data and to support more databases backend like postgresql in the near future.\n\n * Add explicit testing for Debian Stretch & Buster\n * Change the persistence layers\n   * Minimize number of SQL queries\n   * Add object lazy loading\n   * Add object data caching\n * Fix bugs with SQLite <= 3.16 (Debian Stretch)\n\n## 1.1.0 (2019-10-31)\n\nThis release focus on improving the admin area and building the fundation for repository access control list (ACL).\n\n * Update documentation from PDSL web site\n * Improve the navigation bar layout\n * Update the login page headline\n * Update jinja2 version to allow 2.10.x\n * Show server log in admin area\n * Reduce code smell\n * Add System information in admin area\n * Validate credential using local database before LDAP\n * Reffactoring templates macros\n * Enhance user's view search bar\n * Change repository URL to username/repopath\n * Add System information in admin area\n * Improve testcases\n * Clean-up obsolete code\n * Fix issue with captital case encoding name\n * Fix compilation of less files\n * Fix google font import\n\n## 1.0.3 (2019-10-04)\n * Removing the auto update repos\n\n## 1.0.2 (2019-10-01)\n * Create \"admin\" user if missing\n * Update french translation\n\n## 1.0.1 (2019-09-22)\n * Update installation documentation \n * Fix removal of SSH Key\n * Return meaningful error to the user trying to add an existing SSH key\n\n## 1.0.0 (2019-09-11)\n * Make repository removal more robust\n * Improve performance of librdiff\n * Add new RESTful api\n * Return the right HTTP 401 or 402 error code for authentication\n * Fix bug introduce by upgrade to Jinja2 + python3\n * Store ssh keys in database and disk\n * Add support for theme (default, orange)\n * Remove deprecated profiling code\n * Add disk usage support / quota\n * Add support of cherrypy v18\n * Drop support of cherrypy v3.2.2\n * Add wsgi entry point\n * Replace the plugins architecture to ease implementation\n * Numerous bug fixes\n\n## 0.10.9 (2019-05-22)\n * Better error handling when error.log file are not valid gzip file\n\n", "# Configuration\n\nThere are several entry points available for administrator to manage the configuration of Rdiffweb. This section aims to outline those configurations and explain each option available and what it does.\n\nSince version 2.2, rdiffweb configuration is more flexible. You may configure every option using the configuration file, command line argument or environment variable.\n\nTake note that configuration options are distinct from the runtime setting, available from the web interface. The configuration options here usually meant to be static and set before starting the server. You may get the list of configuration options by calling `rdiffweb --help`.\n\nNote: If an option is specified in more than one place, the command line arguments override the environment variable, environment variables override config files, and config files override default value.\n\n## Configuration file\n\nTo use configuration files, you may call rdiffweb with `-f` or `--config` to define the configuration file location. When not defined, Rdiffweb loads all configuration files from these locations by default:\n\n* /etc/rdiffweb/rdw.conf\n* /etc/rdiffweb/rdw.conf.d/*.conf\n\nConfiguration file syntax must define a key and a value. The key is case-sensitive, and you may use underscore (_) or dash (-) seemlessly. All lines beginning with '#' are comments and are intended for you to read. All other lines are configuration for rdiffweb.\n\nE.g.:\n\n    # This is a comment\n    server_port=8081\n    log_level=DEBUG\n\n## Environment variables\n\nIn addition to configuration files, you may pass environment variables. The options name must be uppercase and prefixed with `RDIFFWEB_`. As an example, if you want to change the port used to listen for HTTP request for 8081, you must define `server-port` option as follow.\n\n    RDIFFWEB_SERVER_PORT=8081\n\n## Command line arguments\n\nWhen launching `rdiffweb` executable, you may pass as many arguments as you want on the command line. The options must be prefixed with double dash (`--`) and you must single dash (-) to separate words.\n\nE.g. `--server-port 8081` or `--server-port=8081` are valid\n\n\n## Configure listening port and interface\n\nFor security reasons, Rdiffweb listen on port `8080` for HTTP request on loopback interface (127.0.0.1) by default. Consider configuring a reverse proxy like Nginx or Apache2 if you want to make Rdiffweb listen on port 80 for HTTP and port 443 for HTTPS request.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| server-host | Define the IP address to listen to. Use `0.0.0.0` to listen on all interfaces. Use `127.0.0.1` to listen on loopback interface. | 0.0.0.0 |\n| server-port | Define the port to listen for HTTP request. Default to `8080` | 9090 |\n\n## Configure administrator username & password\n\nUsing configuration file, you may setup a special administrator which cannot be\ndeleted or renamed from the web interface. You may also configure a specific\npassword for this user that cannot be updated from the web interface either.\n\nIn addition, you may also create other administrator users to manage Rdiffweb.\n\n| Parameter | Description | Example |\n| --- | --- | --- | \n| admin-user | Define the name of the default admin user to be created | admin |\n| admin-password | administrator encrypted password as SSHA. Read online documentation to know more about how to encrypt your password into SSHA or use http://projects.marsching.org/weave4j/util/genpassword.php When defined, administrator password cannot be updated using the web interface. When undefined, default administrator password is `admin123` and it can be updated using the web interface. | modification |\n\n\n## Configure logging\n\nRdiffweb can be configured to send logs to specific location. By default, logs are sent to the console (stdout or stderr). If you have installed Rdiffweb on a server, you should consider enabling the logging to help you keep track of the activities or to help you debug problem.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| log-level | Define the log level. ERROR, WARN, INFO, DEBUG | DEBUG |\n| log-file | Define the location of the log file. | /var/log/rdiffweb/server.log |\n| log-access-file | Define the location of the access log file. | /var/log/rdiffweb/access.log |\n\n### Enable Debugging\n\nA specific option is also available if you want to enable the debugging log. We do not recommend to enable this option in production as it may leak information to the user whenever an exception is raised.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| debug | enable rdiffweb debug mode - change the log level to DEBUG, print exception stack trace to the web interface and show SQL query in logs. | |\n| environment | Define the type of environment: `development` or `production`. This is used to limit the information shown to the user when an error occurs. Default: production | development |\n\n## Configure database\n\nRdiffweb use SQL database to store user preferences. The embedded SQLite database is well suited for small deployment (1-100 users). If you intended to have a large deployment, you must consider using a PostgreSQL database instead.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| database-uri | Location of the database used for persistence. SQLite and PostgreSQL database are supported officially. To use a SQLite database, you may define the location using a file path or a URI. e.g.: `/srv/rdiffweb/file.db` or `sqlite:///srv/rdiffweb/file.db`. To use PostgreSQL server, you must provide a URI similar to `postgresql://user:pass@10.255.1.34/dbname` and you must install required dependencies. By default, Rdiffweb uses a SQLite embedded database located at `/etc/rdiffweb/rdw.db`. | postgresql://user:pass@10.255.1.34/dbname | \n\n\n### SQLite\n\nTo use embedded SQLite database, pass the option `database-uri` with a URI similar to `sqlite:///etc/rdiffweb/rdw.db` or `/etc/rdiffweb/rdw.db`.\n\n### PostgreSQL\n\nTo use an external PostgreSQL database, pass the option `database-uri` with a URI similar to `postgresql://user:pass@10.255.1.34/dbname`.\n\nYou may need to install additional dependencies to connect to PostgreSQL. Step to install dependencies might differ according to the way you installed Rdiffweb.\n\n**Using Debian repository:**\n\n    apt install python3-psycopg2\n\n**Using Pypi repository:**\n\n    pip install psycopg2-binary\n\n## Configure LDAP Authentication\n\nRdiffweb may integrates with LDAP server to support user authentication.\n\nThis integration works with most LDAP-compliant servers, including:\n\n* Microsoft Active Directory\n* Apple Open Directory\n* Open LDAP\n* 389 Server\n\n### LDAP options\n\n| Option | Description | Example |\n| --- | --- | --- |\n| ldap-add-missing-user | `True` to create users from LDAP when the credential is valid. | True |\n| ldap-add-user-default-role | Role to be used when creating a new user from LDAP. Default: user | maintainer |\n| ldap-add-user-default-userroot | Userroot to be used when creating a new user from LDAP. Default: empty | /backups/{cn[0]} |\n| ldap-base-dn | The DN of the branch of the directory where all searches should start from. | dc=my,dc=domain | \n| ldap-bind-dn | An optional DN used to bind to the server when searching for entries. If not provided, will use an anonymous bind. | cn=manager,dc=my,dc=domain |\n| ldap-bind-password | A bind password to use in conjunction with `LdapBindDn`. Note that the bind password is probably sensitive data,and should be properly protected. You should only use the LdapBindDn and LdapBindPassword if you absolutely need them to search the directory. | mypassword |\n| ldap-encoding | encoding used by your LDAP server. Default to utf-8 | cp1252 |\n| ldap-filter | A valid LDAP search filter. If not provided, defaults to `(objectClass=*)`, which will search for all objects in the tree. | (objectClass=*) | \n| ldap-group-attribute-is-dn | True if the content of the attribute ldap-group-attribute is a DN. | true |\n| ldap-group-attribute | name of the attribute defining the groups of which the user is a member. Should be used with ldap-required-group and ldap-group-attribute-is-dn. | member |\n| ldap-network-timeout | Optional timeout value. Default to 10 sec. | 10 |\n| ldap-protocol-version | Version of LDAP in use either 2 or 3. Default to 3. | 3 |\n| ldap-required-group | name of the group of which the user must be a member to access rdiffweb. Should be used with ldap-group-attribute and ldap-group-attribute-is-dn. | rdiffweb |\n| ldap-scope | The scope of the search. Can be either `base`, `onelevel` or `subtree`. Default to `subtree`. | onelevel |\n| ldap-timeout | Optional timeout value. Default to 300 sec. | 300 |\n| ldap-tls | `true` to enable TLS. Default to `false` | false |\n| ldap-uri | URIs containing only the schema, the host, and the port. | ldap://localhost:389 | \n| ldap-username-attribute | The attribute to search username. If no attributes are provided, the default is to use `uid`. It's a good idea to choose an attribute that will be unique across all entries in the subtree you will be using. | cn | \n| ldap-version | version of LDAP in use either 2 or 3. Default to 3.| 3 |\n\n### Automatically create user in Rdiffweb\n\nIf you have a large number of users in your LDAP, you may want to configure Rdiffweb to automatically create user in database that has valid LDAP credentials. The user will get created on first valid login.\n\nYou may optionally pass other options like `ldap-add-user-default-role` and `ldap-add-user-default-userroot` to automatically define the default user role and default user root for any new user created from LDAP.\n\nHere a working configuration:\n\n    ldap-add-missing-user=true\n    ldap-add-user-default-role=user\n    ldap-add-user-default-userroot=/backups/{cn[0]}\n\n### Restrict access to a specific LDAP group\n\nIf you are making use of LDAP credentials validation, you will usually want to limit the access to member of a specific LDAP group. Rdiffweb support such scenario with the use of `ldap-required-group`, `ldap-group-attribute` and `ldap-group-attribute-is-dn`.\n\nHere is an example of how you may limit Rdiffweb access to members of *Admin_Backup* group. This configuration is known to work with LDAP PosixAccount and PosixGroup.\n\n    ldap-required-group=cn=Admin_Backup,ou=Groups,dc=nodomain\n    ldap-group-attribute=memberUid\n    ldap-group-attribute-is-dn=false\n\n## Configure email notifications\n\nSince Rdiffweb v0.9, you may configure Rdiffweb to send an email notification to the users when their backups did not complete successfully for a period of time.\nWhen enabled, Rdiffweb will also send email notification for security reason when user's password is changed.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| email-encryption | Type of encryption to be used when establishing communication with SMTP server. Available values: `none`, `ssl` and `starttls` | starttls |\n| email-host | SMTP server used to send email in the form `host`:`port`. If the port is not provided, default to standard port 25 or 465 is used. | smtp.gmail.com:587 | \n| email-sender | email addres used for the `From:` field when sending email. | Rdiffweb <example@gmail.com> |\n| email-notification-time | time when the email notification should be sent for inactive backups. | 22:00 |\n| email-username | username used for authentication with the SMTP server. | example@gmail.com |\n| email-password | password used for authentication with the SMTP server. | CHANGEME |\n| email-send-changed-notification | True to send notification when sensitive information get change in user profile. Default: false | True |\n\nTo configure the notification, you need a valid SMTP server. In this example, you are making use of a Gmail account to send emails.\n\n    email-host=smtp.gmail.com:587\n    email-encryption=starttls\n    email-sender=example@gmail.com\n    email-username=example@gmail.com\n    email-password=CHANGEME\n    email-send-changed-notification=true\n\nNote: notifications are not sent if the user doesn't have an email configured in his profile.\n\n## Configure user quota\n\nSince v2.1, it's now possible to customize how user quota is controller for\nyour system without a custom plugin. By defining `quota-set-cmd`, `quota-get-cmd`\nand `QuotaUsedCmd` configuration options, you have all the flexibility to\nmanage the quota the way you want by providing custom command line to be executed to respectively set the quota, get the quota and get quota usage.\n\n| Option | Description | Example | \n| --- | --- | --- |\n| quota-set-cmd | Command line to set the user's quota. | Yes. If you want to allow administrators to set quota from the web interface. |\n| quota-get-cmd | Command line to get the user's quota. Should print the size in bytes to console. | No. Default behaviour gets quota using operating system statvfs that should be good if you are using setquota, getquota, etc. For ZFS and other more exotic file system, you may need to define this command. |\n| quota-used-cmd | Command line to get the quota usage. Should print the size in bytes to console. | No. |\n\nWhen Rdiffweb calls the scripts, special environment variables are available. You should make use of this variables in a custom script to get and set the disk quota.\n\n* `RDIFFWEB_USERID`: rdiffweb user id. e.g.: `34`\n* `RDIFFWEB_USERNAME`: rdiffweb username. e.g.: `patrik`\n* `RDIFFWEB_USERROOT`: user's root directory. e.g.: `/backups/patrik/`\n* `RDIFFWEB_ROLE`: user's role e.g.: `10` 1:Admin, 5:Maintainer, 10:User\n* `RDIFFWEB_QUOTA`: only available for `quota-set-cmd`. Define the new quota value in bytes. e.g.: 549755813888  (0.5 TiB)\n\nContinue reading about how to configure quotas for EXT4. We generally\nrecommend making use of project quotas with Rdiffweb to simplify the management of permission and avoid running Rdiffweb with root privileges.  The next section\npresents how to configure project quota. Keep in mind it's also possible to\nconfigure quota using either user's quota or project quota.\n\n### Configure user quota for EXT4\n\nThis section is not a full documentation about how to configure ext4 project quota, \nbut provide enough guidance to help you.\n\n1. Enabled project quota feature  \n   You must enable project quota feature for the EXT4 partition where your backup resides using:  \n   `tune2fs -O project -Q prjquota /dev/sdaX`  \n   The file system must be unmounted to change this setting and may require you\n   to boot your system with a live-cd if your backups reside on root file system (`/`).  \n   Also, add `prjquota` options to your mount point configuration `/etc/fstab`.\n   Something like `/dev/sdaX   /   ext4    errors=remount-ro,prjquota     0    1`\n2. Turn on the project quota after reboot  \n   `quotaon -Pv -F vfsv1 /`\n3. Check if the quota is working  \n   `repquota -Ps /`\n4. Add `+P` attribute on directories to enabled project quotas  \n   `chattr -R +P /backups/admin`\n5. Then set the project id on directories  \n   `chattr -R -p 1 /backups/admin` where `1` is the rdiffweb user's id\n\nNext, you may configure Rdiffweb quota command line for your need. For EXT4\nproject quotas, you only need to define `quota-set-cmd` with something similar\nto the following. `quota-get-cmd` and `quota-used-cmd` should not be required\nwith EXT4 quota management.\n\n    quota-set-cmd=setquota -P $RDIFFWEB_USERID $((RDIFFWEB_QUOTA / 1024)) $((RDIFFWEB_QUOTA / 1024)) 0 0 /\n\nThis effectively, makes use of Rdiffweb user's id as project id.\n\n### Configure user quota for ZFS\n\nThis section is not a full documentation about how to configure ZFS project quotas,\nbut provide enough guidance to help you. This documentation uses `tank/backups`\nas the dataset to store rdiffweb backups.\n\n1. Quota feature is a relatively new feature for ZFS On Linux. Check your\n   operating system to verify if your ZFS version support it. You may need\n   to upgrade your pool and dataset using:  \n\n   `zpool upgrade tank`\n   `zfs upgrade tank/backups`\n\n2. Add `+P` attribute on directories to enabled project quotas  \n   `chattr -R +P /backups/admin`\n   `chattr -R -p 1 /backups/admin`\n   OR\n   `zfs project -p 1 -rs /backups/admin`\n   Where `1` is the rdiffweb user's id\n   \nTake note, it's better to enable project quota attributes when the repositories are empty.\n\n## Configure Rate-Limit\n\nRdiffweb could be configured to rate-limit access to anonymous to avoid bruteforce\nattacks and authenticated users to avoid Denial Of Service attack.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| rate-limit | maximum number of requests per hour that can be made on sensitive endpoints. When this limit is reached, an HTTP 429 message is returned to the user or the user is logged out. This security measure is used to limit brute force attacks on the login page and the RESTful API. | 20 |\n| rate-limit-dir | location where to store rate-limit information. When undefined, data is kept in memory. | /var/lib/rdiffweb/session |\n\n## Custom user's password length limits\n\nBy default, Rdiffweb supports passwords with the following lengths:\n\n* Minimum: 8 characters\n* Maximum: 128 characters\n\nChanging the minimum or maximum length does not affect existing users' passwords. Existing users are not prompted to reset their passwords to meet the new limits. The new limit only applies when an existing user changes their password.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| password-min-length | Minimum length of the user's password | 8 |\n| password-max-length | Maximum length of the user's password | 128 |\n| password-score      | Minimum zxcvbn's score for password. Value from 0 to 4. Default value 1. | 4 |\n\nYou may want to read more about [zxcvbn](https://github.com/dropbox/zxcvbn) score value.\n\n## Configure Rdiffweb appearance\n\nA number of options are available to customize the appearance of Rdiffweb to your\nneed. Most likely, you will want to make it closer to your business brand.\n\n| Option | Description | Example | \n| --- | --- | --- |\n| header-name | Define the application name displayed in the title bar and header menu. | My Backup |\n| default-theme | Define the theme. Either: `default`, `blue` or `orange`. Define the css file to be loaded in the web interface. You may manually edit a CSS file to customize it. The location is similar to `/usr/lib/python3/dist-packages/rdiffweb/static/`. | orange |\n| welcome-msg | Replace the headline displayed in the login page. It may contains HTML. | Custom message displayed on login page.|\n| favicon | Define the FavIcon to be displayed in the browser title | /etc/rdiffweb/my-fav.ico |\n\n## Configure SSH Key management\n\nRdiffweb allows users to manage their SSH Keys by adding and removing them using the web interface. This feature may be disabled with `disable-ssh-keys`.\n\nWhen this feature is enabled, adding or removing an SSH Key from the web interface.\nUpdates, the `${user_root}/.ssh/authorized_keys` file if the file already exists.\n\n## Configure repositories clean-up job\n\nUsing the web interface, users may configure a retention period on individual repository to keep only a fixed number of days in backup. This is useful to control the growth of a repository disk usage.\n\nTo support this feature, Rdiffweb schedule a job to clean-up the repositories in backup. This job is ran once a day. You may change the default time when this schedule job is running by defining another value for option `remove-older-time`.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| remove-older-time | Time when to execute the remove older task | 22:00 | \n\n## Configure temporary folder location\n\nTo restore file or folder, Rdiffweb needs a temporary directory to create the file to be downloaded. By default, Rdiffweb will use your default temporary folder defined using environment variable `TMPDIR`, `TEMP` or `TMP`. If none of these environment variables are defined, Rdiffweb fallback to use `/tmp`.\n\nIf you want to enforce a different location for the temporary directory, you may define the option `tempdir` with a different value. Take note, this directory must be created with the right ownership and permissions to allow Rdiffweb to use it. Also make sure enough disk space is available. Usually, a 32GiB is enough.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| tempdir | alternate temporary folder to be used when restoring files. Might be useful if the default location has limited disk space| /tmp/rdiffweb/ |\n\n\n## Configure repository lookup depthness.\n\nWhen defining the UserRoot value for a user, Rdiffweb will scan the content of this directory recursively to lookups for rdiff-backup repositories. For performance reason, Rdiffweb limits the recursiveness to 3 subdirectories. This default value should suit most use cases. If you have a particular use case, it's possible to allow Rdiffweb to scan for more subdirectories by defining a greater value for the option `max-depth`. Make sure to pick a reasonable value for your use case as it may impact the performance.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| --max-depth | Define the maximum folder depthness to search into the user's root directory to find repositories. This is commonly used if your repositories are organised with multiple sub-folders. Default: 3 | No | 10 |\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on Dec 26, 2015\n\n@author: Patrik Dufresne\n\"\"\"\nimport os\n\nfrom parameterized import parameterized, parameterized_class\n\nimport rdiffweb.test\nfrom rdiffweb.core.model import DbSession, SessionObject, UserObject\nfrom rdiffweb.tools.auth_form import LOGIN_TIME, SESSION_KEY\n\n\nclass LoginPageTest(rdiffweb.test.WebCase):\n    def test_getpage(self):\n        # When making a query to a page while unauthenticated\n        self.getPage('/')\n        # Then user is redirected to login page\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/login/')\n        # Then a session object is created without a username\n        self.assertEqual(1, SessionObject.query.filter(SessionObject.id == self.session_id).count())\n        SessionObject.query.filter(SessionObject.id == self.session_id).first()\n        session = DbSession(id=self.session_id)\n        session.load()\n        self.assertIsNone(session.get(SESSION_KEY))\n\n    def test_login_success(self):\n        # Given an anonymous user\n        self.getPage('/')\n        prev_session_id = self.session_id\n        # Then user is redirected to /login page\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/login/')\n        # When authenticating with valid credentials.\n        self.getPage('/login/', method='POST', body={'login': self.USERNAME, 'password': self.PASSWORD})\n        # Then a new session_id is generated\n        self.assertNotEqual(prev_session_id, self.session_id)\n        # Then user is redirected\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/')\n        # Then a session object is created with a username\n        self.assertEqual(1, SessionObject.query.filter(SessionObject.id == self.session_id).count())\n        SessionObject.query.filter(SessionObject.id == self.session_id).first()\n        session = DbSession(id=self.session_id)\n        session.load()\n        self.assertEqual('admin', session.get(SESSION_KEY))\n        self.assertIsNotNone(session.get(LOGIN_TIME))\n\n    def test_cookie_http_only(self):\n        # Given a request made to rdiffweb\n        # When receiving the response\n        self.getPage('/')\n        # Then the header contains Set-Cookie with HttpOnly\n        cookie = self.assertHeader('Set-Cookie')\n        self.assertIn('HttpOnly', cookie)\n\n    def test_login_with_plaintext(self):\n        \"\"\"\n        Requesting plain text without being authenticated should show the login form.\n        \"\"\"\n        # When querying root page without authentication\n        self.getPage('/', headers=[(\"Accept\", \"text/plain\")])\n        # Then user is redirected to /login page\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/login/')\n\n    @parameterized.expand(\n        [\n            ('with_root', '/'),\n            ('with_browse_url', '/browse/admin/testcases/Revisions/'),\n            ('with_encoded_url', '/browse/admin/testcases/DIR%EF%BF%BD/'),\n            (\n                'with_broken_encoding',\n                '/restore/admin/testcases/Fichier%20avec%20non%20asci%20char%20%C9velyne%20M%E8re.txt/?date=1415221507',\n            ),\n            ('with_query_string', '/restore/admin/testcases/Revisions?date=1477434528'),\n            ('with_multiple_query_string', '/restore/admin/testcases/Revisions?date=1477434528&kind=tar.gz'),\n            ('with_admin', '/admin/'),\n        ]\n    )\n    def test_login(self, unused, original_url):\n        # Given an unauthenticated user\n        # Query the page without login-in\n        self.getPage(original_url)\n        # Then user is redirected to the login page\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/login/')\n        # When authentication is successful\n        self.getPage('/login/', method='POST', body={'login': self.USERNAME, 'password': self.PASSWORD})\n        # Then user is redirected to original URL\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + original_url)\n        # When requesting the original page\n        self.getPage(original_url)\n        # Then page return without error\n        self.assertStatus(200)\n\n    def test_getpage_with_redirect_post(self):\n        \"\"\"\n        Check encoding of redirect url when send using POST method.\n        \"\"\"\n        # When posting invalid credentials\n        b = {'login': 'admin', 'password': 'invalid', 'redirect': '/browse/' + self.REPO + '/DIR%EF%BF%BD/'}\n        self.getPage('/login/', method='POST', body=b)\n        # Then page return without HTTP Error\n        self.assertStatus('200 OK')\n        # Then page display an error\n        self.assertInBody('Invalid username or password.')\n        self.assertInBody('id=\"form-login\"')\n        # Then redirect URL is ignored\n        self.assertNotInBody('/browse/' + self.REPO + '/DIR%EF%BF%BD/\"')\n\n    def test_getpage_without_username(self):\n        \"\"\"\n        Check if error is raised when requesting /login without a username.\n        \"\"\"\n        self.getPage('/login/', method='GET')\n        self.assertStatus('200 OK')\n\n    def test_getpage_with_username_too_long(self):\n        b = {'login': 'admin' * 52, 'password': 'admin123'}\n        self.getPage('/login/', method='POST', body=b)\n        self.assertStatus('200 OK')\n        self.assertInBody('Username too long.')\n\n    def test_getpage_with_empty_password(self):\n        \"\"\"\n        Check if authentication is failing without a password.\n        \"\"\"\n        b = {'login': 'admin', 'password': ''}\n        self.getPage('/login/', method='POST', body=b)\n        self.assertStatus('200 OK')\n        self.assertInBody('This field is required.')\n\n    def test_getpage_with_invalid_url(self):\n        self.getPage('/login/kefuxian.mvc', method='GET')\n        self.assertStatus('303 See Other')\n\n    def test_post_with_invalid_url(self):\n        self.getPage('/login/kefuxian.mvc', method='POST')\n        self.assertStatus('303 See Other')\n\n    def test_login_twice(self):\n        # Given an authenticated user\n        self.getPage('/login/', method='POST', body={'login': self.USERNAME, 'password': self.PASSWORD})\n        self.assertStatus(303)\n        self.assertHeaderItemValue('Location', self.baseurl + \"/\")\n        self.getPage('/')\n        self.assertStatus(200)\n        self.assertInBody(self.USERNAME)\n        # Given another user\n        UserObject.add_user('otheruser', password='password')\n        # When trying to re-authenticated with login page\n        self.getPage('/login/', method='POST', body={'login': 'otheruser', 'password': 'password'})\n        # Then user is still authenticated with previous user\n        self.assertStatus(303)\n        self.assertHeaderItemValue('Location', self.baseurl + \"/\")\n        self.getPage('/')\n        self.assertStatus(200)\n        self.assertInBody(self.USERNAME)\n\n\nclass LoginPageWithWelcomeMsgTest(rdiffweb.test.WebCase):\n\n    default_config = {'welcomemsg': 'default message', 'welcomemsg[fr]': 'french message'}\n\n    def test_getpage_default(self):\n        \"\"\"\n        Make sure the login page can be rendered without error.\n        \"\"\"\n        self.getPage('/login/', headers=[(\"Accept-Language\", \"it\")])\n        self.assertStatus('200 OK')\n        self.assertInBody('default message')\n\n    def test_getpage_french(self):\n        \"\"\"\n        Make sure the login page can be rendered without error.\n        \"\"\"\n        self.getPage('/login/', headers=[(\"Accept-Language\", \"fr\")])\n        self.assertStatus('200 OK')\n        self.assertInBody('french message')\n\n\nclass LoginPageWithHeaderName(rdiffweb.test.WebCase):\n\n    default_config = {'header-name': 'HEADER-NAME'}\n\n    def test_getpage_default(self):\n        # Given a custom header-name\n        # When querying the loging page\n        self.getPage('/login/')\n        # Then the page display the header-name\n        self.assertStatus('200 OK')\n        self.assertInBody('HEADER-NAME')\n\n\n@parameterized_class(\n    [\n        {\"default_config\": {'rate-limit': 5}},\n        {\"default_config\": {'rate-limit': 5, 'rate-limit-dir': '/tmp'}},\n    ]\n)\nclass LoginPageRateLimitTest(rdiffweb.test.WebCase):\n    def setUp(self):\n        if os.path.isfile('/tmp/ratelimit-127.0.0.1'):\n            os.unlink('/tmp/ratelimit-127.0.0.1')\n        if os.path.isfile('/tmp/ratelimit-127.0.0.1.-login'):\n            os.unlink('/tmp/ratelimit-127.0.0.1.-login')\n        return super().setUp()\n\n    def test_login_ratelimit(self):\n        # Given an unauthenticate\n        # When requesting multiple time the login page\n        for i in range(1, 5):\n            self.getPage('/login/', method='POST', body={'login': 'invalid', 'password': 'invalid'})\n            self.assertStatus(200)\n        # Then a 429 error (too many request) is return\n        self.getPage('/login/', method='POST', body={'login': 'invalid', 'password': 'invalid'})\n        self.assertStatus(429)\n\n\nclass LoginPageRateLimitTest2(rdiffweb.test.WebCase):\n\n    default_config = {'rate-limit': 5}\n\n    def test_login_ratelimit_forwarded_for(self):\n        # Given an unauthenticate\n        # When requesting multiple time the login page with different `X-Forwarded-For`\n        for i in range(1, 5):\n            self.getPage(\n                '/login/',\n                headers=[('X-Forwarded-For', '127.0.0.%s' % i)],\n                method='POST',\n                body={'login': 'invalid', 'password': 'invalid'},\n            )\n            self.assertStatus(200)\n        # Then original IP get blocked\n        self.getPage(\n            '/login/',\n            headers=[('X-Forwarded-For', '127.0.0.%s' % i)],\n            method='POST',\n            body={'login': 'invalid', 'password': 'invalid'},\n        )\n        self.assertStatus(429)\n\n\nclass LoginPageRateLimitTest3(rdiffweb.test.WebCase):\n    default_config = {'rate-limit': 5}\n\n    def test_login_ratelimit_real_ip(self):\n        # Given an unauthenticate\n        # When requesting multiple time the login page with different `X-Real-IP`\n        for i in range(1, 5):\n            self.getPage(\n                '/login/',\n                headers=[('X-Real-IP', '127.0.0.128')],\n                method='POST',\n                body={'login': 'invalid', 'password': 'invalid'},\n            )\n            self.assertStatus(200)\n        # Then the X-Real-IP get blocked\n        self.getPage(\n            '/login/',\n            headers=[('X-Real-IP', '127.0.0.128')],\n            method='POST',\n            body={'login': 'invalid', 'password': 'invalid'},\n        )\n        self.assertStatus(429)\n\n\nclass LogoutPageTest(rdiffweb.test.WebCase):\n    def test_getpage_without_login(self):\n        # Given an unauthenticated user\n        # When Accessing logout page directly\n        self.getPage('/logout')\n        # Then user is redirect to root '/'\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/')\n\n    def test_getpage_with_login(self):\n        # Given an anonymous user\n        self.getPage('/')\n        prev_session_id = self.session_id\n        # Login\n        b = {'login': 'admin', 'password': 'admin123'}\n        self.getPage('/login/', method='POST', body=b)\n        self.assertStatus('303 See Other')\n        # Then a new session id is generated\n        self.assertNotEqual(prev_session_id, self.session_id)\n        prev_session_id = self.session_id\n        # Get content of a page.\n        self.getPage(\"/prefs/general\")\n        self.assertStatus('200 OK')\n        # When logout\n        self.getPage('/logout')\n        # Then a new session id is generated\n        self.assertNotEqual(prev_session_id, self.session_id)\n        # Then user is redirected to root page\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/')\n        # Get content of a page.\n        self.getPage(\"/prefs/general\")\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/login/')\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport argparse\nimport logging\nimport re\nimport sys\nfrom collections import OrderedDict\n\nimport cherrypy\nimport configargparse\nimport pkg_resources\nfrom cherrypy import Application\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n# Get rdiffweb version.\ntry:\n    VERSION = pkg_resources.get_distribution(\"rdiffweb\").version\nexcept pkg_resources.DistributionNotFound:\n    VERSION = \"DEV\"\n\n\ndef get_parser():\n    # Get global config argument parser\n    parser = configargparse.ArgumentParser(\n        prog='rdiffweb',\n        description='Web interface to browse and restore rdiff-backup repositories.',\n        default_config_files=['/etc/rdiffweb/rdw.conf', '/etc/rdiffweb/rdw.conf.d/*.conf'],\n        add_env_var_help=True,\n        auto_env_var_prefix='RDIFFWEB_',\n        config_file_parser_class=ConfigFileParser,\n        conflict_handler='resolve',\n    )\n\n    parser.add_argument(\n        '-f', '--config', is_config_file=True, metavar='FILE', help='location of Rdiffweb configuration file'\n    )\n\n    parser.add(\n        '--database-uri',\n        '--sqlitedb-file',\n        '--sqlitedbfile',\n        metavar='URI',\n        help=\"\"\"Location of the database used for persistence. SQLite and PostgreSQL\n            database are supported officially. To use a SQLite database you may\n            define the location using a file path or a URI.\n            e.g.: /srv/rdiffweb/file.db or sqlite:///srv/rdiffweb/file.db`.\n            To use PostgreSQL server you must provide\n            a URI similar to postgresql://user:pass@10.255.1.34/dbname and you\n            must install required dependencies.\n            By default, Rdiffweb uses a SQLite embedded database located at\n            /etc/rdiffweb/rdw.db.\"\"\",\n        default='/etc/rdiffweb/rdw.db',\n    )\n\n    parser.add_argument(\n        '-d',\n        '--debug',\n        action='store_true',\n        help='enable rdiffweb debug mode - change the log level to DEBUG, print exception stack trace to the web interface and show SQL query in logs',\n    )\n\n    parser.add_argument(\n        '--admin-user',\n        '--adminuser',\n        metavar='USERNAME',\n        help='administrator username. The administrator user get created on startup if the database is empty.',\n        default='admin',\n    )\n\n    parser.add_argument(\n        '--admin-password',\n        metavar='USERNAME',\n        help=\"\"\"administrator encrypted password as SSHA. Read online\n            documentation to know more about how to encrypt your password\n            into SSHA or use http://projects.marsching.org/weave4j/util/genpassword.php\n            When defined, administrator password cannot be updated using the web interface.\n            When undefined, default administrator password is `admin123` and\n            it can be updated using the web interface.\"\"\",\n    )\n\n    parser.add_argument(\n        '--default-theme',\n        '--defaulttheme',\n        help='define the default theme. Either: default, blue or orange. Define the CSS file to be loaded in the web interface. You may manually edit a CSS file to customize it. The location is similar to `/usr/local/lib/python3.9/dist-packages/rdiffweb/static/`',\n        choices=['default', 'blue', 'orange'],\n        default='default',\n    )\n\n    parser.add_argument(\n        '--environment',\n        choices=['development', 'production'],\n        help='define the type of environment: development, production. This is used to limit the information shown to the user when an error occur.',\n        default='production',\n    )\n\n    parser.add_argument(\n        '--email-encryption',\n        '--emailencryption',\n        choices=['none', 'ssl', 'starttls'],\n        help='type of encryption to be used when establishing communication with SMTP server. Default: none',\n        default='none',\n    )\n\n    parser.add_argument(\n        '--email-host',\n        '--emailhost',\n        metavar='HOST',\n        help='SMTP server used to send email in the form <host>:<port>. If the port is not provided, default to standard port 25 or 465 is used. e.g.: smtp.gmail.com:587',\n    )\n\n    parser.add_argument(\n        '--email-sender',\n        '--emailsender',\n        metavar='EMAIL',\n        help='email addres used for the `from:` field when sending email.',\n    )\n\n    parser.add_argument(\n        '--email-notification-time',\n        '--emailnotificationtime',\n        metavar='TIME',\n        help='time when the email notifcation should be sent for inactive backups. e.g.: 22:00 Default value: 23:00',\n        default='23:00',\n    )\n\n    parser.add_argument(\n        '--email-username',\n        '--emailusername',\n        metavar='USERNAME',\n        help='username used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-password',\n        '--emailpassword',\n        metavar='PASSWORD',\n        help='password used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-send-changed-notification',\n        '--emailsendchangednotification',\n        help='True to send notification when sensitive information get change in user profile.',\n        action='store_true',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--favicon',\n        help='location of an icon to be used as a favicon displayed in web browser.',\n        default=pkg_resources.resource_filename('rdiffweb', 'static/favicon.ico'),\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-name', '--footername', help=argparse.SUPPRESS, default='rdiffweb'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-url', '--footerurl', help=argparse.SUPPRESS, default='https://rdiffweb.org/'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--header-logo',\n        '--headerlogo',\n        help='location of an image (preferably a .png) to be used as a replacement for the rdiffweb logo.',\n    )\n\n    parser.add_argument(\n        '--header-name',\n        '--headername',\n        help='application name displayed in the title bar and header menu.',\n        default='Rdiffweb',\n    )\n\n    parser.add_argument(\n        '--ldap-add-missing-user',\n        '--addmissinguser',\n        action='store_true',\n        help='enable creation of users from LDAP when the credential are valid.',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-role',\n        help='default role used when creating users from LDAP. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='user',\n        choices=['admin', 'maintainer', 'user'],\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-userroot',\n        help='default user root directory used when creating users from LDAP. LDAP attributes may be used to define the default location. e.g.: `/backups/{uid[0]}/`. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='',\n    )\n\n    parser.add_argument(\n        '--ldap-uri',\n        '--ldapuri',\n        help='URL to the LDAP server used to validate user credentials. e.g.: ldap://localhost:389',\n    )\n\n    parser.add_argument(\n        '--ldap-base-dn',\n        '--ldapbasedn',\n        metavar='DN',\n        help='DN of the branch of the directory where all searches should start from. e.g.: dc=my,dc=domain',\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-scope',\n        '--ldapscope',\n        help='scope of the search. Can be either base, onelevel or subtree',\n        choices=['base', 'onelevel', 'subtree'],\n        default=\"subtree\",\n    )\n\n    parser.add_argument('--ldap-tls', '--ldaptls', action='store_true', help='enable TLS')\n\n    parser.add_argument(\n        '--ldap-username-attribute',\n        '--ldapattribute',\n        metavar='ATTRIBUTE',\n        help=\"The attribute to search username. If no attributes are provided, the default is to use `uid`. It's a good idea to choose an attribute that will be unique across all entries in the subtree you will be using.\",\n        default='uid',\n    )\n\n    parser.add_argument(\n        '--ldap-filter',\n        '--ldapfilter',\n        help=\"search filter to limit LDAP lookup. If not provided, defaults to (objectClass=*), which searches for all objects in the tree.\",\n        default='(objectClass=*)',\n    )\n\n    parser.add_argument(\n        '--ldap-required-group',\n        '--ldaprequiredgroup',\n        metavar='GROUPNAME',\n        help=\"name of the group of which the user must be a member to access rdiffweb. Should be used with ldap-group-attribute and ldap-group-attribute-is-dn.\",\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute',\n        '--ldapgroupattribute',\n        metavar='ATTRIBUTE',\n        help=\"name of the attribute defining the groups of which the user is a member. Should be used with ldap-required-group and ldap-group-attribute-is-dn.\",\n        default='member',\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute-is-dn',\n        '--ldapgroupattributeisdn',\n        help=\"True if the content of the attribute `ldap-group-attribute` is a DN.\",\n        action='store_true',\n    )\n\n    parser.add_argument(\n        '--ldap-bind-dn',\n        '--ldapbinddn',\n        metavar='DN',\n        help=\"optional DN used to bind to the server when searching for entries. If not provided, will use an anonymous bind.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-bind-password',\n        '--ldapbindpassword',\n        metavar='PASSWORD',\n        help=\"password to use in conjunction with LdapBindDn. Note that the bind password is probably sensitive data, and should be properly protected. You should only use the LdapBindDn and LdapBindPassword if you absolutely need them to search the directory.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-version',\n        '--ldapversion',\n        '--ldapprotocolversion',\n        help=\"version of LDAP in use either 2 or 3. Default to 3.\",\n        default=3,\n        type=int,\n        choices=[2, 3],\n    )\n\n    parser.add_argument(\n        '--ldap-network-timeout',\n        '--ldapnetworktimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP connection\",\n        default=100,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-timeout',\n        '--ldaptimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP request\",\n        default=300,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-encoding',\n        '--ldapencoding',\n        metavar='ENCODING',\n        help=\"encoding used by your LDAP server.\",\n        default=\"utf-8\",\n    )\n\n    parser.add_argument(\n        '--log-access-file', '--logaccessfile', metavar='FILE', help='location of Rdiffweb log access file.'\n    )\n\n    parser.add_argument(\n        '--log-file',\n        '--logfile',\n        metavar='FILE',\n        help='location of Rdiffweb log file. Print log to the console if not define in config file.',\n    )\n\n    parser.add_argument(\n        '--log-level',\n        '--loglevel',\n        help='Define the log level.',\n        choices=['ERROR', 'WARN', 'INFO', 'DEBUG'],\n        default='INFO',\n    )\n\n    parser.add_argument(\n        '--max-depth',\n        '--maxdepth',\n        metavar='DEPTH',\n        help=\"define the maximum folder depthness to search into the user's root directory to find repositories. This is commonly used if you repositories are organised with multiple sub-folder.\",\n        type=int,\n        default=3,\n    )\n\n    parser.add('--quota-set-cmd', '--quotasetcmd', metavar='COMMAND', help=\"command line to set the user's quota.\")\n\n    parser.add('--quota-get-cmd', '--quotagetcmd', metavar='COMMAND', help=\"command line to get the user's quota.\")\n\n    parser.add(\n        '--quota-used-cmd', '--quotausedcmd', metavar='COMMAND', help=\"Command line to get user's quota disk usage.\"\n    )\n\n    parser.add(\n        '--remove-older-time',\n        '--removeoldertime',\n        metavar='TIME',\n        help=\"Time when to execute the remove older scheduled job. e.g.: 22:30\",\n        default='23:00',\n    )\n\n    parser.add('--server-host', '--serverhost', metavar='IP', default='127.0.0.1', help='IP address to listen to')\n\n    parser.add(\n        '--server-port',\n        '--serverport',\n        metavar='PORT',\n        help='port to listen to for HTTP request',\n        default='8080',\n        type=int,\n    )\n\n    parser.add(\n        '--rate-limit-dir',\n        '--session-dir',\n        '--sessiondir',\n        metavar='FOLDER',\n        help='location where to store rate-limit information. When undefined, the data is kept in memory. `--session-dir` are deprecated and kept for backward compatibility.',\n    )\n\n    parser.add(\n        '--session-timeout',\n        metavar='MINUTES',\n        help='Sessions will be revoke after this period of inactivity, unless the user selected \"remember me\". Default 15 minutes.',\n        default=15,\n    )\n\n    parser.add(\n        '--session-persistent-timeout',\n        metavar='MINUTES',\n        help='Persistent sessions (remember me) will be revoke after this period of inactivity. Default 30 days.',\n        default=43200,\n    )\n\n    parser.add(\n        '--rate-limit',\n        metavar='LIMIT',\n        type=int,\n        default=20,\n        help='maximum number of requests per hour that can be made on sensitive endpoints. When this limit is reached, an HTTP 429 message is returned to the user or the user is logged out. This security measure is used to limit brute force attacks on the login page and the RESTful API.',\n    )\n\n    parser.add(\n        '--ssl-certificate',\n        '--sslcertificate',\n        metavar='CERT',\n        help='location of the SSL Certification to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--ssl-private-key',\n        '--sslprivatekey',\n        metavar='KEY',\n        help='location of the SSL Private Key to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--tempdir',\n        metavar='FOLDER',\n        help='alternate temporary folder to be used when restoring files. Might be useful if the default location has limited disk space. Default to TEMPDIR environment or `/tmp`.',\n    )\n\n    parser.add(\n        '--disable-ssh-keys',\n        action='store_true',\n        help='used to hide SSH Key management to avoid users to add or remove SSH Key using the web application',\n        default=False,\n    )\n\n    parser.add(\n        '--password-min-length',\n        type=int,\n        help=\"Minimum length of the user's password\",\n        default=8,\n    )\n\n    parser.add(\n        '--password-max-length',\n        type=int,\n        help=\"Maximum length of the user's password\",\n        default=128,\n    )\n\n    parser.add(\n        '--password-score',\n        type=lambda x: max(1, min(int(x), 4)),\n        help=\"Minimum zxcvbn's score for password. Value from 1 to 4. Default value 2. Read more about it here: https://github.com/dropbox/zxcvbn\",\n        default=2,\n    )\n\n    parser.add_argument('--version', action='version', version='%(prog)s ' + VERSION)\n\n    # Here we append a list of arguments for each locale.\n    flags = ['--welcome-msg'] + ['--welcome-msg-' + i for i in ['ca', 'en', 'es', 'fr', 'ru']] + ['--welcomemsg']\n    parser.add_argument(\n        *flags,\n        metavar='HTML',\n        help='replace the welcome message displayed in the login page for default locale or for a specific locale',\n        action=LocaleAction\n    )\n    return parser\n\n\ndef parse_args(args=None, config_file_contents=None):\n    args = sys.argv[1:] if args is None else args\n    return get_parser().parse_args(args, config_file_contents=config_file_contents)\n\n\nclass LocaleAction(argparse.Action):\n    \"\"\"\n    Custom Action to support defining arguments with locale.\n    \"\"\"\n\n    def __init__(self, option_strings, dest, nargs=None, **kwargs):\n        super(LocaleAction, self).__init__(option_strings, dest, **kwargs)\n\n    def __call__(self, parser, namespace, value, option_string=None):\n        if option_string[-3] == '-':\n            # When using arguments, we can extract the locale from the argument key\n            locale = option_string[-2:]\n        elif value[2] == ':':\n            # When using config file, the locale could be extract from the value e.g. fr:message\n            locale = value[0:2]\n            value = value[3:]\n        else:\n            locale = ''\n        # Create a dictionary with locale.\n        items = getattr(namespace, self.dest) or {}\n        items[locale] = value\n        setattr(namespace, self.dest, items)\n\n\nclass ConfigFileParser(object):\n    \"\"\"\n    Custom config file parser to support rdiffweb config file format.\n    \"\"\"\n\n    def get_syntax_description(self):\n        msg = \"Configuration file syntax allows: key=value, flag=true.\"\n        return msg\n\n    def parse(self, stream):\n        \"\"\"\n        Used to read the rdiffweb config file as dict.\n        \"\"\"\n\n        result = OrderedDict()\n\n        for i, line in enumerate(stream):\n            line = re.compile(\"(.*?)#.*\").sub(r'\\1', line).strip()\n            if not line:\n                continue\n            if '=' not in line:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n            split_line = line.partition('=')\n            if not len(split_line) == 3:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n\n            # Get key a& value\n            key = split_line[0].lower().strip().replace('_', '-')\n            value = split_line[2].strip()\n\n            # Support welcome-msg locale for backward compatibility\n            m = re.match(\"welcome-?msg\\\\[(ca|en|es|fr|ru)\\\\]\", key.lower())\n            if m:\n                key = \"welcome-msg-\" + m.group(1)\n                value = m.group(1) + \":\" + value\n\n            result[key] = value\n\n        # This dictionary is read by cherrypy. So create appropriate structure.\n        return result\n\n\nclass Option(object):\n    def __init__(self, key):\n        assert key\n        self.key = key\n\n    def __get__(self, instance, owner):\n        \"\"\"\n        Return a property to wrap the given option.\n        \"\"\"\n        return self.get(instance)\n\n    def get(self, instance=None):\n        \"\"\"\n        Return the value of this options.\n        \"\"\"\n        if isinstance(instance, Application):\n            app = instance\n        else:\n            app = cherrypy.request.app or getattr(instance, 'app', None)\n        assert app, \"Option() can't get reference to app\"\n        assert app.cfg, \"Option() can't get reference to app.cfg\"\n        return getattr(app.cfg, self.key)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport logging\nimport os\n\nimport cherrypy\nimport cherrypy.lib.sessions\nimport pkg_resources\nfrom cherrypy import Application\n\nimport rdiffweb\nimport rdiffweb.controller.filter_authorization\nimport rdiffweb.core.login  # noqa\nimport rdiffweb.core.notification\nimport rdiffweb.core.quota\nimport rdiffweb.core.remove_older\nimport rdiffweb.plugins.ldap\nimport rdiffweb.plugins.scheduler\nimport rdiffweb.plugins.smtp\nimport rdiffweb.tools.auth_form\nimport rdiffweb.tools.auth_mfa\nimport rdiffweb.tools.currentuser\nimport rdiffweb.tools.db\nimport rdiffweb.tools.enrich_session\nimport rdiffweb.tools.errors\nimport rdiffweb.tools.i18n\nimport rdiffweb.tools.proxy\nimport rdiffweb.tools.ratelimit\nimport rdiffweb.tools.secure_headers\nfrom rdiffweb.controller import Controller\nfrom rdiffweb.controller.api import ApiPage\nfrom rdiffweb.controller.dispatch import staticdir, staticfile\nfrom rdiffweb.controller.page_admin import AdminPage\nfrom rdiffweb.controller.page_browse import BrowsePage\nfrom rdiffweb.controller.page_delete import DeletePage\nfrom rdiffweb.controller.page_graphs import GraphsPage\nfrom rdiffweb.controller.page_history import HistoryPage\nfrom rdiffweb.controller.page_locations import LocationsPage\nfrom rdiffweb.controller.page_login import LoginPage\nfrom rdiffweb.controller.page_logs import LogsPage\nfrom rdiffweb.controller.page_mfa import MfaPage\nfrom rdiffweb.controller.page_pref_sshkeys import ApiSshKeys\nfrom rdiffweb.controller.page_prefs import PreferencesPage\nfrom rdiffweb.controller.page_restore import RestorePage\nfrom rdiffweb.controller.page_settings import SettingsPage\nfrom rdiffweb.controller.page_status import StatusPage\nfrom rdiffweb.core import rdw_templating\nfrom rdiffweb.core.config import Option, parse_args\nfrom rdiffweb.core.model import DbSession, UserObject\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n\n# Define cherrypy development environment\ncherrypy.config.environments['development'] = {\n    'engine.autoreload.on': True,\n    'checker.on': False,\n    'tools.log_headers.on': True,\n    'request.show_tracebacks': True,\n    'request.show_mismatched_params': True,\n    'log.screen': False,\n}\n\n\n@cherrypy.tools.auth_form()\n@cherrypy.tools.auth_mfa(\n    mfa_enabled=lambda username: UserObject.get_user(username).mfa == UserObject.ENABLED_MFA,\n)\n@cherrypy.tools.currentuser(userobj=lambda username: UserObject.get_user(username))\n@cherrypy.tools.db()\n@cherrypy.tools.enrich_session()\n@cherrypy.tools.proxy(remote='X-Real-IP')\n@cherrypy.tools.secure_headers()\nclass Root(LocationsPage):\n    def __init__(self):\n        self.login = LoginPage()\n        self.mfa = MfaPage()\n        self.browse = BrowsePage()\n        self.delete = DeletePage()\n        self.restore = RestorePage()\n        self.history = HistoryPage()\n        self.status = StatusPage()\n        self.admin = AdminPage()\n        self.prefs = PreferencesPage()\n        self.settings = SettingsPage()\n        self.api = ApiPage()\n        self.api.currentuser.sshkeys = ApiSshKeys()\n        self.graphs = GraphsPage()\n        self.logs = LogsPage()\n\n        # Register static dir.\n        static_dir = pkg_resources.resource_filename('rdiffweb', 'static')  # @UndefinedVariable\n        self.static = staticdir(static_dir)\n\n        # Register robots.txt\n        robots_txt = pkg_resources.resource_filename('rdiffweb', 'static/robots.txt')  # @UndefinedVariable\n        self.robots_txt = staticfile(robots_txt)\n\n\nclass RdiffwebApp(Application):\n    \"\"\"This class represent the application context.\"\"\"\n\n    _favicon = Option('favicon')\n\n    _header_logo = Option('header_logo')\n\n    _tempdir = Option('tempdir')\n\n    @classmethod\n    def parse_args(cls, args=None, config_file_contents=None):\n        return parse_args(args, config_file_contents)\n\n    def __init__(self, cfg):\n        self.cfg = cfg\n        db_uri = self.cfg.database_uri if '://' in self.cfg.database_uri else \"sqlite:///\" + self.cfg.database_uri\n        cherrypy.config.update(\n            {\n                'environment': 'development' if cfg.debug else cfg.environment,\n                # Configure database plugins\n                'tools.db.uri': db_uri,\n                'tools.db.debug': cfg.debug,\n                # Configure LDAP plugin\n                'ldap.uri': cfg.ldap_uri,\n                'ldap.base_dn': cfg.ldap_base_dn,\n                'ldap.bind_dn': cfg.ldap_bind_dn,\n                'ldap.bind_password': cfg.ldap_bind_password,\n                'ldap.scope': cfg.ldap_scope,\n                'ldap.tls': cfg.ldap_tls,\n                'ldap.username_attribute': cfg.ldap_username_attribute,\n                'ldap.required_group': cfg.ldap_required_group,\n                'ldap.group_attribute': cfg.ldap_group_attribute,\n                'ldap.group_attribute_is_dn': cfg.ldap_group_attribute_is_dn,\n                'ldap.version': cfg.ldap_version,\n                'ldap.network_timeout': cfg.ldap_network_timeout,\n                'ldap.timeout': cfg.ldap_timeout,\n                'ldap.encoding': cfg.ldap_encoding,\n                # Configure login\n                'login.add_missing_user': cfg.ldap_add_missing_user,\n                'login.add_user_default_role': cfg.ldap_add_user_default_role,\n                'login.add_user_default_userroot': cfg.ldap_add_user_default_userroot,\n                # Configure SMTP plugin\n                'smtp.server': cfg.email_host,\n                'smtp.username': cfg.email_username,\n                'smtp.password': cfg.email_password,\n                'smtp.email_from': cfg.email_sender\n                and '%s <%s>'\n                % (\n                    cfg.header_name,\n                    cfg.email_sender,\n                ),\n                'smtp.encryption': cfg.email_encryption,\n                # Configure remove_older plugin\n                'remove_older.execution_time': self.cfg.remove_older_time,\n                # Configure notification plugin\n                'notification.execution_time': self.cfg.email_notification_time,\n                'notification.send_changed': self.cfg.email_send_changed_notification,\n                # Configure quota plugin\n                'quota.set_quota_cmd': self.cfg.quota_set_cmd,\n                'quota.get_quota_cmd': self.cfg.quota_get_cmd,\n                'quota.get_usage_cmd': self.cfg.quota_used_cmd,\n            }\n        )\n        # Create database if required\n        cherrypy.tools.db.create_all()\n\n        # Initialise the template engine.\n        self.templates = rdw_templating.TemplateManager()\n\n        # Pick the right implementation for storage\n        rate_limit_storage_class = rdiffweb.tools.ratelimit.RamRateLimit\n        if cfg.rate_limit_dir:\n            rate_limit_storage_class = rdiffweb.tools.ratelimit.FileRateLimit\n\n        config = {\n            '/': {\n                # To work around the new behaviour in CherryPy >= 5.5.0, force usage of\n                # ISO-8859-1 encoding for URL. This avoid any conversion of the\n                # URL into UTF-8.\n                'request.uri_encoding': 'ISO-8859-1',\n                'tools.i18n.on': True,\n                'tools.i18n.default': 'en_US',\n                'tools.i18n.mo_dir': pkg_resources.resource_filename('rdiffweb', 'locales'),  # @UndefinedVariable\n                'tools.i18n.domain': 'messages',\n                'tools.encode.on': True,\n                'tools.encode.encoding': 'utf-8',\n                'tools.gzip.on': True,\n                'error_page.default': self.error_page,\n                'tools.sessions.on': True,\n                'tools.sessions.debug': cfg.debug,\n                'tools.sessions.storage_class': DbSession,\n                'tools.sessions.httponly': True,\n                'tools.sessions.timeout': cfg.session_timeout,  # minutes\n                'tools.sessions.persistent': False,  # auth_form should update this.\n                'tools.auth_form.timeout': cfg.session_persistent_timeout,  # minutes\n                'tools.ratelimit.debug': cfg.debug,\n                'tools.ratelimit.delay': 3600,\n                'tools.ratelimit.limit': cfg.rate_limit,\n                'tools.ratelimit.storage_class': rate_limit_storage_class,\n                'tools.ratelimit.storage_path': cfg.rate_limit_dir,\n            },\n        }\n\n        # Initialize the application\n        Application.__init__(self, root=Root(), config=config)\n\n        # Register favicon.ico\n        self.root.favicon_ico = staticfile(self._favicon)\n\n        # Register header_logo\n        if self._header_logo:\n            self.root.header_logo = staticfile(self._header_logo)\n\n        # Define TEMP env\n        if self._tempdir:\n            os.environ[\"TMPDIR\"] = self._tempdir\n\n        # create user manager\n        UserObject.create_admin_user(cfg.admin_user, cfg.admin_password)\n\n    @property\n    def currentuser(self):\n        \"\"\"\n        Proxy property to get current user from cherrypy request object.\n        Return a UserObject when logged in or None.\n        \"\"\"\n        return getattr(cherrypy.serving.request, 'currentuser', None)\n\n    def error_page(self, **kwargs):\n        \"\"\"\n        Default error page shown to the user when an unexpected error occur.\n        \"\"\"\n        # Log exception.\n        logger.error(\n            'error page: %s %s\\n%s' % (kwargs.get('status', ''), kwargs.get('message', ''), kwargs.get('traceback', ''))\n        )\n\n        # Replace message by generic one for 404. Default implementation leak path info.\n        if kwargs.get('status', '') == '404 Not Found':\n            kwargs['message'] = 'Nothing matches the given URI'\n\n        # Check expected response type.\n        mtype = cherrypy.tools.accept.callable(['text/html', 'text/plain'])  # @UndefinedVariable\n        if mtype == 'text/plain':\n            return kwargs.get('message')\n\n        # Try to build a nice error page.\n        try:\n            page = Controller()\n            return page._compile_template('error_page_default.html', **kwargs)\n        except Exception:\n            # If failing, send the raw error message.\n            return kwargs.get('message')\n\n    @property\n    def version(self):\n        \"\"\"\n        Get the current running version (using package info).\n        \"\"\"\n        return rdiffweb.__version__\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport datetime\nimport time\nimport urllib.parse\n\nimport cherrypy\nfrom cherrypy.lib import httputil\n\nSESSION_KEY = '_cp_username'\nLOGIN_TIME = 'login_time'\nLOGIN_REDIRECT_URL = '_auth_form_redirect_url'\nLOGIN_PERSISTENT = 'login_persistent'\n\n\nclass CheckAuthForm(cherrypy.Tool):\n    def __init__(self, priority=73):\n        super().__init__(point='before_handler', callable=self.run, priority=priority)\n\n    def _is_login(self):\n        \"\"\"\n        Verify if the login expired and we need to prompt the user to authenticated again using either credentials and/or MFA.\n        \"\"\"\n        # Verify if current user exists\n        request = cherrypy.serving.request\n        if not getattr(request, 'currentuser', None):\n            return False\n\n        # Verify if session is enabled\n        sessions_on = request.config.get('tools.sessions.on', False)\n        if not sessions_on:\n            return False\n\n        # Verify session\n        session = cherrypy.session\n        return (\n            session.get(SESSION_KEY) is not None\n            and session.get(LOGIN_TIME) is not None\n            and session[LOGIN_TIME] + datetime.timedelta(minutes=session.timeout) > session.now()\n        )\n\n    def _get_redirect_url(self):\n        \"\"\"\n        Return the original URL the user browser before getting redirect to login.\n        \"\"\"\n        return cherrypy.session.get(LOGIN_REDIRECT_URL) or '/'\n\n    def _set_redirect_url(self):\n        # Keep reference to the current URL\n        request = cherrypy.serving.request\n        uri_encoding = getattr(request, 'uri_encoding', 'utf-8')\n        original_url = urllib.parse.quote(request.path_info, encoding=uri_encoding)\n        qs = request.query_string\n        new_url = cherrypy.url(original_url, qs=qs, base='')\n        cherrypy.session[LOGIN_REDIRECT_URL] = new_url\n\n    def redirect_to_original_url(self):\n        # Redirect user to original URL\n        raise cherrypy.HTTPRedirect(self._get_redirect_url())\n\n    def run(self, login_url='/login/', logout_url='/logout', timeout=43200):\n        \"\"\"\n        A tool that verify if the session is associated to a user by tracking\n        a session key. If session is not authenticated, redirect user to login page.\n        \"\"\"\n        request = cherrypy.serving.request\n        # Skip execution of this tools when browsing the login page.\n        if request.path_info == login_url:\n            if self._is_login():\n                raise cherrypy.HTTPRedirect('/')\n            return\n\n        # Clear session when browsing /logout\n        if request.path_info == logout_url or request.path_info.startswith(logout_url):\n            self.logout()\n            raise cherrypy.HTTPRedirect('/')\n\n        # Check if login\n        if not self._is_login():\n            # Store original URL\n            self._set_redirect_url()\n            # And redirect to login page\n            raise cherrypy.HTTPRedirect(login_url)\n\n        # If login is persistent, update the cookie max-age/expires\n        if cherrypy.session.get(LOGIN_PERSISTENT, False):\n            cherrypy.session.timeout = timeout\n            cookie = cherrypy.serving.response.cookie\n            cookie['session_id']['max-age'] = timeout * 60\n            cookie['session_id']['expires'] = httputil.HTTPDate(time.time() + timeout * 60)\n        else:\n            session_timeout = cherrypy.request.config.get('tools.sessions.timeout', 60)\n            cherrypy.session.timeout = session_timeout\n\n    def login(self, username, persistent=False):\n        \"\"\"\n        Must be called by the page hanlder when the authentication is successful.\n        \"\"\"\n        # Store session data\n        cherrypy.session[LOGIN_PERSISTENT] = persistent\n        cherrypy.session[SESSION_KEY] = username\n        cherrypy.session[LOGIN_TIME] = cherrypy.session.now()\n        # Generate a new session id\n        cherrypy.session.regenerate()\n\n    def logout(self):\n        # Clear session date and generate a new session id\n        cherrypy.session.clear()\n        cherrypy.session.regenerate()\n\n\ncherrypy.tools.auth_form = CheckAuthForm()\n"], "fixing_code": ["![Rdiffweb Banner](https://gitlab.com/ikus-soft/rdiffweb/-/raw/master/doc/_static/banner.png)\n\n<p align=\"center\">\n<strong>\n<a href=\"https://www.rdiffweb.org\">website</a>\n\u2022 <a href=\"https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/\">docs</a>\n\u2022 <a href=\"https://groups.google.com/d/forum/rdiffweb\">community</a>\n\u2022 <a href=\"https://rdiffweb-demo.ikus-soft.com/\">demo</a>\n</strong>\n</p>\n\n<p align=\"center\">\n<a href=\"LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/ikus060/rdiffweb\"></a>\n<a href=\"https://gitlab.com/ikus-soft/rdiffweb/pipelines\"><img alt=\"Build\" src=\"https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Quality Gate Minarca Client\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=alert_status\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Coverage\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=coverage\"></a>\n<a href=\"https://bestpractices.coreinfrastructure.org/projects/6583\"><img src=\"https://bestpractices.coreinfrastructure.org/projects/6583/badge\"></a>\n</p>\n\n<h1 align=\"center\">\nWelcome to Rdiffweb\n</h1>\n\nRdiffweb is a web application that allows you to view repositories generated\nby [rdiff-backup](https://rdiff-backup.net/). The purpose of this\napplication is to ease the management of backups and quickly restore your data\nwith a rich and powerful web interface.\n\nRdiffweb is written in Python and is released as open source project under the \nGNU GENERAL PUBLIC LICENSE (GPL). All source code and documentation are\nCopyright Rdiffweb contributors.\n\nRdiffweb is actively developed by [IKUS Soft](https://www.ikus-soft.com/)\nsince November 2014.\n\nThe Rdiffweb source code is hosted on [Gitlab](https://gitlab.com/ikus-soft/rdiffweb)\nand mirrored to [Github](https://github.com/ikus060/rdiffweb).\n\nThe Rdiffweb website is https://rdiffweb.org/.\n\n## Features\n\nWith its rich web interface Rdiffweb provide a notable list of features:\n\n * Browse your backup\n * Restore single file or multiple files as an archived\n * Users authentication via local database and LDAP\n * Users authorization\n * Email notification when backup is not successful\n * Configurable repository encoding\n * Configurable retention period\n * Backup statistics visualization using graphs\n * SSH Keys management\n * Disk quota visualization\n * File and folder deletion\n\n## Demo\n\nIf you quickly want to check how Rdiffweb is behaving, you may try our demo server hosted on:\n\n[https://rdiffweb-demo.ikus-soft.com/](https://rdiffweb-demo.ikus-soft.com/)\n\nUse the following credential to login:\n\n * Username: admin\n * Password: admin123\n\n## Installation & Docker usage\n\nFor detailed installation steps, read the [Installation documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/installation.html).\n\n## Current Build Status\n\n[![Build Status](https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg)](https://gitlab.com/ikus-soft/rdiffweb/pipelines)\n\n## Download\n\nYou should read the [Documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/index.html) to properly install Rdiffweb in your environment.\n\n**Docker**\n\n    docker pull ikus060/rdiffweb\n    \n**Debian**\n\n    curl -L https://www.ikus-soft.com/archive/rdiffweb/public.key | apt-key add - \n    echo \"deb https://nexus.ikus-soft.com/repository/apt-release-bullseye/ bullseye main\" > /etc/apt/sources.list.d/rdiffweb.list\n    apt update\n    apt install rdiffweb\n\n**Pypi**\n\n    pip install rdiffweb\n\n## Support\n\n### Mailing list\n\nRdiffweb users should use the [Rdiffweb mailing list](https://groups.google.com/forum/#!forum/rdiffweb).\n\n### Bug Reports\n\nBug reports should be reported on the Rdiffweb Gitlab at https://gitlab.com/ikus-soft/rdiffweb/-/issues\n\n### Professional support\n\nProfessional support for Rdiffweb is available by contacting [IKUS Soft](https://www.ikus-soft.com/en/support/#form).\n\n# Changelog\n\n## Next Release - 2.5.0\n\nThis next release focus on two-factor-authentication as a measure to increase security of user's account.\n\n* Store User's session information into database\n* Update ldap plugin to load additional attributes from LDAP server\n* Improve `/status` page error handling when `session_statistics` cannot be read\n* Add support for Ubuntu Jammy\n* Upgrade from Bootstrap v3 to v4 #204\n* Replace Fontello by Font-Awesome v4\n* Use CSS variables `var()` to customize themes\n* Remove usage of Jquery.validate\n* Replace custom timsort by jquery DataTables #205\n* Add Active Session managements #203\n  * Active session should be visible in user's profiles\n  * Active session may be revoked by user\n  * Active session should be visible in administration view\n  * Action session may be revoke by administrator\n  * Show number of active users within the last 24 hours in dashboard\n* Handle migration of older Rdiffweb database by adding the missing `repos.Encoding`, `repos.keepdays` and `users.role` columns #185\n* Replace deprecated references of `disutils.spawn.find_executable()` by `shutil.which()` #208\n* Add two-factor authentication with email verification #201\n* Generate a new session on login and 2FA #220\n* Enforce permission on /etc/rdiffweb configuration folder\n* Enforce validation on fullname, username and email\n* Limit incorrect attempts to change the user's password to prevent brute force attacks #225 [CVE-2022-3273](https://nvd.nist.gov/vuln/detail/CVE-2022-3273)\n* Enforce password policy new password cannot be set as new password [CVE-2022-3376](https://nvd.nist.gov/vuln/detail/CVE-2022-3376)\n* Enforce better rate limit on login, mfa, password change and API [CVE-2022-3439](https://nvd.nist.gov/vuln/detail/CVE-2022-3439) [CVE-2022-3456](https://nvd.nist.gov/vuln/detail/CVE-2022-3456)\n* Enforce 'Origin' validation [CVE-2022-3457](https://nvd.nist.gov/vuln/detail/CVE-2022-3457)\n* Define idle and absolute session timeout with agressive default to protect usage on public computer [CVE-2022-3327](https://nvd.nist.gov/vuln/detail/CVE-2022-3327)\n\nBreaking changes:\n\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n* `session-dir` is deprecated and should be replace by `rate-limit-dir`. User's session are stored in database.\n* previous `.css` customization are not barkward compatible\n\n## 2.4.10 (2022-10-03)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate path traversal vulnerability [CVE-2022-3389](https://nvd.nist.gov/vuln/detail/CVE-2022-3389)\n\n## 2.4.9 (2022-09-28)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add `Cache-Control` and other security headers [CVE-2022-3292](https://nvd.nist.gov/vuln/detail/CVE-2022-3292)\n* Enforce password policy using `password-score` based on [zxcvbn](https://github.com/dropbox/zxcvbn) [CVE-2022-3326](https://nvd.nist.gov/vuln/detail/CVE-2022-3326)\n\n## 2.4.8 (2022-09-26)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Clean-up invalid path on error page\n* Limit username field length [CVE-2022-3290](https://nvd.nist.gov/vuln/detail/CVE-2022-3290)\n* Limit user's email field length [CVE-2022-3272](https://nvd.nist.gov/vuln/detail/CVE-2022-3272)\n* Limit user's root directory field length [CVE-2022-3295](https://nvd.nist.gov/vuln/detail/CVE-2022-3295)\n* Limit SSH Key title field length [CVE-2022-3298](https://nvd.nist.gov/vuln/detail/CVE-2022-3298)\n\n## 2.4.7 (2002-09-21)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Generate a new session on login and 2FA #220 [CVE-2022-3269](https://nvd.nist.gov/vuln/detail/CVE-2022-3269)\n* Mitigate CSRF on user's settings #221 [CVE-2022-3274](https://nvd.nist.gov/vuln/detail/CVE-2022-3274)\n\n## 2.4.6 (2022-09-20)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Support MarkupSafe<3 for Debian bookworm\n* Mitigate CSRF on user's notification settings #216 [CVE-2022-3233](https://nvd.nist.gov/vuln/detail/CVE-2022-3233)\n* Mitigate CSRF on repository settings #217 [CVE-2022-3267](https://nvd.nist.gov/vuln/detail/CVE-2022-3267)\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session on HTTP Error #218 [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174)\n\n## 2.4.5 (2002-09-16)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF on repository deletion and user deletion [CVE-2022-3232](https://nvd.nist.gov/vuln/detail/CVE-2022-3232) #214 #215\n\n## 2.4.4 (2002-09-15)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use `X-Real-IP` to identify client IP address to mitigate Brute-Force attack #213\n\n## 2.4.3 (2022-09-14)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Mitigate CSRF in profile's SSH Keys [CVE-2022-3221](https://nvd.nist.gov/vuln/detail/CVE-2022-3221) #212\n\n## 2.4.2 (2022-09-12)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session. [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174) #209\n* Avoid leakage of the stack trace in the default error page. [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3175) #210\n* Enforce minimum and maximum password length [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3179) #211\n\n## 2.4.1 (2022-09-08)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add Clickjacking Defense [CVE-2022-3167](https://nvd.nist.gov/vuln/detail/CVE-2022-3167)\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n\n## 2.4.0 (2022-06-21)\n\nThis new release brings a lot of improvement since the last version, multiple bug fixes\nto make the application stable. A couple of new features to improve the overall\nusability and a new security feature to block a brute force attack.\n\n* Add RateLimit to login page and API to mitigate robots attacks #167\n* Send email notification only if `email-sender` option is defined to avoid raising exception in logs #176\n* Support file restore cancellation without leaving `rdiffweb-restore` process in `<defunct>` state #174\n* Replace `python-ldap` by `ldap3` a pure python implementation to avoid dependencies on `sasl` and `ldap` binaries #186\n* Reffactor core module to allow better extendability and reusability #183\n* Add support for Debian Bookworm #180\n* Add support for Ubuntu Impish #175\n* Add rdiff-backup version to administration view\n* Run unit test during Debian build package\n* Refresh repository list automatically when required #188 #189\n* Fix error 500 displayed in status page #191\n* Improve repository browsing speed by minimizing the number of I/O call #192\n* Publish Docker image directly to DockerHub #144\n* Add REST API to manage sshkeys\n\nBreaking changes:\n\n* Ldap Password changes is not supported anymore.\n* Ldap Check Shadow expire config is not supported anymore. It should be replace by a custom filter.\n* Drop CentOS 7 and CentOS 8 support\n\n## 2.3.9 (2022-01-05)\n\nMaintenance release to fix minor issues\n\n* Improve date parsing for `backup.log` to avoid printing exception in logs #170\n* Return HTTP error 403 for invalid symlink to avoid returning a misleading HTTP 500 Server Error #168\n* Show a user friendly error message when trying to create a new user with an existing username #169\n* Handle repository without last-backup date during the notification process to ensure notifications are sent #171\n* Replace CherryPy `storage_type` by `storage_class` to avoid warning in logs\n* Update code to avoid deprecation warning where applicable\n* Add Flake8 validation to improve code quality\n* Remove Ubuntu Groovy support\n\n## 2.3.8 (2021-12-01)\n\n* Push all artefacts to nexus server including binaries and documentation\n* Fix `Chart.js` loading on Debian bullseye #164\n* Update installation steps documentation\n* Improve LDAP authentication to lookup entire directory\n* Fix usage of `--ldap-add-user-default-userroot` to avoid error related to wrong encoding\n* Improve authentication mechanics\n* Avoid raising an HTTP error 500 when login form receive invalid payload\n* Mitigate open redirect vulnerability in login form\n\n## 2.3.7 (2021-10-21)\n\n * To avoid backward compatibility issue, revert CSRF Token validation\n * Mitigate CSRF vulnerability using cookies with `SameSite=Lax`\n * Mitigate CSRF vulnerability by validating the `Origin` header when a form is submited\n * Improve usage of WTForm for all form validation\n * Update installation stepd for debian #162\n * Build Ubuntu packages and publish them to our APT repo\n\n## 2.3.6 (2021-10-20)\n\n * Broken build\n\n## 2.3.5 (2021-10-18)\n\n * Mitigate CSRF vulnerability to user, ssh and repo management with CSRF Token\n\n## 2.3.4 (2021-09-20)\n\n * Skip email notification if `email-host` configuration is not provided #157\n * Skip email notification when the new attribute value has the same value #159\n * USE LDAP `mail` attribute when creating new user from LDAP directory #156\n\n## 2.3.3 (2021-09-10)\n\n * Provide a new theme `blue` to match IKUS Soft colors #158\n\n## 2.3.2 (2021-09-07)\n\n * Automatically update user's repository list based on user's home directory\n\n## 2.3.1 (2021-07-14)\n\n * Update default `session-dir` location to `/var/lib/rdiffweb/session` to avoid using `/var/run` #148\n\n## 2.3.0 (2021-07-06)\n\n * Improve timezone handling to display date with local timezone using javascript #143\n * Improve charts by replacing d3js by chartkick #122\n * Replace the status view by something meaningful with chartkick #122\n * Provide Docker image with Rdiffweb `docker pull ikus060/rdiffweb` #55\n * Fix file and folder sorting #143\n\n## 2.2.0 (2021-05-11)\n \n * Debian package:\n   * Add rdiff-backup as dependencies to comply with Debian packaging rules\n   * Multiple other fixed to control files\n   * Use debhelper-compat (= 13)\n   * Use debhelper-compat (= 13)\n   * Run test during packaging\n   * Create default folder `/var/run/rdiffweb/sessions` to store user session\n * Use ConfigArgPare for configuration to support configuration file, environment variables and arguments to configure rdiffweb #114\n * Fix cache in localization module\n * Add `ldap-add-default-role` and `ldap-add-default-userroot` option to define default value for role and user root when creating user from LDAP #125\n * Support PostgreSQL database by replacing our storage layer by SQLAlchemy #126\n * Fix to retrieve user quota only for valid user_root #135\n * Add option `disable-ssh-keys` to disable SSH Key management\n * Use absolute URL everywhere\n * Add support for `X-Forwarded-For`, `X-Forwarded-proto` and other reverse proxy header when generating absolute URL\n * Drop Debian Stretch support\n * Implement a new background scheduler using apscheduler #82\n * Use background job to send email notification to avoid blocking web page loading #47\n * Use background job to delete repository to avoid blocking web page loading #48\n * Allow deleting a specific file or folder from the history using `rdiff-backup-delete` #128\n * Improve support for `session-dir` #131\n * Add option `admin-password` to define administrator password for better security\n * Improve performance of repository browsing \n * Add a new view to display logs of a specific repository\n * Allow downloading the log\n * Define a default limit to graph statistics to make it display faster\n * Fix `get-quota-cmd` option to properly return a value\n\n## 2.1.0 (2021-01-15)\n\n* Debian package: Remove dh-systemd from Debian build dependencies (https://bugs.debian.org/871312we)\n* Improve Quota management:\n  * `QuotaSetCmd`, `QuotaGetCmd` and `QuotaUsedCmd` options could be used to customize how to set the quota for your environment.\n  * Display user's quota in User View\n  * Display user's quota in Admin View\n  * Allow admin to update user quota from Admin View when `QuotaSetCmd` is defined.\n  * Allow admin to define user quota using human readable value (e.g.: GiB, TiB, etc.)\n  * Improve logging around quota management\n* Improve robustness when service is starting\n* Improve robustness when repository has wrong permission defined (e.g.: when some files not readable)\n* Add user id in Admin view\n* Replace `UserObject(1)` by the actual username in log file to improve debugging\n\n## 2.0.0 (2020-12-04)\n\n* Re-implement logic to update repositories views to remove duplicates and avoid nesting repo. #107\n* Handle elapsed time of days in the graph. Thanks [Nathaniel van Diepen](https://github.com/Eeems) contributions.\n* Rebrand all link to ikus-soft.com\n* Update documentation to install rdiffweb\n* Remove obsolete minify dependency\n* Drop support for python2\n* Provide null translation if translation catalogues are not found\n* Pass a LANG environment variable to rdiff-backup restore process to fix encoding issue #112\n* Remove obsolete python shebang\n* Remove execution bit (+x) on python modules\n* Provide `--help` and `--version` on `rdiffweb` executable\n* Improve cherrypy version detection\n* Do not update translation files (.mo) during build\n\n## 1.5.0 (2020-06-24)\n\nThis minor release introduce official support of rdiffweb on Debian Bullseye. It also includes some usability improvements.\n\n * Change formatting of Last Backup date for \"Updated 3 weeks ago\" to ease the readability\n * Add support for Debian Bullseye\n * Add support for Python 3.8 (#104)\n * Add warning in the users list view when a root directory is invalid (#30)\n * Add options to control search depthness (#1)\n * Print a warning in the log when the \"DefaultTheme\" value is not valid (#90)\n\n## 1.4.0 (2020-05-20)\n\nThanks to our sponsor, this release introduce a feature to have better control over the user's permission by defining 3 different levels of privilege: Admin, Maintainer and User. This addition allows you to have better control on what your users can or can't do.\n\n * Fix single repository discovery when a user's home is a rdiff-backup repository\n * [SPONSORED] Add a new setting at the user level to define the user's role. Admin,\n   Maintainer and User. Admin are allowed to do everything. Maintainer are\n   allow to browse and delete repo. Users are only allowed to browse. #94\n * Add \"Powered by\" in the web interface footer #91\n * Display a nice error message when trying to delete admin user #93\n * Introduce usage of wtforms and flash in admin users for better form validation. #96 #97\n * Update French translation\n\n## 1.3.2 (2020-04-23)\n\nThis minor releases fixed issues found while testing release 1.3.0.\n\n * Fix lookup of executable rdiff-backup and rdiffweb-restore to search in current virtualenv first\n * Fix repository view when multiple repo path are conflicting\n * Fix logging of rdiffweb-restore subprocess\n\n## 1.3.1 (2020-04-10)\n\nThis minor release enforces security of the password stored in rdiffweb database to make use of a better encryption using SSHA.\nOnly new passwords will make use of the SSHA scheme.\n\n * Enforce password encryption by using SSHA scheme #88\n\n## 1.3.0 (2020-04-07)\n\nThis release focuses on improving the restore of big archives. The download should be much faster to start. Major enhancement was made to offload the processing outside the web server. And all of this is still compatible with rdiff-backup v1.2.8 and the latest v2.0.0.\n\n * Restore file and folder in a subprocess to make the download start faster\n * Fix encoding of archive on Python3.6 (CentOS 7) by using PAX format\n * Add support to restore files and folders using rdiff-backup2\n * Remove obsolete dependencies `pysqlite2`\n * Fix issue creating duplicate entries of repository in the database\n\n## 1.2.2 (2020-03-05)\n\nThis release provides little improvement to the v1.2.x including official support of rdiff-backup v2.0.0.\n\n * Enhance the repository to invite users to refresh the repository when the view is empty.\n * Support rdiff-backup v2.0.0\n * Deprecate support for cherrypy 4, 5, 6 and 7\n * Improve loading of repository data (cache status and entries)\n * Restore compatibility with SQLite 3.7 (CentOS7)\n\nKnown issues:\n\n * Filename encoding in tar.gz and zip file might not be accurate if you are running Python 3.6 (CentOS7)\n\n\n## 1.2.1 (2020-02-08)\n\nLittle bug fix following the previous release\n\n * Fix 404 error when trying to access other users repo as admin\n * Fix logging format for cherrypy logs to matches rdiffweb format\n * Add log rotation by default\n\n## 1.2.0 (2020-01-30)\n\nThis release focus on improving the database layers for better extendability to add more type of data and to support more databases backend like postgresql in the near future.\n\n * Add explicit testing for Debian Stretch & Buster\n * Change the persistence layers\n   * Minimize number of SQL queries\n   * Add object lazy loading\n   * Add object data caching\n * Fix bugs with SQLite <= 3.16 (Debian Stretch)\n\n## 1.1.0 (2019-10-31)\n\nThis release focus on improving the admin area and building the fundation for repository access control list (ACL).\n\n * Update documentation from PDSL web site\n * Improve the navigation bar layout\n * Update the login page headline\n * Update jinja2 version to allow 2.10.x\n * Show server log in admin area\n * Reduce code smell\n * Add System information in admin area\n * Validate credential using local database before LDAP\n * Reffactoring templates macros\n * Enhance user's view search bar\n * Change repository URL to username/repopath\n * Add System information in admin area\n * Improve testcases\n * Clean-up obsolete code\n * Fix issue with captital case encoding name\n * Fix compilation of less files\n * Fix google font import\n\n## 1.0.3 (2019-10-04)\n * Removing the auto update repos\n\n## 1.0.2 (2019-10-01)\n * Create \"admin\" user if missing\n * Update french translation\n\n## 1.0.1 (2019-09-22)\n * Update installation documentation \n * Fix removal of SSH Key\n * Return meaningful error to the user trying to add an existing SSH key\n\n## 1.0.0 (2019-09-11)\n * Make repository removal more robust\n * Improve performance of librdiff\n * Add new RESTful api\n * Return the right HTTP 401 or 402 error code for authentication\n * Fix bug introduce by upgrade to Jinja2 + python3\n * Store ssh keys in database and disk\n * Add support for theme (default, orange)\n * Remove deprecated profiling code\n * Add disk usage support / quota\n * Add support of cherrypy v18\n * Drop support of cherrypy v3.2.2\n * Add wsgi entry point\n * Replace the plugins architecture to ease implementation\n * Numerous bug fixes\n\n## 0.10.9 (2019-05-22)\n * Better error handling when error.log file are not valid gzip file\n\n", "# Configuration\n\nThere are several entry points available for administrator to manage the configuration of Rdiffweb. This section aims to outline those configurations and explain each option available and what it does.\n\nSince version 2.2, rdiffweb configuration is more flexible. You may configure every option using the configuration file, command line argument or environment variable.\n\nTake note that configuration options are distinct from the runtime setting, available from the web interface. The configuration options here usually meant to be static and set before starting the server. You may get the list of configuration options by calling `rdiffweb --help`.\n\nNote: If an option is specified in more than one place, the command line arguments override the environment variable, environment variables override config files, and config files override default value.\n\n## Configuration file\n\nTo use configuration files, you may call rdiffweb with `-f` or `--config` to define the configuration file location. When not defined, Rdiffweb loads all configuration files from these locations by default:\n\n* /etc/rdiffweb/rdw.conf\n* /etc/rdiffweb/rdw.conf.d/*.conf\n\nConfiguration file syntax must define a key and a value. The key is case-sensitive, and you may use underscore (_) or dash (-) seemlessly. All lines beginning with '#' are comments and are intended for you to read. All other lines are configuration for rdiffweb.\n\nE.g.:\n\n    # This is a comment\n    server_port=8081\n    log_level=DEBUG\n\n## Environment variables\n\nIn addition to configuration files, you may pass environment variables. The options name must be uppercase and prefixed with `RDIFFWEB_`. As an example, if you want to change the port used to listen for HTTP request for 8081, you must define `server-port` option as follow.\n\n    RDIFFWEB_SERVER_PORT=8081\n\n## Command line arguments\n\nWhen launching `rdiffweb` executable, you may pass as many arguments as you want on the command line. The options must be prefixed with double dash (`--`) and you must single dash (-) to separate words.\n\nE.g. `--server-port 8081` or `--server-port=8081` are valid\n\n\n## Configure listening port and interface\n\nFor security reasons, Rdiffweb listen on port `8080` for HTTP request on loopback interface (127.0.0.1) by default. Consider configuring a reverse proxy like Nginx or Apache2 if you want to make Rdiffweb listen on port 80 for HTTP and port 443 for HTTPS request.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| server-host | Define the IP address to listen to. Use `0.0.0.0` to listen on all interfaces. Use `127.0.0.1` to listen on loopback interface. | 0.0.0.0 |\n| server-port | Define the port to listen for HTTP request. Default to `8080` | 9090 |\n\n## Configure administrator username & password\n\nUsing configuration file, you may setup a special administrator which cannot be\ndeleted or renamed from the web interface. You may also configure a specific\npassword for this user that cannot be updated from the web interface either.\n\nIn addition, you may also create other administrator users to manage Rdiffweb.\n\n| Parameter | Description | Example |\n| --- | --- | --- | \n| admin-user | Define the name of the default admin user to be created | admin |\n| admin-password | administrator encrypted password as SSHA. Read online documentation to know more about how to encrypt your password into SSHA or use http://projects.marsching.org/weave4j/util/genpassword.php When defined, administrator password cannot be updated using the web interface. When undefined, default administrator password is `admin123` and it can be updated using the web interface. | modification |\n\n\n## Configure logging\n\nRdiffweb can be configured to send logs to specific location. By default, logs are sent to the console (stdout or stderr). If you have installed Rdiffweb on a server, you should consider enabling the logging to help you keep track of the activities or to help you debug problem.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| log-level | Define the log level. ERROR, WARN, INFO, DEBUG | DEBUG |\n| log-file | Define the location of the log file. | /var/log/rdiffweb/server.log |\n| log-access-file | Define the location of the access log file. | /var/log/rdiffweb/access.log |\n\n### Enable Debugging\n\nA specific option is also available if you want to enable the debugging log. We do not recommend to enable this option in production as it may leak information to the user whenever an exception is raised.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| debug | enable rdiffweb debug mode - change the log level to DEBUG, print exception stack trace to the web interface and show SQL query in logs. | |\n| environment | Define the type of environment: `development` or `production`. This is used to limit the information shown to the user when an error occurs. Default: production | development |\n\n## Configure database\n\nRdiffweb use SQL database to store user preferences. The embedded SQLite database is well suited for small deployment (1-100 users). If you intended to have a large deployment, you must consider using a PostgreSQL database instead.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| database-uri | Location of the database used for persistence. SQLite and PostgreSQL database are supported officially. To use a SQLite database, you may define the location using a file path or a URI. e.g.: `/srv/rdiffweb/file.db` or `sqlite:///srv/rdiffweb/file.db`. To use PostgreSQL server, you must provide a URI similar to `postgresql://user:pass@10.255.1.34/dbname` and you must install required dependencies. By default, Rdiffweb uses a SQLite embedded database located at `/etc/rdiffweb/rdw.db`. | postgresql://user:pass@10.255.1.34/dbname | \n\n\n### SQLite\n\nTo use embedded SQLite database, pass the option `database-uri` with a URI similar to `sqlite:///etc/rdiffweb/rdw.db` or `/etc/rdiffweb/rdw.db`.\n\n### PostgreSQL\n\nTo use an external PostgreSQL database, pass the option `database-uri` with a URI similar to `postgresql://user:pass@10.255.1.34/dbname`.\n\nYou may need to install additional dependencies to connect to PostgreSQL. Step to install dependencies might differ according to the way you installed Rdiffweb.\n\n**Using Debian repository:**\n\n    apt install python3-psycopg2\n\n**Using Pypi repository:**\n\n    pip install psycopg2-binary\n\n## Configure LDAP Authentication\n\nRdiffweb may integrates with LDAP server to support user authentication.\n\nThis integration works with most LDAP-compliant servers, including:\n\n* Microsoft Active Directory\n* Apple Open Directory\n* Open LDAP\n* 389 Server\n\n### LDAP options\n\n| Option | Description | Example |\n| --- | --- | --- |\n| ldap-add-missing-user | `True` to create users from LDAP when the credential is valid. | True |\n| ldap-add-user-default-role | Role to be used when creating a new user from LDAP. Default: user | maintainer |\n| ldap-add-user-default-userroot | Userroot to be used when creating a new user from LDAP. Default: empty | /backups/{cn[0]} |\n| ldap-base-dn | The DN of the branch of the directory where all searches should start from. | dc=my,dc=domain | \n| ldap-bind-dn | An optional DN used to bind to the server when searching for entries. If not provided, will use an anonymous bind. | cn=manager,dc=my,dc=domain |\n| ldap-bind-password | A bind password to use in conjunction with `LdapBindDn`. Note that the bind password is probably sensitive data,and should be properly protected. You should only use the LdapBindDn and LdapBindPassword if you absolutely need them to search the directory. | mypassword |\n| ldap-encoding | encoding used by your LDAP server. Default to utf-8 | cp1252 |\n| ldap-filter | A valid LDAP search filter. If not provided, defaults to `(objectClass=*)`, which will search for all objects in the tree. | (objectClass=*) | \n| ldap-group-attribute-is-dn | True if the content of the attribute ldap-group-attribute is a DN. | true |\n| ldap-group-attribute | name of the attribute defining the groups of which the user is a member. Should be used with ldap-required-group and ldap-group-attribute-is-dn. | member |\n| ldap-network-timeout | Optional timeout value. Default to 10 sec. | 10 |\n| ldap-protocol-version | Version of LDAP in use either 2 or 3. Default to 3. | 3 |\n| ldap-required-group | name of the group of which the user must be a member to access rdiffweb. Should be used with ldap-group-attribute and ldap-group-attribute-is-dn. | rdiffweb |\n| ldap-scope | The scope of the search. Can be either `base`, `onelevel` or `subtree`. Default to `subtree`. | onelevel |\n| ldap-timeout | Optional timeout value. Default to 300 sec. | 300 |\n| ldap-tls | `true` to enable TLS. Default to `false` | false |\n| ldap-uri | URIs containing only the schema, the host, and the port. | ldap://localhost:389 | \n| ldap-username-attribute | The attribute to search username. If no attributes are provided, the default is to use `uid`. It's a good idea to choose an attribute that will be unique across all entries in the subtree you will be using. | cn | \n| ldap-version | version of LDAP in use either 2 or 3. Default to 3.| 3 |\n\n### Automatically create user in Rdiffweb\n\nIf you have a large number of users in your LDAP, you may want to configure Rdiffweb to automatically create user in database that has valid LDAP credentials. The user will get created on first valid login.\n\nYou may optionally pass other options like `ldap-add-user-default-role` and `ldap-add-user-default-userroot` to automatically define the default user role and default user root for any new user created from LDAP.\n\nHere a working configuration:\n\n    ldap-add-missing-user=true\n    ldap-add-user-default-role=user\n    ldap-add-user-default-userroot=/backups/{cn[0]}\n\n### Restrict access to a specific LDAP group\n\nIf you are making use of LDAP credentials validation, you will usually want to limit the access to member of a specific LDAP group. Rdiffweb support such scenario with the use of `ldap-required-group`, `ldap-group-attribute` and `ldap-group-attribute-is-dn`.\n\nHere is an example of how you may limit Rdiffweb access to members of *Admin_Backup* group. This configuration is known to work with LDAP PosixAccount and PosixGroup.\n\n    ldap-required-group=cn=Admin_Backup,ou=Groups,dc=nodomain\n    ldap-group-attribute=memberUid\n    ldap-group-attribute-is-dn=false\n\n## Configure User Session\n\nA user session is a sequence of request and response transactions associated with a single user. The user session is the means to track each authenticated user. \n\n| Option | Description | Example |\n| --- | --- | --- |\n| session-idle-timeout | This timeout defines the amount of time a session will remain active in case there is no activity in the session. User Session will be revoke after this period of inactivity, unless the user selected \"remember me\". Default 10 minutes. | 5 |\n| session-absolute-timeout | This timeout defines the maximum amount of time a session can be active. After this period, user is forced to (re)authenticate, unless the user selected \"remember me\". Default 20 minutes. | 30 |\n| session-persistent-timeout | This timeout defines the maximum amount of time to remember and trust a user device. This timeout is used when user select \"remember me\". Default 30 days | 43200 |\n\n## Configure email notifications\n\nSince Rdiffweb v0.9, you may configure Rdiffweb to send an email notification to the users when their backups did not complete successfully for a period of time.\nWhen enabled, Rdiffweb will also send email notification for security reason when user's password is changed.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| email-encryption | Type of encryption to be used when establishing communication with SMTP server. Available values: `none`, `ssl` and `starttls` | starttls |\n| email-host | SMTP server used to send email in the form `host`:`port`. If the port is not provided, default to standard port 25 or 465 is used. | smtp.gmail.com:587 | \n| email-sender | email addres used for the `From:` field when sending email. | Rdiffweb <example@gmail.com> |\n| email-notification-time | time when the email notification should be sent for inactive backups. | 22:00 |\n| email-username | username used for authentication with the SMTP server. | example@gmail.com |\n| email-password | password used for authentication with the SMTP server. | CHANGEME |\n| email-send-changed-notification | True to send notification when sensitive information get change in user profile. Default: false | True |\n\nTo configure the notification, you need a valid SMTP server. In this example, you are making use of a Gmail account to send emails.\n\n    email-host=smtp.gmail.com:587\n    email-encryption=starttls\n    email-sender=example@gmail.com\n    email-username=example@gmail.com\n    email-password=CHANGEME\n    email-send-changed-notification=true\n\nNote: notifications are not sent if the user doesn't have an email configured in his profile.\n\n## Configure user quota\n\nSince v2.1, it's now possible to customize how user quota is controller for\nyour system without a custom plugin. By defining `quota-set-cmd`, `quota-get-cmd`\nand `QuotaUsedCmd` configuration options, you have all the flexibility to\nmanage the quota the way you want by providing custom command line to be executed to respectively set the quota, get the quota and get quota usage.\n\n| Option | Description | Example | \n| --- | --- | --- |\n| quota-set-cmd | Command line to set the user's quota. | Yes. If you want to allow administrators to set quota from the web interface. |\n| quota-get-cmd | Command line to get the user's quota. Should print the size in bytes to console. | No. Default behaviour gets quota using operating system statvfs that should be good if you are using setquota, getquota, etc. For ZFS and other more exotic file system, you may need to define this command. |\n| quota-used-cmd | Command line to get the quota usage. Should print the size in bytes to console. | No. |\n\nWhen Rdiffweb calls the scripts, special environment variables are available. You should make use of this variables in a custom script to get and set the disk quota.\n\n* `RDIFFWEB_USERID`: rdiffweb user id. e.g.: `34`\n* `RDIFFWEB_USERNAME`: rdiffweb username. e.g.: `patrik`\n* `RDIFFWEB_USERROOT`: user's root directory. e.g.: `/backups/patrik/`\n* `RDIFFWEB_ROLE`: user's role e.g.: `10` 1:Admin, 5:Maintainer, 10:User\n* `RDIFFWEB_QUOTA`: only available for `quota-set-cmd`. Define the new quota value in bytes. e.g.: 549755813888  (0.5 TiB)\n\nContinue reading about how to configure quotas for EXT4. We generally\nrecommend making use of project quotas with Rdiffweb to simplify the management of permission and avoid running Rdiffweb with root privileges.  The next section\npresents how to configure project quota. Keep in mind it's also possible to\nconfigure quota using either user's quota or project quota.\n\n### Configure user quota for EXT4\n\nThis section is not a full documentation about how to configure ext4 project quota, \nbut provide enough guidance to help you.\n\n1. Enabled project quota feature  \n   You must enable project quota feature for the EXT4 partition where your backup resides using:  \n   `tune2fs -O project -Q prjquota /dev/sdaX`  \n   The file system must be unmounted to change this setting and may require you\n   to boot your system with a live-cd if your backups reside on root file system (`/`).  \n   Also, add `prjquota` options to your mount point configuration `/etc/fstab`.\n   Something like `/dev/sdaX   /   ext4    errors=remount-ro,prjquota     0    1`\n2. Turn on the project quota after reboot  \n   `quotaon -Pv -F vfsv1 /`\n3. Check if the quota is working  \n   `repquota -Ps /`\n4. Add `+P` attribute on directories to enabled project quotas  \n   `chattr -R +P /backups/admin`\n5. Then set the project id on directories  \n   `chattr -R -p 1 /backups/admin` where `1` is the rdiffweb user's id\n\nNext, you may configure Rdiffweb quota command line for your need. For EXT4\nproject quotas, you only need to define `quota-set-cmd` with something similar\nto the following. `quota-get-cmd` and `quota-used-cmd` should not be required\nwith EXT4 quota management.\n\n    quota-set-cmd=setquota -P $RDIFFWEB_USERID $((RDIFFWEB_QUOTA / 1024)) $((RDIFFWEB_QUOTA / 1024)) 0 0 /\n\nThis effectively, makes use of Rdiffweb user's id as project id.\n\n### Configure user quota for ZFS\n\nThis section is not a full documentation about how to configure ZFS project quotas,\nbut provide enough guidance to help you. This documentation uses `tank/backups`\nas the dataset to store rdiffweb backups.\n\n1. Quota feature is a relatively new feature for ZFS On Linux. Check your\n   operating system to verify if your ZFS version support it. You may need\n   to upgrade your pool and dataset using:  \n\n   `zpool upgrade tank`\n   `zfs upgrade tank/backups`\n\n2. Add `+P` attribute on directories to enabled project quotas  \n   `chattr -R +P /backups/admin`\n   `chattr -R -p 1 /backups/admin`\n   OR\n   `zfs project -p 1 -rs /backups/admin`\n   Where `1` is the rdiffweb user's id\n   \nTake note, it's better to enable project quota attributes when the repositories are empty.\n\n## Configure Rate-Limit\n\nRdiffweb could be configured to rate-limit access to anonymous to avoid bruteforce\nattacks and authenticated users to avoid Denial Of Service attack.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| rate-limit | maximum number of requests per hour that can be made on sensitive endpoints. When this limit is reached, an HTTP 429 message is returned to the user or the user is logged out. This security measure is used to limit brute force attacks on the login page and the RESTful API. | 20 |\n| rate-limit-dir | location where to store rate-limit information. When undefined, data is kept in memory. | /var/lib/rdiffweb/session |\n\n## Custom user's password length limits\n\nBy default, Rdiffweb supports passwords with the following lengths:\n\n* Minimum: 8 characters\n* Maximum: 128 characters\n\nChanging the minimum or maximum length does not affect existing users' passwords. Existing users are not prompted to reset their passwords to meet the new limits. The new limit only applies when an existing user changes their password.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| password-min-length | Minimum length of the user's password | 8 |\n| password-max-length | Maximum length of the user's password | 128 |\n| password-score      | Minimum zxcvbn's score for password. Value from 0 to 4. Default value 1. | 4 |\n\nYou may want to read more about [zxcvbn](https://github.com/dropbox/zxcvbn) score value.\n\n## Configure Rdiffweb appearance\n\nA number of options are available to customize the appearance of Rdiffweb to your\nneed. Most likely, you will want to make it closer to your business brand.\n\n| Option | Description | Example | \n| --- | --- | --- |\n| header-name | Define the application name displayed in the title bar and header menu. | My Backup |\n| default-theme | Define the theme. Either: `default`, `blue` or `orange`. Define the css file to be loaded in the web interface. You may manually edit a CSS file to customize it. The location is similar to `/usr/lib/python3/dist-packages/rdiffweb/static/`. | orange |\n| welcome-msg | Replace the headline displayed in the login page. It may contains HTML. | Custom message displayed on login page.|\n| favicon | Define the FavIcon to be displayed in the browser title | /etc/rdiffweb/my-fav.ico |\n\n## Configure SSH Key management\n\nRdiffweb allows users to manage their SSH Keys by adding and removing them using the web interface. This feature may be disabled with `disable-ssh-keys`.\n\nWhen this feature is enabled, adding or removing an SSH Key from the web interface.\nUpdates, the `${user_root}/.ssh/authorized_keys` file if the file already exists.\n\n## Configure repositories clean-up job\n\nUsing the web interface, users may configure a retention period on individual repository to keep only a fixed number of days in backup. This is useful to control the growth of a repository disk usage.\n\nTo support this feature, Rdiffweb schedule a job to clean-up the repositories in backup. This job is ran once a day. You may change the default time when this schedule job is running by defining another value for option `remove-older-time`.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| remove-older-time | Time when to execute the remove older task | 22:00 | \n\n## Configure temporary folder location\n\nTo restore file or folder, Rdiffweb needs a temporary directory to create the file to be downloaded. By default, Rdiffweb will use your default temporary folder defined using environment variable `TMPDIR`, `TEMP` or `TMP`. If none of these environment variables are defined, Rdiffweb fallback to use `/tmp`.\n\nIf you want to enforce a different location for the temporary directory, you may define the option `tempdir` with a different value. Take note, this directory must be created with the right ownership and permissions to allow Rdiffweb to use it. Also make sure enough disk space is available. Usually, a 32GiB is enough.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| tempdir | alternate temporary folder to be used when restoring files. Might be useful if the default location has limited disk space| /tmp/rdiffweb/ |\n\n\n## Configure repository lookup depthness.\n\nWhen defining the UserRoot value for a user, Rdiffweb will scan the content of this directory recursively to lookups for rdiff-backup repositories. For performance reason, Rdiffweb limits the recursiveness to 3 subdirectories. This default value should suit most use cases. If you have a particular use case, it's possible to allow Rdiffweb to scan for more subdirectories by defining a greater value for the option `max-depth`. Make sure to pick a reasonable value for your use case as it may impact the performance.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| --max-depth | Define the maximum folder depthness to search into the user's root directory to find repositories. This is commonly used if your repositories are organised with multiple sub-folders. Default: 3 | No | 10 |\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on Dec 26, 2015\n\n@author: Patrik Dufresne\n\"\"\"\nimport os\n\nfrom parameterized import parameterized, parameterized_class\n\nimport rdiffweb.test\nfrom rdiffweb.core.model import DbSession, SessionObject, UserObject\nfrom rdiffweb.tools.auth_form import LOGIN_TIME, SESSION_KEY\n\n\nclass LoginPageTest(rdiffweb.test.WebCase):\n    def test_getpage(self):\n        # When making a query to a page while unauthenticated\n        self.getPage('/')\n        # Then user is redirected to login page\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/login/')\n        # Then a session object is created without a username\n        self.assertEqual(1, SessionObject.query.filter(SessionObject.id == self.session_id).count())\n        SessionObject.query.filter(SessionObject.id == self.session_id).first()\n        session = DbSession(id=self.session_id)\n        session.load()\n        self.assertIsNone(session.get(SESSION_KEY))\n\n    def test_login_success(self):\n        # Given an anonymous user\n        self.getPage('/')\n        prev_session_id = self.session_id\n        # Then user is redirected to /login page\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/login/')\n        # When authenticating with valid credentials.\n        self.getPage('/login/', method='POST', body={'login': self.USERNAME, 'password': self.PASSWORD})\n        # Then a new session_id is generated\n        self.assertNotEqual(prev_session_id, self.session_id)\n        # Then user is redirected\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/')\n        # Then a session object is created with a username\n        self.assertEqual(1, SessionObject.query.filter(SessionObject.id == self.session_id).count())\n        SessionObject.query.filter(SessionObject.id == self.session_id).first()\n        session = DbSession(id=self.session_id)\n        session.load()\n        self.assertEqual('admin', session.get(SESSION_KEY))\n        self.assertIsNotNone(session.get(LOGIN_TIME))\n\n    def test_cookie_http_only(self):\n        # Given a request made to rdiffweb\n        # When receiving the response\n        self.getPage('/')\n        # Then the header contains Set-Cookie with HttpOnly\n        cookie = self.assertHeader('Set-Cookie')\n        self.assertIn('HttpOnly', cookie)\n\n    def test_login_with_plaintext(self):\n        \"\"\"\n        Requesting plain text without being authenticated should show the login form.\n        \"\"\"\n        # When querying root page without authentication\n        self.getPage('/', headers=[(\"Accept\", \"text/plain\")])\n        # Then user is redirected to /login page\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/login/')\n\n    @parameterized.expand(\n        [\n            ('with_root', '/'),\n            ('with_browse_url', '/browse/admin/testcases/Revisions/'),\n            ('with_encoded_url', '/browse/admin/testcases/DIR%EF%BF%BD/'),\n            (\n                'with_broken_encoding',\n                '/restore/admin/testcases/Fichier%20avec%20non%20asci%20char%20%C9velyne%20M%E8re.txt/?date=1415221507',\n            ),\n            ('with_query_string', '/restore/admin/testcases/Revisions?date=1477434528'),\n            ('with_multiple_query_string', '/restore/admin/testcases/Revisions?date=1477434528&kind=tar.gz'),\n            ('with_admin', '/admin/'),\n        ]\n    )\n    def test_login(self, unused, original_url):\n        # Given an unauthenticated user\n        # Query the page without login-in\n        self.getPage(original_url)\n        # Then user is redirected to the login page\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/login/')\n        # When authentication is successful\n        self.getPage('/login/', method='POST', body={'login': self.USERNAME, 'password': self.PASSWORD})\n        # Then user is redirected to original URL\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + original_url)\n        # Then cookie is not persistent\n        self.assertNotIn('expires', self.cookies[0][1])\n        self.assertNotIn('Max-Age', self.cookies[0][1])\n        # When requesting the original page\n        self.getPage(original_url)\n        # Then page return without error\n        self.assertStatus(200)\n\n    def test_getpage_with_redirect_post(self):\n        \"\"\"\n        Check encoding of redirect url when send using POST method.\n        \"\"\"\n        # When posting invalid credentials\n        b = {'login': 'admin', 'password': 'invalid', 'redirect': '/browse/' + self.REPO + '/DIR%EF%BF%BD/'}\n        self.getPage('/login/', method='POST', body=b)\n        # Then page return without HTTP Error\n        self.assertStatus('200 OK')\n        # Then page display an error\n        self.assertInBody('Invalid username or password.')\n        self.assertInBody('id=\"form-login\"')\n        # Then redirect URL is ignored\n        self.assertNotInBody('/browse/' + self.REPO + '/DIR%EF%BF%BD/\"')\n\n    def test_getpage_without_username(self):\n        \"\"\"\n        Check if error is raised when requesting /login without a username.\n        \"\"\"\n        self.getPage('/login/', method='GET')\n        self.assertStatus('200 OK')\n\n    def test_getpage_with_username_too_long(self):\n        b = {'login': 'admin' * 52, 'password': 'admin123'}\n        self.getPage('/login/', method='POST', body=b)\n        self.assertStatus('200 OK')\n        self.assertInBody('Username too long.')\n\n    def test_getpage_with_empty_password(self):\n        \"\"\"\n        Check if authentication is failing without a password.\n        \"\"\"\n        b = {'login': 'admin', 'password': ''}\n        self.getPage('/login/', method='POST', body=b)\n        self.assertStatus('200 OK')\n        self.assertInBody('This field is required.')\n\n    def test_getpage_with_invalid_url(self):\n        self.getPage('/login/kefuxian.mvc', method='GET')\n        self.assertStatus('303 See Other')\n\n    def test_post_with_invalid_url(self):\n        self.getPage('/login/kefuxian.mvc', method='POST')\n        self.assertStatus('303 See Other')\n\n    def test_login_twice(self):\n        # Given an authenticated user\n        self.getPage('/login/', method='POST', body={'login': self.USERNAME, 'password': self.PASSWORD})\n        self.assertStatus(303)\n        self.assertHeaderItemValue('Location', self.baseurl + \"/\")\n        self.getPage('/')\n        self.assertStatus(200)\n        self.assertInBody(self.USERNAME)\n        # Given another user\n        UserObject.add_user('otheruser', password='password')\n        # When trying to re-authenticated with login page\n        self.getPage('/login/', method='POST', body={'login': 'otheruser', 'password': 'password'})\n        # Then user is still authenticated with previous user\n        self.assertStatus(303)\n        self.assertHeaderItemValue('Location', self.baseurl + \"/\")\n        self.getPage('/')\n        self.assertStatus(200)\n        self.assertInBody(self.USERNAME)\n\n    def test_login_persistent(self):\n        # Given a user authenticated with persistent\n        self.getPage('/logout/')\n        self.assertStatus(303)\n        self.getPage(\n            '/login/', method='POST', body={'login': self.USERNAME, 'password': self.PASSWORD, 'persistent': '1'}\n        )\n        self.assertStatus(303)\n        # Then a persistent cookie is return\n        self.assertIn('expires', self.cookies[0][1])\n        self.assertIn('Max-Age', self.cookies[0][1])\n        # Then a session is created with persistent flag\n        session = DbSession(id=self.session_id)\n        session.load()\n        self.assertTrue(session['login_persistent'])\n        # Then session timeout is 30 days in future\n        self.assertAlmostEqual(session.timeout, 43200, delta=2)\n\n\nclass LoginPageWithWelcomeMsgTest(rdiffweb.test.WebCase):\n\n    default_config = {'welcomemsg': 'default message', 'welcomemsg[fr]': 'french message'}\n\n    def test_getpage_default(self):\n        \"\"\"\n        Make sure the login page can be rendered without error.\n        \"\"\"\n        self.getPage('/login/', headers=[(\"Accept-Language\", \"it\")])\n        self.assertStatus('200 OK')\n        self.assertInBody('default message')\n\n    def test_getpage_french(self):\n        \"\"\"\n        Make sure the login page can be rendered without error.\n        \"\"\"\n        self.getPage('/login/', headers=[(\"Accept-Language\", \"fr\")])\n        self.assertStatus('200 OK')\n        self.assertInBody('french message')\n\n\nclass LoginPageWithHeaderName(rdiffweb.test.WebCase):\n\n    default_config = {'header-name': 'HEADER-NAME'}\n\n    def test_getpage_default(self):\n        # Given a custom header-name\n        # When querying the loging page\n        self.getPage('/login/')\n        # Then the page display the header-name\n        self.assertStatus('200 OK')\n        self.assertInBody('HEADER-NAME')\n\n\n@parameterized_class(\n    [\n        {\"default_config\": {'rate-limit': 5}},\n        {\"default_config\": {'rate-limit': 5, 'rate-limit-dir': '/tmp'}},\n    ]\n)\nclass LoginPageRateLimitTest(rdiffweb.test.WebCase):\n    def setUp(self):\n        if os.path.isfile('/tmp/ratelimit-127.0.0.1'):\n            os.unlink('/tmp/ratelimit-127.0.0.1')\n        if os.path.isfile('/tmp/ratelimit-127.0.0.1.-login'):\n            os.unlink('/tmp/ratelimit-127.0.0.1.-login')\n        return super().setUp()\n\n    def test_login_ratelimit(self):\n        # Given an unauthenticate\n        # When requesting multiple time the login page\n        for i in range(1, 5):\n            self.getPage('/login/', method='POST', body={'login': 'invalid', 'password': 'invalid'})\n            self.assertStatus(200)\n        # Then a 429 error (too many request) is return\n        self.getPage('/login/', method='POST', body={'login': 'invalid', 'password': 'invalid'})\n        self.assertStatus(429)\n\n\nclass LoginPageRateLimitTest2(rdiffweb.test.WebCase):\n\n    default_config = {'rate-limit': 5}\n\n    def test_login_ratelimit_forwarded_for(self):\n        # Given an unauthenticate\n        # When requesting multiple time the login page with different `X-Forwarded-For`\n        for i in range(1, 5):\n            self.getPage(\n                '/login/',\n                headers=[('X-Forwarded-For', '127.0.0.%s' % i)],\n                method='POST',\n                body={'login': 'invalid', 'password': 'invalid'},\n            )\n            self.assertStatus(200)\n        # Then original IP get blocked\n        self.getPage(\n            '/login/',\n            headers=[('X-Forwarded-For', '127.0.0.%s' % i)],\n            method='POST',\n            body={'login': 'invalid', 'password': 'invalid'},\n        )\n        self.assertStatus(429)\n\n\nclass LoginPageRateLimitTest3(rdiffweb.test.WebCase):\n    default_config = {'rate-limit': 5}\n\n    def test_login_ratelimit_real_ip(self):\n        # Given an unauthenticate\n        # When requesting multiple time the login page with different `X-Real-IP`\n        for i in range(1, 5):\n            self.getPage(\n                '/login/',\n                headers=[('X-Real-IP', '127.0.0.128')],\n                method='POST',\n                body={'login': 'invalid', 'password': 'invalid'},\n            )\n            self.assertStatus(200)\n        # Then the X-Real-IP get blocked\n        self.getPage(\n            '/login/',\n            headers=[('X-Real-IP', '127.0.0.128')],\n            method='POST',\n            body={'login': 'invalid', 'password': 'invalid'},\n        )\n        self.assertStatus(429)\n\n\nclass LogoutPageTest(rdiffweb.test.WebCase):\n    def test_getpage_without_login(self):\n        # Given an unauthenticated user\n        # When Accessing logout page directly\n        self.getPage('/logout')\n        # Then user is redirect to root '/'\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/')\n\n    def test_getpage_with_login(self):\n        # Given an anonymous user\n        self.getPage('/')\n        prev_session_id = self.session_id\n        # Login\n        b = {'login': 'admin', 'password': 'admin123'}\n        self.getPage('/login/', method='POST', body=b)\n        self.assertStatus('303 See Other')\n        # Then a new session id is generated\n        self.assertNotEqual(prev_session_id, self.session_id)\n        prev_session_id = self.session_id\n        # Get content of a page.\n        self.getPage(\"/prefs/general\")\n        self.assertStatus('200 OK')\n        # When logout\n        self.getPage('/logout')\n        # Then a new session id is generated\n        self.assertNotEqual(prev_session_id, self.session_id)\n        # Then user is redirected to root page\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/')\n        # Get content of a page.\n        self.getPage(\"/prefs/general\")\n        self.assertStatus('303 See Other')\n        self.assertHeaderItemValue('Location', self.baseurl + '/login/')\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport argparse\nimport logging\nimport re\nimport sys\nfrom collections import OrderedDict\n\nimport cherrypy\nimport configargparse\nimport pkg_resources\nfrom cherrypy import Application\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n# Get rdiffweb version.\ntry:\n    VERSION = pkg_resources.get_distribution(\"rdiffweb\").version\nexcept pkg_resources.DistributionNotFound:\n    VERSION = \"DEV\"\n\n\ndef get_parser():\n    # Get global config argument parser\n    parser = configargparse.ArgumentParser(\n        prog='rdiffweb',\n        description='Web interface to browse and restore rdiff-backup repositories.',\n        default_config_files=['/etc/rdiffweb/rdw.conf', '/etc/rdiffweb/rdw.conf.d/*.conf'],\n        add_env_var_help=True,\n        auto_env_var_prefix='RDIFFWEB_',\n        config_file_parser_class=ConfigFileParser,\n        conflict_handler='resolve',\n    )\n\n    parser.add_argument(\n        '-f', '--config', is_config_file=True, metavar='FILE', help='location of Rdiffweb configuration file'\n    )\n\n    parser.add(\n        '--database-uri',\n        '--sqlitedb-file',\n        '--sqlitedbfile',\n        metavar='URI',\n        help=\"\"\"Location of the database used for persistence. SQLite and PostgreSQL\n            database are supported officially. To use a SQLite database you may\n            define the location using a file path or a URI.\n            e.g.: /srv/rdiffweb/file.db or sqlite:///srv/rdiffweb/file.db`.\n            To use PostgreSQL server you must provide\n            a URI similar to postgresql://user:pass@10.255.1.34/dbname and you\n            must install required dependencies.\n            By default, Rdiffweb uses a SQLite embedded database located at\n            /etc/rdiffweb/rdw.db.\"\"\",\n        default='/etc/rdiffweb/rdw.db',\n    )\n\n    parser.add_argument(\n        '-d',\n        '--debug',\n        action='store_true',\n        help='enable rdiffweb debug mode - change the log level to DEBUG, print exception stack trace to the web interface and show SQL query in logs',\n    )\n\n    parser.add_argument(\n        '--admin-user',\n        '--adminuser',\n        metavar='USERNAME',\n        help='administrator username. The administrator user get created on startup if the database is empty.',\n        default='admin',\n    )\n\n    parser.add_argument(\n        '--admin-password',\n        metavar='USERNAME',\n        help=\"\"\"administrator encrypted password as SSHA. Read online\n            documentation to know more about how to encrypt your password\n            into SSHA or use http://projects.marsching.org/weave4j/util/genpassword.php\n            When defined, administrator password cannot be updated using the web interface.\n            When undefined, default administrator password is `admin123` and\n            it can be updated using the web interface.\"\"\",\n    )\n\n    parser.add_argument(\n        '--default-theme',\n        '--defaulttheme',\n        help='define the default theme. Either: default, blue or orange. Define the CSS file to be loaded in the web interface. You may manually edit a CSS file to customize it. The location is similar to `/usr/local/lib/python3.9/dist-packages/rdiffweb/static/`',\n        choices=['default', 'blue', 'orange'],\n        default='default',\n    )\n\n    parser.add_argument(\n        '--environment',\n        choices=['development', 'production'],\n        help='define the type of environment: development, production. This is used to limit the information shown to the user when an error occur.',\n        default='production',\n    )\n\n    parser.add_argument(\n        '--email-encryption',\n        '--emailencryption',\n        choices=['none', 'ssl', 'starttls'],\n        help='type of encryption to be used when establishing communication with SMTP server. Default: none',\n        default='none',\n    )\n\n    parser.add_argument(\n        '--email-host',\n        '--emailhost',\n        metavar='HOST',\n        help='SMTP server used to send email in the form <host>:<port>. If the port is not provided, default to standard port 25 or 465 is used. e.g.: smtp.gmail.com:587',\n    )\n\n    parser.add_argument(\n        '--email-sender',\n        '--emailsender',\n        metavar='EMAIL',\n        help='email addres used for the `from:` field when sending email.',\n    )\n\n    parser.add_argument(\n        '--email-notification-time',\n        '--emailnotificationtime',\n        metavar='TIME',\n        help='time when the email notifcation should be sent for inactive backups. e.g.: 22:00 Default value: 23:00',\n        default='23:00',\n    )\n\n    parser.add_argument(\n        '--email-username',\n        '--emailusername',\n        metavar='USERNAME',\n        help='username used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-password',\n        '--emailpassword',\n        metavar='PASSWORD',\n        help='password used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-send-changed-notification',\n        '--emailsendchangednotification',\n        help='True to send notification when sensitive information get change in user profile.',\n        action='store_true',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--favicon',\n        help='location of an icon to be used as a favicon displayed in web browser.',\n        default=pkg_resources.resource_filename('rdiffweb', 'static/favicon.ico'),\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-name', '--footername', help=argparse.SUPPRESS, default='rdiffweb'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-url', '--footerurl', help=argparse.SUPPRESS, default='https://rdiffweb.org/'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--header-logo',\n        '--headerlogo',\n        help='location of an image (preferably a .png) to be used as a replacement for the rdiffweb logo.',\n    )\n\n    parser.add_argument(\n        '--header-name',\n        '--headername',\n        help='application name displayed in the title bar and header menu.',\n        default='Rdiffweb',\n    )\n\n    parser.add_argument(\n        '--ldap-add-missing-user',\n        '--addmissinguser',\n        action='store_true',\n        help='enable creation of users from LDAP when the credential are valid.',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-role',\n        help='default role used when creating users from LDAP. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='user',\n        choices=['admin', 'maintainer', 'user'],\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-userroot',\n        help='default user root directory used when creating users from LDAP. LDAP attributes may be used to define the default location. e.g.: `/backups/{uid[0]}/`. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='',\n    )\n\n    parser.add_argument(\n        '--ldap-uri',\n        '--ldapuri',\n        help='URL to the LDAP server used to validate user credentials. e.g.: ldap://localhost:389',\n    )\n\n    parser.add_argument(\n        '--ldap-base-dn',\n        '--ldapbasedn',\n        metavar='DN',\n        help='DN of the branch of the directory where all searches should start from. e.g.: dc=my,dc=domain',\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-scope',\n        '--ldapscope',\n        help='scope of the search. Can be either base, onelevel or subtree',\n        choices=['base', 'onelevel', 'subtree'],\n        default=\"subtree\",\n    )\n\n    parser.add_argument('--ldap-tls', '--ldaptls', action='store_true', help='enable TLS')\n\n    parser.add_argument(\n        '--ldap-username-attribute',\n        '--ldapattribute',\n        metavar='ATTRIBUTE',\n        help=\"The attribute to search username. If no attributes are provided, the default is to use `uid`. It's a good idea to choose an attribute that will be unique across all entries in the subtree you will be using.\",\n        default='uid',\n    )\n\n    parser.add_argument(\n        '--ldap-filter',\n        '--ldapfilter',\n        help=\"search filter to limit LDAP lookup. If not provided, defaults to (objectClass=*), which searches for all objects in the tree.\",\n        default='(objectClass=*)',\n    )\n\n    parser.add_argument(\n        '--ldap-required-group',\n        '--ldaprequiredgroup',\n        metavar='GROUPNAME',\n        help=\"name of the group of which the user must be a member to access rdiffweb. Should be used with ldap-group-attribute and ldap-group-attribute-is-dn.\",\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute',\n        '--ldapgroupattribute',\n        metavar='ATTRIBUTE',\n        help=\"name of the attribute defining the groups of which the user is a member. Should be used with ldap-required-group and ldap-group-attribute-is-dn.\",\n        default='member',\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute-is-dn',\n        '--ldapgroupattributeisdn',\n        help=\"True if the content of the attribute `ldap-group-attribute` is a DN.\",\n        action='store_true',\n    )\n\n    parser.add_argument(\n        '--ldap-bind-dn',\n        '--ldapbinddn',\n        metavar='DN',\n        help=\"optional DN used to bind to the server when searching for entries. If not provided, will use an anonymous bind.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-bind-password',\n        '--ldapbindpassword',\n        metavar='PASSWORD',\n        help=\"password to use in conjunction with LdapBindDn. Note that the bind password is probably sensitive data, and should be properly protected. You should only use the LdapBindDn and LdapBindPassword if you absolutely need them to search the directory.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-version',\n        '--ldapversion',\n        '--ldapprotocolversion',\n        help=\"version of LDAP in use either 2 or 3. Default to 3.\",\n        default=3,\n        type=int,\n        choices=[2, 3],\n    )\n\n    parser.add_argument(\n        '--ldap-network-timeout',\n        '--ldapnetworktimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP connection\",\n        default=100,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-timeout',\n        '--ldaptimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP request\",\n        default=300,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-encoding',\n        '--ldapencoding',\n        metavar='ENCODING',\n        help=\"encoding used by your LDAP server.\",\n        default=\"utf-8\",\n    )\n\n    parser.add_argument(\n        '--log-access-file', '--logaccessfile', metavar='FILE', help='location of Rdiffweb log access file.'\n    )\n\n    parser.add_argument(\n        '--log-file',\n        '--logfile',\n        metavar='FILE',\n        help='location of Rdiffweb log file. Print log to the console if not define in config file.',\n    )\n\n    parser.add_argument(\n        '--log-level',\n        '--loglevel',\n        help='Define the log level.',\n        choices=['ERROR', 'WARN', 'INFO', 'DEBUG'],\n        default='INFO',\n    )\n\n    parser.add_argument(\n        '--max-depth',\n        '--maxdepth',\n        metavar='DEPTH',\n        help=\"define the maximum folder depthness to search into the user's root directory to find repositories. This is commonly used if you repositories are organised with multiple sub-folder.\",\n        type=int,\n        default=3,\n    )\n\n    parser.add('--quota-set-cmd', '--quotasetcmd', metavar='COMMAND', help=\"command line to set the user's quota.\")\n\n    parser.add('--quota-get-cmd', '--quotagetcmd', metavar='COMMAND', help=\"command line to get the user's quota.\")\n\n    parser.add(\n        '--quota-used-cmd', '--quotausedcmd', metavar='COMMAND', help=\"Command line to get user's quota disk usage.\"\n    )\n\n    parser.add(\n        '--remove-older-time',\n        '--removeoldertime',\n        metavar='TIME',\n        help=\"Time when to execute the remove older scheduled job. e.g.: 22:30\",\n        default='23:00',\n    )\n\n    parser.add('--server-host', '--serverhost', metavar='IP', default='127.0.0.1', help='IP address to listen to')\n\n    parser.add(\n        '--server-port',\n        '--serverport',\n        metavar='PORT',\n        help='port to listen to for HTTP request',\n        default='8080',\n        type=int,\n    )\n\n    parser.add(\n        '--rate-limit-dir',\n        '--session-dir',\n        '--sessiondir',\n        metavar='FOLDER',\n        help='location where to store rate-limit information. When undefined, the data is kept in memory. `--session-dir` are deprecated and kept for backward compatibility.',\n    )\n\n    parser.add(\n        '--rate-limit',\n        metavar='LIMIT',\n        type=int,\n        default=20,\n        help='maximum number of requests per hour that can be made on sensitive endpoints. When this limit is reached, an HTTP 429 message is returned to the user or the user is logged out. This security measure is used to limit brute force attacks on the login page and the RESTful API.',\n    )\n\n    parser.add(\n        '--session-idle-timeout',\n        metavar='MINUTES',\n        help='This timeout defines the amount of time a session will remain active in case there is no activity in the session. User Session will be revoke after this period of inactivity, unless the user selected \"remember me\". Default 5 minutes.',\n        default=5,\n    )\n\n    parser.add(\n        '--session-absolute-timeout',\n        metavar='MINUTES',\n        help='This timeout defines the maximum amount of time a session can be active. After this period, user is forced to (re)authenticate, unless the user selected \"remember me\". Default 20 minutes.',\n        default=20,\n    )\n\n    parser.add(\n        '--session-persistent-timeout',\n        metavar='MINUTES',\n        help='This timeout defines the maximum amount of time to remember and trust a user device. This timeout is used when user select \"remember me\". Default 30 days.',\n        default=43200,\n    )\n\n    parser.add(\n        '--ssl-certificate',\n        '--sslcertificate',\n        metavar='CERT',\n        help='location of the SSL Certification to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--ssl-private-key',\n        '--sslprivatekey',\n        metavar='KEY',\n        help='location of the SSL Private Key to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--tempdir',\n        metavar='FOLDER',\n        help='alternate temporary folder to be used when restoring files. Might be useful if the default location has limited disk space. Default to TEMPDIR environment or `/tmp`.',\n    )\n\n    parser.add(\n        '--disable-ssh-keys',\n        action='store_true',\n        help='used to hide SSH Key management to avoid users to add or remove SSH Key using the web application',\n        default=False,\n    )\n\n    parser.add(\n        '--password-min-length',\n        type=int,\n        help=\"Minimum length of the user's password\",\n        default=8,\n    )\n\n    parser.add(\n        '--password-max-length',\n        type=int,\n        help=\"Maximum length of the user's password\",\n        default=128,\n    )\n\n    parser.add(\n        '--password-score',\n        type=lambda x: max(1, min(int(x), 4)),\n        help=\"Minimum zxcvbn's score for password. Value from 1 to 4. Default value 2. Read more about it here: https://github.com/dropbox/zxcvbn\",\n        default=2,\n    )\n\n    parser.add_argument('--version', action='version', version='%(prog)s ' + VERSION)\n\n    # Here we append a list of arguments for each locale.\n    flags = ['--welcome-msg'] + ['--welcome-msg-' + i for i in ['ca', 'en', 'es', 'fr', 'ru']] + ['--welcomemsg']\n    parser.add_argument(\n        *flags,\n        metavar='HTML',\n        help='replace the welcome message displayed in the login page for default locale or for a specific locale',\n        action=LocaleAction\n    )\n    return parser\n\n\ndef parse_args(args=None, config_file_contents=None):\n    args = sys.argv[1:] if args is None else args\n    return get_parser().parse_args(args, config_file_contents=config_file_contents)\n\n\nclass LocaleAction(argparse.Action):\n    \"\"\"\n    Custom Action to support defining arguments with locale.\n    \"\"\"\n\n    def __init__(self, option_strings, dest, nargs=None, **kwargs):\n        super(LocaleAction, self).__init__(option_strings, dest, **kwargs)\n\n    def __call__(self, parser, namespace, value, option_string=None):\n        if option_string[-3] == '-':\n            # When using arguments, we can extract the locale from the argument key\n            locale = option_string[-2:]\n        elif value[2] == ':':\n            # When using config file, the locale could be extract from the value e.g. fr:message\n            locale = value[0:2]\n            value = value[3:]\n        else:\n            locale = ''\n        # Create a dictionary with locale.\n        items = getattr(namespace, self.dest) or {}\n        items[locale] = value\n        setattr(namespace, self.dest, items)\n\n\nclass ConfigFileParser(object):\n    \"\"\"\n    Custom config file parser to support rdiffweb config file format.\n    \"\"\"\n\n    def get_syntax_description(self):\n        msg = \"Configuration file syntax allows: key=value, flag=true.\"\n        return msg\n\n    def parse(self, stream):\n        \"\"\"\n        Used to read the rdiffweb config file as dict.\n        \"\"\"\n\n        result = OrderedDict()\n\n        for i, line in enumerate(stream):\n            line = re.compile(\"(.*?)#.*\").sub(r'\\1', line).strip()\n            if not line:\n                continue\n            if '=' not in line:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n            split_line = line.partition('=')\n            if not len(split_line) == 3:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n\n            # Get key a& value\n            key = split_line[0].lower().strip().replace('_', '-')\n            value = split_line[2].strip()\n\n            # Support welcome-msg locale for backward compatibility\n            m = re.match(\"welcome-?msg\\\\[(ca|en|es|fr|ru)\\\\]\", key.lower())\n            if m:\n                key = \"welcome-msg-\" + m.group(1)\n                value = m.group(1) + \":\" + value\n\n            result[key] = value\n\n        # This dictionary is read by cherrypy. So create appropriate structure.\n        return result\n\n\nclass Option(object):\n    def __init__(self, key):\n        assert key\n        self.key = key\n\n    def __get__(self, instance, owner):\n        \"\"\"\n        Return a property to wrap the given option.\n        \"\"\"\n        return self.get(instance)\n\n    def get(self, instance=None):\n        \"\"\"\n        Return the value of this options.\n        \"\"\"\n        if isinstance(instance, Application):\n            app = instance\n        else:\n            app = cherrypy.request.app or getattr(instance, 'app', None)\n        assert app, \"Option() can't get reference to app\"\n        assert app.cfg, \"Option() can't get reference to app.cfg\"\n        return getattr(app.cfg, self.key)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport logging\nimport os\n\nimport cherrypy\nimport cherrypy.lib.sessions\nimport pkg_resources\nfrom cherrypy import Application\n\nimport rdiffweb\nimport rdiffweb.controller.filter_authorization\nimport rdiffweb.core.login  # noqa\nimport rdiffweb.core.notification\nimport rdiffweb.core.quota\nimport rdiffweb.core.remove_older\nimport rdiffweb.plugins.ldap\nimport rdiffweb.plugins.scheduler\nimport rdiffweb.plugins.smtp\nimport rdiffweb.tools.auth_form\nimport rdiffweb.tools.auth_mfa\nimport rdiffweb.tools.currentuser\nimport rdiffweb.tools.db\nimport rdiffweb.tools.enrich_session\nimport rdiffweb.tools.errors\nimport rdiffweb.tools.i18n\nimport rdiffweb.tools.proxy\nimport rdiffweb.tools.ratelimit\nimport rdiffweb.tools.secure_headers\nfrom rdiffweb.controller import Controller\nfrom rdiffweb.controller.api import ApiPage\nfrom rdiffweb.controller.dispatch import staticdir, staticfile\nfrom rdiffweb.controller.page_admin import AdminPage\nfrom rdiffweb.controller.page_browse import BrowsePage\nfrom rdiffweb.controller.page_delete import DeletePage\nfrom rdiffweb.controller.page_graphs import GraphsPage\nfrom rdiffweb.controller.page_history import HistoryPage\nfrom rdiffweb.controller.page_locations import LocationsPage\nfrom rdiffweb.controller.page_login import LoginPage\nfrom rdiffweb.controller.page_logs import LogsPage\nfrom rdiffweb.controller.page_mfa import MfaPage\nfrom rdiffweb.controller.page_pref_sshkeys import ApiSshKeys\nfrom rdiffweb.controller.page_prefs import PreferencesPage\nfrom rdiffweb.controller.page_restore import RestorePage\nfrom rdiffweb.controller.page_settings import SettingsPage\nfrom rdiffweb.controller.page_status import StatusPage\nfrom rdiffweb.core import rdw_templating\nfrom rdiffweb.core.config import Option, parse_args\nfrom rdiffweb.core.model import DbSession, UserObject\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n\n# Define cherrypy development environment\ncherrypy.config.environments['development'] = {\n    'engine.autoreload.on': True,\n    'checker.on': False,\n    'tools.log_headers.on': True,\n    'request.show_tracebacks': True,\n    'request.show_mismatched_params': True,\n    'log.screen': False,\n}\n\n\n@cherrypy.tools.auth_form()\n@cherrypy.tools.auth_mfa(\n    mfa_enabled=lambda username: UserObject.get_user(username).mfa == UserObject.ENABLED_MFA,\n)\n@cherrypy.tools.currentuser(userobj=lambda username: UserObject.get_user(username))\n@cherrypy.tools.db()\n@cherrypy.tools.enrich_session()\n@cherrypy.tools.proxy(remote='X-Real-IP')\n@cherrypy.tools.secure_headers()\nclass Root(LocationsPage):\n    def __init__(self):\n        self.login = LoginPage()\n        self.mfa = MfaPage()\n        self.browse = BrowsePage()\n        self.delete = DeletePage()\n        self.restore = RestorePage()\n        self.history = HistoryPage()\n        self.status = StatusPage()\n        self.admin = AdminPage()\n        self.prefs = PreferencesPage()\n        self.settings = SettingsPage()\n        self.api = ApiPage()\n        self.api.currentuser.sshkeys = ApiSshKeys()\n        self.graphs = GraphsPage()\n        self.logs = LogsPage()\n\n        # Register static dir.\n        static_dir = pkg_resources.resource_filename('rdiffweb', 'static')  # @UndefinedVariable\n        self.static = staticdir(static_dir)\n\n        # Register robots.txt\n        robots_txt = pkg_resources.resource_filename('rdiffweb', 'static/robots.txt')  # @UndefinedVariable\n        self.robots_txt = staticfile(robots_txt)\n\n\nclass RdiffwebApp(Application):\n    \"\"\"This class represent the application context.\"\"\"\n\n    _favicon = Option('favicon')\n\n    _header_logo = Option('header_logo')\n\n    _tempdir = Option('tempdir')\n\n    @classmethod\n    def parse_args(cls, args=None, config_file_contents=None):\n        return parse_args(args, config_file_contents)\n\n    def __init__(self, cfg):\n        self.cfg = cfg\n        db_uri = self.cfg.database_uri if '://' in self.cfg.database_uri else \"sqlite:///\" + self.cfg.database_uri\n        cherrypy.config.update(\n            {\n                'environment': 'development' if cfg.debug else cfg.environment,\n                # Configure database plugins\n                'tools.db.uri': db_uri,\n                'tools.db.debug': cfg.debug,\n                # Configure LDAP plugin\n                'ldap.uri': cfg.ldap_uri,\n                'ldap.base_dn': cfg.ldap_base_dn,\n                'ldap.bind_dn': cfg.ldap_bind_dn,\n                'ldap.bind_password': cfg.ldap_bind_password,\n                'ldap.scope': cfg.ldap_scope,\n                'ldap.tls': cfg.ldap_tls,\n                'ldap.username_attribute': cfg.ldap_username_attribute,\n                'ldap.required_group': cfg.ldap_required_group,\n                'ldap.group_attribute': cfg.ldap_group_attribute,\n                'ldap.group_attribute_is_dn': cfg.ldap_group_attribute_is_dn,\n                'ldap.version': cfg.ldap_version,\n                'ldap.network_timeout': cfg.ldap_network_timeout,\n                'ldap.timeout': cfg.ldap_timeout,\n                'ldap.encoding': cfg.ldap_encoding,\n                # Configure login\n                'login.add_missing_user': cfg.ldap_add_missing_user,\n                'login.add_user_default_role': cfg.ldap_add_user_default_role,\n                'login.add_user_default_userroot': cfg.ldap_add_user_default_userroot,\n                # Configure SMTP plugin\n                'smtp.server': cfg.email_host,\n                'smtp.username': cfg.email_username,\n                'smtp.password': cfg.email_password,\n                'smtp.email_from': cfg.email_sender\n                and '%s <%s>'\n                % (\n                    cfg.header_name,\n                    cfg.email_sender,\n                ),\n                'smtp.encryption': cfg.email_encryption,\n                # Configure remove_older plugin\n                'remove_older.execution_time': self.cfg.remove_older_time,\n                # Configure notification plugin\n                'notification.execution_time': self.cfg.email_notification_time,\n                'notification.send_changed': self.cfg.email_send_changed_notification,\n                # Configure quota plugin\n                'quota.set_quota_cmd': self.cfg.quota_set_cmd,\n                'quota.get_quota_cmd': self.cfg.quota_get_cmd,\n                'quota.get_usage_cmd': self.cfg.quota_used_cmd,\n            }\n        )\n        # Create database if required\n        cherrypy.tools.db.create_all()\n\n        # Initialise the template engine.\n        self.templates = rdw_templating.TemplateManager()\n\n        # Pick the right implementation for storage\n        rate_limit_storage_class = rdiffweb.tools.ratelimit.RamRateLimit\n        if cfg.rate_limit_dir:\n            rate_limit_storage_class = rdiffweb.tools.ratelimit.FileRateLimit\n\n        config = {\n            '/': {\n                # To work around the new behaviour in CherryPy >= 5.5.0, force usage of\n                # ISO-8859-1 encoding for URL. This avoid any conversion of the\n                # URL into UTF-8.\n                'request.uri_encoding': 'ISO-8859-1',\n                'tools.i18n.on': True,\n                'tools.i18n.default': 'en_US',\n                'tools.i18n.mo_dir': pkg_resources.resource_filename('rdiffweb', 'locales'),  # @UndefinedVariable\n                'tools.i18n.domain': 'messages',\n                'tools.encode.on': True,\n                'tools.encode.encoding': 'utf-8',\n                'tools.gzip.on': True,\n                'error_page.default': self.error_page,\n                'tools.sessions.on': True,\n                'tools.sessions.debug': cfg.debug,\n                'tools.sessions.storage_class': DbSession,\n                'tools.sessions.httponly': True,\n                'tools.sessions.timeout': cfg.session_idle_timeout,  # minutes\n                'tools.sessions.persistent': False,  # auth_form should update this.\n                'tools.auth_form.persistent_timeout': cfg.session_persistent_timeout,  # minutes\n                'tools.auth_form.absolute_timeout': cfg.session_absolute_timeout,  # minutes\n                'tools.ratelimit.debug': cfg.debug,\n                'tools.ratelimit.delay': 3600,\n                'tools.ratelimit.limit': cfg.rate_limit,\n                'tools.ratelimit.storage_class': rate_limit_storage_class,\n                'tools.ratelimit.storage_path': cfg.rate_limit_dir,\n            },\n        }\n\n        # Initialize the application\n        Application.__init__(self, root=Root(), config=config)\n\n        # Register favicon.ico\n        self.root.favicon_ico = staticfile(self._favicon)\n\n        # Register header_logo\n        if self._header_logo:\n            self.root.header_logo = staticfile(self._header_logo)\n\n        # Define TEMP env\n        if self._tempdir:\n            os.environ[\"TMPDIR\"] = self._tempdir\n\n        # create user manager\n        UserObject.create_admin_user(cfg.admin_user, cfg.admin_password)\n\n    @property\n    def currentuser(self):\n        \"\"\"\n        Proxy property to get current user from cherrypy request object.\n        Return a UserObject when logged in or None.\n        \"\"\"\n        return getattr(cherrypy.serving.request, 'currentuser', None)\n\n    def error_page(self, **kwargs):\n        \"\"\"\n        Default error page shown to the user when an unexpected error occur.\n        \"\"\"\n        # Log exception.\n        logger.error(\n            'error page: %s %s\\n%s' % (kwargs.get('status', ''), kwargs.get('message', ''), kwargs.get('traceback', ''))\n        )\n\n        # Replace message by generic one for 404. Default implementation leak path info.\n        if kwargs.get('status', '') == '404 Not Found':\n            kwargs['message'] = 'Nothing matches the given URI'\n\n        # Check expected response type.\n        mtype = cherrypy.tools.accept.callable(['text/html', 'text/plain'])  # @UndefinedVariable\n        if mtype == 'text/plain':\n            return kwargs.get('message')\n\n        # Try to build a nice error page.\n        try:\n            page = Controller()\n            return page._compile_template('error_page_default.html', **kwargs)\n        except Exception:\n            # If failing, send the raw error message.\n            return kwargs.get('message')\n\n    @property\n    def version(self):\n        \"\"\"\n        Get the current running version (using package info).\n        \"\"\"\n        return rdiffweb.__version__\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport datetime\nimport time\nimport urllib.parse\n\nimport cherrypy\nfrom cherrypy.lib import httputil\n\nSESSION_KEY = '_cp_username'\nLOGIN_TIME = 'login_time'\nLOGIN_REDIRECT_URL = '_auth_form_redirect_url'\nLOGIN_PERSISTENT = 'login_persistent'\n\n\nclass CheckAuthForm(cherrypy.Tool):\n    def __init__(self, priority=73):\n        super().__init__(point='before_handler', callable=self.run, priority=priority)\n\n    def _is_login(self):\n        \"\"\"\n        Verify if the login expired and we need to prompt the user to authenticated again using either credentials and/or MFA.\n        \"\"\"\n        # Verify if current user exists\n        request = cherrypy.serving.request\n        if not getattr(request, 'currentuser', None):\n            return False\n\n        # Verify if session is enabled\n        sessions_on = request.config.get('tools.sessions.on', False)\n        if not sessions_on:\n            return False\n\n        # Verify session\n        # We don't need to verify the timeout value since expired session get deleted automatically.\n        session = cherrypy.session\n        return session.get(SESSION_KEY) is not None and session.get(LOGIN_TIME) is not None\n\n    def _get_redirect_url(self):\n        \"\"\"\n        Return the original URL the user browser before getting redirect to login.\n        \"\"\"\n        return cherrypy.session.get(LOGIN_REDIRECT_URL) or '/'\n\n    def _set_redirect_url(self):\n        # Keep reference to the current URL\n        request = cherrypy.serving.request\n        uri_encoding = getattr(request, 'uri_encoding', 'utf-8')\n        original_url = urllib.parse.quote(request.path_info, encoding=uri_encoding)\n        qs = request.query_string\n        new_url = cherrypy.url(original_url, qs=qs, base='')\n        cherrypy.session[LOGIN_REDIRECT_URL] = new_url\n\n    def _update_session_timeout(self, persistent_timeout=43200, absolute_timeout=30):\n        \"\"\"\n        Since we have multiple timeout value (idle, absolute and persistent) We need to update the session timeout and possibly the cookie timeout.\n        \"\"\"\n        persistent_timeout = cherrypy.request.config.get('tools.auth_form.persistent_timeout', 43200)\n        absolute_timeout = cherrypy.request.config.get('tools.auth_form.absolute_timeout', 30)\n        # If login is persistent, update the cookie max-age/expires\n        session = cherrypy.session\n        if session.get(LOGIN_PERSISTENT, False):\n            expiration = session[LOGIN_TIME] + datetime.timedelta(minutes=persistent_timeout)\n            session.timeout = int((expiration - session.now()).total_seconds() / 60)\n            cookie = cherrypy.serving.response.cookie\n            cookie['session_id']['max-age'] = session.timeout * 60\n            cookie['session_id']['expires'] = httputil.HTTPDate(time.time() + session.timeout * 60)\n        else:\n            session_idle_timeout = cherrypy.request.config.get('tools.sessions.timeout', 60)\n            expiration1 = session.now() + datetime.timedelta(minutes=session_idle_timeout)\n            expiration2 = session[LOGIN_TIME] + datetime.timedelta(minutes=absolute_timeout)\n            expiration = min(expiration1, expiration2)\n            session.timeout = int((expiration - session.now()).total_seconds() / 60)\n\n    def redirect_to_original_url(self):\n        # Redirect user to original URL\n        raise cherrypy.HTTPRedirect(self._get_redirect_url())\n\n    def run(self, login_url='/login/', logout_url='/logout', persistent_timeout=43200, absolute_timeout=30):\n        \"\"\"\n        A tool that verify if the session is associated to a user by tracking\n        a session key. If session is not authenticated, redirect user to login page.\n        \"\"\"\n        request = cherrypy.serving.request\n        # Skip execution of this tools when browsing the login page.\n        if request.path_info == login_url:\n            if self._is_login():\n                raise cherrypy.HTTPRedirect('/')\n            return\n\n        # Clear session when browsing /logout\n        if request.path_info == logout_url or request.path_info.startswith(logout_url):\n            self.logout()\n            raise cherrypy.HTTPRedirect('/')\n\n        # Check if login\n        if not self._is_login():\n            # Store original URL\n            self._set_redirect_url()\n            # And redirect to login page\n            raise cherrypy.HTTPRedirect(login_url)\n\n        self._update_session_timeout()\n\n    def login(self, username, persistent=False):\n        \"\"\"\n        Must be called by the page hanlder when the authentication is successful.\n        \"\"\"\n        # Store session data\n        cherrypy.session[LOGIN_PERSISTENT] = persistent\n        cherrypy.session[SESSION_KEY] = username\n        cherrypy.session[LOGIN_TIME] = cherrypy.session.now()\n        # Generate a new session id\n        cherrypy.session.regenerate()\n        # Update the session timeout\n        self._update_session_timeout()\n\n    def logout(self):\n        # Clear session date and generate a new session id\n        cherrypy.session.clear()\n        cherrypy.session.regenerate()\n\n\ncherrypy.tools.auth_form = CheckAuthForm()\n"], "filenames": ["README.md", "doc/configuration.md", "rdiffweb/controller/tests/test_page_login.py", "rdiffweb/core/config.py", "rdiffweb/rdw_app.py", "rdiffweb/tools/auth_form.py"], "buggy_code_start_loc": [139, 164, 110, 390, 208, 48], "buggy_code_end_loc": [139, 164, 178, 409, 211, 118], "fixing_code_start_loc": [140, 165, 111, 390, 208, 49], "fixing_code_end_loc": [141, 175, 200, 415, 212, 131], "type": "CWE-306", "message": "Missing Authentication for Critical Function in GitHub repository ikus060/rdiffweb prior to 2.5.0a6.", "other": {"cve": {"id": "CVE-2022-3327", "sourceIdentifier": "security@huntr.dev", "published": "2022-10-20T00:15:09.567", "lastModified": "2022-10-24T12:58:41.170", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Missing Authentication for Critical Function in GitHub repository ikus060/rdiffweb prior to 2.5.0a6."}, {"lang": "es", "value": "Una Falta de Autenticaci\u00f3n para la Funci\u00f3n Cr\u00edtica en el repositorio de GitHub ikus060/rdiffweb versiones anteriores a 2.5.0a6"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:P/AC:L/PR:H/UI:R/S:U/C:H/I:L/A:N", "attackVector": "PHYSICAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.2, "impactScore": 4.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-306"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-306"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.10", "matchCriteriaId": "9A8A95A0-A2E7-45A8-9791-E3A6652EE54D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "917D9FB4-3534-4254-909D-0F27DB5CDDD1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "E967F2E5-0F47-436B-9DC7-4F8D051F5615"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "039D2014-4F4C-4B3F-81B1-EFA08EE3D513"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha3:*:*:*:*:*:*", "matchCriteriaId": "37EFE887-5C53-48EA-974C-25F36D6014EC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha4:*:*:*:*:*:*", "matchCriteriaId": "7DA70603-82D5-4EAF-BF6B-A2FF2549D592"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:2.5.0:alpha5:*:*:*:*:*:*", "matchCriteriaId": "BFC076DD-CBC9-4493-A996-807F97C6D56A"}]}]}], "references": [{"url": "https://github.com/ikus060/rdiffweb/commit/f2a32f2a9f3fb8be1a9432ac3d81d3aacdb13095", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/02207c8f-2b15-4a31-a86a-74fd2fca0ed1", "source": "security@huntr.dev", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ikus060/rdiffweb/commit/f2a32f2a9f3fb8be1a9432ac3d81d3aacdb13095"}}