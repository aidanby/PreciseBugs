{"buggy_code": ["<?php\n/*\n  +-------------------------------------------------------------------------+\n  | Copyright 2010-2017, Davide Franco                                      |\n  |                                                                         |\n  | This program is free software; you can redistribute it and/or           |\n  | modify it under the terms of the GNU General Public License             |\n  | as published by the Free Software Foundation; either version 2          |\n  | of the License, or (at your option) any later version.                  |\n  |                                                                         |\n  | This program is distributed in the hope that it will be useful,         |\n  | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n  | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n  | GNU General Public License for more details.                            |\n  +-------------------------------------------------------------------------+\n*/\n session_start();\n require_once('core/global.inc.php');\n\n // Initialise model and view\n $view = new CView();\n $dbSql = new Bweb($view);\n \n require_once('core/const.inc.php');\n\n $clientid = '';\n $period = 7;\n $client = '';\n $client_jobs = array();\n $backup_jobs = array();\n $days_stored_bytes = array();\n $days_stored_files = array();\n\n $client = new Clients_Model();\n \n // Clients list\n $view->assign('clients_list', $client->getClients());\n\n // Period list\n $periods_list = array( '7' => \"Last week\", '14' => \"Last 2 weeks\", '30' => \"Last month\");\n $view->assign('periods_list', $periods_list);\n\n $job_levels = array(\n      'D' => 'Differential',\n      'I' => 'Incremental',\n      'F' => 'Full',\n      'V' => 'InitCatalog',\n      'C' => 'Catalog',\n      'O' => 'VolumeToCatalog',\n      'd' => 'DiskToCatalog',\n      'A' => 'Data'\n );\n\n try {\n    // Check client_id and period received by POST request\n    if (!is_null(CHttpRequest::get_Value('client_id'))) {\n       \n       $clientid = CHttpRequest::get_Value('client_id');\n\n       // Verify if client_id is a valid integer\n       if( !filter_var( $clientid, FILTER_VALIDATE_INT)) {\n          throw new Exception('Critical: provided parameter (client_id) is not valid');\n       }\n\n       $period = CHttpRequest::get_Value('period');\n\n       $view->assign( 'no_report_options', 'false');\n       \n       // Client informations\n       $client_info  = $client->getClientInfos($clientid);\n       $view->assign('client_name', $client_info['name']);\n       $view->assign('client_os', $client_info['os']);\n       $view->assign('client_arch', $client_info['arch']);\n       $view->assign('client_version', $client_info['version']);\n       \n       // Get job names for the client\n       $jobs = new Jobs_Model();\n       \n       foreach ($jobs->get_Jobs_List($clientid) as $jobname) {\n          // Last good client's for each backup jobs\n          $query  = 'SELECT Job.Name, Job.Jobid, Job.Level, Job.Endtime, Job.Jobbytes, Job.Jobfiles, Status.JobStatusLong FROM Job ';\n          $query .= \"LEFT JOIN Status ON Job.JobStatus = Status.JobStatus \";\n          $query .= \"WHERE Job.Name = '$jobname' AND Job.JobStatus = 'T' AND Job.Type = 'B' \";\n          $query .= 'ORDER BY Job.EndTime DESC ';\n          $query .= 'LIMIT 1';\n\n          $jobs_result = $jobs->run_query($query);\n          \n          foreach ($jobs_result->fetchAll() as $job) {\n             $job['level']     = $job_levels[$job['level']];\n             $job['jobfiles']  = CUtils::format_Number($job['jobfiles']);\n             $job['jobbytes']  = CUtils::Get_Human_Size($job['jobbytes']);\n             $job['endtime']   = date( $dbSql->datetime_format, strtotime($job['endtime']));\n             \n             $backup_jobs[] = $job;\n          } // end foreach\n       } // end foreach\n       \n       $view->assign('backup_jobs', $backup_jobs);\n       \n       // Get the last n days interval (start and end)\n       $days = DateTimeUtil::getLastDaysIntervals($period);\n       \n       // Last n days stored Bytes graph\n       foreach ($days as $day) {\n          $stored_bytes = $jobs->getStoredBytes(array($day['start'], $day['end']), 'ALL', $clientid);\n          $days_stored_bytes[] = array(date(\"m-d\", $day['start']), $stored_bytes);\n       } // end foreach\n       \n       $stored_bytes_chart = new Chart( array( 'type' => 'bar', \n          'name' => 'chart_storedbytes',\n          'data' => $days_stored_bytes, \n          'ylabel' => 'Bytes', \n          'uniformize_data' => true ) );\n       \n       $view->assign('stored_bytes_chart_id', $stored_bytes_chart->name);\n       $view->assign('stored_bytes_chart', $stored_bytes_chart->render());\n       \n       unset($stored_bytes_chart);\n       \n       // Last n days stored files graph\n       foreach ($days as $day) {\n          $stored_files = $jobs->getStoredFiles(array($day['start'], $day['end']), 'ALL', $clientid);\n          $days_stored_files[] = array(date(\"m-d\", $day['start']), $stored_files);\n       }\n       \n       $stored_files_chart = new Chart( array( 'type' => 'bar', \n          'name' => 'chart_storedfiles', \n          'data' => $days_stored_files, \n          'ylabel' => 'Files' ) );\n       \n       $view->assign('stored_files_chart_id', $stored_files_chart->name);\n       $view->assign('stored_files_chart', $stored_files_chart->render());\n       \n       unset($stored_files_chart);\n    }else {\n       $view->assign( 'no_report_options', 'true');\n    }\n\n} catch (Exception $e) {\n    CErrorHandler::displayError($e);\n}\n\n $view->assign('period', $period);\n\n // Set page name\n $view->assign('page_name', 'Client report');\n\n // Process and display the template\n $view->render('client-report.tpl');\n"], "fixing_code": ["<?php\n/*\n  +-------------------------------------------------------------------------+\n  | Copyright 2010-2017, Davide Franco                                      |\n  |                                                                         |\n  | This program is free software; you can redistribute it and/or           |\n  | modify it under the terms of the GNU General Public License             |\n  | as published by the Free Software Foundation; either version 2          |\n  | of the License, or (at your option) any later version.                  |\n  |                                                                         |\n  | This program is distributed in the hope that it will be useful,         |\n  | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n  | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n  | GNU General Public License for more details.                            |\n  +-------------------------------------------------------------------------+\n*/\n session_start();\n require_once('core/global.inc.php');\n\n // Initialise model and view\n $view = new CView();\n $dbSql = new Bweb($view);\n \n require_once('core/const.inc.php');\n\n $clientid = '';\n $period = 7;\n $client = '';\n $client_jobs = array();\n $backup_jobs = array();\n $days_stored_bytes = array();\n $days_stored_files = array();\n\n $client = new Clients_Model();\n \n // Clients list\n $view->assign('clients_list', $client->getClients());\n\n // Period list\n $periods_list = array( '7' => \"Last week\", '14' => \"Last 2 weeks\", '30' => \"Last month\");\n $view->assign('periods_list', $periods_list);\n\n $job_levels = array(\n      'D' => 'Differential',\n      'I' => 'Incremental',\n      'F' => 'Full',\n      'V' => 'InitCatalog',\n      'C' => 'Catalog',\n      'O' => 'VolumeToCatalog',\n      'd' => 'DiskToCatalog',\n      'A' => 'Data'\n );\n\n try {\n    // Check client_id and period received by POST request\n    if (!is_null(CHttpRequest::get_Value('client_id'))) {\n       \n       $clientid = CHttpRequest::get_Value('client_id');\n\n       // Verify if client_id is a valid integer\n       if( !filter_var( $clientid, FILTER_VALIDATE_INT)) {\n          throw new Exception('Critical: provided parameter (client_id) is not valid');\n       }\n\n       $period = CHttpRequest::get_Value('period');\n\n       // Check if period is an integer and listed in known periods\n       if(!array_key_exists( $period, $periods_list)) {\n          throw new Exception('Critical: provided value for (period) is unknown or not valid');\n       }\n\n       if(!filter_var($period, FILTER_VALIDATE_INT)) {\n          throw new Exception('Critical: provided value for (period) is unknown or not valid');\n       }\n\n       $view->assign( 'no_report_options', 'false');\n       \n       // Client informations\n       $client_info  = $client->getClientInfos($clientid);\n       $view->assign('client_name', $client_info['name']);\n       $view->assign('client_os', $client_info['os']);\n       $view->assign('client_arch', $client_info['arch']);\n       $view->assign('client_version', $client_info['version']);\n       \n       // Get job names for the client\n       $jobs = new Jobs_Model();\n       \n       foreach ($jobs->get_Jobs_List($clientid) as $jobname) {\n          // Last good client's for each backup jobs\n          $query  = 'SELECT Job.Name, Job.Jobid, Job.Level, Job.Endtime, Job.Jobbytes, Job.Jobfiles, Status.JobStatusLong FROM Job ';\n          $query .= \"LEFT JOIN Status ON Job.JobStatus = Status.JobStatus \";\n          $query .= \"WHERE Job.Name = '$jobname' AND Job.JobStatus = 'T' AND Job.Type = 'B' \";\n          $query .= 'ORDER BY Job.EndTime DESC ';\n          $query .= 'LIMIT 1';\n\n          $jobs_result = $jobs->run_query($query);\n          \n          foreach ($jobs_result->fetchAll() as $job) {\n             $job['level']     = $job_levels[$job['level']];\n             $job['jobfiles']  = CUtils::format_Number($job['jobfiles']);\n             $job['jobbytes']  = CUtils::Get_Human_Size($job['jobbytes']);\n             $job['endtime']   = date( $dbSql->datetime_format, strtotime($job['endtime']));\n             \n             $backup_jobs[] = $job;\n          } // end foreach\n       } // end foreach\n       \n       $view->assign('backup_jobs', $backup_jobs);\n       \n       // Get the last n days interval (start and end)\n       $days = DateTimeUtil::getLastDaysIntervals($period);\n       \n       // Last n days stored Bytes graph\n       foreach ($days as $day) {\n          $stored_bytes = $jobs->getStoredBytes(array($day['start'], $day['end']), 'ALL', $clientid);\n          $days_stored_bytes[] = array(date(\"m-d\", $day['start']), $stored_bytes);\n       } // end foreach\n       \n       $stored_bytes_chart = new Chart( array( 'type' => 'bar', \n          'name' => 'chart_storedbytes',\n          'data' => $days_stored_bytes, \n          'ylabel' => 'Bytes', \n          'uniformize_data' => true ) );\n       \n       $view->assign('stored_bytes_chart_id', $stored_bytes_chart->name);\n       $view->assign('stored_bytes_chart', $stored_bytes_chart->render());\n       \n       unset($stored_bytes_chart);\n       \n       // Last n days stored files graph\n       foreach ($days as $day) {\n          $stored_files = $jobs->getStoredFiles(array($day['start'], $day['end']), 'ALL', $clientid);\n          $days_stored_files[] = array(date(\"m-d\", $day['start']), $stored_files);\n       }\n       \n       $stored_files_chart = new Chart( array( 'type' => 'bar', \n          'name' => 'chart_storedfiles', \n          'data' => $days_stored_files, \n          'ylabel' => 'Files' ) );\n       \n       $view->assign('stored_files_chart_id', $stored_files_chart->name);\n       $view->assign('stored_files_chart', $stored_files_chart->render());\n       \n       unset($stored_files_chart);\n    }else {\n       $view->assign( 'no_report_options', 'true');\n    }\n\n} catch (Exception $e) {\n    CErrorHandler::displayError($e);\n}\n\n $view->assign('period', $period);\n\n // Set page name\n $view->assign('page_name', 'Client report');\n\n // Process and display the template\n $view->render('client-report.tpl');\n"], "filenames": ["client-report.php"], "buggy_code_start_loc": [65], "buggy_code_end_loc": [65], "fixing_code_start_loc": [66], "fixing_code_end_loc": [75], "type": "CWE-89", "message": "Bacula-web before 8.0.0-rc2 is affected by multiple SQL Injection vulnerabilities that could allow an attacker to access the Bacula database and, depending on configuration, escalate privileges on the server.", "other": {"cve": {"id": "CVE-2017-15367", "sourceIdentifier": "cve@mitre.org", "published": "2018-03-07T20:29:00.247", "lastModified": "2018-10-09T15:07:19.363", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Bacula-web before 8.0.0-rc2 is affected by multiple SQL Injection vulnerabilities that could allow an attacker to access the Bacula database and, depending on configuration, escalate privileges on the server."}, {"lang": "es", "value": "Bacula-web, en versiones anteriores a la 8.0.0-rc2, se ha visto afectado por m\u00faltiples vulnerabilidades que podr\u00edan permitir que un atacante acceda a la base de datos de Bacula y, dependiendo de la configuraci\u00f3n, escalar privilegios en el servidor."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bacula:bacula-web:*:*:*:*:*:*:*:*", "versionEndIncluding": "7.4.0", "matchCriteriaId": "8834B1C4-AE49-4354-BCCE-618334E740D8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bacula:bacula-web:8.0.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "CC7677C4-EE67-4938-9EF3-0D5921479100"}]}]}], "references": [{"url": "http://bacula-web.org/download/articles/bacula-web-8-0-0-rc2.html", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "http://bugs.bacula-web.org/view.php?id=211", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory"]}, {"url": "https://github.com/bacula-web/bacula-web/commit/90d4c44a0dd0d65c6fb3ab2417b83d700c8413ae", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/44272/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/bacula-web/bacula-web/commit/90d4c44a0dd0d65c6fb3ab2417b83d700c8413ae"}}