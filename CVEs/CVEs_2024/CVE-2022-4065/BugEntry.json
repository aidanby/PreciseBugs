{"buggy_code": ["package org.testng;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.Files;\nimport java.util.Collection;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\nimport org.testng.collections.Lists;\nimport org.testng.internal.Utils;\nimport org.testng.util.Strings;\nimport org.testng.xml.IPostProcessor;\nimport org.testng.xml.XmlSuite;\nimport org.testng.xml.internal.Parser;\nimport org.testng.xml.internal.TestNamesMatcher;\nimport org.testng.xml.internal.XmlSuiteUtils;\n\n/** A Utility for extracting {@link XmlSuite} from a jar. */\nclass JarFileUtils {\n  private final IPostProcessor processor;\n  private final String xmlPathInJar;\n  private final List<String> testNames;\n  private final List<XmlSuite> suites = Lists.newLinkedList();\n  private final XmlSuite.ParallelMode mode;\n\n  JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) {\n    this(processor, xmlPathInJar, testNames, XmlSuite.ParallelMode.NONE);\n  }\n\n  JarFileUtils(\n      IPostProcessor processor,\n      String xmlPathInJar,\n      List<String> testNames,\n      XmlSuite.ParallelMode mode) {\n    this.processor = processor;\n    this.xmlPathInJar = xmlPathInJar;\n    this.testNames = testNames;\n    this.mode = mode == null ? XmlSuite.ParallelMode.NONE : mode;\n  }\n\n  List<XmlSuite> extractSuitesFrom(File jarFile) {\n    try {\n\n      Utils.log(\"TestNG\", 2, \"Trying to open jar file:\" + jarFile);\n\n      List<String> classes = Lists.newArrayList();\n      boolean foundTestngXml = testngXmlExistsInJar(jarFile, classes);\n      if (!foundTestngXml) {\n        Utils.log(\n            \"TestNG\",\n            1,\n            \"Couldn't find the \" + xmlPathInJar + \" in the jar file, running all the classes\");\n        XmlSuite suite = XmlSuiteUtils.newXmlSuiteUsing(classes);\n        suite.setParallel(this.mode);\n        suites.add(suite);\n      }\n    } catch (IOException ex) {\n      throw new TestNGException(ex);\n    }\n    return suites;\n  }\n\n  private boolean testngXmlExistsInJar(File jarFile, List<String> classes) throws IOException {\n    try (JarFile jf = new JarFile(jarFile)) {\n      Enumeration<JarEntry> entries = jf.entries();\n      File file = java.nio.file.Files.createTempDirectory(\"testngXmlPathInJar-\").toFile();\n      String suitePath = null;\n      while (entries.hasMoreElements()) {\n        JarEntry je = entries.nextElement();\n        String jeName = je.getName();\n        if (Parser.canParse(jeName.toLowerCase())) {\n          InputStream inputStream = jf.getInputStream(je);\n          File copyFile = new File(file, jeName);\n          copyFile.getParentFile().mkdirs();\n          Files.copy(inputStream, copyFile.toPath());\n          if (matchesXmlPathInJar(je)) {\n            suitePath = copyFile.toString();\n          }\n        } else if (isJavaClass(je)) {\n          classes.add(constructClassName(je));\n        }\n      }\n      if (Strings.isNullOrEmpty(suitePath)) {\n        return false;\n      }\n      Collection<XmlSuite> parsedSuites = Parser.parse(suitePath, processor);\n      delete(file);\n      for (XmlSuite suite : parsedSuites) {\n        // If test names were specified, only run these test names\n        if (testNames != null) {\n          TestNamesMatcher testNamesMatcher = new TestNamesMatcher(suite, testNames);\n          testNamesMatcher.validateMissMatchedTestNames();\n          suites.addAll(testNamesMatcher.getSuitesMatchingTestNames());\n        } else {\n          suites.add(suite);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private void delete(File f) throws IOException {\n    if (f.isDirectory()) {\n      for (File c : Objects.requireNonNull(f.listFiles())) delete(c);\n    }\n    if (!f.delete()) throw new FileNotFoundException(\"Failed to delete file: \" + f);\n  }\n\n  private boolean matchesXmlPathInJar(JarEntry je) {\n    return je.getName().equals(xmlPathInJar);\n  }\n\n  private static boolean isJavaClass(JarEntry je) {\n    return je.getName().endsWith(\".class\");\n  }\n\n  private static String constructClassName(JarEntry je) {\n    int n = je.getName().length() - \".class\".length();\n    return je.getName().replace(\"/\", \".\").substring(0, n);\n  }\n}\n"], "fixing_code": ["package org.testng;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.Files;\nimport java.util.Collection;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\nimport org.testng.collections.Lists;\nimport org.testng.internal.Utils;\nimport org.testng.util.Strings;\nimport org.testng.xml.IPostProcessor;\nimport org.testng.xml.XmlSuite;\nimport org.testng.xml.internal.Parser;\nimport org.testng.xml.internal.TestNamesMatcher;\nimport org.testng.xml.internal.XmlSuiteUtils;\n\n/** A Utility for extracting {@link XmlSuite} from a jar. */\nclass JarFileUtils {\n  private final IPostProcessor processor;\n  private final String xmlPathInJar;\n  private final List<String> testNames;\n  private final List<XmlSuite> suites = Lists.newLinkedList();\n  private final XmlSuite.ParallelMode mode;\n\n  JarFileUtils(IPostProcessor processor, String xmlPathInJar, List<String> testNames) {\n    this(processor, xmlPathInJar, testNames, XmlSuite.ParallelMode.NONE);\n  }\n\n  JarFileUtils(\n      IPostProcessor processor,\n      String xmlPathInJar,\n      List<String> testNames,\n      XmlSuite.ParallelMode mode) {\n    this.processor = processor;\n    this.xmlPathInJar = xmlPathInJar;\n    this.testNames = testNames;\n    this.mode = mode == null ? XmlSuite.ParallelMode.NONE : mode;\n  }\n\n  List<XmlSuite> extractSuitesFrom(File jarFile) {\n    try {\n\n      Utils.log(\"TestNG\", 2, \"Trying to open jar file:\" + jarFile);\n\n      List<String> classes = Lists.newArrayList();\n      boolean foundTestngXml = testngXmlExistsInJar(jarFile, classes);\n      if (!foundTestngXml) {\n        Utils.log(\n            \"TestNG\",\n            1,\n            \"Couldn't find the \" + xmlPathInJar + \" in the jar file, running all the classes\");\n        XmlSuite suite = XmlSuiteUtils.newXmlSuiteUsing(classes);\n        suite.setParallel(this.mode);\n        suites.add(suite);\n      }\n    } catch (IOException ex) {\n      throw new TestNGException(ex);\n    }\n    return suites;\n  }\n\n  private boolean testngXmlExistsInJar(File jarFile, List<String> classes) throws IOException {\n    try (JarFile jf = new JarFile(jarFile)) {\n      Enumeration<JarEntry> entries = jf.entries();\n      File file = java.nio.file.Files.createTempDirectory(\"testngXmlPathInJar-\").toFile();\n      String suitePath = null;\n      while (entries.hasMoreElements()) {\n        JarEntry je = entries.nextElement();\n        String jeName = je.getName();\n        if (Parser.canParse(jeName.toLowerCase())) {\n          InputStream inputStream = jf.getInputStream(je);\n          File copyFile = new File(file, jeName);\n          if (!copyFile.toPath().normalize().startsWith(file.toPath().normalize())) {\n            throw new IOException(\"Bad zip entry\");\n          }\n          copyFile.getParentFile().mkdirs();\n          Files.copy(inputStream, copyFile.toPath());\n          if (matchesXmlPathInJar(je)) {\n            suitePath = copyFile.toString();\n          }\n        } else if (isJavaClass(je)) {\n          classes.add(constructClassName(je));\n        }\n      }\n      if (Strings.isNullOrEmpty(suitePath)) {\n        return false;\n      }\n      Collection<XmlSuite> parsedSuites = Parser.parse(suitePath, processor);\n      delete(file);\n      for (XmlSuite suite : parsedSuites) {\n        // If test names were specified, only run these test names\n        if (testNames != null) {\n          TestNamesMatcher testNamesMatcher = new TestNamesMatcher(suite, testNames);\n          testNamesMatcher.validateMissMatchedTestNames();\n          suites.addAll(testNamesMatcher.getSuitesMatchingTestNames());\n        } else {\n          suites.add(suite);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private void delete(File f) throws IOException {\n    if (f.isDirectory()) {\n      for (File c : Objects.requireNonNull(f.listFiles())) delete(c);\n    }\n    if (!f.delete()) throw new FileNotFoundException(\"Failed to delete file: \" + f);\n  }\n\n  private boolean matchesXmlPathInJar(JarEntry je) {\n    return je.getName().equals(xmlPathInJar);\n  }\n\n  private static boolean isJavaClass(JarEntry je) {\n    return je.getName().endsWith(\".class\");\n  }\n\n  private static String constructClassName(JarEntry je) {\n    int n = je.getName().length() - \".class\".length();\n    return je.getName().replace(\"/\", \".\").substring(0, n);\n  }\n}\n"], "filenames": ["testng-core/src/main/java/org/testng/JarFileUtils.java"], "buggy_code_start_loc": [78], "buggy_code_end_loc": [78], "fixing_code_start_loc": [79], "fixing_code_end_loc": [82], "type": "CWE-22", "message": "A vulnerability was found in cbeust testng 7.5.0/7.6.0/7.6.1/7.7.0. It has been declared as critical. Affected by this vulnerability is the function testngXmlExistsInJar of the file testng-core/src/main/java/org/testng/JarFileUtils.java of the component XML File Parser. The manipulation leads to path traversal. The attack can be launched remotely. Upgrading to version 7.5.1 and 7.7.1 is able to address this issue. The name of the patch is 9150736cd2c123a6a3b60e6193630859f9f0422b. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-214027.", "other": {"cve": {"id": "CVE-2022-4065", "sourceIdentifier": "cna@vuldb.com", "published": "2022-11-19T19:15:10.433", "lastModified": "2023-04-29T07:15:07.957", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A vulnerability was found in cbeust testng 7.5.0/7.6.0/7.6.1/7.7.0. It has been declared as critical. Affected by this vulnerability is the function testngXmlExistsInJar of the file testng-core/src/main/java/org/testng/JarFileUtils.java of the component XML File Parser. The manipulation leads to path traversal. The attack can be launched remotely. Upgrading to version 7.5.1 and 7.7.1 is able to address this issue. The name of the patch is 9150736cd2c123a6a3b60e6193630859f9f0422b. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-214027."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:testng_project:testng:-:*:*:*:*:*:*:*", "matchCriteriaId": "6387724B-CA13-43F8-B37E-1601E8B4078E"}]}]}], "references": [{"url": "https://github.com/cbeust/testng/commit/9150736cd2c123a6a3b60e6193630859f9f0422b", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/cbeust/testng/pull/2806", "source": "cna@vuldb.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/cbeust/testng/releases/tag/7.7.1", "source": "cna@vuldb.com"}, {"url": "https://vuldb.com/?ctiid.214027", "source": "cna@vuldb.com"}, {"url": "https://vuldb.com/?id.214027", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cbeust/testng/commit/9150736cd2c123a6a3b60e6193630859f9f0422b"}}