{"buggy_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsCommentGradeModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        $idProducts = Tools::getValue('id_products');\n        /* @var ProductCommentRepository $productCommentRepository */\n\n        header('Content-Type: application/json');\n\n        if (!is_array($idProducts)) {\n            return $this->ajaxRender(null);\n        }\n\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $productsCommentsNb = $productCommentRepository->getCommentsNumberForProducts($idProducts, Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $averageGrade = $productCommentRepository->getAverageGrades($idProducts, Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n\n        $resultFormated = [];\n\n        foreach ($idProducts as $i => $id) {\n            $resultFormated[] = [\n                'id_product' => $id,\n                'comments_nb' => $productsCommentsNb[$id],\n                'average_grade' => $averageGrade[$id],\n            ];\n        }\n\n        $this->ajaxRender(\n            json_encode(\n                [\n                    'products' => $resultFormated,\n                ]\n            )\n        );\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsListCommentsModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        $idProduct = Tools::getValue('id_product');\n        $page = Tools::getValue('page', 1);\n        $isLastNameAnynomus = Configuration::get('PRODUCT_COMMENTS_ANONYMISATION');\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $productComments = $productCommentRepository->paginate(\n            $idProduct,\n            $page,\n            (int) Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'),\n            (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE')\n        );\n        $productCommentsNb = $productCommentRepository->getCommentsNumber(\n            $idProduct,\n            (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE')\n        );\n\n        $responseArray = [\n            'comments_nb' => $productCommentsNb,\n            'comments_per_page' => Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'),\n            'comments' => [],\n        ];\n\n        foreach ($productComments as $productComment) {\n            $dateAdd = new \\DateTime($productComment['date_add'], new \\DateTimeZone('UTC'));\n            $dateAdd->setTimezone(new \\DateTimeZone(date_default_timezone_get()));\n            $dateFormatter = new \\IntlDateFormatter(\n                $this->context->language->locale,\n                \\IntlDateFormatter::SHORT,\n                \\IntlDateFormatter::SHORT\n            );\n            $productComment['customer_name'] = htmlentities($productComment['customer_name']);\n            $productComment['title'] = htmlentities($productComment['title']);\n            $productComment['content'] = htmlentities($productComment['content']);\n            $productComment['date_add'] = $dateFormatter->format($dateAdd);\n\n            if ($isLastNameAnynomus) {\n                $productComment['lastname'] = substr($productComment['lastname'], 0, 1) . '.';\n            }\n\n            $usefulness = $productCommentRepository->getProductCommentUsefulness($productComment['id_product_comment']);\n            $productComment = array_merge($productComment, $usefulness);\n            if (empty($productComment['customer_name']) && !isset($productComment['firstname']) && !isset($productComment['lastname'])) {\n                $productComment['customer_name'] = $this->trans('Deleted account', [], 'Modules.Productcomments.Shop');\n            }\n\n            $responseArray['comments'][] = $productComment;\n        }\n\n        header('Content-Type: application/json');\n        $this->ajaxRender(\n            json_encode(\n                $responseArray\n            )\n        );\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nuse PrestaShop\\Module\\ProductComment\\Addons\\CategoryFetcher;\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentCriterionRepository;\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\n\nclass ProductComments extends Module implements WidgetInterface\n{\n    const INSTALL_SQL_FILE = 'install.sql';\n\n    private $_html = '';\n\n    private $_productCommentsCriterionTypes = [];\n    private $_baseUrl;\n\n    public function __construct()\n    {\n        $this->name = 'productcomments';\n        $this->tab = 'front_office_features';\n        $this->version = '4.2.1';\n        $this->author = 'PrestaShop';\n        $this->need_instance = 0;\n        $this->bootstrap = true;\n\n        parent::__construct();\n\n        $this->displayName = $this->trans('Product Comments', [], 'Modules.Productcomments.Admin');\n        $this->description = $this->trans('Allow users to post reviews on your products and/or rate them based on specific criteria.', [], 'Modules.Productcomments.Admin');\n\n        $this->ps_versions_compliancy = ['min' => '1.7.6', 'max' => _PS_VERSION_];\n    }\n\n    public function install($keep = true)\n    {\n        if (Shop::isFeatureActive()) {\n            Shop::setContext(Shop::CONTEXT_ALL);\n        }\n\n        if ($keep) {\n            if (!file_exists(dirname(__FILE__) . '/' . self::INSTALL_SQL_FILE)) {\n                return false;\n            } elseif (!$sql = file_get_contents(dirname(__FILE__) . '/' . self::INSTALL_SQL_FILE)) {\n                return false;\n            }\n            $sql = str_replace(['PREFIX_', 'ENGINE_TYPE'], [_DB_PREFIX_, _MYSQL_ENGINE_], $sql);\n            $sql = preg_split(\"/;\\s*[\\r\\n]+/\", trim($sql));\n\n            foreach ($sql as $query) {\n                if (!Db::getInstance()->execute(trim($query))) {\n                    return false;\n                }\n            }\n        }\n\n        if (parent::install() == false ||\n            !$this->registerHook('displayFooterProduct') || //Product page footer\n            !$this->registerHook('header') || //Adds css and javascript on front\n            !$this->registerHook('displayProductListReviews') || //Product list miniature\n            !$this->registerHook('displayProductAdditionalInfo') || //Display info in checkout column\n\n            !$this->registerHook('registerGDPRConsent') ||\n            !$this->registerHook('actionDeleteGDPRCustomer') ||\n            !$this->registerHook('actionExportGDPRData') ||\n\n            !Configuration::updateValue('PRODUCT_COMMENTS_MINIMAL_TIME', 30) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_ALLOW_GUESTS', 0) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_USEFULNESS', 1) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', 5) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_ANONYMISATION', 0) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_MODERATE', 1)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function uninstall($keep = true)\n    {\n        if (!parent::uninstall() || ($keep && !$this->deleteTables()) ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_MODERATE') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_COMMENTS_PER_PAGE') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_ANONYMISATION') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_ALLOW_GUESTS') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_USEFULNESS') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_MINIMAL_TIME') ||\n\n            !$this->unregisterHook('registerGDPRConsent') ||\n            !$this->unregisterHook('actionDeleteGDPRCustomer') ||\n            !$this->unregisterHook('actionExportGDPRData') ||\n\n            !$this->unregisterHook('displayProductAdditionalInfo') ||\n            !$this->unregisterHook('header') ||\n            !$this->unregisterHook('displayFooterProduct') ||\n            !$this->unregisterHook('displayProductListReviews')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function reset()\n    {\n        if (!$this->uninstall(false)) {\n            return false;\n        }\n        if (!$this->install(false)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function deleteTables()\n    {\n        return Db::getInstance()->execute('\n\t\t\tDROP TABLE IF EXISTS\n\t\t\t`' . _DB_PREFIX_ . 'product_comment`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_product`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_lang`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_category`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_grade`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_usefulness`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_report`');\n    }\n\n    public function getCacheId($id_product = null)\n    {\n        return parent::getCacheId() . '|' . (int) $id_product;\n    }\n\n    protected function _postProcess()\n    {\n        if (Tools::isSubmit('submitModerate')) {\n            Configuration::updateValue('PRODUCT_COMMENTS_MODERATE', (int) Tools::getValue('PRODUCT_COMMENTS_MODERATE'));\n            Configuration::updateValue('PRODUCT_COMMENTS_ALLOW_GUESTS', (int) Tools::getValue('PRODUCT_COMMENTS_ALLOW_GUESTS'));\n            Configuration::updateValue('PRODUCT_COMMENTS_USEFULNESS', (int) Tools::getValue('PRODUCT_COMMENTS_USEFULNESS'));\n            Configuration::updateValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', (int) Tools::getValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'));\n            Configuration::updateValue('PRODUCT_COMMENTS_ANONYMISATION', (int) Tools::getValue('PRODUCT_COMMENTS_ANONYMISATION'));\n            Configuration::updateValue('PRODUCT_COMMENTS_MINIMAL_TIME', (int) Tools::getValue('PRODUCT_COMMENTS_MINIMAL_TIME'));\n            $this->_html .= '<div class=\"conf confirm alert alert-success\">' . $this->trans('Settings updated', [], 'Modules.Productcomments.Admin') . '</div>';\n        } elseif (Tools::isSubmit('productcomments')) {\n            $id_product_comment = (int) Tools::getValue('id_product_comment');\n            $comment = new ProductComment($id_product_comment);\n            $comment->validate();\n            ProductComment::deleteReports($id_product_comment);\n        } elseif (Tools::isSubmit('deleteproductcomments')) {\n            $id_product_comment = (int) Tools::getValue('id_product_comment');\n            $comment = new ProductComment($id_product_comment);\n            $comment->delete();\n        } elseif (Tools::isSubmit('submitEditCriterion')) {\n            $criterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            $criterion->id_product_comment_criterion_type = Tools::getValue('id_product_comment_criterion_type');\n            $criterion->active = Tools::getValue('active');\n\n            $languages = Language::getLanguages();\n            $name = [];\n            foreach ($languages as $key => $value) {\n                $name[$value['id_lang']] = Tools::getValue('name_' . $value['id_lang']);\n            }\n            $criterion->name = $name;\n\n            if (!$criterion->validateFields(false) || !$criterion->validateFieldsLang(false)) {\n                $this->_html .= '<div class=\"conf confirm alert alert-danger\">' . $this->trans('The criterion cannot be saved', [], 'Modules.Productcomments.Admin') . '</div>';\n            } else {\n                $criterion->save();\n\n                // Clear before reinserting data\n                $criterion->deleteCategories();\n                $criterion->deleteProducts();\n                if ($criterion->id_product_comment_criterion_type == 2) {\n                    if ($categories = Tools::getValue('categoryBox')) {\n                        if (count($categories)) {\n                            foreach ($categories as $id_category) {\n                                $criterion->addCategory((int) $id_category);\n                            }\n                        }\n                    }\n                } elseif ($criterion->id_product_comment_criterion_type == 3) {\n                    if ($products = Tools::getValue('ids_product')) {\n                        if (count($products)) {\n                            foreach ($products as $product) {\n                                $criterion->addProduct((int) $product);\n                            }\n                        }\n                    }\n                }\n                if ($criterion->save()) {\n                    Tools::redirectAdmin(Context::getContext()->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'conf' => 4]));\n                } else {\n                    $this->_html .= '<div class=\"conf confirm alert alert-danger\">' . $this->trans('The criterion cannot be saved', [], 'Modules.Productcomments.Admin') . '</div>';\n                }\n            }\n        } elseif (Tools::isSubmit('deleteproductcommentscriterion')) {\n            $productCommentCriterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            if ($productCommentCriterion->id) {\n                if ($productCommentCriterion->delete()) {\n                    $this->_html .= '<div class=\"conf confirm alert alert-success\">' . $this->trans('Criterion deleted', [], 'Modules.Productcomments.Admin') . '</div>';\n                }\n            }\n        } elseif (Tools::isSubmit('statusproductcommentscriterion')) {\n            $criterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            if ($criterion->id) {\n                $criterion->active = (int) (!$criterion->active);\n                $criterion->save();\n            }\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'conf' => 4, 'module_name' => $this->name]));\n        } elseif ($id_product_comment = (int) Tools::getValue('approveComment')) {\n            $comment = new ProductComment($id_product_comment);\n            $comment->validate();\n        } elseif ($id_product_comment = (int) Tools::getValue('noabuseComment')) {\n            ProductComment::deleteReports($id_product_comment);\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name]));\n        }\n\n        $this->_clearcache('productcomments_reviews.tpl');\n    }\n\n    public function getContent()\n    {\n        include_once dirname(__FILE__) . '/ProductComment.php';\n        include_once dirname(__FILE__) . '/ProductCommentCriterion.php';\n\n        $this->_html = '';\n        if (Tools::isSubmit('updateproductcommentscriterion')) {\n            $this->_html .= $this->renderCriterionForm((int) Tools::getValue('id_product_comment_criterion'));\n        } else {\n            $this->_postProcess();\n            $this->_html .= $this->renderConfigForm();\n            $this->_html .= $this->renderModerateLists();\n            $this->_html .= $this->renderCriterionList();\n            $this->_html .= $this->renderCommentsList();\n\n            $this->context->controller->addCss($this->_path . 'views/css/module-addons-suggestion.css');\n            $this->_html .= $this->renderAddonsSuggestion();\n        }\n\n        $this->_setBaseUrl();\n        $this->_productCommentsCriterionTypes = ProductCommentCriterion::getTypes();\n\n        $this->context->controller->addJs($this->_path . 'js/moderate.js');\n\n        return $this->_html;\n    }\n\n    private function _setBaseUrl()\n    {\n        $this->_baseUrl = 'index.php?';\n        foreach ($_GET as $k => $value) {\n            if (!in_array($k, ['deleteCriterion', 'editCriterion'])) {\n                $this->_baseUrl .= $k . '=' . $value . '&';\n            }\n        }\n        $this->_baseUrl = rtrim($this->_baseUrl, '&');\n    }\n\n    public function renderConfigForm()\n    {\n        $fields_form_1 = [\n            'form' => [\n                'legend' => [\n                    'title' => $this->trans('Configuration', [], 'Modules.Productcomments.Admin'),\n                    'icon' => 'icon-cogs',\n                ],\n                'input' => [\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('All reviews must be validated by an employee', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_MODERATE',\n                        'values' => [\n                                        [\n                                            'id' => 'active_on',\n                                            'value' => 1,\n                                            'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                        [\n                                            'id' => 'active_off',\n                                            'value' => 0,\n                                            'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                    ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Allow guest reviews', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_ALLOW_GUESTS',\n                        'values' => [\n                                        [\n                                            'id' => 'active_on',\n                                            'value' => 1,\n                                            'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                        [\n                                            'id' => 'active_off',\n                                            'value' => 0,\n                                            'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                    ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Enable upvotes / downvotes on reviews', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_USEFULNESS',\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Anonymize the user\\'s last name', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_ANONYMISATION',\n                        'desc' => $this->trans('Display only initials, e.g. John D.', [], 'Modules.Productcomments.Admin'),\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'text',\n                        'label' => $this->trans('Minimum time between 2 reviews from the same user', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_MINIMAL_TIME',\n                        'class' => 'fixed-width-xs',\n                        'suffix' => 'seconds',\n                    ],\n                    [\n                        'type' => 'text',\n                        'label' => $this->trans('Number of comments per page', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_COMMENTS_PER_PAGE',\n                        'class' => 'fixed-width-xs',\n                        'suffix' => 'comments',\n                    ],\n                ],\n            'submit' => [\n                'title' => $this->trans('Save', [], 'Modules.Productcomments.Admin'),\n                'class' => 'btn btn-default pull-right',\n                'name' => 'submitModerate',\n                ],\n            ],\n        ];\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->name;\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->module = $this;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'submitProducCommentsConfiguration';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'module_name' => $this->name]);\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = [\n            'fields_value' => $this->getConfigFieldsValues(),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        ];\n\n        return $helper->generateForm([$fields_form_1]);\n    }\n\n    public function renderModerateLists()\n    {\n        require_once dirname(__FILE__) . '/ProductComment.php';\n        $return = null;\n\n        if (Configuration::get('PRODUCT_COMMENTS_MODERATE')) {\n            $comments = ProductComment::getByValidate(0, false);\n\n            $fields_list = $this->getStandardFieldList();\n\n            if (version_compare(_PS_VERSION_, '1.6', '<')) {\n                $return .= '<h1>' . $this->trans('Reviews waiting for approval', [], 'Modules.Productcomments.Admin') . '</h1>';\n                $actions = ['enable', 'delete'];\n            } else {\n                $actions = ['approve', 'delete'];\n            }\n\n            $helper = new HelperList();\n            $helper->list_id = 'form-productcomments-moderate-list';\n            $helper->shopLinkType = '';\n            $helper->simple_header = true;\n            $helper->actions = $actions;\n            $helper->show_toolbar = false;\n            $helper->module = $this;\n            $helper->listTotal = count($comments);\n            $helper->identifier = 'id_product_comment';\n            $helper->title = $this->trans('Reviews waiting for approval', [], 'Modules.Productcomments.Admin');\n            $helper->table = $this->name;\n            $helper->token = Tools::getAdminTokenLite('AdminModules');\n            $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n            $helper->no_link = true;\n\n            $return .= $helper->generateList($comments, $fields_list);\n        }\n\n        $comments = ProductComment::getReportedComments();\n\n        $fields_list = $this->getStandardFieldList();\n\n        $actions = ['delete', 'noabuse'];\n\n        $helper = new HelperList();\n        $helper->list_id = 'form-productcomments-reported-list';\n        $helper->shopLinkType = '';\n        $helper->simple_header = true;\n        $helper->actions = $actions;\n        $helper->show_toolbar = false;\n        $helper->module = $this;\n        $helper->listTotal = count($comments);\n        $helper->identifier = 'id_product_comment';\n        $helper->title = $this->trans('Reported Reviews', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name;\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n        $helper->no_link = true;\n\n        $return .= $helper->generateList($comments, $fields_list);\n\n        return $return;\n    }\n\n    /**\n     * Method used by the HelperList to render the approve link\n     *\n     * @param string $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return false|string\n     */\n    public function displayApproveLink($token, $id, $name = null)\n    {\n        $this->smarty->assign([\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'approveComment' => $id]),\n            'action' => $this->trans('Approve', [], 'Modules.Productcomments.Admin'),\n        ]);\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_approve.tpl');\n    }\n\n    /**\n     * Method used by the HelperList to render the approve link\n     *\n     * @param string $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return false|string\n     */\n    public function displayNoabuseLink($token, $id, $name = null)\n    {\n        $this->smarty->assign([\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'noabuseComment' => $id]),\n            'action' => $this->trans('Not abusive', [], 'Modules.Productcomments.Admin'),\n        ]);\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_noabuse.tpl');\n    }\n\n    public function renderCriterionList()\n    {\n        include_once dirname(__FILE__) . '/ProductCommentCriterion.php';\n\n        $criterions = ProductCommentCriterion::getCriterions($this->context->language->id, false, false);\n\n        $fields_list = [\n            'id_product_comment_criterion' => [\n                'title' => $this->trans('ID', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'name' => [\n                'title' => $this->trans('Name', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'type_name' => [\n                'title' => $this->trans('Type', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'active' => [\n                'title' => $this->trans('Status', [], 'Modules.Productcomments.Admin'),\n                'active' => 'status',\n                'type' => 'bool',\n            ],\n        ];\n\n        $helper = new HelperList();\n        $helper->shopLinkType = '';\n        $helper->simple_header = false;\n        $helper->actions = ['edit', 'delete'];\n        $helper->show_toolbar = true;\n        $helper->toolbar_btn['new'] = [\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'updateproductcommentscriterion' => '']),\n            'desc' => $this->trans('Add New Criterion', [], 'Modules.Productcomments.Admin'),\n        ];\n        $helper->module = $this;\n        $helper->identifier = 'id_product_comment_criterion';\n        $helper->title = $this->trans('Review Criteria', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name . 'criterion';\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n\n        return $helper->generateList($criterions, $fields_list);\n    }\n\n    public function renderCommentsList()\n    {\n        require_once dirname(__FILE__) . '/ProductComment.php';\n\n        $fields_list = $this->getStandardFieldList();\n\n        $helper = new HelperList();\n        $helper->list_id = 'form-productcomments-list';\n        $helper->shopLinkType = '';\n        $helper->simple_header = false;\n        $helper->actions = ['delete'];\n        $helper->show_toolbar = false;\n        $helper->module = $this;\n        $helper->identifier = 'id_product_comment';\n        $helper->title = $this->trans('Approved Reviews', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name;\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n        $helper->no_link = true;\n\n        $page = ($page = Tools::getValue('submitFilter' . $helper->list_id)) ? $page : 1;\n        $pagination = ($pagination = Tools::getValue($helper->list_id . '_pagination')) ? $pagination : 50;\n\n        $moderate = Configuration::get('PRODUCT_COMMENTS_MODERATE');\n        if (empty($moderate)) {\n            $comments = ProductComment::getByValidate(0, false, (int) $page, (int) $pagination, true);\n            $count = (int) ProductComment::getCountByValidate(0, true);\n        } else {\n            $comments = ProductComment::getByValidate(1, false, (int) $page, (int) $pagination);\n            $count = (int) ProductComment::getCountByValidate(1);\n        }\n\n        $helper->listTotal = $count;\n\n        return $helper->generateList($comments, $fields_list);\n    }\n\n    public function renderAddonsSuggestion()\n    {\n        $categoryFetcher = new CategoryFetcher(\n            480,\n            [\n                'name' => 'Customer reviews',\n                'link' => '/en/480-customer-reviews',\n                'description' => '<h2>Display customer reviews on your store!</h2>Customer reviews reassure your visitors and help you improve conversion! Encourage your customers to leave a review, display them, and do not forget to use rich snippets to show your products\u2019 satisfaction ratings on search engines: they will be more visible!',\n            ]\n        );\n        $category = $categoryFetcher->getData($this->context->language->iso_code);\n        $this->context->smarty->assign([\n            'addons_category' => $category,\n        ]);\n\n        return $this->context->smarty->fetch('module:productcomments/views/templates/admin/addons-suggestion.tpl');\n    }\n\n    public function getConfigFieldsValues()\n    {\n        return [\n            'PRODUCT_COMMENTS_MODERATE' => Tools::getValue('PRODUCT_COMMENTS_MODERATE', Configuration::get('PRODUCT_COMMENTS_MODERATE')),\n            'PRODUCT_COMMENTS_ALLOW_GUESTS' => Tools::getValue('PRODUCT_COMMENTS_ALLOW_GUESTS', Configuration::get('PRODUCT_COMMENTS_ALLOW_GUESTS')),\n            'PRODUCT_COMMENTS_USEFULNESS' => Tools::getValue('PRODUCT_COMMENTS_USEFULNESS', Configuration::get('PRODUCT_COMMENTS_USEFULNESS')),\n            'PRODUCT_COMMENTS_MINIMAL_TIME' => Tools::getValue('PRODUCT_COMMENTS_MINIMAL_TIME', Configuration::get('PRODUCT_COMMENTS_MINIMAL_TIME')),\n            'PRODUCT_COMMENTS_COMMENTS_PER_PAGE' => Tools::getValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE')),\n            'PRODUCT_COMMENTS_ANONYMISATION' => Tools::getValue('PRODUCT_COMMENTS_ANONYMISATION', Configuration::get('PRODUCT_COMMENTS_ANONYMISATION')),\n        ];\n    }\n\n    public function getCriterionFieldsValues($id = 0)\n    {\n        $criterion = new ProductCommentCriterion($id);\n\n        return [\n                    'name' => $criterion->name,\n                    'id_product_comment_criterion_type' => $criterion->id_product_comment_criterion_type,\n                    'active' => $criterion->active,\n                    'id_product_comment_criterion' => $criterion->id,\n                ];\n    }\n\n    public function getStandardFieldList()\n    {\n        return [\n            'id_product_comment' => [\n                'title' => $this->trans('ID', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n            ],\n            'title' => [\n                'title' => $this->trans('Review title', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n            ],\n            'content' => [\n                'title' => $this->trans('Review', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n            ],\n            'grade' => [\n                'title' => $this->trans('Rating', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'suffix' => '/5',\n                'search' => false,\n            ],\n            'customer_name' => [\n                'title' => $this->trans('Author', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n            ],\n            'name' => [\n                'title' => $this->trans('Product', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n            ],\n            'date_add' => [\n                'title' => $this->trans('Time of publication', [], 'Modules.Productcomments.Admin'),\n                'type' => 'date',\n                'search' => false,\n            ],\n        ];\n    }\n\n    public function renderCriterionForm($id_criterion = 0)\n    {\n        $types = ProductCommentCriterion::getTypes();\n        $query = [];\n        foreach ($types as $key => $value) {\n            $query[] = [\n                    'id' => $key,\n                    'label' => $value,\n                ];\n        }\n\n        $criterion = new ProductCommentCriterion((int) $id_criterion);\n        $selected_categories = $criterion->getCategories();\n\n        $product_table_values = Product::getSimpleProducts($this->context->language->id);\n        $selected_products = $criterion->getProducts();\n        foreach ($product_table_values as $key => $product) {\n            if (false !== array_search($product['id_product'], $selected_products)) {\n                $product_table_values[$key]['selected'] = 1;\n            }\n        }\n\n        if (version_compare(_PS_VERSION_, '1.6', '<')) {\n            $field_category_tree = [\n                                    'type' => 'categories_select',\n                                    'name' => 'categoryBox',\n                                    'label' => $this->trans('Criterion will be restricted to the following categories', [], 'Modules.Productcomments.Admin'),\n                                    'category_tree' => $this->initCategoriesAssociation(null, $id_criterion),\n                                ];\n        } else {\n            $field_category_tree = [\n                            'type' => 'categories',\n                            'label' => $this->trans('Criterion will be restricted to the following categories', [], 'Modules.Productcomments.Admin'),\n                            'name' => 'categoryBox',\n                            'desc' => $this->trans('Mark the boxes of categories to which this criterion applies.', [], 'Modules.Productcomments.Admin'),\n                            'tree' => [\n                                'use_search' => false,\n                                'id' => 'categoryBox',\n                                'use_checkbox' => true,\n                                'selected_categories' => $selected_categories,\n                            ],\n                            //retro compat 1.5 for category tree\n                            'values' => [\n                                'trads' => [\n                                    'Root' => Category::getTopCategory(),\n                                    'selected' => $this->trans('Selected', [], 'Modules.Productcomments.Admin'),\n                                    'Collapse All' => $this->trans('Collapse All', [], 'Modules.Productcomments.Admin'),\n                                    'Expand All' => $this->trans('Expand All', [], 'Modules.Productcomments.Admin'),\n                                    'Check All' => $this->trans('Check All', [], 'Modules.Productcomments.Admin'),\n                                    'Uncheck All' => $this->trans('Uncheck All', [], 'Modules.Productcomments.Admin'),\n                                ],\n                                'selected_cat' => $selected_categories,\n                                'input_name' => 'categoryBox[]',\n                                'use_radio' => false,\n                                'use_search' => false,\n                                'disabled_categories' => [],\n                                'top_category' => Category::getTopCategory(),\n                                'use_context' => true,\n                            ],\n                        ];\n        }\n\n        $fields_form_1 = [\n            'form' => [\n                'legend' => [\n                    'title' => $this->trans('Add new criterion', [], 'Modules.Productcomments.Admin'),\n                    'icon' => 'icon-cogs',\n                ],\n                'input' => [\n                    [\n                        'type' => 'hidden',\n                        'name' => 'id_product_comment_criterion',\n                    ],\n                    [\n                        'type' => 'text',\n                        'lang' => true,\n                        'label' => $this->trans('Criterion name', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'name',\n                        'desc' => $this->trans('Maximum length: %s characters', [ProductCommentCriterion::NAME_MAX_LENGTH], 'Modules.Productcomments.Admin'),\n                    ],\n                    [\n                        'type' => 'select',\n                        'name' => 'id_product_comment_criterion_type',\n                        'label' => $this->trans('Application scope of the criterion', [], 'Modules.Productcomments.Admin'),\n                        'options' => [\n                                        'query' => $query,\n                                        'id' => 'id',\n                                        'name' => 'label',\n                                    ],\n                    ],\n                    $field_category_tree,\n                    [\n                        'type' => 'products',\n                        'label' => $this->trans('The criterion will be restricted to the following products', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'ids_product',\n                        'values' => $product_table_values,\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Active', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'active',\n                        'values' => [\n                                        [\n                                            'id' => 'active_on',\n                                            'value' => 1,\n                                            'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                        [\n                                            'id' => 'active_off',\n                                            'value' => 0,\n                                            'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                    ],\n                    ],\n                ],\n            'submit' => [\n                'title' => $this->trans('Save', [], 'Modules.Productcomments.Admin'),\n                'class' => 'btn btn-default pull-right',\n                'name' => 'submitEditCriterion',\n                ],\n            ],\n        ];\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->name;\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->module = $this;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'submitEditCriterion';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'module_name' => $this->name]);\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = [\n            'fields_value' => $this->getCriterionFieldsValues($id_criterion),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        ];\n\n        return $helper->generateForm([$fields_form_1]);\n    }\n\n    public function initCategoriesAssociation($id_root = null, $id_criterion = 0)\n    {\n        if (is_null($id_root)) {\n            $id_root = Configuration::get('PS_ROOT_CATEGORY');\n        }\n        $id_shop = (int) Tools::getValue('id_shop');\n        $shop = new Shop($id_shop);\n        if ($id_criterion == 0) {\n            $selected_cat = [];\n        } else {\n            $pdc_object = new ProductCommentCriterion($id_criterion);\n            $selected_cat = $pdc_object->getCategories();\n        }\n\n        if (Shop::getContext() == Shop::CONTEXT_SHOP && Tools::isSubmit('id_shop')) {\n            $root_category = new Category($shop->id_category);\n        } else {\n            $root_category = new Category($id_root);\n        }\n        $root_category = ['id_category' => $root_category->id, 'name' => $root_category->name[$this->context->language->id]];\n\n        $helper = new Helper();\n\n        return $helper->renderCategoryTree($root_category, $selected_cat, 'categoryBox', false, true);\n    }\n\n    public function hookActionDeleteGDPRCustomer($customer)\n    {\n        if (isset($customer['id'])) {\n            /** @var ProductCommentRepository $productCommentRepository */\n            $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n            $productCommentRepository->cleanCustomerData($customer['id']);\n        }\n\n        return true;\n    }\n\n    public function hookActionExportGDPRData($customer)\n    {\n        if (isset($customer['id'])) {\n            /** @var ProductCommentRepository $productCommentRepository */\n            $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n            $langId = isset($customer['id_lang']) ? $customer['id_lang'] : $this->context->language->id;\n\n            return json_encode($productCommentRepository->getCustomerData($customer['id'], $langId));\n        }\n    }\n\n    /**\n     *  Inject the needed javascript and css files in the appropriate pages\n     */\n    public function hookHeader()\n    {\n        $jsList = [];\n        $cssList = [];\n\n        $cssList[] = '/modules/productcomments/views/css/productcomments.css';\n        $jsList[] = '/modules/productcomments/views/js/jquery.rating.plugin.js';\n        $jsList[] = '/modules/productcomments/views/js/productListingComments.js';\n        if ($this->context->controller instanceof ProductControllerCore) {\n            $jsList[] = '/modules/productcomments/views/js/post-comment.js';\n            $jsList[] = '/modules/productcomments/views/js/list-comments.js';\n            $jsList[] = '/modules/productcomments/views/js/jquery.simplePagination.js';\n        }\n        foreach ($cssList as $cssUrl) {\n            $this->context->controller->registerStylesheet(sha1($cssUrl), $cssUrl, ['media' => 'all', 'priority' => 80]);\n        }\n        foreach ($jsList as $jsUrl) {\n            $this->context->controller->registerJavascript(sha1($jsUrl), $jsUrl, ['position' => 'bottom', 'priority' => 80]);\n        }\n    }\n\n    /**\n     * Display the comment list with the post modal at the bottom of the page\n     *\n     * @param array $params\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function hookDisplayFooterProduct($params)\n    {\n        return $this->renderProductCommentsList($params['product']) . $this->renderProductCommentModal($params['product']);\n    }\n\n    /**\n     * Used to render the product comments list\n     *\n     * @param Product $product\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    private function renderProductCommentsList($product)\n    {\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $averageGrade = $productCommentRepository->getAverageGrade($product->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $commentsNb = $productCommentRepository->getCommentsNumber($product->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $isPostAllowed = $productCommentRepository->isPostAllowed($product->id, (int) $this->context->cookie->id_customer, (int) $this->context->cookie->id_guest);\n\n        $this->context->smarty->assign([\n            'post_allowed' => $isPostAllowed,\n            'usefulness_enabled' => Configuration::get('PRODUCT_COMMENTS_USEFULNESS'),\n            'average_grade' => $averageGrade,\n            'nb_comments' => $commentsNb,\n            'list_comments_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'ListComments',\n                ['id_product' => $product->id]\n            ),\n            'update_comment_usefulness_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'UpdateCommentUsefulness'\n            ),\n            'report_comment_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'ReportComment'\n            ),\n        ]);\n\n        return $this->context->smarty->fetch('module:productcomments/views/templates/hook/product-comments-list.tpl');\n    }\n\n    /**\n     * Used to render the product modal\n     *\n     * @param Product $product\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    private function renderProductCommentModal($product)\n    {\n        /** @var ProductCommentCriterionRepository $criterionRepository */\n        $criterionRepository = $this->context->controller->getContainer()->get('product_comment_criterion_repository');\n        $criterions = $criterionRepository->getByProduct($product->id, $this->context->language->id);\n\n        $this->context->smarty->assign([\n            'logged' => (bool) $this->context->cookie->id_customer,\n            'post_comment_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'PostComment',\n                ['id_product' => $product->id]\n            ),\n            'moderation_active' => (int) Configuration::get('PRODUCT_COMMENTS_MODERATE'),\n            'criterions' => $criterions,\n            'product' => $product,\n        ]);\n\n        return $this->context->smarty->fetch('module:productcomments/views/templates/hook/post-comment-modal.tpl');\n    }\n\n    public function getWidgetVariables($hookName = null, array $configuration = [])\n    {\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n        $averageGrade = $productCommentRepository->getAverageGrade($configuration['id_product'], Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $commentsNb = $productCommentRepository->getCommentsNumber($configuration['id_product'], Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $isPostAllowed = $productCommentRepository->isPostAllowed($configuration['id_product'], (int) $this->context->cookie->id_customer, (int) $this->context->cookie->id_guest);\n\n        return [\n            'average_grade' => $averageGrade,\n            'nb_comments' => $commentsNb,\n            'post_allowed' => $isPostAllowed,\n        ];\n    }\n\n    public function renderWidget($hookName = null, array $configuration = [])\n    {\n        $variables = [];\n        $tplHookPath = 'module:productcomments/views/templates/hook/';\n\n        if ('displayProductListReviews' === $hookName || isset($configuration['type']) && 'product_list' === $configuration['type']) {\n            $product = $configuration['product'];\n            $idProduct = $product['id_product'];\n            $variables = $this->getWidgetVariables($hookName, ['id_product' => $idProduct]);\n\n            $variables = array_merge($variables, [\n                'product' => $product,\n                'product_comment_grade_url' => $this->context->link->getModuleLink('productcomments', 'CommentGrade'),\n            ]);\n\n            $filePath = $tplHookPath . 'product-list-reviews.tpl';\n        } elseif ($this->context->controller instanceof ProductControllerCore) {\n            $idProduct = $this->context->controller->getProduct()->id;\n            $variables = $this->getWidgetVariables($hookName, ['id_product' => $idProduct]);\n\n            $filePath = 'quickview' === Tools::getValue('action') ? $tplHookPath . 'product-additional-info-quickview.tpl' : $tplHookPath . 'product-additional-info.tpl';\n        }\n\n        if (empty($variables) || empty($filePath)) {\n            return false;\n        }\n\n        $this->smarty->assign($variables);\n\n        return $this->fetch($filePath);\n    }\n\n    /**\n     * empty listener for registerGDPRConsent hook\n     */\n    public function hookRegisterGDPRConsent()\n    {\n        /* registerGDPRConsent is a special kind of hook that doesn't need a listener, see :\n           https://build.prestashop.com/howtos/module/how-to-make-your-module-compliant-with-prestashop-official-gdpr-compliance-module/\n          However since Prestashop 1.7.8, modules must implement a listener for all the hooks they register: a check is made\n          at module installation.\n        */\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\n\nnamespace PrestaShop\\Module\\ProductComment\\Repository;\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\DBAL\\Query\\QueryBuilder;\n\nclass ProductCommentRepository\n{\n    /**\n     * @var Connection the Database connection\n     */\n    private $connection;\n\n    /**\n     * @var string the Database prefix\n     */\n    private $databasePrefix;\n\n    /**\n     * @var bool\n     */\n    private $guestCommentsAllowed;\n\n    /**\n     * @var int\n     */\n    private $commentsMinimalTime;\n\n    /**\n     * @param Connection $connection\n     * @param string $databasePrefix\n     * @param bool $guestCommentsAllowed\n     * @param int $commentsMinimalTime\n     */\n    public function __construct(\n        Connection $connection,\n        $databasePrefix,\n        $guestCommentsAllowed,\n        $commentsMinimalTime\n    ) {\n        $this->connection = $connection;\n        $this->databasePrefix = $databasePrefix;\n        $this->guestCommentsAllowed = (bool) $guestCommentsAllowed;\n        $this->commentsMinimalTime = (int) $commentsMinimalTime;\n    }\n\n    /**\n     * @param int $productId\n     * @param int $page\n     * @param int $commentsPerPage\n     * @param bool $validatedOnly\n     *\n     * @return array\n     */\n    public function paginate($productId, $page, $commentsPerPage, $validatedOnly)\n    {\n        /** @var QueryBuilder $qb */\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->addSelect('pc.id_product, pc.id_product_comment, pc.title, pc.content, pc.customer_name, pc.date_add, pc.grade')\n            ->addSelect('c.firstname, c.lastname')\n            ->from($this->databasePrefix . 'product_comment', 'pc')\n            ->leftJoin('pc', $this->databasePrefix . 'customer', 'c', 'pc.id_customer = c.id_customer AND c.deleted = :not_deleted')\n            ->andWhere('pc.id_product = :id_product')\n            ->andWhere('pc.deleted = :not_deleted')\n            ->setParameter('not_deleted', 0)\n            ->setParameter('id_product', $productId)\n            ->setMaxResults($commentsPerPage)\n            ->setFirstResult(($page - 1) * $commentsPerPage)\n            ->addGroupBy('pc.id_product_comment')\n            ->addOrderBy('pc.date_add', 'DESC')\n        ;\n\n        if ($validatedOnly) {\n            $qb\n                ->andWhere('pc.validate = :validate')\n                ->setParameter('validate', 1)\n            ;\n        }\n\n        return $qb->execute()->fetchAll();\n    }\n\n    /**\n     * @param int $productCommentId\n     *\n     * @return array\n     */\n    public function getProductCommentUsefulness($productCommentId)\n    {\n        /** @var QueryBuilder $qb */\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->addSelect('pcu.usefulness')\n            ->from($this->databasePrefix . 'product_comment_usefulness', 'pcu')\n            ->andWhere('pcu.id_product_comment = :id_product_comment')\n            ->setParameter('id_product_comment', $productCommentId)\n        ;\n\n        $usefulnessInfos = [\n            'usefulness' => 0,\n            'total_usefulness' => 0,\n        ];\n        $customerAppreciations = $qb->execute()->fetchAll();\n        foreach ($customerAppreciations as $customerAppreciation) {\n            if ((int) $customerAppreciation['usefulness']) {\n                ++$usefulnessInfos['usefulness'];\n            }\n            ++$usefulnessInfos['total_usefulness'];\n        }\n\n        return $usefulnessInfos;\n    }\n\n    /**\n     * @param int $productId\n     * @param bool $validatedOnly\n     *\n     * @return float\n     */\n    public function getAverageGrade($productId, $validatedOnly)\n    {\n        /** @var QueryBuilder $qb */\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->select('SUM(pc.grade) / COUNT(pc.grade) AS averageGrade')\n            ->from($this->databasePrefix . 'product_comment', 'pc')\n            ->andWhere('pc.id_product = :id_product')\n            ->andWhere('pc.deleted = :deleted')\n            ->setParameter('deleted', 0)\n            ->setParameter('id_product', $productId)\n        ;\n\n        if ($validatedOnly) {\n            $qb\n                ->andWhere('pc.validate = :validate')\n                ->setParameter('validate', 1)\n            ;\n        }\n\n        return (float) $qb->execute()->fetchColumn();\n    }\n\n    /**\n     * @param array $productIds\n     * @param bool $validatedOnly\n     *\n     * @return array\n     */\n    public function getAverageGrades(array $productIds, $validatedOnly)\n    {\n        $sql = 'SELECT';\n\n        $count = count($productIds);\n\n        foreach ($productIds as $index => $id) {\n            $esqID = pSQL($id);\n\n            $sql .= ' SUM(IF(id_product = ' . $esqID . ' AND deleted = 0';\n            if ($validatedOnly) {\n                $sql .= ' AND validate = 1';\n            }\n            $sql .= ',grade, 0))';\n            $sql .= ' / SUM(IF(id_product = ' . $esqID . ' AND deleted = 0';\n            if ($validatedOnly) {\n                $sql .= ' AND validate = 1';\n            }\n            $sql .= ',1, 0)) AS \"' . $esqID . '\"';\n\n            if ($count - 1 > $index) {\n                $sql .= ',';\n            }\n        }\n\n        $sql .= ' FROM ' . $this->databasePrefix . 'product_comment';\n\n        $query = $this->connection->prepare($sql);\n        $query->execute();\n\n        return (array) $query->fetch();\n    }\n\n    /**\n     * @param int $productId\n     * @param bool $validatedOnly\n     *\n     * @return int\n     */\n    public function getCommentsNumber($productId, $validatedOnly)\n    {\n        /** @var QueryBuilder $qb */\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->select('COUNT(pc.id_product_comment) AS commentNb')\n            ->from($this->databasePrefix . 'product_comment', 'pc')\n            ->andWhere('pc.id_product = :id_product')\n            ->andWhere('pc.deleted = :deleted')\n            ->setParameter('deleted', 0)\n            ->setParameter('id_product', $productId)\n        ;\n\n        if ($validatedOnly) {\n            $qb\n                ->andWhere('pc.validate = :validate')\n                ->setParameter('validate', 1)\n            ;\n        }\n\n        return (int) $qb->execute()->fetchColumn();\n    }\n\n    /**\n     * @param array $productIds\n     * @param bool $validatedOnly\n     *\n     * @return array\n     */\n    public function getCommentsNumberForProducts(array $productIds, $validatedOnly)\n    {\n        $sql = 'SELECT';\n\n        $count = count($productIds);\n\n        foreach ($productIds as $index => $id) {\n            $esqID = pSQL($id);\n\n            $sql .= ' SUM(IF(id_product = ' . $esqID . ' AND deleted = 0';\n            if ($validatedOnly) {\n                $sql .= ' AND validate = 1';\n            }\n            $sql .= ' ,1, 0)) AS \"' . $esqID . '\"';\n\n            if ($count - 1 > $index) {\n                $sql .= ',';\n            }\n        }\n\n        $sql .= ' FROM ' . $this->databasePrefix . 'product_comment';\n\n        // return $sql;\n\n        $query = $this->connection->prepare($sql);\n        $query->execute();\n\n        return (array) $query->fetch();\n    }\n\n    /**\n     * @param int $productId\n     * @param int $idCustomer\n     * @param int $idGuest\n     *\n     * @return bool\n     */\n    public function isPostAllowed($productId, $idCustomer, $idGuest)\n    {\n        if (!$idCustomer && !$this->guestCommentsAllowed) {\n            $postAllowed = false;\n        } else {\n            $lastCustomerComment = null;\n            if ($idCustomer) {\n                $lastCustomerComment = $this->getLastCustomerComment($productId, $idCustomer);\n            } elseif ($idGuest) {\n                $lastCustomerComment = $this->getLastGuestComment($productId, $idGuest);\n            }\n            $postAllowed = true;\n            if (null !== $lastCustomerComment && isset($lastCustomerComment['date_add'])) {\n                $postDate = new \\DateTime($lastCustomerComment['date_add'], new \\DateTimeZone('UTC'));\n                if (time() - $postDate->getTimestamp() < $this->commentsMinimalTime) {\n                    $postAllowed = false;\n                }\n            }\n        }\n\n        return $postAllowed;\n    }\n\n    /**\n     * @param int $productId\n     * @param int $idCustomer\n     *\n     * @return array\n     */\n    public function getLastCustomerComment($productId, $idCustomer)\n    {\n        return $this->getLastComment(['id_product' => $productId, 'id_customer' => $idCustomer]);\n    }\n\n    /**\n     * @param int $productId\n     * @param int $idGuest\n     *\n     * @return array\n     */\n    public function getLastGuestComment($productId, $idGuest)\n    {\n        return $this->getLastComment(['id_product' => $productId, 'id_guest' => $idGuest]);\n    }\n\n    /**\n     * @param int $customerId\n     */\n    public function cleanCustomerData($customerId)\n    {\n        //We anonymize the customer comment by unlinking them (the name won't be visible any more but the grade and comment are still visible)\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->update($this->databasePrefix . 'product_comment', 'pc')\n            ->set('id_customer', (string) 0)\n            ->andWhere('pc.id_customer = :id_customer')\n            ->setParameter('id_customer', $customerId)\n        ;\n        $qb->execute();\n\n        //But we remove every report and votes for comments\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->delete($this->databasePrefix . 'product_comment_report')\n            ->andWhere('id_customer = :id_customer')\n            ->setParameter('id_customer', $customerId)\n        ;\n        $qb->execute();\n\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->delete($this->databasePrefix . 'product_comment_usefulness')\n            ->andWhere('id_customer = :id_customer')\n            ->setParameter('id_customer', $customerId)\n        ;\n        $qb->execute();\n    }\n\n    /**\n     * @param int $customerId\n     * @param int $langId\n     *\n     * @return array\n     */\n    public function getCustomerData($customerId, $langId)\n    {\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->select('pl.name, pc.id_product, pc.id_product_comment, pc.title, pc.content, pc.grade, pc.validate, pc.deleted, pcu.usefulness, pc.date_add')\n            ->from($this->databasePrefix . 'product_comment', 'pc')\n            ->leftJoin('pc', $this->databasePrefix . 'product_comment_usefulness', 'pcu', 'pc.id_product_comment = pcu.id_product_comment')\n            ->leftJoin('pc', $this->databasePrefix . 'product', 'p', 'pc.id_product = p.id_product')\n            ->leftJoin('p', $this->databasePrefix . 'product_lang', 'pl', 'p.id_product = pl.id_product')\n            ->leftJoin('pl', $this->databasePrefix . 'lang', 'l', 'pl.id_lang = l.id_lang')\n            ->andWhere('pc.id_customer = :id_customer')\n            ->andWhere('l.id_lang = :id_lang')\n            ->setParameter('id_customer', $customerId)\n            ->setParameter('id_lang', $langId)\n            ->addGroupBy('pc.id_product_comment')\n            ->addOrderBy('pc.date_add', 'ASC')\n        ;\n\n        return $qb->execute()->fetchAll();\n    }\n\n    /**\n     * @param array $criteria\n     *\n     * @return array\n     */\n    private function getLastComment(array $criteria)\n    {\n        /** @var QueryBuilder $qb */\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->select('pc.*')\n            ->from($this->databasePrefix . 'product_comment', 'pc')\n            ->andWhere('pc.deleted = :deleted')\n            ->setParameter('deleted', 0)\n            ->addOrderBy('pc.date_add', 'DESC')\n            ->setMaxResults(1)\n        ;\n\n        foreach ($criteria as $field => $value) {\n            $qb\n                ->andWhere(sprintf('pc.%s = :%s', $field, $field))\n                ->setParameter($field, $value)\n            ;\n        }\n\n        $comments = $qb->execute()->fetchAll();\n\n        return empty($comments) ? [] : $comments[0];\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsCommentGradeModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        $idProducts = Tools::getValue('id_products');\n        /* @var ProductCommentRepository $productCommentRepository */\n\n        header('Content-Type: application/json');\n\n        if (!is_array($idProducts)) {\n            return $this->ajaxRender(null);\n        }\n\n        $idProducts = array_unique(array_map('intval', $idProducts));\n\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $productsCommentsNb = $productCommentRepository->getCommentsNumberForProducts($idProducts, Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $averageGrade = $productCommentRepository->getAverageGrades($idProducts, Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n\n        $resultFormated = [];\n\n        foreach ($idProducts as $i => $id) {\n            $resultFormated[] = [\n                'id_product' => $id,\n                'comments_nb' => $productsCommentsNb[$id],\n                'average_grade' => $averageGrade[$id],\n            ];\n        }\n\n        $this->ajaxRender(\n            json_encode(\n                [\n                    'products' => $resultFormated,\n                ]\n            )\n        );\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsListCommentsModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        $idProduct = (int) Tools::getValue('id_product');\n        $page = (int) Tools::getValue('page', 1);\n        $isLastNameAnynomus = Configuration::get('PRODUCT_COMMENTS_ANONYMISATION');\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $productComments = $productCommentRepository->paginate(\n            $idProduct,\n            $page,\n            (int) Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'),\n            (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE')\n        );\n        $productCommentsNb = $productCommentRepository->getCommentsNumber(\n            $idProduct,\n            (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE')\n        );\n\n        $responseArray = [\n            'comments_nb' => $productCommentsNb,\n            'comments_per_page' => Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'),\n            'comments' => [],\n        ];\n\n        foreach ($productComments as $productComment) {\n            $dateAdd = new \\DateTime($productComment['date_add'], new \\DateTimeZone('UTC'));\n            $dateAdd->setTimezone(new \\DateTimeZone(date_default_timezone_get()));\n            $dateFormatter = new \\IntlDateFormatter(\n                $this->context->language->locale,\n                \\IntlDateFormatter::SHORT,\n                \\IntlDateFormatter::SHORT\n            );\n            $productComment['customer_name'] = htmlentities($productComment['customer_name']);\n            $productComment['title'] = htmlentities($productComment['title']);\n            $productComment['content'] = htmlentities($productComment['content']);\n            $productComment['date_add'] = $dateFormatter->format($dateAdd);\n\n            if ($isLastNameAnynomus) {\n                $productComment['lastname'] = substr($productComment['lastname'], 0, 1) . '.';\n            }\n\n            $usefulness = $productCommentRepository->getProductCommentUsefulness($productComment['id_product_comment']);\n            $productComment = array_merge($productComment, $usefulness);\n            if (empty($productComment['customer_name']) && !isset($productComment['firstname']) && !isset($productComment['lastname'])) {\n                $productComment['customer_name'] = $this->trans('Deleted account', [], 'Modules.Productcomments.Shop');\n            }\n\n            $responseArray['comments'][] = $productComment;\n        }\n\n        header('Content-Type: application/json');\n        $this->ajaxRender(\n            json_encode(\n                $responseArray\n            )\n        );\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nuse PrestaShop\\Module\\ProductComment\\Addons\\CategoryFetcher;\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentCriterionRepository;\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\n\nclass ProductComments extends Module implements WidgetInterface\n{\n    const INSTALL_SQL_FILE = 'install.sql';\n\n    private $_html = '';\n\n    private $_productCommentsCriterionTypes = [];\n    private $_baseUrl;\n\n    public function __construct()\n    {\n        $this->name = 'productcomments';\n        $this->tab = 'front_office_features';\n        $this->version = '4.2.1';\n        $this->author = 'PrestaShop';\n        $this->need_instance = 0;\n        $this->bootstrap = true;\n\n        parent::__construct();\n\n        $this->displayName = $this->trans('Product Comments', [], 'Modules.Productcomments.Admin');\n        $this->description = $this->trans('Allow users to post reviews on your products and/or rate them based on specific criteria.', [], 'Modules.Productcomments.Admin');\n\n        $this->ps_versions_compliancy = ['min' => '1.7.6', 'max' => _PS_VERSION_];\n    }\n\n    public function install($keep = true)\n    {\n        if (Shop::isFeatureActive()) {\n            Shop::setContext(Shop::CONTEXT_ALL);\n        }\n\n        if ($keep) {\n            if (!file_exists(dirname(__FILE__) . '/' . self::INSTALL_SQL_FILE)) {\n                return false;\n            } elseif (!$sql = file_get_contents(dirname(__FILE__) . '/' . self::INSTALL_SQL_FILE)) {\n                return false;\n            }\n            $sql = str_replace(['PREFIX_', 'ENGINE_TYPE'], [_DB_PREFIX_, _MYSQL_ENGINE_], $sql);\n            $sql = preg_split(\"/;\\s*[\\r\\n]+/\", trim($sql));\n\n            foreach ($sql as $query) {\n                if (!Db::getInstance()->execute(trim($query))) {\n                    return false;\n                }\n            }\n        }\n\n        if (parent::install() == false ||\n            !$this->registerHook('displayFooterProduct') || //Product page footer\n            !$this->registerHook('header') || //Adds css and javascript on front\n            !$this->registerHook('displayProductListReviews') || //Product list miniature\n            !$this->registerHook('displayProductAdditionalInfo') || //Display info in checkout column\n\n            !$this->registerHook('registerGDPRConsent') ||\n            !$this->registerHook('actionDeleteGDPRCustomer') ||\n            !$this->registerHook('actionExportGDPRData') ||\n\n            !Configuration::updateValue('PRODUCT_COMMENTS_MINIMAL_TIME', 30) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_ALLOW_GUESTS', 0) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_USEFULNESS', 1) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', 5) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_ANONYMISATION', 0) ||\n            !Configuration::updateValue('PRODUCT_COMMENTS_MODERATE', 1)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function uninstall($keep = true)\n    {\n        if (!parent::uninstall() || ($keep && !$this->deleteTables()) ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_MODERATE') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_COMMENTS_PER_PAGE') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_ANONYMISATION') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_ALLOW_GUESTS') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_USEFULNESS') ||\n            !Configuration::deleteByName('PRODUCT_COMMENTS_MINIMAL_TIME') ||\n\n            !$this->unregisterHook('registerGDPRConsent') ||\n            !$this->unregisterHook('actionDeleteGDPRCustomer') ||\n            !$this->unregisterHook('actionExportGDPRData') ||\n\n            !$this->unregisterHook('displayProductAdditionalInfo') ||\n            !$this->unregisterHook('header') ||\n            !$this->unregisterHook('displayFooterProduct') ||\n            !$this->unregisterHook('displayProductListReviews')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function reset()\n    {\n        if (!$this->uninstall(false)) {\n            return false;\n        }\n        if (!$this->install(false)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function deleteTables()\n    {\n        return Db::getInstance()->execute('\n\t\t\tDROP TABLE IF EXISTS\n\t\t\t`' . _DB_PREFIX_ . 'product_comment`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_product`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_lang`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_criterion_category`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_grade`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_usefulness`,\n\t\t\t`' . _DB_PREFIX_ . 'product_comment_report`');\n    }\n\n    public function getCacheId($id_product = null)\n    {\n        return parent::getCacheId() . '|' . (int) $id_product;\n    }\n\n    protected function _postProcess()\n    {\n        if (Tools::isSubmit('submitModerate')) {\n            Configuration::updateValue('PRODUCT_COMMENTS_MODERATE', (int) Tools::getValue('PRODUCT_COMMENTS_MODERATE'));\n            Configuration::updateValue('PRODUCT_COMMENTS_ALLOW_GUESTS', (int) Tools::getValue('PRODUCT_COMMENTS_ALLOW_GUESTS'));\n            Configuration::updateValue('PRODUCT_COMMENTS_USEFULNESS', (int) Tools::getValue('PRODUCT_COMMENTS_USEFULNESS'));\n            Configuration::updateValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', (int) Tools::getValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'));\n            Configuration::updateValue('PRODUCT_COMMENTS_ANONYMISATION', (int) Tools::getValue('PRODUCT_COMMENTS_ANONYMISATION'));\n            Configuration::updateValue('PRODUCT_COMMENTS_MINIMAL_TIME', (int) Tools::getValue('PRODUCT_COMMENTS_MINIMAL_TIME'));\n            $this->_html .= '<div class=\"conf confirm alert alert-success\">' . $this->trans('Settings updated', [], 'Modules.Productcomments.Admin') . '</div>';\n        } elseif (Tools::isSubmit('productcomments')) {\n            $id_product_comment = (int) Tools::getValue('id_product_comment');\n            $comment = new ProductComment($id_product_comment);\n            $comment->validate();\n            ProductComment::deleteReports($id_product_comment);\n        } elseif (Tools::isSubmit('deleteproductcomments')) {\n            $id_product_comment = (int) Tools::getValue('id_product_comment');\n            $comment = new ProductComment($id_product_comment);\n            $comment->delete();\n        } elseif (Tools::isSubmit('submitEditCriterion')) {\n            $criterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            $criterion->id_product_comment_criterion_type = (int) Tools::getValue('id_product_comment_criterion_type');\n            $criterion->active = Tools::getValue('active');\n\n            $languages = Language::getLanguages();\n            $name = [];\n            foreach ($languages as $key => $value) {\n                $name[$value['id_lang']] = Tools::getValue('name_' . $value['id_lang']);\n            }\n            $criterion->name = $name;\n\n            if (!$criterion->validateFields(false) || !$criterion->validateFieldsLang(false)) {\n                $this->_html .= '<div class=\"conf confirm alert alert-danger\">' . $this->trans('The criterion cannot be saved', [], 'Modules.Productcomments.Admin') . '</div>';\n            } else {\n                $criterion->save();\n\n                // Clear before reinserting data\n                $criterion->deleteCategories();\n                $criterion->deleteProducts();\n                if ($criterion->id_product_comment_criterion_type == 2) {\n                    if ($categories = Tools::getValue('categoryBox')) {\n                        if (count($categories)) {\n                            foreach ($categories as $id_category) {\n                                $criterion->addCategory((int) $id_category);\n                            }\n                        }\n                    }\n                } elseif ($criterion->id_product_comment_criterion_type == 3) {\n                    if ($products = Tools::getValue('ids_product')) {\n                        if (count($products)) {\n                            foreach ($products as $product) {\n                                $criterion->addProduct((int) $product);\n                            }\n                        }\n                    }\n                }\n                if ($criterion->save()) {\n                    Tools::redirectAdmin(Context::getContext()->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'conf' => 4]));\n                } else {\n                    $this->_html .= '<div class=\"conf confirm alert alert-danger\">' . $this->trans('The criterion cannot be saved', [], 'Modules.Productcomments.Admin') . '</div>';\n                }\n            }\n        } elseif (Tools::isSubmit('deleteproductcommentscriterion')) {\n            $productCommentCriterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            if ($productCommentCriterion->id) {\n                if ($productCommentCriterion->delete()) {\n                    $this->_html .= '<div class=\"conf confirm alert alert-success\">' . $this->trans('Criterion deleted', [], 'Modules.Productcomments.Admin') . '</div>';\n                }\n            }\n        } elseif (Tools::isSubmit('statusproductcommentscriterion')) {\n            $criterion = new ProductCommentCriterion((int) Tools::getValue('id_product_comment_criterion'));\n            if ($criterion->id) {\n                $criterion->active = (int) (!$criterion->active);\n                $criterion->save();\n            }\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'conf' => 4, 'module_name' => $this->name]));\n        } elseif ($id_product_comment = (int) Tools::getValue('approveComment')) {\n            $comment = new ProductComment($id_product_comment);\n            $comment->validate();\n        } elseif ($id_product_comment = (int) Tools::getValue('noabuseComment')) {\n            ProductComment::deleteReports($id_product_comment);\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name]));\n        }\n\n        $this->_clearcache('productcomments_reviews.tpl');\n    }\n\n    public function getContent()\n    {\n        include_once dirname(__FILE__) . '/ProductComment.php';\n        include_once dirname(__FILE__) . '/ProductCommentCriterion.php';\n\n        $this->_html = '';\n        if (Tools::isSubmit('updateproductcommentscriterion')) {\n            $this->_html .= $this->renderCriterionForm((int) Tools::getValue('id_product_comment_criterion'));\n        } else {\n            $this->_postProcess();\n            $this->_html .= $this->renderConfigForm();\n            $this->_html .= $this->renderModerateLists();\n            $this->_html .= $this->renderCriterionList();\n            $this->_html .= $this->renderCommentsList();\n\n            $this->context->controller->addCss($this->_path . 'views/css/module-addons-suggestion.css');\n            $this->_html .= $this->renderAddonsSuggestion();\n        }\n\n        $this->_setBaseUrl();\n        $this->_productCommentsCriterionTypes = ProductCommentCriterion::getTypes();\n\n        $this->context->controller->addJs($this->_path . 'js/moderate.js');\n\n        return $this->_html;\n    }\n\n    private function _setBaseUrl()\n    {\n        $this->_baseUrl = 'index.php?';\n        foreach ($_GET as $k => $value) {\n            if (!in_array($k, ['deleteCriterion', 'editCriterion'])) {\n                $this->_baseUrl .= $k . '=' . $value . '&';\n            }\n        }\n        $this->_baseUrl = rtrim($this->_baseUrl, '&');\n    }\n\n    public function renderConfigForm()\n    {\n        $fields_form_1 = [\n            'form' => [\n                'legend' => [\n                    'title' => $this->trans('Configuration', [], 'Modules.Productcomments.Admin'),\n                    'icon' => 'icon-cogs',\n                ],\n                'input' => [\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('All reviews must be validated by an employee', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_MODERATE',\n                        'values' => [\n                                        [\n                                            'id' => 'active_on',\n                                            'value' => 1,\n                                            'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                        [\n                                            'id' => 'active_off',\n                                            'value' => 0,\n                                            'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                    ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Allow guest reviews', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_ALLOW_GUESTS',\n                        'values' => [\n                                        [\n                                            'id' => 'active_on',\n                                            'value' => 1,\n                                            'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                        [\n                                            'id' => 'active_off',\n                                            'value' => 0,\n                                            'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                    ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Enable upvotes / downvotes on reviews', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_USEFULNESS',\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Anonymize the user\\'s last name', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_ANONYMISATION',\n                        'desc' => $this->trans('Display only initials, e.g. John D.', [], 'Modules.Productcomments.Admin'),\n                        'values' => [\n                            [\n                                'id' => 'active_on',\n                                'value' => 1,\n                                'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                            ],\n                            [\n                                'id' => 'active_off',\n                                'value' => 0,\n                                'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                            ],\n                        ],\n                    ],\n                    [\n                        'type' => 'text',\n                        'label' => $this->trans('Minimum time between 2 reviews from the same user', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_MINIMAL_TIME',\n                        'class' => 'fixed-width-xs',\n                        'suffix' => 'seconds',\n                    ],\n                    [\n                        'type' => 'text',\n                        'label' => $this->trans('Number of comments per page', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'PRODUCT_COMMENTS_COMMENTS_PER_PAGE',\n                        'class' => 'fixed-width-xs',\n                        'suffix' => 'comments',\n                    ],\n                ],\n            'submit' => [\n                'title' => $this->trans('Save', [], 'Modules.Productcomments.Admin'),\n                'class' => 'btn btn-default pull-right',\n                'name' => 'submitModerate',\n                ],\n            ],\n        ];\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->name;\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->module = $this;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'submitProducCommentsConfiguration';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'module_name' => $this->name]);\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = [\n            'fields_value' => $this->getConfigFieldsValues(),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        ];\n\n        return $helper->generateForm([$fields_form_1]);\n    }\n\n    public function renderModerateLists()\n    {\n        require_once dirname(__FILE__) . '/ProductComment.php';\n        $return = null;\n\n        if (Configuration::get('PRODUCT_COMMENTS_MODERATE')) {\n            $comments = ProductComment::getByValidate(0, false);\n\n            $fields_list = $this->getStandardFieldList();\n\n            if (version_compare(_PS_VERSION_, '1.6', '<')) {\n                $return .= '<h1>' . $this->trans('Reviews waiting for approval', [], 'Modules.Productcomments.Admin') . '</h1>';\n                $actions = ['enable', 'delete'];\n            } else {\n                $actions = ['approve', 'delete'];\n            }\n\n            $helper = new HelperList();\n            $helper->list_id = 'form-productcomments-moderate-list';\n            $helper->shopLinkType = '';\n            $helper->simple_header = true;\n            $helper->actions = $actions;\n            $helper->show_toolbar = false;\n            $helper->module = $this;\n            $helper->listTotal = count($comments);\n            $helper->identifier = 'id_product_comment';\n            $helper->title = $this->trans('Reviews waiting for approval', [], 'Modules.Productcomments.Admin');\n            $helper->table = $this->name;\n            $helper->token = Tools::getAdminTokenLite('AdminModules');\n            $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n            $helper->no_link = true;\n\n            $return .= $helper->generateList($comments, $fields_list);\n        }\n\n        $comments = ProductComment::getReportedComments();\n\n        $fields_list = $this->getStandardFieldList();\n\n        $actions = ['delete', 'noabuse'];\n\n        $helper = new HelperList();\n        $helper->list_id = 'form-productcomments-reported-list';\n        $helper->shopLinkType = '';\n        $helper->simple_header = true;\n        $helper->actions = $actions;\n        $helper->show_toolbar = false;\n        $helper->module = $this;\n        $helper->listTotal = count($comments);\n        $helper->identifier = 'id_product_comment';\n        $helper->title = $this->trans('Reported Reviews', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name;\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n        $helper->no_link = true;\n\n        $return .= $helper->generateList($comments, $fields_list);\n\n        return $return;\n    }\n\n    /**\n     * Method used by the HelperList to render the approve link\n     *\n     * @param string $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return false|string\n     */\n    public function displayApproveLink($token, $id, $name = null)\n    {\n        $this->smarty->assign([\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'approveComment' => $id]),\n            'action' => $this->trans('Approve', [], 'Modules.Productcomments.Admin'),\n        ]);\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_approve.tpl');\n    }\n\n    /**\n     * Method used by the HelperList to render the approve link\n     *\n     * @param string $token\n     * @param int $id\n     * @param string|null $name\n     *\n     * @return false|string\n     */\n    public function displayNoabuseLink($token, $id, $name = null)\n    {\n        $this->smarty->assign([\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'noabuseComment' => $id]),\n            'action' => $this->trans('Not abusive', [], 'Modules.Productcomments.Admin'),\n        ]);\n\n        return $this->display(__FILE__, 'views/templates/admin/list_action_noabuse.tpl');\n    }\n\n    public function renderCriterionList()\n    {\n        include_once dirname(__FILE__) . '/ProductCommentCriterion.php';\n\n        $criterions = ProductCommentCriterion::getCriterions($this->context->language->id, false, false);\n\n        $fields_list = [\n            'id_product_comment_criterion' => [\n                'title' => $this->trans('ID', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'name' => [\n                'title' => $this->trans('Name', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'type_name' => [\n                'title' => $this->trans('Type', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n            ],\n            'active' => [\n                'title' => $this->trans('Status', [], 'Modules.Productcomments.Admin'),\n                'active' => 'status',\n                'type' => 'bool',\n            ],\n        ];\n\n        $helper = new HelperList();\n        $helper->shopLinkType = '';\n        $helper->simple_header = false;\n        $helper->actions = ['edit', 'delete'];\n        $helper->show_toolbar = true;\n        $helper->toolbar_btn['new'] = [\n            'href' => $this->context->link->getAdminLink('AdminModules', true, [], ['configure' => $this->name, 'module_name' => $this->name, 'updateproductcommentscriterion' => '']),\n            'desc' => $this->trans('Add New Criterion', [], 'Modules.Productcomments.Admin'),\n        ];\n        $helper->module = $this;\n        $helper->identifier = 'id_product_comment_criterion';\n        $helper->title = $this->trans('Review Criteria', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name . 'criterion';\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n\n        return $helper->generateList($criterions, $fields_list);\n    }\n\n    public function renderCommentsList()\n    {\n        require_once dirname(__FILE__) . '/ProductComment.php';\n\n        $fields_list = $this->getStandardFieldList();\n\n        $helper = new HelperList();\n        $helper->list_id = 'form-productcomments-list';\n        $helper->shopLinkType = '';\n        $helper->simple_header = false;\n        $helper->actions = ['delete'];\n        $helper->show_toolbar = false;\n        $helper->module = $this;\n        $helper->identifier = 'id_product_comment';\n        $helper->title = $this->trans('Approved Reviews', [], 'Modules.Productcomments.Admin');\n        $helper->table = $this->name;\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;\n        $helper->no_link = true;\n\n        $page = ($page = Tools::getValue('submitFilter' . $helper->list_id)) ? $page : 1;\n        $pagination = ($pagination = Tools::getValue($helper->list_id . '_pagination')) ? $pagination : 50;\n\n        $moderate = Configuration::get('PRODUCT_COMMENTS_MODERATE');\n        if (empty($moderate)) {\n            $comments = ProductComment::getByValidate(0, false, (int) $page, (int) $pagination, true);\n            $count = (int) ProductComment::getCountByValidate(0, true);\n        } else {\n            $comments = ProductComment::getByValidate(1, false, (int) $page, (int) $pagination);\n            $count = (int) ProductComment::getCountByValidate(1);\n        }\n\n        $helper->listTotal = $count;\n\n        return $helper->generateList($comments, $fields_list);\n    }\n\n    public function renderAddonsSuggestion()\n    {\n        $categoryFetcher = new CategoryFetcher(\n            480,\n            [\n                'name' => 'Customer reviews',\n                'link' => '/en/480-customer-reviews',\n                'description' => '<h2>Display customer reviews on your store!</h2>Customer reviews reassure your visitors and help you improve conversion! Encourage your customers to leave a review, display them, and do not forget to use rich snippets to show your products\u2019 satisfaction ratings on search engines: they will be more visible!',\n            ]\n        );\n        $category = $categoryFetcher->getData($this->context->language->iso_code);\n        $this->context->smarty->assign([\n            'addons_category' => $category,\n        ]);\n\n        return $this->context->smarty->fetch('module:productcomments/views/templates/admin/addons-suggestion.tpl');\n    }\n\n    public function getConfigFieldsValues()\n    {\n        return [\n            'PRODUCT_COMMENTS_MODERATE' => Tools::getValue('PRODUCT_COMMENTS_MODERATE', Configuration::get('PRODUCT_COMMENTS_MODERATE')),\n            'PRODUCT_COMMENTS_ALLOW_GUESTS' => Tools::getValue('PRODUCT_COMMENTS_ALLOW_GUESTS', Configuration::get('PRODUCT_COMMENTS_ALLOW_GUESTS')),\n            'PRODUCT_COMMENTS_USEFULNESS' => Tools::getValue('PRODUCT_COMMENTS_USEFULNESS', Configuration::get('PRODUCT_COMMENTS_USEFULNESS')),\n            'PRODUCT_COMMENTS_MINIMAL_TIME' => Tools::getValue('PRODUCT_COMMENTS_MINIMAL_TIME', Configuration::get('PRODUCT_COMMENTS_MINIMAL_TIME')),\n            'PRODUCT_COMMENTS_COMMENTS_PER_PAGE' => Tools::getValue('PRODUCT_COMMENTS_COMMENTS_PER_PAGE', Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE')),\n            'PRODUCT_COMMENTS_ANONYMISATION' => Tools::getValue('PRODUCT_COMMENTS_ANONYMISATION', Configuration::get('PRODUCT_COMMENTS_ANONYMISATION')),\n        ];\n    }\n\n    public function getCriterionFieldsValues($id = 0)\n    {\n        $criterion = new ProductCommentCriterion($id);\n\n        return [\n                    'name' => $criterion->name,\n                    'id_product_comment_criterion_type' => $criterion->id_product_comment_criterion_type,\n                    'active' => $criterion->active,\n                    'id_product_comment_criterion' => $criterion->id,\n                ];\n    }\n\n    public function getStandardFieldList()\n    {\n        return [\n            'id_product_comment' => [\n                'title' => $this->trans('ID', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n            ],\n            'title' => [\n                'title' => $this->trans('Review title', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n            ],\n            'content' => [\n                'title' => $this->trans('Review', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n            ],\n            'grade' => [\n                'title' => $this->trans('Rating', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'suffix' => '/5',\n                'search' => false,\n            ],\n            'customer_name' => [\n                'title' => $this->trans('Author', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n            ],\n            'name' => [\n                'title' => $this->trans('Product', [], 'Modules.Productcomments.Admin'),\n                'type' => 'text',\n                'search' => false,\n            ],\n            'date_add' => [\n                'title' => $this->trans('Time of publication', [], 'Modules.Productcomments.Admin'),\n                'type' => 'date',\n                'search' => false,\n            ],\n        ];\n    }\n\n    public function renderCriterionForm($id_criterion = 0)\n    {\n        $types = ProductCommentCriterion::getTypes();\n        $query = [];\n        foreach ($types as $key => $value) {\n            $query[] = [\n                    'id' => $key,\n                    'label' => $value,\n                ];\n        }\n\n        $criterion = new ProductCommentCriterion((int) $id_criterion);\n        $selected_categories = $criterion->getCategories();\n\n        $product_table_values = Product::getSimpleProducts($this->context->language->id);\n        $selected_products = $criterion->getProducts();\n        foreach ($product_table_values as $key => $product) {\n            if (false !== array_search($product['id_product'], $selected_products)) {\n                $product_table_values[$key]['selected'] = 1;\n            }\n        }\n\n        if (version_compare(_PS_VERSION_, '1.6', '<')) {\n            $field_category_tree = [\n                                    'type' => 'categories_select',\n                                    'name' => 'categoryBox',\n                                    'label' => $this->trans('Criterion will be restricted to the following categories', [], 'Modules.Productcomments.Admin'),\n                                    'category_tree' => $this->initCategoriesAssociation(null, $id_criterion),\n                                ];\n        } else {\n            $field_category_tree = [\n                            'type' => 'categories',\n                            'label' => $this->trans('Criterion will be restricted to the following categories', [], 'Modules.Productcomments.Admin'),\n                            'name' => 'categoryBox',\n                            'desc' => $this->trans('Mark the boxes of categories to which this criterion applies.', [], 'Modules.Productcomments.Admin'),\n                            'tree' => [\n                                'use_search' => false,\n                                'id' => 'categoryBox',\n                                'use_checkbox' => true,\n                                'selected_categories' => $selected_categories,\n                            ],\n                            //retro compat 1.5 for category tree\n                            'values' => [\n                                'trads' => [\n                                    'Root' => Category::getTopCategory(),\n                                    'selected' => $this->trans('Selected', [], 'Modules.Productcomments.Admin'),\n                                    'Collapse All' => $this->trans('Collapse All', [], 'Modules.Productcomments.Admin'),\n                                    'Expand All' => $this->trans('Expand All', [], 'Modules.Productcomments.Admin'),\n                                    'Check All' => $this->trans('Check All', [], 'Modules.Productcomments.Admin'),\n                                    'Uncheck All' => $this->trans('Uncheck All', [], 'Modules.Productcomments.Admin'),\n                                ],\n                                'selected_cat' => $selected_categories,\n                                'input_name' => 'categoryBox[]',\n                                'use_radio' => false,\n                                'use_search' => false,\n                                'disabled_categories' => [],\n                                'top_category' => Category::getTopCategory(),\n                                'use_context' => true,\n                            ],\n                        ];\n        }\n\n        $fields_form_1 = [\n            'form' => [\n                'legend' => [\n                    'title' => $this->trans('Add new criterion', [], 'Modules.Productcomments.Admin'),\n                    'icon' => 'icon-cogs',\n                ],\n                'input' => [\n                    [\n                        'type' => 'hidden',\n                        'name' => 'id_product_comment_criterion',\n                    ],\n                    [\n                        'type' => 'text',\n                        'lang' => true,\n                        'label' => $this->trans('Criterion name', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'name',\n                        'desc' => $this->trans('Maximum length: %s characters', [ProductCommentCriterion::NAME_MAX_LENGTH], 'Modules.Productcomments.Admin'),\n                    ],\n                    [\n                        'type' => 'select',\n                        'name' => 'id_product_comment_criterion_type',\n                        'label' => $this->trans('Application scope of the criterion', [], 'Modules.Productcomments.Admin'),\n                        'options' => [\n                                        'query' => $query,\n                                        'id' => 'id',\n                                        'name' => 'label',\n                                    ],\n                    ],\n                    $field_category_tree,\n                    [\n                        'type' => 'products',\n                        'label' => $this->trans('The criterion will be restricted to the following products', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'ids_product',\n                        'values' => $product_table_values,\n                    ],\n                    [\n                        'type' => 'switch',\n                        'is_bool' => true, //retro compat 1.5\n                        'label' => $this->trans('Active', [], 'Modules.Productcomments.Admin'),\n                        'name' => 'active',\n                        'values' => [\n                                        [\n                                            'id' => 'active_on',\n                                            'value' => 1,\n                                            'label' => $this->trans('Yes', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                        [\n                                            'id' => 'active_off',\n                                            'value' => 0,\n                                            'label' => $this->trans('No', [], 'Modules.Productcomments.Admin'),\n                                        ],\n                                    ],\n                    ],\n                ],\n            'submit' => [\n                'title' => $this->trans('Save', [], 'Modules.Productcomments.Admin'),\n                'class' => 'btn btn-default pull-right',\n                'name' => 'submitEditCriterion',\n                ],\n            ],\n        ];\n\n        $helper = new HelperForm();\n        $helper->show_toolbar = false;\n        $helper->table = $this->name;\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->module = $this;\n        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;\n        $helper->identifier = $this->identifier;\n        $helper->submit_action = 'submitEditCriterion';\n        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false, [], ['configure' => $this->name, 'tab_module' => $this->tab, 'module_name' => $this->name]);\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = [\n            'fields_value' => $this->getCriterionFieldsValues($id_criterion),\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id,\n        ];\n\n        return $helper->generateForm([$fields_form_1]);\n    }\n\n    public function initCategoriesAssociation($id_root = null, $id_criterion = 0)\n    {\n        if (is_null($id_root)) {\n            $id_root = Configuration::get('PS_ROOT_CATEGORY');\n        }\n        $id_shop = (int) Tools::getValue('id_shop');\n        $shop = new Shop($id_shop);\n        if ($id_criterion == 0) {\n            $selected_cat = [];\n        } else {\n            $pdc_object = new ProductCommentCriterion($id_criterion);\n            $selected_cat = $pdc_object->getCategories();\n        }\n\n        if (Shop::getContext() == Shop::CONTEXT_SHOP && Tools::isSubmit('id_shop')) {\n            $root_category = new Category($shop->id_category);\n        } else {\n            $root_category = new Category($id_root);\n        }\n        $root_category = ['id_category' => $root_category->id, 'name' => $root_category->name[$this->context->language->id]];\n\n        $helper = new Helper();\n\n        return $helper->renderCategoryTree($root_category, $selected_cat, 'categoryBox', false, true);\n    }\n\n    public function hookActionDeleteGDPRCustomer($customer)\n    {\n        if (isset($customer['id'])) {\n            /** @var ProductCommentRepository $productCommentRepository */\n            $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n            $productCommentRepository->cleanCustomerData($customer['id']);\n        }\n\n        return true;\n    }\n\n    public function hookActionExportGDPRData($customer)\n    {\n        if (isset($customer['id'])) {\n            /** @var ProductCommentRepository $productCommentRepository */\n            $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n            $langId = isset($customer['id_lang']) ? $customer['id_lang'] : $this->context->language->id;\n\n            return json_encode($productCommentRepository->getCustomerData($customer['id'], $langId));\n        }\n    }\n\n    /**\n     *  Inject the needed javascript and css files in the appropriate pages\n     */\n    public function hookHeader()\n    {\n        $jsList = [];\n        $cssList = [];\n\n        $cssList[] = '/modules/productcomments/views/css/productcomments.css';\n        $jsList[] = '/modules/productcomments/views/js/jquery.rating.plugin.js';\n        $jsList[] = '/modules/productcomments/views/js/productListingComments.js';\n        if ($this->context->controller instanceof ProductControllerCore) {\n            $jsList[] = '/modules/productcomments/views/js/post-comment.js';\n            $jsList[] = '/modules/productcomments/views/js/list-comments.js';\n            $jsList[] = '/modules/productcomments/views/js/jquery.simplePagination.js';\n        }\n        foreach ($cssList as $cssUrl) {\n            $this->context->controller->registerStylesheet(sha1($cssUrl), $cssUrl, ['media' => 'all', 'priority' => 80]);\n        }\n        foreach ($jsList as $jsUrl) {\n            $this->context->controller->registerJavascript(sha1($jsUrl), $jsUrl, ['position' => 'bottom', 'priority' => 80]);\n        }\n    }\n\n    /**\n     * Display the comment list with the post modal at the bottom of the page\n     *\n     * @param array $params\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function hookDisplayFooterProduct($params)\n    {\n        return $this->renderProductCommentsList($params['product']) . $this->renderProductCommentModal($params['product']);\n    }\n\n    /**\n     * Used to render the product comments list\n     *\n     * @param Product $product\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    private function renderProductCommentsList($product)\n    {\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $averageGrade = $productCommentRepository->getAverageGrade($product->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $commentsNb = $productCommentRepository->getCommentsNumber($product->id, (bool) Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $isPostAllowed = $productCommentRepository->isPostAllowed($product->id, (int) $this->context->cookie->id_customer, (int) $this->context->cookie->id_guest);\n\n        $this->context->smarty->assign([\n            'post_allowed' => $isPostAllowed,\n            'usefulness_enabled' => Configuration::get('PRODUCT_COMMENTS_USEFULNESS'),\n            'average_grade' => $averageGrade,\n            'nb_comments' => $commentsNb,\n            'list_comments_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'ListComments',\n                ['id_product' => $product->id]\n            ),\n            'update_comment_usefulness_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'UpdateCommentUsefulness'\n            ),\n            'report_comment_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'ReportComment'\n            ),\n        ]);\n\n        return $this->context->smarty->fetch('module:productcomments/views/templates/hook/product-comments-list.tpl');\n    }\n\n    /**\n     * Used to render the product modal\n     *\n     * @param Product $product\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    private function renderProductCommentModal($product)\n    {\n        /** @var ProductCommentCriterionRepository $criterionRepository */\n        $criterionRepository = $this->context->controller->getContainer()->get('product_comment_criterion_repository');\n        $criterions = $criterionRepository->getByProduct($product->id, $this->context->language->id);\n\n        $this->context->smarty->assign([\n            'logged' => (bool) $this->context->cookie->id_customer,\n            'post_comment_url' => $this->context->link->getModuleLink(\n                'productcomments',\n                'PostComment',\n                ['id_product' => $product->id]\n            ),\n            'moderation_active' => (int) Configuration::get('PRODUCT_COMMENTS_MODERATE'),\n            'criterions' => $criterions,\n            'product' => $product,\n        ]);\n\n        return $this->context->smarty->fetch('module:productcomments/views/templates/hook/post-comment-modal.tpl');\n    }\n\n    public function getWidgetVariables($hookName = null, array $configuration = [])\n    {\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n        $averageGrade = $productCommentRepository->getAverageGrade($configuration['id_product'], Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $commentsNb = $productCommentRepository->getCommentsNumber($configuration['id_product'], Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $isPostAllowed = $productCommentRepository->isPostAllowed($configuration['id_product'], (int) $this->context->cookie->id_customer, (int) $this->context->cookie->id_guest);\n\n        return [\n            'average_grade' => $averageGrade,\n            'nb_comments' => $commentsNb,\n            'post_allowed' => $isPostAllowed,\n        ];\n    }\n\n    public function renderWidget($hookName = null, array $configuration = [])\n    {\n        $variables = [];\n        $tplHookPath = 'module:productcomments/views/templates/hook/';\n\n        if ('displayProductListReviews' === $hookName || isset($configuration['type']) && 'product_list' === $configuration['type']) {\n            $product = $configuration['product'];\n            $idProduct = $product['id_product'];\n            $variables = $this->getWidgetVariables($hookName, ['id_product' => $idProduct]);\n\n            $variables = array_merge($variables, [\n                'product' => $product,\n                'product_comment_grade_url' => $this->context->link->getModuleLink('productcomments', 'CommentGrade'),\n            ]);\n\n            $filePath = $tplHookPath . 'product-list-reviews.tpl';\n        } elseif ($this->context->controller instanceof ProductControllerCore) {\n            $idProduct = $this->context->controller->getProduct()->id;\n            $variables = $this->getWidgetVariables($hookName, ['id_product' => $idProduct]);\n\n            $filePath = 'quickview' === Tools::getValue('action') ? $tplHookPath . 'product-additional-info-quickview.tpl' : $tplHookPath . 'product-additional-info.tpl';\n        }\n\n        if (empty($variables) || empty($filePath)) {\n            return false;\n        }\n\n        $this->smarty->assign($variables);\n\n        return $this->fetch($filePath);\n    }\n\n    /**\n     * empty listener for registerGDPRConsent hook\n     */\n    public function hookRegisterGDPRConsent()\n    {\n        /* registerGDPRConsent is a special kind of hook that doesn't need a listener, see :\n           https://build.prestashop.com/howtos/module/how-to-make-your-module-compliant-with-prestashop-official-gdpr-compliance-module/\n          However since Prestashop 1.7.8, modules must implement a listener for all the hooks they register: a check is made\n          at module installation.\n        */\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\n\nnamespace PrestaShop\\Module\\ProductComment\\Repository;\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\DBAL\\Query\\QueryBuilder;\n\nclass ProductCommentRepository\n{\n    /**\n     * @var Connection the Database connection\n     */\n    private $connection;\n\n    /**\n     * @var string the Database prefix\n     */\n    private $databasePrefix;\n\n    /**\n     * @var bool\n     */\n    private $guestCommentsAllowed;\n\n    /**\n     * @var int\n     */\n    private $commentsMinimalTime;\n\n    /**\n     * @param Connection $connection\n     * @param string $databasePrefix\n     * @param bool $guestCommentsAllowed\n     * @param int $commentsMinimalTime\n     */\n    public function __construct(\n        Connection $connection,\n        $databasePrefix,\n        $guestCommentsAllowed,\n        $commentsMinimalTime\n    ) {\n        $this->connection = $connection;\n        $this->databasePrefix = $databasePrefix;\n        $this->guestCommentsAllowed = (bool) $guestCommentsAllowed;\n        $this->commentsMinimalTime = (int) $commentsMinimalTime;\n    }\n\n    /**\n     * @param int $productId\n     * @param int $page\n     * @param int $commentsPerPage\n     * @param bool $validatedOnly\n     *\n     * @return array\n     */\n    public function paginate($productId, $page, $commentsPerPage, $validatedOnly)\n    {\n        /** @var QueryBuilder $qb */\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->addSelect('pc.id_product, pc.id_product_comment, pc.title, pc.content, pc.customer_name, pc.date_add, pc.grade')\n            ->addSelect('c.firstname, c.lastname')\n            ->from($this->databasePrefix . 'product_comment', 'pc')\n            ->leftJoin('pc', $this->databasePrefix . 'customer', 'c', 'pc.id_customer = c.id_customer AND c.deleted = :not_deleted')\n            ->andWhere('pc.id_product = :id_product')\n            ->andWhere('pc.deleted = :not_deleted')\n            ->setParameter('not_deleted', 0)\n            ->setParameter('id_product', $productId)\n            ->setMaxResults($commentsPerPage)\n            ->setFirstResult(($page - 1) * $commentsPerPage)\n            ->addGroupBy('pc.id_product_comment')\n            ->addOrderBy('pc.date_add', 'DESC')\n        ;\n\n        if ($validatedOnly) {\n            $qb\n                ->andWhere('pc.validate = :validate')\n                ->setParameter('validate', 1)\n            ;\n        }\n\n        return $qb->execute()->fetchAll();\n    }\n\n    /**\n     * @param int $productCommentId\n     *\n     * @return array\n     */\n    public function getProductCommentUsefulness($productCommentId)\n    {\n        /** @var QueryBuilder $qb */\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->addSelect('pcu.usefulness')\n            ->from($this->databasePrefix . 'product_comment_usefulness', 'pcu')\n            ->andWhere('pcu.id_product_comment = :id_product_comment')\n            ->setParameter('id_product_comment', $productCommentId)\n        ;\n\n        $usefulnessInfos = [\n            'usefulness' => 0,\n            'total_usefulness' => 0,\n        ];\n        $customerAppreciations = $qb->execute()->fetchAll();\n        foreach ($customerAppreciations as $customerAppreciation) {\n            if ((int) $customerAppreciation['usefulness']) {\n                ++$usefulnessInfos['usefulness'];\n            }\n            ++$usefulnessInfos['total_usefulness'];\n        }\n\n        return $usefulnessInfos;\n    }\n\n    /**\n     * @param int $productId\n     * @param bool $validatedOnly\n     *\n     * @return float\n     */\n    public function getAverageGrade($productId, $validatedOnly)\n    {\n        /** @var QueryBuilder $qb */\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->select('SUM(pc.grade) / COUNT(pc.grade) AS averageGrade')\n            ->from($this->databasePrefix . 'product_comment', 'pc')\n            ->andWhere('pc.id_product = :id_product')\n            ->andWhere('pc.deleted = :deleted')\n            ->setParameter('deleted', 0)\n            ->setParameter('id_product', $productId)\n        ;\n\n        if ($validatedOnly) {\n            $qb\n                ->andWhere('pc.validate = :validate')\n                ->setParameter('validate', 1)\n            ;\n        }\n\n        return (float) $qb->execute()->fetchColumn();\n    }\n\n    /**\n     * @param array $productIds\n     * @param bool $validatedOnly\n     *\n     * @return array\n     */\n    public function getAverageGrades(array $productIds, $validatedOnly)\n    {\n        $sql = 'SELECT';\n\n        $count = count($productIds);\n\n        foreach ($productIds as $index => $id) {\n            $esqID = (int) $id;\n\n            $sql .= ' SUM(IF(id_product = ' . $esqID . ' AND deleted = 0';\n            if ($validatedOnly) {\n                $sql .= ' AND validate = 1';\n            }\n            $sql .= ',grade, 0))';\n            $sql .= ' / SUM(IF(id_product = ' . $esqID . ' AND deleted = 0';\n            if ($validatedOnly) {\n                $sql .= ' AND validate = 1';\n            }\n            $sql .= ',1, 0)) AS \"' . $esqID . '\"';\n\n            if ($count - 1 > $index) {\n                $sql .= ',';\n            }\n        }\n\n        $sql .= ' FROM ' . $this->databasePrefix . 'product_comment';\n\n        $query = $this->connection->prepare($sql);\n        $query->execute();\n\n        return (array) $query->fetch();\n    }\n\n    /**\n     * @param int $productId\n     * @param bool $validatedOnly\n     *\n     * @return int\n     */\n    public function getCommentsNumber($productId, $validatedOnly)\n    {\n        /** @var QueryBuilder $qb */\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->select('COUNT(pc.id_product_comment) AS commentNb')\n            ->from($this->databasePrefix . 'product_comment', 'pc')\n            ->andWhere('pc.id_product = :id_product')\n            ->andWhere('pc.deleted = :deleted')\n            ->setParameter('deleted', 0)\n            ->setParameter('id_product', $productId)\n        ;\n\n        if ($validatedOnly) {\n            $qb\n                ->andWhere('pc.validate = :validate')\n                ->setParameter('validate', 1)\n            ;\n        }\n\n        return (int) $qb->execute()->fetchColumn();\n    }\n\n    /**\n     * @param array $productIds\n     * @param bool $validatedOnly\n     *\n     * @return array\n     */\n    public function getCommentsNumberForProducts(array $productIds, $validatedOnly)\n    {\n        $sql = 'SELECT';\n\n        $count = count($productIds);\n\n        foreach ($productIds as $index => $id) {\n            $esqID = (int) $id;\n\n            $sql .= ' SUM(IF(id_product = ' . $esqID . ' AND deleted = 0';\n            if ($validatedOnly) {\n                $sql .= ' AND validate = 1';\n            }\n            $sql .= ' ,1, 0)) AS \"' . $esqID . '\"';\n\n            if ($count - 1 > $index) {\n                $sql .= ',';\n            }\n        }\n\n        $sql .= ' FROM ' . $this->databasePrefix . 'product_comment';\n\n        // return $sql;\n\n        $query = $this->connection->prepare($sql);\n        $query->execute();\n\n        return (array) $query->fetch();\n    }\n\n    /**\n     * @param int $productId\n     * @param int $idCustomer\n     * @param int $idGuest\n     *\n     * @return bool\n     */\n    public function isPostAllowed($productId, $idCustomer, $idGuest)\n    {\n        if (!$idCustomer && !$this->guestCommentsAllowed) {\n            $postAllowed = false;\n        } else {\n            $lastCustomerComment = null;\n            if ($idCustomer) {\n                $lastCustomerComment = $this->getLastCustomerComment($productId, $idCustomer);\n            } elseif ($idGuest) {\n                $lastCustomerComment = $this->getLastGuestComment($productId, $idGuest);\n            }\n            $postAllowed = true;\n            if (null !== $lastCustomerComment && isset($lastCustomerComment['date_add'])) {\n                $postDate = new \\DateTime($lastCustomerComment['date_add'], new \\DateTimeZone('UTC'));\n                if (time() - $postDate->getTimestamp() < $this->commentsMinimalTime) {\n                    $postAllowed = false;\n                }\n            }\n        }\n\n        return $postAllowed;\n    }\n\n    /**\n     * @param int $productId\n     * @param int $idCustomer\n     *\n     * @return array\n     */\n    public function getLastCustomerComment($productId, $idCustomer)\n    {\n        return $this->getLastComment(['id_product' => $productId, 'id_customer' => $idCustomer]);\n    }\n\n    /**\n     * @param int $productId\n     * @param int $idGuest\n     *\n     * @return array\n     */\n    public function getLastGuestComment($productId, $idGuest)\n    {\n        return $this->getLastComment(['id_product' => $productId, 'id_guest' => $idGuest]);\n    }\n\n    /**\n     * @param int $customerId\n     */\n    public function cleanCustomerData($customerId)\n    {\n        //We anonymize the customer comment by unlinking them (the name won't be visible any more but the grade and comment are still visible)\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->update($this->databasePrefix . 'product_comment', 'pc')\n            ->set('id_customer', (string) 0)\n            ->andWhere('pc.id_customer = :id_customer')\n            ->setParameter('id_customer', $customerId)\n        ;\n        $qb->execute();\n\n        //But we remove every report and votes for comments\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->delete($this->databasePrefix . 'product_comment_report')\n            ->andWhere('id_customer = :id_customer')\n            ->setParameter('id_customer', $customerId)\n        ;\n        $qb->execute();\n\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->delete($this->databasePrefix . 'product_comment_usefulness')\n            ->andWhere('id_customer = :id_customer')\n            ->setParameter('id_customer', $customerId)\n        ;\n        $qb->execute();\n    }\n\n    /**\n     * @param int $customerId\n     * @param int $langId\n     *\n     * @return array\n     */\n    public function getCustomerData($customerId, $langId)\n    {\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->select('pl.name, pc.id_product, pc.id_product_comment, pc.title, pc.content, pc.grade, pc.validate, pc.deleted, pcu.usefulness, pc.date_add')\n            ->from($this->databasePrefix . 'product_comment', 'pc')\n            ->leftJoin('pc', $this->databasePrefix . 'product_comment_usefulness', 'pcu', 'pc.id_product_comment = pcu.id_product_comment')\n            ->leftJoin('pc', $this->databasePrefix . 'product', 'p', 'pc.id_product = p.id_product')\n            ->leftJoin('p', $this->databasePrefix . 'product_lang', 'pl', 'p.id_product = pl.id_product')\n            ->leftJoin('pl', $this->databasePrefix . 'lang', 'l', 'pl.id_lang = l.id_lang')\n            ->andWhere('pc.id_customer = :id_customer')\n            ->andWhere('l.id_lang = :id_lang')\n            ->setParameter('id_customer', $customerId)\n            ->setParameter('id_lang', $langId)\n            ->addGroupBy('pc.id_product_comment')\n            ->addOrderBy('pc.date_add', 'ASC')\n        ;\n\n        return $qb->execute()->fetchAll();\n    }\n\n    /**\n     * @param array $criteria\n     *\n     * @return array\n     */\n    private function getLastComment(array $criteria)\n    {\n        /** @var QueryBuilder $qb */\n        $qb = $this->connection->createQueryBuilder();\n        $qb\n            ->select('pc.*')\n            ->from($this->databasePrefix . 'product_comment', 'pc')\n            ->andWhere('pc.deleted = :deleted')\n            ->setParameter('deleted', 0)\n            ->addOrderBy('pc.date_add', 'DESC')\n            ->setMaxResults(1)\n        ;\n\n        foreach ($criteria as $field => $value) {\n            $qb\n                ->andWhere(sprintf('pc.%s = :%s', $field, $field))\n                ->setParameter($field, $value)\n            ;\n        }\n\n        $comments = $qb->execute()->fetchAll();\n\n        return empty($comments) ? [] : $comments[0];\n    }\n}\n"], "filenames": ["controllers/front/CommentGrade.php", "controllers/front/ListComments.php", "productcomments.php", "src/Repository/ProductCommentRepository.php"], "buggy_code_start_loc": [40, 32, 181, 182], "buggy_code_end_loc": [40, 34, 182, 251], "fixing_code_start_loc": [41, 32, 181, 182], "fixing_code_end_loc": [43, 34, 182, 251], "type": "CWE-89", "message": "In the PrestaShop module \"productcomments\" before version 4.2.1, an attacker can use a Blind SQL injection to retrieve data or stop the MySQL service. The problem is fixed in 4.2.1 of the module.", "other": {"cve": {"id": "CVE-2020-26248", "sourceIdentifier": "security-advisories@github.com", "published": "2020-12-03T21:15:11.227", "lastModified": "2022-01-06T14:17:53.027", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In the PrestaShop module \"productcomments\" before version 4.2.1, an attacker can use a Blind SQL injection to retrieve data or stop the MySQL service. The problem is fixed in 4.2.1 of the module."}, {"lang": "es", "value": "En el m\u00f3dulo de PrestaShop \"productcomments\" versiones anteriores a 4.2.1, un atacante puede usar una inyecci\u00f3n SQL ciega para recuperar datos o detener el servicio MySQL.&#xa0;El problema es corregido en la versi\u00f3n 4.2.1 del m\u00f3dulo"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.5, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:productcomments:*:*:*:*:*:prestashop:*:*", "versionEndExcluding": "4.2.1", "matchCriteriaId": "DD3DE728-2009-45E7-B242-0EAF3127064B"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/160539/PrestaShop-ProductComments-4.2.0-SQL-Injection.html", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/PrestaShop/productcomments/commit/7c2033dd811744e021da8897c80d6c301cd45ffa", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/productcomments/releases/tag/v4.2.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/productcomments/security/advisories/GHSA-5v44-7647-xfw9", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://packagist.org/packages/prestashop/productcomments", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/productcomments/commit/7c2033dd811744e021da8897c80d6c301cd45ffa"}}