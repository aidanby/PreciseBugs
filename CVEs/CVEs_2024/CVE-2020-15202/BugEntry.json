{"buggy_code": ["/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/random_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <algorithm>\n#include <cmath>\n#include <memory>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_util.h\"\n#include \"tensorflow/core/kernels/random_op_cpu.h\"\n#include \"tensorflow/core/lib/hash/crc32c.h\"\n#include \"tensorflow/core/lib/random/random_distributions.h\"\n#include \"tensorflow/core/lib/random/simple_philox.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/util/guarded_philox_random.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\n#if EIGEN_COMP_GNUC && __cplusplus > 199711L\n#define DISABLE_FLOAT_EQUALITY_WARNING \\\n  _Pragma(\"GCC diagnostic push\")       \\\n      _Pragma(\"GCC diagnostic ignored \\\"-Wfloat-equal\\\"\")\n#define ENABLE_FLOAT_EQUALITY_WARNING _Pragma(\"GCC diagnostic pop\")\n#else\n#define DISABLE_FLOAT_EQUALITY_WARNING\n#define ENABLE_FLOAT_EQUALITY_WARNING\n#endif\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nnamespace {\n\nstatic Status AllocateOutputWithShape(OpKernelContext* ctx, const Tensor& shape,\n                                      int index, Tensor** output) {\n  TensorShape tensor_shape;\n  TF_RETURN_IF_ERROR(tensor::MakeShape(shape, &tensor_shape));\n  return ctx->allocate_output(index, tensor_shape, output);\n}\n\n// For now, use the same interface as RandomOp, so we can choose either one\n// at the run-time.\ntemplate <typename Device, class Distribution>\nclass PhiloxRandomOp : public OpKernel {\n public:\n  typedef typename Distribution::ResultElementType T;\n  explicit PhiloxRandomOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, generator_.Init(ctx));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape = ctx->input(0);\n    Tensor* output;\n    OP_REQUIRES_OK(ctx, AllocateOutputWithShape(ctx, shape, 0, &output));\n    auto output_flat = output->flat<T>();\n    functor::FillPhiloxRandom<Device, Distribution>()(\n        ctx, ctx->eigen_device<Device>(), /*key=*/nullptr, /*counter=*/nullptr,\n        // Multiplier 256 is the same as in FillPhiloxRandomTask; do not change\n        // it just here.\n        generator_.ReserveRandomOutputs(output_flat.size(), 256),\n        output_flat.data(), output_flat.size(), Distribution());\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n};\n\ntemplate <typename Device, class IntType>\nclass RandomUniformIntOp : public OpKernel {\n public:\n  explicit RandomUniformIntOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, generator_.Init(ctx));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape = ctx->input(0);\n    const Tensor& minval = ctx->input(1);\n    const Tensor& maxval = ctx->input(2);\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(minval.shape()),\n                errors::InvalidArgument(\"minval must be 0-D, got shape \",\n                                        minval.shape().DebugString()));\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(maxval.shape()),\n                errors::InvalidArgument(\"maxval must be 0-D, got shape \",\n                                        maxval.shape().DebugString()));\n\n    // Allocate output, and exit early if possible\n    Tensor* output;\n    OP_REQUIRES_OK(ctx, AllocateOutputWithShape(ctx, shape, 0, &output));\n    if (output->NumElements() == 0) return;\n\n    // Verify that minval < maxval.  This check intentionally happens after the\n    // early exit for empty output.  Zero impossible things are fine.\n    IntType lo = minval.scalar<IntType>()();\n    IntType hi = maxval.scalar<IntType>()();\n    OP_REQUIRES(\n        ctx, lo < hi,\n        errors::InvalidArgument(\"Need minval < maxval, got \", lo, \" >= \", hi));\n\n    // Build distribution\n    typedef random::UniformDistribution<random::PhiloxRandom, IntType>\n        Distribution;\n    Distribution dist(lo, hi);\n\n    auto output_flat = output->flat<IntType>();\n    functor::FillPhiloxRandom<Device, Distribution>()(\n        ctx, ctx->eigen_device<Device>(), /*key=*/nullptr, /*counter=*/nullptr,\n        // Multiplier 256 is the same as in FillPhiloxRandomTask; do not change\n        // it just here.\n        generator_.ReserveRandomOutputs(output_flat.size(), 256),\n        output_flat.data(), output_flat.size(), dist);\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n};\n\n// Samples from one or more gamma distributions. All internal computations are\n// done with double precision for numerical stability.\ntemplate <typename T>\nclass RandomGammaOp : public OpKernel {\n public:\n  explicit RandomGammaOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, generator_.Init(context));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape_t = ctx->input(0);\n    const Tensor& alpha_t = ctx->input(1);\n\n    OP_REQUIRES(ctx,\n                TensorShapeUtils::IsVector(shape_t.shape()) &&\n                    (shape_t.dtype() == DataType::DT_INT32 ||\n                     shape_t.dtype() == DataType::DT_INT64),\n                errors::InvalidArgument(\n                    \"shape must be a vector of {int32,int64}, got shape: \",\n                    shape_t.DebugString()));\n    TensorShape samples_shape;\n    if (shape_t.dtype() == DataType::DT_INT32) {\n      auto vec = shape_t.flat<int32>();\n      OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(vec.data(), vec.size(),\n                                                      &samples_shape));\n    } else if (shape_t.dtype() == DataType::DT_INT64) {\n      auto vec = shape_t.flat<int64>();\n      OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(vec.data(), vec.size(),\n                                                      &samples_shape));\n    }\n    const int64 samples_per_alpha = samples_shape.num_elements();\n\n    samples_shape.AppendShape(alpha_t.shape());\n    // Allocate output samples.\n    Tensor* samples_t = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));\n\n    if (samples_shape.num_elements() == 0) return;\n\n    using random::PhiloxRandom;\n\n    typedef random::NormalDistribution<PhiloxRandom, double> Normal;\n    typedef random::UniformDistribution<PhiloxRandom, double> Uniform;\n#define UNIFORM(X)                                    \\\n  if (uniform_remaining == 0) {                       \\\n    uniform_remaining = Uniform::kResultElementCount; \\\n    uniform_result = uniform(&gen);                   \\\n  }                                                   \\\n  uniform_remaining--;                                \\\n  double X = uniform_result[uniform_remaining]\n\n    // Each attempt is 95+% successful, and requires 1-2 normal + 1 uniform\n    static constexpr int kReservedSamplesPerOutput = 256;\n\n    const auto alpha_flat = alpha_t.flat<T>().data();\n    const int64 num_alphas = alpha_t.NumElements();\n    OP_REQUIRES(ctx, num_alphas > 0,\n                errors::InvalidArgument(\n                    \"Input alpha should have non-zero element count, got: \",\n                    num_alphas));\n    auto samples_flat = samples_t->flat<T>().data();\n    PhiloxRandom rng = generator_.ReserveRandomOutputs(\n        samples_per_alpha * num_alphas, kReservedSamplesPerOutput);\n\n    // We partition work first across alphas then across samples-per-alpha to\n    // avoid a couple flops which can be done on a per-alpha basis.\n\n    auto DoWork = [samples_per_alpha, num_alphas, &rng, samples_flat,\n                   alpha_flat](int start_output, int limit_output) {\n      using Eigen::numext::exp;\n      using Eigen::numext::log;\n      using Eigen::numext::log1p;\n      using Eigen::numext::pow;\n\n      // Capturing \"rng\" by-value would only make a copy for the _shared_\n      // lambda.  Since we want to let each worker have its own copy, we pass\n      // \"rng\" by reference and explicitly do a copy assignment.\n\n      Normal normal;\n      Uniform uniform;\n      typename Normal::ResultType norm_result;\n      typename Uniform::ResultType uniform_result;\n      for (int64 output_idx = start_output; output_idx < limit_output;\n           /* output_idx incremented within inner loop below */) {\n        int64 alpha_idx = output_idx / samples_per_alpha;\n\n        // Instead of +alpha_idx for each sample, we offset the pointer once.\n        T* const samples_alpha_offset = samples_flat + alpha_idx;\n\n        // Several calculations can be done on a per-alpha basis.\n        const double alpha = static_cast<double>(alpha_flat[alpha_idx]);\n\n        DISABLE_FLOAT_EQUALITY_WARNING\n        if (alpha == static_cast<double>(1.0)) {\n          ENABLE_FLOAT_EQUALITY_WARNING\n          // Sample from an exponential distribution.\n          for (int64 sample_idx = output_idx % samples_per_alpha;\n               sample_idx < samples_per_alpha && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            // As we want data stable regardless of sharding\n            // (including eventually on GPU), we skip on a per-sample basis.\n            PhiloxRandom gen = rng;\n            gen.Skip(kReservedSamplesPerOutput * output_idx);\n            int16 uniform_remaining = 0;\n            UNIFORM(u);\n            const double res = -log1p(-u);\n            samples_alpha_offset[sample_idx * num_alphas] = static_cast<T>(res);\n          }       // for (sample_idx)\n        } else {  // if alpha != 1.0\n          // Transformation-rejection from pairs of uniform and normal random\n          // variables. http://dl.acm.org/citation.cfm?id=358414\n          //\n          // The algorithm has an acceptance rate of ~95% for small alpha (~1),\n          // and higher accept rates for higher alpha, so runtime is\n          // O(NumAlphas * NumSamples * k) with k ~ 1 / 0.95.\n          //\n          // For alpha<1, we add one to d=alpha-1/3, and multiply the final\n          // result by uniform()^(1/alpha)\n          const bool alpha_less_than_one = alpha < 1;\n          const double d = alpha + (alpha_less_than_one ? 2.0 / 3 : -1.0 / 3);\n          const double c = 1.0 / 3 / sqrt(d);\n\n          // Compute the rest of the samples for the current alpha value.\n          for (int64 sample_idx = output_idx % samples_per_alpha;\n               sample_idx < samples_per_alpha && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            // Since each sample may use a variable number of normal/uniform\n            // samples, and we want data stable regardless of sharding\n            // (including eventually on GPU), we skip on a per-sample basis.\n            PhiloxRandom gen = rng;\n            gen.Skip(kReservedSamplesPerOutput * output_idx);\n            int16 norm_remaining = 0;\n            int16 uniform_remaining = 0;\n\n            // Keep trying until we don't reject a sample. In practice, we will\n            // only reject ~5% at worst, for low alpha near 1.\n            while (true) {\n              if (norm_remaining == 0) {\n                norm_remaining = Normal::kResultElementCount;\n                norm_result = normal(&gen);\n              }\n              norm_remaining--;\n              const double x = norm_result[norm_remaining];\n              double v = 1 + c * x;\n              if (v <= 0) {\n                continue;\n              }\n              v = v * v * v;\n              UNIFORM(u);\n              // The first option in the if is a \"squeeze\" short-circuit to\n              // dodge the two logs. Magic constant sourced from the paper\n              // linked above. Upward of .91 of the area covered by the log\n              // inequality is covered by the squeeze as well (larger coverage\n              // for smaller values of alpha).\n              if ((u < 1 - 0.0331 * (x * x) * (x * x)) ||\n                  (log(u) < 0.5 * x * x + d * (1 - v + log(v)))) {\n                double res = d * v;\n                if (alpha_less_than_one) {\n                  UNIFORM(b);\n                  res *= pow(b, 1 / alpha);\n                }\n                samples_alpha_offset[sample_idx * num_alphas] =\n                    static_cast<T>(res);\n                break;\n              }\n            }  // while: true\n          }    // for: sample_idx\n        }      // if (alpha == 1.0)\n      }        // for: output_idx\n    };         // DoWork\n#undef UNIFORM\n    // Two calls to log only occur for ~10% of samples reaching the log line.\n    //   2 x 100 (64-bit cycles per log) x 0.10 = ~20.\n    // Other ops: sqrt, +, *, /, %... something like 15 of these, at 3-6 cycles\n    // each = ~60.\n    // All of this /0.95 due to the rejection possibility = ~85.\n    static const int kElementCost = 85 + 2 * Normal::kElementCost +\n                                    Uniform::kElementCost +\n                                    3 * PhiloxRandom::kElementCost;\n    auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());\n    Shard(worker_threads.num_threads, worker_threads.workers,\n          num_alphas * samples_per_alpha, kElementCost, DoWork);\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(RandomGammaOp);\n};\n\n}  // namespace\n\n#define REGISTER(TYPE)                                                         \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice, random::UniformDistribution<random::PhiloxRandom, TYPE>>;     \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice, random::NormalDistribution<random::PhiloxRandom, TYPE>>;      \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice,                                                               \\\n      random::TruncatedNormalDistribution<                                     \\\n          random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>;           \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomUniform\")                                                    \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<CPUDevice, random::UniformDistribution<                   \\\n                                    random::PhiloxRandom, TYPE>>);             \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomStandardNormal\")                                             \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<CPUDevice,                                                \\\n                     random::NormalDistribution<random::PhiloxRandom, TYPE>>); \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"TruncatedNormal\")                                                  \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<                                                          \\\n          CPUDevice,                                                           \\\n          random::TruncatedNormalDistribution<                                 \\\n              random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>);      \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomGamma\").Device(DEVICE_CPU).TypeConstraint<TYPE>(\"T\"),        \\\n      RandomGammaOp<TYPE>)\n\n#define REGISTER_FULL_INT(IntType)           \\\n  template struct functor::FillPhiloxRandom< \\\n      CPUDevice,                             \\\n      random::UniformFullIntDistribution<random::PhiloxRandom, IntType>>\n\n#define REGISTER_INT(IntType)                                                 \\\n  REGISTER_FULL_INT(IntType);                                                 \\\n  template struct functor::FillPhiloxRandom<                                  \\\n      CPUDevice, random::UniformDistribution<random::PhiloxRandom, IntType>>; \\\n  REGISTER_KERNEL_BUILDER(Name(\"RandomUniformInt\")                            \\\n                              .Device(DEVICE_CPU)                             \\\n                              .HostMemory(\"shape\")                            \\\n                              .HostMemory(\"minval\")                           \\\n                              .HostMemory(\"maxval\")                           \\\n                              .TypeConstraint<IntType>(\"Tout\"),               \\\n                          RandomUniformIntOp<CPUDevice, IntType>);\n\nTF_CALL_half(REGISTER);\nTF_CALL_bfloat16(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\nTF_CALL_int32(REGISTER_INT);\nTF_CALL_int64(REGISTER_INT);\nTF_CALL_uint32(REGISTER_FULL_INT);\nTF_CALL_uint64(REGISTER_FULL_INT);\n\n#undef REGISTER\n#undef REGISTER_INT\n#undef REGISTER_FULL_INT\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER(TYPE)                                                         \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomUniform\")                                                    \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<GPUDevice, random::UniformDistribution<                   \\\n                                    random::PhiloxRandom, TYPE>>);             \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomStandardNormal\")                                             \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<GPUDevice,                                                \\\n                     random::NormalDistribution<random::PhiloxRandom, TYPE>>); \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"TruncatedNormal\")                                                  \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<                                                          \\\n          GPUDevice,                                                           \\\n          random::TruncatedNormalDistribution<                                 \\\n              random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>);\n\n#define REGISTER_FULL_INT(IntType)           \\\n  template struct functor::FillPhiloxRandom< \\\n      GPUDevice,                             \\\n      random::UniformFullIntDistribution<random::PhiloxRandom, IntType>>\n\n#define REGISTER_INT(IntType)                                                 \\\n  REGISTER_FULL_INT(IntType);                                                 \\\n  template struct functor::FillPhiloxRandom<                                  \\\n      GPUDevice, random::UniformDistribution<random::PhiloxRandom, IntType>>; \\\n  REGISTER_KERNEL_BUILDER(Name(\"RandomUniformInt\")                            \\\n                              .Device(DEVICE_GPU)                             \\\n                              .HostMemory(\"shape\")                            \\\n                              .HostMemory(\"minval\")                           \\\n                              .HostMemory(\"maxval\")                           \\\n                              .TypeConstraint<int32>(\"T\")                     \\\n                              .TypeConstraint<IntType>(\"Tout\"),               \\\n                          RandomUniformIntOp<GPUDevice, IntType>);\n\nTF_CALL_half(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\nTF_CALL_int32(REGISTER_INT);\nTF_CALL_int64(REGISTER_INT);\nTF_CALL_uint32(REGISTER_FULL_INT);\nTF_CALL_uint64(REGISTER_FULL_INT);\n\n#undef REGISTER\n#undef REGISTER_INT\n#undef REGISTER_FULL_INT\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n\n}  // end namespace tensorflow\n"], "fixing_code": ["/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/random_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <algorithm>\n#include <cmath>\n#include <memory>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_util.h\"\n#include \"tensorflow/core/kernels/random_op_cpu.h\"\n#include \"tensorflow/core/lib/hash/crc32c.h\"\n#include \"tensorflow/core/lib/random/random_distributions.h\"\n#include \"tensorflow/core/lib/random/simple_philox.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/util/guarded_philox_random.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\n#if EIGEN_COMP_GNUC && __cplusplus > 199711L\n#define DISABLE_FLOAT_EQUALITY_WARNING \\\n  _Pragma(\"GCC diagnostic push\")       \\\n      _Pragma(\"GCC diagnostic ignored \\\"-Wfloat-equal\\\"\")\n#define ENABLE_FLOAT_EQUALITY_WARNING _Pragma(\"GCC diagnostic pop\")\n#else\n#define DISABLE_FLOAT_EQUALITY_WARNING\n#define ENABLE_FLOAT_EQUALITY_WARNING\n#endif\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nnamespace {\n\nstatic Status AllocateOutputWithShape(OpKernelContext* ctx, const Tensor& shape,\n                                      int index, Tensor** output) {\n  TensorShape tensor_shape;\n  TF_RETURN_IF_ERROR(tensor::MakeShape(shape, &tensor_shape));\n  return ctx->allocate_output(index, tensor_shape, output);\n}\n\n// For now, use the same interface as RandomOp, so we can choose either one\n// at the run-time.\ntemplate <typename Device, class Distribution>\nclass PhiloxRandomOp : public OpKernel {\n public:\n  typedef typename Distribution::ResultElementType T;\n  explicit PhiloxRandomOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, generator_.Init(ctx));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape = ctx->input(0);\n    Tensor* output;\n    OP_REQUIRES_OK(ctx, AllocateOutputWithShape(ctx, shape, 0, &output));\n    auto output_flat = output->flat<T>();\n    functor::FillPhiloxRandom<Device, Distribution>()(\n        ctx, ctx->eigen_device<Device>(), /*key=*/nullptr, /*counter=*/nullptr,\n        // Multiplier 256 is the same as in FillPhiloxRandomTask; do not change\n        // it just here.\n        generator_.ReserveRandomOutputs(output_flat.size(), 256),\n        output_flat.data(), output_flat.size(), Distribution());\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n};\n\ntemplate <typename Device, class IntType>\nclass RandomUniformIntOp : public OpKernel {\n public:\n  explicit RandomUniformIntOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, generator_.Init(ctx));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape = ctx->input(0);\n    const Tensor& minval = ctx->input(1);\n    const Tensor& maxval = ctx->input(2);\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(minval.shape()),\n                errors::InvalidArgument(\"minval must be 0-D, got shape \",\n                                        minval.shape().DebugString()));\n    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(maxval.shape()),\n                errors::InvalidArgument(\"maxval must be 0-D, got shape \",\n                                        maxval.shape().DebugString()));\n\n    // Allocate output, and exit early if possible\n    Tensor* output;\n    OP_REQUIRES_OK(ctx, AllocateOutputWithShape(ctx, shape, 0, &output));\n    if (output->NumElements() == 0) return;\n\n    // Verify that minval < maxval.  This check intentionally happens after the\n    // early exit for empty output.  Zero impossible things are fine.\n    IntType lo = minval.scalar<IntType>()();\n    IntType hi = maxval.scalar<IntType>()();\n    OP_REQUIRES(\n        ctx, lo < hi,\n        errors::InvalidArgument(\"Need minval < maxval, got \", lo, \" >= \", hi));\n\n    // Build distribution\n    typedef random::UniformDistribution<random::PhiloxRandom, IntType>\n        Distribution;\n    Distribution dist(lo, hi);\n\n    auto output_flat = output->flat<IntType>();\n    functor::FillPhiloxRandom<Device, Distribution>()(\n        ctx, ctx->eigen_device<Device>(), /*key=*/nullptr, /*counter=*/nullptr,\n        // Multiplier 256 is the same as in FillPhiloxRandomTask; do not change\n        // it just here.\n        generator_.ReserveRandomOutputs(output_flat.size(), 256),\n        output_flat.data(), output_flat.size(), dist);\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n};\n\n// Samples from one or more gamma distributions. All internal computations are\n// done with double precision for numerical stability.\ntemplate <typename T>\nclass RandomGammaOp : public OpKernel {\n public:\n  explicit RandomGammaOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, generator_.Init(context));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& shape_t = ctx->input(0);\n    const Tensor& alpha_t = ctx->input(1);\n\n    OP_REQUIRES(ctx,\n                TensorShapeUtils::IsVector(shape_t.shape()) &&\n                    (shape_t.dtype() == DataType::DT_INT32 ||\n                     shape_t.dtype() == DataType::DT_INT64),\n                errors::InvalidArgument(\n                    \"shape must be a vector of {int32,int64}, got shape: \",\n                    shape_t.DebugString()));\n    TensorShape samples_shape;\n    if (shape_t.dtype() == DataType::DT_INT32) {\n      auto vec = shape_t.flat<int32>();\n      OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(vec.data(), vec.size(),\n                                                      &samples_shape));\n    } else if (shape_t.dtype() == DataType::DT_INT64) {\n      auto vec = shape_t.flat<int64>();\n      OP_REQUIRES_OK(ctx, TensorShapeUtils::MakeShape(vec.data(), vec.size(),\n                                                      &samples_shape));\n    }\n    const int64 samples_per_alpha = samples_shape.num_elements();\n\n    samples_shape.AppendShape(alpha_t.shape());\n    // Allocate output samples.\n    Tensor* samples_t = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));\n\n    if (samples_shape.num_elements() == 0) return;\n\n    using random::PhiloxRandom;\n\n    typedef random::NormalDistribution<PhiloxRandom, double> Normal;\n    typedef random::UniformDistribution<PhiloxRandom, double> Uniform;\n#define UNIFORM(X)                                    \\\n  if (uniform_remaining == 0) {                       \\\n    uniform_remaining = Uniform::kResultElementCount; \\\n    uniform_result = uniform(&gen);                   \\\n  }                                                   \\\n  uniform_remaining--;                                \\\n  double X = uniform_result[uniform_remaining]\n\n    // Each attempt is 95+% successful, and requires 1-2 normal + 1 uniform\n    static constexpr int kReservedSamplesPerOutput = 256;\n\n    const auto alpha_flat = alpha_t.flat<T>().data();\n    const int64 num_alphas = alpha_t.NumElements();\n    OP_REQUIRES(ctx, num_alphas > 0,\n                errors::InvalidArgument(\n                    \"Input alpha should have non-zero element count, got: \",\n                    num_alphas));\n    auto samples_flat = samples_t->flat<T>().data();\n    PhiloxRandom rng = generator_.ReserveRandomOutputs(\n        samples_per_alpha * num_alphas, kReservedSamplesPerOutput);\n\n    // We partition work first across alphas then across samples-per-alpha to\n    // avoid a couple flops which can be done on a per-alpha basis.\n\n    auto DoWork = [samples_per_alpha, num_alphas, &rng, samples_flat,\n                   alpha_flat](int64 start_output, int64 limit_output) {\n      using Eigen::numext::exp;\n      using Eigen::numext::log;\n      using Eigen::numext::log1p;\n      using Eigen::numext::pow;\n\n      // Capturing \"rng\" by-value would only make a copy for the _shared_\n      // lambda.  Since we want to let each worker have its own copy, we pass\n      // \"rng\" by reference and explicitly do a copy assignment.\n\n      Normal normal;\n      Uniform uniform;\n      typename Normal::ResultType norm_result;\n      typename Uniform::ResultType uniform_result;\n      for (int64 output_idx = start_output; output_idx < limit_output;\n           /* output_idx incremented within inner loop below */) {\n        int64 alpha_idx = output_idx / samples_per_alpha;\n\n        // Instead of +alpha_idx for each sample, we offset the pointer once.\n        T* const samples_alpha_offset = samples_flat + alpha_idx;\n\n        // Several calculations can be done on a per-alpha basis.\n        const double alpha = static_cast<double>(alpha_flat[alpha_idx]);\n\n        DISABLE_FLOAT_EQUALITY_WARNING\n        if (alpha == static_cast<double>(1.0)) {\n          ENABLE_FLOAT_EQUALITY_WARNING\n          // Sample from an exponential distribution.\n          for (int64 sample_idx = output_idx % samples_per_alpha;\n               sample_idx < samples_per_alpha && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            // As we want data stable regardless of sharding\n            // (including eventually on GPU), we skip on a per-sample basis.\n            PhiloxRandom gen = rng;\n            gen.Skip(kReservedSamplesPerOutput * output_idx);\n            int16 uniform_remaining = 0;\n            UNIFORM(u);\n            const double res = -log1p(-u);\n            samples_alpha_offset[sample_idx * num_alphas] = static_cast<T>(res);\n          }       // for (sample_idx)\n        } else {  // if alpha != 1.0\n          // Transformation-rejection from pairs of uniform and normal random\n          // variables. http://dl.acm.org/citation.cfm?id=358414\n          //\n          // The algorithm has an acceptance rate of ~95% for small alpha (~1),\n          // and higher accept rates for higher alpha, so runtime is\n          // O(NumAlphas * NumSamples * k) with k ~ 1 / 0.95.\n          //\n          // For alpha<1, we add one to d=alpha-1/3, and multiply the final\n          // result by uniform()^(1/alpha)\n          const bool alpha_less_than_one = alpha < 1;\n          const double d = alpha + (alpha_less_than_one ? 2.0 / 3 : -1.0 / 3);\n          const double c = 1.0 / 3 / sqrt(d);\n\n          // Compute the rest of the samples for the current alpha value.\n          for (int64 sample_idx = output_idx % samples_per_alpha;\n               sample_idx < samples_per_alpha && output_idx < limit_output;\n               sample_idx++, output_idx++) {\n            // Since each sample may use a variable number of normal/uniform\n            // samples, and we want data stable regardless of sharding\n            // (including eventually on GPU), we skip on a per-sample basis.\n            PhiloxRandom gen = rng;\n            gen.Skip(kReservedSamplesPerOutput * output_idx);\n            int16 norm_remaining = 0;\n            int16 uniform_remaining = 0;\n\n            // Keep trying until we don't reject a sample. In practice, we will\n            // only reject ~5% at worst, for low alpha near 1.\n            while (true) {\n              if (norm_remaining == 0) {\n                norm_remaining = Normal::kResultElementCount;\n                norm_result = normal(&gen);\n              }\n              norm_remaining--;\n              const double x = norm_result[norm_remaining];\n              double v = 1 + c * x;\n              if (v <= 0) {\n                continue;\n              }\n              v = v * v * v;\n              UNIFORM(u);\n              // The first option in the if is a \"squeeze\" short-circuit to\n              // dodge the two logs. Magic constant sourced from the paper\n              // linked above. Upward of .91 of the area covered by the log\n              // inequality is covered by the squeeze as well (larger coverage\n              // for smaller values of alpha).\n              if ((u < 1 - 0.0331 * (x * x) * (x * x)) ||\n                  (log(u) < 0.5 * x * x + d * (1 - v + log(v)))) {\n                double res = d * v;\n                if (alpha_less_than_one) {\n                  UNIFORM(b);\n                  res *= pow(b, 1 / alpha);\n                }\n                samples_alpha_offset[sample_idx * num_alphas] =\n                    static_cast<T>(res);\n                break;\n              }\n            }  // while: true\n          }    // for: sample_idx\n        }      // if (alpha == 1.0)\n      }        // for: output_idx\n    };         // DoWork\n#undef UNIFORM\n    // Two calls to log only occur for ~10% of samples reaching the log line.\n    //   2 x 100 (64-bit cycles per log) x 0.10 = ~20.\n    // Other ops: sqrt, +, *, /, %... something like 15 of these, at 3-6 cycles\n    // each = ~60.\n    // All of this /0.95 due to the rejection possibility = ~85.\n    static const int kElementCost = 85 + 2 * Normal::kElementCost +\n                                    Uniform::kElementCost +\n                                    3 * PhiloxRandom::kElementCost;\n    auto worker_threads = *(ctx->device()->tensorflow_cpu_worker_threads());\n    Shard(worker_threads.num_threads, worker_threads.workers,\n          num_alphas * samples_per_alpha, kElementCost, DoWork);\n  }\n\n private:\n  GuardedPhiloxRandom generator_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(RandomGammaOp);\n};\n\n}  // namespace\n\n#define REGISTER(TYPE)                                                         \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice, random::UniformDistribution<random::PhiloxRandom, TYPE>>;     \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice, random::NormalDistribution<random::PhiloxRandom, TYPE>>;      \\\n  template struct functor::FillPhiloxRandom<                                   \\\n      CPUDevice,                                                               \\\n      random::TruncatedNormalDistribution<                                     \\\n          random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>;           \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomUniform\")                                                    \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<CPUDevice, random::UniformDistribution<                   \\\n                                    random::PhiloxRandom, TYPE>>);             \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomStandardNormal\")                                             \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<CPUDevice,                                                \\\n                     random::NormalDistribution<random::PhiloxRandom, TYPE>>); \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"TruncatedNormal\")                                                  \\\n          .Device(DEVICE_CPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<                                                          \\\n          CPUDevice,                                                           \\\n          random::TruncatedNormalDistribution<                                 \\\n              random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>);      \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomGamma\").Device(DEVICE_CPU).TypeConstraint<TYPE>(\"T\"),        \\\n      RandomGammaOp<TYPE>)\n\n#define REGISTER_FULL_INT(IntType)           \\\n  template struct functor::FillPhiloxRandom< \\\n      CPUDevice,                             \\\n      random::UniformFullIntDistribution<random::PhiloxRandom, IntType>>\n\n#define REGISTER_INT(IntType)                                                 \\\n  REGISTER_FULL_INT(IntType);                                                 \\\n  template struct functor::FillPhiloxRandom<                                  \\\n      CPUDevice, random::UniformDistribution<random::PhiloxRandom, IntType>>; \\\n  REGISTER_KERNEL_BUILDER(Name(\"RandomUniformInt\")                            \\\n                              .Device(DEVICE_CPU)                             \\\n                              .HostMemory(\"shape\")                            \\\n                              .HostMemory(\"minval\")                           \\\n                              .HostMemory(\"maxval\")                           \\\n                              .TypeConstraint<IntType>(\"Tout\"),               \\\n                          RandomUniformIntOp<CPUDevice, IntType>);\n\nTF_CALL_half(REGISTER);\nTF_CALL_bfloat16(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\nTF_CALL_int32(REGISTER_INT);\nTF_CALL_int64(REGISTER_INT);\nTF_CALL_uint32(REGISTER_FULL_INT);\nTF_CALL_uint64(REGISTER_FULL_INT);\n\n#undef REGISTER\n#undef REGISTER_INT\n#undef REGISTER_FULL_INT\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER(TYPE)                                                         \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomUniform\")                                                    \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<GPUDevice, random::UniformDistribution<                   \\\n                                    random::PhiloxRandom, TYPE>>);             \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"RandomStandardNormal\")                                             \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<GPUDevice,                                                \\\n                     random::NormalDistribution<random::PhiloxRandom, TYPE>>); \\\n  REGISTER_KERNEL_BUILDER(                                                     \\\n      Name(\"TruncatedNormal\")                                                  \\\n          .Device(DEVICE_GPU)                                                  \\\n          .HostMemory(\"shape\")                                                 \\\n          .TypeConstraint<int32>(\"T\")                                          \\\n          .TypeConstraint<TYPE>(\"dtype\"),                                      \\\n      PhiloxRandomOp<                                                          \\\n          GPUDevice,                                                           \\\n          random::TruncatedNormalDistribution<                                 \\\n              random::SingleSampleAdapter<random::PhiloxRandom>, TYPE>>);\n\n#define REGISTER_FULL_INT(IntType)           \\\n  template struct functor::FillPhiloxRandom< \\\n      GPUDevice,                             \\\n      random::UniformFullIntDistribution<random::PhiloxRandom, IntType>>\n\n#define REGISTER_INT(IntType)                                                 \\\n  REGISTER_FULL_INT(IntType);                                                 \\\n  template struct functor::FillPhiloxRandom<                                  \\\n      GPUDevice, random::UniformDistribution<random::PhiloxRandom, IntType>>; \\\n  REGISTER_KERNEL_BUILDER(Name(\"RandomUniformInt\")                            \\\n                              .Device(DEVICE_GPU)                             \\\n                              .HostMemory(\"shape\")                            \\\n                              .HostMemory(\"minval\")                           \\\n                              .HostMemory(\"maxval\")                           \\\n                              .TypeConstraint<int32>(\"T\")                     \\\n                              .TypeConstraint<IntType>(\"Tout\"),               \\\n                          RandomUniformIntOp<GPUDevice, IntType>);\n\nTF_CALL_half(REGISTER);\nTF_CALL_float(REGISTER);\nTF_CALL_double(REGISTER);\nTF_CALL_int32(REGISTER_INT);\nTF_CALL_int64(REGISTER_INT);\nTF_CALL_uint32(REGISTER_FULL_INT);\nTF_CALL_uint64(REGISTER_FULL_INT);\n\n#undef REGISTER\n#undef REGISTER_INT\n#undef REGISTER_FULL_INT\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n\n}  // end namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/random_op.cc"], "buggy_code_start_loc": [205], "buggy_code_end_loc": [206], "fixing_code_start_loc": [205], "fixing_code_end_loc": [206], "type": "NVD-CWE-Other", "message": "In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the `Shard` API in TensorFlow expects the last argument to be a function taking two `int64` (i.e., `long long`) arguments. However, there are several places in TensorFlow where a lambda taking `int` or `int32` arguments is being used. In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption. The issue is patched in commits 27b417360cbd671ef55915e4bb6bb06af8b8a832 and ca8c013b5e97b1373b3bb1c97ea655e69f31a575, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.", "other": {"cve": {"id": "CVE-2020-15202", "sourceIdentifier": "security-advisories@github.com", "published": "2020-09-25T19:15:15.493", "lastModified": "2021-11-18T17:26:40.763", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the `Shard` API in TensorFlow expects the last argument to be a function taking two `int64` (i.e., `long long`) arguments. However, there are several places in TensorFlow where a lambda taking `int` or `int32` arguments is being used. In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption. The issue is patched in commits 27b417360cbd671ef55915e4bb6bb06af8b8a832 and ca8c013b5e97b1373b3bb1c97ea655e69f31a575, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1."}, {"lang": "es", "value": "En Tensorflow versiones anteriores a 1.15.4, 2.0.3, 2.1.2, 2.2.1 y 2.3.1, la API \"Shard\" en TensorFlow espera que el \u00faltimo argumento sea una funci\u00f3n que tome dos argumentos \"int64\" (es decir, \"long long\").&#xa0;Sin embargo, existen varios lugares en TensorFlow donde se usa una lambda que toma argumentos \"int\" o \"int32\".&#xa0;En estos casos, si la cantidad de trabajo que se va a paralelizar es lo suficientemente grande, se produce un truncamiento de enteros.&#xa0;Dependiendo de c\u00f3mo sean usados los dos argumentos de la lambda, esto puede resultar en fallos de segmentaci\u00f3n, lectura y escritura fuera de las matrices asignadas a la pila, desbordamientos de pila o corrupci\u00f3n de datos.&#xa0;El problema es parcheado en las commits 27b417360cbd671ef55915e4bb6bb06af8b8a832 y ca8c013b5e97b1373b3bb1c97ea655e69f31a575, y es publicado en TensorFlow versiones 1.15.4, 2.0.3, 2.1.2, 2.2.1 o 2.3.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.2, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.2, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-197"}, {"lang": "en", "value": "CWE-754"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:-:*:*:*", "versionEndExcluding": "1.15.4", "matchCriteriaId": "EC688B44-17B7-462D-B6E3-BAAF99334782"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:-:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.0.3", "matchCriteriaId": "B6271763-8DFA-4A8F-9596-F1148961ECC5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:-:*:*:*", "versionStartIncluding": "2.1.0", "versionEndExcluding": "2.1.2", "matchCriteriaId": "AA3FD62B-13CB-4EB5-939F-C848DE9AE071"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:-:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.1", "matchCriteriaId": "029CB8A9-ED3D-486D-967C-4CE0AF8D8FAD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:-:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.1", "matchCriteriaId": "B617650A-B5A1-44BB-BB3A-2EF83648B100"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.2:*:*:*:*:*:*:*", "matchCriteriaId": "B009C22E-30A4-4288-BCF6-C3E81DEAF45A"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/27b417360cbd671ef55915e4bb6bb06af8b8a832", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/ca8c013b5e97b1373b3bb1c97ea655e69f31a575", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6fg-mjxg-hqq4", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/27b417360cbd671ef55915e4bb6bb06af8b8a832"}}