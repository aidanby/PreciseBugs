{"buggy_code": ["/*\n * CDXL video decoder\n * Copyright (c) 2011-2012 Paul B Mahol\n *\n * This file is part of FFmpeg.\n *\n * FFmpeg is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * FFmpeg is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with FFmpeg; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n/**\n * @file\n * Commodore CDXL video decoder\n * @author Paul B Mahol\n */\n\n#define UNCHECKED_BITSTREAM_READER 1\n\n#include \"libavutil/intreadwrite.h\"\n#include \"libavutil/imgutils.h\"\n#include \"avcodec.h\"\n#include \"bytestream.h\"\n#include \"get_bits.h\"\n#include \"internal.h\"\n\n#define BIT_PLANAR   0x00\n#define CHUNKY       0x20\n#define BYTE_PLANAR  0x40\n#define BIT_LINE     0x80\n#define BYTE_LINE    0xC0\n\ntypedef struct CDXLVideoContext {\n    AVCodecContext *avctx;\n    int            bpp;\n    int            format;\n    int            padded_bits;\n    const uint8_t  *palette;\n    int            palette_size;\n    const uint8_t  *video;\n    int            video_size;\n    uint8_t        *new_video;\n    int            new_video_size;\n} CDXLVideoContext;\n\nstatic av_cold int cdxl_decode_init(AVCodecContext *avctx)\n{\n    CDXLVideoContext *c = avctx->priv_data;\n\n    c->new_video_size = 0;\n    c->avctx          = avctx;\n\n    return 0;\n}\n\nstatic void import_palette(CDXLVideoContext *c, uint32_t *new_palette)\n{\n    int i;\n\n    for (i = 0; i < c->palette_size / 2; i++) {\n        unsigned rgb = AV_RB16(&c->palette[i * 2]);\n        unsigned r   = ((rgb >> 8) & 0xF) * 0x11;\n        unsigned g   = ((rgb >> 4) & 0xF) * 0x11;\n        unsigned b   =  (rgb       & 0xF) * 0x11;\n        AV_WN32(&new_palette[i], (0xFFU << 24) | (r << 16) | (g << 8) | b);\n    }\n}\n\nstatic void bitplanar2chunky(CDXLVideoContext *c, int linesize, uint8_t *out)\n{\n    GetBitContext gb;\n    int x, y, plane;\n\n    if (init_get_bits8(&gb, c->video, c->video_size) < 0)\n        return;\n    for (plane = 0; plane < c->bpp; plane++) {\n        for (y = 0; y < c->avctx->height; y++) {\n            for (x = 0; x < c->avctx->width; x++)\n                out[linesize * y + x] |= get_bits1(&gb) << plane;\n            skip_bits(&gb, c->padded_bits);\n        }\n    }\n}\n\nstatic void bitline2chunky(CDXLVideoContext *c, int linesize, uint8_t *out)\n{\n    GetBitContext  gb;\n    int x, y, plane;\n\n    if (init_get_bits8(&gb, c->video, c->video_size) < 0)\n        return;\n    for (y = 0; y < c->avctx->height; y++) {\n        for (plane = 0; plane < c->bpp; plane++) {\n            for (x = 0; x < c->avctx->width; x++)\n                out[linesize * y + x] |= get_bits1(&gb) << plane;\n            skip_bits(&gb, c->padded_bits);\n        }\n    }\n}\n\nstatic void chunky2chunky(CDXLVideoContext *c, int linesize, uint8_t *out)\n{\n    GetByteContext gb;\n    int y;\n\n    bytestream2_init(&gb, c->video, c->video_size);\n    for (y = 0; y < c->avctx->height; y++) {\n        bytestream2_get_buffer(&gb, out + linesize * y, c->avctx->width * 3);\n    }\n}\n\nstatic void import_format(CDXLVideoContext *c, int linesize, uint8_t *out)\n{\n    memset(out, 0, linesize * c->avctx->height);\n\n    switch (c->format) {\n    case BIT_PLANAR:\n        bitplanar2chunky(c, linesize, out);\n        break;\n    case BIT_LINE:\n        bitline2chunky(c, linesize, out);\n        break;\n    case CHUNKY:\n        chunky2chunky(c, linesize, out);\n        break;\n    }\n}\n\nstatic void cdxl_decode_rgb(CDXLVideoContext *c, AVFrame *frame)\n{\n    uint32_t *new_palette = (uint32_t *)frame->data[1];\n\n    memset(frame->data[1], 0, AVPALETTE_SIZE);\n    import_palette(c, new_palette);\n    import_format(c, frame->linesize[0], frame->data[0]);\n}\n\nstatic void cdxl_decode_raw(CDXLVideoContext *c, AVFrame *frame)\n{\n    import_format(c, frame->linesize[0], frame->data[0]);\n}\n\nstatic void cdxl_decode_ham6(CDXLVideoContext *c, AVFrame *frame)\n{\n    AVCodecContext *avctx = c->avctx;\n    uint32_t new_palette[16], r, g, b;\n    uint8_t *ptr, *out, index, op;\n    int x, y;\n\n    ptr = c->new_video;\n    out = frame->data[0];\n\n    import_palette(c, new_palette);\n    import_format(c, avctx->width, c->new_video);\n\n    for (y = 0; y < avctx->height; y++) {\n        r = new_palette[0] & 0xFF0000;\n        g = new_palette[0] & 0xFF00;\n        b = new_palette[0] & 0xFF;\n        for (x = 0; x < avctx->width; x++) {\n            index  = *ptr++;\n            op     = index >> 4;\n            index &= 15;\n            switch (op) {\n            case 0:\n                r = new_palette[index] & 0xFF0000;\n                g = new_palette[index] & 0xFF00;\n                b = new_palette[index] & 0xFF;\n                break;\n            case 1:\n                b = index * 0x11;\n                break;\n            case 2:\n                r = index * 0x11 << 16;\n                break;\n            case 3:\n                g = index * 0x11 << 8;\n                break;\n            }\n            AV_WL24(out + x * 3, r | g | b);\n        }\n        out += frame->linesize[0];\n    }\n}\n\nstatic void cdxl_decode_ham8(CDXLVideoContext *c, AVFrame *frame)\n{\n    AVCodecContext *avctx = c->avctx;\n    uint32_t new_palette[64], r, g, b;\n    uint8_t *ptr, *out, index, op;\n    int x, y;\n\n    ptr = c->new_video;\n    out = frame->data[0];\n\n    import_palette(c, new_palette);\n    import_format(c, avctx->width, c->new_video);\n\n    for (y = 0; y < avctx->height; y++) {\n        r = new_palette[0] & 0xFF0000;\n        g = new_palette[0] & 0xFF00;\n        b = new_palette[0] & 0xFF;\n        for (x = 0; x < avctx->width; x++) {\n            index  = *ptr++;\n            op     = index >> 6;\n            index &= 63;\n            switch (op) {\n            case 0:\n                r = new_palette[index] & 0xFF0000;\n                g = new_palette[index] & 0xFF00;\n                b = new_palette[index] & 0xFF;\n                break;\n            case 1:\n                b = (index <<  2) | (b & 3);\n                break;\n            case 2:\n                r = (index << 18) | (r & (3 << 16));\n                break;\n            case 3:\n                g = (index << 10) | (g & (3 << 8));\n                break;\n            }\n            AV_WL24(out + x * 3, r | g | b);\n        }\n        out += frame->linesize[0];\n    }\n}\n\nstatic int cdxl_decode_frame(AVCodecContext *avctx, void *data,\n                             int *got_frame, AVPacket *pkt)\n{\n    CDXLVideoContext *c = avctx->priv_data;\n    AVFrame * const p = data;\n    int ret, w, h, encoding, aligned_width, buf_size = pkt->size;\n    const uint8_t *buf = pkt->data;\n\n    if (buf_size < 32)\n        return AVERROR_INVALIDDATA;\n    encoding        = buf[1] & 7;\n    c->format       = buf[1] & 0xE0;\n    w               = AV_RB16(&buf[14]);\n    h               = AV_RB16(&buf[16]);\n    c->bpp          = buf[19];\n    c->palette_size = AV_RB16(&buf[20]);\n    c->palette      = buf + 32;\n    c->video        = c->palette + c->palette_size;\n    c->video_size   = buf_size - c->palette_size - 32;\n\n    if (c->palette_size > 512)\n        return AVERROR_INVALIDDATA;\n    if (buf_size < c->palette_size + 32)\n        return AVERROR_INVALIDDATA;\n    if (c->bpp < 1)\n        return AVERROR_INVALIDDATA;\n    if (c->format != BIT_PLANAR && c->format != BIT_LINE && c->format != CHUNKY) {\n        avpriv_request_sample(avctx, \"Pixel format 0x%0x\", c->format);\n        return AVERROR_PATCHWELCOME;\n    }\n\n    if ((ret = ff_set_dimensions(avctx, w, h)) < 0)\n        return ret;\n\n    if (c->format == CHUNKY)\n        aligned_width = avctx->width;\n    else\n        aligned_width = FFALIGN(c->avctx->width, 16);\n    c->padded_bits  = aligned_width - c->avctx->width;\n    if (c->video_size < aligned_width * avctx->height * (int64_t)c->bpp / 8)\n        return AVERROR_INVALIDDATA;\n    if (!encoding && c->palette_size && c->bpp <= 8 && c->format != CHUNKY) {\n        avctx->pix_fmt = AV_PIX_FMT_PAL8;\n    } else if (encoding == 1 && (c->bpp == 6 || c->bpp == 8)) {\n        if (c->palette_size != (1 << (c->bpp - 1)))\n            return AVERROR_INVALIDDATA;\n        avctx->pix_fmt = AV_PIX_FMT_BGR24;\n    } else if (!encoding && c->bpp == 24 && c->format == CHUNKY &&\n               !c->palette_size) {\n        avctx->pix_fmt = AV_PIX_FMT_RGB24;\n    } else {\n        avpriv_request_sample(avctx, \"Encoding %d, bpp %d and format 0x%x\",\n                              encoding, c->bpp, c->format);\n        return AVERROR_PATCHWELCOME;\n    }\n\n    if ((ret = ff_get_buffer(avctx, p, 0)) < 0)\n        return ret;\n    p->pict_type = AV_PICTURE_TYPE_I;\n\n    if (encoding) {\n        av_fast_padded_malloc(&c->new_video, &c->new_video_size,\n                              h * w + AV_INPUT_BUFFER_PADDING_SIZE);\n        if (!c->new_video)\n            return AVERROR(ENOMEM);\n        if (c->bpp == 8)\n            cdxl_decode_ham8(c, p);\n        else\n            cdxl_decode_ham6(c, p);\n    } else if (avctx->pix_fmt == AV_PIX_FMT_PAL8) {\n        cdxl_decode_rgb(c, p);\n    } else {\n        cdxl_decode_raw(c, p);\n    }\n    *got_frame = 1;\n\n    return buf_size;\n}\n\nstatic av_cold int cdxl_decode_end(AVCodecContext *avctx)\n{\n    CDXLVideoContext *c = avctx->priv_data;\n\n    av_freep(&c->new_video);\n\n    return 0;\n}\n\nAVCodec ff_cdxl_decoder = {\n    .name           = \"cdxl\",\n    .long_name      = NULL_IF_CONFIG_SMALL(\"Commodore CDXL video\"),\n    .type           = AVMEDIA_TYPE_VIDEO,\n    .id             = AV_CODEC_ID_CDXL,\n    .priv_data_size = sizeof(CDXLVideoContext),\n    .init           = cdxl_decode_init,\n    .close          = cdxl_decode_end,\n    .decode         = cdxl_decode_frame,\n    .capabilities   = AV_CODEC_CAP_DR1,\n};\n"], "fixing_code": ["/*\n * CDXL video decoder\n * Copyright (c) 2011-2012 Paul B Mahol\n *\n * This file is part of FFmpeg.\n *\n * FFmpeg is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * FFmpeg is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with FFmpeg; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n/**\n * @file\n * Commodore CDXL video decoder\n * @author Paul B Mahol\n */\n\n#define UNCHECKED_BITSTREAM_READER 1\n\n#include \"libavutil/intreadwrite.h\"\n#include \"libavutil/imgutils.h\"\n#include \"avcodec.h\"\n#include \"bytestream.h\"\n#include \"get_bits.h\"\n#include \"internal.h\"\n\n#define BIT_PLANAR   0x00\n#define CHUNKY       0x20\n#define BYTE_PLANAR  0x40\n#define BIT_LINE     0x80\n#define BYTE_LINE    0xC0\n\ntypedef struct CDXLVideoContext {\n    AVCodecContext *avctx;\n    int            bpp;\n    int            format;\n    int            padded_bits;\n    const uint8_t  *palette;\n    int            palette_size;\n    const uint8_t  *video;\n    int            video_size;\n    uint8_t        *new_video;\n    int            new_video_size;\n} CDXLVideoContext;\n\nstatic av_cold int cdxl_decode_init(AVCodecContext *avctx)\n{\n    CDXLVideoContext *c = avctx->priv_data;\n\n    c->new_video_size = 0;\n    c->avctx          = avctx;\n\n    return 0;\n}\n\nstatic void import_palette(CDXLVideoContext *c, uint32_t *new_palette)\n{\n    int i;\n\n    for (i = 0; i < c->palette_size / 2; i++) {\n        unsigned rgb = AV_RB16(&c->palette[i * 2]);\n        unsigned r   = ((rgb >> 8) & 0xF) * 0x11;\n        unsigned g   = ((rgb >> 4) & 0xF) * 0x11;\n        unsigned b   =  (rgb       & 0xF) * 0x11;\n        AV_WN32(&new_palette[i], (0xFFU << 24) | (r << 16) | (g << 8) | b);\n    }\n}\n\nstatic void bitplanar2chunky(CDXLVideoContext *c, int linesize, uint8_t *out)\n{\n    GetBitContext gb;\n    int x, y, plane;\n\n    if (init_get_bits8(&gb, c->video, c->video_size) < 0)\n        return;\n    for (plane = 0; plane < c->bpp; plane++) {\n        for (y = 0; y < c->avctx->height; y++) {\n            for (x = 0; x < c->avctx->width; x++)\n                out[linesize * y + x] |= get_bits1(&gb) << plane;\n            skip_bits(&gb, c->padded_bits);\n        }\n    }\n}\n\nstatic void bitline2chunky(CDXLVideoContext *c, int linesize, uint8_t *out)\n{\n    GetBitContext  gb;\n    int x, y, plane;\n\n    if (init_get_bits8(&gb, c->video, c->video_size) < 0)\n        return;\n    for (y = 0; y < c->avctx->height; y++) {\n        for (plane = 0; plane < c->bpp; plane++) {\n            for (x = 0; x < c->avctx->width; x++)\n                out[linesize * y + x] |= get_bits1(&gb) << plane;\n            skip_bits(&gb, c->padded_bits);\n        }\n    }\n}\n\nstatic void chunky2chunky(CDXLVideoContext *c, int linesize, uint8_t *out)\n{\n    GetByteContext gb;\n    int y;\n\n    bytestream2_init(&gb, c->video, c->video_size);\n    for (y = 0; y < c->avctx->height; y++) {\n        bytestream2_get_buffer(&gb, out + linesize * y, c->avctx->width * 3);\n    }\n}\n\nstatic void import_format(CDXLVideoContext *c, int linesize, uint8_t *out)\n{\n    memset(out, 0, linesize * c->avctx->height);\n\n    switch (c->format) {\n    case BIT_PLANAR:\n        bitplanar2chunky(c, linesize, out);\n        break;\n    case BIT_LINE:\n        bitline2chunky(c, linesize, out);\n        break;\n    case CHUNKY:\n        chunky2chunky(c, linesize, out);\n        break;\n    }\n}\n\nstatic void cdxl_decode_rgb(CDXLVideoContext *c, AVFrame *frame)\n{\n    uint32_t *new_palette = (uint32_t *)frame->data[1];\n\n    memset(frame->data[1], 0, AVPALETTE_SIZE);\n    import_palette(c, new_palette);\n    import_format(c, frame->linesize[0], frame->data[0]);\n}\n\nstatic void cdxl_decode_raw(CDXLVideoContext *c, AVFrame *frame)\n{\n    import_format(c, frame->linesize[0], frame->data[0]);\n}\n\nstatic void cdxl_decode_ham6(CDXLVideoContext *c, AVFrame *frame)\n{\n    AVCodecContext *avctx = c->avctx;\n    uint32_t new_palette[16], r, g, b;\n    uint8_t *ptr, *out, index, op;\n    int x, y;\n\n    ptr = c->new_video;\n    out = frame->data[0];\n\n    import_palette(c, new_palette);\n    import_format(c, avctx->width, c->new_video);\n\n    for (y = 0; y < avctx->height; y++) {\n        r = new_palette[0] & 0xFF0000;\n        g = new_palette[0] & 0xFF00;\n        b = new_palette[0] & 0xFF;\n        for (x = 0; x < avctx->width; x++) {\n            index  = *ptr++;\n            op     = index >> 4;\n            index &= 15;\n            switch (op) {\n            case 0:\n                r = new_palette[index] & 0xFF0000;\n                g = new_palette[index] & 0xFF00;\n                b = new_palette[index] & 0xFF;\n                break;\n            case 1:\n                b = index * 0x11;\n                break;\n            case 2:\n                r = index * 0x11 << 16;\n                break;\n            case 3:\n                g = index * 0x11 << 8;\n                break;\n            }\n            AV_WL24(out + x * 3, r | g | b);\n        }\n        out += frame->linesize[0];\n    }\n}\n\nstatic void cdxl_decode_ham8(CDXLVideoContext *c, AVFrame *frame)\n{\n    AVCodecContext *avctx = c->avctx;\n    uint32_t new_palette[64], r, g, b;\n    uint8_t *ptr, *out, index, op;\n    int x, y;\n\n    ptr = c->new_video;\n    out = frame->data[0];\n\n    import_palette(c, new_palette);\n    import_format(c, avctx->width, c->new_video);\n\n    for (y = 0; y < avctx->height; y++) {\n        r = new_palette[0] & 0xFF0000;\n        g = new_palette[0] & 0xFF00;\n        b = new_palette[0] & 0xFF;\n        for (x = 0; x < avctx->width; x++) {\n            index  = *ptr++;\n            op     = index >> 6;\n            index &= 63;\n            switch (op) {\n            case 0:\n                r = new_palette[index] & 0xFF0000;\n                g = new_palette[index] & 0xFF00;\n                b = new_palette[index] & 0xFF;\n                break;\n            case 1:\n                b = (index <<  2) | (b & 3);\n                break;\n            case 2:\n                r = (index << 18) | (r & (3 << 16));\n                break;\n            case 3:\n                g = (index << 10) | (g & (3 << 8));\n                break;\n            }\n            AV_WL24(out + x * 3, r | g | b);\n        }\n        out += frame->linesize[0];\n    }\n}\n\nstatic int cdxl_decode_frame(AVCodecContext *avctx, void *data,\n                             int *got_frame, AVPacket *pkt)\n{\n    CDXLVideoContext *c = avctx->priv_data;\n    AVFrame * const p = data;\n    int ret, w, h, encoding, aligned_width, buf_size = pkt->size;\n    const uint8_t *buf = pkt->data;\n\n    if (buf_size < 32)\n        return AVERROR_INVALIDDATA;\n    encoding        = buf[1] & 7;\n    c->format       = buf[1] & 0xE0;\n    w               = AV_RB16(&buf[14]);\n    h               = AV_RB16(&buf[16]);\n    c->bpp          = buf[19];\n    c->palette_size = AV_RB16(&buf[20]);\n    c->palette      = buf + 32;\n    c->video        = c->palette + c->palette_size;\n    c->video_size   = buf_size - c->palette_size - 32;\n\n    if (c->palette_size > 512)\n        return AVERROR_INVALIDDATA;\n    if (buf_size < c->palette_size + 32)\n        return AVERROR_INVALIDDATA;\n    if (c->bpp < 1)\n        return AVERROR_INVALIDDATA;\n    if (c->format != BIT_PLANAR && c->format != BIT_LINE && c->format != CHUNKY) {\n        avpriv_request_sample(avctx, \"Pixel format 0x%0x\", c->format);\n        return AVERROR_PATCHWELCOME;\n    }\n\n    if ((ret = ff_set_dimensions(avctx, w, h)) < 0)\n        return ret;\n\n    if (c->format == CHUNKY)\n        aligned_width = avctx->width;\n    else\n        aligned_width = FFALIGN(c->avctx->width, 16);\n    c->padded_bits  = aligned_width - c->avctx->width;\n    if (c->video_size < aligned_width * avctx->height * (int64_t)c->bpp / 8)\n        return AVERROR_INVALIDDATA;\n    if (!encoding && c->palette_size && c->bpp <= 8 && c->format != CHUNKY) {\n        avctx->pix_fmt = AV_PIX_FMT_PAL8;\n    } else if (encoding == 1 && (c->bpp == 6 || c->bpp == 8) && c->format != CHUNKY) {\n        if (c->palette_size != (1 << (c->bpp - 1)))\n            return AVERROR_INVALIDDATA;\n        avctx->pix_fmt = AV_PIX_FMT_BGR24;\n    } else if (!encoding && c->bpp == 24 && c->format == CHUNKY &&\n               !c->palette_size) {\n        avctx->pix_fmt = AV_PIX_FMT_RGB24;\n    } else {\n        avpriv_request_sample(avctx, \"Encoding %d, bpp %d and format 0x%x\",\n                              encoding, c->bpp, c->format);\n        return AVERROR_PATCHWELCOME;\n    }\n\n    if ((ret = ff_get_buffer(avctx, p, 0)) < 0)\n        return ret;\n    p->pict_type = AV_PICTURE_TYPE_I;\n\n    if (encoding) {\n        av_fast_padded_malloc(&c->new_video, &c->new_video_size,\n                              h * w + AV_INPUT_BUFFER_PADDING_SIZE);\n        if (!c->new_video)\n            return AVERROR(ENOMEM);\n        if (c->bpp == 8)\n            cdxl_decode_ham8(c, p);\n        else\n            cdxl_decode_ham6(c, p);\n    } else if (avctx->pix_fmt == AV_PIX_FMT_PAL8) {\n        cdxl_decode_rgb(c, p);\n    } else {\n        cdxl_decode_raw(c, p);\n    }\n    *got_frame = 1;\n\n    return buf_size;\n}\n\nstatic av_cold int cdxl_decode_end(AVCodecContext *avctx)\n{\n    CDXLVideoContext *c = avctx->priv_data;\n\n    av_freep(&c->new_video);\n\n    return 0;\n}\n\nAVCodec ff_cdxl_decoder = {\n    .name           = \"cdxl\",\n    .long_name      = NULL_IF_CONFIG_SMALL(\"Commodore CDXL video\"),\n    .type           = AVMEDIA_TYPE_VIDEO,\n    .id             = AV_CODEC_ID_CDXL,\n    .priv_data_size = sizeof(CDXLVideoContext),\n    .init           = cdxl_decode_init,\n    .close          = cdxl_decode_end,\n    .decode         = cdxl_decode_frame,\n    .capabilities   = AV_CODEC_CAP_DR1,\n};\n"], "filenames": ["libavcodec/cdxl.c"], "buggy_code_start_loc": [282], "buggy_code_end_loc": [283], "fixing_code_start_loc": [282], "fixing_code_end_loc": [283], "type": "CWE-119", "message": "The cdxl_decode_frame function in libavcodec/cdxl.c in FFmpeg 2.8.x before 2.8.12, 3.0.x before 3.0.8, 3.1.x before 3.1.8, 3.2.x before 3.2.5, and 3.3.x before 3.3.1 does not exclude the CHUNKY format, which allows remote attackers to cause a denial of service (heap-based buffer overflow and application crash) or possibly have unspecified other impact via a crafted file.", "other": {"cve": {"id": "CVE-2017-9996", "sourceIdentifier": "cve@mitre.org", "published": "2017-06-28T06:29:00.613", "lastModified": "2017-07-05T14:54:26.437", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The cdxl_decode_frame function in libavcodec/cdxl.c in FFmpeg 2.8.x before 2.8.12, 3.0.x before 3.0.8, 3.1.x before 3.1.8, 3.2.x before 3.2.5, and 3.3.x before 3.3.1 does not exclude the CHUNKY format, which allows remote attackers to cause a denial of service (heap-based buffer overflow and application crash) or possibly have unspecified other impact via a crafted file."}, {"lang": "es", "value": "La funci\u00f3n cdxl_decode_frame del archivo libavcodec/cdxl.c en Ffmpeg 2.8.x en sus versiones anteriores a 2.8.12, 3.0.x en sus versiones anteriores a la 3.0.8, 3.1.x, en sus versiones anteriores a la 3.1.8, 3.2.x en sus versiones anteriores a 3.2.5, y 3.3.x en sus versiones anteriores a la 3.3.1 no excluye el formato CHUNKY el cual permite a un atacante remoto provocar una denegaci\u00f3n de servicio (buffer overflow basado en la memoria din\u00e1mica -heap- y ca\u00edda de la aplicaci\u00f3n) u otro posible impacto no especificado mediante la manipulaci\u00f3n del archivo."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8:*:*:*:*:*:*:*", "matchCriteriaId": "DAA8F265-CE4D-46FE-9871-FDD4D6738DAB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.1:*:*:*:*:*:*:*", "matchCriteriaId": "AA3F5FAA-AD9E-4FC1-B91C-E9A561E95173"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.2:*:*:*:*:*:*:*", "matchCriteriaId": "18A269C0-FE0F-4178-8195-955D373D9055"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.3:*:*:*:*:*:*:*", "matchCriteriaId": "CCA6A474-DA24-4510-8AAA-5DF2E85B4D88"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.4:*:*:*:*:*:*:*", "matchCriteriaId": "0D124F06-CF7E-4549-82EC-D0EC0B73D146"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.5:*:*:*:*:*:*:*", "matchCriteriaId": "4E0A8850-5FAB-449E-B4E9-1DF056BCF5A0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.6:*:*:*:*:*:*:*", "matchCriteriaId": "E24CBBE7-4BC8-4865-B4BE-13F8437B64F6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.7:*:*:*:*:*:*:*", "matchCriteriaId": "5AC71065-BD6F-4B3F-AEB2-2C4E7C650411"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.8:*:*:*:*:*:*:*", "matchCriteriaId": "8E9193A0-0FB7-4692-9DA1-799EF9953628"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.9:*:*:*:*:*:*:*", "matchCriteriaId": "11FD6747-CE4D-4A0E-8EF0-E9673E843AAC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.10:*:*:*:*:*:*:*", "matchCriteriaId": "C0964EE9-0B85-40C8-ACFA-4E373F33762B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:2.8.11:*:*:*:*:*:*:*", "matchCriteriaId": "87D7512C-F541-4933-A6F2-FB8773F5B2A4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0:*:*:*:*:*:*:*", "matchCriteriaId": "C6E85AA0-559E-4EC5-AF61-100732EF0643"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "3E86E3C4-946B-4E89-B0C1-010046D8D478"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "94E316AE-DF67-40B7-99CE-CE30BFECC4C7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "368CB50E-729C-4CA3-A6E4-67A277354255"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "10FD1F85-27FB-4E8B-A2D0-529A048701C9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "263617D0-E1EF-49DB-B10A-1FF66D8FDFA0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "816B3124-59AD-4209-BD11-D7B8F2898E3F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "47F33A28-B1A4-4498-BE03-C02831CC30E6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1:*:*:*:*:*:*:*", "matchCriteriaId": "1A730657-04E4-4802-8336-DB067AF00C5A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "77E8C6C8-4849-4475-8271-CAD3ECE761CC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "59A336FF-56BE-4B09-827E-887FCF0A018B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "E6FB6CF6-F80E-4570-8790-F43D2F035A07"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.4:*:*:*:*:*:*:*", "matchCriteriaId": "95D2E370-7B0E-451F-9802-D4C272C4902E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "A040488F-32AA-4451-B922-45B17D2AEA90"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.6:*:*:*:*:*:*:*", "matchCriteriaId": "A7338D2F-2815-4848-B022-CD35E4620093"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.7:*:*:*:*:*:*:*", "matchCriteriaId": "BC513E18-4938-4424-88B3-58D57FB9A617"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.2:*:*:*:*:*:*:*", "matchCriteriaId": "21F765CB-B78E-42A3-BB22-D9FC515694B3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "F5DFEAF5-8003-4EDB-B2B3-9022052939C4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "498C4AE1-3763-4F6F-873A-AB67B86D25F2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "D86E67CD-9D1A-4544-A0E8-2D2476CCF988"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "F2551ED3-EC8F-4ABC-9C50-C0567CEE7CC2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.3:*:*:*:*:*:*:*", "matchCriteriaId": "ABC38E2D-3FA2-446B-B5BA-24E98BAA0EEE"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/99323", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1378", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1427", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/FFmpeg/FFmpeg/commit/1e42736b95065c69a7481d0cf55247024f54b660", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/FFmpeg/FFmpeg/commit/e1b60aad77c27ed5d4dfc11e5e6a05a38c70489d", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1e42736b95065c69a7481d0cf55247024f54b660"}}