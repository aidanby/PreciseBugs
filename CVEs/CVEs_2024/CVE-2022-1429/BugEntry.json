{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Helper;\n\nuse Doctrine\\DBAL\\Query\\QueryBuilder as DoctrineQueryBuilder;\nuse Pimcore\\Db;\nuse Pimcore\\Logger;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\DataObject\\ClassDefinition;\nuse Pimcore\\Model\\DataObject\\Objectbrick;\n\n/**\n * @internal\n */\nclass GridHelperService\n{\n    /**\n     * @param string $filterJson\n     * @param ClassDefinition $class\n     * @param string $requestedLanguage\n     *\n     * @return array\n     */\n    public function getFeatureAndSlugFilters(string $filterJson, ClassDefinition $class, string $requestedLanguage): array\n    {\n        $featureJoins = [];\n        $slugJoins = [];\n        $slugConditions = [];\n        $featureConditions = [];\n\n        if ($filterJson) {\n            $filters = json_decode($filterJson, true);\n            foreach ($filters as $filter) {\n                $operator = '=';\n\n                $filterField = $filter['property'];\n                $filterOperator = $filter['operator'];\n\n                if ($filter['type'] == 'string') {\n                    $operator = 'LIKE';\n                } elseif ($filter['type'] == 'numeric') {\n                    if ($filterOperator == 'lt') {\n                        $operator = '<';\n                    } elseif ($filterOperator == 'gt') {\n                        $operator = '>';\n                    } elseif ($filterOperator == 'eq') {\n                        $operator = '=';\n                    }\n                } elseif ($filter['type'] == 'date') {\n                    if ($filterOperator == 'lt') {\n                        $operator = '<';\n                    } elseif ($filterOperator == 'gt') {\n                        $operator = '>';\n                    } elseif ($filterOperator == 'eq') {\n                        $operator = '=';\n                    }\n                    $filter['value'] = strtotime($filter['value']);\n                } elseif ($filter['type'] == 'list') {\n                    $operator = '=';\n                } elseif ($filter['type'] == 'boolean') {\n                    $operator = '=';\n                    $filter['value'] = (int)$filter['value'];\n                }\n\n                $keyParts = explode('~', $filterField);\n\n                $slugFd = null;\n                $field = null;\n                $slugKey = null;\n                $mappedKey = null;\n\n                if (substr($filterField, 0, 1) == '~') {\n                    $type = $keyParts[1];\n                    if ($type != 'classificationstore') {\n                        continue;\n                    }\n\n                    $fieldName = $keyParts[2];\n                    $groupKeyId = explode('-', $keyParts[3]);\n\n                    /** @var Model\\DataObject\\ClassDefinition\\Data\\Classificationstore $csFieldDefinition */\n                    $csFieldDefinition = $class->getFieldDefinition($fieldName);\n\n                    $language = $requestedLanguage;\n                    if (!$csFieldDefinition->isLocalized()) {\n                        $language = 'default';\n                    }\n\n                    $groupId = $groupKeyId[0];\n                    $keyid = $groupKeyId[1];\n\n                    $keyConfig = Model\\DataObject\\Classificationstore\\KeyConfig::getById($keyid);\n                    $type = $keyConfig->getType();\n                    $definition = json_decode($keyConfig->getDefinition());\n                    $field = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n\n                    if ($field instanceof Model\\DataObject\\ClassDefinition\\Data) {\n                        $mappedKey = 'cskey_' . $fieldName . '_' . $groupId . '_' . $keyid;\n                        $featureJoins[] = ['fieldname' => $fieldName, 'groupId' => $groupId, 'keyId' => $keyid, 'language' => $language];\n                        $featureCondition = $field->getFilterConditionExt(\n                            $filter['value'],\n                            $operator,\n                            [\n                                'name' => $mappedKey, ]\n                        );\n\n                        $featureConditions[$mappedKey] = $featureCondition;\n                    }\n                } elseif (count($keyParts) > 1) {\n                    $brickType = $keyParts[0];\n                    $brickKey = $keyParts[1];\n\n                    if (strpos($brickType, '?') !== false) {\n                        $brickDescriptor = substr($brickType, 1);\n                        $brickDescriptor = json_decode($brickDescriptor, true);\n                        $brickType = $brickDescriptor['containerKey'];\n                    }\n\n                    $brickDef = Objectbrick\\Definition::getByKey($brickType);\n                    if ($slugFd = $brickDef->getFieldDefinition($brickKey) instanceof ClassDefinition\\Data\\UrlSlug) {\n                        $slugKey = $brickKey;\n                        $slugJoins[] = ['fieldname' => $brickKey];\n                    }\n                } else {\n                    if ($slugFd = $class->getFieldDefinition($filterField) instanceof ClassDefinition\\Data\\UrlSlug) {\n                        $slugKey = $filterField;\n                        $slugJoins[] = ['fieldname' => $filterField];\n                    }\n                }\n\n                if ($field && $slugFd) {\n                    $slugCondition = $field->getFilterConditionExt(\n                        $filter['value'],\n                        $operator,\n                        [\n                            'name' => $slugKey, ]\n                    );\n\n                    $slugConditions[$mappedKey] = $slugCondition;\n                }\n            }\n        }\n\n        $result = [\n            'featureJoins' => $featureJoins,\n            'slugJoins' => $slugJoins,\n            'featureConditions' => $featureConditions,\n            'slugConditions' => $slugConditions,\n        ];\n\n        return $result;\n    }\n\n    /**\n     *\n     * @param string $filterJson\n     * @param ClassDefinition $class\n     *\n     * @return string\n     */\n    public function getFilterCondition($filterJson, ClassDefinition $class, $tablePrefix = null): string\n    {\n        $systemFields = Model\\DataObject\\Service::getSystemFields();\n\n        // create filter condition\n        $conditionPartsFilters = [];\n\n        if ($filterJson) {\n            $db = \\Pimcore\\Db::get();\n            $filters = json_decode($filterJson, true);\n\n            foreach ($filters as $filter) {\n                if (isset($filter['value'])) {\n                    $operator = '=';\n\n                    $filterField = $filter['property'];\n                    $filterOperator = $filter['operator'];\n\n                    if ($filter['type'] == 'string') {\n                        $operator = 'LIKE';\n                    } elseif ($filter['type'] == 'date') {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                        $filter['value'] = strtotime($filter['value']);\n                    } elseif ($filter['type'] == 'list') {\n                        $operator = '=';\n                    } elseif ($filter['type'] == 'boolean') {\n                        $operator = '=';\n                        $filter['value'] = (int)$filter['value'];\n                    } else {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                    }\n\n                    $field = $class->getFieldDefinition($filterField);\n                    $brickField = null;\n                    $brickKey = null;\n                    $brickType = null;\n                    $brickDescriptor = null;\n                    $isLocalized = false;\n                    if (!$field) {\n\n                        // if the definition doesn't exist check for a localized field\n                        $localized = $class->getFieldDefinition('localizedfields');\n                        if ($localized instanceof ClassDefinition\\Data\\Localizedfields) {\n                            $field = $localized->getFieldDefinition($filterField);\n                        }\n\n                        //if the definition doesn't exist check for object brick\n                        $keyParts = explode('~', $filterField);\n\n                        if (substr($filterField, 0, 1) === '~') {\n                            // not needed for now\n                            //                            $type = $keyParts[1];\n                            //                            $field = $keyParts[2];\n                            //                            $keyid = $keyParts[3];\n                        } elseif (count($keyParts) > 1) {\n                            $brickType = $keyParts[0];\n                            $brickKey = $keyParts[1];\n\n                            if (strpos($brickType, '?') !== false) {\n                                $brickDescriptor = substr($brickType, 1);\n                                $brickDescriptor = json_decode($brickDescriptor, true);\n                                $brickType = $brickDescriptor['containerKey'];\n                            }\n\n                            $key = Model\\DataObject\\Service::getFieldForBrickType($class, $brickType);\n                            $field = $class->getFieldDefinition($key);\n\n                            $brickClass = Objectbrick\\Definition::getByKey($brickType);\n\n                            $brickFieldKey = $brickDescriptor ? $brickDescriptor['brickfield'] : $brickKey;\n\n                            $brickClassDefinitions = $brickClass->getFieldDefinitions();\n                            if (array_key_exists($brickFieldKey, $brickClassDefinitions)) {\n                                $brickField = $brickClass->getFieldDefinition($brickFieldKey);\n                            } else {\n                                /** @var ClassDefinition\\Data\\Localizedfields|null $localizedFields */\n                                $localizedFields = $brickClass->getFieldDefinition('localizedfields');\n                                if ($localizedFields) {\n                                    $brickField = $localizedFields->getFieldDefinition($brickFieldKey);\n                                    $isLocalized = true;\n                                }\n                            }\n                        }\n                    }\n                    if ($field instanceof ClassDefinition\\Data\\Objectbricks || $brickDescriptor) {\n                        // custom field\n                        if ($brickDescriptor) {\n                            $brickFilterField = $brickDescriptor['fieldname'];\n                        } else {\n                            $brickFilterField = $field->getName();\n                        }\n\n                        $db = \\Pimcore\\Db::get();\n\n                        if ($isLocalized) {\n                            $brickPrefix = $db->quoteIdentifier($brickType . '_localized') . '.';\n                        } else {\n                            if ($brickField instanceof ClassDefinition\\Data\\UrlSlug) {\n                                $brickPrefix = $db->quoteIdentifier($brickKey) . '.';\n                            } else {\n                                $brickPrefix = $db->quoteIdentifier($brickType) . '.';\n                            }\n                        }\n\n                        if (is_array($filter['value'])) {\n                            $fieldConditions = [];\n                            foreach ($filter['value'] as $filterValue) {\n                                $brickCondition = '(' . $brickField->getFilterCondition($filterValue, $operator,\n                                        ['brickPrefix' => $brickPrefix]\n                                    ) . ' AND ' . $brickPrefix . 'fieldname = ' . $db->quote($brickFilterField) . ')';\n                                $fieldConditions[] = $brickCondition;\n                            }\n\n                            if (!empty($fieldConditions)) {\n                                $conditionPartsFilters[] = '(' . implode(' OR ', $fieldConditions) . ')';\n                            }\n                        } else {\n                            $brickCondition = '(' . $brickField->getFilterCondition($filter['value'], $operator,\n                                    ['brickPrefix' => $brickPrefix]) . ' AND ' . $brickPrefix . 'fieldname = ' . $db->quote($brickFilterField) . ')';\n                            $conditionPartsFilters[] = $brickCondition;\n                        }\n                    } elseif ($field instanceof ClassDefinition\\Data\\UrlSlug) {\n                        $conditionPartsFilters[] = $db->quoteIdentifier($field->getName()) . '.' . $field->getFilterCondition($filter['value'], $operator);\n                    } elseif ($field instanceof ClassDefinition\\Data) {\n                        // custom field\n                        if (is_array($filter['value'] ?? false)) {\n                            $fieldConditions = [];\n                            foreach ($filter['value'] as $filterValue) {\n                                $fieldConditions[] = $field->getFilterCondition($filterValue, $operator, ['brickPrefix' => ($tablePrefix ? $tablePrefix . '.' : null)]);\n                            }\n\n                            if (!empty($fieldConditions)) {\n                                $conditionPartsFilters[] = '(' . implode(' OR ', $fieldConditions) . ')';\n                            }\n                        } else {\n                            $conditionPartsFilters[] = $field->getFilterCondition($filter['value'] ?? null, $operator, ['brickPrefix' => ($tablePrefix ? $tablePrefix . '.' : null)]);\n                        }\n                    } elseif (in_array('o_' . $filterField, $systemFields)) {\n                        // system field\n                        if ($filterField == 'fullpath') {\n                            $conditionPartsFilters[] = 'concat(o_path, o_key) ' . $operator . ' ' . $db->quote('%' . $filter['value'] . '%');\n                        } elseif ($filterField == 'key') {\n                            $conditionPartsFilters[] = 'o_key ' . $operator . ' ' . $db->quote('%' . $filter['value'] . '%');\n                        } elseif ($filterField == 'id') {\n                            $conditionPartsFilters[] = 'oo_id ' . $operator . ' ' . $db->quote($filter['value']);\n                        } else {\n                            if ($filter['type'] == 'date' && $operator == '=') {\n                                //if the equal operator is chosen with the date type, condition has to be changed\n                                $maxTime = $filter['value'] + (86400 - 1); //specifies the top point of the range used in the condition\n                                $conditionPartsFilters[] = '`o_' . $filterField . '` BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\n                            } else {\n                                $conditionPartsFilters[] = '`o_' . $filterField . '` ' . $operator . ' ' . $db->quote($filter['value']);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        $conditionFilters = '1 = 1';\n        if (count($conditionPartsFilters) > 0) {\n            $conditionFilters = '(' . implode(' AND ', $conditionPartsFilters) . ')';\n        }\n        Logger::log('DataObjectController filter condition:' . $conditionFilters);\n\n        return $conditionFilters;\n    }\n\n    /**\n     * @param array $fields\n     *\n     * @return array\n     */\n    protected function extractBricks(array $fields): array\n    {\n        $bricks = [];\n        if ($fields) {\n            foreach ($fields as $f) {\n                $fieldName = $f;\n                $parts = explode('~', $f);\n                if (substr($f, 0, 1) == '~') {\n                    // key value, ignore for now\n                } elseif (count($parts) > 1) {\n                    $brickType = $parts[0];\n\n                    if (strpos($brickType, '?') !== false) {\n                        $brickDescriptor = substr($brickType, 1);\n                        $brickDescriptor = json_decode($brickDescriptor, true);\n                        $brickType = $brickDescriptor['containerKey'];\n                    }\n\n                    $bricks[$brickType] = $brickType;\n                }\n                $newFields[] = $fieldName;\n            }\n        }\n\n        return $bricks;\n    }\n\n    /**\n     * Adds all the query stuff that is needed for displaying, filtering and exporting the feature grid data.\n     *\n     * @param DataObject\\Listing\\Concrete $list\n     * @param array $featureJoins\n     * @param ClassDefinition $class\n     * @param array $featureAndSlugFilters\n     */\n    public function addGridFeatureJoins(DataObject\\Listing\\Concrete $list, array $featureJoins, ClassDefinition $class, array $featureAndSlugFilters)\n    {\n        if ($featureJoins) {\n            $me = $list;\n\n            $list->onCreateQueryBuilder(function (DoctrineQueryBuilder $select) use (\n                $featureJoins,\n                $class,\n                $featureAndSlugFilters,\n                $me\n            ) {\n                $db = \\Pimcore\\Db::get();\n\n                $alreadyJoined = [];\n\n                foreach ($featureJoins as $featureJoin) {\n                    $fieldname = $featureJoin['fieldname'];\n                    $mappedKey = 'cskey_' . $fieldname . '_' . $featureJoin['groupId'] . '_' . $featureJoin['keyId'];\n                    if (isset($alreadyJoined[$mappedKey])) {\n                        continue;\n                    }\n                    $alreadyJoined[$mappedKey] = 1;\n\n                    $table = $me->getDao()->getTableName();\n                    $select->addSelect('value AS ' . $mappedKey);\n                    $select->leftJoin(\n                        $table,\n                        'object_classificationstore_data_' . $class->getId(),\n                        $mappedKey,\n                        '('\n                        . $mappedKey . '.o_id = ' . $table . '.o_id'\n                        . ' and ' . $mappedKey . '.fieldname = ' . $db->quote($fieldname)\n                        . ' and ' . $mappedKey . '.groupId=' . $featureJoin['groupId']\n                        . ' and ' . $mappedKey . '.keyId=' . $featureJoin['keyId']\n                        . ' and ' . $mappedKey . '.language = ' . $db->quote($featureJoin['language'])\n                        . ')'\n                    );\n                }\n\n                $havings = $featureAndSlugFilters['featureConditions'] ?? null;\n                if ($havings) {\n                    $havings = implode(' AND ', $havings);\n                    $select->having($havings);\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds all the query stuff that is needed for displaying, filtering and exporting the slug grid data.\n     *\n     * @param DataObject\\Listing\\Concrete $list\n     * @param array $slugJoins\n     * @param array $featureAndSlugFilters\n     */\n    public function addSlugJoins(DataObject\\Listing\\Concrete $list, array $slugJoins, array $featureAndSlugFilters)\n    {\n        if ($slugJoins) {\n            $me = $list;\n\n            $list->onCreateQueryBuilder(function (DoctrineQueryBuilder $select) use (\n                $slugJoins,\n                $featureAndSlugFilters,\n                $me\n            ) {\n                $db = \\Pimcore\\Db::get();\n\n                $alreadyJoined = [];\n\n                foreach ($slugJoins as $slugJoin) {\n                    $fieldname = $slugJoin['fieldname'];\n\n                    $mappedKey = $fieldname;\n                    $alreadyJoined[$mappedKey] = 1;\n                    $table = $me->getDao()->getTableName();\n\n                    $select->addSelect('slug AS ' . $mappedKey);\n                    $select->leftJoin(\n                        $table,\n                        DataObject\\Data\\UrlSlug::TABLE_NAME,\n                        $mappedKey,\n                        '('\n                        . $mappedKey . '.objectId = ' . $table . '.o_id'\n                        . ' and ' . $mappedKey . '.fieldname = ' . $db->quote($fieldname)\n                        . ')'\n                    );\n                }\n\n                $havings = $featureAndSlugFilters['slugConditions'];\n                if ($havings) {\n                    $havings = implode(' AND ', $havings);\n                    $select->having($havings);\n                }\n            });\n        }\n    }\n\n    public function prepareListingForGrid(array $requestParams, string $requestedLanguage, $adminUser): DataObject\\Listing\\Concrete\n    {\n        $folder = Model\\DataObject::getById($requestParams['folderId']);\n        $class = ClassDefinition::getById($requestParams['classId']);\n        $className = $class->getName();\n\n        $listClass = '\\\\Pimcore\\\\Model\\\\DataObject\\\\' . ucfirst($className) . '\\\\Listing';\n        /** @var DataObject\\Listing\\Concrete $list */\n        $list = new $listClass();\n\n        $colMappings = [\n            'key' => 'o_key',\n            'filename' => 'o_key',\n            'id' => 'oo_id',\n            'published' => 'o_published',\n            'modificationDate' => 'o_modificationDate',\n            'creationDate' => 'o_creationDate',\n        ];\n\n        $start = 0;\n        $limit = 20;\n        $orderKey = 'o_id';\n        $order = 'ASC';\n\n        $fields = [];\n        $bricks = [];\n        if (!empty($requestParams['fields'])) {\n            $fields = $requestParams['fields'];\n            $bricks = $this->extractBricks($fields);\n        }\n\n        if (isset($requestParams['limit'])) {\n            $limit = $requestParams['limit'];\n        }\n        if (isset($requestParams['start'])) {\n            $start = $requestParams['start'];\n        }\n\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($requestParams);\n        $doNotQuote = false;\n\n        if ($sortingSettings['order']) {\n            $order = $sortingSettings['order'];\n        }\n        if ($sortingSettings['orderKey'] !== null && strlen($sortingSettings['orderKey']) > 0) {\n            $orderKey = $sortingSettings['orderKey'];\n            if (substr($orderKey, 0, 1) !== '~') {\n                if (array_key_exists($orderKey, $colMappings)) {\n                    $orderKey = $colMappings[$orderKey];\n                } elseif ($orderKey === 'fullpath') {\n                    $orderKey = 'CAST(CONCAT(o_path, o_key) AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci';\n                    $doNotQuote = true;\n                } elseif ($class->getFieldDefinition($orderKey) instanceof ClassDefinition\\Data\\QuantityValue) {\n                    $orderKey = 'concat(' . $orderKey . '__unit, ' . $orderKey . '__value)';\n                    $doNotQuote = true;\n                } elseif ($class->getFieldDefinition($orderKey) instanceof ClassDefinition\\Data\\RgbaColor) {\n                    $orderKey = 'concat(' . $orderKey . '__rgb, ' . $orderKey . '__a)';\n                    $doNotQuote = true;\n                } elseif (strpos($orderKey, '~') !== false) {\n                    $orderKeyParts = explode('~', $orderKey);\n\n                    if (strpos($orderKey, '?') !== false) {\n                        $brickDescriptor = substr($orderKeyParts[0], 1);\n                        $brickDescriptor = json_decode($brickDescriptor, true);\n                        $db = Db::get();\n                        $orderKey = $db->quoteIdentifier($brickDescriptor['containerKey'] . '_localized') . '.' . $db->quoteIdentifier($brickDescriptor['brickfield']);\n                        $doNotQuote = true;\n                    } elseif (count($orderKeyParts) === 2) {\n                        $orderKey = $orderKeyParts[0].'.'.$orderKeyParts[1];\n                        $doNotQuote = true;\n                    }\n                } else {\n                    $orderKey = $list->getDao()->getTableName().'.'.$orderKey;\n                    $doNotQuote = true;\n                }\n            }\n        }\n\n        $conditionFilters = [];\n\n        if (($requestParams['specificId'] ?? false) && is_numeric($requestParams['specificId'])) {\n            $conditionFilters[] = 'oo_id = ' . (int) $requestParams['specificId'];\n        }\n\n        if (isset($requestParams['only_direct_children']) && $requestParams['only_direct_children'] === 'true') {\n            $conditionFilters[] = 'o_parentId = ' . $folder->getId();\n        } else {\n            $quotedPath = $list->quote($folder->getRealFullPath());\n            $quotedWildcardPath = $list->quote($list->escapeLike(str_replace('//', '/', $folder->getRealFullPath() . '/')) . '%');\n            $conditionFilters[] = '(o_path = ' . $quotedPath . ' OR o_path LIKE ' . $quotedWildcardPath . ')';\n        }\n\n        if (!$adminUser->isAdmin()) {\n            $userIds = $adminUser->getRoles();\n            $userIds[] = $adminUser->getId();\n            $conditionFilters[] = ' (\n                                                    (select list from users_workspaces_object where userId in (' . implode(',', $userIds) . ') and LOCATE(CONCAT(o_path,o_key),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                    OR\n                                                    (select list from users_workspaces_object where userId in (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(o_path,o_key))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                 )';\n        }\n\n        $featureJoins = [];\n        $slugJoins = [];\n        $featureAndSlugFilters = [];\n\n        // create filter condition\n        if (!empty($requestParams['filter'])) {\n            $conditionFilters[] = $this->getFilterCondition($requestParams['filter'], $class, $list->getDao()->getTableName());\n            $featureAndSlugFilters = $this->getFeatureAndSlugFilters($requestParams['filter'], $class, $requestedLanguage);\n            if ($featureAndSlugFilters) {\n                $featureJoins = array_merge($featureJoins, $featureAndSlugFilters['featureJoins']);\n                $slugJoins = array_merge($slugJoins, $featureAndSlugFilters['slugJoins']);\n            }\n        }\n\n        if (!empty($requestParams['condition']) && $adminUser->isAdmin()) {\n            $conditionFilters[] = '(' . $requestParams['condition'] . ')';\n        }\n\n        if (!empty($requestParams['query'])) {\n            $query = $this->filterQueryParam($requestParams['query']);\n            if (!empty($query)) {\n                $conditionFilters[] = 'oo_id IN (SELECT id FROM search_backend_data WHERE maintype = \"object\" AND MATCH (`data`,`properties`) AGAINST (' . $list->quote($query) . ' IN BOOLEAN MODE))';\n            }\n        }\n\n        if (!empty($bricks)) {\n            foreach ($bricks as $b) {\n                $brickType = $b;\n                if (is_array($brickType)) {\n                    $brickType = $brickType['containerKey'];\n                }\n                $list->addObjectbrick($brickType);\n            }\n        }\n\n        $list->setCondition(implode(' AND ', $conditionFilters));\n        if (empty($requestParams['batch']) && empty($requestParams['ids'])) {\n            $list->setLimit($limit);\n            $list->setOffset($start);\n        }\n\n        if (isset($sortingSettings['isFeature']) && $sortingSettings['isFeature']) {\n            $orderKey = 'cskey_' . $sortingSettings['fieldname'] . '_' . $sortingSettings['groupId'] . '_' . $sortingSettings['keyId'];\n            $list->setOrderKey($orderKey);\n            $list->setGroupBy('oo_id');\n\n            $parts = explode('_', $orderKey);\n\n            $fieldname = $parts[1];\n            /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $csFieldDefinition */\n            $csFieldDefinition = $class->getFieldDefinition($fieldname);\n            $sortingSettings['language'] = $csFieldDefinition->isLocalized() ? $requestedLanguage : 'default';\n            $featureJoins[] = $sortingSettings;\n        } else {\n            $list->setOrderKey($orderKey, !$doNotQuote);\n        }\n        $list->setOrder($order);\n\n        //parameters specified in the objects grid\n        if (!empty($requestParams['ids'])) {\n            $quotedIds = [];\n            foreach ($requestParams['ids'] as $id) {\n                $quotedIds[] = $list->quote($id);\n            }\n            if (!empty($quotedIds)) {\n                //add a condition if id numbers are specified\n                $list->addConditionParam('oo_id IN (' . implode(',', $quotedIds) . ')');\n            }\n        }\n\n        if ($class->getShowVariants()) {\n            $list->setObjectTypes([DataObject::OBJECT_TYPE_OBJECT, DataObject::OBJECT_TYPE_VARIANT]);\n        }\n\n        $this->addGridFeatureJoins($list, $featureJoins, $class, $featureAndSlugFilters);\n        $this->addSlugJoins($list, $slugJoins, $featureAndSlugFilters);\n\n        $list->setLocale($requestedLanguage);\n\n        if (empty($requestParams['filter']) && empty($requestParams['condition']) && empty($requestParams['sort'])) {\n            $list->setIgnoreLocalizedFields(true);\n        }\n\n        return $list;\n    }\n\n    public function prepareAssetListingForGrid($allParams, $adminUser)\n    {\n        $db = \\Pimcore\\Db::get();\n        $folder = Model\\Asset::getById($allParams['folderId']);\n\n        $start = 0;\n        $limit = 0;\n        $orderKey = 'id';\n        $order = 'ASC';\n\n        if (isset($allParams['limit'])) {\n            $limit = $allParams['limit'];\n        }\n        if (isset($allParams['start'])) {\n            $start = $allParams['start'];\n        }\n\n        $orderKeyQuote = true;\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey']) {\n            $orderKey = explode('~', $sortingSettings['orderKey'])[0];\n            if ($orderKey === 'fullpath') {\n                $orderKey = 'CAST(CONCAT(path,filename) AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci';\n                $orderKeyQuote = false;\n            } elseif ($orderKey === 'filename') {\n                $orderKey = 'CAST(filename AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci';\n                $orderKeyQuote = false;\n            }\n\n            $order = $sortingSettings['order'];\n        }\n\n        $list = new Model\\Asset\\Listing();\n\n        $conditionFilters = [];\n        if (isset($allParams['only_direct_children']) && $allParams['only_direct_children'] == 'true') {\n            $conditionFilters[] = 'parentId = ' . $folder->getId();\n        } else {\n            $conditionFilters[] = 'path LIKE ' . ($folder->getRealFullPath() === '/' ? \"'/%'\" : $list->quote($list->escapeLike($folder->getRealFullPath()) . '/%'));\n        }\n\n        if (isset($allParams['only_unreferenced']) && $allParams['only_unreferenced'] === 'true') {\n            $conditionFilters[] = 'id NOT IN (SELECT targetid FROM dependencies WHERE targettype=\\'asset\\')';\n        }\n\n        $conditionFilters[] = \"type != 'folder'\";\n        $filterJson = $allParams['filter'] ?? null;\n        if ($filterJson) {\n            $filters = json_decode($filterJson, true);\n            foreach ($filters as $filter) {\n                $operator = '=';\n\n                $filterDef = explode('~', $filter['property']);\n                $filterField = $filterDef[0];\n                $filterOperator = $filter['operator'];\n                $filterType = $filter['type'];\n\n                if ($filterType == 'string') {\n                    $operator = 'LIKE';\n                } elseif ($filterType == 'numeric') {\n                    if ($filterOperator == 'lt') {\n                        $operator = '<';\n                    } elseif ($filterOperator == 'gt') {\n                        $operator = '>';\n                    } elseif ($filterOperator == 'eq') {\n                        $operator = '=';\n                    }\n                } elseif ($filterType == 'date') {\n                    $filter['value'] = strtotime($filter['value']);\n                    if ($filterOperator == 'lt') {\n                        $operator = '<';\n                    } elseif ($filterOperator == 'gt') {\n                        $operator = '>';\n                    } elseif ($filterOperator == 'eq') {\n                        $operator = 'BETWEEN';\n                        //if the equal operator is chosen with the date type, condition has to be changed\n                        $maxTime = $filter['value'] + (86400 - 1); //specifies the top point of the range used in the condition\n                        $filter['value'] = $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\n                    }\n                } elseif ($filterType == 'list') {\n                    $operator = 'IN';\n                } elseif ($filterType == 'boolean') {\n                    $operator = '=';\n                    $filter['value'] = (int) $filter['value'];\n                }\n                // system field\n                $value = $filter['value'] ?? '';\n                if ($operator == 'LIKE') {\n                    $value = $db->quote('%' . $value . '%');\n                } elseif ($operator == 'IN') {\n                    $quoted = array_map(function ($val) use ($db) {\n                        return $db->quote($val);\n                    }, $value);\n                    $value = '(' . implode(',', $quoted) . ')';\n                } elseif ($operator == 'BETWEEN') {\n                } else {\n                    $value = $db->quote($value);\n                }\n\n                if ($filterField == 'fullpath') {\n                    $filterField = 'CONCAT(path,filename)';\n                }\n\n                if (isset($filterDef[1]) && $filterDef[1] == 'system') {\n                    $conditionFilters[] = $filterField . ' ' . $operator . ' ' . $value;\n                } else {\n                    $language = $allParams['language'];\n                    if (isset($filterDef[1])) {\n                        $language = $filterDef[1];\n                    }\n                    $language = str_replace(['none', 'default'], '', $language);\n                    $conditionFilters[] = 'id IN (SELECT cid FROM assets_metadata WHERE `name` = ' . $db->quote($filterField) . ' AND `data` ' . $operator . ' ' . $value . ' AND `language` = ' . $db->quote($language). ')';\n                }\n            }\n        }\n\n        if (!$adminUser->isAdmin()) {\n            $userIds = $adminUser->getRoles();\n            $userIds[] = $adminUser->getId();\n            $conditionFilters[] = ' (\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(CONCAT(path, filename),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                    OR\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(path, filename))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                 )';\n        }\n\n        //filtering for tags\n        if (!empty($allParams['tagIds'])) {\n            $tagIds = $allParams['tagIds'];\n            foreach ($tagIds as $tagId) {\n                if ($allParams['considerChildTags'] ?? false) {\n                    $tag = Model\\Element\\Tag::getById($tagId);\n                    if ($tag) {\n                        $tagPath = $tag->getFullIdPath();\n                        $conditionFilters[] = 'id IN (SELECT cId FROM `tags_assignment` INNER JOIN `tags` ON tags.id = tags_assignment.tagid WHERE `ctype` = \"asset\" AND (`id` = ' .(int)$tagId. ' OR `idPath` LIKE ' . $db->quote($tagPath . '%') . '))';\n                    }\n                } else {\n                    $conditionFilters[] = 'id IN (SELECT cId FROM `tags_assignment` WHERE `ctype` = \"asset\" AND tagid = ' .(int)$tagId. ')';\n                }\n            }\n        }\n\n        $condition = implode(' AND ', $conditionFilters);\n\n        $list->setCondition($condition);\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey, $orderKeyQuote);\n\n        return $list;\n    }\n\n    /**\n     * @param string $query\n     *\n     * @return string\n     */\n    protected function filterQueryParam(string $query)\n    {\n        if ($query == '*') {\n            $query = '';\n        }\n\n        $query = str_replace('%', '*', $query);\n        $query = str_replace('@', '#', $query);\n        $query = preg_replace(\"@([^ ])\\-@\", '$1 ', $query);\n\n        $query = str_replace(['<', '>', '(', ')', '~'], ' ', $query);\n\n        // it is not allowed to have * behind another *\n        $query = preg_replace('#[*]+#', '*', $query);\n\n        // no boolean operators at the end of the query\n        $query = rtrim($query, '+- ');\n\n        return $query;\n    }\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Helper;\n\nuse Doctrine\\DBAL\\Query\\QueryBuilder as DoctrineQueryBuilder;\nuse Pimcore\\Db;\nuse Pimcore\\Logger;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\DataObject\\ClassDefinition;\nuse Pimcore\\Model\\DataObject\\Objectbrick;\n\n/**\n * @internal\n */\nclass GridHelperService\n{\n    /**\n     * @param string $filterJson\n     * @param ClassDefinition $class\n     * @param string $requestedLanguage\n     *\n     * @return array\n     */\n    public function getFeatureAndSlugFilters(string $filterJson, ClassDefinition $class, string $requestedLanguage): array\n    {\n        $featureJoins = [];\n        $slugJoins = [];\n        $slugConditions = [];\n        $featureConditions = [];\n\n        if ($filterJson) {\n            $filters = json_decode($filterJson, true);\n            foreach ($filters as $filter) {\n                $operator = '=';\n\n                $filterField = $filter['property'];\n                $filterOperator = $filter['operator'];\n\n                if ($filter['type'] == 'string') {\n                    $operator = 'LIKE';\n                } elseif ($filter['type'] == 'numeric') {\n                    if ($filterOperator == 'lt') {\n                        $operator = '<';\n                    } elseif ($filterOperator == 'gt') {\n                        $operator = '>';\n                    } elseif ($filterOperator == 'eq') {\n                        $operator = '=';\n                    }\n                } elseif ($filter['type'] == 'date') {\n                    if ($filterOperator == 'lt') {\n                        $operator = '<';\n                    } elseif ($filterOperator == 'gt') {\n                        $operator = '>';\n                    } elseif ($filterOperator == 'eq') {\n                        $operator = '=';\n                    }\n                    $filter['value'] = strtotime($filter['value']);\n                } elseif ($filter['type'] == 'list') {\n                    $operator = '=';\n                } elseif ($filter['type'] == 'boolean') {\n                    $operator = '=';\n                    $filter['value'] = (int)$filter['value'];\n                }\n\n                $keyParts = explode('~', $filterField);\n\n                $slugFd = null;\n                $field = null;\n                $slugKey = null;\n                $mappedKey = null;\n\n                if (substr($filterField, 0, 1) == '~') {\n                    $type = $keyParts[1];\n                    if ($type != 'classificationstore') {\n                        continue;\n                    }\n\n                    $fieldName = $keyParts[2];\n                    $groupKeyId = explode('-', $keyParts[3]);\n\n                    /** @var Model\\DataObject\\ClassDefinition\\Data\\Classificationstore $csFieldDefinition */\n                    $csFieldDefinition = $class->getFieldDefinition($fieldName);\n\n                    $language = $requestedLanguage;\n                    if (!$csFieldDefinition->isLocalized()) {\n                        $language = 'default';\n                    }\n\n                    $groupId = $groupKeyId[0];\n                    $keyid = $groupKeyId[1];\n\n                    $keyConfig = Model\\DataObject\\Classificationstore\\KeyConfig::getById($keyid);\n                    $type = $keyConfig->getType();\n                    $definition = json_decode($keyConfig->getDefinition());\n                    $field = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n\n                    if ($field instanceof Model\\DataObject\\ClassDefinition\\Data) {\n                        $mappedKey = 'cskey_' . $fieldName . '_' . $groupId . '_' . $keyid;\n                        $featureJoins[] = ['fieldname' => $fieldName, 'groupId' => $groupId, 'keyId' => $keyid, 'language' => $language];\n                        $featureCondition = $field->getFilterConditionExt(\n                            $filter['value'],\n                            $operator,\n                            [\n                                'name' => $mappedKey, ]\n                        );\n\n                        $featureConditions[$mappedKey] = $featureCondition;\n                    }\n                } elseif (count($keyParts) > 1) {\n                    $brickType = $keyParts[0];\n                    $brickKey = $keyParts[1];\n\n                    if (strpos($brickType, '?') !== false) {\n                        $brickDescriptor = substr($brickType, 1);\n                        $brickDescriptor = json_decode($brickDescriptor, true);\n                        $brickType = $brickDescriptor['containerKey'];\n                    }\n\n                    $brickDef = Objectbrick\\Definition::getByKey($brickType);\n                    if ($slugFd = $brickDef->getFieldDefinition($brickKey) instanceof ClassDefinition\\Data\\UrlSlug) {\n                        $slugKey = $brickKey;\n                        $slugJoins[] = ['fieldname' => $brickKey];\n                    }\n                } else {\n                    if ($slugFd = $class->getFieldDefinition($filterField) instanceof ClassDefinition\\Data\\UrlSlug) {\n                        $slugKey = $filterField;\n                        $slugJoins[] = ['fieldname' => $filterField];\n                    }\n                }\n\n                if ($field && $slugFd) {\n                    $slugCondition = $field->getFilterConditionExt(\n                        $filter['value'],\n                        $operator,\n                        [\n                            'name' => $slugKey, ]\n                    );\n\n                    $slugConditions[$mappedKey] = $slugCondition;\n                }\n            }\n        }\n\n        $result = [\n            'featureJoins' => $featureJoins,\n            'slugJoins' => $slugJoins,\n            'featureConditions' => $featureConditions,\n            'slugConditions' => $slugConditions,\n        ];\n\n        return $result;\n    }\n\n    /**\n     *\n     * @param string $filterJson\n     * @param ClassDefinition $class\n     *\n     * @return string\n     */\n    public function getFilterCondition($filterJson, ClassDefinition $class, $tablePrefix = null): string\n    {\n        $systemFields = Model\\DataObject\\Service::getSystemFields();\n\n        // create filter condition\n        $conditionPartsFilters = [];\n\n        if ($filterJson) {\n            $db = \\Pimcore\\Db::get();\n            $filters = json_decode($filterJson, true);\n\n            foreach ($filters as $filter) {\n                if (isset($filter['value'])) {\n                    $operator = '=';\n\n                    $filterField = $filter['property'];\n                    $filterOperator = $filter['operator'];\n\n                    if ($filter['type'] == 'string') {\n                        $operator = 'LIKE';\n                    } elseif ($filter['type'] == 'date') {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                        $filter['value'] = strtotime($filter['value']);\n                    } elseif ($filter['type'] == 'list') {\n                        $operator = '=';\n                    } elseif ($filter['type'] == 'boolean') {\n                        $operator = '=';\n                        $filter['value'] = (int)$filter['value'];\n                    } else {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                    }\n\n                    $field = $class->getFieldDefinition($filterField);\n                    $brickField = null;\n                    $brickKey = null;\n                    $brickType = null;\n                    $brickDescriptor = null;\n                    $isLocalized = false;\n                    if (!$field) {\n\n                        // if the definition doesn't exist check for a localized field\n                        $localized = $class->getFieldDefinition('localizedfields');\n                        if ($localized instanceof ClassDefinition\\Data\\Localizedfields) {\n                            $field = $localized->getFieldDefinition($filterField);\n                        }\n\n                        //if the definition doesn't exist check for object brick\n                        $keyParts = explode('~', $filterField);\n\n                        if (substr($filterField, 0, 1) === '~') {\n                            // not needed for now\n                            //                            $type = $keyParts[1];\n                            //                            $field = $keyParts[2];\n                            //                            $keyid = $keyParts[3];\n                        } elseif (count($keyParts) > 1) {\n                            $brickType = $keyParts[0];\n                            $brickKey = $keyParts[1];\n\n                            if (strpos($brickType, '?') !== false) {\n                                $brickDescriptor = substr($brickType, 1);\n                                $brickDescriptor = json_decode($brickDescriptor, true);\n                                $brickType = $brickDescriptor['containerKey'];\n                            }\n\n                            $key = Model\\DataObject\\Service::getFieldForBrickType($class, $brickType);\n                            $field = $class->getFieldDefinition($key);\n\n                            $brickClass = Objectbrick\\Definition::getByKey($brickType);\n\n                            $brickFieldKey = $brickDescriptor ? $brickDescriptor['brickfield'] : $brickKey;\n\n                            $brickClassDefinitions = $brickClass->getFieldDefinitions();\n                            if (array_key_exists($brickFieldKey, $brickClassDefinitions)) {\n                                $brickField = $brickClass->getFieldDefinition($brickFieldKey);\n                            } else {\n                                /** @var ClassDefinition\\Data\\Localizedfields|null $localizedFields */\n                                $localizedFields = $brickClass->getFieldDefinition('localizedfields');\n                                if ($localizedFields) {\n                                    $brickField = $localizedFields->getFieldDefinition($brickFieldKey);\n                                    $isLocalized = true;\n                                }\n                            }\n                        }\n                    }\n                    if ($field instanceof ClassDefinition\\Data\\Objectbricks || $brickDescriptor) {\n                        // custom field\n                        if ($brickDescriptor) {\n                            $brickFilterField = $brickDescriptor['fieldname'];\n                        } else {\n                            $brickFilterField = $field->getName();\n                        }\n\n                        $db = \\Pimcore\\Db::get();\n\n                        if ($isLocalized) {\n                            $brickPrefix = $db->quoteIdentifier($brickType . '_localized') . '.';\n                        } else {\n                            if ($brickField instanceof ClassDefinition\\Data\\UrlSlug) {\n                                $brickPrefix = $db->quoteIdentifier($brickKey) . '.';\n                            } else {\n                                $brickPrefix = $db->quoteIdentifier($brickType) . '.';\n                            }\n                        }\n\n                        if (is_array($filter['value'])) {\n                            $fieldConditions = [];\n                            foreach ($filter['value'] as $filterValue) {\n                                $brickCondition = '(' . $brickField->getFilterCondition($filterValue, $operator,\n                                        ['brickPrefix' => $brickPrefix]\n                                    ) . ' AND ' . $brickPrefix . 'fieldname = ' . $db->quote($brickFilterField) . ')';\n                                $fieldConditions[] = $brickCondition;\n                            }\n\n                            if (!empty($fieldConditions)) {\n                                $conditionPartsFilters[] = '(' . implode(' OR ', $fieldConditions) . ')';\n                            }\n                        } else {\n                            $brickCondition = '(' . $brickField->getFilterCondition($filter['value'], $operator,\n                                    ['brickPrefix' => $brickPrefix]) . ' AND ' . $brickPrefix . 'fieldname = ' . $db->quote($brickFilterField) . ')';\n                            $conditionPartsFilters[] = $brickCondition;\n                        }\n                    } elseif ($field instanceof ClassDefinition\\Data\\UrlSlug) {\n                        $conditionPartsFilters[] = $db->quoteIdentifier($field->getName()) . '.' . $field->getFilterCondition($filter['value'], $operator);\n                    } elseif ($field instanceof ClassDefinition\\Data) {\n                        // custom field\n                        if (is_array($filter['value'] ?? false)) {\n                            $fieldConditions = [];\n                            foreach ($filter['value'] as $filterValue) {\n                                $fieldConditions[] = $field->getFilterCondition($filterValue, $operator, ['brickPrefix' => ($tablePrefix ? $tablePrefix . '.' : null)]);\n                            }\n\n                            if (!empty($fieldConditions)) {\n                                $conditionPartsFilters[] = '(' . implode(' OR ', $fieldConditions) . ')';\n                            }\n                        } else {\n                            $conditionPartsFilters[] = $field->getFilterCondition($filter['value'] ?? null, $operator, ['brickPrefix' => ($tablePrefix ? $tablePrefix . '.' : null)]);\n                        }\n                    } elseif (in_array('o_' . $filterField, $systemFields)) {\n                        // system field\n                        if ($filterField == 'fullpath') {\n                            $conditionPartsFilters[] = 'concat(o_path, o_key) ' . $operator . ' ' . $db->quote('%' . $filter['value'] . '%');\n                        } elseif ($filterField == 'key') {\n                            $conditionPartsFilters[] = 'o_key ' . $operator . ' ' . $db->quote('%' . $filter['value'] . '%');\n                        } elseif ($filterField == 'id') {\n                            $conditionPartsFilters[] = 'oo_id ' . $operator . ' ' . $db->quote($filter['value']);\n                        } else {\n                            $filterField = $db->quoteIdentifier('o_' . $filterField);\n                            if ($filter['type'] == 'date' && $operator == '=') {\n                                //if the equal operator is chosen with the date type, condition has to be changed\n                                $maxTime = $filter['value'] + (86400 - 1); //specifies the top point of the range used in the condition\n                                $conditionPartsFilters[] = $filterField . ' BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\n                            } else {\n                                $conditionPartsFilters[] = $filterField . ' ' . $operator . ' ' . $db->quote($filter['value']);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        $conditionFilters = '1 = 1';\n        if (count($conditionPartsFilters) > 0) {\n            $conditionFilters = '(' . implode(' AND ', $conditionPartsFilters) . ')';\n        }\n        Logger::log('DataObjectController filter condition:' . $conditionFilters);\n\n        return $conditionFilters;\n    }\n\n    /**\n     * @param array $fields\n     *\n     * @return array\n     */\n    protected function extractBricks(array $fields): array\n    {\n        $bricks = [];\n        if ($fields) {\n            foreach ($fields as $f) {\n                $fieldName = $f;\n                $parts = explode('~', $f);\n                if (substr($f, 0, 1) == '~') {\n                    // key value, ignore for now\n                } elseif (count($parts) > 1) {\n                    $brickType = $parts[0];\n\n                    if (strpos($brickType, '?') !== false) {\n                        $brickDescriptor = substr($brickType, 1);\n                        $brickDescriptor = json_decode($brickDescriptor, true);\n                        $brickType = $brickDescriptor['containerKey'];\n                    }\n\n                    $bricks[$brickType] = $brickType;\n                }\n                $newFields[] = $fieldName;\n            }\n        }\n\n        return $bricks;\n    }\n\n    /**\n     * Adds all the query stuff that is needed for displaying, filtering and exporting the feature grid data.\n     *\n     * @param DataObject\\Listing\\Concrete $list\n     * @param array $featureJoins\n     * @param ClassDefinition $class\n     * @param array $featureAndSlugFilters\n     */\n    public function addGridFeatureJoins(DataObject\\Listing\\Concrete $list, array $featureJoins, ClassDefinition $class, array $featureAndSlugFilters)\n    {\n        if ($featureJoins) {\n            $me = $list;\n\n            $list->onCreateQueryBuilder(function (DoctrineQueryBuilder $select) use (\n                $featureJoins,\n                $class,\n                $featureAndSlugFilters,\n                $me\n            ) {\n                $db = \\Pimcore\\Db::get();\n\n                $alreadyJoined = [];\n\n                foreach ($featureJoins as $featureJoin) {\n                    $fieldname = $featureJoin['fieldname'];\n                    $mappedKey = 'cskey_' . $fieldname . '_' . $featureJoin['groupId'] . '_' . $featureJoin['keyId'];\n                    if (isset($alreadyJoined[$mappedKey])) {\n                        continue;\n                    }\n                    $alreadyJoined[$mappedKey] = 1;\n\n                    $table = $me->getDao()->getTableName();\n                    $select->addSelect('value AS ' . $mappedKey);\n                    $select->leftJoin(\n                        $table,\n                        'object_classificationstore_data_' . $class->getId(),\n                        $mappedKey,\n                        '('\n                        . $mappedKey . '.o_id = ' . $table . '.o_id'\n                        . ' and ' . $mappedKey . '.fieldname = ' . $db->quote($fieldname)\n                        . ' and ' . $mappedKey . '.groupId=' . $featureJoin['groupId']\n                        . ' and ' . $mappedKey . '.keyId=' . $featureJoin['keyId']\n                        . ' and ' . $mappedKey . '.language = ' . $db->quote($featureJoin['language'])\n                        . ')'\n                    );\n                }\n\n                $havings = $featureAndSlugFilters['featureConditions'] ?? null;\n                if ($havings) {\n                    $havings = implode(' AND ', $havings);\n                    $select->having($havings);\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds all the query stuff that is needed for displaying, filtering and exporting the slug grid data.\n     *\n     * @param DataObject\\Listing\\Concrete $list\n     * @param array $slugJoins\n     * @param array $featureAndSlugFilters\n     */\n    public function addSlugJoins(DataObject\\Listing\\Concrete $list, array $slugJoins, array $featureAndSlugFilters)\n    {\n        if ($slugJoins) {\n            $me = $list;\n\n            $list->onCreateQueryBuilder(function (DoctrineQueryBuilder $select) use (\n                $slugJoins,\n                $featureAndSlugFilters,\n                $me\n            ) {\n                $db = \\Pimcore\\Db::get();\n\n                $alreadyJoined = [];\n\n                foreach ($slugJoins as $slugJoin) {\n                    $fieldname = $slugJoin['fieldname'];\n\n                    $mappedKey = $fieldname;\n                    $alreadyJoined[$mappedKey] = 1;\n                    $table = $me->getDao()->getTableName();\n\n                    $select->addSelect('slug AS ' . $mappedKey);\n                    $select->leftJoin(\n                        $table,\n                        DataObject\\Data\\UrlSlug::TABLE_NAME,\n                        $mappedKey,\n                        '('\n                        . $mappedKey . '.objectId = ' . $table . '.o_id'\n                        . ' and ' . $mappedKey . '.fieldname = ' . $db->quote($fieldname)\n                        . ')'\n                    );\n                }\n\n                $havings = $featureAndSlugFilters['slugConditions'];\n                if ($havings) {\n                    $havings = implode(' AND ', $havings);\n                    $select->having($havings);\n                }\n            });\n        }\n    }\n\n    public function prepareListingForGrid(array $requestParams, string $requestedLanguage, $adminUser): DataObject\\Listing\\Concrete\n    {\n        $folder = Model\\DataObject::getById($requestParams['folderId']);\n        $class = ClassDefinition::getById($requestParams['classId']);\n        $className = $class->getName();\n\n        $listClass = '\\\\Pimcore\\\\Model\\\\DataObject\\\\' . ucfirst($className) . '\\\\Listing';\n        /** @var DataObject\\Listing\\Concrete $list */\n        $list = new $listClass();\n\n        $colMappings = [\n            'key' => 'o_key',\n            'filename' => 'o_key',\n            'id' => 'oo_id',\n            'published' => 'o_published',\n            'modificationDate' => 'o_modificationDate',\n            'creationDate' => 'o_creationDate',\n        ];\n\n        $start = 0;\n        $limit = 20;\n        $orderKey = 'o_id';\n        $order = 'ASC';\n\n        $fields = [];\n        $bricks = [];\n        if (!empty($requestParams['fields'])) {\n            $fields = $requestParams['fields'];\n            $bricks = $this->extractBricks($fields);\n        }\n\n        if (isset($requestParams['limit'])) {\n            $limit = $requestParams['limit'];\n        }\n        if (isset($requestParams['start'])) {\n            $start = $requestParams['start'];\n        }\n\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($requestParams);\n        $doNotQuote = false;\n\n        if ($sortingSettings['order']) {\n            $order = $sortingSettings['order'];\n        }\n        if ($sortingSettings['orderKey'] !== null && strlen($sortingSettings['orderKey']) > 0) {\n            $orderKey = $sortingSettings['orderKey'];\n            if (substr($orderKey, 0, 1) !== '~') {\n                if (array_key_exists($orderKey, $colMappings)) {\n                    $orderKey = $colMappings[$orderKey];\n                } elseif ($orderKey === 'fullpath') {\n                    $orderKey = 'CAST(CONCAT(o_path, o_key) AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci';\n                    $doNotQuote = true;\n                } elseif ($class->getFieldDefinition($orderKey) instanceof ClassDefinition\\Data\\QuantityValue) {\n                    $orderKey = 'concat(' . $orderKey . '__unit, ' . $orderKey . '__value)';\n                    $doNotQuote = true;\n                } elseif ($class->getFieldDefinition($orderKey) instanceof ClassDefinition\\Data\\RgbaColor) {\n                    $orderKey = 'concat(' . $orderKey . '__rgb, ' . $orderKey . '__a)';\n                    $doNotQuote = true;\n                } elseif (strpos($orderKey, '~') !== false) {\n                    $orderKeyParts = explode('~', $orderKey);\n\n                    if (strpos($orderKey, '?') !== false) {\n                        $brickDescriptor = substr($orderKeyParts[0], 1);\n                        $brickDescriptor = json_decode($brickDescriptor, true);\n                        $db = Db::get();\n                        $orderKey = $db->quoteIdentifier($brickDescriptor['containerKey'] . '_localized') . '.' . $db->quoteIdentifier($brickDescriptor['brickfield']);\n                        $doNotQuote = true;\n                    } elseif (count($orderKeyParts) === 2) {\n                        $orderKey = $orderKeyParts[0].'.'.$orderKeyParts[1];\n                        $doNotQuote = true;\n                    }\n                } else {\n                    $orderKey = $list->getDao()->getTableName().'.'.$orderKey;\n                    $doNotQuote = true;\n                }\n            }\n        }\n\n        $conditionFilters = [];\n\n        if (($requestParams['specificId'] ?? false) && is_numeric($requestParams['specificId'])) {\n            $conditionFilters[] = 'oo_id = ' . (int) $requestParams['specificId'];\n        }\n\n        if (isset($requestParams['only_direct_children']) && $requestParams['only_direct_children'] === 'true') {\n            $conditionFilters[] = 'o_parentId = ' . $folder->getId();\n        } else {\n            $quotedPath = $list->quote($folder->getRealFullPath());\n            $quotedWildcardPath = $list->quote($list->escapeLike(str_replace('//', '/', $folder->getRealFullPath() . '/')) . '%');\n            $conditionFilters[] = '(o_path = ' . $quotedPath . ' OR o_path LIKE ' . $quotedWildcardPath . ')';\n        }\n\n        if (!$adminUser->isAdmin()) {\n            $userIds = $adminUser->getRoles();\n            $userIds[] = $adminUser->getId();\n            $conditionFilters[] = ' (\n                                                    (select list from users_workspaces_object where userId in (' . implode(',', $userIds) . ') and LOCATE(CONCAT(o_path,o_key),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                    OR\n                                                    (select list from users_workspaces_object where userId in (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(o_path,o_key))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                 )';\n        }\n\n        $featureJoins = [];\n        $slugJoins = [];\n        $featureAndSlugFilters = [];\n\n        // create filter condition\n        if (!empty($requestParams['filter'])) {\n            $conditionFilters[] = $this->getFilterCondition($requestParams['filter'], $class, $list->getDao()->getTableName());\n            $featureAndSlugFilters = $this->getFeatureAndSlugFilters($requestParams['filter'], $class, $requestedLanguage);\n            if ($featureAndSlugFilters) {\n                $featureJoins = array_merge($featureJoins, $featureAndSlugFilters['featureJoins']);\n                $slugJoins = array_merge($slugJoins, $featureAndSlugFilters['slugJoins']);\n            }\n        }\n\n        if (!empty($requestParams['condition']) && $adminUser->isAdmin()) {\n            $conditionFilters[] = '(' . $requestParams['condition'] . ')';\n        }\n\n        if (!empty($requestParams['query'])) {\n            $query = $this->filterQueryParam($requestParams['query']);\n            if (!empty($query)) {\n                $conditionFilters[] = 'oo_id IN (SELECT id FROM search_backend_data WHERE maintype = \"object\" AND MATCH (`data`,`properties`) AGAINST (' . $list->quote($query) . ' IN BOOLEAN MODE))';\n            }\n        }\n\n        if (!empty($bricks)) {\n            foreach ($bricks as $b) {\n                $brickType = $b;\n                if (is_array($brickType)) {\n                    $brickType = $brickType['containerKey'];\n                }\n                $list->addObjectbrick($brickType);\n            }\n        }\n\n        $list->setCondition(implode(' AND ', $conditionFilters));\n        if (empty($requestParams['batch']) && empty($requestParams['ids'])) {\n            $list->setLimit($limit);\n            $list->setOffset($start);\n        }\n\n        if (isset($sortingSettings['isFeature']) && $sortingSettings['isFeature']) {\n            $orderKey = 'cskey_' . $sortingSettings['fieldname'] . '_' . $sortingSettings['groupId'] . '_' . $sortingSettings['keyId'];\n            $list->setOrderKey($orderKey);\n            $list->setGroupBy('oo_id');\n\n            $parts = explode('_', $orderKey);\n\n            $fieldname = $parts[1];\n            /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $csFieldDefinition */\n            $csFieldDefinition = $class->getFieldDefinition($fieldname);\n            $sortingSettings['language'] = $csFieldDefinition->isLocalized() ? $requestedLanguage : 'default';\n            $featureJoins[] = $sortingSettings;\n        } else {\n            $list->setOrderKey($orderKey, !$doNotQuote);\n        }\n        $list->setOrder($order);\n\n        //parameters specified in the objects grid\n        if (!empty($requestParams['ids'])) {\n            $quotedIds = [];\n            foreach ($requestParams['ids'] as $id) {\n                $quotedIds[] = $list->quote($id);\n            }\n            if (!empty($quotedIds)) {\n                //add a condition if id numbers are specified\n                $list->addConditionParam('oo_id IN (' . implode(',', $quotedIds) . ')');\n            }\n        }\n\n        if ($class->getShowVariants()) {\n            $list->setObjectTypes([DataObject::OBJECT_TYPE_OBJECT, DataObject::OBJECT_TYPE_VARIANT]);\n        }\n\n        $this->addGridFeatureJoins($list, $featureJoins, $class, $featureAndSlugFilters);\n        $this->addSlugJoins($list, $slugJoins, $featureAndSlugFilters);\n\n        $list->setLocale($requestedLanguage);\n\n        if (empty($requestParams['filter']) && empty($requestParams['condition']) && empty($requestParams['sort'])) {\n            $list->setIgnoreLocalizedFields(true);\n        }\n\n        return $list;\n    }\n\n    public function prepareAssetListingForGrid($allParams, $adminUser)\n    {\n        $db = \\Pimcore\\Db::get();\n        $folder = Model\\Asset::getById($allParams['folderId']);\n\n        $start = 0;\n        $limit = 0;\n        $orderKey = 'id';\n        $order = 'ASC';\n\n        if (isset($allParams['limit'])) {\n            $limit = $allParams['limit'];\n        }\n        if (isset($allParams['start'])) {\n            $start = $allParams['start'];\n        }\n\n        $orderKeyQuote = true;\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey']) {\n            $orderKey = explode('~', $sortingSettings['orderKey'])[0];\n            if ($orderKey === 'fullpath') {\n                $orderKey = 'CAST(CONCAT(path,filename) AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci';\n                $orderKeyQuote = false;\n            } elseif ($orderKey === 'filename') {\n                $orderKey = 'CAST(filename AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci';\n                $orderKeyQuote = false;\n            }\n\n            $order = $sortingSettings['order'];\n        }\n\n        $list = new Model\\Asset\\Listing();\n\n        $conditionFilters = [];\n        if (isset($allParams['only_direct_children']) && $allParams['only_direct_children'] == 'true') {\n            $conditionFilters[] = 'parentId = ' . $folder->getId();\n        } else {\n            $conditionFilters[] = 'path LIKE ' . ($folder->getRealFullPath() === '/' ? \"'/%'\" : $list->quote($list->escapeLike($folder->getRealFullPath()) . '/%'));\n        }\n\n        if (isset($allParams['only_unreferenced']) && $allParams['only_unreferenced'] === 'true') {\n            $conditionFilters[] = 'id NOT IN (SELECT targetid FROM dependencies WHERE targettype=\\'asset\\')';\n        }\n\n        $conditionFilters[] = \"type != 'folder'\";\n        $filterJson = $allParams['filter'] ?? null;\n        if ($filterJson) {\n            $filters = json_decode($filterJson, true);\n            foreach ($filters as $filter) {\n                $operator = '=';\n\n                $filterDef = explode('~', $filter['property']);\n                $filterField = $filterDef[0];\n                $filterOperator = $filter['operator'];\n                $filterType = $filter['type'];\n\n                if ($filterType == 'string') {\n                    $operator = 'LIKE';\n                } elseif ($filterType == 'numeric') {\n                    if ($filterOperator == 'lt') {\n                        $operator = '<';\n                    } elseif ($filterOperator == 'gt') {\n                        $operator = '>';\n                    } elseif ($filterOperator == 'eq') {\n                        $operator = '=';\n                    }\n                } elseif ($filterType == 'date') {\n                    $filter['value'] = strtotime($filter['value']);\n                    if ($filterOperator == 'lt') {\n                        $operator = '<';\n                    } elseif ($filterOperator == 'gt') {\n                        $operator = '>';\n                    } elseif ($filterOperator == 'eq') {\n                        $operator = 'BETWEEN';\n                        //if the equal operator is chosen with the date type, condition has to be changed\n                        $maxTime = $filter['value'] + (86400 - 1); //specifies the top point of the range used in the condition\n                        $filter['value'] = $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\n                    }\n                } elseif ($filterType == 'list') {\n                    $operator = 'IN';\n                } elseif ($filterType == 'boolean') {\n                    $operator = '=';\n                    $filter['value'] = (int) $filter['value'];\n                }\n                // system field\n                $value = $filter['value'] ?? '';\n                if ($operator == 'LIKE') {\n                    $value = $db->quote('%' . $value . '%');\n                } elseif ($operator == 'IN') {\n                    $quoted = array_map(function ($val) use ($db) {\n                        return $db->quote($val);\n                    }, $value);\n                    $value = '(' . implode(',', $quoted) . ')';\n                } elseif ($operator == 'BETWEEN') {\n                } else {\n                    $value = $db->quote($value);\n                }\n\n                if ($filterField == 'fullpath') {\n                    $filterField = 'CONCAT(path,filename)';\n                }else {\n                    $filterField = $db->quoteIdentifier($filterField);\n                }\n\n                if (isset($filterDef[1]) && $filterDef[1] == 'system') {\n                    $conditionFilters[] = $filterField . ' ' . $operator . ' ' . $value;\n                } else {\n                    $language = $allParams['language'];\n                    if (isset($filterDef[1])) {\n                        $language = $filterDef[1];\n                    }\n                    $language = str_replace(['none', 'default'], '', $language);\n                    $conditionFilters[] = 'id IN (SELECT cid FROM assets_metadata WHERE `name` = ' . $db->quote($filterField) . ' AND `data` ' . $operator . ' ' . $value . ' AND `language` = ' . $db->quote($language). ')';\n                }\n            }\n        }\n\n        if (!$adminUser->isAdmin()) {\n            $userIds = $adminUser->getRoles();\n            $userIds[] = $adminUser->getId();\n            $conditionFilters[] = ' (\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(CONCAT(path, filename),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                    OR\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(path, filename))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                 )';\n        }\n\n        //filtering for tags\n        if (!empty($allParams['tagIds'])) {\n            $tagIds = $allParams['tagIds'];\n            foreach ($tagIds as $tagId) {\n                if ($allParams['considerChildTags'] ?? false) {\n                    $tag = Model\\Element\\Tag::getById($tagId);\n                    if ($tag) {\n                        $tagPath = $tag->getFullIdPath();\n                        $conditionFilters[] = 'id IN (SELECT cId FROM `tags_assignment` INNER JOIN `tags` ON tags.id = tags_assignment.tagid WHERE `ctype` = \"asset\" AND (`id` = ' .(int)$tagId. ' OR `idPath` LIKE ' . $db->quote($tagPath . '%') . '))';\n                    }\n                } else {\n                    $conditionFilters[] = 'id IN (SELECT cId FROM `tags_assignment` WHERE `ctype` = \"asset\" AND tagid = ' .(int)$tagId. ')';\n                }\n            }\n        }\n\n        $condition = implode(' AND ', $conditionFilters);\n\n        $list->setCondition($condition);\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey, $orderKeyQuote);\n\n        return $list;\n    }\n\n    /**\n     * @param string $query\n     *\n     * @return string\n     */\n    protected function filterQueryParam(string $query)\n    {\n        if ($query == '*') {\n            $query = '';\n        }\n\n        $query = str_replace('%', '*', $query);\n        $query = str_replace('@', '#', $query);\n        $query = preg_replace(\"@([^ ])\\-@\", '$1 ', $query);\n\n        $query = str_replace(['<', '>', '(', ')', '~'], ' ', $query);\n\n        // it is not allowed to have * behind another *\n        $query = preg_replace('#[*]+#', '*', $query);\n\n        // no boolean operators at the end of the query\n        $query = rtrim($query, '+- ');\n\n        return $query;\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Helper/GridHelperService.php"], "buggy_code_start_loc": [334], "buggy_code_end_loc": [782], "fixing_code_start_loc": [335], "fixing_code_end_loc": [786], "type": "CWE-89", "message": "SQL injection in GridHelperService.php in GitHub repository pimcore/pimcore prior to 10.3.6. This vulnerability is capable of steal the data", "other": {"cve": {"id": "CVE-2022-1429", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-22T09:15:08.540", "lastModified": "2022-04-29T04:19:02.363", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL injection in GridHelperService.php in GitHub repository pimcore/pimcore prior to 10.3.6. This vulnerability is capable of steal the data"}, {"lang": "es", "value": "Una inyecci\u00f3n SQL en el archivo GridHelperService.php en el repositorio de GitHub pimcore/pimcore versiones anteriores a 10.3.6. Esta vulnerabilidad es capaz de robar los datos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.3.6", "matchCriteriaId": "4643E73D-DC8E-4494-BFA3-C17E4EC12253"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/523a735ab94f004459b84ffdfd3db784586bbd82", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/cfba30b4-85fa-4499-9160-cd6e3119310e", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/523a735ab94f004459b84ffdfd3db784586bbd82"}}