{"buggy_code": ["<?php\n/**\n * Application level Controller\n *\n * This file is application-wide controller file. You can put all\n * application-wide controller-related methods here.\n *\n * PHP 5\n *\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @package       app.Controller\n * @since         CakePHP(tm) v 0.2.9\n * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)\n */\n\n// TODO GnuPG encryption has issues when keys are expired\n\nApp::uses('ConnectionManager', 'Model');\nApp::uses('Controller', 'Controller');\nApp::uses('File', 'Utility');\nApp::uses('RequestRearrangeTool', 'Tools');\n\n/**\n * Application Controller\n *\n * Add your application-wide methods in the class below, your controllers\n * will inherit them.\n *\n * @package       app.Controller\n * @link http://book.cakephp.org/2.0/en/controllers.html#the-app-controller\n *\n * @throws ForbiddenException // TODO Exception\n */\nclass AppController extends Controller\n{\n    public $defaultModel = '';\n\n    public $debugMode = false;\n\n    public $helpers = array('Utility', 'OrgImg', 'FontAwesome', 'UserName', 'DataPathCollector');\n\n    private $__queryVersion = '106';\n    public $pyMispVersion = '2.4.128';\n    public $phpmin = '7.2';\n    public $phprec = '7.4';\n    public $pythonmin = '3.6';\n    public $pythonrec = '3.7';\n    public $isApiAuthed = false;\n\n    public $baseurl = '';\n    public $sql_dump = false;\n\n    private $isRest = null;\n\n    // Used for _isAutomation(), a check that returns true if the controller & action combo matches an action that is a non-xml and non-json automation method\n    // This is used to allow authentication via headers for methods not covered by _isRest() - as that only checks for JSON and XML formats\n    public $automationArray = array(\n        'events' => array('csv', 'nids', 'hids', 'xml', 'restSearch', 'stix', 'updateGraph', 'downloadOpenIOCEvent'),\n        'attributes' => array('text', 'downloadAttachment', 'returnAttributes', 'restSearch', 'rpz', 'bro'),\n        'objects' => array('restSearch')\n    );\n\n    protected $_legacyParams = array();\n\n    public function __construct($id = false, $table = null, $ds = null)\n    {\n        parent::__construct($id, $table, $ds);\n\n        $name = get_class($this);\n        $name = str_replace('sController', '', $name);\n        $name = str_replace('Controller', '', $name);\n        $this->defaultModel = $name;\n    }\n\n    public $components = array(\n            'Session',\n            'Auth' => array(\n                'authError' => 'Unauthorised access.',\n                'authenticate' => array(\n                    'Form' => array(\n                        'passwordHasher' => 'Blowfish',\n                        'fields' => array(\n                            'username' => 'email'\n                        )\n                    )\n                )\n            ),\n            'Security',\n            'ACL',\n            'RestResponse',\n            'Flash',\n            'Toolbox',\n            'RateLimit',\n            'IndexFilter',\n            'Deprecation',\n            'RestSearch'\n            //,'DebugKit.Toolbar'\n    );\n\n    private function __isApiFunction($controller, $action)\n    {\n        if (isset($this->automationArray[$controller]) && in_array($action, $this->automationArray[$controller])) {\n            return true;\n        }\n        return false;\n    }\n\n    public function beforeFilter()\n    {\n        $this->Auth->loginRedirect = Configure::read('MISP.baseurl') . '/users/routeafterlogin';\n\n        $customLogout = Configure::read('Plugin.CustomAuth_custom_logout');\n        if ($customLogout) {\n            $this->Auth->logoutRedirect = $customLogout;\n        } else {\n            $this->Auth->logoutRedirect = Configure::read('MISP.baseurl') . '/users/login';\n        }\n        $this->__sessionMassage();\n        if (Configure::read('Security.allow_cors')) {\n            // Add CORS headers\n            $this->response->cors($this->request,\n                    explode(',', Configure::read('Security.cors_origins')),\n                    ['*'],\n                    ['Origin', 'Content-Type', 'Authorization', 'Accept']);\n\n            if ($this->request->is('options')) {\n                // Stop here!\n                // CORS only needs the headers\n                $this->response->send();\n                $this->_stop();\n            }\n        }\n        $this->response->header('X-XSS-Protection', '1; mode=block');\n\n        if (!empty($this->params['named']['sql'])) {\n            $this->sql_dump = intval($this->params['named']['sql']);\n        }\n\n        $this->_setupDatabaseConnection();\n        $this->_setupDebugMode();\n\n        $this->set('ajax', $this->request->is('ajax'));\n        $this->set('queryVersion', $this->__queryVersion);\n        $this->loadModel('User');\n        $auth_user_fields = $this->User->describeAuthFields();\n        $language = Configure::read('MISP.language');\n        if (!empty($language) && $language !== 'eng') {\n            Configure::write('Config.language', $language);\n        } else {\n            Configure::write('Config.language', 'eng');\n        }\n\n        //if fresh installation (salt empty) generate a new salt\n        if (!Configure::read('Security.salt')) {\n            $this->loadModel('Server');\n            $this->Server->serverSettingsSaveValue('Security.salt', $this->User->generateRandomPassword(32));\n        }\n        // Check if the instance has a UUID, if not assign one.\n        if (!Configure::read('MISP.uuid')) {\n            $this->loadModel('Server');\n            $this->Server->serverSettingsSaveValue('MISP.uuid', CakeText::uuid());\n        }\n        // check if Apache provides kerberos authentication data\n        $envvar = Configure::read('ApacheSecureAuth.apacheEnv');\n        if (isset($_SERVER[$envvar])) {\n            $this->Auth->className = 'ApacheSecureAuth';\n            $this->Auth->authenticate = array(\n                'Apache' => array(\n                    // envvar = field returned by Apache if user is authenticated\n                    'fields' => array('username' => 'email', 'envvar' => $envvar),\n                    'userFields' => $auth_user_fields\n                )\n            );\n        } else {\n            $this->Auth->authenticate['Form']['userFields'] = $auth_user_fields;\n        }\n        if (!empty($this->params['named']['disable_background_processing'])) {\n            Configure::write('MISP.background_jobs', 0);\n        }\n        Configure::write('CurrentController', $this->params['controller']);\n        Configure::write('CurrentAction', $this->params['action']);\n        $versionArray = $this->{$this->modelClass}->checkMISPVersion();\n        $this->mispVersion = implode('.', array_values($versionArray));\n        $this->Security->blackHoleCallback = 'blackHole';\n        $this->_setupBaseurl();\n\n        // send users away that are using ancient versions of IE\n        // Make sure to update this if IE 20 comes out :)\n        if (isset($_SERVER['HTTP_USER_AGENT'])) {\n            if (preg_match('/(?i)msie [2-8]/', $_SERVER['HTTP_USER_AGENT']) && !strpos($_SERVER['HTTP_USER_AGENT'], 'Opera')) {\n                throw new MethodNotAllowedException('You are using an unsecure and outdated version of IE, please download Google Chrome, Mozilla Firefox or update to a newer version of IE. If you are running IE9 or newer and still receive this error message, please make sure that you are not running your browser in compatibility mode. If you still have issues accessing the site, get in touch with your administration team at ' . Configure::read('MISP.contact'));\n            }\n        }\n        $userLoggedIn = false;\n        if (Configure::read('Plugin.CustomAuth_enable')) {\n            $userLoggedIn = $this->__customAuthentication($_SERVER);\n        }\n        if ($this->_isRest()) {\n            $this->Security->unlockedActions = array($this->action);\n        }\n\n        if (\n            !$userLoggedIn &&\n            (\n                $this->params['controller'] !== 'users' ||\n                $this->params['action'] !== 'register' ||\n                empty(Configure::read('Security.allow_self_registration'))\n            )\n        ) {\n            // REST authentication\n            if ($this->_isRest() || $this->_isAutomation()) {\n                // disable CSRF for REST access\n                if (array_key_exists('Security', $this->components)) {\n                    $this->Security->csrfCheck = false;\n                }\n                // If enabled, allow passing the API key via a named parameter (for crappy legacy systems only)\n                $namedParamAuthkey = false;\n                if (Configure::read('Security.allow_unsafe_apikey_named_param') && !empty($this->params['named']['apikey'])) {\n                    $namedParamAuthkey = $this->params['named']['apikey'];\n                }\n                // Authenticate user with authkey in Authorization HTTP header\n                if (!empty($_SERVER['HTTP_AUTHORIZATION']) || !empty($namedParamAuthkey)) {\n                    $found_misp_auth_key = false;\n                    $authentication = explode(',', $_SERVER['HTTP_AUTHORIZATION']);\n                    if (!empty($namedParamAuthkey)) {\n                        $authentication[] = $namedParamAuthkey;\n                    }\n                    $user = false;\n                    foreach ($authentication as $auth_key) {\n                        if (preg_match('/^[a-zA-Z0-9]{40}$/', trim($auth_key))) {\n                            $found_misp_auth_key = true;\n                            $temp = $this->checkAuthUser(trim($auth_key));\n                            if ($temp) {\n                                $user['User'] = $temp;\n                            }\n                        }\n                    }\n                    if ($found_misp_auth_key) {\n                        if ($user) {\n                            unset($user['User']['gpgkey']);\n                            unset($user['User']['certif_public']);\n                            // User found in the db, add the user info to the session\n                            if (Configure::read('MISP.log_auth')) {\n                                $this->Log = ClassRegistry::init('Log');\n                                $this->Log->create();\n                                $log = array(\n                                        'org' => $user['User']['Organisation']['name'],\n                                        'model' => 'User',\n                                        'model_id' => $user['User']['id'],\n                                        'email' => $user['User']['email'],\n                                        'action' => 'auth',\n                                        'title' => 'Successful authentication using API key',\n                                        'change' => 'HTTP method: ' . $_SERVER['REQUEST_METHOD'] . PHP_EOL . 'Target: ' . $this->here,\n                                );\n                                $this->Log->save($log);\n                            }\n                            $this->Session->renew();\n                            $this->Session->write(AuthComponent::$sessionKey, $user['User']);\n                            $this->isApiAuthed = true;\n                        } else {\n                            // User not authenticated correctly\n                            // reset the session information\n                            $redis = $this->{$this->modelClass}->setupRedis();\n                            if ($redis && !$redis->exists('misp:auth_fail_throttling:' . trim($auth_key))) {\n                                $redis->set('misp:auth_fail_throttling:' . trim($auth_key), 1);\n                                $redis->expire('misp:auth_fail_throttling:' . trim($auth_key), 3600);\n                                $this->Session->destroy();\n                                $this->Log = ClassRegistry::init('Log');\n                                $this->Log->create();\n                                $log = array(\n                                        'org' => 'SYSTEM',\n                                        'model' => 'User',\n                                        'model_id' => 0,\n                                        'email' => 'SYSTEM',\n                                        'action' => 'auth_fail',\n                                        'title' => 'Failed authentication using API key (' . trim($auth_key) . ')',\n                                        'change' => null,\n                                );\n                                $this->Log->save($log);\n                            }\n                            throw new ForbiddenException('Authentication failed. Please make sure you pass the API key of an API enabled user along in the Authorization header.');\n                        }\n                        unset($user);\n                    }\n                }\n                if ($this->Auth->user() == null) {\n                    throw new ForbiddenException('Authentication failed. Please make sure you pass the API key of an API enabled user along in the Authorization header.');\n                }\n            } elseif (!$this->Session->read(AuthComponent::$sessionKey)) {\n                $this->_loadAuthenticationPlugins();\n            }\n        }\n        $this->set('externalAuthUser', $userLoggedIn);\n        // user must accept terms\n        //\n        // grab the base path from our base url for use in the following checks\n        $base_dir = parse_url($this->baseurl, PHP_URL_PATH);\n\n        // if MISP is running out of the web root already, just set this variable to blank so we don't wind up with '//' in the following if statements\n        if ($base_dir == '/') {\n            $base_dir = '';\n        }\n\n        if ($this->Auth->user()) {\n            Configure::write('CurrentUserId', $this->Auth->user('id'));\n            $this->User->setMonitoring($this->Auth->user());\n            if (Configure::read('MISP.log_user_ips')) {\n                $redis = $this->{$this->modelClass}->setupRedis();\n                if ($redis) {\n                    $redis->set('misp:ip_user:' . trim($_SERVER['REMOTE_ADDR']), $this->Auth->user('id'));\n                    $redis->expire('misp:ip_user:' . trim($_SERVER['REMOTE_ADDR']), 60*60*24*30);\n                    $redis->sadd('misp:user_ip:' . $this->Auth->user('id'), trim($_SERVER['REMOTE_ADDR']));\n                }\n            }\n            // update script\n            if ($this->Auth->user('Role')['perm_site_admin'] || (Configure::read('MISP.live') && !$this->_isRest())) {\n                $this->{$this->modelClass}->runUpdates();\n            }\n            $user = $this->Auth->user();\n            if (!isset($user['force_logout']) || $user['force_logout']) {\n                $this->loadModel('User');\n                $this->User->id = $this->Auth->user('id');\n                $this->User->saveField('force_logout', false);\n            }\n            if ($this->Auth->user('disabled')) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $log = array(\n                        'org' => $this->Auth->user('Organisation')['name'],\n                        'model' => 'User',\n                        'model_id' => $this->Auth->user('id'),\n                        'email' => $this->Auth->user('email'),\n                        'action' => 'auth_fail',\n                        'title' => 'Login attempt by disabled user.',\n                        'change' => null,\n                );\n                $this->Log->save($log);\n                $this->Auth->logout();\n                if ($this->_isRest()) {\n                    throw new ForbiddenException('Authentication failed. Your user account has been disabled.');\n                } else {\n                    $this->Flash->error('Your user account has been disabled.', array('key' => 'error'));\n                    $this->_redirectToLogin();\n                }\n            }\n            $this->set('default_memory_limit', ini_get('memory_limit'));\n            if (isset($this->Auth->user('Role')['memory_limit'])) {\n                if ($this->Auth->user('Role')['memory_limit'] !== '') {\n                    ini_set('memory_limit', $this->Auth->user('Role')['memory_limit']);\n                }\n            }\n            $this->set('default_max_execution_time', ini_get('max_execution_time'));\n            if (isset($this->Auth->user('Role')['max_execution_time'])) {\n                if ($this->Auth->user('Role')['max_execution_time'] !== '') {\n                    ini_set('max_execution_time', $this->Auth->user('Role')['max_execution_time']);\n                }\n            }\n        } else {\n            $pre_auth_actions = array('login', 'register');\n            if (!empty(Configure::read('Security.email_otp_enabled'))) {\n                $pre_auth_actions[] = 'email_otp';\n            }\n            if ($this->params['controller'] !== 'users' || !in_array($this->params['action'], $pre_auth_actions)) {\n                if (!$this->request->is('ajax')) {\n                    $this->Session->write('pre_login_requested_url', $this->here);\n                }\n                $this->_redirectToLogin();\n            }\n        }\n\n        // check if MISP is live\n        if ($this->Auth->user() && !Configure::read('MISP.live')) {\n            $role = $this->getActions();\n            if (!$role['perm_site_admin']) {\n                $message = Configure::read('MISP.maintenance_message');\n                if (empty($message)) {\n                    $this->loadModel('Server');\n                    $message = $this->Server->serverSettings['MISP']['maintenance_message']['value'];\n                }\n                if (strpos($message, '$email') && Configure::read('MISP.email')) {\n                    $email = Configure::read('MISP.email');\n                    $message = str_replace('$email', $email, $message);\n                }\n                $this->Flash->info($message);\n                $this->Auth->logout();\n                throw new MethodNotAllowedException($message);//todo this should pb be removed?\n            } else {\n                $this->Flash->error(__('Warning: MISP is currently disabled for all users. Enable it in Server Settings (Administration -> Server Settings -> MISP tab -> live). An update might also be in progress, you can see the progress in ') , array('params' => array('url' => $this->baseurl . '/servers/updateProgress/', 'urlName' => __('Update Progress')), 'clear' => 1));\n            }\n        }\n        if ($this->Session->check(AuthComponent::$sessionKey)) {\n            if ($this->action !== 'checkIfLoggedIn' || $this->request->params['controller'] !== 'users') {\n                $this->User->id = $this->Auth->user('id');\n                if (!$this->User->exists()) {\n                    $message = __('Something went wrong. Your user account that you are authenticated with doesn\\'t exist anymore.');\n                    if ($this->_isRest) {\n                        echo $this->RestResponse->throwException(\n                            401,\n                            $message\n                        );\n                    } else {\n                        $this->Flash->info($message);\n                    }\n                    $this->Auth->logout();\n                    $this->_redirectToLogin();\n                }\n                if (!empty(Configure::read('MISP.terms_file')) && !$this->Auth->user('termsaccepted') && (!in_array($this->request->here, array($base_dir.'/users/terms', $base_dir.'/users/logout', $base_dir.'/users/login', $base_dir.'/users/downloadTerms')))) {\n                    //if ($this->_isRest()) throw new MethodNotAllowedException('You have not accepted the terms of use yet, please log in via the web interface and accept them.');\n                    if (!$this->_isRest()) {\n                        $this->redirect(array('controller' => 'users', 'action' => 'terms', 'admin' => false));\n                    }\n                } elseif ($this->Auth->user('change_pw') && (!in_array($this->request->here, array($base_dir.'/users/terms', $base_dir.'/users/change_pw', $base_dir.'/users/logout', $base_dir.'/users/login')))) {\n                    //if ($this->_isRest()) throw new MethodNotAllowedException('Your user account is expecting a password change, please log in via the web interface and change it before proceeding.');\n                    if (!$this->_isRest()) {\n                        $this->redirect(array('controller' => 'users', 'action' => 'change_pw', 'admin' => false));\n                    }\n                } elseif (!$this->_isRest() && !($this->params['controller'] == 'news' && $this->params['action'] == 'index') && (!in_array($this->request->here, array($base_dir.'/users/terms', $base_dir.'/users/change_pw', $base_dir.'/users/logout', $base_dir.'/users/login')))) {\n                    $newsread = $this->User->field('newsread', array('User.id' => $this->Auth->user('id')));\n                    $this->loadModel('News');\n                    $latest_news = $this->News->field('date_created', array(), 'date_created DESC');\n                    if ($latest_news && $newsread < $latest_news) {\n                        $this->redirect(array('controller' => 'news', 'action' => 'index', 'admin' => false));\n                    }\n                }\n            }\n        }\n        unset($base_dir);\n        // We don't want to run these role checks before the user is logged in, but we want them available for every view once the user is logged on\n        // instead of using checkAction(), like we normally do from controllers when trying to find out about a permission flag, we can use getActions()\n        // getActions returns all the flags in a single SQL query\n        if ($this->Auth->user()) {\n            $this->set('mispVersion', implode('.', array($versionArray['major'], $versionArray['minor'], 0)));\n            $this->set('mispVersionFull', $this->mispVersion);\n            $role = $this->getActions();\n            $this->set('me', $this->Auth->user());\n            $this->set('isAdmin', $role['perm_admin']);\n            $this->set('isSiteAdmin', $role['perm_site_admin']);\n            $this->set('hostOrgUser', $this->Auth->user('org_id') == Configure::read('MISP.host_org_id'));\n            $this->set('isAclAdd', $role['perm_add']);\n            $this->set('isAclModify', $role['perm_modify']);\n            $this->set('isAclModifyOrg', $role['perm_modify_org']);\n            $this->set('isAclPublish', $role['perm_publish']);\n            $this->set('isAclDelegate', $role['perm_delegate']);\n            $this->set('isAclSync', $role['perm_sync']);\n            $this->set('isAclAdmin', $role['perm_admin']);\n            $this->set('isAclAudit', $role['perm_audit']);\n            $this->set('isAclAuth', $role['perm_auth']);\n            $this->set('isAclRegexp', $role['perm_regexp_access']);\n            $this->set('isAclTagger', $role['perm_tagger']);\n            $this->set('isAclTagEditor', $role['perm_tag_editor']);\n            $this->set('isAclTemplate', $role['perm_template']);\n            $this->set('isAclSharingGroup', $role['perm_sharing_group']);\n            $this->set('isAclSighting', isset($role['perm_sighting']) ? $role['perm_sighting'] : false);\n            $this->set('isAclZmq', isset($role['perm_publish_zmq']) ? $role['perm_publish_zmq'] : false);\n            $this->set('isAclKafka', isset($role['perm_publish_kafka']) ? $role['perm_publish_kafka'] : false);\n            $this->set('isAclDecaying', isset($role['perm_decaying']) ? $role['perm_decaying'] : false);\n            $this->userRole = $role;\n\n            $this->set('loggedInUserName', $this->__convertEmailToName($this->Auth->user('email')));\n            if ($this->request->params['controller'] === 'users' && $this->request->params['action'] === 'dashboard') {\n                $notifications = $this->{$this->modelClass}->populateNotifications($this->Auth->user());\n            } else {\n                $notifications = $this->{$this->modelClass}->populateNotifications($this->Auth->user(), 'fast');\n            }\n            $this->set('notifications', $notifications);\n\n            if (\n                Configure::read('MISP.log_paranoid') ||\n                !empty(Configure::read('Security.monitored'))\n            ) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $change = 'HTTP method: ' . $_SERVER['REQUEST_METHOD'] . PHP_EOL . 'Target: ' . $this->here;\n                if (\n                    (\n                        $this->request->is('post') ||\n                        $this->request->is('put')\n                    ) &&\n                    (\n                        !empty(Configure::read('MISP.log_paranoid_include_post_body')) ||\n                        !empty(Configure::read('Security.monitored'))\n                    )\n                ) {\n                    $payload = $this->request->input();\n                    if (!empty($payload['_Token'])) {\n                        unset($payload['_Token']);\n                    }\n                    $change .= PHP_EOL . 'Request body: ' . json_encode($payload);\n                }\n                $log = array(\n                        'org' => $this->Auth->user('Organisation')['name'],\n                        'model' => 'User',\n                        'model_id' => $this->Auth->user('id'),\n                        'email' => $this->Auth->user('email'),\n                        'action' => 'request',\n                        'title' => 'Paranoid log entry',\n                        'change' => $change,\n                );\n                $this->Log->save($log);\n            }\n        } else {\n            $this->set('me', false);\n        }\n\n        if ($this->Auth->user() && $this->_isSiteAdmin()) {\n            if (Configure::read('Session.defaults') == 'database') {\n                $db = ConnectionManager::getDataSource('default');\n                $sqlResult = $db->query('SELECT COUNT(id) AS session_count FROM cake_sessions WHERE expires < ' . time() . ';');\n                if (isset($sqlResult[0][0]['session_count']) && $sqlResult[0][0]['session_count'] > 1000) {\n                    $this->loadModel('Server');\n                    $this->Server->updateDatabase('cleanSessionTable');\n                }\n            }\n            if (Configure::read('site_admin_debug') && (Configure::read('debug') < 2)) {\n                Configure::write('debug', 1);\n            }\n        }\n\n        $this->ACL->checkAccess($this->Auth->user(), Inflector::variable($this->request->params['controller']), $this->action);\n        if ($this->_isRest()) {\n            $this->__rateLimitCheck();\n        }\n        if ($this->modelClass !== 'CakeError') {\n            $deprecationWarnings = $this->Deprecation->checkDeprecation($this->request->params['controller'], $this->action, $this->{$this->modelClass}, $this->Auth->user('id'));\n            if ($deprecationWarnings) {\n                $deprecationWarnings = __('WARNING: This functionality is deprecated and will be removed in the near future. ') . $deprecationWarnings;\n                if ($this->_isRest()) {\n                    $this->response->header('X-Deprecation-Warning', $deprecationWarnings);\n                    $this->components['RestResponse']['deprecationWarnings'] = $deprecationWarnings;\n                } else {\n                    $this->Flash->warning($deprecationWarnings);\n                }\n            }\n        }\n        $this->components['RestResponse']['sql_dump'] = $this->sql_dump;\n        $this->loadModel('UserSetting');\n        $homepage = $this->UserSetting->find('first', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'UserSetting.user_id' => $this->Auth->user('id'),\n                'UserSetting.setting' => 'homepage'\n            ),\n            'contain' => array('User.id', 'User.org_id')\n        ));\n        if (!empty($homepage)) {\n            $this->set('homepage', $homepage['UserSetting']['value']);\n        }\n    }\n\n    private function __rateLimitCheck()\n    {\n        $info = array();\n        $rateLimitCheck = $this->RateLimit->check(\n            $this->Auth->user(),\n            $this->request->params['controller'],\n            $this->action,\n            $this->{$this->modelClass},\n            $info,\n            $this->response->type()\n        );\n        if (!empty($info)) {\n            $this->RestResponse->setHeader('X-Rate-Limit-Limit', $info['limit']);\n            $this->RestResponse->setHeader('X-Rate-Limit-Remaining', $info['remaining']);\n            $this->RestResponse->setHeader('X-Rate-Limit-Reset', $info['reset']);\n        }\n        if ($rateLimitCheck !== true) {\n            $this->response->header('X-Rate-Limit-Limit', $info['limit']);\n            $this->response->header('X-Rate-Limit-Remaining', $info['remaining']);\n            $this->response->header('X-Rate-Limit-Reset', $info['reset']);\n            $this->response->body($rateLimitCheck);\n            $this->response->statusCode(429);\n            $this->response->send();\n            $this->_stop();\n        }\n        return true;\n    }\n\n    public function afterFilter()\n    {\n        if ($this->isApiAuthed && $this->_isRest()) {\n            $this->Session->destroy();\n        }\n    }\n\n    public function queryACL($debugType='findMissingFunctionNames', $content = false)\n    {\n        $this->autoRender = false;\n        $this->layout = false;\n        $validCommands = array('printAllFunctionNames', 'findMissingFunctionNames', 'printRoleAccess');\n        if (!in_array($debugType, $validCommands)) {\n            throw new MethodNotAllowedException('Invalid function call.');\n        }\n        $this->set('data', $this->ACL->$debugType($content));\n        $this->set('flags', JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);\n        $this->response->type('json');\n        $this->render('/Servers/json/simple');\n    }\n\n    /*\n     * Configure the debugMode view parameter\n     */\n    protected function _setupDebugMode() {\n        $this->set('debugMode', (Configure::read('debug') > 1) ? 'debugOn' : 'debugOff');\n    }\n\n    /*\n     * Setup & validate the database connection configuration\n     * @throws Exception if the configured database is not supported.\n     */\n    protected function _setupDatabaseConnection() {\n        // check for a supported datasource configuration\n        $dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n        if (!isset($dataSourceConfig['encoding'])) {\n            $db = ConnectionManager::getDataSource('default');\n            $db->setConfig(array('encoding' => 'utf8'));\n            ConnectionManager::create('default', $db->config);\n        }\n        $dataSource = $dataSourceConfig['datasource'];\n        if (!in_array($dataSource, array('Database/Mysql', 'Database/Postgres', 'Database/MysqlObserver'))) {\n            throw new Exception('datasource not supported: ' . $dataSource);\n        }\n    }\n\n    /*\n     * Sanitize the configured `MISP.baseurl` and expose it to the view as `baseurl`.\n     */\n    protected function _setupBaseurl() {\n        // Let us access $baseurl from all views\n        $baseurl = Configure::read('MISP.baseurl');\n        if (substr($baseurl, -1) == '/') {\n            // if the baseurl has a trailing slash, remove it. It can lead to issues with the CSRF protection\n            $baseurl = rtrim($baseurl, '/');\n            $this->loadModel('Server');\n            $this->Server->serverSettingsSaveValue('MISP.baseurl', $baseurl);\n        }\n        if (trim($baseurl) == 'http://') {\n            $this->Server->serverSettingsSaveValue('MISP.baseurl', '');\n        }\n        $this->baseurl = $baseurl;\n        $this->set('baseurl', h($baseurl));\n    }\n\n    private function __convertEmailToName($email)\n    {\n        $name = explode('@', (string)$email);\n        $name = explode('.', $name[0]);\n        foreach ($name as $key => $value) {\n            $name[$key] = ucfirst($value);\n        }\n        $name = implode(' ', $name);\n        return $name;\n    }\n\n    public function blackhole($type=false)\n    {\n        if ($type === 'csrf') {\n            throw new BadRequestException($type);\n        }\n        throw new BadRequestException('The request has been black-holed');\n    }\n\n    public $userRole = null;\n\n    protected function _isJson($data=false)\n    {\n        if ($data) {\n            return (json_decode($data) != null) ? true : false;\n        }\n        return $this->request->header('Accept') === 'application/json' || $this->RequestHandler->prefers() === 'json';\n    }\n\n    protected function _isCsv($data=false)\n    {\n        if ($this->params['ext'] === 'csv' || $this->request->header('Accept') === 'application/csv' || $this->RequestHandler->prefers() === 'csv') {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    protected function _isRest()\n    {\n        // This method is surprisingly slow and called many times for one request, so it make sense to cache the result.\n        if ($this->isRest !== null) {\n            return $this->isRest;\n        }\n\n        $api = $this->__isApiFunction($this->request->params['controller'], $this->request->params['action']);\n        if (isset($this->RequestHandler) && ($api || $this->RequestHandler->isXml() || $this->_isJson() || $this->_isCsv())) {\n            if ($this->_isJson()) {\n                if (!empty($this->request->input()) && empty($this->request->input('json_decode'))) {\n                    throw new MethodNotAllowedException('Invalid JSON input. Make sure that the JSON input is a correctly formatted JSON string. This request has been blocked to avoid an unfiltered request.');\n                }\n            }\n            $this->isRest = true;\n            return true;\n        } else {\n            $this->isRest = false;\n            return false;\n        }\n    }\n\n    protected function _isAutomation()\n    {\n        foreach ($this->automationArray as $controllerName => $controllerActions) {\n            if ($this->params['controller'] == $controllerName && in_array($this->params['action'], $controllerActions)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Convert an array to the same array but with the values also as index instead of an interface_exists\n     */\n    protected function _arrayToValuesIndexArray($oldArray)\n    {\n        $newArray = array();\n        foreach ($oldArray as $value) {\n            $newArray[$value] = $value;\n        }\n        return $newArray;\n    }\n\n    // checks if the currently logged user is an administrator (an admin that can manage the users and events of his own organisation)\n    protected function _isAdmin()\n    {\n        if ($this->userRole['perm_site_admin'] || $this->userRole['perm_admin']) {\n            return true;\n        }\n        return false;\n    }\n\n    // checks if the currently logged user is a site administrator (an admin that can manage any user or event on the instance and create / edit the roles).\n    protected function _isSiteAdmin()\n    {\n        return $this->userRole['perm_site_admin'];\n    }\n\n    protected function _checkOrg()\n    {\n        return $this->Auth->user('org_id');\n    }\n\n    protected function _getApiAuthUser(&$key, &$exception)\n    {\n        if (strlen($key) == 40) {\n            // check if the key is valid -> search for users based on key\n            $user = $this->checkAuthUser($key);\n            if (!$user) {\n                $exception = $this->RestResponse->throwException(\n                    401,\n                    __('This authentication key is not authorized to be used for exports. Contact your administrator.')\n                );\n                return false;\n            }\n            $key = 'json';\n        } else {\n            if (!$this->Auth->user('id')) {\n                $exception = $this->RestResponse->throwException(\n                    401,\n                    __('You have to be logged in to do that.')\n                );\n                return false;\n            }\n            $user = $this->Auth->user();\n        }\n        return $user;\n    }\n\n    // generic function to standardise on the collection of parameters. Accepts posted request objects, url params, named url params\n    protected function _harvestParameters($options, &$exception, $data = array())\n    {\n        if (!empty($options['request']->is('post'))) {\n            if (empty($options['request']->data)) {\n                $exception = $this->RestResponse->throwException(\n                    400,\n                    __('Either specify the search terms in the url, or POST a json with the filter parameters.'),\n                    '/' . $this->request->params['controller'] . '/' . $this->action\n                );\n                return false;\n            } else {\n                if (isset($options['request']->data['request'])) {\n                    $data = array_merge($data, $options['request']->data['request']);\n                } else {\n                    $data = array_merge($data, $options['request']->data);\n                }\n            }\n        }\n        /*\n         * If we simply capture ordered URL params with func_get_args(), reassociate them.\n         * We can easily detect this by having ordered_url_params passed as a list instead of a dict.\n         */\n        if (isset($options['ordered_url_params'][0])) {\n            $temp = array();\n            foreach ($options['ordered_url_params'] as $k => $url_param) {\n                if (!empty($options['paramArray'][$k])) {\n                    $temp[$options['paramArray'][$k]] = $url_param;\n                }\n            }\n            $options['ordered_url_params'] = $temp;\n        }\n        if (!empty($options['paramArray'])) {\n            foreach ($options['paramArray'] as $p) {\n                if (\n                    isset($options['ordered_url_params'][$p]) &&\n                    (!in_array(strtolower((string)$options['ordered_url_params'][$p]), array('null', '0', false, 'false', null)))\n                ) {\n                    $data[$p] = $options['ordered_url_params'][$p];\n                    $data[$p] = str_replace(';', ':', $data[$p]);\n                }\n                if (isset($options['named_params'][$p])) {\n                    $data[$p] = str_replace(';', ':', $options['named_params'][$p]);\n                }\n            }\n        }\n        foreach ($data as $k => $v) {\n            if (!is_array($data[$k])) {\n                $data[$k] = trim($data[$k]);\n                if (strpos($data[$k], '||')) {\n                    $data[$k] = explode('||', $data[$k]);\n                }\n            }\n        }\n        if (!empty($options['additional_delimiters'])) {\n            if (!is_array($options['additional_delimiters'])) {\n                $options['additional_delimiters'] = array($options['additional_delimiters']);\n            }\n            foreach ($data as $k => $v) {\n                $found = false;\n                foreach ($options['additional_delimiters'] as $delim) {\n                    if (strpos($v, $delim) !== false) {\n                        $found = true;\n                    }\n                }\n                if ($found) {\n                    $data[$k] = explode($options['additional_delimiters'][0], str_replace($options['additional_delimiters'], $options['additional_delimiters'][0], $v));\n                    foreach ($data[$k] as $k2 => $value) {\n                        $data[$k][$k2] = trim($data[$k][$k2]);\n                    }\n                }\n            }\n        }\n        return $data;\n    }\n\n    // pass an action to this method for it to check the active user's access to the action\n    public function checkAction($action = 'perm_sync')\n    {\n        $this->loadModel('Role');\n        $this->Role->recursive = -1;\n        $role = $this->Role->findById($this->Auth->user('role_id'));\n        if ($role['Role'][$action]) {\n            return true;\n        }\n        return false;\n    }\n\n    // returns the role of the currently authenticated user as an array, used to set the permission variables for views in the AppController's beforeFilter() method\n    public function getActions()\n    {\n        $this->loadModel('Role');\n        $this->Role->recursive = -1;\n        $role = $this->Role->findById($this->Auth->user('role_id'));\n        return $role['Role'];\n    }\n\n    public function checkAuthUser($authkey)\n    {\n        $this->loadModel('User');\n        $user = $this->User->getAuthUserByAuthkey($authkey);\n        if (empty($user)) {\n            return false;\n        }\n        if (!$user['Role']['perm_auth']) {\n            return false;\n        }\n        if ($user['Role']['perm_site_admin']) {\n            $user['siteadmin'] = true;\n        }\n        return $user;\n    }\n\n    public function checkExternalAuthUser($authkey)\n    {\n        $this->loadModel('User');\n        $user = $this->User->getAuthUserByExternalAuth($authkey);\n        if (empty($user)) {\n            return false;\n        }\n        if ($user['Role']['perm_site_admin']) {\n            $user['siteadmin'] = true;\n        }\n        return $user;\n    }\n\n    public function generateCount()\n    {\n        if (!self::_isSiteAdmin() || !$this->request->is('post')) {\n            throw new NotFoundException();\n        }\n        // do one SQL query with the counts\n        // loop over events, update in db\n        $this->loadModel('Attribute');\n        $events = $this->Attribute->find('all', array(\n            'recursive' => -1,\n            'fields' => array('event_id', 'count(event_id) as attribute_count'),\n            'group' => array('Attribute.event_id'),\n            'order' => array('Attribute.event_id ASC'),\n        ));\n        foreach ($events as $k => $event) {\n            $this->Event->read(null, $event['Attribute']['event_id']);\n            $this->Event->set('attribute_count', $event[0]['attribute_count']);\n            $this->Event->save();\n        }\n        $this->Flash->success(__('All done. attribute_count generated from scratch for ' . (isset($k) ? $k : 'no') . ' events.'));\n        $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n    }\n\n    public function pruneDuplicateUUIDs()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->loadModel('Attribute');\n        $duplicates = $this->Attribute->find('all', array(\n            'fields' => array('Attribute.uuid', 'count(*) as occurance'),\n            'recursive' => -1,\n            'group' => array('Attribute.uuid HAVING COUNT(*) > 1'),\n        ));\n        $counter = 0;\n        foreach ($duplicates as $duplicate) {\n            $attributes = $this->Attribute->find('all', array(\n                'recursive' => -1,\n                'conditions' => array('uuid' => $duplicate['Attribute']['uuid'])\n            ));\n            foreach ($attributes as $k => $attribute) {\n                if ($k > 0) {\n                    $this->Attribute->delete($attribute['Attribute']['id']);\n                    $counter++;\n                }\n            }\n        }\n        $this->Server->updateDatabase('makeAttributeUUIDsUnique');\n        $this->Flash->success('Done. Deleted ' . $counter . ' duplicate attribute(s).');\n        $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n    }\n\n    public function removeDuplicateEvents()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->loadModel('Event');\n        $duplicates = $this->Event->find('all', array(\n                'fields' => array('Event.uuid', 'count(*) as occurance'),\n                'recursive' => -1,\n                'group' => array('Event.uuid HAVING COUNT(*) > 1'),\n        ));\n        $counter = 0;\n\n        // load this so we can remove the blacklist item that will be created, this is the one case when we do not want it.\n        if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n            $this->EventBlacklist = ClassRegistry::init('EventBlacklist');\n        }\n\n        foreach ($duplicates as $duplicate) {\n            $events = $this->Event->find('all', array(\n                    'recursive' => -1,\n                    'conditions' => array('uuid' => $duplicate['Event']['uuid'])\n            ));\n            foreach ($events as $k => $event) {\n                if ($k > 0) {\n                    $uuid = $event['Event']['uuid'];\n                    $this->Event->delete($event['Event']['id']);\n                    $counter++;\n                    // remove the blacklist entry that we just created with the event deletion, if the feature is enabled\n                    // We do not want to block the UUID, since we just deleted a copy\n                    if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n                        $this->EventBlacklist->deleteAll(array('EventBlacklist.event_uuid' => $uuid));\n                    }\n                }\n            }\n        }\n        $this->Server->updateDatabase('makeEventUUIDsUnique');\n        $this->Flash->success('Done. Removed ' . $counter . ' duplicate events.');\n        $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n    }\n\n    public function updateDatabase($command)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->loadModel('Server');\n        if (is_numeric($command)) {\n            $command = intval($command);\n        }\n        $this->Server->updateDatabase($command);\n        $this->Flash->success('Done.');\n        if ($liveOff) {\n            $this->redirect(array('controller' => 'servers', 'action' => 'updateProgress'));\n        } else {\n            $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n        }\n    }\n\n    public function upgrade2324()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->loadModel('Server');\n        if (!Configure::read('MISP.background_jobs')) {\n            $this->Server->upgrade2324($this->Auth->user('id'));\n            $this->Flash->success('Done. For more details check the audit logs.');\n            $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n        } else {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'upgrade_24',\n                    'job_input' => 'Old database',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => 0,\n                    'message' => 'Job created.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'AdminShell',\n                    array('jobUpgrade24', $jobId, $this->Auth->user('id')),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            $this->Flash->success(__('Job queued. You can view the progress if you navigate to the active jobs view (administration -> jobs).'));\n            $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n        }\n    }\n\n    private function __preAuthException($message)\n    {\n        $this->set('me', array());\n        throw new ForbiddenException($message);\n    }\n\n    private function __customAuthentication($server)\n    {\n        $result = false;\n        if (Configure::read('Plugin.CustomAuth_enable')) {\n            $header = Configure::read('Plugin.CustomAuth_header') ? Configure::read('Plugin.CustomAuth_header') : 'Authorization';\n            $authName = Configure::read('Plugin.CustomAuth_name') ? Configure::read('Plugin.CustomAuth_name') : 'External authentication';\n            if (\n                !Configure::check('Plugin.CustomAuth_use_header_namespace') ||\n                (Configure::check('Plugin.CustomAuth_use_header_namespace') && Configure::read('Plugin.CustomAuth_use_header_namespace'))\n            ) {\n                if (Configure::check('Plugin.CustomAuth_header_namespace')) {\n                    $headerNamespace = Configure::read('Plugin.CustomAuth_header_namespace');\n                } else {\n                    $headerNamespace = 'HTTP_';\n                }\n            } else {\n                $headerNamespace = '';\n            }\n            if (isset($server[$headerNamespace . $header]) && !empty($server[$headerNamespace . $header])) {\n                if (Configure::read('Plugin.CustomAuth_only_allow_source') && Configure::read('Plugin.CustomAuth_only_allow_source') !== $server['REMOTE_ADDR']) {\n                    $this->Log = ClassRegistry::init('Log');\n                    $this->Log->create();\n                    $log = array(\n                            'org' => 'SYSTEM',\n                            'model' => 'User',\n                            'model_id' => 0,\n                            'email' => 'SYSTEM',\n                            'action' => 'auth_fail',\n                            'title' => 'Failed authentication using external key (' . trim($server[$headerNamespace . $header]) . ') - the user has not arrived from the expected address. Instead the request came from: ' . $server['REMOTE_ADDR'],\n                            'change' => null,\n                    );\n                    $this->Log->save($log);\n                    $this->__preAuthException($authName . ' authentication failed. Contact your MISP support for additional information at: ' . Configure::read('MISP.contact'));\n                }\n                $temp = $this->checkExternalAuthUser($server[$headerNamespace . $header]);\n                $user['User'] = $temp;\n                if ($user['User']) {\n                    unset($user['User']['gpgkey']);\n                    unset($user['User']['certif_public']);\n                    $this->Session->renew();\n                    $this->Session->write(AuthComponent::$sessionKey, $user['User']);\n                    if (Configure::read('MISP.log_auth')) {\n                        $this->Log = ClassRegistry::init('Log');\n                        $this->Log->create();\n                        $log = array(\n                            'org' => $user['User']['Organisation']['name'],\n                            'model' => 'User',\n                            'model_id' => $user['User']['id'],\n                            'email' => $user['User']['email'],\n                            'action' => 'auth',\n                            'title' => 'Successful authentication using ' . $authName . ' key',\n                            'change' => 'HTTP method: ' . $_SERVER['REQUEST_METHOD'] . PHP_EOL . 'Target: ' . $this->here,\n                        );\n                        $this->Log->save($log);\n                    }\n                    $result = true;\n                } else {\n                    // User not authenticated correctly\n                    // reset the session information\n                    $this->Log = ClassRegistry::init('Log');\n                    $this->Log->create();\n                    $log = array(\n                            'org' => 'SYSTEM',\n                            'model' => 'User',\n                            'model_id' => 0,\n                            'email' => 'SYSTEM',\n                            'action' => 'auth_fail',\n                            'title' => 'Failed authentication using external key (' . trim($server[$headerNamespace . $header]) . ')',\n                            'change' => null,\n                    );\n                    $this->Log->save($log);\n                    if (Configure::read('CustomAuth_required')) {\n                        $this->Session->destroy();\n                        $this->__preAuthException($authName . ' authentication failed. Contact your MISP support for additional information at: ' . Configure::read('MISP.contact'));\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n\n    public function cleanModelCaches()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->loadModel('Server');\n        $this->Server->cleanCacheFiles();\n        $this->Flash->success('Caches cleared.');\n        $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'diagnostics'));\n    }\n\n    private function __sessionMassage()\n    {\n        if (!empty(Configure::read('MISP.uuid'))) {\n            Configure::write('Session.cookie', 'MISP-' . Configure::read('MISP.uuid'));\n        }\n        if (!empty(Configure::read('Session.cookieTimeout')) || !empty(Configure::read('Session.timeout'))) {\n            $session = Configure::read('Session');\n            if (!empty($session['cookieTimeout'])) {\n                $value = 60 * intval($session['cookieTimeout']);\n            } else if (!empty($session['timeout'])) {\n                $value = 60 * intval($session['timeout']);\n            } else {\n                $value = 3600;\n            }\n            $session['ini']['session.gc_maxlifetime'] = $value;\n            Configure::write('Session', $session);\n        }\n    }\n\n    private function _redirectToLogin() {\n        $targetRoute = $this->Auth->loginAction;\n        $targetRoute['admin'] = false;\n        $this->redirect($targetRoute);\n    }\n\n    protected function _loadAuthenticationPlugins() {\n        // load authentication plugins from Configure::read('Security.auth')\n        $auth = Configure::read('Security.auth');\n\n        if (!$auth) return;\n\n        $this->Auth->authenticate = array_merge($auth, $this->Auth->authenticate);\n        if ($this->Auth->startup($this)) {\n            $user = $this->Auth->user();\n            if ($user) {\n                // User found in the db, add the user info to the session\n                $this->Session->renew();\n                $this->Session->write(AuthComponent::$sessionKey, $user);\n            }\n        }\n    }\n\n    protected function _legacyAPIRemap($options = array())\n    {\n        $ordered_url_params = array();\n        foreach ($options['paramArray'] as $k => $param) {\n            if (isset($options['ordered_url_params'][$k])) {\n                $ordered_url_params[$param] = $options['ordered_url_params'][$k];\n            } else {\n                $ordered_url_params[$param] = false;\n            }\n        }\n        $filterData = array(\n            'request' => $options['request'],\n            'named_params' => $options['named_params'],\n            'paramArray' => $options['paramArray'],\n            'ordered_url_params' => $ordered_url_params\n        );\n        $exception = false;\n        $filters = $this->_harvestParameters($filterData, $exception);\n        if (!empty($options['injectedParams'])) {\n            foreach ($options['injectedParams'] as $injectedParam => $injectedValue) {\n                $filters[$injectedParam] = $injectedValue;\n            }\n        }\n        if (!empty($options['alias'])) {\n            foreach ($options['alias'] as $from => $to) {\n                if (!empty($filters[$from])) {\n                    $filters[$to] = $filters[$from];\n                }\n            }\n        }\n        $this->_legacyParams = $filters;\n        return true;\n    }\n\n    public function restSearch()\n    {\n        $scope = empty($this->scopeOverride) ? $this->modelClass : $this->scopeOverride;\n        if ($scope === 'MispObject') {\n            $scope = 'Object';\n        }\n        if (empty($this->RestSearch->paramArray[$scope])) {\n            throw new NotFoundException(__('RestSearch is not implemented (yet) for this scope.'));\n        }\n        if (!isset($this->$scope)) {\n            $this->loadModel($scope);\n        }\n        $filterData = array(\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'paramArray' => $this->RestSearch->paramArray[$scope],\n            'ordered_url_params' => func_get_args()\n        );\n        $exception = false;\n        $filters = $this->_harvestParameters($filterData, $exception, $this->_legacyParams);\n        if (empty($filters['returnFormat'])) {\n            $filters['returnFormat'] = 'json';\n        }\n        unset($filterData);\n        if ($filters === false) {\n            return $exception;\n        }\n        $key = empty($filters['key']) ? $filters['returnFormat'] : $filters['key'];\n        $user = $this->_getApiAuthUser($key, $exception);\n        if ($user === false) {\n            return $exception;\n        }\n        if (isset($filters['returnFormat'])) {\n            $returnFormat = $filters['returnFormat'];\n        } else {\n            $returnFormat = 'json';\n        }\n        if ($returnFormat === 'download') {\n            $returnFormat = 'json';\n        }\n        if ($returnFormat === 'stix' && $this->_isJson()) {\n            $returnFormat = 'stix-json';\n        }\n        $elementCounter = 0;\n        $renderView = false;\n        $final = $this->$scope->restSearch($user, $returnFormat, $filters, false, false, $elementCounter, $renderView);\n        if (!empty($renderView) && !empty($final)) {\n            $this->layout = false;\n            $final = json_decode($final, true);\n            foreach ($final as $key => $data) {\n                $this->set($key, $data);\n            }\n            $this->render('/Events/module_views/' . $renderView);\n        } else {\n            $responseType = $this->$scope->validFormats[$returnFormat][0];\n            $filename = $this->RestSearch->getFilename($filters, $scope, $responseType);\n            return $this->RestResponse->viewData($final, $responseType, false, true, $filename, array('X-Result-Count' => $elementCounter, 'X-Export-Module-Used' => $returnFormat, 'X-Response-Format' => $responseType));\n        }\n    }\n}\n", "<?php\n    if (!empty($me)) {\n        $menu = array(\n            array(\n                'type' => 'root',\n                'url' =>empty($homepage['path']) ? $baseurl : $baseurl . h($homepage['path']),\n                'html' => (Configure::read('MISP.home_logo') ?  $logo = '<img src=\"' . $baseurl . '/img/custom/' . Configure::read('MISP.home_logo') . '\" style=\"height:24px;\">' : __('Home'))\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Event Actions'),\n                'children' => array(\n                    array(\n                        'text' => __('List Events'),\n                        'url' => '/events/index'\n                    ),\n                    array(\n                        'text' => __('Add Event'),\n                        'url' => '/events/add',\n                        'requirement' => $isAclAdd\n                    ),\n                    array(\n                        'text' => __('List Attributes'),\n                        'url' => '/attributes/index'\n                    ),\n                    array(\n                        'text' => __('Search Attributes'),\n                        'url' => '/attributes/search'\n                    ),\n                    array(\n                        'text' => __('REST client'),\n                        'url' => '/servers/rest'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('View Proposals'),\n                        'url' => '/shadow_attributes/index/all:0'\n                    ),\n                    array(\n                        'text' => __('Events with proposals'),\n                        'url' => '/events/proposalEventIndex'\n                    ),\n                    array(\n                        'url' => '/event_delegations/index/context:pending',\n                        'text' => __('View delegation requests')\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Tags'),\n                        'url' => '/tags/index'\n                    ),\n                    array(\n                        'text' => __('List Tag Collections'),\n                        'url' => '/tag_collections/index'\n                    ),\n                    array(\n                        'text' => __('Add Tag'),\n                        'url' => '/tags/add',\n                        'requirement' => $isAclTagEditor\n                    ),\n                    array(\n                        'text' => __('List Taxonomies'),\n                        'url' => '/taxonomies/index'\n                    ),\n                    array(\n                        'text' => __('List Templates'),\n                        'url' => '/templates/index'\n                    ),\n                    array(\n                        'text' => __('Add Template'),\n                        'url' => '/templates/add',\n                        'requirement' => $isAclTemplate\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('Export'),\n                        'url' => '/events/export'\n                    ),\n                    array(\n                        'text' => __('Automation'),\n                        'url' => '/events/automation',\n                        'requirement' => $isAclAuth\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Galaxies'),\n                'url' => '/galaxies/index',\n                'children' => array(\n                    array(\n                        'text' => __('List Galaxies'),\n                        'url' => '/galaxies/index'\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Input Filters'),\n                'children' => array(\n                    array(\n                        'text' => __('Import Regexp'),\n                        'url' => '/admin/regexp/index',\n                        'requirement' => $isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Import Regexp'),\n                        'url' => '/regexp/index',\n                        'requirement' => !$isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Signature Whitelist'),\n                        'url' => '/admin/whitelists/index',\n                        'requirement' => $isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Signature Whitelist'),\n                        'url' => '/whitelists/index',\n                        'requirement' => !$isAclRegexp\n                    ),\n                    array(\n                        'text' => __('List Warninglists'),\n                        'url' => '/warninglists/index'\n                    ),\n                    array(\n                        'text' => __('List Noticelists'),\n                        'url' => '/noticelists/index'\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Global Actions'),\n                'url' => '/dashboards',\n                'children' => array(\n                    array(\n                        'text' => __('News'),\n                        'url' => '/news'\n                    ),\n                    array(\n                        'text' => __('My Profile'),\n                        'url' => '/users/view/me'\n                    ),\n                    array(\n                        'text' => __('My Settings'),\n                        'url' => '/user_settings/index/user_id:me'\n                    ),\n                    array(\n                        'text' => __('Set Setting'),\n                        'url' => '/user_settings/setSetting'\n                    ),\n                    array(\n                        'text' => __('Dashboard'),\n                        'url' => '/dashboards'\n                    ),\n                    array(\n                        'text' => __('Organisations'),\n                        'url' => '/organisations/index',\n                        'requirement' => $isAclSharingGroup || empty(Configure::read('Security.hide_organisation_index_from_users'))\n                    ),\n                    array(\n                        'text' => __('Role Permissions'),\n                        'url' => '/roles/index'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Object Templates'),\n                        'url' => '/objectTemplates/index'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Sharing Groups'),\n                        'url' => '/sharing_groups/index'\n                    ),\n                    array(\n                        'text' => __('Add Sharing Group'),\n                        'url' => '/sharing_groups/add',\n                        'requirement' => $isAclSharingGroup\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('Decaying Models Tool'),\n                        'url' => '/decayingModel/decayingTool',\n                        'requirement' => $isAdmin\n                    ),\n                    array(\n                        'text' => __('List Decaying Models'),\n                        'url' => '/decayingModel/index',\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('User Guide'),\n                        'url' => 'https://www.circl.lu/doc/misp/'\n                    ),\n                    array(\n                        'text' => __('Categories & Types'),\n                        'url' => '/pages/display/doc/categories_and_types'\n                    ),\n                    array(\n                        'text' => __('Terms & Conditions'),\n                        'url' => '/users/terms'\n                    ),\n                    array(\n                        'text' => __('Statistics'),\n                        'url' => '/users/statistics'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Discussions'),\n                        'url' => '/threads/index'\n                    ),\n                    array(\n                        'text' => __('Start Discussion'),\n                        'url' => '/posts/add'\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Sync Actions'),\n                'requirement' =>  ($isAclSync || $isAdmin || $hostOrgUser),\n                'children' => array(\n                    array(\n                        'text' => __('Create Sync Config'),\n                        'url' => '/servers/createSync',\n                        'requirement' => ($isAclSync && !$isSiteAdmin)\n                    ),\n                    array(\n                        'text' => __('Import Server Settings'),\n                        'url' => '/servers/import',\n                        'requirement' => ($isSiteAdmin)\n                    ),\n                    array(\n                        'text' => __('List Servers'),\n                        'url' => '/servers/index',\n                        'requirement' => ($isAclSync || $isAdmin)\n                    ),\n                    array(\n                        'text' => __('List Feeds'),\n                        'url' => '/feeds/index',\n                        'requirement' => ($isSiteAdmin || $hostOrgUser)\n                    ),\n                    array(\n                        'text' => __('Search Feed Caches'),\n                        'url' => '/feeds/searchCaches',\n                        'requirement' => ($isSiteAdmin || $hostOrgUser)\n                    ),\n                    array(\n                        'text' => __('List SightingDB Connections'),\n                        'url' => '/sightingdb/index',\n                        'requirement' => ($isSiteAdmin)\n                    ),\n                    array(\n                        'text' => __('Add SightingDB Connection'),\n                        'url' => '/sightingdb/add',\n                        'requirement' => ($isSiteAdmin)\n                    ),\n                    array(\n                        'text' => __('List Communities'),\n                        'url' => '/communities/index',\n                        'requirement' => ($isSiteAdmin)\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Administration'),\n                'url' => '/servers/serverSettings',\n                'requirement' =>  ($isAdmin),\n                'children' => array(\n                    array(\n                        'text' => __('List Users'),\n                        'url' => '/admin/users/index'\n                    ),\n                    array(\n                        'text' => __('List User Settings'),\n                        'url' => '/user_settings/index/user_id:all'\n                    ),\n                    array(\n                        'text' => __('Set User Setting'),\n                        'url' => '/user_settings/setSetting'\n                    ),\n                    array(\n                        'text' => __('Add User'),\n                        'url' => '/admin/users/add'\n                    ),\n                    array(\n                        'text' => __('Contact Users'),\n                        'url' => '/admin/users/email'\n                    ),\n                    array(\n                        'text' => __('User Registrations'),\n                        'url' => '/users/registrations'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Organisations'),\n                        'url' => '/organisations/index'\n                    ),\n                    array(\n                        'text' => __('Add Organisations'),\n                        'url' => '/admin/organisations/add'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Roles'),\n                        'url' => '/admin/roles/index'\n                    ),\n                    array(\n                        'text' => __('Add Roles'),\n                        'url' => '/admin/roles/add',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                    ),\n                    array(\n                        'text' => __('Server Settings & Maintenance'),\n                        'url' => '/servers/serverSettings',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Jobs'),\n                        'url' => '/jobs/index',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Scheduled Tasks'),\n                        'url' => '/tasks',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Event Block Rules'),\n                        'url' => '/servers/eventBlockRule',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.enableEventBlacklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Blacklist Event'),\n                        'url' => '/eventBlacklists/add',\n                        'requirement' => Configure::read('MISP.enableEventBlacklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Manage Event Blacklists'),\n                        'url' => '/eventBlacklists',\n                        'requirement' => Configure::read('MISP.enableEventBlacklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.enableEventBlacklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Blacklist Organisation'),\n                        'url' => '/orgBlacklists/add',\n                        'requirement' => Configure::read('MISP.enableOrgBlacklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Manage Org Blacklists'),\n                        'url' => '/orgBlacklists',\n                        'requirement' => Configure::read('MISP.enableOrgBlacklisting') !== false && $isSiteAdmin\n                    ),\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Audit'),\n                'requirement' =>  ($isAclAudit),\n                'children' => array(\n                    array(\n                        'text' => __('List Logs'),\n                        'url' => '/admin/logs/index'\n                    ),\n                    array(\n                        'text' => __('Search Logs'),\n                        'url' => '/admin/logs/search'\n                    )\n                )\n            )\n        );\n        $menu_right = array(\n            array(\n                'type' => 'root',\n                'url' => '#',\n                'html' => sprintf(\n                    '<span class=\"fas fa-star %s\" id=\"setHomePage\" title=\"Set the current page as your home page in MISP\"></span>',\n                    (!empty($homepage['path']) && $homepage['path'] === $this->here) ? 'orange' : ''\n                )\n            ),\n            array(\n                'type' => 'root',\n                'url' =>empty($homepage['path']) ? $baseurl : $baseurl . h($homepage['path']),\n                'html' => '<span class=\"logoBlueStatic bold\" id=\"smallLogo\">MISP</span>'\n            ),\n            array(\n                'type' => 'root',\n                'url' => '/dashboards',\n                'html' => sprintf(\n                    '<span class=\"white\" title=\"%s\">%s%s&nbsp;&nbsp;&nbsp;%s</span>',\n                    h($me['email']),\n                    $this->UserName->prepend($me['email']),\n                    h($loggedInUserName),\n                    sprintf(\n                        '<i class=\"fa fa-envelope %s\"></i>',\n                        (($notifications['total'] == 0) ? 'white' : 'red')\n                    )\n                )\n            ),\n            array(\n                'url' => '/users/logout',\n                'text' => __('Log out'),\n                'requirement' => empty(Configure::read('Plugin.CustomAuth_disable_logout'))\n            )\n        );\n    }\n?>\n<div id=\"topBar\" class=\"navbar navbar-inverse <?php echo $debugMode;?>\" style=\"z-index: 20;\">\n  <div class=\"navbar-inner\">\n    <ul class=\"nav\">\n        <?php\n            if (!empty($menu)) {\n                foreach ($menu as $root_element) {\n                    echo $this->element('/genericElements/GlobalMenu/global_menu_root', array('data' => $root_element));\n                }\n            }\n        ?>\n    </ul>\n    <ul class=\"nav pull-right\">\n        <?php\n            if (!empty($menu_right)) {\n                foreach ($menu_right as $root_element) {\n                    echo $this->element('/genericElements/GlobalMenu/global_menu_root', array('data' => $root_element));\n                }\n            }\n        ?>\n    </ul>\n  </div>\n</div>\n<input type=\"hidden\" class=\"keyboardShortcutsConfig\" value=\"/shortcuts/global_menu.json\" />\n<script type=\"text/javascript\">\n    $(document).ready(function() {\n        $('#setHomePage').click(function(event) {\n            event.preventDefault();\n            setHomePage();\n        })\n    });\n</script>\n", "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <?php echo $this->Html->charset(); ?>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>\n        <?php echo $title_for_layout, ' - '. h(Configure::read('MISP.title_text') ? Configure::read('MISP.title_text') : 'MISP'); ?>\n    </title>\n    <?php\n        $css_collection = array(\n            'bootstrap',\n            //'bootstrap4',\n            'bootstrap-datepicker',\n            'bootstrap-colorpicker',\n            'famfamfam-flags',\n            'font-awesome',\n            'jquery-ui',\n            'chosen.min',\n            'main',\n            'jquery-jvectormap-2.0.5',\n            array('print', array('media' => 'print'))\n        );\n        if (Configure::read('MISP.custom_css')) {\n            $css_collection[] = preg_replace('/\\.css$/i', '', Configure::read('MISP.custom_css'));\n        }\n        $js_collection = array(\n            'jquery',\n            'misp-touch',\n            'jquery-ui',\n            'chosen.jquery.min'\n        );\n        echo $this->element('genericElements/assetLoader', array(\n            'css' => $css_collection,\n            'js' => $js_collection,\n            'meta' => 'icon'\n        ));\n    ?>\n\n</head>\n<body>\n    <div id=\"popover_form\" class=\"ajax_popover_form\"></div>\n    <div id=\"popover_form_large\" class=\"ajax_popover_form ajax_popover_form_large\"></div>\n    <div id=\"popover_form_x_large\" class=\"ajax_popover_form ajax_popover_form_x_large\"></div>\n    <div id=\"popover_matrix\" class=\"ajax_popover_form ajax_popover_matrix\"></div>\n    <div id=\"popover_box\" class=\"popover_box\"></div>\n    <div id=\"screenshot_box\" class=\"screenshot_box\"></div>\n    <div id=\"confirmation_box\" class=\"confirmation_box\"></div>\n    <div id=\"gray_out\" class=\"gray_out\"></div>\n    <div id=\"container\">\n        <?php\n            echo $this->element('global_menu');\n            $topPadding = '50';\n            if (!empty($debugMode) && $debugMode != 'debugOff') {\n                $topPadding = '0';\n            }\n        ?>\n    </div>\n    <div id=\"flashContainer\" style=\"padding-top:<?php echo $topPadding; ?>px; !important;\">\n        <div id=\"main-view-container\" class=\"container-fluid \">\n            <?php\n                echo $this->Flash->render();\n            ?>\n        </div>\n    </div>\n    <div>\n        <?php\n            echo $this->fetch('content');\n        ?>\n    </div>\n    <?php\n    echo $this->element('genericElements/assetLoader', array(\n        'js' => array(\n            'bootstrap',\n            'bootstrap-timepicker',\n            'bootstrap-datepicker',\n            'bootstrap-colorpicker',\n            'misp',\n            'keyboard-shortcuts'\n        )\n    ));\n    echo $this->element('footer');\n    echo $this->element('sql_dump');\n    ?>\n    <div id = \"ajax_success_container\" class=\"ajax_container\">\n        <div id=\"ajax_success\" class=\"ajax_result ajax_success\"></div>\n    </div>\n    <div id = \"ajax_fail_container\" class=\"ajax_container\">\n        <div id=\"ajax_fail\" class=\"ajax_result ajax_fail\"></div>\n    </div>\n    <div class=\"loading\">\n        <div class=\"spinner\"></div>\n        <div class=\"loadingText\"><?php echo __('Loading');?></div>\n    </div>\n    <script type=\"text/javascript\">\n    <?php\n        if (!isset($debugMode)):\n    ?>\n        $(window).scroll(function(e) {\n            $('.actions').css('left',-$(window).scrollLeft());\n        });\n    <?php\n        endif;\n    ?>\n        var tabIsActive = true;\n        var baseurl = '<?php echo $baseurl; ?>';\n        var here = '<?php\n                if (substr($this->params['action'], 0, 6) === 'admin_') {\n                    echo $baseurl . '/admin/' . h($this->params['controller']) . '/' . h(substr($this->params['action'], 6));\n                } else {\n                    echo $baseurl . '/' . h($this->params['controller']) . '/' . h($this->params['action']);\n                }\n            ?>';\n        $(document).ready(function(){\n            $(window).blur(function() {\n                tabIsActive = false;\n            });\n            $(window).focus(function() {\n                tabIsActive = true;\n            });\n        <?php\n            if (!Configure::read('MISP.disable_auto_logout') and $me):\n        ?>\n                checkIfLoggedIn();\n        <?php\n            endif;\n        ?>\n        if ($('.alert').text().indexOf(\"$flashErrorMessage\") >= 0) {\n            var flashMessageLink = '<span class=\"useCursorPointer underline bold\" onClick=\"flashErrorPopover();\">here</span>';\n            $('.alert').html(($('.alert').html().replace(\"$flashErrorMessage\", flashMessageLink)));\n        }\n        });\n    </script>\n</body>\n</html>\n", "String.prototype.ucfirst = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nif (!String.prototype.startsWith) {\n  String.prototype.startsWith = function(searchString, position) {\n    position = position || 0;\n    return this.indexOf(searchString, position) === position;\n  };\n}\n\nfunction stringToRGB(str){\n    var hash = 0;\n    if (str.length == 0) return hash;\n    for (i = 0; i < str.length; i++) {\n        hash = ((hash<<5)-hash) + str.charCodeAt(i);\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    var c = (hash & 0x00FFFFFF)\n        .toString(16)\n        .toUpperCase();\n\n    return \"#\" + \"00000\".substring(0, 6 - c.length) + c;\n}\n\nfunction deleteObject(type, action, id, event) {\n    var destination = 'attributes';\n    var alternateDestinations = ['shadow_attributes', 'template_elements', 'taxonomies', 'galaxy_clusters', 'objects', 'object_references'];\n    if (alternateDestinations.indexOf(type) > -1) destination = type;\n    else destination = type;\n    url = \"/\" + destination + \"/\" + action + \"/\" + id;\n    $.get(url, function(data) {\n        openPopup(\"#confirmation_box\");\n        $(\"#confirmation_box\").html(data);\n    });\n}\n\nfunction quickDeleteSighting(id, rawId, context) {\n    url = \"/sightings/quickDelete/\" + id + \"/\" + rawId + \"/\" + context;\n    $.get(url, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction fetchAddSightingForm(type, attribute_id, page, onvalue) {\n    var url = \"/sightings/quickAdd/\" + attribute_id + \"/\" + type;\n    if (onvalue) {\n        url = url + \"/1\";\n    } else {\n        url = url + \"/0\";\n    }\n    $.get(url, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction flexibleAddSighting(clicked, type, attribute_id, event_id, page, placement) {\n    var $clicked = $(clicked);\n    var hoverbroken = false;\n    $clicked.off('mouseleave.temp').on('mouseleave.temp', function() {\n        hoverbroken = true;\n    });\n    setTimeout(function() {\n        $clicked.off('mouseleave.temp');\n        if ($clicked.is(\":hover\") && !hoverbroken) {\n            var html = '<div>'\n                + '<button class=\"btn btn-primary\" onclick=\"addSighting(\\'' + type + '\\', \\'' + attribute_id + '\\', \\'' + event_id + '\\', \\'' + page + '\\')\">This attribute</button>'\n                + '<button class=\"btn btn-primary\" style=\"margin-left:5px;\" onclick=\"fetchAddSightingForm(\\'' + type + '\\', \\'' + attribute_id + '\\', \\'' + page + '\\', true)\">Global value</button>'\n                + '</div>';\n            openPopover(clicked, html, true, placement);\n        }\n    }, 1000);\n}\n\nfunction publishPopup(id, type) {\n    var action = \"alert\";\n    if (type == \"publish\") action = \"publish\";\n    if (type == \"unpublish\") action = \"unpublish\";\n    if (type == \"sighting\") action = \"publishSightings\";\n    var destination = 'attributes';\n    $.get( \"/events/\" + action + \"/\" + id, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction delegatePopup(id) {\n    simplePopup(\"/event_delegations/delegateEvent/\" + id);\n}\n\nfunction genericPopup(url, popupTarget, callback) {\n    $.get(url, function(data) {\n        $(popupTarget).html(data);\n        $(popupTarget).fadeIn();\n        left = ($(window).width() / 2) - ($(popupTarget).width() / 2);\n        $(popupTarget).css({'left': left + 'px'});\n        $(\"#gray_out\").fadeIn();\n        if (callback !== undefined) {\n            callback();\n        }\n    });\n}\n\nfunction screenshotPopup(url, title) {\n    if (!url.startsWith('data:image/')) {\n        url = url.slice(0, -1);\n    }\n    popupHtml = '<it class=\"fa fa-spin fa-spinner\" style=\"font-size: xx-large; color: white; position: fixed; left: 50%; top: 50%;\"></it>';\n    url = $('<div>').text(url).html();\n    title = $('<div>').text(title).html();\n    popupHtml += '<img class=\"screenshot_box-content hidden\" src=\"' + url + '\" id=\"screenshot-image\" title=\"' + title + '\" alt=\"' + title + '\" onload=\"$(this).show(); $(this).parent().find(\\'.fa-spinner\\').remove();\"/>';\n    popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n    if (!url.startsWith('data:image/')) {\n        popupHtml += '<a class=\"close-icon useCursorPointer fa fa-expand\" style=\"right: 20px; background: black; color: white; text-decoration: none;\" target=\"_blank\" href=\"' + url + '\" ></a>';\n    }\n    popupHtml += '<div style=\"height: 20px;\"></div>'; // see bottom of image for large one\n    $('#screenshot_box').html(popupHtml);\n    $('#screenshot_box').css({\n        display: 'block',\n        top: (document.documentElement.scrollTop + 100) + 'px'\n    });\n    $(\"#gray_out\").fadeIn();\n}\n\nfunction submitPublish(id, type) {\n    $(\"#PromptForm\").submit();\n}\n\nfunction editTemplateElement(type, id) {\n    simplePopup(\"/template_elements/edit/\" + type + \"/\" + id);\n}\n\nfunction cancelPrompt(isolated) {\n    if (isolated == undefined) {\n        $(\"#gray_out\").fadeOut();\n    }\n    $(\"#confirmation_box\").fadeOut();\n    $(\"#confirmation_box\").empty();\n    $('.have-a-popover').popover('destroy');\n}\n\nfunction submitDeletion(context_id, action, type, id) {\n    var context = 'event';\n    if (type == 'template_elements') context = 'template';\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            if (type == 'eventGraph') {\n                showMessage('success', 'Network has been deleted');\n                reset_graph_history();\n            } else {\n                updateIndex(context_id, context);\n                handleGenericAjaxResponse(data);\n            }\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/\" + type + \"/\" + action + \"/\" + id,\n    });\n}\n\nfunction removeSighting(caller) {\n    var id = $(caller).data('id');\n    var rawid = $(caller).data('rawid');\n    var context = $(caller).data('context');\n    if (context != 'attribute') {\n        context = 'event';\n    }\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n            var org = \"/\" + $('#org_id').text();\n            updateIndex(id, 'event');\n            $.get( \"/sightings/listSightings/\" + rawid + \"/\" + context + org, function(data) {\n                $(\"#sightingsData\").html(data);\n            });\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/sightings/quickDelete/\" + id + \"/\" + rawid + \"/\" + context,\n    });\n}\n\nfunction toggleSetting(e, setting, id) {\n    e.preventDefault();\n    e.stopPropagation();\n    switch (setting) {\n    case 'warninglist_enable':\n        formID = '#WarninglistIndexForm';\n        dataDiv = '#WarninglistData';\n        replacementForm = '/warninglists/getToggleField/';\n        searchString = 'enabled';\n        break;\n    case 'favourite_tag':\n        formID = '#FavouriteTagIndexForm';\n        dataDiv = '#FavouriteTagData';\n        replacementForm = '/favourite_tags/getToggleField/';\n        searchString = 'Adding';\n        break;\n    case 'activate_object_template':\n        formID = '#ObjectTemplateIndexForm';\n        dataDiv = '#ObjectTemplateData';\n        replacementForm = '/ObjectTemplates/getToggleField/';\n        searchString = 'activated';\n        break;\n    case 'noticelist_enable':\n        formID = '#NoticelistIndexForm';\n        dataDiv = '#NoticelistData';\n        replacementForm = '/noticelists/getToggleField/';\n        searchString = 'enabled';\n        break;\n    }\n    $(dataDiv).val(id);\n    var formData = $(formID).serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            var result = data;\n            if (result.success) {\n                var setting = false;\n                if (result.success.indexOf(searchString) > -1) setting = true;\n                $('#checkBox_' + id).prop('checked', setting);\n            }\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $.get(replacementForm, function(data) {\n                $('#hiddenFormDiv').html(data);\n            });\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Request failed due to an unexpected error.']});\n        },\n        type:\"post\",\n        cache: false,\n        url: $(formID).attr('action'),\n    });\n}\n\nfunction initiatePasswordReset(id) {\n    $.get( \"/users/initiatePasswordReset/\" + id, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction submitPasswordReset(id) {\n    var formData = $('#PromptForm').serialize();\n    var url = \"/users/initiatePasswordReset/\" + id;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:url,\n    });\n}\n\nfunction submitMessageForm(url, form, target) {\n    if (!$('#PostMessage').val()) {\n        showMessage(\"fail\", \"Cannot submit empty message.\");\n    } else {\n        submitGenericForm(url, form, target);\n    }\n}\n\nfunction submitGenericForm(url, form, target) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#' + form).serialize(),\n        success:function (data, textStatus) {\n            $('#top').html(data);\n            showMessage(\"success\", \"Message added.\");\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        cache: false,\n        url:url,\n    });\n}\n\nfunction acceptObject(type, id, event) {\n    name = '#ShadowAttribute_' + id + '_accept';\n    var formData = $(name).serialize();\n    $.ajax({\n        data: formData,\n        success:function (data, textStatus) {\n            updateIndex(event, 'event');\n            eventUnpublish();\n            handleGenericAjaxResponse(data);\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/shadow_attributes/accept/\" + id,\n    });\n}\n\nfunction toggleCorrelation(id, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#PromptForm').serialize(),\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data, skip_reload);\n            $(\"#correlation_toggle_\" + id).prop('checked', !$(\"#correlation_toggle_\" + id).is(':checked'));\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:'/attributes/toggleCorrelation/' + id,\n    });\n}\n\nfunction toggleToIDS(id, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#PromptForm').serialize(),\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data, skip_reload);\n            $(\"#toids_toggle_\" + id).prop('checked', !$(\"#toids_toggle_\" + id).is(':checked'));\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:'/attributes/editField/' + id ,\n    });\n}\n\nfunction eventUnpublish() {\n    $('.publishButtons').show();\n    $('.exportButtons').hide();\n    $('.published').hide();\n    $('.notPublished').show();\n}\n\nfunction updateIndex(id, context, newPage) {\n    if (typeof newPage !== 'undefined') page = newPage;\n    var url, div;\n    if (context == 'event') {\n        if (typeof currentUri == 'undefined') {\n            location.reload();\n            return true;\n        }\n        url = currentUri;\n        div = \"#attributes_div\";\n    }\n    if (context == 'template') {\n        url = \"/template_elements/index/\" + id;\n        div = \"#templateElements\";\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(div).html(data);\n            if (typeof genericPopupCallback !== \"undefined\") {\n                genericPopupCallback(\"success\");\n            } else {\n                console.log(\"genericPopupCallback function not defined\");\n            }\n            if (typeof timelinePopupCallback !== \"undefined\") {\n                timelinePopupCallback(\"success\");\n            } else {\n                console.log(\"timelinepopupcallback function not defined\");\n            }\n        },\n        url: url,\n    });\n}\n\nfunction updateAttributeFieldOnSuccess(name, type, id, field, event) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            if (field != 'timestamp') {\n                $(\".loading\").show();\n            }\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            if (field != 'timestamp') {\n                $(\".loading\").hide();\n                $(name + '_solid').html(data);\n                $(name + '_placeholder').empty();\n                $(name + '_solid').show();\n            } else {\n                $('#' + type + '_' + id + '_' + 'timestamp_solid').html(data);\n            }\n        },\n        url:\"/attributes/fetchViewValue/\" + id + \"/\" + field,\n    });\n}\n\nfunction updateObjectFieldOnSuccess(name, type, id, field, event) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            if (field != 'timestamp') {\n                $(\".loading\").show();\n            }\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            if (field != 'timestamp') {\n                $(\".loading\").hide();\n                $(name + '_solid').html(data);\n                $(name + '_placeholder').empty();\n                $(name + '_solid').show();\n            } else {\n                $('#' + type + '_' + id + '_' + 'timestamp_solid').html(data);\n            }\n        },\n        url:\"/objects/fetchViewValue/\" + id + \"/\" + field,\n    });\n}\n\nfunction activateField(type, id, field, event) {\n    resetForms();\n    if (type == 'denyForm') return;\n    var objectType = 'attributes';\n    var containerName = 'Attribute';\n    if (type == 'Object') {\n        objectType = 'objects';\n        containerName = 'Object';\n    }\n    var name = '#' + type + '_' + id + '_' + field;\n    var container_name = '#' + containerName + '_' + id + '_' + field;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(container_name + '_placeholder').html(data);\n            postActivationScripts(name, type, id, field, event);\n        },\n        url:\"/\" + objectType + \"/fetchEditForm/\" + id + \"/\" + field,\n    });\n}\n\n\nfunction submitQuickTag(form) {\n    $('#' + form).submit();\n}\n\n//if someone clicks an inactive field, replace it with the hidden form field. Also, focus it and bind a focusout event, so that it gets saved if the user clicks away.\n//If a user presses enter, submit the form\nfunction postActivationScripts(name, type, id, field, event) {\n    $(name + '_field').focus();\n    inputFieldButtonActive(name + '_field');\n    if (field == 'value' || field == 'comment') {\n        autoresize($(name + '_field')[0]);\n        $(name + '_field').on('keyup', function () {\n            autoresize(this);\n        });\n    }\n    $(name + '_form').submit(function(e){\n        e.preventDefault();\n        submitForm(type, id, field, event);\n        return false;\n    });\n\n    $(name + '_form').bind(\"focusout\", function() {\n        inputFieldButtonPassive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"focusin\", function(){\n        inputFieldButtonActive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            submitForm(type, id, field, event);\n        }\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-accept').bind('click', function() {\n        submitForm(type, id, field, event);\n    });\n\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-decline').bind('click', function() {\n        resetForms();\n    });\n\n    $(name + '_solid').hide();\n}\n\nfunction quickEditHover(td, type, id, field, event) {\n    var $td = $(td);\n    $td.find('#quickEditButton').remove(); // clean all similar if exist\n    var $div = $('<div id=\"quickEditButton\"></div>');\n    $div.addClass('quick-edit-row-div');\n    var $span = $('<span></span>');\n    $span.addClass('fa-as-icon fa fa-edit');\n    $span.css('font-size', '12px');\n    $div.append($span);\n    $td.find(\"[id*=_solid]\").append($div);\n\n    $span.click(function() {\n        activateField(type, id, field, event);\n    });\n\n    $td.off('mouseleave').on('mouseleave', function() {\n        $div.remove();\n    });\n}\n\nfunction addSighting(type, attribute_id, event_id, page) {\n    $('#Sighting_' + attribute_id + '_type').val(type);\n    $.ajax({\n        data: $('#Sighting_' + attribute_id).closest(\"form\").serialize(),\n        cache: false,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n            var result = data;\n            if (result.saved == true) {\n                $('.sightingsCounter').each(function( counter ) {\n                    $(this).html(parseInt($(this).html()) + 1);\n                });\n                if (typeof currentUri == 'undefined') {\n                    location.reload();\n                } else {\n                    updateIndex(event_id, 'event');\n                }\n            }\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            updateIndex(context, 'event');\n        },\n        type:\"post\",\n        url:\"/sightings/add/\" + attribute_id\n    });\n}\n\nfunction resetForms() {\n    $('.inline-field-solid').show();\n    $('.inline-field-placeholder').empty();\n}\n\nfunction inputFieldButtonActive(selector) {\n    $(selector).closest('.inline-input-container').children('.inline-input-accept').removeClass('inline-input-passive').addClass('inline-input-active');\n    $(selector).closest('.inline-input-container').children('.inline-input-decline').removeClass('inline-input-passive').addClass('inline-input-active');\n}\n\nfunction inputFieldButtonPassive(selector) {\n    $(selector).closest('.inline-input-container').children('.inline-input-accept').addClass('inline-input-passive').removeClass('inline-input-active');\n    $(selector).closest('.inline-input-container').children('.inline-input-daecline').addClass('inline-input-passive').removeClass('inline-input-active');\n}\n\nfunction autoresize(textarea) {\n    textarea.style.height = '20px';\n    textarea.style.height = (textarea.scrollHeight) + 'px';\n}\n\n// submit the form - this can be triggered by unfocusing the activated form field or by submitting the form (hitting enter)\n// after the form is submitted, intercept the response and act on it\nfunction submitForm(type, id, field, context) {\n    var object_type = 'attributes';\n    var action = \"editField\";\n    var name = '#' + type + '_' + id + '_' + field;\n    if (type == 'Object') {\n        object_type = 'objects';\n    }\n    $.ajax({\n        data: $(name + '_field').closest(\"form\").serialize(),\n        cache: false,\n        success:function (data, textStatus) {\n            handleAjaxEditResponse(data, name, type, id, field, context);\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            updateIndex(context, 'event');\n        },\n        type:\"post\",\n        url:\"/\" + object_type + \"/\" + action + \"/\" + id\n    });\n    $(name + '_field').unbind(\"keyup\");\n    $(name + '_form').unbind(\"focusout\");\n    return false;\n};\n\nfunction quickSubmitTagForm(selected_tag_ids, addData) {\n    var event_id = addData.id;\n    var localFlag = '';\n    if (undefined != addData['local'] && addData['local']) {\n        localFlag = '/local:1';\n    }\n    url = \"/events/addTag/\" + event_id + localFlag;\n    fetchFormDataAjax(url, function(formData) {\n        $('body').append($('<div id=\"temp\"/>').html(formData));\n        $('#temp #EventTag').val(JSON.stringify(selected_tag_ids));\n        $.ajax({\n            data: $('#EventAddTagForm').serialize(),\n            cache: false,\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                loadEventTags(event_id);\n                loadGalaxies(event_id, 'event');\n                handleGenericAjaxResponse(data);\n            },\n            error:function() {\n                showMessage('fail', 'Could not add tag.');\n                loadEventTags(event_id);\n                loadGalaxies(event_id, 'event');\n            },\n            complete:function() {\n                $('#temp').remove();\n                $(\"#popover_form\").fadeOut();\n                $(\"#gray_out\").fadeOut();\n                $(\".loading\").hide();\n                $('#temp').remove();\n            },\n            type:\"post\",\n            url:url\n        });\n    });\n}\n\nfunction quickSubmitAttributeTagForm(selected_tag_ids, addData) {\n    var attribute_id = addData.id;\n    var localFlag = '';\n    if (undefined != addData['local'] && addData['local']) {\n        localFlag = '/local:1';\n    }\n    url = \"/attributes/addTag/\" + attribute_id + localFlag;\n    fetchFormDataAjax(url, function(formData) {\n        $('body').append($('<div id=\"temp\"/>').html(formData));\n        $('#temp #AttributeTag').val(JSON.stringify(selected_tag_ids));\n        if (attribute_id == 'selected') {\n            $('#AttributeAttributeIds').val(getSelected());\n        }\n        $.ajax({\n            data: $('#AttributeAddTagForm').serialize(),\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                if (attribute_id == 'selected') {\n                    updateIndex(0, 'event');\n                } else {\n                    loadAttributeTags(attribute_id);\n                    loadGalaxies(attribute_id, 'attribute');\n                }\n                handleGenericAjaxResponse(data);\n            },\n            error:function() {\n                showMessage('fail', 'Could not add tag.');\n                loadAttributeTags(attribute_id);\n                loadGalaxies(attribute_id, 'attribute');\n            },\n            complete:function() {\n                $(\"#popover_form\").fadeOut();\n                $(\"#gray_out\").fadeOut();\n                $(\".loading\").hide();\n                $('#temp').remove();\n            },\n            type:\"post\",\n            url: url\n        });\n    });\n}\n\nfunction quickSubmitTagCollectionTagForm(selected_tag_ids, addData) {\n    var tag_collection_id = addData.id;\n    var localFlag = '';\n    if (undefined != addData['local'] && addData['local']) {\n        localFlag = '/local:1';\n    }\n    url = \"/tag_collections/addTag/\" + tag_collection_id + localFlag;\n    fetchFormDataAjax(url, function(formData) {\n        $('body').append($('<div id=\"temp\"/>').html(formData));\n        $('#temp #TagCollectionTag').val(JSON.stringify(selected_tag_ids));\n        $.ajax({\n            data: $('#TagCollectionAddTagForm').serialize(),\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                handleGenericAjaxResponse(data);\n                refreshTagCollectionRow(tag_collection_id);\n            },\n            error:function() {\n                showMessage('fail', 'Could not add tag.');\n                loadTagCollectionTags(tag_collection_id);\n            },\n            complete:function() {\n                $(\"#popover_form\").fadeOut();\n                $(\"#gray_out\").fadeOut();\n                $(\".loading\").hide();\n                $('#temp').remove();\n            },\n            type:\"post\",\n            url: url\n        });\n    });\n}\n\nfunction refreshTagCollectionRow(tag_collection_id) {\n    $.ajax({\n        type:\"get\",\n        url:\"/tag_collections/getRow/\" + tag_collection_id,\n        error:function() {\n            showMessage('fail', 'Could not fetch updates to the modified row.');\n        },\n        success: function (data, textStatus) {\n            $('[data-row-id=\"' + tag_collection_id + '\"]').replaceWith(data);\n        }\n    });\n\n}\n\nfunction handleAjaxEditResponse(data, name, type, id, field, event) {\n    responseArray = data;\n    if (type == 'Attribute') {\n        if (responseArray.saved) {\n            var msg = responseArray.success !== undefined ? responseArray.success : responseArray.message;\n            showMessage('success', msg);\n            updateAttributeFieldOnSuccess(name, type, id, field, event);\n            updateAttributeFieldOnSuccess(name, type, id, 'timestamp', event);\n            eventUnpublish();\n        } else {\n            showMessage('fail', 'Validation failed: ' + responseArray.errors.value);\n            updateAttributeFieldOnSuccess(name, type, id, field, event);\n        }\n    }\n    if (type == 'ShadowAttribute') {\n        updateIndex(event, 'event');\n    } else if (type == 'Object') {\n        if (responseArray.saved) {\n            var msg = responseArray.success !== undefined ? responseArray.success : responseArray.message;\n            showMessage('success', msg);\n            updateObjectFieldOnSuccess(name, type, id, field, event);\n            updateObjectFieldOnSuccess(name, type, id, 'timestamp', event);\n            eventUnpublish();\n        } else {\n            showMessage('fail', 'Validation failed: ' + responseArray.errors.value);\n            updateObjectFieldOnSuccess(name, type, id, field, event);\n        }\n    }\n    if (responseArray.hasOwnProperty('check_publish')) {\n        checkAndSetPublishedInfo();\n    }\n}\n\nfunction handleGenericAjaxResponse(data, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    if (typeof data == 'string') {\n        responseArray = JSON.parse(data);\n    } else {\n        responseArray = data;\n    }\n\n    // remove remaining popovers\n    cancelPrompt();\n    // in case the origin node has been deleted (e.g. tags)\n    $('.popover').remove();\n\n    if (responseArray.saved) {\n        showMessage('success', responseArray.success);\n        if (responseArray.hasOwnProperty('check_publish')) {\n            checkAndSetPublishedInfo(skip_reload);\n        }\n        return true;\n    } else {\n        showMessage('fail', responseArray.errors);\n        return false;\n    }\n}\n\nfunction toggleAllAttributeCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select_attribute\").prop(\"checked\", true);\n        $(\".select_proposal\").prop(\"checked\", true);\n    } else {\n        $(\".select_attribute\").prop(\"checked\", false);\n        $(\".select_proposal\").prop(\"checked\", false);\n    }\n}\n\nfunction toggleAllCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select\").prop(\"checked\", true);\n    } else {\n        $(\".select\").prop(\"checked\", false);\n    }\n}\n\nfunction toggleAllTaxonomyCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select_taxonomy\").prop(\"checked\", true);\n    } else {\n        $(\".select_taxonomy\").prop(\"checked\", false);\n    }\n}\n\nfunction attributeListAnyAttributeCheckBoxesChecked() {\n    if ($('.select_attribute:checked').length > 0) $('.mass-select').removeClass('hidden');\n    else $('.mass-select').addClass('hidden');\n}\n\nfunction listCheckboxesChecked() {\n    if ($('.select:checked').length > 0) $('.mass-select').removeClass('hidden');\n    else $('.mass-select').addClass('hidden');\n}\n\nfunction attributeListAnyProposalCheckBoxesChecked() {\n    if ($('.select_proposal:checked').length > 0) $('.mass-proposal-select').removeClass('hidden');\n    else $('.mass-proposal-select').addClass('hidden');\n}\n\nfunction taxonomyListAnyCheckBoxesChecked() {\n    if ($('.select_taxonomy:checked').length > 0) $('.mass-select').show();\n    else $('.mass-select').hide();\n}\n\nfunction multiSelectDeleteEvents() {\n    var selected = [];\n    $(\".select\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var temp = $(this).data(\"id\");\n            if (temp != null) {\n                selected.push(temp);\n            }\n        }\n    });\n    $.get(\"/events/delete/\" + JSON.stringify(selected), function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction multiSelectToggleFeeds(on, cache) {\n    var selected = [];\n    $(\".select\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var temp = $(this).data(\"id\");\n            if (temp != null) {\n                selected.push(temp);\n            }\n        }\n    });\n    $.get(\"/feeds/toggleSelected/\" + on + \"/\" + cache + \"/\" + JSON.stringify(selected), function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction multiSelectDeleteEventBlacklist(on, cache) {\n    var selected = [];\n    $(\".select\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var temp = $(this).data(\"id\");\n            if (temp != null) {\n                selected.push(temp);\n            }\n        }\n    });\n    $.get(\"/eventBlacklists/massDelete?ids=\" + JSON.stringify(selected), function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction multiSelectAction(event, context) {\n    var settings = {\n            deleteAttributes: {\n                confirmation: \"Are you sure you want to delete all selected attributes?\",\n                controller: \"attributes\",\n                camelCase: \"Attribute\",\n                alias: \"attribute\",\n                action: \"delete\"\n            },\n            acceptProposals: {\n                confirmation: \"Are you sure you want to accept all selected proposals?\",\n                controller: \"shadow_attributes\",\n                camelCase: \"ShadowAttribute\",\n                alias: \"proposal\",\n                action: \"accept\"\n            },\n            discardProposals: {\n                confirmation: \"Are you sure you want to discard all selected proposals?\",\n                controller: \"shadow_attributes\",\n                camelCase: \"ShadowAttribute\",\n                alias: \"proposal\",\n                action: \"discard\"\n            },\n    };\n    var answer = confirm(\"Are you sure you want to \" + settings[context][\"action\"] + \" all selected \" + settings[context][\"alias\"] + \"s?\");\n    if (answer) {\n        var selected = [];\n        $(\".select_\" + settings[context][\"alias\"]).each(function() {\n            if ($(this).is(\":checked\")) {\n                var temp= $(this).data(\"id\");\n                selected.push(temp);\n            }\n        });\n        $('#' + settings[context][\"camelCase\"] + 'Ids' + settings[context][\"action\"].ucfirst()).attr('value', JSON.stringify(selected));\n        var formData = $('#' + settings[context][\"action\"] + '_selected').serialize();\n        if (context == 'deleteAttributes') {\n            var url = $('#delete_selected').attr('action');\n            console.log(url);\n        } else {\n            var url = \"/\" + settings[context][\"controller\"] + \"/\" + settings[context][\"action\"] + \"Selected/\" + event;\n        }\n        $.ajax({\n            data: formData,\n            cache: false,\n            type:\"POST\",\n            url: url,\n            success:function (data, textStatus) {\n                updateIndex(event, 'event');\n                var result = handleGenericAjaxResponse(data);\n                if (settings[context][\"action\"] != \"discard\" && result == true) eventUnpublish();\n            },\n        });\n    }\n    return false;\n}\n\nfunction editSelectedAttributes(event) {\n    var selectedAttributeIds = getSelected();\n    simplePopup(\"/attributes/editSelected/\" + event + \"/\" + selectedAttributeIds);\n}\n\nfunction addSelectedTaxonomies(taxonomy) {\n    $.get(\"/taxonomies/taxonomyMassConfirmation/\"+taxonomy, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction proposeObjectsFromSelectedAttributes(clicked, event_id) {\n    var selectedAttributeIds = getSelected();\n    popoverPopup(clicked, event_id + '/' + selectedAttributeIds, 'objects', 'proposeObjectsFromAttributes');\n}\n\nfunction hideSelectedTags(taxonomy) {\n\t$.get(\"/taxonomies/taxonomyMassHide/\"+taxonomy, function(data) {\n\t\t$(\"#confirmation_box\").html(data);\n\t\topenPopup(\"#confirmation_box\");\n\t});\n}\n\nfunction unhideSelectedTags(taxonomy) {\n\t$.get(\"/taxonomies/taxonomyMassUnhide/\"+taxonomy, function(data) {\n\t\t$(\"#confirmation_box\").html(data);\n\t\topenPopup(\"#confirmation_box\");\n\t});\n}\n\nfunction submitMassTaxonomyTag() {\n    $('#PromptForm').submit();\n}\n\nfunction submitMassEventDelete() {\n    $('#PromptForm').trigger('submit');\n    event.preventDefault();\n}\n\nfunction getSelected() {\n    var selected = [];\n    $(\".select_attribute\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var test = $(this).data(\"id\");\n            selected.push(test);\n        }\n    });\n    return JSON.stringify(selected);\n}\n\nfunction getSelectedTaxonomyNames() {\n    var selected = [];\n    $(\".select_taxonomy\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var row = $(this).data(\"id\");\n            var temp = $('#tag_' + row).html();\n            temp = $(\"<div/>\").html(temp).text();\n            selected.push(temp);\n        }\n    });\n    $('#TaxonomyNameList').val(JSON.stringify(selected));\n}\n\nfunction loadEventTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".eventTagContainer\").html(data);\n        },\n        url:\"/tags/showEventTag/\" + id,\n    });\n}\n\nfunction loadGalaxies(id, scope) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            if (scope == 'event') {\n                $(\"#galaxies_div\").html(data);\n            } else if (scope == 'attribute') {\n                $(\"#attribute_\" + id + \"_galaxy\").html(data);\n            }\n        },\n        url:\"/galaxies/showGalaxies/\" + id + \"/\" + scope,\n    });\n}\n\nfunction loadTagCollectionTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".tagCollectionTagContainer\").html(data);\n        },\n        url:\"/tags/showEventTag/\" + id,\n    });\n}\n\nfunction removeEventTag(event, tag) {\n    var answer = confirm(\"Are you sure you want to remove this tag from the event?\");\n    if (answer) {\n        var formData = $('#removeTag_' + tag).serialize();\n        $.ajax({\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            data: formData,\n            type:\"POST\",\n            cache: false,\n            url:\"/events/removeTag/\" + event + '/' + tag,\n            success:function (data, textStatus) {\n                loadEventTags(event);\n                handleGenericAjaxResponse(data);\n            },\n            complete:function() {\n                $(\".loading\").hide();\n            }\n        });\n    }\n    return false;\n}\n\nfunction loadAttributeTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\"#Attribute_\"+id+\"_tr .attributeTagContainer\").html(data);\n        },\n        url:\"/tags/showAttributeTag/\" + id\n    });\n}\n\nfunction removeObjectTagPopup(clicked, context, object, tag) {\n    $.get( \"/\" + context + \"s/removeTag/\" + object + '/' + tag, function(data) {\n        openPopover(clicked, data);\n    });\n}\n\nfunction removeObjectTag(context, object, tag) {\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        type:\"POST\",\n        cache: false,\n        url:\"/\" + context.toLowerCase() + \"s/removeTag/\" + object + '/' + tag,\n        success:function (data, textStatus) {\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            if (context == 'Attribute') {\n                loadAttributeTags(object);\n            } else if (context == 'tag_collection') {\n                refreshTagCollectionRow(object);\n            } else {\n                loadEventTags(object);\n            }\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        }\n    });\n    return false;\n}\n\nfunction redirectAddObject(templateId, additionalData) {\n    var eventId = additionalData['event_id'];\n    window.location = '/objects/add/' + eventId + '/' + templateId;\n}\n\nfunction clickCreateButton(event, type) {\n    var destination = 'attributes';\n    if (type == 'Proposal') destination = 'shadow_attributes';\n    simplePopup(\"/\" + destination + \"/add/\" + event);\n}\n\nfunction openGenericModal(url) {\n    $.ajax({\n        type: \"get\",\n        url: url,\n        success: function (data) {\n            $('#genericModal').remove();\n            $('body').append(data);\n            $('#genericModal').modal();\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        }\n    });\n}\n\nfunction openGenericModalPost(url, body) {\n    $.ajax({\n        data: body,\n        type: \"post\",\n        url: url,\n        success: function (data) {\n            $('#genericModal').remove();\n            $('body').append(data);\n            $('#genericModal').modal();\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        }\n    });\n}\n\nfunction submitPopoverForm(context_id, referer, update_context_id, modal, popover_dismiss_id_to_close) {\n    var url = null;\n    var context = 'event';\n    var contextNamingConvention = 'Attribute';\n    var closePopover = true;\n    switch (referer) {\n        case 'addTextElement':\n            context = 'template';\n            contextNamingConvention = 'TemplateElementText';\n            break;\n        case 'editTextElement':\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementText';\n            break;\n        case 'addAttributeElement':\n            context = 'template';\n            contextNamingConvention = 'TemplateElementAttribute';\n            break;\n        case 'editAttributeElement':\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementAttribute';\n            break;\n        case 'addFileElement':\n            context = 'template';\n            contextNamingConvention = 'TemplateElementFile';\n            break;\n        case 'editFileElement':\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementFile';\n            break;\n        case 'addSighting':\n            closePopover = false;\n            break;\n        case 'addObjectReference':\n            url = \"/objectReferences/add/\" + context_id;\n            break;\n        case 'quickAddAttributeForm':\n            url = \"/objects/quickAddAttributeForm/\" + context_id;\n            break;\n        case 'acceptUserRegistrations':\n            url = \"/users/acceptRegistrations/\" + context_id\n            break;\n    }\n    if ($(\"#submitButton\").parent().hasClass('modal-footer')) {\n        var $form = $(\"#submitButton\").parent().parent().find('.modal-body form');\n        url = baseurl + $form.attr('action');\n    } else {\n        var $form = $(\"#submitButton\").closest(\"form\");\n        url = baseurl + $form.attr('action');\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            if (modal) {\n                if (closePopover) {\n                    $('#genericModal').modal('hide');\n                }\n            } else {\n                if (closePopover) {\n                    $(\"#gray_out\").fadeOut();\n                    $(\"#popover_form\").fadeOut();\n                    if (popover_dismiss_id_to_close !== undefined) {\n                        $('[data-dismissid=\"' + popover_dismiss_id_to_close + '\"]').popover('destroy');\n                    }\n                    $(\".loading\").show();\n                }\n            }\n        },\n        data: $form.serialize(),\n        success:function (data, textStatus) {\n            var result;\n            if (closePopover) {\n                if (modal) {\n                    result = handleAjaxModalResponse(data, context_id, url, referer, context, contextNamingConvention);\n                } else {\n                    result = handleAjaxPopoverResponse(data, context_id, url, referer, context, contextNamingConvention);\n                }\n            }\n            if (referer == 'addSighting') {\n                updateIndex(update_context_id, 'event');\n                $.get( \"/sightings/listSightings/\" + id + \"/attribute\", function(data) {\n                    $(\"#sightingsData\").html(data);\n                });\n                $('.sightingsToggle').removeClass('btn-primary');\n                $('.sightingsToggle').addClass('btn-inverse');\n                $('#sightingsListAllToggle').removeClass('btn-inverse');\n                $('#sightingsListAllToggle').addClass('btn-primary');\n            }\n            if (\n                (\n                    context == 'event' &&\n                    (referer == 'add' || referer == 'massEdit' || referer == 'replaceAttributes' || referer == 'addObjectReference' || referer == 'quickAddAttributeForm')\n                )\n            ){\n                eventUnpublish();\n            }\n        },\n        error: function (jqXHR, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        },\n        complete: function () {\n            $(\".loading\").hide();\n        },\n        type: \"post\",\n        url: url,\n    });\n    return false;\n};\n\nfunction handleAjaxModalResponse(response, context_id, url, referer, context, contextNamingConvention) {\n    responseArray = response;\n    var message = null;\n    var result = \"fail\";\n    if (responseArray.saved) {\n        updateIndex(context_id, context);\n        if (responseArray.success) {\n            showMessage(\"success\", responseArray.success);\n            result = \"success\";\n        }\n        if (responseArray.errors) {\n            showMessage(\"fail\", responseArray.errors);\n        }\n    } else {\n        var savedArray = saveValuesForPersistance();\n        $.ajax({\n            async:true,\n            dataType:\"html\",\n            success:function (data, textStatus) {\n                $('#genericModal').remove();\n                $('body').append(data);\n                $('#genericModal').modal();\n                var error_context = context.charAt(0).toUpperCase() + context.slice(1);\n                handleValidationErrors(responseArray.errors, context, contextNamingConvention);\n                result = \"success\";\n                if (!$.isEmptyObject(responseArray)) {\n                    result = \"fail\";\n                }\n                recoverValuesFromPersistance(savedArray);\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                showMessage('fail', textStatus + \": \" + errorThrown);\n            },\n            complete: function () {\n                $(\".loading\").hide();\n            },\n            url:url\n        });\n    }\n    return result;\n}\n\nfunction handleAjaxPopoverResponse(response, context_id, url, referer, context, contextNamingConvention) {\n    responseArray = response;\n    var message = null;\n    var result = \"fail\";\n    if (responseArray.saved) {\n        updateIndex(context_id, context);\n        if (responseArray.success) {\n            showMessage(\"success\", responseArray.success);\n            result = \"success\";\n        }\n        if (responseArray.errors) {\n            showMessage(\"fail\", responseArray.errors);\n        }\n    } else {\n        var savedArray = saveValuesForPersistance();\n        $.ajax({\n            async:true,\n            dataType:\"html\",\n            success:function (data, textStatus) {\n                $(\"#popover_form\").html(data);\n                openPopup(\"#popover_form\");\n                var error_context = context.charAt(0).toUpperCase() + context.slice(1);\n                handleValidationErrors(responseArray.errors, context, contextNamingConvention);\n                result = \"success\";\n                if (!$.isEmptyObject(responseArray)) {\n                    result = \"fail\";\n                    $(\"#formWarning\").show();\n                    $(\"#formWarning\").html('The object(s) could not be saved. Please, try again.');\n                }\n                recoverValuesFromPersistance(savedArray);\n                $(\".loading\").hide();\n            },\n            url:url\n        });\n    }\n    return result;\n}\n\n//before we update the form (in case the action failed), we want to retrieve the data from every field, so that we can set the fields in the new form that we fetch\nfunction saveValuesForPersistance() {\n    var formPersistanceArray = new Array();\n    for (i = 0; i < fieldsArray.length; i++) {\n        formPersistanceArray[fieldsArray[i]] = $('#' + fieldsArray[i]).val();\n    }\n    return formPersistanceArray;\n}\n\nfunction recoverValuesFromPersistance(formPersistanceArray) {\n    for (i = 0; i < fieldsArray.length; i++) {\n        $('#' + fieldsArray[i]).val(formPersistanceArray[fieldsArray[i]]);\n    }\n}\n\nfunction handleValidationErrors(responseArray, context, contextNamingConvention) {\n    for (var k in responseArray) {\n        var elementName = k.charAt(0).toUpperCase() + k.slice(1);\n        $(\"#\" + contextNamingConvention + elementName).parent().addClass(\"error\");\n        $(\"#\" + contextNamingConvention + elementName).parent().append(\"<div class=\\\"error-message\\\">\" + responseArray[k] + \"</div>\");\n    }\n}\n\nfunction toggleHistogramType(type, old) {\n    var done = false;\n    old.forEach(function(entry) {\n        if (type == entry) {\n            done = true;\n            old.splice(old.indexOf(entry), 1);\n        }\n    });\n    if (done == false) old.push(type);\n    updateHistogram(JSON.stringify(old));\n}\n\nfunction updateHistogram(selected) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#histogram\").html(data);\n        },\n        url:\"/users/histogram/\" + selected,\n    });\n}\n\nfunction showMessage(success, message, context) {\n    if (typeof context !== \"undefined\") {\n        $(\"#ajax_\" + success, window.parent.document).html(message);\n        var duration = 1000 + (message.length * 40);\n        $(\"#ajax_\" + success + \"_container\", window.parent.document).fadeIn(\"slow\");\n        $(\"#ajax_\" + success + \"_container\", window.parent.document).delay(duration).fadeOut(\"slow\");\n    }\n    $(\"#ajax_\" + success).html(message);\n    var duration = 1000 + (message.length * 40);\n    $(\"#ajax_\" + success + \"_container\").fadeIn(\"slow\");\n    $(\"#ajax_\" + success + \"_container\").delay(duration).fadeOut(\"slow\");\n}\n\nfunction cancelPopoverForm(id) {\n    $(\"#gray_out\").fadeOut();\n    $(\"#popover_form\").fadeOut();\n    $(\"#popover_form_large\").fadeOut();\n    $(\"#screenshot_box\").fadeOut();\n    $(\"#popover_box\").fadeOut();\n    $(\"#confirmation_box\").fadeOut();\n    $('#gray_out').fadeOut();\n    $('#popover_form').fadeOut();\n    if (id !== undefined && id !== '') {\n        $(id).fadeOut();\n    }\n}\n\nfunction activateTagField() {\n    $(\"#addTagButton\").hide();\n    $(\"#addTagField\").show();\n}\n\nfunction tagFieldChange() {\n    if ($(\"#addTagField :selected\").val() > 0) {\n        var selected_id = $(\"#addTagField :selected\").val();\n        var selected_text = $(\"#addTagField :selected\").text();\n        if ($.inArray(selected_id, selectedTags)==-1) {\n            selectedTags.push(selected_id);\n            appendTemplateTag(selected_id);\n        }\n    }\n    $(\"#addTagButton\").show();\n    $(\"#addTagField\").hide();\n}\n\nfunction appendTemplateTag(selected_id) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#tags\").append(data);\n        },\n        url:\"/tags/viewTag/\" + selected_id,\n    });\n    updateSelectedTags();\n}\n\nfunction addAllTags(tagArray) {\n    parsedTagArray = JSON.parse(tagArray);\n    parsedTagArray.forEach(function(tag) {\n        appendTemplateTag(tag);\n    });\n}\n\nfunction removeTemplateTag(id, name) {\n    selectedTags.forEach(function(tag) {\n        if (tag == id) {\n            var index = selectedTags.indexOf(id);\n            if (index > -1) {\n                selectedTags.splice(index, 1);\n                updateSelectedTags();\n            }\n        }\n    });\n    $('#tag_bubble_' + id).remove();\n}\n\nfunction updateSelectedTags() {\n    $('#hiddenTags').attr(\"value\", JSON.stringify(selectedTags));\n}\n\nfunction saveElementSorting(order) {\n    $.ajax({\n        data: order,\n        dataType:\"json\",\n        contentType: \"application/json\",\n        cache: false,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/templates/saveElementSorting/\",\n    });\n}\n\nfunction templateAddElementClicked(id) {\n    simplePopup(\"/template_elements/templateElementAddChoices/\" + id);\n}\n\nfunction templateAddElement(type, id) {\n    simplePopup(\"/template_elements/add/\" + type + \"/\" + id);\n}\n\nfunction templateUpdateAvailableTypes() {\n    $(\"#innerTypes\").empty();\n    var type = $(\"#TemplateElementAttributeType option:selected\").text();\n    var complex = $('#TemplateElementAttributeComplex:checked').val();\n    if (complex && type != 'Select Type') {\n        currentTypes.forEach(function(entry) {\n            $(\"#innerTypes\").append(\"<div class=\\\"templateTypeBox\\\" id=\\\"\" + entry + \"TypeBox\\\">\" + entry + \"</div>\");\n        });\n        $('#outerTypes').show();\n    }\n    else $('#outerTypes').hide();\n}\n\nfunction populateTemplateTypeDropdown() {\n    var cat = $(\"#TemplateElementAttributeCategory option:selected\").text();\n    currentTypes = [];\n    if (cat == 'Select Category') {\n        $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n    } else {\n        var complex = $('#TemplateElementAttributeComplex:checked').val();\n        if (cat in typeGroupCategoryMapping) {\n            $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n            typeGroupCategoryMapping[cat].forEach(function(entry) {\n                $('#TemplateElementAttributeType').append(\"<option>\" + entry + \"</option>\");\n            });\n        } else {\n            complex = false;\n        }\n        if (!complex) {\n            $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n            categoryTypes[cat].forEach(function(entry) {\n                $('#TemplateElementAttributeType').append(\"<option>\" + entry + \"</option>\");\n            });\n        }\n    }\n}\n\nfunction templateElementAttributeTypeChange() {\n    var complex = $('#TemplateElementAttributeComplex:checked').val();\n    var type = $(\"#TemplateElementAttributeType option:selected\").text();\n    currentTypes = [];\n    if (type != 'Select Type') {\n        if (complex) {\n            complexTypes[type][\"types\"].forEach(function(entry) {\n                currentTypes.push(entry);\n            });\n        } else {\n            currentTypes.push(type);\n        }\n    } else {\n        currentTypes = [];\n    }\n    $(\"#typeJSON\").html(JSON.stringify(currentTypes));\n    templateUpdateAvailableTypes();\n}\n\nfunction templateElementAttributeCategoryChange(category) {\n    if (category in typeGroupCategoryMapping) {\n        $('#complexToggle').show();\n    } else {\n        $('#complexToggle').hide();\n    }\n    if (category != 'Select Type') {\n        populateTemplateTypeDropdown();\n    }\n    templateUpdateAvailableTypes();\n}\n\nfunction templateElementFileCategoryChange(category) {\n    if (category == '') {\n        $(\"#TemplateElementFileMalware\")[0].disabled = true;\n        $(\"#TemplateElementFileMalware\")[0].checked = false;\n    } else {\n        if (categoryArray[category].length == 2) {\n            $(\"#TemplateElementFileMalware\")[0].disabled = false;\n            $(\"#TemplateElementFileMalware\")[0].checked = true;\n        } else {\n            $(\"#TemplateElementFileMalware\")[0].disabled = true;\n            if (categoryArray[category] == 'attachment') $(\"#TemplateElementFileMalware\")[0].checked = false;\n            else $(\"#TemplateElementFileMalware\")[0].checked = true;\n        }\n    }\n}\n\nfunction openPopup(id, adjust_layout, callback) {\n    adjust_layout = adjust_layout === undefined ? true : adjust_layout;\n    if (adjust_layout) {\n        var window_height = $(window).height();\n        var popup_height = $(id).height();\n        if (window_height < popup_height) {\n            $(id).css(\"top\", 50);\n            $(id).css(\"height\", window_height);\n            $(id).addClass('vertical-scroll');\n        } else {\n            if (window_height > (300 + popup_height)) {\n                var top_offset = ((window_height - popup_height) / 2) - 150;\n            } else {\n                var top_offset = (window_height - popup_height) / 2;\n            }\n            $(id).css(\"top\", top_offset + 'px');\n        }\n    }\n    $(\"#gray_out\").fadeIn();\n    $(id).fadeIn(400, function() {\n        if (callback !== undefined) {\n            callback();\n        }\n    });\n}\n\nfunction openPopover(clicked, data, hover, placement, callback) {\n    hover = hover === undefined ? false : hover;\n    placement = placement === undefined ? 'right' : placement;\n    /* popup handling */\n    var $clicked = $(clicked);\n    var randomId = $clicked.attr('data-dismissid') !== undefined ? $clicked.attr('data-dismissid') : Math.random().toString(36).substr(2,9); // used to recover the button that triggered the popover (so that we can destroy the popover)\n    var loadingHtml = '<div style=\"height: 75px; width: 75px;\"><div class=\"spinner\"></div><div class=\"loadingText\">Loading</div></div>';\n    $clicked.attr('data-dismissid', randomId);\n    var closeButtonHtml = '<button type=\"button\" class=\"close\" style=\"margin-left: 5px;\" onclick=\"$(&apos;[data-dismissid=&quot;' + randomId + '&quot;]&apos;).popover(\\'hide\\');\">\u00d7</button>';\n\n    if (!$clicked.data('popover')) {\n        $clicked.addClass('have-a-popover');\n        var popoverOptions = {\n            html: true,\n            placement: placement,\n            trigger: 'manual',\n            content: loadingHtml,\n            container: 'body',\n            template: '<div class=\"popover\" role=\"tooltip\" data-dismissid=\"' + randomId + '\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"><div class=\"data-content\"></div></div></div>'\n        };\n        $clicked.popover(popoverOptions)\n        .on('shown.bs.popover', function(event) {\n            var $this = $(this);\n            var title = $this.attr('title');\n            var popover = $('div.popover[data-dismissid=\"' + randomId + '\"]');\n            title = title === \"\" ? $this.attr('data-original-title') : title;\n\n            if (title === \"\") {\n                title = \"&nbsp;\";\n                // adjust popover position (title was empty)\n                var top = popover.offset().top;\n                popover.css('top', (top-17) + 'px');\n            }\n            var popoverTitle = popover.find('h3.popover-title');\n            popoverTitle.html(title + closeButtonHtml);\n            if (callback !== undefined) {\n                callback(popover);\n            }\n        })\n        .on('keydown.volatilePopover', function(e) {\n            if(e.keyCode == 27) { // ESC\n                $(this).popover('destroy');\n                $(this).off('keydown.volatilePopover');\n            }\n        });\n\n        if (hover) {\n            $clicked.on('mouseenter', function() {\n                var _this = this;\n                $clicked.popover('show');\n                $(\".popover\").on(\"mouseleave\", function() { // close popover when leaving it\n                    $(_this).popover('hide');\n                });\n            })\n            .on('mouseleave', function() { // close popover if button not hovered (timeout)\n                var _this = this;\n                setTimeout(function() {\n                    if ($('.popover:hover').length == 0 && !$(_this).is(\":hover\")) {\n                        $(_this).popover('hide');\n                    }\n                },\n                300);\n            });\n        } else {\n            $clicked.popover('show');\n        }\n\n    } else {\n        // $clicked.popover('show');\n    }\n    var popover = $clicked.data('popover');\n\n    if (data === undefined) {\n        return popover\n    } else if (popover.options.content !== data) {\n        popover.options.content =  data;\n        $clicked.popover('show');\n        return popover;\n    }\n}\n\nfunction getMatrixPopup(scope, scope_id, galaxy_id) {\n    cancelPopoverForm();\n    getPopup(scope_id + '/' + galaxy_id + '/' + scope, 'events', 'viewGalaxyMatrix', '', '#popover_matrix');\n}\n\nfunction getPopup(id, context, target, admin, popupType) {\n    $(\"#gray_out\").fadeIn();\n    var url = \"\";\n    if (typeof admin !== 'undefined' && admin != '') url+= \"/admin\";\n    if (context != '') {\n        url += \"/\" + context;\n    }\n    if (target != '') url += \"/\" + target;\n    if (id != '') url += \"/\" + id;\n    if (popupType == '' || typeof popupType == 'undefined') popupType = '#popover_form';\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(popupType).html(data);\n            openPopup(popupType, false);\n        },\n        error:function(xhr) {\n            $(\".loading\").hide();\n            $(\"#gray_out\").fadeOut();\n            if (xhr.status === 403) {\n                showMessage('fail', 'Not allowed.');\n            } else {\n                showMessage('fail', 'Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).');\n            }\n        },\n        url: url\n    });\n}\n\n// Same as getPopup function but create a popover to populate first\nfunction popoverPopup(clicked, id, context, target, admin) {\n    var url = \"\";\n    if (typeof admin !== 'undefined' && admin != '') url+= \"/admin\";\n    if (context != '') {\n        url += \"/\" + context;\n    }\n    if (target != '') url += \"/\" + target;\n    if (id != '') url += \"/\" + id;\n    var popover = openPopover(clicked, undefined);\n    $clicked = $(clicked);\n\n    // actual request //\n    $.ajax({\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            if (popover.options.content !== data) {\n                popover.options.content =  data;\n                $clicked.popover('show');\n            }\n        },\n        error:function(jqXHR, textStatus, errorThrown ) {\n            var errorJSON = '';\n            try {\n                errorJSON = JSON.parse(jqXHR.responseText);\n                errorJSON = errorJSON['errors'];\n                if (errorJSON === undefined) {\n                    errorJSON = '';\n                }\n            } catch (SyntaxError) {\n                // no error provided\n            }\n            var errorText = '<div class=\"alert alert-error\" style=\"margin-bottom: 3px;\">Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).</div>';\n            if (errorJSON !== '') {\n                errorText += '<div class=\"well\"><strong>Returned error:</strong> ' + $('<span/>').text(errorJSON).html() + '</div>';\n            }\n            popover.options.content = errorText;\n            $clicked.popover('show');\n        },\n        url: url\n    });\n}\n\n// create a confirm popover on the clicked html node.\nfunction popoverConfirm(clicked, message, placement) {\n    var $clicked = $(clicked);\n    var popoverContent = '<div>';\n        popoverContent += message === undefined ? '' : '<p>' + message + '</p>';\n        popoverContent += '<button id=\"popoverConfirmOK\" class=\"btn btn-primary\" style=\"margin-right: 5px;\" onclick=submitPopover(this)>Yes</button>';\n        popoverContent += '<button class=\"btn btn-inverse\" style=\"float: right;\" onclick=cancelPrompt()>Cancel</button>';\n    popoverContent += '</div>';\n    openPopover($clicked, popoverContent, undefined, placement);\n    $(\"#popoverConfirmOK\")\n    .focus()\n    .bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            $(this).click();\n        }\n        if(e.keyCode == 27) { // ESC\n            $clicked.popover('destroy');\n        }\n    });\n}\n\nfunction submitPopover(clicked) {\n    var $clicked = $(clicked);\n    var $form = $clicked.closest('form');\n    if ($form.length === 0) { // popover container is body, submit from original node\n        var dismissid = $clicked.closest('div.popover').attr('data-dismissid');\n        $form = $('[data-dismissid=\"' + dismissid + '\"]').closest('form');\n    }\n    if ($form.data('ajax')) {\n        $.ajax({\n            data: $form.serialize(),\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                location.reload();\n            },\n            error:function() {\n                showMessage('fail', 'Could not perform query.');\n            },\n            complete:function() {\n                $(\".loading\").hide();\n                $(\"#popover_form\").fadeOut();\n                $(\"#gray_out\").fadeOut();\n                $('#temp').remove();\n            },\n            type:\"post\",\n            url: $form.attr('action')\n        });\n    } else {\n        $form.submit();\n    }\n}\n\nfunction simplePopup(url) {\n    $(\"#gray_out\").fadeIn();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#popover_form\").html(data);\n            openPopup(\"#popover_form\");\n        },\n        error:function(xhr) {\n            $(\".loading\").hide();\n            $(\"#gray_out\").fadeOut();\n            if (xhr.status == 403) {\n                showMessage('fail', 'Not allowed.');\n            } else if (xhr.status == 404) {\n                showMessage('fail', 'Resource not found.');\n            } else {\n                showMessage('fail', 'Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).');\n            }\n        },\n        url: url,\n    });\n}\n\nfunction choicePopup(legend, list) {\n    var popupHtml = '<div class=\"popover_choice\">';\n    popupHtml += '<legend>Select Object Category</legend>';\n        popupHtml += '<div class=\"popover_choice_main\" id =\"popover_choice_main\">';\n            popupHtml += '<table style=\"width:100%;\" id=\"MainTable\">';\n                popupHtml += '<tbody>';\n                    list.forEach(function(item) {\n                        popupHtml += '<tr style=\"border-bottom:1px solid black;\" class=\"templateChoiceButton\">';\n                            popupHtml += '<td role=\"button\" tabindex=\"0\" aria-label=\"All meta-categories\" title=\"'+item.text+'\" style=\"padding-left:10px;padding-right:10px; text-align:center;width:100%;\" onClick=\"'+item.onclick+';\">'+item.text+'</td>';\n                        popupHtml += '</tr>';\n                    });\n                popupHtml += '</tbody>';\n            popupHtml += '</table>';\n        popupHtml += '</div>';\n        popupHtml += '<div role=\"button\" tabindex=\"0\" aria-label=\"Cancel\" title=\"Cancel\" class=\"templateChoiceButton templateChoiceButtonLast\" onClick=\"cancelPopoverForm();\">Cancel</div>';\n    popupHtml += '</div>';\n\n    $(\"#popover_form\").html(popupHtml);\n    openPopup(\"#popover_form\");\n}\n\nfunction openModal(heading, body, footer, modal_option, css_container, css_body) {\n    var modal_id = 'dynamic_modal_' + new Date().getTime();\n    var modal_html = '<div id=\"' + modal_id + '\" class=\"modal hide fade\" style=\"' + (css_container !== undefined ? css_container : '') + '\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">';\n    if (heading !== undefined && heading !== '') {\n        modal_html += '<div class=\"modal-header\">'\n                        + '<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\u00d7</button>'\n                        + '<h3 id=\"myModalLabel\">' + heading + '</h3>'\n                    + '</div>';\n    }\n    if (body !== undefined && body !== '') {\n        modal_html += '<div class=\"modal-body\" style=\"' + (css_body !== undefined ? css_body : '') + '\">' + body + '</div>';\n    }\n    if (footer !== undefined && footer !== '') {\n        modal_html += '<div class=\"modal-footer\">' + footer + '</div>';\n    }\n    modal_html += '</div>';\n    $('body').append($(modal_html));\n    $('#'+modal_id).modal(modal_option !== undefined ? modal_option : {});\n}\n\nfunction resizePopoverBody() {\n    var bodyheight = $(window).height();\n    bodyheight = 3 * bodyheight / 4 - 150;\n    $(\"#popover_choice_main\").css({\"max-height\": bodyheight});\n}\n\nfunction populateTemplateHiddenFileDiv(files) {\n    $('#TemplateFileArray').val(JSON.stringify(files));\n}\n\nfunction populateTemplateFileBubbles() {\n    var fileObjectArray = JSON.parse($('#TemplateFileArray').val());\n    fileObjectArray.forEach(function(entry) {\n        templateAddFileBubble(entry.element_id, false, entry.filename, entry.tmp_name, 'yes');\n    });\n}\n\nfunction templateFileHiddenAdd(files, element_id, batch) {\n    var fileArray = $.parseJSON($('#TemplateFileArray', window.parent.document).val());\n    var contained = false;\n    for (var j=0; j< files.length; j++) {\n        for (var i=0; i< fileArray.length; i++) {\n            if (fileArray[i].filename == files[j].filename) {\n                contained = true;\n            }\n            if (batch == 'no' && fileArray[i].element_id == element_id) {\n                templateDeleteFileBubble(fileArray[i].filename, fileArray[i].tmp_name, fileArray[i].element_id, 'iframe', batch);\n                contained = false;\n                var removeId = i;\n            }\n        }\n        if (batch == 'no') fileArray.splice(removeId, 1);\n        if (contained == false) {\n            fileArray.push(files[j]);\n            templateAddFileBubble(element_id, true, files[j].filename, files[j].tmp_name, batch);\n            $('#TemplateFileArray', window.parent.document).val(JSON.stringify(fileArray));\n        }\n    }\n}\n\nfunction htmlEncode(value){\n    return $('<div/>').text(value).html();\n}\n\nfunction templateAddFileBubble(element_id, iframe, filename, tmp_name, batch) {\n    filename = htmlEncode(filename);\n    tmp_name = htmlEncode(tmp_name);\n    if (batch == 'no') {\n        if (iframe == true) {\n            $('#filenames_' + element_id, window.parent.document).html('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'no\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        } else {\n            $('#filenames_' + element_id).html('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'no\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        }\n    } else {\n        if (iframe == true) {\n            $('#filenames_' + element_id, window.parent.document).append('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'yes\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        } else {\n            $('#filenames_' + element_id).append('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'yes\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        }\n    }\n}\n\nfunction templateDeleteFileBubble(filename, tmp_name, element_id, context, batch) {\n    $(\".loading\").show();\n    $.ajax({\n        type:\"post\",\n        cache: false,\n        url:\"/templates/deleteTemporaryFile/\" + tmp_name,\n    });\n    var c = this;\n    if (context == 'iframe') {\n        $('#' + tmp_name + '_container', window.parent.document).remove();\n        var oldArray = JSON.parse($('#TemplateFileArray', window.parent.document).val());\n    } else {\n        $('#' + tmp_name + '_container').remove();\n        var oldArray = JSON.parse($('#TemplateFileArray').val());\n    }\n    var newArray = [];\n    oldArray.forEach(function(entry) {\n        if (batch == 'no') {\n            if (entry.element_id != element_id) {\n                newArray.push(entry);\n            }\n        } else {\n            if (entry.tmp_name != tmp_name) {\n                newArray.push(entry);\n            }\n        }\n    });\n    if (batch == 'no') {\n        $('#fileUploadButton_' + element_id, $('#iframe_' + element_id).contents()).html('Upload File');\n    }\n    if (context == 'iframe') {\n        $('#TemplateFileArray', window.parent.document).val(JSON.stringify(newArray));\n    } else {\n        $('#TemplateFileArray').val(JSON.stringify(newArray));\n    }\n    $(\".loading\").hide();\n}\n\nfunction templateFileUploadTriggerBrowse(id) {\n    $('#upload_' + id + '_file').click();\n}\n\nfunction freetextRemoveRow(id, event_id) {\n    $('#row_' + id).hide();\n    $('#Attribute' + id + 'Save').attr(\"value\", \"0\");\n    if ($(\".freetext_row:visible\").length == 0) {\n        window.location = \"/events/\" + event_id;\n    }\n}\n\nfunction indexEvaluateFiltering() {\n    if (filterContext == \"event\") {\n        if (filtering.published != 2) {\n            $('#value_published').html(publishedOptions[filtering.published]);\n        } else {\n            $('#value_published').html(\"\");\n        }\n        if (filtering.hasproposal != 2) {\n            $('#value_hasproposal').html(publishedOptions[filtering.hasproposal]);\n        } else {\n            $('#value_hasproposal').html(\"\");\n        }\n        if (filtering.date.from != null) {\n            var text = \"\";\n            if (filtering.date.from != \"\") text = \"From: \" + $('<span>').text(filtering.date.from).html();\n            if (filtering.date.until != \"\") {\n                if (text != \"\") text += \" \";\n                text += \"Until: \" + $('<span>').text(filtering.date.until).html();\n            }\n        }\n        $('#value_date').html(text);\n        for (var i = 0; i < simpleFilters.length; i++) {\n            indexEvaluateSimpleFiltering(simpleFilters[i]);\n        }\n        indexRuleChange();\n    } else {\n        for (var i = 0; i < differentFilters.length; i++) {\n            if (filtering[differentFilters[i]] != \"\") {\n                var text = \"\";\n                if (filtering[differentFilters[i]] == 1) text = \"Yes\";\n                else if (filtering[differentFilters[i]] == 0) text = \"No\";\n                $('#value_' + differentFilters[i]).text(text);\n            } else {\n                $('#value_' + differentFilters[i]).text(\"\");\n            }\n        }\n        for (var i = 0; i < simpleFilters.length; i++) {\n            indexEvaluateSimpleFiltering(simpleFilters[i]);\n        }\n    }\n    indexSetTableVisibility();\n    indexSetRowVisibility();\n    $('#generatedURLContent').text(indexCreateFilters());\n}\n\nfunction quickFilter(passedArgs, url) {\n    if(!passedArgs){\n        var passedArgs = [];\n    }\n    if( $('#quickFilterField').val().trim().length > 0){\n        passedArgs[\"searchall\"] = encodeURIComponent($('#quickFilterField').val().trim());\n        for (var key in passedArgs) {\n            if (key !== 'page') {\n                url += \"/\" + key + \":\" + passedArgs[key];\n            }\n        }\n    }\n    window.location.href=url;\n}\n\nfunction runIndexFilter(element) {\n    var dataFields = $(element).data();\n    for (var k in $(element).data()) {\n        if (k in passedArgsArray) {\n            delete(passedArgsArray[k]);\n        } else {\n            passedArgsArray[k] = dataFields[k];\n        }\n    }\n    url = here;\n    for (var key in passedArgsArray) {\n        url += \"/\" + key + \":\" + passedArgsArray[key];\n    }\n    window.location.href = url;\n}\n\nfunction runIndexQuickFilter(preserveParams) {\n    if (!passedArgsArray) {\n        var passedArgsArray = [];\n    }\n    var searchKey = 'searchall';\n    if ($('#quickFilterField').data('searchkey')) {\n        searchKey = $('#quickFilterField').data('searchkey');\n    }\n    if ( $('#quickFilterField').val().trim().length > 0){\n        passedArgsArray[searchKey] = encodeURIComponent($('#quickFilterField').val().trim());\n    }\n    url = here;\n    if (typeof preserveParams !== \"undefined\") {\n        url += preserveParams;\n    }\n    for (var key in passedArgsArray) {\n        if (key !== 'page') {\n            url += \"/\" + key + \":\" + passedArgsArray[key];\n        }\n    }\n    window.location.href = url;\n}\n\nfunction executeFilter(passedArgs, url) {\n    for (var key in passedArgs) url += \"/\" + key + \":\" + passedArgs[key];\n    window.location.href=url;\n}\n\nfunction quickFilterTaxonomy(taxonomy_id, passedArgs) {\n    var url = \"/taxonomies/view/\" + taxonomy_id + \"/filter:\" + encodeURIComponent($('#quickFilterField').val());\n    window.location.href=url;\n}\n\nfunction quickFilterRemoteEvents(passedArgs, id) {\n    passedArgs[\"searchall\"] = $('#quickFilterField').val();\n    var url = \"/servers/previewIndex/\" + id;\n    for (var key in passedArgs) {\n        url += \"/\" + key + \":\" + encodeURIComponent(passedArgs[key]);\n    }\n    window.location.href=url;\n}\n\nfunction remoteIndexApplyFilters() {\n    var url = actionUrl + '/' + $(\"#EventFilter\").val();\n    window.location.href = url;\n}\n\nfunction indexApplyFilters() {\n    var url = indexCreateFilters();\n    window.location.href = url;\n}\n\nfunction indexCreateFilters() {\n    text = \"\";\n    if (filterContext == 'event') {\n        if (filtering.published != \"2\") {\n            text += \"searchpublished:\" + filtering.published;\n        }\n        if (filtering.hasproposal != \"2\") {\n            if (text != \"\") text += \"/\";\n            text += \"searchhasproposal:\" + filtering.hasproposal;\n        }\n    } else {\n        for (var i = 0; i < differentFilters.length; i++) {\n            if (filtering[differentFilters[i]]) {\n                if (text != \"\") text += \"/\";\n                text += \"search\" + differentFilters[i] + \":\" + filtering[differentFilters[i]];\n            }\n        }\n    }\n    for (var i = 0; i < simpleFilters.length; i++) {\n        text = indexBuildArray(simpleFilters[i], text);\n    }\n    if (filterContext == 'event') {\n        if (filtering.date.from) {\n            if (text != \"\") text += \"/\";\n            text += \"searchDatefrom:\" + filtering.date.from;\n        }\n        if (filtering.date.until) {\n            if (text != \"\") text += \"/\";\n            text += \"searchDateuntil:\" + filtering.date.until;\n        }\n        return baseurl + '/events/index/' + text;\n    } else {\n        return baseurl + '/admin/users/index/' + text;\n    }\n}\n\nfunction indexBuildArray(type, text) {\n    temp = \"\";\n    if (text != \"\") temp += \"/\";\n    temp += \"search\" + type + \":\";\n    if (filtering[type].NOT.length == 0 && filtering[type].OR.length == 0) return text;\n    var swap = filtering[type].OR.length;\n    var temp_array = filtering[type].OR.concat(filtering[type].NOT);\n    for (var i = 0; i < temp_array.length; i++) {\n        if (i > 0) temp += \"|\";\n        if (i >= swap) temp +=\"!\";\n        temp += temp_array[i];\n    }\n    text += temp;\n    return text;\n}\n\nfunction indexSetRowVisibility() {\n    for (var i = 0; i < allFields.length; i++) {\n        if ($(\"#value_\" + allFields[i]).text().trim() != \"\") {\n            $(\"#row_\" + allFields[i]).show();\n        } else {\n            $(\"#row_\" + allFields[i]).hide();\n        }\n    }\n}\n\nfunction indexEvaluateSimpleFiltering(field) {\n    text = \"\";\n    if (filtering[field].OR.length == 0 && filtering[field].NOT.length == 0) {\n        $('#value_' + field).html(text);\n        return false;\n    }\n    if (filtering[field].OR.length !=0) {\n        for (var i = 0; i < filtering[field].OR.length; i++) {\n            if (i > 0) text += '<span class=\"green bold\"> OR </span>';\n            if (typedFields.indexOf(field) == -1) {\n                text += $('<span>').text(filtering[field].OR[i]).html();\n            } else {\n                for (var j = 0; j < typeArray[field].length; j++) {\n                    if (typeArray[field][j].id == filtering[field].OR[i]) {\n                        text += $('<span>').text(typeArray[field][j].value).html();\n                    }\n                }\n            }\n        }\n    }\n    if (filtering[field].NOT.length !=0) {\n        for (var i = 0; i < filtering[field].NOT.length; i++) {\n            if (i == 0) {\n                if (text != \"\") text += '<span class=\"red bold\"> AND NOT </span>';\n                else text += '<span class=\"red bold\">NOT </span>';\n            } else text += '<span class=\"red bold\"> AND NOT </span>';\n            if (typedFields.indexOf(field) == -1) {\n                text += $('<span>').text(filtering[field].NOT[i]).html();\n            } else {\n                for (var j = 0; j < typeArray[field].length; j++) {\n                    if (typeArray[field][j].id == filtering[field].NOT[i]) {\n                        text += $('<span>').text(typeArray[field][j].value).html();\n                    }\n                }\n            }\n        }\n    }\n    $('#value_' + field).html(text);\n}\n\nfunction indexAddRule(param) {\n    var found = false;\n    if (filterContext == 'event') {\n        if (param.data.param1 == \"date\") {\n            var val1 = encodeURIComponent($('#EventSearch' + param.data.param1 + 'from').val());\n            var val2 = encodeURIComponent($('#EventSearch' + param.data.param1 + 'until').val());\n            if (val1 != \"\") filtering.date.from = val1;\n            if (val2 != \"\") filtering.date.until = val2;\n        } else if (param.data.param1 == \"published\") {\n            var value = encodeURIComponent($('#EventSearchpublished').val());\n            if (value != \"\") filtering.published = value;\n        } else if (param.data.param1 == \"hasproposal\") {\n            var value = encodeURIComponent($('#EventSearchhasproposal').val());\n            if (value != \"\") filtering.hasproposal = value;\n        } else {\n            var value = encodeURIComponent($('#EventSearch' + param.data.param1).val());\n            var operator = operators[encodeURIComponent($('#EventSearchbool').val())];\n            if (value != \"\" && filtering[param.data.param1][operator].indexOf(value) < 0) filtering[param.data.param1][operator].push(value);\n        }\n    } else if (filterContext == 'user') {\n        if (differentFilters.indexOf(param.data.param1) != -1) {\n            var value = encodeURIComponent($('#UserSearch' + param.data.param1).val());\n            if (value != \"\") filtering[param.data.param1] = value;\n        } else {\n            var value = encodeURIComponent($('#UserSearch' + param.data.param1).val());\n            var operator = operators[encodeURIComponent($('#UserSearchbool').val())];\n            if (value != \"\" && filtering[param.data.param1][operator].indexOf(value) < 0) filtering[param.data.param1][operator].push(value);\n        }\n    }\n    indexEvaluateFiltering();\n}\n\nfunction indexSetTableVisibility() {\n    var visible = false;\n    if ($(\"[id^='value_']\").text().trim()!=\"\" && $(\"[id^='value_']\").text().trim()!=\"-1\") {\n        visible = true;\n    }\n    if (visible == true) $('#FilterplaceholderTable').hide();\n    else $('#FilterplaceholderTable').show();\n}\n\nfunction indexRuleChange() {\n    var context = filterContext.charAt(0).toUpperCase() + filterContext.slice(1);\n    $('[id^=' + context + 'Search]').hide();\n    var rule = $('#' + context + 'Rule').val();\n    var fieldName = '#' + context + 'Search' + rule;\n    if (fieldName == '#' + context + 'Searchdate') {\n        $(fieldName + 'from').show();\n        $(fieldName + 'until').show();\n    } else {\n        $(fieldName).show();\n    }\n    if (simpleFilters.indexOf(rule) != -1) {\n        $('#' + context + 'Searchbool').show();\n    } else $('#' + context + 'Searchbool').hide();\n\n    $('#addRuleButton').show();\n    $('#addRuleButton').unbind(\"click\");\n    $('#addRuleButton').click({param1: rule}, indexAddRule);\n}\n\nfunction indexFilterClearRow(field) {\n    $('#value_' + field).html(\"\");\n    $('#row_' + field).hide();\n    if (field == \"date\") {\n        filtering.date.from = \"\";\n        filtering.date.until = \"\";\n    } else if (field == \"published\") {\n        filtering.published = 2;\n    } else if (field == \"hasproposal\") {\n        filtering.hasproposal = 2;\n    } else if (differentFilters.indexOf(field) != -1) {\n        filtering[field] = \"\";\n    } else {\n        filtering[field].NOT = [];\n        filtering[field].OR = [];\n    }\n    indexSetTableVisibility();\n    indexEvaluateFiltering();\n}\n\n\nfunction restrictEventViewPagination() {\n    var showPages = new Array();\n    var start;\n    var end;\n    var i;\n\n    if (page < 6) {\n        start = 1;\n        if (count - page < 6) {\n            end = count;\n        } else {\n            end = page + (9 - (page - start));\n        }\n    } else if (count - page < 6) {\n        end = count;\n        start = count - 10;\n    } else {\n        start = page-5;\n        end = page+5;\n    }\n\n    if (start > 2) {\n        $(\"#apage\" + start).parent().before(\"<li><a href id='aExpandLeft'>...</a></li>\");\n        $(\"#aExpandLeft\").click(function() {expandPagination(0, 0); return false;});\n        $(\"#bpage\" + start).parent().before(\"<li><a href id='bExpandLeft'>...</a></li>\");\n        $(\"#bExpandLeft\").click(function() {expandPagination(1, 0); return false;})\n    }\n\n    if (end < (count - 1)) {\n        $(\"#apage\" + end).parent().after(\"<li><a href id='aExpandRight'>...</a></li>\");\n        $(\"#aExpandRight\").click(function() {expandPagination(0, 1); return false;});\n        $(\"#bpage\" + end).parent().after(\"<li><a href id='bExpandRight'>...</a></li>\");\n        $(\"#bExpandRight\").click(function() {expandPagination(1, 1); return false;})\n    }\n\n    for (i = 1; i < (count+1); i++) {\n        if (i != 1 && i != count && (i < start || i > end)) {\n            $(\"#apage\" + i).hide();\n            $(\"#bpage\" + i).hide();\n        }\n    }\n}\n\nfunction expandPagination(bottom, right) {\n    var i;\n    var prefix = \"a\";\n    if (bottom == 1) prefix = \"b\";\n    var start = 1;\n    var end = page;\n    if (right == 1) {\n        start = page;\n        end = count;\n        $(\"#\" + prefix + \"ExpandRight\").remove();\n    } else $(\"#\" + prefix + \"ExpandLeft\").remove();\n    for (i = start; i < end; i++) {\n        $(\"#\" + prefix + \"page\" + i).show();\n    }\n}\n\nfunction getSubGroupFromSetting(setting) {\n    var temp = setting.split('.');\n    if (temp[0] == \"Plugin\") {\n        temp = temp[1];\n        if (temp.indexOf('_') > -1) {\n            temp = temp.split('_');\n            return temp[0];\n        }\n    }\n    return 'general';\n}\n\nfunction serverSettingsActivateField(setting, id) {\n    resetForms();\n    $('.inline-field-placeholder').hide();\n    var fieldName = \"#setting_\" + getSubGroupFromSetting(setting) + \"_\" + id;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(fieldName + \"_placeholder\").html(data);\n            $(fieldName + \"_solid\").hide();\n            $(fieldName + \"_placeholder\").show();\n            serverSettingsPostActivationScripts(fieldName, setting, id);\n        },\n        url:\"/servers/serverSettingsEdit/\" + setting + \"/\" + id,\n    });\n}\n\nfunction serverSettingsPostActivationScripts(name, setting, id) {\n    $(name + '_field').focus();\n    inputFieldButtonActive(name + '_field');\n\n    $(name + '_form').submit(function(e){\n        e.preventDefault();\n        serverSettingSubmitForm(name, setting, id);\n        return false;\n    });\n\n    $(name + '_form').bind(\"focusout\", function() {\n        inputFieldButtonPassive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"focusin\", function(){\n        inputFieldButtonActive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            serverSettingSubmitForm(name, setting, id);\n        }\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-accept').bind('click', function() {\n        serverSettingSubmitForm(name, setting, id);\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-decline').bind('click', function() {\n        resetForms();\n        $('.inline-field-placeholder').hide();\n    });\n\n    $(name + '_solid').hide();\n}\n\nfunction serverSettingSubmitForm(name, setting, id) {\n    subGroup = getSubGroupFromSetting(setting);\n    var formData = $(name + '_field').closest(\"form\").serialize();\n    $.ajax({\n        data: formData,\n        cache: false,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $.ajax({\n                type:\"get\",\n                url:\"/servers/serverSettingsReloadSetting/\" + setting + \"/\" + id,\n                success:function (data2, textStatus2) {\n                    $('#' + subGroup + \"_\" + id + '_row').replaceWith(data2);\n                    $(\".loading\").hide();\n                },\n                error:function() {\n                    showMessage('fail', 'Could not refresh the table.');\n                }\n            });\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            resetForms();\n            $('.inline-field-placeholder').hide();\n        },\n        type:\"post\",\n        url:\"/servers/serverSettingsEdit/\" + setting + \"/\" + id + \"/\" + 1\n    });\n    $(name + '_field').unbind(\"keyup\");\n    $(name + '_form').unbind(\"focusout\");\n    return false;\n}\n\nfunction updateOrgCreateImageField(string) {\n    string = encodeURIComponent(string);\n    $.ajax({\n        url:'/img/orgs/' + string + '.png',\n        type:'HEAD',\n        error:\n            function(){\n                $('#logoDiv').html('No image uploaded for this identifier');\n            },\n        success:\n            function(){\n                $('#logoDiv').html('<img src=\"/img/orgs/' + string + '.png\" style=\"width:24px;height:24px;\"></img>');\n            }\n    });\n}\n\nfunction generateOrgUUID() {\n    $.ajax({\n        url:'/admin/organisations/generateuuid.json',\n        success:\n            function( data ){\n                $('#OrganisationUuid').val(data.uuid);\n            }\n    });\n}\n\n\nfunction sharingGroupIndexMembersCollapse(id) {\n    $('#' + id + '_down').show();\n    $('#' + id + '_up').hide();\n}\n\nfunction sharingGroupIndexMembersExpand(id) {\n    $('#' + id + '_down').hide();\n    $('#' + id + '_up').show();\n}\n\nfunction popoverStartup() {\n    $('[data-toggle=\"popover\"]').popover({\n        animation: true,\n        html: true,\n    }).click(function(e) {\n        $(e.target).popover('show');\n        $('[data-toggle=\"popover\"]').not(e.target).popover('hide');\n    });\n    $(document).click(function (e) {\n        if (!$('[data-toggle=\"popover\"]').is(e.target)) {\n            $('[data-toggle=\"popover\"]').popover('hide');\n        }\n    });\n}\n\nfunction changeFreetextImportFrom() {\n    $('#changeTo').find('option').remove();\n    options[$('#changeFrom').val()].forEach(function(element) {\n        $('#changeTo').append('<option value=\"' + element + '\">' + element + '</option>');\n    });\n}\n\nfunction changeFreetextImportCommentExecute() {\n    $('.freetextCommentField').val($('#changeComments').val());\n}\n\nfunction changeFreetextImportExecute() {\n    var from = $('#changeFrom').val();\n    var to = $('#changeTo').val();\n    $('.typeToggle').each(function() {\n        if ($( this ).val() == from) {\n            if (selectContainsOption(\"#\" + $(this).attr('id'), to)) $( this ).val(to);\n        }\n    });\n}\n\nfunction selectContainsOption(selectid, value) {\n    var exists = false;\n    $(selectid + ' option').each(function(){\n        if (this.value == value) {\n            exists = true;\n            return false;\n        }\n    });\n    return exists;\n}\n\nfunction exportChoiceSelect(e) {\n    if ($(e.target).is(\"input\")) {\n        return false;\n    }\n    var url = $(e.target).parent().data(\"export-url\");\n    var elementId = $(e.target).parent().data(\"export-key\");\n    var checkbox = $(e.target).parent().data(\"export-checkbox\");\n    if (checkbox == 1) {\n        if ($('#' + elementId + '_toggle').prop('checked')) {\n            url = $('#' + elementId + '_set').html();\n        }\n    }\n    document.location.href = url;\n}\n\nfunction importChoiceSelect(url, elementId, ajax) {\n    if (ajax == 'false') {\n        document.location.href = url;\n    } else {\n        simplePopup(url);\n    }\n}\n\nfunction freetextImportResultsSubmit(id, count) {\n    var attributeArray = [];\n    var temp;\n    for (i = 0; i < count; i++) {\n        if ($('#Attribute' + i + 'Save').val() == 1) {\n            temp = {\n                value:$('#Attribute' + i + 'Value').val(),\n                category:$('#Attribute' + i + 'Category').val(),\n                type:$('#Attribute' + i + 'Type').val(),\n                to_ids:$('#Attribute' + i + 'To_ids')[0].checked,\n                disable_correlation:$('#Attribute' + i + 'Disable_correlation')[0].checked,\n                comment:$('#Attribute' + i + 'Comment').val(),\n                distribution:$('#Attribute' + i + 'Distribution').val(),\n                sharing_group_id:$('#Attribute' + i + 'SharingGroupId').val(),\n                data:$('#Attribute' + i + 'Data').val(),\n                data_is_handled:$('#Attribute' + i + 'DataIsHandled').val(),\n                tags:$('#Attribute' + i + 'Tags').val()\n            }\n            attributeArray[attributeArray.length] = temp;\n        }\n    };\n    $(\"#AttributeJsonObject\").val(JSON.stringify(attributeArray));\n    var formData = $(\".mainForm\").serialize();\n    $.ajax({\n        type: \"post\",\n        cache: false,\n        url: \"/events/saveFreeText/\" + id,\n        data: formData,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            window.location = '/events/view/' + id;\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n    });\n}\n\nfunction moduleResultsSubmit(id) {\n    var typesWithData = ['attachment', 'malware-sample'];\n    var data_collected = {};\n    var temp;\n    if ($('.meta_table').length) {\n        var tags = [];\n        $('.meta_table').find('.tag').each(function() {\n            tags.push({name: $(this).text()});\n        });\n        if (tags.length) {\n            data_collected['Tag'] = tags;\n        }\n    }\n    if ($('.MISPObject').length) {\n        var objects = [];\n        $(\".MISPObject\").each(function(o) {\n            var object_uuid = $(this).find('.ObjectUUID').text();\n            temp = {\n                uuid: object_uuid,\n                import_object: $(this).find('.ImportMISPObject')[0].checked,\n                name: $(this).find('.ObjectName').text(),\n                meta_category: $(this).find('.ObjectMetaCategory').text(),\n                distribution: $(this).find('.ObjectDistribution').val(),\n                sharing_group_id: $(this).find('.ObjectSharingGroup').val(),\n                comment: $(this).find('.ObjectComment').val()\n            }\n            if (!temp['import_object']) {\n                return true;\n            }\n            if (temp['distribution'] != '4') {\n                temp['sharing_group_id'] = '0';\n            }\n            if ($(this).has('.ObjectID').length) {\n                temp['id'] = $(this).find('.ObjectID').text();\n            }\n            if ($(this).has('.ObjectDescription').length) {\n                temp['description'] = $(this).find('.ObjectDescription').text();\n            }\n            if ($(this).has('.TemplateVersion').length) {\n                temp['template_version'] = $(this).find('.TemplateVersion').text();\n            }\n            if ($(this).has('.TemplateUUID').length) {\n                temp['template_uuid'] = $(this).find('.TemplateUUID').text();\n            }\n            if ($(this).has('.ObjectReference').length) {\n                var references = [];\n                $(this).find('.ObjectReference').each(function() {\n                    var reference = {\n                        object_uuid: object_uuid,\n                        referenced_uuid: $(this).find('.ReferencedUUID').text(),\n                        relationship_type: $(this).find('.Relationship').text()\n                    };\n                    references.push(reference);\n                });\n                temp['ObjectReference'] = references;\n            }\n            if ($(this).find('.ObjectAttribute').length) {\n                var object_attributes = [];\n                $(this).find('.ObjectAttribute').each(function(a) {\n                    var attribute_type = $(this).find('.AttributeType').text();\n                    attribute = {\n                        import_attribute: $(this).find('.ImportMISPObjectAttribute')[0].checked,\n                        object_relation: $(this).find('.ObjectRelation').text(),\n                        category: $(this).find('.AttributeCategory').text(),\n                        type: attribute_type,\n                        value: $(this).find('.AttributeValue').text(),\n                        uuid: $(this).find('.AttributeUuid').text(),\n                        to_ids: $(this).find('.AttributeToIds')[0].checked,\n                        disable_correlation: $(this).find('.AttributeDisableCorrelation')[0].checked,\n                        comment: $(this).find('.AttributeComment').val(),\n                        distribution: $(this).find('.AttributeDistribution').val(),\n                        sharing_group_id: $(this).find('.AttributeSharingGroup').val()\n                    }\n                    if (!attribute['import_attribute']) {\n                        return true;\n                    }\n                    if (attribute['distribution'] != '4') {\n                        attribute['sharing_group_id'] = '0';\n                    }\n                    if ($(this).find('.objectAttributeTagContainer').length) {\n                        var tags = [];\n                        $(this).find('.objectAttributeTag').each(function() {\n                            tags.push({name: $(this).attr('title')});\n                        });\n                        attribute['Tag'] = tags;\n                    }\n                    if (typesWithData.indexOf(attribute_type) != -1) {\n                        if ($(this).find('.AttributeData').length) {\n                            attribute['data'] = $(this).find('.AttributeData').val();\n                        }\n                        if ($(this).find('.AttributeEncrypt').length) {\n                            attribute['encrypt'] = $(this).find('.AttributeEncrypt').val();\n                        }\n                    }\n                    object_attributes.push(attribute);\n                });\n                temp['Attribute'] = object_attributes;\n            }\n            objects.push(temp);\n        });\n        data_collected['Object'] = objects;\n    }\n    if ($('.MISPAttribute').length) {\n        var attributes = [];\n        $('.MISPAttribute').each(function(a) {\n            var category_value;\n            var type_value;\n            if ($(this).find('.AttributeCategorySelect').length) {\n                category_value = $(this).find('.AttributeCategorySelect').val();\n            } else {\n                category_value = $(this).find('.AttributeCategory').text();\n            }\n            if ($(this).find('.AttributeTypeSelect').length) {\n                type_value = $(this).find('.AttributeTypeSelect').val();\n            } else {\n                type_value = $(this).find('.AttributeType').text();\n            }\n            temp = {\n                import_attribute: $(this).find('.ImportMISPAttribute')[0].checked,\n                category: category_value,\n                type: type_value,\n                value: $(this).find('.AttributeValue').text(),\n                uuid: $(this).find('.AttributeUuid').text(),\n                to_ids: $(this).find('.AttributeToIds')[0].checked,\n                disable_correlation: $(this).find('.AttributeDisableCorrelation')[0].checked,\n                comment: $(this).find('.AttributeComment').val(),\n                distribution: $(this).find('.AttributeDistribution').val(),\n                sharing_group_id: $(this).find('.AttributeSharingGroup').val()\n            }\n            if (!temp['import_attribute']) {\n                return true;\n            }\n            if (temp['distribution'] != '4') {\n                temp['sharing_group_id'] = '0';\n            }\n            if ($(this).find('.attributeTagContainer').length) {\n                var tags = [];\n                $(this).find('.attributeTag').each(function() {\n                    tags.push({name: $(this).attr('title')});\n                });\n                temp['Tag'] = tags;\n            }\n            if (typesWithData.indexOf(type_value) != -1) {\n                if ($(this).find('.AttributeData').length) {\n                    temp['data'] = $(this).find('.AttributeData').val();\n                }\n                if ($(this).find('.AttributeEncrypt').length) {\n                    temp['encrypt'] = $(this).find('.AttributeEncrypt').val();\n                }\n            }\n            attributes.push(temp);\n        });\n        data_collected['Attribute'] = attributes;\n    }\n    $(\"#EventJsonObject\").val(JSON.stringify(data_collected));\n    var formData = $('.mainForm').serialize();\n    $.ajax({\n        type: \"post\",\n        cache: false,\n        url: \"/events/handleModuleResults/\" + id,\n        data: formData,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            window.location = '/events/view/' + id;\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        }\n    });\n}\n\nfunction objectTemplateViewContent(context, id) {\n    var url = \"/objectTemplateElements/viewElements/\" + id + \"/\" + context;\n    $.ajax({\n            url: url,\n            type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n            error: function(){\n                $('#ajaxContent').html('An error has occured, please reload the page.');\n            },\n            success: function(response){\n                $('#ajaxContent').html(response);\n            },\n        complete: function() {\n            $(\".loading\").hide();\n        },\n    });\n\n}\n\nfunction organisationViewContent(context, id) {\n    organisationViewButtonHighlight(context);\n    var action = \"/organisations/landingpage/\";\n    if (context == 'members') {\n        action = \"/admin/users/index/searchorg:\";\n    }\n    if (context == 'events') {\n        action = \"/events/index/searchorg:\";\n    }\n    $.ajax({\n        url: action + id,\n        type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        error: function(){\n            $('#ajaxContent').html('An error has occured, please reload the page.');\n        },\n        success: function(response){\n            $('#ajaxContent').html(response);\n        },\n        complete: function() {\n            $(\".loading\").hide();\n        },\n    });\n}\n\nfunction organisationViewButtonHighlight(context) {\n    $(\".orgViewButtonActive\").hide();\n    $(\".orgViewButton\").show();\n    $(\"#button_\" + context).hide();\n    $(\"#button_\" + context + \"_active\").show();\n}\n\nfunction simpleTabPage(page) {\n    $(\".progress_tab\").removeClass(\"btn-primary\").addClass(\"btn-inverse\");\n    $(\"#page\" + page + \"_tab\").removeClass(\"btn-inverse\").addClass(\"btn-primary\");\n    $(\".tabContent\").hide();\n    $(\"#page\" + page + \"_content\").show();\n    if (page == lastPage) simpleTabPageLast();\n}\n\nfunction simpleTabPageLast() {\n    var summaryorgs = summaryextendorgs = remotesummaryorgs = remotesummaryextendorgs = summaryservers = \"\";\n    var orgcounter = extendcounter = remoteorgcounter = remoteextendcounter = servercounter = 0;\n    var sgname = \"[Sharing group name not set!]\";\n    if ($('#SharingGroupName').val()) sgname = $('#SharingGroupName').val();\n    var sgreleasability = \"[Sharing group releasability not set!]\";\n    if ($('#SharingGroupReleasability').val()) sgreleasability = $('#SharingGroupReleasability').val();\n    $('#summarytitle').text(sgname);\n    $('#summaryreleasable').text(sgreleasability);\n    organisations.forEach(function(organisation){\n        if (organisation.type == 'local') {\n            if (orgcounter > 0) summaryorgs += \", \";\n            summaryorgs += organisation.name;\n            if (organisation.extend == true) {\n                if (extendcounter > 0) summaryextendorgs += \", \"\n                summaryextendorgs += organisation.name;\n                extendcounter++;\n            }\n            orgcounter++;\n        } else {\n            if (remoteorgcounter > 0) remotesummaryorgs += \", \";\n            remotesummaryorgs += organisation.name;\n            if (organisation.extend == true) {\n                if (remoteextendcounter > 0) remotesummaryextendorgs += \", \"\n                remotesummaryextendorgs += organisation.name;\n                remoteextendcounter++;\n            }\n            remoteorgcounter++;\n        }\n    });\n    if (orgcounter == 0) $('#localText').hide();\n    if (remoteorgcounter == 0) $('#externalText').hide();\n    if (extendcounter == 0) summaryextendorgs = \"nobody\";\n    if (remoteextendcounter == 0) remotesummaryextendorgs = \"nobody\";\n    servers.forEach(function(server){\n        if (servercounter > 0) summaryservers += \", \";\n        if (server.id != 0) {\n            summaryservers += server.name;\n            if (extendcounter == 0) summaryextendorgs = \"none\";\n            servercounter++;\n        }\n        if (server.id == 0 && server.all_orgs == true) summaryorgs = \"all organisations on this instance\";\n    });\n    if ($('#SharingGroupRoaming').is(\":checked\")) {\n        summaryservers = \"any interconnected instances linked by an eligible organisation.\";\n    } else {\n        if (servercounter == 0) {\n            summaryservers = \"data marked with this sharing group will not be pushed.\";\n        }\n    }\n    $('#summarylocal').text(summaryorgs);\n    $('#summarylocalextend').text(summaryextendorgs);\n    $('#summaryexternal').text(remotesummaryorgs);\n    $('#summaryexternalextend').text(remotesummaryextendorgs);\n    $('#summaryservers').text(summaryservers);\n}\n\nfunction sharingGroupPopulateOrganisations() {\n    $('input[id=SharingGroupOrganisations]').val(JSON.stringify(organisations));\n    $('.orgRow').remove();\n    var id = 0;\n    var html = '';\n    organisations.forEach(function(org) {\n        html = '<tr id=\"orgRow' + id + '\" class=\"orgRow\">';\n        html += '<td class=\"short\">' + org.type + '&nbsp;</td>';\n        html += '<td>' + $('<div>').text(org.name).html() + '&nbsp;</td>';\n        html += '<td>' + org.uuid + '&nbsp;</td>';\n        html += '<td class=\"short\" style=\"text-align:center;\">';\n        if (org.removable == 1) {\n            html += '<input id=\"orgExtend' + id + '\" type=\"checkbox\" onClick=\"sharingGroupExtendOrg(' + id + ')\" ';\n            if (org.extend) html+= 'checked';\n            html += '>';\n        } else {\n            html += '<span class=\"icon-ok\"></span>'\n        }\n        html +='</td>';\n        html += '<td class=\"actions short\">';\n        if (org.removable == 1) html += '<span class=\"icon-trash\" onClick=\"sharingGroupRemoveOrganisation(' + id + ')\"></span>';\n        html += '&nbsp;</td></tr>';\n        $('#organisations_table tr:last').after(html);\n        id++;\n    });\n}\n\nfunction sharingGroupPopulateServers() {\n    $('input[id=SharingGroupServers]').val(JSON.stringify(servers));\n    $('.serverRow').remove();\n    var id = 0;\n    var html = '';\n    servers.forEach(function(server) {\n        html = '<tr id=\"serverRow' + id + '\" class=\"serverRow\">';\n        html += '<td>' + server.name + '&nbsp;</td>';\n        html += '<td>' + server.url + '&nbsp;</td>';\n        html += '<td>';\n        html += '<input id=\"serverAddOrgs' + id + '\" type=\"checkbox\" onClick=\"sharingGroupServerAddOrgs(' + id + ')\" ';\n        if (server.all_orgs) html += 'checked';\n        html += '>';\n        html +='</td>';\n        html += '<td class=\"actions short\">';\n        if (server.removable == 1) html += '<span class=\"icon-trash\" onClick=\"sharingGroupRemoveServer(' + id + ')\"></span>';\n        html += '&nbsp;</td></tr>';\n        $('#servers_table tr:last').after(html);\n        id++;\n    });\n}\n\nfunction sharingGroupExtendOrg(id) {\n    organisations[id].extend = $('#orgExtend' + id).is(\":checked\");\n}\n\nfunction sharingGroupServerAddOrgs(id) {\n    servers[id].all_orgs = $('#serverAddOrgs' + id).is(\":checked\");\n}\n\nfunction sharingGroupPopulateUsers() {\n    $('input[id=SharingGroupServers]').val(JSON.stringify(organisations));\n}\n\nfunction sharingGroupAdd(context, type) {\n    if (context == 'organisation') {\n        var jsonids = JSON.stringify(orgids);\n        url = '/organisations/fetchOrgsForSG/' + jsonids + '/' + type\n    } else if (context == 'server') {\n        var jsonids = JSON.stringify(serverids);\n        url = '/servers/fetchServersForSG/' + jsonids\n    }\n    $(\"#gray_out\").fadeIn();\n    simplePopup(url);\n}\n\nfunction sharingGroupRemoveOrganisation(id) {\n    organisations.splice(id, 1);\n    orgids.splice(id, 1);\n    sharingGroupPopulateOrganisations();\n}\n\nfunction sharingGroupRemoveServer(id) {\n    servers.splice(id, 1);\n    serverids.splice(id, 1);\n    sharingGroupPopulateServers();\n}\n\nfunction submitPicklistValues(context, local) {\n    if (context == 'org') {\n        var localType = 'local';\n        if (local == 0) localType = 'remote';\n        $(\"#rightValues  option\").each(function() {\n            if (orgids.indexOf($(this).val()) == -1) {\n                organisations.push({\n                        id: $(this).val(),\n                        type: localType,\n                        name: $(this).text(),\n                        extend: false,\n                        uuid: '',\n                        removable: 1\n                });\n            }\n            orgids.push($(this).val());\n            sharingGroupPopulateOrganisations();\n        });\n    } else if (context == 'server') {\n        $(\"#rightValues  option\").each(function() {\n            if (serverids.indexOf($(this).val()) == -1) {\n                servers.push({\n                        id: $(this).val(),\n                        name: $(this).text(),\n                        url: $(this).attr(\"data-url\"),\n                        all_orgs: false,\n                        removable: 1\n                });\n            }\n            serverids.push($(this).val());\n            sharingGroupPopulateServers();\n        });\n    }\n    $(\"#gray_out\").fadeOut();\n    $(\"#popover_form\").fadeOut();\n}\n\nfunction cancelPicklistValues() {\n    $(\"#popover_form\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n}\n\nfunction sgSubmitForm(action) {\n    var ajax = {\n            'organisations': organisations,\n            'servers': servers,\n            'sharingGroup': {\n                'name': $('#SharingGroupName').val(),\n                'releasability': $('#SharingGroupReleasability').val(),\n                'description': $('#SharingGroupDescription').val(),\n                'active': $('#SharingGroupActive').is(\":checked\"),\n                'roaming': $('#SharingGroupRoaming').is(\":checked\"),\n            }\n    };\n    $('#SharingGroupJson').val(JSON.stringify(ajax));\n    var formName = \"#SharingGroup\" + action + \"Form\";\n    $(formName).submit();\n}\n\nfunction serverSubmitForm(action) {\n    var ajax = {};\n    switch ($('#ServerOrganisationType').val()) {\n    case '0':\n        ajax = {\n            'id': $('#ServerLocal').val()\n        };\n        break;\n    case '1':\n        ajax = {\n            'id': $('#ServerExternal').val()\n        };\n        break;\n    case '2':\n        ajax = {\n            'name': $('#ServerExternalName').val(),\n            'uuid': $('#ServerExternalUuid').val()\n        };\n        break;\n    }\n\n    $('#ServerJson').val(JSON.stringify(ajax));\n    var formName = \"#Server\" + action + \"Form\";\n    $(formName).submit();\n}\n\nfunction serverOrgTypeChange() {\n    $(\".hiddenField\").hide();\n    switch ($('#ServerOrganisationType').val()) {\n        case '0':\n            $(\"#ServerLocalContainer\").show();\n            break;\n        case '1':\n            $(\"#ServerExternalContainer\").show();\n            break;\n        case '2':\n            $(\"#ServerExternalUuidContainer\").show();\n            $(\"#ServerExternalNameContainer\").show();\n            break;\n    }\n}\n\nfunction sharingGroupPopulateFromJson() {\n    var jsonparsed = JSON.parse($('#SharingGroupJson').val());\n    organisations = jsonparsed.organisations;\n    servers = jsonparsed.servers;\n    if (jsonparsed.sharingGroup.active == 1) {\n        $(\"#SharingGroupActive\").prop(\"checked\", true);\n    }\n    if (jsonparsed.sharingGroup.roaming == 1) {\n        $(\"#SharingGroupRoaming\").prop(\"checked\", true);\n        $('#serverList').show();\n    }\n    $('#SharingGroupName').attr('value', jsonparsed.sharingGroup.name);\n    $('#SharingGroupReleasability').attr('value', jsonparsed.sharingGroup.releasability);\n    $('#SharingGroupDescription').text(jsonparsed.sharingGroup.description);\n}\n\nfunction runOnDemandAction(element, url, target, postFormField) {\n    var elementContainer = '#' + target;\n    var type = 'GET';\n    var data = '';\n    if (postFormField !== '') {\n        type = 'POST';\n        data = $('#' + postFormField).val();\n        data = {value: data}\n    }\n    $.ajax({\n        url: url,\n        type: type,\n        data: data,\n        beforeSend: function (XMLHttpRequest) {\n            $(elementContainer).html('Running...');\n        },\n        error: function(response) {\n            var result = JSON.parse(response.responseText);\n            $(elementContainer).empty();\n            $(elementContainer)\n            .append(\n                $('<div>')\n                .attr('class', 'bold red')\n                .text('Error ' + response.status + ':')\n            )\n            .append(\n                $('<div>')\n                .attr('class', 'bold')\n                .text(result.errors)\n            );\n        },\n        success: function(response) {\n            var result = JSON.parse(response);\n            $(elementContainer).empty();\n            for (var key in result) {\n                $(elementContainer).append(\n                    $('<div>')\n                    .append(\n                        $('<span>')\n                        .attr('class', 'bold')\n                        .text(key + ': ')\n                    ).append(\n                        $('<span>')\n                        .attr('class', 'bold blue')\n                        .text(result[key])\n                    )\n                );\n            }\n        }\n    })\n}\n\nfunction getRemoteSyncUser(id) {\n    var resultContainer = $(\"#sync_user_test_\" + id);\n    $.ajax({\n        url: '/servers/getRemoteUser/' + id,\n        type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            resultContainer.html('Running test...');\n        },\n        error: function(){\n            resultContainer.html('Internal error.');\n        },\n        success: function(response) {\n            if (typeof(response.message) != 'undefined') {\n                resultContainer.empty();\n                resultContainer.append(\n                    $('<span>')\n                    .attr('class', 'red bold')\n                    .text('Error')\n                ).append(\n                    $('<span>')\n                    .text(': #' + response.message)\n                );\n            } else {\n                resultContainer.empty();\n                Object.keys(response).forEach(function(key) {\n                    var value = response[key];\n                    resultContainer.append(\n                        $('<span>')\n                        .attr('class', 'blue bold')\n                        .text(key)\n                    ).append(\n                        $('<span>')\n                        .text(': ' + value)\n                    ).append(\n                        $('<br>')\n                    );\n                });\n            }\n            var result = response;\n        }\n    });\n}\n\nfunction testConnection(id) {\n    $.ajax({\n        url: '/servers/testConnection/' + id,\n        type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\"#connection_test_\" + id).html('Running test...');\n        },\n        error: function(){\n            $(\"#connection_test_\" + id).html('Internal error.');\n        },\n        success: function(response){\n            var result = response;\n            switch (result.status) {\n            case 1:\n                status_message = \"OK\";\n                compatibility = \"Compatible\";\n                compatibility_colour = \"green\";\n                colours = {'local': 'class=\"green\"', 'remote': 'class=\"green\"', 'status': 'class=\"green\"'};\n                issue_colour = \"red\";\n                if (result.mismatch == \"hotfix\") issue_colour = \"orange\";\n                if (result.newer == \"local\") {\n                    colours.remote = 'class=\"' + issue_colour + '\"';\n                    if (result.mismatch == \"minor\") {\n                        compatibility = \"Pull only\";\n                        compatibility_colour = \"orange\";\n                    } else if (result.mismatch == \"major\") {\n                        compatibility = \"Incompatible\";\n                        compatibility_colour = \"red\";\n                    }\n                } else if (result.newer == \"remote\") {\n                    colours.local = 'class=\"' + issue_colour + '\"';\n                    if (result.mismatch != \"hotfix\") {\n                        compatibility = \"Incompatible\";\n                        compatibility_colour = \"red\";\n                    }\n                } else if (result.mismatch == \"proposal\") {\n                    compatibility_colour = \"orange\";\n                    compatibility = \"Proposal pull disabled (remote version < v2.4.111)\";\n                }\n                if (result.mismatch != false && result.mismatch != \"proposal\") {\n                    if (result.newer == \"remote\") status_message = \"Local instance outdated, update!\";\n                    else status_message = \"Remote outdated, notify admin!\"\n                    colours.status = 'class=\"' + issue_colour + '\"';\n                }\n                if (result.post != false) {\n                    var post_colour = \"red\";\n                    if (result.post == 1) {\n                        post_colour = \"green\";\n                        post_result = \"Received sent package\";\n                    } else if (result.post == 8) {\n                        post_result = \"Could not POST message\";\n                    } else if (result.post == 9) {\n                        post_result = \"Invalid body\";\n                    } else if (result.post == 10) {\n                        post_result = \"Invalid headers\";\n                    } else {\n                        post_colour = \"orange\";\n                        post_result = \"Remote too old for this test\";\n                    }\n                }\n                resultDiv = '<div>Local version: <span ' + colours.local + '>' + result.local_version + '</span><br />';\n                resultDiv += '<div>Remote version: <span ' + colours.remote + '>' + result.version + '</span><br />';\n                resultDiv += '<div>Status: <span ' + colours.status + '>' + status_message + '</span><br />';\n                resultDiv += '<div>Compatiblity: <span class=\"' + compatibility_colour + '\">' + compatibility + '</span><br />';\n                resultDiv += '<div>POST test: <span class=\"' + post_colour + '\">' + post_result + '</span><br />';\n                $(\"#connection_test_\" + id).html(resultDiv);\n                //$(\"#connection_test_\" + id).html('<span class=\"green bold\" title=\"Connection established, correct response received.\">OK</span>');\n                break;\n            case 2:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"There seems to be a connection issue. Make sure that the entered URL is correct and that the certificates are in order.\">Server unreachable</span>');\n                break;\n            case 3:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"The server returned an unexpected result. Make sure that the provided URL (or certificate if it applies) are correct.\">Unexpected error</span>');\n                break;\n            case 4:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed due to incorrect authentication key or insufficient privileges on the remote instance.\">Authentication failed</span>');\n                break;\n            case 5:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed because the sync user is expected to change passwords. Log into the remote MISP to rectify this.\">Password change required</span>');\n                break;\n            case 6:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed because the sync user on the remote has not accepted the terms of use. Log into the remote MISP to rectify this.\">Terms not accepted</span>');\n                break;\n            case 7:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"The user account on the remote instance is not a sync user.\">Remote user not a sync user</span>');\n                break;\n            case 8:\n                $(\"#connection_test_\" + id).html('<span class=\"orange bold\" title=\"The user account on the remote instance is only a sightings user.\">Syncing sightings only</span>');\n                break;\n            }\n        }\n    })\n}\n\nfunction getTextColour(hex) {\n    hex = hex.slice(1);\n    var r = parseInt(hex.substring(0,2), 16);\n    var g = parseInt(hex.substring(2,4), 16);\n    var b = parseInt(hex.substring(4,6), 16);\n    var avg = ((2 * r) + b + (3 * g))/6;\n    if (avg < 128) {\n        return 'white';\n    } else {\n        return 'black';\n    }\n}\n\nfunction gpgSelect(fingerprint) {\n    $(\"#popover_form\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n    $.ajax({\n        type: \"get\",\n        url: \"/users/fetchGpgKey/\" + fingerprint,\n        beforeSend: function () {\n            $(\".loading\").show();\n        },\n        success: function (data) {\n            $(\"#UserGpgkey\").val(data);\n            showMessage('success', \"Key found!\");\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        },\n        complete: function () {\n            $(\".loading\").hide();\n        },\n    });\n}\n\nfunction lookupPGPKey(emailFieldName) {\n    var email = $('#' + emailFieldName).val();\n    simplePopup(\"/users/searchGpgKey/\" + email);\n}\n\nfunction zeroMQServerAction(action) {\n    $.ajax({\n        type: \"get\",\n        url: \"/servers/\" + action + \"ZeroMQServer/\",\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success: function (data) {\n            $(\".loading\").hide();\n            if (action !== 'status') {\n                window.location.reload();\n            } else {\n                $(\"#confirmation_box\").html(data);\n                openPopup(\"#confirmation_box\");\n            }\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        }\n    });\n}\n\nfunction convertServerFilterRules(rules) {\n    validOptions.forEach(function (type) {\n        container = \"#\"+ modelContext + type.ucfirst() + \"Rules\";\n        if ($(container).val() != '' && $(container).val() != '[]') {\n            rules[type] = JSON.parse($(container).val());\n        } else {\n            if (type === 'pull') {\n                rules[type] = {\"tags\": {\"OR\": [], \"NOT\": []}, \"orgs\": {\"OR\": [], \"NOT\": []}, \"url_params\": \"\"}\n            } else {\n                rules[type] = {\"tags\": {\"OR\": [], \"NOT\": []}, \"orgs\": {\"OR\": [], \"NOT\": []}}\n            }\n        };\n    });\n    serverRuleUpdate();\n    return rules;\n}\n\nfunction serverRuleUpdate() {\n    var statusOptions = [\"OR\", \"NOT\"];\n    validOptions.forEach(function(type) {\n        validFields.forEach(function(field) {\n            if (type === 'push') {\n                var indexedList = {};\n                window[field].forEach(function(item) {\n                    indexedList[item.id] = item.name;\n                });\n            }\n            statusOptions.forEach(function(status) {\n                if (rules[type][field][status].length > 0) {\n                    $('#' + type + '_' + field + '_' + status).show();\n                    var t = '';\n                    rules[type][field][status].forEach(function(item) {\n                        if (t.length > 0) t += ', ';\n                        if (type === 'pull') t += item;\n                        else t += indexedList[item];\n                    });\n                    $('#' + type + '_' + field + '_' + status + '_text').text(t);\n                } else {\n                    $('#' + type + '_' + field + '_' + status).hide();\n                }\n            });\n        });\n        if (type === 'pull') {\n            if (rules[type]['url_params']) {\n                $(\"#pull_url_params\").show();\n                $(\"#pull_url_params_text\").text(rules[type]['url_params']);\n            } else {\n                $(\"#pull_url_params\").hide();\n            }\n        }\n    });\n    serverRuleGenerateJSON();\n}\n\nfunction serverRuleFormActivate(type) {\n    if (type != 'pull' && type != 'push') return false;\n    $('.server_rule_popover').hide();\n    $('#gray_out').fadeIn();\n    $('#server_' + type + '_rule_popover').show();\n}\n\nfunction serverRuleCancel() {\n    $(\"#gray_out\").fadeOut();\n    $(\".server_rule_popover\").fadeOut();\n}\n\nfunction serverRuleGenerateJSON() {\n    validOptions.forEach(function(type) {\n        if ($('#Server' + type.ucfirst() + \"Rules\").length) {\n            $('#Server' + type.ucfirst() + \"Rules\").val(JSON.stringify(rules[type]));\n        } else {\n            $('#Feed' + type.ucfirst() + \"Rules\").val(JSON.stringify(rules[type]));\n        }\n    });\n}\n\nfunction serverRulePopulateTagPicklist() {\n    var fields = [\"tags\", \"orgs\"];\n    var target = \"\";\n    fields.forEach(function(field) {\n        target = \"\";\n        window[field].forEach(function(element) {\n            if ($.inArray(element.id, rules[\"push\"][field][\"OR\"]) != -1) target = \"#\" + field + \"pushLeftValues\";\n            else if ($.inArray(element.id, rules[\"push\"][field][\"NOT\"]) != -1) target = \"#\" + field + \"pushRightValues\";\n            else target = \"#\" + field + \"pushMiddleValues\";\n            $(target).append($('<option/>', {\n                value: element.id,\n                text : element.name\n            }));\n        });\n        target = \"#\" + field + \"pullLeftValues\";\n        rules[\"pull\"][field][\"OR\"].forEach(function(t) {\n            $(target).append($('<option/>', {\n                value: t,\n                text : t\n            }));\n        });\n        target = \"#\" + field + \"pullRightValues\";\n        rules[\"pull\"][field][\"NOT\"].forEach(function(t) {\n            $(target).append($('<option/>', {\n                value: t,\n                text : t\n            }));\n        });\n    });\n    $('#urlParams').val(rules[\"pull\"][\"url_params\"]);\n}\n\nfunction submitServerRulePopulateTagPicklistValues(context) {\n    validFields.forEach(function(field) {\n        rules[context][field][\"OR\"] = [];\n        $(\"#\" + field + context + \"LeftValues option\").each(function() {\n            rules[context][field][\"OR\"].push($(this).val());\n        });\n        rules[context][field][\"NOT\"] = [];\n        $(\"#\" + field + context + \"RightValues option\").each(function() {\n            rules[context][field][\"NOT\"].push($(this).val());\n        });\n    });\n    if (context === 'pull') {\n        rules[context][\"url_params\"] = $('#urlParams').val();\n    }\n    $('#server_' + context + '_rule_popover').fadeOut();\n    $('#gray_out').fadeOut();\n    serverRuleUpdate();\n}\n\n// type = pull/push, field = tags/orgs, from = Left/Middle/Right, to = Left/Middle/Right\nfunction serverRuleMoveFilter(type, field, from, to) {\n    var opposites = {\"Left\": \"Right\", \"Right\": \"Left\"};\n    // first fetch the value\n    var value = \"\";\n    if (type == \"pull\" && from == \"Middle\") {\n        var doInsert = true;\n        value = $(\"#\" + field + type + \"NewValue\").val();\n        if (value.length !== 0 && value.trim()) {\n            $(\"#\" + field + type + to + \"Values\" + \" option\").each(function() {\n                if (value == $(this).val()) doInsert = false;\n            });\n            $(\"#\" + field + type + opposites[to] + \"Values\" + \" option\").each(function() {\n                if (value == $(this).val()) $(this).remove();\n            });\n            if (doInsert) {\n                $(\"#\" + field + type + to + \"Values\").append($('<option/>', {\n                    value: value,\n                    text : value\n                }));\n            }\n        }\n        $(\"#\" + field + type + \"NewValue\").val('');\n    } else {\n        $(\"#\" + field + type + from + \"Values option:selected\").each(function () {\n            if (type != \"pull\" || to != \"Middle\") {\n                value = $(this).val();\n                text = $(this).text();\n                $(\"#\" + field + type + to + \"Values\").append($('<option/>', {\n                    value: value,\n                    text : text\n                }));\n            }\n            $(this).remove();\n        });\n    }\n}\n\nfunction syncUserSelected() {\n    if ($('#UserRoleId :selected').val() in syncRoles) {\n        $('#syncServers').show();\n    } else {\n        $('#syncServers').hide();\n    }\n}\n\nfunction filterAttributes(filter, id) {\n    url = \"/events/viewEventAttributes/\" + id;\n    if(filter === 'value'){\n        filter = encodeURIComponent($('#quickFilterField').val().trim());\n        url += filter.length > 0 ? \"/searchFor:\" + filter : \"\";\n    } else if(filter !== 'all') {\n        url += \"/attributeFilter:\" + filter\n        filter = encodeURIComponent($('#quickFilterField').val().trim());\n        url += filter.length > 0 ? \"/searchFor:\" + filter : \"\";\n    }\n    if (deleted) url += '/deleted:true';\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction pivotObjectReferences(url, uuid) {\n    url += '/focus:' + uuid;\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction toggleBoolFilter(url, param) {\n    if (querybuilderTool === undefined) {\n        triggerEventFilteringTool(true); // allows to fetch rules\n    }\n    var rules = querybuilderTool.getRules({ skip_empty: true, allow_invalid: true });\n    var res = cleanRules(rules);\n    Object.keys(res).forEach(function(k) {\n        if (url.indexOf(k) > -1) { // delete url rule (will be replaced by query builder value later on)\n            var replace = '\\/' + k + \".+/?\";\n            var re = new RegExp(replace,\"i\");\n            url = url.replace(re, '');\n        }\n    });\n    if (res[param] !== undefined) {\n        if (param == 'deleted') {\n            res[param] = res[param] == 0 ? 2 : 0;\n        } else {\n            res[param] = res[param] == 0 ? 1 : 0;\n        }\n    } else {\n        if (param == 'deleted') {\n            res[param] = 0;\n        } else {\n            res[param] = 1;\n        }\n    }\n\n    url += buildFilterURL(res);\n    url = url.replace(/view\\//i, 'viewEventAttributes/');\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            querybuilderTool = undefined;\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction mergeOrganisationUpdate() {\n    var orgTypeOptions = ['local', 'external'];\n    var orgTypeSelects = ['OrganisationOrgsLocal', 'OrganisationOrgsExternal'];\n    var orgTypeId = $('#OrganisationTargetType').val();\n    var orgType = orgTypeSelects[orgTypeId];\n    var orgID = $('#' + orgTypeSelects[orgTypeId]).val();\n    console.log(orgTypeSelects[orgTypeId]);\n    console.log(orgID);\n    org = orgArray[orgTypeOptions[orgTypeId]][orgID]['Organisation'];\n    console.log(org);\n    $('#org_id').text(org['id']);\n    $('#org_name').text(org['name']);\n    $('#org_uuid').text(org['uuid']);\n    $('#org_local').text(orgTypeOptions[$('#OrganisationTargetType').val()]);\n}\n\nfunction mergeOrganisationTypeToggle() {\n    if ($('#OrganisationTargetType').val() == 0) {\n        $('#orgsLocal').show();\n        $('#orgsExternal').hide();\n    } else {\n        $('#orgsLocal').hide();\n        $('#orgsExternal').show();\n    }\n}\n\nfunction feedDistributionChange() {\n    if ($('#FeedDistribution').val() == 4) $('#SGContainer').show();\n    else $('#SGContainer').hide();\n}\n\nfunction checkUserPasswordEnabled() {\n    if ($('#UserEnablePassword').is(':checked')) {\n        $('#PasswordDiv').show();\n    } else {\n        $('#PasswordDiv').hide();\n    }\n}\n\nfunction checkUserExternalAuth() {\n    if ($('#UserExternalAuthRequired').is(':checked')) {\n        $('#externalAuthDiv').show();\n        $('#passwordDivDiv').hide();\n    } else {\n        $('#externalAuthDiv').hide();\n        $('#passwordDivDiv').show();\n    }\n}\n\nfunction toggleSettingSubGroup(group) {\n    $('.subGroup_' + group).toggle();\n}\n\nfunction runHoverLookup(type, id) {\n    $.ajax({\n        success:function (html) {\n            ajaxResults[\"hover\"][type + \"_\" + id] = html;\n            var element = $('#' + type + '_' + id + '_container');\n            element.popover({\n                title: attributeHoverTitle(id, type),\n                content: html,\n                placement: attributeHoverPlacement(element),\n                html: true,\n                trigger: 'manual',\n                container: 'body'\n            }).popover('show');\n            $('#' + currentPopover).popover('destroy');\n            currentPopover = type + '_' + id + '_container'\n        },\n        cache: false,\n        url:\"/attributes/hoverEnrichment/\" + id,\n    });\n}\n\n$(\".cortex-json\").click(function() {\n    var cortex_data = $(this).data('cortex-json');\n    cortex_data = htmlEncode(JSON.stringify(cortex_data, null, 2));\n    var popupHtml = '<pre class=\"simplepre\">' + cortex_data + '</pre>';\n    popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n\n});\n\n// add the same as below for click popup\n$(document).on( \"click\", \".eventViewAttributePopup\", function() {\n    $('#popover_box').empty();\n    type = $(this).attr('data-object-type');\n    id = $(this).attr('data-object-id');\n    if (!(type + \"_\" + id in ajaxResults[\"persistent\"])) {\n        $.ajax({\n            success:function (html) {\n                ajaxResults[\"persistent\"][type + \"_\" + id] = html;\n            },\n            async: false,\n            cache: false,\n            url:\"/attributes/hoverEnrichment/\" + id + \"/1\",\n        });\n    }\n    if (type + \"_\" + id in ajaxResults[\"persistent\"]) {\n        var enrichment_popover = ajaxResults[\"persistent\"][type + \"_\" + id];\n        enrichment_popover += '<div class=\"close-icon useCursorPointer popup-close-icon\" onClick=\"closeScreenshot();\"></div>';\n        $('#popover_box').html('<div class=\"screenshot_content\">' + enrichment_popover + '</div>');\n        $('#popover_box').show();\n        $(\"#gray_out\").fadeIn();\n        $('#popover_box').css({'padding': '5px'});\n        $('#popover_box').css( \"maxWidth\", ( $( window ).width() * 0.9 | 0 ) + \"px\" );\n        $('#popover_box').css( \"maxHeight\", ( $( window ).width() - 300 | 0 ) + \"px\" );\n        $('#popover_box').css( \"overflow-y\", \"auto\");\n\n        var left = ($(window).width() / 2) - ($('#popover_box').width() / 2);\n        $('#popover_box').css({'left': left + 'px'});\n    }\n    $('#' + currentPopover).popover('destroy');\n});\n\nfunction flashErrorPopover() {\n    $('#popover_form').css( \"minWidth\", \"200px\");\n    $('#popover_form').html($('#flashErrorMessage').html());\n    $('#popover_form').show();\n    var left = ($(window).width() / 2) - ($('#popover_form').width() / 2);\n    $('#popover_form').css({'left': left + 'px'});\n    $(\"#gray_out\").fadeIn();\n}\n\nfunction attributeHoverTitle(id, type) {\n  return `<span>Lookup results:</span>\n\t\t<i class=\"fa fa-search-plus useCursorPointer eventViewAttributePopup\"\n\t\t\t\tstyle=\"float: right;\"\n\t\t\t\tdata-object-id=\"${id}\"\n\t\t\t\tdata-object-type=\"${type}\">\n\t</i>`;\n}\n\nfunction attributeHoverPlacement(element) {\n  var offset = element.offset(),\n    topOffset = offset.top - $(window).scrollTop(),\n    left = offset.left - $(window).scrollLeft(),\n    viewportHeight = window.innerHeight,\n    viewportWidth = window.innerWidth,\n    horiz = 0.5 * viewportWidth - left,\n    horizPlacement = horiz > 0 ? 'right' : 'left',\n    popoverMaxHeight = .75 * viewportHeight;\n\n  // default to top placement\n  var placement = topOffset - popoverMaxHeight > 0 ? 'top' : horizPlacement;\n\n  // more space on bottom\n  if (topOffset < .5 * viewportHeight) {\n    // will popup fit on bottom\n    placement = popoverMaxHeight < topOffset ? 'bottom' : horizPlacement;\n  }\n\n  return placement;\n}\n\n$('body').on('click', function (e) {\n  $('[data-toggle=popover]').each(function () {\n    // hide any open popovers when the anywhere else in the body is clicked\n    if (typeof currentPopover !== 'undefined') {\n        if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {\n          $('#' + currentPopover).popover('destroy');\n        }\n    }\n  });\n});\n\nfunction serverOwnerOrganisationChange(host_org_id) {\n    if ($('#ServerOrganisationType').val() == \"0\" && $('#ServerLocal').val() == host_org_id) {\n        $('#InternalDiv').show();\n    } else {\n        $('#ServerInternal').prop(\"checked\", false);\n        $('#InternalDiv').hide();\n    }\n}\n\nfunction requestAPIAccess() {\n    url = \"/users/request_API/\";\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\".loading\").hide();\n            handleGenericAjaxResponse(data);\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not request API access.');\n        }\n    });\n}\n\nfunction initPopoverContent(context) {\n    for (var property in formInfoFields) {\n        if (formInfoFields.hasOwnProperty(property)) {\n            $('#' + property + 'InfoPopover').popover(\"destroy\").popover({\n                placement: 'right',\n                html: 'true',\n                trigger: 'hover',\n                content: getFormInfoContent(property, '#' + context + formInfoFields[property])\n            });\n        }\n    }\n}\n\nfunction checkSharingGroup(context) {\n    if ($('#' + context + 'Distribution').val() == 4) {\n        $('#' + context + 'SharingGroupId').show();\n        $('#' + context + 'SharingGroupId').closest(\"div\").show();\n    } else {\n        $('#' + context + 'SharingGroupId').hide();\n        $('#' + context + 'SharingGroupId').closest(\"div\").hide();\n    }\n}\n\nfunction getFormInfoContent(property, field) {\n    var content = window[property + 'FormInfoValues'][$(field).val()];\n    if (content === undefined || content === null) {\n        return 'N/A';\n    }\n    return content;\n}\n\nfunction formCategoryChanged(id) {\n    // fill in the types\n    var options = $('#' + id +'Type').prop('options');\n    $('option', $('#' + id +'Type')).remove();\n    $.each(category_type_mapping[$('#' + id +'Category').val()], function(val, text) {\n        options[options.length] = new Option(text, val);\n    });\n    // enable the form element\n    $('#AttributeType').prop('disabled', false);\n}\n\nfunction malwareCheckboxSetter(context) {\n    idDiv = \"#\" + context + \"Category\" +'Div';\n    var value = $(\"#\" + context + \"Category\").val();  // get the selected value\n    // set the malware checkbox if the category is in the zip types\n    $(\"#\" + context + \"Malware\").prop('checked', formZipTypeValues[value] == \"true\");\n}\n\nfunction feedFormUpdate() {\n    $('.optionalField').hide();\n    switch($('#FeedSourceFormat').val()) {\n        case 'freetext':\n            $('#TargetDiv').show();\n            $('#OrgcDiv').show();\n            $('#OverrideIdsDiv').show();\n            $('#PublishDiv').show();\n            if ($('#FeedTarget').val() != 0) {\n                $('#TargetEventDiv').show();\n                $('#DeltaMergeDiv').show();\n            }\n            $('#settingsCommonExcluderegexDiv').show();\n            break;\n        case 'csv':\n            $('#TargetDiv').show();\n            $('#OrgcDiv').show();\n            $('#OverrideIdsDiv').show();\n            $('#PublishDiv').show();\n            if ($('#FeedTarget').val() != 0) {\n                $('#TargetEventDiv').show();\n                $('#DeltaMergeDiv').show();\n            }\n            $('#settingsCsvValueDiv').show();\n            $('#settingsCsvDelimiterDiv').show();\n            $('#settingsCommonExcluderegexDiv').show();\n            break;\n    }\n    if ($('#FeedInputSource').val() == 'local') {\n        $('#DeleteLocalFileDiv').show();\n        $('#HeadersDiv').hide();\n    } else {\n        $('#DeleteLocalFileDiv').hide();\n        $('#HeadersDiv').show();\n    }\n}\n\nfunction setContextFields() {\n    if (showContext) {\n        $('.context').show();\n        $('#show_context').addClass(\"attribute_filter_text_active\");\n        $('#show_context').removeClass(\"attribute_filter_text\");\n    } else {\n        $('.context').hide();\n        $('#show_context').addClass(\"attribute_filter_text\");\n        $('#show_context').removeClass(\"attribute_filter_text_active\");\n    }\n}\n\nfunction toggleContextFields() {\n    if (!showContext) {\n        showContext = true;\n    } else {\n        showContext = false;\n    }\n    setContextFields();\n}\n\nfunction checkOrphanedAttributes() {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            var color = 'red';\n            var text = ' (Removal recommended)';\n            if (data == '0') {\n                color = 'green';\n                text = ' (OK)';\n            }\n            $(\"#orphanedAttributeCount\").html('<span class=\"' + color + '\">' + data + text + '</span>');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/attributes/checkOrphanedAttributes/\",\n    });\n}\n\nfunction checkAttachments() {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            var color = 'red';\n            var text = ' (Bad links detected)';\n            if (data !== undefined && data.trim() == '0') {\n                color = 'green';\n                text = ' (OK)';\n            }\n            $(\"#orphanedFileCount\").html('<span class=\"' + color + '\">' + data + text + '</span>');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/attributes/checkAttachments/\",\n    });\n}\n\nfunction loadTagTreemap() {\n    $.ajax({\n        async:true,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $(\".treemapdiv\").html(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/users/tagStatisticsGraph\",\n    });\n}\n\nfunction quickEditEvent(id, field) {\n    $.ajax({\n        async:true,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $(\"#\" + field + \"Field\").html(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/events/quickEdit/\" + id + \"/\" + field,\n    });\n}\n\nfunction selectAllInbetween(last, current) {\n    if (last === false || last == current) return false;\n    var from = $('#' + last).parent().parent().index();\n    var to = $('#' + current).parent().parent().index();\n    if (to < from) {\n        var temp = from;\n        from = to;\n        to = temp;\n    }\n    $('.select_proposal, .select_attribute, .select').each(function (e) {\n        if ($('#' + this.id).parent().parent().index() >= from && $('#' + this.id).parent().parent().index() <= to) {\n            $(this).prop('checked', true);\n        }\n    });\n}\n\n$('.galaxy-toggle-button').click(function() {\n    var element = $(this).data('toggle-type');\n    if ($(this).children('span').hasClass('icon-minus')) {\n        $(this).children('span').addClass('icon-plus');\n        $(this).children('span').removeClass('icon-minus');\n        $('#' + element + '_div').hide();\n    } else {\n        $(this).children('span').removeClass('icon-plus');\n        $(this).children('span').addClass('icon-minus');\n        $('#' + element + '_div').show();\n    }\n});\n\n\nfunction addGalaxyListener(id) {\n    var target_type = $(id).data('target-type');\n    var target_id = $(id).data('target-id');\n    var local = $(id).data('local');\n    console.log(local);\n    if (local) {\n        local = 1;\n    } else {\n        local = 0;\n    }\n    popoverPopup(id, target_id + '/' + target_type + '/local:' + local, 'galaxies', 'selectGalaxyNamespace');\n}\n\nfunction quickSubmitGalaxyForm(cluster_ids, additionalData) {\n    cluster_ids = cluster_ids === null ? [] : cluster_ids;\n    var target_id = additionalData['target_id'];\n    var scope = additionalData['target_type'];\n    var local = additionalData['local'];\n    var url = \"/galaxies/attachMultipleClusters/\" + target_id + \"/\" + scope + \"/local:\" + local;\n    fetchFormDataAjax(url, function(formData) {\n        $('body').append($('<div id=\"temp\"/>').html(formData));\n        $('#temp #GalaxyTargetIds').val(JSON.stringify(cluster_ids));\n        if (target_id == 'selected') {\n            $('#AttributeAttributeIds, #GalaxyAttributeIds').val(getSelected());\n        }\n        $.ajax({\n            data: $('#GalaxyAttachMultipleClustersForm').serialize(),\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                if (target_id === 'selected') {\n                    location.reload();\n                } else {\n                    if (scope == 'tag_collection') {\n                        location.reload();\n                    } else {\n                        loadGalaxies(target_id, scope);\n                        handleGenericAjaxResponse(data);\n                    }\n                }\n            },\n            error:function() {\n                showMessage('fail', 'Could not add cluster.');\n                loadGalaxies(target_id, scope);\n            },\n            complete:function() {\n                $(\"#popover_form\").fadeOut();\n                $(\"#gray_out\").fadeOut();\n                $(\".loading\").hide();\n                $('#temp').remove();\n            },\n            type:\"post\",\n            url: url\n        });\n    });\n}\n\nfunction checkAndSetPublishedInfo(skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    var id = $('#hiddenSideMenuData').data('event-id');\n    if (id !== 'undefined' && !skip_reload) {\n        $.get( \"/events/checkPublishedStatus/\" + id, function(data) {\n            if (data == 1) {\n                $('.published').removeClass('hidden');\n                $('.not-published').addClass('hidden');\n            } else {\n                $('.published').addClass('hidden');\n                $('.not-published').removeClass('hidden');\n            }\n        });\n    }\n}\n\n$(document).keyup(function(e){\n    if (e.keyCode === 27) {\n    $(\"#gray_out\").fadeOut();\n        $(\"#popover_form\").fadeOut();\n        $(\"#popover_form_large\").fadeOut();\n        $(\"#popover_matrix\").fadeOut();\n        $(\"#screenshot_box\").fadeOut();\n        $(\"#popover_box\").fadeOut();\n        $(\"#confirmation_box\").fadeOut();\n        $(\".loading\").hide();\n        resetForms();\n    }\n});\n\nfunction closeScreenshot() {\n    $(\"#popover_box\").fadeOut();\n    $(\"#screenshot_box\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n}\n\nfunction loadSightingGraph(id, scope) {\n    $.get( \"/sightings/viewSightings/\" + id + \"/\" + scope, function(data) {\n        $(\"#sightingsData\").html(data);\n    });\n}\n\nfunction checkRolePerms() {\n    if ($(\"#RolePermission\").val() == '0' || $(\"#RolePermission\").val() == '1') {\n        $('.readonlydisabled').prop('checked', false);\n        $('.readonlydisabled').hide();\n    } else {\n        $('.readonlydisabled').show();\n        $('.permFlags').show();\n    }\n    if ($(\"#RolePermSiteAdmin\").prop('checked')) {\n        $('.site_admin_enforced').prop('checked', true);\n    }\n}\n\nfunction updateMISP() {\n    $.get( \"/servers/update\", function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction submitMISPUpdate() {\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            $('#gitResult').text(data);\n            $('#gitResult').removeClass('hidden');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/servers/update\",\n    });\n}\n\nfunction submitSubmoduleUpdate(clicked) {\n    var $clicked = $(clicked);\n    var submodule_path = $clicked.data('submodule');\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $clicked.removeClass('fa-download');\n            $clicked.addClass('fa-spin fa-spinner');\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (formHTML, textStatus) {\n            var $form = $(formHTML);\n            $('body').append($form);\n            var formData = $form.serialize();\n            $.ajax({\n                data: formData,\n                success:function (data, textStatus) {\n                    if (data.status) {\n                        var job_sent = data.job_sent !== undefined ? data.job_sent : false;\n                        var sync_result = data.sync_result !== undefined ? data.sync_result : '';\n                        updateSubModulesStatus(data.output, job_sent, sync_result);\n                    } else {\n                        showMessage('error', 'Something went wrong');\n                        $('#submoduleGitResultDiv').show();\n                        $('#submoduleGitResult').removeClass('green').addClass('red').text(data.output);\n                    }\n                },\n                error: function (data) {\n                    showMessage('error', 'Something went wrong');\n                    $('#submoduleGitResultDiv').show();\n                    $('#submoduleGitResult').removeClass('green').addClass('red').text(data.output);\n                },\n                complete:function() {\n                    $clicked.removeClass('fa-spin fa-spinner');\n                    $clicked.addClass('fa-download');\n                    $form.remove();\n                },\n                type:\"post\",\n                cache: false,\n                url:$form.attr('action'),\n            });\n        },\n        url:'/servers/getSubmoduleQuickUpdateForm/' + (submodule_path !== undefined ? btoa(submodule_path) : ''),\n    });\n}\n\n// Show $(id) if the enable parameter evaluates to true. Hide it otherwise\nfunction checkAndEnable(id, enable) {\n    if (enable) {\n        $(id).show();\n    } else {\n        $(id).hide();\n    }\n}\n\n// Show and enable checkbox $(id) if the enable parameter evaluates to true. Hide and disable it otherwise.\nfunction checkAndEnableCheckbox(id, enable) {\n    if (enable) {\n        $(id).removeAttr(\"disabled\");\n        $(id).prop('checked', true);\n    } else {\n        $(id).prop('checked', false);\n        $(id).attr(\"disabled\", true);\n    }\n}\n\nfunction enableDisableObjectRows(rows) {\n    rows.forEach(function(i) {\n        if ($(\"#Attribute\" + i + \"ValueSelect\").length != 0) {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"ValueSelect\").val() != \"\");\n            $(\"#Attribute\" + i + \"ValueSelect\").bind('input propertychange', function() {\n                checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(this).val() != \"\");\n            })\n        } else if ($(\"#Attribute\" + i + \"Attachment\").length != 0) {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Attachment\").val() != \"\");\n        } else {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Value\").val() != \"\");\n        }\n        $(\"#Attribute\" + i + \"Value\").bind('input propertychange', function() {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(this).val() != \"\");\n        });\n        $(\"#Attribute\" + i + \"Attachment\").on('change', function() {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Attachment\").val() != \"\");\n        });\n    });\n}\n\nfunction objectReferenceInput() {\n    var types = [\"Attribute\", \"Object\"];\n    var $targetSelect = $('[data-targetselect=\"targetSelect\"]');\n    for (var type in types) {\n        for (var k in targetEvent[types[type]]) {\n            if (targetEvent[types[type]][k]['uuid'] == $('#ObjectReferenceReferencedUuid').val()) {\n                $targetSelect.val($('#ObjectReferenceReferencedUuid').val());\n                changeObjectReferenceSelectOption($('#ObjectReferenceReferencedUuid').val(), {type: types[type]});\n                $targetSelect.trigger('chosen:updated');\n            }\n        }\n    }\n}\n\nfunction objectReferenceCheckForCustomRelationship() {\n    var relationship_type_field = $('#ObjectReferenceRelationshipTypeSelect option:selected');\n    var relationship_type = $(relationship_type_field).val();\n    if (relationship_type == 'custom') {\n        $('#ObjectReferenceRelationshipType').parent().removeClass('hidden');\n    } else {\n        $('#ObjectReferenceRelationshipType').parent().addClass('hidden');\n    }\n}\n\nfunction add_basic_auth() {\n    var headers = $('#FeedHeaders').val().split(\"\\n\");\n    $('#FeedHeaders').val(\"\");\n    headers.forEach(function(header) {\n        header = header.trim();\n        if (header != \"\") {\n            header = header.split(\":\");\n            var key = header.shift();\n            var value = header.join(\":\");\n            if (key != 'Authorization') {\n                $('#FeedHeaders').val($('#FeedHeaders').val() + key.trim() + \":\" + value.trim() + \"\\n\");\n            }\n        }\n    });\n    var basicAuth = $('#BasicAuthUsername').val().trim() + ':' + $('#BasicAuthPassword').val().trim();\n    $('#FeedHeaders').val($('#FeedHeaders').val() + \"Authorization: Basic \" + btoa(basicAuth) + \"\\n\");\n    $('#basicAuthFormEnable').show();\n    $('#basicAuthForm').hide();\n}\n\nfunction changeObjectReferenceSelectOption(selected, additionalData) {\n    var uuid = selected;\n    var type = additionalData.type;\n    $('#ObjectReferenceReferencedUuid').val(uuid);\n    if (type == \"Attribute\") {\n        $('#targetData').html(\"\");\n        for (var k in targetEvent[type][uuid]) {\n            if ($.inArray(k, ['uuid', 'category', 'type', 'value', 'to_ids']) !== -1) {\n                $('#targetData').append('<div><span id=\"' + uuid + '_' + k + '_key\" class=\"bold\"></span>: <span id=\"' + uuid + '_' + k + '_data\"></span></div>');\n                $('#' + uuid + '_' + k + '_key').text(k);\n                $('#' + uuid + '_' + k + '_data').text(targetEvent[type][uuid][k]);\n            }\n        }\n    } else {\n        $('#targetData').html(\"\");\n        for (var k in targetEvent[type][uuid]) {\n            if (k == 'Attribute') {\n                $('#targetData').append('<br /><div><span id=\"header\" class=\"bold\">Attributes:</span>');\n                for (attribute in targetEvent[type][uuid]['Attribute']) {\n                    for (k2 in targetEvent[type][uuid]['Attribute'][attribute]) {\n                        if ($.inArray(k2, ['category', 'type', 'value', 'to_ids']) !== -1) {\n                            $('#targetData').append('<div class=\"indent\"><span id=\"' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_key\" class=\"bold\"></span>: <span id=\"' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_data\"></span></div>');\n                            $('#' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_key').text(k2);\n                            $('#' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_data').text(targetEvent[type][uuid]['Attribute'][attribute][k2]);\n                        }\n                    }\n                    $('#targetData').append('<br />');\n                }\n            } else {\n                if ($.inArray(k, ['name', 'uuid', 'meta-category']) !== -1) {\n                    $('#targetData').append('<div><span id=\"' + uuid + '_' + k + '_key\" class=\"bold\"></span>: <span id=\"' + uuid + '_' + k + '_data\"></span></div>');\n                    $('#' + uuid + '_' + k + '_key').text(k);\n                    $('#' + uuid + '_' + k + '_data').text(targetEvent[type][uuid][k]);\n                }\n            }\n        }\n    }\n}\n\nfunction previewEventBasedOnUuids() {\n    var currentValue = $(\"#EventExtendsUuid\").val();\n    if (currentValue == '') {\n        $('#extended_event_preview').hide();\n    } else {\n        $.ajax({\n            url: \"/events/getEventInfoById/\" + currentValue,\n            type: \"get\",\n            error: function() {\n                $('#extended_event_preview').hide();\n            },\n            success: function(data) {\n                $('#extended_event_preview').show();\n                $('#extended_event_preview').html(data);\n            }\n        });\n    }\n}\n\nfunction checkNoticeList(type) {\n    var fields_to_check = {\n        \"attribute\": [\"category\", \"type\"]\n    }\n    var warnings = [];\n    $('#notice_message').html('<h4>Notices:</h4>');\n    $('#notice_message').hide();\n    fields_to_check[type].forEach(function(field_name) {\n        if (field_name in notice_list_triggers) {\n            var field_value = $('#' + type.ucfirst() + field_name.ucfirst()).val();\n            if (field_value in notice_list_triggers[field_name]) {\n                notice_list_triggers[field_name][field_value].forEach(function(notice) {\n                    $('#notice_message').show();\n                    $('#notice_message').append(\n                        $('<div/>')\n                            .append($('<span/>').text('['))\n                            .append($('<a/>', {href: '/noticelists/view/' + notice['list_id'], class:'bold'}).text(notice['list_name']))\n                            .append($('<span/>').text(']: '))\n                            .append($('<span/>').text(notice['message']['en']))\n                    );\n                });\n            }\n        }\n    });\n\n}\n\nfunction quickSelect(target) {\n    var range = document.createRange();\n    var selection = window.getSelection();\n    range.selectNodeContents(target);\n    selection.removeAllRanges();\n    selection.addRange(range);\n}\n\n$(document).ready(function() {\n    // Show popover for disabled input that contains `data-disabled-reason`.\n    $('input:disabled[data-disabled-reason]').popover(\"destroy\").popover({\n        placement: 'right',\n        html: 'true',\n        trigger: 'hover',\n        content: function () {\n            return $(this).data('disabled-reason');\n        }\n    });\n\n    $('#quickFilterField').bind(\"enterKey\",function(e){\n        $('#quickFilterButton').trigger(\"click\");\n    });\n    $('#quickFilterField').keyup(function(e){\n        if(e.keyCode == 13)\n        {\n            $('#quickFilterButton').trigger(\"click\");\n        }\n    });\n    $(\".queryPopover\").click(function() {\n        url = $(this).data('url');\n        id = $(this).data('id');\n        $.get(url + '/' + id, function(data) {\n            $('#popover_form').html(data);\n            openPopup('#popover_form');\n        });\n    });\n    $('.servers_default_role_checkbox').click(function() {\n        var id = $(this).data(\"id\");\n        var state = $(this).is(\":checked\");\n        $(\".servers_default_role_checkbox\").not(this).attr('checked', false);\n        $.ajax({\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                handleGenericAjaxResponse(data);\n            },\n            complete:function() {\n                $(\".loading\").hide();\n            },\n            type:\"get\",\n            cache: false,\n            url: '/admin/roles/set_default/' + (state ? id : \"\"),\n        });\n    });\n    // clicking on an element with this class will select all of its contents in a\n    // single click\n    $('.quickSelect').click(function() {\n        quickSelect(this);\n    });\n    $(\".cortex-json\").click(function() {\n        var cortex_data = $(this).data('cortex-json');\n        cortex_data = htmlEncode(JSON.stringify(cortex_data, null, 2));\n        var popupHtml = '<pre class=\"simplepre\">' + cortex_data + '</pre>';\n        popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n        $('#popover_box').html(popupHtml);\n        $('#popover_box').show();\n        $('#popover_box').css({'padding': '5px'});\n        left = ($(window).width() / 2) - ($('#popover_box').width() / 2);\n        if (($('#popover_box').height() + 250) > $(window).height()) {\n            $('#popover_box').height($(window).height() - 250);\n            $('#popover_box').css(\"overflow-y\", \"scroll\");\n            $('#popover_box').css(\"overflow-x\", \"hidden\");\n        }\n        $('#popover_box').css({'left': left + 'px'});\n        $(\"#gray_out\").fadeIn();\n    });\n    $('.add_object_attribute_row').click(function() {\n        var template_id = $(this).data('template-id');\n        var object_relation = $(this).data('object-relation');\n        var k = $('#last-row').data('last-row');\n        var k = k+1;\n        $('#last-row').data('last-row', k);\n        url = \"/objects/get_row/\" + template_id + \"/\" + object_relation + \"/\" + k;\n        $.get(url, function(data) {\n            $('#row_' + object_relation + '_expand').before($(data).fadeIn()).html();\n            var $added_row = $('#row_' + object_relation + '_expand').prev().prev();\n            $added_row.find('select.Attribute_value_select option:first').attr('disabled', true);\n        });\n    });\n    $('.quickToggleCheckbox').toggle(function() {\n        var url = $(this).data('checkbox-url');\n    });\n});\n\n$(\"body\").on(\"click\", \".correlation-expand-button\", function() {\n    $(this).parent().children(\".correlation-expanded-area\").show();\n    $(this).parent().children(\".correlation-collapse-button\").show();\n    $(this).hide();\n}).on(\"click\", \".correlation-collapse-button\", function() {\n    $(this).parent().children(\".correlation-expanded-area\").hide();\n    $(this).parent().children(\".correlation-expand-button\").show();\n    $(this).hide();\n});\n\nfunction queryEventLock(event_id, user_org_id) {\n    if (tabIsActive) {\n        $.ajax({\n            url: \"/events/checkLocks/\" + event_id,\n            type: \"get\",\n            success: function(data, statusText, xhr) {\n                 if (xhr.status == 200) {\n                     if ($('#event_lock_warning').length != 0) {\n                         $('#event_lock_warning').remove();\n                     }\n                     if (data != '') {\n                         $('#main-view-container').append(data);\n                     }\n                 }\n            }\n        });\n    }\n    setTimeout(function() { queryEventLock(event_id, user_org_id); }, 5000);\n}\n\nfunction checkIfLoggedIn() {\n    if (tabIsActive) {\n        $.get(\"/users/checkIfLoggedIn.json\")\n            .fail(function (xhr) {\n                if (xhr.status === 403) {\n                    window.location.replace(baseurl + \"/users/login\");\n                }\n            });\n    }\n    setTimeout(function () {\n        checkIfLoggedIn();\n    }, 5000);\n}\n\nfunction insertRawRestResponse() {\n    $('#rest-response-container').append('<pre id=\"raw-response-container\" />');\n    $('#raw-response-container').text($('#rest-response-hidden-container').text());\n}\n\nfunction insertHTMLRestResponse() {\n    $('#rest-response-container').append('<div id=\"html-response-container\" style=\"border: 1px solid blue; padding:5px;\" />');\n    $('#html-response-container').html($('#rest-response-hidden-container').text());\n}\n\nfunction insertJSONRestResponse() {\n    $('#rest-response-container').append('<p id=\"json-response-container\" style=\"border: 1px solid blue; padding:5px; overflow-wrap: break-word;\" />');\n    var parsedJson = syntaxHighlightJson($('#rest-response-hidden-container').text());\n    $('#json-response-container').html(parsedJson);\n}\n\nfunction syntaxHighlightJson(json, indent) {\n    if (indent === undefined) {\n        indent = 2;\n    }\n    if (typeof json == 'string') {\n        json = JSON.parse(json);\n    }\n    json = JSON.stringify(json, undefined, indent);\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/(?:\\r\\n|\\r|\\n)/g, '<br>').replace(/ /g, '&nbsp;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n            var cls = 'json_number';\n            if (/^\"/.test(match)) {\n                    if (/:$/.test(match)) {\n                            cls = 'json_key';\n                    } else {\n                            cls = 'json_string';\n                    }\n            } else if (/true|false/.test(match)) {\n                    cls = 'json_boolean';\n            } else if (/null/.test(match)) {\n                    cls = 'json_null';\n            }\n            return '<span class=\"' + cls + '\">' + match + '</span>';\n    });\n}\n\nfunction jsonToNestedTable(json, header, table_classes) {\n    if (typeof json == 'string') {\n        json = JSON.parse(json);\n    }\n    if (Object.keys(json).length == 0) {\n        return '';\n    }\n    header = header === undefined ? [] : header;\n    table_classes = table_classes === undefined ? [] : table_classes;\n    var $table = $('<table></table>');\n    table_classes.forEach(function(classname) {\n        $table.addClass(classname);\n    });\n    if (header.length > 0) {\n        var $header = $('<thead><tr></tr></thead>');\n        header.forEach(function(col) {\n            $header.children().append($('<th></th>').text(col));\n        });\n        $table.append($header);\n    }\n    var $body = $('<tbody></tbody>');\n    Object.keys(json).forEach(function(k) {\n        var value = json[k];\n        if (typeof value === 'object') {\n            value = JSON.stringify(value);\n        }\n        $body.append(\n            $('<tr></tr>')\n                .append($('<td></td>').text(k))\n                .append($('<td></td>').text(value))\n        );\n    });\n    $table.append($body);\n    return $table[0].outerHTML;\n}\n\nfunction arrayToNestedTable(header, data, table_classes) {\n    header = header === undefined ? [] : header;\n    table_classes = table_classes === undefined ? ['table', 'table-condensed', 'table-bordered'] : table_classes;\n    var $table = $('<table></table>');\n    table_classes.forEach(function(classname) {\n        $table.addClass(classname);\n    });\n    if (header.length > 0) {\n        var $header = $('<thead><tr></tr></thead>');\n        header.forEach(function(col) {\n            $header.children().append($('<th></th>').text(col));\n        });\n        $table.append($header);\n    }\n    var $body = $('<tbody></tbody>');\n    data.forEach(function(row, i) {\n        var $tr = $('<tr></tr>');\n        row.forEach(function(cell, j) {\n            var $td = $('<td></td>').text(cell);\n            $tr.append($td);\n        });\n        $body.append($tr);\n    });\n    $table.append($body);\n    return $table[0].outerHTML;\n}\n\nfunction liveFilter() {\n    var lookupString = $('#liveFilterField').val();\n    if (lookupString == '') {\n        $('.live_filter_target').each(function() {\n            $(this).parent().show();\n        });\n    } else {\n        $('.live_filter_target').each(function() {\n            $(this).parent().hide();\n        });\n        $('.live_filter_target').each(function() {\n            if ($(this).text().indexOf(lookupString) >= 0) {\n                $(this).parent().show();\n            }\n        });\n    }\n}\n\nfunction sparklineBar(elemId, data, lineCount) {\n    data = d3.csv.parse(data);\n    var y_max = 0;\n    data.forEach(function(e) {\n        e = parseInt(e.val);\n        y_max = e > y_max ? e : y_max;\n    });\n    var WIDTH      = 50;\n    var HEIGHT     = 25;\n    var DATA_COUNT = lineCount;\n    var BAR_WIDTH  = (WIDTH - DATA_COUNT) / DATA_COUNT;\n    var x    = d3.scale.linear().domain([0, DATA_COUNT]).range([0, WIDTH]);\n    var y    = d3.scale.linear().domain([0, y_max]).range([0, HEIGHT]);\n\n    var distributionGraphBarTooltip = d3.select(\"body\").append(\"div\")\n        .attr(\"class\", \"distributionGraphBarTooltip\")\n        .style(\"opacity\", 0);\n\n    var svg = d3.select(elemId).append('svg')\n      .attr('width', WIDTH)\n      .attr('height', HEIGHT)\n      .append('g');\n    svg.selectAll('.bar').data(data)\n      .enter()\n      .append('g')\n        .attr('title', function(d, i) { return d.scope + ': ' + d.val })\n        .attr('class', 'DGbar')\n      .append('rect')\n        .attr('class', 'bar')\n        .attr('x', function(d, i) { return x(i); })\n        .attr('y', function(d, i) { return HEIGHT - y(d.val); })\n        .attr('width', BAR_WIDTH)\n        .attr('height', function(d, i) { return y(d.val); })\n        .attr('fill', '#3465a4');\n\n        $('.DGbar').tooltip({container: 'body'});\n}\n\nfunction generic_picker_move(scope, direction) {\n    if (direction === 'right') {\n        $('#' + scope + 'Left option:selected').remove().appendTo('#' + scope + 'Right');\n    } else {\n        $('#' + scope + 'Right option:selected').remove().appendTo('#' + scope + 'Left');\n    }\n}\n\n\nfunction submit_feed_overlap_tool(feedId) {\n    var result = {\"Feed\": [], \"Server\": []};\n    $('#FeedLeft').children().each(function() {\n        result.Feed.push($(this).val());\n    });\n    $('#ServerLeft').children().each(function() {\n        result.Server.push($(this).val());\n    });\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: result,\n        success:function (data, textStatus) {\n            if (!isNaN(data)) {\n                $('#feed_coverage_bar').text(data + '%');\n                $('#feed_coverage_bar').css('width', data + '%');\n            } else {\n                handleGenericAjaxResponse({'saved':false, 'errors':['Something went wrong. Received response not in the expected format.']});\n            }\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Could not complete the requested action.']});\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/feeds/feedCoverage/\" + feedId,\n    });\n}\n\nfunction changeTaxonomyRequiredState(checkbox) {\n    var checkbox_state = $(checkbox).is(\":checked\");\n    var taxonomy_id = $(checkbox).data('taxonomy-id');\n    fetchFormDataAjax('/taxonomies/toggleRequired/' + taxonomy_id, function(formData) {\n        $.ajax({\n            data: $(formData).serialize(),\n            success:function (data, textStatus) {\n                handleGenericAjaxResponse({'saved':true, 'success':['Taxonomy\\'s required state toggled.']});\n            },\n            error:function() {\n                $(checkbox).prop('checked', !$(checkbox).prop('checked'));\n                handleGenericAjaxResponse({'saved':false, 'errors':['Could not toggle the required state of the taxonomy.']});\n            },\n            async:\"false\",\n            type:\"post\",\n            cache: false,\n            url: '/taxonomies/toggleRequired/' + taxonomy_id,\n        });\n    });\n}\n\nfunction fetchFormDataAjax(url, callback) {\n    var formData = false;\n    $.ajax({\n        data: '[]',\n        success:function (data, textStatus) {\n            callback(data);\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Request failed due to an unexpected error.']});\n        },\n        async: false,\n        type:\"get\",\n        cache: false,\n        url: url\n    });\n}\n\nfunction moveIndexRow(id, direction, endpoint) {\n    var row = $('#row_' + id);\n    $.ajax({\n        url: baseurl + endpoint + '/' + id + '/' + direction,\n        type: 'GET',\n        success: function(data) {\n            if (direction === 'up') {\n                if (row.prev().length) {\n                    row.insertBefore(row.prev());\n                }\n            } else {\n                if (row.next().length) {\n                    row.insertAfter(row.next());\n                }\n            }\n            handleGenericAjaxResponse({'saved':true, 'success':['Server priority changed.']});\n        },\n        error: function(data) {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Something went wrong, could not change the priority as requested.']});\n        }\n    });\n}\n\nfunction checkRoleEnforceRateLimit() {\n    if ($(\"#RoleEnforceRateLimit\").is(':checked')) {\n        $('#rateLimitCountContainer').show();\n    } else {\n        $('#rateLimitCountContainer').hide();\n    }\n}\n\nfunction queryDeprecatedEndpointUsage() {\n    $.ajax({\n        url: baseurl + '/servers/viewDeprecatedFunctionUse',\n        type: 'GET',\n        success: function(data) {\n            $('#deprecationResults').html(data);\n        },\n        error: function(data) {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Could not query the deprecation statistics.']});\n        }\n    });\n}\n\n(function(){\n    \"use strict\";\n    $(\".datepicker\").datepicker({\n        format: 'yyyy-mm-dd',\n    });\n}());\n\nfunction submitDashboardForm(id) {\n    var configData = $('#DashboardConfig').val();\n    if (configData != '') {\n        configData = JSON.parse(configData);\n    } else {\n        configData = {};\n    }\n    configData = JSON.stringify(configData);\n    $('#' + id).attr('config', configData);\n    $('#genericModal').modal('hide');\n    saveDashboardState();\n}\n\nfunction submitDashboardAddWidget() {\n    var widget = $('#DashboardWidget').val();\n    var config = $('#DashboardConfig').val();\n    var width = $('#DashboardWidth').val();\n    var height = $('#DashboardHeight').val();\n    var el = null;\n    var k = $('#last-element-counter').data('element-counter');\n    $.ajax({\n        url: baseurl + '/dashboards/getEmptyWidget/' + widget + '/' + (k+1),\n        type: 'GET',\n        success: function(data) {\n            el = data;\n            grid.addWidget(\n                el,\n                {\n                    \"width\": width,\n                    \"height\": height,\n                    \"autoposition\": 1\n                }\n            );\n            if (config !== '') {\n                config = JSON.parse(config);\n                config = JSON.stringify(config);\n            } else {\n                config = '[]';\n            }\n            $('#widget_' + (k+1)).attr('config', config);\n            saveDashboardState();\n            $('#last-element-counter').data('element-counter', (k+1));\n        },\n        complete: function(data) {\n            $('#genericModal').modal('hide');\n        },\n        error: function(data) {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Could not fetch empty widget.']});\n        }\n    });\n}\n\nfunction saveDashboardState() {\n    var dashBoardSettings = [];\n    $('.grid-stack-item').each(function(index) {\n        if ($(this).attr('config') !== undefined && $(this).attr('widget') !== undefined) {\n            var config = $(this).attr('config');\n            config = JSON.parse(config);\n            var temp = {\n                'widget': $(this).attr('widget'),\n                'config': config,\n                'position': {\n                    'x': $(this).attr('data-gs-x'),\n                    'y': $(this).attr('data-gs-y'),\n                    'width': $(this).attr('data-gs-width'),\n                    'height': $(this).attr('data-gs-height')\n                }\n            };\n            dashBoardSettings.push(temp);\n        }\n    });\n    $.ajax({\n        data: {value: dashBoardSettings},\n        success:function (data, textStatus) {\n            showMessage('success', 'Dashboard settings saved.');\n        },\n        error: function (jqXHR, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        },\n        type: \"post\",\n        url: baseurl + '/dashboards/updateSettings',\n    });\n}\n\nfunction updateDashboardWidget(element) {\n    element = $(element);\n    if (element.length) {\n        var container_id = $(element).attr('id').substring(7);\n        var container = $(element).find('.widgetContent');\n        var titleText = $(element).find('.widgetTitleText');\n        var temp = JSON.parse($(element).attr('config'));\n        if (temp['alias'] !== undefined) {\n            titleText.text(temp['alias']);\n        }\n        $.ajax({\n            type: 'POST',\n            url: baseurl + '/dashboards/renderWidget/' + container_id,\n            data: {\n                config: $(element).attr('config'),\n                widget: $(element).attr('widget')\n            },\n            success:function (data, textStatus) {\n                container.html(data);\n            }\n        });\n    }\n}\n\nfunction resetDashboardGrid(grid) {\n    $('.grid-stack-item').each(function() {\n        updateDashboardWidget(this);\n    });\n    saveDashboardState();\n    $('.edit-widget').click(function() {\n        el = $(this).closest('.grid-stack-item');\n        data = {\n            id: el.attr('id'),\n            config: JSON.parse(el.attr('config')),\n            widget: el.attr('widget'),\n            alias: el.attr('alias')\n        }\n        openGenericModalPost(baseurl + '/dashboards/getForm/edit', data);\n    });\n    $('.remove-widget').click(function() {\n        el = $(this).closest('.grid-stack-item');\n        grid.removeWidget(el);\n        saveDashboardState();\n    });\n}\n\nfunction setHomePage() {\n    $.ajax({\n        type: 'POST',\n        url: baseurl + '/userSettings/setHomePage',\n        data: {\n            path: window.location.pathname\n        },\n        success:function (data, textStatus) {\n            showMessage('success', 'Homepage set.');\n            $('#setHomePage').addClass('orange');\n        },\n    });\n}\n\nfunction changeLocationFromIndexDblclick(row_index) {\n    var href = $('table tr[data-row-id=\\\"' + row_index + '\\\"] .dblclickActionElement').attr('href')\n    window.location = href;\n}\n"], "fixing_code": ["<?php\n/**\n * Application level Controller\n *\n * This file is application-wide controller file. You can put all\n * application-wide controller-related methods here.\n *\n * PHP 5\n *\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @package       app.Controller\n * @since         CakePHP(tm) v 0.2.9\n * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)\n */\n\n// TODO GnuPG encryption has issues when keys are expired\n\nApp::uses('ConnectionManager', 'Model');\nApp::uses('Controller', 'Controller');\nApp::uses('File', 'Utility');\nApp::uses('RequestRearrangeTool', 'Tools');\n\n/**\n * Application Controller\n *\n * Add your application-wide methods in the class below, your controllers\n * will inherit them.\n *\n * @package       app.Controller\n * @link http://book.cakephp.org/2.0/en/controllers.html#the-app-controller\n *\n * @throws ForbiddenException // TODO Exception\n */\nclass AppController extends Controller\n{\n    public $defaultModel = '';\n\n    public $debugMode = false;\n\n    public $helpers = array('Utility', 'OrgImg', 'FontAwesome', 'UserName', 'DataPathCollector');\n\n    private $__queryVersion = '107';\n    public $pyMispVersion = '2.4.128';\n    public $phpmin = '7.2';\n    public $phprec = '7.4';\n    public $pythonmin = '3.6';\n    public $pythonrec = '3.7';\n    public $isApiAuthed = false;\n\n    public $baseurl = '';\n    public $sql_dump = false;\n\n    private $isRest = null;\n\n    // Used for _isAutomation(), a check that returns true if the controller & action combo matches an action that is a non-xml and non-json automation method\n    // This is used to allow authentication via headers for methods not covered by _isRest() - as that only checks for JSON and XML formats\n    public $automationArray = array(\n        'events' => array('csv', 'nids', 'hids', 'xml', 'restSearch', 'stix', 'updateGraph', 'downloadOpenIOCEvent'),\n        'attributes' => array('text', 'downloadAttachment', 'returnAttributes', 'restSearch', 'rpz', 'bro'),\n        'objects' => array('restSearch')\n    );\n\n    protected $_legacyParams = array();\n\n    public function __construct($id = false, $table = null, $ds = null)\n    {\n        parent::__construct($id, $table, $ds);\n\n        $name = get_class($this);\n        $name = str_replace('sController', '', $name);\n        $name = str_replace('Controller', '', $name);\n        $this->defaultModel = $name;\n    }\n\n    public $components = array(\n            'Session',\n            'Auth' => array(\n                'authError' => 'Unauthorised access.',\n                'authenticate' => array(\n                    'Form' => array(\n                        'passwordHasher' => 'Blowfish',\n                        'fields' => array(\n                            'username' => 'email'\n                        )\n                    )\n                )\n            ),\n            'Security',\n            'ACL',\n            'RestResponse',\n            'Flash',\n            'Toolbox',\n            'RateLimit',\n            'IndexFilter',\n            'Deprecation',\n            'RestSearch'\n            //,'DebugKit.Toolbar'\n    );\n\n    private function __isApiFunction($controller, $action)\n    {\n        if (isset($this->automationArray[$controller]) && in_array($action, $this->automationArray[$controller])) {\n            return true;\n        }\n        return false;\n    }\n\n    public function beforeFilter()\n    {\n        $this->Auth->loginRedirect = Configure::read('MISP.baseurl') . '/users/routeafterlogin';\n\n        $customLogout = Configure::read('Plugin.CustomAuth_custom_logout');\n        if ($customLogout) {\n            $this->Auth->logoutRedirect = $customLogout;\n        } else {\n            $this->Auth->logoutRedirect = Configure::read('MISP.baseurl') . '/users/login';\n        }\n        $this->__sessionMassage();\n        if (Configure::read('Security.allow_cors')) {\n            // Add CORS headers\n            $this->response->cors($this->request,\n                    explode(',', Configure::read('Security.cors_origins')),\n                    ['*'],\n                    ['Origin', 'Content-Type', 'Authorization', 'Accept']);\n\n            if ($this->request->is('options')) {\n                // Stop here!\n                // CORS only needs the headers\n                $this->response->send();\n                $this->_stop();\n            }\n        }\n        $this->response->header('X-XSS-Protection', '1; mode=block');\n\n        if (!empty($this->params['named']['sql'])) {\n            $this->sql_dump = intval($this->params['named']['sql']);\n        }\n\n        $this->_setupDatabaseConnection();\n        $this->_setupDebugMode();\n\n        $this->set('ajax', $this->request->is('ajax'));\n        $this->set('queryVersion', $this->__queryVersion);\n        $this->loadModel('User');\n        $auth_user_fields = $this->User->describeAuthFields();\n        $language = Configure::read('MISP.language');\n        if (!empty($language) && $language !== 'eng') {\n            Configure::write('Config.language', $language);\n        } else {\n            Configure::write('Config.language', 'eng');\n        }\n\n        //if fresh installation (salt empty) generate a new salt\n        if (!Configure::read('Security.salt')) {\n            $this->loadModel('Server');\n            $this->Server->serverSettingsSaveValue('Security.salt', $this->User->generateRandomPassword(32));\n        }\n        // Check if the instance has a UUID, if not assign one.\n        if (!Configure::read('MISP.uuid')) {\n            $this->loadModel('Server');\n            $this->Server->serverSettingsSaveValue('MISP.uuid', CakeText::uuid());\n        }\n        // check if Apache provides kerberos authentication data\n        $envvar = Configure::read('ApacheSecureAuth.apacheEnv');\n        if (isset($_SERVER[$envvar])) {\n            $this->Auth->className = 'ApacheSecureAuth';\n            $this->Auth->authenticate = array(\n                'Apache' => array(\n                    // envvar = field returned by Apache if user is authenticated\n                    'fields' => array('username' => 'email', 'envvar' => $envvar),\n                    'userFields' => $auth_user_fields\n                )\n            );\n        } else {\n            $this->Auth->authenticate['Form']['userFields'] = $auth_user_fields;\n        }\n        if (!empty($this->params['named']['disable_background_processing'])) {\n            Configure::write('MISP.background_jobs', 0);\n        }\n        Configure::write('CurrentController', $this->params['controller']);\n        Configure::write('CurrentAction', $this->params['action']);\n        $versionArray = $this->{$this->modelClass}->checkMISPVersion();\n        $this->mispVersion = implode('.', array_values($versionArray));\n        $this->Security->blackHoleCallback = 'blackHole';\n        $this->_setupBaseurl();\n\n        // send users away that are using ancient versions of IE\n        // Make sure to update this if IE 20 comes out :)\n        if (isset($_SERVER['HTTP_USER_AGENT'])) {\n            if (preg_match('/(?i)msie [2-8]/', $_SERVER['HTTP_USER_AGENT']) && !strpos($_SERVER['HTTP_USER_AGENT'], 'Opera')) {\n                throw new MethodNotAllowedException('You are using an unsecure and outdated version of IE, please download Google Chrome, Mozilla Firefox or update to a newer version of IE. If you are running IE9 or newer and still receive this error message, please make sure that you are not running your browser in compatibility mode. If you still have issues accessing the site, get in touch with your administration team at ' . Configure::read('MISP.contact'));\n            }\n        }\n        $userLoggedIn = false;\n        if (Configure::read('Plugin.CustomAuth_enable')) {\n            $userLoggedIn = $this->__customAuthentication($_SERVER);\n        }\n        if ($this->_isRest()) {\n            $this->Security->unlockedActions = array($this->action);\n        }\n\n        if (\n            !$userLoggedIn &&\n            (\n                $this->params['controller'] !== 'users' ||\n                $this->params['action'] !== 'register' ||\n                empty(Configure::read('Security.allow_self_registration'))\n            )\n        ) {\n            // REST authentication\n            if ($this->_isRest() || $this->_isAutomation()) {\n                // disable CSRF for REST access\n                if (array_key_exists('Security', $this->components)) {\n                    $this->Security->csrfCheck = false;\n                }\n                // If enabled, allow passing the API key via a named parameter (for crappy legacy systems only)\n                $namedParamAuthkey = false;\n                if (Configure::read('Security.allow_unsafe_apikey_named_param') && !empty($this->params['named']['apikey'])) {\n                    $namedParamAuthkey = $this->params['named']['apikey'];\n                }\n                // Authenticate user with authkey in Authorization HTTP header\n                if (!empty($_SERVER['HTTP_AUTHORIZATION']) || !empty($namedParamAuthkey)) {\n                    $found_misp_auth_key = false;\n                    $authentication = explode(',', $_SERVER['HTTP_AUTHORIZATION']);\n                    if (!empty($namedParamAuthkey)) {\n                        $authentication[] = $namedParamAuthkey;\n                    }\n                    $user = false;\n                    foreach ($authentication as $auth_key) {\n                        if (preg_match('/^[a-zA-Z0-9]{40}$/', trim($auth_key))) {\n                            $found_misp_auth_key = true;\n                            $temp = $this->checkAuthUser(trim($auth_key));\n                            if ($temp) {\n                                $user['User'] = $temp;\n                            }\n                        }\n                    }\n                    if ($found_misp_auth_key) {\n                        if ($user) {\n                            unset($user['User']['gpgkey']);\n                            unset($user['User']['certif_public']);\n                            // User found in the db, add the user info to the session\n                            if (Configure::read('MISP.log_auth')) {\n                                $this->Log = ClassRegistry::init('Log');\n                                $this->Log->create();\n                                $log = array(\n                                        'org' => $user['User']['Organisation']['name'],\n                                        'model' => 'User',\n                                        'model_id' => $user['User']['id'],\n                                        'email' => $user['User']['email'],\n                                        'action' => 'auth',\n                                        'title' => 'Successful authentication using API key',\n                                        'change' => 'HTTP method: ' . $_SERVER['REQUEST_METHOD'] . PHP_EOL . 'Target: ' . $this->here,\n                                );\n                                $this->Log->save($log);\n                            }\n                            $this->Session->renew();\n                            $this->Session->write(AuthComponent::$sessionKey, $user['User']);\n                            $this->isApiAuthed = true;\n                        } else {\n                            // User not authenticated correctly\n                            // reset the session information\n                            $redis = $this->{$this->modelClass}->setupRedis();\n                            if ($redis && !$redis->exists('misp:auth_fail_throttling:' . trim($auth_key))) {\n                                $redis->set('misp:auth_fail_throttling:' . trim($auth_key), 1);\n                                $redis->expire('misp:auth_fail_throttling:' . trim($auth_key), 3600);\n                                $this->Session->destroy();\n                                $this->Log = ClassRegistry::init('Log');\n                                $this->Log->create();\n                                $log = array(\n                                        'org' => 'SYSTEM',\n                                        'model' => 'User',\n                                        'model_id' => 0,\n                                        'email' => 'SYSTEM',\n                                        'action' => 'auth_fail',\n                                        'title' => 'Failed authentication using API key (' . trim($auth_key) . ')',\n                                        'change' => null,\n                                );\n                                $this->Log->save($log);\n                            }\n                            throw new ForbiddenException('Authentication failed. Please make sure you pass the API key of an API enabled user along in the Authorization header.');\n                        }\n                        unset($user);\n                    }\n                }\n                if ($this->Auth->user() == null) {\n                    throw new ForbiddenException('Authentication failed. Please make sure you pass the API key of an API enabled user along in the Authorization header.');\n                }\n            } elseif (!$this->Session->read(AuthComponent::$sessionKey)) {\n                $this->_loadAuthenticationPlugins();\n            }\n        }\n        $this->set('externalAuthUser', $userLoggedIn);\n        // user must accept terms\n        //\n        // grab the base path from our base url for use in the following checks\n        $base_dir = parse_url($this->baseurl, PHP_URL_PATH);\n\n        // if MISP is running out of the web root already, just set this variable to blank so we don't wind up with '//' in the following if statements\n        if ($base_dir == '/') {\n            $base_dir = '';\n        }\n\n        if ($this->Auth->user()) {\n            Configure::write('CurrentUserId', $this->Auth->user('id'));\n            $this->User->setMonitoring($this->Auth->user());\n            if (Configure::read('MISP.log_user_ips')) {\n                $redis = $this->{$this->modelClass}->setupRedis();\n                if ($redis) {\n                    $redis->set('misp:ip_user:' . trim($_SERVER['REMOTE_ADDR']), $this->Auth->user('id'));\n                    $redis->expire('misp:ip_user:' . trim($_SERVER['REMOTE_ADDR']), 60*60*24*30);\n                    $redis->sadd('misp:user_ip:' . $this->Auth->user('id'), trim($_SERVER['REMOTE_ADDR']));\n                }\n            }\n            // update script\n            if ($this->Auth->user('Role')['perm_site_admin'] || (Configure::read('MISP.live') && !$this->_isRest())) {\n                $this->{$this->modelClass}->runUpdates();\n            }\n            $user = $this->Auth->user();\n            if (!isset($user['force_logout']) || $user['force_logout']) {\n                $this->loadModel('User');\n                $this->User->id = $this->Auth->user('id');\n                $this->User->saveField('force_logout', false);\n            }\n            if ($this->Auth->user('disabled')) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $log = array(\n                        'org' => $this->Auth->user('Organisation')['name'],\n                        'model' => 'User',\n                        'model_id' => $this->Auth->user('id'),\n                        'email' => $this->Auth->user('email'),\n                        'action' => 'auth_fail',\n                        'title' => 'Login attempt by disabled user.',\n                        'change' => null,\n                );\n                $this->Log->save($log);\n                $this->Auth->logout();\n                if ($this->_isRest()) {\n                    throw new ForbiddenException('Authentication failed. Your user account has been disabled.');\n                } else {\n                    $this->Flash->error('Your user account has been disabled.', array('key' => 'error'));\n                    $this->_redirectToLogin();\n                }\n            }\n            $this->set('default_memory_limit', ini_get('memory_limit'));\n            if (isset($this->Auth->user('Role')['memory_limit'])) {\n                if ($this->Auth->user('Role')['memory_limit'] !== '') {\n                    ini_set('memory_limit', $this->Auth->user('Role')['memory_limit']);\n                }\n            }\n            $this->set('default_max_execution_time', ini_get('max_execution_time'));\n            if (isset($this->Auth->user('Role')['max_execution_time'])) {\n                if ($this->Auth->user('Role')['max_execution_time'] !== '') {\n                    ini_set('max_execution_time', $this->Auth->user('Role')['max_execution_time']);\n                }\n            }\n        } else {\n            $pre_auth_actions = array('login', 'register');\n            if (!empty(Configure::read('Security.email_otp_enabled'))) {\n                $pre_auth_actions[] = 'email_otp';\n            }\n            if ($this->params['controller'] !== 'users' || !in_array($this->params['action'], $pre_auth_actions)) {\n                if (!$this->request->is('ajax')) {\n                    $this->Session->write('pre_login_requested_url', $this->here);\n                }\n                $this->_redirectToLogin();\n            }\n        }\n\n        // check if MISP is live\n        if ($this->Auth->user() && !Configure::read('MISP.live')) {\n            $role = $this->getActions();\n            if (!$role['perm_site_admin']) {\n                $message = Configure::read('MISP.maintenance_message');\n                if (empty($message)) {\n                    $this->loadModel('Server');\n                    $message = $this->Server->serverSettings['MISP']['maintenance_message']['value'];\n                }\n                if (strpos($message, '$email') && Configure::read('MISP.email')) {\n                    $email = Configure::read('MISP.email');\n                    $message = str_replace('$email', $email, $message);\n                }\n                $this->Flash->info($message);\n                $this->Auth->logout();\n                throw new MethodNotAllowedException($message);//todo this should pb be removed?\n            } else {\n                $this->Flash->error(__('Warning: MISP is currently disabled for all users. Enable it in Server Settings (Administration -> Server Settings -> MISP tab -> live). An update might also be in progress, you can see the progress in ') , array('params' => array('url' => $this->baseurl . '/servers/updateProgress/', 'urlName' => __('Update Progress')), 'clear' => 1));\n            }\n        }\n        if ($this->Session->check(AuthComponent::$sessionKey)) {\n            if ($this->action !== 'checkIfLoggedIn' || $this->request->params['controller'] !== 'users') {\n                $this->User->id = $this->Auth->user('id');\n                if (!$this->User->exists()) {\n                    $message = __('Something went wrong. Your user account that you are authenticated with doesn\\'t exist anymore.');\n                    if ($this->_isRest) {\n                        echo $this->RestResponse->throwException(\n                            401,\n                            $message\n                        );\n                    } else {\n                        $this->Flash->info($message);\n                    }\n                    $this->Auth->logout();\n                    $this->_redirectToLogin();\n                }\n                if (!empty(Configure::read('MISP.terms_file')) && !$this->Auth->user('termsaccepted') && (!in_array($this->request->here, array($base_dir.'/users/terms', $base_dir.'/users/logout', $base_dir.'/users/login', $base_dir.'/users/downloadTerms')))) {\n                    //if ($this->_isRest()) throw new MethodNotAllowedException('You have not accepted the terms of use yet, please log in via the web interface and accept them.');\n                    if (!$this->_isRest()) {\n                        $this->redirect(array('controller' => 'users', 'action' => 'terms', 'admin' => false));\n                    }\n                } elseif ($this->Auth->user('change_pw') && (!in_array($this->request->here, array($base_dir.'/users/terms', $base_dir.'/users/change_pw', $base_dir.'/users/logout', $base_dir.'/users/login')))) {\n                    //if ($this->_isRest()) throw new MethodNotAllowedException('Your user account is expecting a password change, please log in via the web interface and change it before proceeding.');\n                    if (!$this->_isRest()) {\n                        $this->redirect(array('controller' => 'users', 'action' => 'change_pw', 'admin' => false));\n                    }\n                } elseif (!$this->_isRest() && !($this->params['controller'] == 'news' && $this->params['action'] == 'index') && (!in_array($this->request->here, array($base_dir.'/users/terms', $base_dir.'/users/change_pw', $base_dir.'/users/logout', $base_dir.'/users/login')))) {\n                    $newsread = $this->User->field('newsread', array('User.id' => $this->Auth->user('id')));\n                    $this->loadModel('News');\n                    $latest_news = $this->News->field('date_created', array(), 'date_created DESC');\n                    if ($latest_news && $newsread < $latest_news) {\n                        $this->redirect(array('controller' => 'news', 'action' => 'index', 'admin' => false));\n                    }\n                }\n            }\n        }\n        unset($base_dir);\n        // We don't want to run these role checks before the user is logged in, but we want them available for every view once the user is logged on\n        // instead of using checkAction(), like we normally do from controllers when trying to find out about a permission flag, we can use getActions()\n        // getActions returns all the flags in a single SQL query\n        if ($this->Auth->user()) {\n            $this->set('mispVersion', implode('.', array($versionArray['major'], $versionArray['minor'], 0)));\n            $this->set('mispVersionFull', $this->mispVersion);\n            $role = $this->getActions();\n            $this->set('me', $this->Auth->user());\n            $this->set('isAdmin', $role['perm_admin']);\n            $this->set('isSiteAdmin', $role['perm_site_admin']);\n            $this->set('hostOrgUser', $this->Auth->user('org_id') == Configure::read('MISP.host_org_id'));\n            $this->set('isAclAdd', $role['perm_add']);\n            $this->set('isAclModify', $role['perm_modify']);\n            $this->set('isAclModifyOrg', $role['perm_modify_org']);\n            $this->set('isAclPublish', $role['perm_publish']);\n            $this->set('isAclDelegate', $role['perm_delegate']);\n            $this->set('isAclSync', $role['perm_sync']);\n            $this->set('isAclAdmin', $role['perm_admin']);\n            $this->set('isAclAudit', $role['perm_audit']);\n            $this->set('isAclAuth', $role['perm_auth']);\n            $this->set('isAclRegexp', $role['perm_regexp_access']);\n            $this->set('isAclTagger', $role['perm_tagger']);\n            $this->set('isAclTagEditor', $role['perm_tag_editor']);\n            $this->set('isAclTemplate', $role['perm_template']);\n            $this->set('isAclSharingGroup', $role['perm_sharing_group']);\n            $this->set('isAclSighting', isset($role['perm_sighting']) ? $role['perm_sighting'] : false);\n            $this->set('isAclZmq', isset($role['perm_publish_zmq']) ? $role['perm_publish_zmq'] : false);\n            $this->set('isAclKafka', isset($role['perm_publish_kafka']) ? $role['perm_publish_kafka'] : false);\n            $this->set('isAclDecaying', isset($role['perm_decaying']) ? $role['perm_decaying'] : false);\n            $this->userRole = $role;\n\n            $this->set('loggedInUserName', $this->__convertEmailToName($this->Auth->user('email')));\n            if ($this->request->params['controller'] === 'users' && $this->request->params['action'] === 'dashboard') {\n                $notifications = $this->{$this->modelClass}->populateNotifications($this->Auth->user());\n            } else {\n                $notifications = $this->{$this->modelClass}->populateNotifications($this->Auth->user(), 'fast');\n            }\n            $this->set('notifications', $notifications);\n\n            if (\n                Configure::read('MISP.log_paranoid') ||\n                !empty(Configure::read('Security.monitored'))\n            ) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $change = 'HTTP method: ' . $_SERVER['REQUEST_METHOD'] . PHP_EOL . 'Target: ' . $this->here;\n                if (\n                    (\n                        $this->request->is('post') ||\n                        $this->request->is('put')\n                    ) &&\n                    (\n                        !empty(Configure::read('MISP.log_paranoid_include_post_body')) ||\n                        !empty(Configure::read('Security.monitored'))\n                    )\n                ) {\n                    $payload = $this->request->input();\n                    if (!empty($payload['_Token'])) {\n                        unset($payload['_Token']);\n                    }\n                    $change .= PHP_EOL . 'Request body: ' . json_encode($payload);\n                }\n                $log = array(\n                        'org' => $this->Auth->user('Organisation')['name'],\n                        'model' => 'User',\n                        'model_id' => $this->Auth->user('id'),\n                        'email' => $this->Auth->user('email'),\n                        'action' => 'request',\n                        'title' => 'Paranoid log entry',\n                        'change' => $change,\n                );\n                $this->Log->save($log);\n            }\n        } else {\n            $this->set('me', false);\n        }\n\n        if ($this->Auth->user() && $this->_isSiteAdmin()) {\n            if (Configure::read('Session.defaults') == 'database') {\n                $db = ConnectionManager::getDataSource('default');\n                $sqlResult = $db->query('SELECT COUNT(id) AS session_count FROM cake_sessions WHERE expires < ' . time() . ';');\n                if (isset($sqlResult[0][0]['session_count']) && $sqlResult[0][0]['session_count'] > 1000) {\n                    $this->loadModel('Server');\n                    $this->Server->updateDatabase('cleanSessionTable');\n                }\n            }\n            if (Configure::read('site_admin_debug') && (Configure::read('debug') < 2)) {\n                Configure::write('debug', 1);\n            }\n        }\n\n        $this->ACL->checkAccess($this->Auth->user(), Inflector::variable($this->request->params['controller']), $this->action);\n        if ($this->_isRest()) {\n            $this->__rateLimitCheck();\n        }\n        if ($this->modelClass !== 'CakeError') {\n            $deprecationWarnings = $this->Deprecation->checkDeprecation($this->request->params['controller'], $this->action, $this->{$this->modelClass}, $this->Auth->user('id'));\n            if ($deprecationWarnings) {\n                $deprecationWarnings = __('WARNING: This functionality is deprecated and will be removed in the near future. ') . $deprecationWarnings;\n                if ($this->_isRest()) {\n                    $this->response->header('X-Deprecation-Warning', $deprecationWarnings);\n                    $this->components['RestResponse']['deprecationWarnings'] = $deprecationWarnings;\n                } else {\n                    $this->Flash->warning($deprecationWarnings);\n                }\n            }\n        }\n        $this->components['RestResponse']['sql_dump'] = $this->sql_dump;\n        $this->loadModel('UserSetting');\n        $homepage = $this->UserSetting->find('first', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'UserSetting.user_id' => $this->Auth->user('id'),\n                'UserSetting.setting' => 'homepage'\n            ),\n            'contain' => array('User.id', 'User.org_id')\n        ));\n        if (!empty($homepage)) {\n            $this->set('homepage', $homepage['UserSetting']['value']);\n        }\n    }\n\n    private function __rateLimitCheck()\n    {\n        $info = array();\n        $rateLimitCheck = $this->RateLimit->check(\n            $this->Auth->user(),\n            $this->request->params['controller'],\n            $this->action,\n            $this->{$this->modelClass},\n            $info,\n            $this->response->type()\n        );\n        if (!empty($info)) {\n            $this->RestResponse->setHeader('X-Rate-Limit-Limit', $info['limit']);\n            $this->RestResponse->setHeader('X-Rate-Limit-Remaining', $info['remaining']);\n            $this->RestResponse->setHeader('X-Rate-Limit-Reset', $info['reset']);\n        }\n        if ($rateLimitCheck !== true) {\n            $this->response->header('X-Rate-Limit-Limit', $info['limit']);\n            $this->response->header('X-Rate-Limit-Remaining', $info['remaining']);\n            $this->response->header('X-Rate-Limit-Reset', $info['reset']);\n            $this->response->body($rateLimitCheck);\n            $this->response->statusCode(429);\n            $this->response->send();\n            $this->_stop();\n        }\n        return true;\n    }\n\n    public function afterFilter()\n    {\n        if ($this->isApiAuthed && $this->_isRest()) {\n            $this->Session->destroy();\n        }\n    }\n\n    public function queryACL($debugType='findMissingFunctionNames', $content = false)\n    {\n        $this->autoRender = false;\n        $this->layout = false;\n        $validCommands = array('printAllFunctionNames', 'findMissingFunctionNames', 'printRoleAccess');\n        if (!in_array($debugType, $validCommands)) {\n            throw new MethodNotAllowedException('Invalid function call.');\n        }\n        $this->set('data', $this->ACL->$debugType($content));\n        $this->set('flags', JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);\n        $this->response->type('json');\n        $this->render('/Servers/json/simple');\n    }\n\n    /*\n     * Configure the debugMode view parameter\n     */\n    protected function _setupDebugMode() {\n        $this->set('debugMode', (Configure::read('debug') > 1) ? 'debugOn' : 'debugOff');\n    }\n\n    /*\n     * Setup & validate the database connection configuration\n     * @throws Exception if the configured database is not supported.\n     */\n    protected function _setupDatabaseConnection() {\n        // check for a supported datasource configuration\n        $dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n        if (!isset($dataSourceConfig['encoding'])) {\n            $db = ConnectionManager::getDataSource('default');\n            $db->setConfig(array('encoding' => 'utf8'));\n            ConnectionManager::create('default', $db->config);\n        }\n        $dataSource = $dataSourceConfig['datasource'];\n        if (!in_array($dataSource, array('Database/Mysql', 'Database/Postgres', 'Database/MysqlObserver'))) {\n            throw new Exception('datasource not supported: ' . $dataSource);\n        }\n    }\n\n    /*\n     * Sanitize the configured `MISP.baseurl` and expose it to the view as `baseurl`.\n     */\n    protected function _setupBaseurl() {\n        // Let us access $baseurl from all views\n        $baseurl = Configure::read('MISP.baseurl');\n        if (substr($baseurl, -1) == '/') {\n            // if the baseurl has a trailing slash, remove it. It can lead to issues with the CSRF protection\n            $baseurl = rtrim($baseurl, '/');\n            $this->loadModel('Server');\n            $this->Server->serverSettingsSaveValue('MISP.baseurl', $baseurl);\n        }\n        if (trim($baseurl) == 'http://') {\n            $this->Server->serverSettingsSaveValue('MISP.baseurl', '');\n        }\n        $this->baseurl = $baseurl;\n        $this->set('baseurl', h($baseurl));\n    }\n\n    private function __convertEmailToName($email)\n    {\n        $name = explode('@', (string)$email);\n        $name = explode('.', $name[0]);\n        foreach ($name as $key => $value) {\n            $name[$key] = ucfirst($value);\n        }\n        $name = implode(' ', $name);\n        return $name;\n    }\n\n    public function blackhole($type=false)\n    {\n        if ($type === 'csrf') {\n            throw new BadRequestException($type);\n        }\n        throw new BadRequestException('The request has been black-holed');\n    }\n\n    public $userRole = null;\n\n    protected function _isJson($data=false)\n    {\n        if ($data) {\n            return (json_decode($data) != null) ? true : false;\n        }\n        return $this->request->header('Accept') === 'application/json' || $this->RequestHandler->prefers() === 'json';\n    }\n\n    protected function _isCsv($data=false)\n    {\n        if ($this->params['ext'] === 'csv' || $this->request->header('Accept') === 'application/csv' || $this->RequestHandler->prefers() === 'csv') {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    protected function _isRest()\n    {\n        // This method is surprisingly slow and called many times for one request, so it make sense to cache the result.\n        if ($this->isRest !== null) {\n            return $this->isRest;\n        }\n\n        $api = $this->__isApiFunction($this->request->params['controller'], $this->request->params['action']);\n        if (isset($this->RequestHandler) && ($api || $this->RequestHandler->isXml() || $this->_isJson() || $this->_isCsv())) {\n            if ($this->_isJson()) {\n                if (!empty($this->request->input()) && empty($this->request->input('json_decode'))) {\n                    throw new MethodNotAllowedException('Invalid JSON input. Make sure that the JSON input is a correctly formatted JSON string. This request has been blocked to avoid an unfiltered request.');\n                }\n            }\n            $this->isRest = true;\n            return true;\n        } else {\n            $this->isRest = false;\n            return false;\n        }\n    }\n\n    protected function _isAutomation()\n    {\n        foreach ($this->automationArray as $controllerName => $controllerActions) {\n            if ($this->params['controller'] == $controllerName && in_array($this->params['action'], $controllerActions)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Convert an array to the same array but with the values also as index instead of an interface_exists\n     */\n    protected function _arrayToValuesIndexArray($oldArray)\n    {\n        $newArray = array();\n        foreach ($oldArray as $value) {\n            $newArray[$value] = $value;\n        }\n        return $newArray;\n    }\n\n    // checks if the currently logged user is an administrator (an admin that can manage the users and events of his own organisation)\n    protected function _isAdmin()\n    {\n        if ($this->userRole['perm_site_admin'] || $this->userRole['perm_admin']) {\n            return true;\n        }\n        return false;\n    }\n\n    // checks if the currently logged user is a site administrator (an admin that can manage any user or event on the instance and create / edit the roles).\n    protected function _isSiteAdmin()\n    {\n        return $this->userRole['perm_site_admin'];\n    }\n\n    protected function _checkOrg()\n    {\n        return $this->Auth->user('org_id');\n    }\n\n    protected function _getApiAuthUser(&$key, &$exception)\n    {\n        if (strlen($key) == 40) {\n            // check if the key is valid -> search for users based on key\n            $user = $this->checkAuthUser($key);\n            if (!$user) {\n                $exception = $this->RestResponse->throwException(\n                    401,\n                    __('This authentication key is not authorized to be used for exports. Contact your administrator.')\n                );\n                return false;\n            }\n            $key = 'json';\n        } else {\n            if (!$this->Auth->user('id')) {\n                $exception = $this->RestResponse->throwException(\n                    401,\n                    __('You have to be logged in to do that.')\n                );\n                return false;\n            }\n            $user = $this->Auth->user();\n        }\n        return $user;\n    }\n\n    // generic function to standardise on the collection of parameters. Accepts posted request objects, url params, named url params\n    protected function _harvestParameters($options, &$exception, $data = array())\n    {\n        if (!empty($options['request']->is('post'))) {\n            if (empty($options['request']->data)) {\n                $exception = $this->RestResponse->throwException(\n                    400,\n                    __('Either specify the search terms in the url, or POST a json with the filter parameters.'),\n                    '/' . $this->request->params['controller'] . '/' . $this->action\n                );\n                return false;\n            } else {\n                if (isset($options['request']->data['request'])) {\n                    $data = array_merge($data, $options['request']->data['request']);\n                } else {\n                    $data = array_merge($data, $options['request']->data);\n                }\n            }\n        }\n        /*\n         * If we simply capture ordered URL params with func_get_args(), reassociate them.\n         * We can easily detect this by having ordered_url_params passed as a list instead of a dict.\n         */\n        if (isset($options['ordered_url_params'][0])) {\n            $temp = array();\n            foreach ($options['ordered_url_params'] as $k => $url_param) {\n                if (!empty($options['paramArray'][$k])) {\n                    $temp[$options['paramArray'][$k]] = $url_param;\n                }\n            }\n            $options['ordered_url_params'] = $temp;\n        }\n        if (!empty($options['paramArray'])) {\n            foreach ($options['paramArray'] as $p) {\n                if (\n                    isset($options['ordered_url_params'][$p]) &&\n                    (!in_array(strtolower((string)$options['ordered_url_params'][$p]), array('null', '0', false, 'false', null)))\n                ) {\n                    $data[$p] = $options['ordered_url_params'][$p];\n                    $data[$p] = str_replace(';', ':', $data[$p]);\n                }\n                if (isset($options['named_params'][$p])) {\n                    $data[$p] = str_replace(';', ':', $options['named_params'][$p]);\n                }\n            }\n        }\n        foreach ($data as $k => $v) {\n            if (!is_array($data[$k])) {\n                $data[$k] = trim($data[$k]);\n                if (strpos($data[$k], '||')) {\n                    $data[$k] = explode('||', $data[$k]);\n                }\n            }\n        }\n        if (!empty($options['additional_delimiters'])) {\n            if (!is_array($options['additional_delimiters'])) {\n                $options['additional_delimiters'] = array($options['additional_delimiters']);\n            }\n            foreach ($data as $k => $v) {\n                $found = false;\n                foreach ($options['additional_delimiters'] as $delim) {\n                    if (strpos($v, $delim) !== false) {\n                        $found = true;\n                    }\n                }\n                if ($found) {\n                    $data[$k] = explode($options['additional_delimiters'][0], str_replace($options['additional_delimiters'], $options['additional_delimiters'][0], $v));\n                    foreach ($data[$k] as $k2 => $value) {\n                        $data[$k][$k2] = trim($data[$k][$k2]);\n                    }\n                }\n            }\n        }\n        return $data;\n    }\n\n    // pass an action to this method for it to check the active user's access to the action\n    public function checkAction($action = 'perm_sync')\n    {\n        $this->loadModel('Role');\n        $this->Role->recursive = -1;\n        $role = $this->Role->findById($this->Auth->user('role_id'));\n        if ($role['Role'][$action]) {\n            return true;\n        }\n        return false;\n    }\n\n    // returns the role of the currently authenticated user as an array, used to set the permission variables for views in the AppController's beforeFilter() method\n    public function getActions()\n    {\n        $this->loadModel('Role');\n        $this->Role->recursive = -1;\n        $role = $this->Role->findById($this->Auth->user('role_id'));\n        return $role['Role'];\n    }\n\n    public function checkAuthUser($authkey)\n    {\n        $this->loadModel('User');\n        $user = $this->User->getAuthUserByAuthkey($authkey);\n        if (empty($user)) {\n            return false;\n        }\n        if (!$user['Role']['perm_auth']) {\n            return false;\n        }\n        if ($user['Role']['perm_site_admin']) {\n            $user['siteadmin'] = true;\n        }\n        return $user;\n    }\n\n    public function checkExternalAuthUser($authkey)\n    {\n        $this->loadModel('User');\n        $user = $this->User->getAuthUserByExternalAuth($authkey);\n        if (empty($user)) {\n            return false;\n        }\n        if ($user['Role']['perm_site_admin']) {\n            $user['siteadmin'] = true;\n        }\n        return $user;\n    }\n\n    public function generateCount()\n    {\n        if (!self::_isSiteAdmin() || !$this->request->is('post')) {\n            throw new NotFoundException();\n        }\n        // do one SQL query with the counts\n        // loop over events, update in db\n        $this->loadModel('Attribute');\n        $events = $this->Attribute->find('all', array(\n            'recursive' => -1,\n            'fields' => array('event_id', 'count(event_id) as attribute_count'),\n            'group' => array('Attribute.event_id'),\n            'order' => array('Attribute.event_id ASC'),\n        ));\n        foreach ($events as $k => $event) {\n            $this->Event->read(null, $event['Attribute']['event_id']);\n            $this->Event->set('attribute_count', $event[0]['attribute_count']);\n            $this->Event->save();\n        }\n        $this->Flash->success(__('All done. attribute_count generated from scratch for ' . (isset($k) ? $k : 'no') . ' events.'));\n        $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n    }\n\n    public function pruneDuplicateUUIDs()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->loadModel('Attribute');\n        $duplicates = $this->Attribute->find('all', array(\n            'fields' => array('Attribute.uuid', 'count(*) as occurance'),\n            'recursive' => -1,\n            'group' => array('Attribute.uuid HAVING COUNT(*) > 1'),\n        ));\n        $counter = 0;\n        foreach ($duplicates as $duplicate) {\n            $attributes = $this->Attribute->find('all', array(\n                'recursive' => -1,\n                'conditions' => array('uuid' => $duplicate['Attribute']['uuid'])\n            ));\n            foreach ($attributes as $k => $attribute) {\n                if ($k > 0) {\n                    $this->Attribute->delete($attribute['Attribute']['id']);\n                    $counter++;\n                }\n            }\n        }\n        $this->Server->updateDatabase('makeAttributeUUIDsUnique');\n        $this->Flash->success('Done. Deleted ' . $counter . ' duplicate attribute(s).');\n        $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n    }\n\n    public function removeDuplicateEvents()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->loadModel('Event');\n        $duplicates = $this->Event->find('all', array(\n                'fields' => array('Event.uuid', 'count(*) as occurance'),\n                'recursive' => -1,\n                'group' => array('Event.uuid HAVING COUNT(*) > 1'),\n        ));\n        $counter = 0;\n\n        // load this so we can remove the blacklist item that will be created, this is the one case when we do not want it.\n        if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n            $this->EventBlacklist = ClassRegistry::init('EventBlacklist');\n        }\n\n        foreach ($duplicates as $duplicate) {\n            $events = $this->Event->find('all', array(\n                    'recursive' => -1,\n                    'conditions' => array('uuid' => $duplicate['Event']['uuid'])\n            ));\n            foreach ($events as $k => $event) {\n                if ($k > 0) {\n                    $uuid = $event['Event']['uuid'];\n                    $this->Event->delete($event['Event']['id']);\n                    $counter++;\n                    // remove the blacklist entry that we just created with the event deletion, if the feature is enabled\n                    // We do not want to block the UUID, since we just deleted a copy\n                    if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n                        $this->EventBlacklist->deleteAll(array('EventBlacklist.event_uuid' => $uuid));\n                    }\n                }\n            }\n        }\n        $this->Server->updateDatabase('makeEventUUIDsUnique');\n        $this->Flash->success('Done. Removed ' . $counter . ' duplicate events.');\n        $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n    }\n\n    public function updateDatabase($command)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->loadModel('Server');\n        if (is_numeric($command)) {\n            $command = intval($command);\n        }\n        $this->Server->updateDatabase($command);\n        $this->Flash->success('Done.');\n        if ($liveOff) {\n            $this->redirect(array('controller' => 'servers', 'action' => 'updateProgress'));\n        } else {\n            $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n        }\n    }\n\n    public function upgrade2324()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->loadModel('Server');\n        if (!Configure::read('MISP.background_jobs')) {\n            $this->Server->upgrade2324($this->Auth->user('id'));\n            $this->Flash->success('Done. For more details check the audit logs.');\n            $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n        } else {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'upgrade_24',\n                    'job_input' => 'Old database',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => 0,\n                    'message' => 'Job created.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'AdminShell',\n                    array('jobUpgrade24', $jobId, $this->Auth->user('id')),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            $this->Flash->success(__('Job queued. You can view the progress if you navigate to the active jobs view (administration -> jobs).'));\n            $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n        }\n    }\n\n    private function __preAuthException($message)\n    {\n        $this->set('me', array());\n        throw new ForbiddenException($message);\n    }\n\n    private function __customAuthentication($server)\n    {\n        $result = false;\n        if (Configure::read('Plugin.CustomAuth_enable')) {\n            $header = Configure::read('Plugin.CustomAuth_header') ? Configure::read('Plugin.CustomAuth_header') : 'Authorization';\n            $authName = Configure::read('Plugin.CustomAuth_name') ? Configure::read('Plugin.CustomAuth_name') : 'External authentication';\n            if (\n                !Configure::check('Plugin.CustomAuth_use_header_namespace') ||\n                (Configure::check('Plugin.CustomAuth_use_header_namespace') && Configure::read('Plugin.CustomAuth_use_header_namespace'))\n            ) {\n                if (Configure::check('Plugin.CustomAuth_header_namespace')) {\n                    $headerNamespace = Configure::read('Plugin.CustomAuth_header_namespace');\n                } else {\n                    $headerNamespace = 'HTTP_';\n                }\n            } else {\n                $headerNamespace = '';\n            }\n            if (isset($server[$headerNamespace . $header]) && !empty($server[$headerNamespace . $header])) {\n                if (Configure::read('Plugin.CustomAuth_only_allow_source') && Configure::read('Plugin.CustomAuth_only_allow_source') !== $server['REMOTE_ADDR']) {\n                    $this->Log = ClassRegistry::init('Log');\n                    $this->Log->create();\n                    $log = array(\n                            'org' => 'SYSTEM',\n                            'model' => 'User',\n                            'model_id' => 0,\n                            'email' => 'SYSTEM',\n                            'action' => 'auth_fail',\n                            'title' => 'Failed authentication using external key (' . trim($server[$headerNamespace . $header]) . ') - the user has not arrived from the expected address. Instead the request came from: ' . $server['REMOTE_ADDR'],\n                            'change' => null,\n                    );\n                    $this->Log->save($log);\n                    $this->__preAuthException($authName . ' authentication failed. Contact your MISP support for additional information at: ' . Configure::read('MISP.contact'));\n                }\n                $temp = $this->checkExternalAuthUser($server[$headerNamespace . $header]);\n                $user['User'] = $temp;\n                if ($user['User']) {\n                    unset($user['User']['gpgkey']);\n                    unset($user['User']['certif_public']);\n                    $this->Session->renew();\n                    $this->Session->write(AuthComponent::$sessionKey, $user['User']);\n                    if (Configure::read('MISP.log_auth')) {\n                        $this->Log = ClassRegistry::init('Log');\n                        $this->Log->create();\n                        $log = array(\n                            'org' => $user['User']['Organisation']['name'],\n                            'model' => 'User',\n                            'model_id' => $user['User']['id'],\n                            'email' => $user['User']['email'],\n                            'action' => 'auth',\n                            'title' => 'Successful authentication using ' . $authName . ' key',\n                            'change' => 'HTTP method: ' . $_SERVER['REQUEST_METHOD'] . PHP_EOL . 'Target: ' . $this->here,\n                        );\n                        $this->Log->save($log);\n                    }\n                    $result = true;\n                } else {\n                    // User not authenticated correctly\n                    // reset the session information\n                    $this->Log = ClassRegistry::init('Log');\n                    $this->Log->create();\n                    $log = array(\n                            'org' => 'SYSTEM',\n                            'model' => 'User',\n                            'model_id' => 0,\n                            'email' => 'SYSTEM',\n                            'action' => 'auth_fail',\n                            'title' => 'Failed authentication using external key (' . trim($server[$headerNamespace . $header]) . ')',\n                            'change' => null,\n                    );\n                    $this->Log->save($log);\n                    if (Configure::read('CustomAuth_required')) {\n                        $this->Session->destroy();\n                        $this->__preAuthException($authName . ' authentication failed. Contact your MISP support for additional information at: ' . Configure::read('MISP.contact'));\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n\n    public function cleanModelCaches()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->loadModel('Server');\n        $this->Server->cleanCacheFiles();\n        $this->Flash->success('Caches cleared.');\n        $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'diagnostics'));\n    }\n\n    private function __sessionMassage()\n    {\n        if (!empty(Configure::read('MISP.uuid'))) {\n            Configure::write('Session.cookie', 'MISP-' . Configure::read('MISP.uuid'));\n        }\n        if (!empty(Configure::read('Session.cookieTimeout')) || !empty(Configure::read('Session.timeout'))) {\n            $session = Configure::read('Session');\n            if (!empty($session['cookieTimeout'])) {\n                $value = 60 * intval($session['cookieTimeout']);\n            } else if (!empty($session['timeout'])) {\n                $value = 60 * intval($session['timeout']);\n            } else {\n                $value = 3600;\n            }\n            $session['ini']['session.gc_maxlifetime'] = $value;\n            Configure::write('Session', $session);\n        }\n    }\n\n    private function _redirectToLogin() {\n        $targetRoute = $this->Auth->loginAction;\n        $targetRoute['admin'] = false;\n        $this->redirect($targetRoute);\n    }\n\n    protected function _loadAuthenticationPlugins() {\n        // load authentication plugins from Configure::read('Security.auth')\n        $auth = Configure::read('Security.auth');\n\n        if (!$auth) return;\n\n        $this->Auth->authenticate = array_merge($auth, $this->Auth->authenticate);\n        if ($this->Auth->startup($this)) {\n            $user = $this->Auth->user();\n            if ($user) {\n                // User found in the db, add the user info to the session\n                $this->Session->renew();\n                $this->Session->write(AuthComponent::$sessionKey, $user);\n            }\n        }\n    }\n\n    protected function _legacyAPIRemap($options = array())\n    {\n        $ordered_url_params = array();\n        foreach ($options['paramArray'] as $k => $param) {\n            if (isset($options['ordered_url_params'][$k])) {\n                $ordered_url_params[$param] = $options['ordered_url_params'][$k];\n            } else {\n                $ordered_url_params[$param] = false;\n            }\n        }\n        $filterData = array(\n            'request' => $options['request'],\n            'named_params' => $options['named_params'],\n            'paramArray' => $options['paramArray'],\n            'ordered_url_params' => $ordered_url_params\n        );\n        $exception = false;\n        $filters = $this->_harvestParameters($filterData, $exception);\n        if (!empty($options['injectedParams'])) {\n            foreach ($options['injectedParams'] as $injectedParam => $injectedValue) {\n                $filters[$injectedParam] = $injectedValue;\n            }\n        }\n        if (!empty($options['alias'])) {\n            foreach ($options['alias'] as $from => $to) {\n                if (!empty($filters[$from])) {\n                    $filters[$to] = $filters[$from];\n                }\n            }\n        }\n        $this->_legacyParams = $filters;\n        return true;\n    }\n\n    public function restSearch()\n    {\n        $scope = empty($this->scopeOverride) ? $this->modelClass : $this->scopeOverride;\n        if ($scope === 'MispObject') {\n            $scope = 'Object';\n        }\n        if (empty($this->RestSearch->paramArray[$scope])) {\n            throw new NotFoundException(__('RestSearch is not implemented (yet) for this scope.'));\n        }\n        if (!isset($this->$scope)) {\n            $this->loadModel($scope);\n        }\n        $filterData = array(\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'paramArray' => $this->RestSearch->paramArray[$scope],\n            'ordered_url_params' => func_get_args()\n        );\n        $exception = false;\n        $filters = $this->_harvestParameters($filterData, $exception, $this->_legacyParams);\n        if (empty($filters['returnFormat'])) {\n            $filters['returnFormat'] = 'json';\n        }\n        unset($filterData);\n        if ($filters === false) {\n            return $exception;\n        }\n        $key = empty($filters['key']) ? $filters['returnFormat'] : $filters['key'];\n        $user = $this->_getApiAuthUser($key, $exception);\n        if ($user === false) {\n            return $exception;\n        }\n        if (isset($filters['returnFormat'])) {\n            $returnFormat = $filters['returnFormat'];\n        } else {\n            $returnFormat = 'json';\n        }\n        if ($returnFormat === 'download') {\n            $returnFormat = 'json';\n        }\n        if ($returnFormat === 'stix' && $this->_isJson()) {\n            $returnFormat = 'stix-json';\n        }\n        $elementCounter = 0;\n        $renderView = false;\n        $final = $this->$scope->restSearch($user, $returnFormat, $filters, false, false, $elementCounter, $renderView);\n        if (!empty($renderView) && !empty($final)) {\n            $this->layout = false;\n            $final = json_decode($final, true);\n            foreach ($final as $key => $data) {\n                $this->set($key, $data);\n            }\n            $this->render('/Events/module_views/' . $renderView);\n        } else {\n            $responseType = $this->$scope->validFormats[$returnFormat][0];\n            $filename = $this->RestSearch->getFilename($filters, $scope, $responseType);\n            return $this->RestResponse->viewData($final, $responseType, false, true, $filename, array('X-Result-Count' => $elementCounter, 'X-Export-Module-Used' => $returnFormat, 'X-Response-Format' => $responseType));\n        }\n    }\n}\n", "<?php\n    if (!empty($me)) {\n        $menu = array(\n            array(\n                'type' => 'root',\n                'url' =>empty($homepage['path']) ? $baseurl : $baseurl . h($homepage['path']),\n                'html' => (Configure::read('MISP.home_logo') ?  $logo = '<img src=\"' . $baseurl . '/img/custom/' . Configure::read('MISP.home_logo') . '\" style=\"height:24px;\">' : __('Home'))\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Event Actions'),\n                'children' => array(\n                    array(\n                        'text' => __('List Events'),\n                        'url' => '/events/index'\n                    ),\n                    array(\n                        'text' => __('Add Event'),\n                        'url' => '/events/add',\n                        'requirement' => $isAclAdd\n                    ),\n                    array(\n                        'text' => __('List Attributes'),\n                        'url' => '/attributes/index'\n                    ),\n                    array(\n                        'text' => __('Search Attributes'),\n                        'url' => '/attributes/search'\n                    ),\n                    array(\n                        'text' => __('REST client'),\n                        'url' => '/servers/rest'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('View Proposals'),\n                        'url' => '/shadow_attributes/index/all:0'\n                    ),\n                    array(\n                        'text' => __('Events with proposals'),\n                        'url' => '/events/proposalEventIndex'\n                    ),\n                    array(\n                        'url' => '/event_delegations/index/context:pending',\n                        'text' => __('View delegation requests')\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Tags'),\n                        'url' => '/tags/index'\n                    ),\n                    array(\n                        'text' => __('List Tag Collections'),\n                        'url' => '/tag_collections/index'\n                    ),\n                    array(\n                        'text' => __('Add Tag'),\n                        'url' => '/tags/add',\n                        'requirement' => $isAclTagEditor\n                    ),\n                    array(\n                        'text' => __('List Taxonomies'),\n                        'url' => '/taxonomies/index'\n                    ),\n                    array(\n                        'text' => __('List Templates'),\n                        'url' => '/templates/index'\n                    ),\n                    array(\n                        'text' => __('Add Template'),\n                        'url' => '/templates/add',\n                        'requirement' => $isAclTemplate\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('Export'),\n                        'url' => '/events/export'\n                    ),\n                    array(\n                        'text' => __('Automation'),\n                        'url' => '/events/automation',\n                        'requirement' => $isAclAuth\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Galaxies'),\n                'url' => '/galaxies/index',\n                'children' => array(\n                    array(\n                        'text' => __('List Galaxies'),\n                        'url' => '/galaxies/index'\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Input Filters'),\n                'children' => array(\n                    array(\n                        'text' => __('Import Regexp'),\n                        'url' => '/admin/regexp/index',\n                        'requirement' => $isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Import Regexp'),\n                        'url' => '/regexp/index',\n                        'requirement' => !$isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Signature Whitelist'),\n                        'url' => '/admin/whitelists/index',\n                        'requirement' => $isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Signature Whitelist'),\n                        'url' => '/whitelists/index',\n                        'requirement' => !$isAclRegexp\n                    ),\n                    array(\n                        'text' => __('List Warninglists'),\n                        'url' => '/warninglists/index'\n                    ),\n                    array(\n                        'text' => __('List Noticelists'),\n                        'url' => '/noticelists/index'\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Global Actions'),\n                'url' => '/dashboards',\n                'children' => array(\n                    array(\n                        'text' => __('News'),\n                        'url' => '/news'\n                    ),\n                    array(\n                        'text' => __('My Profile'),\n                        'url' => '/users/view/me'\n                    ),\n                    array(\n                        'text' => __('My Settings'),\n                        'url' => '/user_settings/index/user_id:me'\n                    ),\n                    array(\n                        'text' => __('Set Setting'),\n                        'url' => '/user_settings/setSetting'\n                    ),\n                    array(\n                        'text' => __('Dashboard'),\n                        'url' => '/dashboards'\n                    ),\n                    array(\n                        'text' => __('Organisations'),\n                        'url' => '/organisations/index',\n                        'requirement' => $isAclSharingGroup || empty(Configure::read('Security.hide_organisation_index_from_users'))\n                    ),\n                    array(\n                        'text' => __('Role Permissions'),\n                        'url' => '/roles/index'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Object Templates'),\n                        'url' => '/objectTemplates/index'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Sharing Groups'),\n                        'url' => '/sharing_groups/index'\n                    ),\n                    array(\n                        'text' => __('Add Sharing Group'),\n                        'url' => '/sharing_groups/add',\n                        'requirement' => $isAclSharingGroup\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('Decaying Models Tool'),\n                        'url' => '/decayingModel/decayingTool',\n                        'requirement' => $isAdmin\n                    ),\n                    array(\n                        'text' => __('List Decaying Models'),\n                        'url' => '/decayingModel/index',\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('User Guide'),\n                        'url' => 'https://www.circl.lu/doc/misp/'\n                    ),\n                    array(\n                        'text' => __('Categories & Types'),\n                        'url' => '/pages/display/doc/categories_and_types'\n                    ),\n                    array(\n                        'text' => __('Terms & Conditions'),\n                        'url' => '/users/terms'\n                    ),\n                    array(\n                        'text' => __('Statistics'),\n                        'url' => '/users/statistics'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Discussions'),\n                        'url' => '/threads/index'\n                    ),\n                    array(\n                        'text' => __('Start Discussion'),\n                        'url' => '/posts/add'\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Sync Actions'),\n                'requirement' =>  ($isAclSync || $isAdmin || $hostOrgUser),\n                'children' => array(\n                    array(\n                        'text' => __('Create Sync Config'),\n                        'url' => '/servers/createSync',\n                        'requirement' => ($isAclSync && !$isSiteAdmin)\n                    ),\n                    array(\n                        'text' => __('Import Server Settings'),\n                        'url' => '/servers/import',\n                        'requirement' => ($isSiteAdmin)\n                    ),\n                    array(\n                        'text' => __('List Servers'),\n                        'url' => '/servers/index',\n                        'requirement' => ($isAclSync || $isAdmin)\n                    ),\n                    array(\n                        'text' => __('List Feeds'),\n                        'url' => '/feeds/index',\n                        'requirement' => ($isSiteAdmin || $hostOrgUser)\n                    ),\n                    array(\n                        'text' => __('Search Feed Caches'),\n                        'url' => '/feeds/searchCaches',\n                        'requirement' => ($isSiteAdmin || $hostOrgUser)\n                    ),\n                    array(\n                        'text' => __('List SightingDB Connections'),\n                        'url' => '/sightingdb/index',\n                        'requirement' => ($isSiteAdmin)\n                    ),\n                    array(\n                        'text' => __('Add SightingDB Connection'),\n                        'url' => '/sightingdb/add',\n                        'requirement' => ($isSiteAdmin)\n                    ),\n                    array(\n                        'text' => __('List Communities'),\n                        'url' => '/communities/index',\n                        'requirement' => ($isSiteAdmin)\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Administration'),\n                'url' => '/servers/serverSettings',\n                'requirement' =>  ($isAdmin),\n                'children' => array(\n                    array(\n                        'text' => __('List Users'),\n                        'url' => '/admin/users/index'\n                    ),\n                    array(\n                        'text' => __('List User Settings'),\n                        'url' => '/user_settings/index/user_id:all'\n                    ),\n                    array(\n                        'text' => __('Set User Setting'),\n                        'url' => '/user_settings/setSetting'\n                    ),\n                    array(\n                        'text' => __('Add User'),\n                        'url' => '/admin/users/add'\n                    ),\n                    array(\n                        'text' => __('Contact Users'),\n                        'url' => '/admin/users/email'\n                    ),\n                    array(\n                        'text' => __('User Registrations'),\n                        'url' => '/users/registrations'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Organisations'),\n                        'url' => '/organisations/index'\n                    ),\n                    array(\n                        'text' => __('Add Organisations'),\n                        'url' => '/admin/organisations/add'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Roles'),\n                        'url' => '/admin/roles/index'\n                    ),\n                    array(\n                        'text' => __('Add Roles'),\n                        'url' => '/admin/roles/add',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                    ),\n                    array(\n                        'text' => __('Server Settings & Maintenance'),\n                        'url' => '/servers/serverSettings',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Jobs'),\n                        'url' => '/jobs/index',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Scheduled Tasks'),\n                        'url' => '/tasks',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Event Block Rules'),\n                        'url' => '/servers/eventBlockRule',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.enableEventBlacklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Blacklist Event'),\n                        'url' => '/eventBlacklists/add',\n                        'requirement' => Configure::read('MISP.enableEventBlacklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Manage Event Blacklists'),\n                        'url' => '/eventBlacklists',\n                        'requirement' => Configure::read('MISP.enableEventBlacklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.enableEventBlacklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Blacklist Organisation'),\n                        'url' => '/orgBlacklists/add',\n                        'requirement' => Configure::read('MISP.enableOrgBlacklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Manage Org Blacklists'),\n                        'url' => '/orgBlacklists',\n                        'requirement' => Configure::read('MISP.enableOrgBlacklisting') !== false && $isSiteAdmin\n                    ),\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Audit'),\n                'requirement' =>  ($isAclAudit),\n                'children' => array(\n                    array(\n                        'text' => __('List Logs'),\n                        'url' => '/admin/logs/index'\n                    ),\n                    array(\n                        'text' => __('Search Logs'),\n                        'url' => '/admin/logs/search'\n                    )\n                )\n            )\n        );\n        $menu_right = array(\n            array(\n                'type' => 'root',\n                'url' => '#',\n                'html' => sprintf(\n                    '<span class=\"fas fa-star %s\" id=\"setHomePage\" title=\"Set the current page as your home page in MISP\" data-current-page=\"%s\"></span>',\n                    (!empty($homepage['path']) && $homepage['path'] === $this->here) ? 'orange' : '',\n                    $this->here\n                )\n            ),\n            array(\n                'type' => 'root',\n                'url' =>empty($homepage['path']) ? $baseurl : $baseurl . h($homepage['path']),\n                'html' => '<span class=\"logoBlueStatic bold\" id=\"smallLogo\">MISP</span>'\n            ),\n            array(\n                'type' => 'root',\n                'url' => '/dashboards',\n                'html' => sprintf(\n                    '<span class=\"white\" title=\"%s\">%s%s&nbsp;&nbsp;&nbsp;%s</span>',\n                    h($me['email']),\n                    $this->UserName->prepend($me['email']),\n                    h($loggedInUserName),\n                    sprintf(\n                        '<i class=\"fa fa-envelope %s\"></i>',\n                        (($notifications['total'] == 0) ? 'white' : 'red')\n                    )\n                )\n            ),\n            array(\n                'url' => '/users/logout',\n                'text' => __('Log out'),\n                'requirement' => empty(Configure::read('Plugin.CustomAuth_disable_logout'))\n            )\n        );\n    }\n?>\n<div id=\"topBar\" class=\"navbar navbar-inverse <?php echo $debugMode;?>\" style=\"z-index: 20;\">\n  <div class=\"navbar-inner\">\n    <ul class=\"nav\">\n        <?php\n            if (!empty($menu)) {\n                foreach ($menu as $root_element) {\n                    echo $this->element('/genericElements/GlobalMenu/global_menu_root', array('data' => $root_element));\n                }\n            }\n        ?>\n    </ul>\n    <ul class=\"nav pull-right\">\n        <?php\n            if (!empty($menu_right)) {\n                foreach ($menu_right as $root_element) {\n                    echo $this->element('/genericElements/GlobalMenu/global_menu_root', array('data' => $root_element));\n                }\n            }\n        ?>\n    </ul>\n  </div>\n</div>\n<input type=\"hidden\" class=\"keyboardShortcutsConfig\" value=\"/shortcuts/global_menu.json\" />\n<script type=\"text/javascript\">\n    $(document).ready(function() {\n        $('#setHomePage').click(function(event) {\n            event.preventDefault();\n            setHomePage();\n        })\n    });\n</script>\n", "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <?php echo $this->Html->charset(); ?>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>\n        <?php echo $title_for_layout, ' - '. h(Configure::read('MISP.title_text') ? Configure::read('MISP.title_text') : 'MISP'); ?>\n    </title>\n    <?php\n        $css_collection = array(\n            'bootstrap',\n            //'bootstrap4',\n            'bootstrap-datepicker',\n            'bootstrap-colorpicker',\n            'famfamfam-flags',\n            'font-awesome',\n            'jquery-ui',\n            'chosen.min',\n            'main',\n            'jquery-jvectormap-2.0.5',\n            array('print', array('media' => 'print'))\n        );\n        if (Configure::read('MISP.custom_css')) {\n            $css_collection[] = preg_replace('/\\.css$/i', '', Configure::read('MISP.custom_css'));\n        }\n        $js_collection = array(\n            'jquery',\n            'misp-touch',\n            'jquery-ui',\n            'chosen.jquery.min'\n        );\n        echo $this->element('genericElements/assetLoader', array(\n            'css' => $css_collection,\n            'js' => $js_collection,\n            'meta' => 'icon'\n        ));\n    ?>\n\n</head>\n<body>\n    <div id=\"popover_form\" class=\"ajax_popover_form\"></div>\n    <div id=\"popover_form_large\" class=\"ajax_popover_form ajax_popover_form_large\"></div>\n    <div id=\"popover_form_x_large\" class=\"ajax_popover_form ajax_popover_form_x_large\"></div>\n    <div id=\"popover_matrix\" class=\"ajax_popover_form ajax_popover_matrix\"></div>\n    <div id=\"popover_box\" class=\"popover_box\"></div>\n    <div id=\"screenshot_box\" class=\"screenshot_box\"></div>\n    <div id=\"confirmation_box\" class=\"confirmation_box\"></div>\n    <div id=\"gray_out\" class=\"gray_out\"></div>\n    <div id=\"container\">\n        <?php\n            echo $this->element('global_menu');\n            $topPadding = '50';\n            if (!empty($debugMode) && $debugMode != 'debugOff') {\n                $topPadding = '0';\n            }\n        ?>\n    </div>\n    <div id=\"flashContainer\" style=\"padding-top:<?php echo $topPadding; ?>px; !important;\">\n        <div id=\"main-view-container\" class=\"container-fluid \">\n            <?php\n                echo $this->Flash->render();\n            ?>\n        </div>\n    </div>\n    <div>\n        <?php\n            echo $this->fetch('content');\n        ?>\n    </div>\n    <?php\n    echo $this->element('genericElements/assetLoader', array(\n        'js' => array(\n            'bootstrap',\n            'bootstrap-timepicker',\n            'bootstrap-datepicker',\n            'bootstrap-colorpicker',\n            'misp',\n            'keyboard-shortcuts'\n        )\n    ));\n    echo $this->element('footer');\n    echo $this->element('sql_dump');\n    ?>\n    <div id = \"ajax_success_container\" class=\"ajax_container\">\n        <div id=\"ajax_success\" class=\"ajax_result ajax_success\"></div>\n    </div>\n    <div id = \"ajax_fail_container\" class=\"ajax_container\">\n        <div id=\"ajax_fail\" class=\"ajax_result ajax_fail\"></div>\n    </div>\n    <div id = \"ajax_hidden_container\" class=\"hidden\"></div>\n    <div class=\"loading\">\n        <div class=\"spinner\"></div>\n        <div class=\"loadingText\"><?php echo __('Loading');?></div>\n    </div>\n    <script type=\"text/javascript\">\n    <?php\n        if (!isset($debugMode)):\n    ?>\n        $(window).scroll(function(e) {\n            $('.actions').css('left',-$(window).scrollLeft());\n        });\n    <?php\n        endif;\n    ?>\n        var tabIsActive = true;\n        var baseurl = '<?php echo $baseurl; ?>';\n        var here = '<?php\n                if (substr($this->params['action'], 0, 6) === 'admin_') {\n                    echo $baseurl . '/admin/' . h($this->params['controller']) . '/' . h(substr($this->params['action'], 6));\n                } else {\n                    echo $baseurl . '/' . h($this->params['controller']) . '/' . h($this->params['action']);\n                }\n            ?>';\n        $(document).ready(function(){\n            $(window).blur(function() {\n                tabIsActive = false;\n            });\n            $(window).focus(function() {\n                tabIsActive = true;\n            });\n        <?php\n            if (!Configure::read('MISP.disable_auto_logout') and $me):\n        ?>\n                checkIfLoggedIn();\n        <?php\n            endif;\n        ?>\n        if ($('.alert').text().indexOf(\"$flashErrorMessage\") >= 0) {\n            var flashMessageLink = '<span class=\"useCursorPointer underline bold\" onClick=\"flashErrorPopover();\">here</span>';\n            $('.alert').html(($('.alert').html().replace(\"$flashErrorMessage\", flashMessageLink)));\n        }\n        });\n    </script>\n</body>\n</html>\n", "String.prototype.ucfirst = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nif (!String.prototype.startsWith) {\n  String.prototype.startsWith = function(searchString, position) {\n    position = position || 0;\n    return this.indexOf(searchString, position) === position;\n  };\n}\n\nfunction stringToRGB(str){\n    var hash = 0;\n    if (str.length == 0) return hash;\n    for (i = 0; i < str.length; i++) {\n        hash = ((hash<<5)-hash) + str.charCodeAt(i);\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    var c = (hash & 0x00FFFFFF)\n        .toString(16)\n        .toUpperCase();\n\n    return \"#\" + \"00000\".substring(0, 6 - c.length) + c;\n}\n\nfunction deleteObject(type, action, id, event) {\n    var destination = 'attributes';\n    var alternateDestinations = ['shadow_attributes', 'template_elements', 'taxonomies', 'galaxy_clusters', 'objects', 'object_references'];\n    if (alternateDestinations.indexOf(type) > -1) destination = type;\n    else destination = type;\n    url = \"/\" + destination + \"/\" + action + \"/\" + id;\n    $.get(url, function(data) {\n        openPopup(\"#confirmation_box\");\n        $(\"#confirmation_box\").html(data);\n    });\n}\n\nfunction quickDeleteSighting(id, rawId, context) {\n    url = \"/sightings/quickDelete/\" + id + \"/\" + rawId + \"/\" + context;\n    $.get(url, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction fetchAddSightingForm(type, attribute_id, page, onvalue) {\n    var url = \"/sightings/quickAdd/\" + attribute_id + \"/\" + type;\n    if (onvalue) {\n        url = url + \"/1\";\n    } else {\n        url = url + \"/0\";\n    }\n    $.get(url, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction flexibleAddSighting(clicked, type, attribute_id, event_id, page, placement) {\n    var $clicked = $(clicked);\n    var hoverbroken = false;\n    $clicked.off('mouseleave.temp').on('mouseleave.temp', function() {\n        hoverbroken = true;\n    });\n    setTimeout(function() {\n        $clicked.off('mouseleave.temp');\n        if ($clicked.is(\":hover\") && !hoverbroken) {\n            var html = '<div>'\n                + '<button class=\"btn btn-primary\" onclick=\"addSighting(\\'' + type + '\\', \\'' + attribute_id + '\\', \\'' + event_id + '\\', \\'' + page + '\\')\">This attribute</button>'\n                + '<button class=\"btn btn-primary\" style=\"margin-left:5px;\" onclick=\"fetchAddSightingForm(\\'' + type + '\\', \\'' + attribute_id + '\\', \\'' + page + '\\', true)\">Global value</button>'\n                + '</div>';\n            openPopover(clicked, html, true, placement);\n        }\n    }, 1000);\n}\n\nfunction publishPopup(id, type) {\n    var action = \"alert\";\n    if (type == \"publish\") action = \"publish\";\n    if (type == \"unpublish\") action = \"unpublish\";\n    if (type == \"sighting\") action = \"publishSightings\";\n    var destination = 'attributes';\n    $.get( \"/events/\" + action + \"/\" + id, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction delegatePopup(id) {\n    simplePopup(\"/event_delegations/delegateEvent/\" + id);\n}\n\nfunction genericPopup(url, popupTarget, callback) {\n    $.get(url, function(data) {\n        $(popupTarget).html(data);\n        $(popupTarget).fadeIn();\n        left = ($(window).width() / 2) - ($(popupTarget).width() / 2);\n        $(popupTarget).css({'left': left + 'px'});\n        $(\"#gray_out\").fadeIn();\n        if (callback !== undefined) {\n            callback();\n        }\n    });\n}\n\nfunction screenshotPopup(url, title) {\n    if (!url.startsWith('data:image/')) {\n        url = url.slice(0, -1);\n    }\n    popupHtml = '<it class=\"fa fa-spin fa-spinner\" style=\"font-size: xx-large; color: white; position: fixed; left: 50%; top: 50%;\"></it>';\n    url = $('<div>').text(url).html();\n    title = $('<div>').text(title).html();\n    popupHtml += '<img class=\"screenshot_box-content hidden\" src=\"' + url + '\" id=\"screenshot-image\" title=\"' + title + '\" alt=\"' + title + '\" onload=\"$(this).show(); $(this).parent().find(\\'.fa-spinner\\').remove();\"/>';\n    popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n    if (!url.startsWith('data:image/')) {\n        popupHtml += '<a class=\"close-icon useCursorPointer fa fa-expand\" style=\"right: 20px; background: black; color: white; text-decoration: none;\" target=\"_blank\" href=\"' + url + '\" ></a>';\n    }\n    popupHtml += '<div style=\"height: 20px;\"></div>'; // see bottom of image for large one\n    $('#screenshot_box').html(popupHtml);\n    $('#screenshot_box').css({\n        display: 'block',\n        top: (document.documentElement.scrollTop + 100) + 'px'\n    });\n    $(\"#gray_out\").fadeIn();\n}\n\nfunction submitPublish(id, type) {\n    $(\"#PromptForm\").submit();\n}\n\nfunction editTemplateElement(type, id) {\n    simplePopup(\"/template_elements/edit/\" + type + \"/\" + id);\n}\n\nfunction cancelPrompt(isolated) {\n    if (isolated == undefined) {\n        $(\"#gray_out\").fadeOut();\n    }\n    $(\"#confirmation_box\").fadeOut();\n    $(\"#confirmation_box\").empty();\n    $('.have-a-popover').popover('destroy');\n}\n\nfunction submitDeletion(context_id, action, type, id) {\n    var context = 'event';\n    if (type == 'template_elements') context = 'template';\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            if (type == 'eventGraph') {\n                showMessage('success', 'Network has been deleted');\n                reset_graph_history();\n            } else {\n                updateIndex(context_id, context);\n                handleGenericAjaxResponse(data);\n            }\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/\" + type + \"/\" + action + \"/\" + id,\n    });\n}\n\nfunction removeSighting(caller) {\n    var id = $(caller).data('id');\n    var rawid = $(caller).data('rawid');\n    var context = $(caller).data('context');\n    if (context != 'attribute') {\n        context = 'event';\n    }\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n            var org = \"/\" + $('#org_id').text();\n            updateIndex(id, 'event');\n            $.get( \"/sightings/listSightings/\" + rawid + \"/\" + context + org, function(data) {\n                $(\"#sightingsData\").html(data);\n            });\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/sightings/quickDelete/\" + id + \"/\" + rawid + \"/\" + context,\n    });\n}\n\nfunction toggleSetting(e, setting, id) {\n    e.preventDefault();\n    e.stopPropagation();\n    switch (setting) {\n    case 'warninglist_enable':\n        formID = '#WarninglistIndexForm';\n        dataDiv = '#WarninglistData';\n        replacementForm = '/warninglists/getToggleField/';\n        searchString = 'enabled';\n        break;\n    case 'favourite_tag':\n        formID = '#FavouriteTagIndexForm';\n        dataDiv = '#FavouriteTagData';\n        replacementForm = '/favourite_tags/getToggleField/';\n        searchString = 'Adding';\n        break;\n    case 'activate_object_template':\n        formID = '#ObjectTemplateIndexForm';\n        dataDiv = '#ObjectTemplateData';\n        replacementForm = '/ObjectTemplates/getToggleField/';\n        searchString = 'activated';\n        break;\n    case 'noticelist_enable':\n        formID = '#NoticelistIndexForm';\n        dataDiv = '#NoticelistData';\n        replacementForm = '/noticelists/getToggleField/';\n        searchString = 'enabled';\n        break;\n    }\n    $(dataDiv).val(id);\n    var formData = $(formID).serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            var result = data;\n            if (result.success) {\n                var setting = false;\n                if (result.success.indexOf(searchString) > -1) setting = true;\n                $('#checkBox_' + id).prop('checked', setting);\n            }\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $.get(replacementForm, function(data) {\n                $('#hiddenFormDiv').html(data);\n            });\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Request failed due to an unexpected error.']});\n        },\n        type:\"post\",\n        cache: false,\n        url: $(formID).attr('action'),\n    });\n}\n\nfunction initiatePasswordReset(id) {\n    $.get( \"/users/initiatePasswordReset/\" + id, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction submitPasswordReset(id) {\n    var formData = $('#PromptForm').serialize();\n    var url = \"/users/initiatePasswordReset/\" + id;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:url,\n    });\n}\n\nfunction submitMessageForm(url, form, target) {\n    if (!$('#PostMessage').val()) {\n        showMessage(\"fail\", \"Cannot submit empty message.\");\n    } else {\n        submitGenericForm(url, form, target);\n    }\n}\n\nfunction submitGenericForm(url, form, target) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#' + form).serialize(),\n        success:function (data, textStatus) {\n            $('#top').html(data);\n            showMessage(\"success\", \"Message added.\");\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        cache: false,\n        url:url,\n    });\n}\n\nfunction acceptObject(type, id, event) {\n    name = '#ShadowAttribute_' + id + '_accept';\n    var formData = $(name).serialize();\n    $.ajax({\n        data: formData,\n        success:function (data, textStatus) {\n            updateIndex(event, 'event');\n            eventUnpublish();\n            handleGenericAjaxResponse(data);\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/shadow_attributes/accept/\" + id,\n    });\n}\n\nfunction toggleCorrelation(id, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#PromptForm').serialize(),\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data, skip_reload);\n            $(\"#correlation_toggle_\" + id).prop('checked', !$(\"#correlation_toggle_\" + id).is(':checked'));\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:'/attributes/toggleCorrelation/' + id,\n    });\n}\n\nfunction toggleToIDS(id, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#PromptForm').serialize(),\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data, skip_reload);\n            $(\"#toids_toggle_\" + id).prop('checked', !$(\"#toids_toggle_\" + id).is(':checked'));\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:'/attributes/editField/' + id ,\n    });\n}\n\nfunction eventUnpublish() {\n    $('.publishButtons').show();\n    $('.exportButtons').hide();\n    $('.published').hide();\n    $('.notPublished').show();\n}\n\nfunction updateIndex(id, context, newPage) {\n    if (typeof newPage !== 'undefined') page = newPage;\n    var url, div;\n    if (context == 'event') {\n        if (typeof currentUri == 'undefined') {\n            location.reload();\n            return true;\n        }\n        url = currentUri;\n        div = \"#attributes_div\";\n    }\n    if (context == 'template') {\n        url = \"/template_elements/index/\" + id;\n        div = \"#templateElements\";\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(div).html(data);\n            if (typeof genericPopupCallback !== \"undefined\") {\n                genericPopupCallback(\"success\");\n            } else {\n                console.log(\"genericPopupCallback function not defined\");\n            }\n            if (typeof timelinePopupCallback !== \"undefined\") {\n                timelinePopupCallback(\"success\");\n            } else {\n                console.log(\"timelinepopupcallback function not defined\");\n            }\n        },\n        url: url,\n    });\n}\n\nfunction updateAttributeFieldOnSuccess(name, type, id, field, event) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            if (field != 'timestamp') {\n                $(\".loading\").show();\n            }\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            if (field != 'timestamp') {\n                $(\".loading\").hide();\n                $(name + '_solid').html(data);\n                $(name + '_placeholder').empty();\n                $(name + '_solid').show();\n            } else {\n                $('#' + type + '_' + id + '_' + 'timestamp_solid').html(data);\n            }\n        },\n        url:\"/attributes/fetchViewValue/\" + id + \"/\" + field,\n    });\n}\n\nfunction updateObjectFieldOnSuccess(name, type, id, field, event) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            if (field != 'timestamp') {\n                $(\".loading\").show();\n            }\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            if (field != 'timestamp') {\n                $(\".loading\").hide();\n                $(name + '_solid').html(data);\n                $(name + '_placeholder').empty();\n                $(name + '_solid').show();\n            } else {\n                $('#' + type + '_' + id + '_' + 'timestamp_solid').html(data);\n            }\n        },\n        url:\"/objects/fetchViewValue/\" + id + \"/\" + field,\n    });\n}\n\nfunction activateField(type, id, field, event) {\n    resetForms();\n    if (type == 'denyForm') return;\n    var objectType = 'attributes';\n    var containerName = 'Attribute';\n    if (type == 'Object') {\n        objectType = 'objects';\n        containerName = 'Object';\n    }\n    var name = '#' + type + '_' + id + '_' + field;\n    var container_name = '#' + containerName + '_' + id + '_' + field;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(container_name + '_placeholder').html(data);\n            postActivationScripts(name, type, id, field, event);\n        },\n        url:\"/\" + objectType + \"/fetchEditForm/\" + id + \"/\" + field,\n    });\n}\n\n\nfunction submitQuickTag(form) {\n    $('#' + form).submit();\n}\n\n//if someone clicks an inactive field, replace it with the hidden form field. Also, focus it and bind a focusout event, so that it gets saved if the user clicks away.\n//If a user presses enter, submit the form\nfunction postActivationScripts(name, type, id, field, event) {\n    $(name + '_field').focus();\n    inputFieldButtonActive(name + '_field');\n    if (field == 'value' || field == 'comment') {\n        autoresize($(name + '_field')[0]);\n        $(name + '_field').on('keyup', function () {\n            autoresize(this);\n        });\n    }\n    $(name + '_form').submit(function(e){\n        e.preventDefault();\n        submitForm(type, id, field, event);\n        return false;\n    });\n\n    $(name + '_form').bind(\"focusout\", function() {\n        inputFieldButtonPassive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"focusin\", function(){\n        inputFieldButtonActive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            submitForm(type, id, field, event);\n        }\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-accept').bind('click', function() {\n        submitForm(type, id, field, event);\n    });\n\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-decline').bind('click', function() {\n        resetForms();\n    });\n\n    $(name + '_solid').hide();\n}\n\nfunction quickEditHover(td, type, id, field, event) {\n    var $td = $(td);\n    $td.find('#quickEditButton').remove(); // clean all similar if exist\n    var $div = $('<div id=\"quickEditButton\"></div>');\n    $div.addClass('quick-edit-row-div');\n    var $span = $('<span></span>');\n    $span.addClass('fa-as-icon fa fa-edit');\n    $span.css('font-size', '12px');\n    $div.append($span);\n    $td.find(\"[id*=_solid]\").append($div);\n\n    $span.click(function() {\n        activateField(type, id, field, event);\n    });\n\n    $td.off('mouseleave').on('mouseleave', function() {\n        $div.remove();\n    });\n}\n\nfunction addSighting(type, attribute_id, event_id, page) {\n    $('#Sighting_' + attribute_id + '_type').val(type);\n    $.ajax({\n        data: $('#Sighting_' + attribute_id).closest(\"form\").serialize(),\n        cache: false,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n            var result = data;\n            if (result.saved == true) {\n                $('.sightingsCounter').each(function( counter ) {\n                    $(this).html(parseInt($(this).html()) + 1);\n                });\n                if (typeof currentUri == 'undefined') {\n                    location.reload();\n                } else {\n                    updateIndex(event_id, 'event');\n                }\n            }\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            updateIndex(context, 'event');\n        },\n        type:\"post\",\n        url:\"/sightings/add/\" + attribute_id\n    });\n}\n\nfunction resetForms() {\n    $('.inline-field-solid').show();\n    $('.inline-field-placeholder').empty();\n}\n\nfunction inputFieldButtonActive(selector) {\n    $(selector).closest('.inline-input-container').children('.inline-input-accept').removeClass('inline-input-passive').addClass('inline-input-active');\n    $(selector).closest('.inline-input-container').children('.inline-input-decline').removeClass('inline-input-passive').addClass('inline-input-active');\n}\n\nfunction inputFieldButtonPassive(selector) {\n    $(selector).closest('.inline-input-container').children('.inline-input-accept').addClass('inline-input-passive').removeClass('inline-input-active');\n    $(selector).closest('.inline-input-container').children('.inline-input-daecline').addClass('inline-input-passive').removeClass('inline-input-active');\n}\n\nfunction autoresize(textarea) {\n    textarea.style.height = '20px';\n    textarea.style.height = (textarea.scrollHeight) + 'px';\n}\n\n// submit the form - this can be triggered by unfocusing the activated form field or by submitting the form (hitting enter)\n// after the form is submitted, intercept the response and act on it\nfunction submitForm(type, id, field, context) {\n    var object_type = 'attributes';\n    var action = \"editField\";\n    var name = '#' + type + '_' + id + '_' + field;\n    if (type == 'Object') {\n        object_type = 'objects';\n    }\n    $.ajax({\n        data: $(name + '_field').closest(\"form\").serialize(),\n        cache: false,\n        success:function (data, textStatus) {\n            handleAjaxEditResponse(data, name, type, id, field, context);\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            updateIndex(context, 'event');\n        },\n        type:\"post\",\n        url:\"/\" + object_type + \"/\" + action + \"/\" + id\n    });\n    $(name + '_field').unbind(\"keyup\");\n    $(name + '_form').unbind(\"focusout\");\n    return false;\n};\n\nfunction quickSubmitTagForm(selected_tag_ids, addData) {\n    var event_id = addData.id;\n    var localFlag = '';\n    if (undefined != addData['local'] && addData['local']) {\n        localFlag = '/local:1';\n    }\n    url = \"/events/addTag/\" + event_id + localFlag;\n    fetchFormDataAjax(url, function(formData) {\n        $('body').append($('<div id=\"temp\"/>').html(formData));\n        $('#temp #EventTag').val(JSON.stringify(selected_tag_ids));\n        $.ajax({\n            data: $('#EventAddTagForm').serialize(),\n            cache: false,\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                loadEventTags(event_id);\n                loadGalaxies(event_id, 'event');\n                handleGenericAjaxResponse(data);\n            },\n            error:function() {\n                showMessage('fail', 'Could not add tag.');\n                loadEventTags(event_id);\n                loadGalaxies(event_id, 'event');\n            },\n            complete:function() {\n                $('#temp').remove();\n                $(\"#popover_form\").fadeOut();\n                $(\"#gray_out\").fadeOut();\n                $(\".loading\").hide();\n                $('#temp').remove();\n            },\n            type:\"post\",\n            url:url\n        });\n    });\n}\n\nfunction quickSubmitAttributeTagForm(selected_tag_ids, addData) {\n    var attribute_id = addData.id;\n    var localFlag = '';\n    if (undefined != addData['local'] && addData['local']) {\n        localFlag = '/local:1';\n    }\n    url = \"/attributes/addTag/\" + attribute_id + localFlag;\n    fetchFormDataAjax(url, function(formData) {\n        $('body').append($('<div id=\"temp\"/>').html(formData));\n        $('#temp #AttributeTag').val(JSON.stringify(selected_tag_ids));\n        if (attribute_id == 'selected') {\n            $('#AttributeAttributeIds').val(getSelected());\n        }\n        $.ajax({\n            data: $('#AttributeAddTagForm').serialize(),\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                if (attribute_id == 'selected') {\n                    updateIndex(0, 'event');\n                } else {\n                    loadAttributeTags(attribute_id);\n                    loadGalaxies(attribute_id, 'attribute');\n                }\n                handleGenericAjaxResponse(data);\n            },\n            error:function() {\n                showMessage('fail', 'Could not add tag.');\n                loadAttributeTags(attribute_id);\n                loadGalaxies(attribute_id, 'attribute');\n            },\n            complete:function() {\n                $(\"#popover_form\").fadeOut();\n                $(\"#gray_out\").fadeOut();\n                $(\".loading\").hide();\n                $('#temp').remove();\n            },\n            type:\"post\",\n            url: url\n        });\n    });\n}\n\nfunction quickSubmitTagCollectionTagForm(selected_tag_ids, addData) {\n    var tag_collection_id = addData.id;\n    var localFlag = '';\n    if (undefined != addData['local'] && addData['local']) {\n        localFlag = '/local:1';\n    }\n    url = \"/tag_collections/addTag/\" + tag_collection_id + localFlag;\n    fetchFormDataAjax(url, function(formData) {\n        $('body').append($('<div id=\"temp\"/>').html(formData));\n        $('#temp #TagCollectionTag').val(JSON.stringify(selected_tag_ids));\n        $.ajax({\n            data: $('#TagCollectionAddTagForm').serialize(),\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                handleGenericAjaxResponse(data);\n                refreshTagCollectionRow(tag_collection_id);\n            },\n            error:function() {\n                showMessage('fail', 'Could not add tag.');\n                loadTagCollectionTags(tag_collection_id);\n            },\n            complete:function() {\n                $(\"#popover_form\").fadeOut();\n                $(\"#gray_out\").fadeOut();\n                $(\".loading\").hide();\n                $('#temp').remove();\n            },\n            type:\"post\",\n            url: url\n        });\n    });\n}\n\nfunction refreshTagCollectionRow(tag_collection_id) {\n    $.ajax({\n        type:\"get\",\n        url:\"/tag_collections/getRow/\" + tag_collection_id,\n        error:function() {\n            showMessage('fail', 'Could not fetch updates to the modified row.');\n        },\n        success: function (data, textStatus) {\n            $('[data-row-id=\"' + tag_collection_id + '\"]').replaceWith(data);\n        }\n    });\n\n}\n\nfunction handleAjaxEditResponse(data, name, type, id, field, event) {\n    responseArray = data;\n    if (type == 'Attribute') {\n        if (responseArray.saved) {\n            var msg = responseArray.success !== undefined ? responseArray.success : responseArray.message;\n            showMessage('success', msg);\n            updateAttributeFieldOnSuccess(name, type, id, field, event);\n            updateAttributeFieldOnSuccess(name, type, id, 'timestamp', event);\n            eventUnpublish();\n        } else {\n            showMessage('fail', 'Validation failed: ' + responseArray.errors.value);\n            updateAttributeFieldOnSuccess(name, type, id, field, event);\n        }\n    }\n    if (type == 'ShadowAttribute') {\n        updateIndex(event, 'event');\n    } else if (type == 'Object') {\n        if (responseArray.saved) {\n            var msg = responseArray.success !== undefined ? responseArray.success : responseArray.message;\n            showMessage('success', msg);\n            updateObjectFieldOnSuccess(name, type, id, field, event);\n            updateObjectFieldOnSuccess(name, type, id, 'timestamp', event);\n            eventUnpublish();\n        } else {\n            showMessage('fail', 'Validation failed: ' + responseArray.errors.value);\n            updateObjectFieldOnSuccess(name, type, id, field, event);\n        }\n    }\n    if (responseArray.hasOwnProperty('check_publish')) {\n        checkAndSetPublishedInfo();\n    }\n}\n\nfunction handleGenericAjaxResponse(data, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    if (typeof data == 'string') {\n        responseArray = JSON.parse(data);\n    } else {\n        responseArray = data;\n    }\n\n    // remove remaining popovers\n    cancelPrompt();\n    // in case the origin node has been deleted (e.g. tags)\n    $('.popover').remove();\n\n    if (responseArray.saved) {\n        showMessage('success', responseArray.success);\n        if (responseArray.hasOwnProperty('check_publish')) {\n            checkAndSetPublishedInfo(skip_reload);\n        }\n        return true;\n    } else {\n        showMessage('fail', responseArray.errors);\n        return false;\n    }\n}\n\nfunction toggleAllAttributeCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select_attribute\").prop(\"checked\", true);\n        $(\".select_proposal\").prop(\"checked\", true);\n    } else {\n        $(\".select_attribute\").prop(\"checked\", false);\n        $(\".select_proposal\").prop(\"checked\", false);\n    }\n}\n\nfunction toggleAllCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select\").prop(\"checked\", true);\n    } else {\n        $(\".select\").prop(\"checked\", false);\n    }\n}\n\nfunction toggleAllTaxonomyCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select_taxonomy\").prop(\"checked\", true);\n    } else {\n        $(\".select_taxonomy\").prop(\"checked\", false);\n    }\n}\n\nfunction attributeListAnyAttributeCheckBoxesChecked() {\n    if ($('.select_attribute:checked').length > 0) $('.mass-select').removeClass('hidden');\n    else $('.mass-select').addClass('hidden');\n}\n\nfunction listCheckboxesChecked() {\n    if ($('.select:checked').length > 0) $('.mass-select').removeClass('hidden');\n    else $('.mass-select').addClass('hidden');\n}\n\nfunction attributeListAnyProposalCheckBoxesChecked() {\n    if ($('.select_proposal:checked').length > 0) $('.mass-proposal-select').removeClass('hidden');\n    else $('.mass-proposal-select').addClass('hidden');\n}\n\nfunction taxonomyListAnyCheckBoxesChecked() {\n    if ($('.select_taxonomy:checked').length > 0) $('.mass-select').show();\n    else $('.mass-select').hide();\n}\n\nfunction multiSelectDeleteEvents() {\n    var selected = [];\n    $(\".select\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var temp = $(this).data(\"id\");\n            if (temp != null) {\n                selected.push(temp);\n            }\n        }\n    });\n    $.get(\"/events/delete/\" + JSON.stringify(selected), function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction multiSelectToggleFeeds(on, cache) {\n    var selected = [];\n    $(\".select\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var temp = $(this).data(\"id\");\n            if (temp != null) {\n                selected.push(temp);\n            }\n        }\n    });\n    $.get(\"/feeds/toggleSelected/\" + on + \"/\" + cache + \"/\" + JSON.stringify(selected), function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction multiSelectDeleteEventBlacklist(on, cache) {\n    var selected = [];\n    $(\".select\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var temp = $(this).data(\"id\");\n            if (temp != null) {\n                selected.push(temp);\n            }\n        }\n    });\n    $.get(\"/eventBlacklists/massDelete?ids=\" + JSON.stringify(selected), function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction multiSelectAction(event, context) {\n    var settings = {\n            deleteAttributes: {\n                confirmation: \"Are you sure you want to delete all selected attributes?\",\n                controller: \"attributes\",\n                camelCase: \"Attribute\",\n                alias: \"attribute\",\n                action: \"delete\"\n            },\n            acceptProposals: {\n                confirmation: \"Are you sure you want to accept all selected proposals?\",\n                controller: \"shadow_attributes\",\n                camelCase: \"ShadowAttribute\",\n                alias: \"proposal\",\n                action: \"accept\"\n            },\n            discardProposals: {\n                confirmation: \"Are you sure you want to discard all selected proposals?\",\n                controller: \"shadow_attributes\",\n                camelCase: \"ShadowAttribute\",\n                alias: \"proposal\",\n                action: \"discard\"\n            },\n    };\n    var answer = confirm(\"Are you sure you want to \" + settings[context][\"action\"] + \" all selected \" + settings[context][\"alias\"] + \"s?\");\n    if (answer) {\n        var selected = [];\n        $(\".select_\" + settings[context][\"alias\"]).each(function() {\n            if ($(this).is(\":checked\")) {\n                var temp= $(this).data(\"id\");\n                selected.push(temp);\n            }\n        });\n        $('#' + settings[context][\"camelCase\"] + 'Ids' + settings[context][\"action\"].ucfirst()).attr('value', JSON.stringify(selected));\n        var formData = $('#' + settings[context][\"action\"] + '_selected').serialize();\n        if (context == 'deleteAttributes') {\n            var url = $('#delete_selected').attr('action');\n            console.log(url);\n        } else {\n            var url = \"/\" + settings[context][\"controller\"] + \"/\" + settings[context][\"action\"] + \"Selected/\" + event;\n        }\n        $.ajax({\n            data: formData,\n            cache: false,\n            type:\"POST\",\n            url: url,\n            success:function (data, textStatus) {\n                updateIndex(event, 'event');\n                var result = handleGenericAjaxResponse(data);\n                if (settings[context][\"action\"] != \"discard\" && result == true) eventUnpublish();\n            },\n        });\n    }\n    return false;\n}\n\nfunction editSelectedAttributes(event) {\n    var selectedAttributeIds = getSelected();\n    simplePopup(\"/attributes/editSelected/\" + event + \"/\" + selectedAttributeIds);\n}\n\nfunction addSelectedTaxonomies(taxonomy) {\n    $.get(\"/taxonomies/taxonomyMassConfirmation/\"+taxonomy, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction proposeObjectsFromSelectedAttributes(clicked, event_id) {\n    var selectedAttributeIds = getSelected();\n    popoverPopup(clicked, event_id + '/' + selectedAttributeIds, 'objects', 'proposeObjectsFromAttributes');\n}\n\nfunction hideSelectedTags(taxonomy) {\n\t$.get(\"/taxonomies/taxonomyMassHide/\"+taxonomy, function(data) {\n\t\t$(\"#confirmation_box\").html(data);\n\t\topenPopup(\"#confirmation_box\");\n\t});\n}\n\nfunction unhideSelectedTags(taxonomy) {\n\t$.get(\"/taxonomies/taxonomyMassUnhide/\"+taxonomy, function(data) {\n\t\t$(\"#confirmation_box\").html(data);\n\t\topenPopup(\"#confirmation_box\");\n\t});\n}\n\nfunction submitMassTaxonomyTag() {\n    $('#PromptForm').submit();\n}\n\nfunction submitMassEventDelete() {\n    $('#PromptForm').trigger('submit');\n    event.preventDefault();\n}\n\nfunction getSelected() {\n    var selected = [];\n    $(\".select_attribute\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var test = $(this).data(\"id\");\n            selected.push(test);\n        }\n    });\n    return JSON.stringify(selected);\n}\n\nfunction getSelectedTaxonomyNames() {\n    var selected = [];\n    $(\".select_taxonomy\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var row = $(this).data(\"id\");\n            var temp = $('#tag_' + row).html();\n            temp = $(\"<div/>\").html(temp).text();\n            selected.push(temp);\n        }\n    });\n    $('#TaxonomyNameList').val(JSON.stringify(selected));\n}\n\nfunction loadEventTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".eventTagContainer\").html(data);\n        },\n        url:\"/tags/showEventTag/\" + id,\n    });\n}\n\nfunction loadGalaxies(id, scope) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            if (scope == 'event') {\n                $(\"#galaxies_div\").html(data);\n            } else if (scope == 'attribute') {\n                $(\"#attribute_\" + id + \"_galaxy\").html(data);\n            }\n        },\n        url:\"/galaxies/showGalaxies/\" + id + \"/\" + scope,\n    });\n}\n\nfunction loadTagCollectionTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".tagCollectionTagContainer\").html(data);\n        },\n        url:\"/tags/showEventTag/\" + id,\n    });\n}\n\nfunction removeEventTag(event, tag) {\n    var answer = confirm(\"Are you sure you want to remove this tag from the event?\");\n    if (answer) {\n        var formData = $('#removeTag_' + tag).serialize();\n        $.ajax({\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            data: formData,\n            type:\"POST\",\n            cache: false,\n            url:\"/events/removeTag/\" + event + '/' + tag,\n            success:function (data, textStatus) {\n                loadEventTags(event);\n                handleGenericAjaxResponse(data);\n            },\n            complete:function() {\n                $(\".loading\").hide();\n            }\n        });\n    }\n    return false;\n}\n\nfunction loadAttributeTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\"#Attribute_\"+id+\"_tr .attributeTagContainer\").html(data);\n        },\n        url:\"/tags/showAttributeTag/\" + id\n    });\n}\n\nfunction removeObjectTagPopup(clicked, context, object, tag) {\n    $.get( \"/\" + context + \"s/removeTag/\" + object + '/' + tag, function(data) {\n        openPopover(clicked, data);\n    });\n}\n\nfunction removeObjectTag(context, object, tag) {\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        type:\"POST\",\n        cache: false,\n        url:\"/\" + context.toLowerCase() + \"s/removeTag/\" + object + '/' + tag,\n        success:function (data, textStatus) {\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            if (context == 'Attribute') {\n                loadAttributeTags(object);\n            } else if (context == 'tag_collection') {\n                refreshTagCollectionRow(object);\n            } else {\n                loadEventTags(object);\n            }\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        }\n    });\n    return false;\n}\n\nfunction redirectAddObject(templateId, additionalData) {\n    var eventId = additionalData['event_id'];\n    window.location = '/objects/add/' + eventId + '/' + templateId;\n}\n\nfunction clickCreateButton(event, type) {\n    var destination = 'attributes';\n    if (type == 'Proposal') destination = 'shadow_attributes';\n    simplePopup(\"/\" + destination + \"/add/\" + event);\n}\n\nfunction openGenericModal(url) {\n    $.ajax({\n        type: \"get\",\n        url: url,\n        success: function (data) {\n            $('#genericModal').remove();\n            $('body').append(data);\n            $('#genericModal').modal();\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        }\n    });\n}\n\nfunction openGenericModalPost(url, body) {\n    $.ajax({\n        data: body,\n        type: \"post\",\n        url: url,\n        success: function (data) {\n            $('#genericModal').remove();\n            $('body').append(data);\n            $('#genericModal').modal();\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        }\n    });\n}\n\nfunction submitPopoverForm(context_id, referer, update_context_id, modal, popover_dismiss_id_to_close) {\n    var url = null;\n    var context = 'event';\n    var contextNamingConvention = 'Attribute';\n    var closePopover = true;\n    switch (referer) {\n        case 'addTextElement':\n            context = 'template';\n            contextNamingConvention = 'TemplateElementText';\n            break;\n        case 'editTextElement':\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementText';\n            break;\n        case 'addAttributeElement':\n            context = 'template';\n            contextNamingConvention = 'TemplateElementAttribute';\n            break;\n        case 'editAttributeElement':\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementAttribute';\n            break;\n        case 'addFileElement':\n            context = 'template';\n            contextNamingConvention = 'TemplateElementFile';\n            break;\n        case 'editFileElement':\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementFile';\n            break;\n        case 'addSighting':\n            closePopover = false;\n            break;\n        case 'addObjectReference':\n            url = \"/objectReferences/add/\" + context_id;\n            break;\n        case 'quickAddAttributeForm':\n            url = \"/objects/quickAddAttributeForm/\" + context_id;\n            break;\n        case 'acceptUserRegistrations':\n            url = \"/users/acceptRegistrations/\" + context_id\n            break;\n    }\n    if ($(\"#submitButton\").parent().hasClass('modal-footer')) {\n        var $form = $(\"#submitButton\").parent().parent().find('.modal-body form');\n        url = baseurl + $form.attr('action');\n    } else {\n        var $form = $(\"#submitButton\").closest(\"form\");\n        url = baseurl + $form.attr('action');\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            if (modal) {\n                if (closePopover) {\n                    $('#genericModal').modal('hide');\n                }\n            } else {\n                if (closePopover) {\n                    $(\"#gray_out\").fadeOut();\n                    $(\"#popover_form\").fadeOut();\n                    if (popover_dismiss_id_to_close !== undefined) {\n                        $('[data-dismissid=\"' + popover_dismiss_id_to_close + '\"]').popover('destroy');\n                    }\n                    $(\".loading\").show();\n                }\n            }\n        },\n        data: $form.serialize(),\n        success:function (data, textStatus) {\n            var result;\n            if (closePopover) {\n                if (modal) {\n                    result = handleAjaxModalResponse(data, context_id, url, referer, context, contextNamingConvention);\n                } else {\n                    result = handleAjaxPopoverResponse(data, context_id, url, referer, context, contextNamingConvention);\n                }\n            }\n            if (referer == 'addSighting') {\n                updateIndex(update_context_id, 'event');\n                $.get( \"/sightings/listSightings/\" + id + \"/attribute\", function(data) {\n                    $(\"#sightingsData\").html(data);\n                });\n                $('.sightingsToggle').removeClass('btn-primary');\n                $('.sightingsToggle').addClass('btn-inverse');\n                $('#sightingsListAllToggle').removeClass('btn-inverse');\n                $('#sightingsListAllToggle').addClass('btn-primary');\n            }\n            if (\n                (\n                    context == 'event' &&\n                    (referer == 'add' || referer == 'massEdit' || referer == 'replaceAttributes' || referer == 'addObjectReference' || referer == 'quickAddAttributeForm')\n                )\n            ){\n                eventUnpublish();\n            }\n        },\n        error: function (jqXHR, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        },\n        complete: function () {\n            $(\".loading\").hide();\n        },\n        type: \"post\",\n        url: url,\n    });\n    return false;\n};\n\nfunction handleAjaxModalResponse(response, context_id, url, referer, context, contextNamingConvention) {\n    responseArray = response;\n    var message = null;\n    var result = \"fail\";\n    if (responseArray.saved) {\n        updateIndex(context_id, context);\n        if (responseArray.success) {\n            showMessage(\"success\", responseArray.success);\n            result = \"success\";\n        }\n        if (responseArray.errors) {\n            showMessage(\"fail\", responseArray.errors);\n        }\n    } else {\n        var savedArray = saveValuesForPersistance();\n        $.ajax({\n            async:true,\n            dataType:\"html\",\n            success:function (data, textStatus) {\n                $('#genericModal').remove();\n                $('body').append(data);\n                $('#genericModal').modal();\n                var error_context = context.charAt(0).toUpperCase() + context.slice(1);\n                handleValidationErrors(responseArray.errors, context, contextNamingConvention);\n                result = \"success\";\n                if (!$.isEmptyObject(responseArray)) {\n                    result = \"fail\";\n                }\n                recoverValuesFromPersistance(savedArray);\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                showMessage('fail', textStatus + \": \" + errorThrown);\n            },\n            complete: function () {\n                $(\".loading\").hide();\n            },\n            url:url\n        });\n    }\n    return result;\n}\n\nfunction handleAjaxPopoverResponse(response, context_id, url, referer, context, contextNamingConvention) {\n    responseArray = response;\n    var message = null;\n    var result = \"fail\";\n    if (responseArray.saved) {\n        updateIndex(context_id, context);\n        if (responseArray.success) {\n            showMessage(\"success\", responseArray.success);\n            result = \"success\";\n        }\n        if (responseArray.errors) {\n            showMessage(\"fail\", responseArray.errors);\n        }\n    } else {\n        var savedArray = saveValuesForPersistance();\n        $.ajax({\n            async:true,\n            dataType:\"html\",\n            success:function (data, textStatus) {\n                $(\"#popover_form\").html(data);\n                openPopup(\"#popover_form\");\n                var error_context = context.charAt(0).toUpperCase() + context.slice(1);\n                handleValidationErrors(responseArray.errors, context, contextNamingConvention);\n                result = \"success\";\n                if (!$.isEmptyObject(responseArray)) {\n                    result = \"fail\";\n                    $(\"#formWarning\").show();\n                    $(\"#formWarning\").html('The object(s) could not be saved. Please, try again.');\n                }\n                recoverValuesFromPersistance(savedArray);\n                $(\".loading\").hide();\n            },\n            url:url\n        });\n    }\n    return result;\n}\n\n//before we update the form (in case the action failed), we want to retrieve the data from every field, so that we can set the fields in the new form that we fetch\nfunction saveValuesForPersistance() {\n    var formPersistanceArray = new Array();\n    for (i = 0; i < fieldsArray.length; i++) {\n        formPersistanceArray[fieldsArray[i]] = $('#' + fieldsArray[i]).val();\n    }\n    return formPersistanceArray;\n}\n\nfunction recoverValuesFromPersistance(formPersistanceArray) {\n    for (i = 0; i < fieldsArray.length; i++) {\n        $('#' + fieldsArray[i]).val(formPersistanceArray[fieldsArray[i]]);\n    }\n}\n\nfunction handleValidationErrors(responseArray, context, contextNamingConvention) {\n    for (var k in responseArray) {\n        var elementName = k.charAt(0).toUpperCase() + k.slice(1);\n        $(\"#\" + contextNamingConvention + elementName).parent().addClass(\"error\");\n        $(\"#\" + contextNamingConvention + elementName).parent().append(\"<div class=\\\"error-message\\\">\" + responseArray[k] + \"</div>\");\n    }\n}\n\nfunction toggleHistogramType(type, old) {\n    var done = false;\n    old.forEach(function(entry) {\n        if (type == entry) {\n            done = true;\n            old.splice(old.indexOf(entry), 1);\n        }\n    });\n    if (done == false) old.push(type);\n    updateHistogram(JSON.stringify(old));\n}\n\nfunction updateHistogram(selected) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#histogram\").html(data);\n        },\n        url:\"/users/histogram/\" + selected,\n    });\n}\n\nfunction showMessage(success, message, context) {\n    if (typeof context !== \"undefined\") {\n        $(\"#ajax_\" + success, window.parent.document).html(message);\n        var duration = 1000 + (message.length * 40);\n        $(\"#ajax_\" + success + \"_container\", window.parent.document).fadeIn(\"slow\");\n        $(\"#ajax_\" + success + \"_container\", window.parent.document).delay(duration).fadeOut(\"slow\");\n    }\n    $(\"#ajax_\" + success).html(message);\n    var duration = 1000 + (message.length * 40);\n    $(\"#ajax_\" + success + \"_container\").fadeIn(\"slow\");\n    $(\"#ajax_\" + success + \"_container\").delay(duration).fadeOut(\"slow\");\n}\n\nfunction cancelPopoverForm(id) {\n    $(\"#gray_out\").fadeOut();\n    $(\"#popover_form\").fadeOut();\n    $(\"#popover_form_large\").fadeOut();\n    $(\"#screenshot_box\").fadeOut();\n    $(\"#popover_box\").fadeOut();\n    $(\"#confirmation_box\").fadeOut();\n    $('#gray_out').fadeOut();\n    $('#popover_form').fadeOut();\n    if (id !== undefined && id !== '') {\n        $(id).fadeOut();\n    }\n}\n\nfunction activateTagField() {\n    $(\"#addTagButton\").hide();\n    $(\"#addTagField\").show();\n}\n\nfunction tagFieldChange() {\n    if ($(\"#addTagField :selected\").val() > 0) {\n        var selected_id = $(\"#addTagField :selected\").val();\n        var selected_text = $(\"#addTagField :selected\").text();\n        if ($.inArray(selected_id, selectedTags)==-1) {\n            selectedTags.push(selected_id);\n            appendTemplateTag(selected_id);\n        }\n    }\n    $(\"#addTagButton\").show();\n    $(\"#addTagField\").hide();\n}\n\nfunction appendTemplateTag(selected_id) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#tags\").append(data);\n        },\n        url:\"/tags/viewTag/\" + selected_id,\n    });\n    updateSelectedTags();\n}\n\nfunction addAllTags(tagArray) {\n    parsedTagArray = JSON.parse(tagArray);\n    parsedTagArray.forEach(function(tag) {\n        appendTemplateTag(tag);\n    });\n}\n\nfunction removeTemplateTag(id, name) {\n    selectedTags.forEach(function(tag) {\n        if (tag == id) {\n            var index = selectedTags.indexOf(id);\n            if (index > -1) {\n                selectedTags.splice(index, 1);\n                updateSelectedTags();\n            }\n        }\n    });\n    $('#tag_bubble_' + id).remove();\n}\n\nfunction updateSelectedTags() {\n    $('#hiddenTags').attr(\"value\", JSON.stringify(selectedTags));\n}\n\nfunction saveElementSorting(order) {\n    $.ajax({\n        data: order,\n        dataType:\"json\",\n        contentType: \"application/json\",\n        cache: false,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/templates/saveElementSorting/\",\n    });\n}\n\nfunction templateAddElementClicked(id) {\n    simplePopup(\"/template_elements/templateElementAddChoices/\" + id);\n}\n\nfunction templateAddElement(type, id) {\n    simplePopup(\"/template_elements/add/\" + type + \"/\" + id);\n}\n\nfunction templateUpdateAvailableTypes() {\n    $(\"#innerTypes\").empty();\n    var type = $(\"#TemplateElementAttributeType option:selected\").text();\n    var complex = $('#TemplateElementAttributeComplex:checked').val();\n    if (complex && type != 'Select Type') {\n        currentTypes.forEach(function(entry) {\n            $(\"#innerTypes\").append(\"<div class=\\\"templateTypeBox\\\" id=\\\"\" + entry + \"TypeBox\\\">\" + entry + \"</div>\");\n        });\n        $('#outerTypes').show();\n    }\n    else $('#outerTypes').hide();\n}\n\nfunction populateTemplateTypeDropdown() {\n    var cat = $(\"#TemplateElementAttributeCategory option:selected\").text();\n    currentTypes = [];\n    if (cat == 'Select Category') {\n        $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n    } else {\n        var complex = $('#TemplateElementAttributeComplex:checked').val();\n        if (cat in typeGroupCategoryMapping) {\n            $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n            typeGroupCategoryMapping[cat].forEach(function(entry) {\n                $('#TemplateElementAttributeType').append(\"<option>\" + entry + \"</option>\");\n            });\n        } else {\n            complex = false;\n        }\n        if (!complex) {\n            $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n            categoryTypes[cat].forEach(function(entry) {\n                $('#TemplateElementAttributeType').append(\"<option>\" + entry + \"</option>\");\n            });\n        }\n    }\n}\n\nfunction templateElementAttributeTypeChange() {\n    var complex = $('#TemplateElementAttributeComplex:checked').val();\n    var type = $(\"#TemplateElementAttributeType option:selected\").text();\n    currentTypes = [];\n    if (type != 'Select Type') {\n        if (complex) {\n            complexTypes[type][\"types\"].forEach(function(entry) {\n                currentTypes.push(entry);\n            });\n        } else {\n            currentTypes.push(type);\n        }\n    } else {\n        currentTypes = [];\n    }\n    $(\"#typeJSON\").html(JSON.stringify(currentTypes));\n    templateUpdateAvailableTypes();\n}\n\nfunction templateElementAttributeCategoryChange(category) {\n    if (category in typeGroupCategoryMapping) {\n        $('#complexToggle').show();\n    } else {\n        $('#complexToggle').hide();\n    }\n    if (category != 'Select Type') {\n        populateTemplateTypeDropdown();\n    }\n    templateUpdateAvailableTypes();\n}\n\nfunction templateElementFileCategoryChange(category) {\n    if (category == '') {\n        $(\"#TemplateElementFileMalware\")[0].disabled = true;\n        $(\"#TemplateElementFileMalware\")[0].checked = false;\n    } else {\n        if (categoryArray[category].length == 2) {\n            $(\"#TemplateElementFileMalware\")[0].disabled = false;\n            $(\"#TemplateElementFileMalware\")[0].checked = true;\n        } else {\n            $(\"#TemplateElementFileMalware\")[0].disabled = true;\n            if (categoryArray[category] == 'attachment') $(\"#TemplateElementFileMalware\")[0].checked = false;\n            else $(\"#TemplateElementFileMalware\")[0].checked = true;\n        }\n    }\n}\n\nfunction openPopup(id, adjust_layout, callback) {\n    adjust_layout = adjust_layout === undefined ? true : adjust_layout;\n    if (adjust_layout) {\n        var window_height = $(window).height();\n        var popup_height = $(id).height();\n        if (window_height < popup_height) {\n            $(id).css(\"top\", 50);\n            $(id).css(\"height\", window_height);\n            $(id).addClass('vertical-scroll');\n        } else {\n            if (window_height > (300 + popup_height)) {\n                var top_offset = ((window_height - popup_height) / 2) - 150;\n            } else {\n                var top_offset = (window_height - popup_height) / 2;\n            }\n            $(id).css(\"top\", top_offset + 'px');\n        }\n    }\n    $(\"#gray_out\").fadeIn();\n    $(id).fadeIn(400, function() {\n        if (callback !== undefined) {\n            callback();\n        }\n    });\n}\n\nfunction openPopover(clicked, data, hover, placement, callback) {\n    hover = hover === undefined ? false : hover;\n    placement = placement === undefined ? 'right' : placement;\n    /* popup handling */\n    var $clicked = $(clicked);\n    var randomId = $clicked.attr('data-dismissid') !== undefined ? $clicked.attr('data-dismissid') : Math.random().toString(36).substr(2,9); // used to recover the button that triggered the popover (so that we can destroy the popover)\n    var loadingHtml = '<div style=\"height: 75px; width: 75px;\"><div class=\"spinner\"></div><div class=\"loadingText\">Loading</div></div>';\n    $clicked.attr('data-dismissid', randomId);\n    var closeButtonHtml = '<button type=\"button\" class=\"close\" style=\"margin-left: 5px;\" onclick=\"$(&apos;[data-dismissid=&quot;' + randomId + '&quot;]&apos;).popover(\\'hide\\');\">\u00d7</button>';\n\n    if (!$clicked.data('popover')) {\n        $clicked.addClass('have-a-popover');\n        var popoverOptions = {\n            html: true,\n            placement: placement,\n            trigger: 'manual',\n            content: loadingHtml,\n            container: 'body',\n            template: '<div class=\"popover\" role=\"tooltip\" data-dismissid=\"' + randomId + '\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"><div class=\"data-content\"></div></div></div>'\n        };\n        $clicked.popover(popoverOptions)\n        .on('shown.bs.popover', function(event) {\n            var $this = $(this);\n            var title = $this.attr('title');\n            var popover = $('div.popover[data-dismissid=\"' + randomId + '\"]');\n            title = title === \"\" ? $this.attr('data-original-title') : title;\n\n            if (title === \"\") {\n                title = \"&nbsp;\";\n                // adjust popover position (title was empty)\n                var top = popover.offset().top;\n                popover.css('top', (top-17) + 'px');\n            }\n            var popoverTitle = popover.find('h3.popover-title');\n            popoverTitle.html(title + closeButtonHtml);\n            if (callback !== undefined) {\n                callback(popover);\n            }\n        })\n        .on('keydown.volatilePopover', function(e) {\n            if(e.keyCode == 27) { // ESC\n                $(this).popover('destroy');\n                $(this).off('keydown.volatilePopover');\n            }\n        });\n\n        if (hover) {\n            $clicked.on('mouseenter', function() {\n                var _this = this;\n                $clicked.popover('show');\n                $(\".popover\").on(\"mouseleave\", function() { // close popover when leaving it\n                    $(_this).popover('hide');\n                });\n            })\n            .on('mouseleave', function() { // close popover if button not hovered (timeout)\n                var _this = this;\n                setTimeout(function() {\n                    if ($('.popover:hover').length == 0 && !$(_this).is(\":hover\")) {\n                        $(_this).popover('hide');\n                    }\n                },\n                300);\n            });\n        } else {\n            $clicked.popover('show');\n        }\n\n    } else {\n        // $clicked.popover('show');\n    }\n    var popover = $clicked.data('popover');\n\n    if (data === undefined) {\n        return popover\n    } else if (popover.options.content !== data) {\n        popover.options.content =  data;\n        $clicked.popover('show');\n        return popover;\n    }\n}\n\nfunction getMatrixPopup(scope, scope_id, galaxy_id) {\n    cancelPopoverForm();\n    getPopup(scope_id + '/' + galaxy_id + '/' + scope, 'events', 'viewGalaxyMatrix', '', '#popover_matrix');\n}\n\nfunction getPopup(id, context, target, admin, popupType) {\n    $(\"#gray_out\").fadeIn();\n    var url = \"\";\n    if (typeof admin !== 'undefined' && admin != '') url+= \"/admin\";\n    if (context != '') {\n        url += \"/\" + context;\n    }\n    if (target != '') url += \"/\" + target;\n    if (id != '') url += \"/\" + id;\n    if (popupType == '' || typeof popupType == 'undefined') popupType = '#popover_form';\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(popupType).html(data);\n            openPopup(popupType, false);\n        },\n        error:function(xhr) {\n            $(\".loading\").hide();\n            $(\"#gray_out\").fadeOut();\n            if (xhr.status === 403) {\n                showMessage('fail', 'Not allowed.');\n            } else {\n                showMessage('fail', 'Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).');\n            }\n        },\n        url: url\n    });\n}\n\n// Same as getPopup function but create a popover to populate first\nfunction popoverPopup(clicked, id, context, target, admin) {\n    var url = \"\";\n    if (typeof admin !== 'undefined' && admin != '') url+= \"/admin\";\n    if (context != '') {\n        url += \"/\" + context;\n    }\n    if (target != '') url += \"/\" + target;\n    if (id != '') url += \"/\" + id;\n    var popover = openPopover(clicked, undefined);\n    $clicked = $(clicked);\n\n    // actual request //\n    $.ajax({\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            if (popover.options.content !== data) {\n                popover.options.content =  data;\n                $clicked.popover('show');\n            }\n        },\n        error:function(jqXHR, textStatus, errorThrown ) {\n            var errorJSON = '';\n            try {\n                errorJSON = JSON.parse(jqXHR.responseText);\n                errorJSON = errorJSON['errors'];\n                if (errorJSON === undefined) {\n                    errorJSON = '';\n                }\n            } catch (SyntaxError) {\n                // no error provided\n            }\n            var errorText = '<div class=\"alert alert-error\" style=\"margin-bottom: 3px;\">Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).</div>';\n            if (errorJSON !== '') {\n                errorText += '<div class=\"well\"><strong>Returned error:</strong> ' + $('<span/>').text(errorJSON).html() + '</div>';\n            }\n            popover.options.content = errorText;\n            $clicked.popover('show');\n        },\n        url: url\n    });\n}\n\n// create a confirm popover on the clicked html node.\nfunction popoverConfirm(clicked, message, placement) {\n    var $clicked = $(clicked);\n    var popoverContent = '<div>';\n        popoverContent += message === undefined ? '' : '<p>' + message + '</p>';\n        popoverContent += '<button id=\"popoverConfirmOK\" class=\"btn btn-primary\" style=\"margin-right: 5px;\" onclick=submitPopover(this)>Yes</button>';\n        popoverContent += '<button class=\"btn btn-inverse\" style=\"float: right;\" onclick=cancelPrompt()>Cancel</button>';\n    popoverContent += '</div>';\n    openPopover($clicked, popoverContent, undefined, placement);\n    $(\"#popoverConfirmOK\")\n    .focus()\n    .bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            $(this).click();\n        }\n        if(e.keyCode == 27) { // ESC\n            $clicked.popover('destroy');\n        }\n    });\n}\n\nfunction submitPopover(clicked) {\n    var $clicked = $(clicked);\n    var $form = $clicked.closest('form');\n    if ($form.length === 0) { // popover container is body, submit from original node\n        var dismissid = $clicked.closest('div.popover').attr('data-dismissid');\n        $form = $('[data-dismissid=\"' + dismissid + '\"]').closest('form');\n    }\n    if ($form.data('ajax')) {\n        $.ajax({\n            data: $form.serialize(),\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                location.reload();\n            },\n            error:function() {\n                showMessage('fail', 'Could not perform query.');\n            },\n            complete:function() {\n                $(\".loading\").hide();\n                $(\"#popover_form\").fadeOut();\n                $(\"#gray_out\").fadeOut();\n                $('#temp').remove();\n            },\n            type:\"post\",\n            url: $form.attr('action')\n        });\n    } else {\n        $form.submit();\n    }\n}\n\nfunction simplePopup(url) {\n    $(\"#gray_out\").fadeIn();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#popover_form\").html(data);\n            openPopup(\"#popover_form\");\n        },\n        error:function(xhr) {\n            $(\".loading\").hide();\n            $(\"#gray_out\").fadeOut();\n            if (xhr.status == 403) {\n                showMessage('fail', 'Not allowed.');\n            } else if (xhr.status == 404) {\n                showMessage('fail', 'Resource not found.');\n            } else {\n                showMessage('fail', 'Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).');\n            }\n        },\n        url: url,\n    });\n}\n\nfunction choicePopup(legend, list) {\n    var popupHtml = '<div class=\"popover_choice\">';\n    popupHtml += '<legend>Select Object Category</legend>';\n        popupHtml += '<div class=\"popover_choice_main\" id =\"popover_choice_main\">';\n            popupHtml += '<table style=\"width:100%;\" id=\"MainTable\">';\n                popupHtml += '<tbody>';\n                    list.forEach(function(item) {\n                        popupHtml += '<tr style=\"border-bottom:1px solid black;\" class=\"templateChoiceButton\">';\n                            popupHtml += '<td role=\"button\" tabindex=\"0\" aria-label=\"All meta-categories\" title=\"'+item.text+'\" style=\"padding-left:10px;padding-right:10px; text-align:center;width:100%;\" onClick=\"'+item.onclick+';\">'+item.text+'</td>';\n                        popupHtml += '</tr>';\n                    });\n                popupHtml += '</tbody>';\n            popupHtml += '</table>';\n        popupHtml += '</div>';\n        popupHtml += '<div role=\"button\" tabindex=\"0\" aria-label=\"Cancel\" title=\"Cancel\" class=\"templateChoiceButton templateChoiceButtonLast\" onClick=\"cancelPopoverForm();\">Cancel</div>';\n    popupHtml += '</div>';\n\n    $(\"#popover_form\").html(popupHtml);\n    openPopup(\"#popover_form\");\n}\n\nfunction openModal(heading, body, footer, modal_option, css_container, css_body) {\n    var modal_id = 'dynamic_modal_' + new Date().getTime();\n    var modal_html = '<div id=\"' + modal_id + '\" class=\"modal hide fade\" style=\"' + (css_container !== undefined ? css_container : '') + '\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">';\n    if (heading !== undefined && heading !== '') {\n        modal_html += '<div class=\"modal-header\">'\n                        + '<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\u00d7</button>'\n                        + '<h3 id=\"myModalLabel\">' + heading + '</h3>'\n                    + '</div>';\n    }\n    if (body !== undefined && body !== '') {\n        modal_html += '<div class=\"modal-body\" style=\"' + (css_body !== undefined ? css_body : '') + '\">' + body + '</div>';\n    }\n    if (footer !== undefined && footer !== '') {\n        modal_html += '<div class=\"modal-footer\">' + footer + '</div>';\n    }\n    modal_html += '</div>';\n    $('body').append($(modal_html));\n    $('#'+modal_id).modal(modal_option !== undefined ? modal_option : {});\n}\n\nfunction resizePopoverBody() {\n    var bodyheight = $(window).height();\n    bodyheight = 3 * bodyheight / 4 - 150;\n    $(\"#popover_choice_main\").css({\"max-height\": bodyheight});\n}\n\nfunction populateTemplateHiddenFileDiv(files) {\n    $('#TemplateFileArray').val(JSON.stringify(files));\n}\n\nfunction populateTemplateFileBubbles() {\n    var fileObjectArray = JSON.parse($('#TemplateFileArray').val());\n    fileObjectArray.forEach(function(entry) {\n        templateAddFileBubble(entry.element_id, false, entry.filename, entry.tmp_name, 'yes');\n    });\n}\n\nfunction templateFileHiddenAdd(files, element_id, batch) {\n    var fileArray = $.parseJSON($('#TemplateFileArray', window.parent.document).val());\n    var contained = false;\n    for (var j=0; j< files.length; j++) {\n        for (var i=0; i< fileArray.length; i++) {\n            if (fileArray[i].filename == files[j].filename) {\n                contained = true;\n            }\n            if (batch == 'no' && fileArray[i].element_id == element_id) {\n                templateDeleteFileBubble(fileArray[i].filename, fileArray[i].tmp_name, fileArray[i].element_id, 'iframe', batch);\n                contained = false;\n                var removeId = i;\n            }\n        }\n        if (batch == 'no') fileArray.splice(removeId, 1);\n        if (contained == false) {\n            fileArray.push(files[j]);\n            templateAddFileBubble(element_id, true, files[j].filename, files[j].tmp_name, batch);\n            $('#TemplateFileArray', window.parent.document).val(JSON.stringify(fileArray));\n        }\n    }\n}\n\nfunction htmlEncode(value){\n    return $('<div/>').text(value).html();\n}\n\nfunction templateAddFileBubble(element_id, iframe, filename, tmp_name, batch) {\n    filename = htmlEncode(filename);\n    tmp_name = htmlEncode(tmp_name);\n    if (batch == 'no') {\n        if (iframe == true) {\n            $('#filenames_' + element_id, window.parent.document).html('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'no\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        } else {\n            $('#filenames_' + element_id).html('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'no\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        }\n    } else {\n        if (iframe == true) {\n            $('#filenames_' + element_id, window.parent.document).append('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'yes\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        } else {\n            $('#filenames_' + element_id).append('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'yes\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        }\n    }\n}\n\nfunction templateDeleteFileBubble(filename, tmp_name, element_id, context, batch) {\n    $(\".loading\").show();\n    $.ajax({\n        type:\"post\",\n        cache: false,\n        url:\"/templates/deleteTemporaryFile/\" + tmp_name,\n    });\n    var c = this;\n    if (context == 'iframe') {\n        $('#' + tmp_name + '_container', window.parent.document).remove();\n        var oldArray = JSON.parse($('#TemplateFileArray', window.parent.document).val());\n    } else {\n        $('#' + tmp_name + '_container').remove();\n        var oldArray = JSON.parse($('#TemplateFileArray').val());\n    }\n    var newArray = [];\n    oldArray.forEach(function(entry) {\n        if (batch == 'no') {\n            if (entry.element_id != element_id) {\n                newArray.push(entry);\n            }\n        } else {\n            if (entry.tmp_name != tmp_name) {\n                newArray.push(entry);\n            }\n        }\n    });\n    if (batch == 'no') {\n        $('#fileUploadButton_' + element_id, $('#iframe_' + element_id).contents()).html('Upload File');\n    }\n    if (context == 'iframe') {\n        $('#TemplateFileArray', window.parent.document).val(JSON.stringify(newArray));\n    } else {\n        $('#TemplateFileArray').val(JSON.stringify(newArray));\n    }\n    $(\".loading\").hide();\n}\n\nfunction templateFileUploadTriggerBrowse(id) {\n    $('#upload_' + id + '_file').click();\n}\n\nfunction freetextRemoveRow(id, event_id) {\n    $('#row_' + id).hide();\n    $('#Attribute' + id + 'Save').attr(\"value\", \"0\");\n    if ($(\".freetext_row:visible\").length == 0) {\n        window.location = \"/events/\" + event_id;\n    }\n}\n\nfunction indexEvaluateFiltering() {\n    if (filterContext == \"event\") {\n        if (filtering.published != 2) {\n            $('#value_published').html(publishedOptions[filtering.published]);\n        } else {\n            $('#value_published').html(\"\");\n        }\n        if (filtering.hasproposal != 2) {\n            $('#value_hasproposal').html(publishedOptions[filtering.hasproposal]);\n        } else {\n            $('#value_hasproposal').html(\"\");\n        }\n        if (filtering.date.from != null) {\n            var text = \"\";\n            if (filtering.date.from != \"\") text = \"From: \" + $('<span>').text(filtering.date.from).html();\n            if (filtering.date.until != \"\") {\n                if (text != \"\") text += \" \";\n                text += \"Until: \" + $('<span>').text(filtering.date.until).html();\n            }\n        }\n        $('#value_date').html(text);\n        for (var i = 0; i < simpleFilters.length; i++) {\n            indexEvaluateSimpleFiltering(simpleFilters[i]);\n        }\n        indexRuleChange();\n    } else {\n        for (var i = 0; i < differentFilters.length; i++) {\n            if (filtering[differentFilters[i]] != \"\") {\n                var text = \"\";\n                if (filtering[differentFilters[i]] == 1) text = \"Yes\";\n                else if (filtering[differentFilters[i]] == 0) text = \"No\";\n                $('#value_' + differentFilters[i]).text(text);\n            } else {\n                $('#value_' + differentFilters[i]).text(\"\");\n            }\n        }\n        for (var i = 0; i < simpleFilters.length; i++) {\n            indexEvaluateSimpleFiltering(simpleFilters[i]);\n        }\n    }\n    indexSetTableVisibility();\n    indexSetRowVisibility();\n    $('#generatedURLContent').text(indexCreateFilters());\n}\n\nfunction quickFilter(passedArgs, url) {\n    if(!passedArgs){\n        var passedArgs = [];\n    }\n    if( $('#quickFilterField').val().trim().length > 0){\n        passedArgs[\"searchall\"] = encodeURIComponent($('#quickFilterField').val().trim());\n        for (var key in passedArgs) {\n            if (key !== 'page') {\n                url += \"/\" + key + \":\" + passedArgs[key];\n            }\n        }\n    }\n    window.location.href=url;\n}\n\nfunction runIndexFilter(element) {\n    var dataFields = $(element).data();\n    for (var k in $(element).data()) {\n        if (k in passedArgsArray) {\n            delete(passedArgsArray[k]);\n        } else {\n            passedArgsArray[k] = dataFields[k];\n        }\n    }\n    url = here;\n    for (var key in passedArgsArray) {\n        url += \"/\" + key + \":\" + passedArgsArray[key];\n    }\n    window.location.href = url;\n}\n\nfunction runIndexQuickFilter(preserveParams) {\n    if (!passedArgsArray) {\n        var passedArgsArray = [];\n    }\n    var searchKey = 'searchall';\n    if ($('#quickFilterField').data('searchkey')) {\n        searchKey = $('#quickFilterField').data('searchkey');\n    }\n    if ( $('#quickFilterField').val().trim().length > 0){\n        passedArgsArray[searchKey] = encodeURIComponent($('#quickFilterField').val().trim());\n    }\n    url = here;\n    if (typeof preserveParams !== \"undefined\") {\n        url += preserveParams;\n    }\n    for (var key in passedArgsArray) {\n        if (key !== 'page') {\n            url += \"/\" + key + \":\" + passedArgsArray[key];\n        }\n    }\n    window.location.href = url;\n}\n\nfunction executeFilter(passedArgs, url) {\n    for (var key in passedArgs) url += \"/\" + key + \":\" + passedArgs[key];\n    window.location.href=url;\n}\n\nfunction quickFilterTaxonomy(taxonomy_id, passedArgs) {\n    var url = \"/taxonomies/view/\" + taxonomy_id + \"/filter:\" + encodeURIComponent($('#quickFilterField').val());\n    window.location.href=url;\n}\n\nfunction quickFilterRemoteEvents(passedArgs, id) {\n    passedArgs[\"searchall\"] = $('#quickFilterField').val();\n    var url = \"/servers/previewIndex/\" + id;\n    for (var key in passedArgs) {\n        url += \"/\" + key + \":\" + encodeURIComponent(passedArgs[key]);\n    }\n    window.location.href=url;\n}\n\nfunction remoteIndexApplyFilters() {\n    var url = actionUrl + '/' + $(\"#EventFilter\").val();\n    window.location.href = url;\n}\n\nfunction indexApplyFilters() {\n    var url = indexCreateFilters();\n    window.location.href = url;\n}\n\nfunction indexCreateFilters() {\n    text = \"\";\n    if (filterContext == 'event') {\n        if (filtering.published != \"2\") {\n            text += \"searchpublished:\" + filtering.published;\n        }\n        if (filtering.hasproposal != \"2\") {\n            if (text != \"\") text += \"/\";\n            text += \"searchhasproposal:\" + filtering.hasproposal;\n        }\n    } else {\n        for (var i = 0; i < differentFilters.length; i++) {\n            if (filtering[differentFilters[i]]) {\n                if (text != \"\") text += \"/\";\n                text += \"search\" + differentFilters[i] + \":\" + filtering[differentFilters[i]];\n            }\n        }\n    }\n    for (var i = 0; i < simpleFilters.length; i++) {\n        text = indexBuildArray(simpleFilters[i], text);\n    }\n    if (filterContext == 'event') {\n        if (filtering.date.from) {\n            if (text != \"\") text += \"/\";\n            text += \"searchDatefrom:\" + filtering.date.from;\n        }\n        if (filtering.date.until) {\n            if (text != \"\") text += \"/\";\n            text += \"searchDateuntil:\" + filtering.date.until;\n        }\n        return baseurl + '/events/index/' + text;\n    } else {\n        return baseurl + '/admin/users/index/' + text;\n    }\n}\n\nfunction indexBuildArray(type, text) {\n    temp = \"\";\n    if (text != \"\") temp += \"/\";\n    temp += \"search\" + type + \":\";\n    if (filtering[type].NOT.length == 0 && filtering[type].OR.length == 0) return text;\n    var swap = filtering[type].OR.length;\n    var temp_array = filtering[type].OR.concat(filtering[type].NOT);\n    for (var i = 0; i < temp_array.length; i++) {\n        if (i > 0) temp += \"|\";\n        if (i >= swap) temp +=\"!\";\n        temp += temp_array[i];\n    }\n    text += temp;\n    return text;\n}\n\nfunction indexSetRowVisibility() {\n    for (var i = 0; i < allFields.length; i++) {\n        if ($(\"#value_\" + allFields[i]).text().trim() != \"\") {\n            $(\"#row_\" + allFields[i]).show();\n        } else {\n            $(\"#row_\" + allFields[i]).hide();\n        }\n    }\n}\n\nfunction indexEvaluateSimpleFiltering(field) {\n    text = \"\";\n    if (filtering[field].OR.length == 0 && filtering[field].NOT.length == 0) {\n        $('#value_' + field).html(text);\n        return false;\n    }\n    if (filtering[field].OR.length !=0) {\n        for (var i = 0; i < filtering[field].OR.length; i++) {\n            if (i > 0) text += '<span class=\"green bold\"> OR </span>';\n            if (typedFields.indexOf(field) == -1) {\n                text += $('<span>').text(filtering[field].OR[i]).html();\n            } else {\n                for (var j = 0; j < typeArray[field].length; j++) {\n                    if (typeArray[field][j].id == filtering[field].OR[i]) {\n                        text += $('<span>').text(typeArray[field][j].value).html();\n                    }\n                }\n            }\n        }\n    }\n    if (filtering[field].NOT.length !=0) {\n        for (var i = 0; i < filtering[field].NOT.length; i++) {\n            if (i == 0) {\n                if (text != \"\") text += '<span class=\"red bold\"> AND NOT </span>';\n                else text += '<span class=\"red bold\">NOT </span>';\n            } else text += '<span class=\"red bold\"> AND NOT </span>';\n            if (typedFields.indexOf(field) == -1) {\n                text += $('<span>').text(filtering[field].NOT[i]).html();\n            } else {\n                for (var j = 0; j < typeArray[field].length; j++) {\n                    if (typeArray[field][j].id == filtering[field].NOT[i]) {\n                        text += $('<span>').text(typeArray[field][j].value).html();\n                    }\n                }\n            }\n        }\n    }\n    $('#value_' + field).html(text);\n}\n\nfunction indexAddRule(param) {\n    var found = false;\n    if (filterContext == 'event') {\n        if (param.data.param1 == \"date\") {\n            var val1 = encodeURIComponent($('#EventSearch' + param.data.param1 + 'from').val());\n            var val2 = encodeURIComponent($('#EventSearch' + param.data.param1 + 'until').val());\n            if (val1 != \"\") filtering.date.from = val1;\n            if (val2 != \"\") filtering.date.until = val2;\n        } else if (param.data.param1 == \"published\") {\n            var value = encodeURIComponent($('#EventSearchpublished').val());\n            if (value != \"\") filtering.published = value;\n        } else if (param.data.param1 == \"hasproposal\") {\n            var value = encodeURIComponent($('#EventSearchhasproposal').val());\n            if (value != \"\") filtering.hasproposal = value;\n        } else {\n            var value = encodeURIComponent($('#EventSearch' + param.data.param1).val());\n            var operator = operators[encodeURIComponent($('#EventSearchbool').val())];\n            if (value != \"\" && filtering[param.data.param1][operator].indexOf(value) < 0) filtering[param.data.param1][operator].push(value);\n        }\n    } else if (filterContext == 'user') {\n        if (differentFilters.indexOf(param.data.param1) != -1) {\n            var value = encodeURIComponent($('#UserSearch' + param.data.param1).val());\n            if (value != \"\") filtering[param.data.param1] = value;\n        } else {\n            var value = encodeURIComponent($('#UserSearch' + param.data.param1).val());\n            var operator = operators[encodeURIComponent($('#UserSearchbool').val())];\n            if (value != \"\" && filtering[param.data.param1][operator].indexOf(value) < 0) filtering[param.data.param1][operator].push(value);\n        }\n    }\n    indexEvaluateFiltering();\n}\n\nfunction indexSetTableVisibility() {\n    var visible = false;\n    if ($(\"[id^='value_']\").text().trim()!=\"\" && $(\"[id^='value_']\").text().trim()!=\"-1\") {\n        visible = true;\n    }\n    if (visible == true) $('#FilterplaceholderTable').hide();\n    else $('#FilterplaceholderTable').show();\n}\n\nfunction indexRuleChange() {\n    var context = filterContext.charAt(0).toUpperCase() + filterContext.slice(1);\n    $('[id^=' + context + 'Search]').hide();\n    var rule = $('#' + context + 'Rule').val();\n    var fieldName = '#' + context + 'Search' + rule;\n    if (fieldName == '#' + context + 'Searchdate') {\n        $(fieldName + 'from').show();\n        $(fieldName + 'until').show();\n    } else {\n        $(fieldName).show();\n    }\n    if (simpleFilters.indexOf(rule) != -1) {\n        $('#' + context + 'Searchbool').show();\n    } else $('#' + context + 'Searchbool').hide();\n\n    $('#addRuleButton').show();\n    $('#addRuleButton').unbind(\"click\");\n    $('#addRuleButton').click({param1: rule}, indexAddRule);\n}\n\nfunction indexFilterClearRow(field) {\n    $('#value_' + field).html(\"\");\n    $('#row_' + field).hide();\n    if (field == \"date\") {\n        filtering.date.from = \"\";\n        filtering.date.until = \"\";\n    } else if (field == \"published\") {\n        filtering.published = 2;\n    } else if (field == \"hasproposal\") {\n        filtering.hasproposal = 2;\n    } else if (differentFilters.indexOf(field) != -1) {\n        filtering[field] = \"\";\n    } else {\n        filtering[field].NOT = [];\n        filtering[field].OR = [];\n    }\n    indexSetTableVisibility();\n    indexEvaluateFiltering();\n}\n\n\nfunction restrictEventViewPagination() {\n    var showPages = new Array();\n    var start;\n    var end;\n    var i;\n\n    if (page < 6) {\n        start = 1;\n        if (count - page < 6) {\n            end = count;\n        } else {\n            end = page + (9 - (page - start));\n        }\n    } else if (count - page < 6) {\n        end = count;\n        start = count - 10;\n    } else {\n        start = page-5;\n        end = page+5;\n    }\n\n    if (start > 2) {\n        $(\"#apage\" + start).parent().before(\"<li><a href id='aExpandLeft'>...</a></li>\");\n        $(\"#aExpandLeft\").click(function() {expandPagination(0, 0); return false;});\n        $(\"#bpage\" + start).parent().before(\"<li><a href id='bExpandLeft'>...</a></li>\");\n        $(\"#bExpandLeft\").click(function() {expandPagination(1, 0); return false;})\n    }\n\n    if (end < (count - 1)) {\n        $(\"#apage\" + end).parent().after(\"<li><a href id='aExpandRight'>...</a></li>\");\n        $(\"#aExpandRight\").click(function() {expandPagination(0, 1); return false;});\n        $(\"#bpage\" + end).parent().after(\"<li><a href id='bExpandRight'>...</a></li>\");\n        $(\"#bExpandRight\").click(function() {expandPagination(1, 1); return false;})\n    }\n\n    for (i = 1; i < (count+1); i++) {\n        if (i != 1 && i != count && (i < start || i > end)) {\n            $(\"#apage\" + i).hide();\n            $(\"#bpage\" + i).hide();\n        }\n    }\n}\n\nfunction expandPagination(bottom, right) {\n    var i;\n    var prefix = \"a\";\n    if (bottom == 1) prefix = \"b\";\n    var start = 1;\n    var end = page;\n    if (right == 1) {\n        start = page;\n        end = count;\n        $(\"#\" + prefix + \"ExpandRight\").remove();\n    } else $(\"#\" + prefix + \"ExpandLeft\").remove();\n    for (i = start; i < end; i++) {\n        $(\"#\" + prefix + \"page\" + i).show();\n    }\n}\n\nfunction getSubGroupFromSetting(setting) {\n    var temp = setting.split('.');\n    if (temp[0] == \"Plugin\") {\n        temp = temp[1];\n        if (temp.indexOf('_') > -1) {\n            temp = temp.split('_');\n            return temp[0];\n        }\n    }\n    return 'general';\n}\n\nfunction serverSettingsActivateField(setting, id) {\n    resetForms();\n    $('.inline-field-placeholder').hide();\n    var fieldName = \"#setting_\" + getSubGroupFromSetting(setting) + \"_\" + id;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(fieldName + \"_placeholder\").html(data);\n            $(fieldName + \"_solid\").hide();\n            $(fieldName + \"_placeholder\").show();\n            serverSettingsPostActivationScripts(fieldName, setting, id);\n        },\n        url:\"/servers/serverSettingsEdit/\" + setting + \"/\" + id,\n    });\n}\n\nfunction serverSettingsPostActivationScripts(name, setting, id) {\n    $(name + '_field').focus();\n    inputFieldButtonActive(name + '_field');\n\n    $(name + '_form').submit(function(e){\n        e.preventDefault();\n        serverSettingSubmitForm(name, setting, id);\n        return false;\n    });\n\n    $(name + '_form').bind(\"focusout\", function() {\n        inputFieldButtonPassive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"focusin\", function(){\n        inputFieldButtonActive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            serverSettingSubmitForm(name, setting, id);\n        }\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-accept').bind('click', function() {\n        serverSettingSubmitForm(name, setting, id);\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-decline').bind('click', function() {\n        resetForms();\n        $('.inline-field-placeholder').hide();\n    });\n\n    $(name + '_solid').hide();\n}\n\nfunction serverSettingSubmitForm(name, setting, id) {\n    subGroup = getSubGroupFromSetting(setting);\n    var formData = $(name + '_field').closest(\"form\").serialize();\n    $.ajax({\n        data: formData,\n        cache: false,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $.ajax({\n                type:\"get\",\n                url:\"/servers/serverSettingsReloadSetting/\" + setting + \"/\" + id,\n                success:function (data2, textStatus2) {\n                    $('#' + subGroup + \"_\" + id + '_row').replaceWith(data2);\n                    $(\".loading\").hide();\n                },\n                error:function() {\n                    showMessage('fail', 'Could not refresh the table.');\n                }\n            });\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            resetForms();\n            $('.inline-field-placeholder').hide();\n        },\n        type:\"post\",\n        url:\"/servers/serverSettingsEdit/\" + setting + \"/\" + id + \"/\" + 1\n    });\n    $(name + '_field').unbind(\"keyup\");\n    $(name + '_form').unbind(\"focusout\");\n    return false;\n}\n\nfunction updateOrgCreateImageField(string) {\n    string = encodeURIComponent(string);\n    $.ajax({\n        url:'/img/orgs/' + string + '.png',\n        type:'HEAD',\n        error:\n            function(){\n                $('#logoDiv').html('No image uploaded for this identifier');\n            },\n        success:\n            function(){\n                $('#logoDiv').html('<img src=\"/img/orgs/' + string + '.png\" style=\"width:24px;height:24px;\"></img>');\n            }\n    });\n}\n\nfunction generateOrgUUID() {\n    $.ajax({\n        url:'/admin/organisations/generateuuid.json',\n        success:\n            function( data ){\n                $('#OrganisationUuid').val(data.uuid);\n            }\n    });\n}\n\n\nfunction sharingGroupIndexMembersCollapse(id) {\n    $('#' + id + '_down').show();\n    $('#' + id + '_up').hide();\n}\n\nfunction sharingGroupIndexMembersExpand(id) {\n    $('#' + id + '_down').hide();\n    $('#' + id + '_up').show();\n}\n\nfunction popoverStartup() {\n    $('[data-toggle=\"popover\"]').popover({\n        animation: true,\n        html: true,\n    }).click(function(e) {\n        $(e.target).popover('show');\n        $('[data-toggle=\"popover\"]').not(e.target).popover('hide');\n    });\n    $(document).click(function (e) {\n        if (!$('[data-toggle=\"popover\"]').is(e.target)) {\n            $('[data-toggle=\"popover\"]').popover('hide');\n        }\n    });\n}\n\nfunction changeFreetextImportFrom() {\n    $('#changeTo').find('option').remove();\n    options[$('#changeFrom').val()].forEach(function(element) {\n        $('#changeTo').append('<option value=\"' + element + '\">' + element + '</option>');\n    });\n}\n\nfunction changeFreetextImportCommentExecute() {\n    $('.freetextCommentField').val($('#changeComments').val());\n}\n\nfunction changeFreetextImportExecute() {\n    var from = $('#changeFrom').val();\n    var to = $('#changeTo').val();\n    $('.typeToggle').each(function() {\n        if ($( this ).val() == from) {\n            if (selectContainsOption(\"#\" + $(this).attr('id'), to)) $( this ).val(to);\n        }\n    });\n}\n\nfunction selectContainsOption(selectid, value) {\n    var exists = false;\n    $(selectid + ' option').each(function(){\n        if (this.value == value) {\n            exists = true;\n            return false;\n        }\n    });\n    return exists;\n}\n\nfunction exportChoiceSelect(e) {\n    if ($(e.target).is(\"input\")) {\n        return false;\n    }\n    var url = $(e.target).parent().data(\"export-url\");\n    var elementId = $(e.target).parent().data(\"export-key\");\n    var checkbox = $(e.target).parent().data(\"export-checkbox\");\n    if (checkbox == 1) {\n        if ($('#' + elementId + '_toggle').prop('checked')) {\n            url = $('#' + elementId + '_set').html();\n        }\n    }\n    document.location.href = url;\n}\n\nfunction importChoiceSelect(url, elementId, ajax) {\n    if (ajax == 'false') {\n        document.location.href = url;\n    } else {\n        simplePopup(url);\n    }\n}\n\nfunction freetextImportResultsSubmit(id, count) {\n    var attributeArray = [];\n    var temp;\n    for (i = 0; i < count; i++) {\n        if ($('#Attribute' + i + 'Save').val() == 1) {\n            temp = {\n                value:$('#Attribute' + i + 'Value').val(),\n                category:$('#Attribute' + i + 'Category').val(),\n                type:$('#Attribute' + i + 'Type').val(),\n                to_ids:$('#Attribute' + i + 'To_ids')[0].checked,\n                disable_correlation:$('#Attribute' + i + 'Disable_correlation')[0].checked,\n                comment:$('#Attribute' + i + 'Comment').val(),\n                distribution:$('#Attribute' + i + 'Distribution').val(),\n                sharing_group_id:$('#Attribute' + i + 'SharingGroupId').val(),\n                data:$('#Attribute' + i + 'Data').val(),\n                data_is_handled:$('#Attribute' + i + 'DataIsHandled').val(),\n                tags:$('#Attribute' + i + 'Tags').val()\n            }\n            attributeArray[attributeArray.length] = temp;\n        }\n    };\n    $(\"#AttributeJsonObject\").val(JSON.stringify(attributeArray));\n    var formData = $(\".mainForm\").serialize();\n    $.ajax({\n        type: \"post\",\n        cache: false,\n        url: \"/events/saveFreeText/\" + id,\n        data: formData,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            window.location = '/events/view/' + id;\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n    });\n}\n\nfunction moduleResultsSubmit(id) {\n    var typesWithData = ['attachment', 'malware-sample'];\n    var data_collected = {};\n    var temp;\n    if ($('.meta_table').length) {\n        var tags = [];\n        $('.meta_table').find('.tag').each(function() {\n            tags.push({name: $(this).text()});\n        });\n        if (tags.length) {\n            data_collected['Tag'] = tags;\n        }\n    }\n    if ($('.MISPObject').length) {\n        var objects = [];\n        $(\".MISPObject\").each(function(o) {\n            var object_uuid = $(this).find('.ObjectUUID').text();\n            temp = {\n                uuid: object_uuid,\n                import_object: $(this).find('.ImportMISPObject')[0].checked,\n                name: $(this).find('.ObjectName').text(),\n                meta_category: $(this).find('.ObjectMetaCategory').text(),\n                distribution: $(this).find('.ObjectDistribution').val(),\n                sharing_group_id: $(this).find('.ObjectSharingGroup').val(),\n                comment: $(this).find('.ObjectComment').val()\n            }\n            if (!temp['import_object']) {\n                return true;\n            }\n            if (temp['distribution'] != '4') {\n                temp['sharing_group_id'] = '0';\n            }\n            if ($(this).has('.ObjectID').length) {\n                temp['id'] = $(this).find('.ObjectID').text();\n            }\n            if ($(this).has('.ObjectDescription').length) {\n                temp['description'] = $(this).find('.ObjectDescription').text();\n            }\n            if ($(this).has('.TemplateVersion').length) {\n                temp['template_version'] = $(this).find('.TemplateVersion').text();\n            }\n            if ($(this).has('.TemplateUUID').length) {\n                temp['template_uuid'] = $(this).find('.TemplateUUID').text();\n            }\n            if ($(this).has('.ObjectReference').length) {\n                var references = [];\n                $(this).find('.ObjectReference').each(function() {\n                    var reference = {\n                        object_uuid: object_uuid,\n                        referenced_uuid: $(this).find('.ReferencedUUID').text(),\n                        relationship_type: $(this).find('.Relationship').text()\n                    };\n                    references.push(reference);\n                });\n                temp['ObjectReference'] = references;\n            }\n            if ($(this).find('.ObjectAttribute').length) {\n                var object_attributes = [];\n                $(this).find('.ObjectAttribute').each(function(a) {\n                    var attribute_type = $(this).find('.AttributeType').text();\n                    attribute = {\n                        import_attribute: $(this).find('.ImportMISPObjectAttribute')[0].checked,\n                        object_relation: $(this).find('.ObjectRelation').text(),\n                        category: $(this).find('.AttributeCategory').text(),\n                        type: attribute_type,\n                        value: $(this).find('.AttributeValue').text(),\n                        uuid: $(this).find('.AttributeUuid').text(),\n                        to_ids: $(this).find('.AttributeToIds')[0].checked,\n                        disable_correlation: $(this).find('.AttributeDisableCorrelation')[0].checked,\n                        comment: $(this).find('.AttributeComment').val(),\n                        distribution: $(this).find('.AttributeDistribution').val(),\n                        sharing_group_id: $(this).find('.AttributeSharingGroup').val()\n                    }\n                    if (!attribute['import_attribute']) {\n                        return true;\n                    }\n                    if (attribute['distribution'] != '4') {\n                        attribute['sharing_group_id'] = '0';\n                    }\n                    if ($(this).find('.objectAttributeTagContainer').length) {\n                        var tags = [];\n                        $(this).find('.objectAttributeTag').each(function() {\n                            tags.push({name: $(this).attr('title')});\n                        });\n                        attribute['Tag'] = tags;\n                    }\n                    if (typesWithData.indexOf(attribute_type) != -1) {\n                        if ($(this).find('.AttributeData').length) {\n                            attribute['data'] = $(this).find('.AttributeData').val();\n                        }\n                        if ($(this).find('.AttributeEncrypt').length) {\n                            attribute['encrypt'] = $(this).find('.AttributeEncrypt').val();\n                        }\n                    }\n                    object_attributes.push(attribute);\n                });\n                temp['Attribute'] = object_attributes;\n            }\n            objects.push(temp);\n        });\n        data_collected['Object'] = objects;\n    }\n    if ($('.MISPAttribute').length) {\n        var attributes = [];\n        $('.MISPAttribute').each(function(a) {\n            var category_value;\n            var type_value;\n            if ($(this).find('.AttributeCategorySelect').length) {\n                category_value = $(this).find('.AttributeCategorySelect').val();\n            } else {\n                category_value = $(this).find('.AttributeCategory').text();\n            }\n            if ($(this).find('.AttributeTypeSelect').length) {\n                type_value = $(this).find('.AttributeTypeSelect').val();\n            } else {\n                type_value = $(this).find('.AttributeType').text();\n            }\n            temp = {\n                import_attribute: $(this).find('.ImportMISPAttribute')[0].checked,\n                category: category_value,\n                type: type_value,\n                value: $(this).find('.AttributeValue').text(),\n                uuid: $(this).find('.AttributeUuid').text(),\n                to_ids: $(this).find('.AttributeToIds')[0].checked,\n                disable_correlation: $(this).find('.AttributeDisableCorrelation')[0].checked,\n                comment: $(this).find('.AttributeComment').val(),\n                distribution: $(this).find('.AttributeDistribution').val(),\n                sharing_group_id: $(this).find('.AttributeSharingGroup').val()\n            }\n            if (!temp['import_attribute']) {\n                return true;\n            }\n            if (temp['distribution'] != '4') {\n                temp['sharing_group_id'] = '0';\n            }\n            if ($(this).find('.attributeTagContainer').length) {\n                var tags = [];\n                $(this).find('.attributeTag').each(function() {\n                    tags.push({name: $(this).attr('title')});\n                });\n                temp['Tag'] = tags;\n            }\n            if (typesWithData.indexOf(type_value) != -1) {\n                if ($(this).find('.AttributeData').length) {\n                    temp['data'] = $(this).find('.AttributeData').val();\n                }\n                if ($(this).find('.AttributeEncrypt').length) {\n                    temp['encrypt'] = $(this).find('.AttributeEncrypt').val();\n                }\n            }\n            attributes.push(temp);\n        });\n        data_collected['Attribute'] = attributes;\n    }\n    $(\"#EventJsonObject\").val(JSON.stringify(data_collected));\n    var formData = $('.mainForm').serialize();\n    $.ajax({\n        type: \"post\",\n        cache: false,\n        url: \"/events/handleModuleResults/\" + id,\n        data: formData,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            window.location = '/events/view/' + id;\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        }\n    });\n}\n\nfunction objectTemplateViewContent(context, id) {\n    var url = \"/objectTemplateElements/viewElements/\" + id + \"/\" + context;\n    $.ajax({\n            url: url,\n            type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n            error: function(){\n                $('#ajaxContent').html('An error has occured, please reload the page.');\n            },\n            success: function(response){\n                $('#ajaxContent').html(response);\n            },\n        complete: function() {\n            $(\".loading\").hide();\n        },\n    });\n\n}\n\nfunction organisationViewContent(context, id) {\n    organisationViewButtonHighlight(context);\n    var action = \"/organisations/landingpage/\";\n    if (context == 'members') {\n        action = \"/admin/users/index/searchorg:\";\n    }\n    if (context == 'events') {\n        action = \"/events/index/searchorg:\";\n    }\n    $.ajax({\n        url: action + id,\n        type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        error: function(){\n            $('#ajaxContent').html('An error has occured, please reload the page.');\n        },\n        success: function(response){\n            $('#ajaxContent').html(response);\n        },\n        complete: function() {\n            $(\".loading\").hide();\n        },\n    });\n}\n\nfunction organisationViewButtonHighlight(context) {\n    $(\".orgViewButtonActive\").hide();\n    $(\".orgViewButton\").show();\n    $(\"#button_\" + context).hide();\n    $(\"#button_\" + context + \"_active\").show();\n}\n\nfunction simpleTabPage(page) {\n    $(\".progress_tab\").removeClass(\"btn-primary\").addClass(\"btn-inverse\");\n    $(\"#page\" + page + \"_tab\").removeClass(\"btn-inverse\").addClass(\"btn-primary\");\n    $(\".tabContent\").hide();\n    $(\"#page\" + page + \"_content\").show();\n    if (page == lastPage) simpleTabPageLast();\n}\n\nfunction simpleTabPageLast() {\n    var summaryorgs = summaryextendorgs = remotesummaryorgs = remotesummaryextendorgs = summaryservers = \"\";\n    var orgcounter = extendcounter = remoteorgcounter = remoteextendcounter = servercounter = 0;\n    var sgname = \"[Sharing group name not set!]\";\n    if ($('#SharingGroupName').val()) sgname = $('#SharingGroupName').val();\n    var sgreleasability = \"[Sharing group releasability not set!]\";\n    if ($('#SharingGroupReleasability').val()) sgreleasability = $('#SharingGroupReleasability').val();\n    $('#summarytitle').text(sgname);\n    $('#summaryreleasable').text(sgreleasability);\n    organisations.forEach(function(organisation){\n        if (organisation.type == 'local') {\n            if (orgcounter > 0) summaryorgs += \", \";\n            summaryorgs += organisation.name;\n            if (organisation.extend == true) {\n                if (extendcounter > 0) summaryextendorgs += \", \"\n                summaryextendorgs += organisation.name;\n                extendcounter++;\n            }\n            orgcounter++;\n        } else {\n            if (remoteorgcounter > 0) remotesummaryorgs += \", \";\n            remotesummaryorgs += organisation.name;\n            if (organisation.extend == true) {\n                if (remoteextendcounter > 0) remotesummaryextendorgs += \", \"\n                remotesummaryextendorgs += organisation.name;\n                remoteextendcounter++;\n            }\n            remoteorgcounter++;\n        }\n    });\n    if (orgcounter == 0) $('#localText').hide();\n    if (remoteorgcounter == 0) $('#externalText').hide();\n    if (extendcounter == 0) summaryextendorgs = \"nobody\";\n    if (remoteextendcounter == 0) remotesummaryextendorgs = \"nobody\";\n    servers.forEach(function(server){\n        if (servercounter > 0) summaryservers += \", \";\n        if (server.id != 0) {\n            summaryservers += server.name;\n            if (extendcounter == 0) summaryextendorgs = \"none\";\n            servercounter++;\n        }\n        if (server.id == 0 && server.all_orgs == true) summaryorgs = \"all organisations on this instance\";\n    });\n    if ($('#SharingGroupRoaming').is(\":checked\")) {\n        summaryservers = \"any interconnected instances linked by an eligible organisation.\";\n    } else {\n        if (servercounter == 0) {\n            summaryservers = \"data marked with this sharing group will not be pushed.\";\n        }\n    }\n    $('#summarylocal').text(summaryorgs);\n    $('#summarylocalextend').text(summaryextendorgs);\n    $('#summaryexternal').text(remotesummaryorgs);\n    $('#summaryexternalextend').text(remotesummaryextendorgs);\n    $('#summaryservers').text(summaryservers);\n}\n\nfunction sharingGroupPopulateOrganisations() {\n    $('input[id=SharingGroupOrganisations]').val(JSON.stringify(organisations));\n    $('.orgRow').remove();\n    var id = 0;\n    var html = '';\n    organisations.forEach(function(org) {\n        html = '<tr id=\"orgRow' + id + '\" class=\"orgRow\">';\n        html += '<td class=\"short\">' + org.type + '&nbsp;</td>';\n        html += '<td>' + $('<div>').text(org.name).html() + '&nbsp;</td>';\n        html += '<td>' + org.uuid + '&nbsp;</td>';\n        html += '<td class=\"short\" style=\"text-align:center;\">';\n        if (org.removable == 1) {\n            html += '<input id=\"orgExtend' + id + '\" type=\"checkbox\" onClick=\"sharingGroupExtendOrg(' + id + ')\" ';\n            if (org.extend) html+= 'checked';\n            html += '>';\n        } else {\n            html += '<span class=\"icon-ok\"></span>'\n        }\n        html +='</td>';\n        html += '<td class=\"actions short\">';\n        if (org.removable == 1) html += '<span class=\"icon-trash\" onClick=\"sharingGroupRemoveOrganisation(' + id + ')\"></span>';\n        html += '&nbsp;</td></tr>';\n        $('#organisations_table tr:last').after(html);\n        id++;\n    });\n}\n\nfunction sharingGroupPopulateServers() {\n    $('input[id=SharingGroupServers]').val(JSON.stringify(servers));\n    $('.serverRow').remove();\n    var id = 0;\n    var html = '';\n    servers.forEach(function(server) {\n        html = '<tr id=\"serverRow' + id + '\" class=\"serverRow\">';\n        html += '<td>' + server.name + '&nbsp;</td>';\n        html += '<td>' + server.url + '&nbsp;</td>';\n        html += '<td>';\n        html += '<input id=\"serverAddOrgs' + id + '\" type=\"checkbox\" onClick=\"sharingGroupServerAddOrgs(' + id + ')\" ';\n        if (server.all_orgs) html += 'checked';\n        html += '>';\n        html +='</td>';\n        html += '<td class=\"actions short\">';\n        if (server.removable == 1) html += '<span class=\"icon-trash\" onClick=\"sharingGroupRemoveServer(' + id + ')\"></span>';\n        html += '&nbsp;</td></tr>';\n        $('#servers_table tr:last').after(html);\n        id++;\n    });\n}\n\nfunction sharingGroupExtendOrg(id) {\n    organisations[id].extend = $('#orgExtend' + id).is(\":checked\");\n}\n\nfunction sharingGroupServerAddOrgs(id) {\n    servers[id].all_orgs = $('#serverAddOrgs' + id).is(\":checked\");\n}\n\nfunction sharingGroupPopulateUsers() {\n    $('input[id=SharingGroupServers]').val(JSON.stringify(organisations));\n}\n\nfunction sharingGroupAdd(context, type) {\n    if (context == 'organisation') {\n        var jsonids = JSON.stringify(orgids);\n        url = '/organisations/fetchOrgsForSG/' + jsonids + '/' + type\n    } else if (context == 'server') {\n        var jsonids = JSON.stringify(serverids);\n        url = '/servers/fetchServersForSG/' + jsonids\n    }\n    $(\"#gray_out\").fadeIn();\n    simplePopup(url);\n}\n\nfunction sharingGroupRemoveOrganisation(id) {\n    organisations.splice(id, 1);\n    orgids.splice(id, 1);\n    sharingGroupPopulateOrganisations();\n}\n\nfunction sharingGroupRemoveServer(id) {\n    servers.splice(id, 1);\n    serverids.splice(id, 1);\n    sharingGroupPopulateServers();\n}\n\nfunction submitPicklistValues(context, local) {\n    if (context == 'org') {\n        var localType = 'local';\n        if (local == 0) localType = 'remote';\n        $(\"#rightValues  option\").each(function() {\n            if (orgids.indexOf($(this).val()) == -1) {\n                organisations.push({\n                        id: $(this).val(),\n                        type: localType,\n                        name: $(this).text(),\n                        extend: false,\n                        uuid: '',\n                        removable: 1\n                });\n            }\n            orgids.push($(this).val());\n            sharingGroupPopulateOrganisations();\n        });\n    } else if (context == 'server') {\n        $(\"#rightValues  option\").each(function() {\n            if (serverids.indexOf($(this).val()) == -1) {\n                servers.push({\n                        id: $(this).val(),\n                        name: $(this).text(),\n                        url: $(this).attr(\"data-url\"),\n                        all_orgs: false,\n                        removable: 1\n                });\n            }\n            serverids.push($(this).val());\n            sharingGroupPopulateServers();\n        });\n    }\n    $(\"#gray_out\").fadeOut();\n    $(\"#popover_form\").fadeOut();\n}\n\nfunction cancelPicklistValues() {\n    $(\"#popover_form\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n}\n\nfunction sgSubmitForm(action) {\n    var ajax = {\n            'organisations': organisations,\n            'servers': servers,\n            'sharingGroup': {\n                'name': $('#SharingGroupName').val(),\n                'releasability': $('#SharingGroupReleasability').val(),\n                'description': $('#SharingGroupDescription').val(),\n                'active': $('#SharingGroupActive').is(\":checked\"),\n                'roaming': $('#SharingGroupRoaming').is(\":checked\"),\n            }\n    };\n    $('#SharingGroupJson').val(JSON.stringify(ajax));\n    var formName = \"#SharingGroup\" + action + \"Form\";\n    $(formName).submit();\n}\n\nfunction serverSubmitForm(action) {\n    var ajax = {};\n    switch ($('#ServerOrganisationType').val()) {\n    case '0':\n        ajax = {\n            'id': $('#ServerLocal').val()\n        };\n        break;\n    case '1':\n        ajax = {\n            'id': $('#ServerExternal').val()\n        };\n        break;\n    case '2':\n        ajax = {\n            'name': $('#ServerExternalName').val(),\n            'uuid': $('#ServerExternalUuid').val()\n        };\n        break;\n    }\n\n    $('#ServerJson').val(JSON.stringify(ajax));\n    var formName = \"#Server\" + action + \"Form\";\n    $(formName).submit();\n}\n\nfunction serverOrgTypeChange() {\n    $(\".hiddenField\").hide();\n    switch ($('#ServerOrganisationType').val()) {\n        case '0':\n            $(\"#ServerLocalContainer\").show();\n            break;\n        case '1':\n            $(\"#ServerExternalContainer\").show();\n            break;\n        case '2':\n            $(\"#ServerExternalUuidContainer\").show();\n            $(\"#ServerExternalNameContainer\").show();\n            break;\n    }\n}\n\nfunction sharingGroupPopulateFromJson() {\n    var jsonparsed = JSON.parse($('#SharingGroupJson').val());\n    organisations = jsonparsed.organisations;\n    servers = jsonparsed.servers;\n    if (jsonparsed.sharingGroup.active == 1) {\n        $(\"#SharingGroupActive\").prop(\"checked\", true);\n    }\n    if (jsonparsed.sharingGroup.roaming == 1) {\n        $(\"#SharingGroupRoaming\").prop(\"checked\", true);\n        $('#serverList').show();\n    }\n    $('#SharingGroupName').attr('value', jsonparsed.sharingGroup.name);\n    $('#SharingGroupReleasability').attr('value', jsonparsed.sharingGroup.releasability);\n    $('#SharingGroupDescription').text(jsonparsed.sharingGroup.description);\n}\n\nfunction runOnDemandAction(element, url, target, postFormField) {\n    var elementContainer = '#' + target;\n    var type = 'GET';\n    var data = '';\n    if (postFormField !== '') {\n        type = 'POST';\n        data = $('#' + postFormField).val();\n        data = {value: data}\n    }\n    $.ajax({\n        url: url,\n        type: type,\n        data: data,\n        beforeSend: function (XMLHttpRequest) {\n            $(elementContainer).html('Running...');\n        },\n        error: function(response) {\n            var result = JSON.parse(response.responseText);\n            $(elementContainer).empty();\n            $(elementContainer)\n            .append(\n                $('<div>')\n                .attr('class', 'bold red')\n                .text('Error ' + response.status + ':')\n            )\n            .append(\n                $('<div>')\n                .attr('class', 'bold')\n                .text(result.errors)\n            );\n        },\n        success: function(response) {\n            var result = JSON.parse(response);\n            $(elementContainer).empty();\n            for (var key in result) {\n                $(elementContainer).append(\n                    $('<div>')\n                    .append(\n                        $('<span>')\n                        .attr('class', 'bold')\n                        .text(key + ': ')\n                    ).append(\n                        $('<span>')\n                        .attr('class', 'bold blue')\n                        .text(result[key])\n                    )\n                );\n            }\n        }\n    })\n}\n\nfunction getRemoteSyncUser(id) {\n    var resultContainer = $(\"#sync_user_test_\" + id);\n    $.ajax({\n        url: '/servers/getRemoteUser/' + id,\n        type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            resultContainer.html('Running test...');\n        },\n        error: function(){\n            resultContainer.html('Internal error.');\n        },\n        success: function(response) {\n            if (typeof(response.message) != 'undefined') {\n                resultContainer.empty();\n                resultContainer.append(\n                    $('<span>')\n                    .attr('class', 'red bold')\n                    .text('Error')\n                ).append(\n                    $('<span>')\n                    .text(': #' + response.message)\n                );\n            } else {\n                resultContainer.empty();\n                Object.keys(response).forEach(function(key) {\n                    var value = response[key];\n                    resultContainer.append(\n                        $('<span>')\n                        .attr('class', 'blue bold')\n                        .text(key)\n                    ).append(\n                        $('<span>')\n                        .text(': ' + value)\n                    ).append(\n                        $('<br>')\n                    );\n                });\n            }\n            var result = response;\n        }\n    });\n}\n\nfunction testConnection(id) {\n    $.ajax({\n        url: '/servers/testConnection/' + id,\n        type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\"#connection_test_\" + id).html('Running test...');\n        },\n        error: function(){\n            $(\"#connection_test_\" + id).html('Internal error.');\n        },\n        success: function(response){\n            var result = response;\n            switch (result.status) {\n            case 1:\n                status_message = \"OK\";\n                compatibility = \"Compatible\";\n                compatibility_colour = \"green\";\n                colours = {'local': 'class=\"green\"', 'remote': 'class=\"green\"', 'status': 'class=\"green\"'};\n                issue_colour = \"red\";\n                if (result.mismatch == \"hotfix\") issue_colour = \"orange\";\n                if (result.newer == \"local\") {\n                    colours.remote = 'class=\"' + issue_colour + '\"';\n                    if (result.mismatch == \"minor\") {\n                        compatibility = \"Pull only\";\n                        compatibility_colour = \"orange\";\n                    } else if (result.mismatch == \"major\") {\n                        compatibility = \"Incompatible\";\n                        compatibility_colour = \"red\";\n                    }\n                } else if (result.newer == \"remote\") {\n                    colours.local = 'class=\"' + issue_colour + '\"';\n                    if (result.mismatch != \"hotfix\") {\n                        compatibility = \"Incompatible\";\n                        compatibility_colour = \"red\";\n                    }\n                } else if (result.mismatch == \"proposal\") {\n                    compatibility_colour = \"orange\";\n                    compatibility = \"Proposal pull disabled (remote version < v2.4.111)\";\n                }\n                if (result.mismatch != false && result.mismatch != \"proposal\") {\n                    if (result.newer == \"remote\") status_message = \"Local instance outdated, update!\";\n                    else status_message = \"Remote outdated, notify admin!\"\n                    colours.status = 'class=\"' + issue_colour + '\"';\n                }\n                if (result.post != false) {\n                    var post_colour = \"red\";\n                    if (result.post == 1) {\n                        post_colour = \"green\";\n                        post_result = \"Received sent package\";\n                    } else if (result.post == 8) {\n                        post_result = \"Could not POST message\";\n                    } else if (result.post == 9) {\n                        post_result = \"Invalid body\";\n                    } else if (result.post == 10) {\n                        post_result = \"Invalid headers\";\n                    } else {\n                        post_colour = \"orange\";\n                        post_result = \"Remote too old for this test\";\n                    }\n                }\n                resultDiv = '<div>Local version: <span ' + colours.local + '>' + result.local_version + '</span><br />';\n                resultDiv += '<div>Remote version: <span ' + colours.remote + '>' + result.version + '</span><br />';\n                resultDiv += '<div>Status: <span ' + colours.status + '>' + status_message + '</span><br />';\n                resultDiv += '<div>Compatiblity: <span class=\"' + compatibility_colour + '\">' + compatibility + '</span><br />';\n                resultDiv += '<div>POST test: <span class=\"' + post_colour + '\">' + post_result + '</span><br />';\n                $(\"#connection_test_\" + id).html(resultDiv);\n                //$(\"#connection_test_\" + id).html('<span class=\"green bold\" title=\"Connection established, correct response received.\">OK</span>');\n                break;\n            case 2:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"There seems to be a connection issue. Make sure that the entered URL is correct and that the certificates are in order.\">Server unreachable</span>');\n                break;\n            case 3:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"The server returned an unexpected result. Make sure that the provided URL (or certificate if it applies) are correct.\">Unexpected error</span>');\n                break;\n            case 4:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed due to incorrect authentication key or insufficient privileges on the remote instance.\">Authentication failed</span>');\n                break;\n            case 5:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed because the sync user is expected to change passwords. Log into the remote MISP to rectify this.\">Password change required</span>');\n                break;\n            case 6:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed because the sync user on the remote has not accepted the terms of use. Log into the remote MISP to rectify this.\">Terms not accepted</span>');\n                break;\n            case 7:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"The user account on the remote instance is not a sync user.\">Remote user not a sync user</span>');\n                break;\n            case 8:\n                $(\"#connection_test_\" + id).html('<span class=\"orange bold\" title=\"The user account on the remote instance is only a sightings user.\">Syncing sightings only</span>');\n                break;\n            }\n        }\n    })\n}\n\nfunction getTextColour(hex) {\n    hex = hex.slice(1);\n    var r = parseInt(hex.substring(0,2), 16);\n    var g = parseInt(hex.substring(2,4), 16);\n    var b = parseInt(hex.substring(4,6), 16);\n    var avg = ((2 * r) + b + (3 * g))/6;\n    if (avg < 128) {\n        return 'white';\n    } else {\n        return 'black';\n    }\n}\n\nfunction gpgSelect(fingerprint) {\n    $(\"#popover_form\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n    $.ajax({\n        type: \"get\",\n        url: \"/users/fetchGpgKey/\" + fingerprint,\n        beforeSend: function () {\n            $(\".loading\").show();\n        },\n        success: function (data) {\n            $(\"#UserGpgkey\").val(data);\n            showMessage('success', \"Key found!\");\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        },\n        complete: function () {\n            $(\".loading\").hide();\n        },\n    });\n}\n\nfunction lookupPGPKey(emailFieldName) {\n    var email = $('#' + emailFieldName).val();\n    simplePopup(\"/users/searchGpgKey/\" + email);\n}\n\nfunction zeroMQServerAction(action) {\n    $.ajax({\n        type: \"get\",\n        url: \"/servers/\" + action + \"ZeroMQServer/\",\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success: function (data) {\n            $(\".loading\").hide();\n            if (action !== 'status') {\n                window.location.reload();\n            } else {\n                $(\"#confirmation_box\").html(data);\n                openPopup(\"#confirmation_box\");\n            }\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        }\n    });\n}\n\nfunction convertServerFilterRules(rules) {\n    validOptions.forEach(function (type) {\n        container = \"#\"+ modelContext + type.ucfirst() + \"Rules\";\n        if ($(container).val() != '' && $(container).val() != '[]') {\n            rules[type] = JSON.parse($(container).val());\n        } else {\n            if (type === 'pull') {\n                rules[type] = {\"tags\": {\"OR\": [], \"NOT\": []}, \"orgs\": {\"OR\": [], \"NOT\": []}, \"url_params\": \"\"}\n            } else {\n                rules[type] = {\"tags\": {\"OR\": [], \"NOT\": []}, \"orgs\": {\"OR\": [], \"NOT\": []}}\n            }\n        };\n    });\n    serverRuleUpdate();\n    return rules;\n}\n\nfunction serverRuleUpdate() {\n    var statusOptions = [\"OR\", \"NOT\"];\n    validOptions.forEach(function(type) {\n        validFields.forEach(function(field) {\n            if (type === 'push') {\n                var indexedList = {};\n                window[field].forEach(function(item) {\n                    indexedList[item.id] = item.name;\n                });\n            }\n            statusOptions.forEach(function(status) {\n                if (rules[type][field][status].length > 0) {\n                    $('#' + type + '_' + field + '_' + status).show();\n                    var t = '';\n                    rules[type][field][status].forEach(function(item) {\n                        if (t.length > 0) t += ', ';\n                        if (type === 'pull') t += item;\n                        else t += indexedList[item];\n                    });\n                    $('#' + type + '_' + field + '_' + status + '_text').text(t);\n                } else {\n                    $('#' + type + '_' + field + '_' + status).hide();\n                }\n            });\n        });\n        if (type === 'pull') {\n            if (rules[type]['url_params']) {\n                $(\"#pull_url_params\").show();\n                $(\"#pull_url_params_text\").text(rules[type]['url_params']);\n            } else {\n                $(\"#pull_url_params\").hide();\n            }\n        }\n    });\n    serverRuleGenerateJSON();\n}\n\nfunction serverRuleFormActivate(type) {\n    if (type != 'pull' && type != 'push') return false;\n    $('.server_rule_popover').hide();\n    $('#gray_out').fadeIn();\n    $('#server_' + type + '_rule_popover').show();\n}\n\nfunction serverRuleCancel() {\n    $(\"#gray_out\").fadeOut();\n    $(\".server_rule_popover\").fadeOut();\n}\n\nfunction serverRuleGenerateJSON() {\n    validOptions.forEach(function(type) {\n        if ($('#Server' + type.ucfirst() + \"Rules\").length) {\n            $('#Server' + type.ucfirst() + \"Rules\").val(JSON.stringify(rules[type]));\n        } else {\n            $('#Feed' + type.ucfirst() + \"Rules\").val(JSON.stringify(rules[type]));\n        }\n    });\n}\n\nfunction serverRulePopulateTagPicklist() {\n    var fields = [\"tags\", \"orgs\"];\n    var target = \"\";\n    fields.forEach(function(field) {\n        target = \"\";\n        window[field].forEach(function(element) {\n            if ($.inArray(element.id, rules[\"push\"][field][\"OR\"]) != -1) target = \"#\" + field + \"pushLeftValues\";\n            else if ($.inArray(element.id, rules[\"push\"][field][\"NOT\"]) != -1) target = \"#\" + field + \"pushRightValues\";\n            else target = \"#\" + field + \"pushMiddleValues\";\n            $(target).append($('<option/>', {\n                value: element.id,\n                text : element.name\n            }));\n        });\n        target = \"#\" + field + \"pullLeftValues\";\n        rules[\"pull\"][field][\"OR\"].forEach(function(t) {\n            $(target).append($('<option/>', {\n                value: t,\n                text : t\n            }));\n        });\n        target = \"#\" + field + \"pullRightValues\";\n        rules[\"pull\"][field][\"NOT\"].forEach(function(t) {\n            $(target).append($('<option/>', {\n                value: t,\n                text : t\n            }));\n        });\n    });\n    $('#urlParams').val(rules[\"pull\"][\"url_params\"]);\n}\n\nfunction submitServerRulePopulateTagPicklistValues(context) {\n    validFields.forEach(function(field) {\n        rules[context][field][\"OR\"] = [];\n        $(\"#\" + field + context + \"LeftValues option\").each(function() {\n            rules[context][field][\"OR\"].push($(this).val());\n        });\n        rules[context][field][\"NOT\"] = [];\n        $(\"#\" + field + context + \"RightValues option\").each(function() {\n            rules[context][field][\"NOT\"].push($(this).val());\n        });\n    });\n    if (context === 'pull') {\n        rules[context][\"url_params\"] = $('#urlParams').val();\n    }\n    $('#server_' + context + '_rule_popover').fadeOut();\n    $('#gray_out').fadeOut();\n    serverRuleUpdate();\n}\n\n// type = pull/push, field = tags/orgs, from = Left/Middle/Right, to = Left/Middle/Right\nfunction serverRuleMoveFilter(type, field, from, to) {\n    var opposites = {\"Left\": \"Right\", \"Right\": \"Left\"};\n    // first fetch the value\n    var value = \"\";\n    if (type == \"pull\" && from == \"Middle\") {\n        var doInsert = true;\n        value = $(\"#\" + field + type + \"NewValue\").val();\n        if (value.length !== 0 && value.trim()) {\n            $(\"#\" + field + type + to + \"Values\" + \" option\").each(function() {\n                if (value == $(this).val()) doInsert = false;\n            });\n            $(\"#\" + field + type + opposites[to] + \"Values\" + \" option\").each(function() {\n                if (value == $(this).val()) $(this).remove();\n            });\n            if (doInsert) {\n                $(\"#\" + field + type + to + \"Values\").append($('<option/>', {\n                    value: value,\n                    text : value\n                }));\n            }\n        }\n        $(\"#\" + field + type + \"NewValue\").val('');\n    } else {\n        $(\"#\" + field + type + from + \"Values option:selected\").each(function () {\n            if (type != \"pull\" || to != \"Middle\") {\n                value = $(this).val();\n                text = $(this).text();\n                $(\"#\" + field + type + to + \"Values\").append($('<option/>', {\n                    value: value,\n                    text : text\n                }));\n            }\n            $(this).remove();\n        });\n    }\n}\n\nfunction syncUserSelected() {\n    if ($('#UserRoleId :selected').val() in syncRoles) {\n        $('#syncServers').show();\n    } else {\n        $('#syncServers').hide();\n    }\n}\n\nfunction filterAttributes(filter, id) {\n    url = \"/events/viewEventAttributes/\" + id;\n    if(filter === 'value'){\n        filter = encodeURIComponent($('#quickFilterField').val().trim());\n        url += filter.length > 0 ? \"/searchFor:\" + filter : \"\";\n    } else if(filter !== 'all') {\n        url += \"/attributeFilter:\" + filter\n        filter = encodeURIComponent($('#quickFilterField').val().trim());\n        url += filter.length > 0 ? \"/searchFor:\" + filter : \"\";\n    }\n    if (deleted) url += '/deleted:true';\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction pivotObjectReferences(url, uuid) {\n    url += '/focus:' + uuid;\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction toggleBoolFilter(url, param) {\n    if (querybuilderTool === undefined) {\n        triggerEventFilteringTool(true); // allows to fetch rules\n    }\n    var rules = querybuilderTool.getRules({ skip_empty: true, allow_invalid: true });\n    var res = cleanRules(rules);\n    Object.keys(res).forEach(function(k) {\n        if (url.indexOf(k) > -1) { // delete url rule (will be replaced by query builder value later on)\n            var replace = '\\/' + k + \".+/?\";\n            var re = new RegExp(replace,\"i\");\n            url = url.replace(re, '');\n        }\n    });\n    if (res[param] !== undefined) {\n        if (param == 'deleted') {\n            res[param] = res[param] == 0 ? 2 : 0;\n        } else {\n            res[param] = res[param] == 0 ? 1 : 0;\n        }\n    } else {\n        if (param == 'deleted') {\n            res[param] = 0;\n        } else {\n            res[param] = 1;\n        }\n    }\n\n    url += buildFilterURL(res);\n    url = url.replace(/view\\//i, 'viewEventAttributes/');\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            querybuilderTool = undefined;\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction mergeOrganisationUpdate() {\n    var orgTypeOptions = ['local', 'external'];\n    var orgTypeSelects = ['OrganisationOrgsLocal', 'OrganisationOrgsExternal'];\n    var orgTypeId = $('#OrganisationTargetType').val();\n    var orgType = orgTypeSelects[orgTypeId];\n    var orgID = $('#' + orgTypeSelects[orgTypeId]).val();\n    console.log(orgTypeSelects[orgTypeId]);\n    console.log(orgID);\n    org = orgArray[orgTypeOptions[orgTypeId]][orgID]['Organisation'];\n    console.log(org);\n    $('#org_id').text(org['id']);\n    $('#org_name').text(org['name']);\n    $('#org_uuid').text(org['uuid']);\n    $('#org_local').text(orgTypeOptions[$('#OrganisationTargetType').val()]);\n}\n\nfunction mergeOrganisationTypeToggle() {\n    if ($('#OrganisationTargetType').val() == 0) {\n        $('#orgsLocal').show();\n        $('#orgsExternal').hide();\n    } else {\n        $('#orgsLocal').hide();\n        $('#orgsExternal').show();\n    }\n}\n\nfunction feedDistributionChange() {\n    if ($('#FeedDistribution').val() == 4) $('#SGContainer').show();\n    else $('#SGContainer').hide();\n}\n\nfunction checkUserPasswordEnabled() {\n    if ($('#UserEnablePassword').is(':checked')) {\n        $('#PasswordDiv').show();\n    } else {\n        $('#PasswordDiv').hide();\n    }\n}\n\nfunction checkUserExternalAuth() {\n    if ($('#UserExternalAuthRequired').is(':checked')) {\n        $('#externalAuthDiv').show();\n        $('#passwordDivDiv').hide();\n    } else {\n        $('#externalAuthDiv').hide();\n        $('#passwordDivDiv').show();\n    }\n}\n\nfunction toggleSettingSubGroup(group) {\n    $('.subGroup_' + group).toggle();\n}\n\nfunction runHoverLookup(type, id) {\n    $.ajax({\n        success:function (html) {\n            ajaxResults[\"hover\"][type + \"_\" + id] = html;\n            var element = $('#' + type + '_' + id + '_container');\n            element.popover({\n                title: attributeHoverTitle(id, type),\n                content: html,\n                placement: attributeHoverPlacement(element),\n                html: true,\n                trigger: 'manual',\n                container: 'body'\n            }).popover('show');\n            $('#' + currentPopover).popover('destroy');\n            currentPopover = type + '_' + id + '_container'\n        },\n        cache: false,\n        url:\"/attributes/hoverEnrichment/\" + id,\n    });\n}\n\n$(\".cortex-json\").click(function() {\n    var cortex_data = $(this).data('cortex-json');\n    cortex_data = htmlEncode(JSON.stringify(cortex_data, null, 2));\n    var popupHtml = '<pre class=\"simplepre\">' + cortex_data + '</pre>';\n    popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n\n});\n\n// add the same as below for click popup\n$(document).on( \"click\", \".eventViewAttributePopup\", function() {\n    $('#popover_box').empty();\n    type = $(this).attr('data-object-type');\n    id = $(this).attr('data-object-id');\n    if (!(type + \"_\" + id in ajaxResults[\"persistent\"])) {\n        $.ajax({\n            success:function (html) {\n                ajaxResults[\"persistent\"][type + \"_\" + id] = html;\n            },\n            async: false,\n            cache: false,\n            url:\"/attributes/hoverEnrichment/\" + id + \"/1\",\n        });\n    }\n    if (type + \"_\" + id in ajaxResults[\"persistent\"]) {\n        var enrichment_popover = ajaxResults[\"persistent\"][type + \"_\" + id];\n        enrichment_popover += '<div class=\"close-icon useCursorPointer popup-close-icon\" onClick=\"closeScreenshot();\"></div>';\n        $('#popover_box').html('<div class=\"screenshot_content\">' + enrichment_popover + '</div>');\n        $('#popover_box').show();\n        $(\"#gray_out\").fadeIn();\n        $('#popover_box').css({'padding': '5px'});\n        $('#popover_box').css( \"maxWidth\", ( $( window ).width() * 0.9 | 0 ) + \"px\" );\n        $('#popover_box').css( \"maxHeight\", ( $( window ).width() - 300 | 0 ) + \"px\" );\n        $('#popover_box').css( \"overflow-y\", \"auto\");\n\n        var left = ($(window).width() / 2) - ($('#popover_box').width() / 2);\n        $('#popover_box').css({'left': left + 'px'});\n    }\n    $('#' + currentPopover).popover('destroy');\n});\n\nfunction flashErrorPopover() {\n    $('#popover_form').css( \"minWidth\", \"200px\");\n    $('#popover_form').html($('#flashErrorMessage').html());\n    $('#popover_form').show();\n    var left = ($(window).width() / 2) - ($('#popover_form').width() / 2);\n    $('#popover_form').css({'left': left + 'px'});\n    $(\"#gray_out\").fadeIn();\n}\n\nfunction attributeHoverTitle(id, type) {\n  return `<span>Lookup results:</span>\n\t\t<i class=\"fa fa-search-plus useCursorPointer eventViewAttributePopup\"\n\t\t\t\tstyle=\"float: right;\"\n\t\t\t\tdata-object-id=\"${id}\"\n\t\t\t\tdata-object-type=\"${type}\">\n\t</i>`;\n}\n\nfunction attributeHoverPlacement(element) {\n  var offset = element.offset(),\n    topOffset = offset.top - $(window).scrollTop(),\n    left = offset.left - $(window).scrollLeft(),\n    viewportHeight = window.innerHeight,\n    viewportWidth = window.innerWidth,\n    horiz = 0.5 * viewportWidth - left,\n    horizPlacement = horiz > 0 ? 'right' : 'left',\n    popoverMaxHeight = .75 * viewportHeight;\n\n  // default to top placement\n  var placement = topOffset - popoverMaxHeight > 0 ? 'top' : horizPlacement;\n\n  // more space on bottom\n  if (topOffset < .5 * viewportHeight) {\n    // will popup fit on bottom\n    placement = popoverMaxHeight < topOffset ? 'bottom' : horizPlacement;\n  }\n\n  return placement;\n}\n\n$('body').on('click', function (e) {\n  $('[data-toggle=popover]').each(function () {\n    // hide any open popovers when the anywhere else in the body is clicked\n    if (typeof currentPopover !== 'undefined') {\n        if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {\n          $('#' + currentPopover).popover('destroy');\n        }\n    }\n  });\n});\n\nfunction serverOwnerOrganisationChange(host_org_id) {\n    if ($('#ServerOrganisationType').val() == \"0\" && $('#ServerLocal').val() == host_org_id) {\n        $('#InternalDiv').show();\n    } else {\n        $('#ServerInternal').prop(\"checked\", false);\n        $('#InternalDiv').hide();\n    }\n}\n\nfunction requestAPIAccess() {\n    url = \"/users/request_API/\";\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\".loading\").hide();\n            handleGenericAjaxResponse(data);\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not request API access.');\n        }\n    });\n}\n\nfunction initPopoverContent(context) {\n    for (var property in formInfoFields) {\n        if (formInfoFields.hasOwnProperty(property)) {\n            $('#' + property + 'InfoPopover').popover(\"destroy\").popover({\n                placement: 'right',\n                html: 'true',\n                trigger: 'hover',\n                content: getFormInfoContent(property, '#' + context + formInfoFields[property])\n            });\n        }\n    }\n}\n\nfunction checkSharingGroup(context) {\n    if ($('#' + context + 'Distribution').val() == 4) {\n        $('#' + context + 'SharingGroupId').show();\n        $('#' + context + 'SharingGroupId').closest(\"div\").show();\n    } else {\n        $('#' + context + 'SharingGroupId').hide();\n        $('#' + context + 'SharingGroupId').closest(\"div\").hide();\n    }\n}\n\nfunction getFormInfoContent(property, field) {\n    var content = window[property + 'FormInfoValues'][$(field).val()];\n    if (content === undefined || content === null) {\n        return 'N/A';\n    }\n    return content;\n}\n\nfunction formCategoryChanged(id) {\n    // fill in the types\n    var options = $('#' + id +'Type').prop('options');\n    $('option', $('#' + id +'Type')).remove();\n    $.each(category_type_mapping[$('#' + id +'Category').val()], function(val, text) {\n        options[options.length] = new Option(text, val);\n    });\n    // enable the form element\n    $('#AttributeType').prop('disabled', false);\n}\n\nfunction malwareCheckboxSetter(context) {\n    idDiv = \"#\" + context + \"Category\" +'Div';\n    var value = $(\"#\" + context + \"Category\").val();  // get the selected value\n    // set the malware checkbox if the category is in the zip types\n    $(\"#\" + context + \"Malware\").prop('checked', formZipTypeValues[value] == \"true\");\n}\n\nfunction feedFormUpdate() {\n    $('.optionalField').hide();\n    switch($('#FeedSourceFormat').val()) {\n        case 'freetext':\n            $('#TargetDiv').show();\n            $('#OrgcDiv').show();\n            $('#OverrideIdsDiv').show();\n            $('#PublishDiv').show();\n            if ($('#FeedTarget').val() != 0) {\n                $('#TargetEventDiv').show();\n                $('#DeltaMergeDiv').show();\n            }\n            $('#settingsCommonExcluderegexDiv').show();\n            break;\n        case 'csv':\n            $('#TargetDiv').show();\n            $('#OrgcDiv').show();\n            $('#OverrideIdsDiv').show();\n            $('#PublishDiv').show();\n            if ($('#FeedTarget').val() != 0) {\n                $('#TargetEventDiv').show();\n                $('#DeltaMergeDiv').show();\n            }\n            $('#settingsCsvValueDiv').show();\n            $('#settingsCsvDelimiterDiv').show();\n            $('#settingsCommonExcluderegexDiv').show();\n            break;\n    }\n    if ($('#FeedInputSource').val() == 'local') {\n        $('#DeleteLocalFileDiv').show();\n        $('#HeadersDiv').hide();\n    } else {\n        $('#DeleteLocalFileDiv').hide();\n        $('#HeadersDiv').show();\n    }\n}\n\nfunction setContextFields() {\n    if (showContext) {\n        $('.context').show();\n        $('#show_context').addClass(\"attribute_filter_text_active\");\n        $('#show_context').removeClass(\"attribute_filter_text\");\n    } else {\n        $('.context').hide();\n        $('#show_context').addClass(\"attribute_filter_text\");\n        $('#show_context').removeClass(\"attribute_filter_text_active\");\n    }\n}\n\nfunction toggleContextFields() {\n    if (!showContext) {\n        showContext = true;\n    } else {\n        showContext = false;\n    }\n    setContextFields();\n}\n\nfunction checkOrphanedAttributes() {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            var color = 'red';\n            var text = ' (Removal recommended)';\n            if (data == '0') {\n                color = 'green';\n                text = ' (OK)';\n            }\n            $(\"#orphanedAttributeCount\").html('<span class=\"' + color + '\">' + data + text + '</span>');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/attributes/checkOrphanedAttributes/\",\n    });\n}\n\nfunction checkAttachments() {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            var color = 'red';\n            var text = ' (Bad links detected)';\n            if (data !== undefined && data.trim() == '0') {\n                color = 'green';\n                text = ' (OK)';\n            }\n            $(\"#orphanedFileCount\").html('<span class=\"' + color + '\">' + data + text + '</span>');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/attributes/checkAttachments/\",\n    });\n}\n\nfunction loadTagTreemap() {\n    $.ajax({\n        async:true,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $(\".treemapdiv\").html(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/users/tagStatisticsGraph\",\n    });\n}\n\nfunction quickEditEvent(id, field) {\n    $.ajax({\n        async:true,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $(\"#\" + field + \"Field\").html(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/events/quickEdit/\" + id + \"/\" + field,\n    });\n}\n\nfunction selectAllInbetween(last, current) {\n    if (last === false || last == current) return false;\n    var from = $('#' + last).parent().parent().index();\n    var to = $('#' + current).parent().parent().index();\n    if (to < from) {\n        var temp = from;\n        from = to;\n        to = temp;\n    }\n    $('.select_proposal, .select_attribute, .select').each(function (e) {\n        if ($('#' + this.id).parent().parent().index() >= from && $('#' + this.id).parent().parent().index() <= to) {\n            $(this).prop('checked', true);\n        }\n    });\n}\n\n$('.galaxy-toggle-button').click(function() {\n    var element = $(this).data('toggle-type');\n    if ($(this).children('span').hasClass('icon-minus')) {\n        $(this).children('span').addClass('icon-plus');\n        $(this).children('span').removeClass('icon-minus');\n        $('#' + element + '_div').hide();\n    } else {\n        $(this).children('span').removeClass('icon-plus');\n        $(this).children('span').addClass('icon-minus');\n        $('#' + element + '_div').show();\n    }\n});\n\n\nfunction addGalaxyListener(id) {\n    var target_type = $(id).data('target-type');\n    var target_id = $(id).data('target-id');\n    var local = $(id).data('local');\n    console.log(local);\n    if (local) {\n        local = 1;\n    } else {\n        local = 0;\n    }\n    popoverPopup(id, target_id + '/' + target_type + '/local:' + local, 'galaxies', 'selectGalaxyNamespace');\n}\n\nfunction quickSubmitGalaxyForm(cluster_ids, additionalData) {\n    cluster_ids = cluster_ids === null ? [] : cluster_ids;\n    var target_id = additionalData['target_id'];\n    var scope = additionalData['target_type'];\n    var local = additionalData['local'];\n    var url = \"/galaxies/attachMultipleClusters/\" + target_id + \"/\" + scope + \"/local:\" + local;\n    fetchFormDataAjax(url, function(formData) {\n        $('body').append($('<div id=\"temp\"/>').html(formData));\n        $('#temp #GalaxyTargetIds').val(JSON.stringify(cluster_ids));\n        if (target_id == 'selected') {\n            $('#AttributeAttributeIds, #GalaxyAttributeIds').val(getSelected());\n        }\n        $.ajax({\n            data: $('#GalaxyAttachMultipleClustersForm').serialize(),\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                if (target_id === 'selected') {\n                    location.reload();\n                } else {\n                    if (scope == 'tag_collection') {\n                        location.reload();\n                    } else {\n                        loadGalaxies(target_id, scope);\n                        handleGenericAjaxResponse(data);\n                    }\n                }\n            },\n            error:function() {\n                showMessage('fail', 'Could not add cluster.');\n                loadGalaxies(target_id, scope);\n            },\n            complete:function() {\n                $(\"#popover_form\").fadeOut();\n                $(\"#gray_out\").fadeOut();\n                $(\".loading\").hide();\n                $('#temp').remove();\n            },\n            type:\"post\",\n            url: url\n        });\n    });\n}\n\nfunction checkAndSetPublishedInfo(skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    var id = $('#hiddenSideMenuData').data('event-id');\n    if (id !== 'undefined' && !skip_reload) {\n        $.get( \"/events/checkPublishedStatus/\" + id, function(data) {\n            if (data == 1) {\n                $('.published').removeClass('hidden');\n                $('.not-published').addClass('hidden');\n            } else {\n                $('.published').addClass('hidden');\n                $('.not-published').removeClass('hidden');\n            }\n        });\n    }\n}\n\n$(document).keyup(function(e){\n    if (e.keyCode === 27) {\n    $(\"#gray_out\").fadeOut();\n        $(\"#popover_form\").fadeOut();\n        $(\"#popover_form_large\").fadeOut();\n        $(\"#popover_matrix\").fadeOut();\n        $(\"#screenshot_box\").fadeOut();\n        $(\"#popover_box\").fadeOut();\n        $(\"#confirmation_box\").fadeOut();\n        $(\".loading\").hide();\n        resetForms();\n    }\n});\n\nfunction closeScreenshot() {\n    $(\"#popover_box\").fadeOut();\n    $(\"#screenshot_box\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n}\n\nfunction loadSightingGraph(id, scope) {\n    $.get( \"/sightings/viewSightings/\" + id + \"/\" + scope, function(data) {\n        $(\"#sightingsData\").html(data);\n    });\n}\n\nfunction checkRolePerms() {\n    if ($(\"#RolePermission\").val() == '0' || $(\"#RolePermission\").val() == '1') {\n        $('.readonlydisabled').prop('checked', false);\n        $('.readonlydisabled').hide();\n    } else {\n        $('.readonlydisabled').show();\n        $('.permFlags').show();\n    }\n    if ($(\"#RolePermSiteAdmin\").prop('checked')) {\n        $('.site_admin_enforced').prop('checked', true);\n    }\n}\n\nfunction updateMISP() {\n    $.get( \"/servers/update\", function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction submitMISPUpdate() {\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            $('#gitResult').text(data);\n            $('#gitResult').removeClass('hidden');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/servers/update\",\n    });\n}\n\nfunction submitSubmoduleUpdate(clicked) {\n    var $clicked = $(clicked);\n    var submodule_path = $clicked.data('submodule');\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $clicked.removeClass('fa-download');\n            $clicked.addClass('fa-spin fa-spinner');\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (formHTML, textStatus) {\n            var $form = $(formHTML);\n            $('body').append($form);\n            var formData = $form.serialize();\n            $.ajax({\n                data: formData,\n                success:function (data, textStatus) {\n                    if (data.status) {\n                        var job_sent = data.job_sent !== undefined ? data.job_sent : false;\n                        var sync_result = data.sync_result !== undefined ? data.sync_result : '';\n                        updateSubModulesStatus(data.output, job_sent, sync_result);\n                    } else {\n                        showMessage('error', 'Something went wrong');\n                        $('#submoduleGitResultDiv').show();\n                        $('#submoduleGitResult').removeClass('green').addClass('red').text(data.output);\n                    }\n                },\n                error: function (data) {\n                    showMessage('error', 'Something went wrong');\n                    $('#submoduleGitResultDiv').show();\n                    $('#submoduleGitResult').removeClass('green').addClass('red').text(data.output);\n                },\n                complete:function() {\n                    $clicked.removeClass('fa-spin fa-spinner');\n                    $clicked.addClass('fa-download');\n                    $form.remove();\n                },\n                type:\"post\",\n                cache: false,\n                url:$form.attr('action'),\n            });\n        },\n        url:'/servers/getSubmoduleQuickUpdateForm/' + (submodule_path !== undefined ? btoa(submodule_path) : ''),\n    });\n}\n\n// Show $(id) if the enable parameter evaluates to true. Hide it otherwise\nfunction checkAndEnable(id, enable) {\n    if (enable) {\n        $(id).show();\n    } else {\n        $(id).hide();\n    }\n}\n\n// Show and enable checkbox $(id) if the enable parameter evaluates to true. Hide and disable it otherwise.\nfunction checkAndEnableCheckbox(id, enable) {\n    if (enable) {\n        $(id).removeAttr(\"disabled\");\n        $(id).prop('checked', true);\n    } else {\n        $(id).prop('checked', false);\n        $(id).attr(\"disabled\", true);\n    }\n}\n\nfunction enableDisableObjectRows(rows) {\n    rows.forEach(function(i) {\n        if ($(\"#Attribute\" + i + \"ValueSelect\").length != 0) {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"ValueSelect\").val() != \"\");\n            $(\"#Attribute\" + i + \"ValueSelect\").bind('input propertychange', function() {\n                checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(this).val() != \"\");\n            })\n        } else if ($(\"#Attribute\" + i + \"Attachment\").length != 0) {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Attachment\").val() != \"\");\n        } else {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Value\").val() != \"\");\n        }\n        $(\"#Attribute\" + i + \"Value\").bind('input propertychange', function() {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(this).val() != \"\");\n        });\n        $(\"#Attribute\" + i + \"Attachment\").on('change', function() {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Attachment\").val() != \"\");\n        });\n    });\n}\n\nfunction objectReferenceInput() {\n    var types = [\"Attribute\", \"Object\"];\n    var $targetSelect = $('[data-targetselect=\"targetSelect\"]');\n    for (var type in types) {\n        for (var k in targetEvent[types[type]]) {\n            if (targetEvent[types[type]][k]['uuid'] == $('#ObjectReferenceReferencedUuid').val()) {\n                $targetSelect.val($('#ObjectReferenceReferencedUuid').val());\n                changeObjectReferenceSelectOption($('#ObjectReferenceReferencedUuid').val(), {type: types[type]});\n                $targetSelect.trigger('chosen:updated');\n            }\n        }\n    }\n}\n\nfunction objectReferenceCheckForCustomRelationship() {\n    var relationship_type_field = $('#ObjectReferenceRelationshipTypeSelect option:selected');\n    var relationship_type = $(relationship_type_field).val();\n    if (relationship_type == 'custom') {\n        $('#ObjectReferenceRelationshipType').parent().removeClass('hidden');\n    } else {\n        $('#ObjectReferenceRelationshipType').parent().addClass('hidden');\n    }\n}\n\nfunction add_basic_auth() {\n    var headers = $('#FeedHeaders').val().split(\"\\n\");\n    $('#FeedHeaders').val(\"\");\n    headers.forEach(function(header) {\n        header = header.trim();\n        if (header != \"\") {\n            header = header.split(\":\");\n            var key = header.shift();\n            var value = header.join(\":\");\n            if (key != 'Authorization') {\n                $('#FeedHeaders').val($('#FeedHeaders').val() + key.trim() + \":\" + value.trim() + \"\\n\");\n            }\n        }\n    });\n    var basicAuth = $('#BasicAuthUsername').val().trim() + ':' + $('#BasicAuthPassword').val().trim();\n    $('#FeedHeaders').val($('#FeedHeaders').val() + \"Authorization: Basic \" + btoa(basicAuth) + \"\\n\");\n    $('#basicAuthFormEnable').show();\n    $('#basicAuthForm').hide();\n}\n\nfunction changeObjectReferenceSelectOption(selected, additionalData) {\n    var uuid = selected;\n    var type = additionalData.type;\n    $('#ObjectReferenceReferencedUuid').val(uuid);\n    if (type == \"Attribute\") {\n        $('#targetData').html(\"\");\n        for (var k in targetEvent[type][uuid]) {\n            if ($.inArray(k, ['uuid', 'category', 'type', 'value', 'to_ids']) !== -1) {\n                $('#targetData').append('<div><span id=\"' + uuid + '_' + k + '_key\" class=\"bold\"></span>: <span id=\"' + uuid + '_' + k + '_data\"></span></div>');\n                $('#' + uuid + '_' + k + '_key').text(k);\n                $('#' + uuid + '_' + k + '_data').text(targetEvent[type][uuid][k]);\n            }\n        }\n    } else {\n        $('#targetData').html(\"\");\n        for (var k in targetEvent[type][uuid]) {\n            if (k == 'Attribute') {\n                $('#targetData').append('<br /><div><span id=\"header\" class=\"bold\">Attributes:</span>');\n                for (attribute in targetEvent[type][uuid]['Attribute']) {\n                    for (k2 in targetEvent[type][uuid]['Attribute'][attribute]) {\n                        if ($.inArray(k2, ['category', 'type', 'value', 'to_ids']) !== -1) {\n                            $('#targetData').append('<div class=\"indent\"><span id=\"' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_key\" class=\"bold\"></span>: <span id=\"' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_data\"></span></div>');\n                            $('#' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_key').text(k2);\n                            $('#' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_data').text(targetEvent[type][uuid]['Attribute'][attribute][k2]);\n                        }\n                    }\n                    $('#targetData').append('<br />');\n                }\n            } else {\n                if ($.inArray(k, ['name', 'uuid', 'meta-category']) !== -1) {\n                    $('#targetData').append('<div><span id=\"' + uuid + '_' + k + '_key\" class=\"bold\"></span>: <span id=\"' + uuid + '_' + k + '_data\"></span></div>');\n                    $('#' + uuid + '_' + k + '_key').text(k);\n                    $('#' + uuid + '_' + k + '_data').text(targetEvent[type][uuid][k]);\n                }\n            }\n        }\n    }\n}\n\nfunction previewEventBasedOnUuids() {\n    var currentValue = $(\"#EventExtendsUuid\").val();\n    if (currentValue == '') {\n        $('#extended_event_preview').hide();\n    } else {\n        $.ajax({\n            url: \"/events/getEventInfoById/\" + currentValue,\n            type: \"get\",\n            error: function() {\n                $('#extended_event_preview').hide();\n            },\n            success: function(data) {\n                $('#extended_event_preview').show();\n                $('#extended_event_preview').html(data);\n            }\n        });\n    }\n}\n\nfunction checkNoticeList(type) {\n    var fields_to_check = {\n        \"attribute\": [\"category\", \"type\"]\n    }\n    var warnings = [];\n    $('#notice_message').html('<h4>Notices:</h4>');\n    $('#notice_message').hide();\n    fields_to_check[type].forEach(function(field_name) {\n        if (field_name in notice_list_triggers) {\n            var field_value = $('#' + type.ucfirst() + field_name.ucfirst()).val();\n            if (field_value in notice_list_triggers[field_name]) {\n                notice_list_triggers[field_name][field_value].forEach(function(notice) {\n                    $('#notice_message').show();\n                    $('#notice_message').append(\n                        $('<div/>')\n                            .append($('<span/>').text('['))\n                            .append($('<a/>', {href: '/noticelists/view/' + notice['list_id'], class:'bold'}).text(notice['list_name']))\n                            .append($('<span/>').text(']: '))\n                            .append($('<span/>').text(notice['message']['en']))\n                    );\n                });\n            }\n        }\n    });\n\n}\n\nfunction quickSelect(target) {\n    var range = document.createRange();\n    var selection = window.getSelection();\n    range.selectNodeContents(target);\n    selection.removeAllRanges();\n    selection.addRange(range);\n}\n\n$(document).ready(function() {\n    // Show popover for disabled input that contains `data-disabled-reason`.\n    $('input:disabled[data-disabled-reason]').popover(\"destroy\").popover({\n        placement: 'right',\n        html: 'true',\n        trigger: 'hover',\n        content: function () {\n            return $(this).data('disabled-reason');\n        }\n    });\n\n    $('#quickFilterField').bind(\"enterKey\",function(e){\n        $('#quickFilterButton').trigger(\"click\");\n    });\n    $('#quickFilterField').keyup(function(e){\n        if(e.keyCode == 13)\n        {\n            $('#quickFilterButton').trigger(\"click\");\n        }\n    });\n    $(\".queryPopover\").click(function() {\n        url = $(this).data('url');\n        id = $(this).data('id');\n        $.get(url + '/' + id, function(data) {\n            $('#popover_form').html(data);\n            openPopup('#popover_form');\n        });\n    });\n    $('.servers_default_role_checkbox').click(function() {\n        var id = $(this).data(\"id\");\n        var state = $(this).is(\":checked\");\n        $(\".servers_default_role_checkbox\").not(this).attr('checked', false);\n        $.ajax({\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                handleGenericAjaxResponse(data);\n            },\n            complete:function() {\n                $(\".loading\").hide();\n            },\n            type:\"get\",\n            cache: false,\n            url: '/admin/roles/set_default/' + (state ? id : \"\"),\n        });\n    });\n    // clicking on an element with this class will select all of its contents in a\n    // single click\n    $('.quickSelect').click(function() {\n        quickSelect(this);\n    });\n    $(\".cortex-json\").click(function() {\n        var cortex_data = $(this).data('cortex-json');\n        cortex_data = htmlEncode(JSON.stringify(cortex_data, null, 2));\n        var popupHtml = '<pre class=\"simplepre\">' + cortex_data + '</pre>';\n        popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n        $('#popover_box').html(popupHtml);\n        $('#popover_box').show();\n        $('#popover_box').css({'padding': '5px'});\n        left = ($(window).width() / 2) - ($('#popover_box').width() / 2);\n        if (($('#popover_box').height() + 250) > $(window).height()) {\n            $('#popover_box').height($(window).height() - 250);\n            $('#popover_box').css(\"overflow-y\", \"scroll\");\n            $('#popover_box').css(\"overflow-x\", \"hidden\");\n        }\n        $('#popover_box').css({'left': left + 'px'});\n        $(\"#gray_out\").fadeIn();\n    });\n    $('.add_object_attribute_row').click(function() {\n        var template_id = $(this).data('template-id');\n        var object_relation = $(this).data('object-relation');\n        var k = $('#last-row').data('last-row');\n        var k = k+1;\n        $('#last-row').data('last-row', k);\n        url = \"/objects/get_row/\" + template_id + \"/\" + object_relation + \"/\" + k;\n        $.get(url, function(data) {\n            $('#row_' + object_relation + '_expand').before($(data).fadeIn()).html();\n            var $added_row = $('#row_' + object_relation + '_expand').prev().prev();\n            $added_row.find('select.Attribute_value_select option:first').attr('disabled', true);\n        });\n    });\n    $('.quickToggleCheckbox').toggle(function() {\n        var url = $(this).data('checkbox-url');\n    });\n});\n\n$(\"body\").on(\"click\", \".correlation-expand-button\", function() {\n    $(this).parent().children(\".correlation-expanded-area\").show();\n    $(this).parent().children(\".correlation-collapse-button\").show();\n    $(this).hide();\n}).on(\"click\", \".correlation-collapse-button\", function() {\n    $(this).parent().children(\".correlation-expanded-area\").hide();\n    $(this).parent().children(\".correlation-expand-button\").show();\n    $(this).hide();\n});\n\nfunction queryEventLock(event_id, user_org_id) {\n    if (tabIsActive) {\n        $.ajax({\n            url: \"/events/checkLocks/\" + event_id,\n            type: \"get\",\n            success: function(data, statusText, xhr) {\n                 if (xhr.status == 200) {\n                     if ($('#event_lock_warning').length != 0) {\n                         $('#event_lock_warning').remove();\n                     }\n                     if (data != '') {\n                         $('#main-view-container').append(data);\n                     }\n                 }\n            }\n        });\n    }\n    setTimeout(function() { queryEventLock(event_id, user_org_id); }, 5000);\n}\n\nfunction checkIfLoggedIn() {\n    if (tabIsActive) {\n        $.get(\"/users/checkIfLoggedIn.json\")\n            .fail(function (xhr) {\n                if (xhr.status === 403) {\n                    window.location.replace(baseurl + \"/users/login\");\n                }\n            });\n    }\n    setTimeout(function () {\n        checkIfLoggedIn();\n    }, 5000);\n}\n\nfunction insertRawRestResponse() {\n    $('#rest-response-container').append('<pre id=\"raw-response-container\" />');\n    $('#raw-response-container').text($('#rest-response-hidden-container').text());\n}\n\nfunction insertHTMLRestResponse() {\n    $('#rest-response-container').append('<div id=\"html-response-container\" style=\"border: 1px solid blue; padding:5px;\" />');\n    $('#html-response-container').html($('#rest-response-hidden-container').text());\n}\n\nfunction insertJSONRestResponse() {\n    $('#rest-response-container').append('<p id=\"json-response-container\" style=\"border: 1px solid blue; padding:5px; overflow-wrap: break-word;\" />');\n    var parsedJson = syntaxHighlightJson($('#rest-response-hidden-container').text());\n    $('#json-response-container').html(parsedJson);\n}\n\nfunction syntaxHighlightJson(json, indent) {\n    if (indent === undefined) {\n        indent = 2;\n    }\n    if (typeof json == 'string') {\n        json = JSON.parse(json);\n    }\n    json = JSON.stringify(json, undefined, indent);\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/(?:\\r\\n|\\r|\\n)/g, '<br>').replace(/ /g, '&nbsp;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n            var cls = 'json_number';\n            if (/^\"/.test(match)) {\n                    if (/:$/.test(match)) {\n                            cls = 'json_key';\n                    } else {\n                            cls = 'json_string';\n                    }\n            } else if (/true|false/.test(match)) {\n                    cls = 'json_boolean';\n            } else if (/null/.test(match)) {\n                    cls = 'json_null';\n            }\n            return '<span class=\"' + cls + '\">' + match + '</span>';\n    });\n}\n\nfunction jsonToNestedTable(json, header, table_classes) {\n    if (typeof json == 'string') {\n        json = JSON.parse(json);\n    }\n    if (Object.keys(json).length == 0) {\n        return '';\n    }\n    header = header === undefined ? [] : header;\n    table_classes = table_classes === undefined ? [] : table_classes;\n    var $table = $('<table></table>');\n    table_classes.forEach(function(classname) {\n        $table.addClass(classname);\n    });\n    if (header.length > 0) {\n        var $header = $('<thead><tr></tr></thead>');\n        header.forEach(function(col) {\n            $header.children().append($('<th></th>').text(col));\n        });\n        $table.append($header);\n    }\n    var $body = $('<tbody></tbody>');\n    Object.keys(json).forEach(function(k) {\n        var value = json[k];\n        if (typeof value === 'object') {\n            value = JSON.stringify(value);\n        }\n        $body.append(\n            $('<tr></tr>')\n                .append($('<td></td>').text(k))\n                .append($('<td></td>').text(value))\n        );\n    });\n    $table.append($body);\n    return $table[0].outerHTML;\n}\n\nfunction arrayToNestedTable(header, data, table_classes) {\n    header = header === undefined ? [] : header;\n    table_classes = table_classes === undefined ? ['table', 'table-condensed', 'table-bordered'] : table_classes;\n    var $table = $('<table></table>');\n    table_classes.forEach(function(classname) {\n        $table.addClass(classname);\n    });\n    if (header.length > 0) {\n        var $header = $('<thead><tr></tr></thead>');\n        header.forEach(function(col) {\n            $header.children().append($('<th></th>').text(col));\n        });\n        $table.append($header);\n    }\n    var $body = $('<tbody></tbody>');\n    data.forEach(function(row, i) {\n        var $tr = $('<tr></tr>');\n        row.forEach(function(cell, j) {\n            var $td = $('<td></td>').text(cell);\n            $tr.append($td);\n        });\n        $body.append($tr);\n    });\n    $table.append($body);\n    return $table[0].outerHTML;\n}\n\nfunction liveFilter() {\n    var lookupString = $('#liveFilterField').val();\n    if (lookupString == '') {\n        $('.live_filter_target').each(function() {\n            $(this).parent().show();\n        });\n    } else {\n        $('.live_filter_target').each(function() {\n            $(this).parent().hide();\n        });\n        $('.live_filter_target').each(function() {\n            if ($(this).text().indexOf(lookupString) >= 0) {\n                $(this).parent().show();\n            }\n        });\n    }\n}\n\nfunction sparklineBar(elemId, data, lineCount) {\n    data = d3.csv.parse(data);\n    var y_max = 0;\n    data.forEach(function(e) {\n        e = parseInt(e.val);\n        y_max = e > y_max ? e : y_max;\n    });\n    var WIDTH      = 50;\n    var HEIGHT     = 25;\n    var DATA_COUNT = lineCount;\n    var BAR_WIDTH  = (WIDTH - DATA_COUNT) / DATA_COUNT;\n    var x    = d3.scale.linear().domain([0, DATA_COUNT]).range([0, WIDTH]);\n    var y    = d3.scale.linear().domain([0, y_max]).range([0, HEIGHT]);\n\n    var distributionGraphBarTooltip = d3.select(\"body\").append(\"div\")\n        .attr(\"class\", \"distributionGraphBarTooltip\")\n        .style(\"opacity\", 0);\n\n    var svg = d3.select(elemId).append('svg')\n      .attr('width', WIDTH)\n      .attr('height', HEIGHT)\n      .append('g');\n    svg.selectAll('.bar').data(data)\n      .enter()\n      .append('g')\n        .attr('title', function(d, i) { return d.scope + ': ' + d.val })\n        .attr('class', 'DGbar')\n      .append('rect')\n        .attr('class', 'bar')\n        .attr('x', function(d, i) { return x(i); })\n        .attr('y', function(d, i) { return HEIGHT - y(d.val); })\n        .attr('width', BAR_WIDTH)\n        .attr('height', function(d, i) { return y(d.val); })\n        .attr('fill', '#3465a4');\n\n        $('.DGbar').tooltip({container: 'body'});\n}\n\nfunction generic_picker_move(scope, direction) {\n    if (direction === 'right') {\n        $('#' + scope + 'Left option:selected').remove().appendTo('#' + scope + 'Right');\n    } else {\n        $('#' + scope + 'Right option:selected').remove().appendTo('#' + scope + 'Left');\n    }\n}\n\n\nfunction submit_feed_overlap_tool(feedId) {\n    var result = {\"Feed\": [], \"Server\": []};\n    $('#FeedLeft').children().each(function() {\n        result.Feed.push($(this).val());\n    });\n    $('#ServerLeft').children().each(function() {\n        result.Server.push($(this).val());\n    });\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: result,\n        success:function (data, textStatus) {\n            if (!isNaN(data)) {\n                $('#feed_coverage_bar').text(data + '%');\n                $('#feed_coverage_bar').css('width', data + '%');\n            } else {\n                handleGenericAjaxResponse({'saved':false, 'errors':['Something went wrong. Received response not in the expected format.']});\n            }\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Could not complete the requested action.']});\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/feeds/feedCoverage/\" + feedId,\n    });\n}\n\nfunction changeTaxonomyRequiredState(checkbox) {\n    var checkbox_state = $(checkbox).is(\":checked\");\n    var taxonomy_id = $(checkbox).data('taxonomy-id');\n    fetchFormDataAjax('/taxonomies/toggleRequired/' + taxonomy_id, function(formData) {\n        $.ajax({\n            data: $(formData).serialize(),\n            success:function (data, textStatus) {\n                handleGenericAjaxResponse({'saved':true, 'success':['Taxonomy\\'s required state toggled.']});\n            },\n            error:function() {\n                $(checkbox).prop('checked', !$(checkbox).prop('checked'));\n                handleGenericAjaxResponse({'saved':false, 'errors':['Could not toggle the required state of the taxonomy.']});\n            },\n            async:\"false\",\n            type:\"post\",\n            cache: false,\n            url: '/taxonomies/toggleRequired/' + taxonomy_id,\n        });\n    });\n}\n\nfunction fetchFormDataAjax(url, callback) {\n    var formData = false;\n    $.ajax({\n        data: '[]',\n        success:function (data, textStatus) {\n            callback(data);\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Request failed due to an unexpected error.']});\n        },\n        async: false,\n        type:\"get\",\n        cache: false,\n        url: url\n    });\n}\n\nfunction moveIndexRow(id, direction, endpoint) {\n    var row = $('#row_' + id);\n    $.ajax({\n        url: baseurl + endpoint + '/' + id + '/' + direction,\n        type: 'GET',\n        success: function(data) {\n            if (direction === 'up') {\n                if (row.prev().length) {\n                    row.insertBefore(row.prev());\n                }\n            } else {\n                if (row.next().length) {\n                    row.insertAfter(row.next());\n                }\n            }\n            handleGenericAjaxResponse({'saved':true, 'success':['Server priority changed.']});\n        },\n        error: function(data) {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Something went wrong, could not change the priority as requested.']});\n        }\n    });\n}\n\nfunction checkRoleEnforceRateLimit() {\n    if ($(\"#RoleEnforceRateLimit\").is(':checked')) {\n        $('#rateLimitCountContainer').show();\n    } else {\n        $('#rateLimitCountContainer').hide();\n    }\n}\n\nfunction queryDeprecatedEndpointUsage() {\n    $.ajax({\n        url: baseurl + '/servers/viewDeprecatedFunctionUse',\n        type: 'GET',\n        success: function(data) {\n            $('#deprecationResults').html(data);\n        },\n        error: function(data) {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Could not query the deprecation statistics.']});\n        }\n    });\n}\n\n(function(){\n    \"use strict\";\n    $(\".datepicker\").datepicker({\n        format: 'yyyy-mm-dd',\n    });\n}());\n\nfunction submitDashboardForm(id) {\n    var configData = $('#DashboardConfig').val();\n    if (configData != '') {\n        configData = JSON.parse(configData);\n    } else {\n        configData = {};\n    }\n    configData = JSON.stringify(configData);\n    $('#' + id).attr('config', configData);\n    $('#genericModal').modal('hide');\n    saveDashboardState();\n}\n\nfunction submitDashboardAddWidget() {\n    var widget = $('#DashboardWidget').val();\n    var config = $('#DashboardConfig').val();\n    var width = $('#DashboardWidth').val();\n    var height = $('#DashboardHeight').val();\n    var el = null;\n    var k = $('#last-element-counter').data('element-counter');\n    $.ajax({\n        url: baseurl + '/dashboards/getEmptyWidget/' + widget + '/' + (k+1),\n        type: 'GET',\n        success: function(data) {\n            el = data;\n            grid.addWidget(\n                el,\n                {\n                    \"width\": width,\n                    \"height\": height,\n                    \"autoposition\": 1\n                }\n            );\n            if (config !== '') {\n                config = JSON.parse(config);\n                config = JSON.stringify(config);\n            } else {\n                config = '[]';\n            }\n            $('#widget_' + (k+1)).attr('config', config);\n            saveDashboardState();\n            $('#last-element-counter').data('element-counter', (k+1));\n        },\n        complete: function(data) {\n            $('#genericModal').modal('hide');\n        },\n        error: function(data) {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Could not fetch empty widget.']});\n        }\n    });\n}\n\nfunction saveDashboardState() {\n    var dashBoardSettings = [];\n    $('.grid-stack-item').each(function(index) {\n        if ($(this).attr('config') !== undefined && $(this).attr('widget') !== undefined) {\n            var config = $(this).attr('config');\n            config = JSON.parse(config);\n            var temp = {\n                'widget': $(this).attr('widget'),\n                'config': config,\n                'position': {\n                    'x': $(this).attr('data-gs-x'),\n                    'y': $(this).attr('data-gs-y'),\n                    'width': $(this).attr('data-gs-width'),\n                    'height': $(this).attr('data-gs-height')\n                }\n            };\n            dashBoardSettings.push(temp);\n        }\n    });\n    $.ajax({\n        data: {value: dashBoardSettings},\n        success:function (data, textStatus) {\n            showMessage('success', 'Dashboard settings saved.');\n        },\n        error: function (jqXHR, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        },\n        type: \"post\",\n        url: baseurl + '/dashboards/updateSettings',\n    });\n}\n\nfunction updateDashboardWidget(element) {\n    element = $(element);\n    if (element.length) {\n        var container_id = $(element).attr('id').substring(7);\n        var container = $(element).find('.widgetContent');\n        var titleText = $(element).find('.widgetTitleText');\n        var temp = JSON.parse($(element).attr('config'));\n        if (temp['alias'] !== undefined) {\n            titleText.text(temp['alias']);\n        }\n        $.ajax({\n            type: 'POST',\n            url: baseurl + '/dashboards/renderWidget/' + container_id,\n            data: {\n                config: $(element).attr('config'),\n                widget: $(element).attr('widget')\n            },\n            success:function (data, textStatus) {\n                container.html(data);\n            }\n        });\n    }\n}\n\nfunction resetDashboardGrid(grid) {\n    $('.grid-stack-item').each(function() {\n        updateDashboardWidget(this);\n    });\n    saveDashboardState();\n    $('.edit-widget').click(function() {\n        el = $(this).closest('.grid-stack-item');\n        data = {\n            id: el.attr('id'),\n            config: JSON.parse(el.attr('config')),\n            widget: el.attr('widget'),\n            alias: el.attr('alias')\n        }\n        openGenericModalPost(baseurl + '/dashboards/getForm/edit', data);\n    });\n    $('.remove-widget').click(function() {\n        el = $(this).closest('.grid-stack-item');\n        grid.removeWidget(el);\n        saveDashboardState();\n    });\n}\n\nfunction setHomePage() {\n    $.ajax({\n        type: 'GET',\n        url: baseurl + '/userSettings/setHomePage',\n        success:function (data, textStatus) {\n            $('#ajax_hidden_container').html(data);\n            var currentPage = $('#setHomePage').data('current-page');\n            $('#UserSettingPath').val(currentPage);\n            $.ajax({\n                type: 'POST',\n                url: baseurl + '/userSettings/setHomePage',\n                data: $('#UserSettingSetHomePageForm').serialize(),\n                success:function (data, textStatus) {\n                    showMessage('success', 'Homepage set.');\n                    $('#setHomePage').addClass('orange');\n                },\n            });\n\n        }\n    });\n}\n\nfunction changeLocationFromIndexDblclick(row_index) {\n    var href = $('table tr[data-row-id=\\\"' + row_index + '\\\"] .dblclickActionElement').attr('href')\n    window.location = href;\n}\n"], "filenames": ["app/Controller/AppController.php", "app/View/Elements/global_menu.ctp", "app/View/Layouts/default.ctp", "app/webroot/js/misp.js"], "buggy_code_start_loc": [49, 416, 90, 5025], "buggy_code_end_loc": [50, 418, 90, 5034], "fixing_code_start_loc": [49, 416, 91, 5025], "fixing_code_end_loc": [50, 419, 92, 5042], "type": "CWE-352", "message": "In MISP before 2.4.129, setting a favourite homepage was not CSRF protected.", "other": {"cve": {"id": "CVE-2020-15711", "sourceIdentifier": "cve@mitre.org", "published": "2020-07-14T13:15:11.577", "lastModified": "2020-07-15T18:59:41.347", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In MISP before 2.4.129, setting a favourite homepage was not CSRF protected."}, {"lang": "es", "value": "En MISP versiones anteriores a 2.4.129, se establece una p\u00e1gina de inicio favorita que no fue protegida de CSRF"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.129", "matchCriteriaId": "A8872B8E-F073-4801-9A9C-21A8308B335A"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/bf4610c947c7dc372c4078f363d2dff6ae0703a8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/MISP/MISP/compare/v2.4.128...v2.4.129", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/bf4610c947c7dc372c4078f363d2dff6ae0703a8"}}