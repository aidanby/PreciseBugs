{"buggy_code": ["<?php\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| contains the \"web\" middleware group. Now create something great!\n|\n*/\n\n// Auth\nAuth::routes(['register' => false, 'reset' => false, 'verify' => false]);\n\n// WebUI\nRoute::group(['middleware' => ['auth'], 'guard' => 'auth'], function () {\n\n    // pages\n    Route::resource('device-groups', 'DeviceGroupController');\n    Route::group(['prefix' => 'poller'], function () {\n        Route::get('', 'PollerController@pollerTab')->name('poller.index');\n        Route::get('log', 'PollerController@logTab')->name('poller.log');\n        Route::get('groups', 'PollerController@groupsTab')->name('poller.groups');\n        Route::get('settings', 'PollerController@settingsTab')->name('poller.settings');\n        Route::get('performance', 'PollerController@performanceTab')->name('poller.performance');\n        Route::resource('{id}/settings', 'PollerSettingsController', ['as' => 'poller'])->only(['update', 'destroy']);\n    });\n    Route::get('locations', 'LocationController@index');\n    Route::resource('preferences', 'UserPreferencesController', ['only' => ['index', 'store']]);\n    Route::resource('users', 'UserController');\n    Route::get('about', 'AboutController@index');\n    Route::get('authlog', 'UserController@authlog');\n    Route::get('overview', 'OverviewController@index')->name('overview');\n    Route::get('/', 'OverviewController@index')->name('home');\n    Route::match(['get', 'post'], 'device/{device}/{tab?}/{vars?}', 'DeviceController@index')\n        ->name('device')->where(['vars' => '.*']);\n\n    // Maps\n    Route::group(['prefix' => 'maps', 'namespace' => 'Maps'], function () {\n        Route::get('devicedependency', 'DeviceDependencyController@dependencyMap');\n    });\n\n    // admin pages\n    Route::group(['guard' => 'admin'], function () {\n        Route::get('settings/{tab?}/{section?}', 'SettingsController@index')->name('settings');\n        Route::put('settings/{name}', 'SettingsController@update')->name('settings.update');\n        Route::delete('settings/{name}', 'SettingsController@destroy')->name('settings.destroy');\n    });\n\n    // old route redirects\n    Route::permanentRedirect('poll-log', 'poller/log');\n\n    // Two Factor Auth\n    Route::group(['prefix' => '2fa', 'namespace' => 'Auth'], function () {\n        Route::get('', 'TwoFactorController@showTwoFactorForm')->name('2fa.form');\n        Route::post('', 'TwoFactorController@verifyTwoFactor')->name('2fa.verify');\n        Route::post('add', 'TwoFactorController@create')->name('2fa.add');\n        Route::post('cancel', 'TwoFactorController@cancelAdd')->name('2fa.cancel');\n        Route::post('remove', 'TwoFactorController@destroy')->name('2fa.remove');\n\n        Route::post('{user}/unlock', 'TwoFactorManagementController@unlock')->name('2fa.unlock');\n        Route::delete('{user}', 'TwoFactorManagementController@destroy')->name('2fa.delete');\n    });\n\n    // Ajax routes\n    Route::group(['prefix' => 'ajax'], function () {\n        // page ajax controllers\n        Route::resource('location', 'LocationController', ['only' => ['update', 'destroy']]);\n        Route::resource('pollergroup', 'PollerGroupController', ['only' => ['destroy']]);\n        // misc ajax controllers\n        Route::group(['namespace' => 'Ajax'], function () {\n            Route::post('set_map_group', 'AvailabilityMapController@setGroup');\n            Route::post('set_map_view', 'AvailabilityMapController@setView');\n            Route::post('set_resolution', 'ResolutionController@set');\n            Route::get('netcmd', 'NetCommand@run');\n            Route::post('ripe/raw', 'RipeNccApiController@raw');\n        });\n\n\n        Route::get('settings/list', 'SettingsController@listAll')->name('settings.list');\n\n        // form ajax handlers, perhaps should just be page controllers\n        Route::group(['prefix' => 'form', 'namespace' => 'Form'], function () {\n            Route::resource('widget-settings', 'WidgetSettingsController');\n        });\n\n        // js select2 data controllers\n        Route::group(['prefix' => 'select', 'namespace' => 'Select'], function () {\n            Route::get('application', 'ApplicationController');\n            Route::get('bill', 'BillController');\n            Route::get('dashboard', 'DashboardController')->name('ajax.select.dashboard');\n            Route::get('device', 'DeviceController');\n            Route::get('device-field', 'DeviceFieldController');\n            Route::get('device-group', 'DeviceGroupController');\n            Route::get('eventlog', 'EventlogController');\n            Route::get('graph', 'GraphController');\n            Route::get('graph-aggregate', 'GraphAggregateController');\n            Route::get('graylog-streams', 'GraylogStreamsController');\n            Route::get('syslog', 'SyslogController');\n            Route::get('location', 'LocationController');\n            Route::get('munin', 'MuninPluginController');\n            Route::get('service', 'ServiceController');\n            Route::get('port', 'PortController');\n            Route::get('port-field', 'PortFieldController');\n        });\n\n        // jquery bootgrid data controllers\n        Route::group(['prefix' => 'table', 'namespace' => 'Table'], function () {\n            Route::post('alert-schedule', 'AlertScheduleController');\n            Route::post('customers', 'CustomersController');\n            Route::post('device', 'DeviceController');\n            Route::post('eventlog', 'EventlogController');\n            Route::post('fdb-tables', 'FdbTablesController');\n            Route::post('routes', 'RoutesTablesController');\n            Route::post('graylog', 'GraylogController');\n            Route::post('location', 'LocationController');\n            Route::post('port-nac', 'PortNacController');\n            Route::post('syslog', 'SyslogController');\n        });\n\n        // dashboard widgets\n        Route::group(['prefix' => 'dash', 'namespace' => 'Widgets'], function () {\n            Route::post('alerts', 'AlertsController');\n            Route::post('alertlog', 'AlertlogController');\n            Route::post('availability-map', 'AvailabilityMapController');\n            Route::post('component-status', 'ComponentStatusController');\n            Route::post('device-summary-horiz', 'DeviceSummaryHorizController');\n            Route::post('device-summary-vert', 'DeviceSummaryVertController');\n            Route::post('eventlog', 'EventlogController');\n            Route::post('generic-graph', 'GraphController');\n            Route::post('generic-image', 'ImageController');\n            Route::post('globe', 'GlobeController');\n            Route::post('graylog', 'GraylogController');\n            Route::post('placeholder', 'PlaceholderController');\n            Route::post('notes', 'NotesController');\n            Route::post('server-stats', 'ServerStatsController');\n            Route::post('syslog', 'SyslogController');\n            Route::post('top-devices', 'TopDevicesController');\n            Route::post('top-interfaces', 'TopInterfacesController');\n            Route::post('worldmap', 'WorldMapController');\n            Route::post('alertlog-stats', 'AlertlogStatsController');\n        });\n    });\n\n    // demo helper\n    Route::permanentRedirect('demo', '/');\n});\n\n// installation routes\nRoute::group(['prefix' => 'install', 'namespace' => 'Install'], function () {\n    Route::get('/', 'InstallationController@redirectToFirst')->name('install');\n    Route::get('/checks', 'ChecksController@index')->name('install.checks');\n    Route::get('/database', 'DatabaseController@index')->name('install.database');\n    Route::get('/user', 'MakeUserController@index')->name('install.user');\n    Route::get('/finish', 'FinalizeController@index')->name('install.finish');\n\n    Route::post('/user/create', 'MakeUserController@create')->name('install.action.user');\n    Route::post('/database/test', 'DatabaseController@test')->name('install.acton.test-database');\n    Route::get('/ajax/database/migrate', 'DatabaseController@migrate')->name('install.action.migrate');\n    Route::get('/ajax/steps', 'InstallationController@stepsCompleted')->name('install.action.steps');\n    Route::any('{path?}', 'InstallationController@invalid')->where('path', '.*'); // 404\n});\n\n// Legacy routes\nRoute::any('/dummy_legacy_auth/{path?}', 'LegacyController@dummy')->middleware('auth');\nRoute::any('/dummy_legacy_unauth/{path?}', 'LegacyController@dummy');\nRoute::any('/{path?}', 'LegacyController@index')\n    ->where('path', '^((?!_debugbar).)*')\n    ->middleware('auth');\n"], "fixing_code": ["<?php\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| contains the \"web\" middleware group. Now create something great!\n|\n*/\n\n// Auth\nAuth::routes(['register' => false, 'reset' => false, 'verify' => false]);\n\n// WebUI\nRoute::group(['middleware' => ['auth'], 'guard' => 'auth'], function () {\n\n    // pages\n    Route::resource('device-groups', 'DeviceGroupController');\n    Route::group(['prefix' => 'poller'], function () {\n        Route::get('', 'PollerController@pollerTab')->name('poller.index');\n        Route::get('log', 'PollerController@logTab')->name('poller.log');\n        Route::get('groups', 'PollerController@groupsTab')->name('poller.groups');\n        Route::get('settings', 'PollerController@settingsTab')->name('poller.settings');\n        Route::get('performance', 'PollerController@performanceTab')->name('poller.performance');\n        Route::resource('{id}/settings', 'PollerSettingsController', ['as' => 'poller'])->only(['update', 'destroy']);\n    });\n    Route::get('locations', 'LocationController@index');\n    Route::resource('preferences', 'UserPreferencesController', ['only' => ['index', 'store']]);\n    Route::resource('users', 'UserController');\n    Route::get('about', 'AboutController@index');\n    Route::get('authlog', 'UserController@authlog');\n    Route::get('overview', 'OverviewController@index')->name('overview');\n    Route::get('/', 'OverviewController@index')->name('home');\n    Route::match(['get', 'post'], 'device/{device}/{tab?}/{vars?}', 'DeviceController@index')\n        ->name('device')->where(['vars' => '.*']);\n\n    // Maps\n    Route::group(['prefix' => 'maps', 'namespace' => 'Maps'], function () {\n        Route::get('devicedependency', 'DeviceDependencyController@dependencyMap');\n    });\n\n    // admin pages\n    Route::group(['middleware' => ['can:admin']], function () {\n        Route::get('settings/{tab?}/{section?}', 'SettingsController@index')->name('settings');\n        Route::put('settings/{name}', 'SettingsController@update')->name('settings.update');\n        Route::delete('settings/{name}', 'SettingsController@destroy')->name('settings.destroy');\n    });\n\n    // old route redirects\n    Route::permanentRedirect('poll-log', 'poller/log');\n\n    // Two Factor Auth\n    Route::group(['prefix' => '2fa', 'namespace' => 'Auth'], function () {\n        Route::get('', 'TwoFactorController@showTwoFactorForm')->name('2fa.form');\n        Route::post('', 'TwoFactorController@verifyTwoFactor')->name('2fa.verify');\n        Route::post('add', 'TwoFactorController@create')->name('2fa.add');\n        Route::post('cancel', 'TwoFactorController@cancelAdd')->name('2fa.cancel');\n        Route::post('remove', 'TwoFactorController@destroy')->name('2fa.remove');\n\n        Route::post('{user}/unlock', 'TwoFactorManagementController@unlock')->name('2fa.unlock');\n        Route::delete('{user}', 'TwoFactorManagementController@destroy')->name('2fa.delete');\n    });\n\n    // Ajax routes\n    Route::group(['prefix' => 'ajax'], function () {\n        // page ajax controllers\n        Route::resource('location', 'LocationController', ['only' => ['update', 'destroy']]);\n        Route::resource('pollergroup', 'PollerGroupController', ['only' => ['destroy']]);\n        // misc ajax controllers\n        Route::group(['namespace' => 'Ajax'], function () {\n            Route::post('set_map_group', 'AvailabilityMapController@setGroup');\n            Route::post('set_map_view', 'AvailabilityMapController@setView');\n            Route::post('set_resolution', 'ResolutionController@set');\n            Route::get('netcmd', 'NetCommand@run');\n            Route::post('ripe/raw', 'RipeNccApiController@raw');\n        });\n\n\n        Route::get('settings/list', 'SettingsController@listAll')->name('settings.list');\n\n        // form ajax handlers, perhaps should just be page controllers\n        Route::group(['prefix' => 'form', 'namespace' => 'Form'], function () {\n            Route::resource('widget-settings', 'WidgetSettingsController');\n        });\n\n        // js select2 data controllers\n        Route::group(['prefix' => 'select', 'namespace' => 'Select'], function () {\n            Route::get('application', 'ApplicationController');\n            Route::get('bill', 'BillController');\n            Route::get('dashboard', 'DashboardController')->name('ajax.select.dashboard');\n            Route::get('device', 'DeviceController');\n            Route::get('device-field', 'DeviceFieldController');\n            Route::get('device-group', 'DeviceGroupController');\n            Route::get('eventlog', 'EventlogController');\n            Route::get('graph', 'GraphController');\n            Route::get('graph-aggregate', 'GraphAggregateController');\n            Route::get('graylog-streams', 'GraylogStreamsController');\n            Route::get('syslog', 'SyslogController');\n            Route::get('location', 'LocationController');\n            Route::get('munin', 'MuninPluginController');\n            Route::get('service', 'ServiceController');\n            Route::get('port', 'PortController');\n            Route::get('port-field', 'PortFieldController');\n        });\n\n        // jquery bootgrid data controllers\n        Route::group(['prefix' => 'table', 'namespace' => 'Table'], function () {\n            Route::post('alert-schedule', 'AlertScheduleController');\n            Route::post('customers', 'CustomersController');\n            Route::post('device', 'DeviceController');\n            Route::post('eventlog', 'EventlogController');\n            Route::post('fdb-tables', 'FdbTablesController');\n            Route::post('routes', 'RoutesTablesController');\n            Route::post('graylog', 'GraylogController');\n            Route::post('location', 'LocationController');\n            Route::post('port-nac', 'PortNacController');\n            Route::post('syslog', 'SyslogController');\n        });\n\n        // dashboard widgets\n        Route::group(['prefix' => 'dash', 'namespace' => 'Widgets'], function () {\n            Route::post('alerts', 'AlertsController');\n            Route::post('alertlog', 'AlertlogController');\n            Route::post('availability-map', 'AvailabilityMapController');\n            Route::post('component-status', 'ComponentStatusController');\n            Route::post('device-summary-horiz', 'DeviceSummaryHorizController');\n            Route::post('device-summary-vert', 'DeviceSummaryVertController');\n            Route::post('eventlog', 'EventlogController');\n            Route::post('generic-graph', 'GraphController');\n            Route::post('generic-image', 'ImageController');\n            Route::post('globe', 'GlobeController');\n            Route::post('graylog', 'GraylogController');\n            Route::post('placeholder', 'PlaceholderController');\n            Route::post('notes', 'NotesController');\n            Route::post('server-stats', 'ServerStatsController');\n            Route::post('syslog', 'SyslogController');\n            Route::post('top-devices', 'TopDevicesController');\n            Route::post('top-interfaces', 'TopInterfacesController');\n            Route::post('worldmap', 'WorldMapController');\n            Route::post('alertlog-stats', 'AlertlogStatsController');\n        });\n    });\n\n    // demo helper\n    Route::permanentRedirect('demo', '/');\n});\n\n// installation routes\nRoute::group(['prefix' => 'install', 'namespace' => 'Install'], function () {\n    Route::get('/', 'InstallationController@redirectToFirst')->name('install');\n    Route::get('/checks', 'ChecksController@index')->name('install.checks');\n    Route::get('/database', 'DatabaseController@index')->name('install.database');\n    Route::get('/user', 'MakeUserController@index')->name('install.user');\n    Route::get('/finish', 'FinalizeController@index')->name('install.finish');\n\n    Route::post('/user/create', 'MakeUserController@create')->name('install.action.user');\n    Route::post('/database/test', 'DatabaseController@test')->name('install.acton.test-database');\n    Route::get('/ajax/database/migrate', 'DatabaseController@migrate')->name('install.action.migrate');\n    Route::get('/ajax/steps', 'InstallationController@stepsCompleted')->name('install.action.steps');\n    Route::any('{path?}', 'InstallationController@invalid')->where('path', '.*'); // 404\n});\n\n// Legacy routes\nRoute::any('/dummy_legacy_auth/{path?}', 'LegacyController@dummy')->middleware('auth');\nRoute::any('/dummy_legacy_unauth/{path?}', 'LegacyController@dummy');\nRoute::any('/{path?}', 'LegacyController@index')\n    ->where('path', '^((?!_debugbar).)*')\n    ->middleware('auth');\n"], "filenames": ["routes/web.php"], "buggy_code_start_loc": [46], "buggy_code_end_loc": [47], "fixing_code_start_loc": [46], "fixing_code_end_loc": [47], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in LibreNMS before 1.65.1. It has insufficient access control for normal users because of \"'guard' => 'admin'\" instead of \"'middleware' => ['can:admin']\" in routes/web.php.", "other": {"cve": {"id": "CVE-2020-15877", "sourceIdentifier": "cve@mitre.org", "published": "2020-07-21T17:15:12.170", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in LibreNMS before 1.65.1. It has insufficient access control for normal users because of \"'guard' => 'admin'\" instead of \"'middleware' => ['can:admin']\" in routes/web.php."}, {"lang": "es", "value": "Se detect\u00f3 un problema en LibreNMS versiones anteriores a 1.65.1. Presenta un control de acceso insuficiente para usuarios normales debido a \"'guard' =) 'admin'\" en lugar de \"'middleware' =) ['can:admin']\" en el archivo routes/web.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.65.1", "matchCriteriaId": "1CED68B9-4ACB-488A-B5B0-960E2FC81F44"}]}]}], "references": [{"url": "https://community.librenms.org/c/announcements", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/librenms/librenms/commit/e5bb6d80bc308fc56b9a01ffb76c34159995353c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/librenms/librenms/compare/1.65...1.65.1", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/librenms/librenms/pull/11915", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/librenms/librenms/releases/tag/1.65.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://shielder.it/blog", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/e5bb6d80bc308fc56b9a01ffb76c34159995353c"}}