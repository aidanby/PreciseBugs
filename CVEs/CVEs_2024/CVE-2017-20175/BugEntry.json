{"buggy_code": ["<?php\r\n\r\nclass PiwikHooks {\r\n\t\r\n\t/**\r\n\t * Initialize the Piwik Hook\r\n\t * \r\n\t * @param string $skin\r\n\t * @param string $text\r\n\t * @return bool\r\n\t */\r\n\tpublic static function PiwikSetup ($skin, &$text = '')\r\n\t{\r\n\t\t$text .= PiwikHooks::AddPiwik( $skin->getTitle() );\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add piwik script\r\n\t * @param string $title\r\n\t * @return string\r\n\t */\r\n\tpublic static function AddPiwik ($title) {\r\n\t\t\r\n\t\tglobal $wgPiwikIDSite, $wgPiwikURL, $wgPiwikIgnoreSysops, \r\n\t\t\t   $wgPiwikIgnoreBots, $wgUser, $wgScriptPath, \r\n\t\t\t   $wgPiwikCustomJS, $wgPiwikActionName, $wgPiwikUsePageTitle,\r\n\t\t\t   $wgPiwikDisableCookies, $wgPiwikProtocol,\r\n\t\t\t   $wgPiwikTrackUsernames, $wgPiwikJSFileURL;\r\n\t\t\r\n\t\t// Is piwik disabled for bots?\r\n\t\tif ( $wgUser->isAllowed( 'bot' ) && $wgPiwikIgnoreBots ) {\r\n\t\t\treturn \"<!-- Piwik extension is disabled for bots -->\";\r\n\t\t}\r\n\t\t\r\n\t\t// Ignore Wiki System Operators\r\n\t\tif ( $wgUser->isAllowed( 'protect' ) && $wgPiwikIgnoreSysops ) {\r\n\t\t\treturn \"<!-- Piwik tracking is disabled for users with 'protect' rights (i.e., sysops) -->\";\r\n\t\t}\r\n\t\t\r\n\t\t// Missing configuration parameters \r\n\t\tif ( empty( $wgPiwikIDSite ) || empty( $wgPiwikURL ) ) {\r\n\t\t\treturn \"<!-- You need to set the settings for Piwik -->\";\r\n\t\t}\r\n\t\t\r\n\t\tif ( $wgPiwikUsePageTitle ) {\r\n\t\t\t$wgPiwikPageTitle = $title->getPrefixedText();\r\n\t\t\r\n\t\t\t$wgPiwikFinalActionName = $wgPiwikActionName;\r\n\t\t\t$wgPiwikFinalActionName .= $wgPiwikPageTitle;\r\n\t\t} else {\r\n\t\t\t$wgPiwikFinalActionName = $wgPiwikActionName;\r\n\t\t}\r\n\t\t\r\n\t\t// Check if disablecookies flag\r\n\t\tif ($wgPiwikDisableCookies) {\r\n\t\t\t$disableCookiesStr = PHP_EOL . '  _paq.push([\"disableCookies\"]);';\r\n\t\t} else $disableCookiesStr = null;\r\n\t\t\r\n\t\t// Check if we have custom JS\r\n\t\tif (!empty($wgPiwikCustomJS)) {\r\n\t\t\t\r\n\t\t\t// Check if array is given\r\n\t\t\t// If yes we have multiple lines/variables to declare\r\n\t\t\tif (is_array($wgPiwikCustomJS)) {\r\n\t\t\t\t\r\n\t\t\t\t// Make empty string with a new line\r\n\t\t\t\t$customJs = PHP_EOL;\r\n\t\t\t\t\r\n\t\t\t\t// Store the lines in the $customJs line\r\n\t\t\t\tforeach ($wgPiwikCustomJS as $customJsLine) { \r\n\t\t\t\t\t$customJs .= $customJsLine;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t// CustomJs is string\r\n\t\t\t} else $customJs = PHP_EOL . $wgPiwikCustomJS;\r\n\t\t\t\r\n\t\t// Contents are empty\r\n\t\t} else $customJs = null;\r\n\r\n        // Track username based on https://piwik.org/docs/user-id/ The user\r\n        // name for anonymous visitors is their IP address which Piwik already\r\n        // records.\r\n        if ($wgPiwikTrackUsernames && $wgUser->isLoggedIn()) {\r\n            $username = $wgUser->getName();\r\n            $customJs .= PHP_EOL . \"  _paq.push(['setUserId','{$username}']);\";\r\n        }\r\n\r\n\t\t// Check if server uses https\r\n\t\tif ($wgPiwikProtocol == 'auto') {\r\n\t\t\t\r\n\t\t\tif (isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on' || $_SERVER['HTTPS'] == 1) || isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https') {\r\n\t\t\t\t$wgPiwikProtocol = 'https';\r\n\t\t\t} else {\r\n\t\t\t\t$wgPiwikProtocol = 'http';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t// Prevent XSS\r\n\t\t$wgPiwikFinalActionName = Xml::encodeJsVar( $wgPiwikFinalActionName );\r\n\t\t\r\n\t\t// If $wgPiwikJSFileURL is null the locations are $wgPiwikURL/piwik.php and $wgPiwikURL/piwik.js\r\n\t\t// Else they are $wgPiwikURL/piwik.php and $wgPiwikJSFileURL\r\n\t\t$jsPiwikURL = '';\r\n\t\t$jsPiwikURLCommon = '';\r\n\t\tif( is_null( $wgPiwikJSFileURL ) ) {\r\n\t\t\t$wgPiwikJSFileURL = 'piwik.js';\r\n\t\t\t$jsPiwikURLCommon = '+' . Xml::encodeJsVar( $wgPiwikURL . '/' );\r\n\t\t} else {\r\n\t\t\t$jsPiwikURL = '+' . Xml::encodeJsVar( $wgPiwikURL . '/' );\r\n\t\t}\r\n\t\t$jsPiwikJSFileURL = Xml::encodeJsVar( $wgPiwikJSFileURL );\r\n\r\n\t\t// Piwik script\r\n\t\t$script = <<<PIWIK\r\n<!-- Piwik -->\r\n<script type=\"text/javascript\">\r\n  var _paq = _paq || [];{$disableCookiesStr}{$customJs}\r\n  _paq.push([\"trackPageView\"]);\r\n  _paq.push([\"enableLinkTracking\"]);\r\n\r\n  (function() {\r\n    var u = ((\"https:\" == document.location.protocol) ? \"https\" : \"http\") + \"://\"{$jsPiwikURLCommon};\r\n    _paq.push([\"setTrackerUrl\", u{$jsPiwikURL}+\"piwik.php\"]);\r\n    _paq.push([\"setSiteId\", \"{$wgPiwikIDSite}\"]);\r\n    var d=document, g=d.createElement(\"script\"), s=d.getElementsByTagName(\"script\")[0]; g.type=\"text/javascript\";\r\n    g.defer=true; g.async=true; g.src=u+{$jsPiwikJSFileURL}; s.parentNode.insertBefore(g,s);\r\n  })();\r\n</script>\r\n<!-- End Piwik Code -->\r\n\r\n<!-- Piwik Image Tracker -->\r\n<noscript><img src=\"{$wgPiwikProtocol}://{$wgPiwikURL}/piwik.php?idsite={$wgPiwikIDSite}&amp;rec=1\" style=\"border:0\" alt=\"\" /></noscript>\r\n<!-- End Piwik -->\r\nPIWIK;\r\n\t\t\r\n\t\treturn $script;\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n\r\n"], "fixing_code": ["<?php\r\n\r\nclass PiwikHooks {\r\n\t\r\n\t/**\r\n\t * Initialize the Piwik Hook\r\n\t * \r\n\t * @param string $skin\r\n\t * @param string $text\r\n\t * @return bool\r\n\t */\r\n\tpublic static function PiwikSetup ($skin, &$text = '')\r\n\t{\r\n\t\t$text .= PiwikHooks::AddPiwik( $skin->getTitle() );\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add piwik script\r\n\t * @param string $title\r\n\t * @return string\r\n\t */\r\n\tpublic static function AddPiwik ($title) {\r\n\t\t\r\n\t\tglobal $wgPiwikIDSite, $wgPiwikURL, $wgPiwikIgnoreSysops, \r\n\t\t\t   $wgPiwikIgnoreBots, $wgUser, $wgScriptPath, \r\n\t\t\t   $wgPiwikCustomJS, $wgPiwikActionName, $wgPiwikUsePageTitle,\r\n\t\t\t   $wgPiwikDisableCookies, $wgPiwikProtocol,\r\n\t\t\t   $wgPiwikTrackUsernames, $wgPiwikJSFileURL;\r\n\t\t\r\n\t\t// Is piwik disabled for bots?\r\n\t\tif ( $wgUser->isAllowed( 'bot' ) && $wgPiwikIgnoreBots ) {\r\n\t\t\treturn \"<!-- Piwik extension is disabled for bots -->\";\r\n\t\t}\r\n\t\t\r\n\t\t// Ignore Wiki System Operators\r\n\t\tif ( $wgUser->isAllowed( 'protect' ) && $wgPiwikIgnoreSysops ) {\r\n\t\t\treturn \"<!-- Piwik tracking is disabled for users with 'protect' rights (i.e., sysops) -->\";\r\n\t\t}\r\n\t\t\r\n\t\t// Missing configuration parameters \r\n\t\tif ( empty( $wgPiwikIDSite ) || empty( $wgPiwikURL ) ) {\r\n\t\t\treturn \"<!-- You need to set the settings for Piwik -->\";\r\n\t\t}\r\n\t\t\r\n\t\tif ( $wgPiwikUsePageTitle ) {\r\n\t\t\t$wgPiwikPageTitle = $title->getPrefixedText();\r\n\t\t\r\n\t\t\t$wgPiwikFinalActionName = $wgPiwikActionName;\r\n\t\t\t$wgPiwikFinalActionName .= $wgPiwikPageTitle;\r\n\t\t} else {\r\n\t\t\t$wgPiwikFinalActionName = $wgPiwikActionName;\r\n\t\t}\r\n\t\t\r\n\t\t// Check if disablecookies flag\r\n\t\tif ($wgPiwikDisableCookies) {\r\n\t\t\t$disableCookiesStr = PHP_EOL . '  _paq.push([\"disableCookies\"]);';\r\n\t\t} else $disableCookiesStr = null;\r\n\t\t\r\n\t\t// Check if we have custom JS\r\n\t\tif (!empty($wgPiwikCustomJS)) {\r\n\t\t\t\r\n\t\t\t// Check if array is given\r\n\t\t\t// If yes we have multiple lines/variables to declare\r\n\t\t\tif (is_array($wgPiwikCustomJS)) {\r\n\t\t\t\t\r\n\t\t\t\t// Make empty string with a new line\r\n\t\t\t\t$customJs = PHP_EOL;\r\n\t\t\t\t\r\n\t\t\t\t// Store the lines in the $customJs line\r\n\t\t\t\tforeach ($wgPiwikCustomJS as $customJsLine) { \r\n\t\t\t\t\t$customJs .= $customJsLine;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t// CustomJs is string\r\n\t\t\t} else $customJs = PHP_EOL . $wgPiwikCustomJS;\r\n\t\t\t\r\n\t\t// Contents are empty\r\n\t\t} else $customJs = null;\r\n\r\n        // Track username based on https://piwik.org/docs/user-id/ The user\r\n        // name for anonymous visitors is their IP address which Piwik already\r\n        // records.\r\n        if ($wgPiwikTrackUsernames && $wgUser->isLoggedIn()) {\r\n            $username = Xml::encodeJsVar( $wgUser->getName() );\r\n            $customJs .= PHP_EOL . \"  _paq.push([\\\"setUserId\\\",{$username}]);\";\r\n        }\r\n\r\n\t\t// Check if server uses https\r\n\t\tif ($wgPiwikProtocol == 'auto') {\r\n\t\t\t\r\n\t\t\tif (isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on' || $_SERVER['HTTPS'] == 1) || isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https') {\r\n\t\t\t\t$wgPiwikProtocol = 'https';\r\n\t\t\t} else {\r\n\t\t\t\t$wgPiwikProtocol = 'http';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t// Prevent XSS\r\n\t\t$wgPiwikFinalActionName = Xml::encodeJsVar( $wgPiwikFinalActionName );\r\n\t\t\r\n\t\t// If $wgPiwikJSFileURL is null the locations are $wgPiwikURL/piwik.php and $wgPiwikURL/piwik.js\r\n\t\t// Else they are $wgPiwikURL/piwik.php and $wgPiwikJSFileURL\r\n\t\t$jsPiwikURL = '';\r\n\t\t$jsPiwikURLCommon = '';\r\n\t\tif( is_null( $wgPiwikJSFileURL ) ) {\r\n\t\t\t$wgPiwikJSFileURL = 'piwik.js';\r\n\t\t\t$jsPiwikURLCommon = '+' . Xml::encodeJsVar( $wgPiwikURL . '/' );\r\n\t\t} else {\r\n\t\t\t$jsPiwikURL = '+' . Xml::encodeJsVar( $wgPiwikURL . '/' );\r\n\t\t}\r\n\t\t$jsPiwikJSFileURL = Xml::encodeJsVar( $wgPiwikJSFileURL );\r\n\r\n\t\t// Piwik script\r\n\t\t$script = <<<PIWIK\r\n<!-- Piwik -->\r\n<script type=\"text/javascript\">\r\n  var _paq = _paq || [];{$disableCookiesStr}{$customJs}\r\n  _paq.push([\"trackPageView\"]);\r\n  _paq.push([\"enableLinkTracking\"]);\r\n\r\n  (function() {\r\n    var u = ((\"https:\" == document.location.protocol) ? \"https\" : \"http\") + \"://\"{$jsPiwikURLCommon};\r\n    _paq.push([\"setTrackerUrl\", u{$jsPiwikURL}+\"piwik.php\"]);\r\n    _paq.push([\"setSiteId\", \"{$wgPiwikIDSite}\"]);\r\n    var d=document, g=d.createElement(\"script\"), s=d.getElementsByTagName(\"script\")[0]; g.type=\"text/javascript\";\r\n    g.defer=true; g.async=true; g.src=u+{$jsPiwikJSFileURL}; s.parentNode.insertBefore(g,s);\r\n  })();\r\n</script>\r\n<!-- End Piwik Code -->\r\n\r\n<!-- Piwik Image Tracker -->\r\n<noscript><img src=\"{$wgPiwikProtocol}://{$wgPiwikURL}/piwik.php?idsite={$wgPiwikIDSite}&amp;rec=1\" style=\"border:0\" alt=\"\" /></noscript>\r\n<!-- End Piwik -->\r\nPIWIK;\r\n\t\t\r\n\t\treturn $script;\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n\r\n"], "filenames": ["Piwik.hooks.php"], "buggy_code_start_loc": [85], "buggy_code_end_loc": [87], "fixing_code_start_loc": [85], "fixing_code_end_loc": [87], "type": "CWE-79", "message": "A vulnerability classified as problematic has been found in DaSchTour matomo-mediawiki-extension up to 2.4.2. This affects an unknown part of the file Piwik.hooks.php of the component Username Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 2.4.3 is able to address this issue. The name of the patch is 681324e4f518a8af4bd1f93867074c728eb9923d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220203.", "other": {"cve": {"id": "CVE-2017-20175", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-05T20:15:08.393", "lastModified": "2023-02-14T16:58:31.517", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic has been found in DaSchTour matomo-mediawiki-extension up to 2.4.2. This affects an unknown part of the file Piwik.hooks.php of the component Username Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 2.4.3 is able to address this issue. The name of the patch is 681324e4f518a8af4bd1f93867074c728eb9923d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220203."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 2.6, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mediawiki:matomo:*:*:*:*:*:mediawiki:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.3", "matchCriteriaId": "D9806448-C289-4E7C-B8EC-CFEC85063725"}]}]}], "references": [{"url": "https://github.com/DaSchTour/matomo-mediawiki-extension/commit/681324e4f518a8af4bd1f93867074c728eb9923d", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/DaSchTour/matomo-mediawiki-extension/pull/17", "source": "cna@vuldb.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/DaSchTour/matomo-mediawiki-extension/releases/tag/v2.4.3", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.220203", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.220203", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/DaSchTour/matomo-mediawiki-extension/commit/681324e4f518a8af4bd1f93867074c728eb9923d"}}