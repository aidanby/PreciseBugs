{"buggy_code": ["using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Mime;\nusing System.Text;\nusing System.Web.Mvc;\nusing SmartStore.Admin.Models.DataExchange;\nusing SmartStore.Admin.Models.Tasks;\nusing SmartStore.Core;\nusing SmartStore.Core.Domain;\nusing SmartStore.Core.Domain.DataExchange;\nusing SmartStore.Core.Domain.Tasks;\nusing SmartStore.Core.IO;\nusing SmartStore.Core.Security;\nusing SmartStore.Services.Catalog.Importer;\nusing SmartStore.Services.Customers.Importer;\nusing SmartStore.Services.DataExchange.Csv;\nusing SmartStore.Services.DataExchange.Import;\nusing SmartStore.Services.Localization;\nusing SmartStore.Services.Messages.Importer;\nusing SmartStore.Services.Tasks;\nusing SmartStore.Utilities;\nusing SmartStore.Web.Framework;\nusing SmartStore.Web.Framework.Controllers;\nusing SmartStore.Web.Framework.Filters;\nusing SmartStore.Web.Framework.Security;\n\nnamespace SmartStore.Admin.Controllers\n{\n    [AdminAuthorize]\n    public class ImportController : AdminControllerBase\n    {\n        private readonly IImportProfileService _importProfileService;\n        private readonly ITaskScheduler _taskScheduler;\n        private readonly IScheduleTaskService _scheduleTaskService;\n        private readonly AdminModelHelper _adminModelHelper;\n\n        public ImportController(\n            IImportProfileService importService,\n            ITaskScheduler taskScheduler,\n            IScheduleTaskService scheduleTaskService,\n            AdminModelHelper adminModelHelper)\n        {\n            _importProfileService = importService;\n            _taskScheduler = taskScheduler;\n            _scheduleTaskService = scheduleTaskService;\n            _adminModelHelper = adminModelHelper;\n        }\n\n        #region Utilities\n\n        private bool IsValidImportFile(string path, out string error)\n        {\n            error = null;\n\n            try\n            {\n                using (var stream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read))\n                {\n                    var unused = LightweightDataTable.FromFile(path, stream, stream.Length, CsvConfiguration.ExcelFriendlyConfiguration, 0, 1);\n                }\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                error = ex.ToAllMessages();\n                FileSystemHelper.DeleteFile(path);\n                return false;\n            }\n        }\n\n        private bool IsDefaultValueDisabled(string column, string property, string[] disabledFieldNames)\n        {\n            if (disabledFieldNames.Contains(property))\n                return true;\n\n            string columnWithoutIndex, columnIndex;\n            if (ColumnMap.ParseSourceName(property, out columnWithoutIndex, out columnIndex))\n                return disabledFieldNames.Contains(columnWithoutIndex);\n\n            return false;\n        }\n\n        private string[] GetDisabledDefaultFieldNames(ImportProfile profile)\n        {\n            switch (profile.EntityType)\n            {\n                case ImportEntityType.Product:\n                    return new string[] { \"Name\", \"Sku\", \"ManufacturerPartNumber\", \"Gtin\", \"SeName\" };\n                case ImportEntityType.Category:\n                    return new string[] { \"Name\", \"SeName\" };\n                case ImportEntityType.Customer:\n                    return new string[] { \"CustomerGuid\", \"Email\" };\n                case ImportEntityType.NewsLetterSubscription:\n                    return new string[] { \"Email\" };\n                default:\n                    return new string[0];\n            }\n        }\n\n        private string GetPropertyDescription(Dictionary<string, string> allProperties, string property)\n        {\n            if (property.HasValue() && allProperties.ContainsKey(property))\n            {\n                var result = allProperties[property];\n                if (result.HasValue())\n                    return result;\n            }\n            return property;\n        }\n\n        private void PrepareProfileModel(\n            ImportProfileModel model,\n            ImportProfile profile,\n            ScheduleTaskHistory lastHistoryEntry,\n            bool forEdit,\n            ColumnMap invalidMap = null)\n        {\n            model.Id = profile.Id;\n            model.Name = profile.Name;\n            model.EntityType = profile.EntityType;\n            model.Enabled = profile.Enabled;\n            model.ImportRelatedData = profile.ImportRelatedData;\n            model.Skip = profile.Skip == 0 ? (int?)null : profile.Skip;\n            model.Take = profile.Take == 0 ? (int?)null : profile.Take;\n            model.UpdateOnly = profile.UpdateOnly;\n            model.KeyFieldNames = profile.KeyFieldNames.SplitSafe(\",\").Distinct().ToArray();\n            model.ScheduleTaskId = profile.SchedulingTaskId;\n            model.ScheduleTaskName = profile.ScheduleTask.Name.NaIfEmpty();\n            model.IsTaskRunning = lastHistoryEntry?.IsRunning ?? false;\n            model.IsTaskEnabled = profile.ScheduleTask.Enabled;\n            model.LogFileExists = System.IO.File.Exists(profile.GetImportLogPath());\n            model.EntityTypeName = profile.EntityType.GetLocalizedEnum(Services.Localization, Services.WorkContext);\n            model.ExistingFiles = profile.GetImportFiles();\n\n            foreach (var file in model.ExistingFiles)\n            {\n                if (file.RelatedType.HasValue)\n                {\n                    file.Label = string.Concat(T(\"Admin.Common.Data\"), \" \", file.RelatedType.Value.GetLocalizedEnum(Services.Localization, Services.WorkContext));\n                }\n            }\n\n            if (profile.ResultInfo.HasValue())\n            {\n                model.ImportResult = XmlHelper.Deserialize<SerializableImportResult>(profile.ResultInfo);\n            }\n\n            if (!forEdit)\n            {\n                return;\n            }\n\n            CsvConfiguration csvConfiguration = null;\n\n            if (profile.FileType == ImportFileType.CSV)\n            {\n                var csvConverter = new CsvConfigurationConverter();\n                csvConfiguration = csvConverter.ConvertFrom<CsvConfiguration>(profile.FileTypeConfiguration) ?? CsvConfiguration.ExcelFriendlyConfiguration;\n\n                model.CsvConfiguration = new CsvConfigurationModel(csvConfiguration);\n            }\n            else\n            {\n                csvConfiguration = CsvConfiguration.ExcelFriendlyConfiguration;\n            }\n\n            // Common configuration.\n            var extraData = XmlHelper.Deserialize<ImportExtraData>(profile.ExtraData);\n            model.ExtraData.NumberOfPictures = extraData.NumberOfPictures;\n\n            // Column mapping.\n            model.AvailableSourceColumns = new List<ColumnMappingItemModel>();\n            model.AvailableEntityProperties = new List<ColumnMappingItemModel>();\n            model.AvailableKeyFieldNames = new List<SelectListItem>();\n            model.ColumnMappings = new List<ColumnMappingItemModel>();\n\n            model.FolderName = profile.GetImportFolder(absolutePath: false);\n\n            try\n            {\n                string[] availableKeyFieldNames = null;\n                string[] disabledDefaultFieldNames = GetDisabledDefaultFieldNames(profile);\n                var mapConverter = new ColumnMapConverter();\n                var storedMap = mapConverter.ConvertFrom<ColumnMap>(profile.ColumnMapping);\n                var map = (invalidMap ?? storedMap) ?? new ColumnMap();\n\n                // Property name to localized property name.\n                var allProperties = _importProfileService.GetImportableEntityProperties(profile.EntityType) ?? new Dictionary<string, string>();\n\n                switch (profile.EntityType)\n                {\n                    case ImportEntityType.Product:\n                        availableKeyFieldNames = ProductImporter.SupportedKeyFields;\n                        break;\n                    case ImportEntityType.Category:\n                        availableKeyFieldNames = CategoryImporter.SupportedKeyFields;\n                        break;\n                    case ImportEntityType.Customer:\n                        availableKeyFieldNames = CustomerImporter.SupportedKeyFields;\n                        break;\n                    case ImportEntityType.NewsLetterSubscription:\n                        availableKeyFieldNames = NewsLetterSubscriptionImporter.SupportedKeyFields;\n                        break;\n                }\n\n                model.AvailableEntityProperties = allProperties\n                    .Select(x =>\n                    {\n                        var mapping = new ColumnMappingItemModel\n                        {\n                            Property = x.Key,\n                            PropertyDescription = x.Value,\n                            IsDefaultDisabled = IsDefaultValueDisabled(x.Key, x.Key, disabledDefaultFieldNames)\n                        };\n\n                        return mapping;\n                    })\n                    .ToList();\n\n                model.AvailableKeyFieldNames = availableKeyFieldNames\n                    .Select(x =>\n                    {\n                        var item = new SelectListItem { Value = x, Text = x };\n\n                        if (x == \"Id\")\n                            item.Text = T(\"Admin.Common.Entity.Fields.Id\");\n                        else if (allProperties.ContainsKey(x))\n                            item.Text = allProperties[x];\n\n                        return item;\n                    })\n                    .ToList();\n\n                model.ColumnMappings = map.Mappings\n                    .Select(x =>\n                    {\n                        var mapping = new ColumnMappingItemModel\n                        {\n                            Column = x.Value.MappedName,\n                            Property = x.Key,\n                            Default = x.Value.Default\n                        };\n\n                        if (x.Value.IgnoreProperty)\n                        {\n                            // Explicitly ignore the property.\n                            mapping.Column = null;\n                            mapping.Default = null;\n                        }\n\n                        mapping.PropertyDescription = GetPropertyDescription(allProperties, mapping.Property);\n                        mapping.IsDefaultDisabled = IsDefaultValueDisabled(mapping.Column, mapping.Property, disabledDefaultFieldNames);\n\n                        return mapping;\n                    })\n                    .ToList();\n\n                var file = model.ExistingFiles.FirstOrDefault(x => !x.RelatedType.HasValue);\n                if (file == null)\n                {\n                    return;\n                }\n\n                using (var stream = new FileStream(file.Path, FileMode.Open, FileAccess.Read, FileShare.Read))\n                {\n                    var dataTable = LightweightDataTable.FromFile(Path.GetFileName(file.Path), stream, stream.Length, csvConfiguration, 0, 1);\n\n                    foreach (var column in dataTable.Columns.Where(x => x.Name.HasValue()))\n                    {\n                        string columnWithoutIndex, columnIndex;\n                        ColumnMap.ParseSourceName(column.Name, out columnWithoutIndex, out columnIndex);\n\n                        model.AvailableSourceColumns.Add(new ColumnMappingItemModel\n                        {\n                            Index = dataTable.Columns.IndexOf(column),\n                            Column = column.Name,\n                            ColumnWithoutIndex = columnWithoutIndex,\n                            ColumnIndex = columnIndex,\n                            PropertyDescription = GetPropertyDescription(allProperties, column.Name)\n                        });\n\n                        // Auto map where field equals property name.\n                        if (!model.ColumnMappings.Any(x => x.Column == column.Name))\n                        {\n                            var kvp = allProperties.FirstOrDefault(x => x.Key.IsCaseInsensitiveEqual(column.Name));\n                            if (kvp.Key.IsEmpty())\n                            {\n                                var alternativeName = LightweightDataTable.GetAlternativeColumnNameFor(column.Name);\n                                kvp = allProperties.FirstOrDefault(x => x.Key.IsCaseInsensitiveEqual(alternativeName));\n                            }\n\n                            if (kvp.Key.HasValue() && !model.ColumnMappings.Any(x => x.Property == kvp.Key))\n                            {\n                                model.ColumnMappings.Add(new ColumnMappingItemModel\n                                {\n                                    Column = column.Name,\n                                    Property = kvp.Key,\n                                    PropertyDescription = kvp.Value,\n                                    IsDefaultDisabled = IsDefaultValueDisabled(column.Name, kvp.Key, disabledDefaultFieldNames)\n                                });\n                            }\n                        }\n                    }\n\n                    // Sorting.\n                    model.AvailableSourceColumns = model.AvailableSourceColumns\n                        .OrderBy(x => x.PropertyDescription)\n                        .ToList();\n\n                    model.AvailableEntityProperties = model.AvailableEntityProperties\n                        .OrderBy(x => x.PropertyDescription)\n                        .ToList();\n\n                    model.ColumnMappings = model.ColumnMappings\n                        .OrderBy(x => x.PropertyDescription)\n                        .ToList();\n                }\n            }\n            catch (Exception ex)\n            {\n                NotifyError(ex, true, false);\n            }\n        }\n\n        #endregion\n\n        #region List / Create\n\n        public ActionResult Index()\n        {\n            return RedirectToAction(\"List\");\n        }\n\n        [Permission(Permissions.Configuration.Import.Read)]\n        public ActionResult List()\n        {\n            var model = new ImportProfileListModel\n            {\n                Profiles = new List<ImportProfileModel>(),\n                AvailableEntityTypes = ImportEntityType.Product.ToSelectList(false).ToList()\n            };\n\n            var lastHistoryEntries = _scheduleTaskService.GetHistoryEntries(0, int.MaxValue, 0, true, true).ToDictionarySafe(x => x.ScheduleTaskId);\n            var profiles = _importProfileService.GetImportProfiles().ToList();\n\n            foreach (var profile in profiles)\n            {\n                var profileModel = new ImportProfileModel();\n                lastHistoryEntries.TryGetValue(profile.SchedulingTaskId, out var lastHistoryEntry);\n\n                PrepareProfileModel(profileModel, profile, lastHistoryEntry, false);\n\n                profileModel.TaskModel = _adminModelHelper.CreateScheduleTaskModel(profile.ScheduleTask, lastHistoryEntry) ?? new ScheduleTaskModel();\n\n                model.Profiles.Add(profileModel);\n            }\n\n            return View(model);\n        }\n\n        [Permission(Permissions.Configuration.Import.Read)]\n        public ActionResult ProfileListDetails(int profileId)\n        {\n            var profile = _importProfileService.GetImportProfileById(profileId);\n            if (profile != null)\n            {\n                var importResult = XmlHelper.Deserialize<SerializableImportResult>(profile.ResultInfo);\n\n                return Json(new\n                {\n                    importResult = this.RenderPartialViewToString(\"~/Administration/Views/Import/ProfileImportResult.cshtml\", importResult)\n                },\n                JsonRequestBehavior.AllowGet);\n            }\n\n            return new EmptyResult();\n        }\n\n        [HttpPost]\n        [Permission(Permissions.Configuration.Import.Create)]\n        public ActionResult Create(ImportProfileModel model)\n        {\n            var importFile = Path.Combine(FileSystemHelper.TempDirTenant(), model.TempFileName.EmptyNull());\n\n            if (System.IO.File.Exists(importFile))\n            {\n                var profile = _importProfileService.InsertImportProfile(model.TempFileName, model.Name, model.EntityType);\n\n                if (profile != null && profile.Id != 0)\n                {\n                    var importFileDestination = Path.Combine(profile.GetImportFolder(true, true), model.TempFileName);\n\n                    FileSystemHelper.CopyFile(importFile, importFileDestination, true, true);\n\n                    return RedirectToAction(\"Edit\", new { id = profile.Id });\n                }\n            }\n            else\n            {\n                NotifyError(T(\"Admin.DataExchange.Import.MissingImportFile\"));\n            }\n\n            return RedirectToAction(\"List\");\n        }\n\n        #endregion\n\n        #region Edit\n\n        [Permission(Permissions.Configuration.Import.Read)]\n        public ActionResult Edit(int id)\n        {\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile == null)\n                return RedirectToAction(\"List\");\n\n            var model = new ImportProfileModel();\n            PrepareProfileModel(model, profile, _scheduleTaskService.GetLastHistoryEntryByTaskId(profile.SchedulingTaskId, true), true);\n\n            return View(model);\n        }\n\n        [Permission(Permissions.Configuration.Import.Update)]\n        [HttpPost, ParameterBasedOnFormName(\"save-continue\", \"continueEditing\")]\n        [FormValueRequired(\"save\", \"save-continue\")]\n        public ActionResult Edit(ImportProfileModel model, bool continueEditing, FormCollection form)\n        {\n            var profile = _importProfileService.GetImportProfileById(model.Id);\n            if (profile == null)\n                return RedirectToAction(\"List\");\n\n            var map = new ColumnMap();\n            var hasErrors = false;\n            var resetMappings = false;\n\n            try\n            {\n                var propertyKeyPrefix = \"ColumnMapping.Property.\";\n                var allPropertyKeys = form.AllKeys.Where(x => x.HasValue() && x.StartsWith(propertyKeyPrefix));\n\n                if (allPropertyKeys.Any())\n                {\n                    var entityProperties = _importProfileService.GetImportableEntityProperties(profile.EntityType);\n\n                    foreach (var key in allPropertyKeys)\n                    {\n                        var index = key.Substring(propertyKeyPrefix.Length);\n                        var property = form[key];\n                        var column = form[\"ColumnMapping.Column.\" + index];\n                        var defaultValue = form[\"ColumnMapping.Default.\" + index];\n\n                        if (column.IsEmpty())\n                        {\n                            // Tell mapper to explicitly ignore the property.\n                            map.AddMapping(property, null, property, \"[IGNOREPROPERTY]\");\n                        }\n                        else if (!column.IsCaseInsensitiveEqual(property) || defaultValue.HasValue())\n                        {\n                            if (defaultValue.HasValue() && GetDisabledDefaultFieldNames(profile).Contains(property))\n                                defaultValue = null;\n\n                            map.AddMapping(property, null, column, defaultValue);\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                hasErrors = true;\n                NotifyError(ex, true, false);\n            }\n\n            if (!ModelState.IsValid || hasErrors)\n            {\n                PrepareProfileModel(model, profile, _scheduleTaskService.GetLastHistoryEntryByTaskId(profile.SchedulingTaskId, true), true, map);\n                return View(model);\n            }\n\n            profile.Name = model.Name;\n            profile.EntityType = model.EntityType;\n            profile.Enabled = model.Enabled;\n            profile.ImportRelatedData = model.ImportRelatedData;\n            profile.Skip = model.Skip ?? 0;\n            profile.Take = model.Take ?? 0;\n            profile.UpdateOnly = model.UpdateOnly;\n            profile.KeyFieldNames = model.KeyFieldNames == null ? null : string.Join(\",\", model.KeyFieldNames);\n\n            try\n            {\n                if (profile.FileType == ImportFileType.CSV && model.CsvConfiguration != null)\n                {\n                    var csvConverter = new CsvConfigurationConverter();\n\n                    var oldCsvConfig = csvConverter.ConvertFrom<CsvConfiguration>(profile.FileTypeConfiguration);\n                    var oldDelimiter = (oldCsvConfig != null ? oldCsvConfig.Delimiter.ToString() : null);\n\n                    // auto reset mappings cause they are invalid. note: delimiter can be whitespaced, so no oldDelimter.HasValue() etc.\n                    resetMappings = (oldDelimiter != model.CsvConfiguration.Delimiter && profile.ColumnMapping.HasValue());\n\n                    profile.FileTypeConfiguration = csvConverter.ConvertTo(model.CsvConfiguration.Clone());\n                }\n                else\n                {\n                    profile.FileTypeConfiguration = null;\n                }\n\n                if (resetMappings)\n                {\n                    profile.ColumnMapping = null;\n                }\n                else\n                {\n                    var mapConverter = new ColumnMapConverter();\n                    profile.ColumnMapping = mapConverter.ConvertTo(map);\n                }\n\n                if (model.ExtraData != null)\n                {\n                    var extraData = new ImportExtraData\n                    {\n                        NumberOfPictures = model.ExtraData.NumberOfPictures\n                    };\n\n                    profile.ExtraData = XmlHelper.Serialize(extraData);\n                }\n            }\n            catch (Exception ex)\n            {\n                hasErrors = true;\n                NotifyError(ex, true, false);\n            }\n\n            if (!hasErrors)\n            {\n                _importProfileService.UpdateImportProfile(profile);\n\n                NotifySuccess(T(\"Admin.Common.DataSuccessfullySaved\"));\n\n                if (resetMappings)\n                {\n                    NotifyWarning(T(\"Admin.DataExchange.ColumnMapping.Validate.MappingsReset\"));\n                }\n            }\n\n            return (continueEditing ? RedirectToAction(\"Edit\", new { id = profile.Id }) : RedirectToAction(\"List\"));\n        }\n\n        [HttpPost]\n        [Permission(Permissions.Configuration.Import.Update)]\n        public ActionResult ResetColumnMappings(int id)\n        {\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile == null)\n                return RedirectToAction(\"List\");\n\n            profile.ColumnMapping = null;\n            _importProfileService.UpdateImportProfile(profile);\n\n            NotifySuccess(T(\"Admin.Common.TaskSuccessfullyProcessed\"));\n\n            return RedirectToAction(\"Edit\", new { id = profile.Id });\n        }\n\n        #endregion\n\n        #region Execute / Delete\n\n        [HttpPost]\n        [Permission(Permissions.Configuration.Import.Execute)]\n        public ActionResult Execute(int id)\n        {\n            // permissions checked internally by DataImporter\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile == null)\n                return RedirectToAction(\"List\");\n\n            var taskParams = new Dictionary<string, string>\n            {\n                { TaskExecutor.CurrentCustomerIdParamName, Services.WorkContext.CurrentCustomer.Id.ToString() },\n                { TaskExecutor.CurrentStoreIdParamName, Services.StoreContext.CurrentStore.Id.ToString() }\n            };\n\n            _taskScheduler.RunSingleTask(profile.SchedulingTaskId, taskParams);\n\n            NotifyInfo(T(\"Admin.System.ScheduleTasks.RunNow.Progress.DataImportTask\"));\n\n            var referrer = Services.WebHelper.GetUrlReferrer();\n            if (referrer.HasValue())\n                return Redirect(referrer);\n\n            return RedirectToAction(\"List\");\n        }\n\n        [HttpPost, ActionName(\"Delete\")]\n        [Permission(Permissions.Configuration.Import.Delete)]\n        public ActionResult DeleteConfirmed(int id)\n        {\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile == null)\n                return RedirectToAction(\"List\");\n\n            try\n            {\n                _importProfileService.DeleteImportProfile(profile);\n\n                NotifySuccess(T(\"Admin.Common.TaskSuccessfullyProcessed\"));\n\n                return RedirectToAction(\"List\");\n            }\n            catch (Exception ex)\n            {\n                NotifyError(ex);\n            }\n\n            return RedirectToAction(\"Edit\", new { id = profile.Id });\n        }\n\n        [HttpPost]\n        [Permission(Permissions.Configuration.Import.Delete)]\n        public ActionResult DeleteImportFile(int id, string name)\n        {\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile != null)\n            {\n                var path = Path.Combine(profile.GetImportFolder(true), name);\n                FileSystemHelper.DeleteFile(path);\n            }\n\n            return RedirectToAction(\"Edit\", new { id });\n        }\n\n        #endregion\n\n        #region Upload / Download\n\n        [HttpPost]\n        [Permission(Permissions.Configuration.Import.Update)]\n        public JsonResult FileUpload(int id)\n        {\n            var success = false;\n            string error = null;\n            string tempFile = \"\";\n\n            var postedFile = Request.ToPostedFileResult();\n            if (postedFile != null)\n            {\n                if (id == 0)\n                {\n                    var path = Path.Combine(FileSystemHelper.TempDirTenant(), postedFile.FileName);\n                    FileSystemHelper.DeleteFile(path);\n\n                    success = postedFile.Stream.ToFile(path);\n                    if (success)\n                    {\n                        success = IsValidImportFile(path, out error);\n                        if (success)\n                            tempFile = postedFile.FileName;\n                    }\n                }\n                else\n                {\n                    var profile = _importProfileService.GetImportProfileById(id);\n                    if (profile != null)\n                    {\n                        var files = profile.GetImportFiles(false);\n                        var file = files.FirstOrDefault();\n                        if (file != null && !postedFile.FileExtension.IsCaseInsensitiveEqual(file.Extension))\n                        {\n                            error = T(\"Admin.Common.FileTypeMustEqual\", file.Extension.Substring(1).ToUpper());\n                        }\n\n                        if (!error.HasValue())\n                        {\n                            var folder = profile.GetImportFolder(true, true);\n                            var fileName = Path.GetFileName(postedFile.FileName);\n                            var path = Path.Combine(folder, fileName);\n\n                            success = postedFile.Stream.ToFile(path);\n                            if (success)\n                            {\n                                success = IsValidImportFile(path, out error);\n                                if (success)\n                                {\n                                    var fileType = Path.GetExtension(fileName).IsCaseInsensitiveEqual(\".xlsx\") ? ImportFileType.XLSX : ImportFileType.CSV;\n                                    if (fileType != profile.FileType)\n                                    {\n                                        var tmp = new ImportFile(path);\n                                        if (!tmp.RelatedType.HasValue)\n                                        {\n                                            profile.FileType = fileType;\n                                            _importProfileService.UpdateImportProfile(profile);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!success && error.IsEmpty())\n            {\n                error = T(\"Admin.Common.UploadFileFailed\");\n            }\n            if (error.HasValue())\n            {\n                NotifyError(error);\n            }\n\n            return Json(new { success, tempFile, error, name = postedFile.FileName, ext = postedFile.FileExtension });\n        }\n\n        [Permission(Permissions.Configuration.Import.Read)]\n        public ActionResult DownloadLogFile(int id)\n        {\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile != null)\n            {\n                var path = profile.GetImportLogPath();\n                if (System.IO.File.Exists(path))\n                {\n                    try\n                    {\n                        var stream = new FileStream(path, FileMode.Open);\n                        var result = new FileStreamResult(stream, MediaTypeNames.Text.Plain);\n\n                        return result;\n                    }\n                    catch (IOException)\n                    {\n                        NotifyWarning(T(\"Admin.Common.FileInUse\"));\n                    }\n                }\n            }\n\n            return RedirectToAction(\"List\");\n        }\n\n        [HttpGet]\n        public ActionResult DownloadImportFile(int id, string name)\n        {\n            if (PathHelper.HasInvalidFileNameChars(name))\n            {\n                return new HttpStatusCodeResult(HttpStatusCode.BadRequest, \"Invalid file name.\");\n            }\n\n            string message = null;\n\n            if (Services.Permissions.Authorize(Permissions.Configuration.Import.Read))\n            {\n                var profile = _importProfileService.GetImportProfileById(id);\n                if (profile != null)\n                {\n                    var path = Path.Combine(profile.GetImportFolder(true), name);\n\n                    if (!System.IO.File.Exists(path))\n                    {\n                        path = Path.Combine(profile.GetImportFolder(false), name);\n                    }\n\n                    if (System.IO.File.Exists(path))\n                    {\n                        try\n                        {\n                            var stream = new FileStream(path, FileMode.Open);\n\n                            var result = new FileStreamResult(stream, MimeTypes.MapNameToMimeType(path))\n                            {\n                                FileDownloadName = Path.GetFileName(path)\n                            };\n\n                            return result;\n                        }\n                        catch (IOException)\n                        {\n                            message = T(\"Admin.Common.FileInUse\");\n                        }\n                    }\n                }\n            }\n            else\n            {\n                message = T(\"Admin.AccessDenied.Description\");\n            }\n\n            if (message.IsEmpty())\n            {\n                message = T(\"Admin.Common.ResourceNotFound\");\n            }\n\n            return File(Encoding.UTF8.GetBytes(message), MediaTypeNames.Text.Plain, \"DownloadImportFile.txt\");\n        }\n\n        #endregion\n    }\n}"], "fixing_code": ["using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Mime;\nusing System.Text;\nusing System.Web.Mvc;\nusing SmartStore.Admin.Models.DataExchange;\nusing SmartStore.Admin.Models.Tasks;\nusing SmartStore.Core;\nusing SmartStore.Core.Domain;\nusing SmartStore.Core.Domain.DataExchange;\nusing SmartStore.Core.Domain.Tasks;\nusing SmartStore.Core.IO;\nusing SmartStore.Core.Security;\nusing SmartStore.Services.Catalog.Importer;\nusing SmartStore.Services.Customers.Importer;\nusing SmartStore.Services.DataExchange.Csv;\nusing SmartStore.Services.DataExchange.Import;\nusing SmartStore.Services.Localization;\nusing SmartStore.Services.Messages.Importer;\nusing SmartStore.Services.Tasks;\nusing SmartStore.Utilities;\nusing SmartStore.Web.Framework;\nusing SmartStore.Web.Framework.Controllers;\nusing SmartStore.Web.Framework.Filters;\nusing SmartStore.Web.Framework.Security;\n\nnamespace SmartStore.Admin.Controllers\n{\n    [AdminAuthorize]\n    public class ImportController : AdminControllerBase\n    {\n        private readonly IImportProfileService _importProfileService;\n        private readonly ITaskScheduler _taskScheduler;\n        private readonly IScheduleTaskService _scheduleTaskService;\n        private readonly AdminModelHelper _adminModelHelper;\n\n        public ImportController(\n            IImportProfileService importService,\n            ITaskScheduler taskScheduler,\n            IScheduleTaskService scheduleTaskService,\n            AdminModelHelper adminModelHelper)\n        {\n            _importProfileService = importService;\n            _taskScheduler = taskScheduler;\n            _scheduleTaskService = scheduleTaskService;\n            _adminModelHelper = adminModelHelper;\n        }\n\n        #region Utilities\n\n        private bool IsValidImportFile(string path, out string error)\n        {\n            error = null;\n\n            try\n            {\n                using (var stream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read))\n                {\n                    var unused = LightweightDataTable.FromFile(path, stream, stream.Length, CsvConfiguration.ExcelFriendlyConfiguration, 0, 1);\n                }\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                error = ex.ToAllMessages();\n                FileSystemHelper.DeleteFile(path);\n                return false;\n            }\n        }\n\n        private bool IsDefaultValueDisabled(string column, string property, string[] disabledFieldNames)\n        {\n            if (disabledFieldNames.Contains(property))\n                return true;\n\n            string columnWithoutIndex, columnIndex;\n            if (ColumnMap.ParseSourceName(property, out columnWithoutIndex, out columnIndex))\n                return disabledFieldNames.Contains(columnWithoutIndex);\n\n            return false;\n        }\n\n        private string[] GetDisabledDefaultFieldNames(ImportProfile profile)\n        {\n            switch (profile.EntityType)\n            {\n                case ImportEntityType.Product:\n                    return new string[] { \"Name\", \"Sku\", \"ManufacturerPartNumber\", \"Gtin\", \"SeName\" };\n                case ImportEntityType.Category:\n                    return new string[] { \"Name\", \"SeName\" };\n                case ImportEntityType.Customer:\n                    return new string[] { \"CustomerGuid\", \"Email\" };\n                case ImportEntityType.NewsLetterSubscription:\n                    return new string[] { \"Email\" };\n                default:\n                    return new string[0];\n            }\n        }\n\n        private string GetPropertyDescription(Dictionary<string, string> allProperties, string property)\n        {\n            if (property.HasValue() && allProperties.ContainsKey(property))\n            {\n                var result = allProperties[property];\n                if (result.HasValue())\n                    return result;\n            }\n            return property;\n        }\n\n        private void PrepareProfileModel(\n            ImportProfileModel model,\n            ImportProfile profile,\n            ScheduleTaskHistory lastHistoryEntry,\n            bool forEdit,\n            ColumnMap invalidMap = null)\n        {\n            model.Id = profile.Id;\n            model.Name = profile.Name;\n            model.EntityType = profile.EntityType;\n            model.Enabled = profile.Enabled;\n            model.ImportRelatedData = profile.ImportRelatedData;\n            model.Skip = profile.Skip == 0 ? (int?)null : profile.Skip;\n            model.Take = profile.Take == 0 ? (int?)null : profile.Take;\n            model.UpdateOnly = profile.UpdateOnly;\n            model.KeyFieldNames = profile.KeyFieldNames.SplitSafe(\",\").Distinct().ToArray();\n            model.ScheduleTaskId = profile.SchedulingTaskId;\n            model.ScheduleTaskName = profile.ScheduleTask.Name.NaIfEmpty();\n            model.IsTaskRunning = lastHistoryEntry?.IsRunning ?? false;\n            model.IsTaskEnabled = profile.ScheduleTask.Enabled;\n            model.LogFileExists = System.IO.File.Exists(profile.GetImportLogPath());\n            model.EntityTypeName = profile.EntityType.GetLocalizedEnum(Services.Localization, Services.WorkContext);\n            model.ExistingFiles = profile.GetImportFiles();\n\n            foreach (var file in model.ExistingFiles)\n            {\n                if (file.RelatedType.HasValue)\n                {\n                    file.Label = string.Concat(T(\"Admin.Common.Data\"), \" \", file.RelatedType.Value.GetLocalizedEnum(Services.Localization, Services.WorkContext));\n                }\n            }\n\n            if (profile.ResultInfo.HasValue())\n            {\n                model.ImportResult = XmlHelper.Deserialize<SerializableImportResult>(profile.ResultInfo);\n            }\n\n            if (!forEdit)\n            {\n                return;\n            }\n\n            CsvConfiguration csvConfiguration = null;\n\n            if (profile.FileType == ImportFileType.CSV)\n            {\n                var csvConverter = new CsvConfigurationConverter();\n                csvConfiguration = csvConverter.ConvertFrom<CsvConfiguration>(profile.FileTypeConfiguration) ?? CsvConfiguration.ExcelFriendlyConfiguration;\n\n                model.CsvConfiguration = new CsvConfigurationModel(csvConfiguration);\n            }\n            else\n            {\n                csvConfiguration = CsvConfiguration.ExcelFriendlyConfiguration;\n            }\n\n            // Common configuration.\n            var extraData = XmlHelper.Deserialize<ImportExtraData>(profile.ExtraData);\n            model.ExtraData.NumberOfPictures = extraData.NumberOfPictures;\n\n            // Column mapping.\n            model.AvailableSourceColumns = new List<ColumnMappingItemModel>();\n            model.AvailableEntityProperties = new List<ColumnMappingItemModel>();\n            model.AvailableKeyFieldNames = new List<SelectListItem>();\n            model.ColumnMappings = new List<ColumnMappingItemModel>();\n\n            model.FolderName = profile.GetImportFolder(absolutePath: false);\n\n            try\n            {\n                string[] availableKeyFieldNames = null;\n                string[] disabledDefaultFieldNames = GetDisabledDefaultFieldNames(profile);\n                var mapConverter = new ColumnMapConverter();\n                var storedMap = mapConverter.ConvertFrom<ColumnMap>(profile.ColumnMapping);\n                var map = (invalidMap ?? storedMap) ?? new ColumnMap();\n\n                // Property name to localized property name.\n                var allProperties = _importProfileService.GetImportableEntityProperties(profile.EntityType) ?? new Dictionary<string, string>();\n\n                switch (profile.EntityType)\n                {\n                    case ImportEntityType.Product:\n                        availableKeyFieldNames = ProductImporter.SupportedKeyFields;\n                        break;\n                    case ImportEntityType.Category:\n                        availableKeyFieldNames = CategoryImporter.SupportedKeyFields;\n                        break;\n                    case ImportEntityType.Customer:\n                        availableKeyFieldNames = CustomerImporter.SupportedKeyFields;\n                        break;\n                    case ImportEntityType.NewsLetterSubscription:\n                        availableKeyFieldNames = NewsLetterSubscriptionImporter.SupportedKeyFields;\n                        break;\n                }\n\n                model.AvailableEntityProperties = allProperties\n                    .Select(x =>\n                    {\n                        var mapping = new ColumnMappingItemModel\n                        {\n                            Property = x.Key,\n                            PropertyDescription = x.Value,\n                            IsDefaultDisabled = IsDefaultValueDisabled(x.Key, x.Key, disabledDefaultFieldNames)\n                        };\n\n                        return mapping;\n                    })\n                    .ToList();\n\n                model.AvailableKeyFieldNames = availableKeyFieldNames\n                    .Select(x =>\n                    {\n                        var item = new SelectListItem { Value = x, Text = x };\n\n                        if (x == \"Id\")\n                            item.Text = T(\"Admin.Common.Entity.Fields.Id\");\n                        else if (allProperties.ContainsKey(x))\n                            item.Text = allProperties[x];\n\n                        return item;\n                    })\n                    .ToList();\n\n                model.ColumnMappings = map.Mappings\n                    .Select(x =>\n                    {\n                        var mapping = new ColumnMappingItemModel\n                        {\n                            Column = x.Value.MappedName,\n                            Property = x.Key,\n                            Default = x.Value.Default\n                        };\n\n                        if (x.Value.IgnoreProperty)\n                        {\n                            // Explicitly ignore the property.\n                            mapping.Column = null;\n                            mapping.Default = null;\n                        }\n\n                        mapping.PropertyDescription = GetPropertyDescription(allProperties, mapping.Property);\n                        mapping.IsDefaultDisabled = IsDefaultValueDisabled(mapping.Column, mapping.Property, disabledDefaultFieldNames);\n\n                        return mapping;\n                    })\n                    .ToList();\n\n                var file = model.ExistingFiles.FirstOrDefault(x => !x.RelatedType.HasValue);\n                if (file == null)\n                {\n                    return;\n                }\n\n                using (var stream = new FileStream(file.Path, FileMode.Open, FileAccess.Read, FileShare.Read))\n                {\n                    var dataTable = LightweightDataTable.FromFile(Path.GetFileName(file.Path), stream, stream.Length, csvConfiguration, 0, 1);\n\n                    foreach (var column in dataTable.Columns.Where(x => x.Name.HasValue()))\n                    {\n                        string columnWithoutIndex, columnIndex;\n                        ColumnMap.ParseSourceName(column.Name, out columnWithoutIndex, out columnIndex);\n\n                        model.AvailableSourceColumns.Add(new ColumnMappingItemModel\n                        {\n                            Index = dataTable.Columns.IndexOf(column),\n                            Column = column.Name,\n                            ColumnWithoutIndex = columnWithoutIndex,\n                            ColumnIndex = columnIndex,\n                            PropertyDescription = GetPropertyDescription(allProperties, column.Name)\n                        });\n\n                        // Auto map where field equals property name.\n                        if (!model.ColumnMappings.Any(x => x.Column == column.Name))\n                        {\n                            var kvp = allProperties.FirstOrDefault(x => x.Key.IsCaseInsensitiveEqual(column.Name));\n                            if (kvp.Key.IsEmpty())\n                            {\n                                var alternativeName = LightweightDataTable.GetAlternativeColumnNameFor(column.Name);\n                                kvp = allProperties.FirstOrDefault(x => x.Key.IsCaseInsensitiveEqual(alternativeName));\n                            }\n\n                            if (kvp.Key.HasValue() && !model.ColumnMappings.Any(x => x.Property == kvp.Key))\n                            {\n                                model.ColumnMappings.Add(new ColumnMappingItemModel\n                                {\n                                    Column = column.Name,\n                                    Property = kvp.Key,\n                                    PropertyDescription = kvp.Value,\n                                    IsDefaultDisabled = IsDefaultValueDisabled(column.Name, kvp.Key, disabledDefaultFieldNames)\n                                });\n                            }\n                        }\n                    }\n\n                    // Sorting.\n                    model.AvailableSourceColumns = model.AvailableSourceColumns\n                        .OrderBy(x => x.PropertyDescription)\n                        .ToList();\n\n                    model.AvailableEntityProperties = model.AvailableEntityProperties\n                        .OrderBy(x => x.PropertyDescription)\n                        .ToList();\n\n                    model.ColumnMappings = model.ColumnMappings\n                        .OrderBy(x => x.PropertyDescription)\n                        .ToList();\n                }\n            }\n            catch (Exception ex)\n            {\n                NotifyError(ex, true, false);\n            }\n        }\n\n        #endregion\n\n        #region List / Create\n\n        public ActionResult Index()\n        {\n            return RedirectToAction(\"List\");\n        }\n\n        [Permission(Permissions.Configuration.Import.Read)]\n        public ActionResult List()\n        {\n            var model = new ImportProfileListModel\n            {\n                Profiles = new List<ImportProfileModel>(),\n                AvailableEntityTypes = ImportEntityType.Product.ToSelectList(false).ToList()\n            };\n\n            var lastHistoryEntries = _scheduleTaskService.GetHistoryEntries(0, int.MaxValue, 0, true, true).ToDictionarySafe(x => x.ScheduleTaskId);\n            var profiles = _importProfileService.GetImportProfiles().ToList();\n\n            foreach (var profile in profiles)\n            {\n                var profileModel = new ImportProfileModel();\n                lastHistoryEntries.TryGetValue(profile.SchedulingTaskId, out var lastHistoryEntry);\n\n                PrepareProfileModel(profileModel, profile, lastHistoryEntry, false);\n\n                profileModel.TaskModel = _adminModelHelper.CreateScheduleTaskModel(profile.ScheduleTask, lastHistoryEntry) ?? new ScheduleTaskModel();\n\n                model.Profiles.Add(profileModel);\n            }\n\n            return View(model);\n        }\n\n        [Permission(Permissions.Configuration.Import.Read)]\n        public ActionResult ProfileListDetails(int profileId)\n        {\n            var profile = _importProfileService.GetImportProfileById(profileId);\n            if (profile != null)\n            {\n                var importResult = XmlHelper.Deserialize<SerializableImportResult>(profile.ResultInfo);\n\n                return Json(new\n                {\n                    importResult = this.RenderPartialViewToString(\"~/Administration/Views/Import/ProfileImportResult.cshtml\", importResult)\n                },\n                JsonRequestBehavior.AllowGet);\n            }\n\n            return new EmptyResult();\n        }\n\n        [HttpPost]\n        [Permission(Permissions.Configuration.Import.Create)]\n        public ActionResult Create(ImportProfileModel model)\n        {\n            if (PathHelper.HasInvalidFileNameChars(model.TempFileName))\n            {\n                return new HttpStatusCodeResult(HttpStatusCode.BadRequest, \"Invalid file name.\");\n            }\n\n            var importFile = Path.Combine(FileSystemHelper.TempDirTenant(), model.TempFileName.EmptyNull());\n\n            if (System.IO.File.Exists(importFile))\n            {\n                var profile = _importProfileService.InsertImportProfile(model.TempFileName, model.Name, model.EntityType);\n\n                if (profile != null && profile.Id != 0)\n                {\n                    var importFileDestination = Path.Combine(profile.GetImportFolder(true, true), model.TempFileName);\n\n                    FileSystemHelper.CopyFile(importFile, importFileDestination, true, true);\n\n                    return RedirectToAction(\"Edit\", new { id = profile.Id });\n                }\n            }\n            else\n            {\n                NotifyError(T(\"Admin.DataExchange.Import.MissingImportFile\"));\n            }\n\n            return RedirectToAction(\"List\");\n        }\n\n        #endregion\n\n        #region Edit\n\n        [Permission(Permissions.Configuration.Import.Read)]\n        public ActionResult Edit(int id)\n        {\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile == null)\n                return RedirectToAction(\"List\");\n\n            var model = new ImportProfileModel();\n            PrepareProfileModel(model, profile, _scheduleTaskService.GetLastHistoryEntryByTaskId(profile.SchedulingTaskId, true), true);\n\n            return View(model);\n        }\n\n        [Permission(Permissions.Configuration.Import.Update)]\n        [HttpPost, ParameterBasedOnFormName(\"save-continue\", \"continueEditing\")]\n        [FormValueRequired(\"save\", \"save-continue\")]\n        public ActionResult Edit(ImportProfileModel model, bool continueEditing, FormCollection form)\n        {\n            var profile = _importProfileService.GetImportProfileById(model.Id);\n            if (profile == null)\n                return RedirectToAction(\"List\");\n\n            var map = new ColumnMap();\n            var hasErrors = false;\n            var resetMappings = false;\n\n            try\n            {\n                var propertyKeyPrefix = \"ColumnMapping.Property.\";\n                var allPropertyKeys = form.AllKeys.Where(x => x.HasValue() && x.StartsWith(propertyKeyPrefix));\n\n                if (allPropertyKeys.Any())\n                {\n                    var entityProperties = _importProfileService.GetImportableEntityProperties(profile.EntityType);\n\n                    foreach (var key in allPropertyKeys)\n                    {\n                        var index = key.Substring(propertyKeyPrefix.Length);\n                        var property = form[key];\n                        var column = form[\"ColumnMapping.Column.\" + index];\n                        var defaultValue = form[\"ColumnMapping.Default.\" + index];\n\n                        if (column.IsEmpty())\n                        {\n                            // Tell mapper to explicitly ignore the property.\n                            map.AddMapping(property, null, property, \"[IGNOREPROPERTY]\");\n                        }\n                        else if (!column.IsCaseInsensitiveEqual(property) || defaultValue.HasValue())\n                        {\n                            if (defaultValue.HasValue() && GetDisabledDefaultFieldNames(profile).Contains(property))\n                                defaultValue = null;\n\n                            map.AddMapping(property, null, column, defaultValue);\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                hasErrors = true;\n                NotifyError(ex, true, false);\n            }\n\n            if (!ModelState.IsValid || hasErrors)\n            {\n                PrepareProfileModel(model, profile, _scheduleTaskService.GetLastHistoryEntryByTaskId(profile.SchedulingTaskId, true), true, map);\n                return View(model);\n            }\n\n            profile.Name = model.Name;\n            profile.EntityType = model.EntityType;\n            profile.Enabled = model.Enabled;\n            profile.ImportRelatedData = model.ImportRelatedData;\n            profile.Skip = model.Skip ?? 0;\n            profile.Take = model.Take ?? 0;\n            profile.UpdateOnly = model.UpdateOnly;\n            profile.KeyFieldNames = model.KeyFieldNames == null ? null : string.Join(\",\", model.KeyFieldNames);\n\n            try\n            {\n                if (profile.FileType == ImportFileType.CSV && model.CsvConfiguration != null)\n                {\n                    var csvConverter = new CsvConfigurationConverter();\n\n                    var oldCsvConfig = csvConverter.ConvertFrom<CsvConfiguration>(profile.FileTypeConfiguration);\n                    var oldDelimiter = (oldCsvConfig != null ? oldCsvConfig.Delimiter.ToString() : null);\n\n                    // auto reset mappings cause they are invalid. note: delimiter can be whitespaced, so no oldDelimter.HasValue() etc.\n                    resetMappings = (oldDelimiter != model.CsvConfiguration.Delimiter && profile.ColumnMapping.HasValue());\n\n                    profile.FileTypeConfiguration = csvConverter.ConvertTo(model.CsvConfiguration.Clone());\n                }\n                else\n                {\n                    profile.FileTypeConfiguration = null;\n                }\n\n                if (resetMappings)\n                {\n                    profile.ColumnMapping = null;\n                }\n                else\n                {\n                    var mapConverter = new ColumnMapConverter();\n                    profile.ColumnMapping = mapConverter.ConvertTo(map);\n                }\n\n                if (model.ExtraData != null)\n                {\n                    var extraData = new ImportExtraData\n                    {\n                        NumberOfPictures = model.ExtraData.NumberOfPictures\n                    };\n\n                    profile.ExtraData = XmlHelper.Serialize(extraData);\n                }\n            }\n            catch (Exception ex)\n            {\n                hasErrors = true;\n                NotifyError(ex, true, false);\n            }\n\n            if (!hasErrors)\n            {\n                _importProfileService.UpdateImportProfile(profile);\n\n                NotifySuccess(T(\"Admin.Common.DataSuccessfullySaved\"));\n\n                if (resetMappings)\n                {\n                    NotifyWarning(T(\"Admin.DataExchange.ColumnMapping.Validate.MappingsReset\"));\n                }\n            }\n\n            return (continueEditing ? RedirectToAction(\"Edit\", new { id = profile.Id }) : RedirectToAction(\"List\"));\n        }\n\n        [HttpPost]\n        [Permission(Permissions.Configuration.Import.Update)]\n        public ActionResult ResetColumnMappings(int id)\n        {\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile == null)\n                return RedirectToAction(\"List\");\n\n            profile.ColumnMapping = null;\n            _importProfileService.UpdateImportProfile(profile);\n\n            NotifySuccess(T(\"Admin.Common.TaskSuccessfullyProcessed\"));\n\n            return RedirectToAction(\"Edit\", new { id = profile.Id });\n        }\n\n        #endregion\n\n        #region Execute / Delete\n\n        [HttpPost]\n        [Permission(Permissions.Configuration.Import.Execute)]\n        public ActionResult Execute(int id)\n        {\n            // permissions checked internally by DataImporter\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile == null)\n                return RedirectToAction(\"List\");\n\n            var taskParams = new Dictionary<string, string>\n            {\n                { TaskExecutor.CurrentCustomerIdParamName, Services.WorkContext.CurrentCustomer.Id.ToString() },\n                { TaskExecutor.CurrentStoreIdParamName, Services.StoreContext.CurrentStore.Id.ToString() }\n            };\n\n            _taskScheduler.RunSingleTask(profile.SchedulingTaskId, taskParams);\n\n            NotifyInfo(T(\"Admin.System.ScheduleTasks.RunNow.Progress.DataImportTask\"));\n\n            var referrer = Services.WebHelper.GetUrlReferrer();\n            if (referrer.HasValue())\n                return Redirect(referrer);\n\n            return RedirectToAction(\"List\");\n        }\n\n        [HttpPost, ActionName(\"Delete\")]\n        [Permission(Permissions.Configuration.Import.Delete)]\n        public ActionResult DeleteConfirmed(int id)\n        {\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile == null)\n                return RedirectToAction(\"List\");\n\n            try\n            {\n                _importProfileService.DeleteImportProfile(profile);\n\n                NotifySuccess(T(\"Admin.Common.TaskSuccessfullyProcessed\"));\n\n                return RedirectToAction(\"List\");\n            }\n            catch (Exception ex)\n            {\n                NotifyError(ex);\n            }\n\n            return RedirectToAction(\"Edit\", new { id = profile.Id });\n        }\n\n        [HttpPost]\n        [Permission(Permissions.Configuration.Import.Delete)]\n        public ActionResult DeleteImportFile(int id, string name)\n        {\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile != null)\n            {\n                var path = Path.Combine(profile.GetImportFolder(true), name);\n                FileSystemHelper.DeleteFile(path);\n            }\n\n            return RedirectToAction(\"Edit\", new { id });\n        }\n\n        #endregion\n\n        #region Upload / Download\n\n        [HttpPost]\n        [Permission(Permissions.Configuration.Import.Update)]\n        public JsonResult FileUpload(int id)\n        {\n            var success = false;\n            string error = null;\n            string tempFile = \"\";\n\n            var postedFile = Request.ToPostedFileResult();\n            if (postedFile != null)\n            {\n                if (id == 0)\n                {\n                    var path = Path.Combine(FileSystemHelper.TempDirTenant(), postedFile.FileName);\n                    FileSystemHelper.DeleteFile(path);\n\n                    success = postedFile.Stream.ToFile(path);\n                    if (success)\n                    {\n                        success = IsValidImportFile(path, out error);\n                        if (success)\n                            tempFile = postedFile.FileName;\n                    }\n                }\n                else\n                {\n                    var profile = _importProfileService.GetImportProfileById(id);\n                    if (profile != null)\n                    {\n                        var files = profile.GetImportFiles(false);\n                        var file = files.FirstOrDefault();\n                        if (file != null && !postedFile.FileExtension.IsCaseInsensitiveEqual(file.Extension))\n                        {\n                            error = T(\"Admin.Common.FileTypeMustEqual\", file.Extension.Substring(1).ToUpper());\n                        }\n\n                        if (!error.HasValue())\n                        {\n                            var folder = profile.GetImportFolder(true, true);\n                            var fileName = Path.GetFileName(postedFile.FileName);\n                            var path = Path.Combine(folder, fileName);\n\n                            success = postedFile.Stream.ToFile(path);\n                            if (success)\n                            {\n                                success = IsValidImportFile(path, out error);\n                                if (success)\n                                {\n                                    var fileType = Path.GetExtension(fileName).IsCaseInsensitiveEqual(\".xlsx\") ? ImportFileType.XLSX : ImportFileType.CSV;\n                                    if (fileType != profile.FileType)\n                                    {\n                                        var tmp = new ImportFile(path);\n                                        if (!tmp.RelatedType.HasValue)\n                                        {\n                                            profile.FileType = fileType;\n                                            _importProfileService.UpdateImportProfile(profile);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!success && error.IsEmpty())\n            {\n                error = T(\"Admin.Common.UploadFileFailed\");\n            }\n            if (error.HasValue())\n            {\n                NotifyError(error);\n            }\n\n            return Json(new { success, tempFile, error, name = postedFile.FileName, ext = postedFile.FileExtension });\n        }\n\n        [Permission(Permissions.Configuration.Import.Read)]\n        public ActionResult DownloadLogFile(int id)\n        {\n            var profile = _importProfileService.GetImportProfileById(id);\n            if (profile != null)\n            {\n                var path = profile.GetImportLogPath();\n                if (System.IO.File.Exists(path))\n                {\n                    try\n                    {\n                        var stream = new FileStream(path, FileMode.Open);\n                        var result = new FileStreamResult(stream, MediaTypeNames.Text.Plain);\n\n                        return result;\n                    }\n                    catch (IOException)\n                    {\n                        NotifyWarning(T(\"Admin.Common.FileInUse\"));\n                    }\n                }\n            }\n\n            return RedirectToAction(\"List\");\n        }\n\n        [HttpGet]\n        public ActionResult DownloadImportFile(int id, string name)\n        {\n            if (PathHelper.HasInvalidFileNameChars(name))\n            {\n                return new HttpStatusCodeResult(HttpStatusCode.BadRequest, \"Invalid file name.\");\n            }\n\n            string message = null;\n\n            if (Services.Permissions.Authorize(Permissions.Configuration.Import.Read))\n            {\n                var profile = _importProfileService.GetImportProfileById(id);\n                if (profile != null)\n                {\n                    var path = Path.Combine(profile.GetImportFolder(true), name);\n\n                    if (!System.IO.File.Exists(path))\n                    {\n                        path = Path.Combine(profile.GetImportFolder(false), name);\n                    }\n\n                    if (System.IO.File.Exists(path))\n                    {\n                        try\n                        {\n                            var stream = new FileStream(path, FileMode.Open);\n\n                            var result = new FileStreamResult(stream, MimeTypes.MapNameToMimeType(path))\n                            {\n                                FileDownloadName = Path.GetFileName(path)\n                            };\n\n                            return result;\n                        }\n                        catch (IOException)\n                        {\n                            message = T(\"Admin.Common.FileInUse\");\n                        }\n                    }\n                }\n            }\n            else\n            {\n                message = T(\"Admin.AccessDenied.Description\");\n            }\n\n            if (message.IsEmpty())\n            {\n                message = T(\"Admin.Common.ResourceNotFound\");\n            }\n\n            return File(Encoding.UTF8.GetBytes(message), MediaTypeNames.Text.Plain, \"DownloadImportFile.txt\");\n        }\n\n        #endregion\n    }\n}"], "filenames": ["src/Presentation/SmartStore.Web/Administration/Controllers/ImportController.cs"], "buggy_code_start_loc": [386], "buggy_code_end_loc": [386], "fixing_code_start_loc": [387], "fixing_code_end_loc": [392], "type": "CWE-22", "message": "An issue was discovered in Smartstore (aka SmartStoreNET) before 4.1.0. Administration/Controllers/ImportController.cs allows path traversal (for copy and delete actions) in the ImportController.Create method via a TempFileName field.", "other": {"cve": {"id": "CVE-2020-36364", "sourceIdentifier": "cve@mitre.org", "published": "2021-05-19T19:15:08.267", "lastModified": "2021-05-25T18:24:36.400", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in Smartstore (aka SmartStoreNET) before 4.1.0. Administration/Controllers/ImportController.cs allows path traversal (for copy and delete actions) in the ImportController.Create method via a TempFileName field."}, {"lang": "es", "value": "Se detect\u00f3 un problema en Smartstore (tambi\u00e9n se conoce como SmartStoreNET) versiones anteriores a 4.1.0.&#xa0;El archivo Administration/Controllers/ImportController.cs permite saltar la ruta (para copiar y eliminar acciones) en el m\u00e9todo ImportController.Create por medio de un campo TempFileName"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:smartstore:smartstorenet:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.1.0", "matchCriteriaId": "F00DD480-1853-4312-9C94-0928D81690C9"}]}]}], "references": [{"url": "https://github.com/smartstore/SmartStoreNET/commit/5ab1e37dc8d6415d04354e1a116f3d82e9555f5c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/smartstore/SmartStoreNET/issues/2112", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/smartstore/SmartStoreNET/commit/5ab1e37dc8d6415d04354e1a116f3d82e9555f5c"}}